
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьГрафикРаботыРесурсовОбъекта(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписейГрафикРаботыРесурсов = РегистрыСведений.ГрафикРаботыРесурсов.СоздатьНаборЗаписей();
	НаборЗаписейГрафикРаботыРесурсов.ДокументОбъект = Объект;
	НаборЗаписейГрафикРаботыРесурсов.ОтменаПроведения();
	
КонецПроцедуры // УдалитьГрафикРаботыРесурсовОбъекта()

// Формирование графика работ ресурсов по заказ-наряду
//
Процедура  ГрафикРаботыРесурсовПоЗаказНаряду(Документ, ДетальноеПланирование = Неопределено) Экспорт
	
	// Очистим регистр ГрафикРаботыРесурсов
	НаборЗаписейГрафикРаботыРесурсов = РегистрыСведений.ГрафикРаботыРесурсов.СоздатьНаборЗаписей();
	НаборЗаписейГрафикРаботыРесурсов.ДокументОбъект = Документ;
	НаборЗаписейГрафикРаботыРесурсов.ОтменаПроведения();
	
	ДетальноеПланирование = (ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРемонт") И Документ.ХозОперация = Справочники.ХозОперации.ПланРемонта);
	
	НаборЗаписей = СформироватьТаблицуНабораЗаписей();
	
	// !!! доплнить до ЗН
	Если НЕ ДетальноеПланирование Тогда
		// получим исполнителей
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонтПланирование.Исполнитель,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаРемонтПланирование.РабочееМесто = ЗНАЧЕНИЕ(Справочник.Цеха.ПустаяСсылка)
		|			ТОГДА ЗаявкаНаРемонтПланирование.Ссылка.Цех
		|		ИНАЧЕ ЗаявкаНаРемонтПланирование.РабочееМесто
		|	КОНЕЦ КАК РабочееМесто
		|ИЗ
		|	Документ.ЗаявкаНаРемонт.Планирование КАК ЗаявкаНаРемонтПланирование
		|ГДЕ
		|	ЗаявкаНаРемонтПланирование.Ссылка = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаРемонтПланирование.Исполнитель,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаРемонтПланирование.РабочееМесто = ЗНАЧЕНИЕ(Справочник.Цеха.ПустаяСсылка)
		|			ТОГДА ЗаявкаНаРемонтПланирование.Ссылка.Цех
		|		ИНАЧЕ ЗаявкаНаРемонтПланирование.РабочееМесто
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка),
		|	ЗаявкаНаРемонт.Цех
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	ЗаявкаНаРемонт.Ссылка = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		ВыборкаИсполнителей = Запрос.Выполнить().Выбрать();
		
		ДатаНачала = Документ.ДатаНачала;
		Если ЕстьРеквизит(Документ, "ДатаСоздания") Тогда
			Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
				ДатаНачала = Документ.ДатаСоздания;
			ИначеЕсли НЕ ЗначениеЗаполнено(НачалоДня(ДатаНачала)) Тогда
				ДатаНачала = НачалоДня(Документ.ДатаСоздания)+Час(ДатаНачала)*60*60+Минута(ДатаНачала)*60+Секунда(ДатаНачала);
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
				ДатаНачала = Документ.Дата;
			ИначеЕсли НЕ ЗначениеЗаполнено(НачалоДня(ДатаНачала)) Тогда
				ДатаНачала = НачалоДня(Документ.Дата)+Час(ДатаНачала)*60*60+Минута(ДатаНачала)*60+Секунда(ДатаНачала);
			КонецЕсли;
		КонецЕсли;
		
		ДатаОкончания = Документ.ДатаОкончания;
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) ИЛИ НЕ ЗначениеЗаполнено(НачалоДня(ДатаОкончания)) Тогда
			ДатаОкончания = РассчитатьДатуОкончанияРабот(Документ.Цех.ГрафикРаботы, ДатаНачала, Документ, Ложь);
		КонецЕсли;
		
		Если ДатаНачала <> ДатаОкончания Тогда
			Пока ВыборкаИсполнителей.Следующий() Цикл
				Если (НачалоДня(ДатаОкончания)-НачалоДня(ДатаНачала)) = 0 Тогда
					// Начало окончание в одном дне
					СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
					СтрокаГрафикаРаботыРесурсов.Ресурс1               = ВыборкаИсполнителей.РабочееМесто;
					СтрокаГрафикаРаботыРесурсов.Ресурс2               = ВыборкаИсполнителей.Исполнитель;
					СтрокаГрафикаРаботыРесурсов.Объект                = Документ;
					СтрокаГрафикаРаботыРесурсов.Дата                  = НачалоДня(ДатаНачала);
					СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
					СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени  = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
					СтрокаГрафикаРаботыРесурсов.Продолжительность     = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
					СтрокаГрафикаРаботыРесурсов.ХозОперация           = Документ.ХозОперация;
				Иначе
					Разница = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала))/60/60/24; ТекущийДень = НачалоДня(ДатаНачала);
					Пока Разница >= 0 Цикл
						СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
						СтрокаГрафикаРаботыРесурсов.Ресурс1 = ВыборкаИсполнителей.РабочееМесто;
						СтрокаГрафикаРаботыРесурсов.Ресурс2 = ВыборкаИсполнителей.Исполнитель;
						СтрокаГрафикаРаботыРесурсов.Объект  = Документ;
						СтрокаГрафикаРаботыРесурсов.Дата    = ТекущийДень;
						
						// Установим НачалоРабочегоВремени 
						Если ТекущийДень = НачалоДня(ДатаНачала) Тогда
							СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
						Иначе
							СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101';
						КонецЕсли;
						
						// Установим КонецРабочегоВремени
						Если ТекущийДень = НачалоДня(ДатаОкончания) Тогда
							СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
						Иначе
							СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101235959';
						КонецЕсли;
						
						СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
						СтрокаГрафикаРаботыРесурсов.ХозОперация       = Документ.ХозОперация;
						
						ТекущийДень = ТекущийДень + 60*60*24;
						Разница     = Разница - 1;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДетальноеПланирование Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаНаРемонтПланирование.РабочееМесто,
		|	ЗаявкаНаРемонтПланирование.Исполнитель,
		|	ЗаявкаНаРемонтПланирование.НачалоВыполнения,
		|	ЗаявкаНаРемонтПланирование.ОкончаниеВыполнения,
		|	ЗаявкаНаРемонтАвтоработы.Авторабота
		|ИЗ
		|	Документ.ЗаявкаНаРемонт.Планирование КАК ЗаявкаНаРемонтПланирование
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРемонт.Автоработы КАК ЗаявкаНаРемонтАвтоработы
		|		ПО ЗаявкаНаРемонтПланирование.ИдентификаторРаботы = ЗаявкаНаРемонтАвтоработы.ИдентификаторРаботы
		|ГДЕ
		|	ЗаявкаНаРемонтАвтоработы.Ссылка = &Документ
		|	И ЗаявкаНаРемонтПланирование.Ссылка = &Документ
		|	И ЗаявкаНаРемонтПланирование.НачалоВыполнения <> ЗаявкаНаРемонтПланирование.ОкончаниеВыполнения
		|	И ЗаявкаНаРемонтПланирование.НачалоВыполнения <> &ПустаяДата
		|	И ЗаявкаНаРемонтПланирование.ОкончаниеВыполнения <> &ПустаяДата";
		Запрос.УстановитьПараметр("Документ"   , Документ);
		Запрос.УстановитьПараметр("ПустаяДата" , Дата("00010101"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НачалоДня(Выборка.НачалоВыполнения) = НачалоДня(Выборка.ОкончаниеВыполнения) Тогда
				СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
				СтрокаГрафикаРаботыРесурсов.Ресурс1                     = Выборка.РабочееМесто;
				СтрокаГрафикаРаботыРесурсов.Ресурс2                     = Выборка.Исполнитель;
				СтрокаГрафикаРаботыРесурсов.Объект                      = Документ;
				СтрокаГрафикаРаботыРесурсов.Дата                        = НачалоДня(Выборка.НачалоВыполнения);
				СтрокаГрафикаРаботыРесурсов.Продолжительность           = '00010101' + (Выборка.ОкончаниеВыполнения-Выборка.НачалоВыполнения);
				СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени       = Выборка.НачалоВыполнения;
				СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени        = Выборка.ОкончаниеВыполнения;
				СтрокаГрафикаРаботыРесурсов.КоличествоНатуральныхЕдиниц = 1;
				СтрокаГрафикаРаботыРесурсов.ХозОперация                 = Документ.ХозОперация;
				СтрокаГрафикаРаботыРесурсов.Авторабота                  = Выборка.Авторабота;
			Иначе
				// рассчитаем по дням
				ЧислоДнейВыполнения        = Окр((КонецДня(Выборка.ОкончаниеВыполнения) - НачалоДня(Выборка.НачалоВыполнения))/86400);
				НачалоВыполненияСегодня    = Выборка.НачалоВыполнения;
				ОкончаниеВыполненияСегодня = Выборка.ОкончаниеВыполнения;
				
				Для СчДней = 1 По ЧислоДнейВыполнения Цикл
					Если СчДней = 1 Тогда
						ПродолжительностьВДень     = КонецДня(Выборка.НачалоВыполнения)-Выборка.НачалоВыполнения;
						НачалоВыполненияСегодня    = Выборка.НачалоВыполнения;
						ОкончаниеВыполненияСегодня = КонецДня(Выборка.НачалоВыполнения);
					ИначеЕсли СчДней = ЧислоДнейВыполнения Тогда
						ПродолжительностьВДень     = Выборка.ОкончаниеВыполнения-НачалоДня(Выборка.ОкончаниеВыполнения);
						НачалоВыполненияСегодня    = НачалоДня(Выборка.ОкончаниеВыполнения);
						ОкончаниеВыполненияСегодня = Выборка.ОкончаниеВыполнения;
					Иначе
						ПродолжительностьВДень     = 86399;
						НачалоВыполненияСегодня    = НачалоДня(Выборка.НачалоВыполнения+(СчДней-1)*86400);
						ОкончаниеВыполненияСегодня = КонецДня(Выборка.НачалоВыполнения+(СчДней-1)*86400);
					КонецЕсли;
					
					СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
					СтрокаГрафикаРаботыРесурсов.Ресурс1                     = Выборка.РабочееМесто;
					СтрокаГрафикаРаботыРесурсов.Ресурс2                     = Выборка.Исполнитель;
					СтрокаГрафикаРаботыРесурсов.Объект                      = Документ;
					СтрокаГрафикаРаботыРесурсов.Дата                        = НачалоДня(Выборка.НачалоВыполнения+((СчДней-1)*86400));
					СтрокаГрафикаРаботыРесурсов.Продолжительность           = '00010101' + ПродолжительностьВДень;
					СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени       = НачалоВыполненияСегодня;
					СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени        = ОкончаниеВыполненияСегодня;
					СтрокаГрафикаРаботыРесурсов.КоличествоНатуральныхЕдиниц = 1;
					СтрокаГрафикаРаботыРесурсов.ХозОперация                 = Документ.ХозОперация;
					СтрокаГрафикаРаботыРесурсов.Авторабота                  = Выборка.Авторабота;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписейГрафикРаботыРесурсов.НаборЗаписей = НаборЗаписей;
	НаборЗаписейГрафикРаботыРесурсов.Проведение();
	
КонецПроцедуры // орГрафикРаботыРесурсовПоЗаказНаряду()

// Возвращает дату окончания графика по дате начала и продолжительности
//
// Параметры:
//  График 		      - ТаблицаЗначений - График по которому рассчитывается дата окончания
//  НачалоГрафика     - Дата			- Дата начала для расчета даты окончания
//  Продолжительность - Число           - Продолжительность в секундах для расчета даты окончания
//  ВидыИнтервалов    - Массив          - Массив либо элемент перечисления вид интервала,
//					    для которого рассчитывается дата окончания
//	ВидыДней          - Массив          - Массив либо элемент перечисления вид дня,
//					    для которого рассчитывается дата окончания
//	ДобавлятьОставшуюсяПродолжительность - Булево - Если Истина, то если продолжительность графика меньше заданной,
//													то дополнять оставшимся временем без учета графика (считать 24 часа в сутки)
//                                                  если Ложь, то если продолжительность графика меньше заданной,
//													то возвращать дату окончания графика
// Возвращаемое значение:	
//	ДатаОкончания - Дата окончания графика.
Функция ПолучитьДатуГрафика(График, Знач НачалоГрафика, Знач Продолжительность, Знач ВидыИнтервалов = Неопределено, Знач ВидыДней = Неопределено, ДобавлятьОставшуюсяПродолжительность = Ложь) Экспорт
	ОкончаниеГрафика = НачалоГрафика;
	
	// если время работ 0 тогда возьмем наду начала
	Если Продолжительность = 0 Тогда
		Возврат ОкончаниеГрафика;
	КонецЕсли;
	
	// Проверка корректности параметров
	Если НЕ ЗначениеЗаполнено(График) ИЛИ НЕ ЗначениеЗаполнено(НачалоГрафика) Тогда
		ОкончаниеГрафика=НачалоГрафика+Продолжительность;
		Возврат ОкончаниеГрафика;
	КонецЕсли;
	
	// приводим виды интервалов и дней к массиву
	Если ТипЗнч(ВидыИнтервалов) <> Тип("Массив") Тогда
		ВидыИнтервалов_ = ВидыИнтервалов;
		ВидыИнтервалов = Новый Массив;
		Если ВидыИнтервалов_ = Неопределено Тогда //по умолчанию - все виды интервалов
			ВыборкаИнтервалов = Справочники.ВидыИнтервалов.Выбрать();
			Пока ВыборкаИнтервалов.Следующий() Цикл
				Если ВыборкаИнтервалов.ЭтоГруппа=Ложь Тогда
					ВидыИнтервалов.Добавить(ВыборкаИнтервалов.Ссылка);
				КонецЕсли;
			КонецЦикла;
			ВидыИнтервалов.Добавить(Справочники.ВидыИнтервалов.ПустаяСсылка());
		Иначе
			ВидыИнтервалов.Добавить(ВидыИнтервалов_);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ВидыДней) <> Тип("Массив") Тогда
		ВидыДней_ = ВидыДней;
		ВидыДней = Новый Массив;
		Если ВидыДней_ = Неопределено Тогда //по умолчанию используем все виды дней
			Для Каждого ТекЗначПеречисления Из Метаданные.Перечисления.ВидДня.ЗначенияПеречисления Цикл
				ВидыДней.Добавить(Перечисления.ВидДня[ТекЗначПеречисления.Имя]);
			КонецЦикла;
			ВидыДней.Добавить(Перечисления.ВидДня.ПустаяСсылка());
		Иначе
			ВидыДней.Добавить(ВидыДней_);
		КонецЕсли;
	КонецЕсли;
	
	Если График.Фиксированный Тогда	//заполняем по таблице смещения справочника ГрафикиРаботы
		Если График.Смещение.Количество() = 0 Тогда
			Если ДобавлятьОставшуюсяПродолжительность Тогда
				ОкончаниеГрафика = НачалоГрафика + Продолжительность;
			КонецЕсли;
			
			Возврат ОкончаниеГрафика;
		КонецЕсли;
		
		ПериодичностьГрафика = Строка(График.Периодичность);
		
		ДатаНачалаШаблонаОбязательна = (ПериодичностьГрафика = "Произвольный"
			ИЛИ ПериодичностьГрафика = "Неделя"
			ИЛИ ПериодичностьГрафика = "Декада");
			
		Если ДатаНачалаШаблонаОбязательна И График.ДатаНачала = '00010101' Тогда
			Возврат ОкончаниеГрафика;
		КонецЕсли;
		
		// расчет максимального смещения - максимальный номер дня в ТЧ Смещение шаблона
		Если ДатаНачалаШаблонаОбязательна Тогда
			НачальноеСмещение = (НачалоГрафика - График.ДатаНачала)/60/60/24;
			Если ПериодичностьГрафика = "Произвольный" Тогда
				ТаблицаСмещения = График.Смещение.Выгрузить();
				ТаблицаСмещения.Сортировать("НомерДня Убыв");
				МаксимальноеСмещение = ТаблицаСмещения[0].НомерДня + 1;
			ИначеЕсли ПериодичностьГрафика = "Неделя" Тогда
				МаксимальноеСмещение = 7;
			ИначеЕсли ПериодичностьГрафика = "Декада" Тогда
				МаксимальноеСмещение = 10;
			КонецЕсли;
		Иначе
			Если ПериодичностьГрафика = "Год" Тогда
				НачальноеСмещение = (НачалоГрафика - НачалоГода(НачалоГрафика))/60/60/24;
				МаксимальноеСмещение = 366;
			ИначеЕсли ПериодичностьГрафика = "Квартал" Тогда
				НачальноеСмещение = (НачалоГрафика - НачалоКвартала(НачалоГрафика))/60/60/24;
				МаксимальноеСмещение = 92;
			ИначеЕсли ПериодичностьГрафика = "Месяц" Тогда
				НачальноеСмещение = (НачалоГрафика - НачалоМесяца(НачалоГрафика))/60/60/24;
				МаксимальноеСмещение = 31;
			КонецЕсли;
		КонецЕсли;
		
		НачальноеСмещение = НачальноеСмещение - МаксимальноеСмещение * Цел(НачальноеСмещение/МаксимальноеСмещение);
		Если НачальноеСмещение < 0 Тогда
			НачальноеСмещение = НачальноеСмещение + МаксимальноеСмещение;
		КонецЕсли;
		
		МаксимальноеСмещение = МаксимальноеСмещение - 1;
		
		ТекущееСмещение = НачальноеСмещение;
		ПеременнаяРазницаДней = 0;
		Пока Истина Цикл
			ДатаЦикла = НачалоГрафика + (ПеременнаяРазницаДней*60*60*24);
			ВремяЦикла = ('00010101' + (ДатаЦикла - НачалоДня(ДатаЦикла))); //время, прошедшее с начала дня цикла (заданное начальное время)
			
			// Корректировка тек. смещения под исключения (високосный год, длина месяцев квартала и т.п.)
			// добавляем разницу между макс. колич. дней в месяце (31) и текущим количеством дней в предыдущем
			// месяце (перепрыгиваем доп. число строк).
			ЭтоВисокосныйГод = (ДеньГода(КонецГода(ДатаЦикла)) = 366);
			Если ПериодичностьГрафика = "Год" Тогда
				Если (НЕ ЭтоВисокосныйГод) И ((Месяц(ДатаЦикла)=3 И День(ДатаЦикла)=1)
					ИЛИ (ПеременнаяРазницаДней = 0 И Месяц(ДатаЦикла)>=3 И День(ДатаЦикла)>=1)) Тогда
					ТекущееСмещение = ТекущееСмещение + 1;
				КонецЕсли;
				
			ИначеЕсли ПериодичностьГрафика = "Квартал" Тогда
				//Если Месяц(ДатаЦикла)=3 И День(ДатаЦикла)=1 Тогда //1 марта
				//	Если ЭтоВисокосныйГод Тогда
				//		ТекущееСмещение = ТекущееСмещение + 2;
				//	Иначе
				//		ТекущееСмещение = ТекущееСмещение + 3;
				//	КонецЕсли;
				//ИначеЕсли Месяц(ДатаЦикла)=5 И День(ДатаЦикла)=1 Тогда //1 мая
				//	ТекущееСмещение = ТекущееСмещение + 1;
				//ИначеЕсли Месяц(ДатаЦикла)=12 И День(ДатаЦикла)=1 Тогда //1 декабря
				//	ТекущееСмещение = ТекущееСмещение + 1;
				//КонецЕсли;
				ТекущееСмещение = (НачалоДня(ДатаЦикла) - НачалоКвартала(ДатаЦикла))/24/3600;
				
			ИначеЕсли ПериодичностьГрафика = "Месяц" Тогда
				ТекущееСмещение = День(ДатаЦикла)-1;
				
			КонецЕсли;
			
			СтрокаГрафика = График.Смещение.Найти(Цел(ТекущееСмещение), "НомерДня");
			
			Если СтрокаГрафика <> Неопределено Тогда
				Если (ВидыДней.Найти(СтрокаГрафика.ВидДня) <> Неопределено) Тогда
					Если СтрокаГрафика.Смена.Пустая() Тогда	//по интервалам смещения
						ЭтоНочнаяСмена = ((СтрокаГрафика.КонецРабочегоВремени - СтрокаГрафика.НачалоРабочегоВремени) < 0); //признак ночной смены
						
						ОкончаниеГрафика = НачалоДня(ДатаЦикла) + (СтрокаГрафика.НачалоРабочегоВремени - '00010101');
						
						СтрокаГрафикаПродолжительность = СтрокаГрафика.Продолжительность - '00010101';
						
						Если ПеременнаяРазницаДней = 0 Тогда
							ПродолжительностьУжеПрошло = 0;
							Если ЭтоНочнаяСмена Тогда
								Если ВремяЦикла >= СтрокаГрафика.НачалоРабочегоВремени Тогда
									ПродолжительностьУжеПрошло = (ВремяЦикла - СтрокаГрафика.НачалоРабочегоВремени);
								ИначеЕсли ВремяЦикла <= СтрокаГрафика.КонецРабочегоВремени Тогда
									ПродолжительностьУжеПрошло = (СтрокаГрафика.КонецРабочегоВремени - ВремяЦикла);
								КонецЕсли;
							Иначе
								Если (ВремяЦикла >= СтрокаГрафика.НачалоРабочегоВремени) И (ВремяЦикла <= СтрокаГрафика.КонецРабочегоВремени) Тогда
									ПродолжительностьУжеПрошло = (ВремяЦикла - СтрокаГрафика.НачалоРабочегоВремени);
								ИначеЕсли ВремяЦикла > СтрокаГрафика.КонецРабочегоВремени Тогда
									ПродолжительностьУжеПрошло = СтрокаГрафикаПродолжительность;
								КонецЕсли;
							КонецЕсли;
							
							ОкончаниеГрафика = Макс(ОкончаниеГрафика, НачалоГрафика);
							
							СтрокаГрафикаПродолжительность = СтрокаГрафикаПродолжительность - ПродолжительностьУжеПрошло;
						КонецЕсли;
						
						СтрокаГрафикаПродолжительность = Мин(СтрокаГрафикаПродолжительность, Продолжительность);
						ОкончаниеГрафика = ОкончаниеГрафика + СтрокаГрафикаПродолжительность;
						
						Продолжительность = Продолжительность - СтрокаГрафикаПродолжительность;
						Если Продолжительность = 0 Тогда
							Прервать;
						КонецЕсли;
						
					Иначе // по интервалам смены
						Для Каждого ИнтервалСмены Из СтрокаГрафика.Смена.Интервалы Цикл	
							Если (ВидыИнтервалов.Найти(ИнтервалСмены.ВидИнтервала) <> Неопределено) Тогда
								ОкончаниеГрафика = НачалоДня(ДатаЦикла) + (ИнтервалСмены.НачалоРабочегоВремени - '00010101');
								СтрокаГрафикаПродолжительность = ИнтервалСмены.Продолжительность - '00010101';
								
								Если ПеременнаяРазницаДней = 0 Тогда
									ПродолжительностьУжеПрошло = 0;
									Если (ВремяЦикла >= ИнтервалСмены.НачалоРабочегоВремени) И (ВремяЦикла <= ИнтервалСмены.КонецРабочегоВремени) Тогда
										ПродолжительностьУжеПрошло = (ВремяЦикла - ИнтервалСмены.НачалоРабочегоВремени);
									ИначеЕсли ВремяЦикла > ИнтервалСмены.КонецРабочегоВремени Тогда
										ПродолжительностьУжеПрошло = СтрокаГрафикаПродолжительность;
									КонецЕсли;
									ОкончаниеГрафика = Макс(ОкончаниеГрафика, НачалоГрафика);
									СтрокаГрафикаПродолжительность = СтрокаГрафикаПродолжительность - ПродолжительностьУжеПрошло;
								КонецЕсли;
								
								СтрокаГрафикаПродолжительность = Мин(СтрокаГрафикаПродолжительность, Продолжительность);
								ОкончаниеГрафика = ОкончаниеГрафика + СтрокаГрафикаПродолжительность;
								
								Продолжительность = Продолжительность - СтрокаГрафикаПродолжительность;
								Если Продолжительность = 0 Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Продолжительность = 0 Тогда
				Прервать;
			КонецЕсли;
						
			Если ТекущееСмещение >= МаксимальноеСмещение Тогда
				ТекущееСмещение = ТекущееСмещение-МаксимальноеСмещение;
			Иначе
				ТекущееСмещение = ТекущееСмещение + 1;
			КонецЕсли;
			
			ПеременнаяРазницаДней = ПеременнаяРазницаДней + 1;
		КонецЦикла;
		
	Иначе // Не фиксированный график: таблицу получаем из регистра в цикле порциями по месяцу
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ГрафикРаботКалендарный.Дата,
		|	ГрафикРаботКалендарный.Продолжительность,
		|	ГрафикРаботКалендарный.НачалоРабочегоВремени,
		|	ГрафикРаботКалендарный.КонецРабочегоВремени
		|ИЗ
		|	РегистрСведений.ГрафикРаботКалендарный КАК ГрафикРаботКалендарный
		|ГДЕ
		|	ГрафикРаботКалендарный.График = &График
		|	И ГрафикРаботКалендарный.ВидДня В (&ВидыДней)
		|	" + ?(График.СменаПоУмолчанию.Пустая(), "", "И ГрафикРаботКалендарный.ВидИнтервала В (&ВидыИнтервалов)
		|") + "	И (ДОБАВИТЬКДАТЕ(ГрафикРаботКалендарный.Дата, СЕКУНДА, ЧАС(ГрафикРаботКалендарный.КонецРабочегоВремени) * 60 * 60 + МИНУТА(ГрафикРаботКалендарный.КонецРабочегоВремени) * 60 + СЕКУНДА(ГрафикРаботКалендарный.КонецРабочегоВремени))) >= &ДатаНачала
		|УПОРЯДОЧИТЬ ПО
		|	ГрафикРаботКалендарный.Дата,
		|	ГрафикРаботКалендарный.НачалоРабочегоВремени");
		Запрос.УстановитьПараметр("График", График);
		Запрос.УстановитьПараметр("ВидыИнтервалов", ВидыИнтервалов);
		Запрос.УстановитьПараметр("ВидыДней", ВидыДней);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоГрафика);
		тблГрафика = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаГрафика Из тблГрафика Цикл
			Если (СтрокаГрафика.Дата + (СтрокаГрафика.НачалоРабочегоВремени-'00010101')) < НачалоГрафика Тогда
				НачалоРабочегоВремени = НачалоГрафика - НачалоДня(НачалоГрафика);
				СтрокаГрафика.НачалоРабочегоВремени = (СтрокаГрафика.Дата + НачалоРабочегоВремени);
				СтрокаГрафика.Продолжительность = '00010101' + (СтрокаГрафика.КонецРабочегоВремени - СтрокаГрафика.НачалоРабочегоВремени);
			КонецЕсли; 
			ВремяВИнтервале = (СтрокаГрафика.Продолжительность - '00010101');
			ВремяВИнтервале = Мин(ВремяВИнтервале, Продолжительность);
			ОкончаниеГрафика = СтрокаГрафика.Дата + (СтрокаГрафика.НачалоРабочегоВремени + ВремяВИнтервале - '00010101');
			Продолжительность = Продолжительность - ВремяВИнтервале;
			Если Продолжительность = 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		// Если график "закончился", то прибавим оставшееся время
		Если ДобавлятьОставшуюсяПродолжительность Тогда
			ОкончаниеГрафика = ОкончаниеГрафика + Продолжительность;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОкончаниеГрафика;
КонецФункции

// Расчет времени окончания работ по ЗН и ЗР
//	ГрафикРаботы - График работы ресурсов, по которому требуется выполнить расчет
//  ДатаНачала - Дата начала выполнения работ по ЗН
//	Работы - ТЧ выполняемых работ или ссылка на ЗН или ЗР
//	ЗапрашиватьВремяВыполнения - Флаг запросы времени выполнения работ
// Возвращаемое значение:
//   Дата - Дата и время окончания работ.
Функция РассчитатьДатуОкончанияРабот(ГрафикРаботы, ДатаНачала, Работы, ЗапрашиватьВремяВыполнения = Ложь) Экспорт
	ВремяВыполнения = 0;
	Если ТипЗнч(Работы) = Тип("ДокументСсылка.ЗаявкаНаРемонт") ИЛИ ТипЗнч(Работы) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		// Если передана ссылка на документ, то получим время выполнения запросом
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Работы.Количество*Работы.Коэффициент КАК ВремяВыполнения
		|ИЗ
		|	Документ." + Работы.Метаданные().Имя + ".Автоработы КАК Работы
		|ГДЕ
		|	Работы.Ссылка = &Ссылка И 
		|	(НЕ Работы.Нормочас = ЗНАЧЕНИЕ(Справочник.Нормочасы.Рубль))";
		Запрос.УстановитьПараметр("Ссылка", Работы);
		
		Выборка = Запрос.Выполнить().Выгрузить();
		ВремяВыполнения = Выборка.Итог("ВремяВыполнения");
	Иначе
		// Расчет ориентировочного времени выполнения работ
		
		НормочасРубль = Справочники.Нормочасы.Рубль;
		
		Для Каждого СтрокаРабот Из Работы Цикл
			Если СтрокаРабот.Нормочас <> НормочасРубль Тогда
				ВремяВыполнения = ВремяВыполнения + (СтрокаРабот.Коэффициент * СтрокаРабот.Количество);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Переведем время выполнения работ в секунды
	ВремяВыполнения = ВремяВыполнения * 60 * 60;
	
	МассивВидовИнтервалов = Новый Массив;
	МассивВидовИнтервалов.Добавить(Справочники.ВидыИнтервалов.Работа);
	МассивВидовИнтервалов.Добавить(Справочники.ВидыИнтервалов.ПустаяСсылка());
	
	МассивВидовДней = Новый Массив;
	МассивВидовДней.Добавить(Перечисления.ВидДня.Рабочий);
	МассивВидовДней.Добавить(Перечисления.ВидДня.Предпраздничный);
	
	ДатаОкончания = ПолучитьДатуГрафика(ГрафикРаботы, ДатаНачала, ВремяВыполнения, МассивВидовИнтервалов, МассивВидовДней, Истина);
	
	Возврат ДатаОкончания;
КонецФункции // РассчитатьДатуОкончанияРабот()

// получение таблицы соотвецтвующей таблицы ресурсов
//
Функция СформироватьТаблицуНабораЗаписей() Экспорт
	НаборЗаписей = Новый ТаблицаЗначений;
	НаборЗаписей.Колонки.Добавить("Ресурс1");
	НаборЗаписей.Колонки.Добавить("Ресурс2");
	НаборЗаписей.Колонки.Добавить("Объект");
	НаборЗаписей.Колонки.Добавить("Дата"                        , Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	НаборЗаписей.Колонки.Добавить("НачалоРабочегоВремени"       , Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("КонецРабочегоВремени"        , Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("Продолжительность"           , Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("КоличествоНатуральныхЕдиниц" , Новый ОписаниеТипов("Число"));
	НаборЗаписей.Колонки.Добавить("НапомнитьЗа"                 , Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("Авторабота"                  , Новый ОписаниеТипов("СправочникСсылка.Автоработы"));
	НаборЗаписей.Колонки.Добавить("ХозОперация"                 , Новый ОписаниеТипов("СправочникСсылка.ХозОперации"));
	
	Возврат НаборЗаписей;
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = ОбработкаСобытийРегистраСервер.ПолучитьСтандартныеОбязательныеРеквизиты(Объект);
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции 

Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	Возврат УникальныеРеквизиты;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецЕсли