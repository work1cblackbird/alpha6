// Модуль менеджера регистра сведений "Прайс-листы контрагентов правила загрузки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создаем правило загрузки для прайс-листа
//  НазначениеПравила:	1 - Ключ строки
//  2 - Производитель в прайс-листе
//  3 - Производитель
//  ОбъектПравила - Производитель или Строка в зависимости от назначения
//  ИдентификаторПравила - Строка - уникальный идентификатор правила (если задано, то редактируем существующее
//  правило, если нет, то создаем новое или ищем по остальным параметрам)
//  ВидПравила:			1 - Не загружать
//  2 - Присвоить значение
//  ИмяРеквизита - Имя реквизита над которым производится действие
//  Значение - Номенклатура, Производитель, Валюта, Булево, Число, Строка, Массив
//  ПорядокПрименения - Число - Порядок применения правил загрузки.
//
// Параметры:
//  ПрайсЛист				 - 	СправочникСсылка.ПрайсЛистыКонтрагентов - Прайс лист контрагента.
//  НазначениеПравила		 - 	ПеречислениеСсылка.НазначениеПравилЗагрузки	 - Назначение правил.
//  ОбъектПравила			 - 	СправочникСсылка.Производители, Строка	 - Объект правил.
//  ИдентификаторПравила	 - 	УникальныйИдентификатор	 - Идентификатор. 
//  ВидПравила				 - 	ПеречислениеСсылка.ВидыПравилЗагрузки	 - Вид правила.
//  ИмяРеквизитаПрайсЛиста	 - 	Строка	 - Имя реквизита.
//  Значение				 - 	СправочникСсылка.Производители, СправочникСсылка.Валюты, СправочникСсылка.Номенклатура, 
//		Булево, Строка, Число	 -  Значение реквизита правила.
//  ЗначениеОригинальное	 - 	СправочникСсылка.Производители, СправочникСсылка.Валюты, СправочникСсылка.Номенклатура, 
//		Булево, Строка, Число	 -  Оригинальное значение реквизита правила.
//  ПорядокПрименения		 - 	Число	 -   Порядок правила.
//  ВыводитьСообщения		 - Булево		 - Вывод сообщения.
// 
// Возвращаемое значение:
//  Булево - Истина - все ОК, ложь - что-то пошло не так.
//
Функция РедактироватьПравилоЗагрузки(
	ПрайсЛист,
	НазначениеПравила,
	ОбъектПравила, 
	ВидПравила,
	ИдентификаторПравила = Неопределено,	
	ИмяРеквизитаПрайсЛиста = Неопределено,
	Значение = Неопределено,
	ЗначениеОригинальное = Неопределено,
	ПорядокПрименения = 0,
	ВыводитьСообщения = Ложь) Экспорт
	
	Если ВидПравила = Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение
		И НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.КлючСтроки
		И НЕ ЗначениеЗаполнено(ИмяРеквизитаПрайсЛиста) Тогда
		// Не должно быть такого сочетания
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидПравила = Перечисления.ВидыПравилЗагрузки.НеЗагружать
		И НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.КлючСтроки Тогда
		// Не должно быть такого сочетания
		// У нас есть ЗапретЗагрузки как реквизит строки идет.
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка  
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки");
		ЭлементБлокировки.УстановитьЗначение("ПрайсЛист",         ПрайсЛист);
		ЭлементБлокировки.УстановитьЗначение("НазначениеПравила", НазначениеПравила);
		ЭлементБлокировки.УстановитьЗначение("ОбъектПравила",     ОбъектПравила);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Если ВидПравила = Перечисления.ВидыПравилЗагрузки.НеЗагружать Тогда
			// Это правило только для Производителей в прайс-листе !!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПравилаЗагрузки.ИдентификаторПравила КАК ИдентификаторПравила
			|ИЗ
			|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
			|ГДЕ
			|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
			|	И ПравилаЗагрузки.НазначениеПравила = &НазначениеПравила
			|	И ПравилаЗагрузки.ОбъектПравила = &ОбъектПравила
			|	И ПравилаЗагрузки.ВидПравила = &ВидПравила
			|	И ПравилаЗагрузки.Значение = &Значение
			|";
			
			Запрос.УстановитьПараметр("ПрайсЛист",         ПрайсЛист);
			Запрос.УстановитьПараметр("НазначениеПравила", НазначениеПравила);
			Запрос.УстановитьПараметр("ОбъектПравила",     ОбъектПравила); // Производитель в прайс-листе
			Запрос.УстановитьПараметр("ВидПравила",        ВидПравила);
			Запрос.УстановитьПараметр("Значение",          Значение);      // Производитель
			
			Если Запрос.Выполнить().Пустой() Тогда
				Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьМенеджерЗаписи();
				Менеджер.ПрайсЛист            = ПрайсЛист;
				Менеджер.НазначениеПравила    = НазначениеПравила;
				Менеджер.ОбъектПравила        = ОбъектПравила;
				Менеджер.ИдентификаторПравила = Новый УникальныйИдентификатор;
				Менеджер.ВидПравила           = ВидПравила;
				Менеджер.Значение            = Значение;
				Менеджер.ПорядокПрименения    = ПорядокПрименения;
				Менеджер.Записать();
			КонецЕсли;
			
		ИначеЕсли ВидПравила = Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение Тогда
			// Устанавливаем значение для реквизита
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПравилаЗагрузки.ИдентификаторПравила КАК ИдентификаторПравила,
			|	ПравилаЗагрузки.ЗначениеОригинальное
			|ИЗ
			|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
			|ГДЕ
			|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
			|	И ПравилаЗагрузки.НазначениеПравила = &НазначениеПравила
			|	И ПравилаЗагрузки.ОбъектПравила = &ОбъектПравила
			|	И ПравилаЗагрузки.ВидПравила = &ВидПравила";
			Запрос.УстановитьПараметр("ПрайсЛист",         ПрайсЛист);
			Запрос.УстановитьПараметр("НазначениеПравила", НазначениеПравила);
			Запрос.УстановитьПараметр("ОбъектПравила",     ОбъектПравила);
			Запрос.УстановитьПараметр("ВидПравила",        ВидПравила);
			
			Если НЕ НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте Тогда
				
				Запрос.Текст = Запрос.Текст + " И ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста = &ИмяРеквизитаПрайсЛиста";
				Запрос.УстановитьПараметр("ИмяРеквизитаПрайсЛиста", ИмяРеквизитаПрайсЛиста);
				
			КонецЕсли;
			
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			
			Если ТипЗнч(Значение) = Тип("Массив") Тогда
				// Так создаем правила для номенклатуры
				// Если в качестве значения передан массив значений, то мы удалим все правила, которые
				// по данным измерениям существуют и для каждого значения массива создадим новое.
				
				Пока Выборка.Следующий() Цикл
					Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьМенеджерЗаписи();
					Менеджер.ПрайсЛист = ПрайсЛист;
					Менеджер.НазначениеПравила = НазначениеПравила;
					Менеджер.ОбъектПравила = ОбъектПравила;
					Менеджер.ИдентификаторПравила = Выборка.ИдентификаторПравила;
					Менеджер.Прочитать();
					Если Менеджер.Выбран() Тогда
						Менеджер.Удалить();
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ЗначениеПравила Из Значение Цикл
					Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьМенеджерЗаписи();
					Менеджер.ПрайсЛист = ПрайсЛист;
					Менеджер.НазначениеПравила = НазначениеПравила;
					Менеджер.ОбъектПравила = ОбъектПравила;
					Менеджер.ИдентификаторПравила = Новый УникальныйИдентификатор;
					Менеджер.ВидПравила = ВидПравила;
					Менеджер.ИмяРеквизитаПрайсЛиста = ИмяРеквизитаПрайсЛиста;
					Менеджер.Значение = ЗначениеПравила;
					Менеджер.ПорядокПрименения = ПорядокПрименения;
					Менеджер.Записать();
					
					Если ВыводитьСообщения Тогда
						
						ТекстСообщения = НСтр("ru='Создано правило ""'") + ИмяРеквизитаПрайсЛиста 
							+ НСтр("ru='"" со значением ""'") + Строка(ЗначениеПравила) + """.";
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтатусСообщения.Обычное);
						
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Если Выборка.Количество() > 0 Тогда
					Выборка.Следующий();
					ИдентификаторПравила = Выборка.ИдентификаторПравила;
					ЗначениеОригинальное = Выборка.ЗначениеОригинальное;
					Если Выборка.Количество() > 1 Тогда
						Пока Выборка.Следующий() Цикл
							// Удалим все лишние записи
							Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьМенеджерЗаписи();
							Менеджер.ПрайсЛист = ПрайсЛист;
							Менеджер.НазначениеПравила = НазначениеПравила;
							Менеджер.ОбъектПравила = ОбъектПравила;
							Менеджер.ИдентификаторПравила = Выборка.ИдентификаторПравила;
							Менеджер.Прочитать();
							Если Менеджер.Выбран() Тогда
								Менеджер.Удалить();
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					// Новое правило
					ИдентификаторПравила = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛист, Истина);
				НаборЗаписей.Отбор.НазначениеПравила.Установить(НазначениеПравила, Истина);
				НаборЗаписей.Отбор.ОбъектПравила.Установить(ОбъектПравила, Истина);
				НаборЗаписей.Отбор.ИдентификаторПравила.Установить(ИдентификаторПравила, Истина);
				НаборЗаписей.Прочитать();
				
				
				Если НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте Тогда
					НаборЗаписей.Очистить();
					СтрокаНабора = НаборЗаписей.Добавить();
					СтрокаНабора.ПрайсЛист = ПрайсЛист;
					СтрокаНабора.НазначениеПравила = НазначениеПравила;
					СтрокаНабора.ОбъектПравила = ОбъектПравила;
					СтрокаНабора.ИдентификаторПравила = ИдентификаторПравила;
					СтрокаНабора.ВидПравила = ВидПравила;
					СтрокаНабора.ИмяРеквизитаПрайсЛиста = "Производитель"; // На всякий случай
					СтрокаНабора.Значение = Значение;
					СтрокаНабора.ПорядокПрименения = ПорядокПрименения;
					
					ТекстСообщения = НСтр("ru='Обновлено правило для ""ПроизводительВПрайсЛисте"" - ""'") + ОбъектПравила + """ -> """ + Строка(Значение) + """.";
					
				Иначе
					Если ЗначениеОригинальное = Значение Тогда
						// Удалим правило, так как возвращаем оригинальное значение
						ТекстСообщения = НСтр("ru='Удалено правило ""'") + ИмяРеквизитаПрайсЛиста + """ """ + ЗначениеОригинальное + """ X """ + Строка(НаборЗаписей[0].Значение) + """.";
						
						НаборЗаписей.Очистить();
						
					Иначе
						Если НаборЗаписей.Количество() = 0 Тогда
							// Новое правило
							СтрокаНабора = НаборЗаписей.Добавить();
							СтрокаНабора.ПрайсЛист = ПрайсЛист;
							СтрокаНабора.НазначениеПравила = НазначениеПравила;
							СтрокаНабора.ОбъектПравила = ОбъектПравила;
							СтрокаНабора.ИдентификаторПравила = ИдентификаторПравила;
							
							ТекстСообщения = НСтр("ru='Создано правило ""'") + ИмяРеквизитаПрайсЛиста + """ """ + ЗначениеОригинальное + """ -> """ + Строка(Значение) + """.";
							
						Иначе
							// Обновляем правило
							СтрокаНабора = НаборЗаписей[0];
							
							ТекстСообщения = НСтр("ru='Обновлено правило ""'") + ИмяРеквизитаПрайсЛиста + """ """ + ЗначениеОригинальное + """ -> """ + Строка(Значение) + """.";
							
						КонецЕсли;
						
						СтрокаНабора.ВидПравила = ВидПравила;
						СтрокаНабора.ИмяРеквизитаПрайсЛиста = ИмяРеквизитаПрайсЛиста;
						СтрокаНабора.Значение = Значение;
						СтрокаНабора.ПорядокПрименения = ПорядокПрименения;
						СтрокаНабора.ЗначениеОригинальное = ЗначениеОригинальное;
						
					КонецЕсли;
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
				Если ВыводитьСообщения Тогда
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтатусСообщения.Обычное);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	КонецПопытки; 
	Возврат Истина;
	
КонецФункции

// Функция поиска производителя из прайс-листа
//
// Параметры:
//  ПрайсЛист										 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс лист контрагента.
//  ПроизводительВПрайсЛисте						 - СправочникСсылка.Производители			 - Производитель.
//  СохранятьСопоставлениеДляПустыхПроизводителей	 - Булево									 - Сохранения сопоставляния.
//  СопоставленныеПроизводители						 - ТаблицаЗначений							 - Производители.
// 
// Возвращаемое значение:
//  Справочники.Производители - Производитель.
//
Функция ПолучитьПроизводителя(
	ПрайсЛист,
	ПроизводительВПрайсЛисте,
	СохранятьСопоставлениеДляПустыхПроизводителей = Ложь,
	СопоставленныеПроизводители = Неопределено) Экспорт
	
	Если ТипЗнч(ПроизводительВПрайсЛисте) = Тип("Число") Тогда
		ПроизводительВПрайсЛисте = Формат(ПроизводительВПрайсЛисте, "ЧН=0; ЧГ=0");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроизводительВПрайсЛисте) Тогда
		// Вернем, то что указано в самом прайс-листе
		Возврат ПрайсЛист.Производитель;
	КонецЕсли;
	
	Если СопоставленныеПроизводители = Неопределено Тогда
		СопоставленныеПроизводители = ПолучитьТаблицуСопоставленныхПроизводителей(ПрайсЛист);
	КонецЕсли;
	
	// Сначала найдем в таблице с синонимами производителей
	НайденнаяСтрока = СопоставленныеПроизводители.Найти(ПроизводительВПрайсЛисте, "ПроизводительВПрайсЛисте");
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Производитель;
	КонецЕсли;
	
	// Поищем производителя по синонимам в справочнике производителей
	Производитель = Справочники.Производители.НайтиПроизводителяПоНаименованию(ПроизводительВПрайсЛисте);
	
	// Дополним таблицу синонимов новой записью
	НоваяСтрока = СопоставленныеПроизводители.Добавить();
	НоваяСтрока.ПроизводительВПрайсЛисте = ПроизводительВПрайсЛисте;
	НоваяСтрока.Производитель            = Производитель;
	
	Если НЕ Производитель.Пустая() ИЛИ СохранятьСопоставлениеДляПустыхПроизводителей Тогда
		// Создадим запись в регистр правил загрузки
		НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте;
		ВидПравила        = Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение;
		Значение          = Производитель;
		Если НЕ РедактироватьПравилоЗагрузки(ПрайсЛист, НазначениеПравила, ПроизводительВПрайсЛисте, ВидПравила,, 
													"Производитель", Значение, ПроизводительВПрайсЛисте,, Ложь) Тогда
			ОбщегоНазначения.СообщитьПользователю("Ошибка при создании правила загрузки для производителя в прайс-листе - " 
																								+ ПроизводительВПрайсЛисте);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Производитель;
КонецФункции // ПолучитьПроизводителя()

// Функция формирования синонимов для производителей
//
// Параметры:
//  ПрайсЛист	 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист контрагента.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Результат запроса.
//
Функция ПолучитьТаблицуСопоставленныхПроизводителей(ПрайсЛист) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаЗагрузки.Значение КАК Производитель,
	|	ПравилаЗагрузки.ОбъектПравила КАК ПроизводительВПрайсЛисте
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|ГДЕ
	|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте)
	|	И ПравилаЗагрузки.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.ПрисвоитьЗначение)";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	
	СопоставленныеПроизводители = Запрос.Выполнить().Выгрузить();
	СопоставленныеПроизводители.Индексы.Добавить("ПроизводительВПрайсЛисте");
	
	Возврат СопоставленныеПроизводители;
КонецФункции // СформироватьТаблицуСинонимовПроизводителей()

// Функция получает правила для ключа строки по переданным идентификаторам и применяет их для РС ПрайсЛистыКонтрагентов.
//
// Параметры:
//  ПрайсЛист			 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист контрагента
//  ИдентификаторыПравил - УникальныйИдентификатор					 - Идентификатор.
// 
// Возвращаемое значение:
//  Булево - Истина если удалось.
//
Функция ПрименитьПравилаКПрайсЛистамКонтрагентов(ПрайсЛист, ИдентификаторыПравил) Экспорт 
	
	СписокЗначений = Новый СписокЗначений;
	Если ТипЗнч(ИдентификаторыПравил) = Тип("Массив") Тогда
		СписокЗначений.ЗагрузитьЗначения(ИдентификаторыПравил);
	Иначе
		СписокЗначений.Добавить(ИдентификаторыПравил);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(32)) КАК КлючСтрокиПоставщика
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
		|ГДЕ
		|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
		|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
		|	И ПравилаЗагрузки.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.ПрисвоитьЗначение)
		|	И ПравилаЗагрузки.ИдентификаторПравила В(&ИдентификаторыПравил)
		|	И ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста <> ""Номенклатура""";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	Запрос.УстановитьПараметр("ИдентификаторыПравил", СписокЗначений);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивКлючСтрокиПоставщика = Результат.Выгрузить().ВыгрузитьКолонку("КлючСтрокиПоставщика");
	
	Возврат РегистрыСведений.ПрайсЛистыКонтрагентов.ОбновитьЗаписиВОсновномРегистре(ПрайсЛист,, МассивКлючСтрокиПоставщика);
	            
КонецФункции // ПрименитьПравилаКПрайсЛистамКонтрагентов()

// Функция - Очистить правила прайс листа
//
// Параметры:
//  ПрайсЛист						 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист
//  НазначениеПравила				 - ПеречислениеСсылка.НазначениеПравилЗагрузки	 - Вид правил загрузки
//  Идентификатор					 - Строка										 - Ключ строки
//  ВосстановитьОригинальныеЗначения - Булево										 - Признак востановления оригинальных значений.
// 
// Возвращаемое значение:
//  Булево - Булево.
//
Функция ОчиститьПравилаПрайсЛиста(
	ПрайсЛист,
	НазначениеПравила = Неопределено,
	Идентификатор = Неопределено,
	ВосстановитьОригинальныеЗначения = Истина) Экспорт
		
	НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛист, Истина);
	Если НазначениеПравила <> Неопределено Тогда
		НаборЗаписей.Отбор.НазначениеПравила.Установить(НазначениеПравила, Истина);
	КонецЕсли;
	Если Идентификатор <> Неопределено Тогда 
		НаборЗаписей.Отбор.ИдентификаторПравила.Установить(Идентификатор, Истина);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки");
	ЭлементБлокировки.УстановитьЗначение("ПрайсЛист", ПрайсЛист);
	Если НазначениеПравила <> Неопределено Тогда 
		ЭлементБлокировки.УстановитьЗначение("НазначениеПравила", НазначениеПравила);
	КонецЕсли;
	Если Идентификатор <> Неопределено Тогда 
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПравила", Идентификатор);
	КонецЕсли;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НаборЗаписей.Прочитать();
	
	Если ВосстановитьОригинальныеЗначения Тогда
		ТабПравил = НаборЗаписей.Выгрузить(, "ПрайсЛист, НазначениеПравила, ОбъектПравила, ВидПравила, ИмяРеквизитаПрайсЛиста, ЗначениеОригинальное");
	КонецЕсли;
	
	Попытка 
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru='Не удалось очистить правила загрузки: '") + ИнформацияОбОшибке();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
	Если ВосстановитьОригинальныеЗначения Тогда
		// Востановим значения во временном и постоянном регистрах
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабПравил.НазначениеПравила,
		|	ТабПравил.ОбъектПравила,
		|	ТабПравил.ВидПравила,
		|	ТабПравил.ИмяРеквизитаПрайсЛиста,
		|	ТабПравил.ЗначениеОригинальное
		|ПОМЕСТИТЬ втПравила
		|ИЗ
		|	&ТабПравил КАК ТабПравил
		|ГДЕ
		|	ТабПравил.ИмяРеквизитаПрайсЛиста <> ""Номенклатура""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Временный.ПрайсЛист,
		|	Временный.ДатаЗаписи,
		|	Временный.КодПредложения,
		|	ВЫБОР
		|		КОГДА ТабПравил.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте)
		|				И ТабПравил.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.ПрисвоитьЗначение)
		|			ТОГДА ""Производитель""
		|		ИНАЧЕ ТабПравил.ИмяРеквизитаПрайсЛиста
		|	КОНЕЦ КАК ИмяРеквизитаПрайсЛиста,
		|	ТабПравил.ЗначениеОригинальное,
		|	Временный.КлючСтрокиПоставщика
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК Временный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПравила КАК ТабПравил
		|		ПО ((ВЫРАЗИТЬ(ТабПравил.ОбъектПравила КАК СТРОКА(32))) = Временный.КлючСтрокиПоставщика
		|					И ТабПравил.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
		|				ИЛИ (ВЫРАЗИТЬ(ТабПравил.ОбъектПравила КАК СТРОКА(100))) = Временный.ПроизводительВПрайсЛисте
		|					И ТабПравил.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте)
		|					И ТабПравил.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.ПрисвоитьЗначение))
		|ГДЕ
		|	Временный.ПрайсЛист = &ПрайсЛист";
		
		Запрос.УстановитьПараметр("ТабПравил", ТабПравил);
		Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
		
		Результат = Запрос.Выполнить();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовВременный");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Результат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПрайсЛист", "ПрайсЛист");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДатаЗаписи", "ДатаЗаписи");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КодПредложения", "КодПредложения");
		
		МассивКлючей = Новый Массив;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивКлючей.Добавить(Выборка.КлючСтрокиПоставщика);
			
			НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентовВременный.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛист, Истина);
			НаборЗаписей.Отбор.ДатаЗаписи.Установить(Выборка.ДатаЗаписи, Истина);
			НаборЗаписей.Отбор.КодПредложения.Установить(Выборка.КодПредложения, Истина);
			НаборЗаписей.Прочитать();
			Для Каждого СтрокаНабора Из НаборЗаписей Цикл
				СтрокаНабора[Выборка.ИмяРеквизитаПрайсЛиста] = Выборка.ЗначениеОригинальное;
				Если Выборка.ИмяРеквизитаПрайсЛиста = "Артикул" ИЛИ Выборка.ИмяРеквизитаПрайсЛиста = "Производитель" Тогда
					СтрокаНабора.АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(СтрокаНабора.Артикул);
				КонецЕсли;
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru='Не удалось восстановить оригинальное значение: '") + ИнформацияОбОшибке().Описание;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
		РегистрыСведений.ПрайсЛистыКонтрагентов.ОбновитьЗаписиВОсновномРегистре(ПрайсЛист,, МассивКлючей);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции // ОчиститьПравилаПрайсЛиста()

// Функция - Перечень реквизитов в правилах загрузки прайс листа
//
// Параметры:
//  ПрайсЛист	 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист контрагента.
//
// Возвращаемое значение:
//  ТаблицаЗначений - ТаблицаЗначений.
//
Функция ПереченьРеквизитовВПравилахЗагрузкиПрайсЛиста(ПрайсЛист) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста КАК ИмяРеквизитаПрайсЛиста
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|ГДЕ
	|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяРеквизитаПрайсЛиста";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРеквизитаПрайсЛиста");
	
КонецФункции

// Функция - Значения объекта прайс листа
//
// Параметры:
//  ПрайсЛист	 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист контрагента
//  ОбъектПравила	 - СправочникСсылка.Производители, Строка	 - Правила.
// 
// Возвращаемое значение:
//  Результат - Соответствие.
//
Функция ЗначенияОбъектаПрайсЛиста(ПрайсЛист, ОбъектПравила = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Временный.КлючСтрокиПоставщика,
	|	ВЫБОР
	|		КОГДА Номенклатура.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ Номенклатура.Ссылка
	|	КОНЕЦ КАК Номенклатура
	|ПОМЕСТИТЬ втВременный
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК Временный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Временный.Производитель = Номенклатура.Производитель
	|			И (Номенклатура.АртикулДляПоиска <> """")
	|			И Временный.АртикулДляПоиска = Номенклатура.АртикулДляПоиска
	|			И (НЕ Номенклатура.ПометкаУдаления)
	|ГДЕ
	|	Временный.ПрайсЛист = &ПрайсЛист
	|	%1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.ОбъектПравила КАК КлючЗаписи,
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.Значение КАК Номенклатура,
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.Значение.Артикул КАК Артикул,
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.Значение.Производитель КАК Производитель,
	|	ЛОЖЬ КАК Автоматически
	|ПОМЕСТИТЬ ОбъединеннаяТаблица
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПрайсЛистыКонтрагентовПравилаЗагрузки
	|ГДЕ
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|	И ПрайсЛистыКонтрагентовПравилаЗагрузки.НазначениеПравила = &НазначениеПравила
	|	И ПрайсЛистыКонтрагентовПравилаЗагрузки.ВидПравила = &ВидПравила
	|	%2
	|	И ПрайсЛистыКонтрагентовПравилаЗагрузки.ИмяРеквизитаПрайсЛиста = ""Номенклатура""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Временный.КлючСтрокиПоставщика,
	|	Временный.Номенклатура,
	|	Временный.Номенклатура.Артикул,
	|	Временный.Номенклатура.Производитель,
	|	ИСТИНА
	|ИЗ
	|	втВременный КАК Временный
	|ГДЕ
	|	Временный.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединеннаяТаблица.КлючЗаписи КАК КлючЗаписи,
	|	ОбъединеннаяТаблица.Номенклатура,
	|	ОбъединеннаяТаблица.Артикул,
	|	ОбъединеннаяТаблица.Производитель,
	|	ОбъединеннаяТаблица.Автоматически
	|ИЗ
	|	ОбъединеннаяТаблица КАК ОбъединеннаяТаблица
	|ИТОГИ ПО
	|	КлючЗаписи";
	
	Запрос.Текст = СтрШаблон(
		Запрос.Текст,
		?(ОбъектПравила = Неопределено, "", "И ВЫРАЗИТЬ(Временный.КлючСтрокиПоставщика КАК СТРОКА(32)) = &ОбъектПравила"),
		?(ОбъектПравила = Неопределено, "", "И ВЫРАЗИТЬ(ПрайсЛистыКонтрагентовПравилаЗагрузки.ОбъектПравила КАК СТРОКА(32)) = &ОбъектПравила"));
	
	Запрос.УстановитьПараметр("ПрайсЛист"         , ПрайсЛист);
	Запрос.УстановитьПараметр("НазначениеПравила" , Перечисления.НазначениеПравилЗагрузки.КлючСтроки);
	Запрос.УстановитьПараметр("ВидПравила"        , Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение);
	Запрос.УстановитьПараметр("ОбъектПравила"     , ОбъектПравила);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаОбъектыПравил = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектыПравил.Следующий() Цикл
		Выборка  = ВыборкаОбъектыПравил.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Значения = Новый ТаблицаЗначений;
		Значения.Колонки.Добавить("Номенклатура");
		Значения.Колонки.Добавить("Артикул");
		Значения.Колонки.Добавить("Производитель");
		Значения.Колонки.Добавить("Автоматически");
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Значения.Добавить(), Выборка);
		КонецЦикла;
		
		Результат.Вставить(ВыборкаОбъектыПравил.КлючЗаписи, Значения);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Функция - Изменить ключ правил загрузки
//
// Параметры:
//  ПрайсЛист		 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист контрагента
//  НовыйНаборКлючей - ТаблицаЗначение							 - Набор ключей.
// 
// Возвращаемое значение:
//  Булево - Булево.
//
Функция ИзменитьКлючПравилЗагрузки(ПрайсЛист, НовыйНаборКлючей) Экспорт 
	
	// Сначала соберем текущие правила по временному регистру
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Временный.ПрайсЛист,
	|	Временный.КлючСтрокиПоставщика,
	|	Временный.ПроизводительВПрайсЛисте,
	|	Временный.Наименование,
	|	Временный.ОстальныеПоляВПрайсЛисте,
	|	ПравилаЗагрузки.НазначениеПравила,
	|	ПравилаЗагрузки.ОбъектПравила,
	|	ПравилаЗагрузки.ИдентификаторПравила,
	|	ПравилаЗагрузки.ВидПравила,
	|	ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста,
	|	ПравилаЗагрузки.Значение,
	|	ПравилаЗагрузки.ПорядокПрименения,
	|	ПравилаЗагрузки.ЗначениеОригинальное
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК Временный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|		ПО Временный.ПрайсЛист = ПравилаЗагрузки.ПрайсЛист
	|			И (ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки))
	|			И ((ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(32))) = Временный.КлючСтрокиПоставщика)
	|ГДЕ
	|	Временный.ПрайсЛист = &ПрайсЛист";
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	ТаблицаСтарыхПравил = Запрос.Выполнить().Выгрузить();
	
	// Сформируем таблицу новых правил
	ТаблицаНовыхПравил = ТаблицаСтарыхПравил.СкопироватьКолонки("ПрайсЛист, НазначениеПравила, ОбъектПравила, ИдентификаторПравила, ВидПравила, ИмяРеквизитаПрайсЛиста, Значение, ПорядокПрименения, ЗначениеОригинальное");
	Для Каждого СтароеПравило Из ТаблицаСтарыхПравил Цикл
		КлючНеЗаполнен = Истина; 
		НовыйКлючСтрокиПоставщика = "";
		
		СписокОстальныхПолей = СтароеПравило.ОстальныеПоляВПрайсЛисте.Получить();
		Для Каждого ПолеЗагрузки Из НовыйНаборКлючей Цикл
			ЗначениеПоля = "";
			Если ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Артикул" Тогда
				ЗначениеПоля = СтароеПравило.АртикулВПрайсЛисте;
			ИначеЕсли ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Производитель" Тогда
				ЗначениеПоля = СтароеПравило.ПроизводительВПрайсЛисте;
			ИначеЕсли ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Количество" Тогда
				ЗначениеПоля = СтароеПравило.КоличествоВПрайсЛисте;
			ИначеЕсли ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "СрокПоставки" Тогда
				ЗначениеПоля = СтароеПравило.СрокПоставкиВПрайсЛисте;
			ИначеЕсли ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Наименование" Тогда
				ЗначениеПоля = СтароеПравило.Наименование;
			Иначе
				Если ТипЗнч(СписокОстальныхПолей) = Тип("СписокЗначений") Тогда
					ЭлементСписка = СписокОстальныхПолей.НайтиПоЗначению(ПолеЗагрузки.ИмяПоляФайла);
					Если ЭлементСписка <> Неопределено Тогда
						ЗначениеПоля = ЭлементСписка.Представление;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				КлючНеЗаполнен = Ложь;
			КонецЕсли;
			
			НовыйКлючСтрокиПоставщика = НовыйКлючСтрокиПоставщика + "_" + ЗначениеПоля;
		КонецЦикла;
		
		Если КлючНеЗаполнен Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеПравило = ТаблицаНовыхПравил.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеПравило, СтароеПравило,, "ОбъектПравила");
		НовоеПравило.ОбъектПравила = НРег(ПрайсЛистыКонтрагентовСлужебный.MD5HeshString(НовыйКлючСтрокиПоставщика));
	КонецЦикла;
	
	
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки");
	ЭлементБлокировки.УстановитьЗначение("ПрайсЛист", ПрайсЛист);
	ЭлементБлокировки.УстановитьЗначение("НазначениеПравила", Перечисления.НазначениеПравилЗагрузки.КлючСтроки);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛист, Истина);
	НаборЗаписей.Отбор.НазначениеПравила.Установить(Перечисления.НазначениеПравилЗагрузки.КлючСтроки, Истина);
	НаборЗаписей.Загрузить(ТаблицаНовыхПравил);
	НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать();
		
		РезультатИтог = Истина;
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru='Не удалось обновить правила загрузки: '") + ИнформацияОбОшибке();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		РезультатИтог = Ложь;
	КонецПопытки;
	
	Возврат РезультатИтог;
	
КонецФункции //ОчиститьПравилаПрайсЛиста()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = ОбработкаСобытийРегистраСервер.ПолучитьСтандартныеОбязательныеРеквизиты(Объект);
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	Возврат УникальныеРеквизиты;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецЕсли