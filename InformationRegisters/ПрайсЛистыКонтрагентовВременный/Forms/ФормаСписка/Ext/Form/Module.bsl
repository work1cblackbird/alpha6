///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка регистра "Прайс-листы контрагентов временный"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ПрайсЛист") Тогда
		ТекущийПрайсЛист = Параметры.Отбор.ПрайсЛист;
		ЭтотОбъект.Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	КонецЕсли;
	
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);

	УстановитьЗаголовокФормы();
	ЗаполнитьПроизводителейПрайсЛиста();
	УправлениеДиалогомНаСервере();
	УстановитьУсловноеОформление();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ПроизводителиПрайсЛиста", Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ Отказ И НЕ НеПроверятьПроизводителейКЗамене Тогда
		Если ПроизводителиКЗамене.Количество() > 0 Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаИзмененияПроизводителей", ЭтотОбъект);
			
			ПоказатьВопрос(
				ОбработчикОповещения,
				НСтр("ru = 'Применить изменения таблицы производителей?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
			
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ПараметрыДействия = Новый Структура;
	
	Если ИмяСобытия = "ПрайсЛистыКонтрагентовВременный_ПослеЗаписи" И Параметр.ПрайсЛист = ТекущийПрайсЛист Тогда
		Если Параметр.ОбновитьТаблицуПроизводителей = Истина Тогда
			ЗаполнитьПроизводителейПрайсЛиста();
			ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ПроизводителиПрайсЛиста", Истина);
		КонецЕсли;
	КонецЕсли;

	// Развернем дерево
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ПроизводителиПрайсЛиста", Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") 
		И НЕ ВыбранноеЗначение.Пустая() 
		И Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		ПривязатьНоменклатуруНаСервере(ВыбранноеЗначение, Элементы.Список.ТекущиеДанные.КлючСтрокиПоставщика);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Производители") 
		И НЕ ВыбранноеЗначение.Пустая() 
		И Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		
		УстановитьПроизводителяНаСервере(ВыбранноеЗначение, Элементы.Список.ВыделенныеСтроки);
		ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ПроизводителиПрайсЛиста", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока);
	
	ТекущийПроизводитель = Элементы.ПроизводителиПрайсЛиста.ТекущиеДанные;
	
	Если ТекущийПроизводитель = Неопределено Тогда
		Производитель = Неопределено;
	Иначе
		Если Элементы.ПроизводителиПрайсЛиста.ТекущийРодитель = Неопределено Тогда
			Производитель = ТекущийПроизводитель.Производитель;
		Иначе
			Производитель = Элементы.ПроизводителиПрайсЛиста.ТекущийРодитель.Производитель;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Производитель", Производитель);
	
	ОткрытьФорму(
		"РегистрСведений.ПрайсЛистыКонтрагентовВременный.ФормаЗаписи",
		ПараметрыФормы,
		ЭтотОбъект,
		КлючУникальности,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеРегистраСведенийПрайсЛистыКонтрагентовВременный");
		
	Иначе
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеРегистраСведенийПрайсЛистыКонтрагентовВременный");
		
	КонецЕсли;
	// Конец ОценкаПроизводительности

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеЗаписиРегистраСведенийПрайсЛистыКонтрагентовВременный");
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// Установим представление производителя
	Для Каждого Строка Из Строки Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение.Данные.ПроизводительПредставление) Тогда
			Продолжить;
		КонецЕсли;
		
		ОформлениеПоляПроизводитель = Строка.Значение.Оформление.Получить("ПроизводительПредставление");
		ОформлениеПоляПроизводитель.УстановитьЗначениеПараметра(
			"Текст", Строка.Значение.Данные.ПроизводительВПрайсЛисте);
		
	КонецЦикла;
	
	Ключи = Строки.ПолучитьКлючи();
	НоменклатураПоКлючам = НоменклатураПоКлючам(СтрокиСписка(Ключи, Строки));
	
	Если НоменклатураПоКлючам = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Ключ Из Ключи Цикл
		
		Строка = Строки.Получить(Ключ);
		ОписаниеНоменклатуры = НоменклатураПоКлючам.Получить(Строка.Данные.КлючСтрокиПоставщика);
		
		Если ОписаниеНоменклатуры = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОформлениеПоляЦена = Строка.Оформление.Получить("Номенклатура");
		ОформлениеПоляЦена.УстановитьЗначениеПараметра("Текст", ОписаниеНоменклатуры.НоменклатураПредставление);
		ОформлениеПоляЦена.УстановитьЗначениеПараметра("ЦветФона",
			?(ОписаниеНоменклатуры.Автоматически, WebЦвета.ЗеленыйЛес, WebЦвета.ЦианСветлый));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьИзменения(Команда)
	
	Состояние("Старт применения изменений");
	
	ПринятьИзмененияНаСервере();
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ПроизводителиПрайсЛиста", Истина);
	
	Состояние("Изменения приняты");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если ТекущийПрайсЛист.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчисткаПрайсЛистаВопросЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru = 'Очистить все записи в прайс-листе?'"),
		РежимДиалогаВопрос.ДаНет,
		30,
		КодВозвратаДиалога.Нет,
		НСтр("ru = 'Запрос на очистку прайс-листа'"),
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПроизводителя(Команда)
	
	ОткрытьФорму(
		"Справочник.Производители.ФормаВыбора",
		Новый Структура("РежимВыбора", Истина),
		ЭтотОбъект,
		КлючУникальности,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСНоменклатурой(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено ИЛИ ТекущийПрайсЛист.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	массивВидовНоменклатуры = ПолучитьДоступныеВидыНоменклатуры();
	
	Если массивВидовНоменклатуры <> Неопределено Тогда
		ДоступныеВидыНоменклатуры = Новый СписокЗначений;
		ДоступныеВидыНоменклатуры.ЗагрузитьЗначения(массивВидовНоменклатуры);
		
		Отбор.Вставить("ВидНоменклатуры", ДоступныеВидыНоменклатуры);
	КонецЕсли;
	
	Если НЕ Элементы.Список.ТекущиеДанные.Производитель.Пустая() Тогда
		Отбор.Вставить("Производитель", Элементы.Список.ТекущиеДанные.Производитель);
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора,Отбор", Истина, Отбор);
	
	ОткрытьФорму(
		"Справочник.Номенклатура.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтотОбъект,
		КлючУникальности,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если НЕ ТекущийПрайсЛист.Пустая() Тогда
		Заголовок = СтрШаблон("Прайс-лист ""%1"" контрагента <%2>",
			СокрЛП(ТекущийПрайсЛист),
			СокрЛП(ТекущийПрайсЛист.Владелец));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроизводителейПрайсЛиста()
	
	Если ТекущийПрайсЛист.Пустая() Тогда
		ПроизводителиПрайсЛиста.ПолучитьЭлементы().Очистить();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводителиКЗамене.ПроизводительВПрайсЛисте,
	|	ПроизводителиКЗамене.НачальныйПроизводитель,
	|	ПроизводителиКЗамене.Производитель КАК Производитель,
	|	ПроизводителиКЗамене.ТекущийФлаг КАК НеЗагружать
	|ПОМЕСТИТЬ втПроизводителиКЗамене
	|ИЗ
	|	&ПроизводителиКЗамене КАК ПроизводителиКЗамене
	|ГДЕ
	|	ПроизводителиКЗамене.ПрайсЛист = &ПрайсЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(100)) КАК ПроизводительВПрайсЛисте,
	|	ВЫБОР
	|		КОГДА ПравилаЗагрузки.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.ПрисвоитьЗначение)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок,
	|	ЕСТЬNULL(ПроизводителиКЗамене.НачальныйПроизводитель, ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Производители)) КАК ПроизводительДляОтбора,
	|	ЕСТЬNULL(ПроизводителиКЗамене.Производитель, ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Производители)) КАК Производитель,
	|	МАКСИМУМ(ЕСТЬNULL(ПроизводителиКЗамене.НеЗагружать, ВЫБОР
	|				КОГДА ПравилаЗагрузки.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.НеЗагружать)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)) КАК НеЗагружать
	|ПОМЕСТИТЬ втПравилаЗагрузки
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПроизводителиКЗамене КАК ПроизводителиКЗамене
	|		ПО ((ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(100))) = ПроизводителиКЗамене.ПроизводительВПрайсЛисте)
	|			И ((ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Производители)) = ПроизводителиКЗамене.НачальныйПроизводитель)
	|ГДЕ
	|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(100)),
	|	ЕСТЬNULL(ПроизводителиКЗамене.НачальныйПроизводитель, ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Производители)),
	|	ЕСТЬNULL(ПроизводителиКЗамене.Производитель, ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Производители)),
	|	ВЫБОР
	|		КОГДА ПравилаЗагрузки.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.ПрисвоитьЗначение)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Временный.ПроизводительВПрайсЛисте КАК ПроизводительВПрайсЛисте,
	|	Временный.Производитель КАК Производитель,
	|	КОЛИЧЕСТВО(Временный.КлючСтрокиПоставщика) КАК Количество
	|ПОМЕСТИТЬ втВременный
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК Временный
	|ГДЕ
	|	Временный.ПрайсЛист = &ПрайсЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	Временный.ПроизводительВПрайсЛисте,
	|	Временный.Производитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПравилаЗагрузки.ПроизводительВПрайсЛисте, Временный.ПроизводительВПрайсЛисте) КАК ПроизводительВПрайсЛисте,
	|	ЕСТЬNULL(ПравилаЗагрузки.Производитель           , Временный.Производитель) КАК Производитель,
	|	ЕСТЬNULL(ПравилаЗагрузки.ПроизводительДляОтбора  , Временный.Производитель) КАК ПроизводительДляОтбора,
	|	ЕСТЬNULL(ПравилаЗагрузки.НеЗагружать             , ЛОЖЬ) КАК НеЗагружать,
	|	ЕСТЬNULL(ПравилаЗагрузки.Порядок                 , 3) КАК Порядок,
	|	ЕСТЬNULL(Временный.Количество                    , 0) КАК Количество
	|ИЗ
	|	втВременный КАК Временный
	|		ПОЛНОЕ СОЕДИНЕНИЕ втПравилаЗагрузки КАК ПравилаЗагрузки
	|		ПО Временный.ПроизводительВПрайсЛисте = ПравилаЗагрузки.ПроизводительВПрайсЛисте
	|			И Временный.Производитель = ПравилаЗагрузки.ПроизводительДляОтбора
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроизводительВПрайсЛисте,
	|	Порядок
	|ИТОГИ ПО
	|	ПроизводительВПрайсЛисте";
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ПрайсЛист"            , ТекущийПрайсЛист);
	Запрос.УстановитьПараметр("ПроизводителиКЗамене" , ПроизводителиКЗамене.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	ЭлементыДерева = ПроизводителиПрайсЛиста.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	ВремПроизводителиПрайсЛиста = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокаПроизводительВПрайсЛисте = Неопределено; 
	СтрокаПроизводитель = Неопределено;
	ОбщееКоличество = 0; 
	ЕстьДочерние = Ложь;
	
	Для Каждого СтрокаДерева Из ВремПроизводителиПрайсЛиста.Строки Цикл
		НоваяСтрока = ЭлементыДерева.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева.Строки[0]);
		СтрокаДерева.Строки.Удалить(СтрокаДерева.Строки[0]);
		ОбщееКоличество = ОбщееКоличество + НоваяСтрока.Количество;
		
		Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
			НоваяДочерняяСтрокаСтрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяДочерняяСтрокаСтрока, ДочерняяСтрока,, "ПроизводительВПрайсЛисте");
			ОбщееКоличество = ОбщееКоличество + НоваяДочерняяСтрокаСтрока.Количество;
			ЕстьДочерние = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если ЭлементыДерева.Количество() > 1 ИЛИ ЕстьДочерние Тогда
		НоваяСтрока = ЭлементыДерева.Вставить(0);
		
		НоваяСтрока.ПроизводительВПрайсЛисте = "<--Любой-->";
		НоваяСтрока.Количество = ОбщееКоличество;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПроизводителейПрайсЛиста()

&НаСервереБезКонтекста
Функция НайтиПроизводителяПоНаименованию(НаименованиеПроизводителя)
	
	Возврат Справочники.Производители.НайтиПроизводителяПоНаименованию(НаименованиеПроизводителя);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьПроизводителяИОткрытьФорму(НаименованиеПроизводителя)
	
	ОбъектПроизводителя = Справочники.Производители.СоздатьЭлемент();
	
	ДанныеЗаполнения = Новый Структура("Наименование", НаименованиеПроизводителя);
	ОбъектПроизводителя.Заполнить(ДанныеЗаполнения);
	ОбъектПроизводителя.УстановитьНовыйКод();
	
	ОбъектПроизводителя.ОбменДанными.Загрузка = Истина;
	Попытка
		ОбъектПроизводителя.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю("При записи нового производителя произошли ошибки:" 
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ОбъектПроизводителя.Ссылка;
	
КонецФункции

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	Элементы.ПроизводителиПрайсЛиста.Видимость = НЕ ТекущийПрайсЛист.Пустая();
	Элементы.ПринятьИзменения.Видимость        = НЕ ТекущийПрайсЛист.Пустая();
	
КонецПроцедуры

&НаСервере
Процедура ПринятьИзмененияНаСервере()
	
	Для Каждого ПроизводительКЗамене Из ПроизводителиКЗамене Цикл
		Если ПроизводительКЗамене.Производитель <> ПроизводительКЗамене.НачальныйПроизводитель Тогда
			РегистрыСведений.ПрайсЛистыКонтрагентовВременный.ИзменитьПроизводителяВПрайсЛисте(
				ПроизводительКЗамене.ПрайсЛист,
				ПроизводительКЗамене.ПроизводительВПрайсЛисте,
				ПроизводительКЗамене.Производитель,
				ПроизводительКЗамене.НачальныйПроизводитель);
		КонецЕсли;
		
		Если ПроизводительКЗамене.НачальныйФлаг <> ПроизводительКЗамене.ТекущийФлаг Тогда
			РегистрыСведений.ПрайсЛистыКонтрагентовВременный.УстановитьЗапретЗагрузкиДляПроизводителяВПрайсЛисте(
				ПроизводительКЗамене.ПрайсЛист,
				ПроизводительКЗамене.ПроизводительВПрайсЛисте,
				ПроизводительКЗамене.Производитель,
				ПроизводительКЗамене.ТекущийФлаг);
		КонецЕсли;
	КонецЦикла;
	
	ПроизводителиКЗамене.Очистить();
	ЗаполнитьПроизводителейПрайсЛиста();
	
	Элементы.ПринятьИзменения.Доступность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОчиститьДанныеПрайсЛиста(ПрайсЛист, Ошибки)
	
	НачатьТранзакцию();
	
	// установим блокировку
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовВременный");
	ЭлементБлокировки.УстановитьЗначение("ПрайсЛист" , ПрайсЛист);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентов");
	ЭлементБлокировки.УстановитьЗначение("ПрайсЛист" , ПрайсЛист);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентовВременный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛист);
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ОтменитьТранзакцию();
		Ошибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат Ложь;
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛист);
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ОтменитьТранзакцию();
		Ошибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоступныеВидыНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Перечисление.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Автомобили)
	|	И ВидыНоменклатуры.Ссылка <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Опции)
	|	И ВидыНоменклатуры.Ссылка <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ПривязатьНоменклатуруНаСервере(Номенклатура, КлючСтрокиПоставщика)
	
	Если ТекущийПрайсЛист.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ПрайсЛист              = ТекущийПрайсЛист;
	МенеджерЗаписи.НазначениеПравила      = Перечисления.НазначениеПравилЗагрузки.КлючСтроки;
	МенеджерЗаписи.ОбъектПравила          = КлючСтрокиПоставщика;
	МенеджерЗаписи.ИдентификаторПравила   = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ВидПравила             = Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение;
	МенеджерЗаписи.ИмяРеквизитаПрайсЛиста = "Номенклатура";
	МенеджерЗаписи.Значение               = Номенклатура;
	МенеджерЗаписи.ПорядокПрименения      = 0;
	МенеджерЗаписи.ЗначениеОригинальное   = Неопределено;
	
	МенеджерЗаписи.Записать();
	
	РегистрыСведений.ПрайсЛистыКонтрагентов.ОбновитьЗаписиВОсновномРегистре(ТекущийПрайсЛист,, КлючСтрокиПоставщика);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПроизводителяНаСервере(Производитель, Знач КлючиСтрок)
	
	Если ТекущийПрайсЛист.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	КлючиСтрокВр = Новый Массив;
	Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовВременный.СоздатьМенеджерЗаписи();
	Для Каждого Ключ Из КлючиСтрок Цикл
		ЗаполнитьЗначенияСвойств(Менеджер, Ключ);
		Менеджер.Прочитать();
		Если Менеджер.Выбран() Тогда
			КлючиСтрокВр.Добавить(Менеджер.КлючСтрокиПоставщика);
			Попытка
				Менеджер.Производитель = Производитель;
				Менеджер.Записать(Истина);
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	КлючиСтрок = КлючиСтрокВр;
	
	ТаблицаДляЗапроса = Новый ТаблицаЗначений;
	ТаблицаДляЗапроса.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(32)));
	
	Для Каждого Элемент Из КлючиСтрок Цикл
		ТаблицаДляЗапроса.Добавить().КлючСтроки = Элемент;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДляЗапроса.КлючСтроки КАК КлючСтроки
	|ПОМЕСТИТЬ ТаблицаДляЗапроса
	|ИЗ
	|	&ТаблицаДляЗапроса КАК ТаблицаДляЗапроса
	|;
	|ВЫБРАТЬ
	|	ПравилаЗагрузки.ИдентификаторПравила,
	|	ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(32)) КАК ОбъектПравила
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|ГДЕ
	|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
	|	И ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(32)) В (ВЫБРАТЬ ТаблицаДляЗапроса.КлючСтроки ИЗ ТаблицаДляЗапроса КАК ТаблицаДляЗапроса)
	|	И ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста = ""Производитель""";
	
	Запрос.УстановитьПараметр("ТаблицаДляЗапроса" , ТаблицаДляЗапроса);
	Запрос.УстановитьПараметр("ПрайсЛист"         , ТекущийПрайсЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекущиеЗаписи = Неопределено;
	Иначе
		ТекущиеЗаписи = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Для Каждого КлючСтрокиПоставщика Из КлючиСтрок Цикл
		НайденныйИдентификатор = Новый УникальныйИдентификатор;
		
		МенеджерЗаписи = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ПрайсЛист              = ТекущийПрайсЛист;
		МенеджерЗаписи.НазначениеПравила      = Перечисления.НазначениеПравилЗагрузки.КлючСтроки;
		МенеджерЗаписи.ОбъектПравила          = КлючСтрокиПоставщика;
		
		Если ТекущиеЗаписи <> Неопределено Тогда
			Условие = Новый Структура("ОбъектПравила", КлючСтрокиПоставщика);
			НайденныйИдентификаторВр = ТекущиеЗаписи.НайтиСтроки(Условие);
			Если НайденныйИдентификаторВр.Количество() > 0 Тогда
				НайденныйИдентификатор = НайденныйИдентификаторВр[0].ИдентификаторПравила;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи.ИдентификаторПравила   = НайденныйИдентификатор;
		МенеджерЗаписи.ВидПравила             = Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение;
		МенеджерЗаписи.ИмяРеквизитаПрайсЛиста = "Производитель";
		МенеджерЗаписи.Значение               = Производитель;
		МенеджерЗаписи.ПорядокПрименения      = 0;
		МенеджерЗаписи.ЗначениеОригинальное   = Неопределено;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	
	РегистрыСведений.ПрайсЛистыКонтрагентов.ОбновитьЗаписиВОсновномРегистре(ТекущийПрайсЛист,, КлючиСтрок);
	ЗаполнитьПроизводителейПрайсЛиста();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокиСписка(Ключи, Строки)
	
	ДанныеКлючей = Новый ТаблицаЗначений;
	ДанныеКлючей.Колонки.Добавить("ПрайсЛист", Новый ОписаниеТипов("СправочникСсылка.ПрайсЛистыКонтрагентов"));
	ДанныеКлючей.Колонки.Добавить("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ДанныеКлючей.Колонки.Добавить("Производитель", Новый ОписаниеТипов("СправочникСсылка.Производители"));
	ДанныеКлючей.Колонки.Добавить("КлючСтрокиПоставщика", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	
	Для Каждого Ключ Из Ключи Цикл
		
		НоваяСтрока = ДанныеКлючей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки.Получить(Ключ).Данные);
		НоваяСтрока.Артикул = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(НоваяСтрока.Артикул);
		
	КонецЦикла;
	
	Возврат ДанныеКлючей;
	
КонецФункции

&НаСервереБезКонтекста
Функция НоменклатураПоКлючам(Строки)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Строки.Артикул КАК Артикул,
	|	Строки.КлючСтрокиПоставщика КАК КлючСтрокиПоставщика,
	|	Строки.ПрайсЛист КАК ПрайсЛист,
	|	Строки.Производитель КАК Производитель
	|ПОМЕСТИТЬ СтрокиСписка
	|ИЗ
	|	&Строки КАК Строки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючЗаписи КАК КлючЗаписи,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ВложенныйЗапрос.Автоматически КАК Автоматически
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрайсЛистыКонтрагентовПравилаЗагрузки.ОбъектПравила КАК КлючЗаписи,
	|		ПрайсЛистыКонтрагентовПравилаЗагрузки.Значение КАК Номенклатура,
	|		ПРЕДСТАВЛЕНИЕССЫЛКИ(ПрайсЛистыКонтрагентовПравилаЗагрузки.Значение) КАК НоменклатураПредставление,
	|		ЛОЖЬ КАК Автоматически
	|	ИЗ
	|		РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПрайсЛистыКонтрагентовПравилаЗагрузки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокиСписка КАК СтрокиСписка
	|			ПО ПрайсЛистыКонтрагентовПравилаЗагрузки.ПрайсЛист = СтрокиСписка.ПрайсЛист
	|				И ПрайсЛистыКонтрагентовПравилаЗагрузки.ОбъектПравила = СтрокиСписка.КлючСтрокиПоставщика
	|	ГДЕ
	|		ПрайсЛистыКонтрагентовПравилаЗагрузки.ПрайсЛист В
	|				(ВЫБРАТЬ
	|					СтрокиСписка.ПрайсЛист КАК ПрайсЛист
	|				ИЗ
	|					СтрокиСписка КАК СтрокиСписка)
	|		И ПрайсЛистыКонтрагентовПравилаЗагрузки.ОбъектПравила В
	|				(ВЫБРАТЬ
	|					СтрокиСписка.КлючСтрокиПоставщика КАК КлючСтрокиПоставщика
	|				ИЗ
	|					СтрокиСписка КАК СтрокиСписка)
	|		И ПрайсЛистыКонтрагентовПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
	|		И ПрайсЛистыКонтрагентовПравилаЗагрузки.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.ПрисвоитьЗначение)
	|		И ПрайсЛистыКонтрагентовПравилаЗагрузки.ИмяРеквизитаПрайсЛиста = ""Номенклатура""
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтрокиСписка.КлючСтрокиПоставщика,
	|		Номенклатура.Ссылка,
	|		ПРЕДСТАВЛЕНИЕССЫЛКИ(Номенклатура.Ссылка),
	|		ИСТИНА
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокиСписка КАК СтрокиСписка
	|			ПО Номенклатура.АртикулДляПоиска = СтрокиСписка.Артикул
	|				И Номенклатура.Производитель = СтрокиСписка.Производитель
	|	ГДЕ
	|		НЕ Номенклатура.ПометкаУдаления
	|		И Номенклатура.АртикулДляПоиска В
	|				(ВЫБРАТЬ
	|					СтрокиСписка.Артикул КАК Артикул
	|				ИЗ
	|					СтрокиСписка КАК СтрокиСписка)
	|		И Номенклатура.Производитель В
	|				(ВЫБРАТЬ
	|					СтрокиСписка.Производитель КАК Производитель
	|				ИЗ
	|					СтрокиСписка КАК СтрокиСписка)) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|ИТОГИ ПО
	|	КлючЗаписи");
	Запрос.УстановитьПараметр("Строки", Строки);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ДетальнаяВыборка = Выборка.Выбрать();
		ДетальнаяВыборка.Следующий();
		Значение = Новый Структура("Номенклатура,НоменклатураПредставление,Автоматически");
		ЗаполнитьЗначенияСвойств(Значение, ДетальнаяВыборка);
		Результат.Вставить(ДетальнаяВыборка.КлючЗаписи, Значение);
		
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура СозданиеНовогоПроизводителяВопросЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НовыйПроизводитель = СоздатьПроизводителяИОткрытьФорму(ДопПараметры.НаименованиеПроизводителя);
		
		СтрокаВДереве = ПроизводителиПрайсЛиста.НайтиПоИдентификатору(ДопПараметры.ИдентификаторСтроки);
		СтрокаВДереве.Производитель = НовыйПроизводитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязьСПроизводителемВопросЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = "УстановитьСвязь" Тогда
		СтрокаВДереве = ПроизводителиПрайсЛиста.НайтиПоИдентификатору(ДопПараметры.ИдентификаторСтроки);
		СтрокаВДереве.Производитель = ДопПараметры.НайденныйПроизводитель;
	ИначеЕсли Ответ = "СоздатьНового" Тогда
		НовыйПроизводитель = СоздатьПроизводителяИОткрытьФорму(ДопПараметры.НаименованиеПроизводителя);
		
		СтрокаВДереве = ПроизводителиПрайсЛиста.НайтиПоИдентификатору(ДопПараметры.ИдентификаторСтроки);
		СтрокаВДереве.Производитель = НовыйПроизводитель;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаИзмененияПроизводителей(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		ПринятьИзменения(Неопределено);
		
		НеПроверятьПроизводителейКЗамене = Истина;
		Закрыть();
	ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Нет Тогда
		ПроизводителиКЗамене.Очистить();
		
		НеПроверятьПроизводителейКЗамене = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаИзмененияПроизводителей()

&НаКлиенте
Процедура ОчисткаПрайсЛистаВопросЗавершение(Ответ, ДопПараметры) Экспорт
	Перем Ошибки;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ОчиститьДанныеПрайсЛиста(ТекущийПрайсЛист, Ошибки) Тогда
			Элементы.Список.Обновить();
		Иначе
			ПоказатьПредупреждение(, Ошибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПрайсЛистаПроизводительОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПроизводителиПрайсЛиста.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Производитель.Пустая() И ЗначениеЗаполнено(ТекущиеДанные.ПроизводительВПрайсЛисте) Тогда
		СтандартнаяОбработка = Ложь;
		
		НаименованиеПроизводителя = ТекущиеДанные.ПроизводительВПрайсЛисте;
		НайденныйПроизводитель    = НайтиПроизводителяПоНаименованию(НаименованиеПроизводителя);
		
		Если НайденныйПроизводитель.Пустая() Тогда
			ДопПараметры = Новый Структура(
				"ИдентификаторСтроки,НаименованиеПроизводителя",
				Элементы.ПроизводителиПрайсЛиста.ТекущаяСтрока,
				НаименованиеПроизводителя);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"СозданиеНовогоПроизводителяВопросЗавершение",
				ЭтотОбъект,
				ДопПараметры);
			
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Создать нового производителя ""%1""?'"), НаименованиеПроизводителя);
			КнопкиВопроса = РежимДиалогаВопрос.ДаНет;
		Иначе
			ДопПараметры = Новый Структура("ИдентификаторСтроки,НайденныйПроизводитель,НаименованиеПроизводителя",
				Элементы.ПроизводителиПрайсЛиста.ТекущаяСтрока,
				НайденныйПроизводитель,
				НаименованиеПроизводителя);
			
			ТекстВопроса = СтрШаблон(
			НСтр("ru = 'В базе был найден подходящий производитель <%1>.%2Установить связь с найденным производителем или создать нового?'"),
			НайденныйПроизводитель,
			Символы.ПС);
			
			КнопкиВопроса = Новый СписокЗначений();
			КнопкиВопроса.Добавить("УстановитьСвязь" , СтрШаблон("Установить связи с <%1>", НайденныйПроизводитель));
			КнопкиВопроса.Добавить("СоздатьНового"   , "СоздатьНового");
			КнопкиВопроса.Добавить(Неопределено      , "Отмена");
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"УстановитьСвязьСПроизводителемВопросЗавершение",
				ЭтотОбъект,
				ДопПараметры);
		КонецЕсли;
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПрайсЛистаПередНачаломИзменения(Элемент, Отказ)
	
	ПроизводительДоРедактирования = Элемент.ТекущиеДанные.Производитель;
	НеЗагружатьДоРедактирования   = Элемент.ТекущиеДанные.НеЗагружать;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПрайсЛистаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Элементы.ПроизводителиПрайсЛиста.ТекущийРодитель = Неопределено Тогда
		ПроизводительВПрайсЛисте = Элемент.ТекущиеДанные.ПроизводительВПрайсЛисте;
	Иначе
		ПроизводительВПрайсЛисте = Элементы.ПроизводителиПрайсЛиста.ТекущийРодитель.ПроизводительВПрайсЛисте;
	КонецЕсли;
	
	Если ОтменаРедактирования ИЛИ НЕ ЗначениеЗаполнено(ПроизводительВПрайсЛисте) Тогда
		Возврат;
	КонецЕсли;
	
	НеЗагружать   = Элемент.ТекущиеДанные.НеЗагружать;
	Производитель = Элемент.ТекущиеДанные.Производитель;
	
	Если ПроизводительДоРедактирования = Производитель И НеЗагружатьДоРедактирования = НеЗагружать Тогда
		Возврат;
	КонецЕсли;
	
	// Если Текущий производитель и флаг совпадают с начальными, записанными в таблице, значит эту строку надо удалить.
	ОтборСтрок =  Новый Структура;
	ОтборСтрок.Вставить("ПрайсЛист"                , ТекущийПрайсЛист);
	ОтборСтрок.Вставить("ПроизводительВПрайсЛисте" , ПроизводительВПрайсЛисте);
	ОтборСтрок.Вставить("НачальныйПроизводитель"   ,   Производитель);
	ОтборСтрок.Вставить("НачальныйФлаг"            , НеЗагружать);
	
	НайденныеСтроки = ПроизводителиКЗамене.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
			ПроизводителиКЗамене.Удалить(СтрокаТЗ);
		КонецЦикла;
	Иначе
		НоваяСтрока = ПроизводителиКЗамене.Добавить();
		НоваяСтрока.ПрайсЛист                = ТекущийПрайсЛист;
		НоваяСтрока.ПроизводительВПрайсЛисте = ПроизводительВПрайсЛисте;
		НоваяСтрока.НачальныйПроизводитель   = ПроизводительДоРедактирования;
		НоваяСтрока.Производитель            = Производитель;
		НоваяСтрока.НачальныйФлаг            = НеЗагружатьДоРедактирования;
		НоваяСтрока.ТекущийФлаг              = НеЗагружать;
	КонецЕсли;
	
	Если ПроизводителиКЗамене.Количество() > 0 Тогда
		Элементы.ПринятьИзменения.Доступность = Истина;
	Иначе
		Элементы.ПринятьИзменения.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПрайсЛистаПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		
		ТекущийРодитель = ТекСтрока.ПолучитьРодителя();
		
		Если ТекущийРодитель = Неопределено Тогда
			ПроизводительВПрайсЛисте = ТекСтрока.ПроизводительВПрайсЛисте;
		Иначе
			ПроизводительВПрайсЛисте = ТекущийРодитель.ПроизводительВПрайсЛисте;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекСтрока = Неопределено ИЛИ ТекСтрока.ПроизводительВПрайсЛисте = "<--Любой-->" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Производитель",
			,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ПроизводительВПрайсЛисте",
			,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Ложь);
		Иначе
			Если ЗначениеЗаполнено(ТекСтрока.Производитель) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					Список,
					"Производитель",
					ТекСтрока.Производитель,
					ВидСравненияКомпоновкиДанных.Равно,
					Строка(ТекСтрока.Производитель),
					Истина);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					Список,
					"Производитель",
					,
					ВидСравненияКомпоновкиДанных.Равно,
					,
					Ложь);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список,
				"ПроизводительВПрайсЛисте",
				ПроизводительВПрайсЛисте,
				ВидСравненияКомпоновкиДанных.Равно,
				Строка(ТекСтрока.ПроизводительВПрайсЛисте),
				Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПрайсЛистаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПрайсЛистаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроизводительПредставление.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПроизводительПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗапрещенноеПравоДоступаЦвет);
	
КонецПроцедуры

#КонецОбласти

