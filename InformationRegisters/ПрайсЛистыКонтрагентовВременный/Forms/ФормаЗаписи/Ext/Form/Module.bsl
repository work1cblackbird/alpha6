///////////////////////////////////////////////////////////////////////////////
// Модуль формы записи регистра "Прайс-листы контрагентов временный"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьТаблицуДанныхФайла();
	  	
	Элементы.ТаблицаДанныхЗапретЗагрузки.Пометка = Запись.ЗапретЗагрузки;
	
	ЗаголовкиКолонокВПрайсЛисте.Загрузить(Запись.ПрайсЛист.ЗаголовкиКолонокВПрайсЛисте.Выгрузить());
	
	СписокВыбора = Элементы.ТаблицаДанныхИмяПоляФайла.СписокВыбора;
	Для Каждого СтрокаТЗ ИЗ ЗаголовкиКолонокВПрайсЛисте Цикл
		СписокВыбора.Добавить(СтрокаТЗ.ИмяКолонки,СтрокаТЗ.ПредставлениеКолонки);
	КонецЦикла;
	
	СформироватьТаблицуТекущейЗаписи();
	ЗаполнитьТаблицуДанных();
	ЗаполнитьОригинальнуюСтроку();
	ЗаполнитьТаблицуНоменклатуры();
	
	ЭтотОбъект.Заголовок = НСтр("ru='Редактирование правила записи прайс-листа: '") + Запись.ПрайсЛист.Наименование;
	
	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ТаблицаНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(ТекущийОбъект.Артикул);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НаборПравил = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьНаборЗаписей();
	НаборПравил.Отбор.ПрайсЛист.Установить(ТекущийОбъект.ПрайсЛист, Истина);
	НаборПравил.Отбор.НазначениеПравила.Установить(Перечисления.НазначениеПравилЗагрузки.КлючСтроки, Истина);
	НаборПравил.Отбор.ОбъектПравила.Установить(ТекущийОбъект.КлючСтрокиПоставщика, Истина);
	
	Для Каждого ПравилоТекущейСтроки Из ПравилаТекущейСтроки Цикл
		Если ПравилоТекущейСтроки.ИмяРеквизитаПрайсЛиста = "Номенклатура" Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПравила = НаборПравил.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПравила, ПравилоТекущейСтроки);
	КонецЦикла;
	
	Для Каждого СтрокаНоменклатура Из ТаблицаНоменклатуры Цикл
		Если СтрокаНоменклатура.Автоматически ИЛИ НЕ ЗначениеЗаполнено(СтрокаНоменклатура.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПравила = НаборПравил.Добавить();
		СтрокаПравила.ПрайсЛист = ТекущийОбъект.ПрайсЛист;
		СтрокаПравила.НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.КлючСтроки;
		СтрокаПравила.ОбъектПравила = ТекущийОбъект.КлючСтрокиПоставщика;
		СтрокаПравила.ИдентификаторПравила = Новый УникальныйИдентификатор;
		СтрокаПравила.ВидПравила = Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение;
		СтрокаПравила.ИмяРеквизитаПрайсЛиста = "Номенклатура";
		СтрокаПравила.Значение = СтрокаНоменклатура.Номенклатура;
		СтрокаПравила.ПорядокПрименения = 0;
		СтрокаПравила.ЗначениеОригинальное = Неопределено;
	КонецЦикла;
	
	НаборПравил.Записать();
	
КонецПроцедуры // ПриЗаписиНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	РегистрыСведений.ПрайсЛистыКонтрагентов.ОбновитьЗаписиВОсновномРегистре(Запись.ПрайсЛист,, Запись.КлючСтрокиПоставщика);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПрайсЛист", Запись.ПрайсЛист);
	ПараметрыОповещения.Вставить("ДатаЗаписи", Запись.ДатаЗаписи);
	ПараметрыОповещения.Вставить("КодПредложения", Запись.КодПредложения);
	ПараметрыОповещения.Вставить("ОбновитьТаблицуПроизводителей", ОбновитьТаблицуПроизводителей);
	
	Оповестить("ПрайсЛистыКонтрагентовВременный_ПослеЗаписи", ПараметрыОповещения);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовУправленияОбщегоНазначения

&НаСервере
Процедура ЗаполнениеСтрокиНоменклатуры(Отказ)
	
	ТекущаяСтрока = ТаблицаНоменклатуры.НайтиПоИдентификатору(Элементы.ТаблицаНоменклатуры.ТекущаяСтрока);
	ТекущаяСтрока.Автоматически = Ложь;
	ТекущаяСтрока.Артикул = ТекущаяСтрока.Номенклатура.Артикул;
	ТекущаяСтрока.Производитель = ТекущаяСтрока.Номенклатура.Производитель;
	
	Номенклатура = ТекущаяСтрока.Номенклатура;
	
	Отказ = НЕ ЗначениеЗаполнено(Номенклатура);
	
	Если НЕ Отказ И Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='В таблицу нельзя вводить номенклатуру вида ""Услуга""'"),
			,
			,,
			Отказ
		);
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество() > 1 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Выбранная номенклатура уже есть в таблице'"), ,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнениеСтрокиНоменклатуры()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ЗапретЗагрузкиНаСервере()
	
	ЗначениеОригинальное = ОригинальнаяСтрока.ЗапретЗагрузки;
	
	УдалитьПравилоДляСтроки("ЗапретЗагрузки");
	
	Если Запись.ЗапретЗагрузки <> ЗначениеОригинальное Тогда
		СоздатьПравилоДляСтроки("ЗапретЗагрузки", Запись.ЗапретЗагрузки, ЗначениеОригинальное);
	КонецЕсли;
	
КонецПроцедуры // ЗапретЗагрузкиНаСервере()

&НаКлиенте
Процедура ЗапретЗагрузки(Команда)
	
	Элементы.ТаблицаДанныхЗапретЗагрузки.Пометка = НЕ Элементы.ТаблицаДанныхЗапретЗагрузки.Пометка;
	Запись.ЗапретЗагрузки = Элементы.ТаблицаДанныхЗапретЗагрузки.Пометка;
	
	ЗапретЗагрузкиНаСервере();
	
КонецПроцедуры // ЗапретЗагрузки()

&НаСервере
Процедура ВосстановитьЗначениеНаСервере()
	
	ТекущаяСтрока = ТаблицаДанных.НайтиПоИдентификатору(Элементы.ТаблицаДанных.ТекущаяСтрока);
	
	ИмяЭлемента = ТекущаяСтрока.ИмяРеквизитаПрайсЛиста;
	
	Если ПустаяСтрока(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеОригинальное = ОригинальнаяСтрока[ИмяЭлемента];
	
	Если ТекущаяСтрока.ЗначениеВБазе <> ЗначениеОригинальное Тогда
		ТекущаяСтрока.ЗначениеВБазе = ЗначениеОригинальное;
		Запись[ИмяЭлемента] = ЗначениеОригинальное;
		
		УдалитьПравилоДляСтроки(ИмяЭлемента);
		
		Если ИмяЭлемента = "Производитель" Тогда
			ОбновитьТаблицуПроизводителей = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьПравилоДляСтроки(ИмяЭлемента);
	
	Если ИмяЭлемента = "СрокПоставки" Тогда
		УдалитьПравилоДляСтроки("СрокПоставкиМинимальный");
		УдалитьПравилоДляСтроки("СрокПоставкиМаксимальный");
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьЗначениеНаСервере()

&НаКлиенте
Процедура ВосстановитьЗначение1(Команда)
	
	ВосстановитьЗначениеНаСервере();
	
КонецПроцедуры // ВосстановитьЗначение()

#Область ОбработчикиСобытийЭлементовТаблицаДанных

&НаКлиенте
Процедура ТаблицаДанныхЗначениеВБазеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	ИмяЭлемента = ТекущаяСтрока.ИмяРеквизитаПрайсЛиста;
	
	Запись[ИмяЭлемента] = ТекущаяСтрока.ЗначениеВБазе;
	
	Если ИмяЭлемента = "Производитель" Тогда
		ОбновитьТаблицуПроизводителей = Истина;
	КонецЕсли;
	
	ЗначениеОригинальное = ОригинальнаяСтрока[ИмяЭлемента];
	
	УдалитьПравилоДляСтроки(ИмяЭлемента);
	
	Если ТекущаяСтрока.ЗначениеВБазе <> ЗначениеОригинальное Тогда
		СоздатьПравилоДляСтроки(ИмяЭлемента, ТекущаяСтрока.ЗначениеВБазе, ЗначениеОригинальное);
	КонецЕсли;
	
	// Если в таблице данных присутствует несколько строк с изменяемым именем реквизита, то изменим значения во всех.
	НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", ИмяЭлемента));
	Для Каждого СтрокаТЗ ИЗ НайденныеСтроки Цикл
		Если СтрокаТЗ.ЗначениеВБазе <> ТекущаяСтрока.ЗначениеВБазе Тогда
			СтрокаТЗ.ЗначениеВБазе = ТекущаяСтрока.ЗначениеВБазе;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ТаблицаДанныхЗначениеВБазеПриИзменении()

&НаКлиенте
Процедура ТаблицаДанныхЗначениеВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	Если ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "СрокПоставки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("СрокПоставкиМинимальный, СрокПоставкиМаксимальный, ЭтоИнтервал", ОригинальнаяСтрока["СрокПоставкиМинимальный"], ОригинальнаяСтрока["СрокПоставкиМаксимальный"], Истина);
		ОткрытьФорму("ОбщаяФорма.ФормаВводаСрокаПоставки", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_ОбработкаОповещенияИзмененияСрокаПоставки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаДанныхЗначениеВБазеНачалоВыбора()

&НаКлиенте
Процедура ТаблицаДанныхЗначениеВБазеОчистка(Элемент, СтандартнаяОбработка)
	
	ТаблицаДанныхЗначениеВБазеОчисткаНаСервере();
	
КонецПроцедуры // ТаблицаДанныхЗначениеВБазеОчистка()

&НаСервере
Процедура ТаблицаДанныхЗначениеВБазеОчисткаНаСервере()
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = ТаблицаДанных.НайтиПоИдентификатору(Элементы.ТаблицаДанных.ТекущаяСтрока);
	
	ИмяЭлемента = ТекущаяСтрока.ИмяРеквизитаПрайсЛиста;
	
	Если ИмяЭлемента = "Производитель" Тогда
		ОбновитьТаблицуПроизводителей = Истина;
	КонецЕсли;
	
	ЗначениеОригинальное = ОригинальнаяСтрока[ИмяЭлемента];
	
	УдалитьПравилоДляСтроки(ИмяЭлемента);
	Если ИмяЭлемента = "СрокПоставки" Тогда
		УдалитьПравилоДляСтроки("СрокПоставкиМинимальный");
		УдалитьПравилоДляСтроки("СрокПоставкиМаксимальный");
	КонецЕсли;
	
	Если ТекущаяСтрока.ЗначениеВБазе <> ЗначениеОригинальное Тогда
		ТекущаяСтрока.ЗначениеВБазе = ЗначениеОригинальное;
		Запись[ИмяЭлемента] = ЗначениеОригинальное;
		
		Если ИмяЭлемента = "СрокПоставки" Тогда
			Запись.СрокПоставкиМинимальный  = ОригинальнаяСтрока["СрокПоставкиМинимальный"];
			Запись.СрокПоставкиМаксимальный = ОригинальнаяСтрока["СрокПоставкиМаксимальный"];
		КонецЕсли;
		
	Иначе
		Если ИмяЭлемента = "СрокПоставки" Тогда
			ТекущаяСтрока.ЗначениеВБазе = ПрайсЛистыКонтрагентовКлиентСервер.ПредставлениеСрокаПоставкиИнтервал(0, 0);
			Запись.СрокПоставкиМинимальный  = 0;
			Запись.СрокПоставкиМаксимальный = 0;
			СоздатьПравилоДляСтроки(ИмяЭлемента, ТекущаяСтрока.ЗначениеВБазе, ЗначениеОригинальное);
			СоздатьПравилоДляСтроки("СрокПоставкиМинимальный", 0, ОригинальнаяСтрока["СрокПоставкиМинимальный"]);
			СоздатьПравилоДляСтроки("СрокПоставкиМаксимальный", 0, ОригинальнаяСтрока["СрокПоставкиМаксимальный"]);
		Иначе
			ТекущаяСтрока.ЗначениеВБазе = Элементы.ТаблицаДанныхЗначениеВБазе.ОграничениеТипа.ПривестиЗначение(Неопределено);
			СоздатьПравилоДляСтроки(ИмяЭлемента, ТекущаяСтрока.ЗначениеВБазе, ЗначениеОригинальное);
		КонецЕсли;
		
		Запись[ИмяЭлемента] = ТекущаяСтрока.ЗначениеВБазе;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаДанныхЗначениеВБазеОчисткаНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицаНоменклатуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	
	ОтказРедактированияАвтоматическойСтроки(Отказ);
	
КонецПроцедуры // ТаблицаНоменклатурыПередНачаломИзменения()

&НаКлиенте
Процедура ТаблицаНоменклатурыПередУдалением(Элемент, Отказ)
	
	ОтказРедактированияАвтоматическойСтроки(Отказ);
	
КонецПроцедуры // ТаблицаНоменклатурыПередУдалением()

&НаКлиенте
Процедура ТаблицаНоменклатурыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ЗаполнениеСтрокиНоменклатуры(Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует таблицу из полей и значений остальных полей прайс-листа
//
&НаСервере
Процедура СформироватьТаблицуДанныхФайла()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрайсЛистыКонтрагентовВременный.ОстальныеПоляВПрайсЛисте
	               |ИЗ
	               |	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК ПрайсЛистыКонтрагентовВременный
	               |ГДЕ
	               |	ПрайсЛистыКонтрагентовВременный.ПрайсЛист = &ПрайсЛист
	               |	И ПрайсЛистыКонтрагентовВременный.АртикулДляПоиска = &АртикулДляПоиска
	               |	И ПрайсЛистыКонтрагентовВременный.Производитель = &Производитель
	               |	И ПрайсЛистыКонтрагентовВременный.ДатаЗаписи = &ДатаЗаписи
	               |	И ПрайсЛистыКонтрагентовВременный.КодПредложения = &КодПредложения";
	Запрос.УстановитьПараметр("ПрайсЛист", Запись.ПрайсЛист);
	Запрос.УстановитьПараметр("АртикулДляПоиска", Запись.АртикулДляПоиска);
	Запрос.УстановитьПараметр("Производитель", Запись.Производитель);
	Запрос.УстановитьПараметр("ДатаЗаписи", Запись.ДатаЗаписи);
	Запрос.УстановитьПараметр("КодПредложения", Запись.КодПредложения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим таблицу из данных прочих полей прайс-листа
	СписокОригинальныхЗначений = Выборка.ОстальныеПоляВПрайсЛисте.Получить();
	Если ЗначениеЗаполнено(СписокОригинальныхЗначений) Тогда
		Если ТипЗнч(СписокОригинальныхЗначений) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементСписка ИЗ СписокОригинальныхЗначений Цикл
				НоваяСтрока = ТаблицаСтрокиФайла.Добавить();
				НоваяСтрока.НомерКолонки = ЭлементСписка.Значение;
				НоваяСтрока.ЗначениеКолонки = ЭлементСписка.Представление;
			КонецЦикла;
		ИначеЕсли ТипЗнч(СписокОригинальныхЗначений) = Тип("Массив") Тогда
			Для Сч = 0 По СписокОригинальныхЗначений.ВГраница() Цикл
				НоваяСтрока = ТаблицаСтрокиФайла.Добавить();
				НоваяСтрока.НомерКолонки = Сч + 1;
				НоваяСтрока.ЗначениеКолонки = СписокОригинальныхЗначений[Сч];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //СформироватьТаблицуОригинальныхДанных()

// Формирует таблицу, содержащую имена реквизитов и значения текущего менеджера записи.
//
&НаСервере
Процедура СформироватьТаблицуТекущейЗаписи()
	// Создадим таблицу из текущих значений менеджера записи
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентовВременный.Измерения);
	МассивДанных.Добавить(Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентовВременный.Ресурсы);
	МассивДанных.Добавить(Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентовВременный.Реквизиты);
	
	Для Каждого КонтейнерДанных ИЗ МассивДанных Цикл
		Для Каждого КолонкаТаб ИЗ КонтейнерДанных Цикл
			Если КолонкаТаб.Имя = "ОстальныеПоляВПрайсЛисте" Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаТекущаяЗапись.Добавить();
			НоваяСтрока.ИмяРеквизита = КолонкаТаб.Имя;
			НоваяСтрока.Значение = Запись[КолонкаТаб.Имя];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры //СформироватьТаблицуТекущейЗаписи()

// Заполняет основную таблицу данными
//
&НаСервере
Процедура ЗаполнитьТаблицуДанных()
	
	СтруктураПЛ = Запись.ПрайсЛист.СтруктураФайлаПрайсЛиста.Выгрузить(,"ИмяРеквизитаПрайсЛиста, ИмяПоляФайла, Ключевое");
	
	ТаблицаДанных.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаФайла.НомерКолонки,
	|	СтрокаФайла.ЗначениеКолонки
	|ПОМЕСТИТЬ СтрокаФайла
	|ИЗ
	|	&СтрокаФайла КАК СтрокаФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущаяЗапись.ИмяРеквизита,
	|	ТекущаяЗапись.Значение
	|ПОМЕСТИТЬ ТекущаяЗапись
	|ИЗ
	|	&ТекущаяЗапись КАК ТекущаяЗапись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПЛ.ИмяРеквизитаПрайсЛиста,
	|	СтруктураПЛ.ИмяПоляФайла,
	|	СтруктураПЛ.Ключевое
	|ПОМЕСТИТЬ СтруктураПЛ
	|ИЗ
	|	&СтруктураПЛ КАК СтруктураПЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПЛ.ИмяРеквизитаПрайсЛиста КАК ИмяРеквизитаПрайсЛиста,
	|	СтруктураПЛ.ИмяПоляФайла КАК ИмяПоляФайла,
	|	СтруктураПЛ.Ключевое КАК Ключевое,
	|	ВЫБОР
	|		КОГДА СтруктураПЛ.ИмяРеквизитаПрайсЛиста = ""Наименование""
	|		ТОГДА &Наименование
	|		ИНАЧЕ СтрокаФайла.ЗначениеКолонки
	|	КОНЕЦ КАК ЗначениеВФайле,
	|	ТекущаяЗапись.Значение КАК ЗначениеВБазе,
	|	ВЫБОР
	|		КОГДА СтруктураПЛ.Ключевое
	|			ТОГДА 0
	|		КОГДА СтруктураПЛ.ИмяПоляФайла <> """"
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	СтруктураПЛ КАК СтруктураПЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокаФайла КАК СтрокаФайла
	|		ПО СтруктураПЛ.ИмяПоляФайла = СтрокаФайла.НомерКолонки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущаяЗапись КАК ТекущаяЗапись
	|		ПО СтруктураПЛ.ИмяРеквизитаПрайсЛиста = ТекущаяЗапись.ИмяРеквизита
	|
	|СГРУППИРОВАТЬ ПО
	|	СтруктураПЛ.Ключевое,
	|	ТекущаяЗапись.Значение,
	|	СтруктураПЛ.ИмяПоляФайла,
	|	СтруктураПЛ.ИмяРеквизитаПрайсЛиста,
	|	ВЫБОР
	|		КОГДА СтруктураПЛ.ИмяРеквизитаПрайсЛиста = ""Наименование""
	|		ТОГДА &Наименование
	|		ИНАЧЕ СтрокаФайла.ЗначениеКолонки
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СтруктураПЛ.Ключевое
	|			ТОГДА 0
	|		КОГДА СтруктураПЛ.ИмяПоляФайла <> """"
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	"""",
	|	СтрокаФайла.НомерКолонки,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА СтруктураПЛ.ИмяРеквизитаПрайсЛиста = ""Наименование""
	|		ТОГДА &Наименование
	|		ИНАЧЕ СтрокаФайла.ЗначениеКолонки
	|	КОНЕЦ,
	|	"""",
	|	3
	|ИЗ
	|	СтрокаФайла КАК СтрокаФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтруктураПЛ КАК СтруктураПЛ
	|		ПО СтрокаФайла.НомерКолонки = СтруктураПЛ.ИмяПоляФайла
	|ГДЕ
	|	СтруктураПЛ.ИмяПоляФайла ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ИмяПоляФайла";
	
	Запрос.УстановитьПараметр("СтрокаФайла"  , ТаблицаСтрокиФайла.Выгрузить());
	Запрос.УстановитьПараметр("ТекущаяЗапись", ТаблицаТекущаяЗапись.Выгрузить());
	Запрос.УстановитьПараметр("СтруктураПЛ"  , СтруктураПЛ);
	Запрос.УстановитьПараметр("Наименование" , Запись.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		Если НЕ ПустаяСтрока(НоваяСтрока.ИмяРеквизитаПрайсЛиста) Тогда
			Рек = Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентовВременный.Измерения.Найти(НоваяСтрока.ИмяРеквизитаПрайсЛиста);
			Если Рек = Неопределено Тогда
				Рек = Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентовВременный.Ресурсы.Найти(НоваяСтрока.ИмяРеквизитаПрайсЛиста);
				Если Рек = Неопределено Тогда
					Рек = Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентовВременный.Реквизиты.Найти(НоваяСтрока.ИмяРеквизитаПрайсЛиста);
				КонецЕсли;
			КонецЕсли;
			Если НЕ Рек = Неопределено Тогда
				НоваяСтрока.ИмяРеквизитаСправочникаПредставление = Рек.Синоним;
			КонецЕсли;
		Иначе
			НоваяСтрока.ИмяРеквизитаСправочникаПредставление = "<--->";
		КонецЕсли;
		
		НайденныеСтроки = ЗаголовкиКолонокВПрайсЛисте.НайтиСтроки(Новый Структура("ИмяКолонки", НоваяСтрока.ИмяПоляФайла));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.ПредставлениеИмениКолонкиФайла = НайденныеСтроки[0].ПредставлениеКолонки;
		Иначе
			НоваяСтрока.ПредставлениеИмениКолонкиФайла = "<--->";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //СформироватьТаблицаДанных()

&НаСервере
Функция ЗаполнитьОригинальнуюСтроку()
	
	ОригинальнаяСтрока = Новый Структура;
	
	Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовВременный.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Менеджер, Запись);
	Менеджер.Прочитать();
	
	КлючСтрокиПоставщика = Менеджер.КлючСтрокиПоставщика;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаЗагрузки.ПрайсЛист КАК ПрайсЛист,
	|	ПравилаЗагрузки.НазначениеПравила КАК НазначениеПравила,
	|	ПравилаЗагрузки.ОбъектПравила КАК ОбъектПравила,
	|	ПравилаЗагрузки.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ПравилаЗагрузки.ВидПравила КАК ВидПравила,
	|	ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста КАК ИмяРеквизитаПрайсЛиста,
	|	ПравилаЗагрузки.Значение КАК Значение,
	|	ПравилаЗагрузки.ПорядокПрименения КАК ПорядокПрименения,
	|	ПравилаЗагрузки.ЗначениеОригинальное КАК ЗначениеОригинальное
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|ГДЕ
	|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
	|	И (ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(32))) = &КлючСтрокиПоставщика
	|	И ПравилаЗагрузки.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.ПрисвоитьЗначение)
	|	И ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста <> ""Номенклатура""";
	
	Запрос.УстановитьПараметр("ПрайсЛист",            Запись.ПрайсЛист);
	Запрос.УстановитьПараметр("КлючСтрокиПоставщика", Запись.КлючСтрокиПоставщика);
	
	ПравилаТекущейСтроки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НазначениеПравила",      Перечисления.НазначениеПравилЗагрузки.КлючСтроки);
	СтруктураОтбора.Вставить("ВидПравила",             Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение);
	СтруктураОтбора.Вставить("ИмяРеквизитаПрайсЛиста", "");
	
	Для каждого Реквизит Из Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентовВременный.Измерения Цикл
		Если Реквизит.Имя = "Номенклатура" ИЛИ Реквизит.Имя = "Производитель" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.ИмяРеквизитаПрайсЛиста = Реквизит.Имя;
		СтрокиПравил = ПравилаТекущейСтроки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиПравил.Количество() > 0 Тогда
			ОригинальнаяСтрока.Вставить(Реквизит.Имя, СтрокиПравил[0].ЗначениеОригинальное);
		Иначе
			ОригинальнаяСтрока.Вставить(Реквизит.Имя, Менеджер[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит Из Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентовВременный.Ресурсы Цикл
		СтруктураОтбора.ИмяРеквизитаПрайсЛиста = Реквизит.Имя;
		СтрокиПравил = ПравилаТекущейСтроки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиПравил.Количество() > 0 Тогда
			ОригинальнаяСтрока.Вставить(Реквизит.Имя, СтрокиПравил[0].ЗначениеОригинальное);
		Иначе
			ОригинальнаяСтрока.Вставить(Реквизит.Имя, Менеджер[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтбора.ИмяРеквизитаПрайсЛиста = "Артикул";
	СтрокиПравил = ПравилаТекущейСтроки.НайтиСтроки(СтруктураОтбора);
	Если СтрокиПравил.Количество() > 0 Тогда
		ОригинальнаяСтрока.Вставить("Артикул", СтрокиПравил[0].ЗначениеОригинальное);
	Иначе
		ОригинальнаяСтрока.Вставить("Артикул", Менеджер.Артикул);
	КонецЕсли;
	
	// Оригинальное значение возьмем из текущих данных производителей в прайс-листе
	ОригинальнаяСтрока.Вставить("Производитель", Производитель);
	
	ОригинальнаяСтрока.Вставить("ЗапретЗагрузки", Ложь);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СоздатьПравилоДляСтроки(ИмяЭлемента, Значение, ЗначениеОригинальное)
	
	СтрокаПравила = ПравилаТекущейСтроки.Добавить();
	СтрокаПравила.ПрайсЛист = Запись.ПрайсЛист;
	СтрокаПравила.НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.КлючСтроки;
	СтрокаПравила.ОбъектПравила = Запись.КлючСтрокиПоставщика;
	СтрокаПравила.ИдентификаторПравила = Новый УникальныйИдентификатор;
	СтрокаПравила.ВидПравила = Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение;
	СтрокаПравила.ИмяРеквизитаПрайсЛиста = ИмяЭлемента;
	СтрокаПравила.Значение = Значение;
	СтрокаПравила.ПорядокПрименения = 0;
	СтрокаПравила.ЗначениеОригинальное = ЗначениеОригинальное;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПравилоДляСтроки(ИмяЭлемента)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НазначениеПравила", Перечисления.НазначениеПравилЗагрузки.КлючСтроки);
	СтруктураОтбора.Вставить("ВидПравила", Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение);
	СтруктураОтбора.Вставить("ИмяРеквизитаПрайсЛиста", ИмяЭлемента);
	
	СтрокиПравил = ПравилаТекущейСтроки.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаПравила Из СтрокиПравил Цикл
		ПравилаТекущейСтроки.Удалить(СтрокаПравила);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСрокПоставки(СтруктураСроковПоставки)
	
	ТекущиеДанные = ТаблицаДанных.НайтиПоИдентификатору(Элементы.ТаблицаДанных.ТекущаяСтрока);
	
	ТекущиеДанные.ЗначениеВБазе = СтруктураСроковПоставки.СрокПоставкиПредставление;
	ЗначениеОригинальное = ОригинальнаяСтрока["СрокПоставки"];
	
	УдалитьПравилоДляСтроки("СрокПоставки");
	УдалитьПравилоДляСтроки("СрокПоставкиМинимальный");
	УдалитьПравилоДляСтроки("СрокПоставкиМаксимальный");
	
	Если ТекущиеДанные.ЗначениеВБазе <> ЗначениеОригинальное Тогда
		СоздатьПравилоДляСтроки("СрокПоставки", ТекущиеДанные.ЗначениеВБазе, ЗначениеОригинальное);
		СоздатьПравилоДляСтроки("СрокПоставкиМинимальный",  СтруктураСроковПоставки.СрокПоставкиМинимальный,  ОригинальнаяСтрока["СрокПоставкиМинимальный"]);
		СоздатьПравилоДляСтроки("СрокПоставкиМаксимальный", СтруктураСроковПоставки.СрокПоставкиМаксимальный, ОригинальнаяСтрока["СрокПоставкиМаксимальный"]);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьСрокПоставки()

&НаКлиенте
Процедура Подключаемый_ОбработкаОповещенияИзмененияСрокаПоставки(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись.СрокПоставкиМинимальный  = РезультатОповещения.СрокПоставкиМинимальный;
	Запись.СрокПоставкиМаксимальный = РезультатОповещения.СрокПоставкиМаксимальный;
	
	ИзменитьСрокПоставки(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаОповещенияИзмененияСрокаПоставки()

// Запрещает редактировать сопоставленную автоматически номенклатуру
//
&НаКлиенте
Процедура ОтказРедактированияАвтоматическойСтроки(Отказ)
	
	ТекущаяДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если ТекущаяДанные.Автоматически Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОтказРедактированияАвтоматическойСтроки()

&НаСервере
Процедура ЗаполнитьТаблицуНоменклатуры()
	
	НоменклатураПрайсЛиста = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.ЗначенияОбъектаПрайсЛиста(
		Запись.ПрайсЛист,
		Запись.КлючСтрокиПоставщика);
	
	ТаблицаНоменклатуры.Очистить();
	Для Каждого Элемент Из НоменклатураПрайсЛиста Цикл
		Для Каждого Номенклатура Из Элемент.Значение Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), Номенклатура);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомРегистраСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомРегистраСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

