// Модуль менеджера регистра "Прайс-листы контрагентов временный"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьПроизводителяВПрайсЛисте(
	ПрайсЛист,
	ПроизводительВПрайсЛисте,
	Производитель,
	НачальныйПроизводитель) Экспорт
	
	// Получим количество записей изменяемых во всех регистрах
	// Выберем все правила, которые надо изменить.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаЗагрузки.ПрайсЛист,
	|	ПравилаЗагрузки.НазначениеПравила,
	|	ПравилаЗагрузки.ОбъектПравила,
	|	ПравилаЗагрузки.ИдентификаторПравила
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|ГДЕ
	|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте)
	|	И (ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(100))) = &ПроизводительВПрайсЛисте
	|	И ПравилаЗагрузки.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.ПрисвоитьЗначение)";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	Запрос.УстановитьПараметр("ПроизводительВПрайсЛисте", ПроизводительВПрайсЛисте);
	ВыборкаПравил = Запрос.Выполнить().Выбрать();
	
	// Обработаем все полученные выборки
	ПервоеПравило = Истина;
	Пока ВыборкаПравил.Следующий() Цикл
		Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, ВыборкаПравил);
		Менеджер.Прочитать();
		Если ПервоеПравило Тогда
			Менеджер.ИмяРеквизитаПрайсЛиста = "Производитель";
			Менеджер.Значение = Производитель;
			Менеджер.ПорядокПрименения = 0;
			Менеджер.ЗначениеОригинальное = Неопределено;
			Менеджер.Записать();
			ПервоеПравило = Ложь;
		Иначе
			// Должно быть только одно такое правило
			Менеджер.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Временный.ПрайсЛист,
	|	Временный.ДатаЗаписи,
	|	Временный.КодПредложения
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК Временный
	|ГДЕ
	|	Временный.ПроизводительВПрайсЛисте = &ПроизводительВПрайсЛисте
	|	И Временный.Производитель = &Производитель
	|	И Временный.ПрайсЛист = &ПрайсЛист";
	Запрос.УстановитьПараметр("ПрайсЛист",                ПрайсЛист);
	Запрос.УстановитьПараметр("Производитель",            НачальныйПроизводитель);
	Запрос.УстановитьПараметр("ПроизводительВПрайсЛисте", ПроизводительВПрайсЛисте);
	
	ВыборкаВрем = Запрос.Выполнить().Выбрать();
	Количество = ВыборкаВрем.Количество();
	
	МассивКлючКтрокиПоставщика = Новый Массив;
	
	Пока ВыборкаВрем.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентовВременный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрайсЛист.Установить(ВыборкаВрем.ПрайсЛист, Истина);
		НаборЗаписей.Отбор.ДатаЗаписи.Установить(ВыборкаВрем.ДатаЗаписи, Истина);
		НаборЗаписей.Отбор.КодПредложения.Установить(ВыборкаВрем.КодПредложения, Истина);
		НаборЗаписей.Прочитать();
		
		Для Каждого СтрокаНабора Из НаборЗаписей Цикл
			Если МассивКлючКтрокиПоставщика.Найти(СтрокаНабора.КлючСтрокиПоставщика) = Неопределено Тогда
				МассивКлючКтрокиПоставщика.Добавить(СтрокаНабора.КлючСтрокиПоставщика);
			КонецЕсли;
			СтрокаНабора.Производитель = Производитель;
		КонецЦикла;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
	Если МассивКлючКтрокиПоставщика.Количество() > 0 Тогда
		РегистрыСведений.ПрайсЛистыКонтрагентов.ОбновитьЗаписиВОсновномРегистре(ПрайсЛист,, МассивКлючКтрокиПоставщика);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПроизводителяВЗаписяхПрайсЛиста()

Функция УстановитьЗапретЗагрузкиДляПроизводителяВПрайсЛисте(
	ПрайсЛист,
	ПроизводительВПрайсЛисте,
	Производитель,
	ЗапретЗагрузки) Экспорт
	
	НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте;
	
	// Проверим наличие правила
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаЗагрузки.ИдентификаторПравила
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|ГДЕ
	|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|	И ПравилаЗагрузки.НазначениеПравила = Значение(Перечисление.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте)
	|	И ПравилаЗагрузки.ОбъектПравила = &ПроизводительВПрайсЛисте
	|	И ПравилаЗагрузки.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.НеЗагружать)
	|	И ПравилаЗагрузки.Значение = &Производитель";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	Запрос.УстановитьПараметр("ПроизводительВПрайсЛисте", ПроизводительВПрайсЛисте);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	
	Результат = Запрос.Выполнить();
	
	НачатьТранзакцию();
	
	Если ЗапретЗагрузки Тогда
		
		Если Результат.Пустой() Тогда
			// Создадим правило
			ИдентификаторПравила = Новый УникальныйИдентификатор;
			Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьМенеджерЗаписи();
			Менеджер.ПрайсЛист = ПрайсЛист;
			Менеджер.НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте;
			Менеджер.ОбъектПравила = ПроизводительВПрайсЛисте;
			Менеджер.ИдентификаторПравила = ИдентификаторПравила;
			Менеджер.ВидПравила = Перечисления.ВидыПравилЗагрузки.НеЗагружать;
			Менеджер.Значение = Производитель;
			Менеджер.ЗначениеОригинальное = "Ложь"; // Для стандартного поведения при отмене правила
			Попытка
				Менеджер.Записать();
			Исключение
				ОтменитьТранзакцию();
				//#Если Клиент Тогда
				//	Сообщить(ОписаниеОшибки());
				//#КонецЕсли
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		Если Не Результат.Пустой() Тогда
			// Удалим правила
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьМенеджерЗаписи();
				Менеджер.ПрайсЛист = ПрайсЛист;
				Менеджер.НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте;
				Менеджер.ОбъектПравила = ПроизводительВПрайсЛисте;
				Менеджер.ИдентификаторПравила = Выборка.ИдентификаторПравила;
				Менеджер.Прочитать();
				Если Менеджер.Выбран() Тогда
					Попытка
						Менеджер.Удалить();
					Исключение
						ОтменитьТранзакцию();
						//#Если Клиент Тогда
						//	Сообщить(ОписаниеОшибки());
						//#КонецЕсли
						Возврат Ложь;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	// Найдем записи временного регистра, которые затрагивают эти изменения
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Временный.КлючСтрокиПоставщика
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК Временный
	|ГДЕ
	|	Временный.ПрайсЛист = &ПрайсЛист
	|	И Временный.ПроизводительВПрайсЛисте = &ПроизводительВПрайсЛисте
	|	И Временный.Производитель = &Производитель
	|";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Запрос.УстановитьПараметр("ПроизводительВПрайсЛисте", ПроизводительВПрайсЛисте);
	
	МассивКлючСтрокиПоставщика = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КлючСтрокиПоставщика");
	
	Если МассивКлючСтрокиПоставщика.Количество() > 0 Тогда
		РегистрыСведений.ПрайсЛистыКонтрагентов.ОбновитьЗаписиВОсновномРегистре(ПрайсЛист,, МассивКлючСтрокиПоставщика);
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьДанныеПрайсЛиста(ПрайсЛист, ДатаЗаписиПорцииДанных = Неопределено) Экспорт
	
	ЗапросТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрайсЛистыКонтрагентов.ДатаЗаписи
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК ПрайсЛистыКонтрагентов
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист%1";
	
	ОтборПоДате = ?(ДатаЗаписиПорцииДанных = Неопределено, "", " И ПрайсЛистыКонтрагентов.ДатаЗаписи = &ДатаЗаписи");
	
	
	Запрос = Новый Запрос(СтрШаблон(ЗапросТекст, ОтборПоДате));
	Запрос.УстановитьПараметр("ПрайсЛист" , ПрайсЛист);
	Запрос.УстановитьПараметр("ДатаЗаписи", ДатаЗаписиПорцииДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
				
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовВременный");
		
		ЭлементБлокировки.УстановитьЗначение("ПрайсЛист" , ПрайсЛист);
		ЭлементБлокировки.УстановитьЗначение("ДатаЗаписи", Выборка.ДатаЗаписи);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		НачатьТранзакцию();
		Блокировка.Заблокировать();
		
		// Очистим набор записей
		РегистрПрайсЛистов = СоздатьНаборЗаписей();
		РегистрПрайсЛистов.Отбор.ПрайсЛист.Установить(ПрайсЛист);
		РегистрПрайсЛистов.Отбор.ДатаЗаписи.Установить(Выборка.ДатаЗаписи);
		
		Попытка
			РегистрПрайсЛистов.Очистить();
			РегистрПрайсЛистов.Записать(); 
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = ОбработкаСобытийРегистраСервер.ПолучитьСтандартныеОбязательныеРеквизиты(Объект);
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции 

Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	Возврат УникальныеРеквизиты;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецЕсли