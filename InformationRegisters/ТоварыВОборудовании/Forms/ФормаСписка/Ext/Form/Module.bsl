///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка регистра "Товары в оборудовании"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Служит для определения параметра ГруппаТоваров в запросе из подменю "Заполнение".
	Если Параметры.Отбор.Свойство("ГруппаТоваров") Тогда
		
		ГруппаТоваровДляЗапроса = Параметры.Отбор.ГруппаТоваров;
		
	КонецЕсли;
	
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ГруппаТоваровДляЗапроса) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаГруппаЗаполнения",
			"Видимость",
			Ложь
		);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Установим пометку
	Элементы.ФормаУчитыватьНаличиеШтрихКодаПриЗаполнении.Пометка = УчитыватьНаличиеШтрихКодаПриЗаполнении;
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеРегистраСведенийТоварыВОборудовании");
		
	Иначе
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеРегистраСведенийТоварыВОборудовании");
		
	КонецЕсли;
	// Конец ОценкаПроизводительности
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеЗаписиРегистраСведенийТоварыВОборудовании");
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	// Создаем параметры описания оповещения
	ПараметрыОписанияОповещения = Новый Структура();
	ПараметрыОписанияОповещения.Вставить("Заполнение", Истина);
	ПараметрыОписанияОповещения.Вставить("ГруппаТоваров", ГруппаТоваровДляЗапроса);
	ПараметрыОписанияОповещения.Вставить("ИмяКоманды", Команда.Имя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаРезультатаЗаполненияТоварами", 
		ЭтотОбъект,
		ПараметрыОписанияОповещения
	);
	
	// Инициализируем структуру параметров открытия форм
	ПараметрыОткрытия = Новый Структура();
	
	// Выбираем команду для обработки
	Если Команда.Имя = "ВсяНоменклатура" Тогда
		
		ПоказатьВопрос(
			ОписаниеОповещения, 
			НСтр("ru = 'Добавить в список всю номенклатуру ?'"),
			РежимДиалогаВопрос.ДаНет,
			, 
			КодВозвратаДиалога.Нет);
	КонецЕсли;
	
	Если (Команда.Имя = "ЗаполнитьПоГруппеНоменклатуры") Тогда
		
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму(
			"Справочник.Номенклатура.ФормаВыбораГруппы", 
			ПараметрыОткрытия,
			ЭтотОбъект,
			,,, 
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
	Если (Команда.Имя = "ЗаполнитьСкладскимиОстатками") Тогда
		
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
		
		ОткрытьФорму(
			"Справочник.СкладыКомпании.ФормаВыбора",
			ПараметрыОткрытия,
			ЭтотОбъект,
			,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
	Если (Команда.Имя = "ЗаполнитьОстаткамиПоГруппеНоменклатуры") Тогда
		
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму(
			"Справочник.Номенклатура.ФормаВыбораГруппы",
			ПараметрыОткрытия,
			ЭтотОбъект,
			,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
	Если (Команда.Имя = "ЗаполнитьПоДокументу") Тогда
		
		СписокВыбора = Новый СписокЗначений();
		СписокВыбора.Добавить("ПеремещениеТоваров", НСтр("ru = 'Перемещение товаров'"));
		СписокВыбора.Добавить("ПоступлениеТоваров", НСтр("ru = 'Поступление товаров'"));
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вид документа'"));
		
	КонецЕсли;
	
	Если (Команда.Имя = "ЗаполнитьПоАссортиментуПодразделения") Тогда
		
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму(
			"Справочник.ПодразделенияКомпании.ФормаВыбора",
			ПараметрыОткрытия,
			ЭтотОбъект,
			,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УчитыватьНаличиеШтрихКодаПриЗаполнении(Команда)
	
	Элементы.ФормаУчитыватьНаличиеШтрихКодаПриЗаполнении.Пометка 
										= НЕ Элементы.ФормаУчитыватьНаличиеШтрихКодаПриЗаполнении.Пометка;
	УчитыватьНаличиеШтрихКодаПриЗаполнении = Элементы.ФормаУчитыватьНаличиеШтрихКодаПриЗаполнении.Пометка ;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОчиститьВсеТовары(Команда)
	
	// Создаем параметры описания оповещения
	ПараметрыОписанияОповещения = Новый Структура();
	ПараметрыОписанияОповещения.Вставить("ОчиститьВсеТовары", Истина);
	ПараметрыОписанияОповещения.Вставить("ГруппаТоваров", ГруппаТоваровДляЗапроса);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаРезультатаЗаполненияТоварами",
		ЭтотОбъект,
		ПараметрыОписанияОповещения
	);

	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Удалить все товары группы?'"),
		РежимДиалогаВопрос.ДаНет,
		, 
		КодВозвратаДиалога.Нет
	);
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработкаРезультатаЗаполненияТоварамиНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	// Очистим все товары в случае выполнения команды очистки
	Если ДополнительныеПараметры.Свойство("ОчиститьВсеТовары") Тогда
		
		СтруктураОтбора = Новый Структура("ГруппаТоваров", ДополнительныеПараметры.ГруппаТоваров);
		ПустойНаборЗаписей = РегистрыСведений.ТоварыВОборудовании.СоздатьНаборЗаписей();
		ПустойНаборЗаписей.Отбор.ГруппаТоваров.Значение = ДополнительныеПараметры.ГруппаТоваров;
		ПустойНаборЗаписей.Отбор.ГруппаТоваров.Использование = Истина;
		ПустойНаборЗаписей.Записать(Истина);
		
		Возврат;
		
	КонецЕсли;
	
	// Формируем запрос
	Запрос = Новый Запрос();
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	// Формируем текст запроса
	ТекстЗапросаВЫБРАТЬ_ИЗ = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.Наименование КАК Наименование
	|ПОМЕСТИТЬ СпрНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыВОборудовании КАК ТоварыВОборудовании
	|	ПО СпрНоменклатура.Ссылка=ТоварыВОборудовании.Номенклатура И ТоварыВОборудовании.ГруппаТоваров=&ГруппаТоваров";
	ТекстЗапросаГДЕ = "
	|ГДЕ
	|	НЕ СпрНоменклатура.ЭтоГруппа
	|	И ТоварыВОборудовании.Номенклатура ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ГруппаТоваров", ДополнительныеПараметры.ГруппаТоваров);
	
	// Проверяем какую команду заполнения необходимо выполнить
	Если ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьПоГруппеНоменклатуры"
		ИЛИ ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьОстаткамиПоГруппеНоменклатурыОбработанное" Тогда
		
		ГруппаНоменклатуры = ?(
			ДополнительныеПараметры.Свойство("ВыбГруппа"),
			ДополнительныеПараметры.ВыбГруппа,
			РезультатОповещения
		);
		
		Если ГруппаНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ГруппаНоменклатуры.ЭтоГруппа Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать группу номенклатуры .'"), ЭтотОбъект); 
			Возврат;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВыбГруппа", ГруппаНоменклатуры);
		ТекстЗапросаГДЕ = ТекстЗапросаГДЕ + "
		|	И СпрНоменклатура.Ссылка В ИЕРАРХИИ (&ВыбГруппа)";
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьСкладскимиОстатками" 
		ИЛИ ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьОстаткамиПоГруппеНоменклатурыОбработанное" Тогда
		
		Если РезультатОповещения = Неопределено ИЛИ РезультатОповещения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапросаВЫБРАТЬ_ИЗ = ТекстЗапросаВЫБРАТЬ_ИЗ + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки КАК ОстаткиТоваровКомпанииОстатки
		|	ПО СпрНоменклатура.Ссылка=ОстаткиТоваровКомпанииОстатки.Номенклатура";
		ТекстЗапросаГДЕ = ТекстЗапросаГДЕ + "
		|	И (НЕ ОстаткиТоваровКомпанииОстатки.КоличествоОстаток ЕСТЬ NULL И ОстаткиТоваровКомпанииОстатки.КоличествоОстаток>0)
		|	И ОстаткиТоваровКомпанииОстатки.СкладКомпании В (&Склады)";
		Запрос.УстановитьПараметр("Склады", РезультатОповещения);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьПоДокументуОбработанное" Тогда
		
		ТекстЗапросаГДЕ = ТекстЗапросаГДЕ + "
		|И СпрНоменклатура.Ссылка В (ВЫБРАТЬ Номенклатура ИЗ Документ."+РезультатОповещения.Метаданные().Имя + ".Товары ГДЕ Ссылка=&ДокСсылка)";
		Запрос.УстановитьПараметр("ДокСсылка", РезультатОповещения);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьПоАссортиментуПодразделения" Тогда
		
		ТекстЗапросаГДЕ = ТекстЗапросаГДЕ + "
		|И СпрНоменклатура.Ссылка В (ВЫБРАТЬ Номенклатура ИЗ РегистрСведений.ОграничениеАссортиментаПодразделения ГДЕ ПодразделениеКомпании=&СсылкаПодразделениеКомпании)";
		Запрос.УстановитьПараметр("СсылкаПодразделениеКомпании", РезультатОповещения);
		
	КонецЕсли;
	
	// Добавим фильтр на группу товаров оборудования
	ГруппаТоваров = ДополнительныеПараметры.ГруппаТоваров;
	Если ГруппаТоваров.РежимЗаполнения = 3 Тогда
		ТекстЗапросаГДЕ = ТекстЗапросаГДЕ + "
		|	И СпрНоменклатура.ТипНоменклатуры В (&ТипыНоменклатуры)";
		Запрос.УстановитьПараметр("ТипыНоменклатуры", ГруппаТоваров.ОграниченияЗаполненияГруппы.ВыгрузитьКолонку("ТипГруппаНоменклатуры"));
	ИначеЕсли ГруппаТоваров.РежимЗаполнения = 4 Тогда
		ТекстЗапросаГДЕ = ТекстЗапросаГДЕ + "
		|	И СпрНоменклатура.Ссылка В ИЕРАРХИИ(&ГруппыНоменклатуры)";
		Запрос.УстановитьПараметр("ГруппыНоменклатуры", ГруппаТоваров.ОграниченияЗаполненияГруппы.ВыгрузитьКолонку("ТипГруппаНоменклатуры"));
	ИначеЕсли ГруппаТоваров.РежимЗаполнения = 2 Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Справочники.ТипыНоменклатуры.Услуга);
		МассивТипов.Добавить(Справочники.ТипыНоменклатуры.Весовой);
		ТекстЗапросаГДЕ = ТекстЗапросаГДЕ + "
		|	И НЕ СпрНоменклатура.ТипНоменклатуры В (&ТипыНоменклатуры)";
		Запрос.УстановитьПараметр("ТипыНоменклатуры", МассивТипов);
	ИначеЕсли ГруппаТоваров.РежимЗаполнения = 1 Тогда
		ТекстЗапросаГДЕ = ТекстЗапросаГДЕ + "
		|	И СпрНоменклатура.ТипНоменклатуры.Весовой";
	КонецЕсли;
	
	// Получаем выборку
	Запрос.Текст = ТекстЗапросаВЫБРАТЬ_ИЗ + ТекстЗапросаГДЕ;
	
	// Помещаем во временную таблицу
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	СпрНоменклатура КАК СпрНоменклатура ";
	
	// Добавим фильтр на наличие штрих-кода для всех вариантов заполнения
	// Используем уже готовую выборку для условия на наличие штрих-кода.
	Если УчитыватьНаличиеШтрихКодаПриЗаполнении Тогда
		Запрос.Текст = Запрос.Текст + "
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ  РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|	   ПО СпрНоменклатура.Номенклатура = ШтрихКоды.Объект
	|		 И ШтрихКоды.Запрет = ЛОЖЬ ";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО СпрНоменклатура.Наименование
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	
	МаксНомерЯчейки = РегистрыСведений.ТоварыВОборудовании.ПолучитьМаксимальныйНомерЯчейки(
		ДополнительныеПараметры.ГруппаТоваров
	);
	
	// Перебираем выборку
	НаборЗаписей = РегистрыСведений.ТоварыВОборудовании.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	
	Попытка
		Пока Выборка.Следующий() Цикл
			
			МаксНомерЯчейки = МаксНомерЯчейки + 1;
			
			НоваяЗапись = РегистрыСведений.ТоварыВОборудовании.СоздатьМенеджерЗаписи(); 
			НоваяЗапись.ГруппаТоваров = ДополнительныеПараметры.ГруппаТоваров;
			НоваяЗапись.Номенклатура = Выборка.Номенклатура;
			НоваяЗапись.НомерЯчейки = МаксНомерЯчейки;
			НоваяЗапись.МоментИзменения = ТекущаяДатаСеанса();
			НоваяЗапись.Записать();
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось сделать запись в ТоварыВОборудовании.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗаполненияТоварами(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем выполнение текущей команды
	Если ДополнительныеПараметры.Свойство("ОчиститьВсеТовары") Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		РезультатОповещения = Неопределено;
		
	Иначе
		Если ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьОстаткамиПоГруппеНоменклатуры" Тогда
			
			// Открываем форму выбора складов и формируем признак выполнения команды
			ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьОстаткамиПоГруппеНоменклатурыОбработанное";
			ДополнительныеПараметры.Вставить("ВыбГруппа", РезультатОповещения);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОбработкаРезультатаЗаполненияТоварами",
				ЭтотОбъект,
				ДополнительныеПараметры
			);
			
			ПараметрыОткрытия = Новый Структура();
			ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
			ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
			
			ОткрытьФорму(
				"Справочник.СкладыКомпании.ФормаВыбора",
				ПараметрыОткрытия,
				ЭтотОбъект,
				,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);
				
			Возврат;
				
		Иначе
			Если ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьПоДокументу" Тогда
				
					// Открываем форму списка документа и формируем признак выполненной команды
					ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьПоДокументуОбработанное";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ОбработкаРезультатаЗаполненияТоварами",
						ЭтотОбъект,
						ДополнительныеПараметры
					);
					
					ПараметрыОткрытия = Новый Структура();
					ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
					
					НаименованиеДокумента = РезультатОповещения.Значение;
					
					ОткрытьФорму(
						"Документ." + НаименованиеДокумента + ".ФормаВыбора",
						ПараметрыОткрытия,
						ЭтотОбъект,
						,,, 
						ОписаниеОповещения,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
					);
					
					Возврат;
					
			Иначе
				Если ДополнительныеПараметры.ИмяКоманды = "ВсяНоменклатура" Тогда
					
				// Обработаем команду заполнения всей номенклатурой
				Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
				
				РезультатОповещения = Неопределено;
				
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработаем результат в контексте сервера.
	ОбработкаРезультатаЗаполненияТоварамиНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Обновим отображение элементов.
	Элементы.Список.Обновить();
	
КонецПроцедуры 


#КонецОбласти

