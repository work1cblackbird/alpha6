// Модуль менеджера регистра "Прайс-листы контрагентов журнал загрузки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция СформироватьСтруктуруЖурналаЗагрузки() Экспорт
	
	СтруктураЖурнала    = Новый Структура;
	ИнформацияОЗагрузке = Новый Структура;
	
	СтруктураЖурнала.Вставить("Период", ТекущаяДатаСеанса());
	СтруктураЖурнала.Вставить("Статус", Перечисления.СтатусыЗагрузкиПрайсЛистов.ПустаяСсылка());
	СтруктураЖурнала.Вставить("СтрокаПодключения", "");
	СтруктураЖурнала.Вставить("ДатаФайла", Дата("00010101"));
	СтруктураЖурнала.Вставить("ХешФайла", "");
	СтруктураЖурнала.Вставить("Примечание", "");
	СтруктураЖурнала.Вставить("ИнформацияОЗагрузке", ИнформацияОЗагрузке);
	СтруктураЖурнала.Вставить("ИдентификаторФоновогоЗадания", "");
	СтруктураЖурнала.Вставить("СтрокаПодключенияАрхив", "");
	СтруктураЖурнала.Вставить("Автор", Пользователи.ТекущийПользователь());
	
	Возврат СтруктураЖурнала;
КонецФункции // СформироватьСтруктуруЖурналаЗагрузки()

Процедура СохранитьЖурналЗагрузкиПрайсЛиста(ЖурналЗагрузки, ПрайсЛист) Экспорт 
	
	Если ЖурналЗагрузки.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Завершена Тогда
		// НЕОБХОДИМО ДОБАВИТЬ ФОРМИРОВАНИЕ СТАТИСТИКИ ДЛЯ ЗАПИСИ В РЕГИСТР !!!!!!
	КонецЕсли;
	
	Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СоздатьМенеджерЗаписи();
	Менеджер.Период = ЖурналЗагрузки.Период;
	Менеджер.ПрайсЛист = ПрайсЛист;
	Менеджер.Статус = ЖурналЗагрузки.Статус;
	Менеджер.СтрокаПодключения = ЖурналЗагрузки.СтрокаПодключения;
	Менеджер.ДатаФайла = ЖурналЗагрузки.ДатаФайла;
	Менеджер.ХешФайла = ЖурналЗагрузки.ХешФайла;
	Менеджер.Примечание = ЖурналЗагрузки.Примечание;
	Менеджер.СтрокаПодключенияАрхив = ЖурналЗагрузки.СтрокаПодключенияАрхив;
	Менеджер.ИнформацияОЗагрузке = Новый ХранилищеЗначения(ЖурналЗагрузки.ИнформацияОЗагрузке);
	Менеджер.ИдентификаторФоновогоЗадания = ЖурналЗагрузки.ИдентификаторФоновогоЗадания;
	Попытка
		Менеджер.Автор = Пользователи.ТекущийПользователь();
	Исключение
		Менеджер.Автор = "";
	КонецПопытки;
	
	Менеджер.Записать();
	
КонецПроцедуры // СохранитьЖурналЗагрузкиПрайсЛиста()

Процедура УдалитьЗаписиСтаршеДаты(Дата, ПрайсЛист = Неопределено) Экспорт 
	// Получим ключи всех записей старше переданной даты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналЗагрузки.Период,
	|	ЖурналЗагрузки.ПрайсЛист
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки КАК ЖурналЗагрузки
	|ГДЕ
	|	ЖурналЗагрузки.Период < &Дата
	|	" + ?(ЗначениеЗаполнено(ПрайсЛист), "И ЖурналЗагрузки.ПрайсЛист = &ПрайсЛист", "") + "
	|";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Результат;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Период", "Период");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПрайсЛист", "ПрайсЛист");
	Блокировка.Заблокировать();
	
	Выборка = Результат.Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ПрайсЛист.Установить(Выборка.ПрайсЛист);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Не удалось очистить журнал загрузки прайс-листов по причине: %1'"),
					ИнформацияОбОшибке().Описание
				)
			);
			Прервать;
		КонецПопытки;
	КонецЦикла;
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Записи журнала загрузки прайс-листов старше %1 успешно удалены.'"),
				Формат(Дата, "ДЛФ=DD")
			)
		);
	КонецЕсли;
	
КонецПроцедуры // УдалитьЗаписиСтаршеДаты()

Функция ТекущиеСостояниеПрайсЛиста(ПрайсЛист, Момент = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовЖурналЗагрузкиСрезПоследних.Статус
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СрезПоследних(
	|	&Момент,
	|	ПрайсЛист = &ПрайсЛист) КАК ПрайсЛистыКонтрагентовЖурналЗагрузкиСрезПоследних";
	Запрос.УстановитьПараметр("ПрайсЛист" , ПрайсЛист);
	Запрос.УстановитьПараметр("Момент"    , ?(Момент = Неопределено, ТекущаяДатаСеанса(), Момент));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТекущиеСостояниеПрайсЛистаВсеПоля(ПрайсЛист, Момент = Неопределено) Экспорт
	Результат = Новый Структура("Статус,ИдентификаторФоновогоЗадания,ДатаФайла,ХешФайла,Примечание,Автор,СтрокаПодключения");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖурналЗагрузки.Статус,
	|	ЖурналЗагрузки.ИдентификаторФоновогоЗадания,
	|	ЖурналЗагрузки.ДатаФайла,
	|	ЖурналЗагрузки.ХешФайла,
	|	ЖурналЗагрузки.Примечание,
	|	ЖурналЗагрузки.Автор,
	|	ЖурналЗагрузки.СтрокаПодключения
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СрезПоследних(
	|		&Момент,
	|		ПрайсЛист = &ПрайсЛист) КАК ЖурналЗагрузки";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	Запрос.УстановитьПараметр("Момент"   , Момент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ИзменитьСостояниеЗагрузки(ПрайсЛист, Причина = Неопределено) Экспорт
	Перем НовыйСтатус;
	
	ТекущееСостояние = ТекущиеСостояниеПрайсЛистаВсеПоля(ПрайсЛист);
	
	// определим новый статус
	Если ТекущееСостояние.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Загружается 
		ИЛИ	ТекущееСостояние.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Ожидает Тогда
		
		НовыйСтатус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Прервана;
		
		// попытаемся остановить выполнение загрузки
		Если ТекущееСостояние.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Загружается 
			И ЗначениеЗаполнено(ТекущееСостояние.ИдентификаторФоновогоЗадания) Тогда
			
			Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ТекущееСостояние.ИдентификаторФоновогоЗадания);
			Если Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				Попытка
					Задание.Отменить();
				Исключение
					// Возможно задание как раз в этот момент закончилось и ошибки нет
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Не удалось прервать загрузку прайс-листа'"),
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					Возврат;
				КонецПопытки;
			КонецЕсли;
			
			// сдвинем автозагрузку на 2 часа
			РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.СдвинутьДатуПроверкиФайлов(ПрайсЛист, 2);
		КонецЕсли;
	ИначеЕсли  ТекущееСостояние.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Запрещена Тогда
		
		НовыйСтатус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Разрешена;
		
	Иначе
		
		НовыйСтатус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Запрещена;
		
	КонецЕсли;
	
	// начнем запись
	
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки");
	ЭлементБлокировки.УстановитьЗначение("ПрайсЛист", ПрайсЛист);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(Менеджер, ТекущееСостояние);
	
	Менеджер.Период     = ТекущаяДатаСеанса();
	Менеджер.ПрайсЛист  = ПрайсЛист;
	Менеджер.Статус     = НовыйСтатус;
	Менеджер.Автор      = Пользователи.ТекущийПользователь();
	Менеджер.Примечание = Причина;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		Блокировка.Заблокировать();
		Менеджер.Записать(Истина); 
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = ОбработкаСобытийРегистраСервер.ПолучитьСтандартныеОбязательныеРеквизиты(Объект);
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции 

Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	Возврат УникальныеРеквизиты;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецЕсли