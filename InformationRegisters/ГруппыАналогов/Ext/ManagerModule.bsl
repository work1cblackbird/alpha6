// Модуль менеджера регистра сведений "Группы аналогов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Объединить группы аналогов
//
// Параметры:
//  ГлавнаяГруппа        - Строка - Идентификатор главной группы
//  ПрисоединяемаяГруппа - Строка - Идентификатор присоединяемой группы.
// 
// Возвращаемое значение:
//  Структура - Результат обработки.
//
Функция ОбъединитьГруппы(ГлавнаяГруппа, ПрисоединяемаяГруппа) Экспорт
	
	// Получим элементы основной группы
	НаборЗаписейГлавнойГруппы = РегистрыСведений.ГруппыАналогов.СоздатьНаборЗаписей();
	НаборЗаписейГлавнойГруппы.Отбор.ИдентификаторГруппы.Установить(ГлавнаяГруппа);
	
	НаборЗаписейГлавнойГруппы.Прочитать();
	
	ТаблицаНаборЗаписейГлавнойГруппы = НаборЗаписейГлавнойГруппы.Выгрузить();
	
	// Найдем есть ли в группе ГлавныйПоГруппе и ПоПроизводителю
	ЕстьГлавныйПоГруппе        = (ТаблицаНаборЗаписейГлавнойГруппы.Найти(Истина, "ГлавныйПоГруппе") <> Неопределено);
	ЕстьГлавныйПоПроизводителю = (ТаблицаНаборЗаписейГлавнойГруппы.Найти(Истина, "ГлавныйПоПроизводителю")<>Неопределено);
	
	// Создадим набор записей присоединяемой
	НаборЗаписейПрисоединяемойГруппы = РегистрыСведений.ГруппыАналогов.СоздатьНаборЗаписей();
	НаборЗаписейПрисоединяемойГруппы.Отбор.ИдентификаторГруппы.Установить(ПрисоединяемаяГруппа);
	
	НаборЗаписейПрисоединяемойГруппы.Прочитать();
	
	// Будем просматривать присоединяемую группу и переливать ее в главную
	Для Каждого ЗаписьПрисоединяемойГруппы Из НаборЗаписейПрисоединяемойГруппы Цикл
		
		УсловиеПоиска = Новый Структура("АртикулДляПоиска", НаборЗаписейПрисоединяемойГруппы[0].АртикулДляПоиска);
		Если ТаблицаНаборЗаписейГлавнойГруппы.НайтиСтроки(УсловиеПоиска).Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписейГлавнойГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьПрисоединяемойГруппы);
			
			НоваяЗапись.ИдентификаторГруппы = ГлавнаяГруппа;
			
			НоваяЗапись.ГлавныйПоГруппе =
				?(ЕстьГлавныйПоГруппе, Ложь, ЗаписьПрисоединяемойГруппы.ГлавныйПоГруппе);
			
			НоваяЗапись.ГлавныйПоПроизводителю =
				?(ЕстьГлавныйПоПроизводителю, Ложь, ЗаписьПрисоединяемойГруппы.ГлавныйПоПроизводителю);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейПрисоединяемойГруппы.Очистить();
	
	// Запишем наборы записей групп
	НаборЗаписейПрисоединяемойГруппы.Записать();
	НаборЗаписейГлавнойГруппы.Записать();
	
	Возврат Истина;
	
КонецФункции

// Процедура - Перенести элементы
//
// Параметры:
//  КлючиЗаписей   - Массив - Массив ключей записей регистра
//  ГруппаПриемник - Строка - Идентификатор группы приемника
//  ГруппаИсточник - Строка - Идентификатор группы источника.
//
// Возвращаемое значение:
//  Булево - Истина, если перенесли все элементы.
//
Функция ПеренестиЭлементы(КлючиЗаписей, ГруппаПриемник, ГруппаИсточник) Экспорт
	
	НаборПриемник = РегистрыСведений.ГруппыАналогов.СоздатьНаборЗаписей();
	НаборПриемник.Отбор.ИдентификаторГруппы.Установить(ГруппаПриемник);
	
	НаборИсточник = РегистрыСведений.ГруппыАналогов.СоздатьНаборЗаписей();
	НаборИсточник.Отбор.ИдентификаторГруппы.Установить(ГруппаИсточник);
	
	НаборПриемник.Прочитать(); НаборИсточник.Прочитать();
	
	ТаблицаНабораПриемника = НаборПриемник.Выгрузить();
	
	УсловиеПоиска = Новый Структура("ГлавныйПоГруппе", Истина);
	ЕстьГлавныйПоГруппе = (ТаблицаНабораПриемника.НайтиСтроки(УсловиеПоиска).Количество() > 0);
	
	УсловиеПоиска = Новый Структура("ГлавныйПоПроизводителю", Истина);
	ЕстьГлавныйПоПроизводителю = (ТаблицаНабораПриемника.НайтиСтроки(УсловиеПоиска).Количество() > 0);
	
	УдаляемыеЗаписи = Новый Массив;
	Для Каждого КлючЗаписи Из КлючиЗаписей Цикл
		УсловиеПоиска = Новый Структура("АртикулДляПоиска,Производитель");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, КлючЗаписи);
		
		Для Каждого Запись Из НаборИсточник Цикл
			Если Запись.АртикулДляПоиска = КлючЗаписи.АртикулДляПоиска И
				Запись.Производитель = КлючЗаписи.Производитель Тогда
				
				УдаляемыеЗаписи.Добавить(Запись);
				
			КонецЕсли;
		КонецЦикла;
		
		Если (ТаблицаНабораПриемника.НайтиСтроки(УсловиеПоиска).Количество() > 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Менеджер = РегистрыСведений.ГруппыАналогов.СоздатьМенеджерЗаписи();
		Менеджер.Заполнить(КлючЗаписи);
		
		Менеджер.Прочитать();
		
		Если Менеджер.Выбран() Тогда
			НоваяЗапись = НаборПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Менеджер);
			
			НоваяЗапись.ИдентификаторГруппы    = ГруппаПриемник;
			НоваяЗапись.ГлавныйПоГруппе        = ?(ЕстьГлавныйПоГруппе, Ложь, Менеджер.ГлавныйПоГруппе);
			НоваяЗапись.ГлавныйПоПроизводителю = ?(ЕстьГлавныйПоПроизводителю, Ложь, Менеджер.ГлавныйПоПроизводителю);
		КонецЕсли;
		
		Менеджер = Неопределено;
	КонецЦикла;
	
	Для Каждого УдаляемаяЗапись Из УдаляемыеЗаписи Цикл
		НаборИсточник.Удалить(УдаляемаяЗапись);
	КонецЦикла;
	
	Если НаборИсточник.Количество() < 2 Тогда
		НаборИсточник.Очистить();
	КонецЕсли;
	
	НаборИсточник.Записать(); НаборПриемник.Записать();
	
	Возврат (НаборИсточник.Количество() = 0);
	
КонецФункции

// Заменить артикул
//
// Параметры:
//  АртикулДляПоиска      - Строка							 - Номер артикула для поиска
//  НовыйАртикулДляПоиска - Строка							 - Номер нового артикула для поиска
//  Производитель         - СправочникСсылка.Производители	 - Производитель детали
//  Артикул               - Строка							 - Номер номенклатуры по каталогу.
//
Процедура ЗаменитьАртикул(АртикулДляПоиска, НовыйАртикулДляПоиска, Производитель, Артикул) Экспорт
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.АртикулДляПоиска.Установить(АртикулДляПоиска);
	Набор.Отбор.Производитель.Установить(Производитель);
	
	НовыйНабор = СоздатьНаборЗаписей();
	НовыйНабор.Отбор.АртикулДляПоиска.Установить(НовыйАртикулДляПоиска);
	НовыйНабор.Отбор.Производитель.Установить(Производитель);
	
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		НоваяЗапись = НовыйНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		
		НоваяЗапись.АртикулДляПоиска = НовыйАртикулДляПоиска;
		НоваяЗапись.Артикул          = Артикул;
	КонецЦикла;
	
	Набор.Очистить();
	Набор.Записать();
	
	НовыйНабор.Записать();
	
КонецПроцедуры 

// Заменить Наименование
//
// Параметры:
//  АртикулДляПоиска      - Строка							 - Номер артикула для поиска
//  Производитель         - СправочникСсылка.Производители	 - Производитель детали
//  НовоеНаименование     - Строка							 - Новое наименование.
//
Процедура ЗаменитьНаименование(АртикулДляПоиска, Производитель, НаименованиеНовое) Экспорт
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.АртикулДляПоиска.Установить(АртикулДляПоиска);
	Набор.Отбор.Производитель.Установить(Производитель);
	
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		
		Запись.Наименование = НаименованиеНовое; 
		
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры


// Фоновая операция загрузки аналогов из табличного документа.
// Определяет группы для объединения и возвращает данные пригодные для записи в регистр аналогов.
//
// Параметры:
//  Аналоги			 - ТабличныйДокумент				 - Табличный документ, содержащий аналоги
//  АдресРезультата	 - УникальныйИдентификатор, Строка	 - Уникальный идентификатор формы
//															или адрес во временном хранилище.
// Возвращаемое значение:
//  Структура - Аналоги из табличного документа:
// * ГруппыИзИБ - Произвольный, Неопределено -
// * ГруппыКЗаписи - Соответствие из Строка -
//
Функция АналогиИзТабличногоДокумента(Аналоги) Экспорт
	
	// Этап чтения данных из файла.
	ДлительныеОперации.СообщитьПрогресс(1);
	ДанныеАналогов = АналогиДляЗагрузки(Аналоги);
	
	// Этап заполнения производителей и артикулы для поиска.
	ДлительныеОперации.СообщитьПрогресс(2);
	ЗаполнитьДополнительныеПараметры(ДанныеАналогов);
	
	// Этап выполнения определение групп.
	ДлительныеОперации.СообщитьПрогресс(3);
	ДанныеАналогов = ОпределитьГруппыАналогов(ДанныеАналогов);
	
	// Этап определения групп к слиянию.
	ДлительныеОперации.СообщитьПрогресс(4);
	ГруппыКСлиянию = ОпределитьГруппыКСлиянию(ДанныеАналогов);
	
	// Этап записи в базу.
	ДлительныеОперации.СообщитьПрогресс(5);
	Возврат СформироватьИзменения(ГруппыКСлиянию);
	
КонецФункции

// Фоновая операция контроля аналогов из табличного документа.
// Определяет группы для объединения и возвращает данные пригодные для записи в регистр аналогов.
//
// Параметры:
//  Аналоги			 - ТабличныйДокумент				 - Табличный документ, содержащий аналоги
//  АдресРезультата	 - УникальныйИдентификатор, Строка	 - Уникальный идентификатор формы
//															или адрес во временном хранилище.
//
Процедура КонтрольАналоговВТабличномДокументе(Аналоги, АдресРезультата) Экспорт
	
	РезультатПроверки = Новый Соответствие;
	
	ДанныеАналогов = АналогиДляЗагрузки(Аналоги);
	
	КоличествоАналогов = ДанныеАналогов.Количество();
	
	ЗаполнитьДополнительныеПараметры(ДанныеАналогов);
	ДанныеАналогов = ОпределитьГруппыАналогов(ДанныеАналогов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеАналогов;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыЗагруженныхАналогов.НомерСтроки КАК НомерСтроки,
	               |	ГруппыЗагруженныхАналогов.Аналог КАК Аналог,
	               |	ЕСТЬNULL(ГруппыАналогов.ИдентификаторГруппы, """") КАК ИдентификаторГруппы
	               |ИЗ
	               |	ГруппыЗагруженныхАналогов КАК ГруппыЗагруженныхАналогов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
	               |		ПО ГруппыЗагруженныхАналогов.АртикулДляПоиска = ГруппыАналогов.АртикулДляПоиска
	               |			И ГруппыЗагруженныхАналогов.Производитель = ГруппыАналогов.Производитель";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("НомерСтроки, Аналог");
	
	Для НомерСтроки = 1 По КоличествоАналогов Цикл
		
		ИдентификаторАналога = "";
		ИдентификаторГруппы = "";
		
		
		СтруктураПоиска.НомерСтроки = НомерСтроки;
		СтруктураПоиска.Аналог = Истина;
		
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ИдентификаторАналога = Выборка.ИдентификаторГруппы;
		КонецЕсли;
		Выборка.Сбросить();
		
		СтруктураПоиска.Аналог = Ложь;
		
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ИдентификаторГруппы = Выборка.ИдентификаторГруппы;
		КонецЕсли;
		Выборка.Сбросить();
		
		// Сравним ИД аналогов
		Контроль = "";
		Если ИдентификаторАналога <> ИдентификаторГруппы Тогда
			
			Если НЕ ЗначениеЗаполнено(ИдентификаторГруппы) Тогда
				Контроль = НСтр("ru = 'Новая группа (артикулы в разных группах)'");
			ИначеЕсли НЕ ЗначениеЗаполнено(ИдентификаторАналога) Тогда
				Контроль = НСтр("ru = 'Новый артикул'");
			Иначе
				Контроль = НСтр("ru = 'Объединение групп (артикулы в разных группах)'");
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ИдентификаторГруппы) Тогда
				Контроль = НСтр("ru = 'Загрузка не требуется (артикулы в одной группе)'");
			Иначе
				Контроль = НСтр("ru = 'Новая группа аналогов'");
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатПроверки.Вставить(НомерСтроки, Контроль);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресРезультата);
	
КонецПроцедуры

// Фоновая операция контроля аналогов из табличного документа.
// Определяет группы для объединения и возвращает данные пригодные для записи в регистр аналогов.
//
// Параметры:
//  ДанныеЗаписи	 - Структура						 - Содержит данные для записи в регистр
//  АдресРезультата	 - УникальныйИдентификатор, Строка	 - Уникальный идентификатор формы
//															или адрес во временном хранилище.
//
Процедура ЗаписатьИзмененияВБазу(ДанныеЗаписи, АдресРезультата) Экспорт
	
	// Удалим группы из базы которые будут слиты с новыми.
	НачатьТранзакцию();
	НаборЗаписей = СоздатьНаборЗаписей();
	
	Для Каждого Группа Из ДанныеЗаписи.ГруппыИзИБ Цикл
		
		НаборЗаписей.Отбор.ИдентификаторГруппы.Установить(Строка(Группа));
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОтменитьТранзакцию();
			ВЛог(ИнформацияОбОшибке());
			ВызватьИсключение "Ошибка при удалении групп аналогов из информационной базы. Подробнее в журнале регистрации.";
		КонецПопытки;
		
	КонецЦикла;
	
	ДобавленныеГруппы = Новый Массив;
	
	Для Каждого Группа Из ДанныеЗаписи.ГруппыКЗаписи Цикл
		
		НаборЗаписей.Очистить();
		ДобавленныеГруппы.Добавить(Строка(Группа.Ключ));
		НаборЗаписей.Отбор.ИдентификаторГруппы.Установить(Строка(Группа.Ключ));
		
		Для Каждого Аналог Из Группа.Значение Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Аналог);
			НоваяЗапись.ИдентификаторГруппы = Строка(Группа.Ключ);
			
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОтменитьТранзакцию();
			ВЛог(ИнформацияОбОшибке());
			ВызватьИсключение "Ошибка при новой группы аналогов. Подробнее в журнале регистрации.";
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция АналогиДляЗагрузки(Аналоги)
	
	ИсточникДанных = Новый ОписаниеИсточникаДанных(Аналоги.Область(1, 1, Аналоги.ВысотаТаблицы, Аналоги.ШиринаТаблицы));
	
	Построитель = Новый ПостроительЗапроса();
	Построитель.ИсточникДанных = ИсточникДанных;
	Построитель.ЗаполнитьНастройки();
	
	ОтборНомер = Построитель.Отбор.Добавить("Номер");
	ОтборНомер.ВидСравнения = ВидСравнения.НеРавно;
	ОтборНомер.Значение = "";
	ОтборНомер.Использование = Истина;
	
	ОтборНомерАналога = Построитель.Отбор.Добавить("НомерАналога");
	ОтборНомерАналога.ВидСравнения = ВидСравнения.НеРавно;
	ОтборНомерАналога.Значение = "";
	ОтборНомерАналога.Использование = Истина;
	
	Построитель.Выполнить();
	
	Возврат Построитель.Результат.Выгрузить();
	
КонецФункции

Процедура ЗаполнитьДополнительныеПараметры(Аналоги)
	
	ТипПроизводитель = Новый ОписаниеТипов("СправочникСсылка.Производители");
	ТипАртикулДляПоиска = ОбщегоНазначения.ОписаниеТипаСтрока(25);
	Аналоги.Колонки.Добавить("ЗначениеПроизводитель", ТипПроизводитель);
	Аналоги.Колонки.Добавить("ЗначениеПроизводительАналога", ТипПроизводитель);
	Аналоги.Колонки.Добавить("АртикулДляПоиска", ТипАртикулДляПоиска);
	Аналоги.Колонки.Добавить("АртикулДляПоискаАналога", ТипАртикулДляПоиска);
	Аналоги.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	НомерСтроки = 1;
	Для Каждого Аналог Из Аналоги Цикл
		
		Аналог.АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Аналог.Номер);
		Аналог.АртикулДляПоискаАналога = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Аналог.НомерАналога);
		Аналог.ЗначениеПроизводитель = РаботаСПроизводителямиПовтИсп.НайтиПроизводителяПоНаименованию(Аналог.Производитель);
		Аналог.ЗначениеПроизводительАналога = РаботаСПроизводителямиПовтИсп
			.НайтиПроизводителяПоНаименованию(Аналог.ПроизводительАналога);
		Аналог.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьГруппыАналогов(Аналоги)
	
	НаименованиеГруппы = "";
	НаименованиеАналога = "";
	Если Аналоги.Колонки.Найти("Наименование_НаименованиеАналога") <> Неопределено Тогда
		
		НаименованиеГруппы = "Т.Наименование_НаименованиеАналога";
		НаименованиеАналога = "Т.Наименование_НаименованиеАналога";
		
	Иначе
		
		Если Аналоги.Колонки.Найти("НаименованиеАналога") <> Неопределено Тогда
			
			НаименованиеАналога = "Т.НаименованиеАналога";
			
		Иначе
			
			НаименованиеАналога = """""";
			
		КонецЕсли;
		
		Если Аналоги.Колонки.Найти("Наименование") <> Неопределено Тогда
			
			НаименованиеГруппы = "Т.Наименование";
			
		Иначе
			
			НаименованиеГруппы = """""";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("Т", Аналоги);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.НомерСтроки КАК НомерСтроки,
	|	Т.Номер + Т.Производитель КАК Группа,
	|	Т.Номер КАК Артикул,
	|	Т.НомерАналога КАК АртикулАналога,
	|	Т.АртикулДляПоиска КАК АртикулДляПоиска,
	|	Т.АртикулДляПоискаАналога КАК АртикулДляПоискаАналога,
	|	Т.ЗначениеПроизводитель КАК Производитель,
	|	Т.ЗначениеПроизводительАналога КАК ПроизводительАналога,
	|	%Наименование% КАК Наименование,
	|	%НаименованиеАналога% КАК НаименованиеАналога
	|ПОМЕСТИТЬ ЗагруженныеАналоги
	|ИЗ
	|	&Т КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗагруженныеАналоги.НомерСтроки КАК НомерСтроки,
	|	ЗагруженныеАналоги.Группа КАК Группа,
	|	ЗагруженныеАналоги.Артикул КАК Артикул,
	|	ЗагруженныеАналоги.АртикулДляПоиска КАК АртикулДляПоиска,
	|	ЗагруженныеАналоги.Производитель КАК Производитель,
	|	ЗагруженныеАналоги.Наименование КАК Наименование,
	|	ЛОЖЬ КАК Аналог
	|ПОМЕСТИТЬ ГруппыЗагруженныхАналогов
	|ИЗ
	|	ЗагруженныеАналоги КАК ЗагруженныеАналоги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗагруженныеАналоги.НомерСтроки,
	|	ЗагруженныеАналоги.Группа,
	|	ЗагруженныеАналоги.АртикулАналога,
	|	ЗагруженныеАналоги.АртикулДляПоискаАналога,
	|	ЗагруженныеАналоги.ПроизводительАналога,
	|	ЗагруженныеАналоги.НаименованиеАналога,
	|	ИСТИНА
	|ИЗ
	|	ЗагруженныеАналоги КАК ЗагруженныеАналоги";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Наименование%", НаименованиеГруппы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%НаименованиеАналога%", НаименованиеАналога);
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
	Возврат Менеджер;
	
КонецФункции

Функция НовыйАналог(ЗначениеЗаполения=Неопределено)
	
	Значение = Новый Структура();
	Значение.Вставить("Артикул");
	Значение.Вставить("АртикулДляПоиска");
	Значение.Вставить("Производитель");
	Значение.Вставить("Наименование");
	Значение.Вставить("ИзБазы");
	
	Если ЗначениеЗаполнено(ЗначениеЗаполения) Тогда
		
		ЗаполнитьЗначенияСвойств(Значение, ЗначениеЗаполения);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция УстановитьИдентификаторыГрупп(РезультатЗапроса)
	
	ИдентификаторыГрупп = Новый Соответствие;
	ГруппыИзИБ = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Структура("ИдентификаторыГрупп,ГруппыИзИБ", ИдентификаторыГрупп, ГруппыИзИБ);
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИзБазы Тогда
			
			Идентификатор = Новый УникальныйИдентификатор(Выборка.Группа);
			ГруппыИзИБ.Добавить(Идентификатор);
			
		Иначе
			
			Идентификатор = Новый УникальныйИдентификатор;
			
		КонецЕсли;
		
		ИдентификаторыГрупп.Вставить(Выборка.Группа, Идентификатор);
		
	КонецЦикла;
	
	Возврат Новый Структура("ИдентификаторыГрупп,ГруппыИзИБ", ИдентификаторыГрупп, ГруппыИзИБ);
	
КонецФункции

Функция ФорматироватьСоставГрупп(РезультатЗапроса, Идентификаторы)
	
	СоставГрупп = Новый Соответствие;
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Структура("СоставыГрупп", СоставГрупп);
		
	КонецЕсли;
	
	ВыборкаГрупп = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГрупп.Следующий() Цикл
		
		Выборка = ВыборкаГрупп.Выбрать();
		Состав = Новый Массив;
		Идентификатор = Идентификаторы.Получить(ВыборкаГрупп.ИдентификаторГруппы);
		
		Пока Выборка.Следующий() Цикл
			
			ОписаниеАналога = НовыйАналог(Выборка);
			Состав.Добавить(ОписаниеАналога);
			
		КонецЦикла;
		
		СоставГрупп.Вставить(Идентификатор, Состав);
		
	КонецЦикла;
	
	Возврат Новый Структура("СоставыГрупп", СоставГрупп);
	
КонецФункции

Функция ФорматироватьГруппыКОбъединению(РезультатЗапроса, Идентификаторы)
	
	КОбъединению = Новый Соответствие;
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат КОбъединению;
		
	КонецЕсли;
	
	ВыборкаГруппы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГруппы.Следующий() Цикл
		
		Выборка = ВыборкаГруппы.Выбрать();
		СвязанныеГруппы = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			СвязанныеГруппы.Добавить(Идентификаторы.Получить(Выборка.ГруппаСвязанная));
			
		КонецЦикла;
		
		КОбъединению.Вставить(Идентификаторы.Получить(ВыборкаГруппы.Группа), СвязанныеГруппы);
		
	КонецЦикла;
	
	Возврат КОбъединению;
	
КонецФункции

Функция ГруппыКОбъединениюРекурсивно(Группы, ТекущаяГруппа, ОтработанныеГруппы)
	
	СвязанныеДляТекущей = Группы.Получить(ТекущаяГруппа);
	
	Если СвязанныеДляТекущей = Неопределено ИЛИ ОтработанныеГруппы.Найти(ТекущаяГруппа) <> Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ОтработанныеГруппы.Добавить(ТекущаяГруппа);
	Результат = ОбщегоНазначения.СкопироватьРекурсивно(СвязанныеДляТекущей);
	Результат.Добавить(ТекущаяГруппа);
	
	Для Каждого Связанная Из СвязанныеДляТекущей Цикл
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ГруппыКОбъединениюРекурсивно(Группы, Связанная, ОтработанныеГруппы));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ГруппыКОбъединению(РезультатЗапроса, Идентификаторы)
	
	КОбъединению = Новый Массив;
	БезОбъединения = Новый Массив;
	Группы = ФорматироватьГруппыКОбъединению(РезультатЗапроса, Идентификаторы);
	
	ОтработанныеГруппы = Новый Массив;
	
	Для Каждого Группа Из Группы Цикл
		
		СвернутоеЗначение = ОбщегоНазначенияКлиентСервер
			.СвернутьМассив(ГруппыКОбъединениюРекурсивно(Группы, Группа.Ключ, ОтработанныеГруппы));
		
		Если СвернутоеЗначение.Количество() > 0 Тогда
			
			КОбъединению.Добавить(СвернутоеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Группа Из Идентификаторы Цикл
		
		Если ОтработанныеГруппы.Найти(Группа.Значение) = Неопределено Тогда
			
			БезОбъединения.Добавить(Группа.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("КОбъединению,БезОбъединения", КОбъединению, БезОбъединения);
	
КонецФункции

Функция ВыполнитьЗапросКАналогам(ГруппыАналогов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ГруппыАналогов;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыАналогов.ИдентификаторГруппы КАК ИдентификаторГруппы
	|ПОМЕСТИТЬ ГруппыАналоговСПересечениями
	|ИЗ
	|	РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппыЗагруженныхАналогов КАК ГруппыЗагруженныхАналогов
	|		ПО ГруппыАналогов.АртикулДляПоиска = ГруппыЗагруженныхАналогов.АртикулДляПоиска
	|			И ГруппыАналогов.Производитель = ГруппыЗагруженныхАналогов.Производитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыАналогов.ИдентификаторГруппы КАК ИдентификаторГруппы,
	|	ГруппыАналогов.Артикул КАК Артикул,
	|	ГруппыАналогов.АртикулДляПоиска КАК АртикулДляПоиска,
	|	ГруппыАналогов.Производитель КАК Производитель,
	|	ГруппыАналогов.Наименование КАК Наименование
	|ПОМЕСТИТЬ ГруппыАналоговВИБ
	|ИЗ
	|	РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппыАналоговСПересечениями КАК ГруппыАналоговСПересечениями
	|		ПО ГруппыАналогов.ИдентификаторГруппы = ГруппыАналоговСПересечениями.ИдентификаторГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГруппыАналоговСПересечениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыАналоговВИБ.ИдентификаторГруппы КАК Группа,
	|	ГруппыАналоговВИБ.Артикул КАК Артикул,
	|	ГруппыАналоговВИБ.АртикулДляПоиска КАК АртикулДляПоиска,
	|	ГруппыАналоговВИБ.Производитель КАК Производитель,
	|	ГруппыАналоговВИБ.Наименование КАК Наименование,
	|	ИСТИНА КАК ИзБазы
	|ПОМЕСТИТЬ ОбъединенныеАналоги
	|ИЗ
	|	ГруппыАналоговВИБ КАК ГруппыАналоговВИБ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГруппыЗагруженныхАналогов.Группа,
	|	ГруппыЗагруженныхАналогов.Артикул,
	|	ГруппыЗагруженныхАналогов.АртикулДляПоиска,
	|	ГруппыЗагруженныхАналогов.Производитель,
	|	ГруппыЗагруженныхАналогов.Наименование,
	|	ЛОЖЬ
	|ИЗ
	|	ГруппыЗагруженныхАналогов КАК ГруппыЗагруженныхАналогов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГруппыАналоговВИБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединенныеАналоги.Группа КАК ИдентификаторГруппы,
	|	ОбъединенныеАналоги.Артикул КАК Артикул,
	|	ОбъединенныеАналоги.АртикулДляПоиска КАК АртикулДляПоиска,
	|	ОбъединенныеАналоги.Производитель КАК Производитель,
	|	ОбъединенныеАналоги.Наименование КАК Наименование,
	|	ОбъединенныеАналоги.ИзБазы КАК ИзБазы
	|ИЗ
	|	ОбъединенныеАналоги КАК ОбъединенныеАналоги
	|ИТОГИ ПО
	|	ИдентификаторГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъединенныеАналоги.Группа КАК Группа,
	|	ОбъединенныеАналогиДополнительно.Группа КАК ГруппаСвязанная
	|ИЗ
	|	ОбъединенныеАналоги КАК ОбъединенныеАналоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъединенныеАналоги КАК ОбъединенныеАналогиДополнительно
	|		ПО ОбъединенныеАналоги.Группа <> ОбъединенныеАналогиДополнительно.Группа
	|			И ОбъединенныеАналоги.АртикулДляПоиска = ОбъединенныеАналогиДополнительно.АртикулДляПоиска
	|			И ОбъединенныеАналоги.Производитель = ОбъединенныеАналогиДополнительно.Производитель
	|ИТОГИ ПО
	|	Группа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъединенныеАналоги.Группа КАК Группа,
	|	ОбъединенныеАналоги.ИзБазы КАК ИзБазы
	|ИЗ
	|	ОбъединенныеАналоги КАК ОбъединенныеАналоги";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура(
		"Состав,Связи,Идентификаторы",
		РезультатыЗапроса[5],
		РезультатыЗапроса[6],
		РезультатыЗапроса[7]);
	
КонецФункции

Функция ОпределитьГруппыКСлиянию(ГруппыАналогов)
	
	Результат = Новый Структура;
	РезультатыЗапроса = ВыполнитьЗапросКАналогам(ГруппыАналогов);
	ОбщегоНазначенияКлиентСервер
		.ДополнитьСтруктуру(Результат, УстановитьИдентификаторыГрупп(РезультатыЗапроса.Идентификаторы));
	ОбщегоНазначенияКлиентСервер
		.ДополнитьСтруктуру(Результат, ФорматироватьСоставГрупп(РезультатыЗапроса.Состав, Результат.ИдентификаторыГрупп));
	ОбщегоНазначенияКлиентСервер
		.ДополнитьСтруктуру(Результат, ГруппыКОбъединению(РезультатыЗапроса.Связи, Результат.ИдентификаторыГрупп));
	
	Возврат Результат;
	
КонецФункции

Функция АналогУжеДобавлен(Аналог, Состав)
	
	Для Каждого Строка Из Состав Цикл
		
		Если Аналог.АртикулДляПоиска = Строка.АртикулДляПоиска И Аналог.Производитель = Строка.Производитель Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПодготовитьДанныеКЗаписи(ИнформацияДляЗаписи)
	
	СоставыГрупп = ПолучитьЗначениеПараметраСтруктуры(ИнформацияДляЗаписи, "СоставыГрупп", Новый Соответствие);
	КОбъединению = ПолучитьЗначениеПараметраСтруктуры(ИнформацияДляЗаписи, "КОбъединению", Новый Массив);
	БезОбъединения = ПолучитьЗначениеПараметраСтруктуры(ИнформацияДляЗаписи, "БезОбъединения", Новый Массив);
	
	ГруппыКЗаписи = Новый Соответствие;
	
	// Группы которые записываются без изменения.
	Для Каждого Группа Из БезОбъединения Цикл
		
		НовыйСостав = Новый Массив;
		
		Для Каждого Аналог Из СоставыГрупп.Получить(Группа) Цикл
			
			Если АналогУжеДобавлен(Аналог, НовыйСостав) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НовыйСостав.Добавить(Аналог);
			
		КонецЦикла;
		
		ГруппыКЗаписи.Вставить(Группа, НовыйСостав);
		
	КонецЦикла;
	
	// Объединенные группы.
	Для Каждого Группа Из КОбъединению Цикл
		
		НовыйСостав = Новый Массив;
		
		Для Каждого Объединяемая Из Группа Цикл
			
			СоставГруппы = СоставыГрупп.Получить(Объединяемая);
			
			Если СоставГруппы = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого Аналог Из СоставГруппы Цикл
				
				Если АналогУжеДобавлен(Аналог, НовыйСостав) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				НовыйСостав.Добавить(Аналог);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ГруппыКЗаписи.Вставить(Новый УникальныйИдентификатор, НовыйСостав);
		
	КонецЦикла;
	
	Возврат ГруппыКЗаписи;
	
КонецФункции

Процедура ВЛог(ИнформацияОбОшибке)
	
	ЗаписьЖурналаРегистрации(
				"Загрузка аналогов",
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Функция СформироватьИзменения(ИнформацияДляЗаписи)
	
	ГруппыИзИБ = ПолучитьЗначениеПараметраСтруктуры(ИнформацияДляЗаписи, "ГруппыИзИБ", Новый Массив);
	
	ГруппыКЗаписи = ПодготовитьДанныеКЗаписи(ИнформацияДляЗаписи);
	
	Возврат Новый Структура("ГруппыИзИБ, ГруппыКЗаписи", ГруппыИзИБ, ГруппыКЗаписи);
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = ОбработкаСобытийРегистраСервер.ПолучитьСтандартныеОбязательныеРеквизиты(Объект);
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции 

Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	Возврат УникальныеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли