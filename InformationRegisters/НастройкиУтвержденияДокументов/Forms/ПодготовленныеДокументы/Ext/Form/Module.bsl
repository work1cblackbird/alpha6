
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДокументыПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТекущиеДанные = Элементы.ДокументыПользователя.ТекущиеДанные;
	
	Если ИмяСобытия = "ПослеУтвержденияДокументов" И (НЕ ТекущиеДанные = Неопределено) И ТекущиеДанные.Документ = Параметр Тогда
		Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументыПользователяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДокументыПользователяДокумент" И НЕ ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("Строка") Тогда
		
		// Открываем форму выбранного документа.
		ПоказатьЗначение( , Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыПользователяПриАктивизацииСтрокиНаСервере(Документ, ПолноеИмяОбъекта)
	
	// Проверяем, что выбран документ, а не родительская группа дерева.
	ВыбранДокумент = ЗначениеЗаполнено(Документ) И НЕ ТипЗнч(Документ) = Тип("Строка");
	Если НЕ ВыбранДокумент Тогда
		ПолноеИмяОбъекта = "";
	КонецЕсли;
	
	// Устанавливаем доступность кнопок истории.
	Если НЕ Элементы.УтверждениеДокументовСтатусИстория.Доступность = ВыбранДокумент Тогда
		Элементы.УтверждениеДокументовСтатусИстория.Доступность = ВыбранДокумент;
	КонецЕсли;
	Если НЕ Элементы.ДокументыПользователяКонтекстноеМенюСтатусИстория.Доступность = ВыбранДокумент Тогда
		Элементы.ДокументыПользователяКонтекстноеМенюСтатусИстория.Доступность = ВыбранДокумент;
	КонецЕсли;
	
	// Обновляем доступность кнопок изменения статуса
	Если ВыбранДокумент Тогда
		УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПользователяПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДокументыПользователяПриАктивизацииСтрокиНаСервере(ТекДанные.Документ, ТекДанные.ПолноеИмяОбъекта);
	Иначе
		Элементы.УтверждениеДокументовСтатусСогласован.Доступность = Ложь;
		Элементы.УтверждениеДокументовСтатусУтвержден.Доступность  = Ложь;
		Элементы.УтверждениеДокументовСтатусОтклонен.Доступность   = Ложь;
		Элементы.УтверждениеДокументовСтатусИстория.Доступность    = Ложь;
	КонецЕсли;
	
	// Устанавливаем доступность кнопок контекстного меню по доступности соответствующих кнопок командной панели.
	Элементы.ДокументыПользователяКонтекстноеМенюСтатусСогласован.Доступность = Элементы.УтверждениеДокументовСтатусСогласован.Доступность;
	Элементы.ДокументыПользователяКонтекстноеМенюСтатусУтвержден.Доступность  = Элементы.УтверждениеДокументовСтатусУтвержден.Доступность;
	Элементы.ДокументыПользователяКонтекстноеМенюСтатусОтклонен.Доступность   = Элементы.УтверждениеДокументовСтатусОтклонен.Доступность;
	Элементы.ДокументыПользователяКонтекстноеМенюСтатусИстория.Доступность    = Элементы.УтверждениеДокументовСтатусИстория.Доступность;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьСтатусДокумента(Команда)
	
	ТекДанные = Элементы.ДокументыПользователя.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		// Проверяем, что выбран документ, а не родительская группа дерева.
		Документ = ТекДанные.Документ;
		Если ЗначениеЗаполнено(Документ) И НЕ ТипЗнч(Документ) = Тип("Строка") Тогда
			
			ПараметрыДействия = Новый Структура;
			ИзменитьСтатусДокументаНаСервере(Документ, Команда.Имя, ПараметрыДействия);
			
			// Вызываем общий обработчик результата выполнения действия
			УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусДокументаНаСервере(Документ, ИмяКоманды, ПараметрыДействия)
	
	// Вызываем процедуру изменения статуса документа.
	УтверждениеДокументовСервер.УтверждениеДокумента(Неопределено, Документ, ИмяКоманды);
	
	// Обновим отображение формы
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Документ);
	
	// Оповестим все открытые формы об изменении статуса утверждения
	УправлениеДиалогомСервер.ДобавитьОповещениеФорм("ПослеУтвержденияДокументов", Документ, ИмяФормы, ПараметрыДействия);
	
	// Произведем перерисовку динамических списков
	УправлениеДиалогомСервер.ДобавитьОповещениеДинамическихСписков(Документ, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	
	ТекДанные = Элементы.ДокументыПользователя.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		// Проверяем, что выбран документ, а не родительская группа дерева.
		Документ = ТекДанные.Документ;
		Если ЗначениеЗаполнено(Документ) И НЕ ТипЗнч(Документ) = Тип("Строка") Тогда
			
			// Открываем историю изменения статусов утверждения документ (форму списка регистра с отбором по регистратору).
			Отбор = Новый Структура("Регистратор", Документ);
			ПараметрыФормы = Новый Структура("Отбор", Отбор);
			ОткрытьФорму("РегистрСведений.СостоянияДокументов.ФормаСписка", ПараметрыФормы, ЭтотОбъект, Документ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда = Неопределено)
	
	ЗаполнитьДокументыПользователя();
	РазвернутьСвернутьДерево(ДокументыПользователя.ПолучитьЭлементы(), Ложь, "ДокументыПользователя");
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	
	РазвернутьСвернутьДерево(ДокументыПользователя.ПолучитьЭлементы(), Истина, "ДокументыПользователя");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
	
	РазвернутьСвернутьДерево(ДокументыПользователя.ПолучитьЭлементы(), Ложь, "ДокументыПользователя");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет перечень документов из регистра сведений СостоянияДокументов.
//
// Параметры:
//  НЕТ.
//
// Возвращаемое значение:
//  ТаблицаЗначений  - Таблица документов пользователя.
//
&НаСервере
Функция ПереченьДокументовПользователя()
	
	// Создаем отбор по статусам документов для отображения в форме.
	ОтображаемыеСтатусы           = Новый СписокЗначений;
	ОтображаемыеСтатусы.Добавить(Перечисления.СтатусыДокументов.Подготовлен);
	ОтображаемыеСтатусы.Добавить(Перечисления.СтатусыДокументов.Согласован);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияДокументов.Регистратор КАК Регистратор,
	|	МАКСИМУМ(СостоянияДокументов.Период) КАК Период
	|ПОМЕСТИТЬ ПоследниеЗаписиПоДокументу
	|ИЗ
	|	РегистрСведений.СостоянияДокументов КАК СостоянияДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияДокументов.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияДокументов.Регистратор КАК Регистратор,
	|	СостоянияДокументов.Период КАК Период,
	|	СостоянияДокументов.Регистратор.ХозОперация КАК ХозОперация,
	|	СостоянияДокументов.Регистратор.Дата КАК Дата,
	|	СостоянияДокументов.Регистратор.СуммаДокумента КАК СуммаДокумента,
	|	СостоянияДокументов.Регистратор.Автор КАК Автор,
	|	СостоянияДокументов.Регистратор.Организация КАК Организация,
	|	СостоянияДокументов.Регистратор.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	СостоянияДокументов.СтатусДокумента КАК СтатусУтверждения,
	|	СостоянияДокументов.СтатусДокумента.Ссылка КАК СтатусСсылка,
	|	СостоянияДокументов.СтатусДокумента.Порядок КАК СтатусПорядок
	|ПОМЕСТИТЬ ПодготовленныеДокументы
	|ИЗ
	|	РегистрСведений.СостоянияДокументов КАК СостоянияДокументов
	|ГДЕ
	|	СостоянияДокументов.СтатусДокумента В(&ОтображаемыеСтатусы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеЗаписиПоДокументу.Регистратор КАК Документ,
	|	ПодготовленныеДокументы.ХозОперация КАК ХозОперация,
	|	ПодготовленныеДокументы.Дата КАК Дата,
	|	ПодготовленныеДокументы.СуммаДокумента КАК СуммаДокумента,
	|	ПодготовленныеДокументы.Автор КАК Автор,
	|	ПодготовленныеДокументы.Организация КАК Организация,
	|	ПодготовленныеДокументы.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ПодготовленныеДокументы.СтатусУтверждения КАК СтатусУтверждения,
	|	ПодготовленныеДокументы.СтатусСсылка КАК СтатусСсылка,
	|	ПодготовленныеДокументы.СтатусПорядок КАК СтатусПорядок
	|ИЗ
	|	ПоследниеЗаписиПоДокументу КАК ПоследниеЗаписиПоДокументу
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодготовленныеДокументы КАК ПодготовленныеДокументы
	|		ПО ПоследниеЗаписиПоДокументу.Регистратор = ПодготовленныеДокументы.Регистратор
	|			И ПоследниеЗаписиПоДокументу.Период = ПодготовленныеДокументы.Период
	|ГДЕ
	|	НЕ ПодготовленныеДокументы.СтатусСсылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозОперация,
	|	Дата";
	
	Запрос.УстановитьПараметр("ОтображаемыеСтатусы", ОтображаемыеСтатусы);
	ВыгрузкаИзЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДокументовПользователя = ВыгрузкаИзЗапроса.СкопироватьКолонки();
	ТаблицаДокументовПользователя.Колонки.Добавить("ТипДокумента",     Новый ОписаниеТипов("Строка"));
	ТаблицаДокументовПользователя.Колонки.Добавить("ПолноеИмяОбъекта", Новый ОписаниеТипов("Строка"));
	
	Для каждого ТекДокумент Из ВыгрузкаИзЗапроса Цикл
		// Проверяем, используется ли документ в подсистеме утверждения.
		ПолноеИмяОбъекта = ТекДокумент.Документ.Метаданные().ПолноеИмя();
		СтруктураРезультата = УтверждениеДокументовПовтИсп.КонтролироватьУтверждениеДокумента(ПолноеИмяОбъекта); 
		
		Если СтруктураРезультата.ДокументУчаствуетВУтверждении Тогда
			НовыйДокумент = ТаблицаДокументовПользователя.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ТекДокумент);
			
			НовыйДокумент.ТипДокумента     = Строка(ТипЗнч(ТекДокумент.Документ));
			НовыйДокумент.ПолноеИмяОбъекта = ПолноеИмяОбъекта;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДокументовПользователя;
	
КонецФункции // ЗаполнитьДокументыПользователя()

// Заполняет перечень документов по пользователю из регистра сведений СостоянияДокументов.
//
// Параметры:
//  НЕТ.
//
&НаСервере
Процедура ЗаполнитьДокументыПользователя()
	
	КореньДерева = ДокументыПользователя.ПолучитьЭлементы();
	КореньДерева.Очистить();
	
	ТаблицаДокументовПользователя = ПереченьДокументовПользователя();
	
	ПереченьТиповДокументов = ТаблицаДокументовПользователя.Скопировать(, "ТипДокумента");
	ПереченьТиповДокументов.Свернуть("ТипДокумента");
	ПереченьТиповДокументов.Сортировать("ТипДокумента");
	
	Для каждого ТекТипДокумента Из ПереченьТиповДокументов Цикл
		
		НоваяСтрокаКорня = КореньДерева.Добавить();
		НоваяСтрокаКорня.Документ = ТекТипДокумента.ТипДокумента;
		
		ПодчиненныеСтроки = НоваяСтрокаКорня.ПолучитьЭлементы();
		
		ДокументыТекТипа = ТаблицаДокументовПользователя.НайтиСтроки(Новый Структура("ТипДокумента", ТекТипДокумента.ТипДокумента));
		Для каждого ТекДокумент Из ДокументыТекТипа Цикл
			
			НоваяПодчиненнаяСтрока = ПодчиненныеСтроки.Добавить();
			НоваяПодчиненнаяСтрока.Документ = ТекДокумент.Документ;
			
			ЗаполнитьЗначенияСвойств(НоваяПодчиненнаяСтрока, ТекДокумент, , "Документ");
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДокументыПользователя()

&НаКлиенте
Процедура РазвернутьСвернутьДерево(Дерево, ЭтоСвертка, ИмяДерева)
	
	// Обходим переданный набор строк дерева
	Для Каждого СтрокаДерева Из Дерево Цикл
		
		// Сворачиваем или разворачиваем в зависимости от необходимого действия
		Если ЭтоСвертка Тогда
			Элементы[ИмяДерева].Свернуть(СтрокаДерева.ПолучитьИдентификатор());
			
			// Проверяем наличие вложенных строк, если нужно - вызываем эту функцию рекурсивно
			ВложенныеСтроки = СтрокаДерева.ПолучитьЭлементы();
			Если ВложенныеСтроки.Количество() > 0 Тогда
				
				РазвернутьСвернутьДерево(ВложенныеСтроки, ЭтоСвертка, ИмяДерева);
			КонецЕсли;
		Иначе
			Элементы[ИмяДерева].Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

