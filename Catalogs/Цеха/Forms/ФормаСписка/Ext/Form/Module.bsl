///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка справочника "Цеха"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтключитьОтбор = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ОтключитьОтбор", 0);
	
	Если РаботаСФормой.МожноУстановитьОтборПоВладельцу(Параметры) Тогда
		РаботаСФормой.УстановитьОтборПоВладельцуНаДерево(Дерево, Параметры.Отбор);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
		
	ОбновлениеУсловногоОформленияСтрок();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если ВладелецФормы <> Неопределено И НЕ ОтключитьОтбор = 0 Тогда
		Если ОтключитьОтбор = 1 Тогда
			УстановитьОтборПоОсновномуЦехуСотрудника();
		ИначеЕсли ОтключитьОтбор = 2 Тогда
			УстановитьОтборПоВидуИспользованияРабочегоМеста();
		КонецЕсли;
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаСписка(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ОбновлениеУсловногоОформленияСтрок();
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СписокВыборНаСервере(Элементы.Список.ТекущиеДанные.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура СписокВыборНаСервере(ТекущийЭлемент, СтандартнаяОбработка)
	
	Если ОтключитьОтбор = 2 И ТекущийЭлемент.ВидИспользованияРабочегоМеста = Перечисления.ВидыИспользованияРабочихМест.НеУчаствуетВПланировании Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначения.СообщитьПользователю (НСтр("ru = 'У выбранного цеха установлен вид использования ""Не участвует в планировании"". Выбор этого цеха запрещен.'", "ru"));
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Группа Тогда
		Возврат;
	КонецЕсли;
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеСправочникаЦеха");
	Иначе
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыСправочникаЦеха");
	КонецЕсли;
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент.ТекущиеДанные, "ЭтоГруппа")
		И Элемент.ТекущиеДанные.ЭтоГруппа
	Тогда
		Возврат;
	КонецЕсли;
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыСправочникаЦеха");
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьСкрытьДерево(Команда)
	
	ВидимостьДерева = Не ВидимостьДерева;	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновлениеУсловногоОформленияСтрок()
	
	СправочникМенеджер = Справочники.Цеха;
	УправлениеДиалогомАльфаАвтоСервер.СформироватьУсловноеОформление(ЭтаФорма, СправочникМенеджер);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОсновномуЦехуСотрудника()
	
	ЦехТекущегоПользователя = Пользователи.ТекущийПользователь().Сотрудник.Цех;

	Если ЗначениеЗаполнено(ЦехТекущегоПользователя) Тогда
		СписокЦехов = Новый СписокЗначений;
		СписокЦехов.Добавить(ЦехТекущегоПользователя);
		СписокЦехов = ПолучитьСписокЦеховОсновногоЦехаПользователя(СписокЦехов);
		СписокЦехов = ПолучитьРодителяОсновногоЦехаПользователя(СписокЦехов, ЦехТекущегоПользователя);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект.Список, "Ссылка", СписокЦехов, ВидСравненияКомпоновкиДанных.ВСписке,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВидуИспользованияРабочегоМеста()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Цеха.Ссылка КАК Цех
		|ИЗ
		|	Справочник.Цеха КАК Цеха
		|ГДЕ
		|	Цеха.ВидИспользованияРабочегоМеста <> ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияРабочихМест.НеУчаствуетВПланировании)";
	Выборка = Запрос.Выполнить().Выбрать();
	СписокЦехов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ЦехТекущегоПользователя = Выборка.Цех;
		СписокЦехов.Добавить(ЦехТекущегоПользователя);
		СписокЦехов = ПолучитьРодителяОсновногоЦехаПользователя(СписокЦехов, ЦехТекущегоПользователя);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект.Список, "Ссылка", СписокЦехов, ВидСравненияКомпоновкиДанных.ВСписке,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЦеховОсновногоЦехаПользователя(СписокЦехов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Цеха.Ссылка КАК Цех
		|ИЗ
		|	Справочник.Цеха КАК Цеха
		|ГДЕ
		|	Цеха.Родитель В(&СписокЦехов)
		|	И НЕ Цеха.Ссылка В (&СписокЦехов)";
	
	Запрос.УстановитьПараметр("СписокЦехов", СписокЦехов);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат СписокЦехов;
	КонецЕсли;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если СписокЦехов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Цех) = Неопределено Тогда
			СписокЦехов.Добавить(ВыборкаДетальныеЗаписи.Цех);
		КонецЕсли;
	КонецЦикла;
	
	ПолучитьСписокЦеховОсновногоЦехаПользователя(СписокЦехов);
	
	Возврат СписокЦехов;
	
КонецФункции

&НаСервере
Функция ПолучитьРодителяОсновногоЦехаПользователя(СписокЦехов, ЦехТекущегоПользователя)
	
	УстановитьПривилегированныйРежим(Истина);
	ЦехТекущегоПользователя = ЦехТекущегоПользователя.Родитель;
	
	Если Не ЗначениеЗаполнено(ЦехТекущегоПользователя) Тогда
		
		Возврат СписокЦехов;
		
	КонецЕсли;
	
	СписокЦехов.Добавить(ЦехТекущегоПользователя);
	ПолучитьРодителяОсновногоЦехаПользователя(СписокЦехов, ЦехТекущегоПользователя);
	Возврат СписокЦехов;
	
КонецФункции

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)

	// Сменим родителя в основном списке
	Если Элементы.Список.Видимость Тогда
		Если Элементы.Дерево.ТекущаяСтрока=Элементы.Список.ТекущийРодитель Тогда
			// Пропустим если равны
		ИначеЕсли НЕ ЗначениеЗаполнено(Элементы.Список.ТекущийРодитель) И НЕ ЗначениеЗаполнено(Элементы.Дерево.ТекущаяСтрока) Тогда
			// Пропустим если оба пустые (могут быть Неопределено)
		Иначе
			Элементы.Список.ТекущийРодитель = Элементы.Дерево.ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти



