#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Отправляет прайс-листы.
//
// Параметры:
//  Транспорт				 - СправочникСсылка.НастройкиТранспортаИсходящихФайлов - выбранный тип транспорта;
//  Файл					 - Файл - выбранный файл для отправки;
//  УдалятьПослеОтправки	 - Булево - Необязательное. Истина, если требуется удалить отправленный файл;
//
// Возвращаемое значение:
//  Структура	 - структура, содержащая информацию об ошибке выполнения
//  Неопределено - в случае удачного завершения операции.
//
Функция Отправить(Транспорт, Знач Файл, Знач УдалятьПослеОтправки=Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Транспорт) Тогда
		
		Возврат РассылкаПрайсЛистов.НоваяОшибка("НеЗаполненТранспорт");
		
	КонецЕсли;
	
	Если НЕ Файл.Существует() Тогда
		
		Возврат РассылкаПрайсЛистов.НоваяОшибка("ФайлНеСуществует");
		
	КонецЕсли;
	
	ДанныеТранспорта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Транспорт, "Вид,АрхивироватьПередОтправкой");
	
	Если ДанныеТранспорта.АрхивироватьПередОтправкой Тогда
		
		Файл = ДобавитьВАрхив(Файл, УдалятьПослеОтправки);
		УдалятьПослеОтправки = Истина;
		
	КонецЕсли;
	
	Если ДанныеТранспорта.Вид = ПредопределенноеЗначение("Перечисление.ВидыТранспортаФайлов.Каталог") Тогда
		
		Возврат ОтправитьВКаталог(Транспорт, Файл, УдалятьПослеОтправки);
		
	ИначеЕсли ДанныеТранспорта.Вид = ПредопределенноеЗначение("Перечисление.ВидыТранспортаФайлов.FTP") Тогда
		
		Возврат ОтправитьПоFTP(Транспорт, Файл, УдалятьПослеОтправки);
		
	КонецЕсли;
	
	Возврат ОтправитьПоПочте(Транспорт, Файл, УдалятьПослеОтправки);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	Если Объект.Вид = ПредопределенноеЗначение("Перечисление.ВидыТранспортаФайлов.EMail") Тогда
		
		ОбязательныеРеквизиты.Добавить("Адреса");
		ОбязательныеРеквизиты.Добавить("Отправитель");
		
	ИначеЕсли Объект.Вид = ПредопределенноеЗначение("Перечисление.ВидыТранспортаФайлов.FTP") Тогда
		
		ОбязательныеРеквизиты.Добавить("URLСервера");
		
	ИначеЕсли Объект.Вид = ПредопределенноеЗначение("Перечисление.ВидыТранспортаФайлов.Каталог") Тогда
		
		ОбязательныеРеквизиты.Добавить("Каталог");
		
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьВАрхив(Файл, УдалятьПослеОтправки)
	
	ИмяАрхива = Файл.Путь + Файл.ИмяБезРасширения + ".zip";
	ЗаписьZIP = Новый ЗаписьZipФайла(ИмяАрхива,,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	ЗаписьZIP.Добавить(Файл.ПолноеИмя);
	ЗаписьZIP.Записать();
	
	Если УдалятьПослеОтправки Тогда
		
		УдалитьФайлы(Файл.ПолноеИмя);
		
	КонецЕсли;
	
	Возврат Новый Файл(ИмяАрхива);
	
КонецФункции

Функция СоздатьFTPСоединение(Объект) Экспорт
	
	ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "URLСервера,Порт,Логин,Пароль,Таймаут,SSL");
	
	ПортПоУмолчанию = 21;
	ЗащищенноеСоединение = Неопределено;
	
	Если ДанныеОбъекта.SSL Тогда
		
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
		ПортПоУмолчанию = 990;
		
	КонецЕсли;
	
	Попытка
		
		FTPСоединение = Новый FTPСоединение(
			КодироватьСтроку(ДанныеОбъекта.URLСервера, СпособКодированияСтроки.КодировкаURL),
			?(ЗначениеЗаполнено(ДанныеОбъекта.Порт), ДанныеОбъекта.Порт, ПортПоУмолчанию),
			ДанныеОбъекта.Логин,
			ДанныеОбъекта.Пароль,
			,
			,
			?(ДанныеОбъекта.Таймаут > 0, ДанныеОбъекта.Таймаут, 30),
			ЗащищенноеСоединение);
		
	Исключение
		
		Возврат РассылкаПрайсЛистов.НоваяОшибка("НеУдалосьСоздатьFTPСоединение");
		
	КонецПопытки;
	
	Возврат FTPСоединение;
	
КонецФункции

Функция ОтправитьВКаталог(Транспорт, Файл, УдалятьПослеОтправки)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Транспорт, "Том,Каталог");
	Каталог = Реквизиты.Каталог;
	
	Если ЗначениеЗаполнено(Реквизиты.Том) Тогда
		
		Каталог = РаботаСФайламиВТомахСлужебный.ПолныйПутьТома(Реквизиты.Том) + Каталог;
		
	КонецЕсли;
	
	Каталог = Новый Файл(Каталог);
	
	Если Каталог.ЭтоКаталог() И НЕ Каталог.Существует() Тогда
		
		СоздатьКаталог(Каталог.ПолноеИмя);
		
	КонецЕсли;
	
	ФайлПриемник = Каталог.ПолноеИмя + ПолучитьРазделительПутиСервера() + Файл.Имя;
	
	Если УдалятьПослеОтправки Тогда
		
		ПереместитьФайл(Файл.ПолноеИмя, ФайлПриемник);
		Возврат Неопределено;
		
	КонецЕсли;
	
	КопироватьФайл(Файл.ПолноеИмя, ФайлПриемник);
	
КонецФункции

Функция ОтправитьПоПочте(Транспорт, Файл, УдалятьПослеОтправки)
	
	ИспользоватьШаблоны = ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений");
	ДанныеТранспорта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Транспорт, "Владелец,Адреса,Отправитель,ШаблонСообщения,Копии,СкрытыеКопии");
	
	Если НЕ ЗначениеЗаполнено(ДанныеТранспорта.Отправитель) Тогда
		
		Возврат РассылкаПрайсЛистов.НоваяОшибка("НеЗаполненаУчетнаяЗапись");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеТранспорта.Адреса) Тогда
		
		Возврат РассылкаПрайсЛистов.НоваяОшибка("НеУказанаПочтаПолучателя");
		
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура();
	Вложения = Новый Соответствие();
	Вложения.Вставить(Файл.Имя, Новый ДвоичныеДанные(Файл.ПолноеИмя));
	Тема = НСтр("ru = 'Обновление прайс-листа'");
	Тело = СтрШаблон(НСтр("ru = 'Обновление прайс-листа от %1'"), Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
	
	Если ИспользоватьШаблоны И ЗначениеЗаполнено(ДанныеТранспорта.ШаблонСообщения) Тогда
		
		СформированноеСообщение = ШаблоныСообщений.СформироватьСообщение(
			ДанныеТранспорта.ШаблонСообщения, Транспорт, Новый УникальныйИдентификатор);
		Тема = СформированноеСообщение.Тема;
		Тело = СформированноеСообщение.Текст;
		
		Для Каждого Вложение Из СформированноеСообщение.Вложения Цикл
			Если ЭтоАдресВременногоХранилища(Вложение.АдресВоВременномХранилище) Тогда
				Вложения.Вставить(Вложение.Представление, ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище));
			Иначе 
				Вложения.Вставить(Вложение.Представление, Вложение.АдресВоВременномХранилище);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОтправки.Вставить("Тема", Тема);
	ПараметрыОтправки.Вставить("Тело", Тело);
	ПараметрыОтправки.Вставить("Важность", ВажностьИнтернетПочтовогоСообщения.Высокая);
	ПараметрыОтправки.Вставить("Кому", ДанныеТранспорта.Адреса);
	ПараметрыОтправки.Вставить("Вложения", Вложения);
	ПараметрыОтправки.Вставить("Копии", СокрЛП(ДанныеТранспорта.Копии));
	ПараметрыОтправки.Вставить("СлепыеКопии", СокрЛП(ДанныеТранспорта.СкрытыеКопии));
	Если Транспорт.ШаблонСообщения.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		ПараметрыОтправки.Вставить("ТипТекста", "HTML");
	КонецЕсли;
	Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(ДанныеТранспорта.Отправитель, ПараметрыОтправки);
	РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(ДанныеТранспорта.Отправитель, Письмо);

	Если УдалятьПослеОтправки Тогда
		
		УдалитьФайлы(Файл.ПолноеИмя);
		
	КонецЕсли;
	
КонецФункции

Функция ОтправитьПоFTP(Транспорт, Файл, УдалятьПослеОтправки)
	
	Соединение = СоздатьFTPСоединение(Транспорт);
	
	Если РассылкаПрайсЛистов.ЭтоОшибка(Соединение) Тогда
		
		Возврат Соединение;
		
	КонецЕсли;
	
	Попытка
		
		Соединение.Записать(Файл.ПолноеИмя, Файл.Имя);
		
	Исключение
		
		Возврат РассылкаПрайсЛистов.НоваяОшибка("НеУдалосьЗаписатьФайлПоFTP");
		
	КонецПопытки;
	
	Если УдалятьПослеОтправки Тогда
		
		УдалитьФайлы(Файл.ПолноеИмя);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли