// Модуль объекта справочника "Организации"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоКода(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоКода()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособЗачетаАвансов) Тогда
		СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - СправочникОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим идентификационные реквизиты
	ИНН                    = Неопределено;
	ДатаРегистрации        = Неопределено;
	КодПоКОПФ              = Неопределено;
	КодПоОКПО              = Неопределено;
	Префикс                = Неопределено;
	ОсновнойБанковскийСчет = Неопределено;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи объекта.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность КПП
	ТекстСообщения = "";
	Если НЕ ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
		РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстСообщения);
	КонецЕсли;
	
	Если ФормаСобственности <> Перечисления.ФормыСобственности.ПрочаяФормаСобственности Тогда
		
		// Проверим корректность ИНН, Код по ОКПО, ОГРН
		ТекстОшибки = "";
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
			ИНН,
			ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо,
			ТекстОшибки
		);
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + ТекстОшибки;
		
		// Проверим корректность кода по ОКПО
		Если ЗначениеЗаполнено(КодПоОКПО) Тогда
			
			РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(
				КодПоОКПО,
				ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо,
				ТекстОшибки
			);
			
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + ТекстОшибки;
		
		// Проверим корректность ОГРН
		РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(
			ОГРН,
			ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо,
			ТекстОшибки
		);
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + ТекстОшибки;
		
		Если ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			ТекстСообщения= СтрЗаменить(ТекстСообщения,"физического","частного");
		КонецЕсли;
		
		Если ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения,НСтр("ru = 'физического лица'"),НСтр("ru = 'индивидуального предпринимателя'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередЗаписью(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередЗаписью(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	РедактированиеИстории.ПередЗаписью(ЭтотОбъект);
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("КонтрагентИнтеркампаниДоЗаписи", Ссылка.КонтрагентИнтеркампани);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриЗаписи(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРеквизитНашеПредприятиеДляКонтрагентаИнтеркампани(Отказ);
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьРеквизитНашеПредприятиеДляКонтрагентаИнтеркампани(Отказ)
		
	Если КонтрагентИнтеркампани = ДополнительныеСвойства.КонтрагентИнтеркампаниДоЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРеквизитНашеПредприятиеДляКонтрагента(ДополнительныеСвойства.КонтрагентИнтеркампаниДоЗаписи, Отказ);
	ИзменитьРеквизитНашеПредприятиеДляКонтрагента(КонтрагентИнтеркампани, Отказ);
	
КонецПроцедуры

Процедура ИзменитьРеквизитНашеПредприятиеДляКонтрагента(КонтрагентСсылка, Отказ)
	
	Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		Возврат;
	КонецЕсли;
		
	КонтрагентНашеПредприятие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентСсылка, "НашеПредприятие");
	КонтрагентНашеПредприятиеПоДаннымОрганизаций = КонтрагентНашеПредприятиеПоДаннымОрганизаций(КонтрагентСсылка);
	
	Если КонтрагентНашеПредприятие = КонтрагентНашеПредприятиеПоДаннымОрганизаций Тогда		
		Возврат;		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
		
	КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
	КонтрагентОбъект.НашеПредприятие = КонтрагентНашеПредприятиеПоДаннымОрганизаций;
	Попытка
		КонтрагентОбъект.Записать();	
	Исключение
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Для контрагента интеркампани <%1> не удалось изменить признак <Наше предприятие>, по причине:
																   |%2'"),
			КонтрагентОбъект,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		));	
	КонецПопытки;
	
КонецПроцедуры	

Функция КонтрагентНашеПредприятиеПоДаннымОрганизаций(КонтрагентСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.КонтрагентИнтеркампани = &КонтрагентИнтеркампани";
	
	Запрос.УстановитьПараметр("КонтрагентИнтеркампани", КонтрагентСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка.Следующий();		
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
