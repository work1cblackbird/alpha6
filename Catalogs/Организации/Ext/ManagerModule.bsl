// Модуль менеджера справочника "Организации"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ЭДО

Функция	ДанныеЮрФизЛицаДляЭДО(Организация) Экспорт
	
	Результат = ЭлектронноеВзаимодействиеАльфаАвто.НовыеСведенияОЮрФизЛице();
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Вставить("ПолноеНаименование", Организация.НаименованиеПолное);
	Результат.Вставить("Наименование", Организация.Наименование);
	Результат.Вставить("ОфициальноеНаименование", Организация.НаименованиеПолное);
	Результат.Вставить("ЮрФизЛицо", Организация.ФормаСобственности);
	Результат.Вставить("ИНН", СтрЗаменить(Организация.Инн, " ", ""));
	Результат.Вставить("СтранаРегистрации", Справочники.СтраныМира.Россия);
	
	Если Результат.ЮрФизЛицо = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		
		Результат.Вставить("КПП", Организация.КПП);
		Результат.Вставить("КодОКВЭД", Организация.КодПоОКВЭД);
		Результат.Вставить("КодПоОКПО", Организация.КодПоОКПО);
		Результат.Вставить("ОГРН", Организация.ОГРН);
		
	ИначеЕсли Результат.ЮрФизЛицо = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
		Результат.Вставить("КПП", " ");
		Результат.Вставить("КодОКВЭД", Организация.КодПоОКВЭД);
		Результат.Вставить("КодПоОКПО", Организация.КодПоОКПО);
		Результат.Вставить("ОГРН", Организация.ОГРН); 
		
		Свидетельство = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(Организация,
							Перечисления.ВидыДокументов.Свидетельство);
							
		Результат.Вставить("СвидетельствоСерияНомер", Свидетельство.Серия + "№ " + Свидетельство.Номер);
		Результат.Вставить("СвидетельствоДатаВыдачи", Свидетельство.ДатаВыдачи);

	Иначе 	
		Результат.Вставить("КПП", "");
		Результат.Вставить("КодОКВЭД", "");
		Результат.Вставить("КодПоОКПО", "");
		Результат.Вставить("ОГРН", " ");
			
	КонецЕсли;
	
	Телефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
		Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса());
	Результат.Вставить("Телефоны", Телефоны);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Результат,
		ЭлектронноеВзаимодействиеАльфаАвто.СведенияОБанковскомСчете(Организация),
		Истина
	);
	
	ФормыСобственностиСФИО = Новый Массив();
	ФормыСобственностиСФИО.Добавить(Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	ФормыСобственностиСФИО.Добавить(Перечисления.ФормыСобственности.ЧастноеЛицо);
	
	Если ФормыСобственностиСФИО.Найти(Результат.ЮрФизЛицо) <> Неопределено Тогда
	
		Результат.Вставить("Фамилия", Организация.Фамилия);
		Результат.Вставить("Имя", Организация.Имя);
		Результат.Вставить("Отчество", Организация.Отчество);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КонтактнаяИнформацияДляЭДО(Организация, ТипКИ, ТипАдреса, ДатаКИ) Экспорт
	
	Если ТипКИ = "Адрес" Тогда
		
		ВидыКИ = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресОрганизации"];
		
	ИначеЕсли ТипКИ = "Телефон" Тогда
		
		ВидыКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		
	ИначеЕсли ТипКИ = "АдресЭП" Тогда
		
		ВидыКИ = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
				
	Иначе
		
		ВидыКИ = Неопределено;
		
	КонецЕсли;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация),
		,
		ВидыКИ,
		ДатаКИ
	);
	
	Результат = Новый Структура;
	
	Для Каждого Колонка Из КонтактнаяИнформация.Колонки Цикл
		
		Результат.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, КонтактнаяИнформация[0]);
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает организацию основную для текущего пользователя системы
//
// Возвращаемое значение:
//   Ссылка   - 
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Возврат ПараметрыСеанса.Организация;
	
КонецФункции // ОрганизацияПоУмолчанию()

// функция устанавливает актуальное значение КПП
Процедура УстановитьАктуальноеЗначениеИсторииКПП(КПП, ИсторияКПП) Экспорт
	
	КоличествоЗаписей = ИсторияКПП.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияКПП.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияКПП[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.КПП = КПП;
		
	КонецЕсли;
	
КонецПроцедуры

// функция устанавливает актуальное значение наименования
Процедура УстановитьАктуальноеЗначениеИсторииНаименований(НаименованиеПолное, ИсторияНаименований) Экспорт
	
	КоличествоЗаписей = ИсторияНаименований.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияНаименований.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияНаименований[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.НаименованиеПолное = НаименованиеПолное;
		
	КонецЕсли;
	
КонецПроцедуры

// функция получает актуальный КПП на дату
Функция КППНаДату(Организация, ДатаСведений) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ИсторияКППОрганизаций.Период) КАК Период,
	|	ИсторияКППОрганизаций.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗначенияКПП
	|ИЗ
	|	Справочник.Организации.ИсторияКПП КАК ИсторияКППОрганизаций
	|ГДЕ
	|	ИсторияКППОрганизаций.Ссылка = &Организация
	|	И ИсторияКППОрганизаций.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияКППОрганизаций.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсторияКППОрганизаций.КПП КАК КПП
	|ИЗ
	|	ЗначенияКПП КАК ЗначенияКПП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации.ИсторияКПП КАК ИсторияКППОрганизаций
	|		ПО ЗначенияКПП.Ссылка = ИсторияКППОрганизаций.Ссылка
	|			И ЗначенияКПП.Период = ИсторияКППОрганизаций.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КПП;
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
	КонецЕсли;
КонецФункции

// функция получает актуальные наименования на дату
Функция НаименованияНаДату(Организация, ДатаСведений) Экспорт
	
	НаименованияОрганизации = Новый Структура("СокращенноеНаименование, НаименованиеПолное, НаименованиеДляПечатныхФорм", "", "", "");
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат НаименованияОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаСведений) Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ИсторияНаименованийОрганизаций.Период) КАК Период,
		|	ИсторияНаименованийОрганизаций.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗначенияНаименований
		|ИЗ
		|	Справочник.Организации.ИсторияНаименований КАК ИсторияНаименованийОрганизаций
		|ГДЕ
		|	ИсторияНаименованийОрганизаций.Ссылка = &Организация
		|	И ИсторияНаименованийОрганизаций.Период <= &ДатаСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияНаименованийОрганизаций.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияНаименованийОрганизаций.Ссылка.Наименование КАК Наименование,
		|	ИсторияНаименованийОрганизаций.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	ЗначенияНаименований КАК ЗначенияНаименований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации.ИсторияНаименований КАК ИсторияНаименованийОрганизаций
		|		ПО ЗначенияНаименований.Ссылка = ИсторияНаименованийОрганизаций.Ссылка
		|			И ЗначенияНаименований.Период = ИсторияНаименованийОрганизаций.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаименованияОрганизации.СокращенноеНаименование     = Выборка.Наименование;
			НаименованияОрганизации.НаименованиеПолное          = Выборка.НаименованиеПолное;
			НаименованияОрганизации.НаименованиеДляПечатныхФорм = Выборка.НаименованиеПолное;
			Возврат НаименованияОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, НаименованиеПолное");
	НаименованияОрганизации.СокращенноеНаименование     = ЗначенияРеквизитов.Наименование;
	НаименованияОрганизации.НаименованиеПолное          = ЗначенияРеквизитов.НаименованиеПолное;
	НаименованияОрганизации.НаименованиеДляПечатныхФорм = ЗначенияРеквизитов.НаименованиеПолное;
	Возврат НаименованияОрганизации;
	
КонецФункции

// функция получает факсимиле подписи и печать организации
Функция ПодписиИПечатиОрганизации(Документ, ОтветственныеЛица) Экспорт
	
	Результат = Новый Соответствие;
	
	ЧтениеОрганизацииРазрешено = ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Организация, "Ссылка", Истина));
	Если Не ЧтениеОрганизацииРазрешено Тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ФаксимилеПечати = УправлениеПечатьюПлатформа.ПолучитьФаксимилеПечати(Документ.Организация);
	Если ЗначениеЗаполнено(ФаксимилеПечати) Тогда
		Результат.Вставить("ПечатьОрганизации", 			Новый Картинка(ФаксимилеПечати));
		Результат.Вставить("ПечатьОрганизацииЗаПостащика", 	Новый Картинка(ФаксимилеПечати));	
	КонецЕсли;
	
	МассивЛиц = СтрРазделить(ОтветственныеЛица, ",");

	Для Каждого ОтветственноеЛицо Из МассивЛиц Цикл
		
		ПодписьОтветственного = Неопределено;
		
		Если ОтветственноеЛицо = "ИП" Тогда
			ДанныеОтветственного 	= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель");
			ПодписьОтветственного 	= УправлениеПечатьюПлатформа.ПолучитьФаксимилеПодписи(ДанныеОтветственного["Руководитель"]); 
		Иначе
			ДанныеОтветственного 	= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, ОтветственноеЛицо, ОтветственноеЛицо);
			ПодписьОтветственного 	= УправлениеПечатьюПлатформа.ПолучитьФаксимилеПодписи(ДанныеОтветственного[ОтветственноеЛицо]);  
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ПодписьОтветственного) Тогда
			ОтветственноеЛицоКартинка = ОтветственноеЛицо;
			Результат.Вставить("Подпись" + ОтветственноеЛицоКартинка, Новый Картинка(ПодписьОтветственного));
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Запоняет реквизиты справочника по строке ИНН
Процедура ЗаполнитьРеквизитыПоИНННаСервере(Объект, ЭтотОбъект, СтрокаИНН, ТекстСправочника) Экспорт
	
	ЭтоЮридическоеЛицо = Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(СтрокаИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(СтрокаИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Справочники.Организации.ЗавершитьЗаполнениеРеквизитовПоИНННаСервере(Объект, 
		ЭтотОбъект, 
		РеквизитыКонтрагента, 
		ЭтоЮридическоеЛицо,
		ТекстСправочника);
	
КонецПроцедуры

Процедура ЗавершитьЗаполнениеРеквизитовПоИНННаСервере(Объект,
	ЭтотОбъект,
	РеквизитыОрганизации,
	ЭтоЮридическоеЛицо,
	ТекстСправочника) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыОрганизации);
	
	Если ЭтоЮридическоеЛицо И РеквизитыОрганизации.ЕГРЮЛ <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОрганизации.ЕГРЮЛ);
		
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации["ЮрАдрес" + ТекстСправочника],
			РеквизитыОрганизации.ЕГРЮЛ.ЮридическийАдрес);
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации["ФактАдрес" + ТекстСправочника],
			РеквизитыОрганизации.ЕГРЮЛ.ЮридическийАдрес);
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации["Телефон" + ТекстСправочника],
			РеквизитыОрганизации.ЕГРЮЛ.Телефон);
			
		// Код ИМНС
		Если РеквизитыОрганизации.ЕГРЮЛ.Свойство("РегистрацияВНалоговомОргане")
			И ПолучитьЗначениеПараметраСтруктуры(
				РеквизитыОрганизации.ЕГРЮЛ.РегистрацияВНалоговомОргане,
				"Код") <> Неопределено Тогда
			Объект.КодИМНС = РеквизитыОрганизации.ЕГРЮЛ.РегистрацияВНалоговомОргане.Код;
		КонецЕсли;
		// Код ОГРН
		Объект.ОГРН = РеквизитыОрганизации.ЕГРЮЛ.РегистрационныйНомер;
	Иначе
		// Код ИМНС
		Если РеквизитыОрганизации.Свойство("РегистрацияВНалоговомОргане")
			И ПолучитьЗначениеПараметраСтруктуры(
				РеквизитыОрганизации.РегистрацияВНалоговомОргане,
				"Код") <> Неопределено Тогда
			Объект.КодИМНС = РеквизитыОрганизации.РегистрацияВНалоговомОргане.Код;
		КонецЕсли;
		// Код ОГРН
		Если РеквизитыОрганизации.Свойство("РегистрационныйНомер") Тогда	
			Объект.ОГРН = РеквизитыОрганизации.РегистрационныйНомер;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект, ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	
	Если
		УправлениеКонтактнойИнформациейСлужебныйПовтИсп.
		КонтактнаяИнформацияОбъектаСодержитКолонкуДействуетС(ЭтотОбъект.Объект.Ссылка)
	Тогда
		Отбор.Вставить("ЭтоИсторическаяКонтактнаяИнформация", Ложь);
	КонецЕсли;
	
	Строки = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.Значение = УправлениеКонтактнойИнформациейЛокализация
		.КонтактнаяИнформацияИзJSONВXML(СтруктураДанных.КонтактнаяИнформация);
	ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("ФормаСобственности");
	ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	
	ФормыСобственностиСФИО = Новый Массив();
	ФормыСобственностиСФИО.Добавить(Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	ФормыСобственностиСФИО.Добавить(Перечисления.ФормыСобственности.ЧастноеЛицо);
	
	Если ФормыСобственностиСФИО.Найти(Объект.ФормаСобственности) <> Неопределено Тогда
		
		ОбязательныеРеквизиты.Добавить("Фамилия");
		ОбязательныеРеквизиты.Добавить("Имя");
		
	КонецЕсли;
	
	Если Объект.ПроверятьПревышениеЦеныПриходаНадЦенойРеализации Тогда
		
		ОбязательныеРеквизиты.Добавить("ТипыЦенДляПроверки");
		ОбязательныеРеквизиты.Добавить("ТипыЦенДляПроверки.ТипЦен");
		
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Наименование");
	УникальныеРеквизиты.Вставить("Код");
	
	УникальныеТипыЦен = Новый Массив();
	УникальныеТипыЦен.Добавить("ТипЦен");
	УникальныеРеквизиты.Вставить("ТипыЦенДляПроверки", УникальныеТипыЦен);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Наименование".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура НаименованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры // НаименованиеПриИзменении()

// Обработчик события при окончании изменения данных реквизита "НаименованиеПолное"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура НаименованиеПолноеПриИзменении(Объект, ПараметрыДействия) Экспорт
	// смотрим заполнено ли наименование
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		// получаем структура наименований
		СтруктураНаименований = РеквизитыСИсторией.ПолучитьНаименованияНаДату(Объект.Ссылка, ТекущаяДатаСеанса());
		
		// получаем наименование
		НаименованиеНаСегодня = СтруктураНаименований.НаименованиеПолное;
		
		// смотрим заполнено ли значение
		Если Объект.ИсторияНаименований.Количество() > 0 И ЗначениеЗаполнено(НаименованиеНаСегодня) Тогда
			// проверяем изменилось ли наименование
			Если НаименованиеНаСегодня <> Объект.НаименованиеПолное Тогда
				// формируем структуру отбора
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Период", НачалоДня(ТекущаяДатаСеанса()));
				
				// ищем значение на сегодня в ТЧ
				НайденныеСтроки = Объект.ИсторияНаименований.НайтиСтроки(СтруктураОтбора);
				
				// проверяем
				Если НайденныеСтроки.Количество() > 0 Тогда
					// получаем строку
					ТекСтрока = НайденныеСтроки[0];
					ТекСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
				Иначе
					// добавляем строку
					НоваяСтрока = Объект.ИсторияНаименований.Добавить();
					НоваяСтрока.Период = ТекущаяДатаСеанса();
					НоваяСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// ищем строку с пустым периодом
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Период", Дата("00010101"));
			
			// ищем значение на сегодня в ТЧ
			НайденныеСтроки = Объект.ИсторияНаименований.НайтиСтроки(СтруктураОтбора);
			
			// смотрим нашли или нет
			Если НайденныеСтроки.Количество() > 0 Тогда
				// получаем строку
				ТекСтрока = НайденныеСтроки[0];
				ТекСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
			Иначе
				// добавляем строку
				НоваяСтрока = Объект.ИсторияНаименований.Добавить();
				НоваяСтрока.Период = Дата("00010101");
				НоваяСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  //НаименованиеПолноеПриИзменении()

// Обработчик события при окончании изменения данных реквизита "КПП"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КПППриИзменении(Объект, ПараметрыДействия) Экспорт
	// смотрим заполнено ли КПП
	Если ЗначениеЗаполнено(Объект.КПП) Тогда
		// получаем последний КПП               
		КППНаСегодня = РеквизитыСИсторией.ПолучитьКППНаДату(Объект.Ссылка, ТекущаяДатаСеанса());
		
		// смотрим заполнено ли значение
		Если Объект.ИсторияКПП.Количество() > 0 И ЗначениеЗаполнено(КППНаСегодня) Тогда 
			// проверяем изменился ли КПП
			Если КППНаСегодня <> Объект.КПП Тогда
				// формируем структуру отбора
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Период", НачалоДня(ТекущаяДатаСеанса()));
				
				// ищем значение на сегодня в ТЧ
				НайденныеСтроки = Объект.ИсторияКПП.НайтиСтроки(СтруктураОтбора);
				
				// проверяем
				Если НайденныеСтроки.Количество() > 0 Тогда
					// получаем строку
					ТекСтрока = НайденныеСтроки[0];
					ТекСтрока.КПП = Объект.КПП;
				Иначе
					// добавляем строку
					НоваяСтрока = Объект.ИсторияКПП.Добавить();
					НоваяСтрока.Период = ТекущаяДатаСеанса();
					НоваяСтрока.КПП = Объект.КПП;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// ищем строку с пустым периодом
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Период", Дата("00010101"));
			
			// ищем значение на сегодня в ТЧ
			НайденныеСтроки = Объект.ИсторияКПП.НайтиСтроки(СтруктураОтбора);
			
			// смотрим нашли или нет
			Если НайденныеСтроки.Количество() > 0 Тогда
				// получаем строку
				ТекСтрока = НайденныеСтроки[0];
				ТекСтрока.КПП = Объект.КПП;
			Иначе
				// добавляем строку
				НоваяСтрока = Объект.ИсторияКПП.Добавить();
				НоваяСтрока.Период = Дата("00010101");
				НоваяСтрока.КПП = Объект.КПП;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Печать

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнструкцияПоСозданиюФаксимильнойПечати") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ИнструкцияПоСозданиюФаксимильнойПечати",
															НСтр("ru = 'Как сделать факсимильную печать'"),
															ПолучитьОбщийМакет("ИнструкцияПоСозданиюФаксимильнойПечати"));
	КонецЕсли;
	
КонецПроцедуры // Печать()

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника Организации.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОсновнаяОрганизация";
	Элемент.Наименование = НСтр("ru = 'Переименуйте этот элемент на вашу организацию'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.НаименованиеПолное = Элемент.Наименование;
	Элемент.Код = "000000001";
	Элемент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
        
КонецПроцедуры

// Заполняет значение нового реквизита СпособЗачетаАвансов у переданного элемента справочника.
//
Процедура ЗаполнитьРеквизитСпособЗачетаАвансов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Ссылка,
	               |	Организации.УдалитьАвтоЗакрытиеСделок КАК УдалитьАвтоЗакрытиеСделок
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Организация = Выборка.Ссылка.ПолучитьОбъект();
		
		Организация.Заблокировать();
		
		Если Выборка.УдалитьАвтоЗакрытиеСделок Тогда
			Организация.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Иначе
			Организация.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		КонецЕсли;
		
		Организация.ОбменДанными.Загрузка = Истина;
		
		Попытка
			Организация.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось заполнить способ зачета авансов в %1'"),
					СокрЛП(Строка(Организация.Ссылка))
					)
				);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Ссылка)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли