///////////////////////////////////////////////////////////////////////////////
// Модуль формы элемента справочника "Организации"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ФормаСобственности = Неопределено;
	Если Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		ФормаСобственности = Перечисления.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо;
	ИначеЕсли Объект.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
		ФормаСобственности = Перечисления.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель;
	КонецЕсли;
		
	Если ФормаСобственности <> Неопределено Тогда 
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Объект,
			Объект.Ссылка,
			ФормаСобственности,
			ПараметрыПроцедуры
		);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();	
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	
    УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Заполним ИНН организации
	СозданиеКарточкиИзДосьеКонтрагента = ПолучитьЗначениеПараметраСтруктуры(Параметры, "РаботаСКонтрагентамиСозданиеИзДосьеКонтрагента", ЛОЖЬ);
	ТекстЗаполнения   				   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТекстЗаполнения", "");
	
	Если СозданиеКарточкиИзДосьеКонтрагента 
		И ЗначениеЗаполнено(ТекстЗаполнения) Тогда 
		
		Если СтрДлина(ТекстЗаполнения) = 10 Тогда
			Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
		Иначе
			Объект.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
		КонецЕсли;
		
		Справочники.Организации.ЗаполнитьРеквизитыПоИНННаСервере(Объект, 
			ЭтотОбъект, 
			ТекстЗаполнения, 
			"Организации");
		
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьУчетныеПолитики();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НастроитьУчетнуюПолитику",
		"Доступность",
		ПравоДоступа("Просмотр", Метаданные.Обработки.НастройкаПараметровУчета));
	ПолучитьФормыСобственностиОрганизации(Элементы.ФормаСобственности.СписокВыбора);
	
	ЕстьПравоНаРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.Организации);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НазначитьЛоготип",
		"Доступность",
		ЕстьПравоНаРедактирование);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОчиститьЛоготип",
		"Доступность",
		ЕстьПравоНаРедактирование);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НазначитьПечать",
		"Доступность",
		ЕстьПравоНаРедактирование);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОчиститьПечать",
		"Доступность",
		ЕстьПравоНаРедактирование);
		
	// ПростаяЭлектроннаяПодпись
	ПараметрыНастройкиФормы = УчастникиПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаЭлемента();
	ПараметрыНастройкиФормы.ПустаяСсылка = Справочники.Организации.ПустаяСсылка();
	УчастникиПЭП.ПриСозданииНаСервере_ФормаЭлемента(ЭтотОбъект, ПараметрыНастройкиФормы);
	// Конец ПростаяЭлектроннаяПодпись
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СчитываниеЗначенийРегистраСведенияКомпании();
		
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ВидКонтрагента = ВидКонтрагентаСПАРКРиски();
	
	Если ВидКонтрагента <> Неопределено Тогда
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
		
	КонецЕсли;
	
	// Произведем настройку параметров отображения кнопок командной панели списка
	// Расчетные счета и Подтверждающие документы.
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыДинамическогоСписка(ЭтотОбъект, "РасчетныеСчета");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыДинамическогоСписка(ЭтотОбъект, "ПодтверждающиеДокументы");
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если ИмяСобытия = "ОбновитьУчетнуюПолитику" Тогда
		
		ЗаполнитьУчетныеПолитики();
		Возврат;
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "УстановкаОсновногоСчета" И Параметр.Владелец = Объект.Ссылка Тогда
		
		Объект.ОсновнойБанковскийСчет = Параметр.НовыйОсновнойСчет;
		
		Если НЕ Модифицированность Тогда
			Записать(Новый Структура("УстановкаОсновногоСчета"));
		КонецЕсли;
		
		УИН = "";
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
			УИН = Источник.УникальныйИдентификатор;
		КонецЕсли;
		
		Оповестить("УстановкаОсновногоСчетаВыполнена", УИН);
		
		Возврат;
		
	КонецЕсли;
	
	// АльфаАвто.РаботаСФайлами
	РаботаСФайламиАльфаАвтоКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ТекущаяКартинка = Объект.ФайлКартинки;
	
	РаботаСФайламиАльфаАвтоВызовСервера.ВывестиТекущееИзображение(ЭтотОбъект);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	СчитываниеЗначенийРегистраСведенияКомпании();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Организации");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если ЭтоОрганизацияИП(Объект) Тогда
		
		Объект.КПП = "";
		
	КонецЕсли;
	
	// Не во всех механизмах библиотек БСП, ИПП и БЭД есть обрезание незначимых символов с концов,
	// что может приводить к проблемам в поиске по ИНН и КПП
	ТекущийОбъект.ИНН = СокрЛП(Объект.ИНН);
	ТекущийОбъект.КПП = СокрЛП(Объект.КПП);
	
	Если ЭтотОбъект.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная И 
		ЭтотОбъект.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ПустаяСсылка() Тогда 
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Выбрана система налогообложения ""Упрощенная"", необходимо заполнить значение учетной политики ""Объект налогообложения при УСН""'"),
			)
		);
		Отказ = Истина;
		
	КонецЕсли; 
	
	Если ЭтотОбъект.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная И 
		ЭтотОбъект.ОбъектНалогообложения = Перечисления.НалогообложениеНДСПриУСН.ПустаяСсылка() И ТекущаяДатаСеанса()>= Дата(2025,1,1) Тогда 
		
		ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Выбрана система налогообложения ""Упрощенная"", необходимо заполнить значение учетной политики ""Налогообложение НДС при УСН""'"),
				)
		);

		Отказ = Истина;
		
	КонецЕсли;

	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Записываем значения группы Ответственные лица в регистр сведений
	РегистрыСведений.СведенияКомпании.ЗаписьЗначенияРегистраСведенияКомпании(
		ТекущийОбъект.Ссылка, Перечисления.ВидыОбъектовСведений.Руководитель, Руководитель);
	РегистрыСведений.СведенияКомпании.ЗаписьЗначенияРегистраСведенияКомпании(
		ТекущийОбъект.Ссылка, Перечисления.ВидыОбъектовСведений.ГлавныйБухгалтер, ГлавныйБухгалтер);
	РегистрыСведений.СведенияКомпании.ЗаписьЗначенияРегистраСведенияКомпании(
		ТекущийОбъект.Ссылка, Перечисления.ВидыОбъектовСведений.Кассир, Кассир);
	РегистрыСведений.СведенияКомпании.ЗаписьЗначенияРегистраСведенияКомпании(
		ТекущийОбъект.Ссылка, Перечисления.ВидыОбъектовСведений.МОЛ, МОЛ);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДобавитьРуководителя();

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПараметрыЗаписи.Свойство("УстановкаОсновногоСчета") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Основной счет установлен.'"));
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УстановитьОсновнойСчет(Команда)
	
	ТекСтрока = Элементы.РасчетныеСчета.ТекущаяСтрока;
	Если  ТекСтрока = Неопределено Тогда
		Возврат;
	Иначе
		УстановитьОсновнойСчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнойСчетНаСервере()
	
	ТекСтрока = Элементы.РасчетныеСчета.ТекущаяСтрока;
	Объект.ОсновнойБанковскийСчет = ТекСтрока;
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Справочники.Организации.НаименованиеПриИзменении(Объект, ПараметрыДействия);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПолноеПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	//Справочники.Организации.НаименованиеПолноеПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	НаименованиеПолноеПриИзмененииНаСервере();
	СохранитьПереименованиеВИстории(Объект);
	
КонецПроцедуры 

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Объект.НаименованиеПолное = Объект.Наименование;
	СохранитьПереименованиеВИстории(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаСобственностиПриИзменении(Кнопка)
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	ОбновитьВидимостьФИО();
	УстановитьВидимостьКПП();
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСотрудника("Руководитель", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСотрудника("ГлавныйБухгалтер", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КассирОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСотрудника("Кассир", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МОЛОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСотрудника("МОЛ", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьФлагВыбораИзСписка(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьФлагВыбораИзСписка(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КассирНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьФлагВыбораИзСписка(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МОЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьФлагВыбораИзСписка(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияКППНажатие(Элемент)
	
	РедактированиеИсторииКлиент.ОткрытьИсториюКПП(ЭтотОбъект, Объект.ИсторияКПП, Объект.КПП, Элементы.КПП.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНаименованиеПолноеНажатие(Элемент)
	
	РедактированиеИсторииКлиент.ОткрытьИсториюПолныхНаименований(
		ЭтотОбъект,
		Объект.ИсторияНаименований,
		Объект.НаименованиеПолное,
		Элементы.НаименованиеПолное.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	// вызываем обработчик
	КПППриИзмененииНаСервере();
	СохранитьКППВИстории(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КПППриИзмененииНаСервере()
	
	// вызываем обработчик из менеджера
	//Справочники.Организации.КПППриИзменении(Объект, Неопределено);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	РаботаСФайламиАльфаАвтоКлиент.АдресКартинкиНажатие(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПревышенияЦеныПриходаНадЦенойРеализацииПриИзменении(Элемент)
	Элементы.ТипыЦенДляПроверки.Доступность = Объект.ПроверятьПревышениеЦеныПриходаНадЦенойРеализации;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ПростаяЭлектроннаяПодпись

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПЭП(Команда)
	
	УчастникиПЭПКлиент.ОтправитьИлиОбновитьУчастника(ЭтотОбъект, Команда);
	
КонецПроцедуры

// Конец ПростаяЭлектроннаяПодпись

&НаКлиенте
Процедура НастроитьУчетнуюПолитику(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НастроитьУчетнуюПолитику");
	ПараметрыОткрытия.Вставить("ОбъектНастройки", Объект.Ссылка);
	
	ОткрытьФорму(
		"Обработка.НастройкаПараметровУчета.Форма.НастройкаУчетнойПолитики",
		ПараметрыОткрытия,
		ЭтотОбъект,
		, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗначенияИндексовКонтрагента(Команда)
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ДобавитьИзображение(ЭтотОбъект, Объект, Команда);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзображениеНаСервере()
	
	РаботаСФайламиАльфаАвтоВызовСервера.УдалитьИзображение(ЭтотОбъект);
	ПолучитьСледующееИзображение("Вперед");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	Если ТекущаяКартинка = Объект.ПечатьОрганизации Тогда
		ВывестиСообщение(НСтр("ru = 'Картинка установлена как печать организации. Прежде чем удалить ее необходимо снять признак ""Печать"".'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ФайлКартинки = ТекущаяКартинка Тогда
		ВывестиСообщение(НСтр("ru = 'Картинка установлена как логотип организации. Прежде чем удалить ее необходимо снять признак ""Логотип"".'"));
		Возврат;
	КонецЕсли;
	
	УдалитьИзображениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ПросмотретьИзображение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображения(Команда)
	
	ДвижениеПросмотра = ?(СтрНайти(Команда.Имя, "Вперед"), "Вперед", "Назад");
	ПолучитьСледующееИзображение(ДвижениеПросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнструкциюПоСозданиюФаксимильнойПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Справочник.Организации",
		"ИнструкцияПоСозданиюФаксимильнойПечати",
		Объект.Ссылка,
		Неопределено,
		Новый Структура
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФаксимилеГлавногоБухгалтера(Команда)
	
	ДобавитьФаксимилеСотрудника(ГлавныйБухгалтер);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФаксимилеДиректора(Команда)
	
	ДобавитьФаксимилеСотрудника(Руководитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛоготип(Команда)
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		ТекущаяКартинка = Объект.ФайлКартинки;
	КонецЕсли;
	
	ПоказатьЛоготипПечатьНаСервере();
	Элементы.КоманднаяПанельКартинкиЛоготип.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЛоготип(Команда)
	
	Если НЕ РаботаСФайламиАльфаАвтоКлиент.ФайлЯвляетсяДопустимойКартинкой(ТекущаяКартинка) Тогда
		
		Возврат;
		
	КонецЕсли;

	Объект.ФайлКартинки = ТекущаяКартинка;
	Модифицированность = Истина;
	УправлениеДиалогомНаСервере();
	Элементы.КоманднаяПанельКартинкиЛоготип.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПечать(Команда)
	
	Если ЗначениеЗаполнено(Объект.ПечатьОрганизации) Тогда
		ТекущаяКартинка = Объект.ПечатьОрганизации;
	КонецЕсли;
	
	ПоказатьЛоготипПечатьНаСервере();
	Элементы.КоманднаяПанельКартинкиПечать.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПечать(Команда)
	
	Если НЕ РаботаСФайламиАльфаАвтоКлиент.ФайлЯвляетсяДопустимойКартинкой(ТекущаяКартинка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ПечатьОрганизации = ТекущаяКартинка;
	Модифицированность = Истина;
	УправлениеДиалогомНаСервере();
	Элементы.КоманднаяПанельКартинкиПечать.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПечать(Команда)
	
	Объект.ПечатьОрганизации = Неопределено;
	УправлениеДиалогомНаСервере();
	Элементы.КоманднаяПанельКартинкиПечать.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЛоготип(Команда)
	
	Объект.ФайлКартинки = Неопределено;
	УправлениеДиалогомНаСервере();
	Элементы.КоманднаяПанельКартинкиПечать.Скрыть();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при выполнении команды "Заполнить по ИНН".
//
// Параметры:
//   Команда   (КомандаФормы)     Команда, которая была вызвана.
//
&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.ИНН, Истина);
	
КонецПроцедуры //ЗаполнитьПоИНН()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИнтернетПоддержкаПользователей.СПАРКРиски

&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	
	ОбновитьОтображениеИндексыСПАРК();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	// АльфаАвто
	ВидКонтрагента = ВидКонтрагентаСПАРКРиски();
	
	Если ВидКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Конец АльфаАвто
	
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ИндексыСПАРКРиски,
		Объект,
		Объект.ИНН, // Искать по ИНН
		ВидКонтрагента,
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
        УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// Начало РедактированиеИстории

// Обновление таблиц истории реквизитов
//
// Параметры:
//  Значение - Неопределено, Массив - Результат редактирования таблицы истории;
//  ОписаниеПриемника - Структура - Описания реквизита и таблицы для которых редактировалась история;
//
&НаКлиенте
Процедура Подключаемый_РедактированиеИсторииЗавершение(Значение, ОписаниеПриемника) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ОписаниеПриемника.Таблица].Очистить();
	
	Если Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Значение Цикл
		ЗаполнитьЗначенияСвойств(Объект[ОписаниеПриемника.Таблица].Добавить(), Строка);
	КонецЦикла;
	
	Объект[ОписаниеПриемника.Реквизит] = Значение[Значение.ВГраница()].Значение;
	Модифицированность = Истина;
	
КонецПроцедуры

// Конец РедактированиеИстории

// +СофтФон

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
	Телефон = ЭтотОбъект[ИмяРеквизита];
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Телефон)) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ПозвонитьНаНомер","");
	Телефон = ЭтотОбъект[ИмяРеквизита];
	сфпСофтФонПроКлиент.сфпПозвонить(Телефон, Объект.Ссылка);
	
КонецПроцедуры

// -СофтФон

// Заполнить по ИНН
// Процедура, вызываемая перед началом заполнения данных по ЕГР
//
// Параметры:
//		СтрокаПоиска - ИНН или НаименованияБ для поиска
//		ЗаполнениеПоИНН - Булево - Признак необходимости заполнение по ИНН.
//
&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(СтрокаПоиска, Знач ЗаполнениеПоИНН = Неопределено)

	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	ПроверятьИНН = ЗаполнениеПоИНН <> Истина;
	
	Если ЗаполнениеПоИНН = Неопределено Тогда
		ЗаполнениеПоИНН = ЭтоИНН(СтрокаПоиска);
	КонецЕсли;
	
	Если
		(ПроверятьИНН И ЗначениеЗаполнено(Объект.ИНН))
		Или ЗначениеЗаполнено(Объект.КПП)
		Или ЗначениеЗаполнено(Объект.Наименование) 
		Или ЗначениеЗаполнено(Объект.НаименованиеПолное)
	Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ДопПараметры = Новый Структура("ЗаполнениеПоИНН,СтрокаПоиска", ЗаполнениеПоИНН, СтрокаПоиска);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение", 
			ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ЗаполнениеПоИНН Тогда
			ИННПоиска = СтрокаПоиска;
			ЗаполнитьРеквизитыПоИНННаКлиенте();
		Иначе
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Ответ     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДопПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДопПараметры.ЗаполнениеПоИНН Тогда
			ИННПоиска = ДопПараметры.СтрокаПоиска;
			ЗаполнитьРеквизитыПоИНННаКлиенте();
		Иначе 
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ДопПараметры.СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение()

// Процедура запускает проверку контрагентов по ИНН.
//
// Параметры:
//  СтрокаИНН     - Число - ИНН.
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНННаКлиенте()
	
	НачатьПоискКонтрагентаПоИНН();
	
	Если ДлительнаяОперацияПоискПоИНН.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперацияПоискПоИНН,
			Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект),
			ПараметрыОжидания
		);
	Иначе
		ПриЗавершенииЗадания(ДлительнаяОперацияПоискПоИНН);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПоискКонтрагентаПоИНН()
	
	Если ДлительнаяОперацияПоискПоИНН <> Неопределено И ДлительнаяОперацияПоискПоИНН.Статус = "Выполняется" Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперацияПоискПоИНН.ИдентификаторЗадания);
	КонецЕсли;
	
	ПоискЮридическогоЛица = (Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
		ИЛИ Объект.ФормаСобственности = Перечисления.ФормыСобственности.ПрочаяФормаСобственности И СтрДлина(ИННПоиска) = 10);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИНН", ИННПоиска);
	Если ПоискЮридическогоЛица Тогда
		ДлительнаяОперацияПоискПоИНН = ДлительныеОперации.ВыполнитьВФоне(
			"РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИННВФоне",
			ПараметрыМетода,
			ПараметрыВыполненияВФоне);
		ИмяМетодаФоновогоЗаданияПоискаПоИНН = "СведенияОЮридическомЛицеПоИНН";
	Иначе
		ДлительнаяОперацияПоискПоИНН = ДлительныеОперации.ВыполнитьВФоне(
			"РаботаСКонтрагентами.РеквизитыПредпринимателяПоИННВФоне",
			ПараметрыМетода,
			ПараметрыВыполненияВФоне);
		ИмяМетодаФоновогоЗаданияПоискаПоИНН = "РеквизитыПредпринимателяПоИНН";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЗадания(РезультатЗадания, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДлительнаяОперацияПоискПоИНН = РезультатЗадания;
	Результат = ПриЗавершенииЗаданияНаСервере();
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		ОбработатьОшибкуПоискаКонтрагента(Результат.ОписаниеОшибки);
	ИначеЕсли Результат.Повторить Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьРеквизитыПоИНННаКлиенте", 5, Истина);
	ИначеЕсли Результат.КоличествоНайденных > 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Найдено более одного контрагента. Уточните ИНН для поиска.'"));
	ИначеЕсли НЕ ПустаяСтрока(ИННПоиска) И Результат.КоличествоНайденных = 0 Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось найти данные для заполнения реквизитов по ИНН %1'"),
			Результат.ИНН));
	Иначе
		СохранитьКППВИстории(Объект);
		СохранитьПереименованиеВИстории(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриЗавершенииЗаданияНаСервере()
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки");
	Результат.Вставить("КоличествоНайденных", 0);
	Результат.Вставить("Повторить"          , Ложь);
	Результат.Вставить("ИНН");
	
	Если ТипЗнч(ДлительнаяОперацияПоискПоИНН) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ДлительнаяОперацияПоискПоИНН.Статус = "Выполнено" Тогда
		
		РезультатЗадания = ПолучитьИзВременногоХранилища(ДлительнаяОперацияПоискПоИНН.АдресРезультата);
		Если ЗначениеЗаполнено(РезультатЗадания.ОписаниеОшибки) Тогда
			
			Результат.ОписаниеОшибки = РезультатЗадания.ОписаниеОшибки;
			
		Иначе
			
			ЭтоЮридическоеЛицо = (ИмяМетодаФоновогоЗаданияПоискаПоИНН = "СведенияОЮридическомЛицеПоИНН");
			Справочники.Организации.ЗавершитьЗаполнениеРеквизитовПоИНННаСервере(Объект, 
				ЭтотОбъект, 
				РезультатЗадания, 
				ЭтоЮридическоеЛицо,
				"Организации");
			
			// Заполним данные о контактном лице
			Если ЭтоЮридическоеЛицо И РезультатЗадания.ЕГРЮЛ <> Неопределено Тогда
				
				ДобавитьКонтактноеЛицо = Ложь;
				Если ПолучитьЗначениеПараметраСтруктуры(РезультатЗадания.ЕГРЮЛ.Руководитель, "ИНН") <> Неопределено Тогда
					
					ДанныеРуководителя = РезультатЗадания.ЕГРЮЛ.Руководитель;
					ДобавитьКонтактноеЛицо = Истина;
					
				// Добавление информации о руководителе, из данных о руководителях.
				ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(РезультатЗадания.ЕГРЮЛ, "Руководители") <> Неопределено Тогда
					
					Если ЗначениеЗаполнено(РезультатЗадания.ЕГРЮЛ.Руководители) Тогда
						
						ДанныеРуководителя = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, ДатаЗаписи, Должность");
						ЗаполнитьЗначенияСвойств(ДанныеРуководителя, РезультатЗадания.ЕГРЮЛ.Руководители[0]);
						ДобавитьКонтактноеЛицо = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Объект.Ссылка)
					И ДобавитьКонтактноеЛицо
					И ЗначениеЗаполнено(ДанныеРуководителя) Тогда
				
					ДобавитьРуководителя();
					ДанныеРуководителя = Неопределено;
				
				КонецЕсли;
				
			КонецЕсли;
				
			Если НЕ (ЭтоЮридическоеЛицо
				И ПолучитьЗначениеПараметраСтруктуры(РезультатЗадания, "ЕГРЮЛ") = Неопределено) Тогда
				Результат.КоличествоНайденных = 1;
			КонецЕсли;
			Результат.ИНН = ПолучитьЗначениеПараметраСтруктуры(ИмяМетодаФоновогоЗаданияПоискаПоИНН, "ИНН", Объект.ИНН);
			
		КонецЕсли;
		
	ИначеЕсли ДлительнаяОперацияПоискПоИНН.Статус = "Ошибка" Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка при обращении к сервису.
			|Подробнее см. в журнале регистрации.'");
		РаботаСКонтрагентами.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при поиске контрагентов по наименованию. %1'"),
				ДлительнаяОперацияПоискПоИНН.ПодробноеПредставлениеОшибки),
			"Контрагент");
		
	ИначеЕсли ДлительнаяОперацияПоискПоИНН.Статус = "Отменено" Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru = 'Задание отменено администратором.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОшибкуПоискаКонтрагента(ОписаниеОшибки)
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации"
			Или ОписаниеОшибки = "НеУказанПароль" Тогда
			Если ИнтернетПоддержкаПользователейВызовСервера.ДоступноПодключениеИнтернетПоддержки() Тогда
				ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
					|необходимо подключить Интернет-поддержку пользователей.
					|Подключить Интернет-поддержку?'");
				ДопПараметры = Новый Структура("СтрокаПоиска, ЗаполнениеПоИНН", Объект.ИНН, Истина);
				ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ДопПараметры);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Иначе
				ПоказатьПредупреждение(,
					НСтр("ru='Для автоматического заполнения реквизитов контрагентов
						|необходимо подключить Интернет-поддержку пользователей.
						|Обратитесь к администратору.'"));
			КонецЕсли;
		ИначеЕсли ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИдентификаторМестаВызова", "zapolnenie_rekvizitov");
			ОткрытьФорму("ОбщаяФорма.Сервис1СКонтрагентНеПодключен", ПараметрыФормы, ЭтотОбъект);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли Объект.ФормаСобственности = ПредопределенноеЗначение(
		"Перечисление.ФормыСобственности.ЮридическоеЛицо") Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов - мог измениться КПП.
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет необходимые параметры и открывает форму "Заполнение реквизитов контрагента".
//
// Параметры:
//  СтрокаНаименование     - Строка - Наименование контрагента.
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаНаименование)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", СтрокаНаименование);
	ПараметрыФормы.Вставить("НеСоздаватьКонтрагента", Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Элементы.Наименование.ТолькоПросмотр);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", 
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры //ЗаполнитьРеквизитыПоНаименованиюНаКлиенте()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Результат     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДопПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоИНН(Результат) Тогда
		
		ЗаполнитьРеквизитыРезультатомПоискаПоНаименованию(Результат);
		ТекущийЭлемент = Элементы.Наименование;
		Возврат;
		
	КонецЕсли;
	
	ИННПоиска = Результат;
	ЗаполнитьРеквизитыПоИНННаКлиенте();
	ТекущийЭлемент = Элементы.Наименование;

КонецПроцедуры //ЗаполнитьРеквизитыПоНаименованиюЗавершение()

&НаКлиенте
Процедура ЗаполнитьРеквизитыРезультатомПоискаПоНаименованию(РезультатПоиска)
	
	Объект.ИНН = РезультатПоиска.ИНН;
	Если ЗначениеЗаполнено(РезультатПоиска.НаименованиеСокращенное) Тогда
		Объект.Наименование = РезультатПоиска.НаименованиеСокращенное;
	ИначеЕсли ЗначениеЗаполнено(РезультатПоиска.Наименование) Тогда
		Объект.Наименование = РезультатПоиска.Наименование;
	КонецЕсли;
	Если РезультатПоиска.Свойство("НаименованиеПолное") И ЗначениеЗаполнено(РезультатПоиска.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = РезультатПоиска.НаименованиеПолное;
	Иначе
		Объект.НаименованиеПолное = РезультатПоиска.Наименование;
	КонецЕсли;
	Объект.КПП = РезультатПоиска.КПП;
	
	Если ЗначениеЗаполнено(РезультатПоиска.ЮридическийАдрес) ИЛИ ЗначениеЗаполнено(РезультатПоиска.Телефон) Тогда
		УстановитьПолученнуюКонтактнуюИнформацию(РезультатПоиска);
	КонецЕсли;
	
	// Заполним контактное лицо
	Если ЗначениеЗаполнено(РезультатПоиска.Руководитель) Тогда
		
		Если ПолучитьЗначениеПараметраСтруктуры(РезультатПоиска.Руководитель, "ИНН") <> Неопределено Тогда
			ДанныеРуководителя = РезультатПоиска.Руководитель;
		Иначе
			ДанныеРуководителя = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеЭлементаКонтактнойИнформации(Форма, Вид, ОписаниеКИ)
	
	СтрокиКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов
		.НайтиСтроки(Новый Структура("Вид", Вид));
		
	Если СтрокиКИ.Количество() > 0 Тогда
		
		СтрокиКИ[0].ЗначенияПолей = ОписаниеКИ.Поля;
		СтрокиКИ[0].Представление = ОписаниеКИ.Представление;
		Форма[СтрокиКИ[0].ИмяРеквизита] = ОписаниеКИ.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПолученнуюКонтактнуюИнформацию(Данные)
	
	Если ЗначениеЗаполнено(Данные.Телефон) Тогда
		
		ТелефонXDTO = УправлениеКонтактнойИнформациейЛокализация
			.КонтактнаяИнформацияXDTOПоПредставлению(Данные.Телефон, Перечисления.ТипыКонтактнойИнформации.Телефон);
		
		ТелефонXML = УправлениеКонтактнойИнформациейЛокализация
			.КонтактнаяИнформацияXDTOВXML(ТелефонXDTO);
		
		УстановитьЗначениеЭлементаКонтактнойИнформации(
			ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
			Новый Структура("Представление,Поля", ТелефонXDTO.Представление, ТелефонXML));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ЮридическийАдрес) Тогда
		
		АдресXDTO = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOПоПредставлению(
			Данные.ЮридическийАдрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		АдресXML = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOВXML(АдресXDTO);
		
		УстановитьЗначениеЭлементаКонтактнойИнформации(
			ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			Новый Структура("Представление,Поля", АдресXDTO.Представление, АдресXML));
		
		УстановитьЗначениеЭлементаКонтактнойИнформации(
			ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
			Новый Структура("Представление,Поля", АдресXDTO.Представление, АдресXML));
		
	КонецЕсли;
	
КонецПроцедуры //УстановитьПолученнуюКонтактнуюИнформацию()

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры //ПодключитьИнтернетПоддержку()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Результат     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДопПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ДопПараметры.СтрокаПоиска, ДопПараметры.ЗаполнениеПоИНН);
	КонецЕсли;

КонецПроцедуры //ПодключитьИнтернетПоддержкуЗавершение()


&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	
	Возврат ЗначениеЗаполнено(СтрокаИНН)
		И ТипЗнч(СтрокаИНН) = Тип("Строка")
		И (СтрДлина(СтрокаИНН) = 10 ИЛИ СтрДлина(СтрокаИНН) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаИНН);
		
КонецФункции //ЭтоИНН()

&НаСервереБезКонтекста
Функция СоздатьКонтактноеЛицо(Ссылка, ДанныеРуководителя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН";
	Запрос.УстановитьПараметр("ИНН", ДанныеРуководителя.ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НоваяЗапись                    = Справочники.Контрагенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеРуководителя);
	НоваяЗапись.Наименование       = ДанныеРуководителя.Представление;
	НоваяЗапись.НаименованиеПолное = ДанныеРуководителя.Представление;
	НоваяЗапись.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
	НоваяЗапись.ВидКонтрагента     = Перечисления.ВидыКонтрагентов.КонтактноеЛицо;
	
	// Ищем должность в справочнике. если не нашли, то создаем.
	
	ДолжностьРуководителя = СокрЛП(ДанныеРуководителя.Должность);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Должности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Должности КАК Должности
	|ГДЕ
	|	Должности.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ДолжностьРуководителя);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Должность = СоздатьДолжность(ДолжностьРуководителя);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Должность = Выборка.Ссылка;
	КонецЕсли;
	НоваяЗапись.Должность = Должность;
	
	// Запишем контактное лицо
	Попытка
		НоваяЗапись.Записать();
		КонтактноеЛицо = НоваяЗапись.Ссылка;
	Исключение
		КонтактноеЛицо = Справочники.Контрагенты.ПустаяСсылка();
	КонецПопытки;
	
	ДанныеРуководителя = Неопределено;
	
	Возврат КонтактноеЛицо;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДолжность(НаименованиеДолжности)
	
	Должность = Справочники.Должности.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(НаименованиеДолжности)
		ИЛИ ТипЗнч(НаименованиеДолжности) <> Тип("Строка") Тогда
		
		Возврат Должность;
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Должности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Должности КАК Должности
		|ГДЕ
		|	Должности.Наименование = &НаименованиеДолжности
		|	И Должности.ПометкаУдаления = ЛОЖЬ
		|	И Должности.ЭтоГруппа = ЛОЖЬ";
	Запрос.УстановитьПараметр("НаименованиеДолжности", НаименованиеДолжности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	НоваяЗапись              = Справочники.Должности.СоздатьЭлемент();
	НоваяЗапись.Наименование = НаименованиеДолжности;
	
	// Запишем должность
	Попытка
		
		НоваяЗапись.Записать();
		Должность = НоваяЗапись.Ссылка;
		
	Исключение
		
		Должность = Справочники.Должности.ПустаяСсылка();
		
	КонецПопытки;
	
	Возврат Должность;
	
КонецФункции

&НаСервере
Процедура ДобавитьРуководителя()
	
	Если ДанныеРуководителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем в существующих
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактныеЛица.КонтактноеЛицо КАК КонтактноеЛицо
	|ИЗ
	|	РегистрСведений.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &Владелец
	|	И КонтактныеЛица.КонтактноеЛицо.ИНН = &ИНН";
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИНН", ДанныеРуководителя.ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		КонтактноеЛицо = СоздатьКонтактноеЛицо(Объект.Ссылка, ДанныеРуководителя);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КонтактноеЛицо = Выборка.КонтактноеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		
		МенеджерЗаписи = РегистрыСведений.КонтактныеЛица.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Владелец = Объект.Ссылка;
		МенеджерЗаписи.КонтактноеЛицо = КонтактноеЛицо;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.КонтактноеЛицо <> КонтактноеЛицо Тогда
			МенеджерЗаписи.Владелец        = Объект.Ссылка;
			МенеджерЗаписи.КонтактноеЛицо  = КонтактноеЛицо;
			МенеджерЗаписи.Основной        = Истина;
			МенеджерЗаписи.Взаимоотношение = Справочники.ВидыВзаимоотношений.КонтактноеЛицо;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить по ИНН

#КонецОбласти

&НаСервере
Процедура СчитываниеЗначенийРегистраСведенияКомпании()
	
	Руководитель     = ОрганизацииАльфаАвто.Руководитель(Объект.Ссылка);
	ГлавныйБухгалтер = ОрганизацииАльфаАвто.ГлавныйБухгалтер(Объект.Ссылка);
	Кассир           = ОрганизацииАльфаАвто.Кассир(Объект.Ссылка);
	МОЛ              = ОрганизацииАльфаАвто.МОЛ(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетныеПолитики()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПВХУчетныеПолитики.Ссылка КАК Параметр,
	|	ЕСТЬNULL(УчетныеПолитикиСрезПоследних.Значение, ЕСТЬNULL(ПВХУчетныеПолитики.ЗначениеПоУмолчанию, """")) КАК Значение
	|ИЗ
	|	ПланВидовХарактеристик.УчетныеПолитики КАК ПВХУчетныеПолитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеПолитики.СрезПоследних(&Дата, Объект = &Объект) КАК УчетныеПолитикиСрезПоследних
	|		ПО (УчетныеПолитикиСрезПоследних.Параметр = ПВХУчетныеПолитики.Ссылка)
	|ГДЕ
	|	ПВХУчетныеПолитики.Ссылка В (&МассивУчетныхПолитик)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПВХУчетныеПолитики.Код";
	
	УчетныеПолитики = ПланыВидовХарактеристик.УчетныеПолитики;
	
	МассивУчетныхПолитик = Новый Массив;
	МассивУчетныхПолитик.Добавить(УчетныеПолитики.СтратегияСписанияПартийТоваровПоДатам);
	МассивУчетныхПолитик.Добавить(УчетныеПолитики.СтратегияСписанияПартийТоваровПоСтатусам);
	МассивУчетныхПолитик.Добавить(УчетныеПолитики.ЗакрытиеЗаказовПоПодразделению);
	МассивУчетныхПолитик.Добавить(УчетныеПолитики.ПорядокПроверкиСебестоимостиТовараПриПродаже);
	МассивУчетныхПолитик.Добавить(УчетныеПолитики.СистемаНалогообложения);
	МассивУчетныхПолитик.Добавить(УчетныеПолитики.ОбъектНалогообложения);
	МассивУчетныхПолитик.Добавить(УчетныеПолитики.ВидНалога); 
	МассивУчетныхПолитик.Добавить(УчетныеПолитики.НалогообложениеНДСПриУСН);
	
	Запрос.УстановитьПараметр("Дата",            ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Объект",          Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивУчетныхПолитик", МассивУчетныхПолитик);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Параметр = УчетныеПолитики.СтратегияСписанияПартийТоваровПоДатам Тогда
			СтратегияСписанияПартийТоваровПоДатам = Выборка.Значение;
		ИначеЕсли Выборка.Параметр = УчетныеПолитики.СтратегияСписанияПартийТоваровПоСтатусам Тогда
			СтратегияСписанияПартийТоваровПоСтатусам = Выборка.Значение;
		ИначеЕсли Выборка.Параметр = УчетныеПолитики.ЗакрытиеЗаказовПоПодразделению Тогда
			ЗакрытиеЗаказовПоПодразделению = Выборка.Значение;
		ИначеЕсли Выборка.Параметр = УчетныеПолитики.ПорядокПроверкиСебестоимостиТовараПриПродаже Тогда
			ПорядокПроверкиСебестоимостиТовараПриПродаже = Выборка.Значение;
		ИначеЕсли Выборка.Параметр = УчетныеПолитики.СистемаНалогообложения Тогда
			СистемаНалогообложения = Выборка.Значение;
		ИначеЕсли Выборка.Параметр = УчетныеПолитики.ОбъектНалогообложения Тогда
			ОбъектНалогообложения = Выборка.Значение;
		ИначеЕсли Выборка.Параметр = УчетныеПолитики.ВидНалога Тогда
			ВидНалога = Выборка.Значение; 
		ИначеЕсли Выборка.Параметр = УчетныеПолитики.НалогообложениеНДСПриУСН Тогда
			НалогообложениеНДСПриУСН = Выборка.Значение; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СотрудникУволен(Ссылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ФлагУволен");
	
КонецФункции

&НаКлиенте
Процедура УстановитьФлагВыбораИзСписка(Значение)
	
	ФлагВыбораИзСписка = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьФормыСобственностиОрганизации(СписокФормСобственности)
	
	СписокФормСобственности.Очистить();
	
	Для Индекс = 0 По Перечисления.ФормыСобственности.Количество() - 1 Цикл
		Если Перечисления.ФормыСобственности[Индекс] = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			Продолжить;
		КонецЕсли;
		СписокФормСобственности.Добавить(Перечисления.ФормыСобственности[Индекс]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСледующееИзображение(ДвижениеПросмотра)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ПолучитьСледующееИзображение(ЭтотОбъект, ДвижениеПросмотра);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСотрудника(Источник, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ФлагВыбораИзСписка Тогда
		
		Если СотрудникУволен(ВыбранноеЗначение) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru='Выбран уволенный сотрудник.%1Продолжить выбор?'");
			ТекстВопроса = СтрШаблон(ТекстВопроса, Символы.ПС);
			ПараметрыВопроса = Новый Структура;
			ПараметрыВопроса.Вставить("Значение", ВыбранноеЗначение);
			ПараметрыВопроса.Вставить("Источник", Источник);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьВыборПослеВопроса", ЭтотОбъект, ПараметрыВопроса);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьФлагВыбораИзСписка(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыборПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект[Параметры.Источник] = Параметры.Значение;
		УстановитьФлагВыбораИзСписка(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
		
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И РасчетныеСчета.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество() = 0 Тогда
		
		ЭлементОтбора = РасчетныеСчета.
						КомпоновщикНастроек.ФиксированныеНастройки.
						Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ПодтверждающиеДокументы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество() = 0 Тогда
		
		ЭлементОтбора = ПодтверждающиеДокументы.
						КомпоновщикНастроек.ФиксированныеНастройки.
						Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
		
	КонецЕсли;
	
	РасчетныеСчета.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Очистить();
	ПолеУсловногоОформления =
		РасчетныеСчета.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	ОтборДляОформления = ПолеУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбораДляОформления = 
		ПолеУсловногоОформления.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка"));
	Если ПолеОтбораДляОформления <> Неопределено Тогда
		ОтборДляОформления.ЛевоеЗначение = ПолеОтбораДляОформления.Поле;
		ОтборДляОформления.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		ОтборДляОформления.ПравоеЗначение = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект);
		ОтборДляОформления.Использование = Истина;
		НастройкаШрифта  = ПолеУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
		НастройкаШрифта.Использование = Истина; 
		НовыйШрифт = Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, НСтр("ru = 'Шрифт диалогов и меню'"),,Истина);
		НастройкаШрифта.Значение = НовыйШрифт;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	НовыйОбъект = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.СтраницаСчета.Доступность                   = НовыйОбъект;
	Элементы.СтраницаПодтверждающиеДокументы.Доступность = НовыйОбъект;
	Элементы.СтраницаУчетнаяПолитика.Доступность = НовыйОбъект;
	
	РаботаСФайламиАльфаАвто.УстановитьДоступностьКомандДляИзображений(Объект, ЭтаФорма);
	
	Элементы.СтраницаЦенДляПроверки.Видимость = ВидимостьСтраницыЦен(); 
	Элементы.ТипыЦенДляПроверки.Доступность = Объект.ПроверятьПревышениеЦеныПриходаНадЦенойРеализации;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДобавитьФаксимилеДиректора",
		"Видимость",
		ЗначениеЗаполнено(Руководитель) И НЕ ЗначениеЗаполнено(Руководитель.ФаксимилеПодписи)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДобавитьФаксимилеГлавногоБухгалтера",
		"Видимость",
		ЗначениеЗаполнено(ГлавныйБухгалтер) И НЕ ЗначениеЗаполнено(ГлавныйБухгалтер.ФаксимилеПодписи)
	);
	
	ОбновитьВидимостьФИО();
	ОбновитьВидимостьКоманднойПанелиКартинок();
	УстановитьВидимостьКПП();

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущееИзображение()
	
	Если ЗначениеЗаполнено(ТекущаяКартинка) Тогда
		ПараметрыДействия = Новый Структура("НоваяКартинкаОписания", ТекущаяКартинка);
		РаботаСФайламиАльфаАвтоВызовСервера.УстановитьТекущееИзображение(ЭтотОбъект, ПараметрыДействия, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименованияНаТекущийМомент(Организация)
	
	Возврат РеквизитыСИсторией.ПолучитьНаименованияНаДату(Организация, ТекущаяДатаСеанса());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьПереименованиеВИстории(Организация)
	
	Если ПустаяСтрока(Организация.НаименованиеПолное) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Наименования = ПолучитьНаименованияНаТекущийМомент(Организация.Ссылка);
	НаименованиеНаСегодня = Наименования.НаименованиеПолное;
	
	Если Организация.ИсторияНаименований.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(НаименованиеНаСегодня) Тогда
		
		Если НЕ ЗначениеЗаполнено(НаименованиеНаСегодня) Тогда
			
			НаименованиеНаСегодня =  Организация.НаименованиеПолное;
			
		КонецЕсли;
		
		НайденныеСтроки = Организация.ИсторияНаименований.НайтиСтроки(Новый Структура("Период", Дата("00010101")));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденныеСтроки[0].НаименованиеПолное = НаименованиеНаСегодня;
			Возврат;
			
		КонецЕсли;
		
		НоваяСтрока = Организация.ИсторияНаименований.Добавить();
		НоваяСтрока.НаименованиеПолное = НаименованиеНаСегодня;
		НоваяСтрока.Период = Дата("00010101");
		
	КонецЕсли;
	
	Если НаименованиеНаСегодня = Организация.НаименованиеПолное Тогда
		
		Возврат;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	#Иначе
		
		ДатаСеанса = ТекущаяДатаСеанса();
		
	#КонецЕсли
	
	НайденныеСтроки = Организация.ИсторияНаименований.НайтиСтроки(
		Новый Структура("Период", НачалоДня(ДатаСеанса)));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекСтрока = НайденныеСтроки[0];
		ТекСтрока.НаименованиеПолное = Организация.НаименованиеПолное;
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Организация.ИсторияНаименований.Добавить();
	НоваяСтрока.НаименованиеПолное = Организация.НаименованиеПолное;
	НоваяСтрока.Период = ДатаСеанса;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКППНаТекущийМомент(Организация)
	
	Возврат РеквизитыСИсторией.ПолучитьКППНаДату(Организация, ТекущаяДатаСеанса());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьКППВИстории(Организация)
	
	Если ПустаяСтрока(Организация.КПП) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КППНаСегодня = ПолучитьКППНаТекущийМомент(Организация.Ссылка);
	
	Если Организация.ИсторияКПП.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(КППНаСегодня) Тогда
		
		Если НЕ ЗначениеЗаполнено(КППНаСегодня) Тогда
			
			КППНаСегодня =  Организация.КПП;
			
		КонецЕсли;
		
		НайденныеСтроки = Организация.ИсторияКПП.НайтиСтроки(Новый Структура("Период", Дата("00010101")));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденныеСтроки[0].КПП = КППНаСегодня;
			Возврат;
			
		КонецЕсли;
		
		НоваяСтрока = Организация.ИсторияКПП.Добавить();
		НоваяСтрока.КПП = КППНаСегодня;
		НоваяСтрока.Период = Дата("00010101");
		
	КонецЕсли;
	
	Если КППНаСегодня = Организация.КПП Тогда
		
		Возврат;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	#Иначе
		
		ДатаСеанса = ТекущаяДатаСеанса();
		
	#КонецЕсли
	
	НайденныеСтроки = Организация.ИсторияКПП.НайтиСтроки(
		Новый Структура("Период", НачалоДня(ДатаСеанса)));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекСтрока = НайденныеСтроки[0];
		ТекСтрока.КПП = Организация.КПП;
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Организация.ИсторияКПП.Добавить();
	НоваяСтрока.КПП = Организация.КПП;
	НоваяСтрока.Период = ДатаСеанса;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьВидимостьФИО()
	
	ФормыСобственностиСФИО = Новый Массив();
	ФормыСобственностиСФИО.Добавить(Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	ФормыСобственностиСФИО.Добавить(Перечисления.ФормыСобственности.ЧастноеЛицо);
	
	Элементы.ФИО.Видимость = ФормыСобственностиСФИО.Найти(Объект.ФормаСобственности) <> Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКПП()
	
	ОрганицацияЭтоИП = ЭтоОрганизацияИП(Объект);
	
	Элементы.КПП.Видимость = НЕ ОрганицацияЭтоИП;
	Элементы.КППИстория.Видимость = НЕ ОрганицацияЭтоИП;
	
КонецПроцедуры

&НаСервере
Функция ВидимостьСтраницыЦен()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПраваИНастройки.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ПраваИНастройки КАК ПраваИНастройки
	|ГДЕ
	|	ПраваИНастройки.ПравоНастройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПраваИНастройки.ПроверкаПревышенияЦеныПриходаНадЦенойРеализации)
	|	И ПраваИНастройки.ПравоНастройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПраваИНастройки.ПроверкаПревышенияЦеныПриходаНадЦенойРеализации)
	|	И (ПраваИНастройки.Значение = ЗНАЧЕНИЕ(Перечисление.ВариантыПроверкиЦеныПрихода.БлокироватьПриход)
	|			ИЛИ ПраваИНастройки.Значение = ЗНАЧЕНИЕ(Перечисление.ВариантыПроверкиЦеныПрихода.Предупреждать))";

	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Количество() > 0 Тогда
	
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;

КонецФункции 

&НаКлиенте
Процедура ДобавитьФаксимилеСотрудника(Сотрудник)
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьФаксимилеСотрудникаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("Ключ", Сотрудник);
	ОткрытьФорму(
		"Справочник.Сотрудники.ФормаОбъекта",
		ПараметрыОткрытия,
		ЭтотОбъект,
		, , ,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФаксимилеСотрудникаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьЛоготипПечатьНаСервере()
	
	УстановитьТекущееИзображение();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКоманднойПанелиКартинок()
	
	ЕстьПечать = НЕ Объект.ПечатьОрганизации.Пустая();
	ЕстьЛоготип = НЕ Объект.ФайлКартинки.Пустая();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НазначитьЛоготип",
		"Видимость",
		НЕ ЕстьЛоготип
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоказатьЛоготип",
		"Видимость",
		ЕстьЛоготип
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОчиститьЛоготип",
		"Видимость",
		ЕстьЛоготип
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НазначитьПечать",
		"Видимость",
		НЕ ЕстьПечать
	);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоказатьПечать",
		"Видимость",
		ЕстьПечать
	);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОчиститьПечать",
		"Видимость",
		ЕстьПечать
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОрганизацияИП(Организация)

	ФормаСобственностиИП = ПредопределенноеЗначение("Перечисление.ФормыСобственности.ИндивидуальныйПредприниматель");

	Возврат Организация.ФормаСобственности = ФормаСобственностиИП;

КонецФункции

&НаКлиенте
Функция ВидКонтрагентаСПАРКРиски()
	
	ВидКонтрагента = Неопределено;
	Если Объект.ФормаСобственности = ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЮридическоеЛицо") Тогда
		ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо");
	ИначеЕсли Объект.ФормаСобственности =
			ПредопределенноеЗначение("Перечисление.ФормыСобственности.ИндивидуальныйПредприниматель") Тогда
		ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель");
	КонецЕсли;
	
	Возврат ВидКонтрагента;
	
КонецФункции
#Область АльфаАвтоРаботаСФайлами

&НаКлиенте
Процедура Подключаемый_РаботаСФайламиАльфаАвтоОбработкаОповещения(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, Объект);
	
	Если РезультатОповещения.Свойство("НоваяКартинкаОписания") Тогда 
		ЭтотОбъект.Модифицированность = Истина; 
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти