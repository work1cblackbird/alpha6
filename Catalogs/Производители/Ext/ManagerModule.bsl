// Модуль менеджера справочника "Производители"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Функция ищет производителя по Наименованию элемента и по ТЧ Синонимы
//
// Параметры:
//  Наименование - Строка	 - Искомое наименование производителя
// Возвращаемое значение:
//   - СправочникСсылка.Производители.
Функция НайтиПроизводителяПоНаименованию(Знач Наименование) Экспорт
	НайденныйПроизводитель = Справочники.Производители.НайтиПоНаименованию(Наименование, Истина);
	
	Если НайденныйПроизводитель.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Синонимы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Производители.Синонимы КАК Синонимы
		|ГДЕ
		|	Синонимы.Синоним = &Наименование
		|	И НЕ Синонимы.Ошибка
		|	И НЕ Синонимы.Ссылка.ПометкаУдаления";
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныйПроизводитель;
КонецФункции

// Функция возвращает массив производителей, связанных с передаваемым артикулом
//
// Параметры:
//	АртикулДляПоиска - Строка - Артикул, производители для которого будут искаться.
//
// Возвращаемое значение:
//	Массив - Массив найденных производителей.
//
Функция НайтиПроизводителейПоАртикулу(
	Знач Артикул,
	Знач АртикулДляПоиска = Неопределено,
	ПроизводителиДляПоиска = Неопределено,
	ТочныйПоиск = Ложь,
	РасширенныйПоиск = Ложь,
	ИскатьВоВнешнихПрайсЛистахКонтрагентов = Ложь) Экспорт
	
	ПроизводителиДляПоиска = Новый Структура("ЕстьПустойПроизводитель, Производители", Ложь, Новый Массив);
	
	Если АртикулДляПоиска = Неопределено ИЛИ ПустаяСтрока(АртикулДляПоиска) Тогда
		АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул);
	КонецЕсли;
	
	Если ПустаяСтрока(АртикулДляПоиска) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// РасширенныйПоиск
	
	ЗапросТекст =
	"ВЫБРАТЬ
	|	Номенклатура.Производитель КАК Производитель
	|ПОМЕСТИТЬ ТабПроизводителейНеСвернутая
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.АртикулДляПоиска %1";
	
	Если РасширенныйПоиск Тогда
		ЗапросТекст = ЗапросТекст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыАналогов.Производитель
		|ИЗ
		|	РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
		|ГДЕ
		|	ГруппыАналогов.АртикулДляПоиска %1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрайсЛистыКонтрагентов.Производитель
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
		|ГДЕ
		|	ПрайсЛистыКонтрагентов.АртикулДляПоиска %1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрайсЛистыКонтрагентовВременный.Производитель
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК ПрайсЛистыКонтрагентовВременный
		|ГДЕ
		|	НЕ ПрайсЛистыКонтрагентовВременный.ЗапретЗагрузки
		|	И (ПрайсЛистыКонтрагентовВременный.ПроизводительВПрайсЛисте = """" ИЛИ ПрайсЛистыКонтрагентовВременный.Производитель <> ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка))
		|	И ПрайсЛистыКонтрагентовВременный.АртикулДляПоиска %1";
	КонецЕсли;
	
	ЗапросТекст = ЗапросТекст +
	"
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабПроизводителейНеСвернутая.Производитель
	|ПОМЕСТИТЬ ТабПроизводителей
	|ИЗ
	|	ТабПроизводителейНеСвернутая КАК ТабПроизводителейНеСвернутая
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТабПроизводителей.Производитель
	|ИЗ
	|	ТабПроизводителей КАК ТабПроизводителей
	|ГДЕ
	|	ТабПроизводителей.Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабПроизводителей.Производитель
	|ИЗ
	|	ТабПроизводителей КАК ТабПроизводителей
	|ГДЕ
	|	ТабПроизводителей.Производитель <> ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабПроизводителей.Производитель.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Спр.Ссылка,
	|	Спр.Производитель
	|ИЗ
	|	Справочник.ПрайсЛистыКонтрагентов КАК Спр
	|ГДЕ
	|	НЕ Спр.ФайлИсточникДанных
	|	И НЕ Спр.ХранитьДанныеЛокально
	|	И НЕ Спр.Производитель В
	|		(ВЫБРАТЬ
	|			ТабПроизводителей.Производитель
	|		ИЗ
	|			ТабПроизводителей КАК ТабПроизводителей
	|		ГДЕ
	|			ТабПроизводителей.Производитель <> ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка))";
	
	Запрос = Новый Запрос;
	Если ТочныйПоиск Тогда
		Запрос.Текст = СтрШаблон(ЗапросТекст, "= &Артикул");
		Запрос.УстановитьПараметр("Артикул", АртикулДляПоиска);
	Иначе
		Запрос.Текст = СтрШаблон(ЗапросТекст, "ПОДОБНО &Артикул");
		Запрос.УстановитьПараметр("Артикул", "%"+АртикулДляПоиска+"%");
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПроверкаПустойПроизводитель = 2;
	ВсеПроизводители            = 3;
	ПрайсЛистыДляДоЗагрузки     = 4;
	
	ПроизводителиДляПоиска.ЕстьПустойПроизводитель = Не Результат[ПроверкаПустойПроизводитель].Пустой();
	НайденныеПроизводители                         = Результат[ВсеПроизводители].Выгрузить().ВыгрузитьКолонку("Производитель");
	
	Если ИскатьВоВнешнихПрайсЛистахКонтрагентов Тогда
		Выборка = Результат[ПрайсЛистыДляДоЗагрузки].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// Поиск по внешних прайс-листах
			ПроизводителиВнешнегоПрайсЛиста = Справочники.ПрайсЛистыКонтрагентов.
			НайтиПроизводителейАртикулаВПрайсЛистеИсточникДанных(Выборка.Ссылка, Артикул, АртикулДляПоиска, ТочныйПоиск);
			
			Для Каждого Производитель Из ПроизводителиВнешнегоПрайсЛиста Цикл
				Если НайденныеПроизводители.Найти(Производитель) = Неопределено Тогда
					Если ЗначениеЗаполнено(Производитель) Тогда
						НайденныеПроизводители.Добавить(Производитель);
					Иначе
						ПроизводителиДляПоиска.ЕстьПустойПроизводитель = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ПроизводителиДляПоиска.Производители = Новый Массив;
	Для Каждого Элемент Из НайденныеПроизводители Цикл
		ПроизводителиДляПоиска.Производители.Добавить(Элемент);
	КонецЦикла;
	
	Если ПроизводителиДляПоиска.ЕстьПустойПроизводитель Тогда
		НайденныеПроизводители.Добавить(Справочники.Производители.ПустаяСсылка());
	КонецЕсли;
	
	Возврат НайденныеПроизводители; // Все найденные производители
	
КонецФункции //НайтиПроизводителейПоАртикулу()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("СтранаПроисхождения");
	
	// Проверка уникальности строк в табличной части "Синонимы".
	ОбязательныеСинонимы = Новый Структура();
	ОбязательныеСинонимы.Вставить("Синоним", 3);
	ОбязательныеРеквизиты.Добавить(ОбязательныеСинонимы);
	// Проверка на уникальность доноров в табличной части "ДонорыАртикулов".
	УникальныеДоноры = Новый Структура();
	УникальныеДоноры.Вставить("Производитель", 3);
	ОбязательныеРеквизиты.Добавить(УникальныеДоноры);
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#КонецОбласти

#КонецЕсли