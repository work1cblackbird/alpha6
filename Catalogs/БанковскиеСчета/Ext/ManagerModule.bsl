#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	ДопУсловие = Новый Массив;
	
	СписокТиповПараметра = Новый Массив;
	СписокТиповПараметра.Добавить(Тип("Массив"));
	СписокТиповПараметра.Добавить(Тип("СписокЗначений"));
	СписокТиповПараметра.Добавить(Тип("ФиксированныйМассив"));
	
	Для Каждого ТекущийОтбор Из Параметры.Отбор Цикл
		
		Если СписокТиповПараметра.Найти(ТипЗнч(ТекущийОтбор.Значение)) = Неопределено Тогда
			ВидСравненияОтбора = "=";
			ИмяПараметра = СтрШаблон("&%1", ТекущийОтбор.Ключ);
		Иначе
			ВидСравненияОтбора = "В";
			ИмяПараметра = СтрШаблон("(&%1)", ТекущийОтбор.Ключ);
		КонецЕсли;
		
		ДопУсловие.Добавить(СтрШаблон("%1 %2 %3", ТекущийОтбор.Ключ, ВидСравненияОтбора, ИмяПараметра));
		Запрос.УстановитьПараметр(ТекущийОтбор.Ключ, ТекущийОтбор.Значение);
	КонецЦикла;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаУсловия = СтрСоединить(ДопУсловие, " И БанковскиеСчета.");
	
	Если СтрДлина(СтрокаУсловия) > 0 Тогда
		СтрокаУсловия = " И " + СтрокаУсловия;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БанковскиеСчета.Наименование КАК Наименование,
	               |	БанковскиеСчета.Код КАК Код,
	               |	БанковскиеСчета.НомерСчета КАК НомерСчета,
	               |	БанковскиеСчета.Владелец КАК Владелец,
	               |	БанковскиеСчета.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |ГДЕ
	               |	БанковскиеСчета.Наименование ПОДОБНО &СтрокаПоиска  СПЕЦСИМВОЛ ""~"" %ДопУсловие%";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ДопУсловие%", СтрокаУсловия);
	Запрос.УстановитьПараметр("СтрокаПоиска",
		"%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Параметры.СтрокаПоиска) + "%"
	);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Представление = СтрШаблон("%1 (%2) (%3) (%4)", Выборка.Наименование, СокрЛП(Выборка.Код), СокрЛП(Выборка.НомерСчета), Выборка.Владелец);
		
		ДанныеВыбора.Добавить(Выборка.Ссылка, Представление);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПолученияДанныхВыбора()

#КонецОбласти
	
#Область ПрограммныйИнтерфейс

// Проверка корректности заполения банковского счета.
//
// Параметры:
//  НомерСчета - Строка - номер счета;
//  Банк			 - СправочникСсылка.КлассификаторБанковРФ - банк к которому относиться счет;
// 
// Возвращаемое значение:
//  Структура - содержит:
//   * ЭтоОшибка - Булево - признак ошибки;
//   * Текст - Строка - сообщение об ошибке
//
Функция ПроверитьНомерСчета(НомерСчета, Банк) Экспорт
	
	Результат = Новый Структура("ЭтоОшибка,Текст", Ложь, "");
	
	Если ПустаяСтрока(НомерСчета) Тогда
		
		Результат.ЭтоОшибка = Истина;
		Результат.Текст = НСтр("ru='Не указан номер счета'");
		Возврат Результат;
		
	КонецЕсли;
	
	ДлинаНомераБанковскогоСчета = 20;
	
	Если СтрДлина(НомерСчета) <> ДлинаНомераБанковскогоСчета Тогда
		
		Результат.ЭтоОшибка = Истина;
		Результат.Текст = НСтр("ru='Возможно, номер счета указан неверно'");
		Возврат Результат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		
		Результат.ЭтоОшибка = Истина;
		Результат.Текст = НСтр("ru='Не указан банк, в котором открыт расчетный счет'");
		Возврат Результат;
		
	КонецЕсли;
	
	БИК = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код"));
	ДлинаБИК = 9;
	ТипБИК = ОбщегоНазначения.ОписаниеТипаЧисло(ДлинаБИК, 0, ДопустимыйЗнак.Неотрицательный);
	
	Если СтрДлина(БИК) <> ДлинаБИК И ТипБИК.ПривестиЗначение(БИК) = 0 Тогда
		
		Результат.ЭтоОшибка = Истина;
		Результат.Текст = НСтр("ru='БИК банка, в котором открыт расчетный счет, указан неверно'");
		Возврат Результат;
		
	КонецЕсли;
	
	Если
		НЕ ПроверитьКонтрольныеСимволы(Прав(БИК, 3) + НомерСчета)
		И НЕ ПроверитьКонтрольныеСимволы("0" + Сред(БИК, 5, 2 ) + НомерСчета)
	Тогда
		
		Результат.ЭтоОшибка = Истина;
		Результат.Текст = НСтр("ru='Номер счета и БИК не соответствуют'");
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Ищет банковский счет для владельца. Основные счета в приоритете.
//
// Параметры:
//  Владелец - СправочникСсылка.Контрагенты,
//             СправочникСсылка.Организации,
//             СправочникСсылка.ПодразделенияКомпании - Владелец счета.
// 
// Возвращаемое значение:
//  СправочникСсылка.БанковскиеСчета - Счет владельца.
//
Функция ОсновнойБанковскийСчет(Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Владелец.ОсновнойБанковскийСчет;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("НомерСчета");
	ОбязательныеРеквизиты.Добавить("ВидСчета");
	ОбязательныеРеквизиты.Добавить("Банк");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМноговалютныйУчет") Тогда
		ОбязательныеРеквизиты.Добавить("ВалютаДенежныхСредств");
	КонецЕсли;
	Если ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.Организации") Тогда
		ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ВалютаДенежныхСредств");
	Возврат Результат;
	
КонецФункции

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("ВалютаДенежныхСредств");
    Возврат Результат;
    
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Выполняем замену справочника КлассификаторБанков
//
// Параметры: 
//  Ссылка - ДокументСсылка.ЗаказНаАвтомобиль - ссылка на документ, в которм необходимо произвести замену
//
// Возвращаемое значение:
//  Булево - результат выполнения запроса
//
Функция ЗаменитьКлассификаторБанков(Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Ссылка = Неопределено Тогда 
		Запрос.Текст = ПолучитьТекстЗапроса();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапроса(Истина);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить();
		Возврат Результат.Пустой();	
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект 					= Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.Банк 				= Выборка.Банк;
		ТекущийОбъект.БанкДляРасчетов 	= Выборка.БанкДляРасчетов;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	КонецЦикла;
				
КонецФункции

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает наименование объекта банковский счет
// на основании реквизитов номер счета, банк и валюта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Функция СформироватьНаименованиеПоУмолчанию(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Наименование = "";
	
	Если ЗначениеЗаполнено(Объект.НомерСчета)
		И ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств)
		И ЗначениеЗаполнено(Объект.Банк) Тогда
		
		Наименование = "р/с "
			+ СокрЛП(Объект.НомерСчета)
			+ " ("
			+ СокрЛП(Объект.ВалютаДенежныхСредств.Наименование)
			+ ") в "
			+ СокрЛП(Объект.Банк.Наименование)
			+", БИК:"
			+ СокрЛП(Объект.Банк.Код);
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции // СформироватьНаименованиеПоУмолчанию()

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаСобытийСправочникаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеПриИзменении()

// Устанавливает указанный счет как основной.
// Текущий основной счет сбрасывается, вне зависимости от значения устанавливаемого.
// Ошибки выполнения фиксируются в журнале регистрации.
//
// Параметры:
//  Счет - СправочникСсылка.БанковскиеСчета, Неопределено - Счет устанавливаемый как основной;
//  Владелец - СправочникСсылка.Контрагенты,
//             СправочникСсылка.Организации,
//             СправочникСсылка.ПодразделенияКомпании - Владелец счета.
// 
// Возвращаемое значение:
//  Булево - Успешность операции.
//
Функция УстановитьКакОсновной(Счет, Владелец = Неопределено, ТекстОшибки = "") Экспорт
	
	ВладелецСчета = Владелец;
	
	Если НЕ ЗначениеЗаполнено(ВладелецСчета) И ЗначениеЗаполнено(Счет) Тогда
		
		ВладелецСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Владелец");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВладелецСчета) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Банковские счета.Установка основного счета'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Счет,
			НСтр("ru = 'Не верно указан владелец'")
		);
		ТекстОшибки = НСтр("ru = 'Не удалось установить основной счет: не верно указан владелец'");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ВладелецОбъект = ВладелецСчета.ПолучитьОбъект();
	
	Попытка
		
		ВладелецОбъект.Заблокировать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Банковские счета.Установка основного счета'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Счет,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ТекстОшибки = НСтр("ru = 'Не удалось установить основной счет. Подробности см. в Журнале регистрации'");
		Возврат Ложь;
		
	КонецПопытки;
	
	ВладелецОбъект.ОсновнойБанковскийСчет = Счет;
	ВладелецОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		
		ВладелецОбъект.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Банковские счета.Установка основного счета'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Счет,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ТекстОшибки = НСтр("ru = 'Не удалось установить основной счет. Подробности см. в Журнале регистрации'");
		Возврат Ложь;
		
	КонецПопытки;
	
	ТекстОшибки = НСтр("ru = 'Основной счет установлен'");
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьКонтрольныеСимволы(НомерСчет)
	
	Перем Поз; // счетчик цикла
	
	// Весовые коэффициенты
	Вес = "71371371371371371371371";
	КонтрСумма = 0;
	
	Если ЕстьБуквы(НомерСчет) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ЧислоТип = ОбщегоНазначения.ОписаниеТипаЧисло(2);
	
	Для Поз = 1 По 23 Цикл
		
		Произв = ЧислоТип.ПривестиЗначение(Сред(НомерСчет, Поз, 1)) * ЧислоТип.ПривестиЗначение(Сред(Вес, Поз, 1));
		МладшийРазряд = ЧислоТип.ПривестиЗначение(Прав(Строка(Произв), 1));
		КонтрСумма = КонтрСумма + МладшийРазряд;
		
	КонецЦикла;
	
	ОснованиеЧисла = 10;
	Возврат НЕ Булево(КонтрСумма / ОснованиеЧисла - Цел(КонтрСумма / ОснованиеЧисла));
	
КонецФункции

Функция ЕстьБуквы(НомерСчета)
	
	НомерСчета = СокрЛП(НомерСчета);
	
	Если СтрДлина(НомерСчета) > 0 Тогда
		
		Для Сч = 1 По СтрДлина(НомерСчета) Цикл
			
			Буква = НРег(Сред(НомерСчета, Сч, 1));
			
			Если
				СтрНайти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Буква)
				ИЛИ СтрНайти("abcdefghijklmnopqrstuvwxyz", Буква)
			Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЕстьБуквы()

Функция ПолучитьТекстЗапроса(Проверка = Ложь)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк,
		|	ЕСТЬNULL(КлассификаторБанков1.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК БанкДляРасчетов
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|		ПО ВЫРАЗИТЬ(БанковскиеСчета.УдалитьБанк КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков.Код
		|			И (ВЫРАЗИТЬ(БанковскиеСчета.УдалитьБанк КАК Справочник.КлассификаторБанковРФ).КоррСчет = КлассификаторБанков.КоррСчет)
		|			И (ВЫРАЗИТЬ(БанковскиеСчета.УдалитьБанк КАК Справочник.КлассификаторБанковРФ).СВИФТБИК = КлассификаторБанков.СВИФТБИК)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков1
		|		ПО ВЫРАЗИТЬ(БанковскиеСчета.УдалитьБанкДляРасчетов КАК Справочник.КлассификаторБанковРФ).Код = КлассификаторБанков1.Код
		|			И (ВЫРАЗИТЬ(БанковскиеСчета.УдалитьБанкДляРасчетов КАК Справочник.КлассификаторБанковРФ).КоррСчет = КлассификаторБанков1.КоррСчет)
		|			И (ВЫРАЗИТЬ(БанковскиеСчета.УдалитьБанкДляРасчетов КАК Справочник.КлассификаторБанковРФ).СВИФТБИК = КлассификаторБанков1.СВИФТБИК)
		|ГДЕ
		|	(БанковскиеСчета.УдалитьБанк ССЫЛКА Справочник.КлассификаторБанковРФ
		|				И НЕ БанковскиеСчета.УдалитьБанк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанковРФ.ПустаяСсылка)
		|				И БанковскиеСчета.Банк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
		|			ИЛИ БанковскиеСчета.УдалитьБанкДляРасчетов ССЫЛКА Справочник.КлассификаторБанковРФ
		|				И НЕ БанковскиеСчета.УдалитьБанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанковРФ.ПустаяСсылка)
		|				И БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка))
		|	И БанковскиеСчета.Ссылка = &Ссылка";

	Если Не Проверка Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И БанковскиеСчета.Ссылка = &Ссылка", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли




