#Область ПеременныеФормы

&НаКлиенте
Перем УстановкаОсновногоСчетаВыполнена; // Признак успешной установки основного банковского счета
                                        // из формы контрагента/организации

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаСписка(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если ИмяСобытия = "УстановкаОсновногоСчетаВыполнена" И УникальныйИдентификатор = Параметр Тогда
		
		УстановкаОсновногоСчетаВыполнена = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьКакОсновной(Команда)
	
	Если
		ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		Или Элементы.Список.ТекущиеДанные = Неопределено
		Или Элементы.Список.ТекущиеДанные.ЭтоОсновнойСчет
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Если открыта форма контрагента/организации, то изменение основного счета выполняем в ней
	УстановкаОсновногоСчетаВыполнена = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец", 			Элементы.Список.ТекущиеДанные.Владелец);
	СтруктураПараметров.Вставить("НовыйОсновнойСчет", 	Элементы.Список.ТекущиеДанные.Ссылка);
	Оповестить("УстановкаОсновногоСчета", СтруктураПараметров, ЭтотОбъект);
	
	// Если форма контрагента/организации закрыта, то запишем основной счет контрагента/организации самостоятельно
	Если Не УстановкаОсновногоСчетаВыполнена Тогда
		
		ТекстОшибки = УстановитьКакОсновнойНаСервере(СтруктураПараметров);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ЭтоОсновнойСчет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,,,Истина));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДоступностьУстановкиСчетаКакОсновного()
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипВладельца = ТипЗнч(ТекущаяСтрока.Владелец);
	Если ТипВладельца = Тип("СправочникСсылка.Контрагенты") Тогда
		МетаданныеВладельца =  Метаданные.Справочники.Контрагенты;
	ИначеЕсли ТипВладельца = Тип("СправочникСсылка.Организации") Тогда
		МетаданныеВладельца =  Метаданные.Справочники.Организации;
	ИначеЕсли ТипВладельца = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
		МетаданныеВладельца =  Метаданные.Справочники.ПодразделенияКомпании; 
	Иначе
		Элементы.ФормаУстановитьКакОсновной.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	// Установим доступность команды "Установить как основной"
	Элементы.ФормаУстановитьКакОсновной.Видимость = ПравоДоступа("Изменение", МетаданныеВладельца);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	СформироватьДоступностьУстановкиСчетаКакОсновного();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Функция УстановитьКакОсновнойНаСервере(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	Справочники.БанковскиеСчета.УстановитьКакОсновной(
		СтруктураПараметров.НовыйОсновнойСчет,
		СтруктураПараметров.Владелец,
		ТекстОшибки
	);
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

