
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	ЗаполнитьТекстыШаблонов();
	
	// Дальнейшие операции выпольняются только для новых объектов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПростаяНаценка(Команда)
	
	ВыполнитьЗаполнениеПоШаблону(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПростаяНаценкаДоставка(Команда)
	
	ВыполнитьЗаполнениеПоШаблону(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрадиентНаценокЦенаНоменклатуры(Команда)
	
	ВыполнитьЗаполнениеПоШаблону(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрадиентНаценокДоставка(Команда)
	
	ВыполнитьЗаполнениеПоШаблону(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрадиентНаценок(Команда)
	
	ВыполнитьЗаполнениеПоШаблону(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	#Если ВебКлиент Тогда
		ВызватьИсключение Нстр("ru = 'Проверка в веб-клиенте не поддерживается.'");	
	#КонецЕсли
	
	Цена = ЦенаПокупки;
	ТекстВыражения = Лев(СокрЛП(Объект.Алгоритм), 989);
	
	Попытка
		//@skip-check unsupported-operator
		Выполнить(ТекстВыражения);
		ПоказатьПредупреждение(, НСтр("ru = 'Расчет цены выполнен успешно.'"));
	Исключение
		ПоказатьПредупреждение(, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТекстыШаблонов()
	
	ТекстыШаблонов = Новый Структура;
	
	// простые наценки
	ТекстыШаблонов.Вставить("ПростаяНаценка"        , "Цена = ЦенаПокупки * 1.5; // 50% наценка");
	ТекстыШаблонов.Вставить("ПростаяНаценкаДоставка", "Цена = ЦенаПокупки * 1.5 + 100; // 50% наценка, 100 - доставка");
	
	// градиенты
	
	ТекстВыражения =
	"Ц = ЦенаПокупки;
	|Если Ц < 100 Тогда
	|	Цена = Ц * 1.9;
	|ИначеЕсли Ц < 500 Тогда
	|	Цена = Ц * 1.7 + 20;
	|ИначеЕсли Ц < 1000 Тогда
	|	Цена = Ц * 1.5 + 120;
	|ИначеЕсли Ц < 5000 Тогда
	|	Цена = Ц * 1.4 + 220;
	|Иначе
	|	Цена = Ц * 1.3 + 720;
	|КонецЕсли;";
	
	ТекстыШаблонов.Вставить("ГрадиентНаценок", ТекстВыражения);
	
	ТекстВыражения =
	"Ц = ЦенаПокупки;
	|Если Ц = 0 Тогда // Наценку и доставку расчитываем только если БазаЦены > 0
	|	Цена = 0;
	|Иначе
	|	Если Ц < 100 Тогда
	|		Цена = Ц * 1.9;
	|	ИначеЕсли Ц < 500 Тогда
	|		Цена = Ц * 1.7 + 20;
	|	ИначеЕсли Ц < 1000 Тогда
	|		Цена = Ц * 1.5 + 120;
	|	ИначеЕсли Ц < 5000 Тогда
	|		Цена = Ц * 1.4 + 220;
	|	Иначе
	|		Цена = Ц * 1.3 + 720;
	|	КонецЕсли;
	|	// Доставка 100 руб на каждую единицу товара после наценки
	|	Цена = Цена + 100;
	|КонецЕсли;";
	
	ТекстыШаблонов.Вставить("ГрадиентНаценокДоставка", ТекстВыражения);
	
	ТекстВыражения =
	"Ц = ЦенаПокупки;
	|Если Ц < 100 Тогда
	|	Цена = Ц * 1.9;
	|ИначеЕсли Ц < 500 Тогда
	|	Цена = Ц * 1.7 + 20;
	|ИначеЕсли Ц < 1000 Тогда
	|	Цена = Ц * 1.5 + 120;
	|ИначеЕсли Ц < 5000 Тогда
	|	Цена = Ц * 1.4 + 220;
	|Иначе
	|	Цена = Ц * 1.3 + 720;
	|КонецЕсли;
	|
	|//Проверим, что продаем не дешевле установленной в базе цены
	|Если Цена < ЦенаНоменклатуры Тогда
	|	Цена = ЦенаНоменклатуры;
	|КонецЕсли;";
	
	ТекстыШаблонов.Вставить("ГрадиентНаценокЦенаНоменклатуры", ТекстВыражения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеПоШаблону(ИмяШаблона)
	
	Если НЕ ПустаяСтрока(Объект.Алгоритм) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыполнитьЗаполнениеПоШаблонуЗавершение",
			ЭтотОбъект,
			ИмяШаблона
		);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			"При заполнении по шаблону ранее введенный текст будет очищен. Продолжить?",
			РежимДиалогаВопрос.ДаНет
		);
	Иначе
		ВыполнитьЗаполнениеПоШаблонуЗавершение(КодВозвратаДиалога.Да, ИмяШаблона);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеПоШаблонуЗавершение(Ответ, ИмяШаблона) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Текст = "";
		Если ТекстыШаблонов.Свойство(ИмяШаблона, Текст) Тогда
			Объект.Алгоритм = Текст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

