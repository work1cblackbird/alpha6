
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	ХозОперация = ПолучитьЗначениеПараметраСтруктуры(Параметры.Отбор, "ХозОперация", Неопределено);
	
	ЭтоСубподряд = Параметры.Свойство("Субподряд");
	Если ЭтоСубподряд Тогда
		ДатаНачала = ПолучитьЗначениеПараметраСтруктуры(Параметры.Отбор, "ДатаНачала", Неопределено);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Для иерархического справочника, подчиненного владельцу, у которого есть элемент Дерево
	// устанавливаем отбор по владельцу всегда
	ЭлементОтбора = Дерево.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(
			Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.Использование  = Истина;
		
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Владелец") 
		И Параметры.Отбор.Владелец <> Неопределено Тогда
		
		Владелец = Параметры.Отбор.Владелец;
		
		Если НЕ ОбщегоНазначения.ОбъектЯвляетсяГруппой(Владелец) Тогда
			
			Параметры.Отбор.Владелец = Владелец;
			
		КонецЕсли;
	 
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Владелец;
			
	Иначе
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	КонецЕсли;
	
	ВидимостьДерева = Истина;
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);  
	
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Дерево, Параметры);

	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	Список.Параметры.УстановитьЗначениеПараметра ("КонецДня", КонецДня(ТекущаяДатаСеанса()));
	
	// Отбор по дате окончания договора.
	Если Параметры.РежимВыбора Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ДатаКонца",
			КонецДня(ТекущаяДатаСеанса()),
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		
		Если ЭтоСубподряд И ДатаНачала <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список,
				"ДатаНачала",
				ДатаНачала,
				ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
				,
				Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ХозОперация <> Неопределено И ТипЗнч(ХозОперация) = Тип("СправочникСсылка.ХозОперации") Тогда
		
		УстановитьДополнительныйОтборПоХО(ХозОперация);
		
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаСписка(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)

	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
		// Сменим родителя в основном списке
	Если Элементы.Дерево.ТекущаяСтрока=Элементы.Список.ТекущийРодитель Тогда
		// Пропустим если равны
	ИначеЕсли НЕ ЗначениеЗаполнено(Элементы.Список.ТекущийРодитель) И НЕ ЗначениеЗаполнено(Элементы.Дерево.ТекущаяСтрока) Тогда
		// Пропустим если оба пустые (могут быть Неопределено)
	Иначе
		Элементы.Список.ТекущийРодитель = Элементы.Дерево.ТекущаяСтрока;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Группа Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеСправочникаДоговорыВзаиморасчетов");
		
	Иначе
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыСправочникаДоговорыВзаиморасчетов");
		
	КонецЕсли;
	// Конец ОценкаПроизводительности

КонецПроцедуры 

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент.ТекущиеДанные, "ЭтоГруппа")
		И Элемент.ТекущиеДанные.ЭтоГруппа
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыСправочникаДоговорыВзаиморасчетов");
	// Конец ОценкаПроизводительности

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьКакОсновной(Команда)
	
	Если Элементы.Список.ТекущиеДанные.Основной Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НайденныйДоговор = УстановитьКакОсновнойНаСервере(Элементы.Список.ТекущиеДанные.Ссылка);
	
	Если НайденныйДоговор.Пустая() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось установить основной договор.'"));
		Возврат;
		
	ИначеЕсли НайденныйДоговор = Элементы.Список.ТекущиеДанные.Ссылка Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Основной договор'"),
			,
			НСтр("ru = 'Установлен новый основной договор'")
		);
		Элементы.Список.Обновить();
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура(
		"ТекущийДоговор, НовыйДоговор",
		НайденныйДоговор,
		Элементы.Список.ТекущиеДанные.Ссылка
	);
	ОбработчикОтвета = Новый ОписаниеОповещения(
		"Подключаемый_УстановитьКакОсновнойОтвет",
		ЭтотОбъект,
		ПараметрыОбработчика
	);
	ТекстВопроса = НСтр("ru = 'Для аналитик подразделение и вид договора основной договор уже назначен. Заменить?'");
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьДерево(Команда)
	
	ВидимостьДерева = Не ВидимостьДерева;	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,, 10, Истина));
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Основной");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКакОсновнойОтвет(Ответ, Договоры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗаменитьОсновнойНаСервере(Договоры) Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Основной договор'"),
			,
			НСтр("ru = 'Установлен новый основной договор'")
		);
		Элементы.Список.Обновить();
		Возврат;
		
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("ru = 'Не удалось заменить основной договор.'"));
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Процедура - Установить дополнительный отбор по ХО
//
// Параметры:
//  ХозОперация	 - СправочникСсылка.ХозОперации	 - Хоз операция.
//
&НаСервере
Процедура УстановитьДополнительныйОтборПоХО(ХозОперация)
	
	//Если ХозОперация.ВидыДоговоров.Количество() = 1 Тогда	
	//	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//	ЭлементОтбора.Использование = Истина;
	//	ЭлементОтбора.ПравоеЗначение = ХозОперация.ВидыДоговоров[0];
	//Иначе
	//	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДоговора");
	//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//	ЭлементОтбора.Использование = Истина;
	//	
	//	СписокВидовДоговоров = Новый СписокЗначений;
	//	Для каждого Договор Из ХозОперация.ВидыДоговоров Цикл
	//		СписокВидовДоговоров.Добавить(Договор.ВидДоговора);	
	//	КонецЦикла; 
	//	
	//	ЭлементОтбора.ПравоеЗначение = СписокВидовДоговоров;	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьКакОсновнойНаСервере(Договор)
	
	ОсновнойДоговор = Справочники.ДоговорыВзаиморасчетов.ПроверитьОсновнойДоговор(Договор);
	
	Если ОсновнойДоговор.Пустая() Тогда
		
		ОсновнойДоговор = ОбновитьПризнакОсновной(Договор, Истина);
		
	КонецЕсли;
	
	Возврат ОсновнойДоговор;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаменитьОсновнойНаСервере(Договоры)
	
	Результат = ОбновитьПризнакОсновной(Договоры.ТекущийДоговор, Ложь);
	
	Если Результат.Пустая() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Результат = ОбновитьПризнакОсновной(Договоры.НовыйДоговор, Истина);
	
	Возврат НЕ Результат.Пустая();
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьПризнакОсновной(Договор, Значение)
	Если Договор.ЭтоГруппа Тогда
		Возврат  Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	ДоговорОбъект = Договор.ПолучитьОбъект();
	ДоговорОбъект.Основной = Значение;
	ДоговорОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		
		ДоговорОбъект.Записать();
		Возврат ДоговорОбъект.Ссылка;
		
	Исключение
		
		ОписаниеПроблемы = НСтр("ru = 'Не удалось установить признак ""Основной"":
		|	%1'");
		ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, Строка(Договор));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Данные.Изменение.Установка договора основным'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Договор,
			ОписаниеПроблемы
		);
		
	КонецПопытки;
	
	Возврат Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#КонецОбласти

