// Модуль объекта справочника "Договоры взаиморасчетов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоКода(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоКода()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийСправочникаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем установку реквизитов значениями по умолчанию
	Если ВидДоговора.Пустая() Тогда
		Если Владелец.ВидКонтрагента=Перечисления.ВидыКонтрагентов.Покупатель Тогда
			ВидДоговора = Перечисления.ВидыДоговоров.Продажа;
		ИначеЕсли Владелец.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Поставщик Тогда
			ВидДоговора = Перечисления.ВидыДоговоров.Покупка;
		Иначе
			ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
		КонецЕсли;
	КонецЕсли;
	
	ПодразделениеКомпании = ОбработкаРеквизитовДокументаСервер.ПолучитьПодразделениеУчетаДоговоров(ПодразделениеКомпании);
	
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = ПодразделениеКомпании.ОсновнаяВалютаВзаиморасчетов;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	КонецЕсли;
	
	ДатаНачала = ТекущаяДатаСеанса();
	СпособЗачетаАвансов = Организация.СпособЗачетаАвансов;
	
	ОтменаКонтроляСуммыКредита = УчетныеПолитикиСервер.Значение("ОтменаКонтроляСуммыКредита",ДатаНачала,
		ПодразделениеКомпании);
	
	Если ТипДоговора.Пустая() Тогда
		ТипДоговора = Перечисления.ТипыДоговоров.Договор;
	КонецЕсли;
	
	Если ЕдиницаИзмеренияАвтоработВПечатныхФормах.Пустая() Тогда
		
		ЕдиницаИзмеренияАвтоработВПечатныхФормах = УчетныеПолитикиСервер.Значение("ЕдиницаИзмеренияАвтоработВПечатныхФормах",
			ДатаНачала, ПодразделениеКомпании);
			
	КонецЕсли;
	
	Если (НЕ ДляАвтосалона) И (НЕ ДляАвтосервиса) Тогда
		Попытка
			// При первичном заполнении базы, работы фонового задания - когда ключ не доступен и
			// не инициализирован параметр сеанса ПараметрыСеанса.МаскаЛицензирования		
			ЕстьПодсистемаАвтосалон = ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон");
		Исключение
			ЕстьПодсистемаАвтосалон = Истина;
		КонецПопытки;
		ДляАвтосервиса = Истина;
		ДляАвтосалона  = ЕстьПодсистемаАвтосалон;
	КонецЕсли;
	
	Если Владелец.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.КонтактноеЛицо") Тогда		
		ТекстОшибки = НСтр("ru = 'Запрещен ввод договоров для контрагентов с видом отношений ""Контактное лицо""'");
		ВывестиСообщение(ТекстОшибки, ЭтотОбъект, "ОтменитьОткрытие");		
	КонецЕсли;
	
	Наименование = Справочники.ДоговорыВзаиморасчетов.СформироватьНаименованиеПоУмолчанию(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(СпособЗачетаАвансов) Тогда
		СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	КонецЕсли;
	
	Если СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПустаяСсылка() Тогда
		СпособВеденияВзаиморасчетов = ПраваИНастройкиПользователя.Значение("ОсновнойСпособВеденияВзаиморасчетов");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - СправочникОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;  
	Если ЭтоГруппа Тогда
		Возврат;	
	КонецЕсли;
	Основной = Ложь;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи объекта.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ДляАвтосервиса И НЕ ДляАвтосалона И НЕ Внутренний И НЕ ДляАренды И НЕ ДляДепозитаАренды Тогда
		ОбщегоНазначения.СообщитьПользователю (
			НСтр("ru = 'Установите флажок ""з\ч и сервис"", ""т\с"", ""аренда"" или ""депозит аренды"".'"),
			ЭтотОбъект,
			,
			,
			Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПризнакАгента) Тогда
		
		ТекстОшибки = "";
		Если Владелец.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо 
			ИЛИ Владелец.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда 
			ЭтоЮрЛицо = Истина;	
		Иначе
			ЭтоЮрЛицо = Ложь;		
		КонецЕсли;		
		
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИННПоставщика, ЭтоЮрЛицо, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю (ТекстОшибки,,"ИНН Поставщика",,Отказ);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТелефонПоставщика) Тогда
			Телефон = СтрЗаменить(ТелефонПоставщика, " " ,"");
			Телефон = СтрЗаменить(Телефон, "(" ,"");
			Телефон = СтрЗаменить(Телефон, ")" ,"");
			Телефон = СтрЗаменить(Телефон, "-" ,"");	
			Если НЕ (ОбщегоНазначенияАвтосалонКлиентСервер.СтрокаСодержитТолькоДопустимыеСимволы(Телефон,"+0123456789") И СтрНайти(Телефон,"+") = 1) Тогда
				ОбщегоНазначения.СообщитьПользователю (НСтр("ru = 'В поле ""Телефон поставщика"" введены не корректные данные'"),,"Телефон поставщика",,Отказ);
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Отказ Или Справочники
		.ДоговорыВзаиморасчетов
		.НеКорректноЗаполненИдентификаторГосКонтракта(ЭтотОбъект, ИдентификаторГосударственногоКонтракта);
	
	Если СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам
		И СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Указывать способ зачета авансов ""По документу"" для договора с признаком учета взаиморасчетов ""По сделкам"" запрещено'"),
			ЭтотОбъект,
			"СпособЗачетаАвансов",,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередЗаписью(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередЗаписью(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;	
	Если НЕ ДляАвтосервиса Тогда
		ТипЦенРабот           = Справочники.ТипыЦен.ПустаяСсылка();
		ТипСкидкиНаценкиРабот = Справочники.ТипыСкидок.ПустаяСсылка();
	КонецЕсли;
	
	Если (ТипДоговора = Перечисления.ТипыДоговоров.ВиртуальныйДоговор) Тогда
		ДатаНачала    = Дата(1, 1, 1);
		ДатаКонца     = Дата(1, 1, 1);
		НомерДоговора = "";
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриЗаписи(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

#КонецОбласти

#КонецЕсли
