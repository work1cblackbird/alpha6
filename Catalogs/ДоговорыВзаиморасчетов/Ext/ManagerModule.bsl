// Модуль менеджера справочника "Договоры взаиморасчетов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняем проверку заполнености идентификатора гос. контракта
// Параметры: 
//  Объект - СправочникОбъект.ДоговорыВзаиморасчетов - объект, для которого выполняется проверка
//  ИдентификаторГосКонтракта - Строка - значение элемента ИдентификаторГосКонтракта
//
// Возвращаемое значение:
//   Булево - результат проверки заполнения 
//
Функция НеКорректноЗаполненИдентификаторГосКонтракта(Объект, ИдентификаторГосКонтракта) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторГосКонтракта) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	МинимальнаяДлинаИдентификатораГосКонтракта = 20;
	МаксимальнаяДлинаИдентификатораГосКонтракта = 25;
	
	Если
		СтрДлина(ИдентификаторГосКонтракта) > МаксимальнаяДлинаИдентификатораГосКонтракта
		Или СтрДлина(ИдентификаторГосКонтракта) < МинимальнаяДлинаИдентификатораГосКонтракта
	Тогда
	
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Длина идентификатора гос. контракта должна быть от 20-ти до 25-ти символов.'"),
			Объект,
			"ИдентификаторГосударственногоКонтракта"
		);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит получение вида операции
Функция ПолучитьВидОперации(ВидДоговора) Экспорт
	
	Результат = Неопределено;
	Если ВидДоговора = Перечисления.ВидыДоговоров.Покупка ИЛИ ВидДоговора = Перечисления.ВидыДоговоров.СКомитентом Тогда
		Результат = Перечисления.ВидыОперацийДоговора.Покупка;
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоров.Продажа ИЛИ ВидДоговора = Перечисления.ВидыДоговоров.СКомиссионером Тогда
		Результат = Перечисления.ВидыОперацийДоговора.Продажа;
	Иначе
		Результат = Перечисления.ВидыОперацийДоговора.Внутренняя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВидОперации()

// Производит получение вида операции
Функция ПроверитьОсновнойДоговор(Договор) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыВзаиморасчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
		|ГДЕ
		|	ДоговорыВзаиморасчетов.ВидДоговора = &ВидДоговора
		|	И ДоговорыВзаиморасчетов.Основной = ИСТИНА
		|	И ДоговорыВзаиморасчетов.Организация = &Организация
		|	И ДоговорыВзаиморасчетов.ПодразделениеКомпании = &ПодразделениеКомпании
		|	И ДоговорыВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорыВзаиморасчетов.Ссылка <> &Ссылка
		|	И ДоговорыВзаиморасчетов.Владелец = &Владелец"
	);
	Запрос.УстановитьПараметр("Организация", Договор.Организация);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Договор.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ВидДоговора", Договор.ВидДоговора);
	Запрос.УстановитьПараметр("Владелец", Договор.Владелец);
	Запрос.УстановитьПараметр("Ссылка", Договор.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	
КонецФункции //ПроверитьОсновнойДоговор()

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаСобытийСправочникаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		Объект.ВалютаВзаиморасчетов = Объект.ПодразделениеКомпании.ОсновнаяВалютаВзаиморасчетов;
	КонецЕсли;
	
	Объект.СпособЗачетаАвансов = Объект.Организация.СпособЗачетаАвансов;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаСобытийСправочникаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	Объект.СпособЗачетаАвансов = Объект.Организация.СпособЗачетаАвансов;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Формирует стандартное наименование договора
// вида Договор поставки №ХХХХХ а Валюте от ДД.ММ.ГГГГ
// Используется как при интерактивном, так и при программном создании.
//
// Параметры:
//  Объект   - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнении операции.
//
Функция СформироватьНаименованиеПоУмолчанию(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ТекстДеятельности = "";
	Наименование = "";
	
	Если Объект.ДляАвтосалона И Объект.ДляАвтосервиса Тогда
		ТекстДеятельности = НСтр("ru = 'з\ч, сервис и т\с'");
	ИначеЕсли Объект.ДляАвтосервиса Тогда
		ТекстДеятельности = НСтр("ru = 'з\ч и сервис'");
	ИначеЕсли Объект.ДляАвтосалона Тогда
		ТекстДеятельности = НСтр("ru = 'т\с'");
	ИначеЕсли Объект.Внутренний Тогда
		ТекстДеятельности = НСтр("ru = 'Прочее'");
	ИначеЕсли Объект.ДляАренды Тогда // Аренда автомобилей
		ТекстДеятельности = НСтр("ru = 'аренда'");
	ИначеЕсли Объект.ДляДепозитаАренды Тогда
		ТекстДеятельности = НСтр("ru = 'депозит аренды'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипДоговора)
			И ЗначениеЗаполнено(Объект.ВидДоговора)
			И ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		
		Если (Объект.ТипДоговора = Перечисления.ТипыДоговоров.ВиртуальныйДоговор) Тогда
			
			Наименование = СокрЛП(Строка(Объект.ВидДоговора))
							+ " " + ТекстДеятельности 
							+ НСтр("ru = ' в '") + Объект.ВалютаВзаиморасчетов.Наименование;
			
		Иначе
			
			Наименование = СокрЛП(Строка(Объект.ВидДоговора))
								+ " " + ТекстДеятельности
								+ ?(ПустаяСтрока(Объект.НомерДоговора), "", " № " + СокрЛП(Объект.НомерДоговора))
								+ НСтр("ru = ' в '") + Объект.ВалютаВзаиморасчетов.Наименование
								+ НСтр("ru = ' от '") + Формат(Объект.ДатаНачала,"ДФ=дд.ММ.гггг");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции // СформироватьНаименованиеПоУмолчанию()

// Обработчик события возникающего при изменении данных реквизита "Тип суммы комиссии".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ТипСуммыКомиссииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Объект.СуммаКомиссионногоВознаграждения = 0;
	Объект.ПроцентКомиссионногоВознаграждения = 0;
	
КонецПроцедуры // ТипСуммыКомиссииПриИзменении()

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("Владелец");
    Результат.Добавить("ВидДоговора");
    Результат.Добавить("Организация");
    Результат.Добавить("ПодразделениеКомпании");
	Результат.Добавить("ВалютаВзаиморасчетов");
	Результат.Добавить("ТипСуммыКомиссии");
	Результат.Добавить("КомиссияОтчетНаОснованииПродаж");
	Результат.Добавить("ЕдиницаИзмеренияАвтоработВПечатныхФормах");
	Результат.Добавить("СпособВеденияВзаиморасчетов");

    Возврат Результат;
    
КонецФункции

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");  
	Если Не Объект.ЭтоГруппа Тогда

		ОбязательныеРеквизиты.Добавить("ВидДоговора");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьМноговалютныйУчет") Тогда
			ОбязательныеРеквизиты.Добавить("ВалютаВзаиморасчетов");
		КонецЕсли;
		ОбязательныеРеквизиты.Добавить("ТипДоговора");
		ОбязательныеРеквизиты.Добавить("ЕдиницаИзмеренияАвтоработВПечатныхФормах");
		
		Если Объект.ВидДоговора = Перечисления.ВидыДоговоров.СКомитентом Тогда
			ОбязательныеРеквизиты.Добавить("ПризнакАгента");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ПризнакАгента) Тогда
			ОбязательныеРеквизиты.Добавить("ИННПоставщика");
		КонецЕсли;
		
		ОбязательныеРеквизиты.Добавить("Организация");
		ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
		ОбязательныеРеквизиты.Добавить("СпособВеденияВзаиморасчетов");
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ВидДоговора");
	Результат.Добавить("Организация");
	Результат.Добавить("ПодразделениеКомпании");
	Результат.Добавить("ВалютаВзаиморасчетов");
	Результат.Добавить("СпособВеденияВзаиморасчетов");
	Возврат Результат;
	
КонецФункции

// Заполняет значение нового реквизита ЕдиницаИзмеренияАвтоработВПечатныхФормах у переданного элемента справочника.
//
Процедура ЗаполнитьРеквизитЕдиницаИзмеренияАвтоработВПечатныхФормах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыВзаиморасчетов.Ссылка КАК Ссылка,
	               |	ДоговорыВзаиморасчетов.УдалитьЕдиницаИзмеренияАвтоработВПечатныхФормах КАК УдалитьЕдиницаИзмеренияАвтоработВПечатныхФормах,
	               |	ДоговорыВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах КАК ЕдиницаИзмеренияАвтоработВПечатныхФормах
	               |ИЗ
	               |	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
	               |ГДЕ
	               |	ДоговорыВзаиморасчетов.УдалитьЕдиницаИзмеренияАвтоработВПечатныхФормах <> ЗНАЧЕНИЕ(Перечисление.ЕдиницаИзмеренияАвтоработВПечатныхФормах.ПУстаяСсылка)
	               |	И ДоговорыВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПУстаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Договор = Выборка.Ссылка.ПолучитьОбъект();
		
		Договор.Заблокировать();
		
		Если Выборка.УдалитьЕдиницаИзмеренияАвтоработВПечатныхФормах = Перечисления.ЕдиницаИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияПрочерк
			Или Выборка.УдалитьЕдиницаИзмеренияАвтоработВПечатныхФормах = Перечисления.ЕдиницаИзмеренияАвтоработВПечатныхФормах.ПустаяСсылка() Тогда
			ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.прочерк;
		ИначеЕсли Выборка.УдалитьЕдиницаИзмеренияАвтоработВПечатныхФормах = Перечисления.ЕдиницаИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияЧас Тогда
			ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.час;
		КонецЕсли;
		
		Договор.ЕдиницаИзмеренияАвтоработВПечатныхФормах = ЕдиницаИзмерения;

		Договор.ОбменДанными.Загрузка = Истина;
		
		Попытка
			Договор.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось заполнить единицу измерения авторабот в ПФ в %1'"),
					СокрЛП(Строка(Договор.Ссылка))
					)
				);
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет значение нового реквизита СпособЗачетаАвансов у переданного элемента справочника.
//
Процедура ЗаполнитьРеквизитСпособЗачетаАвансов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыВзаиморасчетов.Ссылка КАК Ссылка,
	               |	ДоговорыВзаиморасчетов.УдалитьАвтоЗакрытиеСделок КАК УдалитьАвтоЗакрытиеСделок
	               |ИЗ
	               |	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
	               |ГДЕ
	               |	ДоговорыВзаиморасчетов.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)
	               |	И НЕ ДоговорыВзаиморасчетов.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Договор = Выборка.Ссылка.ПолучитьОбъект();
		
		Договор.Заблокировать();
		
		Если Выборка.УдалитьАвтоЗакрытиеСделок Тогда
			Договор.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Иначе
			Договор.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		КонецЕсли;
		
		Договор.ОбменДанными.Загрузка = Истина;
		
		Попытка
			Договор.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось заполнить способ зачета авансов в %1'"),
					СокрЛП(Строка(Договор.Ссылка))
					)
				);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значение нового реквизита СпособВеденияВзаиморасчетов у переданного элемента справочника.
//
Процедура ЗаполнитьРеквизитСпособВеденияВзаиморасчетов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыВзаиморасчетов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
	               |ГДЕ
	               |	ДоговорыВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПустаяСсылка)
	               |	И НЕ ДоговорыВзаиморасчетов.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Договор = Выборка.Ссылка.ПолучитьОбъект();
		
		Договор.Заблокировать();
		Договор.СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам;
		Договор.ОбменДанными.Загрузка = Истина;
		
		Попытка
			Договор.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось заполнить способ зачета авансов в %1'"),
					СокрЛП(Строка(Договор.Ссылка))
					)
				);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ДоступныеВидыЗачетаАвансаДляУчета(СпособУчета) Экспорт
	
	СписокСпособовЗачета = Новый Массив;
	СписокСпособовЗачета.Добавить(Перечисления.СпособыЗачетаАвансов.Автоматически);
	
	Если СпособУчета = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
		СписокСпособовЗачета.Добавить(Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	КонецЕсли;
	
	СписокСпособовЗачета.Добавить(Перечисления.СпособыЗачетаАвансов.НеЗачитывать);
	
	Возврат СписокСпособовЗачета;
	
КонецФункции

#КонецОбласти

#КонецЕсли