// Модуль менеджера справочника "Смены"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОсновнаяСменаКомпании";
	Элемент.Код = "000000001";
	Элемент.Наименование = НСтр("ru = 'Основная смена работы компании'");
	
	Элемент.Интервалы = ТабличныеЧасти.Интервалы.Скопировать();
	
	НовыйИнтервал = Элемент.Интервалы.Добавить();
	НовыйИнтервал.ВидИнтервала = Справочники.ВидыИнтервалов.Работа;
	НовыйИнтервал.НачалоРабочегоВремени = '00010101090000';
	НовыйИнтервал.КонецРабочегоВремени = '00010101130000';
	РассчитатьПродолжительностьИнтервала(Элемент, НовыйИнтервал);
	
	НовыйИнтервал = Элемент.Интервалы.Добавить();
	НовыйИнтервал.ВидИнтервала = Справочники.ВидыИнтервалов.ОбеденныйПерерыв;
	НовыйИнтервал.НачалоРабочегоВремени = '00010101130000';
	НовыйИнтервал.КонецРабочегоВремени = '00010101140000';
	РассчитатьПродолжительностьИнтервала(Элемент, НовыйИнтервал);
	
	НовыйИнтервал = Элемент.Интервалы.Добавить();
	НовыйИнтервал.ВидИнтервала = Справочники.ВидыИнтервалов.Работа;
	НовыйИнтервал.НачалоРабочегоВремени = '00010101140000';
	НовыйИнтервал.КонецРабочегоВремени = '00010101180000';
	РассчитатьПродолжительностьИнтервала(Элемент, НовыйИнтервал);
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("Интервалы.Продолжительность");
	ОбязательныеРеквизиты.Добавить("Интервалы.ВидИнтервала");
	ОбязательныеРеквизиты.Добавить("ИнтервалыПредпраздничногоДня.Продолжительность");
	ОбязательныеРеквизиты.Добавить("ИнтервалыПредпраздничногоДня.ВидИнтервала");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнтервалы

// Рассчитывает продолжительность временного интервала для табличной части.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РассчитатьПродолжительностьИнтервала(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если
		ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("РасчетПродолжительности")
		И ПараметрыДействия.РасчетПродолжительности
	Тогда
		
		ПродолжительностьМаксимум = (КонецДня(Строка.НачалоРабочегоВремени) - Строка.НачалоРабочегоВремени);
		ПродолжительностьНовая = Строка.Продолжительность - '00010101';
		
		Если ПродолжительностьНовая > ПродолжительностьМаксимум Тогда
			
			Строка.Продолжительность = '00010101' + ПродолжительностьМаксимум;
			
		КонецЕсли;
		
		Строка.КонецРабочегоВремени = '00010101'
			+ (Строка.НачалоРабочегоВремени - '00010101')
			+ (Строка.Продолжительность - '00010101');
		
	Иначе
		
		// Установим окончание рабочего времени
		Если Строка.НачалоРабочегоВремени <= Строка.КонецРабочегоВремени Тогда
			
			Строка.Продолжительность = '00010101'+ (Строка.КонецРабочегоВремени - Строка.НачалоРабочегоВремени);
			
			// Если окончание - конец дня, то продолжительность будет всегда на 1 сек меньше чем надо,
			// поэтому считаем по другому.
			Если Строка.КонецРабочегоВремени = '00010101235959' Тогда 
				
				Строка.Продолжительность = Строка.Продолжительность + 1;
				
			КонецЕсли;
			
		Иначе
			
			Если Строка.КонецРабочегоВремени = '00010101' Тогда
				
				Строка.КонецРабочегоВремени = '00010101235959';
				РассчитатьПродолжительностьИнтервала(Объект, Строка, ПараметрыДействия);
				
			Иначе
				
				ПараметрыДействия.Вставить("РасчетПродолжительности",Истина);
				РассчитатьПродолжительностьИнтервала(Объект, Строка, ПараметрыДействия);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли