///////////////////////////////////////////////////////////////////////////////
// Модуль формы элемента справочника "Смены"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере

Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		УправлениеДиалогомНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект,"Интервалы");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект,"ИнтервалыПредпраздничногоДня");
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Смены");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнтервалы

&НаСервере
Процедура ИнтервалыНачалоРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.Интервалы.НайтиПоИдентификатору(Элементы.Интервалы.ТекущаяСтрока);
	Справочники.Смены.РассчитатьПродолжительностьИнтервала(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнтервалыНачалоРабочегоВремениПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ИнтервалыНачалоРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнтервалыНачалоРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры 

&НаСервере
Процедура ИнтервалыКонецРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.Интервалы.НайтиПоИдентификатору(Элементы.Интервалы.ТекущаяСтрока);
	Справочники.Смены.РассчитатьПродолжительностьИнтервала(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыКонецРабочегоВремениПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ИнтервалыКонецРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыКонецРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры 

&НаСервере
Процедура ИнтервалыПродолжительностьПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.Интервалы.НайтиПоИдентификатору(Элементы.Интервалы.ТекущаяСтрока);
	Справочники.Смены.РассчитатьПродолжительностьИнтервала(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнтервалыПродолжительностьПриИзменении(Элемент)

	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("РасчетПродолжительности",Истина);

	ИнтервалыПродолжительностьПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнтервалыПродолжительностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();

	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнтервалыПредпраздничногоДня

&НаСервере
Процедура ИнтервалыПредпраздничногоДняНачалоРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.ИнтервалыПредпраздничногоДня.НайтиПоИдентификатору(Элементы.ИнтервалыПредпраздничногоДня.ТекущаяСтрока);
	Справочники.Смены.РассчитатьПродолжительностьИнтервала(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнтервалыПредпраздничногоДняНачалоРабочегоВремениПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ИнтервалыПредпраздничногоДняНачалоРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнтервалыПредпраздничногоДняНачалоРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры 

&НаСервере
Процедура ИнтервалыПредпраздничногоДняКонецРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.ИнтервалыПредпраздничногоДня.НайтиПоИдентификатору(Элементы.ИнтервалыПредпраздничногоДня.ТекущаяСтрока);
	Справочники.Смены.РассчитатьПродолжительностьИнтервала(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыПредпраздничногоДняКонецРабочегоВремениПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ИнтервалыПредпраздничногоДняКонецРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнтервалыПредпраздничногоДняКонецРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ИнтервалыПредпраздничногоДняПродолжительностьПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.ИнтервалыПредпраздничногоДня.НайтиПоИдентификатору(Элементы.ИнтервалыПредпраздничногоДня.ТекущаяСтрока);
	Справочники.Смены.РассчитатьПродолжительностьИнтервала(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыПредпраздничногоДняПродолжительностьПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("РасчетПродолжительности",Истина);
	
	ИнтервалыПредпраздничногоДняПродолжительностьПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнтервалыПредпраздничногоДняПродолжительностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

// Процедура заполняет список выбора для поля ввода времени
//
// Параметры:
//	Список								- СписокЗначений	- Список выбора элемента формы
//	ВремяНачало							- Дата				- Время с которого формируется список
//	ДобавлятьПредставлениеДлительности	- Булево			- Признак добавления в список представления длительности.
//
&НаКлиенте
Процедура ЗаполнитьСписокВыбораВремени(Список, ВремяНачало = Неопределено, ДобавлятьПредставлениеДлительности = Ложь)
	
	Список.Очистить();
	ПустаяДата = Дата("00010101");
	ДобавлятьДлительность = (ДобавлятьПредставлениеДлительности И ТипЗнч(ВремяНачало) = Тип("Дата"));
	
	Если ДобавлятьДлительность Тогда
		// Если ВремяНачало содержит так же и дату
		ЗначениеВремяНачало = ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	Иначе
		ЗначениеВремяНачало = Неопределено
	КонецЕсли;
	
	ТекВремя = ?(ЗначениеВремяНачало = Неопределено, ПустаяДата, ЗначениеВремяНачало + 60 * 60);
	
	Пока НачалоДня(ТекВремя) <= НачалоДня(ПустаяДата) Цикл
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		
		Если ДобавлятьДлительность Тогда
			ПредставлениеПериодаВремени = ПолучитьПредставлениеПериодаВремени(ЗначениеВремяНачало, ТекВремя);
			Если ЗначениеЗаполнено(ПредставлениеПериодаВремени) Тогда
				ПредставлениеВремени = ПредставлениеВремени + " (" + ПредставлениеПериодаВремени + ")";
			КонецЕсли;
		КонецЕсли;
		
		Список.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + 60 * 60;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВыбораВремени()

// Функция возвращает представление периода времени (1,5 часа, 6 часов, 30 минут, ...).
//
// Параметры:
//  ВремяНачало    - Дата - Время начала
//  ВремяОкончание - Дата - Время окончания.
//
// Возвращаемое значение:
//  Строка - Представление времени.
//
&НаКлиенте
Функция ПолучитьПредставлениеПериодаВремени(ВремяНачало, ВремяОкончание)
	
	ПустаяДата = Дата("00010101");
	// На случай если время содержит так же и дату
	ЗначениеВремяНачало		= ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	ЗначениеВремяОкончание	= ПустаяДата + (ВремяОкончание - НачалоДня(ВремяОкончание));
	ВремяНачалоВМинутах		= Цел((ЗначениеВремяНачало - НачалоДня(ЗначениеВремяНачало)) / 60);
	ВремяОкончанияВМинутах	= Цел((ЗначениеВремяОкончание - НачалоДня(ЗначениеВремяОкончание)) / 60);
	РазницаВМинутах = ВремяОкончанияВМинутах - ВремяНачалоВМинутах;
	Если РазницаВМинутах <= 0 Тогда
		Возврат "";
	КонецЕсли;
	// 1 минута
	// 2 - 4 минуты
	// 5 и далее - минут
	// 1 час
	// 2 - 4 часа
	// 5 часов
	// 5,5 часов
	Если РазницаВМинутах < 60 Тогда
		ВремяСтрокой = Формат(РазницаВМинутах, "ЧДЦ=0; ЧН=0; ЧГ=");
		Если РазницаВМинутах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'минута'");
		ИначеЕсли РазницаВМинутах <= 4 Тогда
			ПредставлениеВремя = НСтр("ru = 'минуты'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'минут'");
		КонецЕсли;
	Иначе
		РазницаВЧасах = РазницаВМинутах / 60;
		Если РазницаВЧасах = Цел(РазницаВМинутах / 60) Тогда
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=0; ЧРД=,; ЧН=0; ЧГ=");
		Иначе
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=1; ЧРД=,; ЧН=0; ЧГ=");
		КонецЕсли;
		Если РазницаВЧасах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'час'");
		ИначеЕсли РазницаВЧасах <= 4 Тогда
			ПредставлениеВремя = НСтр("ru = 'часа'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'часов'");
		КонецЕсли;
	КонецЕсли;
	Возврат ВремяСтрокой + " " + ПредставлениеВремя;
	
КонецФункции // ПолучитьПредставлениеПериодаВремени()

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

