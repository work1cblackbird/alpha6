// Модуль менеджера справочника "Подтверждающие документы"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	// TODO: Заполнить список документов оснований и команд создания

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Справочники.ПодтверждающиеДокументы);

КонецФункции

#КонецОбласти

// Возвращает последний документ переданного вида для объекта (организации, контрагента, сотрудника,
// контактного лица, номенклатуры).
//
// Параметры:
//  Объект       - СправочникСсылка - Владелец подтверждающего документа
//  ВидДокумента - ПеречислениеСсылка - Вид подтверждающего документа.
//
// Возвращаемое значение:
//  СправочникСсылка - Текущий подтверждающий документ.
//
Функция ПолучитьПодтверждающийДокументОбъектаПоВиду(Объект, ВидДокумента = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПодтверждающиеДокументы.Ссылка КАК ПодтверждающийДокумент
	|ИЗ
	|	Справочник.ПодтверждающиеДокументы КАК ПодтверждающиеДокументы
	|ГДЕ
	|	ПодтверждающиеДокументы.Владелец = &Объект";
	
	Если ВидДокумента <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И ПодтверждающиеДокументы.ВидПодтверждающегоДокумента = &ВидПодтверждающегоДокумента"
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	И ПодтверждающиеДокументы.Устаревший = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодтверждающиеДокументы.Текущий УБЫВ,
	|	ПодтверждающиеДокументы.ДатаВыдачи УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Объект",                      Объект);
	Запрос.УстановитьПараметр("ВидПодтверждающегоДокумента", ВидДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.ПодтверждающийДокумент, Справочники.ПодтверждающиеДокументы.ПустаяСсылка());
	
КонецФункции // ПолучитьПодтверждающийДокументОбъектаПоВиду()

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти
  
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Функция перевод числа в пропись.
//
// Параметры:
//  Количество - Число - Переданное число.
//
// Возвращаемое значение:
//  Строка     - Число прописью.
//
Функция КоличествоПрописью(Количество)
	
	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);
	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;
	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);
	
КонецФункции // КоличествоПрописью()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("ВидПодтверждающегоДокумента");  
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	Если НЕ Объект.ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Устав Тогда
			
		ОбязательныеРеквизиты.Добавить("Номер");
		ОбязательныеРеквизиты.Добавить("ДатаВыдачи");
		ОбязательныеРеквизиты.Добавить("Владелец");
		ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
		ОбязательныеРеквизиты.Добавить("Товары.Количество"); 
		
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Обязательные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события формирует наименование.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Функция СформироватьНаименованиеПоУмолчанию(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Наименование = "";
	Если ЗначениеЗаполнено(Объект.ВидПодтверждающегоДокумента)И Объект.ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Устав Тогда
		Наименование =СокрЛП(Объект.ВидПодтверждающегоДокумента);
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидПодтверждающегоДокумента)
		И ЗначениеЗаполнено(Объект.ДатаВыдачи) Тогда
		
		СтрокаВыдачи = "";
		Если Объект.ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Доверенность
			ИЛИ Объект.ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Лицензия
			ИЛИ Объект.ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Справка Тогда
			
			СтрокаВыдачи = " выдана " + Формат(Объект.ДатаВыдачи,"ДФ=dd.MM.yy");
		ИначеЕсли Объект.ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Удостоверение Тогда
			СтрокаВыдачи = " выдано " + Формат(Объект.ДатаВыдачи,"ДФ=dd.MM.yy");
		Иначе
			СтрокаВыдачи = " выдан " + Формат(Объект.ДатаВыдачи,"ДФ=dd.MM.yy");
		КонецЕсли;
		
		Наименование = СокрЛП(Объект.ВидПодтверждающегоДокумента)
						+ " " + СокрЛП(Объект.Серия) + " № " + СокрЛП(Объект.Номер) + СтрокаВыдачи;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции // СформироватьНаименованиеПоУмолчанию()

// Обработчик события возникающего при изменении данных реквизита "Устаревший".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура УстаревшийПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Обновляем отображение элементов формы
	Если Объект.Устаревший = Истина Тогда
		Объект.Текущий = Ложь;
	Иначе
		Объект.Текущий = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстаревшийПриИзмененииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Текущий".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ТекущийПриИзмененииНаСервере(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Обновляем отображение элементов формы
	Если Объект.Текущий = Истина Тогда
		Объект.Устаревший = Ложь;
	Иначе
		Объект.Устаревший = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТекущийПриИзмененииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	Если ТипЗнч(Строка.Номенклатура) = ТипЗнч("Строка") Тогда
		Строка.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		Строка.Коэффициент = 0;
		Строка.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
		ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
			
		// Проверим, имеют ли смысл дальнейшие действия
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Справочник.ПодтверждающиеДокументы",
		"ПФ_MXL_М2",
		НСтр("ru = 'Доверенность М2'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ВидПодтверждающегоДокумента", Перечисления.ВидыДокументов.Доверенность);	
		
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Справочник.ПодтверждающиеДокументы",
		"М2А",
		НСтр("ru = 'Доверенность М2-а'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ВидПодтверждающегоДокумента", Перечисления.ВидыДокументов.Доверенность);
		
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Справочник.ПодтверждающиеДокументы",
		"ПФ_MXL_Договор",
		НСтр("ru = 'Договор'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ВидПодтверждающегоДокумента", Перечисления.ВидыДокументов.ПТС);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Справочник.ПодтверждающиеДокументы",
		"ПФ_MXL_РегистрационныйЗнак",
		НСтр("ru = 'Регистрационный знак'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ВидПодтверждающегоДокумента", Перечисления.ВидыДокументов.ПТС);
		
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Справочник.ПодтверждающиеДокументы",
		"ПФ_MXL_ПТС",
		НСтр("ru = 'Паспорт транспортного средства'"),
		СсылкаНаДокумент,
		"УправлениеПечатьюАвтосалонКлиент.ПечатьПаспортТехническогоСредства");
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ВидПодтверждающегоДокумента", Перечисления.ВидыДокументов.ПТС);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_М2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_М2",
															"М-2а",
															ПечатьДоверенностьМ2(МассивОбъектов, ОбъектыПечати, "ПечатьДоверенностьМ2"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М2А") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"М2А",
															"М-2а",
															ПечатьДоверенностьМ2(МассивОбъектов, ОбъектыПечати, "ПечатьДоверенностьМ2А"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Договор") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_Договор",
															"Договор",
															ПечатьДоговор(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РегистрационныйЗнак") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_РегистрационныйЗнак",
															"РегистрационныйЗнак",
															ПечатьРегистрационныйЗнак(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПТС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПТС",
															"ПТС",
															ПечатьПТС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
														КонецЕсли;
														
КонецПроцедуры // Печать()

// Процедура печати доверенности.
//
// Параметры:
//  ИмяБланка - Строка - Имя документа для печати.
//
Функция ПечатьДоверенностьМ2(МассивОбъектов, ОбъектыПечати, ИмяБланка) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПодтверждающиеДокументы_ДоверенностьМ2";
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		// новый документ должен быть на отдельной странице
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		Если Документ.ВидПодтверждающегоДокумента <> Перечисления.ВидыДокументов.Доверенность Тогда
			Продолжить;
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ПодтверждающиеДокументы.ПФ_MXL_М2");
			
		Поставщик = Документ.Контрагент;
		
		// часть для отреза
		Если ИмяБланка = "ПечатьДоверенностьМ2" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Отрез");
			ОбластьМакета.Параметры.Заполнить(Документ);
			Если ТипЗнч(Документ.Владелец)=Тип("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(Документ.Владелец)=Тип("СправочникСсылка.Организации") Тогда
				ОбластьМакета.Параметры.ВладелецПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Владелец);
			ИначеЕсли ТипЗнч(Документ.Владелец)=Тип("СправочникСсылка.Сотрудники") Тогда
				ОбластьМакета.Параметры.ВладелецПредставление = ?(НЕ ЗначениеЗаполнено(Документ.Владелец.Должность),"",УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Владелец.Должность)+", ")+УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Владелец);
			Иначе
				ОбластьМакета.Параметры.Владелец=Неопределено;
				ОбластьМакета.Параметры.ВладелецПредставление=Неопределено;
			КонецЕсли;
			ОбластьМакета.Параметры.Поставщик = Поставщик;
			ОбластьМакета.Параметры.ПоставщикПредставление=УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Поставщик);
			
			// РеквизитыНаряда
			ТабличныйДокумент.Вывести(ОбластьМакета);
			НазваниеФормы = НСтр("ru = 'Типовая межотраслевая форма № М-2'");
		Иначе
			НазваниеФормы = НСтр("ru = 'Типовая межотраслевая форма № М-2а'");
		КонецЕсли;
		
		// Шапка документа
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Документ);
		ОбластьМакета.Параметры.НазваниеФормы            = НазваниеФормы;
		ОбластьМакета.Параметры.Организация              = Документ.Организация;
		МассивДокументов = Новый Массив();
		МассивДокументов.Добавить(Документ.Организация);
		ЮридическийАдресТаблица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивДокументов, Перечисления.ТипыКонтактнойИнформации.Адрес,Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,ТекущаяДатаСеанса());
		ЮридическийАдрес = "";
		Если ЗначениеЗаполнено(ЮридическийАдресТаблица) Тогда
			ЮридическийАдрес = ", " + ЮридическийАдресТаблица[0].Представление;
		КонецЕсли;
		ОбластьМакета.Параметры.ОрганизацияПредставление	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация) + ", ИНН " + ПараметрыСеанса.Организация.ИНН + ЮридическийАдрес;
		ОбластьМакета.Параметры.ОрганизацияКодПоОКПО = Документ.Организация.КодПоОКПО;
		ОбластьМакета.Параметры.РеквизитыПотребителя = УправлениеПечатьюПлатформа.
														ПолучитьНаименованиеСправочника(Документ.Организация) + ЮридическийАдрес;
		ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Документ.Организация);
		ОбластьМакета.Параметры.РасчетныйСчет = ОсновнойБанковскийСчет;
		ОбластьМакета.Параметры.РеквизитыСчета = "р/с" + " " + ОсновнойБанковскийСчет.НомерСчета + " " + НСтр("ru = 'в банке'")
												+ " " + УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОсновнойБанковскийСчет.Банк)
												+ ", " + "БИК" + " " + ОсновнойБанковскийСчет.Банк.Код;
		Если ТипЗнч(Документ.Владелец)=Тип("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(Документ.Владелец)=Тип("СправочникСсылка.Организации") Тогда
			ОбластьМакета.Параметры.Должность             = Неопределено;
			ОбластьМакета.Параметры.ВладелецПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Владелец);
		ИначеЕсли ТипЗнч(Документ.Владелец)=Тип("СправочникСсылка.Сотрудники") Тогда
			Должность = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Владелец.Должность);
			ОбластьМакета.Параметры.Должность             = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Должность,3,Документ.Владелец.Должность);
			ВладелецПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Владелец);
			ОбластьМакета.Параметры.ВладелецПредставление = СклонениеПредставленийОбъектов.ПросклонятьФИО(ВладелецПредставление,3,Документ.Владелец);
		Иначе
			ОбластьМакета.Параметры.Владелец=Неопределено;
			ОбластьМакета.Параметры.ВладелецПредставление=Неопределено;
		КонецЕсли;
		
		// Заполним по указанному паспорту
		Если ЗначениеЗаполнено(Документ.ДокументДоверенности) Тогда
			ОбластьМакета.Параметры.ПаспортСерия      = Документ.ДокументДоверенности.Серия;
			ОбластьМакета.Параметры.ПаспортНомер      = Документ.ДокументДоверенности.Номер;
			ОбластьМакета.Параметры.ПаспортВыдан      = Документ.ДокументДоверенности.КемВыдан;
			ОбластьМакета.Параметры.ПаспортДатаВыдачи = Документ.ДокументДоверенности.ДатаВыдачи;
		Иначе
			// подставим первый попавшийся паспорт
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
						 |	ПодтверждающиеДокументы.Серия,
						 |	ПодтверждающиеДокументы.Номер,
						 |	ПодтверждающиеДокументы.КемВыдан,
						 |	ПодтверждающиеДокументы.ДатаВыдачи
						 |ИЗ
						 |	Справочник.ПодтверждающиеДокументы КАК ПодтверждающиеДокументы
						 |ГДЕ
						 |	ПодтверждающиеДокументы.Владелец = &Владелец
						 |	И ПодтверждающиеДокументы.ВидПодтверждающегоДокумента = &ВидПодтверждающегоДокумента
						 |	И ПодтверждающиеДокументы.Устаревший = ЛОЖЬ
						 |
						 |УПОРЯДОЧИТЬ ПО
						 |	ПодтверждающиеДокументы.Текущий";
			Запрос.УстановитьПараметр("Владелец",Документ.Владелец);
			Запрос.УстановитьПараметр("ВидПодтверждающегоДокумента",Перечисления.ВидыДокументов.Паспорт);
			Выборка=Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ОбластьМакета.Параметры.ПаспортСерия      = Выборка.Серия;
				ОбластьМакета.Параметры.ПаспортНомер      = Выборка.Номер;
				ОбластьМакета.Параметры.ПаспортВыдан      = Выборка.КемВыдан;
				ОбластьМакета.Параметры.ПаспортДатаВыдачи = Выборка.ДатаВыдачи;
			КонецЕсли; 
		КонецЕсли;
		
		ОбластьМакета.Параметры.Поставщик = Поставщик;
		Представление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Поставщик);
		Если Поставщик.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			ОбластьМакета.Параметры.ПоставщикПредставление = СклонениеПредставленийОбъектов.ПросклонятьФИО(Представление, 2, Поставщик);
		Иначе
			ОбластьМакета.Параметры.ПоставщикПредставление= Представление;
		КонецЕсли;
		
		// РеквизитыДокументаНаПолучение
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывод шапки таблицы
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывод табличной части
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для каждого СтрокаТоваров Из Документ.Товары Цикл
			ОбластьМакета.Параметры.Заполнить(СтрокаТоваров);
			ОбластьМакета.Параметры.КоличествоПрописью = Формат(СтрокаТоваров.Количество,"ЧДЦ=3; ЧН=0,00") + " (" + КоличествоПрописью(СтрокаТоваров.Количество) + ")";
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	
		// Вывод подвала
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,Перечисления.ВидыОбъектовСведений.Руководитель,,Документ.Организация);
		ОбластьМакета.Параметры.Заполнить(Руководитель);
		ГлавныйБухгалтер = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,Перечисления.ВидыОбъектовСведений.ГлавныйБухгалтер,,Документ.Организация);
		ОбластьМакета.Параметры.Заполнить(ГлавныйБухгалтер);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьДоверенностьМ2()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаСобытийСправочникаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Формирует печатную форму "Договор"
Функция ПечатьДоговор(МассивОбъектов, ОбъектыПечати) Экспорт
	
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	
	Для Каждого Документ ИЗ МассивОбъектов Цикл
		
		Если Документ.ВидПодтверждающегоДокумента <> Перечисления.ВидыДокументов.ПТС Тогда
			Продолжить;
		КонецЕсли;
		
		// новый документ должен быть на дотдельной странице
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Документ.Владелец) ИЛИ ТипЗнч(Документ.Владелец)<>Тип("СправочникСсылка.Автомобили") Тогда
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru='Не выбран автомобиль-владелец'"));
			Продолжить;
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ПодтверждающиеДокументы.ПФ_MXL_Договор");
		ОбластьМакета = Макет.ПолучитьОбласть("Страница1");
		
		// Получим ФИО директора
		СтруктураОтбора=Новый Структура("Организация,Объект",Документ.Организация,Перечисления.ВидыОбъектовСведений.Руководитель);
		СтруктураСведений=РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(Документ.ДатаВыдачи,СтруктураОтбора);
		Руководитель=СтруктураСведений.Значение;
		ФИОРуководитель = ?(НЕ ЗначениеЗаполнено(Руководитель),"",Руководитель.Наименование);
		
		ОбластьМакета.Параметры.ОрганизацияНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация);
		ОбластьМакета.Параметры.Договор = "КУПЛИ-ПРОДАЖИ АВТОМОБИЛЯ от "+ Формат(Документ.ДатаВыдачи,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.Организация = "        " + УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация) + ", именуемое в дальнейшем  """"ПРОДАВЕЦ"""" в лице " +
			ФИОРуководитель + ", действующего на основании Устава, с одной стороны и " + УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент) +
			" (паспорт серии " + Документ.ДокументДоверенности.Серия + " № "+ Документ.ДокументДоверенности.Номер + " выдан " + Документ.ДокументДоверенности.КемВыдан + " " + Формат(Документ.ДокументДоверенности.ДатаВыдачи,"ДФ='dd MMMM yyyy'") + ", именуемый в дальнейшем """"ПОКУПАТЕЛЬ"""", заключили настоящий Договор о нижеследующем:";
		ОбластьМакета.Параметры.СтрокаСуммы = "          1.7. оплатил стоимость автомобиля в размере " + Строка(Документ.СуммаДокумента) + " " + Документ.ВалютаДокумента.Наименование;
		ОбластьМакета.Параметры.Автомобиль = "          1.5. продал Покупателю один новый автомобиль, модель " + УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Владелец.Модель) + " № кузова " + Документ.Владелец.НомерКузова + " № двигателя " + Документ.Владелец.НомерДвигателя + " цвет " + Документ.Владелец.Цвет + " с установленным сроком гарантии 12 месяцев (или 20 тыс. км пробега).";
		ОбластьМакета.Параметры.ФирмаОбязуется = "2." + Документ.Организация.НаименованиеПолное + " ОБЯЗУЕТСЯ:";
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Страница2");
		
		МассивДокументовОрганизации = Новый Массив();
		МассивДокументовОрганизации.Добавить(Документ.Организация);
		ОбластьМакета.Параметры.ОрганизацияНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация);
		ЮридическийАдрессТаблица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивДокументовОрганизации, Перечисления.ТипыКонтактнойИнформации.Адрес,Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
		ЮридическийАдрессОрганизации = "";
		Если ЗначениеЗаполнено(ЮридическийАдрессТаблица) Тогда
			ЮридическийАдрессОрганизации = ", " + ЮридическийАдрессТаблица[0].Представление;
		КонецЕсли;
		ОбластьМакета.Параметры.ОрганизацияЮридическийАдрес = ЮридическийАдрессОрганизации;
		ОбластьМакета.Параметры.ОрганизацияИНН = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация,Новый Структура("ИНН","ИНН "));
		ОбластьМакета.Параметры.СчетОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация,Новый Структура("БанковскийСчет,Банк,БИК,КоррСчет","р/с ","в банке ","БИК ","к/с "));
		
		МассивДокументовКонтрагента = Новый Массив();
		МассивДокументовКонтрагента.Добавить(Документ.Контрагент);
		ЮридическийАдрессТаблица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивДокументовКонтрагента, Перечисления.ТипыКонтактнойИнформации.Адрес,Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
		ЮридическийАдрессКонтрагента = "";
		Если ЗначениеЗаполнено(ЮридическийАдрессТаблица) Тогда
			ЮридическийАдрессКонтрагента = ", " + ЮридическийАдрессТаблица[0].Представление;
		КонецЕсли;
		ОбластьМакета.Параметры.КонтрагентНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);
		ОбластьМакета.Параметры.КонтрагентЮридическийАдрес = ЮридическийАдрессКонтрагента;
		ОбластьМакета.Параметры.КонтрагентИНН = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент,Новый Структура("ИНН","ИНН "));
		ОбластьМакета.Параметры.СчетКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент,Новый Структура("БанковскийСчет,Банк,БИК,КоррСчет","р/с ","в банке ","БИК ","к/с "));
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьДоговор()

// Формирует печатную форму "РегистрационныйЗнак"
Функция ПечатьРегистрационныйЗнак(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	
	Для Каждого Документ ИЗ МассивОбъектов Цикл
		
		Если Документ.ВидПодтверждающегоДокумента <> Перечисления.ВидыДокументов.ПТС Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Документ.Владелец) ИЛИ ТипЗнч(Документ.Владелец)<>Тип("СправочникСсылка.Автомобили") Тогда
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru='Не выбран автомобиль-владелец'"));
			Продолжить;
		КонецЕсли;
	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ПодтверждающиеДокументы.ПФ_MXL_РегистрационныйЗнак");
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечати");
		НомерДляПечати=УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		ОбластьМакета.Параметры.Модель = Документ.Владелец.Модель.Наименование;
		ОбластьМакета.Параметры.VIN = Документ.Владелец.VIN;
		ОбластьМакета.Параметры.НомерШасси = Документ.Владелец.НомерШасси;
		ОбластьМакета.Параметры.Цвет = Документ.Владелец.Цвет.Наименование;
		ОбластьМакета.Параметры.Производитель = Документ.Владелец.Модель.Производитель.Наименование;
		ОбластьМакета.Параметры.ДокументНаСобственность="справка-счет";
		
		ОбластьМакета.Параметры.ГодВыпуска = Формат(Документ.Владелец.ГодВыпуска,"ДФ=yyyy");
		ОбластьМакета.Параметры.НомерДвигателя = Документ.Владелец.НомерДвигателя;
		ОбластьМакета.Параметры.НомерКузова = Документ.Владелец.НомерКузова;
		ОбластьМакета.Параметры.КатегорияТС = "С";
		
		ОбластьМакета.Параметры.СерияПТС = Документ.Серия;
		ОбластьМакета.Параметры.НомерПТС = Документ.Номер;
		ВременнаяДата = Формат(Документ.ДатаВыдачи,"ДЛФ=DD");
		ОбластьМакета.Параметры.СтрокаЧислоДатаПТС = Сред(ВременнаяДата,1,Найти(ВременнаяДата," ")-1);
		ВременнаяДата = Сред(ВременнаяДата,Найти(ВременнаяДата," ")+1,СтрДлина(ВременнаяДата));
		ОбластьМакета.Параметры.СтрокаМесяцДатаПТС = Сред(ВременнаяДата,1,Найти(ВременнаяДата," ")-1);
		ВременнаяДата = Сред(ВременнаяДата,Найти(ВременнаяДата," ")+1,СтрДлина(ВременнаяДата));
		ОбластьМакета.Параметры.СтрокаГодДатаПТС = Сред(ВременнаяДата,1,Найти(ВременнаяДата,"г")-2);
		ОбластьМакета.Параметры.Владелец = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);
		
		МассивДокументовКонтрагента = Новый Массив();
		МассивДокументовКонтрагента.Добавить(Документ.Контрагент);
		ЮридическийАдрессТаблица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивДокументовКонтрагента, Перечисления.ТипыКонтактнойИнформации.Адрес,Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
		ЮридическийАдрессКонтрагента = "";
		Если ЗначениеЗаполнено(ЮридическийАдрессТаблица) Тогда
			ЮридическийАдрессКонтрагента = ", " + ЮридическийАдрессТаблица[0].Представление;
		КонецЕсли;
		ОбластьМакета.Параметры.АдресВладельца = ЮридическийАдрессКонтрагента;
		
		ОбластьМакета.Параметры.НомерДок = Документ.НомерБланка;
		ВременнаяДата = Формат(Документ.ДатаВыдачи,"ДЛФ=DD");
		ОбластьМакета.Параметры.СтрокаЧислоДатаДок = Сред(ВременнаяДата,1,Найти(ВременнаяДата," ")-1);
		ВременнаяДата = Сред(ВременнаяДата,Найти(ВременнаяДата," ")+1,СтрДлина(ВременнаяДата));
		ОбластьМакета.Параметры.СтрокаМесяцДатаДок = Сред(ВременнаяДата,1,Найти(ВременнаяДата," ")-1);
		ВременнаяДата = Сред(ВременнаяДата,Найти(ВременнаяДата," ")+1,СтрДлина(ВременнаяДата));
		ОбластьМакета.Параметры.СтрокаГодДатаДок = Сред(ВременнаяДата,1,Найти(ВременнаяДата,"г")-2);
		ОбластьМакета.Параметры.Организация = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация);
		
		ОбластьМакета.Параметры.СтрокаЧислоДатаВыдачи = Сред(ВременнаяДата,1,Найти(ВременнаяДата," ")-1);
		ВременнаяДата = Сред(ВременнаяДата,Найти(ВременнаяДата," ")+1,СтрДлина(ВременнаяДата));
		ОбластьМакета.Параметры.СтрокаМесяцДатаВыдачи = Сред(ВременнаяДата,1,Найти(ВременнаяДата," ")-1);
		ВременнаяДата = Сред(ВременнаяДата,Найти(ВременнаяДата," ")+1,СтрДлина(ВременнаяДата));
		ОбластьМакета.Параметры.СтрокаГодДатаВыдачи = Сред(ВременнаяДата,1,Найти(ВременнаяДата,"г")-2);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьРегистрационныйЗнак()

// Формирует печатную форму "ПТС"
Функция ПечатьПТС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ДокументРеализации=Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	
	Для Каждого Документ ИЗ МассивОбъектов Цикл
		
		Если Документ.ВидПодтверждающегоДокумента <> Перечисления.ВидыДокументов.ПТС Тогда
			Продолжить;
		КонецЕсли;
		
		// новый документ должен быть на дотдельной странице
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
	
		Если НЕ ЗначениеЗаполнено(Документ.Владелец) ИЛИ ТипЗнч(Документ.Владелец)<>Тип("СправочникСсылка.Автомобили") Тогда
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru='Не указан автомобиль для печати ПТС.'"));
			Продолжить;
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ПодтверждающиеДокументы.ПФ_MXL_ПТС");
		НомерДляПечати=УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ДатаДляПечати=Документ.ДатаВыдачи;
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечати");
		
		МассивСекций = Новый Массив;
		Если ЗначениеЗаполнено(ПараметрыПечати) И ТипЗнч(ПараметрыПечати)=Тип("Структура") Тогда
			ПараметрыПечати.Свойство("МассивСекций",МассивСекций);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(МассивСекций) ИЛИ МассивСекций.Количество()=0 Тогда
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru='Не указана секция для печати ПТС.'"));
			Продолжить;
		КонецЕсли;
		
		Контрагент = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Документ.Владелец, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,ДатаДляПечати);
		Инд = 1;
		
		ДоговорРеализации  = Неопределено;
		ДоговорПоступления = Неопределено;
		ДатаРеализации     = Неопределено;
		ДатаПоступления    = Неопределено;
		Контрагент         = Неопределено;
		Организация        = Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Автомобиль",Документ.Владелец);
		Запрос.Текст = "ВЫБРАТЬ
					   |	РеализацияАвтомобилей.ДоговорВзаиморасчетов,
					   |	РеализацияАвтомобилей.Дата КАК Дата,
					   |	РеализацияАвтомобилей.Контрагент
					   |ИЗ
					   |	Документ.РеализацияАвтомобилей КАК РеализацияАвтомобилей
					   |ГДЕ
					   |	РеализацияАвтомобилей.Автомобили.Автомобиль = &Автомобиль
					   |	И &ДопУсловие
					   |	И РеализацияАвтомобилей.Проведен = ИСТИНА
					   |	И РеализацияАвтомобилей.ПометкаУдаления = ЛОЖЬ
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	Дата УБЫВ";
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДопУсловие","РеализацияАвтомобилей.Ссылка = &ДокументРеализации");
			Запрос.УстановитьПараметр("ДокументРеализации",ДокументРеализации);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДопУсловие","1=1");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			Контрагент = Выборка.Контрагент;
			ДатаРеализации = Выборка.Дата;
			ДоговорРеализации = Выборка.ДоговорВзаиморасчетов;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Автомобиль",Документ.Владелец);
		Запрос.Текст = "ВЫБРАТЬ
					   |	ПоступлениеАвтомобилей.ДоговорВзаиморасчетов,
					   |	ПоступлениеАвтомобилей.Дата КАК Дата,
					   |	ПоступлениеАвтомобилей.Организация
					   |ИЗ
					   |	Документ.ПоступлениеАвтомобилей КАК ПоступлениеАвтомобилей
					   |ГДЕ
					   |	ПоступлениеАвтомобилей.Автомобили.Автомобиль = &Автомобиль
					   |	И ПоступлениеАвтомобилей.Проведен = ИСТИНА
					   |	И ПоступлениеАвтомобилей.ПометкаУдаления = ЛОЖЬ
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	Дата УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			Организация = Выборка.Организация;
			ДатаПоступления = Выборка.Дата;
			ДоговорПоступления = Выборка.ДоговорВзаиморасчетов;
		КонецЕсли;
		
		Для Каждого СекцияПТС ИЗ МассивСекций Цикл
			Если СекцияПТС.Значение = "СекцияДилера" Тогда
				ОбластьМакета.Параметры["Собственник"+Инд]             =  УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация);
				МассивДокументовОрганизации = Новый Массив();
				МассивДокументовОрганизации.Добавить(Документ.Организация);
				ЮридическийАдрессТаблица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивДокументовОрганизации, Перечисления.ТипыКонтактнойИнформации.Адрес,Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
				ЮридическийАдрессОрганизации = "";
				Если ЗначениеЗаполнено(ЮридическийАдрессТаблица) Тогда
					ЮридическийАдрессОрганизации = ", " + ЮридическийАдрессТаблица[0].Представление;
				КонецЕсли;
				ОбластьМакета.Параметры["Адрес"+Инд]                   = ЮридическийАдрессОрганизации;
				ОбластьМакета.Параметры["ДатаПродажи"+Инд]             = Формат(ДатаПоступления,"ДФ='dd ММММ yyyy'");
				ОбластьМакета.Параметры["ДокументНаСобственность"+Инд] = ДоговорПоступления;
			ИначеЕсли СекцияПТС.Значение = "СекцияПокупателя" Тогда
				ОбластьМакета.Параметры["Собственник"+Инд]             = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);
				МассивДокументовКонтрагента = Новый Массив();
				МассивДокументовКонтрагента.Добавить(Документ.Контрагент);
				ФактическийАдрессТаблица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивДокументовКонтрагента, Перечисления.ТипыКонтактнойИнформации.Адрес,Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
				ФактическийАдрессКонтрагента = "";
				Если ЗначениеЗаполнено(ФактическийАдрессТаблица) Тогда
					ФактическийАдрессКонтрагента = ", " + ФактическийАдрессТаблица[0].Представление;
				КонецЕсли;
				ОбластьМакета.Параметры["Адрес"+Инд]                   = ФактическийАдрессКонтрагента;
				ОбластьМакета.Параметры["ДатаПродажи"+Инд]             = Формат(ДатаРеализации,"ДФ='dd ММММ yyyy'");
				ОбластьМакета.Параметры["ДокументНаСобственность"+Инд] = ДоговорРеализации;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПТС()

#КонецОбласти

#КонецОбласти

#КонецЕсли