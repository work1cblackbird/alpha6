// Модуль объекта справочника "Подтверждающие документы"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоКода(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоКода()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
    // Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;

	
	Если НЕ ЗначениеЗаполнено(ВидПодтверждающегоДокумента) Тогда
		ТипВладельца = ТипЗнч(Владелец);
		Если ТипВладельца = Тип("СправочникСсылка.Организации") Тогда
			ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Лицензия;
		ИначеЕсли ТипВладельца = Тип("СправочникСсылка.Сотрудники") Тогда
			ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Паспорт;
		ИначеЕсли ТипВладельца = Тип("СправочникСсылка.Номенклатура") Тогда
			ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Сертификат; 
		ИначеЕсли ТипВладельца = Тип("СправочникСсылка.Автомобили") Тогда
			ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.ПТС; 
		КонецЕсли;
	КонецЕсли;
	
	ДатаВыдачи = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Дата", Дата(1, 1, 1));
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ПараметрыСеанса.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) И НЕ ЗначениеЗаполнено(ДокументДоверенности) Тогда
		
		// Получим паспорт контрагента
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПодтверждающиеДокументы.Ссылка КАК ПаспортКонтрагента
		|ИЗ
		|	Справочник.ПодтверждающиеДокументы КАК ПодтверждающиеДокументы
		|ГДЕ
		|	ПодтверждающиеДокументы.Владелец = &Контрагент
		|	И ПодтверждающиеДокументы.ВидПодтверждающегоДокумента = &Паспорт
		|	И ПодтверждающиеДокументы.Текущий = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодтверждающиеДокументы.ДатаВыдачи УБЫВ";
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Запрос.УстановитьПараметр("Паспорт",Перечисления.ВидыДокументов.Паспорт);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ДокументДоверенности = Выборка.ПаспортКонтрагента;
		КонецЕсли;
		
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(Лицензия) Тогда
		
		// Получим лицензию
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПодтверждающиеДокументы.Ссылка КАК Лицензия
		|ИЗ
		|	Справочник.ПодтверждающиеДокументы КАК ПодтверждающиеДокументы
		|ГДЕ
		|	ПодтверждающиеДокументы.Владелец = &Организация
		|	И ПодтверждающиеДокументы.ВидПодтверждающегоДокумента = &Лицензия
		|	И ПодтверждающиеДокументы.Текущий = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодтверждающиеДокументы.ДатаВыдачи УБЫВ";
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("Лицензия",Перечисления.ВидыДокументов.Лицензия);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Лицензия = Выборка.Лицензия;
		КонецЕсли;
		
	КонецЕсли;
	
	Наименование = Справочники.ПодтверждающиеДокументы.СформироватьНаименованиеПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - СправочникОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Номер = Неопределено;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи объекта.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Доверенность Тогда
		
		// Обработаем проверку заполнения владельца приватно
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Владелец"));
		
		Если НЕ ЗначениеЗаполнено(Владелец) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Поле ""Кому выдана"" на заполнено'"));
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим корректность заполнения количества для серийного товара
	ОбработкаСобытийОбъектаСервер.ПроверитьКоличествоСерийнойНоменклатуры(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередЗаписью(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередЗаписью(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПодтверждающегоДокумента<>Перечисления.ВидыДокументов.Доверенность Тогда
		Если Товары.Количество()>0 Тогда
			Товары.Очистить();
		КонецЕсли; 
	КонецЕсли;
	Если ВидПодтверждающегоДокумента <> Перечисления.ВидыДокументов.Доверенность 
		И ВидПодтверждающегоДокумента <> Перечисления.ВидыДокументов.ПТС
		И ВидПодтверждающегоДокумента <> Перечисления.ВидыДокументов.ЭлектронныйПТС Тогда
		Контрагент 				= Неопределено;
		ДокументДоверенности 	= Неопределено;
	КонецЕсли;
	
	ТипВладельца = ТипЗнч(Владелец);
	Если ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.ВидНаЖительствоИностранногоГражданина 
		И НЕ (ТипВладельца = Тип("СправочникСсылка.Сотрудники") ИЛИ (ТипВладельца = Тип("СправочникСсылка.Контрагенты") И Владелец.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо)) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Ввод подтверждающего документа с видом ""%1"" предназначен только для сотрудников и контрагентов с типом ""Частное лицо"".'"),
				ВидПодтверждающегоДокумента
			),
			ЭтотОбъект,
			,
			, 
			Отказ
		);
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриЗаписи(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Почистим регистры сведений от удаляемого объекта
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Автомобили.Период КАК Период,
	               |	Автомобили.Автомобиль КАК Автомобиль,
	               |	Автомобили.ВидЗначения КАК ВидЗначения
	               |ИЗ
	               |	РегистрСведений.Автомобили КАК Автомобили
	               |ГДЕ
	               |	Автомобили.Значение = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.Автомобили.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры // ПередУдалением()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщику(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
		
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Доверенность;

	Владелец = ДанныеЗаполнения.Автор.Сотрудник; 
	
	ДокументДоверенности = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Владелец,
			Перечисления.ВидыДокументов.Паспорт);

	Контрагент = ДанныеЗаполнения.Контрагент;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуТовары.Количество КАК Количество,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПоставщикуТовары.Коэффициент КАК Коэффициент,
	|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &ДокументОснование
	|	И ЗаказПоставщикуТовары.Количество > 0";
	
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;	
		
КонецФункции
	
// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Доверенность;

	Владелец = ДанныеЗаполнения.Автор.Сотрудник;  
	
	ДокументДоверенности = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Владелец,
			Перечисления.ВидыДокументов.Паспорт);

	Контрагент = ДанныеЗаполнения.Контрагент;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровТовары.Количество КАК Количество,
	|	ПоступлениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровТовары.Коэффициент КАК Коэффициент,
	|	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка = &ДокументОснование
	|	И ПоступлениеТоваровТовары.Количество > 0";
	
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());    
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Реализация автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАвтомобилей(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.ПТС;
	Контрагент = ДанныеЗаполнения.Контрагент;
	
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
		СписокДляВыбора = ДанныеЗаполнения.Автомобили.Выгрузить();
		АвтомобильЗаполнения=Неопределено;
		
		Если ДополнительныеСвойства.Свойство("Автомобиль",АвтомобильЗаполнения) Тогда
			СписокДляВыбора.Очистить();
			НоваяСтрока=СписокДляВыбора.Добавить();
			НоваяСтрока.Автомобиль=АвтомобильЗаполнения;
			СтрокаВДокументе=ДанныеЗаполнения.Автомобили.Найти(АвтомобильЗаполнения,"Автомобиль");
			Если СтрокаВДокументе<>Неопределено Тогда
				Для каждого КолонкаТЧ Из СписокДляВыбора.Колонки Цикл
					НоваяСтрока[КолонкаТЧ.Имя]=СтрокаВДокументе[КолонкаТЧ.Имя];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокДляВыбора.Количество() > 0 Тогда
			Если СписокДляВыбора.Количество() = 1 Тогда
				СтрокаВыбранная = СписокДляВыбора.Получить(0);
				Владелец = СтрокаВыбранная.Автомобиль;
				СуммаДокумента = СтрокаВыбранная.СуммаВсего;
				ИдентификаторАвтомобиля = СтрокаВыбранная.ИдентификаторАвтомобиля;
			КонецЕсли;	
			ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;	
			ОборудованиеАвтомобиля = ДанныеЗаполнения.Товары.НайтиСтроки(Новый Структура("ИдентификаторАвтомобиля",ИдентификаторАвтомобиля));
			Для каждого СтрокаОборудования Из ОборудованиеАвтомобиля Цикл
				СуммаДокумента = СуммаДокумента + СтрокаОборудования.СуммаВсего;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции
	
// Производит заполнение объекта на основании документа "Реализация активов"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАктивов(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.ПТС;
	Владелец = ДанныеЗаполнения.Контрагент;
	Контрагент = ДанныеЗаполнения.Контрагент;
	
	// Найдем автомобиль, соответствующий данному активу, через документ ВводВЭксплуатациюАвтомобилей.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	Док.Количество КАК Количество,
	|	Док.СтавкаНДС КАК СтавкаНДС,
	|	Док.СуммаНДС КАК СуммаНДС,
	|	Док.Сумма КАК Всего
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияАктивовАктивы.ПрочийАктив КАК ПрочийАктив,
	|		РеализацияАктивовАктивы.Количество КАК Количество,
	|		РеализацияАктивовАктивы.СтавкаНДС КАК СтавкаНДС,
	|		РеализацияАктивовАктивы.СуммаНДС КАК СуммаНДС,
	|		РеализацияАктивовАктивы.Сумма КАК Сумма
	|	ИЗ
	|		Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
	|	ГДЕ
	|		РеализацияАктивовАктивы.Ссылка = &ДокОснование
	|		И РеализацияАктивовАктивы.ПрочийАктив.Номенклатура = &Автомобиль) КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводВЭксплуатациюАвтомобилей.Автомобили КАК ВводВЭксплуатациюАвтомобилейАвтомобили
	|		ПО Док.ПрочийАктив = ВводВЭксплуатациюАвтомобилейАвтомобили.Актив";
	
	Запрос.УстановитьПараметр("ДокОснование",ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Автомобиль",Справочники.Номенклатура.Автомобиль);
	
	СписокДляВыбора = Запрос.Выполнить().Выгрузить();
	
	Если СписокДляВыбора.Количество() = 0 Тогда
		Возврат Истина;
	ИначеЕсли СписокДляВыбора.Количество() = 1 Тогда
		СтрокаВыбранная = СписокДляВыбора.Получить(0);
	КонецЕсли;
	
	Владелец = СтрокаВыбранная.Автомобиль;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаДокумента = СтрокаВыбранная.Всего;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
		
КонецФункции
	
// Производит заполнение объекта на основании справочника "Контрагенты"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Контрагенты(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
		
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.Доверенность;
	Контрагент = ДанныеЗаполнения;
	Владелец = Пользователи.ТекущийПользователь().Сотрудник; 
	ДокументДоверенности = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Владелец,
			Перечисления.ВидыДокументов.Паспорт);
				
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции	

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Владелец") Тогда 
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Автомобили") Тогда 
			
			 Контрагент = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Владелец,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин);

		КонецЕсли;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции
#КонецОбласти
#КонецОбласти

#КонецЕсли
