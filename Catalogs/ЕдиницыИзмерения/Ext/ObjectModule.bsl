// Модуль объекта справочника "Единицы измерения"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоКода(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоКода()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Для данной номенклатуры единицы подчиняются типу - переопределим владельца !
	Если ТипЗнч(Владелец)=Тип("СправочникСсылка.Номенклатура") И Владелец.ТипНоменклатуры.ИспользованиеЕдиницИзмерения<>2 Тогда
		Владелец = Владелец.ТипНоменклатуры;
	КонецЕсли;
	Коэффициент = 1;
	Точность    = 3;
	
	Если ТипЗнч(Владелец)=Тип("СправочникСсылка.Номенклатура") Тогда
		
		// Подставим базовую единицу номенклатуры
		ЕдиницаПоКлассификатору = Владелец.БазоваяЕдиницаИзмерения;
		
		// Установим точность для всех видов штучных товаров
		Если НЕ Владелец.ТипНоменклатуры.Весовой Тогда
			Точность = 0;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Владелец)=Тип("СправочникСсылка.ТипыНоменклатуры") ИЛИ (ТипЗнч(Владелец)=Тип("СправочникСсылка.Номенклатура") И Владелец.ТипНоменклатуры.ИспользованиеЕдиницИзмерения<>2) Тогда
		
		// Для данной номенклатуры единицы подчиняются типу
		// Подставим основную базовую единицу из типа.
		ЕдиницаПоКлассификатору = Владелец.ОсновнаяБазоваяЕдиницаИзмерения;
		
		// Установим точность для всех видов штучных товаров
		Если НЕ Владелец.Весовой Тогда
			Точность = 0;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Наименование = Справочники.ЕдиницыИзмерения.СформироватьНаименованиеПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - СправочникОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи объекта.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередЗаписью(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередЗаписью(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕдиницыИзмерения.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |ГДЕ
		               |	ЕдиницыИзмерения.Владелец = &Владелец
		               |	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
		               |	И ЕдиницыИзмерения.Коэффициент = &Коэффициент";
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору", ЕдиницаПоКлассификатору);
		Запрос.УстановитьПараметр("Коэффициент", Коэффициент);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ТекстСообщения = СтрШаблон(
				Нстр("ru = 'Уже существует единица измерения с владельцем <%1>, классификатором <%2> и коэффициентом <%3>.'"), 
				Владелец, 
				ЕдиницаПоКлассификатору, 
				Коэффициент);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,,, Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриЗаписи(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Почистим регистры сведений от удаляемого объекта
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрайсЛистыКонтрагентов.ПрайсЛист КАК ПрайсЛист,
	               |	ПрайсЛистыКонтрагентов.Номенклатура КАК Номенклатура,
	               |	ПрайсЛистыКонтрагентов.АртикулДляПоиска КАК АртикулДляПоиска,
	               |	ПрайсЛистыКонтрагентов.Производитель КАК Производитель,
	               |	ПрайсЛистыКонтрагентов.ДатаЗаписи КАК ДатаЗаписи,
	               |	ПрайсЛистыКонтрагентов.КодПредложения КАК КодПредложения
	               |ИЗ
	               |	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
	               |ГДЕ
	               |	ПрайсЛистыКонтрагентов.ЕдиницаИзмерения = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ПрайсЛистыКонтрагентов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры // ПередУдалением()

#КонецОбласти

#КонецЕсли
