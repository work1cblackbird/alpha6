///////////////////////////////////////////////////////////////////////////////
// Модуль формы элемента справочника "Типы ресурсов"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ДоступныеТипыАвторабот");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ДоступныеТипыАвтомобилей");
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ТипыРесурсов");
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи,"НеПроверятьЗаполнение", Ложь) Тогда
		
		ЗаполненыТипыАвторабот = Объект.ДоступныеТипыАвторабот.Количество() <> 0;
		ЗаполненыТипыАвтомобилей = Объект.ДоступныеТипыАвтомобилей.Количество() <> 0;
		Если Не (ЗаполненыТипыАвторабот И ЗаполненыТипыАвтомобилей) Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"Подключаемый_ОбработкаРезультатаПроверкиЗаполнения",
				ЭтотОбъект,
				ПараметрыЗаписи
			);
			ТекстСообщения = НСтр(
				"ru = 'Не заполнен%1 %2. Ресурсы с данным типом не могут участвовать в автоматическом планировании.'"
			);
			Если Не ЗаполненыТипыАвтомобилей И Не ЗаполненыТипыАвторабот Тогда
				ТекстСообщения = СтрШаблон(
					ТекстСообщения,
					"ы",
					НСтр("ru = 'таблицы ""Доступные типы авторабот"" и ""Доступные типы автомобилей""'")
				);
			ИначеЕсли Не ЗаполненыТипыАвтомобилей Тогда
				ТекстСообщения = СтрШаблон(
					ТекстСообщения,
					"а",
					НСтр("ru = 'таблица ""Доступные типы автомобилей""'")
				);
			Иначе
				ТекстСообщения = СтрШаблон(
					ТекстСообщения,
					"а",
					НСтр("ru = 'таблица ""Доступные типы авторабот""'")
				);
			КонецЕсли;
			СписокОтветов = Новый СписокЗначений;
			СписокОтветов.Добавить("Записать и закрыть");
			СписокОтветов.Добавить("Записать");
			СписокОтветов.Добавить("Отмена");
			ПоказатьВопрос(
				ОбработчикОповещения,
				ТекстСообщения + Символы.ПС + НСтр("ru = 'Продолжить запись?'"),
				СписокОтветов,
				,
				"Отмена",
				НСтр("ru = 'Проверка заполнения'")
			);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОчиститьДоступныеТипыАвтомобилей(Команда)
	
	Если Объект.ДоступныеТипыАвтомобилей.Количество() > 0 Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Событие", "Очистить");
		ПараметрыОповещения.Вставить("ИмяТаблицы", "ДоступныеТипыАвтомобилей");
	
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ПараметрыОповещения
		);
	
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Очистить доступные типы автомобилей?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			,
			НСтр("ru = 'Очистка таблицы'")
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДоступныеТипыАвторабот(Команда)
	
	Если Объект.ДоступныеТипыАвторабот.Количество() > 0 Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Событие", "Очистить");
		ПараметрыОповещения.Вставить("ИмяТаблицы", "ДоступныеТипыАвторабот");
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ПараметрыОповещения
		);
		
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Очистить доступные типы авторабот?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			,
			НСтр("ru = 'Очистка таблицы'")
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиТипамиАвторабот(Команда)
	
	Если Объект.ДоступныеТипыАвторабот.Количество() = 0 Тогда
		
		ОбработкаРезультатаОповещенияНаСервере(0, "ЗаполнитьВсемиТипамиАвторабот");
		
	Иначе
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			"ЗаполнитьВсемиТипамиАвторабот"
		);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(0, "Да");
		Кнопки.Добавить(1, "Нет");
		
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"),
			Кнопки,
			,
			,
			НСтр("ru = 'Заполнение'")
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиТипамиАвтомобилей(Команда)
	
	Если Объект.ДоступныеТипыАвтомобилей.Количество() = 0 Тогда
		
		ОбработкаРезультатаОповещенияНаСервере(0, "ЗаполнитьВсемиТипамиАвтомобилей");
		
	Иначе
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			"ЗаполнитьВсемиТипамиАвтомобилей"
		);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(0, "Да");
		Кнопки.Добавить(1, "Нет");
		
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"),
			Кнопки,
			,
			,
			НСтр("ru = 'Заполнение'")
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
КонецПроцедуры 

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "Очистить" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ИмяТаблицы = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИмяТаблицы");
			Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда
				Объект[ИмяТаблицы].Очистить();
			КонецЕсли;
		КонецЕсли;
		
		РезультатОповещения = Неопределено;
	КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	ПродолжитьВызов = УправлениеДиалогомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения,
		ДополнительныеПараметры);
	
	Если Не ПродолжитьВызов Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ЗаполнитьВсемиТипамиАвторабот" И РезультатОповещения = 0 Тогда
		Объект.ДоступныеТипыАвторабот.Очистить();
		
		Выборка = Справочники.ТипыАвторабот.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.ДоступныеТипыАвторабот.Добавить();
			НоваяСтрока.ТипАвтоработы = Выборка.Ссылка;
		КонецЦикла;
	ИначеЕсли ДополнительныеПараметры = "ЗаполнитьВсемиТипамиАвтомобилей" И РезультатОповещения = 0 Тогда
		Объект.ДоступныеТипыАвтомобилей.Очистить();
		
		Выборка = Справочники.ТипыАвтомобилей.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.ДоступныеТипыАвтомобилей.Добавить();
			НоваяСтрока.ТипАвтомобиля = Выборка.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПроверкиЗаполнения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("НеПроверятьЗаполнение", Истина);
	ЗаписанТипРесурса = Записать(ДополнительныеПараметры);
	
	Если ЗаписанТипРесурса И РезультатОповещения = НСтр("ru = 'Записать и закрыть'") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

