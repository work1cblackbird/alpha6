
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		УправлениеДиалогомНаСервере();
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьРезультатПроверкиРНПТ();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ГТД");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗаполнитьРезультатПроверкиРНПТ();
	УправлениеДиалогомНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РНПТПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РНПТПриИзменении(Элемент)
	
	РНПТПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьРНПТВФНС(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ Модифицированность Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Данные еще не записаны.
			|Выполните данную операцию после записи.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("РНПТ", Объект.Ссылка);
	
	ОботчикЗавершения = Новый ОписаниеОповещения("Подключаемый_ОбработкаПроверкиРНПТ", ЭтотОбъект);
	
	ОбменСФНСКлиент.ОтправитьЗапросПроверкиРНПТ(ЭтотОбъект, ПараметрыКоманды, ОботчикЗавершения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ТекстОшибки = УправлениеДиалогомКлиентСервер.КорректныйНомерДекларации(Объект.Наименование);
	Элементы.ТекстОшибкиПроверкиНомера.Видимость = Не ПустаяСтрока(ТекстОшибки);
	Элементы.ТекстОшибкиПроверкиНомера.Заголовок = ТекстОшибки;
	
КонецПроцедуры 

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-warning
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОбработкаПроверкиРНПТ(АдресРезультатаПроверки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если АдресРезультатаПроверки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатаПроверки = ПолучитьИзВременногоХранилища(АдресРезультатаПроверки.АдресРезультата);
	
	Если РезультатаПроверки = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'При выполнении проверки обнаружена ошибка. См. журнал регистрации.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РезультатаПроверки.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатаПроверки.ТекстОшибки,,,ЭтотОбъект);
	КонецЕсли;
	
	ДатаПроверки = РезультатаПроверки.РезультатПроверки.ДатаПроверки;
	ПредставлениеРезультата = РезультатаПроверки.РезультатПроверки.Представление;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатПроверкиРНПТ()
	
	Если НЕ Объект.РНПТ ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменФНС") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим наличие предыдущих проверок РНПТ
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РезультатыПроверкиРНПТ.Представление КАК Представление,
	|	РезультатыПроверкиРНПТ.ДатаПроверки КАК ДатаПроверки
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиРНПТ КАК РезультатыПроверкиРНПТ
	|ГДЕ
	|	РезультатыПроверкиРНПТ.РНПТ = &РНПТ";
	Запрос.УстановитьПараметр("РНПТ", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		ДатаПроверки = Неопределено;
		ПредставлениеРезультата = "";
		Возврат;
	КонецЕсли;
	
	ДатаПроверки = Выборка.ДатаПроверки;
	ПредставлениеРезультата = Выборка.Представление;
	
КонецПроцедуры

#КонецОбласти

