#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Обновление адресов сервера маркировки
//
Процедура ОбновитьАдресаПодключенияКСистемеМаркировки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапросаШаблон = "ВЫБРАТЬ
	               |	НастройкаОбменаМаркировкиТоваров.Ссылка КАК Ссылка,
	               |	&ТестовыйПризнак#НомерПараметра КАК ТестовыйКонтур
	               |ИЗ
	               |	Справочник.НастройкаОбменаМаркировкиТоваров КАК НастройкаОбменаМаркировкиТоваров
	               |ГДЕ
	               |	НастройкаОбменаМаркировкиТоваров.Адрес ПОДОБНО &Адрес#НомерПараметра
	               |	И НастройкаОбменаМаркировкиТоваров.Порт = &Порт#НомерПараметра
	               |	И НастройкаОбменаМаркировкиТоваров.АдресСУЗ ПОДОБНО &АдресСУЗ#НомерПараметра
	               |	И НастройкаОбменаМаркировкиТоваров.ПортСУЗ = &ПортСУЗ#НомерПараметра";
	
	АдресаКЗамене = УстаревшиеАдресаКОбменуМаркировки();
	ТекстЗапроса = Новый Массив;
	НомерАдреса = 1;
	
	Для Каждого ТекущийАдрес Из АдресаКЗамене Цикл
		
		ТекстЗапросаАдреса = СтрЗаменить(ТекстЗапросаШаблон, "#НомерПараметра", Строка(НомерАдреса));
		Если НомерАдреса > 1 Тогда
			ТекстЗапросаАдреса = СтрЗаменить(ТекстЗапросаАдреса, "КАК Ссылка", ""); 
			ТекстЗапросаАдреса = СтрЗаменить(ТекстЗапросаАдреса, "КАК ТестовыйКонтур", "");
		КонецЕсли;
		ТекстЗапроса.Добавить(ТекстЗапросаАдреса);
		Запрос.УстановитьПараметр(СтрШаблон("ТестовыйПризнак%1", НомерАдреса), ТекущийАдрес.ТестовыйПризнак);
		Запрос.УстановитьПараметр(СтрШаблон("Адрес%1", НомерАдреса), ТекущийАдрес.Адрес);
		Запрос.УстановитьПараметр(СтрШаблон("Порт%1", НомерАдреса), ТекущийАдрес.Порт);
		Запрос.УстановитьПараметр(СтрШаблон("АдресСУЗ%1", НомерАдреса), ТекущийАдрес.АдресСУЗ);
		Запрос.УстановитьПараметр(СтрШаблон("ПортСУЗ%1", НомерАдреса), ТекущийАдрес.ПортСУЗ);
		НомерАдреса = НомерАдреса + 1;
		
	КонецЦикла;
	
	
	Запрос.Текст = СтрСоединить(ТекстЗапроса, "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// Проверим необходимо ли устанавливать признак тестового контура
		Если НЕ НастройкаОбъект.ТестовыйКонтур И Выборка.ТестовыйКонтур Тогда
			НастройкаОбъект.ТестовыйКонтур = Истина;
		КонецЕсли;
		
		АдресаСервера = МаркировкаТоваровКлиентСервер.АдресаПодключенияКСистемеМаркировки(НастройкаОбъект.ТестовыйКонтур);
		ЗаполнитьЗначенияСвойств(НастройкаОбъект, АдресаСервера);
		НастройкаОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			НастройкаОбъект.Записать();
			ВывестиСообщение(
				НСтр("ru = 'Справочник ""Настройка обмена с личным кабинетом"". Обновлен элемент ""%1"".'"),,,,,
				СокрЛП(НастройкаОбъект.Наименование));
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Не удалось записать элемент справочника ""Настройка обмена с личным кабинетом""'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
				+ " " + СокрЛП(НастройкаОбъект.Наименование),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция УстаревшиеАдресаКОбменуМаркировки()
	
	НеАктуальныеАдреса = Новый ТаблицаЗначений;
	НеАктуальныеАдреса.Колонки.Добавить("ТестовыйПризнак");
	НеАктуальныеАдреса.Колонки.Добавить("Адрес");
	НеАктуальныеАдреса.Колонки.Добавить("Порт");
	НеАктуальныеАдреса.Колонки.Добавить("АдресСУЗ");
	НеАктуальныеАдреса.Колонки.Добавить("ПортСУЗ");
	
	НоваяСтрока = НеАктуальныеАдреса.Добавить();
	НоваяСтрока.ТестовыйПризнак = Ложь;
	НоваяСтрока.Адрес = "ismp.crpt.ru";
	НоваяСтрока.Порт = 443;
	НоваяСтрока.АдресСУЗ = "suz2.crpt.ru";
	НоваяСтрока.ПортСУЗ = 443;
	
	НоваяСтрока = НеАктуальныеАдреса.Добавить();
	НоваяСтрока.ТестовыйПризнак = Истина;
	НоваяСтрока.Адрес = "demo.lp.crpt.tech";
	НоваяСтрока.Порт = 443;
	НоваяСтрока.АдресСУЗ = "intuot.crpt.ru";
	НоваяСтрока.ПортСУЗ = 12011;
	
	НоваяСтрока = НеАктуальныеАдреса.Добавить();
	НоваяСтрока.ТестовыйПризнак = Истина;
	НоваяСтрока.Адрес = "sandbox.crpt.tech";
	НоваяСтрока.Порт = 443;
	НоваяСтрока.АдресСУЗ = "suz.sandbox.crpt.tech";
	НоваяСтрока.ПортСУЗ = 443;
	
	Возврат НеАктуальныеАдреса;
	
КонецФункции

// Обновление использования контура для обмена с Честным знаком через api
//
Процедура ПеревестиНастройкиОбменаНаTrueApi() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкаОбменаМаркировкиТоваров.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НастройкаОбменаМаркировкиТоваров КАК НастройкаОбменаМаркировкиТоваров
	               |ГДЕ
	               |	НЕ НастройкаОбменаМаркировкиТоваров.УдалитьИспользоватьTrueAPI";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДляТестовогоКонтура = МаркировкаТоваровКлиентСервер.АдресаПодключенияКСистемеМаркировки(Истина);
	ДляПродуктивногоКонтура = МаркировкаТоваровКлиентСервер.АдресаПодключенияКСистемеМаркировки(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		НастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НастройкаОбъект.УдалитьИспользоватьTrueAPI = Истина;
		
		Если НастройкаОбъект.ТестовыйКонтур Тогда
			
			ЗаполнитьЗначенияСвойств(НастройкаОбъект, ДляТестовогоКонтура);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(НастройкаОбъект, ДляПродуктивногоКонтура);
			
		КонецЕсли;
		
		НастройкаОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			НастройкаОбъект.Записать();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Справочник ""Настройка обмена с личным кабинетом"". Обновлен элемент ""%1"".'"),
				СокрЛП(НастройкаОбъект.Наименование)));
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Не удалось записать элемент справочника ""Настройка обмена с личным кабинетом""'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
				+ " " + СокрЛП(НастройкаОбъект.Наименование),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ПеревестиНастройкиОбменаНаTrueApi()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ИдентификаторСУЗ");
	ОбязательныеРеквизиты.Добавить("Адрес");
	ОбязательныеРеквизиты.Добавить("Порт");
	ОбязательныеРеквизиты.Добавить("ВремяОжидания");
	ОбязательныеРеквизиты.Добавить("ВерсияФорматаОбмена");
	ОбязательныеРеквизиты.Добавить("СписокУстройств");
	ОбязательныеРеквизиты.Добавить("АдресСУЗ");
	ОбязательныеРеквизиты.Добавить("ПортСУЗ");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Организация");
	
	// Уникальные поля таблицы автомобилей
	УникальныеСписокУстройств = Новый Массив();
	УникальныеСписокУстройств.Добавить("ПодразделениеКомпании");
	УникальныеРеквизиты.Вставить("СписокУстройств", УникальныеСписокУстройств);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ОбработкаСобытийСправочникаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли