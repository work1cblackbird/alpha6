
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	Элементы.ФормаРучноеЗаполнение.Пометка = НЕ Объект.Фиксированный;
	
	ПериодичностьСтарая =Объект.Периодичность;
	
	
	СформироватьНаименованиеПоУмолчанию();
	КэшНаименование = Справочники.ГрафикиРаботы.СформироватьНаименованиеПоУмолчанию(Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		УправлениеДиалогомНаСервере();
	
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Пометка дней недели для графиков с указываемой датой начала
	Для каждого Строки Из Объект.Смещение Цикл
		ЗаполнитьПредставлениеДня(Строки);
	КонецЦикла;
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	
	// Произведем настройку параметров отображения кнопок командной панели списка График работ календарный.
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ГрафикРаботКалендарный");
	
	// Произведем настройку параметров отображения кнопок командной панели списка Смещение.
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Смещение");
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НаборЗаписей = РегистрыСведений.ГрафикРаботКалендарный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.График.Значение = Объект.Ссылка;
	НаборЗаписей.Отбор.График.Использование = Истина;
	НаборЗаписей.Прочитать();
	ГрафикРаботКалендарный.Загрузить(НаборЗаписей.Выгрузить());
	
	Для каждого Строка Из ГрафикРаботКалендарный Цикл
		Строка.День = ДеньГода(Строка.Дата);
	КонецЦикла;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ГрафикиРаботы");

КонецПроцедуры 

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ГрафикИзменен Тогда
		
		ТаблицаЗаписейФормы = ГрафикРаботКалендарный.Выгрузить();
		
		ТаблицаЗаписейФормы.Колонки.Удалить("ИсходныйНомерСтроки");
		ТаблицаЗаписейФормы.ЗаполнитьЗначения(ТекущийОбъект.Ссылка, "График");
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыСведений.ГрафикРаботКалендарный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.График.Значение = ТекущийОбъект.Ссылка;
		НаборЗаписей.Отбор.График.Использование = Истина;
		
		НаборЗаписей.Загрузить(ТаблицаЗаписейФормы);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки(),,,,Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Пометка дней недели для графиков с указываемой датой начала
	Для каждого Строки Из Объект.Смещение Цикл
		ЗаполнитьПредставлениеДня(Строки);
	КонецЦикла;
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
		
	// Проверим поле Дата в случае ручного заполнения.
	ЕстьОшибки = Ложь;
	Для Каждого Строка Из ГрафикРаботКалендарный Цикл
		Если НЕ ЗначениеЗаполнено (Строка.Дата) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Поле Дата не заполнено.'"), Объект.Ссылка);
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = ЕстьОшибки;
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ПериодичностьПриИзмененииНаСервере()
	
	Если Объект.УчетПраздников И 
		НЕ (Объект.Периодичность = Перечисления.Периодичность.Декада
			ИЛИ Объект.Периодичность = Перечисления.Периодичность.Произвольный) Тогда
		
		Объект.УчетПраздников = Ложь;
		
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	Если Объект.Смещение.Количество() = 0 Тогда
		ОбработкаРезультатаОповещенияПерезаполнитьСмещение(КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаРезультатаОповещенияПерезаполнитьСмещение",
		ЭтотОбъект,
		"ПериодичностьПриИзменении"
	);
	ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'График будет заменен. Продолжить?'"),РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаСервере
Процедура ПроизводственныйКалендарьПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйКалендарьПриИзменении(Элемент)
	
	ПроизводственныйКалендарьПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Для Каждого Строка Из Объект.Смещение Цикл
		ЗаполнитьПредставлениеДня(Строка);
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КэшНаименование = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСмещение

&НаКлиенте
Процедура СмещениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		// Установим вид дня
		Элемент.ТекущиеДанные.Рабочий = Истина;
		ЗаполнитьПредставлениеДня(Элемент.ТекущиеДанные);
		Элементы.Смещение.ТекущийЭлемент = Элементы.СмещениеСмена;
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СмещениеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Произвольный") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СмещениеПередУдалением(Элемент, Отказ)
	
	Если НЕ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Произвольный") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СмещениеПриИзменении(Элемент)
	
	Для Каждого Стока Из Объект.Смещение Цикл
		ЗаполнитьПредставлениеДня(Стока);
	КонецЦикла;
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	
	СформироватьНаименованиеПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура СмещениеПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		ОформлениеКомандыИсключить(Элемент.ТекущиеДанные.НеИспользовать);
	КонецЕсли; 

КонецПроцедуры 

&НаКлиенте
Процедура СмещениеПослеУдаления(Элемент)
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыСмещение

&НаКлиенте
Процедура СмещениеСменаПриИзменении(Элемент)

	СмещениеСменаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура СмещениеСменаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.Смещение.НайтиПоИдентификатору(Элементы.Смещение.ТекущаяСтрока);
	Справочники.ГрафикиРаботы.СменаПоУмолчаниюПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СмещениеНачалоРабочегоВремениПриИзменении(Элемент)
	
	СмещениеНачалоРабочегоВремениПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СмещениеНачалоРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)

	ТекущиеДанные = Объект.Смещение.НайтиПоИдентификатору(Элементы.Смещение.ТекущаяСтрока);
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СмещениеНачалоРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры 

&НаКлиенте
Процедура СмещениеКонецРабочегоВремениПриИзменении(Элемент)
	
	СмещениеКонецРабочегоВремениПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СмещениеКонецРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)

	ТекущиеДанные = Объект.Смещение.НайтиПоИдентификатору(Элементы.Смещение.ТекущаяСтрока);
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 


&НаКлиенте
Процедура СмещениеКонецРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СмещениеПродолжительностьПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("РасчетПродолжительности",Истина);
	
	СмещениеПродолжительностьПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СмещениеПродолжительностьПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.Смещение.НайтиПоИдентификатору(Элементы.Смещение.ТекущаяСтрока);
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СмещениеПродолжительностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры // СмещениеПродолжительностьНачалоВыбора()

&НаКлиенте
Процедура СмещениеРабочийПриИзменении(Элемент)
	
	// Вызываем обработчик события
	СмещениеРабочийПриИзмененииНаСервере();
	
КонецПроцедуры //СмещениеРабочийПриИзменении()

&НаСервере
Процедура СмещениеРабочийПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.Смещение.НайтиПоИдентификатору(Элементы.Смещение.ТекущаяСтрока);
	Справочники.ГрафикиРаботы.СмещениеРабочийПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикиРаботКалендарный

#Область ОбработчикиСобытийПолейТаблицыФормыГрафикиРаботКалендарный

&НаКлиенте
Процедура ГрафикРаботКалендарныйСменаПриИзменении(Элемент)
	
	ГрафикРаботКалендарныйСменаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ГрафикРаботКалендарныйСменаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)

	ТекущиеДанные =  ГрафикРаботКалендарный.НайтиПоИдентификатору(Элементы.ГрафикРаботКалендарный.ТекущаяСтрока);
	Справочники.ГрафикиРаботы.СменаПоУмолчаниюПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ГрафикРаботКалендарныйНачалоРабочегоВремениПриИзменении(Элемент)
	
	ГрафикРаботКалендарныйНачалоРабочегоВремениПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ГрафикРаботКалендарныйНачалоРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)

	ТекущиеДанные = ГрафикРаботКалендарный.НайтиПоИдентификатору(Элементы.ГрафикРаботКалендарный.ТекущаяСтрока);
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ГрафикРаботКалендарныйНачалоРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры 

&НаКлиенте
Процедура ГрафикРаботКалендарныйКонецРабочегоВремениПриИзменении(Элемент)
	
	ГрафикРаботКалендарныйКонецРабочегоВремениПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ГрафикРаботКалендарныйКонецРабочегоВремениПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = ГрафикРаботКалендарный.НайтиПоИдентификатору(Элементы.ГрафикРаботКалендарный.ТекущаяСтрока);
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ГрафикРаботКалендарныйКонецРабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРаботКалендарныйПродолжительностьПриИзменении(Элемент)

	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("РасчетПродолжительности",Истина);
	
	ГрафикРаботКалендарныйПродолжительностьПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ГрафикРаботКалендарныйПродолжительностьПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = ГрафикРаботКалендарный.НайтиПоИдентификатору(Элементы.ГрафикРаботКалендарный.ТекущаяСтрока);
	Справочники.ГрафикиРаботы.РассчитатьПродолжительностьИнтервалаСмешения(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ГрафикРаботКалендарныйПродолжительностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	// Вызываем обработчик события
	ЗаполнитьСписокВыбораВремени(ДанныеВыбора);
	
КонецПроцедуры 

&НаКлиенте
Процедура ГрафикРаботКалендарныйВидДняПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикРаботКалендарный.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Праздник")
		ИЛИ ТекущиеДанные.ВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Выходной") Тогда
		
		ТекущиеДанные.Смена = ПредопределенноеЗначение("Справочник.ГрафикиРаботы.ПустаяСсылка");
		ТекущиеДанные.НачалоРабочегоВремени = '00010101';
		ТекущиеДанные.КонецРабочегоВремени = '00010101';
		ТекущиеДанные.Продолжительность = '00010101';
		ТекущиеДанные.ВидИнтервала = ПредопределенноеЗначение("Справочник.ВидыИнтервалов.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ГрафикРаботКалендарныйПриИзменении(Элемент)
	
	ГрафикИзменен = Истина;
	
КонецПроцедуры // ГрафикРаботКалендарныйПриИзменении()

&НаКлиенте
Процедура ГрафикРаботКалендарныйПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьПодвал(ГрафикРаботКалендарный,ПродолжительностьРучногоГрафика);
	ГрафикИзменен = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ГрафикРаботКалендарныйПослеУдаления(Элемент)
	
	ОбновитьПодвал(ГрафикРаботКалендарный,ПродолжительностьРучногоГрафика);
	ГрафикИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРаботКалендарныйДатаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикРаботКалендарный.ТекущиеДанные;
	ТекущиеДанные.День = ДеньГода(ТекущиеДанные.Дата);
	
КонецПроцедуры 

&НаКлиенте
Процедура ГрафикРаботКалендарныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		
		Индекс = ГрафикРаботКалендарный.Количество() - 2;
		Если Индекс >= 0 Тогда
			Элемент.ТекущиеДанные.Дата = ГрафикРаботКалендарный[Индекс].Дата + 24*60*60;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаГрафикиРаботЗаполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана периодичность графика'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ОбработчикПерехвата = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОповещенияЗаписиГрафикаРабот",
			ЭтотОбъект,
			"ЗаполнитьГрафикиРабот"
		);
		
		ПоказатьВопрос(
			ОбработчикПерехвата,
			НСтр("ru = 'Перед заполнением графика необходимо записать элемент. Продолжить?'"),
			РежимДиалогаВопрос.ОКОтмена
		);
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьЗаполнениеГрафиковРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГрафикиРаботОчистить(Команда)
	
	Если ГрафикРаботКалендарный.Количество()>0 Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикПерехвата = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОповещенияКомандыГрафикРаботКалендарный", 
			ЭтотОбъект,
			"Очистить"
		);
		
		ПоказатьВопрос(ОбработчикПерехвата,НСтр("ru = 'Очистить график работы?'"),РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры 

// Обработчик события возникающего на клиенте при нажатии на кнопку "Перезаполнить по смене" в табличной части "Графики работ".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаГрафикиРаботВытеснитьГрафиком(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана периодичность графика'"));
		Возврат;
	КонецЕсли;

	ОбработчикПерехвата = Новый ОписаниеОповещения(
		"ОбработкаРезультатаОповещенияКомандыГрафикРаботКалендарный",
		ЭтотОбъект,
		"Вытеснить"
	);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Вытеснить",Истина);
	ПараметрыФормы.Вставить("ГрафикРаботы",Объект.Ссылка);
	

	ОткрытьФорму(
		"Справочник.ГрафикиРаботы.Форма.Заполнение",
		ПараметрыФормы,
		ЭтотОбъект,
		,,,
		ОбработчикПерехвата,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры 

// Обработчик события возникающего на клиенте при нажатии на кнопку "Очистить" в табличной части "Смещение".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаСмещениеОчистить(Команда)
	
	Если Объект.Смещение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикВопроса = Новый ОписаниеОповещения(
		"ОбработкаРезультатаОповещенияКомандыСмещение",
		ЭтотОбъект,
		"КомандаСмещениеОчистить"
	);
	
	ТекстВопроса = НСтр("ru = 'Очистить таблицу смещения?'");
	
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при нажатии на кнопку "Перезаполнить" в табличной части "Графики работ календарный".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаПерезаполнить(Команда)
	
	Если Объект.Смещение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОбработчикПерехвата = Новый ОписаниеОповещения(
		"ОбработкаРезультатаОповещенияКомандыСмещение",
		ЭтотОбъект,
		"КомандаПерезаполнить"
	);
	
	ПараметрыФормы = Новый Структура;
	
	ОткрытьФорму(
		"Справочник.ГрафикиРаботы.Форма.ЗаполнениеВременныхИнтервалов",
		ПараметрыФормы,
		,,,,
		ОбработчикПерехвата,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при нажатии на кнопку "Использовать" в табличной части "Графики работ календарный".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КомандаНеИспользоватьИнтервал(Команда)
	
	Если НЕ Элементы.Смещение.ТекущиеДанные = Неопределено Тогда
		Элементы.Смещение.ТекущиеДанные.НеИспользовать = НЕ Элементы.Смещение.ТекущиеДанные.НеИспользовать;
		ОформлениеКомандыИсключить(Элементы.Смещение.ТекущиеДанные.НеИспользовать)
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события возникающего на сервера при нажатии на кнопку "Ручное заполнение".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура РучноеЗаполнениеНаСервере()
	
	Элементы.ФормаРучноеЗаполнение.Пометка = НЕ Элементы.ФормаРучноеЗаполнение.Пометка;
	Объект.Фиксированный = НЕ Элементы.ФормаРучноеЗаполнение.Пометка;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при нажатии на кнопку "Ручное заполнение".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура РучноеЗаполнение(Команда)
	
	РучноеЗаполнениеНаСервере();
	
	Если (Объект.Фиксированный И ГрафикРаботКалендарный.Количество()>0) ИЛИ ГрафикРаботКалендарный.Количество()>0 Тогда
		
		ОбработчикПерехвата = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОповещенияКомандыГрафикРаботКалендарный", 
			ЭтотОбъект,
			"Очистить"
		);
		
		ПоказатьВопрос(ОбработчикПерехвата,НСтр("ru = 'Очистить график работы?'"),РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти

// Обработчик результата оповещения команд заполнить и очистить смещение.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияКомандыСмещение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "КомандаПерезаполнить" Тогда
		
		Если ТипЗнч(РезультатОповещения) = Тип("Структура") Тогда
			
			// Заполнение таблицы
			ПерезаполнениеТаблицыСмещения(РезультатОповещения);
			ОбновитьПодвал(Объект.Смещение, ПродолжительностьШаблона);
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "КомандаСмещениеОчистить" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.Смещение.Очистить();
			ОбновитьПодвал(Объект.Смещение, ПродолжительностьШаблона);
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

// Обработчик результата оповещения команд заполнить и очистить смещение.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияКомандыГрафикРаботКалендарный(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "Вытеснить" Тогда
		
		Если РезультатОповещения = Неопределено Тогда
			Возврат;
		Иначе
			
			// Заполнение таблицы
			ВытеснитьГрафикРаботКалендарныйНаСервере(РезультатОповещения);
			ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);;
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "Заполнить" Тогда
		
		Если РезультатОповещения = Неопределено Тогда
			Возврат;
		Иначе
			
			ЗаполнитьГрафикРаботКалендарныйНаСервере(РезультатОповещения);
			ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "Очистить" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ГрафикРаботКалендарный.Очистить();
			ОбновитьПодвал(ГрафикРаботКалендарный,ПродолжительностьРучногоГрафика);
			Модифицированность = Истина;
			ГрафикИзменен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

// Обработчик события возникающего на сервере при нажатии кнопки "Заполнить".
//
&НаСервере
Процедура ЗаполнитьГрафикРаботКалендарныйНаСервере(РезультатОповещения)
	
	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='В графике не указана периодичность'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Смещение.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнен шаблон заполнения графика'"));
		Возврат;
	КонецЕсли;
	
	ВыходныеДни = Новый Структура;
	ВыходныеДни.Вставить("Суббота",     РезультатОповещения.СубботаВыходной);
	ВыходныеДни.Вставить("Воскресенье", РезультатОповещения.ВоскресеньеВыходной);
	НовыйГрафик = Справочники.ГрафикиРаботы.ПолучитьГрафик(
		Объект.Ссылка,
		РезультатОповещения.Период.ДатаНачала,
		РезультатОповещения.Период.ДатаОкончания,
		ВыходныеДни,
		,,
		Истина
	);
	
	ЗаменяемыеСтроки = Новый Массив;
	
	Для каждого Строка Из ГрафикРаботКалендарный Цикл
		
		Если Строка.Дата <= РезультатОповещения.Период.ДатаОкончания 
			И Строка.Дата >= РезультатОповещения.Период.ДатаНачала Тогда
			
			ЗаменяемыеСтроки.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим строки, даты которых вошли в диапазон перезаполнения
	Для каждого Строка Из ЗаменяемыеСтроки Цикл
		
		ГрафикРаботКалендарный.Удалить(Строка);
		
	КонецЦикла;
	
	Для каждого Строка Из НовыйГрафик Цикл
		
		НоваяСтроки = ГрафикРаботКалендарный.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтроки,Строка);
		НоваяСтроки.День = ДеньГода(НоваяСтроки.Дата);
		
	КонецЦикла;
	
	ГрафикРаботКалендарный.Сортировать("Дата,НачалоРабочегоВремени");
	Модифицированность = Истина;
	ГрафикИзменен = Истина;
	
КонецПроцедуры 

&НаСервере
Процедура ВытеснитьГрафикРаботКалендарныйНаСервере(РезультатОповещения)
	
	УдаляемыеСтроки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(РезультатОповещения.ГрафикРаботыОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не выбран график для заполнения.'"));
		Возврат;
	КонецЕсли;
	
	ЗаменяемыеСтроки = Новый Массив;
	Если ТипЗнч(РезультатОповещения.ГрафикРаботыОснование) = Тип("СправочникСсылка.ПроизводственныеКалендари") Тогда
		
		Если Объект.Смещение.Количество()=0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнены основные параметры графика.'"));
			Возврат;
		КонецЕсли;
		
		ДанныеПроизводственногоКалендаря = Справочники.ГрафикиРаботы.ДанныеПроизводственногоКалендаря(
			РезультатОповещения.ГрафикРаботыОснование,
			РезультатОповещения.Период.ДатаНачала,
			РезультатОповещения.Период.ДатаОкончания
		);
		
		ДниПереноса = Новый Массив;
		
		ТекДата = РезультатОповещения.Период.ДатаНачала;
		Пока ТекДата <= РезультатОповещения.Период.ДатаОкончания Цикл
			
			// Если нужно пересечение с графиком-основанием, то учитываем и его
			СтрокиОснования = ДанныеПроизводственногоКалендаря.НайтиСтроки(Новый Структура("Дата", ТекДата));
			Если СтрокиОснования.Количество() > 0 Тогда
				Если СтрокиОснования[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник 
					ИЛИ СтрокиОснования[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
					
					// Определим какие строки нужно вытеснить
					СтрокиЗамены = ГрафикРаботКалендарный.НайтиСтроки(Новый Структура("Дата",СтрокиОснования[0].Дата));
					Для каждого СтрокаЗамены Из СтрокиЗамены Цикл
						
						ЗаменяемыеСтроки.Добавить(СтрокаЗамены);
						
					КонецЦикла;
					
					// Если установлено отдельное расписание предпраздничного дня установим его
					Если СтрокиОснования[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
						
						НоваяСтроки = ГрафикРаботКалендарный.Добавить();
						НоваяСтроки.Дата = СтрокиОснования[0].Дата;
						НоваяСтроки.Смена = Справочники.Смены.ПустаяСсылка();
						НоваяСтроки.ВидДня = Перечисления.ВидДня.Праздник;
						
					Иначе
						
						// расчет максимального смещения - максимальный номер строки в ТЧ Смещение шаблона
						НачальноеСмещение = (ТекДата - Объект.ДатаНачала);
						Если Объект.Периодичность = Перечисления.Периодичность.Произвольный Тогда
							ТаблицаСмещения = Объект.Смещение.Выгрузить();
							ТаблицаСмещения.Сортировать("НомерСтроки Убыв");
							МаксимальноеСмещение = ТаблицаСмещения[0].НомерСтроки +1;
						ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Неделя Тогда
							МаксимальноеСмещение = 7;
						ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Декада Тогда
							МаксимальноеСмещение = 10;
						ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Год Тогда
							НачальноеСмещение = ТекДата - НачалоГода(ТекДата);
							МаксимальноеСмещение = 366;
						ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Квартал Тогда
							НачальноеСмещение = ТекДата - НачалоКвартала(ТекДата);
							МаксимальноеСмещение = 92;
						ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Месяц Тогда
							НачальноеСмещение = ТекДата - НачалоМесяца(ТекДата);
							МаксимальноеСмещение = 31;
						КонецЕсли;
						
						КоличествоДней = НачальноеСмещение/(60*60*24);
						НачальноеСмещение = КоличествоДней - МаксимальноеСмещение * Цел(КоличествоДней/МаксимальноеСмещение);
						Если НачальноеСмещение < 0 Тогда
							НачальноеСмещение = МаксимальноеСмещение + НачальноеСмещение;
						КонецЕсли;
						
						ТекущееСмещение = НачальноеСмещение+1;
						СтрокаГрафика = Объект.Смещение.НайтиСтроки(Новый Структура("НомерСтроки",ТекущееСмещение));
						Если СтрокаГрафика.Количество()=0 Тогда
							Продолжить;
						КонецЕсли;
						
						// Если установлено отдельное расписание предпраздничного дня установим его
						Если ЗначениеЗаполнено(СтрокаГрафика[0].Смена) Тогда
							
							// Заполняем ТЗ по интервалам смены
							// Если задано расписание предпраздничного дня, учтем его.
							Если СтрокаГрафика[0].Смена.ИнтервалыПредпраздничногоДня.Количество()>0 Тогда
								ТаблицаИнтервалов = СтрокаГрафика[0].Смена.ИнтервалыПредпраздничногоДня;
							Иначе
								ТаблицаИнтервалов = СтрокаГрафика[0].Смена.Интервалы
							КонецЕсли;
							
							Для Каждого ИнтервалСмены Из ТаблицаИнтервалов Цикл
								НоваяСтроки = ГрафикРаботКалендарный.Добавить();
								НоваяСтроки.Дата = СтрокиОснования[0].Дата;
								НоваяСтроки.ВидДня = Перечисления.ВидДня.Предпраздничный;
								НоваяСтроки.НачалоРабочегоВремени = ИнтервалСмены.НачалоРабочегоВремени;
								НоваяСтроки.КонецРабочегоВремени = ИнтервалСмены.КонецРабочегоВремени;
								НоваяСтроки.Продолжительность = ИнтервалСмены.Продолжительность;
								НоваяСтроки.Смена = СтрокаГрафика[0].Смена;
								НоваяСтроки.ВидИнтервала = ИнтервалСмены.ВидИнтервала;
							КонецЦикла;
							
						Иначе
							
							НоваяСтроки = ГрафикРаботКалендарный.Добавить();
							НоваяСтроки.Дата = СтрокиОснования[0].Дата;
							НоваяСтроки.НачалоРабочегоВремени = СтрокаГрафика[0].НачалоРабочегоВремени;
							НоваяСтроки.КонецРабочегоВремени = СтрокаГрафика[0].КонецРабочегоВремени;
							НоваяСтроки.Продолжительность = СтрокаГрафика[0].Продолжительность;
							НоваяСтроки.Смена = Справочники.Смены.ПустаяСсылка();
							НоваяСтроки.ВидДня = Перечисления.ВидДня.Предпраздничный;
							
						КонецЕсли;
						
					КонецЕсли;
					
					НоваяСтроки.День = ДеньГода(НоваяСтроки.Дата);
					
				КонецЕсли;
			КонецЕсли;
			
			ТекДата = ТекДата + 24*3600;
		КонецЦикла;
		
		// Удалим строки даты которых вошли в диапазон перезаполнения
		Для каждого Строка Из ЗаменяемыеСтроки Цикл
			ГрафикРаботКалендарный.Удалить(Строка);
		КонецЦикла;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(РезультатОповещения.ГрафикРаботыОснование.Периодичность) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='График <%1>: не указана периодичность'"),РезультатОповещения.ГрафикРаботыОснование)
			);
			Возврат;
		КонецЕсли;
		
		ГрафикРаботКалендарный.Сортировать("Дата,НачалоРабочегоВремени");
		ВыходныеДни = Новый Структура;
		ВыходныеДни.Вставить("Суббота", Ложь);
		ВыходныеДни.Вставить("Воскресенье", Ложь);
		
		НовыйГрафик = Справочники.ГрафикиРаботы.ПолучитьГрафик(
			РезультатОповещения.ГрафикРаботыОснование,
			РезультатОповещения.Период.ДатаНачала,
			РезультатОповещения.Период.ДатаОкончания, 
			ВыходныеДни,
			,,
			Ложь
		);
		
		Если НовыйГрафик.Количество()=0 Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='График <%1>: Действие не выполнено. Вытесняющий график пуст'"), РезультатОповещения.ГрафикРаботыОснование)
			);
		    Возврат;
			
		КонецЕсли;   
		
		ТекДата = РезультатОповещения.Период.ДатаНачала;
		ПослДата = Дата(1,1,1);
		
		Для каждого Строка Из НовыйГрафик Цикл
			
			Если (НЕ РезультатОповещения.ЗамещатьТолькоПраздники 
				ИЛИ Строка.ВидДня = Перечисления.ВидДня.Праздник ИЛИ Строка.ВидДня = Перечисления.ВидДня.Предпраздничный) 
				И НЕ Строка.НеИспользовать Тогда
				
				Если НЕ РезультатОповещения.ЗамещатьПолныйДень И ПослДата <> Строка.Дата Тогда
					
					ПослДата = Строка.Дата;
					РазбитьПериодыГрафика(НовыйГрафик,ПослДата);
					
				КонецЕсли;
				
				// Заменять будем только один раз. А в полученном графике на одну дату может быть несколько строк.
				Если Строка.Дата > ТекДата Тогда
					
					Если РезультатОповещения.ЗамещатьПолныйДень Тогда
						// Определим какие строки нужно вытеснить
						СтрокиЗамены = ГрафикРаботКалендарный.НайтиСтроки(Новый Структура("Дата",Строка.Дата));
						
						Для каждого СтрокаЗамены Из СтрокиЗамены Цикл
							
							ЗаменяемыеСтроки.Добавить(СтрокаЗамены);
							
						КонецЦикла;
						
					КонецЕсли;
					
					ТекДата = Строка.Дата;
					
				КонецЕсли;
					
				НоваяСтроки = ГрафикРаботКалендарный.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтроки,Строка);
				НоваяСтроки.День = ДеньГода(НоваяСтроки.Дата);
	
			КонецЕсли;
			
		КонецЦикла;
		
		// Удалим строки даты которых вошли в диапазон перезаполнения
		Для каждого Строка Из ЗаменяемыеСтроки Цикл
			
			ГрафикРаботКалендарный.Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ГрафикРаботКалендарный.Сортировать("Дата,НачалоРабочегоВремени");
	Модифицированность = Истина;
	ГрафикИзменен = Истина;
	
КонецПроцедуры 

// Процедура разбивает интервалы времени старого графика 
// исходя из интервалов нового так, что бы новый и старый графики не пересекались.
//
// Параметры:
//  НовыйГрафик   - ДанныеФормыЭлементКоллекции - Строка графика, на основании которой формируется другой интервал.
//              
//  Дата 		  - Дата - Дата, по которой происходит вытеснение
//
&НаСервере
Процедура РазбитьПериодыГрафика(НовыйГрафик,Дата)
	
	СтрокиНовогоГрафика  = НовыйГрафик.НайтиСтроки(Новый Структура("Дата",Дата));
	УдаляемыеСтроки = Новый Массив;
	НовыеСтроки = Новый Массив;
	
	Если СтрокиНовогоГрафика.Количество() = 0 Тогда
	    Возврат;
	КонецЕсли;  
	
	// Разобьем существующие интервалы по границам интервалов вытесняющего графика
	Для каждого СтрокаНовогоГрафика Из СтрокиНовогоГрафика Цикл
		УдаляемыеСтроки.Очистить();
		СтрокиСтарогоГрафика = ГрафикРаботКалендарный.НайтиСтроки(Новый Структура("Дата",Дата));
		Для каждого СтрокаСтарогоГрафика Из СтрокиСтарогоГрафика Цикл
			Если(СтрокаСтарогоГрафика.НачалоРабочегоВремени  >= СтрокаНовогоГрафика.НачалоРабочегоВремени И СтрокаСтарогоГрафика.НачалоРабочегоВремени <  СтрокаНовогоГрафика.КонецРабочегоВремени 	И СтрокаСтарогоГрафика.КонецРабочегоВремени  >  СтрокаНовогоГрафика.КонецРабочегоВремени) Тогда
				// Добавим в календарь новый интервал
				Если  (    СтрокаНовогоГрафика.ВидИнтервала <> СтрокаСтарогоГрафика.ВидИнтервала ИЛИ СтрокаНовогоГрафика.Смена <> СтрокаСтарогоГрафика.Смена)	Тогда
					ДобавитьСтрокуВГрафик(СтрокаСтарогоГрафика,СтрокаНовогоГрафика.КонецРабочегоВремени, СтрокаСтарогоГрафика.КонецРабочегоВремени);
				КонецЕсли;
				УдаляемыеСтроки.Добавить(СтрокиСтарогоГрафика.Найти(СтрокаСтарогоГрафика));
			ИначеЕсли   (СтрокаСтарогоГрафика.НачалоРабочегоВремени > СтрокаНовогоГрафика.НачалоРабочегоВремени  И СтрокаСтарогоГрафика.КонецРабочегоВремени = СтрокаНовогоГрафика.КонецРабочегоВремени)
					ИЛИ (СтрокаСтарогоГрафика.НачалоРабочегоВремени > СтрокаНовогоГрафика.НачалоРабочегоВремени  И СтрокаСтарогоГрафика.КонецРабочегоВремени < СтрокаНовогоГрафика.КонецРабочегоВремени)
					ИЛИ (СтрокаСтарогоГрафика.НачалоРабочегоВремени = СтрокаНовогоГрафика.НачалоРабочегоВремени  И СтрокаСтарогоГрафика.КонецРабочегоВремени = СтрокаНовогоГрафика.КонецРабочегоВремени)
					ИЛИ (СтрокаСтарогоГрафика.НачалоРабочегоВремени = СтрокаНовогоГрафика.НачалоРабочегоВремени  И СтрокаСтарогоГрафика.КонецРабочегоВремени < СтрокаНовогоГрафика.КонецРабочегоВремени)
					ИЛИ (СтрокаСтарогоГрафика.ВидДня <> СтрокаНовогоГрафика.ВидДня) Тогда
				
				УдаляемыеСтроки.Добавить(СтрокиСтарогоГрафика.Найти(СтрокаСтарогоГрафика));
				
			ИначеЕсли СтрокаСтарогоГрафика.НачалоРабочегоВремени < СтрокаНовогоГрафика.НачалоРабочегоВремени И СтрокаСтарогоГрафика.КонецРабочегоВремени  > СтрокаНовогоГрафика.КонецРабочегоВремени Тогда
				// Добавим в календарь новый интервал
				ДобавитьСтрокуВГрафик(СтрокаСтарогоГрафика,СтрокаСтарогоГрафика.НачалоРабочегоВремени, СтрокаНовогоГрафика.НачалоРабочегоВремени);
				ДобавитьСтрокуВГрафик(СтрокаСтарогоГрафика,СтрокаНовогоГрафика.КонецРабочегоВремени, СтрокаСтарогоГрафика.КонецРабочегоВремени);
				УдаляемыеСтроки.Добавить(СтрокиСтарогоГрафика.Найти(СтрокаСтарогоГрафика));
				
			ИначеЕсли СтрокаСтарогоГрафика.НачалоРабочегоВремени < СтрокаНовогоГрафика.НачалоРабочегоВремени И СтрокаСтарогоГрафика.КонецРабочегоВремени  >= СтрокаНовогоГрафика.КонецРабочегоВремени Тогда
				// Добавим в календарь новый интервал
				// Проверка отсекает начальный интервал при условии, что следующий за ним новый интервал аналогичен.
				Если  (    СтрокаНовогоГрафика.ВидИнтервала <> СтрокаСтарогоГрафика.ВидИнтервала ИЛИ СтрокаНовогоГрафика.Смена <> СтрокаСтарогоГрафика.Смена) Тогда
					ДобавитьСтрокуВГрафик(СтрокаСтарогоГрафика,СтрокаСтарогоГрафика.НачалоРабочегоВремени, СтрокаНовогоГрафика.НачалоРабочегоВремени);
				КонецЕсли;
				УдаляемыеСтроки.Добавить(СтрокиСтарогоГрафика.Найти(СтрокаСтарогоГрафика));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки  Цикл
			ГрафикРаботКалендарный.Удалить(СтрокиСтарогоГрафика[УдаляемаяСтрока]);
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры 

// Процедура добавляет в график новые интервалы времени 
// вместо вытесняемых.
//
// Параметры:
//  СтрокаСтарогоГрафика   - ДанныеФормыЭлементКоллекции - Строка графика, на основании которой формируется другой интервал.
//              
//  НачалоРабочегоВремени  - Дата - Начало нового интервала
//
//  КонецРабочегоВремени   - Дата - Конец нового интервала
//
//
&НаСервере
Процедура ДобавитьСтрокуВГрафик(СтрокаСтарогоГрафика,НачалоРабочегоВремени, КонецРабочегоВремени)

	// Добавим в календарь новый интервал
	НоваяСтрока = ГрафикРаботКалендарный.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСтарогоГрафика);
	НоваяСтрока.День                  = ДеньГода(НоваяСтрока.Дата);
	НоваяСтрока.НачалоРабочегоВремени = НачалоРабочегоВремени;
	НоваяСтрока.КонецРабочегоВремени  = КонецРабочегоВремени;
	НоваяСтрока.Продолжительность     = НачалоДня(НоваяСтрока.Продолжительность) + (НоваяСтрока.КонецРабочегоВремени - НоваяСтрока.НачалоРабочегоВремени) ;

КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПерезаполнитьСмещение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Обработаем событие в контексте сервера
		ПериодичностьПриИзмененииНаСервере();
		
		// Заполнение таблицы
		ЗаполнениеТаблицыСмещения();
		
		ПериодичностьСтарая =Объект.Периодичность;
		
		СформироватьНаименованиеПоУмолчанию();
		
	Иначе
		Объект.Периодичность = ПериодичностьСтарая;
	КонецЕсли;
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВремени(Список, ВремяНачало = Неопределено, ДобавлятьПредставлениеДлительности = Ложь)
	
	Список.Очистить();
	ПустаяДата = Дата("00010101");
	ДобавлятьДлительность = (ДобавлятьПредставлениеДлительности И ТипЗнч(ВремяНачало) = Тип("Дата"));
	
	Если ДобавлятьДлительность Тогда
		// Если ВремяНачало содержит так же и дату
		ЗначениеВремяНачало = ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	Иначе
		ЗначениеВремяНачало = Неопределено
	КонецЕсли;
	
	ТекВремя = ?(ЗначениеВремяНачало = Неопределено, ПустаяДата, ЗначениеВремяНачало + 60 * 60);
	
	Пока НачалоДня(ТекВремя) <= НачалоДня(ПустаяДата) Цикл
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		
		Если ДобавлятьДлительность Тогда
			ПредставлениеПериодаВремени = ПолучитьПредставлениеПериодаВремени(ЗначениеВремяНачало, ТекВремя);
			Если ЗначениеЗаполнено(ПредставлениеПериодаВремени) Тогда
				ПредставлениеВремени = ПредставлениеВремени + " (" + ПредставлениеПериодаВремени + ")";
			КонецЕсли;
		КонецЕсли;
		
		Список.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + 60 * 60;
		
	КонецЦикла;
	
КонецПроцедуры 

// Функция возвращает представление периода времени (1,5 часа, 6 часов, 30 минут, ...).
//
// Параметры:
//  ВремяНачало    - Дата - Время начала
//  ВремяОкончание - Дата - Время окончания.
//
// Возвращаемое значение:
//  Строка - Представление времени.
//
&НаКлиенте
Функция ПолучитьПредставлениеПериодаВремени(ВремяНачало, ВремяОкончание)
	
	ПустаяДата = Дата("00010101");
	// На случай если время содержит так же и дату
	ЗначениеВремяНачало		= ПустаяДата + (ВремяНачало - НачалоДня(ВремяНачало));
	ЗначениеВремяОкончание	= ПустаяДата + (ВремяОкончание - НачалоДня(ВремяОкончание));
	ВремяНачалоВМинутах		= Цел((ЗначениеВремяНачало - НачалоДня(ЗначениеВремяНачало)) / 60);
	ВремяОкончанияВМинутах	= Цел((ЗначениеВремяОкончание - НачалоДня(ЗначениеВремяОкончание)) / 60);
	РазницаВМинутах = ВремяОкончанияВМинутах - ВремяНачалоВМинутах;
	Если РазницаВМинутах <= 0 Тогда
		Возврат "";
	КонецЕсли;
	// 1 минута
	// 2 - 4 минуты
	// 5 и далее - минут
	// 1 час
	// 2 - 4 часа
	// 5 часов
	// 5,5 часов
	Если РазницаВМинутах < 60 Тогда
		ВремяСтрокой = Формат(РазницаВМинутах, "ЧДЦ=0; ЧН=0; ЧГ=");
		Если РазницаВМинутах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'минута'");
		ИначеЕсли РазницаВМинутах <= 4 Тогда
			ПредставлениеВремя = НСтр("ru = 'минуты'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'минут'");
		КонецЕсли;
	Иначе
		РазницаВЧасах = РазницаВМинутах / 60;
		Если РазницаВЧасах = Цел(РазницаВМинутах / 60) Тогда
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=0; ЧРД=,; ЧН=0; ЧГ=");
		Иначе
			ВремяСтрокой = Формат(РазницаВЧасах, "ЧДЦ=1; ЧРД=,; ЧН=0; ЧГ=");
		КонецЕсли;
		Если РазницаВЧасах = 1 Тогда
			ПредставлениеВремя = НСтр("ru = 'час'");
		ИначеЕсли РазницаВЧасах <= 4 Тогда
			ПредставлениеВремя = НСтр("ru = 'часа'");
		Иначе
			ПредставлениеВремя = НСтр("ru = 'часов'");
		КонецЕсли;
	КонецЕсли;
	Возврат ВремяСтрокой + " " + ПредставлениеВремя;
	
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьПредставлениеДня(ТекущиеДанные)
	
	// Пометка дней недели для графиков с указываемой датой начала
	ТекстЯчейкиДень = "";
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ТекущиеДанные.ПредставлениеДня = ТекстЯчейкиДень + Формат(
					НачалоНедели(Объект.ДатаНачала) + ((ТекущиеДанные.НомерСтроки-1)*24*3600), 
					"ДФ=ддд; ДП=Пн"
					);
		
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Произвольный")
		ИЛИ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		
		ТекущиеДанные.ПредставлениеДня = ТекстЯчейкиДень + Формат(
			Объект.ДатаНачала + ((ТекущиеДанные.НомерСтроки-1)*24*60*60),
			"ДФ=дд.ММ;"
		);
		
	Иначе
		
		ТекущиеДанные.ПредставлениеДня = ТекстЯчейкиДень + ТекущиеДанные.НомерСтроки;
		
	КонецЕсли;
	
КонецПроцедуры 
// Процедура заполняет таблицы смещения
&НаКлиенте
Процедура ЗаполнениеТаблицыСмещения()
	
	Смена = ПредопределенноеЗначение("Справочник.Смены.ОсновнаяСменаКомпании");
	НачалоРабочегоВремени = "00010101090000";
	КонецРабочегоВремени = "00010101180000";
	Продолжительность = "00010101080000";
	
	Если Объект.Периодичность.Пустая() Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не указана периодичность'"));
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Произвольный") Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='При периодичности по циклам шаблон графика заполняется вручную'"));
		Объект.Смещение.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Если (Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") 
		ИЛИ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада"))
		И Объект.ДатаНачала = '00010101' Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не указана дата начала'"));
		Возврат;
		
	КонецЕсли;
	
	Объект.Смещение.Очистить();
	
	// Определение максимального смещения
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		КоличествоСмещений = 6;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		КоличествоСмещений = 9;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		КоличествоСмещений = 30;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		КоличествоСмещений = 91;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		КоличествоСмещений = 365;
	КонецЕсли;
	
	Для ПеременнаяСмещения = 0 По КоличествоСмещений Цикл
		СтрокаСмещение = Объект.Смещение.Добавить();
		СтрокаСмещение.Смена = Смена;
		СтрокаСмещение.НачалоРабочегоВремени = НачалоРабочегоВремени;
		СтрокаСмещение.КонецРабочегоВремени = КонецРабочегоВремени;
		СтрокаСмещение.Продолжительность = Продолжительность;
		Если (Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") И ПеременнаяСмещения = 5) 
			ИЛИ (Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") И ПеременнаяСмещения = 6) Тогда
			СтрокаСмещение.УдалитьВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Выходной");
			СтрокаСмещение.Рабочий = Ложь;
			СтрокаСмещение.Смена = ПредопределенноеЗначение("Справочник.Смены.ПустаяСсылка");
			СтрокаСмещение.НачалоРабочегоВремени = 0;
			СтрокаСмещение.КонецРабочегоВремени  = 0;
			СтрокаСмещение.Продолжительность = 0;
		Иначе
			СтрокаСмещение.УдалитьВидДня = ПредопределенноеЗначение("Перечисление.ВидДня.Рабочий");
			СтрокаСмещение.Рабочий = Истина;
			СтрокаСмещение.УдалитьБанковский = Истина;
		КонецЕсли;
		
		// исключения
		// квартал
		Если (Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"))
			И (ПеременнаяСмещения = 29 ИЛИ ПеременнаяСмещения = 30 ИЛИ ПеременнаяСмещения = 58 ИЛИ ПеременнаяСмещения = 59
			ИЛИ ПеременнаяСмещения = 60 ИЛИ ПеременнаяСмещения = 61 ИЛИ ПеременнаяСмещения = 89 ИЛИ ПеременнаяСмещения = 90 ИЛИ ПеременнаяСмещения = 91) Тогда
			
			СтрокаСмещение.Исключение = Истина;
			
		КонецЕсли;
		// месяц
		Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")
			И ПеременнаяСмещения >= 28 Тогда
			
			СтрокаСмещение.Исключение = Истина;
			
		КонецЕсли;
		// год
		Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") И ПеременнаяСмещения = 59 Тогда
			СтрокаСмещение.Исключение = Истина;
		КонецЕсли;
		
		// Пометка дней недели для графиков с указываемой датой начала
		ЗаполнитьПредставлениеДня(СтрокаСмещение);
		
		// Пометка исключительных дней
		Если СтрокаСмещение.Исключение Тогда
			ТекстЯчейкиДень = "! " + ТекстЯчейкиДень;
			СтрокаСмещение.ПредставлениеДня = "! " + СтрокаСмещение.ПредставлениеДня;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПодвал(Объект.Смещение,ПродолжительностьШаблона);
	Модифицированность = Истина;
	
КонецПроцедуры

// Перезаполнение таблицы смещения
&НаКлиенте
Процедура ПерезаполнениеТаблицыСмещения(ПараметрыПоУмолчанию)
	
	Для Каждого СтрокаСмещение Из Объект.Смещение Цикл
		
		Если СтрокаСмещение.Рабочий Тогда
			
			СтрокаСмещение.Смена = ?(ПараметрыПоУмолчанию.Свойство("Смена"),ПараметрыПоУмолчанию.Смена,ПредопределенноеЗначение("Справочник.Смены.ОсновнаяСменаКомпании"));
			СтрокаСмещение.НачалоРабочегоВремени = ?(ПараметрыПоУмолчанию.Свойство("НачалоРабочегоВремени"),ПараметрыПоУмолчанию.НачалоРабочегоВремени,("00010101090000"));
			СтрокаСмещение.КонецРабочегоВремени = ?(ПараметрыПоУмолчанию.Свойство("КонецРабочегоВремени"),ПараметрыПоУмолчанию.КонецРабочегоВремени,("00010101180000"));
			СтрокаСмещение.Продолжительность = ?(ПараметрыПоУмолчанию.Свойство("Продолжительность"),ПараметрыПоУмолчанию.Продолжительность,("00010101080000"));
			
		КонецЕсли;
		
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры //ПерезаполнениеТаблицыСмещения()

// Процедура обновляет текст подвала.
&НаКлиенте
Процедура ОбновитьПодвал(Таблица, Продолжительность)
	
	КоличествоСекунд = 0;
	Для Каждого Строка Из Таблица Цикл
		КоличествоСекунд = КоличествоСекунд + (Строка.Продолжительность - '00010101');
	КонецЦикла;
	КоличествоЧасов = Окр(КоличествоСекунд/3600, 1);
	
	Продолжительность = "" + КоличествоЧасов + " ч";
	
	РабочиеДни = Объект.Смещение.НайтиСтроки(Новый Структура("Рабочий",Истина));
	ТекстПодвала = "" + РабочиеДни.Количество() + " рабочих";
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияЗаписиГрафикаРабот(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если НЕ Модифицированность И НЕ Объект.Ссылка.Пустая() Тогда
			Если ДополнительныеПараметры = "ЗаполнитьГрафикиРабот" Тогда
				ОткрытьЗаполнениеГрафиковРабот();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьЗаполнениеГрафиковРабот()
	
	ОбработчикПерехвата = Новый ОписаниеОповещения(
		"ОбработкаРезультатаОповещенияКомандыГрафикРаботКалендарный",
		ЭтотОбъект, 
		"Заполнить"
	);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ГрафикРаботы",Объект.Ссылка);
	ПараметрыФормы.Вставить("Заполнить",Истина);

	ОткрытьФорму(
		"Справочник.ГрафикиРаботы.Форма.Заполнение",
		ПараметрыФормы,
		ЭтотОбъект,
		,,,
		ОбработчикПерехвата,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры 

// Процедура устанавливает пометку на элементе "Исключить"(СмещениеКомандаИсключитьИнтервал).
&НаКлиенте
Процедура ОформлениеКомандыИсключить(Использовать)
	
	Элементы.СмещениеКомандаИсключитьИнтервал.Пометка = Использовать;
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьНаименованиеПоУмолчанию(ПараметрыДействия=Неопределено)
	
	УправлениеДиалогомСервер.СформироватьЗначениеПоУмолчанию(ЭтотОбъект,Объект, ПараметрыДействия);
	
КонецПроцедуры 
#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ВидимостьДатыНачала = ЗначениеЗаполнено(Объект.Периодичность);
	ВидимостьДатыНачала = ВидимостьДатыНачала И (Объект.Периодичность = Перечисления.Периодичность.Декада ИЛИ Объект.Периодичность = Перечисления.Периодичность.Произвольный);
	Элементы.ДатаНачала.ТолькоПросмотр = НЕ ВидимостьДатыНачала;
	
	Элементы.УчетПраздников.ТолькоПросмотр     = НЕ (ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) И (Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Произвольный") ИЛИ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада"))) ;
	Элементы.ДетальноеРедактирование.Видимость = НЕ Объект.Фиксированный;
	
	ДоступностьКоманд = Объект.Периодичность = Перечисления.Периодичность.Произвольный;
	
	Элементы.СмещениеСкопировать.Доступность = ДоступностьКоманд;
	Элементы.СмещениеУдалить.Доступность     = ДоступностьКоманд;
	Элементы.СмещениеДобавить.Доступность    = ДоступностьКоманд;
	
	Элементы.СмещениеКонтекстноеМенюСкопировать.Видимость = ДоступностьКоманд;
	Элементы.СмещениеКонтекстноеМенюУдалить.Видимость     = ДоступностьКоманд;
	Элементы.СмещениеКонтекстноеМенюДобавить.Видимость    = ДоступностьКоманд;
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеПредставлениеДня.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеРабочий.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеСмена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеНачалоРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеКонецРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеПродолжительность.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеКомментарий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Смещение.НеИспользовать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Смещение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Смещение.Рабочий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВидДняПроизводственногоКалендаряВыходнойЦвет);
	   	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеНачалоРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеКонецРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеПродолжительность.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Смещение.Смена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеПредставлениеДня.Имя);
	 
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Смещение.Исключение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеНачалоРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеКонецРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеПродолжительность.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СмещениеСмена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Смещение.Рабочий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйДата.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйДень.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйВидДня.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйСмена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйНачалоРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйКонецРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйПродолжительность.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйВидИнтервала.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйКомментарий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикРаботКалендарный.ВидДня");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидДня.Праздник;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВидДняПроизводственногоКалендаряПраздникЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйДата.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйДень.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйВидДня.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйСмена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйНачалоРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйКонецРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйПродолжительность.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйВидИнтервала.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйКомментарий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикРаботКалендарный.ВидДня");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидДня.Выходной;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВидДняПроизводственногоКалендаряВыходнойЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйДата.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйДень.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйВидДня.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйСмена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйНачалоРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйКонецРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйПродолжительность.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйВидИнтервала.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйКомментарий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикРаботКалендарный.ВидДня");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидДня.Предпраздничный;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВидДняПроизводственногоКалендаряПредпраздничныйЦвет);
		
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйСмена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйНачалоРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйКонецРабочегоВремени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйПродолжительность.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйВидИнтервала.Имя);
		
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикРаботКалендарный.ВидДня");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидДня.Праздник;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикРаботКалендарный.ВидДня");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидДня.Выходной;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикРаботКалендарныйДата.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикРаботКалендарный.Дата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры // УстановитьУсловноеОформление()

#КонецОбласти

#КонецОбласти

