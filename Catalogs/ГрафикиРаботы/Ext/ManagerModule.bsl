// Модуль менеджера справочника "Графики работы"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ГрафикРаботыКомпании";
	Элемент.Код                       = "000000001";
	Элемент.Наименование              = НСтр("ru = 'График работы компании'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Периодичность             = Перечисления.Периодичность.Произвольный;
	Элемент.ДатаНачала                = ТекущаяДатаСеанса();

КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты справочника
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("Периодичность");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция читает данные производственного календаря из регистра
//
// Параметры
//  ПроизводственныйКалендарь - Ссылка на текущий элемент справочника
//  НомерГода                 - Номер года, за который необходимо прочитать производственный календарь.
//
// Возвращаемое значение
//  ДанныеПроизводственногоКалендаря - таблица значений, в которой хранятся сведения о виде дня
//                                     на каждую дату календаря.
//
Функция ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарь, НачалоГрафика, ОкончаниеГрафика) Экспорт
	
	СписокЛет = Новый Массив;
	СписокЛет.Добавить(Год(НачалоГрафика));
	СледующийГод = Год(НачалоГрафика)+1;
	Для Год = СледующийГод По Год(ОкончаниеГрафика) Цикл
		СписокЛет.Добавить(Год);
		СледующийГод = Год+1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("СписокЛет", СписокЛет);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПроизводственногоКалендаря.Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня,
	|	ДанныеПроизводственногоКалендаря.ДатаПереноса
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год В(&СписокЛет)
	|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СтруктураИзМассива(Массив)
	
	Структура = Новый Структура;
	Сч = 0;
	Для Каждого Элемент Из Массив Цикл
		Структура.Вставить("Ключ" + Строка(Сч), Элемент);
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция МассивИзСтруктуры(Структура) Экспорт
	
	Массив = Новый Массив;
	
	Для Каждого Элемент Из Структура Цикл
		Массив.Добавить(Элемент.Значение);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Получение ТЗ описывающую полную таблицу графика
//
// Параметры:
//  График           - ТаблицаЗначений - График по которому вычисляется продолжительность
//  НачалоГрафика    - Дата            - Дата начала вычисления продолжительности
//  ОкончаниеГрафика - Дата            - Дата окончания вычисления продолжительности
//  ВыходныеДни      - Структура       - структура, содержащая выходные дни:
//     * Суббота     - Булево          - Истина, если суббота выходной,
//     * Воскресенье - Булево          - Истина, если воскресенье - выходной,
//  ВидыИнтервалов   - Массив          - Массив либо элемент перечисления вид интервала,
//                                       для которого вычисляется продолжительность
//  ВидыДней         - Массив          - Массив либо элемент перечисления вид дня,
//                                       для которого вычисляется продолжительность
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица графика.
//
Функция ПолучитьГрафик(
	График,
	Знач НачалоГрафика,
	Знач ОкончаниеГрафика,
	ВыходныеДни,
	Знач ВидыИнтервалов = Неопределено,
	Знач ВидыДней = Неопределено,
	РасчетШаблона = Ложь) Экспорт
	
	// приводим виды интервалов и дней к массиву
	Если ТипЗнч(ВидыИнтервалов) <> Тип("Массив") И ВидыИнтервалов <> Неопределено Тогда
		ВидыИнтервалов_ = ВидыИнтервалов;
		ВидыИнтервалов = Новый Массив;
		ВидыИнтервалов.Добавить(ВидыИнтервалов_);
	КонецЕсли;
	Если ВидыИнтервалов <> Неопределено Тогда
		ВидыИнтервалов = СтруктураИзМассива(ВидыИнтервалов);
	КонецЕсли;
	
	Если ТипЗнч(ВидыДней) <> Тип("Массив") И ВидыДней<>Неопределено Тогда
		ВидыДней_ = ВидыДней;
		ВидыДней = Новый Массив;
		ВидыДней.Добавить(ВидыДней_);
	КонецЕсли;
	Если ВидыДней <> Неопределено Тогда
		ВидыДней = СтруктураИзМассива(ВидыДней);
	КонецЕсли;
	
	Возврат ГрафикиРаботПовтИсп.ПолучитьГрафик(
		График, НачалоГрафика, ОкончаниеГрафика, ВидыИнтервалов, ВидыДней, РасчетШаблона, ВыходныеДни);
	
КонецФункции //ПолучитьГрафик()

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события формирует наименование.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Функция СформироватьНаименованиеПоУмолчанию(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Наименование = "";
	
	Если ЗначениеЗаполнено(Объект.Периодичность) Тогда
		
		Наименование = ?(Объект.Периодичность = Перечисления.Периодичность.Произвольный,
							НСтр("ru = 'По циклам'") + " " + Объект.Смещение.Количество(),
							Строка(Объект.Периодичность));
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции //СформироватьНаименованиеПоУмолчанию()

// Обработчик события возникающего при изменении данных реквизита "Смена по умолчанию".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура СменаПоУмолчаниюПриИзменении(Объект, Строка = Неопределено, ПараметрыДействия=Неопределено) Экспорт
	
	// Сформируем временные интервалы
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СменыИнтервалы.НачалоРабочегоВремени КАК НачалоРабочегоВремени,
	               |	СменыИнтервалы.КонецРабочегоВремени КАК КонецРабочегоВремени,
	               |	ВЫБОР
	               |		КОГДА СменыИнтервалы.ВидИнтервала.РабочийИнтервал
	               |			ТОГДА СменыИнтервалы.Продолжительность
	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |	КОНЕЦ КАК Продолжительность
	               |ИЗ
	               |	Справочник.Смены.Интервалы КАК СменыИнтервалы
	               |ГДЕ
	               |	СменыИнтервалы.Ссылка = &Ссылка
	               |ИТОГИ
	               |	МИНИМУМ(НачалоРабочегоВремени),
	               |	МАКСИМУМ(КонецРабочегоВремени)
	               |ПО
	               |	ОБЩИЕ";
	Запрос.УстановитьПараметр("Ссылка", ?(Строка = Неопределено, Объект.Смена,Строка.Смена));
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Следующий() Тогда
		ВыборкаДетальная = Выборка.Выбрать();
		Продолжительность = 0;
		
		Пока ВыборкаДетальная.Следующий() Цикл
			Продолжительность = Продолжительность + (ВыборкаДетальная.Продолжительность-'00010101');
		КонецЦикла;
		
		Если Строка = Неопределено Тогда
			Объект.НачалоРабочегоВремени = Выборка.НачалоРабочегоВремени;
			Объект.КонецРабочегоВремени = Выборка.КонецРабочегоВремени;
			Объект.Продолжительность = '00010101' + Продолжительность;
		Иначе
			Строка.НачалоРабочегоВремени = Выборка.НачалоРабочегоВремени;
			Строка.КонецРабочегоВремени = Выборка.КонецРабочегоВремени;
			Строка.Продолжительность = '00010101' + Продолжительность
		КонецЕсли;
		
	ИначеЕсли НЕ Строка = Неопределено И Строка.Смена = Справочники.Смены.ПустаяСсылка() Тогда
		
		Строка.НачалоРабочегоВремени = '00010101';
		Строка.КонецРабочегоВремени = '00010101';
		Строка.Продолжительность = '00010101';
		
	КонецЕсли;
	
КонецПроцедуры //СменаПоУмолчаниюПриИзмененииОбъект()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСмещение

// Рассчитывает продолжительность временного интервала для табличной части.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура РассчитатьПродолжительностьИнтервалаСмешения(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура") И ПараметрыДействия.РасчетПродолжительности Тогда
		ПродолжительностьМаксимум = 24*3600 - (Строка.НачалоРабочегоВремени - Строка.КонецРабочегоВремени);
		ПродолжительностьНовая = Строка.Продолжительность - '00010101';
		Если ПродолжительностьНовая > ПродолжительностьМаксимум Тогда
			Строка.Продолжительность = '00010101' + ПродолжительностьМаксимум;
		КонецЕсли;
		
		Строка.КонецРабочегоВремени = '00010101' + (Строка.НачалоРабочегоВремени - '00010101')+(Строка.Продолжительность - '00010101');
		
	Иначе
		
		// Установим окончание рабочего времени
		Если Строка.НачалоРабочегоВремени <> '00010101' И Строка.КонецРабочегоВремени = '00010101' Тогда
			Строка.КонецРабочегоВремени = '00010101235959';
			РассчитатьПродолжительностьИнтервалаСмешения(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
		
		// Рассчитаем продолжительность
		Если Строка.НачалоРабочегоВремени > Строка.КонецРабочегоВремени Тогда
			Строка.Продолжительность = '00010101' + (24*3600 - (Строка.НачалоРабочегоВремени - Строка.КонецРабочегоВремени));
		Иначе
			Строка.Продолжительность = '00010101' + (Строка.КонецРабочегоВремени - Строка.НачалоРабочегоВремени);
			Если Строка.КонецРабочегоВремени = '00010101235959' Тогда
				Строка.Продолжительность = Строка.Продолжительность + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры //РассчитатьПродолжительностьИнтервалаСмешения()

// Обработчик события возникающего при изменении данных реквизита "Рабочий".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура СмещениеРабочийПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ Строка.Рабочий И ЗначениеЗаполнено(Строка.Смена) Тогда
		Строка.Смена = Справочники.Смены.ПустаяСсылка();
		СменаПоУмолчаниюПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры //СмещениеРабочийПриИзменении()

#КонецОбласти

#КонецОбласти

#КонецЕсли