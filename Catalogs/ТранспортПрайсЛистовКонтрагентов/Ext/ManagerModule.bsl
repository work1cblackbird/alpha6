// Модуль менеджера справочника "Транспорт прайс-листов контрагентов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Получить представление транспорта
//
// Параметры:
//  Объект	 - Объект	 - Объект.
// 
// Возвращаемое значение:
//  Строка - Представление транспорта.
//
Функция ПолучитьПредставлениеТранспорта(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Если Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.HTTP
			ИЛИ Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.HTTPS Тогда
			
			Возврат СтрШаблон(НСтр("ru = 'Протокол: %1 сервер: %2'"), Объект.ВидТранспорта, Объект.URLСервера);
			
		Иначе
			
			Возврат СтрШаблон(НСтр("ru = 'Протокол: %1 сервер: %2 порт: %3'"),
				Объект.ВидТранспорта, Объект.URLСервера, Объект.Порт);
			
		КонецЕсли;
	Иначе
		
		Возврат НСтр("ru = 'Транспорт не выбран'");
		
	КонецЕсли;
	
КонецФункции

// Функция - Прочитать настройки стандартных почтовых сервисов.
// 
// Возвращаемое значение:
//  Структура - Структура сервисов.
//
Функция ПрочитатьНастройкиСтандартныхПочтовыхСервисов() Экспорт
	
	Макет = Справочники.ТранспортПрайсЛистовКонтрагентов.ПолучитьМакет("НастройкиСтандартныхПочтовыхСервисов");
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	СтруктураСервисов = Новый Структура;
	Для Каждого Сервис Из Результат["StandartServis"] Цикл
		Если НЕ СтруктураСервисов.Свойство(Сервис["protocol"]) Тогда
			СтруктураСервисов.Вставить(Сервис["protocol"], Новый Массив);
		КонецЕсли;
		
		НастройкиСервиса = Новый Структура;
		НастройкиСервиса.Вставить("Имя"        , Сервис["name"]);
		НастройкиСервиса.Вставить("URLСервера" , Сервис["server"]);
		НастройкиСервиса.Вставить("Порт"       , Сервис["port"]);
		НастройкиСервиса.Вставить("SSL"        , Сервис["ssl"]);
		НастройкиСервиса.Вставить("Таймаут"    , 60);
		
		СтруктураСервисов[Сервис["protocol"]].Добавить(НастройкиСервиса);
	КонецЦикла;
	
	Возврат СтруктураСервисов;
	
КонецФункции

// Функция - Создать подключение к почте
//
// Параметры:
//  Объект	 - Объект	 - Объект.
// 
// Возвращаемое значение:
//  ИнтернетПочта - ИнтернетПочта.
//
Функция СоздатьПодключениеКПочте(Объект) Экспорт
	
	Почта = Новый ИнтернетПочта();
	
	Попытка
		Почта.Подключиться(
			ЗаполнитьПочтовыйПрофиль(Объект, Строка(Объект.ВидТранспорта)),
			ПротоколИнтернетПочты[Строка(Объект.ВидТранспорта)]);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат Почта;
	
КонецФункции

// Функция - Создать FTPСоединение
//
// Параметры:
//  Объект	 - Объект	 - Объект.
// 
// Возвращаемое значение:
//  FTPСоединение - FTPСоединение.
//
Функция СоздатьFTPСоединение(Объект) Экспорт
	Перем ЗащищенноеСоединение;
	
	ПортПоУмолчанию = 21;
	
	Если Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.FTPS Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		ПортПоУмолчанию = 990;
	КонецЕсли;
	
	Попытка
		FTPСоединение = Новый FTPСоединение(
			КодироватьСтроку(Объект.URLСервера, СпособКодированияСтроки.КодировкаURL),
			?(ЗначениеЗаполнено(Объект.Порт), Объект.Порт, ПортПоУмолчанию),
			Объект.Логин,
			Объект.Пароль,
			,
			Объект.ПассивныйРежим,
			?(Объект.Таймаут > 0, Объект.Таймаут, 30),
			ЗащищенноеСоединение);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат FTPСоединение;
КонецФункции

// Функция - Создать HTTPСоединение
//
// Параметры:
//  Объект		 - Объект	 - Объект
//  СтруктураURI - Строка - Структура унифицированного идентификатора ресурса.
// 
// Возвращаемое значение:
//  HTTPСоединение - HTTPСоединение.
//
Функция СоздатьHTTPСоединение(Объект, СтруктураURI = Неопределено) Экспорт
	
	Перем ЗащищенноеСоединение;
	
	ПортПоУмолчанию = 80;
	
	Если Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.HTTPS Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		ПортПоУмолчанию = 443;
	КонецЕсли;
	
	Если СтруктураURI = Неопределено Тогда
		СтруктураURI = СтруктураURI(Объект.URLСервера);
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			?(ЗначениеЗаполнено(СтруктураURI.Порт), СтруктураURI.Порт, ПортПоУмолчанию),
			Объект.Логин,
			Объект.Пароль,
			,
			?(Объект.Таймаут > 0, Объект.Таймаут, 30),
			ЗащищенноеСоединение);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат HTTPСоединение;
	
КонецФункции

// Функция - Загрузить файлы по маске
//
// Параметры:
//  Объект					 - Объект	 - Объект
//  Маска					 - Строка	 - Маска
//  Каталог					 - Строка	 - То место где лежит файл
//  ПараметрыПоследнегоФайла - Структура - Параметры файла.
// 
// Возвращаемое значение:
//  Структура - ИнформацияОФайле.
//
Функция ЗагрузитьФайлыПоМаске(Объект, Маска, Каталог, ПараметрыПоследнегоФайла) Экспорт
	
	Если Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.FTP
		ИЛИ Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.FTPS Тогда
		
		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Скачивание файла по ftp.'"));
		Возврат ЗагрузитьФайлыПоFTP(Объект, Маска, Каталог, ПараметрыПоследнегоФайла);
		
	ИначеЕсли Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.HTTP
		ИЛИ Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.HTTPS Тогда
		
		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Скачивание файла по http.'"));
		Возврат ЗагрузитьФайлыПоHTTP(Объект, Маска, Каталог, ПараметрыПоследнегоФайла);
		
	ИначеЕсли Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.IMAP
		ИЛИ Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.POP3 Тогда
		
		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Скачивание файла из почты.'"));
		Возврат ЗагрузитьФайлыИзПочты(Объект, Маска, Каталог, ПараметрыПоследнегоФайла);
		
	КонецЕсли;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// АПК:299-выкл Обязательный программный интерфейс

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("Код");
	ОбязательныеРеквизиты.Добавить("ВидТранспорта");
	ОбязательныеРеквизиты.Добавить("URLСервера");
	
	Если Объект.ТребуетсяАвторизация Тогда
		ОбязательныеРеквизиты.Добавить("Логин");
		ОбязательныеРеквизиты.Добавить("Пароль");
	КонецЕсли;
	
	Если Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.POP3 Тогда
		ОбязательныеРеквизиты.Добавить("СпособАутентификацииPOP3");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// АПК:299-вкл

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОчиститьДанные(Объект)
	
	ОчищаемыеРеквизиты = Новый Массив;
	ОчищаемыеРеквизиты.Добавить("Каталог");
	ОчищаемыеРеквизиты.Добавить("URLСервера");
	
	Для Каждого Реквизит Из ОчищаемыеРеквизиты Цикл
		Объект[Реквизит] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьНаименование(Объект) Экспорт
	
	Возврат СтрШаблон("%1 <%2>", Объект.ВидТранспорта, Объект.URLСервера);
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//     СтрокаURI - Строка - ссылка на ресурс в формате:
//                          <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//     Структура - составные части URI согласно формату:
//         * Схема         - Строка.
//         * Логин         - Строка.
//         * Пароль        - Строка.
//         * ИмяСервера    - Строка - часть <хост>:<порт> входного параметра.
//         * Хост          - Строка.
//         * Порт          - Строка.
//         * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> входного параметра.
//         * ИмяФайла      - Строка.
//
Функция СтруктураURI(Знач СтрокаURI)
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	ИмяФайла = "";
	Если ЗначениеЗаполнено(ПутьНаСервере) Тогда
		Если СтрНайти(ПутьНаСервере, ".") > 0 Тогда
			РазделеннаяСтрока = СтрРазделить(ПутьНаСервере, "/");
			ИмяФайла          = РазделеннаяСтрока[РазделеннаяСтрока.ВГраница()];
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема"         , Схема);
	Результат.Вставить("Логин"         , Логин);
	Результат.Вставить("Пароль"        , Пароль);
	Результат.Вставить("ИмяСервера"    , ИмяСервера);
	Результат.Вставить("Хост"          , Хост);
	Результат.Вставить("Порт"          , ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере" , ПутьНаСервере);
	Результат.Вставить("ИмяФайла"      , ИмяФайла);
	
	Возврат Результат;
	
КонецФункции // СтруктураURI()

Функция ПолучитьHTTPОтвет(ПутьКФайлуНаСервере, ПутьДляСохранения, Соединение, Заголовки)
	
	HTTPЗапрос = Новый HTTPЗапрос(ПутьКФайлуНаСервере, Заголовки);
	HTTPЗапрос.Заголовки.Вставить("Accept-Charset", "utf-8");
	HTTPОтвет = Соединение.Получить(HTTPЗапрос, ПутьДляСохранения);  
		
	Если HTTPОтвет.КодСостояния = 301 Тогда
		ПутьКФайлуНаСервере = HTTPОтвет.Заголовки["Location"];
		HTTPОтвет = ПолучитьHTTPОтвет(ПутьКФайлуНаСервере, ПутьДляСохранения, Соединение, Заголовки);
	КонецЕсли;
	
	Возврат HTTPОтвет;
	
КонецФункции // ПолучитьHTTPОтвет()

Функция ЗаполнитьПочтовыйПрофиль(Объект, Протокол)
	
	ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	ПочтовыйПрофиль["АдресСервера" + Протокол]    = Объект.URLСервера;
	ПочтовыйПрофиль["Порт" + Протокол]            = Объект.Порт;
	ПочтовыйПрофиль["ИспользоватьSSL" + Протокол] = Объект.SSL;
	
	Если Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.POP3 Тогда
		ПочтовыйПрофиль.Пользователь       = Объект.Логин;
		ПочтовыйПрофиль.Пароль             = Объект.Пароль;
		ПочтовыйПрофиль.АутентификацияPOP3 = СпособPOP3Аутентификации[Строка(Объект.СпособАутентификацииPOP3)];
	Иначе
		ПочтовыйПрофиль["Пользователь" + Протокол] = Объект.Логин;
		ПочтовыйПрофиль["Пароль" + Протокол]       = Объект.Пароль;
	КонецЕсли;
	
	ПочтовыйПрофиль.Таймаут = Объект.Таймаут;
	
	Возврат ПочтовыйПрофиль;
	
КонецФункции

Функция ЗагрузитьФайлыИзПочты(Объект, Маска, Каталог, ПараметрыПоследнегоФайла)
	ПрайсЛист = ПараметрыПоследнегоФайла.ПрайсЛист;
	
	Соединение = СоздатьПодключениеКПочте(Объект);
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоIMAP = (Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.IMAP);
	
	Если ЭтоIMAP И ЗначениеЗаполнено(Объект.Каталог) Тогда
		
		Соединение.ТекущийПочтовыйЯщик = Объект.Каталог;
		
	КонецЕсли;
	
	// Для IMAP ящиков это работает. Может когда-нибудь и POP3 тоже станут поддерживать отборы!
	СтруктураЗаголовков = Новый Структура;
	Если ЗначениеЗаполнено(ПараметрыПоследнегоФайла.ДатаФайла) Тогда
		СтруктураЗаголовков.Вставить("AfterDateOfPosting", ПараметрыПоследнегоФайла.ДатаФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрайсЛист.ФильтрАдресОтправителя) Тогда
		СтруктураЗаголовков.Вставить("From", ПрайсЛист.ФильтрАдресОтправителя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрайсЛист.ФильтрТемаПисьма) Тогда
		СтруктураЗаголовков.Вставить("Subject", ПрайсЛист.ФильтрТемаПисьма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрайсЛист.ФильтрТекстПисьма) Тогда
		СтруктураЗаголовков.Вставить("Body", ПрайсЛист.ФильтрТекстПисьма);
	КонецЕсли;
	
	ЗаголовкиБезОтборов = Ложь;
	Попытка
		Заголовки = Соединение.ПолучитьЗаголовки(СтруктураЗаголовков);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		// При подключении по IMAP к почтовым серверам mail.ru при установке фильтров по заголовкам падает с ошибкой.
		//  Проверял на yandex.ru - отборы отрабатывают без ошибок.
		КраткоеОписаниеОшибки = КраткоеПредставлениеОшибки(ОписаниеОшибки);
		Если ЭтоIMAP И СтрНайти(КраткоеОписаниеОшибки,"Unsupported search criterion") <> 0 Тогда
			ЗаголовкиБезОтборов = Истина;
			СтруктураЗаголовков = Новый Структура;
			Если ЗначениеЗаполнено(ПараметрыПоследнегоФайла.ДатаФайла) Тогда
				СтруктураЗаголовков.Вставить("AfterDateOfPosting", ПараметрыПоследнегоФайла.ДатаФайла);
			КонецЕсли;
			Заголовки = Соединение.ПолучитьЗаголовки(СтруктураЗаголовков);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
		
	КонецПопытки;
	
	ТаблицаЗаголовков = Новый ТаблицаЗначений;
	ТаблицаЗаголовков.Колонки.Добавить("ЗаголовокПисьма");
	ТаблицаЗаголовков.Колонки.Добавить("ДатаОтправления");
	
	ДатаФайлаАвтозагрузки = ПараметрыПоследнегоФайла.ДатаФайла;
	Для Каждого ЗаголовокПисьма Из Заголовки Цикл
		Если НЕ ЭтоIMAP ИЛИ ЗаголовкиБезОтборов Тогда // выполним дополнительный отбор так-как не работает в запросе для POP3
			
			Если ЗаголовокПисьма.ДатаОтправления <= ДатаФайлаАвтозагрузки Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если
				(НЕ ПустаяСтрока(ПрайсЛист.ФильтрАдресОтправителя)
					И СтрНайти(НРег(ЗаголовокПисьма.Отправитель.Адрес), НРег(ПрайсЛист.ФильтрАдресОтправителя)) = 0)
				ИЛИ (НЕ ПустаяСтрока(ПрайсЛист.ФильтрТемаПисьма)
					И СтрНайти(НРег(ЗаголовокПисьма.Тема), НРег(ПрайсЛист.ФильтрТемаПисьма)) = 0)
			Тогда
				
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаЗаголовка = ТаблицаЗаголовков.Добавить();
		СтрокаЗаголовка.ЗаголовокПисьма = ЗаголовокПисьма;
		СтрокаЗаголовка.ДатаОтправления = ЗаголовокПисьма.ДатаОтправления;
		
	КонецЦикла;
	
	Если ТаблицаЗаголовков.Количество() = 0 Тогда
		
		ТекстСообщения =
			СтрШаблон(НСтр("ru = 'На сервере: %1: %2 нет новых сообщений.'"), Объект.ВидТранспорта, Объект.URLСервера);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение файлов по транспорту'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			Неопределено,
			Объект,
			ТекстСообщения);
			
		Возврат Неопределено;
	КонецЕсли;
	ТаблицаЗаголовков.Сортировать("ДатаОтправления Убыв");
	
	ТаблицаВложенийПисьма = Новый ТаблицаЗначений;
	ТаблицаВложенийПисьма.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(256)));
	ТаблицаВложенийПисьма.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10)));
	
	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("Сообщение");
	ТаблицаВложений.Колонки.Добавить("ДатаСообщения");
	ТаблицаВложений.Колонки.Добавить("Данные");
	ТаблицаВложений.Колонки.Добавить("ИмяФайла");
	
	Для Каждого Заголовок Из ТаблицаЗаголовков Цикл
		ТаблицаВложений.Очистить();
		ТаблицаВложенийПисьма.Очистить();
		
		ЗапросПоЗаголовкам = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Заголовок.ЗаголовокПисьма);
		Письма = Соединение.Выбрать(Ложь, ЗапросПоЗаголовкам, НЕ ЭтоIMAP);
		
		Для Каждого Сообщение Из Письма Цикл
			Если Сообщение.Вложения.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если (НЕ ЭтоIMAP ИЛИ ЗаголовкиБезОтборов) И НЕ ПустаяСтрока(ПрайсЛист.ФильтрТекстПисьма) Тогда
				Пропустить = Истина;
				Для Каждого ТекстСообщения Из Сообщение.Тексты Цикл
					Если ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст
						И СтрНайти(НРег(ТекстСообщения.Текст), НРег(ПрайсЛист.ФильтрТекстПисьма)) > 0 Тогда
						
						Пропустить = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Пропустить Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Сч = 0;
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				Если ЗначениеЗаполнено(Вложение.ИмяФайла) Тогда
					НоваяСтрока = ТаблицаВложенийПисьма.Добавить();
					НоваяСтрока.ИмяФайла     = Вложение.ИмяФайла;
					НоваяСтрока.ИндексСтроки = Сч;
				КонецЕсли;
				Сч = Сч + 1;
			КонецЦикла;
			
			ЗапросВложений = Новый Запрос;
			ЗапросВложений.Текст = 
			"ВЫБРАТЬ
			|	ВложенияПисьма.ИмяФайла,
			|	ВложенияПисьма.ИндексСтроки
			|ПОМЕСТИТЬ Вложения
			|ИЗ
			|	&ВложенияПисьма КАК ВложенияПисьма
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Вложения.ИмяФайла,
			|	Вложения.ИндексСтроки
			|ИЗ
			|	Вложения КАК Вложения
			|ГДЕ
			|	Вложения.ИмяФайла ПОДОБНО &ИмяФайла СПЕЦСИМВОЛ ""\""";
			ЗапросВложений.УстановитьПараметр("ВложенияПисьма", ТаблицаВложенийПисьма);
			МаскаСоСпецСимволом = СтрЗаменить(
				СтрЗаменить(СтрЗаменить(СтрЗаменить(Маска, "%", "\%"), "_", "\_"), "?", "_"),
				"*",
				"%"
			);
			ЗапросВложений.УстановитьПараметр("ИмяФайла", МаскаСоСпецСимволом);
			
			РезультатЗапроса = ЗапросВложений.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					СтрокаВложения = ТаблицаВложений.Добавить();
					СтрокаВложения.ДатаСообщения = Сообщение.ДатаОтправления;
					СтрокаВложения.Данные        = Сообщение.Вложения[Выборка.ИндексСтроки].Данные;
					СтрокаВложения.ИмяФайла      = Выборка.ИмяФайла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаВложений.Количество() > 0 Тогда
			ТаблицаВложений.Сортировать("ДатаСообщения Убыв");
			ИмяНовогоФайла = ПрайсЛистыКонтрагентовКлиентСервер.ДобавитьРазделительКаталога(
				Каталог,
				ТаблицаВложений[0].ИмяФайла
			);
			
			Попытка
				ТаблицаВложений[0].Данные.Записать(ИмяНовогоФайла);
			Исключение
				Возврат Неопределено;
			КонецПопытки;
			
			ЗагруженныйФайл = Новый Файл(ИмяНовогоФайла);
			
			ИнформацияОФайле = Новый Структура;
			
			ХешФайла = ПрайсЛистыКонтрагентовСлужебный.MD5HeshString(ТаблицаВложений[0].Данные);
			ИнформацияОФайле.Вставить("ХешФайла"    , ХешФайла);
			ИнформацияОФайле.Вставить("ДатаФайла"   , ЗагруженныйФайл.ПолучитьВремяИзменения());
			ИнформацияОФайле.Вставить("РазмерФайла" , ЗагруженныйФайл.Размер());
			
			Возврат ИнформацияОФайле;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ЗагрузитьФайлыПоFTP(Объект, Маска, Каталог, ПараметрыПоследнегоФайла)
	
	Соединение = СоздатьFTPСоединение(Объект);
	Если Соединение = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение файлов по транспорту'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Неопределено,
			Объект,
			СтрШаблон(НСтр("ru = 'Не удалось установить подключение к ftp серверу <%1>.'"), Объект.URLСервера));
			
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		НайденныеФайлы = Соединение.НайтиФайлы(Объект.Каталог, Маска, Ложь);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при поиске на сервере: ftp://%1 файлов по маске <%2> : %3%4.'"),
			Объект.URLСервера,
			Маска,
			Символы.ПС,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Поиск файлов на сервере'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Неопределено,
			Объект,
			ТекстОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	ДатаТекущегоФайла   = ПараметрыПоследнегоФайла.ДатаФайла;
	ПоследнийФайл = Неопределено;
	
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		Если НайденныйФайл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаНовогоФайла   = НайденныйФайл.ПолучитьВремяИзменения();
		Если ДатаНовогоФайла > ДатаТекущегоФайла
			И (ПоследнийФайл = Неопределено ИЛИ ДатаНовогоФайла > ПоследнийФайл.ПолучитьВремяИзменения()) Тогда
			
			ПоследнийФайл = НайденныйФайл;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследнийФайл <> Неопределено Тогда
		// загрузим файл
		ИмяНового = ПрайсЛистыКонтрагентовКлиентСервер.ДобавитьРазделительКаталога(Каталог,  ПоследнийФайл.Имя);
		Попытка
			Соединение.Получить(ПоследнийФайл.ПолноеИмя, ИмяНового);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при копировании файла <%2> с сервера: ftp://%1 : %3%4.'"),
				ПоследнийФайл.ПолноеИмя,
				Маска,
				Символы.ПС,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Копирование файла на сервера'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Неопределено,
				Объект,
				ТекстОшибки);
			
			Возврат Неопределено;
		КонецПопытки;
		
		ИнформацияОФайле = Новый Структура;
		ХешФайла = ПрайсЛистыКонтрагентовСлужебный.MD5HeshString(ИмяНового, Истина);
		
		ИнформацияОФайле.Вставить("ХешФайла"    , ХешФайла);
		ИнформацияОФайле.Вставить("ДатаФайла"   , ПоследнийФайл.ПолучитьВремяИзменения());
		ИнформацияОФайле.Вставить("РазмерФайла" , ПоследнийФайл.Размер());
		
		Возврат ИнформацияОФайле;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ЗагрузитьФайлыПоHTTP(Объект, Маска, Каталог, ПараметрыПоследнегоФайла)
	СтруктураURI = СтруктураURI(Объект.URLСервера);
	Соединение   = СоздатьHTTPСоединение(Объект, СтруктураURI);
	
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПрайсЛиста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыПоследнегоФайла.ПрайсЛист,
		"ПрайсЛистВАрхиве,РасширениеАрхива,РасширениеФайла");
	РасширениеФайла = ДанныеПрайсЛиста.РасширениеФайла;
	Если ДанныеПрайсЛиста.ПрайсЛистВАрхиве Тогда
		РасширениеФайла = ДанныеПрайсЛиста.РасширениеАрхива;
	КонецЕсли;
	
	// АПК:441-выкл Файл перемещается что приводит к его удалению
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	// АПК:441-вкл
	
	ИмяНовогоФайла = СтруктураURI.ИмяФайла;
	Если ПустаяСтрока(СтруктураURI.ИмяФайла) Тогда		
		ИмяНовогоФайлаМассив = СтрРазделить(ИмяВременногоФайла, ПолучитьРазделительПутиСервера());
		ИмяНовогоФайла = ИмяНовогоФайлаМассив[ИмяНовогоФайлаМассив.ВГраница()];
	КонецЕсли;
	ИмяНовогоФайла = ПрайсЛистыКонтрагентовКлиентСервер.ДобавитьРазделительКаталога(Каталог, ИмяНовогоФайла);
	
	Попытка
		
		Заголовки = Новый Соответствие;
		HTTPОтвет = ПолучитьHTTPОтвет(СтруктураURI.ПутьНаСервере, ИмяВременногоФайла, Соединение, Заголовки);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Прайс-листы поставщиков.Транспорт.HTTP'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
		
	КонецПопытки;
	
	МинимальноеЗначениеКодаОтвета = 200;
	МаксимальноеЗначениеКодаОтвета = 300;
	Если HTTPОтвет.КодСостояния < МинимальноеЗначениеКодаОтвета 
		ИЛИ HTTPОтвет.КодСостояния >= МаксимальноеЗначениеКодаОтвета Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПоследнийФайл = Новый Файл(ИмяВременногоФайла);
	
	Если ПоследнийФайл.Существует() И ПоследнийФайл.Размер() > 0 Тогда
		
		ПереместитьФайл(ИмяВременногоФайла, ИмяНовогоФайла);
		ПоследнийФайл = Новый Файл(ИмяНовогоФайла);
		
		Если  ПоследнийФайл.Существует() И ПоследнийФайл.Размер() > 0 Тогда
		
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("ХешФайла", ПрайсЛистыКонтрагентовСлужебный.MD5HeshString(ИмяНовогоФайла, Истина));
			ИнформацияОФайле.Вставить("ДатаФайла", ПоследнийФайл.ПолучитьВремяИзменения());
			ИнформацияОФайле.Вставить("РазмерФайла", ПоследнийФайл.Размер());
		
			Возврат ИнформацияОФайле;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Вид транспорта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидТранспортаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ОчиститьДанные(Объект);
	
	Если Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.IMAP
		ИЛИ Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.POP3 Тогда
		
		Объект.ТребуетсяАвторизация = Истина;
		
	КонецЕсли;
	
	СформироватьНаименование(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Требуется авторизация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТребуетсяАвторизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Объект.Логин = "";
	Объект.Пароль = "";
	
	Если Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.IMAP
		ИЛИ Объект.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.POP3 Тогда
		
		Объект.ТребуетсяАвторизация = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли