// Модуль менеджера справочника "Модели"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

 #Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#Область ОбновлениеВерсииИБ

Процедура ЗаполнениеПризнакаПредметаРасчетаМодели() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Модели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Модели КАК Модели
	|ГДЕ
	|	Модели.ПризнакПредметаРасчета = ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПустаяСсылка)
	|	И НЕ Модели.ЭтоГруппа";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПризнакПредметаРасчетаНоменклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Номенклатура.Автомобиль, "ТипНоменклатуры.ПризнакПредметаРасчета");
	
	Пока Выборка.Следующий() Цикл
		
		Элемент = Выборка.Ссылка.ПолучитьОбъект();	
		Элемент.ОбменДанными.Загрузка = Истина;
			
		Попытка 
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Элемент.ПризнакПредметаРасчета = ПризнакПредметаРасчетаНоменклатура;
			Элемент.Записать();
		Исключение
			
			 ЗаписьЖурналаРегистрации(
			 	НСтр("ru = 'Ошибка обновления справочника ""Модели""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
    			УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНаборПараметровТестДрайва(Модель,Знач Дата = Неопределено) Экспорт
	Результат = Новый Структура("ПродолжительностьЭксплуатации,МаксимальныйПробег,АнкетаПредварительная,АнкетаИтоговая, СрокПоставки",0,0,Справочники.ШаблоныАнкет.ПустаяСсылка(),Справочники.ШаблоныАнкет.ПустаяСсылка(), 0);
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиТестДрайваСрезПоследних.ПродолжительностьЭксплуатации,
	|	НастройкиТестДрайваСрезПоследних.МаксимальныйПробег,
	|	НастройкиТестДрайваСрезПоследних.АнкетаПредварительная,
	|	НастройкиТестДрайваСрезПоследних.АнкетаИтоговая,
	|	НастройкиТестДрайваСрезПоследних.СрокПоставки
	|ИЗ
	|	РегистрСведений.НастройкиТестДрайва.СрезПоследних(&Период, Модель = &Модель) КАК НастройкиТестДрайваСрезПоследних";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Модель", Модель);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ПродолжительностьЭксплуатации = Выборка.ПродолжительностьЭксплуатации;
		Результат.МаксимальныйПробег            = Выборка.МаксимальныйПробег;
		Результат.АнкетаПредварительная         = Выборка.АнкетаПредварительная;
		Результат.АнкетаИтоговая                = Выборка.АнкетаИтоговая;
		Результат.СрокПоставки                  = Выборка.СрокПоставки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Сформировать полное наименование
Процедура СформироватьПолноеНаименование(Объект) Экспорт
	НовоеНаименованиеПолное = Объект.Наименование;
	Если Объект.НаименованиеПолное <> НовоеНаименованиеПолное Тогда
		Объект.НаименованиеПолное = НовоеНаименованиеПолное;
	КонецЕсли;
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	Если НЕ Объект.ЭтоГруппа Тогда
		ОбязательныеРеквизиты.Добавить("НаименованиеПолное");
		ОбязательныеРеквизиты.Добавить("ВалютаУчета");
		ОбязательныеРеквизиты.Добавить("Марка");
		ОбязательныеРеквизиты.Добавить("ТипАвтомобиля"); 
		ОбязательныеРеквизиты.Добавить("ПризнакПредметаРасчета");

	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Наименование".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура НаименованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры // НаименованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	НовыйДоговорВзаиморасчетов = Неопределено;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
			НовыйДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
			Если Объект.ДоговорВзаиморасчетов.Владелец <> Объект.Контрагент Тогда
				НовыйДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НовыйДоговорВзаиморасчетов <> Неопределено И НовыйДоговорВзаиморасчетов <> Объект.ДоговорВзаиморасчетов Тогда
		Объект.ДоговорВзаиморасчетов = НовыйДоговорВзаиморасчетов;
		ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия)
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	НовыйДоговорВзаиморасчетов = Неопределено;
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		Если Объект.ДоговорВзаиморасчетов.Владелец <> Объект.Контрагент Тогда
			НовыйДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		ИначеЕсли Объект.ДоговорВзаиморасчетов.ВидДоговора <> Перечисления.ВидыДоговоров.Покупка И
			Объект.ДоговорВзаиморасчетов.ВидДоговора <> Перечисления.ВидыДоговоров.СКомитентом И
			Объект.ДоговорВзаиморасчетов.ВидДоговора <> Перечисления.ВидыДоговоров.Прочее Тогда
			НовыйДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если НовыйДоговорВзаиморасчетов <> Неопределено И НовыйДоговорВзаиморасчетов <> Объект.ДоговорВзаиморасчетов Тогда
		Объект.ДоговорВзаиморасчетов=НовыйДоговорВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Справочники.Модели);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли