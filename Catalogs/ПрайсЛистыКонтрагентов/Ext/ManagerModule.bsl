// Модуль менеджера справочника "Прайс листы контрагентов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция Найти производителей артикула в прайс-листе источник данных
//  Возвращает массив найденных производителей
//
// Параметры:
//  ПрайсЛист			 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист, в котором требуется найти строки
//  Артикул				 - Строка	 - Артикул
//  АртикулДляПоиска	 - Строка	 - Артикул для поиска
//  ТочныйПоиск			 - Булево	 - Признак того, что будет искаться точное совпадение.
//
// Возвращаемое значение:
//   - Массив, Неопределено
//
Функция НайтиПроизводителейАртикулаВПрайсЛистеИсточникДанных(ПрайсЛист,
		Знач Артикул,
		Знач АртикулДляПоиска = Неопределено,
		ТочныйПоиск = Истина) Экспорт
	
	НайденныеПроизводители = Новый Массив;
	
	Если АртикулДляПоиска = Неопределено Тогда
		АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул);
	КонецЕсли;
	Если АртикулДляПоиска = Артикул Тогда
		Артикул = Неопределено;
	Иначе
		Артикул = СтрЗаменить(Артикул, "'", "");
	КонецЕсли;
	
	Если Не ПустаяСтрока(АртикулДляПоиска)
		И ЗначениеЗаполнено(ПрайсЛист)
		И Не ПрайсЛист.ФайлИсточникДанных
		И ЗначениеЗаполнено(ПрайсЛист.СтрокаПодключения)
		И ЗначениеЗаполнено(ПрайсЛист.ИмяТаблицы) Тогда
		
		ИмяПоляКлюч    = Неопределено;
		ИмяПоляАртикул = Неопределено;
		ИмяПоляПроизводитель = Неопределено;
		
		// Поищем сначала КлючСтрокиПоставщика (так как там предполагается быть артикул для поиска??), затем Артикул.
		СтрокаПоляКлюч = ПрайсЛист.СтруктураФайлаПрайсЛиста.Найти("КлючСтрокиПоставщика", "ИмяРеквизитаПрайсЛиста");
		Если СтрокаПоляКлюч <> Неопределено Тогда
			ИмяПоляКлюч = СтрокаПоляКлюч.ИмяПоляФайла;
		КонецЕсли;
		
		СтрокаПоляАртикул = ПрайсЛист.СтруктураФайлаПрайсЛиста.Найти("Артикул", "ИмяРеквизитаПрайсЛиста");
		Если СтрокаПоляАртикул <> Неопределено Тогда
			ИмяПоляАртикул = СтрокаПоляАртикул.ИмяПоляФайла;
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(ИмяПоляКлюч) ИЛИ ЗначениеЗаполнено(ИмяПоляАртикул)) Тогда
			// Нет возможности искать
			Возврат НайденныеПроизводители;
		КонецЕсли;
		
		Если ИмяПоляАртикул = ИмяПоляКлюч Тогда
			ИмяПоляАртикул = Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПрайсЛист.Производитель) Тогда
			СтрокаПоляПроизводитель = ПрайсЛист.СтруктураФайлаПрайсЛиста.Найти("Производитель", "ИмяРеквизитаПрайсЛиста");
			Если СтрокаПоляПроизводитель <> Неопределено И ЗначениеЗаполнено(СтрокаПоляПроизводитель.ИмяПоляФайла) Тогда
				ИмяПоляПроизводитель = СтрокаПоляПроизводитель.ИмяПоляФайла;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Connection = Новый COMОбъект("ADODB.Connection");
			Коннект = Connection.Open(ПрайсЛист.СтрокаПодключения);
		Исключение
			Возврат НайденныеПроизводители;
		КонецПопытки;
		
		ИмяТаблицы = ПрайсЛист.ИмяТаблицы;
		
		Command   = Новый  COMОбъект("ADODB.Command");
		Recordset = Новый  COMОбъект("ADODB.Recordset");
		Recordset.ActiveConnection = Connection;
		
		ТекстЗап =
			"SELECT DISTINCT " + ?(ЗначениеЗаполнено(ИмяПоляПроизводитель), ИмяТаблицы + ".[" + ИмяПоляПроизводитель +"]", "0") + "
			|FROM " + ИмяТаблицы + "
			|WHERE (";
		
		ТекстУсловия = "";
		
		Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
			ТекстУсловия = ТекстУсловия + "(" + ИмяТаблицы + ".[" + ИмяПоляКлюч + "])%ОтборАртикулДляПоиска%"
				+ ?(ЗначениеЗаполнено(Артикул), " OR (" + ИмяТаблицы + ".[" + ИмяПоляКлюч + "])%ОтборАртикул%", "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
			ТекстУсловия = ТекстУсловия + ?(НЕ ПустаяСтрока(ТекстУсловия), " OR ", "") + "(" + ИмяТаблицы + ".[" + ИмяПоляАртикул + "])%ОтборАртикулДляПоиска%"
				+ ?(ЗначениеЗаполнено(Артикул), " OR (" + ИмяТаблицы + ".[" + ИмяПоляАртикул + "])%ОтборАртикул%", "");
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстУсловия) Тогда
			Возврат НайденныеПроизводители;
		КонецЕсли;
		
		ТекстЗап = ТекстЗап + ТекстУсловия + ")";
		
		Command.CommandText = СтрЗаменить(СтрЗаменить(ТекстЗап, "%ОтборАртикул%", ?(ТочныйПоиск, " = '" + Артикул + "'", " LIKE '%" + Артикул + "%'")), "%ОтборАртикулДляПоиска%", ?(ТочныйПоиск, " = '" + АртикулДляПоиска + "'", " LIKE '%" + АртикулДляПоиска + "%'"));
		Command.ActiveConnection = Connection;
		
		Попытка
			Recordset = Command.Execute();
		Исключение
			
			Попытка 
				ЧислоАртикул = Число(АртикулДляПоиска);
			Исключение
				Возврат НайденныеПроизводители;
			КонецПопытки;
			
			ТекстЗап =
				"SELECT DISTINCT " + ?(ЗначениеЗаполнено(ИмяПоляПроизводитель), ИмяТаблицы + ".[" + ИмяПоляПроизводитель + "]", "0") + "
				|FROM " + ИмяТаблицы + "
				|WHERE (";
			ТекстУсловия = "";
			Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
				ТекстУсловия = ТекстУсловия + "(" + ИмяТаблицы + ".[" + ИмяПоляКлюч + "]) = %ОтборАртикулДляПоиска%";
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
				ТекстУсловия = ТекстУсловия + ?(НЕ ПустаяСтрока(ТекстУсловия), " OR ", "") + "(" + ИмяТаблицы + ".[" + ИмяПоляАртикул + "]) = %ОтборАртикулДляПоиска%";
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстУсловия) Тогда
				Возврат НайденныеПроизводители;
			КонецЕсли;
			
			ТекстЗап = ТекстЗап + ТекстУсловия + ")";
			
			Command.CommandText = СтрЗаменить(ТекстЗап, "%ОтборАртикулДляПоиска%", Формат(ЧислоАртикул, "ЧГ=0"));
			Command.ActiveConnection = Connection;
			
			// Снова попытаемся выполнить запрос, теперь с числовым артикулом.
			Попытка
				Recordset = Command.Execute();
			Исключение
				Возврат НайденныеПроизводители;
			КонецПопытки;
			
		КонецПопытки; 
		
		Пока НЕ Recordset.EOF Цикл
			Если ЗначениеЗаполнено(ИмяПоляПроизводитель) Тогда
				Value = Recordset.Fields(0).Value;
				Производитель = Справочники.Производители.ПустаяСсылка();
				Если ЗначениеЗаполнено(Value) Тогда
					Производитель = Справочники.Производители.НайтиПроизводителяПоНаименованию(Value);
					Если Производитель.Пустая() Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если НайденныеПроизводители.Найти(Производитель) = Неопределено Тогда
					НайденныеПроизводители.Добавить(Производитель);
				КонецЕсли;
			Иначе
				НайденныеПроизводители.Добавить(ПрайсЛист.Производитель);
				Прервать;
			КонецЕсли;
			
			RecordSet.MoveNext();
		КонецЦикла;

	КонецЕсли;
	
	Возврат НайденныеПроизводители;
	
КонецФункции // НайтиПроизводителейАртикулаВПрайсЛистеИсточникДанных()

// Функция - Выполнить запрос по артикулу к прайс листу источнику данных
//
// Параметры:
//  ПрайсЛист							- СправочникСсылка.ПрайсЛистыКонтрагентов	- Прайслист контрагента, в котором производится поиск.
//  Артикул								- Строка									- Искомый артикул.
//  АртикулДляПоиска					- Строка									- Представление искомого артикула.
//  Наименование						- Строка									- Представление наименования.
//  Производитель						- СправочникСсылка.Производители			- Производитель номенклатуры.
//  ИспользованиеФильтраПроизводитель	- Булево									- Признак того, что ищется только указанный производитель.
//  ТочныйПоиск							- Булево									- Признак того, что будет искаться точное совпадение.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ВыполнитьЗапросПоАртикулуКПрайсЛистуИсточникуДанных(ПрайсЛист,
	Знач Артикул,
	Знач АртикулДляПоиска,
	Знач Наименование,
	Производитель,
	ИспользованиеФильтраПроизводитель,
	ТочныйПоиск = Истина) Экспорт
	
	Перем РезультатПоиска, ИмяПоляКлюч, ИмяПоляАртикул, ИмяПоляПроизводитель, ИмяПоляНаименование;
	
	РезультатПоиска = Новый ТаблицаЗначений;
	РезультатПоиска.Колонки.Добавить("Артикул");
	РезультатПоиска.Колонки.Добавить("АртикулДляПоиска");
	РезультатПоиска.Колонки.Добавить("Производитель");
	РезультатПоиска.Колонки.Добавить("Наименование");
	
	Если АртикулДляПоиска = Неопределено Тогда
		АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул);
	КонецЕсли;
	
	Если АртикулДляПоиска = Артикул Тогда
		Артикул = Неопределено;
	Иначе
		Артикул = СтрЗаменить(Артикул, "'", "");
	КонецЕсли;
	
	Если ПустаяСтрока(АртикулДляПоиска)
		ИЛИ ПрайсЛист.Пустая()
		ИЛИ ПрайсЛист.ФайлИсточникДанных
		ИЛИ ПустаяСтрока(ПрайсЛист.СтрокаПодключения)
		ИЛИ ПустаяСтрока(ПрайсЛист.ИмяТаблицы) Тогда
		
		Возврат РезультатПоиска;
		
	КонецЕсли;
	
	СтруктураФайлаПрайсЛиста = ПрайсЛист.СтруктураФайлаПрайсЛиста;
	
	// Поищем сначала КлючСтрокиПоставщика (так как там предполагается быть артикул для поиска??), затем Артикул.
	СтрокаПоляКлюч = СтруктураФайлаПрайсЛиста.Найти("КлючСтрокиПоставщика", "ИмяРеквизитаПрайсЛиста");
	Если СтрокаПоляКлюч <> Неопределено Тогда
		ИмяПоляКлюч = СтрокаПоляКлюч.ИмяПоляФайла;
	КонецЕсли;
	
	СтрокаПоляАртикул = СтруктураФайлаПрайсЛиста.Найти("Артикул", "ИмяРеквизитаПрайсЛиста");
	Если СтрокаПоляАртикул <> Неопределено Тогда
		ИмяПоляАртикул = СтрокаПоляАртикул.ИмяПоляФайла;
	КонецЕсли;
	
	// поле наименование
	СтрокаПоляНаименование = СтруктураФайлаПрайсЛиста.Найти("Наименование", "ИмяРеквизитаПрайсЛиста");
	Если СтрокаПоляНаименование <> Неопределено Тогда
		ИмяПоляНаименование = СтрокаПоляНаименование.ИмяПоляФайла;
	КонецЕсли;
	
	Если НЕ(ЗначениеЗаполнено(ИмяПоляКлюч)
		ИЛИ ЗначениеЗаполнено(ИмяПоляАртикул)
		ИЛИ ЗначениеЗаполнено(ИмяПоляНаименование)) Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если ИмяПоляАртикул = ИмяПоляКлюч Тогда
		ИмяПоляАртикул = Неопределено;
	КонецЕсли;
	
	// поле наименование
	Если НЕ ЗначениеЗаполнено(ПрайсЛист.Производитель) Тогда
		СтрокаПоляПроизводитель = СтруктураФайлаПрайсЛиста.Найти("Производитель", "ИмяРеквизитаПрайсЛиста");
		Если СтрокаПоляПроизводитель <> Неопределено И ЗначениеЗаполнено(СтрокаПоляПроизводитель.ИмяПоляФайла) Тогда
			ИмяПоляПроизводитель = СтрокаПоляПроизводитель.ИмяПоляФайла;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Connection = Новый COMОбъект("ADODB.Connection");
		Коннект = Connection.Open(ПрайсЛист.СтрокаПодключения);
	Исключение
		Возврат РезультатПоиска;
	КонецПопытки;
		
	ИмяТаблицы = ПрайсЛист.ИмяТаблицы;
	
	Command   = Новый  COMОбъект("ADODB.Command");
	Recordset = Новый  COMОбъект("ADODB.Recordset");
	Recordset.ActiveConnection = Connection;
	
	ШаблонПоля    = "SELECT";
	ШаблонТаблица = СтрШаблон(" FROM %1", ИмяТаблицы);
	ШаблонУсловие = "";
	
	Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
		ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляКлюч);
		
		ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикулДляПоиска#", ИмяТаблицы, ИмяПоляКлюч);
		
		Если ЗначениеЗаполнено(Артикул) Тогда
			ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикул#", ИмяТаблицы, ИмяПоляКлюч);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
		ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляАртикул);
		
		ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикулДляПоиска#", ИмяТаблицы, ИмяПоляАртикул);
		
		Если ЗначениеЗаполнено(Артикул) Тогда
			ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикул#", ИмяТаблицы, ИмяПоляАртикул);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоляНаименование) Тогда
		ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляНаименование); 
		
		Если ЗначениеЗаполнено(Наименование) Тогда
			ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборНаименование#", ИмяТаблицы, ИмяПоляНаименование);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ШаблонУсловие) Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	ШаблонУсловие = " WHERE(" + Прав(ШаблонУсловие, СтрДлина(ШаблонУсловие) - 3);
	
	Если ЗначениеЗаполнено(ИмяПоляПроизводитель) Тогда
		ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляПроизводитель);
	КонецЕсли;
	
	ШаблонПоля    = Лев(ШаблонПоля, СтрДлина(ШаблонПоля) - 1);
	ШаблонУсловие = ШаблонУсловие + ")";
	
	ТекстЗапроса = ШаблонПоля + ШаблонТаблица + ШаблонУсловие;
	
	Если ТочныйПоиск Тогда
		ТекстУсловияОтборАртикул          = СтрШаблон(" = '%1'", Артикул);
		ТекстУсловияОтборАртикулДляПоиска = СтрШаблон(" = '%1'", АртикулДляПоиска);
		ТекстУсловияОтборНаименование     = СтрШаблон(" = '%1'", Наименование);
	Иначе
		ТекстУсловияОтборАртикул          = " LIKE '%" + Артикул + "%'";
		ТекстУсловияОтборАртикулДляПоиска = " LIKE '%" + АртикулДляПоиска + "%'";
		ТекстУсловияОтборНаименование     = " LIKE '%" + Наименование + "%'";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборАртикул#", ТекстУсловияОтборАртикул);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборАртикулДляПоиска#", ТекстУсловияОтборАртикулДляПоиска);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборНаименование#", ТекстУсловияОтборНаименование);
	
	Command.CommandText = ТекстЗапроса;
	Command.ActiveConnection = Connection;
	
	Попытка
		Recordset = Command.Execute();
	Исключение
		Попытка 
			ЧислоАртикул = Число(АртикулДляПоиска);
		Исключение
			Возврат РезультатПоиска;
		КонецПопытки;
		
		ШаблонУсловие = "";
		
		Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
			ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикулДляПоиска#", ИмяТаблицы, ИмяПоляКлюч);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
			ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикулДляПоиска#", ИмяТаблицы, ИмяПоляАртикул);
		КонецЕсли;
		
		Если ПустаяСтрока(ШаблонУсловие) Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		ШаблонУсловие = " WHERE(" + Прав(ШаблонУсловие, СтрДлина(ШаблонУсловие) - 3);
		
		Если ЗначениеЗаполнено(ИмяПоляНаименование) Тогда
			ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляНаименование);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПоляПроизводитель) Тогда
			ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляПроизводитель);
		КонецЕсли;
		
		ШаблонУсловие = ШаблонУсловие + ")";
		
		ТекстЗапроса = ШаблонПоля + ШаблонТаблица + ШаблонУсловие;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборАртикулДляПоиска#", ТекстУсловияОтборАртикулДляПоиска);
		
		Command.CommandText = ТекстЗапроса;
		Command.ActiveConnection = Connection;
		
		// Снова попытаемся выполнить запрос, теперь с числовым артикулом.
		Попытка
			Recordset = Command.Execute();
		Исключение
			Возврат РезультатПоиска;
		КонецПопытки;
	КонецПопытки;
	
	СоответствиеПроизводителей = Новый Соответствие;
	
	Пока НЕ Recordset.EOF Цикл
		СтруктураПолей = Новый Соответствие;
		Для Каждого Field Из Recordset.Fields Цикл
			СтруктураПолей.Вставить(Field.Name, Field.Value);
		КонецЦикла;
		
		RecordSet.MoveNext();
		
		АртикулСтроки       = Неопределено;
		ПроизводительСтроки = ПрайсЛист.Производитель;
		НаименованиеСтроки  = Неопределено;
		
		// получим артикул
		Если ЗначениеЗаполнено(ИмяПоляАртикул) И СтруктураПолей.Получить(ИмяПоляАртикул) <> Неопределено Тогда
			АртикулСтроки = СтруктураПолей[ИмяПоляАртикул];
		ИначеЕсли ЗначениеЗаполнено(ИмяПоляКлюч) И СтруктураПолей.Получить(ИмяПоляКлюч) <> Неопределено Тогда
			АртикулСтроки = СтруктураПолей[ИмяПоляКлюч];
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПоляНаименование) И СтруктураПолей.Получить(ИмяПоляНаименование) <> Неопределено Тогда
			НаименованиеСтроки = СтруктураПолей[ИмяПоляНаименование];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПоляПроизводитель) И СтруктураПолей.Получить(ИмяПоляПроизводитель) <> Неопределено Тогда
			НайденныйПроизводитель = СоответствиеПроизводителей.Получить(СтруктураПолей[ИмяПоляПроизводитель]);
			Если НайденныйПроизводитель = Неопределено Тогда
				НайденныйПроизводитель = Справочники.Производители.НайтиПроизводителяПоНаименованию(СтруктураПолей[ИмяПоляПроизводитель]);
				СоответствиеПроизводителей.Вставить(СтруктураПолей[ИмяПоляПроизводитель], НайденныйПроизводитель);
			КонецЕсли;
			
			ПроизводительСтроки = НайденныйПроизводитель;
		КонецЕсли;
		
		Если ИспользованиеФильтраПроизводитель И ПроизводительСтроки <> Производитель Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаРезультата = РезультатПоиска.Добавить();
		НоваяСтрокаРезультата.Артикул          = АртикулСтроки;
		НоваяСтрокаРезультата.АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(АртикулСтроки);
		НоваяСтрокаРезультата.Наименование     = НаименованиеСтроки;
		НоваяСтрокаРезультата.Производитель    = ПроизводительСтроки;
	КонецЦикла;
	
	Возврат РезультатПоиска;
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти
// Устарела. Не используется
// Возвращает в структуре параметры номенклатуры.
//
// Параметры:
//  ПрайсЛист						- СправочникСсылка.ПрайсЛистыКонтрагентов	- Прайс-лист, в котором требуется найти строки.
//  Артикул							- СправочникСсылка.Номенклатура,Строка		- Искомая номенклатура или артикул номенклатуры.
//  ПроизводительАртикула			- СправочникСсылка.Производители			- Производитель номенклатуры.
//  ИмяКлючевогоПоля				- Строка									- (необязательное). Имя ключевого поля.
//  ТипЦен							- СправочникСсылка.ТипыЦен					- (необязательное). Тип цен.
//  ПодразделениеКомпании			- СправочникСсылка.ПодразделенияКомпании	- (необязательное). Подразделение компании.
//  Дата							- Дата										- (необязательное). Дата, на которую производится расчет цен.
//  ВозвращатьВсеНайденныеПозиции	- Булево									- (необязательное). Признак возврата одной 
//																					или всех найденных позиций.
//
// Возвращаемое значение:
//  Структура, Массив из Структура
//
Функция ПолучитьПараметрыНоменклатуры(ПрайсЛист,
		Знач Артикул,
		Знач ПроизводительАртикула = Неопределено,
		ИмяКлючевогоПоля = Неопределено,
		ТипЦен = Неопределено,
		ПодразделениеКомпании = Неопределено,
		Дата = Неопределено,
		ВозвращатьВсеНайденныеПозиции = Ложь) Экспорт
	
	СтрокаПрайсЛиста = Новый Структура;
	СтруктураПрайса = Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентов.Измерения;
	Для каждого Рек Из СтруктураПрайса Цикл
		СтрокаПрайсЛиста.Вставить(Рек.Имя);
	КонецЦикла;
	СтруктураПрайса = Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентов.Ресурсы;
	Для каждого Рек Из СтруктураПрайса Цикл
		СтрокаПрайсЛиста.Вставить(Рек.Имя);
	КонецЦикла;
	СтруктураПрайса = Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентов.Реквизиты;
	Для каждого Рек Из СтруктураПрайса Цикл
		СтрокаПрайсЛиста.Вставить(Рек.Имя);
	КонецЦикла;
	
	ФиксСтрокаПрайсЛиста = Новый ФиксированнаяСтруктура(СтрокаПрайсЛиста);
	МассивСтрок = Новый Массив;
	
	Если ТипЗнч(Артикул) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура = Артикул;
		Артикул = Номенклатура.Артикул;
		АртикулДляПоиска = Номенклатура.АртикулДляПоиска;
		ПроизводительАртикула = Номенклатура.Производитель;
	Иначе
		Артикул = СокрЛП(Артикул);
		АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул);
		Номенклатура = Справочники.Номенклатура.НайтиНоменклатуру(АртикулДляПоиска, ПроизводительАртикула);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодразделениеКомпании = Неопределено Тогда
		
		ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
		
	КонецЕсли;
	
	// Попробуем найти эту номенклатуру в базе
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентов.*
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи КАК НедоступныеЗаписи
	|		ПО ПрайсЛистыКонтрагентов.ПрайсЛист = НедоступныеЗаписи.ПрайсЛист
	|			И ПрайсЛистыКонтрагентов.ДатаЗаписи = НедоступныеЗаписи.ДатаЗаписи 
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.ПрайсЛист В (&ПрайсЛист)
	|	И ПрайсЛистыКонтрагентов.АртикулДляПоиска = &АртикулДляПоиска
	|	И ПрайсЛистыКонтрагентов.АртикулДляПоиска <> """"
	|	"+ ?(ПроизводительАртикула = Null ИЛИ ПроизводительАртикула = Неопределено, "", " И ПрайсЛистыКонтрагентов.Производитель = &Производитель") + "
	// |	И НедоступныеЗаписи.ПрайсЛист ЕСТЬ NULL 
	|
	|" + ?(Номенклатура = Неопределено, "", "
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентов.*
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
	|		ПО (ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика = (ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(32))))
	|			И (ПрайсЛистыКонтрагентов.ПрайсЛист = ПравилаЗагрузки.ПрайсЛист)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи КАК НедоступныеЗаписи
	|		ПО (ПрайсЛистыКонтрагентов.ПрайсЛист = НедоступныеЗаписи.ПрайсЛист)
	|			И (ПрайсЛистыКонтрагентов.ДатаЗаписи = НедоступныеЗаписи.ДатаЗаписи)
	|ГДЕ
	|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
	|	И ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста = ""Номенклатура""
	|	И ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Номенклатура).Ссылка = &Номенклатура
	|	И НедоступныеЗаписи.ПрайсЛист ЕСТЬ NULL "));
	
	Запрос.УстановитьПараметр("Номенклатура",     Номенклатура);
	Запрос.УстановитьПараметр("АртикулДляПоиска", АртикулДляПоиска);
	Запрос.УстановитьПараметр("Производитель",    ПроизводительАртикула);
	Запрос.УстановитьПараметр("ПрайсЛист",        ПрайсЛист.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаПрайсЛиста = Неопределено;
	
	Если Выборка.Количество() > 0 Тогда
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаПрайсЛиста = Новый Структура(ФиксСтрокаПрайсЛиста);
			
			// Есть такой артикул в базе - возвращаем его
			Для каждого РеквизитПрайсЛиста Из СтрокаПрайсЛиста Цикл
				СтрокаПрайсЛиста[РеквизитПрайсЛиста.Ключ] = Выборка[РеквизитПрайсЛиста.Ключ];
			КонецЦикла;
			
			СтрокаПрайсЛиста.Вставить("ВоВнешнемИсточнике", Ложь);
			
			// сформируем данные для получения цены
			ДанныеРасчетаЦены = Новый Массив;
			СтруктураДанных = Новый Структура;
			
			СтруктураДанных.Вставить("ПрайсЛист",     ПрайсЛист.Ссылка);
			СтруктураДанных.Вставить("Номенклатура",  Номенклатура);
			СтруктураДанных.Вставить("Цена",          СтрокаПрайсЛиста.Цена);
			СтруктураДанных.Вставить("ТегПозиции",    СтрокаПрайсЛиста.ТегПозиции);
			СтруктураДанных.Вставить("Производитель", СтрокаПрайсЛиста.Производитель);
			ДанныеРасчетаЦены.Добавить(СтруктураДанных);
			
			//@skip-check many-actual-parameters
			ДанныеЦены = ЦенообразованиеСервер.РассчитатьЦеныПрайсЛиста(ДанныеРасчетаЦены, Истина, Истина, ТипЦен, ПодразделениеКомпании, Дата);
			Если ДанныеЦены.Количество() > 0 Тогда
				Для Каждого КлючЗначение Из ДанныеЦены.Колонки Цикл
					СтрокаПрайсЛиста.Вставить(КлючЗначение.Имя, ДанныеЦены[0][КлючЗначение.Имя]);
				КонецЦикла;
			КонецЕсли;
			
			Если ВозвращатьВсеНайденныеПозиции Тогда
				МассивСтрок.Добавить(СтрокаПрайсЛиста);
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли НЕ ПрайсЛист.ФайлИсточникДанных Тогда
		// В базе такого артикула нет - поищем во внешнем источнике
		Попытка
			Connection = Новый COMОбъект("ADODB.Connection");
			Коннект = Connection.Open(ПрайсЛист.СтрокаПодключения);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Ошибка подключения к прайс-листу <%1>: %2'"), ПрайсЛист.Наименование, ОписаниеОшибки())
			);
			Возврат Неопределено;
		КонецПопытки;
		Command = Новый  COMОбъект("ADODB.Command");
		Recordset = Новый  COMОбъект("ADODB.Recordset");
		Recordset.ActiveConnection = Connection;
		
		СтруктураФайлаПрайсЛиста = ПрайсЛист.СтруктураФайлаПрайсЛиста.Выгрузить();
		
		// найдем имя ключевого поля
		Если ИмяКлючевогоПоля = Неопределено Тогда
			СтрокаСКлючевымПолем = СтруктураФайлаПрайсЛиста.Найти(Истина, "Ключевое");
			Если СтрокаСКлючевымПолем = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Не задано ключевое поле прайс-листа ""%1""'"), СокрЛП(ПрайсЛист.Наименование))
				);
				Возврат Неопределено;
			КонецЕсли;
			ИмяПоля = СтрокаСКлючевымПолем.ИмяПоляФайла;
		Иначе
			СтрокаСКлючевымПолем = СтруктураФайлаПрайсЛиста.Найти(ИмяКлючевогоПоля, "ИмяРеквизитаПрайсЛиста");
			Если СтрокаСКлючевымПолем = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			ИмяПоля = СтрокаСКлючевымПолем.ИмяПоляФайла;
		КонецЕсли;
		
		СтрокаПоляПроизводитель = СтруктураФайлаПрайсЛиста.Найти("Производитель", "ИмяРеквизитаПрайсЛиста");
		Если СтрокаПоляПроизводитель <> Неопределено И ЗначениеЗаполнено(СтрокаПоляПроизводитель.ИмяПоляФайла) Тогда
			ИмяПоляПроизводитель = СтрокаПоляПроизводитель.ИмяПоляФайла;
		КонецЕсли;
		
		ИмяТаблицы = ПрайсЛист.ИмяТаблицы;
		Производитель = ПрайсЛист.Производитель;
		
		Если ПроизводительАртикула = Null ИЛИ ПроизводительАртикула = Неопределено Тогда
			// Нам подойдет любая запись с артикулом!
			ТекстЗап="
				|SELECT TOP 1 "+ИмяТаблицы+".*
				|FROM "+ИмяТаблицы+"
				|WHERE (("+ИмяТаблицы+".["+ИмяПоля+"]) = %ОтборКаталожныйНомер
				|	 OR ("+ИмяТаблицы+".["+ИмяПоля+"]) = %ОтборАртикулДляПоиска)";
		Иначе
			// Будем определять производителя в прайс-листе
			Если ЗначениеЗаполнено(Производитель) И Производитель <> ПроизводительАртикула Тогда
				// У прайс-листа указан конкретный производитель и он не равен запрашиваемому
				// Ничего не сможем найти
				Возврат Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Производитель) ИЛИ ИмяПоляПроизводитель = Неопределено Тогда
				// Ищем только по артикулу
				ТекстЗап="
					|SELECT TOP 1 "+ИмяТаблицы+".*
					|FROM "+ИмяТаблицы+"
					|WHERE (("+ИмяТаблицы+".["+ИмяПоля+"]) = %ОтборКаталожныйНомер
					|	 OR ("+ИмяТаблицы+".["+ИмяПоля+"]) = %ОтборАртикулДляПоиска)";
			Иначе
				// Надо добавить отбор по производителю
				ТекстЗап="
					|SELECT TOP 1 "+ИмяТаблицы+".*
					|FROM "+ИмяТаблицы+"
					|WHERE ((("+ИмяТаблицы+".["+ИмяПоля+"]) = %ОтборКаталожныйНомер
					|	 OR ("+ИмяТаблицы+".["+ИмяПоля+"]) = %ОтборАртикулДляПоиска)
					|	 AND (("+ИмяТаблицы+".["+ИмяПоляПроизводитель+"]) = '"+ПроизводительАртикула.Наименование+"'))";
					
			КонецЕсли;
		КонецЕсли;
		
		ОтборАртикул = "'"+Артикул+"'";
		ОтборАртикулДляПоиска = "'"+АртикулДляПоиска+"'";
		ТекстЗапСтрока = СтрЗаменить(СтрЗаменить(ТекстЗап, "%ОтборКаталожныйНомер", ОтборАртикул), "%ОтборАртикулДляПоиска", ОтборАртикулДляПоиска);
		
		Command.CommandText = ТекстЗапСтрока;
		Command.ActiveConnection = Connection;
		
		Попытка
			Recordset = Command.Execute();
		Исключение
			
			ЧисловойАртикул = Ложь;
			Попытка 
				Артикул = Число(АртикулДляПоиска);
				ЧисловойАртикул = Истина;
			Исключение
				Возврат Неопределено;
			КонецПопытки;
			
			ОтборАртикул = Формат(Артикул, "ЧГ=0");
			ТекстЗапСтрока = СтрЗаменить(СтрЗаменить(ТекстЗап, "%ОтборКаталожныйНомер", ОтборАртикул), "%ОтборАртикулДляПоиска", ОтборАртикул);
			Command.CommandText = ТекстЗапСтрока;
			Command.ActiveConnection = Connection;
			
			// Снова попытаемся выполнить запрос, теперь с числовым артикулом.
			Попытка
				Recordset = Command.Execute();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Ошибка при выборке из прайс-листа  <%1> во внешнем источнике данных: %2'"), ПрайсЛист.Наименование, ОписаниеОшибки())
				);
				Возврат Неопределено;
			КонецПопытки;
			
		КонецПопытки; 
		
		КолПолей = Recordset.Fields.Count;
		// Переберем результат запроса ко внешнему источнику.
		Пока НЕ Recordset.EOF Цикл
			
			СтрокаПрайсЛиста = Новый Структура(ФиксСтрокаПрайсЛиста);
			
			СтрокаПрайсЛиста.ПрайсЛист = ПрайсЛист;
			
			Для К = 0 По КолПолей - 1 Цикл
				ИмяПоляПрайса = Recordset.Fields(К).Name;
				Value = Recordset.Fields(К).Value;
				Если ЗначениеЗаполнено(Value) Тогда
					СтрокиНастройки = ПрайсЛист.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяПоляФайла", ИмяПоляПрайса));
					Если СтрокиНастройки.Количество() > 0 Тогда
						Для Каждого СтрокаНастройки Из СтрокиНастройки Цикл
							ИмяРеквизитаПрайсЛиста = СтрокаНастройки.ИмяРеквизитаПрайсЛиста;
							Если НЕ ПустаяСтрока(ИмяРеквизитаПрайсЛиста) Тогда
								Если ИмяРеквизитаПрайсЛиста = "Производитель" Тогда
									НайденныйПроизводитель = Справочники.Производители.НайтиПроизводителяПоНаименованию(Value);
									Если ЗначениеЗаполнено(НайденныйПроизводитель) Тогда
										Value = НайденныйПроизводитель;
									КонецЕсли;
								КонецЕсли;
								СтрокаПрайсЛиста[ИмяРеквизитаПрайсЛиста] = Value;
							КонецЕсли; 
						КонецЦикла; 
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаПрайсЛиста.Вставить("ВоВнешнемИсточнике",Истина);
			
			Если Не ЗначениеЗаполнено(СтрокаПрайсЛиста.Валюта) Тогда
				СтрокаПрайсЛиста.Валюта = ПрайсЛист.Валюта;
			КонецЕсли;
			
			// сформируем данные для получения цены
			ДанныеРасчетаЦены = Новый Массив;
			СтруктураДанных = Новый Структура;
			
			СтруктураДанных.Вставить("ПрайсЛист",     ПрайсЛист.Ссылка);
			СтруктураДанных.Вставить("Номенклатура",  Номенклатура);
			СтруктураДанных.Вставить("Цена",          СтрокаПрайсЛиста.Цена);
			СтруктураДанных.Вставить("ТегПозиции",    СтрокаПрайсЛиста.ТегПозиции);
			СтруктураДанных.Вставить("Производитель", СтрокаПрайсЛиста.Производитель);
			ДанныеРасчетаЦены.Добавить(СтруктураДанных);
			
			//@skip-check many-actual-parameters
			ДанныеЦены = ЦенообразованиеСервер.РассчитатьЦеныПрайсЛиста(ДанныеРасчетаЦены, Истина, Истина, ТипЦен, ПодразделениеКомпании, Дата);
			Если ДанныеЦены.Количество() > 0 Тогда
				Для Каждого КлючЗначение Из ДанныеЦены.Колонки Цикл
					СтрокаПрайсЛиста.Вставить(КлючЗначение.Имя, ДанныеЦены[0][КлючЗначение.Имя]);
				КонецЦикла;
			КонецЕсли;
			
			Если ВозвращатьВсеНайденныеПозиции Тогда
				МассивСтрок.Добавить(СтрокаПрайсЛиста);
			Иначе
				Прервать;
			КонецЕсли;
			
			RecordSet.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВозвращатьВсеНайденныеПозиции Тогда
		Возврат ?(МассивСтрок.Количество()=0, Неопределено, МассивСтрок);
	Иначе
		Возврат СтрокаПрайсЛиста;
	КонецЕсли;
	
КонецФункции // ПолучитьПараметрыНоменклатуры() 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СформироватьТекстДатыНачалаПроверкиОбновлений(
	Ссылка,
	ПериодичностьПроверкиНовыхДанных,
	ИнтервалПроверкиНачало,
	ИнтервалПроверкиКонец) Экспорт
	
	Если Ссылка.Пустая() Тогда
		ДатаСледующейПроверки = НачалоДня(ТекущаяДатаСеанса());
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Автообновление.ДатаСледующейПроверки КАК ДатаСледующейПроверки
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовАвтообновление КАК Автообновление
		|ГДЕ
		|	Автообновление.ПрайсЛист = &ПрайсЛист
		|	И Автообновление.ИспользоватьАвтозагрузку";
		
		Запрос.УстановитьПараметр("ПрайсЛист", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.ДатаСледующейПроверки) Тогда
				ДатаСледующейПроверки = Выборка.ДатаСледующейПроверки;
			Иначе
				ДатаСледующейПроверки = НачалоДня(ТекущаяДатаСеанса());
			КонецЕсли;
		Иначе
			Возврат НСтр("ru = 'Автоматическое получение новых файлов отключено.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ПериодичностьПроверкиНовыхДанных = 0 Тогда // Часто
		Если ДатаСледующейПроверки > ТекущаяДатаСеанса() Тогда
			ЗаголовокПроверкиНовыхФайлов = "Проверка новых файлов начнется в " + Формат(ДатаСледующейПроверки, "ДФ='HH:мм dd.MM.yyyy'"); 
		Иначе
			ЗаголовокПроверкиНовыхФайлов = "Проверка новых файлов выполняется по расписанию регламентного задания";
		КонецЕсли;
	ИначеЕсли ПериодичностьПроверкиНовыхДанных = 1 Тогда // Раз в день
		Если ДатаСледующейПроверки > ТекущаяДатаСеанса() Тогда
			Если ИнтервалПроверкиНачало > 0 ИЛИ ИнтервалПроверкиКонец < 24 Тогда
				ЗаголовокПроверкиНовыхФайлов = "Проверка новых файлов начнется " + Формат(ДатаСледующейПроверки, "ДФ='dd.MM.yyyy'")+" с "+ИнтервалПроверкиНачало+" по "+ИнтервалПроверкиКонец+" ч."; 
			Иначе
				ЗаголовокПроверкиНовыхФайлов = "Проверка новых файлов начнется " + Формат(ДатаСледующейПроверки, "ДФ='dd.MM.yyyy'"); 
			КонецЕсли;
		Иначе
			Если ИнтервалПроверкиНачало > 0 ИЛИ ИнтервалПроверкиКонец < 24 Тогда
				ЗаголовокПроверкиНовыхФайлов = "Проверка новых файлов начнется сегодня с "+ИнтервалПроверкиНачало+" по "+ИнтервалПроверкиКонец+" ч."; 
			Иначе
				ЗаголовокПроверкиНовыхФайлов = "Проверка новых файлов выполняется по расписанию регламентного задания";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ДатаСледующейПроверки > ТекущаяДатаСеанса() Тогда
			ЗаголовокПроверкиНовыхФайлов = "Проверка новых файлов начнется с " + Формат(Выборка.ДатаСледующейПроверки, "ДФ='dd.MM.yyyy'"); 
		Иначе
			ЗаголовокПроверкиНовыхФайлов = "Проверка новых файлов выполняется по расписанию регламентного задания";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаголовокПроверкиНовыхФайлов;
	
КонецФункции //ВывестиДатуНачалаПроверкиОбновлений()

// Загрузка нового файла
//
// Параметры:
//  ПрайсЛист	 - СправочникСсылка.ПрайсЛистыКонтрагентов			 - Прайс-лист контрагента.
//  Транспорт	 - СправочникСсылка.ТранспортПрайсЛистовКонтрагентов - Траспорт прайс-листа.
//  ХешФайла	 - Строка											 - Хеш файла.
//  ДатаФайла	 - Дата												 - Дата файла.
//  РазмерФайла	 - Число											 - Размер файла.
// 
// Возвращаемое значение:
//  Булево - Истина: новый файл загружен. Ложь: не загружен.
//
Функция ЗагрузитьНовыйФайл(
	ПрайсЛист,
	Транспорт = Неопределено,
	ХешФайла = Неопределено,
	ДатаФайла = Неопределено,
	РазмерФайла = Неопределено) Экспорт
	
	Если Транспорт = Неопределено Тогда
		Транспорт =ПрайсЛист.Транспорт;
	КонецЕсли;
	
	ИспользоватьТомаХраненияФайлов = Константы.ХранитьФайлыВТомахНаДиске.Получить();
	
	// предварительное заполнение данных
	Если НЕ ПрайсЛист.ПрайсЛистВАрхиве Тогда
		МаскаФайлаДляЗагрузки = ПрайсЛист.МаскаФайла +
			?(СтрНайти(ПрайсЛист.МаскаФайла, "*") > 0, ".", "*.") + ПрайсЛист.РасширениеФайла;
	Иначе
		МаскаФайлаДляЗагрузки = ПрайсЛист.МаскаАрхива +
			?(СтрНайти(ПрайсЛист.МаскаАрхива, "*") > 0, ".", "*.") + ПрайсЛист.РасширениеАрхива;
	КонецЕсли;
	
	Если ИспользоватьТомаХраненияФайлов Тогда
		КаталогЗагрузки = РаботаСФайламиВТомахСлужебный.ПолныйПутьТома(ПрайсЛист.ТомХранения);
	Иначе
		КаталогЗагрузки = ПрайсЛист.КаталогАвтообновления;
	КонецЕсли;
	
	// проверим существование каталога
	ФайлПроверки = Новый Файл(КаталогЗагрузки);
	Если НЕ ФайлПроверки.Существует() ИЛИ НЕ ФайлПроверки.ЭтоКаталог() Тогда
		Попытка
			СоздатьКаталог(КаталогЗагрузки);
		Исключение
			ЗаписьЖурналаРегистрации(
				СтрШаблон("Загрузка нового файла прайс-листа <%1>", ПрайсЛист),
				УровеньЖурналаРегистрации.Ошибка,
				ПрайсЛист.Метаданные(),
				КаталогЗагрузки,
				СтрШаблон("Не удалось создать каталог ""%1"".", КаталогЗагрузки),
				РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ИнформацияОФайле = Справочники.ТранспортПрайсЛистовКонтрагентов.ЗагрузитьФайлыПоМаске(
		Транспорт,
		МаскаФайлаДляЗагрузки,
		КаталогЗагрузки,
		Новый Структура("ХешФайла,ДатаФайла,РазмерФайла,ПрайсЛист",ХешФайла, ДатаФайла, РазмерФайла, ПрайсЛист));
		
	Если ИнформацияОФайле <> Неопределено Тогда
		РегистрыСведений
			.ПрайсЛистыКонтрагентовАвтообновление
			.ЗаписатьНастройкиАвтообновления(ПрайсЛист, ИнформацияОФайле);
	КонецЕсли;
		
	Возврат Истина;
		
КонецФункции

// Проверка наличия новых файлов в каталоге
//
// Параметры:
//  ПрайсЛист							 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист контрагента.
//  ИнформацияОРанееЗагруженномФайле	 - Структура								 - Информация о загруженном файле.
// 
// Возвращаемое значение:
//  Структура - Структура с кодом ошибки и описанием.
//
Функция ПроверитьНаличиеНовыхФайловВКаталоге(ПрайсЛист, ИнформацияОРанееЗагруженномФайле) Экспорт
	Перем ПодходящийФайл;
	
	Результат = Новый Структура("КодОшибки,Сообщение", 0);
	
	ЖурналЗагрузки = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СформироватьСтруктуруЖурналаЗагрузки();
	
	Если НЕ ПрайсЛист.ФайлИсточникДанных Тогда
		ЖурналЗагрузки.СтрокаПодключения = ПрайсЛист.СтрокаПодключения;
		ЖурналЗагрузки.Период            = ТекущаяДатаСеанса();
		ЖурналЗагрузки.Статус            = Перечисления.СтатусыЗагрузкиПрайсЛистов.Ожидает;
		РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СохранитьЖурналЗагрузкиПрайсЛиста(ЖурналЗагрузки, ПрайсЛист);
		
		Если ИнформацияОРанееЗагруженномФайле.ПериодичностьПроверкиНовыхДанных = 0 Тогда
			ОбновлениеНастроек = Новый Структура("ДатаСледующейПроверки", ТекущаяДатаСеанса() + 2 * 60 * 60);
		Иначе
			ОбновлениеНастроек = Новый Структура("ДатаСледующейПроверки",
				НачалоДня(ТекущаяДатаСеанса() + ИнформацияОРанееЗагруженномФайле.ПериодичностьПроверкиНовыхДанных * 24 * 60 * 60));
		КонецЕсли;
		
		РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.ЗаписатьНастройкиАвтообновления(ПрайсЛист, ОбновлениеНастроек);
		
		Возврат Результат;
	КонецЕсли;
	
	ДатаИзмененияТекущегоФайла =
		ПолучитьЗначениеПараметраСтруктуры(ИнформацияОРанееЗагруженномФайле, "ДатаЗагруженного", Дата("00010101"));
	
	Результат = Новый Структура("КодОшибки,Сообщение", 0);
	
	Если ПрайсЛист.Пустая() Тогда
		Результат.КодОшибки = 1;
		Результат.Сообщение = НСтр("ru = 'Не указан прайс-лист.'");
		Возврат Результат;
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Поиск файлов...'"));
	
	ЖурналЗагрузки = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СформироватьСтруктуруЖурналаЗагрузки();
	
	// получим маску
	Если ПрайсЛист.ПрайсЛистВАрхиве Тогда
		МаскаИскомогоФайла = ПрайсЛист.МаскаАрхива +
			?(СтрНайти(ПрайсЛист.МаскаАрхива, "*") > 0, ".", "*.") +
			ПрайсЛист.РасширениеАрхива;
	Иначе
		МаскаИскомогоФайла = ПрайсЛист.МаскаФайла +
			?(СтрНайти(ПрайсЛист.МаскаФайла, "*") > 0, ".", "*.") +
			ПрайсЛист.РасширениеФайла;
	КонецЕсли;
	
	ИспользоватьТомаХраненияФайлов = Константы.ХранитьФайлыВТомахНаДиске.Получить();
	
	Если ИспользоватьТомаХраненияФайлов Тогда
		КаталогЗагрузки = РаботаСФайламиВТомахСлужебный.ПолныйПутьТома(ПрайсЛист.ТомХранения);
	Иначе
		КаталогЗагрузки = ПрайсЛист.КаталогАвтообновления;
	КонецЕсли;
	
	Попытка
		НайденныеФайлы = НайтиФайлы(КаталогЗагрузки, МаскаИскомогоФайла, Ложь);
	Исключение
		Результат.КодОшибки = 2;
		Результат.Сообщение = СтрШаблон(
			НСтр("ru = 'Ошибка поиска файлов: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Результат;
	КонецПопытки;
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Обработка найденных файлов...'"));
	
	// найдем последний файл
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		Если НайденныйФайл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
		
			Если ПрайсЛист.ПрайсЛистВАрхиве Тогда
				СтрокаПодключенияАрхив = НайденныйФайл.ПолноеИмя;
				НайденныйФайл = РаботаСФайламиАльфаАвто.РаспаковатьZIPАрхив(
					НайденныйФайл,
					ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогЗагрузки, "Tmp"),
					ПрайсЛист.МаскаФайла + ?(СтрНайти(ПрайсЛист.МаскаФайла, "*") > 0, ".", "*.") + ПрайсЛист.РасширениеФайла);
				
				Если НайденныйФайл = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Прайс-листы контрагентов.Работа с файлами.Распаковка архива'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ПрайсЛист,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
			
		КонецПопытки;
		
		ДатаПроверяемогоФайла = НайденныйФайл.ПолучитьВремяИзменения();
		
		Если ДатаПроверяемогоФайла > ДатаИзмененияТекущегоФайла Тогда
			ДатаИзмененияТекущегоФайла            = ДатаПроверяемогоФайла;
			ПодходящийФайл                        = НайденныйФайл;
			ЖурналЗагрузки.СтрокаПодключения      = ПодходящийФайл.ПолноеИмя;
			ЖурналЗагрузки.СтрокаПодключенияАрхив = СтрокаПодключенияАрхив;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИнформацияОРанееЗагруженномФайле.ПериодичностьПроверкиНовыхДанных = 0 Тогда
		ОбновлениеНастроек = Новый Структура("ДатаСледующейПроверки",ТекущаяДатаСеанса() + 2 * 60 * 60);
	Иначе
		ОбновлениеНастроек = Новый Структура("ДатаСледующейПроверки",
			НачалоДня(ТекущаяДатаСеанса() + ИнформацияОРанееЗагруженномФайле.ПериодичностьПроверкиНовыхДанных * 24 * 60 * 60));
	КонецЕсли;
	
	РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.ЗаписатьНастройкиАвтообновления(ПрайсЛист, ОбновлениеНастроек);
	
	// если нет подходящего файла, то и проверять нечего
	Если ПодходящийФайл = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// проверим, а отличается ли данный файл
	ХешПроверяемогоФайла = ПрайсЛистыКонтрагентовСлужебный.MD5HeshString(ПодходящийФайл.ПолноеИмя, Истина);
	Если ХешПроверяемогоФайла <> ИнформацияОРанееЗагруженномФайле.ХешЗагруженного Тогда
		ЖурналЗагрузки.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.НовыйФайл;
		
		РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СохранитьЖурналЗагрузкиПрайсЛиста(ЖурналЗагрузки, ПрайсЛист);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Формирует список выбора периодичности проверки новых данных.
//
Функция ПериодичностиПроверкиНовыхДанных() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(0, НСтр("ru = 'Часто'"));
	Список.Добавить(1, НСтр("ru = 'Раз в день'"));
	Список.Добавить(7, НСтр("ru = 'Раз в неделю'"));
	Список.Добавить(30, НСтр("ru = 'Раз в месяц'"));
	
	Возврат Список;
	
КонецФункции

#Область ДлительныеОперации

Процедура ЗаполнитьСтруктуруДанныхИзФайла(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	ПутьКФайлу = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "ПутьКФайлу", "");
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Расширение = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "Расширение", "");
	Разделитель = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "Разделитель", ";");
	КоличествоСтрок = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "КоличествоСтрок", 20);
	ИмяТаблицы = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "ИмяТаблицы", "");
	
	ЖурналЗагрузки = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СформироватьСтруктуруЖурналаЗагрузки();
	РеквизитыПрайсЛиста = Новый Структура("ИмяТаблицы", ИмяТаблицы);
	СтруктураСтраницПрайсЛиста = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыПроцедуры,
		"СтруктураСтраницПрайсЛиста",
		Неопределено
	);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Расширение", Расширение);
	ДополнительныеПараметры.Вставить("Разделитель", Разделитель);
	ДополнительныеПараметры.Вставить("КоличествоСтрок", КоличествоСтрок);
	ДополнительныеПараметры.Вставить("РеквизитыПрайсЛиста", РеквизитыПрайсЛиста);
	ДополнительныеПараметры.Вставить("ЖурналЗагрузки", ЖурналЗагрузки);
	ДополнительныеПараметры.Вставить("СтруктураСтраницПрайсЛиста", СтруктураСтраницПрайсЛиста);	
	Результат = ПрайсЛистыКонтрагентов.ПрочитатьОбразецИзФайла(ПутьКФайлу, ДополнительныеПараметры);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхИзADO(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	СтрокаПодключения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "СтрокаПодключения", "");
	Если ПустаяСтрока(СтрокаПодключения) Тогда
		Ошибка = ПрайсЛистыКонтрагентовКлиентСервер.СформироватьОшибку(НСтр("ru = 'Не указана строка подключения.'"));
		ПоместитьВоВременноеХранилище(Ошибка, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ЖурналЗагрузки = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СформироватьСтруктуруЖурналаЗагрузки();
	
	Результат = ПрайсЛистыКонтрагентов.ПрочитатьОбразецИзADO(СтрокаПодключения, ПараметрыПроцедуры, ЖурналЗагрузки);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗагрузитьПрайсЛистИзФайла(ПараметрыПроцедуры, АдресХранилища) Экспорт
	ПутьКФайлу = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "ПутьКФайлу", "");
	
	// форимруем параметры действия
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить(
		"ПрайсЛист",
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "Ссылка", Неопределено));
	ПараметрыДействия.Вставить(
		"Расширение",
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "Расширение", ""));
	ПараметрыДействия.Вставить(
		"Разделитель",
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "Разделитель", ";"));
	ПараметрыДействия.Вставить(
		"ЖурналЗагрузки",
		РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СформироватьСтруктуруЖурналаЗагрузки());
		
	Если ПутьКФайлу = "" ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДействия.ПрайсЛист) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("СтруктураСтраницПрайсЛиста" , ПараметрыДействия.ПрайсЛист.СтруктураСтраницПрайсЛиста);
	ПоляПрайсЛиста = "Производитель,Производитель.Наименование,Валюта,ИмяТаблицы";
	ПараметрыДействия.Вставить("РеквизитыПрайсЛиста",
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыДействия.ПрайсЛист, ПоляПрайсЛиста));
	
	// проверим а не загружается ли уже данный прайс-лист
	Состояние = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.
		ТекущиеСостояниеПрайсЛиста(ПараметрыДействия.ПрайсЛист);
		
	Если Состояние = Перечисления.СтатусыЗагрузкиПрайсЛистов.Загружается Тогда
		ПоместитьВоВременноеХранилище(
			ПрайсЛистыКонтрагентовКлиентСервер.СформироватьОшибку(НСтр("ru = 'Прайс-лист уже загружается.'")),
			АдресХранилища);
		Возврат;
	ИначеЕсли Состояние = Перечисления.СтатусыЗагрузкиПрайсЛистов.Запрещена Тогда
		ПоместитьВоВременноеХранилище(
			ПрайсЛистыКонтрагентовКлиентСервер.СформироватьОшибку(НСтр("ru = 'Загрузка прайс-листа запрещена.'")),
			АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПрайсЛистыКонтрагентов.ЗагрузкаВозможна(ПутьКФайлу, ПараметрыДействия) Тогда
		ПоместитьВоВременноеХранилище(
			ПрайсЛистыКонтрагентовКлиентСервер.СформироватьОшибку(ПараметрыДействия.ЖурналЗагрузки.Примечание),
			АдресХранилища);
		
		ПараметрыДействия.ЖурналЗагрузки.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Ошибка;
		РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.
			СохранитьЖурналЗагрузкиПрайсЛиста(ПараметрыДействия.ЖурналЗагрузки, ПараметрыДействия.ПрайсЛист);
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия.ЖурналЗагрузки.СтрокаПодключения =
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "ИсходныйФайл", ПутьКФайлу);
	ПараметрыДействия.ЖурналЗагрузки.ДатаФайла = ПараметрыДействия.ДатаПрайса;
	ПараметрыДействия.ЖурналЗагрузки.Статус    = Перечисления.СтатусыЗагрузкиПрайсЛистов.Загружается;
	
	ПараметрыДействия.ЖурналЗагрузки.ИдентификаторФоновогоЗадания =
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "ИдентификаторЗадания", Неопределено);
	
	РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.
		СохранитьЖурналЗагрузкиПрайсЛиста(ПараметрыДействия.ЖурналЗагрузки, ПараметрыДействия.ПрайсЛист);
	
	Если ПрайсЛистыКонтрагентовКлиентСервер.ЭтоТабличныйДокумент(ПараметрыДействия.Расширение) Тогда
		Результат = ПрайсЛистыКонтрагентов.ЗагрузитьПрайсЛистИзТабличногоДокумента(ПутьКФайлу, ПараметрыДействия);
	Иначе
		Результат = ПрайсЛистыКонтрагентов.ЗагрузитьПрайсЛистИзТекстовогоФайла(ПутьКФайлу, ПараметрыДействия);
	КонецЕсли;
	
	Если Результат Тогда
		ПараметрыДействия.ЖурналЗагрузки.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Завершена;
		Попытка
			ПоместитьВоВременноеХранилище(Новый Структура("Ошибка", Ложь), АдресХранилища);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка помещения во временное хранилище'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;
	Иначе
		ПараметрыДействия.ЖурналЗагрузки.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Ошибка;
		Попытка
			ПоместитьВоВременноеХранилище(
			ПрайсЛистыКонтрагентовКлиентСервер.СформироватьОшибку(ПараметрыДействия.ЖурналЗагрузки.Примечание),
			АдресХранилища);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка помещения во временное хранилище'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.
		СохранитьЖурналЗагрузкиПрайсЛиста(ПараметрыДействия.ЖурналЗагрузки, ПараметрыДействия.ПрайсЛист);
		
	ИнформацияОФайле = Новый Структура();
	ИнформацияОФайле.Вставить("ХешЗагруженного"  , ПараметрыДействия.ЖурналЗагрузки.ХешФайла);
	ИнформацияОФайле.Вставить("ДатаЗагруженного" , ПараметрыДействия.ЖурналЗагрузки.ДатаФайла);
	
	РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.
		ЗаписатьНастройкиАвтообновления(ПараметрыДействия.ПрайсЛист, ИнформацияОФайле);
	
	ПрайсЛистыКонтрагентовСлужебный.ПровестиДействиеПослеЗагрузки(
		ПараметрыДействия.ПрайсЛист.ДействиеПослеЗагрузки,
		ПутьКФайлу,
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПутьКАрхифу", "")
	);
	
КонецПроцедуры

Процедура ЗагрузитьПрайсЛистИзADO(ПараметрыПроцедуры, АдресХранилища) Экспорт
	СтрокаПодключения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "СтрокаПодключения", "");
	
	// форимруем параметры действия
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить(
		"ПрайсЛист",
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "ПрайсЛист", Неопределено));
	ПараметрыДействия.Вставить(
		"ЖурналЗагрузки",
		РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СформироватьСтруктуруЖурналаЗагрузки());
		
	Если СтрокаПодключения = "" ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДействия.ПрайсЛист) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("СтруктураСтраницПрайсЛиста" , ПараметрыДействия.ПрайсЛист.СтруктураСтраницПрайсЛиста);
	ПоляПрайсЛиста = "Производитель,Производитель.Наименование,Валюта,ИмяТаблицы";
	ПараметрыДействия.Вставить("РеквизитыПрайсЛиста",
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыДействия.ПрайсЛист, ПоляПрайсЛиста));
	
	// проверим а не загружается ли уже данный прайс-лист
	Состояние = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.
		ТекущиеСостояниеПрайсЛиста(ПараметрыДействия.ПрайсЛист);
		
	Если Состояние = Перечисления.СтатусыЗагрузкиПрайсЛистов.Загружается Тогда
		ПоместитьВоВременноеХранилище(
			ПрайсЛистыКонтрагентовКлиентСервер.СформироватьОшибку(НСтр("ru = 'Прайс-лист уже загружается.'")),
			АдресХранилища);
		Возврат;
	ИначеЕсли Состояние = Перечисления.СтатусыЗагрузкиПрайсЛистов.Запрещена Тогда
		ПоместитьВоВременноеХранилище(
			ПрайсЛистыКонтрагентовКлиентСервер.СформироватьОшибку(НСтр("ru = 'Загрузка прайс-листа запрещена.'")),
			АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия.ЖурналЗагрузки.ДатаФайла         = ТекущаяДатаСеанса();
	ПараметрыДействия.ЖурналЗагрузки.Статус            = Перечисления.СтатусыЗагрузкиПрайсЛистов.Загружается;
	ПараметрыДействия.ЖурналЗагрузки.СтрокаПодключения = СтрокаПодключения;
	
	ПараметрыДействия.ЖурналЗагрузки.ИдентификаторФоновогоЗадания =
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроцедуры, "ИдентификаторЗадания", Неопределено);
	
	РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.
		СохранитьЖурналЗагрузкиПрайсЛиста(ПараметрыДействия.ЖурналЗагрузки, ПараметрыДействия.ПрайсЛист);
	
	Результат = ПрайсЛистыКонтрагентов.ЗагрузитьПрайсЛистИзADO(СтрокаПодключения, ПараметрыДействия);
	
	Если Результат Тогда
		ПараметрыДействия.ЖурналЗагрузки.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Завершена;
		ПоместитьВоВременноеХранилище(Новый Структура("Ошибка", Ложь), АдресХранилища);
	Иначе
		ПараметрыДействия.ЖурналЗагрузки.Статус = Перечисления.СтатусыЗагрузкиПрайсЛистов.Ошибка;
		ПоместитьВоВременноеХранилище(
			ПрайсЛистыКонтрагентовКлиентСервер.СформироватьОшибку(ПараметрыДействия.ЖурналЗагрузки.Примечание),
			АдресХранилища);
	КонецЕсли;
	
	РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.
		СохранитьЖурналЗагрузкиПрайсЛиста(ПараметрыДействия.ЖурналЗагрузки, ПараметрыДействия.ПрайсЛист);
КонецПроцедуры

Процедура СкачатьФайлыПрайсЛиста(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	ПрайсЛист = ПараметрыПроцедуры.ПрайсЛист;
	ЗагруженыйФайлНачальноеЗначение =
		РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.ПрочитатьНастройкиАвтообновления(ПрайсЛист);
	
	ЗагруженНовыйФайл = ЗагрузитьНовыйФайл(ПрайсЛист,
		ЗагруженыйФайлНачальноеЗначение.Транспорт,
		ЗагруженыйФайлНачальноеЗначение.ХешФайла,
		ЗагруженыйФайлНачальноеЗначение.ДатаФайла,
		ЗагруженыйФайлНачальноеЗначение.РазмерФайла);
	
	ЗагруженыйФайлКонечноеЗначение =
		РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.ПрочитатьНастройкиАвтообновления(ПрайсЛист);
	
	Если ЗагруженыйФайлНачальноеЗначение.ХешФайла <> ЗагруженыйФайлКонечноеЗначение.ХешФайла Тогда
		ПоместитьВоВременноеХранилище("ОК", АдресХранилища);
	ИначеЕсли ЗагруженНовыйФайл Тогда
		ПоместитьВоВременноеХранилище("BAD", АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("Код");
	ОбязательныеРеквизиты.Добавить("Валюта");
	ОбязательныеРеквизиты.Добавить("ВидПрайсЛиста");
	Если Объект.ПрайсЛистВАрхиве Тогда
		ОбязательныеРеквизиты.Добавить("МаскаАрхива");
	КонецЕсли;
	
	Если Объект.ВидПрайсЛиста = Перечисления.ВидыПрайсЛистов.ОстаткиДляКаталогаПредложений Тогда
		ОбязательныеРеквизиты.Добавить("БазовыйПрайсЛист");
	КонецЕсли;
	
	// Если установлен признак формирования цены номенклатуры по прайс-листу, то необходимо заполнить тип цен.
	Если Объект.ФормироватьЦеныНоменклатуры Тогда
		ОбязательныеРеквизиты.Добавить("ТипЦен");
		ОбязательныеРеквизиты.Добавить("ПодразделениеЦены");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Возвращает наименование объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Функция СформироватьНаименованиеПоУмолчанию(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Наименование = "";
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		Наименование = "Прайс-лист <" + СокрЛП(Объект.Владелец.Наименование) + ">";
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции // СформироватьНаименованиеПоУмолчанию()

Процедура СтрокаПодключенияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если Объект.ФайлИсточникДанных Тогда
		ПрайсЛистыКонтрагентовКлиентСервер.
			РазделитьИмяИРасширение(Объект.СтрокаПодключения, Объект.МаскаФайла, Объект.РасширениеФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрайсЛистВАрхивеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если Объект.ПрайсЛистВАрхиве Тогда
		Объект.МаскаАрхива = "";
		Объект.РасширениеАрхива = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлИсточникДанныхПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия.Вставить("ОчиститьСтруктуруДанных", Истина);
	
КонецПроцедуры

// Проверим корректность ставки НДС для устранения ситуации выбора ставки НДС 18%
//
Функция ПроверитьКорректностьСтавкиНДС(Объект) Экспорт
	
	// По закону с 01.01.2019 вместо ставки НДС 18% необходимо использовать ставку НДС 20%.
	
	ТекДата = ТекущаяДатаСеанса();
	
	СтавкаНДСНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтавкаНДС, "Ставка");
	СтавкаНДС18 = 18;
	
	Если СтавкаНДСНоменклатуры = 18 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьКорректностьСтавкиНДС()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтавкаНДСПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ ПроверитьКорректностьСтавкиНДС(Объект) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Указана недействительная ставка НДС.'"), Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры // СтавкаНДСПриИзменении()

#КонецОбласти

#КонецОбласти

#КонецЕсли