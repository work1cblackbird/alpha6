
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	// заполним вспомогательные реквизиты
	ПереключательФайл  = Объект.ФайлИсточникДанных;
	ИспользоватьТомаХраненияФайлов = Константы.ХранитьФайлыВТомахНаДиске.Получить();
	КоличествоСтрокВОбразце =
		ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ПрайсЛистыКонтрагентов", "КоличествоСтрокВОбразце", 20);
	
	УправлениеДиалогомНаСервере();
	ОбновитьПодсказкуПереодичностиОбновления();
	УстановитьПараметрыДинамическогоСпискаСкидокНаценок();
	ТекущийВидПрайсЛиста = Объект.ВидПрайсЛиста;
	ЦветФонаВыделенияПоля = ЦветаСтиля.ЦветФонаВыделенияПоля;
	
	СформироватьНаименованиеПоУмолчанию();
	КэшНаименование = Справочники.ПрайсЛистыКонтрагентов.СформироватьНаименованиеПоУмолчанию(Объект);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	НастроитьСписокВыбораПериодичностиПроверкиНовыхДанных();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоляЗагрузки();
	ЗаполнитьПредставлениеРеквизитовСтруктурыПрайсЛиста();
	
	ЗаполнитьТабличноеПолеОбразецДанных();
	
	ИнициализироватьДеревоПодразделений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	УстановитьПараметрыДинамическогоСпискаПравилЗагрузки();
	
	РазвернутьДеревоПодразделений();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	ПараметрыДействия = Новый Структура;
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Перем ОписаниеИзменений;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	
	ИмяТекущейСтраницы = Объект.ИмяТаблицы;
	
	ЗаполнитьНастройкиАвтообновления();
	Элементы.ТранспортРасширеннаяПодсказка.Заголовок =
		Справочники.ТранспортПрайсЛистовКонтрагентов.ПолучитьПредставлениеТранспорта(Объект.Транспорт);
	
	ПрочитатьХранилищаЗначений(ТекущийОбъект);
	
	ЗаполнитьСпискиВыбора();
	ЗаполнитьСписокВыбораРеквизитовПравилЗагрузки();
	ЗаполнитьПредставлениеРеквизитовСтруктурыПрайсЛиста();
	
	// проверим правильность структуры страниц прайс листа
	ПрайсЛистыКонтрагентов.ПроверитьСтруктуруСтраницПрайсЛиста(Объект);
	
	СтатусЗагрузки = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.ТекущиеСостояниеПрайсЛиста(Объект.Ссылка);
	
	ЗаполнитьТабличноеПолеОбразецДанных();
	
	ИнициализироватьДеревоПодразделений();
	
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	РаботаСФормойКлиент.ЗамерВремениЗапись("ПрайсЛистыКонтрагентов");
	
	Если
		НЕ Объект.Ссылка.Пустая()
		И НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "ПропуститьПроверкуИзмененияКлючевыхПолей", Ложь)
		И ТребуетсяОбновитьКлючиЗаписиПрайсЛиста(Объект.Ссылка, Объект.СтруктураФайлаПрайсЛиста)
	Тогда
		
		Отказ = Истина;
		ОпиваниеОповещения = Новый ОписаниеОповещения("ВопросОДействииСКлючамиЗаписи", ЭтотОбъект, ПараметрыЗаписи);
		ТекстВопроса = НСтр(
			"ru = 'Изменен состав ключевого поля прайс-листа.Для прайс-листа есть правила загрузки по ключу строки.
			|
			|<Сформировать новые ключи> - Сформировать для правил загрузки новый ключ.
			|
			|<Удалить правила загрузки> - Удалить все правила загрузки для ключа строки.
			|
			|<Продолжить запись> - Оставить правила загрузки без изменений.
			|'"
		);
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить("Изменить", НСтр("ru = 'Сформировать новые ключи'"));
		ВариантыОтветов.Добавить("Удалить" , НСтр("ru = 'Удалить правила загрузки'"));
		ВариантыОтветов.Добавить("Отмена"  , НСтр("ru = 'Продолжить запись'"));
		ПоказатьВопрос(ОпиваниеОповещения, ТекстВопроса, ВариантыОтветов,,, НСтр("ru = 'Изменен совстав ключевых полей'"));
		Возврат;
		
	КонецЕсли;
	
	Если ТребуетсяНастроитьКоличество() Тогда
		ТекстПредупреждения = НСтр(
			"ru = 'Некорректно настроены правила загрузки поля ""Количество"". Прайс-лист не будет загружен.'"
		);
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Функция ТребуетсяНастроитьКоличество()
	
	Если ЗагружатьБезКоличества Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИмяРеквизитаПрайсЛиста", "Количество");
	СтрокаКоличество = Объект.СтруктураФайлаПрайсЛиста.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокаКоличество.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаКоличество = СтрокаКоличество[0];
	Если ОбщегоНазначенияКлиентСервер.ЭтоЧисло(СтрокаКоличество.ЗначениеПоУмолчанию) Тогда
		Количество = Число(СтрокаКоличество.ЗначениеПоУмолчанию);
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаКоличество.ИмяПоляФайла)
		ИЛИ ЗначениеЗаполнено(Количество) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УсловиеПоиска = Новый Структура("ИмяЛиста,Использовать", ИмяТекущейСтраницы, Истина);
	Если ТекущийОбъект.СтруктураСтраницПрайсЛиста.НайтиСтроки(УсловиеПоиска).Количество() = 0 Тогда
		УсловиеПоиска = Новый Структура("Использовать", Истина);
		ИспользуемыеСтроки = ТекущийОбъект.СтруктураСтраницПрайсЛиста.НайтиСтроки(УсловиеПоиска);
		
		Если ИспользуемыеСтроки.Количество() > 0 Тогда
			ТекущийОбъект.ИмяТаблицы = ИспользуемыеСтроки[0].ИмяЛиста;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Лист Из ТекущийОбъект.СтруктураСтраницПрайсЛиста Цикл
		Если НЕ Лист.Использовать И Лист.СтрокаЗаголовковКолонок > 0 Тогда
			Лист.СтрокаЗаголовковКолонок = 0;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьХранилищаЗначений(ТекущийОбъект);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"ПрайсЛистыКонтрагентов",
		"КоличествоСтрокВОбразце",
		КоличествоСтрокВОбразце);
	
	ЗаполнитьСпискиВыбора();
	ЗаполнитьСписокВыбораРеквизитовПравилЗагрузки();
	ЗаполнитьПредставлениеРеквизитовСтруктурыПрайсЛиста();
	
	ПрочитатьХранилищаЗначений(ТекущийОбъект);
	
	// запишем настройки автообновления
	НастройкиАвтообновления = Новый Структура;
	НастройкиАвтообновления.Вставить("ИспользоватьАвтообновление"       , Автообновление);
	НастройкиАвтообновления.Вставить("ИспользоватьАвтозагрузку"         , Автозагрузка);
	НастройкиАвтообновления.Вставить("ПериодичностьПроверкиНовыхДанных" , ПериодичностьПроверкиНовыхДанных);
	НастройкиАвтообновления.Вставить("ИнтервалПроверкиНачало"           , ИнтервалПроверкиНачало);
	НастройкиАвтообновления.Вставить("ИнтервалПроверкиКонец"            , ИнтервалПроверкиКонец);
	
	РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.
		ЗаписатьНастройкиАвтообновления(ТекущийОбъект.Ссылка, НастройкиАвтообновления);
		
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьПараметрыДинамическогоСпискаПравилЗагрузки();
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "ЗакрытьПослеЗаписи", Ложь) Тогда
		Закрыть();
	КонецЕсли;
	
	РазвернутьДеревоПодразделений();
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Автозагрузка Тогда
		Если Объект.Транспорт.Пустая() Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнен транспорт.'"), Объект.Ссылка, "Транспорт",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Автообновление ИЛИ Автозагрузка Тогда
		Если ПустаяСтрока(Объект.МаскаФайла) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена маска файла.'"), Объект.Ссылка, "МаскаФайла",, Отказ);
		КонецЕсли;
		
		Если ИспользоватьТомаХраненияФайлов Тогда
			Если Объект.ТомХранения.Пустая() Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнен каталог.'"), Объект.Ссылка, "ТомХранения",, Отказ);
			КонецЕсли;
		ИначеЕсли ПустаяСтрока(Объект.КаталогАвтообновления) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнен каталог.'"), Объект.Ссылка, "КаталогАвтообновления",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбъектДерева = РеквизитФормыВЗначение("ПодразделенияКомпании", Тип("ОбработкаОбъект.ПодразделенияКомпанииПрайсЛистовКонтрагентов"));
	
	ОбъектДерева.ПрайсЛистКонтрагента = ТекущийОбъект.Ссылка;
	ОбъектДерева.Записать();
	
	ЗначениеВРеквизитФормы(ОбъектДерева, "ПодразделенияКомпании");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтруктураФайлаПрайсЛистаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Объект.СтруктураФайлаПрайсЛиста.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "СтруктураФайлаПрайсЛистаДействие" И НЕ ПустаяСтрока(ТекущиеДанные.Действие) Тогда
		Если ТекущиеДанные.Действие = "Добавить" Тогда
			НоваяСтрока = Объект.СтруктураФайлаПрайсЛиста.Вставить(Объект.СтруктураФайлаПрайсЛиста.Индекс(ТекущиеДанные)+1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные,, "Действие,ИмяПоляФайла");
			
			НоваяСтрока.Действие = "Удалить";
		ИначеЕсли ТекущиеДанные.Действие = "Удалить" Тогда
			Объект.СтруктураФайлаПрайсЛиста.Удалить(ТекущиеДанные);
			
			ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидПрайсЛистаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если Объект.ВидПрайсЛиста = Перечисления.ВидыПрайсЛистов.ОстаткиДляКаталогаПредложений Тогда
		Элементы.БазовыйПрайсЛист.Доступность = Истина;
	Иначе
		Элементы.БазовыйПрайсЛист.Доступность = Ложь;
		Если ЗначениеЗаполнено(Объект.БазовыйПрайсЛист) Тогда
			Объект.БазовыйПрайсЛист = Справочники.ПрайсЛистыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ТекущийВидПрайсЛиста = Объект.ВидПрайсЛиста;
	
КонецПроцедуры // ВидПрайсЛистаПриИзмененииНаСервере()

&НаКлиенте
Процедура ВидПрайсЛистаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ВидПрайсЛистаПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // ВидПрайсЛистаПриИзменении()

&НаКлиенте
Процедура СтрокаПодключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ФайлИсточникДанных Тогда
		ВыборФайла(Новый ОписаниеОповещения("ВыборФайлаШаблонаЗавершение", ЭтотОбъект), Объект.СтрокаПодключения);
	Иначе
		ВыборADOПодключения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтрокаПодключенияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Справочники.ПрайсЛистыКонтрагентов.СтрокаПодключенияПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПодключенияПриИзменении(Элемент)
	
	Если Не Объект.ФайлИсточникДанных Тогда
		ЗашифроватьСтрокуПодключения();
	КонецЕсли;
	
	ЗаполнитьСтруктуруДанных();
	
	ПараметрыДействия = Новый Структура;
	СтрокаПодключенияПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // СтрокаПодключенияПриИзменении()

&НаСервере
Процедура ПереключательФайлПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Объект.СтрокаПодключения = "";
	ЗашифроватьСтрокуПодключения();
	Справочники.ПрайсЛистыКонтрагентов.ФайлИсточникДанныхПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательФайлПриИзменении(Элемент)
	
	// обновим признак у объекта
	Объект.ФайлИсточникДанных = ПереключательФайл;
	
	ПараметрыДействия = Новый Структура;
	ПереключательФайлПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФайлаПрайсЛистаПриАктивизацииСтроки(Элемент)
	
	ОбразецДанныхСнятьВыделениеКолонки();
	УстановитьВыделеннуюКолонку();
	ОбразецДанныхВыделитьКолонку(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФайлаПрайсЛистаПриИзменении(Элемент)
	
	ОбразецДанныхСнятьВыделениеКолонки();
	УстановитьВыделеннуюКолонку();
	ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьБезКоличестваПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Структура("ИмяРеквизитаПрайсЛиста", "Количество");
	НайденныеСтроки = Объект.СтруктураФайлаПрайсЛиста.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКоличество = НайденныеСтроки[0];
	Если ЗагружатьБезКоличества Тогда
		СтрокаКоличество.ЗначениеПоУмолчанию = Истина;
		Объект.КоличествоПоУмолчанию = Истина;
	Иначе
		СтрокаКоличество.ЗначениеПоУмолчанию = 0;
		Объект.КоличествоПоУмолчанию = 0;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФайлаПрайсЛистаЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СтруктураФайлаПрайсЛиста.ТекущиеДанные;
	Если ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Производитель" ИЛИ ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Валюта" Тогда
		ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
		ИмяСправочника    = ?(ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Производитель", "Производители", "Валюты");
		
		ОткрытьФорму(
			СтрШаблон("Справочник.%1.ФормаВыбора", ИмяСправочника),
			ПараметрыОткрытия,
			Элемент,
			УникальныйИдентификатор,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Наименование" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводСтрокиЗавершение", ЭтотОбъект);
		ПоказатьВводСтроки(
			ОписаниеОповещения,
			ТекущиеДанные.ЗначениеПоУмолчанию,
			НСтр("ru = 'Выбор значения по умолчанию для ""Наименования""'"),
			100,
			Ложь);
	ИначеЕсли ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "СрокПоставки" Тогда
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("СрокПоставкиМаксимальный" , Объект.СрокПоставкиМаксимальный);
		ПараметрыОткрытия.Вставить("СрокПоставкиМинимальный"  , Объект.СрокПоставкиМинимальный);
		ПараметрыОткрытия.Вставить("ЭтоИнтервал"              , Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводСрокаПоставкиЗаверщение", ЭтотОбъект, ТекущиеДанные.ПолучитьИдентификатор());
		
		ОткрытьФорму(
			"ОбщаяФорма.ФормаВводаСрокаПоставки",
			ПараметрыОткрытия,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Количество" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводСтрокиЗавершение", ЭтотОбъект);
		ПоказатьВводЧисла(
			ОписаниеОповещения,
			ТекущиеДанные.ЗначениеПоУмолчанию,
			НСтр("ru = 'Выбор значения по умолчанию для ""Количество""'"),
			15,
			3);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФайлаПрайсЛистаЗначениеПоУмолчаниюОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СтруктураФайлаПрайсЛиста.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Производитель" Тогда
		ТекущиеДанные.ЗначениеПоУмолчанию = Строка(ВыбранноеЗначение);
		Объект.Производитель              = ВыбранноеЗначение;
	ИначеЕсли ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Валюта" Тогда
		ТекущиеДанные.ЗначениеПоУмолчанию = Строка(ВыбранноеЗначение);
		Объект.Валюта                     = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФайлаПрайсЛистаЗначениеПоУмолчаниюАвтоПодбор(
	Элемент,
	Текст,
	ДанныеВыбора,
	ПараметрыПолученияДанных,
	Ожидание,
	СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СтруктураФайлаПрайсЛиста.ТекущиеДанные;
	Если ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Вес" Тогда
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить("В килограммах", "В килограммах");
		ДанныеВыбора.Добавить("В граммах", "В граммах");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФайлаПрайсЛистаЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СтруктураФайлаПрайсЛиста.ТекущиеДанные;
	
	Если ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Производитель"
		ИЛИ ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Валюта" Тогда
		Объект[ТекущиеДанные.ИмяРеквизитаПрайсЛиста] = Неопределено;
	ИначеЕсли ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Вес" Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "СрокПоставки" Тогда
		СтандартнаяОбработка = Ложь;
		Объект.СрокПоставкиМаксимальный = Неопределено;
		Объект.СрокПоставкиМинимальный  = Неопределено;
		
		ТекущиеДанные.ЗначениеПоУмолчанию = ПрайсЛистыКонтрагентовКлиентСервер.
			ПредставлениеСрокаПоставкиИнтервал(Объект.СрокПоставкиМинимальный, Объект.СрокПоставкиМаксимальный);
	ИначеЕсли ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Количество" Тогда
		Объект.КоличествоПоУмолчанию = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФайлаПрайсЛистаЗначениеПоУмолчаниюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СтруктураФайлаПрайсЛиста.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.ЗначениеПоУмолчанию) И
		(ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Производитель" ИЛИ ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Валюта") Тогда
		
		Объект[ТекущиеДанные.ИмяРеквизитаПрайсЛиста] = Неопределено;
		
	ИначеЕсли ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Вес" Тогда
		
		Объект.КоэффициентПересчетаВеса = ?(ТекущиеДанные.ЗначениеПоУмолчанию = "В килограммах", 1000, 1);
		
	ИначеЕсли ПустаяСтрока(ТекущиеДанные.ЗначениеПоУмолчанию) И ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Количество" Тогда
		
		Объект.КоличествоПоУмолчанию = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРеквизитаФильтрПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическогоСпискаПравилЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПравилЗагрузкиФильтрПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическогоСпискаПравилЗагрузки();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрайсЛистВАрхивеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Справочники.ПрайсЛистыКонтрагентов.ПрайсЛистВАрхивеПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистВАрхивеПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПрайсЛистВАрхивеПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура АвтообновлениеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если Автообновление Тогда
		ИнтервалПроверкиНачало = 0;
		ИнтервалПроверкиКонец  = 24;
	Иначе
		ИнтервалПроверкиНачало = 0;
		ИнтервалПроверкиКонец  = 0;
	КонецЕсли;
	
	ОбновитьПодсказкуПереодичностиОбновления();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтообновлениеПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПроверкиНовыхДанныхПриИзменении(Элемент)
	
	АвтообновлениеПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалПроверкиНачалоПриИзменении(Элемент)
	
	ОбновитьПодсказкуПереодичностиОбновления();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалПроверкиКонецПриИзменении(Элемент)
	
	ОбновитьПодсказкуПереодичностиОбновления();
	
КонецПроцедуры

&НаСервере
Процедура ТранспортПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Элементы.ТранспортРасширеннаяПодсказка.Заголовок =
		Справочники.ТранспортПрайсЛистовКонтрагентов.ПолучитьПредставлениеТранспорта(Объект.Транспорт);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ТранспортПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура АвтозагрузкаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозагрузкаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтозагрузкаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗагрузкиРасширеннаяПодсказкаНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Прайс-лист должен быть записан.'"));
		Возврат;
	КонецЕсли;
	
	Если СтатусЗагрузки <> ПредопределенноеЗначение("Перечисление.СтатусыЗагрузкиПрайсЛистов.Запрещена") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеСтатусаЗагрузкиЗавершение", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения,, "Причина",, Истина);
	Иначе
		ИзменитьСостояниеЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаскаФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыДиалогаПомещенияФайлов = Новый ПараметрыДиалогаПомещенияФайлов(
		НСтр("ru = 'Выбор файла образца для маски'"),
		Ложь,
		ФильтрыДляФайловПрайсЛистов()
		
	);
	РучкаПередНачалом = Новый ОписаниеОповещения(
		"МаскаПомещениеФайлаНаСерверПередНачалом",
		ЭтотОбъект,
		Ложь
	);
	НачатьПомещениеФайлаНаСервер(,, РучкаПередНачалом,, ПараметрыДиалогаПомещенияФайлов, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура МаскаАрхиваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыДиалогаПомещенияФайлов = Новый ПараметрыДиалогаПомещенияФайлов(
		НСтр("ru = 'Выбор файла образца для маски'"),
		Ложь,
		ФильтрыДляАрхивовПрайсЛистов()
	);
	РучкаПередНачалом = Новый ОписаниеОповещения(
		"МаскаПомещениеФайлаНаСерверПередНачалом",
		ЭтотОбъект,
		Истина
	);
	НачатьПомещениеФайлаНаСервер(,, РучкаПередНачалом,, ПараметрыДиалогаПомещенияФайлов, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияКомпанииДеревоПодразделенийПриАктивизацииСтроки(Элемент)
	
	ОбновитьКомандыУправленияСпискомПодразделений();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗагрузкиНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		ДопОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНастройкуЗагрузкиНоменклатуры", ЭтотОбъект, Ложь);
		
		ОписаниеОповещения    = Новый ОписаниеОповещения(
			"ВопросОЗаписиОбъектаЗавершение",
			ЭтотОбъект,
			ДопОписаниеОповещения);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Для выбора настройки загрузки необходимо записать прайс-лист. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	СоздатьНастройкуЗагрузкиНоменклатуры(Неопределено, Неопределено);
	
КонецПроцедуры // НастройкаЗагрузкиНоменклатурыСоздание()

&НаКлиенте
Процедура НастройкаЗагрузкиНоменклатурыПриИзменении(Элемент)
	
	ПроверитьСоответствиеНастройкиЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗагрузкиНоменклатурыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДополнительныеПараметры", Новый Структура("ПрайсЛист", Объект.Ссылка));
	ПараметрыФормы.Вставить("Ключ", Объект.НастройкаЗагрузкиНоменклатуры);
	
	ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ФормаОбъекта", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // НастройкаЗагрузкиНоменклатурыОткрытие()

&НаКлиенте
Процедура НастройкаЗагрузкиНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ДопОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыборНастройкиЗагрузкиНоменклатуры", ЭтотОбъект, Ложь);
		
		ОписаниеОповещения    = Новый ОписаниеОповещения(
			"ВопросОЗаписиОбъектаЗавершение",
			ЭтотОбъект,
			ДопОписаниеОповещения);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Для выбора настройки загрузки необходимо записать прайс-лист. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьВыборНастройкиЗагрузкиНоменклатуры(Неопределено);
	
КонецПроцедуры // НастройкаЗагрузкиНоменклатурыНачалоВыбора()

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	СформироватьНаименованиеПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ВладелецПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Справочники.ПрайсЛистыКонтрагентов.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	СтавкаНДСПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КэшНаименование = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтавкаНДС",
		"ТолькоПросмотр",
		Объект.ЦенаВключаетНДС
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УказатьПервуюСтрокуСДанными(Команда)
	
	СтрокиЛиста = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ИмяТекущейСтраницы));
	Если СтрокиЛиста.Количество() > 0 Тогда
		Лист = СтрокиЛиста[0];
	Иначе
		ПрайсЛистыКонтрагентовКлиентСервер.
		УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей,, НСтр("ru = 'Данные рассинхронизированны! Обновите образец.'"), БиблиотекаКартинок.Нет);
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "НачалоДанных");
	ДополнительныеПараметры.Вставить("Лист"    , Лист);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДействияСоСтрокойОбразцаДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводЧисла(ОписаниеОповещения, Лист.СтрокаНачало);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПоследнююСтрокуДанных(Команда)
	
	СтрокиЛиста = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ИмяТекущейСтраницы));
	Если СтрокиЛиста.Количество() > 0 Тогда
		Лист = СтрокиЛиста[0];
	Иначе
		ПрайсЛистыКонтрагентовКлиентСервер.
		УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей,, НСтр("ru = 'Данные рассинхронизированны! Обновите образец.'"), БиблиотекаКартинок.Нет);
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "КонецДанных");
	ДополнительныеПараметры.Вставить("Лист"    , Лист);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДействияСоСтрокойОбразцаДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводЧисла(ОписаниеОповещения, Лист.СтрокаКонец);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуЗаголовков(Команда)
	
	СтрокиЛиста = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ИмяТекущейСтраницы));
	Если СтрокиЛиста.Количество() > 0 Тогда
		Лист = СтрокиЛиста[0];
	Иначе
		ПрайсЛистыКонтрагентовКлиентСервер.
		УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей,, НСтр("ru = 'Данные рассинхронизированны! Обновите образец.'"), БиблиотекаКартинок.Нет);
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "Заголовок");
	ДополнительныеПараметры.Вставить("Лист"    , Лист);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДействияСоСтрокойОбразцаДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводЧисла(ОписаниеОповещения, Лист.СтрокаЗаголовковКолонок);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияПолейОбновить(Команда)
	
	ЗаполнитьСтруктуруДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияПолейОчистить(Команда)
	
	ОчиститьСтруктуруДанных();
	ЗаполнитьТабличноеПолеОбразецДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если Объект.ВидПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВидыПрайсЛистов.ВебПрайсЛист") И
		НЕ(Объект.ХранитьДанныеЛокально ИЛИ Объект.ФайлИсточникДанных) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранный прайс-лист не нуждается в загрузке.'"));
		Возврат;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.СтрокаПодключения) Тогда
		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Не заполнен%1. Выполнить загрузку невозможно.'"),
			?(Объект.ФайлИсточникДанных, " образец файла", "а строка подключения"));
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		// предложим записать объект
		ДополнительноеОповещение = Новый ОписаниеОповещения("ЗагрузитьПрайсЛист", ЭтотОбъект);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросОЗаписиОбъектаЗавершение",
			ЭтотОбъект,
			ДополнительноеОповещение);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Для загрузки необходимо записать прайс-лист. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
	КонецЕсли;
	
	ЗагрузитьПрайсЛист();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПравило(Команда)
	
	ТекущиеДанные = Элементы.ПравилаЗагрузки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УдалитьПравилоНаСервере(Объект.Ссылка, Элементы.ПравилаЗагрузки.ТекущаяСтрока);
		Элементы.ПравилаЗагрузки.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	ПараметрыОткрытия = Новый Структура("Отбор", Новый Структура("ПрайсЛист", Объект.Ссылка));
	ОткрытьФорму(
		"РегистрСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.ФормаСписка",
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СкачатьНовыеФайлы(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		// предложим записать объект
		ДопОписаниеОповещения = Новый ОписаниеОповещения("СкачатьНовыеФайлыПрайсЛиста", ЭтотОбъект);
		ОписаниеОповещения    = Новый ОписаниеОповещения(
			"ВопросОЗаписиОбъектаЗавершение",
			ЭтотОбъект,
			ДопОписаниеОповещения);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Для загрузки необходимо записать прайс-лист. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
	КонецЕсли;
	
	СкачатьНовыеФайлыПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяНаценка(Команда)
	
	// заполним структуру заполнения нового документа
	Если Объект.Ссылка.Пустая() Тогда
		ДопОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДокументНазначенияСкидокНаценок", ЭтотОбъект, Истина);
		
		ОписаниеОповещения    = Новый ОписаниеОповещения(
			"ВопросОЗаписиОбъектаЗавершение",
			ЭтотОбъект,
			ДопОписаниеОповещения);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Для загрузки необходимо записать прайс-лист. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументНазначенияСкидокНаценок(Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяСкидка(Команда)
	
	// заполним структуру заполнения нового документа
	Если Объект.Ссылка.Пустая() Тогда
		ДопОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДокументНазначенияСкидокНаценок", ЭтотОбъект, Ложь);
		
		ОписаниеОповещения    = Новый ОписаниеОповещения(
			"ВопросОЗаписиОбъектаЗавершение",
			ЭтотОбъект,
			ДопОписаниеОповещения);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Для загрузки необходимо записать прайс-лист. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументНазначенияСкидокНаценок(Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПолеКлючевым(Команда)
	
	Если НастройкаСоответствияПолей.ВыделенныеОбласти.Количество() > 0 Тогда
		Область = НастройкаСоответствияПолей.ВыделенныеОбласти[0];
		
		Если Область.Верх = 2 И Область.Гиперссылка Тогда
			ПозицияОблости = Неопределено;
			Если Объект.ФайлИсточникДанных Тогда
				ПозицияОблости = Область.Лево - 1;
			Иначе
				ПозицияОблости = Объект.ЗаголовкиКолонокВПрайсЛисте[Область.Лево - 2].ИмяКолонки;
			КонецЕсли;
			
			Условие = Новый Структура("ИмяПоляФайла", Строка(ПозицияОблости));
			ПодходящиеСтроки = Объект.СтруктураФайлаПрайсЛиста.НайтиСтроки(Условие);
			Если ПодходящиеСтроки.Количество() > 0 Тогда
				ПодходящиеСтроки[0].Ключевое = НЕ ПодходящиеСтроки[0].Ключевое;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПрайсЛист(Команда)
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьПрайсЛист(Команда)
	
	ПараметрыЗаписи = Новый Структура("ЗакрытьПослеЗаписи", Истина);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственноеПодразделение(Команда)
	
	Если Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные = Неопределено ИЛИ
		Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные.ЭтоОсновноеПодразделение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросОбУстановкеОтветственногоПодразделенияЗавершение",
		ЭтотОбъект,
		Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные.ПодразделениеКомпании
	);
	
	ТекстВопроса = НСтр("ru = 'Все предыдущие изменения доступности прайс-листа по подразделениям будут сброшены.
							  |Продолжить?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьПросмотрПрайсЛистаПодразделению(Команда)
	
	Если Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные = Неопределено ИЛИ
		Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные.ЭтоОсновноеПодразделение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные;
	
	ТекущиеДанные.ЕстьДоступ           = Ложь;
	ТекущиеДанные.УровеньДоступности   = ПредопределенноеЗначение("Перечисление.УровниДоступностиПрайсЛистовКонтрагентов.Запрещено");
	ТекущиеДанные.ПредставлениеДоступа = СтрШаблон("(%1)", НРег(Строка(ТекущиеДанные.УровеньДоступности)));
	ТекущиеДанные.Картинка             = 1;
	
	УстановитьДляПодчиненныхВДереве(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.УровеньДоступности,
		ТекущиеДанные.ЕстьДоступ, ТекущиеДанные.ПредставлениеДоступа, 1);
	
	ОбновитьКомандыУправленияСпискомПодразделений();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУровеньДоступностиОграниченияПросмотр(Команда)
	
	Если Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные = Неопределено ИЛИ
		Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные.ЭтоОсновноеПодразделение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные;
	
	ТекущиеДанные.УровеньДоступности =
		ПредопределенноеЗначение("Перечисление.УровниДоступностиПрайсЛистовКонтрагентов.Просмотр");
	
	ТекущиеДанные.ЕстьДоступ           = Истина;
	ТекущиеДанные.ПредставлениеДоступа = СтрШаблон("(%1)", НРег(Строка(ТекущиеДанные.УровеньДоступности)));
	ТекущиеДанные.Картинка             = 2;
	
	УстановитьДляПодчиненныхВДереве(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.УровеньДоступности,
		ТекущиеДанные.ЕстьДоступ, ТекущиеДанные.ПредставлениеДоступа, 2);
	
	ОбновитьКомандыУправленияСпискомПодразделений();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУровеньДоступностиОграниченияПрямыеЗаказы(Команда)
	
	Если Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные = Неопределено ИЛИ
		Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные.ЭтоОсновноеПодразделение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные;
	
	ТекущиеДанные.УровеньДоступности =
		ПредопределенноеЗначение("Перечисление.УровниДоступностиПрайсЛистовКонтрагентов.ПрямыеЗаказы");
	
	ТекущиеДанные.ЕстьДоступ           = Истина;
	ТекущиеДанные.ПредставлениеДоступа = СтрШаблон("(%1)", НРег(Строка(ТекущиеДанные.УровеньДоступности)));
	ТекущиеДанные.Картинка             = 3;
	
	УровеньДоступностиДляПодчиненных   = ПредопределенноеЗначение("Перечисление.УровниДоступностиПрайсЛистовКонтрагентов.Просмотр");
	ПредставлениеДоступаДляПодчиненных = СтрШаблон("(%1)", НРег(Строка(УровеньДоступностиДляПодчиненных)));
	
	УстановитьДляПодчиненныхВДереве(ТекущиеДанные.ПолучитьЭлементы(), УровеньДоступностиДляПодчиненных,
		ТекущиеДанные.ЕстьДоступ, ПредставлениеДоступаДляПодчиненных, 2);
	
	ОбновитьКомандыУправленияСпискомПодразделений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ВыборADOПодключения()
	
	#Если НЕ МобильныйКлиент Тогда
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	// утилита для формирования и редактирования строки ConnectionString
	DataLinks  = Новый COMОбъект("DataLinks");
	
	Попытка
		Connection.ConnectionString = ПолучитьРасшифрованнуюСтрокуПодключения();
		DataLinks.PromptEdit(Connection);
	Исключение
		Connection.ConnectionString= "";
		DataLinks.PromptEdit(Connection);
	КонецПопытки;
	
	Объект.СтрокаПодключения = Connection.ConnectionString;
	СтрокаПодключенияПриИзменении(Неопределено);
	
	#Иначе
	ВызватьИсключение НСтр("ru = 'Функция недоступна в режиме мобильного клиента.'");
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтруктуруДанных()
	
	Если ПустаяСтрока(Объект.СтрокаПодключения) Тогда
		Возврат;
	КонецЕсли;
	
	ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей);
	
	Если Объект.ФайлИсточникДанных Тогда
		ОбработчикОповещенияОВыбореФайла =
			Новый ОписаниеОповещения(
				"ЗаполнитьСтруктуруДанныхПомещениеФайловЗаверщение",
				ЭтотОбъект
			);
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Объект.СтрокаПодключения));
		НачатьПомещениеФайлов(ОбработчикОповещенияОВыбореФайла,ПомещаемыеФайлы,, Ложь, УникальныйИдентификатор);
	Иначе
		Если НЕ ЗаполнитьСтруктуруДанныхИзADOОтложено() Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСтруктуруДанныхИзФайлаПроверитьВыполнение", 0.5, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоляЗагрузки()
	ЕстьНовыеПоля = Ложь;
	
	МатаданныеПрайса = ПрайсЛистыКонтрагентов.МетеданныеРегистраПрайсЛистыКонтрагентов();
	
	// заполним табличку с полями
	ВсеСсылки = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки,Документы.ТипВсеСсылки().Типы());
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки,ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки,Перечисления.ТипВсеСсылки().Типы());
	
	// Загрузим реквизиты регистра
	Для каждого Рек Из МатаданныеПрайса.Реквизиты Цикл
		ЭтоСсылка=Ложь;
		Для каждого ТипРеквизита Из Рек.Тип.Типы() Цикл
			Если ВсеСсылки.СодержитТип(ТипРеквизита) Тогда
				ЭтоСсылка = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Если НЕ ЭтоСсылка И НЕ Рек.Имя = "ПроизводительВПрайсЛисте" Тогда
			Если Объект.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", Рек.Имя)).Количество() = 0 Тогда
				ЕстьНовыеПоля = Истина;
				НовоеПоле = Объект.СтруктураФайлаПрайсЛиста.Добавить();
				НовоеПоле.ИмяРеквизитаПрайсЛиста = Рек.Имя;
				НовоеПоле.Ключевое = Ложь;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	// Загрузим измерения регистра
	Для каждого Рек Из МатаданныеПрайса.Измерения Цикл
		ЭтоСсылка=Ложь;
		Для каждого ТипРеквизита Из Рек.Тип.Типы() Цикл
			Если ВсеСсылки.СодержитТип(ТипРеквизита) Тогда
				ЭтоСсылка = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
			
		Если НЕ ЭтоСсылка И
			НЕ(Рек.Имя = "АртикулДляПоиска" ИЛИ Рек.Имя = "ДатаЗаписи" ИЛИ Рек.Имя = "КодПредложения") ИЛИ
			Рек.Имя = "Производитель" Тогда
			
			Если Объект.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", Рек.Имя)).Количество() = 0 Тогда
				ЕстьНовыеПоля = Истина;
				НовоеПоле = Объект.СтруктураФайлаПрайсЛиста.Добавить();
				НовоеПоле.ИмяРеквизитаПрайсЛиста = Рек.Имя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Загрузим ресурсы регистра
	Для каждого Рек Из МатаданныеПрайса.Ресурсы Цикл
		ЭтоСсылка=Ложь;
		Для каждого ТипРеквизита Из Рек.Тип.Типы() Цикл
			Если ВсеСсылки.СодержитТип(ТипРеквизита) И НЕ ТипРеквизита = Тип("СправочникСсылка.Валюты")  Тогда
				ЭтоСсылка = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Если НЕ ЭтоСсылка
			И НЕ Рек.Имя = "СрокПоставкиМинимальный"
			И НЕ Рек.Имя = "СрокПоставкиМаксимальный" Тогда
			Если Объект.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", Рек.Имя)).Количество() = 0 Тогда
				ЕстьНовыеПоля = Истина;
				НовоеПоле = Объект.СтруктураФайлаПрайсЛиста.Добавить();
				НовоеПоле.ИмяРеквизитаПрайсЛиста = Рек.Имя;
				НовоеПоле.Ключевое = (Рек.Имя = "КлючСтрокиПоставщика");
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ЕстьНовыеПоля;
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	// Сначала все очистим
	ИменаКолонок.Очистить();
	СписокВыбора = Элементы.СтруктураФайлаПрайсЛистаИмяПоляФайла.СписокВыбора;
	СписокВыбора.Очистить();
	
	// Заполним списки выбора колонок
	Для Каждого СтрокаКолонка Из Объект.ЗаголовкиКолонокВПрайсЛисте Цикл
		ИменаКолонок.Добавить(СтрокаКолонка.ИмяКолонки, СтрокаКолонка.ПредставлениеКолонки);
		СписокВыбора.Добавить(СтрокаКолонка.ИмяКолонки, СтрокаКолонка.ПредставлениеКолонки);
	КонецЦикла;
	
	ОбновитьУсловноеОформлениеДляЗаголовков();
	
КонецПроцедуры // ЗаполнитьСпискиВыбора()

&НаСервере
Процедура ЗаполнитьСписокВыбораРеквизитовПравилЗагрузки()
	
	СписокВыборРеквизита = Элементы.ИмяРеквизитаФильтр.СписокВыбора;
	СписокВыборРеквизита.Очистить();
	
	МассивДоступныхРеквизитов =
		РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.ПереченьРеквизитовВПравилахЗагрузкиПрайсЛиста(Объект.Ссылка);
	
	СписокВыборРеквизита.ЗагрузитьЗначения(МассивДоступныхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиКолонок()
	
	Объект.ЗаголовкиКолонокВПрайсЛисте.Очистить();
	
	Если ПустаяСтрока(Объект.ИмяТаблицы) Тогда
		// Не указана страница с заголовками!
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", Объект.ИмяТаблицы));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВыбраннаяСтраница = НайденныеСтроки[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбразецДанных    = ВыбраннаяСтраница.ДанныеОбразцаСтраницы;
	СтрокаЗаголовков = ?(Объект.ФайлИсточникДанных, ВыбраннаяСтраница.СтрокаЗаголовковКолонок, 1);
	
	Если СтрокаЗаголовков > 0 Тогда
		Если ЗначениеЗаполнено(ОбразецДанных) Тогда
			Для СчКолонок = 0 По ОбразецДанных.ВГраница() Цикл
				НоваяСтрока = Объект.ЗаголовкиКолонокВПрайсЛисте.Добавить();
				НоваяСтрока.ИмяКолонки = Формат(СчКолонок + 1, "ЧН=0; ЧГ=0");
				Если ОбразецДанных[СчКолонок].ВГраница() >= СтрокаЗаголовков-1 И ЗначениеЗаполнено(ОбразецДанных[СчКолонок][СтрокаЗаголовков-1]) Тогда
					НоваяСтрока.ПредставлениеКолонки = ОбразецДанных[СчКолонок][СтрокаЗаголовков-1];
				Иначе
					НоваяСтрока.ПредставлениеКолонки = НоваяСтрока.ИмяКолонки;
				КонецЕсли;
				Если Не Объект.ФайлИсточникДанных Тогда
					НоваяСтрока.ИмяКолонки = НоваяСтрока.ПредставлениеКолонки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ОбразецДанных) Тогда
			Для СчКолонок = 0 По ОбразецДанных.ВГраница() Цикл
				НоваяСтрока = Объект.ЗаголовкиКолонокВПрайсЛисте.Добавить();
				НоваяСтрока.ИмяКолонки = Формат(СчКолонок + 1, "ЧН=0; ЧГ=0");
				НоваяСтрока.ПредставлениеКолонки = НоваяСтрока.ИмяКолонки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьХранилищаЗначений(ТекущийОбъект)
	
	Для Каждого Строка Из ТекущийОбъект.СтруктураСтраницПрайсЛиста Цикл
		ТекущаяСтрока = Объект.СтруктураСтраницПрайсЛиста[ТекущийОбъект.СтруктураСтраницПрайсЛиста.Индекс(Строка)];
		Если ТекущаяСтрока <> Неопределено Тогда
			Строка.ОбразецДанных = Новый ХранилищеЗначения(ТекущаяСтрока.ДанныеОбразцаСтраницы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьХранилищаЗначений(ТекущийОбъект)
	Для Каждого Строка Из ТекущийОбъект.СтруктураСтраницПрайсЛиста Цикл
		ТекущаяСтрока = Объект.СтруктураСтраницПрайсЛиста[ТекущийОбъект.СтруктураСтраницПрайсЛиста.Индекс(Строка)];
		Если ТекущаяСтрока <> Неопределено Тогда
			ОбразецДанных = Строка.ОбразецДанных.Получить();
			Если ОбразецДанных <> Неопределено Тогда
				ТекущаяСтрока.ДанныеОбразцаСтраницы =?(
					ТипЗнч(ОбразецДанных) = Тип("ФиксированныйМассив"),
					ОбразецДанных,
					Новый ФиксированныйМассив(ОбразецДанных));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтруктуруДанных()
	
	ИменаКолонок.Очистить();
	Объект.СтруктураСтраницПрайсЛиста.Очистить();
	Объект.ЗаголовкиКолонокВПрайсЛисте.Очистить();
	Элементы.СтруктураФайлаПрайсЛистаИмяПоляФайла.СписокВыбора.Очистить();
	Автозагрузка            = Ложь;
	Автообновление          = Ложь;
	Объект.Транспорт        = Неопределено;
	Объект.ПрайсЛистВАрхиве = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыделеннуюКолонку()
	Если Элементы.СтруктураФайлаПрайсЛиста.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляФайла = Элементы.СтруктураФайлаПрайсЛиста.ТекущиеДанные.ИмяПоляФайла;
	
	Если ТипЗнч(ИмяПоляФайла) = Тип("Число") Тогда
		ВыделеннаяКолонка = ИмяПоляФайла;
	Иначе
		ВыделеннаяКолонка = 0;
		Для СчКолонок = 1 По ИменаКолонок.Количество() Цикл
			Если ИменаКолонок[СчКолонок-1].Значение = ИмяПоляФайла Тогда
				ВыделеннаяКолонка = СчКолонок;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОчиститьСтруктуруДанных", Ложь) Тогда
		ОчиститьСтруктуруДанных();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыСтруктрурыФайла(ИмяРеквизитаПрайсЛиста, Реквизит)
	Если СтрНачинаетсяС(ИмяРеквизитаПрайсЛиста, "Производитель") Тогда
		Если НЕ Объект.Производитель.Пустая() И ПустаяСтрока(Реквизит.ЗначениеПоУмолчанию) Тогда
			Реквизит.ЗначениеПоУмолчанию = Строка(Объект.Производитель);
		ИначеЕсли Объект.Производитель.Пустая() И НЕ ПустаяСтрока(Реквизит.ЗначениеПоУмолчанию) Тогда
			Реквизит.ЗначениеПоУмолчанию = "";
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизитаПрайсЛиста, "Валюта") Тогда
		Если НЕ Объект.Валюта.Пустая() И ПустаяСтрока(Реквизит.ЗначениеПоУмолчанию) Тогда
			Реквизит.ЗначениеПоУмолчанию = Строка(Объект.Валюта);
		ИначеЕсли Объект.Валюта.Пустая() И НЕ ПустаяСтрока(Реквизит.ЗначениеПоУмолчанию) Тогда
			Реквизит.ЗначениеПоУмолчанию = "";
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизитаПрайсЛиста, "Вес") Тогда
		Если ПустаяСтрока(Реквизит.ЗначениеПоУмолчанию) Тогда
			Реквизит.ЗначениеПоУмолчанию = ?(Объект.КоэффициентПересчетаВеса = 1000, "В килограммах", "В граммах")
		КонецЕсли;
	ИначеЕсли ИмяРеквизитаПрайсЛиста = "Наименование" Тогда
		УсловиеПоиска = Новый Структура("ИмяРеквизитаПрайсЛиста", "Наименование");
		СтрокиНаименования = Объект.СтруктураФайлаПрайсЛиста.НайтиСтроки(УсловиеПоиска);
		Если СтрокиНаименования.Количество() > 0 И СтрокиНаименования.Найти(Реквизит) <> Неопределено Тогда
			Реквизит.Действие = ?(Реквизит = СтрокиНаименования[0], "Добавить", "Удалить");
		КонецЕсли;
	ИначеЕсли ИмяРеквизитаПрайсЛиста = "Количество" Тогда
		Реквизит.ЗначениеПоУмолчанию = Объект.КоличествоПоУмолчанию;
		Если ТипЗнч(Объект.КоличествоПоУмолчанию) = Тип("Булево") И Объект.КоличествоПоУмолчанию Тогда
			ЗагружатьБезКоличества = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеДляРедактированияЗначенияРеквизиты = Новый Массив;
	ДоступныеДляРедактированияЗначенияРеквизиты.Добавить("Производитель");
	ДоступныеДляРедактированияЗначенияРеквизиты.Добавить("Валюта");
	ДоступныеДляРедактированияЗначенияРеквизиты.Добавить("Вес");
	ДоступныеДляРедактированияЗначенияРеквизиты.Добавить("Наименование");
	ДоступныеДляРедактированияЗначенияРеквизиты.Добавить("СрокПоставки");
	ДоступныеДляРедактированияЗначенияРеквизиты.Добавить("Количество");
	
	Если ДоступныеДляРедактированияЗначенияРеквизиты.Найти(ИмяРеквизитаПрайсЛиста) <> Неопределено Тогда
		Реквизит.ДоступноРедактированиеЗначения = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыДинамическогоСпискаПравилЗагрузки()
	
	ПравилаЗагрузки.Параметры.УстановитьЗначениеПараметра("ПрайсЛист"              , Объект.Ссылка);
	ПравилаЗагрузки.Параметры.УстановитьЗначениеПараметра("НазначениеПравила"      , НазначениеПравилЗагрузкиФильтр);
	ПравилаЗагрузки.Параметры.УстановитьЗначениеПараметра("ИмяРеквизитаПрайсЛиста" , ИмяРеквизитаФильтр);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическогоСпискаСкидокНаценок()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СкидкиПрайсЛиста,
		"ПрайсЛист",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.Равно,
		"Прайс-лист",
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		НаценкиПрайсЛиста,
		"ПрайсЛист",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.Равно,
		"Прайс-лист",
		Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиАвтообновления()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовАвтообновление.ПрайсЛист,
	|	ПрайсЛистыКонтрагентовАвтообновление.ИспользоватьАвтообновление КАК Автообновление,
	|	ПрайсЛистыКонтрагентовАвтообновление.ИспользоватьАвтозагрузку КАК Автозагрузка,
	|	ПрайсЛистыКонтрагентовАвтообновление.ПериодичностьПроверкиНовыхДанных,
	|	ПрайсЛистыКонтрагентовАвтообновление.ИнтервалПроверкиНачало,
	|	ПрайсЛистыКонтрагентовАвтообновление.ИнтервалПроверкиКонец
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовАвтообновление КАК ПрайсЛистыКонтрагентовАвтообновление
	|ГДЕ
	|	ПрайсЛистыКонтрагентовАвтообновление.ПрайсЛист = &ПрайсЛист";
	Запрос.УстановитьПараметр("ПрайсЛист", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеЗагрузки(Причина = Неопределено)
	
	РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.ИзменитьСостояниеЗагрузки(Объект.Ссылка, Причина);
	СтатусЗагрузки = РегистрыСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.ТекущиеСостояниеПрайсЛиста(Объект.Ссылка);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьПравилоНаСервере(ПрайсЛист, КлючЗаписи)
	
	РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.ОчиститьПравилаПрайсЛиста(
		ПрайсЛист,
		КлючЗаписи.НазначениеПравила,
		КлючЗаписи.ИдентификаторПравила);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрайсЛист()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ПрайсЛист", Объект.Ссылка));
	
	ОткрытьФорму(
		"РегистрСведений.ПрайсЛистыКонтрагентовВременный.ФормаСписка",
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТребуетсяОбновитьКлючиЗаписиПрайсЛиста(ПрайсЛист, Знач СтруктураПрайсЛиста)
	
	КлючевыеПоля = СтруктураПрайсЛиста.НайтиСтроки(Новый Структура("Ключевое", Истина));
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.ИмяРеквизитаПрайсЛиста КАК ИмяРеквизитаПрайсЛиста
	|ИЗ
	|	Справочник.ПрайсЛистыКонтрагентов.СтруктураФайлаПрайсЛиста КАК ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста
	|ГДЕ
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.Ссылка = &ПрайсЛист
	|	И ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.Ключевое = ИСТИНА");
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьИзменения = Выборка.Количество() <> КлючевыеПоля.Количество();
	
	// проверим состав полей на соответствие
	Если НЕ ЕстьИзменения Тогда
		
		КлючевыеПоля = СтруктураПрайсЛиста
			.Выгрузить(КлючевыеПоля, "ИмяРеквизитаПрайсЛиста")
			.ВыгрузитьКолонку("ИмяРеквизитаПрайсЛиста");
		
		Пока Выборка.Следующий() Цикл
			
			Если КлючевыеПоля.Найти(Выборка.ИмяРеквизитаПрайсЛиста) = Неопределено Тогда
				
				ЕстьИзменения = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЕстьИзменения Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Проверим, а есть ли данные завязанные на ключевые поля.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаЗагрузки.ОбъектПравила КАК ОбъектПравила
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|ГДЕ
	|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)";
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ВыборФайла(ФинальноеОповещение, ПутьПоУмолчанию = "", УстановитьФильт = Ложь)
	
	ДополнительныеПараметры = Новый Структура("Оповещение,ПутьПоУмолчанию", ФинальноеОповещение, ПутьПоУмолчанию);
	Если УстановитьФильт Тогда
		ДополнительныеПараметры.Вставить("УстановитьФильт", Истина);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ТекстСообщения = НСтр("ru = 'Для загрузки файла рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыборФайлаЗавершениеКонтроляРасширенияРаботыСФайлами",
		ПрайсЛистыКонтрагентовКлиент,
		ДополнительныеПараметры);
		
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Ложь);
	
КонецПроцедуры // ВыборФайла()

&НаКлиенте
Процедура ВыборКаталога(ФинальноеОповещение, ПутьПоУмолчанию = "")
	
	ДополнительныеПараметры = Новый Структура("Оповещение,ПутьПоУмолчанию", ФинальноеОповещение, ПутьПоУмолчанию);
	
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ТекстСообщения = НСтр("ru = 'Для выбора каталога установите расширение для веб-клиента 1С:Предприятие.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыборКаталогаЗавершениеКонтроляРасширенияРаботыСФайлами",
		ПрайсЛистыКонтрагентовКлиент,
		ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Ложь);
	
КонецПроцедуры // ВыборКаталога()

&НаСервереБезКонтекста
Функция ПредставлениеСтатусаЗагрузки(СтатусЗагрузки)
	
	ЦветТекста         = ЦветаСтиля.ЦветНейтральногоТекстаВиджета;
	ЦветПредупреждения = ЦветаСтиля.ЦветОтрицательногоТекстаВиджета;
	ЦветОдобрения      = ЦветаСтиля.ЦветПоложительногоТекстаВиджета;
	
	ЭлементыСтроки = Новый Массив;
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока("Загрузка: ", Новый Шрифт(, 10), ЦветТекста));
	
	Если ЗначениеЗаполнено(СтатусЗагрузки) Тогда
		ПредставлениеСтатуса = Строка(СтатусЗагрузки);
	Иначе
		ПредставлениеСтатуса = Строка(Перечисления.СтатусыЗагрузкиПрайсЛистов.Разрешена);
	КонецЕсли;
	
	// доступные действия
	Если СтатусЗагрузки = Перечисления.СтатусыЗагрузкиПрайсЛистов.Запрещена Тогда
		ПредставлениеДействия = НСтр("ru='Установить ""Загрузка разрешена""'");
		Цвет = ЦветПредупреждения;
	ИначеЕсли СтатусЗагрузки = Перечисления.СтатусыЗагрузкиПрайсЛистов.Ожидает Тогда
		ПредставлениеДействия = НСтр("ru='Отменить загрузку'");
		Цвет = ЦветТекста;
	ИначеЕсли СтатусЗагрузки = Перечисления.СтатусыЗагрузкиПрайсЛистов.Загружается Тогда
		ПредставлениеДействия = НСтр("ru='Прервать загрузку'");
		Цвет = ЦветТекста;
	ИначеЕсли СтатусЗагрузки = Перечисления.СтатусыЗагрузкиПрайсЛистов.Завершена Тогда
		ПредставлениеДействия = НСтр("ru='Установить ""Запрет загрузки""'");
		Цвет = ЦветОдобрения;
	Иначе
		ПредставлениеДействия = НСтр("ru='Установить ""Запрет загрузки""'");
		Цвет = ЦветТекста;
	КонецЕсли;
	
	ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеСтатуса , Новый Шрифт(, 10, Истина), Цвет));
	
	Результат = Новый Структура;
	Результат.Вставить("Статус"   , Новый ФорматированнаяСтрока(ЭлементыСтроки));
	Результат.Вставить("Действие" , Новый ФорматированнаяСтрока(ПредставлениеДействия, Новый Шрифт(, 10), ЦветТекста));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьДеревоПодразделений()
	
	ОбъектДерева = РеквизитФормыВЗначение("ПодразделенияКомпании", Тип("ОбработкаОбъект.ПодразделенияКомпанииПрайсЛистовКонтрагентов"));
	
	ОбъектДерева.Инициализировать(Объект.ОтветственноеПодразделение, Объект.Ссылка);
	
	ЗначениеВРеквизитФормы(ОбъектДерева, "ПодразделенияКомпании");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоПодразделений()
	
	Для Каждого ЭлементДерева Из ПодразделенияКомпании.ДеревоПодразделений.ПолучитьЭлементы() Цикл
		Элементы.ПодразделенияКомпанииДеревоПодразделений.Развернуть(
			ЭлементДерева.ПолучитьИдентификатор(),
			Истина
		);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтветственноеПодразделениеНаСервере(ПодразделениеКомпании)
	
	Объект.ОтветственноеПодразделение = ПодразделениеКомпании;
	
	ОбъектДерева = РеквизитФормыВЗначение("ПодразделенияКомпании", Тип("ОбработкаОбъект.ПодразделенияКомпанииПрайсЛистовКонтрагентов"));
	
	ОбъектДерева.УстановитьОтветственноеПодразделение(Объект.ОтветственноеПодразделение);
	
	ЗначениеВРеквизитФормы(ОбъектДерева, "ПодразделенияКомпании");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКомандыУправленияСпискомПодразделений()
	
	Если Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПодразделенияКомпанииДеревоПодразделений.ТекущиеДанные;
	
	Элементы.ПодразделенияКомпанииДеревоПодразделенийКонтекстноеМенюУстановитьОтветственноеПодразделение.Доступность =
		НЕ ТекущиеДанные.ЭтоОсновноеПодразделение;
	
	Элементы.ПодразделенияКомпанииДеревоПодразделенийКонтекстноеМенюЗапретитьПросмотрПрайсЛистаПодразделению.Доступность =
		(НЕ ТекущиеДанные.ЭтоОсновноеПодразделение И ТекущиеДанные.ЕстьДоступ);
	
	Элементы.ПодразделенияКомпанииДеревоПодразделенийКонтекстноеМенюИзменитьУровеньДоступностиОграниченияПрямыеЗаказы.Доступность =
		(НЕ ТекущиеДанные.ЭтоОсновноеПодразделение И ТекущиеДанные.УровеньДоступности <> ПредопределенноеЗначение("Перечисление.УровниДоступностиПрайсЛистовКонтрагентов.ПрямыеЗаказы"));
	
	Элементы.ПодразделенияКомпанииДеревоПодразделенийКонтекстноеМенюИзменитьУровеньДоступностиОграниченияПросмотр.Доступность =
		(НЕ ТекущиеДанные.ЭтоОсновноеПодразделение И ТекущиеДанные.УровеньДоступности <> ПредопределенноеЗначение("Перечисление.УровниДоступностиПрайсЛистовКонтрагентов.Просмотр"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДляПодчиненныхВДереве(Строки, УровеньДоступности, ЕстьДоступ, ПредставлениеДоступа, Картинка = -1)
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.ЭтоОсновноеПодразделение Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.УровеньДоступности   = УровеньДоступности;
		Строка.ЕстьДоступ           = ЕстьДоступ;
		Строка.ПредставлениеДоступа = ПредставлениеДоступа;
		Строка.Картинка             = Картинка;
		
		УстановитьДляПодчиненныхВДереве(Строка.ПолучитьЭлементы(), УровеньДоступности, ЕстьДоступ, ПредставлениеДоступа, Картинка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НастройкаЗагрузкиСоответствуетСтруктуреПрайсЛиста()
	
	Настройки = Объект.НастройкаЗагрузкиНоменклатуры.НастройкиЗагрузкиВыгрузки.Получить();
	
	// Получим структуру и сопоставим с загруженной настройкой прайс-листа
	Попытка
		ВерсияОбработки = СокрЛП(Настройки.Область("R1C5").Текст);
		
		СтруктураФлагов = ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ПолучитьПараметрыПоВерсииОбработкиДляСправочникаНастроек(ВерсияОбработки, Настройки);
		ТекущаяСтрока = СтруктураФлагов.ТекущаяСтрока;
		
		// Структура реквизитов табличной части
		СтруктураУмолчаний = Новый Структура;	

		ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧН=0; ЧГ=0");
		ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
		Пока НЕ ПустаяСтрока(ИмяРеквизита) Цикл
			СтруктураУмолчанияРеквизита = Новый Структура;
			СтруктураУмолчанияРеквизита.Вставить("ИмяРеквизита",ИмяРеквизита);
			СтруктураУмолчанияРеквизита.Вставить("Пометка",НЕ ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C1").Текст));
			СтруктураУмолчанияРеквизита.Вставить("НомерКолонки", Настройки.Область(ТекущаяСтрокаОбласти + "C6").Текст);
		
			// Добавим в структуру реквизитов структуру реквизита
			СтруктураУмолчаний.Вставить(ИмяРеквизита,СтруктураУмолчанияРеквизита);
			
			ТекущаяСтрока = ТекущаяСтрока + 1;
			ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧН=0; ЧГ=0");
			ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
		КонецЦикла;
		
		ПустаяСтруктураФайла = Истина;
		
		Для Каждого ТекущаяСтрока Из Объект.СтруктураФайлаПрайсЛиста Цикл
			
			Если ПустаяСтрока(ТекущаяСтрока.ИмяПоляФайла) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураНастройки = ПолучитьЗначениеПараметраСтруктуры(СтруктураУмолчаний, ТекущаяСтрока.ИмяРеквизитаПрайсЛиста);
			
			Если СтруктураНастройки = Неопределено ИЛИ НЕ СтруктураНастройки.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ПустаяСтруктураФайла = Ложь;
			
			НайденныеЗаголовки = Объект.ЗаголовкиКолонокВПрайсЛисте.НайтиСтроки(Новый Структура("ИмяКолонки", ТекущаяСтрока.ИмяПоляФайла));
			
			Если НайденныеЗаголовки.Количество() > 0 Тогда
				НайденныйЗаголовок = НайденныеЗаголовки[0];
				
				Если НЕ Число(СтруктураНастройки.НомерКолонки) = НайденныйЗаголовок.НомерСтроки Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ПустаяСтруктураФайла Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // НастройкаЗагрузкиСоответствуетСтруктуреПрайсЛиста()

&НаКлиенте
Процедура ПроверитьСоответствиеНастройкиЗагрузки()
	
	Если Объект.НастройкаЗагрузкиНоменклатуры.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ НастройкаЗагрузкиСоответствуетСтруктуреПрайсЛиста() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Настройка загрузки номенклатуры не соответствует структуре файла. Возможна некорректная загрузка.'"));
	КонецЕсли;
	
КонецПроцедуры

// Формирует список выбора для Наименования.
//
// Параметры:
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
// 
&НаСервере
Процедура СформироватьНаименованиеПоУмолчанию(ПараметрыДействия=Неопределено)
	
	УправлениеДиалогомСервер.СформироватьЗначениеПоУмолчанию(ЭтотОбъект, Объект, ПараметрыДействия);
	
КонецПроцедуры // СформироватьНаименованиеПоУмолчанию()

// Вынос логина и пароля из строки подключения в отдельные реквизиты 
&НаСервере
Процедура ЗашифроватьСтрокуПодключения()
	
	
	Если ПустаяСтрока(Объект.СтрокаПодключения) Тогда
		
		Объект.ЛогинИсточникаДанных = "";
		Объект.ПарольИсточникаДанных = ""; 
		
		Возврат;
		
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.СтрокаПодключения, ";");
	НовыйМассивПодстрок = Новый Массив;
	
	Для Каждого СтрокаМассива Из МассивПодстрок Цикл 
		
		Если СтрНайти(СтрокаМассива, "User ID=*****") Тогда
			СтрокаМассива = Объект.ЛогинИсточникаДанных;
		ИначеЕсли СтрНайти(СтрокаМассива, "Password=*****") Тогда
			СтрокаМассива = Объект.ПарольИсточникаДанных;
		ИначеЕсли СтрНайти(СтрокаМассива, "User ID") Тогда
			Объект.ЛогинИсточникаДанных = СтрокаМассива;
			СтрокаМассива = "User ID=*****";
		ИначеЕсли СтрНайти(СтрокаМассива, "Password") Тогда
			Объект.ПарольИсточникаДанных = СтрокаМассива;
			СтрокаМассива = "Password=*****";
		КонецЕсли;
		
		НовыйМассивПодстрок.Добавить(СтрокаМассива);
		
	КонецЦикла;
	
	Объект.СтрокаПодключения = сфпСтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(НовыйМассивПодстрок, ";" );
	
КонецПроцедуры

// Объединение строки подключения с вынесеным логином и паролем для подключения
&НаСервере
Функция ПолучитьРасшифрованнуюСтрокуПодключения()
	
	Если ПустаяСтрока(Объект.СтрокаПодключения) Тогда
		Возврат Объект.СтрокаПодключения;
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.СтрокаПодключения, ";");
	НовыйМассивПодстрок = Новый Массив;
	
	Для Каждого СтрокаМассива Из МассивПодстрок Цикл 
		
		Если СтрНайти(СтрокаМассива, "User ID") Тогда
			СтрокаМассива = Объект.ЛогинИсточникаДанных;
		КонецЕсли;
		
		Если СтрНайти(СтрокаМассива, "Password") Тогда
			СтрокаМассива = Объект.ПарольИсточникаДанных
		КонецЕсли;
		
		НовыйМассивПодстрок.Добавить(СтрокаМассива);
		
	КонецЦикла;
	
	СтрокаДляПодключения = сфпСтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(НовыйМассивПодстрок, ";" );
	
	Возврат СтрокаДляПодключения;
	
КонецФункции

#Область ПодключаемыеОбработчики

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

#КонецОбласти

#Область АвтообновлениеФайлы

&НаКлиенте
Функция ФильтрыДляФайловПрайсЛистов()
	
	Фильтры = Новый Массив();
	Фильтры.Добавить("Доступные файлы (*.xls,*.xlsx,*.xlsm,*.ods,*.ots,*.txt,.*csv)");
	Фильтры.Добавить("*.xls;*.xlsx;*.xlsm;*.ods;*.ots;*.txt;*.csv");
	Фильтры.Добавить("MS Excel (*.xls,*.xlsx,*.xlsm)");
	Фильтры.Добавить("*.xls;*.xlsx;*.xlsm");
	Фильтры.Добавить("OpenOffice.org.Calc (*.ods, *.ots)");
	Фильтры.Добавить("*.ods;*.ots");
	Фильтры.Добавить("Текстовый файл (*.txt,.*csv)");
	Фильтры.Добавить("*.txt;*.csv");
	Возврат СтрСоединить(Фильтры, "|");
	
КонецФункции

&НаКлиенте
Функция ФильтрыДляАрхивовПрайсЛистов()
	
	Возврат "Доступные файлы (*.rar,*.zip,*.arj,*.cab,*.7z,*.tar,*.gz)|*.rar;*.zip;*.arj;*.cab;*.7z;*.tar;*.gz";
	
КонецФункции

&НаКлиенте
Процедура МаскаПомещениеФайлаНаСерверПередНачалом(ПомещаемыйФайл, Отказ, ЭтоВыборДляАрхива) Экспорт
	
	Если ПомещаемыйФайл = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоВыборДляАрхива Тогда
		
		Объект.МаскаАрхива      = ПомещаемыйФайл.Файл.ИмяБезРасширения;
		Объект.РасширениеАрхива = Прав(ПомещаемыйФайл.Файл.Расширение, СтрДлина(ПомещаемыйФайл.Файл.Расширение) - 1);
		
	Иначе
		
		Объект.МаскаФайла      = ПомещаемыйФайл.Файл.ИмяБезРасширения;
		Объект.РасширениеФайла = Прав(ПомещаемыйФайл.Файл.Расширение, СтрДлина(ПомещаемыйФайл.Файл.Расширение) - 1);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещения

// Обработка выбора шаблона прайс-листа
//
&НаКлиенте
Процедура ВыборФайлаШаблонаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.СтрокаПодключения = Результат.ПолноеИмя;
		СтрокаПодключенияПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора каталога прайс-листа
//
&НаКлиенте
Процедура ВыборКаталогаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.КаталогАвтообновления = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляЗагрузки(ОписаниеФайла, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФайлЗагрузки = Новый Файл(ОписаниеФайла.Имя);
	
	Если НЕ ЗагрузитьПрайсЛистИзФайлаОтложено(ОписаниеФайла.Хранение, ОписаниеФайла.Имя, ФайлЗагрузки.Расширение) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьПрайсЛистИзФайлаПроверитьВыполнение", 0.5, Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеФормыДлительнойОперации", ЭтотОбъект);
		ОткрытьФорму("Справочник.ПрайсЛистыКонтрагентов.Форма.ОжиданиеЗагрузкиПрайсЛиста",
		Новый Структура("ИдентификаторЗадания", ИдентификаторДлительнойОперации),
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Ответ = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если ТипЗнч(Ответ) = Тип("Структура") И Ответ.Ошибка Тогда
			ПоказатьПредупреждение(, Ответ.Сообщение);
		Иначе
			ОткрытьПрайсЛист();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПрайсЛистПомещениеФайловЗаверщение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		ВыборФайлаДляЗагрузки(ПомещенныеФайлы[0], Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтруктуруДанныхПомещениеФайловЗаверщение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		Расширение = ПрайсЛистыКонтрагентовКлиентСервер.ПолучитьРасширение(ПомещенныеФайлы[0].Имя);
	
		Если НЕ ЗаполнитьСтруктуруДанныхИзФайлаОтложено(ПомещенныеФайлы[0].Хранение, Расширение) Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСтруктуруДанныхИзФайлаПроверитьВыполнение", 0.5, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияСоСтраницейОбразцаДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "ОтключитьОстальныеЛисты" Тогда
		Для Каждого Лист Из Объект.СтруктураСтраницПрайсЛиста Цикл
			Если Лист.ПолучитьИдентификатор() = ДополнительныеПараметры.ПолучитьИдентификатор() Тогда
				Лист.Использовать = Истина;
				Продолжить;
			КонецЕсли;
			
			Лист.Использовать = Ложь;
		КонецЦикла;
		
		Объект.ИмяТаблицы = ИмяТекущейСтраницы;
	ИначеЕсли Результат.Значение = "ИнвертироватьИспользованиеЛиста" Тогда
		ДополнительныеПараметры.Использовать = НЕ ДополнительныеПараметры.Использовать;
	КонецЕсли;
	
	ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы, НЕ Объект.ФайлИсточникДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияСоСтрокойОбразцаДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Число") Тогда
		НомерСтроки = Результат;
		Результат   = Новый Структура("Значение", ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Действие", ""));
	Иначе
		НомерСтроки = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НомерСтроки", 1);
	КонецЕсли;
	Лист = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Лист"       , Неопределено);
	
	Обновить = Ложь;
	
	Если Лист = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрНачинаетсяС(Результат.Значение, "Заголовок") Тогда
		Лист.СтрокаЗаголовковКолонок = НомерСтроки;
		Если Лист.СтрокаНачало <= НомерСтроки Тогда
			Лист.СтрокаНачало = НомерСтроки + 1;
		КонецЕсли;
		Если Лист.СтрокаКонец > 0 И Лист.СтрокаКонец < Лист.СтрокаНачало Тогда
			Лист.СтрокаКонец = Лист.СтрокаНачало;
		КонецЕсли;
		
		Обновить = Истина;
	ИначеЕсли СтрНачинаетсяС(Результат.Значение, "НачалоДанных") Тогда
		Если НомерСтроки <= Лист.СтрокаЗаголовковКолонок Тогда
			НомерСтроки = Лист.СтрокаЗаголовковКолонок + 1;
		КонецЕсли;
		Лист.СтрокаНачало = НомерСтроки;
		Если Лист.СтрокаКонец > 0 И Лист.СтрокаКонец < Лист.СтрокаНачало Тогда
			Лист.СтрокаКонец = Лист.СтрокаНачало;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(Результат.Значение, "КонецДанных") Тогда
		Если НомерСтроки > 0 И НомерСтроки < Лист.СтрокаНачало Тогда
			НомерСтроки = Лист.СтрокаНачало;
		КонецЕсли;
		Лист.СтрокаКонец = НомерСтроки;
	КонецЕсли;
	
	ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы, Обновить);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияСКолонкойОбразцаДанныхЗавершение(Результат, Значение) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Представление <> "Добавить новое поле наименование" Тогда
		Результат.Значение.ИмяПоляФайла = ?(НЕ Результат.Пометка, Значение, "");
	Иначе
		НоваяСтрока = Объект.СтруктураФайлаПрайсЛиста.
			Вставить(Объект.СтруктураФайлаПрайсЛиста.Индекс(Результат.Значение)+1);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат.Значение,, "Действие,ИмяПоляФайла");
		НоваяСтрока.ИмяПоляФайла = Значение;
		НоваяСтрока.Действие     = "Удалить";
	КонецЕсли;
	
	УстановитьВыделеннуюКолонку();
	
	// обновим табличный документ
	ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСтрокиЗавершение(РезультатВвода, ДополнительныеПараметры) Экспорт
	
	Если РезультатВвода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СтруктураФайлаПрайсЛиста.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЗначениеПоУмолчанию = РезультатВвода;
	
	Если ТекущиеДанные.ИмяРеквизитаПрайсЛиста = "Количество" Тогда
		Объект.КоличествоПоУмолчанию = РезультатВвода;
		ЗагружатьБезКоличества = ТипЗнч(РезультатВвода) = Тип("Булево") И РезультатВвода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиОбъектаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Попытка
			Записать();
			ЗаполнитьПредставлениеРеквизитовСтруктурыПрайсЛиста();
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Истина);
		Исключение 
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Ошибка при записи элемента'"),
       				"Ошибка",
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, Истина);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗакрытиеФормыДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ЗагрузитьПрайсЛистИзФайлаПроверитьВыполнение");
		ИзменитьСостояниеЗагрузки();
		ПрайсЛистыКонтрагентовВызовСервера.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСрокаПоставкиЗаверщение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.СтруктураФайлаПрайсЛиста.НайтиПоИдентификатору(ДополнительныеПараметры);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ЗначениеПоУмолчанию = ПолучитьЗначениеПараметраСтруктуры(Результат, "СрокПоставкиПредставление", "");
	Объект.СрокПоставкиМинимальный    = 
		ПолучитьЗначениеПараметраСтруктуры(Результат, "СрокПоставкиМинимальный", Неопределено);
	Объект.СрокПоставкиМаксимальный   =
		ПолучитьЗначениеПараметраСтруктуры(Результат, "СрокПоставкиМаксимальный", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтатусаЗагрузкиЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗагрузки(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПрайсЛист(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Если Объект.ФайлИсточникДанных Тогда
		НайденныйФайл = ПрайсЛистыКонтрагентовВызовСервера.ПолучитьФайлВОжидании(Объект.Ссылка);
		Если НЕ ПустаяСтрока(НайденныйФайл) Тогда
			ОбработчикОповещенияОЗакрытии =
			Новый ОписаниеОповещения(
			"ЗагрузитьПрайсЛистПомещениеФайловЗаверщение",
			ЭтотОбъект
			);
			
			НачатьПомещениеФайлов(ОбработчикОповещенияОЗакрытии,, НайденныйФайл, Ложь, УникальныйИдентификатор);
		Иначе
			ВыборФайла(Новый ОписаниеОповещения("ВыборФайлаДляЗагрузки", ЭтотОбъект), Объект.СтрокаПодключения, Истина);
		КонецЕсли;
	Иначе
		Если НЕ ЗагрузитьПрайсЛистИзADOОтложено() Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьПрайсЛистИзФайлаПроверитьВыполнение", 0.5, Истина);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеФормыДлительнойОперации", ЭтотОбъект);
			ОткрытьФорму("Справочник.ПрайсЛистыКонтрагентов.Форма.ОжиданиеЗагрузкиПрайсЛиста",
				Новый Структура("ИдентификаторЗадания", ИдентификаторДлительнойОперации),
				ЭтотОбъект,
				УникальныйИдентификатор,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			Ответ = ПолучитьИзВременногоХранилища(АдресХранилища);
			Если ТипЗнч(Ответ) = Тип("Структура") И Ответ.Ошибка Тогда
				ПоказатьПредупреждение(, Ответ.Сообщение);
			Иначе
				ОткрытьПрайсЛист();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкачатьНовыеФайлыПрайсЛиста(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ Автозагрузка Тогда
		ПоказатьПредупреждение(, "Данный прайс-лист не предназначен для загрузки файлов из интернета.");
		Возврат;
	КонецЕсли;
	
	Если Объект.Транспорт.Пустая() Тогда
		ПоказатьПредупреждение(, "Для скачавания необходимо указать транспорт");
		Возврат;
	КонецЕсли;
	
	Если НЕ СкачатьНовыеФайлыПрайсЛистаОтложено() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СкачатьНовыеФайлыПрайсЛистаПроверитьВыполнение", 0.5, Истина);
	Иначе
		Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если Результат = "ОК" Тогда
			ПоказатьПредупреждение(, "Файл успешно обновлен");
		ИначеЕсли Результат = "BAD" Тогда
			ПоказатьПредупреждение(, "Новых файлов не обнаружено.");
		Иначе
			ПоказатьПредупреждение(, "При обновлении возникли ошибки. Подробнее в журнале регистрации.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументНазначенияСкидокНаценок(Результат, ЭтоНаценка) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	
	Если ЭтоНаценка Тогда
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.УстановкаНаценокПрайсЛиста");
	Иначе
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.УстановкаСкидокПрайсЛиста");
	КонецЕсли;
	ДанныеЗаполнения.Вставить("ХозОперация" , ХозОперация);
	ДанныеЗаполнения.Вставить("ПрайсЛист"   , Объект.Ссылка);
	ДанныеЗаполнения.Вставить("Процент"     , 0);
	
	ПараметрыОткрытия = Новый Структура("Основание", ДанныеЗаполнения);
	ОткрытьФорму("Документ.НазначениеСкидокНаценокПоПрайсЛисту.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОДействииСКлючамиЗаписи(Ответ, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПропуститьПроверкуИзмененияКлючевыхПолей", Истина);
	
	Если Ответ = "Изменить" Тогда
		Условие = Новый Структура("Ключевое", Истина);
		КлючевыеПоля = Новый Массив;
		
		Для Каждого Строка Из Объект.СтруктураФайлаПрайсЛиста Цикл
			Если НЕ Строка.Ключевое Тогда
				Продолжить;
			КонецЕсли;
			
			КлючевыеПоля.Добавить(Новый Структура("ИмяРеквизитаПрайсЛиста,ИмяПоляФайла"));
			ЗаполнитьЗначенияСвойств(КлючевыеПоля[КлючевыеПоля.ВГраница()], Строка);
		КонецЦикла;
		
		Если НЕ ПрайсЛистыКонтрагентовВызовСервера.ИзменитьКлючПравилЗагрузки(Объект.Ссылка, КлючевыеПоля) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ = "Удалить" Тогда
		Если НЕ ПрайсЛистыКонтрагентовВызовСервера.ОчиститьПравилаПоУлючуДляПрайсЛиста(Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбУстановкеОтветственногоПодразделенияЗавершение(Ответ, ПодразделениеКомпании) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьОтветственноеПодразделениеНаСервере(ПодразделениеКомпании);
		
		РазвернутьДеревоПодразделений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборНастройкиЗагрузкиНоменклатуры(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настроим параметры выбора реквизита "НастройкаЗагрузкиНоменклатуры"
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ПараметрОтборПоВариантуИспользования", ПредопределенноеЗначение("Перечисление.ВариантыИспользованияНастройки.ЗагрузкаДанных"));
	ПараметрыФормы.Вставить("ПараметрОтборПоТипуПрикладногоОбъекта", ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Справочник"));
	ПараметрыФормы.Вставить("ПараметрОтборПоМетаданным", "Справочник.Номенклатура");
	ПараметрыФормы.Вставить("ДополнительныеПараметры", Новый Структура("ПрайсЛист", Объект.Ссылка));
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ФормаВыбора", ПараметрыФормы, Элементы.НастройкаЗагрузкиНоменклатуры,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьВыборНастройкиЗагрузкиНоменклатуры()

&НаКлиенте
Процедура СоздатьНастройкуЗагрузкиНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДополнительныеПараметры", Новый Структура("ПрайсЛист", Объект.Ссылка));
	
	ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ФормаОбъекта", ПараметрыФормы, Элементы.НастройкаЗагрузкиНоменклатуры,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СоздатьНастройкуЗагрузкиНоменклатуры()

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.ВидПрайсЛиста.Доступность    = (Объект.ВидПрайсЛиста <> Перечисления.ВидыПрайсЛистов.ВебПрайсЛист);
	Элементы.БазовыйПрайсЛист.Доступность = (Объект.ВидПрайсЛиста = Перечисления.ВидыПрайсЛистов.ОстаткиДляКаталогаПредложений);
	
	УстановитьДоступностьРазделителя();
	Элементы.ХранитьДанныеЛокально.Доступность = НЕ Объект.ФайлИсточникДанных;
	
	ВидимотьКолонкиПравилЗагрузки = 
		(НазначениеПравилЗагрузкиФильтр <> Перечисления.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте);
	
	Элементы.ПравилаЗагрузкиДатаЗаписи.Видимость             = ВидимотьКолонкиПравилЗагрузки;
	Элементы.ПравилаЗагрузкиКодПредложения.Видимость         = ВидимотьКолонкиПравилЗагрузки;
	Элементы.ПравилаЗагрузкиИмяРеквизитаПрайсЛиста.Видимость = ВидимотьКолонкиПравилЗагрузки;
	Элементы.ПравилаЗагрузкиПорядокПрименения.Видимость      = ВидимотьКолонкиПравилЗагрузки;
	
	Элементы.ПравилаЗагрузкиОригинальноеЗначение.Заголовок =
		?(ВидимотьКолонкиПравилЗагрузки, "Оригинальное значение", "Производитель в прайс-листе");
	
	Элементы.ПравилаЗагрузкиЗначение.Заголовок =
		?(ВидимотьКолонкиПравилЗагрузки, "Загружаемое значение", "Производитель");
		
	Элементы.Автозагрузка.Доступность = Объект.ФайлИсточникДанных;
	
	Элементы.ТомХранения.Видимость           = ИспользоватьТомаХраненияФайлов;
	Элементы.КаталогАвтообновления.Видимость = НЕ ИспользоватьТомаХраненияФайлов;
	
	Элементы.ТомХранения.Доступность           = (Автообновление ИЛИ Автозагрузка) И Объект.ФайлИсточникДанных;
	Элементы.КаталогАвтообновления.Доступность = (Автообновление ИЛИ Автозагрузка) И Объект.ФайлИсточникДанных;
	Элементы.МаскаФайла.Доступность            = (Автообновление ИЛИ Автозагрузка) И Объект.ФайлИсточникДанных;
	
	Элементы.ТомХранения.АвтоОтметкаНезаполненного           = (Автообновление ИЛИ Автозагрузка) И ИспользоватьТомаХраненияФайлов;
	Элементы.КаталогАвтообновления.АвтоОтметкаНезаполненного = (Автообновление ИЛИ Автозагрузка) И НЕ ИспользоватьТомаХраненияФайлов;
	Элементы.МаскаФайла.АвтоОтметкаНезаполненного            = (Автообновление ИЛИ Автозагрузка);
	
	Элементы.ПрайсЛистВАрхиве.Доступность      = (Автообновление ИЛИ Автозагрузка) И Объект.ФайлИсточникДанных;
	Элементы.ДействиеПослеЗагрузки.Доступность = Автообновление И Объект.ФайлИсточникДанных;
	
	Элементы.ГруппаОбновлять.Доступность = Автообновление;
	Для Каждого Элемент Из Элементы.ГруппаОбновлять.ПодчиненныеЭлементы Цикл
		Элемент.Доступность = Автообновление;
	КонецЦикла;
	
	ФильтрыПочтыВидны = ((Объект.Транспорт.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.IMAP) ИЛИ
		(Объект.Транспорт.ВидТранспорта = Перечисления.ВидыТранспортаПрайсЛистовКонтрагентов.POP3));
	
	Элементы.Транспорт.Доступность              = Автозагрузка И Объект.ФайлИсточникДанных;
	Элементы.ФильтрАдресОтправителя.Доступность = Автозагрузка И Объект.ФайлИсточникДанных И ФильтрыПочтыВидны;
	Элементы.ФильтрТемаПисьма.Доступность       = Автозагрузка И Объект.ФайлИсточникДанных И ФильтрыПочтыВидны;
	Элементы.ФильтрТекстПисьма.Доступность      = Автозагрузка И Объект.ФайлИсточникДанных И ФильтрыПочтыВидны;
	
	Элементы.МаскаАрхива.Доступность      = Объект.ПрайсЛистВАрхиве И (Автообновление ИЛИ Автозагрузка);
	Элементы.РасширениеАрхива.Доступность = Объект.ПрайсЛистВАрхиве И (Автообновление ИЛИ Автозагрузка);
	
	Элементы.ИнтервалПроверкиНачало.Доступность = (ПериодичностьПроверкиНовыхДанных = 1);
	Элементы.ИнтервалПроверкиКонец.Доступность  = (ПериодичностьПроверкиНовыхДанных = 1);
	
	Элементы.ИмяРеквизитаФильтр.Доступность =
		((НазначениеПравилЗагрузкиФильтр <> Перечисления.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте) И
		НЕ НазначениеПравилЗагрузкиФильтр.Пустая());
	
	ОписаниеСтатуса = ПредставлениеСтатусаЗагрузки(СтатусЗагрузки);
	Элементы.ДекорацияСтатусЗагрузки.Заголовок = ОписаниеСтатуса.Статус;
	Элементы.ДекорацияДействие.Заголовок       = ОписаниеСтатуса.Действие;
	Элементы.ДекорацияДействие.Доступность = ПравоДоступа("Изменение", Метаданные.Справочники.ПрайсЛистыКонтрагентов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтавкаНДС",
		"ТолькоПросмотр",
		Объект.ЦенаВключаетНДС
	);
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	// Установка шрифта ключевых полей	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураФайлаПрайсЛистаРеквизитВБазе.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлаПрайсЛиста.Ключевое");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,, 10, Истина));
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураФайлаПрайсЛистаИмяПоляФайла.Имя);
	                               
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлаПрайсЛиста.Ключевое");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,, 10, Истина));
	
	// Запрет редактировния значения по умолчанию
	// Условие1 ++
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураФайлаПрайсЛистаЗначениеПоУмолчанию.Имя);
		
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлаПрайсЛиста.ИмяРеквизитаПрайсЛиста");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "Производитель";
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлаПрайсЛиста.ИмяПоляФайла");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	// Условие1 --
	
	// Условие2 ++
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураФайлаПрайсЛистаЗначениеПоУмолчанию.Имя);
		
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлаПрайсЛиста.ИмяРеквизитаПрайсЛиста");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "Валюта";
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлаПрайсЛиста.ИмяПоляФайла");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	// Условие2 --
	
	// Указываем на не заполненные ключевые поля
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураФайлаПрайсЛистаИмяПоляФайла.Имя);
		
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлаПрайсЛиста.Ключевое");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
		
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлаПрайсЛиста.ИмяПоляФайла");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не заполнено>'"));
	
	// Запрет редактировния значения по умолчанию
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураФайлаПрайсЛистаЗначениеПоУмолчанию.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлаПрайсЛиста.ДоступноРедактированиеЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",  Истина);
	
	// Выделение запрещенных подразделений
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодразделенияКомпанииДеревоПодразделенийПредставление.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделенияКомпании.ДеревоПодразделений.ЭтоОсновноеПодразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,, 10, Истина));
	
	// Пустые значения скидок (Позиции)
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СкидкиПрайсЛистаТегПозиции.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкидкиПрайсЛиста.ТегПозиции");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗавершенныйБизнесПроцесс);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Любой>'"));

	// Пустые значения скидок (Производитель)
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СкидкиПрайсЛистаПроизводитель.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкидкиПрайсЛиста.Производитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗавершенныйБизнесПроцесс);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Любой>'"));
	
	// Пустые значения наценок(Позиции) НаценкиПрайсЛистаТегПозиции
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НаценкиПрайсЛистаТегПозиции.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаценкиПрайсЛиста.ТегПозиции");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗавершенныйБизнесПроцесс);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Любой>'"));
	
	// Пустые значения наценок(Производитель) 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НаценкиПрайсЛистаПроизводитель.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаценкиПрайсЛиста.Производитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗавершенныйБизнесПроцесс);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Любой>'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРазделителя()
	
	ЭтоTXT = СтрЗаканчиваетсяНа(НРег(Объект.СтрокаПодключения), ".txt");
	ЭтоCSV = СтрЗаканчиваетсяНа(НРег(Объект.СтрокаПодключения), ".csv");
	
	Элементы.Разделитель.Доступность          = (ЭтоTXT ИЛИ ЭтоCSV);
	Элементы.Разделитель.КнопкаСпискаВыбора   = ЭтоCSV;
	Элементы.Разделитель.РедактированиеТекста = ЭтоTXT;
	
	Если НЕ ЗначениеЗаполнено(Объект.Разделитель) Тогда
		Объект.Разделитель = ";";
	КонецЕсли;
	
КонецПроцедуры //УстановитьДоступностьРазделителя()

&НаСервере
Процедура ЗаполнитьПредставлениеРеквизитовСтруктурыПрайсЛиста()
	МатаданныеПрайса = ПрайсЛистыКонтрагентов.МетеданныеРегистраПрайсЛистыКонтрагентов();
	
	Для Каждого Реквизит Из Объект.СтруктураФайлаПрайсЛиста Цикл
		ПредставлениеРеквизита = Строка(Реквизит.ИмяРеквизитаПрайсЛиста);
		
		Если МатаданныеПрайса.Реквизиты.Найти(Реквизит.ИмяРеквизитаПрайсЛиста) <> Неопределено Тогда
			ПредставлениеРеквизита = МатаданныеПрайса.Реквизиты.Найти(Реквизит.ИмяРеквизитаПрайсЛиста).Синоним;
		ИначеЕсли МатаданныеПрайса.Измерения.Найти(Реквизит.ИмяРеквизитаПрайсЛиста) <> Неопределено Тогда
			ПредставлениеРеквизита = МатаданныеПрайса.Измерения.Найти(Реквизит.ИмяРеквизитаПрайсЛиста).Синоним;
		ИначеЕсли МатаданныеПрайса.Ресурсы.Найти(Реквизит.ИмяРеквизитаПрайсЛиста) <> Неопределено Тогда
			ПредставлениеРеквизита = МатаданныеПрайса.Ресурсы.Найти(Реквизит.ИмяРеквизитаПрайсЛиста).Синоним;
		КонецЕсли;
		
		ЗаполнитьДополнительныеРеквизитыСтруктрурыФайла(Реквизит.ИмяРеквизитаПрайсЛиста, Реквизит);
		Реквизит.ПредставлениеРеквизита = ПредставлениеРеквизита;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформлениеДляЗаголовков()
	
	// почистим старые элементы
	Удаляемые = Новый Массив;
	Для Каждого Элемент Из УсловноеОформление.Элементы Цикл
		Если СтрНайти(Элемент.Представление, УникальныйИдентификатор) > 0 Тогда
			Удаляемые.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Удаляемый Из Удаляемые Цикл
		УсловноеОформление.Элементы.Удалить(Удаляемый);
	КонецЦикла;
	
	// заполним новые значения
	Для Каждого ПолеПрайсЛиста Из Объект.ЗаголовкиКолонокВПрайсЛисте Цикл
		// добавление элемента
		НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
		НовыйЭлемент.Представление = СтрШаблон("Представление колонки <ИмяПоляФайла>(%1)", УникальныйИдентификатор);
		НовыйЭлемент.Использование = Истина;
		
		// добавление отбора
		ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СтруктураФайлаПрайсЛиста.ИмяПоляФайла");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ПолеПрайсЛиста.ИмяКолонки;
		ЭлементОтбора.Использование  = Истина;
		
		// Оформляемые поля
		ПолеДляОформления = НовыйЭлемент.Поля.Элементы.Добавить();
		ПолеДляОформления.Поле          = Новый ПолеКомпоновкиДанных("СтруктураФайлаПрайсЛистаИмяПоляФайла");
		ПолеДляОформления.Использование = Истина;
		
		// Оформление
		НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеПрайсЛиста.ПредставлениеКолонки);
		НовыйЭлемент.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодсказкуПереодичностиОбновления()
	
	Элементы.ДекорацияЧ2РасширеннаяПодсказка.Заголовок =
		Справочники.ПрайсЛистыКонтрагентов.СформироватьТекстДатыНачалаПроверкиОбновлений(
			Объект.Ссылка,
			ПериодичностьПроверкиНовыхДанных,
			ИнтервалПроверкиНачало,
			ИнтервалПроверкиКонец);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперацииНаСервере

&НаСервере
Функция ЗаполнитьСтруктуруДанныхИзФайлаОтложено(Знач ПутьКФайлу, Расширение)
	
	// сначала отменим старую операцию
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	
	// подготовим необходимые данные
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка"                     , Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("СтруктураСтраницПрайсЛиста" , Объект.СтруктураСтраницПрайсЛиста.Выгрузить());
	ПараметрыПроцедуры.Вставить("ПутьКФайлу"                 , ПрайсЛистыКонтрагентов.РаспаковатьФайл(ПутьКФайлу, Расширение));
	ПараметрыПроцедуры.Вставить("Расширение"                 , Расширение);
	ПараметрыПроцедуры.Вставить("Разделитель"                , Объект.Разделитель);
	ПараметрыПроцедуры.Вставить("КоличествоСтрок"            , КоличествоСтрокВОбразце);
	ПараметрыПроцедуры.Вставить("ИмяТаблицы"                 , Объект.ИмяТаблицы);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.ПрайсЛистыКонтрагентов.ЗаполнитьСтруктуруДанныхИзФайла",
		ПараметрыПроцедуры,
		"Заполнение образца из файла");
	
	АдресХранилища                  = Результат.АдресХранилища;
	ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнитьСтруктуруДанныхИзФайлаВыполнено();
	КонецЕсли;
	
	Возврат Результат.ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтруктуруДанныхИзADOОтложено()
	
	// сначала отменим старую операцию
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	
	// подготовим необходимые данные
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПрайсЛист"         , Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("СтрокаПодключения" , ПолучитьРасшифрованнуюСтрокуПодключения());
	ПараметрыПроцедуры.Вставить("КоличествоСтрок"   , КоличествоСтрокВОбразце);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.ПрайсЛистыКонтрагентов.ЗаполнитьСтруктуруДанныхИзADO",
		ПараметрыПроцедуры,
		"Заполнение образца из ADO");
	
	АдресХранилища                  = Результат.АдресХранилища;
	ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.ЗаданиеВыполнено = НЕ ЗначениеЗаполнено(ЗаполнитьСтруктуруДанныхИзФайлаВыполнено());
	КонецЕсли;
	
	Возврат Результат.ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтруктуруДанныхИзФайлаВыполнено()
	
	ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей, Истина);
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат Результат.Сообщение;
	ИначеЕсли ТипЗнч(Результат) = Тип("Соответствие") Тогда
		СтараяСтруктураСтраниц = Объект.СтруктураСтраницПрайсЛиста.Выгрузить();
		НоваяСтруктураСтраниц  = СтараяСтруктураСтраниц.СкопироватьКолонки();
		
		Если Результат <> Неопределено Тогда
			Для Каждого КлючЗначение Из Результат Цикл
				НоваяСтрока  = НоваяСтруктураСтраниц.Добавить();
				СтараяСтрока = СтараяСтруктураСтраниц.Найти(КлючЗначение.Ключ, "ИмяЛиста");
				Если СтараяСтрока = Неопределено Тогда
					НоваяСтрока.ИмяЛиста = КлючЗначение.Ключ;
					НоваяСтрока.СтрокаЗаголовковКолонок = 1;
					НоваяСтрока.СтрокаНачало = 2;
					НоваяСтрока.СтрокаКонец = 0;
				Иначе
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяСтрока,, "ДанныеОбразцаСтраницы");
				КонецЕсли;
				НоваяСтрока.ДанныеОбразцаСтраницы = КлючЗначение.Значение;
			КонецЦикла;
		КонецЕсли;
		
		Объект.СтруктураСтраницПрайсЛиста.Загрузить(НоваяСтруктураСтраниц);
		
		Если Объект.СтруктураСтраницПрайсЛиста.Количество() > 0 Тогда
			Если ПустаяСтрока(Объект.ИмяТаблицы) Тогда
				ИспользуемыеСтроки = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("Использовать", Истина));
				Если ИспользуемыеСтроки.Количество() > 0 Тогда
					Объект.ИмяТаблицы = ИспользуемыеСтроки[0].ИмяЛиста;
				Иначе
					Объект.ИмяТаблицы = Объект.СтруктураСтраницПрайсЛиста[0].ИмяЛиста;
					Объект.СтруктураСтраницПрайсЛиста[0].Использовать = Истина;
				КонецЕсли;
			Иначе
				СовпадаетСименемТаблицы = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", Объект.ИмяТаблицы));
				Если СовпадаетСименемТаблицы.Количество() > 0 Тогда
					СовпадаетСименемТаблицы[0].Использовать = Истина;
				Иначе
					Объект.ИмяТаблицы = Объект.СтруктураСтраницПрайсЛиста[0].ИмяЛиста;
					Объект.СтруктураСтраницПрайсЛиста[0].Использовать = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьТабличноеПолеОбразецДанных(, Истина);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗагрузитьПрайсЛистИзФайлаОтложено(Знач ПутьКФайлу, ИсходныйФайл, Расширение)
	
	// сначала отменим старую операцию
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	
	// подготовим данные
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка" , Объект.Ссылка);
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		ПараметрыПроцедуры.Вставить("ПутьКФайлу" , ПрайсЛистыКонтрагентов.РаспаковатьФайл(ПутьКФайлу, Расширение));
	Иначе
		ПараметрыПроцедуры.Вставить("ПутьКФайлу" , ПутьКФайлу);
	КонецЕсли;
	ПараметрыПроцедуры.Вставить("ИсходныйФайл" , ИсходныйФайл);
	ПараметрыПроцедуры.Вставить("Расширение"   , Расширение);
	ПараметрыПроцедуры.Вставить("Разделитель"  , Объект.Разделитель);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.ПрайсЛистыКонтрагентов.ЗагрузитьПрайсЛистИзФайла",
		ПараметрыПроцедуры,
		"[ЗагрузкаПрайсЛиста]");
	
	АдресХранилища                  = Результат.АдресХранилища;
	ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
	
	Возврат Результат.ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция ЗагрузитьПрайсЛистИзADOОтложено()
	
	// сначала отменим старую операцию
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	
	// подготовим необходимые данные
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПрайсЛист"         , Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("СтрокаПодключения" , ПолучитьРасшифрованнуюСтрокуПодключения());
	ПараметрыПроцедуры.Вставить("КоличествоСтрок"   , КоличествоСтрокВОбразце);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.ПрайсЛистыКонтрагентов.ЗагрузитьПрайсЛистИзADO",
		ПараметрыПроцедуры,
		"[ЗагрузкаПрайсЛиста]");
	
	АдресХранилища                  = Результат.АдресХранилища;
	ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
	
	Возврат Результат.ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция СкачатьНовыеФайлыПрайсЛистаОтложено()
	
	// сначала отменим старую операцию
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	
	// подготовим необходимые данные
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПрайсЛист", Объект.Ссылка);
	
	Результат =
		ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Справочники.ПрайсЛистыКонтрагентов.СкачатьФайлыПрайсЛиста",
			ПараметрыПроцедуры,
			"Скачивание файлов прайс-листов");
	
	АдресХранилища                  = Результат.АдресХранилища;
	ИдентификаторДлительнойОперации = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнитьСтруктуруДанныхИзФайлаВыполнено();
	КонецЕсли;
	
	Возврат Результат.ЗаданиеВыполнено;
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперацииНаКлиенте

&НаКлиенте
Процедура Подключаемый_ЗаполнитьСтруктуруДанныхИзФайлаПроверитьВыполнение()
	Перем Текст, Процент;
	
	Если ПрайсЛистыКонтрагентовВызовСервера.ЗаданиеВыполнено(ИдентификаторДлительнойОперации) Тогда
		Результат = ЗаполнитьСтруктуруДанныхИзФайлаВыполнено();
		Если ЗначениеЗаполнено(Результат) Тогда
			ПоказатьПредупреждение(,Результат,, "Ошибка чтения файла");
		Иначе
			ЗаполнитьЗаголовкиКолонок();
			ЗаполнитьСпискиВыбора();
		КонецЕсли;
	Иначе
		Сообщение = ПрайсЛистыКонтрагентовВызовСервера.ПроверитьСообщения(ИдентификаторДлительнойОперации);
		Если Сообщение <> Неопределено Тогда
			Сообщение.Свойство("Текст", Текст);
			Сообщение.Свойство("Процент", Процент);
			
			Состояние("Состояние загрузки", Процент, Текст);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСтруктуруДанныхИзФайлаПроверитьВыполнение", 0.5, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьПрайсЛистИзФайлаПроверитьВыполнение()
	Перем Текст, Процент;
	
	Если ПрайсЛистыКонтрагентовВызовСервера.ЗаданиеВыполнено(ИдентификаторДлительнойОперации) Тогда
		Оповестить("ЗаданиеВыполнено", Неопределено, УникальныйИдентификатор);
		
		Ответ = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если ТипЗнч(Ответ) = Тип("Структура") И Ответ.Ошибка Тогда
			ПоказатьПредупреждение(, Ответ.Сообщение);
		Иначе
			ОткрытьПрайсЛист();
		КонецЕсли;
	Иначе
		Сообщение = ПрайсЛистыКонтрагентовВызовСервера.ПроверитьСообщения(ИдентификаторДлительнойОперации);
		Если Сообщение <> Неопределено Тогда
			Оповестить("ОбновитьСостояние", Сообщение, УникальныйИдентификатор);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьПрайсЛистИзФайлаПроверитьВыполнение", 0.5, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкачатьНовыеФайлыПрайсЛистаПроверитьВыполнение()
	Перем Текст, Процент;
	
	Если НЕ ПрайсЛистыКонтрагентовВызовСервера.ЗаданиеВыполнено(ИдентификаторДлительнойОперации) Тогда
		Сообщение = ПрайсЛистыКонтрагентовВызовСервера.ПроверитьСообщения(ИдентификаторДлительнойОперации);
		Если Сообщение <> Неопределено Тогда
			Сообщение.Свойство("Текст", Текст);
			Сообщение.Свойство("Процент", Процент);
			
			Состояние("Состояние загрузки", Процент, Текст);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СкачатьНовыеФайлыПрайсЛистаПроверитьВыполнение", 0.5, Истина);
	Иначе
		Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если Результат = "ОК" Тогда
			ПоказатьПредупреждение(, "Файл успешно обновлен");
		ИначеЕсли Результат = "BAD" Тогда
			ПоказатьПредупреждение(, "Новых файлов не обнаружено.");
		Иначе
			ПоказатьПредупреждение(, "При обновлении возникли ошибки. Подробнее в журнале регистрации.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ТабличныйДокумент

&НаСервере
Процедура ЗаполнитьТабличноеПолеОбразецДанных(Знач ИмяЛиста = Неопределено, ОбновитьЗаголовкиЛиста = Ложь)
	Перем ВыбраннаяСтраница;
	
	Если ОбновитьЗаголовкиЛиста Тогда
		ЗаполнитьЗаголовкиКолонок();
		ЗаполнитьСпискиВыбора();
	КонецЕсли;
	
	НастройкаСоответствияПолей.Очистить();
	
	// уберем режми ожидания
	ПрайсЛистыКонтрагентовКлиентСервер.
		УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей, Истина);
	
	МакетОформления = Справочники.ПрайсЛистыКонтрагентов.ПолучитьМакет("ОбразецДанных");
	
	Если Объект.СтруктураСтраницПрайсЛиста.Количество() = 0 Тогда
		ПрайсЛистыКонтрагентовКлиентСервер.
			УстановитьРежимОжиданияТабличногоДокумента(Элементы.НастройкаСоответствияПолей, ,
				НСтр("ru = 'Нет данных для отображения...'"), БиблиотекаКартинок.Нет);
		Возврат;
	КонецЕсли;
	
	НомерСтрокиСЗаголовками = 1;
	НайденныеСтроки         = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", Объект.ИмяТаблицы));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НомерСтрокиСЗаголовками = НайденныеСтроки[0].СтрокаЗаголовковКолонок;
	КонецЕсли;
	
	// Теперь определимся с тем, что выводим в табличное поле
	Если ИмяЛиста = Неопределено Тогда
		ИмяЛиста = Объект.ИмяТаблицы;
	КонецЕсли;
	ИмяТекущейСтраницы = ИмяЛиста;
	
	// Выведем указанный лист!
	НайденныеСтроки = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ИмяТекущейСтраницы));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВыбраннаяСтраница = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаНачало = 1; СтрокаКонец = 0; Использовать = Ложь;
	Если ВыбраннаяСтраница <> Неопределено Тогда
		Использовать  = ВыбраннаяСтраница.Использовать;
		ОбразецДанных = ВыбраннаяСтраница.ДанныеОбразцаСтраницы;
		СтрокаНачало  = ВыбраннаяСтраница.СтрокаНачало;
		СтрокаКонец   = ВыбраннаяСтраница.СтрокаКонец;
	КонецЕсли;
	
	Если ОбразецДанных = Неопределено ИЛИ ОбразецДанных.Количество() = 0 Тогда
		ЕстьДанные = Ложь;
		КоличествоКолонок = 0;
		КоличествоСтрок = 0;
		Если Объект.ФайлИсточникДанных Тогда
			КоличествоКолонок = ИменаКолонок.Количество();
		КонецЕсли;
	Иначе
		ЕстьДанные = Истина;
		Если Объект.ФайлИсточникДанных Тогда
			КоличествоКолонок = МАКС(ОбразецДанных.Количество(), ИменаКолонок.Количество());
		Иначе
			КоличествоКолонок = ОбразецДанных.Количество();
		КонецЕсли;
		КоличествоСтрок = ОбразецДанных[0].Количество();
	КонецЕсли;
	
	ЦветТекста = ?(Использовать, ЦветаСтиля.ЦветТекстаПоля, WebЦвета.ТемноСерый);
	
	ОбластьСтраницы                = МакетОформления.ПолучитьОбласть("Страницы");
	ОбластьИмяСтраницы             = МакетОформления.ПолучитьОбласть("ИмяСтраницы");
	ОбластьРеквизиты               = МакетОформления.ПолучитьОбласть("Реквизиты");
	ОбластьИмяРеквизитаКлючевое    = МакетОформления.ПолучитьОбласть("ИмяРеквизитаКлючевое");
	ОбластьИмяРеквизитаЗаполнено   = МакетОформления.ПолучитьОбласть("ИмяРеквизитаЗаполнено");
	ОбластьИмяРеквизитаНеЗаполнено = МакетОформления.ПолучитьОбласть("ИмяРеквизитаНеЗаполнено");
	ОбластьНомерКолонки            = МакетОформления.ПолучитьОбласть("НомерКолонки");
	ОбластьЗаголовки               = МакетОформления.ПолучитьОбласть("Заголовки");
	ОбластьЗаголовокКолонки        = МакетОформления.ПолучитьОбласть("ЗаголовокКолонки");
	ОбластьНачалоДанных            = МакетОформления.ПолучитьОбласть("НачалоДанных");
	ОбластьЗначениеПоляСтрока      = МакетОформления.ПолучитьОбласть("ЗначениеПоляСтрока");
	ОбластьЗначениеПоляЧисло       = МакетОформления.ПолучитьОбласть("ЗначениеПоляЧисло");
	ОбластьНомерСтроки             = МакетОформления.ПолучитьОбласть("НомерСтроки");
	ОбластьКонецДанных             = МакетОформления.ПолучитьОбласть("КонецДанных");
	ОбластьНомерСтрокиПустой       = МакетОформления.ПолучитьОбласть("НомерСтрокиПустой");
	
	ОбластьРеквизиты.Область("R1C1").ЦветТекста               = ЦветТекста;
	ОбластьИмяРеквизитаКлючевое.Область("R1C1").ЦветТекста    = ЦветТекста;
	ОбластьИмяРеквизитаЗаполнено.Область("R1C1").ЦветТекста   = ЦветТекста;
	ОбластьИмяРеквизитаНеЗаполнено.Область("R1C1").ЦветТекста = ЦветТекста;
	ОбластьНомерКолонки.Область("R1C1").ЦветТекста            = ЦветТекста;
	ОбластьЗаголовки.Область("R1C1").ЦветТекста               = ЦветТекста;
	ОбластьЗаголовокКолонки.Область("R1C1").ЦветТекста        = ЦветТекста;
	ОбластьНачалоДанных.Область("R1C1").ЦветТекста            = ЦветТекста;
	ОбластьЗначениеПоляСтрока.Область("R1C1").ЦветТекста      = ЦветТекста;
	ОбластьЗначениеПоляЧисло.Область("R1C1").ЦветТекста       = ЦветТекста;
	ОбластьНомерСтроки.Область("R1C1").ЦветТекста             = ЦветТекста;
	ОбластьКонецДанных.Область("R1C1").ЦветТекста             = ЦветТекста;
	
	// Строка листов\таблиц
	ОбластьСтраницы.Область("R1C1").Текст = ?(Объект.ФайлИсточникДанных, "Страницы", "Таблицы");
	
	НастройкаСоответствияПолей.Вывести(ОбластьСтраницы);
	Для Каждого СтрокаСтруктуры Из Объект.СтруктураСтраницПрайсЛиста Цикл
		Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, ?(ИмяТекущейСтраницы = СтрокаСтруктуры.ИмяЛиста, 2, 1));
		ОбластьИмяСтраницы.Область("R1C1").Обвести(Рамка, Рамка, Рамка, Рамка);
		
		ОбластьИмяСтраницы.Область("R1C1").Текст       = СтрокаСтруктуры.ИмяЛиста;
		ОбластьИмяСтраницы.Область("R1C1").ЦветТекста  = ?(СтрокаСтруктуры.Использовать, ЦветаСтиля.ЦветТекстаПоля, WebЦвета.ТемноСерый);
		ОбластьИмяСтраницы.Область("R1C1").Шрифт       = Новый Шрифт(, , ИмяТекущейСтраницы = СтрокаСтруктуры.ИмяЛиста, , ,
			НЕ СтрокаСтруктуры.Использовать);
		ОбластьИмяСтраницы.Область("R1C1").Расшифровка = СтрокаСтруктуры.ИмяЛиста;
		
		НастройкаСоответствияПолей.Присоединить(ОбластьИмяСтраницы);
	КонецЦикла;
	
	// Строка реквизитов
	НастройкаСоответствияПолей.Вывести(ОбластьРеквизиты);
	Для СчКолонок = 1 По КоличествоКолонок Цикл
		ИмяКолонки = Формат(СчКолонок, "ЧН=0; ЧГ=0");
		Если Не Объект.ФайлИсточникДанных И ЕстьДанные Тогда
			ИмяКолонки = ОбразецДанных[СчКолонок - 1][0];
		КонецЕсли;
		
		СтрокиСтруктуры = Объект.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяПоляФайла", ИмяКолонки));
		КлючевоеПоле = Ложь; ТекстЗаголовкаРеквизита = "";
		Для Каждого СтрокаСтруктуры Из СтрокиСтруктуры Цикл
			Если СтрокаСтруктуры.Ключевое Тогда
				КлючевоеПоле = Истина;
			КонецЕсли;
			
			ТекстЗаголовкаРеквизита = ТекстЗаголовкаРеквизита
				+ ?(ПустаяСтрока(ТекстЗаголовкаРеквизита), "", Символы.ПС)
				+ СтрокаСтруктуры.ПредставлениеРеквизита;
		КонецЦикла;
		
		Если КлючевоеПоле Тогда
			СекцияИмяРеквизита = ОбластьИмяРеквизитаКлючевое;
		ИначеЕсли ЗначениеЗаполнено(ТекстЗаголовкаРеквизита) Тогда
			СекцияИмяРеквизита = ОбластьИмяРеквизитаЗаполнено;
		Иначе
			СекцияИмяРеквизита = ОбластьИмяРеквизитаНеЗаполнено;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЗаголовкаРеквизита) Тогда
			СекцияИмяРеквизита.Область("R1C1").Текст = ТекстЗаголовкаРеквизита;
		КонецЕсли;
		
		НастройкаСоответствияПолей.Присоединить(СекцияИмяРеквизита);
	КонецЦикла;
	
	// Третья строка
	ЗаголовкиВывели = Ложь; ВыводитьИзТаблицыЗаголовков = Ложь;
	Если Объект.ФайлИсточникДанных Тогда
		Если Объект.ИмяТаблицы = ИмяТекущейСтраницы ИЛИ Объект.ЗаголовкиКолонокВПрайсЛисте.Количество() = 0 Тогда
			НастройкаСоответствияПолей.Вывести(ОбластьНомерСтрокиПустой);
		Иначе
			ЗаголовкиВывели = Истина;
			ВыводитьИзТаблицыЗаголовков = Истина;
			ОбластьЗаголовки.Область("R1C1").Текст = НСтр("ru = 'Заголовки на странице ['")
				+ Объект.ИмяТаблицы + НСтр("ru = '] в '")
				+ Формат(НомерСтрокиСЗаголовками, "ЧН=0; ЧГ=0") + НСтр("ru = ' строке'");
			НастройкаСоответствияПолей.Вывести(ОбластьЗаголовки);
		КонецЕсли;
	Иначе
		ЗаголовкиВывели = Истина;
		НастройкаСоответствияПолей.Вывести(ОбластьНомерСтрокиПустой);
	КонецЕсли;
	
	Для СчКолонок = 1 По КоличествоКолонок Цикл
		// Вместо номеров строк можем выводить Заголовки колонок
		ИмяКолонки = Формат(СчКолонок, "ЧН=0; ЧГ=0");
		Если ВыводитьИзТаблицыЗаголовков Тогда
			
			СтрокиТаблицыЗаголовков = Объект.ЗаголовкиКолонокВПрайсЛисте.НайтиСтроки(Новый Структура("ИмяКолонки", ИмяКолонки));
			Если СтрокиТаблицыЗаголовков.Количество() > 0 Тогда
				ИмяКолонки = СтрокиТаблицыЗаголовков[0].ПредставлениеКолонки;
			КонецЕсли;
		Иначе
			Если Не Объект.ФайлИсточникДанных И ЕстьДанные Тогда
				// Имена колонок всегда в первой строке Образца данных
				ИмяКолонки = ОбразецДанных[СчКолонок - 1][0];
			КонецЕсли;
		КонецЕсли;
		ОбластьНомерКолонки.Область("R1C1").Текст = ИмяКолонки;
		НастройкаСоответствияПолей.Присоединить(ОбластьНомерКолонки);
	КонецЦикла;
	
	// Четвертая и далее - область образца данных
	Для СчСтрок = ?(Объект.ФайлИсточникДанных, 1, 2) По КоличествоСтрок Цикл
		ЭтоЗаголовки = Ложь;
		Если Объект.ФайлИсточникДанных И Объект.ИмяТаблицы = ИмяТекущейСтраницы И СчСтрок = НомерСтрокиСЗаголовками Тогда
			ЗаголовкиВывели = Истина;
			ЭтоЗаголовки = Истина;
			НастройкаСоответствияПолей.Вывести(ОбластьЗаголовки);
		ИначеЕсли СтрокаНачало > 0 И СчСтрок = СтрокаНачало Тогда
			НастройкаСоответствияПолей.Вывести(ОбластьНачалоДанных);
		ИначеЕсли СтрокаКонец > 0 И СчСтрок = СтрокаКонец Тогда
			НастройкаСоответствияПолей.Вывести(ОбластьКонецДанных);
		Иначе
			// Просто выводим как номер строки
			ОбластьНомерСтроки.Область("R1C1").Текст = Формат(СчСтрок, "ЧН=0; ЧГ=0");
			НастройкаСоответствияПолей.Вывести(ОбластьНомерСтроки);
		КонецЕсли;
		Для СчКолонок = 1 По КоличествоКолонок Цикл
			Если ОбразецДанных.ВГраница() >= (СчКолонок - 1) Тогда
				ЗначениеПоля = ОбразецДанных[СчКолонок - 1][СчСтрок - 1];
			Иначе
				ЗначениеПоля = "";
			КонецЕсли;
			Если ЭтоЗаголовки Тогда
				ОбластьЗаголовокКолонки.Область("R1C1").Текст = ЗначениеПоля;
				НастройкаСоответствияПолей.Присоединить(ОбластьЗаголовокКолонки);
			Иначе
				Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
					ОбластьЗначениеПоляЧисло.Область("R1C1").Текст = ЗначениеПоля;
					НастройкаСоответствияПолей.Присоединить(ОбластьЗначениеПоляЧисло);
				Иначе
					ОбластьЗначениеПоляСтрока.Область("R1C1").Текст = ЗначениеПоля;
					НастройкаСоответствияПолей.Присоединить(ОбластьЗначениеПоляСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Выведем строку про заголовки, начало и конец загружаемых данных, если они не попали в основную таблицу.
	Если Не ЗаголовкиВывели И НомерСтрокиСЗаголовками > 0 Тогда
		
		Если Объект.ИмяТаблицы = ИмяТекущейСтраницы Тогда
			ОбластьЗаголовки.Область("R1C1").Текст = НСтр("ru = 'Заголовки в '")
				+ Формат(НомерСтрокиСЗаголовками, "ЧН=0; ЧГ=0") + НСтр("ru = ' строке'");
		Иначе
			ОбластьЗаголовки.Область("R1C1").Текст = НСтр("ru = 'Заголовки на странице ['")
				+ Объект.ИмяТаблицы + НСтр("ru = '] в '")
				+ Формат(НомерСтрокиСЗаголовками, "ЧН=0; ЧГ=0") + НСтр("ru = ' строке'");
		КонецЕсли;
		НастройкаСоответствияПолей.Вывести(ОбластьЗаголовки);
		
		Для СчКолонок = 1 По КоличествоКолонок Цикл
			// Вместо номеров строк можем выводить Заголовки колонок
			ИмяКолонки = Формат(СчКолонок, "ЧН=0; ЧГ=0");
			
			СтрокиТаблицыЗаголовков = Объект.ЗаголовкиКолонокВПрайсЛисте.НайтиСтроки(Новый Структура("ИмяКолонки", ИмяКолонки));
			Если СтрокиТаблицыЗаголовков.Количество() > 0 Тогда
				ИмяКолонки = СтрокиТаблицыЗаголовков[0].ПредставлениеКолонки;
			КонецЕсли;
			ОбластьЗаголовокКолонки.Область("R1C1").Текст = ИмяКолонки;
			НастройкаСоответствияПолей.Присоединить(ОбластьЗаголовокКолонки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокаНачало > 0 И СтрокаНачало > КоличествоСтрок Тогда
		ОбластьНачалоДанных.Область("R1C1").Текст = НСтр("ru = 'Начало данных в '")
			+ Формат(СтрокаНачало, "ЧН=0; ЧГ=0") + НСтр("ru = ' строке'");
		НастройкаСоответствияПолей.Вывести(ОбластьНачалоДанных);
		Для СчКолонок = 1 По КоличествоКолонок Цикл
			ЗначениеПоля = "...";
			ОбластьЗначениеПоляСтрока.Область("R1C1").Текст = ЗначениеПоля;
			НастройкаСоответствияПолей.Присоединить(ОбластьЗначениеПоляСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокаКонец = 0 ИЛИ СтрокаКонец > КоличествоСтрок Тогда
		Если СтрокаКонец > 0 Тогда
			ОбластьКонецДанных.Область("R1C1").Текст = НСтр("ru = 'Конец данных в '")
				+ Формат(ВыбраннаяСтраница.СтрокаКонец, "ЧН=0; ЧГ=0") + НСтр("ru = ' строке'");
		Иначе
			ОбластьКонецДанных.Область("R1C1").Текст = НСтр("ru = 'Загружаются все строки'");
		КонецЕсли;
		НастройкаСоответствияПолей.Вывести(ОбластьКонецДанных);
		Для СчКолонок = 1 По КоличествоКолонок Цикл
			ЗначениеПоля = "...";
			ОбластьЗначениеПоляСтрока.Область("R1C1").Текст = ЗначениеПоля;
			НастройкаСоответствияПолей.Присоединить(ОбластьЗначениеПоляСтрока);
		КонецЦикла;
	КонецЕсли;
	
	НастройкаСоответствияПолей.ФиксацияСверху = 3;
	НастройкаСоответствияПолей.ФиксацияСлева  = 1;
	
	ОбразецДанныхВыделитьКолонку(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбразецДанныхСнятьВыделениеКолонки()
	
	Если ВыделеннаяКолонка = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Рамка    = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	НетРамки = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1);
	
	НомерКолонки = Формат(ВыделеннаяКолонка + 1, "ЧН=0; ЧГ=0");
	НомерСтроки  = Формат(НастройкаСоответствияПолей.ВысотаТаблицы, "ЧН=0; ЧГ=0");
	
	ОбластьКолонки = НастройкаСоответствияПолей.Область(3, НомерКолонки, НомерСтроки, НомерКолонки);
	ОбластьКолонки.Обвести(НетРамки, Рамка, Рамка, Рамка);
	ОбластьКолонки.ЦветРамки = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветРамки");
	
	ОбластьКолонки = НастройкаСоответствияПолей.Область(3, НомерКолонки, 3, НомерКолонки);
	ОбластьКолонки.Обвести(НетРамки, НетРамки, Рамка, Рамка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбразецДанныхВыделитьКолонку(Форма)
	
	Если Форма.ВыделеннаяКолонка = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ОбластьКолонки = Форма.НастройкаСоответствияПолей.Область(3,
																											Форма.ВыделеннаяКолонка + 1,
																											Форма.НастройкаСоответствияПолей.ВысотаТаблицы,
																											Форма.ВыделеннаяКолонка + 1);
	ОбластьКолонки.Обвести(Рамка, Рамка, Рамка, Рамка);
	ОбластьКолонки.ЦветРамки = Форма.ЦветФонаВыделенияПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияПолейВыбор(Элемент, Область, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Область.Расшифровка) И Область.Верх = 1 Тогда
		СтрокиЛиста = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", Область.Расшифровка));
		Если СтрокиЛиста.Количество() > 0 Тогда
			Лист = СтрокиЛиста[0];
		Иначе
			ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(
				Элементы.НастройкаСоответствияПолей,
				,
				НСтр("ru = 'Данные рассинхронизированы. Обновите образец.'"),
				БиблиотекаКартинок.Нет
			);
			
			Возврат;
		КонецЕсли;
		
		Если НЕ ИмяТекущейСтраницы = Область.Расшифровка Тогда // страница активна
			
			ЗаполнитьТабличноеПолеОбразецДанных(Область.Расшифровка);
			
		ИначеЕсли Объект.СтруктураСтраницПрайсЛиста.Количество() > 1 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДействияСоСтраницейОбразцаДанныхЗавершение", ЭтотОбъект, Лист);
			СписокДействий = Новый СписокЗначений;
			Если Объект.ФайлИсточникДанных Тогда
				ТекстНачало = ?(Лист.Использовать, НСтр("ru = 'Не загружать'"), "Загружать");
				СписокДействий.Добавить("ИнвертироватьИспользованиеЛиста",
					СтрШаблон(НСтр("ru = '%1 данные с текущей страницы'"), ТекстНачало)
				);
				СписокДействий.Добавить("ОтключитьОстальныеЛисты", НСтр("ru = 'Загружать ТОЛЬКО с текущей страницы'"));
			Иначе
				СписокДействий.Добавить("ОтключитьОстальныеЛисты", НСтр("ru = 'Загружать данные из этой таблицы'"));
			КонецЕсли;
			
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДействий);
			
		ИначеЕсли Объект.СтруктураСтраницПрайсЛиста.Количество() = 1 И НЕ Лист.Использовать Тогда
			
			Лист.Использовать = Истина;
			ЗаполнитьТабличноеПолеОбразецДанных(ИмяТекущейСтраницы);
			
		КонецЕсли;
	ИначеЕсли Область.Верх = 2 И Область.Гиперссылка Тогда
		ДополнительныеПараметры = Неопределено;
		Если Объект.ФайлИсточникДанных Тогда
			ДополнительныеПараметры = Область.Лево - 1;
		Иначе
			ДополнительныеПараметры = Объект.ЗаголовкиКолонокВПрайсЛисте[Область.Лево - 2].ИмяКолонки;
		КонецЕсли;
		
		Список = Новый СписокЗначений; Сч = 1;
		Условие = Новый Структура("ИмяРеквизитаПрайсЛиста", "Наименование");
		ВсегоСтрокСНаименованием = Объект.СтруктураФайлаПрайсЛиста.НайтиСтроки(Условие).Количество();
		Для Каждого Реквизит Из Объект.СтруктураФайлаПрайсЛиста Цикл
			ЭтоВыбранноеПоле = Реквизит.ИмяПоляФайла = Строка(ДополнительныеПараметры);
			
			Список.Добавить(
				Реквизит,
				Реквизит.ПредставлениеРеквизита + ?(Реквизит.ПредставлениеРеквизита = "Наименование" И ВсегоСтрокСНаименованием > 1, СтрШаблон(" (%1)" , Сч), ""),
				ЭтоВыбранноеПоле,
				?(ЭтоВыбранноеПоле, БиблиотекаКартинок.Утвержден, Неопределено));
				
			Если Реквизит.ПредставлениеРеквизита = "Наименование" Тогда
				Если Сч = ВсегоСтрокСНаименованием Тогда
					Список.Добавить(
						Реквизит,
						НСтр("ru = 'Добавить новое поле наименование'"),
						ЭтоВыбранноеПоле,
						БиблиотекаКартинок.Плюс);
				КонецЕсли;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДействияСКолонкойОбразцаДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОписаниеОповещения, Список);
	ИначеЕсли Область.Лево = 1 И Область.Гиперссылка Тогда
		СтрокиЛиста = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ИмяТекущейСтраницы));
		Если СтрокиЛиста.Количество() > 0 Тогда
			Лист = СтрокиЛиста[0];
		Иначе
			ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(
				Элементы.НастройкаСоответствияПолей,
				,
				НСтр("ru = 'Данные рассинхронизированы. Обновите образец.'"),
				БиблиотекаКартинок.Нет
			);
			
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НомерСтроки", Область.Верх - ?(Объект.ФайлИсточникДанных, 3, 2));
		ДополнительныеПараметры.Вставить("Лист"       , Лист);
		
		Список = Новый СписокЗначений;
		Если Объект.ФайлИсточникДанных Тогда
			Список.Добавить(
				"Заголовок",
				НСтр("ru = 'Указать строку с заголовками'"),
				,
				БиблиотекаКартинок.ГруппировкаКомпоновкиДанных
			);
		КонецЕсли;
		Список.Добавить("НачалоДанных" , НСтр("ru = 'Указать первую строку с данными'"), , БиблиотекаКартинок.Реквизит);
		Список.Добавить("КонецДанных"  , НСтр("ru = 'Указать последнюю строку данных'"), , БиблиотекаКартинок.Реквизит);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыборДействияСоСтрокойОбразцаДанныхЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры
			);
		ПоказатьВыборИзМеню(ОписаниеОповещения, Список);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствияПолейПриАктивизацииОбласти(Элемент)
	
	ДоступностьВыбораКлючевогоПоля = Ложь;
	Если НастройкаСоответствияПолей.ВыделенныеОбласти.Количество() > 0 Тогда
		Область = НастройкаСоответствияПолей.ВыделенныеОбласти[0];
		
		Если Область.Верх = 2 И Область.Гиперссылка Тогда
			ПозицияОблости = Неопределено;
			Если Объект.ФайлИсточникДанных Тогда
				ПозицияОблости = Область.Лево - 1;
			Иначе
				ПозицияОблости = Объект.ЗаголовкиКолонокВПрайсЛисте[Область.Лево - 2].ИмяКолонки;
			КонецЕсли;
			
			Условие = Новый Структура("ИмяПоляФайла", Строка(ПозицияОблости));
			Если Объект.СтруктураФайлаПрайсЛиста.НайтиСтроки(Условие).Количество() > 0 Тогда
				ДоступностьВыбораКлючевогоПоля = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НастройкаСоответствияПолейКонтекстноеМенюУстановитьПолеКлючевым.Доступность = ДоступностьВыбораКлючевогоПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогАвтообновленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ИспользоватьТомаХраненияФайлов Тогда 
		
		#Если ВебКлиент Тогда	
			ВыборКаталога(Новый ОписаниеОповещения("ВыборКаталогаЗавершение", ЭтотОбъект), Объект.КаталогАвтообновления);			
		#Иначе
			СтандартнаяОбработка = Ложь;
			Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
			ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(Режим);
			ДиалогВыбораКаталога.Заголовок = "Выберите каталог";
			Если ДиалогВыбораКаталога.Выбрать() Тогда
				Объект.КаталогАвтообновления = ДиалогВыбораКаталога.Каталог;
			КонецЕсли;		
		#КонецЕсли
			
		// Удаляем лишние пробелы и добавляем слэш в конце, если его нет.
		Если Не ПустаяСтрока(Объект.КаталогАвтообновления) Тогда
			
			Если СтрНачинаетсяС(Объект.КаталогАвтообновления, " ") Или СтрЗаканчиваетсяНа(Объект.КаталогАвтообновления, " ") Тогда
				Объект.КаталогАвтообновления = СокрЛП(Объект.КаталогАвтообновления);
			КонецЕсли;
			
			Если Не СтрЗаканчиваетсяНа(Объект.КаталогАвтообновления, "\") Тогда
				Объект.КаталогАвтообновления = Объект.КаталогАвтообновления + "\";
			КонецЕсли;
			
			Если СтрЗаканчиваетсяНа(Объект.КаталогАвтообновления, "\\") Тогда
				Объект.КаталогАвтообновления = Лев(Объект.КаталогАвтообновления, СтрДлина(Объект.КаталогАвтообновления) - 1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НастроитьСписокВыбораПериодичностиПроверкиНовыхДанных();
	
	СписокВыбора = Элементы.ПериодичностьПроверкиНовыхДанных.СписокВыбора;
	СписокВыбора.Очистить();
	
	ДоступныеЗначения = Справочники.ПрайсЛистыКонтрагентов.ПериодичностиПроверкиНовыхДанных();
	Для Каждого Строка Из ДоступныеЗначения Цикл
		НоваяСтрока = СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры



#КонецОбласти
