
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РаботаСФормой.МожноУстановитьОтборПоВладельцу(Параметры) Тогда
		
		РаботаСФормой.УстановитьОтборПоВладельцуНаДерево(Дерево, Параметры.Отбор);
		
	КонецЕсли;
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	РежимПодбора = Элементы.Список.РежимВыбора
		И Параметры.Свойство("ПараметрыПодбора")
		И ТипЗнч(Параметры.ПараметрыПодбора) = Тип("Структура");
	
	Элементы.СтраницаПодбораАвторабот.Видимость = РежимПодбора;
	
	Если РежимПодбора Тогда
		
		ПараметрыМодель                = Параметры.Модель;
		ПараметрыВариантКомплектации   = Параметры.ВариантКомплектации;
		ПараметрыАвтомобиль            = Параметры.Автомобиль;
		ПараметрыВидРемонта            = Параметры.ВидРемонта;
		ПараметрыВалюта                = Параметры.Валюта;
		ПараметрыКурсВалюты            = Параметры.КурсВалюты;
		ПараметрыТипЦенРабот           = Параметры.ТипЦенРабот;
		ПараметрыКонтрагент            = Параметры.Контрагент;
		ПараметрыДоговорВзаиморасчетов = Параметры.ДоговорВзаиморасчетов;
		ПараметрыЦех                   = Параметры.Цех;
		ПараметрыДокументИзменениеЦен  = Параметры.ДокументИзменениеЦен;
		АдресПараметрыПодбора          = ПоместитьВоВременноеХранилище(Параметры.ПараметрыПодбора, УникальныйИдентификатор);
		
		Если
			Параметры.Свойство("ДокументОснование")
			И ЗначениеЗаполнено(Параметры.ДокументОснование)
			И (ТипЗнч(Параметры.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
				Или ТипЗнч(Параметры.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд"))
		Тогда
			
			ПараметрыЦех        = Параметры.ДокументОснование.Цех;
			ПараметрыВидРемонта = Параметры.ДокументОснование.ВидРемонта;
			
			Если ТипЗнч(Параметры.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
				
				ПараметрыАвтомобиль = Параметры.ДокументОснование.СводныйРемонтныйЗаказ.Автомобиль;
				
			Иначе
				
				ПараметрыАвтомобиль = Параметры.ДокументОснование.Автомобиль;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыТипЦенРабот) Тогда
			
			ПараметрыТипЦенРабот = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенРабот");
			
		КонецЕсли;
		
		Элементы.ПодборАвтоработКоличество.Видимость  = Параметры.ЕстьКоличество;
		Элементы.ПодборАвтоработСумма.Видимость       = Параметры.ЕстьКоличество;
		Элементы.ПодборАвтоработКоэффициент.Видимость = Элементы.ПодборАвтоработСумма.Видимость;
		 
		КлючСохраненияПоложенияОкна = "Справочник.Автоработы.РежимПодбора";
		КлючНазначенияИспользования = "Справочник.Автоработы.РежимПодбора";
		
		Элементы.ПодборАвторабот.Подвал = НЕ ПараметрыДокументИзменениеЦен;
		Элементы.ПодборАвтоработСпособРасчетаСтоимостиРаботы.Видимость = Не ПараметрыДокументИзменениеЦен;
		Заголовок = НСтр("ru = 'Подбор авторабот'");
		Элементы.ФормаВыбрать.Заголовок = НСтр("ru = 'Завершить подбор'");
		
	КонецЕсли;
		
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
	УстановитьКартинкуДекорацияПоказатьСкрытьПравуюПанельПоиска();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаСписка(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовПанелиПоиска
	
&НаКлиенте
Процедура ДекорацияПоказатьСкрытьПравуюПанельПоискаНажатие(Элемент)
	
	ПоказатьСкрытьПравуюПанельПоискаНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.СтраницаПодбораАвторабот.Видимость И НЕ (ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") ИЛИ Элементы.Список.ТекущиеДанные.ЭтоГруппа) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаПодбораАвторабот(ВыбраннаяСтрока, Элементы.ПодборАвторабот.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПриАктивизацииСтрокиНаСервере()
	
	Цены.Очистить();
	ВремяВыполнения.Очистить();
	Если (Элементы.Список.ТекущаяСтрока <> Неопределено) И
		 (ТипЗнч(Элементы.Список.ТекущаяСтрока)=Тип("СправочникСсылка.Автоработы")) И
		 (НЕ Элементы.Список.ТекущаяСтрока.ЭтоГруппа) Тогда
		
		// Получим таблицу родителей автоработы с индексом иерархии
		ТаблицаРодителей = Новый ТаблицаЗначений;
		ТаблицаРодителей.Колонки.Добавить("Авторабота", Новый ОписаниеТипов("СправочникСсылка.Автоработы"));
		ТаблицаРодителей.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
		
		ТекущийРодитель = Элементы.Список.ТекущаяСтрока;
		Индекс = 0;
		Пока ТекущийРодитель<>Справочники.Автоработы.ПустаяСсылка() Цикл
			НоваяСтрока = ТаблицаРодителей.Добавить();
			НоваяСтрока.Авторабота = ТекущийРодитель;
			НоваяСтрока.Индекс = Индекс;
			ТекущийРодитель = ТекущийРодитель.Родитель;
			Индекс = Индекс+1;
		КонецЦикла;
		
		НоваяСтрока = ТаблицаРодителей.Добавить();
		НоваяСтрока.Авторабота = Справочники.Автоработы.ПустаяСсылка();
		НоваяСтрока.Индекс = Индекс;
		
		// Поместим таблицу родителей в менеджер временных таблиц
		Запрос=Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТабРодителей.Авторабота КАК Авторабота,
		|	ТабРодителей.Индекс КАК Индекс
		|ПОМЕСТИТЬ
		|	ТаблицаРодителей
		|ИЗ
		|	&ТабРодителей КАК ТабРодителей
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРодителей.Индекс КАК Индекс,
		|	ЦеныАвтоработСрезПоследних.ТипЦен КАК ТипЦен,
		|	ЦеныАвтоработСрезПоследних.Модель КАК Модель,
		|	ЦеныАвтоработСрезПоследних.Цех КАК Цех,
		|	ЦеныАвтоработСрезПоследних.ВидРемонта КАК ВидРемонта,
		|	ЦеныАвтоработСрезПоследних.Нормочас КАК Нормочас,
		|	ЦеныАвтоработСрезПоследних.Валюта КАК Валюта,
		|	ЦеныАвтоработСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ
		|	ТаблицаЦен
		|ИЗ
		|	РегистрСведений.ЦеныАвторабот.СрезПоследних(,
		|		Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) И 
		|		ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка) И 
		|		Авторабота В (ВЫБРАТЬ Авторабота ИЗ ТаблицаРодителей)
		|	) КАК ЦеныАвтоработСрезПоследних
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ТаблицаРодителей КАК ТаблицаРодителей
		|ПО
		|	ЦеныАвтоработСрезПоследних.Авторабота = ТаблицаРодителей.Авторабота
		|ГДЕ
		|	(НЕ ЦеныАвтоработСрезПоследних.Нормочас = ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка)) ИЛИ 
		|	(НЕ ЦеныАвтоработСрезПоследних.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|;
		|ВЫБРАТЬ
		|	ТаблицаЦенОтбора.ТипЦен КАК ТипЦен,
		|	ТаблицаЦенОтбора.Модель КАК Модель,
		|	ТаблицаЦенОтбора.Цех КАК Цех,
		|	ТаблицаЦенОтбора.ВидРемонта КАК ВидРемонта,
		|	МИНИМУМ(ТаблицаЦенОтбора.Индекс) КАК Индекс
		|ПОМЕСТИТЬ
		|	ТаблицаИндексов
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦенОтбора
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЦенОтбора.ТипЦен,
		|	ТаблицаЦенОтбора.Модель,
		|	ТаблицаЦенОтбора.Цех,
		|	ТаблицаЦенОтбора.ВидРемонта
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаЦен.ТипЦен КАК ТипЦен,
		|	ТаблицаЦен.Модель КАК Модель,
		|	ТаблицаЦен.Цех КАК Цех,
		|	ТаблицаЦен.ВидРемонта КАК ВидРемонта,
		|	ТаблицаЦен.Нормочас КАК Нормочас,
		|	ЕСТЬNULL(ЦеныНормочасов.Цена, 0) КАК НормочасЦена,
		|	ЕСТЬNULL(ЦеныНормочасов.Валюта.Представление, """") КАК НормочасВалюта,
		|	ТаблицаЦен.Цена КАК Цена,
		|	ТаблицаЦен.Валюта.Представление КАК Валюта
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦен
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ТаблицаИндексов КАК ТаблицаИндексов
		|ПО
		|	ТаблицаЦен.ТипЦен     = ТаблицаИндексов.ТипЦен И 
		|	ТаблицаЦен.Модель     = ТаблицаИндексов.Модель И 
		|	ТаблицаЦен.Цех        = ТаблицаИндексов.Цех И 
		|	ТаблицаЦен.ВидРемонта = ТаблицаИндексов.ВидРемонта И 
		|	ТаблицаЦен.Индекс     = ТаблицаИндексов.Индекс
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЦеныНормочасов.СрезПоследних() КАК ЦеныНормочасов
		|ПО
		|	ТаблицаЦен.Нормочас = ЦеныНормочасов.Нормочас
		|УПОРЯДОЧИТЬ ПО
		|	ТипЦен,
		|	Модель,
		|	Цех,
		|	ВидРемонта";
		Запрос.УстановитьПараметр("ТабРодителей",ТаблицаРодителей);
		ТаблицаЦен = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекСтрока Из ТаблицаЦен Цикл
			НоваяСтрока = Цены.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
			
			Если ЗначениеЗаполнено(НоваяСтрока.Нормочас) И (ЗначениеЗаполнено(НоваяСтрока.НормочасВалюта)) И (ЗначениеЗаполнено(НоваяСтрока.НормочасЦена)) Тогда
				НоваяСтрока.ЦенаАвтоработы = ""+НоваяСтрока.НормочасЦена+" "+НоваяСтрока.НормочасВалюта;
			ИначеЕсли (ЗначениеЗаполнено(НоваяСтрока.Валюта)) И (ЗначениеЗаполнено(НоваяСтрока.Цена)) Тогда
				НоваяСтрока.ЦенаАвтоработы = ""+НоваяСтрока.Цена+" "+НоваяСтрока.Валюта;
			КонецЕсли; 
		КонецЦикла;
		
		ЗапросНормаВремени = Новый Запрос;
		ЗапросНормаВремени.Текст = "ВЫБРАТЬ
		|	АвтоработыНормыВремени.Модель КАК Модель,
		|	АвтоработыНормыВремени.ВариантКомплектации КАК ВариантыКомплектации,
		|	АвтоработыНормыВремени.ВремяВыполнения КАК ВремяВыполнения
		|ИЗ
		|	Справочник.Автоработы.НормыВремени КАК АвтоработыНормыВремени
		|ГДЕ
		|	АвтоработыНормыВремени.Ссылка = &Ссылка";
		ЗапросНормаВремени.УстановитьПараметр("Ссылка", Элементы.Список.ТекущаяСтрока.Ссылка);
		ТаблицаВремяВыполнения = ЗапросНормаВремени.Выполнить().Выгрузить();
		
		Для Каждого ТекСтрока Из ТаблицаВремяВыполнения Цикл
			НоваяСтрока = ВремяВыполнения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	СписокПриАктивизацииСтрокиНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Если РежимПодбора Тогда
		СтандартнаяОбработка = Ложь;
		Закрыть(ПодготовитьСписокПодборанныхАвторабот());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Группа Тогда
		Если Копирование Тогда
			КлючеваяОперация = "КопированиеСправочникаАвтоработы";
		Иначе
			КлючеваяОперация = "СозданиеФормыСправочникаАвтоработы";
		КонецЕсли;
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ ЕстьРеквизитНаКлиенте(Элемент.ТекущиеДанные, "ЭтоГруппа") ИЛИ НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		КлючеваяОперация = "ОткрытиеФормыСправочникаАвтоработы";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на сервере при обновлении пользовательских настроек списка.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	РаботаСФормой.ВывестиПользовательскиеОтборы(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	Если НЕ (Элементы.Дерево.ТекущаяСтрока = Элементы.Список.ТекущийРодитель)
		И НЕ(НЕ ЗначениеЗаполнено(Элементы.Список.ТекущийРодитель)
				И НЕ ЗначениеЗаполнено(Элементы.Дерево.ТекущаяСтрока)) Тогда
		Элементы.Список.ТекущийРодитель = Элементы.Дерево.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодборАвторабот

&НаСервере
Процедура ПодборАвтоработАвтоработаПриИзмененииНаСервере(Строка)
	
	Если ЗначениеЗаполнено(ПараметрыАвтомобиль) Тогда
		Если ТипЗнч(ПараметрыАвтомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
			Если ЗначениеЗаполнено(ПараметрыАвтомобиль.ВариантКомплектации) Тогда
				Модель = ПараметрыАвтомобиль.ВариантКомплектации;
			Иначе
				Модель = ПараметрыАвтомобиль.Модель;
			КонецЕсли;
		Иначе
			Модель = Справочники.Модели.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыВариантКомплектации) Тогда
		Модель = ПараметрыВариантКомплектации;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыМодель) Тогда
		Модель = ПараметрыМодель;
	Иначе
		Модель = Справочники.Модели.ПустаяСсылка();
	КонецЕсли;
	
	ЦенаРаботы = ЦенообразованиеСервер.ПолучитьЦенуАвтоработы(ПараметрыТипЦенРабот, Строка.Авторабота, Модель, ПараметрыКонтрагент, ПараметрыДоговорВзаиморасчетов, ПараметрыЦех, ПараметрыВидРемонта, ТекущаяДатаСеанса(), ПараметрыВалюта, ПараметрыКурсВалюты);
	
	Если ПараметрыДокументИзменениеЦен Тогда
		Если ЦенаРаботы.ВидЦены = "Нормочас" Тогда
			Строка.Нормочас = ЦенаРаботы.Нормочас;
		ИначеЕсли ЦенаРаботы.ВидЦены = "Цена" Тогда
			Строка.Цена = ЦенаРаботы.Цена;
		КонецЕсли;
	Иначе
		
		Если Не ЗначениеЗаполнено(ЦенаРаботы)
			ИЛИ Не ПолучитьЗначениеПараметраСтруктуры(ЦенаРаботы, "ЦенаНайдена", Ложь) Тогда
			
			// Получим из автоработы
			СпособРасчетаСтоимостиРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Строка.Авторабота, "СпособРасчетаСтоимостиРаботы");
			
			Строка.СпособРасчетаСтоимостиРаботы = ?(
				ЗначениеЗаполнено(СпособРасчетаСтоимостиРаботы),
				СпособРасчетаСтоимостиРаботы,
				Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой);
			
		Иначе
			
			ВидЦены = "";
			Строка.СпособРасчетаСтоимостиРаботы = ?(
				ЦенаРаботы.Свойство("ВидЦены", ВидЦены) И ВидЦены = "Нормочас",
				Перечисления.СпособыРасчетаСтоимостиРаботы.ПоНормеВремени,
				Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Строка, ЦенаРаботы, "Нормочас,Цена");
		Строка.Коэффициент = ЦенаРаботы.НормаВремени;
		
		РассчитатьСуммуАвтоработы(Строка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодборАвтоработКоличествоПриИзмененииНаСервере(ТекущиеДанные=Неопределено)
	
	Если ТекущиеДанные=Неопределено Тогда
		Строка = ПодборАвторабот.НайтиПоИдентификатору(Элементы.ПодборАвторабот.ТекущаяСтрока);
	Иначе
		Строка = ТекущиеДанные;
	КонецЕсли;
	
	// Пересчитываем сумму строки
	РассчитатьСуммуАвтоработы(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАвтоработКоличествоПриИзменении(Элемент, Строка=Неопределено)
	
	ПодборАвтоработКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАвтоработПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьПодвалПодбораАвторабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАвтоработПослеУдаления(Элемент)
	
	РассчитатьПодвалПодбораАвторабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАвтоработПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Удалять строки корзины можно, а вот добавление происходит только из списков
	Отказ = ИСТИНА;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ПоказатьСкрытьДерево(Команда)
	
	ВидимостьДерева = Не ВидимостьДерева;	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработкаПодбораАвторабот(Авторабота, ТекущаяСтрока=Неопределено)
	
	// поищем в корзине уже имеющийся такой товар
	МассивСтрок = ПодборАвторабот.НайтиСтроки(Новый Структура("Авторабота", Авторабота));
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		НоваяСтрока = ПодборАвторабот.Добавить();
		НоваяСтрока.Авторабота                 = Авторабота;
		НоваяСтрока.Количество                 = 1;
		
		ПодборАвтоработАвтоработаПриИзмененииНаСервере(НоваяСтрока);
		
	Иначе
		
		НоваяСтрока = МассивСтрок[0];
		НоваяСтрока.Количество = НоваяСтрока.Количество + 1;
		
		ПодборАвтоработКоличествоПриИзмененииНаСервере(НоваяСтрока);
		
	КонецЕсли;
	
	РассчитатьПодвалПодбораАвторабот();
	
	ТекущаяСтрока = ПодборАвторабот.Индекс(НоваяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПодвалПодбораАвторабот()
	
	КоличествоПодобранныхАвторабот = ПодборАвторабот.Количество();
	ПодборАвтоработИтогКоличество  = ПодборАвторабот.Итог("Количество");
	ПодборАвтоработИтогСумма       = ПодборАвторабот.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСписокПодборанныхАвторабот()
	
	ПараметрыПодбора = ПолучитьИзВременногоХранилища(ЭтотОбъект.АдресПараметрыПодбора);
	
	Если НЕ ТипЗнч(ПараметрыПодбора)=Тип("Структура") Тогда
		ПараметрыПодбора = Новый Структура();
	КонецЕсли;
	
	ТекстКолонок = "Авторабота,Количество,Нормочас,Коэффициент";
	
	ПараметрыПодбора.Вставить("ПодобранныеАвтоработы", ПоместитьВоВременноеХранилище(ПодборАвторабот.Выгрузить(,ТекстКолонок), ЭтотОбъект.УникальныйИдентификатор));
	
	Возврат ПараметрыПодбора;
	
КонецФункции

&НаКлиенте
Процедура ОтборПоНаименованиюПриИзменении(Элемент)
	
	Если ПустаяСтрока(ОтборПоНаименованию) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Наименование");
		
	КонецЕсли;
	
	НазначитьОтборПоНаименованию(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоАртикулуПриИзменении(Элемент)
	
	Если ПустаяСтрока(ОтборПоАртикулу) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Артикул");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "АртикулДляПоиска");
		Возврат;
		
	КонецЕсли;
	
			
	ИспользованиеПростыхОтборов = НЕ ПустаяСтрока(ОтборПоАртикулу);
	
	// Создание группы отборов.
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ПоПолюПоиска",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	// Отбор по артикулу.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИЛИ,
		"Артикул",
		ОтборПоАртикулу,
		ВидСравненияКомпоновкиДанных.Содержит,
		,
		ИспользованиеПростыхОтборов,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
		
		АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(ОтборПоАртикулу);
	// Отбор по наименованию.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИЛИ,
		"АртикулДляПоиска",
		АртикулДляПоиска,
		ВидСравненияКомпоновкиДанных.Содержит,
		,
		ИспользованиеПростыхОтборов,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НазначитьОтборПоНаименованию(Форма)
	
	Если ПустаяСтрока(Форма.ОтборПоНаименованию) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Наименование",
		Форма.ОтборПоНаименованию,
		ВидСравненияКомпоновкиДанных.Содержит,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);	

КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуАвтоработы(СтрокаАвтоработы)
	
	Если СтрокаАвтоработы.СпособРасчетаСтоимостиРаботы =
			Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой Тогда
		СтрокаАвтоработы.Сумма = СтрокаАвтоработы.Цена * СтрокаАвтоработы.Количество;
	Иначе
		СтрокаАвтоработы.Сумма = СтрокаАвтоработы.Цена * СтрокаАвтоработы.Количество * СтрокаАвтоработы.Коэффициент;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

//@skip-check module-unused-method
// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПанельПоиска
	
&НаСервере
Процедура ПоказатьСкрытьПравуюПанельПоискаНаСервере()
	
	ВидимостьСписка = Элементы.ПанельПоиска.Видимость; 
	Элементы.ПанельПоиска.Видимость = НЕ ВидимостьСписка;
	УстановитьКартинкуДекорацияПоказатьСкрытьПравуюПанельПоиска()
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуДекорацияПоказатьСкрытьПравуюПанельПоиска()

	ВидимостьСписка = Элементы.ПанельПоиска.Видимость; 

	Если ВидимостьСписка Тогда
		
		Элементы.ДекорацияПоказатьСкрытьПравуюПанельПоиска.Картинка = БиблиотекаКартинок.СтрелкаВправо;
		
	Иначе
		
		Элементы.ДекорацияПоказатьСкрытьПравуюПанельПоиска.Картинка = БиблиотекаКартинок.СтрелкаВлево;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
