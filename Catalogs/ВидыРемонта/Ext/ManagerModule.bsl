// Модуль менеджера справочника "Виды ремонта"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДополнительноеОборудование";
	Элемент.Код                       = "00000001";
	Элемент.Наименование              = НСтр("ru = 'Дополнительное оборудование'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ТипРемонта = Перечисления.ТипыРемонта.Платный;
	
КонецПроцедуры

// Обновим тип ремонта у вида ремонта "Комплектация автомобиля"
//
Процедура ОбновитьТипРемонтаКомплектацииАвтомобилей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыРемонта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыРемонта КАК ВидыРемонта
	|ГДЕ
	|	ВидыРемонта.Предопределенный
	|	И ВидыРемонта.ИмяПредопределенныхДанных = ""КомплектацияАвтомобиля""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	КомплектацияАвтомобиляОбъект = Выборка.Ссылка.ПолучитьОбъект();
	
	КомплектацияАвтомобиляОбъект.ТипРемонта = Перечисления.ТипыРемонта.КомплектацияАвтомобиля;
	КомплектацияАвтомобиляОбъект.ИмяПредопределенныхДанных = "";
	КомплектацияАвтомобиляОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		КомплектацияАвтомобиляОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Не удалось перезаполнить тип ремонта ""Комплектация автомобиля"" у %1'"),
				СокрЛП(Строка(КомплектацияАвтомобиляОбъект.Ссылка))
				)
			);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("ТипРемонта");
	
	ОбязательныеРеквизиты.Добавить("Автоработы.Авторабота");
	ОбязательныеРеквизиты.Добавить("Автоработы.Количество");
	
	ОбязательныеРеквизиты.Добавить("Гарантия.Контрагент");
	ОбязательныеРеквизиты.Добавить("Гарантия.ДоговорВзаиморасчетов");
	
	Если Объект.ОтправлятьУведомления Тогда
		
		ОбязательныеРеквизиты.Добавить("НастройкаУведомлений.СостояниеЗаказНаряда");
		ОбязательныеРеквизиты.Добавить("НастройкаУведомлений.ШаблонСообщения");
		
		Если ЗначениеЗаполнено(Объект.ШаблонПриЗаписиНаРемонт) Тогда
			ОбязательныеРеквизиты.Добавить("ОтправлятьЗаВремя");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбменСAudaPadWeb.ДоступенОбменСAudaPadWeb() Тогда
		ОбязательныеРеквизиты.Добавить("ТипДелаВAudaPadWeb");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты=Новый Структура();
	
	УникальныеРеквизиты.Вставить("Код");
	// Уникальные поля таблицы Гарантия
	УникальныеРеквизитыГарантия = Новый Массив;
	УникальныеРеквизитыГарантия.Добавить("Модель");
	
	
	// Уникальные поля таблицы Автоработы
	УникальныеРеквизитыАвтоработы = Новый Массив;
	УникальныеРеквизитыАвтоработы.Добавить("Авторабота");
	
	// Уникальные поля таблицы НастройкаУведомлений
	УникальныеРеквизитыУведомлений = Новый Массив;
	УникальныеРеквизитыУведомлений.Добавить("СостояниеЗаказНаряда");
	
	УникальныеРеквизиты.Вставить("Автоработы", УникальныеРеквизитыАвтоработы);
	УникальныеРеквизиты.Вставить("Гарантия", УникальныеРеквизитыГарантия);
	УникальныеРеквизиты.Вставить("НастройкаУведомлений", УникальныеРеквизитыУведомлений);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ГарантияКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов) Тогда
		Если НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда 
			// если контрагент не указан то очистим договор
			Строка.ДоговорВзаиморасчетов=Неопределено;
		Иначе
			Если Строка.ДоговорВзаиморасчетов.Владелец<>Строка.Контрагент Тогда
				Строка.ДоговорВзаиморасчетов=Неопределено;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры // ПодразделениеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ДоговорВзаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ГарантияДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	Если ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов) Тогда
		Если (Строка.ДоговорВзаиморасчетов.ВидДоговора<>Перечисления.ВидыДоговоров.Продажа) И
			(Строка.ДоговорВзаиморасчетов.ВидДоговора<>Перечисления.ВидыДоговоров.Прочее) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Гарантия: У контрагента <'")+Строка.Контрагент+НСтр("ru = '> выбран некорректный вид договора.'"));
			Строка.ДоговорВзаиморасчетов=Неопределено;             
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли