
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		УправлениеДиалогомНаСервере();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеДиалогомНаСервере();
	
	// Произведем настройку параметров отображения кнопок командной панели ;
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Гарантия");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Автоработы");
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если ИмяСобытия = "ЗаписанШаблонСообщения"
		И Параметр <> Неопределено
		И ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения")
		И Источник.ВладелецФормы = ЭтотОбъект Тогда
		
		Если Параметр.ВидШаблонаСоздания = "ШаблонДляЗаписиНаРемонт" Тогда
			Объект.ШаблонПриЗаписиНаРемонт = Параметр.ШаблонСообщения;
		ИначеЕсли Параметр.ВидШаблонаСоздания = "ШаблонДляОтменыЗаявкиНаРемонт" Тогда
			Объект.ШаблонПриОтменеЗаявки = Параметр.ШаблонСообщения;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СвязанныеРаботы.ЗаполнитьДоступностьРеквизитаВспомогательнойРаботы(Объект.Автоработы);
	
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ВидыРемонта");
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	// очистим таблицу гарантийных платильщиков если вид ремонта бесплатный
	Если Объект.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		Объект.Гарантия.Очистить();
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СвязанныеРаботы.ЗаполнитьДоступностьРеквизитаВспомогательнойРаботы(Объект.Автоработы);
	
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипРемонтаПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаСебестоимостьПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ГарантияКонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Гарантия.НайтиПоИдентификатору(Элементы.Гарантия.ТекущаяСтрока);
	Справочники.ВидыРемонта.ГарантияКонтрагентПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ГарантияКонтрагентПриИзменении(Элемент)

	ГарантияКонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ГарантияДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Гарантия.НайтиПоИдентификатору(Элементы.Гарантия.ТекущаяСтрока);
	Справочники.ВидыРемонта.ГарантияДоговорВзаиморасчетовПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ГарантияДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ГарантияДоговорВзаиморасчетовПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Функция СтруктураОтбораДоговораВзаиморасчетовНаСервере(Договор, Контрагент)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Владелец", Контрагент);
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.Продажа);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.Прочее);
	Отбор.Вставить("ВидДоговора", СписокВидовДоговоров);
	
	Возврат Отбор;
	
КонецФункции 


&НаКлиенте
Процедура ГарантияДоговорВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаГарантии = Элементы.Гарантия.ТекущиеДанные;
	Контрагент = СтрокаГарантии.Контрагент;
	Договор = СтрокаГарантии.ДоговорВзаиморасчетов;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ПараметрыФормы = Новый Структура;
		Отбор = СтруктураОтбораДоговораВзаиморасчетовНаСервере(Договор, Контрагент);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока");
		ОткрытьФорму(
			"Справочник.ДоговорыВзаиморасчетов.ФормаВыбора", 
			ПараметрыФормы,
			Элемент,
			ЭтаФорма.УникальныйИдентификатор
		);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОтправлятьУведомленияПриИзмененииНаСервере()
	
	// Проверим настройку СМС
	Если Объект.ОтправлятьУведомления Тогда
		
		НастройкиОтправкиSMS = ОтправкаSMS.НастройкиОтправкиSMS();
		
		Если НЕ ЗначениеЗаполнено(НастройкиОтправкиSMS.Провайдер)
			ИЛИ НЕ ЗначениеЗаполнено(НастройкиОтправкиSMS.Логин)
			ИЛИ НЕ ЗначениеЗаполнено(НастройкиОтправкиSMS.Пароль) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Перед использованием отправки уведомлений проверьте настройки отправки SMS.'"),
				Объект.ССылка);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтправлятьУведомленияПриИзменении(Элемент)
	
	Если (НЕ Объект.ОтправлятьУведомления И ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		
		ПоказатьПредупреждение(
			,
			СтрШаблон(НСтр("ru = '%1 %2.'"),
				"При отмене уведомлений шаблоны удалятся, что повлечет за собой отказ отправки смс,",
				"стоящих в очереди на отправку"));
		
	КонецЕсли;
	
	ОтправлятьУведомленияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ШаблонПриЗаписиНаРемонтПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонПриЗаписиНаРемонт)
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.ОтправлятьУведомления Тогда
		
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Очистка шаблона, повлечет за собой отказ отправки смс, стоящих в очереди на отправку.'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработы

&НаКлиенте
Процедура РаботыАвтоработаПриИзменении(Элемент)
	
	СвязанныеРаботыКлиент.ОбработатьИзменениеСвязаннойРаботы(Элементы.Автоработы.ТекущиеДанные, "Авторабота");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьШаблонПриЗаписиЗаявки(Команда)
	
	// Перенесем параметры для создания шаблона
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("ПредназначенДляSMS", Истина);
	ПараметрыОснования.Вставить("ПредназначенДляВводаНаОсновании", Истина);
	ПараметрыОснования.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Документ.ЗаявкаНаРемонт");
	ПараметрыОснования.Вставить("ТолькоДляАвтора", Ложь);
	ПараметрыОснования.Вставить("Наименование", НСтр("ru = 'Шаблон при начале работ'"));
	ПараметрыОснования.Вставить("ТипШаблона", "SMS");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", ПараметрыОснования);
	ПараметрыФормы.Вставить("ПолноеИмяТипаОснования", "Документ.ЗаявкаНаРемонт");
	ПараметрыФормы.Вставить("ВидШаблонаСоздания", "ШаблонДляЗаписиНаРемонт");
	
	ОткрытьФорму(
		"Справочник.ШаблоныСообщений.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьШаблонПриОтменеЗаявки(Команда)
	
	// Перенесем параметры для создания шаблона
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("ПредназначенДляSMS", Истина);
	ПараметрыОснования.Вставить("ПредназначенДляВводаНаОсновании", Истина);
	ПараметрыОснования.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", "Документ.ЗаявкаНаРемонт");
	ПараметрыОснования.Вставить("ТолькоДляАвтора", Ложь);
	ПараметрыОснования.Вставить("Наименование", НСтр("ru = 'Шаблон при отмене заявки на ремонт'"));
	ПараметрыОснования.Вставить("ТипШаблона", "SMS");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", ПараметрыОснования);
	ПараметрыФормы.Вставить("ПолноеИмяТипаОснования", "Документ.ЗаявкаНаРемонт");
	ПараметрыФормы.Вставить("ВидШаблонаСоздания", "ШаблонДляОтменыЗаявкиНаРемонт");
	
	ОткрытьФорму(
		"Справочник.ШаблоныСообщений.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект);
	
КонецПроцедуры 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаКлиенте
Процедура СписаниеТоваровПоСебестоимостиПриИзменении(Элемент)
	
	Элементы.СписаниеТоваровПоСебестоимостиВключатьНДС.Доступность = Объект.СписаниеТоваровПоСебестоимости;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Если Объект.ТипРемонта = Перечисления.ТипыРемонта.Платный Тогда
		Элементы.НаСебестоимость.Доступность = Ложь;
		Элементы.Гарантия.Доступность = Истина;
		Элементы.СтатьяДоходаДетали.Доступность = Истина;
		Элементы.СтатьяДоходаРаботы.Доступность = Истина;
	Иначе
		Элементы.Гарантия.Доступность = Ложь;
		Если Объект.НаСебестоимость Тогда
			Элементы.СтатьяДоходаДетали.Доступность = Истина;
			Элементы.СтатьяДоходаРаботы.Доступность = Истина;
		Иначе
			Элементы.СтатьяДоходаДетали.Доступность = Ложь;
			Элементы.СтатьяДоходаРаботы.Доступность = Ложь;
		КонецЕсли; 
	КонецЕсли;
	Элементы.НаСебестоимость.Доступность = ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон")
		И Объект.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный;
	
	// Получим значение права объекта
	Элементы.СписаниеТоваровПоСебестоимости.Доступность = ПраваИНастройкиПользователя.Значение("СписаниеТоваровПоСебестоимости", Объект);
	Элементы.СписаниеТоваровПоСебестоимостиВключатьНДС.Доступность = Элементы.СписаниеТоваровПоСебестоимости.Доступность И Объект.СписаниеТоваровПоСебестоимости;						
	
	Элементы.НастройкиУведомлений.Доступность = Объект.ОтправлятьУведомления;
	Элементы.ТипДелаВAudaPadWeb.Видимость = ОбменСAudaPadWeb.ДоступенОбменСAudaPadWeb();
	
КонецПроцедуры // УправлениеДиалогом()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// РаботыВспомогательнаяАвторабота - Доступность 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаботыВспомогательнаяАвторабота.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 
				= Новый ПолеКомпоновкиДанных("Объект.Автоработы.ДоступностьРеквизитаВспомогательнойРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаботыВспомогательнаяАвторабота.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 
				= Новый ПолеКомпоновкиДанных("Объект.Автоработы.ДоступностьРеквизитаВспомогательнойРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

