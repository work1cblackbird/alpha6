// Модуль менеджера справочника "ХозОперации"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура заполнения предопределенных элементов справочника
//
Процедура ВыполнитьНачальноеЗаполнение() Экспорт
	
	Для Каждого ТекущийМакет Из Метаданные.Справочники.ХозОперации.Макеты Цикл
		Если СтрНайти(ТекущийМакет.Имя, "НачальноеЗаполнение") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстXML = Справочники.ХозОперации.ПолучитьМакет(ТекущийМакет.Имя);
		
		СтруктураХозОпераций = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстXML.ПолучитьТекст());
		
		Если НЕ ТипЗнч(СтруктураХозОпераций) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекОперация Из СтруктураХозОпераций Цикл
			
			ОперацияОбъект = Справочники.ХозОперации[ТекОперация.Ключ].ПолучитьОбъект();
			
			РеквизитыСправочника = ТекОперация.Значение;
			
			ЗаполнитьЗначенияСвойств(ОперацияОбъект, РеквизитыСправочника);
			// Сравниваем с макетом, нсли не находим - добавляем
			Если РеквизитыСправочника.Свойство("Таблицы") Тогда
				ТаблицыСправочника = РеквизитыСправочника.Таблицы;
				Если ТаблицыСправочника.Свойство("ВидыНоменклатуры") Тогда
					Для Каждого ТекСтрока Из ТаблицыСправочника.ВидыНоменклатуры Цикл
						СтруктураПоиска = Новый Структура("ВидНоменклатуры", Текстрока.ВидНоменклатуры);
						Если ОперацияОбъект.ВидыНоменклатуры.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
							НоваяСтрока = ОперацияОбъект.ВидыНоменклатуры.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ТаблицыСправочника.Свойство("ВидыДоговоров") Тогда
					Для Каждого ТекСтрока Из ТаблицыСправочника.ВидыДоговоров Цикл
						СтруктураПоиска = Новый Структура("ВидДоговора", Текстрока.ВидДоговора);
						Если ОперацияОбъект.ВидыДоговоров.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
							НоваяСтрока = ОперацияОбъект.ВидыДоговоров.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ОперацияОбъект.ОбменДанными.Загрузка = Истина;
			ОперацияОбъект.Записать();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьНачальноеЗаполнение()

// Составляет список возможных хоз. операций для объекта.
//
// Параметры:
//  Объект - ДокументСсылка - объект, для которого выполняется операция.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.ХозОперации - возможные хоз. операции объекта
//
Функция ПолучитьВозможныеХозОперации(Объект) Экспорт
	
	СписокИсключений = Новый СписокЗначений;
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	ИдентификаторДокумента = "Документ_" + МетаданныеОбъекта.Имя;
	
	// Сюда заходим только если у нас есть объект/ссылка и есть реквизит "Склад"
	// TODO: Убрать частности из данной процедуры, а еще лучше вынести в модули менеджера
	Если
		Объект <> Документы[МетаданныеОбъекта.Имя]
		И МетаданныеОбъекта.Реквизиты.Найти("СкладКомпании") <> Неопределено
	Тогда
		
		ЗначениеУчетнойПолитики = ПолучитьСтратегиюСписанияПоДатам(Объект.СкладКомпании, Объект.Организация, Объект.Дата);
		
		Если ЗначениеУчетнойПолитики = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
			
			СписокИсключений.Добавить(Справочники.ХозОперации.ПоступлениеТоваровКомиссия);
			СписокИсключений.Добавить(Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// программно проверяем доступность хоз. операций для документа "Корректировка"
	Если
		ТипЗнч(Объект) = Тип("ДокументОбъект.КорректировкаДвижений")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.КорректировкаДвижений")
	Тогда
	
		Если НЕ ПравоДоступа("Изменение", Метаданные.Документы.КорректировкаДвижений) Тогда
			
			СписокИсключений.Добавить(Справочники.ХозОперации.КорректировкаДвижений);
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Метаданные.Документы.КорректировкаДвижений) Тогда
			
			СписокИсключений.Добавить(Справочники.ХозОперации.Сторно);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.Выписка") Тогда
		
		СписокИсключений.Добавить(Справочники.ХозОперации.БанковскаяВыписка);
		
	КонецЕсли;
	
	// программно проверяем доступность хоз. операций для документа "Переоценка"
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.Переоценка") ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.Переоценка") Тогда
		
		Если НЕ Константы.ИспользоватьРозничнаяТорговля.Получить() Тогда
			
			СписокИсключений.Добавить(Справочники.ХозОперации.ПереоценкаТоваровВРознице);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураВыданный")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураВыданный")
	Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Хозоперация)
			ИЛИ Объект.Хозоперация = Справочники.ХозОперации.СчетФактураВыданный
		Тогда
			СписокИсключений.Добавить(Справочники.ХозОперации.СчетФактураВыданныйКорректировка);
		Иначе
			СписокИсключений.Добавить(Справочники.ХозОперации.СчетФактураВыданный);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураПолученный")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураПолученный")
	Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Хозоперация)
			ИЛИ Объект.Хозоперация = Справочники.ХозОперации.СчетФактураПолученный
		Тогда
			СписокИсключений.Добавить(Справочники.ХозОперации.СчетФактураПолученныйКорректировка);
		Иначе
			СписокИсключений.Добавить(Справочники.ХозОперации.СчетФактураПолученный);
		КонецЕсли;
	КонецЕсли;
	
	СписокХозОпераций = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозОперации.ИмяПредопределенныхДанных КАК Имя,
	|	ХозОперации.Наименование
	|ИЗ
	|	Справочник.ХозОперации КАК ХозОперации
	|ГДЕ
	|	ХозОперации.Родитель = &Родитель
	|	И (НЕ ХозОперации.Ссылка В (&СписокИсключений))
	|	И ХозОперации.ПометкаУдаления = ЛОЖЬ
	|	И ХозОперации.ЭтоГруппа = ЛОЖЬ
	|	%ОтборПоКомиссии%
	|УПОРЯДОЧИТЬ ПО
	|	ХозОперации.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("Родитель",         Справочники.ХозОперации[ИдентификаторДокумента]);
	Запрос.УстановитьПараметр("СписокИсключений", СписокИсключений);
	
	// Отбор по комиссии - если опция ИспользоватьКомиссионнаяТорговля выключена, то
	// выбираем только те элементы, у которых флаг "Комиссия" установлен в ЛОЖЬ
	// иначе отбор по комиссии не производится.
	ОтборПоКомиссии = "";
	
	Если НЕ Константы.ИспользоватьКомиссионнаяТорговля.Получить() Тогда
		
		ОтборПоКомиссии = " И ХозОперации.Комиссия = ЛОЖЬ ";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоКомиссии%", ОтборПоКомиссии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокХозОпераций.Добавить(Выборка.Имя, Выборка.Наименование);
		
	КонецЦикла;
	
	Если СписокХозОпераций.Количество()> 0 Тогда
		
		СписокХозОпераций[0].Пометка = Истина;
		
	КонецЕсли;
	
	Возврат СписокХозОпераций;
	
КонецФункции // ПолучитьВозможныеХозОперации()

// Возвращает хоз. операцию по умолчанию для заданного объекта
//
// Параметры:
//  Объект - ДокументСсылка - объект, для которого выполняется операция.
//
// Возвращаемое значение:
//  СправочникСсылка.ХозОперации - хоз. операция по умолчанию
//
Функция ПолучитьХозОперациюПоУмолчанию(Объект) Экспорт
	
	СписокХозОпераций = ПолучитьВозможныеХозОперации(Объект);
	Если СписокХозОпераций.Количество()> 0 Тогда
		Результат = Справочники.ХозОперации[СписокХозОпераций[0].Значение];
	Иначе
		Результат = Справочники.ХозОперации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьХозОперациюПоУмолчанию()

// Функция для проверки соответствия ХозОперации объекта из списка доступных ХозОпераций для данного объекта.
//
// Параметры:
//  Объект - ДокументСсылка - объект, для которого выполняется операция.
//
// Возвращаемое значение:
//  Булево - Истина, если соответствует.
//
Функция ПолучитьСоответствиеХозОперацииОбъекта(Объект) Экспорт
	
	// Получим список доступных ХозОпераций для данного объекта
	СписокДоступныхХозОпераций = ПолучитьВозможныеХозОперации(Объект);
	
	Возврат НЕ СписокДоступныхХозОпераций.НайтиПоЗначению(Объект.ХозОперация.ИмяПредопределенныхДанных) = Неопределено;
	
КонецФункции // ПолучитьСоответствиеХозОперацииОбъекта()

// Функция для проверки соответствия ХозОперации и вида операции объекта.
//
// Параметры:
//  ХозОперация - СправочникСсылка.ХозОперации - хоз. операция;
//  ВидОперации - ПеречислениеСсылка.ВидыОперацийДоговора - вид операции.
//
// Возвращаемое значение:
//  Булево - Истина, если соответствует
//
Функция СоответствуетВидуОперации(ХозОперация, ВидОперации) Экспорт
	
	Возврат ХозОперация.ВидОперации = ВидОперации;
	
КонецФункции // СоответствуетВидуОперации()

// Возвращает доступные виды номенклатуры для заданной хоз. операции.
//
// Параметры:
//  ХозОперация -  СправочникСсылка.ХозОперации - объект, для которого выполняется операция.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыНоменклатуры - доступные виды номенклатуры.
//
Функция ПолучитьВидыНоменклатуры(ХозОперация) Экспорт
	
	ВидыНоменклатуры = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозОперацииВидыНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.ХозОперации.ВидыНоменклатуры КАК ХозОперацииВидыНоменклатуры
	|ГДЕ
	|	ХозОперацииВидыНоменклатуры.Ссылка = &ХозОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозОперацииВидыНоменклатуры.НомерСтроки";
	
	Запрос.УстановитьПараметр("ХозОперация", ХозОперация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыНоменклатуры.Добавить(Выборка.ВидНоменклатуры);
	КонецЦикла;
	
	Возврат ВидыНоменклатуры;
	
КонецФункции // ПолучитьВидыНоменклатуры()

// Возвращает доступные виды договоров для заданной хоз. операции.
//
// Параметры:
//  ХозОперация -  СправочникСсылка.ХозОперации - объект, для которого выполняется операция.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыДоговоров - доступные виды договоров.
//
Функция ПолучитьВидыДоговоров(ХозОперация) Экспорт
	
	ВидыДоговоров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозОперацииВидыДоговоров.ВидДоговора
	|ИЗ
	|	Справочник.ХозОперации.ВидыДоговоров КАК ХозОперацииВидыДоговоров
	|ГДЕ
	|	ХозОперацииВидыДоговоров.Ссылка = &ХозОперация
	|УПОРЯДОЧИТЬ ПО
	|	ХозОперацииВидыДоговоров.НомерСтроки";
	
	Запрос.УстановитьПараметр("ХозОперация", ХозОперация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыДоговоров.Добавить(Выборка.ВидДоговора);
	КонецЦикла;
	
	Возврат ВидыДоговоров;
	
КонецФункции // ПолучитьВидыДоговоров()

// Возвращает первый доступный вид договора для заданной хоз. операции.
//
// Параметры:
//  ХозОперация -  СправочникСсылка.ХозОперации - объект, для которого выполняется операция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыДоговоров - первый доступный вид договора.
//
Функция ПолучитьВидДоговора(ХозОперация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ХозОперацииВидыДоговоров.ВидДоговора КАК ВидДоговора
	|ИЗ
	|	Справочник.ХозОперации.ВидыДоговоров КАК ХозОперацииВидыДоговоров
	|ГДЕ
	|	ХозОперацииВидыДоговоров.Ссылка = &ХозОперация
	|УПОРЯДОЧИТЬ ПО
	|	ХозОперацииВидыДоговоров.НомерСтроки";
	
	Запрос.УстановитьПараметр("ХозОперация", ХозОперация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВидДоговора = Выборка.ВидДоговора;
	Иначе
		ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
	КонецЕсли;
	
	Возврат ВидДоговора;
	
КонецФункции // ПолучитьВидДоговора()

// Функция для проверки соответствия договора и хоз. операции.
//
// Параметры:
//  ХозОперация - СправочникСсылка.ХозОперации - хоз. операция объекта;
//  ДоговорВзаиморасчетов - СправочникСсылка.ДоговорыВзаиморасчетов - проверяемый договор.
//
// Возвращаемое значение:
//  Булево - Истина, если соответствует.
//
Функция ДоговорСоответствуетХозОперации(ХозОперация, ДоговорВзаиморасчетов) Экспорт
	
	ВидыДоговоров = ПолучитьВидыДоговоров(ХозОперация);
	
	Возврат (НЕ ВидыДоговоров.Найти(ДоговорВзаиморасчетов.ВидДоговора) = Неопределено);
	
КонецФункции // ДоговорСоответствуетХозОперации()

// Возвращает основной тип цен по хоз. операции.
//
// Параметры:
//  ХозОперация -  СправочникСсылка.ХозОперации - объект, для которого выполняется операция.
//
// Возвращаемое значение:
//  Справочники.ТипыЦен - основной тип цен для хоз. операции.
//
Функция ПолучитьОсновнойТипЦен(ХозОперация) Экспорт
	
	Если ХозОперация.ВидОперации = Перечисления.ВидыОперацийДоговора.Покупка Тогда
		ТипЦен =  ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупки");
	ИначеЕсли ХозОперация.ВидОперации = Перечисления.ВидыОперацийДоговора.Продажа Тогда
		ТипЦен =  ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи");
	Иначе
		ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупки");
	КонецЕсли;
	
	Возврат ТипЦен;
	
КонецФункции // ПолучитьОсновнойТипЦен()

// Возвращает основной тип цен по договору взаиморасчетов.
//
// Параметры:
//  ХозОперация -  СправочникСсылка.ХозОперации - объект, для которого выполняется операция.
//  Договор - СправочникСсылка.ДоговорыВзаиморасчетов - договор.
//
// Возвращаемое значение:
//  Справочники.ТипыЦен - тип цен договора.
//
Функция ПолучитьОсновнойТипЦенДоговора(ХозОперация, Договор) Экспорт
	
	ТипЦен = Договор.ТипЦен;
	
	Возврат ТипЦен;
	
КонецФункции // ПолучитьОсновнойТипЦенДоговора()

// Используется в начальной обработке заполнения. возвращает основного контрагента по хоз. операции.
//
// Параметры:
//  ХозОперация -  СправочникСсылка.ХозОперации - объект, для которого выполняется операция.
//
// Возвращаемое значение:
//  СрпавочникСсылка.Контрагенты, Неопределено - основной контрагент.
//
Функция ПолучитьОсновногоКонтрагента(ХозОперация) Экспорт
	
	Если ХозОперация.ВидОперации = Перечисления.ВидыОперацийДоговора.Покупка Тогда
		ОсновнойКонтрагент = ПраваИНастройкиПользователя.Значение("ОсновнойПоставщик");
	ИначеЕсли ХозОперация.ВидОперации = Перечисления.ВидыОперацийДоговора.Продажа Тогда
		ОсновнойКонтрагент = ПраваИНастройкиПользователя.Значение("ОсновнойПокупатель");
	Иначе
		ОсновнойКонтрагент = Неопределено;
	КонецЕсли;
	
	Возврат ОсновнойКонтрагент;
	
КонецФункции // ПолучитьОсновногоКонтрагента()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	
	// Обработаем в зависимости от вида элемента
	Если НЕ Объект.ЭтоГруппа Тогда
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("ВидОперации");
	
	ОбязательныеРеквизиты.Добавить("ВидыНоменклатуры.ВидНоменклатуры");
	ОбязательныеРеквизиты.Добавить("ВидыДоговоров.ВидДоговора");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли