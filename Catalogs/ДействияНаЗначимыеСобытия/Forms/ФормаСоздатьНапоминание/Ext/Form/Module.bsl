///////////////////////////////////////////////////////////////////////////////
// Модуль формы элемента справочника "Действия на значимые события"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
	Если Параметры.ДополнительныеПараметры.Свойство("Источник") Тогда
		Источник = Параметры.ДополнительныеПараметры.Источник;
		СсылочныйТипИсточника = НЕ (Источник.ЗначениеПустойСсылки = Неопределено);
	КонецЕсли;
	
	Если Параметры.Свойство("ВидДействия") Тогда
		Объект.ВидДействия = Параметры.ВидДействия;
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Справочники.ДействияНаЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект);
		КонецЕсли;
	КонецЕсли;
	
	ТипОбъектаУст = Объект.ТипОбъекта;
		
	СписокВидовПравил = Новый СписокЗначений;
	Элементы.ПолучателиНапоминанияВидПравила.СписокВыбора.Очистить();
	Элементы.ПолучателиНапоминанияВидПравила.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыПравил.ТочноеЗначение")
	); 
	
	Если СсылочныйТипИсточника Тогда
		Элементы.ПолучателиНапоминанияВидПравила.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ВидыПравил.РеквизитОбъектаИсточника")
		);	
	КонецЕсли; 
	
	Элементы.ПолучателиНапоминанияВидПравила.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыПравил.ПроизвольныйКод")
	);
	
	Если Объект.ИнтервалВремениНапоминания > 0 Тогда
		
		ИнтервалВремениСтрокойПредставление = НапоминанияПользователяАльфаАвто.ПредставлениеВремени(Объект.ИнтервалВремениНапоминания);
		Для Каждого ЭлементСписка Из Элементы.ИнтервалВремениОтносительноИсточника.Списоквыбора Цикл
			Если ЭлементСписка.Представление = ИнтервалВремениСтрокойПредставление Тогда
				 ИнтервалВремениСтрокой = ЭлементСписка.Значение;
				 Прервать;
			 КонецЕсли;	
		 КонецЦикла;
		
	КонецЕсли;
	
	НастройкиПодсистемы = НапоминанияПользователяСлужебный.НастройкиПодсистемы();
	
	Элементы.ВариантПериодичности.СписокВыбора.Очистить();
	СписокРасписаний = НастройкиПодсистемы.Расписания;
	Для Каждого СтандартноеРасписание Из СписокРасписаний Цикл
		
		Элементы.ВариантПериодичности.СписокВыбора.Добавить(СтандартноеРасписание.Ключ, СтандартноеРасписание.Ключ);
	КонецЦикла;
	Элементы.ВариантПериодичности.СписокВыбора.Добавить("", НСтр("ru = 'по заданному расписанию...'"));
	
	ОпределитьВыбранныйВариантПериодичности();
	
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// Настроим командную панель формы
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПолучателиНапоминания");
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	Расписание = ТекущийОбъект.Расписание.Получить();

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Если ТекущийОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя 
		 ИЛИ ТекущийОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени
		 //ИЛИ ТекущийОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета
		 Тогда
		ТекущийОбъект.ДатаНапоминания = ТекущийОбъект.ВремяСобытия;
	ИначеЕсли ТекущийОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.Периодически Тогда
		БлижайшееВремяНапоминания = НапоминанияПользователяСлужебный.ПолучитьБлижайшуюДатуСобытияПоРасписанию(Расписание);
		Если БлижайшееВремяНапоминания = Неопределено Тогда
			БлижайшееВремяНапоминания = ТекущаяДатаСеанса();
		КонецЕсли;
		ТекущийОбъект.ВремяСобытия = БлижайшееВремяНапоминания;
		ТекущийОбъект.ДатаНапоминания = ТекущийОбъект.ВремяСобытия;
	КонецЕсли;
	
	Если ТекущийОбъект.СпособУстановкиВремениНапоминания <> Перечисления.СпособыУстановкиВремениНапоминания.Периодически Тогда
		Расписание = Неопределено;
	КонецЕсли;
	
	ТекущийОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
	
	Если Элементы.ПроизвольнаяТемаПисьма.Пометка Тогда
		Объект.СодержаниеПроизвольныйКод = Объект.Содержание;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Справочник.ДействияНаЗначимыеСобытия.Форма.РедакторВыражений" Тогда 
		Объект.СодержаниеПроизвольныйКод = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура НаименованиеНачалоВыбораНаСервере(ПараметрыДействия = Неопределено)
	
	Справочники.ДействияНаЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСформироватьНаименование", 
									ЭтотОбъект, "СформироватьНаименование");
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Сформировать новое наименование?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		// Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиНапоминанияВидПравилаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолучателиНапоминания.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.ВидыПравил.ТочноеЗначение") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.Значение));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов); 
		ТекущиеДанные.Значение = Неопределено;
		ТекущиеДанные.Значение = ОписаниеТипа.ПривестиЗначение();
	Иначе
		ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ТекущиеДанные.ПутьКДанным   = "";
	ТекущиеДанные.ПроизвольныйКод = "";
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиНапоминанияЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПолучателиНапоминания.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.ВидыПравил.ТочноеЗначение") Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов); 
		ТекущиеДанные.Значение = Неопределено;
		ТекущиеДанные.Значение = ОписаниеТипа.ПривестиЗначение();
		
	ИначеЕсли ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.ВидыПравил.ПроизвольныйКод") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Сформируем параметры открытия
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("Текст", ?(ЗначениеЗаполнено(ТекущиеДанные.ПроизвольныйКод), 
								ТекущиеДанные.ПроизвольныйКод, "Получатели"));
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму("Справочник.ДействияНаЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия, 
												Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.ВидыПравил.РеквизитОбъектаИсточника") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Сформируем параметры открытия
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Источник", Источник);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму("Справочник.ДействияНаЗначимыеСобытия.Форма.ВыборРеквизитаОбъекта", ПараметрыОткрытия, 
												Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиНапоминанияЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПолучателиНапоминания.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.ВидыПравил.ПроизвольныйКод") Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.ПроизвольныйКод = ВыбранноеЗначение;
		ТекущиеДанные.Значение = "<" + НСтр("ru = 'Произвольное выражение'") + ">";
		ТекущиеДанные.ПутьКДанным = "";
		
	ИначеЕсли ТекущиеДанные.ВидПравила = ПредопределенноеЗначение("Перечисление.ВидыПравил.РеквизитОбъектаИсточника") Тогда
			
		СтандартнаяОбработка = Ложь;
		
		// проверим соответствие типов
		Если НЕ ВыбранноеЗначение.ТипМетаданного.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выбранный реквизит не является ссылкой на элемент справочника ""Пользователи"".'"));
			Возврат;
		КонецЕсли;
				
		ТекущиеДанные.Значение = ВыбранноеЗначение.Поле + " (Владелец)";
		ТекущиеДанные.ПутьКДанным = ВыбранноеЗначение.ИмяМетаданного;
		ТекущиеДанные.ПроизвольныйКод = "";
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВариантПериодичностиПриИзменении(Элемент)
	
	ПриИзмененииРасписания();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВариантПериодичностиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриИзмененииРасписания();
	
КонецПроцедуры 

&НаКлиенте
Процедура СпособУстановкиВремениНапоминанияПриИзменении(Элемент)
	
	Если НЕ СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
		Объект.ДатаНапоминания = Дата(1, 1, 1);	
	КонецЕсли; 
	
	Если Объект.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
		ЗаполнитьСписокВремени();	
	КонецЕсли;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗаполнитьСписокВремени();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВремяПриИзменении(Элемент)
	
	Объект.ВремяСобытия = НачалоМинуты(Объект.ВремяСобытия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаНапоминанияПроизвольныйКодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Текст", ?(ЗначениеЗаполнено(Объект.ДатаНапоминанияПроизвольныйКод), Объект.ДатаНапоминанияПроизвольныйКод, "ДатаНапоминания"));
	
	// Получаем форму, производим ее настройку и открытие
	ОткрытьФорму("Справочник.ДействияНаЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаНапоминанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		ВывестиСообщение(НСтр("ru='Выберите сначала источник.'"));
		Возврат;
	КонецЕсли;
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Источник", Источник);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	// Получаем форму, производим ее настройку и открытие
	ОткрытьФорму("Справочник.ДействияНаЗначимыеСобытия.Форма.ВыборРеквизитаОбъекта", ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаНапоминанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// проверим соответствие типов
	Если НЕ ВыбранноеЗначение.ТипМетаданного.СодержитТип(Тип("Дата")) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выбранный реквизит не является датой.'"));
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНапоминания = ВыбранноеЗначение.Поле + " (Владелец)";
	Объект.ДатаНапоминанияПутьКДанным = ВыбранноеЗначение.ИмяМетаданного;
	Объект.ДатаНапоминанияПроизвольныйКод = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНапоминанияПроизвольныйКодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.ДатаНапоминанияПроизвольныйКод = ВыбранноеЗначение;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииРасписания()
	
	ПользовательскаяНастройка = ПустаяСтрока(ВариантПериодичности);
	Если ПользовательскаяНастройка Тогда
		ОткрытьДиалогНастройкиРасписания();
	Иначе
		СтандартныеРасписания = НастройкиПодсистемы.Расписания;
		Расписание = СтандартныеРасписания[ВариантПериодичности];
	КонецЕсли;
	ОпределитьВыбранныйВариантПериодичности();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииИнтервалаВремени(Элемент)
	
	Объект.ИнтервалВремениНапоминания =
		НапоминанияПользователяКлиент.ПолучитьИнтервалВремениИзСтроки(ИнтервалВремениСтрокой);
		
	Если Объект.ИнтервалВремениНапоминания <= 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Интервал времени не определен'"), , "ИнтервалВремениСтрокой");
		
	КонецЕсли;
	
КонецПроцедуры 
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ПроизвольнаяТемаПисьмаНаСервере()
	
	Объект.Содержание = Справочники.ДействияНаЗначимыеСобытия.ОчиститьСодержимоеРедактора("Содержание");
	
КонецПроцедуры // ПроизвольнаяТемаПисьмаНаСервере()

&НаКлиенте
Процедура ПроизвольнаяТемаПисьма(Команда)

	Если ПустаяСтрока(Объект.Содержание) Тогда
		ПроизвольнаяТемаПисьмаНаСервере();
	КонецЕсли;

	Элементы.РедакторВыражений.Видимость = Истина;
	Элементы.ГруппаВидТекста.Заголовок = НСтр("ru = 'Произвольный код'");
	Элементы.ПроизвольнаяТемаПисьма.Пометка = Истина;
	Элементы.ТочнаяТемаПисьма.Пометка = Ложь;
	Объект.Содержание = "<" + НСтр("ru = 'Произвольный код'") + ">";

	Элементы.Содержание.Видимость = Ложь;
	Элементы.СодержаниеПроизвольныйКод.Видимость = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТочнаяТемаПисьма(Команда)
	
	Элементы.РедакторВыражений.Видимость = Ложь;
	Элементы.ГруппаВидТекста.Заголовок = НСтр("ru = 'Точное значение'");
	Элементы.ПроизвольнаяТемаПисьма.Пометка = Ложь;
	Элементы.ТочнаяТемаПисьма.Пометка = Истина;
	Объект.Содержание = Объект.СодержаниеПроизвольныйКод;
	Объект.СодержаниеПроизвольныйКод = "";
	
	Элементы.Содержание.Видимость = Истина;
	Элементы.СодержаниеПроизвольныйКод.Видимость = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура РедакторВыражений(Команда)
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Текст", ?(ЗначениеЗаполнено(Объект.СодержаниеПроизвольныйКод), Объект.СодержаниеПроизвольныйКод, "Содержание"));
	                                                                                     
	// Получаем форму, производим ее настройку и открытие
	ОткрытьФорму("Справочник.ДействияНаЗначимыеСобытия.Форма.РедакторВыражений", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // РедакторВыражений()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьДиалогНастройкиРасписания()
	
	Если Расписание = Неопределено Тогда 
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораДней = 1;
	КонецЕсли;
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДиалогНастройкиРасписанияЗавершение", ЭтотОбъект);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры // ОткрытьДиалогНастройкиРасписания()

&НаКлиенте
Процедура ОткрытьДиалогНастройкиРасписанияЗавершение(ВыбранноеРасписание, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеРасписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Расписание = ВыбранноеРасписание;
	Если Не РасписаниеСоответствуетТребованиям(Расписание) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Периодичность в течение дня не поддерживается, соответствующие настройки очищены.'"));
	КонецЕсли;
	НормализоватьРасписание(Расписание);
	ОпределитьВыбранныйВариантПериодичности();
	
КонецПроцедуры // ОткрытьДиалогНастройкиРасписанияЗавершение()

&НаКлиенте
Функция РасписаниеСоответствуетТребованиям(ПроверяемоеРасписание)
	
	Если ПроверяемоеРасписание.ПериодПовтораВТечениеДня > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого РасписаниеДня Из ПроверяемоеРасписание.ДетальныеРасписанияДня Цикл
		Если РасписаниеДня.ПериодПовтораВТечениеДня > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // РасписаниеСоответствуетТребованиям()

&НаСервере
Процедура ОпределитьВыбранныйВариантПериодичности()
	
	СтандартныеРасписания = НастройкиПодсистемы.Расписания;
	
	Если Расписание = Неопределено Тогда
		ВариантПериодичности = Элементы.ВариантПериодичности.СписокВыбора.Получить(0).Значение;
		Расписание = СтандартныеРасписания[ВариантПериодичности];
	Иначе
		ВариантПериодичности = ПолучитьКлючПоЗначениюВСоответствии(СтандартныеРасписания, Расписание);
	КонецЕсли;
	
	Элементы.ВариантПериодичности.КнопкаОткрытия = ПустаяСтрока(ВариантПериодичности);
	Элементы.ВариантПериодичности.Подсказка = Расписание;
	
КонецПроцедуры // ОпределитьВыбранныйВариантПериодичности()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКлючПоЗначениюВСоответствии(Соответствие, Значение)
	
	Результат = Неопределено;
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если ТипЗнч(Значение) = Тип("РасписаниеРегламентногоЗадания") Тогда
			Если ОбщегоНазначенияКлиентСервер.РасписанияОдинаковые(КлючИЗначение.Значение, Значение) Тогда
		    	Возврат КлючИЗначение.Ключ;
			КонецЕсли;
		Иначе
			Если КлючИЗначение.Значение = Значение Тогда
				Возврат КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции // ПолучитьКлючПоЗначениюВСоответствии()

&НаКлиенте
Процедура НормализоватьРасписание(НормализуемоеРасписание)
	
	НормализуемоеРасписание.ВремяКонца = '000101010000';
	НормализуемоеРасписание.ВремяЗавершения =  НормализуемоеРасписание.ВремяКонца;
	НормализуемоеРасписание.ПериодПовтораВТечениеДня = 0;
	НормализуемоеРасписание.ПаузаПовтора = 0;
	НормализуемоеРасписание.ИнтервалЗавершения = 0;
	Для Каждого РасписаниеДня Из НормализуемоеРасписание.ДетальныеРасписанияДня Цикл
		РасписаниеДня.ВремяКонца = '000101010000';
		РасписаниеДня.ВремяЗавершения =  РасписаниеДня.ВремяКонца;
		РасписаниеДня.ПериодПовтораВТечениеДня = 0;
		РасписаниеДня.ПаузаПовтора = 0;
		РасписаниеДня.ИнтервалЗавершения = 0;
	КонецЦикла;
	
КонецПроцедуры // НормализоватьРасписание()

&НаКлиенте
Процедура ЗаполнитьСписокВремени()
	
	Элементы.Время.СписокВыбора.Очистить();
	Для Час = 0 По 23 Цикл 
		Для Период = 0 По 1 Цикл
			Время = Час * 60 * 60 + Период * 30 * 60;
			Элементы.Время.СписокВыбора.Добавить(НачалоДня(Объект.ВремяСобытия) + Время, "" + Час + ":" + Формат(Период * 30, "ЧЦ=2; ЧН=00"));		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВремени()

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСформироватьНаименование(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Обработаем событие в контексте сервера
		НаименованиеНачалоВыбораНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияСформироватьНаименование()

 #Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ВыбранныйСпособ = Объект.СпособУстановкиВремениНапоминания;
	
	Если ВыбранныйСпособ <> Неопределено Тогда
		Если ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
			Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.ДатаВремя;
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически") Тогда
			Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.НастройкаПериодичности;
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ПроизвольныйКод") Тогда
			Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.ПроизвольныйКод;
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
			Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.ПоРеквизитуОбъекта;
		ИначеЕсли ВыбранныйСпособ = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени") Тогда
			Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.ПриВозникновенииСобытия;
		КонецЕсли;
	Иначе
		Элементы.ПанельДетальныхНастроек.ТекущаяСтраница = Элементы.БезДетализации;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.СодержаниеПроизвольныйКод) Тогда
		Элементы.РедакторВыражений.Видимость = Ложь;
		Элементы.ГруппаВидТекста.Заголовок = НСтр("ru = 'Точное значение'");
		Элементы.ПроизвольнаяТемаПисьма.Пометка = Ложь;
		Элементы.ТочнаяТемаПисьма.Пометка = Истина;
	Иначе
		Элементы.РедакторВыражений.Видимость = Истина;
		Элементы.ГруппаВидТекста.Заголовок = НСтр("ru = 'Произвольный код'");
		Элементы.ПроизвольнаяТемаПисьма.Пометка = Истина;
		Элементы.ТочнаяТемаПисьма.Пометка = Ложь;
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Очистить();
	Элементы.Наименование.СписокВыбора.Добавить(
		Справочники.ДействияНаЗначимыеСобытия.ПолучитьНаименованиеПоУмолчанию(Объект)
		, "Автоматическое наименование");
		
КонецПроцедуры 

#КонецОбласти

#КонецОбласти


