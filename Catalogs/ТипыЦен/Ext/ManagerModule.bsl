// Модуль менеджера справочника "Типы цен"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Рубль = РаботаСКурсамиВалют
		.ДобавитьВалютыПоКоду(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("643"))[0];
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОсновнойТипЦенЗакупки";
	Элемент.Код                       = "000000001";
	Элемент.Наименование              = НСтр("ru = 'Основной тип цен закупки'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ВалютаЦены                = Рубль;
	Элемент.Точность                  = 2;
	Элемент.АлгоритмПолученияЦены     = Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре;
	Элемент.Закупка                   = Истина;
	Элемент.ДляАвтомобилей            = Истина;
	Элемент.ДляРабот                  = Истина;
	Элемент.ДляТоваров                = Истина;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОсновнойТипЦенПродажи";
	Элемент.Код                       = "000000002";
	Элемент.Наименование              = НСтр("ru = 'Основной тип цен продажи'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ВалютаЦены                = Рубль;
	Элемент.Точность                  = 2;
	Элемент.АлгоритмПолученияЦены     = Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре;
	Элемент.Продажа                   = Истина;
	Элемент.ДляАвтомобилей            = Истина;
	Элемент.ДляРабот                  = Истина;
	Элемент.ДляТоваров                = Истина;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НормативнаяЦена";
	Элемент.Код                       = "000000003";
	Элемент.Наименование              = НСтр("ru = 'Нормативная цена'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ВалютаЦены                = Рубль;
	Элемент.Точность                  = 2;
	Элемент.АлгоритмПолученияЦены     = Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре;
	Элемент.Закупка                   = Истина;
	Элемент.ДляАвтомобилей            = Истина;
	Элемент.ДляРабот                  = Истина;
	Элемент.ДляТоваров                = Истина;

КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	
	Если НЕ Объект.ЭтоГруппа Тогда //siniko
		ОбязательныеРеквизиты.Добавить("АлгоритмПолученияЦены");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьМноговалютныйУчет") И НЕ Объект.ВВалютеУчета Тогда
			ОбязательныеРеквизиты.Добавить("ВалютаЦены");
		КонецЕсли;
		Если Объект.Рассчитывается Тогда
			ОбязательныеРеквизиты.Добавить("БазовыйТипЦен");
		КонецЕсли;
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	УникальныеПроцентыСкидкиНаценки=Новый Массив();
	УникальныеПроцентыСкидкиНаценки.Добавить("ЦеноваяГруппа"); //siniko
	Если НЕ Объект.ЭтоГруппа И ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы") Тогда
		УникальныеРеквизиты.Вставить("ПроцентыСкидкиНаценки",УникальныеПроцентыСкидкиНаценки);
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Рассчитывается");
	Результат.Добавить("БазовыйТипЦен");
	Результат.Добавить("ВалютаЦены");
	Результат.Добавить("ВВалютеУчета");
	Результат.Добавить("ЦенаВключаетНДС");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("Рассчитывается");
	Результат.Добавить("БазовыйТипЦен");
	Результат.Добавить("ВалютаЦены");
	Результат.Добавить("ВВалютеУчета");
	Результат.Добавить("ЦенаВключаетНДС");
	
	Возврат Результат;
    
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Расчет цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасчетЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если Объект.Рассчитывается И  Объект.РегистрироватьЦеныПоПриходу Тогда
		 Объект.РегистрироватьЦеныПоПриходу = Ложь;
	КонецЕсли;
	
КонецПроцедуры // РасчетЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Базовый тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура БазовыйТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ТекБазовыйТипЦен = Объект.БазовыйТипЦен;
	Пока ЗначениеЗаполнено(ТекБазовыйТипЦен) Цикл
		Если Объект.Ссылка = ТекБазовыйТипЦен Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Текущий тип цен не может быть базовым самому себе.'"),Объект.Ссылка,"БазовыйТипЦен");
		КонецЕсли; 
		ТекБазовыйТипЦен = ТекБазовыйТипЦен.БазовыйТипЦен;
	КонецЦикла; 
	
КонецПроцедуры // БазовыйТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "В валюте учета".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВВалютеУчетаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если Объект.ВВалютеУчета Тогда
		Если ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
			Объект.ВалютаЦены = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВВалютеУчетаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Закупка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗакупкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если Объект.Закупка Тогда
		Если Объект.ВключатьВПрайсЛист Тогда
			Объект.ВключатьВПрайсЛист = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗакупкаПриИзменении()

#КонецОбласти

#КонецОбласти

#КонецЕсли