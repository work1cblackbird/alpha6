// Модуль менеджера справочника "Прочие активы"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает минимальный срок полезного использования из перечисления.
//
// Параметры:
// АмортизационнаяГруппа - ПеречислениеСсылка - Амортизационная группа.
//
// Возвращаемое значение:
// Число - Срок полезного использования.
//
Функция ПолучитьСрокПолезногоИспользования(АмортизационнаяГруппа)
	
	П_АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы;
	// выберем согласно группе
	Если АмортизационнаяГруппа = П_АмортизационнаяГруппа.ПерваяГруппа Тогда
		СрокЧисло = 12;
	ИначеЕсли АмортизационнаяГруппа = П_АмортизационнаяГруппа.ВтораяГруппа Тогда
		СрокЧисло = 25;
	ИначеЕсли АмортизационнаяГруппа = П_АмортизационнаяГруппа.ТретьяГруппа Тогда
		СрокЧисло = 37;
	ИначеЕсли АмортизационнаяГруппа = П_АмортизационнаяГруппа.ЧетвертаяГруппа Тогда
		СрокЧисло = 61;
	ИначеЕсли АмортизационнаяГруппа = П_АмортизационнаяГруппа.ПятаяГруппа Тогда
		СрокЧисло = 85;
	ИначеЕсли АмортизационнаяГруппа = П_АмортизационнаяГруппа.ШестаяГруппа Тогда
		СрокЧисло = 121;
	ИначеЕсли АмортизационнаяГруппа = П_АмортизационнаяГруппа.СедьмаяГруппа Тогда
		СрокЧисло = 181;
	ИначеЕсли АмортизационнаяГруппа = П_АмортизационнаяГруппа.ВосьмаяГруппа Тогда
		СрокЧисло = 241;
	ИначеЕсли АмортизационнаяГруппа = П_АмортизационнаяГруппа.ДевятаяГруппа Тогда
		СрокЧисло = 301;
	ИначеЕсли АмортизационнаяГруппа = П_АмортизационнаяГруппа.ДесятаяГруппа Тогда
		СрокЧисло = 361;
	Иначе 
		СрокЧисло = 12;
	КонецЕсли;
		
	Возврат СрокЧисло;
	
КонецФункции // ПолучитьСрокПолезногоИспользования()

// Формирует стандартное наименование.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Функция СформироватьНаименованиеПоУмолчанию(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Наименование = ?(ЗначениеЗаполнено(Объект.Номенклатура), СокрЛП(Объект.Номенклатура.Наименование), "");
	
	Возврат Наименование;
	
КонецФункции // СформироватьНаименованиеПоУмолчанию()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	// Обработаем в зависимости от вида элемента
	Если НЕ Объект.ЭтоГруппа Тогда
		ОбязательныеРеквизиты.Добавить("ТипНоменклатуры");
		ОбязательныеРеквизиты.Добавить("Номенклатура");
		ОбязательныеРеквизиты.Добавить("ВидПрочегоАктива");
		Если НЕ(Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецодежда 
				ИЛИ Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецоснастка 
				ИЛИ Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Инструменты
				ИЛИ Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы) Тогда
			ОбязательныеРеквизиты.Добавить("ИнвентарныйНомер");
		КонецЕсли;
		ОбязательныеРеквизиты.Добавить("СрокПолезногоИспользования");
		Если Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Оборудование Тогда
			ОбязательныеРеквизиты.Добавить("РесурсВыработки");
			ОбязательныеРеквизиты.Добавить("ЕдиницаВыработки");
		КонецЕсли;
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	Если (НЕ Объект.ЭтоГруппа) И 
		НЕ(Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецодежда 
		ИЛИ Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецоснастка
		ИЛИ Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Инструменты
		ИЛИ Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы) Тогда
		УникальныеРеквизиты.Вставить("ИнвентарныйНомер");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Родитель".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура РодительПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Объект.ВидПрочегоАктива        = ?(ЗначениеЗаполнено(Объект.Родитель.ВидПрочегоАктива),Объект.Родитель.ВидПрочегоАктива,Объект.ВидПрочегоАктива);
	Объект.ТипНоменклатуры         = ?(ЗначениеЗаполнено(Объект.Родитель.ТипНоменклатуры),Объект.Родитель.ТипНоменклатуры,Объект.ТипНоменклатуры);
	Объект.ОсновнойТипЭксплуатации = ?(ЗначениеЗаполнено(Объект.Родитель.ОсновнойТипЭксплуатации),Объект.Родитель.ОсновнойТипЭксплуатации,Объект.ОсновнойТипЭксплуатации);
	
КонецПроцедуры // РодительПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Номенклатура".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура НоменклатураПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Объект.Наименование    = ?(НЕ ЗначениеЗаполнено(Объект.Наименование), Объект.Номенклатура.Наименование, Объект.Наименование);
	Объект.ТипНоменклатуры = Объект.Номенклатура.ТипНоменклатуры;
	Объект.ПервоначальнаяСтоимость = ?(НЕ ЗначениеЗаполнено(Объект.ПервоначальнаяСтоимость), ЦенообразованиеСервер.ПолучитьЦену(Справочники.ТипыЦен.ОсновнойТипЦенЗакупки, Объект.Номенклатура, ТекущаяДатаСеанса(), , Константы.ВалютаУправленческогоУчетаКомпании.Получить()), Объект.ПервоначальнаяСтоимость);
	ТипНоменклатурыПриИзменении(Объект);
	
КонецПроцедуры // НоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Основной тип эксплуатации".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ОсновнойТипЭксплуатацииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.СрокПолезногоИспользования) Тогда
		Объект.СрокПолезногоИспользования = ПолучитьСрокПолезногоИспользования(Объект.ОсновнойТипЭксплуатации.АмортизационнаяГруппа);
	КонецЕсли;
	
КонецПроцедуры // ОсновнойТипЭксплуатацииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип номенклатуры".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ТипНоменклатурыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт

	Если Объект.ЭтоГруппа И НЕ ПараметрыДействия = "ПодставитьСрокЭксплуатацииПоУмолчаниюИзАГ" Тогда
		Объект.ОсновнойТипЭксплуатации = Объект.ТипНоменклатуры.ОсновнойТипЭксплуатации;
		Если Объект.ТипНоменклатуры = Справочники.ТипыНоменклатуры.МатериалыИСпецоснастка Тогда
			Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецоснастка;
		ИначеЕсли Объект.ТипНоменклатуры = Справочники.ТипыНоменклатуры.НематериальныйАктив Тогда
			Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.НМА;
		Иначе
			Объект.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.ОсновноеСредство;
		КонецЕсли;
	ИначеЕсли НЕ ПараметрыДействия = "ПодставитьСрокЭксплуатацииПоУмолчаниюИзАГ" Тогда
		Объект.ОсновнойТипЭксплуатации = Объект.ТипНоменклатуры.ОсновнойТипЭксплуатации;
		Если Объект.Номенклатура.ТипНоменклатуры <> Объект.ТипНоменклатуры Тогда
			Объект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.ЭтоГруппа Тогда
		Объект.СрокПолезногоИспользования = ПолучитьСрокПолезногоИспользования(Объект.ОсновнойТипЭксплуатации.АмортизационнаяГруппа);
	КонецЕсли;
	
КонецПроцедуры // ТипНоменклатурыПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Справочник.ПрочиеАктивы",
		"ПечатьОС6",
		НСтр("ru = 'Инвентарная карточка (ОС-6)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьОС6") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПечатьОС6",
															"ПечатьОС6",
															ПечатьОС6(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Функция формирует табличный документ с печатной формой инвентарной карточки ОС (форма ОС-6)
// Утверждена постановлением Госкомстата России от 21.01.2003 № 7.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма инвентарной карточки ОС.
//
Функция ПечатьОС6(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрочиеАктивы_ОС6";
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		// новый документ должен быть на отдельной странице
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ПрочиеАктивы.ПФ_MXL_ОС6");

		Шапка = Макет.ПолучитьОбласть("Шапка");
		ШапкаРазделов1и2  = Макет.ПолучитьОбласть("ШапкаРазделов1и2");
		ШапкаРаздела3     = Макет.ПолучитьОбласть("ШапкаРаздела3");
		СтрокиРаздела3    = Макет.ПолучитьОбласть("СтрокиРаздела3");
		ШапкаРаздела4     = Макет.ПолучитьОбласть("ШапкаРаздела4");
		СтрокаРаздела4    = Макет.ПолучитьОбласть("СтрокаРаздела4");
		ПодвалСтраницы1   = Макет.ПолучитьОбласть("ПодвалСтраницы1");
		ШапкаРазделов5и6  = Макет.ПолучитьОбласть("ШапкаРазделов5и6");
		СтрокаРазделов5и6 = Макет.ПолучитьОбласть("СтрокаРазделов5и6");
		ШапкаРаздела7_1   = Макет.ПолучитьОбласть("ШапкаРаздела7_1");
		ШапкаРаздела7_2   = Макет.ПолучитьОбласть("ШапкаРаздела7_2");
		ПодвалСтраницы2   = Макет.ПолучитьОбласть("ПодвалСтраницы2");
	
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		        |	ПрочиеАктивыВЭксплуатации.ПодразделениеКомпании,
		        |	ПрочиеАктивыВЭксплуатации.ПодразделениеКомпании.Организация КАК Организация,
		        |	ПрочиеАктивыВЭксплуатации.ТипЭксплуатации,
		        |	ПрочиеАктивыВЭксплуатации.МОЛ
		        |ИЗ
		        |	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
		        |ГДЕ
		        |	ПрочиеАктивыВЭксплуатации.ПрочийАктив = &ВыбПрочийАктив
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	ПрочиеАктивыВЭксплуатации.МоментВремени УБЫВ";
		
		Запрос = Новый Запрос(Текст);
		Запрос.УстановитьПараметр("ВыбПрочийАктив", Документ.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='На момент формирования отчета прочий актив не введен в эксплуатацию. %1 Нельзя сформировать инвентарную карточку объекта.'"),
					Символы.ПС)
				);
			Продолжить;
		КонецЕсли;
		
		// параметры печати
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
		ФорматВыводаСуммы = Константы.ФорматВыводаСуммы.Получить();
		Подразделение     = Выборка.ПодразделениеКомпании;
		Организация       = Выборка.Организация;
		Ответственный     = Выборка.МОЛ;
		ДатаВвода         = Документ.ДатаВводаВЭксплуатацию;
		ДатаСписания      = Документ.ДатаВыбытия;
		СрокИспользования = Документ.СрокПолезногоИспользования;
		
		Шапка.Параметры.Организация       = Организация;
		Шапка.Параметры.Подразделение     = Подразделение;
		Шапка.Параметры.НаименованиеОС    = Документ.Наименование;
		Шапка.Параметры.ОбъектОС          = Документ.Ссылка;
		Шапка.Параметры.НомерДок          = Документ.ИнвентарныйНомер;
		Шапка.Параметры.ДатаДок           = Формат(ТекущаяДатаСеанса(),"ДЛФ=D");
		Шапка.Параметры.МестоНахождениеОС = Подразделение;
		Шапка.Параметры.НомерГруппы       = Выборка.ТипЭксплуатации.АмортизационнаяГруппа;
		Шапка.Параметры.ИнвентарныйНомер  = Документ.Ссылка.ИнвентарныйНомер;
		Шапка.Параметры.ДатаВвода         = ДатаВвода;
		Шапка.Параметры.ДатаСписания      = ДатаСписания;
		
		ТабличныйДокумент.Вывести(Шапка);
		
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		        |	ПрочиеАктивыВЭксплуатации.Регистратор,
		        |	ПрочиеАктивыВЭксплуатации.ХозОперация,
		        |	ПрочиеАктивыВЭксплуатации.Период КАК Период,
		        |	СУММА(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимость - ПрочиеАктивыВЭксплуатации.СуммаАмортизации) КАК ПервоначальнаяСтоимость
		        |ИЗ
		        |	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
		        |ГДЕ
		        |	ПрочиеАктивыВЭксплуатации.ПрочийАктив = &ПрочийАктив
		        |	И ПрочиеАктивыВЭксплуатации.ПодразделениеКомпании.Организация = &Организация
		        |
		        |СГРУППИРОВАТЬ ПО
		        |	ПрочиеАктивыВЭксплуатации.ХозОперация,
		        |	ПрочиеАктивыВЭксплуатации.Регистратор,
		        |	ПрочиеАктивыВЭксплуатации.Период
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Период";
			
		Запрос = Новый Запрос(Текст);
		Запрос.УстановитьПараметр("ПрочийАктив",Документ.Ссылка);
		Запрос.УстановитьПараметр("Организация",Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ХозОперация = Справочники.ХозОперации.ВводВЭксплуатацию
				ИЛИ Выборка.ХозОперация = Справочники.ХозОперации.ВводОстатковПрочихАктивов Тогда
				ДатаВвода                  = Выборка.Период;
				ДокументВвода              = Выборка.Регистратор;
				ДокументВводаОперация      = Выборка.ХозОперация;
				ДокументВводаНомер         = Выборка.Регистратор.Номер;
				ТекПервоначальнаяСтоимость = Выборка.ПервоначальнаяСтоимость;
			ИначеЕсли Выборка.ХозОперация = Справочники.ХозОперации.РеализацияАктивов 
				ИЛИ Выборка.ХозОперация = Справочники.ХозОперации.СписаниеАктивов Тогда
				ДатаСписания        = Выборка.Период;
				ДокументСписания    = Выборка.Регистратор;
				ОперацияСписания    = Выборка.ХозОперация;
				РегистраторСписания = Выборка.Регистратор;
			ИначеЕсли Выборка.ХозОперация = Справочники.ХозОперации.ОбслуживаниеАктиваНаРасходыПодразделения
				ИЛИ Выборка.ХозОперация = Справочники.ХозОперации.ОбслуживаниеАктиваНаСтоимостьАктива Тогда
				ДатаПоследнейМодернизации     = Выборка.Период;
				ДокументПоследнейМодернизации = Выборка.Регистратор;
			КонецЕсли;
		КонецЦикла;
		
		// Если после выполнения цикла остались незаполненные значения, то заполним их пустыми строками.
		Если НЕ ЗначениеЗаполнено(ДатаВвода) Тогда
			ДатаВвода = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументВвода) Тогда
			ДокументВвода = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументВводаНомер) Тогда
			ДокументВводаНомер = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДатаСписания) Тогда
			ДатаСписания = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСписания) Тогда
			ДокументСписания = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РегистраторСписания) Тогда
			РегистраторСписания = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОперацияСписания) Тогда
			ОперацияСписания = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДатаПоследнейМодернизации) Тогда
			ДатаПоследнейМодернизации = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументПоследнейМодернизации) Тогда
			ДокументПоследнейМодернизации = "";
		КонецЕсли;
			
		// Сведения об объекте ОС на дату передачи
		Если ЗначениеЗаполнено(ДатаСписания) Тогда
			
			ШапкаРазделов1и2.Параметры.ДатаКапремонта     = ДатаПоследнейМодернизации;
			ШапкаРазделов1и2.Параметры.ДокументКапремонта = ДокументПоследнейМодернизации;
			ШапкаРазделов1и2.Параметры.ДокументВвода      = ДокументВвода;
			ШапкаРазделов1и2.Параметры.ОперацияВвода      = ДокументВводаОперация;
			ШапкаРазделов1и2.Параметры.ДокументВводаНомер = ДокументВводаНомер;
			ШапкаРазделов1и2.Параметры.ДокументВводаДата  = ДатаВвода;
			
			Если ОперацияСписания = Справочники.ХозОперации.РеализацияАктивов Тогда
				ШапкаРазделов1и2.Параметры.СрокЭксплуатации = Цел((ДатаСписания - ДатаВвода) / 2592000);
				
				Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				        |	ОбъединенныйЗапрос.ПрочийАктив КАК ПрочийАктив,
				        |	СУММА(ОбъединенныйЗапрос.ОстаточнаяСтоимость) КАК ОстаточнаяСтоимость,
				        |	СУММА(ОбъединенныйЗапрос.СуммаАмортизации) КАК СуммаАмортизации
				        |ИЗ
				        |	(ВЫБРАТЬ
				        |		ПрочиеАктивыВЭксплуатацииОстатки.ПрочийАктив КАК ПрочийАктив,
				        |		ПрочиеАктивыВЭксплуатацииОстатки.БалансоваяСтоимостьОстаток - ПрочиеАктивыВЭксплуатацииОстатки.СуммаАмортизацииОстаток КАК ОстаточнаяСтоимость,
				        |		0 КАК СуммаАмортизации
				        |	ИЗ
				        |		РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(&МоментВыбытия, ПрочийАктив = &ПрочийАктив) КАК ПрочиеАктивыВЭксплуатацииОстатки
				        |	
				        |	ОБЪЕДИНИТЬ ВСЕ
				        |	
				        |	ВЫБРАТЬ
				        |		ПрочиеАктивыВЭксплуатацииОбороты.ПрочийАктив,
				        |		0,
				        |		ПрочиеАктивыВЭксплуатацииОбороты.СуммаАмортизацииОборот
				        |	ИЗ
				        |		РегистрНакопления.ПрочиеАктивыВЭксплуатации.Обороты(
				        |				&МоментПоступления,
				        |				&МоментВыбытия,
				        |				,
				        |				ПодразделениеКомпании.Организация = &Организация
				        |					И ПрочийАктив = &ПрочийАктив) КАК ПрочиеАктивыВЭксплуатацииОбороты) КАК ОбъединенныйЗапрос
				        |
				        |СГРУППИРОВАТЬ ПО
				        |	ОбъединенныйЗапрос.ПрочийАктив";
				Запрос = Новый Запрос(Текст);
				Запрос.УстановитьПараметр("МоментВыбытия", Новый МоментВремени(ДатаСписания,РегистраторСписания));
				Запрос.УстановитьПараметр("МоментПоступления", ДатаВвода);
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("ПрочийАктив", Документ.Ссылка);
				СостояниеНаМоментПередачи = Запрос.Выполнить().Выгрузить();
				
				// Износ и остаточная стоимость ОС на момент передачи
				Если СостояниеНаМоментПередачи.Количество()>0 Тогда
					ШапкаРазделов1и2.Параметры.СуммаНачисленнойАмортизации = Формат(СостояниеНаМоментПередачи[0].СуммаАмортизации,ФорматВыводаСуммы);
					ШапкаРазделов1и2.Параметры.ОстаточнаяСтоимость         = Формат(СостояниеНаМоментПередачи[0].ОстаточнаяСтоимость,ФорматВыводаСуммы);
				Иначе
					ШапкаРазделов1и2.Параметры.СуммаНачисленнойАмортизации = "";
					ШапкаРазделов1и2.Параметры.ОстаточнаяСтоимость         = "";
				КонецЕсли; 
			Иначе
				ШапкаРазделов1и2.Параметры.СуммаНачисленнойАмортизации = "";
				ШапкаРазделов1и2.Параметры.ОстаточнаяСтоимость         = "";
			КонецЕсли;
		КонецЕсли;
		
		ШапкаРазделов1и2.Параметры.СрокПолезногоИспользования = СрокИспользования;
		
		// Балансовая стоимость ОС на момент поступления
		ШапкаРазделов1и2.Параметры.ПервоначальнаяСтоимость = Формат(ТекПервоначальнаяСтоимость,ФорматВыводаСуммы);
		
		ТабличныйДокумент.Вывести(ШапкаРазделов1и2);
		ТабличныйДокумент.Вывести(ШапкаРаздела3);
		ТабличныйДокумент.Вывести(СтрокиРаздела3);
		
		// Сведения о приемке, внутренних перемещениях и выбытии
		ТабличныйДокумент.Вывести(ШапкаРаздела4);
		
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		        |	ПрочиеАктивыВЭксплуатации.Регистратор КАК Документ,
		        |	ПрочиеАктивыВЭксплуатации.МОЛ КАК МОЛ,
		        |	ПрочиеАктивыВЭксплуатации.МОЛ.Наименование КАК МОЛНаименование,
		        |	ПрочиеАктивыВЭксплуатации.ХозОперация КАК ХозОперация,
		        |	ПрочиеАктивыВЭксплуатации.Период КАК Период,
		        |	ПрочиеАктивыВЭксплуатации.Регистратор.Номер КАК НомерДокумента,
		        |	ПрочиеАктивыВЭксплуатации.ПодразделениеКомпании КАК ПодразделениеКомпании
		        |ИЗ
		        |	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
		        |ГДЕ
		        |	ПрочиеАктивыВЭксплуатации.ПодразделениеКомпании.Организация = &Организация
		        |	И ПрочиеАктивыВЭксплуатации.ПрочийАктив = &ПрочийАктив
		        |	И ПрочиеАктивыВЭксплуатации.ХозОперация В(&МассивХозОпераций)
		        |
		        |СГРУППИРОВАТЬ ПО
		        |	ПрочиеАктивыВЭксплуатации.ХозОперация,
		        |	ПрочиеАктивыВЭксплуатации.Период,
		        |	ПрочиеАктивыВЭксплуатации.ПодразделениеКомпании,
		        |	ПрочиеАктивыВЭксплуатации.МОЛ,
		        |	ПрочиеАктивыВЭксплуатации.Регистратор,
		        |	ПрочиеАктивыВЭксплуатации.МоментВремени,
		        |	ПрочиеАктивыВЭксплуатации.Регистратор.Номер,
		        |	ПрочиеАктивыВЭксплуатации.МОЛ.Наименование
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	ПрочиеАктивыВЭксплуатации.МоментВремени";
		
		МассивХозОпераций = Новый Массив;
		МассивХозОпераций.Добавить(Справочники.ХозОперации.ВводВЭксплуатацию);
		МассивХозОпераций.Добавить(Справочники.ХозОперации.ВводОстатковПрочихАктивов);
		МассивХозОпераций.Добавить(Справочники.ХозОперации.РеализацияАктивов);
		МассивХозОпераций.Добавить(Справочники.ХозОперации.СписаниеАктивов);
		МассивХозОпераций.Добавить(Справочники.ХозОперации.ПеремещениеАктивов);
		
		Запрос = Новый Запрос(Текст);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ПрочийАктив", Документ.Ссылка);
		Запрос.УстановитьПараметр("МассивХозОпераций", МассивХозОпераций);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекущаяОперация = Выборка.ХозОперация;
			СтрокаРаздела4.Параметры.ДатаНомерДокумента = ТекущаяОперация.Наименование + " № "+Выборка.НомерДокумента+" от "+Формат(Выборка.Период,"ДЛФ=D");
			СтрокаРаздела4.Параметры.Документ			= Выборка.Документ;
			СтрокаРаздела4.Параметры.ВидОперации        = ТекущаяОперация;
			СтрокаРаздела4.Параметры.ФИОМОЛДвижения     = Выборка.МОЛНаименование;
			СтрокаРаздела4.Параметры.МОЛ     			= Выборка.МОЛ;
			СтрокаРаздела4.Параметры.Подразделение      = Выборка.ПодразделениеКомпании;
				
			Если ТекущаяОперация = Справочники.ХозОперации.РеализацияАктивов ИЛИ ТекущаяОперация = Справочники.ХозОперации.СписаниеАктивов Тогда
					
				Если НЕ ОперацияСписания = Справочники.ХозОперации.РеализацияАктивов Тогда
					
					// Износ и остаточная стоимость ОС  на момент выбытия
					Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПрочиеАктивыВЭксплуатацииОстатки.ПрочийАктив,
					|	ПрочиеАктивыВЭксплуатацииОстатки.БалансоваяСтоимостьОстаток - ПрочиеАктивыВЭксплуатацииОстатки.СуммаАмортизацииОстаток КАК ОстаточнаяСтоимость
					|ИЗ
					|	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(
					|		&МоментВыбытия, ПрочийАктив = &ПрочийАктив) КАК ПрочиеАктивыВЭксплуатацииОстатки";
					Запрос = Новый Запрос(Текст);
					Запрос.УстановитьПараметр("МоментВыбытия", Новый МоментВремени(Выборка.Период, Выборка.Документ));
					Запрос.УстановитьПараметр("ПрочийАктив", Документ.Ссылка);
					СостояниеНаМоментПередачи = Запрос.Выполнить().Выгрузить();
				КонецЕсли;
					
				ОстаточнаяСтоимость = 0;
					
				Если СостояниеНаМоментПередачи.Количество() > 0 Тогда
					ОстаточнаяСтоимость = СостояниеНаМоментПередачи[0].ОстаточнаяСтоимость;
				КонецЕсли;
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = Формат(ОстаточнаяСтоимость,ФорматВыводаСуммы);
			КонецЕсли;
			ТабличныйДокумент.Вывести(СтрокаРаздела4);
		КонецЦикла;
			
		ТабличныйДокумент.Вывести(ПодвалСтраницы1);
			
		// модернизация ос и ремонт
		ТаблицаМодернизаций = Новый ТаблицаЗначений;
		ТаблицаМодернизаций.Колонки.Добавить("ВидОперации");
		ТаблицаМодернизаций.Колонки.Добавить("ХозОперация");
		ТаблицаМодернизаций.Колонки.Добавить("Название");
		ТаблицаМодернизаций.Колонки.Добавить("Дата");
		ТаблицаМодернизаций.Колонки.Добавить("Номер");
		ТаблицаМодернизаций.Колонки.Добавить("Сумма");
		
		ТаблицаРемонтов = Новый ТаблицаЗначений;
		ТаблицаРемонтов.Колонки.Добавить("ВидОперации");
		ТаблицаРемонтов.Колонки.Добавить("ХозОперация");
		ТаблицаРемонтов.Колонки.Добавить("Название");
		ТаблицаРемонтов.Колонки.Добавить("Дата");
		ТаблицаРемонтов.Колонки.Добавить("Номер");
		ТаблицаРемонтов.Колонки.Добавить("Сумма");
		
		ТабличныйДокумент.Вывести(ШапкаРазделов5и6);
		
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		        |	ПрочиеАктивыВЭксплуатации.Период КАК Период,
		        |	ПрочиеАктивыВЭксплуатации.Регистратор КАК Регистратор,
		        |	ПрочиеАктивыВЭксплуатации.Регистратор.Номер КАК НомерДокумента,
		        |	ПрочиеАктивыВЭксплуатации.ХозОперация,
		        |	ПрочиеАктивыВЭксплуатации.ТипОбслуживания,
		        |	СУММА(ПрочиеАктивыВЭксплуатации.СуммаОбслуживания) КАК СуммаОбслуживания
		        |ИЗ
		        |	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
		        |ГДЕ
		        |	ПрочиеАктивыВЭксплуатации.ПодразделениеКомпании.Организация = &Организация
		        |	И ПрочиеАктивыВЭксплуатации.ПрочийАктив = &ПрочийАктив
		        |	И ПрочиеАктивыВЭксплуатации.Регистратор ССЫЛКА Документ.ОбслуживаниеАктива
		        |
		        |СГРУППИРОВАТЬ ПО
		        |	ПрочиеАктивыВЭксплуатации.Регистратор,
		        |	ПрочиеАктивыВЭксплуатации.ХозОперация,
		        |	ПрочиеАктивыВЭксплуатации.ТипОбслуживания,
		        |	ПрочиеАктивыВЭксплуатации.Период,
		        |	ПрочиеАктивыВЭксплуатации.Регистратор.Номер
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Период";
			
		Запрос = Новый Запрос(Текст);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ПрочийАктив", Документ.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ХозОперация = Справочники.ХозОперации.ОбслуживаниеАктиваНаСтоимостьАктива Тогда
				СтрокаТаблицыМодернизаций = ТаблицаМодернизаций.Добавить();
				СтрокаТаблицыМодернизаций.ВидОперации = Выборка.ТипОбслуживания;
				СтрокаТаблицыМодернизаций.ХозОперация = Выборка.ХозОперация;
				СтрокаТаблицыМодернизаций.Название    = Выборка.Регистратор;
				СтрокаТаблицыМодернизаций.Номер       = Выборка.НомерДокумента;
				СтрокаТаблицыМодернизаций.Дата        = Выборка.Период;
				СтрокаТаблицыМодернизаций.Сумма       = Выборка.СуммаОбслуживания;
			Иначе
				СтрокаТаблицыРемонтов = ТаблицаРемонтов.Добавить();
				СтрокаТаблицыРемонтов.ВидОперации = Выборка.ТипОбслуживания;
				СтрокаТаблицыРемонтов.ХозОперация = Выборка.ХозОперация;
				СтрокаТаблицыРемонтов.Название    = Выборка.Регистратор;
				СтрокаТаблицыРемонтов.Номер       = Выборка.НомерДокумента;
				СтрокаТаблицыРемонтов.Дата        = Выборка.Период;
				СтрокаТаблицыРемонтов.Сумма       = Выборка.СуммаОбслуживания;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоСтрок = Макс(ТаблицаМодернизаций.Количество(),ТаблицаРемонтов.Количество(), 1); 
		Для СчетСтрок = 1 По КоличествоСтрок Цикл
			Если СчетСтрок <= ТаблицаМодернизаций.Количество() Тогда
				СтрокаТаблицы = ТаблицаМодернизаций.Получить(СчетСтрок - 1);
				СтрокаРазделов5и6.Параметры.Модернизация          = СтрокаТаблицы.ВидОперации;
				СтрокаРазделов5и6.Параметры.ОперацияМодернизации  = СтрокаТаблицы.ХозОперация;
				СтрокаРазделов5и6.Параметры.ДокМодернизации       = СтрокаТаблицы.Название;
				СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = СтрокаТаблицы.Дата;
				СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = СтрокаТаблицы.Номер;
				СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = Формат(СтрокаТаблицы.Сумма, ФорматВыводаСуммы); 
			Иначе
				СтрокаРазделов5и6.Параметры.Модернизация          = "";
				СтрокаРазделов5и6.Параметры.ОперацияМодернизации  = "";
				СтрокаРазделов5и6.Параметры.ДокМодернизации       = "";
				СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = "";
				СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = "";
				СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = ""; 
			КонецЕсли;
				
			Если СчетСтрок <= ТаблицаРемонтов.Количество() Тогда
				СтрокаТаблицы = ТаблицаРемонтов.Получить(СчетСтрок - 1);
				СтрокаРазделов5и6.Параметры.Ремонт          = СтрокаТаблицы.ВидОперации;
				СтрокаРазделов5и6.Параметры.ОперацияРемонта = СтрокаТаблицы.ХозОперация;
				СтрокаРазделов5и6.Параметры.ДокРемонта      = СтрокаТаблицы.Название;
				СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = СтрокаТаблицы.Дата;
				СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = СтрокаТаблицы.Номер;
				СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = Формат(СтрокаТаблицы.Сумма,ФорматВыводаСуммы);
			Иначе
				СтрокаРазделов5и6.Параметры.Ремонт          = "";
				СтрокаРазделов5и6.Параметры.ОперацияРемонта = "";
				СтрокаРазделов5и6.Параметры.ДокРемонта      = "";
				СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = "";
				СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = "";
				СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = "";
			КонецЕсли;
			ТабличныйДокумент.Вывести(СтрокаРазделов5и6);
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ШапкаРаздела7_1);
		ТабличныйДокумент.Вывести(ШапкаРаздела7_2);
		
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		        |	СведенияОСотрудникахСрезПоследних.Должность КАК Должность
		        |ИЗ
		        |	РегистрСведений.СведенияОСотрудниках.СрезПоследних(
		        |			,
		        |			ПодразделениеКомпании = &Подразделение
		        |				И Сотрудник = &Сотрудник) КАК СведенияОСотрудникахСрезПоследних";
			
		Запрос = Новый Запрос(Текст);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Сотрудник", Ответственный);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПодвалСтраницы2.Параметры.ДолжностьОтветственного = Выборка.Должность;
		Иначе
			ПодвалСтраницы2.Параметры.ДолжностьОтветственного = Ответственный.Должность;
		КонецЕсли;
		ПодвалСтраницы2.Параметры.ФИООтветственного = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Ответственный);
		ПодвалСтраницы2.Параметры.Ответственный     = Ответственный;
		
		ТабличныйДокумент.Вывести(ПодвалСтраницы2);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьОС6()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВводВЭксплуатацию);
    ОбъектыВводимыеНаОсновании.Добавить(Документы.ВводВЭксплуатациюАвтомобилей);
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры
#КонецОбласти

#КонецОбласти

#КонецЕсли