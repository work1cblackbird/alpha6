
#Область ОписаниеПеременных

&НаСервере
Перем МетаданныеСвойстваОбъектовТипКодаСправочникаСтрока;               // Строка тип кода справочника

&НаСервере
Перем МетаданныеСвойстваОбъектовВидИерархииИерархияГруппИЭлементов;     // Вид иерархии групп и элементов

&НаСервере
Перем МетаданныеСвойстваОбъектовТипНомераДокументаСтрока;               // Строка тип номера документа строка

&НаСервере
Перем МетаданныеСвойстваОбъектовПроведениеРазрешить;                    // Флаг разрешения проведения

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачальныйПутьКДанным  = Параметры.НачальныйПутьКДанным;
	Представление         = Параметры.Представление;
	ТипПрикладногоОбъекта = Параметры.ТипПрикладногоОбъекта;
	
	МетаданныеСвойстваОбъектовВидИерархииИерархияГруппИЭлементов = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	МетаданныеСвойстваОбъектовТипКодаСправочникаСтрока = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка;
	МетаданныеСвойстваОбъектовТипНомераДокументаСтрока = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка;
	МетаданныеСвойстваОбъектовПроведениеРазрешить      = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
	Если ЗначениеЗаполнено(Параметры.АдресХранилищаМетаданныеИсточника) Тогда
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(ПолучитьИзВременногоХранилища(Параметры.АдресХранилищаМетаданныеИсточника));
	Иначе
		МетаданныеИсточника = Неопределено;
	КонецЕсли;
	
	// Если это ТЧ документа 
	Если ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ Тогда
		
		МетаданныеДокумент = МетаданныеИсточника.Родитель();
		
		НоваяСтрока = ДеревоПолей.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Представление     = "Документ";
		НоваяСтрока.ПутьКДанным       = "Ссылка";
		НоваяСтрока.ПолныйПутьКДанным = "Ссылка";
		НоваяСтрока.Тип               = Новый ОписаниеТипов("ДокументСсылка."+МетаданныеДокумент.Имя);
		ЗаполнитьСледующийУровень(НоваяСтрока);
		
		НоваяСтрока = ДеревоПолей.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Представление     = НСтр("ru = 'Номер строки'");
		НоваяСтрока.ПутьКДанным       = "НомерСтроки";
		НоваяСтрока.ПолныйПутьКДанным = "НомерСтроки";
		НоваяСтрока.Тип               = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный));;
		НоваяСтрока.СтрокаРазвернута  = Истина;
		
		Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
			НоваяСтрока = ДеревоПолей.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = Реквизит.Представление();
			НоваяСтрока.ПутьКДанным       = Реквизит.Имя;
			НоваяСтрока.ПолныйПутьКДанным = Реквизит.Имя;
			НоваяСтрока.Тип               = Реквизит.Тип;
			ЗаполнитьСледующийУровень(НоваяСтрока);
		КонецЦикла;
		
	ИначеЕсли ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник Тогда
		
		МетаданныеСправочник = МетаданныеИсточника;
		МетаданныеСправочникТЧ = Неопределено;
		
		Если ТипЗнч(МетаданныеИсточника.Родитель()) <> Тип("ОбъектМетаданныхКонфигурация") Тогда
			 МетаданныеСправочник = МетаданныеИсточника.Родитель();
			 МетаданныеСправочникТЧ = МетаданныеИсточника;
		КонецЕсли; 
		
		ДобавитьСтрокиПоТипу(ДеревоПолей, Тип("СправочникСсылка."+МетаданныеСправочник.Имя), "", МетаданныеСправочник);
		Для Каждого СтрокаРодитель Из ДеревоПолей.ПолучитьЭлементы() Цикл
			ЗаполнитьСледующийУровень(СтрокаРодитель);
		КонецЦикла;
		
		Если МетаданныеСправочникТЧ <> Неопределено Тогда
			// Заполним реквизиты табличной части
			Для Каждого Реквизит Из МетаданныеСправочникТЧ.Реквизиты Цикл
				НоваяСтрока = ДеревоПолей.ПолучитьЭлементы().Добавить();
				НоваяСтрока.Представление     = Реквизит.Представление();
				НоваяСтрока.ПутьКДанным       = Реквизит.Имя;
				НоваяСтрока.ПолныйПутьКДанным = Реквизит.Имя;
				НоваяСтрока.Тип               = Реквизит.Тип;
				ЗаполнитьСледующийУровень(НоваяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Обработка Тогда
		
		// Заполним реквизиты обработки
		Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
			НоваяСтрока = ДеревоПолей.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = Реквизит.Представление();
			НоваяСтрока.ПутьКДанным       = Реквизит.Имя;
			НоваяСтрока.ПолныйПутьКДанным = Реквизит.Имя;
			НоваяСтрока.Тип               = Реквизит.Тип;
			ЗаполнитьСледующийУровень(НоваяСтрока);
		КонецЦикла;
		
		// Заполним реквизиты табличной части
		Для Каждого Реквизит Из МетаданныеИсточника.ТабличныеЧасти[Параметры.ИмяТабличнойЧасти].Реквизиты Цикл
			НоваяСтрока = ДеревоПолей.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = Реквизит.Представление();
			НоваяСтрока.ПутьКДанным       = Реквизит.Имя;
			НоваяСтрока.ПолныйПутьКДанным = Реквизит.Имя;
			НоваяСтрока.Тип               = Реквизит.Тип;
			ЗаполнитьСледующийУровень(НоваяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьНачальныйПутьКДанным();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "НачалоВыбора" поля "Представление".
//
&НаКлиенте
Процедура ПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗаполнитьПредставление();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПолей

// Процедура - обработчик события "ПередРазворачиванием".
//
&НаКлиенте
Процедура ДеревоПолейПередРазворачиванием(Элемент, Строка, Отказ)
	ЭлементДерева = ДеревоПолей.НайтиПоИдентификатору(Строка);
	Для Каждого СтрокаРодитель Из ЭлементДерева.ПолучитьЭлементы() Цикл
		Если НЕ СтрокаРодитель.СтрокаРазвернута Тогда
			ЗаполнитьСледующийУровень(,СтрокаРодитель.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура - обработчик события "Выбор".
//
&НаКлиенте
Процедура ДеревоПолейВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыполнитьВыбор(ВыбраннаяСтрока);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик нажатия кнопки "ОК".
//
&НаКлиенте
Процедура ОК(Команда)
	ВыполнитьВыбор(Элементы.ДеревоПолей.ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура добавления строки по типу
//
&НаСервере
Процедура ДобавитьСтрокиПоТипу(СтрокаРодитель, Тип, ПолныйПутьКДанным = Неопределено, МетаданныеТекущийРеквизит = Неопределено)
	
	// Используется для заполнения первой выборки (при выгрузке справочника)
	Если ПолныйПутьКДанным = Неопределено Тогда
		ПолныйПутьКДанным = СтрокаРодитель.ПолныйПутьКДанным+".";
	КонецЕсли;
	
	// Используется для ускорения процесса открытия формы (при выгрузке справочника)
	Если МетаданныеТекущийРеквизит = Неопределено Тогда
		МетаданныеТекущийРеквизит = Метаданные.НайтиПоТипу(Тип);
	КонецЕсли;
	
	// Примитивный (раскрывать уровень не нужно)
	Если МетаданныеТекущийРеквизит = Неопределено Тогда
		Возврат;
		
	// Справочник	
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Представление     = НСтр("ru = 'Пометка удаления'");
		НоваяСтрока.ПутьКДанным       = "ПометкаУдаления";
		НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"ПометкаУдаления";
		НоваяСтрока.Тип               = Новый ОписаниеТипов("Булево");
		
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Представление     = "Предопределенный";
		НоваяСтрока.ПутьКДанным       = "Предопределенный";
		НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"Предопределенный";
		НоваяСтрока.Тип               = Новый ОписаниеТипов("Булево");
		
		Если МетаданныеТекущийРеквизит.Иерархический Тогда 
			
			Если МетаданныеТекущийРеквизит.ВидИерархии = МетаданныеСвойстваОбъектовВидИерархииИерархияГруппИЭлементов Тогда
				НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
				НоваяСтрока.Представление     = НСтр("ru = 'Это группа'");
				НоваяСтрока.ПутьКДанным       = "ЭтоГруппа";
				НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"ЭтоГруппа";
				НоваяСтрока.Тип               = Новый ОписаниеТипов("Булево");
			КонецЕсли;
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = "Родитель";
			НоваяСтрока.ПутьКДанным       = "Родитель";
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"Родитель";
			НоваяСтрока.Тип               = Новый ОписаниеТипов(МассивТипов);
			
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		Для Каждого Владелец Из МетаданныеТекущийРеквизит.Владельцы Цикл
			
			// Поддерживаем только владельцы справочники
			ВладелецТип = Неопределено;
			Если Метаданные.Справочники.Содержит(Владелец) Тогда
				ВладелецТип = Тип("СправочникСсылка."+Владелец.Имя);
			КонецЕсли;
			Если ВладелецТип = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивТипов.Добавить(ВладелецТип);
			
		КонецЦикла;
		
		Если МассивТипов.Количество()>0 Тогда
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = "Владелец";
			НоваяСтрока.ПутьКДанным       = "Владелец";
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"Владелец";
			НоваяСтрока.Тип               = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		
		Если МетаданныеТекущийРеквизит.ДлинаКода>0 Тогда
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = "Код";
			НоваяСтрока.ПутьКДанным       = "Код";
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"Код";
			Если МетаданныеТекущийРеквизит.ТипКода = МетаданныеСвойстваОбъектовТипКодаСправочникаСтрока Тогда	
				НоваяСтрока.Тип = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(МетаданныеТекущийРеквизит.ДлинаКода,ДопустимаяДлина.Фиксированная));
			Иначе
				НоваяСтрока.Тип = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(МетаданныеТекущийРеквизит.ДлинаКода,0,ДопустимыйЗнак.Неотрицательный));
			КонецЕсли;
		КонецЕсли;
		
		Если МетаданныеТекущийРеквизит.ДлинаНаименования>0 Тогда
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = "Наименование";
			НоваяСтрока.ПутьКДанным       = "Наименование";
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"Наименование";
			НоваяСтрока.Тип               = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(МетаданныеТекущийРеквизит.ДлинаНаименования));
		КонецЕсли;
		
		Для Каждого Реквизит Из МетаданныеТекущийРеквизит.Реквизиты Цикл
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = Реквизит.Представление();
			НоваяСтрока.ПутьКДанным       = Реквизит.Имя;
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+Реквизит.Имя;
			НоваяСтрока.Тип               = Реквизит.Тип;
		КонецЦикла;
		
		Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
			ЗначениеСостава = Реквизит.Состав.Найти(МетаданныеТекущийРеквизит);
			Если ЗначениеСостава=Неопределено ИЛИ (НЕ ЗначениеСостава.Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = Реквизит.Представление();
			НоваяСтрока.ПутьКДанным       = Реквизит.Имя;
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+Реквизит.Имя;
			НоваяСтрока.Тип               = Реквизит.Тип;
		КонецЦикла;
		
		// Добавляем специальные реквизиты, за расчет которых отвечает конфигурация
		ПолныйПутьКДанным = ПолныйПутьКДанным+"|";
		
		Если Тип = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ДлинаШтрихКода =Метаданные.РегистрыСведений.ШтрихКоды.Измерения.ШтрихКод.Тип.КвалификаторыСтроки.Длина;
			
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = "Штрихкод";
			НоваяСтрока.ПутьКДанным       = "ШтрихКод";
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"ШтрихКод";
			НоваяСтрока.Тип               = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(ДлинаШтрихКода));;
			
		КонецЕсли;
		
	// Перечисление	
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
		
	// Документ	
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Представление     = НСтр("ru = 'Пометка удаления'");
		НоваяСтрока.ПутьКДанным       = "ПометкаУдаления";
		НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"ПометкаУдаления";
		НоваяСтрока.Тип               = Новый ОписаниеТипов("Булево");
		
		Если МетаданныеТекущийРеквизит.ДлинаНомера>0 Тогда
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = "Номер";
			НоваяСтрока.ПутьКДанным       = "Номер";
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"Номер";
			Если МетаданныеТекущийРеквизит.ТипНомера = МетаданныеСвойстваОбъектовТипНомераДокументаСтрока Тогда	
				НоваяСтрока.Тип = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(МетаданныеТекущийРеквизит.ДлинаНомера,ДопустимаяДлина.Фиксированная));
			Иначе
				НоваяСтрока.Тип = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(МетаданныеТекущийРеквизит.ДлинаНомера,0,ДопустимыйЗнак.Неотрицательный));
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Представление     = "Дата";
		НоваяСтрока.ПутьКДанным       = "Дата";
		НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"Дата";
		НоваяСтрока.Тип               = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
		Если МетаданныеТекущийРеквизит.Проведение = МетаданныеСвойстваОбъектовПроведениеРазрешить Тогда
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = "Проведен";
			НоваяСтрока.ПутьКДанным       = "Проведен";
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+"Проведен";
			НоваяСтрока.Тип               = Новый ОписаниеТипов("Булево");
		КонецЕсли;

		Для Каждого Реквизит Из МетаданныеТекущийРеквизит.Реквизиты Цикл
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = Реквизит.Представление();
			НоваяСтрока.ПутьКДанным       = Реквизит.Имя;
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+Реквизит.Имя;
			НоваяСтрока.Тип               = Реквизит.Тип;
		КонецЦикла;
		
		Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
			ЗначениеСостава = Реквизит.Состав.Найти(МетаданныеТекущийРеквизит);
			Если ЗначениеСостава=Неопределено ИЛИ (НЕ ЗначениеСостава.Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = Реквизит.Представление();
			НоваяСтрока.ПутьКДанным       = Реквизит.Имя;
			НоваяСтрока.ПолныйПутьКДанным = ПолныйПутьКДанным+Реквизит.Имя;
			НоваяСтрока.Тип               = Реквизит.Тип;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет следующий уровень дерева
//
&НаСервере
Процедура ЗаполнитьСледующийУровень(Знач СтрокаРодитель=Неопределено, Знач ИдентификаторСтроки=Неопределено)
	
	// Для передачи с клиента на сервер будем передавать идентификатор строки дерева и по нему получать сам элемент,
	// т.к. нельзя передавать с клиента на сервер ДанныеФормыЭлементДерева.
	Если ИдентификаторСтроки<>Неопределено Тогда
		СтрокаРодитель = ДеревоПолей.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
	// Для каждого типа из описания типов
	СтрокаРодитель.СтрокаРазвернута = Истина;
	
	// Соберем ссылочные типы в массив
	МассивСсылочныхТипов = Новый Массив;
	Для Каждого Тип Из СтрокаРодитель.Тип.Типы() Цикл
		МетаданныеТекущийРеквизит = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеТекущийРеквизит = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивСсылочныхТипов.Добавить(Тип);
	КонецЦикла;
	
	// Если ссылочных типов больше одного, разворачиваем отдельно по каждой ссылке
	Если МассивСсылочныхТипов.Количество()>1 Тогда
		Для Каждого Тип Из МассивСсылочныхТипов Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			
			МетаданныеТекущийРеквизит = Метаданные.НайтиПоТипу(Тип);
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Представление     = МетаданныеТекущийРеквизит.Представление();
			НоваяСтрока.ПутьКДанным       = "";
			НоваяСтрока.ПолныйПутьКДанным = СтрокаРодитель.ПолныйПутьКДанным;
			НоваяСтрока.Тип               = Новый ОписаниеТипов(МассивТипов);			
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Если один тип	
	Если СтрокаРодитель.Тип.Типы().Количество() > 0 Тогда // Тип "Произвольный" пропускаем
		Тип = СтрокаРодитель.Тип.Типы()[0];
		ДобавитьСтрокиПоТипу(СтрокаРодитель, Тип);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки выбора
//
&НаКлиенте
Процедура ВыполнитьВыбор(ВыбраннаяСтрока)
	
	СтрокаВыбора = ДеревоПолей.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ПустаяСтрока(СтрокаВыбора.ПутьКДанным) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаВыбора.Представление) Тогда
		ЗаполнитьПредставление();
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаВыбора.Представление) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю (НСтр("ru = 'Поле ""Представление"" не заполнено.'"));
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ПолныйПутьКДанным",           СтрокаВыбора.ПолныйПутьКДанным);
	Результат.Вставить("Представление",               СтрокаВыбора.Представление);
	Результат.Вставить("ОписаниеТипов",               СтрокаВыбора.Тип);
	Результат.Вставить("ПредставлениеВерхнегоУровня", СтрокаВыбора.Представление);
	Закрыть(Результат);
	
КонецПроцедуры

// Процедура устанавливает начальный путь к данным
//
&НаСервере
Процедура УстановитьНачальныйПутьКДанным()
	
	МногострочноеПредставление = СтрЗаменить(НачальныйПутьКДанным      , ".", Символы.ПС); // Реквизиты
	МногострочноеПредставление = СтрЗаменить(МногострочноеПредставление, "|", Символы.ПС); // Специальные реквизиты
	СтрокаПоиска = РеквизитФормыВЗначение("ДеревоПолей");
	Строка       = ДеревоПолей;
	
	Для Сч=1 По СтрЧислоСтрок(МногострочноеПредставление) Цикл
		ПутьКДанным = СтрПолучитьСтроку(МногострочноеПредставление, Сч);
		СтрокаПоиска = СтрокаПоиска.Строки.Найти(ПутьКДанным, "ПутьКДанным");
		
		Если СтрокаПоиска=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Произведем поиск нужного элемента в дереве формы
		Для Каждого ЭлементДерева Из Строка.ПолучитьЭлементы() Цикл
			Если ЭлементДерева.ПутьКДанным=СтрокаПоиска.ПутьКДанным Тогда
				Строка = ЭлементДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьСледующийУровень(Строка);
		
		Элементы.ДеревоПолей.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет представление в соответствии с текущей строкой
//
&НаСервере
Процедура ЗаполнитьПредставление()
	
	ВыбраннаяСтрока = Элементы.ДеревоПолей.ТекущиеДанные;
	
	Если ВыбраннаяСтрока = Неопределено ИЛИ ПустаяСтрока(ВыбраннаяСтрока.ПутьКДанным) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеВерхнегоУровня = ВыбраннаяСтрока.Представление;
	Строка = ВыбраннаяСтрока.Родитель;
	
	Представление = "";
	СубУровни = Ложь;
	Пока Строка<>Неопределено Цикл
		Если НЕ ПустаяСтрока(Строка.ПутьКДанным) Тогда
			Если СубУровни Тогда
				Представление = Строка.Представление+"->"+Представление;
			Иначе
				Представление = Строка.Представление;
				СубУровни = Истина;
			КонецЕсли;
		КонецЕсли;
		ПредставлениеВерхнегоУровня = Строка.Представление;
		Строка = Строка.Родитель;
	КонецЦикла;
	
	Если СубУровни Тогда
		Представление = ВыбраннаяСтрока.Представление+" ("+Представление+")";
	Иначе
		Представление = ВыбраннаяСтрока.Представление
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


