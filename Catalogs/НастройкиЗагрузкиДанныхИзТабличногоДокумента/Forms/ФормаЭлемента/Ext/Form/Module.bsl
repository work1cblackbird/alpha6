#Область ОписаниеПеременных

// Ускоряющие переменные
&НаСервере
Перем МетаданныеИсточника;          // Метаданные текущей табличной части (МетаданныеОбъектТабличнаяЧасть)

// Служебные переменные
&НаСервере
Перем МенеджерыОбъектовМетаданных;  // Структура Менеджеров объектов метаданных

&НаКлиенте
Перем КешМенеджеровПоТипу;          // Соответствие, для кэширования информации о соответствии типа менеджеру

// Ускоряющие переменные для настроек выгрузки
&НаКлиенте
Перем СоответствиеТиповИПредставленийDBF;   // Соответствие типов и представлений

&НаКлиенте
Перем СписокСоответствийТранслитерации;     // Список соответствий транслитерации

&НаКлиенте
Перем ИзмененаРучнаяНумерацияКолонок;

&НаКлиенте
Перем РазвернутТабличныйДокумент;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	
	ЗаполнитьСписокВариантовИспользования();
	
	// Установим ускоряющую переменную модуля
	МетаданныеИсточника = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ПолучитьМетаданныеИсточника(Объект);
	Если НЕ МетаданныеИсточника=Неопределено Тогда
		АдресХранилищаМетаданныеИсточника = ПоместитьВоВременноеХранилище(МетаданныеИсточника.ПолноеИмя(), УникальныйИдентификатор);
	Иначе
		АдресХранилищаМетаданныеИсточника = "";
	КонецЕсли;
	
	// Форма открыта для сохранения настроек, заполним реквизиты объекта из параметров
	ФормаОткрытаДляСохранения = Ложь;
	Если ЗначениеЗаполнено(Параметры.ВариантИспользованияНастройки) Тогда
		Объект.ВариантИспользованияНастройки = Параметры.ВариантИспользованияНастройки;
		ФормаОткрытаДляСохранения = Истина;
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(Параметры.НастройкиЗагрузкиВыгрузки) Тогда
			Настройки = Параметры.НастройкиЗагрузкиВыгрузки.Получить();
		ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Настройки = ПолучитьНастройкуИзХранилища(Объект.Ссылка);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Описание = "";
		Пока ИнформацияОбОшибке.Причина<>Неопределено Цикл
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина; // Пропускаем первую строку с текстом модуля
			Описание  = Описание+Описание+ИнформацияОбОшибке.Описание;
		КонецЦикла;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'Ошибка получения настроек: %1'"), Описание);
		ОбщегоНазначения.СообщитьПользователю (ТекстОшибки);
	КонецПопытки;
	
	Если Настройки = Неопределено Тогда
		ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ЗаполнитьНастройкиКолонокТабличнойЧастиДопПараметровСправочникаНастроек(, ТаблицаДополнительныхПараметров);
		
		ПерваяСтрокаДанныхТабличногоДокумента = 1;
		ДействиеСЗагружаемымФайлом = 2;
		// Для выгрузки
		Кодировка = "DOS";
		ФорматВыходногоФайла = "DBF";
		// Если это новый элемент, то значения отбора попадают в поля, отследим последовательность
		// т.к. может случится ситуация, когда установлена табличная часть, но не установлен объект.
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Если ЗначениеЗаполнено(Объект.ТипПрикладногоОбъекта) 
				И НЕ ЗначениеЗаполнено(Объект.ВариантИспользованияНастройки) Тогда
				Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.ПустаяСсылка();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ИмяПрикладногоОбъекта) И НЕ ЗначениеЗаполнено(Объект.ТипПрикладногоОбъекта) Тогда
				ИмяПрикладногоОбъекта = "";
				ПредставлениеПрикладногоОбъекта = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ИмяТабличнойЧасти) И НЕ ЗначениеЗаполнено(Объект.ИмяПрикладногоОбъекта) Тогда
				ИмяТабличнойЧасти = "";
				ПредставлениеТабличнойЧасти = "";
			КонецЕсли;
			// Установим вариант использования в соответствии с группой которой настройка принадлежит
			// при интерактивном добавлении элемента справочника (без отбора, при отборе).
			Если НЕ ЗначениеЗаполнено(Объект.ВариантИспользованияНастройки) Тогда
				ДанныйОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.НастройкиЗагрузкиДанныхИзТабличногоДокумента"));
				Если ДанныйОбъект.ПринадлежитЭлементу(Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ГруппаНастроекВыгрузки) Тогда
					Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных;
				Иначе
					Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Общее
		// При создании нового элемента с установленным отбором (например при добавление с использованием формы мастера)
		// заполняются только скрытые поля необходимо заполнить и представления.
		УстановитьИсточник(НЕ ЗначениеЗаполнено(Объект.Ссылка));
	Иначе
		Если Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных Тогда
			// Заполним список реквизитов ТЧ
			ЗаполнитьНастройкиИзТабличногоДокумента(Настройки);
		ИначеЕсли Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных Тогда
			ЗаполнитьНастройкиВыгрузкиИзТабличногоДокумента(Настройки);
		КонецЕсли;
		Если ФормаОткрытаДляСохранения И РеквизитФормыВЗначение("Объект").ЭтоНовый() Тогда
			Если Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных Тогда
				Если Объект.ТипПрикладногоОбъекта <> Перечисления.ТипыПрикладныхОбъектов.РегистрСведений Тогда
					Объект.Родитель = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ГруппаНастроекЗагрузки;
				КонецЕсли;
			Иначе
				Если Объект.ТипПрикладногоОбъекта <> Перечисления.ТипыПрикладныхОбъектов.РегистрСведений Тогда
					Объект.Родитель = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ГруппаНастроекВыгрузки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокТиповПрикладногоОбъекта();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Инициализация();
	ИнициализацияСписковИСоответствий();
	
	ЗаполнитьСписокВариантовИспользования();
	ЗаполнитьСписокТиповПрикладногоОбъекта();
	ЗаполнитьСписокПрикладныхОбъектов();
	ЗаполнитьСписокТабличныхЧастей();
	
	ОбновитьНомераСтрокВыгружаемыхРеквизитов();
	
	#Если ВебКлиент Тогда
		ТолькоПросмотр = Истина;
		// Вкладка загрузки
		Элементы.ПерваяСтрокаДанныхТабличногоДокумента.ТолькоПросмотр = Истина;
		Элементы.Табуляция.ТолькоПросмотр = Истина;
		Элементы.КодировкаЗагрузка.ТолькоПросмотр = Истина;
		Элементы.флПоискПоПрайсуПоставщика.ТолькоПросмотр = Истина;
		Элементы.НеОбновлятьСуществующиеЭлементы.ТолькоПросмотр = Истина;
		Элементы.ТаблицаЗагружаемыхРеквизитов.ТолькоПросмотр = Истина;
		Элементы.ТаблицаЗагружаемыхРеквизитов.КоманднаяПанель.ТолькоПросмотр = Истина;
		Для Каждого Элемент Из Элементы.ТаблицаЗагружаемыхРеквизитов.КоманднаяПанель.ПодчиненныеЭлементы Цикл
			Элемент.Доступность = Ложь;
		КонецЦикла;
		Элементы.ТаблицаЗагружаемыхРеквизитовПеренумероватьКолонки.Доступность = Ложь;
		Элементы.ТаблицаЗагружаемыхРеквизитовРучнаяНумерацияКолонокТабличногоДокумента.Доступность = Ложь;
		Элементы.ДействиеСЗагружаемымФайлом.ТолькоПросмотр = Истина;
		Элементы.ИспользоватьВнешнийМодульПреобразованияФайла.ТолькоПросмотр = Истина;
		Элементы.КаталогАрхиваЗагруженныхФайлов.ТолькоПросмотр = Истина;
		Элементы.ОбработкаПреобразования.ТолькоПросмотр = Истина;
		// Вкладка выгрузки
		Элементы.ФорматФайла.ТолькоПросмотр = Истина;
		Элементы.КодировкаВыгрузка.ТолькоПросмотр = Истина;
		Элементы.ВыгружаемыеРеквизиты.ТолькоПросмотр = Истина;
		Элементы.ВыгружаемыеРеквизитыСобытия.Доступность = Ложь;
	#КонецЕсли
	
	ОбновитьОтображениеДанных();
	ОтображениеТабличногоДокумента = Ложь;
	ИзмененаРучнаяНумерацияКолонок = Ложь;
	РазвернутТабличныйДокумент = Ложь;
	УстановитьВидимостьТабличныйДокумент();
	
	ЗаполнитьМассивКнопок();
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ВыгружаемыеРеквизиты");

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("НастройкиЗагрузкиДанныхИзТабличногоДокумента");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных Тогда
		СоответствиеНеУникальныхПолейДБФ = Новый Соответствие();
		
		Для Каждого ПолеВыгрузки Из ВыгружаемыеРеквизиты Цикл
			Если НЕ СоответствиеНеУникальныхПолейДБФ.Получить(ПолеВыгрузки.ПолеДБФ)=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НайденыСовпадения = Ложь;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'В строках №№ %1'"), ПолеВыгрузки.НомерСтроки);
			// Сравним с остальными строками построчно
			Для Каждого ПолеДляСравнения Из ВыгружаемыеРеквизиты Цикл
				Если ПолеВыгрузки.НомерСтроки=ПолеДляСравнения.НомерСтроки Тогда
					Продолжить;
				КонецЕсли;
				// Нашли совпадение полей ДБФ
				Если ПолеВыгрузки.ПолеДБФ=ПолеДляСравнения.ПолеДБФ Тогда
					НеУникальныеСтроки = СоответствиеНеУникальныхПолейДБФ.Получить(ПолеВыгрузки.ПолеДБФ);
					
					Если НеУникальныеСтроки=Неопределено Тогда
						Отказ = Истина;
						НайденыСовпадения = Истина;
						МассивСтрок = Новый Массив();
						МассивСтрок.Добавить(ПолеВыгрузки.НомерСтроки);
						МассивСтрок.Добавить(ПолеДляСравнения.НомерСтроки);
						СоответствиеНеУникальныхПолейДБФ.Вставить(ПолеВыгрузки.ПолеДБФ, МассивСтрок);
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= '%1, %2'"), ТекстСообщения, ПолеДляСравнения.НомерСтроки);
					Иначе // Совпадения были, значит проверим номера строк, которые уже были проверены
						ИндексПолеВыгрузки     = НеУникальныеСтроки.Найти(ПолеВыгрузки.НомерСтроки);
						ИндексПолеДляСравнения = НеУникальныеСтроки.Найти(ПолеДляСравнения.НомерСтроки);
						Если ИндексПолеВыгрузки=Неопределено ИЛИ ИндексПолеДляСравнения=Неопределено Тогда
							Отказ = Истина;
							НайденыСовпадения = Истина;
							Если ИндексПолеВыгрузки=Неопределено Тогда
								НеУникальныеСтроки.Добавить(ПолеВыгрузки.НомерСтроки);
							КонецЕсли;
							Если ИндексПолеДляСравнения=Неопределено Тогда
								НеУникальныеСтроки.Добавить(ПолеДляСравнения.НомерСтроки);
							КонецЕсли;
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= '%1, %2'"), ТекстСообщения, ПолеДляСравнения.НомерСтроки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденыСовпадения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 совпадают поля DBF'"), ТекстСообщения);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ВыгружаемыеРеквизиты");
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ПерваяСтрокаДанныхТабличногоДокумента = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана первая строка данных табличного документа'"),,"ПерваяСтрокаДанныхТабличногоДокумента");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		СохранитьНастройкиВХранилище(ТекущийОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФайлДляИнтерактивнойНастройкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПолноеИмяФайла = ФайлДляИнтерактивнойНастройки;
	ДиалогВыбораФайла.Заголовок = "ВЫБРАТЬ источник данных";
	ДиалогВыбораФайла.Фильтр = "Все форматы (*.dbf;*.xls;*.xlsx;*.txt;*.mxl;*.mdb;*.sst;*.mmo;*.xml;*.csv)|*.dbf;*.xls;*.xlsx;*.txt;*.mxl;*.mdb;*.sst;*.mmo;*.xml;*.csv|dBase III (*.dbf)|*.dbf|Лист Excel (*.xls)|*.xls|Лист Excel 2007 (*.xlsx)|*.xlsx|Текстовый документ (*.txt)|*.txt|Табличный документ (*.mxl)|*.mxl|Microsoft Access(*.mdb)|*.mdb|Формат sst (*.sst)|*.sst|Формат mmo (*.mmo)|*.mmo|Формат xml (*.xml)|*.xml|Формат csv (*.csv)|*.csv";
	ДополнительныеПараметры = Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлДляИнтерактивнойНастройкиНачалоВыбораЗавершение",
													ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДляИнтерактивнойНастройкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлДляИнтерактивнойНастройки = ДиалогВыбораФайла.ПолноеИмяФайла;
	
	Если ЗначениеЗаполнено(ФайлДляИнтерактивнойНастройки) Тогда
		ФайлДляИнтерактивнойНастройкиПриИзменении(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлДляИнтерактивнойНастройкиПриИзменении(Элемент)
	
	ФайлНаДиске = Новый Файл(ФайлДляИнтерактивнойНастройки);
	ДополнительныеПараметры = Новый Структура("ФайлНаДиске", ФайлНаДиске);
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлДляИнтерактивнойНастройкиПриИзмененииПроверка",
													ЭтотОбъект, ДополнительныеПараметры);
	ФайлНаДиске.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДляИнтерактивнойНастройкиПриИзмененииПроверка(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Файл данных не существует'"));
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлДляИнтерактивнойНастройкиПриИзмененииПроверкаЗавершение",
													ЭтотОбъект, ДополнительныеПараметры);
	ФайлНаДиске.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДляИнтерактивнойНастройкиПриИзмененииПроверкаЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Файл данных не существует'"));
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьВнешнийМодульПреобразованияФайла И НЕ ЗначениеЗаполнено(ОбработкаПреобразования) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В настройке загрузки указано, что файл преобразовывается в табличный документ внешней обработкой, но обработка не указана.'"));
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	АдресВоВременномХранилище = "";
	ОповещениеПомещения = Новый ОписаниеОповещения(
								"ФайлДляИнтерактивнойНастройкиПриИзмененииЗавершение",
								ЭтотОбъект,
								Новый Структура("ФайлНаДиске", ФайлНаДиске));
	НачатьПомещениеФайла(
		ОповещениеПомещения,
		АдресВоВременномХранилище,
		ФайлДляИнтерактивнойНастройки,
		Ложь,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДляИнтерактивнойНастройкиПриИзмененииЗавершение(Результат,
		Адрес,
		ВыбранноеИмяФайла,
		ДополнительныеПараметры) Экспорт
	
	АдресВоВременномХранилище = Адрес;
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	
	Если ИспользоватьВнешнийМодульПреобразованияФайла И ЗначениеЗаполнено(ОбработкаПреобразования) Тогда
		ЗагрузкаИзЭлектронныхДокументовВызовСервера.
		ЗаполнитьТабличныйДокументИзXMLСервер(
			ФайлДляИнтерактивнойНастройки,
			ОбработкаПреобразования,
			ТабличныйДокумент,
			АдресВоВременномХранилище);
	Иначе
		ЗагрузкаИзЭлектронныхДокументовВызовСервера.
		ПрочитатьТабличныйДокумент(
			ТабличныйДокумент,
			ФайлНаДиске.Расширение,
			ФайлНаДиске.ИмяБезРасширения,
			АдресВоВременномХранилище,
			Табуляция,
			Кодировка);
	КонецЕсли;
		
	РазвернутТабличныйДокумент = Истина;
	ТаблицаЗагружаемыхРеквизитовПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура тТабличныйДокументНажатие(Элемент)
	
	УстановитьВидимостьТабличныйДокумент();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Объект.Наименование = СформироватьНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПрикладногоОбъектаПриИзменении(Элемент)
	
	СписокДокументов = Элемент.СписокВыбора;
	ЭлементСписка = СписокДокументов.НайтиПоЗначению(Объект.ИмяПрикладногоОбъекта);
	
	Если ЭлементСписка<>Неопределено Тогда
		Объект.ПредставлениеПрикладногоОбъекта = ЭлементСписка.Представление;
	Иначе
		Объект.ПредставлениеПрикладногоОбъекта = Объект.ИмяПрикладногоОбъекта;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "";
	
	ЗаполнитьСписокТабличныхЧастей();
	
	// Выберем первую доступную ТЧ
	СписокВыбора = Элементы.ИмяТабличнойЧасти.СписокВыбора; 
	Если СписокВыбора.Количество()>0 И НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти)
		И НЕ Объект.ТипПрикладногоОбъекта = ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Справочник") Тогда
		Объект.ИмяТабличнойЧасти = СписокВыбора[0].Значение;
		Объект.ПредставлениеТабличнойЧасти = СписокВыбора[0].Представление;
	КонецЕсли;
	
	УстановитьИсточник();
	УправлениеДиалогомНаСервере();
	ЗаполнитьМассивКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяТабличнойЧастиПриИзменении(Элемент)
	
	СписокТабличныхЧастей = Элемент.СписокВыбора;
	ЭлементСписка = СписокТабличныхЧастей.НайтиПоЗначению(Объект.ИмяТабличнойЧасти);
	
	Если ЭлементСписка <> Неопределено Тогда
		Объект.ПредставлениеТабличнойЧасти = ЭлементСписка.Представление;
	Иначе
		Объект.ПредставлениеТабличнойЧасти = Объект.ИмяТабличнойЧасти;
	КонецЕсли;
	
	УстановитьИсточник();
	УправлениеДиалогомНаСервере();
	ЗаполнитьМассивКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПрикладногоОбъектаПриИзменении(Элемент)
	
	Объект.ИмяПрикладногоОбъекта = "";
	Объект.ИмяТабличнойЧасти = "";
	
	ЗаполнитьСписокПрикладныхОбъектов();
	УстановитьИсточник();
	УправлениеДиалогомНаСервере();
	ЗаполнитьМассивКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура КодировкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Кодировка = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСЗагружаемымФайломПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогАрхиваЗагруженныхФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//	Обработка выбора каталога хранения архива сохраняемых файлов
	СтандартнаяОбработка   = Ложь;
	ДиалогОткрытияКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияКаталога.ПолноеИмяФайла = "";
	ДиалогОткрытияКаталога.МножественныйВыбор = Ложь;
	// Определим, какой каталог выбираем
	ДиалогОткрытияКаталога.Заголовок = НСтр("ru = 'Выберите каталог архива загружаемых файлов'");
	ДиалогОткрытияКаталога.Каталог   = КаталогАрхиваЗагруженныхФайлов;
	// Предоставим выбор пользователю
	ДополнительныеПараметры = Новый Структура("ДиалогОткрытияКаталога", ДиалогОткрытияКаталога);
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("КаталогАрхиваЗагруженныхФайловНачалоВыбораЗавершение",
									ЭтотОбъект, ДополнительныеПараметры);
	ДиалогОткрытияКаталога.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогАрхиваЗагруженныхФайловНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытияКаталога = ДополнительныеПараметры.ДиалогОткрытияКаталога;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		КаталогАрхиваЗагруженныхФайлов = ДиалогОткрытияКаталога.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнийМодульПреобразованияФайлаПриИзменении(Элемент)
	
	НастроитьДоступностьПоляОбработки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантИспользованияНастройкиПриИзменении(Элемент)
	
	Объект.ТипПрикладногоОбъекта = ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.ПустаяСсылка");
	Объект.ИмяПрикладногоОбъекта = "";
	Объект.ИмяТабличнойЧасти = "";
	
	ЗаполнитьСписокТиповПрикладногоОбъекта();
	УстановитьИсточник();
	УправлениеДиалогомНаСервере();
	ЗаполнитьМассивКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПриАктивизацииСтроки(Элемент)
	
	ПодсветитьВыбраннуюКолонку(Элементы.ТаблицаЗагружаемыхРеквизитов);
	РазобратьсяСОформлениемСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаИмя = "Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.Форма.ФормаРедактированияВыражения";
	ПараметрыФормы = Новый Структура("Выражение", ТекущийЭлемент.ТекущиеДанные.Выражение);
	ОткрытьФорму(ФормаИмя, ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ТекущийЭлемент.ТекущиеДанные.Выражение = СокрЛП(Результат);
    Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовРежимПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	
	Если ТекущиеДанные<>Неопределено Тогда
		ВозможностьУстановкиРежима = ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных(ТекущиеДанные.ИмяРеквизита, ТекущиеДанные.ОписаниеТипов, ТекущиеДанные.ИскатьПо, ТекущиеДанные.ЗначениеПоУмолчанию);
		СписокВыбораЭлемента = Элемент.СписокВыбора;
		
		Если ВозможностьУстановкиРежима И СписокВыбораЭлемента.Количество() = 1 Тогда
			СписокВыбораЭлемента.Добавить("По похожим словам", НСтр("ru = 'По похожим словам'"));
		ИначеЕсли Не ВозможностьУстановкиРежима И СписокВыбораЭлемента.Количество() = 2 Тогда
			СписокВыбораЭлемента.Удалить(СписокВыбораЭлемента.Количество() - 1);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовНомерКолонкиПриИзменении(Элемент)
	
	ПодсветитьВыбраннуюКолонку(Элементы.ТаблицаЗагружаемыхРеквизитов);
	РазобратьсяСОформлениемСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеРеквизитыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВыгружаемыеРеквизиты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.ТипПоля = НСтр("ru = 'Поле объекта'");
		ТекущиеДанные.НомерСтроки = ВыгружаемыеРеквизиты.Индекс(ТекущиеДанные)+1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеРеквизитыПриИзменении(Элемент)
	
	ОбновитьНомераСтрокВыгружаемыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеРеквизитыТипПоляПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыгружаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипПоля = "Выражение" Тогда
		ТекущиеДанные.Представление = НСтр("ru = 'Произвольное выражение'");
		ТекущиеДанные.Данные        = "Результат = Неопределено;";
		ТекущиеДанные.Тип = "";
		ТекущиеДанные.Длина = 0;
		ТекущиеДанные.Точность = 0;
		ТекущиеДанные.ПолеДБФ = "";
	Иначе
		ТекущиеДанные.Представление = "";
		ТекущиеДанные.Данные = "";
		ТекущиеДанные.Тип = "";
		ТекущиеДанные.Длина = 0;
		ТекущиеДанные.Точность = 0;
		ТекущиеДанные.ПолеДБФ = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеРеквизитыПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыгружаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипПоля = НСтр("ru = 'Поле объекта'") Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Представление",                     ТекущиеДанные.Представление);
		СтруктураПараметров.Вставить("НачальныйПутьКДанным",              ТекущиеДанные.Данные);
		СтруктураПараметров.Вставить("АдресХранилищаМетаданныеИсточника", АдресХранилищаМетаданныеИсточника);
		СтруктураПараметров.Вставить("ТипПрикладногоОбъекта",             Объект.ТипПрикладногоОбъекта);
		
		Если Объект.ТипПрикладногоОбъекта = ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Обработка") Тогда
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти", Объект.ИмяТабличнойЧасти);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.Форма.ВыборПоля", СтруктураПараметров, Элемент,,,,Новый ОписаниеОповещения("ОбработкаВыбораПредставленияПоляОбъекта",ЭтотОбъект, ТекущиеДанные),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
	ИначеЕсли ТекущиеДанные.ТипПоля = "Выражение" Тогда
		СтруктураПараметров = Новый Структура("Представление,Выражение", ТекущиеДанные.Представление, ТекущиеДанные.Данные);
		ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.Форма.ФормаРедактированияВыраженияВыгрузка", СтруктураПараметров, Элемент,,,,Новый ОписаниеОповещения("ОбработкаВыбораРедактированияВыражения",ЭтотОбъект, ТекущиеДанные),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан тип поля.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПредставленияПоляОбъекта(Результат, ТекущиеДанные) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Данные        = Результат.ПолныйПутьКДанным;
	ТекущиеДанные.Представление = Результат.Представление;
	ТекущиеДанные.ПолеДБФ = Транслитерация(Результат.ПредставлениеВерхнегоУровня);
	
	МассивТипов = Результат.ОписаниеТипов.Типы();
	Если МассивТипов.Количество() = 1 Тогда
		Тип = МассивТипов[0];
		ОписаниеТипов = Результат.ОписаниеТипов;
		// Ссылочные типы выгружаем строкой
		Если Тип = Тип("Строка") Тогда
			ТекущиеДанные.Тип      = "S";
			ТекущиеДанные.Длина    = ?(ОписаниеТипов.КвалификаторыСтроки.Длина>0,ОписаниеТипов.КвалификаторыСтроки.Длина,255);
			ТекущиеДанные.Точность = 0;
		ИначеЕсли Тип = Тип("Число") Тогда
			ТекущиеДанные.Тип      = "N";
			ТекущиеДанные.Длина    = ОписаниеТипов.КвалификаторыЧисла.Разрядность;
			ТекущиеДанные.Точность = ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		ИначеЕсли Тип = Тип("Булево") Тогда
			ТекущиеДанные.Тип      = "L";
			ТекущиеДанные.Длина    = 0;
			ТекущиеДанные.Точность = 0;
		ИначеЕсли Тип = Тип("Дата") Тогда
			ТекущиеДанные.Тип      = "D";
			ТекущиеДанные.Длина    = 0;
			ТекущиеДанные.Точность = 0;
		Иначе
			ТекущиеДанные.Тип      = "S";
			ТекущиеДанные.Длина    = 255;
			ТекущиеДанные.Точность = 0;
		КонецЕсли;
	Иначе
		// Все остальное выгружаем строкой
		ТекущиеДанные.Тип      = "S";
		ТекущиеДанные.Длина    = 255;
		ТекущиеДанные.Точность = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРедактированияВыражения(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Представление = Результат.Представление;
	ТекущиеДанные.Данные        = Результат.Выражение;
	
	Если ПустаяСтрока(ТекущиеДанные.ПолеДБФ) Тогда
		ТекущиеДанные.ПолеДБФ = Транслитерация(ТекущиеДанные.Представление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеРеквизитыПолеДБФОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ВходныеПараметры, СтандартнаяОбработка)
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Текст, Истина, "_") Тогда
		ТекстСообщения = НСтр("ru= 'Наименование поля DBF должно содержать только латинские буквы и знаки подчеркивания ""_"".'");
		ИндексСтроки = ВыгружаемыеРеквизиты.Индекс(Элементы.ВыгружаемыеРеквизиты.ТекущиеДанные);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВыгружаемыеРеквизиты["+Формат(ИндексСтроки, "ЧГ=0")+"].ПолеДБФ");
	КонецЕсли;
	
	КодСимволаПервойБуквы = КодСимвола(Лев(Текст, 1));
	
	ЭтоЛатинскаяБуква = НЕ ((КодСимволаПервойБуквы < 65) Или (КодСимволаПервойБуквы > 90 И КодСимволаПервойБуквы < 97) Или (КодСимволаПервойБуквы > 122));
	Если НЕ ЭтоЛатинскаяБуква Тогда
		ТекстСообщения = НСтр("ru= 'Наименование поля DBF должно начинаться с латинской буквы.'");
		ИндексСтроки = ВыгружаемыеРеквизиты.Индекс(Элементы.ВыгружаемыеРеквизиты.ТекущиеДанные);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВыгружаемыеРеквизиты["+Формат(ИндексСтроки, "ЧГ=0")+"].ПолеДБФ");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьКолонку(Команда)
	
	НомерКолонки = ТабличныйДокумент.ТекущаяОбласть.Лево;
	Если НомерКолонки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.НомерКолонки = НомерКолонки Тогда
		Возврат;
	ИначеЕсли ТекСтрока.НомерКолонки<>0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьКолонкуЗавершение", ЭтотОбъект, 
			Новый Структура("НомерКолонки, ТекСтрока", НомерКолонки, ТекСтрока)),
				НСтр("ru = 'Для текущего реквизита'") + " """+СокрЛП(ТекСтрока.ПредставлениеРеквизита)
				+""" " + НСтр("ru = 'уже установлен номер колонки'")+ " "+ТекСтрока.НомерКолонки
				+". " + НСтр("ru = 'Изменить его на номер'") + " "+НомерКолонки+"?'", РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	УстановитьКолонкуНепосредственно(НомерКолонки, ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКолонкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НомерКолонки = ДополнительныеПараметры.НомерКолонки;
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    УстановитьКолонкуНепосредственно(НомерКолонки, ТекСтрока);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКолонкуНепосредственно(Знач НомерКолонки, Знач ТекСтрока)
    
    ТекСтрока.НомерКолонки = НомерКолонки;
    ТекСтрока.Пометка = Истина;
    
    Если Не РучнаяНумерацияКолонокТабличногоДокумента Тогда
        РучнаяНумерацияКолонокТабличногоДокумента = Истина;
        УправлениеДиалогомНаСервере();
	КонецЕсли;
	
    Модифицированность = Истина;
    РасставитьПометкиНаКнопках(НомерКолонки);

КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыеКнопкиНажатие(Команда)
	
	НомерКолонки = ТабличныйДокумент.ТекущаяОбласть.Лево;
	Если НомерКолонки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТек Из ТаблицаЗагружаемыхРеквизитов Цикл
		Если Команда.Имя = "ПодключаемаяКнопка_"+СтрокаТек.ИмяРеквизита Тогда
			Если Элементы[Команда.Имя].Пометка Тогда
				СтрокаТек.НомерКолонки = 0;
			Иначе
				СтрокаТек.НомерКолонки = НомерКолонки;
				Если Не СтрокаТек.Пометка Тогда
					СтрокаТек.Пометка = Истина;
				КонецЕсли;
				Если НЕ РучнаяНумерацияКолонокТабличногоДокумента Тогда
					РучнаяНумерацияКолонокТабличногоДокумента = Истина;
					УправлениеДиалогомНаСервере();
				КонецЕсли;
			КонецЕсли;
			Модифицированность = Истина;
			РасставитьПометкиНаКнопках(НомерКолонки);
			РазобратьсяСОформлениемСтрок();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ЗагрузкаИзЭлектронныхДокументовКлиент.УстановитьФлагТаблицы(Ложь, ТаблицаЗагружаемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ЗагрузкаИзЭлектронныхДокументовКлиент.УстановитьФлагТаблицы(Истина, ТаблицаЗагружаемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура Перечитать(Команда)
	
	ЗаполнитьНастройкиКолонок();
	Модифицированность = Истина;
	ИзмененаРучнаяНумерацияКолонок = Истина;
	ТекущийЭлемент = Элементы.ТаблицаЗагружаемыхРеквизитов;
	ПодсветитьВыбраннуюКолонку(Элементы.ТаблицаЗагружаемыхРеквизитов);
	РазобратьсяСОформлениемСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура События(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ПередВыгрузкойОбъекта",		ПередВыгрузкойОбъекта);
	ПараметрыОткрытияФормы.Вставить("ПередЗаписьюОбъекта",			ПередЗаписьюОбъекта);
	ПараметрыОткрытияФормы.Вставить("ПриЗаписиОбъекта",				ПриЗаписиОбъекта);
	ПараметрыОткрытияФормы.Вставить("ПослеДобавленияСтроки",		ПослеДобавленияСтроки);
	ПараметрыОткрытияФормы.Вставить("ВариантИспользованияНастройки",Объект.ВариантИспользованияНастройки);
	ОткрытьФорму("Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.Форма.ФормаРедактированияСобытий",ПараметрыОткрытияФормы,ЭтотОбъект,,,,Новый ОписаниеОповещения("ОповещениеОРедактированииСобытий",ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОРедактированииСобытий(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
	КонецЕсли;
	
	Для Каждого РезультирующееЗначение Из Результат Цикл
		ЭтотОбъект[РезультирующееЗначение.Ключ] = РезультирующееЗначение.Значение;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "ru = 'Загрузить настройки из файла'";
	ДиалогВыбораФайла.Фильтр    = "Файлы настроек (*.mxlz;*.mxla)|*.mxlz;*.mxla|Файлы настроек загрузки(*.mxlz)|*.mxlz|Файлы настроек выгрузки(*.mxla)|*.mxla|Все файлы (*.*)|*.*|";
	
	ДополнительныеПараметры = Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	Расширение = НРег(Файл.Расширение);
	
	АдресВоВременномХранилище = "";
	
	ПараметрыПомещения = Новый Структура("ДиалогВыбораФайла, Расширение", ДиалогВыбораФайла, Расширение);
	НачатьПомещениеФайла(
		Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаЗавершение", ЭтотОбъект, ПараметрыПомещения),
		АдресВоВременномХранилище,
		ДиалогВыбораФайла.ПолноеИмяФайла,
		Ложь,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	АдресВоВременномХранилище = Адрес;
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	Расширение = ДополнительныеПараметры.Расширение;
	
	ЗагруженоУспешно = ВыполнитьЗагрузкуНастроек(Расширение, ДиалогВыбораФайла.ПолноеИмяФайла, АдресВоВременномХранилище);
	
	Если ЗагруженоУспешно Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Перед сохранением в файл элемент должен быть записан.
		|Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьНастройкиВФайлЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиВФайлНепосредственно();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайлЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	СохранитьНастройкиВФайлНепосредственно();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайлНепосредственно()
	
	Перем ДиалогВыбораФайла, Настройки;
	
	Настройки = ПолучитьНастройкиИзХранилища();
	Если Настройки = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Невозможно сохранить в файл. Не заполнены данные настроек.'"));
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Сохранить настройки в файл'");
	ДиалогВыбораФайла.Фильтр = ПолучитьСтрокуФильтраДляДиалогаВыбораФайла();
	ДиалогВыбораФайла.ПолноеИмяФайла = Объект.Наименование;
	
	ДополнительныеПараметры = Новый Структура("Настройки", Настройки);
	ОписаниеОповещения =
		Новый ОписаниеОповещения("СохранитьНастройкиВФайлНепосредственноЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайлНепосредственноЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ДополнительныеПараметры.Настройки;
	Настройки.Записать(ВыбранныеФайлы[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьКолонки(Команда)
	
	НомерКолонки = 1;
	Для Каждого Реквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		Если Реквизит.Пометка Тогда
			Если НЕ Реквизит.НомерКолонки = НомерКолонки Тогда
				Реквизит.НомерКолонки = НомерКолонки;
			КонецЕсли;
			НомерКолонки = НомерКолонки + 1;
		Иначе
			Реквизит.НомерКолонки = 0;
		КонецЕсли;
		
		Если Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Искать" Тогда
			Реквизит.РежимЗагрузки = "Устанавливать"
		ИначеЕсли НЕ Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Устанавливать" Тогда
			Реквизит.РежимЗагрузки = "Искать"
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	ИзмененаРучнаяНумерацияКолонок = Истина;
	ТекущийЭлемент = Элементы.ТаблицаЗагружаемыхРеквизитов;
	ПодсветитьВыбраннуюКолонку(Элементы.ТаблицаЗагружаемыхРеквизитов);
	РазобратьсяСОформлениемСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяНумерацияКолонокТабличногоДокумента(Команда)
	
	УстановитьРучнаяНумерацияКолонок();
	Элементы.ТаблицаЗагружаемыхРеквизитовПеренумероватьКолонки.Доступность                 = РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.ТаблицаЗагружаемыхРеквизитовНомерКолонки.Видимость                            = РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.ТаблицаЗагружаемыхРеквизитовРучнаяНумерацияКолонокТабличногоДокумента.Пометка = РучнаяНумерацияКолонокТабличногоДокумента;
	ИзмененаРучнаяНумерацияКолонок = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьТабличныйДокумент()
	
	Если ОтображениеТабличногоДокумента Тогда
		Элементы.тТабличныйДокумент.Заголовок= НСтр("ru = 'Свернуть табличный документ'");
		Элементы.ГруппаТабличныйДокумент.Видимость = Истина;
		Элементы.ФайлДляИнтерактивнойНастройки.Доступность = Истина;
	Иначе
		Элементы.тТабличныйДокумент.Заголовок= НСтр("ru = 'Развернуть табличный документ'");
		Элементы.ГруппаТабличныйДокумент.Видимость = Ложь;
		Элементы.ФайлДляИнтерактивнойНастройки.Доступность = Ложь;
	КонецЕсли; 
	
	ОтображениеТабличногоДокумента = НЕ ОтображениеТабличногоДокумента;
	РазвернутТабличныйДокумент = Истина;
	ПодсветитьВыбраннуюКолонку(Элементы.ТаблицаЗагружаемыхРеквизитов);
	РазобратьсяСОформлениемСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура РасставитьПометкиНаКнопках(НомерКолонки)
	
	Если ОтображениеТабличногоДокумента Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПомеченныхКолонок = Новый Массив;
	СтрокиТЧ = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("НомерКолонки", НомерКолонки));
	
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		ИменаПомеченныхКолонок.Добавить("ПодключаемаяКнопка_"+СокрЛП(СтрокаТЧ.ИмяРеквизита));
	КонецЦикла;
	
	Для Каждого Кнопка Из Элементы.ТабличныйДокументКонтекстноеМеню.ПодчиненныеЭлементы Цикл
		Кнопка.Пометка = ИменаПомеченныхКолонок.Найти(Кнопка.Имя)<>Неопределено;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РазобратьсяСОформлениемСтрок()
	
	НомерКолонки = ТабличныйДокумент.ТекущаяОбласть.Лево;
	Если ТекущийЭлемент <> Элементы.ТабличныйДокумент Тогда
		НомерКолонки = 0;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗагружаемыхРеквизитов Цикл
		СтрокаТаблицы.ПодсвечиватьСтроку = ?(НомерКолонки = 0, Ложь, НомерКолонки = СтрокаТаблицы.НомерКолонки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьВыбраннуюКолонку(ТекТаблицаФормы)
	
	Если НЕ Элементы.ГруппаТабличныйДокумент.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекТаблицаФормы = Неопределено И (ИзмененаРучнаяНумерацияКолонок ИЛИ РазвернутТабличныйДокумент) Тогда
		РазвернутТабличныйДокумент = Ложь;
		ИзмененаРучнаяНумерацияКолонок = Ложь;
		Возврат;
	КонецЕсли;
	
	ТипЛинииРамки 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1, 0);

	ЦветРамки = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветФонаКнопки");
	
	ТекОбласть 				= ТабличныйДокумент.Область(1,1,ТабличныйДокумент.ВысотаТаблицы,ТабличныйДокумент.ШиринаТаблицы);
	ТекОбласть.ЦветФона 	= ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветФонаПоля");

	Если ТекТаблицаФормы = Неопределено Тогда
		// спозиционировались на колонке
		НомерКолонкиПодсветки = ТабличныйДокумент.ТекущаяОбласть.Лево;
	Иначе
		ТекСтрока 		= ТекТаблицаФормы.ТекущиеДанные;
		Если ТекСтрока = Неопределено ИЛИ ТекСтрока.НомерКолонки = 0 Тогда
			Возврат;
		КонецЕсли;
		НомерКолонкиПодсветки = ТекСтрока.НомерКолонки;
	КонецЕсли;
	
	ТекОбласть = ТабличныйДокумент.Область(1, НомерКолонкиПодсветки, ТабличныйДокумент.ВысотаТаблицы, НомерКолонкиПодсветки);
	ТекОбласть.ЦветФона 	= ОбщегоНазначенияВызовСервера.ЦветСтиля("НедоступныеДанныеЦвет");
	
	Если ТекТаблицаФормы<>Неопределено Тогда
		ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, НомерКолонкиПодсветки, 1, НомерКолонкиПодсветки);
	КонецЕсли;
	
	ТабличныйДокумент.ОтображатьСетку = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивКнопок()
	
	МассивКнопокДляУдаления = Новый Массив;
	Для Каждого СуществующаяКнопка Из Элементы.ТабличныйДокументКонтекстноеМеню.ПодчиненныеЭлементы Цикл
		МассивКнопокДляУдаления.Добавить(СуществующаяКнопка);
	КонецЦикла;
	
	Для Каждого Кнопка Из МассивКнопокДляУдаления Цикл
		Попытка
			Команды.Удалить(Кнопка.Имя);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при удалении команды'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + СокрЛП(Кнопка.Имя), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Попытка
			Элементы.Удалить(Кнопка);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при удалении команды'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + СокрЛП(Кнопка.Имя), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	ИмяДействия = "ПодключаемыеКнопкиНажатие";
	Для Каждого СтрокаТЧ Из ТаблицаЗагружаемыхРеквизитов Цикл
		Если СтрокаТЧ.ЭтоДополнительныйРеквизит Тогда
			Продолжить;
		КонецЕсли;
		ИмяКнопки = "ПодключаемаяКнопка_"+СокрЛП(СтрокаТЧ.ИмяРеквизита);
		Команда = Команды.Найти(ИмяКнопки);
		
		Если Команда = Неопределено Тогда
			Команда = Команды.Добавить(ИмяКнопки);
		КонецЕсли;
		
		Кнопка = Элементы.Добавить(ИмяКнопки,Тип("КнопкаФормы"), Элементы.ТабличныйДокументКонтекстноеМеню);
		Команда.Действие = ИмяДействия;
		Кнопка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), СтрокаТЧ.ПредставлениеРеквизита);
		Кнопка.ИмяКоманды = ИмяКнопки;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция СформироватьНаименование()
	
	Если ПустаяСтрока(Объект.ПредставлениеПрикладногоОбъекта) Тогда
		Возврат "";
	КонецЕсли;
	
	НовоеНаименование = Объект.ПредставлениеПрикладногоОбъекта;
	
	Если НЕ ПустаяСтрока(Объект.ПредставлениеТабличнойЧасти) И НЕ Объект.ТипПрикладногоОбъекта=ПредопределенноеЗначение("Перечисление.ТипыПрикладныхОбъектов.Справочник") Тогда
		Возврат НовоеНаименование+" ("+Объект.ПредставлениеТабличнойЧасти+")";
	КонецЕсли;
	
	Возврат НовоеНаименование;
	
КонецФункции 

&НаКлиенте
Процедура ОбновитьНомераСтрокВыгружаемыхРеквизитов()
	
	Для Каждого Строка Из ВыгружаемыеРеквизиты Цикл
		Строка.НомерСтроки = ВыгружаемыеРеквизиты.Индекс(Строка)+1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция Транслитерация(Текст)
	
	Если Текст = НСтр("ru = 'Количество упаковок'") Тогда
		Возврат "Kol_upakov";
	КонецЕсли;
	
	РезультирующийТекст = "";
	ДлинаТекста = СтрДлина(Текст);
	Для Сч = 1 По ДлинаТекста Цикл
		Символ = Сред(Текст,Сч,1);
		КодСимвола = КодСимвола(Символ);
		
		Латинская = (КодСимвола>=КодСимвола("A") И КодСимвола<=КодСимвола("Z")) ИЛИ (КодСимвола>=КодСимвола("a") И КодСимвола<=КодСимвола("z"));
		
		Если НЕ Латинская Тогда
			РусскаяЗаглавная = (КодСимвола>=КодСимвола("А") И КодСимвола<=КодСимвола("Я")) ИЛИ Символ = "Ё";
			Соответствие = СписокСоответствийТранслитерации.НайтиПоЗначению(НРег(Символ));
			Если Соответствие = Неопределено Тогда
				Символ = "";
			Иначе
				Символ = Соответствие.Представление;
				Если РусскаяЗаглавная Тогда
					ПервыйСимвол = Сред(Символ,1,1);
					Символ = ВРег(ПервыйСимвол)+Сред(Символ,2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		РезультирующийТекст = РезультирующийТекст + Символ;
	КонецЦикла;
	
	Пока Истина Цикл
		Если Лев(РезультирующийТекст, 1)="_" Тогда
			РезультирующийТекст = Сред(РезультирующийТекст, 2);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультирующийТекст;
	
КонецФункции

&НаСервере
Процедура НастроитьДоступностьПоляОбработки()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Элементы.ИспользоватьВнешнийМодульПреобразованияФайла.Видимость = Истина;
		Элементы.ОбработкаПреобразования.Видимость = Истина;
		Если ИспользоватьВнешнийМодульПреобразованияФайла Тогда
			Элементы.ОбработкаПреобразования.Доступность = Истина;
			Элементы.ОбработкаПреобразования.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ОбработкаПреобразования.Доступность = Ложь;
			Элементы.ОбработкаПреобразования.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ИспользоватьВнешнийМодульПреобразованияФайла.Видимость = Ложь;
		Элементы.ОбработкаПреобразования.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных(РеквизитПоиска, ОписаниеТиповРеквизита, РеквизитИскатьПо, РеквизитЗначениеПоУмолчанию)
	
	Возврат ЗагрузкаИзЭлектронныхДокументовВызовСервера.ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных(РеквизитПоиска, ОписаниеТиповРеквизита, РеквизитИскатьПо, РеквизитЗначениеПоУмолчанию);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных(ОписаниеТиповРеквизита, РеквизитЗначениеПоУмолчанию)
	
	Возврат ЗагрузкаИзЭлектронныхДокументовВызовСервера.ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных(ОписаниеТиповРеквизита, РеквизитЗначениеПоУмолчанию);
	
КонецФункции

&НаСервере
Процедура Инициализация()
	
	МенеджерыОбъектовМетаданных = Новый Структура();
	МенеджерыОбъектовМетаданных.Вставить("Справочники",             Справочники);
	МенеджерыОбъектовМетаданных.Вставить("Перечисления",            Перечисления);
	МенеджерыОбъектовМетаданных.Вставить("Документы",               Документы);
	МенеджерыОбъектовМетаданных.Вставить("ПланыВидовХарактеристик", ПланыВидовХарактеристик);
	МенеджерыОбъектовМетаданных.Вставить("ПланыСчетов",             ПланыСчетов);
	МенеджерыОбъектовМетаданных.Вставить("ПланыВидовРасчета",       ПланыВидовРасчета);
	МенеджерыОбъектовМетаданных.Вставить("БизнесПроцессы",          БизнесПроцессы);
	МенеджерыОбъектовМетаданных.Вставить("Задачи",                  Задачи);
	
	АдресХранилищаМенеджерыОбъектовМетаданных = ПоместитьВоВременноеХранилище(МенеджерыОбъектовМетаданных, УникальныйИдентификатор);
	
	КешМенеджеровПоТипу = Новый Соответствие;
	
	Картинка = БиблиотекаКартинок.СправочникОбъект; // Доступ через точку сильно замедляет открытие формы
	Для Каждого ОбъектМетаданныхДокумент Из Метаданные.Справочники  Цикл
		СписокСправочниковКЕШ.Добавить(ОбъектМетаданныхДокумент.Имя,ОбъектМетаданныхДокумент.Представление(),,Картинка);
	КонецЦикла;
	
	Картинка = БиблиотекаКартинок.ДокументОбъект; // Доступ через точку сильно замедляет открытие формы
	Для Каждого ОбъектМетаданныхДокумент Из Метаданные.Документы Цикл
		Если ОбъектМетаданныхДокумент.ТабличныеЧасти.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		СписокДокументовКЕШ.Добавить(ОбъектМетаданныхДокумент.Имя,ОбъектМетаданныхДокумент.Представление(),,Картинка);
	КонецЦикла;
	
	Картинка = БиблиотекаКартинок.Обработка; // Доступ через точку сильно замедляет открытие формы
	Для Каждого ОбъектМетаданныхОбработка Из Метаданные.Обработки Цикл
		Если ОбъектМетаданныхОбработка.ТабличныеЧасти.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		СписокОбработокКЕШ.Добавить(ОбъектМетаданныхОбработка.Имя,ОбъектМетаданныхОбработка.Представление(),,Картинка);
	КонецЦикла;
	
	Картинка = БиблиотекаКартинок.РегистрСведений; // Доступ через точку сильно замедляет открытие формы
	Для Каждого ОбъектМетаданныхРегистр Из Метаданные.РегистрыСведений Цикл
		Если ОбъектМетаданныхРегистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			Продолжить;
		КонецЕсли;
		СписокРегистровСведенийКЕШ.Добавить(ОбъектМетаданныхРегистр.Имя,ОбъектМетаданныхРегистр.Представление(),,Картинка);
	КонецЦикла;
	// Заполним списки выбора для настроек выгрузки
	СписокВыбора = Элементы.ВыгружаемыеРеквизиты.ПодчиненныеЭлементы.ВыгружаемыеРеквизитыТипПоля.СписокВыбора;
	СписокВыбора.Добавить("Поле объекта");
	СписокВыбора.Добавить("Выражение");
	
	Элементы.ФорматФайла.СписокВыбора.Добавить("DBF");
	ФорматФайла = Элементы.ФорматФайла.СписокВыбора[0].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияСписковИСоответствий()
	
	СоответствиеТиповИПредставленийDBF = Новый Соответствие;
	СоответствиеТиповИПредставленийDBF.Вставить("S", "Строка");
	СоответствиеТиповИПредставленийDBF.Вставить("N", "Число");
	СоответствиеТиповИПредставленийDBF.Вставить("L", "Булево");
	СоответствиеТиповИПредставленийDBF.Вставить("D", "Дата");
	СписокВыбора = Элементы.ВыгружаемыеРеквизиты.ПодчиненныеЭлементы.ВыгружаемыеРеквизитыТип.СписокВыбора;
	
	Для Каждого КлючИЗначение Из СоответствиеТиповИПредставленийDBF Цикл
		СписокВыбора.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	СписокСоответствийТранслитерации = Новый СписокЗначений;
	СписокСоответствийТранслитерации.Добавить("й","iy");
	СписокСоответствийТранслитерации.Добавить("ц","ts");
	СписокСоответствийТранслитерации.Добавить("у","u");
	СписокСоответствийТранслитерации.Добавить("к","k");
	СписокСоответствийТранслитерации.Добавить("е","e");
	СписокСоответствийТранслитерации.Добавить("н","n");
	СписокСоответствийТранслитерации.Добавить("г","g");
	СписокСоответствийТранслитерации.Добавить("ш","sh");
	СписокСоответствийТранслитерации.Добавить("щ","shch");
	СписокСоответствийТранслитерации.Добавить("з","z");
	СписокСоответствийТранслитерации.Добавить("х","h");
	СписокСоответствийТранслитерации.Добавить("ъ","");
	СписокСоответствийТранслитерации.Добавить("ф","f");
	СписокСоответствийТранслитерации.Добавить("ы","y");
	СписокСоответствийТранслитерации.Добавить("в","v");
	СписокСоответствийТранслитерации.Добавить("а","a");
	СписокСоответствийТранслитерации.Добавить("п","p");
	СписокСоответствийТранслитерации.Добавить("р","r");
	СписокСоответствийТранслитерации.Добавить("о","o");
	СписокСоответствийТранслитерации.Добавить("л","l");
	СписокСоответствийТранслитерации.Добавить("д","d");
	СписокСоответствийТранслитерации.Добавить("ж","zh");
	СписокСоответствийТранслитерации.Добавить("э","e");
	СписокСоответствийТранслитерации.Добавить("я","ya");
	СписокСоответствийТранслитерации.Добавить("ч","ch");
	СписокСоответствийТранслитерации.Добавить("с","s");
	СписокСоответствийТранслитерации.Добавить("м","m");
	СписокСоответствийТранслитерации.Добавить("и","i");
	СписокСоответствийТранслитерации.Добавить("т","t");
	СписокСоответствийТранслитерации.Добавить("ь","");
	СписокСоответствийТранслитерации.Добавить("б","b");
	СписокСоответствийТранслитерации.Добавить("ю","you");
	СписокСоответствийТранслитерации.Добавить("ё","ye");
	СписокСоответствийТранслитерации.Добавить(" ","_");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИсточник(ЗаполнитьПредставления = Ложь)
	
	МетаданныеИсточника = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ПолучитьМетаданныеИсточника(Объект, ЗаполнитьПредставления);
	Если МетаданныеИсточника = Неопределено Тогда
		АдресХранилищаМетаданныеИсточника = "";
	Иначе
		АдресХранилищаМетаданныеИсточника = ПоместитьВоВременноеХранилище(МетаданныеИсточника.ПолноеИмя(), УникальныйИдентификатор);
	КонецЕсли;
	
	Если Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных Тогда
		ЗаполнитьНастройкиКолонок();
	ИначеЕсли Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных Тогда
		ЗаполнитьНастройкиКолонокВыгрузки();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьМетаданныеИсточникаИзВременногоХранилища()
	
	Если ЗначениеЗаполнено(АдресХранилищаМетаданныеИсточника) И МетаданныеИсточника = Неопределено Тогда
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(ПолучитьИзВременногоХранилища(АдресХранилищаМетаданныеИсточника));
	КонецЕсли;
	
	Возврат МетаданныеИсточника;
	
КонецФункции

&НаСервере
Процедура УстановитьРучнаяНумерацияКолонок()
	
	РучнаяНумерацияКолонокТабличногоДокумента = НЕ РучнаяНумерацияКолонокТабличногоДокумента;
	
КонецПроцедуры

// НАСТРОЙКИ ВЫГРУЗКИ

&НаСервере
Функция ЗаполнитьТабличныйДокументИзНастроекВыгрузки()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточникаИзВременногоХранилища();
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Макет = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ПолучитьМакет("МакетСохраненияНастроекВыгрузки");
	ОбластьШапки  = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	
	Если Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ Тогда
		ТипОбъекта = НСтр("ru = 'табличная часть документа'");
	ИначеЕсли Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник Тогда
		ТипОбъекта = "справочник";
	ИначеЕсли Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Обработка Тогда
		ТипОбъекта = НСтр("ru = 'табличная часть обработки'");
	ИначеЕсли Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.РегистрСведений Тогда
		ТипОбъекта = НСтр("ru = 'регистр сведений'");
	КонецЕсли;
	
	ОбластьШапки.Параметры.ТипОбъекта  = ТипОбъекта;
	ОбластьШапки.Параметры.Объект      = МетаданныеИсточника.ПолноеИмя();
	ОбластьШапки.Параметры.ФорматФайла = ФорматФайла;
	ОбластьШапки.Параметры.Кодировка   = Кодировка;
	ОбластьШапки.Параметры.ПередВыгрузкойОбъекта = ПередВыгрузкойОбъекта;
	ОбластьШапки.Параметры.ПослеДобавленияСтроки = ПослеДобавленияСтроки;
	ДокументРезультат.Вывести(ОбластьШапки);
	
	Для Каждого Строка Из ВыгружаемыеРеквизиты Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтроки.Параметры, Строка, "ТипПоля,Представление,ПолеДБФ,Тип,Данные");
		ОбластьСтроки.Параметры.Длина       = Формат(Строка.Длина,"ЧН=0; ЧГ=0");
		ОбластьСтроки.Параметры.Точность    = Формат(Строка.Точность,"ЧН=0; ЧГ=0");
		ДокументРезультат.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции 

&НаСервере
Функция ЗаполнитьНастройкиВыгрузкиИзТабличногоДокумента(Настройки)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточникаИзВременногоХранилища();
	
	СтруктураНастроек = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ПолучитьНастройкиВыгрузкиИзТабличногоДокумента(Настройки);
	Если СтруктураНастроек=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мТипПрикладногоОбъекта = СтруктураНастроек.ТипПрикладногоОбъекта;
	мМетаданныеИсточника   = СтруктураНастроек.МетаданныеИсточника;
	мФорматФайла           = СтруктураНастроек.ФорматФайла;
	мКодировка             = СтруктураНастроек.Кодировка;
	мВыгружаемыеРеквизиты  = СтруктураНастроек.ВыгружаемыеРеквизиты;
	мПередВыгрузкойОбъекта = СтруктураНастроек.ПередВыгрузкойОбъекта;
	мПослеДобавленияСтроки = СтруктураНастроек.ПослеДобавленияСтроки;
	
	Если Объект.ВариантИспользованияНастройки <> Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных Тогда
		Если ЗначениеЗаполнено(Объект.ВариантИспользованияНастройки) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'Вариант использования настройки изменен на %1'"), Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных;
	КонецЕсли;
	
	Если Объект.ТипПрикладногоОбъекта <> мТипПрикладногоОбъекта Тогда
		Если ЗначениеЗаполнено(Объект.ТипПрикладногоОбъекта) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'Тип объекта изменен на %1'"), мТипПрикладногоОбъекта);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		Объект.ТипПрикладногоОбъекта = мТипПрикладногоОбъекта;
	КонецЕсли;
	
	Если МетаданныеИсточника<>мМетаданныеИсточника Тогда
		Если МетаданныеИсточника<>Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'Объект и/или табличная часть изменена %1 -> %2'"), МетаданныеИсточника.ПолноеИмя(), мМетаданныеИсточника.ПолноеИмя());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		// Заполним служебную переменную
		МетаданныеИсточника = мМетаданныеИсточника;
		// Заполним реквизиты справочника настроек
		Если Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ Тогда
			Объект.ИмяПрикладногоОбъекта           = мМетаданныеИсточника.Родитель().Имя;
			Объект.ИмяТабличнойЧасти               = мМетаданныеИсточника.Имя;
			Объект.ПредставлениеПрикладногоОбъекта = мМетаданныеИсточника.Родитель().Представление();
			Объект.ПредставлениеТабличнойЧасти     = мМетаданныеИсточника.Представление();
		ИначеЕсли Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник Тогда
			Объект.ИмяПрикладногоОбъекта           = мМетаданныеИсточника.Имя;
			Объект.ИмяТабличнойЧасти               = "";
			Объект.ПредставлениеПрикладногоОбъекта = мМетаданныеИсточника.Представление();
			Объект.ПредставлениеТабличнойЧасти     = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокТиповПрикладногоОбъекта();
	ЗаполнитьСписокПрикладныхОбъектов();
	ЗаполнитьСписокТабличныхЧастей();
	
	ФорматФайла = мФорматФайла;
	Кодировка   = мКодировка;
	
	ПередВыгрузкойОбъекта = мПередВыгрузкойОбъекта;
	ПослеДобавленияСтроки = мПослеДобавленияСтроки;
	
	ЗаполнитьНастройкиКолонокВыгрузки(мВыгружаемыеРеквизиты);
	
	Возврат Истина;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьНастройкиКолонокВыгрузки(ИсходныеДанныеТабличнойЧасти=Неопределено)
	
	ВыгружаемыеРеквизиты.Очистить();
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточникаИзВременногоХранилища();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныеДанныеТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ИсходныеДанныеТабличнойЧасти Цикл
		СтрокаНастройки = ВыгружаемыеРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНастройки,Строка);
	КонецЦикла;
	
КонецПроцедуры 

// НАСТРОЙКИ ЗАГРУЗКИ - ТАБЛИЦА ЗАГРУЖАМЫХ РЕКВИЗИТОВ

&НаСервере
Процедура ЗаполнитьНастройкиКолонокСправочника()
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточникаИзВременногоХранилища();
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Код";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Код";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		Иначе
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаНаименования > 0 Тогда
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаНаименования));
	КонецЕсли;
	
	ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "ПометкаУдаления";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Пометка удаления'");
	ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Ложь;
	ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(МассивБулево);
	
	Если МетаданныеИсточника.Владельцы.Количество() > 0 Тогда
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Владелец";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Владелец";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		СтрокаОписанияТипов = "";
			
		Для Каждого ТекВладелец Из МетаданныеИсточника.Владельцы Цикл
			СтрокаОписанияТипов = ?(ПустаяСтрока(СтрокаОписанияТипов),"",СтрокаОписанияТипов + ", ") + ТекВладелец.ПолноеИмя();
		КонецЦикла;
			
		СтрокаОписанияТипов = СтрЗаменить(СтрокаОписанияТипов,".","Ссылка.");
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрокаОписанияТипов);
	КонецЕсли;
	
	Если МетаданныеИсточника.Иерархический Тогда
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Родитель";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Родитель";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
		Если МетаданныеИсточника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			ЗагружаемыйРеквизит.ВыборГрупп = "Группы";
		КонецЕсли;
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "ЭтоГруппа";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Это группа'");
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Ложь;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(МассивБулево);
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если НЕ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			Если Реквизит.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
				ЗагружаемыйРеквизит.ВыборГрупп = "Группы";
			ИначеЕсли  Реквизит.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы Тогда
				ЗагружаемыйРеквизит.ВыборГрупп = НСтр("ru = 'Группы и элементы'");
			КонецЕсли;
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = НЕ Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
		ЗначениеСостава = Реквизит.Состав.Найти(МетаданныеИсточника);
		Если ЗначениеСостава=Неопределено ИЛИ (НЕ ЗначениеСостава.Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда
			Продолжить;
		КонецЕсли;
		ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		Если Реквизит.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
			ЗагружаемыйРеквизит.ВыборГрупп = "Группы";
		ИначеЕсли  Реквизит.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы Тогда
			ЗагружаемыйРеквизит.ВыборГрупп = НСтр("ru = 'Группы и элементы'");
		КонецЕсли;
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = НЕ Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Реквизит.Тип;
	КонецЦикла;
	
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.ДополнитьДополнительныеРеквизитыВТаблицуРеквизитов(МетаданныеИсточника, ТаблицаЗагружаемыхРеквизитов, ДополнительныеРеквизитыПоТипуНоменклатуры, ЗагружатьДополнительныеРеквизитыИСведения, ДополнительныеРеквизитыИСведенияТолькоОбщие);
	
	Для Каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.ОписаниеТипов = ЗагружаемыйРеквизит.ДоступноеОписаниеТипов;
	КонецЦикла;
	
	Для Каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит, ТаблицаЗагружаемыхРеквизитов);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТаблицаЗагружаемыхРеквизитов);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если СтрНайти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
			ИначеЕсли СтрНайти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
			Иначе
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
			КонецЕсли;
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьНастройкиКолонокТабличнойЧасти()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточникаИзВременногоХранилища();
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеИсточника) Тогда
		Для Каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Реквизит.Тип;
			ЗагружаемыйРеквизит.ОписаниеТипов          = Реквизит.Тип;
		КонецЦикла;
		
		Для Каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Реквизит.Тип;
			ЗагружаемыйРеквизит.ОписаниеТипов          = Реквизит.Тип;
		КонецЦикла;
		
		Если НЕ МетаданныеИсточника.ПериодичностьРегистраСведений = 
			Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			
			Реквизит = МетаданныеИсточника.СтандартныеРеквизиты.Период;
			
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Реквизит.Тип;
			ЗагружаемыйРеквизит.ОписаниеТипов          = Реквизит.Тип;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Реквизит.Тип;
		ЗагружаемыйРеквизит.ОписаниеТипов          = Реквизит.Тип;
	КонецЦикла;
	
	Для Каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит, ТаблицаЗагружаемыхРеквизитов);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТаблицаЗагружаемыхРеквизитов);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если СтрНайти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
			ИначеЕсли СтрНайти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
			Иначе
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
			КонецЕсли;
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
		ЗагружаемыйРеквизит.РежимПоиска = НСтр("ru = 'По равному значению'");
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьНастройкиКолонок(СтруктураУмолчаний=Неопределено)
	
	ТаблицаЗагружаемыхРеквизитов.Очистить();
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточникаИзВременногоХранилища();
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Заполним оформление из основной формы документа по табличному полю
	Оформление = Неопределено;
	Если НЕ ЗначениеЗаполнено(Объект.ТипПрикладногоОбъекта) Тогда
		Если Метаданные.РегистрыСведений.Содержит(МетаданныеИсточника) Тогда
			ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.РегистрСведений;
			
		ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеИсточника.Родитель()) Тогда
			ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник;
			
		ИначеЕсли Метаданные.Обработки.Содержит(МетаданныеИсточника.Родитель()) Тогда
			ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Обработка;
			
		Иначе
			ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ;
		КонецЕсли;
	КонецЕсли;
		
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеИсточника) Тогда
		МетаданныеРодителяИсточника = МетаданныеИсточника;
		ЗаполнитьНастройкиКолонокТабличнойЧасти();
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеИсточника) Тогда
		МетаданныеРодителяИсточника = МетаданныеИсточника;
		Если НЕ ЗначениеЗаполнено(Объект.ИмяТабличнойЧасти) Тогда
			ЗаполнитьНастройкиКолонокСправочника();
		Иначе
			ЗаполнитьНастройкиКолонокТабличнойЧасти();
		КонецЕсли;
	Иначе
		МетаданныеРодителяИсточника = МетаданныеИсточника.Родитель();
		ЗаполнитьНастройкиКолонокТабличнойЧасти();
	КонецЕсли;
	
	Если Оформление <> Неопределено Тогда
		// Если есть табличное поле, настроенное в основной форме объекта, 
		НомерКолонкиОформления = 0;
		НомерКолонки = 1;
		Для Каждого Колонка Из Оформление.Колонки Цикл
			ЗагружаемыйРеквизит = Объект.ТаблицаЗагружаемыхРеквизитов.Найти(Колонка.ДанныеФлажка,"ИмяРеквизита");
			Если ЗагружаемыйРеквизит<>Неопределено Тогда
				Индекс = Объект.ТаблицаЗагружаемыхРеквизитов.Индекс(ЗагружаемыйРеквизит);
				Если Индекс >= НомерКолонкиОформления  Тогда
					
					ЗагружаемыйРеквизит.ШиринаКолонки = 3;
					Объект.ТаблицаЗагружаемыхРеквизитов.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
					
					Если Колонка.Видимость Тогда
						ЗагружаемыйРеквизит.Пометка = Колонка.Видимость;
						ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
						НомерКолонки = НомерКолонки + 1;
					КонецЕсли;
					
					НомерКолонкиОформления = НомерКолонкиОформления + 1;
				КонецЕсли;
			КонецЕсли;
			
			ЗагружаемыйРеквизит = Объект.ТаблицаЗагружаемыхРеквизитов.Найти(Колонка.Данные,"ИмяРеквизита");
			Если ЗагружаемыйРеквизит<>Неопределено Тогда
				Индекс = Объект.ТаблицаЗагружаемыхРеквизитов.Индекс(ЗагружаемыйРеквизит);
				Если Индекс >= НомерКолонкиОформления Тогда
					ЗагружаемыйРеквизит.ШиринаКолонки = Колонка.Ширина;
					Объект.ТаблицаЗагружаемыхРеквизитов.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
					Если Колонка.Видимость Тогда
						ЗагружаемыйРеквизит.Пометка = Колонка.Видимость;
						ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
						НомерКолонки = НомерКолонки + 1;
					КонецЕсли;
					НомерКолонкиОформления = НомерКолонкиОформления + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СтруктураУмолчаний <> Неопределено Тогда
		НомерКолонкиОформления = 0;
		Для Каждого КлючИЗначение Из СтруктураУмолчаний Цикл
			Колонка = КлючИЗначение.Значение;
			ЗагружаемыйРеквизит = Неопределено;
			ОтборСтрок = Новый Структура("ИмяРеквизита",Колонка.ИмяРеквизита);
			СтрокиТаблицы = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(ОтборСтрок);
			Если СтрокиТаблицы.Количество() > 0 Тогда
				ЗагружаемыйРеквизит = СтрокиТаблицы[0];
			КонецЕсли;
			
			Если НЕ ЗагружаемыйРеквизит = Неопределено Тогда
				Индекс = ТаблицаЗагружаемыхРеквизитов.Индекс(ЗагружаемыйРеквизит);
				Если Индекс >= НомерКолонкиОформления Тогда
					ЗаполнитьЗначенияСвойств(ЗагружаемыйРеквизит, Колонка);
					
					ТаблицаЗагружаемыхРеквизитов.Сдвинуть(Индекс, НомерКолонкиОформления - Индекс);
					НомерКолонкиОформления = НомерКолонкиОформления + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НомерКолонки = 1;
		Для Каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
			ЗагружаемыйРеквизит.Пометка      = Истина;
			ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

// НАСТРОЙКИ ЗАГРУЗКИ

&НаСервере
Функция ЗаполнитьНастройкиИзТабличногоДокумента(Настройки)
	
	Если ТипЗнч(Настройки)<>Тип("ТабличныйДокумент") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ВерсияОбработки = СокрЛП(Настройки.Область("R1C5").Текст); 
		
		ТекстВосстановленногоРежимаЗагрузки = СокрЛП(Настройки.Область(?(ВерсияОбработки = "1.1","R1","R2") + "C5").Текст);
		Если (ТекстВосстановленногоРежимаЗагрузки<> НСтр("ru = 'в табличную часть'") 
			И ТекстВосстановленногоРежимаЗагрузки<> НСтр("ru = 'в справочник'")) 
			И ТекстВосстановленногоРежимаЗагрузки<>"Х" 
			И ТекстВосстановленногоРежимаЗагрузки<>НСтр("ru = 'в регистр сведений'") Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Файл не содержит настройки загрузки данных'"));
			Возврат Ложь;
		КонецЕсли;

		фМетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Настройки.Область(?(ВерсияОбработки = "1.1","R2","R3") + "C5").Текст);
		Если фМетаданныеИсточника = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Ошибка определения метаданных'"));
			Возврат Ложь;
		КонецЕсли;

		СтруктураФлагов = ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ПолучитьПараметрыПоВерсииОбработкиДляСправочникаНастроек(ВерсияОбработки, Настройки);
		ТекущаяСтрока = СтруктураФлагов.ТекущаяСтрока;
		// Структура реквизитов табличной части
		СтруктураУмолчаний = Новый Структура;	

		ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
		ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
		Пока НЕ ПустаяСтрока(ИмяРеквизита) Цикл
			СтруктураУмолчанияРеквизита = Новый Структура;
			СтруктураУмолчанияРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
			СтруктураУмолчанияРеквизита.Вставить("Пометка", НЕ ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C1").Текст));
			СтруктураУмолчанияРеквизита.Вставить("ПолеПоиска", НЕ ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C3").Текст));
			
			Типы = Новый Массив;
			ОписаниеТиповСтрокой = Настройки.Область(ТекущаяСтрокаОбласти + "C4").Текст;
			Для к = 1 По СтрЧислоСтрок(ОписаниеТиповСтрокой)  Цикл
				КС = Неопределено;
				КЧ = Неопределено;
				КД = Неопределено;
				МассивЧастейТипа = ЗагрузкаИзЭлектронныхДокументовВызовСервера.РазложитьСтрокуВМассивПодстрок(НРег(СокрЛП(СтрПолучитьСтроку(ОписаниеТиповСтрокой,к ))), ",");
				Если МассивЧастейТипа.Количество() = 0 Тогда
					Продолжить;
				ИначеЕсли СтрНайти(МассивЧастейТипа[0], ".") Тогда
					Тип = Тип(СтрЗаменить(МассивЧастейТипа[0], ".", "Ссылка."));
				ИначеЕсли МассивЧастейТипа[0] = "строка" Тогда
					Тип = Тип("Строка");
					Если МассивЧастейТипа.Количество() = 2 Тогда
						КС = Новый КвалификаторыСтроки(ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПривестиКЧислу(МассивЧастейТипа[1]), ДопустимаяДлина.Переменная);
					ИначеЕсли МассивЧастейТипа.Количество() = 3 Тогда
						КС = Новый КвалификаторыСтроки(ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПривестиКЧислу(МассивЧастейТипа[1]), ДопустимаяДлина.Фиксированная);
					Иначе
						КС = Новый КвалификаторыСтроки;
					КонецЕсли;
				ИначеЕсли МассивЧастейТипа[0] = "число" Тогда
					Тип = Тип("Число");
					КЧ = Новый КвалификаторыЧисла(ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПривестиКЧислу(МассивЧастейТипа[1]),ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПривестиКЧислу(МассивЧастейТипа[2]),?(МассивЧастейТипа.Количество() = 4, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой));
				ИначеЕсли МассивЧастейТипа[0] = "булево" Тогда
					Тип = Тип("Булево");
				ИначеЕсли МассивЧастейТипа[0] = "дата" Тогда
					Тип = Тип("Дата");
					КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
				ИначеЕсли МассивЧастейТипа[0] = "время" Тогда
					Тип = Тип("Дата");
					КД = Новый КвалификаторыДаты(ЧастиДаты.Время);
				ИначеЕсли МассивЧастейТипа[0] = НСтр("ru = 'дата и время'") Тогда
					Тип = Тип("Дата");
					КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
				Иначе
					Продолжить;
				КонецЕсли;
				Типы.Добавить(Тип);
			КонецЦикла;
			ОписаниеТипов = Новый ОписаниеТипов(Типы, КЧ, КС, КД);
			СтруктураУмолчанияРеквизита.Вставить("ОписаниеТипов", ОписаниеТипов);
			
			РежимЗагрузкиРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C5").Текст;
			
			СтруктураУмолчанияРеквизита.Вставить("РежимЗагрузки",РежимЗагрузкиРеквизита);
			СтруктураУмолчанияРеквизита.Вставить("НомерКолонки", Настройки.Область(ТекущаяСтрокаОбласти + "C6").Текст);
			ЗначениеПоУмолчанию = Настройки.Область(ТекущаяСтрокаОбласти + "C7").Текст;
			НастройкаЗагрузки = Настройки.Область(ТекущаяСтрокаОбласти + "C13").Текст;
			ЭтоДополнительныйРеквизит = ?(ВерсияОбработки>="1.7", ЗначениеЗаполнено(Настройки.Область(ТекущаяСтрокаОбласти + "C14").Текст), Ложь);
			ЭтоСведение				  = ?(ВерсияОбработки>="1.7", ЗначениеЗаполнено(Настройки.Область(ТекущаяСтрокаОбласти + "C16").Текст), Ложь);
			СсылкаРеквизита = ?(ВерсияОбработки>="1.7", Настройки.Область(ТекущаяСтрокаОбласти + "C15").Текст, "");
			СтруктураУмолчанияРеквизита.Вставить("ЗначениеПоУмолчанию",?(ПустаяСтрока(ЗначениеПоУмолчанию), ОписаниеТипов.ПривестиЗначение(Неопределено), ЗначениеИзСтрокиВнутр(ЗначениеПоУмолчанию)));
			СтруктураУмолчанияРеквизита.Вставить("СсылкаРеквизита",?(ПустаяСтрока(СсылкаРеквизита), ОписаниеТипов.ПривестиЗначение(Неопределено), ЗначениеИзСтрокиВнутр(СсылкаРеквизита)));
			СтруктураУмолчанияРеквизита.Вставить("НастройкаЗагрузки",?(ПустаяСтрока(НастройкаЗагрузки), Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ПустаяСсылка(), ЗначениеИзСтрокиВнутр(НастройкаЗагрузки)));
			СтруктураУмолчанияРеквизита.Вставить("ЭтоДополнительныйРеквизит",ЭтоДополнительныйРеквизит);
			СтруктураУмолчанияРеквизита.Вставить("ЭтоСведение",ЭтоСведение);
			Если РежимЗагрузкиРеквизита = "Вычислять" Тогда
				СтруктураУмолчанияРеквизита.Вставить("Выражение",Настройки.Область(ТекущаяСтрокаОбласти + "C8").Текст);
			Иначе
				СтруктураУмолчанияРеквизита.Вставить("ИскатьПо",Настройки.Область(ТекущаяСтрокаОбласти + "C8").Текст);
				
				СвязьПоВладельцу   = Настройки.Область(ТекущаяСтрокаОбласти + "C9").Текст;
				СтруктураУмолчанияРеквизита.Вставить("СвязьПоВладельцу",?(Лев(СвязьПоВладельцу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоВладельцу), СвязьПоВладельцу));
				
				СвязьПоТипу        = Настройки.Область(ТекущаяСтрокаОбласти + "C10").Текст;
				СтруктураУмолчанияРеквизита.Вставить("СвязьПоТипу",?(Лев(СвязьПоТипу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоТипу), СвязьПоТипу));
				
				СтруктураУмолчанияРеквизита.Вставить("ЭлементСвязиПоТипу",ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПривестиКЧислу(Настройки.Область(ТекущаяСтрокаОбласти + "C11").Текст));
			КонецЕсли;
			СтруктураУмолчанияРеквизита.Вставить("РежимПоиска",?(ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C12").Текст), НСтр("ru = 'По равному значению'"),Настройки.Область(ТекущаяСтрокаОбласти + "C12").Текст));
			// Добавим в структуру реквизитов структуру реквизита
			СтруктураУмолчаний.Вставить(ИмяРеквизита,СтруктураУмолчанияРеквизита);
			
			ТекущаяСтрока = ТекущаяСтрока + 1;
			ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
			ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
		КонецЦикла;
		
		фПередЗаписьюОбъекта = Настройки.Область("R" + Формат(ТекущаяСтрока + 2, "ЧГ=") + "C3").Текст;
		фПриЗаписиОбъекта    = Настройки.Область("R" + Формат(ТекущаяСтрока + 3, "ЧГ=") + "C3").Текст;
		фПослеДобавленияСтроки = Настройки.Область("R" + Формат(ТекущаяСтрока + 4, "ЧГ=") + "C3").Текст;
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= '%1'"), ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	// Принимаем файл как корректный, переписываем значения реквизитов значениями из промежуточных переменных.
	Если Объект.ВариантИспользованияНастройки<>Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных Тогда
		Если ЗначениеЗаполнено(Объект.ВариантИспользованияНастройки) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'Вариант использования настройки изменен на %1'"), Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных;
	КонецЕсли;
	
	Если МетаданныеИсточника<>фМетаданныеИсточника Тогда
		Если МетаданныеИсточника<>Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'Объект и/или табличная часть изменена %1 -> %2'"), МетаданныеИсточника.ПолноеИмя(), фМетаданныеИсточника.ПолноеИмя());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		// Заполним служебную переменную
		МетаданныеИсточника = фМетаданныеИсточника;
		Если МетаданныеИсточника = Неопределено Тогда
			АдресХранилищаМетаданныеИсточника = "";
		Иначе
			АдресХранилищаМетаданныеИсточника = ПоместитьВоВременноеХранилище(МетаданныеИсточника.ПолноеИмя(), УникальныйИдентификатор);
		КонецЕсли;
		// Заполним реквизиты справочника настроек
		Если Метаданные.РегистрыСведений.Содержит(фМетаданныеИсточника) Тогда
			// это регистр сведений
			Объект.ТипПрикладногоОбъекта           = Перечисления.ТипыПрикладныхОбъектов.РегистрСведений;
			Объект.ИмяПрикладногоОбъекта           = фМетаданныеИсточника.Имя;
			Объект.ИмяТабличнойЧасти               = "";
			Объект.ПредставлениеПрикладногоОбъекта = фМетаданныеИсточника.Представление();
			Объект.ПредставлениеТабличнойЧасти     = "";
		ИначеЕсли Метаданные.Справочники.Содержит(фМетаданныеИсточника) Тогда
			// это справочник
			Объект.ТипПрикладногоОбъекта           = Перечисления.ТипыПрикладныхОбъектов.Справочник;
			Объект.ИмяПрикладногоОбъекта           = фМетаданныеИсточника.Имя;
			Объект.ИмяТабличнойЧасти               = "";
			Объект.ПредставлениеПрикладногоОбъекта = фМетаданныеИсточника.Представление();
			Объект.ПредставлениеТабличнойЧасти     = "";
		Иначе
			// это ТЧ, только надо разобраться, чья
			Если Метаданные.Документы.Содержит(фМетаданныеИсточника.Родитель()) Тогда
				Объект.ТипПрикладногоОбъекта           = Перечисления.ТипыПрикладныхОбъектов.Документ;
			ИначеЕсли Метаданные.Справочники.Содержит(фМетаданныеИсточника.Родитель()) Тогда
				Объект.ТипПрикладногоОбъекта           = Перечисления.ТипыПрикладныхОбъектов.Справочник;
			ИначеЕсли Метаданные.Обработки.Содержит(фМетаданныеИсточника.Родитель()) Тогда
				Объект.ТипПрикладногоОбъекта           = Перечисления.ТипыПрикладныхОбъектов.Обработка;
			КонецЕсли;
			Объект.ИмяПрикладногоОбъекта           = фМетаданныеИсточника.Родитель().Имя;
			Объект.ИмяТабличнойЧасти               = фМетаданныеИсточника.Имя;
			Объект.ПредставлениеПрикладногоОбъекта = фМетаданныеИсточника.Родитель().Представление();
			Объект.ПредставлениеТабличнойЧасти     = фМетаданныеИсточника.Представление();
		КонецЕсли;
	КонецЕсли;
	// Перезаполним списки выбора элементов форм
	ЗаполнитьСписокТиповПрикладногоОбъекта();
	ЗаполнитьСписокПрикладныхОбъектов();
	ЗаполнитьСписокТабличныхЧастей();
	// Заполним реквизиты формы
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,		СтруктураФлагов); 
	Если НЕ ЗначениеЗаполнено(СтруктураФлагов.ДополнительныеРеквизитыПоТипуНоменклатурыИзНастроек) Тогда
		ДополнительныеРеквизитыПоТипуНоменклатуры.Очистить();
	Иначе
		ДополнительныеРеквизитыПоТипуНоменклатуры = СтруктураФлагов.ДополнительныеРеквизитыПоТипуНоменклатурыИзНастроек.Скопировать();
	КонецЕсли;
	
	// Отдельно заполним флаг, он реквизит объекта
	Объект.НеСоздаватьНовыхЭлементов = СтруктураФлагов.НеСоздаватьНовыхЭлементов;
	
	Попытка
		ОбработкаПреобразования = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураФлагов.ИдентификаторОбработкиЗагрузкиИзXML));
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось получить ссылку'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	ПередЗаписьюОбъекта   = фПередЗаписьюОбъекта;
	ПриЗаписиОбъекта      = фПриЗаписиОбъекта;
	ПослеДобавленияСтроки = фПослеДобавленияСтроки;
	// Заполним список реквизитов ТЧ
	ЗаполнитьНастройкиКолонок(СтруктураУмолчаний);
	
	Возврат Истина;
	
КонецФункции 

&НаСервере
Функция ЗаполнитьТабличныйДокументИзНастроек()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточникаИзВременногоХранилища();
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МетаданныеИсточникаИзСправочника", МетаданныеИсточника);
	Если Метаданные.Справочники.Содержит(МетаданныеИсточника) Тогда
		РежимЗагрузки                             = 0;
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеИсточника) Тогда
		РежимЗагрузки                             = 2;
	Иначе
		РежимЗагрузки                             = 1;	
	КонецЕсли;
	СтруктураПараметров.Вставить("РежимЗагрузки", 								РежимЗагрузки);
	СтруктураПараметров.Вставить("НеСоздаватьНовыхЭлементов", 					Объект.НеСоздаватьНовыхЭлементов);
	СтруктураПараметров.Вставить("ЗамещатьСуществующиеЗаписи", 					Ложь);
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", 	РучнаяНумерацияКолонокТабличногоДокумента);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента", 		ПерваяСтрокаДанныхТабличногоДокумента);
	СтруктураПараметров.Вставить("ДействиеСЗагружаемымФайлом", 					ДействиеСЗагружаемымФайлом);
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика", 					флПоискПоПрайсуПоставщика);
	СтруктураПараметров.Вставить("КаталогАрхиваЗагруженныхФайлов", 				КаталогАрхиваЗагруженныхФайлов);
	СтруктураПараметров.Вставить("Табуляция", 									Табуляция);
	СтруктураПараметров.Вставить("Кодировка", 									Кодировка);
	СтруктураПараметров.Вставить("ИмяТаблицы", 									ИмяТаблицы);
	СтруктураПараметров.Вставить("НеОбновлятьСуществующиеЭлементы", 			НеОбновлятьСуществующиеЭлементы);
	СтруктураПараметров.Вставить("ИспользоватьВнешнийМодульПреобразованияФайла", ИспользоватьВнешнийМодульПреобразованияФайла);
	СтруктураПараметров.Вставить("ОбработкаПреобразования", 					ОбработкаПреобразования);
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 				ТаблицаЗагружаемыхРеквизитов.Выгрузить());
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта", 						ПередЗаписьюОбъекта);
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта", 							ПриЗаписиОбъекта);
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки", 						ПослеДобавленияСтроки);
	СтруктураПараметров.Вставить("ЗагружатьДополнительныеРеквизитыИСведения",	ЗагружатьДополнительныеРеквизитыИСведения);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыИСведенияТолькоОбщие",	ДополнительныеРеквизитыИСведенияТолькоОбщие);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыПоТипуНоменклатуры",	ДополнительныеРеквизитыПоТипуНоменклатуры);
	
	Возврат ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьНастройки(СтруктураПараметров);

КонецФункции 

&НаСервере
Процедура ЗаполнитьСписокВариантовИспользования()
	
	Список = Элементы.ВариантИспользованияНастройки.СписокВыбора;
	Список.Очистить();
	Список.Добавить(Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных);
	Список.Добавить(Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТиповПрикладногоОбъекта()
	
	Список = Элементы.ТипПрикладногоОбъекта.СписокВыбора;
	Список.Очистить();
	
	Если Объект.ВариантИспользованияНастройки=Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных Тогда
		Список.Добавить(Перечисления.ТипыПрикладныхОбъектов.Справочник);
		Список.Добавить(Перечисления.ТипыПрикладныхОбъектов.Документ);
	ИначеЕсли Объект.ВариантИспользованияНастройки=Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных Тогда
		Список.Добавить(Перечисления.ТипыПрикладныхОбъектов.Справочник);
		Список.Добавить(Перечисления.ТипыПрикладныхОбъектов.Документ);
		Список.Добавить(Перечисления.ТипыПрикладныхОбъектов.РегистрСведений);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПрикладныхОбъектов()
	
	Элементы.ИмяПрикладногоОбъекта.СписокВыбора.Очистить();
	Если Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник Тогда
		// Используем поэлементное добавление, т.к. при открытии сохраненного
		// элемента справочника элемент управления не позиционируется.
		Для Каждого СтрокаСписка Из СписокСправочниковКЕШ Цикл
			Элементы.ИмяПрикладногоОбъекта.СписокВыбора.Добавить(СтрокаСписка.Значение,СтрокаСписка.Представление,,СтрокаСписка.Картинка);
		КонецЦикла;
	ИначеЕсли Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ Тогда
		Для Каждого СтрокаСписка Из СписокДокументовКЕШ Цикл
			Элементы.ИмяПрикладногоОбъекта.СписокВыбора.Добавить(СтрокаСписка.Значение,СтрокаСписка.Представление,,СтрокаСписка.Картинка);
		КонецЦикла;
	ИначеЕсли Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Обработка Тогда
		Для Каждого СтрокаСписка Из СписокОбработокКЕШ Цикл
			Элементы.ИмяПрикладногоОбъекта.СписокВыбора.Добавить(СтрокаСписка.Значение,СтрокаСписка.Представление,,СтрокаСписка.Картинка);
		КонецЦикла;
	ИначеЕсли Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.РегистрСведений Тогда
		Для Каждого СтрокаСписка Из СписокРегистровСведенийКЕШ Цикл
			Элементы.ИмяПрикладногоОбъекта.СписокВыбора.Добавить(СтрокаСписка.Значение,СтрокаСписка.Представление,,СтрокаСписка.Картинка);
		КонецЦикла;
	КонецЕсли;
	Элементы.ИмяПрикладногоОбъекта.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТабличныхЧастей()
	
	СписокТабличныхЧастей = Элементы.ИмяТабличнойЧасти.СписокВыбора;
	СписокТабличныхЧастей.Очистить();
	
	Если Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ Тогда
		ОбъектМетаданных = Метаданные.Документы.Найти(Объект.ИмяПрикладногоОбъекта);
	ИначеЕсли Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Обработка Тогда
		ОбъектМетаданных = Метаданные.Обработки.Найти(Объект.ИмяПрикладногоОбъекта);
	ИначеЕсли Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник Тогда
		ОбъектМетаданных = Метаданные.Справочники.Найти(Объект.ИмяПрикладногоОбъекта);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ОбъектМетаданных<>Неопределено Тогда
		Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
			СписокТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСпискиВыбораНаСервере(ТекущаяСтрокаТаблицы)
	
	СпискиВыбораЭлементов = Новый Структура;
	ТекущиеДанные = ТаблицаЗагружаемыхРеквизитов[ТекущаяСтрокаТаблицы];
	
	СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокИменПредставлений(ТекущиеДанные);
	СпискиВыбораЭлементов.Вставить("ТаблицаЗагружаемыхРеквизитовИскатьПо", СписокВыбора);
	
	СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСвязейПоВладельцу(ТекущиеДанные, ТаблицаЗагружаемыхРеквизитов);
	СпискиВыбораЭлементов.Вставить("ТаблицаЗагружаемыхРеквизитовСвязьПоВладельцу", СписокВыбора);
	
	СписокВыбора = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСвязейПоТипу(ТекущиеДанные, ТаблицаЗагружаемыхРеквизитов);
	СпискиВыбораЭлементов.Вставить("ТаблицаЗагружаемыхРеквизитовСвязьПоТипу", СписокВыбора);
	
	Возврат СпискиВыбораЭлементов;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()
	
	ИндексТекущейСтроки = ТаблицаЗагружаемыхРеквизитов.Индекс(Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные);
	СтруктураСписковВыбора = ЗаполнитьСпискиВыбораНаСервере(ИндексТекущейСтроки);
	
	Для Каждого КлючЗначение Из СтруктураСписковВыбора Цикл
		
		СписокВыбораЭлемента = Элементы[КлючЗначение.Ключ].СписокВыбора;
		СписокВыбораЭлемента.Очистить();
		
		Для Каждого СтрокаСписка Из КлючЗначение.Значение Цикл
			СписокВыбораЭлемента.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкуИзХранилища(НастройкиСсылка)
	
	ОбъектНастройка = НастройкиСсылка.ПолучитьОбъект();
	Настройки = ОбъектНастройка.НастройкиЗагрузкиВыгрузки.Получить();
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуФильтраДляДиалогаВыбораФайла()
	
	Фильтр = "";
	Если Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных Тогда
		Фильтр = "Файлы настроек загрузки(*.mxlz)|*.mxlz|Все файлы (*.*)|*.*|";
	ИначеЕсли Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных Тогда
		Фильтр = "Файлы настроек выгрузки(*.mxla)|*.mxla|Все файлы (*.*)|*.*|";
	КонецЕсли;
	
	Возврат Фильтр;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиИзХранилища()
	
	Попытка
		НастройкаОбъект = Объект.Ссылка.ПолучитьОбъект();
	Исключение
		НастройкаОбъект = Неопределено;
	КонецПопытки;
	
	Если НастройкаОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = НастройкаОбъект.НастройкиЗагрузкиВыгрузки.Получить();
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ВыполнитьЗагрузкуНастроек(Расширение, ПолноеИмяФайлаНастройки, АдресВоВременномХранилище)
	
	Настройки = Новый ТабличныйДокумент;
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ВременныйФайл = ПолучитьИмяВременногоФайла() + "testUASettings.mxlz";
	ДанныеФайла.Записать(ВременныйФайл);
	
	Попытка
		Настройки.Прочитать(ВременныйФайл);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= '%1'"), ИнформацияОбОшибке.Причина.Описание);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Если Расширение=".mxlz" Тогда
		Расширение = Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных;
	ИначеЕсли Расширение=".mxla" Тогда
		Расширение = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных;
	КонецЕсли;
	
	ЗагруженоУспешно = Ложь;
	Если Расширение = Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных Тогда
		ЗагруженоУспешно = ЗаполнитьНастройкиИзТабличногоДокумента(Настройки);
	ИначеЕсли Расширение = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных Тогда
		ЗагруженоУспешно = ЗаполнитьНастройкиВыгрузкиИзТабличногоДокумента(Настройки);
	КонецЕсли;
	
	Возврат ЗагруженоУспешно;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиВХранилище(ТекущийОбъект, Отказ=Ложь)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточникаИзВременногоХранилища();
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Проверка настройки загрузки
	Если ТекущийОбъект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных Тогда
		Если ДействиеСЗагружаемымФайлом<>0 Тогда
			КаталогАрхиваЗагруженныхФайлов = "";
		КонецЕсли;
		
		Если ИспользоватьВнешнийМодульПреобразованияФайла И НЕ ЗначениеЗаполнено(ОбработкаПреобразования) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Не указана обработка преобразования файла в табличный документ.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ДействиеСЗагружаемымФайлом = 0 И НЕ ЗначениеЗаполнено(КаталогАрхиваЗагруженныхФайлов) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Не указан каталог архива загруженных файлов.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		ТекущийОбъект.НастройкиЗагрузкиВыгрузки = Новый ХранилищеЗначения(ЗаполнитьТабличныйДокументИзНастроек());
	ИначеЕсли ТекущийОбъект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных Тогда
		Если ВыгружаемыеРеквизиты.Количество()=0  Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Не указаны реквизиты для выгрузки'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ВыгружаемыеРеквизиты Цикл
			ТекстОшибки = "";
			Если ПустаяСтрока(Строка.ТипПоля) Тогда
				ТекстОшибки = ТекстОшибки+", " + НСтр("ru = 'Тип поля'");
			КонецЕсли;
			Если ПустаяСтрока(Строка.Представление) Тогда
				ТекстОшибки = ТекстОшибки+", " + НСтр("ru = 'Поле объекта / выражение'");
			КонецЕсли;
			Если ПустаяСтрока(Строка.ПолеДБФ) Тогда
				ТекстОшибки = ТекстОшибки+", Поле DBF";
			КонецЕсли;
			Если ПустаяСтрока(Строка.Тип) Тогда
				ТекстОшибки = ТекстОшибки+", Тип";
			ИначеЕсли (Строка.Тип = "S" ИЛИ Строка.Тип = "N") И Строка.Длина=0 Тогда
				ТекстОшибки = ТекстОшибки+", Длина";
			КонецЕсли;
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'Строка %1 не заполнена колонка: %2'"), Строка(ВыгружаемыеРеквизиты.Индекс(Строка)+1), Сред(ТекстОшибки,3));
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		ТекущийОбъект.НастройкиЗагрузкиВыгрузки = Новый ХранилищеЗначения(ЗаполнитьТабличныйДокументИзНастроекВыгрузки());
	КонецЕсли;
	
КонецПроцедуры

// НАСТРОЙКИ ЗАГРУЗКИ - ТАБЛИЦА ЗАГРУЖАМЫХ РЕКВИЗИТОВ

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьСпискиВыбора();
	
	Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.КнопкаВыбора = НЕ ТипЗНЧ(Элемент.ТекущиеДанные.ЗначениеПоУмолчанию) = Тип("Строка");
	
	Если Элемент.ТекущиеДанные.ВыборГрупп = "Группы" Тогда
		Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	ИначеЕсли Элемент.ТекущиеДанные.ВыборГрупп = НСтр("ru = 'Группы и элементы'") Тогда
		Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	Иначе
		Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
	КонецЕсли;

КонецПроцедуры 

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточникаИзВременногоХранилища();
	
	ДоступностьЭлементаФормы = ЗначениеЗаполнено(Объект.ИмяПрикладногоОбъекта) И 
		(Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ ИЛИ Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник);
	Элементы.ИмяТабличнойЧасти.Доступность = ДоступностьЭлементаФормы;
	Элементы.ИмяТабличнойЧасти.АвтоОтметкаНезаполненного = ДоступностьЭлементаФормы И НЕ Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник;
	Элементы.ИмяТабличнойЧасти.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Объект.ИмяТабличнойЧасти) И (Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ);
	
	ДоступностьЭлементаФормы = ЗначениеЗаполнено(Объект.ТипПрикладногоОбъекта);
	Элементы.ИмяПрикладногоОбъекта.Доступность = ДоступностьЭлементаФормы;
	
	ДоступностьЭлементаФормы = ЗначениеЗаполнено(Объект.ВариантИспользованияНастройки);
	Элементы.ТипПрикладногоОбъекта.Доступность = ДоступностьЭлементаФормы;
	
	НастройкаДоступна = МетаданныеИсточника <> Неопределено;
	
	Если Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных Тогда
		Элементы.ГруппаНастройкиЗагрузки.Видимость = Ложь;
		Элементы.ГруппаНастройкиВыгрузки.Видимость = Истина;
		Элементы.ГруппаНастройкиВыгрузки.Доступность = НастройкаДоступна;
		
		Если НастройкаДоступна Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиВыгрузки;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКонтрагенты;
		КонецЕсли;
		
		Элементы.ГруппаЗагрузкаДопРеквизитов.Видимость	  = Ложь;
	ИначеЕсли Объект.ВариантИспользованияНастройки = Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных Тогда
		Элементы.ГруппаНастройкиВыгрузки.Видимость = Ложь;
		Элементы.ГруппаНастройкиЗагрузки.Видимость = Истина;
		Элементы.ГруппаНастройкиЗагрузки.Доступность = НастройкаДоступна; 
		
		Если НастройкаДоступна Тогда
			Элементы.ТаблицаЗагружаемыхРеквизитовПеренумероватьКолонки.Доступность                 = РучнаяНумерацияКолонокТабличногоДокумента;
			Элементы.ТаблицаЗагружаемыхРеквизитовНомерКолонки.Видимость                            = РучнаяНумерацияКолонокТабличногоДокумента;
			Элементы.ТаблицаЗагружаемыхРеквизитовРучнаяНумерацияКолонокТабличногоДокумента.Пометка = РучнаяНумерацияКолонокТабличногоДокумента;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиЗагрузки;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКонтрагенты;
		КонецЕсли;
		
		Элементы.ТаблицаЗагружаемыхРеквизитовПолеПоиска.Видимость         = Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник;
		
		Элементы.НеСоздаватьНовыхЭлементов. Видимость      = Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник;
		Элементы.НеОбновлятьСуществующиеЭлементы.Видимость = Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник;
		Элементы.флПоискПоПрайсуПоставщика.Видимость	   = Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Документ;
		Элементы.ТаблицаЗагружаемыхРеквизитовРежимПоиска.Видимость         = НЕ (Объект.ТипПрикладногоОбъекта = Перечисления.ТипыПрикладныхОбъектов.Справочник);
		
		ЭтоЗагрузкаВНоменклатуру 	= МетаданныеИсточника<>Неопределено И Метаданные.Справочники.Найти(МетаданныеИсточника.Имя)<>Неопределено И МетаданныеИсточника.Имя = "Номенклатура";
		ЭтоЗагрузкаХарактеристик 	= МетаданныеИсточника<>Неопределено И Метаданные.Справочники.Найти(МетаданныеИсточника.Имя)<>Неопределено И МетаданныеИсточника.Имя = "ХарактеристикиНоменклатуры";
		ЭтоЗагрузкаКонтрагент 	= МетаданныеИсточника<>Неопределено И Метаданные.Справочники.Найти(МетаданныеИсточника.Имя)<>Неопределено И МетаданныеИсточника.Имя = "Контрагенты";

		Элементы.ГруппаЗагрузкаДопРеквизитов.Видимость	  = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") И 
			ЭтоЗагрузкаВНоменклатуру ИЛИ ЭтоЗагрузкаХарактеристик ИЛИ ЭтоЗагрузкаКонтрагент; 
		Элементы.ГруппаОтборРеквизитов.Видимость		  = ЗагружатьДополнительныеРеквизитыИСведения И НЕ ЭтоЗагрузкаКонтрагент;
		
		Элементы.ДополнительныеРеквизитыПоТипуНоменклатуры.Доступность = НЕ ДополнительныеРеквизитыИСведенияТолькоОбщие;
	Иначе
		Элементы.ГруппаНастройкиВыгрузки.Видимость = Ложь;
		Элементы.ГруппаНастройкиЗагрузки.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.КаталогАрхиваЗагруженныхФайлов.Доступность = ДействиеСЗагружаемымФайлом = 0;
	Элементы.КаталогАрхиваЗагруженныхФайлов.АвтоОтметкаНезаполненного = ДействиеСЗагружаемымФайлом = 0;
	
	НастроитьДоступностьПоляОбработки();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформление()
	// Вызываем общий обработчик действия.
	УправлениеДиалогомСправочникаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЗагружаемыхРеквизитовПолеПоиска.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитов.МожетБытьПолемПоиска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЗагружаемыхРеквизитов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитов.ПодсвечиватьСтроку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЗагружаемыхРеквизитов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗагружаемыхРеквизитов.ЭтоДополнительныйРеквизит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.КожаноКоричневый);
		
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		ВозможностьУстановкиЗагрузки = ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных(ТекущиеДанные.ОписаниеТипов, ТекущиеДанные.ЗначениеПоУмолчанию);
		СписокВыбораЭлемента = Элемент.СписокВыбора;
		Если ВозможностьУстановкиЗагрузки И СписокВыбораЭлемента.Количество() = 3 Тогда
			СписокВыбораЭлемента.Добавить("Загружать", "Загружать");
		ИначеЕсли Не ВозможностьУстановкиЗагрузки И СписокВыбораЭлемента.Количество() = 4 Тогда
			СписокВыбораЭлемента.Удалить(СписокВыбораЭлемента.Количество() - 1);
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	НомерКолонки = ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	Если ЗначениеЗаполнено(НомерКолонки) Тогда
		РасставитьПометкиНаКнопках(НомерКолонки);
	КонецЕсли;
	
	ПодсветитьВыбраннуюКолонку(Неопределено);
	РазобратьсяСОформлениемСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Зарезервировано = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьДополнительныеРеквизитыИСведенияПриИзменении(Элемент)
	
	УстановитьИсточник();
	УправлениеДиалогомНаСервере();
	ЗаполнитьМассивКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыИСведенияТолькоОбщиеПриИзменении(Элемент)
	
	Если ДополнительныеРеквизитыИСведенияТолькоОбщие Тогда
		ДополнительныеРеквизитыПоТипуНоменклатуры.Очистить();
	КонецЕсли;
	
	УстановитьИсточник();
	УправлениеДиалогомНаСервере();
	ЗаполнитьМассивКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПоТипуНоменклатурыПриИзменении(Элемент)
	
	УстановитьИсточник();
	УправлениеДиалогомНаСервере();
	ЗаполнитьМассивКнопок();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
