///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка справочника "Настройки загрузки данных из табличного документа".
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РаботаСФормой.МожноУстановитьОтборПоВладельцу(Параметры) Тогда
		РаботаСФормой.УстановитьОтборПоВладельцуНаДерево(Дерево, Параметры.Отбор);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
	Если ЗначениеЗаполнено(Параметры.ПараметрОтборПоВариантуИспользования) Тогда
		УстановитьОтборСпискаВыбора("ВариантИспользованияНастройки", Параметры.ПараметрОтборПоВариантуИспользования);
		ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.УстановитьТекущуюГруппуСправочника(Параметры, Элементы.Список);
		
		Если ЗначениеЗаполнено(Параметры.ПараметрОтборПоТипуПрикладногоОбъекта) Тогда
			УстановитьОтборСпискаВыбора("ТипПрикладногоОбъекта", Параметры.ПараметрОтборПоТипуПрикладногоОбъекта);
			
			Если ЗначениеЗаполнено(Параметры.ПараметрОтборПоМетаданным) Тогда
				ОтборПоМетаданным = Метаданные.НайтиПоПолномуИмени(Параметры.ПараметрОтборПоМетаданным);
				УстановитьОтборСпискаВыбора("ИмяПрикладногоОбъекта", ОтборПоМетаданным.Имя);

				Если ЗначениеЗаполнено(Параметры.ПараметрОтборПоМетаданнымТабличнойЧасти) Тогда
					Если НЕ ОтборПоМетаданным.ТабличныеЧасти.Найти(Параметры.ПараметрОтборПоМетаданнымТабличнойЧасти)=Неопределено Тогда
						УстановитьОтборСпискаВыбора("ИмяТабличнойЧасти", Параметры.ПараметрОтборПоМетаданнымТабличнойЧасти);
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПараметрОтборПоКонтрагенту) Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		МассивПоКонтрагенту = КритерииОтбора.Контрагенты.Найти(Параметры.ПараметрОтборПоКонтрагенту);
		МассивПоВсемКонтрагентам = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьНастройкиДляВсехКонтрагентов();
		
		Для Каждого ЭлементПоКонтрагенту Из МассивПоКонтрагенту Цикл
			МассивПоВсемКонтрагентам.Добавить(ЭлементПоКонтрагенту);
		КонецЦикла;
		
		УстановитьОтборСпискаВыбора("Ссылка", МассивПоВсемКонтрагентам);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ТолькоПросмотр = Истина;
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Группа Тогда
		Возврат;
	КонецЕсли;
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеСправочникаНастройкиЗагрузкиДанныхИзТабличногоДокумента");
	Иначе
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыСправочникаНастройкиЗагрузкиДанныхИзТабличногоДокумента");
	КонецЕсли;
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент.ТекущиеДанные, "ЭтоГруппа")
		И Элемент.ТекущиеДанные.ЭтоГруппа
	Тогда
		Возврат;
	КонецЕсли;
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыСправочникаНастройкиЗагрузкиДанныхИзТабличногоДокумента");
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	// Сменим родителя в основном списке
	Если Элементы.Список.Видимость Тогда
		Если Элементы.Дерево.ТекущаяСтрока=Элементы.Список.ТекущийРодитель Тогда
			// Пропустим если равны
		ИначеЕсли НЕ ЗначениеЗаполнено(Элементы.Список.ТекущийРодитель) И НЕ ЗначениеЗаполнено(Элементы.Дерево.ТекущаяСтрока) Тогда
			// Пропустим если оба пустые (могут быть Неопределено)
		Иначе
			Элементы.Список.ТекущийРодитель = Элементы.Дерево.ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если НЕ ЗначениеЗаполнено(Строка) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя переместить элемент в корень списка.'"),, НСтр("ru = 'Отмена перемещения'"));
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Отмена И НЕ ПроверкаВозможностиПеретаскивания(ПараметрыПеретаскивания.Значение) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя переместить предопределенную группу.'"),, НСтр("ru = 'Отмена перемещения'"));
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	УправлениеСпискомСправочникаКлиент.СписокПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьСкрытьДерево(Команда)
	
	ВидимостьДерева = Не ВидимостьДерева;	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборСпискаВыбора(ИмяРеквизита, ЗначениеОтбора)
	
	Если ИмяРеквизита="Ссылка" Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	КоллекцияЭлементов             = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ЭлементОтбора 				   = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяРеквизита);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравненияОтбора = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравненияОтбора);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ЗначениеОтбора;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры 

&НаСервере
Функция ПроверкаВозможностиПеретаскивания(НастройкиЗагрузки)
	
	Объект = НастройкиЗагрузки.ПолучитьОбъект();
	Если Объект.Предопределенный И Объект.ЭтоГруппа Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

