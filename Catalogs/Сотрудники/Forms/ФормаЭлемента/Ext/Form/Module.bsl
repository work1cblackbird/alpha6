///////////////////////////////////////////////////////////////////////////////
// Модуль формы элемента справочника "Сотрудники"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, Объект.Наименование);	
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();	
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// ПростаяЭлектроннаяПодпись
	ПараметрыНастройкиФормы = УчастникиПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаЭлемента();
	ПараметрыНастройкиФормы.ПустаяСсылка = Справочники.Сотрудники.ПустаяСсылка();
	УчастникиПЭП.ПриСозданииНаСервере_ФормаЭлемента(ЭтотОбъект, ПараметрыНастройкиФормы);
	// Конец ПростаяЭлектроннаяПодпись
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	Элементы.ФИОПодробно.Заголовок = ПредставлениеФИОПодробно(Объект.Фамилия, Объект.Инициалы);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбъектТекущий = РеквизитФормыВЗначение("Объект"); 
		Цвет = ОбъектТекущий.Цвет.Получить();    
		Возврат;
	Иначе 
		Элементы.СведенияОСогласииГруппа.Видимость = Ложь;
	КонецЕсли;
	
	// Дальнейшие операции выполняются только для новых объектов
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	ОбъектТекущий = РеквизитФормыВЗначение("Объект");
	// задаем начальный цвет статусу
	Цвет=Новый Цвет(255,255,255);
	
	ОбъектТекущий.Цвет = Новый ХранилищеЗначения(Цвет);
	
	// +СофтФон
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		сфпЗвонок =  Параметры.Основание;
	КонецЕсли;
	// -СофтФон
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	// Произведем настройку параметров отображения кнопок командной панели списков
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыДинамическогоСписка(ЭтотОбъект, "КонтактныеЛица","Общая");
		
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// Изменение согласия на обработку персональных данных
	Если ИмяСобытия = "ИзменениеСогласияНаОбработкуПерсональныхДанных" Тогда
		УстановитьСведенияДействующегоСогласия();
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормы(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных

	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// АльфаАвто.РаботаСФайлами
	РаботаСФайламиАльфаАвтоКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ТекущаяКартинка = Объект.ФайлКартинки;
	
	РаботаСФайламиАльфаАвтоВызовСервера.ВывестиТекущееИзображение(ЭтотОбъект);
	УстановитьСведенияДействующегоСогласия();
	 	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Сотрудники");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	ПараметрыСклонения 			= СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО 	= Истина;
	СклонениеПредставленийОбъектов.ПриЗаписиФормыОбъектаСклонения(ЭтотОбъект, Объект.Наименование, ТекущийОбъект.Ссылка, ПараметрыСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если Не Отказ Тогда
		
		ТекущийОбъект.Цвет = Новый ХранилищеЗначения(Цвет);
		
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
	УстановитьСведенияДействующегоСогласия();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "Сотрудники");
	
	// +СофтФон
	Если ЗначениеЗаполнено(сфпЗвонок) Тогда
		Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, Объект.Ссылка));
	КонецЕсли;
	// -СофтФон
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.Наименование);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	ЗаполнитьЗначенияСвойств(Объект, ФизическиеЛицаКлиентСервер.ЧастиИмени(Объект.Наименование));
	ОбновитьИнициалы();
	Элементы.ФИОПодробно.Заголовок = ПредставлениеФИОПодробно(Объект.Фамилия, Объект.Инициалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	Элементы.ФИОПодробно.Заголовок = ПредставлениеФИОПодробно(Объект.Фамилия, Объект.Инициалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	ОбновитьИнициалы();
	Элементы.ФИОПодробно.Заголовок = ПредставлениеФИОПодробно(Объект.Фамилия, Объект.Инициалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	
	ОбновитьИнициалы();
	Элементы.ФИОПодробно.Заголовок = ПредставлениеФИОПодробно(Объект.Фамилия, Объект.Инициалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициалыПриИзменении(Элемент)
	
	Элементы.ФИОПодробно.Заголовок = ПредставлениеФИОПодробно(Объект.Фамилия, Объект.Инициалы);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Справочники.Сотрудники.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПодразделениеКомпанииПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Справочники.Сотрудники.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	ПодразделениеКомпанииПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ФлагУволенПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Справочники.Сотрудники.ФлагУволенПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ФлагУволенПриИзменении(Элемент)

	ФлагУволенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаУвольненияПриИзмененииНаСервере(ПараметрыДействия=Неопределено)

	Справочники.Сотрудники.ДатаУвольненияПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаУвольненияПриИзменении(Элемент)
	
	ДатаУвольненияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЦехПриИзмененииНаСервере(ПараметрыДействия=Неопределено)

	Справочники.Сотрудники.ЦехПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЦехПриИзменении(Элемент)
	
	ЦехПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЦехНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура("ПодразделениеКомпании,Организация", Объект.ПодразделениеКомпании, Объект.Организация);
	ОткрытьФорму(
		"Справочник.Цеха.ФормаВыбора",
		Новый Структура("РежимВыбора,ОтключитьОтбор,Отбор", Истина, 1, СтруктураОтбора),
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	ИННСоответствуетТребованиям();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	СтраховойНомерПФРСоответствуетТребованиям();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеЛица

&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
		ТекущийКонтактВедущий = Элементы.КонтактныеЛица.ТекущиеДанные.КонтактноеЛицо;
	Иначе
		ТекущийКонтактВедущий = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
	КонтактнаяИнформацияКонтактногоЛица.Параметры.УстановитьЗначениеПараметра("ТекущийКонтакт", ТекущийКонтактВедущий);
	Элементы.КонтактнаяИнформацияКонтактногоЛица.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	КонтактныеЛицаКлиент.ВыбратьКонтрагента(ЭтотОбъект, Новый Структура("Владелец", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаДобавлениеОкончание(Результат, ДопПараметры) Экспорт
	
	Элементы.КонтактныеЛица.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура КонтактныеЛицаВыборНаСервере(КлючЗаписи)
	
	НаборКонтактныхЛиц = РегистрыСведений.КонтактныеЛица.СоздатьНаборЗаписей();
	НаборКонтактныхЛиц.Отбор.Владелец.Установить(КлючЗаписи.Владелец);
	
	НаборКонтактныхЛиц.Прочитать();
	
	Для Каждого Запись Из НаборКонтактныхЛиц Цикл
		Если (Запись.КонтактноеЛицо = КлючЗаписи.КонтактноеЛицо) Тогда
			Запись.Основной = НЕ Запись.Основной;
		Иначе
			Запись.Основной = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	НаборКонтактныхЛиц.Записать();
	
	Элементы.КонтактныеЛица.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНачинаетсяС(Поле.Имя, "КонтактныеЛицаОсновной") Тогда
		СтандартнаяОбработка = Ложь;
		
		КонтактныеЛицаВыборНаСервере(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)

	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
&НаКлиенте
Процедура Склонения(Команда)
	
	ПараметрыСклонения 			= СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО 	= Истина;
	СклонениеПредставленийОбъектовКлиент.ПоказатьСклонение(ЭтотОбъект, Объект.Наименование, ПараметрыСклонения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

// ПростаяЭлектроннаяПодпись

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПЭП(Команда)
	
	УчастникиПЭПКлиент.ОтправитьИлиОбновитьУчастника(ЭтотОбъект, Команда);
	
КонецПроцедуры

// Конец ПростаяЭлектроннаяПодпись

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ДобавитьИзображение(ЭтотОбъект, Объект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ФотоСотрудникаНажатие(Элемент, СтандартнаяОбработка)
	
	РаботаСФайламиАльфаАвтоКлиент.АдресКартинкиНажатие(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзображениеНаСервере()
	
	РаботаСФайламиАльфаАвтоВызовСервера.УдалитьИзображение(ЭтотОбъект);
	ПолучитьСледующееИзображение("Вперед");
	
КонецПроцедуры //УдалитьИзображениеНаСервере()

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	Если ТекущаяКартинка = Объект.ФаксимилеПодписи Тогда
		ВывестиСообщение(НСтр("ru = 'Картинка установлена как печать факсимиле подписи. Прежде чем удалить ее необходимо снять признак ""Факсимиле"".'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ФайлКартинки = ТекущаяКартинка Тогда
		ВывестиСообщение(НСтр("ru = 'Картинка установлена как печать фотография сотрудника. Прежде чем удалить ее необходимо снять признак ""Фотография"".'"));
		Возврат;
	КонецЕсли;
	
	УдалитьИзображениеНаСервере();
	
КонецПроцедуры //УдалитьИзображение()

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ПросмотретьИзображение(ЭтотОбъект);
	
КонецПроцедуры //ПросмотретьИзображение()

&НаКлиенте
Процедура ПросмотретьИзображения(Команда)
	
	ДвижениеПросмотра = ?(СтрНайти(Команда.Имя, "Вперед"), "Вперед", "Назад");
	
	ПолучитьСледующееИзображение(ДвижениеПросмотра);
	
КонецПроцедуры 

&НаКлиенте
Процедура Контрагент(Команда)
	
	ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
	ПараметрыЗаписиНового.ОбновитьИзмененный = Истина;
	ПараметрыЗаписиНового.ОбработчикСобытия = "КонтрагентСозданиеПослеЗаписи";
	
	Если ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(ЭтотОбъект, ПараметрыЗаписиНового) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КонтрагентСозданиеПослеЗаписи(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнструкциюПоСозданиюФаксимильнойПодписи(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Справочник.Сотрудники",
		"ИнструкцияПоСозданиюФаксимильнойПодписи",
		Объект.Ссылка,
		Неопределено,
		Новый Структура
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьФаксимиле(Команда)
	
	Если НЕ РаботаСФайламиАльфаАвтоКлиент.ФайлЯвляетсяДопустимойКартинкой(ТекущаяКартинка) Тогда
		
		Возврат;
		
	КонецЕсли;

	Объект.ФаксимилеПодписи = ТекущаяКартинка;
	Модифицированность = Истина;
	УправлениеДиалогомНаСервере();
	Элементы.КоманднаяПанельКартинкиФаксимиле.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФаксимиле(Команда)
	
	Если ЗначениеЗаполнено(Объект.ФаксимилеПодписи) Тогда
		ТекущаяКартинка = Объект.ФаксимилеПодписи;
	КонецЕсли;
	
	ПоказатьФотографиюФаксимилеНаСервере();
	Элементы.КоманднаяПанельКартинкиФаксимиле.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФаксимиле(Команда)
	
	Объект.ФаксимилеПодписи = Неопределено;
	УправлениеДиалогомНаСервере();
	Элементы.КоманднаяПанельКартинкиФаксимиле.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьФотографию(Команда)
	
	Если НЕ РаботаСФайламиАльфаАвтоКлиент.ФайлЯвляетсяДопустимойКартинкой(ТекущаяКартинка) Тогда
		
		Возврат;
		
	КонецЕсли;

	Объект.ФайлКартинки = ТекущаяКартинка;
	Модифицированность = Истина;
	УправлениеДиалогомНаСервере();
	Элементы.КоманднаяПанельКартинкиФотография.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФотографию(Команда)
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		ТекущаяКартинка = Объект.ФайлКартинки;
	КонецЕсли;
	
	ПоказатьФотографиюФаксимилеНаСервере();
	Элементы.КоманднаяПанельКартинкиФотография.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФотографию(Команда)
	
	Объект.ФайлКартинки = Неопределено;
	УправлениеДиалогомНаСервере();
	Элементы.КоманднаяПанельКартинкиФотография.Скрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
        УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
&НаКлиенте 
Процедура Подключаемый_ПросклонятьПредставлениеПоВсемПадежам()
	
	ПараметрыСклонения 			= СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО 	= Истина;
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.Наименование, ПараметрыСклонения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

// +СофтФон

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
	Телефон = ЭтотОбъект[ИмяРеквизита];
	Если НЕ ЗначениеЗаполнено(СокрЛП(Телефон)) Тогда Возврат; КонецЕсли;
	
	Структура = Новый Структура();
	Структура.Вставить("Контакт", Объект.Ссылка);
	Структура.Вставить("ОснованиеСправочник", Истина);
	Структура.Вставить("Телефон", УправлениеКонтактнойИнформациейАльфаАвтоКлиент.УбратьЛишниеСимволыТелефона(Телефон));
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Структура);
	
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон() Тогда Возврат; КонецЕсли;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ПозвонитьНаНомер","");
	Телефон = ЭтотОбъект[ИмяРеквизита];
	сфпСофтФонПроКлиент.сфпПозвонить(Телефон, Объект.Ссылка);
КонецПроцедуры

// -СофтФон

&НаСервере
Процедура УстановитьСведенияДействующегоСогласия()
	
	// Надпись показываем только в определенных режимах
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.СведенияОСогласииГруппа.Видимость = ИСТИНА;
	Иначе
		Элементы.СведенияОСогласииГруппа.Видимость = ЛОЖЬ;
		Возврат;
	КонецЕсли;
	
	// Запрашиваем сведения о действующем согласии
	Согласие = ЗащитаПерсональныхДанных.ДействующееСогласиеНаОбработкуПерсональныхДанных(Объект.Ссылка, Справочники.Организации.ОрганизацияПоУмолчанию(), КонецДня(ТекущаяДатаСеанса()));
	
	Если Согласие=Неопределено Тогда
		Элементы.ПредупреждениеКартинка.Картинка = БиблиотекаКартинок.Предупреждение;
		Элементы.ПредупреждениеТекст.Заголовок = НСтр("ru = 'Не обнаружено действующего согласия на обработку персональных данных субъекта.'");
	Иначе
		
		ЧастиСообщения = Новый Массив;
		ЧастиСообщения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Субъект предоставил %1'"), Формат(Согласие.ДатаПолучения, "ДЛФ=D")) + " ");
		ЧастиСообщения.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'согласие'"), , , , ПолучитьНавигационнуюСсылку(Согласие.ДокументОснование)));
		ЧастиСообщения.Добавить(" " + НСтр("ru = 'на обработку персональных данных'"));
		
		Если ЗначениеЗаполнено(Согласие.СрокДействия) Тогда
			ЧастиСообщения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', которое действует до %1.'"), Формат(Согласие.СрокДействия, "ДЛФ=D")));
		Иначе	
			ЧастиСообщения.Добавить(НСтр("ru = ', которое действует бессрочно.'"));
		КонецЕсли;
		
		Элементы.ПредупреждениеКартинка.Картинка = БиблиотекаКартинок.Информация;
		Элементы.ПредупреждениеТекст.Заголовок = Новый ФорматированнаяСтрока(ЧастиСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСледующееИзображение(ДвижениеПросмотра)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ПолучитьСледующееИзображение(ЭтотОбъект, ДвижениеПросмотра);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПолучитьСледующееИзображение()

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Устанавливаем отбор по владельцу на динамический список Контактные лица
	Если ЗначениеЗаполнено(Объект.Ссылка) И КонтактныеЛица.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество()=0 Тогда
		ЭлементОтбора = КонтактныеЛица.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.ДатаУвольнения.Доступность = Объект.ФлагУволен;
	
	// Если объект не записан убираем доступность для вкладок
	НовыйОбъект = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.СтраницаКонтактныеЛица.Доступность          = НовыйОбъект;
	
	// Обработаем кнопки изображения на форме
	РаботаСФайламиАльфаАвто.УстановитьДоступностьКомандДляИзображений(Объект, ЭтаФорма);
	
	ОбновитьВидимостьКоманднойПанелиКартинок();
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

&НаКлиенте
Процедура КонтрагентСозданиеПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Сотрудник = &Сотрудник";
	
	ПараметрыЗапроса = Новый Структура("Сотрудник", Объект.Ссылка);
	РезультатЗапроса = УправлениеДиалогомВызовСервера.ВыполнитьПроизвольныйЗапрос(ТекстЗапроса,, ПараметрыЗапроса, Истина);
	
	Если РезультатЗапроса <> Неопределено Тогда
		ПоказатьЗначение(, РезультатЗапроса.Ссылка);
	Иначе
		// Определим, есть ли вообще контрагенты-сотрудники или группа контрагентов "Сотрудники"?
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ Контрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ПодотчетноеЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ КонтрагентыГруппа
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ЭтоГруппа
		|	И Контрагенты.Наименование = ""Сотрудники""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.Сотрудник КАК Сотрудник,
		|	КонтрагентыГруппа.Ссылка КАК Группа
		|ИЗ
		|	Контрагенты КАК Контрагенты
		|		ПОЛНОЕ СОЕДИНЕНИЕ КонтрагентыГруппа КАК КонтрагентыГруппа
		|		ПО (ИСТИНА)";
		
		Результат = УправлениеДиалогомВызовСервера.ВыполнитьПроизвольныйЗапрос(ТекстЗапроса,,, Истина);
		
		Если Результат = Неопределено Тогда
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеСозданиеГруппыСотрудникиЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Создать группу ""Сотрудники"" в справочнике ""Контрагенты"" для" + " " + Объект.Наименование + "?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОткрытиеФормыСправочникаКонтрагенты(Результат.Группа);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОповещениеСозданиеГруппыСотрудникиЗавершениеНаСервере(Родитель)
	
	ГруппаКонтрагенты = Справочники.Контрагенты.СоздатьГруппу();
	ГруппаКонтрагенты.Наименование = НСтр("ru = 'Сотрудники'");
	ГруппаКонтрагенты.Записать();
	Родитель = ГруппаКонтрагенты.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеСозданиеГруппыСотрудникиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Родитель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОповещениеСозданиеГруппыСотрудникиЗавершениеНаСервере(Родитель);
	КонецЕсли;
	
	ОткрытиеФормыСправочникаКонтрагенты(Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыСправочникаКонтрагенты(Родитель)
	
	Заполнение = Новый Структура;
	Заполнение.Вставить("Наименование", Объект.Наименование);
	Заполнение.Вставить("НаименованиеПолное", Объект.Наименование);
	Заполнение.Вставить("Фамилия", Объект.Фамилия);
	Заполнение.Вставить("Имя", Объект.Имя);
	Заполнение.Вставить("Отчество", Объект.Отчество);
	Заполнение.Вставить("ВидКонтрагента", ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ПодотчетноеЛицо"));
	Заполнение.Вставить("ФормаСобственности", ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЧастноеЛицо"));
	Заполнение.Вставить("Родитель", Родитель);
	Заполнение.Вставить("Сотрудник", Объект.Ссылка);
	Заполнение.Вставить("Пол", Объект.Пол);
	Заполнение.Вставить("ДатаРождения", Объект.ДатаРождения);
	Заполнение.Вставить("Должность", Объект.Должность);
	Заполнение.Вставить("ИНН", Объект.ИНН);
	Заполнение.Вставить("КИ", Объект.КонтактнаяИнформация);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Заполнение);
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	// Вызываем общий обработчик события
	Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ОбработкаРезультатаОповещенияНаСервере()

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	// Если был выбор цеха
	Если ТипЗнч(РезультатОповещения) = Тип("СправочникСсылка.Цеха") Тогда
		
		Объект.Цех = РезультатОповещения;
		Возврат;
				
	КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

#КонецОбласти

&НаСервере
Процедура УстановитьТекущееИзображение()
	
	Если ЗначениеЗаполнено(ТекущаяКартинка) Тогда
		ПараметрыДействия = Новый Структура("НоваяКартинкаОписания", ТекущаяКартинка);
		РаботаСФайламиАльфаАвтоВызовСервера.УстановитьТекущееИзображение(ЭтотОбъект, ПараметрыДействия, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКоманднойПанелиКартинок()
	
	ЕстьФотография = НЕ Объект.ФайлКартинки.Пустая();
	ЕстьФаксимиле = НЕ Объект.ФаксимилеПодписи.Пустая();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НазначитьФотографию",
		"Видимость",
		НЕ ЕстьФотография
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоказатьФотографию",
		"Видимость",
		ЕстьФотография
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОчиститьФотографию",
		"Видимость",
		ЕстьФотография
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НазначитьФаксимиле",
		"Видимость",
		НЕ ЕстьФаксимиле
	);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоказатьФаксимиле",
		"Видимость",
		ЕстьФаксимиле
	);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОчиститьФаксимиле",
		"Видимость",
		ЕстьФаксимиле
	);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьФотографиюФаксимилеНаСервере()
	
	УстановитьТекущееИзображение();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННСоответствуетТребованиям()
	
	СообщениеПроверки = "";
	
	Если Не ПустаяСтрока(Объект.ИНН) Тогда
		
		ИННСоответствуетТребованиям = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, Ложь,
			СообщениеПроверки);
			
	Иначе
		
		ИННСоответствуетТребованиям = Истина;
		
	КонецЕсли;
	
	Если ИННСоответствуетТребованиям Тогда
		
		Элементы.ИНН.ЦветТекста = Новый Цвет();
		Элементы.ИНН.Подсказка = НСтр("ru = 'ИНН, присвоенный налоговым органом'");
		
	Иначе
		
		Элементы.ИНН.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийОшибкуТекст");
		Элементы.ИНН.Подсказка = СообщениеПроверки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРСоответствуетТребованиям()
	
	СообщениеПроверки = "";
	
	Если Не ПустаяСтрока(Объект.СтраховойНомерПФР) Тогда
		
		ИННСоответствуетТребованиям = РегламентированныеДанныеКлиентСервер
			.СтраховойНомерПФРСоответствуетТребованиям(Объект.СтраховойНомерПФР, СообщениеПроверки);
			
	Иначе
		
		ИННСоответствуетТребованиям = Истина;
		
	КонецЕсли;
	
	Если ИННСоответствуетТребованиям Тогда
		
		Элементы.СтраховойНомерПФР.ЦветТекста = Новый Цвет();
		Элементы.СтраховойНомерПФР.Подсказка = НСтр("ru = 'Страховой номер ПФР'");
		
	Иначе
		
		Элементы.СтраховойНомерПФР.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийОшибкуТекст");
		Элементы.СтраховойНомерПФР.Подсказка = СообщениеПроверки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеФИОПодробно(Фамилия, Инициалы)
	
	Если ПустаяСтрока(Фамилия) И ПустаяСтрока(Инициалы) Тогда
		
		Возврат НСтр("ru = 'Не заполнены реквизиты ФИО используемые в механизме работы с электронными документами'");
		
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'ФИО: %1 %2'"), Фамилия, Инициалы);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИнициалы()
	
	ПерваяБукавИмя = "";
	
	Если Не ПустаяСтрока(Объект.Имя) Тогда
		
		ПерваяБукавИмя = Лев(Объект.Имя, 1);
		
	КонецЕсли;
	
	ПерваяБукавОтчество = "";
	
	Если Не ПустаяСтрока(Объект.Отчество) Тогда
		
		ПерваяБукавОтчество = Лев(Объект.Отчество, 1);
		
	КонецЕсли;
	
	Объект.Инициалы = СтрШаблон("%1. %2.", ПерваяБукавИмя, ПерваяБукавОтчество);
	
КонецПроцедуры

#Область АльфаАвтоРаботаСФайлами

&НаКлиенте
Процедура Подключаемый_РаботаСФайламиАльфаАвтоОбработкаОповещения(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, Объект);
	
	Если РезультатОповещения.Свойство("НоваяКартинкаОписания") Тогда 
		ЭтотОбъект.Модифицированность = Истина; 
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти