// Модуль менеджера справочника "Сотрудники"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтрокаПоиска = Параметры.СтрокаПоиска;
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФлагУволен = ЛОЖЬ
	|	И Сотрудники.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""";
	
	Запрос.УстановитьПараметр("СтрокаПоиска",
		"%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска) +"%"
	);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		ЗначениеВыбора = Новый Структура("Значение", Выборка.Ссылка);
		ДанныеВыбора.Добавить(ЗначениеВыбора);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Ссылка)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИБ

// Выполняет заполнение реквизитов ФИО по наименованию сотрудника
//
Процедура ЗаполнитьНовыеРеквизитыФИО() Экспорт
	
	СотрудникиКОбновлениюФИО = ДанныеДляЗаполненияФИО();
	
	Пока СотрудникиКОбновлениюФИО.Следующий() Цикл
		
		ОбновитьФИОВСотруднике(СотрудникиКОбновлениюФИО.Сотрудник);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет заполнение реквизита УчаствуетВПланировании если сотрудник является исполнителем
//
Процедура ЗаполнитьУчаствуетВПланировании() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	НЕ Сотрудники.ПометкаУдаления
		|	И Сотрудники.Исполнитель";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.УчаствуетВПланировании = Перечисления.ВидыИспользованияРабочихМест.ПланированиеПроизводства;
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получения фотографии сотрудника
Функция ПолучитьФотографию(Сотрудник) Экспорт
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат БиблиотекаКартинок.Инкогнито;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник.ФайлКартинки) Тогда
		Возврат БиблиотекаКартинок.Инкогнито;
	КонецЕсли;
	
	Возврат Новый Картинка(РаботаСФайлами.ДвоичныеДанныеФайла(Сотрудник.ФайлКартинки));
КонецФункции

// Функция перезаписывает данные сотрудника
//
// Параметры:
//	НовыеДанные - структура где ключ имя реквизита, а значение - значение реквизита.
//
// Возвращает истину если операция прошла без ошибок и ложь если таковые произошли
//
Функция ОбновитьДанныеСотрудника(НовыеДанные) Экспорт
	СотрудникСсылка = НовыеДанные.Ссылка;
	СотрудникОбъект = СотрудникСсылка.ПолучитьОбъект();
	
	Если НовыеДанные.Свойство("Должность") И ЗначениеЗаполнено(НовыеДанные.Должность) Тогда
		СотрудникОбъект.Должность = НовыеДанные.Должность;
	КонецЕсли;
	
	Если НовыеДанные.Свойство("ПодразделениеКомпании") И ЗначениеЗаполнено(НовыеДанные.ПодразделениеКомпании) Тогда
		СотрудникОбъект.ПодразделениеКомпании = НовыеДанные.ПодразделениеКомпании;
	КонецЕсли;
	
	Если НовыеДанные.Свойство("Огранизация") И ЗначениеЗаполнено(НовыеДанные.Огранизация) Тогда
		СотрудникОбъект.Огранизация = НовыеДанные.Огранизация;
	КонецЕсли;
	
	Если НовыеДанные.Свойство("Код") И ЗначениеЗаполнено(НовыеДанные.Код) Тогда
		СотрудникОбъект.Код = НовыеДанные.Код;
	КонецЕсли;
	
	Если НовыеДанные.Свойство("ФлагУволен") Тогда
		СотрудникОбъект.ФлагУволен = НовыеДанные.ФлагУволен;
	КонецЕсли;
	
	Если НовыеДанные.Свойство("ДатаПриема") И ЗначениеЗаполнено(НовыеДанные.ДатаПриема) Тогда
		СотрудникОбъект.ДатаПриема = НовыеДанные.ДатаПриема;
	КонецЕсли;
	
	Если НовыеДанные.Свойство("ДатаРождения") И ЗначениеЗаполнено(НовыеДанные.ДатаРождения) Тогда
		СотрудникОбъект.ДатаРождения = НовыеДанные.ДатаРождения;
	КонецЕсли;
	
	Если НовыеДанные.Свойство("ДатаУвольнения") И ЗначениеЗаполнено(НовыеДанные.ДатаУвольнения) Тогда
		СотрудникОбъект.ДатаУвольнения = НовыеДанные.ДатаУвольнения;
	КонецЕсли;
	
	Попытка
		СотрудникОбъект.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Функция создания нового сотрудника по переданным данным
Функция СоздатьНовогоСотрудникаДляПользователя(ДанныеСотрдника) Экспорт
	НаименованиеСотрудника = "";
	Если ДанныеСотрдника.Свойство("Наименование",НаименованиеСотрудника) Тогда
		Если НЕ ЗначениеЗаполнено(НаименованиеСотрудника) Тогда
			Возврат Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		
		// попробуем найти сотрудника с таким именем
		НайденныйСотрудник = Справочники.Сотрудники.НайтиПоНаименованию(НаименованиеСотрудника, Истина);
		Если ЗначениеЗаполнено(НайденныйСотрудник) Тогда
			Возврат НайденныйСотрудник;
		КонецЕсли;
		
		// создадим нового сотрудника
		СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
		Для Каждого Реквизит Из ДанныеСотрдника Цикл
			Если Реквизит.Ключ = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			СотрудникОбъект[Реквизит.Ключ] = Реквизит.Значение;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СотрудникОбъект.Код) Тогда
			СотрудникОбъект.УстановитьНовыйКод();
		КонецЕсли;
		Попытка
			СотрудникОбъект.Записать();
			Возврат СотрудникОбъект.Ссылка;
		Исключение
			Возврат Справочники.Сотрудники.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
КонецФункции

// Обработчик события возникающего при изменении данных реквизита "Цех".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦехПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Цех) Тогда
		Если ЗначениеЗаполнено(Объект.Организация) И (НЕ Объект.Организация = Объект.Цех.Организация) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Цех ""%1"" не принадлежит организации ""%2""'"),Объект.Цех, Объект.Организация),
				Объект.Ссылка,
				"Организация"
			);
		Иначе
			Объект.Организация = Объект.Цех.Организация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ПодразделениеКомпании) И (НЕ Объект.ПодразделениеКомпании = Объект.Цех.ПодразделениеКомпании) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Цех ""%1"" не принадлежит подразделению ""%2""'"),Объект.Цех, Объект.ПодразделениеКомпании),
				Объект.Ссылка,
				"Организация"
			);
		Иначе
			Объект.ПодразделениеКомпании = Объект.Цех.ПодразделениеКомпании;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЦехПриИзменении()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	// Обработаем в зависимости от вида элемента
	Если НЕ Объект.ЭтоГруппа Тогда
		
		ОбязательныеРеквизиты.Добавить("Организация");
		ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
		ОбязательныеРеквизиты.Добавить("Должность"); 
		
		Если Объект.Исполнитель Тогда
			ОбязательныеРеквизиты.Добавить("ТипРесурса");
		КонецЕсли;
		
	КонецЕсли;
		
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаСобытийСправочникаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Цех) Тогда
		Если ЗначениеЗаполнено(Объект.ПодразделениеКомпании) И (НЕ Объект.ПодразделениеКомпании = Объект.Цех.ПодразделениеКомпании) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Цех ""%1"" не принадлежит подразделению ""%2""'"),Объект.Цех, Объект.ПодразделениеКомпании), 
				Объект.Ссылка,
				"Организация"
			);
		Иначе
			Объект.ПодразделениеКомпании = Объект.Цех.ПодразделениеКомпании;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаСобытийСправочникаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Цех) Тогда
		Если ЗначениеЗаполнено(Объект.Организация) И (НЕ Объект.Организация = Объект.Цех.Организация) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Цех ""%1"" не принадлежит организации ""%2""'"), Объект.Цех, Объект.Организация),
				Объект.Ссылка,
				"Организация"
			);
		Иначе
			Объект.Организация = Объект.Цех.Организация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Флаг уволен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ФлагУволенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если Объект.ФлагУволен Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
			Объект.ДатаУвольнения=ТекущаяДатаСеанса();
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
			Объект.ДатаУвольнения = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ФлагУволенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дата увольнения".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаУвольненияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
		Если НЕ Объект.ФлагУволен Тогда
			Объект.ФлагУволен=ИСТИНА;
		КонецЕсли; 
	Иначе
		Если Объект.ФлагУволен Тогда
			Объект.ФлагУволен = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаУвольненияПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ЗащитаПерсональныхДанных.ДобавитьКомандуПечатиСогласияНаОбработкуПерсональныхДанных(КомандыПечати);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнструкцияПоСозданиюФаксимильнойПодписи") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ИнструкцияПоСозданиюФаксимильнойПодписи",
			НСтр("ru = 'Как сделать факсимильную подпись'"),
			ПолучитьОбщийМакет("ИнструкцияПоСозданиюФаксимильнойПодписи"));
	КонецЕсли;

КонецПроцедуры // Печать()

#КонецОбласти

#Область ОбновлениеИБ

Функция ДанныеДляЗаполненияФИО()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Наименование <> """"
		|	И Сотрудники.Фамилия = """"
		|	И Сотрудники.ЭтоГруппа = ЛОЖЬ"
	);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ОбновитьФИОВСотруднике(Сотрудник)
	
	ДляЗаписи = Сотрудник.ПолучитьОбъект();
	ДляЗаписи.ОбменДанными.Загрузка = Истина;
	ЗаполнитьЗначенияСвойств(ДляЗаписи, ФизическиеЛицаКлиентСервер.ЧастиИмени(ДляЗаписи.Наименование));
	ОбновитьИнициалы(ДляЗаписи);
	
	Попытка
		
		ДляЗаписи.Записать();
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось обновить: '")
			+ Символы.ПС
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			"Сотрудники.Обновление ФИО",
			УровеньЖурналаРегистрации.Ошибка,
			,
			Сотрудник,
			ТекстОшибки
		);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьИнициалы(Объект)
	
	ПерваяБукавИмя = "";
	
	Если Не ПустаяСтрока(Объект.Имя) Тогда
		
		ПерваяБукавИмя = Лев(Объект.Имя, 1);
		
	КонецЕсли;
	
	ПерваяБукавОтчество = "";
	
	Если Не ПустаяСтрока(Объект.Отчество) Тогда
		
		ПерваяБукавОтчество = Лев(Объект.Отчество, 1);
		
	КонецЕсли;
	
	Объект.Инициалы = СтрШаблон("%1. %2.", ПерваяБукавИмя, ПерваяБукавОтчество);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли