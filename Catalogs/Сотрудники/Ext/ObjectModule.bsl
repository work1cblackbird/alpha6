// Модуль объекта справочника "Сотрудники"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоКода(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоКода()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// +Софтфон
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		 Наименование 					= ДанныеЗаполнения.АбонентПредставление;
		 ТелефонДляДобавления 			= ДанныеЗаполнения.АбонентКакСвязаться;
		 НоваяКИ 						= КонтактнаяИнформация.Добавить();
		 НоваяКИ.Вид 					= Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника;
		 НоваяКИ.Тип 					= Перечисления.ТипыКонтактнойИнформации.Телефон;
		 СтруктураНомера				= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ТелефонДляДобавления);
		 НоваяКИ.НомерТелефона 			= ТелефонДляДобавления;
		 НоваяКИ.НомерТелефонаБезКодов 	= СтруктураНомера.НомерТелефона;
		 Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			 НоваяКИ.Представление	= СтруктураНомера.КодСтраны + " (" + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		 Иначе	
			 НоваяКИ.Представление	= ТелефонДляДобавления;
		 КонецЕсли;	
		 ЗначенияПолей	= Новый СписокЗначений;
		 ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		 ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		 ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		 НоваяКИ.ЗначенияПолей	= ЗначенияПолей;
	КонецЕсли;
	// -Софтфон
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - СправочникОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи объекта.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем проверку соответствия Цеха, Организации и Подразделения
	Если ЗначениеЗаполнено(Цех) Тогда
		Если ЗначениеЗаполнено(Организация) И (НЕ Организация = Цех.Организация) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Цех ""%1"" не принадлежит организации ""%2""'"), Цех, Организация),
				ЭтотОбъект, 
				"Организация",
				,
				Отказ
			);
		Иначе
			Организация = Цех.Организация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодразделениеКомпании) И (НЕ ПодразделениеКомпании = Цех.ПодразделениеКомпании) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Цех ""%1"" не принадлежит подразделению ""%2""'"), Цех,ПодразделениеКомпании),
				ЭтотОбъект,
				"Организация",
				,
				Отказ
			);
		Иначе
			ПодразделениеКомпании = Цех.ПодразделениеКомпании;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЭтоГруппа И Исполнитель И Не ЗначениеЗаполнено(ТипРесурса) Тогда
		ТипРесурса = Справочники.ТипыРесурсов.ПоУмолчанию;
	КонецЕсли;

	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередЗаписью(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если НЕ ЭтоГруппа Тогда  
	
		Если ФлагУволен И НЕ ЗначениеЗаполнено(ДатаУвольнения) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнена дата увольнения сотрудника.'"),,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриЗаписи(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Почистим регистры сведений от удаляемого объекта
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияКомпании.Период КАК Период,
	               |	СведенияКомпании.Организация КАК Организация,
	               |	СведенияКомпании.Объект КАК Объект,
	               |	""СведенияКомпании"" КАК ИмяРегистра
	               |ИЗ
	               |	РегистрСведений.СведенияКомпании КАК СведенияКомпании
	               |ГДЕ
	               |	СведенияКомпании.Значение = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты КАК УчетнаяЗаписьЭлектроннойПочты,
	               |	""НастройкиУчетныхЗаписейЭлектроннойПочты"" КАК ИмяРегистра
	               |ИЗ
	               |	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	               |ГДЕ
	               |	НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты,
	               |	""НастройкиУчетныхЗаписейЭлектроннойПочты""
	               |ИЗ
	               |	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	               |ГДЕ
	               |	НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаВедениеПапок = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	сфпИсторияЗвонков.ДатаНачала КАК ДатаНачала,
	               |	сфпИсторияЗвонков.НомерТелефона КАК НомерТелефона,
	               |	сфпИсторияЗвонков.Звонок КАК Звонок,
	               |	""сфпИсторияЗвонков"" КАК ИмяРегистра
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	               |ГДЕ
	               |	сфпИсторияЗвонков.АбонентКонтакт = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатусыСобытия.Период КАК Период,
	               |	СтатусыСобытия.Событие КАК Событие,
	               |	""СтатусыСобытия"" КАК ИмяРегистра
	               |ИЗ
	               |	РегистрСведений.СтатусыСобытия КАК СтатусыСобытия
	               |ГДЕ
	               |	СтатусыСобытия.Менеджер = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	Для каждого РезультатЗапроса Из РезультатыЗапросов Цикл
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПередУдалением()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
