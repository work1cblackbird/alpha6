// Модуль менеджера справочника "Дефекты"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НерабочееВремя";
	Элемент.Код                       = "00000003";
	Элемент.Наименование              = НСтр("ru = 'Нерабочее время'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Цвет                      = Новый ХранилищеЗначения(Новый Цвет(255, 255, 255));


КонецПроцедуры

// Создание элементов при первом запуске
//
Процедура ВыполнитьНачальноеЗаполнение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Дефекты.Ссылка,
	               |	Дефекты.Наименование КАК Наименование,
	               |	Дефекты.Родитель
	               |ИЗ
	               |	Справочник.Дефекты КАК Дефекты
	               |ГДЕ
	               |	Дефекты.ЭтоГруппа = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	ТаблицаГруппВСправочнике = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Дефекты.Ссылка,
	               |	Дефекты.Наименование КАК Наименование,
	               |	Дефекты.Родитель,
	               |	Дефекты.Код
	               |ИЗ
	               |	Справочник.Дефекты КАК Дефекты
	               |ГДЕ
	               |	Дефекты.ЭтоГруппа = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	ТаблицаЭлементовВСправочнике = Запрос.Выполнить().Выгрузить();
	
	Макет = Справочники.Дефекты.ПолучитьМакет("Дефекты");
	Попытка
		ОбластьТаблицаДефектов = Макет.ПолучитьОбласть("Список|ТаблицаДефектов");
		
		// получим таблицу из макета
		ТаблицаДефектов = Новый ТаблицаЗначений;
		ТаблицаДефектов.Колонки.Добавить("Родитель");
		ТаблицаДефектов.Колонки.Добавить("Наименование");
		
		ВысотаТаблицы = Макет.ПолучитьОбласть("Список").ВысотаТаблицы;
		
		Для НомерСтроки = 1 По ВысотаТаблицы  Цикл
			
			// проверим заполнение текущей строки макета
			НомерПоПорядку = ОбластьТаблицаДефектов.Область(НомерСтроки, 1).Текст;	
			Если ПустаяСтрока(НомерПоПорядку) Тогда
				Прервать;
			КонецЕсли;
			СтрокаТаблицыДефектов 					= ТаблицаДефектов.Добавить();
			СтрокаТаблицыДефектов.Родитель 			= ОбластьТаблицаДефектов.Область(НомерСтроки, 2).Текст;
			СтрокаТаблицыДефектов.Наименование	 	= ОбластьТаблицаДефектов.Область(НомерСтроки, 3).Текст;
			
		КонецЦикла; 
		
		Если ТаблицаДефектов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицыДефектов Из ТаблицаДефектов Цикл
			СтрокаТаблицыГруппВСправочнике = Справочники.Дефекты[СтрокаТаблицыДефектов.Родитель];
			
			Если СтрокаТаблицыГруппВСправочнике = Неопределено Тогда
				ТекущийРодитель = Справочники.Дефекты.СоздатьГруппу();
				ТекущийРодитель.УстановитьНовыйКод("");
				ТекущийРодитель.Наименование = СокрЛП(СтрокаТаблицыДефектов.Родитель);
				ТекущийРодитель.ОбменДанными.Загрузка = Истина;
				ТекущийРодитель.Записать();
				
				СтрокаТаблицыГруппВСправочнике = ТаблицаГруппВСправочнике.Добавить();
				СтрокаТаблицыГруппВСправочнике.Ссылка = ТекущийРодитель.Ссылка;
				СтрокаТаблицыГруппВСправочнике.Наименование = ТекущийРодитель.Наименование;
			КонецЕсли;
			
			ТекущийРодитель = СтрокаТаблицыГруппВСправочнике.Ссылка;
			
			СтрокаТаблицыДефектовВСправочнике = ТаблицаЭлементовВСправочнике.Найти(
				СокрЛП(СтрокаТаблицыДефектов.Наименование), "Наименование");
			
			Если СтрокаТаблицыДефектовВСправочнике = Неопределено Тогда
				ТекущийЭлемент = Справочники.Дефекты.СоздатьЭлемент();
				ТекущийЭлемент.УстановитьНовыйКод("");
			Иначе
				ТекущийЭлемент = СтрокаТаблицыДефектовВСправочнике.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			ТекущийЭлемент.Родитель = ТекущийРодитель;
			ТекущийЭлемент.Наименование = СокрЛП(СтрокаТаблицыДефектов.Наименование);
			
			Попытка
				ТекущийЭлемент.ОбменДанными.Загрузка = Истина;
				ТекущийЭлемент.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось записать объект'"),
				УровеньЖурналаРегистрации.Ошибка,,
				ТекущийЭлемент,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
			КонецПопытки;
			
		КонецЦикла;
		
	Исключение
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Ошибка работы с таблицей дефектов'"),
		УровеньЖурналаРегистрации.Предупреждение,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
КонецПроцедуры // ЗагрузитьТребованияИзМакета() Экспорт

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирование значения примечания (дефекта) в виде строки
//
// Параметры
//  СтараяСтрока - <Строка> - Старый список дефектов
//  НоваяСтрока  - <Дефекты.Ссылка>,<Массив> - Массив дефектов, которые надо добавить.
//
// Возвращаемое значение:
//   <Строка>   - Новый вид примечания (дефекта).
//
Функция СформироватьДефект(НоваяСтрока, СтараяСтрока = "") Экспорт
	
	Если ТипЗнч(НоваяСтрока) = Тип("СправочникСсылка.Дефекты") Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(НоваяСтрока);
		
	ИначеЕсли ТипЗнч(НоваяСтрока) = Тип("Массив") Тогда
		
		Массив = НоваяСтрока;
		
	Иначе
		
		Возврат СтараяСтрока;
		
	КонецЕсли;
	
	Если Массив.Количество() = 0 Тогда
		
		Возврат СтараяСтрока;
		
	КонецЕсли;
	 
	НоваяСтрока = СокрЛП(СтараяСтрока);
	
	Для Сч = 0 По Массив.Количество() - 1 Цикл
		
		ЗначениеЭлемента = Массив[Сч];
		
		Если НоваяСтрока <> "" Тогда
			 
			НоваяСтрока = НоваяСтрока + Символы.ВК;
			
		КонецЕсли;
		
		НоваяСтрока = НоваяСтрока + СокрЛП(ЗначениеЭлемента.Наименование);
		
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

#КонецОбласти

#КонецЕсли