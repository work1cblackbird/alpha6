#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Элементы.Классификатор.МножественныйВыбор = Истина;
	ЗакрыватьПриВыборе = Ложь;
	
	ИнициализироватьКлассификатор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКлассификатор

// Вызывается при двойном щелчке мыши или нажатии Enter
//
&НаКлиенте
Процедура КлассификаторВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавленыНовыеЭлементыКлассификатора = Ложь;
	ВыбранныйЭлемент = КлассификаторВыборНаСервере(ВыбраннаяСтрока, ДобавленыНовыеЭлементыКлассификатора);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОповеститьФормуИПользователяИЗакрыть(ВыбранныйЭлемент, ДобавленыНовыеЭлементыКлассификатора);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при нажатии на кнопку выбрать
//
&НаКлиенте
Процедура КлассификаторВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавленыНовыеЭлементыКлассификатора = Ложь;
	ВыбранныйЭлемент = КлассификаторВыборНаСервере(Значение, ДобавленыНовыеЭлементыКлассификатора);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОповеститьФормуИПользователяИЗакрыть(ВыбранныйЭлемент, ДобавленыНовыеЭлементыКлассификатора);
	КонецЕсли;
	Закрыть();
	
КонецПроцедуры

// Функция обрабатывает данные выбора пользователя
//
// В случае, если выбранные элементы классификатора отсутствуют в справочнике
// они будут добавлены.
//
// Если был осуществлен множественный выбор, то все выбранные элементы будут обработаны
// (добавлены в справочник в случае отсутствия), в возвращаемый параметр, будет передан
// массив ссылок на элементы.
//
// Параметры:
// ВыбранныеСтроки - Массив, массив выбранных строк таблицы формы классификатор
// ДобавленыНовыеЭлементыКлассификатора - Булево, флаг устанавливается 
//  если в справочник были добавлены элементы.
//
// Возвращаемое значение:
// Неопределено или СправочникСсылка: 
// 		КлассификаторВидовЭкономическойДеятельности 
// 		или  КлассификаторПродукцииПоВидамДеятельности 
//		или КлассификаторУслугНаселению
//
&НаСервере
Функция КлассификаторВыборНаСервере(Знач ВыбранныеСтроки, ДобавленыНовыеЭлементыКлассификатора = Ложь)

	СсылкаНаЭлемент = Неопределено;
	
	МассивСсылок = Новый Массив();
	
	Если ТипЗнч(ВыбранныеСтроки) = Тип("Массив") Тогда
		
		Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
			
			Элемент = Классификатор.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если НЕ ЗначениеЗаполнено(Элемент.Ссылка) Тогда
				
				ДобавитьЭлементКлассификатора(Элемент);
				ДобавленыНовыеЭлементыКлассификатора = Истина;
				
			КонецЕсли;
			
			МассивСсылок.Добавить(Элемент.Ссылка);
			СсылкаНаЭлемент = Элемент.Ссылка;
			
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ВыбранныеСтроки) = Тип("Число") Тогда	
		
		Элемент = Классификатор.НайтиПоИдентификатору(ВыбранныеСтроки);
		
		Если НЕ ЗначениеЗаполнено(Элемент.Ссылка) Тогда
			
			ДобавитьЭлементКлассификатора(Элемент);
			ДобавленыНовыеЭлементыКлассификатора = Истина;
			
		КонецЕсли;
		
		МассивСсылок.Добавить(Элемент.Ссылка);
		СсылкаНаЭлемент = Элемент.Ссылка;
		
	КонецЕсли;

	Если Подбор Тогда
		Возврат МассивСсылок;
	Иначе	
		Возврат СсылкаНаЭлемент;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в коллекцию оформляемых полей компоновки данных новое поле
//
// Параметры:
//	КоллекцияОформляемыхПолей 	- коллекция оформляемых полей КД
//	ИмяПоля						- Строка - имя поля.
//
// Возвращаемое значение:
//	ОформляемоеПолеКомпоновкиДанных - созданное поле.
//
// Пример:
// 	Форма.УсловноеОформление.Элементы[0].Поля.
//
&НаСервере
Функция ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля)
	
	ПолеЭлемента = КоллекцияОформляемыхПолей.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);

	Возврат ПолеЭлемента;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Классификатор");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Классификатор.ЕстьСсылка",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина
	);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветФонаВыделенияПоля);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРанееДобавленныеЭлементы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОКПД2.Код КАК Код,
	|	КлассификаторОКПД2.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет классификатор данными
//
&НаСервере
Процедура ЗаполнитьКлассификатор()
	
	Классификатор.Очистить();
	
	// Получаем полную таблицу элементов классификатора.
	// В таблице содержатся Код и Наименование, элементов классификатора.
	ЭлементыКлассификатора = Справочники.КлассификаторОКПД2.ТаблицаКлассификатораОКПД2();
	
	// Получаем таблицу элементов классификатора уже имеющихся в справочнике.
	РанееДобавленныеЭлементыКлассификатора = ПолучитьРанееДобавленныеЭлементы();
	РанееДобавленныеЭлементыКлассификатора.Индексы.Добавить("Код");
	
	Если ЭлементыКлассификатора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем структуру которую будем использовать для поиска существующих элементов.
	СтруктураПоискаРанееСозданных = Новый Структура();
	
	Для Каждого Элемент Из ЭлементыКлассификатора Цикл
		
		НоваяСтрока = Классификатор.Добавить();
		НоваяСтрока.Код   = Элемент.Код;
		
		Наименование = Элемент.Наименование;
		НоваяСтрока.Наименование = Наименование;
		
		СтруктураПоискаРанееСозданных.Вставить("Код", Элемент.Код);
		НайденныйЭлемент = РанееДобавленныеЭлементыКлассификатора.НайтиСтроки(СтруктураПоискаРанееСозданных);
		
		Если НайденныйЭлемент.Количество() > 0 Тогда
			
			НоваяСтрока.Ссылка = НайденныйЭлемент[0].Ссылка;
			НоваяСтрока.ЕстьСсылка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Классификатор.Сортировать("ЕстьСсылка Убыв, Код Возр");
		
КонецПроцедуры	

// Добавляет новый элемент в классификатор
// Параметры:
// - ВыбраннаяСтрока - Строка таблицы, источник данных для заполнения реквизитов классификатора
// 		Если в строке присутствуют данные о единице измерения, 
//		запускается поиск и добавление единицы измерения.
//
&НаСервере
Процедура ДобавитьЭлементКлассификатора(ВыбраннаяСтрока)
	
	ЭлементКлассификатора = Справочники.КлассификаторОКПД2.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ЭлементКлассификатора, ВыбраннаяСтрока);
	ЭлементКлассификатора.НаименованиеПолное = ВыбраннаяСтрока.Наименование;
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'В справочник <Классификатор ОКПД2> добавлен новый элемент %1 (%2)'"),
		ВыбраннаяСтрока.Код,
		ВыбраннаяСтрока.Наименование
	);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	ЭлементКлассификатора.Записать();
	ВыбраннаяСтрока.Ссылка = ЭлементКлассификатора.Ссылка;
	ВыбраннаяСтрока.ЕстьСсылка = Истина;
	
КонецПроцедуры
	
// Вызывает оповещение об изменении справочника
// вызывает оповещение пользователя
// закрывает форму подбора из классификатора.
//
&НаКлиенте
Процедура ОповеститьФормуИПользователяИЗакрыть(ВыбранныйЭлемент, ДобавленыНовыеЭлементыКлассификатора = Ложь)
	
	Если ДобавленыНовыеЭлементыКлассификатора Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.КлассификаторОКПД2"));
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Сохранение'"),
			,
			Заголовок,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ОповеститьОВыборе(ВыбранныйЭлемент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКлассификатор()
	
	ЗаполнитьКлассификатор();
	
КонецПроцедуры

#КонецОбласти

