///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка справочника "Характеристики номенклатуры"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьЗаголовок = Ложь;
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Владелец") Тогда
		Владелец = Параметры.Отбор.Владелец;
		
		Если Владелец <> Неопределено Тогда
			ДанныеВладельца = ВладелецХарактеристик(Владелец);
			
			Владелец = ДанныеВладельца.ВладелецДляОтбора;
			Параметры.Отбор.Владелец = ДанныеВладельца.ВладелецДляОтбора;
			УстановитьЗаголовок = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	Если УстановитьЗаголовок Тогда
		ОбновитьЗаголовокФормы(ЭтотОбъект, ДанныеВладельца);
	КонецЕсли;
	
	Закрепить = Параметры.Свойство("ЗакрепитьСПрава");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Закрепить Тогда
		УправлениеДиалогомКлиент.ЗакрепитьФорму();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АктивизацияСтрокиНоменклатуры" И Источник = ВладелецФормы Тогда
		Владелец = Параметр;
		ДанныеВладельца = ВладелецХарактеристик(Параметр);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Владелец",
			?(ЗначениеЗаполнено(ДанныеВладельца.ВладелецДляОтбора), ДанныеВладельца.ВладелецДляОтбора, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")),
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина);
		
		ОбновитьЗаголовокФормы(ЭтотОбъект, ДанныеВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = НельзяВводитьХарактеристики(Владелец);
	
	Если Группа Тогда
		Возврат;
	КонецЕсли;
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеСправочникаХарактеристикиНоменклатуры");
	Иначе
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыСправочникаХарактеристикиНоменклатуры");
	КонецЕсли;
	// Конец ОценкаПроизводительности
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент.ТекущиеДанные, "ЭтоГруппа")
		И Элемент.ТекущиеДанные.ЭтоГруппа
	Тогда
		Возврат;
	КонецЕсли;
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыСправочникаХарактеристикиНоменклатуры");
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция НельзяВводитьХарактеристики(Владелец)
	
	// проверим заполнение владельца
	Если Не ЗначениеЗаполнено(Владелец) Тогда 
		ОбщегоНазначения.СообщитьПользователю (НСтр("ru = 'Не определен владелец, невозможно определить тип учета по характеристикам.'"));
		Возврат Истина;
	Иначе
		// получим ускоряющие переменные
		НоменклатураИспользованиеХарактеристик=Ложь;
		Если ТипЗнч(Владелец)=Тип("СправочникСсылка.Номенклатура") Тогда
			Если Владелец.ЭтоГруппа Тогда
				ОбщегоНазначения.СообщитьПользователю (НСтр("ru = 'Владелец не может быть группой.'"));
				Возврат Истина;
			КонецЕсли;
			ТипИспользованиеХарактеристик = Владелец.ТипНоменклатуры.ИспользованиеХарактеристик;
		Иначе
			ТипИспользованиеХарактеристик = Владелец.ИспользованиеХарактеристик;
		КонецЕсли;
		// если по данному типу учет по характеристикам не ведется, то...
		Если ТипИспользованиеХарактеристик=3 Тогда
			ТипНоменклатуры=?(ТипЗнч(Владелец)=Тип("СправочникСсылка.Номенклатура"),Владелец.ТипНоменклатуры,Владелец);
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru = 'Для номенклатуры типа: """+СокрЛП(ТипНоменклатуры)+"""
			|учет по характеристикам не ведется .'"));
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ВладелецХарактеристик(Владелец)
	
	ВладелецДляОтбора   = Неопределено;
	ОбщиеХарактеристики = Неопределено;
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		СоставПолей = Новый Структура;
		СоставПолей.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
		СоставПолей.Вставить("ИспользованиеХарактеристик", "ТипНоменклатуры.ИспользованиеХарактеристик");
		ДанныеВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Владелец, СоставПолей);
		ДанныеВладельца.Вставить("Номенклатура", Владелец);
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.ТипыНоменклатуры") Тогда
		СоставПолей = Новый Структура;
		СоставПолей.Вставить("ИспользованиеХарактеристик", "ИспользованиеХарактеристик");
		ДанныеВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Владелец, СоставПолей);
		ДанныеВладельца.Вставить("ТипНоменклатуры", Владелец);
		ДанныеВладельца.Вставить("Номенклатура", Неопределено);
	КонецЕсли;
	
	Если ДанныеВладельца = Неопределено Тогда
		Возврат Новый Структура("ВладелецДляОтбора,ОбщиеХарактеристики", "", Ложь);
	КонецЕсли;
	
	Если ДанныеВладельца.ИспользованиеХарактеристик = 1 Тогда
		ВладелецДляОтбора = ДанныеВладельца.ТипНоменклатуры;
		ОбщиеХарактеристики = Истина;
	ИначеЕсли ДанныеВладельца.ИспользованиеХарактеристик = 2 Тогда
		ВладелецДляОтбора = ДанныеВладельца.Номенклатура;
		ОбщиеХарактеристики = Ложь;
	ИначеЕсли ДанныеВладельца.ИспользованиеХарактеристик = 3 Тогда
		ВладелецДляОтбора = ДанныеВладельца.Номенклатура;
	КонецЕсли;
	
	Возврат Новый Структура("ВладелецДляОтбора,ОбщиеХарактеристики", ВладелецДляОтбора, ОбщиеХарактеристики);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокФормы(Форма, ДанныеВладельца)
	
	ПредставлениеВладельца = ?(ДанныеВладельца.ВладелецДляОтбора = Неопределено, "", СтрШаблон("(%1)",СокрЛП(ДанныеВладельца.ВладелецДляОтбора)));
	Если ДанныеВладельца.ОбщиеХарактеристики = Неопределено Тогда
		ТекстЗаголовка = НСтр("ru = 'Учет по характеристикам не ведется'");
	ИначеЕсли ДанныеВладельца.ОбщиеХарактеристики Тогда
		ШаблонЗаголовка = НСтр("ru = 'Характеристики общие для вида номенклатуры %1'");
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, ПредставлениеВладельца);
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Характеристики номенклатуры %1'");
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, ПредставлениеВладельца);
	КонецЕсли;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок     = ТекстЗаголовка;
	Форма.Элементы.Список.ТолькоПросмотр = (ДанныеВладельца.ОбщиеХарактеристики = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеВладельца.ВладелецДляОтбора));
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

