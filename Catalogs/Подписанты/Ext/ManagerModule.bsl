// Модуль менеджера справочника "Подписанты"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновлениеВидаПодписантов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подписанты.Ссылка КАК Ссылка,
	|	Подписанты.Подписант КАК Подписант
	|ИЗ
	|	Справочник.Подписанты КАК Подписанты
	|ГДЕ
	|	Подписанты.ВидПодписанта = ЗНАЧЕНИЕ(Перечисление.ВидыПодписантов.ПустаяССылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Элемент = Выборка.ССылка.ПолучитьОбъект();
		
		Элемент.ОбменДанными.Загрузка = Истина;
		
		Если ТипЗнч(Выборка.Подписант) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			Элемент.ВидПодписанта = Перечисления.ВидыПодписантов.ПодписантОтОрганизации;
			
		ИначеЕсли  ТипЗнч(Выборка.Подписант) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Элемент.ВидПодписанта = Перечисления.ВидыПодписантов.ПодписантОтКонтрагента;
		КонецЕсли;
		
		Попытка
			Элемент.Записать();
		Исключение
			
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Ошибка обновления элемента <%1>: %2'"),
			Элемент,
			ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");  
	ОбязательныеРеквизиты.Добавить("Подписант"); 
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаСобытийСправочникаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаСобытийСправочникаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

#КонецОбласти

#КонецОбласти

#КонецЕсли