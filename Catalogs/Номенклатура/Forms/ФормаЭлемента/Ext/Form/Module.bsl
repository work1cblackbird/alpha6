///////////////////////////////////////////////////////////////////////////////
// Модуль формы элемента справочника "Номенклатура"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ПараметрыОтображенияМеток = УправлениеСвойствами.ПараметрыОтображенияМеток();
	ПараметрыОтображенияМеток.ИмяЭлементаДляРазмещенияМеток = "ГруппаМетки";
	ПараметрыОтображенияМеток.МаксимумМетокНаФорме = 3;
	ПараметрыОтображенияМеток.ВариантОтображенияМеток = Перечисления.ВариантыОтображенияМеток.Надпись;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияМеток", ПараметрыОтображенияМеток);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	СопоставлениеНоменклатурыКонтрагентов.ПриСозданииФормыНоменклатуры(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	ЕдиницаИзмеренияМассы = Константы.ОсновнаяЕдиницаИзмеренияМассы.Получить();
	
	// Покажем колонку "Характеристика", если имеются товары с ведением учета по характеристикам.
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.СоставНабора);
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект, "СоставНабора");
	ДобавитьНазванияВкладок();
	
	АвтоматическоеСозданиеНоменклатурыИзПрайсЛистовКонтрагентов = ПравоПользователя("АвтоматическоеСозданиеНоменклатурыИзПрайсЛистовКонтрагентов");
	ОсновнойТипЦенПродажи = ПравоПользователя("ОсновнойТипЦенПродажи");
	
	// Устанавливаем видимость реквизита "КодТНВЭД"
	Если Объект.ТипНоменклатуры = Справочники.ТипыНоменклатуры.Услуга ИЛИ Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
		Элементы.КодТНВЭД.Видимость = Ложь;
		Объект.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
	Иначе
		Элементы.КодТНВЭД.Видимость = Истина;
	КонецЕсли;
	КодТНВЭДПриИзмененииНаСервере();
	
	// Спрячем вкладку "В пути" со страницы остатков.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПути") Тогда
		ЭлементПоиска = Элементы.ПереключательОстатки.СписокВыбора.НайтиПоЗначению(4);
		Если ЭлементПоиска <> Неопределено Тогда
			Элементы.ПереключательОстатки.СписокВыбора.Удалить(ЭлементПоиска);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьНаименованиеИностранноеПоУмолчанию();
	КэшНаименованиеИностранное = Справочники.Номенклатура.СформироватьНаименованиеИностранноеПоУмолчанию(Объект);
	
	СформироватьНаименованиеПолноеПоУмолчанию();
	КэшНаименованиеПолное = Справочники.Номенклатура.СформироватьНаименованиеПолноеПоУмолчанию(Объект);
	
	ДобавлениеАналогов = Ложь;
	
	ОстаткиПоСкладам.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	ОстаткиПоЯчейкам.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	Партии.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	ОстаткиПоСкладамиИОрганизациям.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	ОстаткиВПроизводстве.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	ОстаткиТоваровВПути.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	ЗаказыПокупателей.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	ЗаказыПоставщикам.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	
	Если
		Объект.ТипНоменклатуры = Справочники.ТипыНоменклатуры.Набор
		Или Объект.ТипНоменклатуры = Справочники.ТипыНоменклатуры.Комплект
	Тогда
		
		УстановкаВидимостиХарактеристикиНоменклатуры();
		
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) = Тип("Структура")
		И Параметры.Основание.Свойство("ПрайсЛист") Тогда
		ПрайсЛистОснование = Параметры.Основание.ПрайсЛист;
	КонецЕсли;
	
	ЗаполнитьБазовыйКаталог();

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Произведем настройку параметров отображения кнопок командной панели списков
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "СоставНабора");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Цены");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ЦеныКонтрагентов");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ТаблицаЗаменСтарые");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ТаблицаЗаменНовые");
	
	АртикулДо = Объект.Артикул;	
	
	// +Альфа-Авто
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыДинамическогоСписка(ЭтотОбъект, "Применяемость");
	// -Альфа-Авто
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	РаботаСФайламиАльфаАвтоКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	ПараметрыДействия = Новый Структура;
	
	Если ИмяСобытия = "ЗаписаныЦены" Тогда
		ЗагрузитьЦены();
		ЗагрузитьЦеныКонтрагентов();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Инициализируем текущее изображение с прикрепленных файлов
	ТекущаяКартинка = Объект.ФайлКартинки;
	
	РаботаСФайламиАльфаАвтоВызовСервера.ВывестиТекущееИзображение(ЭтотОбъект);
	
	// Проверим переданные параметры на форму
	Если Параметры.Свойство("ИзПрайса") Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ИзПрайса);
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьБазовыйКаталог();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	АртикулДо = Объект.Артикул;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НовыйОбъект = Истина;
	КонецЕсли;
	
	ДобавлениеАналогов = Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Артикул);
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Номенклатура");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Прослеживаемый И Объект.ТипНоменклатуры.ВедетсяМаркировка Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Номенклатура не может быть одновременно прослеживаемой и маркируемой.");
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПрайсЛист", ПрайсЛистОснование);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// Подставим основную единицу
	Если НовыйОбъект Тогда
		НовыйОбъект = Ложь;
		
		ОстаткиПоСкладам.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
		ОстаткиПоЯчейкам.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
		Партии.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
		ОстаткиПоСкладамиИОрганизациям.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);		
		// +Альфа-Авто
		ОстаткиВПроизводстве.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
		// -Альфа-Авто
	КонецЕсли;
	
	// установим видимость колонки характеристики номенклатуры
	Если Элементы.СоставНабора.Видимость Тогда
		УстановкаВидимостиХарактеристикиНоменклатуры();
	КонецЕсли;
		
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ДобавлениеАналогов Тогда
		
		ДобавитьВАналоги();
		
	КонецЕсли;
		
	Если ОписаниеОповещенияОЗакрытии <> Неопределено
		И ТипЗнч(ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры) = Тип("Структура") Тогда
		
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("ДобавленнаяСсылка", Объект.Ссылка);
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("Производитель", Объект.Производитель);
		
		Если НЕ ПрайсЛистОснование.Пустая() Тогда
			ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("ПрайсЛист", ПрайсЛистОснование);
			ПрайсЛистОснование = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	СформироватьНаименованиеИностранноеПоУмолчанию();
	СформироватьНаименованиеПолноеПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеПриИзмененииНаСервере();
	ОбновитьНаименованиеВСопутствующихРегистрах();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ВидНоменклатурыПриИзмененииНаСервере(ПараметрыДействия);
	
	Если ПараметрыДействия.Свойство("ВидНоменклатурыУслуга") Тогда
		Объект.Артикул          = "";
		Объект.АртикулДляПоиска = "";
		АртикулПриИзменении(Элементы.Артикул);
		
		Объект.Производитель = Неопределено;
		ПроизводительПриИзменении(Элементы.Производитель);
		
		Объект.СтранаПроисхождения = Неопределено;
		Объект.КратностьПоставок   = 0;
		Объект.Вес                 = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Справочники.Номенклатура.ТипНоменклатурыПриИзменении(Объект, ПараметрыДействия);
	Если ЕстьРеквизит(ЭтотОбъект, "Свойства_УстановленныеМетки") Тогда
		ЭтотОбъект.Свойства_УстановленныеМетки.Очистить();
	КонецЕсли;
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТипНоменклатурыПриИзмененииНаСервере();
	
	//// !!!_alalek Убрать когда будет исправлено поведение платформы, и настройки командных панелей не будут сбрасываться.
	// Произведем настройку параметров отображения кнопок командной панели списков.
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "СоставНабора");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ЯчейкиХранения");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Цены");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ЦеныКонтрагентов");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ТаблицаЗаменСтарые");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ТаблицаЗаменНовые");
	
	// +Альфа-Авто
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыДинамическогоСписка(ЭтотОбъект, "Применяемость");
	// -Альфа-Авто
	
КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Справочники.Номенклатура.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗагрузитьЦены();
		ЗагрузитьЦеныКонтрагентов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КодТНВЭДПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если НЕ Объект.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка() Тогда
		Элементы.КодТНВЭДРасширеннаяПодсказка.Заголовок = Объект.КодТНВЭД.НаименованиеПолное;
		Объект.Прослеживаемый = Объект.КодТНВЭД.Прослеживаемый;
	Иначе
		Элементы.КодТНВЭДРасширеннаяПодсказка.Заголовок = "";
		Объект.Прослеживаемый = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДПриИзменении(Элемент)
	
	КодТНВЭДПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроизводительПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Справочники.Номенклатура.ПроизводительПриИзменении(Объект, ПараметрыДействия);
	
	ЗаполнитьБазовыйКаталог();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	
	ПроизводительПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АртикулПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	Если АртикулПриИзмененииНаСервере(ПараметрыДействия) Тогда
		// сформируем вопрос
		СписокРегистров = "";
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЕстьЗамены", Ложь) Тогда
			СписокРегистров = СписокРегистров + Символы.НПП + "- Замены";
		КонецЕсли;
		
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЕстьГруппыАналогов", Ложь) Тогда
			СписокРегистров = СписокРегистров + ?(ПустаяСтрока(СписокРегистров), "", Символы.ПС) + Символы.НПП + "- Аналоги";
		КонецЕсли;
		
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЕстьУпущенныйСпрос", Ложь) Тогда
			СписокРегистров = СписокРегистров + ?(ПустаяСтрока(СписокРегистров), "", Символы.ПС) + Символы.НПП + "- Упущенный спрос";
		КонецЕсли;
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Изменился номер по каталогу, обновить значение в сопутствующих регистрах?%1Регистры:%1%2'"),
			Символы.ПС,
			СписокРегистров);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОповещенияАртикулПриИзменении",
			ЭтотОбъект,
			ПараметрыДействия);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("АртикулДляПоискаДо") Тогда
		ЗаполнитьБазовыйКаталог();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	РаботаСФайламиАльфаАвтоКлиент.АдресКартинкиНажатие(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеИностранноеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КэшНаименованиеИностранное = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КэшНаименованиеПолное = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	Если ПереключательЦены = 0 И ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("Цены").Пометка = Ложь Тогда
		ЗагрузитьЦены();
		ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("Цены").Пометка = Истина;
	ИначеЕсли ПереключательЦены = 1 И ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("ЦеныКонтрагентов").Пометка = Ложь Тогда
		ЗагрузитьЦеныКонтрагентов();
		ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("ЦеныКонтрагентов").Пометка = Истина;
	КонецЕсли;
	
	Элементы.УстановкаЦен.Видимость             = ПереключательЦены = 0;
	Элементы.УстановкаЦенПоПрайсЛисту.Видимость = (НЕ ПереключательЦены = 0);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АртикулОкончаниеВводаТекстаНаСервере(Текст, ЗапрещенныеСимволы)
	
	Возврат НЕ ОбработкаСобытийСправочникаСервер.ПроверкаНаНедопустимыеСимволы(Текст, ЗапрещенныеСимволы);
	
КонецФункции

&НаКлиенте
Процедура АртикулОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗапрещенныеСимволы = "";
	Если АртикулОкончаниеВводаТекстаНаСервере(Текст, ЗапрещенныеСимволы) Тогда
		Текст = НСтр("ru = 'Были обнаружены следующие недопустимые символы:'")+ Символы.НПП + ЗапрещенныеСимволы;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Объект.Ссылка , "Артикул" , "Объект");
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовУправленияОбщегоНазначения

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаЦеныОбщая" И НЕ ЗначениеЗаполнено(Цены) Тогда
		ВидЦенПриИзменении(Элементы.ВидЦен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

#Область ОбработчикиСобытийПолейТаблицыФормыСостав

&НаСервереБезКонтекста
Процедура СоставНабораНоменклатураОбработкаВыбораНаСервере(Номенклатура, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Номенклатура Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя добавлять сам набор/комплект .'"));
		СтандартнаяОбработка = Ложь; 
	ИначеЕсли  ВыбранноеЗначение.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Набор") ИЛИ ВыбранноеЗначение.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Комплект") Тогда
		// Проверим нет ли кольцевой ссылки (т.е. не выбран ли набор, в состав которого входит данный заполняемый набор).
		ЕстьКольцевыеСсылки = ПроверитьКольцевыеСсылки(Номенклатура, ВыбранноеЗначение);
		Если ЕстьКольцевыеСсылки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В состав выбранного набора/комплекта или его составляющих входит текущий набор .
						   |Возникает кольцевая ссылка. Добавление невозможно .'"));
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СоставНабораНоменклатураОбработкаВыбораНаСервере(Объект.Ссылка, ВыбранноеЗначение,СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура СоставНабораНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Строка = Объект.СоставНабора.НайтиПоИдентификатору(Элементы.СоставНабора.ТекущаяСтрока);
	СоставПолей = Новый Структура;
	СоставПолей.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
	СоставПолей.Вставить("ИспользованиеХарактеристик", "ТипНоменклатуры.ИспользованиеХарактеристик");
	ДанныеТипаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Номенклатура, СоставПолей);
	
	Если ДанныеТипаНоменклатуры.ИспользованиеХарактеристик = 1 Тогда
		Строка.ВладелецХарактеристики = ДанныеТипаНоменклатуры.ТипНоменклатуры;
	ИначеЕсли ДанныеТипаНоменклатуры.ИспользованиеХарактеристик = 2 Тогда
		Строка.ВладелецХарактеристики = Строка.Номенклатура;
	Иначе
		Строка.ВладелецХарактеристики = Неопределено;
	КонецЕсли;
	// Необходимо показать колонку Характеристик, если для выбран товар с характеристиками.
	Элементы.СоставНабораХарактеристикаНоменклатуры.Видимость = Элементы.СоставНабораХарактеристикаНоменклатуры.Видимость
		ИЛИ Строка.ВладелецХарактеристики <> Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораНоменклатураПриИзменении(Элемент)
	
	СоставНабораНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыУслуга

&НаКлиенте
Процедура СпособРаспределенияДопРасходовПриИзменении(Элемент)
	
	СпособРаспределенияДопРасходовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СпособРаспределенияДопРасходовПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ПереключательЗаказыПриИзменении(Элемент)
	
	Элементы.ЗаказыПокупателей.Видимость = ПереключательЗаказы = 0;
	Элементы.ЗаказыПоставщикам.Видимость = ПереключательЗаказы = 1;
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыПокупателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТаблицыЗаказыВыбор(Элемент, ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоставщикамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТаблицыЗаказыВыбор(Элемент, ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыЗаказыВыбор(Элемент, ВыбраннаяСтрока)
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТипДокумента = СтрЗаменить(ТипЗнч(ТекущиеДанные.Заказ), " ", "");
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Заказ);
	
	// необходимо для корректного сообщения в режиме ограниченного доступа
	Попытка
		ОткрытьФорму("Документ."+ТипДокумента+".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		ТекстОшибки = ИнформацияОбОшибке();
		Если ТекстОшибки.Причина.Описание = НСтр("ru = 'Недостаточно прав для просмотра'")
			ИЛИ ТекстОшибки.Причина.Описание = 
					НСтр("ru = 'У пользователя недостаточно прав на исполнение операции над базой данных.'") Тогда
					
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки.Причина.Описание);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыОстатки

#Область ОбработчикиСобытийПолейТаблицыФормыОстатки

&НаКлиенте
Процедура ПереключательОстаткиПриИзменении(Элемент)
	
	Элементы.ОстаткиПоСкладам.Видимость               = ПереключательОстатки = 0;
	Элементы.ОстаткиВПроизводстве.Видимость           = ПереключательОстатки = 1;
	Элементы.Партии.Видимость                         = ПереключательОстатки = 2;
	Элементы.ОстаткиПоЯчейкам.Видимость               = ПереключательОстатки = 3;
	Элементы.ОстаткиТоваровВПути.Видимость            = ПереключательОстатки = 4;
	Элементы.ОстаткиПоСкладамиИОрганизациям.Видимость = ПереключательОстатки = 5;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные 	= Элементы.Партии.ТекущиеДанные;
	ТипДокумента 	= ПолучитьИмяТипаДокумента(ТекущиеДанные.Партия);
	ПараметрыФормы 	= Новый Структура("Ключ", ТекущиеДанные.Партия);
	// Необходимо для корректного сообщения в режиме ограниченного доступа.
	Попытка
		ОткрытьФорму("Документ." + ТипДокумента + ".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		ТекстОшибки = ИнформацияОбОшибке();
		Если ТекстОшибки.Причина.Описание = НСтр("ru = 'Недостаточно прав для просмотра'") 
			ИЛИ ТекстОшибки.Причина.Описание = 
					НСтр("ru = 'У пользователя недостаточно прав на исполнение операции над базой данных.'") Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки.Причина.Описание);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоСкладамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;

	Если Элемент.ТекущийЭлемент = Элементы.ОстаткиПоСкладамРезерв Тогда
 		// Откроем отчет по заказам покупателей

		// Фильтры
		ОтчетОтбор = Новый Структура;
		ОтчетОтбор.Вставить("СкладКомпании", Элементы.ОстаткиПоСкладам.ТекущиеДанные.СкладКомпании);
		ОтчетОтбор.Вставить("Номенклатура",  Объект.Ссылка);
		
		НастройкиВарианта = ПолучитьНастройкуОтчета("ОстаткиИОборотыЗаказовПокупателей");
		
		ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ОстаткиИОборотыЗаказовПокупателей", "Основной", НастройкиВарианта,,, ОтчетОтбор, , ОбщегоНазначенияКлиент.ДатаСеанса());
		
	//ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ОстаткиПоСкладамОжидается Тогда
 	//TODO: При наличии отчета по "Ожидается" можно расширить расшифровку.

	Иначе
		// Откроем отчет по остаткам товаров
		
		// Фильтры
		ОтчетОтбор = Новый Структура;
		ОтчетОтбор.Вставить("СкладКомпании", Элементы.ОстаткиПоСкладам.ТекущиеДанные.СкладКомпании);
		ОтчетОтбор.Вставить("Номенклатура",  Объект.Ссылка);
		
		НастройкиВарианта = ПолучитьНастройкуОтчета("ОстаткиИОборотыТоваров");
		
		ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ОстаткиИОборотыТоваров", "Остатки", НастройкиВарианта,,, ОтчетОтбор, , ОбщегоНазначенияКлиент.ДатаСеанса());

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоЯчейкамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	// фильтры
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("СкладКомпании", Элементы.ОстаткиПоЯчейкам.ТекущиеДанные.СкладКомпании);
	ОтчетОтбор.Вставить("Номенклатура",  Объект.Ссылка);
	
	НастройкиВарианта = ПолучитьНастройкуОтчета("ОстаткиИОборотыТоваровОрдерногоСклада");
	
	ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ОстаткиИОборотыТоваровОрдерногоСклада", "Остатки", НастройкиВарианта,,, ОтчетОтбор, , ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЦены

#Область ОбработчикиСобытийПолейТаблицыФормыЦены

&НаКлиенте
Процедура ТабличноеПолеЦеныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Цены.ТекущиеДанные;
	Отбор = Новый Структура;
	Отбор.Вставить("ТипЦен",                     ТекущиеДанные.ТипЦен);
	Отбор.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.Характеристика);
	Отбор.Вставить("ПодразделениеКомпании",      ТекущиеДанные.Подразделение);
	Отбор.Вставить("ЕдиницаИзмерения",           ТекущиеДанные.ЕдиницаИзмерения);
	Отбор.Вставить("Номенклатура",               Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.Цены.ФормаСписка", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеЦеныКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЦеныКонтрагентов.ТекущиеДанные;
	Отбор = Новый Структура;
	Отбор.Вставить("ТипЦен",                     ТекущиеДанные.ТипЦен);
	Отбор.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.Характеристика);
	Отбор.Вставить("ПодразделениеКомпании",      ТекущиеДанные.Подразделение);
	Отбор.Вставить("ЕдиницаИзмерения",           ТекущиеДанные.ЕдиницаИзмерения);
	Отбор.Вставить("Номенклатура",               Объект.Ссылка);
	Отбор.Вставить("Контрагент",                 ТекущиеДанные.Контрагент);
	Отбор.Вставить("ДоговорВзаиморасчетов",      ТекущиеДанные.ДоговорВзаиморасчетов);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.Цены.ФормаСписка", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипНоменклатуры) Тогда
	
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			"Для редактирования меток необходимо заполнить тип номенклатуры.",
			,
			"Объект.ТипНоменклатуры");
		Возврат;
	
	КонецЕсли;
	Если Модифицированность Тогда
		
		ДополнительныеПараметры = Новый Структура("РедактироватьМетки", Истина);
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаВопросаЗаписи",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Для редактирования меток необходимо записать справочник.'")
				+ Символы.ПС
				+ НСтр("ru = 'Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена,
			0);
		
		Возврат;
	КонецЕсли;
	УправлениеСвойствамиАльфаАвтоКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура УстановкаЦен(Команда)
	
	ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
	ПараметрыЗаписиНового.ПредставлениеДействия = Истина;
	ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(ЭтотОбъект, ПараметрыЗаписиНового);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ Модифицированность Тогда
		ТипЦен = ПредопределенноеЗначение("Справочник.ТипыЦен.НормативнаяЦена");
		// Формируем описание обработчика перехвата
		ОбработчикВводаЗначения = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВводЦены", ЭтотОбъект, "ВводТипаЦены");
		ПараметрыФормы = Новый Структура("РежимВыбораТиповЦен, ТолькоБазовыеТипыЦен", Истина, Истина);
		ОткрытьФорму("Документ.ИзменениеЦен.Форма.ФормаНастройкиТиповЦен", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикВводаЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаЦенПоПрайсЛисту(Команда)
	
	// Прайс лист по производителю
	ПрайсЛист = ПредопределенноеЗначение("Справочник.ПрайсЛистыКонтрагентов.ПустаяСсылка");
	Если ЗначениеЗаполнено(Объект.Производитель) Тогда
		ПрайсЛист = ПолучитьПрайсЛистПоПроизводителю();
	КонецЕсли;
	// Не нашли - выбираем вручную
	Если НЕ ЗначениеЗаполнено(ПрайсЛист) Тогда
		// Формируем описание обработчика перехвата
		ОбработчикВводаЗначения = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВводПрайсЛиста", ЭтотОбъект, "ВводПрайсЛиста");
		ПоказатьВводЗначения(ОбработчикВводаЗначения,ПрайсЛист, НСтр("ru = 'Выберите прайс-лист'") + "...",Тип("СправочникСсылка.ПрайсЛистыКонтрагентов"));
	Иначе
		ПродолжитьУстановкуЦенПоПрайсЛисту(ПрайсЛист);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьУстановкуЦенПоПрайсЛисту(ПрайсЛист)
	
	Если НЕ ЗначениеЗаполнено(ПрайсЛист) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПрав = ПолучитьПравоДоступа();
	ТипЦен = Неопределено;
	
	Если СтруктураПрав.ВариантСоздания = ПредопределенноеЗначение("Перечисление.ВариантыОтветов.Нет") Тогда
		
		Если Элементы.ЦеныКонтрагентов.ТекущаяСтрока = Неопределено Тогда
			
			ТипЦен = СтруктураПрав.ОсновнойТипЦенПродажи;
			
		Иначе
			
			ТипЦен = ЦеныКонтрагентов.НайтиПоИдентификатору(Элементы.ЦеныКонтрагентов.ТекущаяСтрока).ТипЦен;
			
		КонецЕсли; 

		// Формируем описание обработчика перехвата
		ОбработчикВводаЗначения = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОповещенияВводПрайсЛиста",
			ЭтотОбъект,
			Новый Структура("ВводТипаЦенПоПрайсЛисту", ПрайсЛист)
		);
		ПараметрыФормы = Новый Структура("РежимВыбораТиповЦен", Истина);
		
		Если ТипЦен <> Неопределено Тогда
			
			СписокТиповЦен = Новый СписокЗначений;
			СписокТиповЦен.Добавить(ТипЦен);
			ПараметрыФормы.Вставить("СписокТиповЦен", СписокТиповЦен);
			
		КонецЕсли;
		
		ОткрытьФорму("Документ.ИзменениеЦен.Форма.ФормаНастройкиТиповЦен", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикВводаЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли СтруктураПрав.ВариантСоздания = ПредопределенноеЗначение("Перечисление.ВариантыОтветов.Спрашивать") Тогда
		ПараметрыВопрос = Новый Структура;
		ПараметрыВопрос.Вставить("ИнтерактивноеДобавлениеИзмененияЦен");
		ПараметрыВопрос.Вставить("ПрайсЛист",ПрайсЛист);
		ПараметрыВопрос.Вставить("ТипЦен",ТипЦен);
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияВводПрайсЛиста", ЭтотОбъект, ПараметрыВопрос);
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Открыть документ <Изменения цен> для редактирования?
		|(Если <Да> - то открывать, если ответили <Нет>, то документ сформируется автоматически.'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПродолжитьУстановкуЦенПоПрайсЛистуПоТипуЦен(ПрайсЛист, ТипЦен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьУстановкуЦенПоПрайсЛистуПоТипуЦен(ПрайсЛист, ТипЦен,ИнтерактивноеДобавлениеИзмененияЦен= Ложь)
	
	ПараметрыДокумента = ОбработкаПрайсЛистаНаСервере(ПрайсЛист, ТипЦен, ИнтерактивноеДобавлениеИзмененияЦен);
	
	Если ПараметрыДокумента <> Неопределено Тогда
		ПараметрыДокумента.Вставить("Номенклатура", Объект.Ссылка);
		ОткрытьФорму("Документ.ИзменениеЦен.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения", ПараметрыДокумента), ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ДобавитьИзображение(ЭтотОбъект, Объект, Команда);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзображениеНаСервере()
	
	РаботаСФайламиАльфаАвтоВызовСервера.УдалитьИзображение(ЭтотОбъект);
	ПолучитьСледующееИзображение("Вперед");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	Если Объект.ФайлКартинки = ТекущаяКартинка Тогда
		ВывестиСообщение(НСтр("ru = 'Картинка установлена основной. Прежде чем удалить ее необходимо снять признак ""Основная"".'"));
		Возврат;
	КонецЕсли;
	
	УдалитьИзображениеНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ПросмотретьИзображение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображения(Команда)
	
	ДвижениеПросмотра = ?(СтрНайти(Команда.Имя, "Вперед"), "Вперед", "Назад");
	ПолучитьСледующееИзображение(ДвижениеПросмотра);
	
КонецПроцедуры

&НаСервере
Процедура СделатьОсновнойКартинкойНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьОсновнойКартинкой(Команда)
	
	Если НЕ РаботаСФайламиАльфаАвтоКлиент.ФайлЯвляетсяДопустимойКартинкой(ТекущаяКартинка) Тогда
		
		Возврат;
		
	КонецЕсли;

	Если Объект.ФайлКартинки = ТекущаяКартинка Тогда
	    Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.МоделиПрисоединенныеФайлы.ПустаяСсылка");
	Иначе	
		Объект.ФайлКартинки = ТекущаяКартинка;
	КонецЕсли;
	
	Модифицированность = Истина;
	СделатьОсновнойКартинкойНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

&НаСервере
Процедура ДобавитьНазванияВкладок()
	
	СписокНазванийВкладок = Новый Структура("Цены,ЦеныКонтрагентов");
	Для Каждого Вкладка Из СписокНазванийВкладок Цикл
		ТаблицаПризнаковОткрытияВкладок.Добавить(Вкладка.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЦены()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяНоменклатура",   Объект.Ссылка);
	ДополнительныеПараметры.Вставить("ТекущаяХарактеристика", Неопределено);
	ДополнительныеПараметры.Вставить("ЗапросТекст",           "ИСТИНА");
	
	Справочники.Номенклатура.ЗагрузитьЦены(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЦеныКонтрагентов()
	
	ЦеныКонтрагентов.Очистить();
	// Загрузка цен контрагентов
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                    |	ЦеныСрезПоследних.ТипЦен КАК ТипЦен,
	                    |	ЦеныСрезПоследних.Контрагент КАК Контрагент,
						|	ЦеныСрезПоследних.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	                    |	ВЫБОР
	                    |		КОГДА ЦеныСрезПоследних.ТипЦен.ВВалютеУчета = ИСТИНА
	                    |			ТОГДА ЦеныСрезПоследних.Номенклатура.ВалютаУчета
	                    |		ИНАЧЕ ЦеныСрезПоследних.ТипЦен.ВалютаЦены
	                    |	КОНЕЦ КАК ВалютаЦены,
	                    |	ЦеныСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                    |	ЦеныСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                    |	ЦеныСрезПоследних.ПодразделениеКомпании КАК Подразделение,
	                    |	ЦеныСрезПоследних.Цена КАК Цена,
	                    |	0 КАК ЦенаРегл
	                    |ПОМЕСТИТЬ ТаблицаЦен
	                    |ИЗ
	                    |	РегистрСведений.Цены.СрезПоследних(
	                    |			&НаДату,
	                    |			Номенклатура = &Номенклатура
	                    |				И Контрагент <> &Контрагент) КАК ЦеныСрезПоследних
	                    |ГДЕ
	                    |	ЦеныСрезПоследних.Цена > 0
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ТаблицаЦен.Контрагент,
	                    |	ТаблицаЦен.ДоговорВзаиморасчетов,
	                    |	ТаблицаЦен.ТипЦен КАК ТипЦен,
	                    |	ТаблицаЦен.ВалютаЦены,
	                    |	ТаблицаЦен.ВалютаЦены КАК БазоваяВалюта,
	                    |	ТаблицаЦен.ХарактеристикаНоменклатуры,
	                    |	ТаблицаЦен.ЕдиницаИзмерения,
	                    |	ТаблицаЦен.Подразделение,
	                    |	ТаблицаЦен.Цена,
	                    |	ТаблицаЦен.ЦенаРегл,
	                    |	NULL КАК ОкруглятьВБольшуюСторону,
	                    |	NULL КАК Точность,
	                    |	0 КАК ПолеСортировки,
	                    |	ТаблицаЦен.ТипЦен.Рассчитывается КАК Рассчитывается
	                    |ИЗ
	                    |	ТаблицаЦен КАК ТаблицаЦен
	                    |
	                    |ОБЪЕДИНИТЬ ВСЕ
	                    |
	                    |ВЫБРАТЬ
	                    |	ТаблицаЦен.Контрагент,
	                    |	ТаблицаЦен.ДоговорВзаиморасчетов,
	                    |	ТипыЦенПоВидамНоменклатуры.Ссылка,
	                    |	ТипыЦенПоВидамНоменклатуры.ВалютаЦены,
	                    |	ТипыЦенПоВидамНоменклатуры.БазоваяВалюта,
	                    |	ТаблицаЦен.ХарактеристикаНоменклатуры,
	                    |	ТаблицаЦен.ЕдиницаИзмерения,
	                    |	ТаблицаЦен.Подразделение,
	                    |	ТаблицаЦен.Цена + ТаблицаЦен.Цена * (ЕСТЬNULL(ТипыЦенПоВидамНоменклатуры.ПроцентСкидкиНаценкиТаблица, 0) / 100),
	                    |	ТаблицаЦен.ЦенаРегл,
	                    |	ТипыЦенПоВидамНоменклатуры.ОкруглятьВБольшуюСторону,
	                    |	ТипыЦенПоВидамНоменклатуры.Точность,
	                    |	1,
	                    |	ТаблицаЦен.ТипЦен.Рассчитывается
	                    |ИЗ
	                    |	ТаблицаЦен КАК ТаблицаЦен
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                    |			ВЫБОР
	                    |				КОГДА ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен ЕСТЬ NULL
	                    |					ТОГДА ТипыЦен.БазовыйТипЦен
	                    |				ИНАЧЕ ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен
	                    |			КОНЕЦ КАК БазовыйТипЦен,
	                    |			ВЫБОР
	                    |				КОГДА ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен ЕСТЬ NULL
	                    |					ТОГДА ТипыЦен.БазовыйТипЦен.ВалютаЦены
	                    |				ИНАЧЕ ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен.ВалютаЦены
	                    |			КОНЕЦ КАК БазоваяВалюта,
	                    |			ТипыЦен.ВалютаЦены КАК ВалютаЦены,
	                    |			ТипыЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	                    |			ТипыЦен.Точность КАК Точность,
	                    |			ВЫБОР
	                    |				КОГДА ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки ЕСТЬ NULL 
	                    |					ТОГДА ТипыЦен.ПроцентСкидкиНаценки
	                    |				ИНАЧЕ ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки
	                    |			КОНЕЦ КАК ПроцентСкидкиНаценкиТаблица,
	                    |			ТипыЦен.Ссылка КАК Ссылка
	                    |		ИЗ
	                    |			Справочник.ТипыЦен КАК ТипыЦен
	                    |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК ТипыЦенПроцентыСкидкиНаценки
	                    |				ПО (ТипыЦенПроцентыСкидкиНаценки.Ссылка = ТипыЦен.Ссылка)
	                    |					И (ТипыЦенПроцентыСкидкиНаценки.ЦеноваяГруппа = &ЦеноваяГруппа)) КАК ТипыЦенПоВидамНоменклатуры
	                    |		ПО ТаблицаЦен.ТипЦен = ТипыЦенПоВидамНоменклатуры.БазовыйТипЦен
	                    |ГДЕ
	                    |	ТаблицаЦен.Цена > 0
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	ПолеСортировки,
	                    |	ТипЦен");	
	Запрос.УстановитьПараметр("НаДату", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", Объект.ЦеноваяГруппа);	
	Запрос.УстановитьПараметр("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ТаблицаЦеныКонтрагентов=Запрос.Выполнить().Выгрузить();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтавкаНДС, "Ставка");
	
	Для Каждого ТекСтрока Из ТаблицаЦеныКонтрагентов Цикл
		// для расчетных типов цен перерасчет из валюты базового типа цен
		ТекСтрока.Цена = ?(ТекСтрока.ВалютаЦены <> ТекСтрока.БазоваяВалюта, 
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.Цена, ТекСтрока.БазоваяВалюта, 
				ТекущаяДатаСеанса(), ТекСтрока.ВалютаЦены, ТекущаяДатаСеанса()), ТекСтрока.Цена);
		
		Если ТекСтрока.ТипЦен.ОкруглятьВБольшуюСторону Тогда
			ТекСтрока.Цена = Окр(ТекСтрока.Цена + (0.5 / Pow(10, ТекСтрока.ТипЦен.Точность)), ТекСтрока.ТипЦен.Точность, 0);
		Иначе
			ТекСтрока.Цена = Окр(ТекСтрока.Цена,ТекСтрока.ТипЦен.Точность, 0);
		КонецЕсли;
		
		Если ВалютаРегламентированногоУчета <> Справочники.Валюты.ПустаяСсылка() Тогда
			ТекСтрока.ЦенаРегл = ?(ТекСтрока.ВалютаЦены = ВалютаРегламентированногоУчета, ТекСтрока.Цена,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.Цена, 
					ТекСтрока.ВалютаЦены, ТекущаяДатаСеанса(), ВалютаРегламентированногоУчета, ТекущаяДатаСеанса()));	
		КонецЕсли;
		
		НоваяСтрока = ЦеныКонтрагентов.Добавить();
		НоваяСтрока.Характеристика = ТекСтрока.ХарактеристикаНоменклатуры;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		
		Если ТекСтрока.ТипЦен.ЦенаВключаетНДС Тогда
			НоваяСтрока.ЦенаБезНДС     = ТекСтрока.Цена - Окр((ТекСтрока.Цена * Ставка) / (100 + Ставка), 2);
			НоваяСтрока.ЦенаБезНДСРегл = ТекСтрока.ЦенаРегл - Окр((ТекСтрока.ЦенаРегл * Ставка) / (100 + Ставка), 2);
		Иначе
			НоваяСтрока.ЦенаБезНДС     = ТекСтрока.Цена;
			НоваяСтрока.ЦенаБезНДСРегл = ТекСтрока.ЦенаРегл;
			НоваяСтрока.Цена           = ТекСтрока.Цена + Окр((ТекСтрока.Цена * Ставка) / 100, 2);
			НоваяСтрока.ЦенаРегл       = ТекСтрока.ЦенаРегл + Окр((ТекСтрока.ЦенаРегл * Ставка) / 100, 2);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьКольцевыеСсылки(Номенклатура, Набор)
	
	Для Каждого Строка Из Набор.СоставНабора Цикл
		Если Строка.Номенклатура = Номенклатура Тогда
			Возврат Истина;
		ИначеЕсли Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор ИЛИ Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Комплект Тогда
			Если ПроверитьКольцевыеСсылки(Номенклатура, Строка.Номенклатура) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОбработкаПрайсЛистаНаСервере(ПрайсЛист, ТипЦен, ИнтерактивноеДобавлениеИзмененияЦен)
	
	ТаблицаЦен = ПрайсЛистыКонтрагентов.ДанныеИзПрайсЛиста(
		ПрайсЛист,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка)
	);
	КоличествоВПрайсЛисте = ТаблицаЦен.Количество();
	
	Если КоличествоВПрайсЛисте = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Информация о номенклатуре отсутствует в прайс-листе.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЦен = Неопределено ИЛИ ТипЦен.Количество() =0 Тогда
		ТипЦенНоменклатуры = ?(ЗначениеЗаполнено(ПрайсЛист.ТипЦен),
			ПрайсЛист.ТипЦен,
			?(Элементы.Цены.ТекущаяСтрока = Неопределено,
				ПравоПользователя("ОсновнойТипЦенЗакупки", Объект),
				Цены.НайтиПоИдентификатору(Элементы.Цены.ТекущаяСтрока).ТипЦен)
		);
		СписокТиповЦен = Новый СписокЗначений;
		СписокТиповЦен.Добавить(ТипЦенНоменклатуры);
		ТипЦен = Новый Структура("ТекущийСписокТипЦен", СписокТиповЦен);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата",ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("СписокТиповЦен", ТипЦен);
	ПараметрыРасчетаТиповЦен = Новый Структура();
	ПараметрыРасчетаТиповЦен.Вставить("РасчетЦенОт",4);
	ПараметрыРасчетаТиповЦен.Вставить("ПроцентНаценкиИзНоменклатуры", Ложь);
	СтруктураПараметров.Вставить("ПараметрыРасчетаТиповЦен", ПараметрыРасчетаТиповЦен);
	СтруктураПараметров.Вставить("ПрайсЛистКонтрагента",ПрайсЛист);
	СтруктураПараметров.Вставить("Контрагент",ПрайсЛист.Владелец);
	СтруктураПараметров.Вставить("ХозОперация",Справочники.ХозОперации.УстановкаЦенКонтрагента);
	
	Если ИнтерактивноеДобавлениеИзмененияЦен Тогда
		Возврат СтруктураПараметров;
	Иначе
		СтруктураПараметров.Вставить("Номенклатура", Объект.Ссылка);
		ДокументИзменениеЦен = Документы.ИзменениеЦен.СоздатьДокумент();
		ДокументИзменениеЦен.Заполнить(СтруктураПараметров);
		Попытка
			ДокументИзменениеЦен.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Создан новый документ %1 №%2 от %3'"),
					ДокументИзменениеЦен.ХозОперация,
					ДокументИзменениеЦен.Номер,
					ДокументИзменениеЦен.Дата)
			);
		Исключение
			ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		ЗагрузитьЦеныКонтрагентов();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПравоДоступа()
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВариантСоздания", ПравоПользователя("АвтоматическоеСозданиеНоменклатурыИзПрайсЛистовКонтрагентов", Объект));
	СтруктураВозврата.Вставить("ОсновнойТипЦенЗакупки", ПравоПользователя("ОсновнойТипЦенЗакупки", Объект));
	СтруктураВозврата.Вставить("ОсновнойТипЦенПродажи", ПравоПользователя("ОсновнойТипЦенПродажи", Объект));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьПрайсЛистПоПроизводителю()
	
	// получим параметры из прайс-листа
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрайсЛистыКонтрагентов.Ссылка КАК ПрайсЛист
	|ИЗ
	|	Справочник.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.Производитель = &Производитель");
	Запрос.УстановитьПараметр("Производитель",Объект.Производитель);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Если Выборка.Следующий() Тогда
			ПрайсЛист = Выборка.ПрайсЛист;
		КонецЕсли;
	КонецЕсли;
	Возврат ПрайсЛист;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыДокументаНаСервере(СписокТипЦен)
	
	БазовыйТипЦен = ПравоПользователя("ОсновнойТипЦенЗакупки", Объект);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("БазовыйТипЦен", БазовыйТипЦен); 
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура УстановкаВидимостиХарактеристикиНоменклатуры()
	
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.СоставНабора);
	
	БезХарактеристик = Новый Структура("ВладелецХарактеристики", Неопределено);
	Элементы.СоставНабораХарактеристикаНоменклатуры.Видимость = Объект.СоставНабора.
		Выгрузить(БезХарактеристик, "ХарактеристикаНоменклатуры").Количество() <> Объект.СоставНабора.Количество();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкуОтчета(КлючОтчета)

	НастройкиВарианта = Справочники.Номенклатура.ПолучитьНастройкуОтчета(КлючОтчета);

	Возврат НастройкиВарианта;

КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияАртикулПриИзменении(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьАртикулВСопутствующихРегистрах(
			ДополнительныеПараметры.АртикулДляПоискаДо,
			Объект.АртикулДляПоиска,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияВводПрайсЛиста(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ВводПрайсЛиста" Тогда
		ПродолжитьУстановкуЦенПоПрайсЛисту(РезультатОповещения);
	ИначеЕсли ДополнительныеПараметры.Свойство("ВводТипаЦенПоПрайсЛисту") Тогда
		ПродолжитьУстановкуЦенПоПрайсЛистуПоТипуЦен(ДополнительныеПараметры.ВводТипаЦенПоПрайсЛисту, РезультатОповещения);
	ИначеЕсли ДополнительныеПараметры.Свойство("ИнтерактивноеДобавлениеИзмененияЦен") Тогда
		ПродолжитьУстановкуЦенПоПрайсЛистуПоТипуЦен(ДополнительныеПараметры.ПрайсЛист,ДополнительныеПараметры.ТипЦен, РезультатОповещения = КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияВводЦены(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если ДополнительныеПараметры = "ВводТипаЦены" Тогда
		Если РезультатОповещения = Неопределено ИЛИ РезультатОповещения.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран тип цен.'"), Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		СписокТиповЦен = РезультатОповещения;
		ПараметрыДокумента = ПодготовитьПараметрыДокументаНаСервере(СписокТиповЦен);
		Если ПараметрыДокумента <> Неопределено Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ХозОперация", ПредопределенноеЗначение("Справочник.ХозОперации.УстановкаЦенКомпании"));
			ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
			ПараметрыФормы.Вставить("БазовыйТипЦен", ПараметрыДокумента.БазовыйТипЦен);
			ПараметрыФормы.Вставить("СписокТиповЦен", СписокТиповЦен);
			
			ПараметрыТиповЦен = Новый Структура();
			ПараметрыТиповЦен.Вставить("ПроцентНаценкиИзНоменклатуры", Истина);
			ПараметрыТиповЦен.Вставить("РасчетЦенОт", 0);
			ПараметрыФормы.Вставить("ПараметрыРасчетаТиповЦен", ПараметрыТиповЦен);
			
			ОткрытьФорму("Документ.ИзменениеЦен.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ПараметрыФормы), ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСледующееИзображение(ДвижениеПросмотра)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ПолучитьСледующееИзображение(ЭтотОбъект, ДвижениеПросмотра);
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьВыбораОсновнойЕдиницыИзмерения()
	
	Связи = Новый Массив;
	Если Объект.ТипНоменклатуры.Пустая() ИЛИ (Объект.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 2) Тогда
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Ссылка",РежимИзмененияСвязанногоЗначения.Очищать);
		Связи.Добавить(Связь);
	Иначе
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ТипНоменклатуры",РежимИзмененияСвязанногоЗначения.Очищать);
		Связи.Добавить(Связь);
	КонецЕсли;
	Элементы.ОсновнаяЕдиницаИзмерения.СвязиПараметровВыбора = Новый ФиксированныйМассив(Связи);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаименованиеИностранноеПоУмолчанию(ПараметрыДействия=Неопределено)
	
	УправлениеДиалогомСервер
		.СформироватьЗначениеПоУмолчанию(ЭтотОбъект, Объект, ПараметрыДействия, "НаименованиеИностранное");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаименованиеПолноеПоУмолчанию(ПараметрыДействия=Неопределено)
	
	УправлениеДиалогомСервер
		.СформироватьЗначениеПоУмолчанию(ЭтотОбъект, Объект, ПараметрыДействия, "НаименованиеПолное");
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере(ПараметрыДействия)
	
	УправлениеДиалогомНаСервере();
	
	Если Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
		ПараметрыДействия.Вставить("ВидНоменклатурыУслуга");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АртикулПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТребутсяДополнительнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыДействия) <> Тип("Структура") Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	АртикулДляПоискаНовый = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Объект.Артикул);
	Если АртикулДляПоискаНовый <> Объект.АртикулДляПоиска Тогда
		// Требуется проверить наличие данных в связанных регистрах
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Замены.АртикулДляПоиска КАК АртикулДляПоиска,
			|	Замены.АртикулЗаменыДляПоиска КАК АртикулЗаменыДляПоиска
			|ИЗ
			|	РегистрСведений.Замены КАК Замены
			|ГДЕ
			|	(Замены.АртикулДляПоиска = &АртикулДляПоиска
			|			ИЛИ Замены.АртикулЗаменыДляПоиска = &АртикулДляПоиска)
			|	И Замены.Производитель = &Производитель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ГруппыАналогов.АртикулДляПоиска КАК АртикулДляПоиска
			|ИЗ
			|	РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
			|ГДЕ
			|	ГруппыАналогов.АртикулДляПоиска = &АртикулДляПоиска
			|	И ГруппыАналогов.Производитель = &Производитель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УпущенныйСпрос.АртикулДляПоиска КАК АртикулДляПоиска,
			|	УпущенныйСпрос.Производитель КАК Производитель
			|ИЗ
			|	РегистрСведений.УпущенныйСпрос КАК УпущенныйСпрос
			|ГДЕ
			|	УпущенныйСпрос.АртикулДляПоиска = &АртикулДляПоиска
			|	И УпущенныйСпрос.Производитель = &Производитель";
			
			Запрос.УстановитьПараметр("АртикулДляПоиска", Объект.АртикулДляПоиска);
			Запрос.УстановитьПараметр("Производитель"   , Объект.Производитель);
			
			ПакетЗапросов = Запрос.ВыполнитьПакет();
			
			Для Каждого РезультатЗапроса Из ПакетЗапросов Цикл
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ТребутсяДополнительнаяОбработка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТребутсяДополнительнаяОбработка Тогда
				ПараметрыДействия.Вставить("ЕстьЗамены"        , НЕ ПакетЗапросов[0].Пустой());
				ПараметрыДействия.Вставить("ЕстьГруппыАналогов", НЕ ПакетЗапросов[1].Пустой());
				ПараметрыДействия.Вставить("ЕстьУпущенныйСпрос", НЕ ПакетЗапросов[2].Пустой());
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыДействия.Вставить("АртикулДляПоискаДо", Объект.АртикулДляПоиска);
		Объект.АртикулДляПоиска = АртикулДляПоискаНовый;
	КонецЕсли;
	
	Возврат ТребутсяДополнительнаяОбработка;
	
КонецФункции

&НаСервере
Процедура ОбновитьАртикулВСопутствующихРегистрах(АртикулДо, АртикулНовый, ДополнительныеПараметры)
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ЕстьЗамены", Ложь) Тогда
		РегистрыСведений.Замены.ЗаменитьАртикул(АртикулДо, АртикулНовый, Объект.Производитель, Объект.Артикул);
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ЕстьГруппыАналогов", Ложь) Тогда
		РегистрыСведений.ГруппыАналогов.ЗаменитьАртикул(АртикулДо, АртикулНовый, Объект.Производитель, Объект.Артикул);
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ЕстьУпущенныйСпрос", Ложь) Тогда
		РегистрыСведений.УпущенныйСпрос.ЗаменитьАртикул(АртикулДо, АртикулНовый, Объект.Производитель, Объект.Артикул);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименованиеВСопутствующихРегистрах()
	
	ДанныеОбновлены = Ложь;
	
	ОбновитьНаименованиеВСопутствующихРегистрахНаСервере(ДанныеОбновлены);
	
	Если ДанныеОбновлены Тогда 
		
		ПараметрыОповещения = Новый Структура();
		Оповестить("ИзмененыДанныеРегистраГруппыАналогов", ПараметрыОповещения, ЭтаФорма); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеВСопутствующихРегистрахНаСервере(ДанныеОбновлены)
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыАналогов.АртикулДляПоиска КАК АртикулДляПоиска
		|ИЗ
		|	РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
		|ГДЕ
		|	ГруппыАналогов.АртикулДляПоиска = &АртикулДляПоиска
		|	И ГруппыАналогов.Производитель = &Производитель";
		
		Запрос.УстановитьПараметр("АртикулДляПоиска", Объект.АртикулДляПоиска);
		Запрос.УстановитьПараметр("Производитель"   , Объект.Производитель);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			РегистрыСведений.ГруппыАналогов.ЗаменитьНаименование(Объект.АртикулДляПоиска, Объект.Производитель, Объект.Наименование);
			ДанныеОбновлены = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВАналоги() 
	
	РезультатПолученияАналогов = ПолучитьСписокАналогов();
	Если ЗначениеЗаполнено(РезультатПолученияАналогов) Тогда
		
		ТекстВопроса = РезультатПолученияАналогов.ТекстВопроса;
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ИдентификаторГруппы", РезультатПолученияАналогов.ИдентификаторГруппы);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОповещенияВопросДобавленияВАналоги",
			ЭтотОбъект,
			ПараметрыДействия);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры	
	
&НаСервере
Функция  ПолучитьСписокАналогов()	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГруппыАналогов.ИдентификаторГруппы КАК ИдентификаторГруппы,
		|	ГруппыАналогов.АртикулДляПоиска КАК АртикулДляПоиска
		|ПОМЕСТИТЬ ВТ_ГруппаАналогов
		|ИЗ
		|	РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
		|ГДЕ
		|	ГруппыАналогов.АртикулДляПоиска = &АртикулДляПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыАналогов.ИдентификаторГруппы КАК ИдентификаторГруппы,
		|	ГруппыАналогов.Наименование КАК Наименование,
		|	ГруппыАналогов.Артикул КАК Артикул,
		|	ГруппыАналогов.Производитель КАК Производитель
		|ИЗ
		|	ВТ_ГруппаАналогов КАК ВТ_ГруппаАналогов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
		|		ПО ВТ_ГруппаАналогов.ИдентификаторГруппы = ГруппыАналогов.ИдентификаторГруппы";
	
	Запрос.УстановитьПараметр("АртикулДляПоиска", Объект.АртикулДляПоиска);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(); 
	
	СтруктураПараметров = Новый Структура;
	
	Если РезультатЗапроса.Количество() > 0 Тогда 
		
		СтруктураПараметров.Вставить("ИдентификаторГруппы", РезультатЗапроса[0].ИдентификаторГруппы);
		Счетчик = 0;
		ТекстСписокНоменклатуры = "";
		Пока Счетчик <= РезультатЗапроса.Количество() - 1 И Счетчик <= 2 Цикл
			ТекстСписокНоменклатуры = СтрШаблон(НСтр("ru = '%1%3 (арт. - %4, производитель - %5)%2'"),
			ТекстСписокНоменклатуры,
			Символы.ПС,
			РезультатЗапроса[Счетчик].Наименование,
			РезультатЗапроса[Счетчик].Артикул,
			РезультатЗапроса[Счетчик].Производитель); 
			Счетчик = Счетчик +1;
		КонецЦикла;
		
		Если РезультатЗапроса.Количество() > 3 Тогда 
			ОкончаниеТекста = СтрШаблон(
			НСтр("ru = 'и ещё %1 элемент(а)(ов)%2'"),
			РезультатЗапроса.Количество()-3,
			Символы.ПС);
		Иначе
			ОкончаниеТекста = "";
		КонецЕсли;
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Существует группа номенклатуры, включающая артикул %1. В группу входят:%2%3%4Включить создаваемую номенклатуру в эту группу?'"),
			Объект.Артикул,
			Символы.ПС,
			ТекстСписокНоменклатуры,
			ОкончаниеТекста); 
		СтруктураПараметров.Вставить("ТекстВопроса", ТекстВопроса);
		
	КонецЕсли;
		
	Возврат СтруктураПараметров;
		
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияВопросДобавленияВАналоги(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДобавитьЗаписьВРегистрАналогов(ДополнительныеПараметры.ИдентификаторГруппы);
		
	КонецЕсли; 
	
	Если Не ДобавлениеАналогов Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрАналогов(ИдентификаторГруппы)
	
	МенеджерЗаписи = РегистрыСведений.ГруппыАналогов.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Артикул = Объект.Артикул;
	МенеджерЗаписи.АртикулДляПоиска = Объект.АртикулДляПоиска;
	МенеджерЗаписи.ИдентификаторГруппы = ИдентификаторГруппы;
	МенеджерЗаписи.Наименование = Объект.Наименование;
	МенеджерЗаписи.Производитель = Объект.Производитель;
	
	МенеджерЗаписи.Записать(); 
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьБазовыйКаталог()
	// Произведем формирование описания по информации из базового каталога
	ДокументHTML = ПрайсЛистыКонтрагентовВызовСервера.СформироватьПредставлениеИзБазовогоКаталога(Объект.Артикул, Объект.Производитель, Ложь);
	// Проверим целесообразность производить изменение данных поля
	Если НЕ БазовыйКаталог = ДокументHTML Тогда
		БазовыйКаталог = ДокументHTML;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗагрузкиИзБазовогоКаталога(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатОповещения);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыНоменклатурыПоПрайсЛисту(Производитель)
	
	СтруктураРеквизитов = Новый Структура;
	
	ПрайсЛист = ПрайсЛистыКонтрагентов.ПолучитьБазовыйКаталогПроизводителя(Производитель);
	// Нашли базовый каталог - заполним текущие реквизиты номенклатуры
	Если ЗначениеЗаполнено(ПрайсЛист) Тогда
		// Сформируем структуру номенклатуры
		СтруктураРеквизитов.Вставить("Код");
		СтруктураРеквизитов.Вставить("Наименование");
		СтруктураРеквизитов.Вставить("ПометкаУдаления");
		СтруктураРеквизитов.Вставить("Владелец");
		СтруктураРеквизитов.Вставить("Родитель");
		СтруктураРеквизитов.Вставить("ЭтоГруппа");
		СтруктураРеквизитов.Вставить("Ссылка");
		
		МетаданныеНоменклатуры = Метаданные.Справочники.Номенклатура;
		
		Для Каждого Реквизит Из МетаданныеНоменклатуры.Реквизиты Цикл
			Если НЕ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
				СтруктураРеквизитов.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
			ЗначениеСостава = Реквизит.Состав.Найти(МетаданныеНоменклатуры);
			Если ЗначениеСостава=Неопределено ИЛИ (НЕ ЗначениеСостава.Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураРеквизитов.Вставить(Реквизит.Имя);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРеквизитыПоБазовомуКаталогу()
	
	СтруктураДанных = РеквизитыНоменклатурыПоПрайсЛисту(Объект.Производитель);
	
	Если СтруктураДанных.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Номенклатура", СтруктураДанных);
		
		ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаЗагрузкиИзБазовогоКаталога", ЭтотОбъект, ПараметрыФормы);
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЗагрузкиНоменклатуры", ПараметрыФормы, ЭтотОбъект,,,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОписанияПриИзменении(Элемент)
	
	Если ПереключательОписания = 0 Тогда
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаОписание;
	ИначеЕсли ПереключательОписания = 1 Тогда
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаБазовыйКаталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БазовыйКаталогПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = ЛОЖЬ;
	// Обработаем в завсимости от вда нажатой гиперссылки
	Если НЕ ДанныеСобытия.Anchor = Неопределено Тогда
		Если ДанныеСобытия.Anchor.name = "ОбновитьРеквизиты" Тогда
			ОбновитьРеквизитыПоБазовомуКаталогу();
		КонецЕсли;
	Иначе
		Попытка
			ПерейтиПоНавигационнойСсылке(ДанныеСобытия.href);
		Исключение 
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Ошибка перехода по навигационной ссылке'"),
       				"Ошибка",
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, Истина);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОстаткиВПроизводствеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	// фильтры
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("Номенклатура", Объект.Ссылка);
	
	НастройкиВарианта = ПолучитьНастройкуОтчета("ОстаткиИОборотыТоваровВПроизводстве");
	
	ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ОстаткиИОборотыТоваровВПроизводстве", "Остатки", НастройкиВарианта,,, ОтчетОтбор, , ТекущаяДата());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяТипаДокумента(ДокументПартии)
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(ДокументПартии)).Имя;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаВопросаЗаписи(РезультатОповещения, ДополнительныеПараметры = Неопределено)Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да И Записать() Тогда
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "РедактироватьМетки", Ложь) Тогда
			УправлениеСвойствамиАльфаАвтоКлиент.ВыполнитьКоманду(ЭтотОбъект, Элементы.Найти("РедактироватьМетки"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УстановитьСвязьВыбораОсновнойЕдиницыИзмерения();
	// +Альфа-Авто
	// Устанавливаем отбор по владельцу на динамический список Применяемость.
	Если ЗначениеЗаполнено(Объект.Ссылка) И Применяемость.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество()=0 Тогда
		ЭлементОтбора = Применяемость.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЯчейкиПоУмолчанию.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество()=0 Тогда
		ЭлементОтбора = ЯчейкиПоУмолчанию.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	// -Альфа-Авто
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Если ПереключательЦены = 0 Тогда
		Элементы.СтраницыЦены.ТекущаяСтраница = Элементы.СтраницаЦены;
	Иначе
		Элементы.СтраницыЦены.ТекущаяСтраница = Элементы.СтраницаЦеныКонтрагентов;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ НЕ ЗначениеЗаполнено(Объект.ТипНоменклатуры) ИЛИ НЕ ЗначениеЗаполнено(Объект.БазоваяЕдиницаИзмерения) Тогда
		Элементы.ОсновнаяЕдиницаИзмерения.Доступность = Ложь;
	Иначе
		Элементы.ОсновнаяЕдиницаИзмерения.Доступность = Истина;
	КонецЕсли;

	Если Объект.ТипНоменклатуры = Справочники.ТипыНоменклатуры.Услуга
		ИЛИ Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга
		ИЛИ Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор Тогда
		
		Элементы.КодТНВЭД.Видимость = Ложь;
		Объект.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
		Объект.Прослеживаемый = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Прослеживаемый",
			"Видимость",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Прослеживаемый",
			"ТолькоПросмотр",
			(ЗначениеЗаполнено(Объект.ТипНоменклатуры) И Объект.ТипНоменклатуры.ВедетсяМаркировка)
		);
		
	Иначе
		Элементы.КодТНВЭД.Видимость = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Прослеживаемый",
			"Видимость",
			Истина
		);
		// Доступен только если не маркируемый товар
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Прослеживаемый",
			"ТолькоПросмотр",
			(ЗначениеЗаполнено(Объект.ТипНоменклатуры) И Объект.ТипНоменклатуры.ВедетсяМаркировка)
		);
	КонецЕсли;
	КодТНВЭДПриИзмененииНаСервере();
	
	Элементы.СтраницаСоставНабора.Видимость = (Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор ИЛИ Объект.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.Комплект);
	Элементы.СтраницаЦеныОбщая.Видимость = (Объект.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Набор);
	
	Доступ = (Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга);
	Элементы.СтраницаУслуга.Видимость = Доступ;
	Элементы.СтраницаОстатки.Видимость  = НЕ Доступ;
	Элементы.СтраницаЯчейкиПоУмолчанию.Видимость = НЕ Доступ;
	
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,"СоставНабора");
	
	Элементы.СделатьОсновнойКартинкой.Пометка = ?(Объект.ФайлКартинки = ТекущаяКартинка
		И ТекущаяКартинка <> Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка(),
		Истина, Ложь);
		
	РаботаСФайламиАльфаАвто.УстановитьДоступностьКомандДляИзображений(Объект, ЭтаФорма);
	
	Доступ = ПравоДоступа("Изменение",Метаданные.Документы.ИзменениеЦен);
	Элементы.УстановкаЦен.Доступность = Доступ;
	Элементы.УстановкаЦенПоПрайсЛисту.Доступность = Доступ;
		
	// Если объект не записан убираем доступность для вкладок
	НовыйОбъект = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.СтраницаОстатки.Доступность           = НовыйОбъект;
	Элементы.СтраницаЦеныОбщая.Доступность         = НовыйОбъект;
	Элементы.СтраницаЯчейкиПоУмолчанию.Доступность = НовыйОбъект;
	Элементы.СтраницаЗаказы.Доступность            = НовыйОбъект;
	
	// Альфа-Авто
	Элементы.СтраницаПрименяемость.Доступность = НовыйОбъект;
	// Конец АльфаАвто
	// Установим видимость колонок партий
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютыУчетовСовпадают		   = ВалютаРегламентированногоУчета = ВалютаУправленческогоУчета;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПартииЦенаЗакупки",	"Видимость", НЕ ВалютыУчетовСовпадают);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПартииСебестоимость", "Видимость", НЕ ВалютыУчетовСовпадают);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстаткиПоСкладамиИОрганизациямЦенаЗакупки",	"Видимость", НЕ ВалютыУчетовСовпадают);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстаткиПоСкладамиИОрганизациямСебестоимость", "Видимость", НЕ ВалютыУчетовСовпадают);
	
	ДоступАртикулПроизводитель = Объект.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга;
	Элементы.Артикул.Доступность             = ДоступАртикулПроизводитель;
	Элементы.Производитель.Доступность       = ДоступАртикулПроизводитель;
	Элементы.СтранаПроисхождения.Доступность = ДоступАртикулПроизводитель;
	Элементы.КратностьПоставок.Доступность   = ДоступАртикулПроизводитель;
	Элементы.Вес.Доступность                 = ДоступАртикулПроизводитель;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставНабораХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СоставНабора.ВладелецХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "<" + НСтр ("ru = 'без характеристик'") + ">");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Цены.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Цены.Рассчитывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦеныКонтрагентов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦеныКонтрагентов.Рассчитывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СкрытыйВариантОтчетаЦвет);	
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "АртикулПриИзменении" Тогда
		// Обработаем событие в контексте сервера
		АртикулПриИзмененииНаСервере(Новый Структура("Ответ",РезультатОповещения = КодВозвратаДиалога.Да));
	ИначеЕсли ДополнительныеПараметры = "ВводПрайсЛиста" Тогда
		ПродолжитьУстановкуЦенПоПрайсЛисту(РезультатОповещения);
	ИначеЕсли ДополнительныеПараметры = "ВводТипаЦены" Тогда		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВводаЗначения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, Новый Структура("ВводЦены", РезультатОповещения));
		ПоказатьВводЧисла(ОбработчикВводаЗначения, 1, НСтр("ru = 'Введите новую цену номенклатуры'"), 15, 3);
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ВводТипаЦенПоПрайсЛисту") Тогда
		ПродолжитьУстановкуЦенПоПрайсЛистуПоТипуЦен(ДополнительныеПараметры.ВводТипаЦенПоПрайсЛисту,РезультатОповещения);
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ИнтерактивноеДобавлениеИзмененияЦен") Тогда
		ПродолжитьУстановкуЦенПоПрайсЛистуПоТипуЦен(ДополнительныеПараметры.ПрайсЛист,ДополнительныеПараметры.ТипЦен, РезультатОповещения = КодВозвратаДиалога.Да);
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ВводЦены") Тогда
		ТипЦен = ДополнительныеПараметры.ВводЦены;
		НоваяЦена = РезультатОповещения;
		ПараметрыДокумента = ПодготовитьПараметрыДокументаНаСервере(ТипЦен);
		Если ПараметрыДокумента <> Неопределено Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ХозОперация", ПредопределенноеЗначение("Справочник.ХозОперации.УстановкаЦенКомпании"));
			ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
			ПараметрыФормы.Вставить("БазовыйТипЦен", ПараметрыДокумента.БазовыйТипЦен);
			ПараметрыФормы.Вставить("СписокТиповЦен", ТипЦен);
			
			ПараметрыТиповЦен = Новый Структура();
			ПараметрыТиповЦен.Вставить("ПроцентНаценкиИзНоменклатуры", Истина);
			ПараметрыТиповЦен.Вставить("РасчетЦенОт", 0);
			ПараметрыФормы.Вставить("ПараметрыРасчетаТиповЦен", ПараметрыТиповЦен);
			
			ОткрытьФорму("Документ.ИзменениеЦен.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ПараметрыФормы), ЭтотОбъект);
		КонецЕсли;
	Иначе 
		// Обработаем событие в контексте сервера
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
		// Вызываем обработчик результата выполнения
		ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-warning
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти

#Область АльфаАвтоРаботаСФайлами

&НаКлиенте
Процедура Подключаемый_РаботаСФайламиАльфаАвтоОбработкаОповещения(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, Объект);
	
	Если РезультатОповещения.Свойство("НоваяКартинкаОписания") Тогда 
		ЭтотОбъект.Модифицированность = Истина; 
		УправлениеДиалогомНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ДобавлениеАналогов Тогда   
		
		Отказ = Истина;
		ДобавлениеАналогов = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти