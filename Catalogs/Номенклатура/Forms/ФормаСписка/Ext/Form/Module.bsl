///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка справочника "Номенклатура"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	ПараметрыОтбора = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.Отбор);
	
	Если РаботаСФормой.МожноУстановитьОтборПоВладельцу(Параметры) Тогда
		РаботаСФормой.УстановитьОтборПоВладельцуНаДерево(Дерево, Параметры.Отбор);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ПараметрыОтображенияМеток = УправлениеСвойствами.ПараметрыОтображенияМеток();
	ПараметрыОтображенияМеток.ИмяЭлементаДляРазмещенияЛегендыМеток = "ГруппаЛегендаМетки";
	ПараметрыОтображенияМеток.ОтборМеток = Истина;
	ПараметрыОтображенияМеток.ВидОбъектов = Метаданные.Справочники.Номенклатура.ПолноеИмя();

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияМеток", ПараметрыОтображенияМеток);
	ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеСвойствамиАльфаАвто.УстановитьОграничениеОтбораМеток(Список, ПараметрыОтображенияМеток.ВидОбъектов);
	УправлениеСвойствамиАльфаАвто.НастроитьЛегендуМеток(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
		
	РежимПодбора = (Элементы.Список.РежимВыбора И ТипЗнч(Параметры.ПараметрыПодбора) = Тип("Структура")); 
	СформироватьТекстЗапросаКОстаткамПоСкладам();
	ЗаполнитьПараметрыЦенИОстатков(Параметры);
	
	ОбновлениеЗамен = Истина;
	
	Если Элементы.Список.РежимВыбора Тогда
		Элементы.СтраницыРасширеннаяИнформация.Видимость = Истина;
		Элементы.ПоказатьРасширеннуюИнформацию.Пометка   = Ложь;
		УстановитьВидимостьСтраницРасширеннойИнформации(Элементы.ПоказатьРасширеннуюИнформацию.Пометка);
	Иначе
		УстановитьВидимостьСтраницРасширеннойИнформации(Элементы.ПоказатьРасширеннуюИнформацию.Пометка);
	КонецЕсли;
	
	Если РежимПодбора Тогда
		НастроитьФормуДляПодбора(Параметры);
	Иначе
		НастроитьФорму(Параметры);
	КонецЕсли;
	
	СлужебныеРеквизиты = Новый Структура("ТекущийЭлементСписка", Неопределено);
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(ЭтотОбъект, СлужебныеРеквизиты);
	
	УстановитьПараметрыВыводаКолонкиОстатокНаСкладе();
		
	СписокНазванийВкладок = Новый Структура(
		"СтраницаОстаткиСклады,
		|СтраницаПартии,
		|СтраницаОстаткиПоСкладамИОрганизациям,
		|СтраницаОстаткиВПроизводстве,
		|СтраницаОстаткиПоЯчейкам,
		|СтраницаМинимальныеОстатки,
		|СтраницыАналогиНоменклатуры,
		|СтраницаЗамены,
		|СтраницаПрименяемость,
		|СтраницаЗаказыПоставщикам,
		|СтраницаЗаказыПокупателей,
		|СтраницаЦеныКомпании,
		|СтраницаЦеныКонтрагентов,
		|СтраницаПрайсЛистыКонтрагентов,
		|СтраницаБазовыйКаталог,
		|СтраницаОписание,
		|СтраницаТоварыВПути"
	);
	
	Для Каждого Вкладка Из СписокНазванийВкладок Цикл
		ТаблицаПризнаковОткрытияВкладок.Добавить(Вкладка.Ключ);
	КонецЦикла;
	
	НастроитьПолеОтбора(ПараметрыОтбора);
	
	// Установим видимость колонок партий
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ВалютыУчетовСовпадают = ВалютаРегламентированногоУчета = ВалютаУправленческогоУчета; 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПартииЦенаУпр",	"Видимость", НЕ ВалютыУчетовСовпадают);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПартииСебестоимостьУпр", "Видимость", НЕ ВалютыУчетовСовпадают);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстаткиПоСкладамИОрганизациямЦенаУпр",	"Видимость", НЕ ВалютыУчетовСовпадают);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстаткиПоСкладамИОрганизациямСебестоимостьУпр", "Видимость", НЕ ВалютыУчетовСовпадают);
	
	Элементы.ПоискНоменклатурыРезультатПоискаСоздатьНоменклатуруИнтерактивно.Видимость =
		ПравоПользователя("ДоступныеРежимыСозданияНоменклатурыИзПрайсЛистовКонтрагентов")
			= Перечисления.ВариантыСозданияНоменклатурыИзПрайсЛистовКонтрагентов.АвтоматическиИИнтерактивно;
			
	Элементы.ФильтрПроизводитель.Видимость = Ложь;
	Элементы.КорзинаВключить.Видимость     = ПравоДоступа("Изменение", Метаданные.Справочники.Номенклатура);
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ПрайсЛистыКонтрагентов) Тогда
		Элементы.ПереключательЦены.СписокВыбора.Удалить(2);
	КонецЕсли;
	
	// Спрячем вкладку "В пути" со страницы остатков.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПути") Тогда
		
		ЭлементПоиска = Элементы.ПереключательОстатки.СписокВыбора.НайтиПоЗначению(5);
		Если ЭлементПоиска <> Неопределено Тогда
			Элементы.ПереключательОстатки.СписокВыбора.Удалить(ЭлементПоиска);
		КонецЕсли;
	
	КонецЕсли;
		
	ОбновитьДополнительныеСвойстваСписка(ЭтотОбъект);
	
	ЗаполнитьСписокБыстрыеОтборы();
	УстановитьКартинкуДекорацияПоказатьСкрытьПравуюПанельПоиска();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	Если Элементы.Список.РежимВыбора Тогда
		Владелец = ЭтаФорма.ВладелецФормы.Заголовок; 
	КонецЕсли;
	
	Если РежимПодбора Тогда
		Элементы.ФормаВыбрать.Заголовок = НСтр("ru = 'Завершить подбор'");
	КонецЕсли;
	
	Подключаемый_СписокПриАктивизацииСтроки();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаСписка(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
	УстановитьСостоянияГруппПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если РежимПодбора ИЛИ Элементы.Корзина.Видимость Тогда	
		Если Не ЗавершениеРаботы = Истина Тогда
			СохранениеНесохраненныхДанных(Отказ);
		Иначе
			Отказ = Истина; 
			ТекстПредупреждения = "Закрытие формы приведёт к потере несохранённых данных!";
			ПодключитьОбработчикОжидания("Подключаемый_СохранениеНесохраненныхДанных", 1, Истина);	
		КонецЕсли;
	КонецЕсли;
	
	СохранитьСостоянияГруппПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранениеНесохраненныхДанных() Экспорт
	
	СохранениеНесохраненныхДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеНесохраненныхДанных(Отказ = Ложь)
	
	УправлениеДиалогомКлиент.ПроверитьМодифицированностьДанныхПриЗакрытии(
			ЭтотОбъект,
			Отказ,
			Новый ОписаниеОповещения("Подключаемый_ПередЗакрытием", ЭтотОбъект)
			); 
			
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если ИмяСобытия = "КорзинаЗаписана" Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыДанныеЦен" Тогда
		Подключаемый_СписокПриАктивизацииСтроки();
	КонецЕсли;
	
	Если ИмяСобытия = "СоздатьНоменклатуру" И УникальныйИдентификатор = Источник Тогда
		СоздатьНоменклатуруАвтоматически(Параметр);
		Возврат;
	КонецЕсли;
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	Если УправлениеСвойствамиАльфаАвтоКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия) Тогда
		ОбновитьЛегендуМеток();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
		
	Если ТипЗнч(НовыйОбъект)=Тип("СправочникСсылка.ХарактеристикиНоменклатуры") И Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		ОбновитьСписокХарактеристик();
		Элементы.Список.Обновить();
		Элементы.Список.ТекущаяСтрока = ВыбраннаяНоменклатура;
		
		МассивСтрок = Характеристики.НайтиСтроки(Новый Структура("ХарактеристикаНоменклатуры", НовыйОбъект));
		Если МассивСтрок.Количество() > 0 Тогда
			НужнаяСтрока = МассивСтрок[0];
			Элементы.Характеристики.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
			ХарактеристикиПриАктивизацииСтроки(Элементы.Характеристики);
		КонецЕсли;
	Иначе
		РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
		// обновим строки в таблицах замен с учетом нового объекта
		Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
			ОбновитьТаблицуЗамен(НовыйОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Элементы.СтраницыРасширеннаяИнформация.Видимость = Элементы.ПоказатьРасширеннуюИнформацию.Пометка;
	// Производим сохранение параметра отображения дерева элементов
	Настройки.Вставить("СтраницыРасширеннаяИнформацияВидимость", Элементы.СтраницыРасширеннаяИнформация.Видимость);
		
	Настройки.Вставить("ДеревоРежимОтображения", РежимОтображенияДереваОтбора);
	// Производим сохранение параметров отображения страниц расширенной информации
	Настройки.Вставить("СтраницаКорзинаВидимость", Элементы.Корзина.Видимость);
	
	Настройки.Вставить("ТочныйПоиск", ТочныйПоиск);
	Настройки.Вставить("ИскатьВоВнешнихПрайсЛистахКонтрагентов", ИскатьВоВнешнихПрайсЛистахКонтрагентов);
	
	Настройки.Вставить("ПанельПоискаПараметрыЦеныСкрыта", Элементы.ПараметрыЦены.Скрыта());
	Настройки.Вставить("ПанельПоискаПараметрыОстаткиСкрыта", Элементы.ПараметрыОстатки.Скрыта());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ЗаполнятьПараметрыИзСохраненныхНастроек = ПолучитьЗначениеПараметраСтруктуры(
		Параметры,
		"ЗаполнятьПараметрыИзСохраненныхНастроек",
		Истина);
	
	Если Элементы.Список.РежимВыбора И НЕ ЗаполнятьПараметрыИзСохраненныхНастроек Тогда
		ЗаполнитьПараметрыЦенИОстатков(Параметры, Настройки);
	КонецЕсли;
	
	Если РежимПодбора Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПолучитьИзВременногоХранилища(АдресПараметровДокумента));
	КонецЕсли;
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
		
	Если Настройки.Получить("ИскатьВоВнешнихПрайсЛистахКонтрагентов") <> Неопределено Тогда
		ИскатьВоВнешнихПрайсЛистахКонтрагентов = Настройки.Получить("ИскатьВоВнешнихПрайсЛистахКонтрагентов");
	Иначе
		ИскатьВоВнешнихПрайсЛистахКонтрагентов = Истина;
	КонецЕсли;
	
	Если Настройки.Получить("ТочныйПоиск") <> Неопределено Тогда
		ТочныйПоиск = Настройки.Получить("ТочныйПоиск");
	КонецЕсли;
	
	Настрйки_РежимПоиска = Настройки.Получить("РежимПоиска");
	УстановитьРежимПоиска(Настрйки_РежимПоиска);
	
	Если Настройки.Получить("ДеревоРежимОтображения") <> Неопределено Тогда
		ИзменитьРежимЛевойПанелиНаСервере(Настройки.Получить("ДеревоРежимОтображения"));
	КонецЕсли;
	
	УстановитьОтборНоменклатурыПоПрименяемости();
	ОбновитьНастройкиОтбора();
	
	// Восстанавливаем параметры отображения страниц расширенной информации
	ПоказатьРасширеннуюИнформацию = (НЕ Настройки.Получить("СтраницыРасширеннаяИнформацияВидимость") = Ложь);
	// Произведем настройку параметров отображения полей расширенной информации
	Элементы.СтраницыРасширеннаяИнформация.Видимость = Истина;
	Элементы.ПоказатьРасширеннуюИнформацию.Пометка   = ПоказатьРасширеннуюИнформацию;
	
	УстановитьВидимостьСтраницРасширеннойИнформации(Элементы.ПоказатьРасширеннуюИнформацию.Пометка);
	УстановитьПараметрыВыводаКолонкиОстатокНаСкладе();
	
	ОбновитьДополнительныеСвойстваСписка(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереключательОписаниеПриИзменении(Элемент)
	
	Если ПереключательОписание = 0 Тогда
		
		Элементы.СтраницыОписание.ТекущаяСтраница = Элементы.ГруппаРасширеннаяИнформация;
		ОбновитьДанныеНаСтраницеКонтактнойИнформации();
		
	ИначеЕсли ПереключательОписание = 1 Тогда
		// TODO: Вывод информации из базового каталога
		
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаБазовыйКаталог").Пометка = Ложь Тогда
			
			ЗаполнитьИнформациюИзБазовогоКаталога();
			
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаБазовыйКаталог").Пометка = Истина;
		КонецЕсли;
		
		Элементы.СтраницыОписание.ТекущаяСтраница = Элементы.СтраницаБазовыйКаталог;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВПроизводствеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("Номенклатура", Элементы.Список.ТекущиеДанные.Ссылка);
	
	НастройкиВарианта = ПолучитьНастройкуОтчета("ОстаткиИОборотыТоваровВПроизводстве");
	
	ОтчетыПлатформаКлиент.ОткрытьОтчет(
		"Отчет.ОстаткиИОборотыТоваровВПроизводстве",
		"Остатки",
		НастройкиВарианта,
		,
		,
		ОтчетОтбор,
		,
		ОбщегоНазначенияКлиент.ДатаСеанса()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыводитьОбщийОстатокПриИзменении(Элемент)
	
	УстановитьПараметрыВыводаКолонкиОстатокНаСкладе();
	
КонецПроцедуры

#Область ОбработчикиСобытийПоляРасширеннойИнформации

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если РасширенныйПоиск Тогда
		ТекущаяСтрока = ?(Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры, Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока, Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущаяСтрока);
	Иначе
		ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	КонецЕсли;
	
	Если НЕ РасширенныйПоиск И (Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница = Неопределено ИЛИ ЕстьРеквизитНаКлиенте(ТекущаяСтрока,"ГруппировкаСтроки") И ЗначениеЗаполнено(ТекущаяСтрока.ГруппировкаСтроки)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница.Имя = "СтраницаОстатки" Тогда
		
		ПереключательОстаткиПриИзменении(Элементы.ПереключательОстатки);
		
	ИначеЕсли Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница.Имя = "СтраницаОписание" Тогда
		
		ПереключательОписаниеПриИзменении(Элементы.ПереключательОписание);
		
	ИначеЕсли Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница.Имя = "СтраницаЦены" Тогда
		
		ПереключательЦеныПриИзменении(Элементы.ПереключательЦены);
		
	ИначеЕсли Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница.Имя = "СтраницаАналоги" Тогда
		
		ПереключательАналогиПриИзменении(Элементы.ПереключательАналоги);
		
	ИначеЕсли Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница.Имя = "СтраницаПрименяемость" Тогда
		
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаПрименяемость").Пометка = Ложь Тогда
			Применяемость.Отбор.Элементы.Очистить();
			
			ЭлементОтбора = Применяемость.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ЭтотОбъект.ТекущийЭлементСписка;
			
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаПрименяемость").Пометка = Истина;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница.Имя = "СтраницаЗаказы" Тогда
		
		ПереключательЗаказыПриИзменении(Элементы.ПереключательЗаказы);
		
	ИначеЕсли Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница.Имя = "СтраницаЯчейкиПоУмолчанию" Тогда
		
		ЯчейкиПоУмолчаниюПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОстаткиПриИзменении(Элемент)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		ТекущаяСтрока = Неопределено;
		ТекущаяХарактеристика = Неопределено;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		
		ТекущаяСтрока = ВыбраннаяНоменклатура;
		ТекущаяХарактеристика = Элементы.Характеристики.ТекущиеДанные.ХарактеристикаНоменклатуры;
		
	Иначе
		
		ТекущаяСтрока = ЭтотОбъект.ТекущийЭлементСписка;
		ТекущаяХарактеристика = Неопределено;
		
	КонецЕсли;
	
	Если ПереключательОстатки = 0 Тогда
		
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиСклады").Пометка = Ложь Тогда
			
			ОстаткиПоСкладам.Отбор.Элементы.Очистить();
			ЭлементОтбора = ОстаткиПоСкладам
				.КомпоновщикНастроек
				.ФиксированныеНастройки
				.Отбор
				.Элементы
				.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущаяСтрока;
			
			Если ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
				
				ЭлементОтбора = ОстаткиПоСкладам
					.КомпоновщикНастроек
					.ФиксированныеНастройки
					.Отбор
					.Элементы
					.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХарактеристикаНоменклатуры");
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ТекущаяХарактеристика;
				
			КонецЕсли;
			
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиСклады").Пометка = Истина;
			
		КонецЕсли;
		
		Элементы.СтраницыОстатки.ТекущаяСтраница = Элементы.СтраницаОстаткиСклады;
	
	ИначеЕсли ПереключательОстатки = 1 Тогда
		
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиВПроизводстве").Пометка = Ложь Тогда
			
			ОстаткиВПроизводстве.Отбор.Элементы.Очистить();
			ЭлементОтбора = ОстаткиВПроизводстве
				.КомпоновщикНастроек
				.ФиксированныеНастройки
				.Отбор
				.Элементы
				.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущаяСтрока;
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиВПроизводстве").Пометка = Истина;
			
		КонецЕсли;
		
		Элементы.СтраницыОстатки.ТекущаяСтраница = Элементы.СтраницаОстаткиВПроизводстве;
		
	ИначеЕсли ПереключательОстатки = 2 Тогда
		
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаПартии").Пометка = Ложь Тогда
			
			Партии.Отбор.Элементы.Очистить();
			ЭлементОтбора = Партии
				.КомпоновщикНастроек
				.ФиксированныеНастройки
				.Отбор
				.Элементы
				.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущаяСтрока;
			
			Если ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
				
				ЭлементОтбора = Партии
					.КомпоновщикНастроек
					.ФиксированныеНастройки
					.Отбор
					.Элементы
					.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХарактеристикаНоменклатуры");
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ТекущаяХарактеристика;
				
			КонецЕсли;
			
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаПартии").Пометка = Истина;
			
		КонецЕсли;
		
		Элементы.СтраницыОстатки.ТекущаяСтраница = Элементы.СтраницаПартии;
		
	ИначеЕсли ПереключательОстатки = 6 Тогда
		
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиПоСкладамИОрганизациям").Пометка = Ложь Тогда
			
			ОстаткиПоСкладамИОрганизациям.Отбор.Элементы.Очистить();
			ЭлементОтбора = ОстаткиПоСкладамИОрганизациям
				.КомпоновщикНастроек
				.ФиксированныеНастройки
				.Отбор
				.Элементы
				.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущаяСтрока;
			
			Если ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
				
				ЭлементОтбора = ОстаткиПоСкладамИОрганизациям
					.КомпоновщикНастроек
					.ФиксированныеНастройки
					.Отбор
					.Элементы
					.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХарактеристикаНоменклатуры");
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ТекущаяХарактеристика;
				
			КонецЕсли;
			
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиПоСкладамИОрганизациям").Пометка = Истина;
			
		КонецЕсли;
		
		Элементы.СтраницыОстатки.ТекущаяСтраница = Элементы.СтраницаОстаткиПоСкладамИОрганизациям;
		
	ИначеЕсли ПереключательОстатки = 3 Тогда
		
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиПоЯчейкам").Пометка = Ложь Тогда
			
			ОстаткиПоЯчейкам.Отбор.Элементы.Очистить();
			ЭлементОтбора = ОстаткиПоЯчейкам
				.КомпоновщикНастроек
				.ФиксированныеНастройки
				.Отбор
				.Элементы
				.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущаяСтрока;
			
			Если ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
				
				ЭлементОтбора = ОстаткиПоЯчейкам
					.КомпоновщикНастроек
					.ФиксированныеНастройки
					.Отбор
					.Элементы
					.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХарактеристикаНоменклатуры");
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ТекущаяХарактеристика;
				
			КонецЕсли;
			
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиПоЯчейкам").Пометка = Истина;
			
		КонецЕсли;
		
		Элементы.СтраницыОстатки.ТекущаяСтраница = Элементы.СтраницаОстаткиПоЯчейкам;
		
	ИначеЕсли ПереключательОстатки = 4 Тогда
		
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаМинимальныеОстатки").Пометка = Ложь Тогда
			
			МинимальныеОстатки.Отбор.Элементы.Очистить();
			ЭлементОтбора = МинимальныеОстатки
				.КомпоновщикНастроек
				.ФиксированныеНастройки
				.Отбор
				.Элементы
				.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущаяСтрока;
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаМинимальныеОстатки").Пометка = Истина;
			
		КонецЕсли;
		
		Элементы.СтраницыОстатки.ТекущаяСтраница = Элементы.СтраницаМинимальныеОстатки;
		
	ИначеЕсли ПереключательОстатки = 5 Тогда
		
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаТоварыВПути").Пометка = Ложь Тогда
			
			ОстаткиТоваровВПути.Отбор.Элементы.Очистить();
			ЭлементОтбора = ОстаткиТоваровВПути
				.КомпоновщикНастроек
				.ФиксированныеНастройки
				.Отбор
				.Элементы
				.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущаяСтрока;
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаТоварыВПути").Пометка = Истина;
			
		КонецЕсли;
		
		Элементы.СтраницыОстатки.ТекущаяСтраница = Элементы.СтраницаТоварыВПути;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательАналогиПриИзменении(Элемент)
	
	Если ПереключательАналоги = 0 Тогда
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЗамены").Пометка = Ложь Тогда
			ЗагрузитьЗамены();
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЗамены").Пометка = Истина;
		КонецЕсли;
		Элементы.СтраницыАналоги.ТекущаяСтраница = Элементы.СтраницаЗамены;
	ИначеЕсли ПереключательАналоги = 1 Тогда
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницыАналогиНоменклатуры").Пометка = Ложь Тогда
			ОбработатьАктивизациюСтрокиСпискаНаСервере();
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницыАналогиНоменклатуры").Пометка = Истина;
		КонецЕсли;
		Элементы.СтраницыАналоги.ТекущаяСтраница = Элементы.СтраницаАналогиНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЦеныПриИзменении(Элемент)
	
	Если ПереключательЦены = 0 Тогда
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЦеныКомпании").Пометка = Ложь Тогда
			Цены.Очистить();
			ЗагрузитьЦены();
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЦеныКомпании").Пометка = Истина;
		КонецЕсли;
		Элементы.СтраницыЦены.ТекущаяСтраница = Элементы.СтраницаЦеныКомпании;
	ИначеЕсли ПереключательЦены = 1 Тогда
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЦеныКонтрагентов").Пометка = Ложь Тогда
			ЦеныКонтрагентов.Очистить();
			ЗагрузитьЦеныКонтрагентов();
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЦеныКонтрагентов").Пометка = Истина;
		КонецЕсли;
		Элементы.СтраницыЦены.ТекущаяСтраница = Элементы.СтраницаЦеныКонтрагентов;
	ИначеЕсли ПереключательЦены = 2 Тогда
		Элементы.СтраницыЦены.ТекущаяСтраница = Элементы.СтраницаПрайсЛистыКонтрагентов;
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаПрайсЛистыКонтрагентов").Пометка = Ложь Тогда
			СформироватьЦеныПрайслистовКонтрагентов();
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаПрайсЛистыКонтрагентов").Пометка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗаказыПриИзменении(Элемент)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущаяНоменклатура = Неопределено;
		ТекущаяХарактеристика = Неопределено;
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		ТекущаяНоменклатура = ВыбраннаяНоменклатура;
		ТекущаяХарактеристика = Элементы.Характеристики.ТекущиеДанные.ХарактеристикаНоменклатуры;
	Иначе
		ТекущаяНоменклатура = Элементы.Список.ТекущаяСтрока;
		ТекущаяХарактеристика = Неопределено;
	КонецЕсли;
	
	Если ПереключательЗаказы = 1 Тогда
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЗаказыПоставщикам").Пометка = Ложь Тогда
			ЗаказыПоставщикам.Отбор.Элементы.Очистить();
			ЭлементОтбора = ЗаказыПоставщикам.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущаяНоменклатура;
			// Профильтруем еще по характеристике, если мы находимся на странице ее выбора.
			Если ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
				ЭлементОтбора = ЗаказыПоставщикам.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХарактеристикаНоменклатуры");
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ТекущаяХарактеристика;
			КонецЕсли;
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЗаказыПоставщикам").Пометка = Истина;
		КонецЕсли;
		Элементы.СтраницыЗаказы.ТекущаяСтраница = Элементы.СтраницаЗаказыПоставщикам;
	ИначеЕсли ПереключательЗаказы = 0 Тогда
		Если ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЗаказыПокупателей").Пометка = Ложь Тогда
			ЗаказыПокупателей.Отбор.Элементы.Очистить();
			ЭлементОтбора = ЗаказыПокупателей.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущаяНоменклатура;
			// Профильтруем еще по характеристике, если мы находимся на странице ее выбора.
			Если ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
				ЭлементОтбора = ЗаказыПокупателей.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХарактеристикаНоменклатуры");
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ТекущаяХарактеристика;
			КонецЕсли;
			ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЗаказыПокупателей").Пометка = Истина;
		КонецЕсли;
		Элементы.СтраницыЗаказы.ТекущаяСтраница = Элементы.СтраницаЗаказыПокупателей;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкиПоУмолчаниюПриИзменении()
	
	ЯчейкиПоУмолчанию.Отбор.Элементы.Очистить();
	ЭлементОтбора = ЯчейкиПоУмолчанию
		.КомпоновщикНастроек
		.ФиксированныеНастройки
		.Отбор
		.Элементы
		.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ЭтотОбъект.ТекущийЭлементСписка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные 	= Элементы.Партии.ТекущиеДанные;
	ТипДокумента 	= ПолучитьИмяТипаДокумента(ТекущиеДанные.Партия);
	ПараметрыФормы 	= Новый Структура("Ключ", ТекущиеДанные.Партия);
	
	// Необходимо для корректного сообщения в режиме ограниченного доступа.
	Попытка
		ОткрытьФорму("Документ."+ТипДокумента+".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		ТекстОшибки=ИнформацияОбОшибке();
		Если ТекстОшибки.Причина.Описание= НСтр("ru = 'Недостаточно прав для просмотра'") 
			ИЛИ ТекстОшибки.Причина.Описание = 
					НСтр("ru = 'У пользователя недостаточно прав на исполнение операции над базой данных.'") Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки.Причина.Описание);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоСкладамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;

	Если Элемент.ТекущийЭлемент = Элементы.ОстаткиПоСкладамРезерв Тогда
 		// Откроем отчет по заказам покупателей

		// Фильтры
		ОтчетОтбор = Новый Структура;
		ОтчетОтбор.Вставить("СкладКомпании", Элементы.ОстаткиПоСкладам.ТекущиеДанные.СкладКомпании);
		ОтчетОтбор.Вставить("Номенклатура",  Элементы.Список.ТекущиеДанные.Ссылка);
		
		НастройкиВарианта = ПолучитьНастройкуОтчета("ОстаткиИОборотыЗаказовПокупателей");
		
		ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ОстаткиИОборотыЗаказовПокупателей", "Основной", НастройкиВарианта,,, ОтчетОтбор, , ОбщегоНазначенияКлиент.ДатаСеанса());
		
	//ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ОстаткиПоСкладамОжидается Тогда
	//TODO: При наличии отчета по "Ожидается" можно расширить расшифровку.

	Иначе
		// Откроем отчет по остаткам товаров
		
		// Фильтры
		ОтчетОтбор = Новый Структура;
		ОтчетОтбор.Вставить("СкладКомпании", Элементы.ОстаткиПоСкладам.ТекущиеДанные.СкладКомпании);
		ОтчетОтбор.Вставить("Номенклатура",  Элементы.Список.ТекущиеДанные.Ссылка);
		
		НастройкиВарианта = ПолучитьНастройкуОтчета("ОстаткиИОборотыТоваров");
		
		ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ОстаткиИОборотыТоваров", "Остатки", НастройкиВарианта,,, ОтчетОтбор, , ОбщегоНазначенияКлиент.ДатаСеанса());
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоЯчейкамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// фильтры
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("СкладКомпании", Элементы.ОстаткиПоЯчейкам.ТекущиеДанные.СкладКомпании);
	ОтчетОтбор.Вставить("Номенклатура",  Элементы.Список.ТекущиеДанные.Ссылка);
	
	НастройкиВарианта = ПолучитьНастройкуОтчета("ОстаткиИОборотыТоваровОрдерногоСклада");
	
	ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ОстаткиИОборотыТоваровОрдерногоСклада", "Остатки", НастройкиВарианта,,, ОтчетОтбор, , ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПокупателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаказыПокупателей.ТекущиеДанные;
	ТипДокумента = СтрЗаменить(ТипЗнч(ТекущиеДанные.Заказ), " ", "");
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Заказ);
	
	// необходимо для корректного сообщения в режиме ограниченного доступа
	Попытка
		ОткрытьФорму("Документ."+ТипДокумента+".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		ТекстОшибки=ИнформацияОбОшибке();
		Если ТекстОшибки.Причина.Описание= НСтр("ru = 'Недостаточно прав для просмотра'")
			ИЛИ ТекстОшибки.Причина.Описание = 
					НСтр("ru = 'У пользователя недостаточно прав на исполнение операции над базой данных.'") Тогда
					
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки.Причина.Описание);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоставщикамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаказыПоставщикам.ТекущиеДанные;
	ТипДокумента = СтрЗаменить(ТипЗнч(ТекущиеДанные.Заказ), " ", "");
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Заказ);
	
	// необходимо для корректного сообщения в режиме ограниченного доступа
	Попытка
		ОткрытьФорму("Документ."+ТипДокумента+".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		ТекстОшибки=ИнформацияОбОшибке();
		Если ТекстОшибки.Причина.Описание= НСтр("ru = 'Недостаточно прав для просмотра'")
			ИЛИ ТекстОшибки.Причина.Описание = 
				НСтр("ru = 'У пользователя недостаточно прав на исполнение операции над базой данных.'") Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки.Причина.Описание);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеЦеныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Цены.ТекущиеДанные;
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ТипЦен",                     ТекущиеДанные.ТипЦен);
	ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.Характеристика);
	ПараметрыОтбора.Вставить("ПодразделениеКомпании",      ТекущиеДанные.Подразделение);
	ПараметрыОтбора.Вставить("ЕдиницаИзмерения",           ТекущиеДанные.ЕдиницаИзмерения);
	
	Если РасширенныйПоиск Тогда
		
		ПараметрыОтбора.Вставить("Номенклатура", Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные.Номенклатура);
		
	Иначе
		
		ПараметрыОтбора.Вставить("Номенклатура", Элементы.Список.ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
	ОткрытьФорму(
		"РегистрСведений.Цены.ФормаСписка",
		Новый Структура("Отбор", ПараметрыОтбора),
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеЦеныКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЦеныКонтрагентов.ТекущиеДанные;
	ПараметрыОтбора = Новый Структура("ТипЦен,Контрагент,ДоговорВзаиморасчетов", ТекущиеДанные.ТипЦен, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорВзаиморасчетов);
	ОткрытьФорму("РегистрСведений.Цены.ФормаСписка", Новый Структура("Отбор", ПараметрыОтбора), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция АналогиВыборНаСервере(ВыбраннаяСтрока, ПараметрыДействия = Неопределено)
	
	Возврат Справочники.Номенклатура.НайтиНоменклатуру(ВыбраннаяСтрока.АртикулДляПоиска, ВыбраннаяСтрока.Производитель);
	
КонецФункции

&НаКлиенте
Процедура АналогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
	
	// Обработаем событие в контексте сервера
	НайденныйАналог = АналогиВыборНаСервере(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(НайденныйАналог) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Список.ТекущаяСтрока = НайденныйАналог;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Обработаем событие в контексте сервера
	НайденнаяЗамена = АналогиВыборНаСервере(Элемент.ТекущиеДанные.Номенклатура);
	
	// При выборе строки нет соответствующей номенклатуры в справочнике
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
		ОбработкаОповещения = Новый ОписаниеОповещения("ДобавлениеЗамены", ЭтотОбъект, Новый Структура("ДобавлениеНоменклатуры", Элемент.ТекущиеДанные));
		ПоказатьВопрос(ОбработкаОповещения, НСтр("ru = 'Замены с данным номером по каталогу нет в справочнике номенклатуры.
		|
		|Добавить новый элемент справочника номенклатуры?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, НСтр("ru = 'Добавление номенклатуры'"));
		Возврат;
	КонецЕсли;
	
	Элементы.Список.ТекущаяСтрока = НайденнаяЗамена;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПанелиПараметров

&НаСервере
Процедура ПересчитатьЦеныКорзины()
	
	Для Каждого Строка Из Корзина Цикл
		Если ЗначениеЗаполнено(ПараметрыТипЦен) Тогда
			Строка.Цена  = ЦенообразованиеСервер.ПолучитьЦену(
				ПараметрыТипЦен,
				Строка.Номенклатура,
				ТекущаяДатаСеанса(),
				ПараметрыКонтрагент,
				ПараметрыВалюта,
				ПараметрыКурсВалюты,
				Строка.ХарактеристикаНоменклатуры,
				Строка.ЕдиницаИзмерения, ПараметрыПодразделениеКомпании);
			Строка.Сумма = Строка.Цена * Строка.Количество * Строка.Коэффициент;
		Иначе
			Строка.Цена  = 0;
			Строка.Сумма = 0;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьПодвалКорзины();
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыПодразделениеКомпанииПриИзмененииНаСервере()
	
	УстановитьПараметрыВыводаКолонкиОстатокНаСкладе();
	
	Если Элементы.Корзина.Видимость Тогда
		ПересчитатьЦеныКорзины();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодразделениеКомпанииПриИзменении(Элемент)
	
	ПараметрыПодразделениеКомпанииПриИзмененииНаСервере();
	ОбновитьДополнительныеСвойстваСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКонтрагентПриИзменении(Элемент)
	
	Если Элементы.Корзина.Видимость Тогда
		ПересчитатьЦеныКорзины();
	КонецЕсли;
	
	ОбновитьДополнительныеСвойстваСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВалютаПриИзменении(Элемент)
	
	Если Элементы.Корзина.Видимость Тогда
		ПересчитатьЦеныКорзины();
	КонецЕсли;
	
	ОбновитьДополнительныеСвойстваСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТипЦенПриИзменении(Элемент)
	
	Если Элементы.Корзина.Видимость Тогда
		ПересчитатьЦеныКорзины();
	КонецЕсли;
	
	ОбновитьДополнительныеСвойстваСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСкладКомпанииПриИзменении(Элемент)
	
	УстановитьПараметрыВыводаКолонкиОстатокНаСкладе();
	ОбновитьДополнительныеСвойстваСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЦеныПриИзменении(Элемент)
	ОбновитьДополнительныеСвойстваСписка(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРежимВыводаОстатковПриИзменении(Элемент)
	
	УстановитьПараметрыВыводаКолонкиОстатокНаСкладе();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПанелиПоиска
	
&НаКлиенте
Процедура ФильтрАртикулПриИзменении(Элемент)
	
	Если ПустаяСтрока(ФильтрАртикул) Тогда
	
		ОчиститьОтборыСтарогоРежимаПоиска(РежимПоиска);
		Возврат;
		
	ИначеЕсли МеньшеТрехСимволовВСтроке(ФильтрАртикул) Тогда
		
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Необходимо ввести не менее трех символов для поиска.'");
		ВывестиСообщение(ТекстСообщения, ЭтаФорма, "ФильтрАртикул");
		Возврат;
		
	КонецЕсли;
	
	Если РежимПоиска = ПредопределенноеЗначение("Перечисление.РежимыПоиска.ЕдинаяСтрокаПоиска") Тогда
		
		УстановитьФильтрыПоискаПоЕдинойСтрокеНаСервере(ФильтрАртикул);
		
	Иначе
		
		УстановитьФильтрыРасширенногоПоискаНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПроизводительОчистка(Элемент, СтандартнаяОбработка)
	
	ИспользованиеФильтраПроизводитель = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПроизводительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено ИЛИ НЕ ВыбранноеЗначение.Пустая() Тогда
		ИспользованиеФильтраПроизводитель = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНаименованиюПриИзменении(Элемент)
	
	Если ПустаяСтрока(ОтборПоНаименованию) Тогда
	
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Наименование");
		Возврат;
		
	ИначеЕсли МеньшеТрехСимволовВСтроке(ОтборПоНаименованию) Тогда
		
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Необходимо ввести не менее трех символов для поиска.'");
		ВывестиСообщение(ТекстСообщения, ЭтаФорма, "ОтборПоНаименованию");
		Возврат;
		
	КонецЕсли;
	
	ВидСравненияКомпоновки = ?(ТочныйПоиск, ВидСравненияКомпоновкиДанных.Равно, ВидСравненияКомпоновкиДанных.Содержит);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Наименование",
		ОтборПоНаименованию,
		ВидСравненияКомпоновки,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоАртикулуПриИзменении(Элемент)
	
	Если ПустаяСтрока(ОтборПоАртикулу) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Артикул");
		Возврат;
		
	ИначеЕсли МеньшеТрехСимволовВСтроке(ОтборПоАртикулу) Тогда
		
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Необходимо ввести не менее трех символов для поиска.'");
		ВывестиСообщение(ТекстСообщения, ЭтаФорма, "ОтборПоАртикулу");
		Возврат;
		
	КонецЕсли;
	
	ВидСравненияКомпоновки = ?(ТочныйПоиск, ВидСравненияКомпоновкиДанных.Равно, ВидСравненияКомпоновкиДанных.Содержит);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Артикул",
		ОтборПоАртикулу,
		ВидСравненияКомпоновки,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
			
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПроизводителюПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ОтборПоПроизводителю) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Производитель");
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Производитель",
		ОтборПоПроизводителю,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПрименяемостиПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СУчетомАналогов",
		"Доступность",
		ЗначениеЗаполнено(ОтборПоПрименяемости)
	);

	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Ссылка", "Ссылка");

	Если НЕ ЗначениеЗаполнено(ОтборПоПрименяемости) Тогда
	
		Возврат;
		
	КонецЕсли;

	УстановитьОтборПоПрименяемостиНаСписокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СУчетомАналоговПриИзменении(Элемент)

	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Ссылка", "Ссылка");

	Если НЕ ЗначениеЗаполнено(ОтборПоПрименяемости) Тогда
	
		Возврат;
		
	КонецЕсли;

	УстановитьОтборПоПрименяемостиНаСписокНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ТочныйПоискПриИзменении(Элемент = Неопределено)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	ТочныйПоискПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьВоВнешнихПрайсЛистахКонтрагентовПриИзменении(Элемент)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьСкрытьПравуюПанельПоискаНажатие(Элемент)
	
	ПоказатьСкрытьПравуюПанельПоискаНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Корзина.Видимость
		И НЕ ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Если НЕ Элементы.Список.ТекущиеДанные.ЭтоГруппа Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если НЕ ТребуетсяВыборИсточникаОбеспичения() Тогда
				Если Элементы.Список.ТекущиеДанные.ВладелецХарактеристики = Неопределено Тогда
					Модифицированность = Истина;
					НачатьПомещениеТовараВКорзину(ВыбраннаяСтрока,,, Элементы.Корзина.ТекущаяСтрока);
				Иначе
					УстановитьРежимВыбораХарактеристик(Истина, Элементы.Список.ТекущаяСтрока);
				КонецЕсли;
			Иначе
				УстановитьРежимВыбораИсточникаОбеспечения(Истина, Элементы.Список.ТекущаяСтрока);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		// Если это группа дерева - по двойному клику будем разворачивать группу.
		Если Элемент.Отображение = ОтображениеТаблицы.Дерево Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если Элементы.Список.Развернут(ВыбраннаяСтрока) Тогда
				
				// свернем
				Элементы.Список.Свернуть(ВыбраннаяСтрока);
				
			Иначе
				
				// развернем
				Элементы.Список.Развернуть(ВыбраннаяСтрока);
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	УправлениеСпискомСправочникаКлиент.СписокВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Если РежимПодбора Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Ложь;
		Закрыть(ПодготовитьСписокПодобранныхТоваров());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	РаботаСФормой.ВывестиПользовательскиеОтборы(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ВыводитьЦены = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ВыводитьЦены");
	ТипЦены = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ПараметрыТипЦен");
	Склад = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ПараметрыСкладКомпании");
	Валюта = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ПараметрыВалюта");
	Подразделение = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ПараметрыПодразделениеКомпании");
	Контрагент = ПолучитьЗначениеПараметраСтруктуры(Настройки.ДополнительныеСвойства, "ПараметрыКонтрагент");
	
	// Заполним колонку Ячейка
	Если ЗначениеЗаполнено(Склад) Тогда
		ЗаполнитьЯчейкиИлиЦены(Строки, "Ячейка", ТипЦены, Склад, Валюта, Подразделение, Контрагент);		
	КонецЕсли;
	
	// Заполним колонку Цена
	Если ВыводитьЦены И ЗначениеЗаполнено(ТипЦены) И ЗначениеЗаполнено(Валюта) И ЗначениеЗаполнено(Подразделение) Тогда
		ЗаполнитьЯчейкиИлиЦены(Строки, "Цена", ТипЦены, Склад, Валюта, Подразделение, Контрагент);	
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриПолученииДанныхНаСервере(Настройки, Строки);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПриАктивизацииСтроки()
	
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиСклады").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаПартии").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиПоСкладамИОрганизациям").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЗаказыПокупателей").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЗаказыПоставщикам").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиПоЯчейкам").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаМинимальныеОстатки").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницыАналогиНоменклатуры").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЦеныКомпании").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЦеныКонтрагентов").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаПрайсЛистыКонтрагентов").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОписание").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаОстаткиВПроизводстве").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаПрименяемость").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаБазовыйКаталог").Пометка = Ложь;
	ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаТоварыВПути").Пометка = Ложь;
	
	Если ОбновлениеЗамен
		И ЕстьРеквизитНаКлиенте(ТекущийЭлемент, "Имя") 
		И СтрНайти(ТекущийЭлемент.Имя, "Замены") = 0 Тогда
		
		ТаблицаПризнаковОткрытияВкладок.НайтиПоЗначению("СтраницаЗамены").Пометка = Ложь;
		
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элементы.Список.ТекущиеДанные, "Ссылка") <> Неопределено Тогда
		Оповестить("АктивизацияСтрокиНоменклатуры", Элементы.Список.ТекущиеДанные.Ссылка, ЭтотОбъект);
	Иначе
		Оповестить("АктивизацияСтрокиНоменклатуры", Элементы.Список.ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
	Если Элементы.ПоказатьРасширеннуюИнформацию.Пометка Тогда
	
		СтраницыПриСменеСтраницы(
			Элементы.СтраницыРасширеннаяИнформация,
			Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница
		);
		
	КонецЕсли;
	
	Если НЕ УправлениеСпискомСправочникаКлиент.СписокПриАктивизацииСтроки(ЭтотОбъект, Элементы.Список, Истина) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
 	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеСпискомСправочникаКлиент.СписокПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Группа Тогда
		Возврат;
	КонецЕсли;
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеСправочникаНоменклатура");
	Иначе
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыСправочникаНоменклатура");
	КонецЕсли;
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент.ТекущиеДанные, "ЭтоГруппа")
		И Элемент.ТекущиеДанные.ЭтоГруппа
	Тогда
		Возврат;
	КонецЕсли;
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыСправочникаНоменклатура");
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	// Сменим родителя в основном списке
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		Если НЕ (Элементы.Дерево.ТекущаяСтрока  = Элементы.Список.ТекущийРодитель) 
			И НЕ(НЕ ЗначениеЗаполнено(Элементы.Список.ТекущийРодитель) 
					И НЕ ЗначениеЗаполнено(Элементы.Дерево.ТекущаяСтрока)) Тогда
			Элементы.Список.ТекущийРодитель = Элементы.Дерево.ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЯчейкиИлиЦены(Строки, ИмяРеквизита, ТипЦены, Склад, Валюта, Подразделение, Контрагент)

	Товары = Строки.ПолучитьКлючи();
	ПредставлениеПустогоРеквизита = НСтр("ru = '<нет>'");
	ЦветПустогоРеквизита = ЦветаСтиля.НедоступныеДанныеЦвет;
	
	Если Товары.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Строки.Получить(Товары[0]).Данные, ИмяРеквизита) Тогда
		Для Каждого Товар Из Товары Цикл
			
			Если НЕ Товар.ЭтоГруппа Тогда
				Если ИмяРеквизита = "Ячейка" Тогда
					ДанныеРеквизита = Справочники.Номенклатура.ПолучитьЯчейкуХранения(Товар, Склад);
				Иначе
					ДанныеРеквизита = ЦенообразованиеСервер.ПолучитьЦену(ТипЦены, Товар,, Контрагент, Валюта,,,, Подразделение);
					ДанныеРеквизита = ?(ДанныеРеквизита > 0, ДанныеРеквизита, 0);
				КонецЕсли;
				
				Строки.Получить(Товар).Данные[ИмяРеквизита] = ДанныеРеквизита; 
				
				Если НЕ ЗначениеЗаполнено(ДанныеРеквизита) Тогда
					
					ОформлениеПоляЦена = Строки.Получить(Товар).Оформление.Получить(ИмяРеквизита);
					ОформлениеПоляЦена.УстановитьЗначениеПараметра("Текст", ПредставлениеПустогоРеквизита);
					ОформлениеПоляЦена.УстановитьЗначениеПараметра("ЦветТекста", ЦветПустогоРеквизита);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДополнительныеСвойстваСписка(Форма)
	
	ДобавляемыеЗначения = Новый Структура("ВыводитьЦены,ПараметрыТипЦен,
		|ПараметрыВалюта,ПараметрыПодразделениеКомпании,
		|ПараметрыСкладКомпании,ПараметрыКонтрагент");
	
	ЗаполнитьЗначенияСвойств(ДобавляемыеЗначения, Форма);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Форма.Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства,
		ДобавляемыеЗначения,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХарактеристики

&НаКлиенте
Процедура ХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ХарактеристикаНоменклатуры) Тогда
		
		НачатьПомещениеТовараВКорзину(
			ВыбраннаяНоменклатура, ВыбраннаяПоставка, Элемент.ТекущиеДанные.ХарактеристикаНоменклатуры, Элементы.Корзина.ТекущаяСтрока);
		
	ИначеЕсли  Элемент.ТекущиеДанные.Наименование = "<" + НСтр("ru = 'Пропустить ВЫБОР характеристики'") + ">" Тогда
		
		НачатьПомещениеТовараВКорзину(
			ВыбраннаяНоменклатура, ВыбраннаяПоставка, Элемент.ТекущиеДанные.ХарактеристикаНоменклатуры, Элементы.Корзина.ТекущаяСтрока);
		
		УстановитьРежимВыбораХарактеристик(Ложь, Элементы.Список.ТекущаяСтрока, Элементы.Дерево.ТекущаяСтрока);
		
	Иначе
		
		УстановитьРежимВыбораХарактеристик(ЛОЖЬ, Элементы.Список.ТекущаяСтрока, Элементы.Дерево.ТекущаяСтрока);
		УстановитьРежимВыбораИсточникаОбеспечения(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Если РежимПодбора Тогда
		
		СтандартнаяОбработка = Ложь;
		Модифицированность = Ложь;
		Закрыть(ПодготовитьСписокПодобранныхТоваров());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПриАктивизацииСтроки(Элемент)
	
	УправлениеСпискомСправочникаКлиент.СписокПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзина

&НаСервере
Процедура КорзинаНоменклатураПриИзмененииНаСервере(Строка)
	
	ИспользованиеХарактеристик   = Строка.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик;
	ИспользованиеЕдиницИзмерения = Строка.Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения;
	
	Если ИспользованиеХарактеристик = 1 Тогда
		Строка.ВладелецХарактеристики = Строка.Номенклатура.ТипНоменклатуры;
	ИначеЕсли ИспользованиеХарактеристик = 2 Тогда
		Строка.ВладелецХарактеристики = Строка.Номенклатура;
	Иначе
		Строка.ВладелецХарактеристики = Неопределено;
	КонецЕсли;
	
	Если ИспользованиеЕдиницИзмерения = 1 Тогда
		Строка.ВладелецЕдиницыИзмерения = Строка.Номенклатура.ТипНоменклатуры;
	ИначеЕсли ИспользованиеЕдиницИзмерения = 2 Тогда
		Строка.ВладелецЕдиницыИзмерения = Строка.Номенклатура;
	Иначе
		Строка.ВладелецЕдиницыИзмерения = Неопределено;
	КонецЕсли;
	
	// Получим количество товара в базовых единицах
	КоличествоБазовое = Строка.Количество*Строка.Коэффициент;
	
	// Проверим и сообщим пользователю, если что-то не так
	Если КоличествоБазовое > 1 И Строка.Номенклатура.ТипНоменклатуры.УникальностьСерийногоНомера Тогда
		Строка.Количество       = 1;
		Строка.ЕдиницаИзмерения = Строка.Номенклатура.ОсновнаяЕдиницаИзмерения;
		Строка.Коэффициент      = Строка.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент; 
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Корзина",
			Корзина.Индекс(Строка)+1,
			"Номенклатура"
		);
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Номенклатура ""%1"" учитывается по уникальным серийным номерам. Количество не может превышать 1 базовую единицу.'"),
				Строка.Номенклатура),
			,
			ПутьКТабличнойЧасти,
			"Объект"
		);
	КонецЕсли;
	
	// Установим цену
	Если ЗначениеЗаполнено(ПараметрыТипЦен) Тогда
		Строка.Цена  = ЦенообразованиеСервер.ПолучитьЦену(ПараметрыТипЦен, Строка.Номенклатура, ТекущаяДатаСеанса(), ПараметрыКонтрагент, ПараметрыВалюта, ПараметрыКурсВалюты, Строка.ХарактеристикаНоменклатуры, Строка.ЕдиницаИзмерения, ПараметрыПодразделениеКомпании);
		Строка.Сумма = Строка.Цена * Строка.Количество * Строка.Коэффициент;
	Иначе
		Строка.Цена  = 0;
		Строка.Сумма = 0;
	КонецЕсли;
	
	// Сбросим данные поставки
	Строка.НаправлениеПоставки  = Неопределено;
	Строка.Поставщик            = Неопределено;
	Строка.КлючСтрокиПоставщика = Неопределено;
	
	// Заполним ячейку по умолчанию
	Если Элементы.КорзинаЯчейка.Видимость Тогда
		Строка.Ячейка = Справочники.Номенклатура.ПолучитьЯчейкуХранения(Строка.Номенклатура, ПараметрыСкладКомпании);
	КонецЕсли;
	
	Если ОстаткиПоОрдерномуСкладу Тогда
		КорзинаЯчейкаПриИзмененииНаСервере(Строка);
	Иначе
		Если ПараметрыВыводитьОбщийОстаток Тогда
			ТекстОстатка = " ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) ";
		Иначе
			ТекстОстатка = " ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0) ";
		КонецЕсли;
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	" + ТекстОстатка + " КАК Остаток,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура,
		|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
		|			,
		|			СкладКомпании В (&СкладыКомпании)
		|				И Номенклатура В (&Номенклатура)
		|				И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ОстаткиТоваровКомпанииОстатки";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("СкладыКомпании",             ПараметрыСписокСкладов);
		Запрос.УстановитьПараметр("Номенклатура",               Строка.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
		Строка.Остаток = Запрос.Выполнить().Выгрузить().Итог("Остаток")/?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
	КонецЕсли;
	
	Элементы.КорзинаХарактеристикаНоменклатуры.Видимость = Элементы.КорзинаХарактеристикаНоменклатуры.Видимость ИЛИ ЗначениеЗаполнено(Строка.ВладелецХарактеристики);
	
КонецПроцедуры

&НаСервере
Процедура КорзинаКоличествоПриИзмененииНаСервере(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		Строка = Корзина.НайтиПоИдентификатору(Элементы.Корзина.ТекущаяСтрока);
	Иначе
		Строка = ТекущиеДанные;
	КонецЕсли;
	// Получим количество товара в базовых единицах
	КоличествоБазовое = Строка.Количество*Строка.Коэффициент;
	// Проверим и сообщим пользователю, если что-то не так
	Если КоличествоБазовое > 1 И Строка.Номенклатура.ТипНоменклатуры.УникальностьСерийногоНомера Тогда
		Строка.Количество       = 1;
		Строка.ЕдиницаИзмерения = Строка.Номенклатура.ОсновнаяЕдиницаИзмерения;
		Строка.Коэффициент      = Строка.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;  
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Корзина",
			Корзина.Индекс(Строка)+1,
			"Номенклатура"
		);
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Номенклатура ""%1"" учитывается по уникальным серийным номерам. Количество не может превышать 1 базовую единицу.'"),
				Строка.Номенклатура),
			,
			ПутьКТабличнойЧасти,
			"Объект"
		);
    КонецЕсли;
		// Пересчитываем сумму строки
	Строка.Сумма = Строка.Цена * Строка.Количество * Строка.Коэффициент;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоПриИзменении(Элемент, Строка = Неопределено)
	
	КорзинаКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры  

&НаСервере
Процедура КорзинаЦенаПриИзмененииНаСервере(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		Строка = Корзина.НайтиПоИдентификатору(Элементы.Корзина.ТекущаяСтрока);
	Иначе
		Строка = ТекущиеДанные;
	КонецЕсли;   
	
	Строка.Сумма = Строка.Цена * Строка.Количество * Строка.Коэффициент;

КонецПроцедуры

&НаКлиенте
Процедура КорзинаЦенаПриИзменении(Элемент, Строка = Неопределено)
	КорзинаЦенаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КорзинаСуммаПриИзмененииНаСервере(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		Строка = Корзина.НайтиПоИдентификатору(Элементы.Корзина.ТекущаяСтрока);
	Иначе
		Строка = ТекущиеДанные;
	КонецЕсли;   
	
	Если Строка.Количество = 0 Тогда
		Строка.Цена = Строка.Сумма;
	 	Строка.Сумма = 0;  
	Иначе 
		Строка.Цена = Окр(Строка.Сумма/Строка.Количество, 2);  
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСуммаПриИзменении(Элемент,  Строка = Неопределено)
	КорзинаСуммаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КорзинаЯчейкаПриИзмененииНаСервере(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		Строка = Корзина.НайтиПоИдентификатору(Элементы.Корзина.ТекущаяСтрока);
	Иначе
		Строка = ТекущиеДанные;
	КонецЕсли;
	// Сформируем запрос для получения остатка по ордерному складу
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток, 0) КАК Остаток,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
	|			,
	|			СкладКомпании В (&СкладыКомпании)
	|				И Номенклатура В (&Номенклатура)
	|				И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
	|				И Ячейка В (&Ячейки)) КАК ОстаткиТоваровОрдерныйСкладОстатки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СкладыКомпании",             ПараметрыСписокСкладов);
	Запрос.УстановитьПараметр("Номенклатура",               Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Ячейки",                     Строка.Ячейка);
	Строка.Остаток = Запрос.Выполнить().Выгрузить().Итог("Остаток") / ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЯчейкаПриИзменении(Элемент)
	
	КорзинаЯчейкаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КорзинаЕдиницаИзмеренияПриИзмененииНаСервере()
	
	Строка = Корзина.НайтиПоИдентификатору(Элементы.Корзина.ТекущаяСтрока);
	
	Если НЕ(Строка.ЕдиницаИзмерения.Пустая() ИЛИ Строка.Коэффициент = Строка.ЕдиницаИзмерения.Коэффициент) Тогда
		Строка.Коэффициент = Строка.ЕдиницаИзмерения.Коэффициент;
		КорзинаНоменклатураПриИзмененииНаСервере(Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЕдиницаИзмеренияПриИзменении(Элемент)
	
	КорзинаЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)
	
	РассчитатьПодвалКорзины();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПослеУдаления(Элемент)
	
	РассчитатьПодвалКорзины();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Удалять строки корзины можно, а вот добавление происходит только из списков
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Элементы.СтраницаКорзина.Видимость И НЕ (ТипЗнч(Элементы.Список.ТекущаяСтрока) 
			= Тип("СтрокаГруппировкиДинамическогоСписка") ИЛИ Элементы.Список.ТекущиеДанные.ЭтоГруппа) Тогда
		Модифицированность = Истина;
		Если Элементы.Список.ТекущиеДанные.ВладелецХарактеристики = Неопределено Тогда
			ОбработкаПодбораТовараВКорзину(Элементы.Список.ТекущаяСтрока);
		Иначе
			УстановитьРежимВыбораХарактеристик(Истина, Элементы.Список.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоискНоменклатурырезультатПоиска

&НаКлиенте
Процедура РасширенныйПоискНоменклатурыВыбор(Элемент = Неопределено, ВыбраннаяСтрока = Неопределено, Поле = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если Элементы.Корзина.Видимость Тогда
		Если ВыбраннаяСтрока = Неопределено Тогда
			ДанныеВыбраннойСтроки = Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные;
		Иначе
			ДанныеВыбраннойСтроки = РасширенныйПоискНоменклатуры.НайтиПоИдентификатору(ВыбраннаяСтрока);
		КонецЕсли;
		Если НЕ ТребуетсяВыборИсточникаОбеспичения() Тогда
			Если ДанныеВыбраннойСтроки.Номенклатура.Пустая() Тогда
				ПоискВПрайсЛистахКлиент.ЗапросНаСозданиеНоменклатуры(
					ЭтотОбъект,
					"РасширенныйПоискНоменклатуры",
					Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока,
					Истина);
			ИначеЕсли ДанныеВыбраннойСтроки.ВладелецХарактеристики = Неопределено Тогда
				СтандартнаяОбработка = Ложь; 
				Модифицированность = Истина;
				НачатьПомещениеТовараВКорзину(ДанныеВыбраннойСтроки.Номенклатура,,, Элементы.Корзина.ТекущаяСтрока);
			Иначе
				УстановитьРежимВыбораХарактеристик(Истина, ДанныеВыбраннойСтроки.Номенклатура);
			КонецЕсли;
		Иначе
			ТекущиеДанные = Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные;
			Если ТекущиеДанные.Номенклатура.Пустая() Тогда
				ОписаниеНоменклатуры = Новый Структура("Артикул,АртикулДляПоиска,Производитель");
				ЗаполнитьЗначенияСвойств(ОписаниеНоменклатуры, ТекущиеДанные);
				
				УстановитьРежимВыбораИсточникаОбеспечения(Истина, ОписаниеНоменклатуры);
			Иначе
				УстановитьРежимВыбораИсточникаОбеспечения(Истина, ТекущиеДанные.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.Список.РежимВыбора Тогда
		ВыбратьВДокумент(Неопределено);
	Иначе
		ОткрытьКарточкуНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйПоискНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные <> Неопределено Тогда
		ТекущийЭлементСписка = Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные.Номенклатура;
		Элементы.ПоискНоменклатурыРезультатПоискаСоздатьНоменклатуруИнтерактивно.Доступность = Истина;
		Элементы.ПоискНоменклатурыРезультатПоискаСоздатьНоменклатуру.Доступность = Истина;	
	Иначе
		ТекущийЭлементСписка = Неопределено; 
		Элементы.ПоискНоменклатурыРезультатПоискаСоздатьНоменклатуруИнтерактивно.Доступность = Ложь;
		Элементы.ПоискНоменклатурыРезультатПоискаСоздатьНоменклатуру.Доступность = Ложь;

	КонецЕсли;
	
	ТекущийЭлементРасширеныйПоиск = ТекущийЭлементСписка;
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиОбеспеченияНоменклатурыВыбор(Элемент = Неопределено, ВыбраннаяСтрока = Неопределено, Поле = Неопределено, СтандартнаяОбработка = Ложь)
	
	ТекущиеДанные = Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ЭтоГруппа И НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
		ВладелецХарактеристики = ПолучитьВладельцаХарактеристикиНоменклатуры(ТекущиеДанные.Номенклатура);
		
		ВыбраннаяНоменклатура = ТекущиеДанные.Номенклатура;
		ВыбраннаяПоставка     = ПоискВПрайсЛистахКлиент.СформироватьСтруктуруПоставки(ТекущиеДанные);
		Если ВладелецХарактеристики = Неопределено Тогда
			СтандартнаяОбработка = Ложь; 
			Модифицированность = Истина;
			НачатьПомещениеТовараВКорзину(ВыбраннаяНоменклатура, ВыбраннаяПоставка,, Элементы.Корзина.ТекущаяСтрока);
		Иначе
			УстановитьРежимВыбораХарактеристик(Истина, ВыбраннаяНоменклатура);
		КонецЕсли;
	ИначеЕсли НЕ ТекущиеДанные.ЭтоГруппа И ТекущиеДанные.Номенклатура.Пустая() Тогда
		ПоискВПрайсЛистахКлиент.ЗапросНаСозданиеНоменклатуры(
			ЭтотОбъект,
			"ИсточникиОбеспеченияНоменклатуры",
			Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущаяСтрока,
			Истина);
	ИначеЕсли ТекущиеДанные.СлужебнаяСтрока И ТекущиеДанные.Представление = "<НЕ УКАЗЫВАТЬ ИСТОЧНИК ОБЕСПЕЧЕНИЯ>" Тогда
		ВладелецХарактеристики = ПолучитьВладельцаХарактеристикиНоменклатуры(ВыбраннаяНоменклатура);
		Если ВладелецХарактеристики=Неопределено Тогда
			СтандартнаяОбработка = Ложь; Модифицированность = Истина;
			НачатьПомещениеТовараВКорзину(ВыбраннаяНоменклатура,,, Элементы.Корзина.ТекущаяСтрока);
			УстановитьРежимВыбораИсточникаОбеспечения(Ложь);
		Иначе
			УстановитьРежимВыбораХарактеристик(Истина, ВыбраннаяНоменклатура);
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.СлужебнаяСтрока И ТекущиеДанные.Представление = "<ВЕРНУТЬСЯ К ВЫБОРУ ПОЗИЦИИ НОМЕНКЛАТУРЫ>" Тогда
		УстановитьРежимВыбораИсточникаОбеспечения(Ложь);
		Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
			УстановитьРежимВыбораХарактеристик(Ложь, Элементы.Список.ТекущаяСтрока, Элементы.Дерево.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиОбеспеченияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
		ТекущийЭлементСписка = Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущиеДанные.Номенклатура;
	Иначе
		ТекущийЭлементСписка = Неопределено;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БазовыйКаталогПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Отказываемся от стандартной обработки события
	СтандартнаяОбработка = Ложь;
	// Обработаем в завсимости от вда нажатой гиперссылки
	Если НЕ ДанныеСобытия.Anchor = Неопределено Тогда
		// Откроем форму для выбора полей номенклатцры для создания/обновления из базового каталога
		ПараметрыФормы = Новый Структура;
		
		Если ДанныеСобытия.Anchor.name = "СоздатьНоменклатуру" Тогда
			// Из раширенного поиска получим артикул и производителя
			Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры Тогда
				ТекущиеДанные = Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные;
				ПутьКДанным = "РасширенныйПоискНоменклатуры";
				ТекущаяСтрока = Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока;
			Иначе
				ТекущиеДанные = Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущиеДанные;
				ПутьКДанным = "ИсточникиОбеспеченияНоменклатуры";
				ТекущаяСтрока = Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущаяСтрока;
			КонецЕсли;
			
			Если ТекущаяСтрока = Неопределено ИЛИ НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
				Возврат;
			КонецЕсли;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Артикул"         , ?(ПустаяСтрока(ТекущиеДанные.Артикул), ТекущиеДанные.АртикулДляПоиска, ТекущиеДанные.Артикул));
			ДанныеЗаполнения.Вставить("АртикулДляПоиска", ТекущиеДанные.АртикулДляПоиска);
			ДанныеЗаполнения.Вставить("Производитель"   , ТекущиеДанные.Производитель);
			
			Если ЕстьРеквизитНаКлиенте(ТекущиеДанные, "Наименование") Тогда
				ДанныеЗаполнения.Вставить("Наименование", ТекущиеДанные.Наименование);
			ИначеЕсли ЕстьРеквизитНаКлиенте(ТекущиеДанные, "Представление") Тогда
				ДанныеЗаполнения.Вставить("Наименование", ТекущиеДанные.Представление);
			КонецЕсли;
			
			ПараметрыСоздания = Новый Структура;
			ПараметрыСоздания.Вставить("ПараметрыЗаполнения", ДанныеЗаполнения);
			ПараметрыСоздания.Вставить("ДопПараметры",        Новый Структура("ПутьКДанным,ТекущаяСтрока,ПродолжитьВыбор,Событие", ПутьКДанным, ТекущаяСтрока, Ложь, "СозданиеНоменклатурыИзСписка"));
			
			СоздатьНоменклатуруАвтоматически(ПараметрыСоздания);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		
		ПерейтиПоНавигационнойСсылке(ДанныеСобытия.href);
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСОтбором

&НаСервере
Процедура УстановитьОтборПоОстатку()
	
	ПараметрыДействия = ПолучитьЗначениеПараметраСтруктуры(
		ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПараметрыПодбора"),
		"ПараметрыДействия"
	);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеУстанавливатьОтборНаОстаток", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"Остаток",
		0,
		ВидСравненияКомпоновкиДанных.Больше,
		,
		Истина
	);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПолеОтбора(ПараметрыОтбора)
	
	// Получим ограницения по номенклатуре из документа, если они переданы.
	ПараметрыВыбораФормы            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПараметрыВыбораФормы", Новый Массив);
	ОтборПоВидуНоменклатурыПараметр = Неопределено;
	ОтборПоЗапретуПродажиПараметр   = Неопределено;
	ОтборПоЗапретуЗакупкиПараметр   = Неопределено;
	ОтборПоПроизводителюПараметр    = Неопределено;
	
	Если РежимПодбора Тогда
		
		УстановитьОтборПоОстатку();
		
		Для Каждого ПараметрОтбора Из ПараметрыОтбора Цикл
			
			ИмяПараметраВыбора = ПараметрОтбора.Ключ;
			
			Если ИмяПараметраВыбора = "ВидНоменклатуры" Тогда
				
				Попытка
					
					ОтборПоВидуНоменклатурыПараметр = Новый СписокЗначений;
					ФиксМассив = ПараметрОтбора.Значение;
					
					Для Сч = 0 По ФиксМассив.Количество() - 1 Цикл
						
						ОтборПоВидуНоменклатурыПараметр.Добавить(ФиксМассив[Сч]);
						
					КонецЦикла;
					
					Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
					
				Исключение
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Настройка полей отбора формы списка номенклатуры'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
					);
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ПараметрВыбораФормы Из ПараметрыВыбораФормы Цикл
		
		ИмяПараметраВыбора = СтрЗаменить(ПараметрВыбораФормы.Имя, "Отбор.", "");
		
		Если ИмяПараметраВыбора = "ВидНоменклатуры" Тогда
			
			Попытка
				
				Если ОтборПоВидуНоменклатурыПараметр = Неопределено Тогда
					
					ОтборПоВидуНоменклатурыПараметр = Новый СписокЗначений;
					
				КонецЕсли;
				
				ФиксМассив = ПараметрВыбораФормы.Значение;
				
				Для Сч = 0 По ФиксМассив.Количество() - 1 Цикл
					
					Если ОтборПоВидуНоменклатурыПараметр.НайтиПоЗначению(ФиксМассив[Сч]) = Неопределено Тогда
						
						ОтборПоВидуНоменклатурыПараметр.Добавить(ФиксМассив[Сч]);
						
					КонецЕсли;
					
				КонецЦикла;
				
			Исключение
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Настройка полей отбора формы списка номенклатуры'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
				
			КонецПопытки;
			
		ИначеЕсли ИмяПараметраВыбора = "ЗапретЗакупки" Тогда
			
			ОтборПоЗапретуЗакупкиПараметр = ПараметрВыбораФормы.Значение;
			
		ИначеЕсли ИмяПараметраВыбора = "ЗапретПродажи" Тогда
			
			ОтборПоЗапретуПродажиПараметр = ПараметрВыбораФормы.Значение;
			
		ИначеЕсли ИмяПараметраВыбора = "Производитель" Тогда
			
			ОтборПоПроизводителюПараметр = ПараметрВыбораФормы.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеКомпоновкиПоВидуНоменклатуры = Новый ПолеКомпоновкиДанных("ВидНоменклатуры");
	ПолеКомпоновкиПоЗапретуЗакупки   = Новый ПолеКомпоновкиДанных("ЗапретЗакупки");
	ПолеКомпоновкиПоЗапретуПродажи   = Новый ПолеКомпоновкиДанных("ЗапретПродажи");
	ПолеКомпоновкиПоПроизводителю    = Новый ПолеКомпоновкиДанных("Производитель");
	
	// заполним быстрые отборы
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	
	ОбъектНастройки    = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ДоступныеНастройки = Список.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора;
	
	Для Каждого ЭлементОтбора Из ОбъектНастройки Цикл
		
		Если ОтборПоВидуНоменклатурыПараметр <> Неопределено И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоВидуНоменклатуры Тогда
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = ОтборПоВидуНоменклатурыПараметр;
		ИначеЕсли ОтборПоЗапретуЗакупкиПараметр <> Неопределено И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоЗапретуЗакупки Тогда
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = ОтборПоЗапретуЗакупкиПараметр;
		ИначеЕсли ОтборПоЗапретуПродажиПараметр <> Неопределено И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоЗапретуПродажи Тогда
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = ОтборПоЗапретуПродажиПараметр;
		ИначеЕсли ОтборПоПроизводителюПараметр <> Неопределено И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоПроизводителю Тогда
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ОтборПоПроизводителюПараметр;
		КонецЕсли;
		
		ДоступноеПоле = ДоступныеНастройки.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
		// Имя поля изменилось или поле было удалено.
		Если ДоступноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаголовокПоля = ПолучитьЗаголовокПоля(ДоступноеПоле);
		
		НовыйОтбор = ДеревоОтбор.Добавить();
		НовыйОтбор.Использование  = ЭлементОтбора.Использование;
		НовыйОтбор.ЛевоеЗначение  = ЭлементОтбора.ЛевоеЗначение;
		НовыйОтбор.ВидСравнения   = ЭлементОтбора.ВидСравнения;
		НовыйОтбор.ПравоеЗначение = ?(ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение), ЭлементОтбора.ПравоеЗначение, ДоступноеПоле.ТипЗначения.ПривестиЗначение(ЭлементОтбора.ПравоеЗначение));
		НовыйОтбор.Заголовок      = ПолучитьПредставлениеЭлементаОтбора(ЗаголовокПоля, ЭлементОтбора.ВидСравнения);
		
	КонецЦикла;
	
	// Пробежимся по метаданным справочника Номенклатура, чтобы отделить доп. реквизиты и сведения от обычных реквизитов.
	ЭлементОтбораСсылка = ДоступныеНастройки.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка"));
	Если ЭлементОтбораСсылка<>Неопределено Тогда
		
		// Ссылка есть, смотрим, какие у нее есть доступные поля.
		РеквизитыСправочника        = Метаданные.Справочники.Номенклатура.Реквизиты;
		ТЧСправочника               = Метаданные.Справочники.Номенклатура.ТабличныеЧасти;
		СтандартныеРеквизиты        = Метаданные.Справочники.Номенклатура.СтандартныеРеквизиты;
		МассивСтандартныхРеквизитов = Новый Массив;
		ДополнительныеРеквизитыНоменклатуры = 
			УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов("Справочник.Номенклатура", "ДополнительныеРеквизиты");
		ДополнительныеСведенияНоменклатуры = 
			УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов("Справочник.Номенклатура", "ДополнительныеСведения");
		
		Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
			МассивСтандартныхРеквизитов.Добавить(СтандартныйРеквизит.Имя);
		КонецЦикла;
		
		Для Каждого ДоступноеПолеОтбораКомпоновкиДанныхСсылки Из ЭлементОтбораСсылка.Элементы Цикл
			
			ПолеКомпоновкиСсылки       = ДоступноеПолеОтбораКомпоновкиДанныхСсылки.Поле;
			СтроковоеПредставлениеПоля = СтрЗаменить(Строка(ПолеКомпоновкиСсылки), "Ссылка.", "");
			
			Если СтроковоеПредставлениеПоля = "Наименование"
				ИЛИ СтроковоеПредставлениеПоля = "Код"
				ИЛИ СтроковоеПредставлениеПоля = "ВерсияДанных"
				ИЛИ РеквизитыСправочника.Найти(СтроковоеПредставлениеПоля)<>Неопределено
				ИЛИ ТЧСправочника.Найти(СтроковоеПредставлениеПоля)<>Неопределено
				ИЛИ МассивСтандартныхРеквизитов.Найти(СтроковоеПредставлениеПоля)<>Неопределено
				ИЛИ Метаданные.ОбщиеРеквизиты.Найти(СтроковоеПредставлениеПоля)<>Неопределено
				ИЛИ (СтроковоеПредставлениеПоля = "Остаток" И Не РежимПодбора) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаголовокПоля = ПолучитьЗаголовокПоля(ДоступноеПолеОтбораКомпоновкиДанныхСсылки);
			
			НовыйОтбор = ДеревоОтбор.Добавить();
			НовыйОтбор.Использование  = Ложь;
			НовыйОтбор.ЛевоеЗначение  = ПолеКомпоновкиСсылки;
			НовыйОтбор.ВидСравнения   = ДоступноеПолеОтбораКомпоновкиДанныхСсылки.ДоступныеВидыСравнения[0];
			НовыйОтбор.ПравоеЗначение = ДоступноеПолеОтбораКомпоновкиДанныхСсылки.ТипЗначения.ПривестиЗначение();
			НовыйОтбор.Заголовок      = ПолучитьПредставлениеЭлементаОтбора(ЗаголовокПоля, НовыйОтбор.ВидСравнения);
			
			// Установить владельца свойств
			УстановитьВладельцаДополнительныхОтборов(
				НовыйОтбор,
				ДоступноеПолеОтбораКомпоновкиДанныхСсылки,
				СтроковоеПредставлениеПоля,
				ДополнительныеРеквизитыНоменклатуры,
				ДополнительныеСведенияНоменклатуры);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// добавим сюда же поставщика
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "Поставщик";
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = ?(Параметры.Свойство("Контрагент"),Параметры.Контрагент, Справочники.Контрагенты.ПустаяСсылка());
	НовыйОтбор.Заголовок      = "Куплено у поставщика";
	
	// добавим сюда же коды поставщика
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "КодПоставщика";
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
	НовыйОтбор.ПравоеЗначение = "";
	НовыйОтбор.Заголовок      = "Артикул поставщика";
	
	// +Альфа-Авто
	// и модель
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "Модель";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Справочники.Модели.ПустаяСсылка();
	НовыйОтбор.Заголовок      = "Модель";
	// -Альфа-Авто
	
	// Уберем дублирущий отбор
	Если РежимПодбора Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПометкаУдаления");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаголовокПоля(ДоступноеПоле)
	
	ЗаголовокПоля = "";
	Если ДоступноеПоле.Родитель = Неопределено Тогда
		ЗаголовокПоля     = ДоступноеПоле.Заголовок;
	Иначе
		ЗаголовокРодителя = ДоступноеПоле.Родитель.Заголовок;
		ЗаголовокПоля     = СтрЗаменить(ДоступноеПоле.Заголовок, ЗаголовокРодителя+".", "")+ " (" + (ЗаголовокРодителя)+ ")";
	КонецЕсли;
	
	Возврат ЗаголовокПоля;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеЭлементаОтбора(ПредставлениеПоля, ВидСравнения)
	
	ПредставлениеСравнения = "";
	// Производим формирование секции выдов сравнения
	Если ВидСравнения = Неопределено ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.Равно 
		ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит 
		ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии 
		ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке 
		ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		// Формирование представлений для прямых видов условий производить не будем
		ПредставлениеСравнения = "";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		ПредставлениеСравнения = "(>)";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ПредставлениеСравнения = "(>=)";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		ПредставлениеСравнения = "(<)";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ПредставлениеСравнения = "(<=)";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно 
		ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии 
		ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке 
		ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		ПредставлениеСравнения = "(НЕ)";
	Иначе
		ПредставлениеСравнения = "(" + Строка(ВидСравнения) + ")";
	КонецЕсли;
	
	ПредставлениеСравнения = ПредставлениеПоля + ПредставлениеСравнения;
	// Возвращаем сформированное представление текущего элемента отбора
	Возврат ПредставлениеСравнения;
	
КонецФункции

&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	Результат = Ложь;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке 
		ИЛИ ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
		ИЛИ ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке 
		ИЛИ ВидСравненияОтбора= ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьФормуВыбора(Элемент, ФормаВыбора)
	
	Элемент.ФормаВыбора = ФормаВыбора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТоваровПоСсылке(ОбъектНастройки, ОтборПоПоставщикуИспользуется, СтрокаОтбораПоПоставщику, ОтборПоКодуПоставщикаИспользуется, ОтборПоМоделиИспользуется, СтрокаОтбораПоКодуПоставщика, СтрокаОтборПоМодели)
	
	СписокНоменклатур 			= Новый СписокЗначений;
	ТекстЗапросаПоПоставщику 	= "";
	// +Альфа-Авто
	ТекстЗапросаПоМодели 		= "";
	
	Если ОтборПоПоставщикуИспользуется И НЕ ОтборПоКодуПоставщикаИспользуется И НЕ ОтборПоМоделиИспользуется Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПартииТоваровКомпании.Номенклатура
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			|ГДЕ
			|	%УсловиеОтбораПоПоставщику%";
	
		Если СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент = &Контрагент");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент <> &Контрагент");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент В (&Контрагент)");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", " НЕ (ПартииТоваровКомпании.Партия.Контрагент В (&Контрагент))");
		КонецЕсли;
	
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= ТекстЗапроса;
		Запрос.УстановитьПараметр("Контрагент", СтрокаОтбораПоПоставщику.ПравоеЗначение);
		СписокНоменклатур.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	ИначеЕсли НЕ ОтборПоПоставщикуИспользуется И ОтборПоКодуПоставщикаИспользуется И НЕ ОтборПоМоделиИспользуется Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПрайсЛисты.Номенклатура КАК Номенклатура
			|ИЗ
			|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛисты
			|ГДЕ
			|	  ПрайсЛисты.Номенклатура <> &ПустаяСсылка";
	
		Если СтрокаОтбораПоКодуПоставщика.ПравоеЗначение <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + " И ПрайсЛисты.Артикул ПОДОБНО &ТекстПоиска";
		КонецЕсли;
			
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= ТекстЗапроса;
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Номенклатура.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекстПоиска",  "%" + СтрокаОтбораПоКодуПоставщика.ПравоеЗначение + "%");
		
		СписокНоменклатур.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	ИначеЕсли ОтборПоПоставщикуИспользуется И ОтборПоКодуПоставщикаИспользуется И НЕ ОтборПоМоделиИспользуется Тогда
		ТекстЗапроса = 
		     "ВЫБРАТЬ РАЗЛИЧНЫЕ
		     |	ПартииТоваровКомпании.Номенклатура КАК Номенклатура
		     |ИЗ
		     |	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛисты
		     |		ПО ПартииТоваровКомпании.Номенклатура = ПрайсЛисты.Номенклатура
		     |ГДЕ
		     |	ПрайсЛисты.Номенклатура <> &ПустаяСсылка 
		     |	И %УсловиеОтбораПоПоставщику%";
	
		Если СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент = &Контрагент");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент <> &Контрагент");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент В (&Контрагент)");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", " НЕ (ПартииТоваровКомпании.Партия.Контрагент В (&Контрагент))");
		КонецЕсли;
		Если СтрокаОтбораПоКодуПоставщика.ПравоеЗначение <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + " И ПрайсЛисты.Артикул ПОДОБНО &ТекстПоиска";
		КонецЕсли;
	
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= ТекстЗапроса;
		Запрос.УстановитьПараметр("Контрагент",   СтрокаОтбораПоПоставщику.ПравоеЗначение);
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Номенклатура.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекстПоиска",  "%" + СтрокаОтбораПоКодуПоставщика.ПравоеЗначение + "%");
		СписокНоменклатур.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	ИначеЕсли ОтборПоПоставщикуИспользуется И НЕ ОтборПоКодуПоставщикаИспользуется Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПартииТоваровКомпании.Номенклатура
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПрименяемость КАК НоменклатураПрименяемость
			|		ПО ПартииТоваровКомпании.Номенклатура = НоменклатураПрименяемость.Номенклатура
			|ГДЕ
			|	%УсловиеОтбораПоМодели%
			|	И %УсловиеОтбораПоПоставщику%";
	
		Если СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент = &Контрагент");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент <> &Контрагент");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент В (&Контрагент)");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", " НЕ (ПартииТоваровКомпании.Партия.Контрагент В (&Контрагент))");
		КонецЕсли;
		// +Альфа-Авто
		Если СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель = &Модель");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель <> &Модель");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель В (&Модель)");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", " НЕ (НоменклатураПрименяемость.Модель В (&Модель))");
		КонецЕсли;
		
		// Установим параметр
		Если (СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно ИЛИ СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно)
			И ТипЗнч(СтрокаОтборПоМодели.ПравоеЗначение) = Тип("СписокЗначений") И СтрокаОтборПоМодели.ПравоеЗначение.Количество() > 0 Тогда
			ОтборПоМодели = СтрокаОтборПоМодели.ПравоеЗначение[0].Значение;
			СтрокаОтборПоМодели.ПравоеЗначение = ОтборПоМодели;
		КонецЕсли;
		// -Альфа-Авто
		
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= ТекстЗапроса;
		Запрос.УстановитьПараметр("Контрагент", СтрокаОтбораПоПоставщику.ПравоеЗначение);
		Запрос.УстановитьПараметр("Модель", СтрокаОтборПоМодели.ПравоеЗначение);
		СписокНоменклатур.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	ИначеЕсли НЕ ОтборПоПоставщикуИспользуется И ОтборПоКодуПоставщикаИспользуется Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПрайсЛисты.Номенклатура КАК Номенклатура
			|ИЗ
			|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛисты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПрименяемость КАК НоменклатураПрименяемость
			|		ПО ПрайсЛисты.Номенклатура = НоменклатураПрименяемость.Номенклатура
			|ГДЕ
			|	%УсловиеОтбораПоМодели%
			|	И ПрайсЛисты.Номенклатура <> &ПустаяСсылка";
	
		Если СтрокаОтбораПоКодуПоставщика.ПравоеЗначение <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + " И ПрайсЛисты.Артикул ПОДОБНО &ТекстПоиска";
		КонецЕсли;
		// +Альфа-Авто
		Если СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель = &Модель");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель <> &Модель");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель В (&Модель)");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", " НЕ (НоменклатураПрименяемость.Модель В (&Модель))");
		КонецЕсли;
		
		// Установим параметр
		Если (СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно ИЛИ СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно)
			И ТипЗнч(СтрокаОтборПоМодели.ПравоеЗначение) = Тип("СписокЗначений") И СтрокаОтборПоМодели.ПравоеЗначение.Количество() > 0 Тогда
			ОтборПоМодели = СтрокаОтборПоМодели.ПравоеЗначение[0].Значение;
			СтрокаОтборПоМодели.ПравоеЗначение = ОтборПоМодели;
		КонецЕсли;
		// -Альфа-Авто
		
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= ТекстЗапроса;
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Номенклатура.ПустаяСсылка());
		Запрос.УстановитьПараметр("Модель", СтрокаОтборПоМодели.ПравоеЗначение);
		Запрос.УстановитьПараметр("ТекстПоиска",  "%" + СтрокаОтбораПоКодуПоставщика.ПравоеЗначение + "%");
		
		СписокНоменклатур.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	ИначеЕсли  ОтборПоПоставщикуИспользуется И ОтборПоКодуПоставщикаИспользуется Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛисты
		|		ПО ПартииТоваровКомпании.Номенклатура = ПрайсЛисты.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПрименяемость КАК НоменклатураПрименяемость
		|		ПО ПартииТоваровКомпании.Номенклатура = НоменклатураПрименяемость.Номенклатура
		|ГДЕ
		|	%УсловиеОтбораПоМодели%
		|	И ПрайсЛисты.Номенклатура <> &ПустаяСсылка 
		|	И %УсловиеОтбораПоПоставщику%";
	
		Если СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент = &Контрагент");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент <> &Контрагент");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", "ПартииТоваровКомпании.Партия.Контрагент В (&Контрагент)");
		ИначеЕсли СтрокаОтбораПоПоставщику.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоПоставщику%", " НЕ (ПартииТоваровКомпании.Партия.Контрагент В (&Контрагент))");
		КонецЕсли;
		Если СтрокаОтбораПоКодуПоставщика.ПравоеЗначение <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + " И ПрайсЛисты.Артикул ПОДОБНО &ТекстПоиска";
		КонецЕсли;
		
		// +Альфа-Авто
		Если СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель = &Модель");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель <> &Модель");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель В (&Модель)");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", " НЕ (НоменклатураПрименяемость.Модель В (&Модель))");
		КонецЕсли;
		
		// Установим параметр
		Если (СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно ИЛИ СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно)
			И ТипЗнч(СтрокаОтборПоМодели.ПравоеЗначение) = Тип("СписокЗначений") И СтрокаОтборПоМодели.ПравоеЗначение.Количество() > 0 Тогда
			ОтборПоМодели = СтрокаОтборПоМодели.ПравоеЗначение[0].Значение;
			СтрокаОтборПоМодели.ПравоеЗначение = ОтборПоМодели;
		КонецЕсли;
		// -Альфа-Авто
		
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= ТекстЗапроса;
		Запрос.УстановитьПараметр("Контрагент",   СтрокаОтбораПоПоставщику.ПравоеЗначение);
		Запрос.УстановитьПараметр("Модель", СтрокаОтборПоМодели.ПравоеЗначение);
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Номенклатура.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекстПоиска",  "%" + СтрокаОтбораПоКодуПоставщика.ПравоеЗначение + "%");
		СписокНоменклатур.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	ИначеЕсли ОтборПоМоделиИспользуется Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураПрименяемость.Номенклатура
		|ИЗ
		|	РегистрСведений.НоменклатураПрименяемость КАК НоменклатураПрименяемость
		|ГДЕ
		|	%УсловиеОтбораПоМодели%";
		
		// +Альфа-Авто
		Если СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель = &Модель");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель <> &Модель");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", "НоменклатураПрименяемость.Модель В (&Модель)");
		ИначеЕсли СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбораПоМодели%", " НЕ (НоменклатураПрименяемость.Модель В (&Модель))");
		КонецЕсли;
		
		// Установим параметр
		Если (СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно ИЛИ СтрокаОтборПоМодели.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно)
			И ТипЗнч(СтрокаОтборПоМодели.ПравоеЗначение) = Тип("СписокЗначений") И СтрокаОтборПоМодели.ПравоеЗначение.Количество() > 0 Тогда
			ОтборПоМодели = СтрокаОтборПоМодели.ПравоеЗначение[0].Значение;
			СтрокаОтборПоМодели.ПравоеЗначение = ОтборПоМодели;
		КонецЕсли;
		// -Альфа-Авто
		
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= ТекстЗапроса;
		Запрос.УстановитьПараметр("Модель", СтрокаОтборПоМодели.ПравоеЗначение);
		СписокНоменклатур.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	
	// заполним отборы компоновщика
	СписокЭлементовОтбора = Новый СписокЗначений;
	ПолеКомпоновкиСсылка = Новый ПолеКомпоновкиДанных("Ссылка");
	Для Каждого ЭлементОбъекта Из ОбъектНастройки Цикл
		Если ЭлементОбъекта.ЛевоеЗначение = ПолеКомпоновкиСсылка Тогда
			СписокЭлементовОтбора.Добавить(ЭлементОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокЭлементовОтбора.Количество() = 0 Тогда
		СписокЭлементовОтбора.Добавить(ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")));
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокЭлементовОтбора Цикл
		ЭлементОтбора = ЭлементСписка.Значение;
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = ПолеКомпоновкиСсылка;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СписокНоменклатур;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОтбора()
	
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	ОтборСКД    = Неопределено;
	Для Каждого ЭлементКомпоновщика Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			ОтборСКД = ЭлементКомпоновщика;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборСКД<>Неопределено Тогда
		СтрокаОтбораПоПоставщику 				= Неопределено;
		ОтборПоПоставщикуИспользуется 			= Ложь;
		// +Альфа-Авто
		СтрокаОтборПоМодели						= Неопределено;
		ОтборПоМоделиИспользуется 				= Ложь;
		// -Альфа-Авто
		ОбъектНастройки = ОтборСКД.Элементы;
		
		Для Каждого СтрокаОтбора Из ДеревоОтбор Цикл
			// пока пропустим поставщика, с ними разберемся позже
			Если СтрокаОтбора.ЛевоеЗначение = "Поставщик" Тогда
				СтрокаОтбораПоПоставщику = СтрокаОтбора;
				ОтборПоПоставщикуИспользуется = СтрокаОтбора.Использование; 
				Продолжить;
			КонецЕсли;
			// пока пропустим код поставщика, с ними разберемся позже
			Если СтрокаОтбора.ЛевоеЗначение = "КодПоставщика" Тогда
				СтрокаОтбораПоКодуПоставщика = СтрокаОтбора;
				ОтборПоКодуПоставщикаИспользуется = СтрокаОтбора.Использование; 
				Продолжить;
			КонецЕсли;
			// +Альфа-Авто
			Если СтрокаОтбора.ЛевоеЗначение = "Модель" Тогда
				СтрокаОтборПоМодели = СтрокаОтбора;
				ОтборПоМоделиИспользуется = СтрокаОтбора.Использование; 
				Продолжить;
			// -Альфа-Авто
			КонецЕсли;
			// заполним отборы компоновщика
			СписокЭлементовОтбора = Новый СписокЗначений;
			Для Каждого ЭлементОбъекта Из ОбъектНастройки Цикл
				Если ЭлементОбъекта.ЛевоеЗначение = СтрокаОтбора.ЛевоеЗначение Тогда
					СписокЭлементовОтбора.Добавить(ЭлементОбъекта);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокЭлементовОтбора.Количество() = 0 Тогда
				СписокЭлементовОтбора.Добавить(ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")));
			КонецЕсли;
			
			Для Каждого ЭлементСписка Из СписокЭлементовОтбора Цикл
				ЭлементОтбора 				 = ЭлементСписка.Значение;
				ЭлементОтбора.Использование  = СтрокаОтбора.Использование;
				ЭлементОтбора.ЛевоеЗначение  = СтрокаОтбора.ЛевоеЗначение;
				ЭлементОтбора.ВидСравнения   = СтрокаОтбора.ВидСравнения;
				ЭлементОтбора.ПравоеЗначение = СтрокаОтбора.ПравоеЗначение;
			КонецЦикла;
		КонецЦикла;
		// +Альфа-Авто
		// Теперь посмотрим, что у нас с отбором по поставщику и модели
		Если ОтборПоПоставщикуИспользуется ИЛИ ОтборПоМоделиИспользуется ИЛИ ОтборПоКодуПоставщикаИспользуется Тогда
			УстановитьОтборТоваровПоСсылке(ОбъектНастройки, ОтборПоПоставщикуИспользуется, СтрокаОтбораПоПоставщику, ОтборПоКодуПоставщикаИспользуется, ОтборПоМоделиИспользуется, СтрокаОтбораПоКодуПоставщика, СтрокаОтборПоМодели);
		// -Альфа-Авто
		Иначе
			// сбросим отбор по ссылке
			ПолеКомпоновкиСсылка = Новый ПолеКомпоновкиДанных("Ссылка");
			Для Каждого ЭлементОбъекта Из ОбъектНастройки Цикл
				Если ЭлементОбъекта.ЛевоеЗначение = ПолеКомпоновкиСсылка Тогда
					ЭлементОбъекта.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
	КонецЕсли;
	
	Элементы.Отбор.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВидСравнения(Команда)
	
	Элементы.ОтборВидСравнения.Видимость                        = НЕ Элементы.ОтборВидСравнения.Видимость;
	Элементы.ОтборКонтекстноеМенюОтображатьВидСравнения.Пометка = Элементы.ОтборВидСравнения.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.Заполнено") 
		ИЛИ ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных.НеЗаполнено") Тогда
		ТекущиеДанные.ВыводитьТолькоЗаголовок = Истина;
	Иначе
		ТекущиеДанные.ВыводитьТолькоЗаголовок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Использование = ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено ИЛИ 
		ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		СтандартнаяОбработка = Ложь;
		// +Альфа-Авто
		Если ТекущиеДанные.ЛевоеЗначение = "Поставщик" ИЛИ ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", ТекущиеДанные.ПравоеЗначение, Новый ОписаниеТипов(?(ТекущиеДанные.ЛевоеЗначение = "Модель", "СправочникСсылка.Модели", "СправочникСсылка.Контрагенты")), Неопределено, Ложь);
		// -Альфа-Авто
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Владелец) Тогда
			ПодключитьОбработчикОжидания("ОткрытьФормуСпискаОтбора", 0.1, Истина);
			Возврат;
		Иначе
			ДоступноеПоле = Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
			
			Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
				ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ТолькоГруппы = Истина;
			Иначе
				ТолькоГруппы = Ложь;
			КонецЕсли;
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", ТекущиеДанные.ПравоеЗначение, ДоступноеПоле.ТипЗначения, ДоступноеПоле.ДоступныеЗначения, ТолькоГруппы);
		КонецЕсли;
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	ОбновитьНастройкиОтбора();
	
	Если Элементы.Характеристики.ТекущиеДанные <> Неопределено Тогда 
		ОбновитьСписокХарактеристик();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если Поле.Имя = "ОтборВидСравнения" Тогда
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СписокВыбора = Элементы.ОтборВидСравнения.СписокВыбора;
		СписокВыбора.Очистить();
		// +Альфа-Авто
		Если ТекущиеДанные.ЛевоеЗначение = "Поставщик" ИЛИ ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
		// -Альфа-Авто
			СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно, 		Строка(ВидСравненияКомпоновкиДанных.Равно));
			СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеРавно, 	Строка(ВидСравненияКомпоновкиДанных.НеРавно));
			СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСписке, 	Строка(ВидСравненияКомпоновкиДанных.ВСписке));
			СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке, 	Строка(ВидСравненияКомпоновкиДанных.НеВСписке));
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "КодПоставщика" Тогда
			СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Содержит, 	Строка(ВидСравненияКомпоновкиДанных.Содержит));
		Иначе
			ДоступноеПолеОтбора = Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
			Если НЕ ДоступноеПолеОтбора = Неопределено Тогда
				Для Каждого ДоступноеСравнения Из ДоступноеПолеОтбора.ДоступныеВидыСравнения Цикл
					СписокВыбора.Добавить(ДоступноеСравнения.Значение, Строка(ДоступноеСравнения.Значение));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ОтборПравоеЗначение" Тогда
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// +Альфа-Авто
		Если ТекущиеДанные.ЛевоеЗначение = "Поставщик" ИЛИ ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов(?(ТекущиеДанные.ЛевоеЗначение = "Модель", "СправочникСсылка.Модели", "СправочникСсылка.Контрагенты"));
			Элементы.ОтборПравоеЗначение.КнопкаВыбора = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		ИначеЕсли   ТекущиеДанные.ЛевоеЗначение = "КодПоставщика" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("Строка");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора        = Ложь;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		// -Альфа-Авто
		Иначе
			ДоступноеПоле = Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
			
			Если ДоступноеПоле = Неопределено Тогда
				Элементы.ОтборПравоеЗначение.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
			Иначе
				Если ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии 
					ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
				ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
				ИначеЕсли ДоступноеПоле.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
				Иначе
					Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
				КонецЕсли;
				
				Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = ДоступноеПоле.БыстрыйВыбор;
				Элементы.ОтборПравоеЗначение.Маска                = ДоступноеПоле.Маска;
				Элементы.ОтборПравоеЗначение.ФорматРедактирования = ДоступноеПоле.ФорматРедактирования;
				
				Если НЕ ДоступноеПоле.ФормаВыбора = "" Тогда
					УстановитьФормуВыбора(Элементы.ОтборПравоеЗначение, ДоступноеПоле.ФормаВыбора);
				КонецЕсли;
				
				Элементы.ОтборПравоеЗначение.ОграничениеТипа      = ДоступноеПоле.ТипЗначения;
				
				Элементы.ОтборПравоеЗначение.КнопкаВыбора = Истина;
				МассивТипов = ДоступноеПоле.ТипЗначения.Типы();
				Если МассивТипов.Количество() > 0 Тогда
					Если МассивТипов[0] = Тип("Строка") Тогда
						Элементы.ОтборПравоеЗначение.КнопкаВыбора = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ПодключитьОбработчикОжидания("УстановитьОтборПоВладельцу", 0.1, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" ИЛИ Поле.Имя = "ОтборВидСравнения" Тогда
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// РасширеннаяИнформация
&НаКлиенте
Процедура ПоказатьРасширеннуюИнформацию(Команда)
	
	Элементы.ПоказатьРасширеннуюИнформацию.Пометка = (НЕ Элементы.ПоказатьРасширеннуюИнформацию.Пометка);
	УстановитьВидимостьСтраницРасширеннойИнформации(Элементы.ПоказатьРасширеннуюИнформацию.Пометка);
	// Взведем признак необходимости выполнить сохранение настроек формы при закрытии
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	// Обновим информации по строке
	ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.5, ИСТИНА);

КонецПроцедуры

// Конец РасширеннаяИнформация

&НаКлиенте
Процедура РежимЛевойПанели(Команда)
	
	ИзменитьРежимЛевойПанелиНаСервере(Команда.Имя);
	ТекущийРежимЛевойПанели = Команда.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаВключить(Команда)
	
	Если РежимПодбора Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьКорзины(НЕ Элементы.КорзинаВключить.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗагрузить(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.ФормаСписка", Новый Структура("РежимВыбора", Истина), ЭтотОбъект,,,, Новый ОписаниеОповещения("КорзинаЗагрузитьЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗагрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КорзинаЗагрузитьЗавершениеНаСервере(Результат);
	
	Элементы.КорзинаСохранитьКак.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура КорзинаЗагрузитьЗавершениеНаСервере(КлючЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.Корзина.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Дата         = КлючЗаписи.Дата;
	МенеджерЗаписи.Наименование = КлючЗаписи.Наименование;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Корзина.Загрузить(ПолучитьЗначениеПараметраСтруктуры(МенеджерЗаписи.Значение.Получить(), "Товары", Новый ТаблицаЗначений));
		Для Каждого СтрокаКорзины Из Корзина Цикл
			КорзинаНоменклатураПриИзмененииНаСервере(СтрокаКорзины);
		КонецЦикла;
	Иначе
		Корзина.Очистить();
	КонецЕсли;
	
	РассчитатьПодвалКорзины();
	
	КорзинаКлючЗаписи = КлючЗаписи;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСохранить(Команда)
	
	Если Корзина.Количество() > 0 Тогда	
		КорзинаСохранитьНаСервере();
		Корзина.Очистить();
		Модифицированность = Ложь;	
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Корзина пуста.' ");
		Сообщение.Сообщить();
	КонецЕсли;

	Если Команда = Неопределено Тогда
		Этаформа.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КорзинаСохранитьНаСервере()
	
	МенеджерЗаписи 				= РегистрыСведений.Корзина.СоздатьМенеджерЗаписи();
	
	Если КорзинаКлючЗаписи = Неопределено Тогда
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Дата         = ТекущаяДатаСеанса();
					
		Если ЗначениеЗаполнено(ПараметрыКонтрагент) Тогда
			МенеджерЗаписи.Клиент   = ПараметрыКонтрагент;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", ПараметрыКонтрагент);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			ПолученныйКлиент = РезультатЗапроса[0];
			
			КлиентЗапись = ", клиента: " + ПолученныйКлиент.НаименованиеПолное;
		Иначе
			КлиентЗапись = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Владелец) Тогда
			КорзинаНазвание = "Корзина по документу: " + Владелец + КлиентЗапись;	
		Иначе
			КорзинаНазвание = "Корзина от " + ТекущаяДатаСеанса() + КлиентЗапись;
		КонецЕсли;
		
		МенеджерЗаписи.Наименование = КорзинаНазвание;
	Иначе
		МенеджерЗаписи.Дата         = КорзинаКлючЗаписи.Дата;
		МенеджерЗаписи.Наименование = КорзинаКлючЗаписи.Наименование;
		Если ЗначениеЗаполнено(ПараметрыКонтрагент) Тогда
			МенеджерЗаписи.Клиент   = ПараметрыКонтрагент;
		КонецЕсли;
		
		МенеджерЗаписи.Прочитать();
	КонецЕсли;

	Структура = Новый Структура;
	Структура.Вставить("Товары", Корзина.Выгрузить());

	МенеджерЗаписи.Значение = Новый ХранилищеЗначения(Структура);
	МенеджерЗаписи.Записать(Истина);
	
	КорзинаКлючЗаписи 		= Неопределено;
		
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСохранитьКак(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.ФормаЗаписи", ПодготовитьСписокПодобранныхТоваров(),ЭтотОбъект);
	КорзинаКлючЗаписи = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаОчистить(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КорзинаОчиститьЗавершение", ЭтотОбъект), НСтр("ru = 'Очистить корзину?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		Корзина.Очистить();
		Модифицированность 	= Истина;
		КорзинаКлючЗаписи 	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображения(Команда)
	
	ДвижениеПросмотра = ?(СтрНайти(Команда.Имя, "Вперед"), "Вперед", "Назад");
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	ПолучитьСледующееИзображение(ТекущаяСтрока,ДвижениеПросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		ХарактеристикиВыбор(Элементы.Характеристики,Элементы.Характеристики.ТекущаяСтрока,Элементы.Наименование,Истина);
	Иначе
		СписокВыбор(Элементы.Список,Элементы.Список.ТекущаяСтрока,Элементы.Наименование,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодбор(Команда)
	
	Модифицированность = Ложь;
	Закрыть(ПодготовитьСписокПодобранныхТоваров());
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	Если НЕ РасширенныйПоиск И Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли РасширенныйПоиск И Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли  НЕ РасширенныйПоиск И Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		НоменклатураКартинки = Элементы.Список.ТекущиеДанные.Ссылка;
	ИначеЕсли РасширенныйПоиск И Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные <> Неопределено Тогда
		НоменклатураКартинки = Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоменклатураКартинки) Тогда
		Возврат;
	КонецЕсли;
	
	КартинкаДляПросмотра = ПросмотретьИзображениеНаСервере(НоменклатураКартинки);
	
	Если НЕ КартинкаДляПросмотра = Неопределено Тогда
		
		Если (ЗначениеЗаполнено(КартинкаДляПросмотра) И ЗначениеЗаполнено(ТекущаяКартинка) И НЕ ТекущаяКартинка = КартинкаДляПросмотра)
			 ИЛИ НЕ ЗначениеЗаполнено(КартинкаДляПросмотра) Тогда
			КартинкаДляПросмотра = ТекущаяКартинка;
		КонецЕсли;
		
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиКлиент.ДанныеФайла(КартинкаДляПросмотра, УникальныйИдентификатор));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Отсутствует изображение для просмотра'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВДокумент(Команда)
	
	ТекущиеДанные = Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные;
	Если НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
		ОповеститьОВыборе(ТекущиеДанные.Номенклатура);
	Иначе
		ПоискВПрайсЛистахКлиент.ЗапросНаСозданиеНоменклатуры(
			ЭтотОбъект,
			"РасширенныйПоискНоменклатуры",
			Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	ИнтерактивноеСоздание = (СтрНайти(Команда.Имя, "Интерактивно") > 0);
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры Тогда
		ИмяТаблицы = "РасширенныйПоискНоменклатуры";
		ТекущаяСтрокаНоменклатуры = Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока;
		Если ТекущаяСтрокаНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные = Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные;
		Если НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Для выбранной строки уже существует номенклатура.'"))
			); 
			Возврат;
		КонецЕсли;
	Иначе
		ИмяТаблицы = "ИсточникиОбеспеченияНоменклатуры";
		ТекущиеДанные = Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа ИЛИ НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
			Возврат;
		КонецЕсли;
		ТекущаяСтрокаНоменклатуры = Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущаяСтрока;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("Артикул,АртикулДляПоиска,Производитель,Наименование");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ТекущиеДанные);
	ПараметрыОбратногоВызова = Новый Структура;
	ПараметрыОбратногоВызова.Вставить("ИдентификаторСтроки", Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока);
	ПараметрыОбратногоВызова.Вставить("ПродолжитьВыбор", Ложь);
	ОбратныйВызов = Новый ОписаниеОповещения(
		"Подключаемый_СозданиеНоменклатурыЗавершение",
		ЭтотОбъект,
		ПараметрыОбратногоВызова
	);
	ПоискВПрайсЛистахКлиент.НачатьСозданиеНоменклатуры(ДанныеЗаполнения, ЭтотОбъект, ОбратныйВызов, ИнтерактивноеСоздание);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасширенныйПоиск(Команда)
	
	НовыйРежимПоиска = ПредопределенноеЗначение("Перечисление.РежимыПоиска.РасширенныйПоиск");
	СтарыйРежимПоиска = РежимПоиска;
	
	Если СтарыйРежимПоиска <> НовыйРежимПоиска Тогда
		
		РежимПоиска = НовыйРежимПоиска;
		ОчиститьОтборыСтарогоРежимаПоиска(СтарыйРежимПоиска);
		ВывестиРасширенныйПоискНаСервере(Истина);
		
	КонецЕсли;
	
	ИзменитьОтображениеПереключателейРежимовПоиска();	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПоляКоличествоКорзина(Команда)
	
	 Элементы.КорзинаРедактированиеПоляКоличествоКорзина.Пометка = Не Элементы.КорзинаРедактированиеПоляКоличествоКорзина.Пометка;
	 
	 Элементы.КорзинаЦена.ТолькоПросмотр 	= Не Элементы.КорзинаРедактированиеПоляКоличествоКорзина.Пометка;
	 Элементы.КорзинаСумма.ТолькоПросмотр 	= Не Элементы.КорзинаРедактированиеПоляКоличествоКорзина.Пометка;
	 
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьСписок(Команда)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		АктивныйЭлемент = Элементы.Характеристики;
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		АктивныйЭлемент = Элементы.Список;
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры Тогда
		АктивныйЭлемент = Элементы.РасширенныйПоискНоменклатуры;
	Иначе
		АктивныйЭлемент = Элементы.ИсточникиОбеспеченияНоменклатуры;
	КонецЕсли;
	
	ТекущийЭлемент = АктивныйЭлемент;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьПолеПоиска(Команда)
	
	ТекущийЭлемент = Элементы.ФильтрАртикул;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьКорзину(Команда)
	
	ТекущийЭлемент = Элементы.Корзина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьДерево(Команда)
	
	ВидимостьДерева = Не ВидимостьДерева;	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСтандартныйПоиск(Команда)
	
	НовыйРежимПоиска = ПредопределенноеЗначение("Перечисление.РежимыПоиска.СтандартныйПоиск");
	СтарыйРежимПоиска = РежимПоиска;
	
	Если СтарыйРежимПоиска <> НовыйРежимПоиска Тогда
		
		РежимПоиска = НовыйРежимПоиска;
		ОчиститьОтборыСтарогоРежимаПоиска(СтарыйРежимПоиска);
		ВывестиСтандартныйПоискНаСервере(Истина);
		
	КонецЕсли;
	
	ИзменитьОтображениеПереключателейРежимовПоиска()
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПоискПоЕдинойСтроке(Команда)
	
	НовыйРежимПоиска = ПредопределенноеЗначение("Перечисление.РежимыПоиска.ЕдинаяСтрокаПоиска");
	СтарыйРежимПоиска = РежимПоиска;
	
	Если СтарыйРежимПоиска <> НовыйРежимПоиска Тогда
		
		РежимПоиска = НовыйРежимПоиска;
		ОчиститьОтборыСтарогоРежимаПоиска(СтарыйРежимПоиска);
		ВывестиПоискПоЕдинойСтрокеНаСервере(Истина);
		
	КонецЕсли;
	
	ИзменитьОтображениеПереключателейРежимовПоиска();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиБыстрыеОтборы(Команда)
	
	НовыйРежимПоиска = ПредопределенноеЗначение("Перечисление.РежимыПоиска.БыстрыеОтборы");
	СтарыйРежимПоиска = РежимПоиска;
	
	Если СтарыйРежимПоиска <> НовыйРежимПоиска Тогда
		
		РежимПоиска = НовыйРежимПоиска;
		ОчиститьОтборыСтарогоРежимаПоиска(СтарыйРежимПоиска);
		ВывестиБыстрыеОтборыНаСервере(Истина);
		
	КонецЕсли;
	
	ИзменитьОтображениеПереключателейРежимовПоиска();
	
КонецПроцедуры

#Область ОбработчикиАльфаАвто

// РасширеннаяИнформация
&НаКлиенте
Процедура РасширеннаяИнформацияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	КонтекстНажатия = РасширеннаяИнформацияКлиент.НовыйКонтекстНажатия(ЭтотОбъект, Элементы.Список);
	КонтекстНажатия.ПолноеИмяОбъекта = "Справочник.Номенклатура";
	РасширеннаяИнформацияКлиент.Нажатие(КонтекстНажатия, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_УстановитьВидимостьЛегендыМеток(Команда)
	УстановитьВидимостьЛегендыМеток();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЛегендыМеток()
	УправлениеСвойствами.УстановитьВидимостьЛегендыМеток(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОтбораПоМеткам(Команда)
	
	Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = "ОтборПоМеткам" Тогда
			Если ЭлементОтбора <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ЭлементОтбора.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение[0].Значение;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УправлениеСвойствамиКлиент.УстановитьОтборПоМетке(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЛегендуМеток()
	УправлениеСвойствамиАльфаАвто.ОбновитьЛегендуМеток(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеГруппПараметров

&НаКлиенте
Процедура СохранитьСостоянияГруппПараметров()
	
	ПараметрыЦеныСкрыта = Элементы.ПараметрыЦены.Скрыта();
	ПараметрыОстаткиСкрыта = Элементы.ПараметрыОстатки.Скрыта();
	ГруппаЛегендаМеткиСкрыта = Элементы.ГруппаЛегендаМетки.Скрыта();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостоянияГруппПараметров() 
	
	Если ПараметрыЦеныСкрыта Тогда
		Элементы.ПараметрыЦены.Скрыть();
	Иначе
		Элементы.ПараметрыЦены.Показать();
	КонецЕсли;
	
	Если ПараметрыОстаткиСкрыта Тогда
		Элементы.ПараметрыОстатки.Скрыть();
	Иначе
		Элементы.ПараметрыОстатки.Показать();
	КонецЕсли;
	
	Если ГруппаЛегендаМеткиСкрыта Тогда
		Элементы.ГруппаЛегендаМетки.Скрыть();
	Иначе
		Элементы.ГруппаЛегендаМетки.Показать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СформироватьТекстЗапросаКОстаткамПоСкладам()
	
	// Если у пользователя есть доступ к документу ПоступлениеТоваров отобразим данные из него в списке
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.ПоступлениеТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиПоСкладам.ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.СкладКомпании, ТаблицаОжидаетсяКПоступлению.СкладКомпании) КАК СкладКомпании,
		|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток КАК Количество,
		|	ОстаткиТоваровКомпанииОстатки.РезервОстаток КАК Резерв,
		|	ВЫРАЗИТЬ(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток КАК ЧИСЛО(15, 3)) КАК Остаток,
		|	ВЫБОР
		|		КОГДА ОстаткиТоваровКомпанииОстатки.СкладКомпании.Розничный
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.СуммаРознОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаРозничная,
		|	ВЫБОР
		|		КОГДА ОстаткиТоваровКомпанииОстатки.СкладКомпании.Розничный
		|				И НЕ ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.СуммаРознОстаток / ОстаткиТоваровКомпанииОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЦенаРозничная,
		|	ТаблицаОжидаетсяКПоступлению.КоличествоОжидается КАК Ожидается,
		|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.Номенклатура, ТаблицаОжидаетсяКПоступлению.Номенклатура) КАК Номенклатура
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, ) КАК ОстаткиТоваровКомпанииОстатки
		|		{ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПоступлениеТоваров.СкладКомпании КАК СкладКомпании,
		|			ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
		|			СУММА(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент) КАК КоличествоОжидается
		|		ИЗ
		|			Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|				ПО ПоступлениеТоваровТовары.Ссылка = ПоступлениеТоваров.Ссылка
		|		ГДЕ
		|			НЕ ПоступлениеТоваров.Проведен
		|			И НЕ ПоступлениеТоваров.ПометкаУдаления
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПоступлениеТоваровТовары.Номенклатура,
		|			ПоступлениеТоваров.СкладКомпании) КАК ТаблицаОжидаетсяКПоступлению
		|		ПО ОстаткиТоваровКомпанииОстатки.СкладКомпании = ТаблицаОжидаетсяКПоступлению.СкладКомпании
		|			И ОстаткиТоваровКомпанииОстатки.Номенклатура = ТаблицаОжидаетсяКПоступлению.Номенклатура}";
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЦенИОстатков(Контекст, Настройки = Неопределено)
	
	ПараметрыПодразделениеКомпании = Контекст.ПодразделениеКомпании;
	Если Не ЗначениеЗаполнено(ПараметрыПодразделениеКомпании) Тогда
		ПараметрыПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
	КонецЕсли;
	
	ПараметрыВалюта = Контекст.Валюта;
	Если Не ЗначениеЗаполнено(ПараметрыВалюта) Тогда
		ПараметрыВалюта = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КонецЕсли;
	
	ПараметрыКурсВалюты = Контекст.КурсВалюты;
	Если Не ЗначениеЗаполнено(ПараметрыКурсВалюты) Тогда
		ПараметрыКурсВалюты = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ПараметрыВалюта, ТекущаяДатаСеанса());
	КонецЕсли;
	
	НастройкиЗаполнены = ТипЗнч(Настройки) = Тип("Соответствие");
	
	ПараметрыКонтрагент = Контекст.Контрагент;
	Если Не ЗначениеЗаполнено(ПараметрыКонтрагент) И НастройкиЗаполнены Тогда
		ПараметрыКонтрагент = Настройки.Получить("ПараметрыКонтрагент");
	КонецЕсли;
	
	ПараметрыТипЦен = Контекст.ТипЦен;
	Если Не ЗначениеЗаполнено(ПараметрыТипЦен) И НастройкиЗаполнены Тогда
		ПараметрыТипЦен = Настройки.Получить("ПараметрыТипЦен");
	КонецЕсли;
	
	ПараметрыСкладКомпании = Контекст.СкладКомпании;
	Если Не ЗначениеЗаполнено(ПараметрыСкладКомпании) И НастройкиЗаполнены Тогда
		ПараметрыСкладКомпании = Настройки.Получить("ПараметрыСкладКомпании");
	КонецЕсли;
	
	АдресПараметрыПодбора  = ПоместитьВоВременноеХранилище(Контекст.ПараметрыПодбора, УникальныйИдентификатор);
	
	ДатаЗапретаПодбораНоменклатурыСМаркировкой = ПолучитьЗначениеПараметраСтруктуры(
		Контекст,
		"ДатаЗапретаПодбораНоменклатурыСМаркировкой",
		Неопределено
	);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуДляПодбора(Контекст)
	
	Заголовок = НСтр("ru = 'Подбор номенклатуры'");
	Элементы.ФормаЗавершитьПодбор.Видимость = Истина;
	Элементы.Характеристики.РежимВыбора     = Истина;
	Элементы.Список.ВыборГруппИЭлементов    = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	
	ОстаткиПоОрдерномуСкладу = ПолучитьЗначениеПараметраСтруктуры(Контекст, "ЭтоОрдерныйДокумент", Ложь);
	ПараметрыРежимВыводаОстатков = ?(ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюОстатковТовара"), 2, 0);
	
	// Каждый режим открытия должен сохранять свои настройки
	КлючСохраненияПоложенияОкна = "Справочник.Номенклатура.РежимПодбора";
	КлючНазначенияИспользования = "Справочник.Номенклатура.РежимПодбора";
	
	УстановитьВидимостьКорзины(Истина);
	Элементы.КорзинаВключить.Видимость = Ложь;
	Элементы.КорзинаСкладКомпании.Видимость = ПолучитьЗначениеПараметраСтруктуры(Контекст, "ЕстьСклад", Ложь);
	Элементы.КорзинаЦена.Видимость = ПолучитьЗначениеПараметраСтруктуры(Контекст, "ЕстьЦена", Истина);
	Элементы.КорзинаСумма.Видимость = ПолучитьЗначениеПараметраСтруктуры(Контекст, "ЕстьСумма", Истина);
	Элементы.КорзинаЯчейка.Видимость = ПолучитьЗначениеПараметраСтруктуры(Контекст, "ЕстьЯчейка", Ложь)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЯчейкиХранения");
	Элементы.КорзинаПримечаниеНоменклатура.Видимость = ПолучитьЗначениеПараметраСтруктуры(
		Контекст,
		"ЕстьПримечание",
		Ложь
	);
	Элементы.КорзинаПримечаниеНоменклатураПечать.Видимость = ПолучитьЗначениеПараметраСтруктуры(
		Контекст,
		"ЕстьПримечание",
		Ложь
	);
	Элементы.КорзинаПоставщик.Видимость = ПолучитьЗначениеПараметраСтруктуры(
		Контекст,
		"ЕстьКлючСтрокиПоставщика",
		Ложь
	);
	
	Если Элементы.КорзинаЯчейка.Видимость И ЗначениеЗаполнено(ПараметрыСкладКомпании) Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.КорзинаЯчейка.ПараметрыВыбора,
			"Отбор.Владелец",
			ПараметрыСкладКомпании
		);
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(Контекст, "АдресКорзины", Неопределено) <> Неопределено Тогда
		ЗагрузитьКорзинуИзХранилища(Контекст.АдресКорзины);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура(
		"ПараметрыПодразделениеКомпании,
		|ПараметрыВалюта,
		|ПараметрыКонтрагент,
		|ПараметрыКурсВалюты,
		|ПараметрыТипЦен,
		|ПараметрыСкладКомпании"
	);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	АдресПараметровДокумента = ПоместитьВоВременноеХранилище(СтруктураПараметров, УникальныйИдентификатор);
	
	Элементы.КорзинаВключить.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму(Контекст)
	
	Если Элементы.Список.РежимВыбора И ЗначениеЗаполнено(Контекст.ТекущаяСтрока) Тогда
		ОбновлениеЗамен = Ложь;
		Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница = Элементы.СтраницаАналоги;
	КонецЕсли;
	
	ОстаткиПоОрдерномуСкладу = Ложь;
	УстановитьВидимостьКорзины(Ложь);
	
	Если Элементы.Список.РежимВыбора Тогда
		Элементы.КорзинаВключить.Видимость       = Ложь; 
		Элементы.ФормаВыбратьВДокумент.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРежимЛевойПанелиНаСервере(РежимОтображения)
	
	Элементы.Отбор.Видимость = РежимОтображения = "РежимЛевойПанелиПоиск"; 	
	
	Элементы.РежимЛевойПанелиПоиск.Пометка     	= Элементы.Отбор.Видимость;
	Элементы.РежимЛевойПанелиОтключить.Пометка 	= НЕ Элементы.Отбор.Видимость;
	// Взведем признак необходимости выполнить сохранение настроек формы при закрытии
	СохраняемыеВНастройкахДанныеМодифицированы 	= ИСТИНА;
	РежимОтображенияДереваОтбора 				= РежимОтображения; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКорзины(ПоказатьКорзину)
		
	// Произведем настройку параметров отображения полей корзины и расширенной информации.
	Элементы.Корзина.Видимость         = ПоказатьКорзину;
	Элементы.ПодменюКорзина. Видимость = ПоказатьКорзину;
	Элементы.КорзинаВключить.Пометка = ПоказатьКорзину;
	
	// Корзина Группа Купить
	Элементы.КорзинаКорзинаСоздатьЗаказВнутренний.Видимость  = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказВнутренний);
	Элементы.КорзинаКорзинаСоздатьЗаказПоставщику.Видимость  = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПоставщику);
	Элементы.КорзинаКорзинаСоздатьСчетОтПоставщика.Видимость = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СчетОтПоставщика);
	
	// Корзина Группа Продать
	Элементы.КорзинаКорзинаСоздатьЗаказПокупателя.Видимость   = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПокупателя);
	Элементы.КорзинаКорзинаСоздатьЗаказНаряд.Видимость        = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаряд);
	Элементы.КорзинаКорзинаСоздатьЗаявкаНаРемонт.Видимость    = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаявкаНаРемонт);
	Элементы.КорзинаКорзинаСоздатьРеализацияТоваров.Видимость = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.РеализацияТоваров);
	Элементы.КорзинаКорзинаСоздатьСчетНаОплату.Видимость      = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СчетНаОплату);
	
	// Корзина Группа Складские Операции
	Элементы.КорзинаКорзинаСоздатьПеремещениеТоваров.Видимость = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ПеремещениеТоваров);
	Элементы.КорзинаКорзинаСоздатьСписаниеТоваров.Видимость    = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СписаниеТоваров);
	
	Если ПоказатьКорзину Тогда
		// Произведем настройку параметров отображения полей расширенной информации
		Если НЕ Элементы.СтраницыРасширеннаяИнформация.Видимость Тогда
			Элементы.СтраницыРасширеннаяИнформация.Видимость = Истина;
			Элементы.ПоказатьРасширеннуюИнформацию.Пометка   = Истина;
		КонецЕсли;
		// При включении, произведем обнуление корзины
		Корзина.Очистить();
		РассчитатьПодвалКорзины();
		
		// Сделаем страницу корзины текущей
		Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница = Элементы.СтраницаКорзина;
	Иначе
		Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
			Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаСписок;
		КонецЕсли;
		
		УстановитьРежимВыбораИсточникаОбеспечения(Ложь);
	КонецЕсли;
	
	ЗаполнитьСписокВыбораРежимаВыводаОстатков(ПоказатьКорзину);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСписокПодобранныхТоваров()
	
	ПараметрыПодбора = ПолучитьИзВременногоХранилища(АдресПараметрыПодбора);
	
	Если НЕ ТипЗнч(ПараметрыПодбора)=Тип("Структура") Тогда
		ПараметрыПодбора = Новый Структура();
	КонецЕсли;
	
	ТекстКолонок = "Номенклатура,ХарактеристикаНоменклатуры,Количество,ЕдиницаИзмерения,Коэффициент,Остаток";
	Если Элементы.КорзинаСкладКомпании.Видимость Тогда
		ТекстКолонок = ТекстКолонок + ", СкладКомпании";
	КонецЕсли;
	
	Если Элементы.КорзинаЯчейка.Видимость Тогда
		ТекстКолонок = ТекстКолонок + ", Ячейка";
	КонецЕсли;
	
	Если Элементы.КорзинаПримечаниеНоменклатураПечать.Видимость Тогда
		ТекстКолонок = ТекстКолонок + ", ПримечаниеНоменклатураПечать";
	КонецЕсли; 
	
	Если Элементы.КорзинаЦена.Видимость Тогда
		ТекстКолонок = ТекстКолонок + ", Цена";
	КонецЕсли;
	
	Если Элементы.КорзинаПримечаниеНоменклатура.Видимость Тогда
		ТекстКолонок = ТекстКолонок + ", ПримечаниеНоменклатура";
	КонецЕсли;
	
	Если Элементы.КорзинаПоставщик.Видимость Тогда
		ТекстКолонок = ТекстКолонок + ",Поставщик,НаправлениеПоставки,КлючСтрокиПоставщика,СрокПоставкиВСтроке";
	Иначе
		ПараметрыПодбора.Вставить("ЕстьИсточникОбеспечения", Ложь);
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("Корзина", ПоместитьВоВременноеХранилище(Корзина.Выгрузить(,ТекстКолонок), УникальныйИдентификатор));
	Если ЗначениеЗаполнено(ПараметрыКонтрагент) Тогда
		ПараметрыПодбора.Вставить("Клиент", ПараметрыКонтрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		ПараметрыПодбора.Вставить("Владелец", Владелец);
	КонецЕсли;

	Возврат ПараметрыПодбора;
	
КонецФункции

&НаСервере
Процедура РассчитатьПодвалКорзины()
	
	КорзинаКоличествоСтрок = Корзина.Количество();
	КорзинаИтогКоличество  = Корзина.Итог("Количество");
	КорзинаИтогСумма       = Корзина.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТовараВКорзину(Номенклатура, Количество = 1, Поставка = Неопределено, 
	Характеристика = Неопределено, ТекущаяСтрока = Неопределено, Цена = 0)
	
	Если Не ДатаЗапретаПодбораНоменклатурыСМаркировкой = Неопределено
		И ЭтоОбязательноМаркируемаяНоменклатура(Номенклатура) Тогда
		// Такой товар не добавляем в корзину
		Возврат;
	КонецЕсли;
	
	// поищем в корзине уже имеющийся такой товар
	Поиск = Новый Структура("Номенклатура,ЕдиницаИзмерения", Номенклатура, Номенклатура.ОсновнаяЕдиницаИзмерения);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Поиск.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	Иначе
		Поиск.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Если ТипЗнч(Поставка) = Тип("Число") Тогда
		СтрокаПоставки = Корзина.НайтиПоИдентификатору(Поставка);
	Иначе
		СтрокаПоставки = Поставка;
	КонецЕсли;
	
	Если СтрокаПоставки <> Неопределено Тогда
		Поиск.Вставить("НаправлениеПоставки");
		Поиск.Вставить("КлючСтрокиПоставщика");
		Поиск.Вставить("Поставщик");
		
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаПоставки, "НаправлениеПоставки,КлючСтрокиПоставщика,Поставщик");
	КонецЕсли;
	
	МассивСтрок = Корзина.НайтиСтроки(Поиск);
	
	Если МассивСтрок.Количество() = 0 Тогда
		НоваяСтрока = Корзина.Добавить();
		НоваяСтрока.Номенклатура               = Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;
		НоваяСтрока.Количество                 = Количество;
		НоваяСтрока.ЕдиницаИзмерения           = Номенклатура.ОсновнаяЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
		
		Если ЗначениеЗаполнено(ПараметрыСкладКомпании) Тогда
			НоваяСтрока.СкладКомпании = ПараметрыСкладКомпании;
		КонецЕсли;
		
		КорзинаНоменклатураПриИзмененииНаСервере(НоваяСтрока);
		
		Если Цена > 0 Тогда
			НоваяСтрока.Цена = Цена;
			КорзинаКоличествоПриИзмененииНаСервере(НоваяСтрока);
		КонецЕсли;
		
		// добавим данные источника обеспечения
		Если СтрокаПоставки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				СтрокаПоставки,
				"НаправлениеПоставки,КлючСтрокиПоставщика,Поставщик,СрокПоставкиВСтроке");
			Если ЗначениеЗаполнено(СтрокаПоставки.Цена) Тогда
				НоваяСтрока.Цена = СтрокаПоставки.Цена;
				КорзинаКоличествоПриИзмененииНаСервере(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока = МассивСтрок[0];
		НоваяСтрока.Количество = НоваяСтрока.Количество + Количество;
		
		КорзинаКоличествоПриИзмененииНаСервере(НоваяСтрока);
	КонецЕсли;
	
	РассчитатьПодвалКорзины();
	//ТекущаяСтрока = Корзина.Индекс(НоваяСтрока);
	ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимВыбораХарактеристик(ВыборХарактеристик, ТекущаяСтрока, ТекущийРодитель=Неопределено)
	
	Если ВыборХарактеристик Тогда
		
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики;
		
		Если НЕ Элементы.Найти("ФормаВыбрать") = Неопределено Тогда
			Элементы.ФормаВыбрать.Видимость = Ложь;
		КонецЕсли;
		
		Если НЕ Элементы.Найти("ФормаВыбратьХарактеристики") = Неопределено Тогда
			Элементы.ФормаВыбратьХарактеристики.Видимость = Истина;
			Элементы.ФормаВыбратьХарактеристики.Доступность = Истина; 
			Элементы.ФормаВыбратьХарактеристики.КнопкаПоУмолчанию = Истина; 
			Элементы.ФормаВыбратьХарактеристики.Заголовок =НСтр("ru = 'Завершить подбор'");
			Элементы.ФормаВыбратьХарактеристики.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
	ИначеЕсли Не ВыборХарактеристик И Не РасширенныйПоиск Тогда
		
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаСписок;
		
	ИначеЕсли Не ВыборХарактеристик И РасширенныйПоиск Тогда
		
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры;
		
	КонецЕсли;
	
	Если ВыборХарактеристик Тогда
		
		ВыбраннаяНоменклатура = ТекущаяСтрока;
		Элементы.ХарактеристикиНаименование.Заголовок =
			СтрШаблон(НСтр("ru = 'Характеристики номенклатуры (%1)'"), ВыбраннаяНоменклатура);
		
		ОбновитьСписокХарактеристик();
		ТекущийЭлемент = Элементы.Характеристики;
		
	ИначеЕсли Не РасширенныйПоиск Тогда
		
		ТекущаяСтрока         = ВыбраннаяНоменклатура;
		ТекущийРодитель       = ВыбраннаяНоменклатура.Родитель;
		ВыбраннаяНоменклатура = Неопределено;
		ТекущийЭлемент        = Элементы.Список;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокХарактеристик()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	&Владелец КАК ВладелецХарактеристики,
	|	ВложенныйЗапрос.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Остаток КАК Остаток,
	|	ВложенныйЗапрос.ИндексКартинки КАК ИндексКартинки,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Номенклатура КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
	|		&ВернутьсяКСпискуНоменклатуры КАК Наименование,
	|		0 КАК Остаток,
	|		3 КАК ИндексКартинки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Номенклатура,
	|		ХарактеристикиНоменклатуры.Ссылка,
	|		ХарактеристикиНоменклатуры.Наименование,
	|		ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0),
	|		ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.ПометкаУдаления
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
	|					,
	|					Номенклатура = &Номенклатура
	|						И СкладКомпании В (&СписокСкладов)) КАК ОстаткиТоваровКомпанииОстатки
	|			ПО ХарактеристикиНоменклатуры.Ссылка = ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
	|	ГДЕ
	|		ХарактеристикиНоменклатуры.Владелец = &Владелец
	|		И &УсловиеНаОстаткиХарактеристик
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|		&ПропуститьВыборХарактеристики,
	|		0,
	|		3) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикаНоменклатуры";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура",  ВыбраннаяНоменклатура);
	Запрос.УстановитьПараметр("СписокСкладов", ПараметрыСписокСкладов);
	Запрос.УстановитьПараметр("ВернутьсяКСпискуНоменклатуры", НСтр("ru = '<Вернуться к списку номенклатуры>'"));
	Запрос.УстановитьПараметр("ПропуститьВыборХарактеристики", НСтр("ru = '<Пропустить ВЫБОР характеристики>'"));
	
	ЭлементыОтбора = Отбор.ПолучитьЭлементы();
	УсловиеНаОстаткиХарактеристик = Ложь;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Остаток") Тогда
			Если ЭлементОтбора.Использование = Истина Тогда
				
				Запрос.Текст = СтрЗаменить(
					Запрос.Текст,
					"&УсловиеНаОстаткиХарактеристик",
					"ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) > " + ЭлементОтбора.ПравоеЗначение
				);
				
				УсловиеНаОстаткиХарактеристик = Истина;
				
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не УсловиеНаОстаткиХарактеристик Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеНаОстаткиХарактеристик", "");
	КонецЕсли;
	
	Если ВыбраннаяНоменклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1 Тогда
		ВладелецХарактеристики = ВыбраннаяНоменклатура.ТипНоменклатуры;
	Иначе
		ВладелецХарактеристики = ВыбраннаяНоменклатура;
	КонецЕсли;
	Запрос.УстановитьПараметр("Владелец", ВладелецХарактеристики);
	
	Характеристики.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыводаКолонкиОстатокНаСкладе()
	
	Если Элементы.Найти("Остаток") <> Неопределено Тогда
		Элементы.Остаток.          Видимость = (ПараметрыРежимВыводаОстатков = 1 ИЛИ ПараметрыРежимВыводаОстатков = 3);
	КонецЕсли;
	Элементы.ХарактеристикиОстаток.Видимость = (ПараметрыРежимВыводаОстатков = 1 ИЛИ ПараметрыРежимВыводаОстатков = 3);
	Элементы.КорзинаОстаток.       Видимость = (ПараметрыРежимВыводаОстатков = 2 ИЛИ ПараметрыРежимВыводаОстатков = 3);
	
	// Обновим перечень складов по которым необходимо получить остаток
	Если ЗначениеЗаполнено(ПараметрыСкладКомпании) Тогда
		ПараметрыСписокСкладов.Очистить();
		ПараметрыСписокСкладов.Добавить(ПараметрыСкладКомпании);
	Иначе
		// если склад не заполнен - то выбираем все склады по выбранному подразделению
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СкладыКомпании.Ссылка
		|ИЗ
		|	Справочник.СкладыКомпании КАК СкладыКомпании
		|ГДЕ
		|	СкладыКомпании.ПодразделениеКомпании В ИЕРАРХИИ (&ПодразделениеКомпании)";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПараметрыПодразделениеКомпании);
		ПараметрыСписокСкладов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СкладыКомпании", ПараметрыСписокСкладов.ВыгрузитьЗначения());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВыводитьОбщийОстаток", ПараметрыВыводитьОбщийОстаток);
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики И Элементы.ХарактеристикиОстаток.Видимость Тогда
		ОбновитьСписокХарактеристик();
	КонецЕсли;
	
	Если Элементы.Корзина.Видимость И Корзина.Количество() > 0 И Элементы.КорзинаОстаток.Видимость Тогда
		// Необходим пересчет всей корзины
		СписокНоменклатур   = Новый СписокЗначений;
		СписокНоменклатур.ЗагрузитьЗначения(Корзина.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		
		СписокХарактеристик = Новый СписокЗначений;
		СписокХарактеристик.ЗагрузитьЗначения(Корзина.Выгрузить().ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("СкладыКомпании",             ПараметрыСписокСкладов);
		Запрос.УстановитьПараметр("Номенклатура",               СписокНоменклатур);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СписокХарактеристик);
		
		Если ОстаткиПоОрдерномуСкладу Тогда
			СписокЯчеек = Новый СписокЗначений;
			СписокЯчеек.ЗагрузитьЗначения(Корзина.Выгрузить().ВыгрузитьКолонку("Ячейка"));
			
			Запрос.УстановитьПараметр("Ячейки", СписокЯчеек);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток, 0) КАК Остаток,
			|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура,
			|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры
			|ИЗ
			|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
			|			,
			|			СкладКомпании В (&СкладыКомпании)
			|				И Номенклатура В (&Номенклатура)
			|				И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
			|				И Ячейка В (&Ячейки)) КАК ОстаткиТоваровОрдерныйСкладОстатки";
		Иначе
			Если ПараметрыВыводитьОбщийОстаток Тогда
				ТекстОстатка = " ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) ";
			Иначе
				ТекстОстатка = " ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0) ";
			КонецЕсли;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	" + ТекстОстатка + " КАК Остаток,
			|	ОстаткиТоваровКомпанииОстатки.Номенклатура,
			|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
			|ИЗ
			|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
			|			,
			|			СкладКомпании В (&СкладыКомпании)
			|				И Номенклатура В (&Номенклатура)
			|				И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ОстаткиТоваровКомпанииОстатки";
		КонецЕсли;
		
		ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
		
		СтруктураОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
		
		Для Каждого СтрокаКорзины Из Корзина Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКорзины);
			МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество()=0 Тогда
				СтрокаКорзины.Остаток = 0;
			Иначе
				СтрокаКорзины.Остаток = МассивСтрок[0].Остаток/?(СтрокаКорзины.Коэффициент = 0, 1, СтрокаКорзины.Коэффициент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьАктивизациюСтрокиСпискаНаСервере()
	
	Если (ЕстьРеквизитНаКлиенте(ЭтотОбъект.ТекущийЭлементСписка,"ЭтоГруппа") И ЭтотОбъект.ТекущийЭлементСписка.ЭтоГруппа) ИЛИ
		ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ГруппаНоменклатуры = Истина;
	Иначе
		ГруппаНоменклатуры = Ложь;
		Если НЕ ЭтотОбъект.ТекущийЭлементСписка = Неопределено Тогда
			Артикул       = ЭтотОбъект.ТекущийЭлементСписка.АртикулДляПоиска;
			Производитель = ЭтотОбъект.ТекущийЭлементСписка.Производитель;
		КонецЕсли;
		
	КонецЕсли;
	// Устанавливаем отбор по владельцу на динамический список
	Если Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница.Имя = "СтраницаАналоги" Тогда
		ИдентификаторГруппыАналогов = ИдентификаторГруппыАналогов();
		Аналоги.Параметры.УстановитьЗначениеПараметра(
			"ИдентификаторГруппы", ИдентификаторГруппыАналогов);
		Аналоги.Параметры.УстановитьЗначениеПараметра(
			"АртикулДляПоиска", Артикул);
		Аналоги.Параметры.УстановитьЗначениеПараметра(
			"Производитель", Производитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторГруппыАналогов()
	
	ТекущаяСтрока = Неопределено;
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры Тогда
		ТекущаяСтрока = Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока;
	Иначе
		ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат (" ");
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ГруппыАналогов.ИдентификаторГруппы КАК ИдентификаторГруппы
	|ИЗ
	|	РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
	|ГДЕ
	|	ГруппыАналогов.АртикулДляПоиска = &Артикул
	|	И ГруппыАналогов.Производитель = &Производитель";
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры Тогда
		ДанныеНоменклатуры =
			РасширенныйПоискНоменклатуры.НайтиПоИдентификатору(Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока);
		Запрос.УстановитьПараметр("Артикул"      , ДанныеНоменклатуры.АртикулДляПоиска);
		Запрос.УстановитьПараметр("Производитель", ДанныеНоменклатуры.Производитель);
	ИначеЕсли ЭтотОбъект.ТекущийЭлементСписка <> Неопределено Тогда
		Запрос.УстановитьПараметр("Артикул"      , ЭтотОбъект.ТекущийЭлементСписка.АртикулДляПоиска);
		Запрос.УстановитьПараметр("Производитель", ЭтотОбъект.ТекущийЭлементСписка.Производитель);
	Иначе
		Запрос.УстановитьПараметр("Артикул"      , Неопределено);
		Запрос.УстановитьПараметр("Производитель", Неопределено);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторГруппы;
	КонецЕсли;
	
	Возврат (" ");
	
КонецФункции

&НаСервере
Процедура ЗагрузитьЦены()
	
	Если ЭтотОбъект.ТекущийЭлементСписка = Неопределено
		ИЛИ ТипЗнч(ЭтотОбъект.ТекущийЭлементСписка) = Тип("СтрокаГруппировкиДинамическогоСписка")
		ИЛИ ЭтотОбъект.ТекущийЭлементСписка.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики И ЗначениеЗаполнено(Элементы.Характеристики.ТекущаяСтрока) Тогда
		ДополнительныеПараметры.Вставить("ТекущаяНоменклатура",   ВыбраннаяНоменклатура);
		ДополнительныеПараметры.Вставить("ТекущаяХарактеристика", Характеристики.НайтиПоИдентификатору(Элементы.Характеристики.ТекущаяСтрока).ХарактеристикаНоменклатуры);
		ДополнительныеПараметры.Вставить("ЗапросТекст",           "ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры");
	Иначе
		ДополнительныеПараметры.Вставить("ТекущаяНоменклатура",   ЭтотОбъект.ТекущийЭлементСписка);
		ДополнительныеПараметры.Вставить("ТекущаяХарактеристика", Неопределено);
		ДополнительныеПараметры.Вставить("ЗапросТекст",           "ИСТИНА");
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТекущаяНоменклатура = Неопределено
		ИЛИ ДополнительныеПараметры.ТекущаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.Номенклатура.ЗагрузитьЦены(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЦеныКонтрагентов()
	
	Если ЭтотОбъект.ТекущийЭлементСписка = Неопределено
		ИЛИ ТипЗнч(ЭтотОбъект.ТекущийЭлементСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") 
		ИЛИ ЭтотОбъект.ТекущийЭлементСписка.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка цен контрагентов
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЦеныСрезПоследних.ТипЦен КАК ТипЦен,
	|	ЦеныСрезПоследних.Контрагент КАК Контрагент,
	|	ЦеныСрезПоследних.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ЦеныСрезПоследних.ТипЦен.ВВалютеУчета = ИСТИНА
	|			ТОГДА ЦеныСрезПоследних.Номенклатура.ВалютаУчета
	|		ИНАЧЕ ЦеныСрезПоследних.ТипЦен.ВалютаЦены
	|	КОНЕЦ КАК ВалютаЦены,
	|	ЦеныСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЦеныСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныСрезПоследних.ПодразделениеКомпании КАК Подразделение,
	|	ЦеныСрезПоследних.Цена КАК Цена,
	|	0 КАК ЦенаРегл
	|ПОМЕСТИТЬ ТаблицаЦен
	|ИЗ
	|	РегистрСведений.Цены.СрезПоследних(
	|			&НаДату,
	|			Номенклатура = &Номенклатура
	|				И Контрагент <> &Контрагент
	|				И ВЫБОР
	|					КОГДА ТипЦен.АлгоритмПолученияЦены = &ПоХарактеристике
	|						ТОГДА %УсловиеПоХарактеристике%
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ЦеныСрезПоследних
	|ГДЕ
	|	ЦеныСрезПоследних.Цена > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЦен.Контрагент,
	|	ТаблицаЦен.ДоговорВзаиморасчетов,
	|	ТаблицаЦен.ТипЦен КАК ТипЦен,
	|	ТаблицаЦен.ВалютаЦены,
	|	ТаблицаЦен.ВалютаЦены КАК БазоваяВалюта,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТаблицаЦен.ЕдиницаИзмерения,
	|	ТаблицаЦен.Подразделение,
	|	ТаблицаЦен.Цена,
	|	ТаблицаЦен.ЦенаРегл,
	|	NULL КАК ОкруглятьВБольшуюСторону,
	|	NULL КАК Точность,
	|	0 КАК ПолеСортировки,
	|	ТаблицаЦен.ТипЦен.Рассчитывается КАК Рассчитывается
	|ИЗ
	|	ТаблицаЦен КАК ТаблицаЦен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЦен.Контрагент,
	|	ТаблицаЦен.ДоговорВзаиморасчетов,
	|	ТипыЦенПоВидамНоменклатуры.Ссылка,
	|	ТипыЦенПоВидамНоменклатуры.ВалютаЦены,
	|	ТипыЦенПоВидамНоменклатуры.БазоваяВалюта,
	|	ТаблицаЦен.ХарактеристикаНоменклатуры,
	|	ТаблицаЦен.ЕдиницаИзмерения,
	|	ТаблицаЦен.Подразделение,
	|	ТаблицаЦен.Цена + ТаблицаЦен.Цена * (ЕСТЬNULL(ТипыЦенПоВидамНоменклатуры.ПроцентСкидкиНаценкиТаблица, 0) / 100),
	|	ТаблицаЦен.ЦенаРегл,
	|	ТипыЦенПоВидамНоменклатуры.ОкруглятьВБольшуюСторону,
	|	ТипыЦенПоВидамНоменклатуры.Точность,
	|	1,
	|	ТаблицаЦен.ТипЦен.Рассчитывается
	|ИЗ
	|	ТаблицаЦен КАК ТаблицаЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен ЕСТЬ NULL
	|					ТОГДА ТипыЦен.БазовыйТипЦен
	|				ИНАЧЕ ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен
	|			КОНЕЦ КАК БазовыйТипЦен,
	|			ВЫБОР
	|				КОГДА ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен ЕСТЬ NULL
	|					ТОГДА ТипыЦен.БазовыйТипЦен.ВалютаЦены
	|				ИНАЧЕ ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен.ВалютаЦены
	|			КОНЕЦ КАК БазоваяВалюта,
	|			ТипыЦен.ВалютаЦены КАК ВалютаЦены,
	|			ТипыЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|			ТипыЦен.Точность КАК Точность,
	|			ВЫБОР
	|				КОГДА ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки ЕСТЬ NULL 
	|					ТОГДА ТипыЦен.ПроцентСкидкиНаценки
	|				ИНАЧЕ ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки
	|			КОНЕЦ КАК ПроцентСкидкиНаценкиТаблица,
	|			ТипыЦен.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.ТипыЦен КАК ТипыЦен
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК ТипыЦенПроцентыСкидкиНаценки
	|				ПО (ТипыЦенПроцентыСкидкиНаценки.Ссылка = ТипыЦен.Ссылка)
	|					И (ТипыЦенПроцентыСкидкиНаценки.ЦеноваяГруппа = &ЦеноваяГруппа)) КАК ТипыЦенПоВидамНоменклатуры
	|		ПО ТаблицаЦен.ТипЦен = ТипыЦенПоВидамНоменклатуры.БазовыйТипЦен
	|ГДЕ
	|	ТаблицаЦен.Цена > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки,
	|	ТипЦен";
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату",           ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПоХарактеристике", Перечисления.АлгоритмПолученияЦены.ПоХарактеристике);
	Запрос.УстановитьПараметр("Контрагент",       Справочники.Контрагенты.ПустаяСсылка());
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		ТекущаяНоменклатура   = ВыбраннаяНоменклатура;
		ТекущаяХарактеристика = Характеристики.НайтиПоИдентификатору(Элементы.Характеристики.ТекущаяСтрока).ХарактеристикаНоменклатуры;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоХарактеристике%", "ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры");
	Иначе
		ТекущаяНоменклатура   = ЭтотОбъект.ТекущийЭлементСписка;
		ТекущаяХарактеристика = Неопределено;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоХарактеристике%", "ИСТИНА");
	КонецЕсли;
	
	Если ТекущаяНоменклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура",               ТекущаяНоменклатура);
	Запрос.УстановитьПараметр("ЦеноваяГруппа",            ТекущаяНоменклатура.ЦеноваяГруппа);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ТекущаяХарактеристика);
	
	ТаблицаЦеныКонтрагентов=Запрос.Выполнить().Выгрузить();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Ставка = ТекущаяНоменклатура.СтавкаНДС.Ставка;
	
	Для Каждого ТекСтрока Из ТаблицаЦеныКонтрагентов Цикл		// для расчетных типов цен перерасчет из валюты базового типа цен
		ТекСтрока.Цена = ?(ТекСтрока.ВалютаЦены <> ТекСтрока.БазоваяВалюта, РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.Цена, ТекСтрока.БазоваяВалюта, ТекущаяДатаСеанса(), ТекСтрока.ВалютаЦены, ТекущаяДатаСеанса()), ТекСтрока.Цена);
		
		Если ТекСтрока.ТипЦен.ОкруглятьВБольшуюСторону Тогда
			ТекСтрока.Цена = Окр(ТекСтрока.Цена + (0.5 / Pow(10, ТекСтрока.ТипЦен.Точность)), ТекСтрока.ТипЦен.Точность, 0);
		Иначе
			ТекСтрока.Цена = Окр(ТекСтрока.Цена,ТекСтрока.ТипЦен.Точность,0);
		КонецЕсли;
		
		Если ВалютаРегламентированногоУчета <> Справочники.Валюты.ПустаяСсылка() Тогда
			ТекСтрока.ЦенаРегл = ?(ТекСтрока.ВалютаЦены = ВалютаРегламентированногоУчета, ТекСтрока.Цена,
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.Цена, ТекСтрока.ВалютаЦены, ТекущаяДатаСеанса(), ВалютаРегламентированногоУчета, ТекущаяДатаСеанса()));
		КонецЕсли;
		
		НоваяСтрока = ЦеныКонтрагентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		
		Если ТекСтрока.ТипЦен.ЦенаВключаетНДС Тогда
			НоваяСтрока.ЦенаБезНДС     = ТекСтрока.Цена - Окр((ТекСтрока.Цена * Ставка)/(100 + Ставка), 2);
			НоваяСтрока.ЦенаБезНДСРегл = ТекСтрока.ЦенаРегл - Окр((ТекСтрока.ЦенаРегл * Ставка)/(100 + Ставка), 2);
		Иначе
			НоваяСтрока.ЦенаБезНДС     = ТекСтрока.Цена;
			НоваяСтрока.ЦенаБезНДСРегл = ТекСтрока.ЦенаРегл;
			НоваяСтрока.Цена           = ТекСтрока.Цена + Окр((ТекСтрока.Цена * Ставка)/100, 2);
			НоваяСтрока.ЦенаРегл       = ТекСтрока.ЦенаРегл + Окр((ТекСтрока.ЦенаРегл * Ставка)/100, 2);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗамены()
	
	ЗаменыСтарые.Очистить();
	ЗаменыНовые.Очистить();
	
	Если ЭтотОбъект.ТекущийЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗамен = Справочники.Номенклатура.ПолучитьТаблицуЗамен(
		ЭтотОбъект.ТекущийЭлементСписка,
		ЭтотОбъект.ТекущийЭлементСписка.АртикулДляПоиска,
		ЭтотОбъект.ТекущийЭлементСписка.Производитель);
	ЗаменыСтарые.Загрузить(Справочники.Номенклатура.ПолучитьЗаменыНоменклатуры(Ложь, ТаблицаЗамен));
	ЗаменыНовые.Загрузить(Справочники.Номенклатура.ПолучитьЗаменыНоменклатуры(Истина, ТаблицаЗамен));
	
	// Заполним номера строк в ТЧ
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из ЗаменыСтарые Цикл
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из ЗаменыНовые Цикл
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкуОтчета(КлючОтчета)
	
	НастройкиВарианта = Справочники.Номенклатура.ПолучитьНастройкуОтчета(КлючОтчета);

	Возврат НастройкиВарианта;

КонецФункции

&НаСервере
Процедура ЗагрузитьКорзинуИзХранилища(Адрес)
	
	ТаблицаКорзины = ПолучитьИзВременногоХранилища(Адрес);
	Корзина.Загрузить(ТаблицаКорзины);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеЗамены(РезультатОтвета, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура;
		Основание = Новый Структура();
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ДобавлениеНоменклатуры = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ДобавлениеНоменклатуры", Неопределено);
			Если НЕ ДобавлениеНоменклатуры = Неопределено Тогда
				Основание.Вставить("Артикул",       ДобавлениеНоменклатуры.Артикул);
				Основание.Вставить("Производитель", ДобавлениеНоменклатуры.Производитель);
			КонецЕсли;
		КонецЕсли;
		ПараметрыФормы.Вставить("Основание", Основание);
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуЗамен(НоваяНоменклатура)
	
	СтрокаПоискаЗамены = Новый Структура("Артикул, Производитель", НоваяНоменклатура.Артикул, НоваяНоменклатура.Производитель);
	ТаблицаЗаменыСтарые = ЗаменыСтарые.НайтиСтроки(СтрокаПоискаЗамены);
	ТаблицаЗаменыНовые  = ЗаменыНовые.НайтиСтроки(СтрокаПоискаЗамены);
	
	Для Каждого Замена Из ТаблицаЗаменыСтарые Цикл
		Замена.Номенклатура = НоваяНоменклатура;
	КонецЦикла;
	
	Для Каждого Замена Из ТаблицаЗаменыНовые Цикл
		Замена.Номенклатура = НоваяНоменклатура;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередЗакрытием(Результат, ДополнительныеПараметры) Экспорт
	
	Если РежимПодбора Тогда
		СписокВыборЗначения(Неопределено,Неопределено,Неопределено);
	ИначеЕсли Элементы.Корзина.Видимость Тогда
		КорзинаСохранить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСледующееИзображение(ТекущаяСтрока,ДвижениеПросмотра)
	
	// Сформируем список форматов изображения
	СписокИзображений = ПолучитьМассивИзображений(ТекущаяСтрока);
	
	НомерКартинки = 0;
	Если СписокИзображений.Количество() > 1 Тогда
		КоличествоИзображений = СписокИзображений.Количество();
		Для Индекс = 0 По КоличествоИзображений - 1 Цикл
			Если ТекущаяКартинка = СписокИзображений[Индекс].Ссылка Тогда
				Если ДвижениеПросмотра = "Вперед" Тогда
					Если Индекс = КоличествоИзображений - 1 Тогда
						НомерКартинки = 0;
					Иначе
						НомерКартинки = Индекс + 1;
					КонецЕсли;
				ИначеЕсли ДвижениеПросмотра = "Назад" Тогда
					Если Индекс = 0 Тогда
						НомерКартинки = КоличествоИзображений - 1;
					Иначе
						НомерКартинки = Индекс - 1;
					КонецЕсли;
				КонецЕсли;
				ТекущаяКартинка = СписокИзображений[НомерКартинки];
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверим тип выбранного файла картинки
	Если (ТекущаяКартинка.ИндексКартинки < 42 ИЛИ ТекущаяКартинка.ИндексКартинки > 52) И СписокИзображений.Количество() > 0 Тогда
		ТекущаяКартинка = СписокИзображений[0];
		НомерКартинки = 0;
	КонецЕсли;
	
	Если НЕ ТекущаяКартинка.Пустая() Тогда
		ИндикаторКоличестваКартинок = "" + (НомерКартинки + 1) + " из " + СписокИзображений.Количество();
		АдресКартинки = НавигационнаяСсылкаКартинки(ТекущаяКартинка, УникальныйИдентификатор)
	Иначе
		ИндикаторКоличестваКартинок = "";
		АдресКартинки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивИзображений(ТекущийОбъект)
	
	СписокФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ТекущийОбъект, СписокФайлов);
	// Сформируем список форматов изображения
	СписокИзображений = Новый Массив;
	Для Каждого Файл Из СписокФайлов Цикл
		Если ТекущийОбъект.ФайлКартинки = Файл 
			ИЛИ (НЕ Файл.ПометкаУдаления И Файл.ИндексКартинки > 41 И Файл.ИндексКартинки < 51) Тогда
			СписокИзображений.Добавить(Файл);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокИзображений;
	
КонецФункции

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаСервере
Процедура ПолучитьКартинкуПоУмолчанию()
	
	ТекущаяКартинка = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	АдресКартинки = "";
	Если ТекущаяСтрока = Неопределено
		ИЛИ Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница = Неопределено
		ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		ИЛИ ТекущаяСтрока.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(ТекущаяСтрока.ФайлКартинки, УникальныйИдентификатор);
		МассивКартинок = ПолучитьМассивИзображений(ТекущаяСтрока);
		Если МассивКартинок.Количество()>0 Тогда
			ИндикаторКоличестваКартинок = ""
			+ (МассивКартинок.Найти(ТекущаяСтрока.ФайлКартинки) + 1)
			+ " из " + МассивКартинок.Количество() + "";
		КонецЕсли;
	Иначе
		ПолучитьСледующееИзображение(ТекущаяСтрока,"Вперед");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеТовараВКорзинуЗавершение(ВведенныеДанные, ДобавляемаяСтрока) Экспорт
	
	Если ВведенныеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ВведенныеДанные) = Тип("Структура") Тогда
		Количество = ВведенныеДанные.Количество;
		Цена = ВведенныеДанные.Цена;
	Иначе
		Количество = ВведенныеДанные; 
		Цена = 0;
	КонецЕсли;
	
	ОбработкаПодбораТовараВКорзину(ДобавляемаяСтрока.Номенклатура, Количество, ДобавляемаяСтрока.Поставка, ДобавляемаяСтрока.Характеристика, ДобавляемаяСтрока.ТекущаяСтрока, Цена);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПомещениеТовараВКорзину(
	Номенклатура, Поставка = Неопределено, Характеристика = Неопределено, ТекущаяСтрока = Неопределено)
	
	ДобавляемаяСтрока = Новый Структура;
	ДобавляемаяСтрока.Вставить("Номенклатура", Номенклатура);
	ДобавляемаяСтрока.Вставить("Характеристика", Характеристика);
	ДобавляемаяСтрока.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДобавляемаяСтрока.Вставить("Поставка", Поставка);
	
	Если ЗапрашиватьКоличествоУПользователя(ЭтотОбъект) Тогда
		Оповещение = Новый ОписаниеОповещения("ПомещениеТовараВКорзинуЗавершение", ЭтотОбъект, ДобавляемаяСтрока);
		ОткрытьФорму(
			"Справочник.Номенклатура.Форма.ВводКоличества",
			,
			ЭтотОбъект,
			ЭтотОбъект,
			,
			,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ПомещениеТовараВКорзинуЗавершение(1, ДобавляемаяСтрока);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗапрашиватьКоличествоУПользователя(Форма)
	
	Возврат Форма.Элементы.КорзинаРедактированиеПоляКоличествоКорзина.Пометка;
	
КонецФункции

&НаСервере
Процедура УстановитьФильтрыПоискаПоЕдинойСтрокеНаСервере(Знач ПодстрокаПоиска = "")
	
	ПодстрокаПоиска = СокрЛП(ПодстрокаПоиска);
	
	Использование = ЗначениеЗаполнено(ПодстрокаПоиска);
	
	Список.Отбор.Элементы.Очистить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ НоменклатураОтбор
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	(Номенклатура.Наименование ПОДОБНО &ПараметрНаименование
		|			ИЛИ Номенклатура.НаименованиеПолное ПОДОБНО &ПараметрНаименованиеПолное
		|			ИЛИ Номенклатура.Код ПОДОБНО &ПараметрКод
		|			ИЛИ Номенклатура.Артикул ПОДОБНО &ПараметрАртикул
		|			ИЛИ Номенклатура.АртикулДляПоиска ПОДОБНО &ПараметрАртикулДляПоиска)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникНоменклатура.Ссылка КАК Ссылка,
		|	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникНоменклатура.Родитель КАК Родитель,
		|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	СправочникНоменклатура.Код КАК Код,
		|	СправочникНоменклатура.Наименование КАК Наименование,
		|	СправочникНоменклатура.НаименованиеИностранное КАК НаименованиеИностранное,
		|	СправочникНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	СправочникНоменклатура.Артикул КАК Артикул,
		|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СправочникНоменклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	СправочникНоменклатура.ОсновнаяЕдиницаИзмерения КАК ОсновнаяЕдиницаИзмерения,
		|	СправочникНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	СправочникНоменклатура.ВалютаУчета КАК ВалютаУчета,
		|	СправочникНоменклатура.СпособРаспределенияДопРасходов КАК СпособРаспределенияДопРасходов,
		|	СправочникНоменклатура.СтатьяДопРасходов КАК СтатьяДопРасходов,
		|	СправочникНоменклатура.ГТД КАК ГТД,
		|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
		|	СправочникНоменклатура.СрокХраненияТовара КАК СрокХраненияТовара,
		|	СправочникНоменклатура.ПроцентНаценки КАК ПроцентНаценки,
		|	СправочникНоменклатура.Производитель КАК Производитель,
		|	СправочникНоменклатура.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
		|	СправочникНоменклатура.КратностьПоставок КАК КратностьПоставок,
		|	СправочникНоменклатура.СнятаСПроизводства КАК СнятаСПроизводства,
		|	СправочникНоменклатура.ЗапретПродажи КАК ЗапретПродажи,
		|	СправочникНоменклатура.ЗапретЗакупки КАК ЗапретЗакупки,
		|	СправочникНоменклатура.Автор КАК Автор,
		|	СправочникНоменклатура.ДатаСоздания КАК ДатаСоздания,
		|	СправочникНоменклатура.Комментарий КАК Комментарий,
		|	СправочникНоменклатура.Предопределенный КАК Предопределенный,
		|	СправочникНоменклатура.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
		|			ТОГДА СправочникНоменклатура.ТипНоменклатуры
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2
		|			ТОГДА СправочникНоменклатура.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВладелецХарактеристики,
		|	ВЫБОР
		|		КОГДА &ВыводитьОбщийОстаток
		|			ТОГДА ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0)
		|	КОНЕЦ КАК Остаток,
		|	ВЫБОР
		|		КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
		|			ТОГДА 1
		|		КОГДА НаличиеФайлов.ЕстьФайлы
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЕстьФайлы,
		|	НЕОПРЕДЕЛЕНО КАК Ячейка,
		|	0 КАК Цена
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, СкладКомпании В (&СкладыКомпании)) КАК ОстаткиТоваровКомпанииОстатки
		|		ПО СправочникНоменклатура.Ссылка = ОстаткиТоваровКомпанииОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураОтбор КАК НоменклатураОтбор
		|		ПО СправочникНоменклатура.Ссылка = НоменклатураОтбор.Ссылка
		|{ГДЕ
		|	СправочникНоменклатура.Ссылка.*}";
	
	АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(ПодстрокаПоиска);
	Если ПустаяСтрока(АртикулДляПоиска) Тогда
		АртикулДляПоиска = ПодстрокаПоиска;
	КонецЕсли;
	
	Если ТочныйПоиск Тогда
		
		ПараметрАртикул            = ПодстрокаПоиска;
		ПараметрАртикулДляПоиска   = АртикулДляПоиска;
		ПараметрКод                = ПодстрокаПоиска;
		ПараметрНаименование       = ПодстрокаПоиска;
		ПараметрНаименованиеПолное = ПодстрокаПоиска;
		
		ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"Номенклатура.НаименованиеПолное ПОДОБНО &ПараметрНаименованиеПолное",
		"ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1024)) ПОДОБНО &ПараметрНаименованиеПолное"
		);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОДОБНО", "=");
		
	Иначе
		
		ПараметрАртикул            = "%" + ПодстрокаПоиска + "%";
		ПараметрАртикулДляПоиска   = "%" + АртикулДляПоиска + "%";
		ПараметрКод                = "%" + ПодстрокаПоиска + "%";
		ПараметрНаименование       = "%" + ПодстрокаПоиска + "%";
		ПараметрНаименованиеПолное = "%" + ПодстрокаПоиска + "%";
		
	КонецЕсли;
	
	Список.ТекстЗапроса = ТекстЗапроса;
	Список.Параметры.УстановитьЗначениеПараметра("ПараметрАртикул"           , ПараметрАртикул);
	Список.Параметры.УстановитьЗначениеПараметра("ПараметрАртикулДляПоиска"  , ПараметрАртикулДляПоиска);
	Список.Параметры.УстановитьЗначениеПараметра("ПараметрКод"               , ПараметрКод);
	Список.Параметры.УстановитьЗначениеПараметра("ПараметрНаименование"      , ПараметрНаименование);
	Список.Параметры.УстановитьЗначениеПараметра("ПараметрНаименованиеПолное", ПараметрНаименованиеПолное);
	
	Если Использование Тогда
		
		РежимОтображенияСписка = Элементы.Список.Отображение;
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрыПоискаНаРасширенныйПоиск()
	
	Если РасширенныйПоиск Тогда
		ЗаполнитьРезультатРасширенногоПоиска();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрыРасширенногоПоискаНаСервере()
	
	Перем ПроизводителиДляПоиска;
	
	// подготовим данные артикула для поиска
	ФильтрАртикул = СокрЛП(ФильтрАртикул);
	
	УстановитьФильтрыПоискаНаРасширенныйПоиск();
	
	// заполним список выбора производителей доступными производителями
	ОбновитьСписокПроизводителей = Ложь;
	Если РасширенныйПоиск И ИспользованиеФильтраПроизводитель Тогда
		// Обновим список выбора производитель
		НайденныеПроизводители = Справочники.Производители.НайтиПроизводителейПоАртикулу(
			ФильтрАртикул,
			ФильтрАртикул,
			ПроизводителиДляПоиска,
			ТочныйПоиск,
			РасширенныйПоиск,
			ИскатьВоВнешнихПрайсЛистахКонтрагентов);
		
		ОбновитьСписокПроизводителей = Истина;
	ИначеЕсли РасширенныйПоиск И НЕ ИспользованиеФильтраПроизводитель Тогда
		ПроизводителиДляПоиска = ПоискВПрайсЛистах.ВыбратьПроизводителейИзРезультатаПоиска(РасширенныйПоискНоменклатуры);
		
		ОбновитьСписокПроизводителей = Истина;
	КонецЕсли;
	
	Если ОбновитьСписокПроизводителей Тогда
		Элементы.ФильтрПроизводитель.СписокВыбора.ЗагрузитьЗначения(ПроизводителиДляПоиска.Производители);
		
		Если ПроизводителиДляПоиска.ЕстьПустойПроизводитель Тогда
			Элементы.ФильтрПроизводитель.СписокВыбора.Добавить(Неопределено, "< Пустой производитель >");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатРасширенногоПоиска(Знач АртикулДляПоиска = Неопределено)
	
	Если АртикулДляПоиска = Неопределено Тогда
		АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(ФильтрАртикул);
	КонецЕсли;
	
	РасширенныйПоискНоменклатуры.Загрузить(ПоискВПрайсЛистах.ВыполнитьПоискУникальныхПозиций(
		ФильтрАртикул,
		АртикулДляПоиска,
		ФильтрАртикул,
		ИспользованиеФильтраПроизводитель,
		ФильтрПроизводитель,
		Новый Структура("ТочныйПоиск,ИскатьВоВнешнихПрайсЛистахКонтрагентов", ТочныйПоиск, ИскатьВоВнешнихПрайсЛистахКонтрагентов)));
		
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяВыборИсточникаОбеспичения()
	
	Возврат (Элементы.Корзина.Видимость И Элементы.КорзинаПоставщик.Видимость);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьСтраницРасширеннойИнформации(Значение)
	
	// Произведем настройку параметров отображения полей расширенной информации
	Для Каждого Страница Из Элементы.СтраницыРасширеннаяИнформация.ПодчиненныеЭлементы Цикл
		Если Страница.Имя = "СтраницаКорзина" Тогда
			Продолжить;
		КонецЕсли;
		
		Страница.Видимость = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимВыбораИсточникаОбеспечения(ВыборИсточникаОбеспечения, Номенклатура = Неопределено)
	
	Если НЕ(ВыборИсточникаОбеспечения ИЛИ Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаИсточникиОбеспеченияНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыборИсточникаОбеспечения Тогда
		ТребуетсяОбновлениеИсточников = Истина;
		Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ТребуетсяОбновлениеИсточников = (Номенклатура <> ВыбраннаяНоменклатура);
			
			ВыбраннаяНоменклатура         = Номенклатура;
			ОписаниеВыбраннойНоменклатуры = Неопределено;
			
			ТекстЗаголовка = СтрШаблон(
				НСтр("ru = 'Выбор источника обеспечения для артикула [%1|%2]'"),
				ВыбраннаяНоменклатура.Артикул,
				ВыбраннаяНоменклатура.Производитель);
		Иначе
			ТребуетсяОбновлениеИсточников = (
				ОписаниеВыбраннойНоменклатуры = Неопределено
				ИЛИ ОписаниеВыбраннойНоменклатуры.Артикул <> Номенклатура.Артикул
				ИЛИ ОписаниеВыбраннойНоменклатуры.АртикулДляПоиска <> Номенклатура.АртикулДляПоиска
				ИЛИ ОписаниеВыбраннойНоменклатуры.Производитель <> Номенклатура.Производитель);
			
			ВыбраннаяНоменклатура         = Неопределено;
			ОписаниеВыбраннойНоменклатуры = Номенклатура;
			
			ТекстЗаголовка = СтрШаблон(
				НСтр("ru = 'Выбор источника обеспечения для артикула [%1|%2]'"),
				ОписаниеВыбраннойНоменклатуры.Артикул,
				ОписаниеВыбраннойНоменклатуры.Производитель);
		КонецЕсли;
		
		Элементы.ИсточникиОбеспеченияНоменклатурыПредставление.Заголовок = ТекстЗаголовка;
		
		Если ТребуетсяОбновлениеИсточников Тогда
			ОбновитьСписокИсточниковОбеспечения();
		КонецЕсли;
		
		ТекущийЭлемент = Элементы.ИсточникиОбеспеченияНоменклатуры;
	КонецЕсли;
	
	Если НЕ РасширенныйПоиск И ВыборИсточникаОбеспечения Тогда
		Если Элементы.РежимЛевойПанелиДерево.Пометка Тогда
			ТекущийРежимЛевойПанели = "РежимЛевойПанелиДерево";
		ИначеЕсли Элементы.РежимЛевойПанелиПоиск.Пометка Тогда
			ТекущийРежимЛевойПанели = "РежимЛевойПанелиПоиск";
		Иначе
			ТекущийРежимЛевойПанели = "";
		КонецЕсли;
		
		ИзменитьРежимЛевойПанелиНаСервере(Неопределено);
	ИначеЕсли НЕ РасширенныйПоиск Тогда
		ИзменитьРежимЛевойПанелиНаСервере(ТекущийРежимЛевойПанели);
	КонецЕсли;
	
	Элементы.ПодменюРежимЛевойПанели.Видимость = НЕ(РасширенныйПоиск ИЛИ ВыборИсточникаОбеспечения);
	
	Если ВыборИсточникаОбеспечения Тогда
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаИсточникиОбеспеченияНоменклатуры;
	ИначеЕсли НЕ(ВыборИсточникаОбеспечения ИЛИ РасширенныйПоиск) Тогда
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаСписок;
	ИначеЕсли НЕ ВыборИсточникаОбеспечения И РасширенныйПоиск Тогда
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры;
	КонецЕсли;
	
	Элементы.ПоляОтборов.Доступность = Не ВыборИсточникаОбеспечения;
	Элементы.ОсновныеДействияФормыРасширенныйПоиск.Видимость = ВыборИсточникаОбеспечения
		Или Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаВыбрать",
		"Видимость",
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаСписок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаСоздать",
		"Видимость",
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаСписок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаСоздатьГруппу",
		"Видимость",
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаСписок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаУстановитьПометкуУдаления",
		"Видимость",
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаСписок
	);
	
	Элементы.ФормаЗавершитьПодбор.КнопкаПоУмолчанию  = (РасширенныйПоиск Или ВыборИсточникаОбеспечения) И РежимПодбора;
	Элементы.ФормаВыбратьВДокумент.КнопкаПоУмолчанию = (РасширенныйПоиск Или ВыборИсточникаОбеспечения)
		И Не РежимПодбора
		И Элементы.Список.РежимВыбора;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокИсточниковОбеспечения()
	
	Если ВыбраннаяНоменклатура.Пустая() И ОписаниеВыбраннойНоменклатуры <> Неопределено Тогда
		ПоискВПрайсЛистах.СписокИсточниковОбеспеченияПоАртикулуИПроизводителю(
			ОписаниеВыбраннойНоменклатуры.Артикул,
			ОписаниеВыбраннойНоменклатуры.АртикулДляПоиска,
			ОписаниеВыбраннойНоменклатуры.Производитель,
			ПараметрыПоискаИсточниковИЦен(),
			ИсточникиОбеспеченияНоменклатуры);
	ИначеЕсли НЕ ВыбраннаяНоменклатура.Пустая() Тогда
		ПоискВПрайсЛистах.СписокИсточниковОбеспеченияПоНоменклатуре(
			ВыбраннаяНоменклатура,
			ПараметрыПоискаИсточниковИЦен(),
			ИсточникиОбеспеченияНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПоискаИсточниковИЦен()
	
	Результат = Новый Структура;
	
	Результат.Вставить("СкладКомпании"           , ПараметрыСкладКомпании);
	Результат.Вставить("ПодразделениеКомпании"   , ПараметрыПодразделениеКомпании);
	Результат.Вставить("Контрагент"              , ПараметрыКонтрагент);
	Результат.Вставить("Валюта"                  , ПараметрыВалюта);
	Результат.Вставить("ДобавлятьСлужебныеСтроки", Истина);
	Результат.Вставить("РежимДерева"             , Истина);
	
	Если НЕ ПараметрыТипЦен.Пустая() Тогда
		Результат.Вставить("ТипЦен", ПараметрыТипЦен);
	Иначе
		Результат.Вставить("ТипЦен", ПравоПользователя("ОсновнойТипЦенПродажи"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуНоменклатуры()
	
	ТекущиеДанные = Элементы.РасширенныйПоискНоменклатуры.ТекущиеДанные;
	Если НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Номенклатура);
		ОткрытьФорму(
			"Справочник.Номенклатура.ФормаОбъекта",
			ПараметрыОткрытия,
			ЭтотОбъект,
			ЭтотОбъект,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	Иначе
		ДанныеЗаполнения = Новый Структура("Артикул,АртикулДляПоиска,Производитель,Наименование");
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ТекущиеДанные);
		ПараметрыОбратногоВызова = Новый Структура;
		ПараметрыОбратногоВызова.Вставить("ИдентификаторСтроки", Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока);
		ПараметрыОбратногоВызова.Вставить("ПродолжитьВыбор", Ложь);
		ОбратныйВызов = Новый ОписаниеОповещения(
			"Подключаемый_СозданиеНоменклатурыЗавершение",
			ЭтотОбъект,
			ПараметрыОбратногоВызова
		);
		ПоискВПрайсЛистахКлиент.НачатьСозданиеНоменклатуры(ДанныеЗаполнения, ЭтотОбъект, ОбратныйВызов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюИзБазовогоКаталога()
	
	Если ЭтотОбъект.ТекущийЭлементСписка = Неопределено ИЛИ ТипЗнч(ЭтотОбъект.ТекущийЭлементСписка)=Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущийАртикул       = Неопределено;
		ТекущийПроизводитель = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.ТекущийЭлементСписка) Тогда
		ТекущийАртикул       = ЭтотОбъект.ТекущийЭлементСписка.АртикулДляПоиска;
		ТекущийПроизводитель = ЭтотОбъект.ТекущийЭлементСписка.Производитель;
	Иначе
		Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры Тогда
			ТекущиеДанные = РасширенныйПоискНоменклатуры.НайтиПоИдентификатору(Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока);
		Иначе
			ТекущиеДанные = ИсточникиОбеспеченияНоменклатуры.НайтиПоИдентификатору(Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущаяСтрока);
		КонецЕсли;
		ТекущийАртикул       = ТекущиеДанные.АртикулДляПоиска;
		ТекущийПроизводитель = ТекущиеДанные.Производитель;
	КонецЕсли;
	
	ДокументHTML = ПрайсЛистыКонтрагентовВызовСервера.СформироватьПредставлениеИзБазовогоКаталога(ТекущийАртикул, ТекущийПроизводитель, НЕ ЗначениеЗаполнено(Справочники.Номенклатура.НайтиНоменклатуру(ТекущийАртикул, ТекущийПроизводитель,, Истина)), Ложь);
	
	Если НЕ БазовыйКаталог = ДокументHTML Тогда
		БазовыйКаталог = ДокументHTML;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДанныеПараметровЦены()
	
	СтруктураПараметров = Новый Структура;
	
	ПараметрыДокумента = Неопределено;
	Если НЕ ПустаяСтрока(АдресПараметровДокумента) Тогда
		ПараметрыДокумента = ПолучитьИзВременногоХранилища(АдресПараметровДокумента);
	Иначе
		ПараметрыДокумента = Новый Структура;
	КонецЕсли;
	
	// Найдем валюту для подстановки в документ "Изменение цен".
	Если НЕ ПараметрыВалюта.Пустая() Тогда
		СтруктураПараметров.Вставить("Валюта", ПараметрыВалюта);
	ИначеЕсли ПараметрыДокумента.Количество() > 0
		И НЕ ПараметрыДокумента.ПараметрыВалюта.Пустая() Тогда
		СтруктураПараметров.Вставить("Валюта", ПараметрыДокумента.ПараметрыВалюта);
	КонецЕсли;
	
	Если ПараметрыДокумента.Количество() > 0 Тогда
		АдресПараметровДокумента = ПоместитьВоВременноеХранилище(ПараметрыДокумента, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция СоздатьНоменклатуруАвтоматическиНаСервере(ПараметрыНоменклатуры)
	
	СтруктураНоменклатура =  Справочники.Номенклатура.СоздатьНоменклатуруПоПрайсЛисту(ПараметрыНоменклатуры);
	
	Если СтруктураНоменклатура.Свойство("ПрайсЛист") Тогда
		ДокументИзменениеЦен = СформироватьУстановкуЦеныНоменклатуры(
								СтруктураНоменклатура.ПрайсЛист,
								СтруктураНоменклатура.Номенклатура);
		Если ЗначениеЗаполнено(ДокументИзменениеЦен) Тогда
			СтруктураНоменклатура.Вставить("ДокументУстановкаЦен", ДокументИзменениеЦен);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураНоменклатура;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНоменклатуруАвтоматически(Параметр)
	
	ДанныеЗаполнения = Новый Структура("Артикул,АртикулДляПоиска,Производитель,Наименование");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Параметр.ПараметрыЗаполнения);
	ПараметрыОбратногоВызова = Новый Структура;
	ПараметрыОбратногоВызова.Вставить("ПутьКДанным", "РасширенныйПоискНоменклатуры");
	ПараметрыОбратногоВызова.Вставить("ИдентификаторСтроки", Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока);
	ПараметрыОбратногоВызова.Вставить("ПродолжитьВыбор", Ложь);
	Если Параметр.Свойство("ДопПараметры") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОбратногоВызова, Параметр.ДопПараметры);
		СтрокаНоменклатуры = ПолучитьЗначениеПараметраСтруктуры(Параметр.ДопПараметры, "ТекущаяСтрока", Неопределено);
		Если СтрокаНоменклатуры <> Неопределено Тогда
			ПараметрыОбратногоВызова.ИдентификаторСтроки = СтрокаНоменклатуры;
		КонецЕсли;
	КонецЕсли;
	ОбратныйВызов = Новый ОписаниеОповещения(
		"Подключаемый_СозданиеНоменклатурыЗавершение",
		ЭтотОбъект,
		ПараметрыОбратногоВызова
	);
	ПоискВПрайсЛистахКлиент.НачатьСозданиеНоменклатуры(ДанныеЗаполнения, ЭтотОбъект, ОбратныйВызов);
		
КонецПроцедуры

&НаСервере
Функция СформироватьУстановкуЦеныНоменклатуры(ПрайсЛист, Номенклатура)
	
	Если НЕ ПрайсЛист.ФормироватьЦеныНоменклатуры Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрукутраЗаполнения = СформироватьДанныеПараметровЦены();
	
	Если СтрукутраЗаполнения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Справочники.Номенклатура.УстановитьЦеныНоменклатурыПоПрайсЛисту(ПрайсЛист, Номенклатура, СтрукутраЗаполнения);
	
КонецФункции

&НаКлиенте
Процедура СформироватьОповещениеСозданииИзмененииЦен(ДокументОповещения)
	
	ВыводОповещения = Новый Структура;
	ВыводОповещения.Вставить("Использование", Истина);
	ВыводОповещения.Вставить("Заголовок",     НСтр("ru = 'Создан документ назначения цен:'"));
	ВыводОповещения.Вставить("Ссылка",        ПолучитьНавигационнуюСсылку(ДокументОповещения));
	ВыводОповещения.Вставить("Текст",         Строка(ДокументОповещения));
	ВыводОповещения.Вставить("Картинка",      БиблиотекаКартинок.Информация32);
	
	УправлениеДиалогомКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Новый Структура("ВыводОповещения", ВыводОповещения));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЦеныПоПрайсЛистамКонтрагентов()
	
	ЦеныПрайсЛистыКонтрагентов.Очистить();
	
	ОбработатьАктивизациюСтрокиСпискаНаСервере();
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаХарактеристики И ЗначениеЗаполнено(Элементы.Характеристики.ТекущаяСтрока) Тогда
		ТекущаяНоменклатура = ВыбраннаяНоменклатура;
	Иначе
		ТекущаяНоменклатура   = ЭтотОбъект.ТекущийЭлементСписка;
	КонецЕсли;
	
	// Не указана номенклатура.
	Если ТекущаяНоменклатура = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры
		И ТекущаяНоменклатура.Пустая() Тогда
		ТекущаяСтрокаНоменклатуры = РасширенныйПоискНоменклатуры.НайтиПоИдентификатору(Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока);
		ТекущаяНоменклатура       = ТекущаяСтрокаНоменклатуры.Артикул;
		ТекущийПроизводитель      = ТекущаяСтрокаНоменклатуры.Производитель;
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаИсточникиОбеспеченияНоменклатуры
		И ТекущаяНоменклатура.Пустая() Тогда
		ТекущаяСтрокаНоменклатуры = ИсточникиОбеспеченияНоменклатуры.НайтиПоИдентификатору(Элементы.ИсточникиОбеспеченияНоменклатуры.ТекущаяСтрока);
		Если ТекущаяСтрокаНоменклатуры = Неопределено
			ИЛИ ТекущаяСтрокаНоменклатуры.ЭтоГруппа
			ИЛИ НЕ ТекущаяСтрокаНоменклатуры.Номенклатура.Пустая() Тогда
			Возврат Новый Структура;
		КонецЕсли;
		ТекущаяНоменклатура       = ТекущаяСтрокаНоменклатуры.Артикул;
		ТекущийПроизводитель      = ТекущаяСтрокаНоменклатуры.Производитель;
	Иначе
		ТекущийПроизводитель = ТекущаяНоменклатура.Производитель;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура();
	ПараметрыЗадания.Вставить("Номенклатура",              ТекущаяНоменклатура);
	ПараметрыЗадания.Вставить("Производитель",             ТекущийПроизводитель);
	ПараметрыЗадания.Вставить("ПоискПоВнешнимПрайсЛистам", ИскатьВоВнешнихПрайсЛистахКонтрагентов);
	
	ВозможнаДальнейшаяЗагрузка = Справочники.Номенклатура.НачатьЗагрузкуЦенПрайсЛистов(ПараметрыЗадания,
																						ИдентификаторДлительнойОперации,
																						УникальныйИдентификатор,
																						АдресЦенПрайсЛистовКонтрагентов);
	
	Если ВозможнаДальнейшаяЗагрузка Тогда
		ЗакончитьЗагрузкуЦенПрайсЛистов();
	Иначе
		ПрайсЛистыКонтрагентовКлиентСервер.УстановитьРежимОжиданияТабличногоДокумента(Элементы.ТабличныйДокументОжидание,,
																					Нстр("ru = 'Выполняется загрузка цен номенклатуры из прайс-листов контрагентов. Подождите пожалуйста...'"));
		Возврат Новый Структура("ОжидатьЗагрузкиЦенПрайсЛистов", Истина);
	КонецЕсли;
	
	Возврат Новый Структура;
	
КонецФункции

&НаКлиенте
Процедура СформироватьЦеныПрайслистовКонтрагентов()
	
	Элементы.СтраницыЦеныПрайсЛистовКонтрагентов.ТекущаяСтраница = Элементы.СтраницаРежимОжидания;
	
	РезультатОбновления = ПолучитьЦеныПоПрайсЛистамКонтрагентов();
	
	Если ПолучитьЗначениеПараметраСтруктуры(РезультатОбновления, "ОжидатьЗагрузкиЦенПрайсЛистов") = Неопределено Тогда
		Элементы.СтраницыЦеныПрайсЛистовКонтрагентов.ТекущаяСтраница = Элементы.СтраницаЦеныПрайсЛистыКонтрагентов;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеЗагрузкиЦенИзПрайсЛистов", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеЗагрузкиЦенИзПрайсЛистов()
	
	Если ПрайсЛистыКонтрагентовВызовСервера.ЗаданиеВыполнено(ИдентификаторДлительнойОперации) Тогда
		ЗакончитьЗагрузкуЦенПрайсЛистов();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеЗагрузкиЦенИзПрайсЛистов", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьЗагрузкуЦенПрайсЛистов()
	
	Элементы.СтраницыЦеныПрайсЛистовКонтрагентов.ТекущаяСтраница = Элементы.СтраницаЦеныПрайсЛистыКонтрагентов;
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресЦенПрайсЛистовКонтрагентов) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЦен = ПолучитьИзВременногоХранилища(АдресЦенПрайсЛистовКонтрагентов);
	
	Для Каждого ТекущаяСтрока Из ТаблицаЦен Цикл
		ЗаполнитьЗначенияСвойств(ЦеныПрайсЛистыКонтрагентов.Добавить(), ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПросмотретьИзображениеНаСервере(Номенклатура)
	
	Если ЗначениеЗаполнено(Номенклатура.ФайлКартинки) Тогда
		Возврат Номенклатура.ФайлКартинки;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
		|ИЗ
		|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|ГДЕ
		|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
		
		Запрос.УстановитьПараметр("ВладелецФайла", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			ВыборкаДетальныеЗаписи.Следующий();	
			Возврат ВыборкаДетальныеЗаписи.Ссылка;		
		Иначе 
			Возврат Неопределено;
		КонецЕсли;		
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВладельцаХарактеристикиНоменклатуры(Номенклатура)
	
	ТипНоменклатуры = Номенклатура.ТипНоменклатуры;
	
	ИспользованиеХарактеристик = ТипНоменклатуры.ИспользованиеХарактеристик;
	
	Если ИспользованиеХарактеристик = 1 Тогда
		ВладелецХарактеристики = ТипНоменклатуры;
	ИначеЕсли ИспользованиеХарактеристик = 2 Тогда
		ВладелецХарактеристики = Номенклатура;
	Иначе
		ВладелецХарактеристики = Неопределено;
	КонецЕсли;
	
	Возврат ВладелецХарактеристики;
	
КонецФункции

&НаСервере
Функция ЭтоОбязательноМаркируемаяНоменклатура(Номенклатура)
	
	// Получим настройку
	ДанныеНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Номенклатура, 
		"ТипНоменклатуры, ТипНоменклатуры.ВедетсяМаркировка");
	
	МаркировкаНоменклатурыОбязательная = МаркировкаТоваровСервер.МаркировкаНоменклатурыОбязательная(
		ДанныеНастройки.ТипНоменклатуры,
		ДатаЗапретаПодбораНоменклатурыСМаркировкой
	);
	Если МаркировкаНоменклатурыОбязательная Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Запрещено добавлять номенклатуру ""%1"", ведется обязательный учет по маркировке.'"),
				СокрЛП(Номенклатура)
			)
		);
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(ДанныеНастройки.ТипНоменклатурыВедетсяМаркировка)
		И ДанныеНастройки.ТипНоменклатурыВедетсяМаркировка Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Для номенклатуры ""%1"" ведется учет по маркировке.'"),
				СокрЛП(Номенклатура)
			)
		);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборНоменклатурыПоПрименяемости()
	
	ОтборНоменклатурыПоПрименяемости = ПравоПользователя("ОтборНоменклатурыПоПрименяемости");
	
	Если ОтборНоменклатурыПоПрименяемости И Параметры.Свойство("ОтборНоменклатурыПоПрименяемости") Тогда
		
		ЭлементыОтбора = отбор.ПолучитьЭлементы();
		
		Для Каждого Элемент Из ЭлементыОтбора Цикл
			
			Если Элемент.Заголовок = "Модель" Тогда
				
				Элемент.Использование = Истина;
				
				Если ТипЗнч(Параметры.Модель) = Тип("СправочникСсылка.Модели") Тогда
					
					Элемент.ПравоеЗначение = Параметры.Модель;
					
				ИначеЕсли ТипЗнч(Параметры.Модель) = Тип("СправочникСсылка.Автомобили") Тогда
					
					Элемент.ПравоеЗначение = Параметры.Модель.Модель;
					
				ИначеЕсли ОбщегоНазначения.ЭтоДокумент(Параметры.Модель.Метаданные()) Тогда
					
					Элемент.ПравоеЗначение = ?(
						ЕстьРеквизит(Параметры.Модель, "Автомобиль"),
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Модель, "Автомобиль.Модель"),
						Справочники.Модели.ПустаяСсылка()
					);
					Элемент.Использование = ЗначениеЗаполнено(Элемент.ПравоеЗначение);
					
				Иначе
					
					Элемент.Использование = Ложь;
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеСпискомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "СозданиеНоменклатурыИзСписка"
		И ДополнительныеПараметры.Свойство("ДобавленнаяСсылка") Тогда
		
		ПутьКДанным = ?(ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ПутьКДанным") = Неопределено, "РасширенныйПоискНоменклатуры", ДополнительныеПараметры.ПутьКДанным);
		ТекущаяСтрока = ?(ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ТекущаяСтрока") = Неопределено, Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока, ДополнительныеПараметры.ТекущаяСтрока);
		
		ТекущиеДанные = ЭтотОбъект[ПутьКДанным].НайтиПоИдентификатору(ТекущаяСтрока);
		ТекущиеДанные.Номенклатура = ДополнительныеПараметры.ДобавленнаяСсылка;
		
		Если ЕстьРеквизитНаКлиенте(ТекущиеДанные, "ЦветТекста") Тогда
			ТипПоставщика = ТипЗнч(ТекущиеДанные.Поставщик);
			
			Если ТипПоставщика = Тип("СправочникСсылка.СкладыКомпании") Тогда
				
				ТекущиеДанные.ЦветТекста = 2;
				
			ИначеЕсли ТипПоставщика = Тип("ДокументСсылка.ЗаказПоставщику")
				ИЛИ ТипПоставщика = Тип("СправочникСсылка.ПодразделенияКомпании")
				ИЛИ ТипПоставщика = Тип("СправочникСсылка.Контрагенты") Тогда
				
				ТекущиеДанные.ЦветТекста = 3;
				
			Иначе
				
				ТекущиеДанные.ЦветТекста = 0;
				
			КонецЕсли;
		Иначе
			ТекущиеДанные.Источник = 0;
		КонецЕсли;
		
		Элементы[ПутьКДанным].Обновить();
		Элементы[ПутьКДанным].ТекущаяСтрока = ТекущаяСтрока;
		
		// Обновим информацию о базовом каталоге
		Если Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница = Элементы.СтраницаОписание
			И ПереключательОписание = 1 Тогда
			
			ЗаполнитьИнформациюИзБазовогоКаталога();
			
		КонецЕсли;
		
		Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ПродолжитьВыбор", Ложь) Тогда
			#Если Не ВебКлиент Тогда
				Выполнить(ПутьКДанным + "Выбор();");
			#КонецЕсли	
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ПрайсЛист")
			И НЕ ДополнительныеПараметры.ДобавленнаяСсылка.Пустая() Тогда
			
			ДокументИзмененияЦен = СформироватьУстановкуЦеныНоменклатуры(ДополнительныеПараметры.ПрайсЛист, ДополнительныеПараметры.ДобавленнаяСсылка);
			Если ЗначениеЗаполнено(ДокументИзмененияЦен) Тогда
				СформироватьОповещениеСозданииИзмененииЦен(ДокументИзмененияЦен);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если НЕ УправлениеСпискомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	УправлениеСпискомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Цвет текста
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Цены.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Цены.Рассчитывается");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	
	// Цвет текста
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦеныКонтрагентов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЦеныКонтрагентов.Рассчитывается");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	
	// Цвет текста
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасширенныйПоискНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РасширенныйПоискНоменклатуры.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	// Установить шрифт
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсточникиОбеспеченияНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИсточникиОбеспеченияНоменклатуры.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,, 10, Истина));
	
	// Цвет текста
	Раскраска = Новый Соответствие();
	Раскраска.Вставить(1, Новый Цвет(174,175,175));
	Раскраска.Вставить(2, Новый Цвет(0, 175, 0));
	Раскраска.Вставить(3, Новый Цвет(0, 0, 175));
	
	Для Каждого Строка Из Раскраска Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсточникиОбеспеченияНоменклатуры.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИсточникиОбеспеченияНоменклатуры.ЦветТекста");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Строка.Ключ;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Строка.Значение);
	
	КонецЦикла;
	
	// Установить текст
	ТекстОформления = Новый Соответствие();
	ТекстОформления.Вставить(0, НСтр("ru = 'Номенклатура'"));
	ТекстОформления.Вставить(1, НСтр("ru = 'Аналоги'"));
	ТекстОформления.Вставить(2, НСтр("ru = 'Замены'"));
	ТекстОформления.Вставить(3, НСтр("ru = 'Прайс-листы контрагентов'"));
	ТекстОформления.Вставить(4, НСтр("ru = 'Внешние источники данных'"));
	
	Для Каждого Строка Из ТекстОформления Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасширеннныйПоискНоменклатурыИсточник.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РасширеннныйПоискНоменклатуры.Источник");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Строка.Ключ;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Строка.Значение);
	
	КонецЦикла;

	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсточникиОбеспеченияНоменклатурыНаправлениеПоставки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИсточникиОбеспеченияНоменклатуры.НаправлениеПоставки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Цвет текста
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаХарактеристикаНоменклатуры.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Корзина.ХарактеристикаНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Корзина.ВладелецХарактеристики");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без характеристик>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Цвет текста
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменыСтарые.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЗаменыСтарые.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128,128,128));
	
	// Цвет текста
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменыНовые.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЗаменыНовые.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128,128,128));
	
	// Цвет текста
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменыСтарые.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЗаменыСтарые.Количество");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0,128,0));
	
	// Цвет текста
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменыНовые.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЗаменыНовые.Количество");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0,128,0));
	
	// Оформление аналогов
	// Цвет текста аналогов без наименования
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Аналоги.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Аналоги.Наименование");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128, 0, 0));
	
	// Цвет текста заполненных аналогов
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Аналоги.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Аналоги.Наименование");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0, 128, 0));
	// Конец Оформление аналогов
	
	// Видимость строк дерева отбора
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отбор.Скрывать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Для Каждого КолонкаДерева Из Элементы.Отбор.ПодчиненныеЭлементы Цикл
	
		ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаДерева.Имя);
	
	КонецЦикла;
	
	Для Каждого КолонкаДерева Из Элементы.ГруппаФлагПоле.ПодчиненныеЭлементы Цикл
	
		ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаДерева.Имя);
	
	КонецЦикла;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьДанныеНаСтраницеКонтактнойИнформации()
	
	ПолучитьКартинкуПоУмолчанию();
	
	Если ТекущийСписок(ЭтотОбъект).ТекущаяСтрока <> Неопределено Тогда
		РасширеннаяИнформацияВызовСервера.СписокПриАктивизацииСтроки(ЭтотОбъект, ЭтотОбъект["ТекущийЭлементСписка"]);
	Иначе
		РасширеннаяИнформация = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийСписок(Форма)
	
	Если Форма.РасширенныйПоиск Тогда
		Возврат Форма.Элементы.РасширенныйПоискНоменклатуры;
	КонецЕсли;
	
	Возврат Форма.Элементы.Список;
	
КонецФункции

&НаСервере
Процедура УстановитьВладельцаДополнительныхОтборов(
		НовыйОтбор,
		ДоступноеПолеОтбораКомпоновкиДанныхСсылки,
		СтроковоеПредставлениеПоля,
		ДополнительныеРеквизитыНоменклатуры,
		ДополнительныеСведенияНоменклатуры)
	
	ТипДополнительныеЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов");
	Если ДоступноеПолеОтбораКомпоновкиДанныхСсылки.Тип <> ТипДополнительныеЗначения Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеСвойства = Сред(СтроковоеПредставлениеПоля, 2, СтрДлина(СтроковоеПредставлениеПоля) - 2);
	СтруктураПоиска = Новый Структура("Наименование", НаименованиеСвойства);
	ДопСвойства = ДополнительныеРеквизитыНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если ДопСвойства.Количество() = 0 Тогда
		ДопСвойства = ДополнительныеСведенияНоменклатуры.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Если ДопСвойства.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	НовыйОтбор.Владелец = ДопСвойства[0].Свойство;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоВладельцу()
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрСвязи(
		ЗначениеЗаполнено(ТекущиеДанные.Владелец),
		"Отбор.Владелец",
		"Элементы.Отбор.ТекущиеДанные.Владелец");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрСвязи(Добавление, ИмяПараметраСвязи, ЗначениеПараметраСвязи)
	
	НовыеСвязи = Новый Массив;
	
	Если Добавление Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИмяПараметраСвязи, ЗначениеПараметраСвязи));
	КонецЕсли;
	
	Для Каждого ТекущийПараметр Из Элементы.ОтборПравоеЗначение.СвязиПараметровВыбора Цикл
		Если ТекущийПараметр.Имя = ИмяПараметраСвязи Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеСвязи.Добавить(ТекущийПараметр);
	КонецЦикла;
	
	Элементы.ОтборПравоеЗначение.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаОтбора()
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступноеПоле = Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекущиеДанные.ЛевоеЗначение);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СписокВыбора", ТекущиеДанные.ПравоеЗначение);
	СтруктураПараметров.Вставить("ТипЗначения", ДоступноеПоле.ТипЗначения);
	СтруктураПараметров.Вставить("ДоступныеЗначения", ПолучитьСписокВыбораОтбораДопРеквизитов(ТекущиеДанные.Владелец));
	СтруктураПараметров.Вставить("ТолькоГруппы", Ложь);
	
	ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
	ОткрытьФорму(
		"ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка",
		СтруктураПараметров,
		ЭтотОбъект,,,,
		ОписаниеОповещенияВыбораЗначения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораОтбораДопРеквизитов(ВладелецСвойств)
	
	СписокВыбораЗначений = Новый СписокЗначений;
	СписокВыбораЗначений.ЗагрузитьЗначения(УправлениеСвойствами.ПолучитьСписокЗначенийСвойств(ВладелецСвойств));
	Возврат СписокВыбораЗначений;
	
КонецФункции

&НаКлиенте
Процедура КорзинаСоздатьЗаказВнутренний(Команда)
	
	ИмяФормыДляСоздания = "Документ.ЗаказВнутренний.ФормаОбъекта";
	ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСоздатьЗаказПокупателя(Команда)
	
	ИмяФормыДляСоздания = "Документ.ЗаказПокупателя.ФормаОбъекта";
	ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСоздатьЗаказПоставщику(Команда)
	
	ИмяФормыДляСоздания = "Документ.ЗаказПоставщику.ФормаОбъекта";
	ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСоздатьЗаявкаНаРемонт(Команда)
	
	ИмяФормыДляСоздания = "Документ.ЗаявкаНаРемонт.ФормаОбъекта";
	ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСоздатьЗаказНаряд(Команда)
	
	ИмяФормыДляСоздания = "Документ.ЗаказНаряд.ФормаОбъекта";
	ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСоздатьРеализацияТоваров(Команда)
	
	ИмяФормыДляСоздания = "Документ.РеализацияТоваров.ФормаОбъекта";
	ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСоздатьПеремещениеТоваров(Команда)
	
	ИмяФормыДляСоздания = "Документ.ПеремещениеТоваров.ФормаОбъекта";
	ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСоздатьСписаниеТоваров(Команда)
	
	ИмяФормыДляСоздания = "Документ.СписаниеТоваров.ФормаОбъекта";
	ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСоздатьСчетНаОплату(Команда)
	
	ИмяФормыДляСоздания = "Документ.СчетНаОплату.ФормаОбъекта";
	ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСоздатьСчетОтПоставщика(Команда)
	
	ИмяФормыДляСоздания = "Документ.СчетОтПоставщика.ФормаОбъекта";
	ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияНаОснованииКорзины(ИмяФормыДляСоздания);
	
	Если Корзина.Количество() > 0 Тогда
		МассивСтрок = Новый Массив();
		Для Каждого Строка Из Корзина Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Номенклатура", 			   Строка.Номенклатура);
			СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
			СтруктураСтроки.Вставить("Количество", 				   Строка.Количество);
			СтруктураСтроки.Вставить("ЕдиницаИзмерения", 		   Строка.ЕдиницаИзмерения);
			СтруктураСтроки.Вставить("Коэффициент", 			   Строка.Коэффициент);

			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
		 
		ПараметрыЗаполнения = Новый Структура;	
		ПараметрыЗаполнения.Вставить("Товары",				МассивСтрок);
		ПараметрыЗаполнения.Вставить("ЗаполнениеИзКорзины", Истина);
		
		ПараметрыФормы = Новый Структура; 
		ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
		
		ОткрытьФорму(ИмяФормыДляСоздания, ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Корзина пуста.' ");
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяТипаДокумента(ДокументПартии)
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(ДокументПартии)).Имя;
	
КонецФункции

#Область ОбработчикиАльфаАвто

#Область ПечатьРеестра

&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыПечатиРеестра(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыПечатиРеестраНаСервере(ПараметрыВыполнения, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыПечатиРеестраНаСервере(ПараметрыВыполнения, ДополнительныеПараметры)
	
	ПечатьРеестраДокументов.ПолучитьНастройкиСКД(ЭтотОбъект.Элементы.Список, ПараметрыВыполнения);	
	
КонецПроцедуры                    

#КонецОбласти

#КонецОбласти

#Область РежимыПоиска

&НаСервере
Процедура УстановитьРежимПоиска(НовыйРежимПоиска)
	
	РежимыПоиска = Перечисления.РежимыПоиска;
	
	Если НовыйРежимПоиска <> РежимыПоиска.ЕдинаяСтрокаПоиска
		И НовыйРежимПоиска <> РежимыПоиска.БыстрыеОтборы
		И НовыйРежимПоиска <> РежимыПоиска.РасширенныйПоиск Тогда
		
		РежимПоиска = РежимыПоиска.СтандартныйПоиск;
		
	Иначе
		
		РежимПоиска = НовыйРежимПоиска;
		
	КонецЕсли;
	
	ВывестиРежимПоиска();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРежимПоиска()
	
	РежимыПоиска = Перечисления.РежимыПоиска;
	
	Если РежимПоиска = РежимыПоиска.ЕдинаяСтрокаПоиска Тогда
		
		ВывестиПоискПоЕдинойСтрокеНаСервере(Истина);
		
	ИначеЕсли РежимПоиска = РежимыПоиска.БыстрыеОтборы Тогда
		
		ВывестиБыстрыеОтборыНаСервере(Истина);
		
	ИначеЕсли РежимПоиска = РежимыПоиска.РасширенныйПоиск Тогда
		
		ВывестиРасширенныйПоискНаСервере(Истина);
		
	Иначе
		
		ВывестиСтандартныйПоискНаСервере(Истина);
		
	КонецЕсли;
	
	ИзменитьОтображениеПереключателейРежимовПоиска();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтандартныйПоискНаСервере(Вывести)
	
	Если Вывести Тогда
		
		СкрытьЭлементыНеактивныхРежимовПоиска(РежимПоиска);
		ЗаполнитьСписокВыбораРежимаВыводаОстатков(Элементы.КорзинаВключить.Пометка);
		Элементы.ТочныйПоиск.Видимость = Ложь;
		
	КонецЕсли;
	
	// Выводим строку стандартного поиска Списка
	Элементы.СтрокаПоискаСписка.Видимость = Вывести;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоискПоЕдинойСтрокеНаСервере(Вывести)
	
	Если Вывести Тогда
		
		СкрытьЭлементыНеактивныхРежимовПоиска(РежимПоиска);
		Элементы.ПоляОтборов.Видимость = Истина;
		ЗаполнитьСписокВыбораРежимаВыводаОстатков(Элементы.КорзинаВключить.Пометка);
		Элементы.ТочныйПоиск.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБыстрыеОтборыНаСервере(Вывести)
	
	Если Вывести Тогда
		
		СкрытьЭлементыНеактивныхРежимовПоиска(РежимПоиска);
		ЗаполнитьСписокВыбораРежимаВыводаОстатков(Элементы.КорзинаВключить.Пометка);
		Элементы.ТочныйПоиск.Видимость = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СУчетомАналогов",
			"Доступность",
			ЗначениеЗаполнено(ОтборПоПрименяемости)
		);
		
	КонецЕсли;
		
	ПриСменеРежимаБыстрыеОтборы();
	
	Если Вывести Тогда
		
		ОбновитьНастройкиОтбора();
		
	КонецЕсли;
	
	// Выводим группу быстрых отборов.
	Элементы.БыстрыеОтборы.Видимость = Вывести;
	Элементы.НастройкиБыстрыеОтборы.Видимость = Вывести;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРасширенныйПоискНаСервере(Вывести)
	
	РасширенныйПоиск = Вывести;
	
	Если Вывести Тогда
		
		// Выводим элементы расширенного поиска
		СкрытьЭлементыНеактивныхРежимовПоиска(РежимПоиска);
		ЗаполнитьСписокВыбораРежимаВыводаОстатков(Элементы.КорзинаВключить.Пометка);
		Элементы.ТочныйПоиск.Видимость = Истина;
		
	КонецЕсли;
	
	Если Вывести Тогда
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаРасширенныйПоискНоменклатуры;
		Элементы.ФильтрАртикул.ПодсказкаВвода = НСтр("ru = 'Артикул, наименование'");
		Элементы.ФильтрАртикул.Подсказка = НСтр("ru = 'Артикул, наименование'");
	Иначе
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаСписок;
		Элементы.ФильтрАртикул.ПодсказкаВвода = НСтр("ru = 'Артикул, наименование, код ...'");
		Элементы.ФильтрАртикул.Подсказка = НСтр("ru = 'Артикул, наименование, код ...'");
	КонецЕсли;
	
	Элементы.ФильтрПроизводитель.Видимость = Вывести;
	Элементы.ПодменюРежимЛевойПанели.Видимость = НЕ Вывести;
	Элементы.ОсновныеДействия.Видимость = НЕ Вывести;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаСкопировать",
		"Видимость",
		Не РасширенныйПоиск
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоказатьСкрытьДерево",
		"Видимость",
		Не РасширенныйПоиск
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаВыбрать",
		"Видимость",
		Не РасширенныйПоиск
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаСоздать",
		"Видимость",
		Не РасширенныйПоиск
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаСоздатьГруппу",
		"Видимость",
		Не РасширенныйПоиск
	);
		
	Элементы.ОсновныеДействияФормыРасширенныйПоиск.Видимость = РасширенныйПоиск;
	Элементы.ФормаЗавершитьПодбор.КнопкаПоУмолчанию  = РасширенныйПоиск И РежимПодбора;
	Элементы.ФормаВыбратьВДокумент.КнопкаПоУмолчанию = РасширенныйПоиск И Не РежимПодбора И Элементы.Список.РежимВыбора;
	
	Если РасширенныйПоиск Тогда
		
		ИзменитьРежимЛевойПанелиНаСервере(Неопределено);
		
	Иначе
		
		ИзменитьРежимЛевойПанелиНаСервере(ТекущийРежимЛевойПанели);
		
	КонецЕсли;
	
	Элементы.ПоляОтборов.Видимость = Вывести;
	Элементы.ИскатьВоВнешнихПрайсЛистахКонтрагентов.Видимость = Вывести;
	Элементы.ПараметрыЦены.Видимость = НЕ Вывести;
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = НЕ Вывести;
	
	Элементы.ГруппаЛегендаМетки.Видимость = НЕ Вывести;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЭлементыНеактивныхРежимовПоиска(Знач РежимПоиска)
	
	РежимыПоиска = Перечисления.РежимыПоиска;
	
	Если РежимПоиска = РежимыПоиска.СтандартныйПоиск Тогда
		
		ВывестиПоискПоЕдинойСтрокеНаСервере(Ложь);
		ВывестиБыстрыеОтборыНаСервере(Ложь);
		ВывестиРасширенныйПоискНаСервере(Ложь);
		
	ИначеЕсли РежимПоиска = РежимыПоиска.ЕдинаяСтрокаПоиска Тогда
		
		ВывестиСтандартныйПоискНаСервере(Ложь);
		ВывестиБыстрыеОтборыНаСервере(Ложь);
		ВывестиРасширенныйПоискНаСервере(Ложь);
		
	ИначеЕсли РежимПоиска = РежимыПоиска.БыстрыеОтборы Тогда
		
		ВывестиСтандартныйПоискНаСервере(Ложь);
		ВывестиПоискПоЕдинойСтрокеНаСервере(Ложь);
		ВывестиРасширенныйПоискНаСервере(Ложь);
		
	ИначеЕсли РежимПоиска = РежимыПоиска.РасширенныйПоиск Тогда
		
		ВывестиСтандартныйПоискНаСервере(Ложь);
		ВывестиБыстрыеОтборыНаСервере(Ложь);
		ВывестиПоискПоЕдинойСтрокеНаСервере(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораРежимаВыводаОстатков(КорзинаАктивна)

	// Произведем перезаливку возможных вариантов отображения колонки остатков
	РежимыВыводаОстатков = Элементы.ПараметрыРежимВыводаОстатков.СписокВыбора;
	РежимыВыводаОстатков.Очистить();
	
	Если КорзинаАктивна Тогда
		
		Если НЕ РежимПоиска = Перечисления.РежимыПоиска.РасширенныйПоиск Тогда
		
			РежимыВыводаОстатков.Добавить(0, НСтр("ru = 'Не отображать'"));
			РежимыВыводаОстатков.Добавить(1, НСтр("ru = 'В списке'"));
			РежимыВыводаОстатков.Добавить(2, НСтр("ru = 'В корзине'"));
			РежимыВыводаОстатков.Добавить(3, НСтр("ru = 'В корзине и списке'"));
			
		Иначе
			
			РежимыВыводаОстатков.Добавить(0, НСтр("ru = 'Не отображать'"));
			РежимыВыводаОстатков.Добавить(2, НСтр("ru = 'В корзине'"));
		
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыРежимВыводаОстатков = 2 Тогда
			ПараметрыРежимВыводаОстатков = 0;
			УстановитьПараметрыВыводаКолонкиОстатокНаСкладе();
			
		ИначеЕсли ПараметрыРежимВыводаОстатков = 3 Тогда
			ПараметрыРежимВыводаОстатков = 1;
			УстановитьПараметрыВыводаКолонкиОстатокНаСкладе();
		КонецЕсли;
		
		РежимыВыводаОстатков.Добавить(0, НСтр("ru = 'Не отображать'"));
		
		Если НЕ РежимПоиска = Перечисления.РежимыПоиска.РасширенныйПоиск Тогда
		
			РежимыВыводаОстатков.Добавить(1, НСтр("ru = 'В списке'"));
		
		КонецЕсли
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеПереключателейРежимовПоиска()
	
	РежимыПоиска = Перечисления.РежимыПоиска;
	
	Элементы.ФормаВывестиСтандартныйПоиск.Пометка    = РежимПоиска = РежимыПоиска.СтандартныйПоиск;
	Элементы.ФормаВывестиПоискПоЕдинойСтроке.Пометка = РежимПоиска = РежимыПоиска.ЕдинаяСтрокаПоиска;
	Элементы.ФормаВывестиБыстрыеОтборы.Пометка       = РежимПоиска = РежимыПоиска.БыстрыеОтборы;
	Элементы.ФормаВывестиРасширенныйПоиск.Пометка    = РежимПоиска = РежимыПоиска.РасширенныйПоиск;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОтборыСтарогоРежимаПоиска(СтарыйРежимПоиска)
	
	РежимыПоиска = Перечисления.РежимыПоиска;
	
	Если СтарыйРежимПоиска = РежимыПоиска.ЕдинаяСтрокаПоиска Тогда
		
		ФильтрАртикул = "";
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Ссылка", "Ссылка");
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Наименование"); 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "НаименованиеПолное"); 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Код"); 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Артикул"); 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "АртикулДляПоиска"); 
		
		Список.ТекстЗапроса = СтандартныйТекстЗапросСпискаНоменклатуры();
		
	ИначеЕсли СтарыйРежимПоиска = РежимыПоиска.БыстрыеОтборы Тогда
		
		ОтборПоНаименованию  = "";
		ОтборПоАртикулу      = "";
		ОтборПоПроизводителю = Справочники.Производители.ПустаяСсылка();
		ОтборПоПрименяемости = Справочники.Модели.ПустаяСсылка();
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Ссылка", "Ссылка");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Наименование");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Артикул");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Производитель");
		
	ИначеЕсли СтарыйРежимПоиска = РежимыПоиска.РасширенныйПоиск Тогда
		
		ФильтрАртикул = "";
		РасширенныйПоискНоменклатуры.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокБыстрыеОтборы();
	
	БыстрыеОтборы.Добавить("Наименование" , "ОтборПоНаименованию");
	БыстрыеОтборы.Добавить("Артикул"      , "ОтборПоАртикулу");
	БыстрыеОтборы.Добавить("Производитель", "ОтборПоПроизводителю");
	БыстрыеОтборы.Добавить("Модель"       , "ОтборПоПрименяемости");
	
КонецПроцедуры

&НаСервере
Процедура ПриСменеРежимаБыстрыеОтборы()

	ИзменитьИспользованиеЭлементовДереваОтборов(РежимПоиска = Перечисления.РежимыПоиска.БыстрыеОтборы);

КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЭлементовДереваОтборов(Скрывать)
	
	ЭлементыОтбора = Отбор.ПолучитьЭлементы();
	
	ПерваяСтрокаОпределена = Ложь;
	ПерваяСтрокаНеВОтборе = Неопределено;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если БыстрыеОтборы.НайтиПоЗначению(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
			
			Если Скрывать Тогда
				
				ЭлементОтбора.Использование = Ложь;
				
			КонецЕсли;
			
			ЭлементОтбора.Скрывать = Скрывать;
			
		ИначеЕсли НЕ ПерваяСтрокаОпределена Тогда
			
			ПерваяСтрокаНеВОтборе = ЭлементОтбора;
			ПерваяСтрокаОпределена = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Установим текущую строку на левую панель отборов
	Если ПерваяСтрокаНеВОтборе <> Неопределено Тогда
		
		ИдентификаторСтроки = ЭлементыОтбора.Индекс(ПерваяСтрокаНеВОтборе);
		Элементы.Отбор.ТекущаяСтрока = ИдентификаторСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПравуюПанельПоискаНаСервере()
	
	ВидимостьСписка = Элементы.ПанельПоиска.Видимость;
	Элементы.ПанельПоиска.Видимость = НЕ ВидимостьСписка;
	УстановитьКартинкуДекорацияПоказатьСкрытьПравуюПанельПоиска()
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуДекорацияПоказатьСкрытьПравуюПанельПоиска()
	
	ВидимостьСписка = Элементы.ПанельПоиска.Видимость;
	
	Если ВидимостьСписка Тогда
		
		Элементы.ДекорацияПоказатьСкрытьПравуюПанельПоиска.Картинка = БиблиотекаКартинок.СтрелкаВправо;
		
	Иначе
		
		Элементы.ДекорацияПоказатьСкрытьПравуюПанельПоиска.Картинка = БиблиотекаКартинок.СтрелкаВлево;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МеньшеТрехСимволовВСтроке(Знач ПодстрокаПоиска)
	
	ПодстрокаПоиска = СокрЛП(ПодстрокаПоиска);
	
	Если СтрДлина(ПодстрокаПоиска) < 3 Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтандартныйТекстЗапросСпискаНоменклатуры()

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникНоменклатура.Ссылка КАК Ссылка,
		|	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникНоменклатура.Родитель КАК Родитель,
		|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	СправочникНоменклатура.Код КАК Код,
		|	СправочникНоменклатура.Наименование КАК Наименование,
		|	СправочникНоменклатура.НаименованиеИностранное КАК НаименованиеИностранное,
		|	СправочникНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	СправочникНоменклатура.Артикул КАК Артикул,
		|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СправочникНоменклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	СправочникНоменклатура.ОсновнаяЕдиницаИзмерения КАК ОсновнаяЕдиницаИзмерения,
		|	СправочникНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	СправочникНоменклатура.ВалютаУчета КАК ВалютаУчета,
		|	СправочникНоменклатура.СпособРаспределенияДопРасходов КАК СпособРаспределенияДопРасходов,
		|	СправочникНоменклатура.СтатьяДопРасходов КАК СтатьяДопРасходов,
		|	СправочникНоменклатура.ГТД КАК ГТД,
		|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
		|	СправочникНоменклатура.СрокХраненияТовара КАК СрокХраненияТовара,
		|	СправочникНоменклатура.ПроцентНаценки КАК ПроцентНаценки,
		|	СправочникНоменклатура.Производитель КАК Производитель,
		|	СправочникНоменклатура.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
		|	СправочникНоменклатура.КратностьПоставок КАК КратностьПоставок,
		|	СправочникНоменклатура.СнятаСПроизводства КАК СнятаСПроизводства,
		|	СправочникНоменклатура.ЗапретПродажи КАК ЗапретПродажи,
		|	СправочникНоменклатура.ЗапретЗакупки КАК ЗапретЗакупки,
		|	СправочникНоменклатура.Автор КАК Автор,
		|	СправочникНоменклатура.ДатаСоздания КАК ДатаСоздания,
		|	СправочникНоменклатура.Комментарий КАК Комментарий,
		|	СправочникНоменклатура.Предопределенный КАК Предопределенный,
		|	СправочникНоменклатура.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
		|			ТОГДА СправочникНоменклатура.ТипНоменклатуры
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2
		|			ТОГДА СправочникНоменклатура.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВладелецХарактеристики,
		|	ВЫБОР
		|		КОГДА &ВыводитьОбщийОстаток
		|			ТОГДА ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0)
		|	КОНЕЦ КАК Остаток,
		|	ВЫБОР
		|		КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
		|			ТОГДА 1
		|		КОГДА НаличиеФайлов.ЕстьФайлы
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЕстьФайлы,
		|	СправочникНоменклатура.ДополнительныеРеквизиты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Свойство КАК Свойство,
		|		Значение КАК Значение,
		|		ТекстоваяСтрока КАК ТекстоваяСтрока
		|	) КАК ДополнительныеРеквизиты,
		|	0 КАК Метка1,
		|	0 КАК Метка2,
		|	0 КАК Метка3,
		|	НЕОПРЕДЕЛЕНО КАК Ячейка,
		|	0 КАК Цена
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, СкладКомпании В (&СкладыКомпании)) КАК ОстаткиТоваровКомпанииОстатки
		|		ПО СправочникНоменклатура.Ссылка = ОстаткиТоваровКомпанииОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|{ГДЕ
		|	СправочникНоменклатура.Ссылка.*}";
	
	Возврат ТекстЗапроса;

КонецФункции

&НаКлиенте
Процедура ТочныйПоискПриИзмененииНаКлиенте()

	ЗапрещеноМенятьТочныйПоиск = Ложь;
	
	ТекстСообщения = НСтр("ru = 'Необходимо ввести не менее трех символов для поиска.'");
	СообщенияПользователю = Новый Массив;
	
	Если РежимПоиска = ПредопределенноеЗначение("Перечисление.РежимыПоиска.БыстрыеОтборы") Тогда
		
		Если НЕ ПустаяСтрока(ОтборПоНаименованию)
			И МеньшеТрехСимволовВСтроке(ОтборПоНаименованию) Тогда
			
			ЗапрещеноМенятьТочныйПоиск = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Поле = "ОтборПоНаименованию";
			Сообщение.УстановитьДанные(ЭтаФорма);
			
			СообщенияПользователю.Добавить(Сообщение);
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОтборПоАртикулу)
			И МеньшеТрехСимволовВСтроке(ОтборПоАртикулу) Тогда
			
			ЗапрещеноМенятьТочныйПоиск = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Поле = "ОтборПоАртикулу";
			
			СообщенияПользователю.Добавить(Сообщение);
			
		КонецЕсли;
		
		Если НЕ ЗапрещеноМенятьТочныйПоиск Тогда
			
			ОтборПоНаименованиюПриИзменении(Неопределено);
			ОтборПоАртикулуПриИзменении(Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли РежимПоиска = ПредопределенноеЗначение("Перечисление.РежимыПоиска.ЕдинаяСтрокаПоиска")
		ИЛИ РежимПоиска = ПредопределенноеЗначение("Перечисление.РежимыПоиска.РасширенныйПоиск") Тогда
		
		Если НЕ ПустаяСтрока(ФильтрАртикул)
			И МеньшеТрехСимволовВСтроке(ФильтрАртикул) Тогда
			
			ЗапрещеноМенятьТочныйПоиск = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Поле = "ФильтрАртикул";
			Сообщение.УстановитьДанные(ЭтаФорма);
			
			СообщенияПользователю.Добавить(Сообщение);
			
		Иначе
			
			ФильтрАртикулПриИзменении(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапрещеноМенятьТочныйПоиск Тогда
		
		ТочныйПоиск = НЕ ТочныйПоиск;
		ОчиститьСообщения();
		
		Для Каждого Сообщение Из СообщенияПользователю Цикл
			
			Сообщение.Сообщить();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПрименяемостиНаСписокНаСервере()
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НоменклатураПрименяемость.Номенклатура КАК Номенклатура,
		|	НоменклатураПрименяемость.Номенклатура.АртикулДляПоиска КАК НоменклатураАртикулДляПоиска,
		|	НоменклатураПрименяемость.Номенклатура.Производитель КАК НоменклатураПроизводитель
		|ПОМЕСТИТЬ ВТ_НоменклатураПоПрименяемости
		|ИЗ
		|	РегистрСведений.НоменклатураПрименяемость КАК НоменклатураПрименяемость
		|ГДЕ
		|	НоменклатураПрименяемость.Модель = &Модель";
	
	Запрос.УстановитьПараметр("Модель", ОтборПоПрименяемости);
	РезузльтатЗапроса = Запрос.Выполнить();
	
	Если СУчетомАналогов Тогда
		
		ЗапросСУчетомАналогов = Новый Запрос;
		ЗапросСУчетомАналогов.Текст = 
			"ВЫБРАТЬ
			|	НоменклатураПоПрименяемости.Номенклатура КАК Номенклатура,
			|	НоменклатураПоПрименяемости.НоменклатураАртикулДляПоиска КАК АртикулДляПоиска,
			|	НоменклатураПоПрименяемости.НоменклатураПроизводитель КАК Производитель
			|ПОМЕСТИТЬ ТаблицаЗаменяемоеАртикул
			|ИЗ
			|	ВТ_НоменклатураПоПрименяемости КАК НоменклатураПоПрименяемости
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СправочникНоменклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ГДЕ
			|	((СправочникНоменклатура.АртикулДляПоиска, СправочникНоменклатура.Производитель) В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					Т1.АртикулДляПоиска,
			|					Т1.Производитель
			|				ИЗ
			|					РегистрСведений.ГруппыАналогов КАК Т1
			|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыАналогов КАК Т2
			|						ПО
			|							Т1.ИдентификаторГруппы = Т2.ИдентификаторГруппы
			|				ГДЕ
			|					(Т2.АртикулДляПоиска, Т2.Производитель) В
			|						(ВЫБРАТЬ
			|							ТаблицаЗаменяемоеАртикул.АртикулДляПоиска,
			|							ТаблицаЗаменяемоеАртикул.Производитель
			|						ИЗ
			|							ТаблицаЗаменяемоеАртикул))
			|			ИЛИ СправочникНоменклатура.Ссылка В
			|				(ВЫБРАТЬ
			|					ТаблицаЗаменяемоеАртикул.Номенклатура КАК Номенклатура
			|				ИЗ
			|					ТаблицаЗаменяемоеАртикул КАК ТаблицаЗаменяемоеАртикул))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаЗаменяемоеАртикул";
		
		ЗапросСУчетомАналогов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		НоменклатураСОтбором = ЗапросСУчетомАналогов.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
		
	Иначе
		
		НоменклатураСОтбором = Запрос.МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().Выгрузить().ВыгрузитьКолонку("Номенклатура");
		
	КонецЕсли;
	
	// Уничтожение временной таблицы
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		| УНИЧТОЖИТЬ ВТ_НоменклатураПоПрименяемости
		|";
	Запрос.Выполнить();
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Список.Отбор,
		"Ссылка",
		ВидСравненияКомпоновкиДанных.ВСписке,
		НоменклатураСОтбором,
		"Ссылка",
		Истина
	);
	
КонецПроцедуры

#КонецОбласти

// Завершение обработки создания номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Ссылка на созданную номенклатуру.
//  Контекст     - Структура                     - Дополнительные параметры обработки события.
//
&НаКлиенте
Процедура Подключаемый_СозданиеНоменклатурыЗавершение(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Номенклатура");
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументУстановкаЦен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ДокументУстановкаЦен");
	ФормироватьЦеныНоменклатуры = ПолучитьЗначениеПараметраСтруктуры(Результат, "ФормироватьЦеныНоменклатуры", Ложь); 
	
	Если ДокументУстановкаЦен <> Неопределено Тогда
		СформироватьОповещениеСозданииИзмененииЦен(ДокументУстановкаЦен); 
	ИначеЕсли ФормироватьЦеныНоменклатуры Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр(
				"ru = 'Не удалось выполнить установку цен. Проверьте настройки загрузки номенклатуры в прайс-листе.'")
		);
	КонецЕсли;
	
	ПутьКДанным = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "ПутьКДанным");
	ПутьКДанным = ?(ПутьКДанным = Неопределено, "РасширенныйПоискНоменклатуры", ПутьКДанным);
	ТекущаяСтрока = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "ИдентификаторСтроки");
	ТекущаяСтрока = ?(ТекущаяСтрока = Неопределено, Элементы.РасширенныйПоискНоменклатуры.ТекущаяСтрока, ТекущаяСтрока);
	
	ТекущиеДанные = ЭтотОбъект[ПутьКДанным].НайтиПоИдентификатору(ТекущаяСтрока);
	ТекущиеДанные.Номенклатура = Номенклатура;
	
	Если ЕстьРеквизитНаКлиенте(ТекущиеДанные, "ЦветТекста") Тогда
		ТипПоставщика = ТипЗнч(ТекущиеДанные.Поставщик);
		
		Если ТипПоставщика = Тип("СправочникСсылка.СкладыКомпании") Тогда
			
			ТекущиеДанные.ЦветТекста = 2;
			
		ИначеЕсли ТипПоставщика = Тип("ДокументСсылка.ЗаказПоставщику")
			ИЛИ ТипПоставщика = Тип("СправочникСсылка.ПодразделенияКомпании")
			ИЛИ ТипПоставщика = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ТекущиеДанные.ЦветТекста = 3;
			
		Иначе
			
			ТекущиеДанные.ЦветТекста = 0;
			
		КонецЕсли;
	Иначе
		ТекущиеДанные.Источник = 0;
		ТекущиеДанные.ИмяИсточника = НСтр("ru = 'Справочник'");
	КонецЕсли;
	
	Элементы[ПутьКДанным].Обновить();
	Элементы[ПутьКДанным].ТекущаяСтрока = ТекущаяСтрока;
	
	// Обновим информацию о базовом каталоге
	Если Элементы.СтраницыРасширеннаяИнформация.ТекущаяСтраница = Элементы.СтраницаОписание
		И ПереключательОписание = 1 Тогда
		
		ЗаполнитьИнформациюИзБазовогоКаталога();
		
	КонецЕсли;
	
	ТекущийЭлементСписка = Номенклатура;
	ТекущийЭлементРасширеныйПоиск = ТекущийЭлементСписка;
	Подключаемый_СписокПриАктивизацииСтроки();
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "ПродолжитьВыбор", Ложь) Тогда
		#Если Не ВебКлиент Тогда
			Выполнить(ПутьКДанным + "Выбор();");
		#КонецЕсли	
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти