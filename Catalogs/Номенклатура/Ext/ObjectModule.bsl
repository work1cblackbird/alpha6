// Модуль справочника Номенклатура

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоКода(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоКода()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	УнаследоватьОтРодителей();
	ПродолжатьЗаполнение = ОбработкаСобытийСправочникаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"СпособРаспределенияДопРасходов,СтатьяДопРасходов,ЭтоГруппа"
	);
	
	Если НЕ ПродолжатьЗаполнение Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБазовомуКаталогу(ДанныеЗаполнения);
	ЗаполнитьПоДаннымЭДО(ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
		
		Справочники.Номенклатура.ТипНоменклатурыПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияПоУмолчанию();

КонецПроцедуры // ОбработкаЗаполнения()

// Стандартный обработчик копирования объекта
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	// Затираем артикул - все равно он будет новый
	Если НЕ ОбъектКопирования.ЭтоГруппа Тогда
		Артикул = "";
		АртикулДляПоиска = "";
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи объекта.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем ПроверятьУникальность;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность заполнения количества для серийного товара
	Если НЕ ЭтоГруппа Тогда
		ОбработкаСобытийОбъектаСервер.ПроверитьКоличествоСерийнойНоменклатуры(ЭтотОбъект, Отказ);
		
		РежимКонтроля = Автосервис.РежимКонтроляУникальностиАртикула();
		Если Не РежимКонтроля = Перечисления.РежимыКонтроляУникальностиНомераПоКаталогу.НеКонтролировать Тогда
			
			Если РежимКонтроля = Перечисления.РежимыКонтроляУникальностиНомераПоКаталогу.ПоПроизводителю Тогда
			
				НайденнаяНоменклатура = Справочники.Номенклатура.НайтиНоменклатуру(
					ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул),
					Производитель,
					Ссылка
				);
				ТекстОшибки = НСтр("ru = 'Поле ""Артикул"" не уникально в пределах ""Производителя"" и ""Номенклатуры""'");
			Иначе
				
				НайденнаяНоменклатура = Справочники.Номенклатура.НайтиНоменклатуру(
					ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул),
					,
					Ссылка
				);
				ТекстОшибки = НСтр("ru = 'Поле ""Артикул"" не уникально в пределах ""Номенклатуры""'");
				
			КонецЕсли;
			
			// Информируем пользователя о найденной коллизии
			Если ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, , , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Справочники.Номенклатура.ПроверитьКорректностьСтавкиНДС(ЭтотОбъект) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Указана недействительная ставка НДС.'"), ЭтотОбъект,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередЗаписью(Отказ)
	
	// Выполняется заполнение поля "Артикул для поиска" даже в режиме загрузки
	Если НЕ ЭтоГруппа Тогда
		АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередЗаписью(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку лишних параметров номенклатуры
	Если НЕ (ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор 
		ИЛИ ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Комплект ИЛИ ЭтоГруппа) Тогда
		
		СоставНабора.Очистить();
		
	КонецЕсли;
	
	Если ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга И НЕ ЭтоГруппа Тогда
	
		СпособРаспределенияДопРасходов = Неопределено;
		СтатьяДопРасходов = Неопределено;
	
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СтароеЗначениеРодителя", Ссылка.Родитель);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриЗаписи(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.ЭтоНовый И НЕ ЭтоГруппа Тогда
		
		// Добавим номенклатуру в группы товаров оборудования
		ДобавитьВГруппыОборудования(ЭтотОбъект);
		
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		
		Если НЕ ЗначениеЗаполнено(ОсновнаяЕдиницаИзмерения) Тогда
			
			ОсновнаяЕдиницаИзмерения = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(Ссылка);
			Записать();
			
		КонецЕсли;
		
		Если НЕ Отказ И ЭтотОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга 
			И НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоНовый", Ложь) Тогда
				
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЯчейкиХраненияПоУмолчанию.СкладКомпании КАК СкладКомпании,
				|	ЯчейкиХраненияПоУмолчанию.Номенклатура КАК Номенклатура,
				|	ЯчейкиХраненияПоУмолчанию.ЯчейкаХранения КАК ЯчейкаХранения
				|ИЗ
				|	РегистрСведений.ЯчейкиХраненияПоУмолчанию КАК ЯчейкиХраненияПоУмолчанию
				|ГДЕ
				|	ЯчейкиХраненияПоУмолчанию.Номенклатура = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", Ссылка);
			
			УстановитьПривилегированныйРежим(Истина);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					МенеджерЗаписи = РегистрыСведений.ЯчейкиХраненияПоУмолчанию.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
					МенеджерЗаписи.Удалить();
					
				КонецЦикла;
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И ЭтотОбъект.ДополнительныеСвойства.Свойство("ПрайсЛист") Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание номенклатуры из прайс-листа'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.Номенклатура,
			ЭтотОбъект.Ссылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Создана номенклатура <%1> из прайс-листа <%2>'"),
			ЭтотОбъект.Наименование, Строка(ЭтотОбъект.ДополнительныеСвойства.ПрайсЛист)));
	КонецЕсли;
		
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.ПрайсЛист КАК ПрайсЛист,
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.НазначениеПравила КАК НазначениеПравила,
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.ОбъектПравила КАК ОбъектПравила,
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.ИдентификаторПравила КАК ИдентификаторПравила
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПрайсЛистыКонтрагентовПравилаЗагрузки
	|ГДЕ
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.Значение = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.ПрайсЛист,
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.НазначениеПравила,
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.ОбъектПравила,
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.ИдентификаторПравила
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПрайсЛистыКонтрагентовПравилаЗагрузки
	|ГДЕ
	|	ПрайсЛистыКонтрагентовПравилаЗагрузки.ЗначениеОригинальное = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры // ПередУдалением()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает результат проверки на соответствие номенклатуры и режима заполнения группы товаров.
//
// Параметры
//  Номенклатура -  Объект           - Номенклатура, которая участвует в проверке на соответствие.
//  ГруппаТоваров - СправочникСсылка - Группа товаров оборудования.
//
Функция СоответствуетЗаполнениюГруппы(Номенклатура, ГруппаТоваров)
	
	Результат = Ложь;
	
	Если ГруппаТоваров.РежимЗаполнения = 0 Тогда 
		Результат = Истина; // Все товары
	ИначеЕсли ГруппаТоваров.РежимЗаполнения = 1 Тогда
		Результат = Номенклатура.ТипНоменклатуры.Весовой; // Весовой товар
	ИначеЕсли ГруппаТоваров.РежимЗаполнения = 2 Тогда
		Результат = НЕ Номенклатура.ТипНоменклатуры.Весовой; // Штучный товар
	ИначеЕсли ГруппаТоваров.РежимЗаполнения = 3 Тогда // Типы товара из списка
		Результат = (ГруппаТоваров.ОграниченияЗаполненияГруппы.Найти(
					Номенклатура.ТипНоменклатуры, "ТипГруппаНоменклатуры") <> Неопределено);		
	ИначеЕсли ГруппаТоваров.РежимЗаполнения = 4 Тогда // Товар в иерархии из списка
		Для Каждого СтрокаГруппа Из ГруппаТоваров.ОграниченияЗаполненияГруппы Цикл
			
			Результат = Номенклатура.ПринадлежитЭлементу(СтрокаГруппа.ТипГруппаНоменклатуры);
			
			Если Результат Тогда 
				Прервать; 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СоответствуетЗаполнениюГруппы()

Процедура ДобавитьВГруппыОборудования(ВходнойОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокГрупп = Новый СписокЗначений;
	ГруппыТоваровВыборка = Справочники.ГруппыТоваровОборудования.Выбрать();
	
	Пока ГруппыТоваровВыборка.Следующий() Цикл
		
		Если СоответствуетЗаполнениюГруппы(ВходнойОбъект.Ссылка, ГруппыТоваровВыборка.Ссылка)
			И ГруппыТоваровВыборка.АвтоматическиЗаполнятьНовымТоваром Тогда
			
			СписокГрупп.Добавить(ГруппыТоваровВыборка.Ссылка);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (СписокГрупп.Количество() > 0) Тогда
		
		Для Каждого ГруппаТоваров Из СписокГрупп Цикл
			
			ЗаписьТоварыВОборудовании = РегистрыСведений.ТоварыВОборудовании.СоздатьМенеджерЗаписи();
			ЗаписьТоварыВОборудовании.ГруппаТоваров = ГруппаТоваров.Значение;
			ЗаписьТоварыВОборудовании.Номенклатура = ВходнойОбъект.Ссылка;
			ЗаписьТоварыВОборудовании.НомерЯчейки = 
						РегистрыСведений.ТоварыВОборудовании.ПолучитьМаксимальныйНомерЯчейки(ГруппаТоваров.Значение) + 1;
			ЗаписьТоварыВОборудовании.МоментИзменения = ТекущаяДатаСеанса();
			ЗаписьТоварыВОборудовании.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВГруппыОборудования()

Процедура УнаследоватьОтРодителей()
	
	Если ЭтоГруппа Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РодительскаяГруппа = Родитель;
	
	Пока ЗначениеЗаполнено(РодительскаяГруппа) Цикл
		
		Если ЗначениеЗаполнено(СпособРаспределенияДопРасходов) И ЗначениеЗаполнено(СтатьяДопРасходов) Тогда
			Прервать;
		КонецЕсли;
		
		РеквизитыРодителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РодительскаяГруппа,
			"СпособРаспределенияДопРасходов,СтатьяДопРасходов,Родитель"
		);
		
		РодительскаяГруппа = РеквизитыРодителя.Родитель;
		
		Если
			НЕ ЗначениеЗаполнено(СпособРаспределенияДопРасходов)
			И ЗначениеЗаполнено(РеквизитыРодителя.СпособРаспределенияДопРасходов)
		Тогда
			
			СпособРаспределенияДопРасходов = РеквизитыРодителя.СпособРаспределенияДопРасходов;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтатьяДопРасходов) И ЗначениеЗаполнено(РеквизитыРодителя.СтатьяДопРасходов) Тогда
			
			СтатьяДопРасходов = РеквизитыРодителя.СтатьяДопРасходов;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоБазовомуКаталогу(ДанныеЗаполнения)
	
	Если
		ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ НЕ ДанныеЗаполнения.Свойство("Артикул")
		ИЛИ НЕ ДанныеЗаполнения.Свойство("Производитель")
	Тогда
		Возврат;
	КонецЕсли;
	
	ПрайсЛист = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "ПрайсЛист", Неопределено);
	ДанныеНоменклатуры = ПрайсЛистыКонтрагентов.СоздатьОбновитьНоменклатуру(
		ДанныеЗаполнения.Артикул,
		ДанныеЗаполнения.Производитель,
		ПрайсЛист
	);
	
	Если ДанныеНоменклатуры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	Иначе
		БазовыйКаталог = ДанныеНоменклатуры.ПрайсЛист;
		ДанныеЗаполнения.Вставить("ПрайсЛист", БазовыйКаталог);
		ДополнительныеСвойства.Вставить("ПрайсЛист", БазовыйКаталог);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеНоменклатуры);
		Если ДанныеНоменклатуры.Свойство("Вес") Тогда
			КоэффициентПересчетаВесаПоУмолчанию = 1000;
			Если БазовыйКаталог.КоэффициентПересчетаВеса = КоэффициентПересчетаВесаПоУмолчанию Тогда
				Вес = ДанныеНоменклатуры.Вес;
			Иначе
				// TODO: Почему делим на 1000 если коэф. не равен 1000??
				Вес = Формат(Число(ДанныеНоменклатуры.Вес) / КоэффициентПересчетаВесаПоУмолчанию, "ЧЦ=15; ЧДЦ=3");
			КонецЕсли;
		КонецЕсли;
		Если НЕ БазовыйКаталог.Пустая() И Родитель.Пустая() Тогда
			Родитель = БазовыйКаталог.НоменклатурнаяГруппа;
		КонецЕсли;
	КонецЕсли;
	
	НаименованиеПолное = Наименование;
	
	Если ПустаяСтрока(НаименованиеИностранное) Тогда
		НаименованиеИностранное = Наименование;
	КонецЕсли;
	
	Если СтранаПроисхождения.Пустая() Тогда
		СтранаПроисхождения = Производитель.СтранаПроисхождения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымЭДО(ДанныеЗаполнения)
	
	Если 
		ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ НЕ ДанныеЗаполнения.Свойство("Источник")
		ИЛИ ВРег(ДанныеЗаполнения.Источник) <> "ЭДО"
	Тогда
	
		Возврат;
		
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если Не ЭтоГруппа Тогда
		
		АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Если ЭтоГруппа Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
		ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаУчета) Тогда
		
		ВалютаУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		
		СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
		
		БазоваяЕдиницаИзмерения = Константы.ОсновнаяЕдиницаИзмеренияКоличества.Получить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
