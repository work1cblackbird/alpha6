
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция получения ячейки хранения
//
// Параметры:
//	Ссылка	 - СправочникСсылка.Номенклатура	 - номенклатура для которой определяется ячейка
//	Склад	 - СправочникСсылка.СкладыКомпании	 - склад для которого определяется ячейка.
//
// Возвращаемое значение:
//  СправочникСсылка.ЯчейкиХранения - ссылка на ячейку если такая нашлась или пустуя ссылка.
//
Функция ПолучитьЯчейкуХранения(Ссылка, Склад) Экспорт
	
	Результат = Справочники.ЯчейкиХранения.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ЯчейкиХраненияПоУмолчанию.ЯчейкаХранения КАК ЯчейкаХранения
	               |ИЗ
	               |	РегистрСведений.ЯчейкиХраненияПоУмолчанию КАК ЯчейкиХраненияПоУмолчанию
	               |ГДЕ
	               |	ЯчейкиХраненияПоУмолчанию.Номенклатура = &Ссылка
	               |	И ЯчейкиХраненияПоУмолчанию.СкладКомпании = &СкладКомпании";
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СкладКомпании", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ЯчейкаХранения;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьЯчейкуХранения()

// Заполнить табличную часть номенклатурой подходящей по отбору
//
// Параметры:
//  Артикул					 - Строка									 - Артикул номенклатуры
//  ПрайсЛистКонтрагента	 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист контрагента
//  Производитель	 - СправочникСсылка.Производители					 - Ссылка на производителя номенклатуры
//
// Возвращаемое значение:
//  - ТаблицаЗначений
//
Функция ЗаполнитьИнформацию(Артикул, ПрайсЛистКонтрагента, Производитель) Экспорт
	
	ПрайсЛисты = Новый ТаблицаЗначений;
	ПрайсЛисты.Колонки.Добавить("ПрайсЛист");
	ПрайсЛисты.Колонки.Добавить("Номенклатура");
	ПрайсЛисты.Колонки.Добавить("Артикул");
	ПрайсЛисты.Колонки.Добавить("Производитель");
	ПрайсЛисты.Колонки.Добавить("Наименование");
	ПрайсЛисты.Колонки.Добавить("НаименованиеИностранное");
	ПрайсЛисты.Колонки.Добавить("Цена");
	ПрайсЛисты.Колонки.Добавить("Количество");
	ПрайсЛисты.Колонки.Добавить("СрокПоставки");
	ПрайсЛисты.Колонки.Добавить("ВоВнешнемИсточнике");
	
	Если ПустаяСтрока(Артикул) Тогда
		
		Возврат ПрайсЛисты;
		
	КонецЕсли;
	
	ЗапросТекст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрайсЛистыКонтрагентов.Ссылка КАК ПрайсЛист
	|ИЗ
	|	Справочник.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
	Если ЗначениеЗаполнено(ПрайсЛистКонтрагента) Тогда
		
		ЗапросТекст = ЗапросТекст + Символы.ПС + "И ПрайсЛистыКонтрагентов.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ЗапросТекст);
	Запрос.УстановитьПараметр("Ссылка",        ПрайсЛистКонтрагента);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат ПрайсЛисты;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПараметров = ОбщегоНазначения
			.МенеджерОбъектаПоСсылке(Выборка.ПрайсЛист)
			.ПолучитьПараметрыНоменклатуры(Выборка.ПрайсЛист.ПолучитьОбъект(), Артикул, Производитель, "Артикул");
		
		Если СтруктураПараметров = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		СтрокаПрайса = ПрайсЛисты.Добавить();
		СтрокаПрайса.ПрайсЛист = Выборка.ПрайсЛист;
		
		Для Каждого ПараметрНоменклатуры Из СтруктураПараметров Цикл
			
			Если ПрайсЛисты.Колонки.Найти(ПараметрНоменклатуры.Ключ) = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПараметрНоменклатуры.Ключ = "Производитель" Тогда
				
				СтрокаПрайса[ПараметрНоменклатуры.Ключ] = ПроизводительПоНаименованию(ПараметрНоменклатуры.Значение);
				
			Иначе
				
				СтрокаПрайса[ПараметрНоменклатуры.Ключ] = ПараметрНоменклатуры.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПрайсЛисты;
	
КонецФункции

// Поиск замен номенклатуры
//
// Параметры:
//  Номенклатура	 - СправочникСсылка.Номенклатура	 - Номенклатура, для которой получаем замены;
//  Артикул			 - Строка							 - Артикул, значение которого будет использовано для поиска
//  Производитель	 - СправочникСсылка.Производители	 - Ссылка на производителя по которому будет осуществляться поиск
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    *АртикулСтарый			 - Строка							 - Артикул
//    *АртикулДляПоискаСтарый	 - Строка							 - номер по каталогу
//    *АртикулНовый				 - Строка							 - Артикул
//    *АртикулДляПоискаНовый	 - Строка							 - Номер по каталогу
//    *Производитель			 - СправочникСсылка.Производители	 - производитель товара
//    *Шаг						 - Число							 - количество шагов поиска
//    *Количество				 - Число							 - количество номенклатуры
//    *ДатаЗамены				 - Дата								 - дата начала действия замены
//    *ДатаОбновления			 - Дата								 - дата обновления информации
//    *Группа					 - Строка							 - группа замены
//    *Описание					 - Строка							 - описание замены
//
Функция ПолучитьТаблицуЗамен(Номенклатура, Артикул = Неопределено, Производитель = Неопределено) Экспорт
	
	ТипСтрока50 = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	ТаблицаЗамен = Новый ТаблицаЗначений;
	ТаблицаЗамен.Колонки.Добавить("АртикулСтарый", ТипСтрока50);
	ТаблицаЗамен.Колонки.Добавить("АртикулДляПоискаСтарый", ТипСтрока50);
	ТаблицаЗамен.Колонки.Добавить("АртикулНовый", ТипСтрока50);
	ТаблицаЗамен.Колонки.Добавить("АртикулДляПоискаНовый", ТипСтрока50);
	ТаблицаЗамен.Колонки.Добавить("Производитель", Новый ОписаниеТипов("СправочникСсылка.Производители"));
	ТаблицаЗамен.Колонки.Добавить("ПроизводительЗамены", Новый ОписаниеТипов("СправочникСсылка.Производители"));
	ТаблицаЗамен.Колонки.Добавить("Шаг", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	ТаблицаЗамен.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаЗамен.Колонки.Добавить("ДатаЗамены", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаЗамен.Колонки.Добавить("ДатаОбновления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаЗамен.Колонки.Добавить("Группа", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаЗамен.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаЗамен.Колонки.Добавить("Автор", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	АртикулПоиска = Артикул;
	ПроизводительПоиска = Производитель;
	
	Если Артикул = Неопределено И Номенклатура <> Неопределено Тогда
		
		АртикулПоиска = Номенклатура.Артикул;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Производитель) И Номенклатура <> Неопределено Тогда
		
		ПроизводительПоиска = Номенклатура.Производитель;
		
	КонецЕсли;
	
	ЗащищенныеФункцииСервер.ЗаполнитьЗамены(АртикулПоиска, ПроизводительПоиска, ТаблицаЗамен);
	ТаблицаЗамен.Сортировать("Шаг");
	Возврат ТаблицаЗамен;
	
КонецФункции // ПолучитьТаблицуЗамен()

// Получение таблиц замен номенклатуры
// Параметры:
// 	ЗаменыНовые - Булево - Истина, если поиск новых замен
// 	ТаблицаЗамен - ТаблицаЗначений - таблица с заменами
// 	ДополнительныеПараметры - Структура - (необязательный) дополнительные параметры:
// 		 * НаличиеВСправочнике - Булево - (необязательный)
// 		 * ВНаличииНаСкладе - Булево - (необязательный)
// 		 * НаДату - Дата - (необязательный)
// 		 * СкладКомпании - СправочникСсылка.СкладыКомпании - (необязательный);
//
// Возвращаемое значение:
//  - ТаблицаЗначений - таблица замен.
//
Функция ПолучитьЗаменыНоменклатуры(ЗаменыНовые, ТаблицаЗамен, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ДополнительныеПараметры = Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("НаличиеВСправочнике") Тогда
		
		ДополнительныеПараметры.Вставить("НаличиеВСправочнике", Ложь);
		
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ВНаличииНаСкладе") Тогда
		
		ДополнительныеПараметры.Вставить("ВНаличииНаСкладе", Ложь);
		
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("НаДату") Тогда
		
		ДополнительныеПараметры.Вставить("НаДату", Дата(1, 1, 1));
		
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("СкладКомпании") Тогда
		
		ДополнительныеПараметры.Вставить("СкладКомпании", Неопределено);
		
	КонецЕсли;

	ТаблицаЗаменНовыеСтарые = Новый ТаблицаЗначений;
	ЗащищенныеФункцииСервер.ПолучитьЗаменыНоменклатуры(
		ЗаменыНовые,
		ТаблицаЗамен,
		ТаблицаЗаменНовыеСтарые,
		ДополнительныеПараметры.НаличиеВСправочнике,
		ДополнительныеПараметры.ВНаличииНаСкладе,
		ДополнительныеПараметры.НаДату,
		ДополнительныеПараметры.СкладКомпании
	);
	
	Возврат ТаблицаЗаменНовыеСтарые;
	
КонецФункции // ПолучитьЗаменыНоменклатуры()

// Настройка ограничения данных характеристик номенклатуры
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - объект, для которого выполняется действие
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ОграниченияДанныхХарактеристики
//
Функция ОграничениеДанныхХарактеристик(Номенклатура) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры.ОграничениеДанныхХарактеристик");
	
КонецФункции

// Функция - НайтиНоменклатуру производит поиск номенклатуры по переданным параметрам.
//
// Параметры:
//  Артикул					 - Строка							 - Артикул, значение которого будет использовано для поиска
//  Производитель			 - СправочникСсылка.Производители	 - Ссылка на производителя по которому будет осуществляться поиск
//  ИсключаемаяСсылка		 - СправочникСсылка.Номенклатура	 - Ссылка на номенклатуру, которую надо исключить из выборки.
//  ПроизводительВИерархии	 - Булево							 - Истина, если иерархический поиск по производителю
//
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура - Ссылка на найденную номенклатуру.
//
Функция НайтиНоменклатуру(Артикул,
                          Производитель = Неопределено,
                          ИсключаемаяСсылка = Неопределено,
                          ПроизводительВИерархии = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Артикул) Тогда
		
		Возврат Справочники.Номенклатура.ПустаяСсылка();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.АртикулДляПоиска = &Артикул
		|	И Номенклатура.Производитель = &Производитель
		|	И НЕ Номенклатура.Ссылка = &ИсключаемаяСсылка";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	Если Производитель = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Номенклатура.Производитель = &Производитель", "");
	Иначе
		Запрос.УстановитьПараметр("Производитель" , Производитель);
	КонецЕсли;
	Если ИсключаемаяСсылка <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИсключаемаяСсылка", ИсключаемаяСсылка);
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Номенклатура.Ссылка = &ИсключаемаяСсылка", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // НайтиНоменклатуру()

// Получает единицу измерения в зависимости от базовой.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура									 - Ссылка на номенклатуру, для которой получаем единицу.
//  Владелец     - СправочникСсылка.Номенклатура, СправочникСсылка.ТипыНоменклатуры	 - владелец единицы измерения
//
// Возвращаемое значение:
//  СправочникСсылка.ЕдиницыИзмерения - Ссылка на найденную единицу измерения.
//
Функция ПолучитьОсновнуюЕдиницуПоБазовой(Номенклатура, Знач Владелец = Неопределено) Экспорт 
	
	Если Владелец = Неопределено Тогда
		Если Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1 Тогда
			Владелец =  Номенклатура.ТипНоменклатуры;
		Иначе
			Владелец =  Номенклатура.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕдиницыИзмерения.Ссылка,
	|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ЕдиницыИзмерения.Наименование = &ЕдиницаПоКлассификатору
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПолеСортировки
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &БазоваяЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Коэффициент,
	|	ПолеСортировки");
	Запрос.УстановитьПараметр("Владелец",                Владелец);
	Запрос.УстановитьПараметр("БазоваяЕдиницаИзмерения", Номенклатура.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору", Номенклатура.БазоваяЕдиницаИзмерения.Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НоваяЕдиницаИзмерения = Выборка.Ссылка;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		
		НоваяЕдиницаИзмерения                         = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		НоваяЕдиницаИзмерения.Владелец                = Владелец;
		НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения;
		НоваяЕдиницаИзмерения.Наименование            = Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
		НоваяЕдиницаИзмерения.Коэффициент             = 1;
		НоваяЕдиницаИзмерения.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат НоваяЕдиницаИзмерения.Ссылка;
	
КонецФункции

// Получает и загружает цены номенклатуры.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - Форма, из которой вызывается событие
//  ДополнительныеПараметры	 - Структура		 - дополнительные параметры
//
Процедура ЗагрузитьЦены(Форма, ДополнительныеПараметры) Экспорт
	
	ТекущаяНоменклатура =   ДополнительныеПараметры.ТекущаяНоменклатура;
	ТекущаяХарактеристика = ДополнительныеПараметры.ТекущаяХарактеристика;
	ЗапросТекст =           ДополнительныеПараметры.ЗапросТекст;
	
	Форма.Цены.Очистить();
	
	ТекстЗапросаРассчетныхТиповЦен =
		"ВЫБРАТЬ
		|	ТаблицаЦен.ТипЦен КАК ТипЦен,
		|	ТаблицаЦен.ВалютаЦены,
		|	ТаблицаЦен.ВалютаЦены КАК БазоваяВалюта,
		|	ТаблицаЦен.Характеристика КАК Характеристика,
		|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаЦен.Подразделение КАК Подразделение,
		|	ТаблицаЦен.Цена КАК Цена
		|ПОМЕСТИТЬ ТаблицаЦенРассчетныхТиповЦен
		|ИЗ
		|	&ТаблицаЦен КАК ТаблицаЦен
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТипыЦенПоВидамНоменклатуры.Ссылка КАК ТипЦен,
		|	ТипыЦенПоВидамНоменклатуры.ВалютаЦены,
		|	ТипыЦенПоВидамНоменклатуры.БазоваяВалюта КАК БазоваяВалюта,
		|	ТаблицаЦен.Характеристика КАК Характеристика,
		|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаЦен.Подразделение КАК Подразделение,
		|	ТаблицаЦен.Цена + ТаблицаЦен.Цена * (ЕСТЬNULL(ТипыЦенПоВидамНоменклатуры.ПроцентСкидкиНаценкиТаблица, 0) / 100) КАК Цена,
		|	0 КАК ЦенаРегл,
		|	ТипыЦенПоВидамНоменклатуры.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
		|	ТипыЦенПоВидамНоменклатуры.Точность КАК Точность,
		|	ТипыЦенПоВидамНоменклатуры.Ссылка.Рассчитывается КАК Рассчитывается
		|ИЗ
		|	ТаблицаЦенРассчетныхТиповЦен КАК ТаблицаЦен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипыЦенПоВидамНоменклатуры КАК ТипыЦенПоВидамНоменклатуры
		|		ПО ТаблицаЦен.ТипЦен = ТипыЦенПоВидамНоменклатуры.БазовыйТипЦен
		|ГДЕ
		|	ТаблицаЦен.Цена > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаЦенРассчетныхТиповЦен";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен ЕСТЬ NULL
		|			ТОГДА ТипыЦен.БазовыйТипЦен
		|		ИНАЧЕ ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен
		|	КОНЕЦ КАК БазовыйТипЦен,
		|	ВЫБОР
		|	КОГДА ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен ЕСТЬ NULL
		|			ТОГДА ТипыЦен.БазовыйТипЦен.ВалютаЦены
		|		ИНАЧЕ ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен.ВалютаЦены
		|	КОНЕЦ КАК БазоваяВалюта,
		|	ТипыЦен.ВалютаЦены КАК ВалютаЦены,
		|	ТипыЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
		|	ТипыЦен.Точность КАК Точность,
		|	ВЫБОР
		|		КОГДА ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки ЕСТЬ NULL 
		|			ТОГДА ТипыЦен.ПроцентСкидкиНаценки
		|		ИНАЧЕ ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки
		|	КОНЕЦ КАК ПроцентСкидкиНаценкиТаблица,
		|	ТипыЦен.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТипыЦенПоВидамНоменклатуры
		|ИЗ
		|	Справочник.ТипыЦен КАК ТипыЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК ТипыЦенПроцентыСкидкиНаценки
		|		ПО (ТипыЦенПроцентыСкидкиНаценки.Ссылка = ТипыЦен.Ссылка)
		|			И (ТипыЦенПроцентыСкидкиНаценки.ЦеноваяГруппа = &ЦеноваяГруппа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЦеныСрезПоследних.ТипЦен КАК ТипЦен,
		|	ВЫБОР
		|		КОГДА ЦеныСрезПоследних.ТипЦен.ВВалютеУчета = ИСТИНА
		|			ТОГДА ЦеныСрезПоследних.Номенклатура.ВалютаУчета
		|		ИНАЧЕ ЦеныСрезПоследних.ТипЦен.ВалютаЦены
		|	КОНЕЦ КАК ВалютаЦены,
		|	ЦеныСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЦеныСрезПоследних.ПодразделениеКомпании КАК Подразделение,
		|	ЦеныСрезПоследних.Цена КАК Цена,
		|	0 КАК ЦенаРегл
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	РегистрСведений.Цены.СрезПоследних(
		|			&НаДату,
		|			Номенклатура = &Номенклатура
		|				И Контрагент = &Контрагент
		|				И ВЫБОР
		|					КОГДА ТипЦен.АлгоритмПолученияЦены = &ПоХарактеристике
		|						ТОГДА %УсловиеПоХарактеристике%
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК ЦеныСрезПоследних
		|ГДЕ
		|	ЦеныСрезПоследних.Цена > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЦен.ТипЦен КАК ТипЦен,
		|	ТаблицаЦен.ВалютаЦены,
		|	ТаблицаЦен.ВалютаЦены КАК БазоваяВалюта,
		|	ТаблицаЦен.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ТаблицаЦен.ЕдиницаИзмерения,
		|	ТаблицаЦен.Подразделение,
		|	ТаблицаЦен.Цена,
		|	ТаблицаЦен.ЦенаРегл,
		|	NULL КАК ОкруглятьВБольшуюСторону,
		|	NULL КАК Точность,
		|	ТаблицаЦен.ТипЦен.Рассчитывается КАК Рассчитывается
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦен";
	
	РеквизитыНоменклатуры = ОбщегоНазначения
		.ЗначенияРеквизитовОбъекта(ТекущаяНоменклатура, "ЦеноваяГруппа,СтавкаНДС.Ставка");
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Ставка = РеквизитыНоменклатуры.СтавкаНДССтавка;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоХарактеристике%", ЗапросТекст);
	
	Запрос.УстановитьПараметр("НаДату",                     ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПоХарактеристике",           Перечисления.АлгоритмПолученияЦены.ПоХарактеристике);
	Запрос.УстановитьПараметр("Контрагент",                 Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Номенклатура",               ТекущаяНоменклатура);
	Запрос.УстановитьПараметр("ЦеноваяГруппа",              РеквизитыНоменклатуры.ЦеноваяГруппа);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ТекущаяХарактеристика);
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Пока Истина Цикл
		
		ТаблицаЦены = Запрос.Выполнить().Выгрузить();
		
		// Все типы цен вывели.
		Если ТаблицаЦены.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ТаблицаЦены Цикл
			
			Если ТекСтрока.ВалютаЦены <> ТекСтрока.БазоваяВалюта Тогда
				
				ТекСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ТекСтрока.Цена,
					ТекСтрока.БазоваяВалюта,
					ТекущаяДатаСеанса,
					ТекСтрока.ВалютаЦены,
					ТекущаяДатаСеанса
				);
				
			КонецЕсли;
			
			Если ТекСтрока.ТипЦен.ОкруглятьВБольшуюСторону Тогда
				
				ТекСтрока.Цена = Окр(ТекСтрока.Цена + (0.5 / Pow(10, ТекСтрока.ТипЦен.Точность)), ТекСтрока.ТипЦен.Точность, 0);
					
			Иначе
				
				ТекСтрока.Цена = Окр(ТекСтрока.Цена, ТекСтрока.ТипЦен.Точность, 0);
				
			КонецЕсли;
			
			Если
				ВалютаРегламентированногоУчета <> Справочники.Валюты.ПустаяСсылка()
				И ТекСтрока.ВалютаЦены <> ВалютаРегламентированногоУчета
			Тогда
				
				ТекСтрока.ЦенаРегл = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ТекСтрока.Цена,
					ТекСтрока.ВалютаЦены,
					ТекущаяДатаСеанса,
					ВалютаРегламентированногоУчета,
					ТекущаяДатаСеанса
				);
				
			Иначе
				
				ТекСтрока.ЦенаРегл = ТекСтрока.Цена;
				
			КонецЕсли;
			
			НоваяСтрока = Форма.Цены.Добавить();
			НоваяСтрока.Характеристика = ТекСтрока.Характеристика;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			Если ТекСтрока.ТипЦен.ЦенаВключаетНДС Тогда
				
				НоваяСтрока.ЦенаБезНДС     = ТекСтрока.Цена - Окр((ТекСтрока.Цена * Ставка) / (100 + Ставка), 2);
				НоваяСтрока.ЦенаБезНДСРегл = ТекСтрока.ЦенаРегл - Окр((ТекСтрока.ЦенаРегл * Ставка) / (100 + Ставка), 2);
				
			Иначе
				
				НоваяСтрока.ЦенаБезНДС     = ТекСтрока.Цена;
				НоваяСтрока.ЦенаБезНДСРегл = ТекСтрока.ЦенаРегл;
				НоваяСтрока.Цена           = ТекСтрока.Цена + Окр((ТекСтрока.Цена * Ставка) / 100, 2);
				НоваяСтрока.ЦенаРегл       = ТекСтрока.ЦенаРегл + Окр((ТекСтрока.ЦенаРегл * Ставка) / 100, 2);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапросаРассчетныхТиповЦен;
		Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаЦены);
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьЦены()

// Возвращает иностранное наименование по умолчанию.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьНаименованиеИностранноеПоУмолчанию(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Возврат Объект.Наименование;
	
КонецФункции // СформироватьНаименованиеИностранноеПоУмолчанию()

// Возвращает полное наименование по умолчанию.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьНаименованиеПолноеПоУмолчанию(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Возврат Объект.Наименование;
	
КонецФункции

// Проверим корректность ставки НДС для устранения ситуации выбора ставки НДС 18%
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  - Булево
//
Функция ПроверитьКорректностьСтавкиНДС(Объект) Экспорт
	
	// По закону с 01.01.2019 вместо ставки НДС 18% необходимо использовать ставку НДС 20%.
	СтавкаНДСНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтавкаНДС, "Ставка");
	ЗначениеСтавки18 = 18;
	
	Возврат СтавкаНДСНоменклатуры <> ЗначениеСтавки18;
	
КонецФункции // ПроверитьКорректностьСтавкиНДС()

// Функция выполняет поиск веса номенклатуры
//
// Параметры:
//	Номенклатура     - СправочникСсылка.Номенклатура - Ссылка на номенклатуру, для которой выполняется поиск веса
//	ЕдиницаИзмерения - СправочникСсылка.ЕдиницаИзмерения - Ссылка на единицу измерения,
//	                                                       из которой берется вес единицы номенклатуры.
//
// Возвращаемое значение:
//	Вес - Число - Найденное значение веса.
//
Функция ПолучитьВесНоменклатуры(Номенклатура, ЕдиницаИзмерения = Неопределено) Экспорт
	Вес = 0;
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ЗначениеЗаполнено(Номенклатура.Вес) Тогда
			Вес = Номенклатура.Вес;
		ИначеЕсли НЕ ЕдиницаИзмерения = Неопределено И ЗначениеЗаполнено(ЕдиницаИзмерения.Вес) Тогда
			Вес = ЕдиницаИзмерения.Вес;
		КонецЕсли;
	КонецЕсли;
	Возврат Вес;
КонецФункции // ПолучитьВесНоменклатуры()

// Функция выполняет поиск характеристики номенклатуры
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - Ссылка на номенклатуру, для которой выполняется проверка.
//	
// Возвращаемое значение:
//	Булево - Это номенклатура
//
Функция ПроверитьНаПринадлежностьНоменклатуры(Номенклатура) Экспорт
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ПроверитьНаПринадлежностьНоменклатуры()

// Функция создания документа установки цен для созданной номенклатуры из прайс-листа.
//
// Параметры:
//  ПрайсЛист	 - СправочникСсылка.ПрайсЛистыКонтрагентов - Прайс-лист контрагента
//  Номенклатура - Массив, СправочникСсылка.Номенклатура - Номенклатура, для которой требуется установить цены
//  ПараметрыЗаполнения - Структура - Параметры заполнения
//
// Возвращаемое значение:
//  - Булево
//
Функция УстановитьЦеныНоменклатурыПоПрайсЛисту(ПрайсЛист, Номенклатура, ПараметрыЗаполнения) Экспорт
	
	Возврат ПрайсЛистыКонтрагентов.УстановитьЦеныНоменклатурыПоПрайсЛисту(ПрайсЛист, Номенклатура, ПараметрыЗаполнения);
	
КонецФункции // УстановитьЦеныНоменклатурыПоПрайсЛисту()

// Функция создания номенклатуры с заполнением переданных параметров создания.
//
// Параметры:
//  ПараметрыЗаполнения - Структура - Параметры заполнения
//
// Возвращаемое значение:
//  - Структура
//
Функция СоздатьНоменклатуруПоПрайсЛисту(ПараметрыЗаполнения) Экспорт
	
	// Создадим номенклатуру и установим цену по прайс-листу.
	Результат = Новый Структура;
	
	Если НЕ ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭлементНоменклатуры = Справочники.Номенклатура.СоздатьЭлемент();
	ЭлементНоменклатуры.Заполнить(ПараметрыЗаполнения);
	
	// Выполним проверку заполнения
	Если ЭлементНоменклатуры.ПроверитьЗаполнение() Тогда
		
		Попытка
			
			ЭлементНоменклатуры.Записать();
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Создана номенклатура <%1>'"), СокрЛП(ЭлементНоменклатуры.Наименование))
			);
		
		Исключение
		
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'При записи номенклатуры возникли ошибки. %1'"),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
			);
		
		КонецПопытки;
		
	КонецЕсли;
	
	
	Если НЕ ЭлементНоменклатуры.Ссылка.Пустая() Тогда
		Результат.Вставить("Номенклатура", ЭлементНоменклатуры.Ссылка);
		Если ЭлементНоменклатуры.ДополнительныеСвойства.Свойство("ПрайсЛист") Тогда
			Результат.Вставить("ПрайсЛист", ЭлементНоменклатуры.ДополнительныеСвойства.ПрайсЛист);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СоздатьНоменклатуру()

// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
//
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Задание = ФоновыеЗадания.Выполнить(
		"РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации",
		ПараметрыЗадания,
		,
		НаименованиеЗадания
	);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Стартует загрузку прайс-листов
//
// Параметры:
//  Параметры						 - Структура				 - структура параметров
//  ИдентификаторДлительнойОперации	 - УникальныйИдентификатор	 - идентификатор длительной операции
//  ИдентификаторФормы				 - УникальныйИдентификатор	 - идентификатор формы, из которой выполняется 
//																	запуск длительной операции
//  АдресЦенПрайсЛистовКонтрагентов	 - Строка					 - адрес временного хранилища, в котором хранится
//																	прайс-лист контрагентов
//
// Возвращаемое значение:
//  - Булево - Истина, если задание выполнено
//
Функция НачатьЗагрузкуЦенПрайсЛистов(
	Параметры,
	ИдентификаторДлительнойОперации,
	ИдентификаторФормы,
	АдресЦенПрайсЛистовКонтрагентов) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторДлительнойОперации) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторДлительнойОперации);
	КонецЕсли;
	
	СтартЗадания = ЗапуститьВыполнениеВФоне(ИдентификаторФормы,
		"Справочники.Номенклатура.ЗагрузитьЦеныПрайсЛистовКонтрагентов", Параметры, "ЗагрузкаЦенНоменклатуры", Истина);
	
	АдресЦенПрайсЛистовКонтрагентов = СтартЗадания.АдресХранилища;
	ИдентификаторДлительнойОперации = СтартЗадания.ИдентификаторЗадания;
	
	Возврат СтартЗадания.ЗаданиеВыполнено;
	
КонецФункции

// загружает прайс-листы
// 
// Параметры:
//  Параметры	 - Структура	 - структура параметров
//  Результат	 - Строка		 - адрес временного хранилища, в котором хранится результат загрузки
//  Ошибки		 - Массив		 - перечень ошибок
//
Процедура ЗагрузитьЦеныПрайсЛистовКонтрагентов(Параметры, Результат, Ошибки) Экспорт
	
	Номенклатура              = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Номенклатура");
	Производитель             = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Производитель");
	ПоискПоВнешнимПрайсЛистам = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПоискПоВнешнимПрайсЛистам", Ложь);
	
	// 1. Найдем цены по загруженным прайс-листам в базу.
	ТаблицаЦен = РегистрыСведений.ПрайсЛистыКонтрагентов.ПолучитьПрайсЛистыКонтрагентов(
		Номенклатура,
		Производитель,
		,
		ТекущаяДатаСеанса()
	);
	
	// 2. Найдем цены из внешних каталогов прайс-листов.
	Если ПоискПоВнешнимПрайсЛистам Тогда
		ТаблицаЦенВнешнихПрайсЛистов = ЦенообразованиеСервер.ПолучитьВнешниеПрайсЛисты(Номенклатура, Производитель);
		Если НЕ ТаблицаЦен = Неопределено Тогда
			Для Каждого ТекущаяСтрока Из ТаблицаЦенВнешнихПрайсЛистов Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаЦен.Добавить(), ТекущаяСтрока);
			КонецЦикла;
		Иначе
			ТаблицаЦен = ТаблицаЦенВнешнихПрайсЛистов.Скопировать();
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаЦен, Результат);
	
КонецПроцедуры // ЗагрузитьЦеныПрайсЛистовКонтрагентов()

// Функция получения типа номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Ссылка на элемент 
//
// Возвращаемое значение:
//  СправочникСсылка.ТипыНоменклатуры, Неопределено - значение реквизита объекта
//
Функция ПолучитьТипНоменклатуры(Номенклатура) Экспорт
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры");
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// ОбработчикиРеквизитов

// Обработчик события возникающего при изменении данных реквизита "Тип номенклатуры".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ТипНоменклатурыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если Объект.ВидНоменклатуры <> Объект.ТипНоменклатуры.ВидНоменклатуры Тогда
		
		Объект.ВидНоменклатуры = Объект.ТипНоменклатуры.ВидНоменклатуры;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипНоменклатуры.СтавкаНДС) Тогда
		
		Объект.СтавкаНДС = Объект.ТипНоменклатуры.СтавкаНДС;		
	КонецЕсли;
	
	Если Не Объект.ЭтоГруппа Тогда
		
		Объект.БазоваяЕдиницаИзмерения = Объект.ТипНоменклатуры.ОсновнаяБазоваяЕдиницаИзмерения;
		
		Если ЗначениеЗаполнено(Объект.ТипНоменклатуры) И Объект.ТипНоменклатуры.ВедетсяМаркировка Тогда
			
			Объект.Прослеживаемый = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Производитель".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ПроизводительПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Производитель) Тогда
		
		Объект.СтранаПроисхождения = Объект.Производитель.СтранаПроисхождения;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура СтавкаНДСПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если Не ПроверитьКорректностьСтавкиНДС(Объект) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Указана недействительная ставка НДС.'"), Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Конец.ОбработчикиРеквизитов

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элементы.Колонки.Добавить("Автор", Метаданные.ОбщиеРеквизиты.Автор.Тип);
	Элементы.Колонки.Добавить("ДатаСоздания", Метаданные.ОбщиеРеквизиты.ДатаСоздания.Тип);
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Предоплата";
	Элемент.Наименование = НСтр("ru = 'Предоплата'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
	Элемент.ТипНоменклатуры = Справочники.ТипыНоменклатуры.Услуга;
	Элемент.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("-");
	Элемент.СпособРаспределенияДопРасходов = Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы;
	Элемент.СтатьяДопРасходов = Справочники.СтатьиДоходовИРасходов.ПрочиеЗатраты;
	
	ПрефиксКода = Лев("00000000000000000000000", 10);
	Элемент.Код = ПрефиксКода + "1";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КомиссионноеВознаграждение";
	Элемент.Наименование = НСтр("ru = 'Комиссионное вознаграждение'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
	Элемент.ТипНоменклатуры = Справочники.ТипыНоменклатуры.Услуга;
	Элемент.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("-");
	Элемент.СпособРаспределенияДопРасходов = Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы;
	Элемент.СтатьяДопРасходов = Справочники.СтатьиДоходовИРасходов.ПрочиеЗатраты;
	Элемент.Код = ПрефиксКода + "2";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Авторабота";
	Элемент.Наименование = НСтр("ru = 'Авторабота'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
	Элемент.ТипНоменклатуры = Справочники.ТипыНоменклатуры.Услуга;
	Элемент.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("-");
	Элемент.СпособРаспределенияДопРасходов = Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы;
	Элемент.СтатьяДопРасходов = Справочники.СтатьиДоходовИРасходов.ПрочиеЗатраты;
	Элемент.Код = ПрефиксКода + "3";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОпцияПроизводителя";
	Элемент.Наименование = НСтр("ru = 'Опция производителя'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Опции;
	Элемент.ТипНоменклатуры = Справочники.ТипыНоменклатуры.Опции;
	Элемент.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.Код = ПрефиксКода + "4";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Автомобиль";
	Элемент.Наименование = НСтр("ru = 'Автомобиль'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Автомобили;
	Элемент.ТипНоменклатуры = Справочники.ТипыНоменклатуры.Автомобили;
	Элемент.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.Код = ПрефиксКода + "5"; 
	
	ВалютаУчетаПоУмолчанию = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Если Не ЗначениеЗаполнено(ВалютаУчетаПоУмолчанию) Тогда
		
		ВалютаУчетаПоУмолчанию = РаботаСКурсамиВалют
			.ДобавитьВалютыПоКоду(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("643"));
		
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Элемент Из Элементы Цикл
		
		Элемент.НаименованиеПолное = Элемент.Наименование;
		Элемент.СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
		Элемент.Автор = ТекущийПользователь;
		Элемент.ДатаСоздания = ТекущаяДатаСеанса();
		Элемент.ВалютаУчета = ВалютаУчетаПоУмолчанию;
		ЗаполнитьОсновнуюЕдиницу(Элемент);
		
	КонецЦикла;

КонецПроцедуры

// Обновление значений констант контроля обязательности и уникальности Артикула.
//
Процедура УстановитьЗначенияКонстантНастроекЗаполненияНоменклатуры() Экспорт
	
	НомерПоКаталогуУникальный = Константы.УдалитьНомерПоКаталогуУникальный.Получить();
	Константы.НомерПоКаталогуОбязательный.Установить(НомерПоКаталогуУникальный);
	
	Если НомерПоКаталогуУникальный Тогда
		РежимКонтроля = Перечисления.РежимыКонтроляУникальностиНомераПоКаталогу.ПоПроизводителю;
	Иначе
		РежимКонтроля = Перечисления.РежимыКонтроляУникальностиНомераПоКаталогу.НеКонтролировать;
	КонецЕсли;
	Константы.РежимКонтроляУникальностиНомераПоКаталогу.Установить(РежимКонтроля);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати"
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати"
	);
	
КонецПроцедуры

// Формирует перечень данных для печати этикеток номенклатуры
//
// Параметры:
//  МассивЭлементов - Массив из СправочникСсылка.Номенклатура - массив ссылок на номенклатуру.
//
// Возвращаемое значение:
//	Строка - Адрес результата во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивЭлементов) Экспорт
	
	Действия = ДайДействияПечатиПоУмолчанию();
	Товары = ДайДанныеНоменклатурыДляПечати(МассивЭлементов, Действия.ЗаполнитьОрганизацию);
	Действия.ПоказыватьКолонкуКоличествоВДокументе = Ложь;
	Действия.УстановитьРежим = "ПечатьЭтикеток";
	
	Результат = Новый Структура("Товары,СтруктураДействий", Товары, Действия);
	Возврат ПоместитьВоВременноеХранилище(Результат);
	
КонецФункции

// Формирует перечень данных для печати ценников номенклатуры
//
// Параметры:
//  МассивЭлементов - Массив из СправочникСсылка.Номенклатура - массив ссылок на номенклатуру.
//
// Возвращаемое значение:
//	Строка - Адрес результата во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивЭлементов) Экспорт
	
	Действия = ДайДействияПечатиПоУмолчанию();
	Товары = ДайДанныеНоменклатурыДляПечати(МассивЭлементов, Действия.ЗаполнитьОрганизацию);
	
	Результат = Новый Структура("Товары,СтруктураДействий", Товары, Действия);
	Возврат ПоместитьВоВременноеХранилище(Результат);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("СпособРаспределенияДопРасходов");
    Результат.Добавить("ЦеноваяГруппа");
	Результат.Добавить("Подакцизный");
	
	Возврат Результат;
    
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если СтрДлина(Параметры.СтрокаПоиска) < 3 Тогда
		
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	СтрокаПоиска = Параметры.СтрокаПоиска;
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоискаСокращенная = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(СтрокаПоиска);
	ДанныеВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПоиска",
		"%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска) + "%"
	);
	Запрос.УстановитьПараметр("СтрокаПоискаСокращенная",
		"%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоискаСокращенная) + "%"
	);
	
	Поля = Новый Массив();
	Отборы = Новый Массив();
	
	Для Каждого Отбор Из Параметры.Отбор Цикл
		
		Если ТипЗнч(Отбор.Значение) = Тип("ФиксированныйМассив") Тогда
			
			Шаблон = "НайденнаяНоменклатура.Номенклатура%1 В (&%1)";
			ОтборЗначение = Новый Массив(Отбор.Значение);
			
		Иначе
			
			Шаблон = "НайденнаяНоменклатура.Номенклатура%1 = &%1";
			ОтборЗначение = Отбор.Значение;
			
		КонецЕсли;
		
		Поля.Добавить(СтрШаблон("Номенклатура.%1 КАК Номенклатура%1", Отбор.Ключ));
		Отборы.Добавить(СтрШаблон(Шаблон, Отбор.Ключ));
		Запрос.УстановитьПараметр(Отбор.Ключ, ОтборЗначение);
		
	КонецЦикла;
	
	Если НЕ Параметры.Отбор.Свойство("ЭтоГруппа") И Параметры.Свойство("ВыборГруппИЭлементов") Тогда
		
		Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
			
			Отборы.Добавить("НайденнаяНоменклатура.ЭтоГруппа");
			
		КонецЕсли;
		
		Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			
			Отборы.Добавить("НЕ НайденнаяНоменклатура.ЭтоГруппа");
			
		КонецЕсли;
		
		Поля.Добавить("Номенклатура.ЭтоГруппа КАК ЭтоГруппа");
		
	КонецЕсли;
	
	УсловиеОтбора = "";
	ПоляОтбора = "";
	
	Если Отборы.Количество() > 0 Тогда
		
		УсловиеОтбора = "ГДЕ " + СтрСоединить(Отборы, " И ");
		
	КонецЕсли;
	
	Если Поля.Количество() > 0 Тогда
		
		ПоляОтбора = СтрСоединить(Поля, "," + Символы.ПС) + "," + Символы.ПС;
		
	КонецЕсли;
	
	ЗапросТекст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	Номенклатура.Ссылка КАК Значение,
	|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	Номенклатура.Артикул КАК НайденоПо,
	|	Номенклатура.Наименование КАК ПредставлениеНоменклатуры,
	|	// ПОЛЯ_ДЛЯ_ОТБОРА
	|	0 КАК Порядок
	|ПОМЕСТИТЬ НайденнаяНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	Номенклатура.Ссылка,
	|	Номенклатура.ПометкаУдаления,
	|	Номенклатура.Наименование,
	|	Номенклатура.Артикул,
	|	// ПОЛЯ_ДЛЯ_ОТБОРА
	|	1
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	Номенклатура.Ссылка,
	|	Номенклатура.ПометкаУдаления,
	|	Номенклатура.АртикулДляПоиска,
	|	Номенклатура.Наименование,
	|	// ПОЛЯ_ДЛЯ_ОТБОРА
	|	2
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.АртикулДляПоиска ПОДОБНО &СтрокаПоискаСокращенная СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	Номенклатура.Ссылка,
	|	Номенклатура.ПометкаУдаления,
	|	Номенклатура.Код,
	|	Номенклатура.Наименование,
	|	// ПОЛЯ_ДЛЯ_ОТБОРА
	|	3
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденнаяНоменклатура.Значение КАК Значение,
	|	МИНИМУМ(НайденнаяНоменклатура.Порядок) КАК Порядок
	|ПОМЕСТИТЬ НоменклатураПоПорядку
	|ИЗ
	|	НайденнаяНоменклатура КАК НайденнаяНоменклатура
	|// УСЛОВИЕ ОТБОРА
	|
	|СГРУППИРОВАТЬ ПО
	|	НайденнаяНоменклатура.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	НоменклатураПоПорядку.Значение КАК Значение,
	|	НайденнаяНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	НайденнаяНоменклатура.Порядок КАК Порядок,
	|	НайденнаяНоменклатура.НайденоПо КАК НайденоПо,
	|	НайденнаяНоменклатура.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
	|ИЗ
	|	НоменклатураПоПорядку КАК НоменклатураПоПорядку
	|		ЛЕВОЕ СОЕДИНЕНИЕ НайденнаяНоменклатура КАК НайденнаяНоменклатура
	|		ПО НоменклатураПоПорядку.Значение = НайденнаяНоменклатура.Значение
	|			И НоменклатураПоПорядку.Порядок = НайденнаяНоменклатура.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НайденоПо,
	|	ПредставлениеНоменклатуры";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "// ПОЛЯ_ДЛЯ_ОТБОРА", ПоляОтбора);
	Запрос.Текст = СтрЗаменить(ЗапросТекст, "// УСЛОВИЕ ОТБОРА", УсловиеОтбора);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыделениеСтрокиПоиска = Новый ФорматированнаяСтрока(
		СтрокаПоиска, Новый Шрифт(,,Истина), ЦветаСтиля.ЦветАкцентированияАльфаАвто);
	ВыделениеСтрокиПоискаСокращенная = Новый ФорматированнаяСтрока(
		СтрокаПоискаСокращенная, Новый Шрифт(,,Истина), ЦветаСтиля.ЦветАкцентированияАльфаАвто);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	ДлинаСтрокиПоискаСокращенная = СтрДлина(СтрокаПоискаСокращенная);
	Выборка = РезультатЗапроса.Выбрать();
	НайденоПоСокращеннойСтроке = 2;
	
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеСтроки = Новый Массив;
		
		ИндексСтрокаПоиска = СтрНайти(НРег(Выборка.НайденоПо), НРег(СтрокаПоиска));
		ИндексСтрокаПоискаСокращенная = СтрНайти(НРег(Выборка.НайденоПо), НРег(СтрокаПоискаСокращенная));
		
		Если Выборка.Порядок < НайденоПоСокращеннойСтроке Тогда
			
			ПредставлениеСтроки.Добавить(Лев(Выборка.НайденоПо, ИндексСтрокаПоиска-1));
			ПредставлениеСтроки.Добавить(ВыделениеСтрокиПоиска); 
			ПредставлениеСтроки.Добавить(Сред(Выборка.НайденоПо, ИндексСтрокаПоиска + ДлинаСтрокиПоиска));
			ПредставлениеСтроки.Добавить(" (");
			
			Если ЗначениеЗаполнено(Выборка.ПредставлениеНоменклатуры) Тогда
				
				ПредставлениеСтроки.Добавить(Выборка.ПредставлениеНоменклатуры);
				
			Иначе
				
				ПредставлениеСтроки.Добавить(Строка(Выборка.Значение));
				
			КонецЕсли;
			
			ПредставлениеСтроки.Добавить(")");
			
		Иначе
			
			ПредставлениеСтроки.Добавить(Лев(Выборка.НайденоПо, ИндексСтрокаПоискаСокращенная-1));
			ПредставлениеСтроки.Добавить(ВыделениеСтрокиПоискаСокращенная);
			ПредставлениеСтроки.Добавить(Сред(Выборка.НайденоПо, ИндексСтрокаПоискаСокращенная + ДлинаСтрокиПоискаСокращенная));
			ПредставлениеСтроки.Добавить(" (");
			
			Если ЗначениеЗаполнено(Выборка.ПредставлениеНоменклатуры) Тогда
				
				ПредставлениеСтроки.Добавить(Выборка.ПредставлениеНоменклатуры);
				
			Иначе
				
				ПредставлениеСтроки.Добавить(Строка(Выборка.Значение));
				
			КонецЕсли;
			
			ПредставлениеСтроки.Добавить(")");
			
		КонецЕсли;
		
		ЗначениеВыбора = Новый Структура("Значение,ПометкаУдаления", Выборка.Значение, Выборка.ПометкаУдаления);
		ДанныеВыбора.Добавить(ЗначениеВыбора, Новый ФорматированнаяСтрока(ПредставлениеСтроки));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	Если Объект.ЭтоГруппа Тогда
		
		Возврат ОбязательныеРеквизиты;
		
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("ТипНоменклатуры");
	ОбязательныеРеквизиты.Добавить("ВидНоменклатуры");
	ОбязательныеРеквизиты.Добавить("СтавкаНДС");
	ОбязательныеРеквизиты.Добавить("БазоваяЕдиницаИзмерения");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМноговалютныйУчет") Тогда
		ОбязательныеРеквизиты.Добавить("ВалютаУчета");
	КонецЕсли;
	
	Если Объект.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
		
		Если Автосервис.АртикулОбязательный() Тогда
			ОбязательныеРеквизиты.Добавить("Артикул");
		КонецЕсли;
		
	Иначе
		
		ОбязательныеРеквизиты.Добавить("СпособРаспределенияДопРасходов");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Ссылка.ОсновнаяЕдиницаИзмерения) Тогда
		
		ОбязательныеРеквизиты.Добавить("ОсновнаяЕдиницаИзмерения");
		
	КонецЕсли;
	
	Если Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга 
		И Объект.СпособРаспределенияДопРасходов = Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы Тогда
		
		ОбязательныеРеквизиты.Добавить("СтатьяДопРасходов");
		
	КонецЕсли;
	
	Если
		НЕ Константы.ПроизводительВНоменклатуреНеОбязательный.Получить()
		И ВидыНоменклатурыСНеОбязательнымПроизводителем().Найти(Объект.ВидНоменклатуры) = Неопределено
	Тогда
		
		ОбязательныеРеквизиты.Добавить("Производитель");
		
	КонецЕсли;
	
	Если ВидыНоменклатурыССоставом().Найти(Объект.ВидНоменклатуры) <> Неопределено Тогда
		
		ОбязательныеРеквизиты.Добавить("СоставНабора.Номенклатура");
		ОбязательныеРеквизиты.Добавить("СоставНабора.Количество");
		
	КонецЕсли;
	
	Если Объект.Прослеживаемый Тогда
		ОбязательныеРеквизиты.Добавить("КодТНВЭД");
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты =  Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	Если Объект.ЭтоГруппа Тогда
		
		Возврат УникальныеРеквизиты;
		
	КонецЕсли;
	
	Если ВидыНоменклатурыССоставом().Найти(Объект.ВидНоменклатуры) <> Неопределено Тогда
		
		УникальныеСоставНабора = Новый Массив;
		УникальныеСоставНабора.Добавить("Номенклатура");
		УникальныеСоставНабора.Добавить("ХарактеристикаНоменклатуры");
		УникальныеРеквизиты.Вставить("СоставНабора", УникальныеСоставНабора);
		
	КонецЕсли;
	
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("СпособРаспределенияДопРасходов");
	Результат.Добавить("ЦеноваяГруппа");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

Функция ВидыНоменклатурыССоставом()
	
	ВидыССоставом = Новый Массив();
	ВидыССоставом.Добавить(Перечисления.ВидыНоменклатуры.Комплект);
	ВидыССоставом.Добавить(Перечисления.ВидыНоменклатуры.Набор);
	Возврат ВидыССоставом;
	
КонецФункции

Функция ВидыНоменклатурыСНеОбязательнымПроизводителем()
	
	Результат = Новый Массив();
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Услуга);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Набор);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Комплект);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Опции);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Автомобили);
	Возврат Результат;
	
КонецФункции

Функция ДайДанныеНоменклатурыДляПечати(СписокНоменклатуры, Организация)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Ссылка   КАК Номенклатура,
	|	СпрНоменклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	&Организация КАК Организация,
	|	1 КАК Порядок,
	|	1 КАК Количество
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&СписокНоменклатуры)");	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("Организация", Организация);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДайДействияПечатиПоУмолчанию()
	
	ОсновныйТипЦенПродаж =  ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи");
	ОсновнойСклад = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании");
	Пользователь = Пользователи.ТекущийПользователь();
	ДанныеПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Пользователь, "Организация,ПодразделениеКомпании");
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьОрганизацию", ДанныеПользователя.Организация);
	Если НЕ ЗначениеЗаполнено(Действия.ЗаполнитьОрганизацию) Тогда
		Действия.ЗаполнитьОрганизацию = Неопределено;
	КонецЕсли;
	
	Действия.Вставить("ЗаполнитьПодразделениеКомпании", ДанныеПользователя.ПодразделениеКомпании);
	Если НЕ ЗначениеЗаполнено(Действия.ЗаполнитьПодразделениеКомпании) Тогда
		Действия.ЗаполнитьПодразделениеКомпании = Неопределено;
	КонецЕсли;
	
	Действия.Вставить("ЗаполнитьСклад", ОсновнойСклад);
	Если НЕ ЗначениеЗаполнено(Действия.ЗаполнитьСклад) Тогда
		Действия.ЗаполнитьСклад = Неопределено;
	КонецЕсли;
	
	Действия.Вставить("ЗаполнитьТипЦены", ОсновныйТипЦенПродаж);
	Если НЕ ЗначениеЗаполнено(Действия.ЗаполнитьТипЦены) Тогда
		Действия.ЗаполнитьТипЦены = Неопределено;
	КонецЕсли;
	
	Действия.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	Действия.Вставить("УстановитьРежим", "ПечатьЦенников");
	Действия.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	Действия.Вставить("ЗаполнитьТаблицуТоваров");	
	Возврат Действия;
	
КонецФункции

Функция ПроизводительПоНаименованию(Значение)
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда

		Возврат Значение;
		
	КонецЕсли;
	
	НайденныйПроизводитель = Справочники.Производители.НайтиПоНаименованию(Значение, Истина);
	
	Если ЗначениеЗаполнено(НайденныйПроизводитель) Тогда
		
		Возврат НайденныйПроизводитель;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Производители.Ссылка КАК Производитель
		|ИЗ
		|	Справочник.Производители КАК Производители
		|ГДЕ
		|	Производители.Наименование ПОДОБНО &Наименование"
	);
	Запрос.УстановитьПараметр("Наименование", "%" + Значение + "%");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Значение;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Производитель;
	
КонецФункции

Процедура ЗаполнитьОсновнуюЕдиницу(Элемент)
	
	ЗначениеДляТипаНоменклатуры = Справочники
		.ТипыНоменклатуры
		.ИспользованиеСвязанныхСправочниковПредопределеннымиЭлементами()
		.Получить(Элемент.ТипНоменклатуры);		
		
	Если
		ЗначениеДляТипаНоменклатуры <> Неопределено
		И ЗначениеЗаполнено(Элемент.БазоваяЕдиницаИзмерения)
	Тогда
		
		Если ЗначениеДляТипаНоменклатуры.ИспользованиеЕдиницИзмерения = 1 Тогда
			
			Элемент.ОсновнаяЕдиницаИзмерения = ПолучитьОсновнуюЕдиницуПоБазовой(Элемент, Элемент.ТипНоменклатуры);
			
		Иначе
			
			Элемент.ОсновнаяЕдиницаИзмерения = ПолучитьОсновнуюЕдиницуПоБазовой(Элемент,
				Справочники.Номенклатура[Элемент.ИмяПредопределенныхДанных]);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНастройкуОтчета(КлючОтчета) Экспорт
	
	ВариантОтчета = Неопределено;
	
	Если КлючОтчета = "ОстаткиИОборотыТоваровОрдерногоСклада" Тогда
		
		Отчет = Отчеты.ОстаткиИОборотыТоваровОрдерногоСклада.Создать();
		ВариантОтчета = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек.Остатки.Настройки;
		
		Показатели      = ВариантОтчета.Выбор;
		СтруктураОтчета = ВариантОтчета.Структура;
		СтруктураОтчета.Очистить();
		
		Для Каждого ТекПоказатель Из Показатели.Элементы Цикл
			Если ТипЗнч(ТекПоказатель) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				ТекПоказатель.Использование = Истина;
				Для Каждого ТекВложенныйПоказатель Из ТекПоказатель.Элементы Цикл
					ТекВложенныйПоказатель.Использование = Истина;
				КонецЦикла;
			ИначеЕсли НЕ ТипЗнч(ТекПоказатель) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
				ТекПоказатель.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаОтчета = СтруктураОтчета.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		
		// добавляем измерения строки
		ГруппировкаСкладКомпании = ОтчетыПлатформаСервер.СКД_ДобавитьГруппировку(ТаблицаОтчета.Строки, "СкладКомпании");
		ГруппировкаЯчейка        = ОтчетыПлатформаСервер.СКД_ДобавитьГруппировку(ГруппировкаСкладКомпании.Структура, "Ячейка");
		
	ИначеЕсли КлючОтчета = "ОстаткиИОборотыТоваров" Тогда
		
		Отчет = Отчеты.ОстаткиИОборотыТоваров.Создать();
		ВариантОтчета = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек.Остатки.Настройки;
		
		Показатели      = ВариантОтчета.Выбор;
		СтруктураОтчета = ВариантОтчета.Структура;
		СтруктураОтчета.Очистить();
		
		Для Каждого ТекПоказатель Из Показатели.Элементы Цикл
			Если ТипЗнч(ТекПоказатель) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				ТекПоказатель.Использование = Истина;
				Для Каждого ТекВложенныйПоказатель Из ТекПоказатель.Элементы Цикл
					ТекВложенныйПоказатель.Использование = Истина;
				КонецЦикла;
			ИначеЕсли НЕ ТипЗнч(ТекПоказатель) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
				ТекПоказатель.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаОтчета = СтруктураОтчета.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		
		// добавляем измерения строки
		ГруппировкаНоменклатуры = ОтчетыПлатформаСервер.СКД_ДобавитьГруппировку(ТаблицаОтчета.Строки, "Номенклатура");
		ГруппировкаНоменклатуры.ПоляГруппировки.Элементы[0].ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;

	ИначеЕсли КлючОтчета = "ОстаткиИОборотыЗаказовПокупателей" Тогда
		
		Отчет = Отчеты.ОстаткиИОборотыЗаказовПокупателей.Создать();
		ВариантОтчета = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек.Остатки.Настройки;
		
		Показатели      = ВариантОтчета.Выбор;
		СтруктураОтчета = ВариантОтчета.Структура;
		СтруктураОтчета.Очистить();
		
		Для Каждого ТекПоказатель Из Показатели.Элементы Цикл
			Если ТекПоказатель.Поле=Новый ПолеКомпоновкиДанных("КонечныйОстаток.Резерв") Тогда 
				ТекПоказатель.Использование = Истина;
			Иначе 
				ТекПоказатель.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаОтчета = СтруктураОтчета.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		
		// Добавляем измерения строки
		ГруппировкаКонтрагент = ОтчетыПлатформаСервер.СКД_ДобавитьГруппировку(ТаблицаОтчета.Строки, "Контрагент");
		ГруппировкаКонтрагент.ПоляГруппировки.Элементы[0].ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		ГруппировкаЗаказ = ОтчетыПлатформаСервер.СКД_ДобавитьГруппировку(ГруппировкаКонтрагент.Структура, "Заказ");
		
	// +Альфа-Авто
	ИначеЕсли КлючОтчета = "ОстаткиИОборотыТоваровВПроизводстве" Тогда
		
		Отчет = Отчеты.ОстаткиИОборотыТоваровВПроизводстве.Создать();
		ВариантОтчета = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек.Остатки.Настройки;
		
		ОтборОтчета = ВариантОтчета.Отбор;
		
		// фильтры
		КоличествоПодчиненных = ОтборОтчета.Элементы.Количество()-1;
		Пока КоличествоПодчиненных >= 0 Цикл
			ОтборОтчета.Элементы.Удалить(ОтборОтчета.Элементы[КоличествоПодчиненных]);
			КоличествоПодчиненных = КоличествоПодчиненных - 1;
		КонецЦикла;
	// -Альфа-Авто
		
	КонецЕсли;
	
	Возврат ВариантОтчета;
	
КонецФункции

#КонецОбласти

#КонецЕсли

