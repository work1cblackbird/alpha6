// Модуль менеджера справочника "Виды состояний пакетов работ"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НеСтартовал";
	Элемент.Код                       = "000000001";
	Элемент.Наименование              = НСтр("ru = 'Не стартовал'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Цвет                      = Новый ХранилищеЗначения(Новый Цвет(255, 255, 200));
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Ожидает";
	Элемент.Код                       = "000000002";
	Элемент.Наименование              = НСтр("ru = 'Ожидает'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Цвет                      = Новый ХранилищеЗначения(Новый Цвет(200, 255, 200));
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВРаботе";
	Элемент.Код                       = "000000003";
	Элемент.Наименование              = НСтр("ru = 'В работе'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Цвет                      = Новый ХранилищеЗначения(Новый Цвет(255, 255, 200));
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Закрыт";
	Элемент.Код                       = "000000004";
	Элемент.Наименование              = НСтр("ru = 'Закрыт'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Цвет                      = Новый ХранилищеЗначения(Новый Цвет(255, 255, 255));


КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

// Получает соответствие состояний пакетов работ и цветов
//                                   
// Возвращаемое значение:
//  Соответствие - соответствие состояний пакетов работ и цветов 
//
Функция ЦветаСостоянийПакетовРабот() Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыСостоянийПакетовРабот.Ссылка КАК Состояние,
	|	ВидыСостоянийПакетовРабот.Цвет
	|ИЗ
	|	Справочник.ВидыСостоянийПакетовРабот КАК ВидыСостоянийПакетовРабот";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Состояние, Выборка.Цвет.Получить());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти	

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыСостоянийПакетовРабот.Ссылка,
	|	ВидыСостоянийПакетовРабот.Наименование
	|ИЗ
	|	Справочник.ВидыСостоянийПакетовРабот КАК ВидыСостоянийПакетовРабот
	|ГДЕ
	|	ВидыСостоянийПакетовРабот.ПометкаУдаления = ЛОЖЬ
	|";
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
