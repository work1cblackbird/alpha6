
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	// Установим автомасштаб для картинки
	Элементы.АдресКартинки.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	
	ЗаполнитьУчетныеПолитики();
	ЗаполнитьСписокВыбораЧасовогоПояса();
	ОбновитьПодсказкуЧасовогоПояса(Элементы.ЧасовойПоясРасширеннаяПодсказка.Заголовок, Объект.ЧасовойПояс);
	Элементы.НастроитьУчетнуюПолитику.Доступность = ПравоДоступа("Просмотр", 
														Метаданные.Обработки.НастройкаПараметровУчета);
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, ?(ПустаяСтрока(Объект.НаименованиеПолное), 
														Объект.Наименование, Объект.НаименованиеПолное));
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();	
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
		
    УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	СчитываниеЗначенийРегистраСведенияКомпании();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		НастроитьПараметрыВыбораЭлементовФормы();
		НастроитьЭлементыСтраницыЭДО(ЭтотОбъект);
		УправлениеДиалогомНаСервере();
			
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "РасчетныеСчета");
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "УстановкаОсновногоСчета" И Параметр.Владелец = Объект.Ссылка Тогда
		
		Объект.ОсновнойБанковскийСчет = Параметр.НовыйОсновнойСчет;
		
		Если НЕ Модифицированность Тогда
			Записать(Новый Структура("УстановкаОсновногоСчета"));
		КонецЕсли;
		
		УИН = "";
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
			УИН = Источник.УникальныйИдентификатор;
		КонецЕсли;
		
		Оповестить("УстановкаОсновногоСчетаВыполнена", УИН);
		
		Возврат;
		
	КонецЕсли;
	
	// АльфаАвто.РаботаСФайлами
	РаботаСФайламиАльфаАвтоКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ПолучениеПредставленияОсновногоАдреса();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Инициализируем текущее изображение с прикрепленных файлов
	ТекущаяКартинка = Объект.ФайлКартинки;
	
	РаботаСФайламиАльфаАвтоВызовСервера.ВывестиТекущееИзображение(ЭтотОбъект);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	НастроитьЭлементыСтраницыЭДО(ЭтотОбъект);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ПодразделенияКомпании");
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры 

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриЗаписиФормыОбъектаСклонения(
		ЭтотОбъект,
		?(ПустаяСтрока(Объект.НаименованиеПолное), Объект.Наименование, Объект.НаименованиеПолное),
		ТекущийОбъект.Ссылка);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаписьЗначенияРегистраСведенияКомпании(Руководитель, Перечисления.ВидыОбъектовСведений.Руководитель); 
	ЗаписьЗначенияРегистраСведенияКомпании(Отпустил, Перечисления.ВидыОбъектовСведений.Отпустил);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПараметрыЗаписи.Свойство("УстановкаОсновногоСчета") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Основной счет установлен.'"));
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ОбособленноеПодразделениеПриИзмененииСервер()	
	
	УстановитьВидимостьГруппОбособленногоПодразделения();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	
	Если
		Не Параметры.Ключ.Пустая()
		И Объект.ОбособленноеПодразделение
		И ПолучитьНаличиеПодчиненныхНеОбособленныхПодразделений(Объект.Ссылка)
	Тогда
		
		Объект.ОбособленноеПодразделение = Ложь;
		ПоказатьПредупреждение(,НСтр("ru = 'Есть подчиненные подразделения, которые не обособлены'"));
		Возврат;
		
	КонецЕсли;
	
	ОбособленноеПодразделениеПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Справочники.ПодразделенияКомпании.НаименованиеПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеПриИзмененииНаСервере();
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.Наименование);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.НаименованиеПолное);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	НаименованиеПолноеПриИзмененииНаСервере();
	СохранитьПереименованиеВИстории(Объект);
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПолноеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	РасчетныеСчета.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ИсторияКППНажатие(Элемент)
	
	РедактированиеИсторииКлиент.ОткрытьИсториюКПП(ЭтотОбъект, Объект.ИсторияКПП, Объект.КПП, Элементы.КПП.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНаименованиеПолноеНажатие(Элемент)
	
	РедактированиеИсторииКлиент.ОткрытьИсториюПолныхНаименований(
		ЭтотОбъект, 
		Объект.ИсторияНаименований,
		Объект.НаименованиеПолное,
		Элементы.НаименованиеПолное.ТолькоПросмотр
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	КПППриИзмененииНаСервере();
	СохранитьКППВИстории(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КПППриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтоматическаяУстановкаПризнакаУПДУКДНажатие(Элемент)
	
	ДокументыСПризнаком = НастройкиАвтоматическойУстановки();
	
	ОповещениеПослеВыбора = Новый ОписаниеОповещения("Подключаемый_АвтоматическаяУстановкаПризнакаУПДУКД", ЭтотОбъект);
	
	ДокументыСПризнаком.ПоказатьОтметкуЭлементов(
		ОповещениеПослеВыбора,
		НСтр("ru = 'Настройка автоматической установки признака ""Универсальный документ""'")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧасовойПоясПриИзменении(Элемент)
	
	ОбновитьПодсказкуЧасовогоПояса(Элементы.ЧасовойПоясРасширеннаяПодсказка.Заголовок, Объект.ЧасовойПояс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьКакАктОбОказанииУслугПриИзменении(Элемент)
	
	НастроитьЭлементыСтраницыЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКИОрганизацииДляЭДПриИзменении(Элемент)
	
	Если Объект.ИспользоватьКИОрганизацииДляЭД Тогда
		Объект.ИспользоватьКИПодразделенияПриПечати = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРеквизитыПодразделенияВПечатныхФормахПриИзменении(Элемент)

	Если Объект.ИспользоватьКИПодразделенияПриПечати Тогда
		Объект.ИспользоватьКИОрганизацииДляЭД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	РаботаСФайламиАльфаАвтоКлиент.АдресКартинкиНажатие(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетныеСчета

#Область ОбработчикиСобытийПолейТаблицыФормыРасчетныеСчета

&НаКлиенте
Процедура РасчетныеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		
		СтруктураОснование = Новый Структура("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Основание", СтруктураОснование);
		
		ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаЗаписиРасчетногоСчета", ЭтотОбъект);
		
		ОткрытьФорму(
			"Справочник.БанковскиеСчета.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОбработкаОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчетныеСчетаОбработкаЗаписиНовогоНаСервере(НовыйОбъект, ПараметрыДействия = Неопределено)
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета
		|ГДЕ
		|Владелец = &Организация");
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	// Если у организации этот счет единственный, сразу сделаем его основным
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Объект.ОсновнойБанковскийСчет = Выборка.Ссылка;
	КонецЕсли;

КонецПроцедуры 
&НаКлиенте
Процедура РасчетныеСчетаОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	РасчетныеСчетаОбработкаЗаписиНовогоНаСервере(НовыйОбъект);
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)

	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.СклонениеПредставленийОбъектов

&НаКлиенте
Процедура Склонения(Команда)
	
	СклонениеПредставленийОбъектовКлиент.ПоказатьСклонение(ЭтотОбъект, Объект.Наименование);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

&НаСервере
Процедура УстановитьОсновнойСчетНаСервере()
	
	ТекСтрока = Элементы.РасчетныеСчета.ТекущаяСтрока;
	Объект.ОсновнойБанковскийСчет = ТекСтрока;
	НастроитьПараметрыВыбораЭлементовФормы();
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОсновнойСчет(Команда)
	
	ТекСтрока = Элементы.РасчетныеСчета.ТекущаяСтрока;
	Если  ТекСтрока = Неопределено Тогда
		Возврат;
	Иначе
		УстановитьОсновнойСчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры 
&НаКлиенте
Процедура НастройкаШтрихкодирования(Команда)
	
	ПараметрыФормы = Новый Структура("ПодразделениеКомпании", Объект.Ссылка);
	ОткрытьФорму(
		"РегистрСведений.ИспользованиеШтрихкодированияДокументов.Форма.ФормаСпискаПоПодразделению", 
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтоматическоеШтрихкодированиеДокументовПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура НастроитьУчетнуюПолитику(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НастроитьУчетнуюПолитику");
	ПараметрыОткрытия.Вставить("ОбъектНастройки", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.НастройкаПараметровУчета.Форма.НастройкаУчетнойПолитики", 
			ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ДобавитьИзображение(ЭтотОбъект, Объект, Команда);
	
КонецПроцедуры 

&НаСервере
Процедура УдалитьИзображениеНаСервере()
	
	РаботаСФайламиАльфаАвтоВызовСервера.УдалитьИзображение(ЭтотОбъект);
	ПолучитьСледующееИзображение("Вперед");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	Если Объект.ФайлКартинки = ТекущаяКартинка Тогда
		ВывестиСообщение(НСтр("ru = 'Картинка установлена как логотип. Прежде чем удалить ее необходимо снять признак ""Логотип"".'"));
		Возврат;
	КонецЕсли; 
	
	УдалитьИзображениеНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ПросмотретьИзображение(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПросмотретьИзображения(Команда)
	
	ДвижениеПросмотра = ?(СтрНайти(Команда.Имя, "Вперед"), "Вперед", "Назад");
	
	ПолучитьСледующееИзображение(ДвижениеПросмотра);
	
КонецПроцедуры // ПросмотретьИзображения()

&НаКлиенте
Процедура НазначитьЛоготип(Команда)
	
	Если НЕ РаботаСФайламиАльфаАвтоКлиент.ФайлЯвляетсяДопустимойКартинкой(ТекущаяКартинка) Тогда
		
		Возврат;
		
	КонецЕсли;

	Объект.ФайлКартинки = ТекущаяКартинка;
	Модифицированность = Истина;
	УправлениеДиалогомНаСервере();
	Элементы.КоманднаяПанельКартинкиЛоготип.Скрыть();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛоготип(Команда)
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		ТекущаяКартинка = Объект.ФайлКартинки;
	КонецЕсли;
	
	ПоказатьЛоготипНаСервере();
	Элементы.КоманднаяПанельКартинкиЛоготип.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЛоготип(Команда)
	
	Объект.ФайлКартинки = Неопределено;
	УправлениеДиалогомНаСервере();
	Элементы.КоманднаяПанельКартинкиЛоготип.Скрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.СклонениеПредставленийОбъектов

&НаКлиенте 
Процедура Подключаемый_ПросклонятьПредставлениеПоВсемПадежам() 
	
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, ?(ПустаяСтрока(Объект.НаименованиеПолное), 
					Объект.Наименование, Объект.НаименованиеПолное));
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
        УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, 
														ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, 
			ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

// +СофтФон

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер", "");
	Телефон = ЭтотОбъект[ИмяРеквизита];
	Если НЕ ЗначениеЗаполнено(СокрЛП(Телефон)) Тогда 
		Возврат; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ПозвонитьНаНомер", "");
	Телефон = ЭтотОбъект[ИмяРеквизита];
	сфпСофтФонПроКлиент.сфпПозвонить(Телефон, Объект.Ссылка);
КонецПроцедуры

// -СофтФон

// Заполняет значения учетных политик.
&НаСервере
Процедура ЗаполнитьУчетныеПолитики()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПВХУчетныеПолитики.Ссылка КАК Параметр,
	|	ЕСТЬNULL(УчетныеПолитикиСрезПоследних.Значение, ЕСТЬNULL(ПВХУчетныеПолитики.ЗначениеПоУмолчанию, """")) КАК Значение
	|ИЗ
	|	ПланВидовХарактеристик.УчетныеПолитики КАК ПВХУчетныеПолитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеПолитики.СрезПоследних(&Дата, Объект = &Объект) КАК УчетныеПолитикиСрезПоследних
	|		ПО (УчетныеПолитикиСрезПоследних.Параметр = ПВХУчетныеПолитики.Ссылка)
	|ГДЕ
	|	ПВХУчетныеПолитики.Ссылка  В (&МассивУчетныхПолитик)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПВХУчетныеПолитики.Код";
	
	МассивУчетныхПолитик = Новый Массив;
	МассивУчетныхПолитик.Добавить(ПланыВидовХарактеристик.УчетныеПолитики.ЗакрытиеЗаказовПоПодразделению);
	МассивУчетныхПолитик.Добавить(ПланыВидовХарактеристик.УчетныеПолитики.ЗакрыватьНераспределенныеЗаказыПокупателей);
	МассивУчетныхПолитик.Добавить(ПланыВидовХарактеристик.УчетныеПолитики.ОтменаКонтроляСуммыКредита);
	МассивУчетныхПолитик.Добавить(ПланыВидовХарактеристик.УчетныеПолитики.ВидНалога);
	МассивУчетныхПолитик.Добавить(ПланыВидовХарактеристик.УчетныеПолитики.ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду);
	
	Запрос.УстановитьПараметр("Дата",            ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Объект",          Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивУчетныхПолитик", МассивУчетныхПолитик);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ЗакрытиеЗаказовПоПодразделению Тогда
			ЗакрытиеЗаказовПоПодразделению = Выборка.Значение;
		ИначеЕсли Выборка.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ЗакрыватьНераспределенныеЗаказыПокупателей Тогда
			ЗакрыватьНераспределенныеЗаказыПокупателей = Выборка.Значение;
		ИначеЕсли Выборка.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ОтменаКонтроляСуммыКредита Тогда
			ОтменаКонтроляСуммыКредита = Выборка.Значение;
		ИначеЕсли Выборка.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ВидНалога Тогда
			ВидНалога = Выборка.Значение;
		ИначеЕсли Выборка.Параметр = ПланыВидовХарактеристик.УчетныеПолитики.ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду Тогда
			ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду = Выборка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьУчетныеПолитики()

#Область РедактированиеИстории

// Обновление таблиц истории реквизитов
//
// Параметры:
//  Значение - Неопределено, Массив - Результат редактирования таблицы истории;
//  ОписаниеПриемника - Структура - Описания реквизита и таблицы для которых редактировалась история;
//
&НаКлиенте
Процедура Подключаемый_РедактированиеИсторииЗавершение(Значение, ОписаниеПриемника) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ОписаниеПриемника.Таблица].Очистить();
	
	Если Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Значение Цикл
		ЗаполнитьЗначенияСвойств(Объект[ОписаниеПриемника.Таблица].Добавить(), Строка);
	КонецЦикла;
	
	Объект[ОписаниеПриемника.Реквизит] = Значение[Значение.ВГраница()].Значение;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОбработкаЗаписиРасчетногоСчета(НовыйОбъект, ДополнительныеПараметры = Неопределено) Экспорт
	
	РасчетныеСчетаОбработкаЗаписиНовогоНаСервере(НовыйОбъект);
	
КонецПроцедуры // Подключаемый_ОбработкаЗаписиРасчетногоСчета()

&НаСервере
Процедура ПолучитьСледующееИзображение(ДвижениеПросмотра)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ПолучитьСледующееИзображение(ЭтотОбъект, ДвижениеПросмотра);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры // ПолучитьСледующееИзображение()

&НаСервере
Процедура ЗаполнитьСписокВыбораЧасовогоПояса()
	
	Элементы.ЧасовойПояс.СписокВыбора.ЗагрузитьЗначения(ПолучитьДопустимыеЧасовыеПояса());
	Элементы.ЧасовойПояс.СписокВыбора.Вставить(0, "", НСтр("ru = 'Согласно настройке ИБ'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПодсказкуЧасовогоПояса(Подсказка, ЧасовойПояс)
	
	ВремяИБ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НСтр("ru = 'Время ИБ'"));
	ВремяИБ.Добавить(" ");
	ВремяИБ.Добавить(Новый ФорматированнаяСтрока(Формат(ТекущаяДатаСеанса(), "ДЛФ=T"),, ЦветаСтиля.ТекстИнформационнойНадписи));
	
	ВремяПодразделения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НСтр("ru = 'Время в подразделении'"));
	ВремяПодразделения.Добавить(" ");
	ВремяПодразделения.Добавить(
		Новый ФорматированнаяСтрока(Формат(ВремяПодразделения(ЧасовойПояс), "ДЛФ=T"),, ЦветаСтиля.ТекстИнформационнойНадписи));
	
	Подсказка = Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(ВремяИБ), Символы.ПС, Новый ФорматированнаяСтрока(ВремяПодразделения));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВремяПодразделения(ЧасовойПояс)
	
	Если ПустаяСтрока(ЧасовойПояс) ИЛИ ЧасовойПояс = ЧасовойПоясСеанса() Тогда
		
		Возврат ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	Возврат МестноеВремя(УниверсальноеВремя(ТекущаяДатаСеанса()), ЧасовойПояс);
	
КонецФункции

// Функция записи параметров организации в регистр сведений
// Параметры:
//  Значение  - Произвольный - Значение регистра сведений
//  ВидОбъекта  - ПеречислениеСсылка.ВидыОбъектовСведений - 
//                 Описание вида значения регистра сведений
//
// Возвращаемое значение:
//   Булево   - ошибка записи значения
//
&НаСервере
Функция ЗаписьЗначенияРегистраСведенияКомпании(Значение, ВидОбъекта)
	
	Отказ = Ложь;
	
	// Если нет прав на изменение регистра, то не будем записывать.
	Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СведенияКомпании) Тогда
		Возврат Отказ;
	КонецЕсли;
	
	Возврат РегистрыСведений.СведенияКомпании.ЗаписьЗначенияРегистраСведенияКомпании(Объект.Ссылка, ВидОбъекта, Значение);
	
КонецФункции // ЗаписьЗначенияРегистраСведенияКомпании()

// Функция считывания параметров организации из регистра сведений
//
&НаСервере
Процедура СчитываниеЗначенийРегистраСведенияКомпании()
	УстановитьПривилегированныйРежим(Истина);
	
	Руководитель     = ОрганизацииАльфаАвто.Руководитель(Объект.Ссылка);
	Отпустил		 = ОрганизацииАльфаАвто.Отпустил(Объект.Ссылка);
		
КонецПроцедуры // СчитываниеЗначенийРегистраСведенийКомпании()

&НаСервереБезКонтекста
Функция ПолучитьНаименованияНаТекущийМомент(Подразделение)
	
	Возврат РеквизитыСИсторией.ПолучитьНаименованияНаДату(Подразделение, ТекущаяДатаСеанса());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьПереименованиеВИстории(Подразделение)
	
	Если ПустаяСтрока(Подразделение.НаименованиеПолное) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Наименования = ПолучитьНаименованияНаТекущийМомент(Подразделение.Ссылка);
	НаименованиеНаСегодня = Наименования.НаименованиеПолное;
	
	Если Подразделение.ИсторияНаименований.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(НаименованиеНаСегодня) Тогда
		
		Если НЕ ЗначениеЗаполнено(НаименованиеНаСегодня) Тогда
			
			НаименованиеНаСегодня =  Подразделение.НаименованиеПолное;
			
		КонецЕсли;
		
		НайденныеСтроки = Подразделение.ИсторияНаименований.НайтиСтроки(Новый Структура("Период", Дата("00010101")));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденныеСтроки[0].НаименованиеПолное = НаименованиеНаСегодня;
			Возврат;
			
		КонецЕсли;
		
		НоваяСтрока = Подразделение.ИсторияНаименований.Добавить();
		НоваяСтрока.НаименованиеПолное = НаименованиеНаСегодня;
		НоваяСтрока.Период = Дата("00010101");
		
	КонецЕсли;
	
	Если НаименованиеНаСегодня = Подразделение.НаименованиеПолное Тогда
		
		Возврат;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	#Иначе
		
		ДатаСеанса = ТекущаяДатаСеанса();
		
	#КонецЕсли
	
	НайденныеСтроки = Подразделение.ИсторияНаименований.НайтиСтроки(
		Новый Структура("Период", НачалоДня(ДатаСеанса)));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекСтрока = НайденныеСтроки[0];
		ТекСтрока.НаименованиеПолное = Подразделение.НаименованиеПолное;
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Подразделение.ИсторияНаименований.Добавить();
	НоваяСтрока.НаименованиеПолное = Подразделение.НаименованиеПолное;
	НоваяСтрока.Период = ДатаСеанса;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКППНаТекущийМомент(Подразделение)
	
	Возврат РеквизитыСИсторией.ПолучитьКППНаДату(Подразделение, ТекущаяДатаСеанса());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьКППВИстории(Подразделение)
	
	Если ПустаяСтрока(Подразделение.КПП) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КППНаСегодня = ПолучитьКППНаТекущийМомент(Подразделение.Ссылка);
	
	Если Подразделение.ИсторияКПП.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(КППНаСегодня) Тогда
		
		Если НЕ ЗначениеЗаполнено(КППНаСегодня) Тогда
			
			КППНаСегодня =  Подразделение.КПП;
			
		КонецЕсли;
		
		НайденныеСтроки = Подразделение.ИсторияКПП.НайтиСтроки(Новый Структура("Период", Дата("00010101")));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденныеСтроки[0].КПП = КППНаСегодня;
			Возврат;
			
		КонецЕсли;
		
		НоваяСтрока = Подразделение.ИсторияКПП.Добавить();
		НоваяСтрока.КПП = КППНаСегодня;
		НоваяСтрока.Период = Дата("00010101");
		
	КонецЕсли;
	
	Если КППНаСегодня = Подразделение.КПП Тогда
		
		Возврат;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	#Иначе
		
		ДатаСеанса = ТекущаяДатаСеанса();
		
	#КонецЕсли
	
	НайденныеСтроки = Подразделение.ИсторияКПП.НайтиСтроки(
		Новый Структура("Период", НачалоДня(ДатаСеанса)));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекСтрока = НайденныеСтроки[0];
		ТекСтрока.КПП = Подразделение.КПП;
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Подразделение.ИсторияКПП.Добавить();
	НоваяСтрока.КПП = Подразделение.КПП;
	НоваяСтрока.Период = ДатаСеанса;
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// отбор счетов расчета по подразделению
	Если ЗначениеЗаполнено(Объект.Ссылка) 
		И РасчетныеСчета.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество() = 0 Тогда
		ЭлементОтбора = РасчетныеСчета.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		
		ВладельцыРасчетногоСчета = Новый СписокЗначений();
		ВладельцыРасчетногоСчета.Добавить(Объект.Ссылка);
		ВладельцыРасчетногоСчета.Добавить(Объект.Организация);
		
		ЭлементОтбора.ПравоеЗначение = ВладельцыРасчетногоСчета;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	// Если это предопределенный элемент (Все подразделения), то для него указывать организацию не обязательно.
	Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.Ссылка = Справочники.ПодразделенияКомпании.ОсновноеПодразделение Тогда
		Элементы.Организация.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.Организация.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если Объект.АвтоматическоеШтрихкодированиеДокументов Тогда
		Элементы.НастройкаШтрихкодирования.Доступность = Истина;
	Иначе
		Элементы.НастройкаШтрихкодирования.Доступность = Ложь;
	КонецЕсли;
	
	// Если объект не записан убираем доступность для вкладок
	НовыйОбъект = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.СтраницаРасчетныеСчета.Доступность = НовыйОбъект;
	Элементы.СтраницаУчетнаяПолитика.Доступность = НовыйОбъект;
	
	РаботаСФайламиАльфаАвто.УстановитьДоступностьКомандДляИзображений(Объект, ЭтаФорма);
	
	Элементы.Руководитель.ТолькоПросмотр = НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СведенияКомпании); 
	Элементы.Отпустил.ТолькоПросмотр = НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СведенияКомпании); 
	
	ОбновитьВидимостьКоманднойПанелиКартинок();
	
	Если Объект.ОбособленноеПодразделение Тогда
		ДоступностьОП = ?(ЗначениеЗаполнено(Объект.Родитель), НЕ ЭтоОбособленноеПодразделение(Объект.Родитель), Истина);
	Иначе
		ДоступностьОП = ?(Объект.Ссылка.Пустая(), Истина, НЕ ПолучитьНаличиеПодчиненныхНеОбособленныхПодразделений(Объект.Ссылка));
	КонецЕсли;
	Элементы.ОбособленноеПодразделение.Доступность = ДоступностьОП;
	
	УстановитьВидимостьГруппОбособленногоПодразделения();
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасчетныеСчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасчетныеСчета.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОсновнойБанковскийСчет");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт("MS Shell Dlg", 8, Истина));
	
КонецПроцедуры 

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-warning
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти

&НаСервере
Процедура ПоказатьЛоготипНаСервере()
	
	УстановитьТекущееИзображение();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущееИзображение()
	
	Если ЗначениеЗаполнено(ТекущаяКартинка) Тогда
		ПараметрыДействия = Новый Структура("НоваяКартинкаОписания", ТекущаяКартинка);
		РаботаСФайламиАльфаАвтоВызовСервера.УстановитьТекущееИзображение(ЭтотОбъект, ПараметрыДействия, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКоманднойПанелиКартинок()
	
	ЕстьЛоготип = НЕ Объект.ФайлКартинки.Пустая();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НазначитьЛоготип",
		"Видимость",
		НЕ ЕстьЛоготип
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоказатьЛоготип",
		"Видимость",
		ЕстьЛоготип
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОчиститьЛоготип",
		"Видимость",
		ЕстьЛоготип
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыСтраницыЭДО(Форма)
	
	Форма
		.Элементы
		.ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО
		.Доступность = Форма.Объект.ОтправлятьКакАктОбОказанииУслуг;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;  
	ПараметрыФормы.Вставить("НаселенныйПунктДетально",        НаселенныйПунктДетально);
	ПараметрыФормы.Вставить("СкрыватьНеактуальныеАдреса",     ЛОЖЬ);
	ПараметрыФормы.Вставить("ФорматАдреса",                   ФорматАдреса);
	ПараметрыФормы.Вставить("СервисКлассификатораНедоступен", СервисКлассификатораНедоступен);  
	ПараметрыФормы.Вставить("ОтображатьКнопкиВыбора",         Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаСведенийНаселенногоПункта", ЭтотОбъект);
	ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.НаселенныйПунктАдреса", 
					ПараметрыФормы, Объект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОсновнойАдресНачалоВыбора()

&НаКлиенте
Процедура ПослеВводаСведенийНаселенногоПункта(Результат, ДополнительныеПараметры) Экспорт
		
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Результат)<>Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	
	// Выбор из формы детального ввода.
	НаселенныйПунктДетально = Результат.НаселенныйПунктДетально;
	ИсключатьГородИзМуниципальногоАдреса = Результат.ИсключатьГородИзМуниципальногоАдреса;
	
	ПредставлениеОсновногоАдреса = ПредставлениеНаселенногоПунктаАдреса(НаселенныйПунктДетально);
	//// Получим XML представление адреса
	Объект.ОсновнойАдрес = ОбработкаИзмененияНаселенногоПунктаСервер(НаселенныйПунктДетально, ФорматАдреса);  
		
КонецПроцедуры // ОсновнойАдресОбработкаВыбора()

&НаКлиенте
Функция ПредставлениеНаселенногоПунктаАдреса(Адрес)
	
	СписокЗаполненныхУровней = Новый Массив;
	
	Для каждого ИмяУровня Из РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(Адрес.AddressType, Ложь) Цикл
		
		Если ЗначениеЗаполнено(Адрес[ИмяУровня]) Тогда
			
			СписокЗаполненныхУровней.Добавить(
				УправлениеКонтактнойИнформациейКлиентСервер.СоединитьНаименованиеИТипАдресногоОбъекта(Адрес[ИмяУровня],
				Адрес[ИмяУровня + "Type"], СтрСравнить(ИмяУровня, "Area") = 0));
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат СтрСоединить(СписокЗаполненныхУровней, ", ");
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбработкаИзмененияНаселенногоПунктаСервер(НаселенныйПунктДетально, ФорматАдреса)
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзJSONВXML(
		НаселенныйПунктДетально,
		Перечисления.ТипыКонтактнойИнформации.Адрес
	);
	
	ОсновнойАдрес = КонтактнаяИнформация;
	Возврат ОсновнойАдрес;
	
КонецФункции

&НаСервере
Процедура ПолучениеПредставленияОсновногоАдреса()
	
	Если
		ЗначениеЗаполнено(Объект.ОсновнойАдрес) 
		И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Объект.ОсновнойАдрес)
	Тогда
		
		XDTOДанныеАдреса = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзXML(
			Объект.ОсновнойАдрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
		ПредставлениеОсновногоАдреса = XDTOДанныеАдреса.Представление;
		НаселенныйПунктДетально = УправлениеКонтактнойИнформациейСлужебный
			.КонтактнаяИнформацияВСтруктуруJSON(XDTOДанныеАдреса);
			
	КонецЕсли;
	
КонецПроцедуры

#Область АльфаАвтоРаботаСФайлами

&НаКлиенте
Процедура Подключаемый_РаботаСФайламиАльфаАвтоОбработкаОповещения(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, Объект);
	
	Если РезультатОповещения.Свойство("НоваяКартинкаОписания") Тогда 
		ЭтотОбъект.Модифицированность = Истина;
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ЭтоОбособленноеПодразделение(Ссылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ОбособленноеПодразделение");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаличиеПодчиненныхНеОбособленныхПодразделений(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПодразделенияКомпании.Родитель,
	|	ПодразделенияКомпании.ОбособленноеПодразделение
	|ИЗ
	|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
	|ГДЕ
	|	ПодразделенияКомпании.Родитель В ИЕРАРХИИ(&Родитель)
	|	И ПодразделенияКомпании.ОбособленноеПодразделение = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьГруппОбособленногоПодразделения()
	
	Элементы.ГруппаОсновныеСведения.Видимость = Объект.ОбособленноеПодразделение;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоматическаяУстановкаПризнакаУПДУКД(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Результат Цикл
		
		ПараметрыОтбора = Новый Структура("Документ", ТекущаяСтрока.Значение);
		НайденныеСтроки = Объект.НастройкаАвтоматическойУстановкиУниверсальногоДокумента.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 1 Тогда
			НайденныеСтроки[0].Значение = ТекущаяСтрока.Пометка;
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция НастройкиАвтоматическойУстановки()
	
	Результат = Новый СписокЗначений;
	
	Если Объект.НастройкаАвтоматическойУстановкиУниверсальногоДокумента.Количество() = 0 Тогда
		Справочники.ПодразделенияКомпании.НастройкаАвтоматическойУстановкиУниверсальногоДокументаПоУмолчанию(Объект);
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект.НастройкаАвтоматическойУстановкиУниверсальногоДокумента Цикл
		Результат.Добавить(
			ТекущаяСтрока.Документ,
			ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ТекущаяСтрока.Документ, Ложь).Синоним,
			ТекущаяСтрока.Значение
		);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
