// Модуль менеджера справочника "Подразделения компании"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует коллекцию иерархических связий узлов дерева подразделений от задоного узла к корню.
//
// Параметры:
//  Подразделение - СправочникСсылка.ПодразделенияКомпании - стартовый узел дерева.
// 
// Возвращаемое значение:
//  МенеджерВременныхТаблиц - менеджер с таблицей "РодителиПодразделенийКомпании"
//
Функция ИерархияПодразделенийДляЗапросов(Подразделение) Экспорт
	
	Пролог =
	"ВЫБРАТЬ
	|	Родитель НачалоДуги,
	|	Ссылка КонецДуги,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ
	|	ЗамыканияДлины1
	|ИЗ
	|	Справочник.ПодразделенияКомпании
	|ГДЕ
	|	Родитель <> Значение(Справочник.ПодразделенияКомпании.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Ссылка,
	|	Ссылка,
	|	0 ИЗ Справочник.ПодразделенияКомпании;";
	
	Рефрен =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерваяДуга.НачалоДуги,
	|	ВтораяДуга.КонецДуги,
	|	(ПерваяДуга.Порядок + ВтораяДуга.Порядок) КАК Порядок
	|ПОМЕСТИТЬ
	|	ЗамыканияДлины%2
	|ИЗ
	|	ЗамыканияДлины%1 КАК ПерваяДуга
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ЗамыканияДлины%1 КАК ВтораяДуга
	|ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги
	|;
	|
	|УНИЧТОЖИТЬ ЗамыканияДлины%1
	|;";
	
	Эпилог =
	"ВЫБРАТЬ
	|	НачалоДуги ПодразделениеКомпании,
	|	Порядок
	|ПОМЕСТИТЬ
	|	РодителиПодразделенийКомпании
	|ИЗ
	|	ЗамыканияДлины%1
	|ГДЕ
	|	КонецДуги = &Подразделение;";
	
	ТекущаяДлинаЗамыкания = 1;
	МаксимальнаяДлинаЗамыканий = 32;
	КоэффициентУвеличенияДлиныЗамыканий = 2;
	ЧастиЗапроса = Новый Массив();
	ЧастиЗапроса.Добавить(Пролог);
	
	Пока ТекущаяДлинаЗамыкания < МаксимальнаяДлинаЗамыканий Цикл
		
		ЧастиЗапроса.Добавить(
			СтрШаблон(
				Рефрен,
				Формат(ТекущаяДлинаЗамыкания, "ЧГ=0"),
				Формат(КоэффициентУвеличенияДлиныЗамыканий * ТекущаяДлинаЗамыкания, "ЧГ=0")
			)
		);
		ТекущаяДлинаЗамыкания = КоэффициентУвеличенияДлиныЗамыканий * ТекущаяДлинаЗамыкания;
		
	КонецЦикла;
	
	ЧастиЗапроса.Добавить(СтрШаблон(Эпилог, Формат(ТекущаяДлинаЗамыкания, "ЧГ=0")));
	Запрос = Новый Запрос(СтрСоединить(ЧастиЗапроса, Символы.ПС));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Выполнить();
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

// Получает значения реквизитов объекта.
//
// Параметры:
//  Подразделение - СправочникСсылка.ПодразделенияКомпании - стартовый узел дерева.
// 
// Возвращаемое значение:
//  Структура - Структура значений рекихитов объекта.
//
Функция НастройкиОтправкиЗаказНарядаПоЭДО(Подразделение) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Подразделение,
		"ОтправлятьКакАктОбОказанииУслуг,ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО"
	);
	
КонецФункции

  #Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("Балансовое");
	Результат.Добавить("ЦифровойИндексОбособленногоПодразделения");
    Возврат Результат;
    
КонецФункции

#КонецОбласти

 #Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элементы.Колонки.Добавить("Организация", Метаданные.ОбщиеРеквизиты.Организация.Тип);
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОсновноеПодразделение";
	Элемент.Наименование = НСтр("ru = 'Вся компания целиком (измените на ваше название)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.НаименованиеПолное = Элемент.Наименование;
	Элемент.Код = "000000001";
	Элемент.Организация = Справочники.Организации.ОсновнаяОрганизация;
	Элемент.Балансовое = Истина;
        
КонецПроцедуры

// Начальное заполнение реквизита "СпособРаспределенияЗаказовПоУмолчанию"
Процедура ЗаполнитьСпособРаспределенияЗаказовПоУмолчанию() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияКомпании.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
		|ГДЕ
		|	ПодразделенияКомпании.СпособРаспределенияЗаказовПоУмолчанию = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗаказов.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		
		Элемент = Выборка.Ссылка.ПолучитьОбъект();		
		Элемент.ОбменДанными.Загрузка = Истина;				
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);	
			
			Элемент.СпособРаспределенияЗаказовПоУмолчанию = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗаказов.Автоматическое");
			Элемент.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			 ЗаписьЖурналаРегистрации(
			 	НСтр("ru = 'Ошибка обновления справочника Подразделения компании'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
    			УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
					
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Начальное заполнение реквизита "ОбособленноеПодразделение"
Процедура ЗаполнитьПризнакОбособленноеПодразделение() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияКомпании.Ссылка КАК Ссылка,
		|	ПодразделенияКомпании.КПП КАК КПП
		|ИЗ
		|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
		|ГДЕ
		|	ПодразделенияКомпании.КПП <> """"
		|	И НЕ ПодразделенияКомпании.ОбособленноеПодразделение";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		
		КПП = СокрЛП(Выборка.КПП); 
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Выборка.Ссылка.ПолучитьОбъект();		
		Элемент.ОбменДанными.Загрузка = Истина;				
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);	
			
			Элемент.ОбособленноеПодразделение = Истина;
			Элемент.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			 ЗаписьЖурналаРегистрации(
			 	НСтр("ru = 'Ошибка обновления справочника Подразделения компании'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
    			УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
					
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Начальное заполнение реквизитов "СозданиеОбновлениеСчетовФактурВыданных" и 
// "СозданиеОбновлениеСчетовФактурПолученных" значениями из учетной политики "СозданиеОбновлениеСчетовФактур".
//
Процедура ЗаполнениеНовыхРеквизитовДляСФ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Параметр", ПланыВидовХарактеристик.УчетныеПолитики.УдалитьСозданиеОбновлениеСчетовФактур);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПодразделенияКомпании.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(УчетныеПолитикиСрезПоследних.Значение, ЗНАЧЕНИЕ(Перечисление.ВариантыСозданияОбновленияСФ.НеСоздавать)) КАК Значение
		|ИЗ
		|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеПолитики.СрезПоследних(&Дата, Параметр = &Параметр) КАК УчетныеПолитикиСрезПоследних
		|		ПО ПодразделенияКомпании.Ссылка = УчетныеПолитикиСрезПоследних.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Элемент = Выборка.Ссылка.ПолучитьОбъект();
		Элемент.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			Элемент.СозданиеОбновлениеСчетовФактурВыданных   = Выборка.Значение;
			Элемент.СозданиеОбновлениеСчетовФактурПолученных = Выборка.Значение;
			Элемент.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Ошибка обновления справочника Подразделения компании'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Начальное заполнение табличной части "НастройкаАвтоматическойУстановкиУниверсальногоДокумента"
// документами с признаком "ЭтоУниверсальныйДокумент".
//
Процедура ЗаполнениеНастроекЭтоУниверсальынйДокумент() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияКомпании.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			НастройкаАвтоматическойУстановкиУниверсальногоДокументаПоУмолчанию(ЭлементОбъект);
			ЭлементОбъект.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Ошибка обновления справочника Подразделения компании'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Перезаполнение табличной части "НастройкаАвтоматическойУстановкиУниверсальногоДокумента"
// документами с признаком "ЭтоУниверсальныйДокумент".
//
Процедура ПерезаполнениеНастроекЭтоУниверсальынйДокумент() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияКомпании.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияКомпании.НастройкаАвтоматическойУстановкиУниверсальногоДокумента КАК ПодразделенияКомпанииНастройкаАвтоматическойУстановкиУниверсальногоДокумента
	|		ПО (ПодразделенияКомпании.Ссылка = ПодразделенияКомпанииНастройкаАвтоматическойУстановкиУниверсальногоДокумента.Ссылка)
	|ГДЕ
	|	ПодразделенияКомпанииНастройкаАвтоматическойУстановкиУниверсальногоДокумента.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			НастройкаАвтоматическойУстановкиУниверсальногоДокументаПоУмолчанию(ЭлементОбъект);
			ЭлементОбъект.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Ошибка обновления справочника Подразделения компании'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Начальное заполнение реквизитов "СопоставлениеЧерезНоменклатуру" и "СопоставлениеЧерезАвтомобили"
//
Процедура ЗаполнениеПризнаковСопоставленияНоменклатурыБЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодразделенияКомпании.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
	|ГДЕ
	|	НЕ ПодразделенияКомпании.СопоставлениеЧерезНоменклатуру
	|	И НЕ ПодразделенияКомпании.СопоставлениеЧерезАвтомобили";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПодразделениеОбъект.СопоставлениеЧерезНоменклатуру = Истина;
			ПодразделениеОбъект.СопоставлениеЧерезАвтомобили = Истина;
			ПодразделениеОбъект.ОбменДанными.Загрузка = Истина;
			ПодразделениеОбъект.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления справочника Подразделения компании'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Ссылка)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЭДО

Функция	ДанныеЮрФизЛицаДляЭДО(Подразделение) Экспорт
	
	Результат = ЭлектронноеВзаимодействиеАльфаАвто.НовыеСведенияОЮрФизЛице();
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Вставить("ПолноеНаименование", Подразделение.НаименованиеПолное);
	Результат.Вставить("Наименование", Подразделение.Наименование);
	Результат.Вставить("ОфициальноеНаименование", Подразделение.НаименованиеПолное);
	Результат.Вставить("ЮрФизЛицо", Подразделение.Организация.ФормаСобственности);
	Результат.Вставить("ИНН", СтрЗаменить(Подразделение.Организация.Инн, " ", ""));
	
	Если Результат.ЮрФизЛицо = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		
		Результат.Вставить("КПП", Подразделение.КПП);
		
		Если Не ЗначениеЗаполнено(Результат.КПП) Тогда
			
			Результат.Вставить("КПП", Подразделение.Организация.КПП);
			
		КонецЕсли;
		Результат.Вставить("ОГРН", Подразделение.Организация.ОГРН)
		
		
	Иначе
		
		Результат.Вставить("КПП", "");
		Результат.Вставить("ОГРН", "");
		
	КонецЕсли;
	
	Телефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Подразделение,
		Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияКомпании, ТекущаяДатаСеанса());
	Результат.Вставить("Телефоны", Телефоны);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Результат,
		ЭлектронноеВзаимодействиеАльфаАвто.СведенияОБанковскомСчете(Подразделение),
		Истина
	);
	
	ФормыСобственностиСФИО = Новый Массив();
	ФормыСобственностиСФИО.Добавить(Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	ФормыСобственностиСФИО.Добавить(Перечисления.ФормыСобственности.ЧастноеЛицо);
	
	Если ФормыСобственностиСФИО.Найти(Результат.ЮрФизЛицо) <> Неопределено Тогда
	
		Результат.Вставить("Фамилия", Подразделение.Организация.Фамилия);
		Результат.Вставить("Имя", Подразделение.Организация.Имя);
		Результат.Вставить("Отчество", Подразделение.Организация.Отчество);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КонтактнаяИнформацияДляЭДО(Подразделение, ТипКИ, ТипАдреса, ДатаКИ) Экспорт
	
	ЗначенияРеквизитовПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение,
		"Организация,ИспользоватьКИОрганизацииДляЭД");
	
	Если ЗначенияРеквизитовПодразделения.ИспользоватьКИОрганизацииДляЭД Тогда
		
		Возврат Справочники.Организации.КонтактнаяИнформацияДляЭДО(
			ЗначенияРеквизитовПодразделения.Организация,
			ТипКИ,
			ТипАдреса,
			ДатаКИ
		);
		
	КонецЕсли;
	
	Если ТипКИ = "Адрес" Тогда
		
		ВидыКИ = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресПодразделенияКомпании"];
		
	ИначеЕсли ТипКИ = "Телефон" Тогда
		
		ВидыКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияКомпании;
		
	ИначеЕсли ТипКИ = "АдресЭП" Тогда
		
		ВидыКИ = Справочники.ВидыКонтактнойИнформации.EmailПодразделенияКомпании;
				
	Иначе
		
		ВидыКИ = Неопределено;
		
	КонецЕсли;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение),
		,
		ВидыКИ,
		ДатаКИ
	);
	
	Если КонтактнаяИнформация.Количество() = 0 Тогда
		
		Возврат Справочники.Организации.КонтактнаяИнформацияДляЭДО(
			ЗначенияРеквизитовПодразделения.Организация,
			ТипКИ,
			ТипАдреса,
			ДатаКИ
		);
		
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Для Каждого Колонка Из КонтактнаяИнформация.Колонки Цикл
		
		Результат.Вставить(Колонка.Имя);
		
	КонецЦикла;
		
	ЗаполнитьЗначенияСвойств(Результат, КонтактнаяИнформация[0]);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// функция устанавливает актуальное значение КПП
Процедура УстановитьАктуальноеЗначениеИсторииКПП(КПП, ИсторияКПП) Экспорт
	
	КоличествоЗаписей = ИсторияКПП.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияКПП.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияКПП[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.КПП = КПП;
		
	КонецЕсли;
	
КонецПроцедуры

// функция устанавливает актуальное значение наименования
Процедура УстановитьАктуальноеЗначениеИсторииНаименований(НаименованиеПолное, ИсторияНаименований) Экспорт
	
	КоличествоЗаписей = ИсторияНаименований.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияНаименований.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияНаименований[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.НаименованиеПолное = НаименованиеПолное;
		
	КонецЕсли;
	
КонецПроцедуры

// функция получает актуальный КПП на дату
Функция КППНаДату(Подразделение, ДатаСведений) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Подразделение)
		ИЛИ ТипЗнч(Подразделение) <> Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "КПП");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ИсторияКПППодразделений.Период) КАК Период,
	|	ИсторияКПППодразделений.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗначенияКПП
	|ИЗ
	|	Справочник.ПодразделенияКомпании.ИсторияКПП КАК ИсторияКПППодразделений
	|ГДЕ
	|	ИсторияКПППодразделений.Ссылка = &Подразделение
	|	И ИсторияКПППодразделений.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияКПППодразделений.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсторияКПППодразделений.КПП КАК КПП
	|ИЗ
	|	ЗначенияКПП КАК ЗначенияКПП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияКомпании.ИсторияКПП КАК ИсторияКПППодразделений
	|		ПО ЗначенияКПП.Ссылка = ИсторияКПППодразделений.Ссылка
	|			И ЗначенияКПП.Период = ИсторияКПППодразделений.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КПП;
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "КПП");
	КонецЕсли;
КонецФункции

// функция получает актуальные наименования на дату
Функция НаименованияНаДату(Подразделение, ДатаСведений) Экспорт
	
	НаименованияПодразделения = Новый Структура("СокращенноеНаименование, НаименованиеПолное, НаименованиеДляПечатныхФорм", "", "", "");
	
	Если НЕ ЗначениеЗаполнено(Подразделение)
		ИЛИ ТипЗнч(Подразделение) <> Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
		Возврат НаименованияПодразделения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаСведений) Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Подразделение", Подразделение);
		Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ИсторияНаименованийПодразделений.Период) КАК Период,
		|	ИсторияНаименованийПодразделений.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗначенияНаименований
		|ИЗ
		|	Справочник.ПодразделенияКомпании.ИсторияНаименований КАК ИсторияНаименованийПодразделений
		|ГДЕ
		|	ИсторияНаименованийПодразделений.Ссылка = &Подразделение
		|	И ИсторияНаименованийПодразделений.Период <= &ДатаСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияНаименованийПодразделений.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияНаименованийПодразделений.Ссылка.Наименование КАК Наименование,
		|	ИсторияНаименованийПодразделений.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	ЗначенияНаименований КАК ЗначенияНаименований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияКомпании.ИсторияНаименований КАК ИсторияНаименованийПодразделений
		|		ПО ЗначенияНаименований.Ссылка = ИсторияНаименованийПодразделений.Ссылка
		|			И ЗначенияНаименований.Период = ИсторияНаименованийПодразделений.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаименованияПодразделения.СокращенноеНаименование     = Выборка.Наименование;
			НаименованияПодразделения.НаименованиеПолное          = Выборка.НаименованиеПолное;
			НаименованияПодразделения.НаименованиеДляПечатныхФорм = Выборка.НаименованиеПолное;
			Возврат НаименованияПодразделения;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, "Наименование, НаименованиеПолное");
	НаименованияПодразделения.СокращенноеНаименование     = ЗначенияРеквизитов.Наименование;
	НаименованияПодразделения.НаименованиеПолное          = ЗначенияРеквизитов.НаименованиеПолное;
	НаименованияПодразделения.НаименованиеДляПечатныхФорм = ЗначенияРеквизитов.НаименованиеПолное;
	Возврат НаименованияПодразделения;
	
КонецФункции

// Функция получает для небалансового подразделения соответствующее балансовое подразделение
// (на которое будут переноситься остатки при закрытии периода).
//
// Параметры:
//  Источник - "СправочникСсылка.ПодразделениеКомпании" - небалансовое подразделение,
//                                                        остатки которого необходимо перенести.
//
// Возвращаемое значение:
//   "СправочникСсылка.ПодразделениеКомпании" - балансовое подразделение, на которое будут перенесены остатки.
// 
Функция ПолучитьБалансовоеПодразделение(ПодразделениеИсточник, Дата) Экспорт
	
	КорневойЭлемент = Справочники.ПодразделенияКомпании.ОсновноеПодразделение;
	
	// Если учет ведется не по подразделениям, то вернем корневое подразделение.
	Если УчетныеПолитикиСервер.Значение("СпособВеденияБаланса", Дата, Неопределено)<>Перечисления.СпособВеденияБаланса.ПоПодразделению Тогда
		Возврат КорневойЭлемент;
	КонецЕсли;
	
	Если ПодразделениеИсточник.Балансовое ИЛИ (ПодразделениеИсточник=КорневойЭлемент) Тогда
		Возврат ПодразделениеИсточник;
	КонецЕсли;
	
	ТекЭлемент = ПодразделениеИсточник;
	Пока Истина Цикл
		ТекЭлемент = ТекЭлемент.Родитель;
		Если ТекЭлемент.Пустая() Или (ТекЭлемент=КорневойЭлемент) Тогда
			Возврат КорневойЭлемент;
		КонецЕсли;
		
		Если ТекЭлемент.Балансовое Тогда
			Возврат ТекЭлемент;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // ПолучитьБалансовоеПодразделение()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	// Указания корневому подразделению не требуется
	Если НЕ(Объект.Ссылка=Справочники.ПодразделенияКомпании.ОсновноеПодразделение) Тогда
		ОбязательныеРеквизиты.Добавить("Организация");
	КонецЕсли;
	
	Если Объект.ОбособленноеПодразделение Тогда
		ОбязательныеРеквизиты.Добавить("КПП");;
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Наименование");
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Балансовое");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаСобытийСправочникаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Наименование".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура НаименованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры // НаименованиеПриИзменении()

// Обработчик события при окончании изменения данных реквизита "НаименованиеПолное"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура НаименованиеПолноеПриИзменении(Объект, ПараметрыДействия) Экспорт
	// смотрим заполнено ли наименование
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		// получаем структура наименований
		СтруктураНаименований = РеквизитыСИсторией.ПолучитьНаименованияНаДату(Объект.Ссылка, ТекущаяДатаСеанса());
		
		// получаем наименование
		НаименованиеНаСегодня = СтруктураНаименований.НаименованиеПолное;
		
		// смотрим заполнено ли значение
		Если Объект.ИсторияНаименований.Количество() > 0 И ЗначениеЗаполнено(НаименованиеНаСегодня) Тогда
			// проверяем изменилось ли наименование
			Если НаименованиеНаСегодня <> Объект.НаименованиеПолное Тогда
				// формируем структуру отбора
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Период", НачалоДня(ТекущаяДатаСеанса()));
				
				// ищем значение на сегодня в ТЧ
				НайденныеСтроки = Объект.ИсторияНаименований.НайтиСтроки(СтруктураОтбора);
				
				// проверяем
				Если НайденныеСтроки.Количество() > 0 Тогда
					// получаем строку
					ТекСтрока = НайденныеСтроки[0];
					ТекСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
				Иначе
					// добавляем строку
					НоваяСтрока = Объект.ИсторияНаименований.Добавить();
					НоваяСтрока.Период = ТекущаяДатаСеанса();
					НоваяСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// ищем строку с пустым периодом
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Период", Дата("00010101"));
			
			// ищем значение на сегодня в ТЧ
			НайденныеСтроки = Объект.ИсторияНаименований.НайтиСтроки(СтруктураОтбора);
			
			// смотрим нашли или нет
			Если НайденныеСтроки.Количество() > 0 Тогда
				// получаем строку
				ТекСтрока = НайденныеСтроки[0];
				ТекСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
			Иначе
				// добавляем строку
				НоваяСтрока = Объект.ИсторияНаименований.Добавить();
				НоваяСтрока.Период = Дата("00010101");
				НоваяСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  //НаименованиеПолноеПриИзменении()

// Обработчик события при окончании изменения данных реквизита "КПП"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КПППриИзменении(Объект, ПараметрыДействия) Экспорт
	// смотрим заполнено ли КПП
	Если ЗначениеЗаполнено(Объект.КПП) Тогда
		// получаем ссылку
		ТекОбъект = Объект.Ссылка;
		
		// получаем последний КПП
		КППНаСегодня = РеквизитыСИсторией.ПолучитьКППНаДату(ТекОбъект, ТекущаяДатаСеанса());
		
		// смотрим заполнено ли значение
		Если Объект.ИсторияКПП.Количество() > 0 И ЗначениеЗаполнено(КППНаСегодня) Тогда 
			// проверяем изменился ли КПП
			Если КППНаСегодня <> Объект.КПП Тогда
				// формируем структуру отбора
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Период", НачалоДня(ТекущаяДатаСеанса()));
				
				// ищем значение на сегодня в ТЧ
				НайденныеСтроки = Объект.ИсторияКПП.НайтиСтроки(СтруктураОтбора);
				
				// проверяем
				Если НайденныеСтроки.Количество() > 0 Тогда
					// получаем строку
					ТекСтрока = НайденныеСтроки[0];
					ТекСтрока.КПП = Объект.КПП;
				Иначе
					// добавляем строку
					НоваяСтрока = Объект.ИсторияКПП.Добавить();
					НоваяСтрока.Период = ТекущаяДатаСеанса();
					НоваяСтрока.КПП = Объект.КПП;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// ищем строку с пустым периодом
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Период", Дата("00010101"));
			
			// ищем значение на сегодня в ТЧ
			НайденныеСтроки = Объект.ИсторияКПП.НайтиСтроки(СтруктураОтбора);
			
			// смотрим нашли или нет
			Если НайденныеСтроки.Количество() > 0 Тогда
				// получаем строку
				ТекСтрока = НайденныеСтроки[0];
				ТекСтрока.КПП = Объект.КПП;
			Иначе
				// добавляем строку
				НоваяСтрока = Объект.ИсторияКПП.Добавить();
				НоваяСтрока.Период = Дата("00010101");
				НоваяСтрока.КПП = Объект.КПП;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Часовой пояс подразделения компании
//
Функция ПолучитьЧасовойПояс(ПодразделениеКомпании) Экспорт
	
	Если ПодразделениеКомпании.Пустая() Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеКомпании, "ЧасовойПояс");
	
КонецФункции

Процедура НастройкаАвтоматическойУстановкиУниверсальногоДокументаПоУмолчанию(
		Объект,
		ПараметрыДействия = Неопределено) Экспорт
	
	ДанныеДокументов = Автосервис.ДокументыСПризнакомУниверсальныйДокумент();
	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
		НоваяСтрока = Объект.НастройкаАвтоматическойУстановкиУниверсальногоДокумента.Добавить();
		НоваяСтрока.Документ = ДанныеДокумента.Документ;
		НоваяСтрока.Значение = ДанныеДокумента.ЭтоПоступление;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

