// Модуль менеджера справочника "Склады компании"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элементы.Колонки.Добавить("Организация", Метаданные.ОбщиеРеквизиты.Организация.Тип);
	Элементы.Колонки.Добавить("ПодразделениеКомпании", Метаданные.ОбщиеРеквизиты.ПодразделениеКомпании.Тип);
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОсновнойСкладКомпании";
	Элемент.Наименование = НСтр("ru = 'Основной склад компании'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = "000000001";
	Элемент.Организация = Справочники.Организации.ОсновнаяОрганизация;
	Элемент.ПодразделениеКомпании = Справочники.ПодразделенияКомпании.ОсновноеПодразделение;
	Элемент.Розничный = Ложь;
	Элемент.ВидСклада = Перечисления.ВидыСкладов.Обычный;
        
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Справочник.СкладыКомпании",
		"ПечатьЯчеекСклада",
		НСтр("ru = 'Ячейки склада'"),
		ПолучитьСсылку()
	);
	
КонецПроцедуры

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьЯчеекСклада") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьЯчеекСклада",
			"ПечатьЯчеекСклада",
			ПечатьЯчеекСклада(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("Розничный");
    Результат.Добавить("ТипЦенРозничнойТорговли");
    Результат.Добавить("ВидСклада");
    Результат.Добавить("УчетЕдиницИзмерения");
	Если ЗначениеЗаполнено(ЗапасыТоваров.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям()) Тогда
		Результат.Добавить("Организация");
	КонецЕсли;
    Возврат Результат;
    
КонецФункции

#КонецОбласти

// Определяем ведется ли учет ячеек для склада
// 
// Параметры:
//  Склад - СправочникСсылка.СкладыКомпании, СправочникОбъект.СкладыКомпании - Склад.
// 
// Возвращаемое значение:
//  Булево - Это склад с ячейками
//
Функция ЭтоСкладСЯчейками(Склад) Экспорт
	
	Если ТипЗнч(Склад) = Тип("СправочникСсылка.СкладыКомпании") Тогда
		
		ВидСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ВидСклада");
		
	Иначе
		
		ВидСклада = Склад.ВидСклада;
		
	КонецЕсли;
	
	Возврат ВидСклада = Перечисления.ВидыСкладов.Ячеистый
		Или ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый;
	
КонецФункции

// Определяем ведется ли ордерный учет для склада.
// 
// Параметры:
//  Склад - СправочникСсылка.СкладыКомпании, СправочникОбъект.СкладыКомпании - Склад.
// 
// Возвращаемое значение:
//  Булево - Это ордерный склад
//
Функция ЭтоОрдерныйСклад(Склад) Экспорт
	
	Если ТипЗнч(Склад) = Тип("СправочникСсылка.СкладыКомпании") Тогда
		
		ВидСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ВидСклада");
		
	Иначе
		
		ВидСклада = Склад.ВидСклада;
		
	КонецЕсли;
	
	Возврат ВидСклада = Перечисления.ВидыСкладов.Ордерный
		Или ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЭтоГруппа
		|	ИЛИ ЗначениеРазрешено(Ссылка)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// проверяет, нет ли у склада уже созданных ячеек
//
// Возвращаемое значение:
//    Булево  - Наличие созданных ячеек.
//
Функция ЕстьЗаполненныеЯчейки(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Справочник.ЯчейкиХранения ГДЕ Владелец = &Ссылка И НЕ ЭтоГруппа";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции // ЕстьЗаполненныеЯчейки()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	// Обработаем в зависимости от вида элемента
	Если НЕ Объект.ЭтоГруппа Тогда
		
		ОбязательныеРеквизиты.Добавить("Организация");
		ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
		ОбязательныеРеквизиты.Добавить("ВидСклада");
		
		Если Объект.Розничный Тогда
			ОбязательныеРеквизиты.Добавить("ТипЦенРозничнойТорговли");
		КонецЕсли;
		Если НЕ Объект.ВидСклада = Перечисления.ВидыСкладов.Обычный 
			И НЕ Объект.ВидСклада = Перечисления.ВидыСкладов.Ячеистый Тогда
			ОбязательныеРеквизиты.Добавить("УчетЕдиницИзмерения");
		КонецЕсли;
		Если Объект.ВидСклада = Перечисления.ВидыСкладов.Ячеистый 
			ИЛИ Объект.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
			ОбязательныеРеквизиты.Добавить("ДлинаСклада");
			ОбязательныеРеквизиты.Добавить("ШиринаСклада");
			ОбязательныеРеквизиты.Добавить("ЧислоУровней");
			ОбязательныеРеквизиты.Добавить("ДлинаЯчейкиПоУмолчанию");
			ОбязательныеРеквизиты.Добавить("ШиринаЯчейкиПоУмолчанию");
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Розничный");
	Результат.Добавить("ТипЦенРозничнойТорговли");
	Результат.Добавить("ВидСклада");
	Результат.Добавить("УчетЕдиницИзмерения");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	//ОбработкаСобытийСправочникаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	Если ЗначениеЗаполнено(Объект.ПодразделениеКомпании)
		И ЗначениеЗаполнено(Объект.Организация)
		И (НЕ Объект.Организация=Объект.ПодразделениеКомпании.Организация) Тогда 

		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Подразделение ""%1"" не принадлежит организации ""%2""'"),
				Объект.ПодразделениеКомпании,
				Объект.Организация
			), 
			Объект.Ссылка,
			"Организация"
		);
		
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаСобытийСправочникаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "МОЛ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МОЛПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.МОЛ) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Объект.МОЛ.Организация;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеКомпании) Тогда
			Объект.ПодразделениеКомпании = Объект.МОЛ.ПодразделениеКомпании;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // МОЛПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Вид склада".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидСкладаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если Объект.ВидСклада=Перечисления.ВидыСкладов.Обычный ИЛИ Объект.ВидСклада=Перечисления.ВидыСкладов.Ячеистый Тогда
		Объект.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.ПустаяСсылка();
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.УчетЕдиницИзмерения) Тогда
			Объект.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВидСкладаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Розничный".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РозничныйПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ Объект.Розничный Тогда
		Объект.ТипЦенРозничнойТорговли = Справочники.ТипыЦен.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // РозничныйПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен розничной торговли".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенРозничнойТорговлиПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ТипЦенРозничнойТорговли) И Объект.ТипЦенРозничнойТорговли.Закупка 
		И НЕ Объект.ТипЦенРозничнойТорговли.Продажа Тогда
		Объект.ТипЦенРозничнойТорговли = Справочники.ТипыЦен.ПустаяСсылка();
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Тип цен розничного склада не может быть закупочным.'"),,
																						"ТипЦенРозничнойТорговли");
	КонецЕсли;
	
КонецПроцедуры // ТипЦенРозничнойТорговлиПриИзменении()

#КонецОбласти

#Область ОбработчикиПечати

Функция ПечатьЯчеекСклада(Склады, ОбъектыПечати) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	Результат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СкладыКомпании_ПечатьЯчеекСклада";

	ЯчейкиСкладов = ЯчейкиСкладов(ДанныеСкладов(Склады));
	
	ПервыйДокумент = Истина;
	
	Для Каждого Склад Из ЯчейкиСкладов Цикл
		
		Если Не ПервыйДокумент Тогда
			
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Обработки.ПечатьЯчеек.Печать(Склад.Ключ, Результат, Склад.Значение);
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеСкладов(Склады)
	
	Результат = Новый Массив();
	
	Для Каждого Склад Из Склады Цикл
		
		Если
			ТипЗнч(Склад) = Тип("СправочникОбъект.СкладыКомпании")
			И Не Склад.Ссылка.Пустая()
			И Не Склад.Ссылка.ЭтоГруппа
		Тогда
			
			Результат.Добавить(Склад.Ссылка);
			
		ИначеЕсли Не Склад.Пустая() И Не Склад.ЭтоГруппа Тогда
			
			Результат.Добавить(Склад);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЯчейкиСкладов(Склады)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЯчейкиХранения.Ссылка КАК Ячейка,
		|	ЯчейкиХранения.Владелец КАК Склад
		|ИЗ
		|	Справочник.ЯчейкиХранения КАК ЯчейкиХранения
		|ГДЕ
		|	НЕ ЯчейкиХранения.ЭтоГруппа
		|	И ЯчейкиХранения.Владелец В(&Склады)
		|ИТОГИ ПО
		|	Склад
		|АВТОУПОРЯДОЧИВАНИЕ "
	);
	Запрос.УстановитьПараметр("Склады", Склады);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Соответствие();
		
	КонецЕсли;
	
	СкладыСЯчейками = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Результат = Новый Соответствие();
	
	Пока СкладыСЯчейками.Следующий() Цикл
		
		Ячейки = Новый ТаблицаЗначений();
		Ячейки.Колонки.Добавить("Ячейка");
		
		ЯчейкиСклада = СкладыСЯчейками.Выбрать();
		
		Пока ЯчейкиСклада.Следующий() Цикл
			
			Ячейки.Добавить().Ячейка = ЯчейкиСклада.Ячейка;
			
		КонецЦикла;
		
		Если Ячейки.Количество() > 0 Тогда
			
			Результат.Вставить(СкладыСЯчейками.Склад, Ячейки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли