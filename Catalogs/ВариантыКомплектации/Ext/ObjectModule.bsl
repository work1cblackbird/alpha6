// Модуль объекта справочника "Варианты комплектации"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОПОЛНИТЕЛЬНЫХ МЕТОДОВ ОБЪЕКТА


#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоКода(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоКода()

// Стандартный обработчик заполнения при вводе нового на основании
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВалютаУчета) Тогда
		ВалютаУчета = Владелец.ВалютаУчета;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ВалютаУчета) Тогда
		ВалютаУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КонецЕсли; 
КонецПроцедуры

// Стандартный обработчик копирования объекта
Процедура ПриКопировании(ОбъектКопирования)
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Стандартный обработчик ПередЗаписью элемента справочника
Процедура ПередЗаписью(Отказ)
	
	Если ЭтоНовый() И Не ЗначениеЗаполнено(ТипАвтомобиля) Тогда
		ТипАвтомобиля = Справочники.ТипыАвтомобилей.ПоУмолчанию;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередЗаписью(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ МодельДвигателя.Пустая() Тогда
		ТипДвигателя = Справочники.ТипыДвигателей.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик ПриЗаписи элемента справочника
Процедура ПриЗаписи(Отказ)
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриЗаписи(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Стандартный обработчик ПередУдалением элемента
Процедура ПередУдалением(Отказ)
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Стандартный обработчик ОбработкаПроверкиЗаполнения элемента
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Артикул) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВариантыКомплектации.Ссылка
		|ИЗ
		|	Справочник.ВариантыКомплектации КАК ВариантыКомплектации
		|ГДЕ
		|	ВариантыКомплектации.Артикул = &Артикул
		|	И ВариантыКомплектации.Ссылка <> &ЭтаСсылка";
		Запрос.УстановитьПараметр("Артикул", Артикул);
		Запрос.УстановитьПараметр("ЭтаСсылка", Ссылка);
		Результат = Запрос.Выполнить().Пустой();
		Если НЕ Результат Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Номер по каталогу <%1> не уникален.'"),Артикул),
				ЭтотОбъект, 
				"Артикул"
			);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли
