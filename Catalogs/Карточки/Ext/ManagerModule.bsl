// Модуль менеджера справочника "Карточки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Функция получения родителя самого верхнего уровня.
//
// Параметры:
//  Родитель          - СправочникСсылка - Элемент справочника.
//
// Возвращаемое значение:
//   СправочникСсылка - Вид карточки.
//
Функция ПолучитьВидКарточки(Родитель) Экспорт
	
	Если Родитель.Родитель.Пустая() Тогда
		Возврат Родитель;
	Иначе
		Возврат ПолучитьВидКарточки(Родитель.Родитель);
	КонецЕсли;
	
КонецФункции // ПолучитьВидКарточки()

// Процедура заполнения карточки в соответствии с группой
//
Процедура ЗаполнитьВидКарточки(Карточка, Родитель) Экспорт
	
	Объект = Карточка.ПолучитьОбъект();
	Если Объект.Родитель <> Родитель Тогда
		ВидКарточки = ПолучитьВидКарточки(Родитель);
		Если (ВидКарточки <> Неопределено) И (ВидКарточки <> Объект.ВидКарточки) Тогда
			Объект.ВидКарточки = ВидКарточки.ВидКарточки;
			Если НЕ ЗначениеЗаполнено(Объект.ВидКарточки) Тогда
				Если ВидКарточки = Справочники.Карточки.ПрофилиСкидок Тогда
					Объект.ВидКарточки = Перечисления.ВидыКарточек.ПрофильСкидки;
				ИначеЕсли ВидКарточки = Справочники.Карточки.КарточкаПользователя Тогда
					Объект.ВидКарточки = Перечисления.ВидыКарточек.КарточкаПользователя;
				КонецЕсли;
			КонецЕсли;
			Объект.Родитель = Родитель;
			СформироватьПолноеНаименование(Объект, Новый Структура("Родитель", Родитель));
			Объект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВидКарточки()

// Процедура для получения родителя по виду карточки
//
Процедура ПолучитьРодителя(Объект) Экспорт 
	
	Если Объект.ВидКарточки = Перечисления.ВидыКарточек.ДисконтнаяКарта Тогда
		Объект.Родитель = Справочники.Карточки.ДисконтнаяКарта;
	ИначеЕсли Объект.ВидКарточки = Перечисления.ВидыКарточек.КарточкаПользователя Тогда
		Объект.Родитель = Справочники.Карточки.КарточкаПользователя;
	ИначеЕсли Объект.ВидКарточки = Перечисления.ВидыКарточек.УдалитьСлужебнаяОперация Тогда
		Объект.Родитель = Справочники.Карточки.УдалитьСлужебнаяОперация;
	ИначеЕсли Объект.ВидКарточки = Перечисления.ВидыКарточек.Чистая Тогда
		Объект.Родитель = Справочники.Карточки.Чистая;
	ИначеЕсли Объект.ВидКарточки = Перечисления.ВидыКарточек.КлубнаяКарта Тогда
		Объект.Родитель = Справочники.Карточки.КлубнаяКарта;
	ИначеЕсли Объект.ВидКарточки = Перечисления.ВидыКарточек.Талон Тогда
		Объект.Родитель = Справочники.Карточки.Талон;
	ИначеЕсли Объект.ВидКарточки = Перечисления.ВидыКарточек.ПрофильСкидки Тогда
		Объект.Родитель = Справочники.Карточки.ПрофилиСкидок;
	ИначеЕсли Объект.ВидКарточки = Перечисления.ВидыКарточек.КарточкаСотрудника Тогда
		Объект.Родитель = Справочники.Карточки.КарточкаСотрудника;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьРодителя()


#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("ВидКарточки");
	
	Если НЕ Объект.ЭтоГруппа И (Объект.ВидКарточки = Перечисления.ВидыКарточек.Талон 
			ИЛИ Объект.ВидКарточки = Перечисления.ВидыКарточек.КлубнаяКарта) Тогда
		ОбязательныеРеквизиты.Добавить("Объект");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Формирует стандартное наименование карточки.
//
// Параметры:
//  Объект   - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ШтрихКод - Строка               - Строка штрих-кода.
//
Функция СформироватьНаименованиеПоУмолчанию(Объект, Штрихкод = Неопределено) Экспорт
	
	Наименование = "";
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		Наименование = ШтрихКод;
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции // СформироватьНаименованиеПоУмолчанию()

// Формирует текстовые поля карточки указанного вида.
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура СформироватьПолноеНаименование(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Родитель = Неопределено;
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		Родитель = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Родитель", Неопределено);
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда
		врВидКарточки = ПолучитьВидКарточки(Объект.Родитель);
	Иначе
		врВидКарточки = ПолучитьВидКарточки(Родитель);
	КонецЕсли;
		Объект.ПолноеНаименование = "";
	Если врВидКарточки = Справочники.Карточки.ДисконтнаяКарта Тогда
		Если ТипЗнч(Объект.Объект) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Возврат;
		КонецЕсли;
		Объект.ПолноеНаименование = Объект.ПолноеНаименование + Объект.Объект;
		Объект.Комментарий   = НСтр("ru = 'Размер скидки определяется магазином'");
		
	ИначеЕсли врВидКарточки = Справочники.Карточки.КарточкаПользователя Тогда
		Если ТипЗнч(Объект.Объект) <> Тип("СправочникСсылка.Пользователи") Тогда
			Возврат;
		КонецЕсли;
		Объект.ПолноеНаименование = Объект.ПолноеНаименование + Объект.Объект;
		
	ИначеЕсли врВидКарточки = Справочники.Карточки.УдалитьСлужебнаяОперация Тогда
		Если ТипЗнч(Объект.Объект) <> Тип("Строка") Тогда
			Возврат;
		КонецЕсли;
		Объект.ПолноеНаименование = Объект.ПолноеНаименование + Объект.Объект;
		
	ИначеЕсли врВидКарточки = Справочники.Карточки.Чистая Тогда
		Объект.ПолноеНаименование = НСтр("ru = 'Не используется'");
		
	ИначеЕсли врВидКарточки = Справочники.Карточки.КлубнаяКарта Тогда
		Если ТипЗнч(Объект.Объект) <> Тип("СправочникСсылка.ДоговорыВзаиморасчетов") Тогда
			Возврат;
		КонецЕсли;
		Объект.ПолноеНаименование = Объект.ПолноеНаименование + Объект.Объект.Владелец.Наименование;
		
	ИначеЕсли врВидКарточки = Справочники.Карточки.Талон Тогда
		Если ТипЗнч(Объект.Объект) <> Тип("СправочникСсылка.ДоговорыВзаиморасчетов") Тогда
			Возврат;
		КонецЕсли;
		ВладелецНаименование = СокрЛП(Объект.Объект.Владелец.Наименование);
		Если НЕ ПустаяСтрока(ВладелецНаименование) Тогда
			ВладелецНаименование = ВладелецНаименование + " ";
		КонецЕсли;
		Объект.ПолноеНаименование = Объект.ПолноеНаименование + ВладелецНаименование + ?(
									ЗначениеЗаполнено(Объект.Номинал), Объект.Номинал, "0.00") + " руб.";
	ИначеЕсли врВидКарточки = Справочники.Карточки.ПрофилиСкидок Тогда
		
		Объект.ПолноеНаименование = Объект.ПолноеНаименование + Объект.Наименование;
	ИначеЕсли  врВидКарточки = Справочники.Карточки.КарточкаСотрудника Тогда
		Если ТипЗнч(Объект.Объект) <> Тип("СправочникСсылка.Сотрудники") Тогда
			Возврат;
		КонецЕсли;

		Объект.ПолноеНаименование = Объект.ПолноеНаименование + Объект.Объект; 
	КонецЕсли;
	
КонецПроцедуры // СформироватьПолноеНаименование()

// Обработчик события возникающего при изменении данных реквизита "Вид карточки".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ВидКарточкиПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПолучитьРодителя(Объект);
	
	Если НЕ Объект.ЭтоГруппа Тогда
		Объект.Объект = Неопределено;
		Объект.Наименование = Справочники.Карточки.СформироватьНаименованиеПоУмолчанию(Объект);
		Справочники.Карточки.СформироватьПолноеНаименование(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ВидКарточкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Родитель".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура РодительПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		Объект.ВидКарточки = Объект.Родитель.ВидКарточки;
	КонецЕсли;
	
	Если НЕ Объект.ЭтоГруппа Тогда
		Справочники.Карточки.СформироватьПолноеНаименование(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ВидКарточкиПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Справочник.Карточки",
		"ПФ_MXL_Карточка",
		НСтр("ru = 'Карточка'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Карточка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_Карточка",
															"Карточка",
															ПечатьКарточка(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// функция печати элементов спр Карточки 
//
Функция ПечатьКарточка(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Карточки_Карточка";
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Карточки.ПФ_MXL_Карточка");
	
	// Создадим список карточек для печати
	МассивКарточек = Новый Массив;
	Для Каждого ЭлементМассиваОбъектов Из МассивОбъектов Цикл
		Если ЭлементМассиваОбъектов.ЭтоГруппа Тогда
			Выборка = Справочники.Карточки.ВыбратьИерархически(ЭлементМассиваОбъектов);
			Пока Выборка.Следующий() Цикл
				Если НЕ Выборка.ЭтоГруппа Тогда
					МассивКарточек.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
		Иначе // печатаем текущую карточку
			МассивКарточек.Добавить(ЭлементМассиваОбъектов);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивКарточек);
	
	// Проверим, есть ли карточки для печати
	Если МассивКарточек.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет объектов для печати'"));
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	НомСтроки = 1;
	НомКолонки = 1;
	
	Попытка
		ВСтроке = Число(Макет.Области.ВСтроке.Текст);
		ВСтолбце = Число(Макет.Области.ВСтолбце.Текст);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Неверное количество экземпляров на листе'"));
		Возврат ТабличныйДокумент;
	КонецПопытки;
	
	// Проверка корректности числа этикеток на странице
	Если ВСтроке <= 0 ИЛИ ВСтолбце <= 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Неверное количество экземпляров на листе'"));
		Возврат ТабличныйДокумент;
	КонецЕсли; 
	
	НомерСтрокиНачало = 1;
	// Воздадим временный документ, где будем собирать карточку и ШК
	ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Напечатаем все карточки
	Для Каждого Карточка Из МассивКарточек Цикл
		
		Если НомСтроки > ВСтолбце Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			НомСтроки = 1;
		КонецЕсли;
		
		
		Если НомКолонки > ВСтроке Тогда
			НомКолонки = 1;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		КонецЕсли;
		
		ОбластьКарточка = Макет.ПолучитьОбласть("Карточка|Карта");
		ОбластьКарточка.Параметры.ВидКарточки = Карточка.ВидКарточки;
		ОбластьКарточка.Параметры.Представление = Карточка.ПолноеНаименование;
		ОбластьКарточка.Параметры.Комментарий = Карточка.Комментарий;
		
		// получим штрихкод
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ШтрихКоды.ШтрихКод КАК ШтрихКод
		|ИЗ
		|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.Объект=&Карточка";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Карточка",Карточка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ШК = Выборка.ШтрихКод;
			Если ЗначениеЗаполнено(ШК) Тогда
				ОбластьШтрихКод = Макет.ПолучитьОбласть("Карточка|ШтрихКод");
				ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
				ПараметрыШтрихкода.Вставить("Ширина", Окр(ОбластьШтрихКод.Рисунки.ШК.Ширина / КоличествоМиллиметровВПикселе));
				ПараметрыШтрихкода.Вставить("Высота", Окр(ОбластьШтрихКод.Рисунки.ШК.Высота / КоличествоМиллиметровВПикселе));
				ПараметрыШтрихкода.Вставить("Штрихкод", СокрЛП(ШК));
				ПараметрыШтрихкода.Вставить("ТипКода", 99);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
				ПараметрыШтрихкода.Вставить("РазмерШрифта", 12);
				ОбластьШтрихКод.Рисунки.ШК.Картинка =
					ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода).Картинка;
				
			КонецЕсли;
		Иначе
			ОбластьШтрихКодОшибка = Макет.ПолучитьОбласть("Карточка|ШтрихКодНеНайден");
		КонецЕсли;
		
		ВременныйТабличныйДокумент.Очистить();
		ВременныйТабличныйДокумент.Вывести(ОбластьКарточка);
		Если ЗначениеЗаполнено(ШК) Тогда
			ВременныйТабличныйДокумент.Вывести(ОбластьШтрихКод);
		Иначе
			ВременныйТабличныйДокумент.Вывести(ОбластьШтрихКодОшибка);
		КонецЕсли;
		ОбластьДляВывода = ВременныйТабличныйДокумент.ПолучитьОбласть("R1C1:R" + ВременныйТабличныйДокумент.ВысотаТаблицы 
			+ "C" + ВременныйТабличныйДокумент.ШиринаТаблицы);
		Если НомКолонки = 1 Тогда
			ТабличныйДокумент.Вывести(ОбластьДляВывода);
			НомерКолонкиНачало = 1;
			НомерКолонкиОкончание = ВременныйТабличныйДокумент.ШиринаТаблицы;
		Иначе
			НомерКолонкиНачало = НомерКолонкиОкончание + 1;
			ТабличныйДокумент.Присоединить(ОбластьДляВывода);
			НомерКолонкиОкончание = НомерКолонкиОкончание + ВременныйТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;
		
		
		НомСтроки = НомСтроки + 1;
		НомКолонки = НомКолонки + 1;
		ШК = Неопределено;
		
		ПараметрыОбласти = Новый Структура;
		ПараметрыОбласти.Вставить("НомерСтрокиНачало", НомерСтрокиНачало);
		ПараметрыОбласти.Вставить("НомерКолонкиНачало",НомерКолонкиНачало);
		ПараметрыОбласти.Вставить("НомерКолонкиОкончание", НомерКолонкиОкончание);
		
		// блок области
		УправлениеПечатьюАльфаАвто.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, ПараметрыОбласти, ОбъектыПечати, Карточка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НеНайденнаяКарта";
	Элемент.Код = "000000005";
	Элемент.Наименование = НСтр("ru = 'Не найденная в системе карта'");
	Элемент.ПолноеНаименование = Элемент.Наименование;
	Элемент.ВидКарточки = Перечисления.ВидыКарточек.ДисконтнаяКарта;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДисконтнаяКарта";
	Элемент.Код = "000000001";
	Элемент.Наименование = НСтр("ru = 'Дисконтная карта'");
	Элемент.ПолноеНаименование = Элемент.Наименование;
	Элемент.ВидКарточки = Перечисления.ВидыКарточек.ДисконтнаяКарта;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КарточкаПользователя";
	Элемент.Код = "000000002";
	Элемент.Наименование = НСтр("ru = 'Карточка пользователя'");
	Элемент.ПолноеНаименование = Элемент.Наименование;
	Элемент.ВидКарточки = Перечисления.ВидыКарточек.КарточкаПользователя;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УдалитьСлужебнаяОперация";
	Элемент.Код = "000000003";
	Элемент.Наименование = НСтр("ru = '(не используется) Служебная операция'");
	Элемент.ПолноеНаименование = Элемент.Наименование;
	Элемент.ВидКарточки = Перечисления.ВидыКарточек.УдалитьСлужебнаяОперация;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Чистая";
	Элемент.Код = "000000004";
	Элемент.Наименование = НСтр("ru = 'Чистая'");
	Элемент.ПолноеНаименование = Элемент.Наименование;
	Элемент.ВидКарточки = Перечисления.ВидыКарточек.Чистая;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КлубнаяКарта";
	Элемент.Код = "000000006";
	Элемент.Наименование = НСтр("ru = 'Клубная карта'");
	Элемент.ПолноеНаименование = Элемент.Наименование;
	Элемент.ВидКарточки = Перечисления.ВидыКарточек.КлубнаяКарта;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Талон";
	Элемент.Код = "000000007";
	Элемент.Наименование = НСтр("ru = 'Талон'");
	Элемент.ПолноеНаименование = Элемент.Наименование;
	Элемент.ВидКарточки = Перечисления.ВидыКарточек.Талон;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПрофилиСкидок";
	Элемент.Код = "000000008";
	Элемент.Наименование = НСтр("ru = 'Профили скидок'");
	Элемент.ПолноеНаименование = Элемент.Наименование;
	Элемент.ВидКарточки = Перечисления.ВидыКарточек.ПрофильСкидки;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КарточкаСотрудника";
	Элемент.Код = "000000009";
	Элемент.Наименование = НСтр("ru = 'Карточка сотрудника'");
	Элемент.ПолноеНаименование = Элемент.Наименование;
	Элемент.ВидКарточки = Перечисления.ВидыКарточек.КарточкаСотрудника;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли