// Модуль объекта справочника "Карточки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоКода(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоКода()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И НЕ ЗначениеЗаполнено(ВидКарточки) Тогда
		Если ДанныеЗаполнения.Свойство("Родитель") Тогда
			Родитель = ДанныеЗаполнения.Родитель;
			ВидКарточки = Справочники.Карточки.ПолучитьВидКарточки(Родитель).ВидКарточки;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Объект") Тогда
			Наименование = ДанныеЗаполнения.Объект.Наименование;
			Если ТипЗнч(ДанныеЗаполнения.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
				Родитель    = Справочники.Карточки.КарточкаПользователя;
				ВидКарточки = Перечисления.ВидыКарточек.КарточкаПользователя;
			Иначе
				Родитель    = Справочники.Карточки.КарточкаСотрудника;
				ВидКарточки = Перечисления.ВидыКарточек.КарточкаСотрудника;
			КонецЕсли;
			ДатаСоздания=ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		ПолноеНаименование = "";
	Иначе
		Наименование = Справочники.Карточки.СформироватьНаименованиеПоУмолчанию(ЭтотОбъект);
		Справочники.Карточки.СформироватьПолноеНаименование(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - СправочникОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи объекта.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И (ВидКарточки=Перечисления.ВидыКарточек.Талон ИЛИ ВидКарточки=Перечисления.ВидыКарточек.КлубнаяКарта) Тогда
		Если НЕ ЗначениеЗаполнено(Объект) Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Поле ""Договор"" не заполнено'"),ЭтотОбъект,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередЗаписью(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередЗаписью(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Установим вид карточки
	Если (ВидКарточки <> Неопределено) И ЗначениеЗаполнено(Родитель) И ВидКарточки <> Родитель.ВидКарточки Тогда
		ВидКарточкиРодителя = Справочники.Карточки.ПолучитьВидКарточки(Родитель);
		ВидКарточки = ВидКарточкиРодителя.ВидКарточки;
		Если НЕ ЗначениеЗаполнено(ВидКарточки) Тогда
			Если ВидКарточкиРодителя = Справочники.Карточки.ПрофилиСкидок Тогда
				ВидКарточки = Перечисления.ВидыКарточек.ПрофильСкидки;
			ИначеЕсли ВидКарточкиРодителя = Справочники.Карточки.КарточкаПользователя Тогда
				ВидКарточки = Перечисления.ВидыКарточек.КарточкаПользователя;
			ИначеЕсли ВидКарточкиРодителя = Справочники.Карточки.КарточкаСотрудника Тогда
				ВидКарточки = Перечисления.ВидыКарточек.КарточкаСотрудника;
			ИначеЕсли ВидКарточкиРодителя = Справочники.Карточки.ДисконтнаяКарта Тогда
				ВидКарточки = Перечисления.ВидыКарточек.ДисконтнаяКарта;
			КонецЕсли;
		КонецЕсли;
		
		// Сформируем полное наименование
		Справочники.Карточки.СформироватьПолноеНаименование(ЭтотОбъект, Новый Структура("Родитель", Родитель));
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПриЗаписи(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийСправочникаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

#КонецОбласти

#КонецЕсли
