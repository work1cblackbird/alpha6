///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка справочника "Карточки"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РаботаСФормой.МожноУстановитьОтборПоВладельцу(Параметры) Тогда
		РаботаСФормой.УстановитьОтборПоВладельцуНаДерево(Дерево, Параметры.Отбор);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	Элементы.СоздатьСерию.Видимость = (Элементы.Найти("ФормаСоздать") <> Неопределено);
		
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущийРодитель) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Элемент должен принадлежать группе.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Группа Тогда
		Возврат;
	КонецЕсли;
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеСправочникаКарточки");
	Иначе
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыСправочникаКарточки");
	КонецЕсли;
	// Конец ОценкаПроизводительности
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент.ТекущиеДанные, "ЭтоГруппа")
		И Элемент.ТекущиеДанные.ЭтоГруппа
	Тогда
		Возврат;
	КонецЕсли;
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыСправочникаКарточки");
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	// Сменим родителя в основном списке
	Если Элементы.Список.Видимость Тогда
		Если Элементы.Дерево.ТекущаяСтрока=Элементы.Список.ТекущийРодитель Тогда
			// Пропустим если равны
		ИначеЕсли НЕ ЗначениеЗаполнено(Элементы.Список.ТекущийРодитель) И НЕ ЗначениеЗаполнено(Элементы.Дерево.ТекущаяСтрока) Тогда
			// Пропустим если оба пустые (могут быть Неопределено)
		Иначе
			Элементы.Список.ТекущийРодитель = Элементы.Дерево.ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если НЕ ЗначениеЗаполнено(Строка) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя переместить элемент в корень списка.'"),, НСтр("ru = 'Отмена перемещения'"));
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Отмена И НЕ ПроверкаВозможностиПеретаскивания(ПараметрыПеретаскивания.Значение, Строка) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя переместить предопределенную группу.'"),, НСтр("ru = 'Отмена перемещения'"));
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьСерию(Команда)
	
	ПараметрыДействия = Новый Структура;
	ПолучитьПараметрыДляСозданииСерии(ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыДействия) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Создание серии карточек доступно для карт вида ""Дисконтная карта"" и ""Чистая"".'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТекКол", 100);
	ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСоздатьСерию", ЭтотОбъект, Новый Структура ("СоздатьСерию",ПараметрыДействия));
	ПоказатьВопрос(ОбработчикВопроса, ПараметрыДействия.Текст, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьПараметрыДляСозданииСерии(ПараметрыДействия)
	
	СтрСт = "";
	Если Элементы.Список.ТекущийРодитель = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Создании серии доступно только в группе ""Дисконтные карты"" и ""Чистые""'"));
		Возврат;
	КонецЕсли;
	Если Справочники.Карточки.ПолучитьВидКарточки(Элементы.Список.ТекущийРодитель) = Справочники.Карточки.ДисконтнаяКарта Тогда
		Стр= НСтр("ru = 'Ввод новой серии дисконтных карточек.'")+СтрСт;
	ИначеЕсли Справочники.Карточки.ПолучитьВидКарточки(Элементы.Список.ТекущийРодитель) = Справочники.Карточки.Чистая Тогда
		Стр= НСтр("ru = 'Ввод новой серии чистых карточек.'")+СтрСт;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если (Элементы.Список.ТекущаяСтрока <> Неопределено) И (НЕ Элементы.Список.ТекущаяСтрока.ЭтоГруппа) Тогда
		Выборка = РегистрыСведений.ШтрихКоды.Выбрать(Новый Структура ("Объект",Элементы.Список.ТекущаяСтрока.Ссылка));
		Если Выборка.Следующий() Тогда
			ШтрихКод = Выборка.ШтрихКод;
		Иначе
			ШтрихКод = "0000000000000000000000";
		КонецЕсли;
	Иначе
		ШтрихКод = "0000000000000000000000";
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ШтрихКод",ШтрихКод);
	ПараметрыДействия.Вставить("Текст",Стр);
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьСериюНаСервере(ПараметрыДействия)
	
	ШтрихКод   = СокрЛП(ПараметрыДействия.ШтрихКод);
	ТекКол = ПараметрыДействия.ТекКол;
	ЧислоЦифр  = 0;
	СтрокаЦифр = "0123456789";
	ДлинаШтрихКода = СтрДлина(ШтрихКод);
	Для сч = 1 По ДлинаШтрихКода Цикл
		ОконШтрихКода = Прав(ШтрихКод,сч);
		Симв = Лев(ОконШтрихКода,1);
		Если СтрНайти(СтрокаЦифр,Симв)=0 Тогда
			Прервать;
		Иначе ЧислоЦифр = ЧислоЦифр + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЧислоЦифр = ДлинаШтрихКода Тогда //пропустим это и зададим числовой частью 4 символа 
	ИначеЕсли ЧислоЦифр =0 ИЛИ (ЧислоЦифр < СтрДлина(ТекКол)) ИЛИ (СтрДлина(СтрЗаменить(ТекКол + Прав(ШтрихКод,ЧислоЦифр),Символ(160),""))>ЧислоЦифр) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Длины цифровой части в окончании кода не хватает для генерации %1"" карточек'"),ТекКол)
		);
		Возврат;
	КонецЕсли;
	
	Если ЧислоЦифр = ДлинаШтрихКода Тогда
		ЧислоЦифр = 4;
		Префикс = Лев(ШтрихКод,ДлинаШтрихКода-4);
	Иначе
		Префикс = Лев(ШтрихКод,ДлинаШтрихКода-ЧислоЦифр);
	КонецЕсли;
	
	НачНомер=Число(Прав(ШтрихКод,ЧислоЦифр))+1;
	СтрокаНулей = "";
	Для сч = 1 По ЧислоЦифр Цикл
		СтрокаНулей = СтрокаНулей + "0"
	КонецЦикла;
	
	КолПересечений=0;
	ТекКарта = Неопределено;
	Для Сч = НачНомер По НачНомер+ТекКол-1 Цикл
		ШтрихКод=Префикс+Прав(СтрокаНулей+Формат(Сч,"ЧГ="),ЧислоЦифр);
		ТекКарта = ШтрихкодированиеВызовСервера.ПолучитьКарточкуПоКоду(ШтрихКод);
		Если ТекКарта <> Неопределено Тогда
			КолПересечений = КолПересечений+1;
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Код [%1]"" уже используется в карточке - %2 %3.'"),
					ШтрихКод,
					Справочники.Карточки.ПолучитьВидКарточки(ТекКарта.Родитель),
					ТекКарта.ПолноеНаименование
				)
			);
			
		КонецЕсли;
	КонецЦикла;
	
	Если КолПересечений>0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='При проверке номеров новой серии карточек были найдены пересечения с существующими карточками. НОВАЯ СЕРИЯ НЕ СОЗДАНА.'")
		);
		
		Возврат;
	КонецЕсли;
	
	// Формируем карточки
	НачатьТранзакцию();
	Попытка
		Для Сч = НачНомер По НачНомер + ТекКол - 1 Цикл
			ШтрихКод=Префикс+Прав(СтрокаНулей+Формат(Сч,"ЧГ="),ЧислоЦифр);
			НовыйЭлемент = Справочники.Карточки.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Родитель = Элементы.Список.ТекущийРодитель;
			НовыйЭлемент.Объект = Неопределено;
			НовыйЭлемент.ВидКарточки = Справочники.Карточки.ПолучитьВидКарточки(НовыйЭлемент.Родитель).ВидКарточки;
			НовыйЭлемент.ИспользоватьПовторно = Ложь;
			НовыйЭлемент.ДатаСоздания = ТекущаяДатаСеанса();
			НовыйЭлемент.Наименование = Справочники.Карточки.СформироватьНаименованиеПоУмолчанию(НовыйЭлемент, ШтрихКод);
			Справочники.Карточки.СформироватьПолноеНаименование(НовыйЭлемент);
			НовыйЭлемент.Записать();
			
			// зарегистрируем новый штрихкод
			НоваяЗапись=РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
			НоваяЗапись.ШтрихКод = ШтрихКод;
			НоваяЗапись.Объект = НовыйЭлемент.Ссылка;
			НоваяЗапись.Запрет = Ложь;
			НоваяЗапись.Записать();
		КонецЦикла;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Создание новой серии завершено.'"));
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Ошибка создания карточки - %1'"),ОписаниеОшибки())
		);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаВозможностиПеретаскивания(Карточка, Строка)
	
	Объект = Карточка.ПолучитьОбъект();
	Если Объект.Предопределенный И Объект.ЭтоГруппа Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСоздатьСерию(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СоздатьСерию") Тогда
		Если РезультатОповещения = КодВозвратаДиалога.ОК Тогда
			ОбработчикВводаСтроки = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСоздатьСерию", ЭтотОбъект, Новый Структура ("ВводСтроки",ДополнительныеПараметры.СоздатьСерию));
			ПоказатьВводСтроки(ОбработчикВводаСтроки,ДополнительныеПараметры.СоздатьСерию.ШтрихКод, НСтр("ru = 'Введите код первой карточки'"),22);
		КонецЕсли;
		
		Возврат;
	ИначеЕсли ДополнительныеПараметры.Свойство("ВводСтроки") Тогда
		ДополнительныеПараметры.ВводСтроки.ШтрихКод = РезультатОповещения;
		ПараметрыОтветов = ДополнительныеПараметры.ВводСтроки;
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВводаЧисла = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСоздатьСерию", ЭтотОбъект, Новый Структура ("ВводЧисла",ПараметрыОтветов));
		ПоказатьВводЧисла(ОбработчикВводаЧисла,ПараметрыОтветов.ТекКол, НСтр("ru = 'Введите количество карточек'"),4,0);
		
		Возврат;
	ИначеЕсли ДополнительныеПараметры.Свойство("ВводЧисла") Тогда
		ДополнительныеПараметры.ВводЧисла.ТекКол = РезультатОповещения;
		ПараметрыОтветов = ДополнительныеПараметры.ВводЧисла;
		Если НЕ ПустаяСтрока(ПараметрыОтветов.ШтрихКод) ИЛИ НЕ (ПараметрыОтветов.ТекКол <= 0) ИЛИ НЕ (СтрДлина(СокрЛП(ПараметрыОтветов.ШтрихКод))<4) Тогда
			СоздатьСериюНаСервере(ПараметрыОтветов);
			Элементы.Список.Обновить();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры 

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаКлиенте
Процедура ПоказатьСкрытьДерево(Команда)
	
	ВидимостьДерева = Не ВидимостьДерева;	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

