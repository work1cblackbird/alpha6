// Модуль менеджера справочника "Типы маркировки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ИзделияИзМеха";
	Элемент.Код                       = "00000005";
	Элемент.Наименование              = НСтр("ru = 'Изделия из меха'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.КодМаркировки             = "0002";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЛекарственныеПрепараты";
	Элемент.Код                       = "00000001";
	Элемент.Наименование              = НСтр("ru = 'Лекарственные препараты'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.КодМаркировки             = "0003";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТабачнаяПродукция";
	Элемент.Код                       = "00000002";
	Элемент.Наименование              = НСтр("ru = 'Табачная продукция'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.КодМаркировки             = "0005";
	Элемент.ТоварнаяГруппа            = "tobacco";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОбувныеТовары";
	Элемент.Код                       = "00000003";
	Элемент.Наименование              = НСтр("ru = 'Обувные товары'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.КодМаркировки             = "1520";
	Элемент.ТоварнаяГруппа            = "shoes";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ШиныИАвтопокрышки";
	Элемент.Код                       = "00000004";
	Элемент.Наименование              = НСтр("ru = 'Шины и покрышки пневматические резиновые новые'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.КодМаркировки             = "2211";
	Элемент.ТоварнаяГруппа            = "tires";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Парфюмерия";
	Элемент.Код                       = "00000007";
	Элемент.Наименование              = НСтр("ru = 'Духи и туалетная вода'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ТоварнаяГруппа            = "perfumery";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЛегкаяПромышленность";
	Элемент.Код                       = "00000006";
	Элемент.Наименование              = НСтр("ru = 'Предметы одежды, белье постельное, столовое, туалетное и кухонное'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ТоварнаяГруппа            = "lp";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпакованнаяВода";
	Элемент.Код                       = "00000008";
	Элемент.Наименование              = НСтр("ru = 'Упакованная вода'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ТоварнаяГруппа            = "water";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "МолочнаяПродукция";
	Элемент.Код                       = "00000009";
	Элемент.Наименование              = НСтр("ru = 'Молочная продукция'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ТоварнаяГруппа            = "milk";
	
	ПоддерживаемыеТоварныеГруппы = ПоддерживаемыеТоварныеГруппы();
	
	Для Каждого Элемент Из Элементы Цикл
		
		Если ПустаяСтрока(Элемент.ТоварнаяГруппа) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеТоварнойГруппы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПоддерживаемыеТоварныеГруппы,
			Элемент.ТоварнаяГруппа);
		
		Если ДанныеТоварнойГруппы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Элемент, ДанныеТоварнойГруппы);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет предопределенный элемент "Упакованная вода"
//
Процедура ЗаполнитьПараметрыУпакованнойВоды() Экспорт
	
	Элемент = Справочники.ТипыМаркировки.УпакованнаяВода.ПолучитьОбъект();
	
	Если Не ПустаяСтрока(Элемент.ТоварнаяГруппа) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ИмяПредопределенныхДанных = "УпакованнаяВода";
	Элемент.Код                       = "00000008";
	Элемент.Наименование              = НСтр("ru = 'Упакованная вода'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ТоварнаяГруппа            = "water";
	
	ПоддерживаемыеТоварныеГруппы = ПоддерживаемыеТоварныеГруппы();
	
	ДанныеТоварнойГруппы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПоддерживаемыеТоварныеГруппы,
		Элемент.ТоварнаяГруппа);
	ЗаполнитьЗначенияСвойств(Элемент, ДанныеТоварнойГруппы);
	
	Элемент.ОбменДанными.Загрузка = Истина;
	
	Попытка
		Элемент.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Заполняет предопределенный элемент "Молочная продукция"
//
Процедура ЗаполнитьПараметрыМолочнаяПродуция() Экспорт
	
	Элемент = Справочники.ТипыМаркировки.МолочнаяПродукция.ПолучитьОбъект();
	
	Элемент.ИмяПредопределенныхДанных = "МолочнаяПродукция";
	Элемент.Код                       = "00000009";
	Элемент.Наименование              = НСтр("ru = 'Молочная продукция'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ТоварнаяГруппа            = "milk";
	
	ПоддерживаемыеТоварныеГруппы = ПоддерживаемыеТоварныеГруппы();
	
	ДанныеТоварнойГруппы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПоддерживаемыеТоварныеГруппы,
		Элемент.ТоварнаяГруппа);
	ЗаполнитьЗначенияСвойств(Элемент, ДанныеТоварнойГруппы);
	
	Элемент.ОбменДанными.Загрузка = Истина;
	
	Попытка
		Элемент.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	Если Объект.Ссылка <> Справочники.ТипыМаркировки.ЛекарственныеПрепараты
		И Объект.Ссылка <> Справочники.ТипыМаркировки.ИзделияИзМеха Тогда
		ОбязательныеРеквизиты.Добавить("ТоварнаяГруппа");
		ОбязательныеРеквизиты.Добавить("КодТоварнойГруппы");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

// Возвращает список поддерживаемых товарных групп
//
// Возвращаемое значение:
//  Структура - поддерживаемые товарные группы. Ключ наименование группы, значение структура с полями:
//  * ТоварнаяГруппаСУЗ - Строка;
//  * Описание - Строка;
//  * КодТоварнойГруппы - Число;
//  * ДоступноСозданиеДокументов - Булево;
//
Функция ПоддерживаемыеТоварныеГруппы() Экспорт
	
	Результат = Новый Структура();
	
	lp = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"lp",
		НСтр("ru = 'Предметы одежды, белье постельное, столовое, туалетное и кухонное'"),
		10,
		Истина
	);
	Результат.Вставить("lp", lp);
	
	shoes = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"shoes",
		НСтр("ru = 'Обувные товары'"),
		1,
		Ложь
	);
	Результат.Вставить("shoes", shoes);
	
	tobacco = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"tobacco",
		НСтр("ru = 'Табачная продукция'"),
		4,
		Истина
	);
	Результат.Вставить("tobacco", tobacco);
	
	perfumery = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"perfum",
		НСтр("ru = 'Духи и туалетная вода'"),
		9,
		Истина
	);
	Результат.Вставить("perfumery", perfumery);
	
	tires = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"tires",
		НСтр("ru = 'Шины и покрышки пневматические резиновые новые'"),
		7,
		Истина
	);
	Результат.Вставить("tires", tires);
	
	electronics = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"photo",
		НСтр("ru = 'Фотокамеры (кроме кинокамер), фотовспышки и лампы-вспышки'"),
		8,
		Истина
	);
	Результат.Вставить("electronics", electronics);
	
	milk = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"milk",
		НСтр("ru = 'Молочная продукция'"),
		20,
		Истина
	);
	Результат.Вставить("milk", milk);
	
	bicycle = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"bicycle",
		НСтр("ru = 'Велосипеды и велосипедные рамы'"),
		11,
		Истина
	);
	Результат.Вставить("bicycle", bicycle);
	
	wheelchairs = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"wheelchairs",
		НСтр("ru = 'Кресла-коляски'"),
		12,
		Истина
	);
	Результат.Вставить("wheelchairs", wheelchairs);
	
	otp = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"otp",
		НСтр("ru = 'Альтернативная табачная продукция'"),
		14,
		Истина
	);
	Результат.Вставить("otp", otp);
	
	water = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"water",
		НСтр("ru = 'Упакованная вода'"),
		16,
		Истина
	);
	Результат.Вставить("water", water);
	
	beer = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"beer",
		НСтр("ru = 'Пиво, напитки, изготавливаемые на основе пива, слабоалкогольные напитки'"),
		18,
		Истина
	);
	Результат.Вставить("beer", beer);
	
	ncp = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"ncp",
		НСтр("ru = 'Никотиносодержащая продукция'"),
		21,
		Истина
	);
	Результат.Вставить("ncp", ncp);
	
	bio = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"bio",
		НСтр("ru = 'Биологически активные добавки к пище'"),
		23,
		Истина
	);
	Результат.Вставить("bio", bio);
	
	antiseptic = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"antiseptic",
		НСтр("ru = 'Антисептики и дезинфицирующие средства'"),
		25,
		Истина
	);
	Результат.Вставить("antiseptic", antiseptic);
	
	nabeer = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"nabeer",
		НСтр("ru = 'Безалкогольное пиво'"),
		28,
		Истина
	);
	Результат.Вставить("nabeer", nabeer);
	
	softdrinks = Новый Структура(
		"ТоварнаяГруппаСУЗ,Описание,КодТоварнойГруппы,ДоступноСозданиеДокументов",
		"softdrinks",
		НСтр("ru = 'Соковая продукция и безалкогольные напитки'"),
		29,
		Истина
	);
	Результат.Вставить("softdrinks", softdrinks);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получения кода маркировки
// 
// Параметры:
// ТипМаркировки - СправочникСсылка.ТипыМаркировки - Маркировка получения.
//
// Возвращаемое значение:
//  Число - код типа маркировки
//
Функция ПолучитьКодТипаМаркировки(ТипМаркировки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТипМаркировки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипМаркировки, "КодМаркировки");
	
КонецФункции // ПолучитьКодТипаМаркировки()

// Получить тип маркировки по коду
// 
// Параметры:
//  КодТипаМаркировки - Число - Код для получения маркировки.
//
// Возвращаемое значение:
//  СправочникСсылка.ТипыМаркировки - Ссылка на тип маркировки
//
Функция ТипМаркировкиПоКоду(Знач КодТипаМаркировки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодТипаМаркировки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Заполним нулями если длина меньше четырех.
	ДлинаКодаМаркировки = 4;
	Если СтрДлина(КодТипаМаркировки) < ДлинаКодаМаркировки Тогда
		Пока СтрДлина(КодТипаМаркировки) < ДлинаКодаМаркировки Цикл
			КодТипаМаркировки = "0" + КодТипаМаркировки;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТипыМаркировки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ТипыМаркировки КАК ТипыМаркировки
	               |ГДЕ
	               |	ТипыМаркировки.КодМаркировки = &КодМаркировки";
	Запрос.УстановитьПараметр("КодМаркировки", КодТипаМаркировки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ТипМаркировкиПоКоду()

#КонецОбласти

#КонецЕсли
