
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ТипШаблона.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЗаполнитьСписокМетаданныхИспользующихШаблоны(Метаданные.Справочники);
	ЗаполнитьСписокМетаданныхИспользующихШаблоны(Метаданные.Документы);
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОбъектИсточник = Параметры.ЗначениеКопирования.ПолучитьОбъект();
	Иначе
		ОбъектИсточник = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.ХранилищеШаблонов"));
	КонецЕсли;
	
	СтруктураШаблона = ОбъектИсточник.Шаблон.Получить();
	СКД = ОбъектИсточник.СхемаКомпоновкиДанных.Получить();
	
	Если ТипЗнч(СтруктураШаблона) = Тип("Структура") Тогда
		СтруктураШаблона.Свойство("XMLОписаниеМакета", XMLОписаниеМакета);
	КонецЕсли;
	
	АдресШаблона = ПоместитьВоВременноеХранилище(СтруктураШаблона, УникальныйИдентификатор);	
	
	Если СКД <> Неопределено Тогда
		АдресСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРедактироватьМакет", "Видимость", Ложь);
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененШаблон" ИЛИ ИмяСобытия = "ИзмененШаблонЧека" Тогда
		Параметр.Свойство("АдресШаблона", АдресШаблона);
		Модифицированность = Истина;
		Если ИмяСобытия = "ИзмененШаблон" И ЗначениеЗаполнено(АдресШаблона) Тогда
			СтруктураШаблона = ПолучитьИзВременногоХранилища(АдресШаблона);
			Если СтруктураШаблона <> Неопределено Тогда
				
				Если СтруктураШаблона.Свойство("АдресСКДВХранилище") И ЗначениеЗаполнено(СтруктураШаблона.АдресСКДВХранилище) Тогда
					АдресСКД = СтруктураШаблона.АдресСКДВХранилище;
				КонецЕсли;
				
			КонецЕсли;
			РазмерМакета = "";
			Если Параметр.Свойство("РазмерМакета", РазмерМакета) Тогда
				Объект.РазмерМакета = РазмерМакета;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ХранилищеШаблонов");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(АдресШаблона) Тогда
		
		СтруктураШаблона = ПолучитьИзВременногоХранилища(АдресШаблона);
		ТекущийОбъект.Шаблон = Новый ХранилищеЗначения(СтруктураШаблона);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСКД) Тогда
		
		СКД = ПолучитьИзВременногоХранилища(АдресСКД);
		ТекущийОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(СКД);
		
		Если НЕ Отказ Тогда
			Если НЕ ОбязательныеПараметрыСКДЗаполнены(ТекущийОбъект) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	УправлениеДиалогомНаСервере();
	
	Элементы.ТипШаблона.ТолькоПросмотр = Истина;
	Элементы.ОбъектМетаданных.ТолькоПросмотр = Истина;
	Элементы.ОбъектМетаданных.АвтоОтметкаНезаполненного = Ложь;
	Элементы.ОбъектМетаданных.ОтметкаНезаполненного = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипШаблонаПриИзменении(Элемент)
	
	Объект.ОбъектМетаданных = "";
	АдресШаблона = "";
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.Наименование.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(Объект.ОбъектМетаданных) 
		И Элементы.ОбъектМетаданных.СписокВыбора.НайтиПоЗначению(Объект.ОбъектМетаданных) <> Неопределено
	Тогда
		СтрокаНаименования = Элементы.ОбъектМетаданных.СписокВыбора.НайтиПоЗначению(Объект.ОбъектМетаданных).Представление;
		Элементы.Наименование.СписокВыбора.Добавить("Чек " + СтрокаНаименования);
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуРедактированияМакета(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПерейтиКРедактированиюМакетаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			Оповещение, 
			НСтр("ru = 'Для редактирования шаблона необходимо записать элемент. Записать?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да
		);
	Иначе
		ПерейтиКРедактированиюМакета();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПерейтиКРедактированиюМакетаЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			Записать();
			ПерейтиКРедактированиюМакета();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКРедактированиюМакета()
	
	Если Объект.ТипШаблона = ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток") Тогда
		Если НЕ ЗначениеЗаполнено(АдресСКД) Тогда
			УстановитьСКДПоУмолчанию();
		КонецЕсли;
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьРедактированиеМакетаЗавершение", ЭтотОбъект);
		ОборудованиеПринтерыЭтикетокКлиент.НачатьРедактированиеМакета(ОповещениеПриЗавершении, XMLОписаниеМакета, АдресСКД);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ТипШаблона", Объект.ТипШаблона);
	ПараметрыОткрытия.Вставить("АдресШаблона", АдресШаблона);
	ПараметрыОткрытия.Вставить("АдресСКД", АдресСКД);
	
	ОткрытьФорму(
		"Справочник.ХранилищеШаблонов.Форма.ФормаРедактированияШаблона",
		ПараметрыОткрытия,
		ЭтаФорма,
		, , , ,
		РежимОткрытияОкнаФормы.Независимый
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокМетаданныхИспользующихШаблоны(КоллекцияМетаданных)
	
	Для Каждого МетаданныеОбъекта Из КоллекцияМетаданных Цикл
		Для Каждого Макет Из МетаданныеОбъекта.Макеты Цикл
			Если ВРег(Макет.Имя) = ВРег("ПоляШаблона") Тогда
				Элементы.ОбъектМетаданных.СписокВыбора.Добавить(МетаданныеОбъекта.ПолноеИмя(), МетаданныеОбъекта.Представление());
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Элементы.ОбъектМетаданных.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ВидимостьОбъектаМетаданных = Ложь;
	Элементы.ОбъектМетаданных.Видимость = ВидимостьОбъектаМетаданных;
	
КонецПроцедуры

&НаСервере
Функция ОбязательныеПараметрыСКДЗаполнены(ТекущийОбъект)
	
	ВсеВерно = Истина;
	Если ТекущийОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
		ПроверяемаяСхема = ТекущийОбъект.СхемаКомпоновкиДанных.Получить();
		
		Если ПроверяемаяСхема = Неопределено Тогда
			Возврат ВсеВерно;
		КонецЕсли;
		
		// Подготовка компоновщика макета компоновки данных, загрузка настроек.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПроверяемаяСхема));
		
		КомпоновщикНастроек.ЗагрузитьНастройки(ПроверяемаяСхема.НастройкиПоУмолчанию);

		НастройкиСКД = КомпоновщикНастроек.Настройки;
		СписокПараметровСКД = НастройкиСКД.ПараметрыДанных.Элементы;
		ИндексПараметра = 0;
		Для Каждого ПараметрСКД Из СписокПараметровСКД Цикл
			Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПараметрНастроек = КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрСКД.Параметр);
				Если ПараметрНастроек <> Неопределено И ПараметрНастроек.ЗапрещатьНезаполненныеЗначения Тогда
					Если (НЕ ПараметрСКД.Использование) ИЛИ (НЕ ЗначениеЗаполнено(ПараметрСКД.Значение)) Тогда
						ТекстСообщения = НСтр("ru = 'В схеме компоновки не заполнено значение обязательного параметра ""%1"". Откройте редактор макета и настройте параметры СКД.'");
						ПараметрЗаголовок = ?(ЗначениеЗаполнено(ПараметрНастроек.Заголовок),
																	ПараметрНастроек.Заголовок,
																	ПараметрНастроек.Имя); 
						ИмяПараметраСКД = ?(ЗначениеЗаполнено(ПараметрСКД.ПредставлениеПользовательскойНастройки),
												ПараметрСКД.ПредставлениеПользовательскойНастройки, ПараметрЗаголовок);
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяПараметраСКД);
						ОбщегоНазначения.СообщитьПользователю(
							ТекстСообщения,
							,
							"ФормаРедактироватьМакет",
							"Объект");
						ВсеВерно = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ИндексПараметра = ИндексПараметра + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВсеВерно;
	
КонецФункции

&НаКлиенте
Процедура НачатьРедактированиеМакетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.РазмерМакета = ДополнительныеПараметры.РазмерМакета;
		XMLОписаниеМакета = ДополнительныеПараметры.XMLОписаниеМакета;
		Поля.Очистить();
		
		Для Каждого ТекПоле Из ДополнительныеПараметры.Поля Цикл
			НовоеПоле = Поля.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПоле, ТекПоле);
		КонецЦикла;
		
		АдресШаблона = СохранитьЗакрытьСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьЗакрытьСервер()
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураМакетаШаблона(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СтруктураМакетаШаблона()
	
	СтруктураМакетаШаблона = Новый Структура;
	
	СтруктураМакетаШаблона.Вставить("РазмерМакета"				, Объект.РазмерМакета);
	СтруктураМакетаШаблона.Вставить("XMLОписаниеМакета"			, XMLОписаниеМакета);
	СтруктураМакетаШаблона.Вставить("АдресСКДВХранилище"		, АдресСКД);
	
	ПоляМакета = Новый Массив;
	
	Для Каждого ТекПоле Из Поля Цикл
		НовоеПоле = Новый Структура("Наименование, ТипЗаполнения, Значение, ЗначениеПоУмолчанию, Тип",
			ТекПоле.Наименование,
			ТекПоле.ТипЗаполнения,
			ТекПоле.Значение,
			ТекПоле.ЗначениеПоУмолчанию,
			ТекПоле.Тип);
			
		ПоляМакета.Добавить(НовоеПоле);
	КонецЦикла;
	
	СтруктураМакетаШаблона.Вставить("ПоляМакета" , ПоляМакета);
	
	Возврат СтруктураМакетаШаблона;
	
КонецФункции

&НаСервере
Процедура УстановитьСКДПоУмолчанию()
	
	СКД = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблона");
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура УправлениеДиалогомНаСервере()

	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти