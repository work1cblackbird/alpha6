// Модуль менеджера справочника "Виды планов компании"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	// ПланПродажПоТоварнымКатегориямМесячный
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПланПродажПоТоварнымКатегориямМесячный";
	Элемент.Код                       = "00000002";
	Элемент.Наименование              = НСтр("ru = 'План продаж по товарным категориям месячный'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ПериодичностьПланирования = Перечисления.ПериодичностьАнализаНакопительныхСкидок.Месяц;
	Элемент.ВидАналитикиПланирования1 = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.ТипыНоменклатуры;
	Элемент.ПоказательПлана1 = "Стоимость продажи";
	
	Элемент.ОтчетыИОбработки = ТабличныеЧасти.ОтчетыИОбработки.Скопировать();
	ОтчетИлиОбработка = Элемент.ОтчетыИОбработки.Добавить();
	ОтчетИлиОбработка.Наименование = НСтр("ru = 'План продаж по товарным категориям месячный'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ОтчетИлиОбработка.ВидОбъекта = 3;
	ОтчетИлиОбработка.ПутьКОбъекту = "ПланПродажПоТоварнымКатегориямМесячный";
	ОтчетИлиОбработка.ФлагЗаполненияПлана = Истина;
	ОтчетИлиОбработка.ФлагЗаполненияФакта = Истина;
	ОтчетИлиОбработка.ФлагПроверкиПлана = Ложь;
	
	Элемент.ПараметрыПлана = ТабличныеЧасти.ПараметрыПлана.Скопировать();
	Элемент.ПараметрыПлана.Добавить().ВидПараметра = ПланыВидовХарактеристик.ПараметрыПланирования.КоэффициентРоста;

	// ПланПродажПоНоменклатуреВПределахКатегорииМесячный
			
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПланПродажПоНоменклатуреВПределахКатегорииМесячный";
	Элемент.Код                       = "00000003";
	Элемент.Наименование              = НСтр("ru = 'План продаж по номенклатуре в пределах категории месячный'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ПериодичностьПланирования = Перечисления.ПериодичностьАнализаНакопительныхСкидок.Месяц;
	Элемент.ВидОбъектаПланирования  = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.ТипыНоменклатуры;
	Элемент.ВидАналитикиПланирования1 = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.Номенклатура;
	Элемент.ПоказательПлана1 = "Количество";
	Элемент.ПоказательПлана2 = "Цена продажи";
	Элемент.ПоказательПлана3 = "Стоимость продажи";
	
	Элемент.ОтчетыИОбработки = ТабличныеЧасти.ОтчетыИОбработки.Скопировать();
	ОтчетИлиОбработка = Элемент.ОтчетыИОбработки.Добавить();
	ОтчетИлиОбработка.Наименование = НСтр("ru = 'План продаж по номенклатуре в пределах категории месячный'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ОтчетИлиОбработка.ВидОбъекта = 3;
	ОтчетИлиОбработка.ПутьКОбъекту = "ПланПродажПоНоменклатуреВПределахКатегорииМесячный";
	ОтчетИлиОбработка.ФлагЗаполненияПлана = Истина;
	ОтчетИлиОбработка.ФлагЗаполненияФакта = Истина;
	ОтчетИлиОбработка.ФлагПроверкиПлана = Ложь;
	
	Элемент.ПараметрыПлана = ТабличныеЧасти.ПараметрыПлана.Скопировать();
	Элемент.ПараметрыПлана.Добавить().ВидПараметра = ПланыВидовХарактеристик.ПараметрыПланирования.ШиринаАссортимента;
	
	Элемент.БазовыеПланы = ТабличныеЧасти.БазовыеПланы.Скопировать();
	БазовыйПлан = Элемент.БазовыеПланы.Добавить();
	БазовыйПлан.ВидПлана = Справочники.ВидыПлановКомпании.ПланПродажПоТоварнымКатегориямМесячный;
	БазовыйПлан.ВидЗависимости = Перечисления.ВидыЗависимостейПланов.ПоСвоемуПодразделению;
	БазовыйПлан.ОбъектПланированияПоАналитике = 2;
	БазовыйПлан.ВыборОбъектаПланированияПоАналитике = 1;
	
	// ПланЗакупокПоНоменклатуреВПределахКатегорииМесячный
			
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПланЗакупокПоНоменклатуреВПределахКатегорииМесячный";
	Элемент.Код                       = "00000004";
	Элемент.Наименование              = НСтр("ru = 'План закупок по номенклатуре в пределах категории месячный'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ПериодичностьПланирования = Перечисления.ПериодичностьАнализаНакопительныхСкидок.Месяц;
	Элемент.ВидОбъектаПланирования  = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.ТипыНоменклатуры;
	Элемент.ВидАналитикиПланирования1 = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.Номенклатура;
	Элемент.ПоказательПлана1 = "Количество";
	Элемент.ПоказательПлана2 = "Цена закупки";
	Элемент.ПоказательПлана3 = "Стоимость закупки";
	
	Элемент.ОтчетыИОбработки = ТабличныеЧасти.ОтчетыИОбработки.Скопировать();
	ОтчетИлиОбработка = Элемент.ОтчетыИОбработки.Добавить();
	ОтчетИлиОбработка.Наименование = НСтр("ru = 'План закупок по номенклатуре в пределах категории месячный'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ОтчетИлиОбработка.ВидОбъекта = 3;
	ОтчетИлиОбработка.ПутьКОбъекту = "ПланЗакупокПоНоменклатуреВПределахКатегорииМесячный";
	ОтчетИлиОбработка.ФлагЗаполненияПлана = Истина;
	ОтчетИлиОбработка.ФлагЗаполненияФакта = Истина;
	ОтчетИлиОбработка.ФлагПроверкиПлана = Ложь;
	
	Элемент.БазовыеПланы = ТабличныеЧасти.БазовыеПланы.Скопировать();
	БазовыйПлан = Элемент.БазовыеПланы.Добавить();
	БазовыйПлан.ВидПлана = Справочники.ВидыПлановКомпании.ПланПродажПоНоменклатуреВПределахКатегорииМесячный;
	БазовыйПлан.ВидЗависимости = Перечисления.ВидыЗависимостейПланов.ПоСвоемуПодразделению;
	БазовыйПлан.ОбъектПланированияПоАналитике = 2;
	БазовыйПлан.ВыборОбъектаПланированияПоАналитике = 1;
	
	// ПланЗакупокПоНоменклатуреВПределахКатегорииПоПоставщикамМесячный
			
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПланЗакупокПоНоменклатуреВПределахКатегорииПоПоставщикамМесячный";
	Элемент.Код                       = "00000005";
	Элемент.Наименование              = НСтр("ru = 'План закупок по номенклатуре в пределах категории по поставщикам месячный'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ПериодичностьПланирования = Перечисления.ПериодичностьАнализаНакопительныхСкидок.Месяц;
	Элемент.ВидОбъектаПланирования  = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.ТипыНоменклатуры;
	Элемент.ВидАналитикиПланирования1 = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.Номенклатура;
	Элемент.ВидАналитикиПланирования2 = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.Поставщики;
	Элемент.ПоказательПлана1 = "Количество";
	Элемент.ПоказательПлана2 = "Цена закупки";
	Элемент.ПоказательПлана3 = "Стоимость закупки";
	
	Элемент.ОтчетыИОбработки = ТабличныеЧасти.ОтчетыИОбработки.Скопировать();
	ОтчетИлиОбработка = Элемент.ОтчетыИОбработки.Добавить();
	ОтчетИлиОбработка.Наименование = НСтр("ru = 'План закупок по номенклатуре в пределах категории по поставщикам месячный'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ОтчетИлиОбработка.ВидОбъекта = 3;
	ОтчетИлиОбработка.ПутьКОбъекту = "ПланЗакупокПоНоменклатуреВПределахКатегорииПоПоставщикамМесячный";
	ОтчетИлиОбработка.ФлагЗаполненияПлана = Истина;
	ОтчетИлиОбработка.ФлагЗаполненияФакта = Истина;
	ОтчетИлиОбработка.ФлагПроверкиПлана = Ложь;	
	
	Элемент.БазовыеПланы = ТабличныеЧасти.БазовыеПланы.Скопировать();
	БазовыйПлан = Элемент.БазовыеПланы.Добавить();
	БазовыйПлан.ВидПлана = Справочники.ВидыПлановКомпании.ПланЗакупокПоНоменклатуреВПределахКатегорииМесячный;
	БазовыйПлан.ВидЗависимости = Перечисления.ВидыЗависимостейПланов.ПоСвоемуПодразделению;
	БазовыйПлан.ОбъектПланированияПоАналитике = 2;
	БазовыйПлан.ВыборОбъектаПланированияПоАналитике = 1;
	
	// ПланДоходовИРасходов
			
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПланДоходовИРасходов";
	Элемент.Код                       = "00000006";
	Элемент.Наименование              = НСтр("ru = 'План доходов и расходов'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ПериодичностьПланирования = Перечисления.ПериодичностьАнализаНакопительныхСкидок.Месяц;
	Элемент.ВидАналитикиПланирования1 = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.СтатьиДоходовИРасходов;
	Элемент.ВидАналитикиПланирования2 = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.СтатьиДоходовИРасходов;
	Элемент.ПоказательПлана1 = "Сумма затрат";
	
	Элемент.БазовыеПланы = ТабличныеЧасти.БазовыеПланы.Скопировать();
	БазовыйПлан = Элемент.БазовыеПланы.Добавить();
	БазовыйПлан.ВидПлана = Справочники.ВидыПлановКомпании.ПланЗакупокПоНоменклатуреВПределахКатегорииМесячный;
	БазовыйПлан.ВидЗависимости = Перечисления.ВидыЗависимостейПланов.ПоСвоемуПодразделению;
	БазовыйПлан.ОбъектПланированияПоАналитике = 2;
	БазовыйПлан.ВыборОбъектаПланированияПоАналитике = 1;
	
	БазовыйПлан = Элемент.БазовыеПланы.Добавить();
	БазовыйПлан.ВидПлана = Справочники.ВидыПлановКомпании.ПланЗакупокПоНоменклатуреВПределахКатегорииПоПоставщикамМесячный;
	БазовыйПлан.ВидЗависимости = Перечисления.ВидыЗависимостейПланов.ПоСвоемуПодразделению;
	БазовыйПлан.ОбъектПланированияПоАналитике = 2;
	БазовыйПлан.ВыборОбъектаПланированияПоАналитике = 1;
	
	// ПланДвиженияДС
			
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПланДвиженияДС";
	Элемент.Код                       = "00000007";
	Элемент.Наименование              = НСтр("ru = 'План движения ДС'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.ПериодичностьПланирования = Перечисления.ПериодичностьАнализаНакопительныхСкидок.Месяц;
	Элемент.ВидАналитикиПланирования1 = ПланыВидовХарактеристик.АналитическиеРазрезыПланирования.СтатьиДДС;
	Элемент.ПоказательПлана1 = "Сумма";
	
	Элемент.БазовыеПланы = ТабличныеЧасти.БазовыеПланы.Скопировать();
	БазовыйПлан = Элемент.БазовыеПланы.Добавить();
	БазовыйПлан.ВидПлана = Справочники.ВидыПлановКомпании.ПланЗакупокПоНоменклатуреВПределахКатегорииМесячный;
	БазовыйПлан.ВидЗависимости = Перечисления.ВидыЗависимостейПланов.ПоСвоемуПодразделению;
	БазовыйПлан.ОбъектПланированияПоАналитике = 2;
	БазовыйПлан.ВыборОбъектаПланированияПоАналитике = 1;
	
	БазовыйПлан = Элемент.БазовыеПланы.Добавить();
	БазовыйПлан.ВидПлана = Справочники.ВидыПлановКомпании.ПланЗакупокПоНоменклатуреВПределахКатегорииПоПоставщикамМесячный;
	БазовыйПлан.ВидЗависимости = Перечисления.ВидыЗависимостейПланов.ПоСвоемуПодразделению;
	БазовыйПлан.ОбъектПланированияПоАналитике = 2;
	БазовыйПлан.ВыборОбъектаПланированияПоАналитике = 1;

КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	Если НЕ Объект.ЭтоГруппа Тогда
		ОбязательныеРеквизиты.Добавить("ОтчетыИОбработки.Наименование");
		ОбязательныеРеквизиты.Добавить("БазовыеПланы.ВидПлана");
		ОбязательныеРеквизиты.Добавить("Подразделения.Подразделение");
		ОбязательныеРеквизиты.Добавить("ПараметрыПлана.ВидПараметра");
		ОбязательныеРеквизиты.Добавить("ПериодичностьПланирования");
		ОбязательныеРеквизиты.Добавить("ВидАналитикиПланирования1");
		ОбязательныеРеквизиты.Добавить("ПоказательПлана1");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ВидАналитикиПланирования1");
	Результат.Добавить("ВидАналитикиПланирования2");
	Результат.Добавить("ПоказательПлана1");
	Результат.Добавить("ПоказательПлана2");
	Результат.Добавить("ПоказательПлана3");
	Результат.Добавить("ПериодичностьПланирования");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Справочники.ВидыПлановКомпании);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Справочники.ВидыПлановКомпании);

КонецФункции

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("ВидАналитикиПланирования1");
    Результат.Добавить("ВидАналитикиПланирования2");
    Результат.Добавить("ПоказательПлана1");
    Результат.Добавить("ПоказательПлана2");
	Результат.Добавить("ПоказательПлана3");
	Результат.Добавить("ПериодичностьПланирования");
    Возврат Результат;
    
КонецФункции

#КонецОбласти

#КонецОбласти  

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаТабличнойЧастиОтчетыИОбработки(Объект, ПараметрыДействия) Экспорт
	
	Для Каждого ТекСтрокаОтчетыИОбработки Из Объект.ОтчетыИОбработки Цикл
		Если ТекСтрокаОтчетыИОбработки.ВидОбъекта=1 Тогда
			Если ТекСтрокаОтчетыИОбработки.ВыборВидаОбъекта<>НСтр("ru = 'встроенный запрос из текстового макета'") Тогда
				ТекСтрокаОтчетыИОбработки.ВыборВидаОбъекта=НСтр("ru = 'встроенный запрос из текстового макета'");
			КонецЕсли;
		ИначеЕсли ТекСтрокаОтчетыИОбработки.ВидОбъекта=2 Тогда
			Если ТекСтрокаОтчетыИОбработки.ВыборВидаОбъекта<>НСтр("ru = 'внешний запрос из текстового файла'") Тогда
				ТекСтрокаОтчетыИОбработки.ВыборВидаОбъекта=НСтр("ru = 'внешний запрос из текстового файла'");
			КонецЕсли;
		ИначеЕсли ТекСтрокаОтчетыИОбработки.ВидОбъекта=3 Тогда
			Если ТекСтрокаОтчетыИОбработки.ВыборВидаОбъекта<>НСтр("ru = 'встроенная обработка'") Тогда
				ТекСтрокаОтчетыИОбработки.ВыборВидаОбъекта=НСтр("ru = 'встроенная обработка'");
			КонецЕсли;
		ИначеЕсли ТекСтрокаОтчетыИОбработки.ВидОбъекта=4 Тогда
			Если ТекСтрокаОтчетыИОбработки.ВыборВидаОбъекта<>НСтр("ru = 'внешняя обработка'") Тогда
				ТекСтрокаОтчетыИОбработки.ВыборВидаОбъекта=НСтр("ru = 'внешняя обработка'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПересчетаТабличнойЧастиОтчетыИОбработки()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаТабличнойЧастиБазовыеПланы(Объект, ПараметрыДействия) Экспорт
	
	Для Каждого ТекСтрокаБазовыеПланы Из Объект.БазовыеПланы Цикл
		Если ТекСтрокаБазовыеПланы.ОбъектПланированияПоАналитике=1 Тогда
			Если ТекСтрокаБазовыеПланы.ВыборОбъектаПланированияПоАналитике<> НСтр("ru = 'объект планирования не связан с базовым по объекту планирования'") Тогда
				ТекСтрокаБазовыеПланы.ВыборОбъектаПланированияПоАналитике= НСтр("ru = 'объект планирования не связан с базовым по объекту планирования'");
			КонецЕсли;
		ИначеЕсли ТекСтрокаБазовыеПланы.ОбъектПланированияПоАналитике=2 Тогда
			Если ТекСтрокаБазовыеПланы.ВыборОбъектаПланированияПоАналитике<> НСтр("ru = 'первый номер аналитики базового плана'") Тогда
				ТекСтрокаБазовыеПланы.ВыборОбъектаПланированияПоАналитике= НСтр("ru = 'первый номер аналитики базового плана'");
			КонецЕсли;
		ИначеЕсли ТекСтрокаБазовыеПланы.ОбъектПланированияПоАналитике=3 Тогда
			Если ТекСтрокаБазовыеПланы.ВыборОбъектаПланированияПоАналитике<> НСтр("ru = 'второй номер аналитики базового плана'") Тогда
				ТекСтрокаБазовыеПланы.ВыборОбъектаПланированияПоАналитике= НСтр("ru = 'второй номер аналитики базового плана'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПересчетаТабличнойЧастиБазовыеПланы()

#Область ОбработчикиСобытийЭлементовТаблицыФормыБазовыеПланы

// Обработчик события возникающего при изменении данных реквизита "Выбор объекта планирования по аналитике" 
// в таблице "Базовые планы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура БазовыеПланыВыборОбъектаПланированияПоАналитикеПриИзменении(Объект, Строка) Экспорт
	
	Если Строка.ВыборОбъектаПланированияПоАналитике= НСтр("ru = 'объект планирования не связан с базовым по объекту планирования'") Тогда
		Строка.ОбъектПланированияПоАналитике=1;
	ИначеЕсли Строка.ВыборОбъектаПланированияПоАналитике= НСтр("ru = 'первый номер аналитики базового плана'") Тогда
		Строка.ОбъектПланированияПоАналитике=2;
	ИначеЕсли Строка.ВыборОбъектаПланированияПоАналитике= НСтр("ru = 'второй номер аналитики базового плана'") Тогда
		Строка.ОбъектПланированияПоАналитике=3;
	КонецЕсли;
	
КонецПроцедуры // БазовыеПланыВыборОбъектаПланированияПоАналитикеПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтчетыИОбработки

// Обработчик события возникающего при изменении данных реквизита "Выбор вида объекта" в таблице "Отчеты и обработки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ОтчетыИОбработкиВыборВидаОбъектаПриИзменении(Объект, Строка) Экспорт
	
	Если Строка.ВыборВидаОбъекта= НСтр("ru = 'встроенный запрос из текстового макета'") Тогда
		Строка.ВидОбъекта=1;
	ИначеЕсли Строка.ВыборВидаОбъекта= НСтр("ru = 'внешний запрос из текстового файла'") Тогда
		Строка.ВидОбъекта=2;
	ИначеЕсли Строка.ВыборВидаОбъекта= НСтр("ru = 'встроенная обработка'") Тогда
		Строка.ВидОбъекта=3;
	Иначе
		Строка.ВидОбъекта=4;
	КонецЕсли;
	Строка.ФлагЗаполненияПлана = Ложь;
	Строка.ФлагПроверкиПлана = Ложь;
	Строка.ФлагЗаполненияФакта = Ложь;
	
КонецПроцедуры // ОтчетыИОбработкиВыборВидаОбъектаПриИзменении()

// Обработчик события возникающего при изменении данных реквизитов "Флаг заполнения факта",
// "Флаг проверки плана", "Флаг заполнения плана" в таблице "Отчеты и обработки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Функция ОтчетыИОбработкиФлагПриИзменении(Объект, Строка) Экспорт
	
	Если Строка.ВидОбъекта=1 ИЛИ Строка.ВидОбъекта=2 Тогда
		КоличествоОтмеченныхФлажков=0;
		Если Строка.ФлагЗаполненияПлана=Истина Тогда
			КоличествоОтмеченныхФлажков=КоличествоОтмеченныхФлажков+1;
		КонецЕсли;
		Если Строка.ФлагПроверкиПлана=Истина Тогда
			КоличествоОтмеченныхФлажков=КоличествоОтмеченныхФлажков+1;
		КонецЕсли;
		Если Строка.ФлагЗаполненияФакта=Истина Тогда
			КоличествоОтмеченныхФлажков=КоличествоОтмеченныхФлажков+1;
		КонецЕсли;
		Если КоличествоОтмеченныхФлажков>=2 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции // ОтчетыИОбработкиФлагПриИзменении()

#КонецОбласти

#КонецОбласти

#КонецЕсли