#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ИдентификаторАТС) Тогда
		Отказ = Истина;
		сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю("Общая книга АТС не редактируется в 1С!");
		
		Возврат;
	КонецЕсли;
	
	Если НЕ сфпСофтФонПроСервер.сфпИспользоватьПодразделенияПользователей() Тогда
		ЭтаФорма.Элементы.ВариантОтображенияПользователей.СписокВыбора.Удалить(2);
	КонецЕсли;
	Если НЕ сфпСофтФонПроСервер.сфпИспользоватьГруппыПользователей() Тогда
		ЭтаФорма.Элементы.ВариантОтображенияПользователей.СписокВыбора.Удалить(1);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		НоваяСсылка = Справочники.сфпТелефонныеКниги.ПолучитьСсылку(Новый УникальныйИдентификатор()); 
		ЗначениеОбъекта	= РеквизитФормыВЗначение("Объект");
		ЗначениеОбъекта.УстановитьСсылкуНового(НоваяСсылка);
		ЗначениеОбъекта.Идентификатор = НоваяСсылка.УникальныйИдентификатор();
		ЗначениеОбъекта.УчаствуетВРегламентномЗадании = Константы.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг.Получить();
		ЗначениеВРеквизитФормы(ЗначениеОбъекта, "Объект");

	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Идентификатор) Тогда
		ЗначениеОбъекта	= РеквизитФормыВЗначение("Объект");
		ЗначениеОбъекта.Идентификатор = ЗначениеОбъекта.Ссылка.УникальныйИдентификатор();
		ЗначениеВРеквизитФормы(ЗначениеОбъекта, "Объект");
	КонецЕсли;

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии"
//
Процедура ПриОткрытии(Отказ)
	АдресКнигиВоВременномХранилище	= "";
	ВариантОтображенияПользователей = 0;
	ЗаполнитьСписокВидовКонтактнойИнформации();	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьТаблицуВидовТелефонов();
	КонецЕсли;	
	ПроверитьЗаполнениеТаблицыВидовТелефонов();
	ЗаполнитьДеревоПользователей();
	ЗаполнитьДеревоТелефоннойКниги();
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ ПроверитьЗаполнениеТелефоннойКниги() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	МассивТелефоннойКниги			= ПолучитьМассивСтруктурТелефоннойКниги();
	АдресКнигиВоВременномХранилище	= ПоместитьВоВременноеХранилище(МассивТелефоннойКниги, УникальныйИдентификатор);
	Если НЕ Объект.ПометкаУдаления Тогда	
		МассивВидовТелефонов			= Новый Массив;
		Для Каждого СтрокаВида Из Объект.ВидыТелефонов Цикл
			Если СтрокаВида.Пометка Тогда 
				СтруктураВида = Новый Структура;
				СтруктураВида.Вставить("Идентификатор",	СтрокаВида.Идентификатор);
				СтруктураВида.Вставить("Наименование",	СтрокаВида.Наименование);
				СтруктураВида.Вставить("Псевдоним",		СтрокаВида.Псевдоним);
				МассивВидовТелефонов.Добавить(СтруктураВида);
			КонецЕсли;	
		КонецЦикла;	
		СтруктураКниги = Новый Структура;
		СтруктураКниги.Вставить("Идентификатор",	Объект.Идентификатор);
		СтруктураКниги.Вставить("ИмяКниги",			Объект.Наименование);
		СтруктураКниги.Вставить("ВидыТелефонов",	МассивВидовТелефонов);
		СтруктураКниги.Вставить("МассивКниги",		МассивТелефоннойКниги);
		сфпСофтФонПроКлиент.сфпЗаписатьТелефоннуюКнигу(СтруктураКниги);
	КонецЕсли;	
КонецПроцедуры // ПередЗаписью()

&НаСервере
// Процедура - обработчик события формы "ПередЗаписьюНаСервере"
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ПустаяСтрока(ЭтаФорма.АдресКнигиВоВременномХранилище) Тогда
		МассивТелефоннойКниги = ПолучитьИзВременногоХранилища(ЭтаФорма.АдресКнигиВоВременномХранилище); 
		ТекущийОбъект.МассивКниги = Новый ХранилищеЗначения(МассивТелефоннойКниги, Новый СжатиеДанных(9));
	КонецЕсли;	
КонецПроцедуры // ПередЗаписьюНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "ВидыТелефонов"
//
Процедура ВидыТелефоновПриАктивизацииСтроки(Элемент)
	ТД = Элементы.ВидыТелефонов.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли ТД.Наименование = "Внутренний номер" Тогда
		ТД.Вид												= НСтр("ru='Внутренний номер'");
		Элементы.ВидыТелефоновВид.ТолькоПросмотр			= Истина;
		Элементы.ВидыТелефоновНаименование.ТолькоПросмотр	= Истина;
		Элементы.ВидыТелефоновПсевдоним.ТолькоПросмотр		= Истина;
	Иначе
		Элементы.ВидыТелефоновВид.ТолькоПросмотр			= Ложь;
		Элементы.ВидыТелефоновНаименование.ТолькоПросмотр	= Ложь;
		Элементы.ВидыТелефоновПсевдоним.ТолькоПросмотр		= Ложь;
	КонецЕсли;	
КонецПроцедуры // ВидыТелефоновПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "ВидыТелефонов"
//
Процедура ВидыТелефоновПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ВидыТелефоновПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "ВидыТелефонов"
//
Процедура ВидыТелефоновПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ВидыТелефоновПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Пометка" таблицы формы "ВидыТелефонов"
//
Процедура ВидыТелефоновПометкаПриИзменении(Элемент)
	ТД = Элементы.ВидыТелефонов.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если ТД.Наименование = "Внутренний номер" Тогда
		ЗаполнитьДеревоПользователей();
	ИначеЕсли ЗначениеЗаполнено(ТД.Вид) Тогда
		ЗаполнитьДеревоПользователей();
	Иначе
		ТД.Пометка = Ложь;	
	КонецЕсли;	
КонецПроцедуры // ВидыТелефоновПометкаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "Вид" таблицы формы "ВидыТелефонов"
//
Процедура ВидыТелефоновВидНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из СписокВидовКонтактнойИнформации Цикл
		Если Объект.ВидыТелефонов.НайтиСтроки(Новый Структура("Вид", ЭлементСписка.Значение)).Количество() = 0 Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры // ВидыТелефоновВидНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "Вид" таблицы формы "ВидыТелефонов"
//
Процедура ВидыТелефоновВидОчистка(Элемент, СтандартнаяОбработка)
	ТД = Элементы.ВидыТелефонов.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли ТД.Пометка Тогда	
		ТД.Пометка = Ложь;
		ЗаполнитьДеревоПользователей();
	КонецЕсли;	
КонецПроцедуры // ВидыТелефоновВидОчистка()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "Вид" таблицы формы "ВидыТелефонов"
//
Процедура ВидыТелефоновВидОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТД = Элементы.ВидыТелефонов.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли ТД.Вид = ВыбранноеЗначение Тогда
		Возврат;
	ИначеЕсли ТД.Пометка Тогда	
		ЗаполнитьДеревоПользователей();
	КонецЕсли;	
КонецПроцедуры // ВидыТелефоновВидОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Наименование" таблицы формы "ВидыТелефонов"
//
Процедура ВидыТелефоновНаименованиеПриИзменении(Элемент)
	ТД = Элементы.ВидыТелефонов.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ОбновитьВидТелефонаВДереве(ТД.Идентификатор, ТД.Наименование);
КонецПроцедуры // ВидыТелефоновНаименованиеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ВариантОтображенияПользователей"
//
Процедура ВариантОтображенияПользователейПриИзменении(Элемент)
	ЗаполнитьДеревоПользователей();
КонецПроцедуры // ВариантОтображенияПользователейПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "Пользователи"
//
Процедура ПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь; 
	// Определяем отправителя
	СтрокаКонтакта = ДеревоПользователей.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаКонтакта = Неопределено Тогда Возврат; КонецЕсли;
	Если СтрокаКонтакта.ЭтоГруппа Тогда
		Если Элементы.Пользователи.Развернут(ВыбраннаяСтрока) Тогда
			Элементы.Пользователи.Свернуть(ВыбраннаяСтрока);
		Иначе
			Элементы.Пользователи.Развернуть(ВыбраннаяСтрока, Ложь);
		КонецЕсли;	
	Иначе
		Если СтрокаКонтакта.Картинка = 2 Тогда
			РодительСтрокиКонтакта = СтрокаКонтакта.ПолучитьРодителя();
			Если РодительСтрокиКонтакта = Неопределено Тогда Возврат; КонецЕсли;
			СтрокаКонтакта = РодительСтрокиКонтакта;
		КонецЕсли;
		// Определяем группу верхнего уровня, в которую входит данный пользователь
		СтрокаГруппы			= Неопределено;
		СтрокаРодителяГруппы	= СтрокаКонтакта.ПолучитьРодителя();
		Пока Истина Цикл
			Если СтрокаРодителяГруппы = Неопределено Тогда Прервать; КонецЕсли;
			СтрокаГруппы			= СтрокаРодителяГруппы;
			СтрокаРодителяГруппы	= СтрокаГруппы.ПолучитьРодителя();
		КонецЦикла;
		ДополнительныеПараметры	= Новый Структура;
		ДополнительныеПараметры.Вставить("Пользователь",	СтрокаКонтакта.Объект);
		Если СтрокаГруппы = Неопределено Тогда
			ДополнительныеПараметры.Вставить("Группа",		Неопределено);
		Иначе	
			ДополнительныеПараметры.Вставить("Группа",		СтрокаГруппы.Объект);
		КонецЕсли;	
		ОписаниеПользователя	= Новый ОписаниеОповещения("ОбновитьОписаниеПользователя", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы			= Новый Структура;
		ПараметрыФормы.Вставить("Ключ", СтрокаКонтакта.Объект);
		ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, , , , ОписаниеПользователя);
	КонецЕсли;	
КонецПроцедуры // ПользователиВыбор()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "Пользователи"
//
Процедура ПользователиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ПользователиПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" таблицы формы "Пользователи"
//
Процедура ПользователиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ИзменитьПользователя(Неопределено);
КонецПроцедуры // ПользователиПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "Пользователи"
//
Процедура ПользователиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ПользователиПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПроверкаПеретаскивания" таблицы формы "Пользователи"
//
Процедура ПользователиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь; 
КонецПроцедуры // ПользователиПроверкаПеретаскивания()

&НаКлиенте
// Процедура - обработчик события "Перетаскивание" таблицы формы "Пользователи"
//
Процедура ПользователиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		// Удаляем строку контакта из телефонной книги
		СтрокаКонтакта = ПараметрыПеретаскивания.Значение;
		УдалитьСтрокуВТелефоннойКниге(СтрокаКонтакта);
	КонецЕсли;	
КонецПроцедуры // ПользователиПеретаскивание()

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаКонтакта = ДеревоТелефоннойКниги.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаКонтакта = Неопределено Тогда  Возврат; КонецЕсли;
	Если Элементы.ТелефоннаяКнига.Развернут(ВыбраннаяСтрока) Тогда
		Элементы.ТелефоннаяКнига.Свернуть(ВыбраннаяСтрока);
	Иначе
		Элементы.ТелефоннаяКнига.Развернуть(ВыбраннаяСтрока, Ложь);
	КонецЕсли;	
КонецПроцедуры // ТелефоннаяКнигаВыбор()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ДобавитьГруппуВТелефоннуюКнигу(Неопределено);
КонецПроцедуры // ТелефоннаяКнигаПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ИзменитьИмяГруппыТелефоннойКниги(Неопределено);	
КонецПроцедуры // ТелефоннаяКнигаПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьИзТелефоннойКниги(Неопределено);	
КонецПроцедуры // ТелефоннаяКнигаПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПроверкаПеретаскивания" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь; 
КонецПроцедуры // ТелефоннаяКнигаПроверкаПеретаскивания()

&НаКлиенте
// Процедура - обработчик события "Перетаскивание" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка	= Ложь;
	// Определяем группу-получатель
	Если Строка = Неопределено Тогда
		СтрокаКниги = ДеревоТелефоннойКниги;
	Иначе
		СтрокаКниги = ДеревоТелефоннойКниги.НайтиПоИдентификатору(Строка);
		Если СтрокаКниги = Неопределено Тогда
			СтрокаКниги = ДеревоТелефоннойКниги;
		КонецЕсли;	
	КонецЕсли;	
	Если НЕ (СтрокаКниги = ДеревоТелефоннойКниги) И НЕ СтрокаКниги.ЭтоГруппа Тогда
		// Ищем первую группу снизу вверх
		РодительСтрокиКниги = СтрокаКниги.ПолучитьРодителя();
		Если РодительСтрокиКниги = Неопределено Тогда
			СтрокаКниги = ДеревоТелефоннойКниги;
		ИначеЕсли РодительСтрокиКниги.ЭтоГруппа Тогда
			СтрокаКниги = РодительСтрокиКниги;
		Иначе	
			ГруппаРодителяСтрокиКниги = РодительСтрокиКниги.ПолучитьРодителя();
			Если ГруппаРодителяСтрокиКниги = Неопределено Тогда
				СтрокаКниги = ДеревоТелефоннойКниги;
			Иначе	
				СтрокаКниги = ГруппаРодителяСтрокиКниги;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	// Определяем отправителя
	СтрокаКонтакта			= Неопределено;
	ПеремещениеВнутриДерева	= Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		// Перемещение из дерева пользователей в дерево телефонной книги
		СтрокаКонтакта			= ПараметрыПеретаскивания.Значение;
		ПеремещениеВнутриДерева	= Ложь;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		// Перемещение внутри дерева телефонной книги
		СтрокаКонтакта			= ДеревоТелефоннойКниги.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
		ПеремещениеВнутриДерева	= Истина;
	КонецЕсли;	
	Если СтрокаКонтакта = Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ СтрокаКонтакта.ЭтоГруппа И (СтрокаКонтакта.Картинка = 2) Тогда
		// Если добавляем телефонный номер, то, возможно, пользователь уже есть в выбранной группе
		РодительСтрокиКонтакта = СтрокаКонтакта.ПолучитьРодителя();
		Если НЕ (РодительСтрокиКонтакта = Неопределено) Тогда
			РодительНайден = Ложь;
			СтрокиВыбраннойГруппы = СтрокаКниги.ПолучитьЭлементы();
			Для Каждого СтрокаВыбраннойГруппы Из СтрокиВыбраннойГруппы Цикл
				Если СтрокаВыбраннойГруппы.Объект = РодительСтрокиКонтакта.Объект Тогда
					СтрокаКниги		= СтрокаВыбраннойГруппы;
					РодительНайден	= Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если НЕ РодительНайден Тогда
				// Добавляем родителя
				НоваяСтрокаКниги = СтрокаКниги.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКниги, РодительСтрокиКонтакта);
				НоваяСтрокаКниги.Идентификатор	= Новый УникальныйИдентификатор;
				СтрокаКниги						= НоваяСтрокаКниги;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	Если ПеремещениеВнутриДерева И (ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение) Тогда
		// Проверяем на перемещение внутри одной группы
		РодительКонтакта = СтрокаКонтакта.ПолучитьРодителя();
		Если РодительКонтакта = Неопределено Тогда
			РодительКонтакта = ДеревоТелефоннойКниги;
		КонецЕсли;	
		Если СтрокаКниги = РодительКонтакта  Тогда Возврат; КонецЕсли;
		// Добавляем строку
		ДобавитьСтрокуВТелефоннуюКнигу(СтрокаКонтакта, СтрокаКниги);		
		// Удаляем скопированную строку
		УдалитьСтрокуВТелефоннойКниге(СтрокаКонтакта);
	Иначе
		// Добавляем строку
		ДобавитьСтрокуВТелефоннуюКнигу(СтрокаКонтакта, СтрокаКниги);		
	КонецЕсли;	
КонецПроцедуры // ТелефоннаяКнигаПеретаскивание()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьВсеКонтактыВТелефоннуюКнигу"
//
Процедура ДобавитьВсеКонтактыВТелефоннуюКнигу(Команда)
	СтрокиКонтакта	= ДеревоПользователей.ПолучитьЭлементы();
	СтрокаКниги		= ДеревоТелефоннойКниги;
	Для Каждого СтрокаКонтакта Из СтрокиКонтакта Цикл
		ДобавитьСтрокуВТелефоннуюКнигу(СтрокаКонтакта, СтрокаКниги);		
	КонецЦикла;	
КонецПроцедуры // ДобавитьВсеКонтактыВТелефоннуюКнигу()

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьГруппуВТелефоннуюКнигу"
//
Процедура ДобавитьГруппуВТелефоннуюКнигу(Команда)
	// Определяем группу-получатель
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		СтрокаКниги = ДеревоТелефоннойКниги;
	Иначе
		СтрокаКниги = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаКниги = Неопределено Тогда
			СтрокаКниги = ДеревоТелефоннойКниги;
		ИначеЕсли НЕ СтрокаКниги.ЭтоГруппа Тогда
			// Ищем первую группу снизу вверх
			РодительСтрокиКниги = СтрокаКниги.ПолучитьРодителя();
			Если РодительСтрокиКниги = Неопределено Тогда
				СтрокаКниги = ДеревоТелефоннойКниги;
			ИначеЕсли РодительСтрокиКниги.ЭтоГруппа Тогда
				СтрокаКниги = РодительСтрокиКниги;
			Иначе	
				ГруппаРодителяСтрокиКниги = РодительСтрокиКниги.ПолучитьРодителя();
				Если ГруппаРодителяСтрокиКниги = Неопределено Тогда
					СтрокаКниги = ДеревоТелефоннойКниги;
				Иначе	
					СтрокаКниги = ГруппаРодителяСтрокиКниги;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаКниги", СтрокаКниги);
	ОписаниеВвода = Новый ОписаниеОповещения("ДобавитьНовуюГруппуВТелефоннуюКнигу", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВводСтроки(ОписаниеВвода, "", НСтр("ru='Введите наименование новой группы'"), , Ложь); 	
КонецПроцедуры // ДобавитьГруппуВТелефоннуюКнигу()

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьКонтактВТелефоннуюКнигу"
//
Процедура ДобавитьКонтактВТелефоннуюКнигу(Команда)
	// Определяем группу-получатель
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		СтрокаКниги = ДеревоТелефоннойКниги;
	Иначе
		СтрокаКниги = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаКниги = Неопределено Тогда
			СтрокаКниги = ДеревоТелефоннойКниги;
		ИначеЕсли НЕ СтрокаКниги.ЭтоГруппа Тогда
			// Ищем первую группу снизу вверх
			РодительСтрокиКниги = СтрокаКниги.ПолучитьРодителя();
			Если РодительСтрокиКниги = Неопределено Тогда
				СтрокаКниги = ДеревоТелефоннойКниги;
			ИначеЕсли РодительСтрокиКниги.ЭтоГруппа Тогда
				СтрокаКниги = РодительСтрокиКниги;
			Иначе	
				ГруппаРодителяСтрокиКниги = РодительСтрокиКниги.ПолучитьРодителя();
				Если ГруппаРодителяСтрокиКниги = Неопределено Тогда
					СтрокаКниги = ДеревоТелефоннойКниги;
				Иначе	
					СтрокаКниги = ГруппаРодителяСтрокиКниги;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	// Определяем отправителя
	НомерСтроки = Элементы.Пользователи.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда Возврат; КонецЕсли;
	СтрокаКонтакта = ДеревоПользователей.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда Возврат; КонецЕсли;	
	Если НЕ СтрокаКонтакта.ЭтоГруппа И (СтрокаКонтакта.Картинка = 2) Тогда
		// Если добавляем телефонный номер, то, возможно, пользователь уже есть в выбранной группе
		РодительСтрокиКонтакта = СтрокаКонтакта.ПолучитьРодителя();
		Если НЕ (РодительСтрокиКонтакта = Неопределено) Тогда
			РодительНайден = Ложь;
			СтрокиВыбраннойГруппы = СтрокаКниги.ПолучитьЭлементы();
			Для Каждого СтрокаВыбраннойГруппы Из СтрокиВыбраннойГруппы Цикл
				Если СтрокаВыбраннойГруппы.Объект = РодительСтрокиКонтакта.Объект Тогда
					СтрокаКниги		= СтрокаВыбраннойГруппы;
					РодительНайден	= Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если НЕ РодительНайден Тогда
				// Добавляем родителя
				НоваяСтрокаКниги = СтрокаКниги.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКниги, РодительСтрокиКонтакта);
				НоваяСтрокаКниги.Идентификатор	= Новый УникальныйИдентификатор;
				СтрокаКниги						= НоваяСтрокаКниги;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	ДобавитьСтрокуВТелефоннуюКнигу(СтрокаКонтакта, СтрокаКниги);
КонецПроцедуры // ДобавитьКонтактВТелефоннуюКнигу()

&НаКлиенте
// Процедура - обработчик команды формы "ИзменитьИмяГруппыТелефоннойКниги"
//
Процедура ИзменитьИмяГруппыТелефоннойКниги(Команда)
	ТД = Элементы.ТелефоннаяКнига.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ТД.ЭтоГруппа Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ТД.Объект) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТД", Элементы.ТелефоннаяКнига.ТекущиеДанные);
	ОписаниеВвода = Новый ОписаниеОповещения("ОбновитьИмяГруппы", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВводСтроки(ОписаниеВвода, ТД.Наименование, НСтр("ru='Наименование группы'"), , Ложь); 	
КонецПроцедуры // ИзменитьИмяГруппыТелефоннойКниги()

&НаКлиенте
// Процедура - обработчик команды формы "ИзменитьПользователя"
//
Процедура ИзменитьПользователя(Команда)
	// Определяем строку пользователя
	НомерСтроки = Элементы.Пользователи.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда Возврат; КонецЕсли;
	СтрокаКонтакта = ДеревоПользователей.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.ЭтоГруппа Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.Картинка = 2 Тогда
		РодительСтрокиКонтакта = СтрокаКонтакта.ПолучитьРодителя();
		Если РодительСтрокиКонтакта = Неопределено Тогда Возврат; КонецЕсли;
		СтрокаКонтакта = РодительСтрокиКонтакта;
	КонецЕсли;	
	// Определяем группу верхнего уровня, в которую входит данный пользователь
	СтрокаГруппы			= Неопределено;
	СтрокаРодителяГруппы	= СтрокаКонтакта.ПолучитьРодителя();
	Пока Истина Цикл
		Если СтрокаРодителяГруппы = Неопределено Тогда Прервать; КонецЕсли;
		СтрокаГруппы			= СтрокаРодителяГруппы;
		СтрокаРодителяГруппы	= СтрокаГруппы.ПолучитьРодителя();
	КонецЦикла;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("Пользователь",	СтрокаКонтакта.Объект);
	Если СтрокаГруппы = Неопределено Тогда
		ДополнительныеПараметры.Вставить("Группа",		Неопределено);
	Иначе	
		ДополнительныеПараметры.Вставить("Группа",		СтрокаГруппы.Объект);
	КонецЕсли;	
	ОписаниеПользователя	= Новый ОписаниеОповещения("ОбновитьОписаниеПользователя", ЭтаФорма, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СтрокаКонтакта.Объект);
	ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, , , , ОписаниеПользователя);
КонецПроцедуры // ИзменитьПользователя()

&НаКлиенте
// Процедура - обработчик команды формы "НайтиВДеревеПользователей"
//
Процедура НайтиВДеревеПользователей(Команда)
	НомерСтроки	= Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда Возврат; КонецЕсли;
	СтрокаКонтакта	= ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.ЭтоГруппа Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.Картинка = 2 Тогда
		РодительСтрокиКонтакта	= СтрокаКонтакта.ПолучитьРодителя();
		Если РодительСтрокиКонтакта = Неопределено Тогда Возврат; КонецЕсли;
		СтрокаКонтакта = РодительСтрокиКонтакта;
	КонецЕсли;	
	НайтиПользователяВДеревеПользователей(СтрокаКонтакта.Объект);
КонецПроцедуры // НайтиВДеревеПользователей()

&НаКлиенте
Процедура НайтиВТелефоннойКниге(Команда)
	НомерСтроки = Элементы.Пользователи.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда Возврат; КонецЕсли;
	СтрокаКонтакта	= ДеревоПользователей.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.ЭтоГруппа Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.Картинка = 2 Тогда
		РодительСтрокиКонтакта	= СтрокаКонтакта.ПолучитьРодителя();
		Если РодительСтрокиКонтакта = Неопределено Тогда Возврат; КонецЕсли;
		СтрокаКонтакта = РодительСтрокиКонтакта;
	КонецЕсли;	
	НайтиПользователяВТелефоннойКниге(СтрокаКонтакта.Объект);
КонецПроцедуры // НайтиВТелефоннойКниге()

&НаКлиенте
// Процедура - обработчик команды формы "ОбновитьДеревоПользователей"
//
Процедура ОбновитьДеревоПользователей(Команда)
	// Определяем строку пользователя
	НомерСтроки = Элементы.Пользователи.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда Возврат; КонецЕсли;
	СтрокаКонтакта = ДеревоПользователей.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.ЭтоГруппа Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.Картинка = 2 Тогда
		РодительСтрокиКонтакта = СтрокаКонтакта.ПолучитьРодителя();
		Если РодительСтрокиКонтакта = Неопределено Тогда Возврат; КонецЕсли;
		СтрокаКонтакта = РодительСтрокиКонтакта;
	КонецЕсли;	
	// Определяем группу верхнего уровня, в которую входит данный пользователь
	СтрокаГруппы			= Неопределено;
	СтрокаРодителяГруппы	= СтрокаКонтакта.ПолучитьРодителя();
	Пока Истина Цикл
		Если СтрокаРодителяГруппы = Неопределено Тогда Прервать; КонецЕсли;
		СтрокаГруппы			= СтрокаРодителяГруппы;
		СтрокаРодителяГруппы	= СтрокаГруппы.ПолучитьРодителя();
	КонецЦикла;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("Пользователь",	СтрокаКонтакта.Объект);
	Если СтрокаГруппы = Неопределено Тогда
		ДополнительныеПараметры.Вставить("Группа",		Неопределено);
	Иначе	
		ДополнительныеПараметры.Вставить("Группа",		СтрокаГруппы.Объект);
	КонецЕсли;	
	ОбновитьОписаниеПользователя(Неопределено, ДополнительныеПараметры);
КонецПроцедуры // ОбновитьДеревоПользователей()

&НаКлиенте
// Процедура - обработчик команды формы "ПереместитьВверх"
//
Процедура ПереместитьВверх(Команда)
	ПереместитьТекущуюСтрокуТелефоннойКниги(-1);
КонецПроцедуры // ПереместитьВверх()

&НаКлиенте
// Процедура - обработчик команды формы "ПереместитьВниз"
//
Процедура ПереместитьВниз(Команда)
	ПереместитьТекущуюСтрокуТелефоннойКниги(1);
КонецПроцедуры // ПереместитьВниз()

&НаКлиенте
// Процедура - обработчик команды формы "УдалитьВсеКонтактыИзТелефоннойКниги"
//
Процедура УдалитьВсеКонтактыИзТелефоннойКниги(Команда)
	ДеревоТелефоннойКниги.ПолучитьЭлементы().Очистить();
КонецПроцедуры // УдалитьВсеКонтактыИзТелефоннойКниги()

&НаКлиенте
// Процедура - обработчик команды формы "УдалитьИзТелефоннойКниги"
//
Процедура УдалитьИзТелефоннойКниги(Команда)
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда Возврат; КонецЕсли;
	СтрокаКонтакта = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда Возврат; КонецЕсли;	
	УдалитьСтрокуВТелефоннойКниге(СтрокаКонтакта);
КонецПроцедуры // УдалитьИзТелефоннойКниги()

&НаКлиенте
// Процедура - обработчик команды формы "УдалитьКонтактИзТелефоннойКниги"
//
Процедура УдалитьКонтактИзТелефоннойКниги(Команда)
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда Возврат; КонецЕсли;
	СтрокаКонтакта = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда Возврат; КонецЕсли;	
	УдалитьСтрокуВТелефоннойКниге(СтрокаКонтакта);
КонецПроцедуры // УдалитьКонтактИзТелефоннойКниги()

&НаКлиенте
Процедура УдалитьКонтактыБезНомеров(Команда)
	УдалитьКонтактыБезНомеровНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьКонтактыБезНомеровНаСервере()
	
	ДеревоКонтактов = РеквизитФормыВЗначение("ДеревоТелефоннойКниги");
	ОбходОчисткаКонтактов(ДеревоКонтактов);
	ЗначениеВРеквизитФормы(ДеревоКонтактов, "ДеревоТелефоннойКниги");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходОчисткаКонтактов(Дерево)
	
	тСтроки = Дерево.Строки;
	Сч = Дерево.Строки.Количество() - 1;
	Пока Сч >= 0 Цикл
		Строка = тСтроки[Сч];
		Если НЕ ТипЗнч(Строка.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
			Если Строка.Строки.Количество() > 0 Тогда
				ОбходОчисткаКонтактов(Строка);
			КонецЕсли;
		КонецЕсли;
		Если Строка.Строки.Количество() = 0 Тогда
			тСтроки.Удалить(Строка);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура заполняет список видов контактной информации
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСписокВидовКонтактнойИнформации()
	СписокВидовКонтактнойИнформации.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Ссылка,
	               |	ВидыКонтактнойИнформации.Наименование
	               |ИЗ
	               |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |ГДЕ
	               |	НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	               |	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	               |	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПользователи)
	               |	И ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВидовКонтактнойИнформации.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьСписокВидовКонтактнойИнформации()

&НаСервере
// Процедура заполняет таблицу видов телефонов
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьТаблицуВидовТелефонов()
	// сфпТекущийВнутреннийНомер
	НоваяСтрока = Объект.ВидыТелефонов.Добавить();
	НоваяСтрока.Пометка			= Истина;
	НоваяСтрока.Идентификатор	= Новый УникальныйИдентификатор("52659470-F021-4452-A312-82EFF6B722F9");
	НоваяСтрока.Наименование	= "Внутренний номер";
	НоваяСтрока.Псевдоним		= "Внутренний";
	НоваяСтрока.Вид				= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
	НоваяСтрока.Тип				= 0;
	// CRM_ТелефонПользователяРабочий
	НоваяСтрока = Объект.ВидыТелефонов.Добавить();
	НоваяСтрока.Пометка			= Истина;
	НоваяСтрока.Идентификатор	= Новый УникальныйИдентификатор("CB883071-6DEC-4FB6-BACC-203B001EB3DA");
	НоваяСтрока.Наименование	= "Рабочий номер";
	НоваяСтрока.Псевдоним		= "Рабочий";
	НоваяСтрока.Вид				= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПользователя");
	НоваяСтрока.Тип				= 0;
	// CRM_МобильныйТелефонПользователя
	НоваяСтрока = Объект.ВидыТелефонов.Добавить();
	НоваяСтрока.Идентификатор	= Новый УникальныйИдентификатор("8C0F3CC4-86B2-4654-B889-79675ECBC00F");
	НоваяСтрока.Пометка			= Ложь;
	НоваяСтрока.Наименование	= "Дополнительный номер";
	НоваяСтрока.Псевдоним		= "Дополнительный";
	НоваяСтрока.Вид				= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
	НоваяСтрока.Тип				= 0;
	// ТелефонПользователя
	НоваяСтрока = Объект.ВидыТелефонов.Добавить();
	НоваяСтрока.Пометка			= Ложь;
	НоваяСтрока.Идентификатор	= Новый УникальныйИдентификатор("462C021E-3F32-4401-A696-47C956FC9132");
	НоваяСтрока.Наименование	= "Дополнительный номер";
	НоваяСтрока.Псевдоним		= "Дополнительный";
	НоваяСтрока.Вид				= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
	НоваяСтрока.Тип				= 0;
	// Не определен
	НоваяСтрока = Объект.ВидыТелефонов.Добавить();
	НоваяСтрока.Пометка			= Ложь;
	НоваяСтрока.Идентификатор	= Новый УникальныйИдентификатор("636170CC-487B-46A7-A2B2-0A4465DC37E7");
	НоваяСтрока.Наименование	= "Дополнительный номер";
	НоваяСтрока.Псевдоним		= "Дополнительный";
	НоваяСтрока.Вид				= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
	НоваяСтрока.Тип				= 0;
	// Не определен
	НоваяСтрока = Объект.ВидыТелефонов.Добавить();
	НоваяСтрока.Пометка			= Ложь;
	НоваяСтрока.Идентификатор	= Новый УникальныйИдентификатор("9B76E9D1-AC18-466E-A6C6-B77A7411B95F");
	НоваяСтрока.Наименование	= "Дополнительный номер";
	НоваяСтрока.Псевдоним		= "Дополнительный";
	НоваяСтрока.Вид				= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
	НоваяСтрока.Тип				= 0;
КонецПроцедуры // ЗаполнитьТаблицуВидовТелефонов()	

&НаКлиенте
// Процедура проверяет заполнение таблицы видов телефонов
//
// Параметры:
//	Нет.
Процедура ПроверитьЗаполнениеТаблицыВидовТелефонов()
	Для Каждого СтрокаВида Из Объект.ВидыТелефонов Цикл
		Если НЕ СтрокаВида.Пометка Тогда
			Продолжить;
		ИначеЕсли СтрокаВида.Наименование = НСтр("ru='Внутренний номер'") Тогда 	
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаВида.Вид) Тогда
			СтрокаВида.Пометка	= Ложь;
		ИначеЕсли НЕ сфпСофтФонПроСервер.сфпСсылкаСуществует(СтрокаВида.Вид) Тогда
			СтрокаВида.Вид		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
			СтрокаВида.Пометка	= Ложь;
		ИначеЕсли сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(СтрокаВида.Вид, "ПометкаУдаления") Тогда
			СтрокаВида.Вид		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
			СтрокаВида.Пометка	= Ложь;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // ПроверитьЗаполнениеТаблицыВидовТелефонов()

&НаСервереБезКонтекста
// Функция возвращает массив всех подразделений
//
// Параметры:
//	МассивВидов	- Массив	- Массив используемых  видов телефонов
//
// Возвращаемое значение:
//	Массив	- Массив всех пользователей
//
Функция ПолучитьМассивВсехПодразделений()
	МассивВсехПодразделений = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтруктураПредприятия.Ссылка КАК Подразделение,
	               |	СтруктураПредприятия.Родитель КАК Родитель,
	               |	СтруктураПредприятия.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	НЕ СтруктураПредприятия.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Родитель,
	               |	Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПодразделения = Новый Структура;
		СтруктураПодразделения.Вставить("Подразделение",	Выборка.Подразделение);
		СтруктураПодразделения.Вставить("Наименование",		Выборка.Наименование);
		СтруктураПодразделения.Вставить("Родитель",			Выборка.Родитель);
		МассивВсехПодразделений.Добавить(СтруктураПодразделения);
	КонецЦикла;	
	Возврат МассивВсехПодразделений;
КонецФункции // ПолучитьМассивВсехПодразделений()	

&НаСервереБезКонтекста
// Функция возвращает массив всех подразделений
//
// Параметры:
//	МассивВидов	- Массив	- Массив используемых  видов телефонов
//
// Возвращаемое значение:
//	Массив	- Массив всех пользователей
//
Функция ПолучитьМассивВсехГрупп()
	МассивВсехГрупп = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Группы.Группа КАК Группа,
	               |	Группы.Наименование КАК Наименование,
	               |	Группы.Родитель КАК Родитель,
	               |	ЕСТЬNULL(Состав.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Объект
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ГруппыПользователей.Ссылка КАК Группа,
	               |		ГруппыПользователей.Наименование КАК Наименование,
	               |		ГруппыПользователей.Родитель КАК Родитель
	               |	ИЗ
	               |		Справочник.ГруппыПользователей КАК ГруппыПользователей
	               |	ГДЕ
	               |		НЕ ГруппыПользователей.ПометкаУдаления) КАК Группы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ГруппыПользователейСостав.Ссылка КАК Группа,
	               |			ГруппыПользователейСостав.Пользователь КАК Пользователь,
	               |			ГруппыПользователейСостав.Пользователь.Наименование КАК Наименование
	               |		ИЗ
	               |			Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |		ГДЕ
	               |			НЕ ГруппыПользователейСостав.Ссылка.ПометкаУдаления) КАК Состав
	               |		ПО Группы.Группа = Состав.Группа
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Родитель,
	               |	Наименование,
	               |	Состав.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураГруппы = Новый Структура;
		СтруктураГруппы.Вставить("Группа",			Выборка.Группа);
		СтруктураГруппы.Вставить("Наименование",	Выборка.Наименование);
		СтруктураГруппы.Вставить("Родитель",		Выборка.Родитель);
		СтруктураГруппы.Вставить("Объект",			Выборка.Объект);
		МассивВсехГрупп.Добавить(СтруктураГруппы);
	КонецЦикла;	
	Возврат МассивВсехГрупп;
КонецФункции // ПолучитьМассивВсехГрупп()

&НаСервереБезКонтекста
// Функция возвращает значение константы "сфпМаксимальнаяДлинаВнутреннихНомеров"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Число	- Длина внутренних номеров
//
Функция ПолучитьДлинуВнутреннихНомеров()
	Возврат Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
КонецФункции // ПолучитьДлинуВнутреннихНомеров()
	
&НаКлиенте
// Процедура заполняет дерево пользователей 
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДеревоПользователей()
	ВыводитьВнутреннийНомер	= Ложь;
	ДлинаВнутреннихНомеров	= ПолучитьДлинуВнутреннихНомеров();
	МассивВидов = Новый Массив;
	Для Каждого СтрокаВида Из Объект.ВидыТелефонов Цикл
		Если СтрокаВида.Наименование = "Внутренний номер" Тогда
			ВыводитьВнутреннийНомер = СтрокаВида.Пометка;
		ИначеЕсли СтрокаВида.Пометка И ЗначениеЗаполнено(СтрокаВида.Вид) Тогда
			МассивВидов.Добавить(СтрокаВида.Вид);
		КонецЕсли;	
	КонецЦикла;	
	МассивВсехПользователей	= сфпСофтФонПроСервер.сфпПолучитьМассивВсехПользователей(МассивВидов);
	СтрокиДерева = ДеревоПользователей.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	Если ВариантОтображенияПользователей = 0 Тогда
		// Добавляем всех пользователей без групп
		ТекПользователь			= Неопределено;
		СтрокаПользователя		= Неопределено;
		СтрокиНомеров			= Неопределено;
		Для Каждого ЭлементМассиваПользователей Из МассивВсехПользователей Цикл
			Если НЕ (ТекПользователь = ЭлементМассиваПользователей.Объект) Тогда
				ТекПользователь	= ЭлементМассиваПользователей.Объект;
				СтрокиНомеров	= Неопределено;
				// Добавляем пользователя
				СтрокаПользователя = СтрокиДерева.Добавить();
				СтрокаПользователя.Наименование		= ЭлементМассиваПользователей.Наименование;
				СтрокаПользователя.ЭтоГруппа		= Ложь;
				СтрокаПользователя.Картинка			= 0;	
				СтрокаПользователя.ПорядковыйНомер	= 0;
				СтрокаПользователя.Объект			= ЭлементМассиваПользователей.Объект;
				// Добавляем внутренний номер пользователя
				Если ВыводитьВнутреннийНомер И НЕ ПустаяСтрока(ЭлементМассиваПользователей.ВнутреннийНомер) Тогда
					СтрокиНомеров = СтрокаПользователя.ПолучитьЭлементы();
					СтрокаТелефона = СтрокиНомеров.Добавить();
					СтрокаТелефона.Наименование		= НСтр("ru='Внутренний номер: '") + ЭлементМассиваПользователей.ВнутреннийНомер;
					СтрокаТелефона.ЭтоГруппа		= Ложь;
					СтрокаТелефона.Картинка			= 2;	
					СтрокаТелефона.ПорядковыйНомер	= 0;
					СтрокаТелефона.Объект			= ЭлементМассиваПользователей.Объект;
				КонецЕсли;
			КонецЕсли;	
			// Добавляем телефон пользователя
			Если ЗначениеЗаполнено(ЭлементМассиваПользователей.Вид) Тогда
				Если СтрокиНомеров = Неопределено Тогда
					СтрокиНомеров = СтрокаПользователя.ПолучитьЭлементы();
				КонецЕсли;
				СтрокаТелефона = СтрокиНомеров.Добавить();
				СтрокаТелефона.Наименование		= ЭлементМассиваПользователей.НаименованиеВида + ": " + ЭлементМассиваПользователей.Представление;
				СтрокаТелефона.ЭтоГруппа		= Ложь;
				СтрокаТелефона.Картинка			= 2;	
				СтрокаТелефона.ПорядковыйНомер	= ЭлементМассиваПользователей.ПорядковыйНомер;
				СтрокаТелефона.Объект			= ЭлементМассиваПользователей.Вид;
			КонецЕсли;	
		КонецЦикла;
	ИначеЕсли ВариантОтображенияПользователей = 1 Тогда
		// Добавляем все группы пользователей	
		МассивВсехГрупп	= ПолучитьМассивВсехГрупп();
		СписокГрупп		= Новый СписокЗначений;
		ТекГруппа       = Неопределено;
		СтрокиГруппы	= Неопределено;
		Для Каждого ЭлементМассиваГрупп Из МассивВсехГрупп Цикл
			Если НЕ (ТекГруппа = ЭлементМассиваГрупп.Группа) Тогда
				ТекГруппа		= ЭлементМассиваГрупп.Группа;
				СтрокиГруппы	= Неопределено;
				Если ЗначениеЗаполнено(ЭлементМассиваГрупп.Родитель) Тогда
					// Ищем родителя в структуре соответствий
					НайденныйЭлемент = СписокГрупп.НайтиПоЗначению(ЭлементМассиваГрупп.Родитель);
					Если НайденныйЭлемент = Неопределено Тогда
						СтрокаРодитель = СтрокиДерева.Добавить();
						СтрокаРодитель.Наименование		= сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ЭлементМассиваГрупп.Родитель, "Наименование");
						СтрокаРодитель.ЭтоГруппа		= Истина;	
						СтрокаРодитель.Картинка			= 1;
						СтрокаРодитель.ПорядковыйНомер	= 0;
						СтрокаРодитель.Объект			= ЭлементМассиваГрупп.Родитель;
						СписокГрупп.Добавить(ЭлементМассиваГрупп.Родитель, Строка(СтрокаРодитель.ПолучитьИдентификатор()));
					Иначе	
					    СтрокаРодитель = ДеревоПользователей.НайтиПоИдентификатору(Число(НайденныйЭлемент.Представление));
					КонецЕсли;	
					СтрокаГруппы = СтрокаРодитель.ПолучитьЭлементы().Добавить();
				Иначе	
					СтрокаГруппы = СтрокиДерева.Добавить();
				КонецЕсли;
				СтрокаГруппы.Наименование		= ЭлементМассиваГрупп.Наименование;
				СтрокаГруппы.ЭтоГруппа			= Истина;	
				СтрокаГруппы.Картинка			= 1;
				СтрокаГруппы.ПорядковыйНомер	= 0;
				СтрокаГруппы.Объект				= ЭлементМассиваГрупп.Группа;
				СписокГрупп.Добавить(ЭлементМассиваГрупп.Группа, Строка(СтрокаГруппы.ПолучитьИдентификатор()));
			КонецЕсли;	
			ИмяСправочникаГруппыПользователей = "Справочник.ГруппыПользователей.ВсеПользователи";
			Если ЭлементМассиваГрупп.Группа = ПредопределенноеЗначение(ИмяСправочникаГруппыПользователей) Тогда
				// Добавляем всех пользователей
				Если СтрокиГруппы = Неопределено Тогда
					СтрокиГруппы = СтрокаГруппы.ПолучитьЭлементы();	
				КонецЕсли;	
				// Добавляем всех пользователей
				ТекПользователь			= Неопределено;
				СтрокаПользователя		= Неопределено;
				СтрокиНомеров			= Неопределено;
				Для Каждого ЭлементМассиваПользователей Из МассивВсехПользователей Цикл
					Если НЕ (ТекПользователь = ЭлементМассиваПользователей.Объект) Тогда
						ТекПользователь	= ЭлементМассиваПользователей.Объект;
						СтрокиНомеров	= Неопределено;
						// Добавляем пользователя
						СтрокаПользователя = СтрокиГруппы.Добавить();
						СтрокаПользователя.Наименование		= ЭлементМассиваПользователей.Наименование;
						СтрокаПользователя.ЭтоГруппа		= Ложь;
						СтрокаПользователя.Картинка			= 0;	
						СтрокаПользователя.ПорядковыйНомер	= 0;
						СтрокаПользователя.Объект			= ЭлементМассиваПользователей.Объект;
						// Добавляем внутренний номер пользователя
						Если ВыводитьВнутреннийНомер И НЕ ПустаяСтрока(ЭлементМассиваПользователей.ВнутреннийНомер) Тогда
							СтрокиНомеров = СтрокаПользователя.ПолучитьЭлементы();
							СтрокаТелефона = СтрокиНомеров.Добавить();
							СтрокаТелефона.Наименование		= НСтр("ru='Внутренний номер: '") + ЭлементМассиваПользователей.ВнутреннийНомер;
							СтрокаТелефона.ЭтоГруппа		= Ложь;
							СтрокаТелефона.Картинка			= 2;	
							СтрокаТелефона.ПорядковыйНомер	= 0;
							СтрокаТелефона.Объект			= ЭлементМассиваПользователей.Объект;
						КонецЕсли;
					КонецЕсли;	
					// Добавляем телефон пользователя
					Если ЗначениеЗаполнено(ЭлементМассиваПользователей.Вид) Тогда
						Если СтрокиНомеров = Неопределено Тогда
							СтрокиНомеров = СтрокаПользователя.ПолучитьЭлементы();
						КонецЕсли;
						СтрокаТелефона = СтрокиНомеров.Добавить();
						СтрокаТелефона.Наименование		= ЭлементМассиваПользователей.НаименованиеВида + ": " + ЭлементМассиваПользователей.Представление;
						СтрокаТелефона.ЭтоГруппа		= Ложь;
						СтрокаТелефона.Картинка			= 2;	
						СтрокаТелефона.ПорядковыйНомер	= ЭлементМассиваПользователей.ПорядковыйНомер;
						СтрокаТелефона.Объект			= ЭлементМассиваПользователей.Вид;
					КонецЕсли;	
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(ЭлементМассиваГрупп.Объект) Тогда
				// Добавляем пользователя
				Если СтрокиГруппы = Неопределено Тогда
					СтрокиГруппы = СтрокаГруппы.ПолучитьЭлементы();	
				КонецЕсли;	
				// Добавляем текущего пользователя
				ТекПользователь			= Неопределено;
				СтрокаПользователя		= Неопределено;
				СтрокиНомеров			= Неопределено;
				Для Каждого ЭлементМассиваПользователей Из МассивВсехПользователей Цикл
					Если ЭлементМассиваГрупп.Объект = ЭлементМассиваПользователей.Объект Тогда
						Если НЕ (ТекПользователь = ЭлементМассиваПользователей.Объект) Тогда
							ТекПользователь	= ЭлементМассиваПользователей.Объект;
							СтрокиНомеров	= Неопределено;
							// Добавляем пользователя
							СтрокаПользователя = СтрокиГруппы.Добавить();
							СтрокаПользователя.Наименование		= ЭлементМассиваПользователей.Наименование;
							СтрокаПользователя.ЭтоГруппа		= Ложь;
							СтрокаПользователя.Картинка			= 0;	
							СтрокаПользователя.ПорядковыйНомер	= 0;
							СтрокаПользователя.Объект			= ЭлементМассиваПользователей.Объект;
							// Добавляем внутренний номер пользователя
							Если ВыводитьВнутреннийНомер И НЕ ПустаяСтрока(ЭлементМассиваПользователей.ВнутреннийНомер) Тогда
								СтрокиНомеров = СтрокаПользователя.ПолучитьЭлементы();
								СтрокаТелефона = СтрокиНомеров.Добавить();
								СтрокаТелефона.Наименование		= НСтр("ru='Внутренний номер: '") + ЭлементМассиваПользователей.ВнутреннийНомер;
								СтрокаТелефона.ЭтоГруппа		= Ложь;
								СтрокаТелефона.Картинка			= 2;	
								СтрокаТелефона.ПорядковыйНомер	= 0;
								СтрокаТелефона.Объект			= ЭлементМассиваПользователей.Объект;
							КонецЕсли;
						КонецЕсли;	
						// Добавляем телефон пользователя
						Если ЗначениеЗаполнено(ЭлементМассиваПользователей.Вид) Тогда
							Если СтрокиНомеров = Неопределено Тогда
								СтрокиНомеров = СтрокаПользователя.ПолучитьЭлементы();
							КонецЕсли;
							СтрокаТелефона = СтрокиНомеров.Добавить();
							СтрокаТелефона.Наименование		= ЭлементМассиваПользователей.НаименованиеВида + ": " + ЭлементМассиваПользователей.Представление;
							СтрокаТелефона.ЭтоГруппа		= Ложь;
							СтрокаТелефона.Картинка			= 2;	
							СтрокаТелефона.ПорядковыйНомер	= ЭлементМассиваПользователей.ПорядковыйНомер;
							СтрокаТелефона.Объект			= ЭлементМассиваПользователей.Вид;
						КонецЕсли;	
					ИначеЕсли ЗначениеЗаполнено(ТекПользователь) Тогда
						ТекПользователь = Неопределено;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;	
		// Сдвигаем вверх группу "Все пользователи"
		ВсеПользователиГруппПользователей = "Справочник.ГруппыПользователей.ВсеПользователи";
		НайденныйЭлемент = СписокГрупп.НайтиПоЗначению(ПредопределенноеЗначение(ВсеПользователиГруппПользователей));
		Если НЕ (НайденныйЭлемент = Неопределено) Тогда
			СтрокаГруппы = ДеревоПользователей.НайтиПоИдентификатору(Строка(НайденныйЭлемент.Представление));
			ИндексГруппы = СтрокиДерева.Индекс(СтрокаГруппы);
			СтрокиДерева.Сдвинуть(ИндексГруппы, -1 * ИндексГруппы);
		КонецЕсли;	
	ИначеЕсли ВариантОтображенияПользователей = 2 Тогда
		// Добавляем все подразделения
		МассивВсехПодразделений = ПолучитьМассивВсехПодразделений();
		СписокПодразделений = Новый СписокЗначений;
		Для Каждого ЭлементМассиваПодразделений Из МассивВсехПодразделений Цикл
			Если ЗначениеЗаполнено(ЭлементМассиваПодразделений.Родитель) Тогда
				// Ищем родителя в структуре соответствий
				НайденныйЭлемент = СписокПодразделений.НайтиПоЗначению(ЭлементМассиваПодразделений.Родитель);
				Если НайденныйЭлемент = Неопределено Тогда
					СтрокаРодитель = СтрокиДерева.Добавить();
					СтрокаРодитель.Наименование		= сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ЭлементМассиваПодразделений.Родитель, "Наименование");
					СтрокаРодитель.ЭтоГруппа		= Истина;	
					СтрокаРодитель.Картинка			= 1;
					СтрокаРодитель.ПорядковыйНомер	= 0;
					СтрокаРодитель.Объект			= ЭлементМассиваПодразделений.Родитель;
					СписокПодразделений.Добавить(ЭлементМассиваПодразделений.Родитель, Строка(СтрокаРодитель.ПолучитьИдентификатор()));
				Иначе	
				    СтрокаРодитель = ДеревоПользователей.НайтиПоИдентификатору(Число(НайденныйЭлемент.Представление));
				КонецЕсли;	
				СтрокаГруппы = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			Иначе	
				СтрокаГруппы = СтрокиДерева.Добавить();
			КонецЕсли;
			СтрокаГруппы.Наименование		= ЭлементМассиваПодразделений.Наименование;
			СтрокаГруппы.ЭтоГруппа			= Истина;	
			СтрокаГруппы.Картинка			= 1;
			СтрокаГруппы.ПорядковыйНомер	= 0;
			СтрокаГруппы.Объект				= ЭлементМассиваПодразделений.Подразделение;
			СписокПодразделений.Добавить(ЭлементМассиваПодразделений.Подразделение, Строка(СтрокаГруппы.ПолучитьИдентификатор()));
		КонецЦикла;	
		// Добавляем всех пользователей
		ТекПользователь			= Неопределено;
		СтрокаПользователя		= Неопределено;
		СтрокиНомеров			= Неопределено;
		Для Каждого ЭлементМассиваПользователей Из МассивВсехПользователей Цикл
			Если НЕ (ТекПользователь = ЭлементМассиваПользователей.Объект) Тогда
				ТекПользователь	= ЭлементМассиваПользователей.Объект;
				СтрокиНомеров	= Неопределено;
				// Добавляем пользователя
				Если ЗначениеЗаполнено(ЭлементМассиваПользователей.Подразделение) Тогда
					// Ищем подразделение в структуре соответствий
					НайденныйЭлемент = СписокПодразделений.НайтиПоЗначению(ЭлементМассиваПользователей.Подразделение);
					Если НайденныйЭлемент = Неопределено Тогда
						СтрокаРодитель = СтрокиДерева.Добавить();
						СтрокаРодитель.Наименование		= сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ЭлементМассиваПользователей.Подразделение, "Наименование");
						СтрокаРодитель.ЭтоГруппа		= Истина;	
						СтрокаРодитель.Картинка			= 1;
						СтрокаРодитель.ПорядковыйНомер	= 0;
						СтрокаРодитель.Объект			= ЭлементМассиваПользователей.Подразделение;
					Иначе	
					    СтрокаРодитель = ДеревоПользователей.НайтиПоИдентификатору(Число(НайденныйЭлемент.Представление));
					КонецЕсли;	
					СтрокаПользователя = СтрокаРодитель.ПолучитьЭлементы().Добавить();
				Иначе	
					СтрокаПользователя = СтрокиДерева.Добавить();
				КонецЕсли;
				СтрокаПользователя.Наименование		= ЭлементМассиваПользователей.Наименование;
				СтрокаПользователя.ЭтоГруппа		= Ложь;
				СтрокаПользователя.Картинка			= 0;	
				СтрокаПользователя.ПорядковыйНомер	= 0;
				СтрокаПользователя.Объект			= ЭлементМассиваПользователей.Объект;
				// Добавляем внутренний номер пользователя
				Если ВыводитьВнутреннийНомер И НЕ ПустаяСтрока(ЭлементМассиваПользователей.ВнутреннийНомер) Тогда
					СтрокиНомеров = СтрокаПользователя.ПолучитьЭлементы();
					СтрокаТелефона = СтрокиНомеров.Добавить();
					СтрокаТелефона.Наименование		= НСтр("ru='Внутренний номер: '") + ЭлементМассиваПользователей.ВнутреннийНомер;
					СтрокаТелефона.ЭтоГруппа		= Ложь;
					СтрокаТелефона.Картинка			= 2;	
					СтрокаТелефона.ПорядковыйНомер	= 0;
					СтрокаТелефона.Объект			= ЭлементМассиваПользователей.Объект;
				КонецЕсли;
			КонецЕсли;	
			// Добавляем телефон пользователя
			Если ЗначениеЗаполнено(ЭлементМассиваПользователей.Вид) Тогда
				Если СтрокиНомеров = Неопределено Тогда
					СтрокиНомеров = СтрокаПользователя.ПолучитьЭлементы();
				КонецЕсли;
				СтрокаТелефона = СтрокиНомеров.Добавить();
				СтрокаТелефона.Наименование		= ЭлементМассиваПользователей.НаименованиеВида + ": " + ЭлементМассиваПользователей.Представление;
				СтрокаТелефона.ЭтоГруппа		= Ложь;
				СтрокаТелефона.Картинка			= 2;	
				СтрокаТелефона.ПорядковыйНомер	= ЭлементМассиваПользователей.ПорядковыйНомер;
				СтрокаТелефона.Объект			= ЭлементМассиваПользователей.Вид;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьДеревоПользователей()	

&НаСервере
// Функция возвращает массив структур телефонной книги
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив структур телефонной книги
//
Функция ПолучитьМассивТелефоннойКниги()
	ЗначениеОбъекта = РеквизитФормыВЗначение("Объект");
	МассивКниги = ЗначениеОбъекта.МассивКниги.Получить();
	Если МассивКниги = Неопределено Тогда
		МассивКниги = Новый Массив;
	КонецЕсли;	
	Возврат МассивКниги;
КонецФункции // ПолучитьМассивТелефоннойКниги()

&НаКлиенте
Процедура ДобавитьСтрокуСтруктурыВТелефоннуюКнигу(ЭлементМассива, СтрокиДерева, Родитель)
	Если НЕ (ЭлементМассива.Объект = Неопределено) И НЕ (ЭлементМассива.ЭтоГруппа) Тогда
		Если НЕ сфпСофтФонПроСервер.сфпСсылкаСуществует(ЭлементМассива.Объект) Тогда Возврат; КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭлементМассива.Объект) Тогда	
		Если ЭлементМассива.Картинка = 2 Тогда
			Если ТипЗнч(ЭлементМассива.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
				ВнутреннийНомер	= сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ЭлементМассива.Объект);
				Если ПустаяСтрока(ВнутреннийНомер) Тогда Возврат; КонецЕсли;	
				СтрокаГруппы = СтрокиДерева.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаГруппы, ЭлементМассива);
				СтрокаГруппы.Наименование		= НСтр("ru='Внутренний номер: '") + ВнутреннийНомер;
			Иначе
				НайденныеСтроки = Объект.ВидыТелефонов.НайтиСтроки(Новый Структура("Вид", ЭлементМассива.Объект));
				Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;	
				ПредставлениеНомера = сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомера(Родитель.Объект, ЭлементМассива.Объект, ЭлементМассива.ПорядковыйНомер);
				Если ПустаяСтрока(ПредставлениеНомера) Тогда Возврат; КонецЕсли;	
				СтрокаГруппы = СтрокиДерева.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаГруппы, ЭлементМассива);
				СтрокаГруппы.Наименование		= НайденныеСтроки[0].Наименование + ": " + ПредставлениеНомера;
			КонецЕсли;	
		Иначе
			Если сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ЭлементМассива.Объект, "ПометкаУдаления") Тогда Возврат; КонецЕсли;	
			СтрокаГруппы = СтрокиДерева.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГруппы, ЭлементМассива);
			СтрокаГруппы.Наименование		= сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ЭлементМассива.Объект, "Наименование");
			ПодчиненныеСтроки	= СтрокаГруппы.ПолучитьЭлементы();
			Для Каждого ПодчиненныйЭлемент Из ЭлементМассива.Строки Цикл
				ДобавитьСтрокуСтруктурыВТелефоннуюКнигу(ПодчиненныйЭлемент, ПодчиненныеСтроки, СтрокаГруппы);
			КонецЦикла;	
			Если ПодчиненныеСтроки.Количество() = 0 Тогда
				СтрокиДерева.Удалить(СтрокаГруппы);
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		СтрокаГруппы	= СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаГруппы, ЭлементМассива);
		ПодчиненныеСтроки	= СтрокаГруппы.ПолучитьЭлементы();
		Для Каждого ПодчиненныйЭлемент Из ЭлементМассива.Строки Цикл
			ДобавитьСтрокуСтруктурыВТелефоннуюКнигу(ПодчиненныйЭлемент, ПодчиненныеСтроки, СтрокаГруппы);
		КонецЦикла;	
		Если ПодчиненныеСтроки.Количество() = 0 Тогда
			СтрокиДерева.Удалить(СтрокаГруппы);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // ДобавитьСтрокуСтруктурыВТелефоннуюКнигу()
	
&НаКлиенте
// Процедура заполняет дерево телефонной книги 
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДеревоТелефоннойКниги()
	СтрокиДерева = ДеревоТелефоннойКниги.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	МассивВидов				= СписокВидовКонтактнойИнформации.ВыгрузитьЗначения();
	МассивВсехПользователей	= сфпСофтФонПроСервер.сфпПолучитьМассивВсехПользователей(МассивВидов);
	МассивТелефоннойКниги	= ПолучитьМассивТелефоннойКниги();
	// Заполняем дерево структурами телефонной книги
	Для Каждого ЭлементМассива Из МассивТелефоннойКниги Цикл
		ДобавитьСтрокуСтруктурыВТелефоннуюКнигу(ЭлементМассива, СтрокиДерева, ДеревоТелефоннойКниги);
	КонецЦикла;	
КонецПроцедуры // ЗаполнитьДеревоТелефоннойКниги()	

&НаКлиенте
// Процедура добавляет строку контакта в телефонную книгу
//
// Параметры:
//	СтрокаКонтакта	- ДанныеФормыЭлементДерева	- Добавляемая строка
//	СтрокаКниги		- ДанныеФормыЭлементДерева	- Строка дерева телефонной книги
//
Процедура ДобавитьСтрокуВТелефоннуюКнигу(СтрокаКонтакта, СтрокаКниги)
	СтрокиКниги = СтрокаКниги.ПолучитьЭлементы();
	// Проверяем на наличие добавляемой строки
	СтрокаНайдена = Ложь;
	Для Каждого ЭлементСтрокиКниги Из СтрокиКниги Цикл
		Если ЭлементСтрокиКниги.Объект = СтрокаКонтакта.Объект Тогда
			Если СтрокаКонтакта.Картинка = 2 Тогда
				Если ЭлементСтрокиКниги.ПорядковыйНомер = СтрокаКонтакта.ПорядковыйНомер Тогда
					СтрокаНайдена = Истина;
				КонецЕсли;
			Иначе
				СтрокаНайдена = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Если НЕ СтрокаНайдена Тогда
		НоваяСтрокаКниги = СтрокиКниги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКниги, СтрокаКонтакта);
		Если СтрокаКонтакта.Картинка = 2 Тогда
			Если  ТипЗнч(СтрокаКонтакта.Объект) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				НайденныеСтроки = Объект.ВидыТелефонов.НайтиСтроки(Новый Структура("Вид", СтрокаКонтакта.Объект));
			Иначе
				НайденныеСтроки = Объект.ВидыТелефонов.НайтиСтроки(Новый Структура("Вид", "Внутренний номер"));
			КонецЕсли;	
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрокаКниги.Идентификатор	= Новый УникальныйИдентификатор;
			Иначе
				НоваяСтрокаКниги.Идентификатор	= НайденныеСтроки[0].Идентификатор;
				ПозицияРазделителя = Найти(СтрокаКонтакта.Наименование, ": ");
				Если ПозицияРазделителя > 0 Тогда
					НоваяСтрокаКниги.Наименование	= НайденныеСтроки[0].Наименование + Сред(СтрокаКонтакта.Наименование, ПозицияРазделителя);
				КонецЕсли;	
			КонецЕсли;	
		Иначе	
			НоваяСтрокаКниги.Идентификатор	= Новый УникальныйИдентификатор;
		КонецЕсли;	
		ПодчиненныеСтрокиКонтакта = СтрокаКонтакта.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрокаКонтакта Из ПодчиненныеСтрокиКонтакта Цикл
			ДобавитьСтрокуВТелефоннуюКнигу(ПодчиненнаяСтрокаКонтакта, НоваяСтрокаКниги);
		КонецЦикла;
		ИДСтроки = НоваяСтрокаКниги.ПолучитьИдентификатор(); 
		Элементы.ТелефоннаяКнига.Развернуть(ИДСтроки, Ложь);
		Элементы.ТелефоннаяКнига.ТекущаяСтрока = ИДСтроки;
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры // ДобавитьСтрокуВТелефоннуюКнигу()

&НаКлиенте
// Процедура удаляет строку контакта из телефонной книги
//
// Параметры:
//	СтрокаКонтакта	- ДанныеФормыЭлементДерева	- Удаляемая строка дерева телефонной книги
//
Процедура УдалитьСтрокуВТелефоннойКниге(СтрокаКонтакта)
	РодительКонтакта = СтрокаКонтакта.ПолучитьРодителя();
	Если РодительКонтакта = Неопределено Тогда
		РодительКонтакта = ДеревоТелефоннойКниги;
	КонецЕсли;	
	СтрокиРодителяКонтакта = РодительКонтакта.ПолучитьЭлементы();
	ИндексКонтакта = СтрокиРодителяКонтакта.Индекс(СтрокаКонтакта);
	СтрокиРодителяКонтакта.Удалить(ИндексКонтакта);
	Модифицированность = Истина;
КонецПроцедуры // УдалитьСтрокуВТелефоннойКниге()

&НаКлиенте
// Функция возвращает структуру строки дерева телефонной книги
//
// Параметры:
//	СтрокаКниги	- СтрокаДереваЗначений	- Строка телефонной книги
//
Функция ПолучитьСтруктуруСтрокиДерева(СтрокаКниги)
	МассивПодчиненныхСтрок = Новый Массив;
	СтруктураСтрокиДерева = Новый Структура;
	СтруктураСтрокиДерева.Вставить("Идентификатор",		СтрокаКниги.Идентификатор);
	СтруктураСтрокиДерева.Вставить("Наименование",		СтрокаКниги.Наименование);
	СтруктураСтрокиДерева.Вставить("ЭтоГруппа",			СтрокаКниги.ЭтоГруппа);
	СтруктураСтрокиДерева.Вставить("Картинка",			СтрокаКниги.Картинка);
	СтруктураСтрокиДерева.Вставить("Объект",			СтрокаКниги.Объект);
	СтруктураСтрокиДерева.Вставить("ПорядковыйНомер",	СтрокаКниги.ПорядковыйНомер);
	Если НЕ (СтрокаКниги.Картинка = 2) Тогда
		ПодчиненныеСтроки = СтрокаКниги.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			СтруктураПодчиненнойСтроки = ПолучитьСтруктуруСтрокиДерева(ПодчиненнаяСтрока);
			Если НЕ (СтруктураПодчиненнойСтроки = Неопределено) Тогда
				МассивПодчиненныхСтрок.Добавить(СтруктураПодчиненнойСтроки);
			КонецЕсли;	
		КонецЦикла;	
		Если МассивПодчиненныхСтрок.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	СтруктураСтрокиДерева.Вставить("Строки",	МассивПодчиненныхСтрок);
	Возврат СтруктураСтрокиДерева;
КонецФункции // ПолучитьСтруктуруСтрокиДерева()	

&НаКлиенте
// Функция возвращает массив структур телефонной книги
//
// Параметры:
//	Нет.
//
Функция ПолучитьМассивСтруктурТелефоннойКниги()
	МассивТелефоннойКниги = Новый Массив;
	СтрокиКниги = ДеревоТелефоннойКниги.ПолучитьЭлементы();
	Для Каждого СтрокаКниги Из СтрокиКниги Цикл
		СтруктураСтрокиКниги = ПолучитьСтруктуруСтрокиДерева(СтрокаКниги);
		Если НЕ (СтруктураСтрокиКниги = Неопределено) Тогда
			МассивТелефоннойКниги.Добавить(СтруктураСтрокиКниги);
		КонецЕсли;	
	КонецЦикла;
	Возврат МассивТелефоннойКниги;	
КонецФункции // ПолучитьМассивСтруктурТелефоннойКниги()	

&НаКлиенте
// 	Функция проверяет заполнение телефонной книги
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Результат проверки
//
Функция ПроверитьЗаполнениеТелефоннойКниги()
	ЕстьОшибки = Ложь;
	Если ПустаяСтрока(Объект.Наименование) Тогда	
		ЕстьОшибки = Истина;
		сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(НСтр("ru='Не заполнено наименование телефонной книги'"));
	КонецЕсли;	
	НайденныеСтроки = Объект.ВидыТелефонов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(НСтр("ru='Не выбран ни один вид телефонного номера'"));
	КонецЕсли;
	Если ДеревоТелефоннойКниги.ПолучитьЭлементы().Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(НСтр("ru='Не заполнена телефонная книга'"));
	КонецЕсли;	
	Возврат НЕ ЕстьОшибки; 
КонецФункции // ПроверитьЗаполнениеТелефоннойКниги()

&НаКлиенте
// Процедура обновляет наименование вида телефона в дереве телефонной книги
//
// Параметры:
//	СтрокаДерева	- ДанныеФормыЭлементДерева	- Строка дерева значений
//	Идентификатор	- Строка					- Уникальный идентификатор вида телефона
//	Наименование	- Строка					- Наименование вида телефона
//
Процедура ОбновитьВидТелефонаВСтроке(СтрокаДерева, Идентификатор, Наименование)
	Если СтрокаДерева.Картинка = 2 Тогда
		Если СтрокаДерева.Идентификатор = Идентификатор Тогда
			ПозицияРазделителя = Найти(СтрокаДерева.Наименование, ": ");
			Если ПозицияРазделителя > 0 Тогда
				СтрокаДерева.Наименование = Наименование + Сред(СтрокаДерева.Наименование, ПозицияРазделителя);
			КонецЕсли;	
		КонецЕсли;	
	Иначе	
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрокаДерева Из ПодчиненныеСтрокиДерева Цикл
			ОбновитьВидТелефонаВСтроке(ПодчиненнаяСтрокаДерева, Идентификатор, Наименование);
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры // ВидыТелефоновНаименованиеПриИзменении()

&НаКлиенте
// Процедура обновляет наименование вида телефона в дереве телефонной книги
//
// Параметры:
//	Идентификатор	- Строка	- Уникальный идентификатор вида телефона
//	Наименование	- Строка	- Наименование вида телефона
//
Процедура ОбновитьВидТелефонаВДереве(Идентификатор, Наименование)
	СтрокиДерева = ДеревоТелефоннойКниги.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ОбновитьВидТелефонаВСтроке(СтрокаДерева, Идентификатор, Наименование);
	КонецЦикла;	
КонецПроцедуры // ВидыТелефоновНаименованиеПриИзменении()

&НаКлиенте
// Процедура перемещает внутри группы строку телефонной книги
//
// Параметры:
//	Направление	- Число	- Направление перемещения
//
Процедура ПереместитьТекущуюСтрокуТелефоннойКниги(Направление)
	// Определяем текущую строку
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда Возврат; КонецЕсли;
	СтрокаКниги = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКниги = Неопределено Тогда Возврат; КонецЕсли;
	РодительСтрокаКниги	= СтрокаКниги.ПолучитьРодителя();
	Если РодительСтрокаКниги = Неопределено Тогда
		РодительСтрокаКниги = ДеревоТелефоннойКниги;
	КонецЕсли;	
	СтрокиДерева		= РодительСтрокаКниги.ПолучитьЭлементы();
	ИндексГруппы		= СтрокиДерева.Индекс(СтрокаКниги);
	КоличествоЭлементов	= СтрокиДерева.Количество();
	Если (Направление < 0) И (ИндексГруппы = 0) Тогда
		СтрокиДерева.Сдвинуть(ИндексГруппы, КоличествоЭлементов - 1);
	ИначеЕсли (Направление > 0) И (ИндексГруппы = КоличествоЭлементов - 1) Тогда 
		СтрокиДерева.Сдвинуть(ИндексГруппы, - 1 * КоличествоЭлементов + 1);
	Иначе	
		СтрокиДерева.Сдвинуть(ИндексГруппы, Направление);
	КонецЕсли;	
КонецПроцедуры // ПереместитьТекущуюСтрокуТелефоннойКниги()

&НаКлиенте
// Процедура - обработчик изменения наименования группы
//
// Параметры:
//	Строка					- Строка	- Имя группы
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура ОбновитьИмяГруппы(Строка, ДополнительныеПараметры) Экспорт
	Если Строка = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Строка) Тогда	
		Возврат;
	ИначеЕсли ДополнительныеПараметры.ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Строка) Тогда	
		Возврат;
	КонецЕсли;	
	ДополнительныеПараметры.ТД.Наименование = Строка;
КонецПроцедуры // ОбновитьИмяГруппы()

&НаКлиенте
// Процедура изменяет идентификатор строки пользователя
//
// Параметры:
//	ИдентификаторСтроки	- Число						- Идентификатор строки дерева пользователей
//	Пользователь		- СправочникСсылка			- Пользователь
//	СтрокаДерева		- ДанныеФормыЭлементДерева	- Строка дерева значений
//
Процедура ПолучитьИдентификаторСтрокиПользователя(ИдентификаторСтроки, Пользователь, СтрокаДерева)
	Если ИдентификаторСтроки > 0 Тогда Возврат; КонецЕсли;
	Если СтрокаДерева.ЭтоГруппа Тогда
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			ПолучитьИдентификаторСтрокиПользователя(ИдентификаторСтроки, Пользователь, ПодчиненнаяСтрока);
			Если ИдентификаторСтроки > 0 Тогда Прервать; КонецЕсли;
		КонецЦикла;	
	ИначеЕсли СтрокаДерева.Объект = Пользователь Тогда
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
	КонецЕсли;
КонецПроцедуры // ПолучитьИдентификаторСтрокиПользователя()

&НаКлиенте
// Процедура изменяет идентификатор строки телефонной книги
//
// Параметры:
//	ИдентификаторСтроки	- Число						- Идентификатор строки дерева телефонной книги 
//	Пользователь		- СправочникСсылка			- Пользователь
//	СтрокаКниги			- ДанныеФормыЭлементДерева	- Строка дерева значений
//
Процедура ПолучитьИдентификаторСтрокиКниги(ИдентификаторСтроки, Пользователь, СтрокаКниги)
	Если ИдентификаторСтроки > 0 Тогда Возврат; КонецЕсли;
	Если СтрокаКниги.ЭтоГруппа Тогда
		ПодчиненныеСтроки = СтрокаКниги.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			ПолучитьИдентификаторСтрокиКниги(ИдентификаторСтроки, Пользователь, ПодчиненнаяСтрока);
			Если ИдентификаторСтроки > 0 Тогда Прервать; КонецЕсли;
		КонецЦикла;	
	ИначеЕсли СтрокаКниги.Объект = Пользователь Тогда
		ИдентификаторСтроки = СтрокаКниги.ПолучитьИдентификатор(); 
	КонецЕсли;
КонецПроцедуры // ПолучитьИдентификаторСтрокиКниги()

&НаКлиенте
// Процедура - обработчик изменения описания пользователя
//
// Параметры:
//	РезультатЗакрытия		- Произвольный	- Результат закрытия формы
//	ДополнительныеПараметры	- Структура		- Структура дополнительных параметров
//
Процедура ОбновитьОписаниеПользователя(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ЗаполнитьДеревоПользователей();
	СтрокиДерева = ДеревоПользователей.ПолучитьЭлементы();
	НачальныйИдентификатор = -1;
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Группа) Тогда
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева.Объект = ДополнительныеПараметры.Группа Тогда
				НачальныйИдентификатор	= СтрокаДерева.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	НайтиПользователяВДеревеПользователей(ДополнительныеПараметры.Пользователь, НачальныйИдентификатор);	
КонецПроцедуры // ОбновитьОписаниеПользователя()

&НаКлиенте
// Процедура - обработчик добавления новой группы в телефонную книгу
//
// Параметры:
//	Строка					- Строка	- Имя группы
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура ДобавитьНовуюГруппуВТелефоннуюКнигу(Строка, ДополнительныеПараметры) Экспорт
	Если Строка = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Строка) Тогда	
		Возврат;
	КонецЕсли;	
	НоваяСтрокаКниги = ДополнительныеПараметры.СтрокаКниги.ПолучитьЭлементы().Добавить();
	НоваяСтрокаКниги.Идентификатор		= Новый УникальныйИдентификатор;
	НоваяСтрокаКниги.Наименование		= Строка;
	НоваяСтрокаКниги.ЭтоГруппа			= Истина;
	НоваяСтрокаКниги.Картинка			= 3;
	НоваяСтрокаКниги.ПорядковыйНомер	= 0;
	ПустаяСсылкаГруппПользователей		= "Справочник.ГруппыПользователей.ПустаяСсылка";
	НоваяСтрокаКниги.Объект				= ПредопределенноеЗначение(ПустаяСсылкаГруппПользователей);
	ИДСтроки = НоваяСтрокаКниги.ПолучитьИдентификатор(); 
	Элементы.ТелефоннаяКнига.Развернуть(ИДСтроки, Ложь);
	Элементы.ТелефоннаяКнига.ТекущаяСтрока = ИДСтроки;
КонецПроцедуры // ДобавитьНовуюГруппуВТелефоннуюКнигу()

&НаКлиенте
// Процедура выполняет поиск пользователя в дереве пользователей
//
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь
//
Процедура НайтиПользователяВДеревеПользователей(Пользователь, НачальныйИдентификатор = -1)
	Если НачальныйИдентификатор = -1 Тогда
		// Определяем место начала поиска по текущей строке
		НомерСтроки = Элементы.Пользователи.ТекущаяСтрока;
		Если НомерСтроки = Неопределено Тогда
			СтрокаДерева = ДеревоПользователей;	
			НачальныйИдентификатор = -1;
		Иначе
			СтрокаДерева = ДеревоПользователей.НайтиПоИдентификатору(НомерСтроки);
			Если СтрокаДерева = Неопределено Тогда
				СтрокаДерева = ДеревоПользователей;	
				НачальныйИдентификатор = -1;
			ИначеЕсли НЕ (СтрокаДерева = ДеревоПользователей) И (СтрокаДерева.Картинка = 2) Тогда
				// Ищем первую группу снизу вверх
				РодительСтрокиДерева = СтрокаДерева.ПолучитьРодителя();
				Если РодительСтрокиДерева = Неопределено Тогда
					СтрокаДерева = ДеревоПользователей;
					НачальныйИдентификатор = -1;
				Иначе
					СтрокаДерева = РодительСтрокиДерева;
					Если СтрокаДерева.Объект = Пользователь Тогда
						НачальныйИдентификатор = СтрокаДерева.ПолучитьИдентификатор();
					Иначе	
						НачальныйИдентификатор = -1;
					КонецЕсли;	
				КонецЕсли;	
			ИначеЕсли СтрокаДерева.Объект = Пользователь Тогда
				НачальныйИдентификатор = СтрокаДерева.ПолучитьИдентификатор();
			Иначе	
				НачальныйИдентификатор = -1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ИдентификаторСтроки	= -1;
	ПервыйИдентификатор	= -1;
	СтрокиДерева = ДеревоПользователей.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ПолучитьИдентификаторСтрокиПользователя(ИдентификаторСтроки, Пользователь, СтрокаДерева);
		Если ИдентификаторСтроки > 0 Тогда
			Если ИдентификаторСтроки > НачальныйИдентификатор Тогда
				Прервать;
			ИначеЕсли ПервыйИдентификатор = -1 Тогда
				ПервыйИдентификатор = ИдентификаторСтроки;
			КонецЕсли;
			ИдентификаторСтроки = -1;
		КонецЕсли;
	КонецЦикла;
	Если ИдентификаторСтроки = -1 Тогда
		ИдентификаторСтроки = ПервыйИдентификатор;
	КонецЕсли;
	Если ИдентификаторСтроки > 0 Тогда
		Элементы.Пользователи.ТекущаяСтрока = ИдентификаторСтроки;
	Иначе	
		Элементы.Пользователи.ТекущаяСтрока = 0;
	КонецЕсли;	
КонецПроцедуры // НайтиПользователяВДеревеПользователей()

&НаКлиенте
// Процедура выполняет поиск пользователя в телефонной книге
//
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь
//
Процедура НайтиПользователяВТелефоннойКниге(Пользователь)
	// Определяем место начала поиска по текущей строке
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		СтрокаКниги = ДеревоТелефоннойКниги;	
		НачальныйИдентификатор = -1;
	Иначе
		СтрокаКниги = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаКниги = Неопределено Тогда
			СтрокаКниги = ДеревоТелефоннойКниги;	
			НачальныйИдентификатор = -1;
		ИначеЕсли НЕ (СтрокаКниги = ДеревоТелефоннойКниги) И (СтрокаКниги.Картинка = 2) Тогда
			// Ищем первую группу снизу вверх
			РодительСтрокиКниги = СтрокаКниги.ПолучитьРодителя();
			Если РодительСтрокиКниги = Неопределено Тогда
				СтрокаКниги = ДеревоТелефоннойКниги;
				НачальныйИдентификатор = -1;
			Иначе
				СтрокаКниги = РодительСтрокиКниги;
				Если СтрокаКниги.Объект = Пользователь Тогда
					НачальныйИдентификатор = СтрокаКниги.ПолучитьИдентификатор();
				Иначе	
					НачальныйИдентификатор = -1;
				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли СтрокаКниги.Объект = Пользователь Тогда
			НачальныйИдентификатор = СтрокаКниги.ПолучитьИдентификатор();
		Иначе	
			НачальныйИдентификатор = -1;
		КонецЕсли;
	КонецЕсли;
	ИдентификаторСтроки	= -1;
	ПервыйИдентификатор	= -1;
	СтрокиКниги = ДеревоТелефоннойКниги.ПолучитьЭлементы();
	Для Каждого СтрокаКниги Из СтрокиКниги Цикл
		ПолучитьИдентификаторСтрокиКниги(ИдентификаторСтроки, Пользователь, СтрокаКниги);
		Если ИдентификаторСтроки > 0 Тогда
			Если ИдентификаторСтроки > НачальныйИдентификатор Тогда
				Прервать;
			ИначеЕсли ПервыйИдентификатор = -1 Тогда
				ПервыйИдентификатор = ИдентификаторСтроки;
			КонецЕсли;
			ИдентификаторСтроки = -1;
		КонецЕсли;
	КонецЦикла;
	Если ИдентификаторСтроки = -1 Тогда
		ИдентификаторСтроки = ПервыйИдентификатор;
	КонецЕсли;
	Если ИдентификаторСтроки > 0 Тогда
		Элементы.ТелефоннаяКнига.ТекущаяСтрока = ИдентификаторСтроки;
	Иначе	
		Элементы.ТелефоннаяКнига.ТекущаяСтрока = 0;
	КонецЕсли;	
КонецПроцедуры // НайтиПользователяВТелефоннойКниге()

#КонецОбласти