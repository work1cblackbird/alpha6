
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	ИсточникУст = Объект.Источник;
	ОбновитьПредставленияСписков();
	
	
	СформироватьНаименованиеПоУмолчанию();
	КэшНаименование = Справочники.ЗначимыеСобытия.СформироватьНаименованиеПоУмолчанию(Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		УправлениеДиалогомНаСервере();

	КонецЕсли;
			
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Настройка кнопок командной панели табличной части
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Действия");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Условия");
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеДиалогомНаСервере();

КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ЗначимыеСобытия");
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПредставленияСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	                       
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ИсточникПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	СформироватьНаименованиеПоУмолчанию(ПараметрыДействия);	
	ИсточникУст = Объект.Источник;
	
	УправлениеДиалогомНаСервере();
	
	Если Элементы.Событие.СписокВыбора.НайтиПоЗначению(Объект.Событие) = Неопределено И НЕ Объект.Событие = "" Тогда
		Объект.Событие = "";
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ИсточникУст) И НЕ ИсточникУст = Объект.Источник Тогда
	
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСменитьИсточник", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Смена источника события приведет к очистке таблицы <Условия> и <Действия>. Продолжить?'");
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ИсточникПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура СобытиеПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	СформироватьНаименованиеПоУмолчанию(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СобытиеПриИзменении(Элемент)
	
	СобытиеПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КэшНаименование = ВыбранноеЗначение
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУсловия

#Область ОбработчикиСобытийПолейТаблицыФормыУсловия

&НаКлиенте
Процедура УсловияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ТекущаяДанные = Элементы.Условия.ТекущиеДанные;
	
	Если ТекущаяДанные.ВидУсловия Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Источник", Объект.Источник);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("Текст", ТекущаяДанные.ТекстПроизвольногоУсловия);
		
		// Получаем форму, производим ее настройку и открытие
		ОткрытьФорму(
			"Справочник.ЗначимыеСобытия.Форма.РедакторВыражений", 
			ПараметрыОткрытия, 
			Элемент,
			,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Источник", Объект.Источник);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);

		ОткрытьФорму("Справочник.ЗначимыеСобытия.Форма.ВыборРеквизитаОбъекта", ПараметрыОткрытия, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УсловияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если ПолноеИмяИсточника = "Константы" ИЛИ ПолноеИмяИсточника = "РегистрыСведений" Тогда
		СтрокаТабличнойЧасти.ВидУсловия = Истина;
		СтрокаТабличнойЧасти.ТекстПроизвольногоУсловия  = ПолучитьТекстПроизвольногоУсловияПоУмолчанию();
	КонецЕсли;
	
	// Производим первоначальное заполнение строки таблицы условий
	Если НоваяСтрока И (НЕ Копирование) Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидСравнения.Равно");
		СтрокаТабличнойЧасти.КлючСтроки = ПолучитьНовыйКлючСтроки(Объект.Условия);
	КонецЕсли;
	
	Если Копирование Тогда
		СтрокаТабличнойЧасти.КлючСтроки = ПолучитьНовыйКлючСтроки(Объект.Условия);
	КонецЕсли;
	
	// Производим получение дополнительных реквизитов условия
	Если НЕ СтрокаТабличнойЧасти.ВидУсловия Тогда
		
		// Формируем структуру переменной
		РеквизитыУсловия = Новый Структура("ТипЗначения, Значение");
		
		// Заполняем значение реквизитов
		Если ТипЗнч(СтрокаТабличнойЧасти.ЗначениеСравнения) = Тип("Неопределено") Тогда
			РеквизитыУсловия.ТипЗначения = Новый ОписаниеТипов("Неопределено");
			РеквизитыУсловия.Значение = Неопределено;
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(СтрокаТабличнойЧасти.ЗначениеСравнения));
			РеквизитыУсловия.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			РеквизитыУсловия.Значение = СтрокаТабличнойЧасти.ЗначениеСравнения;
		КонецЕсли;
		
		// Формируем список доступных видов условий
		УстановитьВидыСравнения(
			РеквизитыУсловия.ТипЗначения,
			СтрокаТабличнойЧасти.ВидСравнения, 
			Элементы.УсловияВидСравнения
		);
		
		// Приводим поле выбора значения к соответствующему виду
		УстановитьЗначениеПоля(
			РеквизитыУсловия.ТипЗначения, 
			СтрокаТабличнойЧасти.ВидСравнения, 
			РеквизитыУсловия.Значение, 
			Элементы.УсловияПредставлениеЗначения, 
			СтрокаТабличнойЧасти
		);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УсловияПредставлениеЗначенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Условия.ТекущиеДанные;
	ТекущиеДанные.ЗначениеСравнения = ТекущиеДанные.ПредставлениеЗначения;
	ТекущиеДанные.Использование = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура УсловияПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Условия.ТекущиеДанные;
	ТекущиеДанные.Использование = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура УсловияВидСравненияПриИзменении(Элемент)
	
	// Получаем строку табличной части
	СтрокаТабличнойЧасти = Элементы.Условия.ТекущиеДанные;
	СтрокаТабличнойЧасти.Использование = Истина;
	
	// Формируем структуру переменной
	РеквизитыУсловия = Новый Структура("ТипЗначения, Значение");
	
	// Заполняем значение реквизитов
	Если ТипЗнч(СтрокаТабличнойЧасти.ЗначениеСравнения) = Тип("Неопределено") Тогда
		РеквизитыУсловия.ТипЗначения = Новый ОписаниеТипов("Неопределено");
		РеквизитыУсловия.Значение = Неопределено;
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СтрокаТабличнойЧасти.ЗначениеСравнения));
		РеквизитыУсловия.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		РеквизитыУсловия.Значение = СтрокаТабличнойЧасти.ЗначениеСравнения;
	КонецЕсли;
	
	// Приводим поле выбора значения к соответствующему виду
	УстановитьЗначениеПоля(
		РеквизитыУсловия.ТипЗначения,
		СтрокаТабличнойЧасти.ВидСравнения,
		РеквизитыУсловия.Значение,
		Элементы.УсловияПредставлениеЗначения,
		СтрокаТабличнойЧасти
	);
	
	Если НЕ (СтрокаТабличнойЧасти.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидСравнения.ВСписке") 
		ИЛИ СтрокаТабличнойЧасти.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидСравнения.НеВСписке")) Тогда
		
		ОчиститьЗначенияСписков(СтрокаТабличнойЧасти.КлючСтроки);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УсловияПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Условия.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидУсловия Тогда
		ТекущиеДанные.ТекстПроизвольногоУсловия = ВыбранноеЗначение;
		ВыбранноеЗначение = "<" + НСтр("ru = 'Произвольное выражение'")+ ">";
	Иначе
		
		// Сохраняем тип выбранного значения
		ОписаниеТипа = Новый ОписаниеТипов(ВыбранноеЗначение.ТипМетаданного); 
		
		ТекущиеДанные.ЗначениеСравнения = ОписаниеТипа.ПривестиЗначение(); 
		ТекущиеДанные.ПредставлениеЗначения = ОписаниеТипа.ПривестиЗначение();
		ТекущиеДанные.Использование = Истина;
		ТекущиеДанные.ПутьКДанным = ВыбранноеЗначение.ИмяМетаданного;
		Элементы.УсловияПредставлениеЗначения.ВыбиратьТип = Ложь;
		
		// Производим коррекцию выбранного значения
		Если ВыбранноеЗначение.ВидМетаданного = "РеквизитТЧ" Тогда
			ВыбранноеЗначение = ВыбранноеЗначение.Поле + " (" + ВыбранноеЗначение.ИмяТЧ + ")";
		Иначе
			ВыбранноеЗначение = ВыбранноеЗначение.Поле;
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.ЗначениеСравнения));
		
		// Формируем список доступных видов условий
		УстановитьВидыСравнения(
			Новый ОписаниеТипов(МассивТипов),
			ТекущиеДанные.ВидСравнения,
			Элементы.УсловияВидСравнения
		);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УсловияПредставлениеЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Условия.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидСравнения.ВСписке") 
		ИЛИ СтрокаТабличнойЧасти.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидСравнения.НеВСписке") Тогда
		
		СтандартнаяОбработка = Ложь;
		ТолькоГруппы = Ложь;
		СписокВыбора =  СтрокаТабличнойЧасти.ПредставлениеЗначения;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СтрокаТабличнойЧасти.ЗначениеСравнения));
		ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("СписокВыбора",      СписокВыбора);
		СтруктураПараметров.Вставить("ТипЗначения",       ТипЗначения);
		СтруктураПараметров.Вставить("ДоступныеЗначения", Неопределено);
		СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		
		// Формируем описание обработчика перехвата закрытия формы
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОповещенияПредставлениеЗначения",
			ЭтотОбъект
		);
		
		ОткрытьФорму(
			"ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", 
			СтруктураПараметров, 
			Элемент,
			,,, 
			ОписаниеОповещенияВыбораЗначения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПредставлениеЗначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Условия.ТекущиеДанные;
	ТекущиеДанные.ЗначениеСравнения =ВыбранноеЗначение;
	ТекущиеДанные.Использование = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура УсловияПередУдалением(Элемент, Отказ)
	
	СтрокаТабличнойЧасти = Элементы.Условия.ТекущиеДанные;
	ОчиститьЗначенияСписков(СтрокаТабличнойЧасти.КлючСтроки);
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДействия

#Область ОбработчикиСобытийПолейТаблицыФормыДействия

&НаКлиенте
Процедура ДействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора",Истина);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Источник",Объект.Источник);
	ПараметрыОткрытия.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	
	// Формируем описание обработчика перехвата закрытия формы
	ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения(
		"ОбработкаРезультатаОповещенияДействия", 
		ЭтотОбъект
	);
	
	ОткрытьФорму(
		"Справочник.ДействияНаЗначимыеСобытия.ФормаВыбора",
		ПараметрыОткрытия,
		Элемент,
		,,,
		ОписаниеОповещенияВыбораЗначения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДействияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Сформируем параметры открытия
	ПараметрыОткрытия = Новый Структура;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Источник",Объект.Источник);
	ПараметрыОткрытия.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	ПараметрыОткрытия.Вставить("Ключ",ТекущиеДанные.Действие);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Действие) Тогда
		ВидДействия = ПолучитьВидДействия(ТекущиеДанные.Действие);
		ВыбраннаяФорма = "ФормаЭлемента";
		Если ВидДействия = ПредопределенноеЗначение(
				"Перечисление.ВидДействияНаЗначимоеСобытие.НаписатьЭлектронноеПисьмо") Тогда
			
			ВыбраннаяФорма = "ФормаЭлектронногоПисьма";
			
		ИначеЕсли ВидДействия = ПредопределенноеЗначение(
				"Перечисление.ВидДействияНаЗначимоеСобытие.СоздатьИЗаписатьОбъект") Тогда
			
			ВыбраннаяФорма = "ФормаСозданияОбъекта";
			
		ИначеЕсли ВидДействия = ПредопределенноеЗначение(
				"Перечисление.ВидДействияНаЗначимоеСобытие.СоздатьЗаписьЖурналаРегистрации") Тогда
			
			ВыбраннаяФорма = "ФормаСозданияЗаписиВЖурналРегистрации";
			
		ИначеЕсли ВидДействия = ПредопределенноеЗначение(
				"Перечисление.ВидДействияНаЗначимоеСобытие.СоздатьНапоминание") Тогда
			
			ВыбраннаяФорма = "ФормаСоздатьНапоминание";
			
		ИначеЕсли ВидДействия = ПредопределенноеЗначение(
				"Перечисление.ВидДействияНаЗначимоеСобытие.НаписатьSMS") Тогда
			
			ВыбраннаяФорма = "ФормаСоздатьSMS";
			
		ИначеЕсли ВидДействия = ПредопределенноеЗначение(
				"Перечисление.ВидДействияНаЗначимоеСобытие.Прочее") Тогда
			
			ВыбраннаяФорма = "ФормаПроизвольноеВыражение";
			
		КонецЕсли;
		
		ОткрытьФорму(
			"Справочник.ДействияНаЗначимыеСобытия.Форма."+ВыбраннаяФорма+"",
			ПараметрыОткрытия,
			Элемент,
			,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)

	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПроизвольноеУсловие(Команда)
	
	// Получаем строку и устанавливаем ее атрибуты
	НоваяСтрока = Объект.Условия.Добавить();
	НоваяСтрока.Использование = Истина;
	НоваяСтрока.ВидУсловия    = Истина;
	НоваяСтрока.ТекстПроизвольногоУсловия  = ПолучитьТекстПроизвольногоУсловияПоУмолчанию();
	НоваяСтрока.Представление = "<" + НСтр("ru = 'Произвольное выражение'")+ ">";
	Элементы.Условия.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры 

&НаКлиенте
Процедура Очистить(Команда)
	
	Если Объект.Условия.Количество()>0 Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияЗаполнение", ЭтотОбъект);
	
		ТекстВопроса = НСтр("ru = 'Очистить табличную часть ""Условия""?'");
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитамиНаСервере()
	
	ДеревоРеквизитов = ЗначимыеСобытия.ПолучитьДеревоМетаданныхОбъекта(Объект.Источник);
	Корень = ДеревоРеквизитов.Строки[0];
	Для каждого Строка Из Корень.Строки Цикл
		Если Строка.ВидМетаданного  = "ТабличнаяЧасть" Тогда
			Для каждого СтрокаТЧ Из Строка.Строки Цикл
				
				НовоеУсловие = Объект.Условия.Добавить();
				НовоеУсловие.Представление = СтрокаТЧ.Поле;
				НовоеУсловие.ПутьКДанным = СтрокаТЧ.ИмяМетаданного;
				
				// Сохраняем тип выбранного значения
				ОписаниеТипа = Новый ОписаниеТипов(СтрокаТЧ.ТипМетаданного); 
				НовоеУсловие.ЗначениеСравнения = ОписаниеТипа.ПривестиЗначение(); 
				НовоеУсловие.ПредставлениеЗначения = ОписаниеТипа.ПривестиЗначение();
				НовоеУсловие.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидСравнения.Равно");
				
			КонецЦикла;
		Иначе
			
			НовоеУсловие = Объект.Условия.Добавить();
			НовоеУсловие.Представление = Строка.Поле;
			НовоеУсловие.ПутьКДанным = Строка.ИмяМетаданного;
			
			// Сохраняем тип выбранного значения
			ОписаниеТипа = Новый ОписаниеТипов(Строка.ТипМетаданного); 
			НовоеУсловие.ЗначениеСравнения = ОписаниеТипа.ПривестиЗначение(); 
			НовоеУсловие.ПредставлениеЗначения = ОписаниеТипа.ПривестиЗначение();
			НовоеУсловие.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидСравнения.Равно");
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим возможно в качестве источника передана константа
	Если Корень.ВидМетаданного = "Константа" Тогда
		
		НовоеУсловие = Объект.Условия.Добавить();
		НовоеУсловие.Представление = Корень.Поле;
		НовоеУсловие.ПутьКДанным = Корень.ИмяМетаданного;
		
		// Сохраняем тип выбранного значения
		ОписаниеТипа = Новый ОписаниеТипов(Корень.ТипМетаданного); 
		НовоеУсловие.ЗначениеСравнения = ОписаниеТипа.ПривестиЗначение(); 
		НовоеУсловие.ПредставлениеЗначения = ОписаниеТипа.ПривестиЗначение();
		НовоеУсловие.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидСравнения.Равно");
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьРеквизитами(Команда)
	
	Если ПолноеИмяИсточника = "Константы" ИЛИ ПолноеИмяИсточника = "РегистрыСведений" Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Условия.Количество()>0 Тогда
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОповещенияЗаполнение",
			ЭтотОбъект,
			"ОчиститьУсловияИЗаполнить"
		);
		
		ТекстВопроса = НСтр("ru = 'Табличная часть ""Условия"" будет очищена. Продолжить?'");
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьРеквизитамиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьНовыйКлючСтроки(Знач Условия)
	
	ТаблицаУсловий = Условия.Выгрузить();
	СписокКлючей = Новый СписокЗначений;
	СписокКлючей.ЗагрузитьЗначения(ТаблицаУсловий.ВыгрузитьКолонку("КлючСтроки"));
	СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	МаксКлюч = СписокКлючей[0].Значение + 1;
	
	Возврат МаксКлюч;
	
КонецФункции 

// Процедура производит формирование списка доступных видов сравнения для выбранного реквизита.
//
&НаКлиенте
Процедура УстановитьВидыСравнения(ТипЗначения, ВидСравнения, ЭлементУправления)
	
	// Производим начальную инициализацию списка доступных видов сравнений
	ЭлементУправления.СписокВыбора.Очистить();
	ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.Равно"));
	ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.НеРавно"));
	
	// Добавляем виды сравнения на больше/меньше
	Если ТипЗначения.СодержитТип(Тип("Строка")) ИЛИ ТипЗначения.СодержитТип(Тип("Число")) ИЛИ ТипЗначения.СодержитТип(Тип("Дата")) Тогда
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.Меньше"));
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.МеньшеИлиРавно"));
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.Больше"));
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.БольшеИлиРавно"));
	КонецЕсли;
	
	// Добавляем вид сравнения на содержит
	Если ТипЗначения.СодержитТип(Тип("Строка")) Тогда
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.Содержит"));
		ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.НеСодержит"));
	КонецЕсли;
	
	// Добавляем обязательный вид сравнения на вхождение в список
	ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.ВСписке"));
	ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.НеВСписке"));
	
	// Для ссылок добавляем проверку на вхождение в иерархию
	Если ТипЗначения.СодержитТип(Тип("Строка")) ИЛИ ТипЗначения.СодержитТип(Тип("Число")) ИЛИ ТипЗначения.СодержитТип(Тип("Дата")) ИЛИ ТипЗначения.СодержитТип(Тип("Булево")) Тогда
		// Не ссылочный тип данных
	Иначе
		Если ИерархическийОбъектМетаданных(ТипЗначения) Тогда
			ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.ВГруппе"));
			ЭлементУправления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидСравнения.НеВГруппе"));
		КонецЕсли;
		
	КонецЕсли;
	
	// Производим поиск текущего установленного вида сравнения
	ЭлементСпискаЗначений = ЭлементУправления.СписокВыбора.НайтиПоЗначению(ВидСравнения);
	
	// Проверяем соответствие текущему списку доступных видов
	Если ЭлементСпискаЗначений=Неопределено Тогда
		ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидСравнения.Равно");
		УсловияВидСравненияПриИзменении(Элементы.УсловияВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидыСравнения()

// Процедура выполняет приведение типа поля "Значение" в соответствие с выбранным реквизитом и видом сравнения.
//
&НаКлиенте
Процедура УстановитьЗначениеПоля(ТипЗначения, ВидСравнения, Значение, ЭлементУправления, СтрокаТабличнойЧасти)
	
	// Устанавливаем выбор только групп для вида сравнения "В группе"
	Если ВидСравнения=ПредопределенноеЗначение("Перечисление.ВидСравнения.ВГруппе") 
		ИЛИ ВидСравнения=ПредопределенноеЗначение("Перечисление.ВидСравнения.НеВГруппе") Тогда
		
		ЭлементУправления.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		
	Иначе
		
		ЭлементУправления.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		
	КонецЕсли;
	
	ЭлементУправления.ОграничениеТипа = ТипЗначения;
	СтрокаТабличнойЧасти.ЗначениеСравнения = ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Значение);
	
	Если ВидСравнения=ПредопределенноеЗначение("Перечисление.ВидСравнения.ВСписке") 
		ИЛИ ВидСравнения=ПредопределенноеЗначение("Перечисление.ВидСравнения.НеВСписке") Тогда
		
		ТипЗначения = Новый ОписаниеТипов("СписокЗначений");
		ЭлементУправления.ОграничениеТипа = ТипЗначения;
		
		Если НЕ ТипЗнч(СтрокаТабличнойЧасти.ПредставлениеЗначения) = Тип("СписокЗначений") Тогда
			
			СтрокаТабличнойЧасти.ПредставлениеЗначения =  ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Новый СписокЗначений);
			
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.ПредставлениеЗначения = ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Значение);
	КонецЕсли;
	
КонецПроцедуры 

// Функция осуществляет проверку метаданных на использование иерархии по заданному типу значения.
//
&НаСервереБезКонтекста
Функция ИерархическийОбъектМетаданных(ТипЗначения)
	
	Для Каждого ЭлементСпискаТипов Из ТипЗначения.Типы() Цикл
		
		// Получим метаданные для текущего типа
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ЭлементСпискаТипов);
		
		// Добавляем вид отбора для иерархических справочников и планов видов характеристик.
		Если (Метаданные.Справочники.Содержит(ОбъектМетаданных) ИЛИ 
				Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)) И
				ОбъектМетаданных.Иерархический Тогда
				
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции 

// Процедура осуществляет удаление строк таблицы "Значения списков" 
// по заданному ключу.
//
&НаКлиенте
Процедура ОчиститьЗначенияСписков(КлючСтроки)
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	СтрокиДляУдаления = Объект.ЗначенияСписков.НайтиСтроки(Отбор);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.ЗначенияСписков.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьСписокЗначенийПоКлючу(КлючСтроки)
	
	СписокЗначенийПоКлючу = Новый СписокЗначений;
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	МассивЗначений = Объект.ЗначенияСписков.НайтиСтроки(Отбор);
	Для Каждого ЭлементМассива Из МассивЗначений Цикл
		СписокЗначенийПоКлючу.Добавить(ЭлементМассива.Значение);
	КонецЦикла;
	
	Возврат СписокЗначенийПоКлючу;
	
КонецФункции // ПолучитьСписокЗначенийПоКлючу()

// Процедура осуществляет добавление строк таблицы "Значения списков" 
// из переданного списка значений.
//
&НаКлиенте
Процедура ЗаписатьЗначенияСписков(СтрокаТабличнойЧасти, СписокЗначений)
	
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		Если Объект.ЗначенияСписков.НайтиСтроки(Новый Структура("Значение",ЭлементСписка.Значение)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ЗначенияСписков.Добавить();
		НоваяСтрока.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки;
		НоваяСтрока.Значение   = ЭлементСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьЗначенияСписков()

&НаСервере
Процедура ОбновитьПредставленияСписков()
	
	Для Каждого СтрокаУсловий Из Объект.Условия Цикл
		Если СтрокаУсловий.ВидСравнения = Перечисления.ВидСравнения.ВСписке
			Или СтрокаУсловий.ВидСравнения = Перечисления.ВидСравнения.НеВСписке Тогда
			
			Отбор = Новый Структура("КлючСтроки", СтрокаУсловий.КлючСтроки);
			МассивЗначений = Объект.ЗначенияСписков.НайтиСтроки(Отбор);
			ПредставлениеСписка = Новый СписокЗначений;
			Для Каждого ЭлементМассива Из МассивЗначений Цикл
				ПредставлениеСписка.Добавить(ЭлементМассива.Значение);
			КонецЦикла;
			
			СтрокаУсловий.ПредставлениеЗначения = ПредставлениеСписка;
			
		Иначе
			СтрокаУсловий.ПредставлениеЗначения = СтрокаУсловий.ЗначениеСравнения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьТекстПроизвольногоУсловияПоУмолчанию()

	ТекстУсловия = 							   "// По значению этой переменной будет определяется истинность условия."; 
	ТекстУсловия = ТекстУсловия + Символы.ПС + "//"; 
	ТекстУсловия = ТекстУсловия + Символы.ПС + "// Для доступа к объекту-источнику необходимо использовать предопределенную переменную <Объект>"; 

	ТекстУсловия = ТекстУсловия + Символы.ПС; 
	ТекстУсловия = ТекстУсловия + "Результат = Ложь;"; 
	ТекстУсловия = ТекстУсловия + Символы.ПС;  
	
	Возврат ТекстУсловия;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьВидДействия(Действие)
	
	Возврат Действие.ВидДействия;
	
КонецФункции //ПолучитьКлючПоЗначениюВСоответствии()

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияЗаполнение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Очистим табличную часть "Условия"
		Объект.Условия.Очистить();
		
		Если ДополнительныеПараметры = "ОчиститьУсловияИЗаполнить" Тогда
			
			ЗаполнитьРеквизитамиНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСменитьИсточник(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
		
		Объект.Источник = ИсточникУст;
		
	Иначе
		
		// Очистим табличную часть "Условия"
		Объект.Условия.Очистить();
		Объект.Действия.Очистить();
		Объект.ЗначенияСписков.Очистить();
		ИсточникПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияДействия(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Индекс = Объект.Действия.Индекс(Элементы.Действия.ТекущиеДанные);
		Объект.Действия.Удалить(Индекс);
	Иначе
		ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
		ТекущиеДанные.Действие = РезультатОповещения;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПредставлениеЗначения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатОповещения) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Условия.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийСписокЗначений = ПолучитьСписокЗначенийПоКлючу(ТекущиеДанные.КлючСтроки);
		Если НЕ РезультатОповещения = Неопределено Тогда
			ОчиститьЗначенияСписков(ТекущиеДанные.КлючСтроки);
			ЗаписатьЗначенияСписков(ТекущиеДанные, РезультатОповещения);
			ОбновитьПредставленияСписков();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Условия.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьНаименованиеПоУмолчанию(ПараметрыДействия=Неопределено)
	
	УправлениеДиалогомСервер.СформироватьЗначениеПоУмолчанию(ЭтотОбъект, Объект, ПараметрыДействия);
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	

	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Источник) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект.Источник.ЗначениеПустойСсылки)) Тогда
		Элементы.ТолькоНовыйОбъект.Видимость = Истина;
	Иначе
		Элементы.ТолькоНовыйОбъект.Видимость = Ложь;
		Объект.ТолькоНовыйОбъект = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Источник) Тогда
		Элементы.Условия.ТолькоПросмотр = Ложь;
		Элементы.Событие.ТолькоПросмотр = Ложь;
		Элементы.УсловияПодменюЗаполнения.Доступность= Истина;
		Элементы.ПроизвольноеУсловие.Доступность= Истина;
	Иначе
		Элементы.Условия.ТолькоПросмотр = Истина;
		Элементы.Событие.ТолькоПросмотр = Истина;
		Элементы.УсловияПодменюЗаполнения.Доступность= Ложь;
		Элементы.ПроизвольноеУсловие.Доступность= Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Источник) Тогда
		
		ИмяБазовогоТипа = "";
		Позиция = СтрНайти(Объект.Источник.ПолноеИмя, ".");
		Если Позиция > 0 Тогда 
			ИмяБазовогоТипа = Лев(Объект.Источник.ПолноеИмя, Позиция - 1);
		Иначе
			ИмяБазовогоТипа = Объект.Источник.ПолноеИмя;
		КонецЕсли;
		
		// Ограничим возможные виды событий
		Элементы.Событие.СписокВыбора.Очистить();
		Если ИмяБазовогоТипа = "Справочник" 
			ИЛИ ИмяБазовогоТипа = "Справочники" 
			ИЛИ ИмяБазовогоТипа = "ПланВидовХарактеристик" 
			ИЛИ ИмяБазовогоТипа = "ПланыВидовХарактеристик" 
			ИЛИ ИмяБазовогоТипа = "ПланСчетов" 
			ИЛИ ИмяБазовогоТипа = "ПланыСчетов" Тогда
			
			Элементы.Событие.СписокВыбора.Добавить("ПриЗаписи", НСтр("ru = 'При записи'"));
			Элементы.Событие.СписокВыбора.Добавить("ПередУдалением", НСтр("ru = 'Перед удалением'"));
		ИначеЕсли ИмяБазовогоТипа = "Документ" ИЛИ ИмяБазовогоТипа = "Документы" Тогда
			Элементы.Событие.СписокВыбора.Добавить("ПриЗаписи", НСтр("ru = 'При записи'"));
			Элементы.Событие.СписокВыбора.Добавить("ПередУдалением", НСтр("ru = 'Перед удалением'"));
			Элементы.Событие.СписокВыбора.Добавить("ОбработкаПроведения", НСтр("ru = 'Обработка проведения'"));
			Элементы.Событие.СписокВыбора.Добавить("ОбработкаУдаленияПроведения", НСтр("ru = 'Обработка удаления проведения'"));
		ИначеЕсли ИмяБазовогоТипа = "ПланОбмена" ИЛИ ИмяБазовогоТипа = "ПланыОбмена" Тогда
			Элементы.Событие.СписокВыбора.Добавить("ПриЗаписи", НСтр("ru = 'При записи'"));
			Элементы.Событие.СписокВыбора.Добавить("ПередУдалением", НСтр("ru = 'Перед удалением'"));
			Элементы.Событие.СписокВыбора.Добавить("ПриОтправкеДанныхГлавному", НСтр("ru = 'При отправке данных главному'"));
			Элементы.Событие.СписокВыбора.Добавить("ПриОтправкеДанныхПодчиненному", НСтр("ru = 'При отправке данных подчиненному'"));
			Элементы.Событие.СписокВыбора.Добавить("ПриОтправкеДанныхУзлаПодчиненному", НСтр("ru = 'При отправке данных узла подчиненному'"));
			Элементы.Событие.СписокВыбора.Добавить("ПриПолученииДанныхОтГлавного", НСтр("ru = 'При получении данных от главного'"));
			Элементы.Событие.СписокВыбора.Добавить("ПриПолученииДанныхОтПодчиненного", НСтр("ru = 'При получении данных от подчиненного'"));
			Элементы.Событие.СписокВыбора.Добавить("ПриПолученииДанныхУзлаОтГлавного", НСтр("ru = 'При получении данных узла от главного'"));
		Иначе
			Элементы.Событие.СписокВыбора.Добавить("ПриЗаписи", НСтр("ru = 'При записи'"));
		КонецЕсли;
		
		ПолноеИмяИсточника = Объект.Источник.ПолноеИмя;
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УсловияВидСравнения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УсловияПредставлениеЗначения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Условия.ВидУсловия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

