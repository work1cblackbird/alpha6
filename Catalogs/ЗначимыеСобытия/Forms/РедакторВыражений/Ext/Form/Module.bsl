
#Область ОбработчикиСобытийФормы

// Процедура-обработчик события "ПриСозданииНаСервере" Формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("РедактированиеШаблона") Тогда
		РедактированиеШаблона = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Источник") Тогда
		Источник = Параметры.Источник;
		Если Источник.ПолноеИмя = "Константы" ИЛИ Источник.ПорядокКоллекции = 0 ИЛИ  Источник.ПолноеИмя = "РегистрыСведений" Тогда
			Элементы.Поля.Видимость = Ложь;
		Иначе
			ДеревоПолей = РеквизитФормыВЗначение("Поля");
			ДеревоПолей = ЗначимыеСобытия.ПолучитьДеревоМетаданныхОбъекта(Источник,"Объект");
			ЗначениеВРеквизитФормы(ДеревоПолей, "Поля");
			Элементы.Поля.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Текст") Тогда
		Выражение.УстановитьТекст(Параметры.Текст);
	КонецЕсли;
	
	Если РедактированиеШаблона Тогда
		Элементы.ГруппаОператоры.Видимость = Ложь;
		Элементы.ФормаПроверитьВыражение.Видимость = Ложь;
		Заголовок = НСтр("ru = 'Редактирование шаблона'");
	Иначе
		ДеревоОператоров = РеквизитФормыВЗначение("Операторы");
		ДеревоОператоров = СформироватьДеревоОператоров();
		ЗначениеВРеквизитФормы(ДеревоОператоров, "Операторы");
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОператоры

// Процедура-обработчик события "Выбор" таблицы "Операторы"
//
&НаКлиенте
Процедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Если Элементы.Операторы.Развернут(ВыбраннаяСтрока) Тогда
			Элементы.Операторы.Свернуть(ВыбраннаяСтрока);
		Иначе
			Элементы.Операторы.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТекстДляВставки = Элемент.ТекущиеДанные.Текст;
	
	ВставитьТекст(ТекстДляВставки);
	
	Индекс = СтрНайти(ТекстДляВставки, "(");
	Если Индекс Тогда
		
		СтрокаНач  = 0;
		СтрокаКон  = 0;
		КолонкаНач = 0;
		КолонкаКон = 0;
		Элементы.Выражение.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
		
		КолонкаНач = КолонкаКон - (СтрДлина(ТекстДляВставки) - Индекс);
		
		Элементы.Выражение.УстановитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаНач);
		
	КонецЕсли;
	
КонецПроцедуры // ОператорыВыбор()

// Процедура-обработчик события "НачалоПеретаскивания" таблицы "Операторы"
//
&НаКлиенте
Процедура ОператорыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Иначе
		ТекстДляВставки = Элемент.ТекущиеДанные.Текст;
		ПараметрыПеретаскивания.Значение = ТекстДляВставки;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	КонецЕсли;
	
КонецПроцедуры // ОператорыНачалоПеретаскивания()

// Процедура-обработчик события "ОкончаниеПеретаскивания" таблицы "Операторы"
//
&НаКлиенте
Процедура ОператорыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтрокаНач  = 0;
	СтрокаКон  = 0;
	КолонкаНач = 0;
	КолонкаКон = 0;
	Элементы.Выражение.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
	
	ВыделенныйТекст = Элементы.Выражение.ВыделенныйТекст;
	Индекс = СтрНайти(ВыделенныйТекст, "(");
	Если Индекс Тогда
		КолонкаНач = КолонкаКон - (СтрДлина(ВыделенныйТекст) - Индекс);
	Иначе
		КолонкаНач = КолонкаКон;
	КонецЕсли;
	
	Элементы.Выражение.УстановитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаНач);
	
КонецПроцедуры // ОператорыОкончаниеПеретаскивания()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоля

// Процедура-обработчик события "Выбор" таблицы "Поля"
//
&НаКлиенте
Процедура ПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Если Элементы.Поля.Развернут(ВыбраннаяСтрока) Тогда
			Элементы.Поля.Свернуть(ВыбраннаяСтрока);
		Иначе
			Элементы.Поля.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТекстДляВставки = ""+Элемент.ТекущиеДанные.ИмяМетаданного+"";
	
	ВставитьТекст(ТекстДляВставки);
	
КонецПроцедуры // ПоляВыбор()

// Процедура-обработчик события "НачалоПеретаскивания" таблицы "Поля"
//
&НаКлиенте
Процедура ПоляНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Иначе
		ПараметрыПеретаскивания.Значение = ""+Элемент.ТекущиеДанные.ИмяМетаданного+"";
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	КонецЕсли;
	
КонецПроцедуры // ПоляНачалоПеретаскивания()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при выполнении команды "Проверить выражение".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПроверитьВыражение(Команда)
	
	ТекстВыражения = Выражение.ПолучитьТекст();
	Если ЗначениеЗаполнено(ТекстВыражения) Тогда
		
		СтрокаОшибки  = 0;
		КолонкаОшибки = 0;
		Результат = ПроверитьВыражениеСервер(ТекстВыражения, Источник, ИСТИНА, СтрокаОшибки, КолонкаОшибки);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВыражение()

// Обработчик события возникающего на клиенте при выполнении команды "Сохранить выражение".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СохранитьВыражение(Команда)
	
	ТекстВыражения = Выражение.ПолучитьТекст();;
	Если ЗначениеЗаполнено(ТекстВыражения) Тогда
		
		Если РедактированиеШаблона Тогда
			ОповеститьОВыборе(СокрЛП(ТекстВыражения));
		Иначе
			СтрокаОшибки  = 0;
			КолонкаОшибки = 0;
			Результат = ПроверитьВыражениеСервер(ТекстВыражения, Источник, ИСТИНА, СтрокаОшибки, КолонкаОшибки);
			Если Результат Тогда
				ОповеститьОВыборе(СокрЛП(ТекстВыражения));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьВыражениеЗавершение", ЭтотОбъект, Новый Структура("ТекстВыражения", ТекстВыражения)), НСтр("ru = 'Выражение пусто. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВыражениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекстВыражения = ДополнительныеПараметры.ТекстВыражения;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОповеститьОВыборе(СокрЛП(ТекстВыражения));
	КонецЕсли;

КонецПроцедуры // СохранитьВыражение()

// Обработчик события возникающего на клиенте при выполнении команды "Открыть конструктор".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОткрытьКонструктор(Команда)
	
	#Если НЕ МобильныйКлиент Тогда
	
	КонструктораЗапроса = Новый КонструкторЗапроса;
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаОткрытияКонструктора", ЭтотОбъект);
	
	КонструктораЗапроса.Показать(ОбработчикВопроса);
	
	#Иначе
	ВызватьИсключение НСтр("ru = 'Функция недоступна в режиме мобильного клиента.'");
	#КонецЕсли
	
КонецПроцедуры //ОткрытьКонструктор()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирует дерево операторов
//
&НаСервере
Функция СформироватьДеревоОператоров()
	
	// Сформируем дерево операторов и структуру его колонок
	ДеревоОператоров = Новый ДеревоЗначений;
	ДеревоОператоров.Колонки.Добавить("Оператор",  Новый ОписаниеТипов("Строка"));
	ДеревоОператоров.Колонки.Добавить("Текст",     Новый ОписаниеТипов("Строка"));
	ДеревоОператоров.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоОператоров.Колонки.Добавить("Картинка",  Новый ОписаниеТипов("Число"));

	// Корень операторов
	Корень           = ДеревоОператоров.Строки.Добавить();
	Корень.Оператор  = НСтр("ru = 'Функции произвольных условий'");
	Корень.Текст     = "";
	Корень.ЭтоГруппа = ИСТИНА;
	Корень.Картинка  = 3;
	
	// Операторы
	НоваяСтрока           = Корень.Строки.Добавить();
	НоваяСтрока.Оператор  = "Операторы";
	НоваяСтрока.Текст     = "";
	НоваяСтрока.ЭтоГруппа = ИСТИНА;
	НоваяСтрока.Картинка  = 3;
	
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "+";
	НоваяСтрокаОперандов.Текст     = " + ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "-";
	НоваяСтрокаОперандов.Текст     = " - ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "*";
	НоваяСтрокаОперандов.Текст     = " * ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "/";
	НоваяСтрокаОперандов.Текст     = " / ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	
	// Логические операторы и константы
	НоваяСтрока           = Корень.Строки.Добавить();
	НоваяСтрока.Оператор  = НСтр("ru = 'Логические операторы и константы'");
	НоваяСтрока.Текст     = "";
	НоваяСтрока.ЭтоГруппа = ИСТИНА;
	НоваяСтрока.Картинка  = 3;
	
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "<";
	НоваяСтрокаОперандов.Текст     = " < ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = ">";
	НоваяСтрокаОперандов.Текст     = " > ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "<=";
	НоваяСтрокаОперандов.Текст     = " <= ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = ">=";
	НоваяСтрокаОперандов.Текст     = " >= ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "=";
	НоваяСтрокаОперандов.Текст     = " = ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "<>";
	НоваяСтрокаОперандов.Текст     = " <> ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "И";
	НоваяСтрокаОперандов.Текст     = " И ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "ИЛИ";
	НоваяСтрокаОперандов.Текст     = " ИЛИ ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "НЕ";
	НоваяСтрокаОперандов.Текст     = " НЕ ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "ИСТИНА";
	НоваяСтрокаОперандов.Текст     = " ИСТИНА ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "ЛОЖЬ";
	НоваяСтрокаОперандов.Текст     = " ЛОЖЬ ";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	
	// Функции
	НоваяСтрока           = Корень.Строки.Добавить();
	НоваяСтрока.Оператор  = "Функции";
	НоваяСтрока.Текст     = "";
	НоваяСтрока.ЭтоГруппа = ИСТИНА;
	НоваяСтрока.Картинка  = 3;
	
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "Максимум";
	НоваяСтрокаОперандов.Текст     = "Макс(,)";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "Минимум";
	НоваяСтрокаОперандов.Текст     = "Мин(,)";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "Округление";
	НоваяСтрокаОперандов.Текст     = "Окр(,)";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = НСтр("ru = 'Целая часть'");
	НоваяСтрокаОперандов.Текст     = "Цел()";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	НоваяСтрокаОперандов           = НоваяСтрока.Строки.Добавить();
	НоваяСтрокаОперандов.Оператор  = "Условие";
	НоваяСтрокаОперандов.Текст     = "?(,,)";
	НоваяСтрокаОперандов.ЭтоГруппа = ЛОЖЬ;
	НоваяСтрокаОперандов.Картинка  = -1;
	
	Возврат ДеревоОператоров;
	
КонецФункции // СформироватьДеревоОператоров()

// Процедура вставляет переданный текст в текстовый документ на форме
//
&НаКлиенте
Процедура ВставитьТекст(ТекстДляВставки)
	
	СтрокаНач  = 0;
	СтрокаКон  = 0;
	КолонкаНач = 0;
	КолонкаКон = 0;
	
	Элементы.Выражение.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
	
	Если (КолонкаКон = КолонкаНач) И (КолонкаКон + СтрДлина(ТекстДляВставки)) > Элементы.Выражение.Ширина / 8 Тогда
		Элементы.Выражение.ВыделенныйТекст = "";
	КонецЕсли;
		
	Элементы.Выражение.ВыделенныйТекст = ТекстДляВставки;
	
КонецПроцедуры // ВставитьТекст()

// Процедура осуществляет вызов серверной функции проверки выражения
//
&НаСервере
Функция ПроверитьВыражениеСервер(Выражение, Источник, ПроверятьНаличиеОперандов, СтрокаОшибки, КолонкаОшибки)
	
	ОбъектДляПроверки = Источник.ЗначениеПустойСсылки;
	Если ОбъектДляПроверки=Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не удалось создать экземпляр объекта-источника.'"));
	КонецЕсли;
	
	ТекУсловие  = Выражение;
	Результат = Ложь;
	Попытка
		
		Объект    = ОбъектДляПроверки;
		НачатьТранзакцию();
		//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(ТекУсловие);
		УстановитьБезопасныйРежим(Истина);
		Выполнить(ТекУсловие);
		УстановитьБезопасныйРежим(Ложь);
		ОтменитьТранзакцию();
		
		Если ТипЗнч(Результат)<>Тип("Булево") Тогда
			ТекстОшибки = НСтр("ru='Не определена переменная ""Результат"", либо ее тип не булево.'");
		Иначе
			Результат = Истина;
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ИнформацияОбОшибке().Описание;
		
	КонецПопытки;
	
	Если Результат Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибок не обнаружено'"));
	Иначе
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru='%1'"),ТекстОшибки));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьВыражениеСервер()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаОткрытияКонструктора(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РезультатОповещения) Тогда
		Текст = """" + СокрЛП(РезультатОповещения) + """;";
		
		Текст = СтрЗаменить(Текст, Символы.ПС, "" + Символы.ПС + "| ");
		Элементы.Выражение.ВыделенныйТекст = Текст;
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаОткрытияКонструктора()

#КонецОбласти

