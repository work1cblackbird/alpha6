///////////////////////////////////////////////////////////////////////////////
// Модуль формы элемента справочника "Настройки печати комплекта"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("КомандаИмя") Тогда
		СсылкаНастройки = Справочники.НастройкаПечатиКомплекта.НайтиПоКоду(
			СтрЗаменить(Параметры.КомандаИмя, "ПечатьКомплекта", "")
		);
		Если СсылкаНастройки = Справочники.НастройкаПечатиКомплекта.ПустаяСсылка()
			ИЛИ СсылкаНастройки.ПометкаУдаления = Истина Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Настройки комплекта были изменены. Для корректного отображения подменю печати, откройте форму еще раз.'"),
				,,,
				Отказ
			);
		КонецЕсли;
		СпособФормированияДерева = СсылкаНастройки.СпособФормированияДокументов;
		Если СпособФормированияДерева = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='В настройке комплекта не указан способ формирования дерева документов для печати.'"),
				,,,
				Отказ
			);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.Свойство("Документ") Тогда
		ВыбранныйДокумент = Параметры.Документ;
		СформироватьДеревоДокументов();
	ИначеЕсли Параметры.Свойство("ОбъектыПечати") Тогда
		Для Каждого Документ Из Параметры.ОбъектыПечати Цикл
			ВыбранныйДокумент = Документ;
			СформироватьДеревоДокументов();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Развернем используемые уровни
	КоллекцияЭлементовДерева = ДеревоПечатныхФорм.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		Для Каждого СтрокаВторогоУровня Из Строка.ПолучитьЭлементы() Цикл
			Если НЕ СтрокаВторогоУровня.Макет И СтрокаВторогоУровня.Использовать Тогда
				ИдентификаторСтроки = СтрокаВторогоУровня.ПолучитьИдентификатор();
				Элементы.ДеревоПечатныхФорм.Развернуть(ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Использовать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ДеревоПечатныхФормИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПечатныхФорм.ТекущиеДанные;
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущиеДанные.Использовать Тогда
		ТекущиеДанные.Копий = 1;
		Родитель.Использовать = Истина;
	Иначе
		ТекущиеДанные.Копий = 0;
		
		// Проверим использование остальных ПФ
		Используется = Ложь;
		Для каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
			Если Строка.Использовать Тогда
				Используется = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Родитель.Использовать = Используется;
		
		// Проверим использование для строки первого уровня
		ПервыйУровень = Родитель.ПолучитьРодителя();
		Если НЕ Используется И НЕ ПервыйУровень = Неопределено Тогда
			Для каждого Строка Из ПервыйУровень.ПолучитьЭлементы() Цикл
				Если Строка.Использовать Тогда
					Используется = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ПервыйУровень.Использовать = Используется;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ДеревоПечатныхФормИспользоватьПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Копий".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ДеревоПечатныхФормКопийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПечатныхФорм.ТекущиеДанные;
	Если ТекущиеДанные.Копий = 0 Тогда
		ТекущиеДанные.Использовать = Ложь;
	КонецЕсли;
	
КонецПроцедуры //ДеревоПечатныхФормКопийПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при выполнении команды "Применить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Применить(Команда)

	НеПроведенныеДокументы = Новый Массив;
	
	// Сформируем список объектов для печати
	ОбъектыПечати = Новый Массив;
	СоответствиеТипаМакету = Новый СписокЗначений;
	
	// Подготовим список пф для описи
	Комплект = Новый Массив;
	ОписьКомплектов = "";
	ИменаМакетов = "";
	ЕстьВнешниеПечатныеФормы = Ложь;
	
	Для каждого Строка Из ДеревоПечатныхФорм.ПолучитьЭлементы() Цикл
		
		ОбъектыПечати.Добавить(Строка.ДокументМакет);
		Для каждого СтрокаВторогоУровня Из Строка.ПолучитьЭлементы() Цикл
			
			// Добавим выбранные ПФ и связанные документы
			Если СтрокаВторогоУровня.Макет Тогда
				Если СтрокаВторогоУровня.Использовать Тогда
					
					// Сохраним описание комплекта
					ОписьКомплектов = ОписьКомплектов
						+ ?(ОписьКомплектов = "", "", ",") + Строка.ДокументМакет.УникальныйИдентификатор()
						+ "|" + Строка.ДокументМакет
						+ "|" + СтрокаВторогоУровня.ДокументМакет + "|" + СтрокаВторогоУровня.Копий;
					
					СоответствиеТипаМакету.Добавить(
						СтрокаВторогоУровня.ИмяМакета + Строка.ДокументМакет.УникальныйИдентификатор(),
						СтрокаВторогоУровня.ИмяДокумента
					);
					
					Если СтрНайти(СтрокаВторогоУровня.ИмяМакета, "ВнешняяПечатнаяФорма") = 0 Тогда
						Копия=0;
						Для Копия = Копия + 1 По СтрокаВторогоУровня.Копий Цикл
							ИменаМакетов = ИменаМакетов
								+ ?(ИменаМакетов = "", "", ",")
								+ Строка.ДокументМакет.УникальныйИдентификатор()
								+ "." + СтрокаВторогоУровня.МенеджерПечати
								+ "." + СтрокаВторогоУровня.ИмяМакета;
						КонецЦикла;
					Иначе
						Копия=0;
						Для Копия = Копия + 1 По СтрокаВторогоУровня.Копий Цикл
							ИменаМакетов = ИменаМакетов
								+ ?(ИменаМакетов = "", "", ",")
								+ Строка.ДокументМакет.УникальныйИдентификатор()
								+ "." + СтрокаВторогоУровня.МенеджерПечати
								+ "." + СтрокаВторогоУровня.ИмяМакета;
						КонецЦикла;
						ЕстьВнешниеПечатныеФормы = Истина;
					КонецЕсли;
					
					// Проверим необходимость проведения
					Если
						НеПроведенныеДокументы.Найти(Строка.ДокументМакет) = Неопределено
						И НЕ Строка.СостояниеДокумента = 14
						И СтрокаВторогоУровня.ПроверкаПроведенияПередПечатью
					Тогда
						НеПроведенныеДокументы.Добавить(Строка.ДокументМакет);
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				ОбъектыПечати.Добавить(СтрокаВторогоУровня.ДокументМакет);
				Для каждого СтрокаТретьегоУровняУровня Из СтрокаВторогоУровня.ПолучитьЭлементы() Цикл
					Если СтрокаТретьегоУровняУровня.Использовать Тогда
						
						// Сохраним описание комплекта
						ОписьКомплектов = ОписьКомплектов + ?(ОписьКомплектов = "", "", ",") 
								+ Строка.ДокументМакет.УникальныйИдентификатор() + "|" + СтрокаВторогоУровня.ДокументМакет 
								+ "|" + СтрокаТретьегоУровняУровня.ДокументМакет + "|" + СтрокаТретьегоУровняУровня.Копий;
						
						СоответствиеТипаМакету.Добавить(СтрокаТретьегоУровняУровня.ИмяМакета 
								+ СтрокаВторогоУровня.ДокументМакет.УникальныйИдентификатор(),СтрокаТретьегоУровняУровня.ИмяДокумента);
						Копия = 0;
						Для Копия = Копия + 1 По СтрокаТретьегоУровняУровня.Копий Цикл
							ИменаМакетов = ИменаМакетов
								+ ?(ИменаМакетов = "", "", ",")
								+ СтрокаВторогоУровня.ДокументМакет.УникальныйИдентификатор() 
								+ "." + СтрокаТретьегоУровняУровня.МенеджерПечати
								+"." + СтрокаТретьегоУровняУровня.ИмяМакета;
						КонецЦикла;
						
						// Проверим необходимость проведения
						Если
							НеПроведенныеДокументы.Найти(СтрокаВторогоУровня.ДокументМакет) = Неопределено 
							И НЕ СтрокаВторогоУровня.СостояниеДокумента = 14
							И СтрокаТретьегоУровняУровня.ПроверкаПроведенияПередПечатью
						Тогда
							НеПроведенныеДокументы.Добавить(СтрокаВторогоУровня.ДокументМакет);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ПечатьОписиКомплектов Тогда
			ИменаМакетов = ИменаМакетов
				+ ?(ИменаМакетов = "", "", ",") 
				+ СсылкаНастройки.УникальныйИдентификатор()
				+ ".Справочник.НастройкаПечатиКомплекта.ОписьКомплектаДокументов."
				+ Строка.ДокументМакет.УникальныйИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("СоответствиеТипаМакету", СоответствиеТипаМакету);
	ПараметрыПечати.Вставить("ФиксированныйКомплект", Истина);
	ПараметрыПечати.Вставить("ОписьКомплектов", ОписьКомплектов);
	ПараметрыПечати.Вставить("Комплект", СсылкаНастройки);
	ПараметрыПечати.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", ЕстьВнешниеПечатныеФормы);
	
	Если НеПроведенныеДокументы.Количество() > 0 Тогда
		ПараметрыПечати.Вставить("ИменаМакетов", ИменаМакетов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаПроведения", ЭтотОбъект, ПараметрыПечати);
		УправлениеПечатьюКлиент.ПроверитьПроведенностьДокументов(ОписаниеОповещения, НеПроведенныеДокументы);
	Иначе
		СтруктураКомплектовПечати = СобратьКомплектыПечати(ВыбранныйДокумент, ИменаМакетов, ОбъектыПечати, ПараметрыПечати);
		КомплектыПечатиКлиент.ВыполнитьКомандуПечати(ВыбранныйДокумент, ИменаМакетов, ОбъектыПечати, Неопределено, 
			СтруктураКомплектовПечати.КоллекцияПечатныхФорм, СтруктураКомплектовПечати.ОбъектыПечати, ПараметрыПечати);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры //Применить()

&НаСервере
Функция СобратьКомплектыПечати(ВыбранныйДокумент, ИменаМакетов, ОбъектыПечати, ПараметрыПечати)
	
	Возврат КомплектыПечати.СформироватьПечатныеФормы(ВыбранныйДокумент, ИменаМакетов, ОбъектыПечати, ПараметрыПечати);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура получения списка документов.
//
&НаСервере
Процедура СформироватьДеревоДокументов()
	
	// Добавить в дерево новою строку - корень документа
	НоваяСтрока = ДеревоПечатныхФорм.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ДокументМакет = ВыбранныйДокумент; 
	ПометкаУдаленияДокумент = ?(ВыбранныйДокумент.ПометкаУдаления, 13, 12);
	НоваяСтрока.СостояниеДокумента = ?(ВыбранныйДокумент.Проведен, 14, ПометкаУдаленияДокумент);
	
	// Добавим ПФ в дерево
	ДобавитьПФВДерево(НоваяСтрока,ВыбранныйДокумент);
	
	ОписаниеТиповДокументов = Документы.ТипВсеСсылки();
	ТаблицаКонтроляПовтора = Новый Массив;
	ТаблицаКонтроляПовтора.Добавить(ВыбранныйДокумент);
	
	Если СпособФормированияДерева = 1 Тогда
		
		// Получим полную иерархию связей документов
		ДобавитьВДерево(НоваяСтрока,ВыбранныйДокумент,ТаблицаКонтроляПовтора);
		
	ИначеЕсли СпособФормированияДерева = 2 Тогда
		
		// Найти корень дерева
		ДокументКорень = Обработки.ПодчиненныеДокументы.НайтиПервыйДокументЦепочкиПодчиненности(
			ВыбранныйДокумент,
			ТаблицаКонтроляПовтора,
			ОписаниеТиповДокументов
		);
		
		Если ДокументКорень = ВыбранныйДокумент Тогда
			
			// Получим полную иерархию связей документов
			ДобавитьВДерево(НоваяСтрока,ДокументКорень,ТаблицаКонтроляПовтора);
			
		Иначе
			
			ВтораяСтрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
			ВтораяСтрока.ДокументМакет = ДокументКорень;
			ПометкаУдаленияДокумент = ?(ДокументКорень.ПометкаУдаления, 13, 12);
			ВтораяСтрока.СостояниеДокумента = ?(ДокументКорень.Проведен, 14, ПометкаУдаленияДокумент);
			ДобавитьПФВДерево(ВтораяСтрока,ДокументКорень);
			ТаблицаКонтроляПовтора.Добавить(ДокументКорень);
			
			// Получим подчиненные документы выбранного документа.
			ТекстЗапроса = Обработки.ПодчиненныеДокументы.ПолучитьТекстЗапроса(ВыбранныйДокумент);
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Основание",ВыбранныйДокумент);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТипыПодчиненныхДокументов = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				ТипТекущегоДокумента = ТипЗнч(Выборка.Документ);
				Если ТипыПодчиненныхДокументов.Найти(ТипТекущегоДокумента) = Неопределено
					И НЕ Выборка.Документ.ПометкаУдаления Тогда
					ТипыПодчиненныхДокументов.Добавить(ТипТекущегоДокумента);
				КонецЕсли;
			КонецЦикла;
			
			// Получим полную иерархию связей документов
			ДобавитьВДерево(НоваяСтрока, ДокументКорень, ТаблицаКонтроляПовтора, ТипыПодчиненныхДокументов);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьДеревоДокументов()

// Процедура обхода дерева документов и добавления в дерево подчиненных документов
//
// Параметры:
//	Строка         - Массив         - Массив строк
//	ДокументКорень - ДокументСсылка - Документ корень
//	ТаблицаКонтроляПовтора - Переданный массив документов.
//
&НаСервере
Процедура ДобавитьВДерево(Строка, ДокументКорень,ТаблицаКонтроляПовтора, ТипыПодчиненныхДокументов = Неопределено)
	
	ТекстЗапроса = Обработки.ПодчиненныеДокументы.ПолучитьТекстЗапроса(ДокументКорень);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Основание", ДокументКорень);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ (ТаблицаКонтроляПовтора.Найти(Выборка.Документ) = Неопределено) Тогда
			
			Если Выборка.Документ = ВыбранныйДокумент Тогда
				
				// Добавить подчиненные новой строке документы
				ДобавитьВДерево(Строка, Выборка.Документ, ТаблицаКонтроляПовтора);
				
			КонецЕсли;
			Продолжить;
			
		КонецЕсли;
		
		ТаблицаКонтроляПовтора.Добавить(Выборка.Документ);
		НоваяСтрока = Строка.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ДокументМакет = Выборка.Документ; 
		ПометкаУдаленияДокумент = ?(Выборка.Документ.ПометкаУдаления, 13, 12);
		НоваяСтрока.СостояниеДокумента = ?(Выборка.Документ.Проведен, 14, ПометкаУдаленияДокумент);
		
		ИспользоватьПФ = (ТипыПодчиненныхДокументов = Неопределено
			ИЛИ ТипыПодчиненныхДокументов.Найти(ТипЗнч(Выборка.Документ)) = Неопределено);
		
		ДобавитьПФВДерево(НоваяСтрока, Выборка.Документ, ИспользоватьПФ);
		
		// Добавить подчиненные новой строке документы
		ДобавитьВДерево(Строка, Выборка.Документ, ТаблицаКонтроляПовтора);
		
		Если НоваяСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
			Строка.ПолучитьЭлементы().Удалить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВДерево()

// Процедура получения печатных форм документа.
//
&НаСервере
Процедура ДобавитьПФВДерево(СтрокаДерева,Ссылка, ИспользоватьПФДокумента = Истина)
	
	// Инициализирует таблицу значений
	ТаблицаПечатныхФорм = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	
	ДокументМенеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	Если УправлениеПечатью.НастройкиПечатиОбъекта(ДокументМенеджер).ПриДобавленииКомандПечати Тогда
		ДокументМенеджер.ДобавитьКомандыПечати(ТаблицаПечатныхФорм);
	КонецЕсли;
	
	// добавляем внешние печатные формы
	ИмяДокумента = "Документ." + Ссылка.Метаданные().Имя;
	ВнешниеПечатныеФормы = УправлениеПечатью.СписокПечатныхФормИзВнешнихИсточников(ИмяДокумента);
	ПрефиксВнешнихПечатныхФорм = "ВнешняяПечатнаяФорма.";
	
	Для Каждого ПечатнаяФорма Из ВнешниеПечатныеФормы Цикл
		УправлениеПечатьюПлатформа.ДобавитьКоманду(
			ТаблицаПечатныхФорм,
			ИмяДокумента,
			ПрефиксВнешнихПечатныхФорм + ПечатнаяФорма.Значение,
			ПечатнаяФорма.Представление
		);
	КонецЦикла;
	
	ДокументПомеченНаУдаление = СтрокаДерева.ДокументМакет.ПометкаУдаления;
	
	Для каждого Строка Из ТаблицаПечатныхФорм Цикл
		
		// Учтем настройки доступность ПФ
		Если ПустаяСтрока(Строка.МенеджерПечати) ИЛИ
			(ИмяДокумента= "Документ.СводныйРемонтныйЗаказ" И Строка.МенеджерПечати <> "Документ.СводныйРемонтныйЗаказ") Тогда
				Продолжить;
		КонецЕсли;
		
		// Добавить в дерево новою строку
		НоваяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ДокументМакет = Строка.Представление;
		НоваяСтрока.ИмяМакета = Строка.Идентификатор;
		НоваяСтрока.ПроверкаПроведенияПередПечатью = Строка.ПроверкаПроведенияПередПечатью;
		НоваяСтрока.Макет = Истина;
		НоваяСтрока.ДокументСсылка = СтрокаДерева.ДокументМакет;
		НоваяСтрока.МенеджерПечати = Строка.МенеджерПечати;
		НоваяСтрока.ИмяДокумента = СтрЗаменить(Строка(ДокументМенеджер),"ДокументМенеджер.", "");
		
		ПараметрыОтбора = Новый Структура("ТипДокумента,ИмяМакета",
			"Документ." + НоваяСтрока.ИмяДокумента,
			Строка.Идентификатор
		);
		ВыбранныйМакет = СсылкаНастройки.СписокПечатныхФорм.НайтиСтроки(ПараметрыОтбора);
		Если ВыбранныйМакет.Количество() > 0 И НЕ ДокументПомеченНаУдаление И ИспользоватьПФДокумента Тогда
			СтрокаДерева.Использовать = Истина;
			НоваяСтрока.Использовать = Истина;
			НоваяСтрока.Копий = ВыбранныйМакет[0].Копий;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ДобавитьПФВДерево()

// Возвращает ссылки на объекты, выбранные в данный момент на форме.
//
&НаСервере
Функция ОбъектыПечати(Источник)
	
	Результат = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("ТаблицаФормы") Тогда
		ВыделенныеСтроки = Источник.ВыделенныеСтроки;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			ТекущаяСтрока = Источник.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущаяСтрока <> Неопределено Тогда
				Результат.Добавить(ТекущаяСтрока.Ссылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат.Добавить(Источник.Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ОбъектыПечати()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаПроведения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураКомплектовПечати = СобратьКомплектыПечати(
		ВыбранныйДокумент,
		ДополнительныеПараметры.ИменаМакетов,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	КомплектыПечатиКлиент.ВыполнитьКомандуПечати(
		ВыбранныйДокумент,
		ДополнительныеПараметры.ИменаМакетов,
		РезультатОповещения,
		Неопределено,
		СтруктураКомплектовПечати.КоллекцияПечатныхФорм,
		СтруктураКомплектовПечати.ОбъектыПечати,
		ДополнительныеПараметры
	);
	Закрыть();
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Производит настройку условного оформления формы.
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Вызываем общий обработчик действия.
	УправлениеДиалогомСправочникаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	// Отображать
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПечатныхФормИспользовать.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПечатныхФорм.Макет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Отображать
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПечатныхФормСостояниеДокумента.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПечатныхФорм.Макет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Только просмотр
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПечатныхФормКопий.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПечатныхФорм.Использовать");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПечатныхФорм.Макет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Цвет текста
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПечатныхФорм.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПечатныхФорм.Использовать");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры // УстановитьУсловноеОформление()

#КонецОбласти

#КонецОбласти

