 #Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоКода(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ПрерватьВыполнение = Не ОбработкаСобытийСправочникаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьВыполнение Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если Не ЭтоГруппа Тогда
		
		Если Не ЗначениеЗаполнено(ВидКонтрагента) Тогда
			
			ВидКонтрагента = Родитель.ВидКонтрагента;
			
			Если Не ЗначениеЗаполнено(ВидКонтрагента) Тогда
				
				ВидКонтрагента = Перечисления.ВидыКонтрагентов.Покупатель;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ФормаСобственности) Тогда
			
			ФормаСобственности = Родитель.ФормаСобственности;
			
			Если Не ЗначениеЗаполнено(ФормаСобственности) Тогда
				
				ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ФормаСобственности) Тогда
			
			Пол = Перечисления.ПолФизическихЛиц.НеУказан;
			
		ИначеЕсли ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			
			Пол = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Пол", Перечисления.ПолФизическихЛиц.НеУказан);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Фамилия) И Не ЗначениеЗаполнено(Имя) И Не ЗначениеЗаполнено(Отчество) И Не ЭтоГруппа Тогда
		
		Справочники.Контрагенты.НаименованиеПолноеПриИзменении(ЭтотОбъект, Неопределено);
		
	КонецЕсли;
	
	// +Софтфон
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Звонок") Тогда
		
		Наименование = ДанныеЗаполнения.Наименование;
		НоваяКИ = КонтактнаяИнформация.Добавить();
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		НоваяКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ДанныеЗаполнения.Телефон);
		НоваяКИ.НомерТелефона = ДанныеЗаполнения.Телефон;
		НоваяКИ.НомерТелефонаБезКодов = СтруктураНомера.НомерТелефона;
		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			
			НоваяКИ.Представление	= СтруктураНомера.КодСтраны
				+ " ("
				+ СтруктураНомера.КодГорода
				+ ") "
				+ СтруктураНомера.НомерТелефона;
			
		Иначе	
			
			НоваяКИ.Представление	= ДанныеЗаполнения.Телефон;
			
		КонецЕсли;
		
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;
		
	КонецЕсли;
	// -Софтфон
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("РЛВыкупаАвтомобиля") Тогда 
		ОбработкаЗаполнения_РабочийЛистВыкупаАвтомобиля(ДанныеЗаполнения);
	КонецЕсли;
			
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если Не ОбработкаСобытийСправочникаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		
		КодПоОКПО                     = "";
		КодИМНС                       = "";
		ИНН                           = "";
		КПП                           = "";
		ОсновнойБанковскийСчет        = Справочники.БанковскиеСчета.ПустаяСсылка();
		ОсвобожденОтНДС               = Ложь;
		РекламныйИсточник             = Справочники.ИсточникиИнформации.ПустаяСсылка();
		СтатусУчастникаГИСМТ          = Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.ПустаяСсылка();
		ДатаПолученияСтатусаГИСМТ     = Дата(1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ОбработкаСобытийСправочникаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		
		Если ФормаСобственности=Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			
			Если Не ЗначениеЗаполнено(Фамилия) И Не ЗначениеЗаполнено(Имя) И Не ЗначениеЗаполнено(Отчество) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Одно из полей ФИО должно быть заполнено.'"),,,, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если Не ОбработкаСобытийСправочникаСервер.ПередЗаписью(ЭтотОбъект, Отказ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Для формы собственности "частное лицо" всегда устанавливаем "ОсвобожденОтНДС" в Истина.
	Если Не ЭтоГруппа Тогда
		
		ЮридическоеЛицо = (ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо);
		Предприниматель = (ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
		
		Если НЕ (ЮридическоеЛицо ИЛИ Предприниматель) Тогда
			НашеПредприятие	= Ложь;
		КонецЕсли;
		
		Если ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			
			ОсвобожденОтНДС = Истина;
			
		КонецЕсли;
		
		Если ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			
			ИНН = "";
			
		Иначе
			
			ГоловнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
		
		Если Справочники.Контрагенты.ЭтоРезидентРоссии(ЭтотОбъект) Тогда
			
			Иностранный = Ложь;
			СтранаРегистрацииЕАЭС = Ложь;
			НалоговыйНомер = "";
			
		КонецЕсли;
		
		// ПростаяЭлектроннаяПодпись
		Если Не УчастникиПЭППереопределяемый.УчастникСоответствуетКритериям(ЭтотОбъект) Тогда
			
			ПодписаноСогласиеНаРаботуСПЭП = Ложь;
			
		КонецЕсли;
		// Конец ПростаяЭлектроннаяПодпись
		
	КонецЕсли;
	
	ЗаписьИзФормы = ДополнительныеСвойства.Свойство("ЗаписьИзФормы") И ДополнительныеСвойства.ЗаписьИзФормы;
	
	Если Не ЭтоГруппа И Не Отказ И Не ЗаписьИзФормы И Не ПометкаУдаления Тогда
		
		ВыполнятьПоиск = ПраваИНастройкиПользователя
			.Значение("ВыполнятьПоискДублейПередЗаписьюНовогоКонтрагента", ЭтотОбъект);
		
		Если ВыполнятьПоиск <> Перечисления.ВидыКонтроля.НеКонтролировать Тогда
				
			СтруктураПоиска = Новый Структура;
			
			Если ЗначениеЗаполнено(ДатаРождения) Тогда
				
				СтруктураПоиска.Вставить(
					"УсловиеДляФизЛица",
					Новый Структура("Наименование,НаименованиеПолное,ДатаРождения", "Подобно", "Подобно", "=")
				);
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИНН) Тогда
				
				СтруктураПоиска.Вставить("УсловиеПоКПП",Новый Структура("ИНН,КПП", "=", "="));
				
				Если ПустаяСтрока(КПП) Тогда
					
					СтруктураПоиска.Вставить("ИНН", "=");
					
				КонецЕсли;
				
			КонецЕсли;
			
			СписокКонтактов = Новый СписокЗначений;
			СписокДублей = Справочники.Контрагенты.НайтиДубли(СтруктураПоиска,СписокКонтактов, ЭтотОбъект);
			
			Если ЗначениеЗаполнено(СписокДублей) Тогда
				
				Если ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru = 'В информационной базе уже зарегистрирован контрагент с указанными Наименованием, Полным наименованием и Датой рождения'"),
						ЭтотОбъект,
						"Наименование"
					);
					
				Иначе
					
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru = 'В информационной базе уже зарегистрирован контрагент с указанными ИНН и КПП'"),
						ЭтотОбъект,
						"ИНН"
					);
					
				КонецЕсли;
					
				Если ПраваИНастройкиПользователя.Значение("ЗапретитьСохранениеДублейКонтрагентов", ЭтотОбъект) Тогда
					
					Отказ = Истина;
					
				КонецЕсли;
	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СтароеЗначениеРодителя", Ссылка.Родитель);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	РедактированиеИстории.ПередЗаписью(ЭтотОбъект);
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не ОбработкаСобытийСправочникаСервер.ПриЗаписи(ЭтотОбъект, Отказ) Тогда
		
		Возврат;
		
	КонецЕсли;		
		
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	сфпИсторияЗвонков.ДатаНачала КАК ДатаНачала,
		|	сфпИсторияЗвонков.НомерТелефона КАК НомерТелефона,
		|	сфпИсторияЗвонков.Звонок КАК Звонок,
		|	""сфпИсторияЗвонков"" КАК ИмяРегистра
		|ИЗ
		|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
		|ГДЕ
		|	сфпИсторияЗвонков.АбонентКонтакт = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	Для Каждого РезультатЗапроса Из РезультатыЗапросов Цикл
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Удалить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
	
// Производит заполнение объекта на основании документа "Сотрудники"
//
// Параметры:
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения;
//  ТекстЗаполнения - Строка - Текст введенный в поле воода при создании нового элемента;
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Сотрудники(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПрерватьЗаполнение = Не ОбработкаСобытийСправочникаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьЗаполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Наименование       = ДанныеЗаполнения.Наименование;
	НаименованиеПолное = ДанныеЗаполнения.Наименование;
	ВидКонтрагента     = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо;
	ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
	Родитель           = Справочники.Контрагенты.НайтиПоНаименованию("Сотрудники", Истина);
	Сотрудник          = ДанныеЗаполнения;
	
	Справочники.Контрагенты.НаименованиеПолноеПриИзменении(ЭтотОбъект, Неопределено);
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Рабочий лист выкупа автомобиля"
//
// Параметры:
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения;
//
Функция ОбработкаЗаполнения_РабочийЛистВыкупаАвтомобиля(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	НоваяКИ 		= КонтактнаяИнформация.Добавить();
	НоваяКИ.Вид 	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	НоваяКИ.Тип 	= Перечисления.ТипыКонтактнойИнформации.Телефон;
	СтруктураНомера = УправлениеКонтактнойИнформациейАльфаАвто.РазделитьТелефон(ДанныеЗаполнения.Телефон);
	
	НоваяКИ.НомерТелефона 			= ДанныеЗаполнения.Телефон;
	НоваяКИ.НомерТелефонаБезКодов 	= СтруктураНомера.НомерТелефона;
	
	Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
		НоваяКИ.Представление	= СтруктураНомера.КодСтраны
			+ " ("
			+ СтруктураНомера.КодГорода
			+ ") "
			+ СтруктураНомера.НомерТелефона;
	Иначе	
		НоваяКИ.Представление	= ДанныеЗаполнения.Телефон;
	КонецЕсли;
	
	ЗначенияПолей			= Новый СписокЗначений;
	ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
	ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
	ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
	НоваяКИ.ЗначенияПолей	= ЗначенияПолей;
	
	НоваяКИ 				= КонтактнаяИнформация.Добавить();
	НоваяКИ.Вид 			= Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	НоваяКИ.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	НоваяКИ.АдресЭП 		= ДанныеЗаполнения.АдресЭП;
	НоваяКИ.Представление 	= ДанныеЗаполнения.АдресЭП;
	
	Если ДанныеЗаполнения.ФормаСобственности <> Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		НаименованиеПолное = ДанныеЗаполнения.Наименование;
		Справочники.Контрагенты.НаименованиеПолноеПриИзменении(ЭтотОбъект, Неопределено);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли
