#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОсновнойПоставщик";
	Элемент.Наименование              = НСтр("ru = 'Основной поставщик'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.НаименованиеПолное        = Элемент.Наименование;
	Элемент.ВидКонтрагента            = Перечисления.ВидыКонтрагентов.Поставщик;
	Элемент.ФормаСобственности        = Перечисления.ФормыСобственности.ЮридическоеЛицо;
	
	ПрефиксКода = Лев("00000000000000000000000", 8);
	Элемент.Код = ПрефиксКода + "1";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОсновнойПокупатель";
	Элемент.Наименование              = НСтр("ru = 'Основной покупатель'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.НаименованиеПолное        = Элемент.Наименование;
	Элемент.ВидКонтрагента            = Перечисления.ВидыКонтрагентов.Покупатель;
	Элемент.ФормаСобственности        = Перечисления.ФормыСобственности.ЮридическоеЛицо;
	
	ПрефиксКода = Лев("00000000000000000000000", 8);
	Элемент.Код = ПрефиксКода + "2";
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НеОпределен";
	Элемент.Наименование              = НСтр("ru = 'Не определен'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.НаименованиеПолное        = Элемент.Наименование;
	Элемент.ВидКонтрагента            = Перечисления.ВидыКонтрагентов.Прочее;
	Элемент.ФормаСобственности        = Перечисления.ФормыСобственности.ПрочаяФормаСобственности;
	
	ПрефиксКода = Лев("00000000000000000000000", 8);
	Элемент.Код = ПрефиксКода + "4";

КонецПроцедуры

#КонецОбласти

#Область Печать

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	ЗащитаПерсональныхДанных.ДобавитьКомандуПечатиСогласияНаОбработкуПерсональныхДанных(КомандыПечати);
	
КонецПроцедуры

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ЭДО

// Получает данные физического лица для ЭДО .
// 
// Параметры:
//   Контрагент - СправочникСсылка.Контрагент 	- Ссылка на объект
//
// Возвращаемое значение:
//   Результат 	- Структура 					- Структура данных физического лица.
//
Функция ДанныеЮрФизЛицаДляЭДО(Контрагент) Экспорт
	
	Результат = ЭлектронноеВзаимодействиеАльфаАвто.НовыеСведенияОЮрФизЛице();
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Вставить("ПолноеНаименование", Контрагент.НаименованиеПолное);
	Результат.Вставить("Наименование", Контрагент.Наименование);
	Результат.Вставить("ОфициальноеНаименование", Контрагент.НаименованиеПолное);
	Результат.Вставить("ЮрФизЛицо", Контрагент.ФормаСобственности);
	Результат.Вставить("ИНН", СтрЗаменить(Контрагент.Инн, " ", ""));
	Результат.Вставить("СтранаРегистрации",
		?(ЗначениеЗаполнено(Контрагент.СтранаРегистрации), Контрагент.СтранаРегистрации, Справочники.СтраныМира.Россия));
	Результат.Вставить("НалоговыйНомерВСтранеРегистрации", Контрагент.НалоговыйНомер);
	
	Если
		Результат.ЮрФизЛицо = Перечисления.ФормыСобственности.ЮридическоеЛицо
		Или Результат.ЮрФизЛицо = Перечисления.ФормыСобственности.ПрочаяФормаСобственности
	Тогда
		
		Результат.Вставить("КПП", Контрагент.КПП);
		Результат.Вставить("ОГРН", Контрагент.ОГРН);
		
	ИначеЕсли Результат.ЮрФизЛицо = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
		
		Результат.Вставить("ИНН", СтрЗаменить(Контрагент.ГоловнойКонтрагент.Инн, " ", ""));
		Результат.Вставить("КПП", Контрагент.КПП);
		Результат.Вставить("ОГРН", Контрагент.ОГРН);
		Результат.Вставить("ГоловнойКонтрагент", Контрагент.ГоловнойКонтрагент);
		
	Иначе
		
		Результат.Вставить("КПП", "");
		Результат.Вставить("ОГРН",
			?(Результат.ЮрФизЛицо = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель, Контрагент.ОГРН, ""));
		
	КонецЕсли;
	
	Телефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
	Результат.Вставить("Телефоны", Телефоны);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Результат,
		ЭлектронноеВзаимодействиеАльфаАвто.СведенияОБанковскомСчете(Контрагент),
		Истина
	);
	
	ФормыСобственностиСФИО = Новый Массив();
	ФормыСобственностиСФИО.Добавить(Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	ФормыСобственностиСФИО.Добавить(Перечисления.ФормыСобственности.ЧастноеЛицо);
	
	Если ФормыСобственностиСФИО.Найти(Результат.ЮрФизЛицо) <> Неопределено Тогда
	
		Результат.Вставить("Фамилия", Контрагент.Фамилия);
		Результат.Вставить("Имя", Контрагент.Имя);
		Результат.Вставить("Отчество", Контрагент.Отчество);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает контактную информацию для ЭДО .
// 
// Параметры:
//   Контрагент - СправочникСсылка.Контрагент 	- Ссылка на объект
//   ТипКИ 		- Строка 						- Тип контактной информации.
//   ТипАдреса 	- Строка 						- Тип адреса.
//   ДатаКИ 	- Дата							- Дата, на которую требуется получить контактную информацию.
//
// Возвращаемое значение:
//   Результат 	- Структура 					- Структура значений контактной информации.
//
Функция КонтактнаяИнформацияДляЭДО(Контрагент, ТипКИ, ТипАдреса, ДатаКИ) Экспорт
	
	Если ТипКИ = "Адрес" Тогда
		
		ВидыКИ = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресКонтрагента"];
		
	ИначеЕсли ТипКИ = "Телефон" Тогда
		
		ВидыКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		
	ИначеЕсли ТипКИ = "АдресЭП" Тогда
		
		ВидыКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				
	Иначе
		
		ВидыКИ = Неопределено;
		
	КонецЕсли;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент),
		,
		ВидыКИ,
		ДатаКИ
	);
	
	Результат = Новый Структура;
	
	Для Каждого Колонка Из КонтактнаяИнформация.Колонки Цикл
		
		Результат.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, КонтактнаяИнформация[0]);
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Справочники.ПодтверждающиеДокументы);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СводныйРемонтныйЗаказ);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказНаряд);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЭтоГруппа
		|	ИЛИ ЗначениеРазрешено(Ссылка)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Формирует Список видов контрагентов
//
// Возвращаемое значение:
//  Массив - перечень видов контрагентов
//
Функция ПолучитьВидыКонтрагентов() Экспорт
	
	ВидыКонтрагентов = Новый Массив;
	
	Для Каждого ВидКонтрагента Из Перечисления.ВидыКонтрагентов Цикл
		
		Если ВидКонтрагента <> Перечисления.ВидыКонтрагентов.КонтактноеЛицо Тогда
			
			ВидыКонтрагентов.Добавить(ВидКонтрагента);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидыКонтрагентов;
	
КонецФункции

// Устанавливает актуальное значение КПП
//
// Параметры:
//  КПП			 - Строка			 - КПП контрагента
//  ИсторияКПП	 - ТабличнаяЧасть	 - хранит историю КПП.
//
Процедура УстановитьАктуальноеЗначениеИсторииКПП(КПП, ИсторияКПП) Экспорт
	
	КоличествоЗаписей = ИсторияКПП.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияКПП.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияКПП[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.КПП = КПП;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает актуальное значение наименования
// Параметры:
//  НаименованиеПолное	 - Строка			 - Полное наименование контрагента
//  ИсторияНаименований	 - ТабличнаяЧасть	 - хранит историю наименований.
//
Процедура УстановитьАктуальноеЗначениеИсторииНаименований(НаименованиеПолное, ИсторияНаименований) Экспорт
	
	КоличествоЗаписей = ИсторияНаименований.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияНаименований.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияНаименований[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.НаименованиеПолное = НаименованиеПолное;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получает актуальный КПП на дату
//
// Параметры:
//  Контрагент		 - СправочникСсылка.Контрагенты	 - Контрагент, для которого получаем КПП
//  ДатаСведений	 - Дата							 - Дата получения сведений
//
// Возвращаемое значение:
//  Строка
//
Функция КППНаДату(Контрагент, ДатаСведений) Экспорт
	
	Если
		Не ЗначениеЗаполнено(Контрагент)
		Или ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты")
	Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСведений) Тогда
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Контрагент", Контрагент);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ИсторияКППКонтрагентов.Период) КАК Период,
	|	ИсторияКППКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗначенияКПП
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|ГДЕ
	|	ИсторияКППКонтрагентов.Ссылка = &Контрагент
	|	И ИсторияКППКонтрагентов.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияКППКонтрагентов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсторияКППКонтрагентов.КПП КАК КПП
	|ИЗ
	|	ЗначенияКПП КАК ЗначенияКПП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|		ПО ЗначенияКПП.Ссылка = ИсторияКППКонтрагентов.Ссылка
	|			И ЗначенияКПП.Период = ИсторияКППКонтрагентов.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.КПП;
		
	Иначе
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
		
	КонецЕсли;
	
КонецФункции

// Функция получает актуальное наименование на дату
//
// Параметры:
//  Контрагент		 - СправочникСсылка.Контрагенты	 - Контрагент, для которого получаем наименование;
//  ДатаСведений	 - Дата							 - Дата получения сведений
//
// Возвращаемое значение:
//  Структура - наименование контрагента
//   * СокращенноеНаименование		 - Строка - Наименование
//   * НаименованиеПолное			 - Строка - Полное наименование контрагента
//   * НаименованиеДляПечатныхФорм	 - Строка - Полное наименование контрагента.
//
Функция НаименованияНаДату(Контрагент, ДатаСведений) Экспорт
	
	НаименованияКонтрагента = Новый Структура;
	НаименованияКонтрагента.Вставить("СокращенноеНаименование",     "");
	НаименованияКонтрагента.Вставить("НаименованиеПолное",          "");
	НаименованияКонтрагента.Вставить("НаименованиеДляПечатныхФорм", "");
	
	Если НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат НаименованияКонтрагента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаСведений) Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Контрагент", Контрагент);
		Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ИсторияНаименованийКонтрагентов.Период) КАК Период,
		|	ИсторияНаименованийКонтрагентов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗначенияНаименований
		|ИЗ
		|	Справочник.Контрагенты.ИсторияНаименований КАК ИсторияНаименованийКонтрагентов
		|ГДЕ
		|	ИсторияНаименованийКонтрагентов.Ссылка = &Контрагент
		|	И ИсторияНаименованийКонтрагентов.Период <= &ДатаСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияНаименованийКонтрагентов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияНаименованийКонтрагентов.Ссылка.Наименование КАК Наименование,
		|	ИсторияНаименованийКонтрагентов.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	ЗначенияНаименований КАК ЗначенияНаименований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияНаименований КАК ИсторияНаименованийКонтрагентов
		|		ПО ЗначенияНаименований.Ссылка = ИсторияНаименованийКонтрагентов.Ссылка
		|			И ЗначенияНаименований.Период = ИсторияНаименованийКонтрагентов.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаименованияКонтрагента.СокращенноеНаименование     = Выборка.Наименование;
			НаименованияКонтрагента.НаименованиеПолное          = Выборка.НаименованиеПолное;
			НаименованияКонтрагента.НаименованиеДляПечатныхФорм = Выборка.НаименованиеПолное;
			Возврат НаименованияКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "Наименование, НаименованиеПолное");
	НаименованияКонтрагента.СокращенноеНаименование     = ЗначенияРеквизитов.Наименование;
	НаименованияКонтрагента.НаименованиеПолное          = ЗначенияРеквизитов.НаименованиеПолное;
	НаименованияКонтрагента.НаименованиеДляПечатныхФорм = ЗначенияРеквизитов.НаименованиеПолное;
	Возврат НаименованияКонтрагента;
	
КонецФункции

// Производит поиск контрагентов с дублирующимися полями из структуры поиска.
// 
// Параметры:
//   СтруктураПоиска - СправочникСсылка.Контрагент - Добавляемый контакт
//   СписокКонтактов - СправочникСсылка.Контрагент - Контрагент для которого проверяется контакт.
//   Объект          - ДанныеФормыСтруктура        - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//   Булево - Истина - Есть дубли.
//            Ложь   - Нет дублей.
//
Функция НайтиДубли(СтруктураПоиска, СписокКонтактов, Знач Объект) Экспорт
	
	СтруктураНайденныхДублей = Новый СписокЗначений;
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Сч = 0;

	ПервоеЗначение = Истина;
	Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
		ИмяРеквизита      = КлючИЗначение.Ключ;
		ПервоеУсловие = Истина;
		СтепеньСхожести   = КлючИЗначение.Значение;
		ЗначениеРеквизита = Неопределено;
		Реквизиты = "";
		Сч = Сч + 1;
		
		Если СтрНайти(ИмяРеквизита, "Контакт") = 0 Тогда
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				Если НЕ ПервоеЗначение Тогда
					Реквизиты = "
					| ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				СтрокаРеквизит = "";
				СтрокаИмяРеквизита = "";
				СтрокаУсловия = "";
				Реквизиты = Реквизиты + "
				|ВЫБРАТЬ  
				|Данные.Ссылка" + ?(ПервоеЗначение, " КАК Ссылка", "");
				
				Для Каждого Условие Из КлючИЗначение.Значение Цикл
					ИмяРеквизита = Условие.Ключ;
					СтепеньСхожести   = Условие.Значение;
					ЗначениеРеквизита = Неопределено;
					
					Если ТипЗнч(Объект) = Тип("Структура") Тогда
						Объект.Свойство(ИмяРеквизита, ЗначениеРеквизита);
					Иначе
						ЗначениеРеквизита = Объект[ИмяРеквизита];
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
						СтрокаРеквизит = СтрокаРеквизит 
							+ ?(ПервоеУсловие, Символы.ПС + ", " , " + "" и "" + ")
							+ "ВЫРАЗИТЬ(Данные." + ИмяРеквизита + " КАК СТРОКА (1000))" ;
					Иначе
						СтрокаРеквизит = СтрокаРеквизит + ?(НЕ ПервоеУсловие, "", "|,  Данные." + ИмяРеквизита);
					КонецЕсли;
					
					СтрокаИмяРеквизита = СтрокаИмяРеквизита + ?(ПервоеУсловие, Символы.ПС + ",""", " и ") + ИмяРеквизита;
					
					СтепеньСхожестиПодобно = ВРег(СтепеньСхожести) = "ПОДОБНО";
					СтрокаУсловия  = СтрокаУсловия
						+ ?(ПервоеУсловие, Символы.ПС, " И ")
						+ "Данные."
						+ ИмяРеквизита
						+ " "
						+ СтепеньСхожести
						+ " &"
						+ ИмяРеквизита
						+ ?(СтепеньСхожестиПодобно, " СПЕЦСИМВОЛ ""~""", "");
					Если СтепеньСхожестиПодобно Тогда
						СтрокаПоискаДляЗапроса = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(ЗначениеРеквизита);
					Иначе
						СтрокаПоискаДляЗапроса = ЗначениеРеквизита;
					КонецЕсли;
					Запрос.УстановитьПараметр(ИмяРеквизита,
						?(СтепеньСхожести = "ПОДОБНО", "%" + СтрокаПоискаДляЗапроса + "%", СтрокаПоискаДляЗапроса)
					);
					
					ПервоеУсловие = Ложь;
					ПервоеЗначение = Ложь;
				КонецЦикла;
				
				Реквизиты = Реквизиты + СтрокаРеквизит + " КАК Реквизит" + СтрокаИмяРеквизита + """ КАК ИмяРеквизита";
				Если СтрокаРеквизит = "" ИЛИ СтрокаИмяРеквизита = "" ИЛИ СтрокаУсловия = "" Тогда
					Запрос.Текст = "";
				Иначе
					Запрос.Текст = Запрос.Текст + Реквизиты + "
					|ИЗ Справочник.Контрагенты КАК Данные
					|ГДЕ " + СтрокаУсловия + "
						|И Данные.Ссылка <> &Ссылка";
				КонецЕсли;
				
			Иначе
				
				Если ТипЗнч(Объект) = Тип("Структура") Тогда
					Объект.Свойство(ИмяРеквизита, ЗначениеРеквизита);
				Иначе
					ЗначениеРеквизита = Объект[ИмяРеквизита];
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ПервоеЗначение Тогда
					Реквизиты = "
					| ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				
				Реквизиты =  Реквизиты + "
				|ВЫБРАТЬ   
				|Данные.Ссылка" + ?(ПервоеЗначение, " КАК Ссылка", "");
				
				Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
					Реквизиты = Реквизиты + "
					|,ВЫРАЗИТЬ(Данные." + ИмяРеквизита + " КАК СТРОКА (1000))" + ?(ПервоеЗначение, " КАК Реквизит", "");
				Иначе
					Реквизиты = Реквизиты + "
					|,Данные." + ИмяРеквизита + ?(ПервоеЗначение, " КАК Реквизит", "");
				КонецЕсли;
				
				Реквизиты = Реквизиты + "
				|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
				
				СтепеньСхожестиПодобно = ВРег(СтепеньСхожести) = "ПОДОБНО";
				Условия  = "
				|Данные."
				+ ИмяРеквизита
				+ " "
				+ СтепеньСхожести
				+ " &"
				+ ИмяРеквизита
				+ Строка(Сч)
				+ ?(СтепеньСхожестиПодобно, " СПЕЦСИМВОЛ ""~""", "");
				
				Если СтепеньСхожестиПодобно Тогда
					СтрокаПоискаДляЗапроса = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(ЗначениеРеквизита);
				Иначе
					СтрокаПоискаДляЗапроса = ЗначениеРеквизита;
				КонецЕсли;
				Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч),
					?(СтепеньСхожести = "ПОДОБНО", "%" + СтрокаПоискаДляЗапроса + "%", СтрокаПоискаДляЗапроса)
				);
				
				Запрос.Текст = Запрос.Текст + Реквизиты + "
				|ИЗ Справочник.Контрагенты КАК Данные
				|ГДЕ " + Сред(Условия, 2) + "
						|И Данные.Ссылка <> &Ссылка";
				
				ПервоеЗначение = Ложь;
			КонецЕсли;
		Иначе
			
			Массив = Новый Массив;
			Для Каждого Стр Из СписокКонтактов Цикл
				ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Контакт_", "");
				Если Стр.Значение = ИмяРеквизита И ЗначениеЗаполнено(Стр.Представление) Тогда
					Массив.Добавить(Стр.Представление);
				КонецЕсли;
			КонецЦикла;
			
			Если Массив.Количество() > 0 Тогда
				Для Каждого Стр Из Массив Цикл
					Если НЕ ПервоеЗначение Тогда
						Реквизиты = "
						| ОБЪЕДИНИТЬ ВСЕ
						|";
					КонецЕсли;
		
					Реквизиты = Реквизиты + "
					|ВЫБРАТЬ  
					|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
		
					Реквизиты = Реквизиты + "
					|,Данные.Представление" + ?(ПервоеЗначение, " КАК Реквизит", "");
					
					Реквизиты = Реквизиты + "
					|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
					СтепеньСхожестиПодобно = ВРег(СтепеньСхожести) = "ПОДОБНО";
					Условия  = "
					|Данные.Представление " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч)
					+ ?(СтепеньСхожестиПодобно, " СПЕЦСИМВОЛ ""~""", "")
					+ "
					|И Данные.Тип = &Тип" + Строка(Сч);
					
					Если СтепеньСхожестиПодобно Тогда
						СтрокаПоискаДляЗапроса = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Стр);
					Иначе
						СтрокаПоискаДляЗапроса = Стр;
					КонецЕсли;
					Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч),
						?(СтепеньСхожести = "ПОДОБНО", "%" + СтрокаПоискаДляЗапроса + "%", СтрокаПоискаДляЗапроса)
					);
					Если ИмяРеквизита = "Адрес" Тогда
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Адрес);
					ИначеЕсли ИмяРеквизита = "Телефон" Тогда 
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Телефон);
					ИначеЕсли ИмяРеквизита = "АдресЭлектроннойПочты" Тогда 
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
					КонецЕсли;
					
					Запрос.Текст = Запрос.Текст + Реквизиты + "
						|ИЗ Справочник.Контрагенты.КонтактнаяИнформация КАК Данные
						|ГДЕ " + Сред(Условия, 2) + "
						|И Данные.Ссылка <> &Ссылка";
					
					Сч = Сч + 1;
					ПервоеЗначение = Ложь;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Запрос.Текст) Тогда
		Возврат СтруктураНайденныхДублей;
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		СтруктураРеквизита = Новый Структура;
		СтруктураРеквизита.Вставить("Ссылка", РезультатЗапроса.Ссылка);
		СтруктураРеквизита.Вставить("ИмяРеквизита", РезультатЗапроса.ИмяРеквизита);
		Если СтрНайти(РезультатЗапроса.ИмяРеквизита, "ДатаРождения") > 0 Тогда
			СтруктураРеквизита.Вставить("ЗначениеРеквизита",
				РезультатЗапроса.Реквизит + " и " + Строка(РезультатЗапроса.Ссылка.ДатаРождения)
			);
		Иначе
			СтруктураРеквизита.Вставить("ЗначениеРеквизита", РезультатЗапроса.Реквизит);
		КонецЕсли;
		
		СтруктураНайденныхДублей.Добавить(СтруктураРеквизита);

	КонецЦикла;
	
	Возврат СтруктураНайденныхДублей;
	
КонецФункции // НайтиДубли()

// Функция формирует КПП по умолчанию.
//
// Параметры:
//  Объект   - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьКПППоУмолчанию(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если Объект.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
		НовыйКПП = "";
	Иначе 
		НовыйКПП = ?(СтрДлина(Объект.ИНН) < 4, "", Лев(Объект.ИНН, 4) + "01001");
	КонецЕсли;
	
	Возврат НовыйКПП;
	
КонецФункции

// Возвращает полный список автомобилей контрагента
//
// Параметры:
//  Контрагент	 - СправочникСсылка	 - Контрагент, чьи автомобили нужно получить
//  НаМомент	 - Дата				 - Момент времени
//  Количество	 - Число			 - Количество автомобилей, которое хотим получить
//
// Возвращаемое значение:
//  Массив - массив, содержащий автомобили контрагента.
//
Функция АвтомобилиКонтрагента(Контрагент, НаМомент = Неопределено, Количество = Неопределено) Экспорт
	
	СтрокаВставки = ?(Количество = Неопределено, "", СтрШаблон("ПЕРВЫЕ %1", Количество));
	
	Если Контрагент.Пустая() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрШаблон(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ %1
	|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль
	|ИЗ
	|	РегистрСведений.Автомобили.СрезПоследних(
	|			&НаМомент,
	|			ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.Хозяин)
	|				) КАК АвтомобилиСрезПоследних
	|ГДЕ
	|	АвтомобилиСрезПоследних.Значение = &Контрагент", СтрокаВставки);
	
	Запрос.УстановитьПараметр("НаМомент"   , НаМомент);
	Запрос.УстановитьПараметр("Контрагент" , Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Автомобиль");
	
КонецФункции

// Возвращает краткое наименование контрагента из полного
//
// Параметры:
//  Наименование - Строка - Полное наименвоание контрагента
//
// Возвращаемое значение:
//  Строка - краткое наименование контрагента.
//
Функция ПолучитьКраткоеНаименованиеКонтрагента(Наименование) Экспорт
	
	// уберем лишние кавычки и пробелы
	КраткоеНаименование = СокрЛП(СтрЗаменить(Наименование, """", " "));
	КраткоеНаименование = СтрЗаменить(КраткоеНаименование, "  ", " ");
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	
	НаименованиеДляПоиска = СокрЛП(ВРег(КраткоеНаименование));
	НайденныеОПФ = Новый Массив;
	
	Для Каждого НаименованиеОПФ Из ПереченьНаименованийОПФ() Цикл
		
		ПозицияПолногоНаименования = СтрНайти(НаименованиеДляПоиска, ВРег(НаименованиеОПФ.Полное));
		
		Если ПозицияПолногоНаименования > 0 Тогда
			ПолнаяОПФ = Новый Структура;
			ПолнаяОПФ.Вставить("НаименованиеПолное", НаименованиеОПФ.Полное);
			ПолнаяОПФ.Вставить("НаименованиеКраткое", НаименованиеОПФ.Краткое);
			ПолнаяОПФ.Вставить("Позиция", ПозицияПолногоНаименования);
			ПолнаяОПФ.Вставить("Длина", СтрДлина(НаименованиеОПФ.Полное));
			Если НайденныеОПФ.Количество() > 0 Тогда
				Если НайденныеОПФ[0].Длина < ПолнаяОПФ.Длина Тогда
					ЗаполнитьЗначенияСвойств(НайденныеОПФ[0], ПолнаяОПФ);
				КонецЕсли;
			Иначе
				НайденныеОПФ.Добавить(ПолнаяОПФ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденныеОПФ.Количество() > 0 Тогда
		
		ОПФ = НайденныеОПФ[0];
		
		Если ОПФ.НаименованиеКраткое = "ИП" Тогда
			КраткоеНаименование = СокрЛП(Сред(КраткоеНаименование, ОПФ.Длина + 2));
			Если ФизическиеЛицаКлиентСервер.ФИОНаписаноВерно(КраткоеНаименование) Тогда
				ЗаполнитьЗначенияСвойств(Результат, ФизическиеЛицаКлиентСервер.ЧастиИмени(КраткоеНаименование));
			КонецЕсли;
		ИначеЕсли ОПФ.Позиция = 1 Тогда
			КраткоеНаименование = СокрЛП(Сред(КраткоеНаименование, ОПФ.Длина + 2)) + Символы.НПП + ОПФ.НаименованиеКраткое;
		Иначе
			КраткоеНаименование = СокрЛП(Лев(КраткоеНаименование, ОПФ.Позиция - 1))
			    + Символы.НПП
				+ ОПФ.НаименованиеКраткое
				+ Символы.НПП
				+ СокрЛП(Прав(КраткоеНаименование, СтрДлина(КраткоеНаименование) - (ОПФ.Позиция + ОПФ.Длина)));
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Наименование = КраткоеНаименование;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = Новый Массив();
	
	Если Объект.ЭтоГруппа Или Не Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
		
		ОбязательныеРеквизиты.Добавить("Наименование");
		
	КонецЕсли;
	
	Если Не Объект.ЭтоГруппа Тогда
		
		ОбязательныеРеквизиты.Добавить("ВидКонтрагента");
		ОбязательныеРеквизиты.Добавить("ФормаСобственности");
		ОбязательныеРеквизиты.Добавить("НаименованиеПолное");
		
		Если
			Не ЗначениеЗаполнено(Объект.Ссылка)
			И ПраваИНастройкиПользователя.Значение("РазрешитьВводКонтрагентаБезРекламы") = Перечисления.ВариантыОтветов.Нет
		Тогда
			
			ОбязательныеРеквизиты.Добавить("РекламныйИсточник");
			
		КонецЕсли;
		
		Если Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо Тогда
			
			ОбязательныеРеквизиты.Добавить("Сотрудник");
			
		КонецЕсли;
		
		Если Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Филиал Тогда
			
			ОбязательныеРеквизиты.Добавить("Филиал");
			
		КонецЕсли;
		
		Если Объект.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			
			ОбязательныеРеквизиты.Добавить("ГоловнойКонтрагент");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Наименование");
	Результат.Добавить("НаименованиеПолное");
	Результат.Добавить("ИНН");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Реквизиты

// Обработчик события возникающего при изменении данных реквизита "Форма собственности".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ФормаСобственностиПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ (Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо)
		И Объект.Наименование = НСтр("ru = 'Не заполнено'") Тогда
		
		Объект.Наименование = "";
	ИначеЕсли (Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо)
		И ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = НСтр("ru = 'Не заполнено'");
	КонецЕсли;
	
КонецПроцедуры // ФормаСобственностиПриИзменении()

// Обработчик события при окончании изменения данных реквизита "НаименованиеПолное"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура НаименованиеПолноеПриИзменении(Объект, ПараметрыДействия) Экспорт
	
	Если
		Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		Или Объект.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель
	Тогда 
	
		КраткоеНаименованиеКонтрагента = Справочники
			.Контрагенты
			.ПолучитьКраткоеНаименованиеКонтрагента(Объект.НаименованиеПолное);
		Объект.Фамилия      = КраткоеНаименованиеКонтрагента.Фамилия;
		Объект.Имя          = КраткоеНаименованиеКонтрагента.Имя;
		Объект.Отчество     = КраткоеНаименованиеКонтрагента.Отчество;
		Объект.Наименование = КраткоеНаименованиеКонтрагента.Наименование;
		
	Иначе
		
		Объект.Фамилия 				= "";
		Объект.Имя 					= "";
		Объект.Отчество				= "";
		
	КонецЕсли;
	
	// смотрим заполнено ли наименование
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		// получаем структура наименований
		СтруктураНаименований = РеквизитыСИсторией.ПолучитьНаименованияНаДату(Объект.Ссылка, ТекущаяДатаСеанса());
		
		Если ЗначениеЗаполнено(СтруктураНаименований) Тогда
			
			НаименованиеНаСегодня = СтруктураНаименований.НаименованиеПолное;
			
		КонецЕсли;
		
		// смотрим заполнено ли значение
		Если Объект.ИсторияНаименований.Количество() > 0 И ЗначениеЗаполнено(НаименованиеНаСегодня) Тогда
			// проверяем изменилось ли наименование
			Если НаименованиеНаСегодня <> Объект.НаименованиеПолное Тогда
				// формируем структуру отбора
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Период", НачалоДня(ТекущаяДатаСеанса()));
				
				// ищем значение на сегодня в ТЧ
				НайденныеСтроки = Объект.ИсторияНаименований.НайтиСтроки(СтруктураОтбора);
				
				// проверяем
				Если НайденныеСтроки.Количество() > 0 Тогда
					// получаем строку
					ТекСтрока = НайденныеСтроки[0];
					ТекСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
				Иначе
					// добавляем строку
					НоваяСтрока = Объект.ИсторияНаименований.Добавить();
					НоваяСтрока.Период = ТекущаяДатаСеанса();
					НоваяСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// ищем строку с пустым периодом
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Период", Дата("00010101"));
			
			// ищем значение на сегодня в ТЧ
			НайденныеСтроки = Объект.ИсторияНаименований.НайтиСтроки(СтруктураОтбора);
			
			// смотрим нашли или нет
			Если НайденныеСтроки.Количество() > 0 Тогда
				// получаем строку
				ТекСтрока = НайденныеСтроки[0];
				ТекСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
			Иначе
				// добавляем строку
				НоваяСтрока = Объект.ИсторияНаименований.Добавить();
				НоваяСтрока.Период = Дата("00010101");
				НоваяСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  // НаименованиеПолноеПриИзменении()

// Обработчик события при окончании изменения данных реквизита "КПП"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура КПППриИзменении(Объект, ПараметрыДействия) Экспорт
	// смотрим заполнено ли КПП
	Если ЗначениеЗаполнено(Объект.КПП) Тогда
		// получаем последний КПП
		КППНаСегодня = РеквизитыСИсторией.ПолучитьКППНаДату(Объект.Ссылка, ТекущаяДатаСеанса());
		
		// смотрим заполнено ли значение
		Если Объект.ИсторияКПП.Количество() > 0 И ЗначениеЗаполнено(КППНаСегодня) Тогда 
			// проверяем изменился ли КПП
			Если КППНаСегодня <> Объект.КПП Тогда
				// формируем структуру отбора
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Период", НачалоДня(ТекущаяДатаСеанса()));
				
				// ищем значение на сегодня в ТЧ
				НайденныеСтроки = Объект.ИсторияКПП.НайтиСтроки(СтруктураОтбора);
				
				// проверяем
				Если НайденныеСтроки.Количество() > 0 Тогда
					// получаем строку
					ТекСтрока = НайденныеСтроки[0];
					ТекСтрока.КПП = Объект.КПП;
				Иначе
					// добавляем строку
					НоваяСтрока = Объект.ИсторияКПП.Добавить();
					НоваяСтрока.Период = ТекущаяДатаСеанса();
					НоваяСтрока.КПП = Объект.КПП;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// ищем строку с пустым периодом
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Период", Дата("00010101"));
			
			// ищем значение на сегодня в ТЧ
			НайденныеСтроки = Объект.ИсторияКПП.НайтиСтроки(СтруктураОтбора);
			
			// смотрим нашли или нет
			Если НайденныеСтроки.Количество() > 0 Тогда
				// получаем строку
				ТекСтрока = НайденныеСтроки[0];
				ТекСтрока.КПП = Объект.КПП;
			Иначе
				// добавляем строку
				НоваяСтрока = Объект.ИсторияКПП.Добавить();
				НоваяСтрока.Период = Дата("00010101");
				НоваяСтрока.КПП = Объект.КПП;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Функция ЭтоРезидентРоссии(Объект) Экспорт
	
	Возврат Не ЗначениеЗаполнено(Объект.СтранаРегистрации) Или Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	
КонецФункции

Функция ПолучитьИменинников(Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	ДЕНЬ(Контрагенты.ДатаРождения) = ДЕНЬ(&ТекущаяДата)
		|	И МЕСЯЦ(Контрагенты.ДатаРождения) = МЕСЯЦ(&ТекущаяДата)
		|	И Контрагенты.ВидКонтрагента <> ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.КонтактноеЛицо)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПереченьНаименованийОПФ()
	
	Результат = Новый Массив;
	
	Для Каждого Наименование Из НаименованияОПФ() Цикл
		
		МассивНаименований = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Наименование, ",", Истина, Истина);
		Если МассивНаименований.Количество() = 2 Тогда
			Результат.Добавить(Новый Структура("Полное,Краткое", МассивНаименований[0], МассивНаименований[1]));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НаименованияОПФ()
	
	Результат = Новый Массив;
	
	Результат.Добавить("Автономная некоммерческая организация, АНО");
	Результат.Добавить("Автотранспортное предприятие, АТП");
	Результат.Добавить("Акционерное общество закрытого типа, АОЗТ");
	Результат.Добавить("Акционерное общество открытого типа , АООТ");
	Результат.Добавить("Акционерное общество, АО");
	Результат.Добавить("Акционерный коммерческий банк, АКБ");
	
	Результат.Добавить("Государственное предприятие, ГП");
	Результат.Добавить("Государственное унитарное предприятие, ГУП");
	Результат.Добавить("Государственное учреждение, ГУЧ");
	
	Результат.Добавить("Дочернее унитарное предприятие, ДУП");
	Результат.Добавить("Дочернее предприятие, ДП");
	
	Результат.Добавить("Закрытое акционерное общество, ЗАО");
	
	Результат.Добавить("Индивидуальное частное предприятие, ИЧП");
	Результат.Добавить("Индивидуальный предприниматель, ИП");
	
	Результат.Добавить("Коммерческая фирма, КФ");
	Результат.Добавить("Конструкторское бюро, КБ");
	Результат.Добавить("Коммерческий банк, КБ");
	Результат.Добавить("Коммерческий инвестиционный банк, КИБ");
	
	Результат.Добавить("Крестьянское хозяйство, КХ");
	
	Результат.Добавить("Малое предприятие, МП");
	Результат.Добавить("Муниципальное предприятие, МУП");
	Результат.Добавить("Муниципальное унитарное предприятие, МУУП");
	Результат.Добавить("Муниципальное учреждение, МУЧ");
	
	Результат.Добавить("Научно - производственное объединение, НПО");
	Результат.Добавить("Научно - производственное предприятие, НПП");
	Результат.Добавить("Небанковская кредитная организация, НКО");
	Результат.Добавить("Небанковская депозитно-кредитная организация, НДКО");
	Результат.Добавить("Некоммерческая организация, НКО");
	Результат.Добавить("Некоммерческое партнерство, НП");
	
	Результат.Добавить("Общественная организация, ОО");
	Результат.Добавить("Общественное движение, ОД");
	Результат.Добавить("Общественное объединение, ООБ");
	Результат.Добавить("Общественное учреждение, ОУЧ");
	Результат.Добавить("Общественный фонд, ОФ");
	Результат.Добавить("Общество с дополнительной ответственностью, ОДО");
	Результат.Добавить("Общество с ограниченной ответственностью, ООО");
	Результат.Добавить("Орган общественной самодеятельности, ООС");
	Результат.Добавить("Открытое акционерное общество, ОАО");
	
	Результат.Добавить("Полное товарищество, ПТ");
	Результат.Добавить("Потребительский кооператив, ПТК");
	Результат.Добавить("Производственное объединение, ПО");
	Результат.Добавить("Производственный кооператив, ПК");
	Результат.Добавить("Публичное акционерное общество, ПАО");
	
	Результат.Добавить("Расчетная небанковская кредитная организация, РНКО");
	Результат.Добавить("Расчетно-кассовый центр, РКЦ");
	Результат.Добавить("Религиозное общество, РОБ");
	Результат.Добавить("Религиозная организация, РО");
	
	Результат.Добавить("Садоводческое товарищество, СТ");
	Результат.Добавить("Сельскохозяйственный кооператив, СХК");
	Результат.Добавить("Совместное предприятие, СП");
	Результат.Добавить("Специализированное конструкторское бюро, СКБ");
	Результат.Добавить("Строительно - монтажное управление, СМУ");
	
	Результат.Добавить("Товарищество на вере, ТВ");
	Результат.Добавить("Товарищество собственников жилья, ТСЖ");
	Результат.Добавить("Товарищество с ограниченной ответственностью, ТОО");
	Результат.Добавить("Торговый дом, ТД");
	
	Результат.Добавить("Частное охранное предприятие, ЧОП");
	
	Результат.Добавить("Федеральное государственное унитарное предприятие, ФГУП");
	Результат.Добавить("Федеральное казенное предприятие, ФКП");
	Результат.Добавить("Филиал коммерческого банка, ФКБ");
	Результат.Добавить("Филиал акционерного коммерческого банка, ФАКБ");
	
	Возврат Результат;
	
КонецФункции

// Запоняет реквизиты справочника по строке ИНН
Процедура ЗаполнитьРеквизитыПоИНННаСервере(Объект, ЭтотОбъект, СтрокаИНН, ТекстСправочника) Экспорт
	
	ЭтоЮридическоеЛицо = Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(СтрокаИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(СтрокаИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Справочники.Контрагенты.ЗавершитьЗаполнениеРеквизитовПоИНННаСервере(Объект, 
		ЭтотОбъект, 
		РеквизитыКонтрагента, 
		ЭтоЮридическоеЛицо,
		ТекстСправочника);
	
КонецПроцедуры

Процедура ЗавершитьЗаполнениеРеквизитовПоИНННаСервере(Объект,
	ЭтотОбъект,
	РеквизитыКонтрагента,
	ЭтоЮридическоеЛицо,
	ТекстСправочника) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	
	Если ЭтоЮридическоеЛицо И РеквизитыКонтрагента.ЕГРЮЛ <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента.ЕГРЮЛ);
		
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации["ЮрАдрес" + ТекстСправочника],
			РеквизитыКонтрагента.ЕГРЮЛ.ЮридическийАдрес);
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации["ФактАдрес" + ТекстСправочника],
			РеквизитыКонтрагента.ЕГРЮЛ.ЮридическийАдрес);
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации["Телефон" + ТекстСправочника],
			РеквизитыКонтрагента.ЕГРЮЛ.Телефон);
			
		// Код ИМНС
		Если РеквизитыКонтрагента.ЕГРЮЛ.Свойство("РегистрацияВНалоговомОргане")
			И ПолучитьЗначениеПараметраСтруктуры(
				РеквизитыКонтрагента.ЕГРЮЛ.РегистрацияВНалоговомОргане,
				"Код") <> Неопределено Тогда
			Объект.КодИМНС = РеквизитыКонтрагента.ЕГРЮЛ.РегистрацияВНалоговомОргане.Код;
		КонецЕсли;
		// Код ОГРН
		Объект.ОГРН = РеквизитыКонтрагента.ЕГРЮЛ.РегистрационныйНомер;
	Иначе
		// Код ИМНС
		Если РеквизитыКонтрагента.Свойство("РегистрацияВНалоговомОргане")
			И ПолучитьЗначениеПараметраСтруктуры(
				РеквизитыКонтрагента.РегистрацияВНалоговомОргане,
				"Код") <> Неопределено Тогда
			Объект.КодИМНС = РеквизитыКонтрагента.РегистрацияВНалоговомОргане.Код;
		КонецЕсли;
		// Код ОГРН
		Если РеквизитыКонтрагента.Свойство("РегистрационныйНомер") Тогда	
			Объект.ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект, ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	
	Если
		УправлениеКонтактнойИнформациейСлужебныйПовтИсп.
		КонтактнаяИнформацияОбъектаСодержитКолонкуДействуетС(ЭтотОбъект.Объект.Ссылка)
	Тогда
		Отбор.Вставить("ЭтоИсторическаяКонтактнаяИнформация", Ложь);
	КонецЕсли;
	
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.Значение = УправлениеКонтактнойИнформациейЛокализация
		.КонтактнаяИнформацияИзJSONВXML(СтруктураДанных.КонтактнаяИнформация);
	ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Параметры.СтрокаПоиска) ИЛИ СтрДлина(Параметры.СтрокаПоиска) < 2 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаПоиска = СокрЛП(Параметры.СтрокаПоиска);
	ЕстьПлюс = Ложь;
	Если СтрНачинаетсяС(СтрокаПоиска, "+") Тогда
		СтрокаПоиска = Прав(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		ЕстьПлюс = Истина;
	КонецЕсли;
	НомерТелефона = "";
	ИскатьПоИННТелефон = Истина;
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоиска, , Ложь) Тогда
		НомерТелефона = СтрокаПоиска;
	Иначе
		ИскатьПоИННТелефон = Ложь;
	КонецЕсли;
	
	ПоискПоТелефонуАдресуЭлектроннойПочты = ПраваИНастройкиПользователя.Значение("ПоискПоТелефонуАдресуЭлектроннойПочты");
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Пользователи.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ СотрудникиПользователя
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ &ВводДокументовДляВсехКонтрагентов
	|	И Пользователи.Ссылка = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Кураторы.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ОтобранныеКонтрагенты
	|ИЗ
	|	РегистрСведений.Кураторы КАК Кураторы
	|ГДЕ
	|	Кураторы.Куратор В
	|			(ВЫБРАТЬ
	|				СотрудникиПользователя.Сотрудник КАК Сотрудник
	|			ИЗ
	|				СотрудникиПользователя КАК СотрудникиПользователя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СотрудникиПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	Контрагенты.Наименование КАК Представление,
	|	Контрагенты.Ссылка КАК Значение,
	|	""Наименование"" КАК ПолеПоиска,
	|	Контрагенты.Наименование КАК РезультатПоиска,
	|	1 КАК Признак,
	|	""Наименование"" КАК Префикс
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВводДокументовДляВсехКонтрагентов
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Контрагенты.Ссылка В
	|					(ВЫБРАТЬ
	|						ОтобранныеКонтрагенты.Контрагент
	|					ИЗ
	|						ОтобранныеКонтрагенты)
	|		КОНЕЦ
	|	И (Контрагенты.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|			ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~"")
	|{ГДЕ
	|	Контрагенты.ВидКонтрагента КАК ВидКонтрагента,
	|	Контрагенты.ФормаСобственности КАК ФормаСобственности}";
	Если ИскатьПоИННТелефон Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 10
		|	Контрагенты.Наименование,
		|	Контрагенты.Ссылка,
		|	""ИНН"",
		|	Контрагенты.ИНН,
		|	2,
		|	""ИНН: ""
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВводДокументовДляВсехКонтрагентов
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ Контрагенты.Ссылка В
		|					(ВЫБРАТЬ
		|						ОтобранныеКонтрагенты.Контрагент
		|					ИЗ
		|						ОтобранныеКонтрагенты)
		|		КОНЕЦ
		|	И Контрагенты.ИНН ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
		|{ГДЕ
		|	Контрагенты.ВидКонтрагента КАК ВидКонтрагента,
		|	Контрагенты.ФормаСобственности КАК ФормаСобственности}";
		
		Если ПоискПоТелефонуАдресуЭлектроннойПочты Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 100
			|	КонтрагентыКонтактнаяИнформация.Ссылка.Представление,
			|	КонтрагентыКонтактнаяИнформация.Ссылка,
			|	КонтрагентыКонтактнаяИнформация.Тип,
			|	КонтрагентыКонтактнаяИнформация.Представление,
			|	3,
			|	""тел: ""
			|ИЗ
			|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
			|ГДЕ
			|	ВЫБОР
			|			КОГДА &ВводДокументовДляВсехКонтрагентов
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ КонтрагентыКонтактнаяИнформация.Ссылка В
			|					(ВЫБРАТЬ
			|						ОтобранныеКонтрагенты.Контрагент
			|					ИЗ
			|						ОтобранныеКонтрагенты)
			|		КОНЕЦ
			|	И КонтрагентыКонтактнаяИнформация.НомерТелефона ПОДОБНО &НомерТелефона СПЕЦСИМВОЛ ""~""
			|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)";
		КонецЕсли;
	КонецЕсли;
	
	Если ПоискПоТелефонуАдресуЭлектроннойПочты Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 100
			|	КонтрагентыКонтактнаяИнформация.Ссылка.Представление,
			|	КонтрагентыКонтактнаяИнформация.Ссылка,
			|	ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты),
			|	КонтрагентыКонтактнаяИнформация.АдресЭП,
			|	4,
			|	""эл. почта: ""
			|ИЗ
			|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
			|ГДЕ
			|	ВЫБОР
			|			КОГДА &ВводДокументовДляВсехКонтрагентов
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ КонтрагентыКонтактнаяИнформация.Ссылка В
			|					(ВЫБРАТЬ
			|						ОтобранныеКонтрагенты.Контрагент
			|					ИЗ
			|						ОтобранныеКонтрагенты)
			|		КОНЕЦ
			|	И КонтрагентыКонтактнаяИнформация.АдресЭП ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
			|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	|	ИтоговаяТаблица.Значение КАК Значение
	|ПОМЕСТИТЬ ПервыеЗначения
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Представление КАК Представление,
	|	ИтоговаяТаблица.Значение КАК Значение,
	|	ИтоговаяТаблица.ПолеПоиска КАК ПолеПоиска,
	|	ИтоговаяТаблица.РезультатПоиска КАК РезультатПоиска,
	|	ИтоговаяТаблица.Признак КАК Признак,
	|	ИтоговаяТаблица.Префикс КАК Префикс
	|ИЗ
	|	ПервыеЗначения КАК ПервыеЗначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтоговаяТаблица КАК ИтоговаяТаблица
	|		ПО ПервыеЗначения.Значение = ИтоговаяТаблица.Значение
	|УПОРЯДОЧИТЬ ПО
	|	Признак
	|ИТОГИ
	|	МАКСИМУМ(Представление)
	|ПО
	|	Значение";
	
	Запрос = Новый ПостроительЗапроса(ТекстЗапроса);
	Запрос.ЗаполнитьНастройки();
	Запрос.Параметры.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.Параметры.Вставить("НомерТелефона",
		"%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(НомерТелефона) + "%"
	);
	Запрос.Параметры.Вставить("СтрокаПоиска",
		"%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Параметры.СтрокаПоиска) + "%"
	);
	Запрос.Параметры.Вставить(
		"ВводДокументовДляВсехКонтрагентов",
		ПраваИНастройкиПользователя.Значение("ВводДокументовДляВсехКонтрагентов")
	);
	
	РежимВыбораКонтактов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "РежимВыбораКонтактов", Ложь);
	Запрос.Параметры.Вставить("РежимВыбораКонтактов", РежимВыбораКонтактов);
	
	КонтрагентВладелец = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Контрагент", Неопределено);
	Запрос.Параметры.Вставить("Владелец", КонтрагентВладелец);
	
	ОбластьПоискаПолей = Запрос.ДоступныеПоля;
	
	Для Каждого КлючЗначение Из Параметры.Отбор Цикл
		
		Если ОбластьПоискаПолей.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
			
			НовыйОтбор = Запрос.Отбор.Добавить(КлючЗначение.Ключ, КлючЗначение.Ключ);
			НовыйОтбор.Использование = Истина;
			
			Если ТипЗнч(КлючЗначение.Значение) = Тип("ФиксированныйМассив") Тогда
				
				НовыйОтбор.ВидСравнения = ВидСравнения.ВСписке;
				ЗначениеСписок = Новый СписокЗначений;
				ЗначениеСписок.ЗагрузитьЗначения(Новый Массив(КлючЗначение.Значение));
				НовыйОтбор.Значение = ЗначениеСписок;
				
			Иначе
				
				НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
				НовыйОтбор.Значение = КлючЗначение.Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Выполнить();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если НЕ Запрос.Результат.Пустой() Тогда
		
		Выборка = Запрос.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			ДетальнаяВыборка = Выборка.Выбрать();
			Представления = Новый Массив;
			ЭлементыВыбора = Новый Массив;
			ПредставлениеКонтакта = "";
			
			Если ДетальнаяВыборка.Следующий() Тогда
				
				ПредставлениеКонтакта = СтрШаблон(НСтр("ru = ' (%1)'"),ДетальнаяВыборка.Представление);
				Префикс = ДетальнаяВыборка.Префикс;
				НашлиПоНаименованию = ДетальнаяВыборка.Префикс = "Наименование";
				
				ЭлементВыбора = Новый Структура("КонтактноеЛицо, ТипКИ, ЗначениеКИ");
				ЭлементВыбора.КонтактноеЛицо = Выборка.Значение;
				ЭлементВыбора.ТипКИ = ДетальнаяВыборка.ПолеПоиска;
				ЭлементВыбора.ЗначениеКИ = ДетальнаяВыборка.РезультатПоиска;
				ЭлементыВыбора.Добавить(ЭлементВыбора);
				
				Представление = ДетальнаяВыборка.РезультатПоиска;
				
				Индекс = СтрНайти(НРег(Представление), НРег(Параметры.СтрокаПоиска));
				
				Если Индекс = 0 Тогда
					Если ЭлементВыбора.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон
						Или ЭлементВыбора.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
						// скорее всего представление телефона со () и + и пробелами
						Позиции = Новый Массив;
						ПредставлениеБезСимволов = "";
						Для Итератор = 1 По СтрДлина(Представление) Цикл
							Если Итератор = 1 И Сред(Представление, Итератор, 1) = "+" Тогда
								Позиции.Добавить(Итератор);
								ПредставлениеБезСимволов = ПредставлениеБезСимволов + Сред(Представление, Итератор, 1);
								Продолжить;
							КонецЕсли;
							Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(Представление, Итератор, 1)) Тогда
								Продолжить;
							КонецЕсли;
							Позиции.Добавить(Итератор);
							ПредставлениеБезСимволов = ПредставлениеБезСимволов + Сред(Представление, Итератор, 1);
						КонецЦикла;
						
						Индекс = СтрНайти(НРег(ПредставлениеБезСимволов), НРег(Параметры.СтрокаПоиска));
						
						Если Индекс = 0 Тогда
							Если ЕстьПлюс Тогда
								Индекс = СтрНайти(НРег(ПредставлениеБезСимволов), НРег(СтрокаПоиска));
								Если Индекс = 0 ТОгда
									Представление = Новый ФорматированнаяСтрока(Представление);
								Иначе
									Представление = Новый ФорматированнаяСтрока(
										Лев(Представление, Позиции[Индекс-1] - 1),
										Новый ФорматированнаяСтрока(
											Сред(Представление, Позиции[Индекс-1], Позиции[Индекс-1 + СтрДлина(СтрокаПоиска) - 1] - Позиции[Индекс-1] + 1),
											Новый Шрифт(, , Истина),
											ЦветаСтиля.ЦветАкцентированияАльфаАвто),
										Прав(Представление, СтрДлина(Представление) - Позиции[Индекс-1 + СтрДлина(СтрокаПоиска) - 1])
									);
								КонецЕсли;
							Иначе
								Представление = Новый ФорматированнаяСтрока(Представление);
							КонецЕсли;
						Иначе
							Представление = Новый ФорматированнаяСтрока(
								Лев(Представление, Позиции[Индекс-1] - 1),
								Новый ФорматированнаяСтрока(
									Сред(Представление, Позиции[Индекс-1], Позиции[Индекс-1 + СтрДлина(Параметры.СтрокаПоиска) - 1] - Позиции[Индекс-1] + 1),
									Новый Шрифт(, , Истина),
									ЦветаСтиля.ЦветАкцентированияАльфаАвто),
								Прав(Представление, СтрДлина(Представление) - Позиции[Индекс-1 + СтрДлина(Параметры.СтрокаПоиска) - 1])
							);
						КонецЕсли;
					Иначе
						Представление = Новый ФорматированнаяСтрока(Представление);
					КонецЕсли;
				Иначе
					Представление = Новый ФорматированнаяСтрока(
						Лев(Представление, Индекс-1),
						Новый ФорматированнаяСтрока(Сред(Представление, Индекс, СтрДлина(Параметры.СтрокаПоиска)),
							Новый Шрифт(, , Истина),
							ЦветаСтиля.ЦветАкцентированияАльфаАвто),
						Прав(Представление,СтрДлина(Представление) - (Индекс + СтрДлина(Параметры.СтрокаПоиска) - 1))
					);
				КонецЕсли;
				
				Если Параметры.Свойство("ПоискКонтрагентовСКИ") Тогда
					Пока ДетальнаяВыборка.Следующий() Цикл
						ЭлементВыбора = Новый Структура("КонтактноеЛицо, ТипКИ, ЗначениеКИ");
						ЭлементВыбора.КонтактноеЛицо = Выборка.Значение;
						ЭлементВыбора.ТипКИ = ДетальнаяВыборка.ПолеПоиска;
						ЭлементВыбора.ЗначениеКИ = ДетальнаяВыборка.РезультатПоиска;
						ЭлементыВыбора.Добавить(ЭлементВыбора);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если Не НашлиПоНаименованию Тогда
				Представление = Новый ФорматированнаяСтрока(
					Префикс,
					Символы.НПП,
					Представление,
					ПредставлениеКонтакта
				);
			КонецЕсли;
			Представление = Новый ФорматированнаяСтрока(Представление);
			Если Параметры.Свойство("ПоискКонтрагентовСКИ") Тогда
				ДанныеВыбора.Добавить(ЭлементыВыбора, Представление);
			Иначе
				ДанныеВыбора.Добавить(Выборка.Значение, Представление);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли