///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка справочника "Контрагенты"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РаботаСФормой.МожноУстановитьОтборПоВладельцу(Параметры) Тогда
		
		РаботаСФормой.УстановитьОтборПоВладельцуНаДерево(Дерево, Параметры.Отбор);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанных.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, Элементы.Список);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ПараметрыОтображенияМеток = УправлениеСвойствами.ПараметрыОтображенияМеток();
	ПараметрыОтображенияМеток.ИмяЭлементаДляРазмещенияЛегендыМеток = "ГруппаЛегендаМетки";
	ПараметрыОтображенияМеток.ОтборМеток = Истина;
	ПараметрыОтображенияМеток.ВидОбъектов = Метаданные.Справочники.Контрагенты.ПолноеИмя();

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияМеток", ПараметрыОтображенияМеток);
	ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеСвойствамиАльфаАвто.УстановитьОграничениеОтбораМеток(Список, ПараметрыОтображенияМеток.ВидОбъектов);
	УправлениеСвойствамиАльфаАвто.НастроитьЛегендуМеток(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект); 
	УстановитьПараметрыСписка();
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокКонтрагентов(Список);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами 
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "ОтборПоНаименованию,ОтборНомерТелефона,ОтборEmail,ОтборПоИНН,ДанныеЗаполнения");
	
	ОбновитьСостояниеОтбораПоВидуКонтрагента(Параметры.ВидКонтрагента);
	ОбновитьОтборПоВидуКонтрагентаВСписке(ЭтотОбъект, Истина);
	ОбновитьОтборПоНаименованиюВСписке(ЭтотОбъект);
	ОбновитьОтборПоИННВСписке(ЭтотОбъект);
	ОбновитьОтборПоСсылкеВСписке();
	ОбновитьОтборПоКураторуВСписке();
	
	УстановитьКартинкуДекорацияПоказатьСкрытьПравуюПанельПоиска();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	// ПростаяЭлектроннаяПодпись
	ПараметрыНастройкиФормы = УчастникиПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыНастройкиФормы.ПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
	УчастникиПЭП.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, ПараметрыНастройкиФормы);
	// Конец ПростаяЭлектроннаяПодпись
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервисСПАРКРиски") Тогда
		// Команды1СПАРКРиски
		СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Список, Элементы.Подменю1СПАРКРиски);
		// Конец Команды1СПАРКРиски
	КонецЕсли;
	
	СлужебныеРеквизиты = Новый Структура();
	СлужебныеРеквизиты.Вставить("ПолноеИмяОбъекта",       ЭтаФорма.Список.ОсновнаяТаблица);
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(ЭтаФорма, СлужебныеРеквизиты);
	
	ЭтоГоловнойКонтрагент = Параметры.ЭтоГоловнойКонтрагент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаСписка(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормыСписка(Элементы.Список, ИмяСобытия);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
	Если УправлениеСвойствамиАльфаАвтоКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия) Тогда
		ОбновитьЛегендуМеток();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТолькоКонтрагентыПриИзменении(Элемент)
	
	ОбновитьОтборПоВидуКонтрагентаВСписке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоКонтактыПриИзменении(Элемент)
	
	ОбновитьОтборПоВидуКонтрагентаВСписке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНаименованиюПриИзменении(Элемент)
	
	ОбновитьОтборПоНаименованиюВСписке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИННПриИзменении(Элемент)
	
	ОбновитьОтборПоИННВСписке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборVINПриИзменении(Элемент)
	
	ОбновитьОтборПоСсылкеВСписке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерТелефонаПриИзменении(Элемент)
	
	ОбновитьОтборПоСсылкеВСписке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборГосНомерПриИзменении(Элемент)
	
	ОбновитьОтборПоСсылкеВСписке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборEmailПриИзменении(Элемент)
	
	ОбновитьОтборПоСсылкеВСписке();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовПанелиПоиска
	
&НаКлиенте
Процедура ДекорацияПоказатьСкрытьПравуюПанельПоискаНажатие(Элемент)
	
	ПоказатьСкрытьПравуюПанельПоискаНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодключитьОбработчикОжидания("ОбновитьСтраницуДополнительнойИнформации", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Группа Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеСправочникаКонтрагенты");
		
	Иначе
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыСправочникаКонтрагенты");
		
	КонецЕсли;
	// Конец ОценкаПроизводительности 
	
	Если Не Копирование И Не Группа И ЗначениеЗаполнено(ДанныеЗаполнения) Тогда 
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
	Если ЭтоГоловнойКонтрагент Тогда
		Отказ = Истина;
		
		ОповещениеОСозданииНовогоОбъекта = Новый ОписаниеОповещения("Подключаемый_РезультатСозданияКонтрагента",
			ЭтотОбъект);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_РезультатСозданияКонтрагента",
			ЭтотОбъект,
			Новый Структура("ОповещениеОСозданииНовогоОбъекта", ОповещениеОСозданииНовогоОбъекта));
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента",
			,
			ВладелецФормы,
			ВладелецФормы,
			,,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент.ТекущиеДанные, "ЭтоГруппа")
		И Элемент.ТекущиеДанные.ЭтоГруппа
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыСправочникаКонтрагенты");
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

// Обработчик события возникающего на сервере при обновлении пользовательских настроек списка.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	РаботаСФормой.ВывестиПользовательскиеОтборы(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанных.ПриПолученииДанныхНаСервере(Настройки, Строки);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриПолученииДанныхНаСервере(Настройки, Строки);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСписка()
	
	Список.Параметры.УстановитьЗначениеПараметра("Пусто", "");
	Список.Параметры.УстановитьЗначениеПараметра("НеПодтверждено", НСтр("ru = 'Не подтверждено'"));
	Список.Параметры.УстановитьЗначениеПараметра("Подтверждено", НСтр("ru = 'Подтверждено'"));
	Список.Параметры.УстановитьЗначениеПараметра("Отказано", НСтр("ru = 'Отказано'"));
	Список.Параметры.УстановитьЗначениеПараметра("Организация", Справочники.Организации.ОрганизацияПоУмолчанию());
	Список.Параметры.УстановитьЗначениеПараметра("Период", КонецДня(ТекущаяДатаСеанса()));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницуДополнительнойИнформации()

	Если Элементы.ДополнительнаяИнформацияСтраницы.Видимость Тогда
		ОбновитьСвязанныеСписки();
		ОбновитьДанныеНаСтраницеКонтактнойИнформации();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.Дерево.ТекущаяСтрока;
	Если ТекСтрока <> Элементы.Список.ТекущийРодитель 
		И (ЗначениеЗаполнено(ТекСтрока) 
		ИЛИ ЗначениеЗаполнено(Элементы.Список.ТекущийРодитель)) Тогда 
		Элементы.Список.ТекущийРодитель = ТекСтрока;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеЛица

&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
		
		ЗначениеОтбора = Неопределено;
		
	Иначе
		
		ЗначениеОтбора = Элементы.КонтактныеЛица.ТекущиеДанные.КонтактноеЛицо;
		
	КонецЕсли;
	
	КонтактнаяИнформацияКонтактногоЛица.Отбор.Элементы.Очистить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КонтактнаяИнформацияКонтактногоЛица,
		"Ссылка",
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьСкрытьДерево(Команда)
	
	ВидимостьДерева = Не ВидимостьДерева;	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяИнформацияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	КонтекстНажатия = РасширеннаяИнформацияКлиент.НовыйКонтекстНажатия(ЭтотОбъект, Элементы.Список);
	КонтекстНажатия.ПолноеИмяОбъекта = "Справочник.Контрагенты";
	РасширеннаяИнформацияКлиент.Нажатие(КонтекстНажатия, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияНадписьНажатие(Элемент)
	
	УстановитьВидимостьДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияКартинкаНажатие(Элемент)
	
	УстановитьВидимостьДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрИзображений(Команда)
	
	ДвижениеПросмотра = ?(СтрНайти(Команда.Имя, "Вперед"), "Вперед", "Назад");
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	ПолучитьСледующееИзображение(ТекущаяСтрока, ДвижениеПросмотра);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);

КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
&НаКлиенте
Процедура Подключаемый_ПоказыватьСоСкрытымиПДн(Команда)
	ЗащитаПерсональныхДанныхКлиент.ПоказыватьСоСкрытымиПДн(ЭтотОбъект, Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_УстановитьВидимостьЛегендыМеток(Команда)
	УстановитьВидимостьЛегендыМеток();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЛегендыМеток()
	УправлениеСвойствами.УстановитьВидимостьЛегендыМеток(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОтбораПоМеткам(Команда)
	
	Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = "ОтборПоМеткам" Тогда
			Если ЭлементОтбора <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ЭлементОтбора.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение[0].Значение;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УправлениеСвойствамиКлиент.УстановитьОтборПоМетке(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЛегендуМеток()
	УправлениеСвойствамиАльфаАвто.ОбновитьЛегендуМеток(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Отборы

&НаСервере
Процедура ОбновитьСостояниеОтбораПоВидуКонтрагента(ВидКонтрагента)
	
	ТолькоКонтакты = Истина;
	ТолькоКонтрагенты = Истина;
	
	Если ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.КонтактноеЛицо") Тогда
	
		ТолькоКонтрагенты = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборПоВидуКонтрагентаВСписке(Форма, ПриСозданииНаСервере = Ложь)
	
	Если ПриСозданииНаСервере Тогда
		
		ОбновитьОтборПоВидуКонтрагентаВСпискеПриСозданииНаСервере(Форма);		
		
	КонецЕсли;
	
	Если Форма.ТолькоКонтакты И Форма.ТолькоКонтрагенты Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ВидКонтрагента");
		
	ИначеЕсли Не Форма.ТолькоКонтакты И Не Форма.ТолькоКонтрагенты Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ВидКонтрагента");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список,
			"ВидКонтрагента",
			ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ПустаяСсылка"),
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный
		);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ВидКонтрагента");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список,
			"ВидКонтрагента",
			ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.КонтактноеЛицо"),
			?(Форма.ТолькоКонтрагенты, ВидСравненияКомпоновкиДанных.НеРавно, ВидСравненияКомпоновкиДанных.Равно),
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный
		);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборПоНаименованиюВСписке(Форма)
	
	Если ПустаяСтрока(Форма.ОтборПоНаименованию) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "Наименование");
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Наименование",
		Форма.ОтборПоНаименованию,
		ВидСравненияКомпоновкиДанных.Содержит,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборПоИННВСписке(Форма)

	Если ПустаяСтрока(Форма.ОтборПоИНН) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ИНН");
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"ИНН",
		Форма.ОтборПоИНН,
		ВидСравненияКомпоновкиДанных.Содержит,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборПоСсылкеВСписке()
	
	ОтобранныеКонтрагенты = ПолучитьКонтрагентовПоУстановленнымОтборам();
	
	Если ОтобранныеКонтрагенты = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Ссылка");
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка",
		ОтобранныеКонтрагенты,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтрагентовПоУстановленнымОтборам()
	
	ЕстьОтборПоVIN            = НЕ ПустаяСтрока(ОтборVIN);
	ЕстьОтборПоГосНомеру      = НЕ ПустаяСтрока(ОтборГосНомер);
	ЕстьОтборПоEmail          = НЕ ПустаяСтрока(ОтборEmail);
	
	ВыполнитьЗапрос = Ложь;
	
	ТекстТелефон      = "";
	ТекстEmail        = "";
	ТелефонСоединение = "";
	EmailСоединение   = "";
	ТекстСоединения   = "";
	ТекстАвто         = "";
	ТелефонУсловие    = "Истина";
	EmailУсловие      = "Истина";
	ТекстУсловия      = "Истина";
	
	ШаблонЗапроса = "
		|%1
		|%2
		|%7
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|	%3
		|	%4
		|	%8
		|ГДЕ
		|	%5
		|	И %6
		|	И %9";
	
	ТелефонДляПоиска = ПодготовитьТелефонКПоиску(ОтборНомерТелефона);
	
	Если Не ПустаяСтрока(ТелефонДляПоиска) Тогда
		
		ТекстТелефон = "ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтрагентыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ПОМЕСТИТЬ Телефоны
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.НомерТелефона ПОДОБНО " + """%" + ТелефонДляПоиска + "%""" + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		ТелефонСоединение = "ЛЕВОЕ СОЕДИНЕНИЕ Телефоны КАК Телефоны
			|		ПО (Контрагенты.Ссылка = Телефоны.Ссылка)";
		
		ТелефонУсловие = "Телефоны.НомерТелефона ПОДОБНО " + """%" + ТелефонДляПоиска + "%""";
		
		ВыполнитьЗапрос = Истина;
		
	КонецЕсли;
	
	Если ЕстьОтборПоEmail Тогда
		
		ТекстEmail = "ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтрагентыКонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ПОМЕСТИТЬ ЭП
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.АдресЭП ПОДОБНО " + """%" + ОтборEmail + "%""" + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		EmailСоединение = "ЛЕВОЕ СОЕДИНЕНИЕ ЭП КАК ЭП
			|		ПО (Контрагенты.Ссылка = ЭП.Ссылка)";
		
		EmailУсловие = "ЭП.АдресЭП ПОДОБНО " + """%" + ОтборEmail + "%""";
		
		ВыполнитьЗапрос = Истина;
		
	КонецЕсли;
	
	Если ЕстьОтборПоVIN ИЛИ ЕстьОтборПоГосНомеру Тогда
		
		ТекстАвто = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫРАЗИТЬ(АвтомобилиСрезПоследних.Значение КАК Справочник.Контрагенты) КАК Ссылка,
			|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль
			|ПОМЕСТИТЬ АвтомобилиКонтрагентов
			|ИЗ
			|	РегистрСведений.Автомобили.СрезПоследних(
			|			,
			|			ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.Хозяин)) КАК АвтомобилиСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		
		Если ЕстьОтборПоVIN Тогда
			
			ТекстУсловия = "АвтомобилиКонтрагентов.Автомобиль.VIN ПОДОБНО " + """%" + ОтборVIN + "%""";
			
			ТекстСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ АвтомобилиКонтрагентов КАК АвтомобилиКонтрагентов
				|		ПО (Контрагенты.Ссылка = АвтомобилиКонтрагентов.Ссылка)";
			
		КонецЕсли;
		
		Если ЕстьОтборПоГосНомеру Тогда
		
			ТекстАвто = ТекстАвто + "
				|ВЫБРАТЬ
				|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль,
				|	АвтомобилиСрезПоследних.Значение КАК ГосНомер
				|ПОМЕСТИТЬ НомераАвтомобилей
				|ИЗ
				|	РегистрСведений.Автомобили.СрезПоследних(
				|			,
				|			ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ГосНомер)
				|				И Значение ПОДОБНО " + """%" + ОтборГосНомер + "%""" + " ) КАК АвтомобилиСрезПоследних
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|
				|ВЫБРАТЬ
				|	АвтомобилиКонтрагентов.Ссылка КАК Ссылка,
				|	АвтомобилиКонтрагентов.Автомобиль КАК Автомобиль,
				|	НомераАвтомобилей.ГосНомер КАК ГосНомер
				|ПОМЕСТИТЬ КонтрагентыСАвто
				|ИЗ
				|	АвтомобилиКонтрагентов КАК АвтомобилиКонтрагентов
				|		ЛЕВОЕ СОЕДИНЕНИЕ НомераАвтомобилей КАК НомераАвтомобилей
				|		ПО АвтомобилиКонтрагентов.Автомобиль = НомераАвтомобилей.Автомобиль
				|;";
			
			ТекстСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ КонтрагентыСАвто КАК КонтрагентыСАвто
				|		ПО (Контрагенты.Ссылка = КонтрагентыСАвто.Ссылка)";
			
			ТекстУсловия = СтрЗаменить(ТекстУсловия, "АвтомобилиКонтрагентов", "КонтрагентыСАвто") +
			" И КонтрагентыСАвто.ГосНомер ПОДОБНО" + """%" + ОтборГосНомер + "%""";
			
		КонецЕсли;
		
		ВыполнитьЗапрос = Истина;
		
	КонецЕсли;
	
	Если НЕ ВыполнитьЗапрос Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ШаблонЗапроса = СтрШаблон(
		ШаблонЗапроса,
		ТекстТелефон,
		ТекстEmail,
		ТелефонСоединение,
		EmailСоединение,
		ТелефонУсловие,
		EmailУсловие,
		ТекстАвто,
		ТекстСоединения,
		ТекстУсловия
	);
	
	Запрос = Новый Запрос(ШаблонЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		РезультатПоиска = Новый Массив;
		РезультатПоиска.Добавить(Справочники.Контрагенты.ПустаяСсылка());
		
		Возврат РезультатПоиска;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодготовитьТелефонКПоиску(Знач Телефон)
	
	СимволыЗамены = СтрРазделить("-,+,(,), ", ",");
	
	Для Каждого СимволЗамены Из СимволыЗамены Цикл
		
		Телефон = СтрЗаменить(Телефон, СимволЗамены, "");
		
	КонецЦикла;
	
	Возврат Телефон;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтборПоКураторуВСписке()
	
	Если
		ПраваИНастройкиПользователя.Значение("ВводДокументовДляВсехКонтрагентов")
		Или Не Элементы.Список.РежимВыбора
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Кураторы.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.Кураторы КАК Кураторы
		|ГДЕ
		|	Кураторы.Куратор = &Сотрудник"
	);
	Запрос.УстановитьПараметр(
		"Сотрудник",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "Сотрудник")
	);
	
	ЗначениеОтбора = Новый СписокЗначений;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ЗначениеОтбора.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контрагент"));
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка",
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		НСтр("ru = 'По куратору'"),
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборПоВидуКонтрагентаВСпискеПриСозданииНаСервере(Форма)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли  

	ТолькоКонтакты = Истина;	
	ЗначениеОтбора = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.КонтактноеЛицо");
	ЭлементыОтбора = Форма.Список.КомпоновщикНастроек.Настройки.Отбор.Элементы;	
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидКонтрагента") Тогда			
			
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("ПеречислениеСсылка.ВидыКонтрагентов") Тогда 
				
				ТолькоКонтакты = ?(ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора, Ложь, Истина);
				
			КонецЕсли;
			
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				
				ТолькоКонтакты = ?(ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(ЗначениеОтбора) = Неопределено, Ложь, Истина);
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТолькоКонтакты Тогда
		Форма.ТолькоКонтакты = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ПанельПоиска
	
&НаСервере
Процедура ПоказатьСкрытьПравуюПанельПоискаНаСервере()
	
	ВидимостьСписка = Элементы.ПанельПоиска.Видимость; 
	Элементы.ПанельПоиска.Видимость = НЕ ВидимостьСписка;
	УстановитьКартинкуДекорацияПоказатьСкрытьПравуюПанельПоиска()
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуДекорацияПоказатьСкрытьПравуюПанельПоиска()

	ВидимостьСписка = Элементы.ПанельПоиска.Видимость; 

	Если ВидимостьСписка Тогда
		
		Элементы.ДекорацияПоказатьСкрытьПравуюПанельПоиска.Картинка = БиблиотекаКартинок.СтрелкаВправо;
		
	Иначе
		
		Элементы.ДекорацияПоказатьСкрытьПравуюПанельПоиска.Картинка = БиблиотекаКартинок.СтрелкаВлево;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьТипКлиента()    
	
	ТипКлиента = "";
	
	УстановитьПривилегированныйРежим(Истина);
    Соединения = ПолучитьСеансыИнформационнойБазы();
	УстановитьПривилегированныйРежим(Ложь);
	
    Для Каждого ТекущееСоединение Из Соединения Цикл
	    Если ТекущееСоединение.НомерСоединения = НомерСоединенияИнформационнойБазы() Тогда 
			ТипКлиента = ПредставлениеПриложения(ТекущееСоединение.ИмяПриложения);	   
		КонецЕсли;
	КонецЦикла;
   
   Возврат ТипКлиента; 
   
КонецФункции

// Команды1СПАРКРиски
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец Команды1СПАРКРиски

&НаКлиенте
Процедура ОбновитьСвязанныеСписки()
	
	Если Элементы.Список.ТекущиеДанные = Неопределено
		ИЛИ НЕ Элементы.Список.ТекущиеДанные.Свойство("Ссылка") Тогда
		
		ЗначениеОтбора = Неопределено;
		
	Иначе
		
		ЗначениеОтбора = Элементы.Список.ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Автомобили,
		"Значение",
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КонтактныеЛица,
		"Владелец",
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
	// Событие активизации строки в поле КонтактнаяИнформацияКонтактногоЛица отрабатывает не всегда
	// поэтому установим отбор по КИ в неопределено и обновим в корректное значение уже по событию активизации.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КонтактнаяИнформацияКонтактногоЛица,
		"Ссылка",
		Неопределено,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ПодтверждающиеДокументы,
		"Владелец",
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ДисконтныеКарты,
		"Объект",
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);

	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСледующееИзображение(ТекущаяСтрока, ДвижениеПросмотра)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ПолучитьСледующееИзображение(ЭтаФорма, ДвижениеПросмотра, ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСтраницеКонтактнойИнформации()
	
	ТипКлиентаСтрокой = ПолучитьТипКлиента();
	
	Если ТипКлиентаСтрокой = "Веб-клиент" Тогда 
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаРасширеннаяИнформация.Видимость = Истина;

	ЭтотОбъект.ТекущаяКартинка = Справочники.КонтрагентыПрисоединенныеФайлы.ПустаяСсылка();
	РаботаСФайламиАльфаАвтоВызовСервера.ВывестиТекущееИзображение(ЭтотОбъект, Элементы.Список.ТекущаяСтрока);
	РасширеннаяИнформацияВызовСервера.СписокПриАктивизацииСтроки(ЭтотОбъект, Элементы.Список.ТекущаяСтрока);
	
	ЕстьКартинка = ЗначениеЗаполнено(ЭтотОбъект.ТекущаяКартинка);
	Элементы.ГруппаКартинки.Видимость = ЕстьКартинка;
	Элементы.ГруппаПереключательКартинок.Видимость = ЕстьКартинка;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДополнительнойИнформации()
	
	ВидимостьСписка = Элементы.ДополнительнаяИнформацияСтраницы.Видимость;
	Элементы.ДополнительнаяИнформацияСтраницы.Видимость = Не ВидимостьСписка;
	
	Если ВидимостьСписка Тогда		
		
		Элементы.ДополнительнаяИнформацияКартинка.Картинка = БиблиотекаКартинок.СтрелкаВправо24;		
		
	Иначе
		
		Элементы.ДополнительнаяИнформацияКартинка.Картинка = БиблиотекаКартинок.СтрелкаВниз24;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатСозданияКонтрагента(
		Результат,
		ДополнительныеПараметры = Неопределено) Экспорт
		
	Если НЕ Результат = Неопределено Тогда
		
		ОбработкаЗаписиНового(Результат, ЭтаФорма, Истина);
		
	КонецЕсли;
		
КонецПроцедуры

#Область ОбработчикиАльфаАвто

#Область ПечатьРеестра

&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыПечатиРеестра(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыПечатиРеестраНаСервере(ПараметрыВыполнения, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыПечатиРеестраНаСервере(ПараметрыВыполнения, ДополнительныеПараметры)
	
	ПечатьРеестраДокументов.ПолучитьНастройкиСКД(ЭтотОбъект.Элементы.Список, ПараметрыВыполнения);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
