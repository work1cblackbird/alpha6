///////////////////////////////////////////////////////////////////////////////
// Модуль формы выбора кураторов
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получим контрагента
	Если Параметры.Свойство("Контрагент") Тогда
		Контрагент = Параметры.Контрагент;
	КонецЕсли;
	
	// Получим контрагента
	Если Параметры.Свойство("Договор") Тогда
		Договор = Параметры.Договор;
		Элементы.СписокДоговор.Видимость = Ложь;
	КонецЕсли;
	
	// Составим актуальный список кураторов и договоров
	Если Параметры.Свойство("СписокКураторов") И Параметры.СписокКураторов.Количество() > 0 Тогда
		
		Для каждого Строка Из Параметры.СписокКураторов Цикл
			
			НоваяСтрока = Список.Добавить();
			НоваяСтрока.Куратор = Строка.Куратор;
			Если НЕ Параметры.Свойство("Договор") Тогда
				НоваяСтрока.Договор = Строка.Договор;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ОбновитьСписокКураторов();
	КонецЕсли;
	
	// Настроим заголовок Формы
	Заголовок = "Кураторы: " + Контрагент;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Произведем настройку параметров отображения кнопок командной панели списка
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Список");
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если УправлениеДиалогомКлиент.ПроверитьМодифицированностьДанныхПриЗакрытии(ЭтотОбъект,Отказ,Новый ОписаниеОповещения("Подключаемый_ОбработкаПримененияИзменений", ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ПередЗакрытием()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при выполнении команды "ЗавершитьПодбор".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Применить(Команда)
	
	Подключаемый_ОбработкаПримененияИзменений();
	
КонецПроцедуры //Применить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет список кураторов
&НаСервере
Процедура ОбновитьСписокКураторов()
	
	Список.Очистить();
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Кураторы.Куратор КАК Куратор,
	               |	Кураторы.Договор
	               |ИЗ
	               |	РегистрСведений.Кураторы КАК Кураторы
	               |ГДЕ
	               |	Кураторы.Контрагент = &Владелец
	               |	" + ?(ЗначениеЗаполнено(Договор),"И Кураторы.Договор = &Договор","")+"";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Если ЗначениеЗаполнено(Договор) Тогда
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;
	
	// Выведем кураторов в список
	Список.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ОбновитьСписокКураторов()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаПримененияИзменений(РезультатОповещения = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Модифицированность = Ложь;
	ОповеститьОВыборе(Список);
	
КонецПроцедуры // Подключаемый_ОбработкаПримененияИзменений()

#КонецОбласти

