#Область ОбработчикиСобытийФормы

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт; // ФормаКлиентскогоПриложения - ссылка на форму-индикатор длительной операции. 
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Заполним телефон контрагента
	ТелефонКонтрагента = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТелефонКонтрагента", Неопределено);
	
	Если НЕ ТелефонКонтрагента = Неопределено И ЗначениеЗаполнено(ТелефонКонтрагента) Тогда
		НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		XDTOИнформация = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOПоПредставлению(
			ТелефонКонтрагента, Перечисления.ТипыКонтактнойИнформации.Телефон);
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOВXML(XDTOИнформация);
		НоваяСтрока.Представление = ТелефонКонтрагента;
	КонецЕсли;
	
	// Заполним АдресЭП и Адрес контрагента
	АдресЭПКонтрагента = ПолучитьЗначениеПараметраСтруктуры(Параметры, "АдресЭП", Неопределено);
	АдресКонтрагента   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Адрес",   Неопределено);
	
	Если НЕ АдресЭПКонтрагента = Неопределено И ЗначениеЗаполнено(АдресЭПКонтрагента) Тогда
		НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		НоваяСтрока.Представление = АдресЭПКонтрагента;
		XDTOИнформация = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOПоПредставлению(
			АдресЭПКонтрагента, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOВXML(XDTOИнформация);
	КонецЕсли;
	
	Если НЕ АдресКонтрагента = Неопределено И ЗначениеЗаполнено(АдресКонтрагента) Тогда
		// ЮрАдресКонтрагента
		НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		НоваяСтрока.Представление = АдресКонтрагента;
		XDTOИнформация = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOПоПредставлению(
			АдресКонтрагента, Перечисления.ТипыКонтактнойИнформации.Адрес);
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOВXML(XDTOИнформация);
		// ФактАдресКонтрагента
		НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		НоваяСтрока.Представление = АдресКонтрагента;
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOВXML(XDTOИнформация);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ПараметрыОтображенияМеток = УправлениеСвойствами.ПараметрыОтображенияМеток();
	ПараметрыОтображенияМеток.ИмяЭлементаДляРазмещенияМеток = "ГруппаМетки";
	ПараметрыОтображенияМеток.МаксимумМетокНаФорме = 3;
	ПараметрыОтображенияМеток.ВариантОтображенияМеток = Перечисления.ВариантыОтображенияМеток.Надпись;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияМеток", ПараметрыОтображенияМеток);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();	
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	
    УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// ПростаяЭлектроннаяПодпись
	ПараметрыНастройкиФормы = УчастникиПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаЭлемента();
	ПараметрыНастройкиФормы.ПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
	УчастникиПЭП.ПриСозданииНаСервере_ФормаЭлемента(ЭтотОбъект, ПараметрыНастройкиФормы);
	// Конец ПростаяЭлектроннаяПодпись
	
	// Заполним реквизиты при создании из карточки контрагента
	СозданиеКарточкиИзДосьеКонтрагента = ПолучитьЗначениеПараметраСтруктуры(Параметры, "РаботаСКонтрагентамиСозданиеИзДосьеКонтрагента", ЛОЖЬ);
	ТекстЗаполнения   				   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТекстЗаполнения", "");
	
	Если СозданиеКарточкиИзДосьеКонтрагента 
		И ЗначениеЗаполнено(ТекстЗаполнения) Тогда 
		
		Если СтрДлина(ТекстЗаполнения) = 10 Тогда
			Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
		Иначе
			Объект.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
		КонецЕсли;
		
		Справочники.Контрагенты.ЗаполнитьРеквизитыПоИНННаСервере(Объект, 
			ЭтотОбъект, 
			ТекстЗаполнения,
			"Контрагента");
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ДобавитьКомандуПроверкиКонтрагента();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ФормаСобственности = Неопределено;
	
	Если Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		
		ФормаСобственности = Перечисления.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо;
		
	ИначеЕсли Объект.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
		
		ФормаСобственности = Перечисления.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель;
		
	КонецЕсли;
		
	Если ФормаСобственности <> Неопределено Тогда 
		
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Объект,
			Объект.Ссылка,
			ФормаСобственности,
			ПараметрыПроцедуры
		);
		
		// Команды1СПАРКРиски
		СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Объект, Элементы.Подменю1СПАРКРиски);
		// Конец Команды1СПАРКРиски
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	НеобходимоОповеститьПослеЗаписи = Параметры.НеобходимоОповеститьПослеЗаписи;
	
	РазрешитьВводКонтрагентаБезРекламы = ПравоПользователя("РазрешитьВводКонтрагентаБезРекламы", Объект);
	
	// Инициализируем меню выбора формы собственности
	ИнициализироватьМенюВыбораФормыСобственности();
	УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
	
	КонтактнаяИнформацияТекущегоКонтакта
		.Параметры
		.УстановитьЗначениеПараметра("ТекущийКонтакт", Справочники.Контрагенты.ПустаяСсылка());
	ЗаполнитьИзКонтактнойИнформацииСотрудника(ПолучитьЗначениеПараметраСтруктуры(Параметры.ЗначенияЗаполнения, "КИ"));
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, Объект.Наименование);	
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	
	ВыполнятьПоискДублей = ПравоПользователя("ВыполнятьПоискДублейПередЗаписьюНовогоКонтрагента", Объект)
		<> Перечисления.ВидыКонтроля.НеКонтролировать;
	
	КэшКПП = Справочники.Контрагенты.СформироватьКПППоУмолчанию(Объект);
	
	// Сформируем формат представления колонки списка "Год выпуска"
	Элементы.ГодВыпускаАвтомобиля.ФорматРедактирования = АвтомобилиСервер
		.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Объект);
	Элементы.АвтомобильГодВыпуска.Формат = Элементы.ГодВыпускаАвтомобиля.ФорматРедактирования;
	ЗаполнитьСтарыеНаименования();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов   
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбновитьАвтомобилиКонтрагента();
		
	Иначе
		
		Элементы.СведенияОСогласииГруппа.Видимость = Ложь; 
		// Маркировка
		МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект); 
		// КонецМаркровка
		НастроитьПараметрыВыбораЭлементовФормы();
				
	КонецЕсли;
		
	УправлениеДиалогомНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ВидКонтрагентаСПАРКРиски() <> Неопределено Тогда
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
    ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов 
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НаименованиеПолноеПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормы(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных

	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Изменение согласия на обработку персональных данных
	Если ИмяСобытия = "ИзменениеСогласияНаОбработкуПерсональныхДанных" Тогда
		
		УстановитьСведенияДействующегоСогласия();
		Возврат;
		
	КонецЕсли;
	
	// Обновим список автомобилей
	Если ИмяСобытия = "АвтомобильИзменен" Тогда
		
		ТекущиеДанные = Элементы.Автомобили.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если Параметр = ТекущиеДанные.Автомобиль Тогда
				
				АвтомобилиПриАктивизацииСтроки(Элементы.Автомобили);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "УстановкаОсновногоСчета" И Параметр.Владелец = Объект.Ссылка Тогда
		
		Объект.ОсновнойБанковскийСчет = Параметр.НовыйОсновнойСчет;
		
		Если НЕ Модифицированность Тогда
			Записать(Новый Структура("УстановкаОсновногоСчета"));
		КонецЕсли;
		
		УИН = "";
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
			УИН = Источник.УникальныйИдентификатор;
		КонецЕсли;
		
		Оповестить("УстановкаОсновногоСчетаВыполнена", УИН);
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписанГоловнойКонтрагент" И ЗначениеЗаполнено(Параметр) Тогда
	
		Объект.ГоловнойКонтрагент = Параметр;
	
	КонецЕсли;
	
	// АльфаАвто.РаботаСФайлами
	РаботаСФайламиАльфаАвтоКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация 
	
	// Маркировка
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект); 
	// КонецМаркровка
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	ТекущаяКартинка = Объект.ФайлКартинки;
	РаботаСФайламиАльфаАвтоВызовСервера.ВывестиТекущееИзображение(ЭтотОбъект);
	
	УстановитьСведенияДействующегоСогласия();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	РаботаСФормойКлиент.ЗамерВремениЗапись("СкладыКомпании");
	
	Если ПроверятьПараметры(ПараметрыЗаписи, Отказ) Тогда
		
		ТекстСообщения = "";
		СпособКонтроляИНН = Неопределено;
		// Так как серверный вызов запрещен, передадим в структуре поля для проверки
		СтруктураОбъекта = Новый Структура();
		СтруктураОбъекта.Вставить("ИНН",                Объект.ИНН);
		СтруктураОбъекта.Вставить("КПП",                Объект.КПП);
		СтруктураОбъекта.Вставить("КодПоОКПО",          Объект.КодПоОКПО);
		СтруктураОбъекта.Вставить("ФормаСобственности", Объект.ФормаСобственности);
		
		ПроверкаКорректностиИНН_КПП_ОКПО(ТекстСообщения, СпособКонтроляИНН, СтруктураОбъекта);
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			
			Отказ = Истина;
			
			Если СпособКонтроляИНН = ПредопределенноеЗначение("Перечисление.ВидыКонтроля.Запрещать") Тогда
				
				ПоказатьПредупреждение(, ТекстСообщения);
				
			ИначеЕсли СпособКонтроляИНН = ПредопределенноеЗначение("Перечисление.ВидыКонтроля.Предупреждать") Тогда
				
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"Подключаемый_ОбработкаРезультатаПроверкиИНН",
					ЭтотОбъект,
					ПараметрыЗаписи
				);
				СписокОтветов = Новый СписокЗначений;
				СписокОтветов.Добавить("Записать и закрыть");
				СписокОтветов.Добавить("Записать");
				СписокОтветов.Добавить("Отмена");
				ПоказатьВопрос(
					ОбработчикОповещения,
					ТекстСообщения + Символы.ПС + НСтр("ru = 'Продолжить запись?'"),
					СписокОтветов,
					,
					"Отмена",
					НСтр("ru = 'Проверка ИНН'")
				);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если
		ВыполнятьПоискДублей
		И (Не ПараметрыЗаписи.Свойство("ПропуститьПроверкуДублей")
			Или ПараметрыЗаписи.Свойство("ПропуститьПроверкуДублей")
			И НЕ ПараметрыЗаписи.ПропуститьПроверкуДублей)
	Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Сотрудник",                     "=");
		СтруктураПоиска.Вставить("Наименование",                  "Подобно");
		СтруктураПоиска.Вставить("НаименованиеПолное",            "Подобно");
		СтруктураПоиска.Вставить("Контакт_Телефон",               "Подобно");
		СтруктураПоиска.Вставить("Контакт_Адрес",                 "Подобно");
		СтруктураПоиска.Вставить("Контакт_АдресЭлектроннойПочты", "Подобно");
		
		Если ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
			
			СтруктураПоиска.Вставить(
				"УсловиеДляФизЛица",
				Новый Структура("Наименование,НаименованиеПолное,ДатаРождения", "Подобно", "Подобно", "=")
			);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Объект.ИНН) Тогда
			
			СтруктураПоиска.Вставить("УсловиеПоКПП", Новый Структура("ИНН,КПП", "=", "="));
			
			Если ПустаяСтрока(Объект.КПП) Тогда
				
				СтруктураПоиска.Вставить("ИНН", "=");
				
			КонецЕсли;
			
		КонецЕсли;
		
		СписокКонтактов = ЗаполнитьТаблицуКонтактов();
		СписокДублей = НайтиДубли(СтруктураПоиска, СписокКонтактов, Объект);
		
		Если ЗначениеЗаполнено(СписокДублей) Тогда
			
			ПараметрыФормы = Новый Структура("СписокДублей, Объект", СписокДублей, Объект);
			ОткрытьФорму(
				"Справочник.Контрагенты.Форма.ПоискДублейКонтрагентов",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияПроверкаДублей", ЭтотОбъект, ПараметрыЗаписи),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Спросим про запись контактного лица (если есть).
	Если
		ЗначениеЗаполнено(ДанныеРуководителя)
		И Не ПараметрыЗаписи.Свойство("ЗаписьКонтактногоЛица")
		И Не Отказ
	Тогда
		
		Отказ = Истина;
		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаЗаписиКонтактногоЛица", ЭтотОбъект, ПараметрыЗаписи);
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Добавить контактное лицо?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			,
			НСтр("ru = 'Контактное лицо'"));
		Возврат;
		
	КонецЕсли;
	
	// Проверим право записи без источника информации
	Если
		Не ЗначениеЗаполнено(Объект.РекламныйИсточник)
		И Объект.ВидКонтрагента <> ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ПодотчетноеЛицо")
		И Не ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "НеПроверятьИИ", Ложь)
		И РазрешитьВводКонтрагентаБезРекламы = ПредопределенноеЗначение("Перечисление.ВариантыОтветов.Спрашивать")
		И Не Отказ
	Тогда
		
		Отказ = Истина;
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаВопросаЗаписиБезИИ",
			ЭтотОбъект,
			ПараметрыЗаписи
		);
		СписокОтветов = Новый СписокЗначений;
		СписокОтветов.Добавить("ЗаписатьИЗакрыть", НСтр("ru = 'Записать и закрыть'"));
		СписокОтветов.Добавить("Записать");
		СписокОтветов.Добавить("Отмена");
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Не указан источник информации.'")
				+ Символы.ПС
				+ НСтр("ru = 'Продолжить запись?'"),
			СписокОтветов,
			0,
			"Отмена",
			НСтр("ru = 'Сохранять без источника информации'"));
		Возврат;
		
	КонецЕсли;
	
	Если Не Отказ И Не ПараметрыЗаписи.Свойство("ПропуститьПроверкуВладельцаАвтомобилей") Тогда
		
		МассивТекстаВопроса = Новый Массив;
		ШаблонВопроса = (НСтр("ru = 'Автомобиль с VIN ""%1"" уже существует в базе и закреплен за контрагентом: ""%2""'"));
		
		Для Каждого ТекущаяСтрока Из Автомобили Цикл
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Владелец)
				И Не ТекущаяСтрока.Владелец = Объект.Ссылка
				И Не ТекущаяСтрока.ПризнакУдален Тогда
				
				МассивТекстаВопроса.Добавить(Стршаблон(ШаблонВопроса, ТекущаяСтрока.VIN, ТекущаяСтрока.Владелец));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивТекстаВопроса.Количество() > 0 Тогда
			
			Отказ = Истина;
			МассивТекстаВопроса.Добавить(СтрШаблон(НСтр("ru = 'Изменить собственника на ""%1""?'"), Объект.Наименование));
			
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"Подключаемый_ОбработкаВопросаЗаписиВладельцаАвтомобиля",
				ЭтотОбъект,
				ПараметрыЗаписи
			);
			
			ПоказатьВопрос(
				ОбработчикОповещения,
				СтрСоединить(МассивТекстаВопроса, Символы.ПС),
				РежимДиалогаВопрос.ДаНет
			);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
    ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзФормы", Истина);
	
	Если Не Элементы.ГруппаНаименование.Видимость Тогда
		
		Если
			Не ЗначениеЗаполнено(ТекущийОбъект.Фамилия)
			И Не ЗначениеЗаполнено(ТекущийОбъект.Имя)
			И Не ЗначениеЗаполнено(ТекущийОбъект.Отчество)
		Тогда
			
			Если ПустаяСтрока(ТекущийОбъект.Наименование) Тогда
			
				ТекущийОбъект.Наименование = НСтр("ru = 'Не заполнено'");
				
			КонецЕсли;
			
		Иначе
			
			ТекущийОбъект.Наименование = СокрЛП(
				ТекущийОбъект.Фамилия
				+ ?(Не ЗначениеЗаполнено(ТекущийОбъект.Фамилия), "", " ")
				+ ТекущийОбъект.Имя
				+ ?(Не ЗначениеЗаполнено(ТекущийОбъект.Имя), "", " ")
				+ ТекущийОбъект.Отчество
			);
			
			Если ПустаяСтрока(ТекущийОбъект.НаименованиеПолное) Тогда
				
				ТекущийОбъект.НаименованиеПолное = ТекущийОбъект.Наименование;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекущийОбъект.Фамилия = Неопределено;
		ТекущийОбъект.Имя = Неопределено;
		ТекущийОбъект.Отчество = Неопределено;
		
	КонецЕсли;
	
	// проверим есть ли у нас все данные для записи авто
	НомерСтрокиАвто = 0;
	ОшибкиАвто = Новый Массив;
	ОшибкиАвто.Добавить("При записи объекта обнаружены ошибки в списке автомобилей: ");
	ПустойVIN = ПравоПользователя(ПланыВидовХарактеристик.ПраваИНастройки.РазрешитьПустойVIN);
	
	Для Каждого Автомобиль Из Автомобили Цикл
		
		НомерСтрокиАвто = НомерСтрокиАвто + 1;
		
		Если Автомобиль.ПризнакИзменен Тогда
			
			НеЗаполненныеРеквизиты = Новый Массив;
			
			Если Не ЗначениеЗаполнено(Автомобиль.Марка) Тогда
				
				НеЗаполненныеРеквизиты.Добавить("марка");
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Автомобиль.Модель) Тогда
				
				НеЗаполненныеРеквизиты.Добавить("модель");
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СокрЛП(Автомобиль.VIN)) И Не ПустойVIN Тогда
				
				НеЗаполненныеРеквизиты.Добавить("vin номер");
				
			КонецЕсли;
			
			Если НеЗаполненныеРеквизиты.Количество() > 0 Тогда
				
				ОшибкиАвто.Добавить(
					СтрШаблон(
						"В строке №%1 не заполнены: %2 автомобиля",
						НомерСтрокиАвто,
						СтрСоединить(НеЗаполненныеРеквизиты, ", ")
					)
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОшибкиАвто.Количество() > 1 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон (НСтр("ru='%1'"),СтрСоединить(ОшибкиАвто, Символы.ПС)),,,,Отказ);
		
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
		
		// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
		ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
		ПараметрыСклонения.ЭтоФИО = Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
		
		Если Объект.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
		
			ПараметрыСклонения.Пол = 2;
			
		ИначеЕсли Объект.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			
			ПараметрыСклонения.Пол = 1;
			
		КонецЕсли;
		
		СклонениеПредставленийОбъектов.ПриЗаписиФормыОбъектаСклонения(
			ЭтотОбъект,
			Объект.Наименование,
			ТекущийОбъект.Ссылка,
			ПараметрыСклонения
		);
		// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
		
	КонецЕсли;
	
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	Для Каждого ТекущееАвто Из Автомобили Цикл
		
		Если ТекущееАвто.ПризнакУдален Тогда
			
			Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
				ТекущееАвто.Автомобиль,
				ТекущееАвто.Владелец,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,
				НачалоТекущегоДня
			);
			
		ИначеЕсли ТекущееАвто.ПризнакИзменен Тогда
			
			Если Не СохранитьАвтомобиль(ТекущийОбъект, ТекущееАвто) Тогда
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСведенияДействующегоСогласия();
	ДобавитьРуководителя();
	ЗаполнитьСтарыеНаименования();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "Контрагенты");
	
	Если
		ЭтотОбъект.ВладелецФормы <> Неопределено
		И ЕстьРеквизитНаКлиенте(ЭтотОбъект.ВладелецФормы, "ИмяФормы")			
		И ( 
			ЭтотОбъект.ВладелецФормы.ИмяФормы = "Документ.СводныйРемонтныйЗаказ.Форма.ФормаСозданияСводногоРемонтногоЗаказа"
			Или ЭтотОбъект.ВладелецФормы.ИмяФормы = "Обработка.ПоискКлиентовИДокументов.Форма.ФормаОбработки") 
		Или НеобходимоОповеститьПослеЗаписи
	Тогда
		
		 // TODO: Переделать на механизм из ОповеститьОСозданииНовогоОбъекта
		Оповестить("ЗаписанКонтрагент", Объект.Ссылка, ЭтотОбъект);
						
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("УстановкаОсновногоСчета") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Основной счет установлен.'"));
		Прочитать();
	КонецЕсли;
	
	РаботаСФормойКлиент.ОповеститьОСозданииНовогоОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
    ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ВидКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидКонтрагентаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		
		Объект.НаименованиеПолное = Объект.Наименование;
		СохранитьПереименованиеВИстории(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	Если Объект.ФормаСобственности = ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЧастноеЛицо") Тогда
		
		ФИО = ПолучитьФИО(Объект.НаименованиеПолное);
		Объект.Фамилия = ФИО.Фамилия;
		Объект.Имя = ФИО.Имя;
		Объект.Отчество = ФИО.Отчество;
		Объект.НаименованиеПолное = ФИО.НаименованиеПолное;
		
	ИначеЕсли Объект.ФормаСобственности =
		ПредопределенноеЗначение("Перечисление.ФормыСобственности.ИндивидуальныйПредприниматель") Тогда
		
		ФИО = ПолучитьФИО(Объект.НаименованиеПолное);
		Объект.Фамилия = ФИО.Фамилия;
		Объект.Имя = ФИО.Имя;
		Объект.Отчество = ФИО.Отчество;
		Объект.Наименование = Объект.НаименованиеПолное;
		
	Иначе
		
		Объект.Фамилия = "";
		Объект.Имя = "";
		Объект.Отчество = "";
		
	КонецЕсли;
	
	СохранитьПереименованиеВИстории(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)	
	
	Объект.Фамилия = СокрЛП(Объект.Фамилия);
		
	ОбновитьНаименованиеПолноеПоФИО();
	СохранитьПереименованиеВИстории(Объект);

	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Объект.ФормаСобственности
		= ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЧастноеЛицо");
	
	Если Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Женский") Тогда
	
		ПараметрыСклонения.Пол = 2;
		
	ИначеЕсли Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Мужской") Тогда
		
		ПараметрыСклонения.Пол = 1;
		
	КонецЕсли;
	
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.Наименование, ПараметрыСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов		

КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	Объект.Имя = СокрЛП(Объект.Имя);
	
	ОбновитьНаименованиеПолноеПоФИО();
	СохранитьПереименованиеВИстории(Объект);
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Объект.ФормаСобственности
		= ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЧастноеЛицо");
	
	Если Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Женский") Тогда
	
		ПараметрыСклонения.Пол = 2;
		
	ИначеЕсли Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Мужской") Тогда
		
		ПараметрыСклонения.Пол = 1;
		
	КонецЕсли;
	
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.Наименование, ПараметрыСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов		
		
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	
	Объект.Отчество = СокрЛП(Объект.Отчество);
	
	ОбновитьНаименованиеПолноеПоФИО();
	СохранитьПереименованиеВИстории(Объект);
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Объект.ФормаСобственности
		= ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЧастноеЛицо");
	
	Если Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Женский") Тогда
	
		ПараметрыСклонения.Пол = 2;
		
	ИначеЕсли Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Мужской") Тогда
		
		ПараметрыСклонения.Пол = 1;
		
	КонецЕсли;
	
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.Наименование, ПараметрыСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
		
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Объект.НаименованиеПолное = Текст;
	
	ПодключитьОбработчикОжидания("Подключаемый_НаименованиеПолноеОкончаниеВводаТекста", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННЮрЛицаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ИННЮрЛицаПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
    ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	КПППриИзмененииНаСервере();
	СохранитьКППВИстории(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КПППриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КППОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КэшКПП = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКонтактныхЛицПриИзменении(Элемент)
	
	Если ПереключательКонтактныхЛиц = 0 Тогда
		
		Элементы.СтраницаКонтакты.ТекущаяСтраница = Элементы.ГруппаКонтактныеЛица;
		КонтактныеЛицаПриАктивизацииСтроки(Неопределено);
		
	ИначеЕсли ПереключательКонтактныхЛиц = 1 Тогда
		
		Элементы.СтраницаКонтакты.ТекущаяСтраница = Элементы.ГруппаВладельцыКонтрагента;
		ВладельцыКонтрагентаПриАктивизацииСтроки(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСотрудник", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Заполнить контактную информацию данными по сотруднику?'");
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	РаботаСФайламиАльфаАвтоКлиент.АдресКартинкиНажатие(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНаименованиеПолноеНажатие(Элемент)
	
	РедактированиеИсторииКлиент.ОткрытьИсториюПолныхНаименований(
		ЭтотОбъект,
		Объект.ИсторияНаименований,
		Объект.НаименованиеПолное,
		Элементы.НаименованиеПолное.ТолькоПросмотр
	);
	
КонецПроцедуры

&НаСервере
Процедура СтатусУчастникаГИСМТПриИзмененииНаСервере()
	
	Объект.ДатаПолученияСтатусаГИСМТ = ТекущаяДатаСеанса();
	УстановитьДатуОбновленияСтатусаГИСМТ();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусУчастникаГИСМТПриИзменении(Элемент)
	
	СтатусУчастникаГИСМТПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтранаРегистрацииПриИзмененииНаСервере()
	
	Объект.СтранаРегистрацииЕАЭС =
		ЗначениеЗаполнено(Объект.СтранаРегистрации)
		И Объект.СтранаРегистрации <> Справочники.СтраныМира.Россия
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтранаРегистрации, "УчастникЕАЭС");
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)
	
	СтранаРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОСозданииНовогоОбъекта = Новый ОписаниеОповещения("Подключаемый_РезультатСозданияГоловногоКонтрагента",
		ЭтотОбъект);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_РезультатСозданияГоловногоКонтрагента",
		ЭтотОбъект,
		Новый Структура("ОповещениеОСозданииНовогоОбъекта", ОповещениеОСозданииНовогоОбъекта));
		
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента",
		,
		Элемент,
		Элемент,
		,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ГоловнойКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("РежимВыбора, ЭтоГоловнойКонтрагент", Истина, Истина);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",
		ПараметрыФормы,
		Элемент,
		Элемент,
		,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеЛица

&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.КонтактныеЛица.ТекущиеДанные <> Неопределено Тогда
		
		ТекущийКонтактВедущий = Элементы.КонтактныеЛица.ТекущиеДанные.КонтактноеЛицо;
		
	Иначе
		
		ТекущийКонтактВедущий = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		
	КонецЕсли;
	
	КонтактнаяИнформацияТекущегоКонтакта.Параметры.УстановитьЗначениеПараметра("ТекущийКонтакт", ТекущийКонтактВедущий);
	Элементы.КонтактнаяИнформацияТекущегоКонтакта.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КонтактныеЛицаКлиент.ВыбратьКонтрагента(ЭтотОбъект, Новый Структура("Владелец", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаДобавлениеОкончание(Результат, ДопПараметры) Экспорт
	
	Элементы.КонтактныеЛица.Обновить();
	Элементы.ВладельцыКонтрагента.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладельцыКонтрагентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	КонтактныеЛицаКлиент.ВыбратьКонтрагента(ЭтотОбъект, Новый Структура("КонтактноеЛицо", Объект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура КонтактныеЛицаВыборНаСервере(КлючЗаписи)
	
	НаборКонтактныхЛиц = РегистрыСведений.КонтактныеЛица.СоздатьНаборЗаписей();
	НаборКонтактныхЛиц.Отбор.Владелец.Установить(КлючЗаписи.Владелец);
	
	НаборКонтактныхЛиц.Прочитать();
	
	Для Каждого Запись Из НаборКонтактныхЛиц Цикл
		
		Если (Запись.КонтактноеЛицо = КлючЗаписи.КонтактноеЛицо) Тогда
			
			Запись.Основной = Не Запись.Основной;
			
		Иначе
			
			Запись.Основной = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборКонтактныхЛиц.Записать();
	
	Элементы.КонтактныеЛица.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНачинаетсяС(Поле.Имя, "КонтактныеЛицаНомерКартинки") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если СправочникДоступенДляРедактирования() Тогда			
			КонтактныеЛицаВыборНаСервере(ВыбраннаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладельцыКонтрагентаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ВладельцыКонтрагента.ТекущиеДанные <> Неопределено Тогда
		
		ТекущийКонтактВедущий = Элементы.ВладельцыКонтрагента.ТекущиеДанные.Владелец;
		
	Иначе
		
		ТекущийКонтактВедущий = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		
	КонецЕсли;
	
	КонтактнаяИнформацияТекущегоКонтакта.Параметры.УстановитьЗначениеПараметра("ТекущийКонтакт", ТекущийКонтактВедущий);
	Элементы.КонтактнаяИнформацияТекущегоКонтакта.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

&НаКлиенте
Процедура АвтомобилиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Автомобили.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда
		
		ТекущиеДанные.Период = ОпределитьТекущуюДату();
		ТекущиеДанные.ПризнакИзменен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	ОткрытьФорму(
		"Справочник.Автомобили.ФормаВыбора",
		ПараметрыФормы,
		Элемент,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиНаименованиеОбработкаВыбораНаСервере(ВыбранноеЗначение,ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	ТекущиеДанные.Автомобиль     = ВыбранноеЗначение;
	ТекущиеДанные.VIN            = ВыбранноеЗначение.VIN;
	ТекущиеДанные.Модель         = ВыбранноеЗначение.Модель;
	ТекущиеДанные.Марка          = ВыбранноеЗначение.Марка;
	ТекущиеДанные.ГодВыпуска     = ВыбранноеЗначение.ГодВыпуска;
	ТекущиеДанные.Комплектация   = ВыбранноеЗначение.ВариантКомплектации;
	ТекущиеДанные.Цвет           = ВыбранноеЗначение.Цвет;
	ТекущиеДанные.Пробег         = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(ТекущиеДанные.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег);
	ТекущиеДанные.ГосНомер       = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(ТекущиеДанные.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер);
	ТекущиеДанные.Владелец       = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(ТекущиеДанные.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин);
	ТекущиеДанные.ПризнакИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтомобилиНаименованиеОбработкаВыбораНаСервере(ВыбранноеЗначение);
	СформироватьНаименованиеАвтомобиляПоУмолчанию();
	АвтомобилиПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиПриАктивизацииСтроки(Элемент)
	
	// выведем новые данные
	ТекущийАвтомобиль = Элементы.автомобили.ТекущиеДанные;
	
	Если ТекущийАвтомобиль = Неопределено Тогда
		// почистим область ввода
		МаркаАвтомобиля               = ПредопределенноеЗначение("Справочник.Марки.ПустаяСсылка");
		МодельАвтомобиля              = ПредопределенноеЗначение("Справочник.Модели.ПустаяСсылка");
		ВариантКомплектацииАвтомобиля = ПредопределенноеЗначение("Справочник.ВариантыКомплектации.ПустаяСсылка");
		VINАвтомобиля                 = "";
		ГодВыпускаАвтомобиля          = Дата("00010101");
		ЦветАвтомобиля                = ПредопределенноеЗначение("Справочник.Цвета.ПустаяСсылка");
		ГосНомерАвтомобиля            = "";
		ПробегАвтомобиля              = 0;
		НомерШассиАвтомобиля          = "";
		Возврат;
	КонецЕсли;
	
	МаркаАвтомобиля               = ТекущийАвтомобиль.Марка;
	МодельАвтомобиля              = ТекущийАвтомобиль.Модель;
	ВариантКомплектацииАвтомобиля = ТекущийАвтомобиль.Комплектация;
	VINАвтомобиля                 = ТекущийАвтомобиль.VIN;
	ГодВыпускаАвтомобиля          = ТекущийАвтомобиль.ГодВыпуска;
	ЦветАвтомобиля                = ТекущийАвтомобиль.Цвет;
	ГосНомерАвтомобиля            = ТекущийАвтомобиль.ГосНомер;
	ПробегАвтомобиля              = ТекущийАвтомобиль.Пробег;
	НомерШассиАвтомобиля          = ТекущийАвтомобиль.НомерШасси;
	
	Если Элементы.Найти("МодельАвтомобиля") <> Неопределено Тогда
		
		УправлениеДиалогомВызовСервера.ОбновитьПараметрВыбора(
			Элементы.МодельАвтомобиля.ПараметрыВыбора,
			"Отбор.Марка",
			МаркаАвтомобиля
		);
		
	КонецЕсли;
	
	Элементы.КарточкаАвтомобиля.Доступность = (НЕ Элементы.Автомобили.ТекущаяСтрока = Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Автомобили.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ИзРегистра Тогда
		
		Отказ = Истина;
		ТекущиеДанные.ПризнакУдален = НЕ ТекущиеДанные.ПризнакУдален;
		
		Если ТекущиеДанные.ПризнакУдален Тогда
			
			ОбработчикВопроса = Новый ОписаниеОповещения(
				"Подключаемый_РезультатОтветаОбОчисеткеВладельцаАвтомобиля",
				ЭтотОбъект,
				Новый Структура("СтрокаАвтомобиля", ТекущиеДанные)
				);
			АвтомобилиКлиент.ПоказатьВопросОбОчисткеХозяина(ТекущиеДанные.Владелец, ОбработчикВопроса);
			
		Иначе
			
			ТекущиеДанные.Владелец = Объект.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МаркаАвтомобиляПриИзмененииНаСервере()
	
	МодельАвтомобиля = Справочники.Модели.ПустаяСсылка();
	ВариантКомплектацииАвтомобиля = Справочники.ВариантыКомплектации.ПустаяСсылка();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаАвтомобиляПриИзменении(Элемент = Неопределено)
	
	Если НЕ Элементы.Найти("МодельАвтомобиля") = Неопределено Тогда
		Если ЗначениеЗаполнено(МаркаАвтомобиля) И НеСтандартнаяМарка(МаркаАвтомобиля) Тогда
			УправлениеДиалогомВызовСервера.ОбновитьПараметрВыбора(ЭтотОбъект.Элементы.МодельАвтомобиля.ПараметрыВыбора, "Отбор.Марка", МаркаАвтомобиля);
		Иначе
			УправлениеДиалогомВызовСервера.УдалитьПараметрВыбора(ЭтотОбъект.Элементы.МодельАвтомобиля.ПараметрыВыбора, "Отбор.Марка");
		КонецЕсли;
	КонецЕсли;
	
	ТекущийАвтомобиль = Элементы.Автомобили.ТекущиеДанные;
	
	Если ТекущийАвтомобиль = Неопределено Тогда
		ТекущийАвтомобиль = Автомобили.Добавить();
	КонецЕсли;
	
	ТекущийАвтомобиль.ПризнакИзменен = Истина;
	ТекущийАвтомобиль.ПризнакУдален  = Ложь;
	
	ТекущийАвтомобиль.Марка = МаркаАвтомобиля;
	ТекущийАвтомобиль.Период = ОпределитьТекущуюДату();
	
	Если Элементы.Автомобили.ТекущиеДанные = Неопределено Тогда
		Элементы.Автомобили.ТекущаяСтрока = ТекущийАвтомобиль.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаАвтомобиляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МаркаМодели = МаркаМодели(МодельАвтомобиля);
	Если НЕ МаркаМодели = ВыбранноеЗначение И ЗначениеЗаполнено(МодельАвтомобиля) Тогда
		СтандартнаяОбработка = Ложь;
		Режим = РежимДиалогаВопрос.ДаНет;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Вопрос", "ВопросСоответствияМарок");
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, "Текущая модель марки <" + МаркаМодели + ">. Выбрана марка автомобиля <" + ВыбранноеЗначение + ">. 
			|Подтвердить выбор марки и очистить модель?", Режим);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильМодельПриИзменении(Элемент = Неопределено)
	
	ТекущийАвтомобиль = Элементы.Автомобили.ТекущиеДанные;
	
	Если МаркаАвтомобиля = ПредопределенноеЗначение("Справочник.Марки.ПустаяСсылка")
		И МодельАвтомобиля = ПредопределенноеЗначение("Справочник.Модели.ПустаяСсылка")
		И ВариантКомплектацииАвтомобиля <> ПредопределенноеЗначение("Справочник.ВариантыКомплектации.ПустаяСсылка") Тогда
		ЗаполнитьМодельПоКомплектации();
	КонецЕсли;
	
	Если МодельАвтомобиля <> ПредопределенноеЗначение("Справочник.Модели.ПустаяСсылка") Тогда
		МаркаАвтомобиля = МаркаМодели(МодельАвтомобиля);
	КонецЕсли;
	
	Если ТекущийАвтомобиль = Неопределено Тогда
		ТекущийАвтомобиль = Автомобили.Добавить();
	КонецЕсли;
	
	ТекущийАвтомобиль.ПризнакИзменен = Истина;
	ТекущийАвтомобиль.ПризнакУдален  = Ложь;
	
	// Получим автомобиль по VIN и текущего владельца
	Если НЕ ТекущийАвтомобиль.VIN = VINАвтомобиля Тогда
		ДанныеАвтомобиля = ПолучитьДанныеАвтомобиляПоVIN(VINАвтомобиля);
		Если НЕ ДанныеАвтомобиля = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекущийАвтомобиль, ДанныеАвтомобиля);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'По введенному VIN найден автомобиль ""%1""'"), ДанныеАвтомобиля.Автомобиль));
		Иначе
			ТекущийАвтомобиль.Автомобиль = ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка");
			ТекущийАвтомобиль.Владелец   = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	УстановкаМодели = ?(ТекущийАвтомобиль.Модель = ПредопределенноеЗначение("Справочник.Модели.ПустаяСсылка"), Истина, Ложь);
	ПредМодель = ТекущийАвтомобиль.Модель;
	
	ТекущийАвтомобиль.Марка  = МаркаАвтомобиля;
	ТекущийАвтомобиль.Модель = МодельАвтомобиля;
	
	Если ВариантКомплектацииАвтомобиля <> ПредопределенноеЗначение("Справочник.ВариантыКомплектации.ПустаяСсылка")
		И МодельАвтомобиля <> ПредопределенноеЗначение("Справочник.Модели.ПустаяСсылка") Тогда
		ТекущийАвтомобиль.Комплектация = ВариантКомплектацииАвтомобиля;
	Иначе
		ВариантКомплектацииАвтомобиля = ПредопределенноеЗначение("Справочник.ВариантыКомплектации.ПустаяСсылка");
	КонецЕсли;

	Если ТекущийАвтомобиль.Модель <> ПредопределенноеЗначение("Справочник.Модели.ПустаяСсылка")
		И МодельАвтомобиля <> ПредопределенноеЗначение("Справочник.Модели.ПустаяСсылка") 
		И Не УстановкаМодели
		И ПредМодель <> МодельАвтомобиля Тогда
		ВариантКомплектацииАвтомобиля = ПредопределенноеЗначение("Справочник.ВариантыКомплектации.ПустаяСсылка");
	КонецЕсли;
	
	ТекущийАвтомобиль.VIN        = VINАвтомобиля;
	ТекущийАвтомобиль.ГодВыпуска = ГодВыпускаАвтомобиля;
	ТекущийАвтомобиль.Цвет       = ЦветАвтомобиля;
	ТекущийАвтомобиль.ГосНомер   = ГосНомерАвтомобиля;
	ТекущийАвтомобиль.Пробег     = ПробегАвтомобиля;
	ТекущийАвтомобиль.НомерШасси = НомерШассиАвтомобиля;
	ТекущийАвтомобиль.Период     = ОпределитьТекущуюДату();
	
	Если Элементы.Автомобили.ТекущиеДанные = Неопределено Тогда
		Элементы.Автомобили.ТекущаяСтрока = ТекущийАвтомобиль.ПолучитьИдентификатор();
	КонецЕсли;
	
	СформироватьНаименованиеАвтомобиляПоУмолчанию();
	
КонецПроцедуры // АвтомобильМодельПриИзменении()

&НаСервере
Процедура ЗаполнитьМодельПоКомплектации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыКомплектации.Владелец КАК Владелец
	|ИЗ
	|	Справочник.ВариантыКомплектации КАК ВариантыКомплектации
	|ГДЕ
	|	ВариантыКомплектации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ВариантКомплектацииАвтомобиля);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	МодельАвтомобиля = ВыборкаДетальныеЗаписи.Владелец;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильМодельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Марка", МаркаАвтомобиля);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.Модели.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект,,,, Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыОткрытия),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаАвтомобиля(Команда)
	
	ТекущийАвтомобиль = Элементы.Автомобили.ТекущиеДанные;
	
	Если ТекущийАвтомобиль=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущийАвтомобиль.Автомобиль.Пустая() ИЛИ ТекущийАвтомобиль.ПризнакИзменен Тогда
		// проверим есть ли у нас все данные для записи авто
		
		НезаполненныеРеквизиты = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(ТекущийАвтомобиль.Марка) Тогда
			НеЗаполненныеРеквизиты.Добавить("марка");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущийАвтомобиль.Модель) Тогда
			НеЗаполненныеРеквизиты.Добавить("модель");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СокрЛП(ТекущийАвтомобиль.VIN)) Тогда
			НеЗаполненныеРеквизиты.Добавить("vin номер");
		КонецЕсли;
		
		Если НеЗаполненныеРеквизиты.Количество() > 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='У данного автомобиля не заполнены: %1'"), СтрСоединить(НеЗаполненныеРеквизиты, ", "))
			);
			Возврат;
		КонецЕсли;
		
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "КарточкаАвтомобиля");
		
		// Формируем текст вопроса
		Если НЕ ПустаяСтрока(Элементы.Автомобили.ТекущиеДанные.Владелец) И НЕ Объект.Ссылка.Пустая()
				И Элементы.Автомобили.ТекущиеДанные.Владелец <> Объект.Ссылка Тогда
				
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Автомобиль с VIN ""%1"" уже существует в базе и закреплен за контрагентом: ""%2"". Изменить собственника на ""%3""?'"),
				Элементы.Автомобили.ТекущиеДанные.VIN,
				Элементы.Автомобили.ТекущиеДанные.Владелец,
				Объект.Наименование);
		Иначе
			ТекстВопроса = НСтр("ru = 'Автомобиль не сохранен. Сохранить автомобиль перед открытием карточки?'");
		КонецЕсли;
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", Элементы.Автомобили.ТекущиеДанные.Автомобиль);
		ОткрытьФорму("Справочник.Автомобили.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасширеннуюИнформацию(Кнопка)
	
	// Определим новое значение статуса отображения расширенной информации
	ПоказатьРасширеннуюИнформацию = (НЕ Элементы.ГруппаИнформацияОбАвтомобиле.Видимость);
	
	// Произведем настройку параметров отображения полей расширенной информации
	Элементы.ГруппаИнформацияОбАвтомобиле.Видимость = ПоказатьРасширеннуюИнформацию;
	Элементы.ПоказатьРасширеннуюИнформацию.Пометка   = ПоказатьРасширеннуюИнформацию;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияАвтомобиля(Команда)
	
	Если Элементы.Автомобили.ТекущаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Вызовим общий обработчик
	АвтомобилиКлиент.ОтчетИсторияАвтомобиля(ЭтотОбъект, Элементы.Автомобили.ТекущиеДанные.Автомобиль);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Перед получением статуса участника в ГИС МТ необходимо записать контрагента.'"));
		Возврат;
		
	КонецЕсли;
	
	ИмяДействия = "ПолучитьСтатусыУчастниковГИСМТ";
	
	СписокИНН = Новый Соответствие;
	СписокИНН.Вставить(Объект.Ссылка, Объект.ИНН);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("СписокИНН", СписокИНН);
	ДополнительныеПараметры.Вставить("Организация", ОрганизацияПользователя());
	ДополнительныеПараметры.Вставить("ОбработкаРезультата",
		Новый ОписаниеОповещения("РезультатОбновленияСтатусаУчастника", ЭтотОбъект, ИмяДействия));
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьДокумент(
		ЭтотОбъект,
		Объект,
		ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		ДополнительныеПараметры = Новый Структура("РедактироватьМетки", Истина);
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаВопросаЗаписи",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Для редактирования меток необходимо записать справочник.'")
				+ Символы.ПС
				+ НСтр("ru = 'Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена,
			0);
		
		Возврат;
	КонецЕсли;
	УправлениеСвойствамиАльфаАвтоКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ФормаСобственностиПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Объект.ФормаСобственности = Перечисления.ФормыСобственности[ПараметрыДействия.ФормаСобственности];
	
	Если
		Объект.ФормаСобственности = Перечисления.ФормыСобственности.ПрочаяФормаСобственности
		Или Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
	Тогда
		
		Объект.ИНН = Лев(Объект.ИНН,10);
		
	КонецЕсли;
	
	Для каждого КнопкаОперации Из Элементы.ВыборФормыСобственности.ПодчиненныеЭлементы Цикл
		КнопкаОперации.Пометка = (КнопкаОперации.Имя=ПараметрыДействия.ФормаСобственности);
	КонецЦикла;
	
	// Вызываем обработчик изменения данных объекта
	Справочники.Контрагенты.ФормаСобственностиПриИзменении(Объект, ПараметрыДействия);
	УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
	// Вызываем обработчик и формируем реквизиты "Имя", "Фамилия" и "Отчество" для физлиц.
	Справочники.Контрагенты.НаименованиеПолноеПриИзменении(Объект, Неопределено);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаСобственностиПриИзменении(Кнопка)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ФормаСобственности",Кнопка.Имя);
	
	// Обработаем событие в контексте сервера
	ФормаСобственностиПриИзмененииНаСервере(ПараметрыДействия);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ДобавитьИзображение(ЭтотОбъект, Объект, Команда);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзображениеНаСервере()
	
	РаботаСФайламиАльфаАвтоВызовСервера.УдалитьИзображение(ЭтотОбъект);
	ПолучитьСледующееИзображение("Вперед");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	Если Объект.ФайлКартинки = ТекущаяКартинка Тогда
		ВывестиСообщение(НСтр("ru = 'Картинка установлена основной. Прежде чем удалить ее необходимо снять признак ""Основная"".'"));
		Возврат;
	КонецЕсли;
	
	УдалитьИзображениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ПросмотретьИзображение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображения(Команда)
	
	ДвижениеПросмотра = ?(СтрНайти(Команда.Имя, "Вперед"), "Вперед", "Назад");
	
	ПолучитьСледующееИзображение(ДвижениеПросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьКонтактноеЛицо(Команда)
	
	Если ПереключательКонтактныхЛиц  = 0 Тогда
		ПереключательКонтактныхЛиц = 1;
	Иначе
		ПереключательКонтактныхЛиц = 0;
	КонецЕсли;
	
	ПереключательКонтактныхЛицПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияКППНажатие(Элемент)

	РедактированиеИсторииКлиент.ОткрытьИсториюКПП(ЭтотОбъект, Объект.ИсторияКПП, Объект.КПП, Элементы.КПП.ТолькоПросмотр);
	
КонецПроцедуры

&НаСервере
Процедура СделатьОсновнойКартинкойНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьОсновнойКартинкой(Команда)
	
	Если НЕ РаботаСФайламиАльфаАвтоКлиент.ФайлЯвляетсяДопустимойКартинкой(ТекущаяКартинка) Тогда
		
		Возврат;
		
	КонецЕсли;

	Если Объект.ФайлКартинки = ТекущаяКартинка Тогда
	    Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.МоделиПрисоединенныеФайлы.ПустаяСсылка");
	Иначе	
		Объект.ФайлКартинки = ТекущаяКартинка;
	КонецЕсли;
	
	Модифицированность = Истина;
	СделатьОсновнойКартинкойНаСервере();
	
КонецПроцедуры

// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
&НаКлиенте
Процедура Склонения(Команда)
	
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Объект.ФормаСобственности
		= ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЧастноеЛицо");
	
	Если Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Женский") Тогда
	
		ПараметрыСклонения.Пол = 2;
		
	ИначеЕсли Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Мужской") Тогда
		
		ПараметрыСклонения.Пол = 1;
		
	КонецЕсли;
	
	СклонениеПредставленийОбъектовКлиент.ПоказатьСклонение(
		ЭтотОбъект,
		Объект.Наименование,
		ПараметрыСклонения
	);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

// СтандартныеПодсистемы.РаботаСКонтрагентами

// Обработчик события возникающего на клиенте при выполнении команды "Заполнить по ИНН".
//
// Параметры:
//   Команда   (КомандаФормы)     Команда, которая была вызвана.
//
&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если Элементы.Наименование.ТолькоПросмотр Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Контрагент участвует в движениях. Изменение наименования запрещено.'"));
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИННЮрЛица;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.ИНН, Истина);
	
КонецПроцедуры //ЗаполнитьПоИНН()

// Обработчик события возникающего на клиенте при выполнении команды "Заполнить по наименованию".
//
// Параметры:
//   Команда   (КомандаФормы)     Команда, которая была вызвана.
//
&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Наименование"" не заполнено'"));
		ТекущийЭлемент = Элементы.Наименование;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.Наименование, Ложь);
	
КонецПроцедуры //ЗаполнитьПоНаименованию()

// Обработчик события возникающего на клиенте при выполнении команды "Проверить контрагента".
//
// Параметры:
//   Команда   (КомандаФормы)     Команда, которая была вызвана.
//
&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	
КонецПроцедуры //ПроверитьКонтрагента()

// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура ПоказатьЗначенияИндексовКонтрагента(Команда)
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры //ПоказатьЗначенияИндексовКонтрагента()

// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// ПростаяЭлектроннаяПодпись

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПЭП(Команда)
	
	УчастникиПЭПКлиент.ОтправитьИлиОбновитьУчастника(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
        УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	
	ОбновитьОтображениеИндексыСПАРК();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	// АльфаАвто
	ВидКонтрагента = ВидКонтрагентаСПАРКРиски();
	
	Если ВидКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Конец АльфаАвто
	
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ИндексыСПАРКРиски,
		Объект,
		Объект.ИНН, // Искать по ИНН
		ВидКонтрагента,
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// +СофтФон
&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
	Телефон = ЭтотОбъект[ИмяРеквизита];

	Если НЕ ЗначениеЗаполнено(СокрЛП(Телефон)) Тогда
		Возврат;	
	КонецЕсли;
	
	Структура = Новый Структура();
	Структура.Вставить("Контакт", Объект.Ссылка);
	Структура.Вставить("ОснованиеСправочник", Истина);
	Структура.Вставить("Телефон", УправлениеКонтактнойИнформациейАльфаАвтоКлиент.УбратьЛишниеСимволыТелефона(Телефон));
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Структура);
	
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура сфпПозвонитьКЛ(Команда)
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон() Тогда
		Возврат;
	ИначеЕсли Элементы.КонтактнаяИнформация.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Если ПереключательКонтактныхЛиц = 0 Тогда
		Если Элементы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Элементы.ВладельцыКонтрагента.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	Тип = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(Элементы.КонтактнаяИнформация.ТекущиеДанные.Вид, "Тип");
	Если Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Если ПереключательКонтактныхЛиц = 0 Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(Элементы.КонтактнаяИнформация.ТекущиеДанные.Представление, Элементы.КонтактныеЛица.ТекущиеДанные.КонтактноеЛицо);
		Иначе
			сфпСофтФонПроКлиент.сфпПозвонить(Элементы.КонтактнаяИнформация.ТекущиеДанные.Представление, Элементы.ВладельцыКонтрагента.ТекущиеДанные.Владелец);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
// -СофтФон

// Начало РедактированиеИстории

// Обновление таблиц истории реквизитов
//
// Параметры:
//  Значение - Неопределено, Массив - Результат редактирования таблицы истории;
//  ОписаниеПриемника - Структура - Описания реквизита и таблицы для которых редактировалась история;
//
&НаКлиенте
Процедура Подключаемый_РедактированиеИсторииЗавершение(Значение, ОписаниеПриемника) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ОписаниеПриемника.Таблица].Очистить();
	
	Если Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Значение Цикл
		ЗаполнитьЗначенияСвойств(Объект[ОписаниеПриемника.Таблица].Добавить(), Строка);
	КонецЦикла;
	
	Объект[ОписаниеПриемника.Реквизит] = Значение[Значение.ВГраница()].Значение;
	Модифицированность = Истина;
	
КонецПроцедуры

// Конец РедактированиеИстории

// СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
	
КонецПроцедуры //Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
	
КонецПроцедуры //Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()

// Процедура, вызываемая перед началом заполнения данных по ЕГР
//
// Параметры:
//		СтрокаПоиска - ИНН или НаименованияБ для поиска
//		ЗаполнениеПоИНН - Булево - Признак необходимости заполнение по ИНН.
//
&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(СтрокаПоиска, Знач ЗаполнениеПоИНН = Неопределено)

	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	ПроверятьИНН = ЗаполнениеПоИНН <> Истина;
	
	Если ЗаполнениеПоИНН = Неопределено Тогда
		ЗаполнениеПоИНН = ЭтоИНН(СтрокаПоиска);
	КонецЕсли;
	
	Если
		(ПроверятьИНН И ЗначениеЗаполнено(Объект.ИНН))
		Или ЗначениеЗаполнено(Объект.КПП)
		Или ЗначениеЗаполнено(Объект.Наименование) 
		Или ЗначениеЗаполнено(Объект.НаименованиеПолное)
	Тогда
		
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ДопПараметры = Новый Структура("ЗаполнениеПоИНН,СтрокаПоиска", ЗаполнениеПоИНН, СтрокаПоиска);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение", 
			ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если ЗаполнениеПоИНН Тогда
			ИННПоиска = СтрокаПоиска;
			ЗаполнитьРеквизитыПоИНННаКлиенте();
		Иначе
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаПоиска);
		КонецЕсли;
		
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Ответ     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДопПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДопПараметры.ЗаполнениеПоИНН Тогда
			ИННПоиска = ДопПараметры.СтрокаПоиска;
			ЗаполнитьРеквизитыПоИНННаКлиенте();
		Иначе 
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ДопПараметры.СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение()

// Процедура запускает проверку контрагентов по ИНН.
//
// Параметры:
//  СтрокаИНН     - Число - ИНН.
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНННаКлиенте()
	
	НачатьПоискКонтрагентаПоИНН();
	
	Если ДлительнаяОперацияПоискПоИНН.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперацияПоискПоИНН,
			Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект),
			ПараметрыОжидания
		);
		
	Иначе
		
		ПриЗавершенииЗадания(ДлительнаяОперацияПоискПоИНН);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПоискКонтрагентаПоИНН()
	
	Если ДлительнаяОперацияПоискПоИНН <> Неопределено И ДлительнаяОперацияПоискПоИНН.Статус = "Выполняется" Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперацияПоискПоИНН.ИдентификаторЗадания);
	КонецЕсли;
	
	ПоискЮридическогоЛица = СтрДлина(ИННПоиска) = 10;
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИНН", ИННПоиска);
	Если ПоискЮридическогоЛица Тогда
		ДлительнаяОперацияПоискПоИНН = ДлительныеОперации.ВыполнитьВФоне(
			"РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИННВФоне",
			ПараметрыМетода,
			ПараметрыВыполненияВФоне);
		ИмяМетодаФоновогоЗаданияПоискаПоИНН = "СведенияОЮридическомЛицеПоИНН";
	Иначе
		ДлительнаяОперацияПоискПоИНН = ДлительныеОперации.ВыполнитьВФоне(
			"РаботаСКонтрагентами.РеквизитыПредпринимателяПоИННВФоне",
			ПараметрыМетода,
			ПараметрыВыполненияВФоне);
		ИмяМетодаФоновогоЗаданияПоискаПоИНН = "РеквизитыПредпринимателяПоИНН";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЗадания(РезультатЗадания, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДлительнаяОперацияПоискПоИНН = РезультатЗадания;
	Результат = ПриЗавершенииЗаданияНаСервере();
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		ОбработатьОшибкуПоискаКонтрагента(Результат.ОписаниеОшибки);
	ИначеЕсли Результат.Повторить Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьРеквизитыПоИНННаКлиенте", 5, Истина);
	ИначеЕсли Результат.КоличествоНайденных > 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Найдено более одного контрагента. Уточните ИНН для поиска.'"));
	ИначеЕсли НЕ ПустаяСтрока(ИННПоиска) И Результат.КоличествоНайденных = 0 Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось найти данные для заполнения реквизитов по ИНН %1'"),
			Результат.ИНН));
	Иначе
		СохранитьКППВИстории(Объект);
		СохранитьПереименованиеВИстории(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриЗавершенииЗаданияНаСервере()
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки");
	Результат.Вставить("КоличествоНайденных", 0);
	Результат.Вставить("Повторить"          , Ложь);
	Результат.Вставить("ИНН");
	
	Если ТипЗнч(ДлительнаяОперацияПоискПоИНН) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ДлительнаяОперацияПоискПоИНН.Статус = "Выполнено" Тогда
		
		РезультатЗадания = ПолучитьИзВременногоХранилища(ДлительнаяОперацияПоискПоИНН.АдресРезультата);
		Если ЗначениеЗаполнено(РезультатЗадания.ОписаниеОшибки) Тогда
			
			Результат.ОписаниеОшибки = РезультатЗадания.ОписаниеОшибки;
			
		Иначе
			
			ЭтоЮридическоеЛицо = (ИмяМетодаФоновогоЗаданияПоискаПоИНН = "СведенияОЮридическомЛицеПоИНН");
			
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить(
				"ФормаСобственности",
				?(ЭтоЮридическоеЛицо, "ЮридическоеЛицо", "ИндивидуальныйПредприниматель"));
			ФормаСобственностиПриИзмененииНаСервере(ПараметрыДействия);
			
			Справочники.Контрагенты.ЗавершитьЗаполнениеРеквизитовПоИНННаСервере(Объект, 
				ЭтотОбъект, 
				РезультатЗадания, 
				ЭтоЮридическоеЛицо,
				"Контрагента");
			
			// Заполним данные о контактном лице
			Если ЭтоЮридическоеЛицо И РезультатЗадания.ЕГРЮЛ <> Неопределено Тогда
				
				ДобавитьКонтактноеЛицо = Ложь;
				Если ПолучитьЗначениеПараметраСтруктуры(РезультатЗадания.ЕГРЮЛ.Руководитель, "ИНН") <> Неопределено Тогда
					
					ДанныеРуководителя = РезультатЗадания.ЕГРЮЛ.Руководитель;
					ДобавитьКонтактноеЛицо = Истина;
					
				// Добавление информации о руководителе, из данных о руководителях.
				ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(РезультатЗадания.ЕГРЮЛ, "Руководители") <> Неопределено Тогда
					
					Если ЗначениеЗаполнено(РезультатЗадания.ЕГРЮЛ.Руководители) Тогда
						
						ДанныеРуководителя = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, ДатаЗаписи, Должность");
						ЗаполнитьЗначенияСвойств(ДанныеРуководителя, РезультатЗадания.ЕГРЮЛ.Руководители[0]);
						ДобавитьКонтактноеЛицо = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Объект.Ссылка)
					И ДобавитьКонтактноеЛицо
					И ЗначениеЗаполнено(ДанныеРуководителя) Тогда
				
					ДобавитьРуководителя();
					ДанныеРуководителя = Неопределено;
				
				КонецЕсли;
				
			КонецЕсли;
				
			Если НЕ (ЭтоЮридическоеЛицо
				И ПолучитьЗначениеПараметраСтруктуры(РезультатЗадания, "ЕГРЮЛ") = Неопределено) Тогда
				Результат.КоличествоНайденных = 1;
			КонецЕсли;
			Результат.ИНН = ПолучитьЗначениеПараметраСтруктуры(ИмяМетодаФоновогоЗаданияПоискаПоИНН, "ИНН", Объект.ИНН);
			
		КонецЕсли;
		
	ИначеЕсли ДлительнаяОперацияПоискПоИНН.Статус = "Ошибка" Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка при обращении к сервису.
			|Подробнее см. в журнале регистрации.'");
		РаботаСКонтрагентами.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при поиске контрагентов по наименованию. %1'"),
				ДлительнаяОперацияПоискПоИНН.ПодробноеПредставлениеОшибки),
			"Контрагент");
		
	ИначеЕсли ДлительнаяОперацияПоискПоИНН.Статус = "Отменено" Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru = 'Задание отменено администратором.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОшибкуПоискаКонтрагента(ОписаниеОшибки)
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации"
			Или ОписаниеОшибки = "НеУказанПароль" Тогда
			Если ИнтернетПоддержкаПользователейВызовСервера.ДоступноПодключениеИнтернетПоддержки() Тогда
				ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
					|необходимо подключить Интернет-поддержку пользователей.
					|Подключить Интернет-поддержку?'");
				ДопПараметры = Новый Структура("СтрокаПоиска, ЗаполнениеПоИНН", Объект.ИНН, Истина);
				ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ДопПараметры);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Иначе
				ПоказатьПредупреждение(,
					НСтр("ru='Для автоматического заполнения реквизитов контрагентов
						|необходимо подключить Интернет-поддержку пользователей.
						|Обратитесь к администратору.'"));
			КонецЕсли;
		ИначеЕсли ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИдентификаторМестаВызова", "zapolnenie_rekvizitov");
			ОткрытьФорму("ОбщаяФорма.Сервис1СКонтрагентНеПодключен", ПараметрыФормы, ЭтотОбъект);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли Объект.ФормаСобственности = ПредопределенноеЗначение(
		"Перечисление.ФормыСобственности.ЮридическоеЛицо") Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов - мог измениться КПП.
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет необходимые параметры и открывает форму "Заполнение реквизитов контрагента".
//
// Параметры:
//  СтрокаНаименование     - Строка - Наименование контрагента.
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаНаименование)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", СтрокаНаименование);
	ПараметрыФормы.Вставить("НеСоздаватьКонтрагента", Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Элементы.Наименование.ТолькоПросмотр);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", 
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры //ЗаполнитьРеквизитыПоНаименованиюНаКлиенте()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Результат     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДопПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоИНН(Результат) Тогда
		
		ЗаполнитьРеквизитыРезультатомПоискаПоНаименованию(Результат);
		ТекущийЭлемент = Элементы.Наименование;
		Возврат;
		
	КонецЕсли;
	
	ИННПоиска = Результат;
	ЗаполнитьРеквизитыПоИНННаКлиенте();
	ТекущийЭлемент = Элементы.Наименование;

КонецПроцедуры //ЗаполнитьРеквизитыПоНаименованиюЗавершение()

&НаКлиенте
Процедура ЗаполнитьРеквизитыРезультатомПоискаПоНаименованию(РезультатПоиска)
	
	Объект.ИНН = РезультатПоиска.ИНН;
	Если ЗначениеЗаполнено(РезультатПоиска.НаименованиеСокращенное) Тогда
		Объект.Наименование = РезультатПоиска.НаименованиеСокращенное;
	ИначеЕсли ЗначениеЗаполнено(РезультатПоиска.Наименование) Тогда
		Объект.Наименование = РезультатПоиска.Наименование;
	КонецЕсли;
	Если РезультатПоиска.Свойство("НаименованиеПолное") И ЗначениеЗаполнено(РезультатПоиска.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = РезультатПоиска.НаименованиеПолное;
	Иначе
		Объект.НаименованиеПолное = РезультатПоиска.Наименование;
	КонецЕсли;
	Объект.КПП = РезультатПоиска.КПП;
	
	Если ЗначениеЗаполнено(РезультатПоиска.ЮридическийАдрес) ИЛИ ЗначениеЗаполнено(РезультатПоиска.Телефон) Тогда
		УстановитьПолученнуюКонтактнуюИнформацию(РезультатПоиска);
	КонецЕсли;
	
	// Заполним контактное лицо
	Если ЗначениеЗаполнено(РезультатПоиска.Руководитель) Тогда
		
		Если ПолучитьЗначениеПараметраСтруктуры(РезультатПоиска.Руководитель, "ИНН") <> Неопределено Тогда
			ДанныеРуководителя = РезультатПоиска.Руководитель;
		Иначе
			ДанныеРуководителя = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеЭлементаКонтактнойИнформации(Форма, Вид, ОписаниеКИ)
	
	СтрокиКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов
		.НайтиСтроки(Новый Структура("Вид", Вид));
		
	Если СтрокиКИ.Количество() > 0 Тогда
		
		СтрокиКИ[0].ЗначенияПолей = ОписаниеКИ.Поля;
		СтрокиКИ[0].Представление = ОписаниеКИ.Представление;
		Форма[СтрокиКИ[0].ИмяРеквизита] = ОписаниеКИ.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПолученнуюКонтактнуюИнформацию(Данные)
	
	Если ЗначениеЗаполнено(Данные.Телефон) Тогда
		
		ТелефонXDTO = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOПоПредставлению(
			Данные.Телефон, Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТелефонXML = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOВXML(ТелефонXDTO);
		УстановитьЗначениеЭлементаКонтактнойИнформации(
			ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
			Новый Структура("Представление,Поля", ТелефонXDTO.Представление, ТелефонXML)
		);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ЮридическийАдрес) Тогда
		
		АдресXDTO = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOПоПредставлению(
			Данные.ЮридическийАдрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
		АдресXML = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOВXML(АдресXDTO);
		УстановитьЗначениеЭлементаКонтактнойИнформации(
			ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			Новый Структура("Представление,Поля", АдресXDTO.Представление, АдресXML)
		);
		УстановитьЗначениеЭлементаКонтактнойИнформации(
			ЭтотОбъект,
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
			Новый Структура("Представление,Поля", АдресXDTO.Представление, АдресXML)
		);
		
	КонецЕсли;
	
КонецПроцедуры //УстановитьПолученнуюКонтактнуюИнформацию()

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры //ПодключитьИнтернетПоддержку()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Результат     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДопПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ДопПараметры.СтрокаПоиска, ДопПараметры.ЗаполнениеПоИНН);
	КонецЕсли;

КонецПроцедуры //ПодключитьИнтернетПоддержкуЗавершение()

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	
	Возврат ЗначениеЗаполнено(СтрокаИНН)
		И ТипЗнч(СтрокаИНН) = Тип("Строка")
		И (СтрДлина(СтрокаИНН) = 10 ИЛИ СтрДлина(СтрокаИНН) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаИНН);
		
КонецФункции //ЭтоИНН()

// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

&НаСервере
Функция ПроверятьПараметры(ПараметрыЗаписи, Отказ)
	
	Попытка
		ПараметрыЗаписиЗначение = РеквизитФормыВЗначение("Объект");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если
		Не Отказ
		И Не ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "НеПроверятьИНН", Ложь)
		И Не ПараметрыЗаписи.Свойство("ПропуститьПроверкуДублей")
		И ЭтоРезидентРоссии(Объект)
	Тогда
	   Возврат Истина;
   Иначе
	   Возврат Ложь;
   КонецЕсли;
   
КонецФункции

&НаКлиенте
Процедура Подключаемый_НаименованиеПолноеОкончаниеВводаТекста()
	
	НаименованиеПолноеПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаЗаписиКонтактногоЛица(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения <> КодВозвратаДиалога.Да Тогда
		ДанныеРуководителя = Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ЗаписьКонтактногоЛица");
	
	Записать(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьТаблицуКонтактов()
	
	СтруктураКонтактов = Новый СписокЗначений;
	
	Для Каждого КонтактнаяИнформация Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если Не ЗначениеЗаполнено(КонтактнаяИнформация.ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = ЭтотОбъект[КонтактнаяИнформация.ИмяРеквизита];
		
		Если ПустаяСтрока(Представление) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если КонтактнаяИнформация.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			
			СтруктураКонтактов.Добавить("АдресЭлектроннойПочты",Представление);
			
		ИначеЕсли КонтактнаяИнформация.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			
			СтруктураКонтактов.Добавить("Адрес",Представление);
			
		ИначеЕсли
			КонтактнаяИнформация.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
			Или КонтактнаяИнформация.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс")
		Тогда
			
			СтруктураКонтактов.Добавить("Телефон",Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураКонтактов;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьМенюВыбораФормыСобственности()
	
	СписокФормыСобственности = Новый СписокЗначений;
	СписокФормыСобственности.Добавить(Перечисления.ФормыСобственности.ЮридическоеЛицо,"ЮридическоеЛицо");
	СписокФормыСобственности.Добавить(Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель,"ИндивидуальныйПредприниматель");
	СписокФормыСобственности.Добавить(Перечисления.ФормыСобственности.ЧастноеЛицо,"ЧастноеЛицо");
	СписокФормыСобственности.Добавить(Перечисления.ФормыСобственности.ОбособленноеПодразделение,"ОбособленноеПодразделение");
	СписокФормыСобственности.Добавить(Перечисления.ФормыСобственности.ПрочаяФормаСобственности,"ПрочаяФормаСобственности");
	
	Если СписокФормыСобственности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейОперации = СписокФормыСобственности.Получить(0).Значение;
	
	Для каждого ЭлементСписка Из СписокФормыСобственности Цикл
		
		ИмяОперации = ЭлементСписка.Представление;
		
		КомандаОперации                           = Команды.Добавить(ИмяОперации);
		КомандаОперации.Заголовок                 = ЭлементСписка.Значение;
		КомандаОперации.Действие                  = "ФормаСобственностиПриИзменении";
		КомандаОперации.ИзменяетСохраняемыеДанные = ИСТИНА;
		
		КнопкаОперации = Элементы.Добавить(ИмяОперации, Тип("КнопкаФормы"), Элементы.ВыборФормыСобственности);
		КнопкаОперации.ИмяКоманды = ИмяОперации;
		КнопкаОперации.Пометка    = ЭлементСписка.Пометка;
		
		Если ЭлементСписка.Пометка Тогда
			ИмяТекущейОперации = ИмяОперации;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ФормаСобственности) Тогда
		ИмяТекущейОперации = Объект.ФормаСобственности;
	Иначе
		Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
	КонецЕсли;
	
	Для каждого КнопкаОперации Из Элементы.ВыборФормыСобственности.ПодчиненныеЭлементы Цикл
		КнопкаОперации.Пометка = (КнопкаОперации.Имя=ИмяТекущейОперации);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДубли(СтруктураПоиска,СписокКонтактов, Знач Объект)
	
	СтруктураНайденныхДублей = Справочники.Контрагенты.НайтиДубли(СтруктураПоиска,СписокКонтактов,Объект);
	Возврат СтруктураНайденныхДублей;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПроверкаДублей(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатОповещения) = Тип("Структура") И РезультатОповещения.Свойство("Результат") Тогда
		Если РезультатОповещения.Результат = "Продолжить" Тогда
			ДополнительныеПараметры.Вставить("ПропуститьПроверкуДублей", Истина);
			ЗаписанКонтрагент = Записать(ДополнительныеПараметры);
			Если ЗаписанКонтрагент Тогда
				Закрыть();
			КонецЕсли;
		ИначеЕсли РезультатОповещения.Результат = "ПродолжитьНеЗакрывая" Тогда
			ДополнительныеПараметры.Вставить("ПропуститьПроверкуДублей", Истина);
			Записать(ДополнительныеПараметры);
		ИначеЕсли РезультатОповещения.Результат = "Перейти" Тогда
			Попытка 
				ВладелецФормы.ТекущаяСтрока = РезультатОповещения.Объект; 
			Исключение
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ТекущаяСтрока", РезультатОповещения.Объект);
				ОткрытьФорму("Справочник.Контрагенты.ФормаСписка", ПараметрыФормы);
			КонецПопытки;
			Модифицированность = Ложь;
			Закрыть();
			Возврат;
		КонецЕсли;
	ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияСотрудникНаСервере(ДополнительныеПараметры = Неопределено)
	
	СписокКонтактов = Новый Массив;
	СписокКонтактов.Добавить(Объект.Сотрудник);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	УправлениеКонтактнойИнформацией.СоздатьВТКонтактнаяИнформация(Запрос.МенеджерВременныхТаблиц, СписокКонтактов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей
	|ИЗ
	|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация";
	ТаблицаКИ = Запрос.Выполнить().Выгрузить();
	
	СоответствиеВидов = Новый Соответствие;
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресСотрудника,          Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.EmailСотрудника,            Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.ВебСтраницаСотрудника,      Справочники.ВидыКонтактнойИнформации.ВебСтраницаКонтрагента);
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияСотрудника, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента);
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника,          Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксСотрудника,             Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента);
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресСотрудника,        Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);

	// Возможно в копируемом объекте большее количество полей.
	Для каждого Вида Из СоответствиеВидов Цикл
		
		КоличествоВКопируемомОбъекте = ТаблицаКИ.НайтиСтроки(Новый Структура("Вид", Вида.Ключ)).Количество();
		КоличествоВОбъекте = ЭтотОбъект
			.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов
			.НайтиСтроки(Новый Структура("Вид", Вида.Значение)).Количество(); 
		
		Если КоличествоВКопируемомОбъекте > КоличествоВОбъекте Тогда
			
			Для Добавлять = 1 По КоличествоВКопируемомОбъекте - КоличествоВОбъекте Цикл
				
				Результат = Новый Структура("ДобавляемыйВид,ИмяЭлементаДляРазмещения",Вида.Значение,"ГруппаКонтактнаяИнформация");
				ОбновитьКонтактнуюИнформацию(Результат);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияПолейКонтактнойИнформации = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	// Отчистим старую информацию
	Для Каждого ЭлементКоллекцияПолейКонтактнойИнформации Из КоллекцияПолейКонтактнойИнформации Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементКоллекцияПолейКонтактнойИнформации.ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтотОбъект[ЭлементКоллекцияПолейКонтактнойИнформации.ИмяРеквизита] = "";
		ЭлементКоллекцияПолейКонтактнойИнформации.Значение = "";
		
		Если ЭлементКоллекцияПолейКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементКоллекцияПолейКонтактнойИнформации.Вид, "ВидРедактирования") = "Диалог" Тогда
				ЭтотОбъект[ЭлементКоллекцияПолейКонтактнойИнформации.ИмяРеквизита] = "Заполнить";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого КонтактнаяИнформация Из ТаблицаКИ Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Вид", СоответствиеВидов[КонтактнаяИнформация.Вид]);
		ПараметрыОтбора.Вставить("Тип", КонтактнаяИнформация.Тип);
		ПараметрыОтбора.Вставить("Значение", "");

		СтрокаВКИ = КоллекцияПолейКонтактнойИнформации.НайтиСтроки(ПараметрыОтбора);
		Если СтрокаВКИ.Количество()>0 Тогда   
			
			ЭтотОбъект[СтрокаВКИ[0].ИмяРеквизита] = КонтактнаяИнформация.Представление;
			СтрокаВКИ[0].Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
				КонтактнаяИнформация.ЗначенияПолей,
				КонтактнаяИнформация.Тип
			);
			СтрокаВКИ[0].Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(СтрокаВКИ[0].Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСотрудник(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Обработаем событие в контексте сервера
		ОбработкаРезультатаОповещенияСотрудникНаСервере(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаКорректностиИНН_КПП_ОКПО(ТекстСообщения, РежимКонтроля, Объект)
	
	ТекстСообщения = "";
	
	РежимКонтроля = ПравоПользователя("СохранениеКонтрагентовСОшибочнымИНН");
	
	Если (Объект.ФормаСобственности <> Перечисления.ФормыСобственности.ЧастноеЛицо
		И Объект.ФормаСобственности <> Перечисления.ФормыСобственности.ПрочаяФормаСобственности)
		И РежимКонтроля <> Перечисления.ВидыКонтроля.НеКонтролировать Тогда
		
		// Проверим корректность ИНН
		Если Объект.ФормаСобственности <> Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			ОшибкиВИНН = НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
			Объект.ИНН,
			Объект.ФормаСобственности=Перечисления.ФормыСобственности.ЮридическоеЛицо,
			ТекстСообщения);
		КонецЕсли;
		
		// Проверим корректность кода по ОКПО
		ТекстОшибки = "";
		ОшибкиВОКПО = РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(
		Объект.КодПоОКПО,
		Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо,
		ТекстОшибки);
		
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + ТекстОшибки;
		
		Если Объект.ФормаСобственности <> Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
			
			// Проверим корректность КПП
			ТекстОшибки = "";
			ОшибкиВКПП =  РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Объект.КПП, ТекстОшибки);
			ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "") + ТекстОшибки;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
		ТекстСообщения= СтрЗаменить(ТекстСообщения,"физического","частного");
	ИначеЕсли Объект.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, НСтр("ru = 'физического лица'"), НСтр("ru = 'индивидуального предпринимателя'"));
	ИначеЕсли Объект.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, НСтр("ru = 'физического лица'"), НСтр("ru = 'обособленного подразделения'"));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПроверкиИНН(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("НеПроверятьИНН", Истина);
	ЗаписанКонтрагент = Записать(ДополнительныеПараметры);
	
	Если ЗаписанКонтрагент И РезультатОповещения = НСтр("ru = 'Записать и закрыть'") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСледующееИзображение(ДвижениеПросмотра)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ПолучитьСледующееИзображение(ЭтотОбъект, ДвижениеПросмотра);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСведенияДействующегоСогласия()
	
	// Надпись показываем только в определенных режимах
	Если
		ЗначениеЗаполнено(Объект.Ссылка)
		И (Объект.ФормаСобственности=Перечисления.ФормыСобственности.ЧастноеЛицо
			Или Объект.ФормаСобственности=Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель)
	Тогда
		
		Элементы.СведенияОСогласииГруппа.Видимость = Истина;
		
	Иначе
		
		Элементы.СведенияОСогласииГруппа.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	// Запрашиваем сведения о действующем согласии
	Согласие = ЗащитаПерсональныхДанных.ДействующееСогласиеНаОбработкуПерсональныхДанных(
		Объект.Ссылка,
		Справочники.Организации.ОрганизацияПоУмолчанию(),
		КонецДня(ТекущаяДатаСеанса())
	);
	
	Если Согласие = Неопределено Тогда
		
		Элементы.ПредупреждениеКартинка.Картинка = БиблиотекаКартинок.Предупреждение;
		Элементы.ПредупреждениеТекст.Заголовок = НСтр("ru = 'Не обнаружено действующего согласия на обработку персональных данных субъекта.'");
				
	Иначе
		
		ЧастиСообщения = Новый Массив;
		ЧастиСообщения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Субъект предоставил %1'"), Формат(Согласие.ДатаПолучения, "ДЛФ=D")) + " ");
		ЧастиСообщения.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'согласие'"), , , , ПолучитьНавигационнуюСсылку(Согласие.ДокументОснование)));
		ЧастиСообщения.Добавить(НСтр("ru = ' на обработку персональных данных'") + " ");
		
		Если ЗначениеЗаполнено(Согласие.СрокДействия) Тогда
			
			ЧастиСообщения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( " , " + НСтр("ru = 'которое действует до %1.'"),
				Формат(Согласие.СрокДействия, "ДЛФ=D")));
			
		Иначе
				
			ЧастиСообщения.Добавить(", " + НСтр("ru = 'которое действует бессрочно.'"));
			
		КонецЕсли;
		
		Элементы.ПредупреждениеКартинка.Картинка = БиблиотекаКартинок.Информация;
		Элементы.ПредупреждениеТекст.Заголовок = Новый ФорматированнаяСтрока(ЧастиСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВопросаЗаписиБезИИ(РезультатОповещения, ДополнительныеПараметры = Неопределено)Экспорт
	
	Если РезультатОповещения = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("НеПроверятьИИ", Истина);
	ЗаписанКонтрагент = Записать(ДополнительныеПараметры);
	
	Если ЗаписанКонтрагент И РезультатОповещения = "ЗаписатьИЗакрыть" Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьКПППоУмолчанию(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомСервер.СформироватьЗначениеПоУмолчанию(ЭтотОбъект, Объект, ПараметрыДействия, "КПП");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьКонтактноеЛицо(Ссылка, ДанныеРуководителя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН";
	Запрос.УстановитьПараметр("ИНН", ДанныеРуководителя.ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НоваяЗапись                    = Справочники.Контрагенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеРуководителя);
	НоваяЗапись.Наименование       = ДанныеРуководителя.Представление;
	НоваяЗапись.НаименованиеПолное = ДанныеРуководителя.Представление;
	НоваяЗапись.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
	НоваяЗапись.ВидКонтрагента     = Перечисления.ВидыКонтрагентов.КонтактноеЛицо;
	
	// Ищем должность в справочнике. если не нашли, то создаем.
	
	ДолжностьРуководителя = СокрЛП(ДанныеРуководителя.Должность);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Должности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Должности КАК Должности
	|ГДЕ
	|	Должности.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ДолжностьРуководителя);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Должность = СоздатьДолжность(ДолжностьРуководителя);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Должность = Выборка.Ссылка;
	КонецЕсли;
	НоваяЗапись.Должность = Должность;
	
	// Запишем контактное лицо
	Попытка
		НоваяЗапись.Записать();
		КонтактноеЛицо = НоваяЗапись.Ссылка;
	Исключение
		КонтактноеЛицо = Справочники.Контрагенты.ПустаяСсылка();
	КонецПопытки;
	
	ДанныеРуководителя = Неопределено;
	
	Возврат КонтактноеЛицо;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДолжность(НаименованиеДолжности)
	
	Должность = Справочники.Должности.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(НаименованиеДолжности)
		ИЛИ ТипЗнч(НаименованиеДолжности) <> Тип("Строка") Тогда
		
		Возврат Должность;
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Должности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Должности КАК Должности
		|ГДЕ
		|	Должности.Наименование = &НаименованиеДолжности
		|	И Должности.ПометкаУдаления = ЛОЖЬ
		|	И Должности.ЭтоГруппа = ЛОЖЬ";
	Запрос.УстановитьПараметр("НаименованиеДолжности", НаименованиеДолжности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	НоваяЗапись              = Справочники.Должности.СоздатьЭлемент();
	НоваяЗапись.Наименование = НаименованиеДолжности;
	
	// Запишем должность
	Попытка
		
		НоваяЗапись.Записать();
		Должность = НоваяЗапись.Ссылка;
		
	Исключение
		
		Должность = Справочники.Должности.ПустаяСсылка();
		
	КонецПопытки;
	
	Возврат Должность;
	
КонецФункции

&НаСервере
Процедура ДобавитьРуководителя()
	
	Если ДанныеРуководителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем в существующих
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактныеЛица.КонтактноеЛицо КАК КонтактноеЛицо
	|ИЗ
	|	РегистрСведений.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &Владелец
	|	И КонтактныеЛица.КонтактноеЛицо.ИНН = &ИНН";
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИНН", ДанныеРуководителя.ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		КонтактноеЛицо = СоздатьКонтактноеЛицо(Объект.Ссылка, ДанныеРуководителя);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КонтактноеЛицо = Выборка.КонтактноеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		
		МенеджерЗаписи = РегистрыСведений.КонтактныеЛица.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Владелец = Объект.Ссылка;
		МенеджерЗаписи.КонтактноеЛицо = КонтактноеЛицо;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.КонтактноеЛицо <> КонтактноеЛицо Тогда
			МенеджерЗаписи.Владелец        = Объект.Ссылка;
			МенеджерЗаписи.КонтактноеЛицо  = КонтактноеЛицо;
			МенеджерЗаписи.Основной        = Истина;
			МенеджерЗаписи.Взаимоотношение = Справочники.ВидыВзаимоотношений.КонтактноеЛицо;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзКонтактнойИнформацииСотрудника(ДанныеЗаполнения = Неопределено)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КИ Из ДанныеЗаполнения Цикл
		Если ЗначениеЗаполнено(КИ.Представление) Тогда
			Попытка
				ОбъектКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
					Новый Структура(
						"Вид",
						Справочники.ВидыКонтактнойИнформации[СтрЗаменить(КИ.Вид.ИмяПредопределенныхДанных, "Сотрудника", "Контрагента")])
				);
				Если ОбъектКИ.Количество() > 0 Тогда
					ЭтотОбъект[ОбъектКИ[0].ИмяРеквизита] = КИ.Представление;
					ЗаполнитьЗначенияСвойств(ОбъектКИ[0], КИ, "Представление,ЗначенияПолей");
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения свойств ""Представление"" и ""ЗначенияПолей""'"),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВопросаЗаписиВладельцаАвтомобиля(РезультатОповещения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
		
		Для Каждого ТекущаяСтрока Из Автомобили Цикл
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Владелец)
				И НЕ ТекущаяСтрока.Владелец = Объект.Ссылка Тогда
				
				ТекущаяСтрока.ПризнакИзменен = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПропуститьПроверкуВладельцаАвтомобилей");
	
	Записать(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеАвтомобиляПоVIN(АвтомобильVIN)
	
	Если ПустаяСтрока(АвтомобильVIN) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Автомобили.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТекущийАвтомобиль
	               |ИЗ
	               |	Справочник.Автомобили КАК Автомобили
	               |ГДЕ
	               |	Автомобили.VIN = &VINАвтомобиля
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТекущийАвтомобиль.Ссылка КАК Автомобиль,
	               |	АвтомобилиСрезПоследних.Значение КАК Значение
	               |ИЗ
	               |	ТекущийАвтомобиль КАК ТекущийАвтомобиль
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Автомобили.СрезПоследних(
	               |				,
	               |				Автомобиль В
	               |						(ВЫБРАТЬ
	               |							ТекущийАвтомобиль.Ссылка КАК Ссылка
	               |						ИЗ
	               |							ТекущийАвтомобиль КАК ТекущийАвтомобиль)
	               |					И ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.Хозяин)) КАК АвтомобилиСрезПоследних
	               |		ПО ТекущийАвтомобиль.Ссылка = АвтомобилиСрезПоследних.Автомобиль";
	Запрос.УстановитьПараметр("VINАвтомобиля", АвтомобильVIN);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Автомобиль,Владелец", Выборка.Автомобиль, Выборка.Значение);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОбновитьАвтомобилиКонтрагента()
	
	Автомобили.Очистить();
	
	// Заполнение списка авто
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль,
	|	АвтомобилиСрезПоследних.Период КАК Период,
	|	АвтомобилиСрезПоследних.Автомобиль.Наименование КАК Наименование,
	|	АвтомобилиСрезПоследних.Автомобиль.VIN КАК VIN,
	|	АвтомобилиСрезПоследних.Автомобиль.Модель КАК Модель,
	|	АвтомобилиСрезПоследних.Автомобиль.ВариантКомплектации КАК Комплектация,
	|	АвтомобилиСрезПоследних.Автомобиль.Цвет КАК Цвет,
	|	АвтомобилиСрезПоследних.Автомобиль.ГодВыпуска КАК ГодВыпуска,
	|	АвтомобилиСрезПоследних.Автомобиль.НомерШасси КАК НомерШасси,
	|	ЛОЖЬ КАК ПризнакУдален,
	|	ЛОЖЬ КАК ПризнакИзменен,
	|	ИСТИНА КАК ИзРегистра,
	|	АвтомобилиСрезПоследних.Автомобиль.Марка КАК Марка
	|ИЗ
	|	РегистрСведений.Автомобили.СрезПоследних(, ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.Хозяин)) КАК АвтомобилиСрезПоследних
	|ГДЕ
	|	АвтомобилиСрезПоследних.Значение = &Значение";
	Запрос.УстановитьПараметр("Значение", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Автомобили.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Пробег   = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(НоваяСтрока.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег);
		НоваяСтрока.ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(НоваяСтрока.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер);
		НоваяСтрока.Владелец = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(НоваяСтрока.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьАвтомобилиКонтрагента()

&НаСервере
Функция СохранитьАвтомобиль(Контрагент, АвтомобильСтрока = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(АвтомобильСтрока.Автомобиль) Тогда
		АвтоОбъект = Справочники.Автомобили.СоздатьЭлемент();
	Иначе
		АвтоОбъект = АвтомобильСтрока.Автомобиль.ПолучитьОбъект();
	КонецЕсли;
	
	АвтоОбъект.Модель              = АвтомобильСтрока.Модель;
	АвтоОбъект.Марка               = АвтомобильСтрока.Марка;
	АвтоОбъект.VIN                 = АвтомобильСтрока.VIN;
	АвтоОбъект.Цвет                = АвтомобильСтрока.Цвет;
	АвтоОбъект.ВариантКомплектации = АвтомобильСтрока.Комплектация;
	АвтоОбъект.ГодВыпуска          = АвтомобильСтрока.ГодВыпуска;
	АвтоОбъект.Наименование        = Справочники.Автомобили.СформироватьНаименованиеАвтомобиляПоПолям(
						АвтомобильСтрока.Модель, АвтомобильСтрока.Цвет, АвтомобильСтрока.ГосНомер, АвтомобильСтрока.VIN);
	АвтоОбъект.НаименованиеПолное  = АвтоОбъект.Наименование;
	АвтоОбъект.НомерШасси          = АвтомобильСтрока.НомерШасси;
	
	АвтоОбъект.Заполнить(Новый Структура);
	Если НЕ ЗначениеЗаполнено(АвтоОбъект.Код) Тогда
		АвтоОбъект.УстановитьНовыйКод();
	КонецЕсли;
	
	Попытка
		АвтоОбъект.Записать();
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(АвтоОбъект.Ссылка, Контрагент.Ссылка,Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин, НачалоДня(ТекущаяДатаСеанса()));
	
	Если Результат Тогда
		// запишем данные в регистр
		Если Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(АвтоОбъект.Ссылка, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег) <> АвтомобильСтрока.Пробег Тогда
			Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(АвтоОбъект.Ссылка, АвтомобильСтрока.Пробег,Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, НачалоДня(ТекущаяДатаСеанса()));
		КонецЕсли;
		Если Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(АвтоОбъект.Ссылка, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер) <> АвтомобильСтрока.ГосНомер Тогда
			Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(АвтоОбъект.Ссылка, АвтомобильСтрока.ГосНомер,Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, НачалоДня(ТекущаяДатаСеанса()));
		КонецЕсли;
	КонецЕсли;

	Если Результат Тогда
		АвтомобильСтрока.Автомобиль = АвтоОбъект.Ссылка;
		АвтомобильСтрока.ПризнакИзменен = Ложь;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СформироватьНаименованиеАвтомобиляПоУмолчанию()
	
	// Получим данные текущей строки табличной части
	АвтомобильСтрока = Элементы.Автомобили.ТекущиеДанные;

	АвтомобильСтрока.Наименование = СформироватьНаименованиеАвтомобиляПоПолям(
		АвтомобильСтрока.Модель,
		АвтомобильСтрока.Цвет,
		АвтомобильСтрока.ГосНомер,
		АвтомобильСтрока.VIN);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьНаименованиеАвтомобиляПоПолям(Модель = "", Цвет = "", ГосНомер = "", VIN = "")
	
	Возврат Справочники.Автомобили.СформироватьНаименованиеАвтомобиляПоПолям(Модель, Цвет, ГосНомер, VIN);
	
КонецФункции
 
&НаСервереБезКонтекста
Функция МаркаМодели(Модель)
	Возврат Модель.Марка;
КонецФункции
 
&НаСервере
Функция НеСтандартнаяМарка(ВыбраннаяМарка)
	Возврат НЕ ВыбраннаяМарка = Справочники.Марки.МаркаНеУказана;
КонецФункции

&НаСервере
Функция КарточкаАвтомобиляНаСервере(НомерСтроки)
	
	Возврат СохранитьАвтомобиль(Объект, Автомобили.НайтиПоИдентификатору(НомерСтроки));
	
КонецФункции

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Устанавливаем отбор по владельцу на динамический список Дисконтные карты
	Если ЗначениеЗаполнено(Объект.Ссылка) И ДисконтныеКарты.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество()=0 Тогда
		ЭлементОтбора = ДисконтныеКарты.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	
	// Устанавливаем отбор по владельцу на динамический список Подтверждающие документы.
	Если ЗначениеЗаполнено(Объект.Ссылка) И ПодтверждающиеДокументы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество()=0 Тогда
		ЭлементОтбора = ПодтверждающиеДокументы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	
	// Устанавливаем отбор по владельцу на динамический список Контактные лица
	Если ЗначениеЗаполнено(Объект.Ссылка) И КонтактныеЛица.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество()=0 Тогда
		ЭлементОтбора = КонтактныеЛица.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	
	// Устанавливаем отбор по владельцу на динамический список Владельцы контрагента
	Если ЗначениеЗаполнено(Объект.Ссылка) И ВладельцыКонтрагента.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество()=0 Тогда
		ЭлементОтбора = ВладельцыКонтрагента.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КонтактноеЛицо");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ГоловнойКонтрагент.ПараметрыВыбора, "Отбор.ФормаСобственности", Перечисления.ФормыСобственности.ЮридическоеЛицо);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	// Установим видимость элементов управления зависящих от формы собственности контрагента.
	ЧастноеЛицо     = (Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо);
	Предприниматель = (Объект.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	ОбособленноеПодразделение = (Объект.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение);
	ЮридическоеЛицо = (Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо);
	Элементы.ГруппаФио.Видимость = ЧастноеЛицо Или Предприниматель;
	Элементы.ГруппаНаименование.Видимость = Не ЧастноеЛицо И Не Предприниматель;
	Элементы.Склонения.Видимость = ЧастноеЛицо Или Предприниматель;
	Элементы.ЗаполнитьПоНаименованию.Видимость = Не ЧастноеЛицо И Не Предприниматель И Не ОбособленноеПодразделение;
	Элементы.ГруппаДанныеЮрЛица.Видимость = НЕ ЧастноеЛицо;
	Элементы.ГруппаДанныеФизЛица.Видимость = ЧастноеЛицо;
	Элементы.ИННИП.Видимость = Предприниматель;
	Элементы.ИННЮрЛица.Видимость = НЕ (Предприниматель ИЛИ ЧастноеЛицо ИЛИ ОбособленноеПодразделение);
	Элементы.ГоловнойКонтрагент.Видимость = ОбособленноеПодразделение;
	Элементы.ЗаполнитьПоИНН.Видимость = НЕ ОбособленноеПодразделение;
	Элементы.НадписьОтступ.Видимость = ОбособленноеПодразделение;
	Элементы.ГоловнойКонтрагентИНН.Видимость = ОбособленноеПодразделение;
	Элементы.ГруппаУчастникаГИСМТ.Видимость = ЮридическоеЛицо ИЛИ Предприниматель;
	Элементы.НашеПредприятие.Видимость = (ЮридическоеЛицо ИЛИ Предприниматель);
	ОбменГИСМТЧерезAPI = (ЭтотОбъект.РежимОбменаСЧестнымЗнаком = Перечисления.СпособыОбменаСЧестнымЗнаком.ЧерезAPI);
	Элементы.СтатусУчастникаГИСМТ.ТолькоПросмотр =
		ОбменГИСМТЧерезAPI ИЛИ НЕ ПравоПользователя("РазрешитьРедактироватьСтатусУчастникаГИСМТ");
	Элементы.ОбновитьСтатус.Видимость = 
		ОбменГИСМТЧерезAPI И ПравоДоступа("Изменение",  Метаданные.Справочники.Контрагенты);
	
	// Определим доступность реквизитов
	Элементы.КПП.Доступность = НЕ Предприниматель;
	Элементы.ИсторияКПП.Видимость = НЕ Предприниматель;
	ДостДолжность = Истина;
	ДостСотрудник = Истина;                                
	ДостФилиал = Истина;
	ДостСрокПоставки = Истина;
	ДостКонтакт = (Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.КонтактноеЛицо);
	ДостДолжность = Истина;
	Если Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Филиал Тогда
		ДостДолжность = Ложь;
		Если НЕ Объект.Должность.Пустая() Тогда
			Должность = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидКонтрагента <> Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо Тогда
		ДостСотрудник = Ложь;
		Если НЕ Объект.Сотрудник.Пустая() Тогда
			Объект.Сотрудник = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидКонтрагента <> Перечисления.ВидыКонтрагентов.Филиал Тогда
		ДостФилиал = Ложь;
		Если НЕ Объект.Филиал.Пустая() Тогда
			Объект.Филиал = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидКонтрагента <> Перечисления.ВидыКонтрагентов.Поставщик Тогда
		ДостСрокПоставки = Ложь;
		Если НЕ Объект.СрокПоставки=0 Тогда
			Объект.СрокПоставки = 0;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Должность.Видимость        = ДостДолжность;
	Элементы.Сотрудник.Видимость        = ДостСотрудник;
	Элементы.Филиал.Видимость           = ДостФилиал;
	Элементы.СрокПоставки.Видимость           = ДостСрокПоставки;
	Элементы.СтраницаДисконтныеКарты.Видимость= НЕ ДостКонтакт;
	
	// Настроим отображение заголовка кнопки "Выбор формы собственности"
	Если НЕ Элементы.ВыборФормыСобственности.Заголовок = Объект.ФормаСобственности Тогда
		Если Объект.ФормаСобственности = Перечисления.ФормыСобственности.ПрочаяФормаСобственности Тогда
			Элементы.ВыборФормыСобственности.Заголовок = НСтр("ru = 'Прочая форма собств'") + "... ";
		ИначеЕсли Объект.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
			Элементы.ВыборФормыСобственности.Заголовок = НСтр("ru = 'Индивидуальный пред'") + "...";
		ИначеЕсли Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
			Элементы.ВыборФормыСобственности.Заголовок = НСтр("ru = 'Юридическое лицо'") + "        ";
		ИначеЕсли Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			Элементы.ВыборФормыСобственности.Заголовок = НСтр("ru = 'Частное лицо'") + "                 ";
		ИначеЕсли Объект.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			Элементы.ВыборФормыСобственности.Заголовок = НСтр("ru = 'Обособленное подраз'") + "...";
		КонецЕсли;
	КонецЕсли;
	
	// Обработаем кнопки изображения на форме
	Элементы.СделатьОсновнойКартинкой.Пометка = ?(Объект.ФайлКартинки = ТекущаяКартинка 
		И ТекущаяКартинка <> Справочники.КонтрагентыПрисоединенныеФайлы.ПустаяСсылка(),
		Истина, Ложь);
	РаботаСФайламиАльфаАвто.УстановитьДоступностьКомандДляИзображений(Объект, ЭтаФорма);
	
	// Если объект не записан убираем доступность для элементов
	НовыйОбъект = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.СтраницаКонтактныеЛица.Доступность          = НовыйОбъект;
	Элементы.СтраницаПодтверждающиеДокументы.Доступность = НовыйОбъект;
	Элементы.СтраницаДисконтныеКарты.Доступность         = НовыйОбъект;
	
	// Ставим заголовок
	Элементы.ГрафикРаботы.Заголовок = ?(ЧастноеЛицо, НСтр("ru = 'Предпочтительное время контакта'"), НСтр("ru = 'График работы'"));
	
	Элементы.ГруппаАвтомобили.Доступность 				= ПравоДоступа("Изменение", Метаданные.Справочники.Автомобили);
	Элементы.АвтомобилиИсторияАвтомобиля.Доступность 	= Элементы.ГруппаАвтомобили.Доступность;
	
	УстановитьДатуОбновленияСтатусаГИСМТ();
	
	СтранаРегистрацииЗаполнена = (ЗначениеЗаполнено(Объект.СтранаРегистрации)
		И НЕ Объект.СтранаРегистрации = Справочники.СтраныМира.Россия);
	Элементы.НалоговыйНомер.Доступность = СтранаРегистрацииЗаполнена;
	Элементы.Иностранный.Доступность = СтранаРегистрацииЗаполнена;
	Элементы.СтранаРегистрацииЕАЭС.Доступность = СтранаРегистрацииЗаполнена;
	
	// ПростаяЭлектроннаяПодпись
	Если Элементы.Найти("ПодписаноСогласиеНаРаботуСПЭП") <> Неопределено Тогда
		Элементы.ПодписаноСогласиеНаРаботуСПЭП.Доступность = УчастникиПЭППереопределяемый.УчастникСоответствуетКритериям(Объект);
		Если Элементы.Найти("ОтправитьНаСерверПЭП") <> Неопределено Тогда
			Элементы.ОтправитьНаСерверПЭП.Доступность = Элементы.ПодписаноСогласиеНаРаботуСПЭП.Доступность;
		КонецЕсли;
	КонецЕсли;
	// Конец ПростаяЭлектроннаяПодпись
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Вызываем общий обработчик действия.
	УправлениеДиалогомСправочникаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	// Автомобили - условное оформление	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Автомобили.Имя);
		
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.ПризнакИзменен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Автомобили.Имя);
		
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.ПризнакУдален");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(175, 0, 0));
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,,10,,,,Истина));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Автомобили.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.ПризнакИзменен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.ПризнакУдален");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0, 175, 0));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
                                                     ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события в контексте клиента
	Если ДополнительныеПараметры = "КарточкаАвтомобиля" Тогда
		
		Если
			РезультатОповещения = КодВозвратаДиалога.Да
			И КарточкаАвтомобиляНаСервере(Элементы.Автомобили.ТекущаяСтрока)
		Тогда
			
			ПараметрыФормы = Новый Структура("Ключ", Элементы.Автомобили.ТекущиеДанные.Автомобиль);
			ОткрытьФорму(
				"Справочник.Автомобили.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры,"Вопрос") = "ВопросСоответствияМарок" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			МаркаАвтомобиля = ДополнительныеПараметры.ВыбранноеЗначение;
			МаркаАвтомобиляПриИзменении();
			МаркаАвтомобиляПриИзмененииНаСервере();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатОповещения) = Тип("СправочникСсылка.Модели") Тогда
		
		МодельАвтомобиля = РезультатОповещения;
		АвтомобильМодельПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьНаименованиеПолноеПоФИО()

	ЧастиНовогоНаименование = Новый Массив();
	ЧастиНовогоНаименование.Добавить(Объект.Фамилия);
	ЧастиНовогоНаименование.Добавить(Объект.Имя);
	ЧастиНовогоНаименование.Добавить(Объект.Отчество);
	НовоеНаименование = СтрСоединить(ЧастиНовогоНаименование, " ");
	
	Если НЕ ПустаяСтрока(НовоеНаименование) Тогда
		
		Объект.Наименование = НовоеНаименование;
		Объект.НаименованиеПолное = НовоеНаименование;
		Возврат;
		
	КонецЕсли;
	
	Объект.Наименование = НСтр("ru = 'Не заполнено'");
	Объект.НаименованиеПолное = "";
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФИО(ТекстИсходный)
	
	Текст = СокрЛП(ТекстИсходный);
	Пока СтрЧислоВхождений(Текст, "  ")>0 Цикл
		Текст = СтрЗаменить(Текст, "  ", " ");
	КонецЦикла;
	
	Текст = НРег(Текст);
	Если СтрНачинаетсяС(Текст, "ип ") Тогда
		Текст = Прав(Текст,СтрДлина(Текст)-СтрДлина("ип "));
	ИначеЕсли СтрНачинаетсяС(Текст, "индивидуальный предприниматель") Тогда 
		Текст =Прав(Текст, СтрДлина(Текст)- СтрДлина("индивидуальный предприниматель"));
	ИначеЕсли СтрЗаканчиваетсяНа(Текст, " ип") Тогда
		Текст = Лев(Текст, СтрДлина(Текст)- СтрДлина(" ип"));
	ИначеЕсли СтрЗаканчиваетсяНа(Текст, "индивидуальный предприниматель") Тогда
		Текст = Лев(Текст,СтрДлина(Текст)- СтрДлина("индивидуальный предприниматель"));
	КонецЕсли;
	Текст = СокрЛП(Текст);
			
	ФИО = Новый Структура;
	
	ЧислоСимволов      = СтрДлина(Текст);
	КоличествоПробелов = СтрЧислоВхождений(Текст, " "); 
	
	Если КоличествоПробелов=0 Тогда
		ПервыйПробел    = ЧислоСимволов;
		ПоследнийПробел = ЧислоСимволов;
	ИначеЕсли	 КоличествоПробелов=1 Тогда
		ПервыйПробел = СтрНайти(Текст," ",НаправлениеПоиска.СНачала);
		ПоследнийПробел = ЧислоСимволов;
	Иначе
		ПервыйПробел = СтрНайти(Текст," ",НаправлениеПоиска.СНачала);
		ПоследнийПробел = СтрНайти(Текст," ",НаправлениеПоиска.СКонца);
	КонецЕсли;
	
	Фамилия  = ТРег(СокрЛП(Сред(Текст, 0, ПервыйПробел)));
	Имя      = ТРег(СокрЛП(Сред(Текст, ПервыйПробел   +1, ПоследнийПробел  - ПервыйПробел    ))); 
	Отчество = ТРег(СокрЛП(Сред(Текст, ПоследнийПробел+1, ЧислоСимволов    - ПоследнийПробел )));
	НаименованиеПолное = СокрЛП(Фамилия + " " + Имя + " " + Отчество); 
	
	ФИО.Вставить("Фамилия",Фамилия);	
	ФИО.Вставить("Имя",Имя);	
	ФИО.Вставить("Отчество",Отчество);	
	ФИО.Вставить("НаименованиеПолное",НаименованиеПолное);	
	
	Возврат ФИО;
	
КонецФункции

&НаКлиенте
Процедура СохранитьПереименованиеВИстории(Контрагент)
	
	Если ПустаяСтрока(Контрагент.НаименованиеПолное) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	НаименованиеНаСегодня = ПолучитьНаименованияНаТекущийМомент(Контрагент, ДатаСеанса).НаименованиеПолное;
	
	Если Контрагент.ИсторияНаименований.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(НаименованиеНаСегодня) Тогда
		
		Если НЕ ЗначениеЗаполнено(НаименованиеНаСегодня) Тогда
			
			НаименованиеНаСегодня =  Контрагент.НаименованиеПолное;
			
		КонецЕсли;
		
		НайденныеСтроки = Контрагент.ИсторияНаименований.НайтиСтроки(Новый Структура("Период", Дата("00010101")));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденныеСтроки[0].НаименованиеПолное = НаименованиеНаСегодня;
			Возврат;
			
		КонецЕсли;
		
		НоваяСтрока = Контрагент.ИсторияНаименований.Добавить();
		НоваяСтрока.НаименованиеПолное = НаименованиеНаСегодня;
		НоваяСтрока.Период = Дата("00010101");
		
	КонецЕсли;
	
	Если НаименованиеНаСегодня = Контрагент.НаименованиеПолное Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НайденныеСтроки = Контрагент.ИсторияНаименований.НайтиСтроки(
		Новый Структура("Период", НачалоДня(ДатаСеанса)));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекСтрока = НайденныеСтроки[0];
		ТекСтрока.НаименованиеПолное = Контрагент.НаименованиеПолное;
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Контрагент.ИсторияНаименований.Добавить();
	НоваяСтрока.НаименованиеПолное = Контрагент.НаименованиеПолное;
	НоваяСтрока.Период = ДатаСеанса;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНаименованияНаТекущийМомент(Контрагент, ДатаСеанса)
	
	НаименованияКонтрагента = Новый Структура(
		"СокращенноеНаименование,НаименованиеПолное,НаименованиеДляПечатныхФорм",
		СтарыеНаименования.Наименование,
		СтарыеНаименования.НаименованиеПолное,
		СтарыеНаименования.НаименованиеПолное
	);
	
	Если Контрагент.Ссылка.Пустая() Тогда
		Возврат НаименованияКонтрагента;
	КонецЕсли;
	
	СтрокаСМаксимальнымПериодом = НайтиБлижайщееНаименование(Контрагент, ДатаСеанса);
	Если СтрокаСМаксимальнымПериодом = Неопределено Тогда
		Возврат НаименованияКонтрагента;
	КонецЕсли;
	
	НаименованияКонтрагента.НаименованиеПолное          = СтрокаСМаксимальнымПериодом.НаименованиеПолное;
	НаименованияКонтрагента.НаименованиеДляПечатныхФорм = СтрокаСМаксимальнымПериодом.НаименованиеПолное;
	Возврат НаименованияКонтрагента;
	
КонецФункции

&НаКлиенте
Функция НайтиБлижайщееНаименование(Контрагент, ДатаСеанса)
	
	СтрокаСМаксимальнымПериодом = Неопределено;
	
	Для Каждого Строка Из Контрагент.ИсторияНаименований Цикл
		
		Если Строка.Период > ДатаСеанса Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаСМаксимальнымПериодом = Неопределено ИЛИ СтрокаСМаксимальнымПериодом.Период < Строка.Период Тогда
			
			СтрокаСМаксимальнымПериодом = Строка;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат СтрокаСМаксимальнымПериодом;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКППНаТекущийМомент(Контрагент)
	
	Возврат РеквизитыСИсторией.ПолучитьКППНаДату(Контрагент, ТекущаяДатаСеанса());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьКППВИстории(Контрагент)
	
	Если ПустаяСтрока(Контрагент.КПП) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КППНаСегодня = ПолучитьКППНаТекущийМомент(Контрагент.Ссылка);
	
	Если Контрагент.ИсторияКПП.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(КППНаСегодня) Тогда
		
		Если НЕ ЗначениеЗаполнено(КППНаСегодня) Тогда
			
			КППНаСегодня =  Контрагент.КПП;
			
		КонецЕсли;
		
		НайденныеСтроки = Контрагент.ИсторияКПП.НайтиСтроки(Новый Структура("Период", Дата("00010101")));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденныеСтроки[0].КПП = КППНаСегодня;
			Возврат;
			
		КонецЕсли;
		
		НоваяСтрока = Контрагент.ИсторияКПП.Добавить();
		НоваяСтрока.КПП = КППНаСегодня;
		НоваяСтрока.Период = Дата("00010101");
		
	КонецЕсли;
	
	Если КППНаСегодня = Контрагент.КПП Тогда
		
		Возврат;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	#Иначе
		
		ДатаСеанса = ТекущаяДатаСеанса();
		
	#КонецЕсли
	
	НайденныеСтроки = Контрагент.ИсторияКПП.НайтиСтроки(
		Новый Структура("Период", НачалоДня(ДатаСеанса)));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекСтрока = НайденныеСтроки[0];
		ТекСтрока.КПП = Контрагент.КПП;
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Контрагент.ИсторияКПП.Добавить();
	НоваяСтрока.КПП = Контрагент.КПП;
	НоваяСтрока.Период = ДатаСеанса;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтарыеНаименования()
	
	СтарыеНаименования = Новый Структура(
		"Наименование,НаименованиеПолное",
		Объект.Наименование,
		Объект.НаименованиеПолное);
	СтарыеНаименования = Новый ФиксированнаяСтруктура(СтарыеНаименования);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИННЮрЛицаПриИзменении()
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
    ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	СформироватьКПППоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ФормаСобственностиКонтрагентаОбособлПодразделение = ?(Объект.ФормаСобственности 
		= ПредопределенноеЗначение("Перечисление.ФормыСобственности.ОбособленноеПодразделение"), Истина, Ложь);
	
	ТекущийГоловной = Объект.ГоловнойКонтрагент;
	
	Если ФормаСобственностиКонтрагентаОбособлПодразделение И ТекущийГоловной = Объект.Ссылка Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Выбранное значение некорректно' ");
		Сообщение.Поле = "Объект.ГоловнойКонтрагент";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		Объект.ГоловнойКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДатуОбновленияСтатусаГИСМТ()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПолученияСтатусаГИСМТ) Тогда
		
		ПредставлениеОбновленияСтатуса = НСтр("ru = 'Статус не был получен'");
		
	Иначе
		
		ПредставлениеОбновленияСтатуса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновлено %1'"),
			Формат(Объект.ДатаПолученияСтатусаГИСМТ, "ДЛФ=D"));
		
	КонецЕсли;
	
	Элементы.ОбновлениеСтатусаГИСМТ.Заголовок = ПредставлениеОбновленияСтатуса;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацияПользователя()
	
	Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
	
КонецФункции

&НаКлиенте
Процедура РезультатОбновленияСтатусаУчастника(РезультатОбмена, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуПроверкиКонтрагента()
	
	НоваяКоманда 			= Команды.Добавить("ПроверитьКонтрагента");     
	НоваяКоманда.Действие 	= "ПроверитьКонтрагента";
	НоваяКоманда.Заголовок 	= "Проверить контрагента";
	НоваяКоманда.Действие	= "ПроверитьКонтрагента";

	НовыйЭлемент 			= Элементы.Добавить("ПроверитьКонтрагента", Тип("КнопкаФормы"),
								Элементы.ФормаКоманднаяПанель);
	НовыйЭлемент.ИмяКоманды 			= "ПроверитьКонтрагента";
	НовыйЭлемент.ТолькоВоВсехДействиях 	= Истина;
	
КонецПроцедуры    

&НаСервере
Функция  ОпределитьТекущуюДату()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРезидентРоссии(Объект)
	
	Возврат Справочники.Контрагенты.ЭтоРезидентРоссии(Объект);
	
КонецФункции

// Команды1СПАРКРиски
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец Команды1СПАРКРиски

#Область АльфаАвтоРаботаСФайлами

&НаКлиенте
Процедура Подключаемый_РаботаСФайламиАльфаАвтоОбработкаОповещения(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, Объект);
	
	Если РезультатОповещения.Свойство("НоваяКартинкаОписания") Тогда 
		ЭтотОбъект.Модифицированность = Истина; 
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция СправочникДоступенДляРедактирования()
	
	МетаданныеСправочника = Метаданные.Справочники.Контрагенты;	
	Возврат ПравоДоступа("Редактирование", МетаданныеСправочника);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРеквизитыПроверкиКонтрагента(Форма)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда		
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо        = (Форма.Объект.ФормаСобственности = ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЮридическоеЛицо")
																	 ИЛИ Форма.Объект.ФормаСобственности = ПредопределенноеЗначение("Перечисление.ФормыСобственности.ПрочаяФормаСобственности"));																	 
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент  = Форма.Объект.Иностранный;		                                                               
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатОтветаОбОчисеткеВладельцаАвтомобиля(
		Ответ,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ДополнительныеПараметры.СтрокаАвтомобиля.Владелец = ?(
		Ответ = КодВозвратаДиалога.Да,
		ДополнительныеПараметры.НеопределенныйВладелец,
		ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатСозданияГоловногоКонтрагента(
		Результат,
		ДополнительныеПараметры = Неопределено) Экспорт
		
	Если НЕ Результат = Неопределено Тогда
		
		Объект.ГоловнойКонтрагент = Результат;
		ГоловнойКонтрагентПриИзменении(Неопределено);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ВидКонтрагентаСПАРКРиски()
	
	ВидКонтрагента = Неопределено;
	Если Объект.ФормаСобственности = ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЮридическоеЛицо") Тогда
		ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо");
	ИначеЕсли Объект.ФормаСобственности =
			ПредопределенноеЗначение("Перечисление.ФормыСобственности.ИндивидуальныйПредприниматель") Тогда
		ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель");
	КонецЕсли;
	
	Возврат ВидКонтрагента;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаВопросаЗаписи(РезультатОповещения, ДополнительныеПараметры = Неопределено)Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да И Записать() Тогда
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "РедактироватьМетки", Ложь) Тогда
			УправлениеСвойствамиАльфаАвтоКлиент.ВыполнитьКоманду(ЭтотОбъект, Элементы.Найти("РедактироватьМетки"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
