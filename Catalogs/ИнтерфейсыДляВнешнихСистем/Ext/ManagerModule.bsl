// Модуль менеджера справочника "Интерфейсы для внешних систем"

// При создании нового типа интерфейса необходимо:
//   1) В функцию ПолучитьКлючиПараметров (область ПрограммныйИнтерфейс) добавить новые ключи параметров
//        (если новые параметры есть)
//   2) В области ПрограммныйИнтерфейс.ФункцииПолученияШаблоновНастроек добавить новую экспортную функцию
//        ПолучитьШаблонНастроек + Имя значения нового типа интерфейса
//   3) В области ПрограммныйИнтерфейс.ФункцииПолученияСтрокПараметров добавить новые экспортные функции
//        ПолучитьПараметр + ключ параметра (если новые параметры есть)
//   4) Если новые параметры есть, то в форме элемента создать новые реквизиты формы с именами, равными ключам новых
//        параметров, вынести их на форму в группу ГруппаДополнительныеПараметрыИнтерфейса и выполнить настройку
//        этих элементов формы

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Поместить пароль, токен или секретный ключ в безопасное хранилище
//
// Параметры:
//  Ссылка - СправочникСсылка.ИнтерфейсыДляВнешнихСистем - элемент, которому принадлежит пароль или токен
//  СохраняемоеЗначение - Строка - пароль, токен или секретный ключ
//  КлючЗначения - Строка - "Пароль", "Токен" или "СекретныйКлюч"
//
Процедура СохранитьПарольИлиТокен(Ссылка, СохраняемоеЗначение, КлючЗначения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Ссылка, СохраняемоеЗначение, КлючЗначения);
	
КонецПроцедуры // СохранитьПарольИлиТокен()

// Получить пароль или токен из безопасного хранилища
//
// Параметры:
//  Ссылка - СправочникСсылка.ИнтерфейсыДляВнешнихСистем - элемент, для которого нужно получить пароль или токен
//  КлючЗначения - Строка - "Пароль" или "Токен"
//
// Возвращаемое значение:
//   Строка - Пароль или Токен
//
Функция ПолучитьПарольИлиТокен(Ссылка, КлючЗначения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Ссылка, КлючЗначения);
	
	ПолученноеЗначение = "";
	
	Если ТипЗнч(ДанныеХранилища) = Тип("Строка") Тогда
		
		ПолученноеЗначение = ДанныеХранилища;
		
	КонецЕсли;
	
	Возврат ПолученноеЗначение;
	
КонецФункции // ПолучитьПарольИлиТокен()

// Получить массив ключей параметров
//
// Возвращаемое значение:
//   Массив из Строка - массив ключей параметров
//
Функция ПолучитьКлючиПараметров() Экспорт
	
	// Во избежание случайного дублирования ключи параметров нужно располагать в алфавитном порядке
	
	МассивКлючейПараметров = Новый Массив;
	МассивКлючейПараметров.Добавить("АдресВозвратаПослеОплаты");
    МассивКлючейПараметров.Добавить("ВремяЖизниПлатежнойСсылки");
	МассивКлючейПараметров.Добавить("ИдентификаторБанкаУчастникаСБП");
	МассивКлючейПараметров.Добавить("ИдентификаторМерчанта");
	МассивКлючейПараметров.Добавить("КассаККМ");
	МассивКлючейПараметров.Добавить("ОбрабатыватьВходящиеУведомления");
	МассивКлючейПараметров.Добавить("СоздаватьФискальныеЧекиВДанномСервисе");
	МассивКлючейПараметров.Добавить("СчетАвтомобилиШаблонСообщенийСМС");
	МассивКлючейПараметров.Добавить("СчетАвтомобилиШаблонЭлектронныхПисем");
	МассивКлючейПараметров.Добавить("СчетШаблонСообщенийСМС");
	МассивКлючейПараметров.Добавить("СчетШаблонЭлектронныхПисем");
	МассивКлючейПараметров.Добавить("ФискальныйРегистратор");
	
	Возврат МассивКлючейПараметров;
	
КонецФункции // ПолучитьКлючиПараметров()

// Получить параметры взаимодействия с внешней системой
//
// Параметры:
//  Ссылка - СправочникСсылка.ИнтерфейсыДляВнешнихСистем - элемент, из которого нужно получить параметры взаимодействия
//
// Возвращаемое значение:
//   Структура - набор параметров
//
Функция ПолучитьПараметрыВзаимодействия(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнтерфейсыДляВнешнихСистем.Ссылка КАК Интерфейс,
	|	ИнтерфейсыДляВнешнихСистем.ТипИнтерфейса КАК ТипИнтерфейса,
	|	ИнтерфейсыДляВнешнихСистем.НеИспользуется КАК НеИспользуется,
	|	ИнтерфейсыДляВнешнихСистем.Назначение КАК Назначение,
	|	ИнтерфейсыДляВнешнихСистем.Адрес КАК Адрес,
	|	ИнтерфейсыДляВнешнихСистем.Логин КАК Логин,
	|	ИнтерфейсыДляВнешнихСистем.ИспользоватьЗащищенноеСоединение КАК ИспользоватьЗащищенноеСоединение,
	|	ИнтерфейсыДляВнешнихСистем.Порт КАК Порт,
	|	ИнтерфейсыДляВнешнихСистем.СпособАвторизации КАК СпособАвторизации
	|ИЗ
	|	Справочник.ИнтерфейсыДляВнешнихСистем КАК ИнтерфейсыДляВнешнихСистем
	|ГДЕ
	|	ИнтерфейсыДляВнешнихСистем.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ПараметрыВзаимодействия = Новый Структура;
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ПараметрыВзаимодействия.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Если Выборка.СпособАвторизации <> "" Тогда
		СохраненноеЗначение = ПолучитьПарольИлиТокен(Ссылка, Выборка.СпособАвторизации);
		ПараметрыВзаимодействия.Вставить(Выборка.СпособАвторизации, СохраненноеЗначение);	
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыВзаимодействия.Адрес);
	ПараметрыВзаимодействия.Вставить("ПутьНаСервере", СтруктураURI.ПутьНаСервере);
	ПараметрыВзаимодействия.Вставить("Хост", СтруктураURI.Хост);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнтерфейсыДляВнешнихСистемПараметрыИнтерфейса.КлючПараметра КАК КлючПараметра,
	|	ИнтерфейсыДляВнешнихСистемПараметрыИнтерфейса.ЗначениеПараметра КАК ЗначениеПараметра
	|ИЗ
	|	Справочник.ИнтерфейсыДляВнешнихСистем.ПараметрыИнтерфейса КАК ИнтерфейсыДляВнешнихСистемПараметрыИнтерфейса
	|ГДЕ
	|	ИнтерфейсыДляВнешнихСистемПараметрыИнтерфейса.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыВзаимодействия.Вставить(Выборка.КлючПараметра, Выборка.ЗначениеПараметра);
	КонецЦикла;
	
	Если ПараметрыВзаимодействия.ТипИнтерфейса = Перечисления.ТипыИнтерфейсовДляВнешнихСистем.СБП_1С Тогда
		ТипАутентификации = ПлатежныйШлюзСБП_1С.ПолучитьТипАутентификацииБанка(
			ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП);
		ПараметрыВзаимодействия.Вставить("ТипАутентификации", ТипАутентификации);
	КонецЕсли;
	
	Возврат ПараметрыВзаимодействия;
	
КонецФункции // ПолучитьПараметрыВзаимодействия()

#Область ОбработчикиРеквизитов

// Обработчик события возникающего при изменении данных реквизита "Тип интерфейса".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура ТипИнтерфейсаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипИнтерфейса) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьНаименование(Объект);
	
	ШаблонНастроек = ПолучитьШаблонНастроек(Объект);
	
	Если ШаблонНастроек = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.Адрес = ШаблонНастроек.Адрес;
	Объект.ИспользоватьЗащищенноеСоединение = ШаблонНастроек.ИспользоватьЗащищенноеСоединение;
	Объект.Порт = ШаблонНастроек.Порт;
	
	ШаблонТаблицыПараметров = ШаблонНастроек.ШаблонТаблицыПараметров;
	
	СтруктураКлючПараметра = Новый Структура("КлючПараметра");
	
	// Добавить в табличную часть ПараметрыИнтерфейса строки с новыми ключами
	Для каждого СтрокаШаблона Из ШаблонТаблицыПараметров Цикл
		ЗаполнитьЗначенияСвойств(СтруктураКлючПараметра, СтрокаШаблона);
		НайденныеСтроки = Объект.ПараметрыИнтерфейса.НайтиСтроки(СтруктураКлючПараметра);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТабЧасти = Объект.ПараметрыИнтерфейса.Добавить();
		Иначе
			СтрокаТабЧасти = НайденныеСтроки[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, СтрокаШаблона);
	КонецЦикла;
	
	// Удалить из табличной части ПараметрыИнтерфейса строки с ключами, которых в шаблоне нет
	ИндексСтрокиТабЧасти = Объект.ПараметрыИнтерфейса.Количество();
	Пока ИндексСтрокиТабЧасти > 0 Цикл
		ИндексСтрокиТабЧасти = ИндексСтрокиТабЧасти - 1;
		СтрокаТабЧасти = Объект.ПараметрыИнтерфейса[ИндексСтрокиТабЧасти];
		ЗаполнитьЗначенияСвойств(СтруктураКлючПараметра, СтрокаТабЧасти);
		НайденныеСтроки = ШаблонТаблицыПараметров.НайтиСтроки(СтруктураКлючПараметра);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Объект.ПараметрыИнтерфейса.Удалить(СтрокаТабЧасти);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Назначение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура НазначениеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	СформироватьНаименование(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "НеИспользуется".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции.
//
Процедура НеИспользуетсяПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	СформироватьНаименование(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииПолученияШаблоновНастроек

// Имена функций в этой области формировать по формуле "ПолучитьШаблонНастроек" + Имя значения перечисления
// ТипыИнтерфейсовДляВнешнихСистем
// Для удобства сопровождения функции желательно располагать в алфавитном порядке

// Получить шаблон настроек для типа интерфейса СБП_1С
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - объект, для которого получается шаблон
//
// Возвращаемое значение:
//   Структура - шаблон настроек со значениями по умолчанию
//    * Адрес - Строка - адрес сервиса
//    * ЗащищенноеСоединение - Булево - признак использования защищенного соединения
//    * Порт - Число - порт для соединения
//    * ШаблонТаблицыПараметров - ТаблицаЗначений - шаблон для заполнения табличной части ПараметрыИнтерфейса
//
Функция ПолучитьШаблонНастроекСБП_1С(Объект) Экспорт
	
	ШаблонНастроек = Новый Структура;
	
	ШаблонНастроек.Вставить("Адрес", "https://payment-gateway.1c.ru");
	ШаблонНастроек.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	ШаблонНастроек.Вставить("Порт", 443);
	
	ШаблонТаблицыПараметров = Объект.ПараметрыИнтерфейса.Выгрузить();
	ШаблонТаблицыПараметров.Очистить();
	
	ДобавитьПараметр("ВремяЖизниПлатежнойСсылки", ШаблонТаблицыПараметров);
	ДобавитьПараметр("ИдентификаторБанкаУчастникаСБП", ШаблонТаблицыПараметров);
	ДобавитьПараметр("ИдентификаторМерчанта", ШаблонТаблицыПараметров);
	ДобавитьПараметр("КассаККМ", ШаблонТаблицыПараметров);
	ДобавитьПараметр("ФискальныйРегистратор", ШаблонТаблицыПараметров);
	ДобавитьПараметр("СчетШаблонСообщенийСМС", ШаблонТаблицыПараметров);
	ДобавитьПараметр("СчетШаблонЭлектронныхПисем", ШаблонТаблицыПараметров);
	ДобавитьПараметр("СчетАвтомобилиШаблонСообщенийСМС", ШаблонТаблицыПараметров);
	ДобавитьПараметр("СчетАвтомобилиШаблонЭлектронныхПисем", ШаблонТаблицыПараметров);
	
	ШаблонНастроек.Вставить("ШаблонТаблицыПараметров", ШаблонТаблицыПараметров);
	
	Возврат ШаблонНастроек;
	
КонецФункции // ПолучитьШаблонТаблицыПараметровСБП_1С()

// Получить шаблон настроек для типа интерфейса ЮКасса
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - объект, для которого получается шаблон
//
// Возвращаемое значение:
//   Структура - шаблон настроек со значениями по умолчанию
//    * Адрес - Строка - адрес сервиса
//    * ЗащищенноеСоединение - Булево - признак использования защищенного соединения
//    * Порт - Число - порт для соединения
//    * ШаблонТаблицыПараметров - ТаблицаЗначений - шаблон для заполнения табличной части ПараметрыИнтерфейса
//
Функция ПолучитьШаблонНастроекЮКасса(Объект) Экспорт
	
	ШаблонНастроек = Новый Структура;
	
	ШаблонНастроек.Вставить("Адрес", "https://api.yookassa.ru");
	ШаблонНастроек.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	ШаблонНастроек.Вставить("Порт", 443);
	
	ШаблонТаблицыПараметров = Объект.ПараметрыИнтерфейса.Выгрузить();
	ШаблонТаблицыПараметров.Очистить();
	
	ДобавитьПараметр("АдресВозвратаПослеОплаты", ШаблонТаблицыПараметров);
	ДобавитьПараметр("ВремяЖизниПлатежнойСсылки", ШаблонТаблицыПараметров);
	ДобавитьПараметр("КассаККМ", ШаблонТаблицыПараметров);
	ДобавитьПараметр("ОбрабатыватьВходящиеУведомления", ШаблонТаблицыПараметров);
	ДобавитьПараметр("СоздаватьФискальныеЧекиВДанномСервисе", ШаблонТаблицыПараметров);
	ДобавитьПараметр("СчетАвтомобилиШаблонСообщенийСМС", ШаблонТаблицыПараметров);
	ДобавитьПараметр("СчетАвтомобилиШаблонЭлектронныхПисем", ШаблонТаблицыПараметров);
	ДобавитьПараметр("СчетШаблонСообщенийСМС", ШаблонТаблицыПараметров);
	ДобавитьПараметр("СчетШаблонЭлектронныхПисем", ШаблонТаблицыПараметров);
	ДобавитьПараметр("ФискальныйРегистратор", ШаблонТаблицыПараметров);
	
	ШаблонНастроек.Вставить("ШаблонТаблицыПараметров", ШаблонТаблицыПараметров);
	
	Возврат ШаблонНастроек;
	
КонецФункции // ПолучитьШаблонТаблицыПараметровЮКасса()

#КонецОбласти

#Область ФункцииПолученияСтрокПараметров

// Имена функций в этой области формировать по формуле "ПолучитьПараметр" + Ключ
// Во избежание случайного создания дублей функции необходимо располагать в алфавитном порядке

// Получить параметр АдресВозвратаПослеОплаты 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - Строка
//
Функция ПолучитьПараметрАдресВозвратаПослеОплаты() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "АдресВозвратаПослеОплаты");
	Результат.Вставить("Параметр", НСтр("ru='Адрес возврата после оплаты'"));
	Результат.Вставить("ЗначениеПараметра", "https://yandex.ru/");
	
	Возврат Результат;
	
КонецФункции

// Получить параметр ВремяЖизниПлатежнойСсылки 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - Число
//
Функция ПолучитьПараметрВремяЖизниПлатежнойСсылки() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "ВремяЖизниПлатежнойСсылки");
	Результат.Вставить("Параметр", НСтр("ru='Время жизни платежной ссылки в минутах'"));
	Результат.Вставить("ЗначениеПараметра", 60);
	
	Возврат Результат;
	
КонецФункции

// Получить параметр ИдентификаторБанкаУчастникаСБП 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - Строка
//
Функция ПолучитьПараметрИдентификаторБанкаУчастникаСБП() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "ИдентификаторБанкаУчастникаСБП");
	Результат.Вставить("Параметр", НСтр("ru='Идентификатор банка - участника СБП'"));
	Результат.Вставить("ЗначениеПараметра", "");
	
	Возврат Результат;
	
КонецФункции

// Получить параметр ИдентификаторМерчанта 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - Строка
//
Функция ПолучитьПараметрИдентификаторМерчанта() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "ИдентификаторМерчанта");
	Результат.Вставить("Параметр", НСтр("ru='Идентификатор мерчанта'"));
	Результат.Вставить("ЗначениеПараметра", "");
	
	Возврат Результат;
	
КонецФункции

// Получить параметр КассаККМ 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - СправочникСсылка.КассыККМ
//
Функция ПолучитьПараметрКассаККМ() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "КассаККМ");
	Результат.Вставить("Параметр", НСтр("ru='Касса ККМ'"));
	Результат.Вставить("ЗначениеПараметра", Справочники.КассыККМ.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

// Получить параметр ОбрабатыватьВходящиеУведомления 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - Булево
//
Функция ПолучитьПараметрОбрабатыватьВходящиеУведомления() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "ОбрабатыватьВходящиеУведомления");
	Результат.Вставить("Параметр", НСтр("ru='Обрабатывать входящие уведомления (callback)'"));
	Результат.Вставить("ЗначениеПараметра", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Получить параметр СоздаватьФискальныеЧекиВДанномСервисе 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - Булево
//
Функция ПолучитьПараметрСоздаватьФискальныеЧекиВДанномСервисе() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "СоздаватьФискальныеЧекиВДанномСервисе");
	Результат.Вставить("Параметр", НСтр("ru='Создавать фискальные чеки в данном сервисе'"));
	Результат.Вставить("ЗначениеПараметра", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Получить параметр СчетАвтомобилиШаблонСообщенийСМС 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - СправочникСсылка.ШаблоныСообщений
//
Функция ПолучитьПараметрСчетАвтомобилиШаблонСообщенийСМС() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "СчетАвтомобилиШаблонСообщенийСМС");
	Результат.Вставить("Параметр", НСтр("ru='Шаблон сообщений SMS для Счета на оплату за автомобили'"));
	Результат.Вставить("ЗначениеПараметра", Справочники.ШаблоныСообщений.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

// Получить параметр СчетАвтомобилиШаблонЭлектронныхПисем 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - СправочникСсылка.ШаблоныСообщений
//
Функция ПолучитьПараметрСчетАвтомобилиШаблонЭлектронныхПисем() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "СчетАвтомобилиШаблонЭлектронныхПисем");
	Результат.Вставить("Параметр", НСтр("ru='Шаблон электронных писем для Счета на оплату за автомобили'"));
	Результат.Вставить("ЗначениеПараметра", Справочники.ШаблоныСообщений.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

// Получить параметр СчетШаблонСообщенийСМС 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - СправочникСсылка.ШаблоныСообщений
//
Функция ПолучитьПараметрСчетШаблонСообщенийСМС() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "СчетШаблонСообщенийСМС");
	Результат.Вставить("Параметр", НСтр("ru='Шаблон сообщений SMS для Счета на оплату'"));
	Результат.Вставить("ЗначениеПараметра", Справочники.ШаблоныСообщений.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

// Получить параметр СчетШаблонЭлектронныхПисем 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - СправочникСсылка.ШаблоныСообщений
//
Функция ПолучитьПараметрСчетШаблонЭлектронныхПисем() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "СчетШаблонЭлектронныхПисем");
	Результат.Вставить("Параметр", НСтр("ru='Шаблон электронных писем для Счета на оплату'"));
	Результат.Вставить("ЗначениеПараметра", Справочники.ШаблоныСообщений.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

// Получить параметр ФискальныйРегистратор 
//
// Возвращаемое значение:
//   Структура - реквизиты параметра
//    * КлючПараметра - Строка
//    * Параметр - Строка - представление параметра
//    * ЗначениеПараметра - СправочникСсылка.ПодключаемоеОборудование
//
Функция ПолучитьПараметрФискальныйРегистратор() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючПараметра", "ФискальныйРегистратор");
	Результат.Вставить("Параметр", НСтр("ru='Фискальный регистратор'"));
	Результат.Вставить("ЗначениеПараметра", Справочники.ПодключаемоеОборудование.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, по которому формируется шаблон
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	Если Объект.ЭтоГруппа Тогда
		
		Возврат ОбязательныеРеквизиты;
		
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("ТипИнтерфейса");
	ОбязательныеРеквизиты.Добавить("Адрес");
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты =  Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	Если Объект.ЭтоГруппа Тогда
		
		Возврат УникальныеРеквизиты;
		
	КонецЕсли;
	
	УникальныеПараметрыИнтерфейса = Новый Массив;
	УникальныеПараметрыИнтерфейса.Добавить("КлючПараметра");
	УникальныеРеквизиты.Вставить("ПараметрыИнтерфейса", УникальныеПараметрыИнтерфейса);
	
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ТипИнтерфейса");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить шаблон настроек, соответствующий типу интерфейса
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого получается шаблон
//
// Возвращаемое значение:
//   Структура - шаблон настроек со значениями по умолчанию
//    * Адрес - Строка - адрес сервиса
//    * ЗащищенноеСоединение - Булево - признак использования защищенного соединения
//    * Порт - Число - порт для соединения
//    * ШаблонТаблицыПараметров - ТаблицаЗначений - шаблон для заполнения табличной части ПараметрыИнтерфейса
//
Функция ПолучитьШаблонНастроек(Объект)
	
	ФункцииСозданияШаблоновНастроек = ПолучитьФункцииСозданияШаблоновНастроек();
	
	ИмяФункцииСозданияШаблоновНастроек = ФункцииСозданияШаблоновНастроек.Получить(Объект.ТипИнтерфейса);
	
	ПараметрыВызова = Новый Массив;
	ПараметрыВызова.Добавить(Объект);
	
	Возврат ОбщегоНазначения.ВызватьФункциюКонфигурации(ИмяФункцииСозданияШаблоновНастроек, ПараметрыВызова);
	
КонецФункции // ПолучитьШаблонНастроек()

// Получить соответствие функций создания шаблонов настроек типам интерфейсов
//
// Возвращаемое значение:
//   Соответствие
//     * Ключ - ПеречислениеСсылка.ТипыИнтерфейсовДляВнешнихСистем
//     * Значение - Строка - полное имя процедуры
//
Функция ПолучитьФункцииСозданияШаблоновНастроек()
	
	Префикс = "Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьШаблонНастроек";
	
	Функции = Новый Соответствие;
	ЗначенияПеречисленияМетаданные = Метаданные.Перечисления.ТипыИнтерфейсовДляВнешнихСистем.ЗначенияПеречисления;
	ЗначенияПеречисления = Перечисления.ТипыИнтерфейсовДляВнешнихСистем;
	Для Индекс = 0 По ЗначенияПеречисленияМетаданные.Количество() - 1 Цикл
		ЗначениеПеречисления = ЗначенияПеречисления[Индекс];
		ИмяЗначенияПеречисления = ЗначенияПеречисленияМетаданные[Индекс].Имя;
		ИмяФункции = Префикс + ИмяЗначенияПеречисления;
		Функции.Вставить(ЗначениеПеречисления, ИмяФункции);
	КонецЦикла;
	
	Возврат Функции;
	
КонецФункции // ПолучитьФункцииСозданияШаблоновНастроек()

// Сформировать наименование объекта по выбранным значениям реквизитов
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого формипуется наименование
//
Процедура СформироватьНаименование(Объект)
	
	Если Объект.ЭтоГруппа Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипИнтерфейса) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ШаблонНаименование = НСтр("ru='%1 %2'");
	
	Если ЗначениеЗаполнено(Объект.Назначение) Тогда
		
		Если ТипЗнч(Объект.Назначение) = Тип("СправочникСсылка.Организации") Тогда
			ШаблонНазначение = НСтр("ru='организации %1'");
		ИначеЕсли ТипЗнч(Объект.Назначение) = Тип("СправочникСсылка.ФилиалыКомпании") Тогда
			ШаблонНазначение = НСтр("ru='филиала %1'");
		Иначе	
			ШаблонНазначение = НСтр("ru='подразделения %1'");
		КонецЕсли;
		
		Назначение = СтрШаблон(ШаблонНазначение, Объект.Назначение);
		
	Иначе
		
		Назначение = НСтр("ru='всей компании'");
		
	КонецЕсли;
	
	Объект.Наименование = СтрШаблон(ШаблонНаименование, Объект.ТипИнтерфейса, Назначение);
	
	Если Объект.НеИспользуется Тогда
		
		ШаблонНеИспользуется = НСтр("ru='(не используется)'");
		Объект.Наименование = СтрШаблон(ШаблонНаименование, Объект.Наименование, ШаблонНеИспользуется);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавить в таблицу значений строку для указанного ключа параметров
//
// Параметры:
//  КлючПараметра           - Строка
//  ШаблонТаблицыПараметров - ТаблицаЗначений
//
Процедура ДобавитьПараметр(КлючПараметра, ШаблонТаблицыПараметров)
	
	ИмяМетода = "Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметр" + КлючПараметра;
	
	ДанныеПараметра = ОбщегоНазначения.ВызватьФункциюКонфигурации(ИмяМетода);
	НоваяСтрока = ШаблонТаблицыПараметров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПараметра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли