#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	ПрефиксКода = Лев("00000000000000000000000", 7);
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Штучный";
	Элемент.Наименование = НСтр("ru = 'Штучный'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "01";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Весовой";
	Элемент.Наименование = НСтр("ru = 'Весовой'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Весовой = Истина;
	Элемент.Код = ПрефиксКода + "02";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("кг");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Размерный";
	Элемент.Наименование = НСтр("ru = 'Размерный'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "03";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Серийный";
	Элемент.Наименование = НСтр("ru = 'Серийный'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "04";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("-");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Услуга";
	Элемент.Наименование = НСтр("ru = 'Услуга'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "05";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("-");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Тара";
	Элемент.Наименование = НСтр("ru = 'Тара'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "06";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Тара;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Набор";
	Элемент.Наименование = НСтр("ru = 'Набор'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "07";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Комплект";
	Элемент.Наименование = НСтр("ru = 'Комплект'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "08";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Комплект;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОсновноеСредство";
	Элемент.Наименование = НСтр("ru = 'Основное средство'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "09";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.ПрочиеАктивы;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("-");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НематериальныйАктив";
	Элемент.Наименование = НСтр("ru = 'Нематериальный актив'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "10";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.ПрочиеАктивы;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("-");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "МатериалыИСпецоснастка";
	Элемент.Наименование = НСтр("ru = 'Материалы и спецоснастка'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "11";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.ПрочиеАктивы;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("-");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Спецодежда";
	Элемент.Наименование = НСтр("ru = 'Спецодежда'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "12";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.ПрочиеАктивы;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("-");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Шины";
	Элемент.Наименование = НСтр("ru = 'Шины'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "21";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Шины;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Диски";
	Элемент.Наименование = НСтр("ru = 'Диски'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "24";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Диски;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НомерныеАгрегаты";
	Элемент.Наименование = НСтр("ru = 'Номерные агрегаты'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "22";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.НомерныеАгрегаты;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Авторабота";
	Элемент.Наименование = НСтр("ru = 'Авторабота'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "23";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("-");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Работа;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Инструменты";
	Элемент.Наименование = НСтр("ru = 'Инструменты'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "25";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.ПрочиеАктивы;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЛКМ";
	Элемент.Наименование = НСтр("ru = 'ЛКМ'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "26";
	Элемент.Весовой = Истина;
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.ЛКМ;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("кг");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Опции";
	Элемент.Наименование = НСтр("ru = 'Опции'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "31";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Опции;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Автомобили";
	Элемент.Наименование = НСтр("ru = 'Автомобили'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Код = ПрефиксКода + "32";
	Элемент.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Автомобили;
	Элемент.ОсновнаяБазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиИлиСоздать("шт");
	Элемент.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
	
	ЗначенияИспользования = ИспользованиеСвязанныхСправочниковПредопределеннымиЭлементами();
	
	Для Каждого Элемент Из Элементы Цикл
		
		ЗначениеИспользования = ЗначенияИспользования.Получить(
			Справочники.ТипыНоменклатуры[Элемент.ИмяПредопределенныхДанных]);		
		ЗаполнитьЗначенияСвойств(Элемент, ЗначениеИспользования);
			
	КонецЦикла;
	
КонецПроцедуры

// Выполняет установку реквизита Использование значением "Истина"
// и обновление наименований наборов свойств типов номенклатуры.
//
Процедура ОбновитьНаборыСвойств() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыНоменклатуры.Ссылка КАК Ссылка,
		|	ТипыНоменклатуры.НаборСвойствНоменклатуры КАК НаборСвойствНоменклатуры,
		|	ТипыНоменклатуры.НаборСвойствХарактеристик КАК НаборСвойствХарактеристик
		|ИЗ
		|	Справочник.ТипыНоменклатуры КАК ТипыНоменклатуры
		|ГДЕ
		|	(НЕ ТипыНоменклатуры.НаборСвойствНоменклатуры.Используется
		|			ИЛИ НЕ ТипыНоменклатуры.НаборСвойствХарактеристик.Используется)
		|	И НЕ ТипыНоменклатуры.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		
		Если Выборка.НаборСвойствНоменклатуры.Наименование <> СправочникОбъект.Наименование Тогда
			Если ЗначениеЗаполнено(Выборка.НаборСвойствНоменклатуры) Тогда
				НаборСвойствОбъектНоменклатура = Выборка.НаборСвойствНоменклатуры.Скопировать();
			Иначе
				НаборСвойствОбъектНоменклатура = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
			КонецЕсли;
			НаборСвойствОбъектНоменклатура.Наименование    = СправочникОбъект.Наименование;
			НаборСвойствОбъектНоменклатура.Родитель        =
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура;
			НаборСвойствОбъектНоменклатура.Используется    = Истина;
			НаборСвойствОбъектНоменклатура.Записать();
			
			СправочникОбъект.НаборСвойствНоменклатуры = НаборСвойствОбъектНоменклатура.Ссылка;
		Иначе
			НаборСвойств = Выборка.НаборСвойствНоменклатуры.ПолучитьОбъект();
			НаборСвойств.Используется = Истина;
			НаборСвойств.Записать();
		КонецЕсли;
		
		Если Выборка.НаборСвойствХарактеристик.Наименование <> СправочникОбъект.Наименование + НСтр("ru = '(Для характеристик)'") Тогда
			Если ЗначениеЗаполнено(Выборка.НаборСвойствХарактеристик) Тогда
				НаборСвойствОбъектХарактеристикиНоменклатуры = Выборка.НаборСвойствХарактеристик.Скопировать();
			Иначе
				НаборСвойствОбъектХарактеристикиНоменклатуры = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
			КонецЕсли;
			НаборСвойствОбъектХарактеристикиНоменклатуры.Наименование    =
				СправочникОбъект.Наименование + НСтр("ru = '(Для характеристик)'");
			НаборСвойствОбъектХарактеристикиНоменклатуры.Родитель        =
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры;
			НаборСвойствОбъектХарактеристикиНоменклатуры.Используется    = Истина;
			НаборСвойствОбъектХарактеристикиНоменклатуры.Записать();
			
			СправочникОбъект.НаборСвойствХарактеристик = НаборСвойствОбъектХарактеристикиНоменклатуры.Ссылка;
		Иначе
			НаборСвойств = Выборка.НаборСвойствНоменклатуры.ПолучитьОбъект();
			НаборСвойств.Используется = Истина;
			НаборСвойств.Записать();
		КонецЕсли;
		
		Попытка
			
			СправочникОбъект.Записать();
			
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Не удалось обновить: '")
				+ Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
				"Типы номенклатуры.Обновление наборов свойств",
				УровеньЖурналаРегистрации.Ошибка,
				,
				Выборка.Ссылка,
				ТекстОшибки
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// АПК:299-выкл
// АПК:581-выкл

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	// Обработаем в зависимости от вида элемента
	Если НЕ Объект.ЭтоГруппа Тогда
		ОбязательныеРеквизиты.Добавить("ВидНоменклатуры");
		ОбязательныеРеквизиты.Добавить("ИспользованиеЕдиницИзмерения");
		ОбязательныеРеквизиты.Добавить("ПризнакПредметаРасчета");
		ОбязательныеРеквизиты.Добавить("ИспользованиеХарактеристик");
		Если Объект.ИспользованиеЕдиницИзмерения = 1
			И Объект.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.ПрочиеАктивы Тогда
			ОбязательныеРеквизиты.Добавить("ОсновнаяБазоваяЕдиницаИзмерения");
		КонецЕсли;
		Если Объект.ВедетсяМаркировка Тогда
			ОбязательныеРеквизиты.Добавить("ТипМаркировки");
		КонецЕсли;
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ИспользованиеЕдиницИзмерения");
	Результат.Добавить("ИспользованиеХарактеристик");
	Возврат Результат;

КонецФункции

// АПК:581-вкл
// АПК:299-вкл

#КонецОбласти

// Формирует соответствие связанных справочников предопределенными элементами.    
//
// Возвращаемое значение:
//  Результат - соответствие связанных справочников предопределенных типов номенклатур.
//
Функция ИспользованиеСвязанныхСправочниковПредопределеннымиЭлементами() Экспорт
	
	Результат = Новый Соответствие();
	Результат.Вставить(
		Штучный,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 3, 1)
	);
	Результат.Вставить(
		Весовой,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 3, 1)
	);
	Результат.Вставить(
		Размерный,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 1, 3)
	);
	Результат.Вставить(
		Серийный,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 2, 0)
	);
	Результат.Вставить(
		Услуга,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 3, 0)
	);
	Результат.Вставить(
		Тара,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 2, 3, 1)
	);
	Результат.Вставить(
		Набор,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 3, 1)
	);
	Результат.Вставить(
		Комплект,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 3, 1)
	);
	Результат.Вставить(
		ОсновноеСредство,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 2, 0)
	);
	Результат.Вставить(
		НематериальныйАктив,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 2, 0)
	);
	Результат.Вставить(
		МатериалыИСпецоснастка,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 2, 2, 0)
	);
	Результат.Вставить(
		Спецодежда,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 2, 2, 0)
	);
	Результат.Вставить(
		Шины,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 3, 1)
	);
	Результат.Вставить(
		Диски,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 3, 1)
	);
	Результат.Вставить(
		НомерныеАгрегаты,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 2, 3)
	);
	Результат.Вставить(
		Авторабота,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 3, 0)
	);
	Результат.Вставить(
		Инструменты,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 2, 0)
	);
	Результат.Вставить(
		ЛКМ,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 3, 0)
	);
	Результат.Вставить(
		Опции,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 2, 3, 0)
	);
	Результат.Вставить(
		Автомобили,
		Новый Структура("ИспользованиеЕдиницИзмерения,ИспользованиеХарактеристик,ИспользованиеШтрихКодов", 1, 1, 0)
	);	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

// Настройка ограничения данных характеристик номенклатуры
//
// Параметры:
//  ТипНоменклатуры - СправочникСсылка.ТипыНоменклатуры - Тип номенклатуры.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ОграниченияДанныхХарактеристики - ограничение
//
Функция ОграничениеДанныхХарактеристик(ТипНоменклатуры) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипНоменклатуры, "ОграничениеДанныхХарактеристик");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// ОбработчикиРеквизитов

// Обработчик события возникающего при изменении данных реквизита "Основная базовая единица измерения".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОсновнаяБазоваяЕдиницаИзмеренияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если Объект.ОсновнаяБазоваяЕдиницаИзмерения = Константы.ОсновнаяЕдиницаИзмеренияМассы Тогда
		Объект.Весовой = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры // ОсновнаяБазоваяЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Использование характеристик".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ИспользованиеХарактеристикПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если (Объект.ИспользованиеХарактеристик = 3) Тогда
		Объект.ИспользованиеШтрихКодов = ?(Объект.ИспользованиеШтрихКодов = 2,0,Объект.ИспользованиеШтрихКодов);
	КонецЕсли;
	
КонецПроцедуры // ИспользованиеХарактеристикПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Уникальность серийного номера".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УникальностьСерийногоНомераПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если (НЕ Объект.ЭтоГруппа) И Объект.УникальностьСерийногоНомера Тогда // Проверим не нужно ли снять флажок уникальности серийного номера
		Если (Объект.ИспользованиеХарактеристик<>2)
			ИЛИ ((Объект.ОграничениеДанныхХарактеристик<>Перечисления.ОграниченияДанныхХарактеристики.Все)
				И(Объект.ОграничениеДанныхХарактеристик<>Перечисления.ОграниченияДанныхХарактеристики.СерийныйНомер_Свойства)) Тогда
			Объект.УникальностьСерийногоНомера = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УникальностьСерийногоНомераПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Вид номенклатуры".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидНоменклатурыПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Если вид номенклатуры "Прочие активы", то очищаем реквизит "Основная базовая единица измерения".
	Если Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.ПрочиеАктивы Тогда
		Объект.ОсновнаяБазоваяЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ВидНоменклатурыПриИзменении()

// Конец.ОбработчикиРеквизитов

#Область ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("ИспользованиеЕдиницИзмерения");
    Результат.Добавить("ИспользованиеХарактеристик");
    Возврат Результат;
    
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли