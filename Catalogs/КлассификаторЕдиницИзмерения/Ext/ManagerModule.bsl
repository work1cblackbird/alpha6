// Модуль менеджера справочника "Классификатор единиц измерения"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
		
	// строка содержит коды элементов
	СтрокаНачальногоЗаполнения = "796,166,006,356";
	МассивВыбранныхСтрок = Новый Массив;
	МассивКодов = Новый Массив;
	
	ИменаПредопределенныхПоКодам = Новый Соответствие();
	ИменаПредопределенныхПоКодам.Вставить("796", "шт");
	ИменаПредопределенныхПоКодам.Вставить("356", "час");
	
	Дерево = Справочники.КлассификаторЕдиницИзмерения.ПолучитьДанныеКлассификатора();
	
	Для Каждого СтрокаУровень1 Из Дерево.Строки Цикл
		
		Для каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
			
			Для каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
				
				Если СтрНайти(СтрокаНачальногоЗаполнения, СтрокаУровень3.КодЧисловой) > 0 Тогда
					
							
					МассивВыбранныхСтрок.Добавить(СтрокаУровень3);
					МассивКодов.Добавить(СтрокаУровень3.КодЧисловой);
							
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
	|	КлассификаторЕдиницИзмерения.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Код В(&МассивКодов)";
	
	Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
	
	ТаблицаЕдиницыИзмерения = Запрос.Выполнить().Выгрузить();
	ТаблицаЕдиницыИзмерения.Индексы.Добавить("Код");
	
	КодыШтучныхТоваров = Справочники.КлассификаторЕдиницИзмерения.ПолучитьКодыШтучныхТоваров();
	
	Для каждого СтрокаДерева Из МассивВыбранныхСтрок Цикл
		
		НовыйЭлемент = Ложь;
		КодЕдиницы = СтрокаДерева.КодЧисловой;
		Пока СтрДлина(КодЕдиницы) < 4 Цикл
			КодЕдиницы = КодЕдиницы + " ";
		КонецЦикла;
		
		НайденныйЭлемент = ТаблицаЕдиницыИзмерения.Найти(КодЕдиницы, "Код");
		Если НайденныйЭлемент <> Неопределено Тогда
			СправочникОбъект = НайденныйЭлемент.Ссылка.ПолучитьОбъект();
		Иначе
			СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			НовыйЭлемент = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеНациональное) Тогда
			Наименование = СтрокаДерева.УсловноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаДерева.УсловноеОбозначениеМеждународное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное) Тогда
			Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное;
		Иначе
			Наименование = СтрокаДерева.Наименование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеМеждународное) Тогда
			МеждународноеСокращение = СтрокаДерева.УсловноеОбозначениеМеждународное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное) Тогда
			МеждународноеСокращение = СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное;
		Иначе
			МеждународноеСокращение = СтрокаДерева.Наименование;
		КонецЕсли;
		
		СправочникОбъект.Наименование            = СтрЗаменить(Наименование, Символы.ПС, "/");
		СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СтрокаДерева.Наименование, Символы.ПС, "/");
		СправочникОбъект.Код                     = СтрокаДерева.КодЧисловой;
		СправочникОбъект.МеждународноеСокращение = СтрЗаменить(МеждународноеСокращение, Символы.ПС, "");
		
		ИмяПредопределенного = ИменаПредопределенныхПоКодам.Получить(СокрЛП(СправочникОбъект.Код));
		
		Если ИмяПредопределенного <> Неопределено Тогда
			
			СправочникОбъект.ИмяПредопределенныхДанных = ИмяПредопределенного;
			
		КонецЕсли;
		
		Попытка
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			ВывестиСообщение(НСтр("ru='Справочник ""Классификатор единиц измерения"". %1 элемент ""%2""'"),
				,,,,
				?(НовыйЭлемент,"Добавлен","Обновлен"),
				СокрЛП(СправочникОбъект.Наименование));
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи элемента справочника ""Классификатор единиц измерения""'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;
	
	КонецЦикла;
	
	ПустаяЕдиница = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("-", Истина);
	
	Если ПустаяЕдиница.Пустая() Тогда
		
		ПустаяЕдиница = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		
	Иначе
		
		ПустаяЕдиница = ПустаяЕдиница.ПолучитьОбъект();
		
	КонецЕсли;
	
	ПустаяЕдиница.Код = "001";
	ПустаяЕдиница.Наименование = "-";
	ПустаяЕдиница.НаименованиеПолное = "-";
	ПустаяЕдиница.МеждународноеСокращение = "-";
	ПустаяЕдиница.ИмяПредопределенныхДанных = "прочерк";
	
	НовыйЭлемент = ПустаяЕдиница.ЭтоНовый();
	
	Если ПустаяЕдиница.Модифицированность() Тогда
		
		Попытка
			
			ПустаяЕдиница.ОбменДанными.Загрузка = Истина;
			ПустаяЕдиница.Записать();
			ВывестиСообщение(
				НСтр("ru='Справочник ""Классификатор единиц измерения"". %1 элемент ""%2""'"),
				,
				,
				,
				,
				?(НовыйЭлемент,"Добавлен","Обновлен"), СокрЛП(ПустаяЕдиница.Наименование)
			);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Ошибка при записи элемента справочника ""Классификатор единиц измерения""'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
			
	КонецЕсли;
	
	// Заполним реквизит МеждународноеСокращение для не предопределенных элементов справочника.
	ВыполнитьНачальноеЗаполнениеНепредопределенныхЭлементов();

КонецПроцедуры

// Процедура заполнения реквизита МеждународноеСокращение для не предопределенных элементов справочника.
//
Процедура ВыполнитьНачальноеЗаполнениеНепредопределенныхЭлементов()
	
	Дерево = Справочники.КлассификаторЕдиницИзмерения.ПолучитьДанныеКлассификатора();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
		|	КлассификаторЕдиницИзмерения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|ГДЕ
		|	КлассификаторЕдиницИзмерения.Предопределенный = ЛОЖЬ
		|	И КлассификаторЕдиницИзмерения.МеждународноеСокращение = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УсловноеОбозначениеМеждународное = "";
		НайтиЕдИзмеренияВДереве(Дерево.Строки, Выборка.Наименование, УсловноеОбозначениеМеждународное); 
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.МеждународноеСокращение = ?(УсловноеОбозначениеМеждународное="","-",УсловноеОбозначениеМеждународное);
		ТекущийОбъект.Записать();
	КонецЦикла;

КонецПроцедуры // ВыполнитьНачальноеЗаполнение()

// Процедура получения значения МеждународноеСокращение для элемента справочника
//
Процедура НайтиЕдИзмеренияВДереве(Строки, Наименование, УсловноеОбозначениеМеждународное) 
    
        Для Каждого Строка Из Строки Цикл
			Если НЕ УсловноеОбозначениеМеждународное = "" Тогда
				Возврат;
			КонецЕсли;
			УсловноеОбозначениеНациональное =  СтрЗаменить(Строка.УсловноеОбозначениеНациональное,Символы.ПС,"/");
			Если УсловноеОбозначениеНациональное = Наименование  Тогда
                УсловноеОбозначениеМеждународное = Строка.КодовоеБуквенноеОбозначениеМеждународное;
				Прервать;
            Иначе
                НайтиЕдИзмеренияВДереве(Строка.Строки, Наименование, УсловноеОбозначениеМеждународное);
            КонецЕсли;
		КонецЦикла;
		
КонецПроцедуры

// Функция возвращает массив кодов штучных единиц измерения.
// Для такие единиц ТипЕдиницыИзмерения = Перечисления.ТипыЕдиницИзмерения.Штучная.
// 
// Возвращаемое значение:
//  Массив - коды штучных единиц измрения
//
Функция ПолучитьКодыШтучныхТоваров() Экспорт

	КодыШтучныхТоваров = Новый Массив;
	КодыШтучныхТоваров.Добавить("616");
	КодыШтучныхТоваров.Добавить("625");
	КодыШтучныхТоваров.Добавить("626");
	КодыШтучныхТоваров.Добавить("630");
	КодыШтучныхТоваров.Добавить("641");
	КодыШтучныхТоваров.Добавить("657");
	КодыШтучныхТоваров.Добавить("683");
	КодыШтучныхТоваров.Добавить("704");
	КодыШтучныхТоваров.Добавить("715");
	КодыШтучныхТоваров.Добавить("730");
	КодыШтучныхТоваров.Добавить("732");
	КодыШтучныхТоваров.Добавить("733");
	КодыШтучныхТоваров.Добавить("734");
	КодыШтучныхТоваров.Добавить("735");
	КодыШтучныхТоваров.Добавить("736");
	КодыШтучныхТоваров.Добавить("737");
	КодыШтучныхТоваров.Добавить("740");
	КодыШтучныхТоваров.Добавить("745");
	КодыШтучныхТоваров.Добавить("778");
	КодыШтучныхТоваров.Добавить("780");
	КодыШтучныхТоваров.Добавить("781");
	КодыШтучныхТоваров.Добавить("796");
	КодыШтучныхТоваров.Добавить("797");
	КодыШтучныхТоваров.Добавить("798");
	КодыШтучныхТоваров.Добавить("799");
	КодыШтучныхТоваров.Добавить("800");
	КодыШтучныхТоваров.Добавить("801");
	КодыШтучныхТоваров.Добавить("802");
	
	Возврат КодыШтучныхТоваров;

КонецФункции // ПолучитьКодыШтучныхТоваров()

// Функция возращает элемент справочника КлассификаторЕдиницИзмерения
//
// Параметры:
//  ЕдиницаИзмеренияКод -Строка - код единицы измерения
//
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторЕдиницИзмерения - ссылка на единицу измерения
//
Функция ПолучитьЕдиницуИзмерения (ЕдиницаИзмеренияКод) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
	|	КлассификаторЕдиницИзмерения.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", ЕдиницаИзмеренияКод);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Дерево = ПолучитьДанныеКлассификатора();
		СтрокаДерева = НайтиСтрокуВДеревеЗначений(Дерево, ЕдиницаИзмеренияКод + " ");
		
		Если СтрокаДерева <> Неопределено Тогда
			ЕдиницаИзмеренияСсылка  = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент(); 
			
			Если ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеНациональное) Тогда
				Наименование = СтрокаДерева.УсловноеОбозначениеНациональное;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеМеждународное) Тогда
				Наименование = СтрокаДерева.УсловноеОбозначениеМеждународное;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное) Тогда
				Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное) Тогда
				Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное;
			Иначе
				Наименование = СтрокаДерева.Наименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеМеждународное) Тогда
				МеждународноеСокращение = СтрокаДерева.УсловноеОбозначениеМеждународное;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное) Тогда
				МеждународноеСокращение = СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное;
			Иначе
				МеждународноеСокращение = СтрокаДерева.Наименование;
			КонецЕсли;
			
			ЕдиницаИзмеренияСсылка.Наименование            = СтрЗаменить(Наименование,Символы.ПС,"/");
			ЕдиницаИзмеренияСсылка.НаименованиеПолное      = СтрЗаменить(СтрокаДерева.Наименование,Символы.ПС,"/");
			ЕдиницаИзмеренияСсылка.Код                     = СтрокаДерева.КодЧисловой;
			ЕдиницаИзмеренияСсылка.МеждународноеСокращение = СтрЗаменить(МеждународноеСокращение, Символы.ПС, "");
			ЕдиницаИзмеренияСсылка.Записать();
			Возврат ЕдиницаИзмеренияСсылка.Ссылка;
			
		КонецЕсли;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;	
КонецФункции

// Функция получения строки для указанного кода
//
// Параметры:
//  Дерево - ДеревоЗначений - строки из макета Классификатора единиц измерения.
//  Код    - Строка         - код единицы измерения
//
// Возвращаемое значение:
//   КоллекцияСтрокДереваЗначений - строка, с полученным кодом
//
Функция НайтиСтрокуВДеревеЗначений(Дерево, Код) Экспорт
	
	Для каждого СтрокаУровень1 Из Дерево.Строки Цикл
		Для каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
			Для каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
				КодЕдиницы = СтрокаУровень3.КодЧисловой;
				Пока СтрДлина(КодЕдиницы) < 4 Цикл
					КодЕдиницы = КодЕдиницы + " ";
				КонецЦикла;
				Если КодЕдиницы = Код Тогда
					Возврат СтрокаУровень3;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Перезаполняет предопределенный элемент "прочерк". Помечает на удаление все остальные элементы,
// имеющие наименование "-".
//
Процедура ПерезаполнениеПредопределенногоЭлементаПрочерк() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПрочерк();
	
	Запрос.УстановитьПараметр("Код", "001");
	Запрос.УстановитьПараметр("Наименование", "-");
	СписокЭлементов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если СписокЭлементов.Количество() > 0 Тогда
		ПредопределенныйЭлементПрочерк = СписокЭлементов[0];
		ПредопределенныйЭлементОбъект = ПредопределенныйЭлементПрочерк.ПолучитьОбъект();
	Иначе
		ПредопределенныйЭлементОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
	КонецЕсли;
	
	ПредопределенныйЭлементОбъект.Код = "001";
	ПредопределенныйЭлементОбъект.Наименование = "-";
	ПредопределенныйЭлементОбъект.НаименованиеПолное = "-";
	ПредопределенныйЭлементОбъект.МеждународноеСокращение = "-";
	ПредопределенныйЭлементОбъект.ИмяПредопределенныхДанных = "прочерк";
	ПредопределенныйЭлементОбъект.ОбменДанными.Загрузка = Истина;
	ПредопределенныйЭлементОбъект.Записать();
	
	ПредопределенныйЭлементПрочерк = ПредопределенныйЭлементОбъект.Ссылка;
	
	Если СписокЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЭлементов.Удалить(0);
	
	ПарыЗамен = Новый Соответствие;
	Для Каждого Строка ИЗ СписокЭлементов Цикл
		ПарыЗамен.Вставить(Строка, ПредопределенныйЭлементПрочерк);
		КлассификаторОбъект = Строка.ПолучитьОбъект();
		КлассификаторОбъект.ИмяПредопределенныхДанных = "";
		КлассификаторОбъект.ОбменДанными.Загрузка = Истина;
		КлассификаторОбъект.Записать();
	КонецЦикла;
	
	МестаИспользования = ОбщегоНазначения.МестаИспользования(СписокЭлементов);
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("ВключатьБизнесЛогику", Ложь);
	ПараметрыЗамены.Вставить("УчитыватьПрикладныеПравила", Ложь);
	ПараметрыЗамены.Вставить("ЗаменаПарыВТранзакции", Ложь);
	ПараметрыЗамены.Вставить("СпособУдаления", "Пометка");
	
	ОбщегоНазначения.ЗаменитьСсылки(ПарыЗамен, ПараметрыЗамены);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

// Выполняет поиск по наименованию и коду элемента справочника.
// Если подходящего элемента не найдено создает новый элемент
//
// Параметры:
//  ЗначениеПоиска - Строка - параметр поиска
//
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторЕдиницИзмерения, Неопределено
//
Функция НайтиИлиСоздать(ЗначениеПоиска) Экспорт

	Результат = НайтиПоКодуИНаименованию(ЗначениеПоиска);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Создать(ЗначениеПоиска);

КонецФункции

// Коллекция с данными классификатора из макета в конфигурации
// 
// Возвращаемое значение:
//   ДеревоЗначений
//
Функция ПолучитьДанныеКлассификатора() Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(
		Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет(ИмяМакетаКлассификатора()).ПолучитьТекст());
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзКлассификатора(ЗначениеПоиска)

	Результат = Новый Структура(
		"БылоНайденоЗначение,
		|ВесоваяЕдиницаИзмерения,
		|КодЧисловой,
		|КодовоеБуквенноеОбозначениеМеждународное,
		|КодовоеБуквенноеОбозначениеНациональное,
		|Наименование,
		|УсловноеОбозначениеМеждународное,
		|УсловноеОбозначениеНациональное"
	);
	
	ДанныеКлассификатора = ПолучитьДанныеКлассификатора();
	ЗначениеПоискаВНРег = НРег(ЗначениеПоиска);
	
	Для Каждого ГруппаВерхнегоУровня Из ДанныеКлассификатора.Строки Цикл
		
		Для каждого ГруппаПоТипам Из ГруппаВерхнегоУровня.Строки Цикл
		
			Для Каждого Единица Из ГруппаПоТипам.Строки Цикл
				
				Если
					Единица.КодЧисловой = ЗначениеПоиска
					Или Единица.КодовоеБуквенноеОбозначениеНациональное = ЗначениеПоискаВНРег
					Или Единица.УсловноеОбозначениеНациональное = ЗначениеПоискаВНРег
					Или Единица.КодовоеБуквенноеОбозначениеМеждународное = ЗначениеПоискаВНРег
					Или Единица.УсловноеОбозначениеМеждународное = ЗначениеПоискаВНРег
				Тогда
					
					ЗаполнитьЗначенияСвойств(Результат, Единица);
					Результат.БылоНайденоЗначение = Истина;
					Возврат Результат;
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.БылоНайденоЗначение = Ложь;
	Возврат Результат;

КонецФункции

Функция УсловноеОбозначение(ОписаниеЕдиницыИзКлассификатора)
	
	Если ЗначениеЗаполнено(ОписаниеЕдиницыИзКлассификатора.УсловноеОбозначениеНациональное) Тогда
		
		Результат = ОписаниеЕдиницыИзКлассификатора.УсловноеОбозначениеНациональное;
		
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЕдиницыИзКлассификатора.УсловноеОбозначениеМеждународное) Тогда
		
		Результат = ОписаниеЕдиницыИзКлассификатора.УсловноеОбозначениеМеждународное;
		
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЕдиницыИзКлассификатора.КодовоеБуквенноеОбозначениеНациональное) Тогда
		
		Результат = ОписаниеЕдиницыИзКлассификатора.КодовоеБуквенноеОбозначениеНациональное;
		
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЕдиницыИзКлассификатора.КодовоеБуквенноеОбозначениеМеждународное) Тогда
		
		Результат = ОписаниеЕдиницыИзКлассификатора.КодовоеБуквенноеОбозначениеМеждународное;
		
	Иначе
		
		Результат = ОписаниеЕдиницыИзКлассификатора.Наименование;
		
	КонецЕсли;
	
	Возврат СтрЗаменить(Результат, Символы.ПС, "/");
		
КонецФункции
	
Функция МеждународноеСокращение(ОписаниеЕдиницыИзКлассификатора)
	
	Если ЗначениеЗаполнено(ОписаниеЕдиницыИзКлассификатора.УсловноеОбозначениеМеждународное) Тогда
		
		Результат = ОписаниеЕдиницыИзКлассификатора.УсловноеОбозначениеМеждународное;
		
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЕдиницыИзКлассификатора.КодовоеБуквенноеОбозначениеМеждународное) Тогда
		
		Результат = ОписаниеЕдиницыИзКлассификатора.КодовоеБуквенноеОбозначениеМеждународное;
		
	Иначе
		
		Результат = ОписаниеЕдиницыИзКлассификатора.Наименование;
		
	КонецЕсли;
	
	Возврат СтрЗаменить(Результат, Символы.ПС, "");
	
КонецФункции	

Функция ИмяМакетаКлассификатора()
	
	Возврат "КлассификаторЕдиницИзмерения_" + ОбщегоНазначения.КодОсновногоЯзыка();
	
КонецФункции

Функция НайтиПоКодуИНаименованию(ЗначениеПоиска)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КлассификаторЕдиницИзмерения.Ссылка КАК НайденноеЗначение,
		|	0 КАК Приоритет
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|ГДЕ
		|	КлассификаторЕдиницИзмерения.Код = &ЗначениеПоиска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлассификаторЕдиницИзмерения.Ссылка,
		|	1
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|ГДЕ
		|	КлассификаторЕдиницИзмерения.Наименование = &ЗначениеПоиска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет"
	);
	Запрос.УстановитьПараметр("ЗначениеПоиска", ЗначениеПоиска);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат = РезультатЗапроса.Выбрать();
	Результат.Следующий();
	Возврат Результат.НайденноеЗначение;
	
КонецФункции

Функция Создать(ЗначениеПоиска)
	
	Результат = СоздатьЭлемент();
	
	Если ЗначениеПоиска = "-" Тогда // Эта единица не существует в классификаторе, поэтому сделаем фиктивную структуру
		
		ИзКлассификатора = Новый Структура(
			"БылоНайденоЗначение,
			|ВесоваяЕдиницаИзмерения,
			|КодЧисловой,
			|КодовоеБуквенноеОбозначениеМеждународное,
			|КодовоеБуквенноеОбозначениеНациональное,
			|Наименование,
			|УсловноеОбозначениеМеждународное,
			|УсловноеОбозначениеНациональное"
		);
		ИзКлассификатора.БылоНайденоЗначение = Истина;
		ИзКлассификатора.ВесоваяЕдиницаИзмерения = Ложь;
		ИзКлассификатора.КодЧисловой = "001";
		ИзКлассификатора.Наименование = "-";
		ИзКлассификатора.УсловноеОбозначениеМеждународное = "-";
		ИзКлассификатора.УсловноеОбозначениеНациональное = "-";
		ИзКлассификатора.КодовоеБуквенноеОбозначениеМеждународное = "-";
		ИзКлассификатора.КодовоеБуквенноеОбозначениеНациональное = "-";
		
	Иначе
		
		ИзКлассификатора = ИзКлассификатора(ЗначениеПоиска);
		
	КонецЕсли;
	
	Если Не ИзКлассификатора.БылоНайденоЗначение Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат.Код = ИзКлассификатора.КодЧисловой;
	Результат.Наименование = УсловноеОбозначение(ИзКлассификатора);
	Результат.НаименованиеПолное = Результат.Наименование;
	Результат.МеждународноеСокращение = МеждународноеСокращение(ИзКлассификатора);
	
	Попытка
	
		Результат.ОбменДанными.Загрузка = Истина;
		Результат.Записать();
		Возврат Результат.Ссылка;
	
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр(
				"ru = 'Создание нового элемента классификатора единиц измерения'", 
				ОбщегоНазначения.КодОсновногоЯзыка()
			),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТекстЗапросаПрочерк()
	
	Результат =
	"ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
	|	1 КАК ПолеСортировки
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Предопределенный
	|	И КлассификаторЕдиницИзмерения.Код = &Код
	|	И КлассификаторЕдиницИзмерения.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка,
	|	2
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Предопределенный
	|	И КлассификаторЕдиницИзмерения.Код = &Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка,
	|	3
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Предопределенный
	|	И КлассификаторЕдиницИзмерения.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка,
	|	4
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	НЕ КлассификаторЕдиницИзмерения.Предопределенный
	|	И КлассификаторЕдиницИзмерения.Код = &Код
	|	И КлассификаторЕдиницИзмерения.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка,
	|	5
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	НЕ КлассификаторЕдиницИзмерения.Предопределенный
	|	И КлассификаторЕдиницИзмерения.Код = &Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка,
	|	6
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	НЕ КлассификаторЕдиницИзмерения.Предопределенный
	|	И КлассификаторЕдиницИзмерения.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка КАК Ссылка,
	|	МИНИМУМ(ВТ.ПолеСортировки) КАК ПолеСортировки
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли