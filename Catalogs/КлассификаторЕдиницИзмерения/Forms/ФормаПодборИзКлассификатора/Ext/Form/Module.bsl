
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Дерево = Справочники.КлассификаторЕдиницИзмерения.ПолучитьДанныеКлассификатора();
	
	Дерево.Колонки.Добавить("Выбран",     Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Существует", Новый ОписаниеТипов("Булево"));
	
	Соответствие = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
	|	КлассификаторЕдиницИзмерения.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(СокрЛП(Выборка.Код), СокрЛП(Выборка.Код));
	КонецЦикла;
	
	Для Каждого СтрокаУровень1 Из Дерево.Строки Цикл
		Для Каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
			Для Каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
				Если Соответствие.Получить(СтрокаУровень3.КодЧисловой) <> Неопределено Тогда
					СтрокаУровень3.Существует = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКлассификатора");
	
	ЗначениеВРеквизитФормы(Дерево, "ИсходноеДерево");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКлассификатора

&НаКлиенте
Процедура ОбходДереваВверх(ТекущиеДанные)

	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда // Верхний уровень
		
		ДочерниеСтроки = Родитель.ПолучитьЭлементы();
		КоличествоВыбранных = 0;
		ОбщееКоличество = 0;
		Для каждого Элемент Из ДочерниеСтроки Цикл
			Если Элемент.Выбран = 2 Тогда
				КоличествоВыбранных = КоличествоВыбранных + 0.5;
			ИначеЕсли Элемент.Выбран = 1 Тогда
				КоличествоВыбранных = КоличествоВыбранных + 1;
			КонецЕсли;
			ОбщееКоличество = ОбщееКоличество + 1;
		КонецЦикла;
		
		Если ОбщееКоличество = КоличествоВыбранных Тогда
			Родитель.Выбран = 1;
		ИначеЕсли КоличествоВыбранных = 0 Тогда
			Родитель.Выбран = 0;
		Иначе
			Родитель.Выбран = 2;
		КонецЕсли;
		
		ОбходДереваВверх(Родитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбходДереваВниз(ТекущиеДанные)
	
	ДочерниеСтроки = ТекущиеДанные.ПолучитьЭлементы();
	Для каждого Элемент Из ДочерниеСтроки Цикл
		Элемент.Выбран = ТекущиеДанные.Выбран;
		ОбходДереваВниз(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранПриИзменении(ТекущиеДанные)
	
	Если ТекущиеДанные.Выбран = 2 Тогда
		ТекущиеДанные.Выбран = 0;
	КонецЕсли;
	
	ОбходДереваВверх(ТекущиеДанные);
	ОбходДереваВниз(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлассификатораВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоКлассификатора.ТекущиеДанные;
	
	ВыбранПриИзменении(ТекущиеДанные);
	
	// продублируем выбор в исходном дереве
	ТекДанные = НайтиСтрокуВДеревеЗначений(ИсходноеДерево, ТекущиеДанные.КодЧисловой);
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.Выбран = ТекущиеДанные.Выбран;
		ВыбранПриИзменении(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолеПоискаИзменениеТекстаРедактированияНаСервере(Текст)
	
	Дерево = РеквизитФормыВЗначение("ИсходноеДерево");
	
	ИндексУровень1 = 0;
	Пока ИндексУровень1 < Дерево.Строки.Количество() Цикл
		
		СтрокаУровень1 = Дерево.Строки[ИндексУровень1];
		ИндексУровень2 = 0;
		
		Пока ИндексУровень2<СтрокаУровень1.Строки.Количество() Цикл
		
			СтрокаУровень2 = СтрокаУровень1.Строки[ИндексУровень2];
			ИндексУровень3 = 0;
			
			Пока ИндексУровень3 < СтрокаУровень2.Строки.Количество() Цикл
			
				Если СтрНайти(ВРег(СтрокаУровень2.Строки[ИндексУровень3].Наименование), ВРег(Текст)) = 0 Тогда
					СтрокаУровень2.Строки.Удалить(СтрокаУровень2.Строки[ИндексУровень3]);
				Иначе
					ИндексУровень3 = ИндексУровень3 + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаУровень2.Строки.Количество() = 0 Тогда
				СтрокаУровень1.Строки.Удалить(СтрокаУровень2);
			Иначе 
				ИндексУровень2 = ИндексУровень2 + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаУровень1.Строки.Количество() = 0 Тогда
			Дерево.Строки.Удалить(СтрокаУровень1);
		Иначе
			ИндексУровень1 = ИндексУровень1 + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКлассификатора");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ПолеПоиска = Текст;
	ПолеПоискаИзменениеТекстаРедактированияНаСервере(ПолеПоиска);
	
		Для Индекс = 0 По ДеревоКлассификатора.ПолучитьЭлементы().Количество() - 1 Цикл
			Элементы.ДеревоКлассификатора.Развернуть(ДеревоКлассификатора.ПолучитьЭлементы()[Индекс].ПолучитьИдентификатор(), Истина);
		КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ПолеПоиска = "";
	ПолеПоискаИзменениеТекстаРедактированияНаСервере(ПолеПоиска);
	
	Для Индекс = 0 По ДеревоКлассификатора.ПолучитьЭлементы().Количество() - 1 Цикл
		Элементы.ДеревоКлассификатора.Развернуть(ДеревоКлассификатора.ПолучитьЭлементы()[Индекс].ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСуществующиеПриИзменении(Элемент)
	
	ЭлементыДерева = ДеревоКлассификатора.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ЭлементыУр2 = ЭлементДерева.ПолучитьЭлементы();
		
		Для Каждого ЭлементУр2 Из ЭлементыУр2 Цикл
			
			ЭлементыУр3      = ЭлементУр2.ПолучитьЭлементы();
			ПоследнийЭлемент = Неопределено;
			
			Для Каждого ЭлементУр3 Из ЭлементыУр3 Цикл
				
				Если ЭлементУр3.Существует Тогда
					
					ЭлементУр3.Выбран = ОбновлятьСуществующие;
					ТекДанные = НайтиСтрокуВДеревеЗначений(ИсходноеДерево, ЭлементУр3.КодЧисловой);
					
					Если ТекДанные<>Неопределено Тогда
						ТекДанные.Выбран = ЭлементУр3.Выбран;
					КонецЕсли;
					
					ПоследнийЭлемент  = ЭлементУр3;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПоследнийЭлемент <> Неопределено Тогда
				ВыбранПриИзменении(ПоследнийЭлемент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	// обновим изначальное дерево
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ОбработатьРезультатыПодбораНаСервере();
	Оповестить("ОбновитьЕдиницыИзмерения",, ВладелецФормы);
	Если НЕ ЕстьОшибкиПриЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНайти(Команда)
	
	ПолеПоискаИзменениеТекстаРедактированияНаСервере(ПолеПоиска);
	
	Для Индекс = 0 По ДеревоКлассификатора.ПолучитьЭлементы().Количество() - 1 Цикл
		Элементы.ДеревоКлассификатора.Развернуть(ДеревоКлассификатора.ПолучитьЭлементы()[Индекс].ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатораКодЧисловой.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатораУсловноеОбозначениеНациональное.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатораУсловноеОбозначениеМеждународное.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатораКодовоеБуквенноеОбозначениеНациональное.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатораКодовоеБуквенноеОбозначениеМеждународное.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатораВесоваяЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКлассификатора.КодЧисловой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКлассификатора.КодЧисловой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКлассификатора.Существует");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуВДеревеЗначений(Дерево, Код)
	
	ЭлементыДерева = ИсходноеДерево.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ЭлементыУр2 = ЭлементДерева.ПолучитьЭлементы();
		
		Для Каждого ЭлементУр2 Из ЭлементыУр2 Цикл
			
			ЭлементыУр3      = ЭлементУр2.ПолучитьЭлементы();
			
			Для Каждого ЭлементУр3 Из ЭлементыУр3 Цикл
				
				Если ЭлементУр3.КодЧисловой = Код Тогда
					Возврат ЭлементУр3;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатыПодбораНаСервере()
	
	МассивВыбранныхСтрок = Новый Массив;
	МассивКодов = Новый Массив;
	
	Дерево = РеквизитФормыВЗначение("ДеревоКлассификатора");
	Для Каждого СтрокаУровень1 Из Дерево.Строки Цикл
		Если СтрокаУровень1.Выбран Тогда
			Для Каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
				Если СтрокаУровень2.Выбран Тогда
					Для Каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
						Если СтрокаУровень3.Выбран Тогда
							МассивВыбранныхСтрок.Добавить(СтрокаУровень3);
							МассивКодов.Добавить(СтрокаУровень3.КодЧисловой);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
	|	КлассификаторЕдиницИзмерения.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Код В(&МассивКодов)";
	
	Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
	
	ТаблицаЕдиницыИзмерения = Запрос.Выполнить().Выгрузить();
	ТаблицаЕдиницыИзмерения.Индексы.Добавить("Код");
	
	Для каждого СтрокаДерева Из МассивВыбранныхСтрок Цикл
		
		КодЕдиницы = СтрокаДерева.КодЧисловой;
		Пока СтрДлина(КодЕдиницы) < 4 Цикл
			КодЕдиницы = КодЕдиницы + " ";
		КонецЦикла;
		
		НайденныйЭлемент = ТаблицаЕдиницыИзмерения.Найти(КодЕдиницы, "Код");
		
		Если НайденныйЭлемент <> Неопределено Тогда
			СправочникОбъект = НайденныйЭлемент.Ссылка.ПолучитьОбъект();
		Иначе
			СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеНациональное) Тогда
			Наименование = СтрокаДерева.УсловноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаДерева.УсловноеОбозначениеМеждународное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное) Тогда
			Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное;
		Иначе
			Наименование = СтрокаДерева.Наименование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеМеждународное) Тогда
			МеждународноеСокращение = СтрокаДерева.УсловноеОбозначениеМеждународное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное) Тогда
			МеждународноеСокращение = СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное;
		Иначе
			МеждународноеСокращение = СтрокаДерева.Наименование;
		КонецЕсли;
		
		СправочникОбъект.Наименование            = СтрЗаменить(Наименование, Символы.ПС, "/");
		СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СтрокаДерева.Наименование,Символы.ПС, "/");
		СправочникОбъект.Код                     = СтрокаДерева.КодЧисловой;
		СправочникОбъект.МеждународноеСокращение = МеждународноеСокращение;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ЕстьОшибкиПриЗаписи = Истина;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
