// Модуль менеджера справочника "Дополнительные коды AudapadWeb"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.  
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИзМакета() Экспорт
	#Если Клиент Тогда
		Состояние("Заполнение справочника дополнительных кодов...");
	#КонецЕсли
	Макет = ПолучитьМакет("ДополнительныеКодыОбмена");
	
	Сч = 1;
	Пока Сч <= Макет.ВысотаТаблицы Цикл
		НомерКода     = СокрЛП(Макет.Область(Сч, 1, Сч, 1).Текст);
		ТекстКода     = СокрЛП(Макет.Область(Сч, 2, Сч, 2).Текст);
		Применение    = СокрЛП(Макет.Область(Сч, 3, Сч, 3).Текст);
		Распределение = Число(Макет.Область(Сч, 4, Сч, 4).Текст);
		СкидкаНаценка = Макет.Область(Сч, 5, Сч, 5).Текст;
		База          = СокрЛП(Макет.Область(Сч, 6, Сч, 6).Текст);
		
		ДопКод = Справочники.ДополнительныеКодыAudapadWeb.НайтиПоРеквизиту("КодПоКлассификатору", НомерКода);
		
		Если НЕ ЗначениеЗаполнено(ДопКод) Тогда
			ДопКод = Справочники.ДополнительныеКодыAudapadWeb.СоздатьЭлемент();
			ДопКод.УстановитьНовыйКод();
		Иначе
			ДопКод = ДопКод.ПолучитьОбъект();
		КонецЕсли;
		
		ДопКод.Наименование        = ТекстКода;
		ДопКод.КодПоКлассификатору = НомерКода;
		
		Если Применение = "Рубли" Тогда
			ДопКод.ТипНачисления = Перечисления.ТипыНачисленийДопКодов.Сумма;
		ИначеЕсли Применение = "РП" Тогда
			ДопКод.ТипНачисления = Перечисления.ТипыНачисленийДопКодов.РП;
		Иначе
			ДопКод.ТипНачисления = Перечисления.ТипыНачисленийДопКодов.Процент;
		КонецЕсли;
		
		Если Распределение = 1 Тогда
			ДопКод.ТипРаспределения = Перечисления.ТипыРаспределенияДопКодов.НаТоварыИРаботы;
			ДопКод.Родитель = Справочники.ДополнительныеКодыAudapadWeb.ТоварыИРаботы;
		ИначеЕсли Распределение = 2 Тогда
			ДопКод.ТипРаспределения = Перечисления.ТипыРаспределенияДопКодов.НаТовары;
			ДопКод.Родитель = Справочники.ДополнительныеКодыAudapadWeb.Товары;
		Иначе
			ДопКод.ТипРаспределения = Перечисления.ТипыРаспределенияДопКодов.НаРаботы;
			ДопКод.Родитель = Справочники.ДополнительныеКодыAudapadWeb.Работы;
		КонецЕсли;
		
		ДопКод.СкидкаНаценка = (СкидкаНаценка = "+");
		
		Если База = "" Тогда
			ДопКод.БазаДляРасчета = Перечисления.ТипыБазДляРасчетаДопКодов.НеИспользуется;
		ИначеЕсли База = "1" Тогда
			ДопКод.БазаДляРасчета = Перечисления.ТипыБазДляРасчетаДопКодов.Товары;
		ИначеЕсли База = "2" Тогда
			ДопКод.БазаДляРасчета = Перечисления.ТипыБазДляРасчетаДопКодов.Работы;
		ИначеЕсли База = "3" Тогда
			ДопКод.БазаДляРасчета = Перечисления.ТипыБазДляРасчетаДопКодов.РаботыПоОкраске;
		ИначеЕсли База = "4" Тогда
			ДопКод.БазаДляРасчета = Перечисления.ТипыБазДляРасчетаДопКодов.РаботыПоРемонту;
		ИначеЕсли База = "5" Тогда
			ДопКод.БазаДляРасчета = Перечисления.ТипыБазДляРасчетаДопКодов.ТоварыИРаботы;
		КонецЕсли;
		
		Попытка
			ДопКод.ОбменДанными.Загрузка = Истина;
			ДопКод.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи элемента'"),
			УровеньЖурналаРегистрации.Ошибка,,
			ДопКод,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("Заполнение справочника дополнительных кодов - окончено.");
	#КонецЕсли
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	Если НЕ Объект.ЭтоГруппа Тогда
		ОбязательныеРеквизиты.Добавить("ТипНачисления");
		ОбязательныеРеквизиты.Добавить("ТипРаспределения");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	Если НЕ Объект.ЭтоГруппа Тогда
		УникальныеРеквизиты.Вставить("КодПоКлассификатору", 3);
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#КонецОбласти

#КонецЕсли