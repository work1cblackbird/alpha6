// Модуль менеджера справочника "Автомобили"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда   
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

 #Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВводВЭксплуатациюАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказНаАвтомобиль);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаОпцийАвтомобиля);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РезервированиеАвтомобилей);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Справочники.Автомобили);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РежимПоиска = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Режим");
	СтрокаПоиска = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СтрокаПоиска");
	Владелец = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Владелец");
	НазначениеМодели = ПолучитьЗначениеПараметраСтруктуры(Параметры, "НазначениеМодели");
	
	Если РежимПоиска = "ОтборПоВладельцу" И ЗначениеЗаполнено(Владелец) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений();
		ДанныеВыбора.ЗагрузитьЗначения(АвтомобилиВладельца(СтрокаПоиска, Владелец));
		
	ИначеЕсли РежимПоиска = "ОтборПоНазначениюМодели" И ЗначениеЗаполнено(НазначениеМодели) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений();
		ДанныеВыбора.ЗагрузитьЗначения(АвтомобилиПоНазначениюМодели(СтрокаПоиска, НазначениеМодели));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Наименование");
	Поля.Добавить("VIN");
	Поля.Добавить("Ссылка");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ГосНомер = Неопределено;
	НаименованиеВРег = СтрЗаменить(ВРег(Данные.Наименование), " ", "");
	
	ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Данные.Ссылка,
		Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, ТекущаяДата());
	
	ЧастиПредставления = Новый Массив();
	ЧастиПредставления.Добавить(СокрЛП(Данные.Наименование));
	
	Если СтрНайти(НаименованиеВРег, СтрЗаменить(ВРег(СокрЛП(Данные.VIN)), " ", "")) = 0 Тогда
	
		ЧастиПредставления.Добавить("vin: " + Данные.VIN);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГосНомер) И СтрНайти(НаименованиеВРег, СтрЗаменить(ВРег(СокрЛП(ГосНомер)), " ", "")) = 0 Тогда
		
		ЧастиПредставления.Добавить("гос. номер: " + ГосНомер);
		
	КонецЕсли;
		
	Представление = СтрСоединить(ЧастиПредставления, "; ");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция записи параметров в регистр сведений
//
// Параметры:
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль для которого за
//  Значение   - Произвольный - Значение регистра сведений
//  ВидЗначения - ПеречислениеСсылка.ДополнительнаяИнформацияАвтомобилей - 
//                 Описание вида значения регистра сведений
//  НаДату - Дата - (Необязательное). Дата записи в регистр.
//  ИсточникИнформации - Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля - источник информации.
//  ПроверкаЗапретаИзменения - Булево - проверка запрета изменения.
//
// Возвращаемое значение:
//   Булево   - ошибка записи значения.
//
Функция ЗаписьЗначенияРегистраСведения(
	Автомобиль,
	Значение,
	ВидЗначения,
	НаДату = Неопределено,
	Знач ИсточникИнформации = Неопределено,
	ПроверкаЗапретаИзменения = Истина) Экспорт
	
	Отказ = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НаДату = Неопределено Тогда
		ДатаЗаписи = ТекущаяДатаСеанса();
	Иначе
		ДатаЗаписи = НаДату;
	КонецЕсли; 
	
	КонтрольПробега = 
		ПраваИНастройкиПользователя.Значение("НеКонтролироватьКорректностьВводаПробега")= Ложь;
		
	Если ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег Тогда
		// При записи нового пробега
		// Получить последний пробег и следующий.
		СтруктураОтбора = Новый Структура(
			"Автомобиль,ВидЗначения",
			Автомобиль,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег
		);
		
		СтруктураСведений = РегистрыСведений.Автомобили.ПолучитьПоследнее(
			Новый Граница(ДатаЗаписи, ВидГраницы.Исключая), СтруктураОтбора
		);
		
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		ПробегДо = ОписаниеТипаЧисло.ПривестиЗначение(СтруктураСведений.Значение);
		
		СтруктураСведений = РегистрыСведений.Автомобили.ПолучитьПервое(
			Новый Граница(ДатаЗаписи, ВидГраницы.Исключая), СтруктураОтбора
		);
		
		ПробегПосле = ОписаниеТипаЧисло.ПривестиЗначение(СтруктураСведений.Значение);
		Если ПробегПосле = 0 Тогда
			ПробегПосле = 9999999999;
		КонецЕсли;
		
		Если Значение < ПробегДо Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Значение пробега автомобиля не может быть менее старого значения (%1).'"),
					СокрЛП(ПробегДо)
				)
			); 
			Если КонтрольПробега Тогда 
				Отказ = Истина;
				Возврат Отказ
			КонецЕсли;
		КонецЕсли;
		
		Если Значение > ПробегПосле Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Значение пробега автомобиля не может быть более следующего значения (%1).'"),
					СокрЛП(ПробегПосле)
				)
			);
			Если КонтрольПробега Тогда 
				Отказ = Истина;
				Возврат Отказ
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// Чтение старого значения регистра
		СтруктураОтбора = Новый Структура("Автомобиль,ВидЗначения", Автомобиль, ВидЗначения);
		СтруктураСведений = РегистрыСведений.Автомобили.ПолучитьПоследнее(ДатаЗаписи, СтруктураОтбора);
		ЗначениеСтарое    = СтруктураСведений.Значение;
		Записывать        = Ложь;
		
		// Введено значение, а старое отсутствует
		Если ЗначениеЗаполнено(Значение) И ЗначениеСтарое = Неопределено Тогда
			Записывать = Истина;
		КонецЕсли;
		
		// Значение стерто, а старое значение было введено
		Если НЕ ЗначениеЗаполнено(Значение) И ЗначениеСтарое <> Неопределено Тогда
			// Значение изменилось
			Если Значение <> ЗначениеСтарое Тогда
				Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Введено значение и было введено старое
		Если ЗначениеЗаполнено(Значение) И ЗначениеСтарое <> Неопределено Тогда
			// Значение изменилось
			Если Значение <> ЗначениеСтарое Тогда
				Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Проверим источник информации
		Если ИсточникИнформации = Неопределено Тогда
			ИсточникИнформации = Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.Прочее;
		КонецЕсли;
		
		Если Записывать Тогда
			
			Набор = РегистрыСведений.Автомобили.СоздатьНаборЗаписей();
			Набор.Отбор.Автомобиль.Установить(Автомобиль);
			Набор.Отбор.ВидЗначения.Установить(ВидЗначения);
			Набор.Отбор.Период.Установить(ДатаЗаписи);
			
			Если НЕ ПроверкаЗапретаИзменения Тогда
				
				Набор.ДополнительныеСвойства.Вставить("ПроверкаЗапретаИзменения", ПроверкаЗапретаИзменения);
				
			КонецЕсли;
			
			НоваяСтрока = Набор.Добавить();
			НоваяСтрока.Автомобиль = Автомобиль;
			НоваяСтрока.ВидЗначения = ВидЗначения;
			НоваяСтрока.Значение = Значение;
			НоваяСтрока.Период = ДатаЗаписи;
			НоваяСтрока.ИсточникИнформации = ИсточникИнформации;
			
			Попытка
				
				Набор.Записать(Истина);
				
			Исключение
				
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка записи параметра автомобиля в регистр сведений'"), , , , Отказ);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ЗаписьЗначенияРегистраСведения()

// Функция чтения параметров из регистра сведений.
//
// Параметры:
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль для которого за
//  ВидЗначения - ПеречислениеСсылка.ДополнительнаяИнформацияАвтомобилей - 
//                 Описание вида значения регистра сведений
//  НаДату - Дата - (необязательное). Дата чтения из регистра
//
// Возвращаемое значение:
//   Произвольное - прочитанное значение.
//
Функция ЧтениеЗначенияРегистраСведения(Автомобиль, ВидЗначения, НаДату = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		ДатаЗаписи = Неопределено;
	Иначе
		ДатаЗаписи = НаДату;
	КонецЕсли;
	
	СтруктураОтбора   = Новый Структура("Автомобиль, ВидЗначения", Автомобиль, ВидЗначения);
	СтруктураСведений = РегистрыСведений.Автомобили.ПолучитьПоследнее(ДатаЗаписи, СтруктураОтбора);
	
	Возврат СтруктураСведений.Значение;
	
КонецФункции

// Функция проверяет установлено ли свойство "ВидАвтомобиля" в значение "АвтомобильСПробегом"
//
// Параметры:
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль для которого выполняется проверка свойства
//
// Возвращаемое значение:
//   Булево    - результат проверки.
//
Функция ЭтоАвтомобильСПробегом(Автомобиль) Экспорт
	
	ВидАвтомобиля = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
		Автомобиль, 
		Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля
	);
	
	Возврат ВидАвтомобиля = Перечисления.ВидАвтомобиля.АвтомобильСПробегом;
	
КонецФункции

// Функция формирования наименования автомомбиля по значениям реквизитов
//
// Параметры:
//  Модель - СправочникСсылка.Модели - (необязательное). Модель автомобиля.
//  Цвет - СправочникСсылка.Цвета - (необязательное). Цвет автомобиля.
//  ГосНомер - Строка - (необязательное) - гос. номер автомобиля.
//  VIN - Строка - (необязательное) - VIN код автомобиля.
//
// Возвращаемое значение:
//  Строка - сформированное наименование.
//
Функция СформироватьНаименованиеАвтомобиляПоПолям(Модель = "", Цвет = "", ГосНомер = "", VIN = "") Экспорт
	
	Наименование = "";
	
	Если ЗначениеЗаполнено(Модель) Тогда
		Наименование = Наименование + СокрЛП(Модель) + Символы.НПП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Цвет) Тогда
		Наименование = Наименование + СокрЛП(Цвет) + Символы.НПП;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ГосНомер) Тогда
		Наименование = Наименование + "№ " + СокрЛП(ГосНомер) + Символы.НПП;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(VIN) Тогда
		Наименование = Наименование + "VIN " + СокрЛП(VIN);
	КонецЕсли;
	
	Наименование = СокрЛП(Наименование);
	
	Возврат Наименование;
	
КонецФункции

// Процедура генерирует наименование объекта автомобили
// на основании реквизитов модель, цвет, госномер, vin.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Строка - сформированное наименование.
//
Функция СформироватьНаименованиеПоУмолчанию(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Наименование = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Модель) И НЕ Значениезаполнено(Объект.VIN) Тогда
		Возврат Наименование;
	КонецЕсли;
	
	ГосНомер = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ГосНомер", "");
	
	Наименование = СформироватьНаименованиеАвтомобиляПоПолям(Объект.Модель, Объект.Цвет, ГосНомер, Объект.VIN);
	
	Возврат Наименование;
	
КонецФункции // СформироватьНаименованиеПоУмолчанию()

// Процедура генерирует полное наименование объекта автомобили
// на основании реквизитов модель, цвет, госномер, vin.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Строка - сформированное наименование.
//
Функция СформироватьНаименованиеПолноеПоУмолчанию(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Наименование = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Модель) И НЕ Значениезаполнено(Объект.VIN) Тогда
		Возврат Наименование;
	КонецЕсли;
	
	ГосНомер = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ГосНомер", "");
	
	Наименование = СформироватьНаименованиеАвтомобиляПоПолям(Объект.Модель, Объект.Цвет, ГосНомер, Объект.VIN);
	
	Возврат Наименование;
	
КонецФункции // СформироватьНаименованиеПолноеПоУмолчанию()

// Проверка корректности VIN
Функция ПроверитьКорректностьVIN(Отказ, Знач ВремVIN) Экспорт

	РазрешенныеСимволы 		= СокрЛП(ПраваИНастройкиПользователя.Значение("КонтрольВводаРазрешенныхСимволовVIN"));
	РазрешенныеСимволыVIN 	= "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ- " + РазрешенныеСимволы;
	
	ЗапрещенныеСимволы = СокрЛП(ПраваИНастройкиПользователя.Значение("КонтрольВводаЗапрещенныхСимволовVIN"));
	Результат = "";
	
	Если НЕ ЗапрещенныеСимволы = "" Тогда
		// удалим запрещенные символы
		Пока СтрДлина(ЗапрещенныеСимволы) > 0 Цикл
			ТекСимвол = Лев(ЗапрещенныеСимволы, 1);
			ЗапрещенныйСимволVINВРег = ВРег(ТекСимвол);
			ЗапрещенныйСимволVINНРег = НРег(ТекСимвол);
			
			Если Найти(РазрешенныеСимволыVIN, ЗапрещенныйСимволVINВРег) <> 0 Тогда
				РазрешенныеСимволыVIN = СтрЗаменить(РазрешенныеСимволыVIN, ЗапрещенныйСимволVINВРег, "");
			КонецЕсли;
			
			Если Найти(РазрешенныеСимволыVIN, ЗапрещенныйСимволVINНРег) <> 0 Тогда
				РазрешенныеСимволыVIN = СтрЗаменить(РазрешенныеСимволыVIN, ЗапрещенныйСимволVINНРег, "");
			КонецЕсли;
			
			ЗапрещенныеСимволы = Сред(ЗапрещенныеСимволы, 2);
		КонецЦикла;
	КонецЕсли;
	
	Пока СтрДлина(ВремVIN) > 0 Цикл
		СимволVIN = Лев(ВремVIN, 1);
		Если Найти(РазрешенныеСимволыVIN, СимволVIN) = 0 Тогда
			Если Найти(Результат, СимволVIN) = 0 Тогда
				Результат = Результат + ?(Результат = "", "", ", ") + СимволVIN;
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		ВремVIN = Сред(ВремVIN, 2);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПроверитьКорректностьVIN()

// Получает опции и оборудование автомобиля
Функция ПолучитьОпцииИОборудованиеАвтомобиля(Объект, ТаблицаКомплектации) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КомплектацияАвтомобилейОстатки.Номенклатура КАК Номенклатура,
	|	КомплектацияАвтомобилейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КомплектацияАвтомобилейОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	КомплектацияАвтомобилейОстатки.СуммаПродажиУпрОстаток КАК СуммаПродажиУпрОстаток,
	|	КомплектацияАвтомобилейОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей.Остатки(, Автомобиль = &Автомобиль) КАК КомплектацияАвтомобилейОстатки";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Автомобиль", Объект.Ссылка);
	ТаблицаКомплектации = Запрос.Выполнить().Выгрузить();
	
	Возврат НЕ (ТаблицаКомплектации.Количество() = 0);
	
КонецФункции // ПолучитьОпцииИОборудованиеАвтомобиля()

// Функция Формирования представления информации об автомобилиле

// Сформировать информацию автомобиля
// 
// Параметры:
//  Объект - ДокументОбъект - документ в котором будет выводиться информация об автомобиле; 
//  Автомобиль - Неопределено, СправочникСсылка.Автомобили - автомобиль;
// 
// Возвращаемое значение:
//  Строка - Информация автомобиля
Функция СформироватьИнформациюАвтомобиля(Объект, Автомобиль = Неопределено) Экспорт
	
	Если Автомобиль = Неопределено И ЕстьРеквизит(Объект, "Автомобиль") Тогда
		
		Автомобиль = Объект.Автомобиль;
		
	КонецЕсли;
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Автомобиль) Тогда
		
		ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, 
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Объект.Дата);
			
		ЧастиПредставления = Новый Массив();
		ЧастиПредставления.Добавить(СокрЛП(Автомобиль.Наименование));
		
		Если СтрНайти(Автомобиль.Наименование, Автомобиль.VIN) = 0 Тогда
		
			ЧастиПредставления.Добавить("VIN: " + Автомобиль.VIN);
		
		КонецЕсли;
						
		Если ЗначениеЗаполнено(ГосНомер) И СтрНайти(Автомобиль.Наименование, ГосНомер) = 0 Тогда
			
			ЧастиПредставления.Добавить("гос. номер: " + ГосНомер);
			
		КонецЕсли;
			
		Результат = СтрСоединить(ЧастиПредставления, "; "); 
		
	Иначе
		
		Результат = НСтр("ru = '<Автомобиль не выбран>'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует соответствие мест размещения для автомобилей
//
Функция РазмещениеАвтомобилей(Автомобили, НаДату = Неопределено) Экспорт
	
	построитель = Новый ПостроительЗапроса;
	построитель.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(
	|		&НаДату,
	|		{(Автомобиль) КАК Автомобиль}) КАК ОстаткиАвтомобилейОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамНаАвтомобилиОбороты.Автомобиль КАК Автомобиль,
	|	ЗаказыПоставщикамНаАвтомобилиОбороты.ЗаказПоставщику КАК ЗаказПоставщику
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Обороты(
	|		,
	|		&НаДату,
	|		,
	|		{(Автомобиль) КАК Автомобиль}) КАК ЗаказыПоставщикамНаАвтомобилиОбороты
	|ГДЕ
	|	ЗаказыПоставщикамНаАвтомобилиОбороты.КоличествоПриход > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказыПоставщикамНаАвтомобилиОбороты.ЗаказПоставщику.МоментВремени УБЫВ";
	
	построитель.ЗаполнитьНастройки();
	построитель.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	
	построитель.Параметры.Вставить("НаДату", НаДату);
	
	типАвтомобиля = ТипЗнч(Автомобили);
	Если типАвтомобиля = Тип("Массив") Тогда
		отборПоАвтомобилю = построитель.Отбор.Добавить("Автомобиль", "Автомобиль");
		отборПоАвтомобилю.Использование = Истина;
		отборПоАвтомобилю.ВидСравнения = ВидСравнения.ВСписке;
		
		список = Новый СписокЗначений();
		список.ЗагрузитьЗначения(Автомобили);
		
		отборПоАвтомобилю.Значение = список;
	Иначе
		построитель.Отбор.Добавить("Автомобиль", "Автомобиль").Установить(Автомобили, Истина);
	КонецЕсли;
	
	запрос = построитель.ПолучитьЗапрос();
	результатЗапроса = запрос.ВыполнитьПакет();
	
	выборкаСклады = Неопределено;
	Если НЕ результатЗапроса[0].Пустой() Тогда
		выборкаСклады = результатЗапроса[0].Выбрать();
	КонецЕсли;
	
	выборкаЗаказы = Неопределено;
	Если НЕ результатЗапроса[1].Пустой() Тогда
		выборкаЗаказы = результатЗапроса[1].Выбрать();
	КонецЕсли;
	
	размещениеАвтомобилей = Новый Соответствие();
	Если типАвтомобиля = Тип("Массив") Тогда
		Для Каждого автомобиль Из Автомобили Цикл
			значениеСклад = Неопределено;
			условие = Новый Структура("Автомобиль", автомобиль);
			Если выборкаСклады <> Неопределено Тогда
				выборкаСклады.Сбросить();
				Если выборкаСклады.НайтиСледующий(условие) Тогда
					значениеСклад = выборкаСклады.СкладКомпании;
				КонецЕсли;
			КонецЕсли;
			
			значениеЗаказ = Неопределено;
			Если выборкаЗаказы <> Неопределено Тогда
				выборкаЗаказы.Сбросить();
				Если выборкаЗаказы.НайтиСледующий(условие) Тогда
					значениеЗаказ = выборкаЗаказы.ЗаказПоставщику;
				КонецЕсли;
			КонецЕсли;
			
			данныеАвтомобиля = Новый Массив;
			данныеАвтомобиля.Добавить(значениеСклад);
			данныеАвтомобиля.Добавить(значениеЗаказ);
			
			размещениеАвтомобилей.Вставить(автомобиль, данныеАвтомобиля);
		КонецЦикла;
	Иначе
		значениеСклад = Неопределено;
		условие = Новый Структура("Автомобиль", Автомобили);
		Если выборкаСклады <> Неопределено Тогда
			Если выборкаСклады.НайтиСледующий(условие) Тогда
				значениеСклад = выборкаСклады.СкладКомпании;
			КонецЕсли;
		КонецЕсли;
		
		значениеЗаказ = Неопределено;
		Если выборкаЗаказы <> Неопределено Тогда
			Если выборкаЗаказы.НайтиСледующий(условие) Тогда
				значениеЗаказ = выборкаЗаказы.ЗаказПоставщику;
			КонецЕсли;
		КонецЕсли;
		
		данныеАвтомобиля = Новый Массив;
		данныеАвтомобиля.Добавить(значениеСклад);
		данныеАвтомобиля.Добавить(значениеЗаказ);
		
		размещениеАвтомобилей.Вставить(Автомобили, данныеАвтомобиля);
	КонецЕсли;
	
	Возврат размещениеАвтомобилей;
	
КонецФункции

#Область ПолученияДанныхВыбораОбработчики

Функция АвтомобилиВладельца(СтрокаПоиска, Владелец)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ АвтомобилиВладельца
		|ИЗ
		|	РегистрСведений.Автомобили.СрезПоследних(
		|			,
		|			ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.Хозяин)
		|				И Значение = &Владелец) КАК АвтомобилиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Автомобиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль,
		|	ВЫРАЗИТЬ(АвтомобилиСрезПоследних.Значение КАК СТРОКА(20)) КАК ГосНомер
		|ПОМЕСТИТЬ ГосНомера
		|ИЗ
		|	РегистрСведений.Автомобили.СрезПоследних(
		|			,
		|			ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ГосНомер)
		|				И Автомобиль В
		|					(ВЫБРАТЬ
		|						АвтомобилиВладельца.Автомобиль КАК Автомобиль
		|					ИЗ
		|						АвтомобилиВладельца КАК АвтомобилиВладельца)) КАК АвтомобилиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Автомобиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АвтомобилиВладельца.Автомобиль КАК Автомобиль,
		|	АвтомобилиВладельца.Автомобиль.Наименование КАК Наименование,
		|	АвтомобилиВладельца.Автомобиль.VIN КАК VIN,
		|	АвтомобилиВладельца.Автомобиль.ОригинальныйVIN КАК ОригинальныйVIN,
		|	ЕСТЬNULL(ГосНомера.ГосНомер, """") КАК ГосНомер
		|ПОМЕСТИТЬ РезультирующаяТаблица
		|ИЗ
		|	АвтомобилиВладельца КАК АвтомобилиВладельца
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГосНомера КАК ГосНомера
		|		ПО АвтомобилиВладельца.Автомобиль = ГосНомера.Автомобиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АвтомобилиВладельца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ГосНомера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РезультирующаяТаблица.Автомобиль КАК Автомобиль
		|ИЗ
		|	РезультирующаяТаблица КАК РезультирующаяТаблица
		|ГДЕ
		|	(РезультирующаяТаблица.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|			ИЛИ РезультирующаяТаблица.VIN ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|			ИЛИ РезультирующаяТаблица.ОригинальныйVIN ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|			ИЛИ РезультирующаяТаблица.ГосНомер ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"")"
	);
		
	Запрос.УстановитьПараметр("Текст", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска) + "%");
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Автомобиль");
	
КонецФункции

Функция АвтомобилиПоНазначениюМодели(СтрокаПоиска, НазначениеМодели)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Автомобили.Ссылка КАК Автомобиль
		|ИЗ
		|	Справочник.Автомобили КАК Автомобили
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Модели КАК Модели
		|		ПО (Автомобили.Модель = Модели.Ссылка
		|				И Модели.НазначениеМодели = &НазначениеМодели)
		|ГДЕ
		|	Автомобили.ЭтоГруппа = ЛОЖЬ
		|	И Автомобили.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"""
	);
	Запрос.УстановитьПараметр("Текст", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска));
	Запрос.УстановитьПараметр("НазначениеМодели", НазначениеМодели);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Автомобиль");
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Модель".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, СправочникОбъект.Автомобили - Объект, для которого выполняется обработка события;
//  ПараметрыДействия - Структура - Параметры обработки изменения реквизитов
//
Процедура МодельПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Объект.Марка = Объект.Модель.Марка;
	
	Если Объект.Модель <> Объект.ВариантКомплектации.Владелец Тогда
		
		Объект.ВариантКомплектации = Справочники.ВариантыКомплектации.ПустаяСсылка();
		
	КонецЕсли;
	
	Если
		ЗначениеЗаполнено(Объект.ДатаНачалаГарантии)
		И ЗначениеЗаполнено(Объект.Модель)
		И Объект.Модель.СрокГарантии > 0
	Тогда
		
		Объект.ДатаОкончанияГарантии = ДобавитьМесяц(Объект.ДатаНачалаГарантии, Объект.Модель.СрокГарантии);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "ВариантКомплектации".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, СправочникОбъект.Автомобили - Объект, для которого выполняется обработка события;
//  ПараметрыДействия - Структура - Параметры обработки изменения реквизитов
//
Процедура ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда
		
		ДанныеВарианта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВариантКомплектации, 
			"ВалютаУчета,МодельДвигателя");
		
		Объект.ВалютаУчета = ДанныеВарианта.ВалютаУчета;
		
		Если Не ДанныеВарианта.МодельДвигателя.Пустая() Тогда
			
			Если Объект.МодельДвигателя.Пустая() Тогда
				
				Объект.МодельДвигателя = ДанныеВарианта.МодельДвигателя;
				
			ИначеЕсли Объект.МодельДвигателя <> ДанныеВарианта.МодельДвигателя Тогда
				
				ПараметрыДействия.Вставить("ТребуетсяОбновитьМодельДвигателя", Истина);
				ПараметрыДействия.Вставить("МодельДвигателяДляОбновления", ДанныеВарианта.МодельДвигателя);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("Модель;Модель");
	Результат.Добавить("Марка;Марка");
	Результат.Добавить("ВариантКомплектации;ВариантКомплектации");
	Результат.Добавить("VIN;VIN");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	
	Если НЕ Объект.ЭтоГруппа Тогда
		ОбязательныеРеквизиты.Добавить("Марка");
		ОбязательныеРеквизиты.Добавить("Модель");
		
		Если АвтомобилиСервер.VINОбязательный(Объект.Ссылка) Тогда
			ОбязательныеРеквизиты.Добавить("VIN");
		КонецЕсли;
		
		Если АвтомобилиСервер.НомерШассиОбязательный(Объект.Ссылка) Тогда
			ОбязательныеРеквизиты.Добавить("НомерШасси");
		КонецЕсли;
		
		Если Объект.Прослеживаемый Тогда
			ОбязательныеРеквизиты.Добавить("КодТНВЭД");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#КонецОбласти

#КонецЕсли

