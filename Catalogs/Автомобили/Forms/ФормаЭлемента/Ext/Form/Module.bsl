
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	СопоставлениеНоменклатурыКонтрагентов.ПриСозданииФормыНоменклатуры(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	РаботаСФормой.ЗаблокироватьРедактированиеПредопределенногоЭлемента(ЭтотОбъект);
	РаботаСФормой.УстановитьДоступностьПоляКодНаФормеСправочника(ЭтотОбъект, Объект);
	
	НеобходимоОповеститьПослеЗаписи = Параметры.НеобходимоОповеститьПослеЗаписи;
	
	// Если подсистема Автосалон недоступна, то доп. реквизит ИспользоватьДляТестДрайва - тоже.
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения")
		И НЕ ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон") Тогда
		Для Каждого Элемент Из Элементы Цикл
			Если НЕ СтрНачинаетсяС(Элемент.Имя, "ДополнительныйРеквизитЗначение_") Тогда
				Продолжить;
			КонецЕсли;
			Если Элемент.Вид = ВидПоляФормы.ПолеФлажка
				И Элемент.Подсказка = "Использовать для тест-драйва" Тогда 
				Элемент.Видимость = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Сформируем формат представления колонки списка "Год выпуска"
	Элементы.ГодВыпуска.ФорматРедактирования = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Объект);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОборудованиеАвтомобиля.Параметры.УстановитьЗначениеПараметра("Автомобиль",Объект.Ссылка);
		ОпцииАвтомобиля.Параметры.УстановитьЗначениеПараметра("Автомобиль",Объект.Ссылка);
	Иначе
		ОборудованиеАвтомобиля.Параметры.УстановитьЗначениеПараметра("Автомобиль",Неопределено);
		ОпцииАвтомобиля.Параметры.УстановитьЗначениеПараметра("Автомобиль",Неопределено);
	КонецЕсли;
	
	ОпцииВариантаКомплектации.Параметры.УстановитьЗначениеПараметра("ВариантКомплектации", Объект.ВариантКомплектации);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Хозяин = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Ссылка,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин);
		Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Ссылка,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег);
		ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Ссылка,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер);
		ТехПаспорт = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Ссылка,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт);
		СРТС = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Ссылка,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.СвидетельствоОРегистрацииТС);
		ИндикацияУстаревшихПодтверждающихДокументов();
		ЭтоАвтомобильСПробегом = Справочники.Автомобили.ЭтоАвтомобильСПробегом(Объект.Ссылка);
		ПриобретенУФизЛица = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Ссылка,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица);
		ЗапланироватьТОНаСервере();
		
	Иначе
		
		ГосНомер = ПолучитьЗначениеПараметраСтруктуры(Параметры.ПараметрыВыбора, "ГосНомер");
		
	КонецЕсли;
	
	// Если ввели новый элемент копированием
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И ЗначениеЗаполнено(Параметры.ЗначениеКопирования.Ссылка) Тогда
		
		Хозяин = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Параметры.ЗначениеКопирования.Ссылка,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин);
		
	КонецЕсли;
	
	ЗаполнитьВидХозяина();
	ОграничитьТипХозяина();
		
	// Дальнейшие операции выпольняются только для новых объектов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМаскуVIN();
	
	// Заполним марку автомобиля по умолчанию
	ТекущаяМаркаПоУмолчанию = УчетныеПолитикиСервер.Значение(
		"МаркаПоУмолчанию",
		ТекущаяДатаСеанса(),
		ПараметрыСеанса.ПодразделениеКомпании	
	);
	Если НЕ ЗначениеЗаполнено(Объект.Марка) Тогда
		Если ТекущаяМаркаПоУмолчанию = Справочники.Марки.ПустаяСсылка() Тогда
			Объект.Марка = Справочники.Марки.МаркаНеУказана;
		Иначе
			Объект.Марка = ТекущаяМаркаПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если НеСтандартнаяМарка(Объект.Марка) И Не Элементы.Найти("Модель") = Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.Модель.ПараметрыВыбора, "Отбор.Марка", Объект.Марка);
	КонецЕсли;
	
	// Получим хозяина автомобиля из параметров выбора
	Если Не ЗначениеЗаполнено(Хозяин) Тогда
		Хозяин = ПолучитьЗначениеПараметраСтруктуры(Параметры.ПараметрыВыбора, "Владелец", Хозяин);
	КонецЕсли;
	Пробег = ПолучитьЗначениеПараметраСтруктуры(Параметры.ПараметрыВыбора, "Пробег");
		
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СформироватьНаименованиеПоУмолчанию();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// АльфаАвто.РаботаСФайлами
	РаботаСФайламиАльфаАвтоКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.РаботаСФайлами
	
	Если ИмяСобытия = "ПодтверждающиеДокументыПослеЗаписи"
		И (Параметр = ТехПаспорт ИЛИ Параметр = СРТС) Тогда 
		ИндикацияУстаревшихПодтверждающихДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Инициализируем текущее изображение с прикрепленных файлов
	ТекущаяКартинка = Объект.ФайлКартинки;
	
	РаботаСФайламиАльфаАвтоВызовСервера.ВывестиТекущееИзображение(ЭтотОбъект);
	
	УстановитьМаскуVIN();
	
	ЗаполнитьСервисныеКампании();
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	Элементы.СтраницаСервисныеКампании.Доступность = (ЗначениеЗаполнено(Объект.VIN));
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПропуститьПроверкуВладельцаАвтомобиля =
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "ПропуститьПроверкуВладельцаАвтомобиля", Ложь);
	Если НЕ ПропуститьПроверкуВладельцаАвтомобиля И Хозяин.Пустая() Тогда
		
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Не указан владелец автомобиля.'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОповещенияПриИзмененииВладельцаАвтомобиля",
			ЭтотОбъект,
			ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "ЗакрытьПослеЗаписи", Ложь)
		);
		
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить(Истина, НСтр("ru = 'Выбрать владельца'"));
		ВариантыОтветов.Добавить(Ложь  , НСтр("ru = 'Записать без владельца'"));
		ВариантыОтветов.Добавить(Неопределено, "Отмена");
		
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, ВариантыОтветов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Отказ = Отказ ИЛИ АвтомобилиСервер.ПроверитьКорректностьГосНомера(Объект, ГосНомер, Истина);
	
	Если НЕ Отказ Тогда
		НайтиПустуюСсылку = ВыполнениеСервисныхКампаний.НайтиСтроки(Новый Структура("СервиснаяКампания",Справочники.СервисныеКампании.ПустаяСсылка()));
		НайтиНеопределено = ВыполнениеСервисныхКампаний.НайтиСтроки(Новый Структура("СервиснаяКампания",Неопределено));
		Если НайтиПустуюСсылку.Количество() > 0 ИЛИ НайтиНеопределено.Количество() > 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена сервисная кампания.'"), ТекущийОбъект);
			Отказ = Истина;
		Иначе
			Результат = ЗаписатьВыполненныеСервисныеКампании();
			Отказ = Отказ ИЛИ Результат;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// Запишем соответствующие реквизиты в регистр сведений "Характеристики автомобилей".
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(Объект.Ссылка,
		Хозяин, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,
		НачалоТекущегоДня, Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.Прочее);
	Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(Объект.Ссылка,
		Пробег, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
		НачалоТекущегоДня, Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.Прочее);
	Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(Объект.Ссылка,
		ГосНомер, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,
		НачалоТекущегоДня, Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.Прочее);
	Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(Объект.Ссылка,
		ТехПаспорт, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт,
		НачалоТекущегоДня, Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.Прочее);
	Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(Объект.Ссылка,
		СРТС, Перечисления.ДополнительнаяИнформацияАвтомобилей.СвидетельствоОРегистрацииТС,
		НачалоТекущегоДня, Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.Прочее);
	ВидАвтомобиля = ?(ЭтоАвтомобильСПробегом, Перечисления.ВидАвтомобиля.АвтомобильСПробегом,
		Перечисления.ВидАвтомобиля.Новый);
	Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(Объект.Ссылка,
		ВидАвтомобиля, Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля,
		НачалоТекущегоДня, Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.Прочее);
	Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(Объект.Ссылка,
		ПриобретенУФизЛица, Перечисления.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица,
		НачалоТекущегоДня, Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.Прочее);
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если НеобходимоОповеститьПослеЗаписи Тогда
		
		СтруктураАвтомобиля = Новый Структура();
		СтруктураАвтомобиля.Вставить("Автомобиль", Объект.Ссылка);
		СтруктураАвтомобиля.Вставить("Хозяин", Хозяин);
		Оповестить("ЗаписанАвтомобиль", СтруктураАвтомобиля, ЭтотОбъект);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.VIN) Тогда
		
		Оповестить("ОбновитьVINАвтомобиля", Объект.VIN, Объект.Ссылка);
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "ЗакрытьПослеЗаписи", Ложь) Тогда
		
		ОповеститьОЗаписиНового(Объект.Ссылка);
		Закрыть(Неопределено);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура МаркаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если Не Элементы.Найти("Модель") = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Объект.Марка) И НеСтандартнаяМарка(Объект.Марка) Тогда
			
			УправлениеДиалогомСервер
				.ОбновитьПараметрВыбора(Элементы.Модель.ПараметрыВыбора, "Отбор.Марка", Объект.Марка);
			
		Иначе
			
			УправлениеДиалогомСервер.УдалитьПараметрВыбора(Элементы.Модель.ПараметрыВыбора, "Отбор.Марка");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаПриИзменении(Элемент)
	
	МаркаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МаркаМодели = МаркаМодели(Объект.Модель);
	Если НЕ МаркаМодели = ВыбранноеЗначение И ЗначениеЗаполнено(Объект.Модель) Тогда
		СтандартнаяОбработка = Ложь;
		Режим = РежимДиалогаВопрос.ДаНет;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Вопрос", "ВопросСоответствияМарок");
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		ТекстВопроса = НСтр(
			"ru = 'Текущая модель марки <%1>. Выбрана марка автомобиля <%2>.%3Подтвердить выбор марки и очистить модель?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, МаркаМодели, ВыбранноеЗначение, Символы.ПС);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МодельПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Справочники.Автомобили.МодельПриИзменении(Объект, ПараметрыДействия);
	
	УстановитьМаскуVIN();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ГосНомер", ГосНомер);
	
	МодельПриИзмененииНаСервере(ПараметрыДействия);
	СформироватьНаименованиеПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Марка", Объект.Марка);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ОткрытьФорму(
		"Справочник.Модели.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтотОбъект,
		, , ,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыОткрытия),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ВариантКомплектацииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ОборудованиеАвтомобиля.Параметры.УстановитьЗначениеПараметра("Автомобиль", Объект.Ссылка);
	ОпцииАвтомобиля.Параметры.УстановитьЗначениеПараметра("Автомобиль", Объект.Ссылка);
	ОпцииВариантаКомплектации.Параметры.УстановитьЗначениеПараметра("ВариантКомплектации", Объект.ВариантКомплектации);
	Справочники.Автомобили.ВариантКомплектацииПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантКомплектацииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ВариантКомплектацииПриИзмененииНаСервере(ПараметрыДействия);
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СформироватьНаименованиеПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура VINПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
    
	ЗаполнитьСервисныеКампании();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура VINПриИзменении(Элемент)
	
	СформироватьНаименованиеПоУмолчанию();
	
	ПодключитьОбработчикОжидания("Подключаемый_VINПриИзменении", 0.1, Истина);
	
	Элементы.СтраницаСервисныеКампании.Доступность = (ЗначениеЗаполнено(Объект.VIN));
	
КонецПроцедуры

&НаСервере
Процедура ГосНомерПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	АвтомобилиСервер.ПроверитьКорректностьГосНомера(Объект, ГосНомер, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГосНомерПриИзменении(Элемент)
	
	СформироватьНаименованиеПоУмолчанию();
	ПодключитьОбработчикОжидания("Подключаемый_ГосНомерПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТехПаспортНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивВидовДокумента = Новый Массив();
	МассивВидовДокумента.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДокументов.ПТС"));
	МассивВидовДокумента.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДокументов.ЭлектронныйПТС"));
	
	// параметры формы
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидПодтверждающегоДокумента, Владелец", Новый ФиксированныйМассив(МассивВидовДокумента), Объект.Ссылка));
	
	ОткрытьФорму("Справочник.ПодтверждающиеДокументы.ФормаСписка", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТехПаспортСоздание(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	// параметры формы
	ПараметрыФормы = Новый Структура("Владелец, ЗначенияЗаполнения", Объект.Ссылка, Новый Структура("ВидПодтверждающегоДокумента", ПредопределенноеЗначение("Перечисление.ВидыДокументов.ПТС")));
	
	ОткрытьФорму("Справочник.ПодтверждающиеДокументы.Форма.ФормаЭлемента", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ТехПаспортПриИзмененииНаСервере()
	ИндикацияУстаревшихПодтверждающихДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ТехПаспортПриИзменении(Элемент)
	ТехПаспортПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СРТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивВидовДокумента = Новый Массив();
	МассивВидовДокумента.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДокументов.СвидетельствоОРегистрацииТС"));
	
	// параметры формы
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидПодтверждающегоДокумента, Владелец", Новый ФиксированныйМассив(МассивВидовДокумента), Объект.Ссылка));
	
	ОткрытьФорму("Справочник.ПодтверждающиеДокументы.ФормаСписка", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура СРТСПриИзмененииНаСервере()
	ИндикацияУстаревшихПодтверждающихДокументов();
КонецПроцедуры

&НаКлиенте
Процедура СРТСПриИзменении(Элемент)
	СРТСПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦветПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ГосНомер", ГосНомер);
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаГарантииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаГарантии) И ЗначениеЗаполнено(Объект.Модель) И Объект.Модель.СрокГарантии > 0 Тогда
		Объект.ДатаОкончанияГарантии = ДобавитьМесяц(Объект.ДатаНачалаГарантии, Объект.Модель.СрокГарантии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаГарантииПриИзменении(Элемент)
	
	ДатаНачалаГарантииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	Если НЕ ЗначениеЗаполнено(Объект.ФайлКартинки) И НЕ ЗначениеЗаполнено(ТекущаяКартинка) Тогда
		ДобавитьИзображение(Неопределено);
	Иначе
		ПросмотретьИзображение(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ДобавитьИзображение(ЭтотОбъект, Объект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображения(Команда)
	
	ДвижениеПросмотра = ?(СтрНайти(Команда.Имя, "Вперед"), "Вперед", "Назад");
	
	ПолучитьСледующееИзображение(ДвижениеПросмотра);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСледующееИзображение(ДвижениеПросмотра)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ПолучитьСледующееИзображение(ЭтотОбъект, ДвижениеПросмотра);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	РаботаСФайламиАльфаАвтоКлиент.ПросмотретьИзображение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьОсновнойКартинкой(Команда)
	
	Если НЕ РаботаСФайламиАльфаАвтоКлиент.ФайлЯвляетсяДопустимойКартинкой(ТекущаяКартинка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ФайлКартинки = ТекущаяКартинка Тогда
	    Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.МоделиПрисоединенныеФайлы.ПустаяСсылка");
	Иначе	
		Объект.ФайлКартинки = ТекущаяКартинка;
	КонецЕсли;
	
	Модифицированность = Истина;
	СделатьОсновнойКартинкойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СделатьОсновнойКартинкойНаСервере()
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	Если Объект.ФайлКартинки = ТекущаяКартинка Тогда
		ВывестиСообщение(НСтр("ru = 'Картинка установлена основной. Прежде чем удалить ее необходимо снять признак ""Основная"".'"));
		Возврат;
	КонецЕсли;
	
	УдалитьИзображениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзображениеНаСервере()
	
	РаботаСФайламиАльфаАвтоВызовСервера.УдалитьИзображение(ЭтотОбъект);
	ПолучитьСледующееИзображение("Вперед");
	
КонецПроцедуры

&НаСервере
Процедура МодельДвигателяПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельДвигателяПриИзменении(Элемент=Неопределено)
	
	ПараметрыДействия = Новый Структура;
	МодельДвигателяПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КэшНаименование = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КэшНаименованиеПолное = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяинОчистка(Элемент, СтандартнаяОбработка)
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработчикВопроса = Новый ОписаниеОповещения(
		"ОбработкаРезультатаОповещенияОчиститьВладельца",
		ЭтотОбъект,
		Новый Структура);
	АвтомобилиКлиент.ПоказатьВопросОбОчисткеХозяина(Хозяин, ОбработчикВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидХозяинаПриИзменении(Элемент)
	
	ОграничитьТипХозяина(); 
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДПриИзменении(Элемент)
	КодТНВЭДПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КодТНВЭДПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если НЕ Объект.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка() Тогда
		Элементы.КодТНВЭДРасширеннаяПодсказка.Заголовок = Объект.КодТНВЭД.НаименованиеПолное;
		Объект.Прослеживаемый = Объект.КодТНВЭД.Прослеживаемый;
	Иначе
		Элементы.КодТНВЭДРасширеннаяПодсказка.Заголовок = "";
		Объект.Прослеживаемый = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОпцииАвтомобиля

&НаКлиенте
Процедура ОборудованиеАвтомобиляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекОбъект = Элемент.ТекущиеДанные.Номенклатура;
	Если ТекОбъект <> Неопределено Тогда
		ПоказатьЗначение(,ТекОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеЛица

&НаСервере
Процедура КонтактныеЛицаВыборНаСервере(КлючЗаписи)
	
	НаборКонтактныхЛиц = РегистрыСведений.КонтактныеЛица.СоздатьНаборЗаписей();
	НаборКонтактныхЛиц.Отбор.Владелец.Установить(КлючЗаписи.Владелец);
	
	НаборКонтактныхЛиц.Прочитать();
	
	Для Каждого Запись Из НаборКонтактныхЛиц Цикл
		Если (Запись.КонтактноеЛицо = КлючЗаписи.КонтактноеЛицо) Тогда
			Запись.Основной = НЕ Запись.Основной;
		Иначе
			Запись.Основной = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	НаборКонтактныхЛиц.Записать();
	
	Элементы.КонтактныеЛица.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНачинаетсяС(Поле.Имя, "КонтактныеЛицаНомерКартинки") Тогда
		СтандартнаяОбработка = Ложь;
		
		КонтактныеЛицаВыборНаСервере(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	КонтактныеЛицаКлиент.ВыбратьКонтрагента(ЭтотОбъект, Новый Структура("Владелец", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаДобавлениеОкончание(Результат, ДопПараметры) Экспорт
	
	Элементы.КонтактныеЛица.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыполнениеСервисныхКампаний
&НаКлиенте
Процедура ВыполнениеСервисныхКампанийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеПустые = Элемент.ТекущиеДанные = Неопределено;
	УстановитьДоступностьСервисныхКампанийНаСервере(ТекущиеДанныеПустые);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)

	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодборРекомендаций(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВопросЗаписиАвтомобиля");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Элемент еще не записан, загрузка не возможна. Записать элемент?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьОбработкуРекомендации(Объект.Ссылка);
	
	// передадим начальные параметры
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Автомобиль",            Объект.Ссылка);
	СтруктураПараметров.Вставить("ТипЦен",                ОбработкаПодборРекомендаций.ТипЦен);
	СтруктураПараметров.Вставить("ТипЦенАвторабот",       ОбработкаПодборРекомендаций.ТипЦенАвторабот);
	СтруктураПараметров.Вставить("Рекомендации",          ОбработкаПодборРекомендаций.Рекомендации);
	СтруктураПараметров.Вставить("ИмяДокумента",          "Справочник.Автомобили");
	
	// установим начальный отбор
	СтруктураПараметров.Вставить("РежимВыбора",                   Ложь);
	СтруктураПараметров.Вставить("ОтборАктуальный",               Истина);
	СтруктураПараметров.Вставить("ОтборВыполняется",              Истина);
	СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
	СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	СтруктураПараметров.Вставить("ОтборТекстовоеОписание",        Истина);
	
	ОткрытьФорму(
		"Обработка.ПодборРекомендаций.Форма",
		СтруктураПараметров,
		ЭтотОбъект,
		, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКорректировкуОпций(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВопросЗаписиАвтомобиля");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Элемент еще не записан, загрузка не возможна. Записать элемент?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияКорректировкиОпций", ЭтотОбъект);
	
	ОткрытьФорму("Документ.КорректировкаОпцийАвтомобиля.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка), ЭтотОбъект,,,, ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаряд(Команда)
	
	ТекущаяСтрока=Элементы.ВыполнениеСервисныхКампаний.ТекущиеДанные;
	Если ТекущаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаВыполнения) Тогда
		Возврат;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполения = Новый Структура();
	ДанныеЗаполения.Вставить("СервиснаяКампания", ТекущаяСтрока.СервиснаяКампания);
	ДанныеЗаполения.Вставить("ВидРемонта",        ПолучитьВидРемонтаСервиснойКампании(ТекущаяСтрока.СервиснаяКампания));
	ДанныеЗаполения.Вставить("Автомобиль",        Объект.Ссылка);
	
	// Параметры формы
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", ДанныеЗаполения);
	
	ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонт(Команда)
	
	ТекущаяСтрока=Элементы.ВыполнениеСервисныхКампаний.ТекущиеДанные;
	Если ТекущаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаВыполнения) Тогда
		Возврат;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполения = Новый Структура();
	ДанныеЗаполения.Вставить("СервиснаяКампания", ТекущаяСтрока.СервиснаяКампания);
	ДанныеЗаполения.Вставить("ВидРемонта",        ПолучитьВидРемонтаСервиснойКампании(ТекущаяСтрока.СервиснаяКампания));
	ДанныеЗаполения.Вставить("Автомобиль",        Объект.Ссылка);
	
	// Параметры формы
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", ДанныеЗаполения);
	
	ОткрытьФорму("Документ.ЗаявкаНаРемонт.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПТС(Команда)
	
	Обработчик = Новый ОписаниеОповещения(
		"Подключаемый_СозданиеПодтверждающегоДокументаЗавершение",
		ЭтотОбъект,
		Новый Структура("Имя,Результат", "ТехПаспорт")
	);
	
	ОткрытьФорму(
		"Справочник.ПодтверждающиеДокументы.ФормаОбъекта",
		ПолучитьПараметрыЗаполнения(),
		ЭтотОбъект,
		,
		,
		,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьПараметрыЗаполнения()
	
	ПараметрыЗаполнения = Новый Структура();
	
	ПараметрыЗаполнения.Вставить("Владелец", Объект.Ссылка); 
	
	СобственникАвтомобиля = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Ссылка,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин);	
	ПараметрыЗаполнения.Вставить("Контрагент", СобственникАвтомобиля);
	
	ДокументДоверенности = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			СобственникАвтомобиля,
			Перечисления.ВидыДокументов.Паспорт); 
	ПараметрыЗаполнения.Вставить("ДокументДоверенности", ДокументДоверенности);

	ПараметрыЗаполнения.Вставить("ВидПодтверждающегоДокумента", Перечисления.ВидыДокументов.ПТС);	
 
	Возврат ПараметрыЗаполнения; 
	
КонецФункции


&НаКлиенте
Процедура ВвестиСРТС(Команда)
	
	// параметры формы
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидПодтверждающегоДокумента", ПредопределенноеЗначение("Перечисление.ВидыДокументов.СвидетельствоОРегистрацииТС"));
	Обработчик = Новый ОписаниеОповещения(
		"Подключаемый_СозданиеПодтверждающегоДокументаЗавершение",
		ЭтотОбъект,
		Новый Структура("Имя,Результат", "СРТС")
	);
	
	ОткрытьФорму(
		"Справочник.ПодтверждающиеДокументы.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьАвтомобильИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("ЗакрытьПослеЗаписи", Истина);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьАвтомобиль(Команда)
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьТО(Команда)
	
	// параметры формы
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Автомобиль", Объект.Ссылка);
	ПараметрыФормы.Вставить("ПробегСледующегоТО", ЭтотОбъект.ПробегСледующегоТО);
	ПараметрыФормы.Вставить("ДатаСледующегоТО", ЭтотОбъект.ДатаСледующегоТО);
	ПараметрыФормы.Вставить("ПредставлениеИсточника", НСтр("ru = 'Ручное заполнение в карточке Автомобиля'"));
	
	Обработчик = Новый ОписаниеОповещения(
		"Подключаемый_ЗапланироватьТО",
		ЭтотОбъект,
		Новый Структура("Имя,РезультатОповещения", "ЗапланироватьТО")
	);
	
	ОткрытьФорму(
		"РегистрСведений.ЗапланированныеТО.ФормаЗаписи",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-warning
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти

&НаСервере
Функция ПолучитьПредопределенногоВладельца()
	Возврат Справочники.Контрагенты.НеОпределен;	
КонецФункции

&НаСервере
Процедура ЗаполнитьОбработкуРекомендации(Автомобиль)
	
	ОбработкаПодборРекомендаций.Автомобиль      = Автомобиль;
	ОбработкаПодборРекомендаций.ТипЦен          = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи");
	ОбработкаПодборРекомендаций.ТипЦенАвторабот = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенРабот");
	ОбъектПодборРекомендаций = РеквизитФормыВЗначение("ОбработкаПодборРекомендаций");
	ОбъектПодборРекомендаций.ЗаполнитьРекомендации();
	ОбработкаПодборРекомендаций.Рекомендации.Загрузить(ОбъектПодборРекомендаций.Рекомендации.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомСправочникаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
	// уточним обновлять ли модель двигателя
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяОбновитьМодельДвигателя", Ложь) Тогда
		МодельДвигателяДляОбновления = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "МодельДвигателяДляОбновления");
		
		ДопПараметры = Новый Структура("Событие", "ЗаменаМоделиДвигателя");
		ДопПараметры.Вставить("МодельДвигателяДляОбновления", МодельДвигателяДляОбновления);
		
		Вопрос = НСтр("ru = 'Модель двигателя в варианте комплектации [%1] отличается от указанной в автомоибле [%2]. Заменить?'");
		Вопрос = СтрШаблон(Вопрос, МодельДвигателяДляОбновления, Объект.МодельДвигателя);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект, ДопПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, Вопрос, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСервисныеКампании()
	Если ПустаяСтрока(Объект.VIN) Тогда
		ВыполнениеСервисныхКампаний.Очистить();
		Возврат;
	КонецЕсли;
	
	КоличествоСимволов = стрДлина(Объект.VIN);
	Шаблон = "";
	Пока КоличествоСимволов > 0 Цикл
		Шаблон = Шаблон + "_";
		
		КоличествоСимволов = КоличествоСимволов - 1;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыполнениеСервисныхКампаний.VIN,
	|	ВыполнениеСервисныхКампаний.СервиснаяКампания,
	|	ВыполнениеСервисныхКампаний.ДатаВыполнения,
	|	ВыполнениеСервисныхКампаний.ДокументВыполнения,
	|	0 КАК ТолькоПросмотр,
	|	ВыполнениеСервисныхКампаний.Автор
	|ИЗ
	|	РегистрСведений.ВыполнениеСервисныхКампаний КАК ВыполнениеСервисныхКампаний
	|ГДЕ
	|	ВыполнениеСервисныхКампаний.VIN = &VIN
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&VIN,
	|	СервисныеКампанииДиапазоныVIN.Ссылка КАК СервиснаяКампания,
	|	NULL,
	|	NULL,
	|	1,
	|	&Автор
	|ИЗ
	|	Справочник.СервисныеКампании.ДиапазоныVIN КАК СервисныеКампанииДиапазоныVIN
	|ГДЕ
	|	НЕ СервисныеКампанииДиапазоныVIN.Ссылка В
	|	(ВЫБРАТЬ
	|		ВыполнениеСервисныхКампаний.СервиснаяКампания
	|	ИЗ
	|		РегистрСведений.ВыполнениеСервисныхКампаний КАК ВыполнениеСервисныхКампаний
	|	ГДЕ
	|		ВыполнениеСервисныхКампаний.VIN = &VIN)
	|	И ВЫБОР
	|		КОГДА &VIN МЕЖДУ СервисныеКампанииДиапазоныVIN.НачальноеЗначение И СервисныеКампанииДиапазоныVIN.КонечноеЗначение
	|			И  СервисныеКампанииДиапазоныVIN.КонечноеЗначение ПОДОБНО """ + Шаблон + """
	|		ТОГДА ""Истина""
	|	КОНЕЦ <> """"");
	
	Запрос.УстановитьПараметр("VIN", Объект.VIN);
	Запрос.УстановитьПараметр("Автор", Пользователи.ТекущийПользователь());
	
	РезультатТЗ = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(РезультатТЗ, "ВыполнениеСервисныхКампаний")
КонецПроцедуры

&НаСервере
Процедура УстановитьМаскуVIN()
	
	Маска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Модель, "МаскаVIN");
	
	// сохраним текущие значения vin
	ВремVIN = Объект.VIN;
	ВремОригVIN = Объект.ОригинальныйVIN;
	
	Маска = ?(Маска = Неопределено, "", сокрЛП(Маска));
	
	Элементы.VIN.Маска = Маска;
	Элементы.ОригинальныйVIN.Маска = Маска;
	
	Если Объект.VIN <> ВремVIN Тогда
		Объект.VIN = ВремVIN;
	КонецЕсли;
	
	Если Объект.ОригинальныйVIN <> ВремОригVIN Тогда
		Объект.ОригинальныйVIN = ВремОригVIN;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияКорректировкиОпций(Результат, ДполнительныеПараметры = Неопределено) Экспорт
	
	ОпцииАвтомобиля.Параметры.УстановитьЗначениеПараметра("Автомобиль", Объект.Ссылка);
	ОпцииВариантаКомплектации.Параметры.УстановитьЗначениеПараметра("ВариантКомплектации", Объект.ВариантКомплектации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияВыбораВладельца(Результат, ЗакрытьПослеЗаписи) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Хозяин = Результат;
	
	Записать(Новый Структура("ПропуститьПроверкуВладельцаАвтомобиля,ЗакрытьПослеЗаписи", Истина,ЗакрытьПослеЗаписи));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПриИзмененииВладельцаАвтомобиля(ВыбратьВладельца, ЗакрытьПослеЗаписи) Экспорт
	
	Если ВыбратьВладельца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбратьВладельца Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОповещенияВыбораВладельца",
			ЭтотОбъект,
			ЗакрытьПослеЗаписи
		);
		
		ОткрытьФорму(
			"Справочник.Контрагенты.ФормаСписка",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	Иначе
		Записать(Новый Структура("ПропуститьПроверкуВладельцаАвтомобиля,ЗакрытьПослеЗаписи", Истина, ЗакрытьПослеЗаписи));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияОчиститьВладельца(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Хозяин = ДополнительныеПараметры.НеопределенныйВладелец;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВидРемонтаСервиснойКампании(СервиснаяКампания)
	
	Возврат СервиснаяКампания.ВидРемонта;
	
КонецФункции

&НаСервере
Функция ЗаписатьВыполненныеСервисныеКампании()
	
	Результат = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ВыполнениеСервисныхКампаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.VIN.Установить(Объект.VIN);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для Каждого Строка Из ВыполнениеСервисныхКампаний Цикл
		Результат=ЗаписатьСтрокуВыполнениеСервисныхКампаний(Строка, НаборЗаписей);
		Если Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаписатьСтрокуВыполнениеСервисныхКампаний(СтрокаВыполнениеСервисныхКампаний, НаборЗаписей)
	
	Отказ = Ложь;
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.VIN = Объект.VIN;
	НоваяЗапись.СервиснаяКампания = СтрокаВыполнениеСервисныхКампаний.СервиснаяКампания;
	НоваяЗапись.ДатаВыполнения = СтрокаВыполнениеСервисныхКампаний.ДатаВыполнения;
	НоваяЗапись.ДокументВыполнения = СтрокаВыполнениеСервисныхКампаний.ДокументВыполнения;
	Если ЗначениеЗаполнено(СтрокаВыполнениеСервисныхКампаний.Автор) Тогда
		НоваяЗапись.Автор = СтрокаВыполнениеСервисныхКампаний.Автор;
	Иначе
		НоваяЗапись.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Чтобы автоматически не устанавливался пользователь как автор
	НаборЗаписей.ДополнительныеСвойства.Вставить("НеИзменятьАвтора");
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Ошибка при записи сервисной кампании: %1'"),
			ОписаниеОшибки())
		);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат Отказ;
	
КонецФункции

&НаСервереБезКонтекста
Функция МаркаМодели(Модель)
	Возврат Модель.Марка;
КонецФункции

&НаСервере
Функция НеСтандартнаяМарка(ВыбраннаяМарка)
	Возврат НЕ ВыбраннаяМарка = Справочники.Марки.МаркаНеУказана;
КонецФункции

&НаКлиенте
Процедура СформироватьНаименованиеПоУмолчанию()
	
	ЧастиНаименования = Новый Массив();
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
	
		ЧастиНаименования.Добавить(СокрЛП(Объект.Наименование));
	
	ИначеЕсли ЗначениеЗаполнено(Объект.Модель) Тогда
	
		ЧастиНаименования.Добавить(СокрЛП(Объект.Модель));
	
	Иначе
	
		Возврат;
	
	КонецЕсли;
	
	ЧастиНаименования = СтрРазделить(ЧастиНаименования[0], " ", Ложь);
	
	ИндексВМассиве = ЧастиНаименования.Найти("vin:");
	
	Если ЗначениеЗаполнено(ИндексВМассиве) Тогда
	
		ЧастиНаименования.Удалить(ИндексВМассиве);
		ЧастиНаименования.Удалить(ИндексВМассиве);
	
	КонецЕсли;
	
	ИндексВМассиве = ЧастиНаименования.Найти("гос.");
	
	Если ЗначениеЗаполнено(ИндексВМассиве) И ЧастиНаименования[ИндексВМассиве+1] = "номер:" Тогда
		
		ЧастиНаименования.Удалить(ИндексВМассиве);
		ЧастиНаименования.Удалить(ИндексВМассиве);
		ЧастиНаименования.Удалить(ИндексВМассиве);
		
	КонецЕсли;
	
	Наименование = СтрСоединить(ЧастиНаименования, " ");
	ЧастиНаименования.Очистить();
	ЧастиНаименования.Добавить(Наименование);
	
	Если ЗначениеЗаполнено(Объект.VIN) Тогда
		
		ЧастиНаименования.Добавить(" vin: " + СокрЛП(Объект.VIN));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГосНомер) Тогда
	
		ЧастиНаименования.Добавить(" гос. номер: " + СокрЛП(ГосНомер));
		
	КонецЕсли;
	
	ПредлагаемоеНаименование = СтрСоединить(ЧастиНаименования);
	
	Элементы.Наименование.СписокВыбора.Очистить();
	Элементы.Наименование.СписокВыбора.Добавить(ПредлагаемоеНаименование);
	
	Элементы.НаименованиеПолное.СписокВыбора.Очистить();
	Элементы.НаименованиеПолное.СписокВыбора.Добавить(ПредлагаемоеНаименование);
	
КонецПроцедуры

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	ПолеОтбораПодтверждающиеДокументы = ПодтверждающиеДокументы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбораПодтверждающиеДокументы.ЛевоеЗначение  = ПодтверждающиеДокументы.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Владелец").Поле;
	ПолеОтбораПодтверждающиеДокументы.ПравоеЗначение = Объект.Ссылка;
	
	// Устанавливаем отбор по владельцу на динамический список Контактные лица
	Если ЗначениеЗаполнено(Объект.Ссылка) И КонтактныеЛица.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество()=0 Тогда
		ЭлементОтбора = КонтактныеЛица.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	
	Если Элементы.Найти("Модель") <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Объект.Марка) Тогда
			
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.Модель.ПараметрыВыбора, "Отбор.Марка", Объект.Марка);
			
		Иначе
			
			УправлениеДиалогомСервер.УдалитьПараметрВыбора(Элементы.Модель.ПараметрыВыбора, "Отбор.Марка");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомСправочникаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда  
		Элементы.ТипКузова.Видимость       = Истина;
		Элементы.ТипДвигателя.Видимость    = Истина;
		Элементы.ТипКПП.Видимость          = Истина;
		Элементы.МодельДвигателя.Видимость = Истина;
		
		Элементы.ВариантКомплектацииТипКузова.Видимость       = Ложь;
		Элементы.ВариантКомплектацииТипДвигателя.Видимость    = Ложь;
		Элементы.ВариантКомплектацииТипКПП.Видимость          = Ложь;
		Элементы.ВариантКомплектацииМодельДвигателя.Видимость = Ложь;
	Иначе
		Элементы.ТипКузова.Видимость       = Ложь;
		Элементы.ТипДвигателя.Видимость    = Ложь;
		Элементы.ТипКПП.Видимость          = Ложь;
		Элементы.МодельДвигателя.Видимость = Ложь;
		
		Элементы.ВариантКомплектацииТипКузова.Видимость       = Истина;
		Элементы.ВариантКомплектацииТипДвигателя.Видимость    = Истина;
		Элементы.ВариантКомплектацииТипКПП.Видимость          = Истина;
		Элементы.ВариантКомплектацииМодельДвигателя.Видимость = Истина;
	КонецЕсли;
	
	ДоступностьТипаДвигателя = Объект.МодельДвигателя.Пустая();
	Элементы.ТипДвигателя.Видимость    					= Не ЗначениеЗаполнено(Объект.ВариантКомплектации) И ДоступностьТипаДвигателя;
	Элементы.ВариантКомплектацииТипДвигателя.Видимость	= ЗначениеЗаполнено(Объект.ВариантКомплектации) И ДоступностьТипаДвигателя;
	Элементы.МодельДвигателяТип.Видимость 				= НЕ ДоступностьТипаДвигателя;
	
	// Если объект не записан убираем доступность для вкладок
	НовыйОбъект = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.СтраницаОпцииИОборудование.Доступность = НовыйОбъект;
	Элементы.СтраницаДоверенныеЛица.Доступность     = НовыйОбъект;
	Элементы.ТехПаспорт.Доступность                 = НовыйОбъект;
	Элементы.СРТС.Доступность                       = НовыйОбъект;
	Элементы.ВвестиПТС.Доступность                  = НовыйОбъект;
	Элементы.ВвестиСРТС.Доступность                 = НовыйОбъект;
	
	// Доступность реквизитов
	Если НЕ ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон") Тогда
		Элементы.ВключатьВПрайсЛист.Доступность = Ложь;
		Элементы.ВалютаУчета.Доступность = Ложь;
	КонецЕсли;	
	
	Элементы.ФормаПодборРекомендаций.Видимость = ПравоДоступа("Просмотр", Метаданные.Обработки.ПодборРекомендаций);
	
	Элементы.ВыполнениеСервисныхКампаний.ТолькоПросмотр = НЕ ПраваИНастройкиПользователя.Значение("РедактированиеСервисныхКампаний");
		
	Элементы.СделатьОсновнойКартинкой.Пометка = ?(Объект.ФайлКартинки = ТекущаяКартинка
		И ТекущаяКартинка <> Справочники.АвтомобилиПрисоединенныеФайлы.ПустаяСсылка(),
		Истина, Ложь);
		
	РаботаСФайламиАльфаАвто.УстановитьДоступностьКомандДляИзображений(Объект, ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если ДополнительныеПараметры = "НовыйДокумент" Тогда
		Если РезультатОповещения.ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.ПТС
			Или РезультатОповещения.ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.ЭлектронныйПТС Тогда
			ТехПаспорт = РезультатОповещения;
		ИначеЕсли РезультатОповещения.ВидПодтверждающегоДокумента = Перечисления.ВидыДокументов.СвидетельствоОРегистрацииТС Тогда
			СРТС = РезультатОповещения;
		КонецЕсли;
    	ИндикацияУстаревшихПодтверждающихДокументов();
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если ДополнительныеПараметры = "ВопросЗаписиАвтомобиля" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Попытка
				Записать();
			Исключение
				Возврат;
			КонецПопытки;
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Вопрос") = "ВопросСоответствияМарок" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.Модель = Неопределено;
			МодельПриИзменении(Неопределено);
			Объект.Марка = ДополнительныеПараметры.ВыбранноеЗначение;
			МаркаПриИзменении(Неопределено);
		КонецЕсли;
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ЗаменаМоделиДвигателя" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.МодельДвигателя = ДополнительныеПараметры.МодельДвигателяДляОбновления;
			МодельДвигателяПриИзменении();
		КонецЕсли;
	ИначеЕсли ТипЗнч(РезультатОповещения) = Тип("СправочникСсылка.Модели") Тогда
		Объект.Модель = РезультатОповещения;
		МодельПриИзменении(Неопределено);
	Иначе
		// Обработаем событие в контексте сервера
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ИндикацияУстаревшихПодтверждающихДокументов()
	
	Устаревший = Ложь;
	Если ЗначениеЗаполнено(ТехПаспорт) Тогда 
		Устаревший = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТехПаспорт, "Устаревший");
	КонецЕсли;
	Если Устаревший Тогда 
		Элементы.ТехПаспорт.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе 
		Элементы.ТехПаспорт.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;

	Устаревший = Ложь;
	Если ЗначениеЗаполнено(СРТС) Тогда 
		Устаревший = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СРТС, "Устаревший");
	КонецЕсли;
	Если Устаревший Тогда 
		Элементы.СРТС.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе 
		Элементы.СРТС.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_СозданиеПодтверждающегоДокументаЗавершение(Результат, ДопПараметры) Экспорт
	Перем ИмяРеквизита, Документ;
	
	Если
		НЕ ДопПараметры.Свойство("Имя", ИмяРеквизита)
		ИЛИ НЕ ДопПараметры.Свойство("Результат", Документ)
		ИЛИ НЕ ЗначениеЗаполнено(Документ)
		ИЛИ ЭтотОбъект[ИмяРеквизита] = Документ
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизита] = Документ;
	
	ИндикацияУстаревшихПодтверждающихДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапланироватьТО(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Имя") = "ЗапланироватьТО"
		И ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "РезультатОповещения") = Объект.Ссылка Тогда
		
		ЗапланироватьТОНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапланироватьТОНаСервере()
	
	РегистрыСведений.ЗапланированныеТО.ЧтениеЗначенияРегистраСведения(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_VINПриИзменении()
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ГосНомер", ГосНомер);
	
	VINПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГосНомерПриИзменении()
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ГосНомер", ГосНомер);
	ГосНомерПриИзмененииНаСервере(ПараметрыДействия);
		
КонецПроцедуры

&НаСервере
Процедура ОграничитьТипХозяина()
	
	Если ВидХозяина Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Иначе
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты")
	КонецЕсли;
	
	Элементы.Хозяин.ОграничениеТипа = ОписаниеТипа;
	Хозяин = ОписаниеТипа.ПривестиЗначение(Хозяин);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСервисныхКампанийНаСервере(ТекущиеДанныеПустые)
	
	Элементы.ВыполнениеСервисныхКампанийЗаказНаряд.Доступность = ?(НЕ ТекущиеДанныеПустые,
		ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаряд),
		Ложь);
	Элементы.ВыполнениеСервисныхКампанийЗаявкаНаРемонт.Доступность = ?(НЕ ТекущиеДанныеПустые,
		ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаРемонт),
		Ложь);
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьВидХозяина()
	
	Если ТипЗнч(Хозяин) = Тип("СправочникСсылка.Организации") Тогда
		ВидХозяина = Истина;		
	Иначе                   
		ВидХозяина = Ложь;
	КонецЕсли;
		
КонецПроцедуры

#Область АльфаАвтоРаботаСФайлами

&НаКлиенте
Процедура Подключаемый_РаботаСФайламиАльфаАвтоОбработкаОповещения(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура РаботаСФайламиАльфаАвтоОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	РаботаСФайламиАльфаАвтоВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, Объект);
	
	Если РезультатОповещения.Свойство("НоваяКартинкаОписания") Тогда 
		ЭтотОбъект.Модифицированность = Истина;  
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти