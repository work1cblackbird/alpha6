// Модуль менеджера плана видов характеристик "Права и настройки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет ПВХ ПраваИНастройки значениями по умолчанию из макета "НастройкиПоУмолчанию".
// Уровень настройки также берется из этого макета, поэтому там все
// элементы должны быть прописаны. Причем если тип значения является
// каким-либо перечислением также необходимо указать значение по
// умолчанию (указанием идентификатора конкретного значения)
// Для элементов-групп ПВХ в первой колонке макета имя не указывать!
// Процедура не использует окружение этого объекта (и его модуля) и может
// быть перенесена в любое место конфигурации.
//
// Без параметров
//
Процедура ВыполнитьНачальноеЗаполнение() Экспорт
	
	ЧислоОшибок     = 0;                            // Счетчик ошибок при загрузке прав и настроек.
	ВсеПеречисления = Перечисления.ТипВсеСсылки();  // Описание типов для проверки перечислений.
	ВсеСправочники  = Справочники.ТипВсеСсылки();   // Описание типов для проверки справочников.
	
	// Получим макет настроек по умолчанию.
	ИмяМакета = "НастройкиПоУмолчанию";
	Макет = ПланыВидовХарактеристик.ПраваИНастройки.ПолучитьМакет(ИмяМакета);
	
	Если Макет = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Не обнаружен макет «%1» с правами и настройками пользователя по умолчанию.
		|Права не могут быть загружены. Обратитесь к администратору базы данных.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяМакета);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// По всем строкам макета
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		
		// Считаем из макета Имя, Наименование, Код, ФлагЭтоНастройка и значение по умолчанию.
		ИмяЭлементаПВХ      = СокрЛП(Макет.Область(НомерСтроки, 1).Текст);
		СтрНаименование     = СокрЛП(Макет.Область(НомерСтроки, 2).Текст);
		СтрКод              = СокрЛП(Макет.Область(НомерСтроки, 3).Текст);
		СтрЭтоНастройка     = СокрЛП(Макет.Область(НомерСтроки, 4).Текст);
		СтрРасширениеДанных = СокрЛП(Макет.Область(НомерСтроки, 5).Текст);
		СтрПоУмолчанию      = СокрЛП(Макет.Область(НомерСтроки, 6).Текст);
		
		Если НЕ ЗначениеЗаполнено(ИмяЭлементаПВХ) Тогда
			// Это группа настроек, в инициализации не участвует, пропускаем.
			Продолжить;
		КонецЕсли;
		
		// попытаемся найти и получить ссылку на элемент ПВХ
		ЭлементПВХ = ПраваИНастройкиПользователяПовтИсп.ПолучитьПараметрыПВХПравИНастроек(ИмяЭлементаПВХ, "ПраваИНастройки").Ссылка;

		// проверим что нашли
		Если НЕ ЗначениеЗаполнено(ЭлементПВХ) Тогда
			
			ЧислоОшибок = ЧислоОшибок + 1;
			
			ТекстОшибки = НСтр("ru = 'Ошибка при загрузке прав: в строке № %1 в макете «%2» указан элемент, отсутствующий в ПВХ «Права и настройки»'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НомерСтроки, ИмяМакета);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			Продолжить;
			
		ИначеЕсли ЭлементПВХ.ЭтоГруппа Тогда
			
			// Это группа настроек, в инициализации не участвует, пропускаем.
			Продолжить;
			
		КонецЕсли;
		
		// Проведем необходимые преобразования типов полученных значений
		// Получим признак настройки.
		СтрЭтоНастройка = Булево(СтрЭтоНастройка);
		
		// Получим признак расширения данных
		СтрРасширениеДанных = ЗначениеЗаполнено(СтрРасширениеДанных) И Булево(СтрРасширениеДанных);
		
		// Проверим все ли реквизиты в ПВХ установлены как и в макете.
		ОбъектПВХПолучен = Ложь;
		ЗаписатьОбъектПВХ = Ложь;
		Если (ЭлементПВХ.ЭтоНастройка           <> СтрЭтоНастройка)
			ИЛИ (ЭлементПВХ.РасширениеДанных    <> СтрРасширениеДанных)
			ИЛИ (ЭлементПВХ.Наименование        <> СтрНаименование)
			ИЛИ (СокрЛП(ЭлементПВХ.Код)         <> СтрКод) Тогда
			
			// Переустановим значения реквизитов в ПВХ согласно значениям в макете.
			ОбъектПВХПрав = ЭлементПВХ.ПолучитьОбъект();
			
			ОбъектПВХПолучен = Истина;
			ЗаписатьОбъектПВХ = Истина;
			
			Если НЕ ПустаяСтрока(СтрКод) Тогда
				ОбъектПВХПрав.Код = СтрКод;
			КонецЕсли;
			
			ОбъектПВХПрав.Наименование        = СтрНаименование;
			ОбъектПВХПрав.ЭтоНастройка        = СтрЭтоНастройка;
			ОбъектПВХПрав.РасширениеДанных    = СтрРасширениеДанных;
			
			// При обновлении конфигурации возможна ситуация дублирования наименования с предопределенным элементом,
			// постараемся ее отработать путем поиска и переименования устаревшего элемента.
			СтарыйЭлемент = ПланыВидовХарактеристик.ПраваИНастройки.НайтиПоНаименованию(СтрНаименование, Истина);
			
			Если ЗначениеЗаполнено(СтарыйЭлемент) И (СтарыйЭлемент <> ЭлементПВХ) Тогда
				
				СтарыйОбъект = СтарыйЭлемент.ПолучитьОбъект();
				СтарыйОбъект.Наименование = "УСТАРЕЛ " + СтарыйОбъект.Наименование;
				СтарыйОбъект.ОбменДанными.Загрузка = Истина;
				СтарыйОбъект.Записать();
				
				ТекстОшибки = НСтр("ru = 'Необходима проверка настроек права «%1»'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрНаименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверим, требуется ли заполнение
		Если ЗначениеЗаполнено(ЭлементПВХ.ЗначениеПоУмолчанию) Тогда
			
			Если ЗаписатьОбъектПВХ Тогда
				
				// Записываем объект ПВХ. 
				ОбъектПВХПрав.ОбменДанными.Загрузка = Истина;
				ОбъектПВХПрав.Записать();
				
				ТекстОшибки = НСтр("ru = 'Обновлено право «%1»'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ЭлементПВХ);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// Определим значение по умолчанию
		ОписаниеТипов = ЭлементПВХ.ТипЗначения;           // Получим описание доступных типов для текущего права/настройки.
		ТипЗначения   = ОписаниеТипов.Типы().Получить(0); // Получим первый (и единственный) из типов доступных для элемента.
		
		// Сначала постараемся преобразовать к нужному типу, а особые типы (перечисления/справочники) обработаем ниже.
		ЗначениеПоУмолчанию = ОписаниеТипов.ПривестиЗначение(СтрПоУмолчанию);
		
		Если ВсеПеречисления.СодержитТип(ТипЗначения) Тогда
			
			// Если тип принадлежит к перечислениям, то попробуем найти и получить элемент перечисления.
			ОбъектМетаданных     = Метаданные.НайтиПоТипу(ТипЗначения);
			ЗначениеПеречисления = ОбъектМетаданных.ЗначенияПеречисления.Найти(СтрПоУмолчанию);
			
			// В макете некорректно заполнено имя элемента перечисления.
			Если НЕ ЗначениеЗаполнено(СтрПоУмолчанию) Тогда
				
				ЗначениеПоУмолчанию = Перечисления[ОбъектМетаданных.Имя].ПустаяСсылка();
				
			ИначеЕсли ЗначениеПеречисления = Неопределено Тогда
				
				ЗначениеПоУмолчанию = Перечисления[ОбъектМетаданных.Имя].ПустаяСсылка();
				ЧислоОшибок = ЧислоОшибок + 1;
				
				ТекстОшибки = НСтр("ru = 'Ошибка при загрузке права «%1»: в строке № %2 в макете «%3» некорректное значение по умолчанию: «%4»'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ЭлементПВХ, НомерСтроки, ИмяМакета, СтрПоУмолчанию);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Иначе
				
				ЗначениеПоУмолчанию = Перечисления[ОбъектМетаданных.Имя][ЗначениеПеречисления.Имя];
			КонецЕсли;
			
		ИначеЕсли ВсеСправочники.СодержитТип(ТипЗначения) Тогда
			
			// Если тип принадлежит к справочникам, то попробуем найти и получить значение справочника.
			ЗначениеПоУмолчанию = СокрЛП(СтрПоУмолчанию);
			
			Если СтрДлина(ЗначениеПоУмолчанию) > 0 Тогда
				
				СПР = Новый(ТипЗначения);
				
				ОбъектМетаданных    = Метаданные.НайтиПоТипу(ТипЗначения);
				МенеджерСправочника = Справочники[ОбъектМетаданных.Имя];
				ЭлементСправочника  = Неопределено;
				
				// Поиск в предопределенных элементах.
				Если ОбъектМетаданных.ПолучитьИменаПредопределенных().Найти(ЗначениеПоУмолчанию) <> Неопределено Тогда
					
					ЭлементСправочника = ПредопределенноеЗначение(ОбъектМетаданных.ПолноеИмя() + "." + СтрПоУмолчанию);
				КонецЕсли;
				
				// Попробуем найти по наименованию.
				Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
					
					ЭлементСправочника = МенеджерСправочника.НайтиПоНаименованию(ЗначениеПоУмолчанию, Истина);
				КонецЕсли;
				
				// Последняя попытка поиска (по коду).
				Если НЕ ЗначениеЗаполнено(ЭлементСправочника) И (ОбъектМетаданных.ДлинаКода > 0) Тогда
					
					Если СтрНайти(ЗначениеПоУмолчанию, "/") > 0 Тогда
						
						// Полный код.
						ЭлементСправочника = МенеджерСправочника.НайтиПоКоду(ЗначениеПоУмолчанию, Истина);
					Иначе
						
						// проверим на тип кода
						ТипКода = Тип(ОбъектМетаданных.ТипКода);
						Если ТипКода = Тип("Строка") Тогда
							
							// Если строковый, то нужно "подогнать" его длину.
							Если СтрДлина(ЗначениеПоУмолчанию) > ОбъектМетаданных.ДлинаКода Тогда
								
								ЗначениеПоУмолчанию = Прав(ЗначениеПоУмолчанию, ОбъектМетаданных.ДлинаКода);
							Иначе
								
								Пока СтрДлина(ЗначениеПоУмолчанию) < ОбъектМетаданных.ДлинаКода Цикл
									
									ЗначениеПоУмолчанию = "0" + ЗначениеПоУмолчанию;
								КонецЦикла;
							КонецЕсли;
							
						Иначе
							// Если тип - не строка, то преобразуем.
							ЗначениеПоУмолчанию = ТипКода.ПривестиЗначение(ЗначениеПоУмолчанию);
						КонецЕсли;
						
						// Теперь еще раз попробуем найти элемент.
						ЭлементСправочника = МенеджерСправочника.НайтиПоКоду(ЗначениеПоУмолчанию, Ложь);
					КонецЕсли;
				КонецЕсли;
				
				// Проверим, получилось ли найти элемент по умолчанию.
				Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
					
					ЗначениеПоУмолчанию = ЭлементПВХ.ЗначениеПоУмолчанию;
					
					ТекстОшибки = НСтр("ru = 'Ошибка при загрузке права «%1»: в строке № %2 в макете «%3» некорректное значение по умолчанию: «%4»'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ЭлементПВХ, НомерСтроки, ИмяМакета, СтрПоУмолчанию);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Иначе
					
					ЗначениеПоУмолчанию = ЭлементСправочника;
				КонецЕсли;
			Иначе
				
				// Значение по умолчанию в макете не заполнено.
				ЗначениеПоУмолчанию = ЭлементПВХ.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭлементПВХ.ЗначениеПоУмолчанию <> ЗначениеПоУмолчанию Тогда
			
			Если НЕ ОбъектПВХПолучен Тогда
				
				ОбъектПВХПрав = ЭлементПВХ.ПолучитьОбъект();
				
			КонецЕсли;
			
			ОбъектПВХПрав.ЗначениеПоУмолчанию = Неопределено;
			ОбъектПВХПрав.ЗначениеПоУмолчанию = ЗначениеПоУмолчанию;
			
			ЗаписатьОбъектПВХ = Истина;
			
		КонецЕсли;
		
		
		Если ЗаписатьОбъектПВХ Тогда
			
			// Теперь попробуем записать 
			ОбъектПВХПрав.ОбменДанными.Загрузка = Истина;
			ОбъектПВХПрав.Записать();
			
			ТекстОшибки = НСтр("ru = 'Обновлено право «%1»'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ЭлементПВХ);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);	
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ВыполнитьНачальноеЗаполнение()

// Удаляет не предопределенные (созданные программно) элементы ПВХ, вызывается из ТехнологическаяПлатформаСлужебный.
Процедура УдалитьНеПредопределенныеЭлементы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ ПланВидовХарактеристик.ПраваИНастройки ГДЕ НЕ ПометкаУдаления И НЕ Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектПВХ = Выборка.Ссылка.ПолучитьОбъект();
		Если ОбъектПВХ <> Неопределено Тогда
			
			// Обработаем гипотетическую ситуацию с множественными типами значений.
			Если ОбъектПВХ.ТипЗначения.Типы().Количество() > 1 Тогда
				
				ОбъектПВХ.ТипЗначения = Новый ОписаниеТипов("Строка");
				ОбъектПВХ.Записать();
			КонецЕсли;
			
			ОбъектПВХ.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьНеПредопределенныеЭлементы()

// Изменяет значения прав в связи со сменой типа значения
//
Процедура ОбновлениеЗначенияПравПерезаписьАвтораПерезаписьПодразделения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПраваИНастройки.ПользовательПрофиль КАК ПользовательПрофиль,
	|	ПраваИНастройки.ПравоНастройка КАК ПравоНастройка,
	|	ПраваИНастройки.Объект КАК Объект,
	|	ПраваИНастройки.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ПраваИНастройки КАК ПраваИНастройки
	|ГДЕ
	|	ПраваИНастройки.ПравоНастройка В (&ПравоНастройка)
	|	И ТИПЗНАЧЕНИЯ(ПраваИНастройки.Значение) = Тип(Перечисление.ВариантыОтветов)";
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.ВариантыОтветов);
	МассивПрав = Новый Массив;
	МассивПрав.Добавить(ПланыВидовХарактеристик.ПраваИНастройки.ПерезаписьАвтора);
	МассивПрав.Добавить(ПланыВидовХарактеристик.ПраваИНастройки.ПерезаписьПодразделения);
	
	Запрос.УстановитьПараметр("ТипЗначения",    МассивТипов);
	Запрос.УстановитьПараметр("ПравоНастройка", МассивПрав);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекЗапись = РегистрыСведений.ПраваИНастройки.СоздатьМенеджерЗаписи();
			
			ТекЗапись.ПользовательПрофиль = Выборка.ПользовательПрофиль;
			ТекЗапись.ПравоНастройка      = Выборка.ПравоНастройка;
			ТекЗапись.Объект              = Выборка.Объект;
			ТекЗапись.Прочитать();
			
			Если Выборка.Значение = Перечисления.ВариантыОтветов.Да
				ИЛИ Выборка.Значение = Перечисления.ВариантыОтветов.Спрашивать Тогда
				ТекЗапись.Значение = Истина;
			Иначе
				ТекЗапись.Значение = Ложь;
			КонецЕсли;
			
			Попытка
				ТекЗапись.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка изменения значения права'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					ТекЗапись.ПравоНастройка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ПланыВидовХарактеристик.ПраваИНастройки.ПерезаписьАвтора.ЗначениеПоУмолчанию) <> Тип("Булево") Тогда
		ПерезаписьАвтораОбъект = ПланыВидовХарактеристик.ПраваИНастройки.ПерезаписьАвтора.ПолучитьОбъект();
		ПерезаписьАвтораОбъект.ТипЗначения = Новый ОписаниеТипов("Булево");
		ПерезаписьАвтораОбъект.ЗначениеПоУмолчанию = Ложь;
		Попытка
			ПерезаписьАвтораОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка записи права'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ПерезаписьАвтораОбъект.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ПланыВидовХарактеристик.ПраваИНастройки.ПерезаписьПодразделения.ЗначениеПоУмолчанию) <> Тип("Булево") Тогда
		ПерезаписьПодразделенияОбъект = ПланыВидовХарактеристик.ПраваИНастройки.ПерезаписьПодразделения.ПолучитьОбъект();
		ПерезаписьПодразделенияОбъект.ТипЗначения = Новый ОписаниеТипов("Булево");
		ПерезаписьПодразделенияОбъект.ЗначениеПоУмолчанию = Ложь;
		Попытка
			ПерезаписьПодразделенияОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка записи права'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ПерезаписьПодразделенияОбъект.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Изменяет значения права РазрешитьРедактированиеНомеровДокументов в связи со сменой типа значения.
//
Процедура ОбновлениеЗначенияПраваРазрешитьРедактированиеНомеровДокументов() Экспорт
	
	ИзменяемоеПраво = ПланыВидовХарактеристик.ПраваИНастройки.РазрешитьРедактированиеНомеровДокументов;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПраваИНастройки.ПользовательПрофиль КАК ПользовательПрофиль,
	|	ПраваИНастройки.ПравоНастройка КАК ПравоНастройка,
	|	ПраваИНастройки.Объект КАК Объект,
	|	ПраваИНастройки.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ПраваИНастройки КАК ПраваИНастройки
	|ГДЕ
	|	ПраваИНастройки.ПравоНастройка =&ПравоНастройка
	|	И ТИПЗНАЧЕНИЯ(ПраваИНастройки.Значение) = Тип(Перечисление.ВариантыОтветов)";
	
	Запрос.УстановитьПараметр("ПравоНастройка", ИзменяемоеПраво);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекЗапись = РегистрыСведений.ПраваИНастройки.СоздатьМенеджерЗаписи();
			
			ТекЗапись.ПользовательПрофиль = Выборка.ПользовательПрофиль;
			ТекЗапись.ПравоНастройка      = Выборка.ПравоНастройка;
			ТекЗапись.Объект              = Выборка.Объект;
			ТекЗапись.Прочитать();
			
			Если Выборка.Значение = Перечисления.ВариантыОтветов.Да
				ИЛИ Выборка.Значение = Перечисления.ВариантыОтветов.Спрашивать Тогда
				ТекЗапись.Значение = Истина;
			Иначе
				ТекЗапись.Значение = Ложь;
			КонецЕсли;
			
			Попытка
				ТекЗапись.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка изменения значения права'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					ТекЗапись.ПравоНастройка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ИзменяемоеПраво.ЗначениеПоУмолчанию) <> Тип("Булево") Тогда
		ПравоОбъект = ПланыВидовХарактеристик.ПраваИНастройки.РазрешитьРедактированиеНомеровДокументов.ПолучитьОбъект();
		ПравоОбъект.ТипЗначения = Новый ОписаниеТипов("Булево");
		ПравоОбъект.ЗначениеПоУмолчанию = Ложь;
		Попытка
			ПравоОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка записи права'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ПравоОбъект.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

//Удаляет не предопределенный элемент ПВХ УдалитьУРВ_ДобавлятьРаботыВПакетПриДобавлении
//
Процедура УдалениеПраваРежимРазделенияРаботПоПакетам() Экспорт 
	
	УдаляемоеПраво = ПланыВидовХарактеристик.ПраваИНастройки.НайтиПоКоду("99903"); 	
	Если Не УдаляемоеПраво.Пустая() И  Не УдаляемоеПраво.Предопределенный Тогда
		УдалитьПравоИЗаписи(УдаляемоеПраво);
	КонецЕсли;

КонецПроцедуры

//Удаляет не  предопределенный элемент ПВХ УдалитьУРВ_ДобавлятьРаботыВПакетПриДобавлении 
//
Процедура УдалениеПраваУРВРаботатьВРежимеРабочегоСтола() Экспорт 
	
	УдаляемоеПраво = ПланыВидовХарактеристик.ПраваИНастройки.НайтиПоКоду("99913");
	Если Не УдаляемоеПраво.Пустая() И Не УдаляемоеПраво.Предопределенный Тогда 
		УдалитьПравоИЗаписи(УдаляемоеПраво);	
	КонецЕсли;		
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Наименование");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

//удаление не предопределенного элемент ПВХ
//
Процедура УдалитьПравоИЗаписи(УдаляемоеПраво)

	НачатьТранзакцию();	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваИНастройки.ПользовательПрофиль КАК ПользовательПрофиль,
		|	ПраваИНастройки.ПравоНастройка КАК ПравоНастройка,
		|	ПраваИНастройки.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.ПраваИНастройки КАК ПраваИНастройки
		|ГДЕ
		|	ПраваИНастройки.ПравоНастройка = &УдаляемоеПраво";
	
	Запрос.УстановитьПараметр("УдаляемоеПраво", УдаляемоеПраво); 
	Выборка = Запрос.Выполнить().Выбрать();
	ЗаписиРегистраУдалены = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерУдаляемойЗаписи = РегистрыСведений.ПраваИНастройки.СоздатьМенеджерЗаписи();
		
		МенеджерУдаляемойЗаписи.ПользовательПрофиль = Выборка.ПользовательПрофиль; 
		МенеджерУдаляемойЗаписи.ПравоНастройка = УдаляемоеПраво;
		МенеджерУдаляемойЗаписи.Объект = Выборка.Объект;		
		МенеджерУдаляемойЗаписи.Прочитать();
		
		Если МенеджерУдаляемойЗаписи.Выбран() Тогда
			
			Попытка
				МенеджерУдаляемойЗаписи.Удалить();
			Исключение 
				ОтменитьТранзакцию();
				ЗаписиРегистраУдалены = Ложь;
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка при удалении записи регистра сведений ""Права и настройки""'",
						ОбщегоНазначения.КодОсновногоЯзыка()
					),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;  
	Если ЗаписиРегистраУдалены Тогда 
		
		Попытка
			
			УдаляемоеПраво.ПолучитьОбъект().Удалить(); 
			ЗафиксироватьТранзакцию(); 
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка удаления значения ПВХ ""Права и настройки""'",
					ОбщегоНазначения.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;		 	
	КонецЕсли;		
КонецПроцедуры
#КонецОбласти

#КонецЕсли