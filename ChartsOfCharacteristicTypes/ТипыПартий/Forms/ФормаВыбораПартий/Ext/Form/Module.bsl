///////////////////////////////////////////////////////////////////////////////
// Модуль формы выбора партий "Типы партий"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	ОбновитьПараметры(Параметры);
	ТекстЗапроса = ТекстЗапросаПоХозОперации(Параметры.Свойство("Подбор"));  
	ЗаполнитьДеревоДанных();                                                
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Производитель".
//
// Параметры:
//  Элемент              - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока                  - Значение выбранной строки. 
//  Поле                 - ПолеФормы - Активное поле.
//  СтандартнаяОбработка - Булево    - В данный параметр передается признак выполнения стандартной (системной) обработки
//                                     события.
//
&НаКлиенте
Процедура ДеревоДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РежимВыбораПартий Тогда
		
		СтандартнаяОбработка = ЛОЖЬ;
		ТекущиеДанные = Элементы.ДеревоДанных.ТекущиеДанные;
		Если ТекущиеДанные.ПолучитьРодителя()=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
			Возврат;
		КонецЕсли;
		ОповеститьОВыборе(ТекущиеДанные.Объект);
		
	Иначе
		
		// откроем форму товара или документа
		Если Поле = Элементы.ДеревоДанныхКоличество Тогда
			Возврат;
		Иначе
			СтандартнаяОбработка = ЛОЖЬ;
			ТекущиеДанные = Элементы.ДеревоДанных.ТекущиеДанные;
			ПоказатьЗначение(,ТекущиеДанные.Объект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ДеревоДанныхВыбор()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Количество".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДеревоДанныхКоличествоПриИзменении(Элемент)
	
	ТекСтрока=Элементы.ДеревоДанных.ТекущиеДанные;
	Если ТекСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если изменили количество на строке родителя, то распределим его по потомкам, иначе просуммируем родителя.
	Если ТекСтрока.ПолучитьРодителя()=Неопределено Тогда
		
		// родительская строка
		ВведенноеКоличество=ТекСтрока.Количество;
		Для Каждого ПодчиненнаяСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
			ПодчиненнаяСтрока.Количество=?(ВведенноеКоличество<=0,0,Мин(ПодчиненнаяСтрока.Оборот,ВведенноеКоличество));
			ВведенноеКоличество=ВведенноеКоличество-ПодчиненнаяСтрока.Количество;
		КонецЦикла;
		
	Иначе
		
		// подчиненная строка
		ТекСтрока=ТекСтрока.ПолучитьРодителя();
		ТекСтрока.Количество=0;
		Для Каждого ПодчиненнаяСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
			ТекСтрока.Количество=ТекСтрока.Количество+ПодчиненнаяСтрока.Количество;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры //ДеревоДанныхКоличествоПриИзменении()

&НаКлиенте
Процедура ОтборПоДокументуПриИзменении(Элемент)

	ЗаполнитьДеревоДанных();
	Если НЕ ЗначениеЗаполнено(ОтборПоДокументу) Тогда 
		СвернутьДерево();
	Иначе 
		РазвернутьДерево(); 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКонтрагентуПриИзменении(Элемент)
	
	ЗаполнитьДеревоДанных(); 
	Если НЕ ЗначениеЗаполнено(ОтборПоКонтрагенту) Тогда 
		СвернутьДерево();
	Иначе 
		РазвернутьДерево(); 	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события возникающего на клиенте при выполнении команды "Обновить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	Если Модифицированность Тогда
		
		// Заполним дерево значений
		ДатаНачала = Период.ДатаНачала;
		ДатаКонца = Период.ДатаОкончания;
		ЗаполнитьДеревоДанных();
		
	КонецЕсли;
	
КонецПроцедуры //Обновить()

// Обработчик события возникающего на сервере при выполнении команды "Применить".
//
&НаСервере
Функция ПрименитьНаСервере()
	
	СтруктураВозврата = Новый Структура();

	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ДокументПродажи");
	ТаблицаТоваров.Колонки.Добавить("Партия");
	
	Для Каждого СтрокаДерева Из ДеревоДанных.ПолучитьЭлементы() Цикл
			Номенклатура = СтрокаДерева.Объект;
			ХарактеристикаНоменклатуры = СтрокаДерева.ХарактеристикаНоменклатуры;
			Для Каждого СтрокаТЧ Из СтрокаДерева.ПолучитьЭлементы() Цикл
				НоваяСтрока = ТаблицаТоваров.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				НоваяСтрока.Количество = СтрокаТЧ.Количество;
				НоваяСтрока.Партия = СтрокаТЧ.Объект;
				НоваяСтрока.ДокументПродажи = СтрокаТЧ.Объект;
			КонецЦикла;
		КонецЦикла;
	АдресПодобраннойНоменклатурыВХранилище = ПоместитьВоВременноеХранилище(ТаблицаТоваров, УникальныйИдентификатор);

	СтруктураВозврата.Вставить("АдресПодобраннойНоменклатурыВХранилище", АдресПодобраннойНоменклатурыВХранилище);

	Возврат СтруктураВозврата;
	
КонецФункции //ПрименитьНаСервере()

// Обработчик события возникающего на клиенте при выполнении команды "Применить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Применить(Команда)
	
	// закрываем форму
	Если РежимВыбораПартий Тогда
		ТекущиеДанные = Элементы.ДеревоДанных.ТекущиеДанные;
		Если (ТекущиеДанные = Неопределено) ИЛИ (ТекущиеДанные.ПолучитьРодителя()=Неопределено) ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
			Возврат;
		КонецЕсли;
		ОповеститьОВыборе(ТекущиеДанные.Объект);
	Иначе
		Закрыть(ПрименитьНаСервере());
	КонецЕсли;
	
КонецПроцедуры //Применить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РазвернутьДерево()	
	
	СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из СтрокиДерева Цикл
		Элементы.ДеревоДанных.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево()	
	
	СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из СтрокиДерева Цикл
		Элементы.ДеревоДанных.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла; 
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьПараметры(Источник)
	
	// Настроим форму в соответствии с переданными параметрами
	Если Источник.Свойство("РежимВыбора") Тогда
		
		Элементы.ДеревоДанныхКоличество.Видимость = Не Источник.РежимВыбора;
		РежимВыбораПартий = Источник.РежимВыбора;
		
	КонецЕсли;
	
	Если Источник.Свойство("ХозОперация") Тогда
		
		Если РежимВыбораПартий Тогда
			
			Заголовок= НСтр("ru = 'Подбор партий'") + " - "+СокрЛП(Источник.ХозОперация);
			
		Иначе
			
			Заголовок= НСтр("ru = 'Подбор номенклатуры'") + " - "+СокрЛП(Источник.ХозОперация);
			
		КонецЕсли;
		
		ХозОперация = Источник.ХозОперация;
		
	КонецЕсли;
	
	Если Источник.Свойство("Сделка") Тогда
		
		ДокументПродажи = Источник.Сделка;
		
	КонецЕсли;
	
	Если Источник.Свойство("ВалютаДокумента") Тогда
		
		ВалютаДокумента = Источник.ВалютаДокумента;
		
	КонецЕсли;
	
	Если Источник.Свойство("КурсДокумента") Тогда
		
		КурсДокумента = Источник.КурсДокумента;
		
	КонецЕсли;
	
	Если Источник.Свойство("ДокументОснование") И ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
		
		Регистратор = Источник.ДокументОснование;
		ДатаНачала = Источник.ДокументОснование.Дата;
		ДатаКонца = Источник.ДокументОснование.Дата;
		Период.ДатаНачала = ДатаНачала;
		Период.ДатаОкончания = ДатаКонца;
		
	КонецЕсли;
	
	Если Источник.Свойство("ВозвратНам") Тогда
		
		ВозвратНам = Источник.ВозвратНам;
		
	КонецЕсли;
	
	Если Источник.Свойство("ДатаДокумента") Тогда
		
		ДатаДокумента = Источник.ДатаДокумента;
		
	КонецЕсли;
	
	Если Источник.Свойство("Номенклатура") Тогда
		
		Номенклатура = Источник.Номенклатура;
		
	КонецЕсли;
	
	Если Источник.Свойство("ХарактеристикаНоменклатуры") Тогда
		
		ХарактеристикаНоменклатуры = Источник.ХарактеристикаНоменклатуры;
		
	КонецЕсли;
	
	Если Источник.Свойство("СкладКомпании") Тогда
		
		СкладКомпании = Источник.СкладКомпании;
		
	КонецЕсли;
	
	Если Источник.Свойство("Документ") Тогда
		
		Документ = Источник.Документ;
		
	КонецЕсли;
	
	Если Источник.Свойство("ДоговорВзаиморасчетов") Тогда
		
		ДоговорВзаиморасчетов = Источник.ДоговорВзаиморасчетов;
		
	КонецЕсли;
	
	Если Источник.Свойство("СписокТоваров") Тогда
		
		Для Каждого Строка Из Источник.СписокТоваров Цикл
			
			НоваяСтрока = ТоварыДокументаВозврата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Источник.Свойство("Контрагент") Тогда
		
		Контрагент = Источник.Контрагент;
		
	КонецЕсли;
	
	Если Источник.Свойство("СтатусПартии") Тогда
		
		СтатусПартии = Источник.СтатусПартии;
		
	КонецЕсли;
	
	Если Источник.Свойство("ДатаНачала") Тогда
		
		Период.ДатаНачала = Источник.ДатаНачала;
		
	КонецЕсли;
	
	Если Источник.Свойство("ДатаКонца") Тогда
		
		Период.ДатаОкончания = Источник.ДатаКонца;
		
	КонецЕсли;
	
	Если Источник.Свойство("Цех") Тогда
		
		Цех = Источник.Цех;
		
	КонецЕсли;
	
	Если Источник.Свойство("ЗаказНаряд") Тогда
		
		ЗаказНаряд = Источник.ЗаказНаряд;
		
	КонецЕсли;
	
	Если Источник.Свойство("ЗаполнитьОстатками") Тогда
		
		ЗаполнитьОстатками = Источник.ЗаполнитьОстатками;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаПоХозОперации(ЕстьПодбор)
	
	Если
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия")
		Или ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровПоставщику")
	Тогда
		
		Возврат ТекстЗапросаВозвратТоваровПоставщику();
		
	ИначеЕсли ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровОтПокупателяКомиссия") Тогда
		
		Возврат ТекстЗапросаВозвратТоваровОтПокупателяКомиссия();
		
	ИначеЕсли ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровОтПокупателя") И ЕстьПодбор Тогда
		
		Возврат ТекстЗапросаВозвратТоваровОтПокупателяСПодбором()
		
	ИначеЕсли ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровОтПокупателя") Тогда
		
		Возврат ТекстЗапросаВозвратТоваровОтПокупателя();
		
	ИначеЕсли ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ИзвлечениеТоваровИзПроизводства")
		ИЛИ ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ПеремещениеНезавершенногоПроизводства") Тогда
		
		Возврат ТекстЗапросаПеремещениеНезавершенногоПроизводства();
		
	ИначеЕсли ХозОперация =
			ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах")
		ИЛИ ХозОперация =
			ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон") Тогда
		
		Возврат ТекстЗапросаКорректировкиРеализации();
		
	Иначе
		
		ДопУсловие = "";
		Если ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ТаможеннаяДекларацияИмпорт") Тогда
			ДопУсловие = " И ПартииТоваровКомпанииОстатки.Партия ССЫЛКА Документ.ПоступлениеТоваров";
		КонецЕсли;
		
		Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		        |	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		        |	ПартииТоваровКомпанииОстатки.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
		        |	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		        |	ПартииТоваровКомпанииОстатки.Партия КАК Документ,
		        |	ПартииТоваровКомпанииОстатки.Партия.Контрагент КАК Контрагент,
		        |	СУММА(0) КАК Оборот,
		        |	СУММА(ПартииТоваровКомпанииОстатки.КоличествоОстаток) КАК Остаток,
		        |	СУММА(ПартииТоваровКомпанииОстатки.СуммаУпрОстаток) КАК СуммаУпр
		        |ИЗ
		        |	РегистрНакопления.ПартииТоваровКомпании.Остатки(&ДатаКонца, {(СкладКомпании) КАК СкладКомпании, (Номенклатура) КАК Номенклатура, (ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры}) КАК ПартииТоваровКомпанииОстатки
		        |ГДЕ
		        |	НЕ ПартииТоваровКомпанииОстатки.Партия ЕСТЬ NULL" + ДопУсловие + "
		        |{ГДЕ
		        |	ПартииТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании,
		        |	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура}
		        |
		        |СГРУППИРОВАТЬ ПО
		        |	ПартииТоваровКомпанииОстатки.Номенклатура,
		        |	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		        |	ПартииТоваровКомпанииОстатки.Партия,
		        |	ПартииТоваровКомпанииОстатки.Номенклатура.БазоваяЕдиницаИзмерения,
		        |	ПартииТоваровКомпанииОстатки.Партия.Контрагент
		        |
		        |ИМЕЮЩИЕ
		        |	СУММА(ПартииТоваровКомпанииОстатки.КоличествоОстаток) <> 0
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Номенклатура,
		        |	ХарактеристикаНоменклатуры,
		        |	Документ УБЫВ";
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаВозвратТоваровПоставщику()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	        |	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	        |	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	        |	ПартииТоваровКомпании.Партия КАК Документ,
	        |	ПартииТоваровКомпании.Партия.Контрагент КАК Контрагент,
	        |	ПартииТоваровКомпании.КоличествоПриход КАК Оборот,
	        |	ПартииТоваровКомпанииОстатки.КоличествоОстаток КАК Остаток,
	        |	ПартииТоваровКомпанииОстатки.СуммаУпрОстаток КАК СуммаУпр
	        |ИЗ
	        |	РегистрНакопления.ПартииТоваровКомпании.Обороты(&ДатаНачала, , , {(Номенклатура).* КАК Номенклатура, (ХарактеристикаНоменклатуры).* КАК ХарактеристикаНоменклатуры, (Партия).* КАК Документ, (Партия.Контрагент).* КАК Поставщик, (Партия.ДоговорВзаиморасчетов).* КАК ДоговорВзаиморасчетов, (СтатусПартии).* КАК СтатусПартии, (СкладКомпании).* КАК СкладКомпании}) КАК ПартииТоваровКомпании
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании.Остатки(&ДатаКонца, {(Номенклатура).* КАК Номенклатура, (ХарактеристикаНоменклатуры).* КАК ХарактеристикаНоменклатуры, (Партия).* КАК Документ, (Партия.Контрагент).* КАК Поставщик, (Партия.ДоговорВзаиморасчетов).* КАК ДоговорВзаиморасчетов, (СтатусПартии).* КАК СтатусПартии, (СкладКомпании).* КАК СкладКомпании}) КАК ПартииТоваровКомпанииОстатки
	        |		ПО ПартииТоваровКомпании.Номенклатура = ПартииТоваровКомпанииОстатки.Номенклатура
	        |			И ПартииТоваровКомпании.ХарактеристикаНоменклатуры = ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
	        |			И ПартииТоваровКомпании.Партия = ПартииТоваровКомпанииОстатки.Партия
	        |			И (ПартииТоваровКомпании.КоличествоПриход <> 0)
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Номенклатура,
	        |	ХарактеристикаНоменклатуры,
	        |	Документ УБЫВ";
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаВозвратТоваровОтПокупателяКомиссия()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ПартииТоваровОтданныеОстаткиИОбороты.Номенклатура КАК Номенклатура,
	        |	ПартииТоваровОтданныеОстаткиИОбороты.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	        |	ПартииТоваровОтданныеОстаткиИОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	        |	ПартииТоваровОтданныеОстаткиИОбороты.ДокументПередачи КАК Документ,
	        |	ПартииТоваровОтданныеОстаткиИОбороты.ДокументПередачи.Контрагент КАК Контрагент,
	        |	СУММА(ПартииТоваровОтданныеОстаткиИОбороты.КоличествоПриход) КАК Оборот,
	        |	СУММА(ПартииТоваровОтданныеОстаткиИОбороты.СуммаУпрПриход) КАК СуммаУпр,
	        |	СУММА(ПартииТоваровОтданныеОстаткиИОбороты.КоличествоКонечныйОстаток) КАК Остаток
	        |ИЗ
	        |	РегистрНакопления.ПартииТоваровОтданные.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, , , {(Контрагент) КАК Покупатель, (ДоговорВзаиморасчетов) КАК ДоговорВзаиморасчетов}) КАК ПартииТоваровОтданныеОстаткиИОбороты
	        |ГДЕ
	        |	ТИПЗНАЧЕНИЯ(ПартииТоваровОтданныеОстаткиИОбороты.ДокументПередачи) В (ТИП(Документ.РеализацияТоваров), ТИП(Документ.ВводОстатковТоваров), ТИП(Документ.Инвентаризация))
	        |{ГДЕ
	        |	ПартииТоваровОтданныеОстаткиИОбороты.Контрагент КАК Покупатель,
	        |	ПартииТоваровОтданныеОстаткиИОбороты.Регистратор КАК Документ,
	        |	ПартииТоваровОтданныеОстаткиИОбороты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов}
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ПартииТоваровОтданныеОстаткиИОбороты.Номенклатура,
	        |	ПартииТоваровОтданныеОстаткиИОбороты.ХарактеристикаНоменклатуры,
	        |	ПартииТоваровОтданныеОстаткиИОбороты.ДокументПередачи,
	        |	ПартииТоваровОтданныеОстаткиИОбороты.Номенклатура.БазоваяЕдиницаИзмерения,
	        |	ПартииТоваровОтданныеОстаткиИОбороты.ДокументПередачи.Контрагент
	        |
	        |ИМЕЮЩИЕ
	        |	(СУММА(ПартииТоваровОтданныеОстаткиИОбороты.КоличествоПриход) > 0
	        |		ИЛИ СУММА(ПартииТоваровОтданныеОстаткиИОбороты.КоличествоКонечныйОстаток) > 0)
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Номенклатура,
	        |	ХарактеристикаНоменклатуры,
	        |	Документ УБЫВ";
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаВозвратТоваровОтПокупателяСПодбором()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ПродажиОбороты.Номенклатура КАК Номенклатура,
	        |	ПродажиОбороты.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	        |	ПродажиОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	        |	ПродажиОбороты.Покупатель КАК Контрагент,
	        |	ПродажиОбороты.ДокументПродажи КАК Документ,
	        |	СУММА(ПродажиОбороты.КоличествоОборот) КАК Оборот,
	        |	СУММА(ПродажиОбороты.СебестоимостьУпрОборот) КАК СуммаУпр,
	        |	СУММА(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток) КАК Остаток
	        |ИЗ
	        |	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, , {(Покупатель) КАК Покупатель, (СкладКомпании) КАК СкладКомпании}) КАК ПродажиОбороты
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, {(СкладКомпании) КАК СкладКомпании}) КАК ОстаткиТоваровКомпанииОстатки
	        |		ПО ПродажиОбороты.Номенклатура = ОстаткиТоваровКомпанииОстатки.Номенклатура
	        |			И ПродажиОбороты.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
	        |ГДЕ
	        |	ТИПЗНАЧЕНИЯ(ПродажиОбороты.ДокументПродажи) В (ТИП(Документ.РеализацияТоваров), ТИП(Документ.ЗакрытиеСмены))
	        |	И НЕ ПродажиОбороты.ДокументПродажи = ЗНАЧЕНИЕ(Документ.РеализацияТоваров.ПустаяСсылка)
	        |	И НЕ ПродажиОбороты.ДокументПродажи = ЗНАЧЕНИЕ(Документ.ЗакрытиеСмены.ПустаяСсылка)
	        |{ГДЕ
	        |	ПродажиОбороты.Покупатель КАК Покупатель,
	        |	ПродажиОбороты.ДокументПродажи КАК Документ,
	        |	ПродажиОбороты.СкладКомпании КАК СкладКомпании}
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ПродажиОбороты.Номенклатура,
	        |	ПродажиОбороты.ХарактеристикаНоменклатуры,
	        |	ПродажиОбороты.ДокументПродажи,
	        |	ПродажиОбороты.Покупатель,
	        |	ПродажиОбороты.Номенклатура.БазоваяЕдиницаИзмерения
	        |
	        |ИМЕЮЩИЕ
	        |	СУММА(ПродажиОбороты.КоличествоОборот) > 0
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Номенклатура,
	        |	ХарактеристикаНоменклатуры,
	        |	Документ УБЫВ";
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаВозвратТоваровОтПокупателя()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	        |	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	        |	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	        |	ПартииТоваровКомпании.Партия КАК Документ,
	        |	ПартииТоваровКомпании.Партия.Контрагент КАК Контрагент,
	        |	СУММА(ПартииТоваровКомпании.Количество) КАК Оборот,
	        |	СУММА(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток) КАК Остаток,
	        |	СУММА(ПартииТоваровКомпании.СуммаУпр) КАК СуммаУпр
	        |ИЗ
	        |	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, {(СкладКомпании) КАК СкладКомпании, (Номенклатура) КАК Номенклатура, (ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры}) КАК ОстаткиТоваровКомпанииОстатки
	        |		ПО ПартииТоваровКомпании.Номенклатура = ОстаткиТоваровКомпанииОстатки.Номенклатура
	        |			И ПартииТоваровКомпании.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
	        |ГДЕ
	        |	ПартииТоваровКомпании.Регистратор = &Регистратор
	        |	И ПартииТоваровКомпании.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	        |{ГДЕ
	        |	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	        |	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	        |	ПартииТоваровКомпании.СкладКомпании КАК СкладКомпании}
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ПартииТоваровКомпании.Номенклатура,
	        |	ПартииТоваровКомпании.ХарактеристикаНоменклатуры,
	        |	ПартииТоваровКомпании.Партия,
	        |	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения,
	        |	ПартииТоваровКомпании.Партия.Контрагент
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Номенклатура,
	        |	ХарактеристикаНоменклатуры,
	        |	Документ УБЫВ";
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаПеремещениеНезавершенногоПроизводства()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	        |	ТоварыВПроизводствеОстатки.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	        |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	        |	ТоварыВПроизводствеОстатки.Партия КАК Документ,
	        |	ТоварыВПроизводствеОстатки.Партия.Контрагент КАК Контрагент,
	        |	СУММА(0) КАК Оборот,
	        |	СУММА(ТоварыВПроизводствеОстатки.КоличествоОстаток) КАК Остаток,
	        |	СУММА(ТоварыВПроизводствеОстатки.СуммаУпрОстаток) КАК СуммаУпр
	        |ИЗ
	        |	РегистрНакопления.ТоварыВПроизводстве.Остатки(&ДатаКонца, {(ЗаказНаряд) КАК ЗаказНаряд, (Цех) КАК Цех, (Номенклатура) КАК Номенклатура}) КАК ТоварыВПроизводствеОстатки
	        |ГДЕ
	        |	НЕ ТоварыВПроизводствеОстатки.Партия ЕСТЬ NULL
	        |{ГДЕ
	        |	ТоварыВПроизводствеОстатки.Цех КАК Цех,
	        |	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура}
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ТоварыВПроизводствеОстатки.Номенклатура,
	        |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры,
	        |	ТоварыВПроизводствеОстатки.Партия,
	        |	ТоварыВПроизводствеОстатки.Номенклатура.БазоваяЕдиницаИзмерения,
	        |	ТоварыВПроизводствеОстатки.Партия.Контрагент
	        |
	        |ИМЕЮЩИЕ
	        |	СУММА(ТоварыВПроизводствеОстатки.КоличествоОстаток) <> 0
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Номенклатура,
	        |	ХарактеристикаНоменклатуры,
	        |	Документ УБЫВ";
	
КонецФункции

&НаСервере
Функция ТекстЗапросаКорректировкиРеализации()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	Продажи.Номенклатура КАК Номенклатура,
	        |	Продажи.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	        |	Продажи.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	        |	Продажи.Партия КАК Документ,
	        |	Продажи.Партия.Контрагент КАК Контрагент,
	        |	0 КАК Оборот,
	        |	Продажи.Количество КАК Остаток,
	        |	Продажи.СебестоимостьУпр КАК СуммаУпр
	        |ПОМЕСТИТЬ ДанныеПартийТоваров
	        |{ВЫБРАТЬ
	        |	Продажи.Номенклатура КАК Номенклатура,
	        |	Продажи.СкладКомпании КАК СкладКомпании,
	        |	Продажи.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры}
	        |ИЗ
	        |	РегистрНакопления.Продажи КАК Продажи
	        |ГДЕ
	        |	Продажи.ДокументПродажи = &ДокументПродажи
	        |	И Продажи.Авторабота = ЗНАЧЕНИЕ(Справочник.Автоработы.ПустаяСсылка)
	        |	И Продажи.Период <= &ДатаКонца
	        |{ГДЕ
	        |	(&СкладКомпании) КАК СкладКомпании,
	        |	Продажи.Номенклатура КАК Номенклатура}
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ПартииТоваровКомпанииОстатки.Номенклатура,
	        |	ПартииТоваровКомпанииОстатки.Номенклатура.БазоваяЕдиницаИзмерения,
	        |	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
	        |	ПартииТоваровКомпанииОстатки.Партия,
	        |	ПартииТоваровКомпанииОстатки.Партия.Контрагент,
	        |	0,
	        |	ПартииТоваровКомпанииОстатки.КоличествоОстаток,
	        |	ПартииТоваровКомпанииОстатки.СуммаУпрОстаток
	        |ИЗ
	        |	РегистрНакопления.ПартииТоваровКомпании.Остатки(&ДатаКонца, {(СкладКомпании) КАК СкладКомпании, (Номенклатура) КАК Номенклатура, (ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры}) КАК ПартииТоваровКомпанииОстатки
	        |ГДЕ
	        |	НЕ ПартииТоваровКомпанииОстатки.Партия ЕСТЬ NULL
	        |{ГДЕ
	        |	ПартииТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании,
	        |	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура}
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ДанныеПартийТоваров.Номенклатура КАК Номенклатура,
	        |	ДанныеПартийТоваров.БазоваяЕдиница КАК БазоваяЕдиница,
	        |	ДанныеПартийТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	        |	ДанныеПартийТоваров.Документ КАК Документ,
	        |	ДанныеПартийТоваров.Контрагент КАК Контрагент,
	        |	СУММА(ДанныеПартийТоваров.Оборот) КАК Оборот,
	        |	СУММА(ДанныеПартийТоваров.Остаток) КАК Остаток,
	        |	СУММА(ДанныеПартийТоваров.СуммаУпр) КАК СуммаУпр
	        |ИЗ
	        |	ДанныеПартийТоваров КАК ДанныеПартийТоваров
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ДанныеПартийТоваров.Номенклатура,
	        |	ДанныеПартийТоваров.БазоваяЕдиница,
	        |	ДанныеПартийТоваров.ХарактеристикаНоменклатуры,
	        |	ДанныеПартийТоваров.Документ,
	        |	ДанныеПартийТоваров.Контрагент
	        |
	        |ИМЕЮЩИЕ
	        |	СУММА(ДанныеПартийТоваров.Остаток) <> 0
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Номенклатура,
	        |	ХарактеристикаНоменклатуры,
	        |	Документ УБЫВ";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоДанных()
	
	// Очистим дерево значений
	ДеревоДанных.ПолучитьЭлементы().Очистить();
	
	// Проверка
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ПостроительПодбора = Новый ПостроительОтчета;
	ПостроительПодбора.Текст = ТекстЗапроса;
	
	// Создадим запрос для определения цен товара
	ТекстЗапросаЦены = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТоварныйДокументТовары.Номенклатура КАК Номенклатура,
	|	ТоварныйДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварныйДокументТовары.Цена КАК Цена
	|ИЗ
	|	Документ.$ИмяДокумента$.Товары КАК ТоварныйДокументТовары
	|ГДЕ
	|	ТоварныйДокументТовары.Ссылка = &Ссылка
	|	И ТоварныйДокументТовары.Номенклатура = &Номенклатура
	|	И ТоварныйДокументТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	
	ТекстЗапросаЦеныПересортица = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПересортицаТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПересортицаТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПересортицаТоваровТовары.ЦенаРозничная КАК Цена
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|ГДЕ
	|	ПересортицаТоваровТовары.Ссылка = &Ссылка
	|	И ПересортицаТоваровТовары.Номенклатура = &Номенклатура
	|	И ПересортицаТоваровТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	ЗапросЦены = Новый Запрос();
	
	// Полезные переменные
	ВалютаУпр		= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ДатаДокумента);
	КурсУпр			= ?(СтруктураКурса.Кратность = 0, СтруктураКурса.Курс, СтруктураКурса.Курс / СтруктураКурса.Кратность);
	КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1,ВалютаУпр,КурсУпр,ВалютаДокумента,КурсДокумента);
	
	// Установим параметры построителя
	ПостроительПодбора.Параметры.Вставить("Регистратор", Регистратор);
	ПостроительПодбора.Параметры.Вставить("ДатаНачала", НачалоДня(ДатаНачала));
	ПостроительПодбора.Параметры.Вставить("ДатаКонца", ?(ДатаКонца='00010101',КонецДня(ТекущаяДатаСеанса()),КонецДня(ДатаКонца)));
	ПостроительПодбора.Параметры.Вставить("ДокументПродажи", ДокументПродажи);
	ПостроительПодбора.Параметры.Вставить("СкладКомпании", СкладКомпании);
	
	// установим фильтры построителя
	Если НЕ ПостроительПодбора.ДоступныеПоля.Найти("СкладКомпании") = Неопределено Тогда
		НовыйЭлементОтбора=ПостроительПодбора.Отбор.Добавить("СкладКомпании");
		НовыйЭлементОтбора.ВидСравнения=ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение=СкладКомпании;
		НовыйЭлементОтбора.Использование=Истина;
	КонецЕсли;
	
	Если НЕ ПостроительПодбора.ДоступныеПоля.Найти("Номенклатура") = Неопределено И ЗначениеЗаполнено(Номенклатура) Тогда
		НовыйЭлементОтбора=ПостроительПодбора.Отбор.Добавить("Номенклатура");
		НовыйЭлементОтбора.ВидСравнения=ВидСравнения.Равно; 
		НовыйЭлементОтбора.Значение=Номенклатура;
		НовыйЭлементОтбора.Использование=Истина;
	КонецЕсли;
	
	Если НЕ ПостроительПодбора.ДоступныеПоля.Найти("ХарактеристикаНоменклатуры") = Неопределено И ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
		НовыйЭлементОтбора=ПостроительПодбора.Отбор.Добавить("ХарактеристикаНоменклатуры");
		НовыйЭлементОтбора.ВидСравнения=ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение=ХарактеристикаНоменклатуры;
		НовыйЭлементОтбора.Использование=Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(Документ) И НЕ ПостроительПодбора.ДоступныеПоля.Найти("Документ") = Неопределено Тогда
		НовыйЭлементОтбора=ПостроительПодбора.Отбор.Добавить("Документ");
		НовыйЭлементОтбора.ВидСравнения=ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение=Документ;
		НовыйЭлементОтбора.Использование=Истина;
	КонецЕсли;
	
	Если НЕ ПостроительПодбора.ДоступныеПоля.Найти("ДоговорВзаиморасчетов") = Неопределено И ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
		НовыйЭлементОтбора=ПостроительПодбора.Отбор.Добавить("ДоговорВзаиморасчетов");
		НовыйЭлементОтбора.ВидСравнения=ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение=ДоговорВзаиморасчетов;
		НовыйЭлементОтбора.Использование=Истина;
	КонецЕсли;
	
	Если НЕ ПостроительПодбора.ДоступныеПоля.Найти("Поставщик") = Неопределено Тогда
		НовыйЭлементОтбора=ПостроительПодбора.Отбор.Добавить("Поставщик");
		НовыйЭлементОтбора.ВидСравнения=ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение=Контрагент;
		НовыйЭлементОтбора.Использование=Истина;
	КонецЕсли;
	
	Если НЕ ПостроительПодбора.ДоступныеПоля.Найти("Покупатель") = Неопределено Тогда
		НовыйЭлементОтбора=ПостроительПодбора.Отбор.Добавить("Покупатель");
		НовыйЭлементОтбора.ВидСравнения=ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение=Контрагент;
		НовыйЭлементОтбора.Использование=Истина;
	КонецЕсли;
	
	Если НЕ ПостроительПодбора.ДоступныеПоля.Найти("СтатусПартии") = Неопределено Тогда
		НовыйЭлементОтбора=ПостроительПодбора.Отбор.Добавить("СтатусПартии");
		НовыйЭлементОтбора.ВидСравнения=ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение=СтатусПартии;
		НовыйЭлементОтбора.Использование=Истина;
	КонецЕсли;
	
	Если ПостроительПодбора.ДоступныеПоля.Найти("Цех") <> Неопределено Тогда
		
		НовыйЭлементОтбора = ПостроительПодбора.Отбор.Добавить("Цех");
		НовыйЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение      = Цех;
		НовыйЭлементОтбора.Использование = Истина;
		
	КонецЕсли;
	
	Если ПостроительПодбора.ДоступныеПоля.Найти("ЗаказНаряд") <> Неопределено Тогда
		
		НовыйЭлементОтбора = ПостроительПодбора.Отбор.Добавить("ЗаказНаряд");
		НовыйЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение      = ЗаказНаряд;
		НовыйЭлементОтбора.Использование = Истина;
		
	КонецЕсли;
	
	Если НЕ ОтборПоКонтрагенту = Справочники.Контрагенты.ПустаяСсылка()
		И ПостроительПодбора.Результат.Колонки.Найти("Контрагент") <> Неопределено Тогда 
		
		Если ПостроительПодбора.ДоступныеПоля.Найти("Контрагент") = Неопределено Тогда
			 ПостроительПодбора.ДоступныеПоля.Добавить("Контрагент",Истина);
			 ПостроительПодбора.ЗаполнитьНастройки(); 
		 КонецЕсли;

		НовыйЭлементОтбора = ПостроительПодбора.Отбор.Добавить("Контрагент");
		НовыйЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение      = ОтборПоКонтрагенту;
		НовыйЭлементОтбора.Использование = Истина;
		
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(ОтборПоДокументу) И ПостроительПодбора.Результат.Колонки.Найти("Документ") <> Неопределено Тогда 
		
		Если ПостроительПодбора.ДоступныеПоля.Найти("Документ") = Неопределено Тогда
			 ПостроительПодбора.ДоступныеПоля.Добавить("Документ",Истина);
			 ПостроительПодбора.ЗаполнитьНастройки(); 
		 КонецЕсли;
			 
		НовыйЭлементОтбора = ПостроительПодбора.Отбор.Добавить("Документ");
		НовыйЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
		НовыйЭлементОтбора.Значение      = ОтборПоДокументу;
		НовыйЭлементОтбора.Использование = Истина;
		
	КонецЕсли;  
	
	
	// Выполняем запрос
	УстановитьПривилегированныйРежим(Истина);
	ПостроительПодбора.Выполнить();
	
	// Идем по выборке и рисуем дерево
	ЕстьСтрокиДокумента = (ТоварыДокументаВозврата.Количество() > 0);
	
	СтрокаРодитель = Неопределено;
	СтруктураОтбора = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Партия");
	
	Выборка = ПостроительПодбора.Результат.Выбрать();
	ЕстьКолонкаЦена = (ПостроительПодбора.Результат.Колонки.Найти("Цена") <> Неопределено); 
	Пока Выборка.Следующий() Цикл
		
		Если (СтрокаРодитель = Неопределено) ИЛИ (СтрокаРодитель.Объект <> Выборка.Номенклатура) ИЛИ (СтрокаРодитель.ХарактеристикаНоменклатуры <> Выборка.ХарактеристикаНоменклатуры) Тогда
			СтрокаРодитель = ДеревоДанных.ПолучитьЭлементы().Добавить();
			СтрокаРодитель.Объект						= Выборка.Номенклатура;
			СтрокаРодитель.НомерПоКаталогу              = Выборка.Номенклатура.Артикул;
			СтрокаРодитель.ХарактеристикаНоменклатуры	= Выборка.ХарактеристикаНоменклатуры;
			СтрокаРодитель.ЕдиницаИзмерения				= Выборка.БазоваяЕдиница;
			СтруктураОтбора.Номенклатура				= СтрокаРодитель.Объект;
			СтруктураОтбора.ХарактеристикаНоменклатуры	= СтрокаРодитель.ХарактеристикаНоменклатуры;
		КонецЕсли;
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Объект = Выборка.Документ;
		Если ПостроительПодбора.Результат.Колонки.Найти("Контрагент") <> Неопределено Тогда
			НоваяСтрока.Контрагент = Выборка.Контрагент;
		КонецЕсли;
		НоваяСтрока.Оборот	= Выборка.Оборот;
		НоваяСтрока.Остаток	= Выборка.Остаток;
		НоваяСтрока.Сумма	= Выборка.СуммаУпр * КоэффициентПересчета;
		
		// Определим цену товара
		Если ЕстьКолонкаЦена Тогда
			НоваяСтрока.Цена = Выборка.Цена * КоэффициентПересчета;
		Иначе
			// Попробуем получить цену из самого документа
			ИмяДокумента = НоваяСтрока.Объект.Метаданные().Имя;
			Если ИмяДокумента = "ПересортицаТоваров" Тогда
				ЗапросЦены.Текст = ТекстЗапросаЦеныПересортица;
			Иначе
				ЗапросЦены.Текст = СтрЗаменить(ТекстЗапросаЦены, "$ИмяДокумента$", ИмяДокумента);
			КонецЕсли;
			ЗапросЦены.УстановитьПараметр("Ссылка", НоваяСтрока.Объект);
			ЗапросЦены.УстановитьПараметр("Номенклатура", СтрокаРодитель.Объект);
			ЗапросЦены.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаРодитель.ХарактеристикаНоменклатуры);
			
			ТабличныеЧастиДокумента = НоваяСтрока.Объект.Метаданные().ТабличныеЧасти; 
			Если ТабличныеЧастиДокумента.Найти("Товары") = Неопределено Тогда 
				НоваяСтрока.Цена = ?(НоваяСтрока.Остаток = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Остаток);
			Иначе
				РезультатЦены = ЗапросЦены.Выполнить();
				ВыборкаЦены	  = РезультатЦены.Выбрать();
				Если РезультатЦены.Пустой() ИЛИ(НЕ ВыборкаЦены.Следующий())Тогда
					НоваяСтрока.Цена = ?(НоваяСтрока.Остаток = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Остаток);
				Иначе
					НоваяСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаЦены.Цена, НоваяСтрока.Объект.ВалютаДокумента, НоваяСтрока.Объект.КурсДокумента, ВалютаДокумента, КурсДокумента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Поищем в документе количество возвращенного товара
		Если ЕстьСтрокиДокумента Тогда
			СтруктураОтбора.Партия = НоваяСтрока.Объект;
			НайденныеСтроки = ТоварыДокументаВозврата.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НоваяСтрока.Количество = НайденныеСтроки[0].Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаполнитьОстатками Тогда
			НоваяСтрока.Количество = НоваяСтрока.Остаток;
		КонецЕсли;
		
		// Просуммируем данные строки родителя
		СтрокаРодитель.Оборот		= СтрокаРодитель.Оборот + НоваяСтрока.Оборот;
		СтрокаРодитель.Остаток		= СтрокаРодитель.Остаток + НоваяСтрока.Остаток;
		СтрокаРодитель.Сумма		= СтрокаРодитель.Сумма + НоваяСтрока.Сумма;
		СтрокаРодитель.Количество	= СтрокаРодитель.Количество + НоваяСтрока.Количество;
	КонецЦикла;  
		
КонецПроцедуры //ЗаполнитьДеревоДанных()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Цвет фона
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДанныхКоличество");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДанных.Объект");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ФонУправляющегоПоля);
	
	// Цвет текста
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДанныхКоличество");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоДанных.Количество");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДанных.Оборот");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);

КонецПроцедуры

#КонецОбласти

