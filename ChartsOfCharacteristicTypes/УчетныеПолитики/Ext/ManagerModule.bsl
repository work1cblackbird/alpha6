// Модуль менеджера плана видов характеристик "Учетные политики"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Заполняет ПВХ УчетныеПолитики значениями по умолчанию из макета "УчетныеПолитикиПоУмолчанию".
Процедура ВыполнитьНачальноеЗаполнение() Экспорт
	
	ЧислоОшибок     = 0;                            // счетчик ошибок при загрузке прав и настроек
	ВсеПеречисления = Перечисления.ТипВсеСсылки();  // Описание типов для проверки перечислений
	ВсеСправочники  = Справочники.ТипВсеСсылки();   // Описание типов для проверки значений-справочников
	
	// Получим макет настроек по умолчанию.
	ИмяМакета = "УчетныеПолитикиПоУмолчанию";
	Макет     = ПланыВидовХарактеристик.УчетныеПолитики.ПолучитьМакет(ИмяМакета);
	
	Если Макет = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Не обнаружен макет «%1» с учетными политиками по умолчанию. Настройки не могут быть загружены. Обратитесь к администратору базы данных.'"),
				ИмяМакета
			)
		);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УчетныеПолитики.Ссылка КАК Ссылка,
	                      |	УчетныеПолитики.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	                      |ИЗ
	                      |	ПланВидовХарактеристик.УчетныеПолитики КАК УчетныеПолитики");
    ТаблицаУчетныхПолитик = Запрос.Выполнить().Выгрузить();
	
	// По всем строкам макета.
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		
		// Считаем из макета Имя, Наименование, Код, и значение по умолчанию.
		ИмяИзМакета                 = СокрЛП(Макет.Область(НомерСтроки, 1).Текст);
		НаименованиеИзМакета        = СокрЛП(Макет.Область(НомерСтроки, 2).Текст);
		КодИзМакета                 = СокрЛП(Макет.Область(НомерСтроки, 7).Текст);
		ЗначениеПоУмолчаниюИзМакета = СокрЛП(Макет.Область(НомерСтроки, 8).Текст);
		
		Если ПустаяСтрока(ИмяИзМакета) ИЛИ ПустаяСтрока(НаименованиеИзМакета) Тогда
			// ДЛЯ ИЗМЕНЕНИЯ пока платформа не позволяет обратиться к предопределенной группе по имени,
			// поэтому в макете для групп имя не заполняем и при загрузке такие строки с пустым именем пропускаем.
			Продолжить;
		КонецЕсли;
		
		// Попытаемся найти и получить ссылку на элемент ПВХ.
        СтрокаУчетнойПолитики = ТаблицаУчетныхПолитик.Найти(ИмяИзМакета, "ИмяПредопределенныхДанных");
		Если СтрокаУчетнойПолитики = Неопределено Тогда 
			СсылкаНаЭлементПВХ = Неопределено;
		Иначе 
			СсылкаНаЭлементПВХ = СтрокаУчетнойПолитики.Ссылка;
		КонецЕсли;
		
		// Проверим что нашли.
		Если НЕ ЗначениеЗаполнено(СсылкаНаЭлементПВХ) Тогда
			ЧислоОшибок = ЧислоОшибок + 1;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Ошибка при загрузке настроек: в строке %1 макета «%2» указан элемент отсутствующий в ПВХ «Типы ученой политики».'"),
					НомерСтроки,
					ИмяМакета)
			);
			Продолжить;
			
		ИначеЕсли СсылкаНаЭлементПВХ.ЭтоГруппа Тогда
			Продолжить; // группы только для удобства отображения, хотя пока они все равно игнорируются
		КонецЕсли;
		
		// Определим значение по умолчанию.
		ОписаниеТипов = СсылкаНаЭлементПВХ.ТипЗначения;    // получим описание доступных типов для текущего права/настройки
		ТипЗнач       = ОписаниеТипов.Типы().Получить(0);  // получим первый (и единственный) попавшийся из типов доступных для элемента
		
		// Сначала постараемся преобразовать к нужному типу, а особые типы (перечисления/справочники) обработаем ниже.
		ЗначениеПоУмолчанию = ОписаниеТипов.ПривестиЗначение(ЗначениеПоУмолчаниюИзМакета);
		
		// Если тип принадлежит к классу перечислений то...
		Если ВсеПеречисления.СодержитТип(ТипЗнач) Тогда
			
			// То попробуем получить конкретный элемент перечисления.
			Перечисление    = Новый (ТипЗнач);
			ИмяПеречисления = Перечисление.Метаданные().Имя;
			
			Попытка
				Если ПустаяСтрока(ЗначениеПоУмолчаниюИзМакета) Тогда
					ЗначениеПоУмолчанию = Перечисления[ИмяПеречисления].ПустаяСсылка();
				Иначе
					ЗначениеПоУмолчанию = Перечисления[ИмяПеречисления][ЗначениеПоУмолчаниюИзМакета];
				КонецЕсли;
			Исключение
				// Заполнили в макете некорректно, установим пустышку и поругаемся.
				ЧислоОшибок = ЧислоОшибок + 1;
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка при загрузке настройки'") + " «" 
					+ СсылкаНаЭлементПВХ + "» " + НСтр("ru = 'в строке'") + " " + НомерСтроки + " " + НСтр("ru = 'макета'") + " «" 
					+ ИмяМакета + "» " + НСтр("ru = 'некорректное значение по умолчанию'") + " «" + ЗначениеПоУмолчаниюИзМакета + "»");
				ЗначениеПоУмолчанию = СсылкаНаЭлементПВХ.ЗначениеПоУмолчанию;
			КонецПопытки;
			
		// Если тип принадлежит к справочникам.
		ИначеЕсли ВсеСправочники.СодержитТип(ТипЗнач) Тогда
			
			// То попробуем найти и получить значение справочника-ссылки.
			ЗначениеПоУмолчанию = СокрЛП(ЗначениеПоУмолчаниюИзМакета);
			
			Если СтрДлина(ЗначениеПоУмолчанию) > 0 Тогда
				
				СПР = Новый(ТипЗнач);
				СпрМетаданные  = СПР.Метаданные();
				ИмяСправочника = СпрМетаданные.Имя;
				
				Попытка
					МенеджерСправочника = Справочники[ИмяСправочника];
				Исключение
					МенеджерСправочника = Неопределено;
				КонецПопытки;
				
				Если МенеджерСправочника = Неопределено Тогда
					ЭлементСправочника = Неопределено
				Иначе
					Попытка // поиск в предопределенных элементах
						ЭлементСправочника = МенеджерСправочника[ЗначениеПоУмолчанию];
					Исключение
						ЭлементСправочника = Неопределено;
					КонецПопытки;
					
					Если ЭлементСправочника = Неопределено ИЛИ ЭлементСправочника.Пустая() Тогда
						Попытка
							// Попробуем найти по именованию.
							ЭлементСправочника = МенеджерСправочника.НайтиПоНаименованию(ЗначениеПоУмолчанию, Истина);
						Исключение
							ЭлементСправочника = Неопределено;
						КонецПопытки;
					КонецЕсли;
					
					Если (ЭлементСправочника = Неопределено ИЛИ ЭлементСправочника.Пустая()) И (СпрМетаданные.ДлинаКода > 0) Тогда
						
						Попытка
							// Последняя попытка поиска (по коду).
							Если СтрНайти(ЗначениеПоУмолчанию, "/") > 0 Тогда // полный код
								ЭлементСправочника = МенеджерСправочника.НайтиПоКоду(ЗначениеПоУмолчанию, Истина);
							Иначе
								// Проверим на тип кода
								ТипКода = Тип(СПР.Метаданные().ТипКода);
								Если ТипКода = Тип("Строка") Тогда
									
									// Если строковый то нужно "подогнать" его длину.
									Если СтрДлина(ЗначениеПоУмолчанию) > СпрМетаданные.ДлинаКода Тогда
										ЗначениеПоУмолчанию = Прав(ЗначениеПоУмолчанию,СпрМетаданные.ДлинаКода);
									Иначе
										Пока СтрДлина(ЗначениеПоУмолчанию) < СпрМетаданные.ДлинаКода Цикл
											ЗначениеПоУмолчанию = "0" + ЗначениеПоУмолчанию;
										КонецЦикла;
									КонецЕсли;
								Иначе
									// А если тип не строка то преобразуем. 
									ЗначениеПоУмолчанию = ТипКода.ПривестиЗначение(ЗначениеПоУмолчанию);
								КонецЕсли;
								
								// Теперь еще раз попробуем найти элемент.
								ЭлементСправочника = МенеджерСправочника.НайтиПоКоду(ЗначениеПоУмолчанию, Ложь);
							КонецЕсли;
						Исключение
							ЭлементСправочника = Неопределено;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				// Проверим получилось ли найти элемент по умолчанию.
				Если ЭлементСправочника = Неопределено ИЛИ ЭлементСправочника.Пустая() Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка при загрузке настройки'") + " «" 
						+ СсылкаНаЭлементПВХ + "» " + НСтр("ru = 'в строке'") + " " + НомерСтроки + " " + "макета" + " «" 
						+ ИмяМакета + "» " + НСтр("ru = 'некорректное значение по умолчанию'")+ " «" + ЗначениеПоУмолчаниюИзМакета + "»");
					ЗначениеПоУмолчанию = СсылкаНаЭлементПВХ.ЗначениеПоУмолчанию;
				Иначе
					ЗначениеПоУмолчанию = ЭлементСправочника.Ссылка;
				КонецЕсли;
			Иначе
				ЗначениеПоУмолчанию = СсылкаНаЭлементПВХ.ЗначениеПоУмолчанию;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
				Попытка
					ЗначениеПоУмолчанию = ОписаниеТипов.ПривестиЗначение(ЗначениеПоУмолчаниюИзМакета);
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при приведении типов'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + СокрЛП(ЗначениеПоУмолчаниюИзМакета), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки; 
			КонецЕсли; 
		КонецЕсли;
		
		// Проверим все ли реквизиты в ПВХ установлены как и в макете.
		Если (СсылкаНаЭлементПВХ.ЗначениеПоУмолчанию <> ЗначениеПоУмолчанию)
			ИЛИ (СсылкаНаЭлементПВХ.Наименование <> НаименованиеИзМакета)
			ИЛИ (СокрЛП(СсылкаНаЭлементПВХ.Код) <> КодИзМакета) Тогда
			
			// Переустановим значения реквизитов в ПВХ согласно значениям в макете.
			Сообщение = "";
			ОбъектПВХПрав = СсылкаНаЭлементПВХ.ПолучитьОбъект(); 
			
			Если НЕ ПустаяСтрока(КодИзМакета) Тогда
				ОбъектПВХПрав.Код = КодИзМакета;
			КонецЕсли;
			
			ОбъектПВХПрав.Наименование        = НаименованиеИзМакета;
			ОбъектПВХПрав.ЗначениеПоУмолчанию = ЗначениеПоУмолчанию;
			
			// Попытаемся сохранить изменения реквизитов элемента ПВХ.
			Попытка
				// При обновлении конфигурации возможна ситуация дублирования наименования с предопределенным элементом.
				// Постараемся ее отработать путем поиска и переименования устаревшего элемента.
				СтарыйЭлемент = ПланыВидовХарактеристик.УчетныеПолитики.НайтиПоНаименованию(НаименованиеИзМакета, Истина);
				
				Если (НЕ СтарыйЭлемент.Пустая()) И (СтарыйЭлемент.Ссылка <> ОбъектПВХПрав.Ссылка) Тогда
					СтарыйОбъект = СтарыйЭлемент.ПолучитьОбъект();
					СтарыйОбъект.Наименование = "УСТАРЕЛ " + СтарыйОбъект.Наименование;
					СтарыйОбъект.ОбменДанными.Загрузка = ИСТИНА;
					СтарыйОбъект.Записать();
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходима проверка учетной политики «" + НаименованиеИзМакета + "»'"));
				КонецЕсли;
				
				// Теперь попробуем записать. 
				ОбъектПВХПрав.ОбменДанными.Загрузка = ИСТИНА;
				ОбъектПВХПрав.Записать();
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Обновлена учетная политика'") + " «" 
					+ СсылкаНаЭлементПВХ + "»");
			Исключение
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Учетная политика'") +" «" + СсылкаНаЭлементПВХ 
					+ "» " + НСтр("ru = 'для строки'") + " " + НомерСтроки + " " + "макета" +" «" + ИмяМакета + "» " 
					+ НСтр("ru = 'не обновлена.'") + Символы.ПС + "Ошибка:" + " " + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьНачальноеЗаполнение()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Наименование");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#КонецОбласти

#КонецЕсли