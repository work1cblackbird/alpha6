// Модуль менеджера плана видов характеристик "Типы сделок"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	НастройкиПоУмолчанию = ПланыВидовХарактеристик.ТипыСделок.ПолучитьМакет("НастройкиПоУмолчанию");
	
	Для НомерСтроки = 1 По НастройкиПоУмолчанию.ВысотаТаблицы Цикл
		
		Элемент                             = Элементы.Добавить();
		Элемент.ИмяПредопределенныхДанных   = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 1).Текст);
		Элемент.Наименование                = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 2).Текст);
		Элемент.Код                         = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 3).Текст);
		Элемент.ЗапретитьПереплатуПоСделкам = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 5).Текст) = "Истина";
		Элемент.Дебетовый                   = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 6).Текст) = "Истина";
		Элемент.Кредитовый                  = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 7).Текст) = "Истина";
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Наименование");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#КонецОбласти

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Получение разрешенных типов сделок для документа
// 
// Параметры: 
// ЭтотОбъект			- ДокументОбъект, обрабатываемый документ
// ЭтоДебетоваяСделка	- Булево, признак что это дебетовая сделка
// ЭтоКредитоваяСделка - Булево, признак что это кредитовая сделка.
// 
// Возвращаемое значение: 
//	Результат - массив разрешенных типов сделок для документа.
Функция ПолучитьРазрешенныеТипыСделок(ЭтоДебетоваяСделка, ЭтоКредитоваяСделка) Экспорт
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТипыСделок.ТипЗначения КАК ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.ТипыСделок КАК ТипыСделок";
	
	Если (ЭтоДебетоваяСделка) И (НЕ ЭтоКредитоваяСделка) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ТипыСделок.Кредитовый = ИСТИНА";
		
	ИначеЕсли (ЭтоКредитоваяСделка) И (НЕ ЭтоДебетоваяСделка) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ТипыСделок.Дебетовый = ИСТИНА";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ТипыСделок = РезультатЗапроса.Выбрать();
	
	Пока ТипыСделок.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ТипыСделок.ТипЗначения.Типы(), Истина);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли