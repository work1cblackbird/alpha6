// Модуль менеджера плана видов расчета "Начисления и удержания"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Заполняет предопределенные элементы справочника
//
Процедура ВыполнитьНачальноеЗаполнение() Экспорт
	ИмяМакета = "НастройкиПоУмолчанию";
	Макет = ПолучитьМакет("НастройкиПоУмолчанию");
	Если Макет = Неопределено Тогда
		ВывестиСообщение(НСтр("ru = 'Не обнаружен макет начальных настроек.'"));
		Возврат;
	КонецЕсли;
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		// Считаем из макета Имя, Наименование, Код, Периодичность, ВидОбъектаПланирования,
		// ВидАналитикиПланирования1, ВидАналитикиПланирования2, ПоказательПлана1, ПоказательПлана2,
		// ПоказательПлана3, Параметры.
		СтрИмя = СокрЛП(Макет.Область(НомерСтроки,1).Текст);
		СтрНаименование = СокрЛП(Макет.Область(НомерСтроки,2).Текст);
		СтрКод = СокрЛП(Макет.Область(НомерСтроки,3).Текст);
		СтрСтатьяДоходовИРасходов = СокрЛП(Макет.Область(НомерСтроки,4).Текст);
		СтрСпособРасчета =	СокрЛП(Макет.Область(НомерСтроки,5).Текст);
		СтрНачислениеИлиУдержание =	СокрЛП(Макет.Область(НомерСтроки,6).Текст);
		
		// Получим элемент вида плана
		СсылкаНачислениеУдержание = ПланыВидовРасчета.НачисленияИУдержания[СтрИмя];
		Если СсылкаНачислениеУдержание.Пустая() Тогда
			ВывестиСообщение(НСтр("ru = 'Ошибка при заполнении вида плана:'") + " " + СтрНаименование 
				+ ". " + НСтр("ru = 'Указан отсутствующий элемент справочника виды планов.'"));
			Продолжить;
		Иначе
			ОбъектНачислениеУдержание = СсылкаНачислениеУдержание.ПолучитьОбъект();
		КонецЕсли;
		
		// Заполняем реквизиты
		Если НЕ ЗначениеЗаполнено(ОбъектНачислениеУдержание.Наименование) Тогда
			ОбъектНачислениеУдержание.Наименование = СтрНаименование;
		КонецЕсли;
		
		// Получим периодичность планирования
		Если ЗначениеЗаполнено(СтрСтатьяДоходовИРасходов) Тогда
			СсылкаСтрСтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов[СтрСтатьяДоходовИРасходов];
			Если СсылкаСтрСтатьяДоходовИРасходов.Пустая() Тогда
				ВывестиСообщение(НСтр("ru = 'Ошибка при заполнении статьи доходов и расходов элемента:'") + " " + СтрНаименование 
				+ " " + НСтр("ru = 'Значение статья:'") + " "+СтрСтатьяДоходовИРасходов+" " + НСтр("ru = 'не найдено'"));
			Иначе
				Если НЕ ЗначениеЗаполнено(ОбъектНачислениеУдержание.СтатьяДоходовИРасходов) Тогда
					ОбъектНачислениеУдержание.СтатьяДоходовИРасходов = СсылкаСтрСтатьяДоходовИРасходов;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВывестиСообщение(НСтр("ru = 'Ошибка при заполнении статьи доходов и расходов элемента:'") +" " + СтрНаименование 
				+ " " + НСтр("ru = 'Значение статья:'") + " "+СтрСтатьяДоходовИРасходов+" " + НСтр("ru = 'не найдено'"));
		КонецЕсли;
		
		// Получим Вид объекта планирования
		Если ЗначениеЗаполнено(СтрСпособРасчета) Тогда
			СсылкаСпособРасчета = Перечисления.СпособыРасчета[СтрСпособРасчета];
			Если СсылкаСпособРасчета.Пустая() Тогда
				ВывестиСообщение(НСтр("ru = 'Ошибка при заполнении способа расчета элемента:'") +  " " + СтрНаименование 
					+ " " + НСтр("ru = 'Способ расчета:'") + " "+СтрСпособРасчета+" " + НСтр("ru = 'не найден'"));
			Иначе
				Если НЕ ЗначениеЗаполнено(ОбъектНачислениеУдержание.СпособРасчета) Тогда
					ОбъектНачислениеУдержание.СпособРасчета = СсылкаСпособРасчета;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВывестиСообщение(НСтр("ru = 'Ошибка при заполнении статьи расчета элемента:'") + " " + СтрНаименование 
				+ " " +НСтр("ru = 'Значение статья:'") + " " + СтрСпособРасчета + " " + НСтр("ru = 'не найдено'"));
		КонецЕсли;
		
		// Получим признак начисления/удержания
		Если ЗначениеЗаполнено(СтрНачислениеИлиУдержание) Тогда
			СсылкаНачислениеИлиУдержание = Перечисления.НачислениеИлиУдержание[СтрНачислениеИлиУдержание];
			Если СсылкаНачислениеИлиУдержание.Пустая() Тогда
				ВывестиСообщение(НСтр("ru = 'Ошибка при заполнении признака начисления/удержания элемента:'") + " " + СтрНаименование 
					+ " " + НСтр("ru = 'Признак начисления/удержания:'") + " "+СтрНачислениеИлиУдержание+" " + НСтр("ru = 'не найден'"));
			Иначе
				Если НЕ ЗначениеЗаполнено(ОбъектНачислениеУдержание.НачислениеИлиУдержание) Тогда
					ОбъектНачислениеУдержание.НачислениеИлиУдержание = СсылкаНачислениеИлиУдержание;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВывестиСообщение(НСтр("ru = 'Ошибка при заполнении признака начисления/удержания элемента:'") + " " + СтрНаименование 
				+ " " + НСтр("ru = 'Значение признака:'") + " "+СтрНачислениеИлиУдержание+" " + НСтр("ru = 'не найдено'"));
		КонецЕсли;
		
		// Сохранение справочника
		НовыйЭлемент = ОбъектНачислениеУдержание.ЭтоНовый();
		Если ОбъектНачислениеУдержание.Модифицированность() Тогда
			Попытка
				ОбъектНачислениеУдержание.Записать();
				ВывестиСообщение(НСтр("ru = 'План видов расчета ""Начисления и удержания'") + """. "
					+?(НовыйЭлемент,"Создан","Модифицирован")+" " + "элемент" + " """
					+ СокрЛП(ОбъектНачислениеУдержание.Наименование)+"""'");
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'План видов расчета ""Начисления и удержания""'") +" «" + СсылкаНачислениеУдержание
					+ "» " + НСтр("ru = 'для строки'") + " " + НомерСтроки + " " + "макета" +" «" + ИмяМакета + "» " 
					+ НСтр("ru = 'не обновлена.'") + Символы.ПС + "Ошибка:" + " " + ОписаниеОшибки());

			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ВыполнитьНачальноеЗаполнение()

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением.
//                                  Например:
//                                    Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                    ЭлементТЧ = Элемент.Ключи.Добавить();
//                                    ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	НастройкиПоУмолчанию = ПланыВидовРасчета.НачисленияИУдержания.ПолучитьМакет("НастройкиПоУмолчанию");
	
	Для НомерСтроки = 1 По НастройкиПоУмолчанию.ВысотаТаблицы Цикл
		
		Элемент = Элементы.Добавить();
		Элемент.ИмяПредопределенныхДанных = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 1).Текст);
		Элемент.Наименование              = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 2).Текст);
		Элемент.Код                       = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 3).Текст);
		
		СтатьиДоходовИРасходовТекст    = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 4).Текст); 
		Элемент.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов[СтатьиДоходовИРасходовТекст];
		
		СпособРасчетаТекст    = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 5).Текст);      
		Элемент.СпособРасчета = Перечисления.СпособыРасчета[СпособРасчетаТекст];
		
		НачислениеИлиУдержаниеТекст    = СокрЛП(НастройкиПоУмолчанию.Область(НомерСтроки, 6).Текст);
		Элемент.НачислениеИлиУдержание = Перечисления.НачислениеИлиУдержание[НачислениеИлиУдержаниеТекст];
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты объекта
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Наименование");
	ОбязательныеРеквизиты.Добавить("Код");
	ОбязательныеРеквизиты.Добавить("СтатьяДоходовИРасходов");
	ОбязательныеРеквизиты.Добавить("СпособРасчета");
	ОбязательныеРеквизиты.Добавить("НачислениеИлиУдержание");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Код");
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#КонецОбласти

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "СпособРасчета".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СпособРасчетаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ (Объект.СпособРасчета = Перечисления.СпособыРасчета.Процентом) Тогда
		Объект.ВидОбъекта   = 0;
		Объект.ПутьКОбъекту = "";
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "ВидОбъекта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидОбъектаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Объект.ПутьКОбъекту = "";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
                       
