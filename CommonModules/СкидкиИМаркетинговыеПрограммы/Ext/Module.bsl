
#Область ПрограммныйИнтерфейс

// Состав группы скидок совместного использования
//
// Параметры:
//  Скидка - СправочникСсылка.СкидкиАвтомобилей - Скидка для которой формируется группа
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.СкидкиАвтомобилей - группа скидок совместного использования.
//
Функция ГруппаСовместногоИспользованияСкидки(Скидка) Экспорт
	
	Возврат ГруппыСовместногоИспользованияСкидок(Скидка).Получить(Скидка);
	
КонецФункции

// Набор групп совместного использования для ряда скидок
//
// Параметры:
//  Скидки - Массив, СправочникСсылка.СкидкиАвтомобилей - перечень скидок, для которых выполняется операция
//
// Возвращаемое значение:
//   Соответствие - Набор групп совместного использования для ряда скидок.
//
Функция ГруппыСовместногоИспользованияСкидок(Скидки) Экспорт
	
	Построитель = Новый ПостроительЗапроса(
	"ВЫБРАТЬ
	|	Т.СкидкаСовместная КАК Скидка,
	|	Т.Скидка КАК СкидкаГруппа
	|ИЗ
	|	РегистрСведений.ГруппыСовместногоИспользованияСкидокИМаркетинговыхПрограмм КАК Т
	|{ГДЕ
	|	Т.Скидка}
	|ИТОГИ ПО
	|	СкидкаГруппа");
	
	Построитель.ЗаполнитьНастройки();
	
	Отбор = Построитель.Отбор.Добавить("Скидка");
	Если ТипЗнч(Скидки) = Тип("Массив") Тогда
		Отбор.ВидСравнения = ВидСравнения.ВСписке;
		Отбор.Использование = Истина;
		
		Значение = Новый СписокЗначений();
		Значение.ЗагрузитьЗначения(Скидки);
		Отбор.Значение = Значение;
	Иначе
		Отбор.Установить(Скидки, Истина);
	КонецЕсли;
	
	Построитель.Выполнить();
	Группы = Новый Соответствие;
	Если НЕ Построитель.Результат.Пустой() Тогда
		ВыборкаГруппы = Построитель.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппы.Следующий() Цикл
			СоставГруппы = Новый Массив;
			
			Выборка = ВыборкаГруппы.Выбрать();
			Пока Выборка.Следующий() Цикл
				СоставГруппы.Добавить(Выборка.Скидка);
			КонецЦикла;
			
			Группы.Вставить(ВыборкаГруппы.СкидкаГруппа, СоставГруппы);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Группы;
	
КонецФункции

// Формирует область действия скидоки по подразделениям
//
// Параметры:
//  Скидка   - СправочникСсылка.СкидкиАвтомобилей - скидка, для которой выполняется действие;
//  НаМомент - Дата - момент времени, на который выполняется действие
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса, Массив - область действия скидки.
//
Функция ОбластьДействияСкидки(Скидка, НаМомент=Неопределено) Экспорт
	
	Если НаМомент = Неопределено Тогда
		НаМомент = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДействиеСкидокАвтомобилейСрезПоследних.Источник КАК Источник
	|ИЗ
	|	РегистрСведений.ДействиеСкидокАвтомобилей.СрезПоследних(
	|			&НаМомент,
	|			Скидка = &Скидка
	|				И Действует = ИСТИНА) КАК ДействиеСкидокАвтомобилейСрезПоследних");
	Запрос.УстановитьПараметр("НаМомент", НаМомент);
	Запрос.УстановитьПараметр("Скидка", Скидка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОбластьДействияСкидки = РезультатЗапроса.Выбрать();
	Иначе
		ОбластьДействияСкидки = Новый Массив;
	КонецЕсли;
	
	Возврат ОбластьДействияСкидки;
	
КонецФункции

// Получает доступные в данный области скидки
//
// Параметры:
//  Область  - СправочникСсылка.ПодразделенияКомпании,
//             Массив из СправочникСсылка.ПодразделенияКомпании - область действия скидки
//  НаМомент - Дата - момент времени, на который выполняется действие
//
// Возвращаемое значение:
//  СправочникСсылка.СкидкиАвтомобилей, Массив из СправочникСсылка.СкидкиАвтомобилей - доступные скидки.
//
Функция ДоступныеВОбластиСкидки(Область, НаМомент=Неопределено) Экспорт
	Если НаМомент = Неопределено Тогда
		НаМомент = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДействиеСкидокАвтомобилейСрезПоследних.Скидка КАК Скидка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокАвтомобилей.СрезПоследних(&Срез, {(Источник)}) КАК ДействиеСкидокАвтомобилейСрезПоследних
	|ГДЕ
	|	ДействиеСкидокАвтомобилейСрезПоследних.Действует = ИСТИНА";
	Построитель.Параметры.Вставить("Срез", НаМомент);
	
	Если ТипЗнч(Область) = Тип("Массив") Тогда
		Значение = Новый СписокЗначений;
		Значение.ЗагрузитьЗначения(Область);
		
		Отбор = Построитель.Отбор.Добавить("Источник");
		Отбор.ВидСравнения = ВидСравнения.ВСписке;
		Отбор.Использование = Истина;
		Отбор.Значение = Значение;
	Иначе
		Построитель.Отбор.Добавить("Источник").Установить(Область, Истина);
	КонецЕсли;
	
	Построитель.Выполнить();
	Если НЕ Построитель.Результат.Пустой() Тогда
		Возврат Построитель.Результат.Выгрузить().ВыгрузитьКолонку("Скидка");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
КонецФункции

#КонецОбласти