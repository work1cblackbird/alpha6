// Общий модуль "Ценообразование сервер"

#Область ПрограммныйИнтерфейс

// Функция возвращает цену товара.
//
// Параметры:
//	ТипЦен       - СправочникСсылка - Тип цены
//	Номенклатура - СправочникСсылка  - Товар
//	НаМомент     - Дата				 - Момент времени
//	Контрагент   - СправочникСсылка	 - Контрагент
//	Валюта       - СправочникСсылка  - Валюта
//	Курс         - Число			 - Курс валюты
//	ХарактеристикаНоменклатуры	- СправочникСсылка  - Характеристика номенклатуры
//	ЕдиницаИзмерения			- СправочникСсылка  - Единица измерения номенклатуры
//	ПодразделениеКомпании		- СправочникСсылка  - Подразделение компании.
//	ПолучитьЦенуБазовойЕдиницы	- Булево            - Признак того, что необходимо получить цену базовой единицы
//	ДоговорВзаиморасчетов       - СправочникСсылка  - Договор взаиморасчетов
//
// Возвращаемое значение:
//	Число - Цена товара
//
Функция ПолучитьЦену(
	ТипЦен,
	Номенклатура,
	Знач НаМомент = Неопределено,
	Знач Контрагент = Неопределено,
	Валюта = Неопределено,
	Курс = 0,
	Знач ХарактеристикаНоменклатуры = Неопределено,
	Знач ЕдиницаИзмерения = Неопределено,
	Знач ПодразделениеКомпании = Неопределено,
	ПолучитьЦенуБазовойЕдиницы = Истина,
	ДоговорВзаиморасчетов = Неопределено) Экспорт
	
	Цена = 0;
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) ИЛИ НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат 0;
	КонецЕсли;
	
	// определим на какой момент получаем цену
	Если НаМомент = Неопределено Тогда
		НаМомент = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	// проверим, а не на документ ли получаем цену
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(НаМомент)) Тогда
		
		// Если документ еще не записан, то получим цену на дату документа, иначе на момент времени.
		Если НЕ ЗначениеЗаполнено(НаМомент) Тогда
			НаМомент = КонецДня(ТекущаяДатаСеанса());
		Иначе
			НаМомент = НаМомент.МоментВремени();
		КонецЕсли;
	КонецЕсли;
	
	// если тип цен - расчетный, то рассчитаем цену
	Если ТипЦен.Рассчитывается Тогда
		
		// Проверим, указан ли процент наценки для данного типа номенклатуры.
		Запрос=Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	1 КАК ПолеСортировки,
		|	ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен КАК БазовыйТипЦен
		|ИЗ
		|	Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК ТипыЦенПроцентыСкидкиНаценки
		|ГДЕ
		|	ТипыЦенПроцентыСкидкиНаценки.Ссылка = &ТипЦен
		|	И ТипыЦенПроцентыСкидкиНаценки.ЦеноваяГруппа = &ЦеноваяГруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки,
		|	2,
		|	ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен
		|ИЗ
		|	Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК ТипыЦенПроцентыСкидкиНаценки
		|ГДЕ
		|	ТипыЦенПроцентыСкидкиНаценки.Ссылка = &ТипЦен
		|	И ТипыЦенПроцентыСкидкиНаценки.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
		|	И ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен <> ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыЦен.ПроцентСкидкиНаценки,
		|	3,
		|	ТипыЦен.БазовыйТипЦен
		|ИЗ
		|	Справочник.ТипыЦен КАК ТипыЦен
		|ГДЕ
		|	ТипыЦен.Ссылка = &ТипЦен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки";
		
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		Запрос.УстановитьПараметр("ЦеноваяГруппа", Номенклатура.ЦеноваяГруппа);
		
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			Валюта = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Номенклатура, Истина);
			
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, НаМомент);
			Курс           = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
			БазоваяЦена = ПолучитьЦену(Выборка.БазовыйТипЦен, Номенклатура, НаМомент, Контрагент, Валюта, Курс,
				ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ПодразделениеКомпании, ПолучитьЦенуБазовойЕдиницы);
		Иначе
			ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;
			БазоваяЦена = ПолучитьЦену(ТипЦен.БазовыйТипЦен, Номенклатура, НаМомент, Контрагент, Валюта, Курс,
				ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ПодразделениеКомпании, ПолучитьЦенуБазовойЕдиницы);
		КонецЕсли;
		
		// получим цену базового типа
		Если БазоваяЦена = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		// рассчитаем цену
		Цена = БазоваяЦена + (БазоваяЦена * ПроцентСкидкиНаценки / 100);
		
	Иначе
		
		АлгоритмРасчетаЦены = ?(ТипЦен.АлгоритмПолученияЦены.Пустая(), Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре, ТипЦен.АлгоритмПолученияЦены);
		УчетЦенТолькоВРазрезеДопПараметров = Номенклатура.ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров;
		
		Контрагент                 = ?(Контрагент=Неопределено, Справочники.Контрагенты.ПустаяСсылка(), Контрагент);
		ДоговорВзаиморасчетов      = ?(ДоговорВзаиморасчетов=Неопределено, Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка(), ДоговорВзаиморасчетов);
		ХарактеристикаНоменклатуры = ?(ХарактеристикаНоменклатуры=Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ХарактеристикаНоменклатуры);
		ЕдиницаИзмерения           = ?(ЕдиницаИзмерения=Неопределено, Справочники.ЕдиницыИзмерения.ПустаяСсылка(), ЕдиницаИзмерения);
		
		// Работа с подразделениями отличается. Т.к. в документах назначающих цену (Установка цен, Поступление ТМЦ и проч.)
		// подразделение берется из шапки, то фактически в регистре сведений "Цены", для типа цен, поддерживающего учет
		// в разрезе подразделений, не может быть записей в пустыми подразделениями. Чтобы назначить цену для всех
		// подразделений, необходимо в шапке документа выбрать корневое подразделение. Записи с пустыми подразделениями
		// могут быть только в одном случае - если после внедрения нового ценообразования не выполнялось перепроведение
		// документов (что, конечно, будет у всех клиентов). Но в этом случае, мы считаем, что пустое значение подразделения
		// соответствует корневому подразделению.
		Если ПодразделениеКомпании = Неопределено ИЛИ ПодразделениеКомпании.Пустая() Тогда
			ПодразделениеКомпании = Справочники.ПодразделенияКомпании.ОсновноеПодразделение;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ДопУсловия = "";
		МассивПодразделений = Новый Массив;
		
		ТекстЗапросаНачало = "";
		
		// Необходимо добавить дополнительное поле, для выполнения сортировки.
		// Предполагаем, что большим приоритетом пользуются записи, дополнительные характеристики которых совпадают с 
		// доп. характеристиками переданными в функцию. Затем идут записи, у которых доп. характеристики - пустые значения.
		Если АлгоритмРасчетаЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
			ТекстЗапросаНачало = ТекстЗапросаНачало + " 
			|ВЫБОР
			|	КОГДА ХарактеристикаНоменклатуры=&ХарактеристикаНоменклатуры ТОГДА 0
			|	ИНАЧЕ 1 КОНЕЦ";
		ИначеЕсли АлгоритмРасчетаЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			ТекстЗапросаНачало = ТекстЗапросаНачало + " 
			|ВЫБОР
			|	КОГДА ЕдиницаИзмерения=&ЕдиницаИзмерения ТОГДА 0
			|	ИНАЧЕ 1 КОНЕЦ";
		Иначе
			ТекстЗапросаНачало = ТекстЗапросаНачало + "
			|	0";
		КонецЕсли;
		
		ТекстЗапросаНачало = ТекстЗапросаНачало + " + ВЫБОР";
		
		// Сформируем отбор и сортировку по подразделению
		ТекущееПодразделение = ПодразделениеКомпании;
		ПеременнаяЦикла = 0;
		
		УстановитьПривилегированныйРежим(Истина); 
		Пока Истина Цикл
			
			// Отбор подразделений
			МассивПодразделений.Добавить(ТекущееПодразделение);
			
			// Сортировка подразделений
			ТекстЗапросаНачало = ТекстЗапросаНачало + "
			|	КОГДА ЦеныСрезПоследних.ПодразделениеКомпании = &Подразделение" + ПеременнаяЦикла + "
			|		ТОГДА " + ПеременнаяЦикла;
			
			Запрос.УстановитьПараметр("Подразделение" + ПеременнаяЦикла, ТекущееПодразделение);
			
			// Получаем родителя подразделения
			ТекущееПодразделение = ТекущееПодразделение.Родитель;
			Если НЕ ЗначениеЗаполнено(ТекущееПодразделение) Тогда
				
				// Добавим пустое подразделение
				ПеременнаяЦикла = ПеременнаяЦикла + 1;
				ТекущееПодразделение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
				МассивПодразделений.Добавить(ТекущееПодразделение);
				
				ТекстЗапросаНачало = ТекстЗапросаНачало + "
				|	КОГДА ЦеныСрезПоследних.ПодразделениеКомпании = &Подразделение" + ПеременнаяЦикла + "
				|		ТОГДА " + ПеременнаяЦикла;
				
				Запрос.УстановитьПараметр("Подразделение" + ПеременнаяЦикла, ТекущееПодразделение);
				
				Прервать;
			КонецЕсли;
			
			ПеременнаяЦикла = ПеременнаяЦикла + 1;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
			
		ТекстЗапросаНачало = ТекстЗапросаНачало + "
		|	ИНАЧЕ 999
		|КОНЕЦ";
		
		Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
		
		// Сформируем текст с дополнительными условиями для виртуальной таблицы "СрезПоследних".
		Если АлгоритмРасчетаЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
			Если УчетЦенТолькоВРазрезеДопПараметров Тогда
				Если ХарактеристикаНоменклатуры.Пустая() Тогда
					Возврат 0;
				Иначе
					ДопУсловия = "
					|	И (ХарактеристикаНоменклатуры=&ХарактеристикаНоменклатуры)";
				КонецЕсли;
			Иначе
				Если ХарактеристикаНоменклатуры.Пустая() Тогда
					ДопУсловия = "
					|	И (ХарактеристикаНоменклатуры=ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))";
				Иначе
					ДопУсловия = "
					|	И (ХарактеристикаНоменклатуры=&ХарактеристикаНоменклатуры ИЛИ ХарактеристикаНоменклатуры=ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли АлгоритмРасчетаЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			Если УчетЦенТолькоВРазрезеДопПараметров Тогда
				Если ЕдиницаИзмерения.Пустая() Тогда
					Возврат 0;
				Иначе
					ДопУсловия = "
					|	И (ЕдиницаИзмерения=&ЕдиницаИзмерения)";
				КонецЕсли;
			Иначе
				Если ЕдиницаИзмерения.Пустая() Тогда
					ДопУсловия = "
					|	И (ЕдиницаИзмерения=ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))";
				Иначе
					ДопУсловия = "
					|	И (ЕдиницаИзмерения=&ЕдиницаИзмерения ИЛИ ЕдиницаИзмерения=ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Сформируем условие отбора 
		ТекстЗапросаДоговораВзаиморасчетов = "";
		ПолеСортировкиПоДоговоруВзаиморасчетов = "";
		Если НЕ ДоговорВзаиморасчетов.Пустая() Тогда
			ТекстЗапросаДоговораВзаиморасчетов = "ВЫБОР КОГДА ЦеныСрезПоследних.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
												|	ТОГДА 1
												|ИНАЧЕ 2 КОНЕЦ КАК ПорядокДоговорВзаиморасчетов,";
			МассивДоговоров = Новый Массив;
			МассивДоговоров.Добавить(ДоговорВзаиморасчетов);
			МассивДоговоров.Добавить(Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка());
			ДопУсловия = ДопУсловия + "
					|	И ДоговорВзаиморасчетов В (&МассивДоговоров)";
			ПолеСортировкиПоДоговоруВзаиморасчетов = "ПорядокДоговорВзаиморасчетов, ";
			Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
			Запрос.УстановитьПараметр("МассивДоговоров",       МассивДоговоров);
		Иначе
			ДопУсловия = ДопУсловия + "
					|	И ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)";
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЦеныСрезПоследних.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ЦеныСрезПоследних.ЕдиницаИзмерения=ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ТОГДА 1
		|		ИНАЧЕ ЦеныСрезПоследних.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	" + ТекстЗапросаДоговораВзаиморасчетов + "
		|" + ТекстЗапросаНачало + " КАК ПолеДляСортировки
		|ИЗ
		|	РегистрСведений.Цены.СрезПоследних(&Момент,
		|	ТипЦен=&ТипЦен
		|	И Номенклатура=&Номенклатура " + ДопУсловия + "
		|	И Контрагент=&Контрагент
		|	И ПодразделениеКомпании В (&МассивПодразделений)) КАК ЦеныСрезПоследних
		|ГДЕ" + ТекстЗапросаНачало + " < 999
		|	И ЦеныСрезПоследних.Цена <> 0
		|
		|УПОРЯДОЧИТЬ ПО " + ПолеСортировкиПоДоговоруВзаиморасчетов + "ПолеДляСортировки";
		
		Запрос.УстановитьПараметр("ТипЦен",                     ТипЦен);
		Запрос.УстановитьПараметр("Номенклатура",               Номенклатура);
		Запрос.УстановитьПараметр("Момент",                     НаМомент);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		Запрос.УстановитьПараметр("ЕдиницаИзмерения",           ЕдиницаИзмерения);
		Запрос.УстановитьПараметр("ПодразделениеКомпании",      ПодразделениеКомпании);
		Запрос.УстановитьПараметр("Контрагент",                 Контрагент);
		
		Коэффициент = 1;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Цена = Выборка.Цена;
			Коэффициент = Выборка.Коэффициент;
			
		КонецЕсли;
		
		Если ПолучитьЦенуБазовойЕдиницы И АлгоритмРасчетаЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			Цена = ?(Коэффициент = 0, Цена, Цена / Коэффициент);
		КонецЕсли; 
		
		// Если указана валюта, то пересчитаем цену в нее
		ВалютаТипаЦены = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Номенклатура, Истина);
		Если ЗначениеЗаполнено(Валюта) И Валюта <> ВалютаТипаЦены Тогда
			Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Цена,
				ВалютаТипаЦены,
				НаМомент,
				Валюта,
				?(Курс = 0, НаМомент, Курс)
			);
		КонецЕсли;
	КонецЕсли;
	
	// Округлим цену.
	Если ТипЦен.ОкруглятьВБольшуюСторону Тогда
		Цена = Окр(Цена + (0.5 / Pow(10, ТипЦен.Точность)), ТипЦен.Точность, 0);
	Иначе
		Цена = Окр(Цена, ТипЦен.Точность, 0);
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции // ПолучитьЦену()

// Функция возвращает цену автоработы. При отсутствии переопределения возвращает Неопределено.
//
// Параметры:
//	ТипЦен                 - СправочникСсылка - Тип цены
//	Авторабота             - СправочникСсылка  - Авторабота
//	Модель                 - СправочникСсылка - Модели
//	Контрагент             - СправочникСсылка - Контрагент
//	ДоговорВзаиморасчетов  - СправочникСсылка - Договоры взаиморасчетов
//	Цех                    - СправочникСсылка - Цеха
//	ВидРемонта             - СправочникСсылка - Виды ремонта
//	НаДату                 - Дата				 - Момент времени
//	Валюта                 - СправочникСсылка  - Валюта
//	Курс                   - Число			 - Курс валюты.
//
// Возвращаемое значение:
//	Число - Цена автоработы
//
Функция ПолучитьЦенуАвтоработы(
	ТипЦен,
	Авторабота,
	Модель,
	Контрагент,
	ДоговорВзаиморасчетов,
	Цех,
	ВидРемонта,
	Знач НаДату = Неопределено,
	Валюта = Неопределено,
	Курс = Неопределено) Экспорт
	
	НормочасПоУмолчанию = ПраваИНастройкиПользователя.Значение("НормочасПоУмолчанию");
	
	СтруктураЦены = Новый Структура;
	СтруктураЦены.Вставить("Нормочас"     , НормочасПоУмолчанию);
	СтруктураЦены.Вставить("НормаВремени" , 0);
	СтруктураЦены.Вставить("Валюта"       , Справочники.Валюты.ПустаяСсылка());
	СтруктураЦены.Вставить("Цена"         , 0);
	СтруктураЦены.Вставить("ВидЦены"      , "");
	СтруктураЦены.Вставить("ЦенаНайдена"  , Ложь);
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		Возврат СтруктураЦены;
	КонецЕсли;
	
	Если ТипЦен.Рассчитывается Тогда
		
		// Проверим указан ли процент наценки для данной автоработы.
		Запрос=Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	1 КАК ПолеСортировки,
		|	ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен КАК БазовыйТипЦен
		|ИЗ
		|	Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК ТипыЦенПроцентыСкидкиНаценки
		|ГДЕ
		|	ТипыЦенПроцентыСкидкиНаценки.Ссылка = &ТипЦен
		|	И ТипыЦенПроцентыСкидкиНаценки.ЦеноваяГруппа = &ЦеноваяГруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки,
		|	2,
		|	ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен
		|ИЗ
		|	Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК ТипыЦенПроцентыСкидкиНаценки
		|ГДЕ
		|	ТипыЦенПроцентыСкидкиНаценки.Ссылка = &ТипЦен
		|	И ТипыЦенПроцентыСкидкиНаценки.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
		|	И ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен <> ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыЦен.ПроцентСкидкиНаценки,
		|	3,
		|	ТипыЦен.БазовыйТипЦен
		|ИЗ
		|	Справочник.ТипыЦен КАК ТипыЦен
		|ГДЕ
		|	ТипыЦен.Ссылка = &ТипЦен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки";
		
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		Запрос.УстановитьПараметр("ЦеноваяГруппа", Авторабота.ЦеноваяГруппа);
		
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураЦены = ПолучитьЦенуАвтоработы(ТипЦен.БазовыйТипЦен, Авторабота, Модель, Контрагент, ДоговорВзаиморасчетов, Цех, ВидРемонта, НаДату, Валюта, Курс);
			СтруктураЦены.Цена = СтруктураЦены.Цена + (СтруктураЦены.Цена*Выборка.ПроцентСкидкиНаценки/100);
		Иначе
			СтруктураЦены = ПолучитьЦенуАвтоработы(ТипЦен.БазовыйТипЦен, Авторабота, Модель, Контрагент, ДоговорВзаиморасчетов, Цех, ВидРемонта, НаДату, Валюта, Курс);
			СтруктураЦены.Цена = СтруктураЦены.Цена + (СтруктураЦены.Цена*ТипЦен.ПроцентСкидкиНаценки/100);
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(Модель) = Тип("СправочникСсылка.Модели") Тогда
			ВариантКомплектации = Модель;
		Иначе
			ВариантКомплектации = Модель;
			Модель              = Модель.Владелец;
		КонецЕсли;
		
		Если НаДату = Неопределено Тогда
			НаДату = ТекущаяДатаСеанса();
		КонецЕсли;
		
		// Получим таблицу родителей автоработы с индексом иерархии
		ТаблицаРодителейАвтоработы = Новый ТаблицаЗначений;
		ТаблицаРодителейАвтоработы.Колонки.Добавить("Авторабота", Новый ОписаниеТипов("СправочникСсылка.Автоработы"));
		ТаблицаРодителейАвтоработы.Колонки.Добавить("Модель",     Новый ОписаниеТипов("СправочникСсылка.Модели"));
		ТаблицаРодителейАвтоработы.Колонки.Добавить("Приоритет",  Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 0)));
		
		ТекущийРодитель  = Авторабота;
		ИндексАвтоработы = 0;
		ПустаяРабота     = Справочники.Автоработы.ПустаяСсылка();
		
		УстановитьПривилегированныйРежим(Истина);
		Пока ТекущийРодитель <> ПустаяРабота Цикл
			ТекущаяМодель = Модель; ИндексМодели = 0;
			
			Пока ТекущаяМодель <> Справочники.Модели.ПустаяСсылка() Цикл
				НоваяСтрока = ТаблицаРодителейАвтоработы.Добавить();
				НоваяСтрока.Авторабота = ТекущийРодитель;
				НоваяСтрока.Модель     = ТекущаяМодель;
				НоваяСтрока.Приоритет  = Формат(ИндексАвтоработы, "ЧН=0; ЧГ=0") + Формат(ИндексМодели, "ЧН=0; ЧГ=0");
				ТекущаяМодель          = ТекущаяМодель.Родитель;
				ИндексМодели           = ИндексМодели + 1;
			КонецЦикла;
			
			НоваяСтрока            = ТаблицаРодителейАвтоработы.Добавить();
			НоваяСтрока.Авторабота = ТекущийРодитель;
			НоваяСтрока.Модель     = Справочники.Модели.ПустаяСсылка();
			НоваяСтрока.Приоритет  = Формат(ИндексАвтоработы, "ЧН=0; ЧГ=0") + Формат(ИндексМодели, "ЧН=0; ЧГ=0");
			
			ТекущийРодитель  = ТекущийРодитель.Родитель;
			ИндексАвтоработы = ИндексАвтоработы + 1;
		КонецЦикла;
		
		ТекущаяМодель = Модель;
		ИндексМодели  = 0;
		Пока ТекущаяМодель <> Справочники.Модели.ПустаяСсылка() Цикл
			НоваяСтрока            = ТаблицаРодителейАвтоработы.Добавить();
			НоваяСтрока.Авторабота = ПустаяРабота;
			НоваяСтрока.Модель     = ТекущаяМодель;
			НоваяСтрока.Приоритет  = Формат(ИндексАвтоработы, "ЧН=0; ЧГ=0") + Формат(ИндексМодели, "ЧН=0; ЧГ=0");
			ТекущаяМодель          = ТекущаяМодель.Родитель;
			ИндексМодели           = ИндексМодели + 1;
		КонецЦикла;
		
		НоваяСтрока            = ТаблицаРодителейАвтоработы.Добавить();
		НоваяСтрока.Авторабота = ПустаяРабота;
		НоваяСтрока.Модель     = Справочники.Модели.ПустаяСсылка();
		НоваяСтрока.Приоритет  = Формат(ИндексАвтоработы, "ЧН=0; ЧГ=0") + Формат(ИндексМодели, "ЧН=0; ЧГ=0");
		
		// Получим таблицу родителей цехов с индексом иерархии
		ТаблицаРодителейЦеха  =Новый ТаблицаЗначений;
		ТаблицаРодителейЦеха.Колонки.Добавить("Цех",Новый ОписаниеТипов("СправочникСсылка.Цеха"));
		ТаблицаРодителейЦеха.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2)));
		
		ТекущийРодитель = Цех; ИндексЦеха = 0;
		
		Пока ТекущийРодитель <> Справочники.Цеха.ПустаяСсылка() Цикл
			НоваяСтрока           = ТаблицаРодителейЦеха.Добавить();
			НоваяСтрока.Цех       = ТекущийРодитель;
			НоваяСтрока.Приоритет = ИндексЦеха;
			ТекущийРодитель       = ТекущийРодитель.Родитель;
			ИндексЦеха            = ИндексЦеха + 1;
		КонецЦикла;
		
		НоваяСтрока           = ТаблицаРодителейЦеха.Добавить();
		НоваяСтрока.Цех       = Справочники.Цеха.ПустаяСсылка();
		НоваяСтрока.Приоритет = ИндексЦеха;
		
		// Поместим таблицу родителей в менеджер временных таблиц
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабРодителей.Авторабота КАК Авторабота,
		|	ТабРодителей.Модель КАК Модель,
		|	ТабРодителей.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ
		|	ТаблицаРодителейАвтоработы
		|ИЗ
		|	&ТабРодителей КАК ТабРодителей
		|;
		|
		|ВЫБРАТЬ
		|	ТабРодителей.Цех КАК Цех,
		|	ТабРодителей.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ
		|	ТаблицаРодителейЦеха
		|ИЗ
		|	&ТабЦехов КАК ТабРодителей
		|;
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныАвтоработСрезПоследних.Контрагент КАК Контрагент,
		|	ЦеныАвтоработСрезПоследних.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	ЦеныАвтоработСрезПоследних.ВидРемонта КАК ВидРемонта,
		|	ТаблицаРодителейЦеха.Приоритет КАК ПриоритетЦеха,
		|	ТаблицаРодителейАвтоработы.Приоритет КАК Приоритет,
		|	ЦеныАвтоработСрезПоследних.Нормочас КАК Нормочас,
		|	ЦеныАвтоработСрезПоследних.Валюта КАК Валюта,
		|	ЦеныАвтоработСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныАвторабот.СрезПоследних(
		|			&НаДату,
		|				ТипЦен = &ТипЦен И 
		|				(Авторабота, Модель) В (ВЫБРАТЬ Авторабота, Модель ИЗ ТаблицаРодителейАвтоработы) И 
		|				(Контрагент = &Контрагент ИЛИ 
		|				Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) И 
		|				(ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов ИЛИ 
		|				ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)) И 
		|				Цех В (ВЫБРАТЬ Цех ИЗ ТаблицаРодителейЦеха) И 
		|				(ВидРемонта = &ВидРемонта ИЛИ 
		|				ВидРемонта = ЗНАЧЕНИЕ(Справочник.ВидыРемонта.ПустаяСсылка))) КАК ЦеныАвтоработСрезПоследних
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ТаблицаРодителейАвтоработы КАК ТаблицаРодителейАвтоработы
		|ПО
		|	ЦеныАвтоработСрезПоследних.Авторабота = ТаблицаРодителейАвтоработы.Авторабота И 
		|	ЦеныАвтоработСрезПоследних.Модель = ТаблицаРодителейАвтоработы.Модель
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ТаблицаРодителейЦеха КАК ТаблицаРодителейЦеха
		|ПО
		|	ЦеныАвтоработСрезПоследних.Цех = ТаблицаРодителейЦеха.Цех
		|ГДЕ
		|	(ЦеныАвтоработСрезПоследних.Нормочас <> ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка) ИЛИ 
		|	ЦеныАвтоработСрезПоследних.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРодителейАвтоработы.Приоритет,
		|	ВЫБОР
		|		КОГДА ЦеныАвтоработСрезПоследних.Контрагент = &Контрагент
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЦеныАвтоработСрезПоследних.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	ТаблицаРодителейЦеха.Приоритет,
		|	ВЫБОР
		|		КОГДА ЦеныАвтоработСрезПоследних.ВидРемонта = &ВидРемонта
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|";
		Запрос.УстановитьПараметр("НаДату",                НаДату);
		Запрос.УстановитьПараметр("Контрагент",            Контрагент);
		Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
		Запрос.УстановитьПараметр("ВидРемонта",            ВидРемонта);
		Запрос.УстановитьПараметр("ТабРодителей",          ТаблицаРодителейАвтоработы);
		Запрос.УстановитьПараметр("ТабЦехов",              ТаблицаРодителейЦеха);
		Запрос.УстановитьПараметр("ТипЦен",                ТипЦен);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			
			СтруктураЦены.Вставить("ЦенаНайдена", Истина);
			
			Если ЗначениеЗаполнено(Выборка.Нормочас) Тогда
				СтруктураЦены.Вставить("Нормочас",     Выборка.Нормочас);
				СтруктураЦены.Вставить("НормаВремени", НормаВремениАвтоработы(Авторабота, ВариантКомплектации));
				
				ЦенаНормочаса = ПолучитьЦенуНормочаса(Выборка.Нормочас, НаДату, ТипЦен, Авторабота);
				
				Если Валюта <> Неопределено И Курс <> Неопределено Тогда
					СтруктураЦены.Вставить("Цена", РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ЦенаНормочаса.Цена, ЦенаНормочаса.Валюта, НаДату, Валюта, Курс));
				Иначе
					СтруктураЦены.Вставить("Цена", ЦенаНормочаса.Цена);
				КонецЕсли;
				СтруктураЦены.Вставить("ВидЦены", "Нормочас");
				
			ИначеЕсли ЗначениеЗаполнено(Выборка.Валюта) Тогда
				СтруктураЦены.Вставить("Нормочас",     Справочники.Нормочасы.Рубль);
				СтруктураЦены.Вставить("НормаВремени", НормаВремениАвтоработы(Авторабота, ВариантКомплектации));
				СтруктураЦены.Вставить("Валюта",       Выборка.Валюта);
				СтруктураЦены.Вставить("ВидЦены",      "Цена");
				
				Если Валюта = Неопределено ИЛИ Курс = Неопределено Тогда
					СтруктураЦены.Вставить("Цена", Выборка.Цена);
				Иначе
					СтруктураЦены.Вставить("Цена", РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.Цена, Выборка.Валюта, НаДату, Валюта, Курс));
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтруктураЦены.Вставить("Нормочас", НормочасПоУмолчанию);
			
			Если ЕстьРеквизит(НормочасПоУмолчанию, "Цена")Тогда
				
				СтруктураЦены.Вставить("Цена", НормочасПоУмолчанию.Цена);
				
			Иначе
				
				СтруктураЦены.Вставить("Цена", 1);
				
			КонецЕсли;
			
			ЦенаНормочаса = ПолучитьЦенуНормочаса(НормочасПоУмолчанию, НаДату, ТипЦен, Авторабота);
			
			Если Валюта <> Неопределено И Курс <> Неопределено Тогда
				
				СтруктураЦены.Вставить("Цена", РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ЦенаНормочаса.Цена,
					ЦенаНормочаса.Валюта,
					НаДату,
					Валюта,
					Курс
				));
				
			Иначе
				
				СтруктураЦены.Вставить("Цена", ЦенаНормочаса.Цена);
				
			КонецЕсли;
			
			Если НормочасПоУмолчанию = Справочники.Нормочасы.Рубль Тогда
				
				СтруктураЦены.Вставить("ВидЦены", "Цена");
				СтруктураЦены.Вставить("НормаВремени", НормаВремениАвтоработы(Авторабота, ВариантКомплектации));
				
			Иначе
				
				СтруктураЦены.Вставить("ВидЦены", "Нормочас");
				СтруктураЦены.Вставить("НормаВремени", НормаВремениАвтоработы(Авторабота, ВариантКомплектации));
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Округлим цену.
	Если ТипЦен.ОкруглятьВБольшуюСторону Тогда
		СтруктураЦены.Цена = Окр(СтруктураЦены.Цена + (0.5 / Pow(10, ТипЦен.Точность)), ТипЦен.Точность, 0);
	Иначе
		СтруктураЦены.Цена = Окр(СтруктураЦены.Цена, ТипЦен.Точность, 0);
	КонецЕсли;
	
	Возврат СтруктураЦены;
	
КонецФункции // ПолучитьЦенуАвтоработы()

// Функция возвращает цену нормочаса.
//
// Параметры:
//	Нормочас	- СправочникСсылка - Нормочасы
//	НаДату		- Дата - Момент времени.
//	ТипЦен		- СправочникСсылка - Тип цены
//	Авторабота	- СправочникСсылка  - Авторабота
//
// Возвращаемое значение:
//	Число - Цена нормочаса
//
Функция ПолучитьЦенуНормочаса(Нормочас, Знач НаДату = Неопределено, ТипЦен = Неопределено, Авторабота = Неопределено) Экспорт
	
	СтруктураЦены = Новый Структура;
	СтруктураЦены.Вставить("Цена",   0);
	СтруктураЦены.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	СтруктураЦены.Вставить("ЦенаБезСкидкиНаценки", 0);
	
	ПроцентСкидкиНаценки = ?(Авторабота <> Неопределено, ПолучитьПроцентСкидкиНаценки(ТипЦен, Авторабота), 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ЦеныНормочасов.Цена,
	               |	ЦеныНормочасов.Валюта
	               |ИЗ
	               |	РегистрСведений.ЦеныНормочасов КАК ЦеныНормочасов
	               |ГДЕ
	               |	ЦеныНормочасов.Нормочас = &Нормочас" + ?(ЗначениеЗаполнено(НаДату), " И 
	               |	ЦеныНормочасов.Период <= &НаДату", "") + "
	               |УПОРЯДОЧИТЬ ПО
	               |	ЦеныНормочасов.Период УБЫВ";
	
	Запрос.УстановитьПараметр("НаДату",   НаДату);
	Запрос.УстановитьПараметр("Нормочас", Нормочас);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураЦены.Вставить("Цена",                 Окр(Выборка.Цена*ПроцентСкидкиНаценки, 2));
		СтруктураЦены.Вставить("ЦенаБезСкидкиНаценки", Выборка.Цена);
		СтруктураЦены.Вставить("Валюта",               Выборка.Валюта);
	КонецЕсли;
	
	Возврат СтруктураЦены;
	
КонецФункции // ПолучитьЦенуНормочаса()

// Получение нормы времени автоработы согласно класса автомобиля
//
// Параметры:
//	Авторабота			- СправочникСсылка.Автоработы		- Авторабота
//	ВариантКомплектации	- СправочникСсылка.ВариантыКомплектации	- вариант комплектации автомобиля.
//
// Возвращаемое значение:
//	Число - Норма времени
//
Функция НормаВремениАвтоработы(Авторабота, ВариантКомплектации) Экспорт
	
	НормаВремени = 0;
	
	Если НЕ ЗначениеЗаполнено(Авторабота) ИЛИ Авторабота.ЭтоГруппа Тогда
		Возврат НормаВремени;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ВариантКомплектации) Тогда
		
		ТаблицаПриоритетов = Новый ТаблицаЗначений;
		ТаблицаПриоритетов.Колонки.Добавить("Модель",    Новый ОписаниеТипов("СправочникСсылка.Модели"));
		ТаблицаПриоритетов.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
		
		Если ТипЗнч(ВариантКомплектации) = Тип("СправочникСсылка.ВариантыКомплектации") Тогда
			Модель = ВариантКомплектации.Владелец;
			Запрос.УстановитьПараметр("Модель"              , Модель);
			Запрос.УстановитьПараметр("ВариантКомплектации" , ВариантКомплектации);
		Иначе
			Модель = ВариантКомплектации.Родитель;
			Запрос.УстановитьПараметр("Модель"              , ВариантКомплектации);
			Запрос.УстановитьПараметр("ВариантКомплектации" , Справочники.ВариантыКомплектации.ПустаяСсылка());
		КонецЕсли;
		
		Приоритет = 1;
		Пока ЗначениеЗаполнено(Модель) Цикл
			НоваяСтрока           = ТаблицаПриоритетов.Добавить();
			НоваяСтрока.Модель    = Модель;
			НоваяСтрока.Приоритет = Приоритет;
			Приоритет             = Приоритет + 1;
			Модель                = Модель.Родитель;
		КонецЦикла;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПриоритетов.Модель КАК Модель,
		|	ТаблицаПриоритетов.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ
		|	ТаблицаПриоритетов
		|ИЗ
		|	&ТаблицаПриоритетов КАК ТаблицаПриоритетов
		|;
		|
		|ВЫБРАТЬ
		|	0 КАК Приоритет,
		|	НормыВремени.ВремяВыполнения КАК ВремяВыполнения
		|ИЗ
		|	Справочник.Автоработы.НормыВремени КАК НормыВремени
		|ГДЕ
		|	НормыВремени.Ссылка = &Авторабота И 
		|	НормыВремени.Модель              = &Модель И 
		|	НормыВремени.ВариантКомплектации = &ВариантКомплектации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПриоритетов.Приоритет,
		|	НормыВремени.ВремяВыполнения
		|ИЗ
		|	Справочник.Автоработы.НормыВремени КАК НормыВремени
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ТаблицаПриоритетов КАК ТаблицаПриоритетов
		|ПО
		|	НормыВремени.Ссылка              = &Авторабота И 
		|	НормыВремени.Модель              = ТаблицаПриоритетов.Модель И 
		|	НормыВремени.ВариантКомплектации = ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка)
		|ГДЕ
		|	НормыВремени.Ссылка              = &Авторабота И 
		|	НормыВремени.ВариантКомплектации = ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Приоритет, "ЧГ=0") + ",
		|	Автоработы.ВремяВыполнения
		|ИЗ
		|	Справочник.Автоработы КАК Автоработы
		|ГДЕ
		|	Автоработы.Ссылка = &Авторабота
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		Запрос.УстановитьПараметр("ТаблицаПриоритетов",  ТаблицаПриоритетов);
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Автоработы.ВремяВыполнения КАК ВремяВыполнения
		|ИЗ
		|	Справочник.Автоработы КАК Автоработы
		|ГДЕ
		|	Автоработы.Ссылка = &Авторабота";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Авторабота", Авторабота);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НормаВремени = Выборка.ВремяВыполнения;
	КонецЕсли;
	
	Возврат НормаВремени;
КонецФункции // НормаВремениАвтоработы()

// Получение нормы времени по причине обращения согласно класса автомобиля
//
// Параметры:
//	ПричинаОбращения	- СправочникСсылка.ПричиныОбращений		- Авторабота
//	ВариантКомплектации	- СправочникСсылка.ВариантыКомплектации	- Вариант комплектации автомобиля.
//
// Возвращаемое значение:
//	Число - Норма времени
//
Функция НормаВремениПричиныОбращения(ПричинаОбращения, ВариантКомплектации) Экспорт
	
	НормаВремени = 0;
	
	Если НЕ ЗначениеЗаполнено(ПричинаОбращения) ИЛИ ПричинаОбращения.ЭтоГруппа Тогда
		Возврат НормаВремени;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ВариантКомплектации) Тогда
		
		ТаблицаПриоритетов = Новый ТаблицаЗначений;
		ТаблицаПриоритетов.Колонки.Добавить("Модель",    Новый ОписаниеТипов("СправочникСсылка.Модели"));
		ТаблицаПриоритетов.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
		
		Если ТипЗнч(ВариантКомплектации) = Тип("СправочникСсылка.ВариантыКомплектации") Тогда
			Модель = ВариантКомплектации.Владелец;
			Запрос.УстановитьПараметр("Модель"              , Модель);
			Запрос.УстановитьПараметр("ВариантКомплектации" , ВариантКомплектации);
		Иначе
			Модель = ВариантКомплектации.Родитель;
			Запрос.УстановитьПараметр("Модель"              , ВариантКомплектации);
			Запрос.УстановитьПараметр("ВариантКомплектации" , Справочники.ВариантыКомплектации.ПустаяСсылка());
		КонецЕсли;
		
		Приоритет = 1;
		Пока ЗначениеЗаполнено(Модель) Цикл
			НоваяСтрока           = ТаблицаПриоритетов.Добавить();
			НоваяСтрока.Модель    = Модель;
			НоваяСтрока.Приоритет = Приоритет;
			Приоритет             = Приоритет + 1;
			Модель                = Модель.Родитель;
		КонецЦикла;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПриоритетов.Модель КАК Модель,
		|	ТаблицаПриоритетов.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ
		|	ТаблицаПриоритетов
		|ИЗ
		|	&ТаблицаПриоритетов КАК ТаблицаПриоритетов
		|;
		|
		|ВЫБРАТЬ
		|	0 КАК Приоритет,
		|	НормыВремени.ВремяВыполнения КАК ВремяВыполнения
		|ИЗ
		|	Справочник.ПричиныОбращений.НормыВремени КАК НормыВремени
		|ГДЕ
		|	НормыВремени.Ссылка = &ПричинаОбращения И 
		|	НормыВремени.Модель              = &Модель И 
		|	НормыВремени.ВариантКомплектации = &ВариантКомплектации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПриоритетов.Приоритет,
		|	НормыВремени.ВремяВыполнения
		|ИЗ
		|	Справочник.ПричиныОбращений.НормыВремени КАК НормыВремени
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ТаблицаПриоритетов КАК ТаблицаПриоритетов
		|ПО
		|	НормыВремени.Ссылка              = &ПричинаОбращения И 
		|	НормыВремени.Модель              = ТаблицаПриоритетов.Модель И 
		|	НормыВремени.ВариантКомплектации = ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка)
		|ГДЕ
		|	НормыВремени.Ссылка              = &ПричинаОбращения И 
		|	НормыВремени.ВариантКомплектации = ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Приоритет, "ЧГ=0") + ",
		|	ПричиныОбращения.ВремяВыполнения
		|ИЗ
		|	Справочник.ПричиныОбращений КАК ПричиныОбращения
		|ГДЕ
		|	ПричиныОбращения.Ссылка = &ПричинаОбращения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		Запрос.УстановитьПараметр("ТаблицаПриоритетов",  ТаблицаПриоритетов);
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПричиныОбращения.ВремяВыполнения КАК ВремяВыполнения
		|ИЗ
		|	Справочник.ПричиныОбращений КАК ПричиныОбращения
		|ГДЕ
		|	ПричиныОбращения.Ссылка = &ПричинаОбращения";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПричинаОбращения", ПричинаОбращения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НормаВремени = Выборка.ВремяВыполнения;
	КонецЕсли;
	
	Возврат НормаВремени;
КонецФункции // НормаВремениПричиныОбращения()

// Получение цены автомобиля
//
// Параметры:
//	ТипЦен				- СправочникСсылка.ТипыЦен				- Тип цены
//	АвтомобильМодель	- СправочникСсылка.Модели				- Модель автомобиля
//	Комплектация		- СправочникСсылка.ВариантыКомплектации	- Вариант комплектации автомобиля.
//	НаМомент			- Дата									- Момент времени
//	Валюта				- СправочникСсылка						- Валюта
//	Курс				- Число									- Курс валюты
//
// Возвращаемое значение:
//	Число - Цена автомобиля
//
Функция ПолучитьЦенуАвтомобиля(ТипЦен,
                               АвтомобильМодель = Неопределено,
                               Знач Комплектация = Неопределено,
                               Знач НаМомент = Неопределено,
                               Знач Валюта = Неопределено,
                               Знач Курс = Неопределено) Экспорт
	
	Цена = 0;
	
	АвтомобильМодельДляПоискаЦен = АвтомобильМодель;
	
	Если ТипЗнч(АвтомобильМодель) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(АвтомобильМодель.Автомобиль) Тогда
		
			АвтомобильМодельДляПоискаЦен = АвтомобильМодель.Автомобиль;
			
		Иначе
			
			АвтомобильМодельДляПоискаЦен = АвтомобильМодель.Модель;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Комплектация = Неопределено Тогда
		
		Комплектация = Справочники.ВариантыКомплектации.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ТипЦен.Пустая() ИЛИ НЕ ЗначениеЗаполнено(АвтомобильМодель) Тогда
		
		Возврат Цена;
		
	КонецЕсли;
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("ТипЦен", ТипЦен);
	
	Если ЗначениеЗаполнено(АвтомобильМодельДляПоискаЦен) Тогда
		
		Фильтр.Вставить("Автомобиль", АвтомобильМодельДляПоискаЦен);
		
	Иначе
		
		Фильтр.Вставить("Автомобиль", Неопределено);
		
	КонецЕсли;
	
	
	Если ТипЗнч(Фильтр.Автомобиль) <> Тип("СправочникСсылка.Автомобили") Тогда
	
		Фильтр.Вставить("ВариантКомплектации", Комплектация);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаМомент) Тогда
		
		НаМомент = КонецДня(ТекущаяДатаСеанса());
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(НаМомент)) Тогда
		
		НаМомент = НаМомент.МоментВремени();
		
	КонецЕсли;
	
	Если ТипЦен.Рассчитывается Тогда
		
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			
			Если НЕ Комплектация.Пустая() Тогда
				
				Валюта = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Комплектация, Истина);
				
			Иначе
				
				Валюта = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, АвтомобильМодельДляПоискаЦен, Истина);
				
			КонецЕсли;
			
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, НаМомент);
			Курс           = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
			
		КонецЕсли;
		
		БазоваяЦена = ПолучитьЦенуАвтомобиля(
			ТипЦен.БазовыйТипЦен,
			АвтомобильМодельДляПоискаЦен,
			Комплектация,
			НаМомент,
			Валюта,
			Курс
		);
		
		Если БазоваяЦена = 0 Тогда
			
			Возврат Цена;
			
		КонецЕсли;
		
		// Добавим или вычтем НДС к/из базовой цене
		Если ТипЦен.ЦенаВключаетНДС <> ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС Тогда
			
			Если ТипЦен.ЦенаВключаетНДС Тогда
				
				БазоваяЦена = БазоваяЦена * (1 + (Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка / 100));
				
			Иначе
				
				БазоваяЦена = (100 * БазоваяЦена) / (100 + Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Цена = БазоваяЦена + (БазоваяЦена*ТипЦен.ПроцентСкидкиНаценки / 100);
		
	Иначе
		
		СтруктураЦен = РегистрыСведений.ЦеныАвтомобилей.ПолучитьПоследнее(НаМомент, Фильтр);
		Цена = СтруктураЦен.Цена;
		
		Если Цена = 0 Тогда

			ПолучатьНовуюЦену = Ложь;
			ОбъектыПоискаЦены = Новый Структура("Автомобиль,Модель,ВариантКомплектации");
			
			Если ТипЗнч(АвтомобильМодель) = Тип("СправочникСсылка.Автомобили") Тогда
				// Если запрашивается цена автомобиля, а она не задана - получим соответствующую цену на модель.
				ОбъектыПоискаЦены.Автомобиль = АвтомобильМодель.Модель;
                ОбъектыПоискаЦены.Модель = Справочники.Модели.ПустаяСсылка();
				ОбъектыПоискаЦены.ВариантКомплектации = АвтомобильМодель.ВариантКомплектации;
				ПолучатьНовуюЦену = Истина;

			ИначеЕсли ТипЗнч(АвтомобильМодель) = Тип("СправочникСсылка.Модели")
				И ЗначениеЗаполнено(Комплектация)Тогда
				// Если запрашивается цена модели автомобиля с комплектацией, а она не задана - получим соответствующую цену на модель.
				//@skip-check reading-attribute-from-database
				//@skip-check unknown-method-property
				ОбъектыПоискаЦены.Автомобиль = Неопределено;
                ОбъектыПоискаЦены.Модель = АвтомобильМодель;
				ОбъектыПоискаЦены.ВариантКомплектации = Справочники.ВариантыКомплектации.ПустаяСсылка();
                ПолучатьНовуюЦену = Истина;
				
			ИначеЕсли ТипЗнч(АвтомобильМодель) = Тип("Структура") Тогда

				Если ТипЗнч(АвтомобильМодель.Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
					// Если запрашивается цена автомобиля, а она не задана - получим соответствующую цену на модель.
					ОбъектыПоискаЦены.Автомобиль = АвтомобильМодель.Автомобиль.Модель;
	                ОбъектыПоискаЦены.Модель = Справочники.Модели.ПустаяСсылка();
					ОбъектыПоискаЦены.ВариантКомплектации = АвтомобильМодель.Автомобиль.ВариантКомплектации;
                    ПолучатьНовуюЦену = Истина;
					
				ИначеЕсли ТипЗнч(АвтомобильМодель.Автомобиль) = Тип("СправочникСсылка.Модели")
					И ЗначениеЗаполнено(АвтомобильМодель.ВариантКомплектации)Тогда
					// Если запрашивается цена модели автомобиля с комплектацией, а она не задана - получим соответствующую цену на модель.
					ОбъектыПоискаЦены.Автомобиль = АвтомобильМодель.Автомобиль;
	                ОбъектыПоискаЦены.Модель = Справочники.Модели.ПустаяСсылка();
					ОбъектыПоискаЦены.ВариантКомплектации = Справочники.ВариантыКомплектации.ПустаяСсылка();
				    ПолучатьНовуюЦену = Истина;
				КонецЕсли;
				
			КонецЕсли;
				
			Если ПолучатьНовуюЦену Тогда	
				Цена = ПолучитьЦенуАвтомобиля(
					ТипЦен,
					ОбъектыПоискаЦены,
					ОбъектыПоискаЦены.ВариантКомплектации,
					НаМомент,
					Валюта,
					Курс
				);
			КонецЕсли;
			
		ИначеЕсли Цена <> 0 Тогда
			
			Если НЕ Комплектация.Пустая() Тогда
				
				ВалютаТипаЦены = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Комплектация, Истина);
				
			Иначе
				
				ВалютаТипаЦены = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, АвтомобильМодельДляПоискаЦен, Истина);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Валюта) И Валюта<>ВалютаТипаЦены Тогда
				
				Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Цена,
					ВалютаТипаЦены,
					НаМомент,
					Валюта,
					?(Курс = 0, НаМомент, Курс)
				);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если Цена <> Неопределено Тогда
		
		Если ТипЦен.ОкруглятьВБольшуюСторону Тогда
			
			Цена = Окр(Цена + (0.5 / Pow(10, ТипЦен.Точность)), ТипЦен.Точность, 0);
				
		Иначе
			
			Цена = Окр(Цена, ТипЦен.Точность, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

// Получение цены опции
//
// Параметры:
//	ТипЦен			- СправочникСсылка.ТипыЦен				- Тип цены
//	Опция			- СправочникСсылка.Опции				- Опция
//	Модель			- СправочникСсылка.Модели				- Модель автомобиля
//	Комплектация	- СправочникСсылка.ВариантыКомплектации	- Вариант комплектации автомобиля.
//	НаМомент		- Дата									- Момент времени
//	Валюта			- СправочникСсылка						- Валюта
//	Курс			- Число									- Курс валюты
//
// Возвращаемое значение:
//	Число - Цена опции
//
Функция ПолучитьЦенуОпции(ТипЦен,
		Опция,
		Модель,
		Знач Комплектация = Неопределено,
		Знач НаМомент = Неопределено,
		Знач Валюта = Неопределено,
		Знач Курс = Неопределено) Экспорт
	
	Цена = 0;
	
	Если Комплектация = Неопределено Тогда
		Комплектация = Справочники.ВариантыКомплектации.ПустаяСсылка();
	КонецЕсли;
	
	// проверим всели параметры переданы правильно
	Если ТипЦен.Пустая() ИЛИ Модель.Пустая() ИЛИ Опция.Пустая() Тогда
		Возврат Цена;
	КонецЕсли;
	
	// настроим фильтр
	Фильтр = Новый Структура;
	Фильтр.Вставить("ТипЦен"             , ТипЦен);
	Фильтр.Вставить("Модель"             , Модель);
	Фильтр.Вставить("ВариантКомплектации", Комплектация);
	Фильтр.Вставить("Опция"              , Опция);
	
	// получм момент времени
	Если НЕ ЗначениеЗаполнено(НаМомент) Тогда
		НаМомент = КонецДня(ТекущаяДатаСеанса());
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(НаМомент)) Тогда
		НаМомент = НаМомент.МоментВремени();
	КонецЕсли;
	
	Если ТипЦен.Рассчитывается Тогда
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			Если НЕ Комплектация.Пустая() Тогда
				Валюта = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Комплектация, Истина);
			Иначе
				Валюта = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Модель, Истина);
			КонецЕсли;
			
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, НаМомент);
			Курс           = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		КонецЕсли;
		
		БазоваяЦена = ПолучитьЦенуОпции(ТипЦен.БазовыйТипЦен, Опция, Модель, Комплектация, НаМомент, Валюта, Курс);
		
		Если БазоваяЦена = 0 Тогда
			Возврат Цена;
		КонецЕсли;
		
		// Добавим или вычтем НДС к/из базовой цене
		Если ТипЦен.ЦенаВключаетНДС <> ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС Тогда
			Если ТипЦен.ЦенаВключаетНДС Тогда
				БазоваяЦена = БазоваяЦена*(1+(Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка/100));
			Иначе
				БазоваяЦена = (100*БазоваяЦена)/(100+Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка);
			КонецЕсли;
		КонецЕсли;
		
		// рассчитаем цену
		Цена = БазоваяЦена + (БазоваяЦена*ТипЦен.ПроцентСкидкиНаценки/100);
	Иначе
		СтруктураЦен = РегистрыСведений.ЦеныОпций.ПолучитьПоследнее(НаМомент, Фильтр);
		
		Цена = СтруктураЦен.Цена;
		Если Цена <> 0 Тогда
			Если НЕ Комплектация.Пустая() Тогда
				ВалютаТипаЦены = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Комплектация, Истина);
			Иначе
				ВалютаТипаЦены = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Модель, Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Валюта) И Валюта<>ВалютаТипаЦены Тогда
				Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Цена, ВалютаТипаЦены, НаМомент,
					Валюта, ?(Курс = 0, НаМомент, Курс));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Цена<>Неопределено Тогда
		// округлим цену
		Если ТипЦен.ОкруглятьВБольшуюСторону Тогда
			Цена = Окр(Цена + (0.5 / Pow(10, ТипЦен.Точность)), ТипЦен.Точность, 0);
		Иначе
			Цена = Окр(Цена, ТипЦен.Точность, 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

// Заполняет в таблице старые цены номенклатуры
//
// Параметры:
//	ТаблицаДанных - ТаблицаЗначений	- таблица, в которой передается тип цен, номенклатура,
//                                                харакетристика номенклатуры и единица измерения
//	Контекст - Структура - контект определения цен:
//   * НаМомент - Дата;
//   * Контрагент - СправочникСсылка.Контрагенты;
//   * ДоговорВзаиморасчетов - СправочникСсылка.ДоговорыВзаиморасчетов;
//   * ПодразделениеКомпании - СправочникСсылка.ПодразделенияКомпании.
//
Процедура ЗаполнитьСтарыеЦены(ТаблицаДанных, Контекст) Экспорт
	
	Если ТипЗнч(ТаблицаДанных) <> Тип("ТаблицаЗначений") ИЛИ ТаблицаДанных.Количество() = 0 Тогда

		Возврат;
		
	КонецЕсли;
	
	Если ТаблицаДанных.Колонки.Найти("Цена") = Неопределено Тогда
		
		ТаблицаДанных.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Справочники.ПодразделенияКомпании.ИерархияПодразделенийДляЗапросов(
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Контекст,
			"ПодразделениеКомпании",
			Справочники.ПодразделенияКомпании.ОсновноеПодразделение
		)
	);
	ЗагрузитьТаблицуТиповВЗапрос(Запрос, ТаблицаДанных);
	СобратьЦеныНоменклатурыВРазрезеПодразделений(Запрос, Контекст);
	СвернутьЦеныПоТипамЦен(Запрос, Контекст);
	ТипыЦен = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СопоставитьПрочитанныеЦеныИЭлементыТаблицы(Контекст, ТаблицаДанных, ТипыЦен);
	
КонецПроцедуры

// Функция получения данных о номенклатуре с источников данных прайс-листов, которые не загружены.
//
// Параметры:
//	Артикул_Номенклатура	- СправочникСсылка.Номенклатура, Строка	- Искомая номенклатура или артикул.
//	Производитель			- СправочникСсылка.Производители		- Производитель номенклатуры.
//
// Возвращаемое значение:
//  ТаблицаЗначений - прайс-лист.
//
Функция ПолучитьВнешниеПрайсЛисты(Артикул_Номенклатура, Производитель = Неопределено) Экспорт
	
	РезультатПоиска = Новый ТаблицаЗначений;
	РезультатПоиска.Колонки.Добавить("ПрайсЛист");
	РезультатПоиска.Колонки.Добавить("КлючСтрокиПоставщика");
	РезультатПоиска.Колонки.Добавить("СрокПоставки");
	РезультатПоиска.Колонки.Добавить("ЦенаВПрайсЛисте");
	РезультатПоиска.Колонки.Добавить("Валюта");
	РезультатПоиска.Колонки.Добавить("ТегПозиции");
	РезультатПоиска.Колонки.Добавить("Артикул");
	РезультатПоиска.Колонки.Добавить("Номенклатура");
	РезультатПоиска.Колонки.Добавить("Наименование");
	РезультатПоиска.Колонки.Добавить("Производитель");
	РезультатПоиска.Колонки.Добавить("ЦенаВключаетНДС");
	РезультатПоиска.Колонки.Добавить("Количество");
	
	НаименованиеНоменклатуры = "";
	
	Если ТипЗнч(Артикул_Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтрокаАртикул = Артикул_Номенклатура.Артикул;
		НаименованиеНоменклатуры = Артикул_Номенклатура.Наименование;
	Иначе
		СтрокаАртикул = Артикул_Номенклатура;
	КонецЕсли;
	
	АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(СтрокаАртикул);
	
	Если АртикулДляПоиска = СтрокаАртикул Тогда
		СтрокаАртикул = Неопределено;
	Иначе
		СтрокаАртикул = СтрЗаменить(СтрокаАртикул, "'", "");
	КонецЕсли;
	
	// сформируем список внешних прайс-листов для тех, у кого указаны цены
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.Ссылка КАК ПрайсЛист
	|ПОМЕСТИТЬ ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста
	|ИЗ
	|	Справочник.ПрайсЛистыКонтрагентов.СтруктураФайлаПрайсЛиста КАК ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста
	|ГДЕ
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.ИмяРеквизитаПрайсЛиста = &ИмяРеквизитаЦена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентов.Ссылка,
	|	ПрайсЛистыКонтрагентов.Производитель,
	|	ПрайсЛистыКонтрагентов.СтрокаПодключения,
	|	ПрайсЛистыКонтрагентов.ИмяТаблицы,
	|	ПрайсЛистыКонтрагентов.Валюта,
	|	ПрайсЛистыКонтрагентов.ЦенаВключаетНДС,
	|	ПрайсЛистыКонтрагентов.СрокПоставкиМинимальный,
	|	ПрайсЛистыКонтрагентов.СрокПоставкиМаксимальный
	|ИЗ
	|	Справочник.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.Ссылка В
	|			(ВЫБРАТЬ
	|				ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.ПрайсЛист
	|			ИЗ
	|				ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста КАК ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста)
	|	И ПрайсЛистыКонтрагентов.ФайлИсточникДанных = ЛОЖЬ
	|	И ПрайсЛистыКонтрагентов.ХранитьДанныеЛокально = ЛОЖЬ";
	Запрос.УстановитьПараметр("ИмяРеквизитаЦена", "Цена");
	
	СписокПрайсЛистовИсточниковДанных = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ПрайсЛист Из СписокПрайсЛистовИсточниковДанных Цикл
		
		Если ЗначениеЗаполнено(Производитель) И НЕ Производитель = ПрайсЛист.Производитель Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураФайлаПрайсЛиста = ПрайсЛист.Ссылка.СтруктураФайлаПрайсЛиста;
		
		// Поищем сначала КлючСтрокиПоставщика (так как там предполагается быть артикул для поиска??), затем Артикул.
		СтрокаПоляКлюч = СтруктураФайлаПрайсЛиста.Найти("КлючСтрокиПоставщика", "ИмяРеквизитаПрайсЛиста");
		Если СтрокаПоляКлюч <> Неопределено Тогда
			ИмяПоляКлюч = СтрокаПоляКлюч.ИмяПоляФайла;
		КонецЕсли;
		
		СтрокаПоляАртикул = СтруктураФайлаПрайсЛиста.Найти("Артикул", "ИмяРеквизитаПрайсЛиста");
		Если СтрокаПоляАртикул <> Неопределено Тогда
			ИмяПоляАртикул = СтрокаПоляАртикул.ИмяПоляФайла;
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(ИмяПоляКлюч) ИЛИ ЗначениеЗаполнено(ИмяПоляАртикул)) Тогда
			// Нет возможности искать
			Продолжить;
		КонецЕсли;
		
		Если ИмяПоляАртикул = ИмяПоляКлюч Тогда
			ИмяПоляАртикул = Неопределено;
		КонецЕсли;
		
		СтрокаПоляНаименование = СтруктураФайлаПрайсЛиста.Найти("Наименование", "ИмяРеквизитаПрайсЛиста");
		Если СтрокаПоляАртикул <> Неопределено Тогда
			ИмяПоляНаименование = СтрокаПоляАртикул.ИмяПоляФайла;
		КонецЕсли;
		
		// Поле цена
		СтрокаПоляЦена = СтруктураФайлаПрайсЛиста.Найти("Цена", "ИмяРеквизитаПрайсЛиста");
		ИмяПоляЦена = СтрокаПоляЦена.ИмяПоляФайла;
		
		Если НЕ ЗначениеЗаполнено(ПрайсЛист.Производитель) Тогда
			СтрокаПоляПроизводитель = СтруктураФайлаПрайсЛиста.Найти("Производитель", "ИмяРеквизитаПрайсЛиста");
			Если СтрокаПоляПроизводитель <> Неопределено И ЗначениеЗаполнено(СтрокаПоляПроизводитель.ИмяПоляФайла) Тогда
				ИмяПоляПроизводитель = СтрокаПоляПроизводитель.ИмяПоляФайла;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПоляТегПозиции = СтруктураФайлаПрайсЛиста.Найти("ТегПозиции", "ИмяРеквизитаПрайсЛиста");
		ИмяПоляТегПозиции = "";
		Если СтрокаПоляТегПозиции <> Неопределено Тогда
			ИмяПоляТегПозиции = СтрокаПоляТегПозиции.ИмяПоляФайла;
		КонецЕсли;
		
		СтрокаПоляСрокПоставки = СтруктураФайлаПрайсЛиста.Найти("КратностьПоставок", "ИмяРеквизитаПрайсЛиста");
		ИмяПоляСрокПоставки = "";
		Если СтрокаПоляСрокПоставки <> Неопределено Тогда
			ИмяПоляСрокПоставки = СтрокаПоляСрокПоставки.ИмяПоляФайла;
		КонецЕсли;
		
		СтрокаПоляКоличество = СтруктураФайлаПрайсЛиста.Найти("Количество", "ИмяРеквизитаПрайсЛиста");
		ИмяПоляКоличество = "";
		Если СтрокаПоляКоличество <> Неопределено Тогда
			ИмяПоляКоличество = СтрокаПоляКоличество.ИмяПоляФайла;
		КонецЕсли;
		
		Попытка
			Connection = Новый COMОбъект("ADODB.Connection");
			Коннект = Connection.Open(ПрайсЛист.СтрокаПодключения);
		Исключение
			продолжить;
		КонецПопытки;
		
		ИмяТаблицы = ПрайсЛист.ИмяТаблицы;
		
		Command   = Новый  COMОбъект("ADODB.Command");
		Recordset = Новый  COMОбъект("ADODB.Recordset");
		Recordset.ActiveConnection = Connection;
		
		ШаблонПоля    = "SELECT";
		ШаблонТаблица = СтрШаблон(" FROM %1", ИмяТаблицы);
		ШаблонУсловие = "";
		
		Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
			ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляКлюч);
			
			ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикулДляПоиска#", ИмяТаблицы, ИмяПоляКлюч);
			
			Если ЗначениеЗаполнено(СтрокаПоляАртикул) Тогда
				ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикул#", ИмяТаблицы, ИмяПоляКлюч);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
			ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляАртикул);
			
			ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикулДляПоиска#", ИмяТаблицы, ИмяПоляАртикул);
			
			Если ЗначениеЗаполнено(СтрокаПоляАртикул) Тогда
				ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикул#", ИмяТаблицы, ИмяПоляАртикул);
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ШаблонУсловие) Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонУсловие = " WHERE(" + Прав(ШаблонУсловие, СтрДлина(ШаблонУсловие) - 3);
		
		Если ЗначениеЗаполнено(ИмяПоляПроизводитель) Тогда
			ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляПроизводитель);
		КонецЕсли;
		
		ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляЦена);
		
		Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
			ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляКлюч);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ИмяПоляТегПозиции) Тогда
			ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляТегПозиции);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПоляСрокПоставки) Тогда
			ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляСрокПоставки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПоляКоличество) Тогда
			ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляКоличество);
		КонецЕсли;
		
		ШаблонПоля    = Лев(ШаблонПоля, СтрДлина(ШаблонПоля) - 1);
		ШаблонУсловие = ШаблонУсловие + ")";
		
		ТекстЗапроса = ШаблонПоля + ШаблонТаблица + ШаблонУсловие;
		
		ТекстУсловияОтборАртикул          = СтрШаблон(" = '%1'", СтрокаАртикул);
		ТекстУсловияОтборАртикулДляПоиска = СтрШаблон(" = '%1'", АртикулДляПоиска);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборАртикул#", ТекстУсловияОтборАртикул);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборАртикулДляПоиска#", ТекстУсловияОтборАртикулДляПоиска);
		
		Command.CommandText = ТекстЗапроса;
		Command.ActiveConnection = Connection;
		
		Попытка
			Recordset = Command.Execute();
		Исключение
			Попытка 
				ЧислоАртикул = Число(АртикулДляПоиска);
			Исключение
				Продолжить;
			КонецПопытки;
			
			ШаблонУсловие = "";
			
			Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
				ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикулДляПоиска#", ИмяТаблицы, ИмяПоляКлюч);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
				ШаблонУсловие = ШаблонУсловие + СтрШаблон(" OR (%1.[%2])#ОтборАртикулДляПоиска#", ИмяТаблицы, ИмяПоляАртикул);
			КонецЕсли;
			
			Если ПустаяСтрока(ШаблонУсловие) Тогда
				Продолжить;
			КонецЕсли;
			
			ШаблонУсловие = " WHERE(" + Прав(ШаблонУсловие, СтрДлина(ШаблонУсловие) - 3);
			
			Если ЗначениеЗаполнено(ИмяПоляПроизводитель) Тогда
				ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляПроизводитель);
			КонецЕсли;
			
			ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляЦена);
			
			Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
				ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляКлюч);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляТегПозиции) Тогда
				ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляТегПозиции);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляСрокПоставки) Тогда
				ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляСрокПоставки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляКоличество) Тогда
				ШаблонПоля = ШаблонПоля + СтрШаблон(" %1.[%2],", ИмяТаблицы, ИмяПоляКоличество);
			КонецЕсли;
			
			
			ШаблонУсловие = ШаблонУсловие + ")";
			ШаблонПоля    = Лев(ШаблонПоля, СтрДлина(ШаблонПоля) - 1);
			
			ТекстЗапроса = ШаблонПоля + ШаблонТаблица + ШаблонУсловие;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборАртикулДляПоиска#", ТекстУсловияОтборАртикулДляПоиска);
			
			Command.CommandText = ТекстЗапроса;
			Command.ActiveConnection = Connection;
			
			// Cнова попытаемся выполнить запрос, теперь с числовым артикулом.
			Попытка
				Recordset = Command.Execute();
			Исключение
				Продолжить;
			КонецПопытки;
		КонецПопытки;
		
		СоответствиеПроизводителей = Новый Соответствие;
		
		Пока НЕ Recordset.EOF Цикл
			СтруктураПолей = Новый Соответствие;
			Для Каждого Field Из Recordset.Fields Цикл
				СтруктураПолей.Вставить(Field.Name, Field.Value);
			КонецЦикла;
			
			RecordSet.MoveNext();
			
			ЦенаНоменклатурыСтрока = 0;
			КлючПоставщикаСтроки   = "";
			ТегПозицииСтроки       = "";
			ПроизводительСтроки    = Неопределено;
			СрокПоставкиСтроки     = Неопределено;
			НаименованиеНоменклатурыСтроки = "";
			АртикулСтроки                  = "";
			КоличествоНоменклатуры = 0;
			
			ЦенаНоменклатуры = СтруктураПолей[ИмяПоляЦена];
			Если ТипЗнч(ЦенаНоменклатуры) = Тип("Число") Тогда
				ЦенаНоменклатурыСтрока = СтруктураПолей[ИмяПоляЦена];
			Иначе
				// $20.1  $20,1  20,1 руб. 20.1 руб.
				ЗначениеПоля = СтрЗаменить(ЦенаНоменклатуры, " ", "");
				ЗначениеПоля = СтрЗаменить(ЦенаНоменклатуры, Символы.ПС, "");
				ЗначениеПоля = СтрЗаменить(ЦенаНоменклатуры, "'", "");
				
				Попытка
					ЦенаНоменклатуры = СтрЗаменить(ЦенаНоменклатуры, ".", ",");
					ЦенаНоменклатурыСтрока = Число(ЦенаНоменклатуры);
				Исключение
					НоваяЦена = ""; НоваяВалюта = "";
					
					Если Найти("0123456789", ЛЕВ(ЦенаНоменклатуры, 1)) = 0 Тогда
						// Сначала Валюта
						НачаласьЦена = Ложь;
						
						Для Сч = 1 По СтрДлина(ЦенаНоменклатуры) Цикл
							Если Найти(".,", Сред(ЗначениеПоля, Сч, 1)) > 0 Тогда
								Если НачаласьЦена Тогда
									Если Найти(НоваяЦена, ",") = 0 Тогда
										НоваяЦена = НоваяЦена + ",";
									КонецЕсли;
								Иначе
									Если Найти(НоваяВалюта, ".") = 0 Тогда
										НоваяВалюта = НоваяВалюта + ".";
									КонецЕсли;
								КонецЕсли;
								Продолжить;
							КонецЕсли;
							
							Если Найти("0123456789", Сред(ЦенаНоменклатуры, Сч, 1)) > 0 Тогда
								Если НЕ НачаласьЦена Тогда
									НачаласьЦена = Истина;
								КонецЕсли;
								НоваяЦена = НоваяЦена + Сред(ЦенаНоменклатуры, Сч, 1);
							Иначе
								Если НачаласьЦена Тогда
									Продолжить;
								КонецЕсли;
								НоваяВалюта = НоваяВалюта + Сред(ЦенаНоменклатуры, Сч, 1);
							КонецЕсли;
							
						КонецЦикла;
					Иначе
						// Сначала Цена
						НачаласьВалюта = Ложь;
						Для Сч = 1 По СтрДлина(ЦенаНоменклатуры) Цикл
							Если Найти(".,", Сред(ЦенаНоменклатуры, Сч, 1)) > 0 Тогда
								Если НачаласьВалюта Тогда
									Если Найти(НоваяВалюта, ".") = 0 Тогда
										НоваяВалюта = НоваяВалюта + ".";
									КонецЕсли;
								Иначе
									Если Найти(НоваяЦена, ",") = 0 Тогда
										НоваяЦена = НоваяЦена + ",";
									КонецЕсли;
								КонецЕсли;
								Продолжить;
							КонецЕсли;
							
							Если Найти("0123456789", Сред(ЦенаНоменклатуры, Сч, 1)) > 0 Тогда
								// Сливаем все цифры в НоваяЦена, если не началась Валюта
								Если НачаласьВалюта Тогда
									Продолжить;
								КонецЕсли;
								НоваяЦена = НоваяЦена + Сред(ЦенаНоменклатуры, Сч, 1);
							Иначе
								// Сливаем все буквы в НоваяВалюта
								Если Не НачаласьВалюта Тогда
									НачаласьВалюта = Истина;
								КонецЕсли;
								НоваяВалюта = НоваяВалюта + Сред(ЦенаНоменклатуры, Сч, 1);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
					Попытка
						ЦенаНоменклатурыСтрока = Число(НоваяЦена);
					Исключение
						ЦенаНоменклатурыСтрока = 0;
					КонецПопытки;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляКлюч) И СтруктураПолей.Получить(ИмяПоляКлюч) <> Неопределено Тогда
				КлючПоставщикаСтроки = СтруктураПолей[ИмяПоляКлюч];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляТегПозиции) И СтруктураПолей.Получить(ИмяПоляТегПозиции) <> Неопределено Тогда
				ТегПозицииСтроки = СтруктураПолей[ИмяПоляТегПозиции];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляСрокПоставки) И СтруктураПолей.Получить(ИмяПоляСрокПоставки) <> Неопределено Тогда
				СрокПоставкиСтроки = СтруктураПолей[ИмяПоляСрокПоставки];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляКоличество) И СтруктураПолей.Получить(ИмяПоляКоличество) <> Неопределено Тогда
				КоличествоНоменклатуры = СтруктураПолей[ИмяПоляКоличество];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляПроизводитель) И СтруктураПолей.Получить(ИмяПоляПроизводитель) <> Неопределено Тогда
				НайденныйПроизводитель = СоответствиеПроизводителей.Получить(СтруктураПолей[ИмяПоляПроизводитель]);
				Если НайденныйПроизводитель = Неопределено Тогда
					НайденныйПроизводитель = Справочники.Производители.НайтиПроизводителяПоНаименованию(СтруктураПолей[ИмяПоляПроизводитель]);
					СоответствиеПроизводителей.Вставить(СтруктураПолей[ИмяПоляПроизводитель], НайденныйПроизводитель);
				КонецЕсли;
				
				ПроизводительСтроки = НайденныйПроизводитель;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляНаименование) И СтруктураПолей.Получить(ИмяПоляНаименование) <> Неопределено Тогда
				НаименованиеНоменклатурыСтроки = СтруктураПолей[ИмяПоляНаименование];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПоляАртикул) И СтруктураПолей.Получить(ИмяПоляАртикул) <> Неопределено Тогда
				АртикулСтроки = СтруктураПолей[ИмяПоляАртикул];
			КонецЕсли;
			
			// Нашли цену номенклатуры
			Если ЗначениеЗаполнено(ЦенаНоменклатурыСтрока) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЦенаНоменклатурыСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = РезультатПоиска.Добавить();
		НоваяСтрока.ПрайсЛист            = ПрайсЛист.Ссылка;
		НоваяСтрока.Валюта               = ПрайсЛист.Валюта;
		НоваяСтрока.ЦенаВключаетНДС      = ПрайсЛист.ЦенаВключаетНДС;
		НоваяСтрока.ЦенаВПрайсЛисте      = ЦенаНоменклатурыСтрока;
		НоваяСтрока.КлючСтрокиПоставщика = КлючПоставщикаСтроки;
		НоваяСтрока.ТегПозиции           = ТегПозицииСтроки;
		НоваяСтрока.Артикул              = АртикулСтроки;
		НоваяСтрока.Номенклатура         = ?(ПустаяСтрока(НаименованиеНоменклатуры), Справочники.Номенклатура.ПустаяСсылка(), Артикул_Номенклатура);
		НоваяСтрока.Наименование         = ?(НЕ ЗначениеЗаполнено(НаименованиеНоменклатурыСтроки), НаименованиеНоменклатуры, НаименованиеНоменклатурыСтроки);
		НоваяСтрока.Производитель        = ?(НЕ ЗначениеЗаполнено(ПроизводительСтроки), ПрайсЛист.Производитель, ПроизводительСтроки);
		НоваяСтрока.СрокПоставки         = ?(СрокПоставкиСтроки = Неопределено, ПрайсЛистыКонтрагентовКлиентСервер.ПредставлениеСрокаПоставкиИнтервал(ПрайсЛист.СрокПоставкиМинимальный, ПрайсЛист.СрокПоставкиМаксимальный), СрокПоставкиСтроки);
		НоваяСтрока.Количество           = КоличествоНоменклатуры;
		
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции // ПолучитьВнешниеПрайсЛисты

// Устарела. Не используется
// Функция получения цены по прайс-листу контрагента
//
// Параметры:
//	ТипЦен					- СправочникСсылка.ТипыЦен					- Тип цены
//	Строка					- ДанныеФормыЭлементКоллекции				- Товар
//	НаМомент				- Дата										- Момент времени
//	Валюта					- СправочникСсылка.Валюты					- Валюта
//	Курс					- Число										- Курс валюты
//	ПодразделениеКомпании	- СправочникСсылка.ПодразделенияКомпании	- Подразделение компании.
//
// Возвращаемое значение:
//	Число - Цена товара из прайс-листа
//
Функция ПолучитьЦенуПрайсЛиста(ТипЦен,
		Строка,
		НаМомент = Неопределено,
		Валюта = Неопределено,
		Курс = 0,
		ПодразделениеКомпании = Неопределено) Экспорт
	
	// определим на какой момент получаем цену
	Если НаМомент = Неопределено Тогда
		НаМомент = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Закупка = Неопределено;
	Если ЕстьРеквизит(Строка, "НаправлениеПоставки") Тогда
		Закупка = Ложь;
		ВариантПоставки = Строка.НаправлениеПоставки;
	ИначеЕсли ЕстьРеквизит(Строка, "ПрайсЛист") Тогда
		ВариантПоставки = Строка.ПрайсЛист;
		Закупка = Истина;
	КонецЕсли;
	
	Если Закупка = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	// Если указан какой-то Контрагент или Прайс-лист контрагента, то поищем цены в прайс-листах
	ЦеныПоставщика = РегистрыСведений.ПрайсЛистыКонтрагентов.ПолучитьПрайсЛистыКонтрагентов(Строка.Номенклатура,, ВариантПоставки, НаМомент, ПодразделениеКомпании);
	
	// Поиск цен по внешним прайс-листам
	Если ЦеныПоставщика = Неопределено ИЛИ ЦеныПоставщика.Количество() = 0 Тогда
		Ценыпоставщика = ПолучитьВнешниеПрайсЛисты(Строка.Номенклатура);
	КонецЕсли;
	
	Если ЦеныПоставщика <> Неопределено Тогда
		Если ЗначениеЗаполнено(Строка.КлючСтрокиПоставщика) Тогда
			ВыбраннаяСтрока = ЦеныПоставщика.Найти(Строка.КлючСтрокиПоставщика, "КлючСтрокиПоставщика");
		КонецЕсли;
		
		Если ВыбраннаяСтрока = Неопределено И ЦеныПоставщика.Количество() > 0 Тогда
			ВыбраннаяСтрока = ЦеныПоставщика[0];
		КонецЕсли;
	
		Если ВыбраннаяСтрока = Неопределено Тогда
			// В прайс-листах не найдено или отказ выбора позиции
			Строка.КлючСтрокиПоставщика = "";
			СрокПоставки  = "";
			Строка.Цена = 0;
		Иначе
			// Что-то нашли и выбрали
			ВариантПоставки = ВыбраннаяСтрока.ПрайсЛист;
			Строка.КлючСтрокиПоставщика = ВыбраннаяСтрока.КлючСтрокиПоставщика;
			СрокПоставки = ВыбраннаяСтрока.СрокПоставки;
			// При необходимости выполним пересчет по валюте
			Если ЗначениеЗаполнено(Валюта) Тогда
				ВалютаЦены = Валюта;
				КурсЦены   = ?(Курс = 0, НаМомент, Курс);
			Иначе
				ВалютаЦены = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Строка.Номенклатура, Истина);
				КурсЦены   = НаМомент;
			КонецЕсли;
			
			ЦенаВВалюте = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыбраннаяСтрока.ЦенаВПрайсЛисте, ВыбраннаяСтрока.Валюта, НаМомент, ВалютаЦены, КурсЦены);
			
			// сформируем данные для получения цены
			ДанныеРасчетаЦены = Новый Массив;
			СтруктураДанных = Новый Структура;
			
			СтруктураДанных.Вставить("ПрайсЛист",     ВыбраннаяСтрока.ПрайсЛист);
			СтруктураДанных.Вставить("Номенклатура",  Строка.Номенклатура);
			СтруктураДанных.Вставить("Цена",          ЦенаВВалюте);
			СтруктураДанных.Вставить("ТегПозиции",    ВыбраннаяСтрока.ТегПозиции);
			СтруктураДанных.Вставить("Производитель", ВыбраннаяСтрока.Производитель);
			ДанныеРасчетаЦены.Добавить(СтруктураДанных);
			
			СтруктураЦены = РассчитатьЦеныПрайсЛиста(ДанныеРасчетаЦены, ТипЦен, ПодразделениеКомпании, Неопределено, НаМомент);
			
			Если Закупка Тогда
				Цена = СтруктураЦены[0].ЦенаПокупки;
			Иначе
				Цена = СтруктураЦены[0].ЦенаПродажи;
			КонецЕсли;
			
			Если ТипЦен.ЦенаВключаетНДС <> ВыбраннаяСтрока.ЦенаВключаетНДС Тогда
				Если НЕ Закупка И ЕстьРеквизит(Строка, "СтавкаНДС") Тогда
					СтавкаНДС = Строка.СтавкаНДС.Ставка;
				Иначе
					СтавкаНДС = Строка.Номенклатура.СтавкаНДС.Ставка;
				КонецЕсли;
				Если ТипЦен.ЦенаВключаетНДС Тогда
					// Добавим НДС
					Цена = Окр(Цена * (100 + СтавкаНДС) / 100, 2);
				Иначе
					// Уберем НДС
					Цена = Окр(Цена * 100 / (100 + СтавкаНДС), 2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Закупка Тогда
			Строка.ПрайсЛист = ВариантПоставки;
		Иначе
			Строка.Поставщик = ВариантПоставки;
			Строка.СрокПоставкиВСтроке = СрокПоставки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПроцентСкидкиНаценки(ТипЦен, Авторабота)
	
	Цена = 1;
	
	Если ТипЦен = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	// Проверим указан ли процент наценки для данной автоработы
	Если ТипЦен.Рассчитывается Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	1 КАК ПолеСортировки,
		|	ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен КАК БазовыйТипЦен
		|ИЗ
		|	Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК ТипыЦенПроцентыСкидкиНаценки
		|ГДЕ
		|	ТипыЦенПроцентыСкидкиНаценки.Ссылка = &ТипЦен
		|	И ТипыЦенПроцентыСкидкиНаценки.ЦеноваяГруппа = &ЦеноваяГруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки,
		|	2,
		|	ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен
		|ИЗ
		|	Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК ТипыЦенПроцентыСкидкиНаценки
		|ГДЕ
		|	ТипыЦенПроцентыСкидкиНаценки.Ссылка = &ТипЦен
		|	И ТипыЦенПроцентыСкидкиНаценки.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
		|	И ТипыЦенПроцентыСкидкиНаценки.БазовыйТипЦен <> ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыЦен.ПроцентСкидкиНаценки,
		|	3,
		|	ТипыЦен.БазовыйТипЦен
		|ИЗ
		|	Справочник.ТипыЦен КАК ТипыЦен
		|ГДЕ
		|	ТипыЦен.Ссылка = &ТипЦен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки";
		
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		Запрос.УстановитьПараметр("ЦеноваяГруппа", Авторабота.ЦеноваяГруппа);
		
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Цена = ПолучитьПроцентСкидкиНаценки(Выборка.БазовыйТипЦен, Авторабота);
			Цена = Цена + (Цена*Выборка.ПроцентСкидкиНаценки/100);
		Иначе
			Цена= ПолучитьПроцентСкидкиНаценки(ТипЦен.БазовыйТипЦен, Авторабота);
			Цена = Цена + (Цена*ТипЦен.ПроцентСкидкиНаценки/100);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

// Функция для расчета цены прайс-листов
//
// ТаблицаДанныхПрайсЛиста - ТаблицаЗначений - Используемые реквизиты: прайс-лист, номенклатура,
//                                             цена, производитель, тег позиции
// Покупка - Булево - Расчет цены покупки          - УДАЛИТЬ не используется возвращать всегда 3 цены - цена прайслиста, цена закупки, цена продажи.
// Продажа - Булево - Расчет цены продажи          - УДАЛИТЬ не используется возвращать всегда 3 цены - цена прайслиста, цена закупки, цена продажи.
// ТипЦен - СправочникСсылка.ТипыЦен - Тип цены
// ТипЦен - СправочникСсылка.ПодразделениеКомпании - Подразделение компании для расчета цен
// Дата - Дата - Дата, на которую производится расчет цен
//
Функция РассчитатьЦеныПрайсЛиста(ТаблицаДанныхПрайсЛиста, ТипЦен, ПодразделениеКомпании, Контрагент, Дата) Экспорт
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("ПрайсЛист",       Новый ОписаниеТипов("СправочникСсылка.ПрайсЛистыКонтрагентов"));
	ТаблицаРезультат.Колонки.Добавить("Номенклатура",    Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРезультат.Колонки.Добавить("ЦенаВПрайсЛисте", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("Скидка",          Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("ЦенаПокупки",     Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("Наценка",         Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("ОкруглятьДо",     Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("ЦенаПродажи",     Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекущаяСтрока Из ТаблицаДанныхПрайсЛиста Цикл
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		НоваяСтрока.ПрайсЛист    = ТекущаяСтрока.ПрайсЛист;
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		
		ДанныеРасчета = РассчитатьЦенуПокупкиИПродажи(
				ТекущаяСтрока.ПрайсЛист,
				ТипЦен,
				ПодразделениеКомпании,
				Контрагент,
				Дата,
				ТекущаяСтрока.Цена,
				ТекущаяСтрока.Номенклатура,
				ТекущаяСтрока.ТегПозиции,
				ТекущаяСтрока.Производитель
			);
			
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРасчета);
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Получает скидку, определяет ее размер и цену с ее учетом
// Параметры:
//  ПрайсЛист - Ссылка - Ссылка на прайс-лист по которому получается скидка;
//  Дата - Дата - Время, на которое получается скидка;
//  Цена - Число - Цена, к которой применяется скидка.
//
// Возвращаемое значение:
//  Структура - Структура данных по скидке. Содержит процент скидки. 
//  При существовании скидки и переданной цене возвращает также размер скидки и цену с ее учетом
Функция РассчитатьЦенуПокупки(ПрайсЛист, Дата, Цена, ТегПозиции, Производитель)
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",          Дата);
	Запрос.УстановитьПараметр("ПрайсЛист",     ПрайсЛист);
	Запрос.УстановитьПараметр("ТегПозиции",    ?(ТегПозиции = Неопределено, "", ТегПозиции));
	Запрос.УстановитьПараметр("Производитель", ?(Производитель = Неопределено, Справочники.Производители.ПустаяСсылка(), Производитель));
	
	Если ТегПозиции = Неопределено И Производитель = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкидкиБазовые.ПрайсЛист КАК ПрайсЛист,
		|	ЕСТЬNULL(СкидкиБазовые.Скидка, 0) КАК Скидка
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
		|			&Дата,
		|			ПрайсЛист = &ПрайсЛист
		|				И ТегПозиции = """"
		|				И Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК СкидкиБазовые
		|ГДЕ
		|	НЕ СкидкиБазовые.Отменена";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Скидки.ПрайсЛист, ЕСТЬNULL(СкидкиТегПозиции.ПрайсЛист, ЕСТЬNULL(СкидкиПроизводитель.ПрайсЛист, ЕСТЬNULL(СкидкиБазовые.ПрайсЛист, ЗНАЧЕНИЕ(Справочник.ПрайсЛистыКонтрагентов.ПустаяСсылка))))) КАК ПрайсЛист,
		|	МАКСИМУМ(ЕСТЬNULL(Скидки.Скидка, ЕСТЬNULL(СкидкиТегПозиции.Скидка, ЕСТЬNULL(СкидкиПроизводитель.Скидка, ЕСТЬNULL(СкидкиБазовые.Скидка, 0))))) КАК Скидка
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
		|			&Дата,
		|			ПрайсЛист = &ПрайсЛист
		|				И ТегПозиции = """"
		|				И Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК СкидкиБазовые
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
		|				&Дата,
		|				ПрайсЛист = &ПрайсЛист
		|					И ТегПозиции = &ТегПозиции
		|					И Производитель = &Производитель) КАК Скидки
		|		ПО (НЕ Скидки.Отменена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
		|				&Дата,
		|				ПрайсЛист = &ПрайсЛист
		|					И ТегПозиции = &ТегПозиции
		|					И Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК СкидкиТегПозиции
		|		ПО (НЕ СкидкиТегПозиции.Отменена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
		|				&Дата,
		|				ПрайсЛист  = &ПрайсЛист
		|					И ТегПозиции = """"
		|					И Производитель = &Производитель) КАК СкидкиПроизводитель
		|		ПО (НЕ СкидкиПроизводитель.Отменена)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Скидки.ПрайсЛист, ЕСТЬNULL(СкидкиТегПозиции.ПрайсЛист, ЕСТЬNULL(СкидкиПроизводитель.ПрайсЛист, ЕСТЬNULL(СкидкиБазовые.ПрайсЛист, ЗНАЧЕНИЕ(Справочник.ПрайсЛистыКонтрагентов.ПустаяСсылка)))))";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураДанных = Новый Структура("ЦенаВПрайсЛисте, Скидка, ЦенаПокупки", Цена, 0, Цена);
	
	Если Выборка.Следующий() Тогда
		СтруктураДанных.Скидка = Мин(100, Выборка.Скидка);
		СтруктураДанных.ЦенаПокупки = Окр(СтруктураДанных.ЦенаВПрайсЛисте * (100 - СтруктураДанных.Скидка) / 100, 2);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Получает скидку и наценку, расчитывает цены с их учетом
// Параметры:
//  ПрайсЛист - Ссылка - Ссылка на прайс-лист по которому получается наценка;
//  ТипЦен    - Ссылка - Тип цен на который назначается наценка;
//  ПодразделениеКомпании - Ссылка - Подразделение на которое назначается наценка;
//  Дата - Дата - Время, на которое получается наценка;
//  Цена - Число - Цена, к которой применяется наценка.
//
// Возвращаемое значение:
//  Структура - Структура данных по наценке. Содержит процент наценки. 
//  При существовании наценки и переданной цене возвращает также размер наценки и цену с ее учетом
Функция РассчитатьЦенуПокупкиИПродажи(ПрайсЛист, ТипЦен, ПодразделениеКомпании,Контрагент, Дата, Цена, Номенклатура, ТегПозиции, Производитель)
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Справочники.ПодразделенияКомпании.ИерархияПодразделенийДляЗапросов(ПодразделениеКомпании);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Наценки.АлгоритмРасчетаЦены.Алгоритм КАК АлгоритмРасчетаЦены,
	|	Наценки.Наценка КАК Наценка,
	|	Наценки.ОкруглятьДо КАК ОкруглятьДо,
	|	Наценки.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ втНаценки
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
	|			&Дата,
	|			ПрайсЛист = &ПрайсЛист
	|				И ТипЦен = &ТипЦен
	|				И ПодразделениеКомпании В
	|					(ВЫБРАТЬ
	|						РодителиПодразделенийКомпании.ПодразделениеКомпании
	|					ИЗ
	|						РодителиПодразделенийКомпании)
	|				И ТегПозиции = &ТегПозиции
	|				И Производитель = &Производитель) КАК Наценки
	|ГДЕ
	|	НЕ Наценки.Отменена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаценкиТегПозиции.АлгоритмРасчетаЦены.Алгоритм,
	|	НаценкиТегПозиции.Наценка,
	|	НаценкиТегПозиции.ОкруглятьДо,
	|	НаценкиТегПозиции.ПодразделениеКомпании,
	|	2
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
	|			&Дата,
	|			ПрайсЛист = &ПрайсЛист
	|				И ТипЦен = &ТипЦен
	|				И ПодразделениеКомпании В
	|					(ВЫБРАТЬ
	|						РодителиПодразделенийКомпании.ПодразделениеКомпании
	|					ИЗ
	|						РодителиПодразделенийКомпании)
	|				И ТегПозиции = &ТегПозиции
	|				И Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК НаценкиТегПозиции
	|ГДЕ
	|	НЕ НаценкиТегПозиции.Отменена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаценкиПроизводитель.АлгоритмРасчетаЦены.Алгоритм,
	|	НаценкиПроизводитель.Наценка,
	|	НаценкиПроизводитель.ОкруглятьДо,
	|	НаценкиПроизводитель.ПодразделениеКомпании,
	|	3
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
	|			&Дата,
	|			ПрайсЛист = &ПрайсЛист
	|				И ТипЦен = &ТипЦен
	|				И ПодразделениеКомпании В
	|					(ВЫБРАТЬ
	|						РодителиПодразделенийКомпании.ПодразделениеКомпании
	|					ИЗ
	|						РодителиПодразделенийКомпании)
	|				И ТегПозиции = """"
	|				И Производитель = &Производитель) КАК НаценкиПроизводитель
	|ГДЕ
	|	НЕ НаценкиПроизводитель.Отменена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаценкиБазовые.АлгоритмРасчетаЦены.Алгоритм,
	|	НаценкиБазовые.Наценка,
	|	НаценкиБазовые.ОкруглятьДо,
	|	НаценкиБазовые.ПодразделениеКомпании,
	|	4
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
	|			&Дата,
	|			ПрайсЛист = &ПрайсЛист
	|				И ТипЦен = &ТипЦен
	|				И ПодразделениеКомпании В
	|					(ВЫБРАТЬ
	|						РодителиПодразделенийКомпании.ПодразделениеКомпании
	|					ИЗ
	|						РодителиПодразделенийКомпании)
	|				И ТегПозиции = """"
	|				И Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК НаценкиБазовые
	|ГДЕ
	|	НЕ НаценкиБазовые.Отменена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Наценки.АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦены,
	|	Наценки.Наценка КАК Наценка,
	|	Наценки.ОкруглятьДо КАК ОкруглятьДо,
	|	Наценки.Порядок КАК Порядок,
	|	РодителиПодразделенийКомпании.Порядок КАК ПорядокПодразделений
	|ПОМЕСТИТЬ втНаценкиПодразделений
	|ИЗ
	|	втНаценки КАК Наценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РодителиПодразделенийКомпании КАК РодителиПодразделенийКомпании
	|		ПО Наценки.ПодразделениеКомпании = РодителиПодразделенийКомпании.ПодразделениеКомпании
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Наценки.АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦены,
	|	Наценки.Наценка КАК Наценка,
	|	Наценки.ОкруглятьДо КАК ОкруглятьДо
	|ИЗ
	|	втНаценкиПодразделений КАК Наценки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наценки.Порядок,
	|	Наценки.ПорядокПодразделений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Скидки.Скидка КАК Скидка,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ втСкидки
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
	|			&Дата,
	|			ПрайсЛист = &ПрайсЛист
	|				И ТегПозиции = &ТегПозиции
	|				И Производитель = &Производитель) КАК Скидки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкиТегПозиции.Скидка,
	|	2
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
	|			&Дата,
	|			ПрайсЛист = &ПрайсЛист
	|				И ТегПозиции = &ТегПозиции
	|				И Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК СкидкиТегПозиции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкиПроизводитель.Скидка,
	|	3
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
	|			&Дата,
	|			ПрайсЛист = &ПрайсЛист
	|				И ТегПозиции = """"
	|				И Производитель = &Производитель) КАК СкидкиПроизводитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкиБазовые.Скидка,
	|	4
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовСкидки.СрезПоследних(
	|			&Дата,
	|			ПрайсЛист = &ПрайсЛист
	|				И ТегПозиции = """"
	|				И Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК СкидкиБазовые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Скидки.Скидка КАК Скидка
	|ИЗ
	|	втСкидки КАК Скидки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Скидки.Порядок";
	
	Запрос.УстановитьПараметр("Дата",          Дата);
	Запрос.УстановитьПараметр("ПрайсЛист",     ПрайсЛист);
	Запрос.УстановитьПараметр("ТипЦен",        ТипЦен);
	Запрос.УстановитьПараметр("ТегПозиции",    ?(ТегПозиции = Неопределено, "", ТегПозиции));
	Запрос.УстановитьПараметр("Производитель",
		?(Производитель = Неопределено, Справочники.Производители.ПустаяСсылка(), Производитель)
	);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	//Выборка = Запрос.ВыполнитьПакет()().Выбрать();
	
	// Проверим, что цена передана как число
	Если ТипЗнч(Цена) <> Тип("Число") Тогда
		Цена = 0;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ЦенаВПрайсЛисте", Цена);
	СтруктураДанных.Вставить("Скидка"         , 0);
	СтруктураДанных.Вставить("ЦенаПокупки"    , Цена);
	СтруктураДанных.Вставить("Наценка"        , Неопределено);
	СтруктураДанных.Вставить("ОкруглятьДо"    , 1);
	СтруктураДанных.Вставить("ЦенаПродажи"    , 0);
	
	// посчитаем скидку:
	Выборка = РезультатыЗапроса[4].Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанных.Скидка = Выборка.Скидка;
		СтруктураДанных.ЦенаПокупки = Макс(0, Окр(СтруктураДанных.ЦенаВПрайсЛисте * (100 - СтруктураДанных.Скидка) / 100, 2, РежимОкругления.Окр15как10));
	Иначе
		СтруктураДанных.Скидка = 0;
		СтруктураДанных.ЦенаПокупки = СтруктураДанных.ЦенаВПрайсЛисте;
	КонецЕсли;
	
	Если ПрайсЛист.Владелец = Контрагент Тогда
		СтруктураДанных.ЦенаПродажи = СтруктураДанных.ЦенаПокупки;
		СтруктураДанных.Наценка = 0;
	Иначе
		// посчитаем наценку
		Выборка = РезультатыЗапроса[2].Выбрать();
		Если Выборка.Следующий() Тогда
			
			СтруктураДанных.ОкруглятьДо = ?(ЗначениеЗаполнено(Выборка.ОкруглятьДо), Выборка.ОкруглятьДо, 1);
			
			Если ЗначениеЗаполнено(Выборка.АлгоритмРасчетаЦены) Тогда
				
				СтруктураДанных.Наценка = Выборка.АлгоритмРасчетаЦены;
				
				ЦенаВПрайсЛисте = СтруктураДанных.ЦенаВПрайсЛисте;
				ЦенаПокупки = СтруктураДанных.ЦенаПокупки;
				Цена = СтруктураДанных.ЦенаПокупки;
				
				Если Найти(Выборка.АлгоритмРасчетаЦены, "ЦенаНоменклатуры") > 0 Тогда
					ЦенаНоменклатуры = ПолучитьЦену(ТипЦен, Номенклатура, Дата, , , , , , ПодразделениеКомпании);
					Если ЦенаНоменклатуры > 0 Тогда
						// Если тип цен включает НДС, то уберем его
						Если ТипЦен.ЦенаВключаетНДС Тогда
							// Что бы цены были как в прайс-листе уберем НДС
							ЦенаНоменклатуры = Окр(ЦенаНоменклатуры * 100 / (100 + Номенклатура.СтавкаНДС.Ставка), 2);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ВыражениеРасчетаЦены = Лев(СокрЛП(Выборка.АлгоритмРасчетаЦены), 989);
				
				Если Найти(ВыражениеРасчетаЦены, "#Процедура") > 0 Тогда
					Попытка
						Выполнить(СтрЗаменить(ВыражениеРасчетаЦены, "#Процедура", ""));
					Исключение
						Цена = 0;
					КонецПопытки;
				Иначе
					Попытка
						Выполнить(ВыражениеРасчетаЦены);
						Цена = Макс(0, Цена);
					Исключение
						Цена = 0;
					КонецПопытки;
				КонецЕсли;
				СтруктураДанных.ЦенаПродажи = Цена;
			Иначе
				СтруктураДанных.Наценка = Выборка.Наценка;
				СтруктураДанных.ЦенаПродажи = Макс(0, Окр(СтруктураДанных.ЦенаПокупки * (100 + СтруктураДанных.Наценка) / 100, 2));
			КонецЕсли;
		Иначе
			СтруктураДанных.ЦенаПродажи = СтруктураДанных.ЦенаПокупки;
			СтруктураДанных.Наценка = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Цены на входе БЕЗ НДС. Если тип цен включает НДС, то накинем по данным из номенклатуры
	Если ТипЦен.ЦенаВключаетНДС Тогда
		СтавкаНДСНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "СтавкаНДС.Ставка");
		// Проверим, что получили ставку
		Если СтавкаНДСНоменклатуры <> Неопределено Тогда
			СтруктураДанных.ЦенаВПрайсЛисте = Окр(СтруктураДанных.ЦенаВПрайсЛисте * (100 + СтавкаНДСНоменклатуры) / 100, 2);
			СтруктураДанных.ЦенаПокупки = Окр(СтруктураДанных.ЦенаПокупки * (100 + СтавкаНДСНоменклатуры) / 100, 2);
			СтруктураДанных.ЦенаПродажи = Окр(СтруктураДанных.ЦенаПродажи * (100 + СтавкаНДСНоменклатуры) / 100, 2);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ЗагрузитьТаблицуТиповВЗапрос(Запрос, ТаблицаТиповЦенНоменклатуры)
	
	ТекстЗагрузки =
	"ВЫБРАТЬ
	|	ТаблицаТиповЦенНоменклатуры.ТипЦен КАК ТипЦен,
	|	ТаблицаТиповЦенНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаТиповЦенНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТиповЦенНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТиповЦенНоменклатуры.АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦены,
	|	ТаблицаТиповЦенНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров КАК УчетЦенТолькоВРазрезеДопПараметров
	|ПОМЕСТИТЬ ТаблицаТиповЦенНоменклатуры
	|ИЗ
	|	&ТаблицаТиповЦенНоменклатуры КАК ТаблицаТиповЦенНоменклатуры
	|;
	|";
	
	Запрос.Текст = Запрос.Текст + ТекстЗагрузки;
	Запрос.УстановитьПараметр("ТаблицаТиповЦенНоменклатуры", ТаблицаТиповЦенНоменклатуры);
	
КонецПроцедуры

Процедура СобратьЦеныНоменклатурыВРазрезеПодразделений(Запрос, Контекст)
	
	Если ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "ДоговорВзаиморасчетов")) Тогда
		
		УсловиеЦены = "И (ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
			|ИЛИ ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка))";
		
	Иначе
		
		УсловиеЦены = "И ДоговорВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)";
		
	КонецЕсли;	
	
	ТекстПодзапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РодителиПодразделенийКомпании.Порядок + ВЫБОР
	|		КОГДА ЦеныСрезПоследних.Контрагент = &Контрагент И ЦеныСрезПоследних.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
	|			ТОГДА 0
	|		КОГДА ЦеныСрезПоследних.Контрагент = &Контрагент
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок,
	|	ЦеныСрезПоследних.ТипЦен КАК ТипЦен,
	|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЦеныСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ЦеныНоменклатурыПодразделений
	|ИЗ
	|	РодителиПодразделенийКомпании КАК РодителиПодразделенийКомпании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних(
	|			&Момент,
	|			ТипЦен В (ВЫБРАТЬ ТаблицаТиповЦенНоменклатуры.ТипЦен ИЗ ТаблицаТиповЦенНоменклатуры КАК ТаблицаТиповЦенНоменклатуры)
	|			И Номенклатура В (ВЫБРАТЬ ТаблицаТиповЦенНоменклатуры.Номенклатура ИЗ ТаблицаТиповЦенНоменклатуры КАК ТаблицаТиповЦенНоменклатуры)
	|			И Контрагент = &Контрагент
	|			%1) КАК ЦеныСрезПоследних
	|
	|		ПО РодителиПодразделенийКомпании.ПодразделениеКомпании = ЦеныСрезПоследних.ПодразделениеКомпании
	|;";
	Запрос.Текст = Запрос.Текст + СтрШаблон(ТекстПодзапроса, УсловиеЦены);
	
	Запрос.УстановитьПараметр(
		"Контрагент", 
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Контекст,
			"Контрагент",
			Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка()
		)
	);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Контекст,
			"ДоговорВзаиморасчетов",
			Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка()
		)
	);
	
КонецПроцедуры

Процедура СвернутьЦеныПоТипамЦен(Запрос, Контекст)
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТиповЦенНоменклатуры.ТипЦен КАК ТипЦен,
	|	ТаблицаТиповЦенНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаТиповЦенНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТиповЦенНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТиповЦенНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров КАК УчетЦенТолькоВРазрезеДопПараметров,
	|	ВЫБОР
	|		КОГДА ТаблицаТиповЦенНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров
	|				И ТаблицаТиповЦенНоменклатуры.АлгоритмРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.АлгоритмПолученияЦены.ПоХарактеристике)
	|				И ТаблицаТиповЦенНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаТиповЦенНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров
	|						И ТаблицаТиповЦенНоменклатуры.АлгоритмРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.АлгоритмПолученияЦены.ПоЕдиницеИзмерения)
	|						И ТаблицаТиповЦенНоменклатуры.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА 0
	|				ИНАЧЕ ЦеныНоменклатурыПодразделений.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ЦеныНоменклатурыПодразделений.Порядок + ВЫБОР
	|		КОГДА ТаблицаТиповЦенНоменклатуры.АлгоритмРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.АлгоритмПолученияЦены.ПоХарактеристике)
	|			ТОГДА ВЫБОР
	|					КОГДА ЦеныНоменклатурыПодразделений.ХарактеристикаНоменклатуры = ТаблицаТиповЦенНоменклатуры.ХарактеристикаНоменклатуры
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ТаблицаТиповЦенНоменклатуры.АлгоритмРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.АлгоритмПолученияЦены.ПоЕдиницеИзмерения)
	|			ТОГДА ВЫБОР
	|					КОГДА ЦеныНоменклатурыПодразделений.ЕдиницаИзмерения = ТаблицаТиповЦенНоменклатуры.ЕдиницаИзмерения
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	ТаблицаТиповЦенНоменклатуры КАК ТаблицаТиповЦенНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатурыПодразделений КАК ЦеныНоменклатурыПодразделений
	|		ПО ТаблицаТиповЦенНоменклатуры.ТипЦен = ЦеныНоменклатурыПодразделений.ТипЦен
	|			И ТаблицаТиповЦенНоменклатуры.Номенклатура = ЦеныНоменклатурыПодразделений.Номенклатура
	|			И (ВЫБОР
	|				КОГДА ТаблицаТиповЦенНоменклатуры.АлгоритмРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.АлгоритмПолученияЦены.ПоХарактеристике)
	|					ТОГДА ТаблицаТиповЦенНоменклатуры.ХарактеристикаНоменклатуры = ЦеныНоменклатурыПодразделений.ХарактеристикаНоменклатуры
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ТаблицаТиповЦенНоменклатуры.АлгоритмРасчетаЦены = ЗНАЧЕНИЕ(перечисление.АлгоритмПолученияЦены.ПоЕдиницеИзмерения)
	|					ТОГДА ТаблицаТиповЦенНоменклатуры.ЕдиницаИзмерения = ЦеныНоменклатурыПодразделений.ЕдиницаИзмерения
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	ТипЦен,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Момент", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "НаМомент"));
	
КонецПроцедуры

Процедура СопоставитьПрочитанныеЦеныИЭлементыТаблицы(Контекст, ТаблицаДанных, ТипыЦен)
	
	Пока ТипыЦен.Следующий() Цикл
		
		Товары = ТипыЦен.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Товары.Следующий() Цикл
			
			ХарактеристикиТоваров = Товары.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ХарактеристикиТоваров.Следующий() Цикл
				
				ЕдиницыИзмеренияТоваров = ХарактеристикиТоваров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ЕдиницыИзмеренияТоваров.Следующий() Цикл
					
					ЦеныТоваров = ЕдиницыИзмеренияТоваров.Выбрать();
					
					Если ЦеныТоваров.Следующий() Тогда
						
						УсловиеПоиска = Новый Структура();
						УсловиеПоиска.Вставить("ТипЦен", ТипыЦен.ТипЦен);
						УсловиеПоиска.Вставить("Номенклатура", Товары.Номенклатура);
						УсловиеПоиска.Вставить("ХарактеристикаНоменклатуры", ХарактеристикиТоваров.ХарактеристикаНоменклатуры);
						УсловиеПоиска.Вставить("ЕдиницаИзмерения", ЕдиницыИзмеренияТоваров.ЕдиницаИзмерения);
						СтрокиНоменклатуры = ТаблицаДанных.НайтиСтроки(УсловиеПоиска);
						
						Если СтрокиНоменклатуры.Количество() > 0 Тогда
							
							СтрокаНоменклатуры = СтрокиНоменклатуры[0];
							СтрокаНоменклатуры.Цена = ЦеныТоваров.Цена;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Устарела. не используется
Функция ПолучитьТекстЗапросаНачало(Запрос, ПодразделениеКомпании, ТегПозиции, Производитель)
	
	ТекстЗапросаНачало = "ВЫБОР";
	
	МассивПодразделений = Новый Массив;
	ТекущееПодразделение = ПодразделениеКомпании;
	ПеременнаяЦикла = 0;
	
	Пока Истина Цикл
		// Отбор подразделений
		МассивПодразделений.Добавить(ТекущееПодразделение);
		
		// Сортировка подразделений
		Если ТегПозиции = Неопределено И Производитель = Неопределено Тогда
			// Ничего не указано
			ТекстЗапросаНачало = ТекстЗапросаНачало + "
			|	КОГДА НаценкиБазовые.ПодразделениеКомпании = &Подразделение"+ПеременнаяЦикла+"
			|		ТОГДА "+ПеременнаяЦикла;
		Иначе
			// Будет полный набор и Тег позиции и Производитель
			ТекстЗапросаНачало = ТекстЗапросаНачало + "
			|	КОГДА ЕСТЬNULL(Наценки.ПодразделениеКомпании, ЕСТЬNULL(НаценкиТегПозиции.ПодразделениеКомпании, ЕСТЬNULL(НаценкиПроизводитель.ПодразделениеКомпании, НаценкиБазовые.ПодразделениеКомпании))) = &Подразделение"+ПеременнаяЦикла+"
			|		ТОГДА "+ПеременнаяЦикла;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Подразделение"+ПеременнаяЦикла, ТекущееПодразделение);
		
		// Получаем родителя подразделения
		ТекущееПодразделение = ТекущееПодразделение.Родитель;
		Если НЕ ЗначениеЗаполнено(ТекущееПодразделение) Тогда
			// Добавим пустое подразделение
			ПеременнаяЦикла = ПеременнаяЦикла + 1;
			ТекущееПодразделение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
			МассивПодразделений.Добавить(ТекущееПодразделение);
			
			Если ТегПозиции = Неопределено И Производитель = Неопределено Тогда
				// Ничего не указано
				ТекстЗапросаНачало = ТекстЗапросаНачало + "
				|	КОГДА НаценкиБазовые.ПодразделениеКомпании = &Подразделение"+ПеременнаяЦикла+"
				|		ТОГДА "+ПеременнаяЦикла;
			Иначе
				// Будет полный набор и Тег позиции и Производитель
				ТекстЗапросаНачало = ТекстЗапросаНачало + "
				|	КОГДА ЕСТЬNULL(Наценки.ПодразделениеКомпании, ЕСТЬNULL(НаценкиТегПозиции.ПодразделениеКомпании, ЕСТЬNULL(НаценкиПроизводитель.ПодразделениеКомпании, НаценкиБазовые.ПодразделениеКомпании))) = &Подразделение"+ПеременнаяЦикла+"
				|		ТОГДА "+ПеременнаяЦикла;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Подразделение"+ПеременнаяЦикла,ТекущееПодразделение);
			
			Прервать;
		КонецЕсли;
		
		ПеременнаяЦикла = ПеременнаяЦикла + 1;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	
	ТекстЗапросаНачало = ТекстЗапросаНачало + " ИНАЧЕ 999 КОНЕЦ";
	
	Возврат ТекстЗапросаНачало;
	
КонецФункции

// Устарела. Не используется
// Получает скидку и наценку, расчитывает цены с их учетом
// Параметры:
//  ПрайсЛист - Ссылка - Ссылка на прайс-лист по которому получается наценка;
//  ТипЦен    - Ссылка - Тип цен на который назначается наценка;
//  ПодразделениеКомпании - Ссылка - Подразделение на которое назначается наценка;
//  Дата - Дата - Время, на которое получается наценка;
//  ЦенаПокупки - Число - Цена, к которой применяется наценка с учетом НДС, как в прайс-листе.
//
// Возвращаемое значение:
//  Структура - Структура данных по наценке. Содержит процент наценки. 
//  При существовании наценки и переданной цене возвращает также размер наценки и цену с ее учетом
Функция РассчитатьЦенуПродажи(ПрайсЛист, ТипЦен, ПодразделениеКомпании, Дата, ЦенаПокупки, Номенклатура, ТегПозиции, Производитель)
	
	СтруктураДанных = Новый Структура("Наценка, ОкруглятьДо, ЦенаПродажи", Неопределено, 1, 0);
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаНачало = ПолучитьТекстЗапросаНачало(Запрос, ПодразделениеКомпании, ТегПозиции, Производитель);
	
	Если ТегПозиции = Неопределено И Производитель = Неопределено Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НаценкиБазовые.АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦены,
		|	НаценкиБазовые.Наценка КАК Наценка,
		|	НаценкиБазовые.ОкруглятьДо КАК ОкруглятьДо,
		|" +  ТекстЗапросаНачало + "
		|	КАК Порядок
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
		|			&Дата,
		|			ПрайсЛист = &ПрайсЛист
		|				И ТипЦен = &ТипЦен
		|				И ПодразделениеКомпании В (&МассивПодразделений)
		|				И ТегПозиции = """"
		|				И Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК НаценкиБазовые
		|ГДЕ НЕ НаценкиБазовые.Отменена";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(Наценки.АлгоритмРасчетаЦены.Алгоритм, ЕСТЬNULL(НаценкиТегПозиции.АлгоритмРасчетаЦены.Алгоритм, ЕСТЬNULL(НаценкиПроизводитель.АлгоритмРасчетаЦены.Алгоритм, НаценкиБазовые.АлгоритмРасчетаЦены.Алгоритм))) КАК АлгоритмРасчетаЦены,
		|	ЕСТЬNULL(Наценки.Наценка, ЕСТЬNULL(НаценкиТегПозиции.Наценка, ЕСТЬNULL(НаценкиПроизводитель.Наценка, НаценкиБазовые.Наценка))) КАК Наценка,
		|	ЕСТЬNULL(Наценки.ОкруглятьДо, ЕСТЬNULL(НаценкиТегПозиции.ОкруглятьДо, ЕСТЬNULL(НаценкиПроизводитель.ОкруглятьДо, НаценкиБазовые.ОкруглятьДо))) КАК ОкруглятьДо,
		|" + ТекстЗапросаНачало + "
		|	КАК Порядок
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
		|			&Дата,
		|			ПрайсЛист = &ПрайсЛист
		|				И ТипЦен = &ТипЦен
		|				И ПодразделениеКомпании В (&МассивПодразделений)
		|				И ТегПозиции = """"
		|				И Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК НаценкиБазовые
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
		|			&Дата,
		|			ПрайсЛист = &ПрайсЛист
		|				И ТипЦен = &ТипЦен
		|				И ПодразделениеКомпании В (&МассивПодразделений)
		|				И ТегПозиции = &ТегПозиции
		|				И Производитель = &Производитель) КАК Наценки
		|		ПО (НЕ Наценки.Отменена)
		|			И Наценки.ПодразделениеКомпании = НаценкиБазовые.ПодразделениеКомпании
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
		|			&Дата,
		|			ПрайсЛист = &ПрайсЛист
		|				И ТипЦен = &ТипЦен
		|				И ПодразделениеКомпании В (&МассивПодразделений)
		|				И ТегПозиции = &ТегПозиции
		|				И Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК НаценкиТегПозиции
		|		ПО (НЕ НаценкиТегПозиции.Отменена)
		|			И НаценкиТегПозиции.ПодразделениеКомпании = НаценкиБазовые.ПодразделениеКомпании
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
		|			&Дата,
		|			ПрайсЛист = &ПрайсЛист
		|				И ТипЦен = &ТипЦен
		|				И ПодразделениеКомпании В (&МассивПодразделений)
		|				И ТегПозиции = """"
		|				И Производитель = &Производитель) КАК НаценкиПроизводитель
		|		ПО (НЕ НаценкиПроизводитель.Отменена)
		|			И НаценкиПроизводитель.ПодразделениеКомпании = НаценкиБазовые.ПодразделениеКомпании
		|ГДЕ НЕ НаценкиБазовые.Отменена";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " И " + ТекстЗапросаНачало + " < 999
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
	Запрос.УстановитьПараметр("Дата",          Дата);
	Запрос.УстановитьПараметр("ПрайсЛист",     ПрайсЛист);
	Запрос.УстановитьПараметр("ТипЦен",        ТипЦен);
	Запрос.УстановитьПараметр("ТегПозиции",    ?(ТегПозиции = Неопределено, "", ТегПозиции));
	Запрос.УстановитьПараметр("Производитель", ?(Производитель = Неопределено, Справочники.Производители.ПустаяСсылка(), Производитель));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.Наценка <> Null Тогда
		
		СтруктураДанных.ОкруглятьДо = ?(ЗначениеЗаполнено(Выборка.ОкруглятьДо), Выборка.ОкруглятьДо, 1);
		
		ЦенаВПрайсЛисте = 0;
		Цена = ЦенаПокупки;
		
		Если ЗначениеЗаполнено(Выборка.АлгоритмРасчетаЦены) Тогда
			СтруктураДанных.Наценка = Выборка.АлгоритмРасчетаЦены;
			Если Найти(Выборка.АлгоритмРасчетаЦены, "ЦенаНоменклатуры") > 0 Тогда
				ЦенаНоменклатуры = ПолучитьЦену(ТипЦен, Номенклатура, Дата,,,,,, ПодразделениеКомпании);
				Если ЦенаНоменклатуры > 0 И ПрайсЛист.ЦенаВключаетНДС <> ТипЦен.ЦенаВключаетНДС Тогда
					Если ТипЦен.ЦенаВключаетНДС Тогда
						// Что бы цены были как в прайс-листе уберем НДС
						ЦенаНоменклатуры = Окр(ЦенаНоменклатуры * 100 / (100 + Номенклатура.СтавкаНДС.Ставка), 2);
					Иначе
						// Что бы цены были как в прайс-листе добавим НДС
						ЦенаНоменклатуры = Окр(ЦенаНоменклатуры * (100 + Номенклатура.СтавкаНДС.Ставка) / 100, 2);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ВыражениеРасчетаЦены = Лев(СокрЛП(Выборка.АлгоритмРасчетаЦены), 989);
			
			Если Найти(ВыражениеРасчетаЦены, "#Процедура") > 0 Тогда
				Попытка
					Выполнить(СтрЗаменить(ВыражениеРасчетаЦены, "#Процедура", ""));
				Исключение
					Цена = 0;
				КонецПопытки;
			Иначе
				Попытка
					Выполнить(ВыражениеРасчетаЦены);
					Цена = Макс(0, Цена);
				Исключение
					Цена = 0;
				КонецПопытки;
			КонецЕсли;
		Иначе
			СтруктураДанных.Наценка = Выборка.Наценка;
			Цена = Макс(0, Окр(ЦенаПокупки * (100 + СтруктураДанных.Наценка) / 100, 2));
		КонецЕсли;
		
		ДельтаОкругления = Цена / СтруктураДанных.ОкруглятьДо;
		Если ДельтаОкругления > Цел(ДельтаОкругления) Тогда // Требуется округлить
			СтруктураДанных.ЦенаПродажи = (Цел(ДельтаОкругления) + 1) * СтруктураДанных.ОкруглятьДо;
		Иначе
			СтруктураДанных.ЦенаПродажи = Цена;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти


