
#Область ПрограммныйИнтерфейс

// Форматирует строку в соответствии с заданным шаблоном.
// Возможные значения тегов в шаблоне:
// - <span style='Имя свойства: Имя элемента стиля'>Строка</span> - оформляет текст описанными
//      в атрибуте style элементами стиля.
// - <b> Строка </b> - выделяет строку элементом стиля ВажнаяНадписьШрифт,
//      который соответствует полужирному шрифту.
// - <a href='Ссылка'>Строка</a> - добавляет гиперссылку.
// - <img src='Календарь'> - добавляет картинку из библиотеки картинок.
// Атрибут style применяется для оформления текста. Атрибут может быть использован для тегов span и a.
// Вначале следует имя стилевого свойства, затем через двоеточие имя элемента стиля.
// Стилевые свойства:
//  - color - Определяет цвет текста. Например, color: ГиперссылкаЦвет;
//  - background-color - Определяет цвет фона у текста. Например, background-color: ИтогиФонГруппы;
//  - font - Определяет шрифт текста.Например, font: ОсновнойЭлементСписка.
// Стилевые свойства разделяются точкой с запятой. Например, style='color: ГиперссылкаЦвет; font: ОсновнойЭлементСписка'
// Вложенные теги не поддерживаются.
//
// Параметры:
//  ШаблонСтроки - Строка - строка, содержащая теги форматирования.
//  Параметр<n>  - Строка - значение подставляемого параметра.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока - преобразованная строка.
//
// Пример:
//  1. СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru='
//       <span style=""color: ЗаблокированныйРеквизитЦвет; font: ВажнаяНадписьШрифт"">Минимальная</span> версия программы <b>1.1</b>. 
//       <a href = ""Обновление"">Обновите</a> программу.'"));
//  2. СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru='Режим: <img src=""РедактироватьВДиалоге"">
//       <a style=""color: ИзмененноеЗначениеРеквизитаЦвет; background-color: ИзмененноеЗначениеРеквизитаФон""
//       href=""e1cib/command/Обработка.Редактор"">Редактирование</a>'"));
//  3. СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru='Текущая дата <img src=""Календарь"">
//       <span style=""font:ВажнаяНадписьШрифт"">%1</span>'"), ТекущаяДатаСеанса());
//
Функция ФорматированнаяСтрока(Знач ШаблонСтроки, Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено,
	Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено) Экспорт
	
	ЭлементыСтиля = ЭлементыСтиля();
	Возврат СформироватьФорматированнуюСтроку(ШаблонСтроки, ЭлементыСтиля, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5);
	
КонецФункции

// Преобразует исходную строку в транслит.
// Может использоваться для отправки SMS-сообщений латиницей или для сохранения
// файлов и папок, чтобы обеспечить возможность их переноса между разными операционными системами.
// Обратное преобразование из латинских символов не предусмотрено.
//
// Параметры:
//  Значение - Строка - произвольная строка.
//
// Возвращаемое значение:
//  Строка - строка, в которой кириллица заменена на транслит.
//
Функция СтрокаЛатиницей(Знач Значение) Экспорт
	
	Возврат СтроковыеФункции.СтрокаЛатиницей(Значение);
	
КонецФункции

// Ссылка для подстановки в форматированную строку для открытия обработки резервного копирования ИБ.
//
// Возвращаемое значение:
//   Строка - Навигационная ссылка.
//
Функция НавигационнаяСсылкаОбработкиРезервногоКопирования() Экспорт
	
	Возврат "e1cib/app/Обработка.РезервноеКопированиеИБ";
	
КонецФункции

// Обновляет значение параметра работы программы, если изменилось.
// Перед вызовом требуется установить привилегированный режим.
//
// Параметры:
//  ИмяПараметра   - Строка - не более 128 символов. Например,
//                   "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
//  Значение       - Произвольный - значение, которое можно поместить в хранилище значения.
//
//  ЕстьИзменения  - Булево - (возвращаемое значение). Устанавливается Истина,
//                   если старое и новое значения параметра не совпадают.
//
//  СтароеЗначение - Произвольный - (возвращаемое значение) до обновления.
//
Процедура ОбновитьПараметрРаботыПрограммы(ИмяПараметра, Значение,
	ЕстьИзменения = Ложь, СтароеЗначение = Неопределено) Экспорт
	
	РегистрыСведений.ПараметрыРаботыПрограммы.ОбновитьПараметрРаботыПрограммы(ИмяПараметра,
		Значение, ЕстьИзменения, СтароеЗначение);
	
КонецПроцедуры

// Устанавливает значение параметра работы программы.
// Перед вызовом требуется установить привилегированный режим.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
//  Значение     - Произвольный - значение, которое можно поместить в хранилище значения.
//
Процедура УстановитьПараметрРаботыПрограммы(ИмяПараметра, Значение) Экспорт
	
	РегистрыСведений.ПараметрыРаботыПрограммы.УстановитьПараметрРаботыПрограммы(ИмяПараметра, Значение);
	
КонецПроцедуры

// Возвращает значение параметра работы программы.
//
// В старом сеансе (когда версия программы обновлена динамически),
// если параметр не найден, вызывается исключение с требованием перезапуска,
// если параметр найден, значение возвращается без учета версии.
//
// В разделенном режиме модели сервиса, если параметр не найден или
// версия параметра не равна версии конфигурации вызывается исключение,
// так как обновление неразделенных данных невозможно.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
// Возвращаемое значение:
//  Произвольный - возвращается Неопределено, когда параметр не найден или
//                 когда в новом сеансе версия параметра не равна версии конфигурации.
//
Функция ПараметрРаботыПрограммы(ИмяПараметра) Экспорт
	
	Возврат РегистрыСведений.ПараметрыРаботыПрограммы.ПараметрРаботыПрограммы(ИмяПараметра);
	
КонецФункции

// Проверяет, что в текущем сеансе доступна последняя версия программы,
// в противном случае, вызывает исключение с требованием перезапустить сеанс.
//
// В старых сеансах нельзя обновлять параметры работы программы, а также
// нельзя выполнять изменение некоторых данных, чтобы не перезаписать
// новую версию данных (полученную с помощью новой версии программы)
// старой версией данных (полученной с помощью старой версии программы).
//
Процедура ПроверитьДинамическоеОбновлениеВерсииПрограммы() Экспорт
	
	Если ВерсияПрограммыОбновленаДинамически() Тогда
		ПотребоватьПерезапускСеансаПоПричинеДинамическогоОбновленияВерсииПрограммы();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что в текущем сеансе есть динамическое изменение конфигурации базы и
// при этом нет режима обновления информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если версия программы обновлена.
//
Функция ВерсияПрограммыОбновленаДинамически() Экспорт
	
	Если Не КонфигурацияБазыДанныхИзмененаДинамически() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если конфигурация базы данных изменена динамически после запуска
	// обновления информационной базы, но до его завершения, тогда нужно
	// продолжать обновление несмотря на изменение.
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Параметры работы программы только неразделенные, поэтому для них обновление завершено,
		// если завершено обновление неразделенных данных.
		Возврат Не ОбновлениеИнформационнойБазыСлужебный.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы();
	КонецЕсли;
	
	Возврат Не ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы();
	
КонецФункции

// Вызывает исключение с требованием перезапустить сеанс из-за обновления версии программы.
Процедура ПотребоватьПерезапускСеансаПоПричинеДинамическогоОбновленияВерсииПрограммы() Экспорт
	
	ТекстОшибки = НСтр("ru = 'Версия программы обновлена, требуется перезапустить сеанс.'");
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

// Заменяет роли в профилях, кроме поставляемых профилей, которые обновляются автоматически.
// Предназначена для вызова из оперативного обработчика обновления.
//
// Параметры:
//  ЗаменяемыеРоли - Соответствие - со значениями:
//    * Ключ     - Строка - имя заменяемой роли, например "ЧтениеБазовойНСИ". Если роль была удалена,
//                          то к имени нужно добавить приставку "? ", например "? ЧтениеБазовойНСИ".
//
//    * Значение - Массив - имена ролей для замены указанной (пустой массив, чтобы удалить указанную роль,
//                          можно указывать заменяемую роль, например, при разделении на несколько).
//
Процедура ЗаменитьРолиВПрофилях(ЗаменяемыеРоли) Экспорт
	
	ЗаменяемыеСсылкиРолей = Новый Соответствие;
	МассивЗаменяемыхРолей = Новый Массив;
	
	Для Каждого КлючИЗначение Из ЗаменяемыеРоли Цикл
		Если СтрНачинаетсяС(КлючИЗначение.Ключ, "? ") Тогда
			СсылкиРоли = ИдентификаторУдаленногоОбъектаМетаданных(
				"Роль." + СокрЛП(Сред(КлючИЗначение.Ключ, 3)));
		Иначе
			СсылкиРоли = Новый Массив;
			СсылкиРоли.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Роль." + КлючИЗначение.Ключ));
		КонецЕсли;
		Для Каждого СсылкаРоли Из СсылкиРоли Цикл
			МассивЗаменяемыхРолей.Добавить(СсылкаРоли);
			НовыеРоли = Новый Массив;
			ЗаменяемыеСсылкиРолей.Вставить(СсылкаРоли, НовыеРоли);
			Для Каждого НоваяРоль Из КлючИЗначение.Значение Цикл
				НовыеРоли.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Роль." + НоваяРоль));
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Найти профили, использующие заменяемые роли.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаменяемыхРолей", МассивЗаменяемыхРолей);
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РолиПрофилей.Ссылка КАК Профиль,
	|	РолиПрофилей.Роль КАК Роль
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК РолиПрофилей
	|		ПО (РолиПрофилей.Ссылка = Профили.Ссылка)
	|			И (РолиПрофилей.Роль В (&МассивЗаменяемыхРолей))
	|			И (Профили.ИдентификаторПоставляемыхДанных = &ПустойИдентификатор
	|				ИЛИ Профили.ПоставляемыйПрофильИзменен)
	|ИТОГИ ПО
	|	Профиль";
	
	ДеревоПрофилей = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаПрофиля Из ДеревоПрофилей.Строки Цикл
		
		ПрофильОбъект = СтрокаПрофиля.Профиль.ПолучитьОбъект();
		РолиПрофиля = ПрофильОбъект.Роли;
		
		Для Каждого СтрокаРоли Из СтрокаПрофиля.Строки Цикл
			
			// Удаление заменяемой роли из профиля.
			Отбор = Новый Структура("Роль", СтрокаРоли.Роль);
			НайденныеСтроки = РолиПрофиля.НайтиСтроки(Отбор);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				РолиПрофиля.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			// Добавление новых ролей в профиль вместо заменяемой роли.
			ДобавляемыеРоли = ЗаменяемыеСсылкиРолей.Получить(СтрокаРоли.Роль);
			
			Для Каждого ДобавляемаяРоль Из ДобавляемыеРоли Цикл
				Отбор = Новый Структура;
				Отбор.Вставить("Роль", ДобавляемаяРоль);
				Если РолиПрофиля.НайтиСтроки(Отбор).Количество() = 0 Тогда
					НоваяСтрока = РолиПрофиля.Добавить();
					НоваяСтрока.Роль = ДобавляемаяРоль;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
		
	КонецЦикла;
	
	ОбновитьВспомогательныеДанныеПрофилей(
		ДеревоПрофилей.Строки.ВыгрузитьКолонку("Профиль"));
	
КонецПроцедуры

// Возвращает ссылки на объект метаданных, найденный по полному имени удаленного объекта метаданных.
// Используется когда требуется сделать замену старой ссылки на новую или очистить ее.
//
// Параметры:
//  ПолноеИмяУдаленного - Строка - например, "Роль.ЧтениеБазовойНСИ".
//
// Возвращаемое значение:
//  Массив - со значениями:
//   * Значение - СправочникСсылка.ИдентификаторыОбъектовМетаданных,
//                СправочникСсылка.ИдентификаторыОбъектовРасширений - найденная ссылка.
// 
Функция ИдентификаторУдаленногоОбъектаМетаданных(ПолноеИмяУдаленного) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка,
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя КАК ПолноеИмя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИдентификаторыОбъектовРасширений.Ссылка,
	|	ИдентификаторыОбъектовРасширений.ПолноеИмя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовРасширений КАК ИдентификаторыОбъектовРасширений
	|ГДЕ
	|	ИдентификаторыОбъектовРасширений.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НайденныеСсылки = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если Не СтрНачинаетсяС(Выборка.ПолноеИмя, "? ") Тогда
			Продолжить;
		КонецЕсли;
		ТекущееПолноеИмяУдаленного = Сред(Выборка.ПолноеИмя, 3);
		ПозицияСкобки = СтрНайти(ТекущееПолноеИмяУдаленного, "(");
		Если ПозицияСкобки > 0 Тогда
			ТекущееПолноеИмяУдаленного = Сред(ТекущееПолноеИмяУдаленного, 1, ПозицияСкобки - 1);
		КонецЕсли;
		Если ВРег(СокрЛП(ТекущееПолноеИмяУдаленного)) = ВРег(СокрЛП(ПолноеИмяУдаленного)) Тогда
			НайденныеСсылки.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСсылки;
	
КонецФункции

Процедура ОбновитьВспомогательныеДанныеПрофилей(Профили = Неопределено, ЕстьИзменения = Ложь) Экспорт
	
	Если Профили = Неопределено Тогда
		РегистрыСведений.ТаблицыГруппДоступа.ОбновитьДанныеРегистра( , , ЕстьИзменения);
		РегистрыСведений.ЗначенияГруппДоступа.ОбновитьДанныеРегистра( , ЕстьИзменения);
		УправлениеДоступомСлужебный.ОбновитьРолиПользователей( , , ЕстьИзменения);
		
	ИначеЕсли Профили.Количество() > 0 Тогда
		ГруппыДоступаПрофилей = ГруппыДоступаПрофиля(Профили);
		РегистрыСведений.ТаблицыГруппДоступа.ОбновитьДанныеРегистра(ГруппыДоступаПрофилей, , ЕстьИзменения);
		РегистрыСведений.ЗначенияГруппДоступа.ОбновитьДанныеРегистра(ГруппыДоступаПрофилей, ЕстьИзменения);
		
		// Обновление ролей пользователей.
		ПользователиДляОбновления = ПользователиДляОбновленияРолейПоПрофилю(Профили);
		
		УправлениеДоступомСлужебный.ОбновитьРолиПользователей(ПользователиДляОбновления, , ЕстьИзменения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПользователиДляОбновленияРолейПоПрофилю(Профили) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Профили", Профили);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппПользователей.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь
	|			И (ГруппыДоступаПользователи.Ссылка.Профиль В (&Профили))";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

Функция ГруппыДоступаПрофиля(Профили) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Профили", Профили);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Профиль В(&Профили)
	|	И НЕ ГруппыДоступа.ЭтоГруппа";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Изменить вызов аналогичной функции из общего модуля ОбщегоНазначенияКлиентСервер
//
Функция РазностьМассивов(Знач Массив, Знач МассивВычитания) Экспорт
	
	Результат = Новый Массив;
	Для Каждого Элемент Из Массив Цикл
		Если МассивВычитания.Найти(Элемент) = Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу значений с описанием требуемых свойств всех реквизитов объекта метаданных.
// Получает значения свойств стандартных реквизитов и пользовательских реквизитов (созданных в режиме конфигуратора).
//
// Параметры:
//  ОбъектМетаданных  - ОбъектМетаданных - объект, для которого необходимо получить значение свойств реквизитов.
//                      Например: Метаданные.Документ.РеализацияТоваровИУслуг
//  Свойства - Строка - свойства реквизитов, перечисленные через запятую, значение которых необходимо получить.
//                      Например: "Имя, Тип, Синоним, Подсказка".
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание требуемых свойств всех реквизитов объекта метаданных.
//
Функция ОписаниеСвойствОбъекта(ОбъектМетаданных, Свойства) Экспорт
	
	МассивСвойств = СтрРазделить(Свойства, ",");
	
	// Возвращаемое значение функции.
	ТаблицаОписанияСвойствОбъекта = Новый ТаблицаЗначений;
	
	// Добавляем в таблицу поля согласно именам переданных свойств.
	Для Каждого ИмяСвойства Из МассивСвойств Цикл
		ТаблицаОписанияСвойствОбъекта.Колонки.Добавить(СокрЛП(ИмяСвойства));
	КонецЦикла;
	
	// Заполняем строку таблицы свойствами реквизитов объекта метаданных.
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОписанияСвойствОбъекта.Добавить(), Реквизит);
	КонецЦикла;
	
	// Заполняем строку таблицы свойствами стандартных реквизитов объекта метаданных.
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОписанияСвойствОбъекта.Добавить(), Реквизит);
	КонецЦикла;
	
	Возврат ТаблицаОписанияСвойствОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции описания текущего окружения клиентского приложения и операционной системы.

// Возвращает Истина, если текущий сеанс выполняется на сервере, работающем под управлением ОС Windows.
//
// Возвращаемое значение:
//  Булево - Истина, если сервер работает под управлением ОС Windows.
//
Функция ЭтоWindowsСервер() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭлементыСтиля()
	
	НаборЭлементовСтиля = Новый Структура;
	Для каждого ЭлементСтиля Из Метаданные.ЭлементыСтиля Цикл
		НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, ЭлементСтиля.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(НаборЭлементовСтиля);
	
КонецФункции

Функция СформироватьФорматированнуюСтроку(ШаблонСтроки, ЭлементыСтиля,
		Знач Параметр1, Знач Параметр2, Знач Параметр3, Знач Параметр4, Знач Параметр5)
	
	HTMLСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСтроки, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5);
	
	НаборСтрок = Новый Массив;
	
	ТекущийШрифт  = Неопределено;
	ТекущийЦвет   = Неопределено;
	ТекущийФон    = Неопределено;
	ТекущаяСсылка = Неопределено;
	
	ФрагментыСтроки = СтрРазделить(HTMLСтрока, "<", Истина);
	Для каждого Фрагмент Из ФрагментыСтроки Цикл
		
		ТелоСтроки = "";
		ПозицияТэг = СтрНайти(Фрагмент, ">");
		
		Если ПозицияТэг = 0 Тогда
			ТелоСтроки = Фрагмент;
			
		ИначеЕсли СтрНачинаетсяС(Фрагмент, "/") Тогда
			ТелоСтроки = Сред(Фрагмент, ПозицияТэг + 1);
			
			ТекущийШрифт  = Неопределено;
			ТекущийЦвет   = Неопределено;
			ТекущийФон    = Неопределено;
			ТекущаяСсылка = Неопределено;
			
		Иначе
			
			ОписаниеТэга = Лев(Фрагмент, ПозицияТэг - 1);
			ПервыйПробел = СтрНайти(ОписаниеТэга, " ");
			
			Если ПервыйПробел > 0 Тогда
				ИмяТега = СокрЛП(Лев(ОписаниеТэга, ПервыйПробел));
				
				ОписаниеАтрибутов = Сред(ОписаниеТэга, ПервыйПробел + 1);
				ОписаниеАтрибутов = СтрЗаменить(ОписаниеАтрибутов , """", "'");
				
				ПозицияРавно = СтрНайти(ОписаниеАтрибутов, "=");
				Пока ПозицияРавно > 0 Цикл
					
					ИмяАтрибута = СокрЛП(Лев(ОписаниеАтрибутов, ПозицияРавно - 1));
					ПозицияПерваяКавычка = СтрНайти(ОписаниеАтрибутов, "'",, ПозицияРавно + 1);
					Если ПозицияПерваяКавычка = 0 Тогда
						ПозицияПерваяКавычка = ПозицияРавно;
					КонецЕсли;
					ПозицияВтораяКавычка = СтрНайти(ОписаниеАтрибутов, "'",, ПозицияПерваяКавычка + 1);
					Если ПозицияВтораяКавычка = 0 Тогда
						ПозицияВтораяКавычка = СтрДлина(ОписаниеАтрибутов) + 1;
					КонецЕсли;
					ЗначениеАтрибута = СокрЛП(Сред(ОписаниеАтрибутов, ПозицияПерваяКавычка + 1,
						ПозицияВтораяКавычка - ПозицияПерваяКавычка - 1));
					
					Если СтрСравнить(ИмяАтрибута, "style") = 0 Тогда
						УстановитьСтилиПоЗначениюАтрибута(ЗначениеАтрибута, ЭлементыСтиля, ТекущийФон, ТекущийЦвет, ТекущийШрифт);
					ИначеЕсли СтрСравнить(ИмяАтрибута, "href") = 0 И СтрСравнить(ИмяТега, "a") = 0 Тогда
						ТекущаяСсылка = ЗначениеАтрибута;
					ИначеЕсли СтрСравнить(ИмяАтрибута, "src") = 0 И СтрСравнить(ИмяТега, "img") = 0 Тогда
						НаборСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок[ЗначениеАтрибута], ТекущийШрифт,
							ТекущийЦвет, ТекущийФон, ТекущаяСсылка));
					КонецЕсли;
					
					ОписаниеАтрибутов = Сред(ОписаниеАтрибутов, ПозицияВтораяКавычка + 1);
					ПозицияРавно = СтрНайти(ОписаниеАтрибутов, "=");
					
				КонецЦикла;
			Иначе
				ИмяТега = ОписаниеТэга;
			КонецЕсли;
			
			Если ИмяТега = "b" Тогда
				ТекущийШрифт = ЭлементыСтиля["ВажнаяНадписьШрифт"];
			КонецЕсли;
			
			ТелоСтроки = Сред(Фрагмент, ПозицияТэг + 1);
			
		КонецЕсли;
		
		ТелоСтроки = СтрЗаменить(ТелоСтроки, "&lt;", "<");
		Если СтрДлина(ТелоСтроки) > 0 Тогда
			НаборСтрок.Добавить(Новый ФорматированнаяСтрока(ТелоСтроки, ТекущийШрифт, ТекущийЦвет, ТекущийФон, ТекущаяСсылка));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(НаборСтрок);

КонецФункции

Процедура УстановитьСтилиПоЗначениюАтрибута(Знач ОписаниеСтиля, ЭлементыСтиля, ТекущийФон, ТекущийЦвет, ТекущийШрифт)
	
	Стили = СтрРазделить(ОписаниеСтиля, ";");
	
	Для каждого Стиль Из Стили Цикл
		
		ЗначенияСтиля = СтрРазделить(стиль, ":");
		ИмяСтиля      = СокрЛП(ЗначенияСтиля[0]);
		ЗначениеСтиля = СокрЛП(ЗначенияСтиля[1]);
		
		Если СтрСравнить(ИмяСтиля, "color") = 0  Тогда
			ТекущийЦвет = ЭлементыСтиля[ЗначениеСтиля];
		ИначеЕсли СтрСравнить(ИмяСтиля, "background-color") = 0 Тогда
			ТекущийФон = ЭлементыСтиля[ЗначениеСтиля];
		ИначеЕсли СтрСравнить(ИмяСтиля, "font") = 0 Тогда
			ТекущийШрифт = ЭлементыСтиля[ЗначениеСтиля];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
