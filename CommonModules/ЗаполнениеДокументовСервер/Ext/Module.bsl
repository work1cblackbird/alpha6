// Общий модуль "Заполнение документов (сервер)"

#Область ПрограммныйИнтерфейс

// Процедура заполнения складскими остатками.
//
// Параметры:
//  Объект					 - ДанныеФормыСтруктура	 - Заполняемый документ
//  ПараметрыЗаполнения		 - Структура			 - Структура параметров, необходимых для заполнения складскими остатками.
//														При необходимости хранит дополнительные фильтры.
//  ПараметрыДействия		 - Структура			 - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция ЗагрузитьИзТСД(Объект, ПараметрыЗаполнения, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения.ЗагрузитьИзТСД.Свойство("ТаблицаТоваров") 
		И ТипЗнч(ПараметрыЗаполнения.ЗагрузитьИзТСД.ТаблицаТоваров) = Тип("Массив") Тогда
	
		// Определим в какое имя у реквизита описывающего Количество.
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Инвентаризация") Тогда
			ИмяРеквизитаКоличество = "КоличествоФакт";
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИнвентаризацияОрдерногоСклада") Тогда
			ИмяРеквизитаКоличество = "КоличествоУчет";
		Иначе
			ИмяРеквизитаКоличество = "Количество";
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура();
		
		Если ЕстьРеквизит(Объект, "Номенклатура", ПараметрыЗаполнения.ИмяТабличнойЧасти) Тогда
			СтруктураПоиска.Вставить("Номенклатура");
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "ХарактеристикаНоменклатуры", ПараметрыЗаполнения.ИмяТабличнойЧасти) Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры");
		КонецЕсли;
		
		ШтрихКодыБезТоваров = Новый Соответствие;
		
		Для каждого СтрокаТоваров Из ПараметрыЗаполнения.ЗагрузитьИзТСД.ТаблицаТоваров Цикл
			
			Если СтрокаТоваров.ШтрихКод = "" ИЛИ НЕ ЗначениеЗаполнено(СтрокаТоваров.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			// Поиск объектов по штрихкоду.
			ОбъектыПоШтрихкоду = ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(СтрокаТоваров.ШтрихКод, , Истина);
			
			Если ОбъектыПоШтрихкоду.Количество() = 0 Тогда
				ВывестиНенайденныйКод(Объект, СтрокаТоваров.ШтрихКод, ШтрихКодыБезТоваров);
				Продолжить;
			КонецЕсли;
			
			ДобавитьНоменклатуруВДокумент(
				СтрокаТоваров,
				Объект,
				ОбъектыПоШтрихкоду,
				ПараметрыЗаполнения,
				ИмяРеквизитаКоличество,
				СтруктураПоиска);
			
		КонецЦикла;
		
		// Выведем считанные коды, к которым не нашли товаров
		Если ШтрихКодыБезТоваров.Количество() > 0 Тогда
			
			Для Каждого ТекущийШК Из ШтрихКодыБезТоваров Цикл
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Не найдена номенклатура по считанному коду %1 со следующими кодами маркировки:'"),
						ТекущийШК.Ключ
					),
					Объект.Ссылка
				);
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон("%1", СтрСоединить(ТекущийШК.Значение, Символы.ПС)), Объект.Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ЗагрузитьИзТСД()

// Процедура заполнения складскими остатками.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - Заполняемый документ
//  ПараметрыЗаполнения	 - Структура			 - Структура параметров, необходимых для заполнения складскими остатками.
//													При необходимости хранит дополнительные фильтры.
//  ПараметрыДействия	 - Структура			 - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция ЗагрузкаИзФайла(Объект, ПараметрыЗаполнения, ПараметрыДействия = Неопределено) Экспорт
	
	// Получим параметры работы.
	АдресТаблицаЗагрузкаИЗФайлаВХранилище = ПараметрыЗаполнения.ЗагрузкаИзФайла.АдресТаблицаЗагрузкаИЗФайлаВХранилище;
	ИмяТабличнойЧасти                     = ПараметрыЗаполнения.ЗагрузкаИзФайла.ИмяТабличнойЧасти;
	
	// Производим заполнение таблицы объекта.
	Если ЗначениеЗаполнено(АдресТаблицаЗагрузкаИЗФайлаВХранилище) Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТаблицаЗагрузкаИЗФайлаВХранилище);
		Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
			НовСтр = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТоваров);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ЗагрузкаИзФайла()

// Процедура заполнения складскими остатками.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - Заполняемый документ
//  ПараметрыЗаполнения	 - Структура			 - Структура параметров, необходимых для заполнения складскими остатками.
//													При необходимости хранит дополнительные фильтры.
//  ПараметрыДействия	 - Структура			 - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция УстановитьНаценкуДляВсейТаблицы(Объект, ПараметрыЗаполнения, ПараметрыДействия = Неопределено) Экспорт
	
	// Получим менеджер объекта.
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = МенеджерОбъекта.ПолучитьПараметрыДействия(Объект);
	
	// Изменим значение процента.
	Для Каждого ТекСтрока Из Объект[ПараметрыЗаполнения.ИмяТабличнойЧасти] Цикл
		
		ТекСтрока.ПроцентНаценки = ПараметрыЗаполнения.ЗначениеПроцента;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(Объект);
		ПараметрыВыполнения.Добавить(ТекСтрока);
		Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ДокументМенеджер", "Документы");
		РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(
			Имя + "." + ПараметрыЗаполнения.ИмяТабличнойЧасти + "ПроцентНаценкиПриИзменении",
			ПараметрыВыполнения
		);
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // УстановитьНаценкуДляВсейТаблицы()

// Процедура заполнения по документу.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - Заполняемый документ
//  ПараметрыЗаполнения	 - Структура			 - Структура параметров, необходимых для заполнения складскими остатками.
//													При необходимости хранит дополнительные фильтры.
//  ПараметрыДействия	 - Структура			 - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция ЗаполнениеПоДокументу(Объект, ПараметрыЗаполнения, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЕстьРеквизит(ПараметрыЗаполнения.ЗаполнитьПоДокументуВыборСсылки, , ПараметрыЗаполнения.ИмяТабличнойЧасти) Тогда
		
		ДанныеЗаполнения = ПараметрыЗаполнения.ЗаполнитьПоДокументуВыборСсылки;
		
		// Получим менеджера текущего объекта.
		Если ЕстьРеквизит(Объект, "Номенклатура", ПараметрыЗаполнения.ИмяТабличнойЧасти) Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		Иначе
			МенеджерОбъекта = Неопределено;
		КонецЕсли;
		
		ИменаИсключаемыхРеквизитов = "НомерСтроки";
		
		// Для документа "Закрытие смены" не будем заполнять скидки.
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗакрытиеСмены")
			И ПараметрыЗаполнения.ИмяТабличнойЧасти = "Товары" Тогда
			ИменаИсключаемыхРеквизитов = ",ПроцентСкидки,СуммаСкидки";
		КонецЕсли;
		
		// Идем по строкам и реквизитам табличной части и заполняем соответствующие.
		Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения[ПараметрыЗаполнения.ИмяТабличнойЧасти] Цикл
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров") 
				И ПараметрыЗаполнения.ИмяТабличнойЧасти = "Товары" 
				И СтрокаТабличнойЧасти.Количество = 0 Тогда
				
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект[ПараметрыЗаполнения.ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти, , ИменаИсключаемыхРеквизитов);
			
			Если ЕстьРеквизит(Объект, "КоличествоБазовое", ПараметрыЗаполнения.ИмяТабличнойЧасти) 
				И НЕ ЗначениеЗаполнено(НоваяСтрока.КоличествоБазовое) 
				И ЕстьРеквизит(Объект, "Количество", ПараметрыЗаполнения.ИмяТабличнойЧасти) 
				И ЕстьРеквизит(Объект, "Коэффициент", ПараметрыЗаполнения.ИмяТабличнойЧасти) Тогда
				
				НоваяСтрока.КоличествоБазовое = НоваяСтрока.Количество * НоваяСтрока.Коэффициент;
			КонецЕсли;
			
			Если НЕ МенеджерОбъекта = Неопределено Тогда
				
				ПараметрыВыполнения = Новый Массив;
				ПараметрыВыполнения.Добавить(Объект);
				ПараметрыВыполнения.Добавить(НоваяСтрока);
				Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ДокументМенеджер", "Документы");
				РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(
					Имя + "." + ПараметрыЗаполнения.ИмяТабличнойЧасти + "НоменклатураПриИзменении",
					ПараметрыВыполнения
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ЗаполнениеПоДокументу()

// Процедура заполнения складскими остатками.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - Заполняемый документ
//  ПараметрОповещения	 - Структура			 - Структура параметров, необходимых для заполнения складскими остатками.
//												При необходимости хранит дополнительные фильтры.
//
Процедура ЗаполнитьТоварыСкладскимиОстатками(Объект, ПараметрОповещения) Экспорт
	
	ТаблицаОстатков = ПолучитьСкладскиеОстатки(Объект, ПараметрОповещения);
	Объект[ПараметрОповещения.ИмяТабличнойЧасти].Загрузить(ТаблицаОстатков);
	
	Если ТаблицаОстатков.Количество() <> 0 Тогда
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		
		Для Каждого СтрокаТЧ Из Объект[ПараметрОповещения.ИмяТабличнойЧасти] Цикл
			
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(Объект);
			ПараметрыВыполнения.Добавить(СтрокаТЧ);
			Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ДокументМенеджер", "Документы");
			РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(
				Имя + "." + ПараметрОповещения.ИмяТабличнойЧасти + "НоменклатураПриИзменении",
				ПараметрыВыполнения
			);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получения складских остатков.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - Заполняемый документ
//  ПараметрОповещения	 - Структура			 - Структура параметров, необходимых для заполнения складскими остатками.
//													При необходимости хранит дополнительные фильтры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица остатков по складу.
//
Функция ПолучитьСкладскиеОстатки(Объект, ПараметрОповещения) Экспорт
	
	// получим дополнительные фильтры для заполнения, если они есть в параметрах.
	ГруппаНоменклатуры = ПолучитьЗначениеПараметраСтруктуры(ПараметрОповещения, "ГруппаНоменклатуры", Неопределено);
	СкладКомпании      = ПолучитьЗначениеПараметраСтруктуры(ПараметрОповещения, "СкладКомпании",      Неопределено);
	ИмяРегистра        = ПолучитьЗначениеПараметраСтруктуры(ПараметрОповещения, "ИмяРегистра",        Неопределено);
	Ячейка	           = ПолучитьЗначениеПараметраСтруктуры(ПараметрОповещения, "Ячейка",             Неопределено);
	Организация        = Объект.Организация;
	
	Если НЕ ЗначениеЗаполнено(СкладКомпании) Тогда
		СкладКомпании = Объект.СкладКомпании;
	КонецЕсли;
	
	ЯчеистыйСклад = (СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый ИЛИ 
						СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый);
						
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дата = Объект.Дата;
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Момент = Новый МоментВремени(Дата);
	
	ДопФильтр = ?(ЗначениеЗаполнено(ГруппаНоменклатуры), " И Номенклатура В ИЕРАРХИИ(&ВыбГруппа)", "");
	Если Ячейка <> Неопределено Тогда
		ЯчейкаФильтр = " И Ячейка = &Ячейка ";
	Иначе
		ЯчейкаФильтр = "";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Если ИмяРегистра = Неопределено 
		И ОбработкаСобытийДокументаСервер.ПолучитьРежимПроведенияПоПартиям() <> Перечисления.РежимыПроведенияПартий.ПартииОтсутствуют
		И (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Инвентаризация")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров")) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|				ТОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток
		|			ИНАЧЕ ПартииТоваровКомпанииОстатки.КоличествоОстаток / ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ втПартииТоваровКомпанииОстатки
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|			&Момент,
		|			СкладКомпании = &СкладКомпании
		|				И (&БезФильтраПоОрганизации
		|					ИЛИ Организация = &Организация)
		|				И (&БезФильтраПоГруппеНоменклатуры
		|					ИЛИ Номенклатура В ИЕРАРХИИ (&ВыбГруппа))) КАК ПартииТоваровКомпанииОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|				ТОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток
		|			ИНАЧЕ ПартииТоваровКомпанииОстатки.КоличествоОстаток / ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|		КОНЕЦ > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровКомпанииОстатки.Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.РезервОстаток
		|		ИНАЧЕ ОстаткиТоваровКомпанииОстатки.РезервОстаток / ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Резерв,
		|	0 КАК Количество
		|ПОМЕСТИТЬ ОстаткиПоСкладу
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
		|			&Момент,
		|			СкладКомпании = &СкладКомпании
		|				И (&БезФильтраПоГруппеНоменклатуры
		|					ИЛИ Номенклатура В ИЕРАРХИИ (&ВыбГруппа))) КАК ОстаткиТоваровКомпанииОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|				ТОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток
		|			ИНАЧЕ ОстаткиТоваровКомпанииОстатки.КоличествоОстаток / ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|		КОНЕЦ > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втПартииТоваровКомпанииОстатки.Номенклатура,
		|	втПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	втПартииТоваровКомпанииОстатки.ЕдиницаИзмерения,
		|	0,
		|	втПартииТоваровКомпанииОстатки.Количество
		|ИЗ
		|	втПартииТоваровКомпанииОстатки КАК втПартииТоваровКомпанииОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПоСкладу.Номенклатура КАК Номенклатура,
		|	ОстаткиПоСкладу.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиПоСкладу.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ОстаткиПоСкладу.Резерв) КАК Резерв,
		|	СУММА(ОстаткиПоСкладу.Количество) КАК Количество
		|#ИмяВременнойТаблицы
		|ИЗ
		|	ОстаткиПоСкладу КАК ОстаткиПоСкладу
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладу.Номенклатура,
		|	ОстаткиПоСкладу.ХарактеристикаНоменклатуры,
		|	ОстаткиПоСкладу.ЕдиницаИзмерения";
		
		Если ЯчеистыйСклад Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВременнойТаблицы", "ПОМЕСТИТЬ ОстаткиТоваровИтог");
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОстаткиТоваровИтог.Номенклатура КАК Номенклатура,
			|	ОстаткиТоваровИтог.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ОстаткиТоваровИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ОстаткиТоваровИтог.Резерв КАК Резерв,
			|	ОстаткиТоваровИтог.Количество КАК Количество,
			|	ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.Ячейка, ЗНАЧЕНИЕ(Справочник.ЯчейкиХранения.ПустаяСсылка)) КАК Ячейка
			|ИЗ
			|	ОстаткиТоваровИтог КАК ОстаткиТоваровИтог
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
			|				&Момент,
			|				СкладКомпании = &СкладКомпании
			|					И (&БезФильтраПоГруппеНоменклатуры
			|						ИЛИ Номенклатура В ИЕРАРХИИ (&ВыбГруппа))) КАК ОстаткиТоваровОрдерныйСкладОстатки
			|		ПО ОстаткиТоваровИтог.Номенклатура = ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура
			|			И ОстаткиТоваровИтог.ХарактеристикаНоменклатуры = ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры
			|			И ОстаткиТоваровИтог.Количество = ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток";
			
		Иначе
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВременнойТаблицы", "");
			
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Момент", Момент);
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		Запрос.УстановитьПараметр("БезФильтраПоОрганизации", ЗапасыТоваров.ФильтрЗапросаПоОрганизации(Момент.Дата));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("БезФильтраПоГруппеНоменклатуры", НЕ ЗначениеЗаполнено(ГруппаНоменклатуры));
		Запрос.УстановитьПараметр("ВыбГруппа", ГруппаНоменклатуры);		
			
	ИначеЕсли ИмяРегистра = Неопределено Тогда			
			
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток
		|		ИНАЧЕ ОстаткиТоваровКомпанииОстатки.КоличествоОстаток / ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.РезервОстаток
		|		ИНАЧЕ ОстаткиТоваровКомпанииОстатки.РезервОстаток / ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Резерв ";
		Если ЯчеистыйСклад Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	,
			|  ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.Ячейка, ЗНАЧЕНИЕ(Справочник.ЯчейкиХранения.ПустаяСсылка)) КАК Ячейка ";	
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(&Момент, СкладКомпании = &СкладКомпании " + ДопФильтр + ") КАК ОстаткиТоваровКомпанииОстатки // BSLLS:LineLength-off ";
		
		Если ЯчеистыйСклад Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(&Момент, СкладКомпании = &СкладКомпании " + ДопФильтр + ") КАК ОстаткиТоваровОрдерныйСкладОстатки
			|	ПО (ОстаткиТоваровКомпанииОстатки.Номенклатура = ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура)
			|		И (ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры = ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры)
			|		И (ОстаткиТоваровКомпанииОстатки.КоличествоОстаток = ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток) ";			
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток
		|		ИНАЧЕ ОстаткиТоваровКомпанииОстатки.КоличествоОстаток / ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ > 0";	
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		Запрос.УстановитьПараметр("Момент",        Момент);
		Запрос.УстановитьПараметр("ВыбГруппа",     ГруппаНоменклатуры);
		
	ИначеЕсли ИмяРегистра = "ОстаткиТоваровОрдерныйСклад" И СкладКомпании <> Неопределено Тогда
		
		ТестЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,";
		
		// Если склад ячеистый, добавим измерение "Ячейка"
		Если ЯчеистыйСклад Тогда
			
			ТестЗапроса = ТестЗапроса + "
			|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка КАК Ячейка,";
		КонецЕсли;
		
		// Если ведется учет единиц измерения по складу, добавим измерение "ЕдиницаИзмерения".
		Если СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется Тогда
			ТестЗапроса = ТестЗапроса + "
			|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,";
		Иначе
			ТестЗапроса = ТестЗапроса + "
			|	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,";
		КонецЕсли;
		
		ТестЗапроса = ТестЗапроса + "
		|	ВЫБОР КОГДА ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент,0) = 0 ТОГДА
		|		ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток
		|	ИНАЧЕ
		|		ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток/ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(&Момент,СкладКомпании=&СкладКомпании " + ЯчейкаФильтр + ДопФильтр + ") КАК ОстаткиТоваровОрдерныйСкладОстатки"; // BSLLS:LineLength-off
		
		Запрос.Текст = ТестЗапроса;
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		Запрос.УстановитьПараметр("Момент", Момент);
		Запрос.УстановитьПараметр("ВыбГруппа", ГруппаНоменклатуры);
		Если Ячейка <> Неопределено Тогда
			Запрос.УстановитьПараметр("Ячейка", Ячейка);
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция получения складских остатков по организациям из партий.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - Заполняемый документ
//  ПараметрОповещения	 - Структура			 - Структура параметров, необходимых для заполнения складскими остатками.
//													При необходимости хранит дополнительные фильтры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица остатков по складу.
//
Функция ПолучитьСкладскиеОстаткиПоОрганизацииИзПартий(Объект, ПараметрОповещения)
	
	// получим дополнительные фильтры для заполнения, если они есть в параметрах.
	ГруппаНоменклатуры = ПолучитьЗначениеПараметраСтруктуры(ПараметрОповещения, "ГруппаНоменклатуры", Неопределено);
	СкладКомпании      = ПолучитьЗначениеПараметраСтруктуры(ПараметрОповещения, "СкладКомпании",      Неопределено);
	Организация        = Объект.Организация;
	
	Если НЕ ЗначениеЗаполнено(СкладКомпании) Тогда
		СкладКомпании = Объект.СкладКомпании;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дата = Объект.Дата;
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Момент = Новый МоментВремени(Дата);
	
	Запрос = Новый Запрос;
	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|				ТОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток
		|			ИНАЧЕ ПартииТоваровКомпанииОстатки.КоличествоОстаток / ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ втПартииТоваровКомпанииОстатки
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|			&Момент,
		|			СкладКомпании = &СкладКомпании
		|				И (&БезФильтраПоОрганизации
		|					ИЛИ Организация = &Организация)
		|				И (&БезФильтраПоГруппеНоменклатуры
		|					ИЛИ Номенклатура В ИЕРАРХИИ (&ВыбГруппа))) КАК ПартииТоваровКомпанииОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|				ТОГДА ПартииТоваровКомпанииОстатки.КоличествоОстаток
		|			ИНАЧЕ ПартииТоваровКомпанииОстатки.КоличествоОстаток / ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|		КОНЕЦ > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровКомпанииОстатки.Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|			ТОГДА ОстаткиТоваровКомпанииОстатки.РезервОстаток
		|		ИНАЧЕ ОстаткиТоваровКомпанииОстатки.РезервОстаток / ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Резерв,
		|	0 КАК Количество
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
		|			&Момент,
		|			СкладКомпании = &СкладКомпании
		|				И (&БезФильтраПоГруппеНоменклатуры
		|					ИЛИ Номенклатура В ИЕРАРХИИ (&ВыбГруппа))) КАК ОстаткиТоваровКомпанииОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
		|				ТОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток
		|			ИНАЧЕ ОстаткиТоваровКомпанииОстатки.КоличествоОстаток / ОстаткиТоваровКомпанииОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|		КОНЕЦ > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втПартииТоваровКомпанииОстатки.Номенклатура,
		|	втПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	втПартииТоваровКомпанииОстатки.ЕдиницаИзмерения,
		|	0,
		|	втПартииТоваровКомпанииОстатки.Количество
		|ИЗ
		|	втПартииТоваровКомпанииОстатки КАК втПартииТоваровКомпанииОстатки";
		
		Запрос.УстановитьПараметр("Момент", Момент);
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		Запрос.УстановитьПараметр("БезФильтраПоОрганизации", ЗапасыТоваров.ФильтрЗапросаПоОрганизации(Момент.Дата));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("БезФильтраПоГруппеНоменклатуры", НЕ ЗначениеЗаполнено(ГруппаНоменклатуры));
		Запрос.УстановитьПараметр("ВыбГруппа", ГруппаНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура заполнения складскими остатками.
//
// Параметры:
//   Объект              - Документ  - Заполняемый документ
//   ПараметрОповещения  - Структура - Структура параметров, необходимых для заполнения складскими остатками.
//                                     При необходимости хранит дополнительные фильтры.
//
Процедура ЗаполнитьТоварыПоДоговоруКомиссии(Объект, ПараметрОповещения) Экспорт
	
	ТаблицаТоваров = ПолучитьТоварыПоДоговоруКомиссии(Объект, ПараметрОповещения);
	Объект[ПараметрОповещения.ИмяТабличнойЧасти].Загрузить(ТаблицаТоваров);
	
	Если ТаблицаТоваров.Количество() <> 0 Тогда
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		
		Для Каждого СтрокаТЧ Из Объект[ПараметрОповещения.ИмяТабличнойЧасти] Цикл
			
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(Объект);
			ПараметрыВыполнения.Добавить(СтрокаТЧ);
			Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ДокументМенеджер", "Документы");
			РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(
				Имя + "." + ПараметрОповещения.ИмяТабличнойЧасти + "НоменклатураПриИзменении",
				ПараметрыВыполнения
			);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получения таблицы товаров по договору комиссии.
//
// Параметры:
//   Объект              - Документ  - Заполняемый документ
//   ПараметрОповещения  - Структура - Структура параметров, необходимых для заполнения складскими остатками.
//                                     При необходимости хранит дополнительные фильтры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица товаров по договору.
//
Функция ПолучитьТоварыПоДоговоруКомиссии(Объект, ПараметрОповещения) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дата = Объект.Дата;
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровОтданныеОстатки.Номенклатура КАК Номенклатура,
	|	ПартииТоваровОтданныеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПартииТоваровОтданныеОстатки.ДокументПередачи КАК ДокументПередачи,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПартииТоваровОтданныеОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) = 0
	|			ТОГДА ПартииТоваровОтданныеОстатки.КоличествоОстаток
	|		ИНАЧЕ ПартииТоваровОтданныеОстатки.КоличествоОстаток / ПартииТоваровОтданныеОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ПартииТоваровОтданныеОстатки.СуммаУпрОстаток КАК Сумма,
	|	ПартииТоваровОтданныеОстатки.СуммаОстаток КАК СуммаРегл
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОтданные.Остатки(
	|			&Момент,
	|			Автомобиль = ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|				И Контрагент = &Контрагент
	|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов) КАК ПартииТоваровОтданныеОстатки
	|ГДЕ
	|	ПартииТоваровОтданныеОстатки.КоличествоОстаток > 0";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Контрагент",            Объект.Контрагент);
	Запрос.УстановитьПараметр("Момент",                Новый Граница(Новый МоментВремени(Дата), ВидГраницы.Исключая));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТоварыПоДоговоруКомиссии()

// Функция получения таблицы товаров по группе номенклатуры.
//
// Параметры:
//   Объект              - Документ  - Заполняемый документ
//   ПараметрОповещения  - Структура - Структура параметров, необходимых для заполнения по группе номенклатуры.
//                                     При необходимости хранит дополнительные фильтры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица товаров по группе номенклатуры.
//
Функция ПолучитьТоварыПоГруппеНоменклатуры(Объект, ПараметрОповещения) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ПараметрОповещения.ГруппаНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТоварыПоГруппеНоменклатуры()

// Процедура заполнения заказами контрагенту.
//
// Параметры:
//   Объект              - Документ  - Заполняемый документ
//   ПараметрОповещения  - Структура - Структура параметров, необходимых для заполнения складскими остатками.
//                                     При необходимости хранит дополнительные фильтры.
//
Процедура ЗаполнитьЗаказамиКонтрагенту(Объект, ПараметрОповещения) Экспорт
	
	ТаблицаТоваров = ПолучитьТоварыПоЗаказамКонтрагенту(Объект, ПараметрОповещения);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);

	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		НоваяСтрока								= Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура				= СтрокаТоваров.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрокаТоваров.ХарактеристикаНоменклатуры;
		
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(Объект);
		ПараметрыВыполнения.Добавить(НоваяСтрока);
		Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ДокументМенеджер", "Документы");
		РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(
			Имя + "." + ПараметрОповещения.ИмяТабличнойЧасти + "НоменклатураПриИзменении",
			ПараметрыВыполнения
		);
		
		НоваяСтрока.Количество = СтрокаТоваров.ЗаказаноОстаток;
		
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(Объект);
		ПараметрыВыполнения.Добавить(НоваяСтрока);
		Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ДокументМенеджер", "Документы");
		РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(
			Имя + "." + ПараметрОповещения.ИмяТабличнойЧасти + "КоличествоПриИзменении",
			ПараметрыВыполнения
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция получения таблицы товаров по заказам контрагенту.
//
// Параметры:
//   Объект              - Документ  - Заполняемый документ
//   ПараметрОповещения  - Структура - Структура параметров, необходимых для заполнения складскими остатками.
//                                     При необходимости хранит дополнительные фильтры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица товаров по заказам.
//
Функция ПолучитьТоварыПоЗаказамКонтрагенту(Объект, ПараметрОповещения) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дата = Объект.Дата;
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Момент = Новый МоментВремени(Дата);

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
	|	СУММА(ЗаказыПоставщикамОстатки.ЗаказаноОстаток) КАК ЗаказаноОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&Момент, Контрагент = &Контрагент И ЗаказПоставщику.ПодразделениеКомпании=&ПодразделениеКомпании) КАК ЗаказыПоставщикамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент", 				Момент);
	Запрос.УстановитьПараметр("Контрагент", 			Объект.Контрагент);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", 	Объект.ПодразделениеКомпании);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Обработчик  пунктов подменю "Заполнение" панели "КоманднаяПанельАктивы".
//
// Параметры:
//   Объект              - Документ  - Заполняемый документ.
//   ПараметрОповещения  - Структура - Структура параметров, необходимых для заполнения активами.
//                                     При необходимости хранит дополнительные фильтры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица активов.
//
Функция ЗаполнитьТабличнуюЧастьАктивами(Объект, ПараметрОповещения) Экспорт
	
	ИмяПодменю = ПараметрОповещения.ИмяКоманды;
	
	Если ИмяПодменю = "АктивыЗаполнитьАктивамиПодразделения" Тогда
		
		// Надо заполнить таблицу активами подразделения.
		ВыбПодразделение = Объект.ПодразделениеКомпании;
		Попытка
			ВыбМОЛ = ПараметрОповещения.МолОтбор;
		Исключение
			ВыбМОЛ = Неопределено;
		КонецПопытки;
		
		// Запрос по активам
		МоментВремени = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), Новый МоментВремени(КонецДня(Объект.Дата)), 
			Новый МоментВремени(Объект.Дата));
		// На случай, если документ уже проведен,правим момент расчета
		МоментВремени = ?(Объект.Ссылка.Пустая(), 
			Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая), МоментВремени);
		
		Если Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).Имя = "Амортизация" Тогда
			ТаблАктивы = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивовНеАмортизированных(МоментВремени, ВыбПодразделение);
		Иначе
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("Подразделение", ВыбПодразделение);
			ПараметрыЗапроса.Вставить("МОЛ",           ВыбМОЛ);
			ПараметрыЗапроса.Вставить("Момент",        МоментВремени);
			ТаблАктивы = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивов(ПараметрыЗапроса);
		КонецЕсли;
		
		Возврат ТаблАктивы;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик  пунктов подменю "Заполнение" панели "КоманднаяПанельТовары".
//
// Параметры:
//   Объект              - Документ  - Заполняемый документ.
//   ПараметрОповещения  - Структура - Структура параметров, необходимых для складскими остатками.
//                                     При необходимости хранит дополнительные фильтры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица складских остатков.
//
Функция ЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке(Объект, ПараметрОповещения) Экспорт
	
		Запрос    = Новый Запрос();
		ДопФильтр = " И (НЕ Номенклатура.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга))";
		
		ДопФильтр = ДопФильтр + " И Ячейка В (&МассивЯчеек)";
		Запрос.УстановитьПараметр("МассивЯчеек", ПараметрОповещения.МассивЯчеек);  		
		
		ТестЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка КАК Ячейка,";
				
		// Если ведется учет единиц измерения по складу, добавим измерение "ЕдиницаИзмерения".
		Если ПараметрОповещения.СкладКомпании.УчетЕдиницИзмерения <> Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется Тогда
			ТестЗапроса = ТестЗапроса + "
			|	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,";
		КонецЕсли; 
		
		ТестЗапроса = ТестЗапроса + "
		|	ВЫБОР КОГДА ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент,0) = 0 ТОГДА
		|		ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток
		|	ИНАЧЕ 
		|		ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток/ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Количество 
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(&Момент,СкладКомпании=&СкладКомпании " + ДопФильтр + ") КАК ОстаткиТоваровОрдерныйСкладОстатки"; // BSLLS:LineLength-off
		
		Запрос.Текст = ТестЗапроса;
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			МоментВремени = Новый МоментВремени(КонецДня(Объект.Дата));
		Иначе
			МоментВремени = Новый МоментВремени(Объект.Дата);
		КонецЕсли; 
		Запрос.УстановитьПараметр("Момент",        МоментВремени);
		Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
		
		Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект			 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  ПараметрыКоманд	 - Структура			 - Структура из строки таблицы команд.
//
// Возвращаемое значение:
//  Структура - сформированные параметры видимости и доступности команд проверки.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект, ПараметрыКоманд) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	Для Каждого ТабличнаяЧасть Из Объект.Ссылка.Метаданные().ТабличныеЧасти Цикл
		
		// Команда установки процента наценки.
		Если ЕстьРеквизит(Объект, "СкладКомпании") И ЕстьРеквизит(Объект, "ПроцентНаценки", ТабличнаяЧасть.Имя) Тогда
			
			ЭтоРозничныйСклад = (ЗначениеЗаполнено(Объект.СкладКомпании) 
				И ТипЗнч(Объект.СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании") И Объект.СкладКомпании.Розничный);
			РазрешитьРедактированиеЦенИСумм =  ПраваИНастройкиПользователя.Значение(
													"РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
			РазрешитьИзменятьРозничныеЦены  =  ПраваИНастройкиПользователя.Значение(
													"ИзменятьРозничныеЦеныВПоступленииТоваров", Объект);
			РедактированиеДоступно = ЭтоРозничныйСклад И НЕ ((НЕ РазрешитьРедактированиеЦенИСумм) 
														 ИЛИ (НЕ РазрешитьИзменятьРозничныеЦены) 
														 ИЛИ Объект.СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается);
			ПараметрыКоманд.Вставить(ТабличнаяЧасть.Имя + "УстановитьНаценкуДляВсейТаблицы.Видимость", РедактированиеДоступно);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки.
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиНенайденныйКод(Объект, ШтрихКод, ШтрихКодыБезТоваров)
	
	СоответствиеКодуМаркировки = "";
	ШтрихКодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
		ШтрихКод,
		СоответствиеКодуМаркировки);
	Если ПустаяСтрока(СоответствиеКодуМаркировки) Тогда
		ШтрихкодТовара = Сред(ШтрихКодМаркировки, 6, 13);
		ТекущийШК = ШтрихКодыБезТоваров.Получить(ШтрихкодТовара);
		Если ТекущийШК = Неопределено Тогда
			ШтрихКодыБезТоваров.Вставить(ШтрихкодТовара, Новый Массив);
			ТекущийШК = ШтрихКодыБезТоваров.Получить(ШтрихкодТовара);
		КонецЕсли;
		ТекущийШК.Добавить(ШтрихКодМаркировки);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не найдена номенклатура по считанному коду: %1'"), ШтрихКод)
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьНоменклатуруВДокумент(
		СтрокаТоваров,
		Объект,
		ОбъектыПоШтрихкоду,
		ПараметрыЗаполнения,
		ИмяРеквизитаКоличество,
		СтруктураПоиска)
	
	// Вызываем обработчик изменения данных объекта.
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Для Каждого ОбъектПоШтрихкоду Из ОбъектыПоШтрихкоду Цикл
		
		Если ОбъектПоШтрихкоду.Запрет Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = ?(ОбъектПоШтрихкоду.Вес = 0, СтрокаТоваров.Количество, ОбъектПоШтрихкоду.Вес);
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Номенклатура",               ОбъектПоШтрихкоду.Объект);
		СтруктураСтроки.Вставить(ИмяРеквизитаКоличество,       Количество);
		СтруктураСтроки.Вставить("ЕдиницаИзмерения",           ОбъектПоШтрихкоду.ЕдиницаИзмерения);
		СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", ОбъектПоШтрихкоду.ХарактеристикаНоменклатуры);
		СтруктураСтроки.Вставить("Штрихкод",                   ОбъектПоШтрихкоду.Штрихкод);
		СтруктураСтроки.Вставить("Запрет",                     ОбъектПоШтрихкоду.Запрет);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураСтроки);
		НайденныеСтроки = Объект[ПараметрыЗаполнения.ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Объект[ПараметрыЗаполнения.ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтроки);
			
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить("НеЗаполнятьКоличествоФакт", Истина);
			
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(Объект);
			ПараметрыВыполнения.Добавить(СтрокаТабличнойЧасти);
			ПараметрыВыполнения.Добавить(ПараметрыДействия);
				Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ДокументМенеджер", "Документы");
			РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(
				Имя + "." + ПараметрыЗаполнения.ИмяТабличнойЧасти + "НоменклатураПриИзменении",
				ПараметрыВыполнения
			);
		Иначе
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] =
			СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] + СтруктураСтроки[ИмяРеквизитаКоличество];
		КонецЕсли;
		
		// Заполним код маркировки в ТЧ КодыМаркирвоки
		Если ЕстьРеквизит(Объект, "ИдентификаторТовара", ПараметрыЗаполнения.ИмяТабличнойЧасти)
			И ЕстьРеквизит(Объект,, "КодыМаркировки")
			И НЕ ПустаяСтрока(ОбъектПоШтрихкоду.КодМаркировки) Тогда
			НоваяСтрока = Объект.КодыМаркировки.Добавить();
			НоваяСтрока.ИдентификаторТовара = СтрокаТабличнойЧасти.ИдентификаторТовара;
			НоваяСтрока.КодМаркировки = ОбъектПоШтрихкоду.КодМаркировки;
			Если ЕстьРеквизит(Объект, "Подтверждено", "КодыМаркировки") Тогда
				НоваяСтрока.Подтверждено = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти