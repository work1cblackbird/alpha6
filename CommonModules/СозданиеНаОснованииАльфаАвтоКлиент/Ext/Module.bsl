
#Область СлужебныйПрограммныйИнтерфейс

Процедура НачатьСозданиеНаОснованииСобытия(Основание, Контекст) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьСозданиеНаОснованииСобытия", ЭтотОбъект, Основание);
	ПараметрыВыбора = Новый Структура("РежимВыбора", Истина);
	ОткрытьФорму(
		"Документ.Событие.Форма.ФормаДокумента",
		ПараметрыВыбора,
		,
		,
		,
		,
		ОписаниеОповещения
	);
	
КонецПроцедуры

Процедура ЗавершитьСозданиеНаОснованииСобытия(ВидСобытия, Основание) Экспорт

	Если ТипЗнч(ВидСобытия)= Тип("СправочникСсылка.ВидыСобытий") Тогда
		
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ВидСобытия", ВидСобытия);
		ЗначенияЗаполнения.Вставить("Основание", Основание);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьПомощникСозданияЧековКоррекции(Основание, Контекст) Экспорт
	
	ПараметрыФормы = Новый Структура("ДокументОснование", Основание);
	
	ОткрытьФорму(
		"Обработка.ПомощникСозданияЧековКоррекции.Форма",
		ПараметрыФормы,
		Контекст.Источник
	);
	
КонецПроцедуры

Процедура НачатьСозданиеНаОснованииКорректировкиРеализации(Основание, Контекст) Экспорт
	
	ПоследняяКорректировка = СозданиеНаОснованииАльфаАвтоВызовСервера.ПолучитьПоследнююКорректировку(Основание);
	
	Если ПоследняяКорректировка = Основание Тогда
		ЗавершитьСозданиеНаОснованииКорерктировки(ПоследняяКорректировка, Контекст);
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИсходныйДокумент", Основание);
		ДополнительныеПараметры.Вставить("ПоследняяКорректировка", ПоследняяКорректировка);
		ДополнительныеПараметры.Вставить("Контекст", Контекст);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьСозданиеНаОснованииКорректировкиРеализации",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		Список = Новый СписокЗначений();
		Список.Добавить("ИcпользоватьТекущий", НСтр("ru = 'На основании текущего'"));
		Список.Добавить("ИспользоватьКорректировку", НСтр("ru = 'На основании корректировки'"));
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Для данного документа найдена'") + Символы.НПП);
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока("корректировка", , , , ПолучитьНавигационнуюСсылку(ПоследняяКорректировка))
		);
		МассивСтрок.Добавить(Символы.ПС + НСтр("ru = 'Ввести новую корректировку'"));
		ТекстВопроса = Новый ФорматированнаяСтрока(МассивСтрок);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Список, , "ИспользоватьКорректировку");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНаОснованииЗакрытияСменыРасходныйСкладскойОрдер(Основание, Контекст) Экспорт
	
	ДанныеОСкладах = СозданиеНаОснованииАльфаАвтоВызовСервера.ПолучитьДанныеОСкладахЗакрытияСмены(Основание, "Расход");
	
	Если ДанныеОСкладах.Склады.Количество() > 0 Тогда
		
		ПараметрыЗаполнения = Новый Структура;
	
		Для Каждого Склад Из ДанныеОСкладах.Склады Цикл
		
			ПараметрыЗаполнения.Вставить("ЗакрытиеСмены", Основание);
			ПараметрыЗаполнения.Вставить("СкладКомпании", Склад);

			ОткрытьФорму(
				"Документ.РасходныйСкладскойОрдер.ФормаОбъекта",
				Новый Структура("Основание", ПараметрыЗаполнения),
				Контекст.Форма,
				Новый УникальныйИдентификатор
			);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеОСкладах.ЕстьОперации Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе основании нет ни одного склада, по которому можно вводить документ расходного складского ордера.'");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ввод расходного складской ордера невозможен: по документу основанию не совершались операции расхода.'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Процедура СоздатьНаОснованииЗакрытияСменыПриходныйСкладскойОрдер(Основание, Контекст) Экспорт
	
	ДанныеОСкладах = СозданиеНаОснованииАльфаАвтоВызовСервера.ПолучитьДанныеОСкладахЗакрытияСмены(Основание, "Приход");
	
	Если ДанныеОСкладах.Склады.Количество() > 0 Тогда
		
		ПараметрыЗаполнения = Новый Структура;
	
		Для Каждого Склад Из ДанныеОСкладах.Склады Цикл
		
			ПараметрыЗаполнения.Вставить("ЗакрытиеСмены", Основание);
			ПараметрыЗаполнения.Вставить("СкладКомпании", Склад);

			ОткрытьФорму(
				"Документ.ПриходныйСкладскойОрдер.ФормаОбъекта",
				Новый Структура("Основание", ПараметрыЗаполнения),
				Контекст.Форма,
				Новый УникальныйИдентификатор
			);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеОСкладах.ЕстьОперации Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе основании нет ни одного склада, по которому можно вводить документ приходного складского ордера.'");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ввод приходного складского ордера невозможен: по документу основанию не совершались операции прихода.'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Процедура СоздатьНаОснованииРабочийЛистОтделаСтрахованияРеализацияТоваров(Основание, Контекст) Экспорт
	
	ДанныеОСтраховщиках = СозданиеНаОснованииАльфаАвтоВызовСервера.ПолучитьДанныеОСтраховщикахРабочийЛистОтделаСтрахования(Основание);
	
	Если ДанныеОСтраховщиках.Количество() > 0 Тогда
		
		ПараметрыЗаполнения = Новый Структура;
	
		Для Каждого Страховщик Из ДанныеОСтраховщиках Цикл
		
			ПараметрыЗаполнения.Вставить("РабочийЛистОтделаСтрахования", Основание);
			ПараметрыЗаполнения.Вставить("Страховщик", Страховщик);

			ОткрытьФорму(
				"Документ.РеализацияТоваров.ФормаОбъекта",
				Новый Структура("Основание", ПараметрыЗаполнения),
				Контекст.Форма,
				Новый УникальныйИдентификатор
			);
			
		КонецЦикла;
		
	Иначе

		ТекстСообщения = НСтр("ru = 'В документе основании нет ни одного варианта страхования, по которому можно вводить документ реализации товаров.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНаОснованииРабочийЛистОтделаСтрахованияСтраховойПолис(Основание, Контекст) Экспорт
	
	ДанныеОВариантахСтрахования = СозданиеНаОснованииАльфаАвтоВызовСервера.ПолучитьДанныеОВариантахСтрахованияРабочийЛистОтделаСтрахования(Основание);
	
	Если ДанныеОВариантахСтрахования.Количество() > 0 Тогда
		
		ПараметрыЗаполнения = Новый Структура;
	
		Для Каждого СтрокаВариантаСтрахования Из ДанныеОВариантахСтрахования Цикл
		
			ПараметрыЗаполнения.Вставить("РабочийЛистОтделаСтрахования", Основание);
			ПараметрыЗаполнения.Вставить("СтрокаВариантаСтрахования", СтрокаВариантаСтрахования);

			ОткрытьФорму(
				"Документ.СтраховойПолис.ФормаОбъекта",
				Новый Структура("Основание", ПараметрыЗаполнения),
				Контекст.Форма,
				Новый УникальныйИдентификатор
			);
			
		КонецЦикла;
		
	Иначе

		ТекстСообщения = НСтр("ru = 'В документе основании нет ни одного варианта страхования, по которому можно вводить документ страхового полиса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПродолжитьСозданиеНаОснованииКорректировкиРеализации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИспользоватьКорректировку" Тогда
		Ссылка = ДополнительныеПараметры.ПоследняяКорректировка;
	Иначе
		Ссылка = ДополнительныеПараметры.ИсходныйДокумент;
	КонецЕсли;
	
	ЗавершитьСозданиеНаОснованииКорерктировки(Ссылка, ДополнительныеПараметры.Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСозданиеНаОснованииКорерктировки(Ссылка, Контекст)
	
	ПараметрыФормы = Новый Структура("Основание", Ссылка);
	
	ОткрытьФорму("Документ.КорректировкаРеализации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

