// Общий модуль "Обработка событий документа (сервер)"

#Область ПрограммныйИнтерфейс

// Общий обработчик события заполнения объекта при вводе на основании существующего.
//
// Параметры:
//  Объект						- ДокументОбъект	- Объект, для которого выполняется обработка события.
//  ДанныеЗаполнения			- Произвольный		- Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения				- Строка			- Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка		- Булево			- В данный параметр передается признак выполнения системной обработки события.
//  ИменаИсключаемыхРеквизитов	- Строка			- Перечень реквизитов, разделенных запятой, которые не участвуют в обработке.
//
// Возвращаемое значение:
//  Булево - Истина - если обработка выполнялась, Ложь - в противном случае.
//
Функция ОбработкаЗаполненияНаОсновании(Объект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		ИменаИсключаемыхРеквизитов = "") Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЗащищенныеФункцииСервер.ОбработкаЗаполненияНаОсновании(Объект, ДанныеЗаполнения, ТекстЗаполнения,
		СтандартнаяОбработка, ИменаИсключаемыхРеквизитов, "ОбработкаСобытийДокументаСервер");
	
КонецФункции // ОбработкаЗаполненияНаОсновании()

// Общий обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  Объект						- ДокументОбъект	- Объект, для которого выполняется обработка события.
//  ДанныеЗаполнения			- Произвольный		- Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения				- Строка			- Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка		- Булево			- В данный параметр передается признак выполнения системной обработки события.
//  ИменаИсключаемыхРеквизитов	- Строка			- Перечень реквизитов, разделенных запятой, которые не участвуют в обработке.
//  ЗаполнятьВсеРеквизиты		- Булево			- Признак заполнения всех реквизитов.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения(Объект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		ИменаИсключаемыхРеквизитов = "",
		ЗаполнятьВсеРеквизиты = Ложь) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЗащищенныеФункцииСервер.ОбработкаЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка,
		ИменаИсключаемыхРеквизитов, "ОбработкаСобытийДокументаСервер", ЗаполнятьВсеРеквизиты);
	
КонецФункции // ОбработкаЗаполнения()

// Общий обработчик события вызываемый по подписке после заполнения объекта как при создании нового,
// так и при вводе на основании существующего.
//
// Параметры:
//	Объект					- ДокументОбъект	- Объект, для которого выполняется обработка события.
//	ДанныеЗаполнения		- ДокументСсылка	- Содержит ссылку на передаваемый объект метаданных.
//	ТекстЗаполнения			- Строка			- Текст, используемый для формирования наименования/кода нового элемента.
//	СтандартнаяОбработка	- Булево			- В данный параметр передается признак выполнения системной обработки события.
//
Процедура ПослеЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Проверим на отказ от выполнения стандартной обработки события
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Получим менеджер текущего объекта
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Если Объект.ДополнительныеСвойства <> Неопределено И Объект.ДополнительныеСвойства.Свойство("ПараметрыДействия") 
		И Объект.ДополнительныеСвойства.ПараметрыДействия.Количество() <> 0 Тогда
		// Производим пересчет суммовых показателей объекта
		МенеджерОбъекта.ОбработкаПересчетаПоказателейОбъекта(Объект, Объект.ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	// Производим расчет и заполнение итоговых показателей документа
	Попытка
		ИтогиОперации = МенеджерОбъекта.РассчитатьИтогиОперации(Объект);
		ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);
	Исключение
		// Метод у объекта не существует
		ПричинаОшибки = ИнформацияОбОшибке();
	КонецПопытки;
	
КонецПроцедуры // ПослеЗаполнения()

// Общий обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  Объект            - ДокументОбъект - Объект, для которого выполняется обработка события.
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	// Инициализируем реквизиты, зависящие от текущего контекста ввода
	Если ЕстьРеквизит(Объект, "ДатаСоздания") Тогда
		Объект.ДатаСоздания = Дата("00010101");
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "ДатаОперации") Тогда
		Объект.ДатаОперации = Дата("00010101");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "Автор") Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Производим корректировку копируемых реквизитов
	Если ЕстьРеквизит(Объект, "ХозОперация") 
		И (НЕ Справочники.ХозОперации.ПолучитьСоответствиеХозОперацииОбъекта(Объект)) Тогда
		Объект.ХозОперация = Справочники.ХозОперации.ПолучитьХозОперациюПоУмолчанию(Объект);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "ДокументОснование") Тогда
		Объект.ДокументОснование = Неопределено;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "Комментарий") Тогда
		Объект.Комментарий = "";
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "СтатусУтверждения") Тогда
		Объект.СтатусУтверждения = Неопределено;
	КонецЕсли;
	
	// Производим заполнение связанных реквизитов
	Если ЕстьРеквизит(Объект, "Менеджер") И НЕ ЗначениеЗаполнено(Объект.Менеджер) Тогда
		Объект.Менеджер = Объект.Автор.Сотрудник;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "КурсДокумента") И ЕстьРеквизит(Объект, "ВалютаДокумента") Тогда
		Объект.КурсДокумента = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "КурсВалютыУпр") Тогда
		Объект.КурсВалютыУпр = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Объект.Дата);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "КурсВалютыВзаиморасчетов") Тогда
		Объект.КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(Объект);
	КонецЕсли;
	
	// Значения фискальных реквизитов не могут копироваться
	Если ЕстьРеквизит(Объект, "НомерЧека") Тогда
		Объект.НомерЧека      = 0;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "ДатаФР") Тогда
		Объект.ДатаФР         = '00010101';
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "НомерСмены") Тогда
		Объект.НомерСмены     = 0;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "НомерДокумента") Тогда
		Объект.НомерДокумента = 0;
	КонецЕсли;
	
	// Если есть реквизит договор, запустим обработчик "При изменении"
	Если ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") Тогда
		ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ПриКопировании()

// Общий обработчик события возникающего при необходимости проверки заполнения реквизитов при записи объекта.
//
// Параметры:
//  Объект               - ДокументОбъект - Объект, для которого выполняется обработка события.
//  Отказ                - Булево         - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив         - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производится.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Объект) Тогда
		ПроверяемыеРеквизиты.Очистить();
		Возврат Ложь;
	КонецЕсли;
	
	// В некоторых случаях контроль корректности заполнения объекта может быть отключен.
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, "ПроверкаЗаполнения", ИСТИНА) Тогда
		ПроверяемыеРеквизиты.Очистить();
		Возврат Ложь;
	КонецЕсли;
	
	// Прекращаем обработку если пользователь работает в "супер" режиме
	Если НЕ  ПраваИНастройкиПользователя.Значение("ПроверкаЗаполненияСправочниковИДокументов", Объект) Тогда
		ПроверяемыеРеквизиты.Очистить();
		Возврат Ложь;
	КонецЕсли;
	
	// Выполняем общую проверку корректности заполнения реквизитов объекта
	ОбработкаСобытийОбъектаСервер.ПроверитьЗаполнениеРеквизитовОбъекта(Объект, Отказ, ПроверяемыеРеквизиты);
	
	// Выполняем общую проверку соответствия установленным в конфигураторе параметрам выбора.
	ОбработкаСобытийОбъектаСервер.ПроверитьПараметрыВыбораРеквизитовОбъекта(Объект, Отказ);
	
	// Проверяем заполненность поля "Характеристика" в соответствии с правилами ведения учета.
	ПроверитьЗаполнениеХарактеристикиНоменклатуры(Объект, Отказ);
	
	// Проверим корректность заполнения количества для серийного товара
	ОбработкаСобытийОбъектаСервер.ПроверитьКоличествоСерийнойНоменклатуры(Объект, Отказ);
	
	// Проверим соответствие вида номенклатуры выбранной ХозОперации
	ПроверитьСоответствиеВидаНоменклатурыХозОперации(Объект, Отказ);
	
	// Если в строке табличной части указана ГТД, то при этом необходимо чтобы Партия также была указана.
	ПроверитьЗаполнениеПартииПоГТД(Объект, Отказ);
	
	// Проверим реквизиты объекта "Подразделение компании" и "Организация" на соответствие.
	ОбработкаСобытийОбъектаСервер.ПроверитьСоответствиеОрганизацииПодразделения(Объект, Отказ);
	
	// Выполняем проверку корректности заполнения по организации и подразделению
	ПроверитьЗаполнениеРеквизитовПоОрганизации(Объект, Отказ);
	
	// Проверяем соответствие выполняемой операции параметрам, указанным в договоре.
	ПроверитьПараметрыОперацииНаСоответствиеДоговору(Объект, Отказ);
	
	// Необходимо проверить уникальность задания номеров
	ПроверитьУникальностьНомеровВходящихДокументов(Объект, Отказ);
	
	// Проверим соответствие валют в документе
	ПроверитьСоответствиеВалют(Объект, Отказ);
	
	// Проверим корректность ставки НДС
	РаботаСоСтавкамиНДССервер.ПроверкаКорректностиВводаСтавкиНДС(Объект, Отказ);
	
	// Произведм проверку наличия в составе номенклатуры данных с признаком прослеживаемости и маркировки
	ПроверитьНоменклатуруНаПрослеживаемостьИМаркировку(Объект, Отказ);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаПроверкиЗаполнения()

// Общий обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Объект          - ДокументОбъект           - Объект, для которого выполняется обработка события.
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производиться.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Объект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим нужно ли сдвигать дату при проведении
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		РежимИспользования = Константы.ИспользованиеОперативногоПроведенияДокументов.Получить();
		Если (РежимИспользования = Перечисления.ИспользованиеОперативногоПроведенияДокументов.ОперативноеПроведениеДляНовыхИНепроведенных И Объект.Проведен) 
				ИЛИ (РежимИспользования = Перечисления.ИспользованиеОперативногоПроведенияДокументов.ОперативноеПроведениеТолькоДляНовых И ЗначениеЗаполнено(Объект.Ссылка)) Тогда
			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		КонецЕсли;
	КонецЕсли;
	
	// Запомним в каком режиме осуществляется операция записи документа
	Объект.ДополнительныеСвойства.Вставить("РежимЗаписи",     РежимЗаписи);
	Объект.ДополнительныеСвойства.Вставить("РежимПроведения", РежимПроведения);
	
	// Выполним проверку документа на корректность заполнения
	ПроверитьЗаполнениеОбъектаПередЗаписью(Объект, Отказ, РежимЗаписи);
	
	// Произведем проверку возможности записи/модификации объекта в текущих условиях
	ПроверитьВозможностьИзмененияОбъекта(Объект, Отказ, РежимЗаписи, РежимПроведения);
	
	// Проверим зацикливание ссылок по дереву подчиненности.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			ПроверитьКорректностьДереваПодчиненности(
				Объект.СводныйРемонтныйЗаказ,
				Отказ,
				Объект.Ссылка,
				Объект.Ссылка,
				НСтр("ru = 'Сводный ремонтный заказ'")
			);
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "ДокументОснование") Тогда
			ПроверитьКорректностьДереваПодчиненности(
				Объект.ДокументОснование,
				Отказ,
				Объект.Ссылка,
				Объект.Ссылка,
				НСтр("ru = 'Документ-основание'")
			);
		КонецЕсли;
		
	КонецЕсли;
	
	// Дальнейшие операции будем выполнять только в случае успешного выполнения предшествующих.
	Если Отказ Тогда
		Возврат Истина;
	КонецЕсли;

	// Получим параметры текущего проверяемого объекта
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка));
	МенеджерОбъекта  = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Флаг используется для регистрации извещений менеджеров о событии резервирования по заказу.
	Если
		ПолучитьФункциональнуюОпцию("ИспользоватьЗначимыеСобытия")
		И РежимЗаписи=РежимЗаписиДокумента.Проведение
		И (ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.КорректировкаЗаказаПокупателя")
			ИЛИ ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.ПеремещениеТоваров")
			ИЛИ ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.ПоступлениеТоваров")
			ИЛИ ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.РезервированиеЗаказовПокупателя"))
	Тогда
		//@skip-check unknown-method-property
		Объект.Движения.ЗаказыПокупателей.ИнтерактивноеПроведение = (НЕ Объект.Проведен);
	КонецЕсли;
	
	//@skip-check empty-except-statement
	Попытка
		ИтогиОперации = МенеджерОбъекта.РассчитатьИтогиОперации(Объект);
		ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);
	Исключение КонецПопытки;
	
	//@skip-check empty-except-statement
	Попытка
		МенеджерОбъекта.РассчитатьСуммуСкидкиНаценки(Объект);
	Исключение
	КонецПопытки;
	
	// Установим дату создания документа
	Если Объект.ЭтоНовый() И ЕстьРеквизит(Объект, "ДатаСоздания") И Не ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда
		
		Объект.ДатаСоздания = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	// Установим дату операции
	Если ЕстьРеквизит(Объект, "ДатаОперации") Тогда
		Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
			Объект.ДатаОперации = ТекущаяДатаСеанса(); 		
		ИначеЕсли Объект.Проведен И РежимЗаписи=РежимЗаписиДокумента.Запись Тогда
			// Оставляем как есть
		ИначеЕсли ОбъектМетаданных.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
			Объект.ДатаОперации = ТекущаяДатаСеанса();
		Иначе
			Объект.ДатаОперации = Дата("00010101");
		КонецЕсли;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", ?(Объект.ЭтоНовый(), Истина, Ложь));
	
	// Перезапишем автора если установлено соответствующее право
	Если ПравоПользователя("ПерезаписьАвтора", Объект) И ЕстьРеквизит(Объект, "Автор") 
		И Объект.Автор <> Пользователи.ТекущийПользователь()  Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ПередЗаписью()

// Устарела. Следует разместить в документе
// Общий обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Объект - ДокументОбъект - Объект, для которого выполняется обработка события.
//  Отказ  - Булево - Признак отказа от совершения операции.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПриЗаписи(Объект, Отказ) Экспорт
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производиться.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Объект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка разрешения на проведение документа при использовании утверждения документов.
	Если УтверждениеДокументовСервер.ИспользоватьУтверждениеДокументов() Тогда
		УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(Объект, Отказ);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ПриЗаписи()

// Устарела. Нужно выносить в документ.
// Общий обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Объект - ДокументОбъект - Объект, для которого выполняется обработка события.
//  Отказ  - Булево         - Признак отказа от совершения операции.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПередУдалением(Объект, Отказ) Экспорт
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производится.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Объект) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	РаботаСГраницами.ПередУдалением(Объект, Отказ);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПередУдалением()

// Общий обработчик события возникающего в транзакции записи для формирования движений по подчиненным регистрам.
//
// Параметры:
//  Объект          - ДокументОбъект           - Объект, для которого выполняется обработка события.
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//  УдалитьДвижения - Булево                   - Признак удаления движений документа.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаПроведения(Объект, Отказ, РежимПроведения, УдалитьДвижения = Истина) Экспорт
	
	// Сохраним существующие движения в допсвойствах объекта.
	СохранениеДвиженийДокумента(Объект);
	
	// Производим очистку регистров, по которым ранее были совершены движения
	Если Объект.Метаданные().УдалениеДвижений = Метаданные.СвойстваОбъектов.УдалениеДвижений.НеУдалятьАвтоматически
		И УдалитьДвижения Тогда
		
		УдалениеДвиженийДокумента(Объект, Истина);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаПроведения()

// Общий обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Объект - ДокументОбъект - Объект, для которого выполняется обработка события.
//  Отказ  - Булево         - Признак отказа от совершения операции.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	// Получим признак удаления документа в процессе проведения, при этом движения должны быть удалены в любом случае.
	ЭтоУдалениеОбъекта = ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, "УдалениеОбъекта", ЛОЖЬ);
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производится.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Объект) И НЕ ЭтоУдалениеОбъекта Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	РаботаСГраницами.ОбработкаУдаленияПроведения(Объект, Отказ);
	
	// Производим чистку только тех регистров, по которым были совершены ранее движения.
	Если Объект.Метаданные().УдалениеДвижений = Метаданные.СвойстваОбъектов.УдалениеДвижений.НеУдалятьАвтоматически Тогда
		
		УдалениеДвиженийДокумента(Объект);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаУдаленияПроведения()

// Общий обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
// Производит заполнение объекта по умолчанию.
//
// Параметры:
//  Объект                     - ДокументОбъект - Объект, для которого выполняется обработка события.
//  ТекстЗаполнения            - Строка         - Текст, используемый для заполнения объекта.
//  ПараметрыДействия          - Структура      - Набор параметров, использующихся при выполнения операции.
//  ИменаИсключаемыхРеквизитов - Строка - Перечень реквизитов, разделенных запятой, которые не участвуют в обработке.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ЗаполнитьОбъектПоУмолчанию(Объект, ТекстЗаполнения, ПараметрыДействия, ИменаИсключаемыхРеквизитов = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Произведем инициализацию реквизитов, которые устанавливаются один раз при создании объекта.
	Если Объект.ЭтоНовый() Тогда
		
		// Инициализируем реквизиты, зависящие от текущего контекста ввода
		Если ЕстьРеквизит(Объект, "ДатаСоздания") Тогда
			Объект.ДатаСоздания = Дата("00010101");
		КонецЕсли;
		Если ЕстьРеквизит(Объект, "ДатаОперации") Тогда
			Объект.ДатаОперации = Дата("00010101");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		Если ЕстьРеквизит(Объект, "Автор") И (НЕ ЗначениеЗаполнено(Объект.Автор)) Тогда
			Объект.Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;
		Если ЕстьРеквизит(Объект, "РегламентированныйУчет") Тогда
			ТипОтношения =  ПраваИНастройкиПользователя.Значение("ЗначениеРегламентированногоУчета", Объект);
			Объект.РегламентированныйУчет = ТипОтношения;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим менеджер текущего объекта
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Производим инициализацию реквизитов, которые имеют сложную логику начального заполнения.
	Если ЕстьРеквизит(Объект, "ХозОперация") И (НЕ ЗначениеЗаполнено(Объект.ХозОперация) 
		ИЛИ НЕ Справочники.ХозОперации.ПолучитьСоответствиеХозОперацииОбъекта(Объект)) Тогда
		Объект.ХозОперация = Справочники.ХозОперации.ПолучитьХозОперациюПоУмолчанию(Объект);
	КонецЕсли;
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОчищатьНеСоответствующийВидНоменклатуры", Истина) 
		И ЕстьРеквизит(Объект, "ХозОперация") И ЕстьРеквизит(Объект, "Номенклатура", "Товары") Тогда
		УдалитьНесоответствующуюПоВидуНоменклатуру(Объект);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "ПодразделениеКомпании") И (НЕ ЗначениеЗаполнено(Объект.ПодразделениеКомпании)) Тогда
		Объект.ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "Организация") И (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
		Объект.Организация = ПараметрыСеанса.Организация;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "Менеджер") И (НЕ ЗначениеЗаполнено(Объект.Менеджер)) Тогда
		Объект.Менеджер = Объект.Автор.Сотрудник;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "СкладКомпании") И (НЕ ЗначениеЗаполнено(Объект.СкладКомпании)) Тогда
		Объект.СкладКомпании =  ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании", Объект);
		
		// Проверим соответствие организации и склада
		Если ЕстьРеквизит(Объект, "Организация") И (Объект.СкладКомпании.Организация <> Объект.Организация) Тогда
			Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "КассаКомпании") И (НЕ ЗначениеЗаполнено(Объект.КассаКомпании)) Тогда
		Объект.КассаКомпании =  ПраваИНастройкиПользователя.Значение("ОсновнаяКассаКомпании", Объект);
		МенеджерОбъекта.КассаКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "СтруктурнаяЕдиница") И (НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница)) Тогда
		Объект.СтруктурнаяЕдиница =  ПраваИНастройкиПользователя.Значение("ОсновнаяКассаКомпании", Объект);
		ПараметрыДействия.Вставить("КассаКомпании", Объект.СтруктурнаяЕдиница);
		МенеджерОбъекта.КассаКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	КассаККМУсловие = ЕстьРеквизит(Объект, "КассаККМ") И (НЕ ЗначениеЗаполнено(Объект.КассаККМ)) 
		И (НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) 
		И (НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"));	
	Если КассаККМУсловие Тогда
		Объект.КассаККМ = Справочники.КассыККМ.ПолучитьОсновнуюКассуККМ();
		МенеджерОбъекта.КассаККМПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "ВалютаДокумента") И (НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента)) Тогда
		Если ЕстьРеквизит(Объект, "КассаККМ") И ЗначениеЗаполнено(Объект.КассаККМ) Тогда
			Объект.ВалютаДокумента = Объект.КассаККМ.ВалютаДенежныхСредств;
		ИначеЕсли ЕстьРеквизит(Объект, "КассаКомпании") И ЗначениеЗаполнено(Объект.КассаКомпании) И НЕ Объект.КассаКомпании.МноговалютнаяКасса Тогда
			Объект.ВалютаДокумента = Объект.КассаКомпании.ВалютаДенежныхСредств;
		ИначеЕсли ЗначениеЗаполнено(Объект.ПодразделениеКомпании) И ЗначениеЗаполнено(Объект.ПодразделениеКомпании.Валюта) Тогда
			Объект.ВалютаДокумента = Объект.ПодразделениеКомпании.Валюта;
		Иначе
			Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "ВалютаДокумента") И ЕстьРеквизит(Объект, "КурсДокумента") Тогда
		Объект.КурсДокумента = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "КурсВалютыУпр") Тогда
		Объект.КурсВалютыУпр = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Объект.Дата);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "ТипЦен") Тогда
		ТипЦенРозничнойТорговлиУсловие = НЕ ЗначениеЗаполнено(Объект.ТипЦен) И ЕстьРеквизит(Объект, "СкладКомпании") 
			И ТипЗнч(Объект.СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании") 
			И Объект.СкладКомпании.Розничный И ЕстьРеквизит(Объект, "ХозОперация") 
			И Объект.ХозОперация.ВидОперации = Перечисления.ВидыОперацийДоговора.Продажа;
		Если ТипЦенРозничнойТорговлиУсловие Тогда
			Объект.ТипЦен = Объект.СкладКомпании.ТипЦенРозничнойТорговли;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			Объект.ТипЦен = Справочники.ХозОперации.ПолучитьОсновнойТипЦен(Объект.ХозОперация);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "Контрагент") И НЕ ЗначениеЗаполнено(Объект.Контрагент) И СтрНайти(ИменаИсключаемыхРеквизитов, "Контрагент") = 0 Тогда
		Объект.Контрагент = Справочники.ХозОперации.ПолучитьОсновногоКонтрагента(Объект.ХозОперация);
		МенеджерОбъекта.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	ДоговорВзаиморасчетовУсловие =  ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") 
		И (НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов)) 
		И ЗначениеЗаполнено(Объект.Контрагент) 
		И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты");
	СпособЗачетаАвансаУсловие = ЕстьРеквизит(Объект, "СпособЗачетаАвансов") 
		И ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") 
		И ЕстьРеквизит(Объект, "ДокументОснование") 
		И НЕ ЕстьРеквизит(Объект.ДокументОснование, "СпособЗачетаАвансов");
	Если ДоговорВзаиморасчетовУсловие Тогда
		ВидДоговора = Неопределено;
		Если ЕстьРеквизит(Объект, "ХозОперация") И ЗначениеЗаполнено(Объект.ХозОперация) Тогда
			ВидДоговора = Справочники.ХозОперации.ПолучитьВидДоговора(Объект.ХозОперация);
		КонецЕсли;
		Объект.ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Объект.Контрагент, ВидДоговора, Объект);
		ПараметрыДействия.Вставить("НеПерезаполнятьПоДоговоруВзаиморасчетов", Истина);
		МенеджерОбъекта.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	ИначеЕсли СпособЗачетаАвансаУсловие Тогда
		Объект.СпособЗачетаАвансов = Объект.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "КурсВалютыВзаиморасчетов") Тогда
		ДокументОснование = ?(ЕстьРеквизит(Объект, "ДокументОснование"), Объект.ДокументОснование, Неопределено);
		Объект.КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(
			Объект,
			?(ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов"),Объект.ДоговорВзаиморасчетов,Неопределено),
			ДокументОснование);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "Проект") Тогда
		Если ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") И ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов.ОсновнойПроект) Тогда
			Если ЗначениеЗаполнено(Объект.Проект) И (НЕ Объект.Проект = Объект.ДоговорВзаиморасчетов.ОсновнойПроект) Тогда
				
				КонтролироватьСоответствиеПроектов =  ПраваИНастройкиПользователя.Значение("КонтролироватьСоответствиеПроектов", Объект);
				
				Если НЕ КонтролироватьСоответствиеПроектов = Перечисления.ВидыКонтроля.НеКонтролировать Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru='Проект %1 договора %2 отличается от проекта %3 документа'"),
							Объект.ДоговорВзаиморасчетов.ОсновнойПроект,
							Объект.ДоговорВзаиморасчетов,
							Объект.Проект),
							Объект,
							"Проект"
					);
				КонецЕсли;
				
				Если КонтролироватьСоответствиеПроектов = Перечисления.ВидыКонтроля.Запрещать Тогда
					Объект.Проект = Объект.ДоговорВзаиморасчетов.ОсновнойПроект;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
				Объект.Проект = Объект.ДоговорВзаиморасчетов.ОсновнойПроект;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
			Если ЕстьРеквизит(Объект, "ПодразделениеКомпании") Тогда
				Объект.Проект = Объект.ПодразделениеКомпании.ОсновнойПроект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "СтавкаНДС") Тогда
		ПараметрыНДС = Новый Структура();
		Если Объект.ХозОперация.ВидОперации = Перечисления.ВидыОперацийДоговора.Покупка Тогда
			ОсвобожденОтНДС = ЕстьРеквизит(Объект, "Контрагент") И (Объект.Контрагент.ОсвобожденОтНДС 
			ИЛИ Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо);
		Иначе
			ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
			ОсвобожденОтНДС = ПараметрыНДС.ОсвобожденОтНДС;
		КонецЕсли; 
		Объект.СтавкаНДС = ?(ОсвобожденОтНДС, Справочники.СтавкиНДС.БезНДС, РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС));
		МенеджерОбъекта.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "Патент") И СтрНайти(ИменаИсключаемыхРеквизитов, "Патент") = 0 Тогда
		Патент = Неопределено;
		Если ЕстьРеквизит(Объект, "ДокументОснование") И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
			Патент = ПолучитьПатентДокументаОснования(Объект.ДокументОснование);
		КонецЕсли;
		Если Патент = Неопределено Тогда 
			ОбработкаРеквизитовДокументаСервер.УстановитьПатентПоОрганизации(Объект);
		Иначе 
			Объект.Патент = Патент;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "ЭтоУниверсальныйДокумент") Тогда
		ОбработкаРеквизитовДокументаСервер.УстановитьПризнакЭтоУниверсальныйДокумент(Объект, Объект.ПодразделениеКомпании);
	КонецЕсли;
	
	ДокументыОрганизации = УправлениеПечатьюПлатформа.ПолучитьДокументыОрганизации();
	ИмяОбъекта = Объект.Метаданные().Имя;
	
	Если ДокументыОрганизации.Найти(ИмяОбъекта)<> Неопределено Тогда
		ЗаполнитьПодписантовИзОрганизации(Объект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ЗаполнитьОбъектПоУмолчанию()

// Заполняет подписантов документа из организации, указанной в нем
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура - заполняемый документ
//
Процедура ЗаполнитьПодписантовИзОрганизации(Объект) Экспорт
	
	Если ЕстьРеквизит(Объект, "Руководитель") Тогда
		Руководитель = ОрганизацииАльфаАвто.Руководитель(Объект.Организация, Объект.Дата);
		Если ЗначениеЗаполнено(Руководитель)Тогда
			Объект.Руководитель = УправлениеПечатьюПлатформа.ПолучитьПодписантаСотрудника(
				Руководитель,
				Объект.Организация,
				Объект.ПодразделениеКомпании
			);
		Иначе
			Объект.Руководитель = Справочники.Подписанты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "ГлавныйБухгалтер") Тогда
		ГлавныйБухгалтер = ОрганизацииАльфаАвто.ГлавныйБухгалтер(Объект.Организация, Объект.Дата);
		Если ЗначениеЗаполнено(ГлавныйБухгалтер)Тогда
			Объект.ГлавныйБухгалтер = УправлениеПечатьюПлатформа.ПолучитьПодписантаСотрудника(
				ГлавныйБухгалтер,
				Объект.Организация,
				Объект.ПодразделениеКомпании
			);
		Иначе
			Объект.ГлавныйБухгалтер = Справочники.Подписанты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "Отпустил") Тогда
		Отпустил = ОрганизацииАльфаАвто.Отпустил(Объект.ПодразделениеКомпании, Объект.Дата);
		Если ЗначениеЗаполнено(Отпустил) Тогда
			Объект.Отпустил = УправлениеПечатьюПлатформа.ПолучитьПодписантаСотрудника(
				Отпустил,
				Объект.Организация,
				Объект.ПодразделениеКомпании
			);
		Иначе
			Объект.Отпустил = Справочники.Подписанты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получение патента документа-основания в иерархии подчиненности документов.
//
// Параметры:
//  ДокументОснование - Документссылка - Ссылка на документ основания.
// 
// Возвращаемое значение:
//  СправочникСсылка.Патенты - Ссылка на справочник Патенты из документа-основания
//
Функция ПолучитьПатентДокументаОснования(ДокументОснование) 

	Если ЕстьРеквизит(ДокументОснование, "Патент") Тогда
		Возврат ДокументОснование.Патент;
	КонецЕсли;

	Патент = Неопределено;
	
	Если ЕстьРеквизит(ДокументОснование, "ДокументОснование") И ЗначениеЗаполнено(ДокументОснование.ДокументОснование) Тогда
		Патент = ПолучитьПатентДокументаОснования(ДокументОснование.ДокументОснование);
	КонецЕсли;
	
	Возврат Патент;
	
КонецФункции

// Производит проверку корректности патента документа.
//
// Параметры:
//  Объект          - ДокументОбъект           - Объект, для которого выполняется обработка события.
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПроверитьПатентОбъекта(Объект, Отказ, РежимЗаписи)

	Если ЕстьРеквизит(Объект,"Патент") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Патент) Тогда 
			Возврат Истина;
		КонецЕсли;

		// Проверим возможность пользователя записывать объекты без проверки корректности
		Если ПраваИНастройкиПользователя.Значение("КонтролироватьЗаполнениеТолькоПриПроведении", Объект) Тогда
			Возврат Истина;
		КонецЕсли;
		Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
			Возврат Истина;
		КонецЕсли;

		ДоступныеПатенты = Справочники.Патенты.ДоступныеПатенты(Объект.Организация, Объект.Дата);
        Если ДоступныеПатенты.Найти(Объект.Патент) = Неопределено Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Патент ""%1"" не принадлежит организации ""%2"" или даты действия патента не соответствуют дате документа ""%3""'"),Объект.Патент,Объект.Организация,Объект),
				Объект,
				,, Отказ
			);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
	
// Производит проверку возможности записи или модификации объекта в целом в текущих условиях.
//
// Параметры:
//  Объект          - ДокументОбъект           - Объект, для которого выполняется обработка события.
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПроверитьВозможностьИзмененияОбъекта(Объект, Отказ, РежимЗаписи, РежимПроведения = Неопределено) Экспорт
	
	// Получим текущие значения флагов управляющих проверками возможности записи или модификации объекта.
	ПроверкаИсторическогоПорядкаОпераций = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства, "ПроверкаИсторическогоПорядкаОпераций", Истина
	);
	ПроверкаИзмененияОбъектовПараметровУчета = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства, "ПроверкаИзмененияОбъектовПараметровУчета", Истина
	);
	ПроверкаИзмененияПометкиУдаления = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства, "ПроверкаИзмененияПометкиУдаления", Истина
	);
	ПроверкаИзмененияПроведенных = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства, "ПроверкаИзмененияПроведенных", Истина
	);
	ПроверкаИзмененияПриНаличииПодчиненных = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства, "ПроверкаИзмененияПриНаличииПодчиненных", Истина
	);
	ПроверкаПроведенияЗаднимЧислом = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства, "ПроверкаПроведенияЗаднимЧислом", Истина
	);
	ПроверкаВводаДокументовПоКураторам = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства, "ПроверкаВводаДокументовПоКураторам", Истина
	);
	ПроверкаУдаленияПриНаличииПодчиненных = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства, "ПроверкаУдаленияПриНаличииПодчиненных", Истина);
	
	// Производим корректировку правим проверки документов введенных на основании объектов Альфы.
	Если ЕстьРеквизит(Объект, "ДокументОснование") И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд")
				ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРемонт"))
			И (ТипЗнч(Объект) <> Тип("ДокументОбъект.АктРазногласий")) Тогда
			
			ПроверкаИсторическогоПорядкаОпераций = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	// Контроль возможности изменения состояния пометки удаления объекта
	Если ПроверкаИзмененияПометкиУдаления
		И НЕ Объект.ЭтоНовый()
		И Объект.Модифицированность()
		И НЕ ПравоДоступа("ИнтерактивнаяПометкаУдаления", Объект.Ссылка.Метаданные())
		И Объект.ПометкаУдаления <> Объект.Ссылка.ПометкаУдаления Тогда
		
		Если Объект.ПометкаУдаления Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Недостаточно прав для установки пометки удаления документа ""%1""'"),Объект),
				Объект,
				,, Отказ
			);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Недостаточно прав для снятия пометки удаления документа ""%1""'"),Объект),
				Объект,
				,, Отказ
			);

		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим объект на использование его в константах
	Если ПроверкаИзмененияОбъектовПараметровУчета 
		И НЕ Объект.ЭтоНовый()
		И Объект.Модифицированность()
		И НЕ  ПраваИНастройкиПользователя.Значение("РедактированиеОбъектовЗначенийКонстант", Объект) Тогда
		
		ИмяКонстанты = "";
		Если ОбработкаСобытийОбъектаСервер.ПроверитьИспользованиеСсылкиВКонстантах(Объект.Ссылка, ИмяКонстанты) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Недостаточно прав для изменения документа указанного в значении параметра учета ""%1""'"),
					ИмяКонстанты
				),
				Объект,
				,, Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим соблюдение исторического порядка ввода операций
	Если ПроверкаИсторическогоПорядкаОпераций Тогда
		
		ПроверитьИсторическийПорядокОпераций(Объект, Отказ, РежимЗаписи, РежимПроведения);
		
	КонецЕсли;
	
	// Можно ли изменять уже проведенные документы
	Если ПроверкаИзмененияПроведенных
		И Объект.Проведен
		И (НЕ ПраваИНастройкиПользователя.Значение("РедактированиеПроведенныхДокументов", Объект)) Тогда 
		
		Если Не (ТипЗнч(Объект) = Тип("ДокументОбъект.РабочийЛист") 
			И Не (Объект.Ссылка.Статус = Справочники.СтатусыРабочегоЛиста.Отказ
				Или Объект.Ссылка.Статус = Справочники.СтатусыРабочегоЛиста.Сделка)) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru='Недостаточно прав для изменения проведенных документов: %1'"), Объект.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, , , Отказ);
					
		КонецЕсли;
			
	КонецЕсли;
	
	// Проверим на наличие подчиненных документов
	Если НЕ Объект.ЭтоНовый()
		И ПроверкаИзмененияПриНаличииПодчиненных Тогда
		
		ЗаблокироватьПриНаличииПодчиненных(Объект.Ссылка, Отказ);
		
	КонецЕсли;
	
	Если НЕ Объект.ЭтоНовый()
		И ПроверкаУдаленияПриНаличииПодчиненных Тогда
		
		ПроверитьУдалениеДокументаПриНаличииПодчиненных(Объект, Отказ);
		
	КонецЕсли;
	
	// Проверим на право проведения не текущей датой
	Если ПроверкаПроведенияЗаднимЧислом Тогда
		
		ПроверитьПроведениеЗаднимЧислом(Объект, Отказ, РежимЗаписи);
		
	КонецЕсли;
	
	// Проверка куратора контрагента
	Если ПроверкаВводаДокументовПоКураторам
		И ЕстьРеквизит(Объект, "Контрагент")
		И ЗначениеЗаполнено(Объект.Контрагент)
		И (НЕ  ПраваИНастройкиПользователя.Значение("ВводДокументовДляВсехКонтрагентов", Объект)) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Кураторы.Контрагент,
		|	Кураторы.Куратор
		|ИЗ
		|	РегистрСведений.Кураторы КАК Кураторы
		|ГДЕ
		|	Кураторы.Контрагент = &Контрагент
		|	И Кураторы.Куратор = &Куратор";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		Запрос.УстановитьПараметр("Куратор",    Пользователи.ТекущийПользователь().Сотрудник);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Недостаточно прав для ввода документов по контрагенту ""%1""'"),Объект.Контрагент), 
				Объект,
				"Контрагент",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьВозможностьИзмененияОбъекта()

// Проверяет корректность заполнения поля "Характеристика" на соответствие правилам ведения учета.
//
// Параметры:
//  Объект - ДокументОбъект - проверяемый документ
//  Отказ  - Булево - признак отказа.
//
Процедура ПроверитьЗаполнениеХарактеристикиНоменклатуры(Объект, Отказ = Ложь) Экспорт
	
	Если НЕ НужнаПроверкаЗаполненияХарактеристики(Объект.ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектМетаданных      = Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка));
	МенеджерОбъекта       = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ОбязательныеРеквизиты = МенеджерОбъекта.ПолучитьОбязательныеРеквизиты(Объект);
	
	Для Каждого ОбъектМетаданныхТаблицы Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		Если НЕ НужнаПроверкаТаблицы(ОбъектМетаданныхТаблицы.Имя, Объект, ОбязательныеРеквизиты) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыУчета = ДайПараметрыУчетаХарактеристикДляНоменклатур(
			Объект[ОбъектМетаданныхТаблицы.Имя].ВыгрузитьКолонку("Номенклатура"));
		
		Для каждого СтрокаТабличнойЧасти Из Объект[ОбъектМетаданныхТаблицы.Имя] Цикл
			
			Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				Отказ = Отказ ИЛИ НеверноЗаполненаХарактеристикаВСтроке(
					СтрокаТабличнойЧасти, ПараметрыУчета, Объект, ОбъектМетаданныхТаблицы.Имя);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеХарактеристикиНоменклатуры()

// Производит проверку заполненности поля Партия в случае, если указан номер ГТД.
//
// Параметры:
//  Объект - ДокументОбъект - проверяемый документ;
//  Отказ  - Булево - признак ошибки.
//
Процедура ПроверитьЗаполнениеПартииПоГТД(Объект, Отказ = Ложь) Экспорт
	
	// Нет смысла выполнять проверку, если учет по ГТД не ведется
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГТД") 
		ИЛИ НЕ ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, "ПроверкаЗаполненияПартииПоГТД", Истина) 
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		Возврат;
	КонецЕсли;
	
	// Получим описание объекта метаданных
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	
	// Последовательно обработаем каждую табличную часть объекта
	Для каждого ОбъектМетаданныхТаблицы Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		// Проверяем целесообразность перебора строк текущей таблицы
		Если НЕ ЕстьРеквизит(ОбъектМетаданных, "Партия", ОбъектМетаданныхТаблицы.Имя) ИЛИ НЕ ЕстьРеквизит(ОбъектМетаданных, "ГТД", ОбъектМетаданныхТаблицы.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		// Выполняем проверку корректности заполнения
		Для каждого СтрокаТабличнойЧасти Из Объект[ОбъектМетаданныхТаблицы.Имя] Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ГТД) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Партия) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Поле ""%1"" строки %2 таблицы ""%3"" не заполнено при указанном значении поля ""%4""'"),
						"Партия",
						СтрокаТабличнойЧасти.НомерСтроки,
						ОбъектМетаданныхТаблицы.Имя,
						"ГТД"
					),
					Объект,
					ОбъектМетаданныхТаблицы.Имя + "[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].Партия",
					, 
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеПартииПоГТД()

// Производит проверку корректности заполнения реквизитов документа по соответствию организации.
//
// Параметры:
//  Объект - ДокументОбъект - проверяемый документ;
//  Отказ  - Булево - признак ошибки.
//
Процедура ПроверитьЗаполнениеРеквизитовПоОрганизации(Объект, Отказ = Ложь) Экспорт
	
	// Проверка имеет смысл только в случае если соответствующие реквизиты документа заполнены.
	НужнаПроверка = (ЕстьРеквизит(Объект, "ПодразделениеКомпании") И ЗначениеЗаполнено(Объект.ПодразделениеКомпании))
		ИЛИ (ЕстьРеквизит(Объект, "Организация") И ЗначениеЗаполнено(Объект.Организация));
	
	Если НЕ НужнаПроверка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проведем проверку соответствия организации документа организациям некоторых реквизитов.
	СпособКонтроляКорректности = ПраваИНастройкиПользователя.Значение("КонтрольКорректностиДоговораИСкладаДокумента", Объект);
	СпособВеденияБаланса       = УчетныеПолитикиСервер.Значение("СпособВеденияБаланса",Объект.Дата);
	
	// Определим параметры проверки
	КонтрольОтсутствует =
		СпособКонтроляКорректности = Перечисления.СпособКонтроляКорректностиДоговораИСкладаДокумента.КонтрольОтсутствует
		И СпособВеденияБаланса = Перечисления.СпособВеденияБаланса.ПоКомпании;
	
	ПоОрганизацииИПодразделению =
		 Перечисления.СпособКонтроляКорректностиДоговораИСкладаДокумента.КонтрольПоОрганизацииИПодразделению;
	КонтрольПоПодразделению = СпособКонтроляКорректности = ПоОрганизацииИПодразделению;
	
	ПоИерархии =
		Перечисления.СпособКонтроляКорректностиДоговораИСкладаДокумента.КонтрольПоОрганизацииИИерархииПодразделению;
	КонтрольПоИерархииПодразделения = СпособКонтроляКорректности = ПоИерархии;
	
	// Проверка необходима, если ведется баланс по организации или требуется контроль корректности договора и склада.
	Если КонтрольОтсутствует Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие Подразделения и Организации объекта
	Если НЕ Объект.ПодразделениеКомпании.Организация = Объект.Организация Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Подразделение ""%1"" не принадлежит организации ""%2""'"),
				Объект.ПодразделениеКомпании,
				Объект.Организация),
			Объект,
			"Организация",
			,
			Отказ
		);
		
	КонецЕсли;
	
	// Получим перечень проверяемых реквизитов для текущего объекта
	Попытка
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		КонтролируемыеРеквизиты = МенеджерОбъекта.ПолучитьРеквизитыКонтроляПоОрганизации(
			Объект, КонтрольПоПодразделению ИЛИ КонтрольПоИерархииПодразделения);
	Исключение
		КонтролируемыеРеквизиты = Новый Структура;
	КонецПопытки;
	
	// Проверяем, имеется ли необходимость в дальнейших операциях
	Если КонтролируемыеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получим описание метаданных текущего и объекта
	ОбъектМетаданных = Объект.Метаданные();
	
	// Последовательно выполняем проверку каждого из указанных реквизитов
	Для каждого КонтролируемыйРеквизит Из КонтролируемыеРеквизиты Цикл
		
		// Обработаем в зависимости от вида реквизита
		Если ТипЗнч(КонтролируемыйРеквизит.Значение) = Тип("Структура") Тогда
			
			// Выполняем обход строк проверяемой табличной части и устанавливаемых табличных частей.
			// Здесь должна быть структура с наименованиями табличных частей.
			Для Каждого СтрокаТабличнойЧасти Из Объект[КонтролируемыйРеквизит.Ключ] Цикл
				Для Каждого КонтролируемыйРеквизитТаблицы Из КонтролируемыйРеквизит.Значение Цикл
					
					// Получаем значение проверяемого реквизита
					Реквизит = СтрокаТабличнойЧасти[КонтролируемыйРеквизитТаблицы.Ключ];
					
					// Возможно проверяемый реквизит необязательный, да еще к тому же не типизированный, поэтому пропустим пустые.
					Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
						Продолжить;
					КонецЕсли;
					ТекстОшибки = "";
					
					// Проверяем на соответствие подразделению и организации
					Если КонтролируемыйРеквизитТаблицы.Значение = Истина
						И (КонтрольПоПодразделению И НЕ Реквизит.ПодразделениеКомпании = Объект.ПодразделениеКомпании) Тогда
						
						ТекстОшибки = 
							НСтр("ru = 'Значение поля ""%1"" в строке №%2 таблицы ""%3"" не соответствует подразделению документа'");
						
					ИначеЕсли КонтролируемыйРеквизитТаблицы.Значение = Истина
						И КонтрольПоИерархииПодразделения
						И НЕ Объект.ПодразделениеКомпании.ПринадлежитЭлементу(Реквизит.ПодразделениеКомпании)
						И НЕ Реквизит.ПодразделениеКомпании = Объект.ПодразделениеКомпании Тогда
						
						ТекстОшибки = 
							НСтр("ru = 'Значение поля ""%1"" в строке №%2 таблицы ""%3"" не соответствует подчиненности подразделению документа'");
						
						ИначеЕсли КонтролируемыйРеквизитТаблицы.Значение <> Неопределено
							И НЕ Реквизит.Организация = Объект.Организация Тогда
						
						ТекстОшибки = 
							НСтр("ru = 'Значение поля ""%1"" в строке №%2 таблицы ""%3"" не соответствует организации документа'");
						
					КонецЕсли;
					
					// Информируем пользователя о найденной коллизии
					Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
						ОбщегоНазначения.СообщитьПользователю(
							СтрШаблон(
								ТекстОшибки,
								КонтролируемыйРеквизитТаблицы.Ключ,
								СтрокаТабличнойЧасти.НомерСтроки,
								КонтролируемыйРеквизит.Ключ
							),
							Объект,
							КонтролируемыйРеквизит.Ключ+"["+ (СтрокаТабличнойЧасти.НомерСтроки-1)+ "].КонтролируемыйРеквизитТаблицы.Ключ",
							,
							Отказ);
					КонецЕсли;
					
				КонецЦикла
			КонецЦикла;
			
		Иначе
			
			// Получаем значение проверяемого реквизита
			Реквизит = Объект[КонтролируемыйРеквизит.Ключ];
			
			// Возможно проверяемый реквизит необязательный, да еще к тому же не типизированный, поэтому пропустим пустые.
			Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
				Продолжить;
			КонецЕсли;
			
			// Получим организацию текущего реквизита
			Организация = ?(ТипЗнч(Реквизит)=Тип("СправочникСсылка.БанковскиеСчета"), Реквизит.Владелец, Реквизит.Организация);
			ТекстОшибки = "";
			
			// Проверяем на соответствие подразделению и организации
			Если КонтролируемыйРеквизит.Значение = Истина
				И (КонтрольПоПодразделению И НЕ Реквизит.ПодразделениеКомпании = Объект.ПодразделениеКомпании) Тогда
				
				ТекстОшибки = НСтр("ru = 'Значение поля ""%1"" не соответствует подразделению документа'");
				
			ИначеЕсли КонтролируемыйРеквизит.Значение = Истина
				И КонтрольПоИерархииПодразделения 
				И НЕ Объект.ПодразделениеКомпании.ПринадлежитЭлементу(Реквизит.ПодразделениеКомпании)
				И НЕ Реквизит.ПодразделениеКомпании = Объект.ПодразделениеКомпании Тогда
				
				ТекстОшибки = НСтр("ru = 'Значение поля ""%1"" не соответствует подчиненности подразделению документа'");
				
			ИначеЕсли КонтролируемыйРеквизит.Значение <> Неопределено И НЕ Организация = Объект.Организация Тогда
				
				ТекстОшибки = НСтр("ru = 'Значение поля ""%1"" не соответствует организации документа'");
				
			КонецЕсли;
			
			// Информируем пользователя о найденной коллизии
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(ТекстОшибки, КонтролируемыйРеквизит.Ключ), 
					Объект,
					,
					,
					Отказ
				);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовПоОрганизации()

// Проверяет соответствие параметров текущей операции, параметрам указанного договора.
//
// Параметры:
//  Объект - ДокументОбъект - проверяемый документ;
//  Отказ  - Булево - признак ошибки.
//
Процедура ПроверитьПараметрыОперацииНаСоответствиеДоговору(Объект, Отказ = Ложь) Экспорт
	
	// Если у операции нет реквизита договора, то и проверку выполнять не требуется
	Если НЕ ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) 
		ИЛИ НЕ ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, 
								"КонтрольОперацииНаСоответствиеДоговору", Истина) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие вида договора хоз. операции документа
	Если ЕстьРеквизит(Объект, "ХозОперация") И НЕ Справочники.ХозОперации.ДоговорСоответствуетХозОперации(Объект.ХозОперация, Объект.ДоговорВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Вид договора не соответствует Хоз. операции'"), Объект, "ДоговорВзаиморасчетов",, Отказ);
	КонецЕсли;
	
	// Получим текущий режим контроля соответствия проектов
	РежимКонтроляПроектов =  ПраваИНастройкиПользователя.Значение("КонтролироватьСоответствиеПроектов", Объект);
	
	// выполняем проверку соответствия проекта документа и договора
	Если  НЕ (НЕ Константы.ИспользоватьПроекты.Получить() 
			ИЛИ РежимКонтроляПроектов = Перечисления.ВидыКонтроля.НеКонтролировать 
			ИЛИ (НЕ ЕстьРеквизит(Объект, "Проект")) ИЛИ Объект.ДоговорВзаиморасчетов.ОсновнойПроект = Объект.Проект) Тогда
				
		// Получим представления проектов договора и документа
		ПредставлениеПроектаДокумента = ?(ЗначениеЗаполнено(Объект.Проект), СокрЛП(Объект.Проект), "пустой");
		ПредставлениеПроектаДоговора  = ?(ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов.ОсновнойПроект), Объект.ДоговорВзаиморасчетов.ОсновнойПроект, "пустой");
		
		// Формируем текст сообщения пользователю
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Проект <%1> договора ""%2"" отличается от проекта <%3> документа'"),
			ПредставлениеПроектаДоговора,
			Объект.ДоговорВзаиморасчетов,
			ПредставлениеПроектаДокумента
		);
		
		Если РежимКонтроляПроектов = Перечисления.ВидыКонтроля.Предупреждать Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "Проект");
			
		ИначеЕсли РежимКонтроляПроектов = Перечисления.ВидыКонтроля.Запрещать Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "Проект",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПараметрыОперацииНаСоответствиеДоговору()

// Производит проверку уникальности указанного входящего номера документа.
//
// Параметры:
//  Объект - ДокументОбъект - проверяемый документ;
//  Отказ  - Булево - признак ошибки.
//
Процедура ПроверитьУникальностьНомеровВходящихДокументов(Объект, Отказ = Ложь) Экспорт
	
	// Получим текущий режим контроля номеров входящих документов
	РежимКонтроляНомеров =  ПраваИНастройкиПользователя.Значение("ПроверятьУникальностьВходящихИВнешнихНомеровДокументов", Объект);
	
	// Прекращаем обработку, если контроль не требуется
	Если РежимКонтроляНомеров=Перечисления.ВидыКонтроля.НеКонтролировать Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем в зависимости от вида документа
	Если ЕстьРеквизит(Объект, "ВхДокНомер") И ЗначениеЗаполнено(Объект.ВхДокНомер) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	" + Объект.Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.ВхДокНомер = &ВхДокНомер
		|	И Таблица.Ссылка <> &Ссылка
		|	И Таблица.ВхДокДата МЕЖДУ &НачВхДокДата И &КонВхДокДата 
		| И Таблица.Контрагент = &Контрагент
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.ВхДокДата";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка",       Объект.Ссылка);
		Запрос.УстановитьПараметр("ВхДокНомер",   Объект.ВхДокНомер);
		Запрос.УстановитьПараметр("НачВхДокДата", НачалоГода(Объект.ВхДокДата));
		Запрос.УстановитьПараметр("КонВхДокДата", КонецГода(Объект.ВхДокДата));
		Запрос.УстановитьПараметр("Контрагент",   Объект.Контрагент);
		
		
				
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// Формируем текст сообщения пользователю
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Повторение входящих номеров документов в пределах контрагента ""%1"": %2'"),
				Объект.Контрагент,
				Выборка.Ссылка
			);

			Если РежимКонтроляНомеров=Перечисления.ВидыКонтроля.Предупреждать Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ВхДокНомер");
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ВхДокНомер",, Отказ);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЕстьРеквизит(Объект, "ВнешнийНомерЗаказа") И ЗначениеЗаполнено(Объект.ВнешнийНомерЗаказа) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	" + Объект.Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.ВнешнийНомерЗаказа = &ВнешнийНомерЗаказа
		|	И Таблица.Ссылка <> &Ссылка
		|	И Таблица.Контрагент = &Контрагент
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.Дата";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка",             Объект.Ссылка);
		Запрос.УстановитьПараметр("ВнешнийНомерЗаказа", Объект.ВнешнийНомерЗаказа);
		Запрос.УстановитьПараметр("Контрагент",         Объект.Контрагент);
		
				
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// Формируем текст сообщения пользователю
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Повторение внешних номеров документов в пределах контрагента ""%1"": %2'"),
				Объект.Контрагент,
				Выборка.Ссылка
			);
			Если РежимКонтроляНомеров=Перечисления.ВидыКонтроля.Предупреждать Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ВнешнийНомерЗаказа");
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ВнешнийНомерЗаказа",, Отказ); 
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьУникальностьНомеровВходящихДокументов()

// Производит проверку соответствия валюты документа и кассы, кассы ККМ и банковскому счету.
//
// Параметры:
//  Объект - ДокументОбъект - проверяемый документ;
//  Отказ  - Булево - признак ошибки.
//
Процедура ПроверитьСоответствиеВалют(Объект, Отказ = Ложь) Экспорт
	
	// Если у нет реквизита валюты, то и проверку выполнять не требуется
	Если НЕ ЕстьРеквизит(Объект, "ВалютаДокумента") ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "КассаКомпании")
		И ЗначениеЗаполнено(Объект.КассаКомпании)
		И НЕ Объект.КассаКомпании.МноговалютнаяКасса
		И Объект.ВалютаДокумента <> Объект.КассаКомпании.ВалютаДенежныхСредств Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Валюта документа (<%1>) не соответствует валюте кассы компании (<%2>).'"),
				Объект.ВалютаДокумента,
				Объект.КассаКомпании.ВалютаДенежныхСредств
			),
			Объект,
			, ,
			Отказ);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "КассаККМ")
		И ЗначениеЗаполнено(Объект.КассаККМ)
		И Объект.ВалютаДокумента <> Объект.КассаККМ.ВалютаДенежныхСредств
		И (ЕстьРеквизит(Объект, "ДляПробитияНаФР") И Объект.ДляПробитияНаФР ИЛИ НЕ ЕстьРеквизит(Объект, "ДляПробитияНаФР")) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Валюта документа (<%1>) не соответствует валюте кассы ККМ (<%2>).'"),
				Объект.ВалютаДокумента,
				Объект.КассаККМ.ВалютаДенежныхСредств
			),
			Объект,
			, ,
			Отказ
		);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "БанковскийСчет")
		И ЗначениеЗаполнено(Объект.БанковскийСчет)
		И Объект.ВалютаДокумента <> Объект.БанковскийСчет.ВалютаДенежныхСредств Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Валюта документа (<%1>) не соответствует валюте банковского счета (<%2>).'"),
				Объект.ВалютаДокумента,
				Объект.БанковскийСчет.ВалютаДенежныхСредств
			),
			Объект,
			, ,
			Отказ
		);

	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоответствиеВалют()

// Производит проверку соответствия банковского счета документа и организации либо подразделения компании.
//
// Параметры:
//  Счет                   - СправочникСсылка.БанковскиеСчета       - Счет проверки.
//  Организация            - СправочникСсылка.Организации           - Организация счета.
//  Подразделение          - СправочникСсылка.ПодразделенияКомпании - Подразделение счета.
//  ДополнительныеСвойства - Структура                              - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Булево - Истина банковский счет корректный, иначе ложь.
//
Функция ПроверитьКорректностьБанковскогоСчета(Счет, Организация, Подразделение, ДополнительныеСвойства=Неопределено) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Счет.Владелец = Организация Тогда
		Возврат Истина;
	КонецЕсли;
	
	Родитель = Подразделение;
	Если  ЗначениеЗаполнено(Родитель) Тогда
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПодразделенияКомпании.Ссылка КАК Ссылка,
			|	ПодразделенияКомпании.Родитель КАК Родитель
			|ИЗ
			|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
			|ГДЕ
			|	ПодразделенияКомпании.Ссылка = &Родитель
			|ИТОГИ ПО
			|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("Родитель", Родитель);
		ТаблицаПодразделений = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаПодразделений.Количество() > 0 Тогда 
			Пока ЗначениеЗаполнено(Родитель) Цикл			
				
				Если Счет.Владелец = Родитель Тогда
					Возврат Истина;
				КонецЕсли;
				
				Строка = ТаблицаПодразделений.Найти(Родитель,"Ссылка" );
				Если Строка = Неопределено Тогда 
					Возврат Ложь;
				Иначе
					Родитель = Строка.Родитель;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьКорректностьБанковскогоСчета()

// Устанавливает управляемую блокировку таблицы
//
// Параметры:
//  СтруктураПараметров 		- Структура - Структура параметров блокировки. Обязательный параметр.
//								  Обязательно должна содержать свойства:
//			* ИмяТаблицы		  - Строка - имя таблицы, на которую накладывается блокировка.
//									Например: "АвансовыйОтчет"
//								Необязательные свойства:
//			* ТипТаблицы		  - Строка - тип таблицы, на которую накладывается блокировка.
//									Пространство блокировки состоит из типа таблицы и имени таблицы.
//									Например: "Документ"
//									Значение по умолчанию: "РегистрНакопления"
//			* РежимБлокировки     - РежимБлокировкиДанных - режим накладываемой блокировки.
//									Значение по умолчанию: РежимБлокировкиДанных.Исключительный
//			* ИсточникДанных      - Произвольный - источник данных для блокировки.
//									Может передаваться значение любого типа, поддерживаемого свойством ИсточникДанных элемента блокировки,
//									а также типа "Менеджер временных таблиц".
//									Если в структуре нет этого свойства - блокировки через ИспользоватьИзИсточникаДанных() не накладываются.
//			* ИмяВременнойТаблицы - Строка - имя временной таблицы менеджера временных таблиц,
//									которая служит источником данных для блокировки. Обязательно должно указываться,
//									если в качестве источника данных процедуре передан менеджер временных таблиц.
//  КоллекцияЗначенийБлокировки	 - Структура, Соответствие - описывает значения блокировки,
//								   накладываемые с помощью УстановитьЗначение().
//			* Ключ				  - Строка, ПланыВидовХарактеристикСсылка,
//										ПланыВидовХарактеристикСсылка используется для блокировки регистра бухгалтерии по виду субконто.
//			* Значение			  - Произвольный - Блокируемое значение
//									Если передано Неопределено или если коллекция не содержит ни одного элемента -
//									блокировки методом УстановитьЗначение() не накладываются.
//  КоллекцияОписанияИсточника	 - Структура, Соответствие - описывает значения блокировки,
//								  накладываемые с помощью ИспользоватьИзИсточникаДанных().
//			* Ключ				  - Строка, ПланыВидовХарактеристикСсылка - поле блокировки. 
//										ПланыВидовХарактеристикСсылка используется для блокировки регистра бухгалтерии по виду субконто.
//			* Значение			  - Строка - поле таблицы источника данных
//									Если передано Неопределено или если коллекция не содержит ни одного элемента -
//									блокировки методом ИспользоватьИзИсточникаДанных() не накладываются.
//  Отказ 						- Булево - при ошибке в процессе установки блокировки в этот параметр процедура
//								           возвращает значение Истина.
//
Процедура УстановитьУправляемуюБлокировку(СтруктураПараметров, КоллекцияЗначенийБлокировки = Неопределено, КоллекцияОписанияИсточника = Неопределено, Отказ = Ложь) Экспорт
	
	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") ИЛИ НЕ Константы.НомерРелизаКонфигурации.Получить() = "" Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьЗначенияБлокировки = КоллекцияЗначенийБлокировки <> Неопределено 
		И (ТипЗнч(КоллекцияЗначенийБлокировки) = Тип("Структура") 
		 ИЛИ ТипЗнч(КоллекцияЗначенийБлокировки) = Тип("Соответствие"))
		И КоллекцияЗначенийБлокировки.Количество() > 0;
		
	ИспользоватьИсточникДанных = КоллекцияОписанияИсточника <> Неопределено 
		И (ТипЗнч(КоллекцияОписанияИсточника) = Тип("Структура") 
		 ИЛИ ТипЗнч(КоллекцияОписанияИсточника) = Тип("Соответствие"))
		И КоллекцияОписанияИсточника.Количество() > 0
		И СтруктураПараметров.Свойство("ИсточникДанных");
	
	Если (НЕ ИспользоватьЗначенияБлокировки) И (НЕ ИспользоватьИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ТипТаблицы = ?(СтруктураПараметров.Свойство("ТипТаблицы"), СтруктураПараметров.ТипТаблицы, "РегистрНакопления");
	ИмяТаблицы = СтруктураПараметров.ИмяТаблицы;
	ПространствоБлокировки = ТипТаблицы + "." + ИмяТаблицы;
	ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);
	
	РежимБлокировки = ?(СтруктураПараметров.Свойство("РежимБлокировки"), СтруктураПараметров.РежимБлокировки, РежимБлокировкиДанных.Исключительный);
	ЭлементБлокировки.Режим = РежимБлокировки;
	
	Если ИспользоватьЗначенияБлокировки И НЕ ИспользоватьИсточникДанных Тогда
		Для Каждого ЭлементКоллекции Из КоллекцияЗначенийБлокировки Цикл
			ЭлементБлокировки.УстановитьЗначение(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		КонецЦикла;
	Иначе
		ИсточникДанных = СтруктураПараметров.ИсточникДанных; 
		Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
			ТекстЗапроса = "";
			Для Каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл
				ТекстЗапроса = ТекстЗапроса + ",
				|	Таб." + ЭлементКоллекции.Значение;
			КонецЦикла;
			ТекстЗапроса = Сред(ТекстЗапроса, 2);
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ"
			+ ТекстЗапроса + "
			|ИЗ
			|	" + СтруктураПараметров.ИмяВременнойТаблицы + " КАК Таб";
			Запрос.Текст = ТекстЗапроса;
			ИсточникДанных = Запрос.Выполнить();
		КонецЕсли;
		
		Если ИспользоватьЗначенияБлокировки Тогда
			Если ТипЗнч(ИсточникДанных) = Тип("ТаблицаЗначений") Тогда
				ИсточникДанных = ИсточникДанных.Скопировать();
			Иначе
				ИсточникДанных = ИсточникДанных.Выгрузить();
			КонецЕсли;
			
			ТекстКолонок = "";
			Для Каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл
				Если ИсточникДанных.Колонки.Найти(ЭлементКоллекции.Значение) = Неопределено Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = '<%1>. Не установлена блокировка по полю ""%2"" колонки ""%3"" нет в источнике данных.'"),
							ПространствоБлокировки,
							ЭлементКоллекции.Ключ,
							ЭлементКоллекции.Значение
						)
					);
					Продолжить;
				КонецЕсли;
				ТекстКолонок = ТекстКолонок + ?(ТекстКолонок = "", "", ", ") + ЭлементКоллекции.Значение;
			КонецЦикла;
			ИсточникДанных.Свернуть(ТекстКолонок);
			
			Для Каждого ЭлементКоллекции Из КоллекцияЗначенийБлокировки Цикл
				Если ИсточникДанных.Колонки.Найти(ЭлементКоллекции.Ключ) = Неопределено Тогда
					ТипКолонки = Новый Массив;
					ТипКолонки.Добавить(ТипЗнч(ЭлементКоллекции.Значение));
					ИсточникДанных.Колонки.Добавить(ЭлементКоллекции.Ключ, Новый ОписаниеТипов(ТипКолонки));
				КонецЕсли;
				ИсточникДанных.ЗаполнитьЗначения(ЭлементКоллекции.Значение, ЭлементКоллекции.Ключ);
			КонецЦикла;
		КонецЕсли;
		
		ЭлементБлокировки.ИсточникДанных = ИсточникДанных;
		
		Для Каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		КонецЦикла;
		
		Если ИспользоватьЗначенияБлокировки Тогда
			Для Каждого ЭлементКоллекции Из КоллекцияЗначенийБлокировки Цикл
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ЭлементКоллекции.Ключ, ЭлементКоллекции.Ключ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		ВызватьИсключение НСтр("ru = 'Операция не выполнена'");
	КонецПопытки;
	
КонецПроцедуры // УстановитьУправляемуюБлокировку()

// Допроводить документ по партионным регистрам 
//
// Параметры:
//  Ссылка - ДокументСсылка - Передается если надо провести только указанный документ.
//
Процедура ДопровестиПоПартиям(Ссылка = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДопроведениеПоПартиям);
	
	// проверим можно ли в этом узле допроводить по партиям
	РежимПроведенияПоПартиям = ПолучитьРежимПроведенияПоПартиям();
	
	// Допроведение выполняем только если партии используются и допроведение выполняется в этом узле.
	Если НЕ РежимПроведенияПоПартиям = Перечисления.РежимыПроведенияПартий.ПервичнымиДокументамиДопроведение Тогда
		Возврат;
	КонецЕсли; 
	
	// Сначала попытаемся произвести корректировку ошибок, которые могли возникнуть при обмене.
	Для Каждого Документ Из Метаданные.Документы Цикл
		
		// посмотрим проводится ли документ по регистру ДопроведениеПоПартиям
		ЕстьДопроведение = Ложь;
		Для Каждого Рег Из Документ.Движения Цикл
			Если ВРЕГ(Рег.Имя) = ВРЕГ("ДопроведениеПоПартиям") Тогда
				ЕстьДопроведение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЕстьОстаткиТоваровКомпании = Ложь;
		Для Каждого Рег Из Документ.Движения Цикл
			Если ВРЕГ(Рег.Имя) = ВРЕГ("ОстаткиТоваровКомпании") Тогда
				ЕстьОстаткиТоваровКомпании = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьОстаткиТоваровКомпании Тогда
			Продолжить;
		КонецЕсли;
		
		// пропустим то что не будем рассматривать
		Если НЕ ЕстьДопроведение Тогда
			Продолжить;
		КонецЕсли;
		
		// Уберем из корректировки ошибок те документы по которым может быть, а может и не быть
		// движений по регистру "ПартииТоваровКомпании".
		Если РегистрыСведений.ДопроведениеПоПартиям.ДокументНеВсегдаПроводитьсяПоПартиям(Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		// Ищем проведенные документы, у которых не пустая табл. часть и нет движений по регистру партий
		// и нет записей в регистре допроведения.
		Попытка
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Док.Ссылка,
			|	Док.Дата,
			|	Док.ПодразделениеКомпании
			|ИЗ
			|	Документ." + Документ.Имя + " КАК Док
			|	
			|ГДЕ
			|	НЕ Док.Ссылка В (ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(Регистратор КАК Документ." + Документ.Имя + ") ИЗ РегистрСведений.ДопроведениеПоПартиям ГДЕ Регистратор = Док.Ссылка)
			|	И Док.Ссылка В (ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(Регистратор КАК Документ." + Документ.Имя + ") ИЗ РегистрНакопления.ОстаткиТоваровКомпании ГДЕ Регистратор = Док.Ссылка)
			|	И НЕ Док.Ссылка В (ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(Регистратор КАК Документ." + Документ.Имя + ") ИЗ РегистрНакопления.ПартииТоваровКомпании ГДЕ Регистратор = Док.Ссылка)
			|	И Док.Проведен
			|	И НЕ 0 В (ВЫБРАТЬ КОЛИЧЕСТВО(*) КАК КоличествоСтрок ИЗ Документ." + Документ.Имя + ".Товары ГДЕ Ссылка = Док.Ссылка)		
			|");
			Рез = Запрос.Выполнить();
			Если Рез.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			// для таких документов создадим запись в регистре допроведения
			Выборка = Рез.Выбрать();
			МассивУзловПолучателей = Неопределено;
			
			Пока Выборка.Следующий() Цикл
				ТекРегистратор = Выборка.Ссылка;
				НаборЗаписейДопроведение = РегистрыСведений.ДопроведениеПоПартиям.СоздатьНаборЗаписей();
				НаборЗаписейДопроведение.Отбор.Регистратор.Значение = ТекРегистратор;
				НаборЗаписейДопроведение.Отбор.Регистратор.Использование = Истина;
				НоваяЗапись = НаборЗаписейДопроведение.Добавить();
				НоваяЗапись.Период = Выборка.Дата;
				НоваяЗапись.Регистратор = ТекРегистратор;
				НоваяЗапись.ПодразделениеКомпании = Выборка.ПодразделениеКомпании;
				
				Попытка НаборЗаписейДопроведение.Записать(Истина);
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось записать движения по регистру ""Допроведение по партиям""'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЦикла;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при формировании движения по регистру ""Допроведение по партиям""'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	// Массив партионных регистров
	МассивПартионныхРегистров = РегистрыСведений.ДопроведениеПоПартиям.ПолучитьПартионныеРегистры();
	
	// Метаданные регистров
	Для Инд = 0 По МассивПартионныхРегистров.ВГраница() Цикл
		МассивПартионныхРегистров[Инд] = Метаданные.РегистрыНакопления[МассивПартионныхРегистров[Инд]];
	КонецЦикла; 
	
	// Выберем все документы которые надо допровести
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДопроведениеПоПартиям.Регистратор
	|ИЗ
	|	РегистрСведений.ДопроведениеПоПартиям КАК ДопроведениеПоПартиям
	|" + ?(НЕ ЗначениеЗаполнено(Ссылка), "", "ГДЕ ДопроведениеПоПартиям.Регистратор = &Ссылка") + "
	|УПОРЯДОЧИТЬ ПО Регистратор.Дата Возр, Регистратор");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	// если работает робот, то все документы в которых были ошибки, запишем в лог
	ЭтотУзелОбъект = ПланыОбмена.УдаленныеПодразделения.ЭтотУзел().ПолучитьОбъект();
	
	КешМетаданныхОбъектов = Новый Соответствие;
	КешУзловПолучателей = Новый Соответствие; 
	
	// идем по документам которые надо допровести
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыбранныйДокумент = Выборка.Регистратор;
		ТипДанных = ТипЗнч(ВыбранныйДокумент);
		
		// создадим пустой документ-объект того же вида что и допроводимый документ
		ДокОбъект = Документы[ВыбранныйДокумент.Метаданные().Имя].СоздатьДокумент();
		ДокОбъект.ДополнительныеСвойства.Вставить("МоментВремениБыл");
		
		// инициализируем начало проведения
		ОбработкаПроведения(ДокОбъект, Ложь, РежимПроведенияДокумента.Неоперативный);
		
		// Вызываем функцию ПровестиПоПартиям(...), пустого документа, передав в нее ссылку на документ,
		// для которого хотим сформировать движения.
		НачатьТранзакцию();
		Попытка
			
			Если НЕ ДокОбъект.ПровестиПоПартиям(РежимПроведенияДокумента.Неоперативный, ВыбранныйДокумент) Тогда
				СтрЛога = "";
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		// Сформированные движения "сидят" в пустом документе. Надо их взять оттуда и дописать к тому документу,
		// который хотим допровести.
		Для Каждого Рег Из МассивПартионныхРегистров Цикл
			
			Попытка
				НаборЗаписейОбъекта = ДокОбъект.Движения[Рег.Имя];
			Исключение
				Продолжить;
			КонецПопытки;
			
			НаборЗаписей = РегистрыНакопления[Рег.Имя].СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(НаборЗаписейОбъекта.Выгрузить());
			НаборЗаписей.Отбор.Регистратор.Значение = ВыбранныйДокумент;
			НаборЗаписей.Отбор.Регистратор.Использование = Истина;
			
			// Если имеем дело с доходами и расходами, то надо взять из допроводимого документа уже сформированные движения по ДиР,
			// исключив статью "Себестоимость неоприходованных партий".
			Если ВРЕГ(Рег.Имя) = ВРЕГ("ДоходыИРасходы") Тогда
				ЗапросДиР = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрНакопления.ДоходыИРасходы ГДЕ Регистратор = &Ссылка И СтатьяДоходовИРасходов <> &СебестоимостьНеоприходованныхПартий");
				ЗапросДиР.УстановитьПараметр("Ссылка",ВыбранныйДокумент);
				ЗапросДиР.УстановитьПараметр("СебестоимостьНеоприходованныхПартий", Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий);
				РезультатДиР = ЗапросДиР.Выполнить();
				Если НЕ РезультатДиР.Пустой() Тогда
					ВыборкаДиР = РезультатДиР.Выбрать();
					Пока ВыборкаДиР.Следующий() Цикл
						НоваяЗапись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДиР);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение
				ОтменитьТранзакцию(); 
				СтрОшибки = ОписаниеОшибки();
				
				Прервать;
			КонецПопытки;
			
			// Почистим движения пустого документа
			НаборЗаписейОбъекта.Очистить();
		КонецЦикла;
		
		// В инвентаризации еще есть взаиморасчеты
		Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.Инвентаризация") Тогда
			НаборЗаписейОбъекта = ДокОбъект.Движения.РасчетыСКонтрагентами;
			НаборЗаписей = РегистрыНакопления.РасчетыСКонтрагентами.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(НаборЗаписейОбъекта.Выгрузить());
			НаборЗаписей.Отбор.Регистратор.Значение = ВыбранныйДокумент;
			НаборЗаписей.Отбор.Регистратор.Использование = Истина;
			
			Попытка 
				НаборЗаписей.Записать(Истина);
			Исключение
				СтрОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			НаборЗаписейОбъекта.Очистить();
			
			НаборЗаписейОбъекта = ДокОбъект.Движения.ВзаиморасчетыКомпании;
			НаборЗаписей = РегистрыНакопления.ВзаиморасчетыКомпании.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(НаборЗаписейОбъекта.Выгрузить());
			НаборЗаписей.Отбор.Регистратор.Значение = ВыбранныйДокумент;
			НаборЗаписей.Отбор.Регистратор.Использование = Истина;
			
			Попытка 
				НаборЗаписей.Записать(Истина);
			Исключение
				СтрОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			НаборЗаписейОбъекта.Очистить();
			
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ДопроведениеПоПартиям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = ВыбранныйДокумент;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Записать(Истина);
		ЗафиксироватьТранзакцию();
		ДокОбъект = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ДопровестиПоПартиям()

// Производит получение фактической суммы списания и устанавливает это значение как итоговую сумму документа.
//
// Параметры:
//  Объект                - ДокументОбъект - Документ, для которого выполняется пересчет
//  Отказ                 - Булево         - Признак ошибки
//  ИмяРегистра           - Строка         - Имя регистра накопления, по которому получаем сумму списания
//  СуммаДополнительная   - Число          - Дополнительная сумма документа
//  РежимОтменыПроведения - Булево         - Признак отмены проведения.
//
Процедура ПересчитатьСуммуДокументаПоСебестоимостиСписания(Объект, Отказ, ИмяРегистра=Неопределено, СуммаДополнительная = 0, РежимОтменыПроведения = ЛОЖЬ) Экспорт
	
	// Проверяем, есть ли смысл производить дальнейшие действия
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// В режиме отмены проведения записывать повторно документ не нужно, просто обнулим итоговую сумму.
	Если РежимОтменыПроведения Тогда
		Объект.СуммаДокумента = СуммаДополнительная;
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияСуммыСписания();
	ПараметрыПолучения.ИмяРегистра = ИмяРегистра;
	СуммаДокумента = СуммаДополнительная + ЗащищенныеФункцииСервер.ПолучитьСуммуСписания(Объект, ПараметрыПолучения);
	
	Если Объект.СуммаДокумента=СуммаДокумента Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Объект.СуммаДокумента = СуммаДокумента;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ПричинаОшибки = ИнформацияОбОшибке();
		Отказ = Истина;
	КонецПопытки;
	
	Объект.ОбменДанными.Загрузка = Ложь;
	
КонецПроцедуры // ПересчитатьСуммуДокументаПоСебестоимостиСписания()

// Заполняет реквизиты СуммаСписания и СуммаСписанияБезНДС
// 
// Параметры: 
//  Объект 					- ДокументОбъект - Документ, для которого выполняется пересчет 
//  Отказ 					- Булево 		 - Признак ошибки 
//  ИмяРегистра 			- Строка    	 - Имя регистра накопления, по которому получаем сумму списания 
//  РежимОтменыПроведения 	- Булево         - Признак отмены проведения.
//
Процедура ЗаполнитьРеквизитыСуммСписанияВДокументе(Объект, Отказ, ИмяРегистра, РежимОтменыПроведения = Ложь) Экспорт
	
	// Проверяем, есть ли смысл производить дальнейшие действия
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// В режиме отмены проведения записывать повторно документ не нужно, просто обнулим итоговую сумму.
	Если РежимОтменыПроведения Тогда
		Объект.СуммаСписания = 0;
		Объект.СуммаСписанияБезНДС = 0;
		Возврат;
	КонецЕсли;
	
	Суммы = ЗащищенныеФункцииСервер.ПолучитьРеквизитыСуммСписанияВДокументе(Объект, ИмяРегистра);
	
	Если Объект.СуммаСписания = Суммы.СуммаСписания
		И Объект.СуммаСписанияБезНДС = Суммы.СуммаСписанияБезНДС Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если Объект.СуммаСписания <> Суммы.СуммаСписания Тогда
			Объект.СуммаСписания = Суммы.СуммаСписания;
		КонецЕсли;
		Если Объект.СуммаСписанияБезНДС <> Суммы.СуммаСписанияБезНДС Тогда
			Объект.СуммаСписанияБезНДС = Суммы.СуммаСписанияБезНДС;
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ПричинаОшибки = ИнформацияОбОшибке();
		Отказ = Истина;
	КонецПопытки;
	
	Объект.ОбменДанными.Загрузка = Ложь;
	
КонецПроцедуры

// Производит списание разницы сумм активной и пассивной части движений документа,
// возникшей в результате округления.
//
// Параметры:
//  ОбъектДокумент - ДокументОбъект - Документ.
//
// Возвращаемое значение:
//  Булево - Истина, если списание успешно произведено, в противном случае - Ложь.
//
Функция СписаниеКопейкиПриОкругленииВалютныхСчетов(ОбъектДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определяем способ ведения баланса
	БалансВедетсяПоПодразделениям =  БалансВедетсяПоПодразделениям(ОбъектДокумент.Дата);
	
	// Создаем таблицу значений, в которой будет происходит накопление сумм.
	ТаблицаАктивовИПассивов = Новый ТаблицаЗначений;
	ТаблицаАктивовИПассивов.Колонки.Добавить("ПодразделениеКомпании", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаАктивовИПассивов.Колонки.Добавить("СуммаАктива",           Новый ОписаниеТипов("Число"));
	ТаблицаАктивовИПассивов.Колонки.Добавить("СуммаПассива",          Новый ОписаниеТипов("Число"));
	
	// 1. Взаиморасчеты.
	// Движения вида "Расход" образуют пассивную часть, "Приход" - активную часть.
	НаборРасчетыСКонтрагентами = ОбъектДокумент.Движения.Найти("РасчетыСКонтрагентами");
	Если НаборРасчетыСКонтрагентами <> Неопределено И НаборРасчетыСКонтрагентами.Количество() > 0  Тогда
		СуммаВзаиморасчетовИтого = 0;
		Для каждого ТекДвижение Из НаборРасчетыСКонтрагентами Цикл
			НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
			НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям,
				ТекДвижение.ДоговорВзаиморасчетов.ПодразделениеКомпании,
				ОбъектДокумент.ПодразделениеКомпании);
			Если ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				НоваяСтрока.СуммаАктива = ТекДвижение.СуммаУпр;
			Иначе
				НоваяСтрока.СуммаПассива = ТекДвижение.СуммаУпр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НаборВзаиморасчетыКомпании = ОбъектДокумент.Движения.Найти("ВзаиморасчетыКомпании");
	Если НЕ НаборВзаиморасчетыКомпании = Неопределено И НаборВзаиморасчетыКомпании.Количество() > 0 Тогда
		СуммаВзаиморасчетовИтого = 0;
		Для каждого ТекДвижение Из НаборВзаиморасчетыКомпании Цикл
			НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
			НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.ДоговорВзаиморасчетов.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);
			Если ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				НоваяСтрока.СуммаАктива = ТекДвижение.СуммаУпр;
			Иначе
				НоваяСтрока.СуммаПассива = ТекДвижение.СуммаУпр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 2. Партии товаров компании
	// Партии являются активом. Отрицательное значение остатка по этому регистру - ошибочное состояние.
	// Особенность: учитываются только партии, имеющие статус "ТоварКупленный".
	НаборПартииТоваровКомпании = ОбъектДокумент.Движения.Найти("ПартииТоваровКомпании");
	Если НЕ НаборПартииТоваровКомпании = Неопределено Тогда
		СуммаПартийТоваровКомпанииИтого = 0;
		Для каждого ТекДвижение Из НаборПартииТоваровКомпании Цикл
			Если ТекДвижение.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный Тогда
				НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
				НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.СкладКомпании.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);
				Если ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
					НоваяСтрока.СуммаАктива = ТекДвижение.СуммаУпр;
				Иначе
					НоваяСтрока.СуммаАктива = -ТекДвижение.СуммаУпр;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// 3. Доходы и расходы.
	// Ресурс "Расходы" отражает активную часть, "Доход" - пассивную часть.
	НаборДоходыИРасходы = ОбъектДокумент.Движения.Найти("ДоходыИРасходы");
	Если НЕ НаборДоходыИРасходы = Неопределено Тогда
		Для каждого ТекДвижение Из НаборДоходыИРасходы Цикл
			НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
			НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);			
			Если ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				НоваяСтрока.СуммаАктива  = ТекДвижение.РасходУпр;
				НоваяСтрока.СуммаПассива = ТекДвижение.ДоходУпр;
			Иначе
				НоваяСтрока.СуммаАктива  = - ТекДвижение.РасходУпр;
				НоваяСтрока.СуммаПассива = - ТекДвижение.ДоходУпр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 4. Денежные средства компании.
	// Является активом. Движения вида "Приход" увеличивают актив, "Расход" - актив уменьшают.
	НаборДенежныеСредстваКомпании = ОбъектДокумент.Движения.Найти("ДенежныеСредстваКомпании");
	Если НЕ НаборДенежныеСредстваКомпании = Неопределено Тогда
		Для каждого ТекДвижение Из НаборДенежныеСредстваКомпании Цикл
			НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
			НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.СтруктурнаяЕдиница.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);			
			Если ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				НоваяСтрока.СуммаАктива = ТекДвижение.СуммаУпр;
			Иначе
				НоваяСтрока.СуммаАктива = - ТекДвижение.СуммаУпр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 5. Касса ККМ.
	// Является активом. Движения вида "Приход" увеличивают актив, "Расход" - актив уменьшают.
	// Особенность: необходимо учитывать "способ оплаты". Только способы "Наличными" и "Безналичными" 
	// учитываются в балансе.
	НаборКассыККМ = ОбъектДокумент.Движения.Найти("КассыККМ");
	Если НЕ НаборКассыККМ = Неопределено Тогда
		ТипОплатыНаличными = Перечисления.ТипыОплатыККТ.Наличные;
		ТипОплатыБезНаличными = Перечисления.ТипыОплатыККТ.Электронно;
		Для каждого ТекДвижение Из НаборКассыККМ Цикл
			Если (ТекДвижение.ТипОплаты = ТипОплатыНаличными) Или (ТекДвижение.ТипОплаты = ТипОплатыБезНаличными) Тогда
				НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
				НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.КассаККМ.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);			
				Если ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
					НоваяСтрока.СуммаАктива = ТекДвижение.СуммаУпр;
				Иначе
					НоваяСтрока.СуммаАктива = -ТекДвижение.СуммаУпр;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 6. Партии товаров отданные.
	// Является активом. Движения вида "Приход" увеличивают актив, "Расход" - актив уменьшают.
	// Особенность: ресурсом, влияющих на баланс является "СуммаСебестоимостиУпр".
	НаборПартииТоваровОтданные = ОбъектДокумент.Движения.Найти("ПартииТоваровОтданные");
	Если НЕ НаборПартииТоваровОтданные = Неопределено Тогда
		Для каждого ТекДвижение Из НаборПартииТоваровОтданные Цикл
			НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
			НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.ДоговорВзаиморасчетов.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);			
			Если ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				НоваяСтрока.СуммаАктива = ТекДвижение.СуммаСебестоимостиУпр;
			Иначе
				НоваяСтрока.СуммаАктива = - ТекДвижение.СуммаСебестоимостиУпр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 7. Реализованные товары.
	// Является пассивом. Движения вида "Приход" увеличивают пассив, "Расход" - актив уменьшают.
	НаборРеализованныеТовары = ОбъектДокумент.Движения.Найти("РеализованныеТовары");
	Если НЕ НаборРеализованныеТовары = Неопределено Тогда
		Для каждого ТекДвижение Из НаборРеализованныеТовары Цикл
			НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
			НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.ДоговорВзаиморасчетов.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);			
			Если ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				НоваяСтрока.СуммаПассива = ТекДвижение.СуммаУпр;
			Иначе
				НоваяСтрока.СуммаПассива = - ТекДвижение.СуммаУпр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 8. Прочие активы в эксплуатации.
	// Является активом. Движения вида "Приход" увеличивают пассив, "Расход" - актив уменьшают.
	// Особенность: показателем, влияющим на баланс является разница ресурсов 
	// (БалансоваяСтоимостьУпрПриход-СуммаАмортизацииУпрПриход).
	НаборПрочиеАктивыВЭксплуатации = ОбъектДокумент.Движения.Найти("ПрочиеАктивыВЭксплуатации");
	Если НЕ НаборПрочиеАктивыВЭксплуатации = Неопределено Тогда
		Для каждого ТекДвижение Из НаборПрочиеАктивыВЭксплуатации Цикл
			НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
			НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);			
			ОстаточнаяСтоимость = ТекДвижение.БалансоваяСтоимостьУпр - ТекДвижение.СуммаАмортизацииУпр;
			Если ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				НоваяСтрока.СуммаАктива = ОстаточнаяСтоимость;
			Иначе
				НоваяСтрока.СуммаАктива = - ОстаточнаяСтоимость;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//////////////////////////////////////////////////
	// Начало секции Альфа-Авто:Автосервис+Автозапчасти
	//////////////////////////////////////////////////
	
	// 9. Товары компании в производстве
	// Партионный регистр является активом. Отрицательное значение остатка по этому регистру - ошибочное состояние.
	// Особенность: учитываются только партии, имеющие статус "ТоварКупленный".
	НаборТоварыВПроизводстве = ОбъектДокумент.Движения.Найти("ТоварыВПроизводстве");
	Если НЕ НаборТоварыВПроизводстве = Неопределено Тогда
		Для каждого ТекДвижение Из НаборТоварыВПроизводстве Цикл
			Если ТекДвижение.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный Тогда
				НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
				НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.Цех.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);
				Если ТекДвижение.ВидДвижения=ВидДвиженияНакопления.Приход Тогда
					НоваяСтрока.СуммаАктива = ТекДвижение.СуммаУпр;
				Иначе
					НоваяСтрока.СуммаАктива = -ТекДвижение.СуммаУпр;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	/////////////////////////////////////////////////
	// Конец секции Альфа-Авто:Автосервис+Автозапчасти
	/////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////
	// Начало секции Альфа-Авто:Автосалон+Автосервис+Автозапчасти
	////////////////////////////////////////////////////////////
	
	// 10. Остатки автомобилей
	// Автомобили являются активом. Отрицательное значение остатка по этому регистру - ошибочное состояние.
	// Особенность: учитываются только партии, имеющие статус "ТоварКупленный".
	НаборОстаткиАвтомобилей = ОбъектДокумент.Движения.Найти("ОстаткиАвтомобилей");
	Если НЕ НаборОстаткиАвтомобилей = Неопределено Тогда
		Для каждого ТекДвижение Из НаборОстаткиАвтомобилей Цикл
			Если ТекДвижение.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный Тогда
				НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
				НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.СкладКомпании.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);
				Если ТекДвижение.ВидДвижения=ВидДвиженияНакопления.Приход Тогда
					НоваяСтрока.СуммаАктива = ТекДвижение.СуммаУпр;
				Иначе
					НоваяСтрока.СуммаАктива = -ТекДвижение.СуммаУпр;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 11. Комплектация автомобилей
	// Комплектация автомобилей являются активом. Отрицательное значение остатка по этому регистру - ошибочное состояние.
	// Особенность: учитываются только партии, имеющие статус "ТоварКупленный".
	НаборКомплектацияАвтомобилей = ОбъектДокумент.Движения.Найти("КомплектацияАвтомобилей");
	Если НЕ НаборКомплектацияАвтомобилей = Неопределено Тогда
		Для каждого ТекДвижение Из НаборКомплектацияАвтомобилей Цикл
			Если ТекДвижение.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный Тогда
				НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
				НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.СкладКомпании.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);
				Если ТекДвижение.ВидДвижения=ВидДвиженияНакопления.Приход Тогда
					НоваяСтрока.СуммаАктива = ТекДвижение.СуммаУпр;
				Иначе
					НоваяСтрока.СуммаАктива = -ТекДвижение.СуммаУпр;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 12. Автомобили отданные
	// Является активом. Движения вида "Приход" увеличивают актив, "Расход" - актив уменьшают.
	// Особенность: ресурсом, влияющих на баланс является "СуммаСебестоимостиУпр".
	НаборАвтомобилиОтданные = ОбъектДокумент.Движения.Найти("АвтомобилиОтданные");
	Если НЕ НаборАвтомобилиОтданные = Неопределено Тогда
		Для каждого ТекДвижение Из НаборАвтомобилиОтданные Цикл
			НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
			НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.ДоговорВзаиморасчетов.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);			
			Если ТекДвижение.ВидДвижения=ВидДвиженияНакопления.Приход Тогда
				НоваяСтрока.СуммаАктива = ТекДвижение.СуммаСебестоимостиУпр;
			Иначе
				НоваяСтрока.СуммаАктива = - ТекДвижение.СуммаСебестоимостиУпр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 13. Реализованные автомобили
	// Является пассивом. Движения вида "Приход" увеличивают пассив, "Расход" - актив уменьшают.
	НаборРеализованныеАвтомобили = ОбъектДокумент.Движения.Найти("РеализованныеАвтомобили");
	Если НЕ НаборРеализованныеАвтомобили = Неопределено Тогда
		Для каждого ТекДвижение Из НаборРеализованныеАвтомобили Цикл
			НоваяСтрока = ТаблицаАктивовИПассивов.Добавить();
			НоваяСтрока.ПодразделениеКомпании = ?(БалансВедетсяПоПодразделениям, ТекДвижение.ДоговорВзаиморасчетов.ПодразделениеКомпании, ОбъектДокумент.ПодразделениеКомпании);
			Если ТекДвижение.ВидДвижения=ВидДвиженияНакопления.Приход Тогда
				НоваяСтрока.СуммаПассива = ТекДвижение.СуммаУпр;
			Иначе
				НоваяСтрока.СуммаПассива = - ТекДвижение.СуммаУпр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////
	// Конец секции Альфа-Авто:Автосалон+Автосервис+Автозапчасти
	///////////////////////////////////////////////////////////
	
	Результат = Истина;
	
	// Сворачиваем таблицу.
	ТаблицаАктивовИПассивов.Свернуть("ПодразделениеКомпании", "СуммаАктива, СуммаПассива"); 
	
	// Если баланс ведется по подразделениям, то необходимо еще раз пройти таблицу и заменить подразделения, на 
	// соответствующие им балансовые подразделения.
	Если БалансВедетсяПоПодразделениям Тогда
		Для каждого ТекСтрока Из ТаблицаАктивовИПассивов Цикл
			ТекСтрока.ПодразделениеКомпании = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ТекСтрока.ПодразделениеКомпании,ОбъектДокумент.Дата);	
		КонецЦикла;
		
		// Повторно сворачиваем таблицу.
		ТаблицаАктивовИПассивов.Свернуть("ПодразделениеКомпании", "СуммаАктива, СуммаПассива"); 
	КонецЕсли;
	
	Для каждого ТекСтрока Из ТаблицаАктивовИПассивов Цикл
		
		// Сравниваем Пассив и Актив.
		Разница = ТекСтрока.СуммаАктива - ТекСтрока.СуммаПассива;
		
		Если (Разница > - 1) И (Разница < 1) Тогда
			//@skip-check unknown-method-property
			НаборЗаписейДиР = ОбъектДокумент.Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ОбъектДокумент;
			НаборЗаписейДиР.Подразделение  = ТекСтрока.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КопейкиОтОкругленияПриПересчетах;
			НаборЗаписейДиР.ВУпрВалюте     = Истина;
			Если Разница > 0 Тогда
				// Необходимо увеличить пассив.
				НаборЗаписейДиР.Доход = Разница;
			Иначе
				// Необходимо увеличить актив.
				НаборЗаписейДиР.Расход = -Разница; 
			КонецЕсли;
			
			Результат = Результат И НаборЗаписейДиР.Приход();
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СписаниеКопейкиПриОкругленииВалютныхСчетов() 

// Выполняет восстановление последовательностей документов
//
// Параметры:
//  ПараметрыЗадания - Структура - Структура параметров.
//
Процедура ВосстановлениеПоследовательностей(Знач ПараметрыЗадания) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ВосстановлениеПоследовательностей);
	
	// Приводим параметры по типу.
	Если ТипЗнч(ПараметрыЗадания) <> Тип("Структура") Тогда
		ПараметрыЗадания = Новый Структура;
	КонецЕсли;
	
	// Проверяем свойство СписокПоследовательностей.
	Если НЕ ПараметрыЗадания.Свойство("СписокПоследовательностей")
		ИЛИ ТипЗнч(ПараметрыЗадания.СписокПоследовательностей) <> Тип("Структура") Тогда
		
		ПараметрыЗадания.Вставить("СписокПоследовательностей", Новый Структура);
		
	КонецЕсли;
	
	ПоДату = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗадания, "ПоДату", Неопределено);
	
	Если ТипЗнч(ПоДату) <> Тип("Дата") Тогда
		
		ПоДату = Неопределено;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоДату) Тогда
		
		ПараметрыЗадания.Вставить("ОграничениеПоДате", ПоДату);
		
	КонецЕсли;
	
	// Проверяем свойство СписокОрганизаций.
	Если НЕ ПараметрыЗадания.Свойство("СписокОрганизаций")
		ИЛИ ТипЗнч(ПараметрыЗадания.СписокОрганизаций) <> Тип("СписокЗначений") Тогда
		
		ПараметрыЗадания.Вставить("СписокОрганизаций", Новый СписокЗначений);
		
	КонецЕсли;
	
	СписокОрганизаций = Новый Массив;
	Для Каждого КлючЗначение Из ПараметрыЗадания.СписокОрганизаций Цикл
		
		Если КлючЗначение.Пометка Тогда
			
			СписокОрганизаций.Добавить(КлючЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из ПараметрыЗадания.СписокПоследовательностей Цикл
		
		ПараметрыЗадания.СписокПоследовательностей.Вставить(Строка.Ключ,СписокОрганизаций);
		
	КонецЦикла;
	
	Обработки
		.ВосстановлениеПоследовательностей
		.Восстановить(ПараметрыЗадания);
	
КонецПроцедуры // ВосстановлениеПоследовательностей()

// Процедура производит проверку признаков запрета номенклатуры.
//
// Параметры:
//  Объект			- ДокументОбъект	- Документ, который обрабатывается.
//  ПараметрыПроверки	- Структура			- параметры проверки:
//    ЗапретЗакупки			- Булево			- признак запрета закупки номенклатуры;
//    ЗапретПродажи			- Булево			- признак запрета продажи номенклатуры;
//    Предупреждать			- Булево			- Истина- выводить предупреждение без отказа;
//    ТаблицыДляПроверки	- Массив из Строка	- перечень табличных частей документа, которые подлежат проверке.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры(Объект, ПараметрыПроверки) Экспорт
	
	// Если выполняется восстановление последовательностей, то отключим проверку
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь);
	
	Если ЭтоВосстановлениеПоследовательностей Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗапретПродажи = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроверки, "ЗапретПродажи", Ложь);
	ЗапретЗакупки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроверки, "ЗапретЗакупки", Ложь);
	Предупреждать = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПроверки, "Предупреждать", Ложь);
	
	Отказ = Ложь;
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого Таблица Из ПараметрыПроверки.ТаблицыДляПроверки Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры, Объект[Таблица].ВыгрузитьКолонку("Номенклатура"));
	КонецЦикла;
	
	ПараметрыЗапрета = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		СписокНоменклатуры, "ЗапретЗакупки, ЗапретПродажи, Артикул");
	
	// Последовательно обработаем каждую табличную часть объекта
	Для Каждого Таблица Из ПараметрыПроверки.ТаблицыДляПроверки Цикл
		
		// Выполняем проверку корректности заполнения
		Для Каждого СтрокаТабличнойЧасти Из Объект[Таблица] Цикл
			
			// получим параметры запрета по текущей номенклатуре
			ПараметрыЗапретаНоменклатуры = ПараметрыЗапрета[СтрокаТабличнойЧасти.Номенклатура];
			
			// Проверяем целесообразность дальнейших действий
			Если ПараметрыЗапретаНоменклатуры = Неопределено
				ИЛИ (ПараметрыЗапретаНоменклатуры <> Неопределено
				И НЕ ПараметрыЗапретаНоменклатуры.ЗапретЗакупки
				И НЕ ПараметрыЗапретаНоменклатуры.ЗапретПродажи) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстСообщения = "";
			
			// Проверим и сообщим пользователю если что-то не так
			Если ПараметрыЗапретаНоменклатуры.ЗапретЗакупки И ЗапретЗакупки Тогда
				
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(
									НСтр("ru = 'Номенклатура [%1] ""%2"" блокируется для закупки'"),
									ПараметрыЗапретаНоменклатуры.Артикул,
									СтрокаТабличнойЧасти.Номенклатура);
				
			КонецЕсли;
			
			Если ПараметрыЗапретаНоменклатуры.ЗапретПродажи И ЗапретПродажи Тогда
				
				Отказ = Истина;
				ТекстСообщения = ?(СтрДлина(ТекстСообщения) > 0, ТекстСообщения + Символы.НПП + НСтр("ru = 'и продажи'"),
									СтрШаблон(НСтр("ru = 'Номенклатура [%1] ""%2"" блокируется для продажи'"),
										ПараметрыЗапретаНоменклатуры.Артикул,
										СтрокаТабличнойЧасти.Номенклатура));
				
			КонецЕсли;
			
			Если Предупреждать
				И (ПараметрыЗапретаНоменклатуры.ЗапретПродажи ИЛИ ПараметрыЗапретаНоменклатуры.ЗапретЗакупки) Тогда
				
				ТекстСообщения = СтрШаблон(
									НСтр("ru = 'Номенклатура [%1] ""%2"" блокируется для %3'"),
									ПараметрыЗапретаНоменклатуры.Артикул,
									СтрокаТабличнойЧасти.Номенклатура,
									?(ПараметрыЗапретаНоменклатуры.ЗапретЗакупки, НСтр("ru = 'закупки'"), "")
									+ ?(ПараметрыЗапретаНоменклатуры.ЗапретПродажи И ПараметрыЗапретаНоменклатуры.ЗапретЗакупки,
										" " + НСтр("ru = 'и'") + " ",
										"")
									+ ?(ПараметрыЗапретаНоменклатуры.ЗапретПродажи, НСтр("ru = 'продажи'"), ""));
				
			КонецЕсли;
			
			Если СтрДлина(ТекстСообщения) > 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения + ".",
						Объект,
						Таблица + "["+(СтрокаТабличнойЧасти.НомерСтроки -1) +"].Номенклатура"
					);
					
			КонецЕсли;
			
			Отказ = Отказ И НЕ Предупреждать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьПараметрыЗапретаВыбораНоменклатуры()

// Производит проверку данных заполнения при создании документа на основании.
//
// Параметры:
//  ДанныеЗаполнения - Неопределено, Структура, ДокументСсылка - данные заполнения.
//
// Возвращаемое значение:
//  Булево - Истина, если основание не является ссылкой, Ложь - в противном случае.
//
Функция ВводСПустымОснованием(ДанныеЗаполнения) Экспорт
	
	Возврат(ДанныеЗаполнения = Неопределено ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("Структура"));
	
КонецФункции

// Процедура устанавливает ставку НДС в документе в зависимости от указанных ставок в таблицах документа основания
//
// Параметры:
//  Основание -Произвольный - объект, на основании которого выполняется заполнение.
//  Объект - ДанныеФормыСтруктура - заполняемый документ.
//  СуммаОплаты - Число - сумма оплаты.
//  ИмяРеквизитаСтавкаНДС - Строка - реквизит, в который будет помещено вычисленное значение ставки НДС.
//                                   Значение по умолчанию - СтавкаНДС
//  ИмяРеквизитаСуммаНДС - Строка - реквизит, в который будет помещено вычисленное значение суммы НДС.
//                                  Значение по умолчанию - СуммаНДС
//  ОбновлятьСтавкуНДС - Булево - признак вызова стандартной процедуры "При изменении" реквизита Ставка НДС.
//
Процедура УстановитьСтавкуНДС(
		Основание,
		Объект,
		СуммаОплаты = 0,
		ИмяРеквизитаСтавкаНДС = "СтавкаНДС",
		ИмяРеквизитаСуммаНДС = "СуммаНДС",
		ОбновлятьСтавкуНДС = Истина) Экспорт
	
	НоваяСтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	ФормироватьСтавкуНДС = ЕстьРеквизит(Объект, ИмяРеквизитаСтавкаНДС);
	ФормироватьСуммуНДС = (СуммаОплаты > 0) И ЕстьРеквизит(Объект, ИмяРеквизитаСуммаНДС);
	МетаданныеОснование = Основание.Метаданные();
	
	ЗапросСтавка = Новый Массив;
	ЗапросСумма  = Новый Массив;
	
	ШаблонЗапроса = "
				|	%1%2.%3
				|ИЗ
				|	Документ.%1.%2 КАК %1%2
				|ГДЕ
				|	%1%2.Ссылка = &Основание";
	
	ШаблонЗапросаШапка = "
				|	%1.%2 КАК %3
				|ИЗ
				|	Документ.%1 КАК %1
				|ГДЕ
				|	%1.Ссылка = &Основание";
	
	ИмяДокумента = МетаданныеОснование.Имя;
	
	ДокументыОплаты = Новый Массив();
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.Выписка"));
	
	ЗаказыНаАвтомобиль = Новый Массив();
	ЗаказыНаАвтомобиль.Добавить(Тип("ДокументСсылка.ЗаказНаАвтомобиль"));
	ЗаказыНаАвтомобиль.Добавить(Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль"));
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ЗаказыНаАвтомобиль.Найти(ТипОснования) <> Неопределено Тогда
		
		ЗапросСтавка.Добавить(СтрШаблон(ШаблонЗапросаШапка, ИмяДокумента, "СтавкаНДСНаАвтомобиль", "СтавкаНДС"));
		ЗапросСумма.Добавить(СтрШаблон(ШаблонЗапросаШапка,  ИмяДокумента, "СуммаНДСНаАвтомобиль",  "СуммаНДС"));
		
	ИначеЕсли ДокументыОплаты.Найти(ТипОснования) <> Неопределено Тогда
		
		ЗапросСтавка.Добавить(СтрШаблон(ШаблонЗапросаШапка, ИмяДокумента, "СтавкаНДС", "СтавкаНДС"));
		ЗапросСумма.Добавить(СтрШаблон(ШаблонЗапросаШапка,  ИмяДокумента, "СуммаНДС",  "СуммаНДС"));
		
	КонецЕсли;
	
	Попытка
		
		ТабличныеЧасти = ОбщегоНазначения
			.МенеджерОбъектаПоПолномуИмени(МетаданныеОснование.ПолноеИмя())
			.ТабличныеЧастиСНДС();
		
	Исключение
		
		ТабличныеЧасти = ТабличныеЧастиСНДС(МетаданныеОснование);
		
	КонецПопытки;
	
	// Сформируем запрос для получения ставки НДС и суммы НДС из сделки
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
		
		Если ФормироватьСтавкуНДС И ЕстьРеквизит(ТабличнаяЧасть, "СтавкаНДС") Тогда
			ЗапросСтавка.Добавить(СтрШаблон(ШаблонЗапроса, ИмяДокумента, ИмяТабличнойЧасти,"СтавкаНДС"));
		КонецЕсли;
		
		Если ФормироватьСуммуНДС И ЕстьРеквизит(ТабличнаяЧасть, "СуммаНДС") Тогда
			ЗапросСумма.Добавить(СтрШаблон(ШаблонЗапроса, ИмяДокумента, ИмяТабличнойЧасти,"СуммаНДС"));
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьСтавкиНДС = (ЗапросСтавка.Количество() > 0);
	ЕстьСуммыНДС  = (ЗапросСумма.Количество() > 0);
	
	СтрокаСоединения = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ";
	
	НачалоЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ";
	
	СтрокаРазделения = "
		|;
		|////////////////
		|";
	
	Если НЕ ЕстьСтавкиНДС Тогда
		СтрокаРазделения = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = ?(ЕстьСтавкиНДС, НачалоЗапроса + СтрСоединить(ЗапросСтавка, СтрокаСоединения), "")
					+ ?(ЕстьСуммыНДС, СтрокаРазделения + НачалоЗапроса + СтрСоединить(ЗапросСумма, СтрокаСоединения), "");
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Основание", Основание);
		
		ПакетЗапросов = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	Если ЕстьСтавкиНДС Тогда
		
		Выборка = ПакетЗапросов[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НоваяСтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка() Тогда
				НоваяСтавкаНДС = Выборка.СтавкаНДС;
			ИначеЕсли НЕ НоваяСтавкаНДС = Выборка.СтавкаНДС Тогда
				НоваяСтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();  // В документе есть несколько значений ставки
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ФормироватьСтавкуНДС И Объект[ИмяРеквизитаСтавкаНДС] <> НоваяСтавкаНДС Тогда
		
		Объект[ИмяРеквизитаСтавкаНДС] = НоваяСтавкаНДС;
		
		Если ОбновлятьСтавкуНДС Тогда
			// Получим менеджер текущего объекта
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			МенеджерОбъекта.СтавкаНДСПриИзменении(Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСуммыНДС И (НЕ ФормироватьСтавкуНДС ИЛИ ЗначениеЗаполнено(НоваяСтавкаНДС)) Тогда
		СуммаНДСДокумента = 0;
		НомерПакета = ?(ЕстьСтавкиНДС, 1, 0);
		Выборка = ПакетЗапросов[НомерПакета].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СуммаНДСДокумента = СуммаНДСДокумента + Выборка.СуммаНДС;
		КонецЦикла;
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "СуммаДокумента,ВалютаДокумента,КурсДокумента");
		СуммаСделки = ДанныеОснования.СуммаДокумента;
		
		// Перерасчитаем суммы
		Если НЕ ДанныеОснования.ВалютаДокумента=Объект.ВалютаДокумента Тогда
				СуммаОплатыДокумента = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаОплаты,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента,
				ДанныеОснования.ВалютаДокумента,
				ДанныеОснования.КурсДокумента), 2);
		Иначе
			СуммаОплатыДокумента = СуммаОплаты;
		КонецЕсли;
		
		// пропорционально установим сумму НДС
		Если СуммаСделки > СуммаОплатыДокумента Тогда
			СуммаНДСДокумента = Окр((СуммаОплатыДокумента * СуммаНДСДокумента) / СуммаСделки, 2);
		КонецЕсли;
		
		Объект[ИмяРеквизитаСуммаНДС] = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			СуммаНДСДокумента,
			ДанныеОснования.ВалютаДокумента,
			ДанныеОснования.КурсДокумента,
			Объект.ВалютаДокумента,
			Объект.КурсДокумента);
		
	ИначеЕсли ЕстьСуммыНДС Тогда
		Объект[ИмяРеквизитаСуммаНДС] = 0;
	КонецЕсли;
	
КонецПроцедуры

// Проверяем наличие в комиссионных документах маркируемых и прослеживаемых товаров
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - заполняемый документ.
//  Отказ - Булево - признак отказа операции.
//  ИмяТаблицы - Строка - таблица  документа.
//  ИмяРеквизита - Строка  - реквизит, по которому выполняем проверку. 
//  ПроверятьМаркировку - Булево - признак проверки маркировки.
//
Процедура ПроверитьКорректностьТоваровКомиссионныхДокументов(
	Объект,
	Отказ,
	ИмяТаблицы = "Товары",
	ИмяРеквизита = "Номенклатура",
	ПроверятьМаркировку = Истина) Экспорт
	
	// Проверка права для дальнейшего выполнения
	Если НЕ ПравоПользователя("ПроверкаЗаполненияСправочниковИДокументов") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что нет признака восстановления последовательностей.
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства,
		"ЭтоВосстановлениеПоследовательностей",
		Ложь
	);
	Если ЭтоВосстановлениеПоследовательностей Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетПрослеживаемыхТоваровСервер.ЭтоХозОперацияКомиссии(Объект.ХозОперация) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТаблицы] Цикл
		
		ЭтоПрослеживаемыйТовар = ЭтоПрослеживаемыйТовар(ТекущаяСтрока[ИмяРеквизита]);
		
		Если НЕ ЭтоПрослеживаемыйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПрослеживаемыйТовар Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для хозяйственной операции <%1> не должно быть прослеживаемого товара.'"),
				Объект.ХозОперация
			);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				Объект,
				СтрШаблон(ИмяТаблицы + "[%1]." + ИмяРеквизита, Объект[ИмяТаблицы].Индекс(ТекущаяСтрока)),
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Проверяем наличие в документах подакцизных товаров
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - заполняемый документ.
//  ИмяТаблицы - Строка - таблица  документа.
//
Функция ПроверитьКорректностьРеализацииПодакцизныхТоваров(
	Объект,
	ИмяТаблицы = "Товары") Экспорт
	
	Отказ = Ложь;

	// Проверка права для дальнейшего выполнения
	Если НЕ ПравоПользователя("ПроверкаЗаполненияСправочниковИДокументов") Тогда
		Возврат Отказ;
	КонецЕсли;
	
		// Проверим, что нет признака восстановления последовательностей.
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства,
		"ЭтоВосстановлениеПоследовательностей",
		Ложь
	);
	Если ЭтоВосстановлениеПоследовательностей Тогда
		Возврат Отказ;
	КонецЕсли;  
	
	Если ЕстьРеквизит(Объект, "Патент") И Не ЗначениеЗаполнено(Объект.Патент) Тогда
		Возврат Отказ;
	КонецЕсли;
	
	КонтрольПодакцизныхТоваров = УчетныеПолитикиСервер.Значение("КонтрольПродажиПодакцизныхТоваровПриПатентнойСистемеНалогообложения", Объект.Дата, Объект.Организация);	
	
	Если НЕ ЗначениеЗаполнено(КонтрольПодакцизныхТоваров) ИЛИ КонтрольПодакцизныхТоваров = Перечисления.ВидыКонтроля.НеКонтролировать Тогда
		Возврат Отказ;
	КонецЕсли; 
	
	Предупреждать =  КонтрольПодакцизныхТоваров = Перечисления.ВидыКонтроля.Предупреждать;
	
	РежимЗаписи = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства,
		"РежимЗаписи",
		РежимЗаписиДокумента.Проведение);

	Для Каждого ТекущаяСтрока Из Объект[ИмяТаблицы] Цикл
		
		ЭтоПодакцизныйТовар = ТекущаяСтрока.Номенклатура.Подакцизный;
				
		Если ЭтоПодакцизныйТовар Тогда  
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы,ТекущаяСтрока.НомерСтроки, "Номенклатура");
			ТекстСообщения = НСтр("ru = 'Внимание! В документе указаны подакцизные товары, запрещенные к продаже по патентной системе налогообложения, в строке: %1, [%2] Номенклатура ""%3""'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, ТекущаяСтрока.НомерСтроки, УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекущаяСтрока.Номенклатура),
					ТекущаяСтрока.Номенклатура),
					Объект,
					ПутьКТабличнойЧасти,
					,		
			);
			
			Отказ = Не Предупреждать И РежимЗаписи = РежимЗаписиДокумента.Проведение;

		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Отказ;

КонецФункции

// Возвращает результат проверки соответствия Контрагента и Договора в Документе и Сделке.
//
// Параметры:
//  Объект					 - ДокументОбъект	 - документ, на основании которо выполняется событие записи;
//  Сделка					 - ДокументСсылка	 - документ, для которого производится проверка;
//  Контрагент				 - СправочникСсылка	 - контрагент из документа;
//  ДоговорВзаиморасчетов	 - СправочникСсылка	 - договор из документа;
//  ДополнительныеСвойства	 - Структура		 - дополнительные свойства объекта.
// 
// Возвращаемое значение:
//  Истина - если соответствует, в противном случае - Ложь.
//
Функция ПроверкаСоответствияКонтрагентаДоговораПоСделке(
		Объект,
		Сделка,
		Контрагент,
		ДоговорВзаиморасчетов,
		ДополнительныеСвойства) Экспорт
	
	Результат = Истина;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	КонтрагентИДоговорСделки = УправлениеДиалогомДокументаСервер.ИменаКонтрагентаИДоговораВзаиморасчетовПоСделке(
		Сделка,
		Объект);
	
	Если ЕстьРеквизит(Сделка, КонтрагентИДоговорСделки.ИмяКонтрагента) Тогда
		Результат = НЕ (ЗначениеЗаполнено(Сделка[КонтрагентИДоговорСделки.ИмяКонтрагента])
			И Сделка[КонтрагентИДоговорСделки.ИмяКонтрагента] <> Контрагент);
		Если ЕстьРеквизит(Сделка, "ДоговорВзаиморасчетов") Тогда
			Результат = Результат
						И НЕ (ЗначениеЗаполнено(Сделка[КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов])
						И Сделка[КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов] <> ДоговорВзаиморасчетов);
		КонецЕсли;
		// Аренда автомобилей
		Если НЕ Результат И ЕстьРеквизит(Сделка, "ДоговорДепозита") Тогда
			Результат = НЕ (ЗначениеЗаполнено(Сделка.Контрагент) И Сделка.Контрагент <> Контрагент)
						И НЕ (ЗначениеЗаполнено(Сделка.ДоговорДепозита)
						И Сделка.ДоговорДепозита <> ДоговорВзаиморасчетов);
		КонецЕсли;
					
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверкаСоответствияКонтрагентаДоговораПоСделке()

Процедура УстановитьВерсиюДокумента(Объект, Копирование = Ложь) Экспорт
	
	Если Не Копирование
		И Не (Объект.ЭтоНовый()
		И Не ЗначениеЗаполнено(Объект.ВерсияОбъекта)) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВерсияОбъекта = "02.00";
	
КонецПроцедуры

// Обновляет документ "Событие", на основании которого был создан данный документ.
// Параметры:
//  ТекущийДокумент - ДокументОбъект - Документ, для которого необходимо обновить документ-основание
//
Процедура ОбновитьДокументОснование_Событие(ТекущийДокумент) Экспорт
	
	Если ТекущийДокумент.ДокументОснование.Пустая()
		ИЛИ ТипЗнч(ТекущийДокумент.ДокументОснование) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли;
	
	СобытиеОбъект = ТекущийДокумент.ДокументОснование.ПолучитьОбъект();
	Если СобытиеОбъект.ДокументРезультат <> ТекущийДокумент.Ссылка Тогда
		
		СобытиеОбъект.ДокументРезультат = ТекущийДокумент.Ссылка;
		СобытиеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура производит очистку полей розничной цены документа в случае когда склад не является розничным.
//
// Параметры:
//  Объект			- ДокументОбъект	- Документ, который обрабатывается.
//  СкладКомпании - СправочникСсылка.СкладыКомпании - Склад, на который поступают товары.
//  ИмяТабличнойЧасти - Строка - (необязательное). Имя табличной части документа.
//  СуффиксКолонок - Строка - (необязательное). Содержит суффикс колонок.
//  Условия - Структура - (необязательное) содержит обязательное и достаточное условия:
//    * Обязательное - Булево - обязательное условие (по умолчанию ИСТИНА)
//    * Достаточное - Булево - достаточное условие(по умолчанию ЛОЖЬ)
//
Процедура ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(Объект,
		СкладКомпании,
		ИмяТабличнойЧасти = "Товары",
		СуффиксКолонок = "",
		Условия = Неопределено) Экспорт
	
	Если Условия = Неопределено Тогда
		Условия = Новый Структура;
	КонецЕсли;
	Если НЕ Условия.Свойство("Обязательное") Тогда
		Условия.Вставить("Обязательное", Истина);
	КонецЕсли;
	Если НЕ Условия.Свойство("Достаточное") Тогда
		Условия.Вставить("Достаточное", Ложь);
	КонецЕсли;
	
	// Проверим есть ли реквизит % наценки
	ЕстьПроцентНаценки = ЕстьРеквизит(Объект, "ПроцентНаценки", ИмяТабличнойЧасти);
	
	// Определим, имеет ли смысл давать возможность пользователю редактировать колонки розничной цены.
	ЭтоРозничныйСклад = (ЗначениеЗаполнено(СкладКомпании)
		И ТипЗнч(СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании")
		И СкладКомпании.Розничный);
	ЕстьРозничныеЦены = (ЭтоРозничныйСклад И Условия.Обязательное ИЛИ Условия.Достаточное);
	
	// Произведем установку видимости у колонок табличной части
	Если НЕ ЕстьРозничныеЦены Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
			СтрокаТабличнойЧасти["ЦенаРозничная"+СуффиксКолонок]  = 0;
			СтрокаТабличнойЧасти["СуммаРозничная"+СуффиксКолонок] = 0;
			Если ЕстьПроцентНаценки Тогда
				СтрокаТабличнойЧасти["ПроцентНаценки"+СуффиксКолонок] = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов()

Функция ПолучитьРежимПроведенияПоПартиям() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РежимПроведенияПоПартиям = ПланыОбмена.УдаленныеПодразделения.ЭтотУзел().РежимПроведенияПоПартиям;
	Если НЕ ЗначениеЗаполнено(РежимПроведенияПоПартиям) Тогда
		РежимПроведенияПоПартиям = Перечисления.РежимыПроведенияПартий.ПартииОтсутствуют;
	КонецЕсли;
	
	Возврат РежимПроведенияПоПартиям;
	
КонецФункции //ПолучитьРежимПроведенияПоПартиям()

// Возвращает перечень имен реквизитов, которые не должны переноситься при вводе документов на основании и копировании.
//
// Возвращаемое значение:
//  Строка - Имена исключаемых реквизитов.
//
Функция ПолучитьИменаИсключаемыхРеквизитов() Экспорт
	
	// Составим перечень реквизитов, значения которых не должны копироваться из переданных данных заполнения.
	ИменаИсключаемыхРеквизитов = ",БлокироватьПерерасчетСкидок,ДокументОснование,Комментарий,СтатусУтверждения,НомерЧека,ДатаФР,НомерСмены,НомерДокумента";
	
	// Перечень исключений дополним служебными реквизитами
	ИменаИсключаемыхРеквизитов = ИменаИсключаемыхРеквизитов + ",Номер,Дата,ДатаСоздания,ДатаОперации,Автор,РегламентированныйУчет,ДополнительныеРеквизиты,ОбластьДанныхВспомогательныеДанные,ОбластьДанныхОсновныеДанные";
	
	Возврат ИменаИсключаемыхРеквизитов;
	
КонецФункции // ПолучитьИменаИсключаемыхРеквизитов()

// Процедура проверяет возможность редактирования документа при наличии подчиненных.
//
// Параметры:
//  Объект - ДокументСсылка - Объект, для которого выполняется обработка события.
//  ПроверкаИзмененияПриНаличииПодчиненных - Булево - Признак необходимости проверки.
//  Отказ  - Булево - Признак отказа от совершения операции.
//
Процедура ПроверитьРедактированиеДокументаПриНаличииПодчиненных(Объект, Отказ) Экспорт
	
	// Проверим на наличие подчиненных документов
	Если
		ЗначениеЗаполнено(Объект.Ссылка)
		И Не ПраваИНастройкиПользователя.Значение("РедактированиеДокументовПриНаличииПодчиненных", Объект.Ссылка)
	Тогда
		
		ПредставлениеСписка = "";
		Для Каждого ПодчиненныйСсылка Из КритерииОтбора.ПодчиненныеДокументы.Найти(Объект.Ссылка) Цикл
			
			ПредставлениеСписка = ПредставлениеСписка + Символы.ПС + "- " + ПодчиненныйСсылка;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ПредставлениеСписка) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Недостаточно прав для изменения документа, на основании которого уже были сформированы подчиненные операции:%1'"),
					Символы.ПС + ПредставлениеСписка
				),
				Объект,
				,
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРедактированиеДокументаПриНаличииПодчиненных()

Функция ДанныеДокументаДляПроведения(ДокументОбъект, ДополнительныеСвойства) Экспорт
	
	ДанныеДляПроведения = Новый Структура();
	ДанныеДляПроведения.Вставить("ДокументОбъект");
	ДанныеДляПроведения.Вставить("Ссылка");
	ДанныеДляПроведения.Вставить("Дата");
	ДанныеДляПроведения.Вставить("ХозОперация");
	ДанныеДляПроведения.Вставить("ДанныеДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеДляПроведения, ДокументОбъект);
	ДанныеДляПроведения.ДокументОбъект = ДокументОбъект;
	
	ДополнительныеСвойства.Вставить("ДляПроведения", ДанныеДляПроведения);
	ДополнительныеСвойства.Вставить("ТаблицыДвиженийДокумента", Новый Структура());
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаписатьДвижения(ДокументОбъект) Экспорт
	
	Если Не ДокументОбъект.ДополнительныеСвойства.Свойство("ТаблицыДвиженийДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ДляПроведения")
		И ДокументОбъект.ДополнительныеСвойства.ДляПроведения.Свойство("ДанныеДокумента") Тогда
		ДокументОбъект.ДополнительныеСвойства.ДляПроведения.ДанныеДокумента.Закрыть();
	КонецЕсли;
	
	Движения = ДокументОбъект.Движения;
	
	Для Каждого ТекущееДвижение Из ДокументОбъект.ДополнительныеСвойства.ТаблицыДвиженийДокумента Цикл
		
		Движения[ТекущееДвижение.Ключ].Записывать = Истина;
		Если Движения[ТекущееДвижение.Ключ].Количество() = 0 Тогда
			Движения[ТекущееДвижение.Ключ].Загрузить(ТекущееДвижение.Значение);
		Иначе
			// Доплним движения таблицей
			Для Каждого Запись Из ТекущееДвижение.Значение Цикл
				ЗаполнитьЗначенияСвойств(Движения[ТекущееДвижение.Ключ].Добавить(), Запись);
			КонецЦикла;
		КонецЕсли;
		Движения[ТекущееДвижение.Ключ].Записать();
		Движения[ТекущееДвижение.Ключ].Записывать = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьТаблицуРегистра(ИмяРегистра) Экспорт
	
	СтруктураРегистра = Новый ТаблицаЗначений;
	
	Для Каждого СтандартныйРеквизит Из Метаданные.РегистрыНакопления[ИмяРегистра].СтандартныеРеквизиты Цикл
		
		СтруктураРегистра.Колонки.Добавить(
			СтандартныйРеквизит.Имя,
			СтандартныйРеквизит.Тип);
		
	КонецЦикла;
	
	Для Каждого ТекущееИзмерение Из Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		
		СтруктураРегистра.Колонки.Добавить(
			ТекущееИзмерение.Имя,
			ТекущееИзмерение.Тип);
		
	КонецЦикла;
	
	Для Каждого ТекущийРесурс Из Метаданные.РегистрыНакопления[ИмяРегистра].Ресурсы Цикл
		
		СтруктураРегистра.Колонки.Добавить(
			ТекущийРесурс.Имя,
			ТекущийРесурс.Тип);
		
	КонецЦикла;
	
	Для Каждого ТекущийРеквизит Из Метаданные.РегистрыНакопления[ИмяРегистра].Реквизиты Цикл
		
		СтруктураРегистра.Колонки.Добавить(
			ТекущийРеквизит.Имя,
			ТекущийРеквизит.Тип);
		
	КонецЦикла;
	
	Возврат СтруктураРегистра;
	
КонецФункции

Функция ПересчитанаВВалюту(
		Объект,
		Товары,
		РасчетыСКонтрагентами,
		СведенияОВалюте,
		ЭтоПродажа = Истина,
		ПересчитатьОплатуПоКурсу = Ложь) Экспорт
	
	// Проверим необходимость пересчета
	Если СведенияОВалюте.Свойство("ВалютаДоговора")
		И (СведенияОВалюте.ВалютаДоговора = СведенияОВалюте.ВалютаРегл
		И СведенияОВалюте.ВалютаДоговора = СведенияОВалюте.ВалютаУпр)
		ИЛИ РасчетыСКонтрагентами = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ДокументыВозврата = Новый Массив;
	ДокументыВозврата.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателя"));
	ДокументыВозврата.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей"));
	ДокументыВозврата.Добавить(Тип("ДокументСсылка.ВозвратПоставщику"));
	ДокументыВозврата.Добавить(Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей"));
	ДокументыВозврата.Добавить(Тип("ДокументОбъект.ВозвратОтПокупателя"));
	ДокументыВозврата.Добавить(Тип("ДокументОбъект.ВозвратОтПокупателяАвтомобилей"));
	ДокументыВозврата.Добавить(Тип("ДокументОбъект.ВозвратПоставщику"));
	ДокументыВозврата.Добавить(Тип("ДокументОбъект.ВозвратПоставщикуАвтомобилей"));
	
	СуммаДокумента = Товары.Итог("Сумма");
	
	// Найдем суммы для распределения из расчетов с контрагентами
	СуммаРаспределения = 0;
	СуммаРаспределенияУпр = 0;
	ТипОбъекта = ТипЗнч(Объект);
	УсловиеОтбора = Новый Структура;
	
	Если ТипОбъекта = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		УсловиеОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	ВВалютеУпрСоответствует = (Объект.ВалютаДокумента = СведенияОВалюте.ВалютаУпр И СуммаРаспределенияУпр = СуммаДокумента);
	ВВалютеБазСоответствует = (Объект.ВалютаДокумента = СведенияОВалюте.ВалютаРегл И СуммаРаспределения = СуммаДокумента);
	
	Если ПересчитатьОплатуПоКурсу Тогда
		
		КопияРасчетовСКонтрагентами = РасчетыСКонтрагентами.Скопировать();
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			НайденныеСтроки = КопияРасчетовСКонтрагентами.НайтиСтроки(УсловиеОтбора);
		Иначе
			НайденныеСтроки = КопияРасчетовСКонтрагентами;
		КонецЕсли;
		СтрокиАванса = Новый Массив();
		
		Для Каждого СтрокаРасчета Из НайденныеСтроки Цикл
			
			Если СтрокаРасчета.ТипРасчета <> Перечисления.ТипыРасчетов.Аванс Тогда
				Если ЭтоПродажа И СтрокаРасчета.ВидДвижения = ВидДвиженияНакопления.Расход
					ИЛИ Не ЭтоПродажа И СтрокаРасчета.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
					СтрокаРасчета.Сумма = -СтрокаРасчета.Сумма;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			СуммаРаспределения = СуммаРаспределения + СтрокаРасчета.СуммаБаз;
			СуммаРаспределенияУпр = СуммаРаспределенияУпр + СтрокаРасчета.СуммаУпр;
			СтрокиАванса.Добавить(СтрокаРасчета);
			
		КонецЦикла;
		
		Для Каждого СтрокаАванса Из СтрокиАванса Цикл
			
			КопияРасчетовСКонтрагентами.Удалить(СтрокаАванса);
			
		КонецЦикла;
		
		ДатаВалюты = ПолучитьЗначениеПараметраСтруктуры(СведенияОВалюте, "Дата", Объект.Дата);
		СуммаРаспределения = СуммаРаспределения + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			КопияРасчетовСКонтрагентами.Итог("Сумма"),
			СведенияОВалюте.ВалютаДоговора,
			ДатаВалюты,
			СведенияОВалюте.ВалютаРегл,
			СведенияОВалюте.КурсРегл);
		СуммаРаспределенияУпр = СуммаРаспределенияУпр + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			КопияРасчетовСКонтрагентами.Итог("Сумма"),
			СведенияОВалюте.ВалютаДоговора,
			ДатаВалюты,
			СведенияОВалюте.ВалютаУпр,
			СведенияОВалюте.КурсУпр);
		
	Иначе
		
		Если ДокументыВозврата.Найти(ТипОбъекта) <> Неопределено Тогда
			УсловиеОтбора.Вставить("ВидДвижения", ?(ЭтоПродажа, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход));
		Иначе
			УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
			УсловиеОтбора.Вставить("ВидДвижения", ?(ЭтоПродажа, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход));
		КонецЕсли;
		
		НайденныеСтроки = РасчетыСКонтрагентами.НайтиСтроки(УсловиеОтбора);
		
		Для Каждого СтрокаРасчета Из НайденныеСтроки Цикл
			СуммаРаспределения = СуммаРаспределения + СтрокаРасчета.СуммаБаз;
			СуммаРаспределенияУпр = СуммаРаспределенияУпр + СтрокаРасчета.СуммаУпр;
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтоРеализацияАктивов = (ТипЗнч(Объект) = Тип("ДокументСсылка.РеализацияАктивов"));
	
	ДокументыСЧастичнымиСуммами = Новый Массив;
	ДокументыСЧастичнымиСуммами.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	ДокументыСЧастичнымиСуммами.Добавить(Тип("ДокументСсылка.РеализацияАвтомобилей"));
	
	ЭтоТоварыСЧастичнымиСуммами = ДокументыСЧастичнымиСуммами.Найти(ТипЗнч(Объект)) <> Неопределено
		ИЛИ ДокументыСЧастичнымиСуммами.Найти(ТипЗнч(Объект.Ссылка)) <> Неопределено;
	ТребуетсяУчитыватьИтоговуюСумму = (ЭтоРеализацияАктивов ИЛИ ЭтоТоварыСЧастичнымиСуммами);
	
	Если ТребуетсяУчитыватьИтоговуюСумму Тогда
		ПустаяСтрока = Товары.Добавить();
		Если ЭтоРеализацияАктивов Тогда
			ПустаяСтрока.Сумма = Объект.Активы.Итог("Сумма") - Товары.Итог("Сумма");
		Иначе
			Если ЕстьРеквизит(Товары, "СуммаВсего") Тогда
				Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаВсего"), "Сумма");
			КонецЕсли;
			ПустаяСтрока.Сумма = Объект.СуммаДокумента - Товары.Итог("Сумма");
		КонецЕсли;
	КонецЕсли;
	
	// Распределим суммы по таблице
	
	// Добавим для этого необходимые колонки и заполним их
	ЕстьСуммаУпр = ЕстьРеквизит(Товары, "СуммаУпр");
	ЕстьСуммаНДСУпр = ЕстьРеквизит(Товары, "СуммаНДСУпр");
	ЕстьСкидки = ЕстьРеквизит(Товары, "СуммаСкидки");
	ЕстьСуммаСкидкиУпр = ЕстьРеквизит(Товары, "СуммаСкидкиУпр");
	
	Если Не ЕстьСуммаУпр Тогда
		СуммыТоваров = Товары.ВыгрузитьКолонку("Сумма");
		Товары.Колонки.Добавить("СуммаУпр");
		Товары.ЗагрузитьКолонку(СуммыТоваров, "СуммаУпр");
	КонецЕсли; 
	
	Если Не ЕстьСуммаНДСУпр Тогда
		Товары.Колонки.Добавить("СуммаНДСУпр");
	КонецЕсли;
	
	Если ЕстьСкидки И Не ЕстьСуммаСкидкиУпр Тогда
		СуммыТоваров = Товары.ВыгрузитьКолонку("СуммаСкидки");
		Товары.Колонки.Добавить("СуммаСкидкиУпр");
		Товары.ЗагрузитьКолонку(СуммыТоваров, "СуммаСкидкиУпр");
	КонецЕсли;
	
	// Суммы
	Если Не ВВалютеБазСоответствует Тогда
		РаспределитьСуммуПоТаблице(
			СуммаРаспределения,
			Товары,
			"Сумма");
	КонецЕсли;
	
	Если Не ВВалютеУпрСоответствует Тогда
		РаспределитьСуммуПоТаблице(
			СуммаРаспределенияУпр,
			Товары,
			"СуммаУпр");
	КонецЕсли;
	
	Если ТребуетсяУчитыватьИтоговуюСумму Тогда
		Товары.Удалить(ПустаяСтрока);
	КонецЕсли;
	
	СтавкиТоваров = Новый Соответствие;
	
	ЕстьПоставщик = ЕстьРеквизит(Товары, "Поставщик"); 
	ЕстьСебестоимостьАвтомобиля = ЕстьРеквизит(Товары, "Себестоимость");
	ЕстьСебестоимостьАвтомобиляРегл = ЕстьРеквизит(Товары, "СебестоимостьРегл");
	
	// Суммы НДС и суммы скидок
	Для Каждого СтрокаТовара Из Товары Цикл
		
		ПроцентНДС = СтавкиТоваров.Получить(СтрокаТовара.СтавкаНДС);
		
		Если ПроцентНДС = Неопределено Тогда
			
			ПроцентНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовара.СтавкаНДС, "Ставка");
			
			Если ПроцентНДС = Неопределено Тогда
				ПроцентНДС = 0;
			КонецЕсли;
				
			СтавкиТоваров.Вставить(СтрокаТовара.СтавкаНДС, ПроцентНДС);
			
		КонецЕсли;
		
		ФормаСобственностиЧастноеЛицо = ЕстьПоставщик И 
			СтрокаТовара.Поставщик.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо; 
		// Если реализация, то сумму НДС пересчитает по валюте
		Если (ЕстьСебестоимостьАвтомобиля ИЛИ ЕстьСебестоимостьАвтомобиляРегл) И ФормаСобственностиЧастноеЛицо Тогда
			
			ИмяКолонкиСебестоимостиУпр = ?(ЕстьРеквизит(Товары, "СебестоимостьУпр"), "СебестоимостьУпр", "Себестоимость");
			
			СебестоимостьРегл = СтрокаТовара.СебестоимостьРегл * ?(СтрокаТовара.СебестоимостьРегл > 0, 1, -1);
			Себестоимость = СтрокаТовара[ИмяКолонкиСебестоимостиУпр] * ?(СтрокаТовара[ИмяКолонкиСебестоимостиУпр] > 0, 1, -1);
			
			НуженРасчетСуммыНДС = (ЕстьСебестоимостьАвтомобиляРегл И СебестоимостьРегл < СтрокаТовара.Сумма)
				ИЛИ (Себестоимость < СтрокаТовара.СуммаУпр);
				
			Если Не НуженРасчетСуммыНДС Тогда
				СтрокаТовара.СуммаНДСУпр = 0;
				СтрокаТовара.СуммаНДС = 0;
			ИначеЕсли ЕстьСебестоимостьАвтомобиляРегл Тогда
				СтрокаТовара.СуммаНДСУпр = Окр(
					(СтрокаТовара.СуммаУпр - Себестоимость) * ПроцентНДС / (100 + ПроцентНДС), 2);
				СтрокаТовара.СуммаНДС = Окр(
					(СтрокаТовара.Сумма - СебестоимостьРегл) * ПроцентНДС / (100 + ПроцентНДС), 2);
			Иначе
				СтрокаТовара.СуммаНДСУпр = Окр(
					(СтрокаТовара.СуммаУпр
					- РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						СтрокаТовара.Себестоимость,
						Объект.ВалютаДокумента,
						Объект.КурсДокумента,
						СведенияОВалюте.ВалютаУпр,
						СведенияОВалюте.КурсУпр)) * ПроцентНДС / (100 + ПроцентНДС), 2);
						
				СтрокаТовара.СуммаНДС = Окр(
					(СтрокаТовара.Сумма
					- РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						СтрокаТовара.Себестоимость,
						Объект.ВалютаДокумента,
						Объект.КурсДокумента,
						СведенияОВалюте.ВалютаРегл,
						СведенияОВалюте.КурсРегл)) * ПроцентНДС / (100 + ПроцентНДС), 2);
			КонецЕсли;
			
		Иначе
			
			СтрокаТовара.СуммаНДСУпр = Окр(СтрокаТовара.СуммаУпр * ПроцентНДС / (100 + ПроцентНДС), 2);
			СтрокаТовара.СуммаНДС = Окр(СтрокаТовара.Сумма * ПроцентНДС / (100 + ПроцентНДС), 2);
			
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			
			СтрокаТовара.СуммаСкидкиУпр = Окр(?(СтрокаТовара.СуммаСкидки = NULL, 0, 
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовара.СуммаСкидки, 
					Объект.ВалютаДокумента, Объект.КурсДокумента, СведенияОВалюте.ВалютаУпр, СведенияОВалюте.КурсУпр)), 2);
			СтрокаТовара.СуммаСкидки = Окр(?(СтрокаТовара.СуммаСкидки = NULL, 0, 
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовара.СуммаСкидки, 
					Объект.ВалютаДокумента, Объект.КурсДокумента, СведенияОВалюте.ВалютаРегл, СведенияОВалюте.КурсРегл)), 2);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПересчитанаВВалютуКорректировка(
		Объект,
		Товары,
		РасчетыСКонтрагентами,
		СведенияОВалюте,
		ЭтоПродажа = Истина,
		ИмяСуммыДо = Неопределено) Экспорт
	
	// Проверим необходимость пересчета
	Если СведенияОВалюте.Свойство("ВалютаДоговора")
		И (СведенияОВалюте.ВалютаДоговора = СведенияОВалюте.ВалютаРегл
		И СведенияОВалюте.ВалютаДоговора = СведенияОВалюте.ВалютаУпр) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Сумма");
	
	// Найдем суммы для распределения из расчетов с контрагентами
	СуммаРаспределения = 0;
	СуммаРаспределенияУпр = 0;
	СуммаРаспределенияДо = 0;
	СуммаРаспределенияДоУпр = 0;
	
	// Запрос по регистрам на получние данных для заполнения сумм
	ЕстьСуммаУпрДоКорректировки = ЕстьРеквизит(РасчетыСКонтрагентами, "СуммаУпрДоКорректировки");
	ЕстьСуммаБазДоКорректировки = ЕстьРеквизит(РасчетыСКонтрагентами, "СуммаБазДоКорректировки");
	ЕстьСуммаРазницыУпр = ЕстьРеквизит(РасчетыСКонтрагентами, "СуммаРазницаУпр");
	ЕстьСуммаРазницы = ЕстьРеквизит(РасчетыСКонтрагентами, "СуммаРазницаБаз");
	
	Для Каждого СтрокаРасчета Из РасчетыСКонтрагентами Цикл
		
		Коэффициент = ?(
			ЭтоПродажа И СтрокаРасчета.ВидДвижения = ВидДвиженияНакопления.Расход
			ИЛИ Не ЭтоПродажа И СтрокаРасчета.ВидДвижения = ВидДвиженияНакопления.Приход, -1, 1);
		
		СуммаРаспределения = СуммаРаспределения + СтрокаРасчета.СуммаБаз * Коэффициент;
		СуммаРаспределенияУпр = СуммаРаспределенияУпр + СтрокаРасчета.СуммаУпр * Коэффициент;
		
		Если ЕстьСуммаБазДоКорректировки Тогда
			СуммаРаспределенияДо = СуммаРаспределенияДо + СтрокаРасчета.СуммаБазДоКорректировки * Коэффициент;
		КонецЕсли;
		Если ЕстьСуммаУпрДоКорректировки Тогда
			СуммаРаспределенияДоУпр = СуммаРаспределенияДоУпр + СтрокаРасчета.СуммаУпрДоКорректировки * Коэффициент;
		КонецЕсли;
		
	КонецЦикла;
	
	ВВалютеУпрСоответствует = (Объект.ВалютаДокумента = СведенияОВалюте.ВалютаУпр И СуммаРаспределенияУпр = СуммаДокумента);
	ВВалютеБазСоответствует = (Объект.ВалютаДокумента = СведенияОВалюте.ВалютаРегл И СуммаРаспределения = СуммаДокумента);
	
	// Распределим суммы по таблице
	
	// Добавим для этого необходимые колонки и заполним их
	ЕстьСуммаУпр = ЕстьРеквизит(Товары, "СуммаУпр");
	ЕстьСуммаНДСУпр = ЕстьРеквизит(Товары, "СуммаНДСУпр");
	ЕстьСкидки = ЕстьРеквизит(Товары, "СуммаСкидки");
	ЕстьСуммаСкидкиУпр = ЕстьРеквизит(Товары, "СуммаСкидкиУпр");
	
	// Добавим фиктивную строку для корректного распределения сумм с учетом неизмененных строк
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект);
	ИтогиОперации = МенеджерОбъекта.РассчитатьИтогиОперации(Объект);
	
	ПустаяСтрока = Товары.Добавить();
	ПустаяСтрока.Сумма = ИтогиОперации.СуммаДокумента - Товары.Итог("Сумма");
	
	Если Не ЕстьСуммаУпр Тогда
		
		СуммыТоваров = Товары.ВыгрузитьКолонку("Сумма");
		Товары.Колонки.Добавить("СуммаУпр");
		Товары.ЗагрузитьКолонку(СуммыТоваров, "СуммаУпр");
		
	КонецЕсли; 
	
	Если Не ЕстьСуммаНДСУпр Тогда
		
		Товары.Колонки.Добавить("СуммаНДСУпр");
		
	КонецЕсли;
	
	Если ЕстьСкидки И Не ЕстьСуммаСкидкиУпр Тогда
		
		СуммыТоваров = Товары.ВыгрузитьКолонку("СуммаСкидки");
		Товары.Колонки.Добавить("СуммаСкидкиУпр");
		Товары.ЗагрузитьКолонку(СуммыТоваров, "СуммаСкидкиУпр");
		
	КонецЕсли;
	
	// Суммы
	Если Не ВВалютеБазСоответствует Тогда
		РаспределитьСуммуПоТаблице(
			СуммаРаспределения,
			Товары,
			"Сумма");
	КонецЕсли;
	
	Если Не ВВалютеУпрСоответствует Тогда
		РаспределитьСуммуПоТаблице(
			СуммаРаспределенияУпр,
			Товары,
			"СуммаУпр");
	КонецЕсли;
	
	Если ИмяСуммыДо <> Неопределено
		И ЕстьРеквизит(Товары, ИмяСуммыДо) Тогда
		
		ПустаяСтрока[ИмяСуммыДо] = ИтогиОперации.СуммаДокументаДоКорректировки - Товары.Итог(ИмяСуммыДо);
		
		ИмяСуммыДоУпр = ИмяСуммыДо + "Упр";
		СуммыТоваров = Товары.ВыгрузитьКолонку(ИмяСуммыДо);
		Товары.Колонки.Добавить(ИмяСуммыДоУпр);
		Товары.ЗагрузитьКолонку(СуммыТоваров, ИмяСуммыДоУпр);
		
		Если Не ВВалютеБазСоответствует Тогда
			РаспределитьСуммуПоТаблице(
				СуммаРаспределенияДо,
				Товары,
				ИмяСуммыДо);
		КонецЕсли;
		
		Если Не ВВалютеУпрСоответствует Тогда
			РаспределитьСуммуПоТаблице(
				СуммаРаспределенияДоУпр,
				Товары,
				ИмяСуммыДоУпр);
		КонецЕсли;
		
		ИмяСуммыНДСДо = СтрЗаменить(ИмяСуммыДо, "СуммаВсего", "СуммаНДС");
		ИмяСуммыНДСУпрДо = СтрЗаменить(ИмяСуммыДоУпр, "СуммаВсего", "СуммаНДС");
		ЕстьСуммаНДСДо = ЕстьРеквизит(Товары, ИмяСуммыНДСДо);
		ЕстьСуммаНДСУпрДо = ЕстьРеквизит(Товары, ИмяСуммыНДСУпрДо);
		
		Если Не ЕстьСуммаНДСУпрДо Тогда
			
			Товары.Колонки.Добавить(ИмяСуммыНДСУпрДо);
			
		КонецЕсли;
		
		Если ЕстьРеквизит(Товары, "СтавкаНДСДоИзменения") Тогда
			ИмяСтавкаНДСДо = "СтавкаНДСДоИзменения";
		Иначе
			ИмяСтавкаНДСДо = СтрЗаменить(ИмяСуммыДо, "СуммаВсего", "СтавкаНДС");
		КонецЕсли;
		
	Иначе
		
		ИмяСуммыДоУпр = "";
		ИмяСуммыНДСДо = "";
		ИмяСуммыНДСУпрДо = "";
		ИмяСтавкаНДСДо = "";
		ЕстьСуммаНДСДо = Ложь;
		ЕстьСуммаНДСУпрДо = Ложь;
		
	КонецЕсли;
	
	Товары.Удалить(ПустаяСтрока);
	
	ЕстьСебестоимостьАвтомобиля = ЕстьРеквизит(Товары, "Себестоимость");
	ЕстьСебестоимостьАвтомобиляРегл = ЕстьРеквизит(Товары, "СебестоимостьРегл");
	
	СтавкиТоваров = Новый Соответствие;
	
	// Суммы НДС и суммы скидок
	Для Каждого СтрокаТовара Из Товары Цикл
		
		ПроцентНДС = СтавкиТоваров.Получить(СтрокаТовара.СтавкаНДС);
		
		Если ПроцентНДС = Неопределено Тогда
			
			ПроцентНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовара.СтавкаНДС, "Ставка");
			
			Если ПроцентНДС = Неопределено Тогда
				ПроцентНДС = 0;
			КонецЕсли;

			СтавкиТоваров.Вставить(СтрокаТовара.СтавкаНДС, ПроцентНДС);
			
		КонецЕсли;
		
		// Если реализация, то сумму НДС пересчитает по валюте
		Если ЕстьСебестоимостьАвтомобиля ИЛИ ЕстьСебестоимостьАвтомобиляРегл Тогда
			
			ИмяКолонкиСебестоимостиУпр = ?(ЕстьРеквизит(Товары, "СебестоимостьУпр"), "СебестоимостьУпр", "Себестоимость");
			
			НуженРасчетСуммыНДС = (ЕстьСебестоимостьАвтомобиляРегл И СтрокаТовара.СебестоимостьРегл < СтрокаТовара.Сумма)
				ИЛИ (СтрокаТовара[ИмяКолонкиСебестоимостиУпр] < СтрокаТовара.СуммаУпр);
				
			Если Не НуженРасчетСуммыНДС Тогда
				СтрокаТовара.СуммаНДСУпр = 0;
				СтрокаТовара.СуммаНДС = 0;
			ИначеЕсли ЕстьСебестоимостьАвтомобиляРегл Тогда
				СтрокаТовара.СуммаНДСУпр = Окр(
					(СтрокаТовара.СуммаУпр - СтрокаТовара[ИмяКолонкиСебестоимостиУпр]) * ПроцентНДС / (100 + ПроцентНДС), 2);
				СтрокаТовара.СуммаНДС = Окр(
					(СтрокаТовара.Сумма - СтрокаТовара.СебестоимостьРегл) * ПроцентНДС / (100 + ПроцентНДС), 2);
			Иначе
				СтрокаТовара.СуммаНДСУпр = Окр(
					(СтрокаТовара.СуммаУпр
					- РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						СтрокаТовара.Себестоимость,
						Объект.ВалютаДокумента,
						Объект.КурсДокумента,
						СведенияОВалюте.ВалютаУпр,
						СведенияОВалюте.КурсУпр)) * ПроцентНДС / (100 + ПроцентНДС), 2);
						
				СтрокаТовара.СуммаНДС = Окр(
					(СтрокаТовара.Сумма
					- РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						СтрокаТовара.Себестоимость,
						Объект.ВалютаДокумента,
						Объект.КурсДокумента,
						СведенияОВалюте.ВалютаРегл,
						СведенияОВалюте.КурсРегл)) * ПроцентНДС / (100 + ПроцентНДС), 2);
			КонецЕсли;
			
		Иначе
			
			СтрокаТовара.СуммаНДСУпр = Окр(СтрокаТовара.СуммаУпр * ПроцентНДС / (100 + ПроцентНДС), 2);
			СтрокаТовара.СуммаНДС = Окр(СтрокаТовара.Сумма * ПроцентНДС / (100 + ПроцентНДС), 2);
			
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			
			СтрокаТовара.СуммаСкидкиУпр = Окр(?(СтрокаТовара.СуммаСкидки = NULL, 0, 
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовара.СуммаСкидки, 
					Объект.ВалютаДокумента, Объект.КурсДокумента, СведенияОВалюте.ВалютаУпр, СведенияОВалюте.КурсУпр)), 2);
			СтрокаТовара.СуммаСкидки = Окр(?(СтрокаТовара.СуммаСкидки = NULL, 0, 
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовара.СуммаСкидки, 
					Объект.ВалютаДокумента, Объект.КурсДокумента, СведенияОВалюте.ВалютаРегл, СведенияОВалюте.КурсРегл)), 2);
			
		КонецЕсли;
		
		Если ЕстьСуммаНДСДо Тогда
			
			ПроцентНДСДо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовара[ИмяСтавкаНДСДо], "Ставка");
			
			Если ЕстьСебестоимостьАвтомобиля ИЛИ ЕстьСебестоимостьАвтомобиляРегл Тогда
				
				НуженРасчетСуммыНДС = (ЕстьСебестоимостьАвтомобиляРегл И СтрокаТовара.СебестоимостьРегл < СтрокаТовара[ИмяСуммыДо])
					ИЛИ (СтрокаТовара[ИмяКолонкиСебестоимостиУпр] < СтрокаТовара[ИмяСуммыДоУпр]);
					
				Если Не НуженРасчетСуммыНДС Тогда
					СтрокаТовара[ИмяСуммыНДСДо] = 0;
					СтрокаТовара[ИмяСуммыНДСУпрДо] = 0;
				Иначе
					СтрокаТовара[ИмяСуммыНДСУпрДо] = Окр(
						(СтрокаТовара[ИмяСуммыДоУпр] - СтрокаТовара[ИмяКолонкиСебестоимостиУпр])
						* ПроцентНДСДо / (100 + ПроцентНДСДо), 2);
					СтрокаТовара[ИмяСуммыНДСДо] = Окр(
						(СтрокаТовара[ИмяСуммыДо] - СтрокаТовара.СебестоимостьРегл) * ПроцентНДСДо / (100 + ПроцентНДСДо), 2);
				КонецЕсли;
				
			Иначе
				
				СтрокаТовара[ИмяСуммыНДСДо] = Окр(СтрокаТовара[ИмяСуммыДо] * ПроцентНДСДо / (100 + ПроцентНДСДо), 2);
				СтрокаТовара[ИмяСуммыНДСУпрДо] = Окр(СтрокаТовара[ИмяСуммыДоУпр] * ПроцентНДСДо / (100 + ПроцентНДСДо), 2);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура РаспределитьСуммуПоТаблице(
		СуммаРаспределения,
		Данные,
		ИмяКолонкиСуммы,
		ИмяКолонкиСуммыБазы = "") Экспорт
		
	Если СуммаРаспределения <> 0 Тогда
		Если ПустаяСтрока(ИмяКолонкиСуммыБазы) Тогда
			МассивСтарыхСумм = Данные.ВыгрузитьКолонку(ИмяКолонкиСуммы);
		Иначе
			МассивСтарыхСумм = Данные.ВыгрузитьКолонку(ИмяКолонкиСуммыБазы);
		КонецЕсли;
		МассивНовыхСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРаспределения,
			МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
	 		Данные.ЗагрузитьКолонку(МассивНовыхСумм, ИмяКолонкиСуммы);
		КонецЕсли;
	Иначе
		Если ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
			Данные.ЗаполнитьЗначения(0, ИмяКолонкиСуммы);
		Иначе
			Для Каждого Строка Из Данные Цикл
				Строка[ИмяКолонкиСуммы] = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоСчетНаОплату(ТипОбъекта) Экспорт
	
	ДоступныеСчета = Новый Массив;
	ДоступныеСчета.Добавить(Тип("ДокументСсылка.СчетНаОплату"));
	ДоступныеСчета.Добавить(Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили"));
	ДоступныеСчета.Добавить(Тип("ДокументСсылка.СчетОтПоставщика"));
	ДоступныеСчета.Добавить(Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили"));
	ДоступныеСчета.Добавить(Тип("ДокументОбъект.СчетНаОплату"));
	ДоступныеСчета.Добавить(Тип("ДокументОбъект.СчетНаОплатуЗаАвтомобили"));
	ДоступныеСчета.Добавить(Тип("ДокументОбъект.СчетОтПоставщика"));
	ДоступныеСчета.Добавить(Тип("ДокументОбъект.СчетОтПоставщикаЗаАвтомобили"));
	
	Возврат (ДоступныеСчета.Найти(ТипОбъекта) <> Неопределено);
	
КонецФункции

Функция ЭтоЗаказАвтомобиля(ТипОбъекта) Экспорт
	
	ЗаказыАвтомобиля = Новый Массив;
	ЗаказыАвтомобиля.Добавить(Тип("ДокументСсылка.ЗаказНаАвтомобиль"));
	ЗаказыАвтомобиля.Добавить(Тип("ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили"));
	ЗаказыАвтомобиля.Добавить(Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль"));
	ЗаказыАвтомобиля.Добавить(Тип("ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили"));
	
	Возврат (ЗаказыАвтомобиля.Найти(ТипОбъекта) <> Неопределено);
	
КонецФункции // ЭтоЗаказАвтомобиля()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура производит проверку соответствия вида номенклатуры и хозоперации.
//
// Параметры:
//  ЭтотОбъект    - ДокументОбъект - Документ, который обрабатывается.
//
Процедура ПроверитьСоответствиеВидаНоменклатурыХозОперации(Объект, Отказ)
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	Если НЕ ЕстьРеквизит(МетаданныеОбъекта, "ХозОперация") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоменклатурыВТаблицах = Новый Структура;
	ОбщийСписокНоменклатуры = Новый Массив;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если ЕстьРеквизит(ТабличнаяЧасть, "Номенклатура") Тогда
			
			НоменклатураВТаблице = Объект[ТабличнаяЧасть.Имя].Выгрузить().ВыгрузитьКолонку("Номенклатура");
			
			Если НоменклатураВТаблице.Количество() Тогда
			
				НоменклатурыВТаблицах.Вставить(ТабличнаяЧасть.Имя, НоменклатураВТаблице);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ОбщийСписокНоменклатуры, НоменклатурыВТаблицах[ТабличнаяЧасть.Имя], Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбщийСписокНоменклатуры.Количество() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(Объект.ХозОперация);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(
		ВидыНоменклатуры, ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Набор"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Номенклатура.Ссылка) КАК НоменклатураПредставление
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И НЕ Номенклатура.ВидНоменклатуры В (&ВидНоменклатуры)");
	Запрос.УстановитьПараметр("СписокНоменклатуры", ОбщийСписокНоменклатуры);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидыНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПлохаяНоменклатура = РезультатЗапроса.Выгрузить();
	ХозОперацияПредставление = Строка(Объект.ХозОперация);
	
	Для Каждого Строка Из ПлохаяНоменклатура Цикл
		
		Для Каждого КлючЗначение Из НоменклатурыВТаблицах Цикл
			
			СтрокиВТаблице = Объект[КлючЗначение.Ключ].НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
			
			Если НЕ СтрокиВТаблице.Количество() Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого СтрокаВТаблице Из СтрокиВТаблице Цикл
			
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Вид номенклатуры ""%1"" недопустим для выбранной операции ""%2"".'"),
						Строка.НоменклатураПредставление,
						ХозОперацияПредставление
					),
						Объект,
						КлючЗначение.Ключ + "[" + (СтрокаВТаблице.НомерСтроки-1) +"].Номенклатура", 
						,
						Отказ
				);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьСоответствиеВидаНоменклатурыХозОперации()

// Удаляет движения документа по тем регистрам, по которым действительно были движения.
//
// Параметры:
//  Объект - ДокументОбъект - Документ, чьи движения нужно удалить
//  УдалитьДвижения - Булево - Признак удаления движений документа.
//
Процедура УдалениеДвиженийДокумента(Объект, УдалитьДвижения = Ложь)
	
	// ААА6 ++
	
	Если ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, "ЭтоНовый", Ложь)
		ИЛИ Объект.Движения.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ УдалитьДвижения Тогда
		ЗаказыСервер.ОбновитьСостояниеЗаказов(Объект);
	КонецЕсли;
	
	Для Каждого Движение Из Объект.Движения Цикл
		
		Если Движение.Количество() Тогда
			
			Движение.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|""%1"" КАК ИмяРегистра
	|
	|ИЗ %2
	|
	|ГДЕ Регистратор = &Регистратор
	|";
	
	Разделитель = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ЧастиЗапроса = Новый Массив;
	
	Для Каждого Движение Из Объект.Метаданные().Движения Цикл
		
		Если Движение.Имя = "СостоянияДокументов" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Аренда
		Если Движение.Имя = "АрендаСостоянияАвтомобилей" И ТипЗнч(Объект) = Тип("ДокументОбъект.ДоговорАренды") Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиЗапроса.Добавить(СтрШаблон(ШаблонЗапроса, Движение.Имя, Движение.ПолноеИмя()));
		
	КонецЦикла;
	
	Если НЕ ЧастиЗапроса.Количество() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрСоединить(ЧастиЗапроса, Разделитель));
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект.Движения[Выборка.ИмяРегистра].ДополнительныеСвойства.Вставить("ОтменаПроведения", Истина);
		Объект.Движения[Выборка.ИмяРегистра].Записать();
		Объект.Движения[Выборка.ИмяРегистра].ДополнительныеСвойства.Удалить("ОтменаПроведения");
		
	КонецЦикла;
	
	// ААА6 --
	
КонецПроцедуры // УдалениеДвиженийДокумента()

// Сохраняет в дополнительные свойства движения документа по регистрам до момента проведения.
//
// Параметры:
//  Объект - ДокументОбъект - Документ, чьи движения нужно сохранить.
//
Процедура СохранениеДвиженийДокумента(Объект)

	Объект.ДополнительныеСвойства.Удалить("ДвиженияПередПроведением");

	ДвиженияДоПроведения = Новый Структура;
	
	Для Каждого ЭлементДвижений Из Объект.Движения Цикл
		ЭлементДвижений.Прочитать();
        ИмяТаблицыДвижений = Строка(ЭлементДвижений);
		ТаблицаДвижений = ЭлементДвижений.Выгрузить();
		ПозицияРазделителя = СтрНайти(ИмяТаблицыДвижений, ".");
		ИмяТаблицыДвижений = Сред(ИмяТаблицыДвижений, ПозицияРазделителя + 1);
		ДвиженияДоПроведения.Вставить(ИмяТаблицыДвижений, ТаблицаДвижений);
	КонецЦикла;

	Объект.ДополнительныеСвойства.Вставить("ДвиженияПередПроведением", ДвиженияДоПроведения);
	
КонецПроцедуры // СохранениеДвиженийДокумента()

// Вызывает обработчик проверки корректности заполнения документа в режиме "Запись" в зависимости от значения права.
//
// Параметры:
//  Объект      - ДокументОбъект       - Объект, для которого выполняется обработка события.
//  Отказ       - Булево               - Признак отказа от совершения операции.
//  РежимЗаписи - РежимЗаписиДокумента - Текущий режим записи документа.
//
Процедура ПроверитьЗаполнениеОбъектаПередЗаписью(Объект, Отказ, РежимЗаписи)
	
	// Если объект вводится на основании самого себя - отказ.
	Если ЕстьРеквизит(Объект, "ДокументОснование") Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И Объект.ДокументОснование = Объект.Ссылка Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нельзя вводить документ на основании самого себя.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПроверитьПатентОбъекта(Объект, Отказ, РежимЗаписи);
	
	// Интересует только режим "Запись", в противном случае платформа сама проверит при проведении.
	Если (НЕ РежимЗаписи=РежимЗаписиДокумента.Запись) Тогда
		Возврат;
	КонецЕсли;
	
	// Если объект помечается на удаление, то проверку его заполнения выполнять не требуется.
	Если Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Если объект не принадлежит для проведения, то проверку его заполнения выполнять по общим правилам.
	Если Объект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим возможность пользователя записывать объекты без проверки корректности
	Если ПраваИНастройкиПользователя.Значение("КонтролироватьЗаполнениеТолькоПриПроведении", Объект) Тогда
		Возврат;
	КонецЕсли;

	// Выполняем проверку заполнения
	Если НЕ Объект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеОбъектаПередЗаписью()

Функция НужнаПроверкаЗаполненияХарактеристики(ДополнительныеСвойстваОбъекта)
	
	КонтрольЗаполненияХарактеристики = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойстваОбъекта,
		"КонтрольЗаполненияХарактеристик",
		Истина);
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	Возврат (КонтрольЗаполненияХарактеристики И ИспользоватьХарактеристики);
	
КонецФункции

Функция НужнаПроверкаТаблицы(ИмяТаблицы, Документ, ОбязательныеРеквизиты)
	
	ЕстьРеквизитХарактеристика = ЕстьРеквизит(Документ, "ХарактеристикаНоменклатуры", ИмяТаблицы);
	НоменклатураОбязательная = (ОбязательныеРеквизиты.Найти(ИмяТаблицы + ".Номенклатура") <> Неопределено);
	Возврат (ЕстьРеквизитХарактеристика И НоменклатураОбязательная);
	
КонецФункции

Функция ДайПараметрыУчетаХарактеристикДляНоменклатур(Номенклатуры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.РучноеСписание)
	|				ИЛИ Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РучноеСписаниеХарактеристик,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
	|				ИЛИ Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетВедется
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНоменклатуры", Номенклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Соответствие();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыУчетаХарактеристикНоменклатуры = Новый Структура("УчетВедется,РучноеСписаниеХарактеристик");
		ЗаполнитьЗначенияСвойств(ПараметрыУчетаХарактеристикНоменклатуры, Выборка);
		Результат.Вставить(Выборка.Номенклатура, ПараметрыУчетаХарактеристикНоменклатуры);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НеверноЗаполненаХарактеристикаВСтроке(СтрокаТЧ, ПараметрыУчетаНоменклатур, Документ, ИмяТаблицы)
	
	ЕстьОшибки = Ложь;
	ЗапретАвтоСписанияХарактеристик = ПолучитьЗначениеПараметраСтруктуры(
		Документ.ДополнительныеСвойства, ИмяТаблицы + "ЗапретАвтоСписанияХарактеристик", Ложь);
	
	
	Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ХарактеристикаНоменклатуры) Тогда
		
		ПараметрыУчетаНоменклатуры = ПараметрыУчетаНоменклатур.Получить(СтрокаТЧ.Номенклатура);
		Если УчетХарактеристикВедетсяИОбязателен(ПараметрыУчетаНоменклатуры, ЗапретАвтоСписанияХарактеристик) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Поле ""%1"" строки %2 таблицы ""%3"" не заполнено'"),
					"ХарактеристикаНоменклатуры", 
					СтрокаТЧ.НомерСтроки,
					ИмяТаблицы
				),
				Документ,
				ИмяТаблицы+"[" + (СтрокаТЧ.НомерСтроки-1) + "].ХарактеристикаНоменклатуры",
				,
				ЕстьОшибки
			);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция УчетХарактеристикВедетсяИОбязателен(ПараметрыУчетаНоменклатуры, ЗапретАвтоСписанияХарактеристик)
	
	Если ПараметрыУчетаНоменклатуры = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбязательноеЗаполнение = ЗапретАвтоСписанияХарактеристик ИЛИ ПараметрыУчетаНоменклатуры.РучноеСписаниеХарактеристик;
	Возврат ПараметрыУчетаНоменклатуры.УчетВедется И ОбязательноеЗаполнение;
	
КонецФункции

// Процедура производит очистку номенклатуры с несоответствующим видом.
//
// Параметры:
//  Объект            - ДокументОбъект - Документ, который обрабатывается.
//  ИмяТабличнойЧасти - Строка         - Название табличной части для которой производится очистка.
//  СуффиксКолонок    - Строка         - Префикс колонки в которой содержится номенклатура.
//
Процедура УдалитьНесоответствующуюПоВидуНоменклатуру(Объект, ИмяТабличнойЧасти = "Товары", СуффиксКолонок = "")
	
	// Получим параметры текущего проверяемого объекта
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(Объект.ХозОперация);
	
	// Получаем таблицу с допустимыми видами номенклатуры в табличной части
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И НЕ Номенклатура.ВидНоменклатуры В (&ВидНоменклатуры)";
	Запрос = Новый Запрос(ТекстЗапроса);
	СписокНоменклатуры = Объект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Номенклатура" + СуффиксКолонок);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидыНоменклатуры);
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	// Получим строки с недопустимым видом номенклатуры
	Для Каждого НеСоответствующийВидНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", НеСоответствующийВидНоменклатуры.Номенклатура);
		МассивНесоответствующихСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
		
		// Удалим строки с недопустимым видом номенклатуры
		Для каждого НеСоответствующаяСтрока Из МассивНесоответствующихСтрок Цикл
			Объект[ИмяТабличнойЧасти].Удалить(Объект[ИмяТабличнойЧасти].Индекс(НеСоответствующаяСтрока));
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьНесоответствующуюПоВидуНоменклатуру()

// Процедура проверяет возможность установки пометки на удаление документа при наличии подчиненных.
//
// Параметры:
//  Объект - ДокументСсылка - Объект, для которого выполняется обработка события.
//  Отказ  - Булево - Признак отказа от совершения операции.
//
Процедура ПроверитьУдалениеДокументаПриНаличииПодчиненных(Объект, Отказ)
	
	Если НЕ Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим на наличие подчиненных документов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПредставлениеСписка = "";
		Для Каждого ПодчиненныйСсылка Из КритерииОтбора.ПодчиненныеДокументы.Найти(Объект.Ссылка) Цикл
			
			Если НЕ ПодчиненныйСсылка.ПометкаУдаления Тогда
				
				ПредставлениеСписка = ПредставлениеСписка + Символы.ПС + "- " + ПодчиненныйСсылка;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ПредставлениеСписка) Тогда
			
			Если НЕ  ПраваИНастройкиПользователя.Значение("УдалениеДокументовПриНаличииПодчиненных", Объект.Ссылка) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Недостаточно прав для установки пометки удаления для документа, на основании которого уже были сформированы подчиненные операции: %1'"),
						Символы.ПС + ПредставлениеСписка),
					Объект,
					,
					,
					Отказ
				);
					
			
				
			Иначе
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Помеченный на удаление документ ""%1"" имеет подчиненные.'"),
					Объект.Ссылка
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРедактированиеДокументаПриНаличииПодчиненных()

Процедура ПроверитьИсторическийПорядокОпераций(Объект, Отказ, РежимЗаписи, РежимПроведения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЕстьРеквизит(Объект, "ДокументОснование")
		И ЗначениеЗаполнено(Объект.ДокументОснование)
		И РежимЗаписи = РежимЗаписиДокумента.Проведение
		И НЕ РежимПроведения = РежимПроведенияДокумента.Оперативный
		И Объект.Дата < Объект.ДокументОснование.Дата Тогда
		
		// Сформируем исключение проверки для документа События на основании телефонного звонка
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.Событие")
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			Возврат;
		КонецЕсли;   
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураПолученный")
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			Возврат;
		КонецЕсли;
		
		Если  ПраваИНастройкиПользователя.Значение("ЗаписьРаньшеДокументаОснования", Объект) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Документ ""%1"" проводится раньше, чем документ-основание ""%2""'"),
					Объект,
					Объект.ДокументОснование),
				Объект
			);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Недостаточно прав для проведения документа ""%1"" раньше, чем документ-основание ""%2""'"),
					Объект,
					Объект.ДокументОснование),
				Объект
			);

		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПроверитьИсторическийПорядокОпераций()

Процедура ПроверитьПроведениеЗаднимЧислом(Объект, Отказ, РежимЗаписи)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказНаряд") Тогда
		
		Если Объект.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ДатаПроверки = Объект.ДатаЗакрытия;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РабочийЛист")
		И Не Объект.Ссылка.Статус = Справочники.СтатусыРабочегоЛиста.Отказ
		И Не Объект.Ссылка.Статус = Справочники.СтатусыРабочегоЛиста.Сделка Тогда
			
			Возврат;
			
	Иначе
		
		ДатаПроверки = Объект.Дата;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И НачалоДня(ДатаПроверки) < НачалоДня(ТекущаяДатаСеанса())
		И НЕ  ПраваИНастройкиПользователя.Значение("ПроведениеЗаднимЧислом", Объект) Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ОписаниеОбъекта = Объект.Ссылка;
		Иначе
			ОписаниеОбъекта = Строка(ТипЗнч(Объект.Ссылка));
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Недостаточно прав для проведения документов задним числом: %1'"), ОписаниеОбъекта),
			Объект,
			"Дата",
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверка наличия в документе прослеживаемого и маркируемого товара одновремено.
// Если данный товар найден, то выставляем отказ
//
Процедура ПроверитьНоменклатуруНаПрослеживаемостьИМаркировку(Объект, Отказ)
	
	// Выполним проверку документа
	СписокДокументовПроверки = СписокДокументовПроверкиНоменклатурыНаПрослеживаемостьИМаркировку();
	
	Если СписокДокументовПроверки.Найти(ТипЗнч(Объект)) = Неопределено Тогда
		// Проверку не выполняем
		Возврат;
	КонецЕсли;
	
	// Получим описание объекта метаданных
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	
	// Последовательно обработаем каждую табличную часть объекта
	Для каждого ОбъектМетаданныхТаблицы Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		// Проверяем целесообразность перебора строк текущей таблицы
		Если НЕ ЕстьРеквизит(ОбъектМетаданных, "Номенклатура", ОбъектМетаданныхТаблицы.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокНоменклатурыДокумента = Объект[ОбъектМетаданныхТаблицы.Имя].ВыгрузитьКолонку("Номенклатура");
		СписокНоменклатурыПроверки = Новый Массив;
		
		// Оставим только номенклатуру
		Для Каждого ТекущаяНоменклатура Из СписокНоменклатурыДокумента Цикл
			Если ТипЗнч(ТекущаяНоменклатура) = Тип("СправочникСсылка.Номенклатура")
				И ЗначениеЗаполнено(ТекущаяНоменклатура)
				И СписокНоменклатурыПроверки.Найти(ТекущаяНоменклатура) = Неопределено Тогда
				СписокНоменклатурыПроверки.Добавить(ТекущаяНоменклатура);
			КонецЕсли;
		КонецЦикла;
		
		// Нет номенклатуры для проверки
		Если СписокНоменклатурыПроверки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим наличие соотвествующего товара
		ЕстьПрослеживаемыйТовар = Ложь;
		ЕстьМаркируемыйТовар = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Номенклатура.Ссылка КАК Ссылка,
		               |	Номенклатура.Прослеживаемый КАК Прослеживаемый,
		               |	ЕСТЬNULL(Номенклатура.ТипНоменклатуры.ВедетсяМаркировка, ЛОЖЬ) КАК ВедетсяМаркировка
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.Ссылка В(&СписокНоменклатуры)";
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатурыПроверки);
		
		ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			ЕстьПрослеживаемыйТовар = ЕстьПрослеживаемыйТовар ИЛИ ВыборкаНоменклатуры.Прослеживаемый;
			ЕстьМаркируемыйТовар = ЕстьМаркируемыйТовар ИЛИ ВыборкаНоменклатуры.ВедетсяМаркировка;
		КонецЦикла;
		
		// Нашли номенклатуру с обоими признаками
		Если ЕстьПрослеживаемыйТовар И ЕстьМаркируемыйТовар Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='В таблице ""%1"" имеется прослеживаемый и маркируемый товары.'"),
					ОбъектМетаданныхТаблицы.Имя),
				Объект,
				,,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СписокДокументовПроверкиНоменклатурыНаПрослеживаемостьИМаркировку()
	
	ВозвращаемоеЗначение = Новый Массив;
	ВозвращаемоеЗначение.Добавить(Тип("ДокументОбъект.РеализацияТоваров"));
	ВозвращаемоеЗначение.Добавить(Тип("ДокументОбъект.КорректировкаРеализации"));
	ВозвращаемоеЗначение.Добавить(Тип("ДокументОбъект.ВозвратПоставщику"));
	ВозвращаемоеЗначение.Добавить(Тип("ДокументОбъект.Чек"));
	ВозвращаемоеЗначение.Добавить(Тип("ДокументОбъект.ВозвратОтПокупателя"));
	ВозвращаемоеЗначение.Добавить(Тип("ДокументОбъект.ПоступлениеТоваров"));
	ВозвращаемоеЗначение.Добавить(Тип("ДокументОбъект.КорректировкаПоступления"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЭтоПрослеживаемыйТовар(Товар)
	
	Если НЕ ЕстьРеквизит(Товар, "Прослеживаемый") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Товар.Прослеживаемый;
	
КонецФункции

Процедура ЗаблокироватьПриНаличииПодчиненных(Объект, Отказ) Экспорт
	
	Попытка
		
		ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект).ЗаблокироватьПриНаличииПодчиненных(Объект, Отказ);

	Исключение
		
		ПроверитьРедактированиеДокументаПриНаличииПодчиненных(Объект, Отказ);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ТабличныеЧастиСНДС(МетаданныеОснование)
	
	Результат = Новый Массив();

	Для Каждого ТабличнаяЧасть Из МетаданныеОснование.ТабличныеЧасти Цикл
		
		Если ЕстьРеквизит(ТабличнаяЧасть, "СтавкаНДС") Или ЕстьРеквизит(ТабличнаяЧасть, "СуммаНДС") Тогда
			
			Результат.Добавить(ТабличнаяЧасть);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область АвтосозданиеСФ

Функция УжеЕстьСФ(ДокументОснование)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданный.Ссылка КАК Документ,
		|	СчетФактураВыданный.МоментВремени КАК МоментВремени,
		|	1 КАК Порядок
		|ПОМЕСТИТЬ втСчетФактуры
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
		|	И НЕ СчетФактураВыданный.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка,
		|	СчетФактураВыданный.МоментВремени,
		|	2
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
		|	И СчетФактураВыданный.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	втСчетФактуры.Документ КАК Документ
		|ИЗ
		|	втСчетФактуры КАК втСчетФактуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	втСчетФактуры.Порядок,
		|	втСчетФактуры.МоментВремени УБЫВ");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Документы.СчетФактураВыданный.ПустаяСсылка();
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Документ;
	
КонецФункции

Функция УжеЕстьСФПолученный(ДокументОснование)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученный.Ссылка КАК Документ,
		|	СчетФактураПолученный.МоментВремени КАК МоментВремени,
		|	1 КАК Порядок
		|ПОМЕСТИТЬ втСчетФактуры
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
		|	И НЕ СчетФактураПолученный.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка,
		|	СчетФактураПолученный.МоментВремени,
		|	2
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
		|	И СчетФактураПолученный.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	втСчетФактуры.Документ КАК Документ
		|ИЗ
		|	втСчетФактуры КАК втСчетФактуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	втСчетФактуры.Порядок,
		|	втСчетФактуры.МоментВремени УБЫВ");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Документы.СчетФактураПолученный.ПустаяСсылка();
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Документ;

КонецФункции

Процедура СоздатьОбновитьСФВыданный(ДокументОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ) Экспорт
	
	Если
		ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь)
		Или ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "НеСоздаватьОбновлятьСФ", Ложь)
		Или Отказ
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВариантСозданияОбновленияСФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДокументОбъект.ПодразделениеКомпании,
		"СозданиеОбновлениеСчетовФактурВыданных"
	);
	Если НЕ ЗначениеЗаполнено(ВариантСозданияОбновленияСФ) Тогда
		ВариантСозданияОбновленияСФ = Перечисления.ВариантыСозданияОбновленияСФ.НеСоздавать;
	КонецЕсли;
		
	Если ЕстьРеквизит(ДокументОбъект, "ЭтоУниверсальныйДокумент") И ДокументОбъект.ЭтоУниверсальныйДокумент Тогда
		ВариантСозданияОбновленияСФ = Перечисления.ВариантыСозданияОбновленияСФ.СоздаватьОбновлять;
	КонецЕсли;
	
	// Проверим возможность ввода СФ
	Если Не ВозможенВводСчетФактурыВыданной(ДокументОбъект) Тогда
		Если Не ПраваИНастройкиПользователя.Значение("СоздаватьСчетФактуруБезНДС", ДокументОбъект) Тогда
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураВыданный");
			ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ДокументОбъект, ПараметрыДействия, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ВариантСозданияОбновленияСФ = Перечисления.ВариантыСозданияОбновленияСФ.СоздаватьНеОбновлять Тогда
		
		Если УжеЕстьСФ(ДокументОбъект.Ссылка).Пустая() Тогда
			
			ДокументОбъект.Движения.Записать();
			СоздатьСФпоДокументу(ДокументОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли ВариантСозданияОбновленияСФ = Перечисления.ВариантыСозданияОбновленияСФ.СоздаватьОбновлять Тогда
		
		СФпоРеализации = УжеЕстьСФ(ДокументОбъект.Ссылка);
		
		ДокументОбъект.Движения.Записать();
		
		Если СфпоРеализации.Пустая() Тогда
			
			СоздатьСФпоДокументу(ДокументОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
			
		Иначе
			
			ОбновитьСФпоРеализации(СФпоРеализации, ДополнительныеСвойства, ПараметрыДействия, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСФпоДокументу(ДкОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ)
	
	ДкСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
	Попытка
		ДкСФ.Заполнить(ДкОбъект.Ссылка);
	Исключение
		Отказ = Истина;
		Возврат;
		ВызватьИсключение;
	КонецПопытки;
	ДкСФ.Дата = ДкОбъект.Дата + 1;
	
	Если ТипЗнч(ДкОбъект.Ссылка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		ДкСФ.Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДкОбъект.Ссылка, "ДатаЗакрытия");
	КонецЕсли;
	
	ДкСФ.Комментарий = "Создан автоматически";
	ДкСФ.КодСпособаВыставления = 1;
	
	Попытка
	
		ДкСФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	    ПараметрыДействия.Вставить("СчетФактура", ДкСФ.Ссылка);   
		ТекстСообщения = НСтр("ru = 'По документу %1 создан с/ф выданный.'"); 
		ВывестиСообщение(ТекстСообщения,,,,, ДкОбъект.ссылка);
		
	Исключение
		
		Отказ = Истина;	
		ВызватьИсключение;
	КонецПопытки;	

КонецПроцедуры

Процедура ОбновитьСФпоРеализации(СФпоРеализации, ДополнительныеСвойства, ПараметрыДействия, Отказ)
	
	ДкСФ = СФпоРеализации.ПолучитьОбъект();
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СФпоРеализации, "ДокументОснование"); 
	ДкСФ.Заполнить(ДокументОснование); 
	
	ДкСФ.ПометкаУдаления = Ложь;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДатаЗакрытия");
		
	Иначе
		
		ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
		
	КонецЕсли;
	
	Если ДатаДокумента > ДкСФ.Дата Тогда
		ДкСФ.Дата = ДатаДокумента + 1; 
	КонецЕсли;
	
	Попытка
	
		ДкСФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ПараметрыДействия.Вставить("СчетФактура", ДкСФ.Ссылка);
		
	Исключение
		
		Отказ = Истина;	
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОбновитьСФПолученный(ДокументОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь)
		Или ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "НеСоздаватьОбновлятьСФ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	УчПолитикаПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДокументОбъект.ПодразделениеКомпании,
		"СозданиеОбновлениеСчетовФактурПолученных"
	);
	Если НЕ ЗначениеЗаполнено(УчПолитикаПодразделения) Тогда 
		УчПолитикаПодразделения = Перечисления.ВариантыСозданияОбновленияСФ.НеСоздавать;
	КонецЕсли;
	
	Если ЕстьРеквизит(ДокументОбъект, "ЭтоУниверсальныйДокумент") И ДокументОбъект.ЭтоУниверсальныйДокумент Тогда
		УчПолитикаПодразделения = Перечисления.ВариантыСозданияОбновленияСФ.СоздаватьОбновлять;
	КонецЕсли;
	
	Если Не ВозможенВводСчетФактурыПолученной(ДокументОбъект) Тогда
		
		Если Не ПраваИНастройкиПользователя.Значение("СоздаватьСчетФактуруБезНДС", ДокументОбъект) Тогда
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураПолученный");
			ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ДокументОбъект, ПараметрыДействия, Отказ);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если УчПолитикаПодразделения = Перечисления.ВариантыСозданияОбновленияСФ.СоздаватьНеОбновлять Тогда
		
		Если Не УжеЕстьСФПолученный(ДокументОбъект.Ссылка).Пустая() Тогда
			Возврат;
		Иначе
			СоздатьСФПолученный(ДокументОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
		КонецЕсли;
		
	ИначеЕсли УчПолитикаПодразделения = Перечисления.ВариантыСозданияОбновленияСФ.СоздаватьОбновлять Тогда
		
		СФПолученный = УжеЕстьСФПолученный(ДокументОбъект.Ссылка);
		
		Если СФПолученный.Пустая() Тогда
			СоздатьСФПолученный(ДокументОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
		Иначе
			ОбновитьСФПолученный(СФПолученный, ДополнительныеСвойства, ПараметрыДействия, Отказ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ЗаполненыВходящиеРеквизиты(ДкОбъект)
	Если ЗначениеЗаполнено(ДкОбъект.ВхДокНомер)
		И ЗначениеЗаполнено(ДкОбъект.ВхДокДата) Тогда
		
		Возврат Истина;
		
	Иначе
		
	    Возврат Ложь;
		
	КонецЕсли;
КонецФункции // ЗаполненыВходящиеРеквизиты()

Процедура СоздатьСФПолученный(ДкОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ) 
	// Тут надо проверить, а можно ли создать с/ф автоматически, заполненны ли все данные во входящем документе.
	Если Не ЗаполненыВходящиеРеквизиты(ДкОбъект) Тогда   
		ТекстСообщения = НСтр("ru = 'В %1 не указаны данные входящего документа! Не могу создать с/ф полученный.'"); 
		ВывестиСообщение(ТекстСообщения, ДкОбъект, , , , ДкОбъект.Ссылка);
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	ДкСФ = Документы.СчетФактураПолученный.СоздатьДокумент();
	ДкСФ.Заполнить(ДкОбъект.Ссылка); 
	ДкСФ.Дата = ДкОбъект.Дата + 1;
	
	Попытка
	
		ДкСФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	    ПараметрыДействия.Вставить("СчетФактура", ДкСФ.Ссылка);   
		
	Исключение
		Отказ = Истина;
		ВызватьИсключение;
	КонецПопытки;	

КонецПроцедуры

Процедура ОбновитьСФПолученный(СФПолученный, ДополнительныеСвойства, ПараметрыДействия, Отказ)
	// Тут надо проверить, а можно ли обновить с/ф автоматически, заполненны ли все данные во входящем документе.
	Если Не ЗаполненыВходящиеРеквизиты(СФПолученный.ДокументОснование) Тогда   
		ТекстСообщения = НСтр("ru = 'В %1 не указаны данные входящего документа! Не могу создать с/ф полученный.'"); 
		ВывестиСообщение(ТекстСообщения, , , , , СФПолученный.ДокументОснование);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ДкСФ = СФПолученный.ПолучитьОбъект();
	ДкСФ.Заполнить(СФПолученный.ДокументОснование);
	ДКСФ.ПометкаУдаления = Ложь;
	ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СФПолученный.ДокументОснование, "Дата");
	Если ДатаДокумента > ДкСФ.Дата Тогда
		ДкСФ.Дата = ДатаДокумента + 1;
	КонецЕсли;
	
	Попытка
		
		ДкСФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ПараметрыДействия.Вставить("СчетФактура", ДкСФ.Ссылка);
		
	Исключение
		Отказ = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьПодчиненныеСФ(ДокументОбъект, ПараметрыДействия, Отказ) Экспорт
	
	ЭтоВосстановлениеПоследовательностей = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДокументОбъект.ДополнительныеСвойства,
		"ЭтоВосстановлениеПоследовательностей",
		Ложь
	);
	НеСоздаватьОбновлятьСФ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыДействия,
		"НеСоздаватьОбновлятьСФ",
		Ложь
	);
	Если ЭтоВосстановлениеПоследовательностей Или НеСоздаватьОбновлятьСФ Тогда
		Возврат;
	КонецЕсли;
	
	ТипСчетФактуры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыДействия, "ТипСчетФактуры", Неопределено);
	
	Если ТипСчетФактуры = "СчетФактураПолученный" Тогда
		
		УчПолитикаПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументОбъект.ПодразделениеКомпании,
			"СозданиеОбновлениеСчетовФактурПолученных"
		);
		Если НЕ ЗначениеЗаполнено(УчПолитикаПодразделения) Тогда 
			УчПолитикаПодразделения = Перечисления.ВариантыСозданияОбновленияСФ.НеСоздавать;
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетФактураПолученный.Ссылка КАК Документ,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СчетФактураПолученный.Ссылка) КАК ДокументПредставление
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
			|	И НЕ СчетФактураПолученный.ПометкаУдаления";
		
	ИначеЕсли ТипСчетФактуры = "СчетФактураВыданный" Тогда
		
		УчПолитикаПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументОбъект.ПодразделениеКомпании,
			"СозданиеОбновлениеСчетовФактурВыданных"
		);
		Если НЕ ЗначениеЗаполнено(УчПолитикаПодразделения) Тогда 
			УчПолитикаПодразделения = Перечисления.ВариантыСозданияОбновленияСФ.НеСоздавать;
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетФактураВыданный.Ссылка КАК Документ,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СчетФактураВыданный.Ссылка) КАК ДокументПредставление
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
			|	И НЕ СчетФактураВыданный.ПометкаУдаления";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если УчПолитикаПодразделения = Перечисления.ВариантыСозданияОбновленияСФ.СоздаватьОбновлять Тогда
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОбъект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СфОбъект = Выборка.Документ.ПолучитьОбъект();
			Попытка
				СфОбъект.УстановитьПометкуУдаления(Истина);
				ТекстСообщения = НСтр("ru = 'Помечен на удаление %1!'"); 
				ВывестиСообщение(ТекстСообщения, ДокументОбъект, , , , Выборка.Документ);
			Исключение
				ТекстСообщения = НСтр("ru = 'Не смог пометить на удаление %1!'");
				ВывестиСообщение(ТекстСообщения, ДокументОбъект, , , , Выборка.Документ);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПараметры = Неопределено)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	Возврат Менеджер.ВозможенВводСчетФактурыВыданной(ДокументОбъект);
	
КонецФункции

Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПараметры = Неопределено)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	Возврат Менеджер.ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПараметры);
	
КонецФункции

Функция ДокументСодержитСтрокиСНДС(ДокументОбъект, РеквизитыДляПроверки) Экспорт
	
	ТабличныеЧасти = СтрРазделить(РеквизитыДляПроверки, ", ", Ложь);
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
		Для Каждого ТекущаяСтрока Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			Если ТекущаяСтрока.СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Себестоимость

Функция СравнитьСебестоимостьИЦену(Объект, Отказ, РежимПроведения) Экспорт
    Если ПравоПользователя("КонтрольСебестоимостиЧека") = Перечисления.ВариантыКонтроляСебестоимостиЧека.НеКонтролировать Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ПартииТоваровКомпанииОстатки.СуммаОстаток / ПартииТоваровКомпанииОстатки.КоличествоОстаток) КАК ЦенаСНДС,
	|	МАКСИМУМ(ПартииТоваровКомпанииОстатки.СуммаБезНДСОстаток / ПартииТоваровКомпанииОстатки.КоличествоОстаток) КАК ЦенаБезНДС,
	|	ПартииТоваровКомпанииОстатки.Партия КАК Партия
	|ПОМЕСТИТЬ ОстаткиПартий
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
	|			&МоментВремени,
	|			СкладКомпании = &СкладКомпании
	|				И Номенклатура В (&Номенклатура)) КАК ПартииТоваровКомпанииОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровКомпанииОстатки.Номенклатура,
	|	ПартииТоваровКомпанииОстатки.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПартий.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ОстаткиПартий.ЦенаСНДС) КАК ЦенаСНДС,
	|	МАКСИМУМ(ОстаткиПартий.ЦенаБезНДС) КАК ЦенаБезНДС
	|ПОМЕСТИТЬ ИтоговыеОстаткиПартий
	|ИЗ
	|	ОстаткиПартий КАК ОстаткиПартий
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартий.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ СрезЦен
	|ИЗ
	|	РегистрСведений.Цены.СрезПоследних(
	|			&МоментВремени,
	|			ТипЦен = &ТипЦен
	|				И Номенклатура В (&Номенклатура)
	|				И ПодразделениеКомпании = &Подразделение) КАК ЦеныСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекТовары.Номенклатура КАК Номенклатура,
	|	ЧекТовары.Цена КАК Цена,
	|	ЧекТовары.СуммаНДС КАК СуммаНДС,
	|	ЧекТовары.Сумма КАК Сумма,
	|	ЧекТовары.СуммаВсего КАК СуммаВсего,
	|	ЕСТЬNULL(СрезЦен.Цена, 0) КАК ЦенаПоТипуЦен,
	|	ЕСТЬNULL(ИтоговыеОстаткиПартий.ЦенаБезНДС, 0) КАК ЦенаБезНДС,
	|	ЕСТЬNULL(ИтоговыеОстаткиПартий.ЦенаСНДС, 0) КАК ЦенаСНДС
	|ИЗ
	|	Документ.Чек.Товары КАК ЧекТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтоговыеОстаткиПартий КАК ИтоговыеОстаткиПартий
	|		ПО ЧекТовары.Номенклатура = ИтоговыеОстаткиПартий.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СрезЦен КАК СрезЦен
	|		ПО ЧекТовары.Номенклатура = СрезЦен.Номенклатура
	|ГДЕ
	|	ЧекТовары.Ссылка = &Ссылка";
	
	МассивНоменклатуры = Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	Запрос.УстановитьПараметр("МоментВремени", Объект.МоментВремени());
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании); 
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ТипЦен", Объект.ТипЦен);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	РезультатПроверки = Ложь;      
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		Объект.Организация, Объект.Дата);   
	ЦенаВключаетНДС = Объект.ТипЦен.ЦенаВключаетНДС;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЦенаБезНДС > Выборка.Цена Тогда
			ТекстСообщения = НСтр("ru='Продажа ниже себестоимости! Товар: %1, артикул: %2, '");
			Если СистемаНО = Перечисления.СистемыНалогообложения.Общая Тогда 
				Если ЦенаВключаетНДС Тогда
					ТекстСообщения = ТекстСообщения + НСтр("ru='себестоимость без НДС %3, цена в документе %4, цена по типу цен: %5.'");	
				Иначе	
				    ТекстСообщения = ТекстСообщения + НСтр("ru='себестоимость с НДС %3, цена в документе %4, цена по типу цен: %5.'");
				КонецЕсли;
				
			Иначе
				ТекстСообщения = ТекстСообщения + НСтр("ru='себестоимость: %3, цена в документе: %4, цена по типу цен: %5.'");				
			КонецЕсли;
		   	ВывестиСообщение(ТекстСообщения,,,,, Выборка.Номенклатура, Выборка.Номенклатура.Артикул, 
			    ?(ЦенаВключаетНДС, Выборка.ЦенаСНДС, Выборка.ЦенаБезНДС), Выборка.Цена, Выборка.ЦенаПоТипуЦен);
			Если ПравоПользователя("КонтрольСебестоимостиЧека") = Перечисления.ВариантыКонтроляСебестоимостиЧека.ЗапретПродажиНижеСебестоимости Тогда
				РезультатПроверки = Истина;
			КонецЕсли;		
		
		КонецЕсли;
	
	КонецЦикла;
	Возврат РезультатПроверки;
КонецФункции

#КонецОбласти

Процедура ПроверитьКорректностьДереваПодчиненности(Основание, Отказ, Объект, ТекущийОбъект, ПроверяемоеПоле)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		Если Основание = ТекущийОбъект Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Документ <%1> уже присутствует в структуре подчиненности: в документе <%2> он указан в реквизите ""%3"".'"),
					ТекущийОбъект,
					Объект,
					ПроверяемоеПоле
				),
				Объект
			);
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		ПроверитьКорректностьДереваПодчиненности(
			Основание.СводныйРемонтныйЗаказ,
			Отказ,
			Основание,
			ТекущийОбъект,
			НСтр("ru = 'Сводный рементный заказ'")
		);
		ПроверитьКорректностьДереваПодчиненности(
			Основание.ДокументОснование,
			Отказ,
			Основание,
			ТекущийОбъект,
			НСтр("ru = 'Основание'")
		);
	Иначе
		Если ЕстьРеквизит(Основание, "ДокументОснование") Тогда 
			ПроверитьКорректностьДереваПодчиненности(
			Основание.ДокументОснование,
			Отказ,
			Основание,
			ТекущийОбъект,
			НСтр("ru = 'Основание'")
		);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
