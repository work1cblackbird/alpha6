// Общий модуль "Заполнение документов (клиент)"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ ДОКУМЕНТА

// Общий обработчик события выбора одного из пунктов меню "Заполнить".
//
// Параметры:
//  Форма             - УправляемаяФорма     - Форма документа
//  ИмяКоманды        - Строка               - Имя выбранной команды заполнения
//  Объект            - ДанныеФормыСтруктуры - Заполняемый объект.
//  ПараметрыДействия - Структура            - содержит набор параметров, необходимых для выполнения действия.
//
Процедура ВыполнитьПодключаемуюКомандуЗаполнения(Форма, ИмяКоманды, Объект, ПараметрыДействия) Экспорт
	
	// Найдем в параметрах ту команду, которая была выбрана.
	КомандаЗаполнения = Неопределено;
	Для Каждого ТекПараметр Из Форма.ПараметрыЗаполненияОбъекта Цикл
		Если "КомандаЗаполнения" + ТекПараметр.Представление = ИмяКоманды Тогда
			КомандаЗаполнения = ТекПараметр.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Выходим, если ничего не нашли, потому что параметры команды в любом случае структура.
	Если КомандаЗаполнения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемаяТабличнаяЧастьПустая = Объект[КомандаЗаполнения.ИмяТабличнойЧасти].Количество() = 0;
	ИмяКомандыОчистки = "КомандаЗаполнения" + КомандаЗаполнения.ИмяТабличнойЧасти + "ОчиститьТабличнуюЧасть";
	ЭтоКомандаОчистки = (ИмяКоманды = ИмяКомандыОчистки);
	
	// Если мы выбрали очистку ТЧ и ТЧ пустая, то делать больше нечего
	Если ОбрабатываемаяТабличнаяЧастьПустая И ЭтоКомандаОчистки Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем коллекцию последовательных операций
	КоллекцияОпераций = Новый Структура();
	
	// Добавляем безусловный вопрос про очистку ТЧ
	Если НЕ ОбрабатываемаяТабличнаяЧастьПустая И КомандаЗаполнения.ОчиститьПередЗаполнением Тогда
		ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(КоллекцияОпераций, "ОчиститьТабличнуюЧасть",
			НСтр("ru='Очистить табличную часть """ + КомандаЗаполнения.ИмяТабличнойЧасти + """ "
			+ ?(ЭтоКомандаОчистки, "", НСтр("ru = 'перед заполнением'") + " ") + "?'"));
	КонецЕсли;
	
	// Добавляем безусловный вопрос про перезаполнение ТЧ.
	Если НЕ ОбрабатываемаяТабличнаяЧастьПустая
		И НЕ КомандаЗаполнения.ОчиститьПередЗаполнением
		И КомандаЗаполнения.ПодтверждениеПередЗаполнением Тогда
		
		ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(КоллекцияОпераций, "ПодтверждениеПередЗаполнением",
			НСтр("ru='Табличная часть'") + " """ + КомандаЗаполнения.ИмяТабличнойЧасти + """ " 
			+ НСтр("ru = 'будет изменена. Продолжить?'"), Истина);
	КонецЕсли;
	
	// Проверим наличие содержимого в параметрах команд.
	Если ЗначениеЗаполнено(КомандаЗаполнения.ПараметрыКоманды) Тогда
		КомандаЗаполнения.ПараметрыКоманды = Новый Структура();
	КонецЕсли;
	
	// Заполним структуру параметров команд из шаблона.
	КомандаЗаполнения.ПараметрыКоманды = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(
		КомандаЗаполнения.ШаблонПараметрыКоманды);
	
	// Добавим дополнительные вопросы команд заполнения.
	Для Каждого Параметр Из КомандаЗаполнения.ПараметрыКоманды Цикл
		
		// Помещаем параметр в коллекцию операций опроса.
		КоллекцияОпераций.Вставить(Параметр.Ключ, Параметр.Значение);
		
		// Нужное значение уже есть в объекте, ничего спрашивать не нужно.
		Если Объект.Свойство(Параметр.Ключ) Тогда
			Параметр.Значение.Результат = Объект[Параметр.Ключ];
		КонецЕсли;
		
		// Если значение уже определено, то нет смысла в продолжении.
		Если ЗначениеЗаполнено(Параметр.Значение.Результат) Тогда
			
			// Отметим текущую операцию как выполненную.
			Параметр.Значение.Пропустить = ИСТИНА;
			Продолжить;
			
		КонецЕсли;
		
		// Для операций получения ссылки, необходимо произвести дополнительные манипуляции.
		Если Параметр.Значение.Свойство("ВыборСсылки") Тогда
			
			// Установим владельца формы
			Если Параметр.Значение.Свойство("Владелец") И Параметр.Значение.Владелец=Неопределено Тогда
				Параметр.Значение.Владелец = Форма;
			КонецЕсли;
			
			// Переопределим значения отборов.
			Если Параметр.Значение.Параметры.Свойство("Отбор") Тогда
				Для Каждого ЗначениеОтбора Из Параметр.Значение.Параметры.Отбор Цикл
					Если ТипЗнч(ЗначениеОтбора.Значение)=Тип("Строка") И Объект.Свойство(ЗначениеОтбора.Значение) Тогда
						Параметр.Значение.Параметры.Отбор[ЗначениеОтбора.Ключ] = Объект[ЗначениеОтбора.Значение];
					КонецЕсли;
				КонецЦикла;
				// Установим для договора взаиморасчетов отбор по владельцу
				Если Параметр.Ключ = "ДоговорВзаиморасчетов" И ЕстьРеквизитНаКлиенте(Объект, "Контрагент") 
					И ЗначениеЗаполнено(Объект.Контрагент) Тогда
					
					Параметр.Значение.Параметры.Отбор.Вставить("Владелец", Объект.Контрагент);
				КонецЕсли;
			КонецЕсли;
			
			// Переопределим значения параметров
			Для Каждого ЗначениеПараметра Из Параметр.Значение.Параметры Цикл
				Если НЕ ЗначениеПараметра.Ключ = "ТабличнаяЧастьИсточника"
					И ТипЗнч(ЗначениеПараметра.Значение) = Тип("Строка")
					И Объект.Свойство(ЗначениеПараметра.Значение) Тогда
					Параметр.Значение.Параметры[ЗначениеПараметра.Ключ] = Объект[ЗначениеПараметра.Значение];
				КонецЕсли;
				Если ЗначениеПараметра.Ключ = "СсылкаИсточника"
					И НЕ ЗначениеЗаполнено(ЗначениеПараметра.Значение)
					И ЗначениеЗаполнено(Объект.Ссылка) Тогда
					Параметр.Значение.Параметры[ЗначениеПараметра.Ключ] = Объект.Ссылка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формируем комплект параметров, который будет передаваться между формами
	ПараметрыОпросов = Новый Структура();
	ПараметрыОпросов.Вставить("КоллекцияОпераций", КоллекцияОпераций);
	ПараметрыОпросов.Вставить("ПараметрыДействия", ПараметрыДействия);
	ПараметрыОпросов.Вставить("КомандаЗаполнения", КомандаЗаполнения);
	ПараметрыОпросов.Вставить("Форма",             Форма);
	ПараметрыОпросов.Вставить("ОбработчикСобытия",
		Новый ОписаниеОповещения("ОбработчикСобытияОкончанияОпроса", ЗаполнениеДокументовКлиент, ИмяКоманды));
	
	// Вызываем служебную процедуру для организации последовательного опроса пользователя.
	ПоследовательныеОперацииКлиент.ВыполнитьПоследовательно(ПараметрыОпросов);
	
КонецПроцедуры // ВыполнитьПодключаемуюКомандуЗаполнения()

// Обработчик ответов пользователя на все вопросы
//
// Параметры:
//  ПараметрыОпросов - Структура - Параметры результата опроса.
//  ИмяКоманды       - Строка    - Имя команды заполнения.
//
Процедура ОбработчикСобытияОкончанияОпроса(ПараметрыОпросов, ИмяКоманды) Экспорт
	
	// Формируем структуру итоговых параметров результата опроса
	РезультатОповещения = Новый Структура();
	РезультатОповещения.Вставить("ПараметрыЗаполнения",   ПараметрыОпросов.КоллекцияОпераций);
	РезультатОповещения.Вставить("ПараметрыДействия",     ПараметрыОпросов.ПараметрыДействия);
	РезультатОповещения.Вставить("ИмяОбработчикаКоманды", ПараметрыОпросов.КомандаЗаполнения.ИмяОбработчикаКоманды);
	
	// Поместим дополнительные параметры команды в итоговую структуру заполнения
	РезультатОповещения.ПараметрыЗаполнения.Вставить("ИмяКоманды",        ПараметрыОпросов.КомандаЗаполнения.ИмяКоманды);
	РезультатОповещения.ПараметрыЗаполнения.Вставить("ИмяТабличнойЧасти", ПараметрыОпросов.КомандаЗаполнения.ИмяТабличнойЧасти);
	
	// Вызываем обработчик из формы объекта
	ПараметрыОпросов.Форма.Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ИмяКоманды);
	
КонецПроцедуры // ОбработчикСобытияОкончанияОпроса()

// Обработчик выбора типа документа для заполнения
//
// Параметры:
//  ВыбранныйТип - ОбъектМетаданных - выбранный тип документа.
//  ПараметрыВопросов - Структура - параметры выполнения операции.
//
Процедура ЗаполнитьПоДокументуВыборТипа(ВыбранныйТип, ПараметрыВопросов) Экспорт
	
	Если ВыбранныйТип=Неопределено Тогда
		ПараметрыВопросов.КоллекцияОпераций["ЗаполнитьПоДокументуВыборСсылки"].Владелец = Неопределено;
		Возврат;
	КонецЕсли;
	
	ВыбранныйТип = ВыбранныйТип.Значение;
	
	ПараметрыВопросов
	.КоллекцияОпераций["ЗаполнитьПоДокументуВыборСсылки"]
	.ВыборСсылки = "Документ." + ВыбранныйТип + ".ФормаСписка";
	
КонецПроцедуры

// Обработчик команды загрузки из ТСД.
//
// Параметры:
//  Параметры - Структура - параметры выполнения команды
//  ОбработчикРезультата - ОбработкаОповещения - оповещение при завершении команды.
//
Процедура ЗагрузитьИзТСД(Параметры, ОбработчикРезультата) Экспорт
	
	ПараметрыОперации = ОборудованиеТерминалыСбораДанныхКлиентСервер.ПараметрыВыгрузкиВТСД();
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
		ОбработчикРезультата,
		"",
		Неопределено,
		ПараметрыОперации
	);
	
КонецПроцедуры

// Обработчик команды выгрузки в ТСД.
//
// Параметры:
//  Параметры - Структура - параметры выполнения команды
//  ОбработчикРезультата - ОбработкаОповещения - оповещение при завершении команды.
//
Процедура ВыгрузитьВТСД(Параметры, ОбработчикРезультата) Экспорт
	
	Товары = Новый Массив;
	
	Для каждого СтрокаТабличнойЧасти Из ОбработчикРезультата.ДополнительныеПараметры.Форма.Объект[Параметры] Цикл
		НоваяСтрока = ОборудованиеТерминалыСбораДанныхКлиентСервер.ПараметрыСтрокиВыгрузкиВТСД();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		Товары.Добавить(НоваяСтрока);
	КонецЦикла;
	
	ШтрихкодированиеВызовСервера.ЗаполнитьШтрихКодыТоваров(Товары);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьВТСДЗавершение", ЭтотОбъект);
	ПараметрыОперации = ОборудованиеТерминалыСбораДанныхКлиентСервер.ПараметрыВыгрузкиВТСД();
	ПараметрыОперации.Вставить("ТаблицаТоваров", Товары);
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьВыгрузкуДанныеВТСД(
		ОписаниеОповещения,
		Неопределено,
		Неопределено,
		ПараметрыОперации
	);
	
КонецПроцедуры // ВыгрузитьВТСД()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузитьВТСДЗавершение(Успешно, Параметры) Экспорт
	
	Если ТипЗнч(Успешно)=Тип("Структура") И Успешно.Свойство("Результат") И Успешно.Результат Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выгрузка успешно завершена'"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'В процессе выгрузки произошла ошибка'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти