////////////////////////////////////////////////////////////////////////////////
// Работа с платежным шлюзом 1С СБП
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получить токен доступа к http-сервису и поместить его в ПараметрыВзаимодействия и,
// если токен новый (банк Открытие), - в безопасное хранилище
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//  ТолькоНовый             - Булево - запросить новый токен, не смотря на срок годности действующего
//                            (актуален только для банка Открытие)
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если токен получен, ЛОЖЬ - в противном случае
//
Функция ПолучитьТокенАвторизации(ПараметрыВзаимодействия, РезультатВыполнения, ТолькоНовый = Ложь) Экспорт
	
	Если ПараметрыВзаимодействия.Свойство("ИдентификаторБанкаУчастникаСБП")
		И ЗначениеЗаполнено(ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП) Тогда
		
		Индекс = Перечисления.ТипыАутентификацииСБП.Индекс(ПараметрыВзаимодействия.ТипАутентификации);
		ТипАутентификации = Метаданные.Перечисления.ТипыАутентификацииСБП.ЗначенияПеречисления[Индекс].Имя;
		ИмяМетода = "ПлатежныйШлюзСБП_1С.ПолучитьТокен" + ТипАутентификации;
		
		Параметры = Новый Массив;
		Параметры.Добавить(ПараметрыВзаимодействия);
		Параметры.Добавить(РезультатВыполнения);
		Если ПараметрыВзаимодействия.ТипАутентификации
			= Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT Тогда
			Параметры.Добавить(ТолькоНовый);
		КонецЕсли;
		
		Возврат ОбщегоНазначения.ВызватьФункциюКонфигурации(ИмяМетода, Параметры);
		
	Иначе
		
		РезультатВыполнения.Успешно = Ложь;
		ШаблонСообщения = НСтр("ru='У интерфейса %1 не выбран Банк-участник СБП'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПараметрыВзаимодействия.Интерфейс);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
		
КонецФункции // ПолучитьТокенАвторизации()

// Зарегистрировать счет в платежном шлюзе
//
// Параметры:
//  ДанныеСчета             - Структура - см. ОнлайнОплата.ПолучитьДанныеСчетаДляРегистрации
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//  Холдирование         	- Булево - признак ходирования денежных средств (Истина - холдирование, Ложь - оплата)
// 
Процедура ЗарегистрироватьСчет(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения, Холдирование) Экспорт

	Если Холдирование Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Холдирование средств данным сервисом не предусмотрено'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьЗаголовки(ПараметрыВзаимодействия);
	
	ИдентификаторЗапроса = Новый УникальныйИдентификатор;
	ДанныеСчета.Вставить("ИдентификаторЗапроса", Строка(ИдентификаторЗапроса));
	
	ДанныеДляПодписи = Новый Массив;
	Если ПараметрыВзаимодействия.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		ИЛИ ПараметрыВзаимодействия.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		
		ДанныеДляПодписи.Добавить(ПараметрыВзаимодействия.ИдентификаторМерчанта);
		ДанныеДляПодписи.Добавить(ДанныеСчета.СуммаДокумента);
		ДанныеДляПодписи.Добавить("RUB");
		ДанныеДляПодписи.Добавить(ДанныеСчета.ИдентификаторЗапроса);
		ДанныеДляПодписи.Добавить(ДанныеСчета.НазначениеПлатежа);
		
	КонецЕсли;
	ПараметрыВзаимодействия.Вставить("ДанныеДляПодписи", ДанныеДляПодписи);
	
	Если НЕ ПолучитьТокенАвторизации(ПараметрыВзаимодействия, РезультатВыполнения) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	СформироватьЗапросНаРегистрациюСчета(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос. Ошибки записаны при получении ответа
	Если ОтветСервера = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Сохранить ответ сервера в журнал регистрации событий
	ОнлайнОплата.СохранитьОтветСервераВЖурнал(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	// Дополнительный контроль на случай, когда код ошибки не распознан
	Если НЕ СчетЗарегистрирован(ОтветСервера, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Заполнить ДатаУведомления, чтобы запрашивать изменение статуса оплаты регламентным заданием
	ТекДата = ТекущаяДатаСеанса();
	ДанныеСчета.Вставить("ДатаУведомления", ТекДата);
	// Запись результатов регистрации счета в регистр Платежный шлюз
	ОнлайнОплата.ЗаписатьРегистрациюСчета(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);

КонецПроцедуры // ЗарегистрироватьСчет()

// Получить данные платежного шлюза по состоянию оплаты счета
//
// Параметры:
//  ДанныеСчета             - Структура - см. ОнлайнОплата.ПолучитьДанныеЗарегистрированногоСчета
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Структура - Структура для записи изменений в регистр ПлатежныйШлюз
//
Функция ПолучитьДанныеСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	ПустыеДанныеДляЗаписи = Новый Структура;
	
	СформироватьЗаголовки(ПараметрыВзаимодействия);
	
	Если НЕ ЗначениеЗаполнено(ДанныеСчета.СтатусУведомления) Тогда
		
		Если НЕ ТребуетсяПроверкаСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Тогда
			
			Возврат ПустыеДанныеДляЗаписи;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПараметрыВзаимодействия.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		ИЛИ ПараметрыВзаимодействия.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		
		ДанныеДляПодписи.Добавить(ДанныеСчета.ИдентификаторОперацииОплаты);
		
	КонецЕсли;
	ПараметрыВзаимодействия.Вставить("ДанныеДляПодписи", ДанныеДляПодписи);
	
	Если НЕ ПолучитьТокенАвторизации(ПараметрыВзаимодействия, РезультатВыполнения) Тогда
	
		Возврат ПустыеДанныеДляЗаписи;
	
	КонецЕсли;
	
	СформироватьЗапросНаПолучениеСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос
	Если ОтветСервера = Неопределено Тогда
		
		Возврат ПустыеДанныеДляЗаписи;
		
	КонецЕсли;
	
	// Сохранить ответ сервера в журнал регистрации событий
	ОнлайнОплата.СохранитьОтветСервераВЖурнал(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	ДанныеДляЗаписи = ПолучитьДанныеДляЗаписиСтатусаОплаты(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции // ПолучитьДанныеСтатусаОплаты()

// Зарегистрировать заявку на расход д/с в платежном шлюзе банка
//
// Параметры:
//  ДанныеСчета             - Структура - см. ОнлайнОплата.ПолучитьДанныеЗарегистрированногоСчета
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если заявка зарегистрирована, ЛОЖЬ - в противном случае
//
Функция ЗарегистрироватьВозврат(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	ВсеОК = Ложь;
	
	СформироватьЗаголовки(ПараметрыВзаимодействия);
	
	ИдентификаторЗапроса = Новый УникальныйИдентификатор;
	ДанныеСчета.Вставить("ИдентификаторЗапроса", Строка(ИдентификаторЗапроса));
	
	ДанныеДляПодписи = Новый Массив;
	Если ПараметрыВзаимодействия.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		ИЛИ ПараметрыВзаимодействия.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		
		ДанныеДляПодписи.Добавить(ДанныеСчета.ИдентификаторОперацииОплаты);
		ДанныеДляПодписи.Добавить(ДанныеСчета.ИдентификаторОперации);
		АктивнаяСтрокаВозврат = ДанныеСчета.АктивнаяСтрокаВозврат;
		ДанныеДляПодписи.Добавить(АктивнаяСтрокаВозврат.СуммаЗаявкиНаРасход);
		ДанныеДляПодписи.Добавить("RUB");
		ДанныеДляПодписи.Вставить(ДанныеСчета.ИдентификаторЗапроса);
		
	КонецЕсли;
	ПараметрыВзаимодействия.Вставить("ДанныеДляПодписи", ДанныеДляПодписи);
	
	Если НЕ ПолучитьТокенАвторизации(ПараметрыВзаимодействия, РезультатВыполнения) Тогда
	
		Возврат ВсеОК;
	
	КонецЕсли;
	
	СформироватьЗапросНаВозвратОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос
	Если ОтветСервера = Неопределено Тогда
		
		Возврат ВсеОК;
		
	КонецЕсли;
	
	// Сохранить ответ сервера в журнал регистрации событий
	ОнлайнОплата.СохранитьОтветСервераВЖурнал(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	Если НЕ ВозвратЗарегистрирован(ОтветСервера, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Тогда
	
		Возврат ВсеОК;
	
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции // ЗарегистрироватьВозврат()

// Получить данные платежного шлюза по состоянию возврата д/с
//
// Параметры:
//  ДанныеСчета             - Структура - см. ОнлайнОплата.ПолучитьДанныеЗарегистрированногоСчета
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Структура - Структура для записи изменений в регистр ПлатежныйШлюз
//
Функция ПолучитьДанныеСтатусаВозврата(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	ПустыеДанныеДляЗаписи = Новый Структура;
	
	СформироватьЗаголовки(ПараметрыВзаимодействия);
	
	ДанныеДляПодписи = Новый Массив;
	Если ПараметрыВзаимодействия.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		ИЛИ ПараметрыВзаимодействия.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		
		ДанныеДляПодписи.Добавить(ДанныеСчета.ИдентификаторОперации);
		
	КонецЕсли;
	ПараметрыВзаимодействия.Вставить("ДанныеДляПодписи", ДанныеДляПодписи);
	
	Если НЕ ПолучитьТокенАвторизации(ПараметрыВзаимодействия, РезультатВыполнения) Тогда
		
		Возврат ПустыеДанныеДляЗаписи;
		
	КонецЕсли;
	
	СформироватьЗапросНаПолучениеСтатусаВозврата(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос
	Если ОтветСервера = Неопределено Тогда
		
		Возврат ПустыеДанныеДляЗаписи;
		
	КонецЕсли;
	
	// Сохранить ответ сервера в журнал регистрации событий
	ОнлайнОплата.СохранитьОтветСервераВЖурнал(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	ДанныеДляЗаписи = ПолучитьДанныеДляЗаписиСтатусаВозврата(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции // ПолучитьДанныеСтатусаВозврата()

// Построить отчет по операциям
//
// Параметры:
//  ТаблицаОтчета           - ТаблицаЗначений - см. ОнлайнОплата.ПолучитьТаблицуОтчетаПоОперациям
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//                             Кроме этих полей должны быть:
//                            * ДатаНачала    - Дата - начало периода отчета
//                            * ДатаОкончания - Дата - конец периода отчета
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
Процедура ПостроитьОтчетПоОперациям(ТаблицаОтчета, ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	СформироватьЗаголовки(ПараметрыВзаимодействия);
	
	ДанныеДляПодписи = Новый Массив;
	Если ПараметрыВзаимодействия.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		ИЛИ ПараметрыВзаимодействия.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		
		ДанныеДляПодписи.Добавить(ПараметрыВзаимодействия.ИдентификаторМерчанта);
		
	КонецЕсли;
	ПараметрыВзаимодействия.Вставить("ДанныеДляПодписи", ДанныеДляПодписи);
	
	Если НЕ ПолучитьТокенАвторизации(ПараметрыВзаимодействия, РезультатВыполнения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьЗапросНаОтчетПоОперациям(ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	РазобратьСтатусОтчетаПоОперациям(ОтветСервера, ПараметрыВзаимодействия, РезультатВыполнения);
	
	Если НЕ РезультатВыполнения.Успешно Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Если ПараметрыВзаимодействия.СтатусОтчета = ИдентификаторСтатусаОжидание() Тогда
		
		ПолучитьСтатусОтчетаПоОперациям(ПараметрыВзаимодействия, РезультатВыполнения);
		
	КонецЕсли;
	
	Если ПараметрыВзаимодействия.СтатусОтчета = ИдентификаторСтатусаВыполнена() Тогда
		
		ЗагрузитьФайлОтчетаПоОперациям(ПараметрыВзаимодействия, РезультатВыполнения);
		
	КонецЕсли;
	
	Если НЕ РезультатВыполнения.Успешно Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПрочитатьФайлОтчетаПоОперациям(ТаблицаОтчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ТаблицаОтчета.Сортировать("ДатаОперации");
	
КонецПроцедуры // ПостроитьОтчетПоОперациям()

// Обновить настройки участников СБП
//
Процедура ОбновитьНастройкиУчастников(РезультатВыполнения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РезультатВыполнения = Неопределено Тогда
		
		РезультатВыполнения = ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения();
		
	КонецЕсли;
	
	ИспользоватьОнлайнОплаты = Константы.ИспользоватьОнлайнОплаты.Получить();
	
	Если НЕ ИспользоватьОнлайнОплаты Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	
	Если ДанныеАутентификации = Неопределено Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru = 'Подключение к Интернет-поддержке не выполнено'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	РезультатВыполнения.Вставить("Настройки", Неопределено);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	
	URLОперации = "https://payment-gateway.1c.ru/api/program1c/sbp/v1/members/infos";
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLОперации, ,	, ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
	
		СтрокаШаблон = НСтр("ru = 'Не удалось получить информацию об идентификаторах участников СБП.
		|
		|Техническая информация об ошибке:
		|При получении информации об идентификаторах платежных систем СБП возникли ошибки.
		|URL: %1
		|Код ошибки: %2
		|Подробная информация:
		|%3'");
		ТекстКомментария = СтрШаблон(СтрокаШаблон, URLОперации, РезультатОтправки.КодОшибки, РезультатОтправки.ИнформацияОбОшибке);
	    ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстКомментария);
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось получить список участников СБП. Подробности - в Журнале регистрации событий'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(РезультатОтправки.Содержимое);
	
	РезультатВыполнения.Настройки = ПрочитатьJSON(ЧтениеОтвета);
	
	ЗаписатьНастройкиУчастниковСБП(РезультатВыполнения);
	
КонецПроцедуры // ОбновитьНастройкиУчастников()

// Получить идентификаторы и наименования банков - участников СБП, интегрированных в 1С-СБП
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ИдентификаторБанка - идентификатор банка
//     * НаименованиеБанка  - наименование банка
//
Функция ПолучитьИнтегрированныхУчастниковСБП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиУчастниковСБП.Идентификатор КАК ИдентификаторБанка,
	|	НастройкиУчастниковСБП.Наименование КАК НаименованиеБанка
	|ИЗ
	|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
	|ГДЕ
	|	НастройкиУчастниковСБП.ТипАутентификации <> ЗНАЧЕНИЕ(Перечисление.ТипыАутентификацииСБП.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеБанка";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьИнтегрированныхУчастниковСБП()

// Получить тип аутентификации банка
//
// Параметры:
//  ИдентификаторБанка - Строка - идентификатор банка
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыАутентификацииСБП - тип аутентификации
//
Функция ПолучитьТипАутентификацииБанка(ИдентификаторБанка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиУчастниковСБП.ТипАутентификации КАК ТипАутентификации
	|ИЗ
	|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
	|ГДЕ
	|	НастройкиУчастниковСБП.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторБанка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.ТипАутентификации;
	
	Иначе
	
		Возврат Перечисления.ТипыАутентификацииСБП.ПустаяСсылка();
	
	КонецЕсли;
	
КонецФункции // ПолучитьТипАутентификацииБанка()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПолучениеТокеновАвторизации

// Получить токен доступа для аутентификации типа RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT, поместить его
// в ПараметрыВзаимодействия и, если токен новый, - в безопасное хранилище
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//  ТолькоНовый             - Булево - запросить новый токен, не смотря на срок годности действующего
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если токен получен, ЛОЖЬ - в противном случае
//
Функция ПолучитьТокенRESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT(
		ПараметрыВзаимодействия, РезультатВыполнения, ТолькоНовый) Экспорт
	
	ДанныеТокена = Новый Структура;
	ДанныеТокена.Вставить("ТокенАвторизации", "");
	ДанныеТокена.Вставить("СрокГодностиТокенаАвторизации", Дата(1, 1, 1));
	
	Если НЕ ТолькоНовый Тогда
		
		Ключи = "ТокенАвторизации,СрокГодностиТокенаАвторизации";
		
		ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыВзаимодействия.Интерфейс, Ключи);
		
		Если ТипЗнч(ДанныеХранилища) = Тип("Структура")
			И ЗначениеЗаполнено(ДанныеХранилища.СрокГодностиТокенаАвторизации) Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеТокена, ДанныеХранилища);
			
		КонецЕсли;
		
		ПятьМинут = 300;
		КонтрольнаяДата = ТекущаяДатаСеанса() + ПятьМинут;
		Если ДанныеТокена.СрокГодностиТокенаАвторизации > КонтрольнаяДата Тогда
			
			ПараметрыВзаимодействия.Вставить("ТокенАвторизации", ДанныеТокена.ТокенАвторизации);
			
			Возврат Истина;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	СформироватьЗаголовки(ПараметрыВзаимодействия);
	
	СформироватьЗапросНаПолучениеТокенаАвторизации(ПараметрыВзаимодействия, РезультатВыполнения);
	
	Если НЕ РезультатВыполнения.Успешно Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	ТокенПолучен = Ложь;
	
	// Сервер не обработал запрос. Ошибки записаны при получении ответа
	Если ОтветСервера = Неопределено Тогда
		
		Возврат ТокенПолучен;
		
	КонецЕсли;
	
	ПодробностиОтвета = ОтветСервера.Получить("sbpMemberResponse");
	
	Если ПодробностиОтвета = Неопределено Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Ошибка при получении токена доступа'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ТекстСообщенияДляЖР = ТекстСообщения + НСтр("ru=': ответ сервера не имеет секции sbpMemberResponse'");
		ТекстОтветаСервера = ОнлайнОплата.ПолучитьТекстОтветаСервера(ОтветСервера);
		Комментарий = ТекстСообщенияДляЖР + Символы.ПС + ТекстОтветаСервера;
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		
	Иначе
		
		ТипТокена = ПодробностиОтвета.Получить("token_type");
		Токен = ПодробностиОтвета.Получить("access_token");
		ВремяЖизниТокена = ПодробностиОтвета.Получить("expires_in");
		
		Если ТипТокена = Неопределено ИЛИ Токен = Неопределено ИЛИ ВремяЖизниТокена = Неопределено Тогда
			
			РезультатВыполнения.Успешно = Ложь;
			ТекстСообщения = НСтр("ru='Ошибка при получении токена доступа'");
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
			ТекстСообщенияДляЖР = ТекстСообщения
			+ НСтр("ru=': ответ сервера не имеет параметров токена token_type, access_token и expires_in'");
			ТекстОтветаСервера = ОнлайнОплата.ПолучитьТекстОтветаСервера(ОтветСервера);
			Комментарий = ТекстСообщенияДляЖР + Символы.ПС + ТекстОтветаСервера;
			ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
			
		Иначе	
			
			ТокенАвторизации = ТипТокена + " " + Токен;
			ПараметрыВзаимодействия.Вставить("ТокенАвторизации", ТокенАвторизации);
			
			ДанныеТокена.Вставить("ТокенАвторизации", ТокенАвторизации);
			СрокГодностиТокенаДоступа = ТекущаяДатаСеанса() + ВремяЖизниТокена;
			ДанныеТокена.Вставить("СрокГодностиТокенаДоступа", СрокГодностиТокенаДоступа);
			
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПараметрыВзаимодействия.Интерфейс
			, ТокенАвторизации, "ТокенАвторизации");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПараметрыВзаимодействия.Интерфейс
			, СрокГодностиТокенаДоступа, "СрокГодностиТокенаДоступа");
			
			ТокенПолучен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТокенПолучен;
	
КонецФункции

// Получить токен доступа для аутентификации типа BEARER и поместить его в ПараметрыВзаимодействия
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если токен получен, ЛОЖЬ - в противном случае
//
Функция ПолучитьТокенBEARER(ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	Ключ = "Токен";
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыВзаимодействия.Интерфейс, Ключ);
	
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ШаблонСообщения = НСтр("ru='У интерфейса %1 не задан Токен'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПараметрыВзаимодействия.Интерфейс);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТокенАвторизации = "Bearer " + Токен;
	ПараметрыВзаимодействия.Вставить("ТокенАвторизации", ТокенАвторизации);
	
	Возврат Истина;
	
КонецФункции

// Получить токен доступа для аутентификации типа BASIC и поместить его в ПараметрыВзаимодействия
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если токен получен, ЛОЖЬ - в противном случае
//
Функция ПолучитьТокенBASIC(ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	Ключ = "Пароль";
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыВзаимодействия.Интерфейс, Ключ);
	
	Если НЕ ЗначениеЗаполнено(Пароль) Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ШаблонСообщения = НСтр("ru='У интерфейса %1 не задан Пароль'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПараметрыВзаимодействия.Интерфейс);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокаЛогинПароль = ПараметрыВзаимодействия.Логин + ":" + Пароль;
	ДвДанные = ПолучитьДвоичныеДанныеИзСтроки(СтрокаЛогинПароль);
	Токен = ПолучитьBase64СтрокуИзДвоичныхДанных(ДвДанные);
	ТокенАвторизации = "Basic " + Токен;
	ПараметрыВзаимодействия.Вставить("ТокенАвторизации", ТокенАвторизации);
	
	Возврат Истина;
	
КонецФункции

// Получить токен доступа для аутентификации типа HMAC_SHA1 и поместить его в ПараметрыВзаимодействия
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//                            Кроме этого, структура должна содержать поле ДанныеДляПодписи - массив
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если токен получен, ЛОЖЬ - в противном случае
//
Функция ПолучитьТокенHMAC_SHA1(ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	Возврат ПолучитьТокенHMAC(ПараметрыВзаимодействия, РезультатВыполнения, ХешФункция.SHA1);
	
КонецФункции

// Получить токен доступа для аутентификации типа HMAC_SHA256 и поместить его в ПараметрыВзаимодействия
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//                            Кроме этого, структура должна содержать поле ДанныеДляПодписи - массив
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если токен получен, ЛОЖЬ - в противном случае
//
Функция ПолучитьТокенHMAC_SHA256(ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	Возврат ПолучитьТокенHMAC(ПараметрыВзаимодействия, РезультатВыполнения, ХешФункция.SHA256);
	
КонецФункции

#КонецОбласти

#Область Идентификаторы_статусов_операций

// Формирует идентификатор статуса в процессе.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаВПроцессе() Экспорт
	
	Возврат "IN_PROGRESS";
	
КонецФункции // ИдентификаторСтатусаВПроцессе()

// Формирует идентификатор статуса выполненной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаВыполнена() Экспорт
	
	Возврат "SUCCESS";
	
КонецФункции

// Формирует идентификатор статуса отклоненной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОтклонена() Экспорт
	
	Возврат "DECLINED";
	
КонецФункции

// Формирует идентификатор статуса отмененной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОтменена() Экспорт
	
	Возврат "REJECTED";
	
КонецФункции

// Формирует идентификатор статуса превышения суммы.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаПревышение() Экспорт
	
	Возврат "EXCEEDED";
	
КонецФункции

// Формирует идентификатор статуса нет информации.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаНетИнформации() Экспорт
	
	Возврат "NO_INFO";
	
КонецФункции

// Формирует идентификатор статуса не оплачен.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаНеОплачен() Экспорт
	
	Возврат "NOT_PAID";
	
КонецФункции

// Формирует идентификатор статуса требуется подтверждение.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаТребуетсяПодтверждение() Экспорт
	
	Возврат "CONFIRMATION_REQUIRED";
	
КонецФункции

// Формирует идентификатор статуса ошибка.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОшибка() Экспорт
	
	Возврат "ERROR";
	
КонецФункции

// Формирует идентификатор статуса ожидание.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОжидание() Экспорт
	
	Возврат "PENDING";
	
КонецФункции

// Формирует идентификатор статуса превышен период.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаПревышенПериод() Экспорт
	
	Возврат "REPORT_PERIOD_EXCEED";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сформировать заголовки для HTTP-запроса и поместить их в ПараметрыВзаимодействия
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//
Процедура СформироватьЗаголовки(ПараметрыВзаимодействия)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	ПараметрыВзаимодействия.Вставить("Заголовки", Заголовки);
	
КонецПроцедуры

#Область Аутентификация

// Получить и поместить в параметры взаимодейчтвия логин и пароль или тикет аутентификации Интернет-поддержки
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
Процедура ПолучитьДанныеАутентификацииИПП(ПараметрыВзаимодействия, РезультатВыполнения)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульИПП = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		
		Результат = МодульИПП.ТикетАутентификацииНаПорталеПоддержки(ПараметрыВзаимодействия.ПолныйАдресРесурса);
		
		Если ПустаяСтрока(Результат.КодОшибки) Тогда
			
			ПараметрыВзаимодействия.Вставить("ТокенИПП", Результат.Тикет);
			
		Иначе
			
			РезультатВыполнения.Успешно = Ложь;
			ТекстСообщения = НСтр("ru = 'Ошибка аутентификации в сервисе ИПП. Подробнее см. в журнале регистрации.'");
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
			ШаблонКомментария = НСтр("ru = 'Не удалось вызвать операцию %1.
			|Не удалось выполнить аутентификацию ИПП.
			|%2'");
			Комментарий = СтрШаблон(ШаблонКомментария, ПараметрыВзаимодействия.ПолныйАдресРесурса
			, Результат.ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
			
		КонецЕсли;
		
	Иначе
		
		Результат = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		
		Если Результат = Неопределено Тогда
			
			РезультатВыполнения.Успешно = Ложь;
			ТекстСообщения = НСтр("ru = 'Необходимо подключить Интернет-поддержку пользователей.'");
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
			
		Иначе
			
			ПараметрыВзаимодействия.Вставить("ЛогинИПП", Результат.Логин);
			ПараметрыВзаимодействия.Вставить("ПарольИПП", Результат.Пароль);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Поместить в запись JSON логин и пароль или тикет аутентификации Интернет-поддержки
//
// Параметры:
//  Запись_JSON             - ЗаписьJSON
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
Процедура ДобавитьДанныеАутентификацииИПП(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ПолучитьДанныеАутентификацииИПП(ПараметрыВзаимодействия, РезультатВыполнения);
	
	Запись_JSON.ЗаписатьИмяСвойства("authenticationInfo");
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Запись_JSON.ЗаписатьИмяСвойства("authToken");
		Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.ТокенИПП);
		
	Иначе
		
		Запись_JSON.ЗаписатьИмяСвойства("login");
		Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.ЛогинИПП);
		
		Запись_JSON.ЗаписатьИмяСвойства("password");
		Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.ПарольИПП);
		
	КонецЕсли;
	
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Поместить в запись JSON информацию о программе-клиенте
//
// Параметры:
//  Запись_JSON             - ЗаписьJSON
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
Процедура ДобавитьПараметрыПрограммыКлиента(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения)
	
	Запись_JSON.ЗаписатьИмяСвойства("clientInfo");
	
	ИмяПрограммы = "Retail";
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	Запись_JSON.ЗаписатьИмяСвойства("programNick");
	Запись_JSON.ЗаписатьЗначение(ИмяПрограммы);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Поместить в запись JSON данные аутентификации в платежной системе
//
// Параметры:
//  Запись_JSON             - ЗаписьJSON
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
Процедура ДобавитьДанныеАутентификацииПлатежнойСистемы(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения)
	
	Запись_JSON.ЗаписатьИмяСвойства("sbpMemberRequestHeaders");
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Запись_JSON.ЗаписатьИмяСвойства("authorization");
	Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.ТокенАвторизации);
	
	Запись_JSON.ЗаписатьИмяСвойства("xmerchantId");
	Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.ИдентификаторМерчанта);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗапросов

Процедура СформироватьЗапросНаПолучениеТокенаАвторизации(ПараметрыВзаимодействия, РезультатВыполнения)

	ШаблонАдресаРесурса = "api/program1c/sbp/v1/members/%1/auth/get-credentials-grant";
	АдресРесурса = СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП);
	ПараметрыВзаимодействия.Вставить("АдресРесурса", АдресРесурса);
	
	ПолныйАдресРесурса = ПолучитьПолныйАдресРесурса(ПараметрыВзаимодействия, АдресРесурса);
	ПараметрыВзаимодействия.Вставить("ПолныйАдресРесурса", ПолныйАдресРесурса);
	
	ПолучитьДанныеАутентификацииИПП(ПараметрыВзаимодействия, РезультатВыполнения);
	Если НЕ РезультатВыполнения.Успешно Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	ДобавитьДанныеАутентификацииИПП(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьПараметрыПрограммыКлиента(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	
	Запись_JSON.ЗаписатьИмяСвойства("password");
	Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.Пароль);
	
	Запись_JSON.ЗаписатьИмяСвойства("username");
	Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.Логин);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ПараметрыВзаимодействия.Вставить("АвторизоватьсяНаСоединении", Ложь);

КонецПроцедуры

Процедура СформироватьЗапросНаРегистрациюСчета(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ШаблонАдресаРесурса = "api/program1c/sbp/v1/members/%1/qrs/register-qr";
	АдресРесурса = СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП);
	ПараметрыВзаимодействия.Вставить("АдресРесурса", АдресРесурса);
	
	ПолныйАдресРесурса = ПолучитьПолныйАдресРесурса(ПараметрыВзаимодействия, АдресРесурса);
	ПараметрыВзаимодействия.Вставить("ПолныйАдресРесурса", ПолныйАдресРесурса);
	
	ПолучитьДанныеАутентификацииИПП(ПараметрыВзаимодействия, РезультатВыполнения);
	Если НЕ РезультатВыполнения.Успешно Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	ДобавитьДанныеАутентификацииИПП(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьДанныеАутентификацииПлатежнойСистемы(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьПараметрыПрограммыКлиента(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьПараметрыРегистрацииСчета(Запись_JSON, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ПараметрыВзаимодействия.Вставить("АвторизоватьсяНаСоединении", Ложь);
	
КонецПроцедуры

Процедура СформироватьЗапросНаПолучениеИзмененияСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия
	, РезультатВыполнения)
	
	ШаблонАдресаРесурса = "api/program1c/sbp/v1/members/%1/status-manager/payments/qrs/%2/statuses/test-check-needed";
	АдресРесурса = СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП
	, ДанныеСчета.ИдентификаторОперацииОплаты);
	ПараметрыВзаимодействия.Вставить("АдресРесурса", АдресРесурса);
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Запись_JSON.ЗаписатьИмяСвойства("lastStatusCheckDate");
	ДатаРегистрации = ЗаписатьДатуJSON(ДанныеСчета.ДатаРегистрации, ФорматДатыJSON.ISO
	, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
	Запись_JSON.ЗаписатьЗначение(ДатаРегистрации);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ПараметрыВзаимодействия.Вставить("АвторизоватьсяНаСоединении", Ложь);
	
КонецПроцедуры

Процедура СформироватьЗапросНаПолучениеСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ШаблонАдресаРесурса = "api/program1c/sbp/v1/members/%1/payments/qrs/%2/search-payment";
	АдресРесурса = СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП
	, ДанныеСчета.ИдентификаторОперацииОплаты);
	ПараметрыВзаимодействия.Вставить("АдресРесурса", АдресРесурса);
	
	ПолныйАдресРесурса = ПолучитьПолныйАдресРесурса(ПараметрыВзаимодействия, АдресРесурса);
	ПараметрыВзаимодействия.Вставить("ПолныйАдресРесурса", ПолныйАдресРесурса);
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	ДобавитьДанныеАутентификацииИПП(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьДанныеАутентификацииПлатежнойСистемы(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьПараметрыПрограммыКлиента(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ПараметрыВзаимодействия.Вставить("АвторизоватьсяНаСоединении", Ложь);
	
КонецПроцедуры

Процедура СформироватьЗапросНаВозвратОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ШаблонАдресаРесурса = "api/program1c/sbp/v1/members/%1/refunds/create-refund";
	АдресРесурса = СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП);
	ПараметрыВзаимодействия.Вставить("АдресРесурса", АдресРесурса);
	
	ПолныйАдресРесурса = ПолучитьПолныйАдресРесурса(ПараметрыВзаимодействия, АдресРесурса);
	ПараметрыВзаимодействия.Вставить("ПолныйАдресРесурса", ПолныйАдресРесурса);
	
	ПолучитьДанныеАутентификацииИПП(ПараметрыВзаимодействия, РезультатВыполнения);
	Если НЕ РезультатВыполнения.Успешно Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	ДобавитьДанныеАутентификацииИПП(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьДанныеАутентификацииПлатежнойСистемы(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьПараметрыПрограммыКлиента(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьПараметрыРегистрацииВозврата(Запись_JSON, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ПараметрыВзаимодействия.Вставить("АвторизоватьсяНаСоединении", Ложь);
	
КонецПроцедуры // СформироватьЗапросНаВозвратОплаты()

Процедура СформироватьЗапросНаПолучениеСтатусаВозврата(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	АктивнаяСтрокаВозврат = ДанныеСчета.АктивнаяСтрокаВозврат;
	
	ШаблонАдресаРесурса = "api/program1c/sbp/v1/members/%1/refunds/%2/get-refund";
	АдресРесурса = СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП
	, АктивнаяСтрокаВозврат.ИдентификаторОперации);
	ПараметрыВзаимодействия.Вставить("АдресРесурса", АдресРесурса);
	
	ПолныйАдресРесурса = ПолучитьПолныйАдресРесурса(ПараметрыВзаимодействия, АдресРесурса);
	ПараметрыВзаимодействия.Вставить("ПолныйАдресРесурса", ПолныйАдресРесурса);
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	ДобавитьДанныеАутентификацииИПП(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьДанныеАутентификацииПлатежнойСистемы(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьПараметрыПрограммыКлиента(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ПараметрыВзаимодействия.Вставить("АвторизоватьсяНаСоединении", Ложь);
	
КонецПроцедуры

Процедура СформироватьЗапросНаОтчетПоОперациям(ПараметрыВзаимодействия, РезультатВыполнения)
	
	ШаблонАдресаРесурса
	= "api/program1c/sbp/v1/members/%1/reports/reconciliation-of-settlements/operations/request-report";
	АдресРесурса = СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП);
	ПараметрыВзаимодействия.Вставить("АдресРесурса", АдресРесурса);
	
	ПолныйАдресРесурса = ПолучитьПолныйАдресРесурса(ПараметрыВзаимодействия, АдресРесурса);
	ПараметрыВзаимодействия.Вставить("ПолныйАдресРесурса", ПолныйАдресРесурса);
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	ДобавитьДанныеАутентификацииИПП(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьДанныеАутентификацииПлатежнойСистемы(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьПараметрыПрограммыКлиента(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьПараметрыОтчетаПоОперациям(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ПараметрыВзаимодействия.Вставить("АвторизоватьсяНаСоединении", Ложь);
	
КонецПроцедуры

Процедура СформироватьЗапросНаПроверкуИзмененияСтатусаОтчета(ПараметрыВзаимодействия, РезультатВыполнения)
	
	ШаблонАдресаРесурса = "api/program1c/sbp/v1/members/%1/status-manager/reports/reconciliation-of-settlements/";
	АдресРесурса = СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП);
	ШаблонАдресаРесурса = "operations/%1/states/test-check-needed";
	АдресРесурса = АдресРесурса + СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдОтчета);
	ПараметрыВзаимодействия.Вставить("АдресРесурса", АдресРесурса);
	
	ПолныйАдресРесурса = ПолучитьПолныйАдресРесурса(ПараметрыВзаимодействия, АдресРесурса);
	ПараметрыВзаимодействия.Вставить("ПолныйАдресРесурса", ПолныйАдресРесурса);
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Запись_JSON.ЗаписатьИмяСвойства("lastStatusCheckDate");
	Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.ДатаСтатусаСтрокой);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ПараметрыВзаимодействия.Вставить("АвторизоватьсяНаСоединении", Ложь);
	
КонецПроцедуры

Процедура СформироватьЗапросНаПолучениеСтатусаОтчета(ПараметрыВзаимодействия, РезультатВыполнения)
	
	ШаблонАдресаРесурса = "api/program1c/sbp/v1/members/%1/reports/reconciliation-of-settlements/operations";
	АдресРесурса = СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП);
	ШаблонАдресаРесурса = "/%1/get-report";
	АдресРесурса = АдресРесурса + СтрШаблон(ШаблонАдресаРесурса, ПараметрыВзаимодействия.ИдОтчета);
	ПараметрыВзаимодействия.Вставить("АдресРесурса", АдресРесурса);
	
	ПолныйАдресРесурса = ПолучитьПолныйАдресРесурса(ПараметрыВзаимодействия, АдресРесурса);
	ПараметрыВзаимодействия.Вставить("ПолныйАдресРесурса", ПолныйАдресРесурса);
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	ДобавитьДанныеАутентификацииИПП(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьДанныеАутентификацииПлатежнойСистемы(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	ДобавитьПараметрыПрограммыКлиента(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ПараметрыВзаимодействия.Вставить("АвторизоватьсяНаСоединении", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПараметровЗапросов

Процедура ДобавитьПараметрыРегистрацииСчета(Запись_JSON, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	Запись_JSON.ЗаписатьИмяСвойства("sbpMemberRequest");
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Запись_JSON.ЗаписатьИмяСвойства("amount");
	// СуммаДокумента передается в рублях (не в копейках)
	Запись_JSON.ЗаписатьЗначение(ДанныеСчета.СуммаДокумента);
	
	Запись_JSON.ЗаписатьИмяСвойства("currency");
	Запись_JSON.ЗаписатьЗначение("RUB");
	
	Запись_JSON.ЗаписатьИмяСвойства("createDate");
	СтрокаДатаJSON = ЗаписатьДатуJSON(ДанныеСчета.ДатаРегистрации, ФорматДатыJSON.ISO
	, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
	Запись_JSON.ЗаписатьЗначение(СтрокаДатаJSON);
	
	Запись_JSON.ЗаписатьИмяСвойства("merchantId");
	Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.ИдентификаторМерчанта);
	
	Запись_JSON.ЗаписатьИмяСвойства("orderId");
	Запись_JSON.ЗаписатьЗначение(ДанныеСчета.ИдентификаторЗапроса);
	
	Запись_JSON.ЗаписатьИмяСвойства("qrTtl");
	// Значение ПараметрыВзаимодействия.ВремяОжиданияОплаты перевести из секунд в минуты 
	ВремяОжиданияОплаты = ПараметрыВзаимодействия.ВремяЖизниПлатежнойСсылки;
	Запись_JSON.ЗаписатьЗначение(ВремяОжиданияОплаты);
	
	Запись_JSON.ЗаписатьИмяСвойства("paymentPurpose");
	СтрокаОплата = ДанныеСчета.НазначениеПлатежа;
	ДопустимаяДлинаСтроки = 140;
	Если СтрДлина(СтрокаОплата) > ДопустимаяДлинаСтроки Тогда
		СтрокаОплата = Лев(СтрокаОплата, ДопустимаяДлинаСтроки);
	КонецЕсли;
	Запись_JSON.ЗаписатьЗначение(СтрокаОплата);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

Процедура ДобавитьПараметрыРегистрацииВозврата(Запись_JSON, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	АктивнаяСтрокаВозврат = ДанныеСчета.АктивнаяСтрокаВозврат;
	
	Запись_JSON.ЗаписатьИмяСвойства("sbpMemberRequest");
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Запись_JSON.ЗаписатьИмяСвойства("amount");
	Запись_JSON.ЗаписатьЗначение(АктивнаяСтрокаВозврат.СуммаЗаявкиНаРасход);
	
	Запись_JSON.ЗаписатьИмяСвойства("currency");
	Запись_JSON.ЗаписатьЗначение("RUB");
	
	Запись_JSON.ЗаписатьИмяСвойства("createDate");
	СтрокаДатаJSON = ЗаписатьДатуJSON(АктивнаяСтрокаВозврат.ДатаРегистрации, ФорматДатыJSON.ISO
	, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
	Запись_JSON.ЗаписатьЗначение(СтрокаДатаJSON);
	
	Запись_JSON.ЗаписатьИмяСвойства("memberId");
	Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.ИдентификаторБанкаУчастникаСБП);
	
	Запись_JSON.ЗаписатьИмяСвойства("qrId");
	Запись_JSON.ЗаписатьЗначение(ДанныеСчета.ИдентификаторОперацииОплаты);
	
	Запись_JSON.ЗаписатьИмяСвойства("refundOperationId");
	Запись_JSON.ЗаписатьЗначение(АктивнаяСтрокаВозврат.ИдентификаторЗапроса);
	
	Запись_JSON.ЗаписатьИмяСвойства("paymentId");
	Запись_JSON.ЗаписатьЗначение(ДанныеСчета.ИдентификаторОперации);
	
	Запись_JSON.ЗаписатьКонецОбъекта();

КонецПроцедуры // ДобавитьПараметрыРегистрацииВозврата()

Процедура ДобавитьПараметрыОтчетаПоОперациям(Запись_JSON, ПараметрыВзаимодействия, РезультатВыполнения)
	
	Запись_JSON.ЗаписатьИмяСвойства("sbpMemberRequest");
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Запись_JSON.ЗаписатьИмяСвойства("beginDate");
	СтрокаДатаJSON = ЗаписатьДатуJSON(ПараметрыВзаимодействия.ДатаНачала, ФорматДатыJSON.ISO
	, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
	Запись_JSON.ЗаписатьЗначение(СтрокаДатаJSON);
	
	Запись_JSON.ЗаписатьИмяСвойства("endDate");
	СтрокаДатаJSON = ЗаписатьДатуJSON(ПараметрыВзаимодействия.ДатаОкончания, ФорматДатыJSON.ISO
	, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
	Запись_JSON.ЗаписатьЗначение(СтрокаДатаJSON);
	
	Запись_JSON.ЗаписатьИмяСвойства("merchantId");
	Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.ИдентификаторМерчанта);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

#КонецОбласти

#Область HMAC

// Сформировать токен типа HMAC_SHA1 или HMAC_SHA256 и поместить его в структуру ПараметрыВзаимодействия 
//
// Параметры:
//  ПараметрыВзаимодействия - Структура - см. Справочник.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//                 			  Должна содержать поле типа Массив с ключом ДанныеДляПодписи
//  РезультатВыполнения     - Структура - см. ПолучитьСтруктуруРезультатВыполнения
//  ЗначениеХешФункции		- ХешФункция - ожидаемые значения: ХешФункция.SHA1 или ХешФункция.SHA256 
//
// Возвращаемое значение:
//   Булево   - <описание возвращаемого значения>
//
Функция ПолучитьТокенHMAC(ПараметрыВзаимодействия, РезультатВыполнения, ЗначениеХешФункции)
	
	Данные = "";
	Для Каждого ЭлМассива Из ПараметрыВзаимодействия.ДанныеДляПодписи Цикл
		
		Если Не ЗначениеЗаполнено(ЭлМассива) И ЭлМассива <> 0 Тогда
			Данные = Данные + "-";
		ИначеЕсли ТипЗнч(ЭлМассива) = Тип("Дата") Тогда
			ЗначениеДата = ЗаписатьДатуJSON(ЭлМассива, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата);
			Данные = Данные + СтрДлина(ЗначениеДата) + ЗначениеДата;
		ИначеЕсли ТипЗнч(ЭлМассива) = Тип("Число") Тогда
			ЗначениеЧисло = СтрЗаменить(СокрП(ЭлМассива), ",", ".");
			ЗначениеЧисло = СтрЗаменить(ЗначениеЧисло, Символы.НПП, "");
			Данные = Данные + СтрДлина(ЗначениеЧисло) + ЗначениеЧисло;
		Иначе
			Данные = Данные + СтрДлина(СокрП(ЭлМассива)) + ЭлМассива;
		КонецЕсли;
		
	КонецЦикла;
	
	СлучайноеЧислоHex = ДлинноеСлучайноеЧислоHex();
	Данные = Данные + СтрДлина(СлучайноеЧислоHex) + СлучайноеЧислоHex;
	
	Хеш = ПолучитьХешHMAC(ПараметрыВзаимодействия.СекретныйКлюч
		, ПолучитьДвоичныеДанныеИзСтроки(Данные, КодировкаТекста.UTF8)
		, ЗначениеХешФункции);
		
	Префикс = ?(ЗначениеХешФункции = ХешФункция.SHA256, "HMACSHA256", "HMACSHA1");
	ТокенАвторизации = Префикс + " " + СлучайноеЧислоHex + "." + НРег(Хеш);
	
	ПараметрыВзаимодействия.Вставить("ТокенАвторизации", ТокенАвторизации);
	
	Возврат Истина;
	
КонецФункции

// Формирование подписи для аутентификации (HMAC).
// См. RFC 2104 https://www.ietf.org/rfc/rfc2104.txt.
//
// Параметры:
//  СекретныйКлюч - ДвоичныеДанные - секретный ключ шифрования.
//  Данные - ДвоичныеДанные  - данные шифрования.
//  ХешФункция - ХешФункция  - хеш функция, например ХешФункция.SHA256.
// 
// Возвращаемое значение:
//  Строка - сформированный hmac.
//
Функция ПолучитьХешHMAC(Знач СекретныйКлюч, Знач Данные, Знач ЗначениеХешФункции)
	
	РазмерБлока = 64;
	
	Если СекретныйКлюч.Размер() > РазмерБлока Тогда
		СекретныйКлюч = Хешировать(СекретныйКлюч, ЗначениеХешФункции);
	КонецЕсли;
	
	ПустыеДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("");
	СекретныйКлюч = ОбрезатьДвоичныеДанныеСлева(СекретныйКлюч, РазмерБлока);
	
	КлючВБлоке1 = ЗабитьДвоичныеДанныеСправа(СекретныйКлюч, РазмерБлока, "00");
	
	Блок0x36 = ЗабитьДвоичныеДанныеСправа(ПустыеДвоичныеДанные, РазмерБлока, "36");
	КлючВБлоке2 = ОбъединитьДвоичныеДанныеXOR(КлючВБлоке1, Блок0x36);
	
	Блок0x5C = ЗабитьДвоичныеДанныеСправа(ПустыеДвоичныеДанные, РазмерБлока, "5C");
	КлючВБлоке3 = ОбъединитьДвоичныеДанныеXOR(КлючВБлоке1, Блок0x5C);
	
	КлючИДанные = СоединитьДвоичныеДанныеПоЗначениям(КлючВБлоке2, Данные);
	ДанныеХеш = СоединитьДвоичныеДанныеПоЗначениям(КлючВБлоке3, Хешировать(КлючИДанные, ЗначениеХешФункции));
	Результат = Хешировать(ДанныеХеш, ЗначениеХешФункции);
	
	Возврат ПолучитьHexСтрокуИзДвоичныхДанных(Результат);
	
КонецФункции

// Применяет хеш функцию к переданным данным.
//
// Параметры:
//  Значение - ДвоичныеДанные  - данные хеширования;
//  ХешФункция - ХешФункция  - хеш функция, например ХешФункция.SHA256.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - хеш сумма;
//
Функция Хешировать(Знач Значение, Знач ЗначениеХешФункции)
	
	ХешированиеДанных = Новый ХешированиеДанных(ЗначениеХешФункции);
	ХешированиеДанных.Добавить(Значение);
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

// Объединяет несколько объектов типа ДвоичныеДанные в один.
//
// Параметры:
//  ДвоичныеДанные1 - ДвоичныеДанные - первое значение;
//  ДвоичныеДанные2 - ДвоичныеДанные - второе значение.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат соединения.
//
Функция СоединитьДвоичныеДанныеПоЗначениям(Знач ДвоичныеДанные1, Знач ДвоичныеДанные2)
	
	Массив = Новый Массив;
	Массив.Добавить(ДвоичныеДанные1);
	Массив.Добавить(ДвоичныеДанные2);
	
	Возврат СоединитьДвоичныеДанные(Массив);
	
КонецФункции

// Дополняет двоичные данные переданным блоком.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - значение для обработки;
//  Длина - Число - длина дополнения;
//  Строка16 - Строка - строка дополнения;
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат обработки.
//
Функция ЗабитьДвоичныеДанныеСправа(Знач ДвоичныеДанные, Знач Длина, Знач Строка16)
	
	Значение = ПолучитьДвоичныеДанныеИзHexСтроки(Строка16);
	РазмерБлока = Длина - ДвоичныеДанные.Размер();
	
	Блок = Значение;
	МассивБлока = Новый Массив;
	МассивБлока.Добавить(Значение);
	Пока Блок.Размер() < РазмерБлока Цикл
		МассивБлока.Добавить(Блок);
		Блок = СоединитьДвоичныеДанные(МассивБлока);
	КонецЦикла;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(ДвоичныеДанные);
	МассивБлоков = РазделитьДвоичныеДанные(Блок, РазмерБлока);
	Если МассивБлоков.Количество() > 0 Тогда
		МассивДанных.Добавить(МассивБлоков[0]);
	КонецЕсли;
	Результат = СоединитьДвоичныеДанные(МассивДанных);
	
	Возврат Результат;
	
КонецФункции

// Производит операцию исключающего ИЛИ для двоичных данных.
//
// Параметры:
//  ДвоичныеДанные1 - ДвоичныеДанные - первое значение;
//  ДвоичныеДанные2 - ДвоичныеДанные - второе значение.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат операции.
//
Функция ОбъединитьДвоичныеДанныеXOR(Знач ДвоичныеДанные1, Знач ДвоичныеДанные2)
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	
	ЧтениеДанных1 = Новый ЧтениеДанных(ДвоичныеДанные1);
	ЧтениеДанных2 = Новый ЧтениеДанных(ДвоичныеДанные2);
	
	Буфер1 = ЧтениеДанных1.ПрочитатьВБуферДвоичныхДанных();
	Буфер2 = ЧтениеДанных2.ПрочитатьВБуферДвоичныхДанных();
	
	Если Буфер1.Размер > Буфер2.Размер Тогда
		Буфер1.ЗаписатьПобитовоеИсключительноеИли(0, Буфер2, Буфер2.Размер);
		ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер1);
	Иначе 
		Буфер2.ЗаписатьПобитовоеИсключительноеИли(0, Буфер1, Буфер1.Размер);
		ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер2);
	КонецЕсли;
	
	Результат = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат Результат;
	
КонецФункции

// Выполняет удаление заданного количества байт из двоичных данных.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - значение для обработки;
//  КоличествоБайт - Число - количество байт для удаления.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат операции.
//
Функция ОбрезатьДвоичныеДанныеСлева(Знач ДвоичныеДанные, Знач КоличествоБайт)
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанные);
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(КоличествоБайт);
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер);
	
	Возврат ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

// Создает случайное число длиной 16-32 разряда
// и переводит его в hex систему счисления.
//
// Возвращаемое значение:
//  Строка - случайное число в hex.
//
Функция ДлинноеСлучайноеЧислоHex()
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	ДлинаЧисла = ГенераторСлучайныхЧисел.СлучайноеЧисло(16, 32);
	
	// Для инициализации первого разряда исключается 0.
	СлучайноеЧисло = "" + ГенераторСлучайныхЧисел.СлучайноеЧисло(1, 9);
	
	// Последовательное формирование случайного числа по разрядам.
	Сч = 1;
	Пока Сч < ДлинаЧисла Цикл
		СлучайноеЧисло = СлучайноеЧисло + ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 9);
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ОнлайнОплата.ПреобразоватьЧислоВHex(Число(СлучайноеЧисло));
	
КонецФункции

#КонецОбласти

Функция ПолучитьПолныйАдресРесурса(ПараметрыВзаимодействия, АдресРесурса)
	
	Возврат "https://" + ПараметрыВзаимодействия.Хост + "/" + АдресРесурса;
	
КонецФункции

// Проверить успешность выполнения запроса на регистрацию счета в платежном шлюзе
//
// Параметры:
//  ОтветСервера            - Соответствие - ответ HTTP-сервиса в формате JSON
//  ДанныеСчета             - Структура - реквизиты Счета на оплату
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА - счет зарегистрирован, ЛОЖЬ - в противном случае
//
Функция СчетЗарегистрирован(ОтветСервера, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ВсеОК = Ложь;
	
	ПодробностиОтвета = ОтветСервера.Получить("sbpMemberResponse");
	
	Если ПодробностиОтвета <> Неопределено Тогда
		
		ИдентификаторОперацииОплаты = ПодробностиОтвета.Получить("qrId");
		АдресФормыОплаты = ПодробностиОтвета.Получить("payload");
		
		Если ИдентификаторОперацииОплаты <> Неопределено И АдресФормыОплаты <> Неопределено Тогда
			
			ДанныеСчета.Вставить("ИдентификаторОперацииОплаты", ИдентификаторОперацииОплаты);
			ДанныеСчета.Вставить("АдресФормыОплаты", АдресФормыОплаты);
			
			ВсеОК = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ВсеОК Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось зарегистрировать %1'"), ДанныеСчета.СчетНаОплату);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ТекстЗапроса = ОнлайнОплата.ПолучитьТекстЗапросаБезПароля(ПараметрыВзаимодействия);
		ТекстОтвета = ОнлайнОплата.ПолучитьТекстОтветаСервера(ОтветСервера);
		Комментарий = НСтр("ru='Текст запроса:'") + Символы.ПС + ТекстЗапроса + Символы.ПС + НСтр("ru='Текст ответа:'")
		+ Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, ,
		, ТекстСообщения + Символы.ПС + Комментарий);
		
	КонецЕсли;
	
	Возврат ВсеОК;
	
КонецФункции // СчетЗарегистрирован()

// Проверить успешность выполнения запроса на регистрацию заявки на расход в платежном шлюзе
//
// Параметры:
//  ОтветСервера            - Соответствие - ответ HTTP-сервиса в формате JSON
//  ДанныеСчета             - Структура - реквизиты Счета на оплату
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА - возврат зарегистрирован, ЛОЖЬ - в противном случае
//
Функция ВозвратЗарегистрирован(ОтветСервера, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ВсеОК = Ложь;
	
	АктивнаяСтрокаВозврат = ДанныеСчета.АктивнаяСтрокаВозврат;
	
	ДанныеДляЗаписи = Новый Структура;
	ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
	ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", АктивнаяСтрокаВозврат.ЗаявкаНаРасходДС);
	
	ПодробностиОтвета = ОтветСервера.Получить("sbpMemberResponse");
	
	Если ПодробностиОтвета <> Неопределено Тогда
		
		refundStatus = ПодробностиОтвета.Получить("refundStatus");
		refundId = ПодробностиОтвета.Получить("refundId");
		operationDate = ПодробностиОтвета.Получить("operationDate");
		
		Если refundStatus <> Неопределено Тогда
			
			СоответствиеСтатусов = ПолучитьСоответствиеСтатусовВозврата();
			СтатусОперации = СоответствиеСтатусов.Получить(refundStatus);
			
			Если СтатусОперации = Перечисления.СтатусыОнлайнОплат.ОтказВозврата Тогда
				
				refundStatusDescription = ПодробностиОтвета.Получить("refundStatusDescription");
				
				Если refundStatusDescription = Неопределено Тогда
					
					ТекстСообщения = НСтр("ru = 'Не удалось зарегистрировать заявку на расход д/с в платежном шлюзе.
					|Причина отмены операции не указана'");
					
				Иначе
					
					СтрокаШаблон = НСтр("ru = 'Не удалось зарегистрировать заявку на расход д/с в платежном шлюзе.
					|Причина отмены операции: %1'");
					ТекстСообщения = СтрШаблон(СтрокаШаблон, refundStatusDescription);
					
				КонецЕсли;
				
				РезультатВыполнения.Успешно = Ложь;
				РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
				ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,
				, ДанныеСчета.СчетНаОплату, ТекстСообщения);
				
				ДанныеДляЗаписи.Вставить("СтатусОперации", СтатусОперации);
				
			Иначе
				
				ИдентификаторОперации = refundId;
				УбратьСпецСимволы(ИдентификаторОперации);
				ДанныеДляЗаписи.Вставить("ИдентификаторОперации", ИдентификаторОперации);
				
				ВсеОК = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		ОнлайнОплата.ЗаписатьДанныеОбменаРегистр(ДанныеДляЗаписи, РезультатВыполнения);
		
	Исключение
		
		Комментарий = НСтр("ru='Не удалось записать в регистр Платежный шлюз данные:'");
		Для каждого КлючИЗначение Из ДанныеДляЗаписи Цикл
			Комментарий = Комментарий + Символы.ПС + КлючИЗначение.Ключ + " = " + КлючИЗначение.Значение;
		КонецЦикла;
		Комментарий = Комментарий + Символы.ПС + НСтр("ru='Информация об ошибке:'") + Символы.ПС
		+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,
		, ДанныеСчета.СчетНаОплату, Комментарий);
		
	КонецПопытки;
	
	Возврат ВсеОК;
	
КонецФункции // ВозвратЗарегистрирован()

Функция ТребуетсяПроверкаСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	СформироватьЗапросНаПолучениеИзмененияСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос
	Если ОтветСервера = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Сохранить ответ сервера в журнал регистрации событий
	ОнлайнОплата.СохранитьОтветСервераВЖурнал(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	ТребуетсяПроверка = ОтветСервера.Получить("checkNeeded");
	Если ТребуетсяПроверка = Неопределено Тогда
		ТребуетсяПроверка = Ложь;
	КонецЕсли;
	
	Если ТребуетсяПроверка Тогда
		
		ДанныеДляЗаписи = Новый Структура;
		ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
		ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", Документы.ЗаявкаНаРасходДС.ПустаяСсылка());
		ДатаУведомления = ТекущаяДатаСеанса();
		ДанныеДляЗаписи.Вставить("ДатаУведомления", ДатаУведомления);
		ДанныеДляЗаписи.Вставить("СтатусУведомления", Перечисления.СтатусыОнлайнОплат.ПолученоУведомление);
		
		ОнлайнОплата.ЗаписатьДанныеОбменаРегистр(ДанныеДляЗаписи, РезультатВыполнения);
		
		Если РезультатВыполнения.Успешно Тогда
			
			ДанныеСчета.Вставить("ДатаУведомления", ДанныеДляЗаписи.ДатаУведомления);
			ДанныеСчета.Вставить("СтатусУведомления", ДанныеДляЗаписи.СтатусУведомления);
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПятьМинут = 300;
	Если ДанныеСчета.СрокЖизниСсылки + ПятьМинут < ТекущаяДатаСеанса() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьДанныеДляЗаписиСтатусаОплаты(ДанныеСчета, ОтветСервера, РезультатВыполнения)
	
	ДанныеДляЗаписи = Новый Структура;
	
	СтатусОперации = ПолучитьСтатусОплаты(ОтветСервера, ДанныеСчета, РезультатВыполнения);
	
	Если СтатусОперации = Неопределено Тогда
	
		Возврат ДанныеДляЗаписи;
	
	КонецЕсли;
	
	Если СтатусОперации = ДанныеСчета.СтатусОперации Тогда
	
		Возврат ДанныеДляЗаписи;
	
	КонецЕсли;
	
	ДанныеДляЗаписи.Вставить("СтатусОперации", СтатусОперации);
	
	ДобавитьДанныеОперацииОплаты(ОтветСервера, ДанныеДляЗаписи, РезультатВыполнения);
	
	ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
	ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", Документы.ЗаявкаНаРасходДС.ПустаяСсылка());
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции  // ПолучитьДанныеДляЗаписиСтатусаОплаты()

Функция ПолучитьДанныеДляЗаписиСтатусаВозврата(ДанныеСчета, ОтветСервера, РезультатВыполнения)
	
	АктивнаяСтрокаВозврат = ДанныеСчета.АктивнаяСтрокаВозврат;
	
	ДанныеДляЗаписи = Новый Структура;
	
	СтатусОперации = ПолучитьСтатусВозврата(ОтветСервера, ДанныеСчета, РезультатВыполнения);
	
	Если СтатусОперации = Неопределено Тогда
	
		Возврат ДанныеДляЗаписи;
	
	КонецЕсли;
	
	Если СтатусОперации = АктивнаяСтрокаВозврат.СтатусОперации Тогда
	
		Возврат ДанныеДляЗаписи;
	
	КонецЕсли;
	
	ДанныеДляЗаписи.Вставить("СтатусОперации", СтатусОперации);
	
	ДобавитьДанныеОперацииВозврата(ОтветСервера, ДанныеДляЗаписи, РезультатВыполнения);
	
	ДанныеДляЗаписи.Вставить("СчетНаОплату", АктивнаяСтрокаВозврат.СчетНаОплату);
	ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", АктивнаяСтрокаВозврат.ЗаявкаНаРасходДС);
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции // ПолучитьДанныеДляЗаписиСтатусаВозврата()

Функция ПолучитьСтатусОплаты(ОтветСервера, ДанныеСчета, РезультатВыполнения)
	
	Статус = Неопределено;
	
	СоответствиеСтатусов = ПолучитьСоответствиеСтатусовОплаты();
	
	ПодробностиОтвета = ОтветСервера.Получить("sbpMemberResponse");
	
	Если ПодробностиОтвета <> Неопределено Тогда
		КлючСтатуса = ПодробностиОтвета.Получить("paymentStatus");
		Если КлючСтатуса <> Неопределено Тогда
			КлючСтатуса = ВРег(КлючСтатуса);
			Статус = СоответствиеСтатусов.Получить(КлючСтатуса);
			Если Статус = Неопределено Тогда
				РезультатВыполнения.Успешно = Ложь;
				СтрокаШаблон = НСтр("ru='Не найдено соответствие статусу платежа ""%1""'");
				ТекстСообщения = СтрШаблон(СтрокаШаблон, КлючСтатуса);
				РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
				ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,
				, ДанныеСчета.СчетНаОплату, ТекстСообщения);
			ИначеЕсли Статус = Перечисления.СтатусыОнлайнОплат.ОжиданиеОплаты Тогда
				ТекДата = ТекущаяДатаСеанса();
				СекундВПятиМинутах = 300;
				КрайнийСрокОплаты = ДанныеСчета.СрокОплаты + СекундВПятиМинутах; // ТУТ ОШИБКА
				Если ТекДата > КрайнийСрокОплаты Тогда
					Статус = Перечисления.СтатусыОнлайнОплат.ОтказОплаты;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ПолучитьСтатусВозврата(ОтветСервера, ДанныеСчета, РезультатВыполнения)
	
	Статус = Неопределено;
	
	СоответствиеСтатусов = ПолучитьСоответствиеСтатусовВозврата();
	
	ПодробностиОтвета = ОтветСервера.Получить("sbpMemberResponse");
	
	Если ПодробностиОтвета <> Неопределено Тогда
		КлючСтатуса = ПодробностиОтвета.Получить("refundStatus");
		Если КлючСтатуса <> Неопределено Тогда
			КлючСтатуса = ВРег(КлючСтатуса);
			Статус = СоответствиеСтатусов.Получить(КлючСтатуса);
			Если Статус = Неопределено Тогда
				РезультатВыполнения.Успешно = Ложь;
				СтрокаШаблон = НСтр("ru='Не найдено соответствие статусу возврата ""%1""'");
				ТекстСообщения = СтрШаблон(СтрокаШаблон, КлючСтатуса);
				РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
				ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,
				, ДанныеСчета.СчетНаОплату, ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ПолучитьСоответствиеСтатусовОплаты()
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("IN_PROGRESS", Перечисления.СтатусыОнлайнОплат.ОжиданиеОплаты);
	СоответствиеСтатусов.Вставить("SUCCESS", Перечисления.СтатусыОнлайнОплат.Оплачен);
	СоответствиеСтатусов.Вставить("DECLINED", Перечисления.СтатусыОнлайнОплат.ОтказОплаты);
	СоответствиеСтатусов.Вставить("REJECTED", Перечисления.СтатусыОнлайнОплат.ОтказОплаты);
	СоответствиеСтатусов.Вставить("ERROR", Перечисления.СтатусыОнлайнОплат.ОтказОплаты);
	СоответствиеСтатусов.Вставить("PENDING", Перечисления.СтатусыОнлайнОплат.ОжиданиеОплаты);
	
	Возврат СоответствиеСтатусов;
	
КонецФункции // ПолучитьСоответствиеСтатусовОплаты()

Функция ПолучитьСоответствиеСтатусовВозврата()
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("IN_PROGRESS", Перечисления.СтатусыОнлайнОплат.ОжиданиеВозврата);
	СоответствиеСтатусов.Вставить("SUCCESS", Перечисления.СтатусыОнлайнОплат.ВыполненВозврат);
	СоответствиеСтатусов.Вставить("DECLINED", Перечисления.СтатусыОнлайнОплат.ОтказВозврата);
	СоответствиеСтатусов.Вставить("REJECTED", Перечисления.СтатусыОнлайнОплат.ОтказВозврата);
	СоответствиеСтатусов.Вставить("ERROR", Перечисления.СтатусыОнлайнОплат.ОтказВозврата);
	СоответствиеСтатусов.Вставить("PENDING", Перечисления.СтатусыОнлайнОплат.ОжиданиеВозврата);
	СоответствиеСтатусов.Вставить("EXCEEDED", Перечисления.СтатусыОнлайнОплат.ОтказВозврата);
	СоответствиеСтатусов.Вставить("NOT_PAID", Перечисления.СтатусыОнлайнОплат.ОтказВозврата);
	СоответствиеСтатусов.Вставить("CONFIRMATION_REQUIRED", Перечисления.СтатусыОнлайнОплат.ОтказВозврата);
	
	Возврат СоответствиеСтатусов;
	
КонецФункции // ПолучитьСоответствиеСтатусовВозврата()

Процедура ДобавитьДанныеОперацииОплаты(ОтветСервера, ДанныеДляЗаписи, РезультатВыполнения)
	
	ПодробностиОтвета = ОтветСервера.Получить("sbpMemberResponse");
	
	ИдентификаторОперации = ПодробностиОтвета.Получить("paymentId");
	
	Если ИдентификаторОперации <> Неопределено Тогда
		
		УбратьСпецСимволы(ИдентификаторОперации);
		ДанныеДляЗаписи.Вставить("ИдентификаторОперации", ИдентификаторОперации);
		
	КонецЕсли;
	
	СуммаОперации = ПодробностиОтвета.Получить("amount");
	
	Если СуммаОперации <> Неопределено Тогда
		
		ТипЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
		СуммаОперации = ТипЧисло.ПривестиЗначение(СуммаОперации);
		
		ДанныеДляЗаписи.Вставить("СуммаОперации", СуммаОперации);
		
	КонецЕсли;
	
	ДатаОперации = ПодробностиОтвета.Получить("operationDate");
	
	Если ДатаОперации <> Неопределено Тогда
		
		ДатаОперации = ПрочитатьДатуJSON(ДатаОперации, ФорматДатыJSON.ISO);
		
		ДанныеДляЗаписи.Вставить("ДатаОперации", ДатаОперации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеОперацииВозврата(ОтветСервера, ДанныеДляЗаписи, РезультатВыполнения)
	
	ПодробностиОтвета = ОтветСервера.Получить("sbpMemberResponse");
	
	СуммаОперации = ПодробностиОтвета.Получить("amount");
	
	Если СуммаОперации <> Неопределено Тогда
		
		ТипЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
		СуммаОперации = ТипЧисло.ПривестиЗначение(СуммаОперации);
		
		ДанныеДляЗаписи.Вставить("СуммаОперации", СуммаОперации);
		
	КонецЕсли;
	
	ДатаОперации = ПодробностиОтвета.Получить("operationDate");
	
	Если ДатаОперации <> Неопределено Тогда
		
		ДатаОперации = ПрочитатьДатуJSON(ДатаОперации, ФорматДатыJSON.ISO);
		
		ДанныеДляЗаписи.Вставить("ДатаОперации", ДатаОперации);
		
	КонецЕсли;
	
	ПричинаОтказа = ПодробностиОтвета.Получить("refundStatusDescription");
	Если ПричинаОтказа <> Неопределено Тогда
		
		ДанныеДляЗаписи.Вставить("Комментарий", ПричинаОтказа);
		
	КонецЕсли;

КонецПроцедуры

Процедура РазобратьСтатусОтчетаПоОперациям(ОтветСервера, ПараметрыВзаимодействия, РезультатВыполнения)
	
	// Сервер не обработал запрос. Ошибки записаны при получении ответа
	Если ОтветСервера = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОшибкиКратко = НСтр("ru='Ошибка при разборе статуса отчета по операциям'");
	ЗаголовокКомментария = НСтр("ru='Запрос на построение отчета по операциям'");
	
	СохранитьОтветСервераВЖурнал(ЗаголовокКомментария, ОтветСервера, РезультатВыполнения);
	
	ПодробностиОтвета = ОтветСервера.Получить("sbpMemberResponse");
	
	Если ПодробностиОтвета = Неопределено Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		РезультатВыполнения.ТекстыСообщений.Добавить(ОписаниеОшибкиКратко);
		ЗаголовокКомментария = ЗаголовокКомментария + НСтр("ru=': ответ сервера не имеет секции sbpMemberResponse'");
		СохранитьОтветСервераВЖурнал(ЗаголовокКомментария, ОтветСервера, РезультатВыполнения);
		
	Иначе
		
		ИдОтчета = ПодробностиОтвета.Получить("reportId");
		URLФайла = ПодробностиОтвета.Получить("resultURL");
		СостояниеОтчета = ПодробностиОтвета.Получить("reportState");
		
		Если ИдОтчета = Неопределено ИЛИ СостояниеОтчета = Неопределено Тогда
			
			РезультатВыполнения.Успешно = Ложь;
			РезультатВыполнения.ТекстыСообщений.Добавить(ОписаниеОшибкиКратко);
			ЗаголовокКомментария = ЗаголовокКомментария
			+ НСтр("ru=': ответ сервера не имеет параметров отчета reportId или reportState'");
			СохранитьОтветСервераВЖурнал(ЗаголовокКомментария, ОтветСервера, РезультатВыполнения);
			
		Иначе	
			
			ТипОшибки = СостояниеОтчета.Получить("errorType");
			СтатусОтчета = СостояниеОтчета.Получить("status");
			ДатаСтатусаСтрокой = СостояниеОтчета.Получить("statusDate");
			
			Если СтатусОтчета = Неопределено Тогда
				
				РезультатВыполнения.Успешно = Ложь;
				РезультатВыполнения.ТекстыСообщений.Добавить(ОписаниеОшибкиКратко);
				ЗаголовокКомментария = ЗаголовокКомментария
				+ НСтр("ru=': ответ сервера не имеет статуса отчета status'");
				СохранитьОтветСервераВЖурнал(ЗаголовокКомментария, ОтветСервера, РезультатВыполнения);
				
			Иначе
				
				ПараметрыВзаимодействия.Вставить("ИдОтчета", ИдОтчета);
				ПараметрыВзаимодействия.Вставить("URLФайла", URLФайла);
				ПараметрыВзаимодействия.Вставить("СтатусОтчета", СтатусОтчета);
				ПараметрыВзаимодействия.Вставить("ДатаСтатусаСтрокой", ДатаСтатусаСтрокой);
				
				Если ТипОшибки <> Неопределено Тогда
					
					РезультатВыполнения.Успешно = Ложь;
					СтрокаШаблон = НСтр("ru=': сервис вернул ошибку типа %1'");
					ТекстСообщения = СтрШаблон(СтрокаШаблон, ТипОшибки);
					РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
					ЗаголовокКомментария = ЗаголовокКомментария + ТекстСообщения;
					СохранитьОтветСервераВЖурнал(ЗаголовокКомментария, ОтветСервера, РезультатВыполнения);
					
					РезультатВыполнения.Вставить("ТипОшибки", ТипОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСтатусОтчетаПоОперациям(ПараметрыВзаимодействия, РезультатВыполнения)
	
	ПредельнаяДлительность = 300;
	ПаузаМеждуВызовами = 5;
	СтрокаШаблон = НСтр("ru='получения статуса отчета по операциям за период с %1 по %2. Интерфейс - %3'");
	ФорматДаты = "ДЛФ=DT";
	ДатаНачала = Формат(ПараметрыВзаимодействия.ДатаНачала, ФорматДаты);
	ДатаОкончания = Формат(ПараметрыВзаимодействия.ДатаОкончания, ФорматДаты);
	ОписаниеЗапроса = СтрШаблон(СтрокаШаблон, ДатаНачала, ДатаОкончания, ПараметрыВзаимодействия.Интерфейс);
	ОнлайнОплата.УстановитьПараметрыЦиклаЗапросов(ПараметрыВзаимодействия, ПредельнаяДлительность, ПаузаМеждуВызовами
	, ОписаниеЗапроса);
	
	СтатусОжидание = ИдентификаторСтатусаОжидание();
	
	Пока ОнлайнОплата.ПродолжениеЦиклаЗапросовВозможно(ПараметрыВзаимодействия, РезультатВыполнения) Цикл
		
		СформироватьЗаголовки(ПараметрыВзаимодействия);
		
		СформироватьЗапросНаПроверкуИзмененияСтатусаОтчета(ПараметрыВзаимодействия, РезультатВыполнения);
		
		ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
		
		// Сервер не обработал запрос. Ошибки записаны при получении ответа
		Если ОтветСервера = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ЗаголовокКомментария = НСтр("ru='Запрос на проверку изменения статуса отчета по операциям'");
		СохранитьОтветСервераВЖурнал(ЗаголовокКомментария, ОтветСервера, РезультатВыполнения);
		
		СтатусИзменился = ОтветСервера.Получить("checkNeeded");
		
		Если СтатусИзменился Тогда
			
			Если НЕ ПолучитьТокенАвторизации(ПараметрыВзаимодействия, РезультатВыполнения) Тогда
				
				Возврат;
				
			КонецЕсли;
			
			СформироватьЗаголовки(ПараметрыВзаимодействия);
			
			СформироватьЗапросНаПолучениеСтатусаОтчета(ПараметрыВзаимодействия, РезультатВыполнения);
			
			ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
			
			РазобратьСтатусОтчетаПоОперациям(ОтветСервера, ПараметрыВзаимодействия, РезультатВыполнения);
			
		КонецЕсли;
		
		Если ПараметрыВзаимодействия.СтатусОтчета <> СтатусОжидание Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьФайлОтчетаПоОперациям(ПараметрыВзаимодействия, РезультатВыполнения)
	
	ВременныйКаталогZIP = ФайловаяСистема.СоздатьВременныйКаталог("zip");
	ПутьКФайлуZIP = ВременныйКаталогZIP + "report.zip";
	
	// Заполнить хост для получения токена в цикле
	ХостДляТокена = ПараметрыВзаимодействия.Хост;
	
	ПолучатьНовыйТокен = Истина; // Нужен свежий токен, чтобы успеть скачать файл
	Если НЕ ПолучитьТокенАвторизации(ПараметрыВзаимодействия, РезультатВыполнения, ПолучатьНовыйТокен) Тогда
		
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталогZIP);
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьЗаголовки(ПараметрыВзаимодействия);
	ПараметрыВзаимодействия.Заголовки.Вставить("Authorization", ПараметрыВзаимодействия.ТокенАвторизации);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыВзаимодействия.URLФайла);
	ПараметрыВзаимодействия.Вставить("Хост", СтруктураURI.Хост);
	ПараметрыВзаимодействия.Вставить("АдресРесурса", СтруктураURI.ПутьНаСервере);
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", "");
	
	// Запомнить хост и путь на сервере для скачивания файла порциями в цикле
	ХостДляФайла = СтруктураURI.Хост;
	ПутьНаСервереДляФайла = СтруктураURI.ПутьНаСервере;
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "HEAD");
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос. Ошибки записаны при получении ответа
	Если ОтветСервера = Неопределено Тогда
		
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталогZIP);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаголовокКомментария = НСтр("ru='Запрос на получение размера файла'");
	СохранитьОтветСервераВЖурнал(ЗаголовокКомментария, ОтветСервера, РезультатВыполнения);
	
	ЕдиницаИзмерения = НРег(ОтветСервера.Получить("Accept-Ranges"));
	Если ЕдиницаИзмерения <> "bytes" Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru = 'Неверная единица измерения (Accept-Ranges) порции файла - %1'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, ЕдиницаИзмерения);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталогZIP);
		
		Возврат;
		
	КонецЕсли;
	
	РазмерФайла = Число(ОтветСервера.Получить("Content-Length"));
	
	НачальнаяПозиция = 0;
	ТекущаяПозиция   = 0;
	РазмерПорции     = 4096; // 4 кБ
	
	ФорматЧислаJSON = НСтр("ru='ЧЦ=15; ЧДЦ=0; ЧН=0; ЧГ=0'");
	ФорматТелаСтрока = "ТелоКакСтрока"; // ?
	ФорматТелаДвДанные = "ТелоКакДвДанные";
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "GET");
	ПараметрыВзаимодействия.Вставить("Хост", ХостДляФайла);
	ПараметрыВзаимодействия.Вставить("ПутьНаСервере", ПутьНаСервереДляФайла);
	ПараметрыВзаимодействия.Вставить("ФорматТела", ФорматТелаДвДанные);
	
	СформироватьЗаголовки(ПараметрыВзаимодействия);
	ПараметрыВзаимодействия.Заголовки.Вставить("Authorization", ПараметрыВзаимодействия.ТокенАвторизации);
		
	ЗаписьДанных = Новый ЗаписьДанных(ПутьКФайлуZIP);
	
	Пока Истина Цикл
	
		Если НачальнаяПозиция >= РазмерФайла Тогда
			Прервать;
		ИначеЕсли (НачальнаяПозиция + РазмерПорции) > РазмерФайла Тогда
			ТекущаяПозиция = РазмерФайла;
		Иначе
			ТекущаяПозиция = ТекущаяПозиция + РазмерПорции;
		КонецЕсли;
		
		НачПоз = Формат(НачальнаяПозиция, ФорматЧислаJSON);
		ТекПоз = Формат(ТекущаяПозиция, ФорматЧислаJSON);
		Порция = СтрШаблон("bytes=%1-%2", НачПоз, ТекПоз);
		
		ПараметрыВзаимодействия.Заголовки.Вставить("Range", Порция);
		
		ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
		// Сервер не обработал запрос. Ошибки записаны при получении ответа
		Если ОтветСервера = Неопределено Тогда
			
			ЗаписьДанных.Закрыть();
			ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталогZIP);
			
			Возврат;
			
		КонецЕсли;
		
		ЗаписьДанных.Записать(ОтветСервера);
		
		НачальнаяПозиция = ТекущаяПозиция + 1;
		
	КонецЦикла;
	
	ЗаписьДанных.Закрыть();
	
	РезультатВыполнения.Вставить("ПутьКФайлуZIP", ПутьКФайлуZIP);
	РезультатВыполнения.Вставить("ВременныйКаталогZIP", ВременныйКаталогZIP);
	
КонецПроцедуры // ЗагрузитьФайлОтчетаПоОперациям()

Процедура ПрочитатьФайлОтчетаПоОперациям(ТаблицаОтчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ВременныйКаталогJSON = ФайловаяСистема.СоздатьВременныйКаталог("json");
	
	Попытка
		
		ЧтениеZip = Новый ЧтениеZipФайла(РезультатВыполнения.ПутьКФайлуZIP);
		Элемент = ЧтениеZip.Элементы.Найти("report.json");
		
		Если Элемент = Неопределено Тогда
			
			РезультатВыполнения.Успешно = Ложь;
			ТекстСообщения = НСтр("ru = 'Архив отчета по сверке операций не содержит файл report.json'");
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
			
			ФайловаяСистема.УдалитьВременныйКаталог(РезультатВыполнения.ВременныйКаталогZIP);
			ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталогJSON);
			
			Возврат;
			
		КонецЕсли;
		
		ЧтениеZip.Извлечь(Элемент, ВременныйКаталогJSON);
		ЧтениеZip.Закрыть();
		
	Исключение
		
		ФайловаяСистема.УдалитьВременныйКаталог(РезультатВыполнения.ВременныйКаталогZIP);
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталогJSON);
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось обработать архив отчета по сверке операций. См. журнал регистрации'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОнлайнОплата.ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке, ТекстСообщения);
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		ФайлОтчета = Новый Файл(ВременныйКаталогJSON + "report.json");
		
		Если ФайлОтчета.ПолучитьТолькоЧтение() Тогда
			
			ФайлОтчета.УстановитьТолькоЧтение(Ложь);
			
		КонецЕсли;
		
	Исключение
		
		ФайловаяСистема.УдалитьВременныйКаталог(РезультатВыполнения.ВременныйКаталогZIP);
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталогJSON);
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось обработать файл отчета по сверке операций. См. журнал регистрации'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОнлайнОплата.ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке, ТекстСообщения);
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.ОткрытьФайл(ВременныйКаталогJSON + "report.json");
		ДанныеОтчета = ПрочитатьJSON(ЧтениеОтвета);
		ЧтениеОтвета.Закрыть();
		
	Исключение
		
		ФайловаяСистема.УдалитьВременныйКаталог(РезультатВыполнения.ВременныйКаталогZIP);
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталогJSON);
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось обработать файл отчета по сверке операций. См. журнал регистрации'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОнлайнОплата.ЗаписатьОшибкуВЖурналРегистрации(РезультатВыполнения, ИнфОбОшибке, ТекстСообщения);
		
		Возврат;
		
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйКаталог(РезультатВыполнения.ВременныйКаталогZIP);
	ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталогJSON);
	
	ЗаполнитьТаблицуОтчетаПоОперациям(ТаблицаОтчета, ДанныеОтчета, РезультатВыполнения);
	
КонецПроцедуры // ПрочитатьФайлОтчетаПоОперациям()

Процедура ЗаполнитьТаблицуОтчетаПоОперациям(ТаблицаОтчета, ДанныеОтчета, РезультатВыполнения)
	
	СтрокиОтчета = ДанныеОтчета.operations;
	
	Для каждого СтрокаОтчета Из СтрокиОтчета Цикл
		
		НоваяСтрока = ТаблицаОтчета.Добавить();
		Если СтрокаОтчета.type = "PAYMENT" Тогда
			НоваяСтрока.ТипОперации = "Оплата";
			НоваяСтрока.СуммаОплаты = СтрокаОтчета.amount;
		Иначе
			НоваяСтрока.ТипОперации = "Возврат";
			НоваяСтрока.СуммаВозврата = СтрокаОтчета.amount;
		КонецЕсли;
		НоваяСтрока.ДатаОперации = ПрочитатьДатуJSON(СтрокаОтчета.operationDate, ФорматДатыJSON.ISO);
		НоваяСтрока.ИдентификаторОперации = СтрокаОтчета.id;
		НоваяСтрока.ИдентификаторОперацииОплаты = СтрокаОтчета.qrId;
		НоваяСтрока.СуммаКомиссии = СтрокаОтчета.fee;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьОтветСервераВЖурнал(ЗаголовокКомментария, ОтветСервера, РезультатВыполнения
	, СчетНаОплату = Неопределено)
	
	ТекстОтвета = ОнлайнОплата.ПолучитьТекстОтветаСервера(ОтветСервера);
	Комментарий = ЗаголовокКомментария + Символы.ПС + ТекстОтвета;
	Если РезультатВыполнения.Успешно Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурнала, , СчетНаОплату, Комментарий);
	
КонецПроцедуры

Процедура УбратьСпецСимволы(ЗначениеИд)

	ЗначениеИд = СокрП(ЗначениеИд);
	ЗначениеИд = СтрЗаменить(СокрП(ЗначениеИд), Символы.НПП, "");

КонецПроцедуры

// Обновляет настройки участников СБП.
//
// Параметры:
//  РезультатВыполнения - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
Процедура ЗаписатьНастройкиУчастниковСБП(РезультатВыполнения)
	
	Если РезультатВыполнения.Настройки = Неопределено Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='В ответе сервиса нет списка участников СБП'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	НаборЗаписейНастройкиУчастниковСБП = РегистрыСведений.НастройкиУчастниковСБП.СоздатьНаборЗаписей();
	Для Каждого Настройка Из РезультатВыполнения.Настройки Цикл
		
		Запись = НаборЗаписейНастройкиУчастниковСБП.Добавить();
		Запись.Идентификатор = Настройка.memberId;
		Запись.Наименование = Настройка.memberName;
		Запись.ИНН = Настройка.inn;
		Запись.ПлатежныйАгрегатор = Настройка.paymentAggregator;
		Запись.КассовыеСсылки = Настройка.c2bCashRegisterPaymentSupported;
		Запись.СверкаВзаиморасчетов = Настройка.reconciliationOfSettlementsSupported;
		Запись.ПодключениеКассовойСсылки = Настройка.c2bCashRegisterReservedQrIdSupported;
		Запись.ЗапрещенВыборУчастника = Настройка.b2cDisableChoosingOfRefundDestinationBank;
		
		Если Настройка.authorizationType = "BASIC" Тогда
			Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC;
		ИначеЕсли Настройка.authorizationType = "BEARER" Тогда
			Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
		ИначеЕсли Настройка.authorizationType = "RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT" Тогда
			Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT;
		ИначеЕсли Настройка.authorizationType = "HMAC_SHA256" Тогда
			Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256;
		ИначеЕсли Настройка.authorizationType = "HMAC_SHA1" Тогда
			Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1;
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		НаборЗаписейНастройкиУчастниковСБП.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ИнформацияОбОшибке);
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Не удалось записать список участников СБП. Подробности - в Журнале регистрации событий'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти