// Общий модуль "Поиск замена значений (сервер)"

#Область ПрограммныйИнтерфейс

// Запись справочника с учетом замены значения реквизита.
//
// Параметры:
//  ОбъектДляЗамены - СправочникОбъект - Объект для изменения.
//  ЧтоЗаменить     - ЛюбаяСсылка - Изменяемое значение.
//  НаЧтоЗаменить   - ЛюбаяСсылка - Замена значения реквизита справочника.
//  ОтключитьКонтрольКорректностиПриЗаписи - Булево - Запись справочника в режиме Загрузка.
// 
// Возвращаемое значение:
//  Булево - Истина изменения объекта успешно записаны. Ложь изменения не были записаны.
//
Функция ИзменитьСправочник(ОбъектДляЗамены, ЧтоЗаменить, НаЧтоЗаменить, ОтключитьКонтрольКорректностиПриЗаписи = Ложь) Экспорт
	
	ОбъектМетаданных = ОбъектДляЗамены.Метаданные();

	Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
	
		ЗначениеСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
		Если (НЕ ЗначениеСостава = Неопределено) И ЗначениеСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			Если ОбъектДляЗамены[Реквизит.Имя] = ЧтоЗаменить Тогда
				ОбъектДляЗамены[Реквизит.Имя] = НаЧтоЗаменить;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	
	Если ОбъектМетаданных.Владельцы.Содержит(ЧтоЗаменить.Метаданные()) И ОбъектДляЗамены.Владелец = ЧтоЗаменить Тогда
		ОбъектДляЗамены.Владелец = НаЧтоЗаменить;
	КонецЕсли;
	
	Если ОбъектМетаданных.Иерархический И ОбъектДляЗамены.Родитель = ЧтоЗаменить Тогда
		ОбъектДляЗамены.Родитель = НаЧтоЗаменить;
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(ТипЗнч(ЧтоЗаменить)) И ОбъектДляЗамены[Реквизит.Имя] = ЧтоЗаменить Тогда
			ОбъектДляЗамены[Реквизит.Имя] = НаЧтоЗаменить;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТЧ Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(ТипЗнч(ЧтоЗаменить)) Тогда
				СтрокаТабЧасти = ОбъектДляЗамены[ТЧ.Имя].Найти(ЧтоЗаменить, Реквизит.Имя);
				Пока СтрокаТабЧасти <> Неопределено Цикл
					СтрокаТабЧасти[Реквизит.Имя] = НаЧтоЗаменить;
					СтрокаТабЧасти = ОбъектДляЗамены[ТЧ.Имя].Найти(ЧтоЗаменить, Реквизит.Имя);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Попытка
		
		Если ОтключитьКонтрольКорректностиПриЗаписи Тогда
			ОбъектДляЗамены.ОбменДанными.Загрузка = Истина;
		КонецЕсли;

		ОбъектДляЗамены.Записать();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

// Запись документа с учетом замены значения реквизита.
//
// Параметры:
//  ОбъектДляЗамены  - ДокументОбъект - Объект для изменения.
//  ЧтоЗаменить     - ЛюбаяСсылка - Изменяемое значение.
//  НаЧтоЗаменить   - ЛюбаяСсылка - Замена значения реквизита документа.
//  ОтключитьКонтрольКорректностиПриЗаписи - Булево - Запись документа в режиме Загрузка.
// 
// Возвращаемое значение:
//  Булево - Истина изменения объекта успешно записаны. Ложь изменения не были записаны.
//
Функция ИзменитьДокумент(ОбъектДляЗамены, ЧтоЗаменить, НаЧтоЗаменить, ОтключитьКонтрольКорректностиПриЗаписи = Ложь) Экспорт
	
	Результат = Истина;
	
	ОбъектМетаданных = ОбъектДляЗамены.Метаданные();
	
	// общие реквизиты
	Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
	
		ЗначениеСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
		Если (НЕ ЗначениеСостава = Неопределено) И ЗначениеСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			Если ОбъектДляЗамены[Реквизит.Имя] = ЧтоЗаменить Тогда
				ОбъектДляЗамены[Реквизит.Имя] = НаЧтоЗаменить;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(ТипЗнч(ЧтоЗаменить)) И ОбъектДляЗамены[Реквизит.Имя] = ЧтоЗаменить Тогда
			ОбъектДляЗамены[Реквизит.Имя] = НаЧтоЗаменить;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТЧ Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(ТипЗнч(ЧтоЗаменить)) Тогда
				СтрокаТабЧасти = ОбъектДляЗамены[ТЧ.Имя].Найти(ЧтоЗаменить, Реквизит.Имя);
				Пока СтрокаТабЧасти <> Неопределено Цикл
					СтрокаТабЧасти[Реквизит.Имя] = НаЧтоЗаменить;
					СтрокаТабЧасти = ОбъектДляЗамены[ТЧ.Имя].Найти(ЧтоЗаменить, Реквизит.Имя);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ОбъектДляЗамены.Проведен И НЕ ОтключитьКонтрольКорректностиПриЗаписи Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Попытка
		Если ОтключитьКонтрольКорректностиПриЗаписи Тогда
			ОбъектДляЗамены.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		ОбъектДляЗамены.Записать(РежимЗаписи);
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	
	Если Результат И ОтключитьКонтрольКорректностиПриЗаписи Тогда
		Для Каждого НаборЗаписей Из ОбъектДляЗамены.Движения Цикл
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоллекцияКолонок = НаборЗаписей.ВыгрузитьКолонки().Колонки;
			
			Для Каждого ТекущаяЗапись Из НаборЗаписей Цикл
				Для Каждого Колонка Из КоллекцияКолонок Цикл
					Если Колонка.Имя <> "МоментВремени" И ТекущаяЗапись[Колонка.Имя] = ЧтоЗаменить Тогда
						ТекущаяЗапись[Колонка.Имя] = НаЧтоЗаменить;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			НаборЗаписей.Записывать = ИСТИНА;
			НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
			
		КонецЦикла;
		
		ОбъектДляЗамены.Движения.Записать();
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Запись записи регистра сведений с заменой значения.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - Объект метаданных регистра сведений.
//  КлючЗаписи       - РегистрСведенийКлючЗаписи - Ключ записи изменения.
//  ЧтоЗаменить      - ЛюбаяСсылка - Значение, которое необходимо изменить.
//  НаЧтоЗаменить    - ЛюбаяСсылка - Значение, на которое изменяется.
// 
// Возвращаемое значение:
//  Булево - Успешная запись записи мс измененым значением.
//
Функция ИзменитьРегистрСведений(ОбъектМетаданных, КлючЗаписи, ЧтоЗаменить, НаЧтоЗаменить) Экспорт
	
	// общие реквизиты
	
	СтруктураИзмерений = Новый Структура;
	НаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		НаборЗаписей.Отбор[Измерение.Имя].Установить(КлючЗаписи[Измерение.Имя]);
		СтруктураИзмерений.Вставить(Измерение.Имя);
	КонецЦикла;
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		НаборЗаписей.Отбор["Период"].Установить(КлючЗаписи.Период);
	КонецЕсли;
	НаборЗаписей.Прочитать();
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	НаборЗаписей.Очистить();
	
	Попытка
		
		НаборЗаписей.Записать();
		
		Для Каждого Колонка Из ТаблицаНабора.Колонки Цикл
			Если ТаблицаНабора[0][Колонка.Имя] = ЧтоЗаменить Тогда
				ТаблицаНабора[0][Колонка.Имя] = НаЧтоЗаменить;
				Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
					НаборЗаписей.Отбор[Колонка.Имя].Установить(НаЧтоЗаменить);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаНабора);
		
		НаборЗаписей.Записать();
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Изменение значение константы.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - Объект метаданных константы.
//  НаЧтоЗаменить    - ЛюбаяСсылка      - Новое значение константы.
// 
// Возвращаемое значение:
//  Булево - Успешное завершения установки нового значения константы.
//
Функция ИзменитьКонстанту(ОбъектМетаданных, НаЧтоЗаменить) Экспорт
	Константы[ОбъектМетаданных.Имя].Установить(НаЧтоЗаменить);
	Возврат Истина;
КонецФункции

// Запись объекта с учетом замены значения реквизита.
//
// Параметры:
//  ОбъектДляЗамены - ПланВидовХарактеристикОбъект, ПланСчетовОбъект, ПланВидовРасчетаОбъект, ЗадачаОбъект,
//                    БизнесПроцессОбъект - Объект для изменения.
//  ЧтоЗаменить     - ЛюбаяСсылка - Изменяемое значение.
//  НаЧтоЗаменить   - ЛюбаяСсылка - Замена значения реквизита объекта.
//  ОтключитьКонтрольКорректностиПриЗаписи - Булево - Запись объекта в режиме Загрузка.
// 
// Возвращаемое значение:
//  Булево - Истина изменения объекта успешно записаны. Ложь изменения не были записаны.
//
Функция ИзменитьДругиеОбъекты(ОбъектДляЗамены, ЧтоЗаменить, НаЧтоЗаменить, ОтключитьКонтрольКорректностиПриЗаписи = Ложь) Экспорт
	
	ОбъектМетаданных = ОбъектДляЗамены.Метаданные();

	Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
	
		ЗначениеСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
		Если (НЕ ЗначениеСостава = Неопределено) И ЗначениеСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			Если ОбъектДляЗамены[Реквизит.Имя] = ЧтоЗаменить Тогда
				ОбъектДляЗамены[Реквизит.Имя] = НаЧтоЗаменить;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(ТипЗнч(ЧтоЗаменить)) И ОбъектДляЗамены[Реквизит.Имя] = ЧтоЗаменить Тогда
			ОбъектДляЗамены[Реквизит.Имя] = НаЧтоЗаменить;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТЧ Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(ТипЗнч(ЧтоЗаменить)) Тогда
				СтрокаТабЧасти = ОбъектДляЗамены[ТЧ.Имя].Найти(ЧтоЗаменить, Реквизит.Имя);
				Пока СтрокаТабЧасти <> Неопределено Цикл
					СтрокаТабЧасти[Реквизит.Имя] = НаЧтоЗаменить;
					СтрокаТабЧасти = ОбъектДляЗамены[ТЧ.Имя].Найти(ЧтоЗаменить, Реквизит.Имя);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Для Каждого РеквизитАдресации Из ОбъектДляЗамены.Метаданные().РеквизитыАдресации Цикл
			Если РеквизитАдресации.Тип.СодержитТип(ТипЗнч(ЧтоЗаменить)) И ОбъектДляЗамены[РеквизитАдресации.Имя] = ЧтоЗаменить Тогда
				ОбъектДляЗамены[РеквизитАдресации.Имя] = НаЧтоЗаменить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		
		Если ОтключитьКонтрольКорректностиПриЗаписи Тогда
			ОбъектДляЗамены.ОбменДанными.Загрузка = Истина;
		КонецЕсли;

		ОбъектДляЗамены.Записать();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Выполнение группового изменения объектов.
//
Процедура ГрупповоеИзменениеОбъектов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыполнениеОтложенныхЗаменЗначений);
	
	НаборЗаписей = РегистрыСведений.ОбъектыДляЗамены.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Результат = Истина;
	Для Каждого Элемент Из НаборЗаписей Цикл
		ЧтоЗаменить = ОбщегоНазначения.ЗначениеИзСтрокиXML(Элемент.ИдентификаторЗаменяемого);
		НаЧтоЗаменить = ОбщегоНазначения.ЗначениеИзСтрокиXML(Элемент.ИдентификаторЗаменителя);
		
		МассивПоиска=Новый Массив(1);
		МассивПоиска[0]=ЧтоЗаменить;
		ТаблицаСсылок = НайтиПоСсылкам(МассивПоиска);
		
		Для Каждого ТекСсылка Из ТаблицаСсылок Цикл
			ОбъектМетаданных = ТекСсылка.Метаданные;
			
			Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
				Результат = ИзменитьДокумент(ТекСсылка.Данные.ПолучитьОбъект(), ЧтоЗаменить, НаЧтоЗаменить) И Результат;
				
			ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
				Результат = ИзменитьСправочник(ТекСсылка.Данные.ПолучитьОбъект(), ЧтоЗаменить, НаЧтоЗаменить) И Результат;
				
			ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
				Результат = ИзменитьКонстанту(ОбъектМетаданных, НаЧтоЗаменить) И Результат;
				
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
				ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
				ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
				ИЛИ Метаданные.Задачи.Содержит(ОбъектМетаданных)
				ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
				Результат = ИзменитьДругиеОбъекты(ТекСсылка.Данные.ПолучитьОбъект(), ЧтоЗаменить,НаЧтоЗаменить) И Результат;
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
				Результат = ИзменитьРегистрСведений(ОбъектМетаданных, ТекСсылка.Данные, ЧтоЗаменить, НаЧтоЗаменить) И Результат;
			КонецЕсли;
		КонецЦикла;
		Если Результат Тогда
			НаборЗаписейДляУдаления = РегистрыСведений.ОбъектыДляЗамены.СоздатьНаборЗаписей();
			НаборЗаписейДляУдаления.Отбор.ИдентификаторЗаменяемого.Установить(Элемент.ИдентификаторЗаменяемого);
			НаборЗаписейДляУдаления.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти