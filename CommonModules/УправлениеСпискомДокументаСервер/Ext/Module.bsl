// Общий модуль "Управление списком документа (сервер)"

#Область ПрограммныйИнтерфейс

// Устарела. Разбита на группу методов в модуле см. РаботаСФормой.
// Общий обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Параметры            - Структура - Содержит коллекцию параметров формы.
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриСозданииНаСервере(Форма, Параметры, Отказ = Ложь, СтандартнаяОбработка = Истина, Объект = Неопределено) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат Ложь;
	
	// Произведем инициализацию служебных реквизитов формы
	ИнициализироватьСлужебныеРеквизиты(Форма);
	
	// Установим параметры для функционально опции доступности элементов по ключу
	УстанавливаемыеПараметры = Новый Структура;
	УстанавливаемыеПараметры.Вставить("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования);
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(УстанавливаемыеПараметры);
	
	// Произведем установку режима множественного выделения строк в списке
	Форма.Элементы.Список.РежимВыделения = РежимВыделенияТаблицы.Множественный;
	
	// Настроим состав и параметры отображения командной панели формы
	ИнициализироватьКомандыПанелиДействий(Форма, Объект);
	
	// Получим менеджер текущего объекта и описание его метаданных
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Форма.ПолноеИмяОбъекта);
	МенеджерОбъекта  = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ПолноеИмяОбъекта);
	
	// Произвести скрытие колонки "Операция" если у документ использует только одну хозяйственную операцию.
	ПолеФормыХозОперация = Форма.Элементы.Список.ПодчиненныеЭлементы.Найти("ХозОперация");
	
	// Проверим, имеет ли смысл выполнять дальнейшие операции
	Если (НЕ ПолеФормыХозОперация=Неопределено) И ПолеФормыХозОперация.Видимость Тогда
		
		// Спрячем колонку хоз.операции для документов у которых она одна
		Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			
			// Получим список доступных хозяйственных операций для документов текущего типа
			СписокХозОпераций = Справочники.ХозОперации.ПолучитьВозможныеХозОперации(МенеджерОбъекта);
			
			// Установим видимость колонки "Операция"
			ПолеФормыХозОперация.Видимость = (СписокХозОпераций.Количество() > 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим режим выбора поля списка в соответствии с режимом открытия формы
	Форма.Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	// Для режима выбора, произведем настройку элементов управления формы
	Если Форма.Элементы.Список.РежимВыбора Тогда
		
		// Произведем настройку основных параметров формы
		Форма.КлючСохраненияПоложенияОкна = Форма.КлючОбъекта;
		Форма.КлючНазначенияИспользования = Форма.КлючОбъекта;
		Форма.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		// При выборе не нужно сохранять и загружать настройки пользователя, они будут только мешать.
		Форма.Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
		
	КонецЕсли;
	
	// Произведем настройку основного динамического списка формы
	ЗащищенныеФункцииСервер.НастроитьОсновнойДинамическийСписокФормы(Форма);
	
	// Производим инициализацию элементов расширенной информации
	РасширеннаяИнформацияВызовСервера.ПриСозданииНаСервере(Форма);
	
	// Произведем установку формата вывода итоговой суммы документа в соответствии с параметрами системы.
	Если НЕ Форма.Элементы.Найти("СуммаДокумента") = Неопределено Тогда
		Форма.Элементы.СуммаДокумента.Формат = Константы.ФорматВыводаСуммы.Получить();
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПриСозданииНаСервере()

// Устарела. Нужно переносить в объект. Будет удален.
//  Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  Форма             - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяСобытия        - Строка           - Имя, идентифицирующее событие.
//  ПараметрыДействия - Структура        - Набор параметров, использующихся при выполнения операции.
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	// TODO: Нужно реализовать через интерфейсы для более удобного расширения
	Возврат Ложь; 
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Обработаем в зависимости от переданных параметров
	Если ПараметрыДействия.Свойство("ШтрихКод") Тогда
		
		Если ПараметрыДействия.ШтрихКод = "" Тогда
			Возврат Истина;
		КонецЕсли;
		
		// поиск объектов по штрихкоду
		ОбъектыПоШтрихкоду = ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(ПараметрыДействия.ШтрихКод,, Истина);
		ПараметрыДействия.Вставить("ОбъектыПоШтрихкоду", ОбъектыПоШтрихкоду);
		ШтрихкодированиеВызовСервера.ОбработкаОбъектовПоШтрихкоду(ПараметрыДействия);
		
	ИначеЕсли ПараметрыДействия.Свойство("КодКарты") Тогда
		
		РезультатПоиска = ШтрихкодированиеВызовСервера.ПолучитьКарточкуПоКоду(ПараметрыДействия.КодКарты);
		
		Если РезультатПоиска = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не найдена карточка по считанному коду: %1'"), ПараметрыДействия.КодКарты));
			Возврат Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатПоиска.Объект) Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(РезультатПоиска.Объект));
			ПараметрыДействия.Вставить("ИмяФормыСписка", ОбъектМетаданных.ПолноеИмя() + ".ФормаСписка");
			ПараметрыДействия.Вставить("НайтиОбъект",    РезультатПоиска.Объект);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПослеУтвержденияДокументов" Тогда
		СписокПриАктивизацииСтроки(Форма, Форма.Элементы.Список);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаОповещения()

// Устарела. Будет удален.
//  Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраняемых реквизитов и настроек формы.
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Форма, Настройки) Экспорт
	
	// TODO: Нужно реализовать через интерфейсы для более удобного расширения
	Возврат;
	
	// Производим сохранение параметров отображения поля расширенной информации
	РасширеннаяИнформацияВызовСервера.ПриСохраненииДанныхВНастройкахНаСервере(Форма, Настройки);
	
	// сохраним настройки поля связей документов
	Если Не Форма.Элементы.Найти("Связи") = Неопределено Тогда
		// Производим сохранение параметров отображения поля связей документов
		Настройки.Вставить("СвязиВидимость", Форма.Элементы.Связи.Видимость);
	КонецЕсли;
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Устарела. Будет удален.
//  Общий обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраненных реквизитов и настроек формы.
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	// TODO: Нужно реализовать через интерфейсы для более удобного расширения
	Возврат;
	
	// Восстанавливаем параметры отображения поля расширенной информации
	РасширеннаяИнформацияВызовСервера.ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки);
	
	// загрузим настройки поля связей документов
	Если НЕ Форма.Элементы.Найти("Связи") = Неопределено И НЕ Настройки.Получить("СвязиВидимость") = Неопределено Тогда
		// Получим значение сохраненной настройки
		ПоказатьСвязи = (НЕ Настройки.Получить("СвязиВидимость") = Ложь);
		
		// Произведем настройку параметров отображения поля связей документов
		Форма.Элементы.Связи        .Видимость = ПоказатьСвязи;
		Форма.Элементы.ПоказатьСвязи.Пометка   = ПоказатьСвязи;
	КонецЕсли;
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

// Общий обработчик события возникающего при активизации строки списка.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
Процедура СписокПриАктивизацииСтроки(Форма, Элемент) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат;
	
	// Производим подключение обработчика обновления содержимого поля расширенной информации.
	РасширеннаяИнформацияВызовСервера.СписокПриАктивизацииСтроки(Форма, Элемент.ТекущаяСтрока);
	
	Если НЕ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") И ЕстьРеквизит(Элемент.ТекущаяСтрока, "ДатаФР") Тогда
		
		Форма.Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры // СписокПриАктивизацииСтроки()

// Устарела. Будет удален.
// Общий обработчик события возникающего на сервере при сохранении пользовательских настроек формы списка.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки. 
//
Процедура СписокПриСохраненииПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // СписокПриСохраненииПользовательскихНастроекНаСервере()

// Устарела. Будет удален.
// Общий обработчик события возникающего на сервере при загрузке пользовательских настроек формы списка.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки. 
//
Процедура СписокПриЗагрузкеПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // СписокПриЗагрузкеПользовательскихНастроекНаСервере()

// Устарела. Будет удален.
// Общий обработчик события сохранения настроек формы списка документов.
//
// Параметры:
//   Форма     - УправляемаяФорма - Форма переданного списка документов.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(Форма, СтандартнаяОбработка = Истина) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПриОбновленииСоставаПользовательскихНастроекНаСервере()

// Устарела. Будет удален.
// Общий обработчик события вызывается на сервере после получения данных динамическим списком.
//
// Параметры:
//  ИмяЭлемента - Строка - Содержит имя таблицы формы, из которой вызван обработчик события.
//  Настройки   - НастройкиКомпоновкиДанных - Содержит копию полных настроек динамического списка.
//  Строки      - СтрокиДинамическогоСписка - Данные и оформление всех строк, получаемых в списке.
//
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // СписокПриПолученииДанныхНаСервере()

// Общий обработчик события выбора одного из пунктов меню доступных хоз. операций
// 
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  КомандаИмя        - Строка                    - Имя команды, в которой возникло данное событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаКомандыФормы(Форма, КомандаИмя, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЛЕВ(КомандаИмя, 40) = "КомандаДополнительнойОбработкиЗаполнения" Тогда
		
		РезультатВыполнения = Неопределено;
		ПараметрыКоманды = ДополнительныеОтчетыИОбработкиАльфаАвто.ОписаниеКомандыОбработки(КомандаИмя,
							Форма.Команды.Найти("АдресКомандДополнительныхОбработокВоВременномХранилище").Действие);
		РезультатВыполнения = ДополнительныеОтчетыИОбработки.ВыполнитьКоманду(ПараметрыКоманды); 
		Если НЕ РезультатВыполнения = Неопределено Тогда
			
			Для каждого Элемент Из РезультатВыполнения Цикл
				ПараметрыДействия.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли КомандаИмя="Провести" Тогда
		
		Попытка
			
			// Получаем объект документа
			ДокументОбъект = Форма.Элементы.Список.ТекущаяСтрока.ПолучитьОбъект();
			
			// Установим пометку на удаление
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		Форма.Элементы.Список.Обновить();
		
	ИначеЕсли КомандаИмя = "ОтменаПроведения" Тогда
		
		Попытка
			
			// Получаем объект документа
			ДокументОбъект = Форма.Элементы.Список.ТекущаяСтрока.ПолучитьОбъект();
			
			// Установим пометку на удаление
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		Форма.Элементы.Список.Обновить();
		
	ИначеЕсли Лев(КомандаИмя, 21) = "УтверждениеДокументов" Тогда
		
		Если ТипЗнч(ПараметрыДействия) <> Тип("Структура") Тогда
			
			ПараметрыДействия = Новый Структура();
			
		КонецЕсли;
		
		ПараметрыДействия.Вставить("ОбновлятьКартинку", Ложь);
		УтверждениеДокументовСервер
		.ОбработкаКомандыФормы(Форма, КомандаИмя, Форма.Элементы.Список.ТекущаяСтрока, ПараметрыДействия);
		
	ИначеЕсли ПараметрыДействия.Свойство("КомандаПечатиИдентификатор") 
		И ПараметрыДействия.КомандаПечатиИдентификатор = "ПечатьРеестра" Тогда
		
		Настройки = Форма.Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
		
		// Проверка вывода "Дата" и "Время" в списке.
		МассивДат = Новый Массив;
		НастройкиВыбор = Настройки.Структура[0].Выбор.Элементы;
		Для Каждого Строка Из НастройкиВыбор Цикл
			Если Строка.Поле = Новый ПолеКомпоновкиДанных("Дата") Тогда
				МассивДат.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивДат.Количество() > 1 Тогда
			НастройкиВыбор.Удалить(МассивДат[1]);
			
			МассивОформленияУдалить = Новый Массив;
			Для Каждого Строка Из Настройки.УсловноеОформление.Элементы Цикл
				Если Строка.Поля.Элементы.Количество() = 1
					И Строка.Поля.Элементы[0].Поле = Новый ПолеКомпоновкиДанных("Дата") Тогда
					МассивОформленияУдалить.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			// Выведем в одной колонке дату и время
			ОформлениеДаты = МассивОформленияУдалить[0];
			ОформлениеДаты.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=DT");
			
			МассивОформленияУдалить.Удалить(0);
			
			Для Каждого Строка Из МассивОформленияУдалить Цикл
				Настройки.УсловноеОформление.Элементы.Удалить(Строка);
			КонецЦикла;
			
		КонецЕсли;
		
		СхемаКомпоновки = ПоместитьВоВременноеХранилище(
			Форма.Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных(),
			Форма.УникальныйИдентификатор
		);
		ПараметрыДействия.Вставить("Схема",     СхемаКомпоновки);
		ПараметрыДействия.Вставить("Настройки", Настройки);
		ПараметрыДействия.Вставить("Заголовок", " " + Форма.Заголовок);
		ПараметрыДействия.Вставить("ПечатьРеестра");
			
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаКомандыФормы()

// Общий обработчик события возникающего при оповещении формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  Форма                   - УправляемаяФорма - Форма, в которой возникло событие.
//  РезультатОповещения     - Произвольный     - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный     - Значение, которое было указано при создании описания оповещения.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Обработаем в зависимости от переданного параметра события
	УправлениеДиалогомСервер.ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаРезультатаОповещения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедуры производит инициализацию служебных реквизитов формы списка.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которую производиться добавление реквизитов.
//
Процедура ИнициализироватьСлужебныеРеквизиты(Форма)
	
	// Составим перечень добавляемых в форму реквизитов
	СлужебныеРеквизиты = Новый Структура();
	СлужебныеРеквизиты.Вставить(
		"ПолноеИмяОбъекта",
		УправлениеДиалогомСервер.ПолучитьМетаданныеОбъектаФормы(Форма).ПолноеИмя()
	);
	СлужебныеРеквизиты.Вставить(
		"КлючОбъекта",
		СлужебныеРеквизиты.ПолноеИмяОбъекта
			+ ?(ПолучитьЗначениеПараметраСтруктуры(Форма.Параметры, "РежимВыбора", Ложь), ".РежимВыбора", "")
	);
	СлужебныеРеквизиты.Вставить("ЭтоЖурналДокументов", ЛЕВ(Форма.Список.ОсновнаяТаблица, 16) = "ЖурналДокументов");
	СлужебныеРеквизиты.Вставить(
		"ИмяДополнительнойФормы",
		?(СлужебныеРеквизиты.ЭтоЖурналДокументов, "", УправлениеДиалогомВызовСервера.ПолучитьИмяДополнительнойФормыОбъекта(СлужебныеРеквизиты.ПолноеИмяОбъекта)));
	
	// Корректировочный реквизит формы, используется для пропуска лишних вызовов событий активизации строки.
	СлужебныеРеквизиты.Вставить("ТекущийЭлементСписка",   Неопределено);
	
	// Признак разрешения пользователю изменять состояние пометки на удаление у объектов.
	СлужебныеРеквизиты.Вставить(
		"РазрешитьУправлениеПометкойУдаления",
		ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.НайтиПоПолномуИмени(СлужебныеРеквизиты.ПолноеИмяОбъекта))
	);
	
	// Добавлено получение параметров для подключаемого оборудования 
	СлужебныеРеквизиты.Вставить(
		"ИспользоватьПодключаемоеОборудование",
		МенеджерОборудованияВызовСервераПереопределяемый.ИспользоватьПодключаемоеОборудование()
	);
	СлужебныеРеквизиты.Вставить("ПоддерживаемыеТипыПодключаемогоОборудования", Неопределено);
	
	// Производим создание дополнительных реквизитов формы
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(Форма, СлужебныеРеквизиты);
	
КонецПроцедуры // ИнициализироватьСлужебныеРеквизиты()

// Процедуры производит инициализацию команд в форме списка.
//
// Параметры:
//  Форма	- УправляемаяФорма		- Форма, в которую производиться добавление команды.
//  Объект	- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
Процедура ИнициализироватьКомандыПанелиДействий(Форма, Объект)
	
	// Определим в какую панель формы необходимо помещать новые кнопки
	ИмяКоманднойПанелиФормы = ?(
		Форма.Элементы.Найти("ОсновныеДействия") = Неопределено,
		"ФормаКоманднаяПанель",
		"ОсновныеДействия"
	);
	
	// Произведем добавление панели для размещения дополнительных операций с формой
	НазначитьДополнительныеДействия = Форма.Элементы.Найти("ДополнительныеДействия") <> Неопределено;
	
	// Получим описание метаданных текущего объекта
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Форма.ПолноеИмяОбъекта);
	
	// Инициализируем элементы формы связанные с Дополнительными отчетами и обработками.
	ДополнительныеОтчетыИОбработкиАльфаАвто.ПриСозданииНаСервере(Форма, "ФормаСписка");
	
	// Создаем подменю печати
	ПодменюПечати = ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(Форма, "ПодменюПечать", ИмяКоманднойПанелиФормы,,НСтр("ru = 'Печать'"), БиблиотекаКартинок.ПодменюПечать,НСтр("ru = 'Подменю печати'"),, ОтображениеКнопки.Картинка);
	
	// Добавим команды печати печати
	УправлениеПечатьюАльфаАвто.ПриСозданииНаСервере(Форма, ПодменюПечати);
	
	// Добавим команды печати комплектов
	УправлениеПечатьюПлатформа.ДобавитьКомандыПечатиКомплекта(Форма,ПодменюПечати);
	
	// Добавим команды утверждения документов.
	УтверждениеДокументовСервер.ПриСозданииНаСервере(Форма, Объект);
	
	
	Если НЕ Форма.Элементы.Найти("РасширеннаяИнформация") = Неопределено Тогда
		
		ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		
		ПараметрыНовойКоманды.ИмяКоманды            = "ПоказатьРасширеннуюИнформацию";
		ПараметрыНовойКоманды.ИмяГруппы             = ИмяКоманднойПанелиФормы;
		ПараметрыНовойКоманды.Картинка              = БиблиотекаКартинок.РасширеннаяИнформация;
		ПараметрыНовойКоманды.Заголовок             = НСтр("ru = 'Расширенная информация об операции'");
		ПараметрыНовойКоманды.Подсказка             = НСтр("ru = 'Показать/скрыть поле расширенной информации'");
		ПараметрыНовойКоманды.ТолькоВоВсехДействиях = Ложь;
		
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
		Форма.Элементы.ПоказатьРасширеннуюИнформацию.Пометка = Форма.Элементы.РасширеннаяИнформация.Видимость;
	КонецЕсли;
	
	Если НЕ Форма.Элементы.Найти("Связи") = Неопределено Тогда
		
		ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		
		ПараметрыНовойКоманды.ИмяКоманды            = "ПоказатьСвязи";
		ПараметрыНовойКоманды.ИмяГруппы             = ИмяКоманднойПанелиФормы;
		ПараметрыНовойКоманды.Картинка              = БиблиотекаКартинок.Связь;
		ПараметрыНовойКоманды.Заголовок             = НСтр("ru = 'Связи документов'");
		ПараметрыНовойКоманды.Подсказка             = НСтр("ru = 'Показать/скрыть поле связей документов'");
		ПараметрыНовойКоманды.ТолькоВоВсехДействиях = Ложь;
		ПараметрыНовойКоманды.Отображение           = ОтображениеКнопки.КартинкаИТекст;
		
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
		Форма.Элементы.ПоказатьСвязи.Пометка = Форма.Элементы.Связи.Видимость;
	КонецЕсли;
	
	// Написать письмо в тех поддержку
	Если ПравоДоступа("Использование", Метаданные.Обработки.Поддержка) Тогда
		
		ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		
		ПараметрыНовойКоманды.ИмяКоманды            = "ПисьмоВТехПоддержку";
		ПараметрыНовойКоманды.ИмяГруппы             = "ФормаМенюДополнительныхФункций";
		ПараметрыНовойКоманды.Заголовок             = НСтр("ru = 'Написать письмо в поддержку'");
		ПараметрыНовойКоманды.Подсказка             = НСтр("ru = 'Написать письмо в поддержку'");
		ПараметрыНовойКоманды.ТолькоВоВсехДействиях = Ложь;
		
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
	КонецЕсли;
	
	ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
	
	ПараметрыНовойКоманды.ИмяКоманды            = "ПодчиненныеДокументы";
	ПараметрыНовойКоманды.ИмяГруппы             = ИмяКоманднойПанелиФормы;
	ПараметрыНовойКоманды.Картинка              = БиблиотекаКартинок.ПодчиненныеДокументы;
	ПараметрыНовойКоманды.Заголовок             = НСтр("ru = 'Подчиненные документы'");
	ПараметрыНовойКоманды.Подсказка             = НСтр("ru = 'Просмотр структуры подчиненности документов'");
	ПараметрыНовойКоманды.ТолькоВоВсехДействиях = Ложь;
	
	// Просмотр структуры подчиненности объекта
	ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
	
	// Подсистема "ОбменСКонтрагентами".
	Если НЕ Форма.Элементы.Найти("КомандыЭДО") = Неопределено Тогда
		Форма.Элементы.КомандыЭДО.Подсказка = НСтр("ru = 'Электронный документооборот'");
		ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
		ПараметрыПриСозданииНаСервере.Форма = Форма;
		ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Форма.Элементы.КомандыЭДО;
		ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	КонецЕсли;
	// Конец подсистема "ОбменСКонтрагентами".

	// Производим инициализацию дополнительных команд формы списка
	Если НазначитьДополнительныеДействия Тогда
		
		// Если объект не содержит фискальные реквизиты и его основании можно ввести Чек на оплату,
		// то добавим команду оплаты.
		Если (НЕ Форма.ЭтоЖурналДокументов) И (НЕ ЕстьРеквизит(ОбъектМетаданных, "НомерЧека")) И Метаданные.Документы.ЧекНаОплату.ВводитсяНаОсновании.Содержит(ОбъектМетаданных) И ПравоДоступа("Добавление", Метаданные.Документы.ЧекНаОплату) И (ПолучитьФункциональнуюОпцию("ИспользоватьРозничнаяТорговля") ИЛИ ПолучитьФункциональнуюОпцию("ИспользованиеПодключаемогоОборудования")) Тогда
			
			ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			
			ПараметрыНовойКоманды.ИмяКоманды            = "ОплатитьЧерезКассу";
			ПараметрыНовойКоманды.ИмяГруппы             = "ДополнительныеДействия";
			ПараметрыНовойКоманды.Картинка              = БиблиотекаКартинок.ОплатитьЧерезКассу;
			ПараметрыНовойКоманды.Заголовок             = НСтр("ru = 'Оплатить'");
			ПараметрыНовойКоманды.Подсказка             = НСтр("ru = 'Оплатить через кассу'");
			ПараметрыНовойКоманды.ТолькоВоВсехДействиях = Ложь;
			ПараметрыНовойКоманды.Отображение           = ОтображениеКнопки.КартинкаИТекст;
			
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
		КонецЕсли;
		
		// Формируем секцию команд группировки списка
		Если НЕ ОбщегоНазначения.ЭтоВебКлиент() Тогда
			
			ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(Форма, "ГруппировкаСписка", "ДополнительныеДействия", ЛОЖЬ, НСтр("ru = 'Группировка списка'"));
			
			ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			
			ПараметрыНовойКоманды.ИмяКоманды = "ГруппироватьПоКолонке";
			ПараметрыНовойКоманды.ИмяГруппы  = "ГруппировкаСписка";
			ПараметрыНовойКоманды.Картинка   = БиблиотекаКартинок.ДинамическийСписокУстановитьГруппировку;
			ПараметрыНовойКоманды.Заголовок  = НСтр("ru = 'Группировать по значениям колонки'");
			ПараметрыНовойКоманды.Подсказка  = НСтр("ru = 'Произвести группировку элементов списка по значениям текущей колонки'");
			
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
			
			ПараметрыНовойКоманды.ИмяКоманды = "ОтменаГруппировки";
			ПараметрыНовойКоманды.ИмяГруппы  = "ГруппировкаСписка";
			ПараметрыНовойКоманды.Картинка   = БиблиотекаКартинок.ДинамическийСписокОтменитьГруппировку;
			ПараметрыНовойКоманды.Заголовок  = НСтр("ru = 'Отменить группировку строк'");
			ПараметрыНовойКоманды.Подсказка  = НСтр("ru = 'Отменить все группировки списка'");
			
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
			
			ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(Форма, "ГруппировкаСпискаМеню", "СписокКонтекстноеМеню", ЛОЖЬ, НСтр("ru = 'Группировка списка'"));
			
			ПараметрыНовойКоманды.ИмяКоманды = "ГруппироватьПоКолонке";
			ПараметрыНовойКоманды.ИмяГруппы  = "ГруппировкаСпискаМеню";
			ПараметрыНовойКоманды.Картинка   = БиблиотекаКартинок.ДинамическийСписокУстановитьГруппировку;
			ПараметрыНовойКоманды.Заголовок  = НСтр("ru = 'Группировать по значениям колонки'");
			ПараметрыНовойКоманды.Подсказка  = НСтр("ru = 'Произвести группировку элементов списка по значениям текущей колонки'");
			ПараметрыНовойКоманды.Суффикс    = "Меню";
			
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
			
			ПараметрыНовойКоманды.ИмяКоманды = "ОтменаГруппировки";
			ПараметрыНовойКоманды.ИмяГруппы  = "ГруппировкаСпискаМеню";
			ПараметрыНовойКоманды.Картинка   = БиблиотекаКартинок.ДинамическийСписокОтменитьГруппировку;
			ПараметрыНовойКоманды.Заголовок  = НСтр("ru = 'Отменить группировку строк'");
			ПараметрыНовойКоманды.Подсказка  = НСтр("ru = 'Отменить все группировки списка'");
			ПараметрыНовойКоманды.Суффикс    = "Меню";
			
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
			
		КонецЕсли;
		
		// Добавляем команду ИзменитьВыделенные только если пользователь работает в "супер" режиме.
		Если ПраваИНастройкиПользователя.Значение("ПроверкаЗаполненияСправочниковИДокументов")
			И Форма.Элементы.Список.РежимВыделения = РежимВыделенияТаблицы.Множественный Тогда
			
			ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			
			ПараметрыНовойКоманды.ИмяКоманды            = "ИзменитьВыделенные";
			ПараметрыНовойКоманды.ИмяГруппы             = "ДополнительныеДействия";
			ПараметрыНовойКоманды.Картинка              = БиблиотекаКартинок.ДействиеИзменить;
			ПараметрыНовойКоманды.Заголовок             = НСтр("ru = 'Изменить выделенные объекты'");
			ПараметрыНовойКоманды.Подсказка             = НСтр("ru = 'Изменить выделенные объекты'");
			ПараметрыНовойКоманды.ТолькоВоВсехДействиях = Истина;
			
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
			
		КонецЕсли;
		
		ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		
		ПараметрыНовойКоманды.ИмяКоманды      = "ДополнительнаяФорма";
		ПараметрыНовойКоманды.ИмяГруппы       = "ДополнительныеДействия";
		ПараметрыНовойКоманды.Картинка        = БиблиотекаКартинок.РедактироватьВДиалоге;
		ПараметрыНовойКоманды.Заголовок       = НСтр("ru = 'Дополнительная форма'");
		ПараметрыНовойКоманды.Подсказка       = НСтр("ru = 'Открыть дополнительную форму редактирования'");
		ПараметрыНовойКоманды.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.L, Истина);
		
		// Пункт меню для открытия дополнительной формы редактирования объекта
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
		
		ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		
		ПараметрыНовойКоманды.ИмяКоманды      = "ПросмотрДвижений";
		ПараметрыНовойКоманды.ИмяГруппы       = "ДополнительныеДействия";
		ПараметрыНовойКоманды.Картинка        = БиблиотекаКартинок.ПросмотрДвижений;
		ПараметрыНовойКоманды.Заголовок       = НСтр("ru = 'Просмотр движений'");
		ПараметрыНовойКоманды.Подсказка       = НСтр("ru = 'Просмотр движений текущего документа'");
		ПараметрыНовойКоманды.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F2, Истина);
		
		// Формируем секцию дополнительных действий формы
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
		
		ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		
		ПараметрыНовойКоманды.ИмяКоманды      = "ЖурналРегистрации";
		ПараметрыНовойКоманды.ИмяГруппы       = "ДополнительныеДействия";
		ПараметрыНовойКоманды.Картинка        = БиблиотекаКартинок.ЖурналРегистрации;
		ПараметрыНовойКоманды.Заголовок       = НСтр("ru = 'Журнал регистрации'");
		ПараметрыНовойКоманды.Подсказка       = НСтр("ru = 'Журнал регистрации'");
		
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
		
		// Проверим использование дополнительных сведений для данного документа
		Если (НЕ Форма.ЭтоЖурналДокументов) И УправлениеСвойствами.ИспользоватьДопСведения(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ПолноеИмяОбъекта).ПустаяСсылка()) Тогда
			
			ПараметрыНовойКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			
			ПараметрыНовойКоманды.ИмяКоманды      = "ДополнительныеСведения";
			ПараметрыНовойКоманды.ИмяГруппы       = "ДополнительныеДействия";
			ПараметрыНовойКоманды.Картинка        = БиблиотекаКартинок.ДополнительныеСведения;
			ПараметрыНовойКоманды.Заголовок       = НСтр("ru = 'Дополнительные сведения'");
			ПараметрыНовойКоманды.Подсказка       = НСтр("ru = 'Дополнительные сведения'");
			
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ПараметрыНовойКоманды);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьКомандыПанелиДействий()

#КонецОбласти
