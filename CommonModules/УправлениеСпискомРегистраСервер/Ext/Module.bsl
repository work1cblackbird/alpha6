// Общий модуль "Управление списком регистра (сервер)"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОСНОВНЫХ СОБЫТИЙ ФОРМЫ СПИСКА РЕГИСТРА

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Параметры            - Структура - Содержит коллекцию параметров формы.
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриСозданииНаСервере(Форма, Параметры, Отказ = Ложь, СтандартнаяОбработка = Истина) Экспорт
	
	// Произведем инициализацию служебных реквизитов формы
	ИнициализироватьСлужебныеРеквизиты(Форма);
	
	// Настроим состав и параметры отображения командной панели формы
	ИнициализироватьКомандыПанелиДействий(Форма);
	
	// Произведем настройку основного динамического списка формы
	ЗащищенныеФункцииСервер.НастроитьОсновнойДинамическийСписокФормы(Форма);
	
	// Производим обновление отображения заголовка формы
	УстановитьЗаголовокСпискаРегистра(Форма);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПриСозданииНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  Форма				- УправляемаяФорма		- Форма, в которой возникло событие.
//  ИмяСобытия			- Строка				- Имя, идентифицирующее событие.
//  ПараметрыДействия	- Структура				- Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Обработаем в зависимости от 
	Если ПараметрыДействия.Свойство("ШтрихКод") Тогда
		
		Если ПараметрыДействия.ШтрихКод = "" Тогда
			Возврат Истина;
		КонецЕсли;
		
		// поиск объектов по штрихкоду
		ОбъектыПоШтрихкоду = ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(ПараметрыДействия.ШтрихКод, , Истина);
		ПараметрыДействия.Вставить("ОбъектыПоШтрихкоду", ОбъектыПоШтрихкоду);
		ШтрихкодированиеВызовСервера.ОбработкаОбъектовПоШтрихкоду(ПараметрыДействия);
		
	ИначеЕсли ПараметрыДействия.Свойство("КодКарты") Тогда
		
		РезультатПоиска = ШтрихкодированиеВызовСервера.ПолучитьКарточкуПоКоду(ПараметрыДействия.КодКарты);
		
		Если РезультатПоиска = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не найдена карточка по считанному коду: %1'"), ПараметрыДействия.КодКарты));
			Возврат Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатПоиска.Объект) Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(РезультатПоиска.Объект));
			ПараметрыДействия.Вставить("ИмяФормыСписка", ОбъектМетаданных.ПолноеИмя() + ".ФормаСписка");
			ПараметрыДействия.Вставить("НайтиОбъект",    РезультатПоиска.Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаОповещения()

// Устарела. Будет удалена.
// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраняемых реквизитов и настроек формы.
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Форма, Настройки) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраненных реквизитов и настроек формы.
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДИНАМИЧЕСКОГО СПИСКА ФОРМЫ

// Устарела. Будет удалена.
// Общий обработчик события возникающего при активизации строки списка.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
Процедура СписокПриАктивизацииСтроки(Форма, Элемент) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПриАктивизацииСтроки()

// Общий обработчик события возникающего на сервере при сохранении пользовательских настроек формы списка.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки. 
//
Процедура СписокПриСохраненииПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПриСохраненииПользовательскихНастроекНаСервере()

// Общий обработчик события возникающего на сервере при загрузке пользовательских настроек формы списка.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки. 
//
Процедура СписокПриЗагрузкеПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПриЗагрузкеПользовательскихНастроекНаСервере()

// Общий обработчик события сохранения настроек формы списка регистров.
//
// Параметры:
//  Форма					- УправляемаяФорма - форма переданного списка регистров.
//  СтандартнаяОбработка	- Булево - В данный параметр передается признак выполнения системной обработки события.
//
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(Форма, СтандартнаяОбработка = Истина) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПриОбновленииСоставаПользовательскихНастроекНаСервере()

// Общий обработчик события вызывается на сервере после получения данных динамическим списком.
//
// Параметры:
//  ИмяЭлемента - Строка - Содержит имя таблицы формы, из которой вызван обработчик события.
//  Настройки   - НастройкиКомпоновкиДанных - Содержит копию полных настроек динамического списка.
//  Строки      - СтрокиДинамическогоСписка - Данные и оформление всех строк, получаемых в списке.
//
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПриПолученииДанныхНаСервере()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СЛУЖЕБНОГО ПРОГРАММНОГО ИНТЕРФЕЙСА

// Устарела. Будет удалена.
// Общий обработчик события выбора одного из пунктов меню доступных хоз. операций
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  КомандаИмя        - Строка - Имя команды, в которой возникло данное событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ОбработкаКомандыФормы(Форма, КомандаИмя, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЛЕВ(КомандаИмя, 40) = "КомандаДополнительнойОбработкиЗаполнения" Тогда
		
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиАльфаАвто.ВыполнитьНазначаемуюКомандуНаСервере(Форма, КомандаИмя, РезультатВыполнения);
		Если НЕ РезультатВыполнения = Неопределено Тогда
			
			Для каждого Элемент Из РезультатВыполнения Цикл
				ПараметрыДействия.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаКомандыФормы()

// Устарела. Будет удалена.
// Общий обработчик события возникающего при оповещении формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  Форма					- ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  РезультатОповещения		- Произвольный     - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры	- Произвольный     - Значение, которое было указано при создании описания оповещения.
//  Объект					- ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ОбработкаРезультатаОповещения(Форма, РезультатОповещения,
		ДополнительныеПараметры = Неопределено,
		Объект = Неопределено) Экспорт
	
	// Обработаем в зависимости от переданного параметра события
	УправлениеДиалогомСервер.ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры, Объект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаРезультатаОповещения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедуры производит инициализацию служебных реквизитов формы списка.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которую производиться добавление реквизитов.
//
Процедура ИнициализироватьСлужебныеРеквизиты(Форма)
	
	// Составим перечень добавляемых в форму реквизитов
	СлужебныеРеквизиты = Новый Структура();
	СлужебныеРеквизиты.Вставить("ПолноеИмяОбъекта", Форма.Список.ОсновнаяТаблица);
	СлужебныеРеквизиты.Вставить("КлючОбъекта",      Форма.Список.ОсновнаяТаблица + 
		?(ПолучитьЗначениеПараметраСтруктуры(Форма.Параметры, "РежимВыбора", Ложь), ".РежимВыбора", ""));
	
	// Корректировочный реквизит формы, используется для пропуска лишних вызовов событий активизации строки.
	СлужебныеРеквизиты.Вставить("ТекущийЭлементСписка", Неопределено);
	
	// Производим создание дополнительных реквизитов формы
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(Форма, СлужебныеРеквизиты);
	
КонецПроцедуры // ИнициализироватьСлужебныеРеквизиты()

// Процедуры производит инициализацию команд в форме списка.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которую производиться добавление команды.
//
Процедура ИнициализироватьКомандыПанелиДействий(Форма)
	
	 // Определим в какую панель формы необходимо помещать новые кнопки
	ИмяКоманднойПанелиФормы = ?(Форма.Элементы.Найти("ОсновныеДействия")=Неопределено, "ФормаКоманднаяПанель", "ОсновныеДействия");
	
	// Произведем добавление панели для размещения дополнительных операций с формой
	НазначитьДополнительныеДействия = (НЕ Форма.Элементы.Найти("ДополнительныеДействия")=Неопределено);
	
	// Инициализируем элементы формы связанные с Дополнительными отчетами и обработками.
	ДополнительныеОтчетыИОбработкиАльфаАвто.ПриСозданииНаСервере(Форма, "ФормаСписка");
	
	// Создаем подменю печати
	ПодменюПечати = ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(Форма, "ПодменюПечать", ИмяКоманднойПанелиФормы,, "Печать", БиблиотекаКартинок.ПодменюПечать,,, ОтображениеКнопки.Картинка);
	
	// Добавим команды печати печати
	УправлениеПечатьюАльфаАвто.ПриСозданииНаСервере(Форма, ПодменюПечати);
	
	// Производим инициализацию дополнительных команд формы списка
	Если НазначитьДополнительныеДействия Тогда
		
		// Формируем секцию команд группировки списка
		Если НЕ ОбщегоНазначения.ЭтоВебКлиент() Тогда
			
			ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(Форма,
				"ГруппировкаСписка",
				"ДополнительныеДействия",
				Ложь,
				НСтр("ru = 'Группировка списка'")
			);
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ГруппироватьПоКолонке";
			ОписаниеКомандыФормы.ИмяГруппы  = "ГруппировкаСписка";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДинамическийСписокУстановитьГруппировку;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Группировать по значениям колонки'");
			ОписаниеКомандыФормы.Подсказка  = НСтр(
				"ru = 'Произвести группировку элементов списка по значениям текущей колонки'"
			);
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ОтменаГруппировки";
			ОписаниеКомандыФормы.ИмяГруппы  = "ГруппировкаСписка";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДинамическийСписокОтменитьГруппировку;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Отменить группировку строк'");
			ОписаниеКомандыФормы.Подсказка  = НСтр("ru = 'Отменить все группировки списка'");
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
			
			ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(Форма,
				"ГруппировкаСпискаМеню",
				"СписокКонтекстноеМеню",
				Ложь,
				НСтр("ru = 'Группировка списка'")
			);
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ГруппироватьПоКолонке";
			ОписаниеКомандыФормы.ИмяГруппы  = "ГруппировкаСпискаМеню";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДинамическийСписокУстановитьГруппировку;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Группировать по значениям колонки'");
			ОписаниеКомандыФормы.Подсказка  = НСтр(
				"ru = 'Произвести группировку элементов списка по значениям текущей колонки'"
			);
			ОписаниеКомандыФормы.Суффикс    = "Меню";
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ОтменаГруппировки";
			ОписаниеКомандыФормы.ИмяГруппы  = "ГруппировкаСпискаМеню";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДинамическийСписокОтменитьГруппировку;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Отменить группировку строк'");
			ОписаниеКомандыФормы.Подсказка  = НСтр("ru = 'Отменить все группировки списка'");
			ОписаниеКомандыФормы.Суффикс    = "Меню";
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьКомандыПанелиДействий()

// Производит установку расширенного заголовка формы списка регистров.
//
// Параметры:
//  Форма - УправляемаяФорма - форма переданного регистра.
//
Процедура УстановитьЗаголовокСпискаРегистра(Форма)
	
	// Получим представление объекта, к которому относиться динамический список
	ПредставлениеСписка = УправлениеДиалогомСервер.ПредставлениеСпискаОбъектов(Форма);
	
	// Получим представление наложенного на список отбора по владельцу
	ПредставлениеРегистратора = ?(Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство("Регистратор") И ЗначениеЗаполнено(Форма.Параметры.Отбор.Регистратор), СокрЛП(Форма.Параметры.Отбор.Регистратор), "");
	
	// Сформируем итоговое представление динамического списка
	Форма.Заголовок = ПредставлениеСписка + ?(ПустаяСтрока(ПредставлениеРегистратора), "", " ("+ПредставлениеРегистратора+")");
	
КонецПроцедуры // УстановитьЗаголовокСпискаРегистра()

#КонецОбласти
