
#Область ПрограммныйИнтерфейс

// Замены номенклатуры по ссылке.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номеклатура - Номенклатура для которой получаются замены.
//  ДополнительныеДанные - Структура - Настройки заполняения дополнительными данными: См. ЗаменыНоменклатурыПоПолям.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ЗаменыНоменклатурыПоСсылке(Номенклатура, ДополнительныеДанные=Неопределено) Экспорт
	
	ПоляНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "АртикулДляПоиска,Производитель");
	Возврат ЗаменыНоменклатурыПоПолям(ПоляНоменклатуры.АртикулДляПоиска, ПоляНоменклатуры.Производитель);
	
КонецФункции

// Замены номенклатуры по артикулу и производителю.
//
// Параметры:
//  Артикул - Строка - Артикул для поиска номенклатуры. См. ПодборТоваровКлиентСервер.ВАртикулДляПоиска().
//  Производитель - СправончикСсылка.Производители - Производитель номенклатуры для, которой определяем замены.
//  ДополнительныеДанные - Структура - Настройки заполняения дополнительными данными:
//    ТолькоИзСправочника - Булево - Признак того что необходимо оставить
//                                   только замены для которых есть записи в справочнике номенклатура.
//    ТолькоВНаличии - Булево - Признак того что необходимо оставить
//                              только замены для которых остаток больше нуля.
//    НаСкладе - СправочникСсылка.СкладКомпании - Склад компании для которого получаются остатки замен.
//    НаДату - Дата - Дата на которую получаются отстатки замен.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ЗаменыНоменклатурыПоПолям(Знач Артикул, Производитель, ДополнительныеДанные=Неопределено) Экспорт
	
	Артикул = СокрЛП(Артикул);
	ТаблицаЗамен = НоваяТаблицаЗамен();
	
	Если НЕ ЗначениеЗаполнено(Артикул) Тогда
		Возврат Артикул;
	КонецЕсли;
	
	Ветка = 1;
	НайтиСтарую(Артикул, Производитель, -1, Ветка, ТаблицаЗамен);
	НайтиНовую(Артикул, Производитель, 1, Ветка, ТаблицаЗамен);
	Возврат ДополнитьДанными(ТаблицаЗамен, ДополнительныеДанные);
	
КонецФункции

// Заполняет заменами товаров после завершения подбора замен в табличной части "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, в котором производится подбор замен товаров.
//
//  РезультатОповещения - Строка
//   - Адрес во временном хранилище, по которому лежит таблица подобранных товаров.
//
//  ЗаполнятьИдентификаторПричиныОбращения - Булево
//     - Истина - для всех документов Автосервиса,
//     - Ложь - для документов без ТЧ "ПричиныОбращения",
//
//  ДополнительныеПараметры - Структура
//   - содержит дополнителные параметры (в частноти "СвернутьПо" - строка, содержащая реквизиты,
//     по которым надо свернуть ТЧ документа после подбора замен).
//
Процедура ВыполнитьЗаменуТоваровВДокументе(
		Объект,
		РезультатОповещения,
		ЗаполнятьИдентификаторПричиныОбращения = Истина,
		ДополнительныеПараметры=Неопределено) Экспорт
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(РезультатОповещения);
	
	Если ЗаполнятьИдентификаторПричиныОбращения Тогда
		ИдентификаторПричиныОбращенияПервой = "";
		Если Объект.ПричиныОбращения.Количество() > 0 Тогда
			ИдентификаторПричиныОбращенияПервой = Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
		КонецЕсли;
	КонецЕсли;
	
	// Заблокируем построчный пересчет скидок
	ПараметрыДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьПараметрыДействия(Объект);
	ПересчитатьСкидки = Ложь;
	ПересчитыватьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитыватьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	Сворачивать = Ложь;
	МассивРеквизитов = Новый Массив;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("СвернутьПо") Тогда
		Сворачивать = Истина;
		МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ДополнительныеПараметры.СвернутьПо, ",");
	КонецЕсли;
	
	ДляИзменений = Новый Массив;
	
	Для Каждого Строка Из ТаблицаПодбора Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭтоНоваяСтрока = Ложь;
		
		СтрокаВДокументе = Объект.Товары.НайтиПоИдентификатору(Строка.СтрокаВДокументе);
		
		Если СтрокаВДокументе = Неопределено Тогда
			
			Если ЗаполнятьИдентификаторПричиныОбращения Тогда
				Строка.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращенияПервой;
			КонецЕсли;
			ЭтоНоваяСтрока = Истина;
			СтрокаВДокументе = Объект.Товары.Добавить();
			
		КонецЕсли;
		
		Если СтрокаВДокументе.Номенклатура = Строка.Номенклатура
			И СтрокаВДокументе.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры
			И СтрокаВДокументе.Количество = Строка.Количество
			И СтрокаВДокументе.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			СтрокаВДокументе,
			Строка,
			"Номенклатура,ХарактеристикаНоменклатуры,Количество,ЕдиницаИзмерения,Коэффициент"
			+ ?(ЗаполнятьИдентификаторПричиныОбращения И ЭтоНоваяСтрока, ",ИдентификаторПричиныОбращения", ""));
		
		ДляИзменений.Добавить(СтрокаВДокументе.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	Если Сворачивать Тогда
		
		Для Каждого Строка Из Объект.Товары Цикл
			
			ПараметрыПоиска   = Новый Структура;
			МассивДляУдаления = Новый Массив;
			
			Для Каждого Реквизит Из МассивРеквизитов Цикл
				ПараметрыПоиска.Вставить(Реквизит, Строка[Реквизит]);
			КонецЦикла;
			
			МассивСтрок = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
			
			Если МассивСтрок.Количество() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Индекс=1 По МассивСтрок.Количество()-1 Цикл
				МассивСтрок[0].Количество = МассивСтрок[0].Количество + МассивСтрок[Индекс].Количество;
				МассивДляУдаления.Добавить(МассивСтрок[Индекс].ПолучитьИдентификатор());
			КонецЦикла;
			
			ДляИзменений.Добавить(МассивСтрок[0].ПолучитьИдентификатор());
			
			Для Каждого Индекс Из МассивДляУдаления Цикл
				Объект.Товары.Удалить(Объект.Товары.НайтиПоИдентификатору(Индекс));
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	
	ДляИзменений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДляИзменений);
	
	Для Каждого Индекс Из ДляИзменений Цикл
		
		СтрокаВДокументе = Объект.Товары.НайтиПоИдентификатору(Индекс);
		
		Если СтрокаВДокументе <> Неопределено Тогда
			ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).
				ТоварыНоменклатураПриИзменении(Объект, СтрокаВДокументе, ПараметрыВыполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	// Пересчет скидок
	Если ПересчитыватьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗаменуТоваровВДокументе()

#Область УсловноеОформление

// Устанавливает элементы условного оформления на таблицы замен.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма в которой располагаются таблицы замен.
//  ИменаТаблицЗамен - Массив, Неопределено - Имена таблиц для которых необходимо добавить элементы УО.
//
Процедура УстановитьУсловноеОформление(Форма, ИменаТаблицЗамен=Неопределено) Экспорт
	
	Если ИменаТаблицЗамен = Неопределено Тогда
		
		ИменаТаблицЗамен = ИменаТаблицЗаменПоУмолчанию();
		
	КонецЕсли;
	
	Для Каждого Имя Из ИменаТаблицЗамен Цикл
		
		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Представление = НСтр("ru = 'Замены не внесенные в базу данных'");
		
		ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы[Имя].Имя);
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.Номенклатура", Имя));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаЗамен()
	
	ТипАртикул = ОбщегоНазначения.ОписаниеТипаСтрока(25);
	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	
	ТаблицаЗамен = Новый ТаблицаЗначений;
	ТаблицаЗамен.Колонки.Добавить("Артикул", ТипАртикул);
	ТаблицаЗамен.Колонки.Добавить("АртикулДляПоиска", ТипАртикул);
	ТаблицаЗамен.Колонки.Добавить("Производитель", Новый ОписаниеТипов("СправочникСсылка.Производители"));
	ТаблицаЗамен.Колонки.Добавить("Шаг", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	ТаблицаЗамен.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаЗамен.Колонки.Добавить("ДатаЗамены", ТипДата);
	ТаблицаЗамен.Колонки.Добавить("ДатаОбновления", ТипДата);
	ТаблицаЗамен.Колонки.Добавить("Группа", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаЗамен.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаЗамен.Колонки.Добавить("Новая", Новый ОписаниеТипов("Булево"));
	ТаблицаЗамен.Колонки.Добавить("Автор", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЗамен.Колонки.Добавить("ЗапретЗакупки", Новый ОписаниеТипов("Булево"));
	ТаблицаЗамен.Колонки.Добавить("ЗапретПродажи", Новый ОписаниеТипов("Булево"));
	ТаблицаЗамен.Колонки.Добавить("СнятаСПроизводства", Новый ОписаниеТипов("Булево"));
	Возврат ТаблицаЗамен;
	
КонецФункции

Процедура НайтиНовую(Артикул, Производитель, Шаг, Ветка, ТаблицаЗамен)
	
	Запрос=Новый Запрос(
	"ВЫБРАТЬ
	|	Замены.АртикулЗамены КАК Артикул,
	|	Замены.АртикулЗаменыДляПоиска КАК АртикулДляПоиска,
	|	Замены.ПроизводительЗамены КАК Производитель,
	|	Замены.Количество КАК Количество,
	|	Замены.ДатаЗамены КАК ДатаЗамены,
	|	Замены.ДатаОбновления КАК ДатаОбновления,
	|	Замены.Описание КАК Описание,
	|	Замены.Группа КАК Группа,
	|	Замены.Автор КАК Автор,
	|	ИСТИНА КАК Новая
	|ИЗ
	|	РегистрСведений.Замены КАК Замены
	|ГДЕ
	|	Замены.АртикулДляПоиска = &Артикул
	|	И Замены.Производитель = &Производитель");
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Бесконечность возникнет в том случае, когда мы в одной ветке получим кольцевую ссылку, т.е. разыскивая
		// новую замену - вернемся к истокам. Сделаем проверку истоков по полям: Ветка и АртикулНовый - если они уже внесены
		// в таблицу замен - значит это бесконечность, нужно прерывать.
		
		Проверка=ТаблицаЗамен.НайтиСтроки(Новый Структура("АртикулДляПоиска,Новая", Выборка.АртикулДляПоиска, Истина));
		Если Проверка.Количество()>0 Тогда
			Возврат;
		КонецЕсли; 
		
		НоваяСтрокаЗамен = ТаблицаЗамен.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗамен, Выборка);
		НоваяСтрокаЗамен.Шаг = Шаг;
		
		// Обратимся к рекурсии чтобы раскрутить замены вниз по веткам дерева.
		// однако нужна блокировка - чтобы не уйти в бесконечность.
		НайтиНовую(Выборка.АртикулДляПоиска, Выборка.Производитель, Шаг + 1, Ветка, ТаблицаЗамен);
		
		Ветка = Ветка + 1;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура НайтиСтарую(Артикул, Производитель, Шаг, Ветка, ТаблицаЗамен)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Замены.Артикул КАК Артикул,
	|	Замены.АртикулДляПоиска КАК АртикулДляПоиска,
	|	Замены.Производитель КАК Производитель,
	|	Замены.Количество КАК Количество,
	|	Замены.ДатаЗамены КАК ДатаЗамены,
	|	Замены.ДатаОбновления КАК ДатаОбновления,
	|	Замены.Описание КАК Описание,
	|	Замены.Группа КАК  Группа,
	|	Замены.Автор КАК Автор
	|ИЗ
	|	РегистрСведений.Замены КАК Замены
	|ГДЕ
	|	Замены.АртикулЗаменыДляПоиска = &АртикулЗамены
	|	И Замены.ПроизводительЗамены = &Производитель");
	
	Запрос.УстановитьПараметр("АртикулЗамены", Артикул);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Бесконечность возникнет в том случае, когда мы в одной ветке получим кольцевую ссылку, т.е. разыскивая
		// старую замену - вернемся к истокам. Сделаем проверку истоков по полям: Ветка и АртикулСтарый - если они уже внесены
		// в таблицу замен - значит это бесконечность, нужно прерывать.
		Проверка = ТаблицаЗамен.НайтиСтроки(Новый Структура("АртикулДляПоиска,Новая", Выборка.АртикулДляПоиска, Ложь));
		
		Если Проверка.Количество() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		НоваяСтрокаЗамен=ТаблицаЗамен.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗамен, Выборка);
		НоваяСтрокаЗамен.Шаг = Шаг;
		
		// Обратимся к рекурсии чтобы раскрутить замены вверх по веткам дерева.
		// однако нужна блокировка - чтобы не уйти в бесконечность.
		НайтиСтарую(Выборка.АртикулДляПоиска, Выборка.Производитель, Шаг - 1, Ветка, ТаблицаЗамен);
		
		Ветка = Ветка + 1;
		
	КонецЦикла; 
	
КонецПроцедуры //НайтиСтарую()

Функция ДополнитьДанными(Замены, ДополнительныеДанные)
	
	Если ТипЗнч(ДополнительныеДанные) <> Тип("Структура") Тогда
		
		ДополнительныеДанные = Новый Структура;
		
	КонецЕсли;
	
	ТолькоИзСправочника = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеДанные, "ТолькоИзСправочника", Ложь);
	ТолькоВНаличии = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеДанные, "ТолькоВНаличии", Ложь);
	НаДату = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеДанные, "НаДату");
	НаСкладе = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеДанные, "НаСкладе");
	
	Если НаСкладе <> Неопределено
		И ТипЗнч(НаСкладе) <> Тип("Массив")
		И ТипЗнч(НаСкладе) <> Тип("ФиксированныйМассив") Тогда
		
		НаСкладе = Новый Массив(НаСкладе);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	Замены.Артикул КАК Артикул,
	|	Замены.АртикулДляПоиска КАК АртикулДляПоиска,
	|	Замены.Производитель КАК Производитель,
	|	Замены.Шаг КАК Шаг,
	|	Замены.Количество КАК Количество,
	|	Замены.ДатаЗамены КАК ДатаЗамены,
	|	Замены.ДатаОбновления КАК ДатаОбновления,
	|	Замены.Описание КАК Описание,
	|	Замены.Группа КАК Группа,
	|	Замены.Автор КАК Автор,
	|	Замены.Новая КАК Новая
	|ПОМЕСТИТЬ ВременнаяТаблицаЗамен
	|ИЗ
	|	&Замены КАК Замены
	|ГДЕ
	|	Замены.Артикул <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.АртикулДляПоиска КАК АртикулДляПоиска,
	|	Номенклатура.Производитель КАК Производитель,
	|	Номенклатура.ЗапретЗакупки КАК ЗапретЗакупки,
	|	Номенклатура.ЗапретПродажи КАК ЗапретПродажи,
	|	Номенклатура.СнятаСПроизводства КАК СнятаСПроизводства
	|ПОМЕСТИТЬ ПодходящаяНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(Номенклатура.АртикулДляПоиска, Номенклатура.Производитель) В
	|			(ВЫБРАТЬ
	|				ВременнаяТаблицаЗамен.АртикулДляПоиска КАК АртикулДляПоиска,
	|				ВременнаяТаблицаЗамен.Производитель КАК Производитель
	|			ИЗ
	|				ВременнаяТаблицаЗамен КАК ВременнаяТаблицаЗамен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток КАК Остаток,
	|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток КАК СвободныйОстаток
	|ПОМЕСТИТЬ ОстаткиНаСкладе
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
	|			&НаДату,
	|			%1
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					ПодходящаяНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					ПодходящаяНоменклатура КАК ПодходящаяНоменклатура)) КАК ОстаткиТоваровКомпанииОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗамен.Артикул КАК Артикул,
	|	ВременнаяТаблицаЗамен.АртикулДляПоиска КАК АртикулДляПоиска,
	|	ВременнаяТаблицаЗамен.Производитель КАК Производитель,
	|	ВременнаяТаблицаЗамен.Шаг КАК Шаг,
	|	ВременнаяТаблицаЗамен.Количество КАК КоличествоРегистр,
	|	ВременнаяТаблицаЗамен.ДатаЗамены КАК ДатаЗамены,
	|	ВременнаяТаблицаЗамен.ДатаОбновления КАК ДатаОбновления,
	|	ВременнаяТаблицаЗамен.Описание КАК Описание,
	|	ВременнаяТаблицаЗамен.Группа КАК Группа,
	|	ВременнаяТаблицаЗамен.Автор КАК Автор,
	|	ВременнаяТаблицаЗамен.Новая КАК Новая,
	|	ЕСТЬNULL(ПодходящаяНоменклатура.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(ПодходящаяНоменклатура.ЗапретЗакупки, ЛОЖЬ) КАК ЗапретЗакупки,
	|	ЕСТЬNULL(ПодходящаяНоменклатура.ЗапретПродажи, ЛОЖЬ) КАК ЗапретПродажи,
	|	ЕСТЬNULL(ПодходящаяНоменклатура.СнятаСПроизводства, ЛОЖЬ) КАК СнятаСПроизводства
	|ПОМЕСТИТЬ ЗаменыСНоменклатурой
	|ИЗ
	|	ВременнаяТаблицаЗамен КАК ВременнаяТаблицаЗамен
	|%2 СОЕДИНЕНИЕ ПодходящаяНоменклатура КАК ПодходящаяНоменклатура
	|ПО ВременнаяТаблицаЗамен.АртикулДляПоиска = ПодходящаяНоменклатура.АртикулДляПоиска
	|	И ВременнаяТаблицаЗамен.Производитель = ПодходящаяНоменклатура.Производитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПодходящаяНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаЗамен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаменыСНоменклатурой.Артикул КАК Артикул,
	|	ЗаменыСНоменклатурой.АртикулДляПоиска КАК АртикулДляПоиска,
	|	ЗаменыСНоменклатурой.Производитель КАК Производитель,
	|	ЗаменыСНоменклатурой.Шаг КАК Шаг,
	|	ЗаменыСНоменклатурой.КоличествоРегистр КАК КоличествоРегистр,
	|	ЗаменыСНоменклатурой.ДатаЗамены КАК ДатаЗамены,
	|	ЗаменыСНоменклатурой.ДатаОбновления КАК ДатаОбновления,
	|	ЗаменыСНоменклатурой.Описание КАК Описание,
	|	ЗаменыСНоменклатурой.Группа КАК Группа,
	|	ЗаменыСНоменклатурой.Автор КАК Автор,
	|	ЗаменыСНоменклатурой.Новая КАК Новая,
	|	ЗаменыСНоменклатурой.Номенклатура КАК Номенклатура,
	|	ЗаменыСНоменклатурой.ЗапретЗакупки КАК ЗапретЗакупки,
	|	ЗаменыСНоменклатурой.ЗапретПродажи КАК ЗапретПродажи,
	|	ЗаменыСНоменклатурой.СнятаСПроизводства КАК СнятаСПроизводства,
	|	ЕСТЬNULL(ОстаткиНаСкладе.Остаток, 0) КАК Количество,
	|	ЕСТЬNULL(ОстаткиНаСкладе.СвободныйОстаток, 0) КАК СвободныйОстаток
	|ИЗ
	|	ЗаменыСНоменклатурой КАК ЗаменыСНоменклатурой
	|%3 СОЕДИНЕНИЕ ОстаткиНаСкладе КАК ОстаткиНаСкладе
	|ПО ЗаменыСНоменклатурой.Номенклатура = ОстаткиНаСкладе.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Шаг";
	
	ТекстЗапроса = СтрШаблон(
		ШаблонЗапроса,
		?(ЗначениеЗаполнено(НаСкладе), "СкладКомпании В (&НаСкладе) И", ""),
		?(ТолькоИзСправочника, "ВНУТРЕННЕЕ", "ЛЕВОЕ"),
		?(ТолькоВНаличии, "ВНУТРЕННЕЕ", "ЛЕВОЕ"));
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("НаСкладе", НаСкладе);
	Запрос.УстановитьПараметр("Замены", Замены);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ИменаТаблицЗаменПоУмолчанию()
	
	Имена = Новый Массив;
	Имена.Добавить("ЗаменыНовые");
	Имена.Добавить("ЗаменыСтарые");
	Возврат Имена;
	
КонецФункции

#КонецОбласти
