////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции для работы со связанными работами:
//  - работа со списками в фаормах
//  - вызов форм для подбора
//  - обработка действий пользователя при редактировании
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму подбора связанных работ для авторабот, причин обращения и товаров
//
// Параметры:
//  Документ             - ДанныеФормыСтруктура - Данные документа для которого выполянется заполнение
//  Источники            - ДанныеФормыЭлементКоллекции - Данные строки табличной части
//                                                       для которой происходит добавление связанных работ
//  Форма                - УправляемаяФорма - Форма документа
//  ПараметрыОткрытия    - Структура - параметры открытия формы
//  ОбработчикОповещения - ОписаниеОповещения - Обработчик для обработки оповещения при заверщении подбора
//  Постобработка        - Произвольный - Информация для постобработки.
//
Процедура НачатьПодборСвязанныхРабот(
	Документ,
	Знач Источники,
	Форма,
	ПараметрыОткрытия=Неопределено,
	ОбработчикОповещения=Неопределено,
	Постобработка=Неопределено) Экспорт
	
	ОткрытаяФорма = ОткрытьФорму(
		"Обработка.ПодборСвязанныхРабот.Форма.ПодборСвязанныхРабот",
		НачальноеЗначениеВыбора(Источники, ДанныеДокумента(Документ, ПараметрыОткрытия(ПараметрыОткрытия))),
		Форма,
		Форма,
		,
		,
		ОбработчикОповещения(ОбработчикОповещения, Постобработка, Форма),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Если ОткрытаяФорма = Неопределено Тогда
		
		Постобработка(Постобработка);
		
	КонецЕсли;
	
КонецПроцедуры

// Окончание редактирования строки в списке связаных авторабот.
//
// Параметры:
//  Строка  - ДанныеФормыЭлементКоллекции - Данные строки табличной части
//                                          для которой происходит добавление связанных работ
//  Колонка - Строка                      - Наименование колонки, содержащей связанную работу.
//
Процедура ОбработатьИзменениеСвязаннойРаботы(Строка, Колонка="СвязаннаяРабота") Экспорт
	
	Если Строка.Количество = 0 Тогда
		
		Строка.Количество = 1;
		
	КонецЕсли;
	
	Если ТипЗнч(Строка[Колонка]) <> Тип("СправочникСсылка.Автоработы") Тогда
		
		Строка.ДоступностьРеквизитаВспомогательнойРаботы = Ложь;
		Строка.ВспомогательнаяАвторабота = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ВидИспользования = СвязанныеРаботыВызовСервера.ВидИспользоватнияСвязаннойАвтоработы(Строка[Колонка]);
	
	Если ВидИспользования = ПредопределенноеЗначение("Перечисление.ВидыИспользованияАвторабот.Планирование") Тогда
		
		Строка.ДоступностьРеквизитаВспомогательнойРаботы = Ложь;
		Строка.ВспомогательнаяАвторабота = Истина;
		Возврат;
		
	ИначеЕсли ВидИспользования = ПредопределенноеЗначение("Перечисление.ВидыИспользованияАвторабот.Производство") Тогда
		
		Строка.ДоступностьРеквизитаВспомогательнойРаботы = Ложь;
		Строка.ВспомогательнаяАвторабота = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Строка.ДоступностьРеквизитаВспомогательнойРаботы = Истина;
	
КонецПроцедуры

// Начало заполнения по виду ремонта
//
// Параметры:
//  Объект               - ДанныеФормыСтруктура - Заполняемый объект
//  Форма                - УправляемаяФорма    - Форма источник события
//  Параметры            - Структура            - Результат обработки предыдущих операций
//  ДругиеИсточники      - ДанныеФормыЭлементКоллекции - Данные строки табличной части
//                                                       для которой происходит добавление связанных работ
//  ОбработчикОповещения - ОписаниеОповещения   - Обработчик оповещения о завершении
//
// Возвращаемое значение:
//  Булево - Истина, если требуется заполнение, иначе - Ложь.
//
Функция НачатьЗаполнениеПоВидуРемонта(
	Объект,
	Форма,
	Параметры=Неопределено,
	ДругиеИсточники=Неопределено,
	ОбработчикОповещения=Неопределено) Экспорт
	
	// Проверим необходимость заполнения
	Если НЕ (
		ЗначениеЗаполнено(Объект.ВидРемонта)
		И Форма.РедактированиеРабот
		И ПолучитьЗначениеПараметраСтруктуры(Параметры, "ВидРемонтаЕстьРаботыПоУмолчанию", Истина)) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ОбработчикОповещения = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ДругиеИсточники) Тогда
			ДругиеИсточники = Параметры;
		Иначе
			ДругиеИсточники.Добавить(Параметры);
		КонецЕсли;
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ЗавершениеЗаполнениеПоВидуРемонта",
			Форма,
			ДругиеИсточники);
	КонецЕсли;
	
	Если Объект.Автоработы.Количество() > 0
		ИЛИ Объект.Товары.Количество() > 0
		ИЛИ Объект.ВспомогательныеАвтоработы.Количество() > 0 Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Заполнить_с_очисткой" , "С очисткой");
		Кнопки.Добавить("Заполнить_без_очистки", "Без очистки");
		Кнопки.Добавить("Отмена"               , "Отмена");
		
		ТекстВопроса = НСтр("ru = 'Табличные части не пусты. Заполнить работами по виду ремонта?'");
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, Кнопки,,, "Заполнение по виду ремонта");
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, "Заполнить_без_очистки");
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Завершение заполнение по виду ремонта
//
// Параметры:
//  Объект               - ДанныеФормыСтруктура - Заполняемый объект
//  Форма                - УправляемаяФорма     - Форма источник события
//  РежимЗаполнения      - Строка               - Режим заполнения табличных частей
//  ДругиеИсточники      - ДанныеФормыЭлементКоллекции - Данные строки табличной части
//                                                       для которой происходит добавление связанных работ
//  ОбработчикОповещения - ОписаниеОповещения   - Обработчик оповещения о завершении
//  ИмяЭлементаФормы     - Строка, Неопределено - имя элемента формы (необязательное).
//
Процедура ЗавершениеЗаполнениеПоВидуРемонта(
	Объект,
	Форма,
	РежимЗаполнения,
	ДругиеИсточники=Неопределено,
	ОбработчикОповещения=Неопределено,
	ИмяЭлементаФормы = Неопределено) Экспорт
	
	Если НРег(РежимЗаполнения) = "отмена" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Очистим ТЧ "Автоработы"
	Если НРег(РежимЗаполнения) = "заполнить_с_очисткой" Тогда
		
		Если ИмяЭлементаФормы <> Неопределено Тогда
			ТекущиеДанные = Форма.Элементы[ИмяЭлементаФормы].ТекущиеДанные;
		Иначе
			ТекущиеДанные = Форма.Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные;
		КонецЕсли;
		
		Если Объект.ПричиныОбращения.Количество() > 0 И ТекущиеДанные <> Неопределено Тогда
			НайденныеСтроки = Объект.Автоработы.НайтиСтроки(
				Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
					Объект.Автоработы.Удалить(ТекущаяСтрока);
				КонецЦикла;
			КонецЕсли;
			
			НайденныеСтроки = Объект.Товары.НайтиСтроки(
				Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
					Объект.Товары.Удалить(ТекущаяСтрока);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Объект.Автоработы.Очистить();
			Объект.Товары.Очистить();
		КонецЕсли;
		
		Объект.ВспомогательныеАвтоработы.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДругиеИсточники) Тогда
		Если ТипЗнч(ДругиеИсточники) = Тип("Структура") Тогда
			ДругиеИсточники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ВидРемонта);
		ИначеЕсли ТипЗнч(ДругиеИсточники) = Тип("Массив")
			И ТипЗнч(ДругиеИсточники[ДругиеИсточники.Количество() - 1]) = Тип("Структура") Тогда
			ДругиеИсточники.Удалить(ДругиеИсточники.Количество() - 1);
			ДругиеИсточники.Добавить(Объект.ВидРемонта);
		Иначе
			ДругиеИсточники.Добавить(Объект.ВидРемонта);
		КонецЕсли;
	Иначе
		
		ДругиеИсточники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ВидРемонта);
		
	КонецЕсли;
	
	// Сформируем параметры для выбора связанных работ/деталей
	НачатьПодборСвязанныхРабот(Объект, ДругиеИсточники, Форма,, ОбработчикОповещения);
	
КонецПроцедуры

// Проверяет необходимость выполнения постобработки и вызывает событие
//
// Параметры:
//  ПараметрыПостобработки - Структура - параметры выполнения постобработки.
//
Процедура Постобработка(ПараметрыПостобработки) Экспорт
	
	Если ПараметрыПостобработки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПостобработки) = Тип("Структура") Тогда
		
		ВыполнитьОбработкуОповещения(ПараметрыПостобработки.Обработчик, ПараметрыПостобработки.Данные);
		Возврат;
		
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Неверный тип параметра постобработки.'");
	
КонецПроцедуры

// Начало выбора комплексной работы
//
// Параметры:
//  Форма    - УправляемаяФорма     - Форма источник события
//  Причина  - Строка, Неопределено - идентификатор причины обращения
//  Документ - ДокументОбъект       - Объект, для которого выполняется обработка события.
//
Процедура НачатьВыборКомплекснойРаботы(Форма, Причина=Неопределено, Знач Документ=Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Документ);
	ДопПараметры = Новый Структура("Форма,Причина,Документ", Форма, Причина, Документ);
	Обработчик = Новый ОписаниеОповещения("ВыборКомплекснойРаботыЗавершение", СвязанныеРаботыКлиент, ДопПараметры);
	
	ОткрытьФорму(
		"Обработка.ПодборСвязанныхРабот.Форма.ВыборКомплекснойРаботы",
		,
		Форма,
		Форма,
		,
		,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыборКомплекснойРаботыЗавершение(ВыбранныеРаботы, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеРаботы) Тогда
		
		НачатьПодборСвязанныхРабот(
			ДопПараметры.Документ,
			ВыбранныеРаботы,
			ДопПараметры.Форма,
			Новый Структура("Контейнер", ДопПараметры.Причина));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйОписаниеИсточника(Источник)
	
	ИсточникЗаполнения = Новый Структура;
	
	Если СвязанныеРаботыВызовСервера.ЭтоСсылкаНаИсточник(ТипЗнч(Источник)) Тогда
		
		ИсточникЗаполнения.Вставить("Источник", Источник);
		
	ИначеЕсли ЕстьРеквизитНаКлиенте(Источник, "Номенклатура") Тогда
		
		ИсточникЗаполнения.Вставить("Источник", Источник.Номенклатура);
		
		Если ЕстьРеквизитНаКлиенте(Источник, "ИдентификаторПричиныОбращения") Тогда
			
			ИсточникЗаполнения.Вставить("КлючСтроки", Источник.ИдентификаторПричиныОбращения);
			
		КонецЕсли;
		
	ИначеЕсли ЕстьРеквизитНаКлиенте(Источник, "Авторабота") Тогда
		
		ИсточникЗаполнения.Вставить("Источник", Источник.Авторабота);
		
		Если ЕстьРеквизитНаКлиенте(Источник, "ИдентификаторРаботы") Тогда
			
			ИсточникЗаполнения.Вставить("КлючСтроки", Источник.ИдентификаторРаботы);
			
		КонецЕсли;
		
	ИначеЕсли ЕстьРеквизитНаКлиенте(Источник, "ПричинаОбращения") Тогда
		
		ИсточникЗаполнения.Вставить("Источник", Источник.ПричинаОбращения);
		ИсточникЗаполнения.Вставить("КлючСтроки", Источник.ИдентификаторПричиныОбращения);
		
	ИначеЕсли ЕстьРеквизитНаКлиенте(Источник, "Рекомендация") Тогда
		
		ИсточникЗаполнения.Вставить("Источник", Источник.Рекомендация);
		
	КонецЕсли;
	
	Если ЕстьРеквизитНаКлиенте(Источник, "Количество") Тогда
		
		ИсточникЗаполнения.Вставить("Количество", Источник.Количество);
		
	Иначе
		
		ИсточникЗаполнения.Вставить("Количество", 1);
		
	КонецЕсли;
	
	Возврат ИсточникЗаполнения;
	
КонецФункции

Функция НачальноеЗначениеВыбора(Источники, ПараметрыОткрытия)
	
	// Сформируем структуру объектов для которых будет выполняться заполнение
	Если ПараметрыОткрытия.Свойство("НачальноеЗначениеВыбора") Тогда
		
		Возврат ПараметрыОткрытия;
		
	КонецЕсли;
	
	ОписанияИсточников = Новый Массив;
	
	Если ТипЗнч(Источники) <> Тип("Массив") Тогда
		
		Источники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источники);
		
	КонецЕсли;
	
	Для Каждого Источник Из Источники Цикл
		
		Если ТипЗнч(Источник) <> Тип("Строка") Тогда
			ОписанияИсточников.Добавить(НовыйОписаниеИсточника(Источник));
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОткрытия.Вставить("НачальноеЗначениеВыбора", ОписанияИсточников);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Функция ПараметрыОткрытия(ПараметрыОткрытия)
	
	Если ПараметрыОткрытия <> Неопределено Тогда
		
		Возврат ПараметрыОткрытия;
		
	КонецЕсли;
	
	Возврат Новый Структура;
	
КонецФункции

Функция ОбработчикОповещения(Обработчик, Постобработка, Форма)
	
	Если Обработчик <> Неопределено Тогда
		
		Возврат Обработчик;
		
	КонецЕсли;
	
	Возврат Новый ОписаниеОповещения("Подключаемый_ПодборСвязанныхРаботЗавершение", Форма, Постобработка);
	
КонецФункции

Функция ДанныеДокумента(Документ, ПараметрыОткрытия)
	
	ПараметрыОткрытия.Вставить("Документ"   , Документ.Ссылка);
	ПараметрыОткрытия.Вставить("ХозОперация", Документ.ХозОперация);
	
	Если НЕ ПараметрыОткрытия.Свойство("Автомобиль") И ЕстьРеквизитНаКлиенте(Документ, "Автомобиль") Тогда
		
		ПараметрыОткрытия.Вставить("Автомобиль", Документ.Автомобиль);
		
	КонецЕсли;
	
	Если НЕ ПараметрыОткрытия.Свойство("Модель") И ЕстьРеквизитНаКлиенте(Документ, "Модель") Тогда
		
		ПараметрыОткрытия.Вставить("Модель", Документ.Модель);
		
	КонецЕсли;
	
	Если НЕ ПараметрыОткрытия.Свойство("ВариантКомплектации")
		И ЕстьРеквизитНаКлиенте(Документ, "ВариантКомплектации") Тогда
		
		ПараметрыОткрытия.Вставить("ВариантКомплектации", Документ.ВариантКомплектации);
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

#КонецОбласти