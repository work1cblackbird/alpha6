
#Область ПрограммныйИнтерфейс

#Область СписаниеИАктивацияБонусныхБаллов

// Активация бонусных баллов.
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры рассылки бонусных баллов.
//
Процедура АктивацияБонусныхБаллов(Знач СтруктураПараметров = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АктивацияБонусныхБаллов);
	
	Обработка = Обработки.АктивацияБонусныхБаллов.Создать();
	
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.Свойство("УчетнаяЗапись"      , Обработка.УчетнаяЗаписьЭлектроннойПочты);
		СтруктураПараметров.Свойство("ШаблонРассылкиSMS"  , Обработка.ШаблонРассылкиSMS);
		СтруктураПараметров.Свойство("ШаблонРассылкиEMail", Обработка.ШаблонРассылкиEMail)
	КонецЕсли;
	
	Результат = Обработка.СоздатьДокументыКорректировкиБонусов();
	Если Результат <> Неопределено И Обработка.ТаблицаРассылок.Количество() > 0 Тогда
		Обработка.ВыполнитьРассылкуУведомлений(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Списание просроченных бонусных баллов.
//
Процедура СписаниеПросроченныхБонусныхБаллов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БонусныеБаллыОстатки.БонуснаяКарта       КАК Карточка,
	|	БонусныеБаллыОстатки.ДатаСписанияБонусов КАК ДатаСписания,
	|	БонусныеБаллыОстатки.КоличествоОстаток   КАК Количество
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.Остатки(, ДатаСписанияБонусов < &ТекДата И АктивностьБонусов) КАК БонусныеБаллыОстатки";
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// создадим документ
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Списание просроченных баллов'"), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное списание просроченных баллов'"));
		
		НовыйДокумент = Документы.КорректировкаБонусов.СоздатьДокумент();
		НовыйДокумент.Заполнить(Неопределено);
		НовыйДокумент.УстановитьНовыйНомер();
		НовыйДокумент.СозданРегламентно = Истина;
		НовыйДокумент.Комментарий = "Создан регламентным заданием ""Списание просроченных бонусных баллов""";
		
		НовыйДокумент.БонусыКСписанию.Загрузить(РезультатЗапроса.Выгрузить());
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Списание просроченных баллов'"), 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Сформирован документ '")+ Строка(НовыйДокумент.Ссылка) + ".");
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Списание просроченных баллов'"), 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Не сформирован регламентый документ для списания просроченных баллов.'"));
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Списание просроченных баллов'"), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное списание просроченных баллов'"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Оповещения

// Оповещение о бонусных баллах.
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры рассылки бонусных баллов.
//
Процедура ОповещениеОБонусныхБаллах(Знач СтруктураПараметров = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОповещениеОБонусныхБаллах);
	
	Обработка = Обработки.РассылкаИнформацииОБонусныхБаллах.Создать();
	Обработка.Дата = ТекущаяДатаСеанса();
	
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.Свойство("УчетнаяЗапись"      , Обработка.УчетнаяЗаписьЭлектроннойПочты);
		СтруктураПараметров.Свойство("ШаблонРассылкиSMS"  , Обработка.ШаблонРассылкиSMS);
		СтруктураПараметров.Свойство("ШаблонРассылкиEMail", Обработка.ШаблонРассылкиEMail)
	КонецЕсли;
	
	Обработка.АвтоматическаяРассылка();
	
КонецПроцедуры

// Начисление дополнительных бонусных баллов.
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры рассылки бонусных баллов.
//
Процедура НачислениеДополнительныхБонусныхБаллов(Знач СтруктураПараметров = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.НачислениеДополнительныхБонусныхБаллов);
	
	КонтрагентыКНачислению = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Справочники.Контрагенты.ПолучитьИменинников(ТекущаяДатаСеанса()),
																	ПолучитьДанныеОНачисленииДопБонусныхБаллов ());
	
	Если КонтрагентыКНачислению.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|АктивныеБонусныеПрограммыСрезПоследних.БонуснаяПрограмма КАК БонуснаяПрограмма
	|ПОМЕСТИТЬ АктивныеБонусныеПрограммы
	|ИЗ
	|	РегистрСведений.АктивныеБонусныеПрограммы.СрезПоследних КАК АктивныеБонусныеПрограммыСрезПоследних
	|ГДЕ
	|	АктивныеБонусныеПрограммыСрезПоследних.Активна = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеПрограммы.КоличествоБонусовКДнюРождения КАК КоличествоБонусов,
	|	БонусныеПрограммы.Ссылка КАК Ссылка,
	|	БонусныеПрограммы.СрокСгоранияБонусов КАК СрокСгоранияБонусов
	|ПОМЕСТИТЬ БаллыПоПрограммам
	|ИЗ
	|	Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|ГДЕ
	|	БонусныеПрограммы.НачислятьБонусыКДнюРождения
	|	И БонусныеПрограммы.КоличествоБонусовКДнюРождения > 0
	|	И БонусныеПрограммы.Ссылка В
	|			(ВЫБРАТЬ
	|				АктивныеБонусныеПрограммы.БонуснаяПрограмма КАК БонуснаяПрограмма
	|			ИЗ
	|				АктивныеБонусныеПрограммы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Карточки.Объект КАК Контрагент,
	|	Карточки.Ссылка КАК БонуснаяКарта,
	|	Карточки.БонуснаяПрограмма КАК БонуснаяПрограмма
	|ПОМЕСТИТЬ ДисконтныеКарты
	|ИЗ
	|	Справочник.Карточки КАК Карточки
	|ГДЕ
	|	Карточки.ВидКарточки = ЗНАЧЕНИЕ(Перечисление.ВидыКарточек.ДисконтнаяКарта)
	|	И Карточки.Объект В(&КонтрагентыКНачислению)
	|	И Карточки.БонуснаяПрограмма <> ЗНАЧЕНИЕ(Справочник.БонусныеПрограммы.ПустаяССылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БаллыПоПрограммам.КоличествоБонусов КАК КоличествоБонусов,
	|	БаллыПоПрограммам.СрокСгоранияБонусов КАК СрокСгоранияБонусов,
	|	ДисконтныеКарты.Контрагент КАК Контрагент,
	|	ДисконтныеКарты.БонуснаяКарта КАК БонуснаяКарта,
	|	ДисконтныеКарты.БонуснаяПрограмма КАК БонуснаяПрограмма
	|ИЗ
	|	БаллыПоПрограммам КАК БаллыПоПрограммам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДисконтныеКарты КАК ДисконтныеКарты
	|		ПО БаллыПоПрограммам.Ссылка = ДисконтныеКарты.БонуснаяПрограмма";
	
	Запрос.УстановитьПараметр("КонтрагентыКНачислению", КонтрагентыКНачислению);
			
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	Бонусы = РезультатЗапроса.Выгрузить();
	
	УдалитьЗаблокированныеКарты(Бонусы);
	
	Обработка = Обработки.НачислениеДополнительныхБонусныхБаллов.Создать();
	
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.Свойство("УчетнаяЗапись"      , Обработка.УчетнаяЗаписьЭлектроннойПочты);
		СтруктураПараметров.Свойство("ШаблонРассылкиSMS"  , Обработка.ШаблонРассылкиSMS);
		СтруктураПараметров.Свойство("ШаблонРассылкиEMail", Обработка.ШаблонРассылкиEMail)
	КонецЕсли;
	
	Результат = Обработка.СоздатьДокументыКорректировкиДополнительныхБонусов(Бонусы);
	Если Результат <> Неопределено Тогда
		
		ДокументыSMS	= Новый ТаблицаЗначений();
		ДокументыSMS.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДокументыSMS.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.СообщениеSMS"));
		
		ДокументыEmail	= Новый ТаблицаЗначений();	
		ДокументыEmail.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДокументыEmail.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		                                                      
		Если Обработка.ТаблицаРассылок.Количество() > 0  Тогда
			
	    Обработка.ВыполнитьРассылкуУведомлений(Результат);
							
		Для Каждого Элемент Из Обработка.ДокументыКОтправкеSMS  Цикл
			
			Для Каждого Контакт ИЗ Элемент.Адресаты Цикл
				
				НоваяСтрока = ДокументыSMS.Добавить();
				НоваяСтрока.Документ = Элемент.Ссылка;
				НоваяСтрока.Контрагент = Контакт.Контакт;
				
			КонецЦикла;
			
		КонецЦикла;
	
		Для Каждого Элемент Из Обработка.ДокументыКОтправкеПисем  Цикл
			
			Для Каждого Контакт ИЗ Элемент.ПолучателиПисьма Цикл
				
				НоваяСтрока = ДокументыEmail.Добавить();
				НоваяСтрока.Документ = Элемент.Ссылка;
				НоваяСтрока.Контрагент = Контакт.Контакт;
		
			КонецЦикла;
			
		КонецЦикла;
		
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Для Каждого Элемент Из Бонусы Цикл
			
			НаборЗаписей = РегистрыСведений.НачислениеДополнительныхБонусныхБаллов.СоздатьНаборЗаписей();
			
			УсловиеПоиска = Новый Структура("Контрагент");
			УсловиеПоиска.Контрагент = Элемент.Контрагент;
			НайденныеДокументыSMS = ДокументыSMS.НайтиСтроки(УсловиеПоиска);
			НайденныеДокументыEmail = ДокументыEmail.НайтиСтроки(УсловиеПоиска);
			НаборЗаписей.Отбор.Контрагент.Установить(Элемент.Контрагент);
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса());
			
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Период = ТекущаяДатаСеанса();
			НоваяСтрока.Контрагент = Элемент.Контрагент;
			НоваяСтрока.Начислено = Истина;
			НоваяСтрока.ДокументSMS = ?(НайденныеДокументыSMS.Количество()> 0,
				НайденныеДокументыSMS[0].Документ, 
				Документы.СообщениеSMS.ПустаяСсылка());
			НоваяСтрока.ДокументEmail = ?(НайденныеДокументыEmail.Количество()> 0,
				НайденныеДокументыEmail[0].Документ, 
				Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка());
			
			НаборЗаписей.Записать ();
	
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеОНачисленииДопБонусныхБаллов ()
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	НачислениеДополнительныхБонусныхБаллов.Контрагент КАК Контрагент
	              |ИЗ
	              |	РегистрСведений.НачислениеДополнительныхБонусныхБаллов КАК НачислениеДополнительныхБонусныхБаллов
	              |ГДЕ
	              |	НачислениеДополнительныхБонусныхБаллов.Период = &ТекущаяДата
	              |	И НачислениеДополнительныхБонусныхБаллов.Начислено";
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
КонецФункции

Процедура УдалитьЗаблокированныеКарты (Бонусы)
	
	ЗаблокированныеКарты = Новый Массив();
	Для Каждого Элемент Из Бонусы Цикл
		
		Если БонусныеПрограммыСервер.ДисконтнаяКартаЗаблокирована(Элемент.БонуснаяКарта)Тогда
			ЗаблокированныеКарты.Добавить(Элемент);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого Элемент Из ЗаблокированныеКарты Цикл
		Бонусы.Удалить(Элемент);
	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

#КонецОбласти