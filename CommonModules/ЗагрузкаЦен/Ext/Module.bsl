#Область ПрограммныйИнтерфейс 
// Создает документы изменения цен, согласно параметров. Действует через длительные операции.
// Результат работы передает через адрес в хранилище.
// Параметры:
//   ПараметрыДО   - Структура - структура параметров.
//   АдресРезультата - адрес в хранилище, куда выгружается массив созданных документов.
//
Процедура СоздатьДокументыИзмененияЦен(ПараметрыДО, АдресРезультата) Экспорт
	
	МассивДокументов = Новый Массив;
	
	ПараметрыДействия = ПараметрыДО.Параметры;
	Если Не ПроверкаЗаполненияПараметров(ПараметрыДействия) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Некорректное заполнение параметров для создания документов изменения цен!'")
		);
		Возврат;
	КонецЕсли; 
	
	Если ПараметрыДействия.СоздаватьНоменклатуру Тогда
		СоздатьНомеклатуруИзФайла(ПараметрыДействия);	
	КонецЕсли;
	
	Если ПараметрыДействия.ВидОбновления = 1 Тогда
		МассивДокументов = СоздатьПоПрайсЛисту(ПараметрыДействия);
	Иначе
		ПодготовитьТаблицу(ПараметрыДействия);
		МассивДокументов = СоздатьПоФайлу(ПараметрыДействия);
	КонецЕсли; 
	
	Если ПараметрыДействия.Проводить Тогда
		Для каждого Документ Из МассивДокументов Цикл
			ДокументОбъект = Документ.ПолучитьОбъект();
			НачатьТранзакцию();
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(
					"Проведение изменения цен",
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(МассивДокументов, АдресРезультата);
	
КонецПроцедуры

// Создает номенклатуру из переданной таблицы в параметрах, если этой номенклатуры нет в базе.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура СоздатьНомеклатуруИзФайла(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ.Артикул КАК Артикул,
	|	ВТ.АртикулДляПоиска КАК АртикулДляПоиска,
	|	ВТ.Производитель КАК Производитель,
	|	ВТ.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ВТ КАК ВТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АртикулДляПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(Номенклатура.Ссылка, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
	|	ТаблицаНоменклатуры.Артикул КАК Артикул,
	|	ТаблицаНоменклатуры.АртикулДляПоиска КАК АртикулДляПоиска,
	|	ТаблицаНоменклатуры.Производитель КАК Производитель,
	|	ТаблицаНоменклатуры.Наименование КАК Наименование,
	|	ЕСТЬNULL(Производители.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПроизводительСсылка
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (ТаблицаНоменклатуры.АртикулДляПоиска = Номенклатура.АртикулДляПоиска
	|				И ТаблицаНоменклатуры.Производитель = Номенклатура.Производитель.Наименование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Производители КАК Производители
	|		ПО (ТаблицаНоменклатуры.Производитель = Производители.Наименование)";
	
	Запрос.УстановитьПараметр("ВТ", Параметры.ЦеныИзФайла); 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			НовЭлемент = Справочники.Номенклатура.СоздатьЭлемент();   
			НовЭлемент.Заполнить(Неопределено); 
			НовЭлемент.Артикул = СокрЛП(Выборка.Артикул);
		    НовЭлемент.АртикулДляПоиска = Выборка.АртикулДляПоиска;
			Если ЗначениеЗаполнено(Выборка.ПроизводительСсылка) Тогда
				НовЭлемент.Производитель = Выборка.ПроизводительСсылка;
			ИначеЕсли Выборка.Производитель = "" Тогда 
				НовЭлемент.Производитель = Параметры.Производитель;
			Иначе            
		        ЗаписьЖурналаРегистрации("Автосоздание номенклатуры из файла",
					УровеньЖурналаРегистрации.Ошибка,,, 
					НСтр("ru = 'Не найден производитель " + Выборка.Производитель + ", номенклатура не будет создана!'"));   
					ВызватьИсключение НСтр("ru = 'Не найден производитель " + Выборка.Производитель + ", номенклатура не будет создана!'");
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Наименование) Тогда
				НовЭлемент.Наименование = СокрЛП(Выборка.Наименование);
			Иначе
				НовЭлемент.Наименование = НовЭлемент.Артикул;
			КонецЕсли;
			
			НовЭлемент.НаименованиеПолное = НовЭлемент.Наименование;
			
			НовЭлемент.ТипНоменклатуры = Параметры.ТипНоменклатуры; 
			НовЭлемент.ВидНоменклатуры = Параметры.ВидНоменклатуры;
			Если ЗначениеЗаполнено(Параметры.ГруппаНоменклатуры) Тогда
				НовЭлемент.Родитель = Параметры.ГруппаНоменклатуры;
			КонецЕсли;			
			Попытка
				НовЭлемент.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("Автосоздание номенклатуры из файла",
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			КонецПопытки; 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Проверяет корректность переданных параметров для создания документа изменения цен.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Функция ПроверкаЗаполненияПараметров(Параметры)

	Если Не ЗначениеЗаполнено(Параметры.ПодразделениеДокумента) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Подразделение документа должно быть указано обязательно!'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Параметры.ВидОбновления = 2 Тогда
		
		Если Параметры.ЦеныИзФайла.Количество() = 0 Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет данных для загрузки из файла!'"));
			Возврат Ложь;
			
		КонецЕсли;
		
		Если Параметры.СоздаватьНоменклатуру
			И Не (ЗначениеЗаполнено(Параметры.ТипНоменклатуры)
			И ЗначениеЗаполнено(Параметры.ВидНоменклатуры)) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнены данные, необходимые для создания номенклатуры!'"));
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Параметры.ПрайсЛистКонтрагента) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Загрузка из прайс-листа контрагента, но он не указан!'"));
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ТипыЦен.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан ни один тип цен!'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

 // Создает документы изменения цен на основании переданного прайс-листа контрагента.
// Прайс-лист контрагента должен быть загружен в регистр сведений.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Функция СоздатьПоПрайсЛисту(Параметры)
	
	МассивДокументов = Новый Массив;
	
	ТаблицаТоваров = ПрайсЛистыКонтрагентов.ДанныеИзПрайсЛиста(Параметры.ПрайсЛистКонтрагента, , Истина);
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат МассивДокументов;
	КонецЕсли;
	
	ФлагНовыйДокумент = Истина;
	СписокНоменклатуры = ТаблицаТоваров.Скопировать();
	СписокНоменклатуры.Очистить();
	
	СчетчикСтрок = 0;
	КоличествоСтрок = ТаблицаТоваров.Количество();
	СчетчикСтрокДокумента = 0;
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(СписокНоменклатуры.Добавить(), СтрокаТоваров);
		СчетчикСтрокДокумента = СчетчикСтрокДокумента + 1;
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрокДокумента < Параметры.СтрокВДокументе И СчетчикСтрок < КоличествоСтрок Тогда
			Продолжить;
		КонецЕсли;
		
		// Создадим документ
		Если СоздатьДокументИзменениеЦен(МассивДокументов, Параметры, СписокНоменклатуры) Тогда
			Возврат МассивДокументов;
		КонецЕсли;
		
		СписокНоменклатуры.Очистить();
		СчетчикСтрокДокумента = 0;
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция СоздатьДокументИзменениеЦен(МассивДокументов, Параметры, СписокНоменклатуры)
	
	ДокументОбъект = Документы.ИзменениеЦен.СоздатьДокумент();
	
	ПараметрыРасчетаТиповЦен = Новый Структура();
	ПараметрыРасчетаТиповЦен.Вставить("РасчетЦенОт",                  4);
	ПараметрыРасчетаТиповЦен.Вставить("ПроцентНаценки",               0);
	ПараметрыРасчетаТиповЦен.Вставить("ПроцентНаценкиИзНоменклатуры", Ложь);
	ПараметрыРасчетаТиповЦен.Вставить("ОкруглятьДо",                  0.01);
	
	ТекущийСписокТипЦен = СписокТиповЦен(Параметры.ТипыЦен);
	СписокТиповЦен = Новый Структура("ТекущийСписокТипЦен", ТекущийСписокТипЦен);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",                            ТекущаяДатаСеанса());
	ДанныеЗаполнения.Вставить("ДатаНачалаДействия",              Параметры.ДатаНачалаДействия);
	ДанныеЗаполнения.Вставить("ПодразделениеКомпанииПолучатель", Параметры.ПодразделениеДокумента);
	ДанныеЗаполнения.Вставить("ПодчиненныеПодразделения",        Параметры.Подразделения);
	ДанныеЗаполнения.Вставить("СписокТиповЦен",                  СписокТиповЦен);
	ДанныеЗаполнения.Вставить("ПараметрыРасчетаТиповЦен",        ПараметрыРасчетаТиповЦен);
	ДанныеЗаполнения.Вставить("ПрайсЛистКонтрагента",            Параметры.ПрайсЛистКонтрагента);
	ДанныеЗаполнения.Вставить("ХозОперация",                     Справочники.ХозОперации.УстановкаЦенКомпании);
	ДанныеЗаполнения.Вставить("СписокНоменклатуры",              СписокНоменклатуры);
	
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	Если НЕ Параметры.ДобавлятьЕслиЦенаНеИзменилась Тогда
		
		ТаблицаТекущихЦен = ПолучитьТекущиеЦены(Параметры, СписокНоменклатуры);
		
		Для Каждого Строка Из СписокНоменклатуры Цикл
			
			ЕстьРазличия = Ложь;
			
			Для Каждого ТипЦен Из ТекущийСписокТипЦен Цикл
				
				ПараметрыОтбора = Новый Структура("Номенклатура, ТипЦен", Строка.Номенклатура, ТипЦен.Значение);
				СтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
				СтрокиЦен = ТаблицаТекущихЦен.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиДокумента.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ЕстьРазличия = ЕстьРазличия  ИЛИ СтрокиЦен.Количество() = 0 ИЛИ СтрокиДокумента[0].Цена <> СтрокиЦен[0].Цена;
				
				Если ЕстьРазличия Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьРазличия Тогда
				
				СтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
				
				Для Каждого СтрокаДокумента  Из СтрокиДокумента Цикл
					ДокументОбъект.Товары.Удалить(СтрокаДокумента);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ДокументОбъект.Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			"Запись изменения цен",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		МассивДокументов = Новый Массив;
		Возврат Истина;
	КонецПопытки;
	
	МассивДокументов.Добавить(ДокументОбъект.Ссылка);
	
	Возврат Ложь;
	
КонецФункции

// Заполняет строку документа "Изменение цен" на основании переданных параметров.
//
// Параметры:
//   ДкОбъект   - Документ, в котором заполняем цены.
//   СтрокаСЦеной  - Строка таблицы значений или данные выборки, на основании которой идет заполнение цены. 
//   СтрокиСЦенами - массив строк с текущими ценами (из базы) по данной номенклатуре, в разрезе типов цен.
//
Процедура ЗаполнитьСтрокуНоменклатуры(ДкОбъект, СтрокаСЦеной, СтрокиСЦенами = Неопределено)
	
	Для каждого ТипЦены Из ДкОбъект.ПараметрыРасчета Цикл
		Если ЗначениеЗаполнено(СтрокиСЦенами) Тогда
			ЦенаРавна = Ложь;
			Для каждого Элемент Из СтрокиСЦенами Цикл
				Если Элемент.ТипЦен = ТипЦены.ТипЦен
					И Элемент.Цена = СтрокаСЦеной.Цена Тогда
					
					ЦенаРавна = Истина;
					Прервать;
			
				КонецЕсли;
			КонецЦикла;
			Если ЦенаРавна Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = ДкОбъект.Товары.Добавить();
		НоваяСтрока.ТипЦен = ТипЦены.ТипЦен;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСЦеной);
		Документы.ИзменениеЦен.ТоварыНоменклатураПриИзменении(ДкОбъект, НоваяСтрока);
		НоваяСтрока.Цена = СтрокаСЦеной.Цена;
		Документы.ИзменениеЦен.ТоварыЦенаПриИзменении(ДкОбъект, НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Создает документы изменения цен на основании переданной таблицы с ценами.
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Функция СоздатьПоФайлу(Параметры)
	МассивДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ.Артикул КАК Артикул,   
	|	ВТ.АртикулДляПоиска КАК АртикулДляПоиска,
	|	ВТ.Производитель КАК Производитель,
	|	ВТ.Цена КАК Цена
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ВТ КАК ВТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АртикулДляПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Артикул КАК Артикул,  
	|	Номенклатура.АртикулДляПоиска КАК АртикулДляПоиска,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ТаблицаНоменклатуры.Цена КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ПО (ТаблицаНоменклатуры.АртикулДляПоиска = Номенклатура.АртикулДляПоиска)
	|			И (ТаблицаНоменклатуры.Производитель = Номенклатура.Производитель.Наименование)
	|УПОРЯДОЧИТЬ ПО
	|	АртикулДляПоиска";
	Запрос.УстановитьПараметр("ВТ", Параметры.ЦеныИзФайла); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Параметры.ДобавлятьЕслиЦенаНеИзменилась Тогда
		ТаблицаТекущихЦен = ПолучитьТекущиеЦены(Параметры);		
	КонецЕсли;     
	
	ФлагНовыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		Если ФлагНовыйДокумент Тогда
		    ДкИзменениеЦены = Документы.ИзменениеЦен.СоздатьДокумент();
			ЗаполнитьШапкуДокумента(Параметры, ДкИзменениеЦены);
			ФлагНовыйДокумент = Ложь;
			СчетчикСтрок = 0;
		КонецЕсли; 
		СчетчикСтрок = СчетчикСтрок + 1;  
		Если  Не Параметры.ДобавлятьЕслиЦенаНеИзменилась Тогда
			СтруктураОтбора = Новый Структура("Номенклатура", Выборка.Номенклатура);	
			НайденныеЦены = ТаблицаТекущихЦен.НайтиСтроки(СтруктураОтбора);  
			ЗаполнитьСтрокуНоменклатуры(ДкИзменениеЦены, Выборка, НайденныеЦены);
		Иначе
			ЗаполнитьСтрокуНоменклатуры(ДкИзменениеЦены, Выборка);	
		КонецЕсли;
		
		Если СчетчикСтрок = Параметры.СтрокВДокументе Тогда
			НачатьТранзакцию();
			Попытка
				ДкИзменениеЦены.Записать(РежимЗаписиДокумента.Запись);
				ЗафиксироватьТранзакцию();
			Исключение     
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации("Запись изменения цен",
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			КонецПопытки;
			МассивДокументов.Добавить(ДкИзменениеЦены.Ссылка);		
			ФлагНовыйДокумент = Истина;
		КонецЕсли; 
	
	КонецЦикла; 
	Если Не ФлагНовыйДокумент Тогда
		НачатьТранзакцию();
		Попытка
			ДкИзменениеЦены.Записать(РежимЗаписиДокумента.Запись);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("Запись изменения цен",
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		КонецПопытки;
		МассивДокументов.Добавить(ДкИзменениеЦены.Ссылка);	
	КонецЕсли;
	
	Возврат МассивДокументов;
КонецФункции  

// Заполняет шапку документа изменения цен. 
// Параметры:
//   Параметры   - Структура - структура параметров.
//   ДокументОбъект - создаваемый документ изменения цен.
//
Процедура ЗаполнитьШапкуДокумента(Параметры, ДокументОбъект)
	
	ДокументОбъект.Заполнить(Неопределено);
	ДокументОбъект.ХозОперация = Справочники.ХозОперации.УстановкаЦенКомпании;
	ДокументОбъект.ДатаНачалаДействия = Параметры.ДатаНачалаДействия;
	Если Параметры.ВидОбновления = 1 Тогда
		ДокументОбъект.ПрайсЛистКонтрагента = Параметры.ПрайсЛистКонтрагента;
	КонецЕсли;
	
	Для Каждого ТекущийТипЦен Из Параметры.ТипыЦен Цикл
		Если ТекущийТипЦен.Выбран Тогда
			НоваяСтрока = ДокументОбъект.ПараметрыРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийТипЦен);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементМассива Из Параметры.Подразделения Цикл
		НоваяСтрока = ДокументОбъект.ПодчиненныеПодразделенияКомпании.Добавить();
		НоваяСтрока.ПодразделениеКомпании = ЭлементМассива;
	КонецЦикла;
	
	ДокументОбъект.ПодразделениеКомпании = Параметры.ПодразделениеДокумента;
	ДокументОбъект.Организация = ДокументОбъект.ПодразделениеКомпании.Организация;
	ДокументОбъект.ПодразделениеКомпанииПолучатель = Параметры.ПодразделениеДокумента;
	ДокументОбъект.БазовоеПодразделение = Параметры.ПодразделениеДокумента;
	ДокументОбъект.Комментарий = "Создан автоматически.";
КонецПроцедуры

// Дозаполняет таблицу цен, переданную в параметрах, производителем. 
// Параметры:
//   Параметры   - Структура - структура параметров.
//  
Процедура ПодготовитьТаблицу(Параметры)

	Для каждого СтрокаТЗ Из Параметры.ЦеныИзФайла Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Производитель) Тогда
			СтрокаТЗ.Производитель = Параметры.Производитель;
		КонецЕсли;
	КонецЦикла;  
	
КонецПроцедуры

// Возвращает таблицу текущих цен номенклатуры, на дату установки цен, по выбранным типам цен, по подразделению. 
// Параметры:
//   Параметры   - Структура - структура параметров.
//   ТаблицаПрайсЛиста - таблица номенклатуры из прайс-листа контрагента.
//
Функция ПолучитьТекущиеЦены(Параметры, ТаблицаПрайсЛиста = Неопределено)

	Запрос = Новый Запрос;

	Если ТаблицаПрайсЛиста = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ.Артикул КАК Артикул,
		|	ВТ.АртикулДляПоиска КАК АртикулДляПоиска,
		|	ВТ.Производитель КАК Производитель
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	&ВТ КАК ВТ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АртикулДляПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ НайденнаяНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ПО (ТаблицаНоменклатуры.АртикулДляПоиска = Номенклатура.АртикулДляПоиска)
		|			И (ТаблицаНоменклатуры.Производитель = Номенклатура.Производитель.Наименование)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныСрезПоследних.ТипЦен КАК ТипЦен,
		|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ЦеныСрезПоследних.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ РегистрЦен
		|ИЗ
		|	РегистрСведений.Цены.СрезПоследних(
		|			&ДатаДк,
		|			ТипЦен В (&ТипыЦен)
		|				И ПодразделениеКомпании = &Подразделение) КАК ЦеныСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрЦен.Номенклатура КАК Номенклатура,
		|	РегистрЦен.ТипЦен КАК ТипЦен,
		|	МАКСИМУМ(РегистрЦен.Цена) КАК Цена
		|ИЗ
		|	РегистрЦен КАК РегистрЦен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденнаяНоменклатура КАК НайденнаяНоменклатура
		|		ПО РегистрЦен.Номенклатура = НайденнаяНоменклатура.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрЦен.Номенклатура,
		|	РегистрЦен.ТипЦен
		|АВТОУПОРЯДОЧИВАНИЕ";  
		Запрос.УстановитьПараметр("ВТ", Параметры.ЦеныИзФайла);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	&ВТ КАК ВТ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныСрезПоследних.ТипЦен КАК ТипЦен,
		|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ЦеныСрезПоследних.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ РегистрЦен
		|ИЗ
		|	РегистрСведений.Цены.СрезПоследних(
		|			&ДатаДк,
		|			ТипЦен В (&ТипыЦен)
		|				И ПодразделениеКомпании = &Подразделение) КАК ЦеныСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрЦен.Номенклатура КАК Номенклатура,
		|	РегистрЦен.ТипЦен КАК ТипЦен,
		|	МАКСИМУМ(РегистрЦен.Цена) КАК Цена
		|ИЗ
		|	РегистрЦен КАК РегистрЦен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ПО РегистрЦен.Номенклатура = ТаблицаНоменклатуры.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрЦен.Номенклатура,
		|	РегистрЦен.ТипЦен
		|АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("ВТ", ТаблицаПрайсЛиста);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаДк", Параметры.ДатаНачалаДействия);
	Запрос.УстановитьПараметр("Подразделение", Параметры.ПодразделениеДокумента);
	Запрос.УстановитьПараметр("ТипыЦен", СписокТиповЦен(Параметры.ТипыЦен));
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции 

// Возвращает список значений с типами цен, выбранными для заполнения в документ. 
// Параметры:
//   ТЗТиповЦен 
//
Функция СписокТиповЦен(ТЗТиповЦен)  
	СЗ = Новый СписокЗначений;
	Для Каждого ТекущийТипЦен Из ТЗТиповЦен Цикл
		Если ТекущийТипЦен.Выбран  Тогда
			СЗ.Добавить(ТекущийТипЦен.ТипЦен);
		КонецЕсли; 
	КонецЦикла;

	Возврат СЗ;

КонецФункции

#КонецОбласти