

#Область ПрограммныйИнтерфейс

#Область РаботаСОбъектами

// Преобразование строки в соответствие
//
// Параметры:
//  Значение    - Строка - Исходная строка для разбора.
//  Разделитель - Строка - Разделитель строки для преобразования.
// 
// Возвращаемое значение:
//  Соответствие - Полученное соответствие из строки.
//
Функция СтрокаВСоответствие(Значение, Разделитель = ",") Экспорт
	Результат = Новый Соответствие;
	
	РезультатРазделения = СтрРазделить(Значение, Разделитель, Ложь);
	
	Для Каждого Строка Из РезультатРазделения Цикл
		Результат.Вставить(СокрЛП(Строка), СокрЛП(Строка));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Выполняется сравнение объектов по полям
//
// Параметры:
//	Первый			- ДанныеФормыСтруктура	- Первый объект для сравнения.
//	Второй			- ДанныеФормыСтруктура	- Второй объект для сравнения.
//	ПоляСравнения	- Соответствие, Строка	- Соответствие полей для сравнения.
//
// Возвращаемое значение:
//  Булево - Истина - если значение полей совпадут, Ложь - если отличается значение хотя бы одного поля.
//
Функция ОбъектыОдинаковыПоПолям(Первый, Второй, ПоляСравнения) Экспорт
	ТипПолей = ТипЗнч(ПоляСравнения); 
	ТипСтрока = Тип("Строка"); 
	ТипСоответствие = Тип("Соответствие");
	
	Если ТипПолей <> ТипСтрока И ТипПолей <> ТипСоответствие Тогда
		Возврат Ложь;
	ИначеЕсли ТипПолей = ТипСтрока Тогда
		ПоляСравнения = СтрокаВСоответствие(ПоляСравнения);
	КонецЕсли;
	
	Для Каждого Поле Из ПоляСравнения Цикл
		Если Первый[Поле.Ключ] <> Второй[Поле.Значение] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Создает новый массив сотоящий из элементов исходного переданного типа.
//
// Параметры:
//  Источник - Массив - Исходный массив элементов.
//  Тип - Тип - Тип элементов которые необходимо отобрать.
// 
// Возвращаемое значение:
//  Массив - Массив элементов заданого типа.
//
Функция ВыбратьИзМассиваПоТипу(Источник, Тип) Экспорт
	
	НовыйМассив = Новый Массив;
	
	Для Каждого Элемент Из Источник Цикл
		
		Если ТипЗнч(Элемент) = Тип Тогда
			
			НовыйМассив.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйМассив;
	
КонецФункции

#КонецОбласти

#Область РаботаСПланировщиком

// Сброс настроек шкал планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Объект планировщика.
//
Процедура СброситьНастройкиШкал(Планировщик) Экспорт
	
	ИндексШкалы = Планировщик.ШкалаВремени.Элементы.Количество() - 1;
	Пока ИндексШкалы > 0 Цикл
		Планировщик.ШкалаВремени.Элементы.Удалить(Планировщик.ШкалаВремени.Элементы[ИндексШкалы]);
		ИндексШкалы = ИндексШкалы - 1;
	КонецЦикла;
	
КонецПроцедуры

// Настройка шкалы времени планировщика.
//
// Параметры:
//  Планировщик		 - Планировщик				 - Планировщик.
//  Единица			 - ТипЕдиницыШкалыВремени	 - Единица шкалы.
//  Кратность		 - Число					 - Кратность шкалы планировщика.
//  Формат			 - Строка					 - Формат представления данных.
//  ЛинииДелений	 - Строка					 - Линия делений шкалы.
//  ДобавлятьНовую	 - Булево					 - Признак добавления новой шкалы.
//  Видимость		 - Булево					 - Видимость шкалы.
// 
// Возвращаемое значение:
//  ЭлементШкалыВремени - Шкала времени.
//
Функция НастроитьШкалуВремени(Планировщик, Единица, Кратность = Неопределено, Формат = Неопределено,
	ЛинииДелений = Неопределено, ДобавлятьНовую = Истина, Видимость = Истина) Экспорт
	
	Если ДобавлятьНовую Тогда
		НоваяШкала = Планировщик.ШкалаВремени.Элементы.Добавить();
	Иначе
		НоваяШкала = Планировщик.ШкалаВремени.Элементы[0];
	КонецЕсли;
	
	НоваяШкала.Видимость = Видимость;
	
	Если ТипЗнч(Единица) = Тип("ТипЕдиницыШкалыВремени") Тогда
		НоваяШкала.Единица = Единица;
	Иначе
		НоваяШкала.Единица = ТипЕдиницыШкалыВремени[Единица];
	КонецЕсли;
	
	Если Формат <> Неопределено Тогда
		НоваяШкала.Формат = Формат;
	КонецЕсли;
	
	Если Кратность <> Неопределено Тогда
		НоваяШкала.Кратность = Кратность;
	КонецЕсли;
	
	Если ЛинииДелений <> Неопределено Тогда
		ТипЛинии = ТипЗнч(ЛинииДелений);
		Если ТипЛинии = Тип("Линия") Тогда
			НоваяШкала.ЛинииДелений = ЛинииДелений;
		ИначеЕсли ТипЛинии = Тип("Строка") Тогда
			НоваяШкала.ЛинииДелений = НоваяЛиния(ЛинииДелений);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НоваяШкала;
	
КонецФункции

// Заполнение стартовой настройкой планировщика
//
// Параметры:
//  Планировщик						 - Планировщик								 - Планировщик.
//  ОтображениеВремениЭлементов		 - ОтображениеВремениЭлементовПланировщика	 - Режим отображения времени на элементах.
//  КратностьПериодическогоВарианта	 - Число									 - Длительность шкалы времени.
//
Процедура СтартоваяНастройкаПланировщика(Планировщик, ОтображениеВремениЭлементов = Неопределено, КратностьПериодическогоВарианта = Неопределено) Экспорт
	
	Если НЕ ОтображениеВремениЭлементов = Неопределено Тогда
		Планировщик.ОтображениеВремениЭлементов  = ОтображениеВремениЭлементов;
	КонецЕсли;
	
	Если НЕ КратностьПериодическогоВарианта = Неопределено Тогда
		Планировщик.КратностьПериодическогоВарианта = КратностьПериодическогоВарианта;
	КонецЕсли;
	
	Планировщик.Измерения.Очистить();
	Планировщик.Элементы.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	
КонецПроцедуры

// Добавление нового события планировщика.
//
// Параметры:
//  Планировщик			 - Планировщик	 - Планировщик.
//  Период				 - Дата			 - Период добавления.
//  Значение			 - Произвольный	 - Значение добавления.
//  ЗначениеИзмерений	 - Соответствие	 - Коллекция значений измерений.
//  Текст				 - Строка		 - Представление события.
//  Картинка			 - Картинка		 - Картинка элемента планировщика.
//  Оформление			 - Структура	 - Параметры оформления.
// 
// Возвращаемое значение:
//  ЭлементПланировщика - Элемент планировщика.
//
Функция ДобавитьНовоеСобытиеПланировщика(Планировщик, Период, Значение, ЗначениеИзмерений, Текст, Картинка = Неопределено, Оформление = Неопределено) Экспорт
	
	НовоеСобытие = Планировщик.Элементы.Добавить(Период.ДатаНачала, Период.ДатаОкончания);
	
	НовоеСобытие.Значение          = Значение;
	НовоеСобытие.Текст             = Текст;
	НовоеСобытие.ЗначенияИзмерений = Новый ФиксированноеСоответствие(ЗначениеИзмерений);
	
	Если Картинка <> Неопределено Тогда
		НовоеСобытие.Картинка = Картинка;
	КонецЕсли;
	
	Если Оформление <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НовоеСобытие, Оформление);
	КонецЕсли;
	
	Возврат Планировщик.Элементы.Индекс(НовоеСобытие);
	
КонецФункции

// Добавление измерения планировщика
//
// Параметры:
//  ИзмеренияПланировщика	 - КоллекцияИзмеренийПланировщика	 - Коллекция измерений планировщика.
//  Значение				 - Произвольный						 - Значение измерения.
//  Заголовок				 - Строка							 - Представление измерения.
//  Оформление				 - Структура						 - Параметры оформления.
// 
// Возвращаемое значение:
//  ИзмерениеПланировщика - Добавленное измерение.
//
Функция ДобавитьИзмерениеПланировщика(ИзмеренияПланировщика, Значение, Знач Заголовок = "", Оформление = Неопределено) Экспорт
	
	Если ПустаяСтрока(Заголовок) Тогда
		Попытка
			Заголовок = Строка(Значение);
		Исключение 
			Заголовок = "";
		КонецПопытки;
	КонецЕсли;
	
	НовоеИзмерение = ИзмеренияПланировщика.Добавить(Значение);
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		НовоеИзмерение.Текст = Заголовок;
	КонецЕсли;
	
	Если Оформление <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НовоеИзмерение, Оформление);
	КонецЕсли;
	
	Возврат НовоеИзмерение;
	
КонецФункции

// Процедура - Выделить строки планировщика
//
// Параметры:
//  МассивРесурсов		 - Массив		 - Массив выделенных ресурсов, должен содержать поле "Ресурс"
//  ПланировщикРесурсов	 - Планировщик	 - Поле планировщика
//  ОсновнойЦвет		 - Цвет			 - Цвет фона
//  ВыделяемыйЦвет		 - Цвет			 - Цвет выделяемой поля
//  ОсновнойШрифт		 - Шрифт		 - Шрифт основной
//  ВыделяемыйШрифт		 - Шрифт		 - Шрифт выделяемого поля.
//
Процедура ВыделитьСтрокиПланировщика(МассивРесурсов, ПланировщикРесурсов, ОсновнойЦвет = Неопределено,
	ВыделяемыйЦвет = Неопределено, ОсновнойШрифт = Неопределено, ВыделяемыйШрифт = Неопределено) Экспорт
	
	// Проверим, массив ли это
	Если ТипЗнч(МассивРесурсов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим количество
	Если МассивРесурсов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОформлениеБазовое = Новый Структура;
	ОформлениеБазовое.Вставить("ЦветФона"  , ?(ОсновнойЦвет = Неопределено, Новый Цвет(255, 255, 255), ОсновнойЦвет));
	
	ОформлениеВыделенного = Новый Структура;
	ОформлениеВыделенного.Вставить("ЦветФона"  , ?(ВыделяемыйЦвет = Неопределено, Новый Цвет(172, 176, 181), ВыделяемыйЦвет));
	
	Для Каждого Элемент Из ПланировщикРесурсов.Измерения Цикл
		Для Каждого ЭлементРесурс Из Элемент.Элементы Цикл
			Если МассивРесурсов.Найти(ЭлементРесурс.Значение) = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЭлементРесурс, ОформлениеБазовое);
			Иначе
				ЗаполнитьЗначенияСвойств(ЭлементРесурс, ОформлениеВыделенного);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Добавление недели к дате
//
// Параметры:
//  Дата		 - Дата	 - Исходная дата.
//  ЧислоНедель	 - Число - Количество недель.
// 
// Возвращаемое значение:
//  Дата - Полученная дата.
//
Функция ДобавитьНеделю(Дата, ЧислоНедель) Экспорт
	
	СекундВНеделе = 604800;
	
	Возврат (Дата + ЧислоНедель * СекундВНеделе);
	
КонецФункции

// Получение границы периода
//
// Параметры:
//  Дата	 - Дата	 - Исходная дата.
//  Режим	 - Число - Режим периода.
// 
// Возвращаемое значение:
//  Структура - Сожержит дату начала и дату окончания.
//
Функция ГраницыПериода(Дата, Режим) Экспорт
	
	Если Режим = 0 Тогда
		Начало = НачалоМесяца(Дата);
		Конец  = КонецМесяца(дата);
	ИначеЕсли Режим = 1 Тогда
		Начало = НачалоНедели(Дата);
		Конец  = КонецНедели(ДобавитьНеделю(Дата, 1));
	ИначеЕсли Режим = 2 Тогда
		Начало = НачалоНедели(Дата);
		Конец  = КонецНедели(Дата);
	Иначе
		Начало = Дата;
		Конец  = Дата;
	КонецЕсли;
	
	Возврат Новый Структура("Начало,Конец", Начало, Конец);
	
КонецФункции

#КонецОбласти

#Область РаботаСТаблицамиЗначений

// Устанавливает в колонку таблицы значение
// 
// Параметры:
//	Значение   - Произвольный                            - Устанавливаемое значение
//	Таблица    - ТаблицаЗначений, ТабличнаяЧасть, Массив - Таблица назначения
//	ИмяКолонки - Строка                                  - Имя колонки для установки значения.
//	Исключения - ТаблицаЗначений                         - таблица с исключениями
//
Процедура УстановитьЗначениеКолонкиПометки(Значение, Таблица, ИмяКолонки = "Пометка", Исключения = Неопределено) Экспорт
	Для Каждого Строка Из Таблица Цикл
		Если Исключения <> Неопределено И Исключения.Найти(Строка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Строка[ИмяКолонки] = Значение;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомЗначений

// Процедура - Устанавливает значение в колонке дерева.
//
// Параметры:
//  Дерево     - ДеревоЗначений, ДанныеФормыДерево - Объект дерева.
//  Значение   - Произвольный - Значение которое необходимо установить.
//  ИмяКолонки - Строка - Имя колонки.
//
Процедура УстановитьЗначениеКолонкиВДереве(Дерево, Значение, ИмяКолонки) Экспорт
	
	Если ТипЗнч(Дерево) = Тип("ДанныеФормыДерево") Тогда
		УстановитьЗначениеКолонкиВДанныхФормыДерево(Дерево, Значение, ИмяКолонки);
	Иначе
		УстановитьЗначениеКолонкиВДеревеЗначений(Дерево, Значение, ИмяКолонки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтроками

// Переворачивает строку
//
// Параметры:
//  ИсходнаяСтрока	 - Строка	 - Строка, которую необходимо перевернуть.
// 
// Возвращаемое значение:
//  Строка - Перевернутая строка.
//
Функция ИнверсияСтроки(ИсходнаяСтрока) Экспорт
	
	Если ТипЗнч(ИсходнаяСтрока) <> Тип("Строка") Тогда
		Возврат ИсходнаяСтрока; 
	КонецЕсли;
	
	// Перевернем строку
	ВременнаяСтрока = "";
	ДлинаСтроки = -СтрДлина(ИсходнаяСтрока);
	Для Счетчик = ДлинаСтроки По -1 Цикл
		ВременнаяСтрока = ВременнаяСтрока + Сред(ИсходнаяСтрока, -Счетчик , 1);
	КонецЦикла;
	Возврат ВременнаяСтрока;
	
КонецФункции

// Удаляет из строки недопустимые в ней символы.
//
// Параметры:
//  Строка - Строка - Фильтруемая строка.
//  ДоступныеСимволы - Строка - Символы которые необходимо оставить в строке.
//
// Возвращаемое значение:
//  Строка- Строка без запрещенных символов.
//
Функция ОтфильтроватьСтроку(Строка, ДоступныеСимволы) Экспорт
	
	Результат = "";
	
	Если ПустаяСтрока(ДоступныеСимволы) Тогда
		
		Возврат Строка;
		
	КонецЕсли;
	
	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		
		Символ = Сред(Строка, НомерСимвола, 1);
		
		Если СтрНайти(ДоступныеСимволы, Символ) > 0 Тогда
			
			Результат = Результат + Символ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ОтфильтроватьСтроку()

// Удаляет из артикула все символы которые не являются русскими или латинскими символами и цифрами.
// Переводит строку в верхний регистр.
//
// Параметры:
//  Артикул - Строка - Артикул для преобразования.
//
// Возвращаемое значение:
//  Строка - Артикул для поиска.
//
Функция ВАртикулДляПоиска(Знач Артикул) Экспорт
	
	Артикул = СокрЛП(ВРег(Артикул));
	ДопустимыеСимволы = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯ";
	Возврат ОтфильтроватьСтроку(Артикул, ДопустимыеСимволы);
	
КонецФункции // ВАртикулДляПоиска()

#КонецОбласти

#Область РаботаСЧасовымиПоясами

// Перевести в часовой пояс ИБ
//
// Параметры:
//  МестноеВремя - Дата	 - Дата смещения.
//  Смещение	 - Число - Смещение даты.
// 
// Возвращаемое значение:
//  Дата - Смещенная дата.
//
Функция ВЧасовойПоясИБ(Знач МестноеВремя, Смещение) Экспорт
	
	Если ЗначениеЗаполнено(МестноеВремя) Тогда
		
		МестноеВремя = МестноеВремя - Смещение;
		
	КонецЕсли;
	
	Возврат МестноеВремя;
	
КонецФункции

// Перевести дату в часовой пояс подразделения
//
// Параметры:
//  ВремяСеансаИБ - Дата	 - Дата смещения.
//  Смещение	 - Число - Смещение даты.
// 
// Возвращаемое значение:
//  Дата - Смещенная дата.
//
Функция ВЧасовойПоясПодразделения(Знач ВремяСеансаИБ, Смещение) Экспорт
	
	Если ЗначениеЗаполнено(ВремяСеансаИБ) Тогда
		
		ВремяСеансаИБ = ВремяСеансаИБ + Смещение;
		
	КонецЕсли;
	
	Возврат ВремяСеансаИБ;
	
КонецФункции

#КонецОбласти

// Формирует представление числа для определенного языка и параметров числа.
//  Представление параметров:
//  ┌──────┬──────┬─────────────────┬────────────────┬───────────────────┬───────────────────────┬────────────────┐
//  │ Lang │ Zero │ One             │ Two            │ Few               │ Many                  │ Other          │
//  ├──────┼──────┼─────────────────┼────────────────┼───────────────────┼───────────────────────┼────────────────┤
//  │ ru   │      │ XX1 / X11       │                │ XX2─XX4 / X12─X14 │ XX0, XX5─XX9, X11─X14 │ дробные        │
//  │ Card.│      │ остался %1 день │                │ осталось %1 дня   │ осталось %1 дней      │ осталось %1 дня│
//  │      │      │ вижу %1 рыбу    │                │ вижу %1─х рыб     │ вижу %5 рыб           │ вижу %1 рыбы   │
//  ├──────┼──────┼─────────────────┼────────────────┼───────────────────┼───────────────────────┼────────────────┤
//  │ ru   │      │                 │                │                   │                       │ других нет     │
//  │ Ord. │      │                 │                │                   │                       │ %1─й день      │
//  ├──────┼──────┼─────────────────┼────────────────┼───────────────────┼───────────────────────┼────────────────┤
//  │ en   │      │ для 1           │                │                   │                       │ остальное      │
//  │ Card.│      │ left %1 day     │                │                   │                       │ left %1 days   │
//  ├──────┼──────┼─────────────────┼────────────────┼───────────────────┼───────────────────────┼────────────────┤
//  │ en   │      │ XX1 / X11       │ XX2 / X12      │ XX3 / X13         │                       │ остальное      │
//  │ Ord. │      │ %1st day        │ %1nd day       │ %1rd day          │                       │ %1th day.      │
//  └──────┴──────┴─────────────────┴────────────────┴───────────────────┴───────────────────────┴────────────────┘
//  ┌──────┬───────────────────────────┐
//  │Card. │ Cardinal ─ Количественное;│
//  │ Ord. │ Ordinal  - Порядковое;    │
//  ├──────┼───────────────────────────┤
//  │   X  │ любая цифра;              │
//  │   /  │ кроме.                    │
//  └──────┴───────────────────────────┘
//
// Параметры:
//  Шаблон          - Строка - строка, содержит перечисленные через точку с запятой 6 форм строки
//                             для каждой категории числительного: 
//                             - %1 обозначает позицию числа;
//  Число           - Число - число, которое будет подставлено в строку вместо параметра "%1".
//  Вид             - ВидЧисловогоЗначения - определяет вид числового значения, для которого формируется представление. 
//                             - количественное (по умолчанию) или Порядковое.
//  ФорматнаяСтрока - Строка - строка параметров форматирования. См. аналогичный параметр в СтрокаСЧислом. 
//
// Возвращаемое значение:
//  Строка - представление строки числа в требуемой форме.
//
// Пример:
//
//  Строка = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
//		НСтр("ru=';остался %1 день;;осталось %1 дня;осталось %1 дней;осталось %1 дня';
//		     |en=';left %1 day;;;;left %1 days'"), 
//		0.05,, "ЧДЦ=1");
// 
Функция СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, Число, Вид = Неопределено, ФорматнаяСтрока = Неопределено) Экспорт

	Если ПустаяСтрока(Шаблон) Тогда
		Возврат Формат(Число, ФорматнаяСтрока); 
	КонецЕсли;

	Если Вид = Неопределено Тогда
		Вид = ВидЧисловогоЗначения.Количественное;
	КонецЕсли;

	Возврат СтрокаСЧислом(Шаблон, Число, Вид, ФорматнаяСтрока);

КонецФункции

// Возвращает результат проверки строки на допустимые символы
//
// Параметры: 
//  Строка - Строка - проверяемая строка
//  ДопустимыеСимволы  - строка, допустимых символов
//
// Возвращаемое значение: 
//  Булево - результат проверки
//
Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы) Экспорт 
	МассивСимволов = Новый Массив;
	Для Позиция = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		МассивСимволов.Добавить(Сред(ДопустимыеСимволы,Позиция,1));
	КонецЦикла;
	
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Если МассивСимволов.Найти(Сред(Строка, Позиция, 1)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Получает представление телефона без кода страны "+7".
//
// Параметры:
//  НомерТелефона - Строка - Представление номера телефона.
// 
// Возвращаемое значение:
//  Строка - 10 знаков номера телефона.
//
Функция НомерТелефонаБезКодаСтраны(НомерТелефона) Экспорт
	
	Результат = "";
	РазрешенныеСимволы= "0123456789";
	
	Для Индекс = 1 По СтрДлина(НомерТелефона) Цикл
		
		Символ = Сред(НомерТелефона, Индекс, 1);
		Если СтрНайти(РазрешенныеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Прав(Результат, 10);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяЛиния(Знач Описание)
	
	ТипыЛиний = Новый Соответствие;
	ТипыЛиний.Вставить("нет"  , "НетЛинии");
	ТипыЛиний.Вставить("пнк"  , "Пунктир");
	ТипыЛиний.Вставить("пнкт" , "ПунктирТочка");
	ТипыЛиний.Вставить("пнктт", "ПунктирТочкаТочка");
	ТипыЛиний.Вставить("спл"  , "Сплошная");
	ТипыЛиний.Вставить("точ"  , "Точечная");
	
	Описание = СтрРазделить(Описание, ":");
	
	ТипЛинии = ТипыЛиний.Получить(Описание[0]);
	Если ТипЛинии = Неопределено Тогда
		ТипЛинии = "Сплошная";
	КонецЕсли;
	
	Возврат Новый Линия(ТипЛинииЯчейкиТабличногоДокумента[ТипЛинии], Число(Описание[1]));
	
КонецФункции

Процедура УстановитьЗначениеКолонкиВДеревеЗначений(Дерево, Значение, ИмяКолонки)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Строка[ИмяКолонки] = Значение;
		
		УстановитьЗначениеКолонкиВДеревеЗначений(Строка, Значение, ИмяКолонки);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеКолонкиВДанныхФормыДерево(Дерево, Значение, ИмяКолонки)
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка[ИмяКолонки] = Значение;
		
		УстановитьЗначениеКолонкиВДанныхФормыДерево(Строка, Значение, ИмяКолонки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти