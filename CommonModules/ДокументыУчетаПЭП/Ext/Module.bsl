
#Область ПрограммныйИнтерфейс

// Участники документа учета.
// 
// Параметры:
//  ДокументУчета - ОпределяемыйТип.ПодписываемыеДокументыПЭП - Документ учета;
// 
// Возвращаемое значение:
//  Структура -  Участники документа учета:
// * ЮридическоеЛицоПЭП - ОпределяемыйТип.ЮридическиеЛицаПЭП, Неопределено -
// * КонтактноеЛицоПЭП - ОпределяемыйТип.КонтактныеЛицаПЭП, Неопределено -
// * ФизическоеЛицоПЭП - ОпределяемыйТип.ФизическиеЛицаПЭП, Неопределено -
Функция УчастникиДокументаУчета(ДокументУчета) Экспорт
	
	Возврат ДокументыУчетаПЭППереопределяемый.УчастникиДокументаУчета(ДокументУчета);
	
КонецФункции

// Новые параметры при создании на сервере форма печати документов.
// 
// Возвращаемое значение:
//  Структура -  Новые параметры при создании на сервере форма элемента:
// * МестоРазмещения - ГруппаФормы, Строка, Неопределено - Место размещения команд;
Функция НовыеПараметрыПриСозданииНаСервере_ПечатьДокументов() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("МестоРазмещения", Неопределено);
	Возврат Результат;
	
КонецФункции

// При создании на сервере формы печати документов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объекты формы;
//  ПараметрыНастройкиФормы - см. УчастникиПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаЭлемента
Процедура ПриСозданииНаСервере_ПечатьДокументов(Форма, ПараметрыНастройкиФормы = Неопределено) Экспорт
	
	Если
		ПолучитьФункциональнуюОпцию("ИспользоватьПЭП") = Ложь
		Или Не ПравоДоступа("Изменение", Метаданные.Документы.ЗаявкаНаПодпись)
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоллекцияКоманд = КомандыПечатьДокументовПоУмолчанию(ОбщегоНазначенияПЭП.КоллекцияКоманд());
	Результат = ДокументыУчетаПЭППереопределяемый.ПередДобавлениемКомандНаФормуПечатиДокумента(Форма,
		ПараметрыНастройкиФормы, КоллекцияКоманд);
	
	СтандартнаяОбработка = Истина;
	Если Результат.Свойство("СтандартнаяОбработка", СтандартнаяОбработка) И Не СтандартнаяОбработка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыНастройкиФормы.МестоРазмещения = Неопределено Тогда
		
		ПараметрыНастройкиФормы.МестоРазмещения = ОбщегоНазначенияПЭП.МестоРазмещенияКоманд(Форма);
		
	КонецЕсли;
	
	Для Каждого Команда Из Результат.КоллекцияКоманд Цикл
		
		НоваяКоманда = Форма.Команды.Добавить(Команда.ИмяКоманды);
		НоваяКоманда.Действие = Команда.Действие;
		НоваяКоманда.Заголовок = Команда.Заголовок;
		НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
		НоваяКоманда.Картинка = БиблиотекаКартинок.ЛоготипПЭП;
		НоваяКоманда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		НовыйЭлемент = Форма.Элементы.Добавить(Команда.ИмяКоманды, Тип("КнопкаФормы"),
			ПараметрыНастройкиФормы.МестоРазмещения);
		НовыйЭлемент.ИмяКоманды = Команда.ИмяКоманды;
		
	КонецЦикла;
	
КонецПроцедуры

// Новые параметры формы списка документа учета.
// 
// Возвращаемое значение:
//  Структура -  Новые параметры при создании на сервере форма элемента:
// * ПустаяСсылка - Неопределено, ЛюбаяСсылка - Пустая ссылка на используемый объект;
// * Список - ДинамическийСписок, Неопределено - Объект днамического списка;
// * ЭлементСписка - ПолеФормы, Неопределено - Объект элемента формы списка;
Функция НовыеПараметрыПриСозданииНаСервере_ФормаСписка() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПустаяСсылка", Неопределено);
	Результат.Вставить("Список", Неопределено);
	Результат.Вставить("ЭлементСписка", Неопределено);
	Возврат Результат;
	
КонецФункции

// Метод для настройки формы документа учета.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объект формы;
//  ПараметрыНастройкиФормы - см. ДокументыУчетаПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаСписка
Процедура ПриСозданииНаСервере_ФормаСписка(Форма, ПараметрыНастройкиФормы = Неопределено) Экспорт
	
	Если
		ПолучитьФункциональнуюОпцию("ИспользоватьПЭП") = Ложь
		Или Не ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаПодпись)
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ПараметрыНастройкиФормы.Свойство("Список") Или ПараметрыНастройкиФормы.Список = Неопределено Тогда
		
		ПараметрыНастройкиФормы.Список = Форма.Список;
		
	КонецЕсли;
	
	НовыйЗапросДинамическогоСписка = ДокументыУчетаПЭППереопределяемый.ЗапросДинамическогоСписка(
		ПараметрыНастройкиФормы.Список.ТекстЗапроса,
		ПараметрыНастройкиФормы
	);
	
	Если
		НовыйЗапросДинамическогоСписка <> Неопределено
		И НовыйЗапросДинамическогоСписка <> ПараметрыНастройкиФормы.Список.ТекстЗапроса
	Тогда
		
		ПараметрыНастройкиФормы.Список.ТекстЗапроса = НовыйЗапросДинамическогоСписка;
		ДокументыУчетаПЭППереопределяемый.ПриОбновленииЗапросаДинамическогоСписка(Форма, ПараметрыНастройкиФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Список при получении данных на сервере.
// 
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента
//  Настройки - НастройкиКомпоновкиДанных - Настройки
//  Строки - СтрокиДинамическогоСписка - Строки
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	
	Если Настройки.Выбор.ДоступныеПоляВыбора.Элементы.Найти("ЗаявкиНаПодписьПредставление") = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Ключи = Строки.ПолучитьКлючи();
	ДанныеПоЗаявкам = ЗаявкиНаПодписьПоДокументамУчета(Ключи);
	
	Для Каждого Ключ Из Ключи Цикл
		
		ИнформацияОПодчиненныхЗаявках = ДанныеПоЗаявкам.Получить(Ключ);
		
		Если ИнформацияОПодчиненныхЗаявках = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		//@skip-check wrong-type-expression
		Оформление = Строки.Получить(Ключ).Оформление.Получить("ЗаявкиНаПодписьПредставление");
		Оформление.УстановитьЗначениеПараметра("Текст", ИнформацияОПодчиненныхЗаявках.Представление);
		
		Если ИнформацияОПодчиненныхЗаявках.Количество() > 0 Тогда
			
			Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
			Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Новые параметры при создании на сервере форма документа учета.
// 
// Возвращаемое значение:
//  Структура -  Новые параметры при создании на сервере форма элемента:
// * ПустаяСсылка - ЛюбаяСсылка, Неопределено - Пустая ссылка на участинка ПЭП;
// * МестоРазмещения - ГруппаФормы, Строка, Неопределено - Место размещения команд;
// * РазместитьПеред - ГруппаФормы, Строка, Неопределено - Элемент перед которым следует расположить гиперссылку
Функция НовыеПараметрыПриСозданииНаСервере_ФормаДокумента() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПустаяСсылка", Неопределено);
	Результат.Вставить("МестоРазмещения", Неопределено);
	Результат.Вставить("РазместитьПеред", Неопределено);
	Возврат Результат;
	
КонецФункции

// При создании на сервере формы элемента участника ПЭП.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объекты формы;
//  ПараметрыНастройкиФормы - см. ДокументыУчетаПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаДокумента
Процедура ПриСозданииНаСервере_ФормаДокумента(Форма, ПараметрыНастройкиФормы = Неопределено) Экспорт
	
	Если
		ПолучитьФункциональнуюОпцию("ИспользоватьПЭП") = Ложь
		Или Не ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаПодпись)
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИнформацияОПодчиненныхЗаявках = ЗаявкиНаПодписьПоДокументамУчета(
		МассивыКлиентСервер.Создать(Форма.Объект.Ссылка)
	).Получить(Форма.Объект.Ссылка);
	
	Если ИнформацияОПодчиненныхЗаявках.Документы = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МестоРазмещения = Неопределено;
	РазместитьПеред = Неопределено;
	
	Если ТипЗнч(ПараметрыНастройкиФормы.МестоРазмещения) = Тип("Строка") Тогда
		
		МестоРазмещения = Форма.Элементы.Найти(ПараметрыНастройкиФормы.МестоРазмещения);
		
	Иначе
		
		МестоРазмещения = ПараметрыНастройкиФормы.МестоРазмещения;
		
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыНастройкиФормы.РазместитьПеред) = Тип("Строка") Тогда
		
		РазместитьПеред = Форма.Элементы.Найти(ПараметрыНастройкиФормы.РазместитьПеред);
		
	Иначе
		
		РазместитьПеред = ПараметрыНастройкиФормы.РазместитьПеред;
		
	КонецЕсли;
	
	ИспользоватьЗаписьНаРемонт = Форма.Элементы.Добавить(
		"ДекорацияЗаявкиНаПодписьПредставление",
		Тип("ДекорацияФормы"),
		МестоРазмещения
	);
	
	Если РазместитьПеред <> Неопределено Тогда
		
		Форма.Элементы.Переместить(ИспользоватьЗаписьНаРемонт, ИспользоватьЗаписьНаРемонт.Родитель, РазместитьПеред);
		
	КонецЕсли;
	
	ИспользоватьЗаписьНаРемонт.Заголовок = СтрШаблон(НСтр("ru = 'Заявки на подпись ПЭП: %1'"),
		ИнформацияОПодчиненныхЗаявках.Представление);
	ИспользоватьЗаписьНаРемонт.Гиперссылка = Истина;
	ИспользоватьЗаписьНаРемонт.УстановитьДействие("Нажатие",
		"Подключаемый_ДекорацияЗаявкиНаПодписьПредставлениеНажатие");
	
КонецПроцедуры

// Подготовить данные для заявки на подпись по печатной форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма печатного документа;
// 
// Возвращаемое значение:
//  Структура -  Подготовить данные для заявки на подпись по печатной форме:
// * АдресФайлаВоВременномХранилище - Строка - 
// * ДокументУчета - ДокументСсылка, Неопределено - 
// * ИмяПечатнойФормы - Строка -
Функция ПодготовитьДанныеДляЗаявкиНаПодписьПоПечатнойФорме(Форма) Экспорт
	
	СтандартнаяОбработка = Истина;
	Результат = ДокументыУчетаПЭППереопределяемый.ПередПодготовкойДанныхДляЗаявкиНаПодписьПоПечатнойФорме(
		Форма, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если Форма.НастройкиПечатныхФорм.Количество() = 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Нет данных для подписания'");
		
	ИначеЕсли Форма.НастройкиПечатныхФорм.Количество() = 1 Тогда
		
		ОписаниеОтправляемойФормы = Форма.НастройкиПечатныхФорм[0];
		
	ИначеЕсли Форма.НастройкиПечатныхФорм.Количество() > 1 Тогда
		
		ВызватьИсключение НСтр("ru = 'Не реализовано подписание комплектов'"); 
		
	КонецЕсли;
	
	ПечатнаяФорма = Форма[ОписаниеОтправляемойФормы.ИмяРеквизита]; // ТабличныйДокумент
	ДокументУчета = Неопределено;
	
	Для Каждого ОбъектПечати Из Форма.ОбъектыПечати Цикл
		
		ИмяОбласти = ОбъектПечати.Представление;
		Область = ПечатнаяФорма.Области.Найти(ИмяОбласти);
		
		Если Область = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Форма.ОбъектыПечати.Количество() > 1 Тогда
			
			ТабличныйДокумент = ПечатнаяФорма.ПолучитьОбласть(Область.Верх, Область.Лево, Область.Низ, Область.Право);
			ПоследняяСтрока = ТабличныйДокумент.Область(
				ТабличныйДокумент.ВысотаТаблицы,
				,
				ТабличныйДокумент.ВысотаТаблицы
			);
			ПоследняяСтрока.КонецСтраницы = Ложь;
			ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, КопируемыеСвойстваТабличногоДокумента());
			ПечатнаяФорма = ТабличныйДокумент;
			
		КонецЕсли;
		
		ДокументУчета = ОбъектПечати.Значение;
		Прервать;
		
	КонецЦикла;
	
	Поток = Новый ПотокВПамяти();
	ПечатнаяФорма.Записать(Поток, ТипФайлаТабличногоДокумента.PDF);
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(
		Поток.ЗакрытьИПолучитьДвоичныеДанные(),
		Форма.УникальныйИдентификатор
	);
	
	ИмяПечатнойФормы = ОписаниеОтправляемойФормы.Представление; // Строка
	
	Возврат Новый Структура(
		"АдресФайлаВоВременномХранилище,ДокументУчета,ИмяПечатнойФормы",
		АдресФайлаВоВременномХранилище,
		ДокументУчета,
		ИмяПечатнойФормы
	);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Команды формы печати документа по умолчанию.
// 
// Параметры:
//  КоллекцияКоманд - см. ОбщегоНазначения.КоллекцияКоманд
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ОбщегоНазначения.КоллекцияКоманд 
Функция КомандыПечатьДокументовПоУмолчанию(КоллекцияКоманд)
	
	НоваяКоманда = КоллекцияКоманд.Добавить();
	НоваяКоманда.ИмяКоманды = "ОтправитьНаСерверПЭП";
	НоваяКоманда.Действие = "Подключаемый_ВыполнитьКомандуПЭП";
	НоваяКоманда.Заголовок = НСтр("ru = 'Отправить на подпись ПЭП'");
	Возврат КоллекцияКоманд;
	
КонецФункции

Функция КопируемыеСвойстваТабличногоДокумента()
	Возврат "АвтоМасштаб,Вывод,ВысотаСтраницы,ДвусторонняяПечать,Защита,ИмяПринтера,КодЯзыка,
	|КоличествоЭкземпляров,МасштабПечати,НомерПервойСтраницы,ОриентацияСтраницы,ПолеСверху,ПолеСлева,
	|ПолеСнизу,ПолеСправа,РазборПоКопиям,РазмерКолонтитулаСверху,РазмерКолонтитулаСнизу,РазмерСтраницы,
	|ТочностьПечати,ФоноваяКартинка,ЧерноБелаяПечать,ШиринаСтраницы,ЭкземпляровНаСтранице";
КонецФункции

Функция ЗаявкиНаПодписьПоДокументамУчета(ДокументыУчета)
	
	Результат = Новый Соответствие();
	
	Для Каждого Документ Из ДокументыУчета Цикл
		
		Результат.Вставить(
			Документ,
			Новый Структура(
				"Представление,Документы",
				НСтр("ru = 'Нет документов'"),
				Новый Массив()
			)
		);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СостоянияЗаявокНаПодписьСрезПоследних.ЗаявкаНаПодпись КАК ЗаявкаНаПодпись,
		|	СостоянияЗаявокНаПодписьСрезПоследних.Состояние КАК Состояние,
		|	СостоянияЗаявокНаПодписьСрезПоследних.ЗаявкаНаПодпись.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	РегистрСведений.СостоянияЗаявокНаПодпись.СрезПоследних(, ЗаявкаНаПодпись.ДокументОснование В (&ДокументыУчета)) КАК СостоянияЗаявокНаПодписьСрезПоследних
		|ГДЕ
		|	СостоянияЗаявокНаПодписьСрезПоследних.ЗаявкаНаПодпись.ПометкаУдаления = ЛОЖЬ
		|ИТОГИ
		|	КОЛИЧЕСТВО(Состояние)
		|ПО
		|	ДокументОснование"
	);
	Запрос.УстановитьПараметр("ДокументыУчета", ДокументыУчета);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ДокументыОснования = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ДокументыОснования.Следующий() Цикл
		
		ВсегоЗаявок = ДокументыОснования.Состояние;
		ЗавершеноЗаявок = 0;
		ЭлементРезультата = Результат.Получить(ДокументыОснования.ДокументОснование);
		ЗаявкиНаПодпись = ДокументыОснования.Выбрать();
		
		Пока ЗаявкиНаПодпись.Следующий() Цикл
			
			Если
				ЗаявкиНаПодпись.Состояние = Перечисления.СтатусыЗаявокНаПодпись.Подписан
				Или ЗаявкиНаПодпись.Состояние = Перечисления.СтатусыЗаявокНаПодпись.Отклонен
			Тогда
				
				ЗавершеноЗаявок = ЗавершеноЗаявок + 1;
				
			КонецЕсли;
			
			
			ЭлементРезультата.Документы.Добавить(ЗаявкиНаПодпись.ЗаявкаНаПодпись);
			
		КонецЦикла;
		
		ЭлементРезультата.Представление = СтрШаблон(
			НСтр("ru = '%1 из %2'"),
			ЗавершеноЗаявок,
			ВсегоЗаявок
		);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти