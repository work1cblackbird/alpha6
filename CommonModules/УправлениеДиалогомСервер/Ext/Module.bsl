// Общий модуль "Управление диалогом (сервер)"

#Область ПрограммныйИнтерфейс

// Возвращает метаданные объекта, которому принадлежит переданная форма.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, для которой производиться получение объекта описания метаданных.
// 
// Возвращаемое значение:
//  ОбъектМетаданных - Найденный объект.
//
Функция ПолучитьМетаданныеОбъектаФормы(Форма) Экспорт
	
	// Определим имя формы
	ИмяФормы = ?(ТипЗнч(Форма) = Тип("Строка"), Форма, Форма.ИмяФормы);
	
	// Произведем разложение переданного имени на составляющие
	ЭлементыИмениОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".");
	
	// Формируем полное имя объекта метаданных
	ПолноеИмя = ЭлементыИмениОбъекта[0] + "." + ЭлементыИмениОбъекта[1];
	
	// Получаем объект описания метаданных по переданному имени
	Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
КонецФункции // ПолучитьМетаданныеОбъектаФормы()

// Функция возвращает расширенное представление списка для переданного объекта.
//
// Параметры:
//  Объект - УправляемаяФорма, ОбъектМетаданных, Ссылка - искомый объект.
//
// Возвращаемое значение:
//  Структура - представление объекта.
//
Функция ПредставлениеСпискаОбъектов(Объект) Экспорт
	
	// Получим метаданные переданного объекта
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбъектМетаданных = ПолучитьМетаданныеОбъектаФормы(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Объект;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	КонецЕсли;
	
	// Некоторые свойства представления могут не существовать для объектов данного типа.
	Представления = Новый Структура("РасширенноеПредставлениеСписка,ПредставлениеСписка");
	ЗаполнитьЗначенияСвойств(Представления, ОбъектМетаданных);
	
	// Проверим какое из свойств представления заполнено
	Если НЕ ПустаяСтрока(Представления.РасширенноеПредставлениеСписка) Тогда
		Возврат Представления.РасширенноеПредставлениеСписка;
		
	ИначеЕсли НЕ ПустаяСтрока(Представления.ПредставлениеСписка) Тогда
		Возврат Представления.ПредставлениеСписка;
		
	Иначе
		Возврат ОбъектМетаданных.Представление();
	КонецЕсли;
	
КонецФункции // ПредставлениеСпискаОбъектов()

// Функция возвращает расширенное представление объекта по переданному имени метаданных.
//
// Параметры:
//  Объект - УправляемаяФорма, ОбъектМетаданных, Ссылка - искомый объект.
//
// Возвращаемое значение:
//  Структура - представление объекта.
//
Функция ПредставлениеОбъект(Объект) Экспорт
	
	// Получим метаданные переданного объекта
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбъектМетаданных = ПолучитьМетаданныеОбъектаФормы(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Объект;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	КонецЕсли;
	
	// Некоторые свойства представления могут не существовать для объектов данного типа.
	Представления = Новый Структура("РасширенноеПредставлениеОбъекта,ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(Представления, ОбъектМетаданных);
	
	// Проверим какое из свойств представления заполнено
	Если НЕ ПустаяСтрока(Представления.РасширенноеПредставлениеОбъекта) Тогда
		Возврат Представления.РасширенноеПредставлениеОбъекта;
		
	ИначеЕсли НЕ ПустаяСтрока(Представления.ПредставлениеОбъекта) Тогда
		Возврат Представления.ПредставлениеОбъекта;
		
	Иначе
		Возврат ОбъектМетаданных.Представление();
	КонецЕсли;
	
КонецФункции // ПредставлениеОбъект()

// Производит добавление в форму реквизитов в соответствии с переданной коллекцией.
//
// Параметры:
//  Форма		- УправляемаяФорма	- Форма, в которую производиться добавление реквизитов.
//  Реквизиты	- Структура			- Перечень добавляемых в форму реквизитов
//
Процедура ДобавитьРеквизитыФормы(Форма, Реквизиты) Экспорт
	
	// Проверяем целесообразность дальнейших операций
	Если Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Производим создание дополнительных реквизитов формы
	ПереченьНовыхРеквизитов = Новый Массив();
	Для каждого Реквизит Из Реквизиты Цикл
		ТипыРеквизита = Новый Массив();
		ТипыРеквизита.Добавить(ТипЗнч(Реквизит.Значение));
		ПереченьНовыхРеквизитов.Добавить(Новый РеквизитФормы(Реквизит.Ключ, Новый ОписаниеТипов(ТипыРеквизита)));
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ПереченьНовыхРеквизитов);
	
	// Производим заполнение новых реквизит данными
	ЗаполнитьЗначенияСвойств(Форма, Реквизиты);
	
КонецПроцедуры // ДобавитьРеквизитыФормы()

// Установка/снятие пометок незаполненных реквизитов на формах документа.
//
// Параметры:
//  Форма									- УправляемаяФорма		- Форма, на которой надо расставить пометки незаполненного.
//  Объект									- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//  СписокОбязательныхРеквизитов			- СписокЗначений		- Структура обязательных реквизитов. Если параметр не задан,
//																		то обязательные реквизиты будут получены из менеджера объекта.
//  СнятиеСтарыхАвтоотметокНезаполненного	- Булево				- Признак необходимости снятия пометок у всех элементов формы.
//  СуффиксКолонок							- Строка				- Содержит суффикс колонок.
//
Процедура РасставитьАвтоотметкиНезаполненного(Форма,
		Объект,
		СписокОбязательныхРеквизитов = Неопределено,
		СнятиеСтарыхАвтоотметокНезаполненного = Истина,
		СуффиксКолонок = "") Экспорт
	
	ЗащищенныеФункцииСервер.
	РасставитьАвтоотметкиНезаполненного(Форма,
		СписокОбязательныхРеквизитов,
		СнятиеСтарыхАвтоотметокНезаполненного,
		Объект,
		СуффиксКолонок
	);
	
КонецПроцедуры // РасставитьАвтоотметкиНезаполненного()

// Обновление параметров выбора
//
// Параметры:
//  ПараметрыВыбора		 - ФиксированныйМассив	 - Параметры выбора.
//  ИмяПараметра		 - Строка				 - Имя параметра выбора.
//  ЗначениеПараметра	 - Произвольный			 - Значение параметра выбора.
//
Процедура ОбновитьПараметрВыбора(ПараметрыВыбора, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		НовыйПараметрВыбора = Новый ПараметрВыбора(ИмяПараметра, Новый ФиксированныйМассив(ЗначениеПараметра));
	Иначе
		НовыйПараметрВыбора = Новый ПараметрВыбора(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;
	
	ОбновитьФиксированныйМассивПараметровВыбора(ПараметрыВыбора, НовыйПараметрВыбора);
	
КонецПроцедуры // ОбновитьПараметрВыбора()

// Удаление параметра выбора.
//
// Параметры:
//  ПараметрыВыбора		 - ФиксированныйМассив	 - Параметры выбора.
//  ИмяПараметра		 - Строка				 - Имя параметра выбора.
//
Процедура УдалитьПараметрВыбора(ПараметрыВыбора, ИмяПараметра) Экспорт
	
	ОбновитьФиксированныйМассивПараметровВыбора(ПараметрыВыбора, ИмяПараметра);
	
КонецПроцедуры // УдалитьПараметрВыбора()

// Обновление фиксированного массива параметров выбора
//
// Параметры:
//  КоллекцияПараметровВыбора	 - ФиксированныйМассив	 - Параметры выбора.
//  НовыйПараметрВыбора			 - ПараметрВыбора		 - Новый параметр выбора.
//
Процедура ОбновитьФиксированныйМассивПараметровВыбора(КоллекцияПараметровВыбора, НовыйПараметрВыбора) Экспорт
	
	НоваяКоллекцияПараметров = Новый Массив;
	
	Если ТипЗнч(НовыйПараметрВыбора) = Тип("Строка") Тогда
		ИмяПараметра = НовыйПараметрВыбора;
	Иначе
		ИмяПараметра = НовыйПараметрВыбора.Имя;
		НоваяКоллекцияПараметров.Добавить(НовыйПараметрВыбора);
	КонецЕсли;
	
	Для Каждого ПараметрВыбора Из КоллекцияПараметровВыбора Цикл
		Если ПараметрВыбора.Имя = ИмяПараметра Тогда
			Продолжить;
		КонецЕсли;
		НоваяКоллекцияПараметров.Добавить(ПараметрВыбора);
	КонецЦикла;
	
	КоллекцияПараметровВыбора = Новый ФиксированныйМассив(НоваяКоллекцияПараметров);
	
КонецПроцедуры // ОбновитьФиксированныйМассивПараметровВыбора()

// Процедура устанавливает признак запрета открытия формы документа из обработки ввода на основании.
//
// Параметры:
//  ВходнойОбъект  - Произвольный - Объект, к основной форме которого привязываются выводимые сообщения.
//  ТекстСообщения - Строка - Текст, который должен быть показан , среди реквизитов которого производится поиск.
//
Процедура ЗапретитьОткрытиеФормыОбъекта(ВходнойОбъект, ТекстСообщения) Экспорт
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВходнойОбъект, "ОтменитьОткрытие",, Истина);
	
КонецПроцедуры // ЗапретитьОткрытиеФормыОбъекта)

// Процедура проверки сообщений пользователю и определения состояния отказа
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ - Булево           - Признак отказа.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПроверитьВозможностьОткрытияФормыОбъекта(Форма, Отказ = Ложь) Экспорт
	
	СообщенияПользователю = ПолучитьСообщенияПользователю();
	
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		Если Сообщение.Поле = "ОтменитьОткрытие" Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат (НЕ Отказ);
	
КонецФункции // ПроверитьВозможностьОткрытияФормыОбъекта()

// Процедура настраивает форму и производит блокирование элементов формы.
//
// Параметры:
//  Форма                - УправляемаяФорма     - Форма, на которой надо расставить пометки незаполненного
//  БлокируемыеРеквизиты - СписокЗначений       - Список элементов для блокировки
//  ЭтоРегистр           - Булево               - Признак вызова процедуры из регистра.
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура БлокироватьЭлементыФормы(Форма, БлокируемыеРеквизиты, ЭтоРегистр = Ложь, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	ПервоеЧтениеОбъекта = НЕ ЕстьРеквизит(Форма, "ИзменениеЗапрещено");
	Создание = НЕ ПервоеЧтениеОбъекта И Форма.Параметры.Свойство("ЗакрыватьПриВыборе");
	ИзменениеЗапрещено = Ложь;
	
	// Проверим даты запрета изменения. Если форма уже заблокирована "из вне", то в проверке нет смысла.
	Если ПервоеЧтениеОбъекта И НЕ Форма.ТолькоПросмотр Тогда
		
		// Вызываем обработчик проверки доступности изменений
		Если ЭтоРегистр Тогда
			ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, Форма.Запись.ИсходныйКлючЗаписи);
		Иначе
			ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим возможность редактирования документа при наличии подчиненных документов.
	Если НЕ Форма.ТолькоПросмотр
		И НЕ ЭтоРегистр
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УправлениеДиалогомДокументаСервер.ПроверитьНаличиеПодчиненныхДокументов(Форма, Объект.Ссылка);
	КонецЕсли;
	
	// Производим создание дополнительных реквизитов
	Если Создание Тогда
		Форма.ИзменениеЗапрещено = Форма.ТолькоПросмотр;
	КонецЕсли;
	
	// Настраиваем подменю утверждения документов.
	Если НЕ ПервоеЧтениеОбъекта И Форма.Элементы.Найти("ПодменюУтверждениеДокументов") <> Неопределено Тогда
		УтверждениеДокументовСервер.УстановитьДоступностьФормыДляРедактирования(Форма, Форма.ИзменениеЗапрещено, Объект);
		УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(Форма, Объект, Форма.ИзменениеЗапрещено);
	КонецЕсли;
	ИзменениеЗапрещено = Форма.ТолькоПросмотр;
	
	// Проверим переданный список блокируемых реквизитов.
	Если НЕ ПервоеЧтениеОбъекта И БлокируемыеРеквизиты.Количество() > 0 Тогда
		
		// Если вся форма заблокирована, то смысл блокировать еще что-то.
		ЗапретРедактированияРеквизитовОбъектовСлужебный.
		ПодготовитьФорму(Форма, Объект, Форма.Элементы.ДополнительныеДействия, "");
		Если НЕ ИзменениеЗапрещено Тогда
			ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(Форма, , , Объект);
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("РазрешитьРедактированиеРеквизитовОбъекта") = Неопределено Тогда
			Форма.Элементы.РазрешитьРедактированиеРеквизитовОбъекта.Доступность = НЕ ИзменениеЗапрещено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Для справочников заблокируем редактирование кода
	ЭлементСуществует = НЕ (Форма.Элементы.Найти("Код") = Неопределено);
	Если ЭлементСуществует И Объект <> Неопределено И Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.ссылка)) Тогда
		Форма.Элементы.Код.Доступность =
			ПраваИНастройкиПользователя.Значение("РазрешитьРедактированиеКодовСправочников", Объект) = Перечисления.ВариантыОтветов.Да
			ИЛИ ПраваИНастройкиПользователя.Значение("РазрешитьРедактированиеКодовСправочников", Объект) = Перечисления.ВариантыОтветов.Спрашивать;
		Если ПраваИНастройкиПользователя.Значение("РазрешитьРедактированиеКодовСправочников", Объект) = Перечисления.ВариантыОтветов.Да Тогда
			Форма.Элементы.Код.ОтображениеПредупрежденияПриРедактировании =
				ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		КонецЕсли;
	КонецЕсли;
	
	// Для Документов заблокируем редактирование Номера
	ЭлементНомерСуществует  = Форма.Элементы.Найти("Номер");
	ЭлементДатаСуществует   = Форма.Элементы.Найти("Дата");
	Если Объект <> Неопределено  Тогда
		ЭтоОбъектДокумент       = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка));
		
		Если ЭтоОбъектДокумент Тогда
			ЕстьПравоРедактировать  = ПраваИНастройкиПользователя.Значение("РазрешитьРедактированиеНомеровДокументов", Объект);
			РедактированиеЗапрещено = НЕ ПраваИНастройкиПользователя.Значение("ОткрытиеФормыПараметрыДокументаВРежимеРедактирование", Объект);
			Если ЭлементНомерСуществует <> Неопределено Тогда
				ЭлементНомерСуществует.Доступность    = ЕстьПравоРедактировать;
				ЭлементНомерСуществует.ТолькоПросмотр = РедактированиеЗапрещено;
			КонецЕсли;
			Если ЭлементДатаСуществует <> Неопределено Тогда
				ЭлементДатаСуществует.ТолькоПросмотр  = РедактированиеЗапрещено;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // БлокироватьЭлементыФормы()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка                - Ссылка  - Содержит ссылку на передаваемый объект метаданных.
//  ДополнительныеПараметры - Структура - необязательные параметры:
//   * ТекстВременнаяТаблица - Строка  - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                    помещение результата запроса во временную таблицу.
//   * Объединить            - Булево  - Признак который указывает на режим формирования запроса. В случае, если данный
//                                    параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                    другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//   * ТолькоОсновныеКонтакты - Булево - Признак, который указывает на необходимость вывода только основных контактов.
//   * ПоляОсновные           - Строка - Список основных полей поиска контактов.
//   * ПоляДополнительные     - Строка - Список дополнительных полей поиска контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка, содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("ТекстВременнаяТаблица") Тогда
		ДополнительныеПараметры.Вставить("ТекстВременнаяТаблица", "");
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("Объединить") Тогда
		ДополнительныеПараметры.Вставить("Объединить", Ложь);
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("ТолькоОсновныеКонтакты") Тогда
		ДополнительныеПараметры.Вставить("ТолькоОсновныеКонтакты", Истина);
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("ПоляОсновные") Тогда
		ДополнительныеПараметры.Вставить("ПоляОсновные", "");
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("ПоляДополнительные") Тогда
		ДополнительныеПараметры.Вставить("ПоляДополнительные", "");
	КонецЕсли;
	
	// Получим имя таблицы
	ИмяТаблицы = Ссылка.Метаданные().ПолноеИмя();
	
	// Сформируем список необходимых полей
	Если НЕ ДополнительныеПараметры.ТолькоОсновныеКонтакты 
		И ЗначениеЗаполнено(ДополнительныеПараметры.ПоляДополнительные) Тогда
		
		ДополнительныеПараметры.ПоляОсновные = ДополнительныеПараметры.ПоляОсновные
												+ ","
												+ ДополнительныеПараметры.ПоляДополнительные;
		
	КонецЕсли;
		
	СписокПолей = Новый Структура(ДополнительныеПараметры.ПоляОсновные);
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
	
	Если НЕ ДополнительныеПараметры.ТолькоОсновныеКонтакты Тогда
		Если ЕстьРеквизит(ОбъектМетаданных, "Автор") Тогда
			СписокПолей.Вставить("Автор");
		КонецЕсли;
		Если ЕстьРеквизит(ОбъектМетаданных, "Менеджер") Тогда
			СписокПолей.Вставить("Менеджер");
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизит(ОбъектМетаданных, "Контрагент") Тогда
		СписокПолей.Вставить("Контрагент");
	ИначеЕсли ЕстьРеквизит(ОбъектМетаданных, "Заказчик") Тогда
		СписокПолей.Вставить("Заказчик");
	КонецЕсли;
	
	// Сформируем текст запроса
	ТекстЗапроса = "";
	ТекстПроРазрешенные = ?(ДополнительныеПараметры.Объединить, "", " РАЗРЕШЕННЫЕ");
	ТекстОбъединить = "";
	ШаблонУсловияНаСсылки = Взаимодействия.ШаблонУсловияНаСсылкиКонтактовДляЗапроса();
	МассивОписанияТиповКонтактов = Новый Массив;
	ВзаимодействияКлиентСерверПереопределяемый.ПриОпределенииВозможныхКонтактов(МассивОписанияТиповКонтактов);
	ШаблонУсловияПустойСсылки =  "НЕ Таблица.%ИмяПоля% = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			ШаблонУсловияПустойСсылки = ШаблонУсловияПустойСсылки + "
			|И НЕ Таблица.%ИмяПоля% = ЗНАЧЕНИЕ(Справочник." + ЭлементМассиваОписания.Имя + ".ПустаяСсылка)";
		КонецЕсли;
	КонецЦикла;

	Для Каждого Поле Из СписокПолей Цикл
		ИмяПоля = Поле.Ключ;
		УсловиеНаСсылки = СтрЗаменить(ШаблонУсловияНаСсылки, "%ИмяПоля%", ИмяПоля);
		УсловиеПустойСсылки = СтрЗаменить(ШаблонУсловияПустойСсылки, "%ИмяПоля%", ИмяПоля);
		ТекстЗапроса = ТекстЗапроса + (ТекстОбъединить
		+ "ВЫБРАТЬ" + ТекстПроРазрешенные + " РАЗЛИЧНЫЕ
		|	Таблица." + ИмяПоля + " КАК Контакт
		|" + ДополнительныеПараметры.ТекстВременнаяТаблица + "ИЗ
		|" + ИмяТаблицы + " КАК Таблица
		|	ГДЕ
		|     Таблица.Ссылка = &Предмет
		|     И " + УсловиеПустойСсылки);
		ТекстПроРазрешенные = "";
		ДополнительныеПараметры.ТекстВременнаяТаблица = "";
		ТекстОбъединить = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	КонецЦикла;
	
	Если ДополнительныеПараметры.Объединить Тогда
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПоКонтактам()

// Используется в механизме взаимодействий. Формирует список контактов предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив, содержащий в себе перечень контактов предмета взаимодействий.
//
Функция ПолучитьКонтактыВзаимодействий(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	Запрос = Новый Запрос;
	Попытка
		Запрос.Текст = МенеджерОбъекта.ПолучитьТекстЗапросаПоКонтактам(Ссылка);
	Исключение
		Запрос.Текст = ПолучитьТекстЗапросаПоКонтактам(Ссылка);
	КонецПопытки;
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ПолучитьКонтактыВзаимодействий()

// Функция возвращает индекс картинки для переданного объекта метаданных
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - Переданный объект метаданных
// 
// Возвращаемое значение:
//  Число - Индекс картинки объекта.
//
Функция ПолучитьИндексКартинкиВидаОбъектаМетаданных(ОбъектМетаданных) Экспорт
	Индекс = 0;
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		Индекс = 4;
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		Индекс = 5;
	ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных) Тогда
		Индекс = 7;
	ИначеЕсли ОбщегоНазначения.ЭтоПланОбмена(ОбъектМетаданных) Тогда
		Индекс = 10;
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
		Индекс = 11;
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных) Тогда
		Индекс = 18;
	ИначеЕсли ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных) Тогда
		Индекс = 19;
	ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(ОбъектМетаданных) Тогда
		Индекс = 12;
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМетаданных) Тогда
		Индекс = 13;
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		Индекс = 14;
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
		Индекс = 15;
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
		Индекс = 16;
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
		Индекс = 17;
	ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(ОбъектМетаданных) Тогда
		Индекс = 3;
	ИначеЕсли ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных) Тогда
		Индекс = 6;
	КонецЕсли;
	
	Возврат Индекс;
КонецФункции

// Добавляет перечень объектов в ПараметрыДействия для оповещения динамических списков после окончания действия.
//
// Параметры:
//  ОбъектОповещения  - Произвольный - Объект, который будут обновлены в динамических списках (ссылки или типы).
//  ПараметрыДействия - Структура    - Набор параметров, в который будут записаны параметры оповещения.
//
Процедура ДобавитьОповещениеДинамическихСписков(ОбъектОповещения, ПараметрыДействия) Экспорт
	
	// Проверяем тип параметров действия.
	Если НЕ ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Проверяем наличие необходимого свойства в структуре.
	Если НЕ ПараметрыДействия.Свойство("ОповещениеДинамическихСписков") Тогда
		ОповещениеДинамическихСписков = Новый Структура("Использование, СсылкаИлиТип", Истина, Новый Массив);
		ПараметрыДействия.Вставить("ОповещениеДинамическихСписков", ОповещениеДинамическихСписков);
	КонецЕсли;
	
	// Взводим флаг необходимости оповещения.
	ПараметрыДействия.ОповещениеДинамическихСписков.Использование = Истина;
	
	// Проверяем тип свойства с перечнем объектов в структуре.
	Если НЕ ТипЗнч(ПараметрыДействия.ОповещениеДинамическихСписков.СсылкаИлиТип) = Тип("Массив") Тогда
		
		// Запоминаем старое значение.
		ПредыдущееЗначениеСсылкаИлиТип = ПараметрыДействия.ОповещениеДинамическихСписков.СсылкаИлиТип;
		
		// Приводим тип свойства с перечнем объектов к массиву.
		ПараметрыДействия.ОповещениеДинамическихСписков.СсылкаИлиТип = Новый Массив;
		
		// Если было передано одиночное значение, добавляем его в массив объектов.
		Если ЗначениеЗаполнено(ПредыдущееЗначениеСсылкаИлиТип) Тогда
			ПараметрыДействия.ОповещениеДинамическихСписков.СсылкаИлиТип.Добавить(ПредыдущееЗначениеСсылкаИлиТип);
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавляем в массив объекты для их оповещения
	ПараметрыДействия.ОповещениеДинамическихСписков.СсылкаИлиТип.Добавить(ОбъектОповещения);
	
КонецПроцедуры // ДобавитьОповещениеДинамическихСписков()

// Добавляет свойство в ПараметрыДействия для оповещения открытых форм после окончания действия.
//
// Параметры:
//  ИмяСобытия  -  Строка - Имя события. Может быть использовано для идентификации сообщений принимающими их формами.
//  Параметр    -  Произвольный - Параметр сообщения. Могут быть переданы любые необходимые данные.
//  Источник    -  Произвольный - Источник события. Например, в качестве источника может быть указана другая форма.
//  ПараметрыДействия  - Структура - Набор параметров, в который будут записаны параметры оповещения.
//
Процедура ДобавитьОповещениеФорм(ИмяСобытия,
		Параметр = Неопределено,
		Источник = Неопределено,
		ПараметрыДействия = Неопределено) Экспорт
	
	// Проверяем тип параметров действия.
	Если НЕ ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Проверяем наличие необходимого свойства в структуре.
	Если НЕ ПараметрыДействия.Свойство("ОповещениеФорм") Тогда
		ПараметрыДействия.Вставить("ОповещениеФорм", Новый Массив);
		
	ИначеЕсли ТипЗнч(ПараметрыДействия.ОповещениеФорм) = Тип("Структура") Тогда
		
		// Преобразовываем структуру в массив структур.
		ОповещениеФорм = ПараметрыДействия.ОповещениеФорм;
		
		ПараметрыДействия.ОповещениеФорм = Новый Массив;
		ПараметрыДействия.ОповещениеФорм.Добавить(ОповещениеФорм);
		
	КонецЕсли;
	
	// Добавляем новое оповещение в массив структур.
	НовоеОповещениеФорм = Новый Структура;
	НовоеОповещениеФорм.Вставить("Использование", Истина);
	НовоеОповещениеФорм.Вставить("ИмяСобытия",    ИмяСобытия);
	НовоеОповещениеФорм.Вставить("Параметр",      Параметр);
	НовоеОповещениеФорм.Вставить("Источник",      Источник);
	ПараметрыДействия.ОповещениеФорм.Добавить(НовоеОповещениеФорм);
	
КонецПроцедуры // ДобавитьОповещениеФорм()

// Выполняет свертку таблицы по заданному реквизиту
//
// Параметры:
//  ТаблицаРеквизитыДокументов - ТаблицаЗначений - Исходная таблица.
//  ИмяРеквизита               - Строка          - Реквизит, по которому свернуть таблицу.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Свернутая таблица по реквизиту.
//
Функция СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, ИмяРеквизита) Экспорт
	
	Таблица = ТаблицаРеквизитыДокументов.Скопировать();
	Таблица.Свернуть(ИмяРеквизита);
	Возврат Таблица;
	
КонецФункции // СвернутьТаблицуЗначенийПоРеквизиту()

// Возвращает модуль числа
//
// Параметры:
//  Икс - Число - Исходное число
//
// Возвращаемое значение:
//  Число - модуль исходного числа.
//
Функция ПолучитьМодульЧисла(Икс) Экспорт
	
	Возврат ?(Икс >= 0, Икс, -Икс);
	
КонецФункции // ПолучитьМодульЧисла()

// Возвращает тип истинного объекта по данным формы
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  Тип, Неопределено - Тип, соответствующий типу данных XML.
//
Функция ПолучитьТипОбъектаПоДаннымФормы(Объект) Экспорт
	
	Возврат ИзXMLТипа(СтрЗаменить(XMLТипЗнч(Объект.Ссылка).ИмяТипа, "Ref.", "Object."), "");
	
КонецФункции // ПолучитьТипОбъектаПоДаннымФормы()

// Возвращает структуру данных с указанными реквизитам объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется формирование представления итогов.
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//              Служебные поля для получения данных: _ИтогиОпераций, _Константа, _Право.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов с префиксом "Представление".
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//
//
Функция ПолучитьДанныеОбъекта(Объект, Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
	КонецЕсли;
	
	РеквизитыОбъекта = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		РеквизитыОбъекта = Реквизиты;
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			ИмяПоля = СтрЗаменить(Реквизит, ".", "");
			РеквизитыОбъекта.Вставить(ИмяПоля, Реквизит);
		КонецЦикла;
		
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра ""Реквизиты"": %1'"),
			Строка(ТипЗнч(Реквизиты))
		);
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура;
	
	// Сформируем запрос по представлению данных.
	Запрос = Новый Запрос;
	ПоляЗапроса = Новый Массив;
	
	Для Каждого КлючИЗначение Из РеквизитыОбъекта Цикл
		
		ИмяПоля    = КлючИЗначение.Ключ;
		ПолныйПуть = КлючИЗначение.Значение;
		
		// Получим значение реквизита.
		Если ИмяПоля = "_ИтогиОперации" Тогда
			ИтогиОперации = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).РассчитатьИтогиОперации(Объект);
			ДанныеОбъекта.Вставить(ИмяПоля, ИтогиОперации);
			Продолжить;
			
		ИначеЕсли СтрНачинаетсяС(ИмяПоля, "_Константа") Тогда
			ИмяКонстанты = СтрЗаменить(ИмяПоля, "_Константа", "");
			Если Метаданные.Константы.Найти(ИмяКонстанты) <> Неопределено Тогда
				Значение = Константы[ИмяКонстанты].Получить();
			КонецЕсли;
			
		ИначеЕсли СтрНачинаетсяС(ИмяПоля, "_Право") Тогда
			ИмяПрава = СтрЗаменить(ИмяПоля, "_Право", "");
			Попытка
				Значение = ПраваИНастройкиПользователя.Значение(ИмяПрава, Объект);
			Исключение
				ПричинаОшибки(ИмяПрава, ПолныйПуть, Объект);
			КонецПопытки;
			
		Иначе
			
			Значение = Объект;
			Для Каждого ИмяРеквизита Из СтрРазделить(ПолныйПуть, ".", Ложь) Цикл
				Если ЕстьРеквизит(Значение, ИмяРеквизита) Тогда
					Значение = Значение[ИмяРеквизита];
				Иначе
					Значение = NULL;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеОбъекта.Вставить(ИмяПоля, Значение);
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
			ПоляЗапроса.Добавить(СтрШаблон("	ПРЕДСТАВЛЕНИЕ(&%1) КАК %1Представление", ИмяПоля));
			Запрос.УстановитьПараметр(ИмяПоля, Значение);
			ДанныеОбъекта.Вставить(ИмяПоля + "Представление", Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим структуру представлений данных объекта.
	Если Запрос.Параметры.Количество() > 0 Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ " + Символы.ПС + СтрСоединить(ПоляЗапроса, "," + Символы.ПС);
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Выборка);
		
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПолучитьДанныеОбъекта()

// Функция проверки блокировки данных объекта другим пользователем в системе
//
// Параметры:
//  Ссылка							- ДокументСсылка			- Ссылка на проверяемый объект.
//  УникальныйИдентификаторФормы	- УникальныйИдентификатор	- Уникальный идентификатор формы.
//
// Возвращаемое значение:
//  Булево - Истина: Объект заблокирован другим пользователем; Ложь: Доступен для редактирования.
//
Функция ПроверитьЗапретРедактированияДанных(Знач Ссылка, УникальныйИдентификаторФормы) Экспорт
	
	// Если это новый объект, то блокировку не накладываем.
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Ссылка,, УникальныйИдентификаторФормы);
		Возврат Ложь;
	Исключение
		Возврат Истина;
	КонецПопытки;
	
КонецФункции // ПроверитьЗапретРедактированияДанных()

// Формирует значение реквизита по умолчанию.
//
// Параметры:
//  Форма             - УправляемаяФорма     - Форма объекта;
//  Объект            - ДанныеФормыСтруктура - Объект, для которого формируется наименование;
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнении операции;
//  ИмяРеквизита      - Строка               - имя реквизита, для которого формируется значение по умолчанию.
//
Процедура СформироватьЗначениеПоУмолчанию(Форма,
			Объект = Неопределено,
			ПараметрыДействия = Неопределено,
			ИмяРеквизита = "Наименование") Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	КэшИмяРеквизита = "Кэш" + ИмяРеквизита;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Объект", Объект);
	ПараметрыВыполнения.Вставить("ПараметрыДействия", ПараметрыДействия);
	
	Имя = СтрЗаменить(Строка(МенеджерОбъекта), "СправочникМенеджер", "Справочники");
	Имя = Имя + ".Сформировать" + ИмяРеквизита + "ПоУмолчанию(Параметры.Объект, Параметры.ПараметрыДействия)";
	
	Наименование = РаботаВБезопасномРежимеАльфа.ВычислитьВБезопасномРежиме(Имя, ПараметрыВыполнения);
	Наименование = СокрЛП(Наименование);
	
	Форма.Элементы[ИмяРеквизита].СписокВыбора.Очистить();
	ПредставлениеНаименования = ?(ЗначениеЗаполнено(Наименование),
									Наименование,
									"<" + НСтр("ru = 'не заполнены реквизиты для автоформирования'") + ">");
	Форма.Элементы[ИмяРеквизита].СписокВыбора.Добавить(Наименование, ПредставлениеНаименования);
	
	Если ЗначениеЗаполнено(Форма[КэшИмяРеквизита]) И СокрЛП(Форма[КэшИмяРеквизита]) = СокрЛП(Объект[ИмяРеквизита])
		ИЛИ (ЗначениеЗаполнено(Наименование) И НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита])) Тогда
		
		Объект[ИмяРеквизита]   = Наименование;
		Форма[КэшИмяРеквизита] = Наименование;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьНаименованиеПоУмолчанию()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ОБЩЕГО НАЗНАЧЕНИЯ

// Общий обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Форма		- УправляемаяФорма	- Форма объекта.
//  РезультатОповещения		- Произвольный			- Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры	- Произвольный			- Значение, которое было указано при создании объекта описания оповещения.
//  Объект					- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
Процедура ОбработкаРезультатаОповещения(Форма,
		РезультатОповещения,
		ДополнительныеПараметры = Неопределено,
		Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Обработаем в зависимости от переданного параметра события
	Если ДополнительныеПараметры = "ПараметрыПечатиОбъект" Тогда
		
		Модифицировано = Ложь;
		Для каждого РеквизитПечати Из РезультатОповещения.МассивДополнительныхРеквизитов Цикл
			
			// Изменим свойство дополнительного реквизита
			Для каждого СтрокаСвойств Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
				Если СтрокаСвойств.Свойство = РеквизитПечати.Свойство 
					И НЕ Форма[СтрокаСвойств.ИмяРеквизитаЗначение] = РеквизитПечати.Значение Тогда
					
					Форма[СтрокаСвойств.ИмяРеквизитаЗначение] = РеквизитПечати.Значение;
					Модифицировано = Истина;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Форма.Модифицированность = Модифицировано;
		
	ИначеЕсли ЛЕВ(ДополнительныеПараметры, 17) = "КомандаЗаполнения" Тогда
		
		// Вызываем общий обработчик заполнения объекта
		ЗащищенныеФункцииСервер.ВыполнитьЗаполнениеОбъекта(Форма, РезультатОповещения, ДополнительныеПараметры, Объект);
		
	ИначеЕсли ДополнительныеПараметры = "ПодборНоменклатуры" Тогда
		
		ОбработкаРезультатаПодбораНоменклатуры(Форма, РезультатОповещения, Объект);
		
	ИначеЕсли ДополнительныеПараметры = "ЗагрузкаИзДокумента" Тогда
		
		ОбработкаРезультатаПодбораНоменклатуры(Форма, РезультатОповещения, Объект);
		
	ИначеЕсли ДополнительныеПараметры = "ЗагрузкаИзКорзины" Тогда
		
		РезультатОповещения.Вставить("Корзина", 
			ПоместитьВоВременноеХранилище(РегистрыСведений.Корзина.ТоварыИзКорзины(
				РезультатОповещения.ПараметрыКорзины.Наименование,
				РезультатОповещения.ПараметрыКорзины.Дата)));
		ОбработкаРезультатаПодбораНоменклатуры(Форма, РезультатОповещения, Объект);
		
	ИначеЕсли ДополнительныеПараметры = "ПодборПоПартиям" Тогда
		
		ОбработкаРезультатаПодбораПоПартиям(Форма, РезультатОповещения, Объект);
		
	ИначеЕсли ДополнительныеПараметры = "РедактированиеКодовМаркировкиСтрокиТовара" Тогда
		
		ОбработкаРезультатаРедактированияКодовМаркировки(Форма, РезультатОповещения, Объект);
		
	ИначеЕсли ДополнительныеПараметры = "ПодборОпций" Тогда
		
		ОбработкаРезультатаПодбораОпций(Форма, РезультатОповещения, Объект);
		
	ИначеЕсли ДополнительныеПараметры = "ПодборАвансов" Тогда
		
		ОбработкаРезультатаПодбораАвансов(Форма, РезультатОповещения, Объект);
		
	ИначеЕсли ДополнительныеПараметры = "ПодборОплаты" Тогда
		
		ОбработкаРезультатаПодбораОплаты(Форма, РезультатОповещения, Объект);
		
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Общий обработчик события возникающего при выполнении оповещения о подборе номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой произошло событие.
//  ПараметрыПодбора - Структура - Структура параметров подбора.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка.
//
Процедура ОбработкаРезультатаПодбораНоменклатуры(Форма, ПараметрыПодбора, Объект = Неопределено)
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Получим параметры выполнения подбора
	ПодобраннаяНоменклатура = ПолучитьИзВременногоХранилища(ПараметрыПодбора.Корзина);
	ИмяТабличнойЧасти       = ПараметрыПодбора.ИмяТабличнойЧасти;
	ИмяРеквизитаКоличество  = ПараметрыПодбора.ИмяРеквизитаКоличество;
	ЕстьКоличество          = ЕстьРеквизит(Объект, ИмяРеквизитаКоличество, ИмяТабличнойЧасти);
	ЕстьЕдиницаИзмерения 	= ЕстьРеквизит(Объект, "ЕдиницаИзмерения", ИмяТабличнойЧасти);
	ЕстьХарактеристика      = ЕстьРеквизит(Объект, "ХарактеристикаНоменклатуры", ИмяТабличнойЧасти);
	ЕстьЦена 				= ЕстьРеквизит(Объект, "Цена", ИмяТабличнойЧасти);
	ЕстьЯчейка              = ПараметрыПодбора.ЕстьЯчейка И ЕстьРеквизит(Объект, "Ячейка", ИмяТабличнойЧасти);
	ТабличнаяЧастьОбъекта   = Объект[ИмяТабличнойЧасти];
	ЕстьЦенаВКорзине = Не ТипЗнч(ПодобраннаяНоменклатура) = Тип("ТаблицаЗначений")
		ИЛИ ЕстьРеквизит(ПодобраннаяНоменклатура, "Цена");
	
	Если ЕстьРеквизит(Форма, "Объект") И ЕстьРеквизит(Форма.Объект, "Ссылка") Тогда
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
		
	Иначе
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыПодбора.ПолноеИмяОбъекта);
		
	КонецЕсли;
		
	ЕстьВладелецХарактеристики = ЕстьРеквизит(Объект, "ВладелецХарактеристики", ИмяТабличнойЧасти);
	УказанВладелецХарактеристик = Ложь;
	
	// Формируем параметры поиска строки
	ПараметрыОтбора = Новый Структура("Номенклатура");
	Если ЕстьКоличество И ЕстьЕдиницаИзмерения Тогда
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	Если ЕстьХарактеристика Тогда
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры");
	КонецЕсли;
	Если ЕстьЯчейка Тогда
		ПараметрыОтбора.Вставить("Ячейка");
	КонецЕсли;
	
	// Alfa_IvEd +++
	
	ЕстьИсточникОбеспечения = ЕстьРеквизит(Объект, "КлючСтрокиПоставщика", ИмяТабличнойЧасти)
								И ТипЗнч(ПодобраннаяНоменклатура) = Тип("ТаблицаЗначений")
								И ЕстьРеквизит(ПодобраннаяНоменклатура, "КлючСтрокиПоставщика")
								И ПолучитьЗначениеПараметраСтруктуры(ПараметрыПодбора, "ЕстьИсточникОбеспечения", Истина);
	
	Если ЕстьИсточникОбеспечения Тогда
		ПараметрыОтбора.Вставить("Поставщик");
		ПараметрыОтбора.Вставить("КлючСтрокиПоставщика");
		ПараметрыОтбора.Вставить("НаправлениеПоставки");
	КонецЕсли;
	
	// Alfa_IvEd ---
	
	// Заблокируем расчет скидок построчно
	ПараметрыПодбора.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Производим перенос подобранной номенклатуры в табличную часть объекта
	Для Каждого СтрокаТоваров Из ПодобраннаяНоменклатура Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТоваров);
		НайденныеСтроки = ТабличнаяЧастьОбъекта.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			// Добавим новую строку и заполним ее
			СтрокаТабличнойЧасти = ТабличнаяЧастьОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);
			
			// Вызываем обработчик изменения данных объекта
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(Объект);
			ПараметрыВыполнения.Добавить(СтрокаТабличнойЧасти);
			ПараметрыВыполнения.Добавить(ПараметрыПодбора.ПараметрыДействия);
			Имя = СтрЗаменить(Строка(МенеджерДокумента), "ДокументМенеджер", "Документы");
			Имя = СтрЗаменить(Строка(Имя), "СправочникМенеджер", "Справочники");
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(
				СтрШаблон("%1.%2НоменклатураПриИзменении", Имя, ИмяТабличнойЧасти),
				ПараметрыВыполнения
			);
			
			// Если имя реквизита Количество отличается от стандартного, произведем дозаполнение.
			Если ЕстьКоличество И ((НЕ ИмяРеквизитаКоличество = "Количество") ИЛИ СтрокаТоваров.Количество > 0) Тогда
				
				СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] = СтрокаТоваров.Количество;
				
				ПараметрыВыполнения = Новый Массив;
				ПараметрыВыполнения.Добавить(Объект);
				ПараметрыВыполнения.Добавить(СтрокаТабличнойЧасти);
				ПараметрыВыполнения.Добавить(ПараметрыПодбора.ПараметрыДействия);
				Имя = СтрЗаменить(Строка(МенеджерДокумента), "ДокументМенеджер", "Документы");
				Имя = СтрЗаменить(Строка(Имя), "СправочникМенеджер", "Справочники");
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(
					СтрШаблон("%1.%2%3ПриИзменении", Имя, ИмяТабличнойЧасти, ИмяРеквизитаКоличество),
					ПараметрыВыполнения
				);
				
			КонецЕсли;
			
			Если ЕстьВладелецХарактеристики Тогда
				УказанВладелецХарактеристик = УказанВладелецХарактеристик
												ИЛИ (НЕ СтрокаТабличнойЧасти.ВладелецХарактеристики = Неопределено);
			КонецЕсли;
			
			// Alfa_IvEd +++
			
			Если ЕстьИсточникОбеспечения Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,
											СтрокаТоваров,
											"Поставщик,НаправлениеПоставки,КлючСтрокиПоставщика,СрокПоставкиВСтроке");
				
				Если СтрокаТоваров.Цена <> 0 И СтрокаТоваров.Цена <> СтрокаТабличнойЧасти.Цена Тогда
					Выполнить("МенеджерДокумента."
								+ ИмяТабличнойЧасти
								+ "ЦенаПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыПодбора.ПараметрыДействия)");
				КонецЕсли;
			КонецЕсли;
			
			// Alfa_IvEd ---
			
		ИначеЕсли ЕстьКоличество Тогда
			
			// Получим строку и увеличим в ней количество
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] = СтрокаТабличнойЧасти[ИмяРеквизитаКоличество]
															+ СтрокаТоваров.Количество;
			
			// Вызываем обработчик изменения данных объекта
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(Объект);
			ПараметрыВыполнения.Добавить(СтрокаТабличнойЧасти);
			ПараметрыВыполнения.Добавить(ПараметрыПодбора.ПараметрыДействия);
			Имя = СтрЗаменить(Строка(МенеджерДокумента), "ДокументМенеджер", "Документы");
			Имя = СтрЗаменить(Строка(Имя), "СправочникМенеджер", "Справочники");
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(
				СтрШаблон("%1.%2%3ПриИзменении", Имя, ИмяТабличнойЧасти, ИмяРеквизитаКоличество),
				ПараметрыВыполнения
			);
			
		КонецЕсли;
		
		Если ЕстьЦена И ЕстьЦенаВКорзине И СтрокаТоваров.Цена <> 0 Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТоваров.Цена;
			
			Выполнить("МенеджерДокумента."
			+ ИмяТабличнойЧасти
			+ "ЦенаПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыПодбора.ПараметрыДействия)");
		КонецЕсли;
		
	КонецЦикла;
	
	// Пересчитаем скидки.
	ПараметрыПодбора.ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	Если ЕстьРеквизит(Объект, "Сумма", ИмяТабличнойЧасти) Тогда
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыПодбора.ПараметрыДействия, ИмяТабличнойЧасти);
	КонецЕсли;
	
	// Установим видимость колонки Характеристика
	Если НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти + "ХарактеристикаНоменклатуры") = Неопределено
		И НЕ Форма.Элементы[ИмяТабличнойЧасти + "ХарактеристикаНоменклатуры"].Видимость Тогда
		
		Структура = Новый Структура("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СтрокиБезХарактеристик = ТабличнаяЧастьОбъекта.НайтиСтроки(Структура);
		Форма.Элементы[ИмяТабличнойЧасти + "ХарактеристикаНоменклатуры"].Видимость = 
			(ТабличнаяЧастьОбъекта.Количество() <> СтрокиБезХарактеристик.Количество()) ИЛИ УказанВладелецХарактеристик;
		
	КонецЕсли;
	
	// Установим видимость колонки "Коды маркировки"
	Если Форма.Элементы.Найти(ИмяТабличнойЧасти + "ГруппаКодыМаркировки") <> Неопределено Тогда
		
		Структура = Новый Структура("МаркируемыйТовар", Ложь);
		СтрокиБезКодовМаркировки = ТабличнаяЧастьОбъекта.НайтиСтроки(Структура);
		Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКодыМаркировки"].Видимость =
			(ТабличнаяЧастьОбъекта.Количество() <> СтрокиБезКодовМаркировки.Количество());
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаПодбораНоменклатуры()

// Общий обработчик события возникающего при выполнении оповещения о подборе партии.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой произошло событие.
//  ПараметрыПодбора - Структура - Структура параметров подбора.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка.
//
Процедура ОбработкаРезультатаПодбораПоПартиям(Форма, ПараметрыПодбора, Объект = Неопределено)
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Получим параметры выполнения подбора
	ПодобраннаяНоменклатура = ПолучитьИзВременногоХранилища(ПараметрыПодбора.АдресПодобраннойНоменклатурыВХранилище);
	МетаданныеОбъекта = ПолучитьМетаданныеОбъектаФормы(Форма);
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
	
	// Формируем параметры поиска строки
	ПараметрыОтбора = Новый Структура("Номенклатура");
	Если ЕстьРеквизит(Объект, "ДокументПродажи", "Товары") Тогда
		ПараметрыОтбора.Вставить("ДокументПродажи");
		ИмяКолонки = "ДокументПродажи";
	Иначе
		ПараметрыОтбора.Вставить("Партия");
		ИмяКолонки = "Партия";
	КонецЕсли;
	ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры");
	
	// Заблокируем расчет скидок построчно
	ПараметрыДействия = МенеджерДокумента.ПолучитьПараметрыДействия(Объект);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Производим перенос подобранной номенклатуры в табличную часть объекта
	Для Каждого СтрокаТоваров Из ПодобраннаяНоменклатура Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТоваров);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		// смотрим что нашли
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			// Нашли такую строку, посмотрим, если мы определили для такой строки количество 0, то удалим ее.
			Если СтрокаТоваров.Количество = 0 Тогда
				Объект.Товары.Удалить(НайденныеСтроки[0]);
				Продолжить;
			Иначе
				ТекСтрока = НайденныеСтроки[0];
			КонецЕсли;
			
		ИначеЕсли СтрокаТоваров.Количество > 0 Тогда
			
			// Добавим подобранные товары
			ТекСтрока = Объект.Товары.Добавить();
			ТекСтрока.Номенклатура = СтрокаТоваров.Номенклатура;
			ТекСтрока.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
		Иначе
			// строки такой нет, Количество=0, добавлять в тч не нужно
			Продолжить;
		КонецЕсли;
		
		ТекСтрока[ИмяКолонки] = СтрокаТоваров.Партия;
		
		// Вызываем обработчик изменения данных объекта
		МенеджерДокумента.ТоварыНоменклатураПриИзменении(Объект, ТекСтрока, ПараметрыДействия);
		ТекСтрока.Количество = СтрокаТоваров.Количество;
		МенеджерДокумента.ТоварыКоличествоПриИзменении(Объект, ТекСтрока, ПараметрыДействия);
		Форма.Модифицированность = Истина;
		
	КонецЦикла;
	
	// Пересчитаем скидки.
	ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаПодбораПоПартиям()

// Общий обработчик события возникающего при выполнении оповещения о редактировании кодов маркировок.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой произошло событие.
//  ПараметрыПодбора - Структура - Структура параметров подбора.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка.
//
Процедура ОбработкаРезультатаРедактированияКодовМаркировки(Форма, ПараметрыРедактирования, Объект = Неопределено)
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	ИдентификаторСтрокиТовара = ПолучитьЗначениеПараметраСтруктуры(ПараметрыРедактирования, "ИдентификаторТовара");
	СписокКодовМаркировки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыРедактирования, "СписокКодовМаркировки");
	ПроверкаСоответствияПроводилась = 
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыРедактирования, "ПроверкаСоответствияПроводилась", Ложь);
	
	ЭтоКорректировка = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления");
	
	НеПерерасчитыватьКоличествоТовара = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыРедактирования,
		"НеПерерасчитыватьКоличествоТовара",
		Ложь
	);
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Непонятно к какой строке товара маркировка или состав кодов маркировки.
	Если ИдентификаторСтрокиТовара = Неопределено ИЛИ СписокКодовМаркировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем в табличной части "Товары" строку
	СтруктураПоиска = Новый Структура("ИдентификаторТовара", ИдентификаторСтрокиТовара);
	НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	// Не нашли строки с переданным идентификатором
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем ранее сканированные маркировки для данной строки
	НайденныеКодыМаркировки = Объект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
	
	// Удалим перед заполнением
	Для Каждого ТекущаяСтрока Из НайденныеКодыМаркировки Цикл
		Объект.КодыМаркировки.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	// Заполним кодами маркировки
	КоличествоВозвратов = 0;
	ЕстьРазличия = Ложь;
	Для Каждого ТекущаяМаркировка Из СписокКодовМаркировки Цикл
		НоваяСтрока = Объект.КодыМаркировки.Добавить();
		НоваяСтрока.ИдентификаторТовара = ИдентификаторСтрокиТовара;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяМаркировка);
		Если ЭтоКорректировка Тогда
			НоваяСтрока.Возврат = ТекущаяМаркировка.Возврат;
			Если НоваяСтрока.Возврат Тогда
				КоличествоВозвратов = КоличествоВозвратов + 1;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьРеквизит(Объект, "Подтверждено", "КодыМаркировки") Тогда
			НоваяСтрока.Подтверждено = Истина;
		КонецЕсли;
		ЕстьРазличия = ЕстьРазличия ИЛИ НЕ ТекущаяМаркировка.Соответствует;
	КонецЦикла;
	
	КоличествоТовараВСтроке = НайденныеСтроки[0].Количество * НайденныеСтроки[0].Коэффициент;
	
	Если НЕ ЭтоКорректировка Тогда
		
		Если КоличествоТовараВСтроке < СписокКодовМаркировки.Количество()
			И НЕ НеПерерасчитыватьКоличествоТовара Тогда
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество
				+ Окр((СписокКодовМаркировки.Количество() - КоличествоТовараВСтроке) / НайденныеСтроки[0].Коэффициент, 3);
			МенеджерДокумента.ТоварыКоличествоПриИзменении(Объект, НайденныеСтроки[0]);
		КонецЕсли;
		
	ИначеЕсли НайденныеСтроки[0].Подтверждение Тогда
		
		КоличествоДобавленное = СписокКодовМаркировки.Количество() - КоличествоВозвратов;
		Если КоличествоТовараВСтроке < КоличествоДобавленное Тогда
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество
				+ Окр((СписокКодовМаркировки.Количество() - КоличествоДобавленное) / НайденныеСтроки[0].Коэффициент, 3);
			МенеджерДокумента.ТоварыКоличествоПриИзменении(Объект, НайденныеСтроки[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	// Запишем результат проверки состояния кодов маркировки
	Если ЕстьРеквизит(Объект, "ПроверкаСоответствияКодовМаркировкиПроводилась", "Товары") Тогда
		НайденныеСтроки[0].ПроверкаСоответствияКодовМаркировкиПроводилась = ПроверкаСоответствияПроводилась;
	ИначеЕсли ЕстьРеквизит(Форма, "ПроверкаСоответствияКодовМаркировкиПроводилась") Тогда
		Форма.ПроверкаСоответствияКодовМаркировкиПроводилась = ПроверкаСоответствияПроводилась;
	КонецЕсли;
	
	Если ПроверкаСоответствияПроводилась Тогда
		
		Если ЕстьРеквизит(Форма, "АвторПроверкиКМ") Тогда
			Форма.АвторПроверкиКМ = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		Если ЕстьРеквизит(Форма, "ДатаПроверкиКМ") Тогда
			Форма.ДатаПроверкиКМ = ТекущаяДатаСеанса();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "ЕстьРазличияСостоянийКМ", "Товары") Тогда
		НайденныеСтроки[0].ЕстьРазличияСостоянийКМ = ЕстьРазличия;
	КонецЕсли;
	
	
	// Установим видимость колонки "Коды маркировки"
	Если Форма.Элементы.Найти("ТоварыГруппаКодыМаркировки") <> Неопределено Тогда
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиКодыМаркировки(Форма,,, Объект);
		ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаРедактированияКодовМаркировки()

// Общий обработчик события возникающего при выполнении оповещения о подборе опций.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой произошло событие.
//  ПараметрыПодбора - Структура - Структура параметров подбора.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка.
//
Процедура ОбработкаРезультатаПодбораОпций(Форма, ПараметрыПодбора, Объект = Неопределено)
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	ВыполнятьОбработкуИзмененияДанных = НЕ (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаОпцийАвтомобиля"));
	
	ПодобранныеОпции = ПолучитьИзВременногоХранилища(ПараметрыПодбора.Опции);
	ИмяТабличнойЧасти = ПараметрыПодбора.ИмяТабличнойЧасти;
	ТабличнаяЧастьОбъекта = Объект[ИмяТабличнойЧасти];
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыПодбора.ПолноеИмяОбъекта);
	
	Если Лев(МенеджерОбъекта, 9) = "Обработка" Тогда
		Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ОбработкаМенеджер", "Обработки");
	Иначе
		Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ДокументМенеджер", "Документы");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Опция");
	
	Для Каждого СтрокаОпций Из ПодобранныеОпции Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаОпций);
		НайденныеСтроки = ТабличнаяЧастьОбъекта.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТабличнойЧасти = ТабличнаяЧастьОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаОпций);
			
			Если ВыполнятьОбработкуИзмененияДанных Тогда
				
				// Вызываем обработчик изменения данных объекта
				ПараметрыВыполнения = Новый Массив;
				ПараметрыВыполнения.Добавить(Объект);
				ПараметрыВыполнения.Добавить(СтрокаТабличнойЧасти);
				
				ПараметрыВыполнения.Добавить(ПараметрыПодбора.ПараметрыДействия);
				РаботаВБезопасномРежимеАльфа.
					ВыполнитьМетодКонфигурации(Имя + "." + ИмяТабличнойЧасти + "ОпцияПриИзменении", ПараметрыВыполнения);
				
				Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Опция) Тогда
					ТабличнаяЧастьОбъекта.Удалить(СтрокаТабличнойЧасти);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// Получим строку и увеличим в ней количество
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаОпций.Количество;
			
			Если ВыполнятьОбработкуИзмененияДанных Тогда
				
				// Вызываем обработчик изменения данных объекта
				ПараметрыВыполнения = Новый Массив;
				ПараметрыВыполнения.Добавить(Объект);
				ПараметрыВыполнения.Добавить(СтрокаТабличнойЧасти);
				ПараметрыВыполнения.Добавить(ПараметрыПодбора.ПараметрыДействия);
				РаботаВБезопасномРежимеАльфа.
				ВыполнитьМетодКонфигурации(Имя + "." + ИмяТабличнойЧасти + "Количество" + "ПриИзменении", ПараметрыВыполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Общий обработчик события возникающего при выполнении оповещения о подборе авансов.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой произошло событие.
//  ПараметрыПодбора - Структура - Структура параметров подбора.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка.
//
Процедура ОбработкаРезультатаПодбораАвансов(Форма, ПараметрыПодбора, Объект = Неопределено)
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	ПодобранныеАвансы = ПолучитьИзВременногоХранилища(ПараметрыПодбора.АдресПодобранныхАвансов);
	
	Если ПодобранныеАвансы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧастиАвансов = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыПодбора,
		"ИмяТабличнойЧастиАвансов",
		"ЗачетАвансов");
	
	Объект[ИмяТабличнойЧастиАвансов].Загрузить(ПодобранныеАвансы);
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект, ПараметрыПодбора);
	
КонецПроцедуры

// Общий обработчик события возникающего при выполнении оповещения о подборе оплаты.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой произошло событие.
//  ПараметрыПодбора - Структура - Структура параметров подбора.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка.
//
Процедура ОбработкаРезультатаПодбораОплаты(Форма, ПараметрыПодбора, Объект = Неопределено)
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	ПодобранныеОплаты = ПолучитьИзВременногоХранилища(ПараметрыПодбора.АдресПодобранныхДокументовРасчета);
	
	Если ПодобранныеОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВыписка = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Выписка");
	Если ЭтоВыписка Тогда
		
		ИмяСпособаЗачетаОплаты = "СпособЗачетаАвансов";
		ИмяДокументаРасчетов = "Сделка";
		КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(
			Объект,
			Объект.ДоговорВзаиморасчетов);
		ИмяСуммы = ?(ПараметрыПодбора.РасчетыСПокупателем, "СуммаПриход", "СуммаРасход");
		СпособВеденияВзаимозачетов =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "СпособВеденияВзаиморасчетов");
		
	Иначе
		
		ИмяСпособаЗачетаОплаты = "СпособЗачетаОплаты";
		ИмяДокументаРасчетов = "ДокументРасчетов";
		ИмяСуммы = "Сумма";
		
	КонецЕсли;
	
	ИмяТабличнойЧастиОплат = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыПодбора,
		"ИмяТабличнойЧастиОплат",
		"Состав");
	
	// Уберем все строки с типом оплаты "По документу" и заменим на актуальные
	УсловиеПоиска = Новый Структура(ИмяСпособаЗачетаОплаты, Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	НайденныеСтроки = Объект.Состав.НайтиСтроки(УсловиеПоиска);
	
	Для Каждого СтрокаСостава Из НайденныеСтроки Цикл
		
		Объект.Состав.Удалить(СтрокаСостава);
		
	КонецЦикла;
	
	Для Каждого СтрокаДокументаРасчета Из ПодобранныеОплаты Цикл
		
		Строка = Объект.Состав.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДокументаРасчета);
		Строка[ИмяСпособаЗачетаОплаты] = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		Строка[ИмяДокументаРасчетов] = СтрокаДокументаРасчета.ДокументРасчетов;
		Строка[ИмяСуммы] = СтрокаДокументаРасчета.Сумма;
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("СуммаНДС",        Строка.СуммаНДС);
		СтруктураСтроки.Вставить("СтавкаНДС",       Строка.СтавкаНДС);
		СтруктураСтроки.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураСтроки.Вставить("КурсДокумента",   Объект.КурсДокумента);
		ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(
			Строка[ИмяДокументаРасчетов],
			СтруктураСтроки,
			Строка[ИмяСуммы],,,
			Ложь);
		
		Если ЭтоВыписка Тогда
			
			Строка.СтатьяДДС = Объект.СтатьяДДС;
			Строка.Контрагент = Объект.Контрагент;
			Строка.ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
			Строка.СпособВеденияВзаимозачетов = СпособВеденияВзаимозачетов;
			Строка.КурсВалютыВзаиморасчетов = КурсВалютыВзаиморасчетов;
			Строка.СуммаРазница = Строка.СуммаПриход + Строка.СуммаРасход;
			Строка.СтавкаНДС = Объект.СтавкаНДС;
			МенеджерДокумента.СоставСтавкаНДСПриИзменении(Объект, Строка);
			
		Иначе
			
			Строка.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
			МенеджерДокумента.СоставСтавкаНДСПриИзменении(Объект, Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти