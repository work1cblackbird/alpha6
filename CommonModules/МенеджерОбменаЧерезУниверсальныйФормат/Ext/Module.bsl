// Конвертация Автосалон 6.1 от 11.12.2024 12:20:50
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСПоУмолчанию = Справочники.СтатьиДДС.ПустаяСсылка();
	КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке = Новый Массив();
	КомпонентыОбмена.ПараметрыКонвертации.СоответствиеОперацииИСтатейДДС= Новый ТаблицаЗначений;
	компонентыОбмена.ПараметрыКонвертации.СоответствиеТиповНоменклатуры = Новый ТаблицаЗначений;
	КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВозвратнуюТару = Ложь;
	КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД = Ложь;
	КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьРозничнуюТорговлюДляФизЛиц = Ложь;
	КомпонентыОбмена.ПараметрыКонвертации.ЗаказНарядПроизводство = Ложь;
	КомпонентыОбмена.ПараметрыКонвертации.СписаниеТребованиеНакладная = Ложь;
	КомпонентыОбмена.ПараметрыКонвертации.ВыгрузкаПоступленийАвтоНаОтвХранение = Ложь;
	КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию = Справочники.КассыКомпании.ПустаяСсылка();
	КомпонентыОбмена.ПараметрыКонвертации.НеПередаватьНоменклатурнуюГруппу = Ложь;
	КомпонентыОбмена.ПараметрыКонвертации.УчетЗарплатыВоВнешнейПрограмме = Ложь;
	КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьНоменклатуруВАвтоработах = Ложь;
	КомпонентыОбмена.ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию = ""; 
	КомпонентыОбмена.ПараметрыКонвертации.СвернутьПоступление = Ложь;
	КомпонентыОбмена.ПараметрыКонвертации.ОтборОрганизация = Новый Массив;
		
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда 
				
			УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
			РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				УзелКорреспондента,
				"ИспользоватьВозвратнуюТару, УчетПоГТД, ИспользоватьРозничнуюТорговлюДляФизЛиц, ЗаказНарядПроизводство, СписаниеТребованиеНакладная, ВыгрузкаПоступленийАвтоНаОтвХранение, НеПередаватьНоменклатурнуюГруппу, УчетЗарплатыВоВнешнейПрограмме, ИспользоватьНоменклатуруВАвтоработах, НоменклатурнаяГруппаПоУмолчанию,СвернутьПоступление,СоответствиеТиповНоменклатуры");
					
			КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВозвратнуюТару = РеквизитыУзлаОбмена.ИспользоватьВозвратнуюТару;
			КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД = РеквизитыУзлаОбмена.УчетПоГТД;
			КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьРозничнуюТорговлюДляФизЛиц =
				РеквизитыУзлаОбмена.ИспользоватьРозничнуюТорговлюДляФизЛиц;
			КомпонентыОбмена.ПараметрыКонвертации.ЗаказНарядПроизводство = РеквизитыУзлаОбмена.ЗаказНарядПроизводство; 
			КомпонентыОбмена.ПараметрыКонвертации.СписаниеТребованиеНакладная = РеквизитыУзлаОбмена.СписаниеТребованиеНакладная;
			КомпонентыОбмена.ПараметрыКонвертации.ВыгрузкаПоступленийАвтоНаОтвХранение = РеквизитыУзлаОбмена.ВыгрузкаПоступленийАвтоНаОтвХранение;
			КомпонентыОбмена.ПараметрыКонвертации.НеПередаватьНоменклатурнуюГруппу = РеквизитыУзлаОбмена.НеПередаватьНоменклатурнуюГруппу;
			КомпонентыОбмена.ПараметрыКонвертации.УчетЗарплатыВоВнешнейПрограмме = РеквизитыУзлаОбмена.УчетЗарплатыВоВнешнейПрограмме;
			КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьНоменклатуруВАвтоработах = РеквизитыУзлаОбмена.ИспользоватьНоменклатуруВАвтоработах;
			КомпонентыОбмена.ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию = РеквизитыУзлаОбмена.НоменклатурнаяГруппаПоУмолчанию;
		    КомпонентыОбмена.ПараметрыКонвертации.СвернутьПоступление = РеквизитыУзлаОбмена.СвернутьПоступление;
		    КомпонентыОбмена.ПараметрыКонвертации.СоответствиеТиповНоменклатуры = РеквизитыУзлаОбмена.СоответствиеТиповНоменклатуры.Выгрузить();
			    
		    Для Каждого Строка Из УзелКорреспондента.Организации Цикл
				КомпонентыОбмена.ПараметрыКонвертации.ОтборОрганизация.Добавить(Строка.Организация);
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЕсли;
		
	
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
			
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда 
				
			РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				КомпонентыОбмена.УзелКорреспондента, "ПодразделениеПоУмолчанию, СтатьяДДСПоУмолчанию, КассаКомпанииПоУмолчанию, ЗапрещенаПовторнаяЗагрузка, СоответствиеОперацииИСтатейДДС");
					
			КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию = РеквизитыУзлаОбмена.ПодразделениеПоУмолчанию;
			КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСПоУмолчанию = РеквизитыУзлаОбмена.СтатьяДДСПоУмолчанию;
			КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию = РеквизитыУзлаОбмена.КассаКомпанииПоУмолчанию;
			КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке =
				РеквизитыУзлаОбмена.ЗапрещенаПовторнаяЗагрузка.Выгрузить().ВыгрузитьКолонку("ИмяОбъектаМетаданных");
			КомпонентыОбмена.ПараметрыКонвертации.СоответствиеОперацииИСтатейДДС = РеквизитыУзлаОбмена.СоответствиеОперацииИСтатейДДС.Выгрузить();
		
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВводВЭксплуатацию_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Взаимозачет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратОтПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратОтПокупателяАвтомобилей_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратПоставщикуАвтомобилей_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Выписка_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказНаряд_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗакрытиеСмены_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Инвентаризация_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияАвтомобилей_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Инкассация_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Комплектация_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаДолга_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступленияАвто_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализацииАвто_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеАвтомобилей_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеНезавершенногоПроизводства_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваровВПроизводство_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Пересортица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеАвтомобилей_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Разукомплектация_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РазукомплектацияАвтомобилей_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияАвтомобилей_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеАвтомобилей_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеАктивов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплату_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплатуЗаАвтомобили_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетОтПоставщика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетОтПоставщикаЗаАвтомобили_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларацияИмпорт_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УведомлениеОбОстаткахПрослеживаемыхТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УведомлениеОПеремещенииПрослеживаемыхТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекНаОплату_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документы_ИзвлечениеТоваровИзПроизводства_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документы_ПоступлениеДопРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Автомобили_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Автоработы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторТНВЭД_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторыЕдиницИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Модели_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Патенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПодразделениеКомпании_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Производители_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыКомпании_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Сотрудники_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДоходовИРасходов(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЦеновыеГруппы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Цеха_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ПБДСВзносНаличными_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходныйКассовыйОрдарСотрудника_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходныйКассовыйОрдер_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходныйКассовыйОрдер_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗПНаЛС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДССнятиеНаличных_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УведомлениеОбОстаткахПрослеживаемыхТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Докумнет_РасходныйКассовыйОрдерСотрудники_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ГТД_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторТНВЭД_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыФизЛицо_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Патенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделение_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДСГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АвансовыйОтчет;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВводВЭксплуатацию_Отправка
Процедура ДобавитьПОД_Документ_ВводВЭксплуатацию_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВводВЭксплуатацию_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВводВЭксплуатацию;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВводВЭксплуатацию_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_Взаимозачет_Отправка
Процедура ДобавитьПОД_Документ_Взаимозачет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Взаимозачет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Взаимозачет;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Взаимозачет_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратОтПокупателя_Отправка
Процедура ДобавитьПОД_Документ_ВозвратОтПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратОтПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратОтПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратОтПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратОтПокупателя_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоБесплатномуЗН_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратОтПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ОснованиеБесплатныйЗаказНаряд = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		ОснованиеБесплатныйЗаказНаряд = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДанныеИБ.ДокументОснование,
				"ВидРемонта.ТипРемонта") <> Перечисления.ТипыРемонта.Платный;
	КонецЕсли;
	
	ИспользованиеПКО.Документ_ВозвратТоваровПоБесплатномуЗН_Отправка = ОснованиеБесплатныйЗаказНаряд;
	ИспользованиеПКО.Документ_ВозвратОтПокупателя_Отправка = Не ОснованиеБесплатныйЗаказНаряд;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратОтПокупателяАвтомобилей_Отправка
Процедура ДобавитьПОД_Документ_ВозвратОтПокупателяАвтомобилей_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратОтПокупателяАвтомобилей_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратОтПокупателяАвтомобилей;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратОтПокупателяАвтомобилей_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратПоставщикуАвтомобилей_Отправка
Процедура ДобавитьПОД_Документ_ВозвратПоставщикуАвтомобилей_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратПоставщикуАвтомобилей_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратПоставщикуАвтомобилей;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратПоставщикуАвтомобилей_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратПоставщикуАвтомобилей_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратПоставщикуАвтомобилей_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ВыгрузкаПоступленийАвтоНаОтвХранение
		И ДанныеИБ.ХозОперация = Справочники.ХозОперации.ВозвратАвтомобилейСОтветственногоХранения Тогда
		ИспользованиеПКО.Документ_ВозвратПоставщикуАвтомобилей_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратПоставщику;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратПоставщику_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_Выписка_Отправка
Процедура ДобавитьПОД_Документ_Выписка_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Выписка_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Выписка;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_Выписка_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗПСотруднику_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСВзносНаличными_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДССнятиеНаличных_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_Выписка_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
				
	Если ИспользованиеПКО.Свойство("Документ_СБДСРасчетыСКонтрагентами_Отправка") Тогда
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Ложь;
	КонецЕсли;
	Если ИспользованиеПКО.Свойство("Документ_СБДСРасчетыССотрудниками_Отправка") Тогда
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Ложь;
	КонецЕсли;
	Если ИспользованиеПКО.Свойство("Документ_СБДСПеречислениеЗаработнойПлаты_Отправка") Тогда
		ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_Отправка = Ложь;
	КонецЕсли; 
	Если ИспользованиеПКО.Свойство("Документ_СБДСПеречислениеЗПСотруднику_Отправка") Тогда
		ИспользованиеПКО.Документ_СБДСПеречислениеЗПСотруднику_Отправка = Ложь;
	КонецЕсли; 
	Если ИспользованиеПКО.Свойство("Документ_СБДСПлатежиВБюджет_Отправка") Тогда
		ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Ложь;
	КонецЕсли;
	Если ИспользованиеПКО.Свойство("Документ_СБДСПрочиеРасходы_Отправка") Тогда
		ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Ложь;
	КонецЕсли; 
	Если ИспользованиеПКО.Свойство("Документ_СБДСПрочееСписание_Отправка") Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Ложь;
	КонецЕсли; 	
	Если ИспользованиеПКО.Свойство("Документ_СБДСПереводНаДругойСчет_Отправка") Тогда
		ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка = Ложь; 
	КонецЕсли;  
	Если ИспользованиеПКО.Свойство("Документ_СБДССнятиеНаличных_Отправка") Тогда
		ИспользованиеПКО.Документ_СБДССнятиеНаличных_Отправка = Ложь; 
	КонецЕсли;  
	Если ИспользованиеПКО.Свойство("Документ_ПБДСРасчетыСКонтрагентами_Отправка") Тогда
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Ложь;
	КонецЕсли;  
	Если ИспользованиеПКО.Свойство("Документ_ПБДСРасчетыССотрудниками_Отправка") Тогда
		ИспользованиеПКО.Документ_ПБДСРасчетыССотрудниками_Отправка = Ложь;
	КонецЕсли;  
	Если ИспользованиеПКО.Свойство("Документ_ПБДСПоПлатежнымКартам_Отправка") Тогда
		ИспользованиеПКО.Документ_ПБДСПоПлатежнымКартам_Отправка = Ложь; 
	КонецЕсли; 
	Если ИспользованиеПКО.Свойство("Документ_ПБДСПрочиеДоходы_Отправка") Тогда
		ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Отправка = Ложь; 
	КонецЕсли; 
	Если ИспользованиеПКО.Свойство("Документ_ПБДСПрочееПоступление_Отправка") Тогда
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Ложь; 
	КонецЕсли; 
	Если ИспользованиеПКО.Свойство("Документ_ПБДСПереводНаДругойСчет_Отправка") Тогда
		ИспользованиеПКО.Документ_ПБДСПереводНаДругойСчет_Отправка = Ложь; 
	КонецЕсли; 
	Если ИспользованиеПКО.Свойство("Документ_ПБДСВзносНаличными_Отправка") Тогда
		ИспользованиеПКО.Документ_ПБДСВзносНаличными_Отправка = Ложь; 
	КонецЕсли; 
	
	ПравилоУВыпискиОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_Выписка_Отправка", "Имя");
			
	Если ПравилоУВыпискиОтправка <> Неопределено Тогда
				
		РасшифровкаПлатежа = Новый ТаблицаЗначений;
		РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов");
		РасшифровкаПлатежа.Колонки.Добавить("Контрагент");
		РасшифровкаПлатежа.Колонки.Добавить("Договор");
		РасшифровкаПлатежа.Колонки.Добавить("ДокументРасчетов");
		РасшифровкаПлатежа.Колонки.Добавить("Сумма");
		РасшифровкаПлатежа.Колонки.Добавить("КурсВзаиморасчетов");
		РасшифровкаПлатежа.Колонки.Добавить("СтавкаНДС");
		РасшифровкаПлатежа.Колонки.Добавить("СуммаНДС");
		РасшифровкаПлатежа.Колонки.Добавить("СуммаВзаиморасчетов");
		РасшифровкаПлатежа.Колонки.Добавить("КратностьВзаиморасчетов");
		РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
		РасшифровкаПлатежа.Колонки.Добавить("СпособПогашенияЗадолженности");
		РасшифровкаПлатежа.Колонки.Добавить("Заказ"); 
		РасшифровкаПлатежа.Колонки.Добавить("СчетРасходов");
		РасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
		РасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
		РасшифровкаПлатежа.Колонки.Добавить("СчетДоходов");
		РасшифровкаПлатежа.Колонки.Добавить("СуммаУслуг"); 
		РасшифровкаПлатежа.Колонки.Добавить("ИдентификаторСтроки");
		РасшифровкаПлатежа.Колонки.Добавить("ДанныеДокумента");
		РасшифровкаПлатежа.Колонки.Добавить("ПравилаОтправки");
		
			
		Комментарий = СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Выписка'"));
				
		Запрос = Новый Запрос; 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВыпискаСостав.СтатьяДДС КАК СтатьяДДС,
			|	ВыпискаСостав.Контрагент КАК Контрагент,
			|	ВыпискаСостав.Сделка КАК Сделка,
			|	ВыпискаСостав.СуммаПриход - ВыпискаСостав.СуммаРасход КАК Сумма,
			|	ВыпискаСостав.СуммаУслуг КАК СуммаУслуг,
			|	ВыпискаСостав.СтавкаНДС КАК Ставка,
			|	ВыпискаСостав.СуммаНДС КАК СуммаНДС,
			|	ВыпискаСостав.ПлатежноеПоручениеОснование КАК ПлатежноеПоручениеОснование,
			|	ВыпискаСостав.ВхДокНомер КАК ВхДокНомер,
			|	ВыпискаСостав.ВхДокДата КАК ВхДокДата,
			|	ВыпискаСостав.СтавкаНДС.Ставка КАК ЗначениеСтавки,
			|	Выразить(ВыпискаСостав.КурсВалютыВзаиморасчетов КАК Число(10,4)) КАК КурсВзаиморасчетов,
			|	Выразить(0 КАК Число(10,0)) КАК КратностьВзаиморасчетов,
			|	Выразить(0 КАК Число(15,2)) КАК СуммаВзаиморасчетов,
			|	ВыпискаСостав.ДоговорВзаиморасчетов КАК Договор,
			|	ВыпискаСостав.НомерСтроки КАК НомерСтроки,
			|	ВыпискаСостав.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
			|	ВыпискаСостав.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов КАК ДоговорВзаиморасчетовСпособВеденияВзаиморасчетов,
			|	ВыпискаСостав.ПлатежноеПоручениеОснование.ВидОперации КАК ПлатежноеПоручениеВидОперации
			|ИЗ
			|	Документ.Выписка.Состав КАК ВыпискаСостав
			|ГДЕ
			|	ВыпискаСостав.Ссылка = &Ссылка";
				
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
				
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
				
		РезультатЗапроса.Колонки.Добавить("ВалютаВзаиморасчетов");
		РезультатЗапроса.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
		РезультатЗапроса.Колонки.Добавить("ДокументРасчетов");
		РезультатЗапроса.Колонки.Добавить("СтавкаНДС");
		РезультатЗапроса.Колонки.Добавить("СпособПогашенияЗадолженности");
		РезультатЗапроса.Колонки.Добавить("Заказ"); 
		РезультатЗапроса.Колонки.Добавить("СчетРасходов");
		РезультатЗапроса.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом"); 
		РезультатЗапроса.Колонки.Добавить("СчетУчетаРасчетов");
		РезультатЗапроса.Колонки.Добавить("СчетДоходов");
							
		РегСокр = РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов;
				
		ЕстьЗаказ = Ложь;
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
			ТипОснования = ТипЗнч(ДанныеИБ.ДокументОснование);
			Если ТипОснования = Тип("ДокументСсылка.СчетНаОплату") 
				Или ТипОснования = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили") Тогда
					ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
					СчетОснование = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО);
					ЕстьЗаказ = Истина;	
				КонецЕсли;
		КонецЕсли;
				
		Запрос = Новый Запрос;
				
		Запрос.Текст = "ВЫБРАТЬ
			|	ИдентификаторыВыгружаемыхОбъектов.Объект.Ссылка КАК Ссылка,
			|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
			|ИЗ
			|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
			|ГДЕ
			|	ИдентификаторыВыгружаемыхОбъектов.Объект.Ссылка = &Объект
			|	И ИдентификаторыВыгружаемыхОбъектов.Объект ССЫЛКА Документ.Выписка"; 
				
		Запрос.УстановитьПараметр("Объект", ДанныеИБ.Ссылка);  
		ВыборкаВыписка = Запрос.Выполнить().Выгрузить();
		НоваяВыписка = ВыборкаВыписка.Количество() <= 1; 
		
		УчитыватьСпособЗачетаОплаты = РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ДанныеИБ.ВерсияОбъекта);
				
		Для Каждого Строка Из РезультатЗапроса Цикл                    
					
			ПравилоУВыпискиОтправка.ИспользуемыеПКО.Очистить();
					
			Если ЕстьЗаказ Тогда
				Строка.Заказ = СчетОснование;
			КонецЕсли;
					
			ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.СтатьяДДС, "Операция");
			ВидОперации = ДанныеОперации.Операция;
			ЭтоПеремещение = ЭтоПеремещение(ВидОперации);
			Если ЭтоПеремещение Тогда
				Строка.РасчетыВУсловныхЕдиницах = Ложь;
				ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.БанковскийСчет, "ВалютаДенежныхСредств");  
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаСчета, ДанныеИБ.Дата);
				Строка.ВалютаВзаиморасчетов = ВалютаСчета;
			Иначе	
				РасчетыВУсловныхЕдиницах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Договор, "РасчетыВУсловныхЕдиницах");
				Строка.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
				ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Договор, "ВалютаВзаиморасчетов");
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, ДанныеИБ.Дата);
				Строка.ВалютаВзаиморасчетов = ВалютаДоговора;
			КонецЕсли;
				
			Строка.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
					
			Если Не ЗначениеЗаполнено(Строка.КурсВзаиморасчетов) Тогда
				Строка.КурсВзаиморасчетов = СтруктураКурса.Курс;
			КонецЕсли;
					
			Если ЗначениеЗаполнено(Строка.Сделка) Тогда 
						
				РазрешениеПодставитьСделкуКакЗН = Истина;
						
				Если ТипЗнч(Строка.Сделка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
					РазрешениеПодставитьСделкуКакЗН = ЗНВРеализациюИЗакрыт(Строка.Сделка, КомпонентыОбмена);
				КонецЕсли;
						
				Если РазрешениеПодставитьСделкуКакЗН Тогда
					ИмяПКО = ПолучитьИмяПКОДокумента(Строка.Сделка, КомпонентыОбмена);
					Строка.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", Строка.Сделка, ИмяПКО); 
				КонецЕсли;
						
			ИначеЕсли ЗначениеЗаполнено(Строка.ПлатежноеПоручениеОснование) И
					Не Строка.ПлатежноеПоручениеВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации Тогда
				ИмяПКО = ПолучитьИмяПКОДокумента(Строка.ПлатежноеПоручениеОснование, КомпонентыОбмена);
				Строка.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", Строка.ПлатежноеПоручениеОснование, ИмяПКО);
			КонецЕсли;
					
			Если УчитыватьСпособЗачетаОплаты
				И Строка.ДоговорВзаиморасчетовСпособВеденияВзаиморасчетов =
				Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
					Строка.СпособПогашенияЗадолженности = Строка.СпособЗачетаАвансов;
			ИначеЕсли ЗначениеЗаполнено(Строка.Сделка) ИЛИ ЗначениеЗаполнено(Строка.ПлатежноеПоручениеОснование) Тогда
				Строка.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
			Иначе
				Строка.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли;
			
			Строка.СтавкаНДС = ПолучитьСтавкуНДС(Строка.Ставка, Строка.ЗначениеСтавки,КомпонентыОбмена);
			//списание 
			Если Строка.Сумма < 0 Тогда
				Строка.Сумма = -Строка.Сумма;
						
				Если Строка.РасчетыВУсловныхЕдиницах Тогда
					Строка.СуммаВзаиморасчетов = Окр(Строка.Сумма / Строка.КурсВзаиморасчетов * Строка.КратностьВзаиморасчетов, 2);
				Иначе
					Строка.СуммаВзаиморасчетов = Строка.Сумма;
				КонецЕсли;
						
				Если ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Отправка");
							
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаработнойПлатыСотруднику Тогда 
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗПСотруднику_Отправка");
							
				ИначеЕсли ЭтоПодотчет(Строка.Контрагент) И 
					(ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеПодОтчет ИЛИ 
					ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаймаСотруднику) Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Отправка");
							
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.КомиссияБанка ИЛИ 
					ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочиеРасходы Тогда 
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
							
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеНалога Тогда 
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Отправка");
							
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратКредитаБанку ИЛИ 
					ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОплатыПокупателю ИЛИ 
					ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ОплатаПоставщику Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
							
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочееСписание ИЛИ 
					ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.Прочее Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Отправка");
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Отправка");
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.СнятиеНаличныхВКассу Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_СБДССнятиеНаличных_Отправка");		
				Иначе 
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка"); 
				КонецЕсли;
				//приход
			ИначеЕсли Строка.Сумма > 0 Тогда 
						
				Если Строка.РасчетыВУсловныхЕдиницах Тогда
					Строка.СуммаВзаиморасчетов = Окр(Строка.Сумма / Строка.КурсВзаиморасчетов * Строка.КратностьВзаиморасчетов, 2);
				Иначе
					Строка.СуммаВзаиморасчетов = Строка.Сумма;
				КонецЕсли;
						
				Если ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПоступленияПоПлатежнымКартам Тогда
					
					Если Строка.РасчетыВУсловныхЕдиницах Тогда
						Строка.СуммаВзаиморасчетов = Окр((Строка.Сумма - Строка.СуммаУслуг)/ Строка.КурсВзаиморасчетов * Строка.КратностьВзаиморасчетов, 2);
					Иначе
						Строка.СуммаВзаиморасчетов = Строка.Сумма - Строка.СуммаУслуг;
					КонецЕсли;
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Отправка");
							
				ИначеЕсли ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка
					ИЛИ ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПоступлениеОтПокупателя
					ИЛИ ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОтПоставщика Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Отправка"); 
							
				ИначеЕсли  ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратПодотчетныхСумм 
					ИЛИ ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратЗаймаСотрудником Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Отправка");
				ИначеЕсли ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратНалогов 
					ИЛИ ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочееПоступление 
					ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.Прочее Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Отправка");
							
				ИначеЕсли ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочиеДоходы  Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Отправка"); 
							
				ИначеЕсли ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводСДругогоСчетаОрганизации Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_ПБДСПереводНаДругойСчет_Отправка"); 
				ИначеЕсли ВидОперации  =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиИзКассы Тогда
							
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_ПБДСВзносНаличными_Отправка"); 
	
				Иначе 
					ПравилоУВыпискиОтправка.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Отправка");
				КонецЕсли;
						
			КонецЕсли;
					
			ДанныеИБСтруктура = Новый Структура();
					
			ДанныеИБСтруктура.Вставить("Номер");
			ДанныеИБСтруктура.Вставить("Дата");
			ДанныеИБСтруктура.Вставить("Автор");
			ДанныеИБСтруктура.Вставить("Комментарий");
			ДанныеИБСтруктура.Вставить("Контрагент");
			ДанныеИБСтруктура.Вставить("ДоговорВзаиморасчетов");
			ДанныеИБСтруктура.Вставить("Организация");
			ДанныеИБСтруктура.Вставить("Сумма", 0);  
			ДанныеИБСтруктура.Вставить("СуммаКомиссияБанка");
			ДанныеИБСтруктура.Вставить("ВалютаДокумента");
			ДанныеИБСтруктура.Вставить("ПодразделениеКомпании");
			ДанныеИБСтруктура.Вставить("БанковскийСчет");
			ДанныеИБСтруктура.Вставить("ВхДокДата");
			ДанныеИБСтруктура.Вставить("ВхДокНомер");
			ДанныеИБСтруктура.Вставить("НазначениеПлатежа");
			ДанныеИБСтруктура.Вставить("ДатаВедомости");
			ДанныеИБСтруктура.Вставить("НомерВедомости");
			ДанныеИБСтруктура.Вставить("Патент");
				
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			ДанныеИБСтруктура.Комментарий = Комментарий;
			ДанныеИБСтруктура.Контрагент = Строка.Контрагент;
			Контрагент = Строка.Контрагент; 
			Если ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводСДругогоСчетаОрганизации ИЛИ 
				ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации Тогда 
				  	СчетКонтрагента = ДанныеИБ.БанковскийСчетКонтрагента; 
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.СнятиеНаличныхВКассу ИЛИ 
				ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиИзКассы Тогда 
				ДанныеИБСтруктура.Вставить("Касса", ДанныеИБ.Касса);
			ИначеЕсли Контрагент <> Неопределено И ЗначениеЗаполнено(Контрагент) И Контрагент.ОсновнойБанковскийСчет.Пустая() Тогда
				// Если основной счет у контрагента не установлен, возьмем первый попавщийся.
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
						|	БанковскиеСчета.Ссылка КАК СчетКонтрагента
						|ИЗ
						|	Справочник.БанковскиеСчета КАК БанковскиеСчета
						|ГДЕ
						|	БанковскиеСчета.Владелец = &Владелец";
				Запрос.УстановитьПараметр("Владелец", Контрагент);
						
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СчетКонтрагента = Выборка.СчетКонтрагента;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СчетКонтрагента) И ЗначениеЗаполнено(Контрагент) Тогда
				СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
			КонецЕсли;
			ДанныеИБСтруктура.Вставить("БанковскийСчетКонтрагента");
			ДанныеИБСтруктура.БанковскийСчетКонтрагента = СчетКонтрагента;
			НомерДокумента = ДанныеИБ.Номер;
			ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ПравилоУВыпискиОтправка.ИспользуемыеПКО[0]);  
			Если Не НоваяВыписка Тогда
				ИдентификаторСтроки = РегСокр.ИдентификаторОбъектаВыгрузки(
					ДанныеИБ.Ссылка,
					ТекПКО.ОбъектФормата,
					,
					Строка.НомерСтроки
				); 
			Иначе 
				ИдентификаторСтроки = "";
			КонецЕсли;
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
			НоваяСтрока.ДанныеДокумента = ДанныеИБСтруктура; 
			НоваяСтрока.ПравилаОтправки = ПравилоУВыпискиОтправка;
		КонецЦикла; 
				
		РазличныеИдентификаторы = Новый Массив();
		Для Каждого Строка Из РасшифровкаПлатежа Цикл
					
			Если РазличныеИдентификаторы.Количество() = 0  ИЛИ 
				РазличныеИдентификаторы.Найти(Строка.ИдентификаторСтроки)= Неопределено Тогда
						
				РазличныеИдентификаторы.Добавить(Строка.ИдентификаторСтроки);
						
			КонецЕсли; 
							
		КонецЦикла;
		КоличествоСтрок = РазличныеИдентификаторы.Количество(); 
		НомерДокумента = ДанныеИБ.Номер;	
				
		Если КоличествоСтрок = 1  Тогда  
					
			ДанныеДокументаСтруктура = РасшифровкаПлатежа[0].ДанныеДокумента;
			ПравилаОтправки = РасшифровкаПлатежа[0].ПравилаОтправки;
			ДанныеДокументаСтруктура.Вставить("Ссылка", ДанныеИБ.Ссылка);
			ДанныеДокументаСтруктура.Вставить("СсылкаДокумента", ДанныеИБ.Ссылка);
			ДанныеДокументаСтруктура.Вставить("Номер", НомерДокумента);  
			ДанныеДокументаСтруктура.Сумма = РасшифровкаПлатежа.Итог("Сумма"); 
			РасшифровкаПлатежа.Колонки.Удалить("ИдентификаторСтроки"); 
			РасшифровкаПлатежа.Колонки.Удалить("ДанныеДокумента"); 
			РасшифровкаПлатежа.Колонки.Удалить("ПравилаОтправки");
			ДанныеДокументаСтруктура.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа.Скопировать());
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеДокументаСтруктура, ПравилаОтправки);
		Иначе
			Порог = 9; 
			СчетчикСтрокиВыписки = 0;
			Для Каждого Элемент ИЗ РазличныеИдентификаторы Цикл
				Если КоличествоСтрок > Порог Тогда
					ПрефиксНомера = СчетчикСтрокиВыписки;
					ПрефиксУИД = СчетчикСтрокиВыписки;
				Иначе
					ПрефиксНомера = "0" + СчетчикСтрокиВыписки;
					ПрефиксУИД = "0" + СчетчикСтрокиВыписки;
				КонецЕсли; 
		
				СчетчикСтрокиВыписки = СчетчикСтрокиВыписки + 1; 
				ЛеваяЧастьНомера = Лев(НомерДокумента, 5);
				ПраваяЧастьНомера = Прав(НомерДокумента, 4);	
				НомерДокумента =  ЛеваяЧастьНомера + ПрефиксНомера + ПраваяЧастьНомера;
				СсылкаДокумента = Документы.Выписка.ПолучитьСсылку(Элемент); 
				Отбор = Новый Структура("ИдентификаторСтроки", Элемент);
				РасшифровкаПоИдентификатору = РасшифровкаПлатежа.Скопировать(Отбор);  
				ДанныеДокументаСтруктура = РасшифровкаПоИдентификатору[0].ДанныеДокумента;
				ДанныеДокументаСтруктура.Вставить("Ссылка", СсылкаДокумента);
				ДанныеДокументаСтруктура.Вставить("СсылкаДокумента", СсылкаДокумента);
				ДанныеДокументаСтруктура.Вставить("Номер", НомерДокумента);  
				ДанныеДокументаСтруктура.Сумма = РасшифровкаПоИдентификатору.Итог("Сумма");   
				ПравилаОтправки = РасшифровкаПоИдентификатору[0].ПравилаОтправки;
		
				РасшифровкаПоИдентификатору.Колонки.Удалить("ИдентификаторСтроки"); 
				РасшифровкаПоИдентификатору.Колонки.Удалить("ДанныеДокумента"); 
				РасшифровкаПоИдентификатору.Колонки.Удалить("ПравилаОтправки");
		
				ДанныеДокументаСтруктура.Вставить("РасшифровкаПлатежа", РасшифровкаПоИдентификатору.Скопировать());
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеДокументаСтруктура, ПравилаОтправки);
						
			КонецЦикла; 
					
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказНаряд_Отправка
Процедура ДобавитьПОД_Документ_ЗаказНаряд_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказНаряд_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказНаряд;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядРеализация_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядТребованиеНакладная_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗНКомплектацияПеремещение_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	
	Если ИспользованиеПКО.Свойство("Документ_ЗаказНарядРеализация_Отправка") Тогда
		ИспользованиеПКО.Документ_ЗаказНарядРеализация_Отправка = Ложь; 
	Иначе
		ИспользованиеПКО.Вставить("Документ_ЗаказНарядРеализация_Отправка", Ложь);
	КонецЕсли;
	
	Если ИспользованиеПКО.Свойство("Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк") Тогда
		ИспользованиеПКО.Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк = Ложь;
	Иначе
		ИспользованиеПКО.Вставить("Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк", Ложь);
	КонецЕсли;
	
	Если ИспользованиеПКО.Свойство("Документ_ЗаказНарядТребованиеНакладная_Отправка") Тогда
		ИспользованиеПКО.Документ_ЗаказНарядТребованиеНакладная_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Вставить("Документ_ЗаказНарядТребованиеНакладная_Отправка", Ложь);
	КонецЕсли;
	
	Если ИспользованиеПКО.Свойство("Документ_ЗаказНарядРеализацияАПУ_Отправка") Тогда
		ИспользованиеПКО.Документ_ЗаказНарядРеализацияАПУ_Отправка = Ложь; 
	Иначе
		ИспользованиеПКО.Вставить("Документ_ЗаказНарядРеализацияАПУ_Отправка", Ложь);
	КонецЕсли;
	
	Если ИспользованиеПКО.Свойство("Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка") Тогда
		ИспользованиеПКО.Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка = Ложь;  
	Иначе
		ИспользованиеПКО.Вставить("Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка", Ложь);
	КонецЕсли;
	
	Если ИспользованиеПКО.Свойство("Документ_ЗНКомплектацияПеремещение_Отправка") Тогда
		ИспользованиеПКО.Документ_ЗНКомплектацияПеремещение_Отправка = Ложь; 
	Иначе
		ИспользованиеПКО.Вставить("Документ_ЗНКомплектацияПеремещение_Отправка", Ложь);
	КонецЕсли;
	
	ТипРемонта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ВидРемонта, "ТипРемонта");
	ЭтоКомплектацияАвтомобиля = ТипРемонта = Перечисления.ТипыРемонта.КомплектацияАвтомобиля;
	ЭтоСборкаАвтомобия = ТипРемонта = Перечисления.ТипыРемонта.СборкаАвтомобиля;
	ЭтоБесплатныйРемонт = (ТипРемонта = Перечисления.ТипыРемонта.Бесплатный);
	ФормаСобственностиПлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "ФормаСобственности");
	ПлательщикФизЛицо = (КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьРозничнуюТорговлюДляФизЛиц
		И ФормаСобственностиПлательщика <> Перечисления.ФормыСобственности.ЮридическоеЛицо);
	
	ПравилоУЗаказНарядРеализацияОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ЗаказНаряд_Отправка", "Имя");
	
	Если ПравилоУЗаказНарядРеализацияОтправка <> Неопределено Тогда
		
		ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО.Очистить();
		
		Если ЭтоКомплектацияАвтомобиля ИЛИ ЭтоСборкаАвтомобия Тогда
			
			ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка");
			ЗагрузкаЗаказНарядаКомплектацияАвтомобиляВКомплект(
				КомпонентыОбмена,
				ДанныеИБ,
				ПравилоУЗаказНарядРеализацияОтправка,
				ЭтоСборкаАвтомобия);
			
			ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО.Очистить();
			
			ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО.Добавить("Документ_ЗНКомплектацияПеремещение_Отправка");
			ПеремещениеИзПроизводстваНаСкладАвто(
				КомпонентыОбмена,
				ДанныеИБ,
				ПравилоУЗаказНарядРеализацияОтправка);
		
		ИначеЕсли ЭтоБесплатныйРемонт Тогда
			
			ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядТребованиеНакладная_Отправка");
			ЗагрузкаЗаказНарядаБесплатныйВТребованиеНакладную(КомпонентыОбмена, ДанныеИБ, ПравилоУЗаказНарядРеализацияОтправка);
			
		ИначеЕсли КомпонентыОбмена.ПараметрыКонвертации.ЗаказНарядПроизводство Тогда
			
			ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядТребованиеНакладная_Отправка");
			ЗагрузкаЗаказНарядаВТребованиеНакладную(КомпонентыОбмена, ДанныеИБ, ПравилоУЗаказНарядРеализацияОтправка, НЕ ЭтоБесплатныйРемонт);
			
			Если ДанныеИБ.ДополнительныеСвойства.Свойство("СуммаМатериалов") Тогда
				ИспользованиеПКО.Вставить("Документ_ЗаказНарядРеализацияАПУ_Отправка", Истина);
			КонецЕсли;
			
		Иначе
			
			// Платный ремонт
			Если ПлательщикФизЛицо Тогда
				ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк");
			Иначе
				ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядРеализация_Отправка");
			КонецЕсли;
			
			ЗагрузкаЗаказНарядВРеализациюТоваров(КомпонентыОбмена, ДанныеИБ, ПравилоУЗаказНарядРеализацияОтправка);
			
		КонецЕсли;
		
		Если ДанныеИБ.Материалы.Количество() > 0 Тогда
		
			ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО.Очистить();
			ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядТребованиеНакладная_Отправка");
			ЗагрузкаМатериаловЗаказНарядаВТребованиеНакладную(КомпонентыОбмена, ДанныеИБ, ПравилоУЗаказНарядРеализацияОтправка);
		
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗакрытиеСмены_Отправка
Процедура ДобавитьПОД_Документ_ЗакрытиеСмены_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗакрытиеСмены_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗакрытиеСмены;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗакрытиеСменыОтчетРозница_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_Инвентаризация_Отправка
Процедура ДобавитьПОД_Документ_Инвентаризация_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Инвентаризация_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Инвентаризация;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_Инвентаризация_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Инвентаризация_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияОприходование_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияСписание_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_Инвентаризация_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ИнвентаризацияОприходование_Отправка = Ложь;
	ИспользованиеПКО.Документ_ИнвентаризацияСписание_Отправка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровКомпании.ВидДвижения КАК ВидДвижения
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	ПартииТоваровКомпании.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровКомпании.ВидДвижения";
			
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	ЕстьСписание = Ложь;
	ЕстьОприходование = Ложь;
	Рез = Запрос.Выполнить().Выгрузить();
			
	Для Каждого Строка из Рез Цикл
		Если Строка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			ЕстьОприходование = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
			
	Для Каждого Строка из Рез Цикл
		Если Строка.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			ЕстьСписание = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ИспользованиеПКО.Документ_ИнвентаризацияОприходование_Отправка = ЕстьОприходование;
	ИспользованиеПКО.Документ_ИнвентаризацияСписание_Отправка = ЕстьСписание;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияАвтомобилей_Отправка
Процедура ДобавитьПОД_Документ_ИнвентаризацияАвтомобилей_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризацияАвтомобилей_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнвентаризацияАвтомобилей;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнвентаризацияАвтомобилей_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияАвтомобилей_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияАвтомОприходование_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияАвтомСписание_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ИнвентаризацияАвтомобилей_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ИнвентаризацияАвтомОприходование_Отправка = Ложь;
	ИспользованиеПКО.Документ_ИнвентаризацияАвтомСписание_Отправка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиАвтомобилей.ВидДвижения КАК ВидДвижения
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиАвтомобилей.ВидДвижения";
			
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	ЕстьСписание = Ложь;
	ЕстьОприходование = Ложь;
	Рез = Запрос.Выполнить().Выгрузить();
			
	Для Каждого Строка из Рез Цикл
		Если Строка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			ЕстьОприходование = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
			
	Для Каждого Строка из Рез Цикл
		Если Строка.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			ЕстьСписание = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ИспользованиеПКО.Документ_ИнвентаризацияАвтомОприходование_Отправка = ЕстьОприходование;
	ИспользованиеПКО.Документ_ИнвентаризацияАвтомСписание_Отправка = ЕстьСписание;
КонецПроцедуры
#КонецОбласти
#Область Документ_Инкассация_Отправка
Процедура ДобавитьПОД_Документ_Инкассация_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Инкассация_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Инкассация;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_Инкассация_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнкассацияПодотчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_Инкассация_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли; 
		
		ИспользованиеПКО.Документ_РКОНаБанковскийсчет_Отправка = Ложь;
		ИспользованиеПКО.Документ_ИнкассацияПодотчет_Отправка = Ложь;
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Ложь;
	
		
		СуммаОплат  = 0;
		Для Каждого Строка Из ДанныеИБ.Оплаты Цикл
			Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда 
				СуммаОплат = СуммаОплат + Строка.Сумма;
			КонецЕсли;
		КонецЦикла; 
		
		Если СуммаОплат = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		
		Если ДанныеИБ.Хозоперация = Справочники.ХозОперации.ИзъятиеИзКассыККМ Тогда 
		
			ИспользованиеПКО.Документ_РКОНаБанковскийсчет_Отправка = НЕ  ЭтоПодотчет(ДанныеИБ.Инкассатор);
			ИспользованиеПКО.Документ_ИнкассацияПодотчет_Отправка = ЭтоПодотчет(ДанныеИБ.Инкассатор);
		
		ИначеЕсли  ДанныеИБ.Хозоперация = Справочники.ХозОперации.ВнесениеВКассуККМ Тогда
		    
		      ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	
			
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_Комплектация_Отправка
Процедура ДобавитьПОД_Документ_Комплектация_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Комплектация_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Комплектация;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_Комплектация_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Комплектация_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КомплектацияВПроизводство_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_Комплектация_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_Комплектация_Отправка = Ложь;
	ИспользованиеПКО.Документ_КомплектацияВПроизводство_Отправка = Ложь;
	
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.КомплектацияВПроизводство Тогда
		ИспользованиеПКО.Документ_Комплектация_Отправка = Истина;
		ИспользованиеПКО.Документ_КомплектацияВПроизводство_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_Комплектация_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаДолга_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаДолга_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаДолга_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаДолга;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаПоступления_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаПоступления;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступленияАвто_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаПоступленияАвто_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаПоступленияАвто_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаПоступленияАвтомобилей;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступленияАвто_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаРеализации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаРеализации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаРеализации;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаОприходованиеТоваров_Отправк");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаТребованиеНакладная_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПеремещениеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользованиеПКО.Свойство("Документ_КорректировкаРеализации_Отправка") Тогда
		ИспользованиеПКО.Документ_КорректировкаРеализации_Отправка = Ложь; 
	КонецЕсли;  
	
	    Если ИспользованиеПКО.Свойство("Документ_КорректировкаОприходованиеТоваров_Отправк") Тогда
		ИспользованиеПКО.Документ_КорректировкаОприходованиеТоваров_Отправк = Ложь; 
	КонецЕсли;  
	
	Если ИспользованиеПКО.Свойство("Документ_КорректировкаТребованиеНакладная_Отправка") Тогда
		ИспользованиеПКО.Документ_КорректировкаТребованиеНакладная_Отправка = Ложь; 
	КонецЕсли; 
	
	Если ИспользованиеПКО.Свойство("Документ_КорректировкаПеремещениеТоваров_Отправка") Тогда
		ИспользованиеПКО.Документ_КорректировкаПеремещениеТоваров_Отправка = Ложь; 
	КонецЕсли;  
	 
	ПравилоКорректировкаОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_КорректировкаРеализации_Отправка", "Имя");
	
	Если ПравилоКорректировкаОтправка <> Неопределено Тогда
		
		ПравилоКорректировкаОтправка.ИспользуемыеПКО.Очистить();
	
		ОснованиеКорректировки = ПолучитьОснованиеКорректировки(ДанныеИБ);
		Если ТипЗнч(ОснованиеКорректировки) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		     
			Если КомпонентыОбмена.ПараметрыКонвертации.ЗаказНарядПроизводство Тогда 
			
				ЗагрузкаКорректировкиЗаказНарядПроизводство(КомпонентыОбмена, ДанныеИБ, ОснованиеКорректировки,ПравилоКорректировкаОтправка); 
			Иначе 
			    ЗагрузкаКорректировкиЗаказНарядПеремещение(КомпонентыОбмена, ДанныеИБ, ОснованиеКорректировки,ПравилоКорректировкаОтправка);
			КонецЕсли; 
	
		КонецЕсли;  
	КонецЕсли;
			
	ИспользованиеПКО.Вставить("Документ_КорректировкаРеализации_Отправка", Истина);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализацииАвто_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаРеализацииАвто_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаРеализацииАвто_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаРеализацииАвтомобилей;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализацииАвто_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионера_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомиссионера;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионера_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаТоваровМеждуОрганизациями_Отправка
Процедура ДобавитьПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаТоваровМеждуОрганизациями_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаМеждуОрганизациями_РТУ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ОтборОрганизация.Количество() > 0 Тогда
		Если КомпонентыОбмена.ПараметрыКонвертации.ОтборОрганизация.Найти(ДанныеИБ.Организация)= Неопределено Тогда 
			ИспользованиеПКО.Документ_ПередачаМеждуОрганизациями_РТУ_Отправка = Ложь;
		КонецЕсли;
			
		Если КомпонентыОбмена.ПараметрыКонвертации.ОтборОрганизация.Найти(ДанныеИБ.ОрганизацияПолучатель) = Неопределено Тогда 
			ИспользованиеПКО.Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка = Ложь;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеАвтомобилей_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеАвтомобилей_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеАвтомобилей_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеАвтомобилей;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеАвтомобилей_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеАвтомобилей_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеАвтомобилейВФилиал_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеАвтомобилейИзФилиала_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеАвтомобилей_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПеремещениеАвтомобилей_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПеремещениеАвтомобилейВФилиал_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПеремещениеАвтомобилейИзФилиала_Отправка = Ложь;
	
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПеремещениеАвтомобилей Тогда
		ИспользованиеПКО.Документ_ПеремещениеАвтомобилей_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПеремещениеАвтомобилейВФилиал Тогда
		ИспользованиеПКО.Документ_ПеремещениеАвтомобилейВФилиал_Отправка = Истина;	
	ИначеЕсли ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПеремещениеАвтомобилейИзФилиала Тогда
		ИспользованиеПКО.Документ_ПеремещениеАвтомобилейИзФилиала_Отправка = Истина;	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеНезавершенногоПроизводства_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеНезавершенногоПроизводства_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеНезавершенногоПроизводства_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеНезавершенногоПроизводства;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеНезавершенногоПроизводства_Отп");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваровВФилиал_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваровИзФилиала_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПеремещениеТоваровВФилиал_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПеремещениеТоваровИзФилиала_Отправка = Ложь;
	
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваров Тогда
		ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровВФилиал
		И НЕ ДанныеИБ.ИспользоватьТоварыВПути Тогда
		ИспользованиеПКО.Документ_ПеремещениеТоваровВФилиал_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала Тогда
		Если НЕ ДанныеИБ.ИспользоватьТоварыВПути Тогда
			ИспользованиеПКО.Документ_ПеремещениеТоваровИзФилиала_Отправка = Истина;
		ИначеЕсли ТипЗнч(ДанныеИБ.СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании") Тогда
			ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Истина;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваровВПроизводство_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваровВПроизводство_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваровВПроизводство_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваровВПроизводство;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваровВПроизводство_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_Пересортица_Отправка
Процедура ДобавитьПОД_Документ_Пересортица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Пересортица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересортицаТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаКакСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаКакОприходование_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение_Отправка
Процедура ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлатежноеПоручение_Отправка = Ложь;
	Если Не ДанныеИБ.ВидОперации =  Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации Тогда
		ИспользованиеПКО.Документ_ПлатежноеПоручение_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеАвтомобилей_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеАвтомобилей_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеАвтомобилей_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеАвтомобилей;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеАвтомобилей_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеАвтомобилей_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеАвтомобилей_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПоступлениеАвтомобилей_Отправка = Истина;
		Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение
			И Не КомпонентыОбмена.ПараметрыКонвертации.ВыгрузкаПоступленийАвтоНаОтвХранение Тогда
			ИспользованиеПКО.Документ_ПоступлениеАвтомобилей_Отправка = Ложь;
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходныйКассовыйОрдер_Отправка
Процедура ДобавитьПОД_Документ_ПриходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПриходныйКассовыйОрдер_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриходныйКассовыйОрдер_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПриходныйКассовыйОрдер_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Ложь;
		
	ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.СтатьяДДС, "Операция");
	ВидОперации = ДанныеОперации.Операция;
			
	Если ЭтоПодотчет(ДанныеИБ.Контрагент) И 
		(ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратЗаймаСотрудником ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратПодотчетныхСумм) Тогда
				
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОтПоставщика ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПоступлениеОтПокупателя ИЛИ
		ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка Тогда 
			
		ИспользованиеПКО.Документ_ПриходныйКассовыйОрдер_Отправка = Истина;  
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеНаличныхВБанке Тогда
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;  
	Иначе
		ИспользованиеПКО.Документ_ПриходныйКассовыйОрдер_Отправка = Истина;  
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_Разукомплектация_Отправка
Процедура ДобавитьПОД_Документ_Разукомплектация_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Разукомплектация_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Разукомплектация;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Разукомплектация_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_РазукомплектацияАвтомобилей_Отправка
Процедура ДобавитьПОД_Документ_РазукомплектацияАвтомобилей_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РазукомплектацияАвтомобилей_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РазукомплектацияАвтомобилей;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РазукомплектацияАвтомобилей_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РазукомплектацияАвтомобилей_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РазукомплектацияПеремещТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РазукомплектацияАвтомобилей_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ИспользованиеПКО.Свойство("Документ_РазукомплектацияАвтомобилей_Отправка") Тогда
			ИспользованиеПКО.Документ_РазукомплектацияПеремещТоваров_Отправка = Ложь;
		Иначе	
			ИспользованиеПКО.Вставить("Документ_РазукомплектацияАвтомобилей_Отправка", Ложь);
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходныйКассовыйОрдер_Отправка
Процедура ДобавитьПОД_Документ_РасходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходныйКассовыйОрдер_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РасходныйКассовыйОрдер_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОИнкассация_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РасходныйКассовыйОрдер_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОИнкассация_Отправка = Ложь; 
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Ложь; 
			
	ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СтатьяДДС, "Операция");
				
	Если (ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаймаСотруднику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеПодОтчет)И ЭтоПодотчет(ДанныеИБ.Контрагент) Тогда
					
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина; 
					
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаработнойПлатыСотруднику
			И ЭтоПодотчет(ДанныеИБ.Контрагент) Тогда 
		ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Истина;	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.Инкассация 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиВБанк Тогда
		ИспользованиеПКО.Документ_РКОИнкассация_Отправка = Истина;
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОплатыПокупателю ИЛИ 
			ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ОплатаПоставщику ИЛИ
			ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратКредитаБанку Тогда 
					
		ИспользованиеПКО.Документ_РасходныйКассовыйОрдер_Отправка = Истина; 
	Иначе
		ИспользованиеПКО.Документ_РасходныйКассовыйОрдер_Отправка = Истина; 
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияАвтомобилей_Отправка
Процедура ДобавитьПОД_Документ_РеализацияАвтомобилей_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияАвтомобилей_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияАвтомобилей;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияАвтомобилей_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваров_Отправка
Процедура ДобавитьПОД_Документ_РеализацияТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеАвтомобилей_Отправка
Процедура ДобавитьПОД_Документ_СписаниеАвтомобилей_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеАвтомобилей_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеАвтомобилей;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеАвтомобилей_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеАктивов_Отправка
Процедура ДобавитьПОД_Документ_СписаниеАктивов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеАктивов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеАктивов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеАктивов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваровЗапасы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваровВПроизводство_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваровОтчетКомиссионера_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СписаниеТоваровЗапасы_Отправка = Ложь;
	ИспользованиеПКО.Документ_СписаниеТоваровВПроизводство_Отправка = Ложь;
	ИспользованиеПКО.Документ_СписаниеТоваровОтчетКомиссионера_Отправка = Ложь;
	
	Если ДанныеИБ.ХозОперация <> Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию Тогда
		Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.СписаниеТоваров И Не КомпонентыОбмена.ПараметрыКонвертации.СписаниеТребованиеНакладная Тогда
			ИспользованиеПКО.Документ_СписаниеТоваровЗапасы_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ХозОперация = Справочники.ХозОперации.СписаниеВПроизводство ИЛИ КомпонентыОбмена.ПараметрыКонвертации.СписаниеТребованиеНакладная Тогда
			ИспользованиеПКО.Документ_СписаниеТоваровВПроизводство_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию Тогда
		ИспользованиеПКО.Документ_СписаниеТоваровОтчетКомиссионера_Отправка	= Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплату_Отправка
Процедура ДобавитьПОД_Документ_СчетНаОплату_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетНаОплату_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплату;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплату_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуЗаАвтомобили_Отправка
Процедура ДобавитьПОД_Документ_СчетНаОплатуЗаАвтомобили_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетНаОплатуЗаАвтомобили_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуЗаАвтомобили;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплатуЗаАвтомобили_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетОтПоставщика_Отправка
Процедура ДобавитьПОД_Документ_СчетОтПоставщика_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетОтПоставщика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетОтПоставщика;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетОтПоставщика_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетОтПоставщикаЗаАвтомобили_Отправка
Процедура ДобавитьПОД_Документ_СчетОтПоставщикаЗаАвтомобили_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетОтПоставщикаЗаАвтомобили_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетОтПоставщикаЗаАвтомобили;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетОтПоставщикаЗаАвтомобили_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураВыданный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ДокОснование = ДанныеИБ.ДокументОснование;
		
		Если ЗначениеЗаполнено(ДокОснование) Тогда
			ИмяПКО = ПолучитьИмяПКОДокумента(ДокОснование, КомпонентыОбмена); 
			Если ИмяПко = "" И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЧекНаОплату") Тогда
				ПризнакСпособаРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОснование, "ПризнакСпособаРасчета");
				ОснованиеХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОснование, "ХозОперация");
				Если ОснованиеХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат 
				ИЛИ ОснованиеХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки Тогда
					ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
				ИначеЕсли (ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс 
					ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная 
					ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная) Тогда
					
					ДокОснованиеСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОснование, "Ссылка");
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ВзаиморасчетыКомпании.Период КАК Период
					|ИЗ
					|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
					|ГДЕ
					|	ВзаиморасчетыКомпании.Регистратор = &Регистратор
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	РасчетыСКонтрагентами.Период
					|ИЗ
					|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
					|ГДЕ
					|	РасчетыСКонтрагентами.Регистратор = &Регистратор";
					Запрос.УстановитьПараметр("Регистратор", ДокОснованиеСсылка);
					РезультатЗапроса = Запрос.Выполнить().Выгрузить();
					
					Если РезультатЗапроса.Количество() = 0 Тогда
						ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
					Иначе
						ЕстьБезнал = Ложь;
						ЕстьНал = Ложь;
						
						ДокОснованиеОплаты = ДокОснование.Оплаты;
						
						Для Каждого Строка Из ДокОснованиеОплаты Цикл
							Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
								ЕстьБезнал = Истина;
							КонецЕсли;
							Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
								ЕстьНал = Истина;
							КонецЕсли;
						КонецЦикла;
						Если НЕ ЕстьБезнал И НЕ ЕстьНал Тогда
							ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РеализацияАктивов") Тогда
			    ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
			ИначеЕсли ИмяПКО = "Документ_ЗаказНарядТребованиеНакладная_Отправка" Тогда
					ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
			ИначеЕсли НЕ ЗначениеЗаполнено(ИмяПКО) Тогда
				ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
			Иначе
				ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Если ТекПКО.ОбъектФормата = "Документ.ОтчетОРозничныхПродажах" Тогда
					ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураПолученный;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларацияИмпорт_Отправка
Процедура ДобавитьПОД_Документ_ТаможеннаяДекларацияИмпорт_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ТаможеннаяДекларацияИмпорт_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ТаможеннаяДекларацияИмпорт;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларацияИмпорт_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_УведомлениеОбОстаткахПрослеживаемыхТоваров_Отправка
Процедура ДобавитьПОД_Документ_УведомлениеОбОстаткахПрослеживаемыхТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УведомлениеОбОстаткахПрослеживаемыхТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УведомлениеОбОстаткахПрослежТов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Отправка
Процедура ДобавитьПОД_Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УведомлениеОВвозеПрослежТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_УведомлениеОПеремещенииПрослеживаемыхТоваров_Отправка
Процедура ДобавитьПОД_Документ_УведомлениеОПеремещенииПрослеживаемыхТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УведомлениеОПеремещенииПрослеживаемыхТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УведомлениеОПеремещенииПрослеж_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЧекНаОплату_Отправка
Процедура ДобавитьПОД_Документ_ЧекНаОплату_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЧекНаОплату_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЧекНаОплату;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЧекНаОплату_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекНаОплатуКакПКО_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекНаОплатуКакРКО_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекНаОплатуБезнал_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЧекНаОплату_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЧекНаОплатуКакПКО_Отправка = Ложь;
	ИспользованиеПКО.Документ_ЧекНаОплатуКакРКО_Отправка = Ложь;
	ИспользованиеПКО.Документ_ЧекНаОплатуБезнал_Отправка = Ложь;
	
	Если ДанныеИБ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВзаиморасчетыКомпании.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
			|ГДЕ
			|	ВзаиморасчетыКомпании.Регистратор = &Регистратор
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасчетыСКонтрагентами.Период
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
			|ГДЕ
			|	РасчетыСКонтрагентами.Регистратор = &Регистратор";
		Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьБезнал = Ложь;
	ЕстьНал = Ложь;
	
	Для Каждого Строка Из ДанныеИБ.Оплаты Цикл
		Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
			ЕстьБезнал = Истина;
		КонецЕсли;
		Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			ЕстьНал = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ЧекНаОплату Или ДанныеИБ.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат Тогда
		
		ИспользованиеПКО.Документ_ЧекНаОплатуКакПКО_Отправка = ?(ЕстьНал, Истина, Ложь);
		ИспользованиеПКО.Документ_ЧекНаОплатуБезнал_Отправка = ?(ЕстьБезнал, Истина, Ложь);
		
	ИначеЕсли ДанныеИБ.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат Или ДанныеИБ.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки Тогда
	
		ИспользованиеПКО.Документ_ЧекНаОплатуКакРКО_Отправка = ?(ЕстьНал, Истина, Ложь);
		ИспользованиеПКО.Документ_ЧекНаОплатуБезнал_Отправка = ?(ЕстьБезнал, Истина, Ложь);
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документы_ИзвлечениеТоваровИзПроизводства_Отправка
Процедура ДобавитьПОД_Документы_ИзвлечениеТоваровИзПроизводства_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документы_ИзвлечениеТоваровИзПроизводства_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИзвлечениеТоваровИзПроизводства;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИзвлечениеТоваровИзПроизводства_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документы_ПоступлениеДопРасходов_Отправка
Процедура ДобавитьПОД_Документы_ПоступлениеДопРасходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документы_ПоступлениеДопРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеДопРасходов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Автомобили_Отправка
Процедура ДобавитьПОД_Справочник_Автомобили_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Автомобили_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Автомобили;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Автомобили_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Автомобили_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_АвтомобилиГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Автомобили_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Автомобили_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_АвтомобилиГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Автоработы_Отправка
Процедура ДобавитьПОД_Справочник_Автоработы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Автоработы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Автоработы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Автоработы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Автоработы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Автоработы_Группа");
КонецПроцедуры

Процедура ПОД_Справочник_Автоработы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Автоработы_Отправка = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_Автоработы_Группа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторБанков;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыВзаиморасчетов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторТНВЭД_Отправка
Процедура ДобавитьПОД_Справочник_КлассификаторТНВЭД_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторТНВЭД_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторТНВЭД");
КонецПроцедуры

Процедура ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.10") Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторыЕдиницИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_КлассификаторыЕдиницИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторыЕдиницИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторЕдиницИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентФизЛицо_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа    = ДанныеИБ.ЭтоГруппа;
	
	ИспользованиеПКО.Справочник_КонтрагентФизЛицо_Отправка = Ложь;
	
	СотрудникЗаполнен = ЗначениеЗаполнено(ДанныеИБ.Сотрудник);
	КонтрагентПодотчетник = ?(ДанныеИБ.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо, Истина, Ложь);
	ЧастноеЛицо = ?(ДанныеИБ.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо, Истина, Ложь);
	Если ИспользованиеПКО.Справочник_Контрагенты_Отправка
		И КонтрагентПодотчетник
		И ЧастноеЛицо
		И СотрудникЗаполнен Тогда
		ИспользованиеПКО.Справочник_КонтрагентФизЛицо_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Модели_Отправка
Процедура ДобавитьПОД_Справочник_Модели_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Модели_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Модели;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Модели_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Модели_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_МоделиГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Модели_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Модели_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_МоделиГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Патенты_Отправка
Процедура ДобавитьПОД_Справочник_Патенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Патенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Патенты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Патенты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПодразделениеКомпании_Отправка
Процедура ДобавитьПОД_Справочник_ПодразделениеКомпании_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПодразделениеКомпании_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияКомпании;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПодразделенияКомпании_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Производители_Отправка
Процедура ДобавитьПОД_Справочник_Производители_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Производители_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Производители;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Производители_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Производители_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПроизводителиГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Производители_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	КонтрагентПроизводитель = КонтрагентПоНаименованию(ДанныеИБ.Наименование, ДанныеИБ.ЭтоГруппа);
	
	НайденКонтрагент = КонтрагентПроизводитель <> Неопределено;
	
	ИспользованиеПКО.Справочник_Производители_Отправка = Не ДанныеИБ.ЭтоГруппа И НЕ НайденКонтрагент;
	ИспользованиеПКО.Справочник_ПроизводителиГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыКомпании_Отправка
Процедура ДобавитьПОД_Справочник_СкладыКомпании_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкладыКомпании_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СкладыКомпании;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СкладыКомпании_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыКомпании_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыКомпанииГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_СкладыКомпании_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СкладыКомпании_Отправка = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СкладыКомпанииГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Сотрудники_Отправка
Процедура ДобавитьПОД_Справочник_Сотрудники_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Сотрудники_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Сотрудники;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Сотрудники_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Сотрудники_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочники_СотрудникиГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Сотрудники_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Сотрудники_Отправка = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочники_СотрудникиГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДДС;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиДДС = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СтатьиДДСГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходовИРасходов
Процедура ДобавитьПОД_Справочник_СтатьиДоходовИРасходов(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДоходовИРасходов";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДоходовИРасходов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ТипыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ТипыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ТипыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_ТипыНоменклатуры_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Отправка
Процедура ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыЦен;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры

Процедура ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ТипыЦен = НЕ ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЦеновыеГруппы_Отправка
Процедура ДобавитьПОД_Справочник_ЦеновыеГруппы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЦеновыеГруппы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЦеновыеГруппы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ЦеновыеГруппы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЦеновыеГруппы");
КонецПроцедуры

Процедура ПОД_Справочник_ЦеновыеГруппы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_ЦеновыеГруппы = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Цеха_Отправка
Процедура ДобавитьПОД_Справочник_Цеха_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Цеха_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Цеха;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Цеха_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Цеха_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЦехаГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Цеха_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Цеха_Отправка = Истина;
	ИспользованиеПКО.Справочник_ЦехаГруппа_Отправка = Истина;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ПБДСВзносНаличными_Получение
Процедура ДобавитьПОД_Документ_ПБДСВзносНаличными_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСВзносНаличными_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСВзносНаличными";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСВзносНаличными_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПОД_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПереводНаДругойСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПереводНаДругойСчет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочееПоступление";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, "Документ_ПБДСПрочееПоступление_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочиеДоходы";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, "Документ_ПБДСПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, "Документ_ПБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходныйКассовыйОрдарСотрудника_Получение
Процедура ДобавитьПОД_Документ_ПриходныйКассовыйОрдарСотрудника_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПриходныйКассовыйОрдарСотрудника_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПриходныйКассовыйОрдарСотрудника_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОСотрудники_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПриходныйКассовыйОрдарСотрудника_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПКОСотрудники_Получение = Ложь;
			
	КоличествоДокументов = ДанныеXDTO.РасшифровкаПлатежа.Количество();
		
	// Проверим, что это ранее выгруженный "Чек на оплату" или ПКО
	Если КоличествоДокументов = 1 Тогда
		СсылкаНаОбъект = СсылкаНаОбъектПоПубличномуИдентификатору(
			ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение,
			КомпонентыОбмена.УзелКорреспондента);
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЧекНаОплату") Тогда
			// Ничего делать не надо
			Возврат;
		ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			// Выполняем по стандартной схеме
			ИспользованиеПКО.Документ_ПКОСотрудники_Получение = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
		
	Для Строка = 0 По (КоличествоДокументов - 1) Цикл
				
		ПреобразованныеXDTO = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеXDTO);
		ПреобразованныеXDTO.РасшифровкаПлатежа.Очистить();
		НоваяСтрока = ПреобразованныеXDTO.РасшифровкаПлатежа.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеXDTO.РасшифровкаПлатежа[Строка]);
				
		Если КоличествоДокументов > 9 Тогда
			ПрефиксНомера = Строка;
			ПрефиксУИД = Строка;
		Иначе
			ПрефиксНомера = "0" + Строка;
			ПрефиксУИД = "0" + Строка;
		КонецЕсли;
					
		ЛеваяЧастьНомера = Лев(ПреобразованныеXDTO.КлючевыеСвойства.Номер, 5);
		ПраваяЧастьНомера = Прав(ПреобразованныеXDTO.КлючевыеСвойства.Номер, 4);	
		ПреобразованныеXDTO.КлючевыеСвойства.Номер = ЛеваяЧастьНомера + ПрефиксНомера + ПраваяЧастьНомера;
		
		ЛеваяЧастьУИД = Лев(ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение, 34);
		ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение = ЛеваяЧастьУИД + ПрефиксУИД;
		ПреобразованныеXDTO.Ссылка.Значение = ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение;
	
		ПКО_ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Документ_ПКОСотрудники_Получение");
		ПолученныйПКО = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ПреобразованныеXDTO,
			ПКО_ПКО);
				
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходныйКассовыйОрдер_Получение
Процедура ДобавитьПОД_Документ_ПриходныйКассовыйОрдер_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПриходныйКассовыйОрдер_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПриходныйКассовыйОрдер_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриходныйКассовыйОрдер_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПриходныйКассовыйОрдер_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПриходныйКассовыйОрдер_Получение = Ложь;
		
	КоличествоДокументов = ДанныеXDTO.РасшифровкаПлатежа.Количество();
		
	// Проверим, что это ранее выгруженный "Чек на оплату" или ПКО
	СсылкаНаОбъект = СсылкаНаОбъектПоПубличномуИдентификатору(
		ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение,
		КомпонентыОбмена.УзелКорреспондента);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЧекНаОплату") Тогда
		// Ничего делать не надо
		Возврат;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		// Выполняем по стандартной схеме
		ИспользованиеПКО.Документ_ПриходныйКассовыйОрдер_Получение = Истина;
		Возврат;
	КонецЕсли;
		
	Для Строка = 0 По (КоличествоДокументов - 1) Цикл
		
		ПреобразованныеXDTO = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеXDTO);
		ПреобразованныеXDTO.РасшифровкаПлатежа.Очистить();
		НоваяСтрока = ПреобразованныеXDTO.РасшифровкаПлатежа.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеXDTO.РасшифровкаПлатежа[Строка]);
		
		Если КоличествоДокументов > 9 Тогда
			ПрефиксНомера = Строка;
			ПрефиксУИД = Строка;
		Иначе
			ПрефиксНомера = "0" + Строка;
			ПрефиксУИД = "0" + Строка;
		КонецЕсли;
		
		ЛеваяЧастьНомера = Лев(ПреобразованныеXDTO.КлючевыеСвойства.Номер, 5);
		ПраваяЧастьНомера = Прав(ПреобразованныеXDTO.КлючевыеСвойства.Номер, 4);	
		ПреобразованныеXDTO.КлючевыеСвойства.Номер = ЛеваяЧастьНомера + ПрефиксНомера + ПраваяЧастьНомера;
		
		ЛеваяЧастьУИД = Лев(ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение, 34);
		ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение = ЛеваяЧастьУИД + ПрефиксУИД;
		ПреобразованныеXDTO.Ссылка.Значение = ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение;
		
		ПКО_ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Документ_ПриходныйКассовыйОрдер_Получение");
		ПолученныйПКО = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ПреобразованныеXDTO,
			ПКО_ПКО);
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходныйКассовыйОрдер_Получение
Процедура ДобавитьПОД_Документ_РасходныйКассовыйОрдер_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходныйКассовыйОрдер_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РасходныйКассовыйОрдер_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РасходныйКассовыйОрдер_Получение");
КонецПроцедуры

Процедура ПОД_Документ_РасходныйКассовыйОрдер_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РасходныйКассовыйОрдер_Получение = Ложь;
	
	КоличествоДокументов = ДанныеXDTO.РасшифровкаПлатежа.Количество();
	
	// Проверим, что это ранее выгруженный "Чек на оплату" или РКО
	СсылкаНаОбъект = СсылкаНаОбъектПоПубличномуИдентификатору(
		ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение,
		КомпонентыОбмена.УзелКорреспондента);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЧекНаОплату") Тогда
		// Ничего делать не надо
		Возврат;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		// Выполняем по стандартной схеме
		ИспользованиеПКО.Документ_РасходныйКассовыйОрдер_Получение = Истина;
		Возврат;
	КонецЕсли;
	
	Для Строка = 0 По (КоличествоДокументов - 1) Цикл
		
		ПреобразованныеXDTO = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеXDTO);
		ПреобразованныеXDTO.РасшифровкаПлатежа.Очистить();
		НоваяСтрока = ПреобразованныеXDTO.РасшифровкаПлатежа.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеXDTO.РасшифровкаПлатежа[Строка]);
		ПорогДлинны = 9;
		Если КоличествоДокументов > ПорогДлинны Тогда
			ПрефиксНомера = Строка;
			ПрефиксУИД = Строка;
		Иначе
			ПрефиксНомера = "0" + Строка;
			ПрефиксУИД = "0" + Строка;
		КонецЕсли;
		
		ЛеваяЧастьНомера = Лев(ПреобразованныеXDTO.КлючевыеСвойства.Номер, 5);
		ПраваяЧастьНомера = Прав(ПреобразованныеXDTO.КлючевыеСвойства.Номер, 4);	
		ПреобразованныеXDTO.КлючевыеСвойства.Номер = ЛеваяЧастьНомера + ПрефиксНомера + ПраваяЧастьНомера;
		
		ЛеваяЧастьУИД = Лев(ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение, 34);
		ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение = ЛеваяЧастьУИД + ПрефиксУИД;
		ПреобразованныеXDTO.Ссылка.Значение = ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение;
		
		ПКО_РКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_РасходныйКассовыйОрдер_Получение");
		ПолученныйРКО = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ПреобразованныеXDTO,
			ПКО_РКО);
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОВыплатаЗарплаты";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РКОВыплатаЗарплаты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Получение");
КонецПроцедуры

Процедура ПОД_Документ_РКОВыплатаЗарплаты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Получение = Ложь;
		
		Количество = ДанныеXDTO.РасшифровкаПлатежа.Количество();
		
		Если Количество < 2 Тогда
			ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Получение = Истина;
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОНаБанковскийСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, "Документ_СБДСПеречислениеЗаработнойПлаты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗПНаЛС_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗПНаЛС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗПНаЛС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗПНаЛС_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, "Документ_СБДСПеречислениеЗПНаЛС_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПлатежиВБюджет";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСПлатежиВБюджет_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСПлатежиВБюджет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, "Документ_СБДСПлатежиВБюджет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочееСписание_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочееСписание";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, "Документ_СБДСПрочееСписание_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочиеРасходы";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, "Документ_СБДСПрочиеРасходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, "Документ_СБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСРасчетыССотрудниками_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСРасчетыССотрудниками_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, "Документ_СБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДССнятиеНаличных_Получение
Процедура ДобавитьПОД_Документ_СБДССнятиеНаличных_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДССнятиеНаличных_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДССнятиеНаличных";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДССнятиеНаличных_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_УведомлениеОбОстаткахПрослеживаемыхТоваров_Получение
Процедура ДобавитьПОД_Документ_УведомлениеОбОстаткахПрослеживаемыхТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УведомлениеОбОстаткахПрослеживаемыхТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УведомлениеОбОстаткахПрослежТов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Получение
Процедура ДобавитьПОД_Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УведомлениеОВвозеПрослеживаемыхТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УведомлениеОВвозеПрослежТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Докумнет_РасходныйКассовыйОрдерСотрудники_Получение
Процедура ДобавитьПОД_Докумнет_РасходныйКассовыйОрдерСотрудники_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Докумнет_РасходныйКассовыйОрдерСотрудники_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыССотрудниками";
	ПравилоОбработки.ПриОбработке            = "ПОД_Докумнет_РасходныйКассовыйОрдерСотрудники_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РасходныйКассовыйОрдерСотрудник_Получение");
КонецПроцедуры

Процедура ПОД_Докумнет_РасходныйКассовыйОрдерСотрудники_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РасходныйКассовыйОрдерСотрудник_Получение = Ложь;
			
	КоличествоДокументов = ДанныеXDTO.РасшифровкаПлатежа.Количество();
			
	// Проверим, что это ранее выгруженный "Чек на оплату" или РКО
	Если КоличествоДокументов = 1 Тогда
		СсылкаНаОбъект = СсылкаНаОбъектПоПубличномуИдентификатору(
			ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение,
			КомпонентыОбмена.УзелКорреспондента);
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЧекНаОплату") Тогда
			// Ничего делать не надо
			Возврат;
		ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			// Выполняем по стандартной схеме
			ИспользованиеПКО.Документ_РасходныйКассовыйОрдерСотрудник_Получение = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Строка = 0 По (КоличествоДокументов - 1) Цикл
				
		ПреобразованныеXDTO = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеXDTO);
		ПреобразованныеXDTO.РасшифровкаПлатежа.Очистить();
		НоваяСтрока = ПреобразованныеXDTO.РасшифровкаПлатежа.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеXDTO.РасшифровкаПлатежа[Строка]);
		ПорогДлинны = 9;
		Если КоличествоДокументов > ПорогДлинны Тогда
			ПрефиксНомера = Строка;
			ПрефиксУИД = Строка;
		Иначе
			ПрефиксНомера = "0" + Строка;
			ПрефиксУИД = "0" + Строка;
		КонецЕсли;
		
		ЛеваяЧастьНомера = Лев(ПреобразованныеXDTO.КлючевыеСвойства.Номер, 5);
		ПраваяЧастьНомера = Прав(ПреобразованныеXDTO.КлючевыеСвойства.Номер, 4);	
		ПреобразованныеXDTO.КлючевыеСвойства.Номер = ЛеваяЧастьНомера + ПрефиксНомера + ПраваяЧастьНомера;
		
		ЛеваяЧастьУИД = Лев(ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение, 34);
		ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение = ЛеваяЧастьУИД + ПрефиксУИД;
		ПреобразованныеXDTO.Ссылка.Значение = ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение;
		
		ПКО_РКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_РасходныйКассовыйОрдерСотрудник_Получение");
		ПолученныйРКО = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
		КомпонентыОбмена,
		ПреобразованныеXDTO,
		ПКО_РКО);
				
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГТД_Получение
Процедура ДобавитьПОД_Справочник_ГТД_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ГТД_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НомерГТД";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ГТД_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторТНВЭД_Получение
Процедура ДобавитьПОД_Справочник_КлассификаторТНВЭД_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторТНВЭД_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КодТНВЭД";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторТНВЭД");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа_Получение
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыФизЛицо_Получение
Процедура ДобавитьПОД_Справочник_КонтрагентыФизЛицо_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыФизЛицо_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КонтрагентыФизЛицо_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_Справочник_КонтрагентыФизЛицо_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Патенты_Получение
Процедура ДобавитьПОД_Справочник_Патенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Патенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Патенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Патенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделение_Получение
Процедура ДобавитьПОД_Справочник_Подразделение_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделение_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Подразделения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДСГруппа
Процедура ДобавитьПОД_Справочник_СтатьиДДСГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДСГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДСГруппа";
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Получение
Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВводВЭксплуатацию_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Взаимозачет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратОтПокупателяАвтомобилей_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратПоставщикуАвтомобилей_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоБесплатномуЗН_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНарядРеализация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНарядРеализацияАПУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗакрытиеСменыОтчетРозница_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗНКомплектацияПеремещение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИзвлечениеТоваровИзПроизводства_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Инвентаризация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияАвтомобилей_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияАвтомОприходование_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияАвтомСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияОприходование_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнкассацияПодотчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Комплектация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КомплектацияВПроизводство_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаДолга_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаОприходованиеТоваров_Отправк(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступленияАвто_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализацииАвто_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаТребованиеНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСВзносНаличными_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаМеждуОрганизациями_РТУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеАвтомобилей_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеАвтомобилейВФилиал_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеАвтомобилейИзФилиала_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеНезавершенногоПроизводства_Отп(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваровВПроизводство_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваровВФилиал_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваровИзФилиала_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаКакОприходование_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаКакСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеАвтомобилей_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеДопРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриходныйКассовыйОрдер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Разукомплектация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РазукомплектацияАвтомобилей_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РазукомплектацияПеремещТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходныйКассовыйОрдер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияАвтомобилей_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОИнкассация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗПСотруднику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДССнятиеНаличных_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеАвтомобилей_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеАктивов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваровВПроизводство_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваровЗапасы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваровОтчетКомиссионера_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетНаОплату_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетНаОплатуЗаАвтомобили_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетОтПоставщика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетОтПоставщикаЗаАвтомобили_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТаможеннаяДекларацияИмпорт_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УведомлениеОбОстаткахПрослежТов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УведомлениеОВвозеПрослежТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УведомлениеОПеремещенииПрослеж_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекНаОплатуБезнал_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекНаОплатуКакПКО_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекНаОплатуКакРКО_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Автомобили_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Автоработы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентФизЛицо_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентФизЛицоГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Модели_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Патенты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПодразделенияКомпании_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Производители_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПроизводителиГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СкладыКомпании_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Сотрудники_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтавкиНДС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктураГТД_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ТипыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Цеха_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЦехаГруппа_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ПБДСВзносНаличными_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОСотрудники_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриходныйКассовыйОрдер_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходныйКассовыйОрдер_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходныйКассовыйОрдерСотрудник_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДССнятиеНаличных_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УведомлениеОбОстаткахПрослежТов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УведомлениеОВвозеПрослежТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ГТД_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ГТДСтрока_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Патенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СотрудникиФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочники_КонтрагентыФизЛицаГруппа_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_АвтомобилиГруппа_Отправка(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Автоработы_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КлассификаторЕдиницИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_МоделиГруппа_Отправка(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыКомпанииГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЦеновыеГруппы(ПравилаКонвертации);
	ДобавитьПКО_Справочники_СотрудникиГруппа(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "ПодотчетноеЛицо", , "Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "НалогообложениеНДСПродавца", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ВыданныеАвансы");
	ДобавитьПКС(СвойстваТЧ, "", "Документ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаКонтрагентам");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Авансовый отчет'")));
	
	Если ЗначениеЗаполнено(ДанныеИБ.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ВалютаДокумента, ДанныеИБ.Дата, ДанныеИБ.КурсДокумента);
	ДанныеXDTO.Вставить("КурсДокумента", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
	
	ДанныеXDTO.Вставить("НалогообложениеНДСПродавца", ?(ЦенаВключаетНДС, "ОблагаетсяНДС", "НеОблагаетсяНДС"));
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ЦенаВключаетНДС);
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	АвансовыйОтчетРасходы.ДокументРасхода КАК ДокументРасхода,
			|	АвансовыйОтчетРасходы.Содержание КАК Содержание,
			|	АвансовыйОтчетРасходы.Номенклатура КАК Номенклатура,
			|	АвансовыйОтчетРасходы.Сумма КАК Сумма,
			|	АвансовыйОтчетРасходы.СуммаНДС КАК СуммаНДС,
			|	АвансовыйОтчетРасходы.СтатьяРасхода КАК СтатьяРасхода,
			|	АвансовыйОтчетРасходы.Контрагент КАК Поставщик,
			|	АвансовыйОтчетРасходы.Договор КАК Договор,
			|	ВЫБОР
			|		КОГДА НЕ АвансовыйОтчетРасходы.НаРасчеты
			|			ТОГДА АвансовыйОтчетРасходы.СтавкаНДС
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
			|	КОНЕЦ КАК СтавкаНДС,
			|	ВЫБОР
			|		КОГДА НЕ АвансовыйОтчетРасходы.НаРасчеты
			|			ТОГДА АвансовыйОтчетРасходы.СтавкаНДС.Ставка
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ЗначениеСтавки,
			|	АвансовыйОтчетРасходы.Сделка КАК Сделка,
			|	АвансовыйОтчетРасходы.НаРасчеты КАК НаРасчеты,
			|	АвансовыйОтчетРасходы.СтатьяРасхода.Наименование КАК СтатьяРасходаНаименование,
			|	АвансовыйОтчетРасходы.НомерРасхода КАК НомерВходящегоДокумента,
			|	АвансовыйОтчетРасходы.ДатаРасхода КАК ДатаВходящегоДокумента,
			|	АвансовыйОтчетРасходы.ЕстьСчетФактура КАК ПредъявленСФ,
			|	АвансовыйОтчетРасходы.ДатаСчетФактуры КАК ДатаСФ,
			|	АвансовыйОтчетРасходы.НомерСчетФактуры КАК НомерСФ
			|ИЗ
			|	Документ.АвансовыйОтчет.Расходы КАК АвансовыйОтчетРасходы
			|ГДЕ
			|	АвансовыйОтчетРасходы.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АвансовыйОтчетТовары.Номенклатура КАК Номенклатура,
			|	АвансовыйОтчетТовары.Количество * АвансовыйОтчетТовары.Коэффициент КАК Количество,
			|	АвансовыйОтчетТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	АвансовыйОтчетТовары.Цена КАК Цена,
			|	АвансовыйОтчетТовары.Сумма КАК Сумма,
			|	АвансовыйОтчетТовары.СуммаНДС КАК СуммаНДС,
			|	АвансовыйОтчетТовары.СтавкаНДС КАК Ставка,
			|	АвансовыйОтчетТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки,
			|	АвансовыйОтчетТовары.ГТД КАК ГТД,
			|	АвансовыйОтчетТовары.Номенклатура.Прослеживаемый
			|		И &УчетПоГТД КАК ПрослеживаемыйТовар,
			|	АвансовыйОтчетТовары.Контрагент КАК Поставщик,
			|	АвансовыйОтчетТовары.ЕстьСчетФактура КАК ПредъявленСФ,
			|	АвансовыйОтчетТовары.ДатаСчетФактуры КАК ДатаСФ,
			|	АвансовыйОтчетТовары.НомерСчетФактуры КАК НомерСФ,
			|	АвансовыйОтчетТовары.ВидДокВходящий КАК НаименованиеВходящегоДокумента,
			|	АвансовыйОтчетТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	АвансовыйОтчетТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
			|ИЗ
			|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
			|ГДЕ
			|	АвансовыйОтчетТовары.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АвансовыйОтчетВыданныеАвансы.ДокументОснование КАК ДокументДокументОснование,
			|	АвансовыйОтчетВыданныеАвансы.Сумма КАК Сумма
			|ИЗ
			|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
			|ГДЕ
			|	АвансовыйОтчетВыданныеАвансы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	// Расходы
	ОплатаКонтрагентам = Новый ТаблицаЗначений();
	ОплатаКонтрагентам.Колонки.Добавить("Контрагент");
	ОплатаКонтрагентам.Колонки.Добавить("Содержание");
	ОплатаКонтрагентам.Колонки.Добавить("Сумма");
	ОплатаКонтрагентам.Колонки.Добавить("ДокументРасчетов");
	ОплатаКонтрагентам.Колонки.Добавить("СуммаВзаиморасчетов");
	ОплатаКонтрагентам.Колонки.Добавить("ВалютаВзаиморасчетов");
	ОплатаКонтрагентам.Колонки.Добавить("КратностьВзаиморасчетов");
	ОплатаКонтрагентам.Колонки.Добавить("КурсВзаиморасчетов");
	ОплатаКонтрагентам.Колонки.Добавить("Договор");
	ОплатаКонтрагентам.Колонки.Добавить("ДатаВходящегоДокумента");
	ОплатаКонтрагентам.Колонки.Добавить("НомерВходящегоДокумента");
	ОплатаКонтрагентам.Колонки.Добавить("НаименованиеВходящегоДокумента");
	
	ПрочиеРасходы = Новый ТаблицаЗначений();
	ПрочиеРасходы.Колонки.Добавить("Содержание"); 
	ПрочиеРасходы.Колонки.Добавить("Номенклатура");
	ПрочиеРасходы.Колонки.Добавить("Сумма");
	ПрочиеРасходы.Колонки.Добавить("СуммаНДС");
	ПрочиеРасходы.Колонки.Добавить("СтатьяЗатрат");
	ПрочиеРасходы.Колонки.Добавить("СтавкаНДС");
	ПрочиеРасходы.Колонки.Добавить("НаименованиеВходящегоДокумента");
	ПрочиеРасходы.Колонки.Добавить("ДатаВходящегоДокумента");
	ПрочиеРасходы.Колонки.Добавить("НомерВходящегоДокумента"); 
	ПрочиеРасходы.Колонки.Добавить("Поставщик");
	ПрочиеРасходы.Колонки.Добавить("ПредъявленСФ");
	ПрочиеРасходы.Колонки.Добавить("ДатаСФ");
	ПрочиеРасходы.Колонки.Добавить("номерСФ");
	
	Расходы = ПакетЗапроса[0].Выгрузить();
	Для Каждого Строка Из Расходы Цикл
		Если Строка.НаРасчеты Тогда
			НоваяСтрока = ОплатаКонтрагентам.Добавить();
			ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Договор, "ВалютаВзаиморасчетов");
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, ДанныеИБ.Дата);
			НоваяСтрока.ВалютаВзаиморасчетов = ВалютаДоговора;
			НоваяСтрока.КурсВзаиморасчетов = СтруктураКурса.Курс;
			НоваяСтрока.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			ИмяПКО = ПолучитьИмяПКОДокумента(Строка.Сделка, КомпонентыОбмена);
			НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", Строка.Сделка, ИмяПКО);
			НоваяСтрока.Контрагент = Строка.Поставщик;
			НоваяСтрока.Договор = Строка.Договор;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СуммаВзаиморасчетов = Строка.Сумма;
			ЗаполнитьСпособЗачетАвансаДляДокументовОплаты(
				Строка.Договор,
				Строка.Сделка,
				ОплатаКонтрагентам,
				НоваяСтрока);
		Иначе 
			НоваяСтрока = ПрочиеРасходы.Добавить();  
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,"Содержание, СтавкаНДС");
	        НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(Строка.СтавкаНДС, Строка.ЗначениеСтавки, КомпонентыОбмена);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Строка.Содержание) Тогда
			НоваяСтрока.Содержание = Строка.Содержание;
		Иначе
			НоваяСтрока.Содержание = Строка.СтатьяРасходаНаименование;
		КонецЕсли;
		
		НоваяСтрока.ДатаВходящегоДокумента = Строка.ДатаВходящегоДокумента;
		НоваяСтрока.НомерВходящегоДокумента = Строка.НомерВходящегоДокумента;
		НоваяСтрока.НаименованиеВходящегоДокумента = Строка.ДокументРасхода;
	КонецЦикла;
	Если ОплатаКонтрагентам.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаКонтрагентам", ОплатаКонтрагентам);
	КонецЕсли;
	
	Если ПрочиеРасходы.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("ПрочиеРасходы", ПрочиеРасходы);
	КонецЕсли;
	
	// Товары
	Товары = ТоварыСЗаполнениемГТД(ПакетЗапроса[1].Выгрузить(), КомпонентыОбмена);
	Товары.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого Строка Из Товары Цикл
		Строка.СтавкаНДС = ПолучитьСтавкуНДС(Строка.Ставка, Строка.ЗначениеСтавки, КомпонентыОбмена);
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	// ВыданныеАвансы
	ВыданныеАвансы = ПакетЗапроса[2].Выгрузить();
	ВыданныеАвансы.Колонки.Добавить("Документ");
	Для Каждого Строка Из ВыданныеАвансы Цикл 
		Если ТипЗнч(Строка.ДокументДокументОснование) = Тип("ДокументСсылка.Выписка") Тогда
			ИмяПКО = ПолучитьИмяПКОДокумента(Строка.ДокументДокументОснование, КомпонентыОбмена);
			ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
			
			СтруктураКлючевыеСвойства = Новый Структура("Дата,Номер,СсылкаДокумента,Организация,ТипСоставногоСвойства");
			ЗаполнитьЗначенияСвойств(СтруктураКлючевыеСвойства, Строка.ДокументДокументОснование);
			ИдентификаторОбъекта = РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъектаВыгрузки(
			Строка.ДокументДокументОснование, ТекПКО.ОбъектФормата,, 1);
			СтруктураКлючевыеСвойства.ТипСоставногоСвойства = ТипСоставногоСвойства;
			СтруктураКлючевыеСвойства.СсылкаДокумента = Строка.ДокументДокументОснование;
			Строка.Документ = Новый Структура("Значение, ИмяПКО",
			ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураКлючевыеСвойства), ИмяПКО);
		Иначе
			ИмяПКО = ПолучитьИмяПКОДокумента(Строка.ДокументДокументОснование, КомпонентыОбмена);
			Строка.Документ = Новый Структура("Значение, ИмяПКО", Строка.ДокументДокументОснование, ИмяПКО);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыданныеАвансы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ВыданныеАвансы", ВыданныеАвансы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВводВЭксплуатацию_Отправка
Процедура ДобавитьПКО_Документ_ВводВЭксплуатацию_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВводВЭксплуатацию_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВводВЭксплуатацию;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВводВЭксплуатацию_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеПолучатель", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",           "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеНазначенияИспользования", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеСпособаОтраженияРасходов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СрокЭксплуатации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_Сотрудники_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ВводВЭксплуатацию_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Ввод в эксплуатацию'")));
			
	Товары = ДанныеВводВЭксплуатацию(ДанныеИБ);
		
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_Взаимозачет_Отправка
Процедура ДобавитьПКО_Документ_Взаимозачет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_Взаимозачет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Взаимозачет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дебитор",               "КонтрагентДебитор", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кредитор",              "КонтрагентКредитор", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;                                             
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Взаимозачет'")));
	ДанныеXDTO.Вставить("ВидОперации", "ПереносЗадолженности");
	      
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ВалютаДокумента, ДанныеИБ.Дата, ДанныеИБ.КурсДокумента);
	ДанныеXDTO.Вставить("КурсДокумента", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьДокумента", СтруктураКурса.Кратность);     
	      
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаимозачетСостав.ДоговорВзаиморасчетовДебитор КАК ДоговорВзаиморасчетовДебитор,
	|	ВзаимозачетСостав.ДоговорВзаиморасчетовКредитор КАК ДоговорВзаиморасчетовКредитор,
	|	ВзаимозачетСостав.СделкаДебитор КАК СделкаДебитор,
	|	ВзаимозачетСостав.СделкаКредитор КАК СделкаКредитор,
	|	ВзаимозачетСостав.Сумма КАК Сумма
	|ИЗ
	|	Документ.Взаимозачет.Состав КАК ВзаимозачетСостав
	|ГДЕ
	|	ВзаимозачетСостав.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Состав = Запрос.Выполнить().Выгрузить();
	
	ДебиторскаяЗадолженность = Новый ТаблицаЗначений();
	ДебиторскаяЗадолженность.Колонки.Добавить("Договор");
	ДебиторскаяЗадолженность.Колонки.Добавить("ДокументРасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("ВалютаВзаиморасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("КратностьВзаиморасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("КурсВзаиморасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("Сумма");
	ДебиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	
	КредиторскаяЗадолженность = Новый ТаблицаЗначений();
	КредиторскаяЗадолженность.Колонки.Добавить("Договор");
	КредиторскаяЗадолженность.Колонки.Добавить("ДокументРасчетов");
	КредиторскаяЗадолженность.Колонки.Добавить("ВалютаВзаиморасчетов");
	КредиторскаяЗадолженность.Колонки.Добавить("КратностьВзаиморасчетов");
	КредиторскаяЗадолженность.Колонки.Добавить("КурсВзаиморасчетов");
	КредиторскаяЗадолженность.Колонки.Добавить("Сумма");
	КредиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	КредиторскаяЗадолженность.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	
	Для Каждого ТекущаяСтрока Из Состав Цикл
		
		НоваяСтрока = ДебиторскаяЗадолженность.Добавить();
		ДоговорВзаиморасчетовДебитор = ТекущаяСтрока.ДоговорВзаиморасчетовДебитор;
		НоваяСтрока.Договор = ДоговорВзаиморасчетовДебитор;
		ВалютаДоговораДТ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорВзаиморасчетовДебитор, "ВалютаВзаиморасчетов");
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговораДТ, ДанныеИБ.Дата);
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаДоговораДТ;
		НоваяСтрока.КурсВзаиморасчетов = СтруктураКурса.Курс;
		НоваяСтрока.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		ИмяПКО = ПолучитьИмяПКОДокумента(ТекущаяСтрока.СделкаДебитор, КомпонентыОбмена);
		НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ТекущаяСтрока.СделкаДебитор, ИмяПКО);
		НоваяСтрока.Сумма = ТекущаяСтрока.Сумма;
		НоваяСтрока.СуммаВзаиморасчетов = ТекущаяСтрока.Сумма;
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорВзаиморасчетовДебитор, "ВидДоговора");
		Если ВидДоговора = Перечисления.ВидыДоговоров.Прочее Тогда
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = "76.06";
		КонецЕсли;
		
		НоваяСтрока = КредиторскаяЗадолженность.Добавить();
		НоваяСтрока.Договор = ТекущаяСтрока.ДоговорВзаиморасчетовКредитор;
		ВалютаДоговораКТ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.ДоговорВзаиморасчетовКредитор, "ВалютаВзаиморасчетов");
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговораКТ, ДанныеИБ.Дата);
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаДоговораКТ;
		Кратность = СтруктураКурса.Кратность;
		НоваяСтрока.КурсВзаиморасчетов = СтруктураКурса.Курс;
		НоваяСтрока.КратностьВзаиморасчетов = Кратность;
		ИмяПКО = ПолучитьИмяПКОДокумента(ТекущаяСтрока.СделкаКредитор, КомпонентыОбмена);
		НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ТекущаяСтрока.СделкаКредитор, ИмяПКО);
		НоваяСтрока.Сумма = ТекущаяСтрока.Сумма;
		НоваяСтрока.СуммаВзаиморасчетов = ТекущаяСтрока.Сумма;
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.ДоговорВзаиморасчетовКредитор, "ВидДоговора");
		Если ВидДоговора = Перечисления.ВидыДоговоров.Прочее Тогда
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = "76.06";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДебиторскаяЗадолженность.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ДебиторскаяЗадолженность);
	КонецЕсли;
		
	Если КредиторскаяЗадолженность.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("КредиторскаяЗадолженность", КредиторскаяЗадолженность);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратОтПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ВозвратОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратОтПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратОтПокупателя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ПокупателемВыставляетсяСчетФактураНаВозврат", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВозвратПодДеятельность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Истина);
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия Тогда
		ДанныеXDTO.ВидОперации = "ВозвратОтКомиссионера";
	Иначе
		ДанныеXDTO.ВидОперации = "ВозвратОтКлиента";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Возврат от покупателя'")));
	
	СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ОблагаетсяЕНВД";
	Иначе
		ДанныеXDTO.Налогообложение = "ОблагаетсяНДС";
	КонецЕсли;
	
	ВалютаДокумента = ДанныеИБ.ВалютаДокумента;
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
	ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		               |	ВозвратОтПокупателя.Номенклатура КАК Номенклатура,
		               |	ВозвратОтПокупателя.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ВЫРАЗИТЬ(ВозвратОтПокупателя.Количество * ВозвратОтПокупателя.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
		               |	ВЫБОР
		               |		КОГДА &СуммаВключаетНДС
		               |			ТОГДА ВозвратОтПокупателя.СуммаВсего
		               |		ИНАЧЕ ВозвратОтПокупателя.СуммаВсего - ВозвратОтПокупателя.СуммаНДС
		               |	КОНЕЦ КАК Сумма,
		               |	0 КАК Цена,
		               |	ВозвратОтПокупателя.СуммаНДС КАК СуммаНДС,
		               |	ВозвратОтПокупателя.СтавкаНДС КАК Ставка,
		               |	ВозвратОтПокупателя.ГТД КАК ГТД,
		               |	ВозвратОтПокупателя.Номенклатура.Прослеживаемый
		               |		И &УчетПоГТД КАК ПрослеживаемыйТовар,
		               |	ВЫБОР
		               |		КОГДА НЕ ВозвратОтПокупателя.Партия.ХозОперация ЕСТЬ NULL
		               |				И ВозвратОтПокупателя.Партия.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ПоступлениеТоваровКомиссия)
		               |			ТОГДА ""КомиссионныеТовары""
		               |		ИНАЧЕ ""СобственныеТовары""
		               |	КОНЕЦ КАК ТипЗапасов,
		               |	0 КАК Себестоимость,
		               |	ВозвратОтПокупателя.СтавкаНДС.Ставка КАК ЗначениеСтавки
		               |ИЗ
		               |	Документ.ВозвратОтПокупателя.Товары КАК ВозвратОтПокупателя
		               |ГДЕ
		               |	ВозвратОтПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	
	Товары = ТоварыСЗаполнениемГТД(Запрос.Выполнить().Выгрузить(), КомпонентыОбмена);
	Товары.Колонки.Добавить("ВозвратПодДеятельность");
	Товары.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		ТекущаяСтрока.Себестоимость = ТекущаяСтрока.Цена;
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		ТекущаяСтрока.ВозвратПодДеятельность = ДанныеXDTO.Налогообложение;
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратОтПокупателяАвтомобилей_Отправка
Процедура ДобавитьПКО_Документ_ВозвратОтПокупателяАвтомобилей_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратОтПокупателяАвтомобилей_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратОтПокупателяАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратОтПокупателяАвтомобилей_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ПокупателемВыставляетсяСчетФактураНаВозврат", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",           "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Автомобили", "Товары");
	ДобавитьПКС(СвойстваТЧ, "",           "ВозвратПодДеятельность", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "",           "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "Автомобиль", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "",           "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "",           "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратОтПокупателяАвтомобилей_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Истина);
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ВозвратАвтомобилейОтПокупателяКомиссия Тогда
		ДанныеXDTO.ВидОперации = "ВозвратОтКомиссионера";
	Иначе
		ДанныеXDTO.ВидОперации = "ВозвратОтКлиента";
	КонецЕсли;  
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Возврат от покупателя автомобилей'")));
		
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);     
		
	СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ОблагаетсяЕНВД";
	Иначе
		ДанныеXDTO.Налогообложение = "ОблагаетсяНДС";
	КонецЕсли;
		
	ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
	ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
		
	ТабличнаяЧастьДокумента = ДанныеТЧВозвратОтПокупателяАвтомобилей(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС, ДанныеXDTO.Налогообложение);
		
	Если ТабличнаяЧастьДокумента.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТабличнаяЧастьДокумента);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		ДанныеXDTO.ВидОперации = "ВозвратКомитенту";
	Иначе
		ДанныеXDTO.ВидОперации = "ВозвратПоставщику";
	КонецЕсли;
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Поступление товаров'")));
	                      
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);     
	
	СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
		ДанныеXDTO.Вставить(
			"ДокументПоступления",
			Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	Иначе
		ДанныеXDTO.Вставить("ДокументПоступления", Неопределено);
	КонецЕсли;
	
	ТабличнаяЧастьДокумента = ДанныеТЧВозвратТоваровПоставщику(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС);
	
	Если ТабличнаяЧастьДокумента.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТабличнаяЧастьДокумента);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратПоставщикуАвтомобилей_Отправка
Процедура ДобавитьПКО_Документ_ВозвратПоставщикуАвтомобилей_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратПоставщикуАвтомобилей_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратПоставщикуАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратПоставщикуАвтомобилей_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",           "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Автомобили", "Товары");
	ДобавитьПКС(СвойстваТЧ, "",           "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "",           "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "Автомобиль", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "",           "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "",           "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "",           "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратПоставщикуАвтомобилей_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ВозвратАвтомобилейПоставщикуКомиссия Тогда
		ДанныеXDTO.ВидОперации = "ВозвратКомитенту";  
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Возврат автомобилей принятых на комиссию'")));
	
	Иначе
		ДанныеXDTO.ВидОперации = "ВозвратПоставщику";  
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Возврат автомобилей поставщику'")));
	КонецЕсли; 
			                      
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);     
	
	СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
		ДанныеXDTO.Вставить(
			"ДокументПоступления",
			Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	Иначе
		ДанныеXDTO.Вставить("ДокументПоступления", Неопределено);
	КонецЕсли;
		
	ТабличнаяЧастьДокумента = ДанныеТЧВозвратАвтомобилейПоставщику(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС);
		
	Если ТабличнаяЧастьДокумента.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТабличнаяЧастьДокумента);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоБесплатномуЗН_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоБесплатномуЗН_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоБесплатномуЗН_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратОтПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоБесплатномуЗН_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоБесплатномуЗН_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Возврат товаров на склад по бесплатному заказ-наряду'")));
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	Товары = ТоварыКВозвратуИзБесплатногоЗаказНаряда(КомпонентыОбмена, ДанныеИБ.Ссылка);
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка
Процедура ДобавитьПКО_Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комплект",                 "Номенклатура", , "Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваШапки, "КомплектЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",    "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",            "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Количество", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "ТипЗапасов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.Товары.Количество() Тогда
		ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк
Процедура ДобавитьПКО_Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "Патент", , "Справочник_Патенты");
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Цех",                   "Склад", , "Справочник_Цеха_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ДанныеИБ.СуммаВключаетНДС);
	ТаблицаТоваров = ДанныеИБ.Товары;
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ТоварыПродажа", ТаблицаТоваров);
	КонецЕсли;
	
	ТаблицаУслуг = ДанныеИБ.Услуги;
	ТаблицаУслуг.Колонки.Номенклатура.Имя = "НоменклатураСсылка";
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
	
	Для Каждого ТекущаяСтрока Из ТаблицаУслуг Цикл
		Если ТекущаяСтрока.Цена = 0 ИЛИ ТекущаяСтрока.Сумма = 0 Тогда
			МассивСтрокКУдалению.Добавить(ТекущаяСтрока);
		КонецЕсли;
	
		Если ТипЗнч(ТекущаяСтрока.НоменклатураСсылка) = Тип("СправочникСсылка.Автоработы") Тогда
			ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО",
				 ТекущаяСтрока.НоменклатураСсылка, "Справочник_Автоработы_Отправка"); 
		Иначе
			ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО",
				 ТекущаяСтрока.НоменклатураСсылка, "Справочник_Номенклатура_Отправка"); 
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
		ТаблицаУслуг.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Если ТаблицаУслуг.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуг);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказНарядРеализация_Отправка
Процедура ДобавитьПКО_Документ_ЗаказНарядРеализация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказНарядРеализация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказНарядРеализация_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "Патент", , "Справочник_Патенты");
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",       "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Цех",                   "Склад", , "Справочник_Цеха_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Грузоотправитель", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Заказ", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказНарядРеализация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.СсылкаДокумента.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);     
	
	Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СчетНаОплату.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.СчетНаОплату КАК СчетНаОплату
				|ГДЕ
				|	СчетНаОплату.ДокументОснование = &ДокументОснование
				|	И СчетНаОплату.ПометкаУдаления = ЛОЖЬ
				|
				|УПОРЯДОЧИТЬ ПО
				|	СчетНаОплату.Дата УБЫВ";
			
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.СсылкаДокумента);
			
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", Результат[0].Ссылка, "Документ_СчетНаОплату_Отправка"));
	КонецЕсли;	
	
	Если ТипЗнч(ДанныеИБ.Грузоотправитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		
			ДанныеXDTO.Вставить(
				"Грузоотправитель", 
				Новый Структура("Значение, ИмяПКО", ДанныеИБ.Грузоотправитель, "Справочник_Контрагенты_Отправка")
			);
	
	КонецЕсли;
		
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ДанныеИБ.СуммаВключаетНДС);
	ТаблицаТоваров = ДанныеИБ.Товары;
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	ТаблицаУслуг = ДанныеИБ.Услуги;
	ТаблицаУслуг.Колонки.Номенклатура.Имя = "НоменклатураСсылка";
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
	
	Для Каждого ТекущаяСтрока Из ТаблицаУслуг Цикл
		Если ТекущаяСтрока.Цена = 0 ИЛИ ТекущаяСтрока.Сумма = 0 Тогда
			МассивСтрокКУдалению.Добавить(ТекущаяСтрока);
		КонецЕсли;
	
		Если ТипЗнч(ТекущаяСтрока.НоменклатураСсылка) = Тип("СправочникСсылка.Автоработы") Тогда
			ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО",
				 ТекущаяСтрока.НоменклатураСсылка, "Справочник_Автоработы_Отправка"); 
		Иначе
			ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО",
				 ТекущаяСтрока.НоменклатураСсылка, "Справочник_Номенклатура_Отправка"); 
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
		ТаблицаУслуг.Удалить(СтрокаТаблицы);
	КонецЦикла;
	Если ТаблицаУслуг.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуг);
	КонецЕсли;
	
	ЗаполнитьСпособЗачетАванса(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказНарядРеализацияАПУ_Отправка
Процедура ДобавитьПКО_Документ_ЗаказНарядРеализацияАПУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказНарядРеализацияАПУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказНаряд;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказНарядРеализацияАПУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Патент",                "Патент", , "Справочник_Патенты");
	ДобавитьПКС(СвойстваШапки, "Цех",                   "Склад", , "Справочник_Цеха_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Заказ", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Подразделение", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказНарядРеализацияАПУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);     
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Реализация товаров'")));
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ЦенаВключаетНДС);
	
	ДанныеXDTO.Вставить("Подразделение", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Цех, "ПодразделениеКомпании"));
	
	Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	СчетНаОплату.Ссылка КАК Ссылка
					|ИЗ
					|	Документ.СчетНаОплату КАК СчетНаОплату
					|ГДЕ
					|	СчетНаОплату.ДокументОснование = &ДокументОснование
					|	И СчетНаОплату.ПометкаУдаления = ЛОЖЬ
					|
					|УПОРЯДОЧИТЬ ПО
					|	СчетНаОплату.Дата УБЫВ";
				
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.Ссылка);
				
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", Результат[0].Ссылка, "Документ_СчетНаОплату_Отправка"));
	КонецЕсли;	
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Содержание");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("Сумма");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("ТипУслуги");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	
	СуммаМатериалов    = ПолучитьЗначениеПараметраСтруктуры(ДанныеИБ.ДополнительныеСвойства, "СуммаМатериалов", 0);
	СуммаНДСМатериалов = ПолучитьЗначениеПараметраСтруктуры(ДанныеИБ.ДополнительныеСвойства, "СуммаНДСМатериалов", 0);
	
	Если ДанныеИБ.Автоработы.Количество() = 0 Тогда
		
		СтавкаНДС = "";
		Если ДанныеИБ.Товары.Количество() > 0 Тогда
			СтавкаНДС = ПолучитьСтавкуНДС(ДанныеИБ.Товары[0].СтавкаНДС,, КомпонентыОбмена);
		КонецЕсли;
			
		НоваяСтрока = ТаблицаУслуг.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.Авторабота;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Содержание = НСтр("ru = 'Распределение материалов'");
		НоваяСтрока.СтавкаНДС = СтавкаНДС;
		НоваяСтрока.Сумма = СуммаМатериалов;
		НоваяСтрока.СуммаНДС = СуммаНДСМатериалов;
		НоваяСтрока.Цена = ?(НоваяСтрока.Количество <> 0,
			НоваяСтрока.Сумма / НоваяСтрока.Количество, НоваяСтрока.Сумма);
		НоваяСтрока.ТипУслуги = "Собственные";
		
	Иначе
		
		СтавкаНДС = ПолучитьСтавкуНДС(ДанныеИБ.Автоработы[0].СтавкаНДС, ,КомпонентыОбмена);
		
		НоваяСтрока = ТаблицаУслуг.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.Авторабота;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Содержание = НСтр("ru = 'Автоработы + распределение материалов'");
		НоваяСтрока.СтавкаНДС = СтавкаНДС;
		НоваяСтрока.Сумма = СуммаМатериалов + ДанныеИБ.Автоработы.Итог("СуммаВсего");
		
		Если НЕ ЦенаВключаетНДС Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма - ДанныеИБ.Автоработы.Итог("СуммаНДС");
		КонецЕсли;
		
		НоваяСтрока.СуммаНДС = СуммаНДСМатериалов + ДанныеИБ.Автоработы.Итог("СуммаНДС");
		НоваяСтрока.Цена = ?(НоваяСтрока.Количество <> 0,
			НоваяСтрока.Сумма / НоваяСтрока.Количество, НоваяСтрока.Сумма);
		НоваяСтрока.ТипУслуги = "Собственные";
			
	КонецЕсли;
	
	
	Если ТаблицаУслуг.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуг);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Сумма", ТаблицаУслуг.Итог("Сумма"));
	
	ЗаполнитьСпособЗачетАванса(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказНарядТребованиеНакладная_Отправка
Процедура ДобавитьПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказНарядТребованиеНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Цех",                   "Склад", , "Справочник_Цеха_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ДанныеИБ.Товары;
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗакрытиеСменыОтчетРозница_Отправка
Процедура ДобавитьПКО_Документ_ЗакрытиеСменыОтчетРозница_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗакрытиеСменыОтчетРозница_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗакрытиеСмены;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗакрытиеСменыОтчетРозница_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "УчетВыручкиВОперационнойКассе", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "Патент",                "Патент", 1, "Справочник_Патенты");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", 1, "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1,"Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыВозвратПродажи");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерЧекаККМПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1,"Справочник_Патенты");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1,"Справочник_Патенты");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1,"Справочник_Патенты");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗакрытиеСменыОтчетРозница_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;  
		
		ВерсияФормата1_10 =  ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"); 
		
		Если ВерсияФормата1_10 Тогда       
	        Патент = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Патент,"Справочник_Патенты"); 
			ДанныеXDTO.Вставить("Патент", Патент); 		
		КонецЕсли; 
		
		ДанныеXDTO.Вставить("Налогообложение");
		Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
			ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
		Иначе
			ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
		КонецЕсли;
	
		
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Закрытие смены'"))); 
		ДанныеXDTO.Вставить("УчетВыручкиВОперационнойКассе", Истина);
		
		СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
		ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		
		Результат = ПолучитьТЧОтчетОРозничныхПродажах(ДанныеИБ, КомпонентыОбмена,СуммаВключаетНДС); 
		
		ТаблицаТовары = Результат.ТоварыПродажа;
		Если ТаблицаТовары.Количество() > 0 Тогда
			
			Если ВерсияФормата1_10 Тогда 
				ТаблицаТовары.Колонки.Добавить("Патент");
				ТаблицаТовары.ЗаполнитьЗначения(Патент, "Патент")
			КонецЕсли;
			
			ДанныеXDTO.Вставить("ТоварыПродажа", ТаблицаТовары); 
			
			Если ТаблицаТовары[0].Склад <> Неопределено Тогда
				ДанныеXDTO.Вставить("Склад", 
					Новый Структура("Значение, ИмяПКО", ТаблицаТовары[0].Склад,"Справочник_СкладыКомпании_Отправка")
				); 	
			КонецЕсли;
	
		КонецЕсли;   
		
	
		ТаблицаТоварыВозврат = Результат.ТоварыВозвратПродажи;
		Если ТаблицаТоварыВозврат.Количество() > 0 Тогда
			
			Если ВерсияФормата1_10 Тогда 
				ТаблицаТоварыВозврат.Колонки.Добавить("Патент");
				ТаблицаТоварыВозврат.ЗаполнитьЗначения(Патент, "Патент")
			КонецЕсли;
			
			ДанныеXDTO.Вставить("ТоварыВозвратПродажи", ТаблицаТоварыВозврат);
		КонецЕсли;  
		
		ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, "ТоварыПродажа");	
		ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, "ТоварыВозвратПродажи");	 
		
		ТаблицаУслуги = Результат.Услуги; 
		ТаблицаУслуги.Колонки.Номенклатура.Имя = "НоменклатураСсылка";
		ТаблицаУслуги.Колонки.Добавить("Номенклатура");
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для Каждого ТекущаяСтрока Из ТаблицаУслуги Цикл
			Если ТекущаяСтрока.Цена = 0 ИЛИ ТекущаяСтрока.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(ТекущаяСтрока);
			КонецЕсли;
			
			Если ТипЗнч(ТекущаяСтрока.НоменклатураСсылка) = Тип("СправочникСсылка.Автоработы") Тогда
				ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО",
				ТекущаяСтрока.НоменклатураСсылка, "Справочник_Автоработы_Отправка"); 
			Иначе
				ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО",
				ТекущаяСтрока.НоменклатураСсылка, "Справочник_Номенклатура_Отправка"); 
			КонецЕсли;
		КонецЦикла; 
		
		Для Каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			ТаблицаУслуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		
		Если ТаблицаУслуги.Количество() > 0 Тогда 
			
			Если ВерсияФормата1_10 Тогда 
				ТаблицаУслуги.Колонки.Добавить("Патент");
				ТаблицаУслуги.ЗаполнитьЗначения(Патент, "Патент")
			КонецЕсли;
			
			ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
		КонецЕсли;
		
		ТаблицаПлатежныеКарты = Результат.ОплатаПлатежнымиКартами;
		Если  ТаблицаПлатежныеКарты.Количество() > 0 Тогда
				
			ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами",  ТаблицаПлатежныеКарты);
			
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗНКомплектацияПеремещение_Отправка
Процедура ДобавитьПКО_Документ_ЗНКомплектацияПеремещение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗНКомплектацияПеремещение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗНКомплектацияПеремещение_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ПодразделениеОтправитель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "ПодразделениеПолучатель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СкладОтправитель", 1, "Справочник_Цеха_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СкладПолучатель", 1, "Справочник_СкладыКомпании_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗНКомплектацияПеремещение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
			
		Если ДанныеИБ.Товары.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИзвлечениеТоваровИзПроизводства_Отправка
Процедура ДобавитьПКО_Документ_ИзвлечениеТоваровИзПроизводства_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИзвлечениеТоваровИзПроизводства_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИзвлечениеТоваровИзПроизводства;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИзвлечениеТоваровИзПроизводства_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании", "СкладПолучатель", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Цех",           "СкладОтправитель", , "Справочник_Цеха_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ПодразделениеОтправитель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "ПодразделениеПолучатель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИзвлечениеТоваровИзПроизводства_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить(
		"ПодразделениеПолучатель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладКомпании, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить(
		"ПодразделениеОтправитель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Цех, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Извлечение товаров из производства'")));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСВРознице");
	ТаблицаТоваров.Колонки.Добавить("СуммаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Товары Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ТекущаяСтрока.Номенклатура, "БазоваяЕдиницаИзмерения");
		НоваяСтрока.Количество = ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент;
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть("Номенклатура,ЕдиницаИзмерения,ТипЗапасов", "Количество");
	
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_Инвентаризация_Отправка
Процедура ДобавитьПКО_Документ_Инвентаризация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_Инвентаризация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Инвентаризация;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Инвентаризация_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачалаИнвентаризации",        "ДатаНачалаИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияИнвентаризации",     "ДатаОкончанияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОснованиеВид",                    "ДокументОснованиеВид");
	ДобавитьПКС(СвойстваШапки, "ОснованиеДата",                   "ДокументОснованиеДата");
	ДобавитьПКС(СвойстваШапки, "ОснованиеНомер",                  "ДокументОснованиеНомер");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",           "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПричинаПроведенияИнвентаризации", "ПричинаПроведенияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",                   "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                "Комментарий", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_Инвентаризация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Инвентаризация товара'")));
		
		ТипЗапасов = ?(ДанныеИБ.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию, "КомиссионныеТовары", "СобственныеТовары");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТовары.Номенклатура КАК Номенклатура,
		|	&ТипЗапасов КАК ТипЗапасов,
		|	ОКР(ИнвентаризацияТовары.КоличествоКнижн * ИнвентаризацияТовары.Коэффициент,3) КАК КоличествоУчет,
		|	ОКР(ИнвентаризацияТовары.КоличествоФакт * ИнвентаризацияТовары.Коэффициент,3) КАК Количество,
		|	ИнвентаризацияТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ИнвентаризацияТовары.СуммаКнижн КАК Сумма,
		|	ИнвентаризацияТовары.СуммаФакт КАК СуммаУчет,
		|	ИнвентаризацияТовары.Цена КАК Цена
		|ИЗ
		|	Документ.Инвентаризация.Товары КАК ИнвентаризацияТовары
		|ГДЕ
		|	ИнвентаризацияТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
		
		Товары = Запрос.Выполнить().Выгрузить();
		
		Если Товары.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Товары", Товары);
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияАвтомобилей_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризацияАвтомобилей_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризацияАвтомобилей_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнвентаризацияАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияАвтомобилей_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачалаИнвентаризации",        "ДатаНачалаИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияИнвентаризации",     "ДатаОкончанияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОснованиеВид",                    "ДокументОснованиеВид");
	ДобавитьПКС(СвойстваШапки, "ОснованиеДата",                   "ДокументОснованиеДата");
	ДобавитьПКС(СвойстваШапки, "ОснованиеНомер",                  "ДокументОснованиеНомер");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",           "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПричинаПроведенияИнвентаризации", "ПричинаПроведенияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",                   "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияАвтомобилей_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Инвентаризация автомобилей'")));
	
	ТипЗапасов = ?(ДанныеИБ.ХозОперация = Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию, "КомиссионныеТовары", "СобственныеТовары");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнвентаризацияАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	&ТипЗапасов КАК ТипЗапасов,
	|	ИнвентаризацияАвтомобилейАвтомобили.Количество КАК КоличествоУчет,
	|	ИнвентаризацияАвтомобилейАвтомобили.КоличествоУчет КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.шт) КАК ЕдиницаИзмерения,
	|	ИнвентаризацияАвтомобилейАвтомобили.Сумма КАК СуммаУчет,
	|	ИнвентаризацияАвтомобилейАвтомобили.СуммаУчет КАК Сумма,
	|	ИнвентаризацияАвтомобилейАвтомобили.Цена КАК Цена
	|ИЗ
	|	Документ.ИнвентаризацияАвтомобилей.Автомобили КАК ИнвентаризацияАвтомобилейАвтомобили
	|ГДЕ
	|	ИнвентаризацияАвтомобилейАвтомобили.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	
	Товары = Запрос.Выполнить().Выгрузить();
		
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияАвтомОприходование_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризацияАвтомОприходование_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризацияАвтомОприходование_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнвентаризацияАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияАвтомОприходование_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                "Инвентаризация", , "Документ_ИнвентаризацияАвтомобилей_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияАвтомОприходование_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Инвентаризация автомобилей'")));
	
	ТипЗапасов = ?(ДанныеИБ.ХозОперация = Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию, "КомиссионныеТовары", "СобственныеТовары");
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиАвтомобилей.Автомобиль КАК Номенклатура,
	|	&ТипЗапасов КАК ТипЗапасов,
	|	ОстаткиАвтомобилей.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.шт) КАК ЕдиницаИзмерения,
	|	ОстаткиАвтомобилей.Сумма КАК Сумма,
	|	ОстаткиАвтомобилей.Сумма КАК Цена,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК ГТД,
	|	ОстаткиАвтомобилей.Автомобиль.Прослеживаемый И &УчетПоГТД КАК ПрослеживаемыйТовар
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &Регистратор
	|	И ОстаткиАвтомобилей.ВидДвижения = &ВидДвижения";
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
		
	Товары = ТоварыСЗаполнениемГТД(Запрос.Выполнить().Выгрузить(), КомпонентыОбмена);
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияАвтомСписание_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризацияАвтомСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризацияАвтомСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнвентаризацияАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияАвтомСписание_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                "Инвентаризация", , "Документ_ИнвентаризацияАвтомобилей_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияАвтомСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Инвентаризация автомобилей'")));
	
	ТипЗапасов = ?(ДанныеИБ.ХозОперация = Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию, "КомиссионныеТовары", "СобственныеТовары");
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиАвтомобилей.Автомобиль КАК Номенклатура,
	|	&ТипЗапасов КАК ТипЗапасов,
	|	ОстаткиАвтомобилей.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.шт) КАК ЕдиницаИзмерения,
	|	ОстаткиАвтомобилей.Сумма КАК Сумма,
	|	ОстаткиАвтомобилей.Сумма КАК Цена,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК ГТД,
	|	ОстаткиАвтомобилей.Автомобиль.Прослеживаемый И &УчетПоГТД КАК ПрослеживаемыйТовар
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &Регистратор
	|	И ОстаткиАвтомобилей.ВидДвижения = &ВидДвижения";
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
		
	Товары = ТоварыСЗаполнениемГТД(Запрос.Выполнить().Выгрузить(), КомпонентыОбмена);
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияОприходование_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризацияОприходование_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризацияОприходование_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Инвентаризация;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияОприходование_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                "Инвентаризация", , "Документ_Инвентаризация_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияОприходование_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Инвентаризация - оприходование товаров'")));
	
	ТипЗапасов = ?(ДанныеИБ.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию, "КомиссионныеТовары", "СобственныеТовары");
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	Товары = ПолучитьТаблицуИнвентаризации(КомпонентыОбмена, ДанныеИБ.Ссылка, ВидДвиженияНакопления.Приход, ТипЗапасов);
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияСписание_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризацияСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризацияСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Инвентаризация;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияСписание_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                "Инвентаризация", , "Документ_Инвентаризация_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Инвентаризация - списание недостач'")));
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	ТипЗапасов = ?(ДанныеИБ.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию, "КомиссионныеТовары", "СобственныеТовары");
	
	Товары = ПолучитьТаблицуИнвентаризации(КомпонентыОбмена, ДанныеИБ.Ссылка, ВидДвиженияНакопления.Расход, ТипЗапасов);
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнкассацияПодотчет_Отправка
Процедура ДобавитьПКО_Документ_ИнкассацияПодотчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнкассацияПодотчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Инкассация;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнкассацияПодотчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Инкассатор",            "Сотрудник", , "Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнкассацияПодотчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Инкассация - изъятие денежных средств'")));
		
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
			
	// получаем сумму наличных оплат  
	СуммаОплат  = 0;
	Для Каждого Строка Из ДанныеИБ.Оплаты Цикл
		Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда 
			СуммаОплат = СуммаОплат + Строка.Сумма;
		КонецЕсли;
	КонецЦикла; 
	
	ДанныеXDTO.Вставить("Сумма", СуммаОплат);
		
	РасшифровкаПлатежа = Новый ТаблицаЗначений();
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	
	НоваяСтрока = РасшифровкаПлатежа.Добавить(); 
	НоваяСтрока.Сумма = СуммаОплат; 
	НоваяСтрока.Сотрудник = ДанныеИБ.Инкассатор; 
		
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_Комплектация_Отправка
Процедура ДобавитьПКО_Документ_Комплектация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_Комплектация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Комплектация;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Комплектация_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комплект",                 "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "КомплектЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",    "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",            "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Количество", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "ТипЗапасов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_Комплектация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Комплектация номенклатуры'")));
		ДанныеXDTO.Вставить("ВидОперации", "Сборка");
		ДанныеXDTO.Вставить("ТипЗапасов", "СобственныеТовары");
		
		Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КомплектЕдиницаИзмерения, "Коэффициент"); 
		КоличествоКомплектов = ДанныеИБ.КоличествоКомплектов * Коэффициент;
		ДанныеXDTO.Вставить("Количество", КоличествоКомплектов);
		
		Запрос = Новый Запрос;
		Если КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД Тогда
			Текст = 
				"ВЫБРАТЬ
				|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
				|	ПартииТоваровКомпании.Номенклатура.Прослеживаемый КАК ПрослеживаемыйТовар,
				|	ПартииТоваровКомпании.Партия КАК ДокументПоступленияСтрока,
				|	ПартииТоваровКомпании.Количество КАК Количество,
				|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ПартииТоваровКомпании.Сумма КАК Себестоимость
				|ПОМЕСТИТЬ ВТ_ПартииТоваровКомпании
				|ИЗ
				|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
				|ГДЕ
				|	ПартииТоваровКомпании.Регистратор = &Регистратор
				|	И ПартииТоваровКомпании.ВидДвижения = &ВидДвижения
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
				|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
				|	ГТДПартийТоваровКомпании.Партия КАК Партия,
				|	ГТДПартийТоваровКомпании.Количество КАК Количество
				|ПОМЕСТИТЬ ВТ_ГТДПартийТоваровКомпании
				|ИЗ
				|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
				|ГДЕ
				|	ГТДПартийТоваровКомпании.Регистратор = &Регистратор
				|	И ГТДПартийТоваровКомпании.ВидДвижения = &ВидДвижения
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
				|	СУММА(ЕСТЬNULL(ВТ_ГТДПартийТоваровКомпании.Количество, ВТ_ПартииТоваровКомпании.Количество)) КАК Количество,
				|	ВТ_ПартииТоваровКомпании.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	СУММА(ВТ_ПартииТоваровКомпании.Себестоимость) КАК Себестоимость,
				|	ЕСТЬNULL(ВТ_ГТДПартийТоваровКомпании.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)) КАК ГТД,
				|	ВТ_ПартииТоваровКомпании.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар
				|ИЗ
				|	ВТ_ПартииТоваровКомпании КАК ВТ_ПартииТоваровКомпании
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГТДПартийТоваровКомпании КАК ВТ_ГТДПартийТоваровКомпании
				|		ПО ВТ_ПартииТоваровКомпании.Номенклатура = ВТ_ГТДПартийТоваровКомпании.Номенклатура
				|			И ВТ_ПартииТоваровКомпании.ДокументПоступленияСтрока = ВТ_ГТДПартийТоваровКомпании.Партия
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ_ПартииТоваровКомпании.Номенклатура,
				|	ВТ_ПартииТоваровКомпании.ЕдиницаИзмерения,
				|	ЕСТЬNULL(ВТ_ГТДПартийТоваровКомпании.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)),
				|	ВТ_ПартииТоваровКомпании.ПрослеживаемыйТовар";
			
		Иначе
			Текст ="ВЫБРАТЬ
			       |	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
			       |	СУММА(ПартииТоваровКомпании.Количество) КАК Количество,
			       |	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			       |	СУММА(ПартииТоваровКомпании.Сумма) КАК Сумма 
			       |ИЗ
			       |	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			       |ГДЕ
			       |	ПартииТоваровКомпании.Регистратор = &Регистратор
			       |	И ПартииТоваровКомпании.ВидДвижения = &ВидДвижения
			       |
			       |СГРУППИРОВАТЬ ПО
			       |	ПартииТоваровКомпании.Номенклатура,
			       |	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения";
		КонецЕсли;
		Запрос.Текст =Текст;
		Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
		
		Товары = Запрос.Выполнить().Выгрузить();
		
		Товары.Колонки.Добавить("ТипЗапасов");
		Товары.ЗаполнитьЗначения("СобственныеТовары", "ТипЗапасов");	
				
		ТоварыСГТД = ТоварыСЗаполнениемГТД(Товары, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Товары", ТоварыСГТД);
		
		ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_КомплектацияВПроизводство_Отправка
Процедура ДобавитьПКО_Документ_КомплектацияВПроизводство_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КомплектацияВПроизводство_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Комплектация;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КомплектацияВПроизводство_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании", "СкладОтправитель", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Цех",           "СкладПолучатель", , "Справочник_Цеха_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ПодразделениеОтправитель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "ПодразделениеПолучатель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_КомплектацияВПроизводство_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить(
		"ПодразделениеОтправитель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладКомпании, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить(
		"ПодразделениеПолучатель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Цех, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Комплектация в производство'")));
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСВРознице");
	ТаблицаТоваров.Колонки.Добавить("СуммаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	
	КолонкаНоменклатура = ДанныеИБ.Товары.ВыгрузитьКолонку("Номенклатура");
	ЕдИзм = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(КолонкаНоменклатура, "БазоваяЕдиницаИзмерения");
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Товары Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ЕдИзм.Получить(ТекущаяСтрока.Номенклатура);
		НоваяСтрока.Количество = ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент;
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		НоваяСтрока.СуммаВРознице = ТекущаяСтрока.СуммаРозничная;
		НоваяСтрока.ЦенаВРознице  = ТекущаяСтрока.ЦенаРозничная;
		
	КонецЦикла;
	
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаДолга_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаДолга_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаДолга_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяДохода",          "СтатьяДоходов", , "Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяРасхода",         "СтатьяРасходов", , "Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КонтрагентДебитор", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "КонтрагентКредитор", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СчетДт", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СчетКт", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;                                             
		КонецЕсли;
		
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Корректировка долга'")));
		ДанныеXDTO.Вставить("ВидОперации", "СписаниеЗадолженности");
		                  
		СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ВалютаДокумента, ДанныеИБ.Дата, ДанныеИБ.КурсДокумента);
		ДанныеXDTO.Вставить("КурсДокумента", СтруктураКурса.Курс);
		ДанныеXDTO.Вставить("КратностьДокумента", СтруктураКурса.Кратность);     
		                  
		ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "ВидКонтрагента");
		Если ВидКонтрагента = Перечисления.ВидыКонтрагентов.Покупатель Тогда
			ВидРасчетов = "СПокупателем";
		ИначеЕсли ВидКонтрагента = Перечисления.ВидыКонтрагентов.Поставщик Тогда
			ВидРасчетов = "СПоставщиком";
		Иначе
			ВидРасчетов = "Прочее";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаДолгаСостав.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	КорректировкаДолгаСостав.Сделка КАК Сделка,
		|	КорректировкаДолгаСостав.УменьшениеДолга - КорректировкаДолгаСостав.УвеличениеДолга КАК Сумма
		|ИЗ
		|	Документ.КорректировкаДолга.Состав КАК КорректировкаДолгаСостав
		|ГДЕ
		|	КорректировкаДолгаСостав.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		Состав = Запрос.Выполнить().Выгрузить();
		
		ДебиторскаяЗадолженность = Новый ТаблицаЗначений();
		ДебиторскаяЗадолженность.Колонки.Добавить("Договор");
		ДебиторскаяЗадолженность.Колонки.Добавить("ВалютаВзаиморасчетов");
		ДебиторскаяЗадолженность.Колонки.Добавить("КратностьВзаиморасчетов");
		ДебиторскаяЗадолженность.Колонки.Добавить("КурсВзаиморасчетов");
		ДебиторскаяЗадолженность.Колонки.Добавить("ДокументРасчетов");
		ДебиторскаяЗадолженность.Колонки.Добавить("Сумма");
		ДебиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
		ДебиторскаяЗадолженность.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
		ДебиторскаяЗадолженность.Колонки.Добавить("ВидРасчетов"); 
		
		КредиторскаяЗадолженность = Новый ТаблицаЗначений();
		КредиторскаяЗадолженность.Колонки.Добавить("Договор");
		КредиторскаяЗадолженность.Колонки.Добавить("ВалютаВзаиморасчетов");
		КредиторскаяЗадолженность.Колонки.Добавить("КратностьВзаиморасчетов");
		КредиторскаяЗадолженность.Колонки.Добавить("КурсВзаиморасчетов");
		КредиторскаяЗадолженность.Колонки.Добавить("ДокументРасчетов");
		КредиторскаяЗадолженность.Колонки.Добавить("Сумма");
		КредиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
		КредиторскаяЗадолженность.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
		КредиторскаяЗадолженность.Колонки.Добавить("ВидРасчетов");
	
		
		Для Каждого ТекущаяСтрока Из Состав Цикл
			ТекСделка = ТекущаяСтрока.Сделка;
			ТекДоговор = ТекущаяСтрока.ДоговорВзаиморасчетов;
			
			Если ТекущаяСтрока.Сумма > 0 Тогда
			
				НоваяСтрока = ДебиторскаяЗадолженность.Добавить(); 
			Иначе 
				НоваяСтрока = КредиторскаяЗадолженность.Добавить();
			КонецЕсли;
				НоваяСтрока.Договор = ТекДоговор;
				НоваяСтрока.ВидРасчетов = ВидРасчетов;
				ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекДоговор, "ВалютаВзаиморасчетов");
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, ДанныеИБ.Дата);
				НоваяСтрока.ВалютаВзаиморасчетов = ВалютаДоговора;
				Кратность = СтруктураКурса.Кратность;
				НоваяСтрока.КурсВзаиморасчетов = СтруктураКурса.Курс;
				НоваяСтрока.КратностьВзаиморасчетов = Кратность;
				ИмяПКО = ПолучитьИмяПКОДокумента(ТекСделка, КомпонентыОбмена);
				
				Если ИмяПко = "" И ТипЗнч(ТекСделка) = Тип("ДокументСсылка.ЧекНаОплату") Тогда 
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ВзаиморасчетыКомпании.Период КАК Период
					|ИЗ
					|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
					|ГДЕ
					|	ВзаиморасчетыКомпании.Регистратор = &Регистратор
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	РасчетыСКонтрагентами.Период
					|ИЗ
					|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
					|ГДЕ
					|	РасчетыСКонтрагентами.Регистратор = &Регистратор";
					Запрос.УстановитьПараметр("Регистратор", ТекСделка);
					РезультатЗапроса = Запрос.Выполнить().Выгрузить();
					
					Если РезультатЗапроса.Количество() <> 0 Тогда
						ПризнакСпособаРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСделка, "ПризнакСпособаРасчета");
						ОснованиеХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСделка, "ХозОперация");
						Если (ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
						ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная 
						ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная) Тогда
							
							ДокОснованиеОплаты = ТекСделка.Оплаты;
							
							Для Каждого Строка Из ДокОснованиеОплаты Цикл
								Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
									ИмяПко = "Документ_ЧекНаОплатуБезнал_Отправка";
									Прервать;
								КонецЕсли;
								Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
									Если ОснованиеХозОперация = Справочники.ХозОперации.ЧекНаОплату 
										ИЛИ ОснованиеХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат Тогда
										ИмяПко = "Документ_ЧекНаОплатуКакПКО_Отправка";
									ИначеЕсли ОснованиеХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат 
										ИЛИ ОснованиеХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки Тогда
										ИмяПко = "Документ_ЧекНаОплатуКакРКО_Отправка";
										КонецЕсли;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ТекСделка, ИмяПКО);  
				Если ТекущаяСтрока.Сумма < 0 Тогда 
					Сумма =  -ТекущаяСтрока.Сумма;
				Иначе 
					Сумма = ТекущаяСтрока.Сумма;
				КонецЕсли;
				НоваяСтрока.Сумма = Сумма;
				НоваяСтрока.СуммаВзаиморасчетов = Сумма;
			
				ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекДоговор, "ВидДоговора");
					
				Если ВидДоговора = Перечисления.ВидыДоговоров.Покупка Тогда
					НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = "60.01";
				ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоров.Продажа Тогда
					НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = "62.01";
				Иначе
					НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = "76.06";
				КонецЕсли;
		КонецЦикла;
		
		
		Если ДебиторскаяЗадолженность.Количество() > 0 Тогда  
			ДанныеXDTO.Вставить("СчетДТ", "91.02");
			ДанныеXDTO.Вставить("КонтрагентДебитор", ДанныеИБ.Контрагент);
			ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ДебиторскаяЗадолженность);
		КонецЕсли;
		
		
		Если КредиторскаяЗадолженность.Количество() > 0 Тогда
			
			ДанныеXDTO.Вставить("СчетКТ", "91.01");
			ДанныеXDTO.Вставить("КонтрагентКредитор", ДанныеИБ.Контрагент);
			ДанныеXDTO.Вставить("КредиторскаяЗадолженность", КредиторскаяЗадолженность);
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаОприходованиеТоваров_Отправк
Процедура ДобавитьПКО_Документ_КорректировкаОприходованиеТоваров_Отправк(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаОприходованиеТоваров_Отправк";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаОприходованиеТоваров_Отправк_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаОприходованиеТоваров_Отправк_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ТоварыОприходование);	
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ПодразделениеОтправитель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "ПодразделениеПолучатель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СкладОтправитель", 1, "Справочник_Цеха_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СкладПолучатель", 1, "Справочник_СкладыКомпании_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
			
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СкладОтправитель", ДанныеИБ.Цех);
	ДанныеXDTO.Вставить("СкладПолучатель", ДанныеИБ.СкладПолучатель);
				
	ДанныеXDTO.Вставить(
		"ПодразделениеОтправитель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Цех, "ПодразделениеКомпании"));
	ДанныеXDTO.Вставить(
		"ПодразделениеПолучатель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладПолучатель, "ПодразделениеКомпании"));
		
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);	
	ДанныеXDTO.Вставить("Комментарий", ДанныеИБ.Комментарий);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПоступления_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ВосстановитьНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ДатаИсправления", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "НомерИсправления", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",     "ДокументПоступления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипКорректировочнойСтроки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТДДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхожденияДоИзменения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СодержаниеДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НомерИсправления", ДанныеИБ.НомерИсправления);
	ДанныеXDTO.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(ДанныеИБ.ВхДокДата), ДанныеИБ.ВхДокДата, ДанныеИБ.Дата));
	
	Если ДанныеИБ.Хозоперация = Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон
		ИЛИ ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ДанныеXDTO.Вставить("ВосстановитьНДС", Истина);
	Иначе
		ДанныеXDTO.Вставить("ВосстановитьНДС", Ложь);
	КонецЕсли;
	
	Если ДанныеИБ.Хозоперация = Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон Тогда
		ДанныеXDTO.Вставить("ВидОперации", "СогласованноеИзменение");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ИсправлениеОшибки");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий",
		СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Корректировка поступления'")));
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ЦенаВключаетНДС);
	
	ТабличныеЧастиДокумента = ДанныеТЧКорректировкаПоступления(ДанныеИБ, КомпонентыОбмена, ЦенаВключаетНДС);
	
	Если ТабличныеЧастиДокумента.Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТабличныеЧастиДокумента.Товары);
	КонецЕсли;
	
	Если ТабличныеЧастиДокумента.Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТабличныеЧастиДокумента.Услуги);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТКорректировки(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступленияАвто_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаПоступленияАвто_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПоступленияАвто_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаПоступленияАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступленияАвто_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ВосстановитьНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ДатаИсправления", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "НомерИсправления", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",     "ДокументПоступления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипКорректировочнойСтроки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТДДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхожденияДоИзменения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступленияАвто_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НомерИсправления", ДанныеИБ.НомерИсправления);
	ДанныеXDTO.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(ДанныеИБ.ВхДокДата), ДанныеИБ.ВхДокДата, ДанныеИБ.Дата));
	
	Если ДанныеИБ.Хозоперация = Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейКорректировкаПоСогласованиюСторон
		ИЛИ ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей") Тогда
		ДанныеXDTO.Вставить("ВосстановитьНДС", Истина);
	Иначе
		ДанныеXDTO.Вставить("ВосстановитьНДС", Ложь);
	КонецЕсли;
	
	Если ДанныеИБ.Хозоперация = Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейКорректировкаПоСогласованиюСторон Тогда
		ДанныеXDTO.Вставить("ВидОперации", "СогласованноеИзменение");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ИсправлениеОшибки");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий",
		СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Корректировка поступления автомобилей'")));
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ЦенаВключаетНДС);
	
	Автомобили = ДанныеТЧКорректировкаПоступленияАвто(ДанныеИБ, КомпонентыОбмена, ЦенаВключаетНДС);
	
	Если Автомобили.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Автомобили);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТКорректировки(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаРеализации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "НомерИсправления", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",     "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "Сделка",                "ИсправляемыйДокументРеализации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипКорректировочнойСтроки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТДДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхожденияДоИзменения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СодержаниеДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.Хозоперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон
		ИЛИ ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ДанныеXDTO.Вставить("ВосстановитьНДС", Истина);
	Иначе
		ДанныеXDTO.Вставить("ВосстановитьНДС", Ложь);
	КонецЕсли;
	
	Если ДанныеИБ.Хозоперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон Тогда
		ДанныеXDTO.Вставить("ВидОперации", "СогласованноеИзменение");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ИсправлениеОшибки");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НомерИсправления", ДанныеИБ.НомерИсправления);
	
	ДанныеXDTO.Вставить("Комментарий",
		СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Корректировка реализации'")));
		
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			СтруктураДокумента = ПолучитьЗаказНаряд(ДанныеИБ, ДанныеИБ.ДокументОснование, КомпонентыОбмена);
			Если СтруктураДокумента <> Неопределено Тогда
				ДанныеXDTO.Вставить("ДокументРеализации", СтруктураДокумента);
			КонецЕсли;
		Иначе
			ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
			Если ИмяПКО <> ""  Тогда
				ДанныеXDTO.Вставить("ДокументРеализации", 
				Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Сделка) Тогда
		Если ТипЗнч(ДанныеИБ.Сделка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			СтруктураДокумента = ПолучитьЗаказНаряд(ДанныеИБ, ДанныеИБ.Сделка, КомпонентыОбмена);
			Если СтруктураДокумента <> Неопределено Тогда
				ДанныеXDTO.Вставить("ИсправляемыйДокументРеализации", СтруктураДокумента);
			КонецЕсли;
		Иначе
			ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.Сделка, КомпонентыОбмена);
			Если ИмяПКО <> "" Тогда
				ДанныеXDTO.Вставить("ИсправляемыйДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Сделка, ИмяПКО));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ЦенаВключаетНДС);
	
	ТабличныеЧастиДокумента = ДанныеТЧКорректировкаРеализации(ДанныеИБ, КомпонентыОбмена, ЦенаВключаетНДС);
	
	ОснованиеКорректировки = ПолучитьОснованиеКорректировки(ДанныеИБ);
	
	Если ТипЗнч(ОснованиеКорректировки) = Тип("ДокументСсылка.ЗаказНаряд") И
		КомпонентыОбмена.ПараметрыКонвертации.ЗаказНарядПроизводство Тогда
		
		ТаблицаУслуг = ТабличныеЧастиДокумента.Услуги.СкопироватьКолонки();  
	    НоваяСтрока = ТаблицаУслуг.Добавить();
		НоваяСтрока.Количество = 1;
		НоваяСтрока.КоличествоДоИзменения = 1;
		НоваяСтрока.КоличествоДоКорректировки = 1;  
		
		НоваяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО", Справочники.Номенклатура.Авторабота,"Справочник_Номенклатура_Отправка");
	
		НоваяСтрока.Сумма = ТабличныеЧастиДокумента.Услуги.Итог("Сумма") + ТабличныеЧастиДокумента.Товары.Итог("Сумма");
		НоваяСтрока.СуммаДоИзменения = 
			ТабличныеЧастиДокумента.Услуги.Итог("СуммаДоИзменения") + ТабличныеЧастиДокумента.Товары.Итог("СуммаДоИзменения");
		НоваяСтрока.СуммаДоКорректировки = 
			ТабличныеЧастиДокумента.Услуги.Итог("СуммаДоКорректировки") + ТабличныеЧастиДокумента.Товары.Итог("СуммаДоКорректировки");
		НоваяСтрока.СуммаНДС = 
			ТабличныеЧастиДокумента.Услуги.Итог("СуммаНДС") + ТабличныеЧастиДокумента.Товары.Итог("СуммаНДС");
		НоваяСтрока.СуммаНДСДоИзменения = 
			ТабличныеЧастиДокумента.Услуги.Итог("СуммаНДСДоИзменения") + ТабличныеЧастиДокумента.Товары.Итог("СуммаНДСДоИзменения");
		НоваяСтрока.СуммаНДСДоКорректировки = 
			ТабличныеЧастиДокумента.Услуги.Итог("СуммаНДСДоКорректировки") + ТабличныеЧастиДокумента.Товары.Итог("СуммаНДСДоКорректировки");
			
	    НоваяСтрока.Цена = НоваяСтрока.Сумма;
		НоваяСтрока.ЦенаДоИзменения = НоваяСтрока.СуммаДоИзменения; 
		НоваяСтрока.ЦенаДоКорректировки = НоваяСтрока.СуммаДоКорректировки;
			
		Если ТабличныеЧастиДокумента.Услуги.Количество() = 0 Тогда
			НоваяСтрока.Содержание			  = НСтр("ru = 'Распределение материалов'");
			НоваяСтрока.СодержаниеДоИзменения = НСтр("ru = 'Распределение материалов'");
			НоваяСтрока.СтавкаНДС = ТабличныеЧастиДокумента.Товары[0].СтавкаНДС;
			НоваяСтрока.СтавкаНДСДоизменения = ТабличныеЧастиДокумента.Товары[0].СтавкаНДСДоИзменения;
	
		Иначе	
			НоваяСтрока.Содержание 			  = НСтр("ru = 'Автоработы + распределение материалов'"); 
			НоваяСтрока.СодержаниеДоИзменения = НСтр("ru = 'Автоработы + распределение материалов'");
			НоваяСтрока.СтавкаНДС = ТабличныеЧастиДокумента.Услуги[0].СтавкаНДС;
			НоваяСтрока.СтавкаНДСДоизменения = ТабличныеЧастиДокумента.Услуги[0].СтавкаНДСДоИзменения;
	
		КонецЕсли; 
			
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуг);
	
	Иначе 
		Если ТабличныеЧастиДокумента.Товары.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Товары", ТабличныеЧастиДокумента.Товары);
		КонецЕсли;
	
		Если ТабличныеЧастиДокумента.Услуги.Количество() > 0 Тогда
				
			Если ТипЗнч(ОснованиеКорректировки) = Тип("ДокументСсылка.ЗаказНаряд")
				И КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьНоменклатуруВАвтоработах Тогда
					
				Для Каждого СтрокаТЧ Из ТабличныеЧастиДокумента.Услуги Цикл 
						
					Если ТипЗнч(СтрокаТЧ.НоменклатураСтроки) = Тип("СправочникСсылка.Автоработы") Тогда 
							
						ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.НоменклатураСтроки, "Номенклатура");
						СтрокаТЧ.Номенклатура = Новый Структура("Значение, ИмяПКО", ДанныеНоменклатуры.Номенклатура, "Справочник_Номенклатура_Отправка");
							
					КонецЕсли;
						
				КонецЦикла;
					
			КонецЕсли;
				
			ДанныеXDTO.Вставить("Услуги", ТабличныеЧастиДокумента.Услуги);
		КонецЕсли;		
		
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТКорректировки(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализацииАвто_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаРеализацииАвто_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаРеализацииАвто_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаРеализацииАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализацииАвто_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "НомерИсправления", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",     "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "Сделка",                "ИсправляемыйДокументРеализации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипКорректировочнойСтроки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТДДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхожденияДоИзменения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализацииАвто_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.Хозоперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон
		ИЛИ ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
		ДанныеXDTO.Вставить("ВосстановитьНДС", Истина);
	Иначе
		ДанныеXDTO.Вставить("ВосстановитьНДС", Ложь);
	КонецЕсли;
	
	Если ДанныеИБ.Хозоперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон Тогда
		ДанныеXDTO.Вставить("ВидОперации", "СогласованноеИзменение");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ИсправлениеОшибки");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НомерИсправления", ДанныеИБ.НомерИсправления);
	
	ДанныеXDTO.Вставить("Комментарий",
		СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Корректировка реализации автомобилей'")));
			
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
		Если ИмяПКО <> ""  Тогда
			ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Сделка) Тогда
		ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.Сделка, КомпонентыОбмена);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ИсправляемыйДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Сделка, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
		
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ЦенаВключаетНДС);
	
	Автомобили = ДанныеТЧКорректировкаРеализацииАвто(ДанныеИБ, КомпонентыОбмена, ЦенаВключаетНДС);
	
	Если Автомобили.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Автомобили);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаТребованиеНакладная_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаТребованиеНакладная_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаТребованиеНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаТребованиеНакладная_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаТребованиеНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ДанныеИБ.ТоварыТребование;
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионера_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомиссионера;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",   "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ГлавныйБухгалтер", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Покупатели");
	ДобавитьПКС(СвойстваТЧ, "", "ВыставленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактура", 1,"Документ_СчетФактураВыданный_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПередачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПередачи", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;  
	
	Текст = "
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	1 КАК КлючСтроки,
	|	СчетФактураВыданный.Контрагент КАК Покупатель,
	|	СчетФактураВыданный.Дата КАК ДатаСФ,
	|	СчетФактураВыданный.Номер КАК НомерСФ,
	|	ИСТИНА КАК ВыставленСФ
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|";
	
	Запрос = Новый Запрос(Текст);
	
	// Установка параметров.
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.Ссылка);
	
	
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС"));
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Реализация товаров'")));
	
	ТабПокупатели  = Запрос.Выполнить().Выгрузить();
	Если ТабПокупатели.Количество() = 0 Тогда
		НоваяЗапись = ТабПокупатели.Добавить();
		НоваяЗапись.Покупатель = ДанныеИБ.Контрагент;
		НоваяЗапись.КлючСтроки = 1;
		НоваяЗапись.ВыставленСФ = Ложь;		
	КонецЕсли;
	
	Текст = "ВЫБРАТЬ
	        |	1 КАК КлючСтроки,
	        |	ОтчетКомиссионераТовары.Ссылка КАК Ссылка,
	        |	ОтчетКомиссионераТовары.НомерСтроки КАК НомерСтрокиДокумента,
	        |	ОтчетКомиссионераТовары.Номенклатура КАК Номенклатура,
	    	|	ОтчетКомиссионераТовары.Номенклатура.Прослеживаемый КАК ПрослеживаемыйТовар,
	        |	ВЫРАЗИТЬ(ОтчетКомиссионераТовары.Количество * ОтчетКомиссионераТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	        |	ОтчетКомиссионераТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	        |	ОтчетКомиссионераТовары.Коэффициент КАК Коэффициент,
	        |	ОтчетКомиссионераТовары.Цена КАК Цена,
	        |	ОтчетКомиссионераТовары.Сумма КАК Сумма,
	        |	ОтчетКомиссионераТовары.СтавкаНДС КАК Ставка,
	        |	ОтчетКомиссионераТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки,
	        |	ОтчетКомиссионераТовары.СуммаНДС КАК СуммаНДС,
	        |	ОтчетКомиссионераТовары.СуммаВсего КАК СуммаВсего,
	        |	ОтчетКомиссионераТовары.Вознаграждение КАК СуммаВознаграждения,
	        |	ОтчетКомиссионераТовары.ДокументПередачи КАК ДокументПередачи,
	        |	ОтчетКомиссионераТовары.ГТД КАК ГТД
	        |ИЗ
	        |	Документ.ОтчетКомиссионера.Товары КАК ОтчетКомиссионераТовары
	        |ГДЕ
	        |	ОтчетКомиссионераТовары.Ссылка = &Ссылка";
	 	
	Запрос = Новый Запрос(Текст);
	
	// Установка параметров.
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = Запрос.Выполнить().Выгрузить();	
	ТабТовары.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ТекущаяСтрока Из ТабТовары Цикл
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
	КонецЦикла;
	ТоварыСГТД = ТоварыСЗаполнениемГТД(ТабТовары, КомпонентыОбмена);
	
	Если ТоварыСГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТоварыСГТД);
	Иначе
		ДанныеXDTO.Вставить("Товары", ТабТовары); 	
	КонецЕсли;
	ДанныеXDTO.Вставить("Покупатели", ТабПокупатели);
	ДанныеXDTO.Вставить("СпособРасчетаКомиссионногоВознаграждения", "НеРассчитывается");
	
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДанныеИБ.ДоговорВзаиморасчетов) Тогда
		ДанныеXDTO.Вставить("СпособПогашенияЗадолженности", "НеПогашать");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСВзносНаличными_Отправка
Процедура ДобавитьПКО_Документ_ПБДСВзносНаличными_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСВзносНаличными_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСВзносНаличными";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
			
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
					
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
			
	ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетОтправитель", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                 "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",     "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
			
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
					
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
			
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
			
	ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПоПлатежнымКартам_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчетКонтрагента", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаКомиссияБанка", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
		КонецЕсли;
		
		Если ДанныеИБ.Свойство("БанковскийСчетКонтрагента") Тогда
			ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", ДанныеИБ.БанковскийСчетКонтрагента);
		КонецЕсли;
		
		Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
				
		РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа; 
		
		Для Каждого Строка Из РасшифровкаПлатежа Цикл
			Строка.Сумма = Строка.Сумма - Строка.СуммаУслуг;	
		КонецЦикла;
		
		ВидРасчетов = "СПокупателем";
		ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
		ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
		ДанныеXDTO.Вставить("СуммаКомиссияБанка", РасшифровкаПлатежа.Итог("СуммаУслуг"));
	 	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчетКонтрагента", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("БанковскийСчетКонтрагента") Тогда
		ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", ДанныеИБ.БанковскийСчетКонтрагента);
	КонецЕсли;
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
			
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
		
	Для Каждого Строка Из РасшифровкаПлатежа Цикл 
				
		ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.СтатьяДДС, "КоррСчет");
		Если ЗначениеЗаполнено (ДанныеОперации.КоррСчет) Тогда 
			Строка.СчетУчетаРасчетов = ДанныеОперации.КоррСчет.Код;
		КонецЕсли;
			
	КонецЦикла;  
		
	ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчетКонтрагента", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетДоходов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("БанковскийСчетКонтрагента") Тогда
		ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", ДанныеИБ.БанковскийСчетКонтрагента);
	КонецЕсли;
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
	Для Каждого Строка Из РасшифровкаПлатежа Цикл 
				
		ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.СтатьяДДС, "КоррСчет");
		Если ЗначениеЗаполнено (ДанныеОперации.КоррСчет) Тогда 
			Строка.СчетУчетаРасчетов = ДанныеОперации.КоррСчет.Код;
		КонецЕсли;
			
	КонецЦикла;  
		
	ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчетКонтрагента", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1,"Справочник_Патенты");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("БанковскийСчетКонтрагента") Тогда
		ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", ДанныеИБ.БанковскийСчетКонтрагента);
	КонецЕсли;
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
	РасшифровкаПлатежа.Колонки.Добавить("Патент");
		
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РасшифровкаПлатежа[0].СтатьяДДС, "Операция");
		ВидОперации = ДанныеОперации.Операция;  
			
		Если ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОтПоставщика Тогда
			ВидРасчетов = "СПоставщиком"; 
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПоступлениеОтПокупателя  Тогда
			ВидРасчетов = "СПокупателем";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка  Тогда 
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.15") Тогда 
				ВидРасчетов = "КредитыИЗаймы";  
			Иначе 
				ВидРасчетов = "КредитБанка";
			КонецЕсли;
		Иначе 
			ВидРасчетов = "Прочее";
		КонецЕсли;   
		  
		ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
			
		Для Каждого Строка Из РасшифровкаПлатежа Цикл 
				
			ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.СтатьяДДС, "КоррСчет");
			Если ЗначениеЗаполнено (ДанныеОперации.КоррСчет) Тогда 
				Строка.СчетУчетаРасчетов = ДанныеОперации.КоррСчет.Код;
			КонецЕсли;
			
			ЗаполнитьСпособЗачетАвансаДляДокументовОплаты(
				Строка.Договор,
				Строка.ДокументРасчетов,
				РасшифровкаПлатежа,
				Строка);
			Строка.Патент = ДанныеИБ.Патент;	
		КонецЦикла;  
			
		ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
			
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Сотрудник", , "Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчетСотрудника", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("БанковскийСчетКонтрагента") Тогда
		ДанныеXDTO.Вставить("БанковскийСчетСотрудника", ДанныеИБ.БанковскийСчетКонтрагента);
	КонецЕсли;
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
		
	Если РасшифровкаПлатежа.Количество() > 0 Тогда 
			
		ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( РасшифровкаПлатежа[0].СтатьяДДС, "Операция");
		ВидОперации = ДанныеОперации.Операция;  
		ВидРасчетов = ?(ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратЗаймаСотрудником, "Займы", "Подотчет"); 
		ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
		
		РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
		РасшифровкаПлатежа[0].Сотрудник = ДанныеИБ.Контрагент;
			
		ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа); 
			
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка
Процедура ДобавитьПКО_Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетовПоставки", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "КонтрагентПоставки",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КурсВалютыВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель",         "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",         "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",                 "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансовПоставки",   "СпособПогашенияЗадолженности", , "Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                              "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "Заказ", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "СчетУчетаРасчетовСКонтрагентом", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//!!! ТРЕБУЕТСЯ ДЕЛАТЬ АНАЛОГИЧНЫЕ ПРАВКИ МЕЖДУ ПРОЦЕДУРАМИ:
	//ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка
	//ДобавитьПКО_Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка
	//ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных
	//ПКО_Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных
	
	//При использовании общего нумератора для всех реализаций и общего нумератора для всех поступлений может потребоваться префикс
	//Префикс = "И";
	//НомерДок = Лев(ДанныеИБ.Номер, 5) + Префикс + Сред(ДанныеИБ.Номер, 7);
	ДатаДок  = НачалоДня(ДанныеИБ.Дата);
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		
		ДанныеXDTO.Вставить("Дата",  ДатаДок);
		//ДанныеXDTO.Вставить("Номер", НомерДок);
	
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата",  ДатаДок);
	//ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	ДанныеXDTO.ВидОперации = "ПокупкаУПоставщика";
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Поступление товаров'")));
	
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетовПоставки.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
		
	СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ОблагаетсяЕНВД";
	Иначе
		ДанныеXDTO.Налогообложение = "ОблагаетсяНДС";
	КонецЕсли;
	
	ДанныеТЧДокумента = ДанныеТЧПоступлениеТоваровИзПередачаТоваровМеждуОр(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС);
	
	Товары = ДанныеТЧДокумента.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;	
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	ЗаполнитьСпособЗачетАванса(
		ДанныеИБ,
		ДанныеXDTO,
		КомпонентыОбмена,
		"ДоговорВзаиморасчетовПоставки",
		"ЗачетАвансовПоставки",
		"СпособЗачетаАвансовПоставки");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаМеждуОрганизациями_РТУ_Отправка
Процедура ДобавитьПКО_Документ_ПередачаМеждуОрганизациями_РТУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПередачаМеждуОрганизациями_РТУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",       "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаПереходаПраваСобственности");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",   "СпособПогашенияЗадолженности", , "Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Грузоотправитель", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Заказ", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорСПринципалом", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//!!! ТРЕБУЕТСЯ ДЕЛАТЬ АНАЛОГИЧНЫЕ ПРАВКИ МЕЖДУ ПРОЦЕДУРАМИ:
	//ДобавитьПКО_Документ_РеализацияТоваров_Отправка()
	//ДобавитьПКО_Документ_ПередачаМеждуОрганизациями_РТУ_Отправка()
	//ПКО_Документ_РеализацияТоваров_Отправка_ПриОтправкеДанных()
	//ПКО_Документ_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных()
	
	//При использовании общего нумератора для всех реализаций и общего нумератора для всех поступлений может потребоваться префикс
	//Префикс = "И";
	//НомерДок = Лев(ДанныеИБ.Номер, 5) + Префикс + Сред(ДанныеИБ.Номер, 7);
	//ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	ДанныеXDTO.ВидОперации = "РеализацияКлиенту";
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Реализация товаров'")));
	
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	Если ТипЗнч(ДанныеИБ.Грузоотправитель) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		ДанныеXDTO.Вставить(
			"Грузоотправитель", 
			Новый Структура("Значение, ИмяПКО", ДанныеИБ.Грузоотправитель, "Справочник_Контрагенты_Отправка")
		);
	
	КонецЕсли;	
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС"));
	
	ТабличныеЧастиДокумента = ДанныеТЧРеализацииТоваровИзПередачаТоваровМеждуОрг(ДанныеИБ, КомпонентыОбмена);
	
	Товары = ТабличныеЧастиДокумента.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	ЗаполнитьСпособЗачетАванса(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеАвтомобилей_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеАвтомобилей_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеАвтомобилей_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеАвтомобилей_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",   "СкладОтправитель", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель", "СкладПолучатель", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ПодразделениеОтправитель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ПодразделениеПолучатель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеАвтомобилей_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить(
		"ПодразделениеОтправитель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладКомпании, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить(
		"ПодразделениеПолучатель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладПолучатель, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Перемещение автомобилей'")));
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	ТаблицаАвтомобилей = Новый ТаблицаЗначений;
	ТаблицаАвтомобилей.Колонки.Добавить("Номенклатура");
	ТаблицаАвтомобилей.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаАвтомобилей.Колонки.Добавить("Количество");
	ТаблицаАвтомобилей.Колонки.Добавить("СтавкаНДСВРознице");
	ТаблицаАвтомобилей.Колонки.Добавить("ТипЗапасов");
	
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Автомобили Цикл
		
		НоваяСтрока = ТаблицаАвтомобилей.Добавить();	
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Автомобиль;
		НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		
	КонецЦикла;
	
	Если ТаблицаАвтомобилей.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаАвтомобилей);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеАвтомобилейВФилиал_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеАвтомобилейВФилиал_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеАвтомобилейВФилиал_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеАвтомобилейВФилиал_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеАвтомобилейВФилиал_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Перемещение автомобилей'")));
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	
	ТаблицаАвтомобилей = Новый ТаблицаЗначений;
	ТаблицаАвтомобилей.Колонки.Добавить("Номенклатура");
	ТаблицаАвтомобилей.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаАвтомобилей.Колонки.Добавить("Количество");
	ТаблицаАвтомобилей.Колонки.Добавить("ТипЗапасов");
	
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Автомобили Цикл
		
		НоваяСтрока = ТаблицаАвтомобилей.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Автомобиль;
		НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		
	КонецЦикла;
	
	Если ТаблицаАвтомобилей.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаАвтомобилей);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеАвтомобилейИзФилиала_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеАвтомобилейИзФилиала_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеАвтомобилейИзФилиала_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеАвтомобилейИзФилиала_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",       "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеАвтомобилейИзФилиала_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Перемещение автомобилей из филиала'")));
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиАвтомобилей.Автомобиль КАК Номенклатура,
		|	1 КАК Количество,
		|	ОстаткиАвтомобилей.Сумма КАК Сумма
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|ГДЕ
		|	ОстаткиАвтомобилей.Регистратор = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	РезультатЗапроса.Колонки.Добавить("ЕдиницаИзмерения");
	РезультатЗапроса.Колонки.Добавить("ТипЗапасов");
	
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
	
	Для Каждого ТекущаяСтрока Из РезультатЗапроса Цикл
		ТекущаяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		ТекущаяСтрока.ТипЗапасов = "СобственныеТовары";		
	КонецЦикла;
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", РезультатЗапроса);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеНезавершенногоПроизводства_Отп
Процедура ДобавитьПКО_Документ_ПеремещениеНезавершенногоПроизводства_Отп(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеНезавершенногоПроизводства_Отп";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеНезавершенногоПроизводства;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеНезавершенногоПроизводства_Отп_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Цех",           "СкладОтправитель", , "Справочник_Цеха_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦехПолучатель", "СкладПолучатель", , "Справочник_Цеха_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ПодразделениеОтправитель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "ПодразделениеПолучатель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеНезавершенногоПроизводства_Отп_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить(
		"ПодразделениеОтправитель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Цех, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить(
		"ПодразделениеПолучатель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЦехПолучатель, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Перемещение незавершенного производства'")));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСВРознице");
	ТаблицаТоваров.Колонки.Добавить("СуммаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Товары Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ТекущаяСтрока.Номенклатура, "БазоваяЕдиницаИзмерения");
		НоваяСтрока.Количество = ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент;
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть("Номенклатура,ЕдиницаИзмерения,ТипЗапасов", "Количество");
	
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",   "СкладОтправитель", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель", "СкладПолучатель", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ПодразделениеОтправитель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ПодразделениеПолучатель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить(
		"ПодразделениеОтправитель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладКомпании, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить(
		"ПодразделениеПолучатель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладПолучатель, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Перемещение товаров'")));
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСВРознице");
	ТаблицаТоваров.Колонки.Добавить("СуммаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Товары Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ТекущаяСтрока.Номенклатура, "БазоваяЕдиницаИзмерения");
		НоваяСтрока.Количество = ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент;
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		НоваяСтрока.СуммаВРознице = ТекущаяСтрока.СуммаРозничная;
		НоваяСтрока.ЦенаВРознице  = ТекущаяСтрока.ЦенаРозничная;
		
	КонецЦикла;
	
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваровВПроизводство_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваровВПроизводство_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваровВПроизводство_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваровВПроизводство;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваровВПроизводство_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании", "СкладОтправитель", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Цех",           "СкладПолучатель", , "Справочник_Цеха_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ПодразделениеОтправитель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "ПодразделениеПолучатель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваровВПроизводство_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить(
		"ПодразделениеОтправитель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СкладКомпании, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить(
		"ПодразделениеПолучатель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Цех, "ПодразделениеКомпании"));
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Перемещение товаров в производство'")));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСВРознице");
	ТаблицаТоваров.Колонки.Добавить("СуммаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Товары Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ТекущаяСтрока.Номенклатура, "БазоваяЕдиницаИзмерения");
		НоваяСтрока.Количество = ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент;
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть("Номенклатура,ЕдиницаИзмерения,ТипЗапасов", "Количество");
	
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваровВФилиал_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваровВФилиал_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваровВФилиал_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваровВФилиал_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваровВФилиал_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Перемещение товаров'")));
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Товары Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ТекущаяСтрока.Номенклатура, "БазоваяЕдиницаИзмерения");
		НоваяСтрока.Количество = ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент;
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		
	КонецЦикла;
	
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваровИзФилиала_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваровИзФилиала_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваровИзФилиала_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваровИзФилиала_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",       "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваровИзФилиала_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Перемещение товаров из филиала'")));
		
		ДанныеXDTO.Вставить("Налогообложение");
		Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
			ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
		Иначе
			ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
			|	ПартииТоваровКомпании.Количество КАК Количество,
			|	ПартииТоваровКомпании.Сумма КАК Сумма
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			|ГДЕ
			|	ПартииТоваровКомпании.Регистратор = &Регистратор";
		
		Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		РезультатЗапроса.Колонки.Добавить("ЕдиницаИзмерения");
		РезультатЗапроса.Колонки.Добавить("ТипЗапасов");
		
		Для Каждого ТекущаяСтрока Из РезультатЗапроса Цикл
			ТекущаяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ТекущаяСтрока.Номенклатура, "БазоваяЕдиницаИзмерения");
			ТекущаяСтрока.ТипЗапасов = "СобственныеТовары";		
		КонецЦикла;
		
		Если РезультатЗапроса.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Товары", РезультатЗапроса);
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаКакОприходование_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаКакОприходование_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаКакОприходование_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаКакОприходование_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаКакОприходование_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Пересортица - оприходование товаров'")));
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
		|	""СобственныеТовары"" КАК ТипЗапасов,
		|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПартииТоваровКомпании.Количество КАК Количество,
		|	ПартииТоваровКомпании.Сумма КАК Сумма,
		|	ПартииТоваровКомпании.СуммаНДС КАК СуммаНДС,
		|	0 КАК Цена
		|ПОМЕСТИТЬ ВТРег
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.Регистратор = &Регистратор
		|	И ПартииТоваровКомпании.ВидДвижения = &ВидДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ГТДПартийТоваровКомпании.Количество КАК Количество,
		|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
		|	КОЛИЧЕСТВО(ГТДПартийТоваровКомпании.Количество) * ГТДПартийТоваровКомпании.Количество КАК КоличествоСумма,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(ГТДПартийТоваровКомпании.Количество) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сгруппировано
		|ПОМЕСТИТЬ ВТГТД
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор = &Регистратор
		|	И ГТДПартийТоваровКомпании.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.Количество,
		|	ГТДПартийТоваровКомпании.ГТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРег.Номенклатура КАК Номенклатура,
		|	ВТРег.ТипЗапасов КАК ТипЗапасов,
		|	ВТРег.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ВТГТД.КоличествоСумма, ВТРег.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА ВТГТД.Сгруппировано
		|			ТОГДА ВТРег.Сумма * ВТГТД.КоличествоСумма
		|		ИНАЧЕ ВТРег.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВТГТД.Сгруппировано
		|			ТОГДА ВТРег.СуммаНДС * ВТГТД.КоличествоСумма
		|		ИНАЧЕ ВТРег.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВТРег.Цена КАК Цена,
		|	ВТРег.Номенклатура.Прослеживаемый КАК ПрослеживаемыйТовар,
		|	ЕСТЬNULL(ВТГТД.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)) КАК ГТД
		|ИЗ
		|	ВТРег КАК ВТРег
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГТД КАК ВТГТД
		|		ПО (ВТРег.Номенклатура = ВТГТД.Номенклатура)
		|			И (ВТРег.Количество = ВТГТД.Количество)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТРег.Номенклатура,
		|	ВТРег.ТипЗапасов,
		|	ВТРег.ЕдиницаИзмерения,
		|	ВТРег.Цена,
		|	ВТРег.Номенклатура.Прослеживаемый,
		|	ВЫБОР
		|		КОГДА ВТГТД.Сгруппировано
		|			ТОГДА ВТРег.Сумма * ВТГТД.КоличествоСумма
		|		ИНАЧЕ ВТРег.Сумма
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТГТД.Сгруппировано
		|			ТОГДА ВТРег.СуммаНДС * ВТГТД.КоличествоСумма
		|		ИНАЧЕ ВТРег.СуммаНДС
		|	КОНЕЦ,
		|	ЕСТЬNULL(ВТГТД.КоличествоСумма, ВТРег.Количество),
		|	ЕСТЬNULL(ВТГТД.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка))
		|";
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	
	Товары = ТоварыСЗаполнениемГТД(Запрос.Выполнить().Выгрузить(), КомпонентыОбмена);
	
	ЦенаВключаетНДС = ДанныеИБ.ТипЦен.ЦенаВключаетНДС;
	 
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		Если НЕ ЦенаВключаетНДС Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС; 
		КонецЕсли;
		
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаКакСписание_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаКакСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаКакСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаКакСписание_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаКакСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Пересортица - списание товаров'")));
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
		|	""СобственныеТовары"" КАК ТипЗапасов,
		|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПартииТоваровКомпании.Количество КАК Количество,
		|	ПартииТоваровКомпании.Сумма КАК Сумма,
		|	ПартииТоваровКомпании.СуммаНДС КАК СуммаНДС,
		|	0 КАК Цена
		|ПОМЕСТИТЬ ВТРег
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.Регистратор = &Регистратор
		|	И ПартииТоваровКомпании.ВидДвижения = &ВидДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ГТДПартийТоваровКомпании.Количество КАК Количество,
		|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
		|	КОЛИЧЕСТВО(ГТДПартийТоваровКомпании.Количество) * ГТДПартийТоваровКомпании.Количество КАК КоличествоСумма,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(ГТДПартийТоваровКомпании.Количество) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сгруппировано
		|ПОМЕСТИТЬ ВТГТД
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор = &Регистратор
		|	И ГТДПартийТоваровКомпании.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.Количество,
		|	ГТДПартийТоваровКомпании.ГТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРег.Номенклатура КАК Номенклатура,
		|	ВТРег.ТипЗапасов КАК ТипЗапасов,
		|	ВТРег.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ВТГТД.КоличествоСумма, ВТРег.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА ВТГТД.Сгруппировано
		|			ТОГДА ВТРег.Сумма * ВТГТД.КоличествоСумма
		|		ИНАЧЕ ВТРег.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВТГТД.Сгруппировано
		|			ТОГДА ВТРег.СуммаНДС * ВТГТД.КоличествоСумма
		|		ИНАЧЕ ВТРег.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВТРег.Цена КАК Цена,
		|	ВТРег.Номенклатура.Прослеживаемый КАК ПрослеживаемыйТовар,
		|	ЕСТЬNULL(ВТГТД.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)) КАК ГТД
		|ИЗ
		|	ВТРег КАК ВТРег
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГТД КАК ВТГТД
		|		ПО (ВТРег.Номенклатура = ВТГТД.Номенклатура)
		|			И (ВТРег.Количество = ВТГТД.Количество)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТРег.Номенклатура,
		|	ВТРег.ТипЗапасов,
		|	ВТРег.ЕдиницаИзмерения,
		|	ВТРег.Цена,
		|	ВТРег.Номенклатура.Прослеживаемый,
		|	ВЫБОР
		|		КОГДА ВТГТД.Сгруппировано
		|			ТОГДА ВТРег.Сумма * ВТГТД.КоличествоСумма
		|		ИНАЧЕ ВТРег.Сумма
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТГТД.Сгруппировано
		|			ТОГДА ВТРег.СуммаНДС * ВТГТД.КоличествоСумма
		|		ИНАЧЕ ВТРег.СуммаНДС
		|	КОНЕЦ,
		|	ЕСТЬNULL(ВТГТД.КоличествоСумма, ВТРег.Количество),
		|	ЕСТЬNULL(ВТГТД.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка))
		|";
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	
	Товары = ТоварыСЗаполнениемГТД(Запрос.Выполнить().Выгрузить(), КомпонентыОбмена);
	
	ЦенаВключаетНДС = ДанныеИБ.ТипЦен.ЦенаВключаетНДС;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
	
		Если НЕ ЦенаВключаетНДС Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС; 
		КонецЕсли;
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Отправка
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                 "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",     "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",                "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОТ",                 "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "",                          "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Приходный кассовый ордер'")));
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.СуммаДокумента);  
	ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Сотрудник", , "Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОТ",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Приходный кассовый ордер'")));
		
	ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( ДанныеИБ.СтатьяДДС, "Операция");
	ВидОперации = ДанныеОперации.Операция;  
	ВидРасчетов = ?(ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратЗаймаСотрудником, "Займы", "Подотчет"); 
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
		        
	РасшифровкаПлатежа = Новый ТаблицаЗначений();
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
		
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДДС;
	НоваяСтрока.Сотрудник = ДанныеИБ.Контрагент;
	
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение_Отправка
Процедура ДобавитьПКО_Документ_ПлатежноеПоручение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПлатежноеПоручение";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",            "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИННПлательщика",        "ИННПлательщика");
	ДобавитьПКС(СвойстваШапки, "ИННПолучателя",         "ИННПолучателя");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КПППлательщика",        "КПППлательщика");
	ДобавитьПКС(СвойстваШапки, "КПППолучателя",         "КПППолучателя");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",    "Очередность");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",              "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",       "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",       "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ТекстПлательщика", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ТекстПолучателя", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СтавкаНДС = ПолучитьСтавкуНДС(ДанныеИБ.СтавкаНДС, , КомпонентыОбмена);
		
	ТекстПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "НаименованиеПолное");
	ТекстПлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Организация, "НаименованиеПолное");
		
	ДанныеXDTO.Вставить("ТекстПолучателя", ТекстПолучателя);
	ДанныеXDTO.Вставить("ТекстПлательщика", ТекстПлательщика);
		
	ДанныеXDTO.Вставить("СтавкаНДС", СтавкаНДС);
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Платежное поручение'")));
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеАвтомобилей_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеАвтомобилей_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеАвтомобилей_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеАвтомобилей_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Заказ", 1, "Документ_СчетОтПоставщикаЗаАвтомобили_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеАвтомобилей_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия Тогда                                  
		ДанныеXDTO.ВидОперации = "ПриемНаКомиссию";
	Иначе
		ДанныеXDTO.ВидОперации = "ПокупкаУПоставщика";
	КонецЕсли;
	
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Поступление автомобилей на ответственное хранение'")));
	Иначе
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Поступление автомобилей'")));
	КонецЕсли;
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);     
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетОтПоставщикаЗаАвтомобили.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетОтПоставщикаЗаАвтомобили КАК СчетОтПоставщикаЗаАвтомобили
		|ГДЕ
		|	СчетОтПоставщикаЗаАвтомобили.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетОтПоставщикаЗаАвтомобили.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Заказ", РезультатЗапроса[0].Ссылка);
	КонецЕсли;
	
	СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "НеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ОблагаетсяНДС";
	КонецЕсли;
	
	ДанныеТЧДокумента = ДанныеТЧПоступлениеАвтомобилей(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС);
	
	Автомобили = ДанныеТЧДокумента.Автомобили;
	Если Автомобили.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Автомобили);
	КонецЕсли;
	
	ЗаполнитьСпособЗачетАванса(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	Если Не ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейИмпорт Тогда
		ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеДопРасходов_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеДопРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеДопРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Поступление доп. расходов'")));
	
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "НеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ОблагаетсяНДС";
	КонецЕсли;
	
	ДанныеТЧДокумента = ДанныеТЧПоступлениеДопРасходов(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС);
	
	// Услуги, РасшифровкаДопРасходов
	Услуги = ДанныеТЧДокумента.Услуги;
	РасшифровкаДопРасходов = ДанныеТЧДокумента.РасшифровкаДопРасходов.Скопировать();
	РасшифровкаДопРасходов.Колонки.ДокументПоступления.Имя = "ДокументПоступленияСсылка";
	// Необходима новая колонка с произвольным типом, чтобы можно было записать туда значение типа Структура
	РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления");
	
	// Не переносим как допрасходы, если есть незаполненные документы поступления.
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		ИмяПКО = ПолучитьИмяПКОДокумента(СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, КомпонентыОбмена);
		СтрокаРасшифровкаДопРасходов.ДокументПоступления = Новый Структура("Значение, ИмяПКО",
			СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, ИмяПКО);
	КонецЦикла;
	
	Если Услуги.Количество() > 0 Тогда
		
		МассивСтрокКУдалению = Новый Массив; // В формате для услуг недоступны нулевые продажи.
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	Если РасшифровкаДопРасходов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	КонецЕсли;
	
	ЗаполнитьСпособЗачетАванса(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Заказ", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СчетУчетаРасчетовСКонтрагентом", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//!!! ТРЕБУЕТСЯ ДЕЛАТЬ АНАЛОГИЧНЫЕ ПРАВКИ МЕЖДУ ПРОЦЕДУРАМИ:
	//ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка
	//ДобавитьПКО_Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка
	//ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных
	//ПКО_Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		ДанныеXDTO.ВидОперации = "ПриемНаКомиссию";
	Иначе
		ДанныеXDTO.ВидОперации = "ПокупкаУПоставщика";
	КонецЕсли;
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Поступление товаров'")));
	
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ОблагаетсяЕНВД";
	Иначе
		ДанныеXDTO.Налогообложение = "ОблагаетсяНДС";
	КонецЕсли;
	
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда
		ДанныеXDTO.Вставить("СчетУчетаРасчетовСКонтрагентом", "98.02"); 
	КонецЕсли;
	
	ДанныеТЧДокумента = ДанныеТЧПоступлениеТоваров(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС);
	
	Товары = ДанныеТЧДокумента.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	// Определим Счет на оплату
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетОтПоставщика") Тогда
		ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетОтПоставщика_Отправка"));
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетОтПоставщика.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетОтПоставщика КАК СчетОтПоставщика
		|ГДЕ
		|	СчетОтПоставщика.ДокументОснование = &Ссылка
		|	И СчетОтПоставщика.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетОтПоставщика.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();	
		ТаблицаСчетОтПоставщика = РезультатЗапроса.Выгрузить();	
		
		Если ТаблицаСчетОтПоставщика.Количество() > 0 Тогда
			ИмяПКО  = ПолучитьИмяПКОДокумента(ТаблицаСчетОтПоставщика[0].Ссылка, КомпонентыОбмена);
			Счет = Новый Структура("Значение, ИмяПКО", ТаблицаСчетОтПоставщика[0].Ссылка, ИмяПКО);
			ДанныеXDTO.Вставить("Заказ", Счет);	
		КонецЕсли;
	КонецЕсли;
	
	// Услуги, РасшифровкаДопРасходов
	Услуги = ДанныеТЧДокумента.Услуги;
	РасшифровкаДопРасходов = ДанныеТЧДокумента.РасшифровкаДопРасходов.Скопировать();
	РасшифровкаДопРасходов.Колонки.ДокументПоступления.Имя = "ДокументПоступленияСсылка";
	// Необходима новая колонка с произвольным типом, чтобы можно было записать туда значение типа Структура
	РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления");
	
	// Не переносим как допрасходы, если есть незаполненные документы поступления.
	ТипСоставногоСвойства = Неопределено;
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		// Обходим защиту от зацикливания - записываем в качестве документа поступления уже преобразованное значение ссылки.
		СтрокаРасшифровкаДопРасходов.ДокументПоступления = ДанныеXDTO.КлючевыеСвойства;
		Если ТипСоставногоСвойства = Неопределено Тогда
			ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПоступлениеТоваров_Отправка");
			ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
		КонецЕсли;
		СтрокаРасшифровкаДопРасходов.ДокументПоступления.Вставить("ТипСоставногоСвойства", ТипСоставногоСвойства);
	КонецЦикла;
	
	Если Услуги.Количество() > 0 Тогда
		
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	Если РасшифровкаДопРасходов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	КонецЕсли;
	
	ЗаполнитьСпособЗачетАванса(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	Если Не ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровИмпорт Тогда
		ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходныйКассовыйОрдер_Отправка
Процедура ДобавитьПКО_Документ_ПриходныйКассовыйОрдер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПриходныйКассовыйОрдер_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОТ",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1,"Справочник_Патенты");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Приходный кассовый ордер'")));
	
	ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.СтатьяДДС, "Операция");
	ВидОперации = ДанныеОперации.Операция;     
		
	Если ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПоступлениеОтПокупателя Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОтПоставщика Тогда
		ВидРасчетов = "СПоставщиком";  
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка ТОгда 
		ВидРасчетов = "КредитыИЗаймы"
	Иначе
		ВидРасчетов = "Прочее";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.СуммаДокумента);
	
	РасшифровкаПлатежа = РасшифровкаПлатежаДляПКО(ДанныеИБ, КомпонентыОбмена, ВидРасчетов);
		
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_Разукомплектация_Отправка
Процедура ДобавитьПКО_Документ_Разукомплектация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_Разукомплектация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Разукомплектация;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Разукомплектация_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоКомплектов",  "Количество");
	ДобавитьПКС(СвойстваШапки, "Комплект",              "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ЕдиницаИзмерения", 1, "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ТипЗапасов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_Разукомплектация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Разукомплектация номенклатуры'")));
	ДанныеXDTO.Вставить("ВидОперации", "Разборка");
	ДанныеXDTO.Вставить("ТипЗапасов", "СобственныеТовары");
	
	ЕдиницаИзмеренияКомплекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Комплект, "БазоваяЕдиницаИзмерения");
	ДанныеXDTO.Вставить("ЕдиницаИзмерения", ЕдиницаИзмеренияКомплекта);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ПартииТоваровКомпании.Партия КАК ДокументПоступленияСтрока,
	|	ПартииТоваровКомпании.Количество КАК Количество,
	|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПартииТоваровКомпании.СуммаБезНДС КАК Себестоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	ПартииТоваровКомпании.Регистратор = &Регистратор
	|	И ПартииТоваровКомпании.ВидДвижения = &ВидДвижения";
	
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ДокументПоступления");
	Товары.Колонки.Добавить("ТипЗапасов");
	Товары.Колонки.Добавить("ДоляСтоимости");
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		ИмяПКО = ПолучитьИмяПКОДокумента(ТекущаяСтрока.ДокументПоступленияСтрока, КомпонентыОбмена);
		ТекущаяСтрока.ДокументПоступления = Новый Структура("Значение, ИмяПКО", ТекущаяСтрока.ДокументПоступленияСтрока, ИмяПКО);
		ТекущаяСтрока.ТипЗапасов = "СобственныеТовары";
		ТекущаяСтрока.ДоляСтоимости = ТекущаяСтрока.Себестоимость *100;
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РазукомплектацияАвтомобилей_Отправка
Процедура ДобавитьПКО_Документ_РазукомплектацияАвтомобилей_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РазукомплектацияАвтомобилей_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РазукомплектацияАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РазукомплектацияАвтомобилей_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ЕдиницаИзмерения", 1, "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "",                      "Количество", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Номенклатура", 1, "Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Склад", 1, "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ТипЗапасов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_РазукомплектацияАвтомобилей_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;   //+++
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Разукомплектация автомобиля'")));
	ДатаЗакрытияЗН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "ДатаЗакрытия");
	СводныйРемонтныйЗаказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "СводныйРемонтныйЗаказ");
	СводныйРемонтныйЗаказАвтомобиль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СводныйРемонтныйЗаказ, "Автомобиль");
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
	
	ДанныеXDTO.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ДанныеXDTO.Вставить("ВидОперации",      "Разборка");
	ДанныеXDTO.Вставить("ТипЗапасов",       "СобственныеТовары");
	ДанныеXDTO.Вставить("Количество",       1);
	ДанныеXDTO.Вставить("Номенклатура",     СводныйРемонтныйЗаказАвтомобиль);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Номенклатура,
	|	ОстаткиАвтомобилейОстатки.Партия КАК ДокументПоступленияСтрока,
	|	ОстаткиАвтомобилейОстатки.СуммаБезНДСОстаток КАК Себестоимость,
	|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
	|	ОстаткиАвтомобилейОстатки.Автомобиль.ГТД КАК ГТД,
	|	ОстаткиАвтомобилейОстатки.Автомобиль.Прослеживаемый
	|		И &УчетПоГТД КАК ПрослеживаемыйТовар
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&МоментВремени, Автомобиль = &Автомобиль) КАК ОстаткиАвтомобилейОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазукомплектацияАвтомобилейТовары.Номенклатура КАК Номенклатура,
	|	РазукомплектацияАвтомобилейТовары.Количество * РазукомплектацияАвтомобилейТовары.Коэффициент КАК Количество,
	|	РазукомплектацияАвтомобилейТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ТоварыВПроизводстве.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.пустаяссылка)) КАК ГТД,
	|	ЕСТЬNULL(ТоварыВПроизводстве.Партия, &Ссылка) КАК ДокументПоступленияСтрока,
	|	РазукомплектацияАвтомобилейТовары.Сумма КАК Себестоимость,
	|	РазукомплектацияАвтомобилейТовары.Номенклатура.Прослеживаемый КАК ПрослеживаемыйТовар
	|ИЗ
	|	Документ.РазукомплектацияАвтомобилей.Товары КАК РазукомплектацияАвтомобилейТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
	|		ПО РазукомплектацияАвтомобилейТовары.Номенклатура = ТоварыВПроизводстве.Номенклатура
	|			И (ТоварыВПроизводстве.ЗаказНаряд = &ЗаказНаряд)
	|			И (ТоварыВПроизводстве.ВидДвижения = &ВидДвижения)
	|ГДЕ
	|	РазукомплектацияАвтомобилейТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиАвтомобилей.Автомобиль КАК Номенклатура,
	|	ОстаткиАвтомобилей.Партия КАК ДокументПоступленияСтрока,
	|	ОстаткиАвтомобилей.СуммаБезНДС КАК Себестоимость,
	|	ОстаткиАвтомобилей.СкладКомпании КАК СкладКомпании,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК ГТД,
	|	ОстаткиАвтомобилей.Автомобиль.Прослеживаемый И &УчетПоГТД КАК ПрослеживаемыйТовар
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &Ссылка
	|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(ДатаЗакрытияЗН, ДанныеИБ.Ссылка));
	Запрос.УстановитьПараметр("Автомобиль",    СводныйРемонтныйЗаказАвтомобиль);
	Запрос.УстановитьПараметр("УчетПоГТД",     УчетПоГТД);
	Запрос.УстановитьПараметр("ВидДвижения",   ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ЗаказНаряд",    ДанныеИБ.ДокументОснование);
	Запрос.УстановитьПараметр("Ссылка",    	   ДанныеИБ.Ссылка);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаАвто = ПакетЗапроса[0].Выгрузить();	
	ТаблицаТовары = ПакетЗапроса[1].Выгрузить();
	
	СкладДокумента = ДанныеИБ.СкладКомпании;
	СкладАвтомобиля = ТаблицаАвто[0].СкладКомпании;
	
	ДанныеXDTO.Вставить("Склад", СкладАвтомобиля);
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("Себестоимость");
	Товары.Колонки.Добавить("ГТД");
	Товары.Колонки.Добавить("ДокументПоступления");
	Товары.Колонки.Добавить("ТипЗапасов");
	Товары.Колонки.Добавить("ДоляСтоимости");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ПрослеживаемыйТовар");
	
	ТипРемонта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "ВидРемонта.ТипРемонта");
		
	КомплектующиеАвтомобили = ПакетЗапроса[2].Выгрузить();
	ИмяПКОНоменклатура = "Справочник_Автомобили_Отправка";
	
	Для Каждого ТекущаяСтрока Из КомплектующиеАвтомобили Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		ИмяПКОПоступление  = ПолучитьИмяПКОДокумента(ТекущаяСтрока.ДокументПоступленияСтрока, КомпонентыОбмена);
		НоваяСтрока.Номенклатура        = Новый Структура("Значение, ИмяПКО", НоваяСтрока.Номенклатура,              ИмяПКОНоменклатура);
		НоваяСтрока.ДокументПоступления = Новый Структура("Значение, ИмяПКО", ТекущаяСтрока.ДокументПоступленияСтрока, ИмяПКОПоступление);
		НоваяСтрока.ТипЗапасов          = "СобственныеТовары";
		НоваяСтрока.Количество          = 1;
		НоваяСтрока.ДоляСтоимости       = ТекущаяСтрока.Себестоимость * 100;
		НоваяСтрока.ЕдиницаИзмерения    = ЕдиницаИзмерения;
		
	КонецЦикла;
		
	Если Не (Типремонта = Перечисления.ТипыРемонта.СборкаАвтомобиля
			И ДанныеИБ.ХозОперация = Справочники.ХозОперации.РазукомплектацияАвтомобилей) Тогда
		
		Для Каждого ТекущаяСтрока Из ТаблицаАвто Цикл
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			ИмяПКОНоменклатура = "Справочник_Автомобили_Отправка";
			ИмяПКОПоступление  = ПолучитьИмяПКОДокумента(ТекущаяСтрока.ДокументПоступленияСтрока, КомпонентыОбмена);
			НоваяСтрока.Номенклатура        = Новый Структура("Значение, ИмяПКО", НоваяСтрока.Номенклатура,              ИмяПКОНоменклатура);
			НоваяСтрока.ДокументПоступления = Новый Структура("Значение, ИмяПКО", ТекущаяСтрока.ДокументПоступленияСтрока, ИмяПКОПоступление);
			НоваяСтрока.ТипЗапасов          = "СобственныеТовары";
			НоваяСтрока.Количество          = 1;
			НоваяСтрока.ДоляСтоимости       = ТекущаяСтрока.Себестоимость * 100;
			НоваяСтрока.ЕдиницаИзмерения    = ЕдиницаИзмерения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаТовары Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		ИмяПКОНоменклатура = "Справочник_Номенклатура_Отправка";
		ИмяПКОПоступление  = ПолучитьИмяПКОДокумента(ТекущаяСтрока.ДокументПоступленияСтрока, КомпонентыОбмена);
		НоваяСтрока.Номенклатура        = Новый Структура("Значение, ИмяПКО", НоваяСтрока.Номенклатура,              ИмяПКОНоменклатура);
		НоваяСтрока.ДокументПоступления = Новый Структура("Значение, ИмяПКО", ТекущаяСтрока.ДокументПоступленияСтрока, ИмяПКОПоступление);
		НоваяСтрока.ТипЗапасов          = "СобственныеТовары";
		НоваяСтрока.Количество          = ТекущаяСтрока.Количество;
		НоваяСтрока.ДоляСтоимости       = ТекущаяСтрока.Себестоимость * 100;
		НоваяСтрока.ЕдиницаИзмерения    = ЕдиницаИзмерения;
		
	КонецЦикла;
	
	ТоварыСГТД = ТоварыСЗаполнениемГТД(Товары, КомпонентыОбмена);
	
	Если ТоварыСГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТоварыСГТД);
	КонецЕсли;
	
	ПравилоУРазукомплектацииАвтоПеремещениеОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_РазукомплектацияАвтомобилей_Отправка", "Имя");
	Если СкладАвтомобиля <> СкладДокумента Тогда
	
		ПравилоУРазукомплектацииАвтоПеремещениеОтправка.ИспользуемыеПКО.Очистить();			
		ПравилоУРазукомплектацииАвтоПеремещениеОтправка.ИспользуемыеПКО.Добавить("Документ_РазукомплектацияПеремещТоваров_Отправка");
		
		ДанныеИБСтруктура = Новый Структура();
		ДанныеИБСтруктура.Вставить("Дата");
		ДанныеИБСтруктура.Вставить("Номер");
		ДанныеИБСтруктура.Вставить("Автор");
		ДанныеИБСтруктура.Вставить("Организация");
		
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Ссылка,
			"Автор,Дата,Номер,Организация");
		
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, Данные);
		
		ДанныеИБСтруктура.Вставить(
			"ПодразделениеОтправитель",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладАвтомобиля, "ПодразделениеКомпании"));
		
		ДанныеИБСтруктура.Вставить(
			"ПодразделениеПолучатель",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладДокумента, "ПодразделениеКомпании"));
		
		ДанныеИБСтруктура.Вставить("СкладОтправитель", СкладАвтомобиля);	
		ДанныеИБСтруктура.Вставить("СкладПолучатель", СкладДокумента);
		
		ДанныеИБСтруктура.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Перемещение товаров'")));
		
		ДанныеИБСтруктура.Вставить("Налогообложение", "ПродажаНеОблагаетсяНДС");
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаТоваров.Колонки.Добавить("Количество");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДСВРознице");
		ТаблицаТоваров.Колонки.Добавить("СуммаВРознице");
		ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
		ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
		
		Для Каждого ТекущаяСтрока Из ТаблицаТовары Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущаяСтрока.Номенклатура, "БазоваяЕдиницаИзмерения");
			НоваяСтрока.Количество = ТекущаяСтрока.Количество;
			НоваяСтрока.ТипЗапасов = "СобственныеТовары";
			НоваяСтрока.СуммаВРознице = ТекущаяСтрока.Себестоимость * ТекущаяСтрока.Количество;
			НоваяСтрока.СтавкаНДСВРознице = "БезНДС";
			НоваяСтрока.ЦенаВРознице  = ТекущаяСтрока.Себестоимость;
			
		КонецЦикла;
		
		Если ТаблицаТоваров.Количество() Тогда
			ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров.Скопировать());
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена,
				ДанныеИБСтруктура, 
				ПравилоУРазукомплектацииАвтоПеремещениеОтправка);
		КонецЕсли;	
	КонецЕсли; 
	
	ПравилоУРазукомплектацииАвтоПеремещениеОтправка.ИспользуемыеПКО.Очистить();			
	ПравилоУРазукомплектацииАвтоПеремещениеОтправка.ИспользуемыеПКО.Добавить("Документ_РазукомплектацияАвтомобилей_Отправка");
	ПравилоУРазукомплектацииАвтоПеремещениеОтправка.ИспользуемыеПКО.Добавить("Документ_РазукомплектацияПеремещТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_РазукомплектацияПеремещТоваров_Отправка
Процедура ДобавитьПКО_Документ_РазукомплектацияПеремещТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РазукомплектацияПеремещТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РазукомплектацияПеремещТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ПодразделениеОтправитель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "ПодразделениеПолучатель", 1, "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СкладОтправитель", 1, "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СкладПолучатель", 1, "Справочник_СкладыКомпании_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_РазукомплектацияПеремещТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ДанныеИБ.Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходныйКассовыйОрдер_Отправка
Процедура ДобавитьПКО_Документ_РасходныйКассовыйОрдер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РасходныйКассовыйОрдер_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РасходныйКассовыйОрдер_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1,"Справочник_Патенты");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_РасходныйКассовыйОрдер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Расходный кассовый ордер'")));
	
	ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( ДанныеИБ.СтатьяДДС, "Операция");
	ВидОперации = ДанныеОперации.Операция;  
				
	Если ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ОплатаПоставщику Тогда
		ВидРасчетов = "СПоставщиком"; 
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОплатыПокупателю Тогда	
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратКредитаБанку  Тогда
		ВидРасчетов = "КредитыИЗаймы";
	Иначе 
		ВидРасчетов = "Прочее";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.СуммаДокумента);
	
	РасшифровкаПлатежа = РасшифровкаПлатежаДляРКО(ДанныеИБ, КомпонентыОбмена, ВидРасчетов);
		
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияАвтомобилей_Отправка
Процедура ДобавитьПКО_Документ_РеализацияАвтомобилей_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияАвтомобилей_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияАвтомобилей_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",       "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаПереходаПраваСобственности");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Патент",                "Патент", , "Справочник_Патенты");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",   "СпособПогашенияЗадолженности", , "Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Грузоотправитель", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Заказ", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияАвтомобилей_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.РеализацияАвтомобилейКомиссия Тогда
		ДанныеXDTO.ВидОперации = "ПередачаНаКомиссию";
	Иначе
		ДанныеXDTO.ВидОперации = "РеализацияКлиенту";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Реализация автомобилей'")));
	
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили") Тогда
		ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетНаОплатуЗаАвтомобили_Отправка"));
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СчетНаОплатуЗаАвтомобили.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетНаОплатуЗаАвтомобили КАК СчетНаОплатуЗаАвтомобили
			|ГДЕ
			|	СчетНаОплатуЗаАвтомобили.ДокументОснование = &ДокументОснование
			|	И СчетНаОплатуЗаАвтомобили.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	СчетНаОплатуЗаАвтомобили.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.Ссылка);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", Результат[0].Ссылка, "Документ_СчетНаОплатуЗаАвтомобили_Отправка"));
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеИБ.Грузоотправитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ДанныеXDTO.Вставить(
			"Грузоотправитель", 
			Новый Структура("Значение, ИмяПКО", ДанныеИБ.Грузоотправитель, "Справочник_Контрагенты_Отправка")
		);
	
	КонецЕсли;
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС"));
	
	Автомобили = ДанныеТЧРеализацииАвтомобилей(ДанныеИБ, КомпонентыОбмена);
	
	Если Автомобили.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Автомобили);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	ЗаполнитьСпособЗачетАванса(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваров_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",       "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаПереходаПраваСобственности");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Патент",                "Патент", , "Справочник_Патенты");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",   "СпособПогашенияЗадолженности", , "Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Грузоотправитель", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Заказ", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорСПринципалом", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//!!! ТРЕБУЕТСЯ ДЕЛАТЬ АНАЛОГИЧНЫЕ ПРАВКИ МЕЖДУ ПРОЦЕДУРАМИ:
	//ДобавитьПКО_Документ_РеализацияТоваров_Отправка()
	//ДобавитьПКО_Документ_ПередачаМеждуОрганизациями_РТУ_Отправка()
	//ПКО_Документ_РеализацияТоваров_Отправка_ПриОтправкеДанных()
	//ПКО_Документ_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных()
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда
		ДанныеXDTO.ВидОперации = "ПередачаНаКомиссию";
	Иначе
		ДанныеXDTO.ВидОперации = "РеализацияКлиенту";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Реализация товаров'")));
	        
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата, ДанныеИБ.КурсВалютыВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	Если ТипЗнч(ДанныеИБ.Грузоотправитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеXDTO.Вставить(
			"Грузоотправитель", 
			Новый Структура("Значение, ИмяПКО", ДанныеИБ.Грузоотправитель, "Справочник_Контрагенты_Отправка")
		);
	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетНаОплату_Отправка"));
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СчетНаОплату.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетНаОплату КАК СчетНаОплату
			|ГДЕ
			|	СчетНаОплату.ДокументОснование = &ДокументОснование
			|	И СчетНаОплату.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	СчетНаОплату.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.Ссылка);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", Результат[0].Ссылка, "Документ_СчетНаОплату_Отправка"));
		КонецЕсли;	
	КонецЕсли;
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС"));
	
	ТабличныеЧастиДокумента = ДанныеТЧРеализацииТоваров(ДанныеИБ, КомпонентыОбмена);
	
	Товары = ТабличныеЧастиДокумента.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = ТабличныеЧастиДокумента.Услуги;
	
	Если Услуги.Количество() > 0 Тогда
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
			
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
			
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	ЗаполнитьСпособЗачетАванса(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Отправка
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВыплатаЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "ДатаВедомости",  "ДатаВедомостиНаВыплатуЗарплаты");
	ДобавитьПКС(СвойстваТЧ, "НомерВедомости", "НомерВедомостиНаВыплатуЗарплаты");
	ДобавитьПКС(СвойстваТЧ, "",               "Сотрудник", 1,"Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваТЧ, "",               "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "",               "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Расходный кассовый ордер'")));
		ДанныеXDTO.Вставить("Сумма", ДанныеИБ.СуммаДокумента);
	
		Расшифровка = Новый ТаблицаЗначений;
		Расшифровка.Колонки.Добавить("Сумма"); 
		Расшифровка.Колонки.Добавить("СтатьяДДС");
		Расшифровка.Колонки.Добавить("Сотрудник");
		Расшифровка.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты"); 
		Расшифровка.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	
		НоваяСтрока = Расшифровка.Добавить();
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДДС; 
		Сотрудник = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Контрагент, "Справочник_КонтрагентФизЛицо_Отправка");
		НоваяСтрока.Сотрудник = Сотрудник;  
		
		НоваяСтрока.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеИБ.ДатаВедомости;
		НоваяСтрока.НомерВедомостиНаВыплатуЗарплаты	= ДанныеИБ.НомерВедомости;
		
		Если Расшифровка.Количество() > 0 Тогда
			
			ДанныеXDTO.Вставить("РасшифровкаПлатежа", Расшифровка); 
			
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОИнкассация_Отправка
Процедура ДобавитьПКО_Документ_РКОИнкассация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОИнкассация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОИнкассация_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",     "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОИнкассация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
			
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Расходный кассовый ордер'")));
	ВидОперации = "Инкассация";
		
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиВБанк Тогда
		ВидОперации = "ВзносНаличными";
	КонецЕсли;
		
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
			
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.СуммаДокумента);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Отправка
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Инкассация;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Инкассация - изъятие денежных средств'")));
		
	ДанныеXDTO.Вставить("ВидОперации", "Инкассация");
			
	// получаем сумму наличных оплат  
	СуммаОплат  = 0;
	Для Каждого Строка Из ДанныеИБ.Оплаты Цикл
		Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда 
			СуммаОплат = СуммаОплат + Строка.Сумма;
		КонецЕсли;
	КонецЦикла;
		
	ДанныеXDTO.Вставить("Сумма", СуммаОплат);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Инкассация;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
				Возврат;
		КонецЕсли;
			
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Инкассация - изъятие денежных средств'")));
							
		Расшифровка = Новый ТаблицаЗначений;
		Расшифровка.Колонки.Добавить("Сумма");
		Расшифровка.Колонки.Добавить("СчетУчетаРасчетов");
		
		НоваяСтрока = Расшифровка.Добавить();
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
		НоваяСтрока.СчетУчетаРасчетов ="50.02";
		
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", Расшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Сотрудник", , "Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Расходный кассовый ордер'")));
	
	ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( ДанныеИБ.СтатьяДДС, "Операция");
	ВидОперации = ДанныеОперации.Операция;  
	ВидРасчетов = ?(ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаймаСотруднику, "Займы", "Подотчет"); 
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
		
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.СуммаДокумента);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений();
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДДС;
	НоваяСтрока.Сотрудник = ДанныеИБ.Контрагент;
	
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                 "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",     "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
				
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
					
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;  
				
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
		
	ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПеречислениеЗаработнойПлаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчет", 1,"Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Депонент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("Ссылка") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("БанковскийСчетКонтрагента") Тогда
		ДанныеXDTO.Вставить(
			"БанковскийСчетСотрудника", 
			Новый Структура("Значение, ИмяПКО", ДанныеИБ.БанковскийСчетКонтрагента, "Справочник_БанковскиеСчета_Отправка")
		);
	КонецЕсли;
			
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
			
	Для Каждого Строка Из РасшифровкаПлатежа Цикл			
		Если  НЕ КомпонентыОбмена.ПараметрыКонвертации.УчетЗарплатыВоВнешнейПрограмме Тогда 
					
			Если ЗначениеЗаполнено(ДанныеИБ.Контрагент.Сотрудник) Тогда
				Сотрудник = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Контрагент, "Справочник_КонтрагентФизЛицо_Отправка");
				РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
				Строка.Сотрудник = Сотрудник;
				КонецЕсли;  
			Если РасшифровкаПлатежа.Колонки.Найти("ДатаВедомостиНаВыплатуЗарплаты")= Неопределено Тогда  
				РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты"); 
			КонецЕсли;    
					
			Если РасшифровкаПлатежа.Колонки.Найти("НомерВедомостиНаВыплатуЗарплаты")= Неопределено Тогда  
				РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты"); 
			КонецЕсли;    
									
			Строка.ДатаВедомостиНаВыплатуЗарплаты = ДанныеИБ.ДатаВедомости;
			Строка.НомерВедомостиНаВыплатуЗарплаты = ДанныеИБ.НомерВедомости;
					
		КонецЕсли;
				
		Если РасшифровкаПлатежа.Колонки.Найти("БанковскийСчет")= Неопределено Тогда
			РасшифровкаПлатежа.Колонки.Добавить("БанковскийСчет"); 
		КонецЕсли;
				
		Если РасшифровкаПлатежа.Колонки.Найти("Депонент")= Неопределено Тогда
			РасшифровкаПлатежа.Колонки.Добавить("Депонент"); 
		КонецЕсли;
				
		Строка.БанковскийСчет = ДанныеИБ.БанковскийСчетКонтрагента;
		Строка.Депонент = Ложь; 
				
	КонецЦикла;
			
	ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
					
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗПСотруднику_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗПСотруднику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПеречислениеЗПСотруднику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗПСотруднику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Сотрудник", , "Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗПСотруднику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("Ссылка") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
	КонецЕсли;
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
		
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
			
		ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа); 
			
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("Ссылка") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
	КонецЕсли;
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
		
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
			
		ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа); 
			
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;  
		
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
		
	Для Каждого Строка ИЗ РасшифровкаПлатежа Цикл					
			
		ДанныеСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.СтатьяДДС, "КоррСчет");
			
		Если ЗначениеЗаполнено (ДанныеСчета.КоррСчет) Тогда 
				
			Строка.СчетУчетаРасчетов = ДанныеСчета.КоррСчет.Код; 
				
		Иначе
				
			Строка.СчетУчетаРасчетов =  "91.02"; 
				
		КонецЕсли; 
	КонецЦикла;
		
	ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
		
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание"); 	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетРасходов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
			
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
				
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;  
		
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
			
	Для Каждого Строка Из  РасшифровкаПлатежа Цикл
					
		ДанныеСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.СтатьяДДС, "КоррСчет");
		ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.СтатьяДДС, "Операция");
						
		Если ДанныеОперации.Операция = Перечисления.ВидыОперацийДвиженияДенежныхСредств.КомиссияБанка Тогда 
					
			Строка.СчетРасходов = "91.02"; 
					
		ИначеЕсли ЗначениеЗаполнено (ДанныеСчета.КоррСчет) Тогда 
					
			Строка.СчетРасходов = ДанныеСчета.КоррСчет.Код; 
		
		КонецЕсли;		
				  
	КонецЦикла;
	
	ВидОперации = "ПрочиеРасходы";
	Если ДанныеОперации.Операция = Перечисления.ВидыОперацийДвиженияДенежныхСредств.КомиссияБанка Тогда
		ВидОперации= "КомиссияБанка";
	КонецЕсли;  
	
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации); 
	
	ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));  
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
			
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
				
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;  
			
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежа.Количество()>0 Тогда
				
		ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( РасшифровкаПлатежа[0].СтатьяДДС, "Операция");
		ВидОперации = ДанныеОперации.Операция;  
			
		Если ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ОплатаПоставщику Тогда
			ВидРасчетов = "СПоставщиком"; 
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОплатыПокупателю Тогда
			ВидРасчетов = "СПокупателем";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратКредитаБанку  Тогда
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.15") Тогда
				ВидРасчетов = "КредитыИЗаймы";
			Иначе
				   ВидРасчетов = "КредитБанка";
			КонецЕсли;
		Иначе 
			ВидРасчетов = "Прочее";
		КонецЕсли;
	
		ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
			
		Для Каждого Строка Из РасшифровкаПлатежа Цикл			
						
			ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( Строка.СтатьяДДС, "КоррСчет");
			Если ЗначениеЗаполнено (ДанныеОперации.КоррСчет) Тогда 
				Строка.СчетУчетаРасчетовСКонтрагентом = ДанныеОперации.КоррСчет.Код;
			КонецЕсли;
			
			ЗаполнитьСпособЗачетАвансаДляДокументовОплаты(
				Строка.Договор,
				Строка.ДокументРасчетов,
				РасшифровкаПлатежа,
				Строка);
			
		КонецЦикла; 
				
		ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
									
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);  
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Сотрудник", , "Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "БанковскийСчетСотрудника", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_КонтрагентФизЛицо_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
		
	Если ДанныеИБ.Свойство("БанковскийСчетКонтрагента") Тогда
		ДанныеXDTO.Вставить("БанковскийСчетСотрудника", ДанныеИБ.БанковскийСчетКонтрагента);
	КонецЕсли;
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;  
		
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
		
	Если РасшифровкаПлатежа.Количество()>0 Тогда
			
		ДанныеОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РасшифровкаПлатежа[0].СтатьяДДС, "Операция");
		ВидОперации = ДанныеОперации.Операция;  
		ВидРасчетов = ?(ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаймаСотруднику, "Займы", "Подотчет"); 
		ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
		
		РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
		РасшифровкаПлатежа[0].Сотрудник = ДанныеИБ.Контрагент;
		
		ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));	
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
			
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДССнятиеНаличных_Отправка
Процедура ДобавитьПКО_Документ_СБДССнятиеНаличных_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДССнятиеНаличных_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДССнятиеНаличных";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
				
	Если ДанныеИБ.Свойство("СсылкаДокумента") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.СсылкаДокумента);
	КонецЕсли;
					
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;  
		
	РасшифровкаПлатежа = ДанныеИБ.РасшифровкаПлатежа;
	ДанныеXDTO.Вставить("Сумма", РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеАвтомобилей_Отправка
Процедура ДобавитьПКО_Документ_СписаниеАвтомобилей_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеАвтомобилей_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеАвтомобилей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеАвтомобилей_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеАвтомобилей_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Списание автомобилей'")));
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	Запрос = НоВый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	1 КАК Количество,
	|	СписаниеАвтомобилейАвтомобили.Автомобиль.ГТД КАК ГТД,
	|	СписаниеАвтомобилейАвтомобили.Автомобиль.Прослеживаемый И &УчетПоГТД КАК ПрослеживаемыйТовар
	|ИЗ
	|	Документ.СписаниеАвтомобилей.Автомобили КАК СписаниеАвтомобилейАвтомобили
	|ГДЕ
	|	СписаниеАвтомобилейАвтомобили.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	
	Автомобили = Запрос.Выполнить().Выгрузить();
	
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
	
	// Автомобили
	Автомобили.Колонки.Добавить("ЕдиницаИзмерения");
	Для Каждого ТекущаяСтрока Из Автомобили Цикл
		ТекущаяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
	КонецЦикла;
	
	АвтомобилиСГТД = ТоварыСЗаполнениемГТД(Автомобили, КомпонентыОбмена);
	
	Если АвтомобилиСГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", АвтомобилиСГТД);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеАктивов_Отправка
Процедура ДобавитьПКО_Документ_СписаниеАктивов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеАктивов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеАктивов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеАктивов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПередачи", 1,"Документ_ВводВЭксплуатацию_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_Сотрудники_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_СписаниеАктивов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Списание активов'")));
		
	Товары = ДанныеСписаниеАктива(ДанныеИБ,КомпонентыОбмена);
		
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваровВПроизводство_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваровВПроизводство_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваровВПроизводство_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваровВПроизводство_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваровВПроизводство_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Списание товаров в производство'")));
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	СтатьяЗатрат = ДанныеИБ.СтатьяСписанияТМЦ;
	СчетЗатрат = ДанныеИБ.СтатьяСписанияТМЦ.КоррСчет.Код;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
		               |	""СобственныеТовары"" КАК ТипЗапасов,
		               |	СписаниеТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	СписаниеТоваровТовары.Количество * СписаниеТоваровТовары.Коэффициент КАК Количество,
		               |	СписаниеТоваровТовары.ГТД КАК ГТД,
		               |	СписаниеТоваровТовары.Номенклатура.Прослеживаемый
		               |		И &УчетПоГТД КАК ПрослеживаемыйТовар,
		               |	ВЫБОР
		               |		КОГДА СписаниеТоваровТовары.Ссылка.ПодразделениеЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияКомпании.ПустаяСсылка)
		               |			ТОГДА СписаниеТоваровТовары.Ссылка.ПодразделениеКомпании
		               |		ИНАЧЕ СписаниеТоваровТовары.Ссылка.ПодразделениеЗатрат
		               |	КОНЕЦ КАК ПодразделениеЗатрат
		               |ИЗ
		               |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
		               |ГДЕ
		               |	СписаниеТоваровТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("СтатьяЗатрат");
	Товары.Колонки.Добавить("СчетЗатрат");
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		ТекущаяСтрока.СтатьяЗатрат = СтатьяЗатрат;
		ТекущаяСтрока.СчетЗатрат = СчетЗатрат;
	КонецЦикла;
	
	ТоварыСГТД = ТоварыСЗаполнениемГТД(Товары, КомпонентыОбмена);
	
	Если ТоварыСГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТоварыСГТД);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваровЗапасы_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваровЗапасы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваровЗапасы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваровЗапасы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладКомпании",         "Склад", , "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1,"Справочник_СтруктураГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваровЗапасы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Списание товаров'")));
	
	// Налогообложение
	ДанныеXDTO.Вставить("Налогообложение");
	Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
		ДанныеXDTO.Налогообложение = "ПродажаНеОблагаетсяНДС";
	Иначе
		ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяНДС";
	КонецЕсли;
	
	Товары = ПолучитьТаблицуИнвентаризации(КомпонентыОбмена, ДанныеИБ.Ссылка, ВидДвиженияНакопления.Расход, "СобственныеТовары");
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваровОтчетКомиссионера_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваровОтчетКомиссионера_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваровОтчетКомиссионера_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваровОтчетКомиссионера_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатрат",   "ПодразделениеЗатрат", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "УдержатьКомиссионноеВознаграждение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПередачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПередачи", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваровОтчетКомиссионера_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.БанковскийСчетОрганизации = ДанныеИБ.Организация.ОсновнойБанковскийСчет;
	ДанныеXDTO.БанковскийСчетКонтрагента = ДанныеИБ.Контрагент.ОсновнойБанковскийСчет;
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Списание товаров, отданных на комиссию'")));
	ДанныеXDTO.Вставить("УдержатьКомиссионноеВознаграждение", ЛОЖЬ);
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ЛОЖЬ);
	      
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДанныеИБ.ДоговорВзаиморасчетов) Тогда
		ДанныеXDTO.Вставить("СпособПогашенияЗадолженности", "НеПогашать");
	КонецЕсли;
	      
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
		               |	""КомиссионныеТовары"" КАК ТипЗапасов,
		               |	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ПартииТоваровКомпании.Количество КАК Количество,
		               |	ПартииТоваровКомпании.Сумма КАК Сумма,
		               |	0 КАК Цена
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровКомпании
		               |ГДЕ
		               |	ПартииТоваровКомпании.Регистратор = &Регистратор
		               |	И ПартииТоваровКомпании.ВидДвижения = &ВидДвижения";
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
		
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ЦенаПередачи");
	Товары.Колонки.Добавить("СуммаПередачи");
	Товары.Колонки.Добавить("СтавкаНДС");
	
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		ТекущаяСтрока.ЦенаПередачи = ТекущаяСтрока.Цена;
		ТекущаяСтрока.СуммаПередачи = ТекущаяСтрока.Сумма;
		
		ЗначениеСтавки = (?(ДанныеИБ.Дата > Дата('2019.01.01'), "НДС20","НДС18"));
		СтавкаНДС = СтавкаНДС_Получение(ЗначениеСтавки);
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(СтавкаНДС, ЗначениеСтавки, КомпонентыОбмена);
	
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплату_Отправка
Процедура ДобавитьПКО_Документ_СчетНаОплату_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетНаОплату_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетНаОплату;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетНаОплату_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов",    "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",    "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "РасчетныйСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                   "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                         "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплату_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Счет на оплату'")));
	
	Если ЗначениеЗаполнено(ДанныеИБ.ТипЦен) Тогда
		ДанныеXDTO.Вставить("СуммаВключаетНДС",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС"));
	Иначе
		ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	КонецЕсли;
	
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	ТаблицыСчета = ТаблицыСчетаНаОплату(ДанныеИБ, КомпонентыОбмена); 
		
	Если ТаблицыСчета.Свойство("Товары")<> Неопределено И ТаблицыСчета.Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицыСчета.Товары);
	КонецЕсли; 
	
	Если ТаблицыСчета.Свойство("Услуги")<> Неопределено И ТаблицыСчета.Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицыСчета.Услуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуЗаАвтомобили_Отправка
Процедура ДобавитьПКО_Документ_СчетНаОплатуЗаАвтомобили_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетНаОплатуЗаАвтомобили_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетНаОплатуЗаАвтомобили;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетНаОплатуЗаАвтомобили_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов",    "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",    "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "РасчетныйСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                   "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                         "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплатуЗаАвтомобили_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Счет на оплату за автомобили'")));
	
	Если ЗначениеЗаполнено(ДанныеИБ.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ЦенаВключаетНДС);
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	Автомобили = ДанныеТЧСчетНаОплатуЗаАвтомобили(ДанныеИБ, ЦенаВключаетНДС, КомпонентыОбмена);
	
	Если Автомобили.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Автомобили);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетОтПоставщика_Отправка
Процедура ДобавитьПКО_Документ_СчетОтПоставщика_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетОтПоставщика_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетОтПоставщика;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетОтПоставщика_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетОтПоставщика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	Запрос = НоВый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		               |	СчетОтПоставщикаТовары.Номенклатура КАК Номенклатура,
		               |	СчетОтПоставщикаТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	СУММА(ВЫРАЗИТЬ(СчетОтПоставщикаТовары.Количество * СчетОтПоставщикаТовары.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
		               |	СУММА(ВЫБОР
		               |			КОГДА &СуммаВключаетНДС
		               |				ТОГДА СчетОтПоставщикаТовары.СуммаВсего
		               |			ИНАЧЕ СчетОтПоставщикаТовары.СуммаВсего - СчетОтПоставщикаТовары.СуммаНДС
		               |		КОНЕЦ) КАК Сумма,
		               |	СУММА(0) КАК Цена,
		               |	СУММА(СчетОтПоставщикаТовары.СуммаНДС) КАК СуммаНДС,
		               |	СчетОтПоставщикаТовары.СтавкаНДС КАК Ставка,
		               |	СчетОтПоставщикаТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки
		               |ИЗ
		               |	Документ.СчетОтПоставщика.Товары КАК СчетОтПоставщикаТовары
		               |ГДЕ
		               |	СчетОтПоставщикаТовары.Ссылка = &Ссылка
		               |	И СчетОтПоставщикаТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СчетОтПоставщикаТовары.Номенклатура,
		               |	СчетОтПоставщикаТовары.Номенклатура.БазоваяЕдиницаИзмерения,
		               |	СчетОтПоставщикаТовары.СтавкаНДС,
		               |	СчетОтПоставщикаТовары.СтавкаНДС.Ставка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СчетОтПоставщикаТовары.Номенклатура КАК Номенклатура,
		               |	СУММА(ВЫРАЗИТЬ(СчетОтПоставщикаТовары.Количество * СчетОтПоставщикаТовары.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
		               |	СУММА(ВЫБОР
		               |			КОГДА &СуммаВключаетНДС
		               |				ТОГДА СчетОтПоставщикаТовары.СуммаВсего
		               |			ИНАЧЕ СчетОтПоставщикаТовары.СуммаВсего - СчетОтПоставщикаТовары.СуммаНДС
		               |		КОНЕЦ) КАК Сумма,
		               |	СУММА(0) КАК Цена,
		               |	СУММА(СчетОтПоставщикаТовары.СуммаНДС) КАК СуммаНДС,
		               |	СчетОтПоставщикаТовары.СтавкаНДС КАК Ставка,
		               |	СчетОтПоставщикаТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки,
		               |	ВЫБОР
		               |		КОГДА ПОДСТРОКА(СчетОтПоставщикаТовары.Содержание, 1, 100) = """"
		               |			ТОГДА ПОДСТРОКА(СчетОтПоставщикаТовары.Номенклатура.НаименованиеПолное, 1, 100)
		               |		ИНАЧЕ СчетОтПоставщикаТовары.Содержание
		               |	КОНЕЦ КАК Содержание
		               |ИЗ
		               |	Документ.СчетОтПоставщика.Товары КАК СчетОтПоставщикаТовары
		               |ГДЕ
		               |	СчетОтПоставщикаТовары.Ссылка = &Ссылка
		               |	И СчетОтПоставщикаТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СчетОтПоставщикаТовары.Номенклатура,
		               |	СчетОтПоставщикаТовары.СтавкаНДС,
		               |	СчетОтПоставщикаТовары.СтавкаНДС.Ставка,
		               |	ВЫБОР
		               |		КОГДА ПОДСТРОКА(СчетОтПоставщикаТовары.Содержание, 1, 100) = """"
		               |			ТОГДА ПОДСТРОКА(СчетОтПоставщикаТовары.Номенклатура.НаименованиеПолное, 1, 100)
		               |		ИНАЧЕ СчетОтПоставщикаТовары.Содержание
		               |	КОНЕЦ";
		               
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("СуммаВключаетНДС",СуммаВключаетНДС);
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("СтавкаНДС");
		
	Услуги = МассивРезультатов[1].Выгрузить();
	Услуги.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
	КонецЦикла; 
		
	Для Каждого ТекущаяСтрока Из Услуги Цикл
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
	КонецЦикла; 
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
		
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетОтПоставщикаЗаАвтомобили_Отправка
Процедура ДобавитьПКО_Документ_СчетОтПоставщикаЗаАвтомобили_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетОтПоставщикаЗаАвтомобили_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетОтПоставщикаЗаАвтомобили;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетОтПоставщикаЗаАвтомобили_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СуммаВключаетНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Автомобили_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетОтПоставщикаЗаАвтомобили_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	ДанныеXDTO.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	Запрос = НоВый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетОтПоставщикаЗаАвтомобилиАвтомобили.Автомобиль КАК НоменклатураСтрока,
	               |	1 КАК Количество,
	               |	ВЫБОР
	               |		КОГДА &СуммаВключаетНДС
	               |			ТОГДА СчетОтПоставщикаЗаАвтомобилиАвтомобили.СуммаВсего
	               |		ИНАЧЕ СчетОтПоставщикаЗаАвтомобилиАвтомобили.СуммаВсего - СчетОтПоставщикаЗаАвтомобилиАвтомобили.СуммаНДС
	               |	КОНЕЦ КАК Сумма,
	               |	0 КАК Цена,
	               |	СчетОтПоставщикаЗаАвтомобилиАвтомобили.СуммаНДС КАК СуммаНДС,
	               |	СчетОтПоставщикаЗаАвтомобилиАвтомобили.СтавкаНДС КАК Ставка,
	               |	СчетОтПоставщикаЗаАвтомобилиАвтомобили.СтавкаНДС.Ставка КАК ЗначениеСтавки
	               |ИЗ
	               |	Документ.СчетОтПоставщикаЗаАвтомобили.Автомобили КАК СчетОтПоставщикаЗаАвтомобилиАвтомобили
	               |ГДЕ
	               |	СчетОтПоставщикаЗаАвтомобилиАвтомобили.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("СуммаВключаетНДС",СуммаВключаетНДС);
	
	Автомобили = Запрос.Выполнить().Выгрузить();
	
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
	Автомобили.Колонки.Добавить("ЕдиницаИзмерения");
	Автомобили.Колонки.Добавить("Номенклатура");
	Автомобили.Колонки.Добавить("СтавкаНДС");
		
	Для Каждого ТекущаяСтрока Из Автомобили Цикл
		Если ТипЗнч(ТекущаяСтрока.НоменклатураСтрока) = Тип("СправочникСсылка.Модели") Тогда
			ИмяПко = "Справочник_Модели_Отправка";
		Иначе
			ИмяПко = "Справочник_Автомобили_Отправка";
		КонецЕсли;
		ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПко",ТекущаяСтрока.НоменклатураСтрока,ИмяПко);
		ТекущаяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);	
	КонецЦикла;
	
	Если Автомобили.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Автомобили);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураВыданный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                                        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                              "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выставлен",                                    "Выставлен");
	ДобавитьПКС(СвойстваШапки, "Дата",                                         "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                                         "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",                              "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправляемогоКорректировочногоДокумента",  "ДатаИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов",                        "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                   "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                                        "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                             "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсправляемогоКорректировочногоДокумента", "НомерИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                               "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",                            "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "",                                             "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                                             "ДатаПлатежноРасчетногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                                             "ИсправляемыйСчетФактура", 1, "Документ_СчетФактураВыданный_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                             "КодВидаОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                                             "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                                             "НомерПлатежноРасчетногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                                             "СпособВыставления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Авансы");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИсходныйДокумент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "УчитыватьИсправлениеИсходногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПлатежноРасчетныеДокументы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокумента", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Счет-фактура выданный'")));
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ДокументыОснования.Колонки.Добавить("НомерИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("ДатаИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("НомерИсправленияИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("ДатаИсправленияИсходногоДокумента");
	
	ДокументОснование = ДанныеИБ.ДокументОснование;
	
	ЕстьБезнал = Ложь;
	ЕстьНал = Ложь;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			ЗаполнениеЗаказНарядаСчетуФактуре(ДанныеИБ, ДокументыОснования, КомпонентыОбмена);
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЧекНаОплату") Тогда
			
			Для Каждого Строка Из ДокументОснование.Оплаты Цикл
				Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
					ЕстьБезнал = Истина;
				КонецЕсли;
				Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
					ЕстьНал = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьНал Тогда
				ИмяПКО = "Документ_ЧекНаОплатуКакПКО_Отправка";
				НоваяСтрока = ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = Новый Структура("Значение, ИмяПКО", ДокументОснование, ИмяПКО);
			КонецЕсли;
			
		Иначе
			ИмяПКО = ПолучитьИмяПКОДокумента(ДокументОснование, КомпонентыОбмена);
			НоваяСтрока = ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Новый Структура("Значение, ИмяПКО", ДокументОснование, ИмяПКО);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	НомераИДатыППД = Новый Соответствие;
	НомерПлатежногоДокумента = "";
	ДатаПлатежногоДокумента = Дата(1,1,1);
	
	Если ДанныеИБ.ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
		
		Для Каждого ТекущаяСтрока Из ДанныеИБ.ПлатежноРасчетныеДокументы Цикл
			Если ТекущаяСтрока.Номер = НСтр("ru = 'в выписке не указан'") Тогда
				Продолжить;
			КонецЕсли;
			НомерПлатежногоДокумента = ТекущаяСтрока.Номер;
			ДатаПлатежногоДокумента = ТекущаяСтрока.Дата;
			НомераИДатыППД.Вставить(НомерПлатежногоДокумента, ДатаПлатежногоДокумента);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерПлатежногоДокумента) Тогда
		НомерПлатежногоДокумента = ДанныеИБ.Номер;
		ДатаПлатежногоДокумента = ДанныеИБ.Дата;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НомерПлатежноРасчетногоДокумента", НомерПлатежногоДокумента);
	ДанныеXDTO.Вставить("ДатаПлатежноРасчетногоДокумента", ДатаПлатежногоДокумента);
	
	ДанныеXDTO.Вставить(
		"СпособВыставления",
		?(ДанныеИБ.КодСпособаВыставления = 2, "ВЭлектронномВиде", "НаБумажномНосителе"));
	
	Если ДанныеИБ.Исправление Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Номер = &Номер
		|	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) = &Дата";
		Запрос.УстановитьПараметр("Номер", ДанныеИБ.НомерИсходногоДокумента);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.ДатаИсходногоДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДанныеXDTO.Вставить("ИсправляемыйСчетФактура",
			Новый Структура("Значение, ИмяПКО", Выборка.Ссылка, "Документ_СчетФактураВыданный_Отправка"));
		КонецЕсли;
		
	КонецЕсли;
	
	// Прописать отдельно для аванса (возврат от покупателя, отчет о розн. продаж)
	Если ЗначениеЗаполнено(ДокументОснование)
		И (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей")) Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "Корректировочный");
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЧекНаОплату") И (ЕстьБезнал ИЛИ ЕстьНал))
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Выписка")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаАванс");
	Иначе
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаРеализацию");
	КонецЕсли;
	
	ПлатежноРасчетныеДокументы = Новый ТаблицаЗначений;
	ПлатежноРасчетныеДокументы.Колонки.Добавить("ДатаДокумента");
	ПлатежноРасчетныеДокументы.Колонки.Добавить("НомерДокумента");
	
	Для Каждого ТекНомерДата Из НомераИДатыППД Цикл
		СтрокаПРД					= ПлатежноРасчетныеДокументы.Добавить();
		СтрокаПРД.ДатаДокумента		= ТекНомерДата.Значение;
		СтрокаПРД.НомерДокумента	= ТекНомерДата.Ключ;
	КонецЦикла;
	
	Если ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	ХозОперация = ДанныеИБ.ХозОперация;
	Контрагент = ДанныеИБ.Контрагент;
	
	ОснованиеЭтоРеализация = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров");
	ОснованиеЭтоЗаказНаряд = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд");
	ОснованиеЭтоРеализацияАвто = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияАвтомобилей");
	
	ОснованиеЭтоЧекНаОплату = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЧекНаОплату");
	ОснованиеЭтоВыписка = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Выписка");
	ОснованиеЭтоПКО = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
	ОснованиеЭтоРКО = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	
	ПонижениеСуммыКорректировка = Ложь;
	ЭтоСФКорректировочный = ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка;
	Если ЭтоСФКорректировочный Тогда
		ПонижениеСуммыКорректировка = ?(ДокументОснование.СуммаДокументаРазница < 0, Истина, Ложь);
	КонецЕсли;
	
	ЭтоАванс = Ложь;
	Если ОснованиеЭтоЧекНаОплату ИЛИ ОснованиеЭтоВыписка ИЛИ ОснованиеЭтоПКО ИЛИ ОснованиеЭтоРКО Тогда
		ЭтоАванс = Истина;
	КонецЕсли;
	
	Если ЭтоАванс Тогда
		
		Авансы = Новый ТаблицаЗначений();
		Авансы.Колонки.Добавить("Содержание");
		Авансы.Колонки.Добавить("СтавкаНДС");
		Авансы.Колонки.Добавить("Сумма");
		Авансы.Колонки.Добавить("СуммаНДС");
		
		Если ЕстьБезнал Тогда
			
			ОснованиеСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Ссылка");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЧекНаОплатуОплаты.ТипОплаты КАК ТипОплаты,
			|	СУММА(ЧекНаОплатуОплаты.Сумма) КАК Сумма,
			|	ЧекНаОплатуОплаты.Сдача КАК Сдача
			|ИЗ
			|	Документ.ЧекНаОплату.Оплаты КАК ЧекНаОплатуОплаты
			|ГДЕ
			|	ЧекНаОплатуОплаты.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ЧекНаОплатуОплаты.ТипОплаты,
			|	ЧекНаОплатуОплаты.Сдача";
			
			Запрос.УстановитьПараметр("Ссылка", ОснованиеСсылка);
			
			ТЧОплата = Запрос.Выполнить().Выгрузить();
			
			Сумма = 0;
			
			Для Каждого Строка Из ТЧОплата Цикл
				Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
					Сумма = Сумма + Строка.Сумма - Строка.Сдача;
				КонецЕсли;
			КонецЦикла;
			
			ДокОснованиеДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
			ДокОснованиеСуммаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СуммаНДС");
			ДокОснованиеСтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СтавкаНДС");
			ДокОснованиеСуммаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СуммаДокумента");
			
			СтавкаРасчетная = РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(ДокОснованиеСтавкаНДС);
				
			Стр = Авансы.Добавить();
			Стр.Содержание = НСтр("ru='Безналичный расчет из чека на оплату АА6'");
			Стр.СтавкаНДС =  ПолучитьСтавкуНДС(СтавкаРасчетная, , КомпонентыОбмена);
			Стр.СуммаНДС = Окр(ДокОснованиеСуммаНДС * Сумма / ДокОснованиеСуммаДокумента, 2);
			Стр.Сумма = Сумма;
			
			ИмяПКО = "Документ_ЧекНаОплатуБезнал_Отправка";
			НоваяСтрока = ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Новый Структура("Значение, ИмяПКО", ДокументОснование, ИмяПКО);
			
		Иначе
			
			Стр = Авансы.Добавить();
			Стр.Содержание = НСтр("ru='Предварительная оплата'");
			ДокОснованиеСтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СтавкаНДС");
			СтавкаРасчетная = РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(ДокОснованиеСтавкаНДС);
			Стр.СтавкаНДС =  ПолучитьСтавкуНДС(СтавкаРасчетная, , КомпонентыОбмена);	
			Стр.СуммаНДС = ДанныеИБ.СуммаНДСДокумента;
			Стр.Сумма = ДанныеИБ.СуммаДокумента;
			
		КонецЕсли;
		
		Если Авансы.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Авансы", Авансы);
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентНеплательщикНДС = Контрагент.ОсвобожденОтНДС;
	КонтрагентФизЛицо = Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
	
	Если ПонижениеСуммыКорректировка И НЕ КонтрагентНеплательщикНДС Тогда
		ДанныеXDTO.Вставить("КодВидаОперации", "18");
	ИначеЕсли ((ОснованиеЭтоРеализация ИЛИ ОснованиеЭтоЗаказНаряд)
		И (КонтрагентНеплательщикНДС ИЛИ КонтрагентФизЛицо))
		ИЛИ (ЭтоАванс И (КонтрагентНеплательщикНДС ИЛИ КонтрагентФизЛицо)) Тогда
		ДанныеXDTO.Вставить("КодВидаОперации", "26");
	ИначеЕсли ЭтоАванс Тогда 
		ДанныеXDTO.Вставить("КодВидаОперации", "02");
	ИначеЕсли (ОснованиеЭтоРеализация ИЛИ ОснованиеЭтоЗаказНаряд ИЛИ ОснованиеЭтоРеализацияАвто)
		И НЕ КонтрагентФизЛицо И НЕ КонтрагентНеплательщикНДС Тогда
		ДанныеXDTO.Вставить("КодВидаОперации", "01");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов", "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",      "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",     "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ИсправляемыйСчетФактура", 1, "Документ_СчетФактураПолученный_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Счет-фактура полученный'")));
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВхДокДата) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеИБ.ВхДокДата);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеИБ.Дата);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеИБ.ВхДокНомер) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НомерВходящегоДокумента", ДанныеИБ.ВхДокНомер);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("НомерВходящегоДокумента", "0");
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Проискать отдельно для авто (возврат от покупателя, отчет о розн. продаж)
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И (ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
		ИЛИ ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей")) Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "Корректировочный");
	Иначе
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаПоступление");
	КонецЕсли;                   
	
	ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	
	Если ДанныеИБ.Исправление Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СчетФактураПолученный.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		               |ГДЕ
		               |	СчетФактураПолученный.Номер = &Номер
		               |	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.Дата, ДЕНЬ) = &Дата";
		Запрос.УстановитьПараметр("Номер", ДанныеИБ.НомерИсходногоДокумента);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.ДатаИсходногоДокумента);
		      
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДанныеXDTO.Вставить("ИсправляемыйСчетФактура",
				Новый Структура("Значение, ИмяПКО", Выборка.Ссылка, "Документ_СчетФактураПолученный_Отправка"));
		КонецЕсли;
	         
	КонецЕсли;
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ДокументыОснования.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
		НоваяСтрока = ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларацияИмпорт_Отправка
Процедура ДобавитьПКО_Документ_ТаможеннаяДекларацияИмпорт_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ТаможеннаяДекларацияИмпорт_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ТаможеннаяДекларацияИмпорт;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТаможеннаяДекларацияИмпорт_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",        "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                   "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорВзаиморасчетов",  "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",             "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерДекларации",        "НомерДекларации");
	ДобавитьПКС(СвойстваШапки, "Организация",            "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",  "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаТаможенногоСбора",  "ТаможенныйСбор");
	ДобавитьПКС(СвойстваШапки, "СуммаТаможенногоШтрафа", "ТаможенныйШтраф");
	ДобавитьПКС(СвойстваШапки, "",                       "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                       "КурсДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Разделы");
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);

КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларацияИмпорт_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Таможенная декларация (импорт)'")));
	           
	СтруктураКурса = КурсИКратностьВалюты(ДанныеИБ.ВалютаДокумента, ДанныеИБ.Дата, ДанныеИБ.КурсДокумента);
	ДанныеXDTO.Вставить("КурсДокумента", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьДокумента", СтруктураКурса.Кратность);     
	           
	ТабличнаяЧастьДокумента = ДанныеТЧТаможеннаяДекларацияИмпорт(ДанныеИБ, КомпонентыОбмена);
	
	Если ТабличнаяЧастьДокумента.Разделы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Разделы", ТабличнаяЧастьДокумента.Разделы);
	КонецЕсли;
	
	Если ТабличнаяЧастьДокумента.Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТабличнаяЧастьДокумента.Товары);
	КонецЕсли;
	
	ЗаполнитьСпособЗачетАванса(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_УведомлениеОбОстаткахПрослежТов_Отправка
Процедура ДобавитьПКО_Документ_УведомлениеОбОстаткахПрослежТов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УведомлениеОбОстаткахПрослежТов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "КодТНВЭД",    "ТНВЭД", , "Справочник_КлассификаторТНВЭД");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "ДатаИнвентаризации", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ДокументИнвентаризации", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ЕдиницаИзмерения", 1, "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "",            "ЕдиницаПрослеживаемости", 1, "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "",            "КодОКПД2", 1);
	ДобавитьПКС(СвойстваШапки, "",            "НомерИнвентаризации", 1);
	ДобавитьПКС(СвойстваШапки, "",            "РНПТ", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияРНПТ", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипКорректировочнойСтроки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаПрослеживаемости", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодОКПД2", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ХозОперация, "Наименование")));
	
	// Данные по классификаторам
	Если ЗначениеЗаполнено(ДанныеИБ.КодОКПД2) Тогда
		ДанныеXDTO.Вставить("КодОКПД2", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КодОКПД2, "Код"));
	КонецЕсли;
	
	// Единицы измерений товаров
	Если ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЕдиницаИзмерения, "ЕдиницаПоКлассификатору"));
	Иначе
		// По умолчанию считаем, что у нас штучный товар
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмеренияПрослеживаемости) Тогда
		ДанныеXDTO.Вставить("ЕдиницаПрослеживаемости", ДанныеИБ.ЕдиницаИзмеренияПрослеживаемости);
	Иначе
		// По умолчанию считаем, что у нас штучный товар
		ДанныеXDTO.Вставить("ЕдиницаПрослеживаемости", Справочники.КлассификаторЕдиницИзмерения.шт);
	КонецЕсли;
	
	ИмяПКОПервичногоДокумента = ПолучитьИмяПКОДокумента(ДанныеИБ.ПервичныйДокумент, КомпонентыОбмена);
	ДанныеXDTO.Вставить("ДокументИнвентаризации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ПервичныйДокумент, ИмяПКОПервичногоДокумента));
	
	ДанныеПервичногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ПервичныйДокумент, "Дата,Номер");
	ДанныеXDTO.Вставить("ДатаИнвентаризации", ДанныеПервичногоДокумента.Дата);
	ДанныеXDTO.Вставить("НомерИнвентаризации", ДанныеПервичногоДокумента.Номер);
	
	// Передача РНПТ
	ДанныеРНПТ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.РНПТ, "Наименование,РНПТ,Страна");
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.РНПТ) Тогда
		ДанныеРНПТ.Наименование = НСтр("ru = '<Не получен РНПТ>'");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РНПТ",
		ГТДСтроки(ДанныеИБ.РНПТ, ДанныеРНПТ.Наименование, ДанныеРНПТ.Страна, ДанныеРНПТ.РНПТ, КомпонентыОбмена));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Номенклатура КАК НоменклатураСсылка,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Количество КАК Количество,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.КоличествоПрослеживаемости КАК КоличествоРНПТ,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Сумма КАК Сумма,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.КодОКПД2.Код КАК КодОКПД2,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Ссылка.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК УведомлениеОбОстаткахПрослеживаемыхТоваровТовары
	|ГДЕ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаПрослеживаемости");
	Товары.Колонки.Добавить("ИдентификаторСтроки");
	СуммаТоваров = 0; 
	
	// Приведем к нужному виду ТЗ
	Для Каждого СтрокаТовара Из Товары Цикл
		
		// Правило выгрузки товара
		Если ТипЗнч(СтрокаТовара.НоменклатураСсылка) = Тип("СправочникСсылка.Автомобили") Тогда
			ИмяПКО = "Справочник_Автомобили_Отправка";
		Иначе
			ИмяПКО = "Справочник_Номенклатура_Отправка";
		КонецЕсли;
		
		СтрокаТовара.Номенклатура = Новый Структура("Значение, ИмяПКО", СтрокаТовара.НоменклатураСсылка, ИмяПКО);
		СтрокаТовара.ЕдиницаИзмерения = ДанныеXDTO.ЕдиницаИзмерения;
		СтрокаТовара.ЕдиницаПрослеживаемости = ДанныеXDTO.ЕдиницаПрослеживаемости;
		СуммаТоваров = СуммаТоваров + СтрокаТовара.Сумма;
		
		СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Сумма", СуммаТоваров);
	
	Если Товары.Количество() > 0 Тогда
		
		ДанныеXDTO.Вставить("Товары", Товары);
		
		СведенияРНПТ = Товары.Скопировать(); 
		СведенияРНПТ.Колонки.Добавить("РНПТ");
		СведенияРНПТ.ЗаполнитьЗначения(ДанныеXDTO.РНПТ, "РНПТ"); 
		СведенияРНПТ.Колонки.Добавить("ТипКорректировочнойСтроки");
		СведенияРНПТ.ЗаполнитьЗначения("НеКорректировка", "ТипКорректировочнойСтроки");
	
		СведенияРНПТ.Колонки.ЕдиницаПрослеживаемости.Имя = "ЕдиницаИзмеренияРНПТ";
		СведенияРНПТ.Колонки.Удалить("ЕдиницаИзмерения"); 
		СведенияРНПТ.Колонки.Удалить("КодОКПД2");
	
		ДанныеXDTO.Вставить("СведенияРНПТ", СведенияРНПТ);
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_УведомлениеОВвозеПрослежТоваров_Отправка
Процедура ДобавитьПКО_Документ_УведомлениеОВвозеПрослежТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УведомлениеОВвозеПрослежТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УведомлениеОВвозеПрослеживаемыхТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "КодТНВЭД",    "ТНВЭД", , "Справочник_КлассификаторТНВЭД");
	ДобавитьПКС(СвойстваШапки, "Контрагент",  "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",            "ЕдиницаИзмерения", 1, "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "",            "ЕдиницаПрослеживаемости", 1, "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "",            "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",            "РНПТ", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Склад", 1, "Справочник_СкладыКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияРНПТ", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипКорректировочнойСтроки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаПрослеживаемости", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодОКПД2", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ХозОперация, "Наименование")));
	
	// Единицы измерений товаров
	Если ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения",
			?(ТипЗнч(ДанныеИБ.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),
				ДанныеИБ.ЕдиницаИзмерения,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЕдиницаИзмерения, "ЕдиницаПоКлассификатору")));
	Иначе
		// По умолчанию считаем, что у нас штучный товар
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмеренияПрослеживаемости) Тогда
		ДанныеXDTO.Вставить("ЕдиницаПрослеживаемости", ДанныеИБ.ЕдиницаИзмеренияПрослеживаемости);
	Иначе
		// По умолчанию считаем, что у нас штучный товар
		ДанныеXDTO.Вставить("ЕдиницаПрослеживаемости", Справочники.КлассификаторЕдиницИзмерения.шт);
	КонецЕсли;
	
	ИмяПКОПервичногоДокумента = ПолучитьИмяПКОДокумента(ДанныеИБ.ПервичныйДокумент, КомпонентыОбмена);
	ДанныеXDTO.Вставить("ДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ПервичныйДокумент, ИмяПКОПервичногоДокумента));
	
	// Склад поступления
	Если ЕстьРеквизит(ДанныеИБ.ПервичныйДокумент, "СкладКомпании") Тогда
		СкладПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ПервичныйДокумент, "СкладКомпании");
	Иначе
		СкладПоступления = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", СкладПоступления);
	
	// Передача РНПТ
	ДанныеРНПТ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.РНПТ, "Наименование,РНПТ,Страна");
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.РНПТ) Тогда
		ДанныеРНПТ.Наименование = НСтр("ru = '<Не получен РНПТ>'");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РНПТ",
		ГТДСтроки(ДанныеИБ.РНПТ, ДанныеРНПТ.Наименование, ДанныеРНПТ.Страна, ДанныеРНПТ.РНПТ, КомпонентыОбмена));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Номенклатура КАК НоменклатураСсылка,
	|	СУММА(УведомлениеОВвозеПрослеживаемыхТоваровТовары.Количество) КАК Количество,
	|	СУММА(УведомлениеОВвозеПрослеживаемыхТоваровТовары.КоличествоПрослеживаемости) КАК КоличествоРНПТ,
	|	СУММА(УведомлениеОВвозеПрослеживаемыхТоваровТовары.Сумма) КАК Сумма,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.КодОКПД2.Код КАК КодОКПД2,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК УведомлениеОВвозеПрослеживаемыхТоваровТовары
	|ГДЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Номенклатура,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.КодОКПД2.Код,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка.СтранаПроисхождения";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаПрослеживаемости");
	Товары.Колонки.Добавить("ИдентификаторСтроки");
	
	СуммаТоваров = 0; 
	
	// Приведем к нужному виду ТЗ
	Для Каждого СтрокаТовара Из Товары Цикл
		
		// Правило выгрузки товара
		Если ТипЗнч(СтрокаТовара.НоменклатураСсылка) = Тип("СправочникСсылка.Автомобили") Тогда
			ИмяПКО = "Справочник_Автомобили_Отправка";
		Иначе
			ИмяПКО = "Справочник_Номенклатура_Отправка";
		КонецЕсли;
		
		СтрокаТовара.Номенклатура = Новый Структура("Значение, ИмяПКО", СтрокаТовара.НоменклатураСсылка, ИмяПКО);
		СтрокаТовара.ЕдиницаИзмерения = ДанныеXDTO.ЕдиницаИзмерения;
		СтрокаТовара.ЕдиницаПрослеживаемости = ДанныеXDTO.ЕдиницаПрослеживаемости;
		СуммаТоваров = СуммаТоваров + СтрокаТовара.Сумма;
		СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Сумма", СуммаТоваров);
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
		
		СведенияРНПТ = Товары.Скопировать();
		СведенияРНПТ.Колонки.Добавить("РНПТ");
		СведенияРНПТ.ЗаполнитьЗначения(ДанныеXDTO.РНПТ, "РНПТ"); 
		
		СведенияРНПТ.Колонки.Добавить("ТипКорректировочнойСтроки");
		СведенияРНПТ.ЗаполнитьЗначения("НеКорректировка", "ТипКорректировочнойСтроки"); 
		
		СведенияРНПТ.Колонки.ЕдиницаПрослеживаемости.Имя = "ЕдиницаИзмеренияРНПТ";
		СведенияРНПТ.Колонки.Удалить("ЕдиницаИзмерения"); 
		СведенияРНПТ.Колонки.Удалить("КодОКПД2");
			
		ДанныеXDTO.Вставить("СведенияРНПТ", СведенияРНПТ);
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_УведомлениеОПеремещенииПрослеж_Отправка
Процедура ДобавитьПКО_Документ_УведомлениеОПеремещенииПрослеж_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УведомлениеОПеремещенииПрослеж_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УведомлениеОПеремещенииПрослеж_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",          "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Комментарий", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СведенияРНПТ");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияРНПТ", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипКорректировочнойСтроки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаПрослеживаемости", 1,"Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПорядковыйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СопроводительныйДокумент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТНВЭД", 1,"Справочник_КлассификаторТНВЭД");

КонецПроцедуры

Процедура ПКО_Документ_УведомлениеОПеремещенииПрослеж_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ХозОперация, "Наименование")));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.Контрагент КАК Контрагент,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров.Контрагенты КАК УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты
	|ГДЕ
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Номенклатура КАК НоменклатураСсылка,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.КодТНВЭД КАК ТНВЭД,
	|	ВЫБОР
	|		КОГДА УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаИзмерения = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.шт)
	|		КОГДА УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА ВЫРАЗИТЬ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).ЕдиницаПоКлассификатору
	|		ИНАЧЕ УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаИзмеренияПрослеживаемости = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.шт)
	|		ИНАЧЕ УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаИзмеренияПрослеживаемости
	|	КОНЕЦ КАК ЕдиницаПрослеживаемости,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Количество КАК Количество,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.КоличествоПрослеживаемости КАК КоличествоРНПТ,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Сумма КАК Сумма,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.РНПТ КАК РНПТСсылка,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.СопроводительныйДокумент КАК СопроводительныйДокументСсылка,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ПорядковыйНомер КАК ПорядковыйНомер,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.РНПТ.Наименование КАК НаименованиеРНПТ,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.РНПТ.Страна КАК СтранаРНПТ,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.РНПТ.РНПТ КАК ЭтоРНПТ
	|ИЗ
	|	Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров.Товары КАК УведомлениеОПеремещенииПрослеживаемыхТоваровТовары
	|ГДЕ
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	Контрагенты = ПакетЗапроса[0].Выгрузить();
	Контрагенты.Колонки.Добавить("КлючСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	
	Товары = ПакетЗапроса[1].Выгрузить();
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("РНПТ");
	Товары.Колонки.Добавить("СопроводительныйДокумент");
	Товары.Колонки.Добавить("КлючСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	
	КлючСтроки = 1;
	СтруктураПоиска = Новый Структура("ИдентификаторСтроки");
	Для Каждого ТекущаяСтрока Из Контрагенты Цикл
		
		ТекущаяСтрока.КлючСтроки = КлючСтроки;
		СтруктураПоиска.ИдентификаторСтроки = ТекущаяСтрока.ИдентификаторСтроки;
		НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
			
			// Правило выгрузки товара
			Если ТипЗнч(СтрокаТовара.НоменклатураСсылка) = Тип("СправочникСсылка.Автомобили") Тогда
				ИмяПКО = "Справочник_Автомобили_Отправка";
			Иначе
				ИмяПКО = "Справочник_Номенклатура_Отправка";
			КонецЕсли;
			
			СтрокаТовара.КлючСтроки = КлючСтроки;
			СтрокаТовара.Номенклатура = Новый Структура("Значение, ИмяПКО", СтрокаТовара.НоменклатураСсылка, ИмяПКО);
			СтрокаТовара.РНПТ = ГТДСтроки(
				СтрокаТовара.РНПТСсылка,
				СтрокаТовара.НаименованиеРНПТ,
				СтрокаТовара.СтранаРНПТ,
				СтрокаТовара.ЭтоРНПТ,
				КомпонентыОбмена);
			ИмяПКО = ПолучитьИмяПКОДокумента(СтрокаТовара.СопроводительныйДокументСсылка, КомпонентыОбмена);
			СтрокаТовара.СопроводительныйДокумент = Новый Структура("Значение, ИмяПКО", СтрокаТовара.СопроводительныйДокументСсылка, ИмяПКО);
	
		КонецЦикла;
		
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	
	Если Контрагенты.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Контрагенты", Контрагенты);
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
		
		СведенияОПрослеживаемости = Новый ТаблицаЗначений();
		СведенияОПрослеживаемости.Колонки.Добавить("Количество");
		СведенияОПрослеживаемости.Колонки.Добавить("КоличествоРНПТ"); 
		СведенияОПрослеживаемости.Колонки.Добавить("Номенклатура"); 
		СведенияОПрослеживаемости.Колонки.Добавить("РНПТ"); 
		СведенияОПрослеживаемости.Колонки.Добавить("СуммаРНПТ"); 
		СведенияОПрослеживаемости.Колонки.Добавить("ИдентификаторСтроки"); 
		СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияРНПТ"); 
		СведенияОПрослеживаемости.Колонки.Добавить("ТипКорректировочнойСтроки");
	
		Для Каждого Строка Из Товары Цикл
		    
		    СтрокаРНПТ = СведенияОПрослеживаемости.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРНПТ, Строка);
			СтрокаРНПТ.ЕдиницаИзмеренияРНПТ = Строка.ЕдиницаПрослеживаемости;
		    СтрокаРНПТ.ТипКорректировочнойСтроки = "НеКорректировка";
		КонецЦикла;
		
		ДанныеXDTO.Вставить("СведенияРНПТ", СведенияОПрослеживаемости);
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЧекНаОплатуБезнал_Отправка
Процедура ДобавитьПКО_Документ_ЧекНаОплатуБезнал_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЧекНаОплатуБезнал_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЧекНаОплату;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЧекНаОплатуБезнал_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧека",             "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Эквайрер", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1,"Справочник_Патенты");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЧекНаОплатуБезнал_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ЧекНаОплату Или ДанныеИБ.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВидОперации", "ОплатаОтКлиентаПлатежнойКартой");	
		ИначеЕсли ДанныеИБ.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат Или ДанныеИБ.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВидОперации", "ВозвратОплатыКлиентуНаПлатежнуюКарту");
		КонецЕсли;		
		
		Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		Эквайрер= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ПодразделениеКомпании, "ОсновнаяПлатежнаяСистема");
		ДанныеXDTO.Вставить("Эквайрер", Эквайрер);
	
		ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Чек на оплату'")));
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекНаОплатуОплаты.ТипОплаты КАК ТипОплаты,
		|	СУММА(ЧекНаОплатуОплаты.Сумма) КАК Сумма,
		|	ЧекНаОплатуОплаты.Сдача КАК Сдача
		|ИЗ
		|	Документ.ЧекНаОплату.Оплаты КАК ЧекНаОплатуОплаты
		|ГДЕ
		|	ЧекНаОплатуОплаты.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекНаОплатуОплаты.ТипОплаты,
		|	ЧекНаОплатуОплаты.Сдача";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ТЧОплата = Запрос.Выполнить().Выгрузить();
		РасшифровкаПлатежа = Новый ТаблицаЗначений();
		РасшифровкаПлатежа.Колонки.Добавить("Договор");
		РасшифровкаПлатежа.Колонки.Добавить("СуммаНДС");
		РасшифровкаПлатежа.Колонки.Добавить("СтавкаНДС");
		РасшифровкаПлатежа.Колонки.Добавить("Сумма"); 
		РасшифровкаПлатежа.Колонки.Добавить("СуммаВзаиморасчетов");
		РасшифровкаПлатежа.Колонки.Добавить("ДокументРасчетов");
		РасшифровкаПлатежа.Колонки.Добавить("Заказ");
		РасшифровкаПлатежа.Колонки.Добавить("СпособПогашенияЗадолженности");
		РасшифровкаПлатежа.Колонки.Добавить("Патент");
	
		Сумма = 0;
		Для Каждого Строка Из ТЧОплата Цикл
			Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
				Сумма = Сумма + Строка.Сумма - Строка.Сдача;
			КонецЕсли;
		КонецЦикла;
		Стр = РасшифровкаПлатежа.Добавить();
		Стр.СтавкаНДС = ПолучитьСтавкуНДС(ДанныеИБ.СтавкаНДС,,КомпонентыОбмена);
		Стр.СуммаНДС = Окр(ДанныеИБ.СуммаНДС * Сумма / ДанныеИБ.СуммаДокумента, 2);
		Стр.Сумма = Сумма;
		Стр.СуммаВзаиморасчетов = Сумма;
		ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
		
		РазрешениеПодставитьСделкуКакЗН = Истина;
		
		Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			РазрешениеПодставитьСделкуКакЗН = ЗНВРеализациюИЗакрыт(ДанныеИБ.ДокументОснование, КомпонентыОбмена);
		КонецЕсли;
		
		Если ИмяПКО <> "" И ИмяПКО <> "Документ_СчетНаОплату_Отправка" И РазрешениеПодставитьСделкуКакЗН Тогда
			Стр.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО);
		КонецЕсли;
		
		Если ИмяПКО = "Документ_СчетНаОплату_Отправка" Тогда
			Стр.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО);
		КонецЕсли;
		ДоговорВзаиморасчетов = ДанныеДоговораВзаиморасчетов(ДанныеИБ.ДоговорВзаиморасчетов);
		Если ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам Тогда
			ИспользуетсяАвтоматическоеЗакрытиеСделок = ДанныеИБ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Если РазрешениеПодставитьСделкуКакЗН И ИмяПКО <> "Документ_СчетНаОплату_Отправка" Тогда
				Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
				ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
					И НЕ ИспользуетсяАвтоматическоеЗакрытиеСделок
					И ДанныеИБ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				Иначе
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
				КонецЕсли;	
			Иначе
				Если ИспользуетсяАвтоматическоеЗакрытиеСделок Тогда
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
				Иначе
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				КонецЕсли;	
			КонецЕсли;
				
			Если Не РазрешениеПодставитьСделкуКакЗН Тогда
				Если ИспользуетсяАвтоматическоеЗакрытиеСделок Тогда
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
				Иначе
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ДанныеИБ.ВерсияОбъекта) Тогда
				Стр.СпособПогашенияЗадолженности = ДанныеИБ.СпособЗачетаАвансов;
			ИначеЕсли ЗначениеЗаполнено(Стр.ДокументРасчетов) Тогда
				Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
			Иначе
			    Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
			КонецЕсли;	   
		КонецЕсли;
	
		Стр.Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ДоговорВзаиморасчетов");
		Стр.Патент =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "Патент");
		ДанныеXDTO.Вставить("Сумма", Сумма);
		
		Если РасшифровкаПлатежа.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЧекНаОплатуКакПКО_Отправка
Процедура ДобавитьПКО_Документ_ЧекНаОплатуКакПКО_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЧекНаОплатуКакПКО_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЧекНаОплату;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЧекНаОплатуКакПКО_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Приложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ПринятоОт", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1,"Справочник_Патенты");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЧекНаОплатуКакПКО_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Чек на оплату'")));
	
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
	Иначе
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекНаОплатуОплаты.ТипОплаты КАК ТипОплаты,
	|	СУММА(ЧекНаОплатуОплаты.Сумма) КАК Сумма,
	|	ЧекНаОплатуОплаты.Сдача КАК Сдача
	|ИЗ
	|	Документ.ЧекНаОплату.Оплаты КАК ЧекНаОплатуОплаты
	|ГДЕ
	|	ЧекНаОплатуОплаты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекНаОплатуОплаты.ТипОплаты,
	|	ЧекНаОплатуОплаты.Сдача";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТЧОплата = Запрос.Выполнить().Выгрузить();
	
	Сумма = 0;
	СуммаБезнал = 0;
	Для Каждого Строка Из ТЧОплата Цикл
		Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			Сумма = Сумма + Строка.Сумма - Строка.Сдача;
		Иначе
			СуммаБезнал = СуммаБезнал + Строка.Сумма - Строка.Сдача; 
		КонецЕсли;
	КонецЦикла;
		
	ДанныеXDTO.Вставить("Основание", СтрШаблон(НСтр("ru = 'Номер док.  %1. Номер смены %2.'"), ДанныеИБ.НомерДокумента, ДанныеИБ.НомерСмены));
	ДанныеXDTO.Вставить("Приложение",
		СтрШаблон(НСтр("ru = 'Наличными  %1. Безналичными %2.'"), Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧН=0"), Формат(СуммаБезнал, "ЧЦ=15; ЧДЦ=2; ЧН=0")));
	ДанныеXDTO.Вставить("ПринятоОт", Строка(ДанныеИБ.Контрагент));
			
	РасшифровкаПлатежа = Новый ТаблицаЗначений();
	РасшифровкаПлатежа.Колонки.Добавить("Договор");
	РасшифровкаПлатежа.Колонки.Добавить("СуммаНДС");
	РасшифровкаПлатежа.Колонки.Добавить("СтавкаНДС");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СуммаВзаиморасчетов");	
	РасшифровкаПлатежа.Колонки.Добавить("КурсВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("КратностьВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("ДокументРасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("Заказ");
	РасшифровкаПлатежа.Колонки.Добавить("СпособПогашенияЗадолженности"); 
	РасшифровкаПлатежа.Колонки.Добавить("Патент");
	
	Стр = РасшифровкаПлатежа.Добавить();
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	Стр.СтавкаНДС = ПолучитьСтавкуНДС(ДанныеИБ.СтавкаНДС,,КомпонентыОбмена);
	Стр.СуммаНДС = Окр(ДанныеИБ.СуммаНДС * Сумма / ДанныеИБ.СуммаДокумента, 2);
	Стр.Сумма = Сумма;
	Стр.СуммаВзаиморасчетов = Сумма;
	
	ДокументРасчетов = ДанныеИБ.ДокументОснование; 
		ОснованиеСчетНаОплату = ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату");
		Если ОснованиеСчетНаОплату Тогда
		   ОснованиеСчетаНаОплату = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "ДокументОснование");
		   Если ЗначениеЗаполнено(ОснованиеСчетаНаОплату) Тогда
		   	  ДокументРасчетов = ОснованиеСчетаНаОплату;
		   КонецЕсли;
		КонецЕсли;
		
		ИмяПКО = ПолучитьИмяПКОДокумента(ДокументРасчетов, КомпонентыОбмена);
		
		РазрешениеПодставитьСделкуКакЗН = Истина;
		
		Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			РазрешениеПодставитьСделкуКакЗН = ЗНВРеализациюИЗакрыт(ДокументРасчетов, КомпонентыОбмена);
		КонецЕсли;
		
		Если ИмяПКО <> "" И ИмяПКО <> "Документ_СчетНаОплату_Отправка" И РазрешениеПодставитьСделкуКакЗН Тогда
			Стр.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ДокументРасчетов, ИмяПКО);
		КонецЕсли;
		
		Если ОснованиеСчетНаОплату Тогда
			Стр.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетНаОплату_Отправка");
		КонецЕсли;
		
		ДоговорВзаиморасчетов = ДанныеДоговораВзаиморасчетов(ДанныеИБ.ДоговорВзаиморасчетов);
		
		Если ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам Тогда	
			ИспользуетсяАвтоматическоеЗакрытиеСделок = ДанныеИБ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Если РазрешениеПодставитьСделкуКакЗН И ИмяПКО <> "Документ_СчетНаОплату_Отправка" Тогда
				Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
				ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
					И НЕ ИспользуетсяАвтоматическоеЗакрытиеСделок
					И ДанныеИБ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				Иначе
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
				КонецЕсли;	
			Иначе
				Если ИспользуетсяАвтоматическоеЗакрытиеСделок Тогда
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
				Иначе
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				КонецЕсли;	
			КонецЕсли;
					
			Если Не РазрешениеПодставитьСделкуКакЗН Тогда
				Если ИспользуетсяАвтоматическоеЗакрытиеСделок Тогда
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
				Иначе
					Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				КонецЕсли;
			КонецЕсли;	
		Иначе
			Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ДанныеИБ.ВерсияОбъекта) Тогда
				Стр.СпособПогашенияЗадолженности = ДанныеИБ.СпособЗачетаАвансов;
			ИначеЕсли ЗначениеЗаполнено(Стр.ДокументРасчетов) Тогда
				Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Иначе
			    Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
			КонецЕсли;	   
		КонецЕсли;
			
		Стр.Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ДоговорВзаиморасчетов");
		Стр.Патент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "Патент"); 
		Стр.КурсВзаиморасчетов = СтруктураКурса.Курс;
		Стр.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
		ДанныеXDTO.Вставить("Сумма", Сумма);
		
		Если РасшифровкаПлатежа.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЧекНаОплатуКакРКО_Отправка
Процедура ДобавитьПКО_Документ_ЧекНаОплатуКакРКО_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЧекНаОплатуКакРКО_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЧекНаОплату;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЧекНаОплатуКакРКО_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Выдать", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ПоДокументу", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "",       "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "",       "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "",       "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "",       "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "",       "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "Патент", "Патент", ,"Справочник_Патенты");
	ДобавитьПКС(СвойстваТЧ, "",       "СпособПогашенияЗадолженности", 1,"Перечисление_СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваТЧ, "",       "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "",       "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "",       "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "",       "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЧекНаОплатуКакРКО_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Чек на оплату'")));
	
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
	Иначе
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекНаОплатуОплаты.ТипОплаты КАК ТипОплаты,
	|	СУММА(ЧекНаОплатуОплаты.Сумма) КАК Сумма,
	|	ЧекНаОплатуОплаты.Сдача КАК Сдача
	|ИЗ
	|	Документ.ЧекНаОплату.Оплаты КАК ЧекНаОплатуОплаты
	|ГДЕ
	|	ЧекНаОплатуОплаты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекНаОплатуОплаты.ТипОплаты,
	|	ЧекНаОплатуОплаты.Сдача";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТЧОплата = Запрос.Выполнить().Выгрузить();
	
	Сумма = 0;
	СуммаБезнал = 0;
	Для Каждого Строка Из ТЧОплата Цикл
		Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			Сумма = Сумма + Строка.Сумма - Строка.Сдача;
		Иначе
			СуммаБезнал = СуммаБезнал + Строка.Сумма - Строка.Сдача; 
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Основание", СтрШаблон(НСтр("ru = 'Номер док.  %1. НомерСмены %2.'"), ДанныеИБ.НомерДокумента, ДанныеИБ.НомерСмены));
	ДанныеXDTO.Вставить("ПоДокументу",
	СтрШаблон(НСтр("ru = 'Номер чека %1. Номер смены %2.'"), ДанныеИБ.НомерЧека, ДанныеИБ.ДатаФР));
	ДанныеXDTO.Вставить("Выдать", 
	СтрШаблон(НСтр("ru = 'Наличными  %1. Безналичными %2.'"), Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧН=0"), Формат(СуммаБезнал, "ЧЦ=15; ЧДЦ=2; ЧН=0")));
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений();
	РасшифровкаПлатежа.Колонки.Добавить("Договор");
	РасшифровкаПлатежа.Колонки.Добавить("СуммаНДС");
	РасшифровкаПлатежа.Колонки.Добавить("СтавкаНДС");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СуммаВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("КурсВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("КратностьВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("ДокументРасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("Заказ");
	РасшифровкаПлатежа.Колонки.Добавить("СпособПогашенияЗадолженности");
	
	Стр = РасшифровкаПлатежа.Добавить();
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	Стр.СтавкаНДС = ПолучитьСтавкуНДС(ДанныеИБ.СтавкаНДС,, КомпонентыОбмена);
	Стр.СуммаНДС = Окр(ДанныеИБ.СуммаНДС * Сумма / ДанныеИБ.СуммаДокумента, 2);
	Стр.Сумма = Сумма;
	Стр.СуммаВзаиморасчетов = Сумма;
	ДокументРасчетов = ДанныеИБ.ДокументОснование; 
	ОснованиеСчетНаОплату = ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату");
	Если ОснованиеСчетНаОплату Тогда
	   ОснованиеСчетаНаОплату = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "ДокументОснование");
	   Если ЗначениеЗаполнено(ОснованиеСчетаНаОплату) Тогда
	   	  ДокументРасчетов = ОснованиеСчетаНаОплату;
	   КонецЕсли;
	КонецЕсли;
	
	ИмяПКО = ПолучитьИмяПКОДокумента(ДокументРасчетов, КомпонентыОбмена);
	
	РазрешениеПодставитьСделкуКакЗН = Истина;
	
	Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		РазрешениеПодставитьСделкуКакЗН = ЗНВРеализациюИЗакрыт(ДокументРасчетов, КомпонентыОбмена);
	КонецЕсли;
	
	Если ИмяПКО <> "" И ИмяПКО <> "Документ_СчетНаОплату_Отправка" И РазрешениеПодставитьСделкуКакЗН Тогда
		Стр.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ДокументРасчетов, ИмяПКО);
	КонецЕсли;
	
	Если ОснованиеСчетНаОплату Тогда
		Стр.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетНаОплату_Отправка");
	КонецЕсли;
	
	ДоговорВзаиморасчетов = ДанныеДоговораВзаиморасчетов(ДанныеИБ.ДоговорВзаиморасчетов);
	
	Если ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам Тогда	
		ИспользуетсяАвтоматическоеЗакрытиеСделок = ДанныеИБ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Если РазрешениеПодставитьСделкуКакЗН И ИмяПКО <> "Документ_СчетНаОплату_Отправка" Тогда
			Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
				Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
			ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
				И НЕ ИспользуетсяАвтоматическоеЗакрытиеСделок
				И ДанныеИБ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
				Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
			Иначе
				Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли;	
		Иначе
			Если ИспользуетсяАвтоматическоеЗакрытиеСделок Тогда
				Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Иначе
				Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
			КонецЕсли;	
		КонецЕсли;
				
		Если Не РазрешениеПодставитьСделкуКакЗН Тогда
			Если ИспользуетсяАвтоматическоеЗакрытиеСделок Тогда
				Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Иначе
				Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ДанныеИБ.ВерсияОбъекта) Тогда
			Стр.СпособПогашенияЗадолженности = ДанныеИБ.СпособЗачетаАвансов;
		ИначеЕсли ЗначениеЗаполнено(Стр.ДокументРасчетов) Тогда
			Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		Иначе
			Стр.СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		КонецЕсли;	   
	КонецЕсли;
	
	Стр.Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ДоговорВзаиморасчетов");	
	Стр.КурсВзаиморасчетов = СтруктураКурса.Курс;
	Стр.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	
	ДанныеXDTO.Вставить("Сумма", Сумма);
	
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Автомобили_Отправка
Процедура ДобавитьПКО_Справочник_Автомобили_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Автомобили_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Автомобили;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Автомобили_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "VIN",                "Артикул");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_АвтомобилиГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ВидНоменклатуры", 1, "Справочник_ТипыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ГруппаАналитическогоУчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ЕдиницаИзмерения", 1, "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "",                   "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ТипНоменклатуры", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Автомобили_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДС = ПолучитьСтавкуНДС(Справочники.СтавкиНДС.ОсновнаяСтавкаНДС,,КомпонентыОбмена);
	ДанныеXDTO.Вставить("СтавкаНДС", СтавкаНДС);
	
	ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ЕдиницаИзмерения = Новый Структура("Код, Наименование, НаименованиеПолное", "796", "шт", "Штука");	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ЕдиницаИзмерения",ЕдиницаИзмерения);
		
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.НеПередаватьНоменклатурнуюГруппу Тогда
		ДанныеXDTO.Вставить("ГруппаАналитическогоУчета", Новый Структура("Наименование", НСтр("ru = 'Автомобили'")));
	КонецЕсли;
		
	ВидНоменклатуры = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("Штучный", Истина);
	ДанныеXDTO.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	
	ДанныеXDTO.Вставить("ТипНоменклатуры","Товар");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Автоработы_Отправка
Процедура ДобавитьПКО_Справочник_Автоработы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Автоработы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Автоработы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Автоработы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_Автоработы_Группа");
	ДобавитьПКС(СвойстваШапки, "",                   "ГруппаАналитическогоУчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ЕдиницаИзмерения", 1, "Справочник_КлассификаторЕдиницИзмерения");

КонецПроцедуры

Процедура ПКО_Справочник_Автоработы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.НеПередаватьНоменклатурнуюГруппу Тогда
		ДанныеXDTO.Вставить("ГруппаАналитическогоУчета", Новый Структура("Наименование", НСтр("ru = 'Автоработы'")));
	КонецЕсли;
		
	ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("-", Истина);
	
	Если ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Новый Структура("Наименование,НаименованиеПолное,Код", "-", "-", ""));
	Иначе
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипНоменклатуры", "Работа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "ДатаЗакрытия");
	ДобавитьПКС(СвойстваШапки, "ДатаОткрытия",          "ДатаОткрытия");
	ДобавитьПКС(СвойстваШапки, "МесяцПрописью",         "ВыводитьМесяцПрописью");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерИДатаРазрешения",  "НомерИДатаРазрешения");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "СуммаБезКопеек",        "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "ВидСчета",              "ВидСчета", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",              "Владелец", 1);

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
		Инструкция.Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Владелец, "Организация");
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.ВидСчета) <> "Расчетный"
		И СокрЛП(ДанныеИБ.ВидСчета) <> "Депозитный"
		И СокрЛП(ДанныеИБ.ВидСчета) <> "Ссудный" Тогда
		
		ДанныеXDTO.Вставить("ВидСчета", "Иной");
	Иначе
		ДанныеXDTO.Вставить("ВидСчета", ДанныеИБ.ВидСчета);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыВзаиморасчетов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",                   "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидДоговора",                            "ВидДоговора", , "Перечисление_ВидыДоговоров_Отправка");
	ДобавитьПКС(СвойстваШапки, "Владелец",                               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДатаКонца",                              "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                             "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                            "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "РасчетыВУсловныхЕдиницах",               "РасчетыВУсловныхЕдиницах");
	ДобавитьПКС(СвойстваШапки, "СрокОплатыЗадолженности",                "СрокКонтроляОплатыВДнях");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                                 "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторГосударственногоКонтракта", "ИдентификаторГосКонтракта", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли; 
		Если  ЗначениеЗаполнено(ДанныеИБ.ИдентификаторГосударственногоКонтракта) И СтрДлина(ДанныеИБ.ИдентификаторГосударственногоКонтракта)= 25 Тогда
	         
			ДанныеXDTO.Вставить("ИдентификаторГосКонтракта", ДанныеИБ.ИдентификаторГосударственногоКонтракта); 
			
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентФизЛицо_Отправка
Процедура ДобавитьПКО_Справочник_КонтрагентФизЛицо_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КонтрагентФизЛицо_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КонтрагентФизЛицо_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения", "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "Имя",          "Имя");
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Отчество",     "Отчество");
	ДобавитьПКС(СвойстваШапки, "Пол",          "Пол", , "Перечисление_Пол");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентФизЛицоГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "Фамилия",      "Фамилия");
	ДобавитьПКС(СвойстваШапки, "",             "ФИО", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДанныеФИО");
	ДобавитьПКС(СвойстваТЧ, "", "Имя", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Отчество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Фамилия", 1);

КонецПроцедуры

Процедура ПКО_Справочник_КонтрагентФизЛицо_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеИБ = ПолучитьСсылкуФизЛицаОтправка(ДанныеИБ.Ссылка, КомпонентыОбмена.УзелКорреспондента);
			
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО", ДанныеИБ.Фамилия + " " + ДанныеИБ.Имя + " " + ДанныеИБ.Отчество); 
	ДанныеXDTO.Вставить("ФИО", ДанныеИБ.Фамилия + " " + ДанныеИБ.Имя + " " + ДанныеИБ.Отчество);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ);
					
	ДанныеФИО = Новый ТаблицаЗначений();
	ДанныеФИО.Колонки.Добавить("Имя");
	ДанныеФИО.Колонки.Добавить("Фамилия");
	ДанныеФИО.Колонки.Добавить("Отчество");
	ДанныеФИО.Колонки.Добавить("НачалоПериода");
		
	НоваяСтрока = ДанныеФИО.Добавить();
	НоваяСтрока.Имя = ДанныеИБ.Имя;
	НоваяСтрока.Фамилия = ДанныеИБ.Фамилия;
	НоваяСтрока.Отчество = ДанныеИБ.Отчество;
	НоваяСтрока.НачалоПериода = Дата('20190724132506');
		
	ДанныеXDTO.Вставить("ДанныеФИО", ДанныеФИО);
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентФизЛицоГруппа_Отправка
Процедура ДобавитьПКО_Справочник_КонтрагентФизЛицоГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КонтрагентФизЛицоГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛицаГруппа";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентФизЛицоГруппа_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнойКонтрагент",     "ГоловнойКонтрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИНН",                    "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",              "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "КПП",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НалоговыйНомер",         "НалоговыйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                   "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет", "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",               "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "СтранаРегистрации",      "СтранаРегистрации", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ФормаСобственности",     "ЮридическоеФизическоеЛицо", , "Перечисление_ФизическоеЮридическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "",                       "ОбособленноеПодразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.СтранаРегистрации) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("СтранаРегистрации", Новый Структура("Код,Наименование", "643", НСтр("ru = 'Россия'")));
	КонецЕсли;
	
	ЭтоОбособленноеПодразделение = ЗначениеЗаполнено(ДанныеИБ.ГоловнойКонтрагент);
	ДанныеXDTO.Вставить("ОбособленноеПодразделение", ЭтоОбособленноеПодразделение);
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Модели_Отправка
Процедура ДобавитьПКО_Справочник_Модели_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Модели_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Модели;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Модели_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_АвтомобилиГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "",             "ВидНоменклатуры", 1, "Справочник_ТипыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",             "ГруппаАналитическогоУчета", 1);
	ДобавитьПКС(СвойстваШапки, "",             "ЕдиницаИзмерения", 1, "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "",             "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",             "ТипНоменклатуры", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Модели_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СтавкаНДС","НДС20");
	
	ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ЕдиницаИзмерения = Новый Структура("Код, Наименование, НаименованиеПолное", "796", "шт", "Штука");	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ЕдиницаИзмерения",ЕдиницаИзмерения);
		
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.НеПередаватьНоменклатурнуюГруппу Тогда
		ДанныеXDTO.Вставить("ГруппаАналитическогоУчета", Новый Структура("Наименование", НСтр("ru = 'Модели'")));
	КонецЕсли;
	
	ВидНоменклатуры = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("Штучный", Истина);
	ДанныеXDTO.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	
	ДанныеXDTO.Вставить("ТипНоменклатуры","Товар");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",                 "Артикул");
	ДобавитьПКС(СвойстваШапки, "БазоваяЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры",         "ТипНоменклатуры", , "Перечисление_ВидыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Код",                     "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Описание");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",      "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Прослеживаемый",          "ПрослеживаемыйТовар");
	ДобавитьПКС(СвойстваШапки, "Родитель",                "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения",     "СтранаПроисхождения", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",         "ВидНоменклатуры", , "Справочник_ТипыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦеноваяГруппа",           "ЦеноваяГруппа", , "Справочник_ЦеновыеГруппы");
	ДобавитьПКС(СвойстваШапки, "",                        "ГруппаАналитическогоУчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "КодТНВЭД", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Производитель", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "СтавкаНДС", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСтавкиНДС = ПолучитьСтавкуНДС(ДанныеИБ.СтавкаНДС,,КомпонентыОбмена);
	ДанныеXDTO.Вставить("СтавкаНДС", ЗначениеСтавкиНДС);
	
	Если ЗначениеЗаполнено(ДанныеИБ.КодТНВЭД) Тогда
	
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
			ДанныеКодТНВЭД = Новый Структура("Значение, ИмяПКО", ДанныеИБ.КодТНВЭД, "Справочник_КлассификаторТНВЭД");
		Иначе
			ДанныеКодТНВЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодТНВЭД, "Код, Наименование");
		КонецЕсли;
		ДанныеXDTO.Вставить("КодТНВЭД", ДанныеКодТНВЭД);
	КонецЕсли;
	
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.НеПередаватьНоменклатурнуюГруппу Тогда
		НаименованиеГруппы = ?(ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию),
			КомпонентыОбмена.ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипНоменклатуры, "Наименование"));
		ДанныеXDTO.Вставить("ГруппаАналитическогоУчета", Новый Структура("Наименование", НаименованиеГруппы));
	КонецЕсли;
	
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД Тогда
		ДанныеXDTO.Вставить("ПрослеживаемыйТовар", Ложь);
	КонецЕсли;
	
	// Проверим есть ли по данному производителю контрагент и заполним его для передачи, чтоб сопоставление было корректно
	Если ЗначениеЗаполнено(ДанныеИБ.Производитель) Тогда
		НаименованиеПроизводителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Производитель, "Наименование");
		КонтрагентПроизводитель = КонтрагентПоНаименованию(НаименованиеПроизводителя, Ложь);
		Если КонтрагентПроизводитель <> Неопределено Тогда
			 ДанныеXDTO.Вставить(
			 	"Производитель",
			 	 Новый Структура("Значение, ИмяПКО", КонтрагентПроизводитель, "Справочник_Контрагенты_Отправка"));
		Иначе
			ДанныеXDTO.Вставить(
			 	"Производитель",
			 	 Новый Структура("Значение, ИмяПКО", ДанныеИБ.Производитель, "Справочник_Производители_Отправка"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                    "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                   "ОГРН");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет", "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Префикс",                "Префикс");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                 "ГоловнаяОрганизация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ФормаСобственности",     "ЮридическоеФизическоеЛицо", , "Перечисление_ФизическоеЮридическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Патенты
Процедура ДобавитьПКО_Справочник_Патенты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Патенты";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Патенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Патенты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",                          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДатаВыдачи",                        "ДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                        "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",                     "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "КБК",                               "КБК");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОргана",               "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "КодПоОКТМО",                        "КодПоОКТМО");
	ДобавитьПКС(СвойстваШапки, "Наименование",                      "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерПатента",                      "НомерПатента");
	ДобавитьПКС(СвойстваШапки, "ПотенциальноВозможныйГодовойДоход", "ПотенциальноВозможныйГодовойДоход");

КонецПроцедуры
#КонецОбласти
#Область Справочник_ПодразделенияКомпании_Отправка
Процедура ДобавитьПКО_Справочник_ПодразделенияКомпании_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ПодразделенияКомпании_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПодразделенияКомпании;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ПодразделенияКомпании_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Организация",  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_ПодразделенияКомпании_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_ПодразделенияКомпании_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	РегистрацияПодразделенияВНалоговомОргане = Новый Структура;
	РегистрацияПодразделенияВНалоговомОргане.Вставить("КПП", ДанныеИБ.КПП);
	
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("РегистрацияПодразделенияВНалоговомОргане", РегистрацияПодразделенияВНалоговомОргане);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Производители_Отправка
Процедура ДобавитьПКО_Справочник_Производители_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Производители_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Производители;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Производители_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",            "Группа", , "Справочник_ПроизводителиГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения", "СтранаРегистрации", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "",                    "ЮридическоеФизическоеЛицо", 1, "Перечисление_ФизическоеЮридическоеЛицо");

КонецПроцедуры

Процедура ПКО_Справочник_Производители_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ФормыСобственности.ЮридическоеЛицо);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПроизводителиГруппа_Отправка
Процедура ДобавитьПКО_Справочник_ПроизводителиГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ПроизводителиГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Производители;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ПроизводителиГруппа_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыКомпании_Отправка
Процедура ДобавитьПКО_Справочник_СкладыКомпании_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СкладыКомпании_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СкладыКомпании;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СкладыКомпании_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",   "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",                "Группа", , "Справочник_СкладыКомпанииГруппа");
	ДобавитьПКС(СвойстваШапки, "ТипЦенРозничнойТорговли", "ТипЦенРозничнойТорговли", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                        "ТипСклада", 1);
	ДобавитьПКС(СвойстваШапки, "МОЛ",                     "МОЛ", 1);

КонецПроцедуры

Процедура ПКО_Справочник_СкладыКомпании_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
	
		Если ДанныеИБ.Розничный Тогда
				ДанныеXDTO.КлючевыеСвойства.Вставить("ТипСклада", "Розничный"); 
			Иначе 
				ДанныеXDTO.КлючевыеСвойства.Вставить("ТипСклада", "Оптовый");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеИБ.МОЛ) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Сотрудник = &Сотрудник";
			Запрос.УстановитьПараметр("Сотрудник", ДанныеИБ.МОЛ);
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда  
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ИмяПКО = "Справочник_КонтрагентФизЛицо_Отправка";
				ДанныеXDTO.Вставить("МОЛ", Новый Структура("Значение, ИмяПКО", Выборка.Ссылка, ИмяПКО));
			КонецЕсли;
			
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Сотрудники_Отправка
Процедура ДобавитьПКО_Справочник_Сотрудники_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Сотрудники_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Сотрудники;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Сотрудники_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения", "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "Имя",          "Имя");
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Отчество",     "Отчество");
	ДобавитьПКС(СвойстваШапки, "Пол",          "Пол", , "Перечисление_Пол");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочники_СотрудникиГруппа");
	ДобавитьПКС(СвойстваШапки, "Фамилия",      "Фамилия");
	ДобавитьПКС(СвойстваШапки, "",             "ФИО", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДанныеФИО");
	ДобавитьПКС(СвойстваТЧ, "", "Имя", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Отчество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Фамилия", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Сотрудники_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеИБ = ПолучитьСсылкуФизЛицаОтправка(ДанныеИБ.Ссылка, КомпонентыОбмена.УзелКорреспондента);
			
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО", ДанныеИБ.Фамилия + " " + ДанныеИБ.Имя + " " + ДанныеИБ.Отчество); 
	ДанныеXDTO.Вставить("ФИО", ДанныеИБ.Фамилия + " " + ДанныеИБ.Имя + " " + ДанныеИБ.Отчество);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ);
					
	ДанныеФИО = Новый ТаблицаЗначений();
	ДанныеФИО.Колонки.Добавить("Имя");
	ДанныеФИО.Колонки.Добавить("Фамилия");
	ДанныеФИО.Колонки.Добавить("Отчество");
	ДанныеФИО.Колонки.Добавить("НачалоПериода");
		
	НоваяСтрока = ДанныеФИО.Добавить();
	НоваяСтрока.Имя = ДанныеИБ.Имя;
	НоваяСтрока.Фамилия = ДанныеИБ.Фамилия;
	НоваяСтрока.Отчество = ДанныеИБ.Отчество;
	НоваяСтрока.НачалоПериода = Дата('20190724132506');
		
	ДанныеXDTO.Вставить("ДанныеФИО", ДанныеФИО);
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтавкиНДС_Отправка
Процедура ДобавитьПКО_Справочник_СтавкиНДС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтавкиНДС_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтавкиНДС;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтавкиНДС";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтавкиНДС_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Ставка", "Ставка");
	ДобавитьПКС(СвойстваШапки, "",       "ВидСтавки", 1);
	ДобавитьПКС(СвойстваШапки, "",       "НеОблагается", 1);
	ДобавитьПКС(СвойстваШапки, "",       "РасчетнаяСтавка", 1);

КонецПроцедуры

Процедура ПКО_Справочник_СтавкиНДС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидСтавки", ПолучитьВидСтавки(ДанныеИБ));
	ДанныеXDTO.КлючевыеСвойства.Вставить("НеОблагается",  ДанныеИБ = Справочники.СтавкиНДС.БезНДС);
	ДанныеXDTO.КлючевыеСвойства.Вставить("РасчетнаяСтавка",  ДанныеИБ.РасчетнаяСтавка);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтатьиДоходовИРасходов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиРасходов";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

КонецПроцедуры
#КонецОбласти
#Область Справочник_СтруктураГТД_Отправка
Процедура ДобавитьПКО_Справочник_СтруктураГТД_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтруктураГТД_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НомерГТД";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтранаВвозаНеРФ", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "", "ЯвляетсяРНПТ", 1);

КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ТипыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ТипыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ТипыНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры", "ТипНоменклатуры", , "Перечисление_ВидыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "Наименование", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ТипыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураТипНоменклатуры = Новый Структура();
		
	СоответствиеТипа = КомпонентыОбмена.ПараметрыКонвертации.СоответствиеТиповНоменклатуры.Найти(ДанныеИБ.Ссылка, "ТипНоменклатуры");
	
	Если СтекВыгрузки.Количество() > 1 Тогда 
		Если СоответствиеТипа <> Неопределено Тогда 
			ДанныеXDTO.Вставить("Наименование", СоответствиеТипа.НаименованиеВидаНоменклатуры);
		Иначе 
			СтруктураТипНоменклатуры = ПолучитьСсылкуВидаНоменклатуры(ДанныеXDTO.ТипНоменклатуры);
			ДанныеXDTO.Вставить("Наименование", СтруктураТипНоменклатуры.Наименование); 	
			ДанныеXDTO.Вставить("Ссылка", СтруктураТипНоменклатуры.Ссылка);
		КонецЕсли;
		Возврат; 
				
	КонецЕсли;
		
	Если СоответствиеТипа <> Неопределено Тогда 
		ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", СоответствиеТипа.НаименованиеВидаНоменклатуры);
	Иначе		
		ТипНоменклатурыКлюч = ДанныеXDTO.КлючевыеСвойства.ТипНоменклатуры; 
		СтруктураТипНоменклатуры = ПолучитьСсылкуВидаНоменклатуры(ТипНоменклатурыКлюч);
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", СтруктураТипНоменклатуры.Ссылка);
		ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", СтруктураТипНоменклатуры.Наименование);
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Цеха_Отправка
Процедура ДобавитьПКО_Справочник_Цеха_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Цеха_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Цеха;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Цеха_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_ПодразделенияКомпании_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                "Группа", , "Справочник_ЦехаГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ТипСклада", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Цеха_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Тип склада
	ДанныеXDTO.КлючевыеСвойства.Вставить("ТипСклада", "Оптовый");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЦехаГруппа_Отправка
Процедура ДобавитьПКО_Справочник_ЦехаГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЦехаГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СкладыГруппа";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ЦехаГруппа_Отправка");

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ПБДСВзносНаличными_Получение
Процедура ДобавитьПКО_Документ_ПБДСВзносНаличными_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСВзносНаличными_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСВзносНаличными";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",        "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",             "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                   "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",      "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",            "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",         "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаПриход",   "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",            "", 1);
	ДобавитьПКС(СвойстваШапки, "Касса",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",  "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",               "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет", "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособЗачетаАвансов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПриход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
			Возврат;
		КонецЕсли;
								
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиИзКассы; 
		ПолученныеДанные.Касса = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
	
									
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
					
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли; 
																		
		Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
			ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
		Иначе
			ДатаВходящая = Дата(1, 1, 1);
		КонецЕсли;
					
		Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
			НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
		Иначе
			НомерВходящегоДокумента = "";
		КонецЕсли;
					
		Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
			НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
		Иначе
			НазначениеПлатежа = "";
		КонецЕсли;
									
		МассивСтрокСостава = Новый Массив;
					
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
				
		СтруктураДанныхСтроки = Новый Структура();
							
		СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
		СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
		СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая); 
		СтруктураДанныхСтроки.Вставить("СуммаПриход", ДанныеXDTO.Сумма); 
		СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
		СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
						
		МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
				
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Взнос наличными в кассу'"));
		
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
		
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
		
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("СуммаПриход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
		
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
		
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетОтправитель", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                 "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",              "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",              "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",         "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаПриход",      "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",     "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет",    "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособЗачетаАвансов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПриход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
			Возврат;
		КонецЕсли;
							
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводСДругогоСчетаОрганизации;
									
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
					
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли; 
					
		Если ДанныеXDTO.Свойство("ПлатежноеПоручение") Тогда
			УИД = Новый УникальныйИдентификатор(ДанныеXDTO.ПлатежноеПоручение.Ссылка.Значение);
			ПлатежноеПоручение = Документы.ПлатежноеПоручение.ПолучитьСсылку(УИД);
			Если СсылкаСуществует(ПлатежноеПоручение) Тогда
				ПолученныеДанные.ПлатежноеПоручениеОснование = ПлатежноеПоручение;
			КонецЕсли;
		КонецЕсли;
					
										
		Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
			ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
		Иначе
			ДатаВходящая = Дата(1, 1, 1);
		КонецЕсли;
					
		Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
			НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
		Иначе
			НомерВходящегоДокумента = "";
		КонецЕсли;
					
		Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
			НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
		Иначе
			НазначениеПлатежа = "";
		КонецЕсли;
									
		МассивСтрокСостава = Новый Массив;
					
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
				
		СтруктураДанныхСтроки = Новый Структура();
							
		СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
		СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
		СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
		СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
		СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
		СтруктураДанныхСтроки.Вставить("СуммаПриход", ДанныеXDTO.Сумма);
		МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
				
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
		СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Перевод между счетами'"));
		
		Если ДанныеИБ = Неопределено Тогда
			ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
			Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
				ПолученныеДанные = Неопределено;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
			Возврат;
		КонецЕсли;
		
		// Заменяем свойства, которые получили из XDTO
		МассивИсключений = Новый Массив;
		МассивИсключений.Добавить("РегламентированныйУчет");
		
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Восстанавливаем "затертые" данные
		// Состав
		КолонкиДляВключения = Новый Массив;
		КолонкиДляВключения.Добавить("СуммаПриход");
		КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
		КолонкиДляВключения.Добавить("СтавкаНДС");
		КолонкиДляВключения.Добавить("СуммаНДС");
		КолонкиДляВключения.Добавить("ВхДокДата");
		КолонкиДляВключения.Добавить("ВхДокНомер");
		КолонкиДляВключения.Добавить("НазначениеПлатежа");
		
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Состав,
			ДанныеИБ.Состав,
			КолонкиДляВключения);
		ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
		
		ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",        "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",             "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                   "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",             "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",      "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",            "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",         "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаПриход",   "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаУслуг",             "СуммаКомиссияБанка");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",  "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",               "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет", "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПриход",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаУслуг",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
			Возврат;
		КонецЕсли;
		
		ТекПКО = "Документ.ПБДСПоПлатежнымКартам";
		СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
			И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
			И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
		|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
		|ИЗ
		|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
		|ГДЕ
		|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
		
		ИдентификаторОбъекта = ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение;
		Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
			
			РегСокр = РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов;
			РасшифровкаПлатежа =  ДанныеXDTO.РасшифровкаПлатежа;
			
			ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект(); 
					
			СоставВыписки = ДокументВыписки.ЭтотОбъект.Состав.Выгрузить(); 
			СоставВыписки.Колонки.Добавить("Идентификатор");
			Для Каждого Строка ИЗ СоставВыписки Цикл
				Строка.Идентификатор = РегСокр.ПолучитьИдентификаторСтроки(
					ДокументВыписки.Ссылка,
					ТекПКО,
					Строка.НомерСтроки
				);
			КонецЦикла;
			
			Отбор = Новый Структура("Идентификатор", ИдентификаторОбъекта);
			СтрокиОтправленные = СоставВыписки.НайтиСтроки(Отбор); 
			
			КоличествоСтрокРасшифровка = РасшифровкаПлатежа.Количество(); 
			
			СтрокиКУдалению = Новый Массив(); 
	
			//  Определим определим таблицу в которой больше строк с переданным идентификатором
			Если СтрокиОтправленные.Количество() >= КоличествоСтрокРасшифровка Тогда 
				НомерСтроки = 0;
	           	
	      		Для Каждого СтрокаВыписки Из СоставВыписки Цикл  
					Если СтрокаВыписки.Идентификатор = ИдентификаторОбъекта Тогда
						Если НомерСтроки < КоличествоСтрокРасшифровка Тогда 
							
							ОбработатьСтрокуВыпискиРасчетыСКонтрагентами(
								СтрокаВыписки, 
								РасшифровкаПлатежа[НомерСтроки],
								КомпонентыОбмена,
								ДанныеXDTO
							);
													
							СтрокаВыписки.СуммаПриход   = РасшифровкаПлатежа[НомерСтроки].Сумма; 
							
											
							НомерСтроки = НомерСтроки + 1;
						Иначе
							СтрокиКУдалению.Добавить(СтрокаВыписки); 	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе  
				КоличествоСтрокСостав = СоставВыписки.Количество(); 
				
				РасшифровкаПлатежа.Колонки.Добавить("НомерСтрокиВыписки");
				РасшифровкаПлатежа.ЗаполнитьЗначения(КоличествоСтрокСостав + 1, "НомерСтрокиВыписки");
				
				Номер = 0;
				Для Каждого Строка ИЗ ВыборкаДетальныеЗаписи Цикл 
					Если Номер < КоличествоСтрокРасшифровка Тогда
						РасшифровкаПлатежа[Номер].НомерСтрокиВыписки = Строка.НомерСтрокиВыписки; 
						Номер = Номер + 1; 
					Иначе 
						Прервать;
					КонецЕСли;
					
				КонецЦикла;
	
				Для Каждого Строка Из РасшифровкаПлатежа Цикл 
					
					Если Строка.НомерСтрокиВыписки <= КоличествоСтрокСостав Тогда  
						СтрокаВыписки = СоставВыписки[Строка.НомерСтрокиВыписки - 1];
					Иначе 
						СтрокаВыписки = СоставВыписки.Добавить();
						СтрокаВыписки.НомерСтроки = СоставВыписки.Количество();
						РегСокр.ОбработкаСтрокиВыписки(
							ДокументВыписки.Ссылка,
							ТекПКО,
							СтрокаВыписки.НомерСтроки,
							ИдентификаторОбъекта
						); 
						СтрокаВыписки.Идентификатор = ИдентификаторОбъекта;	
					КонецЕсли;
							 
					ОбработатьСтрокуВыпискиРасчетыСКонтрагентами(
						СтрокаВыписки, 
						Строка,
						КомпонентыОбмена,
						ДанныеXDTO
					);
				
					СтрокаВыписки.СуммаПриход = Строка.Сумма;
											
				КонецЦикла;
			КонецЕсли;
			Для Каждого Элемент Из СтрокиКУдалению Цикл
				РегСокр.УдалитьЗаписи(ДокументВыписки.Ссылка, ТекПКО, Элемент.НомерСтроки);
				СоставВыписки.Удалить(Элемент);
			
			КонецЦикла;   
			
			НулевыеСтроки = СоставВыписки.НайтиСтроки(Новый Структура("Идентификатор",""));
			Для Каждого СтрокаТаблицы Из НулевыеСтроки Цикл
				СоставВыписки.Удалить(СтрокаТаблицы)
			КонецЦикла;  
			
			СоставВыписки[0].СуммаУслуг	= ДанныеXDTO.СуммаКомиссияБанка;
			СоставВыписки.Колонки.Удалить("Идентификатор");
			
			ДокументВыписки.ЭтотОбъект.Состав.Очистить();
			ДокументВыписки.ЭтотОбъект.Состав.Загрузить(СоставВыписки);  
			ПосчитатьИтогиВыписки(ДокументВыписки.ЭтотОбъект);
			ДокументВыписки.Записать();
			Возврат;	
		Иначе
			
			ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПоступленияПоПлатежнымКартам;
						
			// Для загруженных из БП документов признак устанавливаем всегда
			ПолученныеДанные.РегламентированныйУчет = Истина;
			
			// Заполним подразделение по умолчанию
			Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
				ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
			КонецЕсли; 
			
			// Заполним ТЧ Состав		
			Если СоставЗаполнен Тогда
				
				ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
				КонтрагентСсылка = 
					ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена,
					ДанныеXDTO.Контрагент,
					ПКО_Контрагент,
					"ПолучитьСсылку").Ссылка;
			
				Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
					ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
				Иначе
					ДатаВходящая = Дата(1, 1, 1);
				КонецЕсли;
				
				Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
					НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
				Иначе
					НомерВходящегоДокумента = "";
				КонецЕсли;
				
				Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
					НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
				Иначе
					НазначениеПлатежа = "";
				КонецЕсли; 
		
				// Состав платежа
				ПравилаЗаполнения = Новый Соответствие;
				ПравилаЗаполнения.Вставить("Договор","ДоговорВзаиморасчетов");
				ПравилаЗаполнения.Вставить("Сумма","СуммаПриход");
				ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
				ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
				ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
							
				МассивСтрокСостава = Новый Массив;
				
				Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
					СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
					
					// Контрагент
					СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);
					
					// Курс взаиморасчетов	
					Кратность = Строка.КратностьВзаиморасчетов;
					КурсВалютыВзаиморасчетов = Строка.КурсВзаиморасчетов / ?(Кратность = 0, 1, Кратность);
					СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", КурсВалютыВзаиморасчетов);
					Если ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СтавкаНДС") <> Неопределено
						И ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда	
						СтавкаНДССтроки(СтруктураДанныхСтроки, КомпонентыОбмена); 
					Иначе 
						СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);	
					КонецЕсли; 
							
					СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
					СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
					СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа); 
					
					МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
				КонецЦикла;
				
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
						
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Поступление на расчетный счет'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Запретим перезаполнять документ
	Если КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке.Найти("Выписка") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаПриход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	ПоРасчетнымДокументам = РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
		ДанныеИБ.ДоговорВзаиморасчетов);
	СпособЗачетаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеИБ.ДоговорВзаиморасчетов, "СпособЗачетаАвансов");
	
	Если СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
		ТекущаяСтрока.СпособЗачетаАвансов = СпособЗачетаОплаты;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",        "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",             "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                   "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",             "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",      "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",            "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",         "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаПриход",   "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",  "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",               "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет", "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПриход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
			Возврат;
		КонецЕсли;
		
		СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
			И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
			И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
			
		ТекПКО = "Документ.ПБДСПрочееПоступление";		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
		|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
		|ИЗ
		|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
		|ГДЕ
		|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
		
		ИдентификаторОбъекта = ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение;
		Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
			
			РегСокр = РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов;
			РасшифровкаПлатежа =  ДанныеXDTO.РасшифровкаПлатежа;
			
			ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект(); 
					
			СоставВыписки = ДокументВыписки.ЭтотОбъект.Состав.Выгрузить(); 
			СоставВыписки.Колонки.Добавить("Идентификатор");
			Для Каждого Строка ИЗ СоставВыписки Цикл
				Строка.Идентификатор = РегСокр.ПолучитьИдентификаторСтроки(
					ДокументВыписки.Ссылка,
					ТекПКО,
					Строка.НомерСтроки
				);
			КонецЦикла;
			
			Отбор = Новый Структура("Идентификатор", ИдентификаторОбъекта);
			СтрокиОтправленные = СоставВыписки.НайтиСтроки(Отбор); 
			
			КоличествоСтрокРасшифровка = РасшифровкаПлатежа.Количество(); 
			СтрокиКУдалению = Новый Массив(); 
	
			//  Определим определим таблицу в которой больше строк с переданным идентификатором
			Если СтрокиОтправленные.Количество() >= КоличествоСтрокРасшифровка Тогда 
				НомерСтроки = 0;
	           	
				Для Каждого СтрокаВыписки Из СоставВыписки Цикл  
					Если СтрокаВыписки.Идентификатор = ИдентификаторОбъекта Тогда
						Если НомерСтроки < КоличествоСтрокРасшифровка Тогда 
							Если ДанныеXDTO.Свойство("Контрагент") Тогда
	
								ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
								КонтрагентСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
									КомпонентыОбмена,
									ДанныеXDTO.Контрагент,
									ПКО_Контрагент,
									"ПолучитьСсылку").Ссылка; 
							КонецЕсли;
												
							Если РасшифровкаПлатежа[НомерСтроки].СтатьяДДС <> Неопределено Тогда
								ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
								СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
								КомпонентыОбмена,
								РасшифровкаПлатежа[НомерСтроки].СтатьяДДС,
								ПКО_СтатьяДДССсылка,
								"ПолучитьСсылку").Ссылка;
								СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
							КонецЕсли;
							
							СтрокаВыписки.СуммаПриход 			= РасшифровкаПлатежа[НомерСтроки].Сумма;
							СтрокаВыписки.Контрагент 			= КонтрагентСсылка;
							
							СтрокаВыписки.СуммаНДС = 0;
							СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
							НомерСтроки = НомерСтроки + 1;
						Иначе
							СтрокиКУдалению.Добавить(СтрокаВыписки); 	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе  
				КоличествоСтрокСостав = СоставВыписки.Количество(); 
				
				РасшифровкаПлатежа.Колонки.Добавить("НомерСтрокиВыписки");
				РасшифровкаПлатежа.ЗаполнитьЗначения(КоличествоСтрокСостав + 1, "НомерСтрокиВыписки");
				
				Номер = 0;
				Для Каждого Строка ИЗ ВыборкаДетальныеЗаписи Цикл 
					Если Номер < КоличествоСтрокРасшифровка Тогда
						РасшифровкаПлатежа[Номер].НомерСтрокиВыписки = Строка.НомерСтрокиВыписки; 
						Номер = Номер + 1; 
					Иначе 
						Прервать;
					КонецЕСли;
					
				КонецЦикла;
	
				Для Каждого Строка Из РасшифровкаПлатежа Цикл 
					
					Если Строка.НомерСтрокиВыписки <= КоличествоСтрокСостав Тогда  
						СтрокаВыписки = СоставВыписки[Строка.НомерСтрокиВыписки - 1];
					Иначе 
						СтрокаВыписки = СоставВыписки.Добавить();
						СтрокаВыписки.НомерСтроки = СоставВыписки.Количество();
						РегСокр.ОбработкаСтрокиВыписки(
							ДокументВыписки.Ссылка,
							ТекПКО,
							СтрокаВыписки.НомерСтроки,
							ИдентификаторОбъекта
						); 
						СтрокаВыписки.Идентификатор = ИдентификаторОбъекта;	
					КонецЕсли;
					
				Если ДанныеXDTO.Свойство("Контрагент") Тогда
					ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
					КонтрагентСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
						КомпонентыОбмена,
						ДанныеXDTO.Контрагент,
						ПКО_Контрагент,
						"ПолучитьСсылку").Ссылка; 
						
					СтрокаВыписки.Контрагент 			= КонтрагентСсылка; 
					
				КонецЕсли;
	
												
					Если Строка.СтатьяДДС <> Неопределено Тогда
						ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
						СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
							КомпонентыОбмена,
							Строка.СтатьяДДС,
							ПКО_СтатьяДДССсылка,
							"ПолучитьСсылку").Ссылка;
							СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
					КонецЕсли;
							
					СтрокаВыписки.СуммаПриход 			= Строка.Сумма;
												
					СтрокаВыписки.СуммаНДС = 0;
					СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
				КонецЦикла;
			КонецЕсли;
			Для Каждого Элемент Из СтрокиКУдалению Цикл
				
				РегСокр.УдалитьЗаписи(ДокументВыписки.Ссылка, ТекПКО, Элемент.НомерСтроки);
				СоставВыписки.Удалить(Элемент);
			
			КонецЦикла;   
			
			НулевыеСтроки = СоставВыписки.НайтиСтроки(Новый Структура("Идентификатор",""));
			Для Каждого СтрокаТаблицы Из НулевыеСтроки Цикл
				СоставВыписки.Удалить(СтрокаТаблицы)
			КонецЦикла; 
			СоставВыписки.Колонки.Удалить("Идентификатор");		
			ДокументВыписки.ЭтотОбъект.Состав.Очистить();
			ДокументВыписки.ЭтотОбъект.Состав.Загрузить(СоставВыписки);
			
			ПосчитатьИтогиВыписки(ДокументВыписки.ЭтотОбъект);
			ДокументВыписки.Записать();
			Возврат;
	
		Иначе
					
			ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочееПоступление;
			
			// Для загруженных из БП документов признак устанавливаем всегда
			ПолученныеДанные.РегламентированныйУчет = Истина;
			
			// Заполним подразделение по умолчанию
			Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
				ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
			КонецЕсли; 
					
			// Заполним ТЧ Состав		
			Если СоставЗаполнен Тогда
				
				Если ДанныеXDTO.Свойство("Контрагент") Тогда
	
					ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
					КонтрагентСсылка = 
						ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
							КомпонентыОбмена,
							ДанныеXDTO.Контрагент,
							ПКО_Контрагент,
							"ПолучитьСсылку").Ссылка; 
				КонецЕсли;
						
				Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
					ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
				Иначе
					ДатаВходящая = Дата(1, 1, 1);
				КонецЕсли;
				
				Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
					НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
				Иначе
					НомерВходящегоДокумента = "";
				КонецЕсли;
				
				Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
					НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
				Иначе
					НазначениеПлатежа = "";
				КонецЕсли;
				
				// Состав платежа
				ПравилаЗаполнения = Новый Соответствие;
				ПравилаЗаполнения.Вставить("Договор","ДоговорВзаиморасчетов");
				ПравилаЗаполнения.Вставить("Сумма","СуммаПриход");
				ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
				ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
				ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
			
				МассивСтрокСостава = Новый Массив;
				
				Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
					СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
					
					// Контрагент
					СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);
					
					СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
					СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
					
					СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
					СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
					СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
						
					МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
				КонецЦикла;
					
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
						
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Поступление на расчетный счет'"));
	
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Запретим перезаполнять документ
	Если КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке.Найти("Выписка") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаПриход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",        "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",             "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                   "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",             "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",      "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",            "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",         "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаПриход",   "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",  "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",               "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет", "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПриход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
	|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
	|ИЗ
	|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
	|ГДЕ
	|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
	
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
		
		ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект();
		
		СтрокаВыписки = ДокументВыписки.ЭтотОбъект.Состав[ВыборкаДетальныеЗаписи[0].НомерСтрокиВыписки - 1];
		
		ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
		КонтрагентСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ДанныеXDTO.Контрагент,
			ПКО_Контрагент,
			"ПолучитьСсылку").Ссылка;
		
		Если ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС <> Неопределено Тогда
			ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
			СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ПКО_СтатьяДДССсылка,
				"ПолучитьСсылку").Ссылка;
			
			СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
		КонецЕсли;
		
		ДокументВыписки.СуммаДокументаПриход = ДокументВыписки.СуммаДокументаПриход - СтрокаВыписки.СуммаПриход + ДанныеXDTO.Сумма;
		СтрокаВыписки.СуммаПриход 			= ДанныеXDTO.Сумма; 
		
		СтрокаВыписки.Контрагент 			= КонтрагентСсылка;
	
		СтрокаВыписки.СуммаНДС = 0;
		СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			
		ДокументВыписки.Записать();
		Возврат;
	Иначе
		
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочиеДоходы;
		
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
		
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли; 
		
		// Заполним ТЧ Состав
		Если СоставЗаполнен Тогда
			
			ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
			КонтрагентСсылка = 
				ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.Контрагент,
				ПКО_Контрагент,
				"ПолучитьСсылку").Ссылка;
			
			Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
				ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
			Иначе
				ДатаВходящая = Дата(1, 1, 1);
			КонецЕсли;
			
			Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
				НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
			Иначе
				НомерВходящегоДокумента = "";
			КонецЕсли;
			
			Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
				НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
			Иначе
				НазначениеПлатежа = "";
			КонецЕсли;
			
			// Состав платежа
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Договор","ДоговорВзаиморасчетов");
			ПравилаЗаполнения.Вставить("Сумма","СуммаПриход");
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
			
			МассивСтрокСостава = Новый Массив;
			
			Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				
				// Контрагент
				СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);
				
				СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
				
				СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
				СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
				СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
						
				МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
			
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Поступление на расчетный счет'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Запретим перезаполнять документ
	Если КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке.Найти("Выписка") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаПриход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",        "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",             "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                   "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",             "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",      "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",            "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",         "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаПриход",   "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                       "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",  "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",               "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет", "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сделка",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособЗачетаАвансов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПриход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
		
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	ТекПКО = "Документ.ПБДСРасчетыСКонтрагентами"; 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
		|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки,
		|	ИдентификаторыВыгружаемыхОбъектов.ИмяФорматаОбъекта КАК ИмяФорматаОбъекта
		|ИЗ
		|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
		|ГДЕ
		|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта
		|	И ИдентификаторыВыгружаемыхОбъектов.ИмяФорматаОбъекта = &ТекПКО
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиВыписки";
		
	ИдентификаторОбъекта = ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение;
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
	Запрос.УстановитьПараметр("ТекПКО", ТекПКО); 
		
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
		
	Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
			
		РегСокр = РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов;
		РасшифровкаПлатежа =  ДанныеXDTO.РасшифровкаПлатежа;
			
		ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект(); 
					
		СоставВыписки = ДокументВыписки.ЭтотОбъект.Состав.Выгрузить(); 
		СоставВыписки.Колонки.Добавить("Идентификатор");
		Для Каждого Строка ИЗ СоставВыписки Цикл
			Строка.Идентификатор = РегСокр.ПолучитьИдентификаторСтроки(
				ДокументВыписки.Ссылка,
				ТекПКО,
				Строка.НомерСтроки
			);
		КонецЦикла;
			
		Отбор = Новый Структура("Идентификатор", ИдентификаторОбъекта);
		СтрокиОтправленные = СоставВыписки.НайтиСтроки(Отбор); 
		
		КоличествоСтрокРасшифровка = РасшифровкаПлатежа.Количество(); 
			
		СтрокиКУдалению = Новый Массив(); 
	
		//  Определим определим таблицу в которой больше строк с переданным идентификатором
		Если СтрокиОтправленные.Количество() >= КоличествоСтрокРасшифровка Тогда 
			НомерСтроки = 0;
	     
			Для Каждого СтрокаВыписки Из СоставВыписки Цикл  
				Если СтрокаВыписки.Идентификатор = ИдентификаторОбъекта Тогда
					Если НомерСтроки < КоличествоСтрокРасшифровка Тогда 
							
						ОбработатьСтрокуВыпискиРасчетыСКонтрагентами(
							СтрокаВыписки, 
							РасшифровкаПлатежа[НомерСтроки],
							КомпонентыОбмена,
							ДанныеXDTO
							);
								
						СтрокаВыписки.СуммаПриход 			= РасшифровкаПлатежа[НомерСтроки].Сумма;					
						НомерСтроки = НомерСтроки + 1;
					Иначе
						СтрокиКУдалению.Добавить(СтрокаВыписки); 	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе  
				
			КоличествоСтрокСостав = СоставВыписки.Количество(); 
				
			РасшифровкаПлатежа.Колонки.Добавить("НомерСтрокиВыписки");
			РасшифровкаПлатежа.ЗаполнитьЗначения(КоличествоСтрокСостав + 1, "НомерСтрокиВыписки");
				
			Номер = 0;
			Для Каждого Строка ИЗ ВыборкаДетальныеЗаписи Цикл 
				Если Номер < КоличествоСтрокРасшифровка Тогда
					РасшифровкаПлатежа[Номер].НомерСтрокиВыписки = Строка.НомерСтрокиВыписки; 
					Номер = Номер + 1; 
				Иначе 
					Прервать;
				КонецЕсли;
					
			КонецЦикла;
	
			Для Каждого Строка Из РасшифровкаПлатежа Цикл 
					
				Если Строка.НомерСтрокиВыписки <= КоличествоСтрокСостав Тогда  
					СтрокаВыписки = СоставВыписки[Строка.НомерСтрокиВыписки - 1];
				Иначе 
					СтрокаВыписки = СоставВыписки.Добавить();
					СтрокаВыписки.НомерСтроки = СоставВыписки.Количество();
					РегСокр.ОбработкаСтрокиВыписки(
						ДокументВыписки.Ссылка,
						ТекПКО,
						СтрокаВыписки.НомерСтроки,
						ИдентификаторОбъекта
					); 
					СтрокаВыписки.Идентификатор = ИдентификаторОбъекта;	
				КонецЕсли;
							 
				ОбработатьСтрокуВыпискиРасчетыСКонтрагентами(
					СтрокаВыписки, 
					Строка,
					КомпонентыОбмена,
					ДанныеXDTO
				);
				
				СтрокаВыписки.СуммаПриход 			= Строка.Сумма;
				Если Строка.СпособПогашенияЗадолженности <> Неопределено Тогда
					СтрокаВыписки.СпособЗачетаАвансов	= СпособЗачетаАвансов(Строка.СпособПогашенияЗадолженности);	
				КонецЕсли;		
			КонецЦикла;
			КонецЕсли;
			Для Каждого Элемент Из СтрокиКУдалению Цикл
				
				РегСокр.УдалитьЗаписи(ДокументВыписки.Ссылка, ТекПКО, Элемент.НомерСтроки);
				СоставВыписки.Удалить(Элемент);
			
			КонецЦикла;   
			
			НулевыеСтроки = СоставВыписки.НайтиСтроки(Новый Структура("Идентификатор",""));
			Для Каждого СтрокаТаблицы Из НулевыеСтроки Цикл
				СоставВыписки.Удалить(СтрокаТаблицы)
			КонецЦикла; 
			СоставВыписки.Колонки.Удалить("Идентификатор");		
			ДокументВыписки.ЭтотОбъект.Состав.Очистить();
			ДокументВыписки.ЭтотОбъект.Состав.Загрузить(СоставВыписки);
			
			ПосчитатьИтогиВыписки(ДокументВыписки.ЭтотОбъект);
			ДокументВыписки.Записать();
			Возврат;
		Иначе
			ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
			Если ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПоступлениеОтПокупателя;
			ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "СПостащиком" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОтПоставщика;
			ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "КредитыИЗаймы" Тогда 
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка;
			ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "КредитБанка" ИЛИ 
					ДанныеXDTO.ВидРасчетов.Значение = "КредитКонтрагента" ИЛИ  
					ДанныеXDTO.ВидРасчетов.Значение = "ЗаймКонтрагенту" Тогда 
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка;	
			ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "Прочее" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочееПоступление;
			КонецЕсли;
			
			// Для загруженных из БП документов признак устанавливаем всегда
			ПолученныеДанные.РегламентированныйУчет = Истина;
			
			// Заполним подразделение по умолчанию
			Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
				ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
			КонецЕсли; 
			
			// Заполним ТЧ Состав		
			Если СоставЗаполнен Тогда
				
				ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
				КонтрагентСсылка = 
					ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена,
					ДанныеXDTO.Контрагент,
					ПКО_Контрагент,
					"ПолучитьСсылку").Ссылка; 
					
				ЕстьПатент = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("Патент") <> Неопределено И
						ЗначениеЗаполнено (ДанныеXDTO.РасшифровкаПлатежа[0].Патент);
						
				Если ЕстьПатент Тогда
					
					ПКО_Патент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Патенты_Получение");
					ПолученныеДанные.Патент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
						КомпонентыОбмена,
						ДанныеXDTO.РасшифровкаПлатежа[0].Патент,
						ПКО_Патент,
						"ПолучитьСсылку").Ссылка; 
						
				КонецЕсли;  
	
				
				Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
					ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
				Иначе
					ДатаВходящая = Дата(1, 1, 1);
				КонецЕсли;
				
				Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
					НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
				Иначе
					НомерВходящегоДокумента = "";
				КонецЕсли;
				
				Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
					НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
				Иначе
					НазначениеПлатежа = "";
				КонецЕсли;
				
				// Состав платежа
				ПравилаЗаполнения = Новый Соответствие;
				ПравилаЗаполнения.Вставить("Договор","ДоговорВзаиморасчетов");
				ПравилаЗаполнения.Вставить("Сумма","СуммаПриход");
				ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
				ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
				ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
				
				МассивСтрокСостава = Новый Массив;
				
				ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
				Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
					СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
					
					// Контрагент
					СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);
					
					// Курс взаиморасчетов	
					Кратность = Строка.КратностьВзаиморасчетов;
					КурсВалютыВзаиморасчетов = Строка.КурсВзаиморасчетов / ?(Кратность = 0, 1, Кратность);
					СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", КурсВалютыВзаиморасчетов);
					
					Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
						СтавкаНДССтроки(СтруктураДанныхСтроки, КомпонентыОбмена);
					КонецЕсли;
					
					Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
						ЗаполнитьДокументСделки(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
					КонецЕсли;
					
					// Получим сделку из счета на оплату
					Если НЕ СтруктураДанныхСтроки.Свойство("Сделка") Тогда
						
						Если Строка.Заказ <> Неопределено И Строка.Заказ.ТипЗначения = "ЗаказКлиента" Тогда
							УИД = Новый УникальныйИдентификатор(Строка.Заказ.Ссылка.Значение);
							СчетНаОплату = Документы.СчетНаОплату.ПолучитьСсылку(УИД);
							Если СсылкаСуществует(СчетНаОплату) Тогда
								Сделка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетНаОплату, "ДокументОснование");
							Иначе
								СчетНаОплатуЗаАвтомобили = Документы.СчетНаОплатуЗаАвтомобили.ПолучитьСсылку(УИД);
								Если СсылкаСуществует(СчетНаОплатуЗаАвтомобили) Тогда
									Сделка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетНаОплатуЗаАвтомобили, "ДокументОснование");
								КонецЕсли;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(Сделка) Тогда
								СтруктураДанныхСтроки.Вставить("Сделка", Сделка);
							Иначе
								СтруктураДанныхСтроки.Вставить("Сделка", СчетНаОплату);	
							КонецЕсли; 				
						КонецЕсли;
						
					КонецЕсли;
					
					СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
					СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
					СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
					Если Строка.СпособПогашенияЗадолженности <> Неопределено Тогда
						СтруктураДанныхСтроки.Вставить("СпособЗачетаАвансов", СпособЗачетаАвансов(Строка.СпособПогашенияЗадолженности));
					КонецЕсли;
					
					МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
				КонецЦикла;
				
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
				
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Поступление на расчетный счет'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Запретим перезаполнять документ
	Если КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке.Найти("Выписка") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаПриход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",             "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",            "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",     "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаПриход",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Сотрудник", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",             "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",             "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПриход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
		|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
		|ИЗ
		|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
		|ГДЕ
		|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
		
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение);
		
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
		
	Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
			
		ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект();
		
		СтрокаВыписки = ДокументВыписки.ЭтотОбъект.Состав[ВыборкаДетальныеЗаписи[0].НомерСтрокиВыписки - 1];
			
		КонтрагентСсылка = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.Сотрудник, КомпонентыОбмена);   
			
		ДокументВыписки.Контрагент = КонтрагентСсылка;
			
		Если ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС <> Неопределено Тогда
			ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
			СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ПКО_СтатьяДДССсылка,
				"ПолучитьСсылку").Ссылка;                            
				
			СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
		КонецЕсли;
			
		ДокументВыписки.СуммаДокументаПриход = ДокументВыписки.СуммаДокументаПриход - СтрокаВыписки.СуммаПриход + ДанныеXDTO.Сумма;
		СтрокаВыписки.СуммаПриход 			= ДанныеXDTO.Сумма; 
		СтрокаВыписки.Контрагент 			= КонтрагентСсылка;
		СтрокаВыписки.СуммаНДС = 0;
		СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			
		ДокументВыписки.Записать();	
		Возврат;
	Иначе
			
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
		
		Если ДанныеXDTO.ВидРасчетов.Значение = "Подотчет" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратПодотчетныхСумм; 
				
			ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение  = "Займы" Тогда 
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратЗаймаСотрудником;   
				
		КонецЕсли;
		
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
			
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли; 
			
		// Заполним ТЧ Состав		
		Если СоставЗаполнен Тогда
				
			КонтрагентСсылка = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.Сотрудник, КомпонентыОбмена);   
			ПолученныеДанные.Контрагент = КонтрагентСсылка;
				
			Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
				ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
			Иначе
				ДатаВходящая = Дата(1, 1, 1);
			КонецЕсли;
				
			Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
				НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
			Иначе
				НомерВходящегоДокумента = "";
			КонецЕсли;
				
			Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
				НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
			Иначе
				НазначениеПлатежа = "";
			КонецЕсли;
			
			// Состав платежа
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Сумма","СуммаПриход");
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
			
			МассивСтрокСостава = Новый Массив;
			
			ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
			Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				
				// Контрагент
				СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);
				
				// Курс взаиморасчетов	
				СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
				СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
				СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
				СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
							
				МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
			
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Возврат на расчетный счет от подотчетника'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Запретим перезаполнять документ
	Если КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке.Найти("Выписка") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаПриход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                 "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",     "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",                "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОТ",                 "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
		
	ПолученныеДанные.ХозОперация 	= Справочники.ХозОперации.ПриходныйКассовыйОрдер; 
	ПолученныеДанные.ТипРасчета 	= Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ПолученныеДанные.ВидОперации 	= Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеНаличныхВБанке;
	ПолученныеДанные.СтавкаНДС 		= Справочники.СтавкиНДС.БезНДС;
	ПолученныеДанные.СуммаНДС	 	= 0;
		
	// Для загруженных из БП документов признак устанавливаем всегда
	ПолученныеДанные.РегламентированныйУчет = Истина;
		
	// Заполним подразделение по умолчанию
	Если НЕ ДанныеXDTO.Свойство("Подразделение") Тогда    
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли;
		
	// Касса Компании заполняется всегода по умолчанию
	ПолученныеДанные.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Приходный кассовый ордер'"));
		
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Возврат;
	КонецЕсли;
		
	// Запретим перезаполнять документ
	МассивЗапрещенных = КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке;
	Если МассивЗапрещенных.Найти("ПриходныйКассовыйОрдер") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
		
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	ДанныеИБ.СтавкаНДС = ПолученныеДанные.СтавкаНДС;
	ДанныеИБ.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
	ДанныеИБ.СуммаНДС = ПолученныеДанные.СуммаНДС;
		
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОСотрудники_Получение
Процедура ДобавитьПКО_Документ_ПКОСотрудники_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОСотрудники_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОСотрудники_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОСотрудники_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОТ",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Сотрудник", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОСотрудники_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.ВидРасчетов.Значение = "Подотчет" Тогда 
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ВозвратДенежныхСредствОтПодотчетника; 
		ПолученныеДанные.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратПодотчетныхСумм;
	Иначе
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПриходныйКассовыйОрдер; 
		ПолученныеДанные.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств; 
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратЗаймаСотрудником;
	КонецЕсли;
	
	// Для загруженных из БП документов признак устанавливаем всегда
	ПолученныеДанные.РегламентированныйУчет = Истина;
	
	// Заполним подразделение по умолчанию
	Если НЕ ДанныеXDTO.Свойство("Подразделение") Тогда    
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	// Касса Компании заполняется всегода по умолчанию
	ПолученныеДанные.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
	
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
				И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
				И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	ПолученныеДанные.Контрагент = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.Сотрудник, КомпонентыОбмена);
	Если СоставЗаполнен Тогда
			
		Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда  
			ПКО_СтатьяДДС = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС");
			ПолученныеДанные.СтатьяДДС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС"),
				"ПолучитьСсылку").Ссылка;
		КонецЕсли;
					
		ПолученныеДанные.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;		
		ПолученныеДанные.СуммаДокумента = ДанныеXDTO.РасшифровкаПлатежа[0].Сумма;
		ПолученныеДанные.СуммаНДС = 0;		
		
		ДоговорВзаиморасчетов = ДанныеДоговораВзаиморасчетов(ПолученныеДанные.ДоговорВзаиморасчетов);
		Если Не ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда		
			ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОСотрудники_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Возврат денежных средств от подотчетника'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Возврат;
	КонецЕсли;
	
	// Запретим перезаполнять документ
	МассивЗапрещенных = КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке;
	Если МассивЗапрещенных.Найти("ПриходныйКассовыйОрдер") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ДанныеИБ.ДоговорВзаиморасчетов = ПолученныеДанные.ДоговорВзаиморасчетов;
	ДанныеИБ.СтатьяДДС = ПолученныеДанные.СтатьяДДС;
	ДанныеИБ.СтавкаНДС = ПолученныеДанные.СтавкаНДС;
	ДанныеИБ.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
	ДанныеИБ.СуммаНДС = ПолученныеДанные.СуммаНДС;
	
	ДанныеИБ.ДокументОснование = ПолученныеДанные.ДокументОснование;
	Если ЗначениеЗаполнено(ПолученныеДанные.Сделка) Тогда
		ДанныеИБ.Сделка = ПолученныеДанные.Сделка;
		ДанныеИБ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходныйКассовыйОрдер_Получение
Процедура ДобавитьПКО_Документ_ПриходныйКассовыйОрдер_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПриходныйКассовыйОрдер_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПриходныйКассовыйОрдер_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПриходныйКассовыйОрдер_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОТ",             "ПринятоОт");
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПриходныйКассовыйОрдер_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПриходныйКассовыйОрдер; 
	ПолученныеДанные.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств; 
	
	// Для загруженных из БП документов признак устанавливаем всегда
	ПолученныеДанные.РегламентированныйУчет = Истина;
	
	Если ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПоступлениеОтПокупателя;
	ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "СПостащиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОтПоставщика;
	ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "КредитыИЗаймы" Тогда 
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка;
	ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "Прочее" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочееПоступление;
	КонецЕсли;
	
	// Заполним подразделение по умолчанию
	Если НЕ ДанныеXDTO.Свойство("Подразделение") Тогда    
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	// Касса Компании заполняется всегода по умолчанию
	ПолученныеДанные.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
	
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	Если СоставЗаполнен Тогда
		
		Если ЗначениеЗаполнено (ДанныеXDTO.РасшифровкаПлатежа[0].Договор) Тогда
			ПКО_Договор = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДоговорыКонтрагентов_Получение");
			ПолученныеДанные.ДоговорВзаиморасчетов = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].Договор,
				ПКО_Договор,
				"ПолучитьСсылку").Ссылка; 
		КонецЕсли;  
		
		Если ЗначениеЗаполнено (ДанныеXDTO.РасшифровкаПлатежа[0].Патент) Тогда
			ПКО_Патент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Патенты_Получение");
			ПолученныеДанные.Патент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].Патент,
				ПКО_Патент,
				"ПолучитьСсылку").Ссылка; 
		КонецЕсли;  
	
		Если  ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
			ПКО_СтатьяДДС = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС");
			ПолученныеДанные.СтатьяДДС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС"),
					"ПолучитьСсылку").Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтавкаНДС) Тогда 
			СтавкаНДССтроки(ДанныеXDTO.РасшифровкаПлатежа[0],КомпонентыОбмена);	
			ПолученныеДанные.СтавкаНДС = ДанныеXDTO.РасшифровкаПлатежа[0].СтавкаНДС;
			СуммаНДС = ДанныеXDTO.РасшифровкаПлатежа[0].СуммаНДС;
		Иначе 
			
			ПолученныеДанные.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;	
			СуммаНДС = 0;
	
		КонецЕсли;	
		
		ПолученныеДанные.СуммаДокумента = ДанныеXDTO.РасшифровкаПлатежа[0].Сумма;
		ПолученныеДанные.СуммаНДС = СуммаНДС;
		
		Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].Заказ) Тогда
			УИДЗаказ = Новый УникальныйИдентификатор(ДанныеXDTO.РасшифровкаПлатежа[0].Заказ.Ссылка.Значение);
			ПолученныеДанные.ДокументОснование = Документы.СчетНаОплату.ПолучитьСсылку(УИДЗаказ);
		КонецЕсли;
		
		ВзаиморасчетыПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ПолученныеДанные.ДоговорВзаиморасчетов);
			
		Если ДанныеXDTO.РасшифровкаПлатежа[0].ДокументРасчетов <> Неопределено
			И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].Заказ) Тогда 
			ПолученныеДанные.Сделка = Документы.СчетНаОплату.ПолучитьСсылку(УИДЗаказ);
		Иначе
			ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
			Если Не ВзаиморасчетыПоРасчетнымДокументам Тогда
				ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли;
		КонецЕсли;
			
		// Заполним состав
		Если ВзаиморасчетыПоРасчетнымДокументам Тогда
				
			УсловиеПоиска = Новый Структура();
			УсловиеПоиска.Вставить("ИмяПКПД", "Перечисление_СпособыЗачетаАвансов");
			ПравилаПолученияСпособаЗачетаОплаты =
				КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.НайтиСтроки(УсловиеПоиска)[0];
				
			Для Каждого СтрокаРасшифровкиПлатежа Из ДанныеXDTO.РасшифровкаПлатежа Цикл
					
				НоваяСтрока = ПолученныеДанные.Состав.Добавить();
				СтруктураДанныхСтроки = Новый Структура();
				ЗаполнитьДокументСделки(
					СтруктураДанныхСтроки,
					СтрокаРасшифровкиПлатежа.ДокументРасчетов,
					"ДокументРасчетов");
				НоваяСтрока.ДокументРасчетов = ПолучитьЗначениеПараметраСтруктуры(СтруктураДанныхСтроки, "ДокументРасчетов");
				НоваяСтрока.Сумма = СтрокаРасшифровкиПлатежа.Сумма;
					
				Если ЗначениеЗаполнено(СтрокаРасшифровкиПлатежа.СтавкаНДС) Тогда
					
					СтавкаНДССтроки(СтрокаРасшифровкиПлатежа,КомпонентыОбмена);	
	
					НоваяСтрока.СтавкаНДС = СтрокаРасшифровкиПлатежа.СтавкаНДС;
					НоваяСтрока.СуммаНДС = СтрокаРасшифровкиПлатежа.СуммаНДС;
				Иначе
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
					НоваяСтрока.СуммаНДС = 0;
				КонецЕсли;
					
				НоваяСтрока.СпособЗачетаОплаты = ПравилаПолученияСпособаЗачетаОплаты.КонвертацииЗначенийПриПолучении.Получить(
				СтрокаРасшифровкиПлатежа.СпособПогашенияЗадолженности.Значение);
					
			КонецЦикла;
				
		КонецЕсли;
			
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПриходныйКассовыйОрдер_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Приходный кассовый ордер'"));
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.Состав.Количество() > 0 Тогда
				
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.Состав.Итог("Сумма");
			ПолученныеДанные.СуммаНДС = ПолученныеДанные.Состав.Итог("СуммаНДС");
				
		КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	// Запретим перезаполнять документ
	МассивЗапрещенных = КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке;
	Если МассивЗапрещенных.Найти("ПриходныйКассовыйОрдер") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ДанныеИБ.ДоговорВзаиморасчетов = ПолученныеДанные.ДоговорВзаиморасчетов;
	ДанныеИБ.СтатьяДДС = ПолученныеДанные.СтатьяДДС;
	ДанныеИБ.СтавкаНДС = ПолученныеДанные.СтавкаНДС;
	ДанныеИБ.ДокументОснование = ПолученныеДанные.ДокументОснование;
		
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ДанныеИБ.ВерсияОбъекта)
		И ПолученныеДанные.Состав.Количество() > 0 Тогда
			
		ДанныеИБ.СуммаДокумента = ПолученныеДанные.Состав.Итог("Сумма");
		ДанныеИБ.СуммаНДС = ПолученныеДанные.Состав.Итог("СуммаНДС");
			
		КолонкиДляВключения = Новый Массив;
		КолонкиДляВключения.Добавить("ДокументРасчетов");
		КолонкиДляВключения.Добавить("Заказ");
		КолонкиДляВключения.Добавить("Сумма");
		КолонкиДляВключения.Добавить("СтавкаНДС");
		КолонкиДляВключения.Добавить("СуммаНДС");
		КолонкиДляВключения.Добавить("СпособЗачетаОплаты");
			
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Состав,
			ДанныеИБ.Состав,
			КолонкиДляВключения);
		ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
			
	Иначе
		
		ДанныеИБ.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
		ДанныеИБ.СуммаНДС = ПолученныеДанные.СуммаНДС;
		
		Если ЗначениеЗаполнено(ПолученныеДанные.Сделка) Тогда
			ДанныеИБ.Сделка = ПолученныеДанные.Сделка;
			Если Не РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ПолученныеДанные.ДоговорВзаиморасчетов) Тогда
				ДанныеИБ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходныйКассовыйОрдер_Получение
Процедура ДобавитьПКО_Документ_РасходныйКассовыйОрдер_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РасходныйКассовыйОрдер_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РасходныйКассовыйОрдер_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РасходныйКассовыйОрдер_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РасходныйКассовыйОрдер_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ХозОперация = Справочники.ХозОперации.РасходныйКассовыйОрдер; 
	ПолученныеДанные.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств; 
	
	Если ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ОплатаПоставщику;
	ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" Тогда 
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОплатыПокупателю;
	ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "КредитыИЗаймы" Тогда 
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка;
	Иначе 
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочиеРасходы;
	КонецЕсли;
	
	// Для загруженных из БП документов признак устанавливаем всегда
	ПолученныеДанные.РегламентированныйУчет = Истина;
	
	// Заполним подразделение по умолчанию
	Если НЕ ДанныеXDTO.Свойство("Подразделение") Тогда   
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	// Касса Компании заполняется всегода по умолчанию
	ПолученныеДанные.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
	
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	Если СоставЗаполнен Тогда
		
		ПКО_Договор = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДоговорыКонтрагентов_Получение");
		ПолученныеДанные.ДоговорВзаиморасчетов = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ДанныеXDTO.РасшифровкаПлатежа[0].Договор,
			ПКО_Договор,
			"ПолучитьСсылку").Ссылка;
		
		Если  ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
			ПКО_СтатьяДДС = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС");
			ПолученныеДанные.СтатьяДДС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС"),
					"ПолучитьСсылку").Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтавкаНДС) Тогда
			СтавкаНДССтроки(ДанныеXDTO.РасшифровкаПлатежа[0], КомпонентыОбмена);
			ПолученныеДанные.СтавкаНДС = ДанныеXDTO.РасшифровкаПлатежа[0].СтавкаНДС;
			СуммаНДС = ДанныеXDTO.РасшифровкаПлатежа[0].СуммаНДС;
		Иначе
			ПолученныеДанные.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			СуммаНДС = 0;
		КонецЕсли;
		
		ПолученныеДанные.СуммаДокумента = ДанныеXDTO.РасшифровкаПлатежа[0].Сумма;
		ПолученныеДанные.СуммаНДС = СуммаНДС;
		
		Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].Заказ) Тогда
			УИДЗаказ = Новый УникальныйИдентификатор(ДанныеXDTO.РасшифровкаПлатежа[0].Заказ.Ссылка.Значение);
			ПолученныеДанные.ДокументОснование = Документы.СчетНаОплату.ПолучитьСсылку(УИДЗаказ);
		КонецЕсли;
		
		ВзаиморасчетыПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ПолученныеДанные.ДоговорВзаиморасчетов);
			
		Если ДанныеXDTO.РасшифровкаПлатежа[0].ДокументРасчетов <> Неопределено
			И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].Заказ) Тогда 
			ПолученныеДанные.Сделка = Документы.СчетНаОплату.ПолучитьСсылку(УИДЗаказ);
		Иначе
			Если Не ВзаиморасчетыПоРасчетнымДокументам Тогда
				ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли;
		КонецЕсли;
		// Заполним состав
		Если ВзаиморасчетыПоРасчетнымДокументам Тогда
				
			УсловиеПоиска = Новый Структура();
			УсловиеПоиска.Вставить("ИмяПКПД", "Перечисление_СпособыЗачетаАвансов");
			ПравилаПолученияСпособаЗачетаОплаты =
				КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.НайтиСтроки(УсловиеПоиска)[0];
				
			Для Каждого СтрокаРасшифровкиПлатежа Из ДанныеXDTO.РасшифровкаПлатежа Цикл
					
				НоваяСтрока = ПолученныеДанные.Состав.Добавить();
				СтруктураДанныхСтроки = Новый Структура();
				ЗаполнитьДокументСделки(
					СтруктураДанныхСтроки,
					СтрокаРасшифровкиПлатежа.ДокументРасчетов,
					"ДокументРасчетов");
				НоваяСтрока.ДокументРасчетов = ПолучитьЗначениеПараметраСтруктуры(СтруктураДанныхСтроки, "ДокументРасчетов");
				НоваяСтрока.Сумма = СтрокаРасшифровкиПлатежа.Сумма;
					
				Если ЗначениеЗаполнено(СтрокаРасшифровкиПлатежа.СтавкаНДС) Тогда
					СтавкаНДССтроки(СтрокаРасшифровкиПлатежа, КомпонентыОбмена);
					НоваяСтрока.СтавкаНДС = СтрокаРасшифровкиПлатежа.СтавкаНДС;
					НоваяСтрока.СуммаНДС = СтрокаРасшифровкиПлатежа.СуммаНДС;
				Иначе
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
					НоваяСтрока.СуммаНДС = 0;
				КонецЕсли;
					
				НоваяСтрока.СпособЗачетаОплаты = ПравилаПолученияСпособаЗачетаОплаты.КонвертацииЗначенийПриПолучении.Получить(
					СтрокаРасшифровкиПлатежа.СпособПогашенияЗадолженности.Значение);
					
			КонецЦикла;
				
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РасходныйКассовыйОрдер_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Расходный кассовый ордер'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.Состав.Количество() > 0 Тогда
				
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.Состав.Итог("Сумма");
			ПолученныеДанные.СуммаНДС = ПолученныеДанные.Состав.Итог("СуммаНДС");
				
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Запретим перезаполнять документ
	МассивЗапрещенных = КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке;
	Если МассивЗапрещенных.Найти("РасходныйКассовыйОрдер") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ПодразделениеКомпании) Тогда
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.КассаКомпании) Тогда			
		ПолученныеДанные.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
	КонецЕсли;
	
	ДанныеИБ.ДоговорВзаиморасчетов = ПолученныеДанные.ДоговорВзаиморасчетов;
	ДанныеИБ.СтатьяДДС = ПолученныеДанные.СтатьяДДС;
	ДанныеИБ.СтавкаНДС = ПолученныеДанные.СтавкаНДС;
	ДанныеИБ.ДокументОснование = ПолученныеДанные.ДокументОснование;
		
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ДанныеИБ.ВерсияОбъекта)
		И ПолученныеДанные.Состав.Количество() > 0 Тогда
			
		ДанныеИБ.СуммаДокумента = ПолученныеДанные.Состав.Итог("Сумма");
		ДанныеИБ.СуммаНДС = ПолученныеДанные.Состав.Итог("СуммаНДС");
			
		КолонкиДляВключения = Новый Массив;
		КолонкиДляВключения.Добавить("ДокументРасчетов");
		КолонкиДляВключения.Добавить("Заказ");
		КолонкиДляВключения.Добавить("Сумма");
		КолонкиДляВключения.Добавить("СтавкаНДС");
		КолонкиДляВключения.Добавить("СуммаНДС");
		КолонкиДляВключения.Добавить("СпособЗачетаОплаты");
			
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Состав,
			ДанныеИБ.Состав,
			КолонкиДляВключения);
		ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
			
	Иначе
		
		ДанныеИБ.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
		ДанныеИБ.СуммаНДС = ПолученныеДанные.СуммаНДС;
			
		Если ЗначениеЗаполнено(ПолученныеДанные.Сделка) Тогда
			ДанныеИБ.Сделка = ПолученныеДанные.Сделка;
			Если Не РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ПолученныеДанные.ДоговорВзаиморасчетов) Тогда
				ДанныеИБ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходныйКассовыйОрдерСотрудник_Получение
Процедура ДобавитьПКО_Документ_РасходныйКассовыйОрдерСотрудник_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РасходныйКассовыйОрдерСотрудник_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РасходныйКассовыйОрдерСотрудник_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РасходныйКассовыйОрдерСотрудник_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Сотрудник", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РасходныйКассовыйОрдерСотрудник_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.ВидРасчетов.Значение = "Подотчет" Тогда 
			ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ВыдачаДенежныхСредствПодотчетнику; 
			ПолученныеДанные.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеПодОтчет;
		Иначе
			ПолученныеДанные.ХозОперация = Справочники.ХозОперации.РасходныйКассовыйОрдер; 
			ПолученныеДанные.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;  
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаймаСотруднику;
	КонецЕсли;
				
	// Для загруженных из БП документов признак устанавливаем всегда
	ПолученныеДанные.РегламентированныйУчет = Истина;
				
	// Заполним подразделение по умолчанию
	Если НЕ ДанныеXDTO.Свойство("Подразделение") Тогда   
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли;
				
	// Касса Компании заполняется всегода по умолчанию
	ПолученныеДанные.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
				
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
				
	Если СоставЗаполнен Тогда
									
		Если  ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
			ПКО_СтатьяДДС = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС");
			ПолученныеДанные.СтатьяДДС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС"),
				"ПолучитьСсылку").Ссылка;
		КонецЕсли;
		
		ПолученныеДанные.Контрагент = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник, КомпонентыОбмена);					
		ПолученныеДанные.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;		
		ПолученныеДанные.СуммаДокумента = ДанныеXDTO.РасшифровкаПлатежа[0].Сумма;
		ПолученныеДанные.СуммаНДС = 0;		
		Если Не РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ПолученныеДанные.ДоговорВзаиморасчетов) Тогда
			ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
	
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РасходныйКассовыйОрдерСотрудник_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Выдача денежных средств подотчетнику'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Возврат;
	КонецЕсли;
	
	// Запретим перезаполнять документ
	МассивЗапрещенных = КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке;
	Если МассивЗапрещенных.Найти("РасходныйКассовыйОрдер") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ПодразделениеКомпании) Тогда
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.КассаКомпании) Тогда			
		ПолученныеДанные.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
	КонецЕсли;
	
	ДанныеИБ.ДоговорВзаиморасчетов = ПолученныеДанные.ДоговорВзаиморасчетов;
	ДанныеИБ.СтатьяДДС = ПолученныеДанные.СтатьяДДС;
	ДанныеИБ.СтавкаНДС = ПолученныеДанные.СтавкаНДС;
	ДанныеИБ.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
	ДанныеИБ.СуммаНДС = ПолученныеДанные.СуммаНДС;
	
	ДанныеИБ.ДокументОснование = ПолученныеДанные.ДокументОснование;
	Если ЗначениеЗаполнено(ПолученныеДанные.Сделка) Тогда
		ДанныеИБ.Сделка = ПолученныеДанные.Сделка;
		Если Не РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ПолученныеДанные.ДоговорВзаиморасчетов) Тогда
			ДанныеИБ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "",                      "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Сотрудник", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
			Возврат;
		КонецЕсли;  
		
		СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
			И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
			И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0; 
				
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ВыплатаЗарплатыРаботнику; 
		ПолученныеДанные.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств; 
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаработнойПлатыСотруднику;
		
		
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
		
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") Тогда   
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли;
		
		// Касса Компании заполняется всегода по умолчанию
		ПолученныеДанные.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
			
		Если СоставЗаполнен Тогда
			
			Если  ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник) Тогда
	
				ПолученныеДанные.Контрагент = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник, КомпонентыОбмена);   
					
			КонецЕсли;
	
			Если  ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
				ПКО_СтатьяДДС = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС");
				ПолученныеДанные.СтатьяДДС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена,
					ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
					ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_СтатьиДДС"),
						"ПолучитьСсылку").Ссылка;
			КонецЕсли;
			
			ПолученныеДанные.СуммаДокумента = ДанныеXDTO.Сумма;
	        ПолученныеДанные.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;		
			ПолученныеДанные.СуммаНДС = 0;		
			ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
		Иначе
			Возврат;
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Расходный кассовый ордер'"));
			
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Возврат;
	КонецЕсли;
			
	// Запретим перезаполнять документ
	МассивЗапрещенных = КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке;
	Если МассивЗапрещенных.Найти("РасходныйКассовыйОрдер") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
			
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	Если ЗначениеЗаполнено(ПолученныеДанные.ПодразделениеКомпании) Тогда
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли;
			
	Если ЗначениеЗаполнено(ПолученныеДанные.КассаКомпании) Тогда			
		ПолученныеДанные.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
	КонецЕсли;
			
	ДанныеИБ.ДоговорВзаиморасчетов = ПолученныеДанные.ДоговорВзаиморасчетов;
	ДанныеИБ.СтатьяДДС = ПолученныеДанные.СтатьяДДС;
	ДанныеИБ.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
					
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                    "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                 "Основание");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",     "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",                "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
		
	ПолученныеДанные.ХозОперация = Справочники.ХозОперации.РасходныйКассовыйОрдер; 
	ПолученныеДанные.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств; 
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиВБанк;
		
	// Для загруженных из БП документов признак устанавливаем всегда
	ПолученныеДанные.РегламентированныйУчет = Истина;
		
	// Заполним подразделение по умолчанию
	Если НЕ ДанныеXDTO.Свойство("Подразделение") Тогда   
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли;
		
	// Касса Компании заполняется всегода по умолчанию
	ПолученныеДанные.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию; 
	ПолученныеДанные.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	ПолученныеДанные.СуммаНДС = 0;
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Расходный кассовый ордер'"));
		
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Возврат;
	КонецЕсли;
		
	// Запретим перезаполнять документ
	МассивЗапрещенных = КомпонентыОбмена.ПараметрыКонвертации.МассивЗапрещенныхКПовторнойЗагрузке;
	Если МассивЗапрещенных.Найти("РасходныйКассовыйОрдер") <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
		
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
			
	ДанныеИБ.СтавкаНДС = ПолученныеДанные.СтавкаНДС;
	ДанныеИБ.СуммаНДС = ПолученныеДанные.СуммаНДС;
		
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",              "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента",   "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",                "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",           "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПлатежноеПоручениеОснование", "ПлатежноеПоручение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаРасход",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",       "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет",      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",                   "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
		Возврат;
	КонецЕсли;
							
	ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации;
									
	// Для загруженных из БП документов признак устанавливаем всегда
	ПолученныеДанные.РегламентированныйУчет = Истина;
					
	// Заполним подразделение по умолчанию
	Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли; 
					
	Если ДанныеXDTO.Свойство("ПлатежноеПоручение") Тогда
		УИД = Новый УникальныйИдентификатор(ДанныеXDTO.ПлатежноеПоручение.Ссылка.Значение);
		ПлатежноеПоручение = Документы.ПлатежноеПоручение.ПолучитьСсылку(УИД);
		Если СсылкаСуществует(ПлатежноеПоручение) Тогда
			ПолученныеДанные.ПлатежноеПоручениеОснование = ПлатежноеПоручение;
		КонецЕсли;
	КонецЕсли;
					
	Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
		ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
	Иначе
		ДатаВходящая = Дата(1, 1, 1);
	КонецЕсли;
					
	Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
		НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
	Иначе
		НомерВходящегоДокумента = "";
	КонецЕсли;
					
	Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
		НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
	Иначе
		НазначениеПлатежа = "";
	КонецЕсли;
									
	МассивСтрокСостава = Новый Массив;
				
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
				
	СтруктураДанныхСтроки = Новый Структура();
							
	СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
	СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
	СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
	СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
	СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	СтруктураДанныхСтроки.Вставить("СуммаРасход", ДанныеXDTO.Сумма);
						
	МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
				
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Перевод между счетами'"));
		
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
		
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
		
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("СуммаРасход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
		
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
		
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",              "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                  "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",           "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПлатежноеПоручениеОснование", "ПлатежноеПоручение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаРасход",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",       "Подразделение", 1, "Справочник_Подразделения_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "Сотрудник", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
		Возврат;
	КонецЕсли;
			
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
		|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
		|ИЗ
		|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
		|ГДЕ
		|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
			
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение);
			
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
			
	Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
				
		ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект();
				
		СтрокаВыписки = ДокументВыписки.ЭтотОбъект.Состав[ВыборкаДетальныеЗаписи[0].НомерСтрокиВыписки - 1];
				
		КонтрагентСсылка = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.Контрагент, КомпонентыОбмена);
		ДокументВыписки.Контрагент = КонтрагентСсылка;
							
		Если ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС <> Неопределено Тогда
			ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
			СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ПКО_СтатьяДДССсылка,
				"ПолучитьСсылку").Ссылка;                            
					
			СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
		КонецЕсли;
				
		ДокументВыписки.СуммаДокументаРасход = ДокументВыписки.СуммаДокументаРасход - СтрокаВыписки.СуммаРасход + ДанныеXDTO.Сумма;
		СтрокаВыписки.СуммаРасход			= ДанныеXDTO.Сумма;
		СтрокаВыписки.Контрагент 			= КонтрагентСсылка;
		СтрокаВыписки.СуммаНДС = 0;
		СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
					
		ДокументВыписки.Записать();	
		Возврат;
	Иначе
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаработнойПлаты;
					
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
				
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли; 
				
		Если ДанныеXDTO.Свойство("ПлатежноеПоручение") Тогда
			УИД = Новый УникальныйИдентификатор(ДанныеXDTO.ПлатежноеПоручение.Ссылка.Значение);
			ПлатежноеПоручение = Документы.ПлатежноеПоручение.ПолучитьСсылку(УИД);
			Если СсылкаСуществует(ПлатежноеПоручение) Тогда
				ПолученныеДанные.ПлатежноеПоручениеОснование = ПлатежноеПоручение;
			КонецЕсли;
		КонецЕсли;
				
		// Заполним ТЧ Состав
				
		Если СоставЗаполнен Тогда
					
			КонтрагентСсылка = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.Контрагент, КомпонентыОбмена);
			ПолученныеДанные.Контрагент = КонтрагентСсылка;
	
					
			Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
				ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
			Иначе
				ДатаВходящая = Дата(1, 1, 1);
			КонецЕсли;
					
			Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
				НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
			Иначе
				НомерВходящегоДокумента = "";
			КонецЕсли;
					
			Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
				НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
			Иначе
				НазначениеПлатежа = "";
			КонецЕсли;
					
			// Состав платежа
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Договор","ДоговорВзаиморасчетов");
			ПравилаЗаполнения.Вставить("Сумма","СуммаРасход");
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
					
			МассивСтрокСостава = Новый Массив;
					
			Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
				
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);
				СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
		 		СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
				СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
				СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
									
				МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
				
			КонецЦикла;
					
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
					
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Списание с расчетного счета подотчетнику'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаРасход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗПНаЛС_Получение
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПеречислениеЗПНаЛС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",              "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",                "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",           "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПлатежноеПоручениеОснование", "ПлатежноеПоручение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаРасход",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                  "Сотрудник", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",       "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет",      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",                   "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
		Возврат;
	КонецЕсли;
	
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
	|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
	|ИЗ
	|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
	|ГДЕ
	|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
	
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
		
		ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект();
		
		СтрокаВыписки = ДокументВыписки.ЭтотОбъект.Состав[ВыборкаДетальныеЗаписи[0].НомерСтрокиВыписки - 1];
		
		КонтрагентСсылка = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.Сотрудник, КомпонентыОбмена);
		ДокументВыписки.Контрагент = КонтрагентСсылка;
		
		Если ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС <> Неопределено Тогда
			ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
			СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ПКО_СтатьяДДССсылка,
				"ПолучитьСсылку").Ссылка;                            
			
			СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
		КонецЕсли;
		
		ДокументВыписки.СуммаДокументаРасход = ДокументВыписки.СуммаДокументаРасход - СтрокаВыписки.СуммаРасход + ДанныеXDTO.Сумма;
		СтрокаВыписки.СуммаРасход			= ДанныеXDTO.Сумма;
		СтрокаВыписки.Контрагент 			= КонтрагентСсылка;	
		СтрокаВыписки.СуммаНДС = 0;
		СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			
		ДокументВыписки.Записать();	
		Возврат;
	Иначе
		
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки; 
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаработнойПлатыСотруднику;
		
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
		
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли; 
		
		Если ДанныеXDTO.Свойство("ПлатежноеПоручение") Тогда
			УИД = Новый УникальныйИдентификатор(ДанныеXDTO.ПлатежноеПоручение.Ссылка.Значение);
			ПлатежноеПоручение = Документы.ПлатежноеПоручение.ПолучитьСсылку(УИД);
			Если СсылкаСуществует(ПлатежноеПоручение) Тогда
				ПолученныеДанные.ПлатежноеПоручениеОснование = ПлатежноеПоручение;
			КонецЕсли;
		КонецЕсли;
		
		// Заполним ТЧ Состав
		
		Если СоставЗаполнен Тогда
			
		    КонтрагентСсылка = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.Сотрудник, КомпонентыОбмена);
			ПолученныеДанные.Контрагент = КонтрагентСсылка;
					
			Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
				ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
			Иначе
				ДатаВходящая = Дата(1, 1, 1);
			КонецЕсли;
			
			Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
				НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
			Иначе
				НомерВходящегоДокумента = "";
			КонецЕсли;
			
			Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
				НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
			Иначе
				НазначениеПлатежа = "";
			КонецЕсли;
			
			// Состав платежа
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Договор","ДоговорВзаиморасчетов");
			ПравилаЗаполнения.Вставить("Сумма","СуммаРасход");
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
			
			МассивСтрокСостава = Новый Массив;
			
			ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
			Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				
				// Контрагент
				СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);
				
				СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
				
				
				СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
				СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
				СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
							
				МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
			
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Списание с расчетного счета'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаРасход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",              "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",                "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                  "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",           "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПлатежноеПоручениеОснование", "ПлатежноеПоручение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаРасход",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",       "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет",      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",                   "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
		Возврат;
	КонецЕсли;
			
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
			
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
		|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
		|ИЗ
		|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
		|ГДЕ
		|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
			
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение);
			
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
			
	Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
				
		ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект();
				
		СтрокаВыписки = ДокументВыписки.ЭтотОбъект.Состав[ВыборкаДетальныеЗаписи[0].НомерСтрокиВыписки - 1];
				
		ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
		КонтрагентСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ДанныеXDTO.Контрагент,
			ПКО_Контрагент,
			"ПолучитьСсылку").Ссылка;
							
		Если ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС <> Неопределено Тогда
			ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
			СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ПКО_СтатьяДДССсылка,
				"ПолучитьСсылку").Ссылка;                            
					
			СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
		КонецЕсли;
				
		ДокументВыписки.СуммаДокументаРасход = ДокументВыписки.СуммаДокументаРасход - СтрокаВыписки.СуммаРасход + ДанныеXDTO.Сумма;
		СтрокаВыписки.СуммаРасход			= ДанныеXDTO.Сумма;
		СтрокаВыписки.Контрагент 			= КонтрагентСсылка;		
		СтрокаВыписки.СуммаНДС = 0;
		СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
					
		ДокументВыписки.Записать();	
		Возврат;
		
	Иначе
				
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеНалога;
			
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
				
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли; 
				
		Если ДанныеXDTO.Свойство("ПлатежноеПоручение") Тогда
			УИД = Новый УникальныйИдентификатор(ДанныеXDTO.ПлатежноеПоручение.Ссылка.Значение);
			ПлатежноеПоручение = Документы.ПлатежноеПоручение.ПолучитьСсылку(УИД);
			Если СсылкаСуществует(ПлатежноеПоручение) Тогда
				ПолученныеДанные.ПлатежноеПоручениеОснование = ПлатежноеПоручение;
			КонецЕсли;
		КонецЕсли;
				
		// Заполним ТЧ Состав
		
		Если СоставЗаполнен Тогда
					
			ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
			КонтрагентСсылка = 
				ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.Контрагент,
				ПКО_Контрагент,
				"ПолучитьСсылку").Ссылка;
					
			Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
				ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
			Иначе
				ДатаВходящая = Дата(1, 1, 1);
			КонецЕсли;
					
			Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
				НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
			Иначе
				НомерВходящегоДокумента = "";
			КонецЕсли;
					
			Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
				НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
			Иначе
				НазначениеПлатежа = "";
			КонецЕсли;
					
			// Состав платежа
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Договор","ДоговорВзаиморасчетов");
			ПравилаЗаполнения.Вставить("Сумма","СуммаРасход");
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
					
			МассивСтрокСостава = Новый Массив;
					
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
	
			Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
					
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);	
				СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);	
				СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);							
				СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
				СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
				СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
									
				МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
					
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
					
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Списание с расчетного счета'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаРасход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочееСписание_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",              "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",                "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                  "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",           "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПлатежноеПоручениеОснование", "ПлатежноеПоручение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаРасход",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",       "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет",      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",                   "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
		Возврат;
	КонецЕсли;
			
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
		|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
		|ИЗ
		|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
		|ГДЕ
		|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
			
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение);
			
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
			
	Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
				
		ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект();
				
		СтрокаВыписки = ДокументВыписки.ЭтотОбъект.Состав[ВыборкаДетальныеЗаписи[0].НомерСтрокиВыписки - 1];
				
		ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
		КонтрагентСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ДанныеXDTO.Контрагент,
			ПКО_Контрагент,
			"ПолучитьСсылку").Ссылка;
								
		Если ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС <> Неопределено Тогда
			ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
			СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ПКО_СтатьяДДССсылка,
				"ПолучитьСсылку").Ссылка;                            
					
			СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
		КонецЕсли;
				
		ДокументВыписки.СуммаДокументаРасход = ДокументВыписки.СуммаДокументаРасход - СтрокаВыписки.СуммаРасход + ДанныеXDTO.Сумма;
		СтрокаВыписки.СуммаРасход			= ДанныеXDTO.Сумма; 
		СтрокаВыписки.Контрагент 			= КонтрагентСсылка;
		СтрокаВыписки.СуммаНДС = 0;
		СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			
		ДокументВыписки.Записать();	
		Возврат;
		
	Иначе
		
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочееСписание;
								
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
				
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли; 
				
		Если ДанныеXDTO.Свойство("ПлатежноеПоручение") Тогда
			УИД = Новый УникальныйИдентификатор(ДанныеXDTO.ПлатежноеПоручение.Ссылка.Значение);
			ПлатежноеПоручение = Документы.ПлатежноеПоручение.ПолучитьСсылку(УИД);
			Если СсылкаСуществует(ПлатежноеПоручение) Тогда
				ПолученныеДанные.ПлатежноеПоручениеОснование = ПлатежноеПоручение;
			КонецЕсли;
		КонецЕсли;
				
		// Заполним ТЧ Состав
				
		Если СоставЗаполнен Тогда
					
			Если ДанныеXDTO.Свойство("Контрагент") Тогда
					
				ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
				КонтрагентДокумента = ДанныеXDTO.Контрагент;
	
				КонтрагентСсылка = 
					ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена,
					КонтрагентДокумента,
					ПКО_Контрагент,
					"ПолучитьСсылку").Ссылка;
				Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
					ПолученныеДанные.Контрагент = КонтрагентСсылка;
				КонецЕсли;
	
				// Найдем контрагента по сотруднику
			ИначеЕсли ДанныеXDTO.Свойство("БанковскийСчет")
				И ДанныеXDTO.БанковскийСчет.Владелец.ТипЗначения = "ФизическоеЛицо" Тогда 
									
				КонтрагентСсылка = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.БанковскийСчет.Владелец, КомпонентыОбмена);
	            ПолученныеДанные.Контрагент = КонтрагентСсылка;
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(КонтрагентСсылка) Тогда
				КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
				
			Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
				ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
			Иначе
				ДатаВходящая = Дата(1, 1, 1);
			КонецЕсли;
					
			Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
				НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
			Иначе
				НомерВходящегоДокумента = "";
			КонецЕсли;
					
			Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
				НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
			Иначе
				НазначениеПлатежа = "";
			КонецЕсли;
					
			// Состав платежа
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Договор","ДоговорВзаиморасчетов");
			ПравилаЗаполнения.Вставить("Сумма","СуммаРасход");
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
					
			МассивСтрокСостава = Новый Массив;
					
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
	
			Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
				
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
						
				СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);		
				СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
		 	 	СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
				СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
				СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
								
				МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
				
			КонецЦикла;
					
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
					
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Списание с расчетного счета'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаРасход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",              "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",                "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                  "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",           "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПлатежноеПоручениеОснование", "ПлатежноеПоручение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаРасход",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",       "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет",      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",                   "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
		Возврат;
	КонецЕсли;
			
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
			
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
		|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
		|ИЗ
		|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
		|ГДЕ
		|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
			
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение);
			
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
			
	Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
				
		ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект();
				
		СтрокаВыписки = ДокументВыписки.ЭтотОбъект.Состав[ВыборкаДетальныеЗаписи[0].НомерСтрокиВыписки - 1];
				
		ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
		КонтрагентСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ДанныеXDTO.Контрагент,
			ПКО_Контрагент,
			"ПолучитьСсылку").Ссылка;
				
		Если ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС <> Неопределено Тогда
			
			ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
			СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ПКО_СтатьяДДССсылка,
				"ПолучитьСсылку").Ссылка;                            
					
			СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
		
		КонецЕсли;
				
		ДокументВыписки.СуммаДокументаРасход = ДокументВыписки.СуммаДокументаРасход - СтрокаВыписки.СуммаРасход + ДанныеXDTO.Сумма;
		СтрокаВыписки.СуммаРасход			= ДанныеXDTO.Сумма; 
		СтрокаВыписки.Контрагент 			= КонтрагентСсылка;			
		СтрокаВыписки.СуммаНДС = 0;
		СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
					
		ДокументВыписки.Записать();	
		Возврат;
		
	Иначе	
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочиеРасходы;
			
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
				
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли; 
				
		Если ДанныеXDTO.Свойство("ПлатежноеПоручение") Тогда
			
			УИД = Новый УникальныйИдентификатор(ДанныеXDTO.ПлатежноеПоручение.Ссылка.Значение);
			ПлатежноеПоручение = Документы.ПлатежноеПоручение.ПолучитьСсылку(УИД);
			Если СсылкаСуществует(ПлатежноеПоручение) Тогда
				ПолученныеДанные.ПлатежноеПоручениеОснование = ПлатежноеПоручение;
			КонецЕсли;
			
		КонецЕсли;
				
		// Заполним ТЧ Состав
			
		Если СоставЗаполнен Тогда
					
			ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
			КонтрагентСсылка = 
				ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.Контрагент,
				ПКО_Контрагент,
				"ПолучитьСсылку").Ссылка;
					
			Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
				ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
			Иначе
				ДатаВходящая = Дата(1, 1, 1);
			КонецЕсли;
					
			Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
				НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
			Иначе
				НомерВходящегоДокумента = "";
			КонецЕсли;
					
			Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
				НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
			Иначе
				НазначениеПлатежа = "";
			КонецЕсли;
					
			// Состав платежа
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Договор","ДоговорВзаиморасчетов");
			ПравилаЗаполнения.Вставить("Сумма","СуммаРасход");
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
					
			МассивСтрокСостава = Новый Массив;
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
	
			Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
				
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);		
				СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
				СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
				СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
				СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
									
				МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
					
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
					
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Списание с расчетного счета'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаРасход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",              "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",                "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                  "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",           "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПлатежноеПоручениеОснование", "ПлатежноеПоручение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаРасход",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",       "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет",      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",                   "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сделка",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособЗачетаАвансов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
		Возврат;
	КонецЕсли;
			
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
			
	ТекПКО = "Документ.СБДСРасчетыСКонтрагентами";	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
			|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
			|ИЗ
			|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
			|ГДЕ
			|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
			
	ИдентификаторОбъекта = ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение;
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
		
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
	
		РегСокр = РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов;
		РасшифровкаПлатежа =  ДанныеXDTO.РасшифровкаПлатежа;   
					
		ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект(); 
			
		СоставВыписки = ДокументВыписки.ЭтотОбъект.Состав.Выгрузить(); 
		СоставВыписки.Колонки.Добавить("Идентификатор");
		Для Каждого Строка ИЗ СоставВыписки Цикл
			Строка.Идентификатор = РегСокр.ПолучитьИдентификаторСтроки(
				ДокументВыписки.Ссылка,
				ТекПКО,
				Строка.НомерСтроки
			);
		КонецЦикла;
			
		Отбор = Новый Структура("Идентификатор", ИдентификаторОбъекта);
		СтрокиОтправленные = СоставВыписки.НайтиСтроки(Отбор); 
			
		КоличествоСтрокРасшифровка = РасшифровкаПлатежа.Количество();
			
		СтрокиКУдалению = Новый Массив(); 
	
		//  Определим определим таблицу в которой больше строк с переданным идентификатором,
		// по ней будем идти и менять строки Состава
		Если СтрокиОтправленные.Количество() >= КоличествоСтрокРасшифровка Тогда 
			НомерСтроки = 0;
				
			Для Каждого СтрокаВыписки Из СоставВыписки Цикл  
				Если СтрокаВыписки.Идентификатор = ИдентификаторОбъекта Тогда
					Если НомерСтроки < КоличествоСтрокРасшифровка Тогда 
						ОбработатьСтрокуВыпискиРасчетыСКонтрагентами(
							СтрокаВыписки, 
							РасшифровкаПлатежа[НомерСтроки],
							КомпонентыОбмена,
							ДанныеXDTO
						);
												
						СтрокаВыписки.СуммаРасход = РасшифровкаПлатежа[НомерСтроки].Сумма;
						НомерСтроки = НомерСтроки + 1;
					Иначе
						СтрокиКУдалению.Добавить(СтрокаВыписки); 	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе  
				
			КоличествоСтрокСостав = СоставВыписки.Количество(); 
				
			РасшифровкаПлатежа.Колонки.Добавить("НомерСтрокиВыписки");
			РасшифровкаПлатежа.ЗаполнитьЗначения(КоличествоСтрокСостав + 1, "НомерСтрокиВыписки");
				
			Номер = 0;
			Для Каждого Строка ИЗ ВыборкаДетальныеЗаписи Цикл 
				Если Номер < КоличествоСтрокРасшифровка Тогда
					РасшифровкаПлатежа[Номер].НомерСтрокиВыписки = Строка.НомерСтрокиВыписки; 
					Номер = Номер + 1; 
				Иначе 
					Прервать;
				КонецЕсли;
					
			КонецЦикла;
	
			Для Каждого Строка Из РасшифровкаПлатежа Цикл 
					
				Если Строка.НомерСтрокиВыписки <= КоличествоСтрокСостав Тогда  
						СтрокаВыписки = СоставВыписки[Строка.НомерСтрокиВыписки - 1];
				Иначе 
					СтрокаВыписки = СоставВыписки.Добавить();
					СтрокаВыписки.НомерСтроки = СоставВыписки.Количество();
					РегСокр.ОбработкаСтрокиВыписки(
						ДокументВыписки.Ссылка,
						ТекПКО,
						СтрокаВыписки.НомерСтроки,
						ИдентификаторОбъекта
					); 
						СтрокаВыписки.Идентификатор = ИдентификаторОбъекта;	
				КонецЕсли;
					
				ОбработатьСтрокуВыпискиРасчетыСКонтрагентами(
					СтрокаВыписки, 
					Строка,
					КомпонентыОбмена,
					ДанныеXDTO
				);
	
				СтрокаВыписки.СуммаРасход 			= Строка.Сумма;
				Если Строка.СпособПогашенияЗадолженности <> Неопределено Тогда
					СтрокаВыписки.СпособЗачетаАвансов	= СпособЗачетаАвансов(Строка.СпособПогашенияЗадолженности);
				КонецЕсли;
	
			КонецЦикла;
		КонецЕсли;
			
		Для Каждого Элемент Из СтрокиКУдалению Цикл
				
			РегСокр.УдалитьЗаписи(ДокументВыписки.Ссылка, ТекПКО, Элемент.НомерСтроки);
			СоставВыписки.Удалить(Элемент);
			
		КонецЦикла;   
			
		НулевыеСтроки = СоставВыписки.НайтиСтроки(Новый Структура("Идентификатор",""));
		Для Каждого СтрокаТаблицы Из НулевыеСтроки Цикл
			СоставВыписки.Удалить(СтрокаТаблицы)
		КонецЦикла;   
			
		СоставВыписки.Колонки.Удалить("Идентификатор");		
		ДокументВыписки.ЭтотОбъект.Состав.Очистить();
		ДокументВыписки.ЭтотОбъект.Состав.Загрузить(СоставВыписки);
			
	    ПосчитатьИтогиВыписки(ДокументВыписки.ЭтотОбъект);
		ДокументВыписки.Записать();
		Возврат;
	
		Иначе
			ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;	
			Если ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ОплатаПоставщику;
			ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" Тогда 
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратОплатыПокупателю;
			ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "КредитыИЗаймы" Тогда 
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка;
			ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "ЗаймКонтрагенту" Тогда 
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка;
			ИначеЕсли  ДанныеXDTO.ВидРасчетов.Значение = "КредитБанка" ИЛИ ДанныеXDTO.ВидРасчетов.Значение = "КредитКонтрагента" Тогда 
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПолучениеКредитаБанка;
			Иначе 
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочиеРасходы;
			КонецЕсли;
					
			// Для загруженных из БП документов признак устанавливаем всегда
			ПолученныеДанные.РегламентированныйУчет = Истина;
				
			// Заполним подразделение по умолчанию
			Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
				ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
			КонецЕсли; 
				
			
			Если ДанныеXDTO.Свойство("ПлатежноеПоручение") Тогда
				УИД = Новый УникальныйИдентификатор(ДанныеXDTO.ПлатежноеПоручение.Ссылка.Значение);
				ПлатежноеПоручение = Документы.ПлатежноеПоручение.ПолучитьСсылку(УИД);
				Если СсылкаСуществует(ПлатежноеПоручение) Тогда
					ПолученныеДанные.ПлатежноеПоручениеОснование = ПлатежноеПоручение;
				КонецЕсли;
			КонецЕсли;
				
			// Заполним ТЧ Состав
				
			Если СоставЗаполнен Тогда
					
				ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
				КонтрагентСсылка = 
					ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена,
					ДанныеXDTO.Контрагент,
					ПКО_Контрагент,
					"ПолучитьСсылку").Ссылка;
					
				Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
					ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
				Иначе
					ДатаВходящая = Дата(1, 1, 1);
				КонецЕсли;
					
				Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
					НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
				Иначе
					НомерВходящегоДокумента = "";
				КонецЕсли;
					
				Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
					НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
				Иначе
					НазначениеПлатежа = "";
				КонецЕсли;
					
				// Состав платежа
				ПравилаЗаполнения = Новый Соответствие;
				ПравилаЗаполнения.Вставить("Договор","ДоговорВзаиморасчетов");
				ПравилаЗаполнения.Вставить("Сумма","СуммаРасход");
				ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
				ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
				ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
					
				МассивСтрокСостава = Новый Массив;
					
				ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
				Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
					СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
						
					// Контрагент
					СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);
						
					// Курс взаиморасчетов		
					КурсВалютыВзаиморасчетов = Строка.КурсВзаиморасчетов /
						?(Строка.КратностьВзаиморасчетов = 0, 1, Строка.КратностьВзаиморасчетов);
						СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", КурсВалютыВзаиморасчетов);
						
					Если ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СтавкаНДС") <> Неопределено
						И ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
									
						СтавкаНДССтроки(СтруктураДанныхСтроки, КомпонентыОбмена); 
					Иначе 
						СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
									
					КонецЕсли; 
		
						
					Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
						ЗаполнитьДокументСделки(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
					КонецЕсли;
						
					// Получим сделку из счета на оплату
					Если НЕ СтруктураДанныхСтроки.Свойство("Сделка") Тогда
					
						Если Строка.Заказ <> Неопределено И Строка.Заказ.ТипЗначения = "ЗаказПоставщику" Тогда
							УИД = Новый УникальныйИдентификатор(Строка.Заказ.Ссылка.Значение);
							СчетНаОплату = Документы.СчетОтПоставщика.ПолучитьСсылку(УИД);
							Если СсылкаСуществует(СчетНаОплату) Тогда
								Сделка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетНаОплату, "ДокументОснование");
							Иначе
								СчетНаОплатуЗаАвтомобили = Документы.СчетОтПоставщикаЗаАвтомобили.ПолучитьСсылку(УИД);
								Если СсылкаСуществует(СчетНаОплатуЗаАвтомобили) Тогда
									Сделка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетНаОплатуЗаАвтомобили, "ДокументОснование");
								КонецЕсли;
							КонецЕсли;
								
							Если ЗначениеЗаполнено(Сделка) Тогда
								СтруктураДанныхСтроки.Вставить("Сделка", Сделка);
							Иначе
								СтруктураДанныхСтроки.Вставить("Сделка", СчетНаОплату);	
							КонецЕсли; 				
						КонецЕсли;
							
					КонецЕсли;
						
						СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
						СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
						СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
						Если Строка.СпособПогашенияЗадолженности <> Неопределено Тогда
							 СтруктураДанныхСтроки.Вставить("СпособЗачетаАвансов", СпособЗачетаАвансов(Строка.СпособПогашенияЗадолженности));
						КонецЕсли;
						
						МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
					КонецЦикла;
					
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
					
			КонецЕсли;
				
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Списание с расчетного счета'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаРасход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",              "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",           "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПлатежноеПоручениеОснование", "ПлатежноеПоручение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаРасход",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                  "Сотрудник", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",       "Подразделение", 1, "Справочник_Подразделения_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорВзаиморасчетов",    "", 1,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
		Возврат;
	КонецЕсли;
	
	СоставЗаполнен = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект,
		|	ИдентификаторыВыгружаемыхОбъектов.НомерСтрокиВыписки КАК НомерСтрокиВыписки
		|ИЗ
		|	РегистрСведений.ИдентификаторыВыгружаемыхОбъектов КАК ИдентификаторыВыгружаемыхОбъектов
		|ГДЕ
		|	ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
		
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
		
	Если ВыборкаДетальныеЗаписи.Количество() > 0 И СоставЗаполнен Тогда 
		
		ДокументВыписки = ВыборкаДетальныеЗаписи[0].Объект.ПолучитьОбъект();
		
		СтрокаВыписки = ДокументВыписки.ЭтотОбъект.Состав[ВыборкаДетальныеЗаписи[0].НомерСтрокиВыписки - 1];
		
		КонтрагентСсылка = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.Сотрудник, КомпонентыОбмена);
		ДокументВыписки.Контрагент = КонтрагентСсылка;
		
		Если ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("Договор") <> Неопределено Тогда
	
				ПКО_Договор = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДоговорыКонтрагентов_Получение");
				ДоговорСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена,
					ДанныеXDTO.РасшифровкаПлатежа[0].Договор,
					ПКО_Договор,
					"ПолучитьСсылку").Ссылка;  
				СтрокаВыписки.ДоговорВзаиморасчетов = ДоговорСсылка; 
	
		КонецЕсли;
		
		Если ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС <> Неопределено Тогда
			ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
			СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС,
				ПКО_СтатьяДДССсылка,
				"ПолучитьСсылку").Ссылка;                            
				
			СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
		КонецЕсли;
			
		ДокументВыписки.СуммаДокументаРасход = ДокументВыписки.СуммаДокументаРасход - СтрокаВыписки.СуммаРасход + ДанныеXDTO.Сумма;
		СтрокаВыписки.СуммаРасход			= ДанныеXDTO.Сумма;
		СтрокаВыписки.Контрагент 			= КонтрагентСсылка;
		СтрокаВыписки.СуммаНДС = 0;
		СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		
		ДокументВыписки.Записать();	
		Возврат;
		
	Иначе
			
		ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
		
			Если ДанныеXDTO.ВидРасчетов.Значение = "Займы" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаймаСотруднику;
			ИначеЕсли ДанныеXDTO.ВидРасчетов.Значение = "Подотчет" Тогда 
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеПодОтчет;
			КонецЕсли;
	
		// Для загруженных из БП документов признак устанавливаем всегда
		ПолученныеДанные.РегламентированныйУчет = Истина;
	
		// Заполним подразделение по умолчанию
		Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
			ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
		КонецЕсли; 
		
		Если ДанныеXDTO.Свойство("ПлатежноеПоручение") Тогда
			УИД = Новый УникальныйИдентификатор(ДанныеXDTO.ПлатежноеПоручение.Ссылка.Значение);
			ПлатежноеПоручение = Документы.ПлатежноеПоручение.ПолучитьСсылку(УИД);
			Если СсылкаСуществует(ПлатежноеПоручение) Тогда
				ПолученныеДанные.ПлатежноеПоручениеОснование = ПлатежноеПоручение;
			КонецЕсли;
		КонецЕсли;
		
		// Заполним ТЧ Состав
		
		Если СоставЗаполнен Тогда
			
			КонтрагентСсылка = ПолучитьКонтрагентаДляФизЛица(ДанныеXDTO.Сотрудник, КомпонентыОбмена);
			ПолученныеДанные.Контрагент = КонтрагентСсылка;
		
			Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
				ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
			Иначе
				ДатаВходящая = Дата(1, 1, 1);
			КонецЕсли;
			
			Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
				НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
			Иначе
				НомерВходящегоДокумента = "";
			КонецЕсли;
			
			Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
				НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
			Иначе
				НазначениеПлатежа = "";
			КонецЕсли;
			
			// Состав платежа
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Сумма","СуммаРасход");
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
			ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДДС");
			
			МассивСтрокСостава = Новый Массив;
			
			Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
				СтруктураДанныхСтроки.Вставить("Контрагент", КонтрагентСсылка);
				СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
				СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая);
				СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
				СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
							
				МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
				
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
				
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Списание с расчетного счета подотчетнику'"));
	
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("ДоговорВзаиморасчетов");
	КолонкиДляВключения.Добавить("СуммаРасход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	КолонкиДляИсключения = "Сделка";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
	
	Для Каждого ТекущаяСтрока Из ДанныеИБ.Состав Цикл
			
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
			ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеИБ.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДССнятиеНаличных_Получение
Процедура ДобавитьПКО_Документ_СБДССнятиеНаличных_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДССнятиеНаличных_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Выписка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДССнятиеНаличных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",              "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВхДокДата",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ВхДокНомер",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОперации",                "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",           "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПлатежноеПоручениеОснование", "ПлатежноеПоручение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаРасход",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Касса",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",       "Подразделение", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "РегламентированныйУчет",      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДДС",                   "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозОперация",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ВхДокДата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВхДокНомер",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВалютыВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НазначениеПлатежа",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособЗачетаАвансов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДДС",                "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасход",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
		Возврат;
	КонецЕсли;
								
	ПолученныеДанные.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.СнятиеНаличныхВКассу; 
	
	ПолученныеДанные.Касса = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
	
	// Для загруженных из БП документов признак устанавливаем всегда
	ПолученныеДанные.РегламентированныйУчет = Истина;
					
	// Заполним подразделение по умолчанию
	Если НЕ ДанныеXDTO.Свойство("Подразделение") ИЛИ НЕ ЗначениеЗаполнено(ДанныеXDTO.Подразделение.Значение) Тогда
		ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли; 
																		
	Если ДанныеXDTO.Свойство("ДатаВходящегоДокумента") Тогда
		ДатаВходящая = ДанныеXDTO.ДатаВходящегоДокумента;
	Иначе
		ДатаВходящая = Дата(1, 1, 1);
	КонецЕсли;
					
	Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") Тогда
		НомерВходящегоДокумента = ДанныеXDTO.НомерВходящегоДокумента;
	Иначе
		НомерВходящегоДокумента = "";
	КонецЕсли;
					
	Если ДанныеXDTO.Свойство("НазначениеПлатежа") Тогда
		НазначениеПлатежа = ДанныеXDTO.НазначениеПлатежа;
	Иначе
		НазначениеПлатежа = "";
	КонецЕсли;
									
	МассивСтрокСостава = Новый Массив;
					
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
				
	СтруктураДанныхСтроки = Новый Структура();
							
	СтруктураДанныхСтроки.Вставить("КурсВалютыВзаиморасчетов", 1);
	СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
	СтруктураДанныхСтроки.Вставить("ВхДокДата", ДатаВходящая); 
	СтруктураДанныхСтроки.Вставить("СуммаРасход", ДанныеXDTO.Сумма); 
	СтруктураДанныхСтроки.Вставить("ВхДокНомер", НомерВходящегоДокумента);
	СтруктураДанныхСтроки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
						
	МассивСтрокСостава.Добавить(СтруктураДанныхСтроки);
				
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокСостава);
КонецПроцедуры

Процедура ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	СформироватьКомментарийОбъекту(ПолученныеДанные, НСтр("ru = 'Снятие наличных в кассу'"));
		
	Если ДанныеИБ = Неопределено Тогда
		ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ПолученныеДанные);
		Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Если ПолученныеДанные.ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
		
	// Заменяем свойства, которые получили из XDTO
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("РегламентированныйУчет");
		
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	// Восстанавливаем "затертые" данные
	// Состав
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("СуммаПриход");
	КолонкиДляВключения.Добавить("КурсВалютыВзаиморасчетов");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	КолонкиДляВключения.Добавить("ВхДокДата");
	КолонкиДляВключения.Добавить("ВхДокНомер");
	КолонкиДляВключения.Добавить("НазначениеПлатежа");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Состав,
		ДанныеИБ.Состав,
		КолонкиДляВключения);
	ДанныеИБ.Состав.Загрузить(ПолученныеДанные.Состав.Выгрузить());
		
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_УведомлениеОбОстаткахПрослежТов_Получение
Процедура ДобавитьПКО_Документ_УведомлениеОбОстаткахПрослежТов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_УведомлениеОбОстаткахПрослежТов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация");
	ДобавитьПКС(СвойстваШапки, "РНПТ",        "РНПТ", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем только РНПТ
	Если ДанныеXDTO.Свойство("РНПТ")
		И ЗначениеЗаполнено(ДанныеXDTO.РНПТ)
		И НЕ (ТипЗнч(ДанныеXDTO.РНПТ) = Тип("Строка") И ДанныеXDTO.РНПТ = НСтр("ru = '<Не получен РНПТ>'")
		ИЛИ ТипЗнч(ДанныеXDTO.РНПТ) = Тип("Структура") И ДанныеXDTO.РНПТ.НомерГТД = НСтр("ru = '<Не получен РНПТ>'")) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РНПТ", ЗагрузкаГТД(ДанныеXDTO.РНПТ, КомпонентыОбмена));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		// Новые документы создавать не будем
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.РНПТ) Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеИБ.РНПТ) Тогда
			ДанныеИБ.Состояние = Перечисления.СостоянияУведомленияПрослеживаемостиТоваров.ПолученОтвет;
		КонецЕсли;
		ДанныеИБ.РНПТ = ПолученныеДанные.РНПТ;
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_УведомлениеОВвозеПрослежТоваров_Получение
Процедура ДобавитьПКО_Документ_УведомлениеОВвозеПрослежТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_УведомлениеОВвозеПрослежТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УведомлениеОВвозеПрослеживаемыхТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация");
	ДобавитьПКС(СвойстваШапки, "РНПТ",        "РНПТ", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем только РНПТ
	Если ДанныеXDTO.Свойство("РНПТ")
		И ЗначениеЗаполнено(ДанныеXDTO.РНПТ)
		И НЕ (ТипЗнч(ДанныеXDTO.РНПТ) = Тип("Строка") И ДанныеXDTO.РНПТ = НСтр("ru = '<Не получен РНПТ>'")
		ИЛИ ТипЗнч(ДанныеXDTO.РНПТ) = Тип("Структура") И ДанныеXDTO.РНПТ.НомерГТД = НСтр("ru = '<Не получен РНПТ>'")) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РНПТ", ЗагрузкаГТД(ДанныеXDTO.РНПТ, КомпонентыОбмена));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		// Новые документы создавать не будем
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.РНПТ) Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеИБ.РНПТ) Тогда
			ДанныеИБ.Состояние = Перечисления.СостоянияУведомленияПрослеживаемостиТоваров.ПолученОтвет;
		КонецЕсли;
		ДанныеИБ.РНПТ = ПолученныеДанные.РНПТ;
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "ДатаЗакрытия");
	ДобавитьПКС(СвойстваШапки, "ДатаОткрытия",          "ДатаОткрытия");
	ДобавитьПКС(СвойстваШапки, "МесяцПрописью",         "ВыводитьМесяцПрописью");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерИДатаРазрешения",  "НомерИДатаРазрешения");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "СуммаБезКопеек",        "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидСчета", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",              "Владелец", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,НомерСчета");
	ПравилоКонвертации.ПоляПоиска.Добавить("НомерСчета");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Владелец: выбираем ПКО в зависимости от типа владельца.
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ИмяПКО = "Справочник_Контрагенты_Получение";
		Если Найти(Владелец.ТипЗначения, "Организация") > 0 Тогда
			ИмяПКО = "Справочник_Организации_Получение";
		КонецЕсли;
		Если СтрНайти(Владелец.ТипЗначения, "ФизическоеЛицо") > 0 Тогда
			ВладелецСсылка = ПолучитьКонтрагентаДляФизЛица(Владелец, КомпонентыОбмена);
			ПолученныеДанные.Владелец = ВладелецСсылка;
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить(
				"Владелец", Новый Структура("Значение,ИмяПКО", Владелец, ИмяПКО));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидСчета = СокрЛП(ДанныеXDTO.ВидСчета.Значение);
	ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ПолученныеДанные.ВидСчета = ДанныеИБ.ВидСчета;
		ПолученныеДанные.ПодразделениеКомпании = ДанныеИБ.ПодразделениеКомпании;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидСчета) Тогда
		ПолученныеДанные.ВидСчета = "Расчетный";
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГТД_Получение
Процедура ДобавитьПКО_Справочник_ГТД_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ГТД_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ГТД;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НомерГТД";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ГТД_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ГТД_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "НомерГТД");
	ДобавитьПКС(СвойстваШапки, "РНПТ",         "ЯвляетсяРНПТ");
	ДобавитьПКС(СвойстваШапки, "Страна",       "СтранаПроисхождения");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ГТД_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ГТД_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные <> Неопределено Тогда		
		Если ПолученныеДанные.Наименование = НСтр("ru = '<Не получен РНПТ>'") Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГТДСтрока_Получение
Процедура ДобавитьПКО_Справочник_ГТДСтрока_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ГТДСтрока_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ГТД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "НомерГТД");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыВзаиморасчетов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДоговорыКонтрагентов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",                   "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидДоговора",                            "ВидДоговора", , "Перечисление_ВидыДоговоров_Получение");
	ДобавитьПКС(СвойстваШапки, "Владелец",                               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаКонца",                              "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                             "Дата");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторГосударственногоКонтракта", "ИдентификаторГосКонтракта");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                            "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "РасчетыВУсловныхЕдиницах",               "РасчетыВУсловныхЕдиницах");
	ДобавитьПКС(СвойстваШапки, "СрокОплатыЗадолженности",                "СрокКонтроляОплатыВДнях");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                                 "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Внутренний",                             "", 1);
	ДобавитьПКС(СвойстваШапки, "ДляАвтосалона",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "ДляАвтосервиса",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКомпании",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипДоговора",                            "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,ВидДоговора,Владелец,ДатаНачала,НомерДоговора,Организация");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,ВидДоговора,Владелец,Наименование,Организация");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	
	
	Попытка
		// При первичном заполнении базы, работы фонового задания - когда ключ не доступен и
		// не инициализирован параметр сеанса ПараметрыСеанса.МаскаЛицензирования		
		ЕстьПодсистемаАвтосалон = ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон");
	Исключение
		ЕстьПодсистемаАвтосалон = Истина;
	КонецПопытки;
	
	ПолученныеДанные.ДляАвтосалона  = ЕстьПодсистемаАвтосалон;
	ПолученныеДанные.ДляАвтосервиса = Истина;
	ПолученныеДанные.Внутренний     = Истина;
	
	ПолученныеДанные.ТипДоговора = Перечисления.ТипыДоговоров.Договор
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные <> Неопределено Тогда		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидДоговора) Тогда
			ПолученныеДанные.ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнойКонтрагент",     "ГоловнойКонтрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ИНН",                    "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",              "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НалоговыйНомер",         "НалоговыйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                   "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет", "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель",               "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "СтранаРегистрации",      "СтранаРегистрации", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ВидКонтрагента",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Фамилия",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ФормаСобственности",     "ЮридическоеФизическоеЛицо", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУсловиеПоискаКонтрагента(КомпонентыОбмена, ДанныеXDTO);
	
	Если ДанныеXDTO.КлючевыеСвойства.ЮридическоеФизическоеЛицо.Значение = "ЮридическоеЛицо" Тогда
			ПолученныеДанные.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
		ИначеЕсли ДанныеXDTO.КлючевыеСвойства.ЮридическоеФизическоеЛицо.Значение = "ФизическоеЛицо"
				И ДанныеXDTO.КлючевыеСвойства.Свойство("РегистрационныйНомерНерезидента")
				И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.РегистрационныйНомерНерезидента) Тогда 
			
			ПолученныеДанные.ФормаСобственности	= Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
		Иначе
			ПолученныеДанные.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
			
			Если СтрНайти(ДанныеXDTO.КлючевыеСвойства.Наименование, " ") > 0 Тогда
				ПолученныеДанные.Фамилия = Лев(
						ДанныеXDTO.КлючевыеСвойства.Наименование,
						СтрНайти(ДанныеXDTO.КлючевыеСвойства.Наименование, " ") - 1);
			Иначе
				ПолученныеДанные.Фамилия = СокрЛП(ДанныеXDTO.КлючевыеСвойства.Наименование);
			КонецЕсли;
		КонецЕсли;
	
	 	ДанныеГруппы = Неопределено;
	
	Если ДанныеXDTO.Свойство("Группа")  Тогда
		ДанныеГруппы = ДанныеXDTO.Группа;
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Группа") Тогда 
		ДанныеГруппы = ДанныеXDTO.КлючевыеСвойства.Группа; 
	КонецЕсли;
	
	Если ДанныеГруппы <> Неопределено Тогда 
		
		Если СтрНайти(НРег(ДанныеГруппы.Наименование), "поставщик") Тогда
			ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Поставщик;
		ИначеЕсли СтрНайти(НРег(ДанныеГруппы.Наименование), "покупател") Тогда 
			ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Покупатель;
		Иначе
			ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Прочее;
		КонецЕсли;
	Иначе
		ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Прочее;
	КонецЕсли;	
		
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
				
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				Продолжить;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;		
			Иначе
				Продолжить;
			КонецЕсли;
			
			ДобавитьКонтактнуюИнформацию(ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		
		// Заполним контактную информацию
		ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.КонтактнаяИнформация.Загрузить(ДанныеИБ.КонтактнаяИнформация.Выгрузить());
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_КонтрагентыФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_КонтрагентыФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",       "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "Имя",                "Имя");
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "ФИО");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "ФИО");
	ДобавитьПКС(СвойстваШапки, "Отчество",           "Отчество");
	ДобавитьПКС(СвойстваШапки, "Пол",                "Пол", , "Перечисление_Пол_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочники_КонтрагентыФизЛицаГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "Фамилия",            "Фамилия");
	ДобавитьПКС(СвойстваШапки, "ВидКонтрагента",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Сотрудник",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ФормаСобственности", "", 1, "Перечисление_ФизическоеЮридическоеЛицо");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_КонтрагентыФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо;
	ПолученныеДанные.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
	
		
	Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
		
		ДанныеФИО = ДанныеXDTO.ДанныеФИО[ДанныеXDTO.ДанныеФИО.Количество() - 1];
		ПолученныеДанные.Фамилия = ДанныеФИО.Фамилия;
		ПолученныеДанные.Имя = ДанныеФИО.Имя;
		ПолученныеДанные.Отчество = ДанныеФИО.Отчество;
			
	КонецЕсли;
	
	ПолученныеДанные.Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(ПолученныеДанные.Наименование, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                    "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",              "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                   "ОГРН");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет", "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Префикс",                "Префикс");
	ДобавитьПКС(СвойстваШапки, "ФормаСобственности",     "ЮридическоеФизическоеЛицо", , "Перечисление_ФизическоеЮридическоеЛицо_Организация");
	ДобавитьПКС(СвойстваШапки, "",                       "ФизическоеЛицо", 1);
	ДобавитьПКС(СвойстваШапки, "Имя",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Отчество",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Фамилия",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;  
	
	Если ДанныеXDTO.Свойство("ФизическоеЛицо") И ЗначениеЗаполнено(ДанныеXDTO.ФизическоеЛицо) Тогда
		
		ФИО = СтрРазделить(ДанныеXDTO.ФизическоеЛицо.ФИО, " ");
		
		ПолученныеДанные.Фамилия = ?(
			ДанныеXDTO.ФизическоеЛицо.Свойство("Фамилия"),
			ДанныеXDTO.ФизическоеЛицо.Фамилия,
			?(ФИО.Количество()> 0 , ФИО[0], " ")
		);
		
		ПолученныеДанные.Имя = ?(
			ДанныеXDTO.ФизическоеЛицо.Свойство("Имя"),
			ДанныеXDTO.ФизическоеЛицо.Имя,
			?(ФИО.Количество()> 1 , ФИО[1], " ")
		);
		
		ПолученныеДанные.Отчество = ?(
			ДанныеXDTO.ФизическоеЛицо.Свойство("Отчество"),
			ДанныеXDTO.ФизическоеЛицо.Отчество,
			?(ФИО.Количество()> 2 , ФИО[2], " ")
		);
	
	КонецЕсли;
	
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.ФормаСобственности) Тогда
			ПолученныеДанные.ФормаСобственности = ДанныеИБ.ФормаСобственности;
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Патенты_Получение
Процедура ДобавитьПКО_Справочник_Патенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Патенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Патенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Патенты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Патенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",                          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаВыдачи",                        "ДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                        "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",                     "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "КБК",                               "КБК");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОргана",               "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "КодПоОКТМО",                        "КодПоОКТМО");
	ДобавитьПКС(СвойстваШапки, "НомерПатента",                      "НомерПатента");
	ДобавитьПКС(СвойстваШапки, "ПотенциальноВозможныйГодовойДоход", "ПотенциальноВозможныйГодовойДоход");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,НомерПатента");
КонецПроцедуры

Процедура ПКО_Справочник_Патенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.Наименование = "Патент";
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПодразделенияКомпании;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Организация",  "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_Подразделения_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СотрудникиФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_СотрудникиФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СотрудникиФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Сотрудники;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СотрудникиФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",       "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "Имя",                "Имя");
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "ФИО");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "ФИО");
	ДобавитьПКС(СвойстваШапки, "Отчество",           "Отчество");
	ДобавитьПКС(СвойстваШапки, "Пол",                "Пол", , "Перечисление_Пол_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочники_СотрудникиГруппа");
	ДобавитьПКС(СвойстваШапки, "Фамилия",            "Фамилия");
	ДобавитьПКС(СвойстваШапки, "ВидКонтрагента",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Сотрудник",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ФормаСобственности", "", 1, "Перечисление_ФизическоеЮридическоеЛицо");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_СотрудникиФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо;
	ПолученныеДанные.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
	
		
	Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
		
		ДанныеФИО = ДанныеXDTO.ДанныеФИО[ДанныеXDTO.ДанныеФИО.Количество() - 1];
		ПолученныеДанные.Фамилия = ДанныеФИО.Фамилия;
		ПолученныеДанные.Имя = ДанныеФИО.Имя;
		ПолученныеДанные.Отчество = ДанныеФИО.Отчество;
			
	КонецЕсли;
	
	ПолученныеДанные.Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(ПолученныеДанные.Наименование, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочники_КонтрагентыФизЛицаГруппа_Получение
Процедура ДобавитьПКО_Справочники_КонтрагентыФизЛицаГруппа_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочники_КонтрагентыФизЛицаГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочники_КонтрагентыФизЛицаГруппа_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_АвтомобилиГруппа_Отправка
Процедура ДобавитьПКО_Справочник_АвтомобилиГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_АвтомобилиГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Автомобили;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_АвтомобилиГруппа_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Автоработы_Группа
Процедура ДобавитьПКО_Справочник_Автоработы_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Автоработы_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Автоработы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_Автоработы_Группа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Банки_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "СВИФТБИК",     "СВИФТБИК");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_Банки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
		СВИФТБИК = ДанныеИБ.Код;
	Иначе
		СВИФТБИК = Сред(ДанныеИБ.СВИФТБИК,1,9);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СВИФТБИК) Тогда
		СВИФТБИК = "000000000";
	КонецЕсли;
		
	ДанныеXDTO.Вставить("БИК", СВИФТБИК);	
	ДанныеXDTO.КлючевыеСвойства.Вставить("БИК", СВИФТБИК);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЗагружаетсяИзИнтернета", "ЗагружаетсяИзИнтернета");
	ДобавитьПКС(СвойстваШапки, "Код",                    "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Наценка",                "Наценка");
	ДобавитьПКС(СвойстваШапки, "ОсновнаяВалюта",         "ОсновнаяВалюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",       "ПараметрыПрописи");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения
Процедура ДобавитьПКО_Справочник_КлассификаторЕдиницИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторЕдиницИзмерения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_КлассификаторЕдиницИзмерения_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_КлассификаторЕдиницИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
	
		Код = ДанныеИБ.МеждународноеСокращение;
		Если Не ЗначениеЗаполнено(Код) Тогда
			Код = ДанныеИБ.Наименование;
		КонецЕсли;
		
		Код = Лев(Код, 4);
		
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторТНВЭД
Процедура ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторТНВЭД";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КодТНВЭД";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_КлассификаторЕдиницИзмерения");
	ДобавитьПКС(СвойстваШапки, "Код",              "КодТНВЭД");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Прослеживаемый",   "ПрослеживаемыйТовар");
	ДобавитьПКС(СвойстваШапки, "СырьевойТовар",    "СырьевойТовар");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_МоделиГруппа_Отправка
Процедура ДобавитьПКО_Справочник_МоделиГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_МоделиГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Модели;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_МоделиГруппа_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыКомпанииГруппа
Процедура ДобавитьПКО_Справочник_СкладыКомпанииГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СкладыКомпанииГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СкладыКомпании;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СкладыКомпанииГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС
Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДДС;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиДДС_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДДС_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Т.к. данные не передаются установим вид движения "Прочий"
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидДвижения) Тогда
		ПолученныеДанные.ВидДвижения = Перечисления.ВидыДвижений.Прочее;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДСГруппа
Процедура ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДСГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДДС;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДСГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа");

КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",          "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ТипыЦен;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОкруглятьВБольшуюСторону", "ОкруглятьВБольшуюСторону");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "ТочностьОкругления", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаЦены",               "ВалютаЦены", 1, "Справочник_Валюты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаЦены,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ДанныеИБ.ЭтоГруппа Тогда
	
		Если ЗначениеЗаполнено(ДанныеИБ.ВалютаЦены) Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ВалютаЦены, "Справочник_Валюты"));
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), "Справочник_Валюты"));
		КонецЕсли;
		
		Если ДанныеИБ.Точность = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ТочностьОкругления", Новый Структура("Значение", 0.1));
		ИначеЕсли ДанныеИБ.Точность = 2 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ТочностьОкругления", Новый Структура("Значение", 0.01));
		ИначеЕсли ДанныеИБ.Точность = -1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ТочностьОкругления", Новый Структура("Значение", 1));
		ИначеЕсли ДанныеИБ.Точность = -2 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ТочностьОкругления", Новый Структура("Значение", 10));	 
		ИначеЕсли ДанныеИБ.Точность = -3 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ТочностьОкругления", Новый Структура("Значение", 100));
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("ТочностьОкругления", Новый Структура("Значение", 0));
		КонецЕсли;
		
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЦеновыеГруппы
Процедура ДобавитьПКО_Справочник_ЦеновыеГруппы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЦеновыеГруппы";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЦеновыеГруппы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЦеновыеГруппы";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочники_СотрудникиГруппа
Процедура ДобавитьПКО_Справочники_СотрудникиГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочники_СотрудникиГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Сотрудники;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочники_СотрудникиГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// Перечисление_ВидыДоговоров_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыДоговоров_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоров;
		ПравилоКонвертации.ТипXDTO   = "ВидыДоговоров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.Зарплата, "Прочее");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.Кредит, "Прочее");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.Подотчет, "Прочее");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.Покупка, "СПоставщиком");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.Продажа, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.Прочее, "Прочее");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.СКомиссионером, "СКомиссионером");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.СКомитентом, "СКомитентом");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыНоменклатуры_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыНоменклатуры_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.Автомобили, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.Диски, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.Комплект, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.ЛКМ, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.Набор, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.НомерныеАгрегаты, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.Опции, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.ПрочиеАктивы, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.Тара, "МногооборотнаяТара");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.Товар, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.Услуга, "Услуга");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНоменклатуры.Шины, "Товар");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_Пол.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_Пол";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическихЛиц;
		ПравилоКонвертации.ТипXDTO   = "Пол";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Женский, "Женский");
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Мужской, "Мужской");
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.НеУказан, "Мужской");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Справочник_ВидыКонтактнойИнформации_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Справочник_ВидыКонтактнойИнформации_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПодразделенияКомпании, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailСотрудника, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ВебСтраницаКонтрагента, "ВебСтраница");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ВебСтраницаОрганизации, "ВебСтраница");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ВебСтраницаПодразделенияКомпании, "ВебСтраница");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ВебСтраницаСотрудника, "ВебСтраница");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПодразделенияКомпании, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияСотрудника, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресСотрудника, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияКомпании, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияКомпании, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксСотрудника, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресПодразделенияКомпании, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресСотрудника, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресПодразделенияКомпании, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресСотрудника, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// Перечисление_ВидыДоговоров_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыДоговоров_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоров;
		ПравилоКонвертации.ТипXDTO   = "ВидыДоговоров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыДоговоров.Покупка);
		ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыДоговоров.Продажа);
		ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыДоговоров.Прочее);
		ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ВидыДоговоров.СКомиссионером);
		ЗначенияДляПолучения.Вставить("СКомиссионеромНаЗакупку", Перечисления.ВидыДоговоров.СКомиссионером);
		ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ВидыДоговоров.СКомитентом);
		ЗначенияДляПолучения.Вставить("СКомитентомНаЗакупку", Перечисления.ВидыДоговоров.СКомитентом);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_Пол_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_Пол_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическихЛиц;
		ПравилоКонвертации.ТипXDTO   = "Пол";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическихЛиц.Женский);
		ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическихЛиц.Мужской);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ФизическоеЮридическоеЛицо_Организация.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ФизическоеЮридическоеЛицо_Организация";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ФормыСобственности;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ФормыСобственности.ЮридическоеЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// Перечисление_СпособыЗачетаАвансов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыЗачетаАвансов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыЗачетаАвансов;
	ПравилоКонвертации.ТипXDTO   = "СпособыПогашенияЗадолженности";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыЗачетаАвансов.Автоматически, "Автоматически");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыЗачетаАвансов.НеЗачитывать, "НеПогашать");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыЗачетаАвансов.ПоДокументу, "ПоДокументу");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Автоматически", Перечисления.СпособыЗачетаАвансов.Автоматически);
	ЗначенияДляПолучения.Вставить("НеПогашать", Перечисления.СпособыЗачетаАвансов.НеЗачитывать);
	ЗначенияДляПолучения.Вставить("ПоДокументу", Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ФизическоеЮридическоеЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ФизическоеЮридическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ФормыСобственности;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ФормыСобственности.ОбособленноеПодразделение, "ЮридическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ФормыСобственности.ПрочаяФормаСобственности, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ФормыСобственности.ЧастноеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ФормыСобственности.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ФормыСобственности.ОбособленноеПодразделение);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ФормыСобственности.ПрочаяФормаСобственности);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ФормыСобственности.ЧастноеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ФормыСобственности.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ГТДСтроки(ГТД, НаименованиеГТД, Страна, РНПТ, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ГТД)
		И НЕ ЗначениеЗаполнено(НаименованиеГТД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПредставлениеГТД = НаименованиеГТД;
	
	// По формату ГТД может быть до 30 символов
	Если СтрДлина(ПредставлениеГТД) > 30 Тогда
		ПредставлениеГТД = Лев(ПредставлениеГТД, 30);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда		
		Значение = Новый Структура;
		Значение.Вставить("Ссылка", ГТД);
		Значение.Вставить("НомерГТД", ПредставлениеГТД);
		Значение.Вставить("Комментарий", "");
		Значение.Вставить("СтранаВвозаНеРФ", Ложь);
		Значение.Вставить("СтранаПроисхождения", Страна);
		Значение.Вставить("ЯвляетсяРНПТ", РНПТ);
		Возврат Новый Структура("ИмяПКО,Значение", "Справочник_СтруктураГТД_Отправка", Значение);		
	Иначе	
		Возврат ПредставлениеГТД;	
	КонецЕсли;
КонецФункции
Функция ДанныеВводВЭксплуатацию(ДанныеИБ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВводВЭксплуатациюТовары.Номенклатура КАК Номенклатура,
				|	ВводВЭксплуатациюТовары.Количество * ВводВЭксплуатациюТовары.Коэффициент КАК Количество,
				|	ВводВЭксплуатациюТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ВводВЭксплуатациюТовары.Актив.СрокПолезногоИспользования КАК СрокЭксплуатации,
				|	ВводВЭксплуатациюТовары.МОЛ КАК ФизическоеЛицо,
				|	ВЫБОР
				|		КОГДА ВводВЭксплуатациюТовары.СтатьяРасходовПоАмортизации = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
				|			ТОГДА &НаименованиеНазначения
				|		ИНАЧЕ ВводВЭксплуатациюТовары.СтатьяРасходовПоАмортизации.Наименование
				|	КОНЕЦ КАК НаименованиеНазначенияИспользования,
				|	ВЫБОР
				|		КОГДА ВводВЭксплуатациюТовары.СтатьяРасходовПоАмортизации = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
				|			ТОГДА &НаименованиеНазначения
				|		ИНАЧЕ ВводВЭксплуатациюТовары.СтатьяРасходовПоАмортизации.Наименование
				|	КОНЕЦ КАК НаименованиеСпособаОтраженияРасходов,
				|	ВЫБОР
				|		КОГДА ВводВЭксплуатациюТовары.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.Инструменты)
				|				ИЛИ ВводВЭксплуатациюТовары.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы)
				|			ТОГДА ""ИнвентарьИХозяйственныеПринадлежности""
				|		ИНАЧЕ ""СпецоснасткаИСпецодеждаНаСкладе""
				|	КОНЕЦ КАК ТипЗапасов,
				|	ВЫБОР
				|		КОГДА ВводВЭксплуатациюТовары.СтатьяРасходовПоАмортизации = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
				|			ТОГДА &СтатьяДоходов
				|		ИНАЧЕ ВводВЭксплуатациюТовары.СтатьяРасходовПоАмортизации
				|	КОНЕЦ КАК СтатьяРасходовПоАмортизации
				|ИЗ
				|	Документ.ВводВЭксплуатацию.Товары КАК ВводВЭксплуатациюТовары
				|ГДЕ
				|	ВводВЭксплуатациюТовары.Ссылка = &Ссылка
				|	И (ВводВЭксплуатациюТовары.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.СпецОснастка)
				|			ИЛИ ВводВЭксплуатациюТовары.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.Спецодежда)
				|			ИЛИ ВводВЭксплуатациюТовары.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.Инструменты)
				|			ИЛИ ВводВЭксплуатациюТовары.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы))
				|	И ВводВЭксплуатациюТовары.ТипЭксплуатации.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизации.СтопроцентныйПриВводе)";
					
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("НаименованиеНазначения", Справочники.СтатьиДоходовИРасходов.МалоценноеОборудованиеИЗапасы.Наименование);
	Запрос.УстановитьПараметр("СтатьяДоходов", Справочники.СтатьиДоходовИРасходов.МалоценноеОборудованиеИЗапасы);
	Товары = Запрос.Выполнить().Выгрузить(); 
			
	Товары.Колонки.Добавить("СчетУчета"); 
	Для Каждого Строка Из Товары Цикл	
		 Строка.СчетУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.СтатьяРасходовПоАмортизации, "КоррСчет");  	
	КонецЦикла;
		
	Возврат Товары;
КонецФункции
Функция ДанныеДоговораВзаиморасчетов(ДоговорВзаиморасчетов)
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДоговорВзаиморасчетов,
		"СпособЗачетаАвансов,СпособВеденияВзаиморасчетов");
	Возврат ДанныеДоговора;
КонецФункции
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Функция ДанныеСписаниеАктива(ДанныеИБ,КомпонентыОбмена)
	Запрос = Новый Запрос;  
	Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПрочиеАктивыВЭксплуатации.ПрочийАктив КАК ПрочийАктив,
				|	ПрочиеАктивыВЭксплуатации.МОЛ КАК Мол,
				|	ПрочиеАктивыВЭксплуатации.ПрочийАктив.Номенклатура КАК Номенклатура,
				|	ПрочиеАктивыВЭксплуатации.ПрочийАктив.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ВЫБОР
				|		КОГДА ПрочиеАктивыВЭксплуатации.ПрочийАктив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.Инструменты)
				|				ИЛИ ПрочиеАктивыВЭксплуатации.ПрочийАктив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы)
				|			ТОГДА ""ИнвентарьИХозяйственныеПринадлежности""
				|		ИНАЧЕ ""СпецоснасткаИСпецодеждаНаСкладе""
				|	КОНЕЦ КАК ТипЗапасов,
				|	ПрочиеАктивыВЭксплуатации.Количество КАК Количество,
				|	ПрочиеАктивыВЭксплуатации.ПодразделениеКомпании КАК ПодразделениеКомпании
				|ПОМЕСТИТЬ ВТ_Активы
				|ИЗ
				|	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
				|ГДЕ
				|	ПрочиеАктивыВЭксплуатации.Регистратор = &Ссылка
				|	И (ПрочиеАктивыВЭксплуатации.ПрочийАктив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.СпецОснастка)
				|			ИЛИ ПрочиеАктивыВЭксплуатации.ПрочийАктив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.Спецодежда)
				|			ИЛИ ПрочиеАктивыВЭксплуатации.ПрочийАктив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.Инструменты)
				|			ИЛИ ПрочиеАктивыВЭксплуатации.ПрочийАктив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы))
				|	И ПрочиеАктивыВЭксплуатации.ТипЭксплуатации.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизации.СтопроцентныйПриВводе)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЕСТЬNULL(ВЫРАЗИТЬ(ПрочиеАктивыВЭксплуатации.Регистратор КАК Документ.ВводВЭксплуатацию), ЗНАЧЕНИЕ(Документ.ВводВЭксплуатацию.ПустаяСсылка)) КАК ДокументПередачи,
				|	ВТ_Активы.ПрочийАктив КАК ПрочийАктив,
				|	ВТ_Активы.Мол КАК ФизическоеЛицо,
				|	ВТ_Активы.ПодразделениеКомпании КАК ПодразделениеКомпании
				|ИЗ
				|	ВТ_Активы КАК ВТ_Активы
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
				|		ПО ВТ_Активы.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив
				|			И ВТ_Активы.Мол = ПрочиеАктивыВЭксплуатации.МОЛ
				|			И ВТ_Активы.ПодразделениеКомпании = ПрочиеАктивыВЭксплуатации.ПодразделениеКомпании
				|ГДЕ
				|	ПрочиеАктивыВЭксплуатации.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ВВодВЭксплуатацию)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Активы.ПрочийАктив КАК ПрочийАктив,
				|	ВТ_Активы.Мол КАК ФизическоеЛицо,
				|	ВТ_Активы.Номенклатура КАК Номенклатура,
				|	ВТ_Активы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ВТ_Активы.ТипЗапасов КАК ТипЗапасов,
				|	ВТ_Активы.Количество КАК Количество,
				|	ВТ_Активы.ПодразделениеКомпании КАК ПодразделениеКомпании
				|ИЗ
				|	ВТ_Активы КАК ВТ_Активы";
					
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка); 
	Запросы = Запрос.ВыполнитьПакет();
	Товары = Запросы[2].Выгрузить();
	Товары.Колонки.Добавить("ДокументПередачи");
		
	ТаблицаВводов = Запросы[1].Выгрузить();
		
	Для Каждого СтрокаТоваров Из Товары Цикл
		ОтборАктив = Новый Структура();
		ОтборАктив.Вставить("ПрочийАктив", СтрокаТоваров.ПрочийАктив);
		ОтборАктив.Вставить("ФизическоеЛицо", СтрокаТоваров.ФизическоеЛицо);
		ОтборАктив.Вставить("ПодразделениеКомпании", СтрокаТоваров.ПодразделениеКомпании);
			
		СтрокиВвода = ТаблицаВводов.НайтиСтроки(ОтборАктив);
		
		Если СтрокиВвода.Количество()>0 Тогда
			СтрокаТоваров.ДокументПередачи = СтрокиВвода[0].ДокументПередачи;
		КонецЕсли;
				
	КонецЦикла;
					
	Возврат Товары;
КонецФункции
Функция ДанныеТЧВозвратАвтомобилейПоставщику(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
		
	ТаблицаАвтомобилей = Новый ТаблицаЗначений();
	ТаблицаАвтомобилей.Колонки.Добавить("НомерСтрокиДокумента");
	ТаблицаАвтомобилей.Колонки.Добавить("Номенклатура");
	ТаблицаАвтомобилей.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаАвтомобилей.Колонки.Добавить("Количество");
	ТаблицаАвтомобилей.Колонки.Добавить("Сумма");
	ТаблицаАвтомобилей.Колонки.Добавить("Цена");
	ТаблицаАвтомобилей.Колонки.Добавить("СтавкаНДС");
	ТаблицаАвтомобилей.Колонки.Добавить("ГТД");
	ТаблицаАвтомобилей.Колонки.Добавить("СуммаНДС");
	ТаблицаАвтомобилей.Колонки.Добавить("ТипЗапасов");
	ТаблицаАвтомобилей.Колонки.Добавить("ПрослеживаемыйТовар");
		
	ЭтоВозвратКомитенту = (ДанныеИБ.ХозОперация = Справочники.ХозОперации.ВозвратАвтомобилейПоставщикуКомиссия);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ЦенаВключаетНДС
		|			ТОГДА ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего
		|		ИНАЧЕ ВозвратПоставщикуАвтомобилейАвтомобили.СуммаВсего - ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВозвратПоставщикуАвтомобилейАвтомобили.СтавкаНДС КАК Ставка,
		|	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль.ГТД КАК ГТД,
		|	ВозвратПоставщикуАвтомобилейАвтомобили.Автомобиль.Прослеживаемый
		|		И &УчетПоГТД КАК ПрослеживаемыйТовар,
		|	ВозвратПоставщикуАвтомобилейАвтомобили.СтавкаНДС.Ставка КАК ЗначениеСтавки,
		|	ВозвратПоставщикуАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА &ЭтоВозвратКомитенту
		|			ТОГДА ""КомиссионныеТовары""
		|		ИНАЧЕ ""СобственныеТовары""
		|	КОНЕЦ КАК ТипЗапасов,
		|	ВозвратПоставщикуАвтомобилейАвтомобили.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля
		|ИЗ
		|	Документ.ВозвратПоставщикуАвтомобилей.Автомобили КАК ВозвратПоставщикуАвтомобилейАвтомобили
		|ГДЕ
		|	ВозвратПоставщикуАвтомобилейАвтомобили.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратПоставщикуАвтомобилейТовары.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
		|	СУММА(ВЫБОР
		|			КОГДА &ЦенаВключаетНДС
		|				ТОГДА ВозвратПоставщикуАвтомобилейТовары.СуммаВсего
		|			ИНАЧЕ ВозвратПоставщикуАвтомобилейТовары.СуммаВсего - ВозвратПоставщикуАвтомобилейТовары.СуммаНДС
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ВозвратПоставщикуАвтомобилейТовары.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	Документ.ВозвратПоставщикуАвтомобилей.Товары КАК ВозвратПоставщикуАвтомобилейТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратПоставщикуАвтомобилейТовары.ИдентификаторАвтомобиля";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ЭтоВозвратКомитенту", ЭтоВозвратКомитенту);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", СуммаВключаетНДС); 
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
		
	ПакетЗапроса = Запрос.ВыполнитьПакет();
		
	Автомобили = ПакетЗапроса[0].Выгрузить();
	Товары = ПакетЗапроса[1].Выгрузить();
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
		
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из Автомобили Цикл
			
		НоваяСтрока = ТаблицаАвтомобилей.Добавить();
		НоваяСтрока.НомерСтрокиДокумента = НомерСтроки;
		НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ГТД = ТекущаяСтрока.ГТД;
		НоваяСтрока.ПрослеживаемыйТовар = ТекущаяСтрока.ПрослеживаемыйТовар;
			
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторАвтомобиля", ТекущаяСтрока.ИдентификаторАвтомобиля);
		НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
			
		Сумма = ТекущаяСтрока.Сумма + ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].Сумма, 0); 
		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.СуммаНДС = ТекущаяСтрока.СуммаНДС + ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].СуммаНДС, 0);
			
		НоваяСтрока.Цена = Сумма;
		НоваяСтрока.ТипЗапасов = ТекущаяСтрока.ТипЗапасов;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
		
	ТаблицаАвтомобилейСГТД = ТоварыСЗаполнениемГТД(ТаблицаАвтомобилей, КомпонентыОбмена);
		
	Возврат ТаблицаАвтомобилейСГТД;
КонецФункции
Функция ДанныеТЧВозвратОтПокупателяАвтомобилей(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС, Налогообложение)
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
		
	ТаблицаАвтомобилей = Новый ТаблицаЗначений();
	ТаблицаАвтомобилей.Колонки.Добавить("НомерСтрокиДокумента");
	ТаблицаАвтомобилей.Колонки.Добавить("Номенклатура");
	ТаблицаАвтомобилей.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаАвтомобилей.Колонки.Добавить("Количество");
	ТаблицаАвтомобилей.Колонки.Добавить("Сумма");
	ТаблицаАвтомобилей.Колонки.Добавить("Цена");
	ТаблицаАвтомобилей.Колонки.Добавить("СтавкаНДС");
	ТаблицаАвтомобилей.Колонки.Добавить("ГТД");
	ТаблицаАвтомобилей.Колонки.Добавить("СуммаНДС");
	ТаблицаАвтомобилей.Колонки.Добавить("ТипЗапасов");
	ТаблицаАвтомобилей.Колонки.Добавить("ПрослеживаемыйТовар");
	ТаблицаАвтомобилей.Колонки.Добавить("ВозвратПодДеятельность");
	ТаблицаАвтомобилей.Колонки.Добавить("Себестоимость");
	
		
	ЭтоВозвратОтКомиссионера = ДанныеИБ.ХозОперация = Справочники.ХозОперации.ВозвратАвтомобилейОтПокупателяКомиссия;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратОтПокупателяАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ЦенаВключаетНДС
		|			ТОГДА ВозвратОтПокупателяАвтомобилейАвтомобили.СуммаВсего
		|		ИНАЧЕ ВозвратОтПокупателяАвтомобилейАвтомобили.СуммаВсего - ВозвратОтПокупателяАвтомобилейАвтомобили.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВозвратОтПокупателяАвтомобилейАвтомобили.СтавкаНДС КАК Ставка,
		|	ВозвратОтПокупателяАвтомобилейАвтомобили.Автомобиль.ГТД КАК ГТД,
		|	ВозвратОтПокупателяАвтомобилейАвтомобили.Автомобиль.Прослеживаемый
		|		И &УчетПоГТД КАК ПрослеживаемыйТовар,
		|	ВозвратОтПокупателяАвтомобилейАвтомобили.СтавкаНДС.Ставка КАК ЗначениеСтавки,
		|	ВозвратОтПокупателяАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА &ЭтоВозвратОтКомиссионера
		|			ТОГДА ""КомиссионныеТовары""
		|		ИНАЧЕ ""СобственныеТовары""
		|	КОНЕЦ КАК ТипЗапасов,
		|	0 КАК Себестоимость,
		|	ВозвратОтПокупателяАвтомобилейАвтомобили.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля
		|ИЗ
		|	Документ.ВозвратОтПокупателяАвтомобилей.Автомобили КАК ВозвратОтПокупателяАвтомобилейАвтомобили
		|ГДЕ
		|	ВозвратОтПокупателяАвтомобилейАвтомобили.Ссылка = &Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратОтПокупателяАвтомобилейТовары.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
		|	СУММА(ВЫБОР
		|			КОГДА &ЦенаВключаетНДС
		|				ТОГДА ВозвратОтПокупателяАвтомобилейТовары.СуммаВсего
		|			ИНАЧЕ ВозвратОтПокупателяАвтомобилейТовары.СуммаВсего - ВозвратОтПокупателяАвтомобилейТовары.СуммаНДС
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ВозвратОтПокупателяАвтомобилейТовары.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	Документ.ВозвратОтПокупателяАвтомобилей.Товары КАК ВозвратОтПокупателяАвтомобилейТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратОтПокупателяАвтомобилейТовары.ИдентификаторАвтомобиля";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ЭтоВозвратОтКомиссионера", ЭтоВозвратОтКомиссионера);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", СуммаВключаетНДС); 
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
		
	ПакетЗапроса = Запрос.ВыполнитьПакет();
		
	Автомобили = ПакетЗапроса[0].Выгрузить();
	Товары = ПакетЗапроса[1].Выгрузить();
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
		
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из Автомобили Цикл
			
		НоваяСтрока = ТаблицаАвтомобилей.Добавить();
		НоваяСтрока.НомерСтрокиДокумента = НомерСтроки;
		НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ГТД = ТекущаяСтрока.ГТД;
		НоваяСтрока.ПрослеживаемыйТовар = ТекущаяСтрока.ПрослеживаемыйТовар;
			
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторАвтомобиля", ТекущаяСтрока.ИдентификаторАвтомобиля);
		НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
			
		Сумма = ТекущаяСтрока.Сумма + ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].Сумма, 0); 
		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.СуммаНДС = ТекущаяСтрока.СуммаНДС + ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].СуммаНДС, 0);
			
		НоваяСтрока.Цена = Сумма;
		НоваяСтрока.Себестоимость = Сумма;
		НоваяСтрока.ТипЗапасов = ТекущаяСтрока.ТипЗапасов;
		НоваяСтрока.ВозвратПодДеятельность = Налогообложение;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
		
	ТаблицаАвтомобилейСГТД = ТоварыСЗаполнениемГТД(ТаблицаАвтомобилей, КомпонентыОбмена);
		
	Возврат ТаблицаАвтомобилейСГТД;
КонецФункции
Функция ДанныеТЧВозвратТоваровПоставщику(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("ГТД");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар");
	
	КомиссионныйТовар = (ДанныеИБ.ХозОперация = Справочники.ХозОперации.ВозвратТоваровПоставщикуКомиссия);
	ТипЗапасов = ?(КомиссионныйТовар, "КомиссионныеТовары", "СобственныеТовары");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВозвратПоставщикуТовары.Количество * ВозвратПоставщикуТовары.Коэффициент) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА &ЦенаВключаетНДС
	|				ТОГДА ВозвратПоставщикуТовары.СуммаВсего
	|			ИНАЧЕ ВозвратПоставщикуТовары.СуммаВсего - ВозвратПоставщикуТовары.СуммаНДС
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВозвратПоставщикуТовары.СуммаНДС) КАК СуммаНДС,
	|	ВозвратПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратПоставщикуТовары.СтавкаНДС.Ставка КАК ЗначениеСтавкиНДС,
	|	ВозвратПоставщикуТовары.ГТД КАК ГТД,
	|	ВозвратПоставщикуТовары.Номенклатура.Прослеживаемый
	|		И &УчетПоГТД КАК ПрослеживаемыйТовар
	|ИЗ
	|	Документ.ВозвратПоставщику.Товары КАК ВозвратПоставщикуТовары
	|ГДЕ
	|	ВозвратПоставщикуТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратПоставщикуТовары.Номенклатура,
	|	ВозвратПоставщикуТовары.СтавкаНДС,
	|	ВозвратПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ВозвратПоставщикуТовары.СтавкаНДС.Ставка,
	|	ВозвратПоставщикуТовары.Номенклатура.Прослеживаемый
	|		И &УчетПоГТД,
	|	ВозвратПоставщикуТовары.ГТД";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", СуммаВключаетНДС);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Если УчетПоГТД И Товары.Количество() > 0 Тогда
		ТаблицаСФ = СформироватьТЧ_С_ГТД(ДанныеИБ.Ссылка);
		Если ТаблицаСФ.Количество() <> 0 Тогда
			ТаблицаСФ.Свернуть(
				"Номенклатура,ГТД,СтавкаНДС,ЕдиницаИзмерения", 
				"Количество,Сумма,СуммаВсего,СуммаНДС");
		КонецЕсли;	
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.ЕдиницаИзмерения;
		НоваяСтрока.Количество = ТекущаяСтрока.Количество;	
		НоваяСтрока.Сумма = ТекущаяСтрока.Сумма;
		НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0,
			ТекущаяСтрока.Сумма,
			Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2));
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС, ТекущаяСтрока.ЗначениеСтавкиНДС, КомпонентыОбмена);
		НоваяСтрока.СуммаНДС = ТекущаяСтрока.СуммаНДС;
		НоваяСтрока.ТипЗапасов = ТипЗапасов;
		НоваяСтрока.ПрослеживаемыйТовар = ТекущаяСтрока.ПрослеживаемыйТовар;
		Если УчетПоГТД Тогда
			НоваяСтрока.ГТД = ТекущаяСтрока.ГТД;
			ЗаполнитьКорректноСтрокиГТД(
				ДанныеИБ.Ссылка,
				ТаблицаТоваров,
				НоваяСтрока,
				ТаблицаСФ,
				СуммаВключаетНДС,
				КомпонентыОбмена
			);
		КонецЕсли;
	КонецЦикла;
	
	ТоварыСГТД = ТоварыСЗаполнениемГТД(ТаблицаТоваров, КомпонентыОбмена);
	
	Возврат ТоварыСГТД;
КонецФункции
Функция ДанныеТЧКорректировкаПоступления(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	Результат = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаПоступленияТовары.ПоДокументуПоступления КАК ЕстьВДокументеПоступленияРеализации,
		|	ВЫРАЗИТЬ(КорректировкаПоступленияТовары.Количество * КорректировкаПоступленияТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(КорректировкаПоступленияТовары.КоличествоПоДокументуПоступления * КорректировкаПоступленияТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК КоличествоДоИзменения,
		|	ВЫРАЗИТЬ(КорректировкаПоступленияТовары.КоличествоДоКорректировки * КорректировкаПоступленияТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК КоличествоДоКорректировки,
		|	КорректировкаПоступленияТовары.Номенклатура.Прослеживаемый
		|		И &УчетПоГТД КАК ПрослеживаемыйТовар,
		|	КорректировкаПоступленияТовары.ГТД КАК ГТД,
		|	КорректировкаПоступленияТовары.ГТД КАК ГТДДоИзменения,
		|	КорректировкаПоступленияТовары.СтавкаНДС КАК ТекущаяСтавкаСтавкаНДС,
		|	КорректировкаПоступленияТовары.СтавкаНДС.Ставка КАК ЗначениеСтавкаНДС,
		|	КорректировкаПоступленияТовары.СтавкаНДСПоДокументуПоступления КАК СтавкаНДСПоДокументуПоступления,
		|	КорректировкаПоступленияТовары.СтавкаНДСПоДокументуПоступления.Ставка КАК ЗначениеСтавкаНДСДоИзменения,
		|	КорректировкаПоступленияТовары.СуммаНДС КАК СуммаНДС,
		|	КорректировкаПоступленияТовары.СуммаНДСПоДокументуПоступления КАК СуммаНДСДоИзменения,
		|	КорректировкаПоступленияТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаПоступленияТовары.СуммаВсего
		|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаВсего - КорректировкаПоступленияТовары.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаПоступленияТовары.СуммаВсегоПоДокументуПоступления
		|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаВсегоПоДокументуПоступления - КорректировкаПоступленияТовары.СуммаНДСПоДокументуПоступления
		|	КОНЕЦ КАК СуммаДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаПоступленияТовары.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаВсегоДоКорректировки - КорректировкаПоступленияТовары.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаДоКорректировки
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
		|ГДЕ
		|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
		|	И КорректировкаПоступленияТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(КорректировкаПоступленияТовары.Содержание, 1, 100) = """"
		|			ТОГДА КорректировкаПоступленияТовары.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ КорректировкаПоступленияТовары.Содержание
		|	КОНЕЦ КАК Содержание,
		|	КорректировкаПоступленияТовары.ПоДокументуПоступления КАК ЕстьВДокументеПоступленияРеализации,
		|	ВЫРАЗИТЬ(КорректировкаПоступленияТовары.Количество * КорректировкаПоступленияТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(КорректировкаПоступленияТовары.КоличествоПоДокументуПоступления * КорректировкаПоступленияТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК КоличествоДоИзменения,
		|	ВЫРАЗИТЬ(КорректировкаПоступленияТовары.КоличествоДоКорректировки * КорректировкаПоступленияТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК КоличествоДоКорректировки,
		|	КорректировкаПоступленияТовары.СтавкаНДС КАК ТекущаяСтавкаСтавкаНДС,
		|	КорректировкаПоступленияТовары.СтавкаНДС.Ставка КАК ЗначениеСтавкаНДС,
		|	КорректировкаПоступленияТовары.СтавкаНДСПоДокументуПоступления КАК СтавкаНДСПоДокументуПоступления,
		|	КорректировкаПоступленияТовары.СтавкаНДСПоДокументуПоступления.Ставка КАК ЗначениеСтавкаНДСДоИзменения,
		|	КорректировкаПоступленияТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
		|	КорректировкаПоступленияТовары.СуммаНДС КАК СуммаНДС,
		|	КорректировкаПоступленияТовары.СуммаНДСПоДокументуПоступления КАК СуммаНДСДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаПоступленияТовары.СуммаВсего
		|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаВсего - КорректировкаПоступленияТовары.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаПоступленияТовары.СуммаВсегоПоДокументуПоступления
		|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаВсегоПоДокументуПоступления - КорректировкаПоступленияТовары.СуммаНДСПоДокументуПоступления
		|	КОНЕЦ КАК СуммаДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаПоступленияТовары.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаВсегоДоКорректировки - КорректировкаПоступленияТовары.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаДоКорректировки,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(КорректировкаПоступленияТовары.СодержаниеДоКорректировки, 1, 100) = """"
		|			ТОГДА КорректировкаПоступленияТовары.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ КорректировкаПоступленияТовары.СодержаниеДоКорректировки
		|	КОНЕЦ КАК СодержаниеДоИзменения
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
		|ГДЕ
		|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
		|	И КорректировкаПоступленияТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)";	   
	              
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	Запрос.УстановитьПараметр("УчетПоГТД", КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = ПакетЗапроса[0].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("ЦенаДоИзменения");
	ТаблицаТоваров.Колонки.Добавить("ЦенаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСДоИзменения");
	
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.ТекущаяСтавкаСтавкаНДС, ТекущаяСтрока.ЗначениеСтавкаНДС, КомпонентыОбмена);
		ТекущаяСтрока.СтавкаНДСДоИзменения = ПолучитьСтавкуНДС(
			ТекущаяСтрока.СтавкаНДСПоДокументуПоступления, ТекущаяСтрока.ЗначениеСтавкаНДСДоИзменения, КомпонентыОбмена);
		ТекущаяСтрока.Цена = ?(ТекущаяСтрока.Количество = 0,
			ТекущаяСтрока.Сумма,
			Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2));
		ТекущаяСтрока.ЦенаДоИзменения = ?(ТекущаяСтрока.КоличествоДоИзменения = 0,
			ТекущаяСтрока.СуммаДоИзменения,
			Окр(ТекущаяСтрока.СуммаДоИзменения / ТекущаяСтрока.КоличествоДоИзменения, 2));
		ТекущаяСтрока.ЦенаДоКорректировки = ?(ТекущаяСтрока.КоличествоДоКорректировки = 0,
			ТекущаяСтрока.СуммаДоКорректировки,
			Окр(ТекущаяСтрока.СуммаДоКорректировки / ТекущаяСтрока.КоличествоДоКорректировки, 2));
	КонецЦикла;
	
	ТоварыСГТД = ТоварыСЗаполнениемГТДКорректировки(ТаблицаТоваров, КомпонентыОбмена);
	
	Результат.Вставить("Товары", ТоварыСГТД);
	
	ТаблицаУслуг = ПакетЗапроса[1].Выгрузить();
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("ЦенаДоИзменения");
	ТаблицаУслуг.Колонки.Добавить("ЦенаДоКорректировки");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДСДоИзменения");
	
	Для Каждого ТекущаяСтрока Из ТаблицаУслуг Цикл
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.ТекущаяСтавкаСтавкаНДС, ТекущаяСтрока.ЗначениеСтавкаНДС, КомпонентыОбмена);
		ТекущаяСтрока.СтавкаНДСДоИзменения = ПолучитьСтавкуНДС(
			ТекущаяСтрока.СтавкаНДСПоДокументуПоступления, ТекущаяСтрока.ЗначениеСтавкаНДСДоИзменения, КомпонентыОбмена);
		ТекущаяСтрока.Цена = ?(ТекущаяСтрока.Количество = 0,
			ТекущаяСтрока.Сумма,
			Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2));
		ТекущаяСтрока.ЦенаДоИзменения = ?(ТекущаяСтрока.КоличествоДоИзменения = 0,
			ТекущаяСтрока.СуммаДоИзменения,
			Окр(ТекущаяСтрока.СуммаДоИзменения / ТекущаяСтрока.КоличествоДоИзменения, 2));
		ТекущаяСтрока.ЦенаДоКорректировки = ?(ТекущаяСтрока.КоличествоДоКорректировки = 0,
			ТекущаяСтрока.СуммаДоКорректировки,
			Окр(ТекущаяСтрока.СуммаДоКорректировки / ТекущаяСтрока.КоличествоДоКорректировки, 2));
	КонецЦикла;
	
	Результат.Вставить("Услуги", ТаблицаУслуг);
	
	Возврат Результат;
КонецФункции
Функция ДанныеТЧКорректировкаПоступленияАвто(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаПоступленияАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.Количество КАК Количество,
	|	1 КАК КоличествоДоИзменения,
	|	1 КАК КоличествоДоКорректировки,
	|	ИСТИНА КАК ЕстьВДокументеПоступленияРеализации,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.Автомобиль.ГТД КАК ГТД,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.Автомобиль.Прослеживаемый И &УчетПоГТД КАК ПрослеживаемыйТовар,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.СтавкаНДС КАК ТекущаяСтавкаСтавкаНДС,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.СтавкаНДС.Ставка КАК ЗначениеСтавкаНДС,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.СтавкаНДСПоДокументуПоступления КАК СтавкаНДСПоДокументуПоступления,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.СтавкаНДСПоДокументуПоступления.Ставка КАК ЗначениеСтавкаНДСДоИзменения,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДСПоДокументуПоступления КАК СуммаНДСДоИзменения,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсего
	|		ИНАЧЕ КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсего - КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсегоПоДокументуПоступления
	|		ИНАЧЕ КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсегоПоДокументуПоступления - КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДСПоДокументуПоступления
	|	КОНЕЦ КАК СуммаДоИзменения,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсегоДоКорректировки
	|		ИНАЧЕ КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсегоДоКорректировки - КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДСДоКорректировки
	|	КОНЕЦ КАК СуммаДоКорректировки
	|ИЗ
	|	Документ.КорректировкаПоступленияАвтомобилей.Автомобили КАК КорректировкаПоступленияАвтомобилейАвтомобили
	|ГДЕ
	|	КорректировкаПоступленияАвтомобилейАвтомобили.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	Запрос.УстановитьПараметр("УчетПоГТД", КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД);
	
	ТаблицаАвтомобилей = Запрос.Выполнить().Выгрузить();
	
	ТаблицаАвтомобилей.Колонки.Добавить("ГТДДоИзменения");
	ТаблицаАвтомобилей.Колонки.Добавить("Цена");
	ТаблицаАвтомобилей.Колонки.Добавить("ЦенаДоИзменения");
	ТаблицаАвтомобилей.Колонки.Добавить("ЦенаДоКорректировки");
	ТаблицаАвтомобилей.Колонки.Добавить("СтавкаНДС");
	ТаблицаАвтомобилей.Колонки.Добавить("СтавкаНДСДоИзменения");
	
	Для Каждого ТекущаяСтрока Из ТаблицаАвтомобилей Цикл
		ТекущаяСтрока.ГТДДоИзменения = ТекущаяСтрока.ГТД;
		ТекущаяСтрока.ЦенаДоКорректировки = ТекущаяСтрока.СуммаДоКорректировки;
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.ТекущаяСтавкаСтавкаНДС, ТекущаяСтрока.ЗначениеСтавкаНДС, КомпонентыОбмена);
		ТекущаяСтрока.СтавкаНДСДоИзменения = ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДСПоДокументуПоступления, ТекущаяСтрока.ЗначениеСтавкаНДСДоИзменения, КомпонентыОбмена);
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		ТекущаяСтрока.ЦенаДоИзменения = ТекущаяСтрока.СуммаДоИзменения;
		ТекущаяСтрока.ЦенаДоКорректировки = ТекущаяСтрока.СуммаДоКорректировки;
	КонецЦикла;
	
	ТаблицаАвтомобилейСГТД = ТоварыСЗаполнениемГТДКорректировки(ТаблицаАвтомобилей, КомпонентыОбмена);
	
	Возврат ТаблицаАвтомобилейСГТД;
КонецФункции
Функция ДанныеТЧКорректировкаРеализации(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	Результат = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаРеализацииТовары.Номенклатура.Прослеживаемый
		|		И &УчетПоГТД КАК ПрослеживаемыйТовар,
		|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	КорректировкаРеализацииТовары.ПоДокументуРеализации КАК ЕстьВДокументеПоступленияРеализации,
		|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации * КорректировкаРеализацииТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК КоличествоДоИзменения,
		|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоДоКорректировки * КорректировкаРеализацииТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК КоличествоДоКорректировки,
		|	КорректировкаРеализацииТовары.СтавкаНДС КАК ТекущаяСтавкаСтавкаНДС,
		|	КорректировкаРеализацииТовары.СтавкаНДС.Ставка КАК ЗначениеСтавкаНДС,
		|	КорректировкаРеализацииТовары.СтавкаНДСПоДокументуРеализации КАК СтавкаНДСПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.СтавкаНДСПоДокументуРеализации.Ставка КАК ЗначениеСтавкаНДСДоИзменения,
		|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДС,
		|	КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации КАК СуммаНДСДоИзменения,
		|	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаРеализацииТовары.СуммаВсего
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаВсего - КорректировкаРеализацииТовары.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации - КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации
		|	КОНЕЦ КАК СуммаДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаРеализацииТовары.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаВсегоДоКорректировки - КорректировкаРеализацииТовары.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаДоКорректировки
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|ГДЕ
		|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
		|	И КорректировкаРеализацииТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаРеализацииТовары.Номенклатура КАК НоменклатураСтроки,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(КорректировкаРеализацииТовары.Содержание, 1, 100) = """"
		|			ТОГДА ПОДСТРОКА(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное, 1, 100)
		|		ИНАЧЕ КорректировкаРеализацииТовары.Содержание
		|	КОНЕЦ КАК Содержание,
		|	КорректировкаРеализацииТовары.ПоДокументуРеализации КАК ЕстьВДокументеПоступленияРеализации,
		|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации * КорректировкаРеализацииТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК КоличествоДоИзменения,
		|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоДоКорректировки * КорректировкаРеализацииТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК КоличествоДоКорректировки,
		|	КорректировкаРеализацииТовары.СтавкаНДС КАК ТекущаяСтавкаСтавкаНДС,
		|	КорректировкаРеализацииТовары.СтавкаНДС.Ставка КАК ЗначениеСтавкаНДС,
		|	КорректировкаРеализацииТовары.СтавкаНДСПоДокументуРеализации КАК СтавкаНДСПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.СтавкаНДСПоДокументуРеализации.Ставка КАК ЗначениеСтавкаНДСДоИзменения,
		|	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
		|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДС,
		|	КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации КАК СуммаНДСДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаРеализацииТовары.СуммаВсего
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаВсего - КорректировкаРеализацииТовары.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации - КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации
		|	КОНЕЦ КАК СуммаДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаРеализацииТовары.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаВсегоДоКорректировки - КорректировкаРеализацииТовары.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаДоКорректировки,     
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(КорректировкаРеализацииТовары.СодержаниеДоКорректировки, 1, 100) = """"
		|			ТОГДА ПОДСТРОКА(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное, 1, 100)
		|		ИНАЧЕ КорректировкаРеализацииТовары.СодержаниеДоКорректировки
		|	КОНЕЦ КАК СодержаниеДоИзменения
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|ГДЕ
		|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
		|	И КорректировкаРеализацииТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректировкаРеализацииАвтоработы.Авторабота,
		|	КорректировкаРеализацииАвтоработы.Авторабота.НаименованиеПолное,
		|	КорректировкаРеализацииАвтоработы.ПоДокументуРеализации,
		|	ВЫРАЗИТЬ(КорректировкаРеализацииАвтоработы.Количество * КорректировкаРеализацииАвтоработы.Коэффициент КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(КорректировкаРеализацииАвтоработы.КоличествоПоДокументуРеализации * КорректировкаРеализацииАвтоработы.КоэффициентПоДокументуРеализации КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(КорректировкаРеализацииАвтоработы.КоличествоДоКорректировки * КорректировкаРеализацииАвтоработы.Коэффициент КАК ЧИСЛО(15, 3)),
		|	КорректировкаРеализацииАвтоработы.СтавкаНДС,
		|	КорректировкаРеализацииАвтоработы.СтавкаНДС.Ставка,
		|	КорректировкаРеализацииАвтоработы.СтавкаНДСПоДокументуРеализации,
		|	КорректировкаРеализацииАвтоработы.СтавкаНДСПоДокументуРеализации.Ставка,
		|	КорректировкаРеализацииАвтоработы.СуммаНДСДоКорректировки,
		|	КорректировкаРеализацииАвтоработы.СуммаНДС,
		|	КорректировкаРеализацииАвтоработы.СуммаНДСПоДокументуРеализации,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаРеализацииАвтоработы.СуммаВсего
		|		ИНАЧЕ КорректировкаРеализацииАвтоработы.СуммаВсего - КорректировкаРеализацииАвтоработы.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаРеализацииАвтоработы.СуммаВсегоПоДокументуРеализации
		|		ИНАЧЕ КорректировкаРеализацииАвтоработы.СуммаВсегоПоДокументуРеализации - КорректировкаРеализацииАвтоработы.СуммаНДСПоДокументуРеализации
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА КорректировкаРеализацииАвтоработы.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииАвтоработы.СуммаВсегоДоКорректировки - КорректировкаРеализацииАвтоработы.СуммаНДСДоКорректировки
		|	КОНЕЦ,
		|	КорректировкаРеализацииАвтоработы.Авторабота.НаименованиеПолное
		|ИЗ
		|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииАвтоработы
		|ГДЕ
		|	КорректировкаРеализацииАвтоработы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	Запрос.УстановитьПараметр("УчетПоГТД", КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = ПакетЗапроса[0].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("ЦенаДоИзменения");
	ТаблицаТоваров.Колонки.Добавить("ЦенаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСДоИзменения");
	ТаблицаТоваров.Колонки.Добавить("ГТД", Новый ОписаниеТипов("СправочникСсылка.ГТД"));
	ТаблицаТоваров.Колонки.Добавить("ГТДДоИзменения", Новый ОписаниеТипов("СправочникСсылка.ГТД"));
	
	РаспределитьСтрокиТоваровПоГТДКорректировкиРеализ(ДанныеИБ, КомпонентыОбмена, ТаблицаТоваров, СуммаВключаетНДС);
	
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.ТекущаяСтавкаСтавкаНДС, ТекущаяСтрока.ЗначениеСтавкаНДС, КомпонентыОбмена);
		ТекущаяСтрока.СтавкаНДСДоИзменения = ПолучитьСтавкуНДС(
			ТекущаяСтрока.СтавкаНДСПоДокументуРеализации, ТекущаяСтрока.ЗначениеСтавкаНДСДоИзменения, КомпонентыОбмена);
		ТекущаяСтрока.Цена = ?(ТекущаяСтрока.Количество = 0,
			ТекущаяСтрока.Сумма,
			Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2));
		ТекущаяСтрока.ЦенаДоИзменения = ?(ТекущаяСтрока.КоличествоДоИзменения = 0,
			ТекущаяСтрока.СуммаДоИзменения,
			Окр(ТекущаяСтрока.СуммаДоИзменения / ТекущаяСтрока.КоличествоДоИзменения, 2));
		ТекущаяСтрока.ЦенаДоКорректировки = ?(ТекущаяСтрока.КоличествоДоКорректировки = 0,
			ТекущаяСтрока.СуммаДоКорректировки,
			Окр(ТекущаяСтрока.СуммаДоКорректировки / ТекущаяСтрока.КоличествоДоКорректировки, 2));
	КонецЦикла;
	
	Результат.Вставить("Товары", ТаблицаТоваров);
	
	ТаблицаУслуг = ПакетЗапроса[1].Выгрузить();
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("ЦенаДоИзменения");
	ТаблицаУслуг.Колонки.Добавить("ЦенаДоКорректировки");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДСДоИзменения");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	
	Для Каждого ТекущаяСтрока Из ТаблицаУслуг Цикл
		Если ТипЗнч(ТекущаяСтрока.НоменклатураСтроки) = Тип("СправочникСсылка.Автоработы") Тогда
			ИмяПКО = "Справочник_Автоработы_Отправка";
		Иначе
			ИмяПКО = "Справочник_Номенклатура_Отправка";
		КонецЕсли;
		ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО", ТекущаяСтрока.НоменклатураСтроки, ИмяПКО);
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.ТекущаяСтавкаСтавкаНДС, ТекущаяСтрока.ЗначениеСтавкаНДС, КомпонентыОбмена);
		ТекущаяСтрока.СтавкаНДСДоИзменения = ПолучитьСтавкуНДС(
			ТекущаяСтрока.СтавкаНДСПоДокументуРеализации, ТекущаяСтрока.ЗначениеСтавкаНДСДоИзменения, КомпонентыОбмена);
		ТекущаяСтрока.Цена = ?(ТекущаяСтрока.Количество = 0,
			ТекущаяСтрока.Сумма,
			Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2));
		ТекущаяСтрока.ЦенаДоИзменения = ?(ТекущаяСтрока.КоличествоДоИзменения = 0,
			ТекущаяСтрока.СуммаДоИзменения,
			Окр(ТекущаяСтрока.СуммаДоИзменения / ТекущаяСтрока.КоличествоДоИзменения, 2));
		ТекущаяСтрока.ЦенаДоКорректировки = ?(ТекущаяСтрока.КоличествоДоКорректировки = 0,
			ТекущаяСтрока.СуммаДоКорректировки,
			Окр(ТекущаяСтрока.СуммаДоКорректировки / ТекущаяСтрока.КоличествоДоКорректировки, 2));
	КонецЦикла;
	
	Результат.Вставить("Услуги", ТаблицаУслуг);
	
	Возврат Результат;
КонецФункции
Функция ДанныеТЧКорректировкаРеализацииАвто(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль.Прослеживаемый И &УчетПоГТД КАК ПрослеживаемыйТовар,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Количество КАК Количество,
	|	ИСТИНА КАК ЕстьВДокументеПоступленияРеализации,
	|	1 КАК КоличествоДоИзменения,
	|	1 КАК КоличествоДоКорректировки,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль.ГТД КАК ГТД,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДС КАК ТекущаяСтавкаСтавкаНДС,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДС.Ставка КАК ЗначениеСтавкаНДС,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДСПоДокументуРеализации КАК СтавкаНДСПоДокументуРеализации,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДСПоДокументуРеализации.Ставка КАК ЗначениеСтавкаНДСДоИзменения,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСПоДокументуРеализации КАК СуммаНДСДоИзменения,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсего
	|		ИНАЧЕ КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсего - КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоПоДокументуРеализации
	|		ИНАЧЕ КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоПоДокументуРеализации - КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСПоДокументуРеализации
	|	КОНЕЦ КАК СуммаДоИзменения,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоДоКорректировки
	|		ИНАЧЕ КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоДоКорректировки - КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСДоКорректировки
	|	КОНЕЦ КАК СуммаДоКорректировки
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
	|ГДЕ
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	Запрос.УстановитьПараметр("УчетПоГТД", КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД);
	
	ТаблицаАвтомобили = Запрос.Выполнить().Выгрузить();
	
	ТаблицаАвтомобили.Колонки.Добавить("ГТДДоИзменения");
	ТаблицаАвтомобили.Колонки.Добавить("Цена");
	ТаблицаАвтомобили.Колонки.Добавить("ЦенаДоИзменения");
	ТаблицаАвтомобили.Колонки.Добавить("ЦенаДоКорректировки");
	ТаблицаАвтомобили.Колонки.Добавить("СтавкаНДС");
	ТаблицаАвтомобили.Колонки.Добавить("СтавкаНДСДоИзменения");
	
	Для Каждого ТекущаяСтрока Из ТаблицаАвтомобили Цикл
		ТекущаяСтрока.ГТДДоИзменения = ТекущаяСтрока.ГТД;
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.ТекущаяСтавкаСтавкаНДС, ТекущаяСтрока.ЗначениеСтавкаНДС, КомпонентыОбмена);
		ТекущаяСтрока.СтавкаНДСДоИзменения = ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДСПоДокументуРеализации, ТекущаяСтрока.ЗначениеСтавкаНДСДоИзменения, КомпонентыОбмена);
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		ТекущаяСтрока.ЦенаДоИзменения = ТекущаяСтрока.СуммаДоИзменения;
		ТекущаяСтрока.ЦенаДоКорректировки = ТекущаяСтрока.СуммаДоКорректировки;
		Если ТекущаяСтрока.Количество = 0 Тогда
			ТекущаяСтрока.ГТД = Справочники.ГТД.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаАвтомобилейСГТД = ТоварыСЗаполнениемГТДКорректировки(ТаблицаАвтомобили, КомпонентыОбмена);
	
	Возврат ТаблицаАвтомобилейСГТД;
КонецФункции
Функция ДанныеТЧПоступлениеАвтомобилей(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	Результат = Новый Структура();
		
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
		
	Запрос = НоВый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		               |	ПоступлениеАвтомобилейАвтомобили.НомерСтроки КАК НомерСтрокиДокумента,
		               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		               |	1 КАК Количество,
		               |	ВЫБОР
		               |		КОГДА &СуммаВключаетНДС
		               |			ТОГДА ПоступлениеАвтомобилейАвтомобили.СуммаВсего
		               |		ИНАЧЕ ПоступлениеАвтомобилейАвтомобили.СуммаВсего - ПоступлениеАвтомобилейАвтомобили.СуммаНДС
		               |	КОНЕЦ КАК Сумма,
		               |	ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
		               |	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС КАК Ставка,
		               |	ПоступлениеАвтомобилейАвтомобили.ГТД КАК ГТД,
		               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль.Прослеживаемый
		               |		И &УчетПоГТД КАК ПрослеживаемыйТовар,
		               |	ВЫБОР
		               |		КОГДА &Комиссия
		               |			ТОГДА ""КомиссионныеТовары""
		               |		ИНАЧЕ ""СобственныеТовары""
		               |	КОНЕЦ КАК ТипЗапасов,
		               |	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС.Ставка КАК ЗначениеСтавки
		               |ИЗ
		               |	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
		               |ГДЕ
		               |	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	Запрос.УстановитьПараметр("СуммаВключаетНДС",СуммаВключаетНДС);
	Запрос.УстановитьПараметр("Комиссия", ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия);
		
	Автомобили = ТоварыСЗаполнениемГТД(Запрос.Выполнить().Выгрузить(), КомпонентыОбмена);
		
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
		
	// Автомобили
	Автомобили.Колонки.Добавить("ЕдиницаИзмерения");
	Автомобили.Колонки.Добавить("Цена");
	Автомобили.Колонки.Добавить("СтавкаНДС");
		
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из Автомобили Цикл
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		ТекущаяСтрока.НомерСтрокиДокумента = НомерСтроки;
		ТекущаяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
		
	Результат.Вставить("Автомобили", Автомобили);
		
	Возврат Результат;
КонецФункции
Функция ДанныеТЧПоступлениеДопРасходов(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	Результат = Новый Структура();
				
		Запрос = НоВый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			               |	ПоступлениеДопРасходовРаспределениеРасходов.КлючСтроки КАК КлючСтроки,
			               |	СУММА(1) КАК Количество
			               |ПОМЕСТИТЬ РучноеРаспределение
			               |ИЗ
			               |	Документ.ПоступлениеДопРасходов.РаспределениеРасходов КАК ПоступлениеДопРасходовРаспределениеРасходов
			               |ГДЕ
			               |	ПоступлениеДопРасходовРаспределениеРасходов.Ссылка = &Ссылка
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПоступлениеДопРасходовРаспределениеРасходов.КлючСтроки
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	МАКСИМУМ(ПоступлениеДопРасходовТовары.НомерСтроки) КАК НомерСтрокиДокумента,
			               |	ПоступлениеДопРасходовТовары.Номенклатура КАК Номенклатура,
			               |	СУММА(ВЫРАЗИТЬ(ПоступлениеДопРасходовТовары.Количество * ПоступлениеДопРасходовТовары.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
			               |	СУММА(ВЫБОР
			               |			КОГДА (ВЫРАЗИТЬ(ПоступлениеДопРасходовТовары.Количество * ПоступлениеДопРасходовТовары.Коэффициент КАК ЧИСЛО(15, 3))) = 0
			               |				ТОГДА ВЫБОР
			               |						КОГДА &СуммаВключаетНДС
			               |							ТОГДА ПоступлениеДопРасходовТовары.СуммаВсего
			               |						ИНАЧЕ ПоступлениеДопРасходовТовары.СуммаВсего - ПоступлениеДопРасходовТовары.СуммаНДС
			               |					КОНЕЦ
			               |			ИНАЧЕ ВЫБОР
			               |					КОГДА &СуммаВключаетНДС
			               |						ТОГДА ПоступлениеДопРасходовТовары.СуммаВсего
			               |					ИНАЧЕ ПоступлениеДопРасходовТовары.СуммаВсего - ПоступлениеДопРасходовТовары.СуммаНДС
			               |				КОНЕЦ
			               |		КОНЕЦ) КАК Сумма,
			               |	СУММА(0) КАК Цена,
			               |	ПоступлениеДопРасходовТовары.Ссылка.ПодразделениеКомпании КАК ПодразделениеЗатрат,
			               |	ВЫБОР
			               |		КОГДА ПОДСТРОКА(ПоступлениеДопРасходовТовары.Содержание, 1, 100) = """"
			               |			ТОГДА ПОДСТРОКА(ПоступлениеДопРасходовТовары.Номенклатура.НаименованиеПолное, 1, 100)
			               |		ИНАЧЕ ПоступлениеДопРасходовТовары.Содержание
			               |	КОНЕЦ КАК Содержание,
			               |	НЕ(ПоступлениеДопРасходовТовары.Номенклатура.СпособРаспределенияДопРасходов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы)
			               |				И ПоступлениеДопРасходовТовары.СпособРаспределения = 0
			               |			ИЛИ ПоступлениеДопРасходовТовары.СпособРаспределения = 1
			               |				И ЕСТЬNULL(РучноеРаспределение.Количество, 0) = 0) КАК ЭтоДопРасходы,
			               |	ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов КАК СтатьяЗатрат,
			               |	ВЫБОР
			               |		КОГДА ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
			               |			ТОГДА """"
			               |		ИНАЧЕ ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов.КоррСчет.Код
			               |	КОНЕЦ КАК СчетЗатрат,
			               |	ПоступлениеДопРасходовТовары.СтавкаНДС КАК Ставка,
			               |	СУММА(ПоступлениеДопРасходовТовары.СуммаНДС) КАК СуммаНДС,
			               |	ПоступлениеДопРасходовТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки
			               |ИЗ
			               |	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РучноеРаспределение КАК РучноеРаспределение
			               |		ПО ПоступлениеДопРасходовТовары.КлючСтроки = РучноеРаспределение.КлючСтроки
			               |ГДЕ
			               |	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПоступлениеДопРасходовТовары.Номенклатура,
			               |	ПоступлениеДопРасходовТовары.Ссылка.ПодразделениеКомпании,
			               |	ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов,
			               |	ВЫБОР
			               |		КОГДА ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
			               |			ТОГДА """"
			               |		ИНАЧЕ ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов.КоррСчет
			               |	КОНЕЦ,
			               |	ПоступлениеДопРасходовТовары.СтавкаНДС,
			               |	ПоступлениеДопРасходовТовары.СтавкаНДС.Ставка,
			               |	ВЫБОР
			               |		КОГДА ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
			               |			ТОГДА """"
			               |		ИНАЧЕ ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов.КоррСчет.Код
			               |	КОНЕЦ,
			               |	НЕ(ПоступлениеДопРасходовТовары.Номенклатура.СпособРаспределенияДопРасходов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы)
			               |				И ПоступлениеДопРасходовТовары.СпособРаспределения = 0
			               |			ИЛИ ПоступлениеДопРасходовТовары.СпособРаспределения = 1
			               |				И ЕСТЬNULL(РучноеРаспределение.Количество, 0) = 0),
			               |	ВЫБОР
			               |		КОГДА ПОДСТРОКА(ПоступлениеДопРасходовТовары.Содержание, 1, 100) = """"
			               |			ТОГДА ПОДСТРОКА(ПоступлениеДопРасходовТовары.Номенклатура.НаименованиеПолное, 1, 100)
			               |		ИНАЧЕ ПоступлениеДопРасходовТовары.Содержание
			               |	КОНЕЦ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
			               |	СУММА(ВЫРАЗИТЬ(ПартииТоваровКомпании.Сумма / &КурсДокумента КАК ЧИСЛО(15, 2))) КАК Сумма,
			               |	СУММА(ВЫРАЗИТЬ(ПартииТоваровКомпании.СуммаНДС / &КурсДокумента КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
			               |	ПартииТоваровКомпании.Партия КАК Партия
			               |ИЗ
			               |	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			               |ГДЕ
			               |	ПартииТоваровКомпании.Регистратор = &Ссылка
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПартииТоваровКомпании.Номенклатура,
			               |	ПартииТоваровКомпании.Партия
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ПоступлениеТоваровТовары.Ссылка КАК ДокументПартииСтрока,
			               |	ПоступлениеТоваровТовары.Номенклатура КАК НоменклатураСтрока,
			               |	СУММА(ВЫРАЗИТЬ(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
			               |	СУММА(ПоступлениеТоваровТовары.СуммаВсего * ПоступлениеТоваровТовары.Ссылка.КурсДокумента) КАК СуммаТовара
			               |ИЗ
			               |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
			               |ГДЕ
			               |	ПоступлениеТоваровТовары.Ссылка В(&СписокОснований)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПоступлениеТоваровТовары.Ссылка,
			               |	ПоступлениеТоваровТовары.Номенклатура
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ПоступлениеАвтомобилейАвтомобили.Ссылка,
			               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль,
			               |	СУММА(ПоступлениеАвтомобилейАвтомобили.Количество),
			               |	СУММА(ПоступлениеАвтомобилейАвтомобили.СуммаВсего * ПоступлениеАвтомобилейАвтомобили.Ссылка.КурсДокумента)
			               |ИЗ
			               |	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
			               |ГДЕ
			               |	ПоступлениеАвтомобилейАвтомобили.Ссылка В(&СписокОснований)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПоступлениеАвтомобилейАвтомобили.Ссылка,
			               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетТовары.Ссылка,
			               |	АвансовыйОтчетТовары.Номенклатура,
			               |	СУММА(ВЫРАЗИТЬ(АвансовыйОтчетТовары.Количество * АвансовыйОтчетТовары.Коэффициент КАК ЧИСЛО(15, 3))),
			               |	СУММА(АвансовыйОтчетТовары.СуммаВсего * АвансовыйОтчетТовары.Ссылка.КурсДокумента)
			               |ИЗ
			               |	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
			               |ГДЕ
			               |	АвансовыйОтчетТовары.Ссылка В(&СписокОснований)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	АвансовыйОтчетТовары.Ссылка,
			               |	АвансовыйОтчетТовары.Номенклатура
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ПартииТоваровКомпании.Партия,
			               |	ПартииТоваровКомпании.Номенклатура,
			               |	СУММА(ПартииТоваровКомпании.Количество),
			               |	СУММА(ПартииТоваровКомпании.Сумма)
			               |ИЗ
			               |	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			               |ГДЕ
			               |	ПартииТоваровКомпании.Регистратор В(&СписокОснований)
			               |	И ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			               |	И ПартииТоваровКомпании.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПартииТоваровКомпании.Партия,
			               |	ПартииТоваровКомпании.Номенклатура
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ОстаткиАвтомобилей.Партия,
			               |	ОстаткиАвтомобилей.Автомобиль,
			               |	СУММА(ОстаткиАвтомобилей.Количество),
			               |	СУММА(ОстаткиАвтомобилей.Сумма)
			               |ИЗ
			               |	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			               |ГДЕ
			               |	ОстаткиАвтомобилей.Регистратор В(&СписокОснований)
			               |	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			               |	И ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ПеремещениеАвтомобилей
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ОстаткиАвтомобилей.Партия,
			               |	ОстаткиАвтомобилей.Автомобиль
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ПартииТоваровКомпании.Партия,
			               |	ПартииТоваровКомпании.Номенклатура,
			               |	СУММА(ПартииТоваровКомпании.Количество),
			               |	СУММА(ПартииТоваровКомпании.Сумма)
			               |ИЗ
			               |	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			               |ГДЕ
			               |	ПартииТоваровКомпании.Регистратор В(&СписокОснований)
			               |	И ПартииТоваровКомпании.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
			               |	И ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПартииТоваровКомпании.Партия,
			               |	ПартииТоваровКомпании.Номенклатура
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ОстаткиАвтомобилей.Партия,
			               |	ОстаткиАвтомобилей.Автомобиль,
			               |	СУММА(ОстаткиАвтомобилей.Количество),
			               |	СУММА(ОстаткиАвтомобилей.Сумма)
			               |ИЗ
			               |	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			               |ГДЕ
			               |	ОстаткиАвтомобилей.Регистратор В(&СписокОснований)
			               |	И ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
			               |	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ОстаткиАвтомобилей.Партия,
			               |	ОстаткиАвтомобилей.Автомобиль
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
			               |	ВЫРАЗИТЬ(ОстаткиАвтомобилей.Сумма / &КурсДокумента КАК ЧИСЛО(15, 2)) КАК Сумма,
			               |	ВЫРАЗИТЬ(ОстаткиАвтомобилей.СуммаНДС / &КурсДокумента КАК ЧИСЛО(15, 2)) КАК СуммаНДС
			               |ИЗ
			               |	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			               |ГДЕ
			               |	ОстаткиАвтомобилей.Регистратор = &Ссылка";
			
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("СуммаВключаетНДС",СуммаВключаетНДС);
		Запрос.УстановитьПараметр("КурсДокумента", ?(ДанныеИБ.КурсДокумента = 0, 1, ДанныеИБ.КурсДокумента));
		Запрос.УстановитьПараметр("СписокОснований", ДанныеИБ.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
			
		ПакетЗапроса = Запрос.ВыполнитьПакет();
			
		// Услуги
		Услуги = ПакетЗапроса[1].Выгрузить();
		Услуги.Колонки.Добавить("СтавкаНДС");
			
		ЕстьДопРасход = Ложь;
		НомерСтроки = 1;
		Для Каждого ТекущаяСтрока Из Услуги Цикл
			Если ТекущаяСтрока.ЭтоДопРасходы Тогда
				ЕстьДопРасход = Истина;
			КонецЕсли;
			ТекущаяСтрока.НомерСтрокиДокумента = НомерСтроки;
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
			ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
			
		Результат.Вставить("Услуги", Услуги);
			
		// Доп. расходы
		ТаблицаДопРасходов = ПакетЗапроса[2].Выгрузить();
		ТаблицаДопРасходовАвто = ПакетЗапроса[4].Выгрузить();
		ТаблицаТоваров = ПакетЗапроса[3].Выгрузить();
		ТаблицаТоваров.Колонки.Добавить("СтрокаОбработана"); 
		ТаблицаТоваров.ЗаполнитьЗначения(Ложь,"СтрокаОбработана");
			
		// Теперь разберемся с услугами, которые распределяются на себестоимость товаров.
		тзДопРасходы		= Новый ТаблицаЗначений();
		тзДопРасходы.Колонки.Добавить("Номенклатура");
		тзДопРасходы.Колонки.Добавить("СтоимостьТоваров");
		тзДопРасходы.Колонки.Добавить("Сумма");
		тзДопРасходы.Колонки.Добавить("СуммаНДС");
		тзДопРасходы.Колонки.Добавить("Количество");
		тзДопРасходы.Колонки.Добавить("ДокументПоступления");
			
		ПартияОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
			
		Если ЕстьДопРасход  Тогда
			Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходов Или
				ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее Тогда  
				
				Для Каждого ТекущаяСтрока из ТаблицаТоваров Цикл 	
						
					СтруктураПоиска = Новый Структура ("Номенклатура, Партия", ТекущаяСтрока.НоменклатураСтрока, ТекущаяСтрока.ДокументПартииСтрока);
					СтрокаПартии = ТаблицаДопРасходов.НайтиСтроки(СтруктураПоиска);
					Если СтрокаПартии.Количество()> 0 Тогда
							
						СтрокаДопРасходы = тзДопРасходы.Добавить();
							
						ИмяПКО = "Справочник_Номенклатура_Отправка";
						СтрокаДопРасходы.Номенклатура = Новый Структура("Значение, ИмяПко",ТекущаяСтрока.НоменклатураСтрока,ИмяПко);
							
						СтрокаДопРасходы.СтоимостьТоваров = Окр(ТекущаяСтрока.СуммаТовара / ?(ДанныеИБ.КурсДокумента = 0, 1, ДанныеИБ.КурсДокумента), 2);
						СтрокаДопРасходы.Сумма			= СтрокаПартии[0].Сумма;
						СтрокаДопРасходы.СуммаНДС		= СтрокаПартии[0].СуммаНДС;
						СтрокаДопРасходы.Количество		= ТекущаяСтрока.Количество;
						СтрокаДопРасходы.ДокументПоступления = ТекущаяСтрока.ДокументПартииСтрока;
							
						ТаблицаДопРасходов.Удалить(СтрокаПартии[0]);
						ТекущаяСтрока.СтрокаОбработана = Истина;
					КонецЕсли; 
						
				КонецЦикла; 
					
				ТаблицаДляОбработки  = ТаблицаТоваров.Скопировать(Новый Структура("СтрокаОбработана", Ложь));
				СверткаПоНоменклатуре = ТаблицаДляОбработки.Скопировать();
				СверткаПоНоменклатуре.Свернуть("НоменклатураСтрока", "Количество");
					
				Для Каждого СтрокаСвертки Из СверткаПоНоменклатуре Цикл 
						
					ПоискДопРасходов = Новый Структура ("Номенклатура, Партия", СтрокаСвертки.НоменклатураСтрока, ПартияОтрицательныхОстатков); 
					СтрокаПартии = ТаблицаДопРасходов.НайтиСтроки(ПоискДопРасходов);
					
					Если СтрокаПартии.Количество()> 0 Тогда 
						КоличествоНоменклатура = СтрокаСвертки.Количество; 
						КоличествоСписать = СтрокаСвертки.Количество;
						СуммаСписать = СтрокаПартии[0].Сумма; 
						СуммаНДССписать = СтрокаПартии[0].СуммаНДС;
		
						ПоискНоменклатуры = Новый Структура ("НоменклатураСтрока", СтрокаСвертки.НоменклатураСтрока);  
						СтрокиНоменклатуры = ТаблицаДляОбработки.НайтиСтроки(ПоискНоменклатуры);
							
						Для Каждого СтрокаНоменклатура Из СтрокиНоменклатуры Цикл 
								
							СтрокаДопРасходы = тзДопРасходы.Добавить();
								
							ИмяПКО = "Справочник_Номенклатура_Отправка";
							СтрокаДопРасходы.Номенклатура = Новый Структура("Значение, ИмяПко",СтрокаНоменклатура.НоменклатураСтрока,ИмяПко);
							СтрокаДопРасходы.СтоимостьТоваров = Окр(СтрокаНоменклатура.СуммаТовара / ?(ДанныеИБ.КурсДокумента = 0, 1, ДанныеИБ.КурсДокумента), 2); 
								
							Если СтрокаНоменклатура.Количество = КоличествоСписать Тогда 
									
								СтрокаДопРасходы.Сумма 		= СуммаСписать;
								СтрокаДопРасходы.СуммаНДС 	= СуммаНДССписать;   
									
							Иначе 
									
								СтрокаДопРасходы.СуммаНДС = ?(
									СтрокаПартии[0].СуммаНДС =0,
									0,
									Окр(СтрокаПартии[0].СуммаНДС / КоличествоНоменклатура * СтрокаНоменклатура.Количество, 2)
								);		
		
								СтрокаДопРасходы.Сумма =  ?(
									СтрокаПартии[0].Сумма =0, 
									0, 
									Окр(СтрокаПартии[0].Сумма/ КоличествоНоменклатура * СтрокаНоменклатура.Количество,2)
								);
							КонецЕсли;
								
							СтрокаДопРасходы.Количество			= СтрокаНоменклатура.Количество;
							СтрокаДопРасходы.ДокументПоступления= СтрокаНоменклатура.ДокументПартииСтрока;
		
							КоличествоСписать	= КоличествоСписать - СтрокаНоменклатура.Количество; 
							СуммаСписать		= СуммаСписать- СтрокаДопРасходы.Сумма;
							СуммаНДССписать		= СуммаНДССписать- СтрокаДопРасходы.СуммаНДС; 
						КонецЦикла; 
					КонецЕсли;
				КонецЦикла;
					
				Если Не СуммаВключаетНДС Тогда 
					Для Каждого Строка Из тзДопРасходы Цикл
						Строка.Сумма = Строка.Сумма - Строка.СуммаНДС;
					КонецЦикла;
				КонецЕсли;
						
			Иначе
			
				Для Каждого ТекущаяСтрока из ТаблицаТоваров Цикл
					СтрокаПартии = ТаблицаДопРасходовАвто.Найти(ТекущаяСтрока.НоменклатураСтрока, "Автомобиль");
					Если СтрокаПартии <> Неопределено Тогда
						СтрокаДопРасходы = тзДопРасходы.Добавить();
						ИмяПКО = "Справочник_Автомобили_Отправка";
						СтрокаДопРасходы.Номенклатура = Новый Структура("Значение, ИмяПко",ТекущаяСтрока.НоменклатураСтрока,ИмяПко);
							
						СтрокаДопРасходы.СтоимостьТоваров = Окр(ТекущаяСтрока.СуммаТовара / ?(ДанныеИБ.КурсДокумента = 0, 1, ДанныеИБ.КурсДокумента), 2);
						СтрокаДопРасходы.Сумма			= ? (СуммаВключаетНДС, СтрокаПартии.Сумма, СтрокаПартии.Сумма - СтрокаПартии.СуммаНДС);
						СтрокаДопРасходы.СуммаНДС		= СтрокаПартии.СуммаНДС;
						СтрокаДопРасходы.Количество		= ТекущаяСтрока.Количество;
							
						СтрокаДопРасходы.ДокументПоступления = ТекущаяСтрока.ДокументПартииСтрока;
							
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
			
		Результат.Вставить("РасшифровкаДопРасходов", тзДопРасходы);
			
		Возврат Результат;
КонецФункции
Функция ДанныеТЧПоступлениеТоваров(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	Результат = Новый Структура();
	
	//!!! ТРЕБУЕТСЯ ДЕЛАТЬ АНАЛОГИЧНЫЕ ПРАВКИ МЕЖДУ ПРОЦЕДУРАМИ:
	//ДанныеТЧПоступлениеТоваров()
	//ДанныеТЧПоступлениеТоваровИзПередачаТоваровМеждуОрганизациями();
		
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД; 
	СвернутьПоступление = КомпонентыОбмена.ПараметрыКонвертации.СвернутьПоступление;
			
	Запрос = НоВый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				|	МАКСИМУМ(ПоступлениеТоваровТовары.НомерСтроки) КАК НомерСтрокиДокумента,
				|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
				|	ПоступлениеТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	СУММА(ВЫРАЗИТЬ(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
				|	СУММА(ВЫБОР
				|			КОГДА &СуммаВключаетНДС
				|				ТОГДА ПоступлениеТоваровТовары.СуммаВсего
				|			ИНАЧЕ ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС
				|		КОНЕЦ) КАК Сумма,
				|	СУММА(0) КАК Цена,
				|	СУММА(ПоступлениеТоваровТовары.СуммаНДС) КАК СуммаНДС,
				|	ПоступлениеТоваровТовары.СтавкаНДС КАК Ставка,
				|	ВЫБОР
				|		КОГДА &Комиссия
				|			ТОГДА ""КомиссионныеТовары""
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ТипЗапасов,
				|	ПоступлениеТоваровТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки,
				|	СУММА(ПоступлениеТоваровТовары.СуммаРозничная) КАК СуммаВРознице,
				|	СУММА(0) КАК ЦенаВРознице,
				|	ПоступлениеТоваровТовары.ГТД КАК ГТД,
				|	ПоступлениеТоваровТовары.Номенклатура.Прослеживаемый
				|		И &УчетПоГТД КАК ПрослеживаемыйТовар
				|ИЗ
				|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
				|ГДЕ
				|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
				|	И ПоступлениеТоваровТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
				|
				|СГРУППИРОВАТЬ ПО
				|	ПоступлениеТоваровТовары.Номенклатура,
				|	ПоступлениеТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения,
				|	ПоступлениеТоваровТовары.СтавкаНДС,
				|	ПоступлениеТоваровТовары.СтавкаНДС.Ставка,
				|	ПоступлениеТоваровТовары.Номенклатура.Прослеживаемый
				|		И &УчетПоГТД,
				|	ПоступлениеТоваровТовары.ГТД
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МАКСИМУМ(ПоступлениеТоваровТовары.НомерСтроки) КАК НомерСтрокиДокумента,
				|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
				|	СУММА(ВЫРАЗИТЬ(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
				|	СУММА(ВЫБОР
				|			КОГДА (ВЫРАЗИТЬ(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент КАК ЧИСЛО(15, 3))) = 0
				|				ТОГДА ВЫБОР
				|						КОГДА &СуммаВключаетНДС
				|							ТОГДА ПоступлениеТоваровТовары.СуммаВсего
				|						ИНАЧЕ ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС
				|					КОНЕЦ
				|			ИНАЧЕ ВЫБОР
				|					КОГДА &СуммаВключаетНДС
				|						ТОГДА ПоступлениеТоваровТовары.СуммаВсего
				|					ИНАЧЕ ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС
				|				КОНЕЦ
				|		КОНЕЦ) КАК Сумма,
				|	СУММА(0) КАК Цена,
				|	ПоступлениеТоваровТовары.Ссылка.ПодразделениеКомпании КАК ПодразделениеЗатрат,
				|	ВЫБОР
				|		КОГДА ПОДСТРОКА(ПоступлениеТоваровТовары.Содержание, 1, 100) = """"
				|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровТовары.Номенклатура.НаименованиеПолное, 1, 100)
				|		ИНАЧЕ ПоступлениеТоваровТовары.Содержание
				|	КОНЕЦ КАК Содержание,
				|	НЕ ПоступлениеТоваровТовары.Номенклатура.СпособРаспределенияДопРасходов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы) КАК ЭтоДопРасходы,
				|	ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов КАК СтатьяЗатрат,
				|	ВЫБОР
				|		КОГДА ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
				|			ТОГДА """"
				|		ИНАЧЕ ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов.КоррСчет.Код
				|	КОНЕЦ КАК СчетЗатрат,
				|	ПоступлениеТоваровТовары.СтавкаНДС КАК Ставка,
				|	СУММА(ПоступлениеТоваровТовары.СуммаНДС) КАК СуммаНДС,
				|	ПоступлениеТоваровТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки
				|ИЗ
				|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
				|ГДЕ
				|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
				|	И ПоступлениеТоваровТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
				|
				|СГРУППИРОВАТЬ ПО
				|	ПоступлениеТоваровТовары.Номенклатура,
				|	ПоступлениеТоваровТовары.Ссылка.ПодразделениеКомпании,
				|	НЕ ПоступлениеТоваровТовары.Номенклатура.СпособРаспределенияДопРасходов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы),
				|	ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов,
				|	ВЫБОР
				|		КОГДА ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
				|			ТОГДА """"
				|		ИНАЧЕ ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов.КоррСчет
				|	КОНЕЦ,
				|	ПоступлениеТоваровТовары.СтавкаНДС,
				|	ПоступлениеТоваровТовары.СтавкаНДС.Ставка,
				|	ВЫБОР
				|		КОГДА ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
				|			ТОГДА """"
				|		ИНАЧЕ ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов.КоррСчет.Код
				|	КОНЕЦ,
				|	ВЫБОР
				|		КОГДА ПОДСТРОКА(ПоступлениеТоваровТовары.Содержание, 1, 100) = """"
				|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровТовары.Номенклатура.НаименованиеПолное, 1, 100)
				|		ИНАЧЕ ПоступлениеТоваровТовары.Содержание
				|	КОНЕЦ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПоступлениеТоваровТовары.НомерСтроки КАК НомерСтрокиДокумента,
				|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
				|	ПоступлениеТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ВЫРАЗИТЬ(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
				|	ВЫБОР
				|		КОГДА &СуммаВключаетНДС
				|			ТОГДА ПоступлениеТоваровТовары.СуммаВсего
				|		ИНАЧЕ ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС
				|	КОНЕЦ КАК Сумма,
				|	0 КАК Цена,
				|	ПоступлениеТоваровТовары.СуммаНДС КАК СуммаНДС,
				|	ПоступлениеТоваровТовары.СтавкаНДС КАК Ставка,
				|	ВЫБОР
				|		КОГДА &Комиссия
				|			ТОГДА ""КомиссионныеТовары""
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ТипЗапасов,
				|	ПоступлениеТоваровТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки,
				|	ПоступлениеТоваровТовары.СуммаРозничная КАК СуммаВРознице,
				|	0 КАК ЦенаВРознице,
				|	ПоступлениеТоваровТовары.ГТД КАК ГТД,
				|	ПоступлениеТоваровТовары.Номенклатура.Прослеживаемый
				|		И &УчетПоГТД КАК ПрослеживаемыйТовар
				|ИЗ
				|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
				|ГДЕ
				|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
				|	И ПоступлениеТоваровТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПоступлениеТоваровТовары.НомерСтроки КАК НомерСтрокиДокумента,
				|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
				|	ВЫРАЗИТЬ(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
				|	ВЫБОР
				|		КОГДА (ВЫРАЗИТЬ(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент КАК ЧИСЛО(15, 3))) = 0
				|			ТОГДА ВЫБОР
				|					КОГДА &СуммаВключаетНДС
				|						ТОГДА ПоступлениеТоваровТовары.СуммаВсего
				|					ИНАЧЕ ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|				КОГДА &СуммаВключаетНДС
				|					ТОГДА ПоступлениеТоваровТовары.СуммаВсего
				|				ИНАЧЕ ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС
				|			КОНЕЦ
				|	КОНЕЦ КАК Сумма,
				|	0 КАК Цена,
				|	ПоступлениеТоваровТовары.Ссылка.ПодразделениеКомпании КАК ПодразделениеЗатрат,
				|	ВЫБОР
				|		КОГДА ПОДСТРОКА(ПоступлениеТоваровТовары.Содержание, 1, 100) = """"
				|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровТовары.Номенклатура.НаименованиеПолное, 1, 100)
				|		ИНАЧЕ ПоступлениеТоваровТовары.Содержание
				|	КОНЕЦ КАК Содержание,
				|	НЕ ПоступлениеТоваровТовары.Номенклатура.СпособРаспределенияДопРасходов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы) КАК ЭтоДопРасходы,
				|	ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов КАК СтатьяЗатрат,
				|	ВЫБОР
				|		КОГДА ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
				|			ТОГДА """"
				|		ИНАЧЕ ПоступлениеТоваровТовары.Номенклатура.СтатьяДопРасходов.КоррСчет.Код
				|	КОНЕЦ КАК СчетЗатрат,
				|	ПоступлениеТоваровТовары.СтавкаНДС КАК Ставка,
				|	ПоступлениеТоваровТовары.СуммаНДС КАК СуммаНДС,
				|	ПоступлениеТоваровТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки
				|ИЗ
				|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
				|ГДЕ
				|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
				|	И ПоступлениеТоваровТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
				|	СУММА(ВЫРАЗИТЬ(ПартииТоваровКомпании.Сумма / &КурсДокумента КАК ЧИСЛО(15, 2))) КАК Сумма,
				|	СУММА(ВЫРАЗИТЬ(ПартииТоваровКомпании.СуммаНДС / &КурсДокумента КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
				|	ВЫРАЗИТЬ(ПартииТоваровКомпании.Регистратор КАК Документ.ПоступлениеТоваров) КАК ДокументПоступления,
				|	СУММА(0) КАК Количество,
				|	СУММА(0) КАК СтоимостьТоваров
				|ИЗ
				|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
				|ГДЕ
				|	ПартииТоваровКомпании.Регистратор = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ПартииТоваровКомпании.Номенклатура,
				|	ВЫРАЗИТЬ(ПартииТоваровКомпании.Регистратор КАК Документ.ПоступлениеТоваров)";
				
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	Запрос.УстановитьПараметр("СуммаВключаетНДС",СуммаВключаетНДС);
	Запрос.УстановитьПараметр("Комиссия", ДанныеИБ.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия);
	Запрос.УстановитьПараметр("КурсДокумента", ДанныеИБ.КурсДокумента);
			
	ПакетЗапроса = Запрос.ВыполнитьПакет();
			
	Если СвернутьПоступление Тогда
				
		Товары = ПакетЗапроса[0].Выгрузить();
		Услуги = ПакетЗапроса[1].Выгрузить();
				
	Иначе 
		Товары = ПакетЗапроса[2].Выгрузить();
		Услуги = ПакетЗапроса[3].Выгрузить();
				
	КонецЕсли;
			
	// Товары 
			
	Товары.Колонки.Добавить("СтавкаНДС");
	Услуги.Колонки.Добавить("СтавкаНДС");
		
	ТоварыСГТД = ТоварыСЗаполнениемГТД(Товары, КомпонентыОбмена);
			
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из ТоварыСГТД Цикл
		ТекущаяСтрока.НомерСтрокиДокумента = НомерСтроки;
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		ТекущаяСтрока.ЦенаВРознице = Окр(ТекущаяСтрока.СуммаВРознице / ТекущаяСтрока.Количество, 2);
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
			
	Результат.Вставить("Товары", ТоварыСГТД);
			
	 // Услуги
	ЕстьДопРасход = Ложь;
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из Услуги Цикл
		Если ТекущаяСтрока.ЭтоДопРасходы Тогда
			ЕстьДопРасход = Истина;
		КонецЕсли;
		ТекущаяСтрока.НомерСтрокиДокумента = НомерСтроки;
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
			
	Результат.Вставить("Услуги", Услуги);
			
	// Доп. расходы
	ТаблицаДопРасходов = ПакетЗапроса[4].Выгрузить();
	ТаблицаТоваров = Товары.Скопировать();
	ТаблицаТоваров.Свернуть("Номенклатура", "Сумма,СуммаНДС,Количество");
			
	// Теперь разберемся с услугами, которые распределяются на себестоимость товаров.
	тзДопРасходы		= Новый ТаблицаЗначений();
	тзДопРасходы.Колонки.Добавить("Номенклатура");
	тзДопРасходы.Колонки.Добавить("СтоимостьТоваров");
	тзДопРасходы.Колонки.Добавить("Сумма");
	тзДопРасходы.Колонки.Добавить("СуммаНДС");
	тзДопРасходы.Колонки.Добавить("Количество");
	тзДопРасходы.Колонки.Добавить("ДокументПоступления");
			 
	Если ЕстьДопРасход Тогда
		Для Каждого ТекущаяСтрока из ТаблицаТоваров Цикл
			СтрокаПартии = ТаблицаДопРасходов.Найти(ТекущаяСтрока.Номенклатура, "Номенклатура");
			Если СтрокаПартии <> Неопределено Тогда
				// Сравним Сумма из Партии и СуммаВсего из табличной части. Если они не равны, значит было распределение.
				Если СтрокаПартии.Сумма <> ТекущаяСтрока.Сумма Тогда
					Если СуммаВключаетНДС Тогда
						СтоимостьТоваров = ТекущаяСтрока.Сумма;
					Иначе
						СтоимостьТоваров = ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаНДС;
					КонецЕсли;
					СуммаНДС	= СтрокаПартии.СуммаНДС - ТекущаяСтрока.СуммаНДС;
					Сумма		= СтрокаПартии.Сумма - СтоимостьТоваров - СуммаНДС;
					СтрокаДопРасходы= тзДопРасходы.Добавить();
					СтрокаДопРасходы.Номенклатура	= ТекущаяСтрока.Номенклатура;
					СтрокаДопРасходы.СтоимостьТоваров = СтоимостьТоваров;
					СтрокаДопРасходы.Сумма			= Сумма;
					СтрокаДопРасходы.СуммаНДС		= СуммаНДС;
					СтрокаДопРасходы.Количество		= ТекущаяСтрока.Количество;
					СтрокаДопРасходы.ДокументПоступления = СтрокаПартии.ДокументПоступления;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
			
	Результат.Вставить("РасшифровкаДопРасходов", тзДопРасходы);
			
	Возврат Результат;
КонецФункции
Функция ДанныеТЧПоступлениеТоваровИзПередачаТоваровМеждуОр(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	Результат = Новый Структура();
	
	//!!! ТРЕБУЕТСЯ ДЕЛАТЬ АНАЛОГИЧНЫЕ ПРАВКИ МЕЖДУ ПРОЦЕДУРАМИ:
	//ДанныеТЧПоступлениеТоваров()
	//ДанныеТЧПоступлениеТоваровИзПередачаТоваровМеждуОрганизациями();
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	Запрос = НоВый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ПоступлениеТоваровТовары.НомерСтроки) КАК НомерСтрокиДокумента,
	               |	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	               |	ПоступлениеТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	СУММА(ВЫРАЗИТЬ(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
	               |	СУММА(ВЫБОР
	               |			КОГДА &СуммаВключаетНДС
	               |				ТОГДА ПоступлениеТоваровТовары.СуммаВсего
	               |			ИНАЧЕ ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС
	               |		КОНЕЦ) КАК Сумма,
	               |	СУММА(0) КАК Цена,
	               |	СУММА(ПоступлениеТоваровТовары.СуммаНДС) КАК СуммаНДС,
	               |	ПоступлениеТоваровТовары.СтавкаНДС КАК Ставка,
	               |	"""" КАК ТипЗапасов,
	               |	ПоступлениеТоваровТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки,
	               |	ПоступлениеТоваровТовары.ГТД КАК ГТД,
	               |	ПоступлениеТоваровТовары.Номенклатура.Прослеживаемый
	               |		И &УчетПоГТД КАК ПрослеживаемыйТовар
	               |ИЗ
	               |	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ПоступлениеТоваровТовары
	               |ГДЕ
	               |	ПоступлениеТоваровТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровТовары.Номенклатура,
	               |	ПоступлениеТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения,
	               |	ПоступлениеТоваровТовары.СтавкаНДС,
	               |	ПоступлениеТоваровТовары.СтавкаНДС.Ставка,
	               |	ПоступлениеТоваровТовары.Номенклатура.Прослеживаемый
	               |		И &УчетПоГТД,
	               |	ПоступлениеТоваровТовары.ГТД";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	Запрос.УстановитьПараметр("СуммаВключаетНДС",СуммаВключаетНДС);
	Запрос.УстановитьПараметр("КурсДокумента", ДанныеИБ.КурсДокумента);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	// Товары
	Товары = ПакетЗапроса[0].Выгрузить();
	Товары.Колонки.Добавить("СтавкаНДС");
	
	ТоварыСГТД = ТоварыСЗаполнениемГТД(Товары, КомпонентыОбмена);
	
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из ТоварыСГТД Цикл
		ТекущаяСтрока.НомерСтрокиДокумента = НомерСтроки;
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Результат.Вставить("Товары", ТоварыСГТД);
	
	Возврат Результат;
КонецФункции
Функция ДанныеТЧРеализацииАвтомобилей(ДанныеИБ, КомпонентыОбмена)
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС");
	
	ТаблицаАвтомобилей = Новый ТаблицаЗначений();
	ТаблицаАвтомобилей.Колонки.Добавить("НомерСтрокиДокумента");
	ТаблицаАвтомобилей.Колонки.Добавить("Номенклатура");
	ТаблицаАвтомобилей.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаАвтомобилей.Колонки.Добавить("Количество");
	ТаблицаАвтомобилей.Колонки.Добавить("Сумма");
	ТаблицаАвтомобилей.Колонки.Добавить("Цена");
	ТаблицаАвтомобилей.Колонки.Добавить("СтавкаНДС");
	ТаблицаАвтомобилей.Колонки.Добавить("ГТД");
	ТаблицаАвтомобилей.Колонки.Добавить("СуммаНДС");
	ТаблицаАвтомобилей.Колонки.Добавить("ТипЗапасов");
	ТаблицаАвтомобилей.Колонки.Добавить("ПрослеживаемыйТовар");
	
	ЭтоПередачаНаКомиссию = (ДанныеИБ.ХозОперация = Справочники.ХозОперации.РеализацияАвтомобилейКомиссия);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ЦенаВключаетНДС
	|			ТОГДА РеализацияАвтомобилейАвтомобили.СуммаВсего
	|		ИНАЧЕ РеализацияАвтомобилейАвтомобили.СуммаВсего - РеализацияАвтомобилейАвтомобили.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	РеализацияАвтомобилейАвтомобили.СтавкаНДС КАК Ставка,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль.ГТД КАК ГТД,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль.Прослеживаемый И &УчетПоГТД КАК ПрослеживаемыйТовар,
	|	РеализацияАвтомобилейАвтомобили.СтавкаНДС.Ставка КАК ЗначениеСтавки,
	|	РеализацияАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПередачаНаКомиссию
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	РеализацияАвтомобилейАвтомобили.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
	|ГДЕ
	|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияАвтомобилейТовары.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
	|	СУММА(ВЫБОР
	|			КОГДА &ЦенаВключаетНДС
	|				ТОГДА РеализацияАвтомобилейТовары.СуммаВсего
	|			ИНАЧЕ РеализацияАвтомобилейТовары.СуммаВсего - РеализацияАвтомобилейТовары.СуммаНДС
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(РеализацияАвтомобилейТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Товары КАК РеализацияАвтомобилейТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияАвтомобилейТовары.ИдентификаторАвтомобиля";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ПередачаНаКомиссию", ЭтоПередачаНаКомиссию);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ЦенаВключаетНДС); 
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	Автомобили = ПакетЗапроса[0].Выгрузить();
	Товары = ПакетЗапроса[1].Выгрузить();
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
	
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из Автомобили Цикл
		
		НоваяСтрока = ТаблицаАвтомобилей.Добавить();
		НоваяСтрока.НомерСтрокиДокумента = НомерСтроки;
		НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ГТД = ТекущаяСтрока.ГТД;
		НоваяСтрока.ПрослеживаемыйТовар = ТекущаяСтрока.ПрослеживаемыйТовар;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторАвтомобиля", ТекущаяСтрока.ИдентификаторАвтомобиля);
		НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
		
		Сумма = ТекущаяСтрока.Сумма + ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].Сумма, 0); 
		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.СуммаНДС = ТекущаяСтрока.СуммаНДС + ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].СуммаНДС, 0);
		
		НоваяСтрока.Цена = Сумма;
		НоваяСтрока.ТипЗапасов = ТекущаяСтрока.ТипЗапасов;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ТаблицаАвтомобилейСГТД = ТоварыСЗаполнениемГТД(ТаблицаАвтомобилей, КомпонентыОбмена);
	
	Возврат ТаблицаАвтомобилейСГТД;
КонецФункции
Функция ДанныеТЧРеализацииТоваров(ДанныеИБ, КомпонентыОбмена)
	//!!! ТРЕБУЕТСЯ ДЕЛАТЬ АНАЛОГИЧНЫЕ ПРАВКИ МЕЖДУ ПРОЦЕДУРАМИ:
	//ДанныеТЧРеализацииТоваров()
	//ДанныеТЧРеализацииТоваровИзПередачаТоваровМеждуОрганизациями()
	
	ИспользоватьВозвратнуюТару = КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВозвратнуюТару;
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС");
	
	Результат = Новый Структура();
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиДокумента");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("ГТД");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар");
	
	ТаблицаУслуг = Новый ТаблицаЗначений();
	ТаблицаУслуг.Колонки.Добавить("НомерСтрокиДокумента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Содержание");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Сумма");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("ТипУслуги");
	ТаблицаУслуг.Колонки.Добавить("Принципал");
	ТаблицаУслуг.Колонки.Добавить("ДоговорСПринципалом");
	
	ЭтоРеализацияАгентскихУслуг = (ДанныеИБ.ХозОперация = Справочники.ХозОперации.РеализацияАгентскихУслуг);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		       |	МАКСИМУМ(РеализацияТоваровТовары.НомерСтроки) КАК НомерСтрокиДокумента,
		       |	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
		       |	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		       |	СУММА(РеализацияТоваровТовары.Количество * РеализацияТоваровТовары.Коэффициент) КАК Количество,
		       |	СУММА(ВЫБОР
		       |			КОГДА РеализацияТоваровТовары.Ссылка.ТипЦен.ЦенаВключаетНДС
		       |				ТОГДА РеализацияТоваровТовары.СуммаВсего
		       |			ИНАЧЕ РеализацияТоваровТовары.СуммаВсего - РеализацияТоваровТовары.СуммаНДС
		       |		КОНЕЦ) КАК Сумма,
		       |	СУММА(0) КАК Цена,
		       |	РеализацияТоваровТовары.СтавкаНДС КАК Ставка,
		       |	РеализацияТоваровТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки,
		       |	СУММА(РеализацияТоваровТовары.СуммаНДС) КАК СуммаНДС,
		       |	РеализацияТоваровТовары.ГТД КАК ГТД,
		       |	РеализацияТоваровТовары.Номенклатура.Прослеживаемый
		       |		И &УчетПоГТД КАК ПрослеживаемыйТовар,
		       |	ВЫБОР
		       |		КОГДА &ИспользоватьВозвратнуюТару
		       |				И РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Тара)
		       |			ТОГДА ""ВозвратнаяТара""
		       |		ИНАЧЕ ВЫБОР
		       |				КОГДА НЕ РеализацияТоваровТовары.Партия.ХозОперация ЕСТЬ NULL
		       |						И РеализацияТоваровТовары.Партия.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ПоступлениеТоваровКомиссия)
		       |					ТОГДА ""КомиссионныеТовары""
		       |				ИНАЧЕ ""СобственныеТовары""
		       |			КОНЕЦ
		       |	КОНЕЦ КАК ТипЗапасов,
		       |	РеализацияТоваровТовары.Партия.ХозОперация КАК ПартияХозОперация
		       |ИЗ
		       |	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		       |ГДЕ
		       |	РеализацияТоваровТовары.Ссылка = &Ссылка
		       |	И РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		       |	И НЕ &РеализацияАгентскихУслуг
		       |
		       |СГРУППИРОВАТЬ ПО
		       |	РеализацияТоваровТовары.Номенклатура,
		       |	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения,
		       |	РеализацияТоваровТовары.СтавкаНДС,
		       |	РеализацияТоваровТовары.ГТД,
		       |	РеализацияТоваровТовары.СтавкаНДС.Ставка,
		       |	РеализацияТоваровТовары.Номенклатура.Прослеживаемый
		       |		И &УчетПоГТД,
		       |	РеализацияТоваровТовары.Партия.ХозОперация,
		       |	ВЫБОР
		       |		КОГДА &ИспользоватьВозвратнуюТару
		       |				И РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Тара)
		       |			ТОГДА ""ВозвратнаяТара""
		       |		ИНАЧЕ ВЫБОР
		       |				КОГДА НЕ РеализацияТоваровТовары.Партия.ХозОперация ЕСТЬ NULL
		       |						И РеализацияТоваровТовары.Партия.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ПоступлениеТоваровКомиссия)
		       |					ТОГДА ""КомиссионныеТовары""
		       |				ИНАЧЕ ""СобственныеТовары""
		       |			КОНЕЦ
		       |	КОНЕЦ
		       |;
		       |
		       |////////////////////////////////////////////////////////////////////////////////
		       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		       |	МАКСИМУМ(РеализацияТоваровТовары.НомерСтроки) КАК НомерСтрокиДокумента,
		       |	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
		       |	СУММА(РеализацияТоваровТовары.Количество * РеализацияТоваровТовары.Коэффициент) КАК Количество,
		       |	СУММА(ВЫБОР
		       |			КОГДА РеализацияТоваровТовары.Ссылка.ТипЦен.ЦенаВключаетНДС
		       |				ТОГДА РеализацияТоваровТовары.СуммаВсего
		       |			ИНАЧЕ РеализацияТоваровТовары.СуммаВсего - РеализацияТоваровТовары.СуммаНДС
		       |		КОНЕЦ) КАК Сумма,
		       |	СУММА(0) КАК Цена,
		       |	РеализацияТоваровТовары.СтавкаНДС КАК Ставка,
		       |	РеализацияТоваровТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки,
		       |	СУММА(РеализацияТоваровТовары.СуммаНДС) КАК СуммаНДС,
		       |	ВЫБОР
		       |		КОГДА ПОДСТРОКА(РеализацияТоваровТовары.Содержание, 1, 100) = """"
		       |			ТОГДА ПОДСТРОКА(РеализацияТоваровТовары.Номенклатура.НаименованиеПолное, 1, 100)
		       |		ИНАЧЕ РеализацияТоваровТовары.Содержание
		       |	КОНЕЦ КАК Содержание,
		       |	&ТипЗапасаУслуги КАК ТипУслуги,
		       |	РеализацияТоваровТовары.Ссылка.Комитент КАК Принципал,
		       |	РеализацияТоваровТовары.Ссылка.ДоговорКомитента КАК ДоговорСПринципалом
		       |ИЗ
		       |	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		       |ГДЕ
		       |	РеализацияТоваровТовары.Ссылка = &Ссылка
		       |	И (РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		       |			ИЛИ &РеализацияАгентскихУслуг)
		       |
		       |СГРУППИРОВАТЬ ПО
		       |	РеализацияТоваровТовары.Номенклатура,
		       |	РеализацияТоваровТовары.СтавкаНДС,
		       |	РеализацияТоваровТовары.СтавкаНДС.Ставка,
		       |	РеализацияТоваровТовары.Ссылка.Комитент,
		       |	РеализацияТоваровТовары.Ссылка.ДоговорКомитента,
		       |	ВЫБОР
		       |		КОГДА ПОДСТРОКА(РеализацияТоваровТовары.Содержание, 1, 100) = """"
		       |			ТОГДА ПОДСТРОКА(РеализацияТоваровТовары.Номенклатура.НаименованиеПолное, 1, 100)
		       |		ИНАЧЕ РеализацияТоваровТовары.Содержание
		       |	КОНЕЦ";
	 Запрос.УстановитьПараметр("ИспользоватьВозвратнуюТару", ИспользоватьВозвратнуюТару);
	 Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	 Запрос.УстановитьПараметр("РеализацияАгентскихУслуг", ЭтоРеализацияАгентскихУслуг);
	 Запрос.УстановитьПараметр("ТипЗапасаУслуги", ?(ЭтоРеализацияАгентскихУслуг, "Агентские", "Собственные"));
	 Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	// Товары
	Товары = ПакетЗапроса[0].Выгрузить();
	
	Если УчетПоГТД И Товары.Количество() > 0 Тогда
		ТаблицаСФ = СформироватьТЧ_С_ГТД(ДанныеИБ.Ссылка);
		Если ТаблицаСФ.Количество() <> 0 Тогда
			ТаблицаСФ.Свернуть("Номенклатура,ГТД,СтавкаНДС,ЕдиницаИзмерения", "Количество,Сумма,СуммаВсего,СуммаНДС");
			ТаблицаСФ.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
		КонецЕсли;	
	КонецЕсли;
	
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из Товары Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерСтрокиДокумента = НомерСтроки;
		НоваяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки,КомпонентыОбмена);
		Если УчетПоГТД И ТекущаяСтрока.ТипЗапасов <> "ВозвратнаяТара" Тогда
			ЗаполнитьКорректноСтрокиГТД(ДанныеИБ.Ссылка, ТаблицаТоваров, НоваяСтрока, ТаблицаСФ, ЦенаВключаетНДС, КомпонентыОбмена);
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ТаблицаТоваровСГТД = ТоварыСЗаполнениемГТД(ТаблицаТоваров, КомпонентыОбмена);
	Результат.Вставить("Товары", ТаблицаТоваровСГТД);
	
	// Услуги
	Услуги = ПакетЗапроса[1].Выгрузить();
	
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из Услуги Цикл
		НоваяСтрока = ТаблицаУслуг.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерСтрокиДокумента = НомерСтроки;
		НоваяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Результат.Вставить("Услуги", ТаблицаУслуг);
	
	Возврат Результат;
КонецФункции
Функция ДанныеТЧРеализацииТоваровИзПередачаТоваровМеждуОрг(ДанныеИБ, КомпонентыОбмена)
	//!!! ТРЕБУЕТСЯ ДЕЛАТЬ АНАЛОГИЧНЫЕ ПРАВКИ МЕЖДУ ПРОЦЕДУРАМИ:
	//ДанныеТЧРеализацииТоваров()
	//ДанныеТЧРеализацииТоваровИзПередачаТоваровМеждуОрганизациями()
	
	ИспользоватьВозвратнуюТару = КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВозвратнуюТару;
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ТипЦен.ЦенаВключаетНДС");
	
	Результат = Новый Структура();
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиДокумента");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("ГТД");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МАКСИМУМ(РеализацияТоваровТовары.НомерСтроки) КАК НомерСтрокиДокумента,
	               |	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	               |	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	СУММА(РеализацияТоваровТовары.Количество * РеализацияТоваровТовары.Коэффициент) КАК Количество,
	               |	СУММА(ВЫБОР
	               |			КОГДА РеализацияТоваровТовары.Ссылка.ТипЦен.ЦенаВключаетНДС
	               |				ТОГДА РеализацияТоваровТовары.СуммаВсего
	               |			ИНАЧЕ РеализацияТоваровТовары.СуммаВсего - РеализацияТоваровТовары.СуммаНДС
	               |		КОНЕЦ) КАК Сумма,
	               |	СУММА(0) КАК Цена,
	               |	РеализацияТоваровТовары.СтавкаНДС КАК Ставка,
	               |	РеализацияТоваровТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки,
	               |	СУММА(РеализацияТоваровТовары.СуммаНДС) КАК СуммаНДС,
	               |	РеализацияТоваровТовары.ГТД КАК ГТД,
	               |	РеализацияТоваровТовары.Номенклатура.Прослеживаемый
	               |		И &УчетПоГТД КАК ПрослеживаемыйТовар,
	               |	ВЫБОР
	               |		КОГДА &ИспользоватьВозвратнуюТару
	               |				И РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Тара)
	               |			ТОГДА ""ВозвратнаяТара""
	               |		ИНАЧЕ ""СобственныеТовары""
	               |	КОНЕЦ КАК ТипЗапасов
	               |ИЗ
	               |	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК РеализацияТоваровТовары
	               |ГДЕ
	               |	РеализацияТоваровТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровТовары.Номенклатура,
	               |	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения,
	               |	РеализацияТоваровТовары.СтавкаНДС,
	               |	РеализацияТоваровТовары.ГТД,
	               |	ВЫБОР
	               |		КОГДА &ИспользоватьВозвратнуюТару
	               |				И РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Тара)
	               |			ТОГДА ""ВозвратнаяТара""
	               |		ИНАЧЕ ""СобственныеТовары""
	               |	КОНЕЦ,
	               |	РеализацияТоваровТовары.СтавкаНДС.Ставка,
	               |	РеализацияТоваровТовары.Номенклатура.Прослеживаемый
	               |		И &УчетПоГТД";
	
	Запрос.УстановитьПараметр("ИспользоватьВозвратнуюТару", ИспользоватьВозвратнуюТару);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	// Товары
	Товары = ПакетЗапроса[0].Выгрузить();
	
	Если УчетПоГТД И Товары.Количество() > 0 Тогда
		ТаблицаСФ = СформироватьТЧ_С_ГТД(ДанныеИБ.Ссылка);
		Если ТаблицаСФ.Количество() <> 0 Тогда
			ТаблицаСФ.Свернуть("Номенклатура,ГТД,СтавкаНДС,ЕдиницаИзмерения", "Количество,Сумма,СуммаВсего,СуммаНДС");
			ТаблицаСФ.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
		КонецЕсли;	
	КонецЕсли;
	
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из Товары Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерСтрокиДокумента = НомерСтроки;
		НоваяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		Если УчетПоГТД И ТекущаяСтрока.ТипЗапасов <> "ВозвратнаяТара" Тогда
			ЗаполнитьКорректноСтрокиГТД(ДанныеИБ.Ссылка, ТаблицаТоваров, НоваяСтрока, ТаблицаСФ, ЦенаВключаетНДС, КомпонентыОбмена);
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ТаблицаТоваровСГТД = ТоварыСЗаполнениемГТД(ТаблицаТоваров, КомпонентыОбмена);
	Результат.Вставить("Товары", ТаблицаТоваровСГТД);
	
	Возврат Результат;
КонецФункции
Функция ДанныеТЧСчетНаОплатуЗаАвтомобили(ДанныеИБ, СуммаВключаетНДС, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетНаОплатуЗаАвтомобилиАвтомобили.Автомобиль КАК НоменклатураСтрока,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА СчетНаОплатуЗаАвтомобилиАвтомобили.СуммаВсего
	|		ИНАЧЕ СчетНаОплатуЗаАвтомобилиАвтомобили.СуммаВсего - СчетНаОплатуЗаАвтомобилиАвтомобили.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	СчетНаОплатуЗаАвтомобилиАвтомобили.СуммаНДС КАК СуммаНДС,
	|	СчетНаОплатуЗаАвтомобилиАвтомобили.СтавкаНДС КАК Ставка,
	|	СчетНаОплатуЗаАвтомобилиАвтомобили.СтавкаНДС.Ставка КАК ЗначениеСтавки,
	|	СчетНаОплатуЗаАвтомобилиАвтомобили.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля
	|ИЗ
	|	Документ.СчетНаОплатуЗаАвтомобили.Автомобили КАК СчетНаОплатуЗаАвтомобилиАвтомобили
	|ГДЕ
	|	СчетНаОплатуЗаАвтомобилиАвтомобили.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуЗаАвтомобилиТовары.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
	|	СУММА(ВЫБОР
	|			КОГДА &СуммаВключаетНДС
	|				ТОГДА СчетНаОплатуЗаАвтомобилиТовары.СуммаВсего
	|			ИНАЧЕ СчетНаОплатуЗаАвтомобилиТовары.СуммаВсего - СчетНаОплатуЗаАвтомобилиТовары.СуммаНДС
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(СчетНаОплатуЗаАвтомобилиТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуЗаАвтомобили.Товары КАК СчетНаОплатуЗаАвтомобилиТовары
	|ГДЕ
	|	СчетНаОплатуЗаАвтомобилиТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуЗаАвтомобилиТовары.ИдентификаторАвтомобиля";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	Автомобили = ПакетЗапроса[0].Выгрузить();
	Товары = ПакетЗапроса[1].Выгрузить();
	
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
	
	Автомобили.Колонки.Добавить("Количество");
	Автомобили.Колонки.Добавить("Цена");
	Автомобили.Колонки.Добавить("ЕдиницаИзмерения");
	Автомобили.Колонки.Добавить("Номенклатура");
	Автомобили.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ТекущаяСтрока Из Автомобили Цикл
		Если ТипЗнч(ТекущаяСтрока.НоменклатураСтрока) = Тип("СправочникСсылка.Модели") Тогда
			ИмяПко = "Справочник_Модели_Отправка";
		Иначе
			ИмяПко = "Справочник_Автомобили_Отправка";
		КонецЕсли;
		ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПко",ТекущаяСтрока.НоменклатураСтрока,ИмяПко);
		ТекущаяСтрока.Количество = 1;
		ТекущаяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.Ставка, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторАвтомобиля", ТекущаяСтрока.ИдентификаторАвтомобиля);
		НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
		
		Сумма = ТекущаяСтрока.Сумма + ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].Сумма, 0); 
		ТекущаяСтрока.Сумма = Сумма;
		ТекущаяСтрока.СуммаНДС = ТекущаяСтрока.СуммаНДС + ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].СуммаНДС, 0);
		
		ТекущаяСтрока.Цена = Сумма;
		
	КонецЦикла;
	
	Возврат Автомобили;
КонецФункции
Функция ДанныеТЧТаможеннаяДекларацияИмпорт(ДанныеИБ, КомпонентыОбмена)
	Результат = Новый Структура();
	
	Если ДанныеИБ.ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаможеннаяДекларацияИмпортРазделы.НомерРаздела КАК НомерРаздела,
		|	ТаможеннаяДекларацияИмпортРазделы.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
		|	ВЫРАЗИТЬ(ТаможеннаяДекларацияИмпортРазделы.СтавкаПошлины КАК ЧИСЛО(15, 2)) КАК СтавкаПошлины,
		|	ТаможеннаяДекларацияИмпортРазделы.СуммаПошлины КАК СуммаПошлины,
		|	ТаможеннаяДекларацияИмпортРазделы.СтавкаНДС КАК СтавкаЗначениеНДС,
		|	ТаможеннаяДекларацияИмпортРазделы.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ТаможеннаяДекларацияИмпортРазделы
		|ГДЕ
		|	ТаможеннаяДекларацияИмпортРазделы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаможеннаяДекларацияИмпортТовары.НомерРаздела КАК НомерРаздела,
		|	ТаможеннаяДекларацияИмпортТовары.Номенклатура КАК НоменклатураСтрока,
		|	ТаможеннаяДекларацияИмпортТовары.Количество * ТаможеннаяДекларацияИмпортТовары.Коэффициент КАК Количество,
		|	ТаможеннаяДекларацияИмпортТовары.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
		|	ТаможеннаяДекларацияИмпортТовары.СуммаПошлины КАК СуммаПошлины,
		|	ТаможеннаяДекларацияИмпортТовары.СуммаНДС КАК СуммаНДС,
		|	ТаможеннаяДекларацияИмпортТовары.Партия КАК Партия,
		|	ТаможеннаяДекларацияИмпортТовары.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
		|ГДЕ
		|	ТаможеннаяДекларацияИмпортТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		ПакетЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаРазделов = ПакетЗапроса[0].Выгрузить();
		ТаблицаРазделов.Колонки.Добавить("СтавкаНДС");
		
		Для Каждого ТекущаяСтрока Из ТаблицаРазделов Цикл
			
			ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаЗначениеНДС,,КомпонентыОбмена);
			
		КонецЦикла;
		
		
		Результат.Вставить("Разделы", ТаблицаРазделов);
		
		ТаблицаТоваров = ПакетЗапроса[1].Выгрузить();
		
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("ДокументПоступления");
		
		Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
			
			ИмяПко = "Документ_ПоступлениеТоваров_Отправка";
			ТекущаяСтрока.ДокументПоступления = Новый Структура("Значение, ИмяПко",ТекущаяСтрока.Партия,ИмяПко);
			
			ИмяПко = "Справочник_Номенклатура_Отправка";
			ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПко",ТекущаяСтрока.НоменклатураСтрока,ИмяПко);
			
		КонецЦикла;
		
		Результат.Вставить("Товары", ТаблицаТоваров);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаможеннаяДекларацияИмпортРазделы.НомерРаздела КАК НомерРаздела,
		|	ТаможеннаяДекларацияИмпортРазделы.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
		|	ВЫРАЗИТЬ(ТаможеннаяДекларацияИмпортРазделы.СтавкаПошлины КАК ЧИСЛО(15, 2)) КАК СтавкаПошлины,
		|	ТаможеннаяДекларацияИмпортРазделы.СуммаПошлины КАК СуммаПошлины,
		|	ТаможеннаяДекларацияИмпортРазделы.СтавкаНДС КАК СтавкаЗначениеНДС,
		|	ТаможеннаяДекларацияИмпортРазделы.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ТаможеннаяДекларацияИмпортРазделы
		|ГДЕ
		|	ТаможеннаяДекларацияИмпортРазделы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаможеннаяДекларацияИмпортАвтомобили.НомерРаздела КАК НомерРаздела,
		|	ТаможеннаяДекларацияИмпортАвтомобили.Автомобиль КАК НоменклатураСтрока,
		|	1 КАК Количество,
		|	ТаможеннаяДекларацияИмпортАвтомобили.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
		|	ТаможеннаяДекларацияИмпортАвтомобили.СуммаПошлины КАК СуммаПошлины,
		|	ТаможеннаяДекларацияИмпортАвтомобили.СуммаНДС КАК СуммаНДС,
		|	ТаможеннаяДекларацияИмпортАвтомобили.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ТаможеннаяДекларацияИмпортАвтомобили.Склад КАК Склад
		|ПОМЕСТИТЬ ВТТЧДок
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт.Автомобили КАК ТаможеннаяДекларацияИмпортАвтомобили
		|ГДЕ
		|	ТаможеннаяДекларацияИмпортАвтомобили.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТЧДок.НомерРаздела КАК НомерРаздела,
		|	ВТТЧДок.НоменклатураСтрока КАК НоменклатураСтрока,
		|	ВТТЧДок.Количество КАК Количество,
		|	ВТТЧДок.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
		|	ВТТЧДок.СуммаПошлины КАК СуммаПошлины,
		|	ВТТЧДок.СуммаНДС КАК СуммаНДС,
		|	ВТТЧДок.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ОстаткиАвтомобилейОстатки.Партия КАК Партия
		|ИЗ
		|	ВТТЧДок КАК ВТТЧДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей.Остатки(&МоментВремени, ) КАК ОстаткиАвтомобилейОстатки
		|		ПО ВТТЧДок.Склад = ОстаткиАвтомобилейОстатки.СкладКомпании
		|			И ВТТЧДок.НоменклатураСтрока = ОстаткиАвтомобилейОстатки.Автомобиль";
		
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(ДанныеИБ.Дата, ДанныеИБ.Ссылка));
		
		ПакетЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаРазделов = ПакетЗапроса[0].Выгрузить();
		ТаблицаРазделов.Колонки.Добавить("СтавкаНДС");
		
		Для Каждого ТекущаяСтрока Из ТаблицаРазделов Цикл
			
			ТекущаяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаЗначениеНДС,,КомпонентыОбмена);
			
		КонецЦикла;
		
		Результат.Вставить("Разделы", ТаблицаРазделов);
		
		ТаблицаАвто = ПакетЗапроса[2].Выгрузить();
		
		ТаблицаАвто.Колонки.Добавить("Номенклатура");
		ТаблицаАвто.Колонки.Добавить("ДокументПоступления");
		Для Каждого ТекущаяСтрока Из ТаблицаАвто Цикл
			
			ИмяПКО = ПолучитьИмяПКОДокумента(ТекущаяСтрока.Партия, КомпонентыОбмена);
			ТекущаяСтрока.ДокументПоступления = Новый Структура("Значение, ИмяПКО", ТекущаяСтрока.Партия, ИмяПКО);
			
			ИмяПко = "Справочник_Автомобили_Отправка";
			ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО", ТекущаяСтрока.НоменклатураСтрока, ИмяПКО);
			
		КонецЦикла;
		Результат.Вставить("Товары", ТаблицаАвто);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Процедура ДобавитьКонтактнуюИнформацию(ТекОбъект, ЗначенияПолей, ЗначениеВидаКИ)
	Если НЕ ЗначениеЗаполнено(ЗначениеВидаКИ) Тогда
		// Не получен вид КИ.
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗначенияПолей", ЗначенияПолей); 
	
	НайденныеСтроки = ТекОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
	
	// ранее был добавлен
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
			
	ТипЗначенияКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеВидаКИ, "Тип");
	
	Попытка
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ТекОбъект, ЗначенияПолей, ЗначениеВидаКИ, ТипЗначенияКИ);
	Исключение
	КонецПопытки;
КонецПроцедуры
Функция ЗагрузкаГТД(ГТД, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		СтруктураПКО = Новый Структура;
		СтруктураПКО.Вставить("ИмяПКО", "Справочник_ГТД_Получение");
		СтруктураПКО.Вставить("Значение", ГТД);
		Возврат СтруктураПКО;
	Иначе
		СтруктураПКО = Новый Структура;
		СтруктураПКО.Вставить("ИмяПКО", "Справочник_ГТДСтрока_Получение");
		СтруктураПКО.Вставить("Значение", Новый Структура("Код", ГТД));
		Возврат СтруктураПКО;
	КонецЕсли;
КонецФункции
Процедура ЗагрузкаЗаказНарядаБесплатныйВТребованиеНакладную(КомпонентыОбмена, ДанныеИБ, ПравилоЗаказНарядТребованиеОтправка)
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ГТД");
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеЗатрат");
	ТаблицаТоваров.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СчетЗатрат");
	ТаблицаТоваров.Колонки.Добавить("СтатьяЗатрат");
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар");
	
	ДанныеЗатрат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	ДанныеИБ.ВидРемонта,
		"СтатьяРасходаДетали, СтатьяРасходаДетали.КоррСчет.Код");
	
	Комментарий = СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Заказ-наряд'"));
	ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ПравилоЗаказНарядТребованиеОтправка.ИспользуемыеПКО[0]);
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	ТекТабличнаяЧасть	= ПолучитьТаблицуСписания(ДанныеИБ, Истина, "ТоварыВПроизводстве",,, УчетПоГТД);
	
	// Для корректного проставления ГТД свернем
	ТекТабличнаяЧасть.Свернуть(
		"Номенклатура,Коэффициент,ГТД,СтавкаНДС,МестоРазмещения,СтатусПартии,ПрослеживаемыйТовар",
		"Количество,СуммаВсего,СуммаНДС,Сумма,Себестоимость");
	ТаблицаЦехов = ТекТабличнаяЧасть.Скопировать();
	ТаблицаЦехов.Свернуть("МестоРазмещения");
	ЭтоПервыйЗаказНаряд = Истина;
	
	Если УчетПоГТД И ДанныеИБ.Товары.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыВПроизводстве.ГТД.Страна КАК СтранаПроисхождения,
		|	ТоварыВПроизводстве.ГТД.Наименование КАК НомерГТД,
		|	ТоварыВПроизводстве.ГТД КАК ГТД,
		|	ТоварыВПроизводстве.Сумма КАК СуммаВсего,
		|	ТоварыВПроизводстве.СуммаНДС КАК СуммаНДС,
		|	ТоварыВПроизводстве.СтавкаНДС КАК СтавкаНДС,
		|	ТоварыВПроизводстве.СуммаБезНДС КАК Сумма,
		|	ТоварыВПроизводстве.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
		|	ТоварыВПроизводстве.Количество КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.ЗаказНаряд = &ЗаказНаряд
		|	И ТоварыВПроизводстве.ВидДвижения = &ВидДвижения";
		
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ЗаказНаряд", ДанныеИБ.Ссылка);
		
		ТаблицаСФ = Запрос.Выполнить().Выгрузить();
		Если ТаблицаСФ.Количество() <> 0 Тогда
			ТаблицаСФ.Свернуть(
			"Номенклатура,ГТД,СтавкаНДС,ЕдиницаИзмерения,НомерГТД,СтранаПроисхождения", 
			"Количество,Сумма,СуммаВсего,СуммаНДС");
		КонецЕсли;	
	КонецЕсли;
	
	СчетчикЦеха = 0;
	Для Каждого ЦехПартии Из ТаблицаЦехов Цикл
		
		ТаблицаТоваров.Очистить();
		
		ДанныеИБСтруктура = Новый Структура();
		
		ДанныеИБСтруктура.Вставить("ДатаЗакрытия");
		ДанныеИБСтруктура.Вставить("Номер");
		ДанныеИБСтруктура.Вставить("Автор");
		ДанныеИБСтруктура.Вставить("Комментарий");
		ДанныеИБСтруктура.Вставить("Организация");
		
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		ДанныеИБСтруктура.Комментарий = Комментарий;
		
		ДанныеИБСтруктура.Вставить("ПодразделениеКомпании", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЦехПартии.МестоРазмещения, "ПодразделениеКомпании"));
		
		Если ТаблицаЦехов.Количество() = 1 Тогда
			ДанныеИБСтруктура.Вставить("СсылкаДокумента", ДанныеИБ.Ссылка);
		Иначе
			НомерБезПрефиксов = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(ДанныеИБ.Номер, Истина, Истина, Ложь);
			СтандартныеПрефиксы = СтрЗаменить(ДанныеИБ.Номер, НомерБезПрефиксов, "");
			СтандартныеПрефиксы = СтрЗаменить(СтандартныеПрефиксы, " ", "");
			
			ПрефиксНомера = СтандартныеПрефиксы + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СчетчикЦеха), 2);
			НомерНаПечать = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(ДанныеИБ.Номер, Истина, Истина);
			Если СтрДлина(ПрефиксНомера + НомерНаПечать) <= 11 Тогда
				ДанныеИБСтруктура.Номер = ПрефиксНомера
				+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаПечать, 11 - СтрДлина(ПрефиксНомера));
			КонецЕсли;
			ДанныеИБСтруктура.Вставить("СсылкаДокумента", Документы.ЗаказНаряд.ПолучитьСсылку(
			РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъектаВыгрузки(
			ДанныеИБ.Ссылка, ТекПКО.ОбъектФормата, ЦехПартии.МестоРазмещения)));
		КонецЕсли;
		
		ДанныеИБСтруктура.Вставить("Цех", ЦехПартии.МестоРазмещения);
		
		ОтборПоЦеху = Новый Структура("МестоРазмещения", ЦехПартии.МестоРазмещения);
		МассивСтрок = ТекТабличнаяЧасть.НайтиСтроки(ОтборПоЦеху);
		Для Каждого ЗначенияСтроки Из МассивСтрок Цикл
			
			ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияСтроки.Номенклатура,
				"БазоваяЕдиницаИзмерения,ТипНоменклатуры.Наименование");
			
			ТекСтрока = ТаблицаТоваров.Добавить();
			ТекСтрока.Номенклатура = ЗначенияСтроки.Номенклатура;
			ТекСтрока.ЕдиницаИзмерения = ДанныеНоменклатуры.БазоваяЕдиницаИзмерения;
			ТекСтрока.Количество = ЗначенияСтроки.Количество;
			Если НЕ КомпонентыОбмена.ПараметрыКонвертации.НеПередаватьНоменклатурнуюГруппу Тогда
				ТекСтрока.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Наименование",
				 ?(ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию),
					КомпонентыОбмена.ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию,
					ДанныеНоменклатуры.ТипНоменклатурыНаименование));
			КонецЕсли;
			ТекСтрока.ПодразделениеЗатрат = ДанныеИБ.ПодразделениеКомпании;
			ТекСтрока.ТипЗапасов = "СобственныеТовары";
			ТекСтрока.СчетЗатрат = ?(ЗначениеЗаполнено(ДанныеЗатрат.СтатьяРасходаДеталиКоррСчетКод),
			ДанныеЗатрат.СтатьяРасходаДеталиКоррСчетКод, "");
			ТекСтрока.СтатьяЗатрат = ?(ЗначениеЗаполнено(ДанныеЗатрат.СтатьяРасходаДетали),
			ДанныеЗатрат.СтатьяРасходаДетали, Справочники.СтатьиДоходовИРасходов.ПустаяСсылка());
			ТекСтрока.ПрослеживаемыйТовар = ЗначенияСтроки.ПрослеживаемыйТовар;
			
			Если УчетПоГТД Тогда
				ТекСтрока.ГТД = ЗначенияСтроки.ГТД;
				ЗаполнитьКорректноСтрокиГТД(ДанныеИБ.Ссылка, ТаблицаТоваров, ТекСтрока, ТаблицаСФ, ЦенаВключаетНДС, КомпонентыОбмена);
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаТоваровСГТД = ТоварыСЗаполнениемГТД(ТаблицаТоваров, КомпонентыОбмена);
		
		ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваровСГТД);
		
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена,
		ДанныеИБСтруктура, 
		ПравилоЗаказНарядТребованиеОтправка);
		
	КонецЦикла;
КонецПроцедуры
Процедура ЗагрузкаЗаказНарядаВТребованиеНакладную(КомпонентыОбмена, ДанныеИБ, ПравилоЗаказНарядТребованиеОтправка, ПлатныйРемонт = Истина)
	СуммаМатериалов				= 0;
	СуммаНДСМатериалов			= 0;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ГТД");
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеЗатрат");
	ТаблицаТоваров.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СчетЗатрат");
	ТаблицаТоваров.Колонки.Добавить("СтатьяЗатрат");
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар");
	
	ДанныеЗатрат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеИБ.ВидРемонта,
		"СтатьяРасходаДетали, СтатьяРасходаДетали.КоррСчет.Код");
	
	Комментарий = СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Заказ-наряд'"));
	ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ПравилоЗаказНарядТребованиеОтправка.ИспользуемыеПКО[0]);
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	ТекТабличнаяЧасть	= ПолучитьТаблицуСписания(ДанныеИБ, Истина, "ТоварыВПроизводстве",,, УчетПоГТД);
	
	// Для корректного проставления ГТД свернем
	ТекТабличнаяЧасть.Свернуть(
		"Номенклатура,Коэффициент,ГТД,СтавкаНДС,МестоРазмещения,СтатусПартии,ПрослеживаемыйТовар",
		"Количество,СуммаВсего,СуммаНДС,Сумма,Себестоимость");
	ТаблицаЦехов = ТекТабличнаяЧасть.Скопировать();
	ТаблицаЦехов.Свернуть("МестоРазмещения");
	ЭтоПервыйЗаказНаряд = Истина;
	
	Если УчетПоГТД И ДанныеИБ.Товары.Количество() > 0 Тогда
		ТаблицаСФ = СформироватьТЧ_С_ГТД(ДанныеИБ.Ссылка);
		Если ТаблицаСФ.Количество() <> 0 Тогда
			ТаблицаСФ.Свернуть(
				"Номенклатура,ГТД,СтавкаНДС,ЕдиницаИзмерения", 
				"Количество,Сумма,СуммаВсего,СуммаНДС");
		КонецЕсли;	
	КонецЕсли;
	
	СчетчикЦеха = 0;
	Для Каждого ЦехПартии Из ТаблицаЦехов Цикл
		
		ТаблицаТоваров.Очистить();
		
		ДанныеИБСтруктура = Новый Структура();
		
		ДанныеИБСтруктура.Вставить("ДатаЗакрытия");
		ДанныеИБСтруктура.Вставить("Номер");
		ДанныеИБСтруктура.Вставить("Автор");
		ДанныеИБСтруктура.Вставить("Комментарий");
		ДанныеИБСтруктура.Вставить("Организация");
		ДанныеИБСтруктура.Вставить("ПодразделениеКомпании");
		ДанныеИБСтруктура.Вставить("Патент");
		
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		ДанныеИБСтруктура.Комментарий = Комментарий;
		
		Если ТаблицаЦехов.Количество() = 1 Тогда
			ДанныеИБСтруктура.Вставить("СсылкаДокумента", ДанныеИБ.Ссылка);
		Иначе
			НомерБезПрефиксов = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(ДанныеИБ.Номер, Истина, Истина, Ложь);
			СтандартныеПрефиксы = СтрЗаменить(ДанныеИБ.Номер, НомерБезПрефиксов, "");
			СтандартныеПрефиксы = СтрЗаменить(СтандартныеПрефиксы, " ", "");
			
			ПрефиксНомера = СтандартныеПрефиксы + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СчетчикЦеха), 2);
			НомерНаПечать = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(ДанныеИБ.Номер, Истина, Истина);
			Если СтрДлина(ПрефиксНомера + НомерНаПечать) <= 11 Тогда
				ДанныеИБСтруктура.Номер = ПрефиксНомера
					+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаПечать, 11 - СтрДлина(ПрефиксНомера));
			КонецЕсли;
			ДанныеИБСтруктура.Вставить("СсылкаДокумента", Документы.ЗаказНаряд.ПолучитьСсылку(
				РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъектаВыгрузки(
					ДанныеИБ.Ссылка, ТекПКО.ОбъектФормата, ЦехПартии.МестоРазмещения)));
		КонецЕсли;
		
		ДанныеИБСтруктура.Вставить("Цех", ЦехПартии.МестоРазмещения);
		
		ОтборПоЦеху = Новый Структура("МестоРазмещения", ЦехПартии.МестоРазмещения);
		МассивСтрок = ТекТабличнаяЧасть.НайтиСтроки(ОтборПоЦеху);
		Для Каждого ЗначенияСтроки Из МассивСтрок Цикл
			
			ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияСтроки.Номенклатура,
					"БазоваяЕдиницаИзмерения,ТипНоменклатуры.Наименование");
					
			ТекСтрока = ТаблицаТоваров.Добавить();
			ТекСтрока.Номенклатура = ЗначенияСтроки.Номенклатура;
			ТекСтрока.ПрослеживаемыйТовар = ЗначенияСтроки.ПрослеживаемыйТовар;
			ТекСтрока.ЕдиницаИзмерения = ДанныеНоменклатуры.БазоваяЕдиницаИзмерения;
			ТекСтрока.Количество = ЗначенияСтроки.Количество;
			
			ТекСтрока.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Наименование",
				ДанныеНоменклатуры.ТипНоменклатурыНаименование);
		    ТекСтрока.ПодразделениеЗатрат = ДанныеИБ.ПодразделениеКомпании;
		    ТекСтрока.ТипЗапасов = "СобственныеТовары";
		    ТекСтрока.СчетЗатрат = ?(ЗначениеЗаполнено(ДанныеЗатрат.СтатьяРасходаДеталиКоррСчетКод),
		    	ДанныеЗатрат.СтатьяРасходаДеталиКоррСчетКод, "");
			ТекСтрока.СтатьяЗатрат = ?(ЗначениеЗаполнено(ДанныеЗатрат.СтатьяРасходаДетали),
				ДанныеЗатрат.СтатьяРасходаДетали, Справочники.СтатьиДоходовИРасходов.ПустаяСсылка());
			
			Если ЦенаВключаетНДС Тогда
				СуммаМатериалов = СуммаМатериалов + ЗначенияСтроки.СуммаВсего;
			Иначе
				СуммаМатериалов = СуммаМатериалов + ЗначенияСтроки.СуммаВсего - ЗначенияСтроки.СуммаНДС;
			КонецЕсли;
			СуммаНДСМатериалов = СуммаНДСМатериалов + ЗначенияСтроки.СуммаНДС;
				
			Если УчетПоГТД Тогда
				ТекСтрока.ГТД = ЗначенияСтроки.ГТД;
				ЗаполнитьКорректноСтрокиГТД(ДанныеИБ.Ссылка, ТаблицаТоваров, ТекСтрока, ТаблицаСФ, ЦенаВключаетНДС, КомпонентыОбмена);
			КонецЕсли;
							
		КонецЦикла;
		
		
		Товары = ТоварыСЗаполнениемГТД(ТаблицаТоваров, КомпонентыОбмена);
		
		ДанныеИБСтруктура.Вставить("Товары", Товары);
		
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена,
			ДанныеИБСтруктура, 
			ПравилоЗаказНарядТребованиеОтправка);
	
	КонецЦикла;
	
	// Создаем реализацию
	Если ПлатныйРемонт Тогда
		ДанныеИБ.ДополнительныеСвойства.Вставить("СуммаМатериалов", СуммаМатериалов);
		ДанныеИБ.ДополнительныеСвойства.Вставить("СуммаНДСМатериалов", СуммаНДСМатериалов);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузкаЗаказНарядаКомплектацияАвтомобиляВКомплект(КомпонентыОбмена, ДанныеИБ, ПравилоЗаказНарядТребованиеОтправка, ЭтоСборкаАвтомобиля)
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	// АВТОМОБИЛЬ
	ДанныеИБСтруктура = Новый Структура();
	ДанныеИБСтруктура.Вставить("Дата");
	ДанныеИБСтруктура.Вставить("Номер");
	ДанныеИБСтруктура.Вставить("Автор");
	ДанныеИБСтруктура.Вставить("Организация");
	ДанныеИБСтруктура.Вставить("ПодразделениеКомпании");
	
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияАвто();
	
	Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Ссылка,
		"Автор,ДатаЗакрытия,Номер,Организация,ПодразделениеКомпании,СводныйРемонтныйЗаказ.Автомобиль");
	
	ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, Данные);
	
	Если ЭтоСборкаАвтомобиля Тогда
		ДанныеИБСтруктура.Вставить("Комментарий",
		СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Заказ-наряд. Сборка автомобиля.'")));
	Иначе
		ДанныеИБСтруктура.Вставить("Комментарий",
			СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Заказ-наряд. Комплектация автомобиля.'")));
	КонецЕсли;
	
	ДанныеИБСтруктура.Вставить("Дата",					   Данные.ДатаЗакрытия);
	ДанныеИБСтруктура.Вставить("Комплект",                 Данные.СводныйРемонтныйЗаказАвтомобиль);
	ДанныеИБСтруктура.Вставить("КомплектЕдиницаИзмерения", ЕдиницаИзмерения);
	ДанныеИБСтруктура.Вставить("ВидОперации",              "Сборка");
	ДанныеИБСтруктура.Вставить("ТипЗапасов",               "СобственныеТовары");
	ДанныеИБСтруктура.Вставить("Количество",               1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Номенклатура,
	|	ОстаткиАвтомобилейОстатки.Партия КАК ДокументПоступленияСтрока,
	|	ОстаткиАвтомобилейОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ОстаткиАвтомобилейОстатки.СуммаБезНДСОстаток КАК Себестоимость,
	|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
	|	ОстаткиАвтомобилейОстатки.Автомобиль.ГТД КАК ГТД,
	|	ОстаткиАвтомобилейОстатки.Автомобиль.Прослеживаемый
	|		И &УчетПоГТД КАК ПрослеживаемыйТовар
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&Дата, Автомобиль = &Автомобиль) КАК ОстаткиАвтомобилейОстатки";
	Запрос.УстановитьПараметр("Автомобиль",    Данные.СводныйРемонтныйЗаказАвтомобиль);
	Запрос.УстановитьПараметр("УчетПоГТД",     УчетПоГТД);
	Запрос.УстановитьПараметр("Дата", Новый Граница(Данные.ДатаЗакрытия, ВидГраницы.Включая));
	
	ТоварыИзЗапроса = Запрос.Выполнить().Выгрузить();
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("ДокументПоступленияСтрока");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("Себестоимость");
	Товары.Колонки.Добавить("СкладКомпании");
	Товары.Колонки.Добавить("ДокументПоступления");
	Товары.Колонки.Добавить("ТипЗапасов");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ГТД");
	Товары.Колонки.Добавить("ПрослеживаемыйТовар");
	Товары.Колонки.Добавить("Сумма");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	
	Если ТоварыИзЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоСборкаАвтомобиля Тогда
		НовыйСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйСтрока, ТоварыИзЗапроса[0]);
		ИмяПКОНоменклатура = "Справочник_Автомобили_Отправка";
			ИмяПКОПоступление  = ПолучитьИмяПКОДокумента(ТоварыИзЗапроса[0].ДокументПоступленияСтрока, КомпонентыОбмена);
		НовыйСтрока.Номенклатура        = Новый Структура("Значение, ИмяПКО", НовыйСтрока.Номенклатура,              ИмяПКОНоменклатура);
		НовыйСтрока.ДокументПоступления = Новый Структура("Значение, ИмяПКО", НовыйСтрока.ДокументПоступленияСтрока, ИмяПКОПоступление);
		НовыйСтрока.ТипЗапасов          = "СобственныеТовары";
		НовыйСтрока.Количество          = 1;
		НовыйСтрока.ЕдиницаИзмерения    = ЕдиницаИзмерения;
	КонецЕсли;
	ДанныеИБСтруктура.Вставить("СкладКомпании", ТоварыИзЗапроса[0].СкладКомпании);
	
	// ТОВАРЫ
	ДанныеЗатрат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	ДанныеИБ.ВидРемонта, "СтатьяРасходаДетали, СтатьяРасходаДетали.КоррСчет.Код, Наименование");
	
	ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ПравилоЗаказНарядТребованиеОтправка.ИспользуемыеПКО[0]);
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	
	ТекТабличнаяЧасть = ПолучитьТаблицуСписания(ДанныеИБ, Истина, "ТоварыВПроизводстве", , , УчетПоГТД);
	
	// Для корректного проставления ГТД свернем
	ТекТабличнаяЧасть.Свернуть(
		"Номенклатура,Коэффициент,ГТД,СтавкаНДС,МестоРазмещения,СтатусПартии,ПрослеживаемыйТовар",
		"Количество,СуммаВсего,СуммаНДС,Сумма,Себестоимость");
	ТаблицаЦехов = ТекТабличнаяЧасть.Скопировать();
	ТаблицаЦехов.Свернуть("МестоРазмещения");
	
	Если УчетПоГТД И ДанныеИБ.Товары.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыВПроизводстве.ГТД КАК ГТД,
		|	ТоварыВПроизводстве.Сумма КАК СуммаВсего,
		|	ТоварыВПроизводстве.СуммаНДС КАК СуммаНДС,
		|	ТоварыВПроизводстве.СтавкаНДС КАК СтавкаНДС,
		|	ТоварыВПроизводстве.СуммаБезНДС КАК Сумма,
		|	ТоварыВПроизводстве.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
		|	ТоварыВПроизводстве.Количество КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.ЗаказНаряд = &ЗаказНаряд
		|	И ТоварыВПроизводстве.ВидДвижения = &ВидДвижения";
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ЗаказНаряд",  ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("УчетПоГТД",   УчетПоГТД);
		ТаблицаСФ = Запрос.Выполнить().Выгрузить();
		Если ТаблицаСФ.Количество() Тогда
			ТаблицаСФ.Свернуть(
			"Номенклатура,ГТД,СтавкаНДС,ЕдиницаИзмерения",
			"Количество,Сумма,СуммаВсего,СуммаНДС");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЦехПартии Из ТаблицаЦехов Цикл
		
		ОтборПоЦеху = Новый Структура("МестоРазмещения", ЦехПартии.МестоРазмещения);
		МассивСтрок = ТекТабличнаяЧасть.НайтиСтроки(ОтборПоЦеху);
		
		Для Каждого ЗначенияСтроки Из МассивСтрок Цикл
			
			ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЗначенияСтроки.Номенклатура, "БазоваяЕдиницаИзмерения,ТипНоменклатуры.Наименование");
			
			ТекСтрока = Товары.Добавить();
			ТекСтрока.Номенклатура     = ЗначенияСтроки.Номенклатура;
			ТекСтрока.ЕдиницаИзмерения = ДанныеНоменклатуры.БазоваяЕдиницаИзмерения;
			ТекСтрока.Количество       = ЗначенияСтроки.Количество;
			ТекСтрока.Себестоимость    = ЗначенияСтроки.Себестоимость;
			ТекСтрока.ТипЗапасов       = "СобственныеТовары";
			ТекСтрока.ПрослеживаемыйТовар = ЗначенияСтроки.ПрослеживаемыйТовар;
			
			Если УчетПоГТД Тогда
				ГТД = ЗначенияСтроки.ГТД;
				Если НЕ ПустаяСтрока(ГТД) Тогда
					ТекСтрока.ГТД = ЗначенияСтроки.ГТД; 
				КонецЕсли;
				ЗаполнитьКорректноСтрокиГТД(ДанныеИБ.Ссылка, Товары, ТекСтрока, ТаблицаСФ, ЦенаВключаетНДС, КомпонентыОбмена);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Дополним товары автомобилями
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК ГТД,
	|	ОстаткиАвтомобилей.Автомобиль.Прослеживаемый И &УчетПоГТД КАК Прослеживаемый,
	|	ОстаткиАвтомобилей.СтатусПартии КАК СтатусПартии,
	|	ОстаткиАвтомобилей.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &Ссылка
	|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД);
	
		АвтомобилиКСборке = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаАвтомобиля Из АвтомобилиКСборке Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура     = СтрокаАвтомобиля.Автомобиль;
		НоваяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		НоваяСтрока.Количество       = 1;
		НоваяСтрока.Себестоимость    = СтрокаАвтомобиля.Сумма;
		НоваяСтрока.ТипЗапасов       =
			?(СтрокаАвтомобиля.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный,
			"СобственныеТовары",
				"КомиссионныеТовары");
		НоваяСтрока.ПрослеживаемыйТовар = СтрокаАвтомобиля.Прослеживаемый;
		НоваяСтрока.ГТД = СтрокаАвтомобиля.ГТД;
	
	КонецЦикла;
	
	ТоварыСГТД = ТоварыСЗаполнениемГТД(Товары, КомпонентыОбмена);
		
	Если ТоварыСГТД.Количество() Тогда
		ИмяПКОНоменклатура = "Справочник_Номенклатура_Отправка";
		КопияТоваров = ТоварыСГТД.Скопировать();
		Для Каждого ТекущаяСтрока Из КопияТоваров Цикл
			Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
					ТекущаяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО", ТекущаяСтрока.Номенклатура, ИмяПКОНоменклатура);
			ИначеЕсли ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				ТекущаяСтрока.Номенклатура = Новый Структура(
					"Значение, ИмяПКО",
					ТекущаяСтрока.Номенклатура,
					"Справочник_Автомобили_Отправка");
			КонецЕсли;
		КонецЦикла;
		ДанныеИБСтруктура.Вставить("Товары", КопияТоваров);
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена,
			ДанныеИБСтруктура, 
			ПравилоЗаказНарядТребованиеОтправка);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузкаЗаказНарядВРеализациюТоваров(КомпонентыОбмена, ДанныеИБ, ПравилоУЗаказНарядРеализацияОтправка)
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("ГТД");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар");
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Сумма");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("Содержание");
	
	ТаблицаЗачетаАвансов = Новый ТаблицаЗначений;
	ТаблицаЗачетаАвансов.Колонки.Добавить("ДокументАванса");
	ТаблицаЗачетаАвансов.Колонки.Добавить("Сумма");
	
	Комментарий = СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Заказ-наряд'"));
	ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ПравилоУЗаказНарядРеализацияОтправка.ИспользуемыеПКО[0]);
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	ТекТабличнаяЧасть	= ПолучитьТаблицуСписания(ДанныеИБ, Истина, "ТоварыВПроизводстве",,, УчетПоГТД);
	 
	ЗачетАвансов = ДанныеИБ.ЗачетАвансов.Выгрузить(); 
	 
	// Для корректного проставления ГТД свернем
	ТекТабличнаяЧасть.Свернуть(
		"Номенклатура,Коэффициент,ГТД,СтавкаНДС,МестоРазмещения,СтатусПартии,ПрослеживаемыйТовар",
		"Количество,СуммаВсего,СуммаНДС,Сумма,Себестоимость");
	ТаблицаЦехов = ТекТабличнаяЧасть.Скопировать();
	ТаблицаЦехов.Свернуть("МестоРазмещения");
	ЭтоПервыйЗаказНаряд = Истина;
	
	Если УчетПоГТД И ДанныеИБ.Товары.Количество() > 0 Тогда
		ТаблицаСФ = СформироватьТЧ_С_ГТД(ДанныеИБ.Ссылка);
		Если ТаблицаСФ.Количество() <> 0 Тогда
			ТаблицаСФ.Свернуть(
				"Номенклатура,ГТД,СтавкаНДС,ЕдиницаИзмерения", 
				"Количество,Сумма,СуммаВсего,СуммаНДС");
		КонецЕсли;	
	КонецЕсли;
	
	СчетчикЦеха = 0;
	Для Каждого ЦехПартии Из ТаблицаЦехов Цикл
		
		ТаблицаТоваров.Очистить();
		ТаблицаУслуг.Очистить();
		
		ДанныеИБСтруктура = Новый Структура();
		
		ДанныеИБСтруктура.Вставить("ДатаЗакрытия");
		ДанныеИБСтруктура.Вставить("Номер");
		ДанныеИБСтруктура.Вставить("Автор");
		ДанныеИБСтруктура.Вставить("Комментарий");
		ДанныеИБСтруктура.Вставить("Контрагент");
		ДанныеИБСтруктура.Вставить("ДоговорВзаиморасчетов");
		ДанныеИБСтруктура.Вставить("Организация");
		ДанныеИБСтруктура.Вставить("СуммаДокумента");
		ДанныеИБСтруктура.Вставить("ВалютаДокумента");
		ДанныеИБСтруктура.Вставить("ПодразделениеКомпании");
		ДанныеИБСтруктура.Вставить("КурсВалютыВзаиморасчетов");
		ДанныеИБСтруктура.Вставить("СуммаВключаетНДС", ЦенаВключаетНДС);
		ДанныеИБСтруктура.Вставить("ТипЦен");
		ДанныеИБСтруктура.Вставить("Патент");
		ДанныеИБСтруктура.Вставить("Грузополучатель");
		ДанныеИБСтруктура.Вставить("СпособЗачетаАвансов");
			
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		
		ДанныеИБСтруктура.Вставить("Грузоотправитель",
			?(ТипЗнч(ДанныеИБ.Грузоотправитель) = Тип("СправочникСсылка.Контрагенты"),
				ДанныеИБ.Грузоотправитель,
				Справочники.Контрагенты.ПустаяСсылка()));
		
		ДанныеИБСтруктура.Комментарий = Комментарий;
		
		Если ТаблицаЦехов.Количество() = 1 Тогда
			ДанныеИБСтруктура.Вставить("СсылкаДокумента", ДанныеИБ.Ссылка);
		Иначе
			НомерБезПрефиксов = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(ДанныеИБ.Номер, Истина, Истина, Ложь);
			СтандартныеПрефиксы = СтрЗаменить(ДанныеИБ.Номер, НомерБезПрефиксов, "");
			СтандартныеПрефиксы = СтрЗаменить(СтандартныеПрефиксы, " ", "");
			
			ПрефиксНомера = СтандартныеПрефиксы + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СчетчикЦеха), 2);
			НомерНаПечать = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(ДанныеИБ.Номер, Истина, Истина);
			Если СтрДлина(ПрефиксНомера + НомерНаПечать) <= 11 Тогда
				ДанныеИБСтруктура.Номер = ПрефиксНомера
					+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаПечать, 11 - СтрДлина(ПрефиксНомера));
			КонецЕсли;
			ДанныеИБСтруктура.Вставить("СсылкаДокумента", Документы.ЗаказНаряд.ПолучитьСсылку(
				РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъектаВыгрузки(
					ДанныеИБ.Ссылка, ТекПКО.ОбъектФормата, ЦехПартии.МестоРазмещения)));
		КонецЕсли;
		
		ДанныеИБСтруктура.Вставить("Цех", ЦехПартии.МестоРазмещения);
		
		ОтборПоЦеху = Новый Структура("МестоРазмещения", ЦехПартии.МестоРазмещения);
		МассивСтрок = ТекТабличнаяЧасть.НайтиСтроки(ОтборПоЦеху);
		Для Каждого ЗначенияСтроки Из МассивСтрок Цикл
			Количество = Окр(ЗначенияСтроки.Количество * ЗначенияСтроки.Коэффициент, 3);
			ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияСтроки.Номенклатура,
					"ВидНоменклатуры,Наименование,БазоваяЕдиницаИзмерения");
			ЭтоУслуга = (ДанныеНоменклатуры.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга);
			Если ЭтоУслуга Тогда
				ТекСтрока = ТаблицаУслуг.Добавить();
				ТекСтрока.Номенклатура = ЗначенияСтроки.Номенклатура;
				ТекСтрока.Содержание = ДанныеНоменклатуры.Наименование;
			Иначе
				ТекСтрока = ТаблицаТоваров.Добавить();
				ТекСтрока.Номенклатура = ЗначенияСтроки.Номенклатура;
				ТекСтрока.ТипЗапасов = "СобственныеТовары";
				ТекСтрока.ПрослеживаемыйТовар = ЗначенияСтроки.ПрослеживаемыйТовар;
			КонецЕсли;
			ТекСтрока.ЕдиницаИзмерения = ДанныеНоменклатуры.БазоваяЕдиницаИзмерения;
			ТекСтрока.Количество = Количество;
			Если ЦенаВключаетНДС Тогда
				ТекСтрока.Сумма = ЗначенияСтроки.СуммаВсего;
			Иначе
				ТекСтрока.Сумма = ЗначенияСтроки.СуммаВсего - ЗначенияСтроки.СуммаНДС;
			КонецЕсли;
			ТекСтрока.Цена = Окр(ТекСтрока.Сумма / ?(ТекСтрока.Количество = 0, 1, ТекСтрока.Количество), 2);
			ТекСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ЗначенияСтроки.СтавкаНДС,,КомпонентыОбмена);
			ТекСтрока.СуммаНДС = ЗначенияСтроки.СуммаНДС;
			Если НЕ ЭтоУслуга И УчетПоГТД Тогда
				ТекСтрока.ГТД = ЗначенияСтроки.ГТД;
				ЗаполнитьКорректноСтрокиГТД(ДанныеИБ.Ссылка, ТаблицаТоваров, ТекСтрока, ТаблицаСФ, ЦенаВключаетНДС, КомпонентыОбмена);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаТоваров.Свернуть(
			"Номенклатура,СтавкаНДС,ЕдиницаИзмерения,ГТД,ТипЗапасов,ПрослеживаемыйТовар",
			"Количество,Цена,Сумма,СуммаНДС");
		Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
			ТекСтрока.Цена = Окр(ТекСтрока.Сумма / ?(ТекСтрока.Количество = 0, 1, ТекСтрока.Количество), 2);
		КонецЦикла;
		
		Если ЭтоПервыйЗаказНаряд Тогда
			ЗаполнитьТаблицуУслугАвтоработами(ДанныеИБ, КомпонентыОбмена, ТаблицаУслуг, ЦенаВключаетНДС);
		КонецЕсли;
		
		Если ТаблицаТоваров.Количество() = 0 И ТаблицаУслуг.Количество() = 0 Тогда
			СтрокаОшибки = СтрШаблон(НСтр("ru = 'Пропущена загрузка пустого ЗН %1 от %2'"), ДанныеИБ.Номер, ДанныеИБ.Дата);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Формирование выгрузки данных'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				СтрокаОшибки);
			Возврат;
		КонецЕсли;
		
		ТоварыСГТД = ТоварыСЗаполнениемГТД(ТаблицаТоваров, КомпонентыОбмена);
		
		ДанныеИБСтруктура.Вставить("Товары", ТоварыСГТД);
		ДанныеИБСтруктура.Вставить("Услуги", ТаблицаУслуг.Скопировать());
		
		// Заполнение авансов
		ТаблицаЗачетаАвансов.Очистить();
		СуммаДокумента = ТоварыСГТД.Итог("Сумма") + ТаблицаУслуг.Итог("Сумма");
		
		Если СуммаДокумента >= ЗачетАвансов.Итог("Сумма") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗачетАвансов, ТаблицаЗачетаАвансов);
		Иначе
			СтрокиКУдалинию = Новый Массив;
			Для Каждого СтрокаЗачета Из ЗачетАвансов Цикл
				НоваяСтрока = ТаблицаЗачетаАвансов.Добавить();
				НоваяСтрока.ДокументАванса = СтрокаЗачета.ДокументАванса;
				НоваяСтрока.Сумма = Мин(СуммаДокумента, СтрокаЗачета.Сумма);
				
				СтрокаЗачета.Сумма = СтрокаЗачета.Сумма - НоваяСтрока.Сумма;
				
				Если СтрокаЗачета.Сумма = 0 Тогда
					СтрокиКУдалинию.Добавить(СтрокаЗачета);
				КонецЕсли; 
				
				СуммаДокумента = СуммаДокумента - НоваяСтрока.Сумма;
				
				Если СуммаДокумента = 0 Тогда
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;
			
			Для Каждого УдаляемаяСтрокаАванса Из СтрокиКУдалинию Цикл
				ЗачетАвансов.Удалить(УдаляемаяСтрокаАванса);
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеИБСтруктура.Вставить("ЗачетАвансов", ТаблицаЗачетаАвансов);
		     
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена,
			ДанныеИБСтруктура, 
			ПравилоУЗаказНарядРеализацияОтправка);
			
		ЭтоПервыйЗаказНаряд = Ложь;
		СчетчикЦеха = СчетчикЦеха + 1;
	КонецЦикла;
	
	Если ЭтоПервыйЗаказНаряд Тогда
		// Может быть ситуация когда из заказ-наряда были удалены все товары кроме авторабот
		// В таком случае надо загружать в первую реализацию в которой были товары и услуги,
		// так как в ней может быть указан номер из АА, а остальные пометить на удаление
		
		ДанныеИБСтруктура = Новый Структура();
		
		ДанныеИБСтруктура.Вставить("ДатаЗакрытия");
		ДанныеИБСтруктура.Вставить("Номер");
		ДанныеИБСтруктура.Вставить("Автор");
		ДанныеИБСтруктура.Вставить("Комментарий");
		ДанныеИБСтруктура.Вставить("Контрагент");
		ДанныеИБСтруктура.Вставить("ДоговорВзаиморасчетов");
		ДанныеИБСтруктура.Вставить("Организация");
		ДанныеИБСтруктура.Вставить("СуммаДокумента");
		ДанныеИБСтруктура.Вставить("ВалютаДокумента");
		ДанныеИБСтруктура.Вставить("ПодразделениеКомпании");
		ДанныеИБСтруктура.Вставить("КурсВалютыВзаиморасчетов");
		ДанныеИБСтруктура.Вставить("СуммаВключаетНДС", ЦенаВключаетНДС);
		ДанныеИБСтруктура.Вставить("ТипЦен");
		ДанныеИБСтруктура.Вставить("Грузополучатель");
		ДанныеИБСтруктура.Вставить("СпособЗачетаАвансов");
		ДанныеИБСтруктура.Вставить("Патент");
			
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		
		ДанныеИБСтруктура.Вставить("Грузоотправитель",
			?(ТипЗнч(ДанныеИБ.Грузоотправитель) = Тип("СправочникСсылка.Контрагенты"),
				ДанныеИБ.Грузоотправитель,
				Справочники.Контрагенты.ПустаяСсылка()));
		
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		ДанныеИБСтруктура.Комментарий = Комментарий;
		
		ДанныеИБСтруктура.Вставить("Цех", ДанныеИБ.Цех);
		ДанныеИБСтруктура.Вставить("СсылкаДокумента", ДанныеИБ.Ссылка);
		
		ЗаполнитьТаблицуУслугАвтоработами(ДанныеИБ, КомпонентыОбмена, ТаблицаУслуг, ЦенаВключаетНДС);
		
		Если ТаблицаУслуг.Количество() = 0 Тогда
			СтрокаОшибки = СтрШаблон(НСтр("ru = 'Пропущена загрузка пустого ЗН %1 от %2'"), ДанныеИБ.Номер, ДанныеИБ.Дата);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Формирование выгрузки данных'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				СтрокаОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров.Скопировать());
		ДанныеИБСтруктура.Вставить("Услуги", ТаблицаУслуг.Скопировать());
		ДанныеИБСтруктура.Вставить("ЗачетАвансов", ЗачетАвансов);
		
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена,
			ДанныеИБСтруктура, 
			ПравилоУЗаказНарядРеализацияОтправка);
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузкаКорректировкиЗаказНарядПеремещение(КомпонентыОбмена, ДанныеИБ, ОснованиеКорректировки, ПравилоКорректировкаОтправка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
			|	-ПартииТоваровКомпании.Количество КАК Количество,
			|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпании.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)
			|			ТОГДА ""СобственныеТовары""
			|		ИНАЧЕ ""КомиссионныеТовары""
			|	КОНЕЦ КАК ТипЗапасов
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			|ГДЕ
			|	ПартииТоваровКомпании.Регистратор = &Регистратор
			|	И ПартииТоваровКомпании.Количество < 0";
									
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка); 
		
	Товары = Запрос.Выполнить().Выгрузить(); 
		
	Если Товары.Количество() > 0 Тогда    
			
		ДанныеИБСтруктура = Новый Структура();
				
		ДанныеИБСтруктура.Вставить("Автор",					ДанныеИБ.Автор);
		ДанныеИБСтруктура.Вставить("Дата", 					ДанныеИБ.Дата); 
		ДанныеИБСтруктура.Вставить("Номер",					ДанныеИБ.Номер);
		ДанныеИБСтруктура.Вставить("Организация",			ДанныеИБ.Организация);
		ДанныеИБСтруктура.Вставить("СкладПолучатель", 		ДанныеИБ.СкладКомпании);
		ДанныеИБСтруктура.Вставить("Цех ", 					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеКорректировки, "Цех"));
	    ДанныеИБСтруктура.Вставить("Ссылка",				ДанныеИБ.Ссылка);
		ДанныеИБСтруктура.Вставить("Налогообложение");
			
		Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
			ДанныеИБСтруктура.Налогообложение = "ПродажаНеОблагаетсяНДС";
		Иначе
			ДанныеИБСтруктура.Налогообложение = "ПродажаОблагаетсяНДС";
		КонецЕсли; 
			
		ДанныеИБСтруктура.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Корректировка реализации - перемещение товаров'")));
			
		ДанныеИБСтруктура.Вставить("Товары", Товары); 
				
		ПравилоКорректировкаОтправка.ИспользуемыеПКО.Добавить("Документ_КорректировкаПеремещениеТоваров_Отправка");
				
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(
			КомпонентыОбмена,
			ДанныеИБСтруктура, 
			ПравилоКорректировкаОтправка
		);	 
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузкаКорректировкиЗаказНарядПроизводство(КомпонентыОбмена, ДанныеИБ, ОснованиеКорректировки, ПравилоКорректировкаОтправка)
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД; 
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
			|	ПартииТоваровКомпании.Номенклатура.Прослеживаемый КАК ПрослеживаемыйТовар,
			|	ПартииТоваровКомпании.Количество КАК Количество,
			|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА &ОсвобожденОтУплатыНДС
			|			ТОГДА ПартииТоваровКомпании.Сумма
			|		ИНАЧЕ ПартииТоваровКомпании.СуммаБезНДС
			|	КОНЕЦ КАК Сумма,
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпании.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)
			|			ТОГДА ""СобственныеТовары""
			|		ИНАЧЕ ""КомиссионныеТовары""
			|	КОНЕЦ КАК ТипЗапасов,
			|	ВЫБОР
			|		КОГДА &ОсвобожденОтУплатыНДС
			|			ТОГДА ВЫРАЗИТЬ(ПартииТоваровКомпании.Сумма / ПартииТоваровКомпании.Количество КАК ЧИСЛО(15, 2))
			|		ИНАЧЕ ВЫРАЗИТЬ(ПартииТоваровКомпании.СуммаБезНДС / ПартииТоваровКомпании.Количество КАК ЧИСЛО(15, 2))
			|	КОНЕЦ КАК Цена
			|ПОМЕСТИТЬ ВТ_ПартииТоваровКомпании
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			|ГДЕ
			|	ПартииТоваровКомпании.Регистратор = &Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
			|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ВТ_ГТДПартийТоваровКомпании
			|ИЗ
			|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
			|ГДЕ
			|	ГТДПартийТоваровКомпании.Регистратор = &Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
			|	СУММА(ВТ_ПартииТоваровКомпании.Количество) КАК Количество,
			|	ВТ_ПартииТоваровКомпании.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВТ_ПартииТоваровКомпании.ТипЗапасов КАК ТипЗапасов,
			|	СУММА(ВТ_ПартииТоваровКомпании.Сумма) КАК Сумма,
			|	СУММА(ВТ_ПартииТоваровКомпании.Цена) КАК Цена,
			|	ЕСТЬNULL(ВТ_ГТДПартийТоваровКомпании.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)) КАК ГТД,
			|	ВТ_ПартииТоваровКомпании.ПрослеживаемыйТовар
			|		И &УчетПоГТД КАК ПрослеживаемыйТовар
			|ИЗ
			|	ВТ_ПартииТоваровКомпании КАК ВТ_ПартииТоваровКомпании
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГТДПартийТоваровКомпании КАК ВТ_ГТДПартийТоваровКомпании
			|		ПО ВТ_ПартииТоваровКомпании.Номенклатура = ВТ_ГТДПартийТоваровКомпании.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ПартииТоваровКомпании.Номенклатура,
			|	ВТ_ПартииТоваровКомпании.ЕдиницаИзмерения,
			|	ВТ_ПартииТоваровКомпании.ТипЗапасов,
			|	ЕСТЬNULL(ВТ_ГТДПартийТоваровКомпании.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)),
			|	ВТ_ПартииТоваровКомпании.ПрослеживаемыйТовар
			|		И &УчетПоГТД";
			
		
		Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка); 
		Запрос.УстановитьПараметр("ОсвобожденОтУплатыНДС", ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата));	
		Запрос.УстановитьПараметр("УчетПоГТД",  УчетПоГТД); 
	
	ТоварыСГТД = ТоварыСЗаполнениемГТД(Запрос.Выполнить().Выгрузить(), КомпонентыОбмена); 
	
	Если ТоварыСГТД.Количество() > 0 Тогда    
		
		ТЗОприходование 		= ТоварыСГТД.СкопироватьКолонки();
		ТЗТребованиеНакладная	= ТоварыСГТД.СкопироватьКолонки();  
		
		Для Каждого Строка Из ТоварыСГТД Цикл  
			
			Если Строка.Количество > 0 Тогда
				НоваяСтрока = ТЗТребованиеНакладная.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			Иначе 
				НоваяСтрока = ТЗОприходование.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Количество 	= НоваяСтрока.Количество * (-1);
				НоваяСтрока.Сумма 		= НоваяСтрока.Сумма * (-1); 
				НоваяСтрока.Цена 		= НоваяСтрока.Цена * (-1); 
			КонецЕсли;
			
		КонецЦикла; 
		
		ДанныеИБСтруктура = Новый Структура();
			
		ДанныеИБСтруктура.Вставить("Автор",					ДанныеИБ.Автор);
		ДанныеИБСтруктура.Вставить("Дата", 					ДанныеИБ.Дата); 
		ДанныеИБСтруктура.Вставить("Номер",					ДанныеИБ.Номер);
		ДанныеИБСтруктура.Вставить("Организация",			ДанныеИБ.Организация);
		ДанныеИБСтруктура.Вставить("ПодразделениеКомпании",	ДанныеИБ.ПодразделениеКомпании); 
		
		ДанныеИБСтруктура.Вставить("Ссылка",				ДанныеИБ.Ссылка);
	    ДанныеИБСтруктура.Вставить("Налогообложение");
		Если ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата) Тогда
			ДанныеИБСтруктура.Налогообложение = "ПродажаНеОблагаетсяНДС";
		Иначе
			ДанныеИБСтруктура.Налогообложение = "ПродажаОблагаетсяНДС";
		КонецЕсли;   
	
		Если ТЗОприходование.Количество()> 0 Тогда 
			
			ДанныеИБСтруктура.Вставить("СкладКомпании",			ДанныеИБ.СкладКомпании);	
			ДанныеИБСтруктура.Вставить("ТипЦен",				ДанныеИБ.ТипЦен); 		
			ДанныеИБСтруктура.Вставить("СуммаДокумента", ТЗОприходование.Итог("Сумма"));
			
			ДанныеИБСтруктура.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Корректировка реализации - оприходование товаров'")));
			ДанныеИБСтруктура.Вставить("ТоварыОприходование", ТЗОприходование); 
			
			ПравилоКорректировкаОтправка.ИспользуемыеПКО.Добавить("Документ_КорректировкаОприходованиеТоваров_Отправк");
			
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(
				КомпонентыОбмена,
				ДанныеИБСтруктура, 
				ПравилоКорректировкаОтправка
			);	 
		КонецЕсли;
		
		Если  ТЗТребованиеНакладная.Количество()> 0 Тогда 
			
			ТЗТребованиеНакладная.Колонки.Добавить("ПодразделениеЗатрат");
			ТЗТребованиеНакладная.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
			ТЗТребованиеНакладная.Колонки.Добавить("СчетЗатрат");
			ТЗТребованиеНакладная.Колонки.Добавить("СтатьяЗатрат");
			
			ДанныеЗатрат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ОснованиеКорректировки.ВидРемонта,"СтатьяРасходаДетали, СтатьяРасходаДетали.КоррСчет.Код");
					
			Для Каждого Строка Из ТЗТребованиеНакладная Цикл 
				
				ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Номенклатура,
					"БазоваяЕдиницаИзмерения,ТипНоменклатуры.Наименование");
	
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Наименование",
					ДанныеНоменклатуры.ТипНоменклатурыНаименование);
		   		Строка.ПодразделениеЗатрат = ДанныеИБ.ПодразделениеКомпании;
		 		Строка.СчетЗатрат = ?(ЗначениеЗаполнено(ДанныеЗатрат.СтатьяРасходаДеталиКоррСчетКод),
		    		ДанныеЗатрат.СтатьяРасходаДеталиКоррСчетКод, "");
				Строка.СтатьяЗатрат = ?(ЗначениеЗаполнено(ДанныеЗатрат.СтатьяРасходаДетали),
					ДанныеЗатрат.СтатьяРасходаДетали, Справочники.СтатьиДоходовИРасходов.ПустаяСсылка());
		
			КонецЦикла;
		    ДанныеИБСтруктура.Вставить("СкладКомпании", ДанныеИБ.СкладКомпании);
			ДанныеИБСтруктура.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Корректировка реализации - требование накладная'")));
			ДанныеИБСтруктура.Вставить("ТоварыТребование", ТЗТребованиеНакладная); 
			
			ПравилоКорректировкаОтправка.ИспользуемыеПКО.Добавить("Документ_КорректировкаТребованиеНакладная_Отправка");
			
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(
				КомпонентыОбмена,
				ДанныеИБСтруктура, 
				ПравилоКорректировкаОтправка
			);	 
	
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузкаМатериаловЗаказНарядаВТребованиеНакладную(КомпонентыОбмена, ДанныеИБ, ПравилоЗаказНарядТребованиеОтправка)
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ГТД");
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеЗатрат");
	ТаблицаТоваров.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СчетЗатрат");
	ТаблицаТоваров.Колонки.Добавить("СтатьяЗатрат");
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар");
	
	ДанныеЗатрат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеИБ.ВидРемонта,
		"СтатьяРасходаДетали, СтатьяРасходаДетали.КоррСчет.Код");
	
	Комментарий = СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Заказ-наряд (материалы авторабот)'"));
	ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ПравилоЗаказНарядТребованиеОтправка.ИспользуемыеПКО[0]);
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ТипЦен, "ЦенаВключаетНДС");
	
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	ТекТабличнаяЧасть	= ПолучитьТаблицуСписания(ДанныеИБ, Истина, "ТоварыВПроизводстве",, "Материалы", УчетПоГТД);
	
	// Для корректного проставления ГТД свернем
	ТекТабличнаяЧасть.Свернуть(
		"Номенклатура,Коэффициент,ГТД,СтавкаНДС,МестоРазмещения,СтатусПартии,ПрослеживаемыйТовар",
		"Количество,СуммаВсего,СуммаНДС,Сумма,Себестоимость");
	ТаблицаЦехов = ТекТабличнаяЧасть.Скопировать();
	ТаблицаЦехов.Свернуть("МестоРазмещения");
	ЭтоПервыйЗаказНаряд = Истина;
	
	Если УчетПоГТД И ДанныеИБ.Товары.Количество() > 0 Тогда
		ТаблицаСФ = СформироватьТЧ_С_ГТД(ДанныеИБ.Ссылка);
		Если ТаблицаСФ.Количество() <> 0 Тогда
			ТаблицаСФ.Свернуть(
				"Номенклатура,ГТД,СтавкаНДС,ЕдиницаИзмерения", 
				"Количество,Сумма,СуммаВсего,СуммаНДС");
		КонецЕсли;	
	КонецЕсли;
	
	СчетчикЦеха = ТаблицаЦехов.Количество();
	Для Каждого ЦехПартии Из ТаблицаЦехов Цикл
		
		ТаблицаТоваров.Очистить();
		
		ДанныеИБСтруктура = Новый Структура();
		
		ДанныеИБСтруктура.Вставить("ДатаЗакрытия");
		ДанныеИБСтруктура.Вставить("Номер");
		ДанныеИБСтруктура.Вставить("Автор");
		ДанныеИБСтруктура.Вставить("Комментарий");
		ДанныеИБСтруктура.Вставить("Организация");
		ДанныеИБСтруктура.Вставить("ПодразделениеКомпании");
		ДанныеИБСтруктура.Вставить("Патент");
		
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		ДанныеИБСтруктура.Комментарий = Комментарий;
		
		НомерБезПрефиксов = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(ДанныеИБ.Номер, Истина, Истина, Ложь);
		СтандартныеПрефиксы = СтрЗаменить(ДанныеИБ.Номер, НомерБезПрефиксов, "");
		СтандартныеПрефиксы = СтрЗаменить(СтандартныеПрефиксы, " ", "");
		
		ПрефиксНомера = СтандартныеПрефиксы + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СчетчикЦеха), 2);
		НомерНаПечать = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(ДанныеИБ.Номер, Истина, Истина);
		Если СтрДлина(ПрефиксНомера + НомерНаПечать) <= 11 Тогда
			ДанныеИБСтруктура.Номер = ПрефиксНомера
				+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаПечать, 11 - СтрДлина(ПрефиксНомера));
		КонецЕсли;
		ДанныеИБСтруктура.Вставить("СсылкаДокумента", Документы.ЗаказНаряд.ПолучитьСсылку(
			РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъектаВыгрузки(
				ДанныеИБ.Ссылка, ТекПКО.ОбъектФормата, ЦехПартии.МестоРазмещения)));
		
		ДанныеИБСтруктура.Вставить("Цех", ЦехПартии.МестоРазмещения);
		
		ОтборПоЦеху = Новый Структура("МестоРазмещения", ЦехПартии.МестоРазмещения);
		МассивСтрок = ТекТабличнаяЧасть.НайтиСтроки(ОтборПоЦеху);
		Для Каждого ЗначенияСтроки Из МассивСтрок Цикл
			
			ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияСтроки.Номенклатура,
					"БазоваяЕдиницаИзмерения,ТипНоменклатуры.Наименование");
					
			ТекСтрока = ТаблицаТоваров.Добавить();
			ТекСтрока.Номенклатура = ЗначенияСтроки.Номенклатура;
			ТекСтрока.ПрослеживаемыйТовар = ЗначенияСтроки.ПрослеживаемыйТовар;
			ТекСтрока.ЕдиницаИзмерения = ДанныеНоменклатуры.БазоваяЕдиницаИзмерения;
			ТекСтрока.Количество = ЗначенияСтроки.Количество;
			
			ТекСтрока.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Наименование",
				ДанныеНоменклатуры.ТипНоменклатурыНаименование);
		    ТекСтрока.ПодразделениеЗатрат = ДанныеИБ.ПодразделениеКомпании;
		    ТекСтрока.ТипЗапасов = "СобственныеТовары";
		    ТекСтрока.СчетЗатрат = ?(ЗначениеЗаполнено(ДанныеЗатрат.СтатьяРасходаДеталиКоррСчетКод),
		    	ДанныеЗатрат.СтатьяРасходаДеталиКоррСчетКод, "");
			ТекСтрока.СтатьяЗатрат = ?(ЗначениеЗаполнено(ДанныеЗатрат.СтатьяРасходаДетали),
				ДанныеЗатрат.СтатьяРасходаДетали, Справочники.СтатьиДоходовИРасходов.ПустаяСсылка());
				
			Если УчетПоГТД Тогда
				ТекСтрока.ГТД = ЗначенияСтроки.ГТД;
				Если ТаблицаСФ <> Неопределено Тогда
					ЗаполнитьКорректноСтрокиГТД(ДанныеИБ.Ссылка, ТаблицаТоваров, ТекСтрока, ТаблицаСФ, ЦенаВключаетНДС, КомпонентыОбмена);
				КонецЕсли;
			КонецЕсли;
					
		КонецЦикла;
		
		Товары = ТоварыСЗаполнениемГТД(ТаблицаТоваров, КомпонентыОбмена);
		
		ДанныеИБСтруктура.Вставить("Товары", Товары);
		
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена,
			ДанныеИБСтруктура, 
			ПравилоЗаказНарядТребованиеОтправка);
	
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнениеЗаказНарядаСчетуФактуре(ДанныеИБ, ДокументыОснования, КомпонентыОбмена)
	ЗаказНаряд = ДанныеИБ.ДокументОснование;
	
	ИмяПКО = ПолучитьИмяПКОДокумента(ЗаказНаряд, КомпонентыОбмена);
	ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
	ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
	
	// По формату нельзя указывать отчет о розничных продажах в качестве основания СФ
	Если ТекПКО.ОбъектФормата = "Документ.ОтчетОРозничныхПродажах" Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗаказНарядПроизводство Тогда
		НоваяСтрока = ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО);
		Возврат;
	КонецЕсли;
	
	СтруктураКлючевыеСвойства = Новый Структура("ДатаЗакрытия,Номер,СсылкаДокумента,Организация,ТипСоставногоСвойства");
	ЗаполнитьЗначенияСвойств(СтруктураКлючевыеСвойства, ДанныеИБ.ДокументОснование);
	СтруктураКлючевыеСвойства.ТипСоставногоСвойства = ТипСоставногоСвойства;
	МассивИдентификаторов =
		РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов.ИдентификаторыОбъекта(ДанныеИБ.ДокументОснование);
	Если МассивИдентификаторов.Количество() = 0 Тогда
		
		// Проверим наличие складов компании
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ТоварыВПроизводстве.Цех КАК Цех
		               |ИЗ
		               |	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		               |ГДЕ
		               |	ТоварыВПроизводстве.ЗаказНаряд = &ЗаказНаряд";
		Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказНаряд);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 1 Тогда
			СчетчикЦеха = 0;
			НомерЗН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаряд, "Номер");
			Пока Выборка.Следующий() Цикл
					ИдентификаторОбъекта = РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъектаВыгрузки(
					ЗаказНаряд, ТекПКО.ОбъектФормата, Выборка.Цех);
				СтруктураКлючевыеСвойства.СсылкаДокумента = Документы.ЗаказНаряд.ПолучитьСсылку(
					Новый УникальныйИдентификатор(ИдентификаторОбъекта));
				НоваяСтрока = ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = Новый Структура("Значение, ИмяПКО",
					ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураКлючевыеСвойства), ИмяПКО);
				СчетчикЦеха = СчетчикЦеха + 1;
			КонецЦикла;
		Иначе
			СтруктураКлючевыеСвойства.СсылкаДокумента = ДанныеИБ.ДокументОснование;
			НоваяСтрока = ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Новый Структура("Значение, ИмяПКО", СтруктураКлючевыеСвойства, ИмяПКО);
		КонецЕсли;
	Иначе
		СчетчикЦеха = 0;
		НомерЗН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаряд, "Номер");
		Для Каждого ТекущийИдентификатор Из МассивИдентификаторов Цикл
			СтруктураКлючевыеСвойства.СсылкаДокумента = Документы.ЗаказНаряд.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ТекущийИдентификатор));
			НоваяСтрока = ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Новый Структура("Значение, ИмяПКО",
				ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураКлючевыеСвойства), ИмяПКО);
			СчетчикЦеха = СчетчикЦеха + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьГТДТабличнойЧастиКорректировкиРеализации(ТаблицаТоваров, СтрокаТовара, ТаблицаГТД, ТаблицаГТДДоИсправления, ТаблицаГТДДоКорректировки, СуммаВключаетНДС)
	// Нет данных о ГТД
	Если ТаблицаГТД.Количество() = 0 И ТаблицаГТДДоИсправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовара);
	НайденныеГТД = ТаблицаГТД.НайтиСтроки(СтруктураПоиска);
	НайденныеГТДДоИсправления = ТаблицаГТДДоИсправления.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеГТД.Количество() = 1 Тогда
		
		// Добавлен новый товар в корректировку или не был изменен
		Если СтрокаТовара.КоличествоДоИзменения = 0 ИЛИ СтрокаТовара.Количество = СтрокаТовара.КоличествоДоИзменения Тогда
			
			СтрокаГТД = НайденныеГТД[0];
			СтрокаТовара.ГТД = СтрокаГТД.ГТД;
			
			Если СтрокаТовара.КоличествоДоИзменения <> 0 Тогда
				
				// Заполним ГТД по данной таблице
				СтрокаТовара.ГТДДоИзменения = СтрокаГТД.ГТД;
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоНоменклатуры = СтрокаТовара.Количество;
	КоличествоДоКорректировки = СтрокаТовара.КоличествоДоКорректировки;
	КоличествоДоИзменения = СтрокаТовара.КоличествоДоИзменения;
	СуммаДоКорректировки = СтрокаТовара.СуммаДоКорректировки;
	СуммаДоИзменения = СтрокаТовара.СуммаДоИзменения;
	Сумма = СтрокаТовара.Сумма;
	СуммаНДСДоКорректировки = СтрокаТовара.СуммаНДСДоКорректировки;
	СуммаНДСДоИзменения = СтрокаТовара.СуммаНДСДоИзменения;
	СуммаНДС = СтрокаТовара.СуммаНДС;
	
	Для X = 1 По НайденныеГТДДоИсправления.Количество() Цикл
		
		ТекСтрокаИсправления = НайденныеГТДДоИсправления[X-1];
		Если ТекСтрокаИсправления.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Вставить("ГТД", ТекСтрокаИсправления.ГТД);
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		
		НоваяСтрока.КоличествоДоИзменения = ТекСтрокаИсправления.Количество;
		КоличествоДоИзменения = КоличествоДоИзменения - НоваяСтрока.КоличествоДоИзменения;
		ТекСтрокаИсправления.Количество = 0;
		
		Если СуммаВключаетНДС Тогда
			НоваяСтрока.СуммаДоИзменения = ТекСтрокаИсправления.СуммаВсего;
		Иначе
			НоваяСтрока.СуммаДоИзменения = ТекСтрокаИсправления.СуммаВсего - ТекСтрокаИсправления.СуммаНДС;
		КонецЕсли;
		НоваяСтрока.СтавкаНДСПоДокументуРеализации = ТекСтрокаИсправления.СтавкаНДС;
		НоваяСтрока.ЗначениеСтавкаНДСДоИзменения = ТекСтрокаИсправления.СтавкаНДС.Ставка;
		НоваяСтрока.СуммаНДСДоИзменения = ТекСтрокаИсправления.СуммаНДС;
		НоваяСтрока.ГТДДоИзменения = ТекСтрокаИсправления.ГТД;
		СуммаДоИзменения = СуммаДоИзменения - НоваяСтрока.СуммаДоИзменения;
		СуммаНДСДоИзменения = СуммаНДСДоИзменения - НоваяСтрока.СуммаНДСДоИзменения;
		
		// До корректировки
		НайденныеСтроки = ТаблицаГТДДоКорректировки.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.КоличествоДоКорректировки = НайденныеСтроки[0].Количество;
			Если СуммаВключаетНДС Тогда
				НоваяСтрока.СуммаДоКорректировки = НайденныеСтроки[0].СуммаВсего;
			Иначе
				НоваяСтрока.СуммаДоКорректировки = НайденныеСтроки[0].СуммаВсего - НайденныеСтроки[0].СуммаНДС;
			КонецЕсли;
			НоваяСтрока.СуммаНДСДоКорректировки = НайденныеСтроки[0].СуммаНДС;
			
			КоличествоДоКорректировки = КоличествоДоКорректировки - НоваяСтрока.КоличествоДоКорректировки;
			СуммаДоКорректировки = СуммаДоКорректировки - НоваяСтрока.СуммаДоКорректировки;
			СуммаНДСДоКорректировки = СуммаНДСДоКорректировки - НоваяСтрока.СуммаНДСДоКорректировки;
		КонецЕсли;
		
		// Найдем количество по документу
		НайденныеСтроки = ТаблицаГТД.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НоваяСтрока.Количество = НайденныеСтроки[0].Количество;
			НоваяСтрока.ГТД = НайденныеСтроки[0].ГТД;
			Если СуммаВключаетНДС Тогда
				НоваяСтрока.Сумма = НайденныеСтроки[0].СуммаВсего;
			Иначе
				НоваяСтрока.Сумма = НайденныеСтроки[0].СуммаВсего - НайденныеСтроки[0].СуммаНДС;
			КонецЕсли;
			НоваяСтрока.ТекущаяСтавкаСтавкаНДС = НайденныеСтроки[0].СтавкаНДС;
			НоваяСтрока.ЗначениеСтавкаНДС = НайденныеСтроки[0].СтавкаНДС.Ставка;
			НоваяСтрока.СуммаНДС = НайденныеСтроки[0].СуммаНДС;
			КоличествоНоменклатуры = КоличествоНоменклатуры - НоваяСтрока.Количество;
			Сумма = Сумма - НоваяСтрока.Сумма;
			СуммаНДС = СуммаНДС - НоваяСтрока.СуммаНДС;
			
			// Удалим строку из рассмотрения
			ТаблицаГТД.Удалить(НайденныеСтроки[0]);
			
		Иначе
			
			НоваяСтрока.Количество = 0;
			НоваяСтрока.Сумма = 0;
			НоваяСтрока.СуммаНДС = 0;
			
		КонецЕсли;
		
		Если КоличествоНоменклатуры = 0 И КоличествоДоИзменения = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Остались только новые строки
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовара);
	НайденныеГТДСФ = ТаблицаГТД.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТоваров Из НайденныеГТДСФ Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		
		// Почистим не нужные данные
		НоваяСтрока.ЕстьВДокументеПоступленияРеализации = Ложь;
		НоваяСтрока.СтавкаНДСПоДокументуРеализации = Справочники.СтавкиНДС.ПустаяСсылка();
		НоваяСтрока.ЗначениеСтавкаНДСДоИзменения = 0;
		НоваяСтрока.СтавкаНДСДоИзменения = Справочники.СтавкиНДС.ПустаяСсылка();
		НоваяСтрока.КоличествоДоИзменения = 0;
		НоваяСтрока.КоличествоДоКорректировки = 0;
		НоваяСтрока.СуммаНДСДоИзменения = 0;
		НоваяСтрока.СуммаНДСДоКорректировки = 0;
		НоваяСтрока.СуммаДоИзменения = 0;
		НоваяСтрока.СуммаДоКорректировки = 0;
		
		НоваяСтрока.Количество = СтрокаТоваров.Количество;
		НоваяСтрока.ГТД = СтрокаТоваров.ГТД;
		Если СуммаВключаетНДС Тогда
			НоваяСтрока.Сумма = СтрокаТоваров.СуммаВсего;
		Иначе
			НоваяСтрока.Сумма = СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС;
		КонецЕсли;
		НоваяСтрока.ТекущаяСтавкаСтавкаНДС = СтрокаТоваров.СтавкаНДС;
		НоваяСтрока.ЗначениеСтавкаНДС = СтрокаТоваров.СтавкаНДС.Ставка;
		НоваяСтрока.СуммаНДС = СтрокаТоваров.СуммаНДС;
		КоличествоНоменклатуры = КоличествоНоменклатуры - НоваяСтрока.Количество;
		Сумма = Сумма - НоваяСтрока.Сумма;
		СуммаНДС = СуммаНДС - НоваяСтрока.СуммаНДС;
		
	КонецЦикла;
	
	Если КоличествоНоменклатуры = 0 И КоличествоДоИзменения <= 0 Тогда
		
		// Строка распределена, удалим ее
		ТаблицаТоваров.Удалить(СтрокаТовара);
		
	Иначе
		
		// Пересчитаем в текущие суммы
		СтрокаТовара.Количество = КоличествоНоменклатуры;
		СтрокаТовара.КоличествоДоКорректировки = КоличествоДоКорректировки;
		СтрокаТовара.КоличествоДоИзменения = КоличествоДоИзменения;
		СтрокаТовара.СуммаДоКорректировки = СуммаДоКорректировки;
		СтрокаТовара.СуммаДоИзменения = СуммаДоИзменения;
		СтрокаТовара.Сумма = Сумма;
		СтрокаТовара.СуммаНДСДоКорректировки = СуммаНДСДоКорректировки;
		СтрокаТовара.СуммаНДСДоИзменения = СуммаНДСДоИзменения;
		СтрокаТовара.СуммаНДС = СуммаНДС;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДокументСделки(СтруктураДанныхСтроки, XDTOДокументаОснования, ИмяРеквизита = "Сделка")
	Документ = Неопределено;
		
		Попытка
			ТипДокументаОснования = XDTOДокументаОснования.ТипЗначения;
			ИДОбъектаXDTO = XDTOДокументаОснования.Ссылка.Значение;
		    УникальныйИдентификаторСделки = Новый УникальныйИдентификатор(ИДОбъектаXDTO);
			
			
			Если СтрНайти(ТипДокументаОснования, "ОтчетКомиссионера") > 0 Тогда
				Документ = Документы.ОтчетКомиссионера.ПолучитьСсылку(УникальныйИдентификаторСделки);
				Если НЕ СсылкаСуществует(Документ) Тогда
					Документ = Документы.ОтчетКомиссионераЗаАвтомобили.ПолучитьСсылку(УникальныйИдентификаторСделки);
				КонецЕсли; 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ВозвратТоваровПоставщику") > 0 Тогда
				Документ = Документы.ВозвратПоставщику.ПолучитьСсылку(УникальныйИдентификаторСделки);
				Если НЕ СсылкаСуществует(Документ) Тогда
					Документ = Документы.ВозвратПоставщикуАвтомобилей.ПолучитьСсылку(УникальныйИдентификаторСделки);
				КонецЕсли;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "СчетФактураПолученный") > 0 Тогда
				Документ = Документы.СчетФактураПолученный.ПолучитьСсылку(УникальныйИдентификаторСделки); 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "СчетФактураВыданный") > 0 Тогда
				Документ = Документы.СчетФактураВыданный.ПолучитьСсылку(УникальныйИдентификаторСделки); 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "РеализацияТоваровУслуг") > 0 Тогда
				Документ = Документы.РеализацияТоваров.ПолучитьСсылку(УникальныйИдентификаторСделки);
				Если НЕ СсылкаСуществует(Документ) Тогда
					Документ = Документы.РеализацияАвтомобилей.ПолучитьСсылку(УникальныйИдентификаторСделки);
				КонецЕсли;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетКомитенту") > 0 Тогда
				Документ = Документы.ОтчетКомитенту.ПолучитьСсылку(УникальныйИдентификаторСделки);
				Если НЕ СсылкаСуществует(Документ) Тогда
					Документ = Документы.ОтчетКомитентуЗаАвтомобили.ПолучитьСсылку(УникальныйИдентификаторСделки);
				КонецЕсли;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "АктВыполненныхРабот") > 0 Тогда
				// Обработаем в будущем
				Документ = Неопределено;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ВозвратТоваровОтПокупателя") > 0 Тогда
				Документ = Документы.ВозвратОтПокупателя.ПолучитьСсылку(УникальныйИдентификаторСделки);
				Если НЕ СсылкаСуществует(Документ) Тогда
					Документ = Документы.ВозвратОтПокупателяАвтомобилей.ПолучитьСсылку(УникальныйИдентификаторСделки);
				КонецЕсли;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ПоступлениеТоваровУслуг") > 0 Тогда
				Документ = Документы.ПоступлениеТоваров.ПолучитьСсылку(УникальныйИдентификаторСделки);
				Если НЕ СсылкаСуществует(Документ) Тогда
					Документ = Документы.ПоступлениеДопРасходов.ПолучитьСсылку(УникальныйИдентификаторСделки);
					Если НЕ СсылкаСуществует(Документ) Тогда
				    	Документ = Документы.ПоступлениеАвтомобилей.ПолучитьСсылку(УникальныйИдентификаторСделки);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "АвансовыйОтчет") > 0 Тогда
				Документ = Документы.АвансовыйОтчет.ПолучитьСсылку(УникальныйИдентификаторСделки);
			ИначеЕсли СтрНайти(ТипДокументаОснования, "РКОРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.РасходныйКассовыйОрдер.ПолучитьСсылку(УникальныйИдентификаторСделки);
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ПКОРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.ПриходныйКассовыйОрдер.ПолучитьСсылку(УникальныйИдентификаторСделки);
			ИначеЕсли СтрНайти(ТипДокументаОснования, "СБДСРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.Выписка.ПолучитьСсылку(УникальныйИдентификаторСделки);
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ПБДСРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.Выписка.ПолучитьСсылку(УникальныйИдентификаторСделки);
			ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаДолга") > 0 Тогда
				Документ = Документы.Взаимозачет.ПолучитьСсылку(УникальныйИдентификаторСделки);
			ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаПоступленияТоваров") > 0 Тогда
				Документ = Документы.КорректировкаПоступления.ПолучитьСсылку(УникальныйИдентификаторСделки);
			    Если НЕ СсылкаСуществует(Документ) Тогда
					Документ = Документы.КорректировкаПоступленияАвтомобилей.ПолучитьСсылку(УникальныйИдентификаторСделки);
				КонецЕсли;		
			ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаРеализацииТоваров") > 0 Тогда
				Документ = Документы.КорректировкаРеализации.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			    Если НЕ СсылкаСуществует(Документ) Тогда
					Документ = Документы.КорректировкаРеализацииАвтомобилей.ПолучитьСсылку(УникальныйИдентификаторСделки);
				КонецЕсли;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетПереработчика") > 0 Тогда
				// Обработаем в будущем
				Документ = Неопределено;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетДавальцу") > 0 Тогда
				// Обработаем в будущем
				Документ = Неопределено;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОперацияПоПлатежнойКарте") > 0 Тогда
				// Обработаем в будущем
				Документ = Неопределено;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Документ) И ОбщегоНазначения.СсылкаСуществует(Документ) Тогда
			СтруктураДанныхСтроки.Вставить(ИмяРеквизита, Документ);
		КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ)
	ВидыКИ = ПолученныеДанные.КонтактнаяИнформация.Выгрузить();
	ВидыКИ.Свернуть("Вид", "");      
	       
	Для Каждого ВидКИ Из ВидыКИ Цикл
		Если ЗначениеЗаполнено(ВидКИ.Вид) Тогда
			
			СтруктураПоиска = Новый Структура("Вид", ВидКИ.Вид);	
			
			СтрокиДляУдаления = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
				ДанныеИБ.КонтактнаяИнформация.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			
			СтрокиДляКопирования = ПолученныеДанные.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаДляКопирования Из СтрокиДляКопирования Цикл
				НоваяСтрока = ДанныеИБ.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляКопирования);
			КонецЦикла;
		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьКорректноСтрокиГТД(ТекОбъект, ТекТабличнаяЧасть, ТекСтрока, ТЧСФ, ЦенаВключаетНДС = Истина, КомпонентыОбмена)
	ГТД = ТекСтрока.ГТД;
	Если НЕ ПустаяСтрока(ГТД) Тогда 
		Возврат;
	Иначе
		Если ТЧСФ.Количество() <> 0 Тогда
			Если ТекТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура)).Количество() > 1 Тогда
				// Совпадение номенклатуры с разными партиями ищем с точностью до количество если повезет что ГТД было одинаковое то сработает
				ОтборН = Новый Структура("Номенклатура,Количество", ТекСтрока.Номенклатура, ТекСтрока.Количество);
				СтрокиГТД = ТЧСФ.НайтиСтроки(ОтборН);
			Иначе
			ОтборН = Новый Структура("Номенклатура", ТекСтрока.Номенклатура);
				СтрокиГТД = ТЧСФ.НайтиСтроки(ОтборН);
			КонецЕсли;
			Если СтрокиГТД.Количество() = 1 Тогда
				ТекСтрока.ГТД = СтрокиГТД[0].ГТД;
			ИначеЕсли СтрокиГТД.Количество() > 0 Тогда
				
				КоличествоОсталось = ТекСтрока.Количество;
				ПерваяСтрока = Истина;
				Для Каждого ТекущаяСтрока Из СтрокиГТД Цикл
				
					Если ТекущаяСтрока.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоСписать = Мин(ТекущаяСтрока.Количество, КоличествоОсталось);
					СписатьВсеГТД = (КоличествоСписать = ТекущаяСтрока.Количество);
					
					Если ПерваяСтрока Тогда
						СтрокаТоваров = ТекСтрока;
						ПерваяСтрока = Ложь;
					Иначе
						СтрокаТоваров = ТекТабличнаяЧасть.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТоваров, ТекСтрока);
					КонецЕсли;
					СтрокаТоваров.ГТД = ТекущаяСтрока.ГТД;
					СтрокаТоваров.Количество = КоличествоСписать;
					
					Если ЦенаВключаетНДС Тогда
						СтрокаТоваров.Сумма = ?(СписатьВсеГТД,
							ТекущаяСтрока.СуммаВсего,
							Окр(ТекущаяСтрока.СуммаВсего / ТекущаяСтрока.Количество * КоличествоСписать, 2));
					Иначе
						Сумма = ТекущаяСтрока.СуммаВсего - ТекущаяСтрока.СуммаНДС;
						СтрокаТоваров.Сумма = ?(СписатьВсеГТД,
							Сумма,
							Окр(Сумма / ТекущаяСтрока.Количество * КоличествоСписать, 2));
					КонецЕсли;
							
					СтрокаТоваров.Цена  = Окр(СтрокаТоваров.Сумма / СтрокаТоваров.Количество, 2);
					СтрокаТоваров.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС, ,КомпонентыОбмена);
					СтрокаТоваров.СуммаНДС = ?(СписатьВсеГТД,
					ТекущаяСтрока.СуммаНДС,
						Окр(ТекущаяСтрока.СуммаНДС / ТекущаяСтрока.Количество * КоличествоСписать, 2));
						
					ТекущаяСтрока.Количество = ТекущаяСтрока.Количество - КоличествоСписать;
					ТекущаяСтрока.СуммаВсего = ТекущаяСтрока.СуммаВсего - СтрокаТоваров.Сумма;
					ТекущаяСтрока.СуммаНДС = ТекущаяСтрока.СуммаНДС - СтрокаТоваров.СуммаНДС;
					Если КоличествоСписать = КоличествоОсталось Тогда
						Прервать;
					КонецЕсли;
					
					КоличествоОсталось = КоличествоОсталось - КоличествоСписать;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСведенияРНПТ(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, ИмяТЧ = "Товары")
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) <= ВерсияФорматаЧислом("1.16") Тогда
		Возврат;
	КонецЕсли;
		
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД; 
			
	Если Не УчетПоГТД Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеXDTO.Свойство(ИмяТЧ) Тогда
		Возврат
	КонецЕсли;
			
	Отбор = Новый Структура("ПрослеживаемыйТовар"); 
	Отбор.ПрослеживаемыйТовар = Истина;
	СтрокиРНПТ = ДанныеXDTO[ИмяТЧ].НайтиСтроки(Отбор);
			
	Если СтрокиРНПТ.Количество()> 0 Тогда 
			
		Если НЕ ДанныеXDTO.Свойство("СведенияРНПТ") Тогда 
	
			СведенияОПрослеживаемости = Новый ТаблицаЗначений();
			СведенияОПрослеживаемости.Колонки.Добавить("Количество");
			СведенияОПрослеживаемости.Колонки.Добавить("КоличествоРНПТ"); 
			СведенияОПрослеживаемости.Колонки.Добавить("Номенклатура"); 
			СведенияОПрослеживаемости.Колонки.Добавить("РНПТ"); 
			СведенияОПрослеживаемости.Колонки.Добавить("СуммаРНПТ"); 
			СведенияОПрослеживаемости.Колонки.Добавить("ИдентификаторСтроки"); 
		Иначе 
			СведенияОПрослеживаемости = ДанныеXDTO.СведенияРНПТ.Скопировать(); 
		КонецЕсли;
					
		Для Каждого Строка Из СтрокиРНПТ Цикл
			СтрокаПрослеживаемости = СведенияОПрослеживаемости.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПрослеживаемости,Строка);
			СтрокаПрослеживаемости.РНПТ = Строка.НомерГТД;
		КонецЦикла;
							
		ДанныеXDTO.Вставить("СведенияРНПТ", СведенияОПрослеживаемости); 
			
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСведенияРНПТКорректировки(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) <= ВерсияФорматаЧислом("1.16") Тогда
		Возврат;
	КонецЕсли;
			
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД; 
				
	Если Не УчетПоГТД Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ДанныеXDTO.Свойство("Товары") Тогда
		Возврат;
	КонецЕсли;
				
	Отбор = Новый Структура("ПрослеживаемыйТовар"); 
	Отбор.ПрослеживаемыйТовар = Истина;
	СтрокиРНПТ = ДанныеXDTO.Товары.НайтиСтроки(Отбор);
				
	Если СтрокиРНПТ.Количество()> 0 Тогда 
				
		СведенияОПрослеживаемости = Новый ТаблицаЗначений();
		СведенияОПрослеживаемости.Колонки.Добавить("Количество");
		СведенияОПрослеживаемости.Колонки.Добавить("КоличествоРНПТ"); 
		СведенияОПрослеживаемости.Колонки.Добавить("Номенклатура"); 
		СведенияОПрослеживаемости.Колонки.Добавить("РНПТ"); 
		СведенияОПрослеживаемости.Колонки.Добавить("СуммаРНПТ"); 
		СведенияОПрослеживаемости.Колонки.Добавить("ИдентификаторСтроки"); 
		СведенияОПрослеживаемости.Колонки.Добавить("ТипКорректировочнойСтроки");
								
		Для Каждого Строка Из СтрокиРНПТ Цикл
				
			СтрокаКорректировки = СведенияОПрослеживаемости.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКорректировки,Строка);
			СтрокаКорректировки.РНПТ = Строка.НомерГТД; 
			СтрокаКорректировки.ТипКорректировочнойСтроки = "СведенияПослеКорректировки";
				
			СтрокаИсходная = СведенияОПрослеживаемости.Добавить();  
			СтрокаИсходная.ИдентификаторСтроки = Строка.ИдентификаторСтроки;
			СтрокаИсходная.Количество = Строка.КоличествоДоИзменения; 
			СтрокаИсходная.КоличествоРНПТ = Строка.КоличествоДоИзменения;
			СтрокаИсходная.Номенклатура = Строка.Номенклатура;
			СтрокаИсходная.РНПТ = Строка.НомерГТДДоИзменения;
			СтрокаИсходная.ТипКорректировочнойСтроки = "ИсходныеСведения";
				
		КонецЦикла;
								
		ДанныеXDTO.Вставить("СведенияРНПТ", СведенияОПрослеживаемости); 
				
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСпособЗачетАванса(Объект, ДанныеXDTO, КомпонентыОбмена,	Знач ИмяДоговора = "ДоговорВзаиморасчетов", Знач ИмяЗачетаАвансов = "ЗачетАвансов", Знач ИмяСпособЗачетаАвансов = "СпособЗачетаАвансов")
	Если Не ЕстьРеквизит(Объект, ИмяДоговора)
		ИЛИ Не РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект[ИмяДоговора]) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СпособПогашенияЗадолженности");
	Если Не ЗначениеЗаполнено(ДанныеXDTO.СпособПогашенияЗадолженности)
		И ЕстьРеквизит(Объект, ИмяСпособЗачетаАвансов) Тогда
		Если Объект[ИмяСпособЗачетаАвансов] = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			ДанныеXDTO.СпособПогашенияЗадолженности = "НеПогашать";
		ИначеЕсли Объект[ИмяСпособЗачетаАвансов] = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ДанныеXDTO.СпособПогашенияЗадолженности = "ПоДокументу";
		ИначеЕсли Объект[ИмяСпособЗачетаАвансов] = Перечисления.СпособыЗачетаАвансов.Автоматически Тогда
			ДанныеXDTO.СпособПогашенияЗадолженности = "Автоматически";
		КонецЕсли;
	КонецЕсли;
	
	Если (ЕстьРеквизит(Объект,, ИмяЗачетаАвансов)
		ИЛИ ЕстьРеквизит(Объект, ИмяЗачетаАвансов))
		И Объект[ИмяЗачетаАвансов].Количество() > 0
		И Объект[ИмяСпособЗачетаАвансов] = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		ПогашениеЗадолженности = СписокПогашениеЗадолженности();
		СписокНедоступныхДокументовОплат = НедоступныеТипыДокументовДляОплаты();
		
		Для Каждого СтрокаЗачетаАванса Из Объект[ИмяЗачетаАвансов] Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаЗачетаАванса.ДокументАванса)
				ИЛИ СписокНедоступныхДокументовОплат.Найти(ТипЗнч(СтрокаЗачетаАванса.ДокументАванса)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПКО = ПолучитьИмяПКОДокумента(СтрокаЗачетаАванса.ДокументАванса, КомпонентыОбмена);
			
			Если ПустаяСтрока(ИмяПКО) И ТипЗнч(СтрокаЗачетаАванса.ДокументАванса) = Тип("ДокументСсылка.ЧекНаОплату") Тогда
				РаспределитьСуммуАвансаПоЧекам(
					СтрокаЗачетаАванса,
					ПогашениеЗадолженности);
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ПогашениеЗадолженности.Добавить();
			НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаЗачетаАванса.ДокументАванса, ИмяПКО);
			НоваяСтрока.Сумма = СтрокаЗачетаАванса.Сумма;
			
		КонецЦикла;
		
		Если ПогашениеЗадолженности.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСпособЗачетАвансаДляДокументовОплаты(Договор, ДокументРасчетов, РасшифровкаПлатежа, СтрокаРасшифровки)
	Если Не РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Договор) Тогда
		Возврат;
	КонецЕсли;
		
	СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	ТипДокументаРасчетов = ТипЗнч(ДокументРасчетов);
	Если ЗначениеЗаполнено(ДокументРасчетов)
		И (Не Метаданные.ОпределяемыеТипы.ЗаказыДокументовРасчета.Тип.СодержитТип(ТипДокументаРасчетов)
		ИЛИ ТипДокументаРасчетов = Тип("ДокументСсылка.ЗаказНаряд")) Тогда
		СпособПогашенияЗадолженности = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
	КонецЕсли;
		
	Если Не ЕстьРеквизит(РасшифровкаПлатежа, "СпособПогашенияЗадолженности") Тогда
		РасшифровкаПлатежа.Колонки.Добавить("СпособПогашенияЗадолженности");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтрокаРасшифровки.СпособПогашенияЗадолженности) Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаРасшифровки.СпособПогашенияЗадолженности = СпособПогашенияЗадолженности;
КонецПроцедуры
Процедура ЗаполнитьСтрокиПартий(СтруктураПараметров)
	СтрокиПартийОтсортированные = СтруктураПараметров.СтрокиПартийОтсортированные;
	СтрокиПартии = СтруктураПараметров.СтрокиПартии;
	БылАнализСумм = СтруктураПараметров.БылАнализСумм;
	СуммаВсехПроводок = СтруктураПараметров.СуммаВсехПроводок;
	СтрокаТЧ = СтруктураПараметров.СтрокаТЧ;
	МассивНовыхСтрок = СтруктураПараметров.МассивНовыхСтрок;
	РегистрДвиженияПартий = СтруктураПараметров.РегистрДвиженияПартий;
	ПартияОтрицательныхОстатков = СтруктураПараметров.ПартияОтрицательныхОстатков;
	ЕстьСписаниеПартий = СтруктураПараметров.ЕстьСписаниеПартий;
	тзКорректировки = СтруктураПараметров.тзКорректировки;
	
	КоличествоВПартиях = 0;
	КоличествоСторно = 0;
	СуммаСторно = 0;			// Сумма сторнирующих проводок.
	НакопленнаяСебестоимость = 0; // Сумма проводок закрывающих сторно проводку.
	// Разница между накопленной себестоимостью и суммой сторно,
	// падает на первую прямую проводку. (Если Накопленная себестоимость больше суммы сторно)
	СуммаНаПервуюПроводку = 0;
	СуммаКорректировки = 0;		// Сумма корректирующей проводки, которая будет вынесена в отдельную операцию.
	СуммаСписания = 0;			// Сумма, которую необходимо списать проводками.
	ПоследняСтрокаПартии = Ложь;
	ИтогоОкрСумма = 0;
	ИтогоОкрСуммаВсего = 0;
	ИтогоОкрСуммаНДС = 0;
	СуммаТемп = 0;
	СуммаКопеекДляНулевойСебестоимости = 0;
	
	ИндексСтрокиМассива = -1;
	Для Каждого СтрокаПартии Из СтрокиПартийОтсортированные Цикл
		ИндексСтрокиМассива = ИндексСтрокиМассива + 1;
		ПоследняяСтрокаПартии = (ИндексСтрокиМассива = СтрокиПартии.Количество() - 1);
		
		ДвижениеКоличество = СтрокаПартии.Количество;
		Если СтрокаПартии.Сторно Тогда
			КоличествоСторно = КоличествоСторно + (-СтрокаПартии.Количество);
			СуммаСторно = СуммаСторно + (-СтрокаПартии.Себестоимость);
		Иначе
			Если КоличествоСторно > 0 Тогда
				КСписаниюКоличествоСторно = Мин(КоличествоСторно, СтрокаПартии.Количество);
				Если КСписаниюКоличествоСторно = СтрокаПартии.Количество Тогда
					// Значит все количество партии покрывает сторнирующие проводки
					КоличествоСторно = КоличествоСторно - КСписаниюКоличествоСторно; 
					НакопленнаяСебестоимость = НакопленнаяСебестоимость + СтрокаПартии.Себестоимость;
					Продолжить;
				Иначе
					// Если часть количества идет на покрытие сторнирующей проводки а часть на новое движение
					ДвижениеКоличество = СтрокаПартии.Количество - КСписаниюКоличествоСторно;
				КонецЕсли;
				КоличествоСторно = КоличествоСторно - КСписаниюКоличествоСторно;
			КонецЕсли;
			
			Если НЕ БылАнализСумм Тогда
				БылАнализСумм = Истина;
				Если СуммаСторно = НакопленнаяСебестоимость Тогда
					// Значит оставшиеся проводки нужно сделать как есть.
					СуммаНаПервуюПроводку = 0;
					СуммаСписания = СуммаВсехПроводок - НакопленнаяСебестоимость;
					
					// Нужно узнать будут ли там нулевые себестоимости и если да, распределить копейки по ненулевым.
				ИначеЕсли НакопленнаяСебестоимость > СуммаСторно Тогда
					// Значит на первую проводку дополнительно нужно повесить сумму - разницу между сторно
					// и закрывающими проводками
					СуммаНаПервуюПроводку = НакопленнаяСебестоимость - СуммаСторно;
					СуммаСписания = СуммаВсехПроводок - НакопленнаяСебестоимость;
				Иначе
					// НакопленнаяСебестоимость < СуммаСторно  Когда-то было списано суммы больше, чем надо - теперь исправляем.
					Если СуммаВсехПроводок >= СуммаСторно Тогда
						// Значит делаем все как обычно до тех пор, пока не спишем всю сумму, далее проводки с нулевыми суммами.
						СуммаСписания = СуммаВсехПроводок - СуммаСторно;
					Иначе
						// СуммаВсехПроводок < СуммаСторно
						СуммаКорректировки = СуммаСторно - СуммаВсехПроводок;
						СуммаСписания = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;					
			
			КоэфУменьшения = ДвижениеКоличество / СтрокаТЧ.Количество;
			НоваяСтрока = СтруктураПараметров.тзТоварыПартии.Добавить();
			МассивНовыхСтрок.Добавить(НоваяСтрока);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, "Номенклатура,СтавкаНДС,ГТД");
			НоваяСтрока.СтатусПартии = СтрокаПартии.СтатусПартии;
			НоваяСтрока.Количество = ДвижениеКоличество;
			НоваяСтрока.Коэффициент = 1;
			
			НоваяСтрока.СуммаНДС = СтрокаТЧ.СуммаНДС * КоэфУменьшения;
			Если НоваяСтрока.СуммаНДС <> 0 Тогда
				СуммаТемп = НоваяСтрока.СуммаНДС;
				НоваяСтрока.СуммаНДС = (Цел(СуммаТемп * 100)) / 100;
				ИтогоОкрСуммаНДС = ИтогоОкрСуммаНДС + НоваяСтрока.СуммаНДС;
			КонецЕсли;	
			Если ПоследняяСтрокаПартии Тогда
				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + (СтрокаТЧ.СуммаНДС - ИтогоОкрСуммаНДС);
			КонецЕсли;	
			
			НоваяСтрока.СуммаВсего = СтрокаТЧ.СуммаВсего * КоэфУменьшения;
			Если НоваяСтрока.СуммаВсего <> 0 Тогда
				СуммаТемп = НоваяСтрока.СуммаВсего;
				НоваяСтрока.СуммаВсего = (Цел(СуммаТемп * 100)) / 100;
				ИтогоОкрСуммаВсего = ИтогоОкрСуммаВсего + НоваяСтрока.СуммаВсего;
			КонецЕсли;
			Если ПоследняяСтрокаПартии Тогда
				НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + (СтрокаТЧ.СуммаВсего - ИтогоОкрСуммаВсего);
			КонецЕсли;
			
			КоличествоВПартиях = КоличествоВПартиях + ДвижениеКоличество;
			Если РегистрДвиженияПартий = "ТоварыВПроизводстве" Тогда
				НоваяСтрока.МестоРазмещения = СтрокаПартии.МестоРазмещения;
			Иначе
				НоваяСтрока.МестоРазмещения = СтрокаТЧ.МестоРазмещения;
			КонецЕсли;
			
			НоваяСтрока.Сумма = ?(СтрокаТЧ.Сумма = Неопределено, 0, СтрокаТЧ.Сумма * КоэфУменьшения);
			Если НоваяСтрока.Сумма <> 0 Тогда
				СуммаТемп = НоваяСтрока.Сумма;
				НоваяСтрока.Сумма = (Цел(СуммаТемп * 100)) / 100;
				ИтогоОкрСумма = ИтогоОкрСумма + НоваяСтрока.Сумма;
			КонецЕсли;	
			Если ПоследняяСтрокаПартии И СтрокаТЧ.Сумма <> Неопределено Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + (СтрокаТЧ.Сумма - ИтогоОкрСумма);
			КонецЕсли;
			
			СебестоимостьПроводки = Мин(СтрокаПартии.Себестоимость, СуммаСписания);
			СуммаСписания = СуммаСписания - СебестоимостьПроводки;
			Если СуммаНаПервуюПроводку > 0 Тогда
				СебестоимостьПроводки = СебестоимостьПроводки + СуммаНаПервуюПроводку;
				СуммаНаПервуюПроводку = 0;
			КонецЕсли;	
			
			Если СтрокаПартии.ПОО Тогда
				НоваяСтрока.Партия = ПартияОтрицательныхОстатков;
			Иначе
				НоваяСтрока.Партия = СтрокаПартии.Партия;
			КонецЕсли;
			
			
			Если СтрокаПартии.ПОО и ЕстьСписаниеПартий Тогда
				НоваяСтрока.Партия = ПартияОтрицательныхОстатков;
				НоваяСтрока.Себестоимость = СебестоимостьПроводки;
			Иначе
				НоваяСтрока.Партия = СтрокаПартии.Партия;
				НоваяСтрока.Себестоимость = СебестоимостьПроводки;
				Если НоваяСтрока.Себестоимость = 0 Тогда
					НоваяСтрока.Себестоимость = 0.01;
					СуммаКопеекДляНулевойСебестоимости = СуммаКопеекДляНулевойСебестоимости + 0.01;
				КонецЕсли;				
			КонецЕсли;						
			
			// Если дошли до последней строки а СуммаКопеекДляНулевойСебестоимости > 0,
			// то пытаемся раскидать на проводки с ненулевой себестоимостью
			Если ПоследняяСтрокаПартии и СуммаКопеекДляНулевойСебестоимости > 0 Тогда
				
				// Если есть смысл списывать копейки с проводок, то спишем, если нет смысла,
				// то перенесем на корректирующую проводку
				Если (СуммаВсехПроводок - СуммаСторно - СуммаКопеекДляНулевойСебестоимости) > 0 Тогда
					к = 0;
					Пока (к <= МассивНовыхСтрок.Количество()-1) и (СуммаКопеекДляНулевойСебестоимости > 0) Цикл
						СтрокаПартииДляСписанияКопеек = МассивНовыхСтрок.Получить(к);
						к = к + 1;
						Если (СтрокаПартииДляСписанияКопеек.Себестоимость > СуммаКопеекДляНулевойСебестоимости) Тогда
							СтрокаПартииДляСписанияКопеек.Себестоимость =
							СтрокаПартииДляСписанияКопеек.Себестоимость - СуммаКопеекДляНулевойСебестоимости;
							СуммаКопеекДляНулевойСебестоимости = 0;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				СуммаКорректировки = СуммаКорректировки + СуммаКопеекДляНулевойСебестоимости;
			КонецЕсли;
			
			Если СуммаКорректировки > 0 Тогда
				Строка_тзКорректировки = тзКорректировки.Добавить();
				Строка_тзКорректировки.Номенклатура = СтрокаТЧ.Номенклатура;
				Строка_тзКорректировки.Партия = СтрокаПартии.Партия;
				Строка_тзКорректировки.СкладКомпании = СтрокаПартии.МестоРазмещения;
				Строка_тзКорректировки.Себестоимость = СуммаКорректировки;
				СуммаКорректировки = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьТаблицуУслугАвтоработами(ДанныеИБ, КомпонентыОбмена,ТаблицаУслуг, ЦенаВключаетНДС)
	ТекТабличнаяЧастьРабот = ДанныеИБ.Автоработы.Выгрузить();
	Для Каждого ЗначенияСтроки Из ТекТабличнаяЧастьРабот Цикл
		Если ЗначенияСтроки.Сумма = 0  Тогда 
			Продолжить; 
		ИначеЕсли ЗначенияСтроки.ПроцентСкидкиСтроки = 100 Тогда
			Продолжить;
		КонецЕсли;
		ТекСтрока = ТаблицаУслуг.Добавить();
		Если КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьНоменклатуруВАвтоработах Тогда
				ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ЗначенияСтроки.Авторабота, "Номенклатура");	
				ТекСтрока.Номенклатура  = ?(ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура), 
					ДанныеНоменклатуры.Номенклатура,
					ЗначенияСтроки.Авторабота
				 );
		Иначе 	
				ТекСтрока.Номенклатура = ЗначенияСтроки.Авторабота;   
		КонецЕсли;
		ДанныеАвтоработы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЗначенияСтроки.Авторабота, "Наименование,НаименованиеПолное");
		ТекСтрока.Содержание = ?(ЗначениеЗаполнено(ДанныеАвтоработы.НаименованиеПолное),
			ДанныеАвтоработы.НаименованиеПолное, ДанныеАвтоработы.Наименование);
		ТекСтрока.Количество = Окр(ЗначенияСтроки.Количество,2);
		Если ЦенаВключаетНДС Тогда
			ТекСтрока.Сумма = ЗначенияСтроки.СуммаВсего;
		Иначе
			ТекСтрока.Сумма = ЗначенияСтроки.СуммаВсего - ЗначенияСтроки.СуммаНДС;
		КонецЕсли;
		ТекСтрока.Цена = Окр(ТекСтрока.Сумма / ?(ТекСтрока.Количество = 0, 1, ТекСтрока.Количество), 2);
		ТекСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ЗначенияСтроки.СтавкаНДС,,КомпонентыОбмена);
		ТекСтрока.СуммаНДС = ЗначенияСтроки.СуммаНДС;
	КонецЦикла;
	ТаблицаУслуг.Свернуть("Номенклатура,Содержание,СтавкаНДС", "Цена,Количество,Сумма,СуммаНДС");
	Для Каждого ТекСтрока Из ТаблицаУслуг Цикл
		ТекСтрока.Цена = Окр(ТекСтрока.Сумма / ?(ТекСтрока.Количество = 0, 1, ТекСтрока.Количество), 2);
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КлючевыеПоля = "", КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки,
		КлючевыеПоля, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Процедура ЗаполнитьУсловиеПоискаКонтрагента(КомпонентыОбмена, ДанныеXDTO)
	ПравилаКонвертацииКонтрагентов = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_Контрагенты_Получение", "ИмяПКО");
	
		Если ПравилаКонвертацииКонтрагентов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПоляПоиска = ПравилаКонвертацииКонтрагентов.ПоляПоиска;
		ПоляПоиска.Очистить();  
	
		Если ДанныеXDTO.Свойство("КлючевыеСвойства") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства) Тогда   
			ЗначениеСвойства = ДанныеXDTO.КлючевыеСвойства; 
		Иначе 
			ЗначениеСвойства = ДанныеXDTO;
		КонецЕсли;
			
		ЕстьИНН = ЗначениеСвойства.Свойство("ИНН") И ЗначениеЗаполнено(ЗначениеСвойства.ИНН);
		ЕстьКПП = ЗначениеСвойства.Свойство("КПП") И ЗначениеЗаполнено(ЗначениеСвойства.КПП);
		ЭтоЮридическоеЛицо = ЗначениеСвойства.Свойство("ЮридическоеФизическоеЛицо") И
			ЗначениеСвойства.ЮридическоеФизическоеЛицо.Значение = "ЮридическоеЛицо";   
	
		Если ЕстьИНН Тогда
			Если ЭтоЮридическоеЛицо И ЕстьКПП Тогда
				ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа");
			Иначе
				ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
			КонецЕсли;
		Иначе
			ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
			ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
		КонецЕсли;
КонецПроцедуры
Функция ЗапросСсылкиВПубличномИдентификаторе(Ссылка,УзелКорреспондента)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
		|ГДЕ
		|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка = &Ссылка
		|	И ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы = &УзелКорреспондента"; 
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	Запрос.УстановитьПараметр("УзелКорреспондента", УзелКорреспондента); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Возврат Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Функция ЗНВРеализациюИЗакрыт(ЗаказНаряд, КомпонентыОбмена)
	ТипРемонта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаряд.ВидРемонта, "ТипРемонта");
	ЭтоПлатныйРемонт = (ТипРемонта = Перечисления.ТипыРемонта.Платный);
	ФормаСобственностиПлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаряд.Контрагент, "ФормаСобственности");
	ПлательщикФизЛицо = (КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьРозничнуюТорговлюДляФизЛиц
		И ФормаСобственностиПлательщика <> Перечисления.ФормыСобственности.ЮридическоеЛицо);
	
	Если Не ЭтоПлатныйРемонт Тогда
		Возврат Ложь;
	Иначе
		Если ПлательщикФизЛицо Тогда
			Возврат Ложь;
		Иначе
			Возврат ?(ЗаказНаряд.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт, Истина, Ложь);
		КонецЕсли;
	КонецЕсли;
КонецФункции
Функция ИмяПКОФизЛицаПолучение(Идентификатор, УзелКорреспондента)
	ЭтоКонтрагент = Истина;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
		|ГДЕ
		|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Идентификатор = &Идентификатор
		|	И ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы = &УзелКорресподента";
		
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор); 
	Запрос.УстановитьПараметр("УзелКорресподента", УзелКорреспондента);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Не РезультатЗапроса.Пустой() Тогда
			
		ЭтоКонтрагент = Ложь;
		Выборка = РезультатЗапроса.Выбрать();	
			
		Пока Выборка.Следующий() Цикл 
			Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЭтоКонтрагент = Истина;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли; 
			
	Возврат ЭтоКонтрагент;
КонецФункции
Функция ИнициализацияРасшифровкиПлатежа()
	РасшифровкаПлатежа = Новый ТаблицаЗначений();
	РасшифровкаПлатежа.Колонки.Добавить("Договор");
	РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("КратностьВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("КурсВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("ДокументРасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СуммаНДС");
	РасшифровкаПлатежа.Колонки.Добавить("СуммаВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("СтавкаНДС");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	РасшифровкаПлатежа.Колонки.Добавить("Заказ"); 
	РасшифровкаПлатежа.Колонки.Добавить("СпособПогашенияЗадолженности");
	РасшифровкаПлатежа.Колонки.Добавить("Патент"); 
	
	
	Возврат РасшифровкаПлатежа;
КонецФункции
Функция КонтрагентПоНаименованию(НаименованиеПроизводителя, ЭтоГруппа)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Контрагенты.Ссылка КАК Контрагент
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Наименование = &Наименование
	               |	И Контрагенты.ЭтоГруппа = &ЭтоГруппа
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ЭтоГруппа = &ЭтоГруппа
	               |	И (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(50))) = &Наименование";
	Запрос.УстановитьПараметр("Наименование", НаименованиеПроизводителя);
	Запрос.УстановитьПараметр("ЭтоГруппа", НаименованиеПроизводителя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Контрагент
КонецФункции
Функция КурсИКратностьВалюты(Валюта, Дата, ТекущийКурс = 0)
	Результат = Новый Структура("Курс,Кратность");
	
	ДанныеВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеВалюты);
	
	Если Результат.Кратность = 0 Тогда
		Результат.Кратность = 1;
	КонецЕсли;
	
	// Расчитаем курс от текущего значения
	Если ТекущийКурс <> 0 Тогда
		Результат.Курс = Окр(ТекущийКурс * Результат.Кратность, 4);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция НедоступныеТипыДокументовДляОплаты()
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить(Тип("ДокументСсылка.АктРазногласий"));
	СписокДокументов.Добавить(Тип("ДокументСсылка.АктПриемаПередачиЦенныхБумаг"));
	
	Возврат СписокДокументов;
КонецФункции
Процедура ОбработатьСтрокуВыпискиРасчетыСКонтрагентами(СтрокаВыписки, СтрокаРасшифровки, КомпонентыОбмена, ДанныеXDTO)
	ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
	КонтрагентСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
		КомпонентыОбмена,
		ДанныеXDTO.Контрагент,
		ПКО_Контрагент,
		"ПолучитьСсылку").Ссылка; 
	СтрокаВыписки.Контрагент 			= КонтрагентСсылка;
		
	ПКО_Договор = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДоговорыКонтрагентов_Получение"); 
	Если  ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("Договор")<> Неопределено Тогда
		ДоговорСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			СтрокаРасшифровки.Договор,
			ПКО_Договор,
			"ПолучитьСсылку").Ссылка;  
		СтрокаВыписки.ДоговорВзаиморасчетов = ДоговорСсылка;
	КонецЕсли;
		
	Если СтрокаРасшифровки.СтатьяДДС <> Неопределено Тогда
		ПКО_СтатьяДДССсылка = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_СтатьиДДС");
		СтатьяДДССсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			СтрокаРасшифровки.СтатьяДДС,
			ПКО_СтатьяДДССсылка,
			"ПолучитьСсылку").Ссылка;
		СтрокаВыписки.СтатьяДДС 		= СтатьяДДССсылка;
	КонецЕсли; 
		
	Если  ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СуммаНДС")<> Неопределено Тогда
		Если СтрокаРасшифровки.СуммаНДС <> Неопределено Тогда
			СтрокаВыписки.СуммаНДС = СтрокаРасшифровки.СуммаНДС;
		Иначе
			СтрокаВыписки.СуммаНДС = 0;
		КонецЕсли;
		
		Если СтрокаРасшифровки.СтавкаНДС <> Неопределено Тогда
			СтавкаНДССтроки(СтрокаРасшифровки, КомпонентыОбмена);
			СтрокаВыписки.СтавкаНДС	= СтрокаРасшифровки.СтавкаНДС; 
		Иначе
			СтрокаВыписки.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		КонецЕсли; 
		
	КонецЕсли;
		
	СтрокаВыписки.КурсВалютыВзаиморасчетов = СтрокаРасшифровки.КурсВзаиморасчетов /
		?(СтрокаРасшифровки.КратностьВзаиморасчетов = 0, 1, СтрокаРасшифровки.КратностьВзаиморасчетов);
			
	СтруктураДанныхСтроки = Новый Структура;
	ИспользоватьДокументРасчетов =ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов")<> Неопределено ;
	Если ИспользоватьДокументРасчетов Тогда
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ДокументРасчетов) Тогда
			ЗаполнитьДокументСделки(СтруктураДанныхСтроки, СтрокаРасшифровки.ДокументРасчетов);
		КонецЕсли;
			
		// Получим сделку из счета на оплату
		Если НЕ СтруктураДанныхСтроки.Свойство("Сделка") Тогда
				
			Если СтрокаРасшифровки.Заказ <> Неопределено И СтрокаРасшифровки.Заказ.ТипЗначения = "ЗаказПоставщику" Тогда
				УИД = Новый УникальныйИдентификатор(СтрокаРасшифровки.Заказ.Ссылка.Значение);
				СчетНаОплату = Документы.СчетОтПоставщика.ПолучитьСсылку(УИД);
				Если СсылкаСуществует(СчетНаОплату) Тогда
					Сделка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетНаОплату, "ДокументОснование");
				Иначе
					СчетНаОплатуЗаАвтомобили = Документы.СчетОтПоставщикаЗаАвтомобили.ПолучитьСсылку(УИД);
					Если СсылкаСуществует(СчетНаОплатуЗаАвтомобили) Тогда
						Сделка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетНаОплатуЗаАвтомобили, "ДокументОснование");
					КонецЕсли;
				КонецЕсли;
					
				Если ЗначениеЗаполнено(Сделка) Тогда
					СтрокаВыписки.Сделка = Сделка;
				Иначе
					СтрокаВыписки.Сделка = СчетНаОплату;	
				КонецЕсли; 				
			КонецЕсли;
		Иначе
			СтрокаВыписки.Сделка = СтруктураДанныхСтроки.Сделка;					
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ДоговорыКонтрагентов(Объект, КомпонентыОбмена)
	Если Объект.ЕдиницаИзмеренияАвтоработВПечатныхФормах.Пустая()
		И НЕ Объект.ПодразделениеКомпании.Пустая() Тогда
		Объект.ЕдиницаИзмеренияАвтоработВПечатныхФормах = ПолучитьЗначениеУчетнойПолитики("ЕдиницаИзмеренияАвтоработВПечатныхФормах",
			Объект.ПодразделениеКомпании, Объект.ДатаНачала);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СпособЗачетаАвансов) Тогда
		Объект.СпособЗачетаАвансов = Объект.Организация.СпособЗачетаАвансов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СпособВеденияВзаиморасчетов) Тогда
		Объект.СпособВеденияВзаиморасчетов = ПраваИНастройкиПользователя.Значение("ОсновнойСпособВеденияВзаиморасчетов");
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПБДС(Объект, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(Объект.КурсДокумента) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента = СтруктураКурса.Курс/?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
		Объект.КурсВалютыУпр = СтруктураКурса.Курс/?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
		СделкаСтроки = Неопределено;
		ПлатежноеПоручениеЗаполнено = ЗначениеЗаполнено(Объект.ПлатежноеПоручениеОснование)
			И ТипЗнч(Объект.ПлатежноеПоручениеОснование) <> Тип("Строка");
		Если ПлатежноеПоручениеЗаполнено Тогда
			ОснованиеПлатежки = Объект.ПлатежноеПоручениеОснование.ДокументОснование;
			Если ТипЗнч(ОснованиеПлатежки) = Тип("ДокументСсылка.СчетОтПоставщика") Тогда
				Если ЗначениеЗаполнено(ОснованиеПлатежки.ДокументОснование) Тогда
					СделкаСтроки = ?(ТипЗнч(ОснованиеПлатежки.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"),ОснованиеПлатежки.ДокументОснование,ОснованиеПлатежки);
				Иначе
					СделкаСтроки = ОснованиеПлатежки;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОснованиеПлатежки) = Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили") Тогда
				Если ЗначениеЗаполнено(ОснованиеПлатежки.ДокументОснование) Тогда
					СделкаСтроки = ?(ТипЗнч(ОснованиеПлатежки.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль"),ОснованиеПлатежки.ДокументОснование,ОснованиеПлатежки);
				Иначе
					СделкаСтроки = ОснованиеПлатежки;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОснованиеПлатежки) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СделкаСтроки = ОснованиеПлатежки;
			ИначеЕсли ТипЗнч(ОснованиеПлатежки) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль") Тогда
				СделкаСтроки = ОснованиеПлатежки;
			ИначеЕсли ТипЗнч(ОснованиеПлатежки) = Тип("ДокументСсылка.СчетНаОплату") Тогда
				Если ЗначениеЗаполнено(ОснованиеПлатежки.ДокументОснование) Тогда
					СделкаСтроки = ?(ТипЗнч(ОснованиеПлатежки.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя"),ОснованиеПлатежки.ДокументОснование,ОснованиеПлатежки);
				Иначе
					СделкаСтроки = ОснованиеПлатежки;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОснованиеПлатежки) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили") Тогда
				Если ЗначениеЗаполнено(ОснованиеПлатежки.ДокументОснование) Тогда
					СделкаСтроки = ?(ТипЗнч(ОснованиеПлатежки.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаАвтомобиль"),ОснованиеПлатежки.ДокументОснование,ОснованиеПлатежки);
				Иначе
					СделкаСтроки = ОснованиеПлатежки;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОснованиеПлатежки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СделкаСтроки = ОснованиеПлатежки;
			ИначеЕсли ТипЗнч(ОснованиеПлатежки) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
				СделкаСтроки = ОснованиеПлатежки;
			КонецЕсли;
		КонецЕсли;
	
	// Обработка строк ТЧ Состав 
	 
	// Записываем все услуги в 1-ю строку т.к. не знаем как их делить
	Если Объект.СуммаУслуг <> 0 И  Объект.Состав[0].СуммаУслуг <> Объект.СуммаУслуг Тогда				
		
		Объект.Состав[0].СуммаУслуг = Объект.СуммаУслуг;  
		Объект.Состав[0].СуммаПриход = Объект.Состав[0].СуммаПриход +  Объект.СуммаУслуг;
	
	КонецЕсли;
	     
	Если Не ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) И ЗначениеЗаполнено (Объект.Контрагент) Тогда  
		ВидОперации = Объект.ВидОперации;
		Если ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеНалога ИЛИ 
			ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратНалогов
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.КомиссияБанка
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочееПоступление
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочееСписание
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочиеДоходы
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочиеРасходы
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПоступленияПоПлатежнымКартам
		Тогда
				
			ВидДоговора = Перечисления.ВидыДоговоров.Прочее;  
				
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратПодотчетныхСумм ИЛИ
			ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеПодОтчет Тогда 
				
			ВидДоговора = Перечисления.ВидыДоговоров.Подотчет;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаработнойПлатыСотруднику ИЛИ 
			ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
			
			ВидДоговора = Перечисления.ВидыДоговоров.Зарплата; 
			
		Иначе ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидДоговора) Тогда
			Объект.ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Объект.Контрагент, ВидДоговора, Объект);
			Для Каждого ТекущаяСтрока Из Объект.Состав Цикл
				Если ЗначениеЗаполнено(ТекущаяСтрока.ДоговорВзаиморасчетов) Тогда
					Продолжить;
				КонецЕсли;
				ТекущаяСтрока.ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;     
	     
	Для Каждого Строка Из Объект.Состав Цикл
		
		Если Не ЗначениеЗаполнено(Строка.КурсВалютыВзаиморасчетов) Тогда
			Строка.КурсВалютыВзаиморасчетов = 1;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.СтатьяДДС) Тогда
				
			ОперацияСтатьяДДС =  КомпонентыОбмена.ПараметрыКонвертации.СоответствиеОперацииИСтатейДДС.Найти(Объект.ВидОперации);
			Если ОперацияСтатьяДДС <> Неопределено Тогда
				Строка.СтатьяДДС = ОперацияСтатьяДДС.СтатьяДДС;
			Иначе
				Строка.СтатьяДДС = КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСПоУмолчанию;
			КонецЕсли; 
				
		КонецЕсли;
	
		Если СделкаСтроки <> Неопределено Тогда
			Строка.Сделка = СделкаСтроки;
		КонецЕсли;
	
		Строка.СуммаРазница = Строка.СуммаРасход + Строка.СуммаПриход - Строка.СуммаУслуг;
		
		Если Строка.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов =
			Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам Тогда
				
			Если НЕ ЗначениеЗаполнено(Строка.СпособЗачетаАвансов) Тогда
					
				Строка.СпособЗачетаАвансов = Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
					
			ИначеЕсли Строка.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
					
				Строка.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
					
			КонецЕсли;
				
		КонецЕсли;
			
			
	КонецЦикла;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
			Объект.СтатьяДДС = Объект.Состав[0].СтатьяДДС;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			Объект.СтавкаНДС = Объект.Состав[0].СтавкаНДС;
		КонецЕсли;
		Объект.ДоговорВзаиморасчетов = Объект.Состав[0].ДоговорВзаиморасчетов;
	КонецЕсли;
	
	Объект.СуммаДокументаПриход = Объект.Состав.Итог("СуммаПриход");
	Объект.СуммаДокументаРасход = Объект.Состав.Итог("СуммаРасход");
	Объект.СуммаУслуг = Объект.Состав.Итог("СуммаУслуг");
	Объект.СуммаНДС = Объект.Состав.Итог("СуммаНДС");
	
	Объект.СуммаДокумента = Объект.СуммаДокументаПриход - Объект.СуммаДокументаРасход;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКО_РКО(Объект, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) И ЗначениеЗаполнено (Объект.Контрагент) Тогда  
		ВидОперации = Объект.ВидОперации;
		Если ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеНалога ИЛИ 
			ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратНалогов
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.КомиссияБанка
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочееПоступление
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочееСписание
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочиеДоходы
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПрочиеРасходы
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПоступленияПоПлатежнымКартам
		Тогда
					
			ВидДоговора = Перечисления.ВидыДоговоров.Прочее;  
					
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВозвратПодотчетныхСумм ИЛИ
			ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеПодОтчет Тогда 
					
			ВидДоговора = Перечисления.ВидыДоговоров.Подотчет;
				
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаработнойПлатыСотруднику ИЛИ 
			ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
				
			ВидДоговора = Перечисления.ВидыДоговоров.Зарплата; 
				
		Иначе ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДоговора) Тогда
			Объект.ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Объект.Контрагент, ВидДоговора, Объект);
		КонецЕсли;
		
	КонецЕсли;  
	   
	Если НЕ ЗначениеЗаполнено(Объект.КурсДокумента) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
		Объект.КурсВалютыУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов");
	Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыВзаиморасчетов) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Объект.Дата);
		Объект.КурсВалютыВзаиморасчетов = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
					
		ОперацияСтатьяДДС =  КомпонентыОбмена.ПараметрыКонвертации.СоответствиеОперацииИСтатейДДС.Найти(Объект.ВидОперации);
		Если ОперацияСтатьяДДС <> Неопределено Тогда
			Объект.СтатьяДДС = ОперацияСтатьяДДС.СтатьяДДС;
		Иначе
			Объект.СтатьяДДС = КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСПоУмолчанию;
		КонецЕсли; 
					
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеКомпании) Тогда
		Объект.ПодразделениеКомпании = КомпонентыОбмена.ПараметрыКонвертации.ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КассаКомпании) Тогда
		Объект.КассаКомпании = КомпонентыОбмена.ПараметрыКонвертации.КассаКомпанииПоУмолчанию;
	КонецЕсли;
КонецПроцедуры
Процедура ПартииТоваровДокумента(тзТЧ, тзПартии, тзТоварыПартии, УчитыватьСклад, РегистрДвиженияПартий, ЕстьСписаниеПартий)
	тзКорректировки = Новый ТаблицаЗначений;
	тзКорректировки.Колонки.Добавить("Номенклатура");
	тзКорректировки.Колонки.Добавить("СкладКомпании");
	тзКорректировки.Колонки.Добавить("Партия");
	тзКорректировки.Колонки.Добавить("Себестоимость",Новый ОписаниеТипов("Число"));
	
	ПартияОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	
	Отбор = Новый Структура("Номенклатура");
	// Для каждой строки из табличной части ищем строки с такой же номенклатурой
	// в движениях партий и переносим количество и партию.
	// Если на одну номенклатуру (одну строку в табличной части) приходится несколько движений партий,
	// то в конечную таблицу для такой номенклатуры
	// попадает количество строк равное количиству движений партий. Причем суммы продажи,
	// НДС уменьшаются пропорционально количеству товара, таким образом,
	// что конечная сумма равна сумме в строке табличной части документа.
	Для Каждого СтрокаТЧ из тзТЧ Цикл	
		Отбор.Вставить("Номенклатура",СтрокаТЧ.Номенклатура);
		Если УчитыватьСклад и НЕ ПустаяСтрока(СтрокаТЧ.МестоРазмещения) Тогда
			Отбор.Вставить("МестоРазмещения",СтрокаТЧ.МестоРазмещения);
		КонецЕсли;		
		
		СтрокиПартии = тзПартии.НайтиСтроки(Отбор);
		Если СтрокиПартии.Количество() = 1 Тогда
			НоваяСтрока = тзТоварыПартии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
			Если РегистрДвиженияПартий = "ТоварыВПроизводстве" Тогда
				НоваяСтрока.МестоРазмещения = СтрокиПартии[0].МестоРазмещения;
			КонецЕсли;
			// Если это у нас партия отрицательных остатков и метод списания партий не средняя, то не нужен нам ид партии.
			СуммаКорректировки = 0;
			Если СтрокиПартии[0].ПОО И ЕстьСписаниеПартий Тогда
				НоваяСтрока.Партия = ПартияОтрицательныхОстатков;
				НоваяСтрока.Себестоимость = СтрокиПартии[0].Себестоимость;
			Иначе
				НоваяСтрока.Партия = СтрокиПартии[0].Партия;
				НоваяСтрока.Себестоимость = СтрокиПартии[0].Себестоимость;
				Если НоваяСтрока.Себестоимость = 0 Тогда
					НоваяСтрока.Себестоимость = 0.01;
					СуммаКорректировки = 0.01;
				КонецЕсли;				
			КонецЕсли;
			НоваяСтрока.СтатусПартии = СтрокиПартии[0].СтатусПартии;
			Если СуммаКорректировки > 0 Тогда
				Строка_тзКорректировки = тзКорректировки.Добавить();
				Строка_тзКорректировки.Номенклатура = СтрокиПартии[0].Номенклатура;
				Строка_тзКорректировки.Партия = СтрокиПартии[0].Партия;
				Строка_тзКорректировки.СкладКомпании = СтрокиПартии[0].МестоРазмещения;
				Строка_тзКорректировки.Себестоимость = СуммаКорректировки;
				СуммаКорректировки = 0;
			КонецЕсли;
		ИначеЕсли СтрокиПартии.Количество() > 1 Тогда
				
			СуммаВсехПроводок = 0;		// Сумма всех не сторнирующих проводок. 
			БылАнализСумм = Ложь;		// Флаг показывает, что был анализ сумм после сторно проводок.
			
			// Массив, в котором хранятся ссылки на добавленные строки в таблицу тзТоварыПартии.
			МассивНовыхСтрок = Новый Массив;
			
			// Отсотрируем строки так, чтобы сначала шли сторнирующие
			СтрокиПартийОтсортированные = Новый Массив;
			Для Каждого СтрокаПартии Из СтрокиПартии Цикл
				Если СтрокаПартии.Сторно Тогда 
					СтрокиПартийОтсортированные.Добавить(СтрокаПартии);
					Продолжить; 
				КонецЕсли;
				СуммаВсехПроводок = СуммаВсехПроводок + СтрокаПартии.Себестоимость;
			КонецЦикла;
			Для Каждого СтрокаПартии Из СтрокиПартии Цикл
				Если НЕ СтрокаПартии.Сторно Тогда
					СтрокиПартийОтсортированные.Добавить(СтрокаПартии);
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтрокиПартийОтсортированные", СтрокиПартийОтсортированные);
			СтруктураПараметров.Вставить("СтрокиПартии", СтрокиПартии);
			СтруктураПараметров.Вставить("БылАнализСумм", БылАнализСумм);
			СтруктураПараметров.Вставить("СуммаВсехПроводок", СуммаВсехПроводок);
			СтруктураПараметров.Вставить("СтрокаТЧ", СтрокаТЧ);
			СтруктураПараметров.Вставить("МассивНовыхСтрок", МассивНовыхСтрок);
			СтруктураПараметров.Вставить("РегистрДвиженияПартий", РегистрДвиженияПартий);
			СтруктураПараметров.Вставить("ПартияОтрицательныхОстатков", ПартияОтрицательныхОстатков);
			СтруктураПараметров.Вставить("ЕстьСписаниеПартий", ЕстьСписаниеПартий);
			СтруктураПараметров.Вставить("тзКорректировки", тзКорректировки);
			СтруктураПараметров.Вставить("тзТоварыПартии", тзТоварыПартии);
			
			ЗаполнитьСтрокиПартий(СтруктураПараметров);
			
		Иначе
			// Если в партиях ничего не найдено, значит это либо услуга либо тара. Добавляем в результирующую таблицу как есть.
			НоваяСтрока = тзТоварыПартии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ПартииТоваровДокументаПоГТД(тзТЧ, тзПартии, тзТоварыПартии, УчитыватьСклад)
	ОшибкаСписания = Ложь;
	Для Каждого СтрТовары Из тзТЧ Цикл
		Если ОшибкаСписания Тогда
			Прервать;
		КонецЕсли;
		Отбор = Новый Структура("Номенклатура", СтрТовары.Номенклатура);
		Если УчитыватьСклад И НЕ ПустаяСтрока(СтрТовары.МестоРазмещения) Тогда
			Отбор.Вставить("МестоРазмещения",СтрТовары.МестоРазмещения);
		КонецЕсли;
		СтрокиПартий = тзПартии.НайтиСтроки(Отбор);
		Если СтрокиПартий.Количество() > 0 Тогда
			ИндексСтроки = 0;
			Для Каждого СтрПартии Из СтрокиПартий Цикл
				ИндексСтроки = ИндексСтроки + 1;
				Если СтрПартии.Количество = 0 ИЛИ СтрТовары.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПоследняяСтрока = (СтрокиПартий.Количество() = ИндексСтроки);
				СтрокаТоварПартия = тзТоварыПартии.Добавить();
				Если СтрТовары.Количество > СтрПартии.Количество Тогда
					Если ПоследняяСтрока Тогда
						Если (СтрПартии.Количество + 0.01) > СтрТовары.Количество Тогда
							// ОШИБКИ ОКРУГЛЕНИЙ
							ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрПартии);
							// Добавим недостающие поля
							ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрТовары);
							// Берем количество из товаров
							СтрПартии.Количество = 0;
							СтрТовары.Количество = 0;
						Иначе 
							// ТАКОГО БЫТЬ НЕ МОЖЕТ!
							СтрокаОшибки = НСтр("ru = 'Ошибка списания партий!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
							ЗаписьЖурналаРегистрации(
								СтрокаОшибки,
								УровеньЖурналаРегистрации.Ошибка,,,
								СтрокаОшибки);
							тзТоварыПартии.Очистить();
							ОшибкаСписания = Истина;
							Прервать;
						КонецЕсли;
					Иначе
						Коэффициент = Окр(СтрПартии.Количество / СтрТовары.Количество, 3);
						// Просто возьмем по количеству партий суммы ТЧ товары
						СтрТовары.Количество = СтрТовары.Количество - СтрПартии.Количество;
						ОстатокСуммаВсего =  Окр(СтрТовары.СуммаВсего - СтрТовары.СуммаВсего * Коэффициент, 2);
						СтрТовары.СуммаВсего =  Окр(СтрТовары.СуммаВсего * Коэффициент, 2);
						ОстатокСуммаНДС =  Окр(СтрТовары.СуммаНДС - СтрТовары.СуммаНДС * Коэффициент, 2);
						СтрТовары.СуммаНДС =  Окр(СтрТовары.СуммаНДС * Коэффициент, 2);
						ОстатокСумма =  Окр(СтрТовары.Сумма - СтрТовары.Сумма * Коэффициент, 2);
						СтрТовары.Сумма =  Окр(СтрТовары.Сумма * Коэффициент, 2);
						
						ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрТовары);
						СтрТовары.СуммаВсего = ОстатокСуммаВсего;
						СтрТовары.СуммаНДС	= ОстатокСуммаНДС;
						СтрТовары.Сумма		= ОстатокСумма;
						// Добавим недостающие поля
						ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрПартии);
						СтрПартии.Количество = 0;
						КонецЕсли;
				ИначеЕсли СтрТовары.Количество < СтрПартии.Количество Тогда
					Если СтрТовары.Количество = - СтрПартии.Количество Тогда
						// Просто возьмем по количеству товаров суммы ТЧ партий
						ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрТовары);
						// Добавим недостающие поля
						ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрПартии);
						СтрокаТоварПартия.Количество = СтрТовары.Количество; // Количество берем из ТЧ товаров так как разные знаки
							// Обнулим количество партий
						СтрПартии.Количество = 0;
						СтрТовары.Количество = 0;
					Иначе
						ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрТовары);
						ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрПартии,, "Количество");
						СтрПартии.Количество = СтрПартии.Количество - СтрТовары.Количество;
					КонецЕсли;
				Иначе
					// Просто возьмем по количеству товаров суммы ТЧ партий
					ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрТовары);
					// Добавим недостающие поля
					ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрПартии);
					// Обнулим количество партий
					СтрПартии.Количество = 0;
					СтрТовары.Количество = 0;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокаТоварПартия = тзТоварыПартии.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварПартия, СтрТовары);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПеремещениеИзПроизводстваНаСкладАвто(КомпонентыОбмена, ДанныеИБ, ПравилоУКомплектацииАвтоПеремещениеОтправка)
	ДатаЗакрытияЗН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ДатаЗакрытия");
	СводныйРемонтныйЗаказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "СводныйРемонтныйЗаказ");
	СводныйРемонтныйЗаказАвтомобиль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СводныйРемонтныйЗаказ, "Автомобиль");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&МоментВремени, Автомобиль = &Автомобиль) КАК ОстаткиАвтомобилейОстатки";
	
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(ДатаЗакрытияЗН, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Автомобиль",    СводныйРемонтныйЗаказАвтомобиль);
	
	РезЗапросаАвто = Запрос.Выполнить().Выгрузить();
	СкладАвтомобиля = РезЗапросаАвто[0].СкладКомпании;
	
	ДанныеИБСтруктура = Новый Структура();
	ДанныеИБСтруктура.Вставить("Дата");
	ДанныеИБСтруктура.Вставить("Номер");
	ДанныеИБСтруктура.Вставить("Автор");
	ДанныеИБСтруктура.Вставить("Организация");
	
	Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Ссылка, "Автор, Номер ,Организация");
	
	ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, Данные);
	
	ДанныеИБСтруктура.Дата = ДатаЗакрытияЗН - 1;
			
	ДанныеИБСтруктура.Вставить("Комментарий", СформироватьКомментарий(ДанныеИБ, НСтр("ru = 'Перемещение товаров из цеха на склад авто. Комплектация.'")));
	
	ДанныеИБСтруктура.Вставить("Налогообложение", "ПродажаНеОблагаетсяНДС");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСВРознице");
	ТаблицаТоваров.Колонки.Добавить("СуммаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
	ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыВПроизводстве.Цех КАК Цех,
	|	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
	|	ТоварыВПроизводстве.Количество КАК Количество,
	|	ТоварыВПроизводстве.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(ТоварыВПроизводстве.Сумма / ТоварыВПроизводстве.Количество КАК ЧИСЛО(15, 2)) КАК ЦенаВРознице
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
	|ГДЕ
	|	ТоварыВПроизводстве.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	Цех = Справочники.Цеха.ПустаяСсылка();
	Для Каждого ТекущаяСтрока Из ТаблицаТовары Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура =  Новый Структура(
				"Значение, ИмяПКО",
				ТекущаяСтрока.Номенклатура,
				"Справочник_Номенклатура_Отправка");
		НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "БазоваяЕдиницаИзмерения");
		НоваяСтрока.Количество = ТекущаяСтрока.Количество;
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		НоваяСтрока.СуммаВРознице = ТекущаяСтрока.Сумма;
		НоваяСтрока.СтавкаНДСВРознице = ПолучитьСтавкуНДС(Справочники.СтавкиНДС.БезНДС,,КомпонентыОбмена);
		НоваяСтрока.ЦенаВРознице  = ТекущаяСтрока.ЦенаВРознице;
		Цех = ТекущаяСтрока.Цех;
	КонецЦикла;
	
	ДанныеИБСтруктура.Вставить(
		"ПодразделениеОтправитель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Цех, "ПодразделениеКомпании"));
	
	ДанныеИБСтруктура.Вставить(
		"ПодразделениеПолучатель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладАвтомобиля, "ПодразделениеКомпании"));
	
	ДанныеИБСтруктура.Вставить("СкладОтправитель", Цех);	
	ДанныеИБСтруктура.Вставить("СкладПолучатель", СкладАвтомобиля);
	
	Если ТаблицаТоваров.Количество() Тогда
		ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров.Скопировать());
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена,
		ДанныеИБСтруктура, 
		ПравилоУКомплектацииАвтоПеремещениеОтправка);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	               |	ОстаткиАвтомобилей.Автомобиль.ГТД КАК ГТД,
	               |	ОстаткиАвтомобилей.Автомобиль.Прослеживаемый КАК Прослеживаемый,
	               |	ОстаткиАвтомобилей.СтатусПартии КАК СтатусПартии,
	               |	ОстаткиАвтомобилей.Сумма КАК Сумма,
	               |	ОстаткиАвтомобилей.СкладКомпании КАК СкладКомпании
	               |ИЗ
	               |	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	               |ГДЕ
	               |	ОстаткиАвтомобилей.Регистратор = &Ссылка
	               |	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |ИТОГИ ПО
	               |	СкладКомпании";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ВыборкаСкладыАвтомобилей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСкладыАвтомобилей.Следующий() Цикл
		
		Если СкладАвтомобиля = ВыборкаСкладыАвтомобилей.СкладКомпании Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаТоваров.Очистить();
	
		ВыборкаАвтомобилей = ВыборкаСкладыАвтомобилей.Выбрать();
		
		Пока ВыборкаАвтомобилей.Следующий() Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура = Новый Структура("Значение, ИмяПКО",
					ВыборкаАвтомобилей.Автомобиль,
					"Справочник_Автомобили_Отправка");
			НоваяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.ТипЗапасов = ?(ВыборкаАвтомобилей.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный,
					"СобственныеТовары",
					"КомиссионныеТовары");;
			НоваяСтрока.СуммаВРознице = ВыборкаАвтомобилей.Сумма;
			НоваяСтрока.СтавкаНДСВРознице = "БезНДС";
			НоваяСтрока.ЦенаВРознице  = ВыборкаАвтомобилей.Сумма;
			
		КонецЦикла;
		
		ДанныеИБСтруктура.Вставить(
			"ПодразделениеОтправитель",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаСкладыАвтомобилей.СкладКомпании, "ПодразделениеКомпании"));
		
		ДанныеИБСтруктура.Вставить(
			"ПодразделениеПолучатель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладАвтомобиля, "ПодразделениеКомпании"));
		
		ДанныеИБСтруктура.Вставить("СкладОтправитель", ВыборкаСкладыАвтомобилей.СкладКомпании);	
		ДанныеИБСтруктура.Вставить("СкладПолучатель", СкладАвтомобиля);
		
		ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров.Скопировать());
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена,
			ДанныеИБСтруктура, 
			ПравилоУКомплектацииАвтоПеремещениеОтправка);
		
	КонецЦикла;
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ ИЗ ДанныеИБ.КонтактнаяИнформация цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование,Предопределенный");
		
		ВыгружатьКИ = СвойстваВидаКИ.Предопределенный;
			
		Если Не ВыгружатьКИ Тогда
			Продолжить;
		КонецЕсли;  
	
		СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
			
		Если СвойстваВидаКИ.Предопределенный И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПодразделенияКомпании
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияСотрудника
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента Тогда
			
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
	
		Иначе
	
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПолучитьВидСтавки(ДанныеИБ)
	ВидСтавки = "Общая";
	Если ДанныеИБ = Справочники.СтавкиНДС.БезНДС Тогда
		ВидСтавки = "БезНДС"; 
	ИначеЕсли ДанныеИБ.Ставка = 0 Тогда 
		ВидСтавки = "Нулевая";
	КонецЕсли;
		
	Возврат ВидСтавки;
КонецФункции
Функция ПолучитьДвижениеПартий(Регистратор, РегистрДвижения, ПрименениеУСН)
	тзПартии = Новый ТаблицаЗначений;
	тзПартии.Колонки.Добавить("Номенклатура");
	тзПартии.Колонки.Добавить("Количество");
	тзПартии.Колонки.Добавить("Партия");
	тзПартии.Колонки.Добавить("МестоРазмещения");
	тзПартии.Колонки.Добавить("Себестоимость");
	тзПартии.Колонки.Добавить("Сторно");
	тзПартии.Колонки.Добавить("ПОО"); // Признак партии отрицательных остатков.
	тзПартии.Колонки.Добавить("СтатусПартии");
	
	ПартияОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	
	Если РегистрДвижения = "ТоварыВПроизводстве" Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
		               |	ТоварыВПроизводстве.Цех КАК МестоРазмещения,
		               |	ТоварыВПроизводстве.Партия КАК Партия,
		               |	ТоварыВПроизводстве.СтатусПартии КАК СтатусПартии,
		               |	СУММА(ТоварыВПроизводстве.Количество) КАК Количество,
		               |	СУММА(ТоварыВПроизводстве.Сумма) КАК Сумма,
		               |	СУММА(ТоварыВПроизводстве.СуммаНДС) КАК СуммаНДС,
		               |	СУММА(ТоварыВПроизводстве.СуммаБезНДС) КАК СуммаБезНДС
		               |ИЗ
		               |	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		               |ГДЕ
		               |	ТоварыВПроизводстве.Регистратор = &Регистратор
		               |	И ТоварыВПроизводстве.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТоварыВПроизводстве.Номенклатура,
		               |	ТоварыВПроизводстве.Цех,
		               |	ТоварыВПроизводстве.Партия,
		               |	ТоварыВПроизводстве.СтатусПартии";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
		               |	ПартииТоваровКомпании.СкладКомпании КАК МестоРазмещения,
		               |	ПартииТоваровКомпании.Партия КАК Партия,
		               |	ПартииТоваровКомпании.СтатусПартии КАК СтатусПартии,
		               |	ПартииТоваровКомпании.Количество КАК Количество,
		               |	ПартииТоваровКомпании.Сумма КАК Сумма,
		               |	ПартииТоваровКомпании.СуммаНДС КАК СуммаНДС,
		               |	ПартииТоваровКомпании.СуммаБезНДС КАК СуммаБезНДС
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		               |ГДЕ
		               |	ПартииТоваровКомпании.Регистратор = &Регистратор
		               |	И ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Загружаем движение партий
	Пока Выборка.Следующий() Цикл
		ТекСтрока				= тзПартии.Добавить();
		ТекСтрока.Сторно		= (Выборка.Количество < 0 ИЛИ Выборка.Сумма < 0);
		ТекСтрока.Номенклатура	= Выборка.Номенклатура;
		ТекСтрока.Количество = Выборка.Количество;
		ТекСтрока.Партия = Выборка.Партия;
		ТекСтрока.МестоРазмещения = Выборка.МестоРазмещения;
		Если ПрименениеУСН
			ИЛИ Выборка.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
			ТекСтрока.Себестоимость	= Выборка.Сумма;
		Иначе
			ТекСтрока.Себестоимость	= Выборка.Сумма - Выборка.СуммаНДС;
		КонецЕсли;
		ТекСтрока.ПОО				= (ТекСтрока.Партия = ПартияОтрицательныхОстатков);
		ТекСтрока.СтатусПартии = Выборка.СтатусПартии;
	КонецЦикла;
	
	Возврат тзПартии;
КонецФункции
Функция ПолучитьЕдиницуИзмеренияАвто()
	ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = Новый Структура("Код, Наименование, НаименованиеПолное", "796", "шт", "Штука");	
		КонецЕсли;
		
		Возврат ЕдиницаИзмерения;
КонецФункции
Функция ПолучитьЗаказНаряд(ДанныеИБ, ЗаказНаряд, КомпонентыОбмена, ТолькоРеализация = Истина)
	ИмяПКО = ПолучитьИмяПКОДокумента(ЗаказНаряд, КомпонентыОбмена);
		ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
		ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
		
		Если ТолькоРеализация И ТекПКО.ОбъектФормата <> "Документ.РеализацияТоваровУслуг" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ЗаказНарядПроизводство Тогда
			Возврат Новый Структура("Значение, ИмяПКО", ЗаказНаряд, ИмяПКО);
		КонецЕсли;
		
		СтруктураКлючевыеСвойства = Новый Структура("ДатаЗакрытия,Номер,СсылкаДокумента,Организация,ТипСоставногоСвойства");
		ЗаполнитьЗначенияСвойств(СтруктураКлючевыеСвойства, ЗаказНаряд);
		СтруктураКлючевыеСвойства.ТипСоставногоСвойства = ТипСоставногоСвойства;
		МассивИдентификаторов =
			РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов.ИдентификаторыОбъекта(ЗаказНаряд);
			
		// Получим первый попавшийся документ
		Если МассивИдентификаторов.Количество() = 0 Тогда
			
			// Проверим наличие складов компании
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ТоварыВПроизводстве.Цех КАК Цех
			               |ИЗ
			               |	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
			               |ГДЕ
			               |	ТоварыВПроизводстве.ЗаказНаряд = &ЗаказНаряд";
			Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказНаряд);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() > 1 Тогда
				НомерЗН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаряд, "Номер");
				Если Выборка.Следующий() Тогда
					ИдентификаторОбъекта = РегистрыСведений.ИдентификаторыВыгружаемыхОбъектов.ИдентификаторОбъектаВыгрузки(
						ЗаказНаряд, ТекПКО.ОбъектФормата, Выборка.Цех);
					СтруктураКлючевыеСвойства.СсылкаДокумента = Документы.ЗаказНаряд.ПолучитьСсылку(
						Новый УникальныйИдентификатор(ИдентификаторОбъекта));
					Возврат Новый Структура("Значение, ИмяПКО",
						ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураКлючевыеСвойства), ИмяПКО);
				КонецЕсли;
			Иначе
				СтруктураКлючевыеСвойства.СсылкаДокумента = ЗаказНаряд;
				Возврат Новый Структура("Значение, ИмяПКО", СтруктураКлючевыеСвойства, ИмяПКО);
			КонецЕсли;
		Иначе
			НомерЗН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаряд, "Номер");
			СтруктураКлючевыеСвойства.СсылкаДокумента = Документы.ЗаказНаряд.ПолучитьСсылку(
				Новый УникальныйИдентификатор(МассивИдентификаторов[0]));
			
			Возврат Новый Структура("Значение, ИмяПКО",
				ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураКлючевыеСвойства), ИмяПКО);
		КонецЕсли;
КонецФункции
Функция ПолучитьИмяПКОДокумента(Документ, КомпонентыОбмена)
	ИмяПКО = "";
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ИмяПКО = "Документ_РеализацияТоваров_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваров_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеАвтомобилей") Тогда
		ИмяПКО = "Документ_ПоступлениеАвтомобилей_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ИмяПКО = "Документ_ПоступлениеДопРасходов_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратПоставщику") Тогда
		ИмяПКО = "Документ_ВозвратПоставщику_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратОтПокупателя") Тогда
		ИмяПКО = "Документ_ВозвратОтПокупателя_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Инвентаризация") Тогда
		ИмяПКО = "Документ_Инвентаризация_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ИнвентаризацияАвтомобилей") Тогда
		ИмяПКО = "Документ_ИнвентаризацияАвтомобилей_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
		ИмяПКО = "Документ_РеализацияАвтомобилей_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		ИмяПКО = "Документ_СчетНаОплату_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетОтПоставщика") Тогда
			ИмяПКО = "Документ_СчетОтПоставщика_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили") Тогда
		ИмяПКО = "Документ_СчетНаОплатуЗаАвтомобили_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ВидРемонта,ВидРемонта.ТипРемонта,Контрагент.ФормаСобственности"); 
		ЭтоКомплектацияАвтомобиля = (ДанныеДокумента.ВидРемонтаТипРемонта = Перечисления.ТипыРемонта.КомплектацияАвтомобиля);
		ЭтоСборкаАвтомобиля = (ДанныеДокумента.ВидРемонтаТипРемонта = Перечисления.ТипыРемонта.СборкаАвтомобиля);
		ЭтоБесплатныйРемонт = (ДанныеДокумента.ВидРемонтаТипРемонта = Перечисления.ТипыРемонта.Бесплатный);
		ПлательщикФизЛицо = (КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьРозничнуюТорговлюДляФизЛиц
			И ДанныеДокумента.КонтрагентФормаСобственности <> Перечисления.ФормыСобственности.ЮридическоеЛицо);
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ЗаказНарядПроизводство Тогда
			 ИмяПКО = "Документ_ЗаказНарядРеализацияАПУ_Отправка";	
		ИначеЕсли НЕ (ЭтоКомплектацияАвтомобиля ИЛИ ЭтоБесплатныйРемонт ИЛИ ЭтоСборкаАвтомобиля) Тогда
			Если ПлательщикФизЛицо Тогда
			   ИмяПКО = "Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк";
			Иначе
				ИмяПКО = "Документ_ЗаказНарядРеализация_Отправка";
			КонецЕсли;
		Иначе
			ИмяПКО = "Документ_ЗаказНарядТребованиеНакладная_Отправка";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Выписка") Тогда
	Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ВыпискаСостав.СуммаПриход КАК СуммаПриход,
				|	ВыпискаСостав.СуммаРасход КАК СуммаРасход,
				|	ВыпискаСостав.Контрагент КАК Контрагент
				|ИЗ
				|	Документ.Выписка.Состав КАК ВыпискаСостав
				|ГДЕ
				|	ВыпискаСостав.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", Документ);
				
				РезультатЗапроса = Запрос.Выполнить().Выгрузить();
				Если ЭтоПодотчет(РезультатЗапроса[0].Контрагент) Тогда
					ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
				ИначеЕсли РезультатЗапроса[0].СуммаПриход > 0 Тогда
					ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
				ИначеЕсли РезультатЗапроса[0].СуммаРасход > 0 Тогда
					ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
				КонецЕсли;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей") Тогда
		ИмяПКО = "Документ_КорректировкаПоступленияАвто_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ИмяПКО = "Документ_ПриходныйКассовыйОрдер_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если ЭтоПодотчет(Документ.Контрагент) Тогда
			ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
		Иначе
			ИмяПКО = "Документ_РасходныйКассовыйОрдер_Отправка";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ИмяПКО = "Документ_КорректировкаДолга_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		ИмяПКО = "Документ_Взаимозачет_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
		ИмяПКО = "Документ_КорректировкаРеализацииАвто_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗакрытиеСмены") Тогда
		ИмяПКО = "Документ_ЗакрытиеСменыОтчетРозница_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей") Тогда
		ИмяПКО = "Документ_ВозвратОтПокупателяАвтомобилей_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей") Тогда
		ИмяПКО = "Документ_ВозвратПоставщикуАвтомобилей_Отправка";	
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция ПолучитьКонтрагентаДляФизЛица(Ссылка, КомпонентыОбмена)
	ЭтоКонтрагент = ИмяПКОФизЛицаПолучение(Ссылка.Ссылка.Значение, КомпонентыОбмена.УзелКорреспондента);
		
	ИмяПКО = ?(ЭтоКонтрагент, 
		"Справочник_КонтрагентыФизическиеЛица_Получение", 
		"Справочник_СотрудникиФизическиеЛица_Получение"
	);
	
	ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,ИмяПКО);
	
	КонтрагентСсылка = 
		ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
		КомпонентыОбмена,
		Ссылка,
		ПКО_Контрагент,
		"ПолучитьСсылку").Ссылка; 
			
	Если ТипЗнч(КонтрагентСсылка) = Тип("СправочникСсылка.Сотрудники") Тогда
					
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Сотрудник = &Сотрудник";
			
		Запрос.УстановитьПараметр("Сотрудник", КонтрагентСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать(); 
			
		Если Выборка.Следующий() Тогда
				
			Возврат Выборка.Ссылка;	 
		Иначе 
			НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
			НовыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо;
			НовыйКонтрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
			НовыйКонтрагент.Наименование = КонтрагентСсылка.Наименование;
			НовыйКонтрагент.НаименованиеПолное = КонтрагентСсылка.Наименование;
			НовыйКонтрагент.Имя = КонтрагентСсылка.Имя;
			НовыйКонтрагент.Отчество = КонтрагентСсылка.Отчество;
			НовыйКонтрагент.Фамилия = КонтрагентСсылка.Фамилия;
			НовыйКонтрагент.Пол = КонтрагентСсылка.Пол; 
			НовыйКонтрагент.Сотрудник = КонтрагентСсылка;
				 
			Попытка 
				НовыйКонтрагент.Записать();
				Возврат НовыйКонтрагент.Ссылка;
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка записи контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
	            Возврат Справочники.Контрагенты.ПустаяСсылка();
			КонецПопытки;
		
		КонецЕсли;
			
	КонецЕсли;
		
	Возврат КонтрагентСсылка;
КонецФункции
Функция ПолучитьОснованиеКорректировки(ДанныеИБ)
	ОснованиеКорректировки = ДанныеИБ.ДокументОснование; 
	Пока ТипЗнч(ОснованиеКорректировки) = Тип("ДокументСсылка.КорректировкаРеализации") Цикл 
		ОснованиеКорректировки = ОснованиеКорректировки.ДокументОснование;
	КонецЦикла;
	Возврат ОснованиеКорректировки;
КонецФункции
Функция ПолучитьСсылкуВидаНоменклатуры(ТипНоменклатуры)
	СтруктураТип = Новый Структура();
	Если ТипНоменклатуры = "Товар" Тогда  
			
		УИД = Новый УникальныйИдентификатор("76519e4e-201d-4324-bf54-747c60ce7dab");
		СтруктураТип.Вставить("Наименование", "Товар");
			
	ИначеЕсли ТипНоменклатуры = "Услуга" Тогда
			
		УИД = Новый УникальныйИдентификатор("185d51b4-09f8-4eb3-8827-a347c2885723");
		СтруктураТип.Вставить("Наименование", "Услуга");
	
	Иначе 
			
		УИД = Новый УникальныйИдентификатор("12d4e8bb-95f9-4601-b29b-0619d3280a41");
		СтруктураТип.Вставить("Наименование", "Тара");
			
	КонецЕсли;
		
	Ссылка = Справочники.ТипыНоменклатуры.ПолучитьСсылку(УИД);
	СтруктураТип.Вставить("Ссылка", Ссылка); 
		
	Возврат СтруктураТип;
КонецФункции
Функция ПолучитьСсылкуФизЛицаОтправка(ФизЛицо, УзелКорреспондента)
	ЭтоСотрудник = ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Сотрудники");  
		
	СсылкаВРегистре = ЗапросСсылкиВПубличномИдентификаторе (ФизЛицо, УзелКорреспондента);
		
	Если СсылкаВРегистре <> Неопределено Тогда 
		Возврат СсылкаВРегистре;
	КонецЕсли;
		
	Если НЕ ЭтоСотрудник И ЗначениеЗаполнено(ФизЛицо.Сотрудник) Тогда  
		СсылкаВРегистре = ЗапросСсылкиВПубличномИдентификаторе(ФизЛицо.Сотрудник, УзелКорреспондента);
			
		Если СсылкаВРегистре <> Неопределено Тогда 
			Возврат СсылкаВРегистре;
		КонецЕсли; 
		
	ИначеЕсли ЭтоСотрудник Тогда 
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		     |	Контрагенты.Ссылка КАК Ссылка
		     |ИЗ
		     |	Справочник.Контрагенты КАК Контрагенты
		     |ГДЕ
		     |	Контрагенты.Сотрудник = &ФизЛицо";
			
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
			
		РезультатЗапроса = Запрос.Выполнить();
			
		Если Не РезультатЗапроса.Пустой() Тогда
				
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат  Выборка.Ссылка;
				
		КонецЕсли; 
	
	КонецЕсли;
		
	Возврат ФизЛицо;
КонецФункции
Функция ПолучитьСтавкуНДС(СтавкаНДС, ЗначениеСтавкиНДС = Неопределено, КомпонентыОбмена=Неопределено)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.17") Тогда
	    Возврат Новый Структура("Значение, ИмяПКО", СтавкаНДС, "Справочник_СтавкиНДС_Отправка");
	КонецЕсли;
	
	Если ЗначениеСтавкиНДС = Неопределено Тогда
		ЗначениеСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтавкаНДС, "Ставка");
	КонецЕсли;
	
	Если ЗначениеСтавкиНДС = 20 
		И СтавкаНДС <> Справочники.СтавкиНДС.ОсновнаяСтавкаНДСРасчетная Тогда
		Результат = "НДС20";
	ИначеЕсли ЗначениеСтавкиНДС = 20 
		И СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДСРасчетная Тогда
		Результат = "НДС20_120";
	ИначеЕсли ЗначениеСтавкиНДС = 10 
		И СтавкаНДС <> Справочники.СтавкиНДС.РасчетнаяСтавкаНДС10 Тогда
		Результат = "НДС10";
	ИначеЕсли ЗначениеСтавкиНДС = 10 
		И СтавкаНДС = Справочники.СтавкиНДС.РасчетнаяСтавкаНДС10 Тогда
		Результат = "НДС10_110";
	ИначеЕсли ЗначениеСтавкиНДС = 18 
		И СтавкаНДС <> Справочники.СтавкиНДС.ОсновнаяСтавкаНДСРасчетная Тогда
		Результат = "НДС18";
	ИначеЕсли ЗначениеСтавкиНДС = 18 
		И СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДСРасчетная Тогда
		Результат = "НДС18_118";
	ИначеЕсли СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
		Результат = "БезНДС";
	ИначеЕсли ЗначениеСтавкиНДС = 0 Тогда
		Результат = "НДС0";
	Иначе
		Результат = "БезНДС";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция ПолучитьТаблицуИнвентаризации(КомпонентыОбмена, Основание, ВидДвижения, ТипЗапасов)
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	Запрос.УстановитьПараметр("Регистратор", Основание);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвижения);
	
	Если УчетПоГТД Тогда
		
		Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
		|	&ТипЗапасов КАК ТипЗапасов,
		|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ПартииТоваровКомпании.Количество) КАК Количество,
		|	СУММА(ПартииТоваровКомпании.Сумма) КАК Сумма,
		|	СУММА(0) КАК Цена,
		|	ПартииТоваровКомпании.Партия КАК Партия,
		|	ПартииТоваровКомпании.Номенклатура.Прослеживаемый КАК ПрослеживаемыйТовар
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.Регистратор = &Регистратор
		|	И ПартииТоваровКомпании.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровКомпании.Номенклатура,
		|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения,
		|	ПартииТоваровКомпании.Партия,
		|	ПартииТоваровКомпании.Номенклатура.Прослеживаемый
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
		|	ГТДПартийТоваровКомпании.Количество КАК Количество,
		|	ГТДПартийТоваровКомпании.Партия КАК Партия
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор = &Регистратор
		|	И ГТДПартийТоваровКомпании.ВидДвижения = &ВидДвижения";
		
		ПакетЗапроса = Запрос.ВыполнитьПакет();
		ТаблицаПартий = ПакетЗапроса[0].Выгрузить();
		ТаблицаГТД = ПакетЗапроса[1].Выгрузить();
		
		Товары = ТаблицаПартий.Скопировать();
		Товары.Колонки.Добавить("ГТД");
		Товары.Очистить();
				
		// Распределим по ГТД
		СтруктураПоиска = Новый Структура("Номенклатура,Партия");
		Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
			
			КоличествоОсталось = СтрокаПартии.Количество;
			СуммаОсталось = СтрокаПартии.Сумма;
			
			// Найдем строки с ГТД
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПартии);
			НайденныеГТД = ТаблицаГТД.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекущаяСтрока Из НайденныеГТД Цикл
				
				КоличествоГТД = Мин(КоличествоОсталось, ТекущаяСтрока.Количество);
				
				Если КоличествоГТД = КоличествоОсталось Тогда
					СуммаГТД = СуммаОсталось;
				Иначе
					СуммаГТД = Окр(СуммаОсталось / КоличествоОсталось * КоличествоГТД, 2);
				КонецЕсли;
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.Количество = КоличествоГТД;
				НоваяСтрока.Сумма = СуммаГТД;
				
				КоличествоОсталось = КоличествоОсталось - КоличествоГТД;
				СуммаОсталось = СуммаОсталось - СуммаГТД;
				
				// Все распределили
				Если КоличествоОсталось = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Проверим осталось ли еще без ГТД
			Если КоличествоОсталось > 0 Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
				НоваяСтрока.Количество = КоличествоОсталось;
				НоваяСтрока.Сумма = СуммаОсталось;
				НоваяСтрока.ГТД = Справочники.ГТД.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЦикла;
		
		Товары.Свернуть("Номенклатура,ТипЗапасов,ЕдиницаИзмерения,ГТД,ПрослеживаемыйТовар", "Количество,Цена,Сумма");
		
	Иначе
		
		Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
		|	&ТипЗапасов КАК ТипЗапасов,
		|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ПартииТоваровКомпании.Количество) КАК Количество,
		|	СУММА(ПартииТоваровКомпании.Сумма) КАК Сумма,
		|	СУММА(0) КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка) КАК ГТД,
		|	ЛОЖЬ КАК ПрослеживаемыйТовар
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.Регистратор = &Регистратор
		|	И ПартииТоваровКомпании.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровКомпании.Номенклатура,
		|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения";
		
		Товары = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ТоварыСГТД = ТоварыСЗаполнениемГТД(Товары, КомпонентыОбмена);
	
	// Рассчитаем дополнительные поля
	Для Каждого ТекущаяСтрока Из ТоварыСГТД Цикл
		
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
		
	КонецЦикла;
	
	Возврат ТоварыСГТД;
КонецФункции
Функция ПолучитьТаблицуСписания(ДанныеИБ, УчитыватьСклад = Ложь, РегистрДвиженияПартий = "ПартииТоваров", тзКорректировки = Неопределено, ИмяТЧ = "Товары", УчетПоГТД = Ложь)
	ПрименениеУСН		= ОсвобожденОтУплатыНДС(ДанныеИБ.Организация, ДанныеИБ.ПодразделениеКомпании, ДанныеИБ.Дата);
	ЗначениеУчетнойПолитики = ПолучитьЗначениеУчетнойПолитики("СтратегияСписанияПартийТоваровПоДатам",
		ДанныеИБ.Организация, ДанныеИБ.Дата, Ложь);
	ЕстьСписаниеПартий	= (ЗначениеУчетнойПолитики <> Неопределено
		И (ЗначениеУчетнойПолитики = Перечисления.СтратегияСписанияПартийТоваровПоДатам.ФИФО 
		ИЛИ ЗначениеУчетнойПолитики = Перечисления.СтратегияСписанияПартийТоваровПоДатам.ЛИФО));
	ЕстьИсточник = ЕстьРеквизит(ДанныеИБ.Ссылка, "Источник", ИмяТЧ);
	ЕстьКоличествоБазовое = ЕстьРеквизит(ДанныеИБ.Ссылка, "КоличествоБазовое", ИмяТЧ);
	ЕстьСуммаВсего = ЕстьРеквизит(ДанныеИБ.Ссылка, "СуммаВсего", ИмяТЧ);
	ЕстьСуммаНДС = ЕстьРеквизит(ДанныеИБ.Ссылка, "СуммаНДС", ИмяТЧ);
	ЕстьСумма = ЕстьРеквизит(ДанныеИБ.Ссылка, "Сумма", ИмяТЧ);
	ЕстьГТД = ЕстьРеквизит(ДанныеИБ.Ссылка, "ГТД", ИмяТЧ);
	ЕстьМестоРазмещения = ЕстьРеквизит(ДанныеИБ.Ссылка, "МестоРазмещения", ИмяТЧ);
	ЕстьСтавкаНДС = ЕстьРеквизит(ДанныеИБ.Ссылка, "СтавкаНДС", ИмяТЧ);
	Если УчетПоГТД Тогда
		тзТЧ = Новый ТаблицаЗначений;
		тзТЧ.Колонки.Добавить("Номенклатура");
		тзТЧ.Колонки.Добавить("Количество");
		тзТЧ.Колонки.Добавить("Коэффициент");
		тзТЧ.Колонки.Добавить("ГТД");
		тзТЧ.Колонки.Добавить("СуммаВсего");
		тзТЧ.Колонки.Добавить("СуммаНДС");
		тзТЧ.Колонки.Добавить("СтавкаНДС");
		тзТЧ.Колонки.Добавить("МестоРазмещения");
		тзТЧ.Колонки.Добавить("Сумма");
		тзТЧ.Колонки.Добавить("ПрослеживаемыйТовар");
		
		тзТоварыПартии = Новый ТаблицаЗначений;
		тзТоварыПартии.Колонки.Добавить("Номенклатура");
		тзТоварыПартии.Колонки.Добавить("Количество");
		тзТоварыПартии.Колонки.Добавить("Коэффициент");
		тзТоварыПартии.Колонки.Добавить("ГТД");
		тзТоварыПартии.Колонки.Добавить("СуммаВсего");
		тзТоварыПартии.Колонки.Добавить("СуммаНДС");
		тзТоварыПартии.Колонки.Добавить("СтавкаНДС");
		тзТоварыПартии.Колонки.Добавить("Партия");
		тзТоварыПартии.Колонки.Добавить("МестоРазмещения");
		тзТоварыПартии.Колонки.Добавить("Сумма");
		тзТоварыПартии.Колонки.Добавить("Себестоимость");
		тзТоварыПартии.Колонки.Добавить("СтатусПартии");
		тзТоварыПартии.Колонки.Добавить("ПрослеживаемыйТовар");
		
		тзКорректировки = Новый ТаблицаЗначений;
		тзКорректировки.Колонки.Добавить("Номенклатура");
		тзКорректировки.Колонки.Добавить("СкладКомпании");
		тзКорректировки.Колонки.Добавить("Партия");
		тзКорректировки.Колонки.Добавить("Себестоимость",Новый ОписаниеТипов("Число"));
		
		// Получим данные номенклатуры
		СписокПрослеживаемостиТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДанныеИБ[ИмяТЧ].ВыгрузитьКолонку("Номенклатура"), "Прослеживаемый"); 
		
		// Загружаем табличную часть документа
		ТекТабличнаяЧасть = ДанныеИБ[ИмяТЧ];
		Для Каждого ЗначенияСтроки Из ТекТабличнаяЧасть Цикл
			Если ЕстьИсточник
				И (ЗначенияСтроки["Источник"] = Перечисления.ЗаказНарядНоменклатураИсточник.ДетальЗаказчика) Тогда
				Продолжить;
			КонецЕсли;
			ТекСтрока					= тзТЧ.Добавить();
			ТекСтрока.Номенклатура		= ЗначенияСтроки["Номенклатура"];
			Если ЕстьГТД Тогда
				ТекСтрока.ГТД				= ЗначенияСтроки["ГТД"];
			КонецЕсли;
			ТекСтрока.Количество		= ЗначенияСтроки["Количество"]*ЗначенияСтроки["Коэффициент"];
			Если ЕстьКоличествоБазовое И ЗначенияСтроки["КоличествоБазовое"] <> ТекСтрока.Количество Тогда
				ТекСтрока.Количество = ЗначенияСтроки["КоличествоБазовое"];
			КонецЕсли;
			ТекСтрока.Коэффициент		= 1;
			ТекСтрока.СуммаВсего		= ?(НЕ ЕстьСуммаВсего, 0, ЗначенияСтроки["СуммаВсего"]);
			ТекСтрока.СуммаНДС			= ?(НЕ ЕстьСуммаНДС, 0, ЗначенияСтроки["СуммаНДС"]);
			Если ЕстьСтавкаНДС Тогда
				ТекСтрока.СтавкаНДС			= ЗначенияСтроки["СтавкаНДС"];
			КонецЕсли;
			Если УчитыватьСклад И ЕстьМестоРазмещения Тогда
				ТекСтрока.МестоРазмещения	= ЗначенияСтроки["МестоРазмещения"];
			Иначе
				ТекСтрока.МестоРазмещения	= "";
			КонецЕсли;
			ТекСтрока.Сумма				= ?(НЕ ЕстьСумма, 0, ЗначенияСтроки["Сумма"]);
			ТекСтрока.ПрослеживаемыйТовар = СписокПрослеживаемостиТоваров.Получить(ЗначенияСтроки["Номенклатура"]);
		КонецЦикла;
		
		// Загружаем движение партий
		тзПартии = ПолучитьДвижениеПартий(ДанныеИБ.Ссылка, РегистрДвиженияПартий, ПрименениеУСН);
		
		// Свернем так как есть дубли строк в ТЧ товары
		тзТЧ.Свернуть("Номенклатура,Коэффициент,ГТД,МестоРазмещения,СтавкаНДС,ПрослеживаемыйТовар","Количество,СуммаВсего,СуммаНДС,Сумма");
		// Отсортируем партии по возврастаниюу количества
		тзТЧ.Сортировать("Номенклатура,МестоРазмещения,Количество ВОЗР");
		тзПартии.Сортировать("Номенклатура,МестоРазмещения,Количество ВОЗР");
		
		ПартииТоваровДокументаПоГТД(тзТЧ, тзПартии, тзТоварыПартии, УчитыватьСклад);
		
	Иначе
		// Правила поведения
		// Если в конфигурации-источнике стратегия списания партий по датам ФИФО или ЛИФО,
		// то алгоритм предпологает следующие поведение в зависимости от движения партий:
		// 1. Если в движениях партий документа-источника был только уход в отрицательную область, 
		// то при перегрузки партии с пустой табличной частью, буха подставит пустую партию. Поэтому загружаемм партию отр остатков.
		// 2. Если в движениях партий документа-источника было движение по нормальным партиям и уход в отрицательную область, то 
		//   так и переносим подставляя обычные партии и партии отрицательных остатков.
		// Есть особенность в переносе партий. Она состои в следующем:
		// Допустим введены такие документы:
		// Списание1 Кол 5 Движение - 5 Партия отр остатков (ПОО) Сумма -100
		// Списание2 Кол 2 Движение - 2 ПОО Сумма - 40
		// Поступление1 Кол 4 Движение + 4 сумма 400
		// Поступление2 Кол 3 Движение + 2 сумма 200
		// Поступление3 Кол 2 Движение + 3 сумма 300
		// Списание3 Кол 5 Движения: 
		//						Сторно  - - 7 ПОО сумма -- 140
		//		Движение 1		- 4 Поступление1  сумма -400
		//		Движение 2		- 2 Поступление2  сумма -200 
		//		Движение 3		- 3 Поступление3  сумма -300
		//		Движение 4		- 1 ПОО           сумма -100
		
		// Общее количество оборота движений должно быть равно количеству в табличной части.
		// Общая сумма оборота движений документа в конфигурации-источнике и 
		// в документе конфигурации - приемнике должно совпадать.
		// Поэтому сумма движений будет равна Сумма движений без сторно - сумма сторно движений. Если 
		// сумма сторно движений > суммы обычных движенй, то документ загружается с себестоимостью 0,
		// а также загружается ручная операция записывающая в дебет 
		// счета учета товаров разницу сторно и обычных движений.
		тзТЧ = Новый ТаблицаЗначений;
		тзТЧ.Колонки.Добавить("Номенклатура");
		тзТЧ.Колонки.Добавить("Количество");
		тзТЧ.Колонки.Добавить("Коэффициент");
		тзТЧ.Колонки.Добавить("ГТД");
		тзТЧ.Колонки.Добавить("СуммаВсего");
		тзТЧ.Колонки.Добавить("СуммаНДС");
		тзТЧ.Колонки.Добавить("СтавкаНДС");	
		тзТЧ.Колонки.Добавить("МестоРазмещения");
		тзТЧ.Колонки.Добавить("Сумма");
		тзТЧ.Колонки.Добавить("ПрослеживаемыйТовар");
		тзТоварыПартии = Новый ТаблицаЗначений;
		тзТоварыПартии.Колонки.Добавить("Номенклатура");
		тзТоварыПартии.Колонки.Добавить("Количество");
		тзТоварыПартии.Колонки.Добавить("Коэффициент");
		тзТоварыПартии.Колонки.Добавить("ГТД");	
		тзТоварыПартии.Колонки.Добавить("СуммаВсего");
		тзТоварыПартии.Колонки.Добавить("СуммаНДС");
		тзТоварыПартии.Колонки.Добавить("СтавкаНДС");		
		тзТоварыПартии.Колонки.Добавить("Партия");		
		тзТоварыПартии.Колонки.Добавить("МестоРазмещения");
		тзТоварыПартии.Колонки.Добавить("Сумма");
		тзТоварыПартии.Колонки.Добавить("Себестоимость");
		тзТоварыПартии.Колонки.Добавить("СтатусПартии");
		тзТоварыПартии.Колонки.Добавить("ПрослеживаемыйТовар");
		
		// Загружаем табличную часть документа
		ТекТабличнаяЧасть = ДанныеИБ[ИмяТЧ];
		ЕстьСуммаВсего = ЕстьРеквизит(ДанныеИБ, "СуммаВсего", ИмяТЧ);
		ЕстьСуммаНДС = ЕстьРеквизит(ДанныеИБ, "СуммаНДС", ИмяТЧ);
		ЕстьСтавкаНДС = ЕстьРеквизит(ДанныеИБ, "СтавкаНДС", ИмяТЧ);
		ЕстьСумма = ЕстьРеквизит(ДанныеИБ, "Сумма", ИмяТЧ);
		Для Каждого ЗначенияСтроки Из ТекТабличнаяЧасть Цикл
			Если ЕстьИсточник И ЗначенияСтроки.Источник = Перечисления.ЗаказНарядНоменклатураИсточник.ДетальЗаказчика Тогда
				Продолжить;
			КонецЕсли;
			Количество		= ЗначенияСтроки.Количество * ЗначенияСтроки.Коэффициент;
			Если Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			ТекСтрока					= тзТЧ.Добавить();
			ТекСтрока.Номенклатура		= ЗначенияСтроки.Номенклатура;
			ТекСтрока.ГТД				= ""; //с ГТД работаем по новому алгоритму
			ТекСтрока.Коэффициент		= 1;
			ТекСтрока.Количество		= Количество;
			Если ЕстьСуммаВсего Тогда
				ТекСтрока.СуммаВсего		= ЗначенияСтроки.СуммаВсего;
			Иначе
				ТекСтрока.СуммаВсего = 0;
			КонецЕсли;
			Если ЕстьСуммаНДС Тогда
				ТекСтрока.СуммаНДС			= ЗначенияСтроки.СуммаНДС;
			Иначе
				ТекСтрока.СуммаНДС = 0;
			КонецЕсли;
			Если ЕстьСтавкаНДС Тогда
				ТекСтрока.СтавкаНДС			= ЗначенияСтроки.СтавкаНДС;
			Иначе
				ТекСтрока.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
			Если ЕстьМестоРазмещения Тогда
				ТекСтрока.МестоРазмещения	= ЗначенияСтроки.МестоРазмещения;
			КонецЕсли;
			Если ЕстьСумма Тогда
				ТекСтрока.Сумма				= ЗначенияСтроки.Сумма;
			Иначе
				ТекСтрока.Сумма = 0;
			КонецЕсли;
			ТекСтрока.ПрослеживаемыйТовар = Ложь;
		КонецЦикла;
		
		тзТЧ.Свернуть("Номенклатура,СтавкаНДС,Коэффициент,ГТД,МестоРазмещения,ПрослеживаемыйТовар","Количество,СуммаНДС,СуммаВсего,Сумма");
		
		тзТЧ.Сортировать("Номенклатура");
		
		// Загружаем движение партий
		тзПартии = ПолучитьДвижениеПартий(ДанныеИБ.Ссылка, РегистрДвиженияПартий, ПрименениеУСН);
		
		ПартииТоваровДокумента(тзТЧ, тзПартии, тзТоварыПартии, УчитыватьСклад, РегистрДвиженияПартий, ЕстьСписаниеПартий);
		
	КонецЕсли;
	
	Если НЕ ЕстьСписаниеПартий Тогда
		тзТоварыПартии.Свернуть(
		"Номенклатура,ГТД,СтавкаНДС,МестоРазмещения,Коэффициент,СтатусПартии,ПрослеживаемыйТовар",
		"Количество,СуммаВсего,СуммаНДС,Сумма,Себестоимость");
		тзТоварыПартии.Колонки.Добавить("Партия");
	КонецЕсли;
	
	Возврат тзТоварыПартии;
КонецФункции
Функция ПолучитьТЧОтчетОРозничныхПродажах(ДанныеИБ, КомпонентыОбмена, СуммаВключаетНДС)
	Результат = Новый Структура; 
				
		УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗакрытиеСменыТовары.Номенклатура КАК Номенклатура,
					|	СУММА(ЗакрытиеСменыТовары.Цена) КАК Цена,
					|	СУММА(ЗакрытиеСменыТовары.СуммаНДС) КАК СуммаНДС,
					|	СУММА(ЗакрытиеСменыТовары.СуммаНДС) КАК СуммаНДСОсталось,
					|	СУММА(ЗакрытиеСменыТовары.СуммаВсего) КАК Сумма,
					|	СУММА(ЗакрытиеСменыТовары.СуммаВсего) КАК СуммаОсталось,
					|	ВЫБОР
					|		КОГДА &АктРеализации
					|			ТОГДА &СкладКомпании
					|		ИНАЧЕ ЗакрытиеСменыТовары.МестоРазмещения
					|	КОНЕЦ КАК Склад,
					|	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
					|	ЗакрытиеСменыТовары.СтавкаНДС КАК СтавкаНДС,
					|	СУММА(ЗакрытиеСменыТовары.Количество * ЗакрытиеСменыТовары.Коэффициент) КАК Количество,
					|	СУММА(ЗакрытиеСменыТовары.Количество * ЗакрытиеСменыТовары.Коэффициент) КАК КоличествоОсталось,
					|	ЗакрытиеСменыТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
					|	ЗакрытиеСменыТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки,
					|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК Ставка,
					|	ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка) КАК ГТД,
					|	ЗакрытиеСменыТовары.Номенклатура.Прослеживаемый
					|		И &УчетПоГТД КАК ПрослеживаемыйТовар,
					|	ЗакрытиеСменыТовары.НомерСтроки КАК НомерСтроки
					|ИЗ
					|	Документ.ЗакрытиеСмены.Товары КАК ЗакрытиеСменыТовары
					|ГДЕ
					|	ЗакрытиеСменыТовары.Ссылка = &Ссылка
					|	И ЗакрытиеСменыТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
					|
					|СГРУППИРОВАТЬ ПО
					|	ЗакрытиеСменыТовары.Номенклатура,
					|	ЗакрытиеСменыТовары.СтавкаНДС,
					|	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры,
					|	ЗакрытиеСменыТовары.Номенклатура.БазоваяЕдиницаИзмерения,
					|	ЗакрытиеСменыТовары.НомерСтроки,
					|	ВЫБОР
					|		КОГДА &АктРеализации
					|			ТОГДА &СкладКомпании
					|		ИНАЧЕ ЗакрытиеСменыТовары.МестоРазмещения
					|	КОНЕЦ,
					|	ЗакрытиеСменыТовары.СтавкаНДС.Ставка,
					|	ЗакрытиеСменыТовары.Номенклатура.Прослеживаемый
					|		И &УчетПоГТД
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
					|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
					|	ПартииТоваровКомпании.СтатусПартии КАК СтатусПартии,
					|	ПартииТоваровКомпании.Партия КАК Партия,
					|	ПартииТоваровКомпании.СкладКомпании КАК Склад,
					|	СУММА(ПартииТоваровКомпании.Количество) КАК Количество
					|ИЗ
					|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
					|ГДЕ
					|	ПартииТоваровКомпании.Регистратор = &Ссылка
					|	И ПартииТоваровКомпании.Количество > 0
					|
					|СГРУППИРОВАТЬ ПО
					|	ПартииТоваровКомпании.Номенклатура,
					|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры,
					|	ПартииТоваровКомпании.СтатусПартии,
					|	ПартииТоваровКомпании.Партия,
					|	ПартииТоваровКомпании.СкладКомпании
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЗакрытиеСменыВозвраты.Номенклатура КАК Номенклатура,
					|	СУММА(ЗакрытиеСменыВозвраты.Цена) КАК Цена,
					|	СУММА(ЗакрытиеСменыВозвраты.СуммаНДС) КАК СуммаНДС,
					|	СУММА(ЗакрытиеСменыВозвраты.СуммаНДС) КАК СуммаНДСОсталось,
					|	СУММА(ЗакрытиеСменыВозвраты.СуммаВсего) КАК Сумма,
					|	СУММА(ЗакрытиеСменыВозвраты.СуммаВсего) КАК СуммаОсталось,
					|	ЗакрытиеСменыВозвраты.МестоРазмещения КАК Склад,
					|	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
					|	ЗакрытиеСменыВозвраты.СтавкаНДС КАК СтавкаНДС,
					|	ЗакрытиеСменыВозвраты.НомерФискальногоЧека КАК НомерЧекаККМПродажи,
					|	СУММА(ЗакрытиеСменыВозвраты.Количество * ЗакрытиеСменыВозвраты.Коэффициент) КАК Количество,
					|	СУММА(ЗакрытиеСменыВозвраты.Количество * ЗакрытиеСменыВозвраты.Коэффициент) КАК КоличествоОсталось,
					|	ЗакрытиеСменыВозвраты.СтавкаНДС.Ставка КАК ЗначениеСтавки,
					|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК Ставка,
					|	ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка) КАК ГТД,
					|	ЗакрытиеСменыВозвраты.Номенклатура.Прослеживаемый
					|		И &УчетПоГТД КАК ПрослеживаемыйТовар,
					|	ЗакрытиеСменыВозвраты.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
					|	ЗакрытиеСменыВозвраты.ДатаРеализации КАК ДатаПродажи
					|ИЗ
					|	Документ.ЗакрытиеСмены.Возвраты КАК ЗакрытиеСменыВозвраты
					|ГДЕ
					|	ЗакрытиеСменыВозвраты.Ссылка = &Ссылка
					|
					|СГРУППИРОВАТЬ ПО
					|	ЗакрытиеСменыВозвраты.Номенклатура,
					|	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры,
					|	ЗакрытиеСменыВозвраты.МестоРазмещения,
					|	ЗакрытиеСменыВозвраты.СтавкаНДС,
					|	ЗакрытиеСменыВозвраты.НомерФискальногоЧека,
					|	ЗакрытиеСменыВозвраты.СтавкаНДС.Ставка,
					|	ЗакрытиеСменыВозвраты.Номенклатура.Прослеживаемый
					|		И &УчетПоГТД,
					|	ЗакрытиеСменыВозвраты.Номенклатура.БазоваяЕдиницаИзмерения,
					|	ЗакрытиеСменыВозвраты.ДатаРеализации
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
					|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
					|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
					|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК Количество,
					|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК КоличествоОсталось,
					|	ГТДПартийТоваровКомпании.Партия КАК Партия
					|ИЗ
					|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
					|ГДЕ
					|	ГТДПартийТоваровКомпании.Регистратор = &Ссылка
					|	И ГТДПартийТоваровКомпании.Количество > 0
					|
					|СГРУППИРОВАТЬ ПО
					|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
					|	ГТДПартийТоваровКомпании.ГТД,
					|	ГТДПартийТоваровКомпании.Номенклатура,
					|	ГТДПартийТоваровКомпании.Партия
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
					|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
					|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
					|	-СУММА(ГТДПартийТоваровКомпании.Количество) КАК Количество,
					|	-СУММА(ГТДПартийТоваровКомпании.Количество) КАК КоличествоОсталось,
					|	ГТДПартийТоваровКомпании.Партия КАК Партия
					|ИЗ
					|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
					|ГДЕ
					|	ГТДПартийТоваровКомпании.Регистратор = &Ссылка
					|	И ГТДПартийТоваровКомпании.Количество < 0
					|
					|СГРУППИРОВАТЬ ПО
					|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
					|	ГТДПартийТоваровКомпании.ГТД,
					|	ГТДПартийТоваровКомпании.Номенклатура,
					|	ГТДПартийТоваровКомпании.Партия
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЗакрытиеСменыТовары.Номенклатура КАК Номенклатура,
					|	ЗакрытиеСменыТовары.Количество КАК Количество,
					|	ЗакрытиеСменыТовары.Цена КАК Цена,
					|	ЗакрытиеСменыТовары.Сумма КАК Сумма,
					|	ЗакрытиеСменыТовары.СуммаНДС КАК СуммаНДС,
					|	ЗакрытиеСменыТовары.СтавкаНДС КАК Ставка,
					|	ЗакрытиеСменыТовары.СтавкаНДС.Ставка КАК ЗначениеСтавки
					|ИЗ
					|	Документ.ЗакрытиеСмены.Товары КАК ЗакрытиеСменыТовары
					|ГДЕ
					|	ЗакрытиеСменыТовары.Ссылка = &Ссылка
					|	И ЗакрытиеСменыТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЗакрытиеСменыОплаты.СуммаОплата КАК Сумма,
					|	ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка) КАК Банк
					|ИЗ
					|	Документ.ЗакрытиеСмены.Оплаты КАК ЗакрытиеСменыОплаты
					|ГДЕ
					|	ЗакрытиеСменыОплаты.Ссылка = &Ссылка
					|	И ЗакрытиеСменыОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Постоплата)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	&ПлатежнаяСистема КАК Эквайрер,
					|	ЗакрытиеСменыОплаты.Сумма КАК СуммаОплаты,
					|	""0000000000000000"" КАК НомерКарты
					|ИЗ
					|	Документ.ЗакрытиеСмены.Оплаты КАК ЗакрытиеСменыОплаты
					|ГДЕ
					|	ЗакрытиеСменыОплаты.Ссылка = &Ссылка
					|	И ЗакрытиеСменыОплаты.Сумма <> 0
					|	И (ЗакрытиеСменыОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
					|			ИЛИ ЗакрытиеСменыОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно))
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	&ПлатежнаяСистема,
					|	-ЗакрытиеСменыВозвратОплаты.Сумма,
					|	""0000000000000000""
					|ИЗ
					|	Документ.ЗакрытиеСмены.ВозвратОплаты КАК ЗакрытиеСменыВозвратОплаты
					|ГДЕ
					|	ЗакрытиеСменыВозвратОплаты.Ссылка = &Ссылка
					|	И ЗакрытиеСменыВозвратОплаты.Сумма <> 0
					|	И (ЗакрытиеСменыВозвратОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
					|			ИЛИ ЗакрытиеСменыВозвратОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно))";
						
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("АктРеализации",ДанныеИБ.ХозОперация = Справочники.ХозОперации.АктОРеализации);
		Запрос.УстановитьПараметр("СкладКомпании", ДанныеИБ.СкладКомпании);
	
		Запрос.УстановитьПараметр("УчетПоГТД", УчетПоГТД); 
	
		ПлатежнаяСистема= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ПодразделениеКомпании, "ОсновнаяПлатежнаяСистема");
		Запрос.УстановитьПараметр("ПлатежнаяСистема", ПлатежнаяСистема);
			
		РезультатыЗапроса = Запрос.ВыполнитьПакет();  
	
		ВыгружатьПартии = Истина;	
			
		Товары = РезультатыЗапроса[0].Выгрузить(); 
		Партии = РезультатыЗапроса[1].Выгрузить();
		ТоварыСПартией = Товары.СкопироватьКолонки();
		ТоварыСПартией.Колонки.Добавить("Партия");
		ТоварыСПартией.Колонки.Добавить("ТипЗапасов");	
	
		Для Каждого СтрокаТовар из Товары Цикл
			Отбор = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Склад",
				СтрокаТовар.Номенклатура, 
				СтрокаТовар.ХарактеристикаНоменклатуры,
				СтрокаТовар.Склад
			);
			МассивПартий = Партии.НайтиСтроки(Отбор); 
			Если МассивПартий.Количество()> 0 Тогда
				Количество = 0;
				Для Каждого СтрокаМассива ИЗ МассивПартий Цикл 
					Количество= Количество + СтрокаМассива.Количество;
				КонецЦикла;
				Если Количество <> СтрокаТовар.Количество Тогда
					ВыгружатьПартии = Ложь;
					Прервать;
				КонецЕсли;
				
				ОбщаяСумма		= СтрокаТовар.Сумма;
				ОбщаяСуммаНДС	= СтрокаТовар.СуммаНДС; 
				КоличествоТовар = СтрокаТовар.Количество;
				Для Каждого СтрокаМассива ИЗ МассивПартий Цикл 
					
					СтрокаСПартией = ТоварыСПартией.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСПартией, СтрокаТовар); 
					СтрокаСПартией.Партия = СтрокаМассива.Партия;
					СтрокаСПартией.ТипЗапасов = ?(
						СтрокаМассива.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия,
						"КомиссионныеТовары",
						"СобственныеТовары"
					);	
					Если СтрокаМассива.Количество = КоличествоТовар Тогда 
						СтрокаСПартией.Сумма		 	= ОбщаяСумма;
						СтрокаСПартией.СуммаНДС			= ОбщаяСуммаНДС;
					Иначе 
						СтрокаСПартией.Сумма 	= Окр(СтрокаТовар.Сумма/СтрокаТовар.Количество*СтрокаМассива.Количество,2);	
						СтрокаСПартией.СуммаНДС = Окр(СтрокаТовар.СуммаНДС/СтрокаТовар.Количество*СтрокаМассива.Количество,2);		
					КонецЕсли;
					СтрокаСПартией.Количество			= СтрокаМассива.Количество;
					СтрокаСПартией.КоличествоОсталось	= СтрокаМассива.Количество;
					СтрокаСПартией.СуммаОсталось	= СтрокаСПартией.Сумма; 
					СтрокаСпартией.СуммаНДСОсталось = СтрокаСПартией.СуммаНДС;  
					ОбщаяСумма						= ОбщаяСумма - СтрокаСПартией.Сумма;
					ОбщаяСуммаНДС 					= ОбщаяСуммаНДС - СтрокаСПартией.СуммаНДС;
					КоличествоТовар 				= КоличествоТовар - СтрокаМассива.Количество; 
					
				КонецЦикла;
			КонецЕсли; 
		КонецЦикла;  
	
		Если ВыгружатьПартии Тогда
			Товары = ТоварыСПартией.Скопировать();
		КонецЕсли; 
		
		ТаблицаТоваров = Новый ТаблицаЗначений();
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");  
		ТаблицаТоваров.Колонки.Добавить("Характеристика"); 
		ТаблицаТоваров.Колонки.Добавить("Количество");
		ТаблицаТоваров.Колонки.Добавить("Сумма");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС");  
		ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
		ТаблицаТоваров.Колонки.Добавить("СуммаСУчетомСкидки"); 
		ТаблицаТоваров.Колонки.Добавить("Склад");
		ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки"); 
		ТаблицаТоваров.Колонки.Добавить("ГТД");	
		ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
		ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар");
	
	
		ТоварыВозвраты = РезультатыЗапроса[2].Выгрузить(); 
	
		ТаблицаВозвратов = Новый ТаблицаЗначений();
		ТаблицаВозвратов.Колонки.Добавить("Номенклатура");
		ТаблицаВозвратов.Колонки.Добавить("ЕдиницаИзмерения");  
		ТаблицаВозвратов.Колонки.Добавить("Характеристика"); 
		ТаблицаВозвратов.Колонки.Добавить("Количество");
		ТаблицаВозвратов.Колонки.Добавить("Сумма");
		ТаблицаВозвратов.Колонки.Добавить("Цена");
		ТаблицаВозвратов.Колонки.Добавить("СтавкаНДС");
		ТаблицаВозвратов.Колонки.Добавить("СуммаНДС");  
		ТаблицаВозвратов.Колонки.Добавить("СкладКомпании");
		ТаблицаВозвратов.Колонки.Добавить("ГТД");	
		ТаблицаВозвратов.Колонки.Добавить("ТипЗапасов");
		ТаблицаВозвратов.Колонки.Добавить("ПрослеживаемыйТовар"); 
		ТаблицаВозвратов.Колонки.Добавить("ДатаПродажи");
	
		Если УчетПоГТД Тогда 
			
			ЗапросПоГТД = РезультатыЗапроса[3].Выгрузить();  
			ЗапросПоГТДВозвраты = РезультатыЗапроса[4].Выгрузить(); 
			
			Параметры = Новый Структура; 
			
			Параметры.Вставить("ЗаполнятьТоварами", Истина);
			Параметры.Вставить("ЗаполнятьПоГТД", Ложь);
			Параметры.Вставить("ЗаполнятьПоПартиям", Ложь);
			Параметры.Вставить("ЗаполнятьРаботами", Ложь);
			Параметры.Вставить("ЗаполнятьАвтомобилями", Ложь);
			Параметры.Вставить("РезультатЗапросаПоГТД", 	ЗапросПоГТД);
			Параметры.Вставить("РезультатЗапросаПоРаботам", Неопределено);
			Параметры.Вставить("РезультатЗапросаПоАвто", Неопределено);
			Параметры.Вставить("ТипЦен", ДанныеИБ.ТипЦен); 
			
			Если Товары.Количество()> 0 Тогда  
				СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
				Параметры.Вставить("РезультатЗапросаПоТоварам", Товары);
				ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(СчетФактура, СчетФактура.Товары, Параметры);
				
				СчетФактура.Товары.Свернуть(
					"Номенклатура,ГТД,Партия,СтавкаНДС,ЕдиницаИзмерения", 
					"Количество,Сумма,СуммаВсего,СуммаНДС");  
		         ТаблицаСФТовары = СчетФактура.Товары.Выгрузить();
			КонецЕсли;
			 
			Если ТоварыВозвраты.Количество()> 0 Тогда 
				Параметры.Вставить("РезультатЗапросаПоГТД", 	ЗапросПоГТДВозвраты);
				СчетФактураВозвраты = Документы.СчетФактураВыданный.СоздатьДокумент();
				Параметры.Вставить("РезультатЗапросаПоТоварам", ТоварыВозвраты); 
				ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(СчетФактураВозвраты, СчетФактураВозвраты.Товары, Параметры); 
				СчетФактураВозвраты.Товары.Свернуть(
					"Номенклатура,ГТД,СтавкаНДС,ЕдиницаИзмерения", 
					"Количество,Сумма,СуммаВсего,СуммаНДС");
				 ТаблицаСФВозвраты = СчетФактураВозвраты.Товары.Выгрузить();
			КонецЕсли;                                                                                              
				
		КонецЕсли;    
	
		Для Каждого ТекущаяСтрока Из Товары Цикл  
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока,, "ГТД");
			НоваяСтрока.Сумма = ?(СуммаВключаетНДС, НоваяСтрока.Сумма, НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС);
			НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0,
				ТекущаяСтрока.Сумма,
				Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2)
			);
			НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
			Если УчетПоГТД Тогда 
				НоваяСтрока.ГТД = ТекущаяСтрока.ГТД;
				ЗаполнитьКорректноСтрокиГТД(ДанныеИБ.Ссылка,
					Товары,
					НоваяСтрока,
					ТаблицаСФТовары, 
					СуммаВключаетНДС,
					КомпонентыОбмена
				);
	
			КонецЕсли; 
				
		КонецЦикла; 
		
		ТоварыСГТД = ТоварыСЗаполнениемГТД(ТаблицаТоваров, КомпонентыОбмена); 
				
		ТоварыСГТД.Свернуть("Номенклатура,ГТД,НомерГТД,СтранаПроисхождения,Характеристика,СтавкаНДС,ЕдиницаИзмерения, ТипЗапасов, Склад,ПрослеживаемыйТовар",
		"Количество,КоличествоРНПТ,Сумма,Цена,СуммаНДС,СуммаСкидки, СуммаСУчетомСкидки,ПроцентСкидки");
			 	
		Результат.Вставить("ТоварыПродажа",ТоварыСГТД); 
			
		Для Каждого ТекущаяСтрока Из ТоварыВозвраты Цикл
			НоваяСтрока = ТаблицаВозвратов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока,, "ГТД");
			НоваяСтрока.Сумма = ?(СуммаВключаетНДС, НоваяСтрока.Сумма, НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС);
			НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0,
				ТекущаяСтрока.Сумма,
				Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2)
			);
			НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС, ТекущаяСтрока.ЗначениеСтавки, КомпонентыОбмена);
			Если УчетПоГТД  Тогда
				НоваяСтрока.ГТД = ТекущаяСтрока.ГТД;
				ЗаполнитьКорректноСтрокиГТД(ДанныеИБ.Ссылка,
					ТоварыВозвраты,
					НоваяСтрока,
					ТаблицаСФВозвраты, 
					СуммаВключаетНДС,
					КомпонентыОбмена);
			КонецЕсли;
		КонецЦикла;
	
		ВозвратыСГТД = ТоварыСЗаполнениемГТД(ТаблицаВозвратов, КомпонентыОбмена); 
	
		Результат.Вставить("ТоварыВозвратПродажи", ВозвратыСГТД);
	
		Услуги = РезультатыЗапроса[5].Выгрузить();
		Услуги.Колонки.Добавить("СтавкаНДС");
		
		Для Каждого Строка ИЗ Услуги  Цикл
			
			Строка.СтавкаНДС = ПолучитьСтавкуНДС(Строка.Ставка, Строка.ЗначениеСтавки, КомпонентыОбмена); 
	
		КонецЦикла;
	
		Услуги.Колонки.Удалить("ЗначениеСтавки");
	
		Результат.Вставить("Услуги", Услуги);
	
		ОплатаБанковскимиКредитами = РезультатыЗапроса[6].Выгрузить(); 
		Результат.Вставить("ОплатаБанковскимиКредитами", ОплатаБанковскимиКредитами); 
	
		ОплатаПлатежнымиКартами = РезультатыЗапроса[7].Выгрузить();
		Результат.Вставить("ОплатаПлатежнымиКартами", ОплатаПлатежнымиКартами);
	
		Возврат Результат;
КонецФункции
Процедура ПосчитатьИтогиВыписки(Выписка)
	Выписка.СуммаДокументаПриход = Выписка.Состав.Итог("СуммаПриход"); 
	Выписка.СуммаДокументаРасход = Выписка.Состав.Итог("СуммаРасход");
	Выписка.СуммаНДС = Выписка.Состав.Итог("СуммаНДС");
	Выписка.СуммаУслуг = Выписка.Состав.Итог("СуммаУслуг");
	Выписка.СуммаДокумента = Выписка.СуммаДокументаПриход - Выписка.СуммаДокументаРасход;
КонецПроцедуры
Процедура РаспределитьСтрокиТоваровПоГТДКорректировкиРеализ(ДанныеИБ, КомпонентыОбмена, ТаблицаТоваров, СуммаВключаетНДС)
	Если КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД Тогда
		
		ТаблицаГТД = СформироватьТЧ_С_ГТД(ДанныеИБ.Ссылка);
		ТаблицаГТДДоИсправления = СформироватьТабличнуюЧастьСГТДКорректировки(ДанныеИБ.Ссылка, Ложь);
		ГТДДоКорректировки = СформироватьТабличнуюЧастьСГТДКорректировки(ДанныеИБ.Ссылка, Истина);
		
		КопияТаблицыТовары = ТаблицаТоваров.Скопировать();
		ТаблицаТоваров.Очистить();
		
		Для Каждого ТекущаяСтрока Из КопияТаблицыТовары Цикл
		
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			ЗаполнитьГТДТабличнойЧастиКорректировкиРеализации(ТаблицаТоваров, НоваяСтрока, ТаблицаГТД, ТаблицаГТДДоИсправления, ГТДДоКорректировки, СуммаВключаетНДС);
		
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
			ТекущаяСтрока.ГТД = Справочники.ГТД.ПустаяСсылка();
			ТекущаяСтрока.ГТДДоИзменения = Справочники.ГТД.ПустаяСсылка();
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаТоваров = ТоварыСЗаполнениемГТДКорректировки(ТаблицаТоваров, КомпонентыОбмена);
	
	// Свернуть табличную часть
	ТаблицаТоваров.Свернуть(
		"Номенклатура, ЕстьВДокументеПоступленияРеализации, ТекущаяСтавкаСтавкаНДС, ЗначениеСтавкаНДС, ПрослеживаемыйТовар,"
		+ "СтавкаНДСПоДокументуРеализации, ЗначениеСтавкаНДСДоИзменения, Цена, ЦенаДоИзменения, ЦенаДоКорректировки,"
		+ "СтавкаНДС, СтавкаНДСДоИзменения, НомерГТД, СтранаПроисхождения, НомерГТДДоИзменения, СтранаПроисхожденияДоИзменения, ИдентификаторСтроки",
		"Количество, КоличествоДоИзменения, КоличествоДоКорректировки, СуммаНДС, СуммаНДСДоИзменения,"
		+ "СуммаНДСДоКорректировки, Сумма, СуммаДоИзменения, СуммаДоКорректировки");
КонецПроцедуры
Процедура РаспределитьСуммуАвансаПоЧекам(СтрокаАванса, ПогашениеЗадолженности)
	ДокументОбъект = СтрокаАванса.ДокументАванса.ПолучитьОбъект();
	
	ЕстьНаличнаяОплата = Ложь;
	ЕстьЭлектроннаОплата = Ложь;
	СуммаЭлектроннойОплаты = 0;
	СуммаНаличнойОплаты = 0;
	
	Для Каждого СтрокаОплаты Из ДокументОбъект.Оплаты Цикл
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
			
			ЕстьЭлектроннаОплата = Истина;
			СуммаЭлектроннойОплаты = СуммаЭлектроннойОплаты + СтрокаОплаты.Сумма - СтрокаОплаты.Сдача;
			
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			
			ЕстьНаличнаяОплата = Истина;
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + СтрокаОплаты.Сумма - СтрокаОплаты.Сдача;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ХозОперацияПокупки = ДокументОбъект.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат
		ИЛИ ДокументОбъект.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	ХозОперацияПродажи = ДокументОбъект.ХозОперация = Справочники.ХозОперации.ЧекНаОплату
		ИЛИ ДокументОбъект.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат;
	
	Если ЕстьЭлектроннаОплата И Не ЕстьНаличнаяОплата Тогда
		
		НоваяСтрока = ПогашениеЗадолженности.Добавить();
		НоваяСтрока.ДокументРасчетов = Новый Структура(
			"Значение, ИмяПКО",
			СтрокаАванса.ДокументАванса,
			"Документ_ЧекНаОплатуБезнал_Отправка");
		НоваяСтрока.Сумма = СтрокаАванса.Сумма;
		Возврат;
		
	ИначеЕсли Не ЕстьЭлектроннаОплата И ЕстьНаличнаяОплата Тогда
		
		НоваяСтрока = ПогашениеЗадолженности.Добавить();
		НоваяСтрока.ДокументРасчетов = Новый Структура(
			"Значение, ИмяПКО",
			СтрокаАванса.ДокументАванса,
			?(ХозОперацияПокупки, "Документ_ЧекНаОплатуКакРКО_Отправка", "Документ_ЧекНаОплатуКакПКО_Отправка"));
		НоваяСтрока.Сумма = СтрокаАванса.Сумма;
		Возврат;
		
	КонецЕсли;
	
	// Добавим обе строки
	СуммаОплаты = СуммаНаличнойОплаты + СуммаЭлектроннойОплаты;
	Коэффициент = СуммаЭлектроннойОплаты / СуммаОплаты;
	
	СтрокаПогашенияЗадолженности = ПогашениеЗадолженности.Добавить();
	СтрокаПогашенияЗадолженности.ДокументРасчетов = Новый Структура(
		"Значение, ИмяПКО",
		СтрокаАванса.ДокументАванса,
		"Документ_ЧекНаОплатуБезнал_Отправка");
	СтрокаПогашенияЗадолженности.Сумма = Окр(СтрокаАванса.Сумма * Коэффициент, 2);
	
	НоваяСтрока = ПогашениеЗадолженности.Добавить();
	НоваяСтрока.ДокументРасчетов = Новый Структура(
		"Значение, ИмяПКО",
		СтрокаАванса.ДокументАванса,
		?(ХозОперацияПокупки, "Документ_ЧекНаОплатуКакРКО_Отправка", "Документ_ЧекНаОплатуКакПКО_Отправка"));
	НоваяСтрока.Сумма = СтрокаАванса.Сумма - СтрокаПогашенияЗадолженности.Сумма;
КонецПроцедуры
Функция РасшифровкаПлатежаДляПКО(ДанныеИБ, КомпонентыОбмена, ВидРасчетов)
	РасшифровкаПлатежа = ИнициализацияРасшифровкиПлатежа();
		
	ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов");
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, ДанныеИБ.Дата); 
	Кратность = СтруктураКурса.Кратность;
	КурсВзаиморасчетов = СтруктураКурса.Курс;
		
	Если ВидРасчетов = "Прочее" Тогда 
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
			И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.Инкассация") Тогда
			СчетУчетаРасчетовСКонтрагентом = "57.01";
		Иначе
			СчетУчетаРасчетовСКонтрагентом = "76.06";
		КонецЕсли;
	КонецЕсли;
	
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДанныеИБ.ДоговорВзаиморасчетов)
		И ДанныеИБ.Состав.Количество() > 0 Тогда
			
		Для Каждого СтрокаСостава Из ДанныеИБ.Состав Цикл
				
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Договор = ДанныеИБ.ДоговорВзаиморасчетов;
			НоваяСтрока.ВалютаВзаиморасчетов = ВалютаДоговора;
			НоваяСтрока.КурсВзаиморасчетов = КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов = Кратность;
			НоваяСтрока.СпособПогашенияЗадолженности = СтрокаСостава.СпособЗачетаОплаты;
				
			Если СтрокаСостава.СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
				ИмяПКО = ПолучитьИмяПКОДокумента(СтрокаСостава.ДокументРасчетов, КомпонентыОбмена);
				НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаСостава.ДокументРасчетов, ИмяПКО);
			КонецЕсли;
				
			НоваяСтрока.СуммаНДС = СтрокаСостава.СуммаНДС;
			НоваяСтрока.Сумма = СтрокаСостава.Сумма;
			НоваяСтрока.СуммаВзаиморасчетов = СтрокаСостава.Сумма;
			НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДДС;
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
			НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаСостава.СтавкаНДС,,КомпонентыОбмена);
				
			Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
				И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
				НоваяСтрока.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетНаОплату_Отправка");
			ИначеЕсли ЗначениеЗаполнено(СтрокаСостава.ДокументРасчетов)
				И ТипЗнч(СтрокаСостава.ДокументРасчетов) = Тип("ДокументСсылка.СчетНаОплату") Тогда
				НоваяСтрока.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Сделка, "Документ_СчетНаОплату_Отправка");	
			КонецЕсли;
				
		КонецЦикла;
			
	Иначе
			
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.Договор = ДанныеИБ.ДоговорВзаиморасчетов;
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаДоговора;
		НоваяСтрока.КурсВзаиморасчетов = КурсВзаиморасчетов;
		НоваяСтрока.КратностьВзаиморасчетов = Кратность;
		РазрешениеПодставитьСделкуКакЗН = Истина;
			
		Если ТипЗнч(ДанныеИБ.Сделка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			РазрешениеПодставитьСделкуКакЗН = ЗНВРеализациюИЗакрыт(ДанныеИБ.Сделка, КомпонентыОбмена);
		КонецЕсли; 
			
		Если РазрешениеПодставитьСделкуКакЗН Тогда
			ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.Сделка, КомпонентыОбмена);
			НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Сделка, ИмяПКО); 
		КонецЕсли;
			
		НоваяСтрока.СуммаНДС = ДанныеИБ.СуммаНДС;
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
		НоваяСтрока.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДДС;
		НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ДанныеИБ.СтавкаНДС,,КомпонентыОбмена);
			
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			НоваяСтрока.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетНаОплату_Отправка");
		ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.Сделка) И ТипЗнч(ДанныеИБ.Сделка) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			НоваяСтрока.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Сделка, "Документ_СчетНаОплату_Отправка");	
		КонецЕсли; 
			
		Если Не РазрешениеПодставитьСделкуКакЗН Тогда
			НоваяСтрока.СпособПогашенияЗадолженности = "Автоматически";
		Иначе
			НоваяСтрока.СпособПогашенияЗадолженности = ?(ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) 
				И ИмяПКО <> "Документ_СчетНаОплату_Отправка", "ПоДокументу", "Автоматически");
		КонецЕсли;
			
		НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Сделка, ИмяПКО);
		ЗаполнитьСпособЗачетАвансаДляДокументовОплаты(
			ДанныеИБ.ДоговорВзаиморасчетов,
			ДанныеИБ.Сделка,
			РасшифровкаПлатежа,
			НоваяСтрока);
			
	КонецЕсли;
	
	РасшифровкаПлатежа.ЗаполнитьЗначения(ДанныеИБ.Патент, "Патент");
		
	Возврат РасшифровкаПлатежа;
КонецФункции
Функция РасшифровкаПлатежаДляРКО(ДанныеИБ, КомпонентыОбмена, ВидРасчетов)
	РасшифровкаПлатежа = ИнициализацияРасшифровкиПлатежа();
	
	ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов");
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, ДанныеИБ.Дата); 
	Кратность = СтруктураКурса.Кратность;
	КурсВзаиморасчетов = СтруктураКурса.Курс;
	
	СчетУчетаРасчетовСКонтрагентом = "";
	Если ВидРасчетов = "Прочее" Тогда 
		СчетУчетаРасчетовСКонтрагентом = "76.06";
	КонецЕсли;
	
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДанныеИБ.ДоговорВзаиморасчетов)
		И ДанныеИБ.Состав.Количество() > 0 Тогда
		
		Для Каждого СтрокаСостава Из ДанныеИБ.Состав Цикл
			
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Договор = ДанныеИБ.ДоговорВзаиморасчетов;
			НоваяСтрока.ВалютаВзаиморасчетов = ВалютаДоговора;
			НоваяСтрока.КурсВзаиморасчетов = КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов = Кратность;
			НоваяСтрока.СпособПогашенияЗадолженности = СтрокаСостава.СпособЗачетаОплаты;
			
			Если СтрокаСостава.СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
				ИмяПКО = ПолучитьИмяПКОДокумента(СтрокаСостава.ДокументРасчетов, КомпонентыОбмена);
				НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаСостава.ДокументРасчетов, ИмяПКО);
			КонецЕсли;
			
			НоваяСтрока.СуммаНДС = СтрокаСостава.СуммаНДС;
			НоваяСтрока.Сумма = СтрокаСостава.Сумма;
			НоваяСтрока.СуммаВзаиморасчетов = СтрокаСостава.Сумма;
			НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДДС;
			Если Не ПустаяСтрока(СчетУчетаРасчетовСКонтрагентом) Тогда
				НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаСостава.СтавкаНДС,,КомпонентыОбмена);
			
			Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
				И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
				НоваяСтрока.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетНаОплату_Отправка");
			ИначеЕсли ЗначениеЗаполнено(СтрокаСостава.ДокументРасчетов)
				И ТипЗнч(СтрокаСостава.ДокументРасчетов) = Тип("ДокументСсылка.СчетНаОплату") Тогда
				НоваяСтрока.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Сделка, "Документ_СчетНаОплату_Отправка");	
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.Договор = ДанныеИБ.ДоговорВзаиморасчетов;
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаДоговора;
		НоваяСтрока.КурсВзаиморасчетов = КурсВзаиморасчетов;
		НоваяСтрока.КратностьВзаиморасчетов = Кратность; 
		РазрешениеПодставитьСделкуКакЗН = Истина;
		
		Если ТипЗнч(ДанныеИБ.Сделка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			РазрешениеПодставитьСделкуКакЗН = ЗНВРеализациюИЗакрыт(ДанныеИБ.Сделка, КомпонентыОбмена);
		КонецЕсли; 
		
		Если РазрешениеПодставитьСделкуКакЗН Тогда
			ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.Сделка, КомпонентыОбмена);
			НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Сделка, ИмяПКО); 
		КонецЕсли;
		
		НоваяСтрока.СуммаНДС = ДанныеИБ.СуммаНДС;
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
		НоваяСтрока.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДДС;
		Если Не ПустаяСтрока(СчетУчетаРасчетовСКонтрагентом) Тогда
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ДанныеИБ.СтавкаНДС,,КомпонентыОбмена);
		
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
			И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетОтПоставщика") Тогда
			НоваяСтрока.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетОтПоставщика_Отправка");
		ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.Сделка)
			И ТипЗнч(ДанныеИБ.Сделка) = Тип("ДокументСсылка.СчетОтПоставщика") Тогда
			НоваяСтрока.Заказ = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Сделка, "Документ_СчетОтПоставщика_Отправка");
		КонецЕсли;
		ИмяПКО = ПолучитьИмяПКОДокумента(ДанныеИБ.Сделка, КомпонентыОбмена);
		НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Сделка, ИмяПКО);
		
		ЗаполнитьСпособЗачетАвансаДляДокументовОплаты(
			ДанныеИБ.ДоговорВзаиморасчетов,
			ДанныеИБ.Сделка,
			РасшифровкаПлатежа,
			НоваяСтрока);
		
	КонецЕсли;
	
	РасшифровкаПлатежа.ЗаполнитьЗначения(ДанныеИБ.Патент, "Патент");
	
	Возврат РасшифровкаПлатежа;
КонецФункции
Функция СписокПогашениеЗадолженности()
	ПогашениеЗадолженности = Новый ТаблицаЗначений;
	ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
	ПогашениеЗадолженности.Колонки.Добавить("Сумма");
	
	Возврат ПогашениеЗадолженности;
КонецФункции
Функция СпособЗачетаАвансов(СпособЗачетаАванса)
	Если СпособЗачетаАванса.Значение = "Автоматически" Тогда
		Возврат Перечисления.СпособыЗачетаАвансов.Автоматически;
	ИначеЕсли СпособЗачетаАванса.Значение = "ПоДокументу" Тогда
		Возврат Перечисления.СпособыЗачетаАвансов.ПоДокументу;
	КонецЕсли;
	Возврат Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
КонецФункции
Функция СсылкаНаОбъектПоПубличномуИдентификатору(ИдентификаторОбъекта, УзелКорреспондента)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
	|ГДЕ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Идентификатор = &Идентификатор
	|	И ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы = &УзелИнформационнойБазы";
		
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторОбъекта);
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелКорреспондента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Функция СсылкаСуществует(Ссылка)
	Возврат ЗначениеЗаполнено(Ссылка) И ОбщегоНазначения.СсылкаСуществует(Ссылка);
КонецФункции
Функция СтавкаНДС_Получение(ЗначениеСтавкиНДС)
	Результат = Неопределено;
	
	Если ЗначениеСтавкиНДС = "НДС20" Тогда
		Результат = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
	ИначеЕсли ЗначениеСтавкиНДС = "НДС20_120" Тогда
		Результат = Справочники.СтавкиНДС.ОсновнаяСтавкаНДСРасчетная;
	ИначеЕсли ЗначениеСтавкиНДС = "НДС10" Тогда
		Результат = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС10;
	ИначеЕсли ЗначениеСтавкиНДС = "НДС10_110" Тогда
		Результат = Справочники.СтавкиНДС.РасчетнаяСтавкаНДС10;
	ИначеЕсли ЗначениеСтавкиНДС = "НДС18" Тогда
		Результат = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", 18);
	ИначеЕсли ЗначениеСтавкиНДС = "НДС18_118" Тогда
		Результат = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", 18);
	ИначеЕсли ЗначениеСтавкиНДС = "БезНДС" Тогда
		Результат = Справочники.СтавкиНДС.БезНДС;
	ИначеЕсли ЗначениеСтавкиНДС = "НДС0" Тогда
		Результат = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", 0);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Процедура СтавкаНДССтроки(СтруктураДанныхСтроки, КомпонентыОбмена)
	Если НЕ СтруктураДанныхСтроки.Свойство("СтавкаНДС") Тогда
		Возврат;
	КонецЕсли; 
		
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.17") Тогда
			
		СтруктураСтавки = СтруктураДанныхСтроки.СтавкаНДС;
			
		Если СтруктураСтавки.НеОблагается Тогда 
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
		Иначе 
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СтавкиНДС.Ссылка КАК Ссылка,
				|	1 КАК Приоритет
				|ИЗ
				|	Справочник.СтавкиНДС КАК СтавкиНДС
				|ГДЕ
				|	СтавкиНДС.Ставка = &Ставка
				|	И &НеОблагаетсяНДС = (СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС))
				|	И СтавкиНДС.Предопределенный
				|	И СтавкиНДС.РасчетнаяСтавка = &РасчетнаяСтавка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СтавкиНДС.Ссылка,
				|	0
				|ИЗ
				|	Справочник.СтавкиНДС КАК СтавкиНДС
				|ГДЕ
				|	СтавкиНДС.Ставка = &Ставка
				|	И &НеОблагаетсяНДС = (СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС))
				|	И НЕ СтавкиНДС.Предопределенный
				|	И СтавкиНДС.РасчетнаяСтавка = &РасчетнаяСтавка
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет УБЫВ";
				
			Запрос.УстановитьПараметр("НеОблагаетсяНДС", СтруктураСтавки.НеОблагается);
			Запрос.УстановитьПараметр("Ставка", 		 СтруктураСтавки.Ставка); 
			Запрос.УстановитьПараметр("РасчетнаяСтавка", СтруктураСтавки.РасчетнаяСтавка);
				
			РезультатЗапроса = Запрос.Выполнить();  
			Если РезультатЗапроса.Пустой() Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка);  
			Иначе 
				ТаблицаСтавок = РезультатЗапроса.Выгрузить();  
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", ТаблицаСтавок[0].Ссылка);	
			КонецЕсли; 
		КонецЕсли;
	Иначе	
			
		ЗначениеСтавкиНДС = СтавкаНДС_Получение(СтруктураДанныхСтроки.СтавкаНДС.Значение);	
		СтруктураДанныхСтроки.Вставить("СтавкаНДС", ЗначениеСтавкиНДС);
	
	КонецЕсли;
КонецПроцедуры
Процедура СформироватьВыпискиКЗагрузке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена, ИмяПКО)
	ИспользованиеПКО[ИмяПКО] = Ложь;
	
	ДоговорыРасшифровкиПлатежа = ДанныеXDTO.РасшифровкаПлатежа.Скопировать();
	Если ЕстьРеквизит(ДоговорыРасшифровкиПлатежа, "Договор") Тогда
		ДоговорыРасшифровкиПлатежа.Свернуть("Договор");
	Иначе
		// Выполняем по стандартной схеме
		ИспользованиеПКО[ИмяПКО] = Истина;
		Возврат;
	КонецЕсли;
	
	КоличествоДокументов = ДоговорыРасшифровкиПлатежа.Количество();
	
	Если КоличествоДокументов <= 1 Тогда
		СсылкаНаОбъект = СсылкаНаОбъектПоПубличномуИдентификатору(
			ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение,
			КомпонентыОбмена.УзелКорреспондента);
	
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.Выписка") Тогда
			// Выполняем по стандартной схеме
			ИспользованиеПКО[ИмяПКО] = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УсловиеПоиска = Новый Структура("Договор");
	Для Строка = 0 По (КоличествоДокументов - 1) Цикл
		
		ПреобразованныеXDTO = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеXDTO);
		ПреобразованныеXDTO.РасшифровкаПлатежа.Очистить();
		
		УсловиеПоиска.Договор = ДоговорыРасшифровкиПлатежа[Строка].Договор;
		НайденныеСтроки = ДанныеXDTO.РасшифровкаПлатежа.НайтиСтроки(УсловиеПоиска);
		
		Для Каждого СтрокаРасшифровкиПлатежа Из НайденныеСтроки Цикл
		
			НоваяСтрока = ПреобразованныеXDTO.РасшифровкаПлатежа.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасшифровкиПлатежа);
		
		КонецЦикла;
		
		Если Строка > 9 Тогда
			ПрефиксНомера = Строка;
			ПрефиксУИД = Строка;
		Иначе
			ПрефиксНомера = "0" + Строка;
			ПрефиксУИД = "0" + Строка;
		КонецЕсли;
			
		ЛеваяЧастьНомера = Лев(ПреобразованныеXDTO.КлючевыеСвойства.Номер, 5);
		ПраваяЧастьНомера = Прав(ПреобразованныеXDTO.КлючевыеСвойства.Номер, 4);	
		ПреобразованныеXDTO.КлючевыеСвойства.Номер = ЛеваяЧастьНомера + ПрефиксНомера + ПраваяЧастьНомера;
		
		ЛеваяЧастьУИД = Лев(ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение, 34);
		ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение = ЛеваяЧастьУИД + ПрефиксУИД;
		ПреобразованныеXDTO.Ссылка.Значение = ПреобразованныеXDTO.КлючевыеСвойства.Ссылка.Значение;
		
		ПКО_ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
		ПолученныйПКО = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ПреобразованныеXDTO,
			ПКО_ПКО);
		
	КонецЦикла;
КонецПроцедуры
Функция СформироватьКомментарий(ДанныеИБ, ВидДокумента)
	МассивКомментарий = Новый Массив;	
	Если ТипЗнч(ДанныеИБ) = Тип("ДокументСсылка.ЗаказНаряд")
		ИЛИ ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.ЗаказНаряд") Тогда
		
		МассивКомментарий.Добавить(СтрШаблон(НСтр("ru = 'Импортирован %1. Источник: %2 №%3 от %4 (дата закрытия: %5)'"),
				Формат(ТекущаяДатаСеанса(), "ДЛФ=DT"),
				ВидДокумента,
				ДанныеИБ.Номер,
				Формат(ДанныеИБ.Дата, "ДЛФ=DT"),
				Формат(ДанныеИБ.ДатаЗакрытия,"ДЛФ=DT")
			)
		);
	Иначе 		
		МассивКомментарий.Добавить(СтрШаблон(НСтр("ru = 'Импортирован %1. Источник: %2 №%3 от %4'"),
				Формат(ТекущаяДатаСеанса(), "ДЛФ=DT"),
				ВидДокумента,
				ДанныеИБ.Номер,
				Формат(ДанныеИБ.Дата, "ДЛФ=DT")
			)
		);
	КонецЕсли;
	ЕстьКомментарий = Ложь;
	Если ТипЗнч(ДанныеИБ)=Тип("Структура") И ДанныеИБ.Свойство("Комментарий") И ЗначениеЗаполнено(ДанныеИБ.Комментарий)Тогда
		МассивКомментарий.Добавить(СтрШаблон(Нстр("ru = '%1%2'"), Символы.ПС, ДанныеИБ.Комментарий));
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.Комментарий) Тогда  
		МассивКомментарий.Добавить(СтрШаблон(Нстр("ru = '%1%2'"), Символы.ПС, ДанныеИБ.Комментарий));
	КонецЕсли;
	
	Возврат СтрСоединить(МассивКомментарий);
КонецФункции
Процедура СформироватьКомментарийОбъекту(Объект, ВидДокумента)
	МассивКомментарий = Новый Массив;
	МассивКомментарий.Добавить(СтрШаблон(Нстр("ru = 'Импортирован %1. Источник: '"), ТекущаяДатаСеанса()));
	МассивКомментарий.Добавить(СтрШаблон(Нстр("ru = '%1 №%2 от  %3'"), ВидДокумента, Объект.Номер, Объект.Дата));
	
	Если ЗначениеЗаполнено(Объект.Комментарий) Тогда
		МассивКомментарий.Добавить(СтрШаблон(Нстр("ru = '%1%2'"), Символы.ПС, Объект.Комментарий));
	КонецЕсли;
	
	Объект.Комментарий = СтрСоединить(МассивКомментарий);
КонецПроцедуры
Функция СформироватьТабличнуюЧастьСГТДКорректировки(Основание, ДоКорректировки)
	Если ДоКорректировки Тогда
		ДокОснование = Основание.ДокументОснование;
		Пока Истина Цикл
			Если ТипЗнч(ДокОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ДокументОснование = ДокОснование;
				Прервать;
			КонецЕсли;
			ДокОснование = ДокОснование.ДокументОснование;
		КонецЦикла;
	Иначе
		ДокументОснование = Основание.ДокументОснование;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураВыданный.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	СчетФактураНеВведен = РезультатЗапроса.Пустой();
	
	Если НЕ СчетФактураНеВведен Тогда
		ВалютаДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВалютаДокумента");
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ВалютаДокументаОснования <> Выборка.ВалютаДокумента Тогда
			// Суммы будут некорректными, если валюта у документа и счета-фактуры отличается
			СчетФактураНеВведен = Истина;
		Иначе
			СчетФактура = Выборка.СчетФактура.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	Если СчетФактураНеВведен Тогда
		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
		СчетФактура.Заполнить(Основание);
	КонецЕсли;
	
	Товары = СчетФактура.Товары.Выгрузить();
	
	Возврат Товары;
КонецФункции
Функция СформироватьТЧ_С_ГТД(Основание)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетФактураВыданный.Ссылка КАК СчетФактура,
		|	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ
		|	И СчетФактураВыданный.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	РезультатЗапроса = Запрос.Выполнить();
	СчетФактураНеВведен = РезультатЗапроса.Пустой();
	
	Если НЕ СчетФактураНеВведен Тогда
		ВалютаДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВалютаДокумента");
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ВалютаДокументаОснования <> Выборка.ВалютаДокумента Тогда
			// Суммы будут некорректными, если валюта у документа и счета-фактуры отличается
			СчетФактураНеВведен = Истина;
		Иначе
			СчетФактура = Выборка.СчетФактура.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	Если СчетФактураНеВведен Тогда
		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
		СчетФактура.Заполнить(Основание);
	КонецЕсли;
	
	Товары = СчетФактура.Товары.Выгрузить();
		
	Возврат Товары;
КонецФункции
Функция ТаблицыСчетаНаОплату(ДанныеИБ, КомпонентыОбмена)
	ТаблицаТоваров = Новый ТаблицаЗначений();
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("Количество");
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаТоваров.Колонки.Добавить("Сумма");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");  
		
		ТаблицаУслуг = Новый ТаблицаЗначений();
		ТаблицаУслуг.Колонки.Добавить("Номенклатура");
		ТаблицаУслуг.Колонки.Добавить("Количество"); 
		ТаблицаУслуг.Колонки.Добавить("Содержание"); 
	  	ТаблицаУслуг.Колонки.Добавить("Сумма");
		ТаблицаУслуг.Колонки.Добавить("Цена");
		ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
		ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		       |	СчетНаОплатуТовары.Номенклатура КАК Номенклатура,
	           |	СУММА(СчетНаОплатуТовары.Количество * СчетНаОплатуТовары.Коэффициент) КАК Количество,
	           |	СчетНаОплатуТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	           |	СУММА(ВЫБОР
	           |			КОГДА СчетНаОплатуТовары.Ссылка.ТипЦен.ЦенаВключаетНДС
	           |				ТОГДА СчетНаОплатуТовары.СуммаВсего
	           |			ИНАЧЕ СчетНаОплатуТовары.СуммаВсего - СчетНаОплатуТовары.СуммаНДС
	           |		КОНЕЦ) КАК Сумма,
	           |	СУММА(СчетНаОплатуТовары.СуммаНДС) КАК СуммаНДС,
	           |	СчетНаОплатуТовары.СтавкаНДС КАК СтавкаНДС,
	           |	СчетНаОплатуТовары.СтавкаНДС.Ставка КАК Ставка
	           |ИЗ
	           |	Документ.СчетНаОплату.Товары КАК СчетНаОплатуТовары
	           |ГДЕ
	           |	СчетНаОплатуТовары.Ссылка = &Ссылка
	           |	И СчетНаОплатуТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	           |
	           |СГРУППИРОВАТЬ ПО
	           |	СчетНаОплатуТовары.Номенклатура,
	           |	СчетНаОплатуТовары.Номенклатура.БазоваяЕдиницаИзмерения,
	           |	СчетНаОплатуТовары.СтавкаНДС,
	           |	СчетНаОплатуТовары.СтавкаНДС.Ставка
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	СчетНаОплатуАвтоработы.Авторабота КАК Номенклатура,
	           |	СУММА(СчетНаОплатуАвтоработы.Количество * СчетНаОплатуАвтоработы.Коэффициент) КАК Количество,
	           |	СУММА(ВЫБОР
	           |			КОГДА СчетНаОплатуАвтоработы.Ссылка.ТипЦенРабот.ЦенаВключаетНДС
	           |				ТОГДА СчетНаОплатуАвтоработы.СуммаВсего
	           |			ИНАЧЕ СчетНаОплатуАвтоработы.СуммаВсего - СчетНаОплатуАвтоработы.СуммаНДС
	           |		КОНЕЦ) КАК Сумма,
	           |	СУММА(СчетНаОплатуАвтоработы.СуммаНДС) КАК СуммаНДС,
	           |	СчетНаОплатуАвтоработы.СтавкаНДС КАК СтавкаНДС,
	           |	СчетНаОплатуАвтоработы.СтавкаНДС.Ставка КАК Ставка,
	           |	ВЫРАЗИТЬ(СчетНаОплатуАвтоработы.Авторабота.НаименованиеПолное КАК СТРОКА(1000)) КАК Содержание
	           |ИЗ
	           |	Документ.СчетНаОплату.Автоработы КАК СчетНаОплатуАвтоработы
	           |ГДЕ
	           |	СчетНаОплатуАвтоработы.Ссылка = &Ссылка
	           |
	           |СГРУППИРОВАТЬ ПО
	           |	СчетНаОплатуАвтоработы.Авторабота,
	           |	СчетНаОплатуАвтоработы.СтавкаНДС,
	           |	СчетНаОплатуАвтоработы.СтавкаНДС.Ставка,
	           |	ВЫРАЗИТЬ(СчетНаОплатуАвтоработы.Авторабота.НаименованиеПолное КАК СТРОКА(1000))
	           |
	           |ОБЪЕДИНИТЬ ВСЕ
	           |
	           |ВЫБРАТЬ
	           |	СчетНаОплатуТовары.Номенклатура,
	           |	СУММА(СчетНаОплатуТовары.Количество * СчетНаОплатуТовары.Коэффициент),
	           |	СУММА(ВЫБОР
	           |			КОГДА СчетНаОплатуТовары.Ссылка.ТипЦен.ЦенаВключаетНДС
	           |				ТОГДА СчетНаОплатуТовары.СуммаВсего
	           |			ИНАЧЕ СчетНаОплатуТовары.СуммаВсего - СчетНаОплатуТовары.СуммаНДС
	           |		КОНЕЦ),
	           |	СУММА(СчетНаОплатуТовары.СуммаНДС),
	           |	СчетНаОплатуТовары.СтавкаНДС,
	           |	СчетНаОплатуТовары.СтавкаНДС.Ставка,
	           |	ВЫБОР
	           |		КОГДА ПОДСТРОКА(СчетНаОплатуТовары.Содержание, 1, 100) = """"
	           |			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	           |		ИНАЧЕ СчетНаОплатуТовары.Содержание
	           |	КОНЕЦ
	           |ИЗ
	           |	Документ.СчетНаОплату.Товары КАК СчетНаОплатуТовары
	           |ГДЕ
	           |	СчетНаОплатуТовары.Ссылка = &Ссылка
	           |	И СчетНаОплатуТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	           |
	           |СГРУППИРОВАТЬ ПО
	           |	СчетНаОплатуТовары.Номенклатура,
	           |	СчетНаОплатуТовары.СтавкаНДС,
	           |	СчетНаОплатуТовары.СтавкаНДС.Ставка,
	           |	ВЫБОР
	           |		КОГДА ПОДСТРОКА(СчетНаОплатуТовары.Содержание, 1, 100) = """"
	           |			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	           |		ИНАЧЕ СчетНаОплатуТовары.Содержание
	           |	КОНЕЦ";	    
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ВыборкаТоваров = МассивРезультатов[0].Выбрать();
		
		Пока ВыборкаТоваров.Следующий() Цикл
			
			ИмяПКО = "Справочник_Номенклатура_Отправка";
			СтрокаТоваров = ТаблицаТоваров.Добавить();
				
			СтрокаТоваров.Номенклатура = Новый Структура("Значение, ИмяПКО", ВыборкаТоваров.Номенклатура, ИмяПКО);
			СтрокаТоваров.Количество = ВыборкаТоваров.Количество;
			СтрокаТоваров.ЕдиницаИзмерения =  ВыборкаТоваров.ЕдиницаИзмерения;
			СтрокаТоваров.Сумма =ВыборкаТоваров.Сумма;
			СтрокаТоваров.Цена = Окр(ВыборкаТоваров.Сумма / ?(ВыборкаТоваров.Количество = 0, 1, ВыборкаТоваров.Количество), 2);
			СтрокаТоваров.СуммаНДС = ВыборкаТоваров.СуммаНДС;
			СтрокаТоваров.СтавкаНДС = ПолучитьСтавкуНДС(ВыборкаТоваров.СтавкаНДС, ВыборкаТоваров.Ставка,КомпонентыОбмена);
			
		КонецЦикла;
		
		ВыборкаУслуг = МассивРезультатов[1].Выбрать();
		
		Пока ВыборкаУслуг.Следующий() Цикл 
			
			СтрокаУслуг = ТаблицаУслуг.Добавить();
	
			Если ТипЗнч(ВыборкаУслуг.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
				ИмяПКО = "Справочник_Автоработы_Отправка";
			Иначе
				ИмяПКО = "Справочник_Номенклатура_Отправка";
			КонецЕсли;
												
			СтрокаУслуг.Номенклатура = Новый Структура("Значение, ИмяПКО", ВыборкаУслуг.Номенклатура, ИмяПКО);
			СтрокаУслуг.Количество = ВыборкаУслуг.Количество;
			СтрокаУслуг.Содержание = ВыборкаУслуг.Содержание;
			СтрокаУслуг.Сумма = ВыборкаУслуг.Сумма;
			СтрокаУслуг.Цена = Окр(ВыборкаУслуг.Сумма / ?(ВыборкаУслуг.Количество = 0, 1, ВыборкаУслуг.Количество), 2);
			СтрокаУслуг.СуммаНДС = ВыборкаУслуг.СуммаНДС;
			СтрокаУслуг.СтавкаНДС = ПолучитьСтавкуНДС(ВыборкаУслуг.СтавкаНДС, ВыборкаУслуг.Ставка,КомпонентыОбмена);
			
		КонецЦикла;
		
		ТаблицыСчета = Новый Структура;
		ТаблицыСчета.Вставить("Товары", ТаблицаТоваров);
		ТаблицыСчета.Вставить("Услуги", ТаблицаУслуг);
		
		Возврат ТаблицыСчета;
КонецФункции
Функция ТоварыКВозвратуИзБесплатногоЗаказНаряда(КомпонентыОбмена, ДокументВозврата)
	УчетПоГТД = КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД;
		
	Если УчетПоГТД Тогда
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			             |	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
			             |	ВЫБОР
			             |		КОГДА ПартииТоваровКомпании.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
			             |			ТОГДА ""КомиссионныеТовары""
			             |		ИНАЧЕ ""СобственныеТовары""
			             |	КОНЕЦ КАК ТипЗапасов,
			             |	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			             |	СУММА(-ПартииТоваровКомпании.Количество) КАК Количество,
			             |	СУММА(0) КАК Цена,
			             |	ПартииТоваровКомпании.Партия КАК Партия,
			             |	ПартииТоваровКомпании.Номенклатура.Прослеживаемый КАК ПрослеживаемыйТовар,
			             |	СУММА(ВЫБОР
			             |			КОГДА &ОсвобожденОтУплатыНДС
			             |				ТОГДА -ПартииТоваровКомпании.Сумма
			             |			ИНАЧЕ -ПартииТоваровКомпании.СуммаБезНДС
			             |		КОНЕЦ) КАК Сумма
			             |ИЗ
			             |	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			             |ГДЕ
			             |	ПартииТоваровКомпании.Регистратор = &Регистратор
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	ПартииТоваровКомпании.Номенклатура,
			             |	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения,
			             |	ПартииТоваровКомпании.Партия,
			             |	ПартииТоваровКомпании.Номенклатура.Прослеживаемый,
			             |	ВЫБОР
			             |		КОГДА ПартииТоваровКомпании.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
			             |			ТОГДА ""КомиссионныеТовары""
			             |		ИНАЧЕ ""СобственныеТовары""
			             |	КОНЕЦ
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			             |	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
			             |	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
			             |	- ГТДПартийТоваровКомпании.Количество КАК Количество,
			             |	ГТДПартийТоваровКомпании.Партия КАК Партия
			             |ИЗ
			             |	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
			             |ГДЕ
			             |	ГТДПартийТоваровКомпании.Регистратор = &Регистратор";
		Запрос.УстановитьПараметр("Регистратор", ДокументВозврата);
		Запрос.УстановитьПараметр("ОсвобожденОтУплатыНДС", ОсвобожденОтУплатыНДС(ДокументВозврата.Организация, ДокументВозврата.ПодразделениеКомпании, ДокументВозврата.Дата));
		
		ПакетЗапроса = Запрос.ВыполнитьПакет();
		ТаблицаПартий = ПакетЗапроса[0].Выгрузить();
		ТаблицаГТД = ПакетЗапроса[1].Выгрузить();
			
		Товары = ТаблицаПартий.Скопировать();
		Товары.Колонки.Добавить("ГТД");
		Товары.Очистить();
			
		// Распределим по ГТД
		СтруктураПоиска = Новый Структура("Номенклатура,Партия");
		Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
				
			КоличествоОсталось = СтрокаПартии.Количество;
			СуммаОсталось = СтрокаПартии.Сумма;
				
			// Найдем строки с ГТД
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПартии);
			НайденныеГТД = ТаблицаГТД.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекущаяСтрока Из НайденныеГТД Цикл
					
				КоличествоГТД = Мин(КоличествоОсталось, ТекущаяСтрока.Количество);
					
				Если КоличествоГТД = КоличествоОсталось Тогда
					СуммаГТД = СуммаОсталось;
				Иначе
					СуммаГТД = Окр(СуммаОсталось / КоличествоОсталось * КоличествоГТД, 2);
				КонецЕсли;
					
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.Количество = КоличествоГТД;
				НоваяСтрока.Сумма = СуммаГТД;
					
				КоличествоОсталось = КоличествоОсталось - КоличествоГТД;
				СуммаОсталось = СуммаОсталось - СуммаГТД;
					
				// Все распределили
				Если КоличествоОсталось = 0 Тогда
					Прервать;
				КонецЕсли;
					
			КонецЦикла;
				
			// Проверим осталось ли еще без ГТД
			Если КоличествоОсталось > 0 Тогда
					
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
				НоваяСтрока.Количество = КоличествоОсталось;
				НоваяСтрока.Сумма = СуммаОсталось;
				НоваяСтрока.ГТД = Справочники.ГТД.ПустаяСсылка();
					
			КонецЕсли;
				
		КонецЦикла;
		
		Товары.Свернуть("Номенклатура,ТипЗапасов,ЕдиницаИзмерения,ГТД,ПрослеживаемыйТовар", "Количество,Цена,Сумма");
	Иначе
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпании.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
			|			ТОГДА ""КомиссионныеТовары""
			|		ИНАЧЕ ""СобственныеТовары""
			|	КОНЕЦ КАК ТипЗапасов,
			|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	СУММА(-ПартииТоваровКомпании.Количество) КАК Количество,
			|	СУММА(0) КАК Цена,
			|	ПартииТоваровКомпании.Партия КАК Партия,
			|	ПартииТоваровКомпании.Номенклатура.Прослеживаемый КАК ПрослеживаемыйТовар,
			|	СУММА(ВЫБОР
			|			КОГДА &ОсвобожденОтУплатыНДС
			|				ТОГДА -ПартииТоваровКомпании.Сумма
			|			ИНАЧЕ -ПартииТоваровКомпании.СуммаБезНДС
			|		КОНЕЦ) КАК Сумма
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			|ГДЕ
			|	ПартииТоваровКомпании.Регистратор = &Регистратор
			|
			|СГРУППИРОВАТЬ ПО
			|	ПартииТоваровКомпании.Номенклатура,
			|	ПартииТоваровКомпании.Номенклатура.БазоваяЕдиницаИзмерения,
			|	ПартииТоваровКомпании.Партия,
			|	ПартииТоваровКомпании.Номенклатура.Прослеживаемый,
			|	ВЫБОР
			|		КОГДА ПартииТоваровКомпании.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
			|			ТОГДА ""КомиссионныеТовары""
			|		ИНАЧЕ ""СобственныеТовары""
			|	КОНЕЦ";
		Запрос.УстановитьПараметр("Регистратор", ДокументВозврата);
		Запрос.УстановитьПараметр("ОсвобожденОтУплатыНДС", ОсвобожденОтУплатыНДС(ДокументВозврата.Организация, ДокументВозврата.ПодразделениеКомпании, ДокументВозврата.Дата));
	
		Товары = Запрос.Выполнить().Выгрузить();
				
	КонецЕсли;
		
		ТоварыСГТД = ТоварыСЗаполнениемГТД(Товары, КомпонентыОбмена);
		
		// Рассчитаем дополнительные поля
		Для Каждого ТекущаяСтрока Из ТоварыСГТД Цикл
			
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
			
	КонецЦикла;
		
	Возврат ТоварыСГТД;
КонецФункции
Функция ТоварыСЗаполнениемГТД(Товары, КомпонентыОбмена)
	ТоварыГТД = Товары.Скопировать();
	ТоварыГТД.Колонки.Добавить("СтранаПроисхождения");
	ТоварыГТД.Колонки.Добавить("НомерГТД");
	ТоварыГТД.Колонки.Добавить("КоличествоРНПТ");
	ТоварыГТД.Колонки.Добавить("ИдентификаторСтроки");
	
	// Передавать ГТД/РНПТ не нужно
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД Тогда
		Возврат ТоварыГТД;
	КонецЕсли;
	
	ПроверкаГТД = ТоварыГТД.ВыгрузитьКолонку("ГТД");
	ГруппировкаГТД = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПроверкаГТД);
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ГруппировкаГТД, Справочники.ГТД.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ГруппировкаГТД, Неопределено);
	
	Если ГруппировкаГТД.Количество() = 0 Тогда
		Возврат ТоварыГТД;
	КонецЕсли;
	
	// Получим данные ГТД
	ДанныеГТД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ГруппировкаГТД, "Наименование,Страна,РНПТ");
	
	// Заполним данными новые колонки
	Для Каждого СтрокаТоваров Из ТоварыГТД Цикл
		
		СтрокаТоваров.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор); 
			
		Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ГТД) Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим прослеживаемый товар или нет
		Если СтрокаТоваров.ПрослеживаемыйТовар Тогда
		
			// Количество РНПТ аналогично количеству базовому
			СтрокаТоваров.КоличествоРНПТ = СтрокаТоваров.Количество;
		
		КонецЕсли;
		
		// Заполнение ГТД/РНПТ
		ГТД = ДанныеГТД.Получить(СтрокаТоваров.ГТД);
		СтрокаТоваров.СтранаПроисхождения = ГТД.Страна;
		СтрокаТоваров.НомерГТД = ГТДСтроки(СтрокаТоваров.ГТД, ГТД.Наименование, ГТД.Страна, ГТД.РНПТ, КомпонентыОбмена);
		
	КонецЦикла;
	
	Возврат ТоварыГТД;
КонецФункции
Функция ТоварыСЗаполнениемГТДКорректировки(Товары, КомпонентыОбмена)
	ТоварыГТД = Товары.Скопировать();
	ТоварыГТД.Колонки.Добавить("СтранаПроисхождения");
	ТоварыГТД.Колонки.Добавить("СтранаПроисхожденияДоИзменения");
	ТоварыГТД.Колонки.Добавить("НомерГТД");
	ТоварыГТД.Колонки.Добавить("НомерГТДДоИзменения");
	ТоварыГТД.Колонки.Добавить("КоличествоРНПТ");
	ТоварыГТД.Колонки.Добавить("КоличествоРНПТДоИзменения");
	ТоварыГТД.Колонки.Добавить("КоличествоРНПТДоКорректировки");
	ТоварыГТД.Колонки.Добавить("ИдентификаторСтроки");
	
	// Передавать ГТД/РНПТ не нужно
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.УчетПоГТД Тогда
		Возврат ТоварыГТД;
	КонецЕсли;
	
	СписокГТД = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокГТД, ТоварыГТД.ВыгрузитьКолонку("ГТД"), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокГТД, ТоварыГТД.ВыгрузитьКолонку("ГТДДоИзменения"), Истина);
	
	// Получим данные ГТД
	ДанныеГТД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокГТД, "Наименование,Страна,РНПТ");
	
	// Заполним данными новые колонки
	Для Каждого СтрокаТоваров Из ТоварыГТД Цикл
		
		СтрокаТоваров.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ГТД)
			И НЕ Значениезаполнено(СтрокаТоваров.ГТДДоИзменения) Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим прослеживаемый товар или нет
		Если СтрокаТоваров.ПрослеживаемыйТовар Тогда
		
			// Количество РНПТ аналогично количеству базовому
			Если ЗначениеЗаполнено(СтрокаТоваров.ГТД) Тогда 
				СтрокаТоваров.КоличествоРНПТ = СтрокаТоваров.Количество;
			КонецЕсли;
			
			Если Значениезаполнено(СтрокаТоваров.НомерГТДДоИзменения) Тогда
				СтрокаТоваров.КоличествоРНПТДоИзменения = СтрокаТоваров.КоличествоДоИзменения;
				СтрокаТоваров.КоличествоРНПТДоКорректировки = СтрокаТоваров.КоличествоДоКорректировки;
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполнение ГТД/РНПТ
		Если ЗначениеЗаполнено(СтрокаТоваров.ГТД) Тогда
			ГТД = ДанныеГТД.Получить(СтрокаТоваров.ГТД);
			СтрокаТоваров.СтранаПроисхождения = ГТД.Страна;
			СтрокаТоваров.НомерГТД = ГТДСтроки(СтрокаТоваров.ГТД, ГТД.Наименование, ГТД.Страна, ГТД.РНПТ, КомпонентыОбмена);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ГТДДоИзменения) Тогда
			ГТДДоИзменения = ДанныеГТД.Получить(СтрокаТоваров.ГТДДоИзменения);
			СтрокаТоваров.СтранаПроисхожденияДоИзменения = ГТДДоИзменения.Страна;
			СтрокаТоваров.НомерГТДДоИзменения = ГТДСтроки(СтрокаТоваров.ГТДДоИзменения, ГТДДоИзменения.Наименование, ГТДДоИзменения.Страна, ГТДДоИзменения.РНПТ, КомпонентыОбмена);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТоварыГТД;
КонецФункции
Процедура УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации)
	ПризнакПроведенПолученный = Неопределено;
	// Устанавливается в особых случаях, когда проведение документа зависит от других данных.
	ПолученныеДанные.ДополнительныеСвойства.Свойство("Проведен", ПризнакПроведенПолученный);
		
	// Если признак проведения не был задан явно, считается что он взведен.
	Если ПризнакПроведенПолученный = Неопределено Тогда
		ПризнакПроведенПолученный = Истина;
	КонецЕсли;
	ПолученныеДанные.Проведен = ПризнакПроведенПолученный;
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.Проведен = ПолученныеДанные.Проведен;
	КонецЕсли;
КонецПроцедуры
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции
Функция ЭтоПеремещение(ВидОперации)
	Возврат ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиИзКассы 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.СнятиеНаличныхВКассу
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации
			ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводСДругогоСчетаОрганизации;
КонецФункции
Функция ЭтоПодотчет(Контрагент)
	СотрудникЗаполнен = ЗначениеЗаполнено(Контрагент.Сотрудник);
		КонтрагентПодотчетник = ?(Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо, Истина, Ложь);
		ЧастноеЛицо = ?(Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо, Истина, Ложь);
		Если КонтрагентПодотчетник
			И ЧастноеЛицо
			И СотрудникЗаполнен Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ПодразделениеПоУмолчанию");
	ПараметрыКонвертации.Вставить("СтатьяДДСПоУмолчанию");
	ПараметрыКонвертации.Вставить("МассивЗапрещенныхКПовторнойЗагрузке");
	ПараметрыКонвертации.Вставить("ИспользоватьВозвратнуюТару");
	ПараметрыКонвертации.Вставить("УчетПоГТД");
	ПараметрыКонвертации.Вставить("ИспользоватьРозничнуюТорговлюДляФизЛиц");
	ПараметрыКонвертации.Вставить("ЗаказНарядПроизводство");
	ПараметрыКонвертации.Вставить("СписаниеТребованиеНакладная");
	ПараметрыКонвертации.Вставить("ВыгрузкаПоступленийАвтоНаОтвХранение");
	ПараметрыКонвертации.Вставить("КассаКомпанииПоУмолчанию");
	ПараметрыКонвертации.Вставить("НеПередаватьНоменклатурнуюГруппу");
	ПараметрыКонвертации.Вставить("УчетЗарплатыВоВнешнейПрограмме");
	ПараметрыКонвертации.Вставить("ИспользоватьНоменклатуруВАвтоработах");
	ПараметрыКонвертации.Вставить("НоменклатурнаяГруппаПоУмолчанию");
	ПараметрыКонвертации.Вставить("СоответствиеОперацииИСтатейДДС");
	ПараметрыКонвертации.Вставить("СвернутьПоступление");
	ПараметрыКонвертации.Вставить("ОтборОрганизация");
	ПараметрыКонвертации.Вставить("СоответствиеТиповНоменклатуры");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВозвратОтПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратОтПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратПоставщикуАвтомобилей_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратПоставщикуАвтомобилей_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_Выписка_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Выписка_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_Инвентаризация_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Инвентаризация_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризацияАвтомобилей_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризацияАвтомобилей_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_Инкассация_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Инкассация_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_Комплектация_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Комплектация_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеАвтомобилей_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеАвтомобилей_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеАвтомобилей_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеАвтомобилей_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РазукомплектацияАвтомобилей_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РазукомплектацияАвтомобилей_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЧекНаОплату_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЧекНаОплату_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Автомобили_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Автомобили_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Автоработы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Автоработы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Модели_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Модели_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Производители_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Производители_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СкладыКомпании_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СкладыКомпании_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Сотрудники_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Сотрудники_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ТипыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ТипыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ЦеновыеГруппы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ЦеновыеГруппы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Цеха_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Цеха_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходныйКассовыйОрдарСотрудника_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПриходныйКассовыйОрдарСотрудника_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходныйКассовыйОрдер_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПриходныйКассовыйОрдер_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РасходныйКассовыйОрдер_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РасходныйКассовыйОрдер_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКОВыплатаЗарплаты_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РКОВыплатаЗарплаты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПлатежиВБюджет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПлатежиВБюджет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСРасчетыССотрудниками_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСРасчетыССотрудниками_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Докумнет_РасходныйКассовыйОрдерСотрудники_Получение_ПриОбработке" Тогда 
		ПОД_Докумнет_РасходныйКассовыйОрдерСотрудники_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КонтрагентыФизЛицо_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_КонтрагентыФизЛицо_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВводВЭксплуатацию_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВводВЭксплуатацию_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратОтПокупателяАвтомобилей_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратОтПокупателяАвтомобилей_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратПоставщикуАвтомобилей_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратПоставщикуАвтомобилей_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоБесплатномуЗН_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоБесплатномуЗН_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказНарядКомплектацияАвтомобиля_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказНарядОтчетОРозничныхПродажах_Отправк_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНарядРеализация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказНарядРеализация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНарядРеализацияАПУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказНарядРеализацияАПУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗакрытиеСменыОтчетРозница_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗакрытиеСменыОтчетРозница_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗНКомплектацияПеремещение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗНКомплектацияПеремещение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИзвлечениеТоваровИзПроизводства_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИзвлечениеТоваровИзПроизводства_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Инвентаризация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Инвентаризация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияАвтомобилей_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияАвтомобилей_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияАвтомОприходование_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияАвтомОприходование_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияАвтомСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияАвтомСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияОприходование_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияОприходование_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнкассацияПодотчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнкассацияПодотчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Комплектация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Комплектация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КомплектацияВПроизводство_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КомплектацияВПроизводство_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаОприходованиеТоваров_Отправк_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаОприходованиеТоваров_Отправк_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступленияАвто_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступленияАвто_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализацииАвто_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализацииАвто_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаТребованиеНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаТребованиеНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеАвтомобилей_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеАвтомобилей_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеАвтомобилейВФилиал_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеАвтомобилейВФилиал_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеАвтомобилейИзФилиала_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеАвтомобилейИзФилиала_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеНезавершенногоПроизводства_Отп_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеНезавершенногоПроизводства_Отп_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваровВПроизводство_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваровВПроизводство_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваровВФилиал_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваровВФилиал_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваровИзФилиала_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваровИзФилиала_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаКакОприходование_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаКакОприходование_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаКакСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаКакСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеАвтомобилей_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеАвтомобилей_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Разукомплектация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Разукомплектация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РазукомплектацияАвтомобилей_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РазукомплектацияАвтомобилей_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РазукомплектацияПеремещТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РазукомплектацияПеремещТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходныйКассовыйОрдер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РасходныйКассовыйОрдер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияАвтомобилей_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияАвтомобилей_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОИнкассация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОИнкассация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗПСотруднику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗПСотруднику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеАвтомобилей_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеАвтомобилей_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеАктивов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеАктивов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваровВПроизводство_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваровВПроизводство_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваровЗапасы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваровЗапасы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваровОтчетКомиссионера_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваровОтчетКомиссионера_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплату_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетНаОплату_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплатуЗаАвтомобили_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетНаОплатуЗаАвтомобили_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетОтПоставщика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетОтПоставщика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетОтПоставщикаЗаАвтомобили_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетОтПоставщикаЗаАвтомобили_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларацияИмпорт_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларацияИмпорт_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УведомлениеОПеремещенииПрослеж_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УведомлениеОПеремещенииПрослеж_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекНаОплатуБезнал_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЧекНаОплатуБезнал_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекНаОплатуКакПКО_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЧекНаОплатуКакПКО_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекНаОплатуКакРКО_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЧекНаОплатуКакРКО_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Автомобили_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Автомобили_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Автоработы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Автоработы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтрагентФизЛицо_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КонтрагентФизЛицо_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Модели_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Модели_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПодразделенияКомпании_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ПодразделенияКомпании_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Производители_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Производители_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СкладыКомпании_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СкладыКомпании_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Сотрудники_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Сотрудники_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтавкиНДС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтавкиНДС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Цеха_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Цеха_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОСотрудники_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОСотрудники_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОСотрудники_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОСотрудники_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриходныйКассовыйОрдер_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПриходныйКассовыйОрдер_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриходныйКассовыйОрдер_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПриходныйКассовыйОрдер_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходныйКассовыйОрдер_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РасходныйКассовыйОрдер_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходныйКассовыйОрдер_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РасходныйКассовыйОрдер_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходныйКассовыйОрдерСотрудник_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РасходныйКассовыйОрдерСотрудник_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходныйКассовыйОрдерСотрудник_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РасходныйКассовыйОрдерСотрудник_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗПНаЛС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УведомлениеОбОстаткахПрослежТов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УведомлениеОВвозеПрослежТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ГТД_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ГТД_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ГТД_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ГТД_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтрагентыФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КонтрагентыФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Патенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Патенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СотрудникиФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СотрудникиФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Банки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторЕдиницИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КлассификаторЕдиницИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиДДС_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДоговорыКонтрагентов" Тогда 
		ОтложеннаяОбработка_ДоговорыКонтрагентов(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПБДС" Тогда 
		ОтложеннаяОбработка_ПБДС(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКО_РКО" Тогда 
		ОтложеннаяОбработка_ПКО_РКО(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
