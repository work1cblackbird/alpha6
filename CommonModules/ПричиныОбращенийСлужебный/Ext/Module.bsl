
#Область ПрограммныйИнтерфейс

#Область РаботаСРегистромСоставПричинОбращенийЗаказНарядов

// Обновление записей в регистре сведений "Состав причин обращений заказ-нарядов"
//
// Параметры:
//  ЗаказНаряд         - ДокументСсылка.ЗаказНаряд - Заказ-наряд, документ с причинами обращений.
//  ПричиныИАвтоработы - ТаблицаЗначений           - Список причин обращений и авторабот документа.
//  Отказ              - Булево                    - Признак отказа от записи данных в регистр.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция ОбновитьСоставПричинОбращений(ЗаказНаряд, ПричиныИАвтоработы, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СоставПричинОбращенийЗаказНарядов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказНаряд.Установить(ЗаказНаряд);
	НаборЗаписей.Прочитать(); 
	НаборЗаписей.Очистить();
	
	НаборЗаписей.Загрузить(ПричиныИАвтоработы);
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Автор         = Пользователи.ТекущийПользователь();
		Запись.Использование = Истина;
		Запись.ЗаказНаряд    = ЗаказНаряд;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные о составе причин обращения.'"),,,, 
						Отказ);
	КонецПопытки;
	
КонецФункции

// Перенести причину обращения из одного заказ-наряда в другой.
//
// Параметры:
//  Приемник         - ДокументСсылка.ЗаказНаряд - Документ, из которого причина обращения необходимо перенести.
//  Источник         - ДокументСсылка.ЗаказНаряд - Документ, в который добавляется причина обращения.
//  ПричиныОбращения - Массив                    - Список причин обращений для переноса.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция ПеренестиПричинуОбращения(Приемник, Источник, ПричиныОбращения) Экспорт
	
	Если ТипЗнч(ПричиныОбращения) <> Тип("Массив") Тогда
		ПричиныОбращенияМассив = Новый Массив;
		ПричиныОбращенияМассив.Добавить(ПричиныОбращения);
	Иначе
		ПричиныОбращенияМассив = ПричиныОбращения;
	КонецЕсли;
	
	НаборЗаписейИсточник = РегистрыСведений.СоставПричинОбращенийЗаказНарядов.СоздатьНаборЗаписей();
	НаборЗаписейИсточник.Отбор.ЗаказНаряд.Установить(Источник);
	НаборЗаписейИсточник.Прочитать();
	
	ВременнаяТаблица = НаборЗаписейИсточник.Выгрузить();
	
	// удаляем записи
	УдаляемЗаписи = Новый Массив;
	Для Каждого Запись Из НаборЗаписейИсточник Цикл
		Если ПричиныОбращенияМассив.Найти(Запись.ПричинаОбращения) <> Неопределено Тогда
			УдаляемЗаписи.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяЗапись Из УдаляемЗаписи Цикл
		НаборЗаписейИсточник.Удалить(УдаляемаяЗапись);
	КонецЦикла;
	
	Попытка
		НаборЗаписейИсточник.Записать();
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи набора записей'"),
		УровеньЖурналаРегистрации.Предупреждение,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	НаборЗаписейПриемник = РегистрыСведений.СоставПричинОбращенийЗаказНарядов.СоздатьНаборЗаписей();
	НаборЗаписейПриемник.Отбор.ЗаказНаряд.Установить(Приемник);
	НаборЗаписейПриемник.Прочитать();
	
	// записываем в новом месте
	Для Каждого Элемент Из ВременнаяТаблица Цикл
		Если ПричиныОбращенияМассив.Найти(Запись.ПричинаОбращения) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписейПриемник.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Элемент);
		НоваяЗапись.ЗаказНаряд = Приемник;
		НоваяЗапись.Автор      = Пользователи.ТекущийПользователь();
	КонецЦикла;
	
	Попытка
		НаборЗаписейПриемник.Записать();
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи набора записей'"),
		УровеньЖурналаРегистрации.Предупреждение,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
КонецФункции

// Устарела. Перенести автоработы из одного заказ-наряда в другой.
//
// Параметры:
//  Приемник	- ДокументСсылка.ЗаказНаряд				- Документ, из которого автоработы необходимо перенести.
//  Источник	- ДокументСсылка.ЗаказНаряд				- Документ, в который добавляются автоработы.
//  Автоработы	- Массив из СправочникСсылка.Автоработы	- Массив переносимых авторабот.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция ПеренестиАвтоработы(Приемник, Источник, Автоработы) Экспорт
	
	Если ТипЗнч(Автоработы) <> Тип("Массив") Тогда
		АвтоработыМассив = Новый Массив;
		АвтоработыМассив.Добавить(Автоработы);
	Иначе
		АвтоработыМассив = Автоработы;
	КонецЕсли;
	
	НаборЗаписейИсточник = РегистрыСведений.СоставПричинОбращенийЗаказНарядов.СоздатьНаборЗаписей();
	НаборЗаписейИсточник.Отбор.ЗаказНаряд.Установить(Источник);
	НаборЗаписейИсточник.Прочитать();
	
	// удаляем записи
	УдаляемЗаписи = Новый Массив;
	Для Каждого Запись Из НаборЗаписейИсточник Цикл
		Если АвтоработыМассив.Найти(Запись.Авторабота) <> Неопределено Тогда
			УдаляемЗаписи.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	
	НеобходимаЗапись = Ложь;
	Для Каждого УдаляемаяЗапись Из УдаляемЗаписи Цикл
		НеобходимаЗапись = Истина;
		НаборЗаписейИсточник.Удалить(УдаляемаяЗапись);
	КонецЦикла;
	
	Если НеобходимаЗапись Тогда
		НаборЗаписейИсточник.Записать();
	КонецЕсли;
	
	//@skip-check unknown-method-property
	Если ЗначениеЗаполнено(Приемник.ЗаказНаряд) И ЗначениеЗаполнено(Приемник.ПричинаОбращения) Тогда
		НаборЗаписейПриемник = РегистрыСведений.СоставПричинОбращенийЗаказНарядов.СоздатьНаборЗаписей();
		//@skip-check unknown-method-property
		НаборЗаписейПриемник.Отбор.ЗаказНаряд.Установить(Приемник.ЗаказНаряд);
		НаборЗаписейПриемник.Прочитать();
		
		Для Каждого Авторабота Из АвтоработыМассив Цикл
			Запись = НаборЗаписейПриемник.Добавить();
			
			//@skip-check unknown-method-property
			Запись.ЗаказНаряд       = Приемник.ЗаказНаряд;
			//@skip-check unknown-method-property
			Запись.ПричинаОбращения = Приемник.ПричинаОбращения;
			Запись.Авторабота       = Авторабота;
			Запись.Использование    = Истина;
			Запись.Автор            = Пользователи.ТекущийПользователь();
		КонецЦикла;
		
		НаборЗаписейПриемник.Записать();
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ЗапросыПоСоставу

// Получение состава причин обращений с автоработами заказ-наряда.
//
// Параметры:
//  ЗаказНаряд - ДокументСсылка.ЗаказНаряд - Документ для получения состава причин обращений.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений, которая содержит информацию о причинах обращений и авторабот документа.
//
Функция СоставПричинОбращенийПоЗаказНаряду(ЗаказНаряд) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставПричинОбращенийЗаказНарядов.ПричинаОбращения,
	|	СоставПричинОбращенийЗаказНарядов.Авторабота
	|ИЗ
	|	РегистрСведений.СоставПричинОбращенийЗаказНарядов КАК СоставПричинОбращенийЗаказНарядов
	|ГДЕ
	|	СоставПричинОбращенийЗаказНарядов.Использование = ИСТИНА
	|	И СоставПричинОбращенийЗаказНарядов.ЗаказНаряд = &ЗаказНаряд";
	
	Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказНаряд);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получение списка авторабот для причины обращения.
//
// Параметры:
//  guidПричины - Строка - Идентификатор причины обращения.
// 
// Возвращаемое значение:
//  Массив - Список авторабот причины обращения.
//
Функция АвтоработыПричиныОбращения(guidПричины) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставПричинОбращенийЗаказНарядов.Авторабота
	|ИЗ
	|	РегистрСведений.СоставПричинОбращенийЗаказНарядов КАК СоставПричинОбращенийЗаказНарядов
	|ГДЕ
	|	СоставПричинОбращенийЗаказНарядов.ПричинаОбращения = &ПричинаОбращения
	|	И СоставПричинОбращенийЗаказНарядов.Использование = ИСТИНА";
	
	Запрос.УстановитьПараметр("ПричинаОбращения", guidПричины);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Авторабота");
	
КонецФункции

#КонецОбласти

#КонецОбласти