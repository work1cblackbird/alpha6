
#Область СлужебныйПрограммныйИнтерфейс

// Функция начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ПараметрыПодключения - Структура
//  Команда - Строка - команда для выполнения
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, ПараметрыПодключения, Команда, ДанныеОперации) Экспорт
		
	ОбъектДрайвера = ПараметрыПодключения.ОбъектДрайвера;
	РезультатВыполнения = Неопределено;
	
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ УСТРОЙСТВАМИ 
	Если Команда = "CheckFiscalization" Тогда
		РезультатВыполнения = ФискализацияЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации); 
	ИначеЕсли Команда = "PrintText" Или Команда = "PrintQRCode" Тогда
		РезультатВыполнения = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации); 
	ИначеЕсли Команда = "OpenShift" Тогда
		РезультатВыполнения = ОткрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации); 
	ИначеЕсли Команда = "CloseShift" Тогда
		РезультатВыполнения = ЗакрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации); 
	ИначеЕсли Команда = "Encash" Тогда
		РезультатВыполнения = Инкассация(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации); 
	ИначеЕсли Команда = "OpenCashDrawer" Тогда
		РезультатВыполнения = ОткрытьДенежныйЯщик(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации); 
	ИначеЕсли Команда = "PrintReceiptCorrection" Тогда
		РезультатВыполнения = ПечатьЧекаКоррекции(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации); 
	ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" Тогда
		РезультатВыполнения = ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации); 
	ИначеЕсли Команда = "PrintXReport" Тогда
		РезультатВыполнения = ОтчетБезГашения(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации); 
	ИначеЕсли Команда = "GetLineLength" Тогда
		НачатьВызовШиринаСтроки(ОповещениеПриЗавершении, ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "AnnulCheck" Тогда
		РезультатВыполнения = АннулированиеЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "GetDataKKT" Тогда
		РезультатВыполнения = ПараметрыККТ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "GetCurrentStatus" Тогда
		РезультатВыполнения = ТекущееСостояние(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "OperationFN" Тогда
		РезультатВыполнения = ОперацияФискальногоНакопителя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "PrintCheckCopy" Тогда
		РезультатВыполнения = НапечататьКопиюЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "OpenSessionRegistrationKM" Тогда
		РезультатВыполнения = ОткрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "CloseSessionRegistrationKM" Тогда
		РезультатВыполнения = ЗакрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "RequestKM" Тогда
		РезультатВыполнения = ЗапросКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "GetProcessingKMResult" Тогда
		РезультатВыполнения = РезультатыЗапросаКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "ConfirmKM" Тогда
		РезультатВыполнения = ПодтвердитьКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ЭКВАЙРИНГОВЫМИ ТЕРМИНАЛАМИ
	ИначеЕсли Команда = "AuthorizeSales" Или Команда = "AuthorizeRefund" Или Команда = "AuthorizeVoid" Или Команда = "PayByPaymentCardWithCashWithdrawal" Тогда 
		РезультатВыполнения = ЭквайринговаяОперация(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, Команда);
	ИначеЕсли Команда = "PayElectronicCertificate" Или Команда = "ReturnElectronicCertificate" Тогда 
		РезультатВыполнения = ЭквайринговаяОперацияСЭлектроннымСертификатом(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, Команда);
	ИначеЕсли Команда = "Settlement" Тогда // Сверка итогов по картам
		РезультатВыполнения = ИтогиДняПоКартам(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "EmergencyVoid" Тогда // Аварийная отмена платежа
		РезультатВыполнения = АварийнаяОтменаОперации(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "GetCardParametrs" Тогда // Получить параметры карты 
		РезультатВыполнения = ПараметрыКарты(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "GetOperationByCards" Тогда // Получить параметры карты 
		РезультатВыполнения = ОперацииПоКартам(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ДИСПЛЕЯМИ ПОКУПАТЕЛЯ
	ИначеЕсли Команда = "GetOutputOptions" Тогда // Получить параметры вывода.
		РезультатВыполнения = ПараметрыВывода(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "DisplayText" Тогда // Вывод строк на дисплей.
		РезультатВыполнения = ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "ClearText" Тогда // Очистка дисплея.
		РезультатВыполнения = ОчиститьДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "DisplayQRCode" Тогда // Вывод QR кода на дисплей.
		РезультатВыполнения = ВывестиQRКодНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "DisplayStatus" Тогда // Вывести статус на дисплей покупателя
		РезультатВыполнения = ВывестиСтатусНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "OutputHTML" Тогда // Вывести HTML на дисплей покупателя.
		РезультатВыполнения = ВывестиHTMLНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "DisplayInfo" Тогда // Вывести информацию на дисплей покупателя
		РезультатВыполнения = ВывестиИнформациюНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ЭЛЕКТРОННЫМИ ВЕСАМИ
	ИначеЕсли Команда = "GetWeight" Тогда // Получить вес.
		РезультатВыполнения = ПолучитьВес(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "Calibrate" Тогда // Установить вес тары.
		РезультатВыполнения = Тарировать(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ВЕСАМИ C ПЕЧАТЬЮ ЭТИКЕТОК
	ИначеЕсли Команда = "UploadGoods" Тогда // Выгрузка товаров в весы с печатью этикеток.
		РезультатВыполнения = ВыгрузитьТовары(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "ClearBase" Тогда // Очистить базу весов с печатью этикеток.
		РезультатВыполнения = ОчиститьТоварыВВесах(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ТЕРМИНАЛАМИ СБОРА ДАННЫМИ
	ИначеЕсли Команда =  "UploadDirectory" Тогда // Выгрузка таблицы в терминал сбора данных.
		РезультатВыполнения = ВыгрузитьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "DownloadDocument" Тогда // Загрузка таблицы из терминала сбора данных.
		РезультатВыполнения = ЗагрузитьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "ClearTable" Тогда // Очищает загруженную ранее таблицу в терминале сбора данных.
		РезультатВыполнения = ОчиститьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЭТИКЕТОК
	ИначеЕсли Команда = "InitializePrinter" Тогда
		РезультатВыполнения = ИнициализацияПринтера(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "PrintLabels" Тогда
		РезультатВыполнения = ПечатьЭтикеток(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С RFID
	ИначеЕсли Команда = "OpenSessionRFID" Тогда // Открыть сессию RFID считывателя
		РезультатВыполнения = ОткрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "CloseSessionRFID" Тогда // Открыть сессию RFID считывателя
		РезультатВыполнения = ЗакрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	ИначеЕсли Команда = "SaveDataTagRFID" Тогда // Записать данные в метку RFID 
		РезультатВыполнения = ЗаписатьДанныеВМеткуRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	Иначе
		ОписаниеОшибки = НСтр("ru='Недопустимая команда.'"); 
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);
	КонецЕсли;                 
	
	Если РезультатВыполнения<>Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#Область НачатьПолучениеОбъектаДрайвера

// Начать получение объекта драйвера.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения
//  ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//
Процедура НачатьПолучениеОбъектаДрайвера(ОповещениеПриЗавершении, ПараметрыПодключения) Экспорт
	
	Если ПараметрыПодключения.ИдентификаторОбъекта = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	ОбъектДрайвера = МенеджерОборудованияКлиент.ОбъектДрайвераИзКэша(ПараметрыПодключения.ИдентификаторОбъекта);
	Если ОбъектДрайвера <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ОбъектДрайвера);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Для продолжения работы требуется установка внешней компоненты ""%1"".'"), 
		ПараметрыПодключения.Наименование); 
	
	ПараметрыОповещения = Новый Структура("ОповещениеПриЗавершении, ДанныеДрайвера", ОповещениеПриЗавершении, ПараметрыПодключения);
	Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	Если ПараметрыПодключения.ПодключениеИзМакета Тогда
		Если Не ПараметрыПодключения.МакетДоступен Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Неопределено);
			Возврат;
		КонецЕсли;
		Если МенеджерОборудованияКлиент.ДопустимаУстановкаКомпоненты(ПараметрыПодключения.ИмяМакетаДрайвера) Тогда
			Параметры = ВнешниеКомпонентыБПОКлиент.ПараметрыПодключения();      
			Параметры.ПредложитьЗагрузить  = Ложь;
			Параметры.ПредложитьУстановить = Истина;
			Параметры.Кэшировать           = Истина;
			Параметры.ТекстПояснения       = ТекстСообщения;
			ВнешниеКомпонентыБПОКлиент.ПодключитьКомпонентуИзМакета(Оповещение, ПараметрыПодключения.ИдентификаторОбъекта, ПараметрыПодключения.ИмяМакетаДрайвера, Параметры);
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для компоненты %1 не предусмотрена работа в web-клиенте.'"), 
				ПараметрыПодключения.Наименование);
			ОповеститьОбОшибкеПодключения(ТекстСообщения);
			Результат = ВнешниеКомпонентыБПОКлиент.РезультатПодключения();
			Результат.Подключено     = Ложь;
			Результат.ОписаниеОшибки = ТекстСообщения;
			ВыполнитьОбработкуОповещения(Оповещение, Результат);
			Возврат;
		КонецЕсли;
	ИначеЕсли ПараметрыПодключения.ПодключениеЛокальноПоИдентификатору Тогда
		ВнешниеКомпонентыБПОКлиент.ПодключитьКомпонентуИзРеестраWindows(Оповещение,  ПараметрыПодключения.ИдентификаторОбъекта);
	Иначе
		Параметры = ВнешниеКомпонентыБПОКлиент.ПараметрыПодключения();
		Параметры.Кэшировать     = Ложь;
		Параметры.ТекстПояснения = ТекстСообщения;
		ВнешниеКомпонентыБПОКлиент.ПодключитьКомпоненту(Оповещение,  ПараметрыПодключения.ИдентификаторОбъекта, Неопределено, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеОбъектаДрайвераЗавершение(РезультатПодключения, ДополнительныеПараметры) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Если РезультатПодключения.Подключено Тогда 
		ОбъектДрайвера = РезультатПодключения.ПодключаемыйМодуль;
		ПодключаемоеОборудование = МенеджерОборудованияКлиент.ПодключаемоеОборудование();
		ПодключаемоеОборудование.ДрайверыОборудования.Вставить(ДополнительныеПараметры.ДанныеДрайвера.ИдентификаторОбъекта, ОбъектДрайвера);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ОбъектДрайвера);
	
КонецПроцедуры

#КонецОбласти

#Область НачатьПолучениеОписанияДрайвера

// Начинает получение описания драйвера
// 
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения
//  ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//
Процедура НачатьПолучениеОписанияДрайвера(ОповещениеПриЗавершении, ПараметрыПодключения) Экспорт
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	Контекст.Вставить("Параметры"              , ПараметрыПодключения.Параметры);
	Контекст.Вставить("ОписаниеДрайвера"       , МенеджерОборудованияКлиентСервер.ПараметрыОписанияДрайвера());
	Контекст.Вставить("ОбъектДрайвера"         , Неопределено);
	Контекст.Вставить("Метод"                  , "");
	
	Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОписанияДрайвера_ПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, Контекст);
	НачатьПолучениеОбъектаДрайвера(Оповещение, ПараметрыПодключения);
	
КонецПроцедуры

// Установить шаблон локализации драйвера
// 
// Параметры:
//  ОбъектДрайвера - ВнешняяКомпонента
//  Контекст - Структура
//
Процедура НачатьПолучениеОписанияДрайвера_ПолучениеОбъектаДрайвераЗавершение(ОбъектДрайвера, Контекст) Экспорт
	
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	Если ОбъектДрайвера = Неопределено Тогда
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатВыполнения = ОшибкаЗагрузкиДрайвера(ПараметрыПодключения);
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст.ОбъектДрайвера = ОбъектДрайвера;
	Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОписанияДрайвера_УстановитьЛокализациюЗавершение", ЭтотОбъект, Контекст);
	Если ПустаяСтрока(ПараметрыПодключения.ШаблонЛокализации) Тогда   
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Иначе
		Попытка                         
			ТекущийЯзык = ТекущийЯзык();
			КодЯзыкаПользователя = ?(ТипЗнч(ТекущийЯзык) = Тип("Строка"), ТекущийЯзык, ТекущийЯзык.КодЯзыка); 
			ОбъектДрайвера.НачатьВызовУстановитьЛокализацию(Оповещение, КодЯзыкаПользователя, ПараметрыПодключения.ШаблонЛокализации);
		Исключение
			Результат = ОшибкаВызоваДрайвера("УстановитьЛокализацию",  ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияБПОКлиент.ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПолучениеОписания(), Результат.ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Оповещение, Истина);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Завершает получение описания драйвера
// 
// Параметры:
//  ОбъектДрайвера - ВнешняяКомпонента
//  Контекст - Структура:
//   * ОповещениеПриЗавершении - ОписаниеОповещения
//   * ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//   * Параметры - Структура
//   * ОписаниеДрайвера - см. МенеджерОборудованияКлиентСервер.ПараметрыОписанияДрайвера
//
Процедура НачатьПолучениеОписанияДрайвера_УстановитьЛокализациюЗавершение(РезультатВызова, Контекст) Экспорт
	
	Если НЕ РезультатВызова Тогда
		Оповещение = Новый ОписаниеОповещения("ОписаниеОшибкиЗавершение", ЭтотОбъект, Контекст);
		Контекст.Метод = "УстановитьЛокализацию";
		ОписаниеОшибки = "";
		Контекст.ОбъектДрайвера.НачатьВызовПолучитьОшибку(Оповещение, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеДрайвера = Контекст.ОписаниеДрайвера;
	Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОписанияДрайвера_ПолучитьОписаниеЗавершение", ЭтотОбъект, Контекст); 
	Попытка
		Контекст.ОбъектДрайвера.НачатьВызовПолучитьОписание(Оповещение, ОписаниеДрайвера.ОписаниеДрайвераXML);
	Исключение                              
		РевизияИнтерфейса = 2005;
		Контекст.ОбъектДрайвера.НачатьВызовПолучитьОписание(Оповещение, ОписаниеДрайвера.НаименованиеДрайвера, ОписаниеДрайвера.ОписаниеДрайвера, ОписаниеДрайвера.ТипОборудования,
			РевизияИнтерфейса, ОписаниеДрайвера.ИнтеграционныйКомпонент, ОписаниеДрайвера.ОсновнойДрайверУстановлен, ОписаниеДрайвера.URLЗагрузкиДрайвера);
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияДрайвера_ПолучитьОписаниеЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	ОписаниеДрайвера = Контекст.ОписаниеДрайвера;
	Если ПараметрыВызова.Количество() > 1 И Не СтрНачинаетсяС(ПараметрыВызова[0], "<?")  Тогда  
		// WEB клиент не генерирует исключение при вызове метода с неверным количество параметров.
		ОписаниеДрайвера.НаименованиеДрайвера      = ПараметрыВызова[0]; // НаименованиеДрайвера
		ОписаниеДрайвера.ОписаниеДрайвера          = ПараметрыВызова[1]; // ОписаниеДрайвера
		ОписаниеДрайвера.ТипОборудования           = ПараметрыВызова[2]; // ТипОборудования
		ОписаниеДрайвера.РевизияИнтерфейса         = ПараметрыВызова[3]; // РевизияИнтерфейса
		ОписаниеДрайвера.ИнтеграционныйКомпонент   = ПараметрыВызова[4]; // ИнтеграционныйКомпонент
		ОписаниеДрайвера.ОсновнойДрайверУстановлен = ПараметрыВызова[5]; // ОсновнойДрайверУстановлен
		ОписаниеДрайвера.URLЗагрузкиДрайвера       = ПараметрыВызова[6]; // URLЗагрузкиДрайвера
		
		Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОписанияДрайвера_ПолучитьНомерВерсииЗавершение", ЭтотОбъект, Контекст);
		Попытка
			Контекст.ОбъектДрайвера.НачатьВызовПолучитьНомерВерсии(Оповещение);
		Исключение
			Результат = ОшибкаВызоваДрайвера("ПолучитьНомерВерсии",  ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияБПОКлиент.ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПолучениеОписания(), Результат.ОписаниеОшибки);
			Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
			Иначе
				ОбщегоНазначенияБПОКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
			КонецЕсли;
		КонецПопытки;
	Иначе
		ОписаниеДрайвераXML = СокрЛП(ПараметрыВызова[0]);
		Если Не СтрНачинаетсяС(ОписаниеДрайвераXML, "<?") Тогда
			Результат = ОшибкаВызоваДрайвера("ПолучитьОписание", 
				СтрШаблон(НСтр("ru = 'Ожидается описание драйвера в виде строки XML в соответствии с требованиями разработки драйверов.
					|Содержится: %1'"), ОписаниеДрайвераXML));
			ОбщегоНазначенияБПОКлиент.ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПолучениеОписания(), Результат.ОписаниеОшибки);
			Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
			Иначе
				ОбщегоНазначенияБПОКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		ОписаниеДрайвераПараметры = МенеджерОборудованияКлиент.ПолучитьОписаниеДрайвера(ОписаниеДрайвераXML); // ОписаниеДрайвераXML
		ЗаполнитьЗначенияСвойств(ОписаниеДрайвера, ОписаниеДрайвераПараметры); 
		
		Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОписанияДрайвера_ПолучитьРевизиюИнтерфейсаЗавершение", ЭтотОбъект, Контекст);
		Попытка
			Контекст.ОбъектДрайвера.НачатьВызовПолучитьРевизиюИнтерфейса(Оповещение);
		Исключение
			Результат = ОшибкаВызоваДрайвера("ПолучитьРевизиюИнтерфейса",  ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияБПОКлиент.ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПолучениеОписания(), Результат.ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияДрайвера_ПолучитьНомерВерсииЗавершение(ВерсияДрайвера, ПараметрыВызова, Контекст) Экспорт
	
	ОписаниеДрайвера = Контекст.ОписаниеДрайвера;
	ОписаниеДрайвера.ВерсияДрайвера = ВерсияДрайвера;
	
	НачатьПолучениеОписанияДрайвера_ПолучитьШаблонЛокализации(Контекст);
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияДрайвера_ПолучитьРевизиюИнтерфейсаЗавершение(РевизияИнтерфейса, ПараметрыВызова, Контекст) Экспорт
	
	ОписаниеДрайвера = Контекст.ОписаниеДрайвера;
	ОписаниеДрайвера.РевизияИнтерфейса = РевизияИнтерфейса;
	
	НачатьПолучениеОписанияДрайвера_ПолучитьШаблонЛокализации(Контекст);
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияДрайвера_ПолучитьШаблонЛокализации(Контекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОписанияДрайвера_ПолучитьШаблонЛокализацииЗавершение", ЭтотОбъект, Контекст);
	ОписаниеДрайвера = Контекст.ОписаниеДрайвера;
	Если ОписаниеДрайвера.РевизияИнтерфейса >= 4000 И ОписаниеДрайвера.ПоддерживаетсяЛокализация Тогда   
		ШаблонЛокализации = "";
		Попытка
			Контекст.ОбъектДрайвера.НачатьВызовПолучитьШаблонЛокализации(Оповещение, ШаблонЛокализации);
		Исключение
			Результат = ОшибкаВызоваДрайвера("ПолучитьШаблонЛокализации",  ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияБПОКлиент.ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПолучениеОписания(), Результат.ОписаниеОшибки);
			Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
			Иначе
				ОбщегоНазначенияБПОКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
			КонецЕсли;
		КонецПопытки;
	Иначе
		ПараметрыВызова = Новый Массив();
		ПараметрыВызова.Добавить("");
		НачатьПолучениеОписанияДрайвера_ПолучитьШаблонЛокализацииЗавершение(Истина, ПараметрыВызова, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияДрайвера_ПолучитьШаблонЛокализацииЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	Если НЕ РезультатВызова Тогда
		Оповещение = Новый ОписаниеОповещения("ОписаниеОшибкиЗавершение", ЭтотОбъект, Контекст);
		Контекст.Метод = "ПолучитьШаблонЛокализации";
		ОписаниеОшибки = "";
		Контекст.ОбъектДрайвера.НачатьВызовПолучитьОшибку(Оповещение, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.ОписаниеДрайвера.ШаблонЛокализации = ПараметрыВызова[0];
	
	ПараметрыДрайвера = "";
	Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОписанияДрайвера_УстановитьТипОборудованияЗавершение", ЭтотОбъект, Контекст);
	Попытка
		ПараметрыПодключения = Контекст.ПараметрыПодключения;
		Контекст.ОбъектДрайвера.НачатьВызовУстановитьПараметр(Оповещение, "EquipmentType", ПараметрыПодключения.ТипОборудованияИмя); // ТипОборудования  
	Исключение
		Результат = ОшибкаВызоваДрайвера("УстановитьТипОборудования",  ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияБПОКлиент.ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПолучениеОписания(), Результат.ОписаниеОшибки);
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
		Иначе
			ОбщегоНазначенияБПОКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияДрайвера_УстановитьТипОборудованияЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	ПараметрыДрайвера = "";
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеОписанияДрайвера_ПолучитьПараметрыЗавершение", ЭтотОбъект, Контекст);
	Попытка
		Контекст.ОбъектДрайвера.НачатьВызовПолучитьПараметры(ОповещениеМетода, ПараметрыДрайвера);
	Исключение
		Результат = ОшибкаВызоваДрайвера("ПолучитьПараметры",  ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияБПОКлиент.ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПолучениеОписания(), Результат.ОписаниеОшибки);
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
		Иначе
			ОбщегоНазначенияБПОКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияДрайвера_ПолучитьПараметрыЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	Если НЕ РезультатВызова Тогда
		Оповещение = Новый ОписаниеОповещения("ОписаниеОшибкиЗавершение", ЭтотОбъект, Контекст);
		Контекст.Метод = "ПолучитьПараметры";
		ОписаниеОшибки = "";
		Контекст.ОбъектДрайвера.НачатьВызовПолучитьОшибку(Оповещение, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеДрайвера = Контекст.ОписаниеДрайвера;
	ОписаниеДрайвера.ПараметрыДрайвера = ПараметрыВызова[0];
	
	ДополнительныеДействия = "";
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеОписанияДрайвера_ПолучитьДополнительныеДействияЗавершение", ЭтотОбъект, Контекст);
	Попытка                                    
		Контекст.ОбъектДрайвера.НачатьВызовПолучитьДополнительныеДействия(ОповещениеМетода, ДополнительныеДействия);
	Исключение
		Результат = ОшибкаВызоваДрайвера("ПолучитьДополнительныеДействия",  ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияБПОКлиент.ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПолучениеОписания(), Результат.ОписаниеОшибки);
		ПараметрыВызова = Новый Массив();
		ПараметрыВызова.Добавить("");
		НачатьПолучениеОписанияДрайвера_ПолучитьДополнительныеДействияЗавершение(Истина, ПараметрыВызова, Контекст);
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияДрайвера_ПолучитьДополнительныеДействияЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	Если НЕ РезультатВызова Тогда
		Оповещение = Новый ОписаниеОповещения("ОписаниеОшибкиЗавершение", ЭтотОбъект, Контекст);
		Контекст.Метод = "ПолучитьДополнительныеДействия";
		ОписаниеОшибки = "";
		Контекст.ОбъектДрайвера.НачатьВызовПолучитьОшибку(Оповещение, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеДрайвера = Контекст.ОписаниеДрайвера;
	ОписаниеДрайвера.ДополнительныеДействия = ПараметрыВызова[0];
	ОписаниеДрайвера.Установлен = Истина;
	
	Если Контекст.ПараметрыПодключения.Свойство("КоличествоПодключенных") Тогда
		ОписаниеДрайвера.Вставить("КоличествоПодключенных",  Контекст.ПараметрыПодключения.КоличествоПодключенных);
	КонецЕсли;
	
	Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = РезультатОперацииНаОборудовании(Истина);
		Результат.Вставить("ОписаниеДрайвера", ОписаниеДрайвера);
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НачатьУстановкуПараметров

// Процедура устанавливает параметры драйвера.
// 
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//
Процедура НачатьУстановкуПараметров(ОповещениеПриЗавершении, ОбъектДрайвера, ПараметрыПодключения) Экспорт
	
	ВремПараметры = Новый Структура();
	// Предопределенный параметр с указанием типа драйвера.
	ВремПараметры.Вставить("P_EquipmentType", ПараметрыПодключения.ТипОборудованияИмя); // ТипОборудования
	
	Для Каждого Параметр Из ПараметрыПодключения.Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ВремПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("Параметры", ВремПараметры);
	Контекст.Вставить("ИмяПараметра", "");
	Контекст.Вставить("Установлено", Новый Массив());
	Контекст.Вставить("ОбъектДрайвера", ОбъектДрайвера);
	НачатьУстановкуПараметровРекурсивно(Истина, Неопределено, Контекст);
	
КонецПроцедуры

// Процедура завершения установки параметров драйвера.
//
Процедура НачатьУстановкуПараметровРекурсивно(РезультатВыполнения, ПараметрыВызова, Контекст) Экспорт
	
	Параметры = Контекст.Параметры;
	Если Параметры.Количество()=0 Тогда
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Установлено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения Тогда
		Контекст.Установлено.Добавить(Контекст.ИмяПараметра);
	КонецЕсли;
	
	Для Каждого Параметр Из Параметры Цикл
		ЗначениеПараметра     = Параметр.Значение;
		Контекст.ИмяПараметра = Параметр.Ключ;
		ОповещениеМетода      = Новый ОписаниеОповещения("НачатьУстановкуПараметровРекурсивно", ЭтотОбъект, Контекст);
		Параметры.Удалить(Контекст.ИмяПараметра);
		Контекст.ОбъектДрайвера.НачатьВызовУстановитьПараметр(ОповещениеМетода, Сред(Контекст.ИмяПараметра, 3), ЗначениеПараметра);
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НачатьТестУстройства

// Выполнение тестирование устройства.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения
//  ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//  ПараметрыВыполнения - Структура
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, ПараметрыПодключения, ПараметрыВыполнения) Экспорт
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	Контекст.Вставить("Параметры"              , ПараметрыПодключения.Параметры);
	Контекст.Вставить("ПараметрыВыполнения"    , ПараметрыВыполнения);
	
	Оповещение = Новый ОписаниеОповещения("НачатьТестУстройства_ПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, Контекст);
	НачатьПолучениеОбъектаДрайвера(Оповещение, ПараметрыПодключения);
	
КонецПроцедуры

// Завершает получение объекта драйвера, при выполнении теста устройства
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  Контекст - Структура
//
Процедура НачатьТестУстройства_ПолучениеОбъектаДрайвераЗавершение(ОбъектДрайвера, Контекст) Экспорт 
	
	Если ОбъектДрайвера = Неопределено Тогда
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатВыполнения = ОшибкаЗагрузкиДрайвера(Контекст.ПараметрыПодключения);
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст.ПараметрыПодключения.Вставить("ОбъектДрайвера", ОбъектДрайвера);
	ОповещениеПриУстановкеПараметров = Новый ОписаниеОповещения("НачатьТестУстройства_УстановкаПараметровЗавершение", ЭтотОбъект, Контекст);
	НачатьУстановкуПараметров(ОповещениеПриУстановкеПараметров, ОбъектДрайвера, Контекст.ПараметрыПодключения);
	
КонецПроцедуры

// Завершает установку параметров, при выполнении теста устройства
// 
// Параметры:
//  Результат - Структура
//  Контекст - Структура:
//   * ОповещениеПриЗавершении - ОписаниеОповещения
//   * ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//   * Параметры - Структура
//   * ОписаниеДрайвера - см. МенеджерОборудованияКлиентСервер.ПараметрыОписанияДрайвера
//
Процедура НачатьТестУстройства_УстановкаПараметровЗавершение(Результат, Контекст) Экспорт  
	
	Попытка
		РезультатТеста       = "";
		АктивированДемоРежим = "";
		Оповещение = Новый ОписаниеОповещения("НачатьТестУстройства_Завершение", ЭтотОбъект, Контекст);
		ОбъектДрайвера = Контекст.ПараметрыПодключения.ОбъектДрайвера;
		
		ОбъектДрайвера.НачатьВызовТестУстройства(Оповещение, РезультатТеста, АктивированДемоРежим);     
	
	Исключение
		Ошибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ТестУстройства");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьТестУстройства_Завершение(Результат, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Результат);
		РезультатВыполнения.Вставить("РезультатВыполнения" , ПараметрыВызова[0]);  
		РезультатВыполнения.Вставить("АктивированДемоРежим", ПараметрыВызова[1]);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НачатьПодключениеУстройства

// Функция начинает подключение устройства.
//
Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ПараметрыПодключения) Экспорт
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ПараметрыПодключения",    ПараметрыПодключения);
	Контекст.Вставить("ОписаниеДрайвера",        МенеджерОборудованияКлиентСервер.ПараметрыОписанияДрайвера());
	Контекст.Вставить("ОбъектДрайвера",          Неопределено);
	Контекст.Вставить("Метод", "");
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПолучениеОбъектаЗавершение", ЭтотОбъект, Контекст);
	НачатьПолучениеОбъектаДрайвера(Оповещение, ПараметрыПодключения);
	
КонецПроцедуры

Процедура НачатьПодключениеУстройства_ПолучениеОбъектаЗавершение(ОбъектДрайвера, Контекст) Экспорт
	
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	Если ОбъектДрайвера = Неопределено Тогда
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатВыполнения = ОшибкаЗагрузкиДрайвера(ПараметрыПодключения);
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст.ОбъектДрайвера = ОбъектДрайвера;
	ПараметрыПодключения.ОбъектДрайвера = ОбъектДрайвера;
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_УстановитьТипОборудованияЗавершение", ЭтотОбъект, Контекст);
	ОбъектДрайвера.НачатьВызовУстановитьПараметр(Оповещение, "EquipmentType", ПараметрыПодключения.ТипОборудованияИмя);
	
КонецПроцедуры

Процедура НачатьПодключениеУстройства_УстановитьТипОборудованияЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПолучениеОписанияЗавершение", ЭтотОбъект, Контекст);
	НачатьПолучениеОписанияДрайвера(Оповещение, Контекст.ПараметрыПодключения);
	
КонецПроцедуры

Процедура НачатьПодключениеУстройства_ПолучениеОписанияЗавершение(РезультатВызова, Контекст) Экспорт
	
	Если НЕ РезультатВызова.Результат Тогда
		Оповещение = Новый ОписаниеОповещения("ОписаниеОшибкиЗавершение", ЭтотОбъект, Контекст);
		Контекст.Метод = "ПолучениеОписания";
		ОписаниеОшибки = "";
		Контекст.ОбъектДрайвера.НачатьВызовПолучитьОшибку(Оповещение, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ОбъектДрайвера       = Контекст.ОбъектДрайвера;
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	
	Контекст.ОписаниеДрайвера = РезультатВызова.ОписаниеДрайвера;
	ПараметрыПодключения.РевизияИнтерфейса = Контекст.ОписаниеДрайвера.РевизияИнтерфейса;
	
	Если ПустаяСтрока(ПараметрыПодключения.РевизияИнтерфейса) Или ПараметрыПодключения.РевизияИнтерфейса = 0 Тогда
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Ревизия интерфейса драйвера не определена.'");
			РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_УстановкаПараметровЗавершение", ЭтотОбъект, Контекст);
	НачатьУстановкуПараметров(Оповещение, ОбъектДрайвера, ПараметрыПодключения);
	
КонецПроцедуры

Процедура НачатьПодключениеУстройства_УстановкаПараметровЗавершение(УстановленныеПараметры, Контекст) Экспорт
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПодключитьЗавершение", ЭтотОбъект, Контекст);
		Контекст.ОбъектДрайвера.НачатьВызовПодключить(Оповещение, Контекст.ПараметрыПодключения.ИДУстройства);
	Исключение
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = ОшибкаВызоваДрайвера("Подключить",  ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПодключениеУстройства_ПодключитьЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	Если НЕ РезультатВызова Тогда
		Оповещение = Новый ОписаниеОповещения("ОписаниеОшибкиЗавершение", ЭтотОбъект, Контекст);
		Контекст.Метод = "Подключить";
		ОписаниеОшибки = "";
		Контекст.ОбъектДрайвера.НачатьВызовПолучитьОшибку(Оповещение, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ОбъектДрайвера       = Контекст.ОбъектДрайвера;
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	ПараметрыПодключения.ИДУстройства = ПараметрыВызова[0];
	
	Если ПараметрыПодключения.ТипыОборудования.ККТ 
		Или ПараметрыПодключения.ТипыОборудования.ПринтерЧеков
		Или ПараметрыПодключения.ТипыОборудования.ФискальныйРегистратор Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ШиринаСтрокиЗавершение", ЭтотОбъект, Контекст);
		НачатьВызовШиринаСтроки(Оповещение, ОбъектДрайвера, ПараметрыПодключения, Неопределено) 
	Иначе
		ПараметрыВызова = Новый Массив();
		НачатьПодключениеУстройства_ШиринаСтрокиЗавершение(Истина, ПараметрыВызова, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеУстройства_ШиринаСтрокиЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	ОбъектДрайвера       = Контекст.ОбъектДрайвера;
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	Если ПараметрыПодключения.ТипыОборудования.ЭквайринговыйТерминал Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПараметрыТерминалаЗавершение", ЭтотОбъект, Контекст);
		НачатьВызовПараметрыТерминала(Оповещение, Контекст.ОбъектДрайвера, ПараметрыПодключения, Неопределено); 
	Иначе
		ПараметрыВызова = Новый Массив();
		НачатьПодключениеУстройства_ПараметрыТерминалаЗавершение(Истина, ПараметрыВызова, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеУстройства_ПараметрыТерминалаЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	ОбъектДрайвера       = Контекст.ОбъектДрайвера;
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	Если ПараметрыПодключения.ТипыОборудования.ДисплейПокупателя Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПараметрыВыводаЗавершение", ЭтотОбъект, Контекст);
		НачатьВызовПараметрыВывода(Оповещение, ОбъектДрайвера, ПараметрыПодключения, Неопределено); 
	Иначе
		ПараметрыВызова = Новый Массив();
		НачатьПодключениеУстройства_ПараметрыВыводаЗавершение(Истина, ПараметрыВызова, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеУстройства_ПараметрыВыводаЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	Если ПараметрыПодключения.ТипыОборудования.СканерШтрихкода Тогда
		ПараметрыПодключения.ИменаСобытий.Добавить("Штрихкод");       //@NON-NLS-1 @NON-NLS-2
		ПараметрыПодключения.ИменаСобытий.Добавить("ШтрихкодBase64"); //@NON-NLS-1 @NON-NLS-2
		ПараметрыПодключения.ИменаСобытий.Добавить("Barcode"); 
		ПараметрыПодключения.ИменаСобытий.Добавить("BarcodeBase64");
	КонецЕсли;
	
	Если ПараметрыПодключения.ТипыОборудования.СчитывательМагнитныхКарт Тогда
		ПараметрыПодключения.ИменаСобытий.Добавить("ДанныеКарты");       //@NON-NLS-1 @NON-NLS-2
		ПараметрыПодключения.ИменаСобытий.Добавить("ДанныеКартыBase64"); //@NON-NLS-1 @NON-NLS-2
		ПараметрыПодключения.ИменаСобытий.Добавить("TracksData"); 
		ПараметрыПодключения.ИменаСобытий.Добавить("TrackDataBase64");
	КонецЕсли;
		
	Если ПараметрыПодключения.ТипыОборудования.СчитывательRFID Тогда
		ПараметрыПодключения.ИменаСобытий.Добавить("RFID");
	КонецЕсли;
		
	Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = РезультатОперацииНаОборудовании(Истина);
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДрайверПодключениеОтключение

// Функция начинает отключение устройства.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения
//  ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ПараметрыПодключения) Экспорт
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	
	Оповещение = Новый ОписаниеОповещения("НачатьОтключениеУстройства_Завершение", ЭтотОбъект, Контекст);
	Попытка
		ОбъектДрайвера = ПараметрыПодключения.ОбъектДрайвера;
		ОбъектДрайвера.НачатьВызовОтключить(Оповещение, ПараметрыПодключения.ИДУстройства) 
	Исключение
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = ОшибкаВызоваДрайвера("Отключить",  ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьОтключениеУстройства_Завершение(РезультатВыполнения, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НачатьВыполнитьДополнительноеДействие

// Выполнение дополнительного действия для устройства.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения
//  ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//  ПараметрыВыполнения - Структура
//
Процедура НачатьВыполнитьДополнительноеДействие(ОповещениеПриЗавершении, ПараметрыПодключения, ПараметрыВыполнения) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("Параметры"              , ПараметрыПодключения.Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыВыполнения"    , ПараметрыВыполнения);
	
	Оповещение = Новый ОписаниеОповещения("НачатьВыполнитьДополнительноеДействие_ПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПолучениеОбъектаДрайвера(Оповещение, ПараметрыПодключения);
	
КонецПроцедуры

// Завершение получения объекта драйвера при выполнении дополнительного действия
// 
// Параметры:
//  ОбъектДрайвера - ВнешняяКомпонента
//  ДополнительныеПараметры - Структура:
//   * ОповещениеПриЗавершении - ОписаниеОповещения
//   * ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//   * Параметры - Структура
//   * ОписаниеДрайвера - см. МенеджерОборудованияКлиентСервер.ПараметрыОписанияДрайвера
//
Процедура НачатьВыполнитьДополнительноеДействие_ПолучениеОбъектаДрайвераЗавершение(ОбъектДрайвера, ДополнительныеПараметры) Экспорт 
	
	Если ОбъектДрайвера = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
										|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ДополнительныеПараметры.ПараметрыПодключения.Наименование);
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.ПараметрыПодключения.Вставить("ОбъектДрайвера", ОбъектДрайвера);
		ОповещениеПриУстановкеПараметров = Новый ОписаниеОповещения("НачатьВыполнитьДополнительноеДействие_УстановкаПараметровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнитьДополнительноеДействие_УстановкаПараметровЗавершение(Результат, ДополнительныеПараметры) Экспорт  
	
	Попытка
		ИмяДействия = ДополнительныеПараметры.ПараметрыВыполнения.ИмяДействия;
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнитьДополнительноеДействие_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера = ДополнительныеПараметры.ПараметрыПодключения.ОбъектДрайвера;
		ОбъектДрайвера.НачатьВызовВыполнитьДополнительноеДействие(Оповещение, ИмяДействия );
	Исключение
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ВыполнитьДополнительноеДействие");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьВыполнитьДополнительноеДействие_Завершение(Результат, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Результат);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		ОбъектДрайвера = ДополнительныеПараметры.ПараметрыПодключения.ОбъектДрайвера;
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнитьДополнительноеДействие_ПолучитьОшибку", ЭтотОбъект, ДополнительныеПараметры);
		ОписаниеОшибки = "";
		ОбъектДрайвера.НачатьВызовПолучитьОшибку(Оповещение, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнитьДополнительноеДействие_ПолучитьОшибку(Результат, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ПараметрыВызова[0]);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработатьСобытие 

// Функция осуществляет обработку внешних событий подключаемого оборудования.
//
// Параметры:
//  ОбъектДрайвера - ВнешняяКомпонента
//  ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//  Событие - Строка
//  Данные - Строка
//
// Возвращаемое значение:
//  Структура.
Функция ОбработатьСобытие(ОбъектДрайвера, ПараметрыПодключения, Событие, Данные) Экспорт
	
	Если Событие = "Штрихкод" Или Событие = "Barcode" Тогда
		РезультатОбработки = ПодключаемоеОборудованиеДрайверКлиент.ОбработатьСобытиеШтрихкод(Данные);
	ИначеЕсли Событие = "ШтрихкодBase64" Или Событие = "BarcodeBase64" Тогда
		РезультатОбработки = ПодключаемоеОборудованиеДрайверКлиент.ОбработатьСобытиеШтрихкод64(Данные);
	ИначеЕсли Событие = "ДанныеКарты" Или Событие = "TracksData" Тогда
		РезультатОбработки = ПодключаемоеОборудованиеДрайверКлиент.ОбработатьСобытиеДанныеКарты(ПараметрыПодключения, Данные);
	ИначеЕсли Событие = "RFID" Тогда
		РезультатОбработки = ОбработатьСобытиеRFID(ПараметрыПодключения, Событие, Данные);
	Иначе
		РезультатОбработки = Новый Структура();
		РезультатОбработки.Вставить("Результат", Ложь);
		РезультатОбработки.Вставить("Событие"  , "");
		РезультатОбработки.Вставить("Данные"   , Данные);
		Возврат РезультатОбработки;
	КонецЕсли;           
	
	РезультатОбработки.Вставить("ИдентификаторУстройства", ПараметрыПодключения.ИдентификаторУстройства);
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

Функция ИмяСобытияПолучениеОписания() Экспорт
	Возврат НСтр("ru = 'Подключаемое оборудование, получение описания.'");
КонецФункции

#КонецОбласти

Процедура ОписаниеОшибкиЗавершение(КодОшибки, ПараметрыВызова, Контекст) Экспорт
	
	ОписаниеОшибкиДрайвера = "";
	Если ПараметрыВызова.Количество() > 0 Тогда
		ОписаниеОшибкиДрайвера = ПараметрыВызова[0];
	КонецЕсли;
	
	Результат = ОшибкаВызоваДрайвера(Контекст.Метод, СтрШаблон("%1: %2", Строка(КодОшибки), ОписаниеОшибкиДрайвера));
	Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	Иначе
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОшибкуДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера="", ИмяМетода = "")
	
	Контекст = Новый Структура();
	Контекст.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
	Контекст.Метод = ИмяМетода;
	Оповещение = Новый ОписаниеОповещения("ОписаниеОшибкиЗавершение", ЭтотОбъект, Контекст);
	ОписаниеОшибки = "";
	ОбъектДрайвера.НачатьВызовПолучитьОшибку(Оповещение, ОписаниеОшибки);
	
КонецФункции

// Конструктор результата выполнения операции на оборудовании
// 
// Параметры:
//  Результат - Булево
//  ОписаниеОшибки - Строка
//
// Возвращаемое значение:
//  Структура:
//   * Результат - Булево
//   * ОписаниеОшибки - Строка
//   * ОшибкаЗагрузки - Булево
//
Функция РезультатОперацииНаОборудовании(Результат = Ложь, ОписаниеОшибки = Неопределено); 
	
	Возврат ПодключаемоеОборудованиеДрайверКлиент.РезультатОперацииНаОборудовании(Результат, ОписаниеОшибки);
	
КонецФункции

Функция ОшибкаЗагрузкиДрайвера(ПараметрыПодключения, ОписаниеОшибки = "") Экспорт
	
	Возврат ПодключаемоеОборудованиеДрайверКлиент.ОшибкаЗагрузкиДрайвера(ПараметрыПодключения, ОписаниеОшибки);
	
КонецФункции

Функция ОшибкаВызоваДрайвера(МетодДрайвера = Неопределено, ОписаниеОшибки = Неопределено)
	
	Возврат ПодключаемоеОборудованиеДрайверКлиент.ОшибкаВызоваДрайвера(МетодДрайвера, ОписаниеОшибки);
	
КонецФункции

#Область ФискальныеУстройства

// Получает ширину строки в символах.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Процедура НачатьВызовШиринаСтроки(ОповещениеПриЗавершении, ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если ПараметрыПодключения.Свойство("ШиринаСтроки") И ПараметрыПодключения.ШиринаСтроки > 0 Тогда
		РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		РезультатВыполнения.Вставить("ШиринаСтроки", ПараметрыПодключения.ШиринаСтроки);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
	Попытка
		Контекст = Новый Структура();
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Контекст.Вставить("ПараметрыПодключения",    ПараметрыПодключения);
		Контекст.Вставить("ДанныеОперации",          ДанныеОперации);
		Контекст.Вставить("ОбъектДрайвера",          ОбъектДрайвера);
		
		Оповещение = Новый ОписаниеОповещения("НачатьВызовПолучитьШиринуСтрокиЗавершение", ЭтотОбъект, Контекст);
		ОбъектДрайвера.НачатьВызовПолучитьШиринуСтроки(Оповещение, ПараметрыПодключения.ИДУстройства, 0);
	Исключение   
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьШиринуСтроки", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры

// Завершает выполнение операции получения ширины строки
// Параметры:
//  РезультатВызова - Структура
//  ПараметрыВызова - Структура
//  Контекст - Структура
Процедура НачатьВызовПолучитьШиринуСтрокиЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	Если РезультатВызова.Значение Тогда
		Контекст.ПараметрыПодключения.ШиринаСтроки = ПараметрыВызова[1];
		РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		РезультатВыполнения.Вставить("ШиринаСтроки", РезультатВызова.Параметры[1]);
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ПолучитьОшибкуДрайвера(Контекст.ОповещениеПриЗавершении, Контекст.ОбъектДрайвера, "ПолучитьШиринуСтроки");
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет фискализацию чека.
//                                             
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция ФискализацияЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	
	Если ПараметрыПодключения.ТипыОборудования.ПринтерЧеков Тогда
		
		РезультатВыполнения = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	ИначеЕсли ПараметрыПодключения.ТипыОборудования.ККТ Тогда
		
		Если ПараметрыПодключения.РевизияИнтерфейса >= 3004  Тогда
			ТекущийСтатус = МенеджерОборудованияКлиент.ПроверкаКодаМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
			// Если есть текущая проверка КМ 
			Если НЕ ПустаяСтрока(ТекущийСтатус.ИдентификаторЗапроса) Тогда
				Попытка
					РезультатВызова = ОбъектДрайвера.ПодтвердитьКМ(ПараметрыПодключения.ИДУстройства, ТекущийСтатус.ИдентификаторЗапроса, 0); // Структура
					МенеджерОборудованияКлиент.УстановитьПроверкуКодаМаркировки(ПараметрыПодключения.ИДУстройства);
				Исключение
					РезультатВыполнения = ОшибкаВызоваДрайвера("ПодтвердитьКМ", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
					Возврат РезультатВыполнения;
				КонецПопытки;
			КонецЕсли;       
		КонецЕсли;
	
		Попытка
			Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Если ДанныеОперации.ЕстьПерсональныеДанные Тогда
					ДанныеЧекаXML = ДанныеОперации.ДанныеЧекаXMLПерсональныеДанные
				Иначе
					ДанныеЧекаXML = ДанныеОперации.ДанныеЧекаXML;
				КонецЕсли;
				РезультатВызова = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ДанныеОперации.Электронно, ДанныеЧекаXML, ДанныеОперации.РезультатОперацииXML); // Структура 
				ПараметрыВызова = РезультатВызова.Параметры;
				ДанныеОперации.РезультатОперацииXML = ПараметрыВызова[3];    
			Иначе // Версия стандарта 2.2 (ОФД 1.05)
				РезультатВызова = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ДанныеОперации.Электронно, 
					ДанныеОперации.ДанныеЧекаXML, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.НомерСменыККТ, ДанныеОперации.ФискальныйПризнак, ДанныеОперации.АдресСайтаПроверки); // Структура
				ПараметрыВызова = РезультатВызова.Параметры;
				ДанныеОперации.НомерЧекаККТ  = ПараметрыВызова[3];     
				ДанныеОперации.НомерСменыККТ = ПараметрыВызова[4];  
				ДанныеОперации.ФискальныйПризнак  = ПараметрыВызова[5];       
				ДанныеОперации.АдресСайтаПроверки = ПараметрыВызова[6]; 
			КонецЕсли;   
			ДанныеОперации.ДатаВремяЧека = ОбщегоНазначенияБПОКлиент.ДатаСеанса();
		Исключение                   
			РезультатВыполнения = ОшибкаВызоваДрайвера("СформироватьЧек", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			Возврат РезультатВыполнения;
		КонецПопытки;
	
		Если РезультатВызова.Значение Тогда              
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
			МенеджерОборудованияКлиент.УстановитьСессиюПроверкиКодовМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
			Если ДанныеОперации.ТестовыеЧеки <> Неопределено И ДанныеОперации.ТестовыеЧеки.Количество() > 0 Тогда
				РезультатПечатиНефискальныхДокументов = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
				РезультатВыполнения.Вставить("РезультатПечатиНефискальныхДокументов", РезультатПечатиНефискальныхДокументов);
			КонецЕсли;
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Иначе        
		ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции 

// Осуществляет печать чека коррекции.
//
Функция ПечатьЧекаКоррекции(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)   
	
	Попытка
		
		Если ДанныеОперации.ЧекКоррекцииНаККТ Тогда
			Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ДанныеЧекаXML,  ДанныеОперации.РезультатОперацииXML); 
			Иначе
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ДанныеЧекаXML, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.НомерСменыККТ, 
					ДанныеОперации.ФискальныйПризнак, ДанныеОперации.АдресСайтаПроверки);      
				ДанныеОперации.ДатаВремяЧека = ОбщегоНазначенияБПОКлиент.ДатаСеанса();
			КонецЕсли;  
		Иначе
			Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ДанныеОперации.Электронно, 
					ДанныеОперации.ДанныеЧекаXML, ДанныеОперации.РезультатОперацииXML);
			Иначе
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ДанныеОперации.Электронно, 
					ДанныеОперации.ДанныеЧекаXML, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.НомерСменыККТ, ДанныеОперации.ФискальныйПризнак, ДанныеОперации.АдресСайтаПроверки); 
				ДанныеОперации.ДатаВремяЧека = ОбщегоНазначенияБПОКлиент.ДатаСеанса();
			КонецЕсли;  
		КонецЕсли;
		
		Если Результат И ДанныеОперации.СформироватьЧекКоррекцииСторно Тогда      
			ПараметрыФискализацииСторно = ДанныеОперации.ЧекКоррекцииСторно;
			Если ДанныеОперации.ЧекКоррекцииНаККТ Тогда
				Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
					Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.РезультатОперацииXML);
				Иначе
					Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно, 
						ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.НомерЧекаККТ, ПараметрыФискализацииСторно.НомерСменыККТ, ПараметрыФискализацииСторно.ФискальныйПризнак, ПараметрыФискализацииСторно.АдресСайтаПроверки); 
					ПараметрыФискализацииСторно.ДатаВремяЧека = ОбщегоНазначенияБПОКлиент.ДатаСеанса();
				КонецЕсли;  
			Иначе        
				Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно, 
						ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.РезультатОперацииXML);
				Иначе
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно, 
						ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.НомерЧекаККТ, ПараметрыФискализацииСторно.НомерСменыККТ, ПараметрыФискализацииСторно.ФискальныйПризнак, ПараметрыФискализацииСторно.АдресСайтаПроверки); 
					ПараметрыФискализацииСторно.ДатаВремяЧека = ОбщегоНазначенияБПОКлиент.ДатаСеанса();
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли; 
		
		Если Результат Тогда  
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
		Иначе                 
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
		
	Исключение            
		РезультатВыполнения = ОшибкаВызоваДрайвера("НапечататьЧекВнесенияВыемки", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения; 
	
КонецФункции

// Осуществляет печать текста.
//                
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
	Попытка
		Для Каждого ТекстПечати Из ДанныеОперации.ТестовыеЧеки Цикл
			РезультатВызова = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
			Если НЕ РезультатВызова.Значение Тогда
				РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
				Возврат РезультатВыполнения;
			КонецЕсли;
		КонецЦикла;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("НапечататьТекстовыйДокумент", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;  
	
КонецФункции

// Осуществляет инкассацию.
//    
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция Инкассация(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если ПараметрыПодключения.ТипыОборудования.ПринтерЧеков Тогда
		
		РезультатВыполнения = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	ИначеЕсли ПараметрыПодключения.ТипыОборудования.ККТ Тогда
		
		СуммаЧека = ?(ДанныеОперации.ТипИнкассации = 1, ДанныеОперации.СуммаЧека, - ДанныеОперации.СуммаЧека);
		Попытка
			РезультатВызова = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ДанныеЧекаXML, СуммаЧека);
			Если РезультатВызова.Значение Тогда   
				РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
				ДанныеОперации.СтатусСмены = 1; // Открыта
				// АльфаАвто
				// Зафиксируем операцию в регистре "Фискальные операции"
				ДанныеОперации.ДатаВремяЧека = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
				ОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьФискальнуюОперацию(ДанныеОперации);
				// Конец АльфаАвто
			Иначе
				РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
			КонецЕсли;
		Исключение
			РезультатВыполнения = ОшибкаВызоваДрайвера("НапечататьЧекВнесенияВыемки", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		РезультатВыполнения = ОшибкаВызоваДрайвера();
	КонецЕсли;
	
	Возврат РезультатВыполнения; 
	
КонецФункции 

// Осуществляет закрытие смены.
//    
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция ЗакрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если ПараметрыПодключения.ТипыОборудования.ПринтерЧеков Тогда
		
		РезультатВыполнения = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	ИначеЕсли ПараметрыПодключения.ТипыОборудования.ККТ Тогда        
		
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь);
		Попытка  
			Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				РезультатВызова = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML); // Структура
			Иначе
				РезультатВызова = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML, 
					ДанныеОперации.НомерСменыККТ, ДанныеОперации.НомерЧекаККТ); // Структура
			КонецЕсли;
		Исключение    
			Возврат ОшибкаВызоваДрайвера("ЗакрытьСмену", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))
		КонецПопытки;
		
		Если РезультатВызова.Значение Тогда              
			ПараметрыВызова = РезультатВызова.Параметры;
			ДанныеОперации.СтатусСмены = 1; // Статус 1 - Закрыта, 2 - Открыта, 3 - Истекла.         
			ДанныеОперации.РезультатXML = ПараметрыВызова[2];
			Если ПараметрыВызова.Количество() > 3 Тогда
				ДанныеОперации.НомерСменыККТ = ПараметрыВызова[3];    
				ДанныеОперации.НомерЧекаККТ  = ПараметрыВызова[4];  
			КонецЕсли;
			РезультатВыполнения.Результат = Истина;    
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
		
	Иначе
		РезультатВыполнения = ОшибкаВызоваДрайвера();
	КонецЕсли;    
	
	Возврат РезультатВыполнения; 
	
КонецФункции 

// Осуществляет открытие смены.
//                
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция ОткрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если ПараметрыПодключения.ТипыОборудования.ПринтерЧеков Тогда
		
		РезультатВыполнения = ПечатьТекста(ОбъектДрайвера,  ПараметрыПодключения, ДанныеОперации);
		
	ИначеЕсли ПараметрыПодключения.ТипыОборудования.ККТ Тогда        
		
		ПараметрыККТ = "";
		Попытка          
			РезультатВызова = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ); // Структура
		Исключение
			РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьПараметрыККТ", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));  
			Возврат РезультатВыполнения; 
		КонецПопытки;
		
		Если РезультатВызова.Значение Тогда   
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
			ПараметрыККТ = РезультатВызова.Параметры[1];
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера); 
			Возврат РезультатВыполнения; 
		КонецЕсли;
		
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь);
		Попытка  
			Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				РезультатВызова = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML); // Структура
			Иначе
				РезультатВызова = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML, 
					ДанныеОперации.НомерСменыККТ, ДанныеОперации.НомерЧекаККТ); // Структура
			КонецЕсли;
		Исключение    
			Возврат ОшибкаВызоваДрайвера("ОткрытьСмену", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))
		КонецПопытки;
		
		Если РезультатВызова.Значение Тогда              
			ПараметрыВызова = РезультатВызова.Параметры;
			ДанныеОперации.СтатусСмены = 2; // Статус 1 - Закрыта, 2 - Открыта, 3 - Истекла.         
			ДанныеОперации.Вставить("ПараметрыККТ", ПараметрыККТ);
			ДанныеОперации.РезультатXML = ПараметрыВызова[2];
			Если ПараметрыВызова.Количество() > 3 Тогда
				ДанныеОперации.НомерСменыККТ = ПараметрыВызова[3];    
				ДанныеОперации.НомерЧекаККТ  = ПараметрыВызова[4];  
			КонецЕсли;
			РезультатВыполнения.Результат = Истина;    
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
		
	Иначе
		РезультатВыполнения = ОшибкаВызоваДрайвера();
	КонецЕсли;    
	
	Возврат РезультатВыполнения; 
	
КонецФункции 

// Осуществляет открытие денежного ящика.
//      
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
		Если РезультатВызова.Значение Тогда   
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);   
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ОткрытьДенежныйЯщик", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;  
	
КонецФункции

// Осуществляет формирование отчета о текущем состоянии расчетов.
//                  
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если ПараметрыПодключения.ТипыОборудования.ККТ Тогда
		
		РезультатXML = "";
		Попытка
			РезультатВызова = ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, РезультатXML); // Структура
			Если РезультатВызова.Значение Тогда   
				РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);   
				ДанныеОперации.РезультатXML = РезультатВызова.Параметры[2];
			Иначе
				РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
			КонецЕсли;
		Исключение
			РезультатВыполнения = ОшибкаВызоваДрайвера("ОтчетОТекущемСостоянииРасчетов", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		РезультатВыполнения = ОшибкаВызоваДрайвера();
	КонецЕсли;
	
	Возврат РезультатВыполнения; 
	
КонецФункции

// Осуществляет формирование отчет без гашения.
//
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция ОтчетБезГашения(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если ПараметрыПодключения.ТипыОборудования.ПринтерЧеков Тогда
		
		РезультатВыполнения = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		
	ИначеЕсли ПараметрыПодключения.ТипыОборудования.ККТ Тогда
		
		Попытка
			РезультатВызова = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML);
			Если РезультатВызова.Значение Тогда   
				РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
			Иначе
				РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
			КонецЕсли;
		Исключение
			РезультатВыполнения = ОшибкаВызоваДрайвера("НапечататьОтчетБезГашения", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		РезультатВыполнения = ОшибкаВызоваДрайвера();
	КонецЕсли;
	
	Возврат РезультатВыполнения; 
	
КонецФункции

// Осуществляет аннулирование чека.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция АннулированиеЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)  
	
	РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
	РезультатВыполнения.Вставить("НомерСменыККТ" , Неопределено);
	РезультатВыполнения.Вставить("НомерЧекаККТ"  , Неопределено);
	РезультатВыполнения.Вставить("СтатусСмены", 2);
	РезультатВыполнения.Вставить("ДатаВремяЧека", ОбщегоНазначенияБПОКлиент.ДатаСеанса());
	Возврат РезультатВыполнения;
	
КонецФункции

// Осуществляет получение параметров ККТ.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция ПараметрыККТ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	
	Если ПараметрыПодключения.ТипыОборудования.ККТ Тогда
		
		Попытка
			РезультатВызова = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ""); // Структура
		Исключение
			Возврат ОшибкаВызоваДрайвера("ПолучитьПараметрыККТ", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;  
	
		Если РезультатВызова.Значение Тогда   
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
			РезультатВыполнения.Вставить("ПараметрыККТXML", РезультатВызова.Параметры[1]);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
		
	Иначе
		РезультатВыполнения = ОшибкаВызоваДрайвера();
	КонецЕсли;
	
	Возврат РезультатВыполнения; 
	
КонецФункции

// Осуществляет открытие смены.
//
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Функция ТекущееСостояние(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если НЕ ПараметрыПодключения.ТипыОборудования.ККТ Тогда
		Возврат ОшибкаВызоваДрайвера();
	КонецЕсли; 
	
	РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь);
	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
			РезультатВызова = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML); // Структура
		Иначе
			РезультатВызова = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.НомерСменыККТ, // Структура
				ДанныеОперации.СтатусСмены, ДанныеОперации.РезультатXML);
		КонецЕсли;    
	Исключение    
		Возврат ОшибкаВызоваДрайвера("ПолучитьТекущееСостояние", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))
	КонецПопытки;
		
	Если РезультатВызова.Значение Тогда  
		ПараметрыВызова = РезультатВызова.Параметры;
		РезультатВыполнения.Результат = Истина;    
		Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда
			ДанныеОперации.ПараметрыXML = ПараметрыВызова[1];
			ДанныеОперации.РезультатXML = ПараметрыВызова[2];
		Иначе
			ДанныеОперации.НомерЧекаККТ  = ПараметрыВызова[1];
			ДанныеОперации.НомерСменыККТ = ПараметрыВызова[2];
			ДанныеОперации.СтатусСмены   = ПараметрыВызова[3];
			ДанныеОперации.РезультатXML  = ПараметрыВызова[4];
		КонецЕсли;    
	Иначе
		РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Процедура осуществляет операцию с фискальным накопителем.
//
Функция ОперацияФискальногоНакопителя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если НЕ ПараметрыПодключения.ТипыОборудования.ККТ Тогда
		Возврат ОшибкаВызоваДрайвера();
	КонецЕсли; 
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ОперацияФН(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ТипОперации, ДанныеОперации.ПараметрыXML); // Структура
		Если НЕ РезультатВызова.Значение Тогда   
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
			Возврат РезультатВыполнения;
		КонецЕсли;                            
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ОперацияФН", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Попытка         
		РезультатВызова = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ""); // Структура
		Если РезультатВызова.Значение Тогда   
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина); 
			ДанныеОперации.Вставить("ПараметрыККТ", РезультатВызова.Параметры[1]);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;                            
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьПараметрыККТ", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция печать копию чека.
//
Функция НапечататьКопиюЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если НЕ ПараметрыПодключения.ТипыОборудования.ККТ Тогда
		Возврат ОшибкаВызоваДрайвера();        
	КонецЕсли;
	
	Если ДанныеОперации.Свойство("Аппаратно") И ДанныеОперации.Аппаратно Тогда
		
		НомерЧека = 0;
		Если ДанныеОперации <> Неопределено И ДанныеОперации.Свойство("НомерЧека") Тогда
			НомерЧека = ДанныеОперации.НомерЧека;
		КонецЕсли;
		
		Попытка
			РезультатВызова = ОбъектДрайвера.НапечататьКопиюЧека(ПараметрыПодключения.ИДУстройства, НомерЧека); // Структура
			Если РезультатВызова.Значение Тогда   
				РезультатВыполнения = РезультатОперацииНаОборудовании(Истина); 
				РезультатВыполнения.Вставить("НомерЧека", НомерЧека);
			Иначе
				РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
			КонецЕсли;
		Исключение
			РезультатВыполнения = ОшибкаВызоваДрайвера("НапечататьКопиюЧека", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе                
		РезультатВыполнения = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации); 
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция открывает сессию регистрации КМ.
//
Функция ОткрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если НЕ ПараметрыПодключения.ТипыОборудования.ККТ Или ПараметрыПодключения.РевизияИнтерфейса < 3004 Тогда
		ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ИдентификаторСессии = МенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
	Если НЕ ПустаяСтрока(ИдентификаторСессии) Тогда  
		ОписаниеОшибки = НСтр("ru='Сессия проверки кодов маркировки уже открыта.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ОткрытьСессиюРегистрацииКМ(ПараметрыПодключения.ИДУстройства);
		Если РезультатВызова.Значение Тогда
			ИдентификаторСессии = Строка(Новый УникальныйИдентификатор);
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
			РезультатВыполнения.Вставить("ИдентификаторСессии", ИдентификаторСессии);
			МенеджерОборудованияКлиент.УстановитьСессиюПроверкиКодовМаркировки(ПараметрыПодключения.ИдентификаторУстройства, ИдентификаторСессии);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ОткрытьСессиюРегистрацииКМ", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция закрывает сессию регистрации КМ.
//
Функция ЗакрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если НЕ ПараметрыПодключения.ТипыОборудования.ККТ Или ПараметрыПодключения.РевизияИнтерфейса < 3004 Тогда
		ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ИдентификаторСессии = МенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
	Если ПустаяСтрока(ИдентификаторСессии) Тогда  
		РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ЗакрытьСессиюРегистрацииКМ(ПараметрыПодключения.ИДУстройства);
		Если РезультатВызова.Значение Тогда
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
			МенеджерОборудованияКлиент.УстановитьСессиюПроверкиКодовМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ЗакрытьСессиюРегистрацииКМ", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;  
	
КонецФункции

// Запрос КМ.
//
Функция ЗапросКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если НЕ ПараметрыПодключения.ТипыОборудования.ККТ Или ПараметрыПодключения.РевизияИнтерфейса < 3004 Тогда
		ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ТекущийСтатус = МенеджерОборудованияКлиент.ПроверкаКодаМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
	ИдентификаторСессии  = ТекущийСтатус.ИдентификаторСессии;
	ИдентификаторЗапроса = ТекущийСтатус.ИдентификаторЗапроса;
	
	// Если нет открытой сессии - открываем автоматически. 
	Если ПустаяСтрока(ИдентификаторСессии) Тогда  
		ВремРезультатВыполнения = ОткрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		Если Не ВремРезультатВыполнения.Результат Тогда
			Возврат ВремРезультатВыполнения;
		Иначе
			ИдентификаторСессии = ВремРезультатВыполнения.ИдентификаторСессии;
		КонецЕсли;
	КонецЕсли;
	
	// Если есть текущая проверка КМ      
	Если НЕ ПустаяСтрока(ИдентификаторЗапроса) Тогда
		Попытка
			РезультатВызова = ОбъектДрайвера.ПодтвердитьКМ(ПараметрыПодключения.ИДУстройства, ИдентификаторЗапроса, 0);
			МенеджерОборудованияКлиент.УстановитьПроверкуКодаМаркировки(ПараметрыПодключения.ИДУстройства);
		Исключение
			РезультатВыполнения = ОшибкаВызоваДрайвера("ПодтвердитьКМ", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			Возврат РезультатВыполнения;
		КонецПопытки;
	КонецЕсли;       
	
	ИдентификаторЗапроса = ДанныеОперации.ИдентификаторЗапроса;
	Попытка
		РезультатВызова = ОбъектДрайвера.ЗапросКМ(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ""); // Структура   
		Если РезультатВызова.Значение Тогда  
			ПараметрыВызова = РезультатВызова.Параметры;     
			РезультатОперацииXML = ПараметрыВызова[2];
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
			РезультатВыполнения.Вставить("ИдентификаторСессии" , ИдентификаторСессии);
			РезультатВыполнения.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
			РезультатВыполнения.Вставить("ЗапросXML"   , ДанныеОперации.ПараметрыXML);
			РезультатВыполнения.Вставить("РезультатXML", РезультатОперацииXML);
			МенеджерОборудованияКлиент.УстановитьРезультатПроверкиКодаМаркировки(ПараметрыПодключения.ИдентификаторУстройства, 
				ИдентификаторСессии, ДанныеОперации, РезультатВыполнения, ИдентификаторЗапроса);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ЗапросКМ", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Подтвердить результаты запроса КМ.
//
Функция ПодтвердитьКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если НЕ ПараметрыПодключения.ТипыОборудования.ККТ Или ПараметрыПодключения.РевизияИнтерфейса < 3004 Тогда
		ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ИдентификаторЗапроса = ?(ДанныеОперации.Свойство("ИдентификаторЗапроса"), ДанныеОперации.ИдентификаторЗапроса, "");
	Выбытие = ?(ДанныеОперации.Свойство("Выбытие"), ДанныеОперации.Выбытие, Истина);
	
	Если ПустаяСтрока(ИдентификаторЗапроса) Тогда
		ОписаниеОшибки = НСтр("ru='Идентификатор запроса КМ не указан.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ПодтвердитьКМ(ПараметрыПодключения.ИДУстройства, ПараметрыПодключения.ИДУстройства, ?(Выбытие, 0, 1));
		Если РезультатВызова.Значение Тогда   
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
			РезультатВыполнения.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
			МенеджерОборудованияКлиент.УстановитьПроверкуКодаМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ПодтвердитьКМ", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Получить результаты запроса КМ.
//
Функция РезультатыЗапросаКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если НЕ ПараметрыПодключения.ТипыОборудования.ККТ Или ПараметрыПодключения.РевизияИнтерфейса < 3004 Тогда
		ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	СтатусЗапроса = 0;
	РезультатОперацииXML = "";
	Попытка
		РезультатВызова = ОбъектДрайвера.ПолучитьРезультатыЗапросаКМ(ПараметрыПодключения.ИДУстройства, РезультатОперацииXML, СтатусЗапроса); // Структура
		Если РезультатВызова.Значение Тогда                   
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
			РезультатОперацииXML = РезультатВызова.Параметры[1];
			СтатусЗапроса = РезультатВызова.Параметры[2];
			ДанныеОперации.Вставить("РезультатXML", РезультатОперацииXML);
			ДанныеОперации.Вставить("СтатусРезультатаКод", СтатусЗапроса);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьРезультатыЗапросаКМ", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ЭквайринговыеТерминалы   

// Процедура возвращает параметры терминале.
//
Процедура НачатьВызовПараметрыТерминала(ОповещениеПриЗавершении, ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ПараметрыПодключения",    ПараметрыПодключения);
	Контекст.Вставить("ДанныеОперации",          ДанныеОперации);
	Контекст.Вставить("ОбъектДрайвера",          ОбъектДрайвера);
	
	Если ПараметрыПодключения.РевизияИнтерфейса >= 3004 Тогда
		Попытка
			Оповещение = Новый ОписаниеОповещения("НачатьВызовПараметрыТерминала_Завершение", ЭтотОбъект, Контекст);
			ОбъектДрайвера.ОбъектДрайвера.НачатьВызовПараметрыТерминала(ПараметрыПодключения.ИДУстройства, "");
		Исключение  
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				РезультатВыполнения = ОшибкаВызоваДрайвера("ПараметрыТерминала", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецПопытки;
	Иначе     
		Попытка
			Оповещение = Новый ОписаниеОповещения("НачатьВызовПараметрыТерминала_ПечатьКвитанцийНаТерминалеЗавершение", ЭтотОбъект, Контекст);
			ОбъектДрайвера.ПечатьКвитанцийНаТерминале(Оповещение);
		Исключение          
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				РезультатВыполнения = ОшибкаВызоваДрайвера("ПечатьКвитанцийНаТерминале", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращает параметры терминале.
//
Процедура НачатьВызовПараметрыТерминала_Завершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	Если РезультатВызова Тогда
		РезультатОперацииXML = ПараметрыВызова[1];
		ПараметрыТерминала = ОбщегоНазначенияБПОКлиент.ПрочитатьКорневойЭлементXML(РезультатОперацииXML);
		Если ПараметрыТерминала.Свойство("TerminalID") И Не ПустаяСтрока(ПараметрыТерминала.TerminalID) Тогда
			ПараметрыПодключения.ИдентификаторТерминала = ПараметрыТерминала.TerminalID;
		КонецЕсли; 
		ПараметрыПодключения.ПечатьКвитанцийНаТерминале = ПараметрыТерминала.Свойство("PrintSlipOnTerminal") И ВРег(ПараметрыТерминала.PrintSlipOnTerminal) = "TRUE"; 
		ПараметрыПодключения.КороткиеСлипЧеки = ПараметрыТерминала.Свойство("ShortSlip") И ВРег(ПараметрыТерминала.ShortSlip) = "TRUE"; 
		ПараметрыПодключения.ВыдачиНаличныхДенежныхСредств = ПараметрыТерминала.Свойство("CashWithdrawal") И ВРег(ПараметрыТерминала.CashWithdrawal) = "TRUE"; 
		ПараметрыПодключения.ОплатаЭлектроннымиСертификатами = ПараметрыТерминала.Свойство("ElectronicCertificates") И ВРег(ПараметрыТерминала.ElectronicCertificates) = "TRUE";
		ПараметрыПодключения.ЧастичнаяОтмена = ПараметрыТерминала.Свойство("PartialCancellation") И ВРег(ПараметрыТерминала.PartialCancellation) = "TRUE";
		ПараметрыПодключения.ConsumerPresentedQR = ПараметрыТерминала.Свойство("ConsumerPresentedQR") И ВРег(ПараметрыТерминала.ConsumerPresentedQR) = "TRUE";
		ПараметрыПодключения.СписокОперацийПоКартам = ПараметрыТерминала.Свойство(" ListCardTransactions") И ВРег(ПараметрыТерминала.ListCardTransactions) = "TRUE";
		РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ПолучитьОшибкуДрайвера(Контекст.ОповещениеПриЗавершении, Контекст.ОбъектДрайвера, "ПараметрыТерминала");
	КонецЕсли
	
КонецПроцедуры

Процедура НачатьВызовПараметрыТерминала_ПечатьКвитанцийНаТерминалеЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	Если РезультатВызова Тогда
		ПараметрыПодключения.ПечатьКвитанцийНаТерминале = РезультатВызова;
		РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ПолучитьОшибкуДрайвера(Контекст.ОповещениеПриЗавершении, Контекст.ОбъектДрайвера, "ПечатьКвитанцийНаТерминале");
	КонецЕсли
	
КонецПроцедуры


// Функция выполняет получение параметров карты.
//
Функция ПараметрыКарты(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если РевизияИнтерфейса > 3004 Тогда
		ОтПоследнейОперации = Ложь;
		НомерКарты = "";
		ХешНомерКарты = "";
		РеквизитыКартыQR = "";
		СсылкаНаПлатежныйСчет = "";
		ТипКарты  = "";
		СвояКарта = 0;
		Попытка                  
			Если РевизияИнтерфейса >= 4000 Тогда    
				РеквизитыКартыQR = ?(ДанныеОперации.Свойство("РеквизитыКартыQR"), ДанныеОперации.РеквизитыКартыQR, "");
				Если Не ПустаяСтрока(РеквизитыКартыQR) И НЕ ПараметрыПодключения.ConsumerPresentedQR Тогда
					ОписаниеОшибки = НСтр("ru='Consumer-Presented QR не поддерживается драйвером.'");
					РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
					Возврат РезультатВыполнения;   
				КонецЕсли;
				РезультатВызова = ОбъектДрайвера.ПолучитьПараметрыКарты(ПараметрыПодключения.ИДУстройства, РеквизитыКартыQR, ОтПоследнейОперации, НомерКарты, ХешНомерКарты, СсылкаНаПлатежныйСчет, ТипКарты, СвояКарта); // Структура
			ИначеЕсли РевизияИнтерфейса >= 3007 Тогда
				РезультатВызова = ОбъектДрайвера.ПолучитьПараметрыКарты(ПараметрыПодключения.ИДУстройства, ОтПоследнейОперации, НомерКарты, ХешНомерКарты, СсылкаНаПлатежныйСчет, ТипКарты, СвояКарта); // Структура
			Иначе
				РезультатВызова = ОбъектДрайвера.ПолучитьПараметрыКарты(ПараметрыПодключения.ИДУстройства, ОтПоследнейОперации, НомерКарты, ХешНомерКарты, ТипКарты, СвояКарта); // Структура
			КонецЕсли;
			Если РезультатВызова.Значение Тогда     
				РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
				Если РевизияИнтерфейса >= 4000 Тогда   
					РеквизитыКартыQR = РезультатВызова.Параметры[1];
					НомерКарты = РезультатВызова.Параметры[3];
					ХешНомерКарты = РезультатВызова.Параметры[4];
					СсылкаНаПлатежныйСчет = РезультатВызова.Параметры[5];
					ТипКарты = РезультатВызова.Параметры[6];
					СвояКарта = РезультатВызова.Параметры[7];
				ИначеЕсли РевизияИнтерфейса >= 3007 Тогда 
					НомерКарты = РезультатВызова.Параметры[2];
					ХешНомерКарты = РезультатВызова.Параметры[3];
					СсылкаНаПлатежныйСчет = РезультатВызова.Параметры[4];
					ТипКарты = РезультатВызова.Параметры[5];
					СвояКарта = РезультатВызова.Параметры[6];
				Иначе
					НомерКарты = РезультатВызова.Параметры[2];
					ХешНомерКарты = РезультатВызова.Параметры[3];
					ТипКарты = РезультатВызова.Параметры[4];
					СвояКарта = РезультатВызова.Параметры[5];
				КонецЕсли;
				РезультатВыполнения.Вставить("НомерКарты"   , НомерКарты);
				РезультатВыполнения.Вставить("ХешНомерКарты", ХешНомерКарты);
				РезультатВыполнения.Вставить("СсылкаНаПлатежныйСчет", СсылкаНаПлатежныйСчет);
				РезультатВыполнения.Вставить("РеквизитыКартыQR"     , РеквизитыКартыQR);
				РезультатВыполнения.Вставить("ТипКарты"     , ТипКарты);
				РезультатВыполнения.Вставить("СвояКарта"    , СвояКарта);
			Иначе
				РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
			КонецЕсли;
		Исключение      
			РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьПараметрыКарты", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе     
		ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Процедура возвращает операции по картам.
//
Функция ОперацииПоКартам(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если ПараметрыПодключения.РевизияИнтерфейса < 4000 Тогда    
		ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
		Возврат РезультатВыполнения;
	Иначе               
		Если НЕ ПараметрыПодключения.СписокОперацийПоКартам Тогда
			ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'"); 
			РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
			Возврат РезультатВыполнения;
		КонецЕсли;
		Попытка
			РезультатВызова = ОбъектДрайвера.ПолучитьОперацииПоКартам(ПараметрыПодключения.ИДУстройства, ""); // Структура  
			Если РезультатВызова.Значение Тогда        
				РезультатОперацииXML = РезультатВызова.Параметры[1];
				РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);   
				РезультатВыполнения.Вставить("РезультатОперацииXML", РезультатОперацииXML);
			КонецЕсли         
		Исключение  
			РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьОперацииПоКартам", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция осуществляет операцию на ЭТ.
//
Функция ЭквайринговаяОперация(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, Команда)
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если НЕ (ДанныеОперации.СуммаОперации > 0) Тогда   
		ОписаниеОшибки =  НСтр("ru='Не корректная сумма операции.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РеквизитыКартыQR = ?(ДанныеОперации.РеквизитыКартыQR <> Неопределено, ДанныеОперации.РеквизитыКартыQR, "");
	НомерМерчанта  = ?(ДанныеОперации.НомерМерчанта <> Неопределено, ДанныеОперации.НомерМерчанта, 0);
	НомерКарты     = ?(ДанныеОперации.НомерКарты <> Неопределено, ДанныеОперации.НомерКарты, "");
	НомерЧека      = ?(ДанныеОперации.НомерЧека <> Неопределено, ДанныеОперации.НомерЧека, "");
	СсылочныйНомер = ?(ДанныеОперации.СсылочныйНомер <> Неопределено, ДанныеОперации.СсылочныйНомер, "");
	КодАвторизации = ?(ДанныеОперации.КодАвторизации <> Неопределено, ДанныеОперации.КодАвторизации, "");
	СуммаОперации  = ?(ДанныеОперации.СуммаОперации <> Неопределено, ДанныеОперации.СуммаОперации, 0);
	СуммаНаличных  = ?(ДанныеОперации.СуммаНаличных <> Неопределено, ДанныеОперации.СуммаНаличных, 0);
	СуммаОригинальнойОперации = ?(ДанныеОперации.СуммаОригинальнойОперации <> Неопределено, ДанныеОперации.СуммаОригинальнойОперации, 0);
	ТекстСлипЧека  = "";
	
	Если Не ПустаяСтрока(РеквизитыКартыQR) И НЕ ПараметрыПодключения.ConsumerPresentedQR Тогда
		ОписаниеОшибки = НСтр("ru='Consumer-Presented QR не поддерживается драйвером.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
		Возврат РезультатВыполнения;   
	КонецЕсли;
		
	Попытка   
		Если РевизияИнтерфейса >= 4000 Тогда
			Если Команда = "AuthorizeSales" Тогда
				РезультатВызова = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации,  
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
			ИначеЕсли Команда = "AuthorizeRefund" Тогда
				РезультатВызова = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
			ИначеЕсли Команда = "AuthorizeVoid" Тогда                                                                                                       
				Если СуммаОригинальнойОперации > 0 И НЕ ПараметрыПодключения.ЧастичнаяОтмена Тогда
					ОписаниеОшибки = НСтр("ru='Частичная отмена не поддерживается драйвером.'");
					РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
					Возврат РезультатВыполнения;
				Иначе
					РезультатВызова = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации,
						СуммаОригинальнойОперации, НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
				КонецЕсли;
			ИначеЕсли Команда = "PayByPaymentCardWithCashWithdrawal" Тогда
				Если ПараметрыПодключения.ВыдачиНаличныхДенежныхСредств Тогда
					РезультатВызова = ОбъектДрайвера.ОплатитьПлатежнойКартойCВыдачейНаличных(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации, 
						СуммаНаличных, НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
				Иначе
					ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'");
					РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
					Возврат РезультатВыполнения;
				КонецЕсли;
			Иначе               
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
				Возврат РезультатВыполнения;
			КонецЕсли;          
		ИначеЕсли РевизияИнтерфейса >= 3005 Тогда
			Если Команда = "AuthorizeSales" Тогда
				РезультатВызова = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
			ИначеЕсли Команда = "AuthorizeRefund" Тогда
				РезультатВызова = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
			ИначеЕсли Команда = "AuthorizeVoid" Тогда                                                                                                       
				РезультатВызова = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
			ИначеЕсли РевизияИнтерфейса >= 3006 И Команда = "PayByPaymentCardWithCashWithdrawal" Тогда
				Если ПараметрыПодключения.ВыдачиНаличныхДенежныхСредств Тогда
					РезультатВызова = ОбъектДрайвера.ОплатитьПлатежнойКартойCВыдачейНаличных(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
						СуммаНаличных, НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
				Иначе
					ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'");
					РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
					Возврат РезультатВыполнения;
				КонецЕсли;
			Иначе               
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
				Возврат РезультатВыполнения;
			КонецЕсли;          
		Иначе           
			Если Команда = "AuthorizeSales" Тогда
				РезультатВызова = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
			ИначеЕсли Команда = "AuthorizeRefund" Тогда
				РезультатВызова = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
			ИначеЕсли Команда = "AuthorizeVoid" Тогда                           
				РезультатВызова = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека); // Структура
			Иначе
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
				Возврат РезультатВыполнения;    
			КонецЕсли;  
		КонецЕсли;
			
		Если РезультатВызова.Значение Тогда        
			Если РевизияИнтерфейса >= 4000 Тогда      
				НомерМерчанта = РезультатВызова.Параметры[1]; 
				РеквизитыКартыQR =  РезультатВызова.Параметры[2];
				СуммаОперации = РезультатВызова.Параметры[3];         
				Если Команда = "AuthorizeVoid" Тогда    
					НомерКарты = РезультатВызова.Параметры[5]; 
					НомерЧека = РезультатВызова.Параметры[6]; 
					СсылочныйНомер = РезультатВызова.Параметры[7]; 
					КодАвторизации = РезультатВызова.Параметры[8]; 
					ТекстСлипЧека = РезультатВызова.Параметры[9];  
				ИначеЕсли Команда = "PayByPaymentCardWithCashWithdrawal" Тогда    
					СуммаНаличных = РезультатВызова.Параметры[4];
					НомерКарты = РезультатВызова.Параметры[5]; 
					НомерЧека = РезультатВызова.Параметры[6]; 
					СсылочныйНомер = РезультатВызова.Параметры[7]; 
					КодАвторизации = РезультатВызова.Параметры[8]; 
					ТекстСлипЧека = РезультатВызова.Параметры[9];   
				Иначе
					НомерКарты = РезультатВызова.Параметры[4]; 
					НомерЧека = РезультатВызова.Параметры[5]; 
					СсылочныйНомер = РезультатВызова.Параметры[6]; 
					КодАвторизации = РезультатВызова.Параметры[7]; 
					ТекстСлипЧека = РезультатВызова.Параметры[8];   
				КонецЕсли;
			ИначеЕсли РевизияИнтерфейса >= 3005 Тогда       
				НомерМерчанта = РезультатВызова.Параметры[1]; 
				СуммаОперации = РезультатВызова.Параметры[2]; 
				Если Команда = "PayByPaymentCardWithCashWithdrawal" Тогда   
					СуммаНаличных = РезультатВызова.Параметры[3];
					НомерКарты = РезультатВызова.Параметры[4]; 
					НомерЧека = РезультатВызова.Параметры[5]; 
					СсылочныйНомер = РезультатВызова.Параметры[6]; 
					КодАвторизации = РезультатВызова.Параметры[7]; 
					ТекстСлипЧека = РезультатВызова.Параметры[8];
				Иначе
					НомерКарты = РезультатВызова.Параметры[3]; 
					НомерЧека = РезультатВызова.Параметры[4]; 
					СсылочныйНомер = РезультатВызова.Параметры[5]; 
					КодАвторизации = РезультатВызова.Параметры[6]; 
					ТекстСлипЧека = РезультатВызова.Параметры[7];
				КонецЕсли;
			Иначе   
				НомерКарты = РезультатВызова.Параметры[1];
				СуммаОперации = РезультатВызова.Параметры[2];
				НомерЧека = РезультатВызова.Параметры[3];
				СсылочныйНомер = РезультатВызова.Параметры[4];
				КодАвторизации = РезультатВызова.Параметры[5];
				ТекстСлипЧека = РезультатВызова.Параметры[6];
			КонецЕсли;  
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина); 
			РезультатВыполнения.Вставить("НомерМерчанта" , НомерМерчанта);
			РезультатВыполнения.Вставить("НомерКарты"    , НомерКарты);
			РезультатВыполнения.Вставить("НомерЧекаЭТ"   , НомерЧека);
			РезультатВыполнения.Вставить("СсылочныйНомер", СсылочныйНомер);
			РезультатВыполнения.Вставить("КодАвторизации", КодАвторизации);
			РезультатВыполнения.Вставить("СуммаОперации" , СуммаОперации);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;   
		РезультатВыполнения.Вставить("ТекстСлипЧека" , ТекстСлипЧека);
		ПодключаемоеОборудование = МенеджерОборудованияКлиент.ПодключаемоеОборудование();
		ПодключаемоеОборудование.ПоследнийСлипЧек = ТекстСлипЧека; 
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера(Команда, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция осуществляет операцию на ЭТ c электронным сертификатом.
//
Функция ЭквайринговаяОперацияСЭлектроннымСертификатом(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, Команда)
	
	Если ПараметрыПодключения.РевизияИнтерфейса < 3005 Тогда    
		ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РеквизитыКартыQR = ?(ДанныеОперации.РеквизитыКартыQR <> Неопределено, ДанныеОперации.РеквизитыКартыQR, "");
	НомерМерчанта  = ?(ДанныеОперации.НомерМерчанта <> Неопределено, ДанныеОперации.НомерМерчанта, 0);
	НомерКарты     = ?(ДанныеОперации.НомерКарты <> Неопределено, ДанныеОперации.НомерКарты, "");
	НомерЧека      = ?(ДанныеОперации.НомерЧека <> Неопределено, ДанныеОперации.НомерЧека, "");
	СсылочныйНомер = ?(ДанныеОперации.СсылочныйНомер <> Неопределено, ДанныеОперации.СсылочныйНомер, "");
	КодАвторизации = ?(ДанныеОперации.КодАвторизации <> Неопределено, ДанныеОперации.КодАвторизации, "");
	ИдентификаторКорзины = ?(ДанныеОперации.ИдентификаторКорзины <> Неопределено, ДанныеОперации.ИдентификаторКорзины, "");
	СуммаЭлектронногоСертификата = ?(ДанныеОперации.СуммаЭлектронногоСертификата <> Неопределено, ДанныеОперации.СуммаЭлектронногоСертификата, 0);
	СуммаСобственныхСредств = ?(ДанныеОперации.СуммаСобственныхСредств <> Неопределено, ДанныеОперации.СуммаСобственныхСредств, 0);
	ТекстСлипЧека  = "";
	СтатусОперации = 0;

	Если НЕ ПараметрыПодключения.ОплатаЭлектроннымиСертификатами Тогда
		ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'"); 
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
		Возврат РезультатВыполнения;
	КонецЕсли;

	Если НЕ ПустаяСтрока(РеквизитыКартыQR) И НЕ ПараметрыПодключения.ConsumerPresentedQR Тогда
		ОписаниеОшибки = НСтр("ru='Consumer-Presented QR не поддерживается драйвером.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
		Возврат РезультатВыполнения;   
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторКорзины) Или СуммаЭлектронногоСертификата = 0 Тогда  
		ОписаниеОшибки = НСтр("ru='Неверные параметры в операции.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса >= 4000 Тогда
			Если Команда = "PayElectronicCertificate" Тогда
				РезультатВызова = ОбъектДрайвера.ОплатитьЭлектроннымСертификатом(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, ИдентификаторКорзины, 
					СуммаЭлектронногоСертификата, СуммаСобственныхСредств, НомерКарты, НомерЧека, 
					СсылочныйНомер, КодАвторизации, СтатусОперации, ТекстСлипЧека); // Структура
			ИначеЕсли Команда = "ReturnElectronicCertificate" Тогда
				РезультатВызова = ОбъектДрайвера.ВернутьЭлектроннымСертификатом(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, ИдентификаторКорзины, 
					СуммаЭлектронногоСертификата, СуммаСобственныхСредств, НомерКарты, НомерЧека, 
					СсылочныйНомер, КодАвторизации, СтатусОперации, ТекстСлипЧека); // Структура
			Иначе           
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
				Возврат РезультатВыполнения;
			КонецЕсли;
		Иначе
			Если Команда = "PayElectronicCertificate" Тогда
				РезультатВызова = ОбъектДрайвера.ОплатитьЭлектроннымСертификатом(ПараметрыПодключения.ИДУстройства, НомерМерчанта, ИдентификаторКорзины, 
					СуммаЭлектронногоСертификата, СуммаСобственныхСредств, НомерКарты, НомерЧека, 
					СсылочныйНомер, КодАвторизации, СтатусОперации, ТекстСлипЧека); // Структура
			ИначеЕсли Команда = "ReturnElectronicCertificate" Тогда
				РезультатВызова = ОбъектДрайвера.ВернутьЭлектроннымСертификатом(ПараметрыПодключения.ИДУстройства, НомерМерчанта, ИдентификаторКорзины, 
					СуммаЭлектронногоСертификата, СуммаСобственныхСредств, НомерКарты, НомерЧека, 
					СсылочныйНомер, КодАвторизации, СтатусОперации, ТекстСлипЧека); // Структура
			Иначе           
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки); 
				Возврат РезультатВыполнения;
			КонецЕсли;
		КонецЕсли;
			
		Если РезультатВызова.Значение Тогда   
			Если ПараметрыПодключения.РевизияИнтерфейса >= 4000 Тогда
				НомерМерчанта = РезультатВызова.Параметры[1];            
				РеквизитыКартыQR = РезультатВызова.Параметры[2];
				ИдентификаторКорзины = РезультатВызова.Параметры[3];
				СуммаЭлектронногоСертификата = РезультатВызова.Параметры[4];
				СуммаСобственныхСредств = РезультатВызова.Параметры[5];
				НомерКарты = РезультатВызова.Параметры[6];
				НомерЧека = РезультатВызова.Параметры[7];
				СсылочныйНомер = РезультатВызова.Параметры[8];
				КодАвторизации = РезультатВызова.Параметры[9];
				СтатусОперации = РезультатВызова.Параметры[10];
				ТекстСлипЧека = РезультатВызова.Параметры[11];
			Иначе
				НомерМерчанта = РезультатВызова.Параметры[1];
				ИдентификаторКорзины = РезультатВызова.Параметры[2];
				СуммаЭлектронногоСертификата = РезультатВызова.Параметры[3];
				СуммаСобственныхСредств = РезультатВызова.Параметры[4];
				НомерКарты = РезультатВызова.Параметры[5];
				НомерЧека = РезультатВызова.Параметры[6];
				СсылочныйНомер = РезультатВызова.Параметры[7];
				КодАвторизации = РезультатВызова.Параметры[8];
				СтатусОперации = РезультатВызова.Параметры[9];
				ТекстСлипЧека = РезультатВызова.Параметры[10];   
			КонецЕсли;                                       
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина); 
			РезультатВыполнения.Вставить("НомерМерчанта" , НомерМерчанта);
			РезультатВыполнения.Вставить("НомерКарты"    , НомерКарты);
			РезультатВыполнения.Вставить("НомерЧекаЭТ"   , НомерЧека);
			РезультатВыполнения.Вставить("СсылочныйНомер", СсылочныйНомер);
			РезультатВыполнения.Вставить("КодАвторизации", КодАвторизации);
			РезультатВыполнения.Вставить("СтатусОперации", СтатусОперации);      
			РезультатВыполнения.Вставить("РеквизитыКартыQR", РеквизитыКартыQR);      
			РезультатВыполнения.Вставить("ИдентификаторКорзины", ИдентификаторКорзины);
			РезультатВыполнения.Вставить("СуммаЭлектронногоСертификата", СуммаЭлектронногоСертификата);
			РезультатВыполнения.Вставить("СуммаСобственныхСредств", СуммаСобственныхСредств);
		Иначе  
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
		РезультатВыполнения.Вставить("ТекстСлипЧека" , ТекстСлипЧека);
		ПодключаемоеОборудование = МенеджерОборудованияКлиент.ПодключаемоеОборудование();
		ПодключаемоеОборудование.ПоследнийСлипЧек = ТекстСлипЧека;
	Исключение              
		РезультатВыполнения = ОшибкаВызоваДрайвера(Команда, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция осуществляет аварийную отмену операции по карте.
//
Функция АварийнаяОтменаОперации(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Попытка
		РезультатВызова = ОбъектДрайвера.АварийнаяОтменаОперации(ПараметрыПодключения.ИДУстройства);
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("АварийнаяОтменаОперации", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция осуществляет сверку итогов по картам.
//
Функция ИтогиДняПоКартам(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	ТекстСлипЧека = "";
	Попытка            
		РезультатВызова = ОбъектДрайвера.ИтогиДняПоКартам(ПараметрыПодключения.ИДУстройства, ТекстСлипЧека); // Структура
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);  
			РезультатВыполнения.Вставить("ТекстСлипЧека", РезультатВызова.Параметры[1]);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("ИтогиДняПоКартам", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ДисплейПокупателя


// Функция возвращает параметры вывода на дисплей покупателя.
//
Процедура НачатьВызовПараметрыВывода(ОповещениеПриЗавершении, ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ПараметрыПодключения",    ПараметрыПодключения);
	Контекст.Вставить("ДанныеОперации",          ДанныеОперации);
	Контекст.Вставить("ОбъектДрайвера",          ОбъектДрайвера);
	
	Если ПараметрыПодключения.РевизияИнтерфейса >= 3004 Тогда
		Попытка
			Оповещение = Новый ОписаниеОповещения("НачатьВызовПараметрыТерминала_ПолучитьПараметрыДисплеяПокупателяЗавершение", ЭтотОбъект, Контекст);
			ОбъектДрайвера.НачатьВызовПолучитьПараметрыДисплеяПокупателя(ПараметрыПодключения.ИДУстройства, "");
		Исключение  
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьПараметрыДисплеяПокупателя", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецПопытки;
	Иначе
		Попытка
			Оповещение = Новый ОписаниеОповещения("НачатьВызовПараметрыТерминала_ПолучитьПараметрыВыводаЗавершение", ЭтотОбъект, Контекст);
			ОбъектДрайвера.НачатьВызовПолучитьПараметрыВывода(ПараметрыПодключения.ИДУстройства, 20, 2); 
		Исключение          
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьПараметрыВывода", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

Процедура НачатьВызовПараметрыТерминала_ПолучитьПараметрыДисплеяПокупателяЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	Если РезультатВызова Тогда
		ПараметрыПодключения = Контекст.ПараметрыПодключения;
		РезультатОперацииXML = ПараметрыВызова[1];
		ПараметрыТерминала = ОбщегоНазначенияБПОКлиент.ПрочитатьКорневойЭлементXML(РезультатОперацииXML);
		Если ПараметрыТерминала.Свойство("Columns") И Не ПустаяСтрока(ПараметрыТерминала.Columns) Тогда
			ПараметрыПодключения.СтолбцовНаДисплее = Число(ПараметрыТерминала.Columns);
		КонецЕсли; 
		Если ПараметрыТерминала.Свойство("Rows") И Не ПустаяСтрока(ПараметрыТерминала.Rows) Тогда
			ПараметрыПодключения.СтрокНаДисплее = Число(ПараметрыТерминала.Rows);
		КонецЕсли; 
		ПараметрыПодключения.ДисплейОтображаетТекст       = ПараметрыТерминала.Свойство("DisplayText") И ВРег(ПараметрыТерминала.DisplayText) = "TRUE"; 
		ПараметрыПодключения.ДисплейОтображаетГрафику     = ПараметрыТерминала.Свойство("DisplayGraphics") И ВРег(ПараметрыТерминала.DisplayGraphics) = "TRUE"; 
		ПараметрыПодключения.ДисплейОтображаетQRКод       = ПараметрыТерминала.Свойство("DisplayQRCode") И ВРег(ПараметрыТерминала.DisplayQRCode) = "TRUE"; 
		ПараметрыПодключения.ДисплейОтображаетHTML        = ПараметрыТерминала.Свойство("DisplayHTML") И ВРег(ПараметрыТерминала.DisplayHTML) = "TRUE"; 
		ПараметрыПодключения.ДисплейОтображаетСтатус      = ПараметрыТерминала.Свойство("DisplayStatus") И ВРег(ПараметрыТерминала.DisplayStatus) = "TRUE"; 
		ПараметрыПодключения.ДисплейОтображаетСостоянияРМ = ПараметрыТерминала.Свойство("DisplayStatus") И ВРег(ПараметрыТерминала.DisplayStatus) = "TRUE"; 
		
		РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		РезультатВыполнения.Вставить("СтолбцовНаДисплее", ПараметрыПодключения.СтолбцовНаДисплее);
		РезультатВыполнения.Вставить("СтрокНаДисплее"   , ПараметрыПодключения.СтрокНаДисплее);
		РезультатВыполнения.Вставить("ДисплейОтображаетТекст"       , ПараметрыПодключения.ДисплейОтображаетТекст);
		РезультатВыполнения.Вставить("ДисплейОтображаетГрафику"     , ПараметрыПодключения.ДисплейОтображаетГрафику);
		РезультатВыполнения.Вставить("ДисплейОтображаетQRКод"       , ПараметрыПодключения.ДисплейОтображаетQRКод);
		РезультатВыполнения.Вставить("ДисплейОтображаетHTML"        , ПараметрыПодключения.ДисплейОтображаетHTML);    
		РезультатВыполнения.Вставить("ДисплейОтображаетСтатус"      , ПараметрыПодключения.ДисплейОтображаетСтатус);  
		РезультатВыполнения.Вставить("ДисплейОтображаетСостоянияРМ" , ПараметрыПодключения.ДисплейОтображаетСостоянияРМ); 
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ПолучитьОшибкуДрайвера(Контекст.ОповещениеПриЗавершении, Контекст.ОбъектДрайвера, "ПолучитьПараметрыДисплеяПокупателя");
	КонецЕсли
	
КонецПроцедуры

Процедура НачатьВызовПараметрыТерминала_ПолучитьПараметрыВыводаЗавершение(РезультатВызова, ПараметрыВызова, Контекст) Экспорт
	
	Если РезультатВызова Тогда
		ПараметрыПодключения = Контекст.ПараметрыПодключения;
		ПараметрыПодключения.СтолбцовНаДисплее = Число(ПараметрыВызова[1]);
		ПараметрыПодключения.СтрокНаДисплее    = Число(ПараметрыВызова[2]);
		РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		РезультатВыполнения.Вставить("СтолбцовНаДисплее", ПараметрыПодключения.СтолбцовНаДисплее);
		РезультатВыполнения.Вставить("СтрокНаДисплее"   , ПараметрыПодключения.СтрокНаДисплее);
		РезультатВыполнения.Вставить("ДисплейОтображаетТекст"  , Истина);
		РезультатВыполнения.Вставить("ДисплейОтображаетГрафику", Ложь);
		РезультатВыполнения.Вставить("ДисплейОтображаетQRКод"  , Ложь);     
		РезультатВыполнения.Вставить("ДисплейОтображаетHTML"   , Ложь);     
		РезультатВыполнения.Вставить("ДисплейОтображаетСтатус" , Ложь);    
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ПолучитьОшибкуДрайвера(Контекст.ОповещениеПриЗавершении, Контекст.ОбъектДрайвера, "ПолучитьПараметрыВывода");
	КонецЕсли;
	
КонецПроцедуры


// Функция возвращает параметры вывода на дисплей покупателя.
//
Функция ПараметрыВывода(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если ПараметрыПодключения.РевизияИнтерфейса >= 3004 Тогда
		Попытка
			РезультатВызова = ОбъектДрайвера.ПолучитьПараметрыДисплеяПокупателя(ПараметрыПодключения.ИДУстройства, ""); // Структура   
			РезультатОперацииXML = РезультатВызова.Параметры[1];
			Если РезультатВызова.Значение Тогда
				ПараметрыТерминала = ОбщегоНазначенияБПОКлиент.ПрочитатьКорневойЭлементXML(РезультатОперацииXML);
				Если ПараметрыТерминала.Свойство("Columns") И Не ПустаяСтрока(ПараметрыТерминала.Columns) Тогда
					ПараметрыПодключения.СтолбцовНаДисплее = Число(ПараметрыТерминала.Columns);
				КонецЕсли; 
				Если ПараметрыТерминала.Свойство("Rows") И Не ПустаяСтрока(ПараметрыТерминала.Rows) Тогда
					ПараметрыПодключения.СтрокНаДисплее = Число(ПараметрыТерминала.Rows);
				КонецЕсли; 
				ПараметрыПодключения.ДисплейОтображаетТекст   = ПараметрыТерминала.Свойство("DisplayText") И ВРег(ПараметрыТерминала.DisplayText) = "TRUE"; 
				ПараметрыПодключения.ДисплейОтображаетГрафику = ПараметрыТерминала.Свойство("DisplayGraphics") И ВРег(ПараметрыТерминала.DisplayGraphics) = "TRUE"; 
				ПараметрыПодключения.ДисплейОтображаетQRКод   = ПараметрыТерминала.Свойство("DisplayQRCode") И ВРег(ПараметрыТерминала.DisplayQRCode) = "TRUE"; 
				ПараметрыПодключения.ДисплейОтображаетHTML    = ПараметрыТерминала.Свойство("DisplayHTML") И ВРег(ПараметрыТерминала.DisplayHTML) = "TRUE"; 
				ПараметрыПодключения.ДисплейОтображаетСтатус  = ПараметрыТерминала.Свойство("DisplayStatus") И ВРег(ПараметрыТерминала.DisplayStatus) = "TRUE"; 
				
				РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
				РезультатВыполнения.Вставить("СтолбцовНаДисплее", ПараметрыПодключения.СтолбцовНаДисплее);
				РезультатВыполнения.Вставить("СтрокНаДисплее"   , ПараметрыПодключения.СтрокНаДисплее);
				РезультатВыполнения.Вставить("ДисплейОтображаетТекст"  , ПараметрыПодключения.ДисплейОтображаетТекст);
				РезультатВыполнения.Вставить("ДисплейОтображаетГрафику", ПараметрыПодключения.ДисплейОтображаетГрафику);
				РезультатВыполнения.Вставить("ДисплейОтображаетQRКод"  , ПараметрыПодключения.ДисплейОтображаетQRКод);
				РезультатВыполнения.Вставить("ДисплейОтображаетHTML"   , ПараметрыПодключения.ДисплейОтображаетHTML);    
				РезультатВыполнения.Вставить("ДисплейОтображаетСтатус" , ПараметрыПодключения.ДисплейОтображаетСтатус);  
			Иначе
				РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
			КонецЕсли         
		Исключение
			РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьПараметрыДисплеяПокупателя", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Попытка
			РезультатВызова = ОбъектДрайвера.ПолучитьПараметрыВывода(ПараметрыПодключения.ИДУстройства, 20, 2); // Структура 
			Если РезультатВызова.Значение Тогда
				ПараметрыПодключения.СтолбцовНаДисплее = Число(РезультатВызова.Параметры[1]);
				ПараметрыПодключения.СтрокНаДисплее    = Число(РезультатВызова.Параметры[2]);
				РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
				РезультатВыполнения.Вставить("СтолбцовНаДисплее", ПараметрыПодключения.СтолбцовНаДисплее);
				РезультатВыполнения.Вставить("СтрокНаДисплее"   , ПараметрыПодключения.СтрокНаДисплее);
				РезультатВыполнения.Вставить("ДисплейОтображаетТекст"  , Истина);
				РезультатВыполнения.Вставить("ДисплейОтображаетГрафику", Ложь);
				РезультатВыполнения.Вставить("ДисплейОтображаетQRКод"  , Ложь);     
				РезультатВыполнения.Вставить("ДисплейОтображаетHTML"   , Ложь);     
				РезультатВыполнения.Вставить("ДисплейОтображаетСтатус" , Ложь);    
			Иначе
				РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
			КонецЕсли;
		Исключение          
			РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьПараметрыВывода", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли; 
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция осуществляет вывод списка строк на дисплей покупателя.
//
Функция ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	СтрокиТекста = ?(ДанныеОперации.Свойство("СтрокиТекста"), ДанныеОперации.СтрокиТекста, НСтр("ru='Данные для вывода не указаны'"));
	Попытка
		РезультатВызова = ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, СтрокиТекста);
		Если РезультатВызова.Значение Тогда
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("ВывестиСтрокуНаДисплейПокупателя", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция осуществляет вывод QR кода на дисплей покупателя.
//
Функция ВывестиQRКодНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	ЗначениеQRКода = ?(ДанныеОперации.Свойство("ЗначениеQRКода"), ДанныеОперации.ЗначениеQRКода, "");
	КартинкаQRКода = ?(ДанныеОперации.Свойство("КартинкаQRКода"), ДанныеОперации.КартинкаQRКода, "");   
	СтрокиТекста = ?(ДанныеОперации.Свойство("СтрокиТекста"), ДанныеОперации.СтрокиТекста, "");  
	
	Если Не ПустаяСтрока(СтрокиТекста) Тогда    
		Попытка
			РезультатВызова = ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, СтрокиТекста);
			Если РезультатВызова.Значение Тогда
				РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
			Иначе
				РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);  
				Возврат РезультатВыполнения;
			КонецЕсли;
		Исключение  
			РезультатВыполнения = ОшибкаВызоваДрайвера("ВывестиСтрокуНаДисплейПокупателя", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));  
			Возврат РезультатВыполнения;
		КонецПопытки;   
	КонецЕсли;
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ВывестиQRКодНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, ЗначениеQRКода, КартинкаQRКода);
		Если РезультатВызова.Значение Тогда
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("ВывестиQRКодНаДисплейПокупателя", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции           

// Функция осуществляет вывод HTML на дисплей покупателя.
//
Функция ВывестиHTMLНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	ТекстHTML = ?(ДанныеОперации.Свойство("ТекстHTML"), ДанныеОперации.ТекстHTML, "");  
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ВывестиHTML(ПараметрыПодключения.ИДУстройства, ТекстHTML);
		Если РезультатВызова.Значение Тогда
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("ВывестиHTML", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции            

// Функция осуществляет вывод информации на дисплей покупателя.
//
Функция ВывестиИнформациюНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)     
	
	РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
	
	Если ПараметрыПодключения.ДисплейОтображаетHTML Тогда
		РезультатВыполнения = ВывестиHTMLНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
	Иначе
		
		Если ПараметрыПодключения.ДисплейОтображаетТекст Тогда      
			РезультатВыполнения = ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		КонецЕсли;
		
		Если ПараметрыПодключения.ДисплейОтображаетQRКод Тогда
			РезультатВыполнения = ВывестиQRКодНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		КонецЕсли;
		
		Если ПараметрыПодключения.ДисплейОтображаетСтатус Тогда       
			СтатусОперации  = ?(ДанныеОперации.Свойство("СтатусОперации"), ДанныеОперации.СтатусОперации, 0);
			Если СтатусОперации = 1 Или СтатусОперации = 2 Тогда
				РезультатВыполнения = ВывестиСтатусНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат РезультатВыполнения;
	
КонецФункции 

// Функция осуществляет вывод статуса на дисплей покупателя.
//
Функция ВывестиСтатусНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Если ПараметрыПодключения.РевизияИнтерфейса < 3009  Тогда
		ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'");
		РезультатВыполнения = РезультатОперацииНаОборудовании(Ложь, ОписаниеОшибки);   
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	СтатусОперации  = ?(ДанныеОперации.Свойство("СтатусОперации"), ДанныеОперации.СтатусОперации, 0);
	Попытка                                                                                    
		РезультатВызова = ОбъектДрайвера.ОтобразитьСтатусОперации(ПараметрыПодключения.ИДУстройства, СтатусОперации);      
		Если РезультатВызова.Значение Тогда
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение    
		РезультатВыполнения = ОшибкаВызоваДрайвера("ОтобразитьСтатусОперации", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции     

// Функция осуществляет очистку дисплея покупателя.
//
Функция ОчиститьДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ОчиститьДисплейПокупателя(ПараметрыПодключения.ИДУстройства);
		Если РезультатВызова.Значение Тогда
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("ОчиститьДисплейПокупателя", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеВесы

// Функция осуществляет получение веса груза, расположенного на весах.
//
Функция ПолучитьВес(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Вес = 0;   
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ПолучитьВес(ПараметрыПодключения.ИДУстройства, Вес); // Структура
		Если РезультатВызова.Значение Тогда                    
			Вес = Число(РезультатВызова.Параметры[1]);
			Если Вес < 0 Тогда
				Вес  = 0;  
			КонецЕсли;           
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
			РезультатВыполнения.Вставить("Вес", Вес);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьВес", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция осуществляет установку веса тары на весах.
//
Функция Тарировать(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)   
	
	ВесТары = ?(ДанныеОперации.Свойство("ВесТары"), Число(ДанныеОперации.ВесТары), 0);
	
	Попытка
		РезультатВызова = ОбъектДрайвера.УстановитьВесТары(ПараметрыПодключения.ИДУстройства, ВесТары);
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("УстановитьВесТары", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция осуществляет выгрузку товаров в весы с печатью этикеток.
//
Функция ВыгрузитьТовары(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	СтатусПакета = "first";
	
	КоличествоПакетов = ДанныеОперации.ПакетыXML.Количество();
	ПроцентИнкремент = 100 / КоличествоПакетов;
	ТекущийПроцент  = 0;
	ТекущийПакет = 0;
	
	СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
	
	Для Каждого ДанныеДляВыгрузки Из ДанныеОперации.ПакетыXML  Цикл
		
		Попытка
			РезультатВызова = ОбъектДрайвера.ВыгрузитьТовары(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Исключение                  
			РезультатВыполнения = ОшибкаВызоваДрайвера("ВыгрузитьТовары", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат РезультатВыполнения;
		КонецПопытки;
		
		Если НЕ РезультатВызова.Значение Тогда
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);        
			Возврат РезультатВыполнения;
		КонецЕсли; 
		ТекущийПакет = ТекущийПакет + 1;
		СтатусПакета = ?(ТекущийПакет < КоличествоПакетов - 1 , "regular", "last");
		ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
		Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
	КонецЦикла; 
	
	РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
	Возврат РезультатВыполнения;   
	
КонецФункции

// Функция осуществляет очистку базы товаров в весах с печатью этикеток.
//
Функция ОчиститьТоварыВВесах(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ОчиститьТовары(ПараметрыПодключения.ИДУстройства);
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("ОчиститьТовары", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;  
	
КонецФункции

#КонецОбласти

#Область ТерминалыСбораДанных

// Очищает загруженную ранее таблицу товаров в ТСД.
//
Функция ОчиститьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Попытка
		РезультатВызова = ОбъектДрайвера.ОчиститьТаблицу(ПараметрыПодключения.ИДУстройства);
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("ОчиститьТаблицу", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;  
	
КонецФункции

// Функция осуществляет загрузку таблицы из терминала сбора данных.
//
Функция ЗагрузитьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Попытка                     
		ДанныеЗагрузки = ""; 
		РезультатВызова = ОбъектДрайвера.ЗагрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеЗагрузки); // Структура
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина); 
			ДанныеЗагрузки = РезультатВызова.Параметры[1];
			ДанныеОперации.Вставить("ДанныеЗагрузки", ДанныеЗагрузки);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение  
		РезультатВыполнения = ОшибкаВызоваДрайвера("ЗагрузитьТаблицу", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатВыполнения;  
	
КонецФункции

// Функция осуществляет выгрузку данных в терминал сбора данных.
//
Функция ВыгрузитьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	СтатусПакета = "first";
	
	КоличествоПакетов = ДанныеОперации.ПакетыXML.Количество();
	ПроцентИнкремент = 100 / КоличествоПакетов;
	ТекущийПроцент  = 0;
	ТекущийПакет = 0;
	
	СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
	
	Для Каждого ДанныеДляВыгрузки Из ДанныеОперации.ПакетыXML  Цикл
		
		Попытка
			РезультатВызова = ОбъектДрайвера.ВыгрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Исключение
			РезультатВыполнения = ОшибкаВызоваДрайвера("ВыгрузитьТаблицу", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат РезультатВыполнения;
		КонецПопытки;
		
		Если НЕ РезультатВызова.Значение Тогда
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);        
			Возврат РезультатВыполнения;
		КонецЕсли; 
		ТекущийПакет = ТекущийПакет + 1;
		СтатусПакета = ?(ТекущийПакет < КоличествоПакетов - 1 , "regular", "last");
		ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
		Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
	КонецЦикла;
	
	РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
	Возврат РезультатВыполнения;   
	
КонецФункции

#КонецОбласти

#Область ПринтерыЭтикеток

Функция ИнициализацияПринтера(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Попытка       
		РезультатВызова = ОбъектДрайвера.ИнициализацияПринтера(ПараметрыПодключения.ИДУстройства);
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ИнициализацияПринтера", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;       
	
	Возврат РезультатВыполнения;  
	
КонецФункции

Функция ПечатьЭтикеток(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
	
	ПакетыДляВыгрузки = ДанныеОперации.ПакетыДляВыгрузки;
	КоличествоПакетов = ПакетыДляВыгрузки.Количество() - 1;
	
	СтатусПакета  = "first";
	Для Счетчик = 0 По КоличествоПакетов Цикл
		Если (Счетчик = КоличествоПакетов) Тогда
			СтатусПакета = "last";
		ИначеЕсли (Счетчик > 1) Тогда
			СтатусПакета = "regular";
		КонецЕсли;
		
		ДанныеДляВыгрузки = ПакетыДляВыгрузки[Счетчик];
		Попытка
			РезультатВызова = ОбъектДрайвера.ПечатьЭтикеток(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Исключение
			РезультатВыполнения = ОшибкаВызоваДрайвера("ПечатьЭтикеток", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));   
			Возврат РезультатВыполнения;
		КонецПопытки;
		
		Если НЕ РезультатВызова.Значение Тогда                    
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);   
			Возврат РезультатВыполнения;
		КонецЕсли;  
		
	КонецЦикла;  
	
	Возврат РезультатВыполнения; 
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляRFIDСчитывателей

// Функция получения данные меток RFID считывателя.
//
Функция ПолучитьДанныеМетокRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации) 
	
	ТаблицаМеток = "";
	ИДПакета = ДанныеОперации.ИДПакета;      
	
	Попытка       
		РезультатВызова = ОбъектДрайвера.ПолучитьДанныеМетокRFID(ПараметрыПодключения.ИДУстройства, ИДПакета, ТаблицаМеток); // Структура
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);   
			ТаблицаМеток = РезультатВызова.Параметры[2];
			РезультатВыполнения.Вставить("ТаблицаМеток", ТаблицаМеток);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ПолучитьДанныеМетокRFID", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;       
	
	Возврат РезультатВыполнения;  
	
КонецФункции

// Функция открывает сессию RFID считывателя.
//
Функция ОткрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Попытка       
		РезультатВызова = ОбъектДрайвера.ОткрытьСессиюRFID(ПараметрыПодключения.ИДУстройства);
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ОткрытьСессиюRFID", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;       
	
	Возврат РезультатВыполнения;  
	
КонецФункции

// Функция закрывает сессию RFID считывателя.
//
Функция ЗакрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	Попытка       
		РезультатВызова = ОбъектДрайвера.ЗакрытьСессиюRFID(ПараметрыПодключения.ИДУстройства);
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ЗакрытьСессиюRFID", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;       
	
	Возврат РезультатВыполнения;  
	
КонецФункции

// Функция записывает данные в метку RFID.
//
Функция ЗаписатьДанныеВМеткуRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации)
	
	// АПК: 1353-выкл TID, EPC - аббревиатура
	Таймаут = ДанныеОперации.Таймаут;
	TID = ДанныеОперации.TID;
	EPC = ДанныеОперации.EPC;
	Данные = ДанныеОперации.Данные;
	БанкПамяти = ?(ДанныеОперации.БанкПамяти = "EPC", 1, 2);
	
	Попытка       
		РезультатВызова = ОбъектДрайвера.ЗаписатьДанныеВМеткуRFID(ПараметрыПодключения.ИДУстройства, TID, EPC, Данные, БанкПамяти, Таймаут);
		Если РезультатВызова.Значение Тогда                    
			РезультатВыполнения = РезультатОперацииНаОборудовании(Истина);
		Иначе
			РезультатВыполнения = ПолучитьОшибкуДрайвера(ОбъектДрайвера);
		КонецЕсли;
	Исключение
		РезультатВыполнения = ОшибкаВызоваДрайвера("ЗаписатьДанныеВМеткуRFID", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;       
	
	Возврат РезультатВыполнения;  
	// АПК: 1353-вкл
	
КонецФункции

Функция ОбработатьСобытиеRFID(ПараметрыПодключения, Событие, Данные)
	
	Результат = Ложь;
	ИмяСобытия = Событие;
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяСчитывательRFID() Тогда
		ДанныеОперации = Новый Структура("ИДПакета", Данные);
		РезультатВыполнения = ПолучитьДанныеМетокRFID(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации);
		Если РезультатВыполнения.Результат Тогда
			ДанныеСобытия = МенеджерОборудованияВызовСервера.МеткиRFID(РезультатВыполнения.ТаблицаМеток);
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РезультатОбработки = Новый Структура();
	РезультатОбработки.Вставить("Результат", Истина);
	РезультатОбработки.Вставить("Событие"  , ИмяСобытия);
	РезультатОбработки.Вставить("Данные"   , ДанныеСобытия);
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

Процедура ОповеститьОбОшибкеПодключения(ТекстСообщения)
	
	Контекст = Новый Структура();
	Контекст.Вставить("ТекстСообщения", ТекстСообщения);
	ОповещениеПриНажатии = Новый ОписаниеОповещения("ОповещениеПриОшибкеПодключенияЗавершение", ЭтотОбъект, Контекст);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Ошибка подключения компоненты.'"),
		ОповещениеПриНажатии,
		ТекстСообщения,
		БиблиотекаКартинок.ОформлениеЗнакКрест,
		СтатусОповещенияПользователя.Важное);
	
КонецПроцедуры

Процедура ОповещениеПриОшибкеПодключенияЗавершение(Контекст) Экспорт
	ПоказатьПредупреждение(, Контекст.ТекстСообщения,,НСтр("ru = 'Ошибка подключения компоненты.'"));
КонецПроцедуры

#КонецОбласти
