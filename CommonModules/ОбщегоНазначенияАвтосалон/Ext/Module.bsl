
////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общего назначения конфигурации ААА6:
//  - работа с часовыми поясам;
//  - работа с условным оформлением;
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Рассчитывает смещение для часового пояса подразделения от часового пояса информационной базы.
//
// Параметры:
//  ПодразделениеКомпании - СправочникСсылка.ПодразделенияКомпании - Подразделение для которого необходимо получить смещение.
//
// Возвращаемое значение:
//  СмещениеВремени - число - Смещение между часовым поясом подразделения и ИБ в секундах.
//
Функция СмещениеВремениВПодразделенииКомпании(ПодразделениеКомпании) Экспорт
	
	ЧасовойПоясПодразделения = Справочники.ПодразделенияКомпании.ПолучитьЧасовойПояс(ПодразделениеКомпании);
	
	Если ЗначениеЗаполнено(ЧасовойПоясПодразделения) И ЧасовойПоясПодразделения <> ЧасовойПоясСеанса() Тогда
		
		ДатаСеанса = ТекущаяДатаСеанса();
		ДатаПодразделения = МестноеВремя(УниверсальноеВремя(ДатаСеанса), ЧасовойПоясПодразделения);
		Возврат ДатаПодразделения - ДатаСеанса;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Объект настроек условного оформления для заполнения процедурой УстановитьУсловноеОформление.
//
// Возвращаемое значение:
//  Структура - Ключи: Поля - Массив; Условия - Массив; Оформление - Структура;
//
Функция НовыйЭлементОформления() Экспорт
	
	Возврат Новый Структура("Поля,Условия,Оформление", Новый Массив, Новый Массив, Новый Структура);
	
КонецФункции

// Объект для описания условия условного оформления.
//
// Возвращаемое значение:
//  Структура - Ключи: Левое - Строка; Правое - Строка, ВидСравнения - ВидСравненияКомпоновкиДанных;
//
Функция НовоеУсловиеОформления() Экспорт
	
	Возврат Новый Структура("Левое,Правое,ВидСравнения",,, ВидСравненияКомпоновкиДанных.Равно);
	
КонецФункции

// Переносит объекты описания элементов оформления в коллекцию формы.
//
// Параметры:
//  - ОформлениеФормы - УсловноеОформлениеКомпоновкиДанных - Коллекция элементов формления формы или списка.
//  - Элементы - Массив - Элементы описания условного формления.
//
Процедура УстановитьУсловноеОформление(ОформлениеФормы, Элементы) Экспорт
	
	ОформлениеФормы.Очистить();
	
	Для Каждого Элемент Из Элементы Цикл
		
		НовыйЭлемент = ОформлениеФормы.Добавить();
		
		Для Каждого Поле Из Элемент.Поля Цикл
			
			НовыйЭлемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Поле);
			
		КонецЦикла;
		
		Для Каждого Условие Из Элемент.Условия Цикл
			
			ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Условие.Левое);
			ЭлементОтбора.ВидСравнения = Условие.ВидСравнения;
			
			Если Условие.Правое <> Неопределено Тогда
				
				ЭлементОтбора.ПравоеЗначение = ?(
					ТипЗнч(Условие.Правое) = Тип("Строка"),
					Новый ПолеКомпоновкиДанных(Условие.Правое),
					Условие.Правое);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из Элемент.Оформление Цикл
			
			НовыйЭлемент.Оформление.УстановитьЗначениеПараметра(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает объем оперативной памяти, доступной клиентскому  приложению.
//
// Возвращаемое значение:
//  Число - количество гигабайтов оперативной памяти с точностью до десятых долей.
//  Неопределено - нет клиентского приложения, то есть ТекущийРежимЗапуска() = Неопределено.
//
Функция ОперативнаяПамятьДоступнаяКлиентскомуПриложению() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДоступныйОбъем = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ОперативнаяПамять");
	Возврат ДоступныйОбъем;
	
КонецФункции

#Область РаботаСЖурналомРегистрации

// Создает запись в журнале регистрации с уровнем "ошибка".
//
// Параметры:
//  Событие - Строка - Событие журнала регистрации.
//  Комментарий - Строка - Комментарий к записи о событии.
//  Контекст - ЛюбаяСсылка, Число, Строка, Дата, Булево, Неопределено, Null, Тип - Данные с которыми связана ошибка.
//
Процедура ОшибкаЖурналаРегистрации(Событие, Комментарий, Знач Контекст) Экспорт
	
	ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,, Контекст, Комментарий);
	
КонецПроцедуры

#КонецОбласти

// Функция получает актуальное наименование на дату.
//
// Параметры:
//  Объект - СправочникСсылка - Объект, для которого получаем наименование.
//  НаДату - Дата - Дата получения сведений
//  ТипНаименования - Строка - (необязательный) - тип получаемого наименования.
//
// Возвращаемое значение:
//  Структура - структура наименований.
//
Функция ПолучитьНаименованияНаДату(Объект, НаДату, ТипНаименования = "") Экспорт
	
	СтруктураНаименований = Новый Структура("СокращенноеНаименование, НаименованиеПолное, НаименованиеДляПечатныхФорм",
		Объект.Наименование,
		Объект.НаименованиеПолное,
		Объект.НаименованиеПолное
	);
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		СтруктураНаименований = Справочники.Контрагенты.НаименованияНаДату(Объект, НаДату);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
		СтруктураНаименований = Справочники.Организации.НаименованияНаДату(Объект, НаДату);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
		СтруктураНаименований = Справочники.ПодразделенияКомпании.НаименованияНаДату(Объект, НаДату);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипНаименования) Тогда
		Возврат СтруктураНаименований[ТипНаименования];
	Иначе
		Возврат СтруктураНаименований;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выгрузка таблицы значений с установленными отборами.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений - Исходная таблица значений для выгрузки.
//	СтруктураОтбора - Структура - Структура с отборами строк таблицы источника.
//	Колонки - Строка - Имена колонок для выгрузки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - результат выгрузки из исходной таблицы значений.
//
Функция ВыгрузитьТаблицуЗначений(ТаблицаИсточник, СтруктураОтбора, Колонки = Неопределено) Экспорт 

	МассивСтрок = ТаблицаИсточник.НайтиСтроки(СтруктураОтбора);

	Если Колонки = Неопределено Тогда 
		ТаблицаПриемник = ТаблицаИсточник.Скопировать(МассивСтрок);
	Иначе 
		ТаблицаПриемник = ТаблицаИсточник.Скопировать(МассивСтрок, Колонки);
	КонецЕсли;
	
	Возврат ТаблицаПриемник;
	
КонецФункции

#КонецОбласти
