////////////////////////////////////////////////////////////////////////////////
// Модуль обеспечивает работоспособность обработки СостояниеОбеспечения.
//
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

// Выполняет автоматическое резервирование товаров под заказ.
//
// Параметры:
//  Заказ - ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказВнутренний - Документ заказа.
//  ДляНоменклатуры - ТаблицаЗначений - Номенклатура для которой необходимо выполнить резервирование.
//  Комментарий - Строка - Комментарий к созданным документам.
//  НаСкладе - Булево - Признак выполнения резервирования на складах.
//  ВЗаказах - Булево - Признак выполнения резервирования в заказах поставщиков.
//
// Возвращаемое значение:
//  Булево - Признак успешного резервирования.
//
Функция РезервироватьТоварыПоЗаказуКлиента(
	Заказ,
	ДляНоменклатуры,
	Комментарий="",
	НаСкладе=Истина,
	ВЗаказах=Истина) Экспорт
	
	Если НЕ НаСкладе И НЕ ВЗаказах Тогда
		
		ВызватьИсключение НСтр("ru = 'Обязательно указывать хотябы одну область резервирования ""НаСкладе"" или ""ВЗаказах""'");
		
	КонецЕсли;
	
	ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "СкладКомпании,ПодразделениеКомпании");
	
	Если НаСкладе Тогда
		
		ДокументРезервированияНаСкладе = Документы.РезервированиеЗаказовПокупателя.СоздатьДокумент();
		ДокументРезервированияНаСкладе.Заполнить(Заказ);
		ДокументРезервированияНаСкладе.Товары.Очистить();
		ДокументРезервированияНаСкладе.Комментарий = Комментарий;
		
	КонецЕсли;
	
	Если ВЗаказах Тогда
		
		ДокументРезервированияВЗаказах = Документы.РаспределениеЗаказаПокупателя.СоздатьДокумент();
		ДокументРезервированияВЗаказах.Заполнить(Заказ);
		ДокументРезервированияВЗаказах.Товары.Очистить();
		ДокументРезервированияВЗаказах.Комментарий = Комментарий;
		
	КонецЕсли;
	
	ВыборкаНоменклатура = ОстаткиДляРезервирования(ДляНоменклатуры, ДанныеЗаказа, НаСкладе, ВЗаказах);
	Отказ = Ложь;
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			Если ВыборкаХарактеристика.Требуется > ВыборкаХарактеристика.Доступно Тогда
				
				ПредставлениеНоменклатуры = Новый Массив;
				ПредставлениеНоменклатуры.Добавить(Строка(ВыборкаХарактеристика.Номенклатура));
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристика.ХарактеристикаНоменклатуры) Тогда
					ПредставлениеНоменклатуры.Добавить(Строка(ВыборкаХарактеристика.ХарактеристикаНоменклатуры));
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(
					"ru = 'Не хватает %1 для резервирования в количестве %2'",
					СтрСоединить(ПредставлениеНоменклатуры, " "),
					ВыборкаХарактеристика.Требуется - ВыборкаХарактеристика.Доступно);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				Продолжить;
				
			КонецЕсли;
			
			ОсталосьСписать = ВыборкаХарактеристика.Требуется;
			Выборка = ВыборкаХарактеристика.Выбрать();
			
			Пока Выборка.Следующий() И ОсталосьСписать > 0 Цикл
				
				Если Выборка.Доступно = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.Приоретет = 0 Тогда
					
					НоваяСтрока = ДокументРезервированияНаСкладе.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.ЗаказПокупателя = Заказ;
					Документы
						.РезервированиеЗаказовПокупателя
						.ТоварыНоменклатураПриИзменении(ДокументРезервированияНаСкладе, НоваяСтрока);
					НоваяСтрока.Количество = Мин(ОсталосьСписать, Выборка.Доступно);
					ОсталосьСписать = ОсталосьСписать - НоваяСтрока.Количество;
					
				Иначе
					
					НоваяСтрока = ДокументРезервированияВЗаказах.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.ЗаказПоставщику = Выборка.МестоРазмещения;
					Документы
						.РаспределениеЗаказаПокупателя
						.ТоварыНоменклатураПриИзменении(ДокументРезервированияВЗаказах, НоваяСтрока);
					НоваяСтрока.Количество = Мин(ОсталосьСписать, Выборка.Доступно);
					ОсталосьСписать = ОсталосьСписать - НоваяСтрока.Количество;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		Если НаСкладе И ДокументРезервированияНаСкладе.Товары.Количество() > 0 Тогда
			ДокументРезервированияНаСкладе.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		КонецЕсли;
		
		Если ВЗаказах И ДокументРезервированияВЗаказах.Товары.Количество() > 0 Тогда
			ДокументРезервированияВЗаказах.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // РезервироватьТоварыПоЗаказуКлиента()

// Формирует данные номенклатуры для таблицы "ПодобранныеПозиции".
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой формируются данные
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ВладелецХарактеристики - СправочникСсылка.Номенклатура,
//								СправочникСсылка.ТипыНоменклатуры, НЕОПРЕДЕЛЕНО - владелец характеристики.
//
Функция ДанныеПодобраннойНоменклатуры(Номенклатура) Экспорт
	
	Результат = Новый Структура("ВладелецХарактеристики");
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура,
																													"ТипНоменклатуры,ТипНоменклатуры.ИспользованиеХарактеристик");
	
	Если Реквизиты.ТипНоменклатурыИспользованиеХарактеристик = 1 Тогда
		
		Результат.ВладелецХарактеристики = Реквизиты.ТипНоменклатуры;
		
	ИначеЕсли  Реквизиты.ТипНоменклатурыИспользованиеХарактеристик = 2 Тогда
		
		Результат.ВладелецХарактеристики = Номенклатура;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДанныеПодобраннойНоменклатуры()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура СостояниеОбеспечения(ПараметрыФормирования, АдресРезультата) Экспорт
	
	СостояниеОбеспечения = Новый ДеревоЗначений;
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	СКД = Обработки.СостояниеОбеспечения.ПолучитьМакет("СостояниеОбеспечения");
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	УстановитьФильтрыВКомпоновщик(Компоновщик, ПараметрыФормирования);
	ОтбиратьГотовыеКОтгрузкеПолностью = ПараметрыФормирования.Фильтры.Состояние.Найти(3) <> Неопределено;
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакетаКомпоновкиДанных
		.Выполнить(СКД, Компоновщик.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(СостояниеОбеспечения);
	ПроцессорВывода.НачатьВывод();
	Если НЕ ОтбиратьГотовыеКОтгрузкеПолностью Тогда
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	Иначе
		ВыводитьЭлементы = Истина;
		Пока Истина Цикл
			ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
			Если ЭлементРезультата = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если ЭлементРезультата.Макет = "Макет2" Тогда
				ВыводитьЭлементы = ЭлементРезультата.ЗначенияПараметров.П5.Значение = 2;
			КонецЕсли;
			
			Если ВыводитьЭлементы = Истина Тогда
				ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПроцессорВывода.ЗакончитьВывод();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		СостояниеОбеспечения.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СостояниеОбеспечения, АдресРезультата);
	
КонецПроцедуры

Процедура ДополнитьОтборСпискаНоменклатурой(Список, ПараметрыСписка) Экспорт
	
	Отборы = РазобратьОтборыСписка(ПараметрыСписка, ВидСравненияКомпоновкиДанных);
	
	Если Отборы.Пустые Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Отборы.ЕстьПоНоменклатуре Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																																						"Номенклатура",
																																						Отборы.НоменклатураЗначениеОтбора,
																																						Отборы.НоменклатураВидСравнения,
																																						,
																																						Истина,
																																						РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
	Если Отборы.ЕстьПоХарактеристике Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																																						"ХарактеристикаНоменклатуры",
																																						Отборы.ХарактеристикаЗначениеОтбора,
																																						Отборы.ХарактеристикаВидСравнения,
																																						,
																																						Истина,
																																						РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнитьОтборПостроителяНоменклатурой(Построитель, ПараметрыСписка) Экспорт
	
	Отборы = РазобратьОтборыСписка(ПараметрыСписка);
	
	Если Отборы.Пустые Тогда
		
		Возврат Построитель;
		
	КонецЕсли;
	
	Если Отборы.ЕстьПоНоменклатуре Тогда
		
		НовыйЭлемент = Построитель.Отбор.Добавить("Номенклатура");
		НовыйЭлемент.Использование = Истина;
		НовыйЭлемент.ВидСравнения = Отборы.НоменклатураВидСравнения;
		НовыйЭлемент.Значение = Отборы.НоменклатураЗначениеОтбора;
		
	КонецЕсли;
	
	Если Отборы.ЕстьПоХарактеристике Тогда
		
		НовыйЭлемент = Построитель.Отбор.Добавить("ХарактеристикаНоменклатуры");
		НовыйЭлемент.Использование = Истина;
		НовыйЭлемент.ВидСравнения = Отборы.ХарактеристикаВидСравнения;
		НовыйЭлемент.Значение = Отборы.ХарактеристикаЗначениеОтбора;
		
	КонецЕсли;
	
	Возврат Построитель;
	
КонецФункции

Функция ДоступныеСкладыПоУмолчанию() Экспорт
	
	СтандартнаяОбработка = Истина;
	ДоступныеСклады = СостояниеОбеспеченияПереопределяемый.ДоступныеСкладыПоУмолчанию(СтандартнаяОбработка);
	ТипДоступныеСклады = ТипЗнч(ДоступныеСклады);
	
	Если НЕ СтандартнаяОбработка И ТипДоступныеСклады <> Тип("ФиксированныйМассив") Тогда
		
		ВызватьИсключение СтрШаблон("ru = 'Тип %1 не совпадает с ожидаемым ФиксированныйМассив.'", ТипДоступныеСклады);
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		ОсновнойСкладКомпании = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании");
		СкладыПользователя = Новый Массив();
		
		Если ЗначениеЗаполнено(ОсновнойСкладКомпании) Тогда
			
			СкладыПользователя = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновнойСкладКомпании);
			
		КонецЕсли;
		
		ДоступныеСклады = Новый ФиксированныйМассив(СкладыПользователя);
		
	КонецЕсли;
	
	Возврат ДоступныеСклады;
	
КонецФункции

Функция ЗаголовокОкна(Заказ, Префикс) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "ХозОперация,Номер,Дата");
	
	СоставЗаголовка = Новый Массив;
	СоставЗаголовка.Добавить(Префикс);
	СоставЗаголовка.Добавить(
		СтрШаблон(
			"""%1 №%2 от %3""",
			Реквизиты.ХозОперация,
			ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(Реквизиты.Номер),
			Формат(Реквизиты.Дата, "ДЛФ=D")
		)
	);
	Возврат СтрСоединить(СоставЗаголовка, " ");
	
КонецФункции

Функция ПредставлениеГруппыДерева(Группа) Экспорт
	
	СоставПредставления = Новый Массив;
	
	Если ЗначениеЗаполнено(Группа.Номенклатура) Тогда
		
		Артикул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Группа.Номенклатура, "Артикул");
		Если ЗначениеЗаполнено(Артикул) Тогда
			
			СоставПредставления.Добавить(Артикул);
			
		КонецЕсли;
		
		СоставПредставления.Добавить(Группа.Номенклатура);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Группа.ХарактеристикаНоменклатуры) Тогда
		
		СоставПредставления.Добавить(Группа.ХарактеристикаНоменклатуры);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Группа.ВРезерве) Тогда
		
		СоставПредставления.Добавить(Группа.ВРезерве);
		
	КонецЕсли;
	
	Возврат СтрСоединить(СоставПредставления, " / ");
	
КонецФункции

// Заполняет условное оформление списка источников перемещения
//
// Параметры:
//  Список - ДинамическийСписок - оформляемый список.
//
Процедура УстановитьУсловноеОформлениеСписка(Список) Экспорт
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ХарактеристикаНоменклатуры");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без характеристик>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХарактеристикаНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
КонецПроцедуры // УстановитьУсловноеОформлениеСписка()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьФильтрыВКомпоновщик(Компоновщик, ПараметрыФормирования)
	
	СоответствиеПолейФильтров = СоответствиеПолейФильтров();
	ВидыСравненияФильтров = ВидыСравненияФильтров();
	
	Для Каждого Фильтр Из ПараметрыФормирования.Фильтры Цикл
		ПолеИзСоответствия = СоответствиеПолейФильтров.Получить(Фильтр.Ключ);
		Поле = ?(ПолеИзСоответствия = Неопределено, Фильтр.Ключ, ПолеИзСоответствия);
		
		ВидСравненияПоля = ПолучитьЗначениеПараметраСтруктуры(
			ВидыСравненияФильтров,
			Фильтр.Ключ,
			ВидСравненияКомпоновкиДанных.Равно);
		
		ПравоеЗначение = Фильтр.Значение;
		Если Фильтр.Ключ = "Состояние" И ПравоеЗначение.Найти(3) <> Неопределено Тогда
			ПравоеЗначение = Новый Массив();
			ПравоеЗначение.Добавить(0);
			ПравоеЗначение.Добавить(1);
			ПравоеЗначение.Добавить(2);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер
			.УстановитьЭлементОтбора(Компоновщик.Настройки.Отбор, Поле, ПравоеЗначение, ВидСравненияПоля,, Истина);
		
	КонецЦикла;
	
	Компоновщик
		.Настройки
		.ПараметрыДанных
		.УстановитьЗначениеПараметра("ДоступныеСклады",ПараметрыФормирования.Параметры.Склады);
	
КонецПроцедуры

Функция СоответствиеПолейФильтров()
	
	ПоляФильтров = Новый Соответствие;
	ПоляФильтров.Вставить("Клиент", "Контрагент");
	Возврат ПоляФильтров;
	
КонецФункции

Функция ВидыСравненияФильтров()
	
	Возврат Новый Структура(
		"ПодразделениеКомпании,Состояние",
		ВидСравненияКомпоновкиДанных.ВИерархии,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецФункции

Функция ОстаткиДляРезервирования(Товары, Заказ, НаСкладе=Истина, ВЗаказах=Истина)
	
	#Область ТекстЗапроса
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.КРезервированию КАК Требуется
	|ПОМЕСТИТЬ ДляРезервирования
	|ИЗ
	|	&Т КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток КАК Доступно
	|ПОМЕСТИТЬ ДоступноНаСкладах
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
	|			,
	|			СкладКомпании = &Склад
	|			И (Номенклатура, ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					ДляРезервирования.Номенклатура,
	|					ДляРезервирования.Характеристика
	|				ИЗ
	|					ДляРезервирования КАК ДляРезервирования)) КАК ОстаткиТоваровКомпанииОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК Заказано
	|ПОМЕСТИТЬ ЗаказаноПоставщикам
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			,
	|			ЗаказПоставщику.ПодразделениеКомпании = &ПодразделениеКомпании
	|				И (Номенклатура, ХарактеристикаНоменклатуры) В
	|					(ВЫБРАТЬ
	|						ДляРезервирования.Номенклатура,
	|						ДляРезервирования.Характеристика
	|					ИЗ
	|						ДляРезервирования КАК ДляРезервирования)) КАК ЗаказыПоставщикамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказаноПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказаноПоставщикам.Номенклатура КАК Номенклатура,
	|	ЗаказаноПоставщикам.Характеристика КАК Характеристика,
	|	ЗаказаноПоставщикам.Заказано - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК Доступно
	|ПОМЕСТИТЬ ДоступноВЗаказах
	|ИЗ
	|	ЗаказаноПоставщикам КАК ЗаказаноПоставщикам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
	|			,
	|			ЗаказПоставщика В
	|			(ВЫБРАТЬ ЗаказаноПоставщикам.ЗаказПоставщику ИЗ ЗаказаноПоставщикам КАК ЗаказаноПоставщикам)
	|		) КАК ЗаказыРаспределениеОстатки
	|		ПО ЗаказаноПоставщикам.ЗаказПоставщику = ЗаказыРаспределениеОстатки.ЗаказПоставщика
	|			И ЗаказаноПоставщикам.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	|			И ЗаказаноПоставщикам.Характеристика = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗаказаноПоставщикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДляРезервирования.Номенклатура КАК Номенклатура,
	|	ДляРезервирования.Характеристика КАК Характеристика,
	|	ДляРезервирования.Требуется КАК Требуется,
	|	ЕСТЬNULL(ДоступноНаСкладах.Доступно, 0) КАК Доступно,
	|	&Склад КАК МестоРазмещения,
	|	0 КАК Приоретет
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ДляРезервирования КАК ДляРезервирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступноНаСкладах КАК ДоступноНаСкладах
	|		ПО ДляРезервирования.Номенклатура = ДоступноНаСкладах.Номенклатура
	|			И ДляРезервирования.Характеристика = ДоступноНаСкладах.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДляРезервирования.Номенклатура,
	|	ДляРезервирования.Характеристика,
	|	ДляРезервирования.Требуется,
	|	ЕСТЬNULL(ДоступноВЗаказах.Доступно, 0) КАК Доступно,
	|	ЕСТЬNULL(ДоступноВЗаказах.ЗаказПоставщику, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК МестоРазмещения,
	|	1 КАК Приоретет
	|ИЗ
	|	ДляРезервирования КАК ДляРезервирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступноВЗаказах КАК ДоступноВЗаказах
	|		ПО ДляРезервирования.Номенклатура = ДоступноВЗаказах.Номенклатура
	|			И ДляРезервирования.Характеристика = ДоступноВЗаказах.Характеристика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблица.Характеристика КАК ХарактеристикаНоменклатуры,
	|	ИтоговаяТаблица.МестоРазмещения КАК МестоРазмещения,
	|	ИтоговаяТаблица.Требуется КАК Требуется,
	|	ИтоговаяТаблица.Доступно КАК Доступно,
	|	ИтоговаяТаблица.Приоретет КАК Приоретет
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|%1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоретет
	|ИТОГИ
	|	МАКСИМУМ(Требуется),
	|	СУММА(Доступно)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	#КонецОбласти
	
	Если НЕ НаСкладе ИЛИ НЕ ВЗаказах Тогда
		
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, СтрШаблон("ГДЕ ИтоговаяТаблица.Приоретет = %1", ?(НаСкладе, 0, 1)));
		
	Иначе
		
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, "");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Т", Товары);
	Запрос.УстановитьПараметр("Склад", Заказ.СкладКомпании);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Заказ.ПодразделениеКомпании);
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция РазобратьОтборыСписка(ПараметрыСписка, ВидСравненияЗначения=Неопределено)
	
	Результат = Новый Структура("Пустые", Истина);
	Товары = ПолучитьЗначениеПараметраСтруктуры(ПараметрыСписка, "Товары", Новый Массив());
	
	Если НЕ Товары.Количество() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Пустые = Ложь;
	
	Номенклатура = Новый Массив();
	Характеристики = Новый Массив();
	
	Если ВидСравненияЗначения = Неопределено Тогда
		
		ВидСравненияЗначения = ВидСравнения;
		
	КонецЕсли;
	
	Для Каждого Товар Из Товары Цикл
		
		Номенклатура.Добавить(Товар.Номенклатура);
		Характеристики.Добавить(Товар.ХарактеристикаНоменклатуры);
		
	КонецЦикла;
	
	Номенклатура = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Номенклатура);
	ВидСравненияНоменклатура = ВидСравненияЗначения.ВСписке;
	ЗначениеОтбораНоменклатура = Новый СписокЗначений;
	ЗначениеОтбораНоменклатура.ЗагрузитьЗначения(Номенклатура);
	
	Если Номенклатура.Количество() = 1 Тогда
		
		ВидСравненияНоменклатура = ВидСравненияЗначения.Равно;
		ЗначениеОтбораНоменклатура = Номенклатура[0];
		
	КонецЕсли;
	
	Результат.Вставить("ЕстьПоНоменклатуре", ЗначениеЗаполнено(ЗначениеОтбораНоменклатура));
	Результат.Вставить("НоменклатураВидСравнения",ВидСравненияНоменклатура);
	Результат.Вставить("НоменклатураЗначениеОтбора", ЗначениеОтбораНоменклатура);
	
	Характеристики = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Характеристики);
	ВидСравненияХарактеристики = ВидСравненияЗначения.ВСписке;
	ЗначениеОтбораХарактеристики = Новый СписокЗначений;
	ЗначениеОтбораХарактеристики.ЗагрузитьЗначения(Характеристики);
	
	Если Характеристики.Количество() = 1 Тогда
		
		ВидСравненияХарактеристики = ВидСравненияЗначения.Равно;
		ЗначениеОтбораХарактеристики = Характеристики[0];
		
	КонецЕсли;
	
	Результат.Вставить("ЕстьПоХарактеристике", ЗначениеЗаполнено(ЗначениеОтбораХарактеристики));
	Результат.Вставить("ХарактеристикаВидСравнения",ВидСравненияХарактеристики);
	Результат.Вставить("ХарактеристикаЗначениеОтбора", ЗначениеОтбораХарактеристики);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти