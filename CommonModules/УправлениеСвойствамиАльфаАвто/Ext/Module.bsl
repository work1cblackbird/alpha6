
////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.  

#Область ПрограммныйИнтерфейс

// Выполняет перенос свойств грузоотправитель и грузополучатель в реквизиты объекта
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//  РезультатПроверки - Структура - результат переноса
//
Процедура ВыполнитьПереносСвойствГрузоотправительГрузополучатель(Параметры, РезультатПроверки = Неопределено) Экспорт

	// 1. Перенесем заполненные свойства в реквизиты объекта
	ПеренесеныВсеСвойства = Истина;
	
	МассивСвойств = Новый Массив(2);
	МассивСвойств[0] = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Грузоотправитель"];
	МассивСвойств[1] = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Грузополучатель"];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Объект,
		|	ДополнительныеСведения.Свойство КАК Свойство,
		|	ДополнительныеСведения.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство В(&МассивСвойств)";
	
	Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		// Проверка результата обновления
		Если РезультатПроверки <> Неопределено Тогда
			РезультатПроверки.ПереносВыполненУспешно = Ложь;
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				Если ЗначениеЗаполнено(Выборка.Значение) Тогда
					ЕстьГрузоотправитель = Ложь; ЕстьГрузополучатель = Ложь;
					Если Выборка.Свойство = МассивСвойств[0] Тогда
						ЕстьГрузоотправитель = ЕстьРеквизит(Выборка.Объект, "Грузоотправитель") И Выборка.Объект.Грузоотправитель <> Выборка.Значение;	
					ИначеЕсли Выборка.Свойство = МассивСвойств[1] Тогда
						ЕстьГрузополучатель = ЕстьРеквизит(Выборка.Объект, "Грузополучатель") И Выборка.Объект.Грузополучатель <> Выборка.Значение;	
					КонецЕсли;	
					Если ЕстьГрузоотправитель ИЛИ ЕстьГрузополучатель Тогда		
						// Блокируем объект от изменения другими сеансами.
						Блокировка = Новый БлокировкаДанных;
						ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Выборка.Объект));
						ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Объект);
						Блокировка.Заблокировать();	
						ИзменяемыйОбъект = Выборка.Объект.ПолучитьОбъект();	
						Если ЕстьГрузоотправитель Тогда
							ИзменяемыйОбъект.Грузоотправитель = Выборка.Значение;	
						ИначеЕсли ЕстьГрузополучатель Тогда
							ИзменяемыйОбъект.Грузополучатель = Выборка.Значение;
						КонецЕсли;	
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИзменяемыйОбъект);	
					КонецЕсли;
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ПеренесеныВсеСвойства = Ложь;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось обработать дополнительное сведение: %1 по причине:
						|%2'"), 
						Выборка.Объект, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.РегистрыСведений.ДополнительныеСведения, Выборка.Объект, ТекстСообщения);
			КонецПопытки;
		КонецЦикла;	
		
		// 2. Очистим регистр сведений от этих свойств
		Если ПеренесеныВсеСвойства Тогда
			НачатьТранзакцию();
			Попытка
				// Грузоотправитель
				ДополнительныеСведенияНабор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				ДополнительныеСведенияНабор.Отбор.Свойство.Установить(МассивСвойств[0]);
				ДополнительныеСведенияНабор.Записать();
				// Грузополучатель
				ДополнительныеСведенияНабор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				ДополнительныеСведенияНабор.Отбор.Свойство.Установить(МассивСвойств[1]);
				ДополнительныеСведенияНабор.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ПеренесеныВсеСвойства = Ложь;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось обработать регистр сведений: ""ДополнительныеСведения"" по причине:
						|%1'"), 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.РегистрыСведений.ДополнительныеСведения, "ДополнительныеСведения", ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	// 3. Отключим использование этих свойств и пометим на удаление
	Если ПеренесеныВсеСвойства Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Свойство В(&МассивСвойств)
		|	И НЕ НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка";
		
		Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			// Проверка результата обновления
			Если РезультатПроверки <> Неопределено Тогда
				РезультатПроверки.ПереносВыполненУспешно = Ложь;
				Возврат;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				НачатьТранзакцию();
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();	
					Для Каждого ДополнительноеСведение Из НаборОбъект.ДополнительныеСведения Цикл
						Если ДополнительноеСведение.Свойство = МассивСвойств[0]
						 ИЛИ ДополнительноеСведение.Свойство = МассивСвойств[1] Тогда
							ДополнительноеСведение.ПометкаУдаления = Истина;
							СвойствоОбъект = ДополнительноеСведение.Свойство.ПолучитьОбъект();
							СвойствоОбъект.Виден = Ложь;
							СвойствоОбъект.Доступен = Ложь;
							СвойствоОбъект.ПометкаУдаления = Истина;
							ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СвойствоОбъект);
						КонецЕсли;
					КонецЦикла;	
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат переноса свойств грузоотправитель и грузополучатель
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  РезультатПроверки - Структура - результат переноса
//
Функция ПроверитьПереносСвойствГрузоотправительГрузополучатель(Параметры) Экспорт
	
	РезультатПроверки = Новый Структура("ПереносВыполненУспешно", Истина);
	ВыполнитьПереносСвойствГрузоотправительГрузополучатель(Параметры, РезультатПроверки);
	
	Возврат РезультатПроверки.ПереносВыполненУспешно; 
	
КонецФункции

// Выполняет перенос свойства РуководительПодразделения в реквизит объекта
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//  РезультатПроверки - Структура - результат переноса
//
Процедура ВыполнитьПереносСвойстваРуководительПодразделения(Параметры, РезультатПроверки = Неопределено) Экспорт

	// 1. Перенесем заполненные свойства в сведения компании
	ПеренесеныВсеСвойства = Истина;
	
	СвойствоРуководитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Руководитель"]; 
	ЗначениеРуководитель = Перечисления.ВидыОбъектовСведений.Руководитель;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Объект,
		|	ДополнительныеСведения.Свойство КАК Свойство,
		|	ДополнительныеСведения.Значение КАК Значение,
		|	ЕСТЬNULL(СведенияКомпанииСрезПоследних.Значение, НЕОПРЕДЕЛЕНО) КАК ЗначениеСведенийКомпании
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКомпании.СрезПоследних(, ) КАК СведенияКомпанииСрезПоследних
		|		ПО ДополнительныеСведения.Объект = СведенияКомпанииСрезПоследних.Организация
		|			И (СведенияКомпанииСрезПоследних.Объект = &ЗначениеРуководитель)
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &СвойствоРуководитель
		|	И ДополнительныеСведения.Объект ССЫЛКА Справочник.ПодразделенияКомпании";
	
	Запрос.УстановитьПараметр("СвойствоРуководитель", СвойствоРуководитель);
	Запрос.УстановитьПараметр("ЗначениеРуководитель", ЗначениеРуководитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		// Проверка результата обновления
		Если РезультатПроверки <> Неопределено Тогда
			РезультатПроверки.ПереносВыполненУспешно = Ложь;
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				Если ЗначениеЗаполнено(Выборка.Значение) Тогда
					// Перенесем свойство если его нет в сведениях компании
					Если НЕ ЗначениеЗаполнено(Выборка.ЗначениеСведенийКомпании) Тогда
						СведенияКомпанииМенеджер = РегистрыСведений.СведенияКомпании.СоздатьМенеджерЗаписи();
						СведенияКомпанииМенеджер.Организация = Выборка.Объект;
						СведенияКомпанииМенеджер.Объект = ЗначениеРуководитель;
						СведенияКомпанииМенеджер.Значение = Выборка.Значение; 
						СведенияКомпанииМенеджер.Записать();
					КонецЕсли;
					// Удалим свойство из дополнительных сведений
					ДополнительныеСведенияМенеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					ДополнительныеСведенияМенеджер.Объект = Выборка.Объект;
					ДополнительныеСведенияМенеджер.Свойство = СвойствоРуководитель;
					ДополнительныеСведенияМенеджер.Удалить();
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ПеренесеныВсеСвойства = Ложь;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось обработать дополнительное сведение: %1 по причине:
						|%2'"), 
						Выборка.Объект, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.РегистрыСведений.ДополнительныеСведения, Выборка.Объект, ТекстСообщения);
			КонецПопытки;
		КонецЦикла;	
		
	КонецЕсли;
	
	// 2. Отключим использование этих свойств и пометим на удаление
	Если ПеренесеныВсеСвойства Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Свойство = &СвойствоРуководитель
		|	И НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Справочник_ПодразделенияКомпании""
		|	И НЕ НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("СвойствоРуководитель", СвойствоРуководитель);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			// Проверка результата обновления
			Если РезультатПроверки <> Неопределено Тогда
				РезультатПроверки.ПереносВыполненУспешно = Ложь;
				Возврат;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				НачатьТранзакцию();
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();	
					Для Каждого ДополнительныйРеквизит Из НаборОбъект.ДополнительныеРеквизиты Цикл
						Если ДополнительныйРеквизит.Свойство = СвойствоРуководитель Тогда 
							ДополнительныйРеквизит.ПометкаУдаления = Истина;
							СвойствоОбъект = ДополнительныйРеквизит.Свойство.ПолучитьОбъект();
							СвойствоОбъект.Виден = Ложь;
							СвойствоОбъект.Доступен = Ложь;
							СвойствоОбъект.ПометкаУдаления = Истина;
							ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СвойствоОбъект);
						КонецЕсли;
					КонецЦикла;	
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат переноса свойства РуководительПодразделения
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  РезультатПроверки - Структура - результат переноса
//
Функция ПроверитьПереносСвойстваРуководительПодразделения(Параметры) Экспорт

	РезультатПроверки = Новый Структура("ПереносВыполненУспешно", Истина);
	ВыполнитьПереносСвойстваРуководительПодразделения(Параметры, РезультатПроверки);
	
	Возврат РезультатПроверки.ПереносВыполненУспешно;
	
КонецФункции

// Выполняет перенос свойств Руководитель, Главный бухгалтер, Отпустил, Получил, Доверенность
// в реквизиты объекта
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
Процедура ВыполнитьПереносПодписантовИзСвойств(Параметры) Экспорт 
	
	Документы.АктРазногласий.ВыполнитьПереносПодписантовИзСвойств();
	Документы.ВозвратПоставщику.ВыполнитьПереносПодписантовИзСвойств();
	Документы.ВозвратПоставщикуАвтомобилей.ВыполнитьПереносПодписантовИзСвойств();
	Документы.ЗаказНаряд.ВыполнитьПереносПодписантовИзСвойств();  
	Документы.КорректировкаПоступления.ВыполнитьПереносПодписантовИзСвойств();
	Документы.КорректировкаПоступленияАвтомобилей.ВыполнитьПереносПодписантовИзСвойств();
	Документы.КорректировкаРеализации.ВыполнитьПереносПодписантовИзСвойств();
	Документы.КорректировкаРеализацииАвтомобилей.ВыполнитьПереносПодписантовИзСвойств();
	Документы.ОтчетКомиссионера.ВыполнитьПереносПодписантовИзСвойств();
	Документы.ОтчетКомиссионераЗаАвтомобили.ВыполнитьПереносПодписантовИзСвойств();
	Документы.ПоступлениеАвтомобилей.ВыполнитьПереносПодписантовИзСвойств();
	Документы.ПоступлениеТоваров.ВыполнитьПереносПодписантовИзСвойств();
	Документы.ПоступлениеДопРасходов.ВыполнитьПереносПодписантовИзСвойств();
	Документы.РеализацияАвтомобилей.ВыполнитьПереносПодписантовИзСвойств();
	Документы.РеализацияАктивов.ВыполнитьПереносПодписантовИзСвойств();
	Документы.РеализацияТоваров.ВыполнитьПереносПодписантовИзСвойств(); 
	Документы.СчетФактураВыданный.ВыполнитьПереносПодписантовИзСвойств();
	Документы.СчетФактураПолученный.ВыполнитьПереносПодписантовИзСвойств();
	Документы.Чек.ВыполнитьПереносПодписантовИзСвойств(); 
	
КонецПроцедуры 

// Возвращает результат переноса свойств Руководитель, Главный бухгалтер, Отпустил, Получил, Доверенность
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  РезультатПроверки - Структура - результат переноса
//
Функция ПроверитьПереносПодписантовИзСвойств(Параметры) Экспорт  
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Параметры.ПолноеИмя);
	Возврат МенеджерОбъекта.ПроверитьПереносПодписантовИзСвойств(Параметры.Отбор);
	
КонецФункции

Процедура ВключитьИспользованиеСвойстваРуководитель() Экспорт
	
	СвойствоРуководитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Руководитель"];
	Ошибка = Ложь;
	Если СвойствоРуководитель.ПометкаУдаления Тогда
		
		Попытка
			
			СвойствоОбъект = СвойствоРуководитель.ПолучитьОбъект();
			СвойствоОбъект.Виден = Истина;
			СвойствоОбъект.Доступен = Истина;
			СвойствоОбъект.ПометкаУдаления = Ложь; 	
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СвойствоОбъект); 
			
		Исключение 
			Ошибка = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать ПВХ: ""ДополнительныеРеквизитыИСведения"" по причине:
				|%1'"), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения,
				"ДополнительныеРеквизитыИСведения", ТекстСообщения
			); 
			
		КонецПопытки;
		
	КонецЕсли;
    Если Не Ошибка Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
			|ГДЕ
			|	НаборыДополнительныхРеквизитовИСведений.Свойство = &СвойствоРуководитель
			|	И НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Справочник_ПодразделенияКомпании""";
			
		Запрос.УстановитьПараметр("СвойствоРуководитель", СвойствоРуководитель);
			
		РезультатЗапроса = Запрос.Выполнить();
			
		Если НЕ РезультатЗапроса.Пустой() Тогда
							
		Выборка = РезультатЗапроса.Выбрать();	
				
			Пока Выборка.Следующий() Цикл
				Попытка	   
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();	
		            Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(СвойствоРуководитель, "Свойство");	
					Если Строка <> Неопределено Тогда 
						Строка.ПометкаУдаления = Ложь;
						НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
							
					КонецЕсли;
						
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);

				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
						|%1'"), 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Выполняет перенос свойств ИсполнительОрганизации в реквизит объекта
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
Процедура ВыполнитьПереносИсполнителяИзСвойств(Параметры) Экспорт 
	
	Документы.ЗаказПокупателя.ВыполнитьПереносИсполнителяИзСвойств();
	Документы.ЗаказНаАвтомобиль.ВыполнитьПереносИсполнителяИзСвойств();
	Документы.ЗаменаВЗаказеПокупателя.ВыполнитьПереносИсполнителяИзСвойств();
	Документы.КорректировкаЗаказаПокупателя.ВыполнитьПереносИсполнителяИзСвойств();
	Документы.РезервированиеАвтомобилей.ВыполнитьПереносИсполнителяИзСвойств();
	Документы.РезервированиеЗаказовПокупателя.ВыполнитьПереносИсполнителяИзСвойств();
	Документы.СнятиеРезервовЗаказовПокупателя.ВыполнитьПереносИсполнителяИзСвойств();
	Документы.СнятиеРезервовАвтомобилей.ВыполнитьПереносИсполнителяИзСвойств();
	
КонецПроцедуры 

// Возвращает результат переноса доп. реквизита ИсполнительОрганизации 
//                                                                                                     
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  РезультатПроверки - Структура - результат переноса
//
Функция ПроверитьПереносИсполнителяИзСвойств(Параметры) Экспорт  
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Параметры.ПолноеИмя);
	Возврат МенеджерОбъекта.ПроверитьПереносИсполнителяИзСвойств(Параметры.Отбор);
	
КонецФункции

// Заполняет/перезаполняет метки контрагента в форме произвольного объекта.
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - уже настроена в процедуре ПриСозданииНаСервере.
//  Контрагент         - СправочникСсылка.Контрагенты - ссылка на элемент справочника "Контрагенты"
//
Процедура ЗаполнитьМеткиКонтрагента(Форма, Контрагент, ГруппаРазмещенияМеток = "ГруппаМеткиКонтрагента") Экспорт
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
		ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Свойства_ИмяЭлементаДляРазмещенияМеток = ГруппаРазмещенияМеток;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		УправлениеСвойствами.ЗаполнитьМеткиОбъекта(Форма, Контрагент.ПолучитьОбъект(), Истина);
	Иначе
		ОчиститьМеткиКонтрагента(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Очищает метки контрагента в форме произвольного объекта.
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - уже настроена в процедуре ПриСозданииНаСервере.
//
//
Процедура ОчиститьМеткиКонтрагента(Форма) Экспорт
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
		ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаДляРазмещенияМеток = Форма.Свойства_ИмяЭлементаДляРазмещенияМеток;
	Если Не ЗначениеЗаполнено(ИмяЭлементаДляРазмещенияМеток) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаМетки = Форма.Элементы[ИмяЭлементаДляРазмещенияМеток];
	ПодчиненныеЭлементы = ГруппаМетки.ПодчиненныеЭлементы;
	ИменаМетокНаУдаление = Новый Массив;
	Для каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент = Форма.Элементы["РедактироватьМетки"] Тогда
			Продолжить;
		КонецЕсли;
		ИменаМетокНаУдаление.Добавить(ПодчиненныйЭлемент.Имя);
	КонецЦикла;
	
	Для каждого Метка Из ИменаМетокНаУдаление Цикл
		Форма.Элементы.Удалить(Форма.Элементы[Метка]);
	КонецЦикла;

КонецПроцедуры

// Устанавливает ограничение отбора меток через ссылку
//
// Параметры:
//  Список              - ДинамическийСписок - список элементов на форме списка справочника.
//  ВладелецМеток       - Строка             - полное имя справочника владельца меток.
//
//
Процедура УстановитьОграничениеОтбораМеток(Список, ВидОбъектов) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	СписокМеток = УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов(ВидОбъектов, "Метки");
	Если СписокМеток = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрещенныеПоля = Новый Массив;
	
	Для Каждого Метка Из СписокМеток Цикл
		ЗапрещенныеПоля.Добавить("Ссылка.[" + Строка(Метка.Свойство) + "]");
	КонецЦикла;
	
	Для Каждого Поле Из Список.Поля Цикл
		Если СтрНайти(Поле.Заголовок, "Метка") = 1 Тогда
			ЗапрещенныеПоля.Добавить(Поле.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Список.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеПоля);
	Список.УстановитьОграниченияИспользованияВГруппировке(ЗапрещенныеПоля);
	Список.УстановитьОграниченияИспользованияВПорядке(ЗапрещенныеПоля);
	ОтключитьНедоступныеОтборы(Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы);
	
КонецПроцедуры

Процедура НастроитьЛегендуМеток(Форма) Экспорт
	
	ЭлементКнопкиЛегенды = Форма.Элементы.Найти("ПоказатьЛегенду");
	Если ЭлементКнопкиЛегенды <> Неопределено Тогда
		Форма.Элементы.ГруппаСкрываемаяЧастьЛегенды.Видимость = Истина;
		Форма.Элементы.Удалить(ЭлементКнопкиЛегенды);
	КонецЕсли;
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
		ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		
		ЭлементГруппыКолонокМеток = Форма.Элементы.Найти("ГруппаМетки");
		Если ЭлементГруппыКолонокМеток <> Неопределено Тогда
			ЭлементГруппыКолонокМеток.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЛегендуМеток(Форма) Экспорт
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
		ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаДляРазмещенияЛегендыМеток = Форма.Свойства_ИмяЭлементаДляРазмещенияЛегендыМеток;
	ГруппаСкрываемаяЧастьЛегенды = Форма.Элементы.Найти("ГруппаСкрываемаяЧастьЛегенды");
	Если НЕ ЗначениеЗаполнено(ИмяЭлементаДляРазмещенияЛегендыМеток)
		ИЛИ ГруппаСкрываемаяЧастьЛегенды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеЭлементы = ГруппаСкрываемаяЧастьЛегенды.ПодчиненныеЭлементы;
	Пока ПодчиненныеЭлементы.Количество() > 0 Цикл
		Форма.Элементы.Удалить(Форма.Элементы[ПодчиненныеЭлементы[0].Имя]);
	КонецЦикла;
	Форма.Свойства_ОписаниеЛегендыМеток.Очистить();
	
	Метки = УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов(
		Форма.ПараметрыСвойств.ВидОбъектов, "Метки").ВыгрузитьКолонку("Свойство");
	Если Метки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборМеток = Форма.ПараметрыСвойств.ОтборМеток;
	РеквизитыМеток = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Метки,
		"Ссылка, Имя, Наименование, ЦветСвойств, ПометкаУдаления");
	Если ОтборМеток Тогда
		
		УдаляемыеРеквизиты = Новый Массив;
		Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		
			Если СтрНайти(Реквизит.Имя, "ОтборМетка_") = 1 Тогда
				УдаляемыеРеквизиты.Добавить(Реквизит.Имя);
			КонецЕсли;
		
		КонецЦикла;
		
		НовыеРеквизитыФормы = Новый Массив;
		Для Каждого Метка Из Метки Цикл
			
			РеквизитыМетки = РеквизитыМеток.Получить(Метка);
			Если РеквизитыМетки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыеРеквизитыФормы.Добавить(Новый РеквизитФормы("ОтборМетка_" + РеквизитыМетки.Имя,
				Новый ОписаниеТипов("Булево")));
			
		КонецЦикла;
		
		Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы, УдаляемыеРеквизиты);
		
	КонецЕсли;
	
	Для Каждого Метка Из Метки Цикл
		Метка = РеквизитыМеток.Получить(Метка);
		Если Метка = Неопределено Или Метка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Группа = Форма.Элементы.Добавить("Группа" + Метка.Имя, Тип("ГруппаФормы"), ГруппаСкрываемаяЧастьЛегенды);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		МеткаЛегенды = Форма.Свойства_ОписаниеЛегендыМеток.Добавить();
		МеткаЛегенды.Метка = Метка.Ссылка;
		МеткаЛегенды.ИмяМетки = Метка.Имя;
		
		Если ОтборМеток Тогда
			НовыйЭлемент = Форма.Элементы.Добавить("ОтборМетка_" + Метка.Имя, Тип("ПолеФормы"), Группа);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлемент.ПутьКДанным = "ОтборМетка_" + Метка.Имя;
			НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОбработчикОтбораПоМеткам");
		КонецЕсли;
		
		НовыйЭлемент = Форма.Элементы.Добавить("Легенда_" + Метка.Имя, Тип("ДекорацияФормы"), Группа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = КартинкаМеткиПоЦвету(Метка.ЦветСвойств);
		НовыйЭлемент.Подсказка = Метка.Наименование;
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
	КонецЦикла;
	
	УстановитьОграничениеОтбораМеток(Форма.Список, Форма.ПараметрыСвойств.ВидОбъектов);
	
КонецПроцедуры

Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ОптовыйЗаказКлиентаНаАвтомобили";
	Набор.Идентификатор = Новый УникальныйИдентификатор("8482cdeb-b844-4b9d-8eb6-bd3a312c785d");
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ОптовыйЗаказПоставщикуНаАвтомобили";
	Набор.Идентификатор = Новый УникальныйИдентификатор("1c9eb3bb-3b3c-4d88-91f7-c268118c8f54");
	
КонецПроцедуры


#КонецОбласти

 #Область СлужебныеПроцедурыИФункции
Функция НайтиИлиСоздатьПодписантаОрганизации(СсылкаСвойство, СсылкаДокумент, Основание = Неопределено) Экспорт

	Подписант = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Подписанты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Подписанты КАК Подписанты
			|ГДЕ
			|	Подписанты.Организация = &Организация
			|	И Подписанты.ПодразделениеКомпании = &ПодразделениеКомпании
			|	И Подписанты.ВидПодписанта = ЗНАЧЕНИЕ(Перечисление.ВидыПодписантов.ПодписантОтОрганизации)
			|	И Подписанты.Подписант ССЫЛКА Справочник.Сотрудники
			|	И Подписанты.Подписант = &Подписант";  
		
	Запрос.УстановитьПараметр("Организация", СсылкаДокумент.Организация);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", СсылкаДокумент.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("Подписант", СсылкаСвойство);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
        Выборка.Следующий();
		
		Возврат Выборка.Ссылка; 	
		
	КонецЕсли;
	
	Попытка
		
		Подписант = Справочники.Подписанты.СоздатьЭлемент();
		Подписант.Подписант = СсылкаСвойство;
		Подписант.Организация = СсылкаДокумент.Организация;
		Подписант.ПодразделениеКомпании = СсылкаДокумент.ПодразделениеКомпании;  
		Если Основание <> Неопределено Тогда
			
			Подписант.Основание = Основание;
			
		КонецЕсли;
		
		Подписант.ВидПодписанта = Перечисления.ВидыПодписантов.ПодписантОтОрганизации;
		Подписант.Наименование = СсылкаСвойство.Наименование;
		Подписант.Записать(); 
		
		Возврат Подписант.Ссылка; 
		
	Исключение
		
		Возврат Подписант;
		
	КонецПопытки;
		
КонецФункции

Функция НайтиИлиСоздатьПодписантаКонтрагента(СсылкаСвойство, СсылкаДокумент, Основание = Неопределено) Экспорт

	Подписант = Неопределено;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Подписанты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Подписанты КАК Подписанты
			|ГДЕ
			|	Подписанты.Контрагент = &Контрагент
			|	И Подписанты.ВидПодписанта = ЗНАЧЕНИЕ(Перечисление.ВидыПодписантов.ПодписантОтКонтрагента)
			|	И Подписанты.Подписант ССЫЛКА Справочник.Контрагенты
			|	И Подписанты.Подписант = &Подписант"; 	
	    	
	Запрос.УстановитьПараметр("Контрагент",  СсылкаДокумент.Контрагент);  
	Запрос.УстановитьПараметр("Подписант",  СсылкаСвойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
        Выборка.Следующий();
		
		Возврат Выборка.Ссылка; 	
		
	КонецЕсли;	
		
	Попытка
		
		Подписант = Справочники.Подписанты.СоздатьЭлемент();
		Подписант.Подписант = СсылкаСвойство;
		Подписант.Контрагент = СсылкаДокумент.Контрагент;  
					
		Если Основание <> Неопределено Тогда
			
			Подписант.Основание = Основание;
			
		КонецЕсли;
		
		Подписант.ВидПодписанта = Перечисления.ВидыПодписантов.ПодписантОтКонтрагента;
		Подписант.Наименование = СсылкаСвойство.Наименование;
		Подписант.Записать(); 
		
		Возврат Подписант.Ссылка; 
		
	Исключение 
		
		Возврат Подписант;
		
	КонецПопытки;
		
КонецФункции

Функция ПолучитьСтруктуруСвойствДокументовРеализации() Экспорт

	ПереносимыеСвойства = Новый Структура(); 
	ПереносимыеСвойства.Вставить("Руководитель",	  	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Руководитель"]);
	ПереносимыеСвойства.Вставить("ГлавныйБухгалтер",  	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ГлавныйБухгалтер"]);
	ПереносимыеСвойства.Вставить("Отпустил", 		  	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Отпустил"]);  
	ПереносимыеСвойства.Вставить("ПолучилКонтрагент",	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ПолучилКонтрагент"]);  
	ПереносимыеСвойства.Вставить("Доверенность",	 	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Доверенность"]);
	ПереносимыеСвойства.Вставить("ПоставщикОрганизация",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ПоставщикОрганизация"]);
	ПереносимыеСвойства.Вставить("Плательщик",			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Плательщик"]);
	
	Возврат ПереносимыеСвойства;

КонецФункции

Функция ПолучитьСтруктуруСвойствДокументовПоступления() Экспорт
	
	ПереносимыеСвойства = Новый Структура(); 
	ПереносимыеСвойства.Вставить("Руководитель",	  ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Руководитель"]);
	ПереносимыеСвойства.Вставить("ГлавныйБухгалтер",  ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ГлавныйБухгалтер"]);
	ПереносимыеСвойства.Вставить("ОтпустилКонтрагент",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ОтпустилКонтрагент"]);  
	ПереносимыеСвойства.Вставить("Получил",			  ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Получил"]);  
    ПереносимыеСвойства.Вставить("Доверенность",	  ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Доверенность"]);
	ПереносимыеСвойства.Вставить("ПоставщикКонтрагент", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ПоставщикКонтрагент"]);
	ПереносимыеСвойства.Вставить("Плательщик",		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["Плательщик"]);
		
	Возврат ПереносимыеСвойства;

КонецФункции

Функция СтруктураВМассив(Структура) Экспорт
	
	МассивЗначений = Новый Массив();
	
	Для Каждого Элемент Из Структура Цикл 
		
		МассивЗначений.Добавить(Элемент.Значение);

	КонецЦикла;	
	
	Возврат  МассивЗначений;
КонецФункции 

Процедура ОтключитьНедоступныеОтборы(Коллекция, ДоступныеПоляОтбора = Неопределено)
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ТекущиеДанные Из Коллекция Цикл
		
		Если ТипЗнч(ТекущиеДанные) = Тип("ОтборКомпоновкиДанных") Тогда
			
			ОтключитьНедоступныеОтборы(ТекущиеДанные.Элементы, ТекущиеДанные.ДоступныеПоляОтбора);
			
		ИначеЕсли ТипЗнч(ТекущиеДанные) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ОтключитьНедоступныеОтборы(ТекущиеДанные.Элементы, ДоступныеПоляОтбора);
			
		ИначеЕсли ТипЗнч(ТекущиеДанные) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Для Каждого ИмяСвойства Из СтрРазделить("ЛевоеЗначение,ПравоеЗначение",",") Цикл
				
				ТекущееПоле = ТекущиеДанные[ИмяСвойства];
				Если ТипЗнч(ТекущееПоле) = Тип("ПолеКомпоновкиДанных") 
					И ДоступныеПоляОтбора.НайтиПоле(ТекущееПоле) = Неопределено Тогда
					
					УдаляемыеЭлементы.Добавить(ТекущиеДанные);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Коллекция.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

Функция КартинкаМеткиПоЦвету(ЦветСвойств)
	
	Если ЦветСвойств = Перечисления.ЦветаСвойств.Голубой Тогда
		Картинка = БиблиотекаКартинок.МеткаГолубая;
	ИначеЕсли ЦветСвойств = Перечисления.ЦветаСвойств.Желтый Тогда
		Картинка = БиблиотекаКартинок.МеткаЖелтая;
	ИначеЕсли ЦветСвойств = Перечисления.ЦветаСвойств.Зеленый Тогда
		Картинка = БиблиотекаКартинок.МеткаЗеленая;
	ИначеЕсли ЦветСвойств = Перечисления.ЦветаСвойств.Лаймовый Тогда
		Картинка = БиблиотекаКартинок.МеткаЛаймовая;
	ИначеЕсли ЦветСвойств = Перечисления.ЦветаСвойств.Красный Тогда
		Картинка = БиблиотекаКартинок.МеткаКрасная;
	ИначеЕсли ЦветСвойств = Перечисления.ЦветаСвойств.Оранжевый Тогда
		Картинка = БиблиотекаКартинок.МеткаОранжевая;
	ИначеЕсли ЦветСвойств = Перечисления.ЦветаСвойств.Розовый Тогда
		Картинка = БиблиотекаКартинок.МеткаРозовая;
	ИначеЕсли ЦветСвойств = Перечисления.ЦветаСвойств.Синий Тогда
		Картинка = БиблиотекаКартинок.МеткаСиняя;
	ИначеЕсли ЦветСвойств = Перечисления.ЦветаСвойств.Фиолетовый Тогда
		Картинка = БиблиотекаКартинок.МеткаФиолетовая;
	Иначе
		Картинка = БиблиотекаКартинок.МеткаСерая;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

 #КонецОбласти