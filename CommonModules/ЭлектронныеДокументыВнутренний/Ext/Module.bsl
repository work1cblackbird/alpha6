////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыВнутренний: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает дерево значений для разбора выписки банка и номер банковского счета из выписки
//
// Параметры:
//  ТекстДляРазбора - Строка - Данные выписки в текстовом формате.
//
// Возвращаемое значение:
//  Структура - ДеревоЗначений и номер Банковского счета
//
Функция СтруктураРазбораВыпискиБанка(ТекстДляРазбора) Экспорт
	
	Перем НомерСчета;
	
	ВерсияСхемы = "urn:1C.ru:ClientBankExchange";
	
	ClientBankExchange = ПолучитьОбъектТипаCML("ClientBankExchange",                ВерсияСхемы);
	СекцияРасчСчет     = ПолучитьОбъектТипаCML("ClientBankExchange.СекцияРасчСчет", ВерсияСхемы);
	УсловияОтбора      = ПолучитьОбъектТипаCML("ClientBankExchange.УсловияОтбора",  ВерсияСхемы);
	
	Импорт_ТекстДляРазбора = ТекстДляРазбора;
	Импорт_КоличествоСтрок = СтрЧислоСтрок(Импорт_ТекстДляРазбора);
	Импорт_ТекущаяСтрока   = 1;
	Импорт_ПризнакОбмена = Ложь;
	Отказ = Ложь;
	
	СтруктураДокумента = СоздатьСтруктуруИзСтроки(
		  "Номер,Дата,Сумма,"
		+ "ВидПлатежа,ВидОплаты,"
		+ "КвитанцияДата,КвитанцияВремя,КвитанцияСодержание,"
		+ "ДатаСписано,"
		+ "ДатаПоступило,"
		+ "ПлательщикСчет,Плательщик,ПлательщикИНН,Плательщик1,"
		+ "ПлательщикРасчСчет,ПлательщикБанк1,ПлательщикБанк2,ПлательщикБИК,ПлательщикКорсчет,"
		+ "Плательщик2,Плательщик3,Плательщик4,"
		+ "ПолучательСчет,Получатель,ПолучательИНН,Получатель1,"
		+ "ПолучательРасчСчет,ПолучательБанк1,ПолучательБанк2,ПолучательБИК,ПолучательКорсчет,"
		+ "Получатель2,Получатель3,Получатель4,"
		+ "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,"
		+ "ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа,"
		+ "Код,"
		+ "НазначениеПлатежа,"
		+ "НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,"
		+ "НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6,"
		+ "СрокПлатежа,Очередность,"
		+ "УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3,"
		+ "СрокАкцепта,ВидАккредитива,ПлатежПоПредст,ДополнУсловия,"
		+ "НомерСчетаПоставщика,ДатаОтсылкиДок,"
		+ "КодНазПлатежа");
		
	СтрокаТеговСчета = "ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток";
	СтруктураСчета = СоздатьСтруктуруИзСтроки(СтрокаТеговСчета);
		
	ПоляДат = СоздатьСтруктуруИзСтроки("ДатаСоздания,Дата,КвитанцияДата,ДатаСписано,ДатаПоступило,"
									+ "СрокПлатежа,ДатаОтсылкиДок,ДатаНачала,ДатаКонца");
	ПоляЧисел = СоздатьСтруктуруИзСтроки("НачальныйОстаток,ВсегоПоступило,ВсегоСписано,"
									+ "КонечныйОстаток,Сумма,СрокАкцепта");
									
	СтрокаТеговЗаголовка = "ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,"
							+ "ВремяСоздания,ДатаНачала,ДатаКонца,РасчСчет,Документ";
	ПоляЗаголовка = СоздатьСтруктуруИзСтроки(СтрокаТеговЗаголовка);
	
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		
		Если Лев(ВРег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				СекцияПлатежногоДокумента = ПолучитьОбъектТипаCML("ClientBankExchange.СекцияПлатежногоДокумента", ВерсияСхемы);
				СекцияДокументЗначение = Значение;
				СекцияЗагружена = ЗагрузитьСекциюДокумента(
									СекцияПлатежногоДокумента,
									Импорт_ТекущаяСтрока,
									Импорт_КоличествоСтрок,
									Импорт_ТекстДляРазбора,
									СтруктураДокумента,
									ПоляДат,
									ПоляЧисел);
				Если НЕ СекцияЗагружена Тогда
					Возврат Неопределено;
				Иначе
					Если  ЗначениеЗаполнено(СекцияДокументЗначение) Тогда
						ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "СекцияДокумент", Значение); 
					Иначе
						ВидДокумента = ОпределитьВидДокумента(СекцияПлатежногоДокумента.РеквизитыПлатежа.ВидОплаты);
						ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "СекцияДокумент", ВидДокумента);
					КонецЕсли;

					ClientBankExchange.СекцияПлатежногоДокумента.Добавить(СекцияПлатежногоДокумента);
				КонецЕсли;
				
			Иначе
				Сообщение = Новый СообщениеПользователю;
				ТекстОшибки = НСтр("ru = 'Нарушена структура файла импорта, строка %1 : %2'");
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																						ТекстОшибки,
																						Импорт_ТекущаяСтрока - 1,
																						Стр);
				Сообщение.Сообщить();
				Возврат Неопределено;
			КонецЕсли;
			
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СчетЗагружен = ЗагрузитьСекциюРасчСчета(СекцияРасчСчет,
													Импорт_ТекущаяСтрока,
													Импорт_КоличествоСтрок,
													Импорт_ТекстДляРазбора,
													СтруктураСчета,
													ПоляДат,
													ПоляЧисел,
													УсловияОтбора);
			
			Если НЕ СчетЗагружен Тогда
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = НСтр("ru = 'Нарушена структура файла импорта в секции описания расчетного счета. Строка: %1'");
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ТекстСообщения,
																	Импорт_ТекущаяСтрока - 1);
				Сообщение.Сообщить();
				Возврат Неопределено;
			КонецЕсли;
			
			НомерСчета = СекцияРасчСчет.РасчСчета[0].РасчСчет;
			
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда
			Если НЕ Импорт_ПризнакОбмена Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'В файле импорта отсутствует признак обмена ""1CClientBankExchange"".'");
				Сообщение.Сообщить();
				Возврат Неопределено;
			КонецЕсли;
			НайденКонецФайла = Истина;
			НомерСтроки = 0;
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда
			Импорт_ПризнакОбмена = Истина;
		Иначе
			Поля = Новый Структура;
			Поля.Вставить("ПоляДат",   ПоляДат);
			Поля.Вставить("ПоляЧисел", ПоляЧисел);
			ЗагрузитьСтрокуЗаголовка(
							ClientBankExchange,
							УсловияОтбора,
							Стр,
							Импорт_ТекущаяСтрока,
							ПоляЗаголовка,
							Поля,
							Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если НЕ НайденКонецФайла Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Файл загрузки не соответствует стандарту (не найдена секция КонецФайла).'");
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(ClientBankExchange, "СекцияРасчСчет", СекцияРасчСчет);
	ЗаполнитьСвойствоXDTO(ClientBankExchange, "УсловияОтбора",  УсловияОтбора);
	
	Если ClientBankExchange.Отправитель = Неопределено Тогда
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "Отправитель", "Клиент-банк");
	КонецЕсли;
	
	Если ClientBankExchange.Получатель = Неопределено Тогда
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "Получатель", "1С:Предприятие");
	КонецЕсли;
	
	Попытка
		ClientBankExchange.Проверить();
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ВыгрузитьЭДВФайл(ClientBankExchange, ВремФайл);
	
	СтруктураДанных = СформироватьДеревоРазбора(ВремФайл);
		
	УдалитьФайлы(ВремФайл);
	Если СтруктураДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("ДеревоРазбора, НомерСчета", СтруктураДанных.ДеревоРазбора, НомерСчета);
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
//
// Параметры:
//  Тип         - Строка - Тип секции.
//  ВерсияСхемы - Строка - Версия.
// 
// Возвращаемое значение:
//  ЗначениеXDTO, Неопределено - Результат создания объекта.
//
Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

// Заполняет свойство объекта XDTO.
//
// Параметры:
//  ОбъектXDTO   - ОбъектXDTO - Объект заполнения.
//  ИмяСвойства  - Строка     - Свойство объекта.
//  Значение     - Строка, ЗначениеXDTO, ОбъектXDTO - Устанавливаемое значение.
//  Обязательное - Булево - Признак обязательности заполнения свойства.
//  ТекстОшибки  - Строка - Текст ошибки в случае неудачного заполнения.
//  УстанавливатьПустыеЗначения - Булево - Признак установки пустых значений.
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "", УстанавливатьПустыеЗначения = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение) ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
//
// Параметры:
//  ЭД - ЗначениеXDTO - Выгружаемый электронный документ.
//  ИмяФайла - Строка - Содержит имя файла.
//  УказаниеТипа - Булево - Определяет назначение типа XML.
//  ТипКодировки - Строка - Содержит тип кодировки.
//
Процедура ВыгрузитьЭДВФайл(ЭД, ИмяФайла, УказаниеТипа = Истина, ТипКодировки = "windows-1251") Экспорт
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, ТипКодировки);
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));
	НоваяЗаписьXML.Закрыть();
	
КонецПроцедуры

// Возвращает дерево с данными файла
//
// Параметры:
//  ПолноеИмяФайла - Строка - путь к файлу
//  НаправлениеЭД  - ПеречислениеСсылка.НаправленияЭД - направление электронного документа
//  ФайлДопДанных  - Строка - путь к файлу с дополнительными данными
//  ФайлКартинок   - Строка - путь к файлу - архиву, содержащему картинки.
//
// Возвращаемое значение:
//  Структура - данные дерева
//
Функция СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД = Неопределено, ФайлДопДанных = Неопределено, ФайлКартинок = Неопределено) Экспорт
	
	ДеревоРазбора = ИнициализироватьДеревоРазбора();
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда
		НовыйЭД.НаправлениеЭД = "Входящий";
	Иначе 
		НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	КонецЕсли;
	
	Результат = ПрочитатьФайлCMLпоXDTO(ПолноеИмяФайла, ДеревоРазбора, НовыйЭД);
	
	Если НЕ Результат Тогда // ошибка разбора ЭД
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти("ЭлектронныеДокументы","ТипОбъекта"); // раздел ЭлектронныеДокументы
	СтрокаОбъекта = НайденнаяСтрока.Строки[0];
	
	Возврат Новый Структура("ДеревоРазбора, СтрокаОбъекта", ДеревоРазбора, СтрокаОбъекта);
	
	
КонецФункции

// Обработка исключения по ЭД на сервере.
//
// Параметры:
//  СтатьДДС			 - Строка - Статья движения денежных средств.
//  ПодробныйТекстОшибки - Строка - Текст ошибки.
//  ТекстСообщения		 - Строка - Текст сообщения.
//  КодСобытия			 - Число  - Номер ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(СтатьДДС, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = 2) Экспорт
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ТекстОшибки = НСтр("ru = 'Выполнение операции:'") + " " + СтатьДДС + Символы.ПС + ПодробныйТекстОшибки;
	
КонецПроцедуры

// Получение типа значения CML
//
// Параметры:
//  Тип			 - Строка - Имя запрашиваемого типа.
//  ВерсияСхемы	 - Строка - URI пространства имен запрашиваемого типа.
// 
// Возвращаемое значение:
//  ТипЗначенияXDTO, ТипОбъектаXDTO, Неопределено - Получение типа XDTO.
//
Функция ПолучитьТипЗначенияCML(Тип, ВерсияСхемы = "4.02") Экспорт
	
	Попытка
		Если ВерсияСхемы <> "4.02" Тогда
			ТипЗначения = ФабрикаXDTO.Тип(ВерсияСхемы, Тип);
		Иначе
			ТипЗначения = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", Тип);
		КонецЕсли
	Исключение
		
		ТипЗначения = Неопределено;
	КонецПопытки;
	
	Возврат ТипЗначения;
	
КонецФункции

// Возвращает пространство имен используемой схемы CML
// 
// Возвращаемое значение:
//  Строка - Строка пространства имен.
//
Функция ПространствоИменCML() Экспорт
	
	Возврат "urn:1C.ru:commerceml_2";
	
КонецФункции

// Поиск ссылки на объект
//
// Параметры:
//  ТипОбъекта				 - Тип			 - Тип объекта.
//  ИдОбъекта				 - Произвольный	 - Идентификатор объекта.
//  ДополнительныеРеквизиты	 - Структура	 - Доплнительные реквизиты объекта.
//  ИДЭД					 - Строка		 - Идентификатор ЭД.
// 
// Возвращаемое значение:
//  Произвольный - Результат поиска ссылки.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта, ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Неопределено;

	Если ТипОбъекта = "Валюты" ИЛИ ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);   
	ИначеЕсли ТипОбъекта = "Банки" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторБанков", "Код", ИдОбъекта);   
		
	ИначеЕсли ТипОбъекта = "Партнеры" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Контрагент = Неопределено;
		Если ДополнительныеРеквизиты.Свойство("Контрагент", Контрагент) И ЗначениеЗаполнено(Контрагент) Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
		КонецЕсли;
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = Неопределено;
		ДополнительныеРеквизиты.Свойство("ИНН", ИНН);
		Если ИНН = Неопределено Тогда
			ИНН = "";
		КонецЕсли;
		КПП = Неопределено;
		ДополнительныеРеквизиты.Свойство("КПП", КПП);
		Если КПП = Неопределено Тогда
			КПП = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН + КПП) Тогда // по ИНН + КПП
			Результат = СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда // по Наименованию
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", ПараметрПоиска); 
		КонецЕсли;
	ИначеЕсли (ТипОбъекта = "БанковскийСчет") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска 	= "";
		Владелец 		= "";
		Если ДополнительныеРеквизиты.Свойство("НомерСчета", ПараметрПоиска) Тогда // по Номеру счета
			Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец) И ТипЗнч(Владелец) <> Тип("Строка") Тогда
				Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "НомерСчета", ПараметрПоиска, Владелец);
			Иначе
				Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "НомерСчета", ПараметрПоиска); 
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		Если ИдОбъекта = "ФаксКонтрагента" Тогда
			Результат = Неопределено;
		Иначе
			Результат = Справочники[ТипОбъекта][ИдОбъекта];
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда	
		Результат =  "--";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение ссылки на объект по ИНН/КПП
//
// Параметры:
//  ТипОбъекта	 - Тип							 - Тип объекта.
//  ИНН			 - Строка						 - ИНН поиска.
//  КПП			 - Строка						 - КПП поиска.
//  Организация	 - СправочникСсылка.Организации	 - Организация поиска.
// 
// Возвращаемое значение:
//  ЛюбаяСсылка - Ссылка найденного объекта.
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник."+ТипОбъекта+" КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Поиск ссылки на объект по реквизиту
//
// Параметры:
//  ИмяСправочника	 - Строка			 - Имя справочника.
//  ИмяРеквизита	 - Строка			 - Имя реквизита поиска.
//  ЗначРеквизита	 - Произвольный		 - Значение поиска.
//  Владелец		 - СправочникСсылка	 - Владелец элемента.
// 
// Возвращаемое значение:
//  СправочникСсылка - Ссылка результата поиска.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита) // нестандартный реквизит
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита)<> Неопределено Тогда // другой реквизит
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник."+ИмяРеквизита+" = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", 	Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = СтрРазделить(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция СоздатьСтруктуруИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НоваяСтруктура = Новый Структура;
	ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НоваяСтруктура.Вставить(ИмяИтема, ИмяИтема);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	КонецЦикла;
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НоваяСтруктура.Вставить(СтрокаЧерезЗапятую, СтрокаЧерезЗапятую);
	КонецЕсли;
	Возврат НоваяСтруктура;
	
КонецФункции

Функция ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора)
	
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер)
	 ИЛИ Лев(Буфер, 2) = "//" Цикл
		
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
			
		Буфер = СокрЛП(СтрПолучитьСтроку(Импорт_ТекстДляРазбора, Импорт_ТекущаяСтрока));
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = СтрНайти(СтрокаРазбора, "=");
	
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
			|Ошибка установки значения свойства ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки
	
КонецПроцедуры

Функция ЗагрузитьСекциюДокумента(СекцияПлатежногоДокумента, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора, СтруктураДокумента, ПоляДат, ПоляЧисел)
	
	Перем НазваниеРеквизита, ПлатежиВБюджет;
	
	Квитанция = ПолучитьОбъектТипаCML(
						"ClientBankExchange.СекцияПлатежногоДокумента.Квитанция",
						"urn:1C.ru:ClientBankExchange");
	РеквизитыПлательщика = ПолучитьОбъектТипаCML(
						"ClientBankExchange.СекцияПлатежногоДокумента.РеквизитыПлательщика",
						"urn:1C.ru:ClientBankExchange");
	РеквизитыПолучателя = ПолучитьОбъектТипаCML(
						"ClientBankExchange.СекцияПлатежногоДокумента.РеквизитыПолучателя",
						"urn:1C.ru:ClientBankExchange");
	РеквизитыПлатежа = ПолучитьОбъектТипаCML(
						"ClientBankExchange.СекцияПлатежногоДокумента.РеквизитыПлатежа",
						"urn:1C.ru:ClientBankExchange");
	ПлатежиВБюджет = ПолучитьОбъектТипаCML(
						"ClientBankExchange.СекцияПлатежногоДокумента.ПлатежиВБюджет",
						"urn:1C.ru:ClientBankExchange");
	ДополнительныеРеквизиты = ПолучитьОбъектТипаCML(
						"ClientBankExchange.СекцияПлатежногоДокумента.ДополнительныеРеквизиты",
						"urn:1C.ru:ClientBankExchange");
						
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
	ЭтоПлатежВБюджет = Ложь;
	НазначениеПлатежаОднойСтрокой = "";
	НазначениеПлатежаСборное = "";
	УсловиеОплаты = "";
	ТекстОшибки = "";
	ДлинаПоказателяКБК = 20;
	
	Пока Лев(ВРег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Значение = "";
		Тег = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если СтруктураДокумента.Свойство(Тег, НазваниеРеквизита) Тогда
				Если ПоляДат.Свойство(Тег) Тогда
					Значение = ПолучитьДатуИзСтроки(Значение, ТекстОшибки);
				ИначеЕсли ПоляЧисел.Свойство(Тег) Тогда
					Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), 0);
				КонецЕсли;
				Если Тег = ВРег("КвитанцияДата") ИЛИ Тег = ВРег("КвитанцияВремя") ИЛИ Тег = ВРег("КвитанцияСодержание") Тогда
					ЗаполнитьСвойствоXDTO(Квитанция, СтруктураДокумента[Тег], Значение);
				ИначеЕсли Тег = ВРег("ДатаСписано") Тогда
					ДатаСписано = ПолучитьОбъектТипаCML(
						"ClientBankExchange.СекцияПлатежногоДокумента.РеквизитыПлательщика.ДатаСписано",
						"urn:1C.ru:ClientBankExchange");
					ЗначениеДатаСписано = ?(ЗначениеЗаполнено(Значение), Значение, Дата('00010101'));
					ЗаполнитьСвойствоXDTO(ДатаСписано, "__content", ЗначениеДатаСписано, , , Истина);
					ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ДатаСписано", ДатаСписано);
				ИначеЕсли Тег = ВРег("ДатаПоступило") Тогда
					ДатаПоступило = ПолучитьОбъектТипаCML(
						"ClientBankExchange.СекцияПлатежногоДокумента.РеквизитыПолучателя.ДатаПоступило",
						"urn:1C.ru:ClientBankExchange");
					ЗначениеДатаПоступило = ?(ЗначениеЗаполнено(Значение), Значение, Дата('00010101'));
					ЗаполнитьСвойствоXDTO(ДатаПоступило, "__content", ЗначениеДатаПоступило, , , Истина);
					ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ДатаПоступило", ДатаПоступило);
				ИначеЕсли Тег = ВРег("ПлательщикСчет") ИЛИ Тег = ВРег("ПлательщикИНН")
					ИЛИ Тег = ВРег("ПлательщикКПП") ИЛИ Тег = ВРег("ПлательщикРасчСчет")
					ИЛИ Тег = ВРег("ПлательщикБанк1") ИЛИ Тег = ВРег("ПлательщикБанк2")
					ИЛИ Тег = ВРег("ПлательщикБИК") ИЛИ Тег = ВРег("ПлательщикКорсчет") Тогда
					ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, СтруктураДокумента[Тег], Значение);
				ИначеЕсли Тег = ВРег("Плательщик") ИЛИ Тег = ВРег("Плательщик1")
						ИЛИ Тег = ВРег("Плательщик2") ИЛИ Тег = ВРег("Плательщик3") ИЛИ Тег = ВРег("Плательщик4") Тогда
					ЗаполнитьСвойствоXDTO(
						РеквизитыПлательщика,
						СтруктураДокумента[Тег],
						УчастникВыписки(Значение, РеквизитыПлательщика.ПлательщикИНН, РеквизитыПлательщика.ПлательщикСчет));
				ИначеЕсли Тег = ВРег("ПолучательСчет") ИЛИ Тег = ВРег("ПолучательИНН")
						ИЛИ Тег = ВРег("ПолучательКПП") ИЛИ Тег = ВРег("ПолучательРасчСчет") ИЛИ Тег = ВРег("ПолучательБанк1")
						ИЛИ Тег = ВРег("ПолучательБанк2") ИЛИ Тег = ВРег("ПолучательБИК") ИЛИ Тег = ВРег("ПолучательКорсчет") Тогда
					ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, СтруктураДокумента[Тег], Значение);
					Если Тег = ВРег("ПолучательСчет") И ПустаяСтрока(Значение) Тогда
						ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, СтруктураДокумента[Тег], "00000000000000000000");
					КонецЕсли;
				ИначеЕсли Тег = ВРег("Получатель") ИЛИ Тег = ВРег("Получатель1") Тогда 
					 ЗаполнитьСвойствоXDTO(
						РеквизитыПолучателя,
						СтруктураДокумента[Тег],
						УчастникВыписки(Значение, РеквизитыПолучателя.ПолучательИНН, РеквизитыПолучателя.ПолучательСчет));
				ИначеЕсли Тег = ВРег("Получатель2") ИЛИ Тег = ВРег("Получатель3") ИЛИ Тег = ВРег("Получатель4") Тогда
					ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, СтруктураДокумента[Тег], Значение);
				ИначеЕсли Тег = ВРег("ВидПлатежа") ИЛИ Тег = ВРег("ВидОплаты")
						ИЛИ Тег = ВРег("Код") ИЛИ Тег = ВРег("КодНазПлатежа") Тогда
					ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, СтруктураДокумента[Тег], Значение);
				ИначеЕсли Тег = ВРег("Очередность") Тогда
					Если ЗначениеЗаполнено(Значение) Тогда
						ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, СтруктураДокумента[Тег], Число(Значение));
					КонецЕсли;
				ИначеЕсли Тег = ВРег("НазначениеПлатежа") Тогда
					НазначениеПлатежаОднойСтрокой = Лев(СокрЛП(Значение),210);
				ИначеЕсли ЗначениеЗаполнено(Значение)
						И (Тег = ВРег("НазначениеПлатежа1") ИЛИ Тег = ВРег("НазначениеПлатежа2") ИЛИ Тег = ВРег("НазначениеПлатежа3")
							ИЛИ Тег = ВРег("НазначениеПлатежа4") ИЛИ Тег = ВРег("НазначениеПлатежа5")
							ИЛИ Тег = ВРег("НазначениеПлатежа6")) Тогда
					НазначениеПлатежаСборное = НазначениеПлатежаСборное + Значение + Символы.ПС;
				ИначеЕсли Тег = ВРег("СтатусСоставителя") И ЗначениеЗаполнено(Значение) Тогда
					Если СтрДлина(Значение) = 2 Тогда
						ЭтоПлатежВБюджет = Истина;
						ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, СтруктураДокумента[Тег], Значение, Истина, ТекстОшибки);
					КонецЕсли;
				ИначеЕсли Тег = ВРег("ПоказательКБК") ИЛИ Тег = ВРег("ОКАТО")
						ИЛИ Тег = ВРег("ПоказательОснования") ИЛИ Тег = ВРег("ПоказательПериода") ИЛИ Тег = ВРег("ПоказательНомера")
						ИЛИ Тег = ВРег("ПоказательДаты") ИЛИ Тег = ВРег("ПоказательТипа") Тогда
						
						Если Тег = ВРег("ПоказательКБК") И СтрДлина(Значение) <> ДлинаПоказателяКБК Тогда
							Значение = "00000000000000000000";
						ИначеЕсли Значение = "" Тогда
							Значение = "0";
						КонецЕсли;
						
						Если Тег = ВРег("ПоказательДаты") И НЕ ЗначениеЗаполнено(СтроковыеФункцииКлиентСервер.СтрокаВДату(Значение)) Тогда
							Значение = "0"
						КонецЕсли;
						
						ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, СтруктураДокумента[Тег], Значение, Истина, ТекстОшибки);
						
				ИначеЕсли Тег = ВРег("СрокАкцепта") ИЛИ Тег = ВРег("ВидАккредитива") ИЛИ Тег = ВРег("СрокПлатежа")
						ИЛИ Тег = ВРег("УсловиеОплаты") ИЛИ Тег = ВРег("ПлатежПоПредст") ИЛИ Тег = ВРег("ДополнУсловия")
						ИЛИ Тег = ВРег("НомерСчетаПоставщика") ИЛИ Тег = ВРег("ДатаОтсылкиДок") Тогда
					ЗаполнитьСвойствоXDTO(ДополнительныеРеквизиты, СтруктураДокумента[Тег], Значение);
				ИначеЕсли ЗначениеЗаполнено(Значение)
						И (Тег = ВРег("УсловиеОплаты1") ИЛИ Тег = ВРег("УсловиеОплаты2") ИЛИ Тег = ВРег("УсловиеОплаты3")) Тогда
					УсловиеОплаты = УсловиеОплаты + Значение + Символы.ПС;
				ИначеЕсли Тег = ВРег("Номер") ИЛИ Тег = ВРег("Дата") ИЛИ Тег = ВРег("Сумма") Тогда
					ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, СтруктураДокумента[Тег], Значение, Истина, ТекстОшибки);
				Иначе
					ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, СтруктураДокумента[Тег], Значение);
				КонецЕсли;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Есть ошибка'");
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстОшибки) Тогда
				Сообщение = Новый СообщениеПользователю;
				Шаблон = НСтр("ru = 'Неверный реквизит платежного документа, строка %1 : %2'");
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																			Шаблон,
																			Импорт_ТекущаяСтрока - 1,
																			СтрокаРазбора);
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Шаблон = НСтр("ru = 'Нарушена структура платежного документа, строка %1 : %2'");
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																			Шаблон,
																			Импорт_ТекущаяСтрока - 1,
																			СтрокаРазбора);
			Сообщение.Сообщить();
			Возврат Ложь;

		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НазначениеПлатежаСборное) Тогда
		НазначениеПлатежаСборное = Сред(НазначениеПлатежаСборное, 1, СтрДлина(НазначениеПлатежаСборное) - 1);
		Если СтрДлина(НазначениеПлатежаСборное) > 210 Тогда
			НазначениеПлатежаСборное = Лев(НазначениеПлатежаСборное, 210);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа", НазначениеПлатежаСборное);
	ИначеЕсли ЗначениеЗаполнено(НазначениеПлатежаОднойСтрокой) Тогда
		ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа", НазначениеПлатежаОднойСтрокой);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОплаты) Тогда
		УсловиеОплаты = Сред(УсловиеОплаты, 1, СтрДлина(УсловиеОплаты) - 1);
		ЗаполнитьСвойствоXDTO(ДополнительныеРеквизиты, "УсловиеОплаты", УсловиеОплаты);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "Квитанция",               Квитанция);
	ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "РеквизитыПлательщика",    РеквизитыПлательщика);
	ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "РеквизитыПолучателя",     РеквизитыПолучателя);
	ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "РеквизитыПлатежа",        РеквизитыПлатежа);
	Если ЭтоПлатежВБюджет Тогда
		Если ПлатежиВБюджет.ПоказательДаты = Неопределено Тогда
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательДаты", "0", Истина, ТекстОшибки);
		КонецЕсли;
		Если ПлатежиВБюджет.ПоказательПериода = Неопределено Тогда
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательПериода", "0", Истина, ТекстОшибки);
		КонецЕсли;
		Если ПлатежиВБюджет.ПоказательОснования = Неопределено Тогда
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательОснования", "0", Истина, ТекстОшибки);
		КонецЕсли;
		Если ПлатежиВБюджет.ПоказательНомера = Неопределено Тогда
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательНомера", "0", Истина, ТекстОшибки);
		КонецЕсли;
		Если ПлатежиВБюджет.ПоказательТипа = Неопределено Тогда
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательТипа", "0", Истина, ТекстОшибки);
		КонецЕсли;
		Если ПлатежиВБюджет.ОКАТО = Неопределено Тогда
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ОКАТО", "0", Истина, ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ПлатежиВБюджет = Неопределено;
			ЭтоПлатежВБюджет = Ложь;
			ТекстОшибки = "";
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Неверный реквизит платежного документа, строка %1 : %2'"),
					Импорт_ТекущаяСтрока - 1,
					СтрокаРазбора
				)
			);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "ПлатежиВБюджет",      ПлатежиВБюджет);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(СекцияПлатежногоДокумента, "ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(Знач ДатаСтрокой, ТекстОшибки)
	
	// Не заполнена дата
	Если ПустаяСтрока(ДатаСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияТочки = СтрНайти(ДатаСтрокой, ".");
	
	Если ПозицияТочки = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Неверный формат строки с датой'");
		Возврат Неопределено;
	КонецЕсли;
	
	ЧислоДаты = Лев(ДатаСтрокой, ПозицияТочки - 1);
	ДатаСтрокой = Сред(ДатаСтрокой, ПозицияТочки + 1);
	ПозицияТочки = СтрНайти(ДатаСтрокой, ".");
	
	Если ПозицияТочки = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Неверный формат строки с датой'");
		Возврат Неопределено;
	КонецЕсли;
	
	МесяцДаты = Лев(ДатаСтрокой, ПозицияТочки - 1);
	ГодДаты = Сред(ДатаСтрокой, ПозицияТочки + 1);
	
	Если СтрДлина(ГодДаты) > 4 Тогда
		Если Сред(ГодДаты, 3, 1) = " " Тогда
			ГодДаты = Лев(ГодДаты, 2);
		Иначе
			ГодДаты = Лев(ГодДаты, 4);
		КонецЕсли;
	КонецЕсли;
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
	Исключение
		ТекстОшибки = НСтр("ru = 'Неверный формат строки с датой'");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Функция ЗагрузитьСекциюРасчСчета(СекцияРасчСчет, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора, СтруктураСчета, ПоляДат, ПоляЧисел, УсловияОтбора)
	
	Перем НазваниеРеквизита;
	
	РасчСчета = ПолучитьОбъектТипаCML("ClientBankExchange.СекцияРасчСчет.РасчСчета", "urn:1C.ru:ClientBankExchange");
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
	
	ТекстОшибки = "";
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		Если СтруктураСчета.Свойство(Тег, НазваниеРеквизита) Тогда
			Если ПоляДат.Свойство(Тег) Тогда
				Значение = ПолучитьДатуИзСтроки(Значение, ТекстОшибки);
			ИначеЕсли ПоляЧисел.Свойство(Тег) Тогда
				Значение = ?(ПустаяСтрока(Значение), 0, Число(Значение));
			КонецЕсли;
			ЗаполнитьУсловияОтбора(УсловияОтбора, СтруктураСчета, Тег, Значение);
			Если Тег = ВРег("ВсегоПоступило") ИЛИ Тег = ВРег("ВсегоСписано") ИЛИ Тег = ВРег("КонечныйОстаток") Тогда
				ЗаполнитьСвойствоXDTO(РасчСчета, СтруктураСчета[Тег], Значение);
			ИначеЕсли Тег = ВРег("НачальныйОстаток") ИЛИ Тег = ВРег("РасчСчет") Тогда
				ЗаполнитьСвойствоXDTO(РасчСчета, СтруктураСчета[Тег], Значение, Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СекцияРасчСчет, СтруктураСчета[Тег], Значение);
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Есть ошибка'");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			Сообщение = Новый СообщениеПользователю;
			ШаблонСообщения = НСтр("ru='Неверный реквизит в секции описания расчетного счета, строка %1 : %2'");
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ШаблонСообщения,
																	Импорт_ТекущаяСтрока - 1,
																	СтрокаРазбора);
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		Значение = "";
		Тег = "";
	КонецЦикла;
	// тег "НачальныйОстаток" может не передаваться, но он обязательный, поэтому...
	Если РасчСчета.НачальныйОстаток = Неопределено Тогда
		ЗаполнитьСвойствоXDTO(РасчСчета, "НАЧАЛЬНЫЙОСТАТОК", 0, Истина);
	КонецЕсли;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		СекцияРасчСчет.РасчСчета.Добавить(РасчСчета);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьСтрокуЗаголовка(ЗначениеXDTO, УсловияОтбора, ТекстСтрокиЗаголовка, ТекущаяСтрока, СтруктураПолей, Поля, Отказ)

	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	ЕстьОшибка = Ложь;
	
	Если ПустаяСтрока(Тег) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПолей.Свойство(Тег) = Истина Тогда
		
		Если Поля.ПоляДат.Свойство(Тег) Тогда
			ТекстОшибки = Неопределено;
			Значение = ПолучитьДатуИзСтроки(Значение, ТекстОшибки);
			ЕстьОшибка = ЗначениеЗаполнено(ТекстОшибки);
		ИначеЕсли Поля.ПоляЧисел.Свойство(Тег) Тогда
			Значение = Число(Значение);
		КонецЕсли;
		Попытка
			Если Тег = ВРег("ДатаНачала") ИЛИ Тег = ВРег("ДатаКонца") ИЛИ Тег = ВРег("РасчСчет") ИЛИ Тег = ВРег("Документ") Тогда
				ЗаполнитьУсловияОтбора(УсловияОтбора, СтруктураПолей, Тег, Значение);
			ИначеЕсли Тег = ВРег("ВремяСоздания") Тогда 
				Если СтрДлина(Значение) > 8 Тогда 
					МассивДат = СтрРазделить(Значение, " ");
					ЗначениеВремени = МассивДат[1];
				Иначе
					ЗначениеВремени = Значение;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ЗначениеXDTO, СтруктураПолей[Тег],
					?(СтрДлина(ЗначениеВремени) = 7, "0" + ЗначениеВремени, ЗначениеВремени));
			ИначеЕсли Тег = ВРег("ВерсияФормата") Тогда
				ЗаполнитьСвойствоXDTO(ЗначениеXDTO, СтруктураПолей[Тег], "1.05");
			ИначеЕсли Тег = ВРег("Кодировка") Тогда
			Иначе
				ЗаполнитьСвойствоXDTO(ЗначениеXDTO, СтруктураПолей[Тег], Значение);
			КонецЕсли
		Исключение
			ЕстьОшибка = Истина;
		КонецПопытки;
		
	Иначе
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'Неверный реквизит заголовка, строка %1 : %2'");
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																ТекстСообщения,
																ТекущаяСтрока - 1,
																ТекстСтрокиЗаголовка);
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Функция РекурсивноРазобратьДопФайл(ОбъектРазбора, ДеревоДопДанных, ЮридическиЗначимый = Ложь)
	
	Для Каждого Реквизит Из ОбъектРазбора.Реквизит Цикл
		СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", Реквизит.Имя, Реквизит.Значение);
		СтрокиДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора, Истина);
		Если СтрокиДЗ.Количество() <> 0 Тогда
			СтрДЗ = СтрокиДЗ[0];
		Иначе
			СтрДЗ = ДеревоДопДанных.Строки.Добавить();
			СтрДЗ.ИмяРеквизита = Реквизит.Имя;
			СтрДЗ.ЗначениеРеквизита = Реквизит.Значение;
			СтрДЗ.ЮридическиЗначимый = ЮридическиЗначимый;
		КонецЕсли;
		Если Реквизит.Реквизит <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(Реквизит, СтрДЗ, ЮридическиЗначимый);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ИнициализироватьДеревоРазбора()
	
	ДеревоРазбора = Новый ДеревоЗначений;
	ДеревоРазбора.Колонки.Добавить("ТипОбъекта");
	ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");
	ДеревоРазбора.Колонки.Добавить("ИндексСтроки");
	ДеревоРазбора.Колонки.Добавить("Реквизит");
	ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");
	ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");
	ДеревоРазбора.Колонки.Добавить("ВидЭД");
	ДеревоРазбора.Колонки.Добавить("ИД");
	ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");
	ДеревоРазбора.Колонки.Добавить("ДопДанные");
	
	Возврат ДеревоРазбора;
	
КонецФункции

Функция НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ЗначениеТипаОбъекта)
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ЗначениеТипаОбъекта, "ТипОбъекта");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Добавить();
		НайденнаяСтрока.ТипОбъекта = ЗначениеТипаОбъекта;
		НайденнаяСтрока.ИндексСтроки = Строка(ДеревоРазбора.Строки.Индекс(НайденнаяСтрока));
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Процедура ДобавитьРеквизитШапкиОбъекта(СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект = Неопределено)
	
	// Добавить в реквизиты шапки ЭлектронныеДокументы
	НовСтрока                   = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит          = ИмяРеквизита;
	НовСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	Если СсылкаНаОбъект <> Неопределено Тогда
		НовСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьФайлCMLпоXDTO(ИмяФайла, ДеревоРазбора, НовыйЭД, ПоказыватьОшибки = Ложь)
	
	ОбъектXML = Новый ЧтениеXML;
	Ошибка = Ложь;
	НеизвестныйЭД = Ложь;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		ЕстьСвойствоИдФайл = ЭД.Свойства().Получить("ИдФайл") <> Неопределено;
		ПространствоИменCML = ПространствоИменCML();

		Если ЭД.Тип() = ПолучитьТипЗначенияCML("ClientBankExchange","urn:1C.ru:ClientBankExchange") Тогда
			Если ЭД.СекцияПлатежногоДокумента.Количество()=1 И ЭД.СекцияРасчСчет=Неопределено Тогда
				ПрочитатьПлатежноеПоручениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли НовыйЭД.НаправлениеЭД = "Входящий" Тогда
				ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			Иначе
				ПрочитатьЗапросВыпискиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			КонецЕсли;
		ИначеЕсли ЭД.Свойства().Получить("СекцияРасчСчет") <> Неопределено Тогда
			ОбъектXML.ОткрытьФайл(ИмяФайла);
			ClientBankExchange = ПолучитьТипЗначенияCML("ClientBankExchange", "urn:1C.ru:ClientBankExchange");
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ClientBankExchange);
			ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);			
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("Контрагент",ПространствоИменCML) Тогда
			ПрочитатьРеквизитыОрганизацииXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
			
		Иначе
			НеизвестныйЭД = Истина;
		КонецЕсли;
		Если НеизвестныйЭД Тогда
			Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1.'"), ИмяФайла);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Ошибка = Истина;
		Иначе
			Строки = ДеревоРазбора.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтавкаНДС"), Истина);
		КонецЕсли;
	Исключение
		Ошибка = Истина;
		ТекстСообщения = Неопределено;
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) ИЛИ ПоказыватьОшибки Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	Возврат НЕ Ошибка;
	
КонецФункции

Процедура ПрочитатьРеквизитыОрганизацииXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД =  "РеквизитыОрганизации";

	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН",						ЭД.ИНН);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП",						ЭД.КПП);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКПО",						ЭД.ОКПО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Наименование",				ЭД.Наименование);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОфициальноеНаименование",	ЭД.ОфициальноеНаименование);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОсновнойВидДеятельности",	ЭД.ОсновнойВидДеятельности);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЕГРПО",						ЭД.ЕГРПО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКВЭД",						ЭД.ОКВЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКДП",						ЭД.ОКДП);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКОПФ",						ЭД.ОКОПФ);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКФС",						ЭД.ОКФС);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКПО",						ЭД.ОКПО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаРегистрации",			ЭД.ДатаРегистрации);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолноеНаименование",			ЭД.ПолноеНаименование);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Обращение",					ЭД.Обращение);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Фамилия",					ЭД.Фамилия);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Имя",						ЭД.Имя);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отчество",					ЭД.Отчество);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаРождения",				ЭД.ДатаРождения);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МестоРождения",				ЭД.МестоРождения);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Пол",						ЭД.Пол);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "УдостоверениеЛичности",		ЭД.УдостоверениеЛичности);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "АдресРегистрации",			ЭД.АдресРегистрации);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Должность",					ЭД.Должность);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Комментарий",				ЭД.Комментарий);
	

КонецПроцедуры

Процедура ПрочитатьПлатежноеПоручениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = "ПлатежноеПоручение";
	
	ПлатежныйДокумент = ЭД.СекцияПлатежногоДокумента[0];
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер",          ПлатежныйДокумент.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",           ПлатежныйДокумент.Дата);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СекцияДокумент", ПлатежныйДокумент.СекцияДокумент);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма",          ПлатежныйДокумент.Сумма);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ПлатежныйДокумент.Сумма);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ПлатежныйДокумент.ИдДокумента);
	Если Не ПлатежныйДокумент.ПлатежиВБюджет = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоНалоговыйПлатеж",  Истина);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтатусСоставителя",   ПлатежныйДокумент.ПлатежиВБюджет.СтатусСоставителя);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательКБК",       ПлатежныйДокумент.ПлатежиВБюджет.ПоказательКБК);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКАТО",               ПлатежныйДокумент.ПлатежиВБюджет.ОКАТО);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательОснования", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательОснования);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательПериода",   ПлатежныйДокумент.ПлатежиВБюджет.ПоказательПериода);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательНомера",    ПлатежныйДокумент.ПлатежиВБюджет.ПоказательНомера);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательДаты",      ПлатежныйДокумент.ПлатежиВБюджет.ПоказательДаты);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательТипа",      ПлатежныйДокумент.ПлатежиВБюджет.ПоказательТипа);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоНалоговыйПлатеж",  Ложь);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидОплаты",          ПлатежныйДокумент.РеквизитыПлатежа.ВидОплаты);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидПлатежа",         ПлатежныйДокумент.РеквизитыПлатежа.ВидПлатежа);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Код",                ПлатежныйДокумент.РеквизитыПлатежа.Код);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа",  ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа1", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа2", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа3", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа3);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа4", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа4);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа5", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа5);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа6", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа6);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Очередность",        ПлатежныйДокумент.РеквизитыПлатежа.Очередность);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСписано",        ПлатежныйДокумент.РеквизитыПлательщика.ДатаСписано);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Плательщик",         ПлатежныйДокумент.РеквизитыПлательщика.Плательщик);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Плательщик1",        ПлатежныйДокумент.РеквизитыПлательщика.Плательщик1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Плательщик2",        ПлатежныйДокумент.РеквизитыПлательщика.Плательщик2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Плательщик3",        ПлатежныйДокумент.РеквизитыПлательщика.Плательщик3);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Плательщик4",        ПлатежныйДокумент.РеквизитыПлательщика.Плательщик4);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБИК",      ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикБИК);
	Если ЗначениеЗаполнено(ПлатежныйДокумент.РеквизитыПлательщика.Плательщик3) Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПлательщика", Истина);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПлательщика", Ложь);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБанк1",    ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикБанк1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБанк2",    ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикБанк2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикИНН",      ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикИНН);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКПП",      ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикКПП);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКорсчет",  ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикКорсчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикРасчСчет", ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикРасчСчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикСчет",     ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикСчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоступило",      ПлатежныйДокумент.РеквизитыПолучателя.ДатаПоступило);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",         ПлатежныйДокумент.РеквизитыПолучателя.Получатель);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель1",        ПлатежныйДокумент.РеквизитыПолучателя.Получатель1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель2",        ПлатежныйДокумент.РеквизитыПолучателя.Получатель2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель3",        ПлатежныйДокумент.РеквизитыПолучателя.Получатель3);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель4",        ПлатежныйДокумент.РеквизитыПолучателя.Получатель4);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБИК",      ПлатежныйДокумент.РеквизитыПолучателя.ПолучательБИК);
	Если ЗначениеЗаполнено(ПлатежныйДокумент.РеквизитыПолучателя.Получатель3) Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПолучателя", Истина);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПолучателя", Ложь);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБанк1",    ПлатежныйДокумент.РеквизитыПолучателя.ПолучательБанк1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБанк2",    ПлатежныйДокумент.РеквизитыПолучателя.ПолучательБанк2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательИНН",      ПлатежныйДокумент.РеквизитыПолучателя.ПолучательИНН);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКПП",      ПлатежныйДокумент.РеквизитыПолучателя.ПолучательКПП);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКорсчет",  ПлатежныйДокумент.РеквизитыПолучателя.ПолучательКорсчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательРасчСчет", ПлатежныйДокумент.РеквизитыПолучателя.ПолучательРасчСчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательСчет",     ПлатежныйДокумент.РеквизитыПолучателя.ПолучательСчет);
	
КонецПроцедуры

Процедура ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД =  "ВыпискаБанка";
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",   ЭД.Отправитель);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",    ЭД.Получатель);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания",  ЭД.ДатаСоздания);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяСоздания", ЭД.ВремяСоздания);
	Если НЕ ЭД.СекцияРасчСчет = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЭД.СекцияРасчСчет.ДатаНачала);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  ЭД.СекцияРасчСчет.ДатаКонца);
		Если ЭД.СекцияРасчСчет.РасчСчета.Количество()>0 Тогда
			
			Для Каждого РеквизитыРасчСчета Из ЭД.СекцияРасчСчет.РасчСчета Цикл
				СписокТЧ = Новый СписокЗначений;
				ПараметрыСчета = Новый Структура;
				ПараметрыСчета.Вставить("РасчСчет",         РеквизитыРасчСчета.РасчСчет);
				ПараметрыСчета.Вставить("НачальныйОстаток", РеквизитыРасчСчета.НачальныйОстаток);
				ПараметрыСчета.Вставить("ВсегоПоступило",   РеквизитыРасчСчета.ВсегоПоступило);
				ПараметрыСчета.Вставить("ВсегоСписано",     РеквизитыРасчСчета.ВсегоСписано);
				ПараметрыСчета.Вставить("КонечныйОстаток",  РеквизитыРасчСчета.КонечныйОстаток);
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "БанковскийСчет");
				РасчетныйСчет = НайтиСсылкуНаОбъект(
																"БанковскийСчет",
																РеквизитыРасчСчета.РасчСчет);
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(
															НайденныйТипВДереве,
															РеквизитыРасчСчета.РасчСчет,
															,
															РасчетныйСчет,
															ПараметрыСчета,
															ДеревоРазбора,
															Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "БанковскийСчет");
				ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "БанковскийСчет", СписокТЧ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭД.УсловияОтбора = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЭД.УсловияОтбора.ДатаНачала);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  ЭД.УсловияОтбора.ДатаКонца);
	КонецЕсли;
	
	Для Каждого ЭлементПлатежа Из ЭД.СекцияПлатежногоДокумента Цикл
		РеквизитыПлатежа = Новый СписокЗначений;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.СекцияДокумент, "СекцияДокумент");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Номер, "Номер");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Дата,  "Дата");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Сумма, "Сумма");
		Если НЕ ЭлементПлатежа.Квитанция = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияДата,       "КвитанцияДата");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияВремя,      "КвитанцияВремя");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияСодержание, "КвитанцияСодержание");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикСчет, "ПлательщикСчет");
		Если НЕ ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано.__content, "ДатаСписано");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано.ИдПлатежа, "ИдПлатежа");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик,         "Плательщик");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикИНН,      "ПлательщикИНН");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикКПП,      "ПлательщикКПП");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик1,        "Плательщик1");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик2,        "Плательщик2");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик3,        "Плательщик3");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик4,        "Плательщик4");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикРасчСчет, "ПлательщикРасчСчет");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБанк1,    "ПлательщикБанк1");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБанк2,    "ПлательщикБанк2");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБИК,      "ПлательщикБИК");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикКорсчет,  "ПлательщикКорсчет");
		
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательСчет,      "ПолучательСчет");
		Если НЕ ЭлементПлатежа.РеквизитыПолучателя.ДатаПоступило = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ДатаПоступило.__content, "ДатаПоступило");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель,          "Получатель");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательИНН,       "ПолучательИНН");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательКПП,       "ПолучательКПП");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель1,         "Получатель1");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель2,         "Получатель2");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель3,         "Получатель3");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель4,         "Получатель4");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательРасчСчет,  "ПолучательРасчСчет");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБанк1,     "ПолучательБанк1");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБанк2,     "ПолучательБанк2");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБИК,       "ПолучательБИК");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательКорсчет,   "ПолучательКорсчет");
		
		Если НЕ ЭлементПлатежа.РеквизитыПлатежа = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.ВидПлатежа,         "ВидПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.ВидОплаты,          "ВидОплаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.Очередность,        "Очередность");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.Код,                "Код");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.КодНазПлатежа,      "КодНазПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа,  "НазначениеПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа1, "НазначениеПлатежа1");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа2, "НазначениеПлатежа2");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа3, "НазначениеПлатежа3");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа4, "НазначениеПлатежа4");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа5, "НазначениеПлатежа5");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа6, "НазначениеПлатежа6");
		КонецЕсли;
		
		Если НЕ ЭлементПлатежа.ПлатежиВБюджет = Неопределено Тогда
			РеквизитыПлатежа.Добавить(Истина, "ЭтоПлатежВБюджет");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.СтатусСоставителя,   "СтатусСоставителя");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательКБК,       "ПоказательКБК");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ОКАТО,               "ОКАТО");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательОснования, "ПоказательОснования");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательПериода,   "ПоказательПериода");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательНомера,    "ПоказательНомера");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательДаты,      "ПоказательДаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательТипа,      "ПоказательТипа");
		Иначе
			РеквизитыПлатежа.Добавить(Ложь, "ЭтоПлатежВБюджет");
		КонецЕсли;
		
		Если НЕ ЭлементПлатежа.ДополнительныеРеквизиты = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.СрокАкцепта,          "СрокАкцепта");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ВидАккредитива,       "ВидАккредитива");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.СрокПлатежа,          "СрокПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.УсловиеОплаты,        "УсловиеОплаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ПлатежПоПредст,       "ПлатежПоПредст");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ДополнУсловия,        "ДополнУсловия");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.НомерСчетаПоставщика, "НомерСчетаПоставщика");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ДатаОтсылкиДок,       "ДатаОтсылкиДок");
		КонецЕсли;
		
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыПлатежа);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьСтрокуВДеревеРазбора(СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДеревоРазбора, Ошибка)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
			НайденнаяСтрока.ИД = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
				// У номенклатуры может быть такое, в случае когда несколько элементов вход.данных
				// имеют ссылку на один элемент справочника.
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СсылкаНаОбъект",  СсылкаНаОбъект);
				ПараметрыОтбора.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
				ПараметрыОтбора.Вставить("ИД",              ИдОбъекта);
				НайденныеСтроки = СтрокаТипаВДереве.Строки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
					НайденнаяСтрока.СсылкаНаОбъект  = СсылкаНаОбъект;
					НайденнаяСтрока.ИД              = ИдОбъекта;
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
					НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
						НайденнаяСтрока));
					ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
				Иначе // Непредвиденная ситуация
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: неуникальное описание для ИД <%1>, Описание <%2>'"),
						ИдОбъекта, ОписаниеОбъекта);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдОбъекта) Тогда
		
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ИдОбъекта, "ИД");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ИД              = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Возврат НайденнаяСтрока;
		КонецЕсли;
	Иначе
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ОписаниеОбъекта, "ОписаниеОбъекта");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Процедура ДобавитьДопРеквизиты(СтрокаДереваРазбора, ДопРеквизиты, ДеревоРазбора, Отказ = Ложь)
	
	Для Каждого ТекЭл Из ДопРеквизиты Цикл
		
		Если НЕ ТипЗнч(ТекЭл.Значение) = Тип("ОбъектXDTO") Тогда
					
			Если ЗначениеЗаполнено(ТекЭл.Значение) Тогда
				Если ТипЗнч(ТекЭл.Значение) = Тип("Массив") И НЕ ТекЭл.Ключ = "ЗначенияСвойств" И НЕ ТекЭл.Ключ = "Картинки" Тогда
					Для Каждого ТекЭлМассива Из ТекЭл.Значение Цикл
						Если ТипЗнч(ТекЭлМассива) = Тип("Структура") Тогда
							ДобавитьДопРеквизиты(СтрокаДереваРазбора, ТекЭлМассива, ДеревоРазбора, Отказ);
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Поищем, возможно уже есть такой реквизит с таким же значением.
					НайденнаяСтрока = СтрокаДереваРазбора.Строки.Найти(ТекЭл.Ключ, "Реквизит", Истина);
					Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.ЗначениеРеквизита = ТекЭл.Значение Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтрока = СтрокаДереваРазбора.Строки.Добавить();
					НовСтрока.Реквизит          = ТекЭл.Ключ;
					НовСтрока.ЗначениеРеквизита = ТекЭл.Значение;
					// Если ИндексСтроки, то попытка найти СсылкуНаОбъект.
					Если ТипЗнч(НовСтрока.ЗначениеРеквизита) = Тип("Строка") Тогда
						НайденнаяСтрока = ДеревоРазбора.Строки.Найти(НовСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
						Если НайденнаяСтрока <> Неопределено Тогда
							Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
								НовСтрока.СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьЗапросВыпискиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД =  "ЗапросВыписки";
	
	ЗапросВыписки = ЭД.УсловияОтбора;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЗапросВыписки.ДатаНачала);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  ЗапросВыписки.ДатаКонца);
	Для Каждого Элемент Из ЗапросВыписки.РасчСчет Цикл
		РеквизитыСчета = Новый СписокЗначений;
		РеквизитыСчета.Добавить(Элемент, "НомерСчета");
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыСчета);
	КонецЦикла;

КонецПроцедуры

// Только для внутреннего использования
Процедура ДобавитьРеквизитыТЧОбъекта(СтрокаЭлементов, ИмяТЧ, СписокРеквизитов)
	
	// Добавить в реквизиты ТЧ ЭлектронныеДокументы
	НовСтрока          = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит = ИмяТЧ;
	Для Каждого ТекЭлСписка Из СписокРеквизитов Цикл
		НовСтрокаТЧ                   = НовСтрока.Строки.Добавить();
		НовСтрокаТЧ.Реквизит          = ТекЭлСписка.Представление;
		НовСтрокаТЧ.ЗначениеРеквизита = ТекЭлСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияОтбора(УсловияОтбора, СтруктураСчета, Тег, Значение)

	Если Тег = ВРег("ДатаНачала") ИЛИ Тег = ВРег("ДатаКонца") Тогда
		ЗаполнитьСвойствоXDTO(УсловияОтбора, СтруктураСчета[Тег], Значение);
	ИначеЕсли Тег = ВРег("РасчСчет") Тогда
		УсловияОтбора.РасчСчет.Добавить(Значение);
	ИначеЕсли Тег = ВРег("Документ") Тогда
		УсловияОтбора.Документ.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция УчастникВыписки(Участник, ИНН, Счет)
	
	// Проверим есть ли в представлении участника слеши
	Разделитель = "//";
	УчастникФизическоеЛицо = Ложь;
	МинимальнаяДлинаИНН = 10;
	МаксимальнаяДлинаИНН = 12;
	ИдентификаторСчета = 5;
	ЧастиНазванияБанка = СловарьЧастейНазвнияБанка();
	
	ИННУчастника = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ИНН, "0");
	ЭтоЮрЛицо = (СтрДлина(ИННУчастника) = МинимальнаяДлинаИНН);
	БалансовыйСчет = Лев(Счет, ИдентификаторСчета);
	СчетФизическогоЛица = (БалансовыйСчет = "40817" Или БалансовыйСчет = "40820");
	СчетПоСБП = (БалансовыйСчет = "30233");
	
	ЕстьИНН = НСтр("ru = 'ИНН'") + " ";
	
	Если СтрНачинаетсяС(СокрЛ(Участник), ЕстьИНН) Тогда
		
		Участник = СокрЛ(Сред(Участник, 4));
		
	КонецЕсли;
	
	Если СтрНайти(Участник, Разделитель) = 0 Тогда
		
		Если СчетПоСБП Тогда
			
			НаименованиеУчастника = СтрШаблон("%1%2", Разделитель, Участник);
			
		Иначе
			
			Возврат Участник;
			
		КонецЕсли;
		
	Иначе
		
		НаименованиеУчастника = Участник;
		
	КонецЕсли;
	
	ЭлементыНаименованияУчастника = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		НаименованиеУчастника, Разделитель, Ложь, Истина);
	
	Если Не ЗначениеЗаполнено(ЭлементыНаименованияУчастника) Тогда
		
		Возврат Участник;
		
	КонецЕсли;
	
	// Проверить, что в представлении есть название физ. лица
	СимволыРазрешенные = Новый Массив;
	НомерПоследнегоНаименования = 1;
	
	Для НомерНаименования = 0 По НомерПоследнегоНаименования Цикл
		
		НаименованиеПроверки = ЭлементыНаименованияУчастника[НомерНаименования];
		
		// Разложим строку и проверим, что в ней не указан ИНН
		ЧастиНаименования = СтрРазделить(НаименованиеПроверки, " ");
		
		Если ЧастиНаименования.Количество() > 0
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиНаименования[0])
			И (СтрДлина(ЧастиНаименования[0]) = 10 Или СтрДлина(ЧастиНаименования[0]) = 12) Тогда
			
			// Уберем ИНН из проверки
			ЧастиНаименования.Удалить(0);
			НаименованиеПроверки = СтрСоединить(ЧастиНаименования, " ");
			
		КонецЕсли;
		
		СимволыРазрешенные.Добавить(СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(
			СтрЗаменить(НаименованиеПроверки, " ", ""),, "-"));
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЭлементыНаименованияУчастника[1])
		Или (НЕ СимволыРазрешенные[0] И НЕ СимволыРазрешенные[1]) Тогда
		
		// Нет возможности определенить наименование клиента
		Возврат Участник;
		
	КонецЕсли;
	
	// Возможные варианты:
	// - Наименование посредника // ФИО физ.лица // адрес и прочие элементы
	// - ФИО физ.лица // адрес и прочие элементы
	Если ПустаяСтрока(ИНН) Или СтрДлина(ИНН) <> МаксимальнаяДлинаИНН Тогда
		
		// Указано наименование банка скорее всего
		ИндексНаименованияУчастника = 1;
		
	Иначе
		
		// Наименование банка не указано
		ИндексНаименованияУчастника = 0;
		
	КонецЕсли;
	
	УчастникЯвляетсяФизическимЛицом = Ложь;
	Для НомерНаименования = ИндексНаименованияУчастника По НомерПоследнегоНаименования Цикл
		
		Если Не ПустаяСтрока(ЭлементыНаименованияУчастника[НомерНаименования])
			И СимволыРазрешенные[НомерНаименования]
			И Не ЭтоПредставлениеБанка(ЭлементыНаименованияУчастника[НомерНаименования], ЧастиНазванияБанка) Тогда
			
			ИндексНаименованияУчастника = НомерНаименования;
			УчастникЯвляетсяФизическимЛицом = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не УчастникЯвляетсяФизическимЛицом Тогда
		
		Возврат Участник;
		
	КонецЕсли;
	
	Если ЭлементыНаименованияУчастника.ВГраница() >= ИндексНаименованияУчастника Тогда
		
		// Почистим ИНН, т.к. он не участника платежа, а банка-посредника
		Если НЕ ПустаяСтрока(ИНН) И СтрДлина(ИНН) = МинимальнаяДлинаИНН Тогда
			
			ИНН = "";
			
		КонецЕсли;
		
		Возврат ЭлементыНаименованияУчастника[ИндексНаименованияУчастника];
		
	КонецЕсли;
	
	Возврат Участник;
	
КонецФункции

Функция СловарьЧастейНазвнияБанка()
	
	Результат = Новый Структура();
	
	ПолныеСлова = Новый Массив;
	ПолныеСлова.Добавить("ОАО"); // Открытое акционерное общество
	ПолныеСлова.Добавить("ЗАО"); // Закрытое акционерное общество
	ПолныеСлова.Добавить("ПАО"); // Публичное акционерное общество
	ПолныеСлова.Добавить("ООО"); // Общество с ограниченной ответственностью
	ПолныеСлова.Добавить("АО"); // Акционерное общество
	ПолныеСлова.Добавить("АКБ"); // Акционерный коммерческий банк
	ПолныеСлова.Добавить("ФКБ"); // Филиал коммерческого банка
	ПолныеСлова.Добавить("ФАКБ"); // Филиал акционерного коммерческого банка
	ПолныеСлова.Добавить("КБ"); // Коммерческий банк
	ПолныеСлова.Добавить("КИБ"); // Коммерческий инвестиционный банк
	ПолныеСлова.Добавить("НКО"); // Небанковская кредитная организация
	ПолныеСлова.Добавить("РНКО"); // Расчетная небанковская кредитная организация
	ПолныеСлова.Добавить("НДКО"); // Небанковская депозитно-кредитная организация
	ПолныеСлова.Добавить("РКЦ"); // Расчетно-кассовый центр
	ПолныеСлова.Добавить("Ф-Л"); // Филиал
	ПолныеСлова.Добавить("БАНК");
	ПолныеСлова.Добавить("БАНКА");
	ПолныеСлова.Добавить("ФИЛИАЛ");
	ПолныеСлова.Добавить("ОТДЕЛЕНИЕ");
	Результат.Вставить("ПолныеСлова", ПолныеСлова);
	
	НачалоСлов = Новый Массив;
	НачалоСлов.Добавить("Ф-Л");
	НачалоСлов.Добавить("ФИЛИАЛ");
	НачалоСлов.Добавить("ОТДЕЛЕНИ");
	НачалоСлов.Добавить("КРЕДИ");
	Результат.Вставить("НачалоСлов", НачалоСлов);
	
	КонецСлов = Новый Массив;
	КонецСлов.Добавить("БАНКА");
	КонецСлов.Добавить("БАНК");
	КонецСлов.Добавить("КРЕДИТ");
	Результат.Вставить("КонецСлов", КонецСлов);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПредставлениеБанка(ТекстПредставленияУчастника, СловарьСловНазванияБанка)
	
	ЧастиПредставленияНаименования = СтрРазделить(ТекстПредставленияУчастника, " ", Ложь);
	
	Для каждого ЧастьНаименования Из ЧастиПредставленияНаименования Цикл
		
		ЧастьНаименованияПоиска = ВРег(ЧастьНаименования);
		
		Если СловарьСловНазванияБанка.ПолныеСлова.Найти(ЧастьНаименованияПоиска) <> Неопределено Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
		Для каждого СловоПоиска Из СловарьСловНазванияБанка.НачалоСлов Цикл
			
			Если СтрНачинаетсяС(ЧастьНаименованияПоиска, СловоПоиска) Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СловоПоиска Из СловарьСловНазванияБанка.КонецСлов Цикл
			
			Если СтрЗаканчиваетсяНа(ЧастьНаименованияПоиска, СловоПоиска) Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьВидДокумента(ДокументВидОплаты) 
	
	Если ДокументВидОплаты = "01" Тогда
		Возврат "Платежное поручение";
	ИначеЕсли ДокументВидОплаты = "02" Тогда 
		Возврат "Платежное требование";
	ИначеЕсли ДокументВидОплаты = "03" Тогда
		Возврат "Чек";
	ИначеЕсли ДокументВидОплаты = "04" Тогда 
	    Возврат "Объявление на взнос наличными";
	ИначеЕсли ДокументВидОплаты = "06" Тогда 
		Возврат "Инкассовое поручение";
	ИначеЕсли ДокументВидОплаты = "07" Тогда
		Возврат "Расчетный чек";
	ИначеЕсли ДокументВидОплаты = "08" Тогда
		Возврат "Аккредитив";
	ИначеЕсли ДокументВидОплаты = "09" Тогда
		Возврат "Мемориальный ордер";
	ИначеЕсли ДокументВидОплаты = "12" Тогда 
		Возврат "Авизо";
	ИначеЕсли ДокументВидОплаты = "16" Тогда 
		Возврат "Платежный ордер";
	ИначеЕсли ДокументВидОплаты = "17" Тогда
		Возврат  "Банковский ордер";
	ИначеЕсли ДокументВидОплаты = "18" Тогда
		Возврат "Ордер по передаче ценностей";
	Иначе 
		Возврат "";
    КонецЕсли;
	
КонецФункции
#КонецОбласти


