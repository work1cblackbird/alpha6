// Общий модуль "Управление свойствами (платформа,сервер)"

#Область ПрограммныйИнтерфейс

// Обновляет видимость, доступность и обязательность заполнения
// дополнительных реквизитов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта с доп. свойствами
//  Объект - ДанныеФормыСтруктура - объект формы.
//
Процедура ОбновитьЗависимостиДополнительныхРеквизитов(Форма, Объект = Неопределено) Экспорт
	
	// При чтении данных реквизиты формы еще не созданы.
	Если НЕ ЕстьРеквизит(Форма, "Свойства_ОписаниеЗависимыхДополнительныхРеквизитов") Тогда
		Возврат;
	КонецЕсли;
	
	// Перенесено из УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов.
	
	Если
		НЕ Форма.Свойства_ИспользоватьСвойства
		ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		
		ОписаниеОбъекта = Форма.Объект;
		
	Иначе
		
		ОписаниеОбъекта = Объект;
		
	КонецЕсли;
	
	Для Каждого ОписаниеЗависимогоРеквизита Из Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов Цикл
		
		Если ОписаниеЗависимогоРеквизита.УсловиеДоступности <> Неопределено Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("ЗначенияПараметров", ОписаниеЗависимогоРеквизита.УсловиеДоступности.ЗначенияПараметров);
			Параметры.Вставить("Форма", Форма);
			Параметры.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
			
			Результат = Вычислить(ОписаниеЗависимогоРеквизита.УсловиеДоступности.КодУсловия);
			Элемент = Форма.Элементы[ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение];
			
			Если Элемент.Доступность <> Результат Тогда
				
				Элемент.Доступность = Результат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеЗависимогоРеквизита.УсловиеВидимости <> Неопределено Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("ЗначенияПараметров", ОписаниеЗависимогоРеквизита.УсловиеВидимости.ЗначенияПараметров);
			Параметры.Вставить("Форма", Форма);
			Параметры.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
			
			Результат = Вычислить(ОписаниеЗависимогоРеквизита.УсловиеВидимости.КодУсловия);
			Элемент = Форма.Элементы[ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение];
			
			Если Элемент.Видимость <> Результат Тогда
				
				Элемент.Видимость = Результат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения <> Неопределено Тогда
			
			Если Не ОписаниеЗависимогоРеквизита.ЗаполнятьОбязательно Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Параметры = Новый Структура;
			Параметры.Вставить("ЗначенияПараметров", ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения.ЗначенияПараметров);
			Параметры.Вставить("Форма", Форма);
			Параметры.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
			Результат = Вычислить(ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения.КодУсловия);
			Элемент = Форма.Элементы[ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение];
			
			Если Элемент.АвтоОтметкаНезаполненного <> Результат Тогда
				
				Элемент.АвтоОтметкаНезаполненного = Результат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает набор свойств объекта по виду номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - владелец свойств.
//  ТипСсылки - Тип - тип ссылки владельца свойств;
//  НаборыСвойств - ТаблицаЗначений - таблица значений с колонками:
//                    Набор - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений.
//
//                    // Далее свойства элемента формы типа ГруппаФормы вида обычная группа
//                    // или страница, которая создается, если наборов больше одного без учета
//                    // пустого набора, который описывает свойства группы удаленных реквизитов.
//                    
//                    // Если значение Неопределено, значит использовать значение по умолчанию.
//                    
//                    // Для любой группы управляемой формы.
//                    Высота                   - Число.
//                    Заголовок                - Строка.
//                    Подсказка                - Строка.
//                    РастягиватьПоВертикали   - Булево.
//                    РастягиватьПоГоризонтали - Булево.
//                    ТолькоПросмотр           - Булево.
//                    ЦветТекстаЗаголовка      - Цвет.
//                    Ширина                   - Число.
//                    ШрифтЗаголовка           - Шрифт.
//                    
//                    // Для обычной группы и страницы.
//                    Группировка              - ГруппировкаПодчиненныхЭлементовФормы.
//                    
//                    // Для обычной группы.
//                    Отображение              - ОтображениеОбычнойГруппы.
//                    
//                    // Для страницы.
//                    Картинка                 - Картинка.
//                    ОтображатьЗаголовок      - Булево.
//
Процедура ПолучитьНаборыСвойствДляНоменклатуры(Номенклатура, ТипСсылки, НаборыСвойств) Экспорт
	
	Если ТипЗнч(Номенклатура) = ТипСсылки Тогда
		Номенклатура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ЭтоГруппа,ТипНоменклатуры");
	КонецЕсли;
	
	Если Номенклатура.ЭтоГруппа = Ложь Тогда
		Строка = НаборыСвойств.Добавить();
		Строка.Набор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ТипНоменклатуры, "НаборСвойствНоменклатуры");
		Строка.Заголовок = НСтр("ru = 'Свойства для типа номенклатуры'");
	КонецЕсли;
	
	Строка = НаборыСвойств.Добавить();
	Строка.Набор     = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
	Строка.Заголовок = НСтр("ru = 'Общие свойства'");
	
КонецПроцедуры // ПолучитьНаборыСвойствДляНоменклатуры()

// Получает набор свойств объекта по виду номенклатуры.
//
// Параметры:
//  ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикаНоменклатуры - владелец свойств.
//  ТипСсылки - Тип - тип ссылки владельца свойств;
//  НаборыСвойств - ТаблицаЗначений - таблица значений с колонками:
//                    Набор - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений.
//
//                    // Далее свойства элемента формы типа ГруппаФормы вида обычная группа
//                    // или страница, которая создается, если наборов больше одного без учета
//                    // пустого набора, который описывает свойства группы удаленных реквизитов.
//                    
//                    // Если значение Неопределено, значит использовать значение по умолчанию.
//                    
//                    // Для любой группы управляемой формы.
//                    Высота                   - Число.
//                    Заголовок                - Строка.
//                    Подсказка                - Строка.
//                    РастягиватьПоВертикали   - Булево.
//                    РастягиватьПоГоризонтали - Булево.
//                    ТолькоПросмотр           - Булево.
//                    ЦветТекстаЗаголовка      - Цвет.
//                    Ширина                   - Число.
//                    ШрифтЗаголовка           - Шрифт.
//                    
//                    // Для обычной группы и страницы.
//                    Группировка              - ГруппировкаПодчиненныхЭлементовФормы.
//                    
//                    // Для обычной группы.
//                    Отображение              - ОтображениеОбычнойГруппы.
//                    
//                    // Для страницы.
//                    Картинка                 - Картинка.
//                    ОтображатьЗаголовок      - Булево.
//
Процедура ПолучитьНаборыСвойствДляХарактеристикНоменклатуры(ХарактеристикаНоменклатуры,
		ТипСсылки, НаборыСвойств) Экспорт
	
	Строка = НаборыСвойств.Добавить();
	Строка.Набор     = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие;
	Строка.Заголовок = НСтр("ru = 'Общие свойства'");
	
	Если ТипЗнч(ХарактеристикаНоменклатуры) = ТипСсылки Тогда
		ХарактеристикаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ХарактеристикаНоменклатуры, "Владелец");
	КонецЕсли;
	
	Строка = НаборыСвойств.Добавить();
	
	Если НЕ ХарактеристикаНоменклатуры.Владелец = Неопределено Тогда
		Если ХарактеристикаНоменклатуры.Владелец.Метаданные() = Метаданные.Справочники.Номенклатура Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Ссылка";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка", ХарактеристикаНоменклатуры.Владелец);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Строка.Набор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ТипНоменклатуры, "НаборСвойствХарактеристик");
				Строка.Заголовок = НСтр("ru = 'Свойства для номенклатуры'");
			КонецЕсли;
			
		Иначе
			Строка.Набор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ХарактеристикаНоменклатуры.Владелец, "НаборСвойствХарактеристик"
			);
			Строка.Заголовок = НСтр("ru = 'Свойства для типа номенклатуры'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьНаборыСвойствДляХарактеристикНоменклатуры()

// Возвращает значение дополнительного свойства объекта
// Параметры:
//  Свойство        - Искомое свойство.
//  ЗначениеСвойств - Таблица со свойствами, полученная методом "ПолучитьЗначенияСвойств",
//                    или ссылка на владельца свойств.
//  ПоУмолчанию     - При отсутствии свойства будет возвращено это значение.
//
// Возвращаемое значение:
//   Структура - с полями:
//   * Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство владельца.
//   * Значение - Произвольный - значения любого типа из описания типов свойства объекта метаданных:
//                  "Метаданные.ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип".
//
Функция ПолучитьЗначениеСвойства(Знач Свойство, Знач ЗначениеСвойств, ПоУмолчанию = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеСвойств))
		И НЕ УправлениеСвойствами.ИспользоватьДопСведения(ЗначениеСвойств) Тогда
		Возврат ПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ЗначениеСвойств)=Тип("ТаблицаЗначений") Тогда
		ЗначениеСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(ЗначениеСвойств);
	КонецЕсли;
	
	Если ТипЗнч(Свойство)=Тип("Строка") Тогда
		Попытка
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения[Свойство];
		Исключение
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
		КонецПопытки;
	КонецЕсли;
	
	НайденныеСтроки = ЗначениеСвойств.НайтиСтроки(Новый Структура("Свойство", Свойство));
	
	Если НайденныеСтроки.Количество()=0 Тогда
		Возврат ПоУмолчанию;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(НайденныеСтроки[0].Значение) Тогда
		Возврат ПоУмолчанию;
		
	Иначе
		Возврат НайденныеСтроки[0].Значение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти