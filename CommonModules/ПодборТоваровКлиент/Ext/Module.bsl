
#Область ПрограммныйИнтерфейс

// Открывает форму подбора.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма владелец подбора.
//  Документ - ДокументОбъект, ДанныеФормыСтруктура - Объект документа для которого открывается подбор.
//  ОбратныйВызов - Строка - Имя обработчика оповещения в форме владельце.
//  ПараметрыОбратногоВызова - Структура - Значение которые будут прокинуты в обратный вызов.
//
Процедура ОткрытьПодборТоваровВДокументАвтосервиса(
	Форма,
	Документ,
	ОбратныйВызов = "Подключаемый_ПодборТоваровЗавершение",
	ПараметрыОбратногоВызова = Неопределено,
	ПараметрыДействия = Неопределено) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеПодборТоваровВДокументАвтосервиса");
	ПараметрыОткрытия = НовыеПараметрыПодбора(Документ);
	
	Если ПараметрыДействия <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОткрытия, ПараметрыДействия);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбратныйВызов) Тогда
		
		Оповещение = Новый ОписаниеОповещения(ОбратныйВызов, Форма, ПараметрыОбратногоВызова);
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ПодборТоваровВДокументАвтосервиса.Форма",
		ПараметрыОткрытия,
		Форма,
		Форма.УникальныйИдентификатор,
		,
		,
		Оповещение);
	
КонецПроцедуры

// Запуск фонового задания для обновления замен номенклатуры.
//
// Параметры:
//  Артикул - Строка - Артикул для поиска. См. ПодборТоваровКлиентСервер.ВАртикулДляПоиска.
//  Производитель - СправочникСсылка.Производитель - Производитель.
//  Форма - УправляемаяФорма - Форма из которой вызывается обновление.
//  ОбратныйВызов - Строка - Имя обработчика оповещения в форме в который будет передано управление при заверщении ФЗ.
//  ДополнительныеДанные - Структура - Дополнительные параметры.
//
Процедура НачатьОбновлениеЗаменНоменклатуры(Артикул, Производитель, Форма, Знач ОбратныйВызов, ДополнительныеДанные = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Артикул) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПодборТоваровВызовСервера.НачатьОбновлениеЗаменНоменклатуры(
		ПодборТоваровКлиентСервер.ВАртикулДляПоиска(Артикул),
		Производитель,
		Форма.УникальныйИдентификатор,
		ДополнительныеДанные);
	
	Форма.ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	Если ЗначениеЗаполнено(ОбратныйВызов) Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ПолучатьРезультат = Истина;
		
		Если ТипЗнч(ОбратныйВызов) = Тип("Строка") Тогда
			
			ОбратныйВызов = Новый ОписаниеОповещения(ОбратныйВызов, Форма, ДлительнаяОперация.ИдентификаторЗадания);
			
		КонецЕсли;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОбратныйВызов, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры поиска номенклатуры по умолчанию.
// 
// Возвращаемое значение:
//  Структура:
//    - ИспользованиеФильтраПроизводитель - Булево - Будет накладывать фильтр на выбранного производителя.
//    - Производитель - СправочникСсылка.Производители, Неопределено - Фильтр провизводитель.
//    - ТочныйПоиск - Булево - Будет выполняться поиск по точному соответствию.
//    - ИскатьВоВнешнихПрайсЛистахКонтрагентов - Булево - Будет выполняться поиск и во нешних прайс листах.
//
Функция НовыеПараметрыПоискаНоменклатуры() Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИспользованиеФильтраПроизводитель", Ложь);
	ПараметрыПоиска.Вставить("ТочныйПоиск", Ложь);
	ПараметрыПоиска.Вставить("ИскатьВоВнешнихПрайсЛистахКонтрагентов", Истина);
	ПараметрыПоиска.Вставить("Производитель", Неопределено);
	Возврат ПараметрыПоиска;
	
КонецФункции

// Запуск фонового задания для поиска номенклатуры с учетом прайс-листов контрагнетов.
//
// Параметры:
//  СтрокаПоиска - Строка - Параметры поиска.
//  ПараметрыПоиска - Структура - См. ПодборТоваровКлиент.НовыеПараметрыПоискаНоменклатуры() возвращаемое значение.
//  Форма - УправляемаяФорма - Форма из которой идет вызов поиска и располагается процедура обратного вызова.
//  ОбратныйВызов - Строка - Процедура которая будет вызвана по окончанию поиска.
//
Процедура НачатьПоискНоменклатуры(СтрокаПоиска, ПараметрыПоиска, Форма, ОбратныйВызов) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПодборТоваровВызовСервера.НачатьПоискНоменклатуры(
		СтрокаПоиска, СтрокаПоиска, ПараметрыПоиска, Форма.УникальныйИдентификатор);
	
	Форма.ИдентификаторЗаданияПоиска = ДлительнаяОперация.ИдентификаторЗадания;
	
	Если ЗначениеЗаполнено(ОбратныйВызов) Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ПолучатьРезультат = Истина;
		ДлительныеОперацииКлиент
			.ОжидатьЗавершение(ДлительнаяОперация, Новый ОписаниеОповещения(ОбратныйВызов, Форма), ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

// Запуск фонового задания для обновления цен номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура.
//  ПодразделениеКомпании - СправочникСсылка.ПодразделенияКомпании - Подразделение цены.
//  Форма - ФормаКлиентскогоПриложения - Форма из которой вызывается обновление.
//  ОбратныйВызов - Строка - Имя обработчика оповещения в форме в который будет передано управление при заверщении ФЗ.
//
Процедура НачатьОбновлениеЦен(Номенклатура, ПодразделениеКомпании, Форма, ОбратныйВызов) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДлительнаяОперация = ПодборТоваровВызовСервера.НачатьОбновлениеЦен(
		Номенклатура,
		ПодразделениеКомпании,
		Форма.УникальныйИдентификатор
	);
	
	Форма.ИдентификаторЗаданияЦен = ДлительнаяОперация.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Если ТипЗнч(ОбратныйВызов) = Тип("Строка") Тогда
		
		ОбратныйВызов = Новый ОписаниеОповещения(ОбратныйВызов, Форма, ДлительнаяОперация.ИдентификаторЗадания);
		
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОбратныйВызов, ПараметрыОжидания);
	
КонецПроцедуры

// Запуск фонового задания для обновления цен номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура.
//  ПодразделениеКомпании - СправочникСсылка.ПодразделенияКомпании - Подразделение цены.
//  Форма - ФормаКлиентскогоПриложения - Форма из которой вызывается обновление.
//  ОбратныйВызов - Строка - Имя обработчика оповещения в форме в который будет передано управление при заверщении ФЗ.
//
Процедура НачатьОбновлениеЦенКонтрагентов(Номенклатура, ПодразделениеКомпании, Форма, Знач ОбратныйВызов) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДлительнаяОперация = ПодборТоваровВызовСервера.НачатьОбновлениеЦенКонтрагентов(
		Номенклатура, ПодразделениеКомпании, Форма.УникальныйИдентификатор);
	
	Форма.ИдентификаторЗаданияЦенКонтрагентов = ДлительнаяОперация.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Если ТипЗнч(ОбратныйВызов) = Тип("Строка") Тогда
		
		ОбратныйВызов = Новый ОписаниеОповещения(ОбратныйВызов, Форма, ДлительнаяОперация.ИдентификаторЗадания);
		
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОбратныйВызов, ПараметрыОжидания);
	
КонецПроцедуры

// Открывает форму подбора замен.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма владелец подбора.
//  Документ - ДокументОбъект, ДанныеФормыСтруктура - Объект документа для которого открывается подбор.
//  ПараметрыОткрытия - Структура - параметры которые будут переданы в форму подбора при открытии:
//    Валюта - СправочникСсылка - валюта документа;
//    ТипЦен - СправочникСсылка - тип цен документа;
//    ПодразделениеКомпании - СправочникСсылка - подразделение компании документа;
//    ТаблицаДокумента - Строка - адрес размещения табличной части документа во временном хранилище;
//    СкладКомпанииОстатки - СправочникСсылка - склад компании документа.
//  ОбратныйВызов - ОписаниеОповещания - Описание обработчика в который будет передано управление при завершении.
//
Процедура ОткрытьПодборЗаменНоменклатуры(Форма, Документ, ПараметрыОткрытия, ОбратныйВызов=Неопределено) Экспорт
	
	НовыеПараметрыОткрытия = НовыеПараметрыПодбора(Документ);
	
	Если НЕ ПараметрыОткрытия.Свойство("ТаблицаДокумента") Тогда
		ТаблицаДокумента = ПодборТоваровВызовСервера.
			ПодготовитьТаблицуДокументаДляПодбораЗамен(Документ.Товары, Форма.УникальныйИдентификатор);
		ПараметрыОткрытия.Вставить("ТаблицаДокумента", ТаблицаДокумента);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НовыеПараметрыОткрытия, ПараметрыОткрытия, Истина);
	
	Если ОбратныйВызов = Неопределено Тогда
		
		ОбратныйВызов = Новый ОписаниеОповещения("Подключаемый_ПодборЗаменЗавершение", Форма, "ПодборЗамен");
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ПодборЗамен.Форма",
		НовыеПараметрыОткрытия,
		Форма,
		Форма.УникальныйИдентификатор,
		,
		,
		ОбратныйВызов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыеПараметрыПодбора(Документ=Неопределено)
	
	ПараметрыПодбора = Новый Структура("Документ,Валюта,ТипЦен,ПодразделениеКомпании,ДоступныеСклады");
	ПараметрыПодбора.ДоступныеСклады = "установить";
	
	Если Документ = Неопределено Тогда
		
		Возврат ПараметрыПодбора;
		
	КонецЕсли;
	
	ПараметрыПодбора.Документ = Документ.Ссылка;
	ПараметрыПодбора.Валюта = Документ.ВалютаДокумента;
	ПараметрыПодбора.ТипЦен = Документ.ТипЦен;
	ПараметрыПодбора.ПодразделениеКомпании = Документ.ПодразделениеКомпании;
	Возврат ПараметрыПодбора;
	
КонецФункции

#КонецОбласти