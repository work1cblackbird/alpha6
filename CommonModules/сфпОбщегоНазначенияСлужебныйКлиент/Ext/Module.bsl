////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции общего назначения
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет, является ли переданная строка внутренней навигационной ссылкой.
//  
// Параметры:
//  Строка - Строка - навигационная ссылка.
//
Функция ЭтоНавигационнаяСсылка(Строка) Экспорт
	
	Возврат СтрНачинаетсяС(Строка, "e1c:")
		Или СтрНачинаетсяС(Строка, "e1cib/");
	
КонецФункции

#Область ОткрытьПроводник

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьПроводник.
Процедура ОткрытьПроводникПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	
	ФайлИнфо = Контекст.ФайлИнфо;
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьПроводникПослеПроверкиСуществования", ЭтотОбъект, Контекст);
		ФайлИнфо.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ОписаниеОшибки = НСтр("en='The extension for working with files is not installed, opening the folder is not possible.';ru='Расширение для работы с файлами не установлено, открытие папки не возможно.'");
		ОткрытьПроводникОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьПроводник.
Процедура ОткрытьПроводникПослеПроверкиСуществования(Существует, Контекст) Экспорт 
	
	ФайлИнфо = Контекст.ФайлИнфо;
	
	Если Существует Тогда 
		Оповещение = Новый ОписаниеОповещения("ОткрытьПроводникПослеПроверкиЭтоФайл", ЭтотОбъект, Контекст);
		ФайлИнфо.НачатьПроверкуЭтоФайл(Оповещение);
	Иначе 
		ОписаниеОшибки = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдена папка, которую требуется открыть в проводнике:
			           |""%1""'"),
			ФайлИнфо.ПолноеИмя);
		ОткрытьПроводникОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьПроводник.
Процедура ОткрытьПроводникПослеПроверкиЭтоФайл(ЭтоФайл, Контекст) Экспорт 
	
	ФайлИнфо = Контекст.ФайлИнфо;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьПроводникПослеОткрытияКаталога", ЭтотОбъект);
	Если ЭтоФайл Тогда
		// Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
			НачатьЗапускПриложения(Оповещение, "explorer.exe /select, """ + ФайлИнфо.ПолноеИмя + """");
		// Иначе // Это Linux или MacOS.
		//	НачатьЗапускПриложения(Оповещение, "file:///" + ФайлИнфо.Путь);
		// КонецЕсли;
	Иначе // Это каталог.
		НачатьЗапускПриложения(Оповещение, "file:///" + ФайлИнфо.ПолноеИмя);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьПроводник.
Процедура ОткрытьПроводникПослеОткрытияКаталога(КодВозврата, Контекст) Экспорт 
	
	Возврат;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку.
Процедура ОткрытьПроводникОповеститьОбОшибке(ОписаниеОшибки, Контекст)
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда 
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытьФайлВПрограммеПросмотра

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра.
Процедура ОткрытьФайлВПрограммеПросмотраПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	
	ФайлИнфо = Контекст.ФайлИнфо;
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлВПрограммеПросмотраПослеПроверкиСуществования",
			ЭтотОбъект, Контекст);
		ФайлИнфо.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ОписаниеОшибки = НСтр("en='The extension for working with files is not installed, the file can not be opened.';ru='Расширение для работы с файлами не установлено, открытие файла невозможно.'");
		ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра.
Процедура ОткрытьФайлВПрограммеПросмотраПослеПроверкиСуществования(Существует, Контекст) Экспорт
	
	ФайлИнфо = Контекст.ФайлИнфо;
	
	Если Существует Тогда 
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлВПрограммеПросмотраПослеПроверкиЭтоФайл",
			ЭтотОбъект, Контекст);
		ФайлИнфо.НачатьПроверкуЭтоФайл(Оповещение);
	Иначе 
		ОписаниеОшибки = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en='Not found the file you want to open:"
"%1';ru='Не найден файл, который требуется открыть:"
"%1'"),
			ФайлИнфо.ПолноеИмя);
		ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра.
Процедура ОткрытьФайлВПрограммеПросмотраПослеПроверкиЭтоФайл(ЭтоФайл, Контекст) Экспорт
	
	ФайлИнфо = Контекст.ФайлИнфо;
	
	Если ЭтоФайл Тогда
		
		Если ПустаяСтрока(ФайлИнфо.Расширение) Тогда 
			ОписаниеОшибки = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("en='file name contains no extension:"
"%1';ru='Имя файла не содержит расширения:"
"%1'"),
				ФайлИнфо.ПолноеИмя);
			ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
			Возврат;
		КонецЕсли;
		
		Если ЭтоРасширениеИсполняемогоФайла(ФайлИнфо.Расширение) Тогда 
			ОписаниеОшибки = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("en='Executable files access denied:"
"%1';ru='Исполняемые файлы открывать запрещено:"
"%1'"),
				ФайлИнфо.ПолноеИмя);
			ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
			Возврат;
		КонецЕсли;
		
		Оповещение          = Контекст.Оповещение;
		ДождатьсяЗавершения = (Оповещение <> Неопределено);
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлВПрограммеПросмотраПослеЗапускаПриложения", ЭтотОбъект, Контекст,
			"ОткрытьФайлВПрограммеПросмотраПриОбработкеОшибки", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, ФайлИнфо.ПолноеИмя,, ДождатьсяЗавершения);
		
	Иначе 
		ОписаниеОшибки = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en='Not found the file you want to open:"
"%1';ru='Не найден файл, который требуется открыть:"
"%1'"),
			ФайлИнфо.ПолноеИмя);
		ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра.
Процедура ОткрытьФайлВПрограммеПросмотраПослеЗапускаПриложения(КодВозврата, Контекст) Экспорт 
	
	Оповещение = Контекст.Оповещение;
	
	Если Оповещение <> Неопределено Тогда 
		ПриложениеЗапущено = (КодВозврата = 0);
		ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра.
Процедура ОткрытьФайлВПрограммеПросмотраПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке("", Контекст);
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра.
Процедура ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст)
	
	Оповещение = Контекст.Оповещение;
	
	Если Оповещение = Неопределено Тогда
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда 
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе 
		ПриложениеЗапущено = Ложь;
		ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Расширение - Строка - свойство Расширение объекта Файл.
//
Функция ЭтоРасширениеИсполняемогоФайла(Знач Расширение)
	
	Расширение = ВРег(Расширение);
	
	// Windows
	Возврат Расширение = ".BAT" // Batch File
		Или Расширение = ".BIN" // Binary Executable
		Или Расширение = ".CMD" // Command Script
		Или Расширение = ".COM" // Приложение MS-DOS
		Или Расширение = ".CPL" // Control Panel Extension
		Или Расширение = ".EXE" // Исполняемый файл
		Или Расширение = ".GADGET" // Binary Executable
		Или Расширение = ".HTA" // HTML Application
		Или Расширение = ".INF1" // Setup Information File
		Или Расширение = ".INS" // Internet Communication Settings
		Или Расширение = ".INX" // InstallShield Compiled Script
		Или Расширение = ".ISU" // InstallShield Uninstaller Script
		Или Расширение = ".JOB" // Windows Task Scheduler Job File
		Или Расширение = ".LNK" // File Shortcut
		Или Расширение = ".MSC" // Microsoft Common Console Document
		Или Расширение = ".MSI" // Windows Installer Package
		Или Расширение = ".MSP" // Windows Installer Patch
		Или Расширение = ".MST" // Windows Installer Setup Transform File
		Или Расширение = ".OTM" // Макрос Microsoft Outlook
		Или Расширение = ".PAF" // Portable Application Installer File
		Или Расширение = ".PIF" // Program Information File
		Или Расширение = ".PS1" // Windows PowerShell Cmdlet
		Или Расширение = ".REG" // Registry Data File
		Или Расширение = ".RGS" // Registry Script
		Или Расширение = ".SCT" // Windows Scriptlet
		Или Расширение = ".SHB" // Windows Document Shortcut
		Или Расширение = ".SHS" // Shell Scrap Object
		Или Расширение = ".U3P" // U3 Smart Application
		Или Расширение = ".VB"  // VBScript File
		Или Расширение = ".VBE" // VBScript Encoded Script
		Или Расширение = ".VBS" // VBScript File
		Или Расширение = ".VBSCRIPT" // Visual Basic Script
		Или Расширение = ".WS"  // Windows Script
		Или Расширение = ".WSF" // Windows Script
	// Linux
		Или Расширение = ".CSH" // C Shell Script
		Или Расширение = ".KSH" // Unix Korn Shell Script
		Или Расширение = ".OUT" // Исполняемый файл
		Или Расширение = ".RUN" // Исполняемый файл
		Или Расширение = ".SH"  // Shell Script
	// MacOS
		Или Расширение = ".ACTION" // Automator Action
		Или Расширение = ".APP" // Исполняемый файл
		Или Расширение = ".COMMAND" // Terminal Command
		Или Расширение = ".OSX" // Исполняемый файл
		Или Расширение = ".WORKFLOW" // Automator Workflow
	// Прочие
		Или Расширение = ".AIR" // Установочный пакет Adobe AIR
		Или Расширение = ".COFFIE" // Сценарий CoffeeScript (JavaScript)
		Или Расширение = ".JAR" // Архив Java
		Или Расширение = ".JS"  // JScript File
		Или Расширение = ".JSE" // JScript Encoded File
		Или Расширение = ".PLX" // Исполняемый файл Perl
		Или Расширение = ".PYC" // Компилированный файл Python
		Или Расширение = ".PYO"; // Оптимизированный код Python
	
КонецФункции

#КонецОбласти

#Область ОткрытьНавигационнуюСсылку

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку.
Процедура ОткрытьНавигационнуюСсылкуПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	
	НавигационнаяСсылка = Контекст.НавигационнаяСсылка;
	
	Если РасширениеПодключено Тогда
		
		Оповещение          = Контекст.Оповещение;
		ДождатьсяЗавершения = (Оповещение <> Неопределено);
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьНавигационнуюСсылкуПослеЗапускаПриложения", ЭтотОбъект, Контекст,
			"ОткрытьНавигационнуюСсылкуПриОбработкеОшибки", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, НавигационнаяСсылка,, ДождатьсяЗавершения);
		
	Иначе
		ОписаниеОшибки = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en='The extension for working with files is not installed, the link ""%1"" is not possible.';ru='Расширение для работы с файлами не установлено, переход по ссылке ""%1"" невозможен.'"),
			НавигационнаяСсылка);
		ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку.
Процедура ОткрытьНавигационнуюСсылкуПослеЗапускаПриложения(КодВозврата, Контекст) Экспорт 
	
	Оповещение = Контекст.Оповещение;
	
	Если Оповещение <> Неопределено Тогда 
		ПриложениеЗапущено = (КодВозврата = 0 Или КодВозврата = Неопределено);
		ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку.
Процедура ОткрытьНавигационнуюСсылкуПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	ОткрытьНавигационнуюСсылкуОповеститьОбОшибке("", Контекст);
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку.
Процедура ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст) Экспорт
	
	Оповещение = Контекст.Оповещение;
	
	Если Оповещение = Неопределено Тогда
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда 
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе 
		ПриложениеЗапущено = Ложь;
		ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли переданная строка веб ссылкой.
// 
// Параметры:
//  Строка - Строка - переданная ссылка.
//
Функция ЭтоВебСсылка(Строка) Экспорт
	
	Возврат СтрНачинаетсяС(Строка, "http://")  // обычное соединение.
		Или СтрНачинаетсяС(Строка, "https://");// защищенное соединение.
	
КонецФункции

// Проверяет, является ли переданная строка ссылкой на встроенную справку.
// 
// Параметры:
//  Строка - Строка - переданная ссылка.
//
Функция ЭтоСсылкаНаСправку(Строка) Экспорт
	
	Возврат СтрНачинаетсяС(Строка, "v8help://");
	
КонецФункции

// Проверяет, является ли переданная строка допустимой ссылкой по белому списку протоколов.
// 
// Параметры:
//  Строка - Строка - переданная ссылка.
//
Функция ЭтоДопустимаяСсылка(Строка) Экспорт
	
	Возврат СтрНачинаетсяС(Строка, "e1cib/")
		Или СтрНачинаетсяС(Строка, "http:")
		Или СтрНачинаетсяС(Строка, "https:")
		Или СтрНачинаетсяС(Строка, "e1c:")
		Или СтрНачинаетсяС(Строка, "v8help:")
		Или СтрНачинаетсяС(Строка, "mailto:")
		Или СтрНачинаетсяС(Строка, "tel:")
		Или СтрНачинаетсяС(Строка, "skype:");
	
КонецФункции

#КонецОбласти

#Область ЗапуститьПрограмму

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ЗапуститьПрограмму.
Процедура ЗапуститьПрограммуПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	
	Если РасширениеПодключено Тогда
		
		СтрокаКоманды  = Контекст.СтрокаКоманды;
		ТекущийКаталог = Контекст.ТекущийКаталог;
		Оповещение     = Контекст.Оповещение;
		
		ДождатьсяЗавершения = (Оповещение <> Неопределено);
		
		Оповещение = Новый ОписаниеОповещения("ЗапуститьПрограммуПослеЗапускаПриложения", ЭтотОбъект, Контекст,
			"ЗапуститьПрограммуПриОбработкеОшибки", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения);
		
	Иначе
		ОписаниеОшибки = 
			НСтр("en='The extension for working with files is not installed, the program can not be started.';ru='Расширение для работы с файлами не установлено, запуск программы невозможен.'");
		ЗапуститьПрограммуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ЗапуститьПрограмму.
Процедура ЗапуститьПрограммуПослеЗапускаПриложения(КодВозврата, Контекст) Экспорт 
	
	Оповещение = Контекст.Оповещение;
	
	ДождатьсяЗавершения = (Оповещение <> Неопределено);
	
	Если ДождатьсяЗавершения Тогда 
		
		Если КодВозврата = Неопределено Тогда 
			ОписаниеОшибки = 
				НСтр("en='An unknown error occurred while starting the program.';ru='Произошла неизвестная ошибка при запуске программы.'");
			ЗапуститьПрограммуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
		Иначе 
			Результат = РезультатЗапускаПрограммы();
			Результат.ПриложениеЗапущено = Истина;
			Результат.КодВозврата = КодВозврата;
			
			ВыполнитьОбработкуОповещения(Оповещение, Результат);
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ЗапуститьПрограмму.
Процедура ЗапуститьПрограммуПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ЗапуститьПрограммуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ЗапуститьПрограмму.
Процедура ЗапуститьПрограммуОповеститьОбОшибке(ОписаниеОшибки, Контекст) Экспорт
	
	Оповещение = Контекст.Оповещение;
	
	Если Оповещение = Неопределено Тогда
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда 
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе 
		Результат = РезультатЗапускаПрограммы();
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.ЗапуститьПрограмму.
Функция РезультатЗапускаПрограммы()
	
	Результат = Новый Структура;
	Результат.Вставить("ПриложениеЗапущено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("КодВозврата", -13);
	
	Возврат Результат;
	
КонецФункции

// Проверяет содержит ли строка команды опасные действия
Функция СодержитНебезопасныеДействия(СтрокаКоманды) Экспорт
	
	Возврат СтрНайти(СтрокаКоманды, "$") <> 0
		Или СтрНайти(СтрокаКоманды, "`") <> 0
		Или СтрНайти(СтрокаКоманды, "|") <> 0
		Или СтрНайти(СтрокаКоманды, ";") <> 0
		Или СтрНайти(СтрокаКоманды, "&") <> 0;
	
КонецФункции

#КонецОбласти

#Область СоздатьВременныйКаталог

// Продолжение процедуры сфпОбщегоНазначенияКлиент.СоздатьВременныйКаталог.
Процедура СоздатьВременныйКаталогПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	
	Если РасширениеПодключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("СоздатьВременныйКаталогПослеПолученияВременногоКаталога",
			ЭтотОбъект, Контекст);
		
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
		
	Иначе
		ОписаниеОшибки = 
			НСтр("en='The extension for working with files is not installed, creating a temporary directory is impossible.';ru='Расширение для работы с файлами не установлено, создание временного каталога невозможно.'");
		СоздатьВременныйКаталогОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.СоздатьВременныйКаталог.
Процедура СоздатьВременныйКаталогПослеПолученияВременногоКаталога(ИмяКаталогаВременныхФайлов, Контекст) Экспорт 
	
	Оповещение = Контекст.Оповещение;
	Расширение = Контекст.Расширение;
	
	ИмяКаталога = "v8_" + Строка(Новый УникальныйИдентификатор);
	
	Если Не ПустаяСтрока(Расширение) Тогда 
		ИмяКаталога = ИмяКаталога + "." + Расширение;
	КонецЕсли;
	
	НачатьСозданиеКаталога(Оповещение, ИмяКаталогаВременныхФайлов + ИмяКаталога);
	
КонецПроцедуры

// Продолжение процедуры сфпОбщегоНазначенияКлиент.СоздатьВременныйКаталог.
Процедура СоздатьВременныйКаталогОповеститьОбОшибке(ОписаниеОшибки, Контекст)
	
	ПоказатьПредупреждение(, ОписаниеОшибки);
	ИмяКаталога = "";
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ИмяКаталога);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитФормы = ДополнительныеПараметры.ФормаВладелец;
	
	ПутьКРеквизитуФормы = СтрРазделить(ДополнительныеПараметры.ИмяРеквизита, ".");
	// Если реквизит вида "Объект.Комментарий" и т.п.
	Если ПутьКРеквизитуФормы.Количество() > 1 Тогда
		Для Индекс = 0 По ПутьКРеквизитуФормы.Количество() - 2 Цикл 
			РеквизитФормы = РеквизитФормы[ПутьКРеквизитуФормы[Индекс]];
		КонецЦикла;
	КонецЕсли;	
	
	РеквизитФормы[ПутьКРеквизитуФормы[ПутьКРеквизитуФормы.Количество() - 1]] = ВведенныйТекст;
	ДополнительныеПараметры.ФормаВладелец.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПодтвердитьЗакрытиеФормы() Экспорт
	
	// ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	// Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
	//	ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	// КонецЕсли;
	//
	// Параметры = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"];
	// Если Параметры = Неопределено Тогда
	//	Возврат;
	// КонецЕсли;
	// ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Неопределено;
	//
	// Оповещение = Новый ОписаниеОповещения("ПодтвердитьЗакрытиеФормыЗавершение", ЭтотОбъект, Параметры);
	// Если ПустаяСтрока(Параметры.ТекстПредупреждения) Тогда
	//	ТекстВопроса = НСтр("en='Data has been changed. Save changes?';ru='Данные были изменены. Сохранить изменения?'");
	// Иначе
	//	ТекстВопроса = Параметры.ТекстПредупреждения;
	// КонецЕсли;
	//
	// ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,
	//	КодВозвратаДиалога.Нет);
	
КонецПроцедуры

Процедура ПодтвердитьЗакрытиеФормыЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеСохранитьИЗакрыть);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Форма = Параметры.ОповещениеСохранитьИЗакрыть.Модуль;
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
	Иначе
		Форма = Параметры.ОповещениеСохранитьИЗакрыть.Модуль;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодтвердитьЗакрытиеПроизвольнойФормы() Экспорт
	
	// ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	// Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
	//	ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	// КонецЕсли;
	//
	// Параметры = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"];
	// Если Параметры = Неопределено Тогда
	//	Возврат;
	// КонецЕсли;
	// ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Неопределено;
	// РежимВопроса = РежимДиалогаВопрос.ДаНет;
	//
	// Оповещение = Новый ОписаниеОповещения("ПодтвердитьЗакрытиеПроизвольнойФормыЗавершение", ЭтотОбъект, Параметры);
	//
	// ПоказатьВопрос(Оповещение, Параметры.ТекстПредупреждения, РежимВопроса);
	
КонецПроцедуры

Процедура ПодтвердитьЗакрытиеПроизвольнойФормыЗавершение(Ответ, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	Если Ответ = КодВозвратаДиалога.Да
		Или Ответ = КодВозвратаДиалога.ОК Тогда
		Форма[Параметры.ИмяРеквизитаЗакрытьФормуБезПодтверждения] = Истина;
		Если Параметры.ОписаниеОповещенияЗакрыть <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещенияЗакрыть);
		КонецЕсли;
		Форма.Закрыть();
	Иначе
		Форма[Параметры.ИмяРеквизитаЗакрытьФормуБезПодтверждения] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяОбъектаМетаданных(Тип) Экспорт
	
	// ИмяПараметра = "СтандартныеПодсистемы.ИменаОбъектовМетаданных";
	// Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
	//	ПараметрыПриложения.Вставить(ИмяПараметра, Новый Соответствие);
	// КонецЕсли;
	// ИменаОбъектовМетаданных = ПараметрыПриложения[ИмяПараметра];
	//
	// Результат = ИменаОбъектовМетаданных[Тип];
	// Если Результат = Неопределено Тогда
	//	Результат = СтандартныеПодсистемыВызовСервера.ИмяОбъектаМетаданных(Тип);
	//	ИменаОбъектовМетаданных.Вставить(Тип, Результат);
	// КонецЕсли;
	//
	// Возврат Результат;
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

