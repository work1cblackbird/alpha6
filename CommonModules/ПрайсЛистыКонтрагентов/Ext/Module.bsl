
#Область ПрограммныйИнтерфейс

// Проверка структуры страниц прайс-листа
//
// Параметры:
//  Объект - СправочникСсылка.ПрайсЛистыКонтрагентов - Прайс-лист контрагента.
//
Процедура ПроверитьСтруктуруСтраницПрайсЛиста(Объект) Экспорт
	ОписаниеИзменений = Новый Массив; ЕстьИзменения = Ложь; ТекстСообщения = "";
	
	ИмяТаблицы = Объект.ИмяТаблицы;
	
	// Сначала установим имя таблицы, если у нас текстовый файл!
	// Найдем первую строку с ИмяЛиста = "Текст" или с пустым ИмяЛиста.
	
	Если Объект.ФайлИсточникДанных Тогда
		РасширениеФайла = ПрайсЛистыКонтрагентовКлиентСервер.ВычленитьРасширение(Объект.СтрокаПодключения);
		
		Если ПрайсЛистыКонтрагентовКлиентСервер.ЭтоТекстовыйДокумент(РасширениеФайла) Тогда
			Если ИмяТаблицы <> "Текст" Тогда
				ИмяТаблицы = "Текст";
				ОписаниеИзменений.Добавить("Установлено Имя таблицы = ""Текст""");
				ЕстьИзменения = Истина;
			КонецЕсли;
			
			Если Объект.СтруктураСтраницПрайсЛиста.Количество() > 1 Тогда
				Пока Объект.СтруктураСтраницПрайсЛиста.Количество() > 1 Цикл
					Объект.СтруктураСтраницПрайсЛиста.Удалить(1);
				КонецЦикла;
				
				ОписаниеИзменений.Добавить("В структуре страниц удалены лишние строки");
				ЕстьИзменения = Истина;
			КонецЕсли;
			Если Объект.СтруктураСтраницПрайсЛиста.Количество() = 1 И Объект.СтруктураСтраницПрайсЛиста[0].ИмяЛиста <> ИмяТаблицы Тогда
				Объект.СтруктураСтраницПрайсЛиста[0].ИмяЛиста = ИмяТаблицы;
				
				ОписаниеИзменений.Добавить("Установлен реквизит в строке Имя листа = ""Текст""");
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	СтрокаЛиста = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ИмяТаблицы));
	Если Не ПустаяСтрока(ИмяТаблицы) И СтрокаЛиста.Количество() = 0 Тогда
		ЕстьИзменения = Истина;
		СтрокаИмяТаблицы = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста",""));
		
		СтрокаИмяТаблицы = ?(СтрокаИмяТаблицы.Количество() = 0, Неопределено, СтрокаИмяТаблицы[0]);
		Если СтрокаИмяТаблицы <> Неопределено Тогда
			СтрокаИмяТаблицы.ИмяЛиста = ИмяТаблицы;
			
			ОписаниеИзменений.Добавить("Установлен реквизит в строке Имя листа = """ + Объект.ИмяТаблицы + """");
			СтрокаИмяТаблицы.Использовать = Истина;
		Иначе
			НоваяСтрока = Объект.СтруктураСтраницПрайсЛиста.Добавить();
			НоваяСтрока.ИмяЛиста                = ИмяТаблицы;
			НоваяСтрока.Использовать            = Истина;
			НоваяСтрока.СтрокаЗаголовковКолонок = ?(Объект.ФайлИсточникДанных, 1, 0);
			НоваяСтрока.СтрокаНачало            = НоваяСтрока.СтрокаЗаголовковКолонок + 1;
			НоваяСтрока.СтрокаКонец             = 0;
			
			ОписаниеИзменений.Добавить("В структуру страниц добавлена новая строка");
		КонецЕсли;
	КонецЕсли;
	
	ПустыеСтроки = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ""));
	Если ПустыеСтроки.Количество() > 0 Тогда
		Для Каждого ПустаяСтрока Из ПустыеСтроки Цикл
			Объект.СтруктураСтраницПрайсЛиста.Удалить(ПустаяСтрока);
		КонецЦикла;
		
		ОписаниеИзменений.Добавить("Из структуры страниц удалены строки с пустым Именем листа");
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если Объект.СтруктураСтраницПрайсЛиста.Количество() > 0 Тогда
		Попытка
			СтрокаСЗаголовками = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", Объект.ИмяТаблицы))[0];
			СтрокаИспользовать = Объект.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("Использовать", Истина))[0];
		Исключение
			СтрокаСЗаголовками = Неопределено;
			СтрокаИспользовать = Неопределено;
		КонецПопытки;
		
		Для Каждого СтрокаСтруктуры Из Объект.СтруктураСтраницПрайсЛиста Цикл
			Если СтрокаСтруктуры.Использовать И СтрокаСтруктуры.СтрокаЗаголовковКолонок > 0 И СтрокаСЗаголовками = Неопределено Тогда
				СтрокаСЗаголовками = СтрокаСтруктуры;
			КонецЕсли;
			
			Если СтрокаСЗаголовками <> Неопределено И СтрокаСтруктуры <> СтрокаСЗаголовками И СтрокаСтруктуры.СтрокаЗаголовковКолонок > 0 Тогда
				СтрокаСтруктуры.СтрокаЗаголовковКолонок = 0;
				ОписаниеИзменений.Добавить("В строке Имя листа """ + СтрокаСтруктуры.ИмяЛиста + """ очищен номер строки с заголовками");
				ЕстьИзменения = Истина;
			КонецЕсли;
			
			Если СтрокаСтруктуры.СтрокаНачало > 0 И СтрокаСтруктуры.СтрокаНачало < СтрокаСтруктуры.СтрокаЗаголовковКолонок Тогда
				СтрокаСтруктуры.СтрокаНачало = СтрокаСтруктуры.СтрокаЗаголовковКолонок + 1;
				
				ОписаниеИзменений.Добавить("В строке Имя листа """ + СтрокаСтруктуры.ИмяЛиста + """ исправлен номер строки начала данных");
				ЕстьИзменения = Истина;
			КонецЕсли;
			
			Если СтрокаСтруктуры.СтрокаКонец > 0 И СтрокаСтруктуры.СтрокаКонец < СтрокаСтруктуры.СтрокаНачало Тогда
				СтрокаСтруктуры.СтрокаКонец = СтрокаСтруктуры.СтрокаНачало;
				
				ОписаниеИзменений.Добавить("В строке Имя листа """ + СтрокаСтруктуры.ИмяЛиста + """ исправлен номер строки конца данных");
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСЗаголовками = Неопределено Тогда
			Если СтрокаИспользовать <> Неопределено Тогда
				СтрокаСЗаголовками = СтрокаИспользовать;
			Иначе
				СтрокаСЗаголовками = Объект.СтруктураСтраницПрайсЛиста[0];
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтрокаСЗаголовками.Использовать Тогда
			СтрокаСЗаголовками.Использовать = Истина;
			
			ОписаниеИзменений.Добавить("В строке Имя листа """ + СтрокаСЗаголовками.ИмяЛиста + """ установлен признак использования при загрузке");
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если Объект.ИмяТаблицы <> СтрокаСЗаголовками.ИмяЛиста Тогда
			Объект.ИмяТаблицы = СтрокаСЗаголовками.ИмяЛиста;
			
			ОписаниеИзменений.Добавить("Установлено Имя таблицы = """+СтрокаСЗаголовками.ИмяЛиста+"""");
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаСЗаголовками = Неопределено И Объект.ЗаголовкиКолонокВПрайсЛисте.Количество() > 0 Тогда
		Объект.ЗаголовкиКолонокВПрайсЛисте.Очистить();
		
		ОписаниеИзменений.Добавить("Не найдена страница с заголовкам. Очищена таблица ""Заголовки колонок""");
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Объект.ИмяТаблицы = ИмяТаблицы;
	
	Если ЕстьИзменения Тогда
		ТекстСообщения = "Проверьте! Обновлена структура страниц файла прайс-листа:";
		Для Каждого Изменение Из ОписаниеИзменений Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + "-" + Изменение;
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Получение метеданных регистра "Прайс-листы контрагентов"
// 
// Возвращаемое значение:
//  Структура - Структура метаданных.
//
Функция МетеданныеРегистраПрайсЛистыКонтрагентов() Экспорт
	
	МетаданныеРегистра = Новый Структура;
	МетаданныеРегистра.Вставить("Ресурсы"   , Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентов.Ресурсы);
	МетаданныеРегистра.Вставить("Измерения" , Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентов.Измерения);
	МетаданныеРегистра.Вставить("Реквизиты" , Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентов.Реквизиты);
	
	Возврат МетаданныеРегистра;
	
КонецФункции

// Проверка возможности загрузки
//
// Параметры:
//  ПутьКФайлу        - Строка    - Путь к каталогу с файлом.
//  ПараметрыДействия - Структура - Дополниельные параметры.
// 
// Возвращаемое значение:
//  Булево - Признак возможности загрузки.
//
Функция ЗагрузкаВозможна(ПутьКФайлу, ПараметрыДействия) Экспорт
	
	Если ПараметрыДействия.ПрайсЛист.ЭтоГруппа Тогда
		ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru = 'Для группы загрузка не доступна.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыДействия.ПрайсЛист.ВидПрайсЛиста = Перечисления.ВидыПрайсЛистов.ВебПрайсЛист ИЛИ
		НЕ(ПараметрыДействия.ПрайсЛист.ФайлИсточникДанных ИЛИ ПараметрыДействия.ПрайсЛист.ХранитьДанныеЛокально) Тогда
		
		ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru = 'Для данного прайс-листа не требуется загрузка.'");
		Возврат Ложь;
	КонецЕсли;
	
	ФайлПроверки = Новый Файл(ПутьКФайлу);
	Если НЕ(ФайлПроверки.Существует() И ФайлПроверки.ЭтоФайл()) Тогда
		ПараметрыДействия.ЖурналЗагрузки.Примечание = СтрШаблон(НСтр("ru = 'Файл прайс-листа <%1> не найден.'"), ПутьКФайлу);
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ДатаПрайса", ФайлПроверки.ПолучитьВремяИзменения());
	
	Если ПустаяСтрока(ПараметрыДействия.ПрайсЛист.ИмяТаблицы) Тогда
		ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru = 'Не указана таблица/главная страница данных.'");;
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьЗаполненныеПоля = Ложь; ЕстьКлючевыеПоля = Ложь;
	
	Для Каждого ПолеЗагрузки Из ПараметрыДействия.ПрайсЛист.СтруктураФайлаПрайсЛиста Цикл
		Если ЗначениеЗаполнено(ПолеЗагрузки.ИмяПоляФайла) Тогда
			ЕстьЗаполненныеПоля = Истина;
			Если ПолеЗагрузки.Ключевое Тогда
				ЕстьКлючевыеПоля = Истина;
			КонецЕсли;
		Иначе
			Если ПолеЗагрузки.Ключевое Тогда
				// Обязательно к заполнению
				ПараметрыДействия.ЖурналЗагрузки.Примечание =
					СтрШаблон(НСтр("ru = 'Не указано поле файла для реквизита <%1>.'"), ПолеЗагрузки.ИмяРеквизитаПрайсЛиста);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьЗаполненныеПоля Тогда
		// если поля не заполнены продолжать не имеет смысла
		ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru = 'Ни одно поле таблицы не заполнено.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЕстьКлючевыеПоля Тогда
		ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru = 'Не задано ни одного ''Ключевого'' поля.'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Получение тегов и произвидителей прайс-листа
//
// Параметры:
//  ПрайсЛист               - СправочникСсылка.ПрайсЛистыКонтрагентов - Прайс-лист контрагента.
//  ЗаполнитьТегами          - Булево                                 - Признак заполнения тегами.
//  ЗаполнитьПроизводителями - Булево                                 - Признак заполнения производителями.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список тегов и производителей.
//
Функция ТегиИПроизвидителиПрайсЛиста(ПрайсЛист, ЗаполнитьТегами = Истина, ЗаполнитьПроизводителями = Истина) Экспорт
	
	СтруктураФайла = ПрайсЛист.СтруктураФайлаПрайсЛиста;
	
	Если ЗаполнитьТегами Тогда
		СтрокаТега = СтруктураФайла.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "ТегПозиции"));
		
		Если СтрокаТега.Количество() = 0 ИЛИ ПустаяСтрока(СтрокаТега[0].ИмяПоляФайла) Тогда
			ЗаполнитьТегами = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьПроизводителяПоУмолчанию = Ложь;
	Если ЗаполнитьПроизводителями Тогда
		СтрокаПроизводителя = СтруктураФайла.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "Производитель"));
		
		Если СтрокаПроизводителя.Количество() = 0 ИЛИ ПустаяСтрока(СтрокаПроизводителя[0].ИмяПоляФайла) Тогда
			ЗаполнитьПроизводителями = Ложь;
		КонецЕсли;
		
		ИспользоватьПроизводителяПоУмолчанию = НЕ ПрайсЛист.Производитель.Пустая();
	КонецЕсли;
	
	Если ЗаполнитьТегами ИЛИ ЗаполнитьПроизводителями Тогда
		Если ПрайсЛист.ФайлИсточникДанных ИЛИ ПрайсЛист.ХранитьДанныеЛокально Тогда
			ТегиПроизводители = ТегиИПроизвидителиПрайсЛистаИзБазы(ПрайсЛист, ЗаполнитьТегами, ЗаполнитьПроизводителями);
		Иначе
			ТегиПроизводители = ТегиИПроизвидителиПрайсЛистаИзИсточникаДанных(ПрайсЛист, ЗаполнитьТегами, ЗаполнитьПроизводителями);
		КонецЕсли;
	ИначеЕсли ИспользоватьПроизводителяПоУмолчанию Тогда
		ТегиПроизводители = Новый ТаблицаЗначений;
		ТегиПроизводители.Колонки.Добавить("ПрайсЛист", Новый ОписаниеТипов("СправочникСсылка.ПрайсЛистыКонтрагентов"));
		
		НоваяСтрока = ТегиПроизводители.Добавить();
		НоваяСтрока.ПрайсЛист = ПрайсЛист;
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если НЕ ЗаполнитьТегами Тогда
		ТегиПроизводители.Колонки.Добавить("ТегПозиции", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
	КонецЕсли;
	
	Если НЕ ЗаполнитьПроизводителями Тогда
		ТегиПроизводители.Колонки.Добавить("Производитель", Новый ОписаниеТипов("СправочникСсылка.Производители"));
	КонецЕсли;
	
	Если ИспользоватьПроизводителяПоУмолчанию Тогда
		ТегиПроизводители.ЗаполнитьЗначения(ПрайсЛист.Производитель, "Производитель");
	КонецЕсли;
	
	Возврат ТегиПроизводители;
	
КонецФункции

// Проверяет состояние фонового задания по переданному идентификатору.
// При аварийном завершении задания вызывает исключение.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
// Возвращаемое значение:
//  Булево - состояние выполнения задания.
// 
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено
		И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияНеВыполнена = Истина;
	ПоказатьПолныйТекстОшибки = Ложь;
	Если Задание = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание не найдено'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , Строка(ИдентификаторЗадания));
	Иначе
		Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ОшибкаЗадания = Задание.ИнформацияОбОшибке;
			Если ОшибкаЗадания <> Неопределено Тогда
				ПоказатьПолныйТекстОшибки = Истина;
			КонецЕсли;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Длительные операции.Фоновое задание отменено администратором'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				НСтр("ru = 'Задание завершилось с неизвестной ошибкой.'"));
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказатьПолныйТекстОшибки Тогда
		ТекстОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		ВызватьИсключение(ТекстОшибки);
	ИначеЕсли ОперацияНеВыполнена Тогда
		ВызватьИсключение(НСтр("ru = 'Не удалось выполнить данную операцию. 
		                             |Подробности см. в Журнале регистрации.'"));
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФайлами

Функция РаспаковатьФайл(Знач Путь, Расширение) Экспорт
	НовыйПуть = ПолучитьИмяВременногоФайла(Расширение);
	Попытка
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Путь);
		ДвоичныеДанные.Записать(НовыйПуть);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат НовыйПуть;
КонецФункции

Функция ФайлСуществует(Путь)
	Файл = Новый Файл(Путь);
	Возврат Файл.Существует();
КонецФункции

#КонецОбласти

#Область РаботаСАртикуламиИПроизводителями

// Производители артикула - Составляет перечень производителей для которых исползуется данный артикул.
//
// Параметры:
//  Артикул       - Строка         - Артикул для заполнения
//  Производители - СписокЗначений - Список производителей для артикула.
//
Функция ПроизводителиАртикула(Артикул) Экспорт
	
	СписокАртикулов = Новый СписокЗначений;
	СписокАртикулов.Добавить(Артикул);
	
	АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул);
	Если АртикулДляПоиска <> Артикул Тогда
		СписокАртикулов.Добавить(АртикулДляПоиска);
	КонецЕсли;
	
	Производители = Новый СписокЗначений;
	
	#Область ФормированиеЗапроса
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Производитель
	|ПОМЕСТИТЬ ТабПроизводителей
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.АртикулДляПоиска В(&СписокАртикулов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыАналогов.Производитель
	|ИЗ
	|	РегистрСведений.ГруппыАналогов КАК ГруппыАналогов
	|ГДЕ
	|	ГруппыАналогов.АртикулДляПоиска В(&СписокАртикулов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрайсЛистыКонтрагентов.Производитель
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.АртикулДляПоиска В(&СписокАртикулов)
	|	И (ПрайсЛистыКонтрагентов.ПроизводительВПрайсЛисте = """"
	|			ИЛИ ПрайсЛистыКонтрагентов.Производитель <> ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрайсЛистыКонтрагентов.Производитель
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК ПрайсЛистыКонтрагентов
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.АртикулДляПоиска В(&СписокАртикулов)
	|	И (ПрайсЛистыКонтрагентов.ПроизводительВПрайсЛисте = """"
	|			ИЛИ ПрайсЛистыКонтрагентов.Производитель <> ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПроизводителей.Производитель
	|ИЗ
	|	ТабПроизводителей КАК ТабПроизводителей
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабПроизводителей.Производитель.Наименование";
	
	Запрос.УстановитьПараметр("СписокАртикулов", СписокАртикулов);
	
	#КонецОбласти
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Производитель");
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаПрайсЛистов

Функция ПрочитатьОбразецИзФайла(Путь, ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(Путь) Тогда
		Возврат СформироватьОшибку(НСтр("ru = 'Неверный путь'"));
	КонецЕсли;
	
	Если НЕ ФайлСуществует(Путь) Тогда
		Возврат СформироватьОшибку(НСтр("ru = 'Файл не найден'"));
	КонецЕсли;
	
	Если ПрайсЛистыКонтрагентовКлиентСервер.ЭтоТабличныйДокумент(ДополнительныеПараметры.Расширение) Тогда
		
		Возврат ПрайсЛистыКонтрагентовСлужебный.ПрочитатьОбразецДанныхИзТабличногоДокумента(Путь, ДополнительныеПараметры);
		
	ИначеЕсли ПрайсЛистыКонтрагентовКлиентСервер.ЭтоТекстовыйДокумент(ДополнительныеПараметры.Расширение) Тогда
		
		Если ПрайсЛистыКонтрагентовСлужебный.ПрочитатьДанныеTXT(Путь, Истина, ДополнительныеПараметры) Тогда
			СоответствиеОбразец = Новый Соответствие;
			СоответствиеОбразец.Вставить("Текст", ДополнительныеПараметры.МассивДанныхОбразец);
			Возврат СоответствиеОбразец;
		КонецЕсли;
		
	Иначе
		Возврат СформироватьОшибку(НСтр("ru = 'Неверный тип файла.'"));
	КонецЕсли;
	
	Возврат Новый Соответствие;
	
КонецФункции //ПрочитатьОбразецИзФайла()

Функция ПрочитатьОбразецИзADO(СтрокаПодключения, ПараметрыДействия, ЖурналЗагрузки) Экспорт
	СоответствиеОбразец = Новый Соответствие;
	
	Если ПрайсЛистыКонтрагентовСлужебный.ПрочитатьДанныеADO(СтрокаПодключения, Истина, ПараметрыДействия, ЖурналЗагрузки, СоответствиеОбразец) Тогда
		Возврат СоответствиеОбразец;
	КонецЕсли;
	
	Возврат СформироватьОшибку(ЖурналЗагрузки.Примечание);
	
КонецФункции

Функция ЗагрузитьПрайсЛистИзТабличногоДокумента(ПутьКФалу, ПараметрыДействия) Экспорт
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Старт загрузки прайс-листа.'"));
	
	// проверим коректность данных прайс-листа
	Если НЕ(СоставКолонокКорректен(ПараметрыДействия.ПрайсЛист, ПараметрыДействия) И СтруктурыПрайсаКорректна(ПараметрыДействия.ПрайсЛист, ПараметрыДействия)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// подготовим производителей
	СопоставленныеПроизводители = РегистрыСведений.
		ПрайсЛистыКонтрагентовПравилаЗагрузки.ПолучитьТаблицуСопоставленныхПроизводителей(ПараметрыДействия.ПрайсЛист);
		
	ПараметрыДействия.Вставить("СопоставленныеПроизводители", СопоставленныеПроизводители);
	
	// подготовим регистры сведений
	РегистрПрайсЛистов = РегистрыСведений.ПрайсЛистыКонтрагентовВременный.СоздатьНаборЗаписей();
	РегистрПрайсЛистов.Отбор.ПрайсЛист.Установить(ПараметрыДействия.ПрайсЛист);
	
	ТаблицаПрайсЛиста = РегистрПрайсЛистов.Выгрузить();
	ТаблицаПрайсЛиста.Индексы.Добавить("КлючСтрокиПоставщика");
	ТаблицаПрайсЛиста.Индексы.Добавить("ПроизводительВПрайсЛисте");
	ТаблицаПрайсЛиста.Индексы.Добавить("Производитель");
	
	ПараметрыДействия.Вставить("РегистрПрайсЛистов", РегистрПрайсЛистов);
	ПараметрыДействия.Вставить("ТаблицаПрайсЛиста" , ТаблицаПрайсЛиста);
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Удаление старых данных...'"));
	
	// Нужна очистка временного регистра.
	Попытка
		РегистрыСведений.ПрайсЛистыКонтрагентовВременный.ОчиститьДанныеПрайсЛиста(ПараметрыДействия.ПрайсЛист);
	Исключение
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка очистки старых данных: %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
		ПараметрыДействия.ЖурналЗагрузки.Примечание = ТекстСообщения;
	КонецПопытки;
	
	// очистим ненужые переменные
	РегистрПрайсЛистов = Неопределено; ТаблицаПрайсЛиста = Неопределено;
	
	РезультатЗагрузки = Ложь;
	
	НРегРасширение = СтрЗаменить(НРег(ПараметрыДействия.Расширение), ".", "");
	Если НРегРасширение = "xls" ИЛИ НРегРасширение = "xlsx" ИЛИ НРегРасширение = "xlsm"
		ИЛИ НРегРасширение = "ods" ИЛИ НРегРасширение = "ots" Тогда
		РезультатЗагрузки = ПрайсЛистыКонтрагентовСлужебный.ПрочитатьДанныеИзТабличногоДокумента(
			ПутьКФалу,
			ПараметрыДействия
		);
	КонецЕсли;
	
	Если РезультатЗагрузки Тогда
		РезультатРазбора = ПрайсЛистыКонтрагентовСлужебный.СохранитьСоответствиеДанныхВРегистр(
			ПараметрыДействия.СоответствиеДанных,
			ПараметрыДействия);
	КонецЕсли;
	
	// почистим память
	ПараметрыДействия.ТаблицаПрайсЛиста = Неопределено;
	ПараметрыДействия.Удалить("ТаблицаПрайсЛиста");
	
	Если РезультатЗагрузки Тогда
		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Перенос данных в основной регистр...'"));
		Если НЕ РегистрыСведений.ПрайсЛистыКонтрагентов.ОбновитьЗаписиВОсновномРегистре(ПараметрыДействия.ПрайсЛист, 2000) Тогда
			ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru = 'Ошибка переноса данных в основной регистр.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

Функция ЗагрузитьПрайсЛистИзТекстовогоФайла(ПутьКФайлу, ПараметрыДействия) Экспорт
	ФайлОбъект = Новый ЧтениеТекста(ПутьКФайлу);
	
	Если
		НЕ СоставКолонокКорректен(ПараметрыДействия.ПрайсЛист, ПараметрыДействия)
		ИЛИ НЕ СтруктурыПрайсаКорректна(ПараметрыДействия.ПрайсЛист, ПараметрыДействия)
	Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СопоставленныеПроизводители = РегистрыСведений
		.ПрайсЛистыКонтрагентовПравилаЗагрузки
		.ПолучитьТаблицуСопоставленныхПроизводителей(ПараметрыДействия.ПрайсЛист);
	ПараметрыДействия.Вставить("СопоставленныеПроизводители", СопоставленныеПроизводители);
	
	// подготовим регистры сведений
	РегистрПрайсЛистов = РегистрыСведений.ПрайсЛистыКонтрагентовВременный.СоздатьНаборЗаписей();
	РегистрПрайсЛистов.Отбор.ПрайсЛист.Установить(ПараметрыДействия.ПрайсЛист);
	
	РегистрПрайсЛистовОсновной = РегистрыСведений.ПрайсЛистыКонтрагентов.СоздатьНаборЗаписей();
	РегистрПрайсЛистовОсновной.Отбор.ПрайсЛист.Установить(ПараметрыДействия.ПрайсЛист);
	
	ТаблицаПрайсЛиста = РегистрПрайсЛистов.Выгрузить();
	ТаблицаПрайсЛиста.Индексы.Добавить("КлючСтрокиПоставщика");
	ТаблицаПрайсЛиста.Индексы.Добавить("ПроизводительВПрайсЛисте");
	ТаблицаПрайсЛиста.Индексы.Добавить("Производитель");
	
	ПараметрыДействия.Вставить("РегистрПрайсЛистов", РегистрПрайсЛистов);
	ПараметрыДействия.Вставить("ТаблицаПрайсЛиста" , ТаблицаПрайсЛиста);
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Удаление старых данных...'"));
	
	Попытка
		
		РегистрыСведений.ПрайсЛистыКонтрагентовВременный.ОчиститьДанныеПрайсЛиста(ПараметрыДействия.ПрайсЛист);
		
	Исключение
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка очистки старых данных: %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыДействия.ЖурналЗагрузки.Примечание = ТекстСообщения;
		
	КонецПопытки;
	
	// очистим ненужые переменные
	РегистрПрайсЛистов = Неопределено;
	ТаблицаПрайсЛиста = Неопределено;
	ФайлОбъект.Закрыть();
	
	РезультатЗагрузки = ПрайсЛистыКонтрагентовСлужебный.ПрочитатьДанныеTXT(ПутьКФайлу, Ложь, ПараметрыДействия);
	ПараметрыДействия.ЖурналЗагрузки.ХешФайла = ПрайсЛистыКонтрагентовСлужебный.MD5HeshString(ПутьКФайлу, Истина);
	
	Если РезультатЗагрузки Тогда
		СоответствиеДанных = Новый Соответствие;
		СоответствиеДанных.Вставить("Текст", ПараметрыДействия.МассивДанныхОбразец);
		
		РезультатРазбора = ПрайсЛистыКонтрагентовСлужебный.СохранитьСоответствиеДанныхВРегистр(
			СоответствиеДанных,
			ПараметрыДействия);
	КонецЕсли;
	
	// почистим память
	ПараметрыДействия.ТаблицаПрайсЛиста = Неопределено;
	ПараметрыДействия.Удалить("ТаблицаПрайсЛиста");
	
	Если РезультатЗагрузки Тогда
		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Перенос данных в основной регистр...'"));
		Если НЕ РегистрыСведений.ПрайсЛистыКонтрагентов.ОбновитьЗаписиВОсновномРегистре(ПараметрыДействия.ПрайсЛист, 2000) Тогда
			ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru = 'Ошибка переноса данных в основной регистр.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

Функция ЗагрузитьПрайсЛистИзADO(СтрокаПодключения, ПараметрыДействия) Экспорт
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Старт загрузки прайс-листа.'"));
	
	// подготовим производителей
	СопоставленныеПроизводители = РегистрыСведений.
		ПрайсЛистыКонтрагентовПравилаЗагрузки.ПолучитьТаблицуСопоставленныхПроизводителей(ПараметрыДействия.ПрайсЛист);
		
	ПараметрыДействия.Вставить("СопоставленныеПроизводители", СопоставленныеПроизводители);
	
	// подготовим регистры сведений
	РегистрПрайсЛистов = РегистрыСведений.ПрайсЛистыКонтрагентовВременный.СоздатьНаборЗаписей();
	РегистрПрайсЛистов.Отбор.ПрайсЛист.Установить(ПараметрыДействия.ПрайсЛист);
	
	РегистрПрайсЛистовОсновной = РегистрыСведений.ПрайсЛистыКонтрагентов.СоздатьНаборЗаписей();
	РегистрПрайсЛистовОсновной.Отбор.ПрайсЛист.Установить(ПараметрыДействия.ПрайсЛист);
	
	ТаблицаПрайсЛиста = РегистрПрайсЛистов.Выгрузить();
	ТаблицаПрайсЛиста.Индексы.Добавить("КлючСтрокиПоставщика");
	ТаблицаПрайсЛиста.Индексы.Добавить("ПроизводительВПрайсЛисте");
	ТаблицаПрайсЛиста.Индексы.Добавить("Производитель");
	
	ПараметрыДействия.Вставить("РегистрПрайсЛистов", РегистрПрайсЛистов);
	ПараметрыДействия.Вставить("ТаблицаПрайсЛиста" , ТаблицаПрайсЛиста);
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Удаление старых данных...'"));
	
	// Нужна очистка временного регистра.
	Попытка
		РегистрыСведений.ПрайсЛистыКонтрагентовВременный.ОчиститьДанныеПрайсЛиста(ПараметрыДействия.ПрайсЛист);
	Исключение
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка очистки старых данных: %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
		ПараметрыДействия.ЖурналЗагрузки.Примечание = ТекстСообщения;
	КонецПопытки;
	
	// очистим ненужые переменные
	РегистрПрайсЛистов = Неопределено; ТаблицаПрайсЛиста = Неопределено;
	
	СоответствиеДанных = Новый Соответствие;
	РезультатЗагрузки = ПрайсЛистыКонтрагентовСлужебный.ПрочитатьДанныеADO(
		СтрокаПодключения,
		Ложь,
		ПараметрыДействия,
		ПараметрыДействия.ЖурналЗагрузки,
		СоответствиеДанных);
	
	Если РезультатЗагрузки Тогда
		РезультатРазбора = ПрайсЛистыКонтрагентовСлужебный.СохранитьСоответствиеДанныхВРегистр(
			СоответствиеДанных,
			ПараметрыДействия);
	КонецЕсли;
	
	// почистим память
	ПараметрыДействия.ТаблицаПрайсЛиста = Неопределено;
	ПараметрыДействия.Удалить("ТаблицаПрайсЛиста");
	
	Если РезультатЗагрузки Тогда
		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Перенос данных в основной регистр...'"));
		Если НЕ РегистрыСведений.ПрайсЛистыКонтрагентов.ОбновитьЗаписиВОсновномРегистре(ПараметрыДействия.ПрайсЛист, 2000) Тогда
			ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru = 'Ошибка переноса данных в основной регистр.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийПоляБазовыйКаталог

// Функция возвращает HTML текст содержания по переданным параметрам.
//
// Параметры:
//	Артикул			- СправочникСсылка.Номенклатура, Строка		- Номенклатура или артикул для которого формируется поле Базовый каталог.
//	Производитель	- СправочникСсылка.Производители	- Производитель, если не указана номенклатура.
//
// Возвращаемое значение:
//	Строка	- HTML текст содержания. 
//
Функция СформироватьПредставлениеИзБазовогоКаталога(Артикул, Производитель = Неопределено, КнопкаСоздать = Неопределено, КнопкаОбновить = Истина) Экспорт
	
	МассивСтрок = ПолучитьИнформациюИзБазовогоКаталога(Артикул, Производитель);
	
	Если МассивСтрок = Неопределено Тогда
		
		Возврат БазовыйКаталогПолучитьПустоеСодержание("НеУказанАртикул", "Не заполнен артикул или производитель");
		
	ИначеЕсли МассивСтрок = Ложь Тогда
		
		Возврат БазовыйКаталогПолучитьПустоеСодержание("ОшибкаПриПолученииДанных", "Ошибка при получении данных из каталога");
		
	ИначеЕсли МассивСтрок = Справочники.ПрайсЛистыКонтрагентов.ПустаяСсылка() Тогда
		
		Возврат БазовыйКаталогПолучитьПустоеСодержание("НеУказанБазовыйПрайсЛист", "Не указан базовый каталог производителя");
		
	ИначеЕсли МассивСтрок.Количество() = 0 Тогда
		
		Возврат БазовыйКаталогПолучитьПустоеСодержание("АртикулНеНайден", "Информация в базовом каталоге отсутствует");
		
	Иначе
		
		ШиринаЛевойКолонки            = 50;
		ШиринаЛевойКолонкиАбсолютная  = Ложь;
		ШиринаПравойКолонки           = 50;
		ШиринаПравойКолонкиАбсолютная = Ложь;
		
		СтильКнопки = ПолучитьСтильКнопки();
		
		// Пока одну строку будем визуализировать
		// Далее имеет смысл выводить аналогично выводу табличной части объектов?
		СтрокаПрайсЛиста = МассивСтрок[0];
		
		//Для Каждого СтрокаПрайсЛиста Из МассивСтрок Цикл
		
			ГиперссылкаНастройки = "<div class=""title""><span class=""leftSide""> 
			|<FONT style=""color:#000000; background-color:#ffffff; font-size:14px; "" face=""MS Sans Serif"">
			| <B>[" + Артикул + " " + Производитель + "]</B></FONT>
			| </span>
			|<span class=""rightSide"">
			|"+?(КнопкаСоздать = Истина, "<a name=""СоздатьНоменклатуру"" class=""press"" title=""Создать номенклатуру"" tabindex=""1"">
			|  <span class=""pressImg"" style=""background-position: 0px 0px; width:0px;""></span>
			|  <span class=""pressBox"">Создать номенклатуру</span>
			|</a>", "")+"
			|"+?(КнопкаОбновить И КнопкаСоздать = Ложь, "<a name=""ОбновитьРеквизиты"" class=""press"" title=""Обновить реквизиты номенклатуры"" tabindex=""1"">
			|  <span class=""pressImg"" style=""background-position: 0px 0px; width:0px;""></span>
			|  <span class=""pressBox"">Обновить реквизиты</span>
			|</a>", "")+"
			|</span> </div>";
			
			Описание = ГиперссылкаНастройки +
			"<table width=""100%"" border=""0"" cellspacing=""2"">
			|";
			НачальнаяДлинаОписания = СтрДлина(Описание);
			
			стрЛеваяКолонкаЗаголовок = "";
			стрЛеваяКолонка = "";
			стрПраваяКолонкаЗаголовок = "";
			стрПраваяКолонка = "";
			
			Размещение = "ЛеваяКолонка"; // Начем с левой колонки
			
			Для Каждого ЭлементСпискаЗначений Из СтрокаПрайсЛиста Цикл
				ШрифтЭлемента      = Новый Шрифт("MS Sans Serif", 12);
				ЦветТекстаЭлемента = Новый Цвет(0, 0, 0);
				ЦветФонаЭлемента   = Новый Цвет(255, 255, 255);
				ТегиЭлемента = ПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента, ЦветФонаЭлемента, ШрифтЭлемента);
				
				ЗначениеРеквизита = ЭлементСпискаЗначений.Значение;
				
				Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
					ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ПС, "</BR>");
					ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
				ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
					ЗначениеРеквизита = Строка(ЗначениеРеквизита);
				ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
					Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ЗначениеРеквизита = "<%ПредставлениеПустойДаты%>";
					КонецЕсли;
				КонецЕсли;
				
				Если ТегиЭлемента <> Неопределено Тогда
					ЗначениеРеквизита = ТегиЭлемента.ОткрывающийТег + ЗначениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
				КонецЕсли;
				
				мЗаголовок = "<%ЗаголовокОткрывающийТег%>" + ?(ЗначениеЗаполнено(ЭлементСпискаЗначений.Представление), ЭлементСпискаЗначений.Представление, "<Без имени>") + ": " + "<%ЗаголовокЗакрывающийТег%>";
				мОписание = ЗначениеРеквизита;
				
				Если Размещение = "ЛеваяКолонка" Тогда
					Размещение = "ПраваяКолонка"; // Следующее размещение
					стрЛеваяКолонкаЗаголовок = мЗаголовок;
					стрЛеваяКолонка = мОписание;
					
				ИначеЕсли Размещение = "ПраваяКолонка" Тогда
					Размещение = "ЛеваяКолонка"; // Следующее размещение
					стрПраваяКолонкаЗаголовок = мЗаголовок;
					стрПраваяКолонка = мОписание;
					
					Если ШиринаЛевойКолонкиАбсолютная Тогда
						Описание = Описание + "
						|<tr>
						|<table width=""100%"">
						|<td width=""15"" valign=""top"">
						|" + стрЛеваяКолонкаЗаголовок + "
						|</td>
						|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
						|" + стрЛеваяКолонка + "
						|</td>
						|<td width=""15"" valign=""top"">
						|" + стрПраваяКолонкаЗаголовок + "
						|</td>
						|<td valign=""top"">
						|" + стрПраваяКолонка + "
						|</td>
						|</table>
						|</tr>
						|";
					ИначеЕсли ШиринаПравойКолонкиАбсолютная Тогда
						Описание = Описание + "
						|<tr>
						|<table width=""100%"">
						|<td width=""15"" valign=""top"">
						|" + стрЛеваяКолонкаЗаголовок + "
						|</td>
						|<td valign=""top"">
						|" + стрЛеваяКолонка + "
						|</td>
						|<td width=""15"" valign=""top"">
						|" + стрПраваяКолонкаЗаголовок + "
						|</td>
						|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
						|" + стрПраваяКолонка + "
						|</td>
						|</table>
						|</tr>
						|";
					Иначе
						Описание = Описание + "
						|<tr>
						|<td width=""10%"" valign=""top"">
						|" + стрЛеваяКолонкаЗаголовок + "
						|</td>
						|<td width=""" + Формат(ШиринаЛевойКолонки-10, "ЧН=0; ЧГ=") + "%"" valign=""top"">
						|" + стрЛеваяКолонка + "
						|</td>
						|<td width=""10%"" valign=""top"">
						|" + стрПраваяКолонкаЗаголовок + "
						|</td>
						|<td width=""" + Формат(ШиринаПравойКолонки-10, "ЧН=0; ЧГ=") + "%"" valign=""top"">
						|" + стрПраваяКолонка + "
						|</td>
						|</tr>
						|";
					КонецЕсли;
					
					стрЛеваяКолонка = "";
					стрПраваяКолонка = "";
					
					//// Начнем новую строку
					//Описание = Описание + "
					//|<tr>
					//|<td colspan=2></BR></td>
					//|<tr>
					//|";
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(стрЛеваяКолонка) ИЛИ ЗначениеЗаполнено(стрПраваяКолонка) Тогда
				Если ШиринаЛевойКолонкиАбсолютная Тогда
					Описание = Описание + "
					|<tr>
					|<table width=""100%"">
					|<td width=""15"" valign=""top"">
					|" + стрЛеваяКолонкаЗаголовок + "
					|</td>
					|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
					|" + стрЛеваяКолонка + "
					|</td>
					|<td width=""15"" valign=""top"">
					|" + стрПраваяКолонкаЗаголовок + "
					|</td>
					|<td valign=""top"">
					|" + стрПраваяКолонка + "
					|</td>
					|</table>
					|</tr>
					|";
				ИначеЕсли ШиринаПравойКолонкиАбсолютная Тогда
					Описание = Описание + "
					|<tr>
					|<table width=""100%"">
					|<td width=""15"" valign=""top"">
					|" + стрЛеваяКолонкаЗаголовок + "
					|</td>
					|<td valign=""top"">
					|" + стрЛеваяКолонка + "
					|</td>
					|<td width=""15"" valign=""top"">
					|" + стрПраваяКолонкаЗаголовок + "
					|</td>
					|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
					|" + стрПраваяКолонка + "
					|</td>
					|</table>
					|</tr>
					|";
				Иначе
					Описание = Описание + "
					|<tr>
					|<td width=""10%"" valign=""top"">
					|" + стрЛеваяКолонкаЗаголовок + "
					|</td>
					|<td width=""" + Формат(ШиринаЛевойКолонки-10, "ЧН=0; ЧГ=") + "%"" valign=""top"">
					|" + стрЛеваяКолонка + "
					|</td>
					|<td width=""10%"" valign=""top"">
					|" + стрПраваяКолонкаЗаголовок + "
					|</td>
					|<td width=""" + Формат(ШиринаПравойКолонки-10, "ЧН=0; ЧГ=") + "%"" valign=""top"">
					|" + стрПраваяКолонка + "
					|</td>
					|</tr>
					|";
				КонецЕсли;
			КонецЕсли;
			
			Описание = Описание +
			"</table>
			|";
			
			Описание = СтрЗаменить(Описание, "<%ЗаголовокОткрывающийТег%>", "<font style=""font-size:12px;"" face=""MS Sans Serif"">");
			Описание = СтрЗаменить(Описание, "<%ЗаголовокЗакрывающийТег%>", "</font>");
			
			Описание = СтрЗаменить(Описание, "<%ЗаголовокТаблицыОткрывающийТег%>", "<B><font style=""font-size:12px;"" face=""MS Sans Serif"">");
			Описание = СтрЗаменить(Описание, "<%ЗаголовокТаблицыЗакрывающийТег%>", "</font></B>");
			
			Описание = СтрЗаменить(Описание, "<%ШапкаТаблицыОткрывающийТег%>", "<font style=""font-size:12px; font-weight:normal"" face=""MS Sans Serif"">");
			Описание = СтрЗаменить(Описание, "<%ШапкаТаблицыЗакрывающийТег%>", "</font>");
			
			Описание = СтрЗаменить(Описание, "<%ПредставлениеПустойДаты%>", "дата не указана");
			
		//КонецЦикла;
		
		Описание =
		"<html>
		|<head>
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">
		|<style type=""text/css"">
		|	a {text-decoration:none;}
		|.title .rightSide { float:right }
		|body {min-width: 650px;}
		|.title .leftSide { float:left }
		|  "+СтильКнопки+"
		|</style>
		|<style>
		|TABLE.main {
		|       border: 1px solid #a0a0a0;
		|      border-collapse: collapse;
		|        color: #333;
		|        /* Убираем двойные линии между ячейками */
		|      }
		|      TD.main, TH.main {
		|        border: 1px solid #ccc;
		|        /* Параметры рамки */
		|      }
		|      TH.main {
		|        background-color: #f2f2f2;
		|      }
		|      TD.main {
		|        background-color: #FFFFFF;
		|      }
		|</style>
		|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
		|<title></title>
		|</head>
		|<body>
		|" + Описание + "
		|</body>
		|</html>";
		
		Возврат Описание;
	КонецЕсли;
	
КонецФункции // СформироватьИнформациюИзБазовогоКаталога()

// Функция Получить базовый прайс-лист
//  Возвращает базовый прайс-лист, назначенный для производителя
//  В параметр ПроизводителиДляПоиска возвращается структура для последующего поиска в базовом прайс-листе
//
// Параметры:
//  Производитель			 - СправочникСсылка.Производители	 - Производитель артикула
//  ПроизводителиДляПоиска	 - Структура	 - Ключи "ЕстьПустойПроизводитель" - Булево, "ПроизводителиВерхнегоУровня" - Массив
// 
// Возвращаемое значение:
//   - СправочникСсылка.ПрайсЛистыКонтрагентов
//
Функция ПолучитьБазовыйКаталогПроизводителя(Производитель) Экспорт
	
	БазовыйКаталогПроизводителя = Неопределено;
	
	Если ЗначениеЗаполнено(Производитель) Тогда
		Если ЗначениеЗаполнено(Производитель.БазовыйКаталог) Тогда
			БазовыйКаталогПроизводителя = Производитель.БазовыйКаталог;
		Иначе
			Если ЗначениеЗаполнено(Производитель.Родитель) Тогда
				БазовыйКаталогПроизводителя = Производитель.Родитель.БазовыйКаталог;
			Иначе
				БазовыйКаталогПроизводителя = Справочники.ПрайсЛистыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат БазовыйКаталогПроизводителя;
	
КонецФункции // ПолучитьБазовыйПрайсЛистПроизводителя()

// Функция Получить информацию из Базового каталога
//  Выполняет поиск в базовом прайс-листе производителя оригинальных данных.
//  Возвращаемые значения:
//  Неопределено - Если не указан производитель или артикул.
//  Справочники.ПрайсЛистыКонтрагентов.ПустаяСсылка - если для производителя не задан базовый прайс-лист.
//  Ложь - Если произошла ошибка при получении данных из базового прайс-листа.
//  Массив - Оригинальные данные из базового прайс-листа
//
// Параметры:
//  Артикул			 - СправочникСсылка.Номенклатура, Строка - Номенклатура или артикул (не канонический), для которых нужно получить данные из прайс-листа
//  Производитель	 - СправочникСсылка.Производители		 - Производитель артикула
// 
// Возвращаемое значение:
//   - Неопределено, Булево, СправочникСсылка.ПрайсЛистыКонтрагентов, Массив.
//
Функция ПолучитьИнформациюИзБазовогоКаталога(Знач Артикул, Знач Производитель = Неопределено) Экспорт
	
	Если ТипЗнч(Артикул) = Тип("СправочникСсылка.Номенклатура") Тогда
		АртикулДляПоиска = Артикул.АртикулДляПоиска;
		Производитель    = Артикул.Производитель;
		Артикул          = Артикул.Артикул;
	Иначе
		АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул);
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(Производитель) И ЗначениеЗаполнено(АртикулДляПоиска)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БазовыйПрайсЛист = ПолучитьБазовыйКаталогПроизводителя(Производитель);
	
	Если ЗначениеЗаполнено(БазовыйПрайсЛист) Тогда
		Возврат ПолучитьОригинальныеДанныеИзПрайсЛистаПоАртикулу(БазовыйПрайсЛист, Артикул, АртикулДляПоиска, Производитель);
	КонецЕсли;
	
	// Неопределено или ПустаяСсылка
	Возврат БазовыйПрайсЛист;
	
КонецФункции // ПолучитьСтрокиБазовогоПрайсЛиста()

// Функция Получить оригинальные данные из прайс-листа по артикулу и производителю
//  Возвращает массив оригинальных строк из прайс-листа контрагента,
//  если при получении данных произошла ошибка, то возвращается Ложь
//
// Параметры:
//  ПрайсЛист			 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист, в котором требуется найти строки
//  Артикул				 - СправочникСсылка.Номенклатура, Строка	 - Номенклатура или Артикул
//  АртикулДляПоиска	 - Строка								 - Артикул для поиска
//  Производитель		 - СправочникСсылка.Производители		 - Производитель
// 
// Возвращаемое значение:
//   - Массив, Булево
//
Функция ПолучитьОригинальныеДанныеИзПрайсЛистаПоАртикулу(ПрайсЛист, Знач Артикул, Знач АртикулДляПоиска=Неопределено, Знач Производитель=Неопределено)
	
	Если ТипЗнч(Артикул) = Тип("СправочникСсылка.Номенклатура") Тогда
		АртикулДляПоиска = Артикул.АртикулДляПоиска;
		Производитель    = Артикул.Производитель;
		Артикул          = Артикул.Артикул;
	Иначе
		Если АртикулДляПоиска = Неопределено Тогда
			АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(АртикулДляПоиска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Артикул = АртикулДляПоиска Тогда
		Артикул = Неопределено;
	Иначе
		Артикул = СтрЗаменить(Артикул, "'", "");
	КонецЕсли;
	
	ПроизводительРодитель = ?(ЗначениеЗаполнено(Производитель) И ЗначениеЗаполнено(Производитель.Родитель), Производитель.Родитель, Неопределено);
	
	МассивСтрок = Новый Массив;
	
	Если ЗначениеЗаполнено(ПрайсЛист) Тогда
		
		МассивЗаголовков = ПрайсЛист.ЗаголовкиКолонокВПрайсЛисте.ВыгрузитьКолонку("ПредставлениеКолонки");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПрайсЛист",        ПрайсЛист);
		Запрос.УстановитьПараметр("АртикулДляПоиска", АртикулДляПоиска);
		Запрос.УстановитьПараметр("Производитель",    Производитель);
		Запрос.УстановитьПараметр("ПроизводительРодитель", ПроизводительРодитель);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрайсЛистыКонтрагентовВременный.ОстальныеПоляВПрайсЛисте
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК ПрайсЛистыКонтрагентовВременный
		|ГДЕ
		|	ПрайсЛистыКонтрагентовВременный.ПрайсЛист = &ПрайсЛист
		|	И ПрайсЛистыКонтрагентовВременный.АртикулДляПоиска = &АртикулДляПоиска
		|	И (ПрайсЛистыКонтрагентовВременный.Производитель = &Производитель
		|			ИЛИ ПрайсЛистыКонтрагентовВременный.Производитель.Родитель = &ПроизводительРодитель)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			
			Пока Выборка.Следующий() Цикл
				ОстальныеПоляВПрайсЛисте = Выборка.ОстальныеПоляВПрайсЛисте.Получить();
				СтрокаПрайсЛиста = Новый СписокЗначений;
				Если ТипЗнч(ОстальныеПоляВПрайсЛисте) = Тип("СписокЗначений") Тогда // Может быть там уже готовый список значений
					Для Каждого ПолеПрайсЛиста Из ОстальныеПоляВПрайсЛисте Цикл
						СтрокаПрайсЛиста.Добавить(ПолеПрайсЛиста.Представление, ПолеПрайсЛиста.Значение);
					КонецЦикла;
				ИначеЕсли ТипЗнч(ОстальныеПоляВПрайсЛисте) = Тип("Массив") Тогда
					Сч = 0;
					Для Каждого ПолеПрайсЛиста Из ОстальныеПоляВПрайсЛисте Цикл
						Если МассивЗаголовков.ВГраница() >= Сч Тогда
							ЗаголовокКолонки = МассивЗаголовков[Сч];
						Иначе
							ЗаголовокКолонки = Формат(Сч + 1, "ЧГ=0");
						КонецЕсли;
						СтрокаПрайсЛиста.Добавить(ПолеПрайсЛиста, ЗаголовокКолонки);
						Сч = Сч + 1;
					КонецЦикла;
				КонецЕсли;
				МассивСтрок.Добавить(СтрокаПрайсЛиста);
			КонецЦикла;
			
		ИначеЕсли НЕ ПрайсЛист.ФайлИсточникДанных Тогда
			
			Если НЕ (ЗначениеЗаполнено(ПрайсЛист.СтрокаПодключения) И ЗначениеЗаполнено(ПрайсЛист.ИмяТаблицы)) Тогда
				// Не заполнены базовые вещи
				Возврат Ложь;
			КонецЕсли;
			
			ИмяПоляКлюч    = Неопределено;
			ИмяПоляАртикул = Неопределено;
			
			// Поищем сначала КлючСтрокиПоставщика (так как там предполагается быть артикул для поиска??), затем Артикул.
			СтрокаПоляКлюч = ПрайсЛист.СтруктураФайлаПрайсЛиста.Найти("КлючСтрокиПоставщика", "ИмяРеквизитаПрайсЛиста");
			Если СтрокаПоляКлюч <> Неопределено Тогда
				ИмяПоляКлюч = СтрокаПоляКлюч.ИмяПоляФайла;
			КонецЕсли;
			
			СтрокаПоляАртикул = ПрайсЛист.СтруктураФайлаПрайсЛиста.Найти("Артикул", "ИмяРеквизитаПрайсЛиста");
			Если СтрокаПоляАртикул <> Неопределено Тогда
				ИмяПоляАртикул = СтрокаПоляАртикул.ИмяПоляФайла;
			КонецЕсли;
			
			Если НЕ (ЗначениеЗаполнено(ИмяПоляКлюч) ИЛИ ЗначениеЗаполнено(ИмяПоляАртикул)) Тогда
				// Нет возможности искать
				Возврат Ложь;
			КонецЕсли;
			
			Если ИмяПоляКлюч = ИмяПоляАртикул Тогда
				ИмяПоляАртикул = Неопределено;
			КонецЕсли;
			
			// Далее разберемся с производителем
			ПроверятьПроизводителя = Ложь;
			
			Если Производитель = Неопределено Тогда
				// Устроит любой производитель
				ПроизводительОк = Истина;
			Иначе
				ПроизводительОк = Ложь;
				Если ЗначениеЗаполнено(ПрайсЛист.Производитель) Тогда
					ПроизводительОк = (ПрайсЛист.Производитель = Производитель) ИЛИ ПрайсЛист.Производитель.Родитель = ПроизводительРодитель;
				Иначе
					СтрокаПоляПроизводитель = ПрайсЛист.СтруктураФайлаПрайсЛиста.Найти("Производитель", "ИмяРеквизитаПрайсЛиста");
					Если СтрокаПоляПроизводитель <> Неопределено И ЗначениеЗаполнено(СтрокаПоляПроизводитель.ИмяПоляФайла) Тогда
						ИмяПоляПроизводитель = СтрокаПоляПроизводитель.ИмяПоляФайла;
					КонецЕсли;
					Если ЗначениеЗаполнено(Производитель) И ЗначениеЗаполнено(ИмяПоляПроизводитель) Тогда
						ПроверятьПроизводителя = Истина;
						ПроизводительОк = Истина;
					ИначеЕсли Не ЗначениеЗаполнено(Производитель) И Не ЗначениеЗаполнено(ИмяПоляПроизводитель) Тогда
						ПроизводительОк = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПроизводительОк Тогда
				// Нет смысла искать
				Возврат МассивСтрок;
			КонецЕсли;
			
			Попытка
				Connection = Новый COMОбъект("ADODB.Connection");
				Коннект = Connection.Open(ПрайсЛист.СтрокаПодключения);
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
			ИмяТаблицы = ПрайсЛист.ИмяТаблицы;
			
			Command   = Новый  COMОбъект("ADODB.Command");
			Recordset = Новый  COMОбъект("ADODB.Recordset");
			Recordset.ActiveConnection = Connection;
			
			ТекстЗап =
				"SELECT " + ИмяТаблицы + ".*
				|FROM " + ИмяТаблицы + "
				|WHERE (";
			
			ТекстУсловия = "";
			
			Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
				ТекстУсловия = ТекстУсловия + "("+ИмяТаблицы+".["+ИмяПоляКлюч+"]) = %ОтборАртикулДляПоиска%"
					+ ?(ЗначениеЗаполнено(Артикул), " OR ("+ИмяТаблицы+".["+ИмяПоляКлюч+"]) = %ОтборАртикул%", "");
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
				ТекстУсловия = ТекстУсловия + ?(НЕ ПустаяСтрока(ТекстУсловия), " OR ", "") +"("+ИмяТаблицы+".["+ИмяПоляАртикул+"]) = %ОтборАртикулДляПоиска%"
					+ ?(ЗначениеЗаполнено(Артикул), " OR ("+ИмяТаблицы+".["+ИмяПоляАртикул+"]) = %ОтборАртикул%", "");
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстУсловия) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТекстЗап = ТекстЗап + ТекстУсловия + ")";
			
			Command.CommandText = СтрЗаменить(СтрЗаменить(ТекстЗап, "%ОтборАртикул%", "'"+Артикул+"'"), "%ОтборАртикулДляПоиска%", "'"+АртикулДляПоиска+"'");
			Command.ActiveConnection = Connection;
			
			Попытка
				Recordset = Command.Execute();
			Исключение
				
				Попытка 
					ЧислоАртикул = Число(АртикулДляПоиска);
				Исключение
					Возврат Ложь;
				КонецПопытки;
				
				ТекстЗап =
					"SELECT " + ИмяТаблицы + ".*
					|FROM " + ИмяТаблицы + "
					|WHERE (";
					
				ТекстУсловия = "";
				
				Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
					ТекстУсловия = ТекстУсловия + "("+ИмяТаблицы+".["+ИмяПоляКлюч+"]) = %ОтборАртикулДляПоиска%";
				КонецЕсли;
				Если ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
					ТекстУсловия = ТекстУсловия + ?(НЕ ПустаяСтрока(ТекстУсловия), " OR ", "")+"("+ИмяТаблицы+".["+ИмяПоляАртикул+"]) = %ОтборАртикулДляПоиска%";
				КонецЕсли;
				
				Если ПустаяСтрока(ТекстУсловия) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ТекстЗап = ТекстЗап + ТекстУсловия + ")";
				
				Command.CommandText = СтрЗаменить(ТекстЗап, "%ОтборАртикулДляПоиска", Формат(ЧислоАртикул, "ЧГ=0"));
				Command.ActiveConnection = Connection;
				
				// Снова попытаемся выполнить запрос, теперь с числовым артикулом.
				Попытка
					Recordset = Command.Execute();
				Исключение
					Возврат Ложь;
				КонецПопытки;
				
			КонецПопытки; 
			
			КолПолей = Recordset.Fields.Count;
			
			Пока НЕ Recordset.EOF Цикл
				
				СтрокаПодходит = Истина;
				СтрокаПрайсЛиста = Новый СписокЗначений;
				
				Для К = 0 По КолПолей - 1 Цикл
					
					ИмяПоляПрайса = Recordset.Fields(К).Name;
					Value = Recordset.Fields(К).Value;
					
					Если ПроверятьПроизводителя И ИмяПоляПрайса = ИмяПоляПроизводитель Тогда
						ПроизводительСтрокиПрайсЛиста = Неопределено;
						Если ЗначениеЗаполнено(Value) Тогда
							ПроизводительСтрокиПрайсЛиста = Справочники.Производители.НайтиПроизводителяПоНаименованию(Value);
							Если ЗначениеЗаполнено(ПроизводительСтрокиПрайсЛиста.Родитель) Тогда
								ПроизводительСтрокиПрайсЛистаРодитель = ПроизводительСтрокиПрайсЛиста.Родитель;
							Иначе
								ПроизводительСтрокиПрайсЛистаРодитель = Справочники.Производители.ПустаяСсылка();
							КонецЕсли;
						КонецЕсли;
						Если Не (Производитель = ПроизводительСтрокиПрайсЛиста ИЛИ ПроизводительРодитель = ПроизводительСтрокиПрайсЛистаРодитель) Тогда
							СтрокаПодходит = Ложь;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаПрайсЛиста.Добавить(Value, ИмяПоляПрайса);
					
				КонецЦикла;
				
				Если СтрокаПодходит Тогда
					МассивСтрок.Добавить(СтрокаПрайсЛиста);
				КонецЕсли;
				
				RecordSet.MoveNext();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции // ПолучитьСтрокиПрайсЛистаПоАртикулу()

// Функция возвращает пустое содержание.
//
// Возвращаемое значение:
//	Строка	- Пустое содержание.
//
Функция БазовыйКаталогПолучитьПустоеСодержание(ЗаголовокСсылки = "НеУказанАртикул", ОписаниеСсылки = "Не заполнен артикул или производитель")
	
	ГиперссылкаНастройки = "<FONT size=""1""><br><hr noshade size=""1""></FONT><DIV align=""left""><FONT size=""2"">
	|<A style=""COLOR: #000000; font-weight: bold"" href=""" + ЗаголовокСсылки + """>" + ОписаниеСсылки + "</A>&nbsp;&nbsp;&nbsp;
	|</FONT></DIV>";
	Описание =
	"<html>
	|<head>
	|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
	|<title></title>
	|</head>
	|<body>
	|" + ГиперссылкаНастройки +"
	|</body>
	|</html>";
	
	Возврат Описание;
	
КонецФункции // БазовыйКаталогПолучитьПустоеСодержание()

// Вспомогательная функция, формирует теги для отрисовки текста определенным цветом и шрифтом.
//
// Параметры:
//	ЦветТекста	- Цвет	- Цвет текста в формате 1С.
//	ЦветФона	- Цвет	- Цвет фона в формате 1С.
//	Шрифт		- Шрифт	- Шрифт текста в формате 1С.
//
// Возвращаемое значение:
//	Структура	- структура с открывающимся и закрывающимся тегами.
//
Функция ПолучитьТегиШрифтаТекстаHTML(ЦветТекста, ЦветФона, Шрифт)
	
	СтруктураРезультат = Новый Структура("ОткрывающийТег,ЗакрывающийТег", "", "");
	
	Если ЦветТекста = Неопределено Тогда
		ЦветТекстаHTML = Неопределено;
	Иначе
		ЦветТекстаHTML = ПолучитьЦветДляHTMLКода(ЦветТекста);
	КонецЕсли;
	
	Если ЦветФона = Неопределено Тогда
		ЦветФонаHTML = Неопределено;
	Иначе
		ЦветФонаHTML = ПолучитьЦветДляHTMLКода(ЦветФона);
	КонецЕсли;
	
	Если Шрифт = Неопределено Тогда
		ШрифтЭлемента = Неопределено;
	Иначе
		Если Шрифт.Размер < 0 Тогда
			ШрифтЭлемента = Неопределено;
		Иначе
			ШрифтЭлемента = Шрифт;
		КонецЕсли;
	КонецЕсли;
	
	Если ЦветТекстаHTML <> Неопределено Или ЦветФонаHTML <> Неопределено Или ШрифтЭлемента <> Неопределено Тогда
		СтруктураРезультат.ОткрывающийТег = "<FONT style=""";
		
		Если ЦветТекстаHTML <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "color:" + ЦветТекстаHTML + "; ";
		КонецЕсли;
		Если ЦветФонаHTML <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "background-color:" + ЦветФонаHTML + "; ";
		КонецЕсли;
		
		Если ШрифтЭлемента <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "font-size:" + Формат(ШрифтЭлемента.Размер, "ЧН=0; ЧГ=") + "px; ";
		КонецЕсли;
		
		СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + """";
		
		Если ШрифтЭлемента <> Неопределено Тогда
			Если ЗначениеЗаполнено(ШрифтЭлемента.Имя) Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + " face=""" + ШрифтЭлемента.Имя + """";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + ">";
		
		Если ШрифтЭлемента <> Неопределено Тогда
			Если ШрифтЭлемента.Жирный = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<B>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</B>";
			КонецЕсли;
			Если ШрифтЭлемента.Наклонный = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<I>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</I>";
			КонецЕсли;
			Если ШрифтЭлемента.Подчеркивание = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<U>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</U>";
			КонецЕсли;
			Если ШрифтЭлемента.Зачеркивание = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<DEL>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</DEL>";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</FONT>";
	КонецЕсли;
		
	Возврат СтруктураРезультат;
	
КонецФункции  // ПолучитьТегиШрифтаТекстаHTML()

// Вспомогательная функция преобназует цвет из формата 1С в формат, пригодный для использования в HTML.
//
// Параметры:
//	ОбъектЦвет	- Цвет - Цвет в формате 1С.
//
// Возвращаемое значение:
//	Строка	- цвет в формате html.
//
Функция ПолучитьЦветДляHTMLКода(ОбъектЦвет)
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	
	Если ОбъектЦвет = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(ОбъектЦвет) = Тип("Строка") Тогда
		Возврат ОбъектЦвет;
	ИначеЕсли ОбъектЦвет.Красный < 0 Или ОбъектЦвет.Зеленый < 0 Или ОбъектЦвет.Синий < 0 Тогда
		
		// получим цвет стиля
		Попытка
			ТабДок=Новый ТабличныйДокумент;
			ТабДок.Область(1,1,1,1).ЦветФона=ОбъектЦвет;
			вф=ПолучитьИмяВременногоФайла("htm");
			ТабДок.Записать(вф,ТипФайлаТабличногоДокумента.HTML);
			// читаем грубо, без ДокументHTML
			рКодПоиска="tr.R0 td.R0C0{ background-color:"; // если 1С изменит формат, эту строку придётся поменять
			ТекстДок=Новый ТекстовыйДокумент;
			ТекстДок.Прочитать(вф);
			стро=ТекстДок.ПолучитьТекст();
			пози=Найти(стро,рКодПоиска);
			Если пози<>0 Тогда
				Возврат ВРег(Сред(стро,пози+СтрДлина(рКодПоиска),8));
			КонецЕсли;
			Возврат "#000000";
		Исключение
			Возврат "#000000";
		КонецПопытки;
		
	КонецЕсли;
	
	СтрокаШестнадцатиричныеСимволы = "0123456789abcdef";
	
	Возврат	"#"
	+	Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Красный / 16) + 1, 1) + Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Красный % 16) + 1, 1)
	+	Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Зеленый / 16) + 1, 1) + Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Зеленый % 16) + 1, 1)
	+	Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Синий / 16) + 1, 1) + Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Синий % 16) + 1, 1);
	
КонецФункции // ПолучитьЦветДляHTMLКода()

// Вспомогательная функция устанавливает стандартный стиль кнопки 1с.
//
// Возвращаемое значение:
// Строка - Стиль для кнопки в формате html.
//
Функция ПолучитьСтильКнопки()
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	
	Возврат ".IWebForm .press:hover::before, .IWebForm .press:active::before {
	|border-radius: 4px;
	|    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.3);
	|}
	|.press::before {
	|    content: """";
	|    display: inline-block;
	|    height: 100%;
	|    margin-right: -100%;
	|    position: relative;
	|    vertical-align: middle;
	|    width: 100%;
	|}
	|.IWebForm .press:active::after, .IWebForm .pressChecked::after, .IWebForm .pressChecked:hover::after {
	|    background-color: rgba(175, 175, 175, 0.15);
	|}
	|.IWebForm .press:hover::after {
	 |    background-color: rgba(255, 255, 255, 0.01);
	|}
	|.press:active::after, .focus.press::after {
	|    border: 1px dotted #2a2a2a;
	|}
	|.press:active::after {
	|    background-color: rgba(175, 200, 255, 0.15);
	|    box-shadow: none;
	|}
	|.press:hover::after {
	|    background-color: rgba(255, 255, 255, 0.15);
	|    box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.2);
	|}
	|.pressButton::after, .I82Form .pressDefault::after, .IWebForm .press::after, .press:hover::after, .press:active::after {
	|    background-image: url(""e1csys/mngsrv/_pressBottom.png?sysver=8.3.6.2390"");
	|    background-position: left bottom;
	|    background-repeat: repeat-x;
	|    background-size: auto 50%;
	|}
	|.press::after {
	|    bottom: 1px;
	|    content: """";
	|    display: block;
	|    left: 1px;
	|    position: absolute;
	|    right: 1px;
	|    top: 1px;
	|}
	|.IWebForm .press:active, .IWebForm .pressChecked {
	|    background-image: url(""e1csys/mngsrv/_pressTopHover.png?sysver=8.3.6.2390"");
	|    background-position: 0 0;
	|    background-repeat: repeat-x;
	|    background-size: auto auto;
	|    color: #424242;
	|}
	|.IWebForm .press:hover {
	|    color: #474747;
	|}
	|.IWebForm .command .press {
	|    height: 26px;
	|    margin-left: 10px;
	|    margin-right: 0;
	|}
	|.IWebForm .press {
	|    background-color: #f6f6f6;
	|    background-size: auto 100%;
	|    border-color: #a0a0a0;
	|    color: #4d4d4d;
	|    font-family: Arial;
	|    font-size: 10pt;
	|}
	|.command .press {
	|    height: 22px;
	|    margin-right: 3px;
	|}
	|.press:active {
	|    background-image: none;
	|   box-shadow: 0 3px 4px -2px rgba(0, 0, 0, 0.2) inset;
	|}
	|.pressButton, .I82Form .pressDefault, .IWebForm .press {
	|    background-image: url(""e1csys/mngsrv/_pressTop.png?sysver=8.3.6.2390"");
	//|    background: rgba(255,255,230,0.9); /* Полупрозрачный цвет фона */
    |background-position: 0 0;
	|    background-repeat: repeat-x;
	|}
	|.press {
	|    height: 26px;
	|    margin-right: 3px;
	|    border: 1px solid transparent;
	|    border-radius: 4px;
	|    box-sizing: border-box;
	|    display: inline-block;
	|    /*margin-bottom: 15px;*/
	|    outline: medium none;
	|    position: relative;
	|    vertical-align: top;
	|    background-color: #f6f6f6;
	|    background-size: auto 100%;
	|    border-color: #a0a0a0;
	|    color: #4d4d4d;
	|    font-family: Arial;
	|    font-size: 10pt;
	|}
	|.press:active span {
	|    top: 1px;
	|}
	|.IWebForm .pressImg {
	|    margin: 0 8px;
	|}
	|.pressImg {
	|    margin: 0 2px;
	|}
	|.pressImg {
	//|    background: rgba(255,255,230,0.9); /* Полупрозрачный цвет фона */
    |    background: rgba(0, 0, 0, 0) url(""e1csys/mngsrv/_sprite.png?sysver=8.3.6.2390"") no-repeat scroll center center;
	|    display: inline-block;
	|    height: 16px;
	|    max-height: 100%;
	|    position: relative;
	|    vertical-align: middle;
	|    width: 16px;
	|}
	|.IWebForm .command .pressImg + .pressBox {
	|    border-left-width: 0;
	|    margin-left: -2px;
	|}
	|.IWebForm .command .pressBox {
	|    border-width: 0 12px;
	|}
	|.pressBox {
	|    border-width: 0 2px;
	|}
	|.pressBox {
	|    margin-right: 8px;
	|    border-color: transparent;
	|    border-style: solid;
	|    box-sizing: border-box;
	|    display: inline-block;
	|    overflow: hidden;
	|    position: relative;
	|    text-align: center;
	|    text-decoration: inherit;
	|    vertical-align: middle;
	|}";
	
КонецФункции // ПолучитьСтильКнопки()

#КонецОбласти

#Область ОбработчикиСозданияНоменклатурыПоНастройкеЗагрузки

// Функция - Создать обновить номенклатуру
//
// Параметры:
//  ПрайсЛист						 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист для создания, если не будет найден базовый каталог или записи в нем
//  Артикул							 - Строка - Артикул
//  Производитель					 - СправочникСсылка.Производители - Производитель
//  НеСоздаватьНовыхЭлементов		 - Булево - Отказ от создания новых элементов
//  НеОбновлятьСуществующиеЭлементы	 - Булево - ОТказ от обновления реквизитов существующих элементов
// 
// Возвращаемое значение:
//   - СправочникСсылка.Номенклатура, Булево
//
Функция СоздатьОбновитьНоменклатуру( Знач Артикул, Знач Производитель, Знач ПрайсЛист = Неопределено, 
						НеСоздаватьНовыхЭлементов = Ложь, НеОбновлятьСуществующиеЭлементы = Истина) Экспорт
	
	ОригинальныйПрайсЛист = Неопределено;
	ОригинальнаяСтрока = Неопределено;
	
	БазовыйКаталог = ПолучитьБазовыйКаталогПроизводителя(Производитель);
	Если ЗначениеЗаполнено(БазовыйКаталог) И ЗначениеЗаполнено(БазовыйКаталог.НастройкаЗагрузкиНоменклатуры) Тогда
		МассивСтрок = ПолучитьОригинальныеДанныеИзПрайсЛистаПоАртикулу(БазовыйКаталог, Артикул,, Производитель);
		Если ТипЗнч(МассивСтрок) = Тип("Массив") И МассивСтрок.Количество() > 0 Тогда
			ОригинальныйПрайсЛист = БазовыйКаталог;
			Настройка = БазовыйКаталог.НастройкаЗагрузкиНоменклатуры;
			ОригинальнаяСтрока = МассивСтрок[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ОригинальнаяСтрока = Неопределено И ЗначениеЗаполнено(ПрайсЛист) И ПрайсЛист <> БазовыйКаталог И ЗначениеЗаполнено(ПрайсЛист.НастройкаЗагрузкиНоменклатуры) Тогда
		МассивСтрок = ПолучитьОригинальныеДанныеИзПрайсЛистаПоАртикулу(ПрайсЛист, Артикул,, Производитель);
		Если ТипЗнч(МассивСтрок) = Тип("Массив") И МассивСтрок.Количество() > 0 Тогда
			ОригинальныйПрайсЛист = ПрайсЛист;
			ОригинальнаяСтрока = МассивСтрок[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ОригинальнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабличныйДокументНоменклатуры = Новый ТабличныйДокумент;
	Сч = 1;
	Для Каждого ЭлементСписка Из ОригинальнаяСтрока Цикл
		ТабличныйДокументНоменклатуры.Область(1, Сч, 1, Сч).Текст = ЭлементСписка.Представление;
		ТабличныйДокументНоменклатуры.Область(2, Сч, 2, Сч).Текст = ЭлементСписка.Значение;
		Сч = Сч + 1;
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров = ЗагрузкаИзЭлектронныхДокументовВызовСервера.Инициализация();
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 			ТаблицаЗагружаемыхРеквизитов());
	СтруктураПараметров.Вставить("ТаблицаДополнительныхПараметров", 		Неопределено);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента", 	1);
	СтруктураПараметров.Вставить("РежимЗагрузки", 							3);
	СтруктураПараметров.Вставить("ИмяСправочника", 							"Номенклатура");
	СтруктураПараметров.Вставить("ИмяВидаРегистра", 						"");
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта", 					"");
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта", 						"");
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки", 					"");
	СтруктураПараметров.Вставить("СсылкаИсточника", 						Неопределено);
	СтруктураПараметров.Вставить("ТабличнаяЧастьИсточника", 				Неопределено);
	СтруктураПараметров.Вставить("НеСоздаватьНовыхЭлементов", 				Ложь);
	СтруктураПараметров.Вставить("НеОбновлятьСуществующиеЭлементы", 		Ложь);
	СтруктураПараметров.Вставить("ЗамещатьСуществующиеЗаписи", 				Ложь);
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", Ложь);
	СтруктураПараметров.Вставить("ФорматДатыСрокаГодности", 				"");
	СтруктураПараметров.Вставить("ВсегдаФормироватьНовыеСерии", 			Ложь);
	СтруктураПараметров.Вставить("НеФормироватьДопНомерСерии", 				Ложь);
	СтруктураПараметров.Вставить("ДействиеСЗагружаемымФайлом", 				"");
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика", 				Ложь);
	СтруктураПараметров.Вставить("КаталогАрхиваЗагруженныхФайлов", 			"");
	СтруктураПараметров.Вставить("СоздаватьПроизводителя", 					Ложь);
	СтруктураПараметров.Вставить("Табуляция", 								Неопределено);
	СтруктураПараметров.Вставить("ИспользоватьВнешнийМодульПреобразованияФайла", Ложь);
	СтруктураПараметров.Вставить("ОбработкаПреобразования", 				Неопределено);
	СтруктураПараметров.Вставить("Кодировка",				 				"");
	СтруктураПараметров.Вставить("ИмяТаблицы",				 				"");
	СтруктураПараметров.Вставить("ОписаниеОшибок",				 			"");
	СтруктураПараметров.Вставить("ТЧДокумента",				 				Неопределено);
	СтруктураПараметров.Вставить("ДопПараметры",				 			Неопределено);
	СтруктураПараметров.Вставить("флКонтрольЗаполнения", 					Ложь);
	СтруктураПараметров.Вставить("ВладелецСерии",				 			Неопределено);
	СтруктураПараметров.Вставить("ЗагружатьДополнительныеРеквизитыИСведения",	Ложь);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыИСведенияТолькоОбщие",	Ложь);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыПоТипуНоменклатуры",	Новый СписокЗначений);
	
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.ЗаполнитьНастройкиКолонок(
		ОригинальныйПрайсЛист.НастройкаЗагрузкиНоменклатуры.НастройкиЗагрузкиВыгрузки.Получить(),
		СтруктураПараметров);
	СтруктураПараметров.ПерваяСтрокаДанныхТабличногоДокумента = 2;
	СтруктураПараметров.НеСоздаватьНовыхЭлементов             = НеСоздаватьНовыхЭлементов;
	СтруктураПараметров.НеОбновлятьСуществующиеЭлементы       = НеОбновлятьСуществующиеЭлементы;
	
	ТекстыЯчеек = Неопределено;
	КоличествоОшибок = 0;
	
	КЭШЗначений = Новый ТаблицаЗначений;
	КЭШЗначений.Колонки.Добавить("ТипРеквизита");
	КЭШЗначений.Колонки.Добавить("ИскатьПо");
	КЭШЗначений.Колонки.Добавить("Представление");
	КЭШЗначений.Колонки.Добавить("Ссылка");
	КЭШЗначений.Колонки.Добавить("ЗначениеРеквизита");
	КЭШЗначений.Колонки.Добавить("СписокСлов");
	СтруктураПараметров.Вставить("КЭШЗначений", КЭШЗначений);
	
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.СформироватьСтруктуруКолонок(СтруктураПараметров);
	
	ДанныеСтроки = ЗагрузкаИзЭлектронныхДокументовВызовСервера.КонтрольЗаполненияСтроки(
		ТабличныйДокументНоменклатуры,
		2,
		СтруктураПараметров,
		ТекстыЯчеек,
		КоличествоОшибок);
	
	ДанныеСтроки.Вставить("ПрайсЛист", ОригинальныйПрайсЛист);
	
	Возврат ДанныеСтроки;
	
КонецФункции

Функция ТаблицаЗагружаемыхРеквизитов()
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("Пометка",                   Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("МожетБытьПолемПоиска",      Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ПолеПоиска",                Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ЭтоДополнительныйРеквизит", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ЭтоСведение",               Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ПредставлениеРеквизита",    Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ИмяРеквизита",              Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РежимЗагрузки",             Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Выражение",                 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ИскатьПо",                  Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РежимПоиска",               Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НомерКолонки",              Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ШиринаКолонки",             Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("НастройкаЗагрузки",         Новый ОписаниеТипов("СправочникСсылка.НастройкиЗагрузкиДанныхИзТабличногоДокумента"));
	Таблица.Колонки.Добавить("ДоступноеОписаниеТипов",    Новый ОписаниеТипов("ОписаниеТипов")); // ОписаниеТипов
	Таблица.Колонки.Добавить("ОписаниеТипов",             Новый ОписаниеТипов("ОписаниеТипов")); // ОписаниеТипов
	Таблица.Колонки.Добавить("ЗначениеПоУмолчанию");      // ЛюбаяСсылка, Булево, Строка, Дата, Число, ОписаниеТипов
	Таблица.Колонки.Добавить("СвязьПоВладельцу");         // ЛюбаяСсылка, Строка
	Таблица.Колонки.Добавить("СвязьПоТипу");              // ЛюбаяСсылка
	Таблица.Колонки.Добавить("ЭлементСвязиПоТипу");       // ЛюбаяСсылка
	Таблица.Колонки.Добавить("СсылкаРеквизита");          // ЛюбаяСсылка, Булево, Строка, Дата, Число, ОписаниеТипов
	Таблица.Колонки.Добавить("ВыборГрупп",                Новый ОписаниеТипов("Строка"));
	
	Возврат Таблица;
	
КонецФункции

// Функция - Устанавливает цены номенклатуры по прайс-листу
//
// Параметры:
//  ПрайсЛист	 - СправочникСсылка.ПрайсЛистыКонтрагентов - Прайс-лист контрагента
//  Номенклатура - Массив, СправочникСсылка.Номенклатура - Номенклатура, для которой требуется установить цены
//  ПараметрыЗаполнения - Структура - Параметры заполнения документа "Изменение цен" таких реквизитов,
//                                    как "Тип цен", "Подраздление компании".
// 
// Возвращаемое значение:
//   - Булево
//
Функция УстановитьЦеныНоменклатурыПоПрайсЛисту(ПрайсЛист, Номенклатура, ПараметрыЗаполнения) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПрайсЛиста = Новый Массив;
	РеквизитыПрайсЛиста.Добавить("ФормироватьЦеныНоменклатуры");
	РеквизитыПрайсЛиста.Добавить("ПодразделениеЦены");
	РеквизитыПрайсЛиста.Добавить("ТипЦен");
	РеквизитыПрайсЛиста.Добавить("Владелец");
	РеквизитыПрайсЛиста.Добавить("ИмяТаблицы");
	
	ДанныеПрайсЛиста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрайсЛист, СтрСоединить(РеквизитыПрайсЛиста, ","));
	
	Если НЕ ДанныеПрайсЛиста.ФормироватьЦеныНоменклатуры
		ИЛИ НЕ ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получим тип цен из прайс-листа контрагента.
	ТипЦенНоменклатуры = ДанныеПрайсЛиста.ТипЦен;
	
	Если ТипЦенНоменклатуры.Пустая() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В базовом каталоге не указан тип цен. Установка цены номенклатуры отменена.'")
		);
		Возврат Неопределено;
	КонецЕсли;
	
	ПодразделениеЦены = ДанныеПрайсЛиста.ПодразделениеЦены;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеЦены) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В базовом каталоге не указано подразделение, для которого назначается цена. Установка цены номенклатуры отменена.'")
		);
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыНоменклатуры = Новый Массив;
	РеквизитыНоменклатуры.Добавить("ЦеноваяГруппа");
	РеквизитыНоменклатуры.Добавить("ОсновнаяЕдиницаИзмерения");
	РеквизитыНоменклатуры.Добавить("БазоваяЕдиницаИзмерения");
	
	ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Номенклатура,
		СтрСоединить(РеквизитыНоменклатуры, ",")
	);
	
	ЦеноваяГруппаНоменклатуры = Номенклатура.ЦеноваяГруппа;
	
	ТаблицаЦен = ДанныеИзПрайсЛиста(ПрайсЛист, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура));
	Если ТипЗнч(ТаблицаЦен) = Тип("ТаблицаЗначений") И ТаблицаЦен.Количество() > 0 Тогда
		
		СтрокаЦен = ТаблицаЦен[0];
		
		Цена = СтрокаЦен.Цена;
		
		// Для установки цены необходимо использовать тип цен, который не расчитывается от базовой.
		Пока ТипЦенНоменклатуры.Рассчитывается Цикл
			
			// Проверим указан ли процент наценки для данного типа номенклатуры
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТипыЦенПроцентыСкидкиНаценки.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
			|ИЗ
			|	Справочник.ТипыЦен.ПроцентыСкидкиНаценки КАК ТипыЦенПроцентыСкидкиНаценки
			|ГДЕ
			|	ТипыЦенПроцентыСкидкиНаценки.Ссылка.Ссылка = &ТипЦен
			|	И ТипыЦенПроцентыСкидкиНаценки.ЦеноваяГруппа = &ЦеноваяГруппа";
			Запрос.УстановитьПараметр("ТипЦен",        ТипЦенНоменклатуры);
			Запрос.УстановитьПараметр("ЦеноваяГруппа", ЦеноваяГруппаНоменклатуры);
			
			Выборка=Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
			Иначе
				ПроцентСкидкиНаценки = ТипЦенНоменклатуры.ПроцентСкидкиНаценки;
			КонецЕсли;
			
			// рассчитаем цену
			Цена = Цена / (100 + ПроцентСкидкиНаценки) * 100;
			
			ТипЦенНоменклатуры = ТипЦенНоменклатуры.БазовыйТипЦен;
		КонецЦикла;
		
		ВалютаЦеныНоменклатуры = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦенНоменклатуры, Номенклатура);
		
		Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			Цена, СтрокаЦен.Валюта, ТекущаяДатаСеанса(), ВалютаЦеныНоменклатуры, ТекущаяДатаСеанса());
		
		ХозОперация = Справочники.ХозОперации.УстановкаЦенКомпании;
		ТекущийСписокТипЦен = Новый СписокЗначений;
		ТекущийСписокТипЦен.Добавить(ТипЦенНоменклатуры,, Истина);
		СписокТиповЦен = Новый Структура("ТекущийСписокТипЦен", ТекущийСписокТипЦен);
		
		ПараметрыРасчетаТиповЦен = Новый Структура();
		ПараметрыРасчетаТиповЦен.Вставить("РасчетЦенОт",                  4);
		ПараметрыРасчетаТиповЦен.Вставить("ПроцентНаценки",               0);
		ПараметрыРасчетаТиповЦен.Вставить("ПроцентНаценкиИзНоменклатуры", Ложь);
		ПараметрыРасчетаТиповЦен.Вставить("ОкруглятьДо",                  0.01);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Дата",                            ТекущаяДатаСеанса());
		СтруктураПараметров.Вставить("ДатаНачалаДействия",              НачалоГода(ТекущаяДатаСеанса()));
		СтруктураПараметров.Вставить("ПодразделениеКомпанииПолучатель", ПодразделениеЦены);
		СтруктураПараметров.Вставить("СписокТиповЦен",                  СписокТиповЦен);
		СтруктураПараметров.Вставить("ПараметрыРасчетаТиповЦен",        ПараметрыРасчетаТиповЦен);
		СтруктураПараметров.Вставить("ПрайсЛистКонтрагента",            ПрайсЛист);
		СтруктураПараметров.Вставить("Контрагент",                      ДанныеПрайсЛиста.Владелец);
		СтруктураПараметров.Вставить("ХозОперация",                     ХозОперация);
		СтруктураПараметров.Вставить("Номенклатура",                    Номенклатура);
		СтруктураПараметров.Вставить("Цена",                            Цена);
		
		ИзменениеЦен = Документы.ИзменениеЦен.СоздатьДокумент();
		ИзменениеЦен.Заполнить(СтруктураПараметров);
		ИзменениеЦен.ДатаНачалаДействия = ТекущаяДатаСеанса();
		ИзменениеЦен.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		
		Если ЗначениеЗаполнено(ИзменениеЦен.Ссылка) Тогда
			Возврат ИзменениеЦен.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗаполнитьТаблицуЦенИзИсточникаДанных(ПрайсЛист, ТаблицаЦен, СписокНоменклатуры, Производитель = Неопределено)
	
	Артикул = "";
	АртикулДляПоиска = "";
	
	Если НЕ (ЗначениеЗаполнено(ПрайсЛист.СтрокаПодключения) И ЗначениеЗаполнено(ПрайсЛист.ИмяТаблицы)) Тогда
		// Не заполнены базовые вещи
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПоляКлюч    = Неопределено;
	ИмяПоляАртикул = Неопределено;
	
	// Поищем сначала КлючСтрокиПоставщика (так как там предполагается быть артикул для поиска??), затем Артикул.
	СтрокаПоляКлюч = ПрайсЛист.СтруктураФайлаПрайсЛиста.Найти("КлючСтрокиПоставщика", "ИмяРеквизитаПрайсЛиста");
	Если СтрокаПоляКлюч <> Неопределено Тогда
		ИмяПоляКлюч = СтрокаПоляКлюч.ИмяПоляФайла;
	КонецЕсли;
	
	СтрокаПоляАртикул = ПрайсЛист.СтруктураФайлаПрайсЛиста.Найти("Артикул", "ИмяРеквизитаПрайсЛиста");
	Если СтрокаПоляАртикул <> Неопределено Тогда
		ИмяПоляАртикул = СтрокаПоляАртикул.ИмяПоляФайла;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(ИмяПоляКлюч) ИЛИ ЗначениеЗаполнено(ИмяПоляАртикул)) Тогда
		// Не настроено поле Артикул или ключ строки
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяПоляКлюч = ИмяПоляАртикул Тогда
		ИмяПоляАртикул = Неопределено;
	КонецЕсли;
	
	// Далее разберемся с производителем
	ПроверятьПроизводителя = Ложь;
	
	Если Производитель = Неопределено Тогда
		// Устроит любой производитель
		ПроизводительОк = Истина;
	Иначе
		ПроизводительОк = Ложь;
		Если ЗначениеЗаполнено(ПрайсЛист.Производитель) Тогда
			ПроизводительОк = (ПрайсЛист.Производитель = Производитель)
				ИЛИ ЗначениеЗаполнено(ПрайсЛист.Производитель.Родитель)
					И Производитель = ПрайсЛист.Производитель.Родитель;
		Иначе
			СтрокаПоляПроизводитель = ПрайсЛист.СтруктураФайлаПрайсЛиста.Найти("Производитель", "ИмяРеквизитаПрайсЛиста");
			Если СтрокаПоляПроизводитель <> Неопределено И ЗначениеЗаполнено(СтрокаПоляПроизводитель.ИмяПоляФайла) Тогда
				ИмяПоляПроизводитель = СтрокаПоляПроизводитель.ИмяПоляФайла;
			КонецЕсли;
			Если ЗначениеЗаполнено(Производитель) И ЗначениеЗаполнено(ИмяПоляПроизводитель) Тогда
				ПроверятьПроизводителя = Истина;
				ПроизводительОк = Истина;
			ИначеЕсли НЕ ЗначениеЗаполнено(Производитель) И НЕ ЗначениеЗаполнено(ИмяПоляПроизводитель) Тогда
				ПроизводительОк = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПроизводительОк Тогда
		// Нет смысла искать, производитель уже не соответствует запрошенном
		Возврат Истина;
	КонецЕсли;
	
	СтрокаПоляЦена = ПрайсЛист.СтруктураФайлаПрайсЛиста.Найти("Цена", "ИмяРеквизитаПрайсЛиста");
	Если СтрокаПоляЦена = Неопределено Тогда
		// Не настроено поле с ценой
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПоляЦена = СтрокаПоляЦена.ИмяПоляФайла;
	
	Попытка
		Connection = Новый COMОбъект("ADODB.Connection");
		Коннект = Connection.Open(ПрайсЛист.СтрокаПодключения);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ИмяТаблицы = ПрайсЛист.ИмяТаблицы;
	
	Command   = Новый  COMОбъект("ADODB.Command");
	Recordset = Новый  COMОбъект("ADODB.Recordset");
	Recordset.ActiveConnection = Connection;
	
	ТекстЗап =
		"SELECT " + ИмяТаблицы + ".*
		|FROM " + ИмяТаблицы + "
		|WHERE (";
	
	ТекстУсловия = "";
	
	Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
		ТекстУсловия = ТекстУсловия + "("+ИмяТаблицы+".["+ИмяПоляКлюч+"]) in (%ОтборАртикулДляПоиска%)"
			+ ?(ЗначениеЗаполнено(Артикул), " OR ("+ИмяТаблицы+".["+ИмяПоляКлюч+"]) in (%ОтборАртикул%)", "");
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "", " OR ") + "("+ИмяТаблицы+".["+ИмяПоляАртикул+"]) in (%ОтборАртикулДляПоиска%)"
			+ ?(ЗначениеЗаполнено(Артикул), " OR ("+ИмяТаблицы+".["+ИмяПоляАртикул+"]) in (%ОтборАртикул%)", "");
	КонецЕсли;

	Если ПустаяСтрока(ТекстУсловия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗап = ТекстЗап + ТекстУсловия + ")";
	
	ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНоменклатуры, "Артикул, АртикулДляПоиска");
	СоответствиеНоменклатураАртикул = Новый Соответствие;
	СоответствиеНоменклатураАртикулДляПоиска = Новый Соответствие;
	
	Для Каждого КлючЗначение Из ДанныеНоменклатуры Цикл
		
		Если ПустаяСтрока(Артикул) Тогда
			Артикул = Артикул + КлючЗначение.Значение.Артикул;
			АртикулДляПоиска = АртикулДляПоиска + КлючЗначение.Значение.АртикулДляПоиска;
		Иначе
			Артикул = Артикул + "," + КлючЗначение.Значение.Артикул;
			АртикулДляПоиска = АртикулДляПоиска +","+  КлючЗначение.Значение.АртикулДляПоиска;
		КонецЕсли;
		СоответствиеНоменклатураАртикул.Вставить(КлючЗначение.Значение.Артикул, КлючЗначение.Ключ);
		СоответствиеНоменклатураАртикулДляПоиска.Вставить(КлючЗначение.Значение.АртикулДляПоиска, КлючЗначение.Ключ);
	КонецЦикла;
	
	Command.CommandText = СтрЗаменить(СтрЗаменить(ТекстЗап, "%ОтборАртикул%", "'"+Артикул+"'"), "%ОтборАртикулДляПоиска%", "'"+АртикулДляПоиска+"'");
	Command.ActiveConnection = Connection;
	
	Попытка
		Recordset = Command.Execute();
	Исключение
		
		Артикул = "";
		АртикулДляПоиска = "";
		
		Для Каждого КлючЗначение Из ДанныеНоменклатуры Цикл
			
			Попытка
				ЧислоАртикул = Число(КлючЗначение.Значение.Артикул);
				ЧислоАртикулДляПоиска = Число(КлючЗначение.Значение.АртикулДляПоиска);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если ПустаяСтрока(Артикул) Тогда
				Артикул = Артикул + КлючЗначение.Значение.Артикул;
				АртикулДляПоиска = АртикулДляПоиска + КлючЗначение.Значение.АртикулДляПоиска;
			Иначе
				Артикул = Артикул + "," + КлючЗначение.Значение.Артикул;
				АртикулДляПоиска = АртикулДляПоиска +","+  КлючЗначение.Значение.АртикулДляПоиска;
			КонецЕсли;
			СоответствиеНоменклатураАртикул.Вставить(ЧислоАртикул, КлючЗначение.Ключ);
			СоответствиеНоменклатураАртикулДляПоиска.Вставить(ЧислоАртикулДляПоиска, КлючЗначение.Ключ);
		КонецЦикла;
		
		ТекстЗап =
			"SELECT " + ИмяТаблицы + ".*
			|FROM " + ИмяТаблицы + "
			|WHERE (";
		
		ТекстУсловия = "";
		Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
			ТекстУсловия = ТекстУсловия + "("+ИмяТаблицы+".["+ИмяПоляКлюч+"]) in (%ОтборАртикулДляПоиска%)";
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
			ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "", " OR ") + "("+ИмяТаблицы+".["+ИмяПоляАртикул+"]) in (%ОтборАртикулДляПоиска%)";
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстУсловия) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекстЗап = ТекстЗап + ТекстУсловия + ")";
		
		Command.CommandText = СтрЗаменить(ТекстЗап, "%ОтборАртикулДляПоиска", Формат(ЧислоАртикул, "ЧГ=0"));
		Command.ActiveConnection = Connection;
		
		// Снова попытаемся выполнить запрос, теперь с числовым артикулом.
		Попытка
			Recordset = Command.Execute();
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецПопытки; 
	
	КолПолей = Recordset.Fields.Count;
	
	Пока НЕ Recordset.EOF Цикл
		
		СтрокаПодходит = Истина;
		СтрокаПрайсЛиста = Новый Соответствие;
		Цена = 0;
		
		Для К = 0 По КолПолей - 1 Цикл
			
			ИмяПоляПрайса = Recordset.Fields(К).Name;
			Value = Recordset.Fields(К).Value;
			
			Если ПроверятьПроизводителя И ИмяПоляПрайса = ИмяПоляПроизводитель Тогда
				ПроизводительСтрокиПрайсЛиста = Неопределено;
				Если ЗначениеЗаполнено(Value) Тогда
					ПроизводительСтрокиПрайсЛиста = Справочники.Производители.НайтиПроизводителяПоНаименованию(Value);
					Если ЗначениеЗаполнено(ПроизводительСтрокиПрайсЛиста.Родитель) Тогда
						ПроизводительСтрокиПрайсЛиста = ПроизводительСтрокиПрайсЛиста.Родитель;
					КонецЕсли;
				КонецЕсли;
				Если Производитель <> ПроизводительСтрокиПрайсЛиста Тогда
					СтрокаПодходит = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если ИмяПоляПрайса = ИмяПоляЦена Тогда
				Цена = Value;
			КонецЕсли;
			
			СтрокаПрайсЛиста.Вставить(ИмяПоляПрайса, Value);
			
		КонецЦикла;
		
		Если СтрокаПодходит Тогда
			НоваяСтрока = ТаблицаЦен.Добавить();
			НоваяСтрока.ПрайсЛист = ПрайсЛист;
			Номенклатура = Неопределено;
			Артикул = "";
			Если ЗначениеЗаполнено(ИмяПоляКлюч) Тогда
				Артикул = СтрокаПрайсЛиста.Получить(ИмяПоляКлюч);
				Номенклатура = СоответствиеНоменклатураАртикул.Получить(Артикул);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
				Артикул = СтрокаПрайсЛиста.Получить(ИмяПоляАртикул);
				Номенклатура = СоответствиеНоменклатураАртикулДляПоиска.Получить(Артикул);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Номенклатура) Тогда
				Если СписокНоменклатуры.Количество() = 1 Тогда
					Номенклатура = СписокНоменклатуры[0];
				Иначе
					Номенклатура = Справочники.Номенклатура.НайтиНоменклатуру(Артикул);
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Цена      = Цена;
			НоваяСтрока.Валюта    = ПрайсЛист.Валюта;
		КонецЕсли;
		
		RecordSet.MoveNext();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьТаблицуЦенИзИсточникаДанных()

// Устарела. Не используется.
// Функция Получить цены по прайс-листу для артикула
//  Возвращает таблицу цен из прайс-листа контрагента, если при получении данных произошла ошибка Неопределено
//
// Параметры:
//  ПрайсЛист			 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс-лист, в котором требуется найти строки
//  ТипЦен				 - СписокЗначений, СправочникСсылка.ТипыЦен	 - Типы цен, для которых нужно получить цены
//  Артикул				 - СправочникСсылка.Номенклатура, Строка	 - Номенклатура или Артикул
//  АртикулДляПоиска	 - Строка								 - Артикул для поиска
//  Производитель		 - СправочникСсылка.Производители		 - Производитель
// 
// Возвращаемое значение:
//   - ТаблицаЗначений, Неопределено
//
Функция ПолучитьЦеныПоПрайсЛистуДляАртикула(ПрайсЛист, ТипЦен, Знач Артикул, Знач АртикулДляПоиска=Неопределено, Знач Производитель=Неопределено) Экспорт
	
	Если ТипЗнч(Артикул) = Тип("СправочникСсылка.Номенклатура") Тогда
		АртикулДляПоиска = Артикул.АртикулДляПоиска;
		Производитель    = Артикул.Производитель;
		Артикул          = Артикул.Артикул;
	Иначе
		Если АртикулДляПоиска = Неопределено Тогда
			АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(АртикулДляПоиска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Артикул = АртикулДляПоиска Тогда
		Артикул = Неопределено;
	Иначе
		Артикул = СтрЗаменить(Артикул, "'", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипЦен",                Справочники.ТипыЦен.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПрайсЛист",             ПрайсЛист);
	Запрос.УстановитьПараметр("АртикулДляПоиска",      АртикулДляПоиска);
	Запрос.УстановитьПараметр("Производитель",         Производитель);
	Запрос.УстановитьПараметр("ПроизводительРодитель", ?(ЗначениеЗаполнено(Производитель) И ЗначениеЗаполнено(Производитель.Родитель), Производитель.Родитель, Неопределено));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основной.ПрайсЛист,
	|	&ТипЦен КАК ТипЦен,
	|	Основной.АртикулДляПоиска,
	|	Основной.Производитель,
	|	Основной.Наименование,
	|	Основной.НаименованиеИностранное,
	|	Основной.Цена,
	|	Основной.Количество,
	|	Основной.ЗапретПродажи,
	|	Основной.ЗапретЗакупки,
	|	Основной.КратностьПоставок,
	|	Основной.КлючСтрокиПоставщика,
	|	Основной.ТегПозиции,
	|	Основной.Валюта,
	|	Основной.СрокПоставкиМинимальный,
	|	Основной.СрокПоставкиМаксимальный,
	|	Основной.СрокПоставки,
	|	Основной.Артикул,
	|	Основной.СнятаСПроизводства,
	|	Основной.Вес,
	|	Основной.Объем,
	|	Основной.ПроизводительВПрайсЛисте
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентов КАК Основной
	|ГДЕ
	|	" + ?(ЗначениеЗаполнено(ПрайсЛист), "Основной.ПрайсЛист = &ПрайсЛист", "ИСТИНА") + "
	|	И Основной.АртикулДляПоиска = &АртикулДляПоиска
	|	И (Основной.Производитель = &Производитель
	|			ИЛИ Основной.Производитель.Родитель = &ПроизводительРодитель)";
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЦен.Количество() > 0 Тогда
		
		Возврат ТаблицаЦен;
		
	ИначеЕсли ЗначениеЗаполнено(ПрайсЛист) И Не ПрайсЛист.ФайлИсточникДанных Тогда
		
		ЗаполнитьТаблицуЦенИзИсточникаДанных(ПрайсЛист, ТипЦен, ТаблицаЦен, Производитель);
		
	КонецЕсли;
	
	Возврат ТаблицаЦен;
	
КонецФункции // ПолучитьЦеныПоПрайсЛистуДляАртикула()

#КонецОбласти

Функция СформироватьОшибку(ТекстОшибки)
	
	Возврат ПрайсЛистыКонтрагентовКлиентСервер.СформироватьОшибку(ТекстОшибки);
	
КонецФункции

Функция СоставКолонокКорректен(ПрайсЛистКонтрагента, ПараметрыДействия)
	ЕстьОшибки = Ложь;
	
	Для каждого ПолеЗагрузки Из ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста Цикл
		Если ПустаяСтрока(ПолеЗагрузки.ИмяПоляФайла) Тогда
			Если ПолеЗагрузки.Ключевое Тогда
				ЕстьОшибки = Истина;
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указано Поле для реквизита <%1>, заданного как Ключ строки.'"), ПолеЗагрузки.ИмяРеквизитаПрайсЛиста);
				ПараметрыДействия.ЖурналЗагрузки.Примечание =
					ПараметрыДействия.ЖурналЗагрузки.Примечание + ?(НЕ ПустаяСтрока(ПараметрыДействия.ЖурналЗагрузки.Примечание), Символы.ПС, "") + ТекстСообщения;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// колонка может идентифицироваться только номером!
		Колонка_Источник = ПолеЗагрузки.ИмяПоляФайла;
		
		// попытаемся преобразовать в число
		Попытка
			Колонка_Источник = Число(Колонка_Источник);
		Исключение
			ЕстьОшибки = Истина;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Поле файла ''%1'', выбранное для реквизита <%2>, невозможно преобразовать в число.'"), Колонка_Источник, ПолеЗагрузки.ИмяРеквизитаПрайсЛиста);
			ПараметрыДействия.ЖурналЗагрузки.Примечание =
				ПараметрыДействия.ЖурналЗагрузки.Примечание + ?(НЕ ПустаяСтрока(ПараметрыДействия.ЖурналЗагрузки.Примечание), Символы.ПС, "") + ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Не ЕстьОшибки;
КонецФункции // СоставКолонокКорректен()

Функция СтруктурыПрайсаКорректна(ПрайсЛистКонтрагента, ПараметрыДействия)
	ЕстьОшибки = Ложь;
	
	МассивСтрок = ПрайсЛистКонтрагента.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста, Использовать", ПрайсЛистКонтрагента.ИмяТаблицы, Истина));
	Если МассивСтрок.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		ТекстСообщения = НСтр("ru = 'Не указана главная страница данных.'");
		ПараметрыДействия.ЖурналЗагрузки.Примечание =
			ПараметрыДействия.ЖурналЗагрузки.Примечание +
			?(НЕ ПустаяСтрока(ПараметрыДействия.ЖурналЗагрузки.Примечание), Символы.ПС, "") +
			ТекстСообщения;
	КонецЕсли;
	
	МассивСтрок = ПрайсЛистКонтрагента.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("Использовать", Истина));
	Если МассивСтрок.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		ТекстСообщения = НСтр("ru = 'Не указаны листы, с которых производится загрузка данных прайс-листа.'");
		ПараметрыДействия.ЖурналЗагрузки.Примечание =
			ПараметрыДействия.ЖурналЗагрузки.Примечание +
			?(НЕ ПустаяСтрока(ПараметрыДействия.ЖурналЗагрузки.Примечание), Символы.ПС, "") +
			ТекстСообщения;
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
КонецФункции // СтруктурыПрайсаКорректна()

Функция ТегиИПроизвидителиПрайсЛистаИзБазы(ПрайсЛист, ЗаполнитьТегами, ЗаполнитьПроизводителями)
	
	ПостроительЗапроса = Новый ПостроительЗапроса("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрайсЛистыКонтрагентов.ПрайсЛист КАК Прайслист
	|{
	|ВЫБРАТЬ
	|	ПрайсЛист КАК ПрайсЛист,
	|	Производитель КАК Производитель,
	|	ТегПозиции КАК ТегПозиции
	|}
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист");
	
	ПостроительЗапроса.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	
	Если ЗаполнитьТегами Тогда
		ПостроительЗапроса.ВыбранныеПоля.Добавить("ТегПозиции", "ТегПозиции");
	КонецЕсли;
	
	Если ЗаполнитьПроизводителями Тогда
		ПостроительЗапроса.ВыбранныеПоля.Добавить("Производитель", "Производитель");
	КонецЕсли;
	
	ПостроительЗапроса.Параметры.Вставить("ПрайсЛист", ПрайсЛист);
	ПостроительЗапроса.Выполнить();
	
	Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции

Функция ТегиИПроизвидителиПрайсЛистаИзИсточникаДанных(ПрайсЛист, ЗаполнитьТегами, ЗаполнитьПроизводителями)
	
	СоответствиеПолей = Новый Структура; ВыбранныеПоля = Новый Массив; ПоляСвертки = Новый Массив;
	СтруктураФайла = ПрайсЛист.СтруктураФайлаПрайсЛиста;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПрайсЛист", Новый ОписаниеТипов("СправочникСсылка.ПрайсЛистыКонтрагентов"));
	
	ПоляСвертки.Добавить("ПрайсЛист");
	
	Если ЗаполнитьТегами Тогда
		Результат.Колонки.Добавить("ТегПозиции", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
		
		СтрокаТега = СтруктураФайла.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "ТегПозиции"));
		СоответствиеПолей.Вставить(СтрокаТега[0].ИмяПоляФайла, "ТегПозиции");
		ВыбранныеПоля.Добавить(СтрокаТега[0].ИмяПоляФайла);
		ПоляСвертки.Добавить("ТегПозиции");
	КонецЕсли;
	
	Если ЗаполнитьПроизводителями Тогда
		Результат.Колонки.Добавить("Производитель", Новый ОписаниеТипов("СправочникСсылка.Производители"));
		
		СтрокаПроизводителя = СтруктураФайла.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "Производитель"));
		СоответствиеПолей.Вставить(СтрокаПроизводителя[0].ИмяПоляФайла, "Производитель");
		ВыбранныеПоля.Добавить(СтрокаПроизводителя[0].ИмяПоляФайла);
		ПоляСвертки.Добавить("Производитель");
	КонецЕсли;
	
	Попытка
		Connection = Новый COMОбъект("ADODB.Connection");
		Коннект = Connection.Open(ПрайсЛист.СтрокаПодключения);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось установить соединение с внешним источником данных.
			|Подронее в журнале регистрации.'"));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка соединения с внешним источником данных.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ПрайсЛист,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Результат;
	КонецПопытки;
	
	Command   = Новый  COMОбъект("ADODB.Command");
	Recordset = Новый  COMОбъект("ADODB.Recordset");
	Recordset.ActiveConnection = Connection;
	
	ИмяТаблицы = ПрайсЛист.ИмяТаблицы;
	
	ПервыйПараметр = Новый Массив;
	Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		ПервыйПараметр.Добавить(СтрШаблон("%1.[%2]", ИмяТаблицы, ВыбранноеПоле));
	КонецЦикла;
	ПервыйПараметр = СтрСоединить(ПервыйПараметр, ", ");
	
	ШаблонЗапроса = "SELECT DISTINCT %1 FROM %2";
	
	Command.CommandText = СтрШаблон(ШаблонЗапроса, ПервыйПараметр, ИмяТаблицы);
	Command.ActiveConnection = Connection;
	
	Попытка
		Recordset = Command.Execute();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось получить данные из внешнего источника.
			|Подронее в журнале регистрации.'"));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка соединения с внешним источником данных.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ПрайсЛист,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Результат;
	КонецПопытки;
	
	Пока НЕ Recordset.EOF Цикл
		ЗначенияПолей = Новый Структура;
		
		Для Каждого Field Из Recordset.Fields Цикл
			Если ЗначениеЗаполнено(Field.Value) И СоответствиеПолей[Field.Name] <> "Производитель" Тогда
				ЗначенияПолей.Вставить(СоответствиеПолей[Field.Name], Field.Value);
			ИначеЕсли ЗначениеЗаполнено(Field.Value) Тогда
				ЗначенияПолей.Вставить(СоответствиеПолей[Field.Name],
					Справочники.Производители.НайтиПроизводителяПоНаименованию(Field.Value));
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначенияПолей.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), ЗначенияПолей);
		КонецЕсли;
		
		RecordSet.MoveNext();
	КонецЦикла;
	
	Результат.Свернуть(СтрСоединить(ПоляСвертки, ","));
	Результат.ЗаполнитьЗначения(ПрайсЛист, "ПрайсЛист");
	
	Возврат Результат;
	
КонецФункции

Функция НайтиЗаданиеПоИдентификатору(Знач ИдентификаторЗадания)
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Возврат Задание;
	
КонецФункции

#КонецОбласти

#Область НовыеФункции

// Возвращает таблицу, содержащую данные из выбранного прайс-листа контрагентов для всего прайс-листа или указанной номенклатуры.
// Номенклатура СУЩЕСТВУЕТ в базе.
//
// Параметры:
//  ПрайсЛистКонтрагента - СправочникСсылка.ПрайсЛистыКонтрагентов - прайс, из которого получаем данные
//  СписокНоменклатуры  - Массив из СправочникСсылка.Номенклатура, Массив из Строка - (необязательный). Перечень
//  					номенклатуры,для которой получаются данные.
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные из прайслиста.
//
Функция ДанныеИзПрайсЛиста(ПрайсЛистКонтрагента, СписокНоменклатуры = Неопределено, ЗаполнитьНоменклатуройПоПрайсЛисту = Ложь) Экспорт
	
	ТаблицаЦен = ТаблицаЦенПрайслиста();
	Если (ПрайсЛистКонтрагента.ХранитьДанныеЛокально
		ИЛИ ПрайсЛистКонтрагента.ФайлИсточникДанных
		ИЛИ ПрайсЛистКонтрагента.ВидПрайсЛиста = Перечисления.ВидыПрайсЛистов.ВебПрайсЛист)
		И НЕ ПрайсЛистКонтрагента.ВидПрайсЛиста = Перечисления.ВидыПрайсЛистов.КаталогПредложений Тогда
		// Проверим есть ли загруженный ПЛ
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрайсЛистыКонтрагентов.ПрайсЛист
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
		|ГДЕ
		|	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист";
		Запрос.УстановитьПараметр("ПрайсЛист",ПрайсЛистКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Возврат ТаблицаЦен;
		КонецЕсли;
		
		// Грузим из регистра
		Запрос=Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Спр.Ссылка КАК Номенклатура,
		|	ПрайсЛистыКонтрагентов.Цена КАК Цена,
		|	ПрайсЛистыКонтрагентов.Валюта КАК Валюта,
		|	ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика КАК КлючСтрокиПоставщика,
		|	ПрайсЛистыКонтрагентов.ТегПозиции КАК ТегПозиции,
		|	ПрайсЛистыКонтрагентов.Производитель КАК Производитель
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Спр
		|		ПО ПрайсЛистыКонтрагентов.АртикулДляПоиска = Спр.АртикулДляПоиска
		|			И ПрайсЛистыКонтрагентов.Производитель = Спр.Производитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи КАК НедоступныеЗаписи
		|		ПО ПрайсЛистыКонтрагентов.ПрайсЛист = НедоступныеЗаписи.ПрайсЛист
		|			И ПрайсЛистыКонтрагентов.ДатаЗаписи = НедоступныеЗаписи.ДатаЗаписи
		|ГДЕ
		|	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист
		|	И ПрайсЛистыКонтрагентов.АртикулДляПоиска <> """"
		|	И НедоступныеЗаписи.ПрайсЛист ЕСТЬ NULL 
		|	"+?(ЗаполнитьНоменклатуройПоПрайсЛисту, "", "И Спр.Ссылка В (&Товары)")+"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Номенклатура),
		|	ПрайсЛистыКонтрагентов.Цена,
		|	ПрайсЛистыКонтрагентов.Валюта,
		|	ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика КАК КлючСтрокиПоставщика,
		|	ПрайсЛистыКонтрагентов.ТегПозиции КАК ТегПозиции,
		|	ПрайсЛистыКонтрагентов.Производитель КАК Производитель
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
		|		ПО (ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика = (ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(32))))
		|			И (ПрайсЛистыКонтрагентов.ПрайсЛист = ПравилаЗагрузки.ПрайсЛист)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи КАК НедоступныеЗаписи
		|		ПО (ПрайсЛистыКонтрагентов.ПрайсЛист = НедоступныеЗаписи.ПрайсЛист)
		|			И (ПрайсЛистыКонтрагентов.ДатаЗаписи = НедоступныеЗаписи.ДатаЗаписи)
		|ГДЕ
		|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
		|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
		|	И ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста = ""Номенклатура""
		|	И ПравилаЗагрузки.Значение ССЫЛКА Справочник.Номенклатура
		|	"+?(ЗаполнитьНоменклатуройПоПрайсЛисту, "", "И ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Номенклатура).Ссылка В (&Товары)")+"
		|	И НедоступныеЗаписи.ПрайсЛист ЕСТЬ NULL 
		|";
		
		Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛистКонтрагента);
		Если Не ЗаполнитьНоменклатуройПоПрайсЛисту Тогда
			Запрос.УстановитьПараметр("Товары", СписокНоменклатуры);
		КонецЕсли;
		
		ТаблицаЦен = Запрос.Выполнить().Выгрузить();
		
		// возможно засунуть в запрос
		Если ПрайсЛистКонтрагента.ЦенаВключаетНДС Тогда
			СтавкаНДС = ПрайсЛистКонтрагента.СтавкаНДС;
			Для Каждого Строка Из ТаблицаЦен Цикл
				Строка.Цена = Окр(Строка.Цена / (1 + СтавкаНДС.Ставка / 100), 2, РежимОкругления.Окр15как10);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		ЗаполнитьТаблицуЦенИзИсточникаДанных(ПрайсЛистКонтрагента, ТаблицаЦен, СписокНоменклатуры);
	КонецЕсли;
	
	Возврат ТаблицаЦен;
	
КонецФункции

Функция ТаблицаЦенПрайсЛиста()
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого Реквизит Из Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентов.Измерения Цикл
		Результат.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентов.Ресурсы Цикл
		Результат.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные.РегистрыСведений.ПрайсЛистыКонтрагентов.Реквизиты Цикл
		Результат.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
