//////////////////////////////////////////////////////////////////////////////
// Модуль для работы с блоком документов "Заказ-наряд", "Заявка на ремонт", //
// "Сводный ремонтный заказ", "Запись на ремонт" //                         //
//////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет настройки запуска приложения перед началом работы системы.
//  1. Устанавливает режим основного окна в зависимости от установленного права "РаботатьВРежимеРабочегоСтола".
//     При установленном праве режим окна устанавливается "ПолноэкранноеРабочееМесто".
//
Процедура ПередНачаломРаботыСистемы() Экспорт
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		
		ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
		
		Если ПараметрыКлиента.Свойство("АвторизованныйПользователь") И ЗначениеЗаполнено(ПараметрыКлиента.АвторизованныйПользователь) Тогда
			
			АвтосервисВызовСервера.УстановитьСоставФормНачальнойСтраницы();
			ТекстПредупреждения = "";
			Если АвтосервисВызовСервера.ЗапускатьВРежимеРабочегоСтола(ТекстПредупреждения) Тогда	
				КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.ПолноэкранноеРабочееМесто);	
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстПредупреждения) Тогда 
				ПоказатьПредупреждение(, ТекстПредупреждения);
			КонецЕсли;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

#Область ОтправкаУведомлений

// Производим открытие формы документа сообщения SMS
//
// Параметры:
//  Документ - ДокументСсылка	 - Предмет сообщения SMS.
//  Шаблон	 - Строка			 - Имя шаблона для выгрузки сообщения.
//
Процедура ОткрытьДокументСообщенияSMS(Документ, Шаблон) Экспорт
	
	Результат = АвтосервисВызовСервера.ПараметрыСообщения(Документ, Шаблон);
	
	Если НЕ Результат.ИспользоватьПрочиеВзаимодействия Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСообщения = Новый Структура;
	
	ПараметрыСообщения.Вставить("Адресаты", Результат.Получатель);
	ПараметрыСообщения.Вставить("Текст", Результат.Текст);
	ПараметрыСообщения.Вставить("Предмет", Документ);
	ПараметрыСообщения.Вставить("ОтправлятьВТранслите", Результат.ДополнительныеПараметры.ПеревестиВТранслит);
	
	ОткрытьФорму("Документ.СообщениеSMS.Форма.ФормаДокумента", ПараметрыСообщения);
	
КонецПроцедуры // ОткрытьДокументСообщенияSMS()

#КонецОбласти

#Область Исполнители

// Производим открытие формы подбора исполнителей
//
// Параметры:
//  Объект              - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ИдентификаторРаботы - Строка - Уникальный идентификатор работы.
//  Исполнители         - Строка - Содержит адрес во временном хранилище.
//  Форма               - УправляемаяФорма - Форма, в которой возникло событие.
//  Документ            - ДокументСсылка.ЗаказНаряд - Документ основание.
//
Процедура НачатьПодборИсполнителей(Объект, ИдентификаторРаботы, Исполнители, Форма, Документ = Неопределено) Экспорт
	
	Если НЕ ЭтоАдресВременногоХранилища(Исполнители) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиАвтоработы     = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
	ИдентификаторПричины = СтрокиАвтоработы[0].ИдентификаторПричиныОбращения;
	ПричинаОбращения = Объект.ПричиныОбращения.НайтиСтроки(Новый Структура(
											"ИдентификаторПричиныОбращения", 
											ИдентификаторПричины));
	ИспользоватьПричиныОбращений = Форма.ИспользоватьПричиныОбращений И ПричинаОбращения.Количество() > 0;
	
	ИсполнителиОдинаковыеВРамкахПричины = ?(ИспользоватьПричиныОбращений, 
		ПричинаОбращения[0].ИсполнителиОдинаковыеВРамкахПричины,
		Ложь);
	
	ПараметрыРасчетаНачислений = ПараметрыРасчетаНачисленийАвтоработы(Объект, ИдентификаторРаботы);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("РежимВыбора"                       , Истина);
	ПараметрыОткрытия.Вставить("Цех"                               , Объект.Цех);
	ПараметрыОткрытия.Вставить("ИдентификаторРаботы"                , ИдентификаторРаботы);
	ПараметрыОткрытия.Вставить("ЗапрашиватьПроцентУчастия"          , Неопределено);
	ПараметрыОткрытия.Вставить("АвтоматическийПроцентУчастия"       , Неопределено);
	ПараметрыОткрытия.Вставить("ИсполнителиОдинаковыеДляВсехРабот"  , Объект.ИсполнителиОдинаковыеДляВсехРабот);
	ПараметрыОткрытия.Вставить("ИспользоватьПричиныОбращений"       , ИспользоватьПричиныОбращений);
	ПараметрыОткрытия.Вставить("ИсполнителиОдинаковыеВРамкахПричины", ИсполнителиОдинаковыеВРамкахПричины);
	ПараметрыОткрытия.Вставить("ИдентификаторВладельца"             , Форма.УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("ЗаказНаряд"                         , Документ);
	ПараметрыОткрытия.Вставить("АдресИсполнителей"                  , Исполнители);
	ПараметрыОткрытия.Вставить("ПараметрыРасчетаНачислений"         , ПараметрыРасчетаНачислений);
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "ПодборИсполнителей");
	
	ОткрытьФорму("Документ.ЗаказНаряд.Форма.ФормаИсполнителей", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеКомпании

// Процедура - Получить разрешения для заполнения по сервисной компании
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Параметры - Структура        - Дополнительные параметры обработки.
//
Процедура ПолучитьРазрешенияДляЗаполненияПоСервиснойКомпании(Форма, Параметры) Экспорт
	
	ТребуетсяУстановкаВидаРемонта = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТребуетсяУстановкаВидаРемонта",
		Ложь);
	
	ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании = ПолучитьЗначениеПараметраСтруктуры(Параметры,
		"ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании", Ложь);
	
	ЗадаватьВопросОбОчисткеТабличныхЧастей = ПолучитьЗначениеПараметраСтруктуры(Параметры,
		"ЗадаватьВопросОбОчисткеТабличныхЧастей", Ложь);
	
	Если ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании ИЛИ ТребуетсяУстановкаВидаРемонта
		ИЛИ ЗадаватьВопросОбОчисткеТабличныхЧастей Тогда
		
		ПараметрыВопросов = Новый Структура;
		КоллекцияОпераций = Новый Структура;
		
		Если ТребуетсяУстановкаВидаРемонта Тогда
			Параметры.ТребуетсяУстановкаВидаРемонта = Ложь;
			
			ТекстВопроса = НСтр("ru = 'Установить вид ремонта из сервисной компании?'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("ДА"  , "Да");
			Кнопки.Добавить("НЕТ" , "Нет");
			
			ПоследовательныеОперацииКлиентСервер.ДобавитьВопрос(КоллекцияОпераций, 
								"ТребуетсяУстановкаВидаРемонта", ТекстВопроса, Кнопки);
		КонецЕсли;
		
		Если ЗадаватьВопросОбОчисткеТабличныхЧастей Тогда
			ТекстВопроса = НСтр("ru = 'Выполнить очистку табличных частей перед заполнением по сервисной кампании?'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("ДА"  , "Да");
			Кнопки.Добавить("НЕТ" , "Нет");
			
			ПоследовательныеОперацииКлиентСервер.ДобавитьВопрос(КоллекцияОпераций,
				"ЗадаватьВопросОбОчисткеТабличныхЧастей", ТекстВопроса, Кнопки);
		КонецЕсли;
		
		ОбработчикСобытия = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма,
			"ЗаполнениеПоСервиснойКомпании");
		
		ПараметрыВопросов.Вставить("КоллекцияОпераций", КоллекцияОпераций);
		ПараметрыВопросов.Вставить("ПараметрыДействия", Параметры);
		ПараметрыВопросов.Вставить("ОбработчикСобытия", ОбработчикСобытия);
		
		ПоследовательныеОперацииКлиент.ВыполнитьПоследовательно(ПараметрыВопросов);
	КонецЕсли;
	
КонецПроцедуры

// Форма выбора сервисной компании с указанными параметрами.
//
// Параметры:
//  Форма      - УправляемаяФорма            - Форма, в которой возникло событие.
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль сервисной кампании.
//
Процедура ОткрытьФормуВыбораСервиснойКомпании(Форма, Автомобиль) Экспорт
	
	Если ТипЗнч(Автомобиль) = Тип("СправочникСсылка.Автомобили") И ЗначениеЗаполнено(Автомобиль) Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль,ТолькоАктуальные,РежимПодбора", Автомобиль, Истина, Истина);
		
		Параметры = Новый Структура("Событие", "ВыборСервиснойКомпании");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, Параметры);
		
		ОткрытьФорму("РегистрСведений.ВыполнениеСервисныхКампаний.Форма.СервисныеКампанииАвтомобиля", ПараметрыОткрытия,
			ЭтотОбъект, ЭтотОбъект,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзВнешнихКаталогов

// Вызов формы загрузки данных из внешних каталогов
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - Форма, в которой возникло событие.
//  ПараметрыЗагрузки		 - Структура		 - Дополнительные параметры обработки.
//  ДополнительныеПараметры	 - Структура		 - Параметры для обработки результата.
//
Процедура ЗагрузкаИзВнешнихКаталогов(Форма, ПараметрыЗагрузки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Событие", "ЗагрузкаИзВнешнихКаталогов");
	Оповещение = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения", Форма, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаИзВнешнихКаталогов.Форма",
		ПараметрыЗагрузки,
		Форма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ЗагрузкаИзВнешнихКаталогов()

#КонецОбласти

#Область НачисленияСотрудникам

// Получение параметров настройки начислений сотрудников.
//
// Параметры:
//  ЗаказНаряд		 - ДокументСсылка.ЗаказНаряд - Документ, для которого выполняется заполнение.
//  ИдентификаторРаботы - ДанныеФормыЭлементКоллекции - Строка табличной части документа "Автоработы".
// 
// Возвращаемое значение:
//  Структура - Данные для расчета суммы начислений сотрудникам.
//
Функция ПараметрыРасчетаНачисленийАвтоработы(ЗаказНаряд, ИдентификаторРаботы) Экспорт
	
	СтруктураДокумента = Новый Структура();
	СтруктураДокумента.Вставить("Дата", ЗаказНаряд.Дата);
	СтруктураДокумента.Вставить("Организация", ЗаказНаряд.Организация);
	СтруктураДокумента.Вставить("ВалютаДокумента", ЗаказНаряд.ВалютаДокумента);
	СтруктураДокумента.Вставить("КурсДокумента", ЗаказНаряд.КурсДокумента);
	
	СтрокиАвтоработы = ЗаказНаряд.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
	ДанныеАвтоработы = Новый Структура();
	ДанныеАвтоработы.Вставить("ИдентификаторРаботы", ИдентификаторРаботы);
	ДанныеАвтоработы.Вставить("Коэффициент", СтрокиАвтоработы[0].Коэффициент);
	ДанныеАвтоработы.Вставить("Количество", СтрокиАвтоработы[0].Количество);
	ДанныеАвтоработы.Вставить("СуммаВсего", СтрокиАвтоработы[0].СуммаВсего);
	ДанныеАвтоработы.Вставить("СуммаНДС", СтрокиАвтоработы[0].СуммаНДС);
	
	Возврат АвтосервисВызовСервера.ПараметрыРасчетаНачисленийАвтоработы(СтруктураДокумента, ДанныеАвтоработы);
	
КонецФункции

#КонецОбласти

#Область РасчетПоказателейЗапасов

// Обновление показателей запасов на форме заказ-наряда
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - Форма, в которой возникло событие.
//  ПоказателиЗапасов		 - Структура		 - параметры обработки события.
//
&НаКлиенте
Процедура ОбновитьПоказателиНаФорме(Форма, ПоказателиЗапасов) Экспорт
	
	Для Каждого Показатель Из ПоказателиЗапасов Цикл
		
		НайденныеСтроки = Форма.Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", Показатель.НомерСтроки));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		Иначе
			Строка = НайденныеСтроки[0];
		КонецЕсли;
		
		Коэффициент         = ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
		ОстатокНаСкладе     = Показатель.ОстатокНаСкладе;
		Заказано            = Показатель.Заказано;
		Зарезервировано     = Показатель.Зарезервировано;
		ВПроизводстве       = Показатель.ВПроизводстве;
		ОсталосьПереместить = Показатель.ОсталосьПереместить;
		ВозможноПереместить = Показатель.ВозможноПереместить;
		
		Строка.ОстатокНаСкладе     = ОстатокНаСкладе;
		Строка.ВПроизводстве       = ВПроизводстве/Коэффициент;
		Строка.Заказано            = Заказано/Коэффициент;
		Строка.ВРезерве            = Зарезервировано/Коэффициент;
		Строка.ОсталосьПереместить = ОсталосьПереместить/Коэффициент;
		Строка.ВозможноПереместить = ВозможноПереместить/Коэффициент;
		
	КонецЦикла;
	
	Если НЕ Форма.Элементы.ТоварыПодсветка.Пометка Тогда
		
		Для Каждого СтрокаТоваров Из Форма.Объект.Товары Цикл
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "стандарт";
			
		КонецЦикла;
		
		// После установки стандарных значений цветов раскраски далее ничего производить не нужно
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из Форма.Объект.Товары Цикл
		
		Если СтрокаТоваров.ОсталосьПереместить = 0 Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "ПолностьюОтгружена";
			
		ИначеЕсли СтрокаТоваров.ОсталосьПереместить <= СтрокаТоваров.ВозможноПереместить Тогда
			
			Если СтрокаТоваров.ВРезерве >= СтрокаТоваров.ОсталосьПереместить Тогда
				
				СтрокаТоваров.ЦветРаскраскиСтроки = "ПолученаПоЗаказуКлиента";
				
			Иначе
				
				СтрокаТоваров.ЦветРаскраскиСтроки = "ИмеетсяНаСкладе";
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТоваров.ОсталосьПереместить <= (СтрокаТоваров.Заказано+СтрокаТоваров.ВозможноПереместить) Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "РаспределенаУПоставщика";
			
		Иначе
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "ТребуетсяЗаказать";
			
		КонецЕсли;
		
	КонецЦикла;		
	
КонецПроцедуры

// Обновление показателей запасов на форме заявки на ремонт
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - Форма, в которой возникло событие.
//  ПоказателиЗапасов		 - Структура		 - параметры обработки события.
//
&НаКлиенте
Процедура ОбновитьПоказателиНаФормеЗаявка(Форма, ПоказателиЗапасов) Экспорт
	
	Для Каждого Показатель Из ПоказателиЗапасов Цикл
		
		НайденныеСтроки = Форма.Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", Показатель.НомерСтроки));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		Иначе
			Строка = НайденныеСтроки[0];
		КонецЕсли;
		Коэффициент     = ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
		ОстатокНаСкладе = ?(Показатель.ОстатокНаСкладе <> 0, Показатель.ОстатокНаСкладе, Показатель.КоличествоОстаток);
		Заказано        = ?(Показатель.Заказано <> 0, Показатель.Заказано, Показатель.ЗаказаноПодЗнР);
		Зарезервировано = ?(Показатель.Зарезервировано <> 0, Показатель.Зарезервировано, Показатель.ЗарезервированоПодЗнР);
		
		Строка.ОстатокНаСкладе = ОстатокНаСкладе;
		Строка.Заказано        = Заказано/Коэффициент;
		Строка.ВРезерве = Зарезервировано/Коэффициент;
		
	КонецЦикла;
	
		
	СброситьРаскраску = (Форма.ЕстьВыполненныеЗаказНаряды ИЛИ НЕ Форма.Элементы.ТоварыПодсветка.Пометка
		ИЛИ Форма.Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостояниеЗаявкиНаРемонт.Отклонено"));
		
	Для Каждого СтрокаТоваров Из Форма.Объект.Товары Цикл
		
		Если СброситьРаскраску Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "стандартный";
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаТоваров.Количество <= СтрокаТоваров.ВРезерве Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "ПолученаПоЗаказуКлиента";
			
		ИначеЕсли СтрокаТоваров.Количество <= СтрокаТоваров.ОстатокНаСкладе Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "ИмеетсяНаСкладе";
			
		ИначеЕсли СтрокаТоваров.Количество <= (СтрокаТоваров.Заказано + СтрокаТоваров.ОстатокНаСкладе) Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "РаспределенаУПоставщика";
			
		Иначе
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "ТребуетсяЗаказать";
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

#Область ИнтервьюКонтрагента

// Обработчик команды начала интервью контрагента из документа.
//
// Параметры:
//  Документ  - ДокументСсылка - Документ, на основании которого вызвано интерью.
//  ДополнительныеПараметры  - Структура - Дополнительные параметры.
//
Процедура НачатьИнтервьюПоДокументу(Документ, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Документ должен быть записан перед началом интервью.'"), 60);
		Возврат;
		
	КонецЕсли;
	
	Респондент = АвтосервисВызовСервера.РеспондентДокумента(Документ);
	
	Если Не ЗначениеЗаполнено(Респондент) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Для проведения интервью необходимо заполнить заказчика.'"), 60);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Респондент,РежимАнкетирования,ДокументОснование");
	ПараметрыФормы.Респондент 			= Респондент;
	ПараметрыФормы.РежимАнкетирования 	= ПредопределенноеЗначение("Перечисление.РежимыАнкетирования.Интервью");
	ПараметрыФормы.ДокументОснование 	= Документ;
	
	ОткрытьФорму(
		"Обработка.ДоступныеАнкеты.Форма.Форма",
		ПараметрыФормы,
		ДополнительныеПараметры.Источник,
		ДополнительныеПараметры.Уникальность,
		ДополнительныеПараметры.Окно,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // НачатьИнтервьюПоДокументу()

#КонецОбласти

// Формирует параметры для дальнейшей обработки событий.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой произошло событие;
//  ПараметрыДействия - Структура - Набор параметров, использующихся для выполнения операции;
//  КоллекцияОпераций - Структура - (необязательный) Список последовательных операций;
//  ОбработчикСобытия - ОписаниеОповещения - (необязательный) Обработчик результата операции;
//  Объект - ДокументОбъект - (необязательный) объект, в котором произошло событие.
//
Процедура ПолучитьРазрешенияДляПересчета(Форма, ПараметрыДействия, КоллекцияОпераций = Неопределено,
	ОбработчикСобытия = Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Получаем статус заполнения объекта из параметров действия
	ОбъектЗаполнен             = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", Истина);
	ОбъектЗаполненАвтоработами = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполненАвтоработами");
	
	// Получаем признаки необходимости произвести пересчет
	ВозможенПересчетСуммы = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПересчетСуммы", Истина);
	ТребуетсяИзменитьКурс = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяИзменитьКурс", Ложь);
	ТребуетсяУстановкаЦен = ОбъектЗаполнен
		И ВозможенПересчетСуммы 
		И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяУстановкаЦенРабот = ?(ОбъектЗаполненАвтоработами = Неопределено, ОбъектЗаполнен, ОбъектЗаполненАвтоработами)
		И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦенРабот", Ложь);
	ТребуетсяПересчетЦен =
		(ОбъектЗаполнен ИЛИ ?(ОбъектЗаполненАвтоработами = Неопределено, Ложь, ОбъектЗаполненАвтоработами))
		И ВозможенПересчетСуммы
		И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	ТребуетсяЗаполнитьНаОсновании =
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяЗаполнитьНаОсновании", Ложь);
	
	// Иницализируем коллекцию вопросов
	Если КоллекцияОпераций=Неопределено Тогда
		КоллекцияОпераций = Новый Структура();
	КонецЕсли;
	
	// Формируем комплект параметров, который будет передаваться между формами
	ПараметрыВопросов = Новый Структура();
	
	// Добавляем вопрос перезаполнение документа по основанию
	Если ТребуетсяЗаполнитьНаОсновании Тогда
		ТребуетсяЗаполнитьНаОсновании = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОтветаНаВопросТребуетсяЗаполнитьНаОсновании",
			АвтосервисКлиент,
			ПараметрыВопросов
		);
		ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(
			КоллекцияОпераций,
			"ТребуетсяЗаполнитьНаОсновании",
			НСтр("ru = 'Был изменен документ основание." + Символы.ПС + "Выполнить перезаполнение?'"),
			,
			,
			ТребуетсяЗаполнитьНаОсновании
		);
	КонецЕсли;
	
	// Добавляем вопрос о перезаполнении цен
	Если ТребуетсяИзменитьКурс Тогда
		// Получим новые значения курсов валют
		КурсВалютыДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыйКурс",               0);
		КурсУправленческий  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыйКурсУпр",            0);
		КурсВзаиморасчетов  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыйКурсВзаиморасчетов", 0);
		
		ТекстВопроса = "";
		ТекстОбъекта = НСтр("ru='Изменить курс'");
		
		Если КурсВалютыДокумента > 0 Тогда
			ТекстВопроса = ТекстВопроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Валюта документа <%1> на дату %2 имеет курс %3, отличный от курса в документе %4.'"),
				Объект.ВалютаДокумента, Формат(Объект.Дата,"ДФ=""dd.MM.yyyy"""),
				Формат(КурсВалютыДокумента,"ЧЦ=10; ЧДЦ=4"), Формат(Объект.КурсДокумента,"ЧЦ=10; ЧДЦ=4")) + Символы.ПС;
				
			ТекстОбъекта = ТекстОбъекта + ?(ПустаяСтрока(ТекстОбъекта), "", ",") + НСтр("ru=' документа'");
		КонецЕсли;
		
		Если КурсУправленческий > 0 Тогда
			ТекстВопроса = ТекстВопроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Курс валюты управленческого учета на дату %1 имеет курс %2, отличный от курса в документе %3.'"),
				Формат(Объект.Дата,"ДФ=""dd.MM.yyyy"""), Формат(КурсУправленческий, "ЧЦ=10; ЧДЦ=4"),
				Формат(Объект.КурсВалютыУпр, "ЧЦ=10; ЧДЦ=4")) + Символы.ПС;
			
			ТекстОбъекта = ТекстОбъекта + ?(ПустаяСтрока(ТекстОбъекта), "", ",") + НСтр("ru=' валюты управленческого учета'");
		КонецЕсли;
		
		Если КурсВзаиморасчетов > 0 Тогда
			ТекстВопроса = ТекстВопроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Курс валюты взаиморасчетов на дату %1 имеет курс %2, отличный от курса в документе %3.'"),
				Формат(Объект.Дата,"ДФ=""dd.MM.yyyy"""), Формат(КурсВзаиморасчетов, "ЧЦ=10; ЧДЦ=4"),
				Формат(Объект.КурсВалютыВзаиморасчетов, "ЧЦ=10; ЧДЦ=4")) + Символы.ПС;
			
			ТекстОбъекта = ТекстОбъекта + ?(ПустаяСтрока(ТекстОбъекта), "", ",") + НСтр("ru=' валюты взаиморасчетов'");
		КонецЕсли;
		
		// Производим добавление вопроса в очередь
		Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
			ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(
				КоллекцияОпераций,
				"ТребуетсяИзменитьКурс",
				ТекстВопроса + ТекстОбъекта + "?"
			);
			
			Если НЕ Форма.РазрешитьРедактированиеЦенИСумм Тогда
				КоллекцияОпераций.ТребуетсяИзменитьКурс.Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем вопрос о перезаполнении цен
	Если ТребуетсяУстановкаЦен Тогда
		ОбработчикТребуетсяУстановкаЦен = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОтветаНаВопросТребуетсяУстановкаЦен",
			АвтосервисКлиент,
			ПараметрыВопросов
		);
		
		ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(
			КоллекцияОпераций,
			"ТребуетсяУстановкаЦен",
			НСтр("ru='Были изменены данные, влияющие на цены номенклатурных позиций." + Символы.ПС + "Перезаполнить цены?'"),
			,
			,
			ОбработчикТребуетсяУстановкаЦен
		);
		
		Если НЕ Форма.РазрешитьРедактированиеЦенИСумм Тогда
			КоллекцияОпераций.ТребуетсяУстановкаЦен.Результат = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Если ТребуетсяУстановкаЦенРабот И НЕ ТребуетсяУстановкаЦен Тогда
		ОбработчикТребуетсяУстановкаЦенАвторабот = Новый ОписаниеОповещения(
			"ОбработкаРезультатаОтветаНаВопросТребуетсяУстановкаЦенАвторабот",
			АвтосервисКлиент,
			ПараметрыВопросов
		);
		
		ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(
			КоллекцияОпераций,
			"ТребуетсяУстановкаЦенРабот",
			НСтр("ru='Были изменены данные, влияющие на цены авторабот." + Символы.ПС + "Перезаполнить цены?'"),
			,
			,
			ОбработчикТребуетсяУстановкаЦенАвторабот
		);
		
		Если НЕ Форма.РазрешитьРедактированиеЦенИСумм Тогда
			КоллекцияОпераций.ТребуетсяУстановкаЦенРабот.Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем вопрос пересчета суммовых показателей
	Если ТребуетсяПересчетЦен Тогда
		ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(
			КоллекцияОпераций,
			"ТребуетсяПересчетЦен",
			НСтр("ru = 'Были изменены данные, влияющие на суммовые показатели документа." + Символы.ПС + "Выполнить пересчет?'")
		);
		
		Если НЕ Форма.РазрешитьРедактированиеЦенИСумм Тогда
			КоллекцияОпераций.ТребуетсяПересчетЦен.Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Производим финальную проверку целесообразности дальнейших действий
	Если КоллекцияОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Иницализируем обработчик результата всех опросов
	Если ОбработчикСобытия = Неопределено Тогда
		ОбработчикСобытия = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			Форма,
			"РазрешенияДляПересчета"
		);
	КонецЕсли;
	
	// Набиваем коллекцию параметров значениями
	ПараметрыВопросов.Вставить("КоллекцияОпераций", КоллекцияОпераций);
	ПараметрыВопросов.Вставить("ПараметрыДействия", ПараметрыДействия);
	ПараметрыВопросов.Вставить("ТребуетсяПересчет", Ложь);
	ПараметрыВопросов.Вставить("ОбработчикСобытия", ОбработчикСобытия);
	
	// Вызываем служебную процедуру для организации последовательного опроса пользователя
	ПоследовательныеОперацииКлиент.ВыполнитьПоследовательно(ПараметрыВопросов);
	
КонецПроцедуры

// Формирует вопрос о создании счет-фактуры выданный из заказ-наряда
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой произошло событие;
//  ЗаказНаряд - ДокументСсылка.ЗаказНаряд - Документ, на основании которого создается счет-фактура.
//
Процедура ВопросСозданияСчетФактурыЗаказНаряда(Форма, ЗаказНаряд) Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Основание", ЗаказНаряд);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОбработкаРезультатаОтветаНаВопросВводаСчетаФактуры",
		АвтосервисКлиент,
		ДополнительныеПараметры);
	
	ПоказатьВопрос(
		ОбработчикОповещения,
		НСтр("ru = 'Заказ-наряд не закрыт. Продолжить создание счет-фактуры выданной?'"),
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Нет,
		НСтр("ru = 'Создание счет-фактуры выданной'"));
	
КонецПроцедуры // ВопросСозданияСчетФактурыЗаказНаряда()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Служебная процедура. Используется для перехвата ответа пользователя на вопрос о установке новых цен.
//
// Параметры:
//  КодОтвета         - КодВозвратаДиалога - Ответ, который дал пользователь на очередной вопрос
//  ПараметрыВопросов - Структура          - Коллекция содержащая набор вопросов и прочие параметры обработки
//
Процедура ОбработкаРезультатаОтветаНаВопросТребуетсяУстановкаЦен(КодОтветаДа, ПараметрыВопросов) Экспорт
	
	Если ПараметрыВопросов.КоллекцияОпераций.Свойство("ТребуетсяУстановкаЦенРабот") Тогда
		ПараметрыВопросов.КоллекцияОпераций["ТребуетсяУстановкаЦенРабот"].Результат = КодОтветаДа;
	КонецЕсли;
	
	// В случае если пользователь хочет полностью переустановить цены на все позиции, пересчет сумм не требуется
	Если КодОтветаДа И ПараметрыВопросов.КоллекцияОпераций.Свойство("ТребуетсяПересчетЦен") Тогда
		ПараметрыВопросов.КоллекцияОпераций["ТребуетсяПересчетЦен"].Результат = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОтветаНаВопросТребуетсяУстановкаЦен()

// Служебная процедура. Используется для перехвата ответа пользователя на вопрос о установке новых цен.
//
// Пааметры:
//  КодОтвета         - КодВозвратаДиалога - Ответ, который дал пользователь на очередной вопрос
//  ПараметрыВопросов - Структура          - Коллекция содержащая набор вопросов и прочие параметры обработки
//
Процедура ОбработкаРезультатаОтветаНаВопросТребуетсяУстановкаЦенАвторабот(КодОтветаДа, ПараметрыВопросов) Экспорт
	
	// В случае если пользователь хочет полностью переустановить цены на все позиции, пересчет сумм не требуется
	Если КодОтветаДа И ПараметрыВопросов.КоллекцияОпераций.Свойство("ТребуетсяПересчетЦен") Тогда
		ПараметрыВопросов.КоллекцияОпераций["ТребуетсяПересчетЦен"].Результат = НЕ ПараметрыВопросов.КоллекцияОпераций.Свойство("ТребуетсяУстановкаЦен");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОтветаНаВопросТребуетсяУстановкаЦен()

// Служебная процедура. Используется для перехвата ответа пользователя на вопрос о установке новых цен.
//
// Пааметры:
//  КодОтвета         - КодВозвратаДиалога - Ответ, который дал пользователь на очередной вопрос
//  ПараметрыВопросов - Структура          - Коллекция содержащая набор вопросов и прочие параметры обработки
//
Процедура ОбработкаРезультатаОтветаНаВопросТребуетсяЗаполнитьНаОсновании(КодОтветаДа, ПараметрыВопросов) Экспорт
	
	// В случае если пользователь хочет полностью перезаполнить документ, то другие изменения будут не актуальны
	Если КодОтветаДа И ПараметрыВопросов.КоллекцияОпераций.Свойство("ТребуетсяЗаполнитьНаОсновании") Тогда
		Если ПараметрыВопросов.КоллекцияОпераций.Свойство("ТребуетсяИзменитьКурс") Тогда
			ПараметрыВопросов.КоллекцияОпераций.ТребуетсяИзменитьКурс.Результат = ЛОЖЬ;
		КонецЕсли;
		
		Если ПараметрыВопросов.КоллекцияОпераций.Свойство("ТребуетсяПересчетЦен") Тогда
			ПараметрыВопросов.КоллекцияОпераций.ТребуетсяПересчетЦен.Результат = ЛОЖЬ;
		КонецЕсли;
		
		Если ПараметрыВопросов.КоллекцияОпераций.Свойство("ТребуетсяУстановкаЦен") Тогда
			ПараметрыВопросов.КоллекцияОпераций.ТребуетсяУстановкаЦен.Результат = ЛОЖЬ;
		КонецЕсли;
		
		Если ПараметрыВопросов.КоллекцияОпераций.Свойство("ТребуетсяУстановкаЦен") Тогда
			ПараметрыВопросов.КоллекцияОпераций.ТребуетсяУстановкаЦен.Результат = ЛОЖЬ;
		КонецЕсли;
		
		Если ПараметрыВопросов.КоллекцияОпераций.Свойство("ТребуетсяУстановкаЦенРабот") Тогда
			ПараметрыВопросов.КоллекцияОпераций.ТребуетсяУстановкаЦенРабот.Результат = ЛОЖЬ;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОтветаНаВопросТребуетсяЗаполнитьНаОсновании()

// Используется для перехвата ответа пользователя на вопрос о создании счета-фактуры по заказ-наряду.
//
// Пааметры:
//  КодОтвета         - КодВозвратаДиалога - Ответ, который дал пользователь на очередной вопрос
//  ПараметрыВопросов - Структура          - Коллекция содержащая набор вопросов и прочие параметры обработки
//
Процедура ОбработкаРезультатаОтветаНаВопросВводаСчетаФактуры(КодОтвета, ПараметрыВопросов) Экспорт
	
	Если КодОтвета <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.СчетФактураВыданный.ФормаОбъекта",
		ПараметрыВопросов.ПараметрыОткрытия,
		ПараметрыВопросов.Форма);
	
КонецПроцедуры // ОбработкаРезультатаОтветаНаВопросВводаСчетаФактуры()

#КонецОбласти

