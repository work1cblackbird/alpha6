
#Область СлужебныеПроцедурыИФункции

// Получение ТЗ описывающую полную таблицу графика
//
// Параметры:
//  График           - ТаблицаЗначений - График по которому вычисляется продолжительность
//  НачалоГрафика    - Дата            - Дата начала вычисления продолжительности
//  ОкончаниеГрафика - Дата            - Дата окончания вычисления продолжительности
//  ВидыИнтервалов   - Массив          - Массив либо элемент перечисления вид интервала,
//                                       для которого вычисляется продолжительность
//  ВидыДней         - Массив          - Массив либо элемент перечисления вид дня,
//                                       для которого вычисляется продолжительность
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица графика.
//
Функция ПолучитьГрафик(
	График,
	Знач НачалоГрафика,
	Знач ОкончаниеГрафика,
	Знач ВидыИнтервалов,
	Знач ВидыДней,
	РасчетШаблона,
	ВыходныеДни) Экспорт
	
	ТаблицаГрафика = Новый ТаблицаЗначений;
	ТаблицаГрафика.Колонки.Добавить("Дата",                  Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаГрафика.Колонки.Добавить("НачалоРабочегоВремени", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТаблицаГрафика.Колонки.Добавить("КонецРабочегоВремени",  Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТаблицаГрафика.Колонки.Добавить("Продолжительность",     Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТаблицаГрафика.Колонки.Добавить("Смена",                 Новый ОписаниеТипов("СправочникСсылка.Смены"));
	ТаблицаГрафика.Колонки.Добавить("ВидДня",                Новый ОписаниеТипов("ПеречислениеСсылка.ВидДня"));
	ТаблицаГрафика.Колонки.Добавить("ВидИнтервала",          Новый ОписаниеТипов("СправочникСсылка.ВидыИнтервалов"));
	ТаблицаГрафика.Колонки.Добавить("УдалитьБанковский",     Новый ОписаниеТипов("Булево"));
	ТаблицаГрафика.Колонки.Добавить("Комментарий",           Новый ОписаниеТипов("Строка"));
	ТаблицаГрафика.Колонки.Добавить("НеИспользовать",        Новый ОписаниеТипов("Булево"));
	
	// Проверка корректности параметров
	Если НЕ ЗначениеЗаполнено(НачалоГрафика)
		ИЛИ НЕ ЗначениеЗаполнено(ОкончаниеГрафика)
		ИЛИ НЕ ЗначениеЗаполнено(График.Периодичность)
		ИЛИ График.Периодичность = Перечисления.Периодичность.Произвольный
		И График.Смещение.Количество()=0 Тогда
		
		Возврат ТаблицаГрафика;
	КонецЕсли;
	
	// приводим виды интервалов и дней к массиву
	Если ВидыИнтервалов <> Неопределено Тогда
		ВидыИнтервалов = Справочники.ГрафикиРаботы.МассивИзСтруктуры(ВидыИнтервалов);
	КонецЕсли;
	Если ВидыДней <> Неопределено Тогда
		ВидыДней = Справочники.ГрафикиРаботы.МассивИзСтруктуры(ВидыДней);
	КонецЕсли;
	
	ОтборПоВидамИнтервалов = (ТипЗнч(ВидыИнтервалов) = Тип("Массив"));
	ОтборПоВидамДней = (ТипЗнч(ВидыДней) = Тип("Массив"));
	
	НачалоГрафика = НачалоДня(НачалоГрафика);
	ОкончаниеГрафика = НачалоДня(ОкончаниеГрафика);
	
	// заполняем по таблице смещения справочника ГрафикиРаботы
	Если График.Фиксированный ИЛИ РасчетШаблона Тогда
		
		Если График.Смещение.Количество() = 0 Тогда
			Возврат ТаблицаГрафика;
		КонецЕсли;
		
		ПериодичностьГрафика = График.Периодичность;
		
		ДатаНачалаШаблонаОбязательна =
			(ПериодичностьГрафика = Перечисления.Периодичность.Произвольный
			ИЛИ ПериодичностьГрафика = Перечисления.Периодичность.Декада
			ИЛИ ПериодичностьГрафика = Перечисления.Периодичность.Неделя);
		
		Если ДатаНачалаШаблонаОбязательна И График.ДатаНачала = '00010101' Тогда
			Возврат ТаблицаГрафика;
		КонецЕсли;
		
		// расчет максимального смещения - максимальный номер строки в ТЧ Смещение шаблона
		Если ДатаНачалаШаблонаОбязательна Тогда
			НачальноеСмещение = (НачалоГрафика - График.ДатаНачала)/60/60/24;
			Если ПериодичностьГрафика = Перечисления.Периодичность.Произвольный Тогда
				ТаблицаСмещения = График.Смещение.Выгрузить();
				ТаблицаСмещения.Сортировать("НомерСтроки Убыв");
				МаксимальноеСмещение = ТаблицаСмещения[0].НомерСтроки;
			ИначеЕсли ПериодичностьГрафика = Перечисления.Периодичность.Неделя Тогда
				НачальноеСмещение = (НачалоГрафика - НачалоНедели(График.ДатаНачала))/60/60/24;
				МаксимальноеСмещение = 7;
			ИначеЕсли ПериодичностьГрафика = Перечисления.Периодичность.Декада Тогда
				МаксимальноеСмещение = 10;
			КонецЕсли;
		Иначе
			Если ПериодичностьГрафика = Перечисления.Периодичность.Год Тогда
				НачальноеСмещение = НачалоГрафика - НачалоГода(НачалоГрафика);
				МаксимальноеСмещение = 366;
			ИначеЕсли ПериодичностьГрафика = Перечисления.Периодичность.Квартал Тогда
				НачальноеСмещение = НачалоГрафика - НачалоКвартала(НачалоГрафика);
				МаксимальноеСмещение = 92;
			ИначеЕсли ПериодичностьГрафика = Перечисления.Периодичность.Месяц Тогда
				НачальноеСмещение = НачалоГрафика - НачалоМесяца(НачалоГрафика);
				МаксимальноеСмещение = 31;
			КонецЕсли;
		КонецЕсли;
		
		НачальноеСмещение = НачальноеСмещение - МаксимальноеСмещение * Цел(НачальноеСмещение/МаксимальноеСмещение);
		Если НачальноеСмещение < 0 Тогда
			НачальноеСмещение = МаксимальноеСмещение + НачальноеСмещение;
		КонецЕсли;
		
		ДанныеПроизводственногоКалендаря = Справочники.ГрафикиРаботы.ДанныеПроизводственногоКалендаря(
			График.ПроизводственныйКалендарь, НачалоГрафика, ОкончаниеГрафика);
		
		ДниПереноса = Новый Массив;
		СмещениеИзЗаПраздников = 0;
		
		ТекущееСмещение = НачальноеСмещение+1;
		РазницаДней = (ОкончаниеГрафика - НачалоГрафика)/60/60/24;
		Для ПеременнаяРазницаДней = 0 По РазницаДней Цикл
			ДатаЦикла = НачалоГрафика + ПеременнаяРазницаДней*60*60*24;
			
			// Корректировка тек. смещения под исключения (високосный год, длина месяцев квартала и т.п.)
			// Добавляем разницу между максимальным количеством дней в месяце (31) и текущим количеством дней в предыдущем
			// месяце (перепрыгиваем доп. число строк).
			ЭтоВисокосныйГод = (ДеньГода(КонецГода(ДатаЦикла)) = 366);
			Если ПериодичностьГрафика = Перечисления.Периодичность.Год Тогда
				ТекущееСмещение = (НачалоДня(ДатаЦикла) - НачалоГода(ДатаЦикла))/24/3600 + 1;
				
			ИначеЕсли ПериодичностьГрафика = Перечисления.Периодичность.Квартал Тогда
				ТекущееСмещение = (НачалоДня(ДатаЦикла) - НачалоКвартала(ДатаЦикла))/24/3600;
				
			ИначеЕсли ПериодичностьГрафика = Перечисления.Периодичность.Месяц Тогда
				ТекущееСмещение = День(ДатаЦикла);
				
			КонецЕсли;
			
			СтрокаГрафика = График.Смещение.Найти(ТекущееСмещение, "НомерСтроки");
			
			// Учтем производственный календарь и вариант учета праздничных дней
			ДанныеДня = ДанныеПроизводственногоКалендаря.НайтиСтроки(Новый Структура("Дата", ДатаЦикла));
			ВидДняПроизводственногоКалендаря = Неопределено;
			Если ДанныеДня.Количество()>0 Тогда
				
				Если ДанныеДня[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
					
					ВидДняПроизводственногоКалендаря = Перечисления.ВидДня.Праздник;
					
				ИначеЕсли ДанныеДня[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
					
					ВидДняПроизводственногоКалендаря = Перечисления.ВидДня.Предпраздничный;
					
				ИначеЕсли (ДанныеДня[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье
					ИЛИ ДанныеДня[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота)
					И ДанныеДня[0].ДатаПереноса <> '00010101' И НЕ ДниПереноса.Найти(ДатаЦикла)=Неопределено Тогда
					
					ВидДняПроизводственногоКалендаря = Перечисления.ВидДня.Выходной;
					
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаГрафика <> Неопределено Тогда
				ВидДня = ?(СтрокаГрафика.Рабочий,Перечисления.ВидДня.Рабочий,Перечисления.ВидДня.Выходной);
				Если ОтборПоВидамДней И ВидыДней.Найти(ВидДня) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Вставим праздничный день
				Если (ДанныеДня.Количество()>0 И График.УчетПраздников И ВидДняПроизводственногоКалендаря = Перечисления.ВидДня.Праздник)
					И (НЕ СтрокаГрафика.НеИспользовать) Тогда
					
					// Добавляем строку
					СтрокаКалендарногоГрафика = ТаблицаГрафика.Добавить();
					СтрокаКалендарногоГрафика.Дата = ДатаЦикла;
					СтрокаКалендарногоГрафика.ВидДня = ВидДняПроизводственногоКалендаря;
					СтрокаКалендарногоГрафика.УдалитьБанковский = СтрокаГрафика.УдалитьБанковский;
					СтрокаКалендарногоГрафика.Комментарий = СтрокаГрафика.Комментарий;
					Продолжить;
					
				ИначеЕсли ДанныеДня.Количество()>0  Тогда
					
					// Учтем дни переноса
					Если НЕ ВидДняПроизводственногоКалендаря = Неопределено Тогда
						Если ДанныеДня[0].ДатаПереноса <> '00010101' И ВидДня = Перечисления.ВидДня.Выходной Тогда
							ДниПереноса.Добавить(ДанныеДня[0].ДатаПереноса);
						КонецЕсли;
						ВидДня =
							?(ВидДняПроизводственногоКалендаря = Перечисления.ВидДня.Предпраздничный И ВидДня = Перечисления.ВидДня.Выходной,
							ВидДня,
							ВидДняПроизводственногоКалендаря);
					КонецЕсли;
					
				КонецЕсли;
				
				// Заполняем ТЗ по интервалам смещения
				Если (СтрокаГрафика.Смена.Пустая() ИЛИ ВидДня = Перечисления.ВидДня.Выходной ИЛИ ВидДня = Перечисления.ВидДня.Праздник)
					И (НЕ СтрокаГрафика.НеИспользовать) Тогда
					
					СтрокаТаблицыГрафика = ТаблицаГрафика.Добавить();
					СтрокаТаблицыГрафика.Дата = ДатаЦикла;
					Если НЕ ВидДня = Перечисления.ВидДня.Праздник
						И ((ДеньНедели(ДатаЦикла) = 6 И ВыходныеДни.Суббота)
							ИЛИ (ДеньНедели(ДатаЦикла) = 7 И ВыходныеДни.Воскресенье)) Тогда
						
						СтрокаТаблицыГрафика.ВидДня = Перечисления.ВидДня.Выходной;
						
					Иначе
						
						СтрокаТаблицыГрафика.ВидДня = ВидДня;
						
					КонецЕсли;
					
					Если ВидДня = Перечисления.ВидДня.Рабочий ИЛИ ВидДня = Перечисления.ВидДня.Предпраздничный Тогда
						СтрокаТаблицыГрафика.НачалоРабочегоВремени = СтрокаГрафика.НачалоРабочегоВремени;
						СтрокаТаблицыГрафика.КонецРабочегоВремени = СтрокаГрафика.КонецРабочегоВремени;
						СтрокаТаблицыГрафика.Продолжительность = СтрокаГрафика.Продолжительность;
					КонецЕсли;
					
					СтрокаТаблицыГрафика.Комментарий = СтрокаГрафика.Комментарий;
					СтрокаТаблицыГрафика.НеИспользовать = СтрокаГрафика.НеИспользовать;
					
				Иначе
					
					Если (ВидДня = Перечисления.ВидДня.Выходной
						ИЛИ НЕ ВидДня = Перечисления.ВидДня.Выходной
						И ((ДеньНедели(ДатаЦикла) = 6 И ВыходныеДни.Суббота) ИЛИ (ДеньНедели(ДатаЦикла) = 7 И ВыходныеДни.Воскресенье)))
						И (НЕ СтрокаГрафика.НеИспользовать) Тогда
						
						// Добавляем строку
						СтрокаКалендарногоГрафика = ТаблицаГрафика.Добавить();
						СтрокаКалендарногоГрафика.Дата = ДатаЦикла;
						СтрокаКалендарногоГрафика.ВидДня = Перечисления.ВидДня.Выходной;
						СтрокаКалендарногоГрафика.Комментарий = СтрокаГрафика.Комментарий;
						СтрокаКалендарногоГрафика.НеИспользовать = СтрокаГрафика.НеИспользовать; //siniko
						
					Иначе
						
						// Заполняем ТЗ по интервалам смены
						// Если задано расписание предпраздничного дня, учтем его.
						Если ВидДня = Перечисления.ВидДня.Предпраздничный 
							И СтрокаГрафика.Смена.ИнтервалыПредпраздничногоДня.Количество()>0 Тогда
							
							ТаблицаИнтервалов = СтрокаГрафика.Смена.ИнтервалыПредпраздничногоДня;
							
						Иначе
							
							ТаблицаИнтервалов = СтрокаГрафика.Смена.Интервалы;
							
						КонецЕсли;
						
						Для Каждого ИнтервалСмены Из ТаблицаИнтервалов Цикл
							Если ОтборПоВидамИнтервалов И ВидыИнтервалов.Найти(ИнтервалСмены.ВидИнтервала) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							Если НЕ СтрокаГрафика.НеИспользовать Тогда
								СтрокаТаблицыГрафика = ТаблицаГрафика.Добавить();
								СтрокаТаблицыГрафика.Дата = ДатаЦикла;
								СтрокаТаблицыГрафика.Комментарий = СтрокаГрафика.Комментарий;
								СтрокаТаблицыГрафика.ВидДня = ВидДня;
								СтрокаТаблицыГрафика.НачалоРабочегоВремени = ИнтервалСмены.НачалоРабочегоВремени;
								СтрокаТаблицыГрафика.КонецРабочегоВремени = ИнтервалСмены.КонецРабочегоВремени;
								СтрокаТаблицыГрафика.Продолжительность = ИнтервалСмены.Продолжительность;
								СтрокаТаблицыГрафика.Смена = СтрокаГрафика.Смена;
								СтрокаТаблицыГрафика.ВидИнтервала = ИнтервалСмены.ВидИнтервала;
								СтрокаТаблицыГрафика.НеИспользовать = СтрокаГрафика.НеИспользовать;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если МаксимальноеСмещение <= ТекущееСмещение Тогда
				ТекущееСмещение = 1;
			Иначе
				ТекущееСмещение = ТекущееСмещение + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		// Не фиксированный график, таблицу получаем из регистра
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикРаботКалендарный.Дата,
		|	ГрафикРаботКалендарный.НачалоРабочегоВремени,
		|	ГрафикРаботКалендарный.КонецРабочегоВремени,
		|	ГрафикРаботКалендарный.Продолжительность,
		|	ГрафикРаботКалендарный.Смена,
		|	ГрафикРаботКалендарный.ВидДня,
		|	ГрафикРаботКалендарный.ВидИнтервала,
		|	ГрафикРаботКалендарный.УдалитьБанковский,
		|	ГрафикРаботКалендарный.Комментарий,
		|	ЛОЖЬ               КАК НеИспользовать
		|ИЗ
		|	РегистрСведений.ГрафикРаботКалендарный КАК ГрафикРаботКалендарный
		|ГДЕ
		|	ГрафикРаботКалендарный.График = &График
		|	"+?(ОтборПоВидамДней,"И ГрафикРаботКалендарный.ВидДня В (&ВидыДней)","")+"
		|	"+?(ОтборПоВидамИнтервалов,"И ГрафикРаботКалендарный.ВидИнтервала В (&ВидыИнтервалов)","")+"
		|	И (ГрафикРаботКалендарный.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)");
				
		Запрос.УстановитьПараметр("График", График);
		Запрос.УстановитьПараметр("ВидыИнтервалов", ВидыИнтервалов);
		Запрос.УстановитьПараметр("ВидыДней", ВидыДней);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоГрафика);
		Запрос.УстановитьПараметр("ДатаОкончания", ОкончаниеГрафика);
				
		ТаблицаГрафика = Запрос.Выполнить().Выгрузить();
	КонецЕсли;

	Возврат ТаблицаГрафика;
	
КонецФункции

#КонецОбласти