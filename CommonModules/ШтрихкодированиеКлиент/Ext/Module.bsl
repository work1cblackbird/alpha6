
#Область ПрограммныйИнтерфейс

// Получает полный штрихкод или код карты из параметров оборудования.
//
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Параметр - массив - параметры, переданные оборудованием.
//
// Возвращаемое значение:
//  Строка - полученный штрихкод или код карты.
//
Функция ПолучитьШтрихкодИзПараметровОборудования(ИмяСобытия, Параметр) Экспорт
	
	Если ИмяСобытия = "TracksData" Тогда
		
		Возврат Параметр[0];
		
	ИначеЕсли ИмяСобытия = "ScanData" Тогда
		
		Возврат ?((Параметр.Количество() > 1) И (Параметр[1] <> Неопределено), Параметр[1][1], Параметр[0]);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Выполняет обработку оповещения при работе с подключаемым оборудованием.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, в которой обрабатывается оповещение;
//	ИмяСобытия - Строка - имя события;
//	Параметр - Произвольный - параметр;
//	Источник - Произвольный - источник события.
//  ПараметрыДействия - Произвольный - дополнительные параметры.
//
// Возвращаемое значение:
//  Булево - результат выполнения операции.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ Источник = "ПодключаемоеОборудование" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Форма.ВводДоступен() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Штрихкод = ПолучитьШтрихкодИзПараметровОборудования(ИмяСобытия, Параметр);
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Ошибки", Новый Массив);
	ПараметрыДействия.Вставить("Действие");
	ПараметрыДействия.Вставить("ДоступныеПоля", ДоступныеПоля(Форма));
	
	Если ИмяСобытия = "TracksData" Тогда
		
		ШтрихкодированиеВызовСервера.ПодготовитьДанныеДляОбработкиКодаКарты(ПараметрыДействия);
		
	ИначеЕсли ИмяСобытия = "ScanData" Тогда
		
		ОбработатьПолныйШтрихкод(Штрихкод, ПараметрыДействия);
		Штрихкод = ПараметрыДействия.ШтрихКод;
		Если ШтрихКод = "" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СсылкаОбъектаФормы = ?(
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка"),
			Форма.Объект.Ссылка,
			Неопределено
		);
		ПараметрыДействия.Вставить("СсылкаОбъектаФормы", СсылкаОбъектаФормы);
		ШтрихкодированиеВызовСервера.ПодготовитьДанныеДляОбработкиШтрихкода(ПараметрыДействия);
		
	КонецЕсли;
	
	Если ПараметрыДействия.Действие = "УстановитьНовыйШтрихкод" Тогда
		
		Если Форма.ТолькоПросмотр Тогда
			Возврат Ложь;
		КонецЕсли;
	
		Форма.Штрихкод = ПараметрыДействия.НайденныйОбъект;
		Форма.Модифицированность = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Установлен штрихкод'") + " " + ПараметрыДействия.ВидОбъекта + " """ + Форма.ШтрихКод + """."
		);
		Возврат Ложь;
		
	ИначеЕсли ПараметрыДействия.Действие = "ПоказатьВСписке" Тогда

		ПоказатьОбъектВСписке(Форма, ПараметрыДействия);
		Возврат Ложь;
		
	ИначеЕсли ПараметрыДействия.Действие = "ВыбратьИзСписка" Тогда

		Обработчик = Новый ОписаниеОповещения("Подключаемый_ШтрихкодированиеОбработкаОповещения", Форма);
		ОткрытьФорму(
			"РегистрСведений.Штрихкоды.Форма.ФормаВыбораОбъектаИзТаблицы",
			ПараметрыДействия,
			Форма,
			,
			,
			,
			Обработчик,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		Возврат Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыДействия.Действие) И ПараметрыДействия.Свойство("Ошибки") Тогда
		
		Если ПараметрыДействия.ДоступныеПоля.Количество() > 0 Тогда
			Для Каждого Ошибка Из ПараметрыДействия.Ошибки Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
			КонецЦикла;
		КонецЕсли;
		Возврат Ложь;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("Подключаемый_ШтрихкодированиеОбработкаОповещения", Форма);
	ВыполнитьОбработкуОповещения(Обработчик, ПараметрыДействия);
	
	Возврат Ложь;
	
КонецФункции

// Обработчик события возникающего на клиенте при записи объекта.
//
// Параметры:
//  Форма		- УправляемаяФорма		- Форма, в которой произошло событие.
//  Штрихкод	- Строка				- записываемый штрихкод.
//  Ссылка		- ДанныеФормаСтруктура	- Объект, для которого выполняется обработка события.
//  Отказ		- Булево				- Признак отказа от создания формы.
//
Процедура ПроверкаШтрихкодовПередЗаписью(Форма, Штрихкод, Ссылка, Отказ) Экспорт
	
	// Выполняем проверку корректности штрихкода в базе данных
	ПараметрыДействия = Новый Структура ("СообщатьОбОшибке", Ложь);
	РезультатПроверки = ШтрихкодированиеВызовСервера.ПроверкаУникальностиШтрихкодов(
		Штрихкод,
		Ссылка,
		Отказ,
		ПараметрыДействия
	);
	ПараметрыДействия.Вставить("СообщатьОбОшибке", Истина);

	Если НЕ РезультатПроверки Тогда
		
		Если НЕ ПараметрыДействия.Свойство("СообщатьОбОшибке") Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			Поле = "Штрихкоды";
		Иначе
			Поле = "Штрихкод";
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ПараметрыДействия.ТекстСообщения, Ссылка, Поле);
		
		Если НЕ Отказ Тогда
			
			// Формируем описание обработчика перехвата закрытия формы
			ОбработчикВопроса = Новый ОписаниеОповещения(
				"ОбработкаРезультатаОповещенияПриИзмененииШтрихкода",
				Форма,
				Новый Структура("Штрихкод", Штрихкод)
			);
			
			// Формируем текст вопроса
			ТекстВопроса = НСтр("ru = 'При проверке уникальности штрихкодов обнаружены ошибки. Продолжить запись?'");
			
			// Получаем подтверждение операции от пользователя
			ПоказатьВопрос(
				ОбработчикВопроса,
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет,
				,
				,
				НСтр("ru = 'Контроль уникальности штрихкодов'")
			);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Выполняет открытие формы списка объекта.
//
// Параметры:
//  Форма				- УправляемаяФорма		- Форма, в которой произошло событие.
//  ПараметрыДействия	- Структура				- Структура, содержащая параметры действия.
//
Процедура ПоказатьОбъектВСписке(Форма, ПараметрыДействия) Экспорт
	
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		СписокФормы = Форма.Элементы.Найти("Список");
		Если СписокФормы <> Неопределено И ТипЗнч(СписокФормы) = Тип("ТаблицаФормы") Тогда
			Форма.Элементы.Список.ТекущаяСтрока = ПараметрыДействия.НайденныйОбъект[0].Объект;
		КонецЕсли;
	Иначе
		ПараметрыФормыСписка = Новый Структура("ТекущаяСтрока", ПараметрыДействия.НайденныйОбъект[0].Объект);
		ИмяФормыСписка = ПараметрыДействия.НайденныйОбъект[0].ИмяФормыСписка;
		Форма = ОткрытьФорму(ИмяФормыСписка, ПараметрыФормыСписка, , , , , , РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;

КонецПроцедуры

// Получения кода маркировки с заменой символа 29 на экранированный
//
// Параметры:
//  ШтрихКод - Строка - Исходный штрих-код
//
Процедура ЗаменитьНаЭкранированныйСимвол(ШтрихКод) Экспорт
	
	ШтрихКод = СтрЗаменить(
		ШтрихКод,
		ОбщегоНазначенияБПОКлиентСервер.РазделительGS1(),
		ОбщегоНазначенияБПОКлиентСервер.ЭкранированныйСимволGS1()
	);
	
КонецПроцедуры // ЗаменитьНаЭкранированныйСимвол()

// Записывает полный штрихкод в формате Base64 и преобразует к сокращенному виду (без "криптохвоста").
//
// Параметры:
//  Штрихкод - Строка - штрихкод
//  ПараметрыДействия - Структура - структура параметров обработки штрихкода
//
Процедура ОбработатьПолныйШтрихкод(Штрихкод, ПараметрыДействия) Экспорт
	
	// Удалим из кода маркировки криптохвосты
	СтруктураМаркировки = МаркировкаТоваровКлиент.РазобратьШтриховойКодТовара(ШтрихКод);
	// запишем полный КМ в регистр в формате BASE64
	Если МаркировкаТоваровКлиентСервер.ЭтоКодТовараВФорматеDataMatrixGS1(ШтрихКод, СтруктураМаркировки) Тогда
		МаркировкаТоваровКлиентСервер.ЗаписатьПолныйШтрихкод(СтруктураМаркировки);
		ШтрихКод = МаркировкаТоваровКлиентСервер.СформироватьКодМаркировки(СтруктураМаркировки);
	КонецЕсли;
	
	ПараметрыДействия.Вставить("Штрихкод", ШтрихКод);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДоступныеПоля(Форма)
	
	Результат = Новый Структура;
	ЕстьРеквизитОбъект = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект");
	ЭтоЗаписьнаРемонт = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЗаписьНаРемонт");
	
	Если Форма.Элементы.Найти("Список") = Неопределено И ЕстьРеквизитОбъект И Форма.Объект <> Неопределено Тогда
		
		// Проверка формы диалога на наличие полей для вставки найденных объектов.
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Товары") Тогда
			Результат.Вставить("ВыборТовара");
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "ТоварыЗаменители") Тогда
			Результат.Вставить("ВыборТовара");
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Карточка") Тогда
			Результат.Вставить("ВыборКарты");
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Актив") Тогда
			Результат.Вставить("ВыборАктива");
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Активы") Тогда
			Результат.Вставить("ВыборАктива");
		КонецЕсли;
	ИначеЕсли ЭтоЗаписьнаРемонт Тогда
		Результат.Вставить("ВыборТовара");
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Штрихкод") Тогда
		Результат.Вставить("ВыборШтрихкода");
	ИначеЕсли НЕ Форма.Элементы.Найти("Список") = Неопределено И НЕ ЕстьРеквизитОбъект Тогда
		Результат.Вставить("ПоказатьВСписке");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти