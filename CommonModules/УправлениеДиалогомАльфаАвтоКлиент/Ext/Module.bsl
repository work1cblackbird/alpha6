// Модуль "Альфа 6 управление диалогом (клиент)"

#Область ПрограммныйИнтерфейс

/////////////////////////////////////////////////////////////////////////
// ПАРАМЕТРЫ ВЫБОРА НА КЛИЕНТЕ

// Формирование параметров выбора элемента формы.
//
// Параметры:
//  ПараметрыВыбора   - ФиксированныйМассив - Параметры выбора элемента формы.
//  ИмяПараметра      - Строка              - Имя параметра выбора.
//  ЗначениеПараметра - Произвольный        - Значение параметра выбора.
//
Процедура ОбновитьПараметрВыбора(ПараметрыВыбора, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Если ТипЗнч(ЗначениеПараметра)=Тип("Массив") Тогда
		НовыйПараметрВыбора = Новый ПараметрВыбора(ИмяПараметра, Новый ФиксированныйМассив(ЗначениеПараметра));
	Иначе
		НовыйПараметрВыбора = Новый ПараметрВыбора(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;
	
	ОбновитьФиксированныйМассивПараметровВыбора(ПараметрыВыбора, НовыйПараметрВыбора);
	
КонецПроцедуры // ОбновитьПараметрВыбора()

// Удаление параметра выбора элемента формы.
//
// Параметры:
//  ПараметрыВыбора   - ФиксированныйМассив - Параметры выбора элемента формы.
//  ИмяПараметра      - Строка              - Имя параметра выбора.
//
Процедура УдалитьПараметрВыбора(ПараметрыВыбора, ИмяПараметра) Экспорт
	
	ОбновитьФиксированныйМассивПараметровВыбора(ПараметрыВыбора, ИмяПараметра);
	
КонецПроцедуры // УдалитьПараметрВыбора()


/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Общий обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ПриОткрытии(Форма) Экспорт
	
	Если Форма.Элементы.Найти("Автомобили") <> Неопределено Тогда
		ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Автомобили");
	КонецЕсли;
	
	Если Форма.Элементы.Найти("Опции") <> Неопределено Тогда
		ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Опции");
	КонецЕсли;
	
	Если Форма.Элементы.Найти("Автоработы") <> Неопределено Тогда
		ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Автоработы");
	КонецЕсли;
	
КонецПроцедуры

// Формирование заголовка таблицы с учетом отбора.
//
// Параметры:
//  Форма         - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент       - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Таблица       - ТаблицаФормы     - Элемент, для которого формируется заголовок.
//  СУчетомОтбора - Булево           - Признак вывода количества строк в таблице с учетом отбора.
//
Процедура ОбновитьЗаголовокТаблицы(Форма, Элемент, Таблица = Неопределено, СУчетомОтбора = Истина) Экспорт
	
	ИмяРеквизитаФормы = "Заголовок" + Элемент.Имя;
	
	Если Таблица = Неопределено Тогда
		Таблица = Форма.Объект[Элемент.Имя];
	КонецЕсли;
	
	Если Элемент.ОтборСтрок = Неопределено ИЛИ НЕ СУчетомОтбора Тогда
		Форма[ИмяРеквизитаФормы] = Таблица.Количество();
		Возврат;
	КонецЕсли;
	
	Форма[ИмяРеквизитаФормы] = Таблица.НайтиСтроки(Новый Структура(Элемент.ОтборСтрок)).Количество();
	
	//КоличетсвоОпции = Объект.Опции.НайтиСтроки(Новый Структура("ИдентификаторАвтомобиля", ТекущиеДанные.ИдентификаторАвтомобиля)).Количество();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "АВТОРАБОТЫ"

// Общий обработчик возникающий при начале интерактивного редактирования строки
//
// Параметры:
//  Форма       - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент     - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока - Булево           - Истина, если строка была добавлена или скопирована.
//  Копирование - Булево           - Определяет режим копирования.
//
Процедура АвтоработыПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // РаботыПриНачалеРедактирования()

// Общий обработчик события возникающего перед началом интерактивного добавления строки.
//
// Параметры:
//  Форма       - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент     - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево           - Признак отказа от создания формы.
//  Копирование - Булево           - Определяет режим копирования.
//  Родитель    - Ссылка           - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево           - Признак добавления группы.
//  Параметр    - Произвольный     - Параметр команды, выполняемой при добавлении строки в таблицу.
//
Процедура АвтоработыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель,
		Группа, Параметр = Неопределено) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // АвтоработыПередНачаломДобавления()

// Общий обработчик события возникающего перед началом интерактивного изменения строки.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево           - Признак отказа от создания формы.
//
Процедура АвтоработыПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // АвтоработыПередНачаломИзменения()

// Общий обработчик события возникающего перед удалением строки или группы строк.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево           - Признак отказа от создания формы.
//
Процедура АвтоработыПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // АвтоработыПередУдалением()

// Общий обработчик события возникающего при движении курсора в поле приемнике данных.
//
// Параметры:
//  Форма                   - УправляемаяФорма        - Форма, в которой возникло событие.
//  Элемент                 - ТаблицаФормы            - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Параметры содержат тип действия, возможные действия и значение.
//  СтандартнаяОбработка    - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Строка                  - Произвольный - Строка таблицы, над которой находится курсор.
//  Поле                    - Произвольный - Элемент управляемой формы, с которым связана данная колонка таблицы.
//
Процедура АвтоработыПроверкаПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // АвтоработыПроверкаПеретаскивания()

// Общий обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент              - ТаблицаФормы         - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево               - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево               - Истина, если произошла отмена редактирования.
//  ИмяТабличнойЧасти    - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  СписокРеквизитов     - Строка               - Имена реквизитов, перечисленные через запятую, в формате
//                                                требований к свойствам структуры.
//                                                Например, "Код, Наименование, Родитель".
//                       - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                                                псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                                                значения (опционально) фактическое имя поля в таблице.
//                                                Если значение не определено, то имя поля берется из ключа.
//                       - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                                                к свойствам структуры.
//                                                Служебные поля для получения данных:
//                                                _ИтогиОпераций, _Константа, _Право
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов с префиксом "Представление".
//
Функция АвтоработыПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти="Автоработы", Объект=Неопределено, СписокРеквизитов=Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// После удаления строки набора, параметр отмены редактирования может не верно передаваться.
	Если НЕ ОтменаРедактирования И (Элемент.ТекущаяСтрока = Неопределено ИЛИ Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Элемент.ТекущаяСтрока) = Неопределено) Тогда
		
		ОтменаРедактирования = Истина;
		
	КонецЕсли;
	
	// Обработаем событие в бесконтекстном серверном вызове.
	СтруктураДанных = УправлениеДиалогомАльфаАвтоСервер.ПриОкончанииРедактирования(Объект, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти, СписокРеквизитов);
	
	// Заполним реквизиты объекта измененными данными.
	Если СтруктураДанных.Свойство("_Объект") И СтруктураДанных._Объект<>Объект Тогда
		КопироватьДанныеФормы(СтруктураДанных._Объект, Объект);
	КонецЕсли;
	
	// Заполним реквизиты формы полученными данными.
	ЗаполнитьЗначенияСвойств(Форма, СтруктураДанных);
	
	// Возвращаем сруктуру данных для дальнейшей обработке.
	Возврат СтруктураДанных;
	
КонецФункции // ТоварыПриОкончанииРедактирования()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "АВТОМОБИЛИ"

// Общий обработчик возникающий при начале интерактивного редактирования строки
//
// Параметры:
//  Форма       - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент     - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока - Булево           - Истина, если строка была добавлена или скопирована.
//  Копирование - Булево           - Определяет режим копирования.
//
Процедура АвтомобилиПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // АвтомобилиПриНачалеРедактирования()

// Общий обработчик события возникающего перед началом интерактивного добавления строки.
//
// Параметры:
//  Форма       - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент     - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево           - Признак отказа от создания формы.
//  Копирование - Булево           - Определяет режим копирования.
//  Родитель    - Ссылка           - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево           - Признак добавления группы.
//  Параметр    - Произвольный     - Параметр команды, выполняемой при добавлении строки в таблицу.
//
Процедура АвтомобилиПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр=Неопределено) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // АвтомобилиПередНачаломДобавления()

// Общий обработчик события возникающего перед началом интерактивного изменения строки.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево           - Признак отказа от создания формы.
//
Процедура АвтомобилиПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // АвтомобилиПередНачаломИзменения()

// Общий обработчик события возникающего перед удалением строки или группы строк.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево           - Признак отказа от создания формы.
//
Процедура АвтомобилиПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // АвтомобилиПередУдалением()

// Общий обработчик события возникающего при движении курсора в поле приемнике данных.
//
// Параметры:
//  Форма                   - УправляемаяФорма        - Форма, в которой возникло событие.
//  Элемент                 - ТаблицаФормы            - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Параметры содержат тип действия, возможные действия и значение.
//  СтандартнаяОбработка    - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Строка                  - Произвольный - Строка таблицы, над которой находится курсор.
//  Поле                    - Произвольный - Элемент управляемой формы, с которым связана данная колонка таблицы.
//
Процедура АвтомобилиПроверкаПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // АвтомобилиПроверкаПеретаскивания()

// Автоподбор автомобилей с отбором по владельцу
//
// Параметры:
//  Владелец                 - СправочникСсылка.Контрагенты - Владелец автомобиля.
//  Элемент                  - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  Текст                    - Строка - Строка текста, введенная в поле ввода.
//  ДанныеВыбора             - СписокЗначений - Содержит список значений,
//                                              который будет использован при стандартной обработке события.
//  ПараметрыПолученияДанных - Структура, Неопределено - Содержит параметры поиска,
//                                              которые будут переданы в метод ПолучитьДанныеВыбора.
//  Ожидание                 - Число - Интервал в секундах после ввода текста, через который произошло событие.
//  СтандартнаяОбработка     - Булево - В данный параметр передается признак выполнения
//                                      стандартной (системной) обработки события.
//
Процедура АвтомобильАвтоПодборПоВладельцу(Владелец, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка) Экспорт
	
	Если Владелец.Пустая() ИЛИ ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Отбор"               , Новый Структура());
	ПараметрыПодбора.Вставить("СтрокаПоиска"        , Текст);
	ПараметрыПодбора.Вставить("ВыборГруппИЭлементов", ПредопределенноеЗначение("ИспользованиеГруппИЭлементов.Элементы"));
	ПараметрыПодбора.Вставить("Режим"               , "ОтборПоВладельцу");
	ПараметрыПодбора.Вставить("Владелец"            , Владелец);
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Автомобили"), ПараметрыПодбора);
	
КонецПроцедуры

// Общий обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент              - ТаблицаФормы         - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево               - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево               - Истина, если произошла отмена редактирования.
//  ИмяТабличнойЧасти    - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  СписокРеквизитов     - Строка               - Имена реквизитов, перечисленные через запятую, в формате
//                                                требований к свойствам структуры.
//                                                Например, "Код, Наименование, Родитель".
//                       - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                                                псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                                                значения (опционально) фактическое имя поля в таблице.
//                                                Если значение не определено, то имя поля берется из ключа.
//                       - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                                                к свойствам структуры.
//                                                Служебные поля для получения данных:
//                                                _ИтогиОпераций, _Константа, _Право
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов с префиксом "Представление".
//
Функция АвтомобилиПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти="Автомобили", Объект=Неопределено, СписокРеквизитов=Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// После удаления строки набора, параметр отмены редактирования может не верно передаваться.
	Если НЕ ОтменаРедактирования И (Элемент.ТекущаяСтрока = Неопределено ИЛИ Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Элемент.ТекущаяСтрока) = Неопределено) Тогда
		
		ОтменаРедактирования = Истина;
		
	КонецЕсли;
	
	// Обработаем событие в бесконтекстном серверном вызове.
	СтруктураДанных = УправлениеДиалогомАльфаАвтоСервер.АвтомобилиПриОкончанииРедактирования(Объект, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти, СписокРеквизитов);
	
	// Заполним реквизиты объекта измененными данными.
	Если СтруктураДанных.Свойство("_Объект") И СтруктураДанных._Объект<>Объект Тогда
		КопироватьДанныеФормы(СтруктураДанных._Объект, Объект);
	КонецЕсли;
	
	// Заполним реквизиты формы полученными данными.
	ЗаполнитьЗначенияСвойств(Форма, СтруктураДанных);
	
	// Возвращаем сруктуру данных для дальнейшей обработке.
	Возврат СтруктураДанных;
	
КонецФункции // ТоварыПриОкончанииРедактирования()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "АВТОРАБОТЫ"

// Общий обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент              - ТаблицаФормы         - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево               - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево               - Истина, если произошла отмена редактирования.
//  ИмяТабличнойЧасти    - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  СписокРеквизитов     - Строка               - Имена реквизитов, перечисленные через запятую, в формате
//                                                требований к свойствам структуры.
//                                                Например, "Код, Наименование, Родитель".
//                       - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                                                псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                                                значения (опционально) фактическое имя поля в таблице.
//                                                Если значение не определено, то имя поля берется из ключа.
//                       - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                                                к свойствам структуры.
//                                                Служебные поля для получения данных:
//                                                _ИтогиОпераций, _Константа, _Право
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов с префиксом "Представление".
//
Функция ОпцииПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти="Опции", Объект=Неопределено, СписокРеквизитов=Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// После удаления строки набора, параметр отмены редактирования может не верно передаваться.
	Если НЕ ОтменаРедактирования И (Элемент.ТекущаяСтрока = Неопределено ИЛИ Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Элемент.ТекущаяСтрока) = Неопределено) Тогда
		
		ОтменаРедактирования = Истина;
		
	КонецЕсли;
	
	// Обработаем событие в бесконтекстном серверном вызове.
	СтруктураДанных = УправлениеДиалогомАльфаАвтоСервер.ОпцииПриОкончанииРедактирования(Объект, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти, СписокРеквизитов);
	
	// Заполним реквизиты объекта измененными данными.
	Если СтруктураДанных.Свойство("_Объект") И СтруктураДанных._Объект<>Объект Тогда
		КопироватьДанныеФормы(СтруктураДанных._Объект, Объект);
	КонецЕсли;
	
	// Заполним реквизиты формы полученными данными.
	ЗаполнитьЗначенияСвойств(Форма, СтруктураДанных);
	
	// Возвращаем сруктуру данных для дальнейшей обработке.
	Возврат СтруктураДанных;
	
КонецФункции // ТоварыПриОкончанииРедактирования()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ИСПОЛНИТЕЛИ"

// Пересчет процентов участия исполнителей, их сумма не должна превышать 100 процентов.
//
// Параметры:
//  Форма             - УправляемаяФорма            - Форма, в которой возникло событие.
//  ЗаказНаряд        - ДокументСсылка.ЗаказНаряд   - Заказ-наряд, для которого рассчитывается процент участия.
//  ТекущаяСтрока     - ДанныеФормыЭлементКоллекции - Текущая строка исполнителей.
//  ИсполнителиРаботы - ТаблицаЗначений             - Список исполнителей работ.
//   ДанныеАвтоработы	 - Структура - Дополнительные параметры, которые необходимы для расчета суммы.
//
Процедура ПересчитатьПроцентУчастия(
	Форма,
	ЗаказНаряд,
	ТекущаяСтрока = Неопределено,
	ИсполнителиРаботы = Неопределено,
	ДанныеАвтоработы = Неопределено) Экспорт
	
	// Если указано что нет автоматического распредления, то выходим
	Если НЕ Форма.АвтоматическийПроцентУчастия Тогда
		АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(ТекущаяСтрока, ДанныеАвтоработы);
		Возврат;
	КонецЕсли;
	
	Если ИсполнителиРаботы = Неопределено Тогда
		
		Если Форма.Элементы.Автоработы.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторТекущейРаботы = Форма.Элементы.Автоработы.ТекущиеДанные.ИдентификаторРаботы;
		ИсполнителиРаботы = ЗаказНаряд.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторТекущейРаботы));
		
	КонецЕсли;
	
	Если ИсполнителиРаботы.Количество()=1 Тогда
		// Если есть только 1 исполнитель - его процент всегда равен 100%
		ИсполнителиРаботы[0].Процент = 100;
		АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(ИсполнителиРаботы[0], ДанныеАвтоработы);
	ИначеЕсли ИсполнителиРаботы.Количество()>1 Тогда
		// Получим процент участия остальных исполнителей
		РаспределитьПроцентУчастияПоИсполнителям(Форма, ИсполнителиРаботы, ТекущаяСтрока, ДанныеАвтоработы);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает процен участия в строке исполнителя если процент еще не задан
//
// Параметры:
//  ЗаказНаряд        - ДокументСсылка.ЗаказНаряд   - Заказ-наряд, для которого рассчитывается процент участия.
//  ТекущаяСтрока     - ДанныеФормыЭлементКоллекции - Текущая строка исполнителей.
//  ИсполнителиРаботы - ТаблицаЗначений             - Список исполнителей работ.
//
Процедура УстановитьПроцентУчастияСтроки(ЗаказНаряд, ТекущаяСтрока, ИсполнителиРаботы = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Процент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсполнителиРаботы = Неопределено Тогда
		ИсполнителиРаботы = ЗаказНаряд.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ТекущаяСтрока.ИдентификаторРаботы));
	КонецЕсли;
	
	ПроцентВсего = 0;
	Для Каждого ИсполнительРаботы Из ИсполнителиРаботы Цикл
		ПроцентВсего = ПроцентВсего + ИсполнительРаботы.Процент;
	КонецЦикла;
	
	ПроцентИсполнителя = 100 - ПроцентВсего;
	Если ПроцентИсполнителя>0 Тогда
		ТекущаяСтрока.Процент = ПроцентИсполнителя;
	КонецЕсли;
	
КонецПроцедуры

// Установка выбранного исполнителя для одной из работ для всех последующих
//
// Параметры:
//  ЗаказНаряд                 - ДанныеФормыСтруктура - Заказ-наряд, по которому устанавливаются исполнители.
//  ИдентификаторТекущейРаботы - Строка                    - Идентификатор работы для заполнения исполнителей.
//
Процедура ИсполнителиУстановитьДляВсех(ЗаказНаряд, ИдентификаторТекущейРаботы) Экспорт
	
	Если ИдентификаторТекущейРаботы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРаботы = ЗаказНаряд.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторТекущейРаботы));
	
	Если
		СтрокаРаботы.Количество() <= 0
		И ЗаказНаряд.Свойство("АвтоработыКонтрагент")
		И ЗначениеЗаполнено(СтрокаРаботы[0].Контрагент)
	Тогда
		Возврат;
	КонецЕсли;

	// Запомним исполнителей текущей работы
	КопияИсполнителей = Новый Массив;
	Для Каждого ТекСтрока Из ЗаказНаряд.Исполнители Цикл
		СтруктураСтроки = Новый Структура();
		СтруктураСтроки.Вставить("Исполнитель");
		СтруктураСтроки.Вставить("Цех");
		СтруктураСтроки.Вставить("Процент");
		СтруктураСтроки.Вставить("ВидНачисления");
		СтруктураСтроки.Вставить("СпособРасчета");
		СтруктураСтроки.Вставить("ПараметрРасчетаНачисления");
		СтруктураСтроки.Вставить("Начислено");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		КопияИсполнителей.Добавить(СтруктураСтроки);
	КонецЦикла;

	// С начала удалим всех исполнителей у других работ
	МассивИсполнителейДляУдаления = Новый Массив;
	Для Каждого Исполнитель Из ЗаказНаряд.Исполнители Цикл
		
		Если Исполнитель.ИдентификаторРаботы = ИдентификаторТекущейРаботы Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИсполнителейДляУдаления.Добавить(Исполнитель);
		
	КонецЦикла;
	
	Для Каждого Исполнитель Из МассивИсполнителейДляУдаления Цикл
		ЗаказНаряд.Исполнители.Удалить(Исполнитель);
	КонецЦикла;
		
	ЗаказНаряд.Исполнители.Очистить();
	
	Для Каждого Работа Из ЗаказНаряд.Автоработы Цикл
		
		ЗаполнитьИсполнителейАвтоработы(ЗаказНаряд, Работа, ИдентификаторТекущейРаботы, КопияИсполнителей);
		
	КонецЦикла;
	
КонецПроцедуры

// Установка выбранного исполнителя для одной из работ для всех последующих
//
// Параметры:
//  ЗаказНаряд                 - ДанныеФормыСтруктура  - Заказ-наряд, по которому устанавливаются исполнители.
//  ПричинаОбращения           - СтрокаТаблицыЗначений - Строка причины обращения.
//  ИдентификаторТекущейРаботы - Строка                    - Идентификатор работы для заполнения исполнителей.
//
Процедура ИсполнителиУстановитьДляПричиныОбращения(ЗаказНаряд, ПричинаОбращения, ИдентификаторТекущейРаботы) Экспорт
	
	Если ИдентификаторТекущейРаботы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРаботы = ЗаказНаряд.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторТекущейРаботы));
	
	Если НЕ СтрокаРаботы.Количество() > 0
		И ЗаказНаряд.Свойство("АвтоработыКонтрагент")
		И ЗначениеЗаполнено(СтрокаРаботы[0].Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ИсполнителиРаботы = ЗаказНаряд.Исполнители.НайтиСтроки(
		Новый Структура("ИдентификаторРаботы", ИдентификаторТекущейРаботы));
	
	// Запомним исполнителей текущей работы
	КопияИсполнителей = Новый Массив;
	Для Каждого ТекСтрока Из ИсполнителиРаботы Цикл
		СтруктураСтроки = Новый Структура();
		СтруктураСтроки.Вставить("Исполнитель");
		СтруктураСтроки.Вставить("Цех");
		СтруктураСтроки.Вставить("Процент");
		СтруктураСтроки.Вставить("ВидНачисления");
		СтруктураСтроки.Вставить("СпособРасчета");
		СтруктураСтроки.Вставить("ПараметрРасчетаНачисления");
		СтруктураСтроки.Вставить("Начислено");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		КопияИсполнителей.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	// Найдем все автоработы причины обращения и почистим исполнителей
	СтруктураПоиска = Новый Структура("ИдентификаторПричиныОбращения", ПричинаОбращения.ИдентификаторПричиныОбращения);
	НайденныеРаботы = ЗаказНаряд.Автоработы.НайтиСтроки(СтруктураПоиска);
	
	МассивИсполнителейДляУдаления = Новый Массив;
	Для Каждого ТекущаяСтрока Из НайденныеРаботы Цикл
		
		ИсполнителиТекРаботы = ЗаказНаряд.Исполнители.НайтиСтроки(
			Новый Структура("ИдентификаторРаботы", ТекущаяСтрока.ИдентификаторРаботы));
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсполнителейДляУдаления, ИсполнителиТекРаботы);
		
	КонецЦикла;
	
	Для Каждого Исполнитель Из МассивИсполнителейДляУдаления Цикл
		ЗаказНаряд.Исполнители.Удалить(Исполнитель);
	КонецЦикла;
	
	Для Каждого Работа Из НайденныеРаботы Цикл
		
		ЗаполнитьИсполнителейАвтоработы(ЗаказНаряд, Работа, ИдентификаторТекущейРаботы, КопияИсполнителей);
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ИНВЕНТАРИЗАЦИОННАЯ КОМИССИЯ"

// Общий обработчик возникающий при начале интерактивного редактирования строки
//
// Параметры:
//  Форма		 - УправляемаяФорма - Форма, в которой возникло событие. 
//  Элемент		 - ТаблицаФормы     - Элемент управления, в котором возникло данное событие. 
//  НоваяСтрока	 - Булево           - Истина, если строка была добавлена или скопирована. 
//  Копирование	 - Булево           - Определяет режим копирования. 
//
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.ЧленКомиссии = Неопределено;
		Элемент.ТекущиеДанные.Председатель = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события возникающий перед окончанием интерактивного редактирования строки
//
// Параметры:
//  Форма				 - УправляемаяФорма 	- Форма, в которой возникло событие. 
//  Элемент				 - ТаблицаФормы     	- Элемент управления, в котором возникло данное событие. 
//  НоваяСтрока			 - Булево           	- Истина, если строка была добавлена или скопирована. 
//  ОтменаРедактирования - Булево           	- Истина, если произошла отмена редактирования. 
//  Отказ				 - Булево           	- Признак отказа от редактирования. 
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события. 
//
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Форма, 
		Элемент, 
		НоваяСтрока, 
		ОтменаРедактирования, 
		Отказ, 
		Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если НЕ ОтменаРедактирования Тогда
		УсловияПоиска = Новый Структура("ЧленКомиссии", Элемент.ТекущиеДанные.ЧленКомиссии);
		Строки = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(УсловияПоиска);
		Если Строки.Количество() > 1 Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='Сотрудник %сотрудник% уже включен в состав комиссии!'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%сотрудник%", 
															Элемент.ТекущиеДанные.ЧленКомиссии);
			ПоказатьПредупреждение( , ТекстПредупреждения);
			Элемент.ТекущиеДанные.ЧленКомиссии = Неопределено;
			Форма.ТекущийЭлемент = Элемент;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события возникающий при окончании интерактивного редактирования строки
//
// Параметры:
//  Форма				 - УправляемаяФорма 	- Форма, в которой возникло событие. 
//  Элемент				 - ТаблицаФормы     	- Элемент управления, в котором возникло данное событие. 
//  НоваяСтрока			 - Булево           	- Истина, если строка была добавлена или скопирована. 
//  ОтменаРедактирования - Булево           	- Признак отказа от редактирования. 
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события. 
//
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Форма, 
		Элемент, 
		НоваяСтрока, 
		ОтменаРедактирования, 
		Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// После удаления строки набора, параметр отмены редактирования может не верно передаваться.
	Если НЕ ОтменаРедактирования И (Элемент.ТекущаяСтрока = Неопределено ИЛИ Объект.ИнвентаризационнаяКомиссия.НайтиПоИдентификатору(Элемент.ТекущаяСтрока) = Неопределено) Тогда
		
		ОтменаРедактирования = Истина;
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Форма, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события возникающий после интерактивного удаления строки
//
// Параметры:
//  Форма	 - УправляемаяФорма 	- Форма, в которой возникло событие. 
//  Элемент	 - ТаблицаФормы     	- Элемент управления, в котором возникло данное событие. 
//  Объект	 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события. 
//
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Форма, Элемент, Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Форма, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события возникающий после выполнения выбора из другой формы
//
// Параметры:
//  Форма				 - УправляемаяФорма 	- Форма, в которой возникло событие. 
//  Элемент				 - ТаблицаФормы     	- Элемент управления, в котором возникло данное событие. 
//  ВыбранноеЗначение 	 - Произвольный 		- Результат выбора в подчиненной форме. 
//  СтандартнаяОбработка - Булево 				- В данный параметр передается признак выполнения системной обработки события. 
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события. 
//
Процедура ИнвентаризационнаяКомиссияОбработкаВыбора(Форма, 
		Элемент, 
		ВыбранноеЗначение, 
		СтандартнаяОбработка, 
		Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	СтандартнаяОбработка = Ложь;
	СтрокДоВыбора = Объект.ИнвентаризационнаяКомиссия.Количество();
	Для каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
		
		СтрокиСотрудника = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ЧленКомиссии", ВыбранныйЭлемент));
		Если СтрокиСотрудника.Количество() = 0 Тогда
			СтрокаСотрудника = Объект.ИнвентаризационнаяКомиссия.Добавить();
			СтрокаСотрудника.ЧленКомиссии = ВыбранныйЭлемент;
		Иначе
			СтрокаСотрудника = СтрокиСотрудника[0];
			ИндексСтроки = Объект.ИнвентаризационнаяКомиссия.Индекс(СтрокаСотрудника);
			ИмяПоля = "ИнвентаризационнаяКомиссия[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "].ЧленКомиссии"; 
			ТекстСообщения = НСтр("ru='Сотрудник %1 уже добавлен в список комиссии'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыбранныйЭлемент);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		Элемент.ТекущаяСтрока = СтрокаСотрудника;
	
	КонецЦикла;
	
	Если СтрокДоВыбора = 0 И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли; 
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Общий обработчик события возникающий при начале выбора в поле "ЧленКомиссии"
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма, в которой возникло событие. 
//  Элемент				 - ПолеФормы     	- Элемент управления, в котором возникло данное событие. 
//  ДанныеВыбора		 - СписокЗначений 	- В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево 			- В данный параметр передается признак выполнения системной обработки события. 
//
Процедура ИнвентаризационнаяКомиссияЧленКомиссииНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ОБЩЕГО НАЗНАЧЕНИЯ

// Общий обработчик события возникающего при нажатии кнопки "Подбор авторабот".
//
// Параметры:
//  Форма                  - УправляемаяФорма            - Форма, в которой возникло событие.
//  ИмяТабличнойЧасти      - Строка                      - Имя таблицы, для которой открывается форма подбора
//  Автомобиль             - СправочникСсылка.Автомобили - Автомобиль для подбора работ
//  ПараметрыДействия      - Структура                   - Набор параметров, использующихся при выполнения операции.
//  Объект                 - ДанныеФормыСтруктура        - Объект, для которого выполняется обработка.
//
Процедура ОткрытьПодборАвторабот(Форма,
		ИмяТабличнойЧасти = "Автоработы",
		Автомобиль = Неопределено,
		ПараметрыДействия = Неопределено,
		Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Инициализируем структуру параметров действия
	Если НЕ ТипЗнч(ПараметрыДействия)=Тип("Структура") Тогда
		ПараметрыДействия = Новый Структура();
	КонецЕсли;
	
	// Получим автомобиль из документа
	Автомобиль = ?(Автомобиль = Неопределено И ЕстьРеквизитНаКлиенте(Объект, "Автомобиль"),
		Объект.Автомобиль, Автомобиль);
		
	МассивИмени 		= СтрРазделить(Форма.ИмяФормы, ".");	
	ПолноеИмяОбъекта 	= МассивИмени[0] + "." + МассивИмени[1];
		
	// Инициализируем структуру основных параметры подбора товаров в документ
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("ПолноеИмяОбъекта",       ПолноеИмяОбъекта);
	ПараметрыПодбора.Вставить("ИмяТабличнойЧасти",      ИмяТабличнойЧасти);
	ПараметрыПодбора.Вставить("ПараметрыДействия",      ПараметрыДействия);
	
	// Создаем и заполняем структуру параметров открытия формы номенклатуры
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ПараметрыПодбора",      ПараметрыПодбора);
	ПараметрыОткрытия.Вставить("РежимВыбора",           ИСТИНА);
	ПараметрыОткрытия.Вставить("Контрагент",            ПолучитьЗначениеПараметраСтруктуры(Объект, "Контрагент"));
	ПараметрыОткрытия.Вставить("ДоговорВзаиморасчетов", ПолучитьЗначениеПараметраСтруктуры(Объект, "ДоговорВзаиморасчетов"));
	ПараметрыОткрытия.Вставить("Валюта",                ПолучитьЗначениеПараметраСтруктуры(Объект, "ВалютаДокумента"));
	ПараметрыОткрытия.Вставить("КурсВалюты",            ПолучитьЗначениеПараметраСтруктуры(Объект, "КурсДокумента"));
	ПараметрыОткрытия.Вставить("Цех",                   ПолучитьЗначениеПараметраСтруктуры(Объект, "Цех"));
	ПараметрыОткрытия.Вставить("ТипЦенРабот",           ПолучитьЗначениеПараметраСтруктуры(Объект, "ТипЦенРабот"));
	ПараметрыОткрытия.Вставить("ВидРемонта",            ПолучитьЗначениеПараметраСтруктуры(Объект, "ВидРемонта"));
	ПараметрыОткрытия.Вставить("Автомобиль",            Автомобиль);
	ПараметрыОткрытия.Вставить("Модель",                ПолучитьЗначениеПараметраСтруктуры(Объект, "Модель"));
	ПараметрыОткрытия.Вставить("ВариантКомплектации",   ПолучитьЗначениеПараметраСтруктуры(Объект, "ВариантКомплектации"));
	ПараметрыОткрытия.Вставить("ЕстьКоличество",        ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЕстьКоличество", Истина));
	ПараметрыОткрытия.Вставить("ДокументИзменениеЦен",  ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзменениеЦенАвторабот", Ложь));
	
	Если ЕстьРеквизитНаКлиенте(Объект, "ДокументОснование") Тогда
		ПараметрыОткрытия.Вставить("ДокументОснование", ПолучитьЗначениеПараметраСтруктуры(Объект, "ДокументОснование"));
	КонецЕсли;
	
	// Для подбора авторабот документа "Изменение цен авторабот" необходимо указать тип цен.
	Если ПараметрыОткрытия.ДокументИзменениеЦен Тогда
		ПараметрыОткрытия.ТипЦенРабот = Объект.ТипЦен;
	КонецЕсли;
	
	// Перезаполним и дополним по переданным параметрам
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОткрытия, ПараметрыДействия, Истина);
	
	// Получим параметры отбора
	Если НЕ Форма.Элементы.Найти("АвтоработыАвторабота")=Неопределено Тогда
		
		Элемент = Форма.Элементы["АвтоработыАвторабота"];
		ПараметрыОтбора = Новый Структура();
		
		Для каждого ПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
			ПараметрыОтбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ПараметрВыбора.Значение);
		КонецЦикла;
		
		Для каждого ПараметрВыбора Из Элемент.СвязиПараметровВыбора Цикл
			ПараметрыОтбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), Вычислить("Форма."+ПараметрВыбора.ПутьКДанным));
		КонецЦикла;
		
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		
	КонецЕсли;
	
	// Производим открытие формы подбора номенклатуры
	ОткрытьФорму("Справочник.Автоработы.ФормаСписка", ПараметрыОткрытия, Форма,,,, Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "ПодборАвторабот"), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьПодборНоменклатуры()

// Общий обработчик события возникающего при нажатии кнопки "Подбор по заказам".
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка.
//  ПутьКСхемеКомпоновкиДанных - Строка - Указывает откуда необходимо взять схему компоновки
//                                        для формирования данных подбора
//  Отборы - Соответствие - Отборы которые необходимо наложить на запрос.
//                          Ключ - в поле отбора, значение - значение отбора. Вид сравнения "равно".
//  ИмяКолонкиКоличество - Строка - Имя колонки в таблице результата по которой производиться подбор.
//                                  Доступные значения "Заказано", "Резерв".
//  ИспользоватьЗаказыПокупателей - Булево - Признак необходимости использовате запрос к остаткам заказов покупателей.
//  ИспользоватьЗаказыВнутренние - Булево - Признак необходимости использовать запрос к остаткам заказов внутрених.
//  ДопПараметры - Структура - Дополнительные параметры подбора.
//  ВыводитьТолькоОстаткиПоЗаказам - Булево - Признак отбора только не распределенных и не зарезервированных заказов.
//
Процедура ОткрытьПодборПоЗаказам(
	Форма,
	Объект,
	ПутьКСхемеКомпоновкиДанных = "",
	Отборы = Неопределено,
	ИмяКолонкиКоличество = "Заказано",
	ИспользоватьЗаказыПокупателей = Истина,
	ИспользоватьЗаказыВнутренние = Истина,
	ДопПараметры = Неопределено,
	ВыводитьТолькоОстаткиПоЗаказам = Ложь) Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	
	Если Отборы = Неопределено Тогда
		Отборы = Новый Структура;
		Отборы.Вставить("ЗаказСервиса", Ложь);
	ИначеЕсли Отборы.Получить("ЗаказСервиса") = Неопределено Тогда
		Отборы.Вставить("ЗаказСервиса", Ложь);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Отбор", Отборы);
	Если НЕ ПустаяСтрока(ПутьКСхемеКомпоновкиДанных) Тогда
		ПараметрыОткрытия.Вставить("ПутьКСхемеКомпоновкиДанных", ПутьКСхемеКомпоновкиДанных);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ИмяКолонкиКоличество", ИмяКолонкиКоличество);
	
	ПараметрыОткрытия.Вставить("ИспользоватьЗаказыПокупателей", ИспользоватьЗаказыПокупателей);
	ПараметрыОткрытия.Вставить("ИспользоватьЗаказыВнутренние" , ИспользоватьЗаказыВнутренние);
	ПараметрыОткрытия.Вставить("ВыводитьТолькоОстаткиПоЗаказам" , ВыводитьТолькоОстаткиПоЗаказам);
	
	// Передадим ТЧ "РаспределениеЗаказа", если она есть в объекте, для контроля добавленных товаров в документ.
	Если НЕ Объект = Неопределено Тогда
		
		Если ЕстьРеквизитНаКлиенте(Объект, "Дата") Тогда
			ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
		КонецЕсли;
		
		Если ЕстьРеквизитНаКлиенте(Объект, "РаспределениеЗаказа") Тогда
			РаспределениеЗаказа = Новый Массив;
			Для Каждого Строка Из Объект.РаспределениеЗаказа Цикл
				СтрокаСтруктура = Новый Структура("Номенклатура,Количество,ЗаказПокупателя", Строка.Номенклатура, Строка.Количество, Строка.ЗаказПокупателя);
				РаспределениеЗаказа.Добавить(СтрокаСтруктура);
			КонецЦикла;
			ПараметрыОткрытия.Вставить("РаспределениеЗаказа", РаспределениеЗаказа);
		КонецЕсли;
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить("Событие", "ПодборПоСпискуЗаказанного");
	Иначе
		ДопПараметры = "ПодборПоСпискуЗаказанного";
	КонецЕсли;
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, ДопПараметры);
	
	ОткрытьФорму(
		"Обработка.ПодборПоЗаказам.Форма",
		ПараметрыОткрытия,
		Форма,
		"ПодборПоЗаказам",
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьПодборПоЗаказам()

// Общий обработчик события возникающего при нажатии кнопки "Подбор членов комиссии".
//
// Параметры:
//  Форма				 - УправляемаяФорма	- Форма, в которой возникло событие. 
//  ИмяТабличнойЧасти	 - Строка           - Имя таблицы, для которой открывается форма подбора 
//  ПараметрыДействия	 - Структура        - Набор параметров, использующихся при выполнения операции. 
//
Процедура ОткрытьПодборЧленовКомиссии(Форма,
		ИмяТабличнойЧасти = "ИнвентаризационнаяКомиссия",		
		ПараметрыДействия = Неопределено) Экспорт

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаСписка", ПараметрыФормы, Форма.Элементы[ИмяТабличнойЧасти]);	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьФиксированныйМассивПараметровВыбора(КоллекцияПараметровВыбора, НовыйПараметрВыбора)
	
	НоваяКоллекцияПараметров = Новый Массив;
	
	Если ТипЗнч(НовыйПараметрВыбора)=Тип("Строка") Тогда
		ИмяПараметра = НовыйПараметрВыбора;
	Иначе
		ИмяПараметра = НовыйПараметрВыбора.Имя;
		НоваяКоллекцияПараметров.Добавить(НовыйПараметрВыбора);
	КонецЕсли;
	
	Для Каждого ПараметрВыбора Из КоллекцияПараметровВыбора Цикл
		Если ПараметрВыбора.Имя=ИмяПараметра Тогда
			Продолжить;
		КонецЕсли;
		НоваяКоллекцияПараметров.Добавить(ПараметрВыбора);
	КонецЦикла;
	
	КоллекцияПараметровВыбора = Новый ФиксированныйМассив(НоваяКоллекцияПараметров);
	
КонецПроцедуры // ОбновитьФиксированныйМассивПараметровВыбора()

Процедура РаспределитьПроцентУчастияПоИсполнителям(Форма, ИсполнителиРаботы, ТекущаяСтрока, ДанныеАвтоработы)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ПроцентОстальныхИсполнителей = 100;
	Иначе
		ПроцентОстальныхИсполнителей = 100 - ТекущаяСтрока.Процент;
	КонецЕсли;
	
	// Вычислим текущий процент остальных исполнителей
	ТекПроцентОстальныхИсполнителей = 0;
	Для Каждого  СтрокаИсполнителя Из ИсполнителиРаботы Цикл
		// В сумировании не принимает участие текущая строка
		Если СтрокаИсполнителя = ТекущаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		ТекПроцентОстальныхИсполнителей = ТекПроцентОстальныхИсполнителей+СтрокаИсполнителя.Процент;
	КонецЦикла;
	
	// Если проценты не введены не в одной строке - распределим 100% на всех
	Если ТекПроцентОстальныхИсполнителей = 0 И ТекущаяСтрока.Процент = 0 Тогда
		ТекущаяСтрока = Неопределено;
	Иначе
		АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(ТекущаяСтрока, ДанныеАвтоработы);
	КонецЕсли;
	
	// Перерасчитаем процент участия пропорционально старого процента
	ПерерасчетПроцентаУчастияИсполнителей(
		Форма,
		ИсполнителиРаботы,
		ТекущаяСтрока,
		ДанныеАвтоработы,
		ПроцентОстальныхИсполнителей,
		ТекПроцентОстальныхИсполнителей);
	
КонецПроцедуры

Процедура ПерерасчетПроцентаУчастияИсполнителей(
		Форма,
		ИсполнителиРаботы,
		ТекущаяСтрока,
		ДанныеАвтоработы,
		ПроцентОстальныхИсполнителей,
		ТекПроцентОстальныхИсполнителей);
	
	ОбщийПроцентУчастия = 0;
	Для Каждого СтрокаИсполнителя Из ИсполнителиРаботы Цикл
		// В расчете не принимает участие текущая строка
		Если СтрокаИсполнителя = ТекущаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекПроцентОстальныхИсполнителей = 0 Тогда
			// Если ранее все остальные исполнители выполняли 0% работы,
			// распределим остаток работы пропорционально между ними.
			Если ТекущаяСтрока = Неопределено Тогда
				СтрокаИсполнителя.Процент = ПроцентОстальныхИсполнителей / Форма.Исполнители.Количество();
			Иначе
				СтрокаИсполнителя.Процент = ПроцентОстальныхИсполнителей / (Форма.Исполнители.Количество()-1);
			КонецЕсли;
		Иначе
			// Иначе распределим процент участия относительно его старого процента
			СтрокаИсполнителя.Процент = 
				(СтрокаИсполнителя.Процент * ПроцентОстальныхИсполнителей) / ТекПроцентОстальныхИсполнителей;
		КонецЕсли;
		АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(СтрокаИсполнителя, ДанныеАвтоработы);
		ПоследняяСтрокаИсполнителя = СтрокаИсполнителя;
		ОбщийПроцентУчастия        = ОбщийПроцентУчастия + СтрокаИсполнителя.Процент;
	КонецЦикла;
	
	ПогрешностьОкругленияПроцентаУчастия = ПроцентОстальныхИсполнителей - ОбщийПроцентУчастия;
	Если НЕ ПогрешностьОкругленияПроцентаУчастия = 0 Тогда
		ПоследняяСтрокаИсполнителя.Процент = ПоследняяСтрокаИсполнителя.Процент + ПогрешностьОкругленияПроцентаУчастия;
		АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(ПоследняяСтрокаИсполнителя, ДанныеАвтоработы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсполнителейАвтоработы(ЗаказНаряд, Работа, ИдентификаторТекущейРаботы, Исполнители)
	
	Если (ЗаказНаряд.Свойство("АвтоработыКонтрагент")) И (НЕ ЗначениеЗаполнено(Работа.Контрагент)) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсполнители = "";
	ДанныеРасчетаАвтоработы = АвтосервисКлиент.ПараметрыРасчетаНачисленийАвтоработы(
		ЗаказНаряд,
		Работа.ИдентификаторРаботы);
	
	// Для всех работ добавим таких исполнителей
	Для Каждого Исполнитель Из Исполнители Цикл
		
		СтруктураОтбора 	= Новый Структура(
			"ИдентификаторРаботы, Исполнитель, Цех",
			Работа.ИдентификаторРаботы, Исполнитель.Исполнитель, Исполнитель.Цех);
		МассивИсполнителей 	= ЗаказНаряд.Исполнители.НайтиСтроки(СтруктураОтбора);
		Если МассивИсполнителей.Количество() Тогда 
			Продолжить;
		КонецЕсли;
		
		НовыйИсполнитель = ЗаказНаряд.Исполнители.Добавить();
		НовыйИсполнитель.ИдентификаторРаботы       = Работа.ИдентификаторРаботы;
		НовыйИсполнитель.Исполнитель               = Исполнитель.Исполнитель;
		НовыйИсполнитель.Цех                       = Исполнитель.Цех;
		НовыйИсполнитель.Процент                   = Исполнитель.Процент;
		СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") + СокрЛП(Исполнитель.Исполнитель);
		
		Если НЕ ЕстьРеквизитНаКлиенте(НовыйИсполнитель, "ВидНачисления") Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйИсполнитель.ВидНачисления             = Исполнитель.ВидНачисления;
		НовыйИсполнитель.СпособРасчета             = Исполнитель.СпособРасчета;
		НовыйИсполнитель.ПараметрРасчетаНачисления = Исполнитель.ПараметрРасчетаНачисления;
		
		Если НовыйИсполнитель.ИдентификаторРаботы = ИдентификаторТекущейРаботы Тогда
			НовыйИсполнитель.Начислено = Исполнитель.Начислено;
		Иначе
			// Выполним перерасчет суммы начисления
			АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(НовыйИсполнитель, ДанныеРасчетаАвтоработы);
		КонецЕсли;
		
	КонецЦикла;
	
	Работа.Исполнители = СтрокаИсполнители;
	
КонецПроцедуры

// Проверяет корректность установки признака "Председатель" в тч "ИнвентаризационнаяКомиссия". Корректирует при необходимости.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма, в которой возникло событие. 
//  СтрокаТЧ - ДанныеФормыЭлементКоллекции 	 - Строка ТЧ, которую необходимо проверить
//  Объект	 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события. 
//
Процедура ПроверитьФлагиПредседателя(Форма, СтрокаТЧ, Объект = Неопределено)
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);
	
	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл
		
		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;	
		
	КонецЦикла;	

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти
