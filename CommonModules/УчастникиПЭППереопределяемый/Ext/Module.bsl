
#Область ПрограммныйИнтерфейс

// Метод переопределение для См. Участники.ИдентификаторУчастника
//
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП - Ссылка на участника
//           - ОпределяемыйТип.ФизическиеЛицаПЭП -
//           - ОпределяемыйТип.КонтактныеЛицаПЭП -
//  СтандартнаяОбработка - Булево - Признак необходимости выполнить получение из стандартного места хранения
//
// Возвращаемое значение:
//  Неопределено, УникальныйИдентификатор -  Идентификатор участника
//
Функция ПриПолученииИдентификатораУчастника(Участник, СтандартнаяОбработка) Экспорт
	
	// Разместить код определения идентификатора, если используется не стандартное место хранения 
	
КонецФункции

// Метод переопределение для См. Участники.ЗафиксироватьРегистрациюУчастникаВПЭП
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП - Ссылка на участника
//           - ОпределяемыйТип.ФизическиеЛицаПЭП -
//           - ОпределяемыйТип.КонтактныеЛицаПЭП -
//  СтандартнаяОбработка - Булево - Признак необходимости выполнить получение из стандартного места хранения;
Процедура ПриФиксицииРегистрацииУчастникаВПЭП(Участник, СтандартнаяОбработка) Экспорт
	
	// Разместить код сохранения соответствия идентификатора и участника,
	// если используется не стандартное место хранения
	
КонецПроцедуры

// При получении данных юридического лица.
// 
// Параметры:
//  ЮрЛицо - ОпределяемыйТип.ЮридическиеЛицаПЭП - Юридическое лицо из базы
//  Данные - Структура -  Данные юридического лица:
//   * Наименование - Строка -
//   * ИНН - Строка -
//   * Адрес - Строка -
Процедура ПриПолученииДанныхЮридическогоЛица(ЮрЛицо, Данные) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Организации.НаименованиеПолное КАК Наименование,
		|	Организации.ИНН КАК ИНН
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &ЮрЛицо"
	);
	Запрос.УстановитьПараметр("ЮрЛицо", ЮрЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеОрганизации = РезультатЗапроса.Выбрать();
	ДанныеОрганизации.Следующий();
	ЗаполнитьЗначенияСвойств(Данные, ДанныеОрганизации);
	Данные.Адрес = УчастникиПЭП.АдресУчастинка(ЮрЛицо);
	
КонецПроцедуры

// При получении данных физического лица.
// 
// Параметры:
//  ФизЛицо - ОпределяемыйТип.ФизическиеЛицаПЭП - Физическое лицо
//  Данные - Структура -  Данные физического лица:
// * Фамилия - Строка - 
// * Имя - Строка - 
// * Отчество - Строка - 
// * Почта - Строка - 
// * Телефон - Строка -
Процедура ПриПолученииДанныхФизическогоЛица(ФизЛицо, Данные) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Контрагенты.Фамилия,
		|	Контрагенты.Имя,
		|	Контрагенты.Отчество
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &ФизЛицо"
	);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеКонтрагента = РезультатЗапроса.Выбрать();
	ДанныеКонтрагента.Следующий();
	ЗаполнитьЗначенияСвойств(Данные, ДанныеКонтрагента);
	Данные.Почта = УчастникиПЭП.ПочтаУчастника(ФизЛицо);
	Данные.Телефон = УчастникиПЭП.ТелефонУчастинка(ФизЛицо);
	
КонецПроцедуры

// При получении данных контактного лица.
// 
// Параметры:
//  КонтактноеЛицо - ОпределяемыйТип.КонтактныеЛицаПЭП - Контактное лицо
//  Данные - Структура -  Данные физического лица:
// * Фамилия - Строка - 
// * Имя - Строка - 
// * Отчество - Строка - 
// * Почта - Строка - 
// * Телефон - Строка -
Процедура ПриПолученииДанныхКонтактногоЛица(КонтактноеЛицо, Данные) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Фамилия + "" "" + Сотрудники.Имя  + "" "" + Сотрудники.Отчество КАК Имя
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &КонтактноеЛицо"
	);
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСотрудника = РезультатЗапроса.Выбрать();
	ДанныеСотрудника.Следующий();
	ЗаполнитьЗначенияСвойств(Данные, ДанныеСотрудника);
	Данные.Почта = УчастникиПЭП.ПочтаУчастника(КонтактноеЛицо);
	Данные.Телефон = УчастникиПЭП.ТелефонУчастинка(КонтактноеЛицо);
	
КонецПроцедуры

// Получении контактной информации участинка.
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП - Ссылка на участника
//           - ОпределяемыйТип.ФизическиеЛицаПЭП -
//           - ОпределяемыйТип.КонтактныеЛицаПЭП -
//  ТипКИ - См. Участники.ТипыКИ
// 
// Возвращаемое значение:
//  Строка
//
Функция ПриПолученииКонтактнойИнформацииУчастинка(Участник, ТипКИ) Экспорт
	
	ТипыКИ = УчастникиПЭП.ТипыКИ();
	
	ОтборКонтактнойИнформации = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКонтактнойИнформации.Дата = ТекущаяДатаСеанса();
	
	Если УчастникиПЭП.ЭтоЮридическоеЛицо(Участник) Тогда
		
		Варианты = Новый Соответствие();
		Варианты.Вставить(ТипыКИ.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Варианты.Вставить(ТипыКИ.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
		Варианты.Вставить(ТипыКИ.Почта, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
			
	ИначеЕсли УчастникиПЭП.ЭтоКонтактноеЛицо(Участник) Тогда
		
		Варианты = Новый Соответствие();
		Варианты.Вставить(ТипыКИ.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресСотрудника);
		Варианты.Вставить(ТипыКИ.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника);
		Варианты.Вставить(ТипыКИ.Почта, Справочники.ВидыКонтактнойИнформации.EmailСотрудника);
		
	ИначеЕсли УчастникиПЭП.ЭтоФизическоеЛицо(Участник) Тогда
		
		Варианты = Новый Соответствие();
		Варианты.Вставить(ТипыКИ.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Варианты.Вставить(ТипыКИ.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		Варианты.Вставить(ТипыКИ.Почта, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
		
	КонецЕсли;
	
	ОтборКонтактнойИнформации.ВидыКонтактнойИнформации.Добавить(Варианты.Получить(ТипКИ));
		
	НайденнаяКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Участник, ОтборКонтактнойИнформации);
	
	Если НайденнаяКИ.Количество() = 0 Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат НайденнаяКИ[0].Представление;
	
КонецФункции

// Контакное лицо по умолчанию.
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП - Юридическое лицо.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтактныеЛицаПЭП
Функция КонтакноеЛицоПоУмолчанию(Участник) Экспорт
	
	Возврат Участник.КонтактноеЛицоПоУмолчанию;
	
КонецФункции

// Дополнительная проверка физического лица.
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП - Юридическое лицо.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
Функция УчастникСоответствуетКритериям(Участник) Экспорт
	
	КритерииВыбора = КритерииВыбораУчастника(Участник.Ссылка);
	УчастникСоответствуетКритериям = Истина;
	
	Для Каждого КритерийВыбора Из КритерииВыбора Цикл
		
		Если ТипЗнч(КритерийВыбора.Значение) = Тип("СписокЗначений") Тогда
			
			УчастникСоответствуетКритериям =
				КритерийВыбора.Значение.НайтиПоЗначению(Участник[КритерийВыбора.Ключ]) <> Неопределено;
			
		Иначе
			
			УчастникСоответствуетКритериям = Участник[КритерийВыбора.Ключ] = КритерийВыбора.Значение;
			
		КонецЕсли;
		
		Если Не УчастникСоответствуетКритериям Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат УчастникСоответствуетКритериям;
	
КонецФункции // УчастникСоответствуетКритериям()

// Получение набора дополнительных проверок физического лица.
// 
// Параметры:
//  Участник - ОпределяемыйТип.ЮридическиеЛицаПЭП - Юридическое лицо.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
Функция КритерииВыбораУчастника(Участник) Экспорт
	
	КритерииПоиска = Новый Структура();
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ЧастныеЛица = Новый СписокЗначений();
		ЧастныеЛица.Добавить(Перечисления.ФормыСобственности.ЧастноеЛицо);
		ЧастныеЛица.Добавить(Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
		КритерииПоиска.Вставить("ФормаСобственности", ЧастныеЛица);
		
	КонецЕсли;
	
	Возврат КритерииПоиска;
	
КонецФункции // КритерииВыбораУчастника()

#Область РаботаСФормами

// Точка расширения для переопределения запроса списка участинка ПЭП.
// 
// Параметры:
//  ИсходныйЗапрос - Строка - Исходный запрос
//  ПараметрыНастройкиФормы - см. Участники.НовыеПараметрыПриСозданииНаСервере_ФормаСписка
// 
// Возвращаемое значение:
//  Строка -  Запрос динамического списка
Функция ЗапросДинамическогоСписка(Знач ИсходныйЗапрос, ПараметрыНастройкиФормы) Экспорт
	
	
	
	ЗаменаВыбраногоПоля = ",ЕСТЬNULL(ЗарегистрированныеВПЭПУчастники.Зарегистрирован, ЛОЖЬ) КАК ЗарегистрированВПЭП";
	Результат = СтрЗаменить(ИсходныйЗапрос, "//ДополнительныеПоля", ЗаменаВыбраногоПоля);
	
	Если УчастникиПЭП.ЭтоЮридическоеЛицо(ПараметрыНастройкиФормы.ПустаяСсылка) Тогда
		
		ИмяРегистра = "ЗарегистрированныеВПЭПУчастники";
		ИмяСправочника = "СправочникОрганизации";
		
	ИначеЕсли УчастникиПЭП.ЭтоКонтактноеЛицо(ПараметрыНастройкиФормы.ПустаяСсылка) Тогда
		
		ИмяРегистра = "ЗарегистрированныеВПЭПУчастники";
		ИмяСправочника = "СправочникСотрудники";
		
	ИначеЕсли УчастникиПЭП.ЭтоФизическоеЛицо(ПараметрыНастройкиФормы.ПустаяСсылка) Тогда
		
		ИмяРегистра = "ЗарегистрированныеВПЭПУчастники";
		ИмяСправочника = "СправочникКонтрагенты";
		
	КонецЕсли;
	
	ЗаменаСоединения = ",ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.%1 КАК ЗарегистрированныеВПЭПУчастники
			|ПО %2.Ссылка = ЗарегистрированныеВПЭПУчастники.Участник";
	ЗаменаСоединения = СтрШаблон(ЗаменаСоединения, ИмяРегистра, ИмяСправочника);
	Результат = СтрЗаменить(Результат, "//ДополнительныеСоединения", ЗаменаСоединения);
	Возврат Результат;
	
КонецФункции

// При обновлении запроса динамического списка.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объект формы;
//  ПараметрыНастройкиФормы - см. Участники.НовыеПараметрыПриСозданииНаСервере_ФормаСписка
Процедура ПриОбновленииЗапросаДинамическогоСписка(Форма, ПараметрыНастройкиФормы) Экспорт
	
	Поле = Форма.Список.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.ПутьКДанным = "ЗарегистрированВПЭП";
	Поле.Поле = "ЗарегистрированВПЭП";
	Поле.Заголовок = "Зарегистрирован в ПЭП";
	
	НовыйЭлемент = Форма.Элементы.Добавить("ЗарегистрированВПЭП", Тип("ПолеФормы"),
		Форма.Элементы.Список);
	//НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.ЛоготипПЭП;
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Список.ЗарегистрированВПЭП";
	
КонецПроцедуры

// Перед добавлением команд на форму элемента участника.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объект формы.
//  ПараметрыНастройкиФормы - см. Участники.НовыеПараметрыПриСозданииНаСервере_ФормаЭлемента.
//  КомандыКДобавлению - см. ОбщегоНазначенияПЭП.КоллекцияКоманд
// 
// Возвращаемое значение:
//  Структура - описание полей структуры:
//  * СтандартнаяОбработка - Булево - признак стандартной обработки.
//  * КоллекцияКоманд - см. ОбщегоНазначенияПЭП.КоллекцияКоманд
Функция ПередДобавлениемКомандНаФормуЭлемента(Форма, ПараметрыНастройкиФормы, Знач КомандыКДобавлению) Экспорт
	
	Если
		ПолучитьФункциональнуюОпцию("ИспользоватьПЭП") = Ложь
		Или Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЖурналЗапросовПЭП)
	Тогда
		
		КомандыКДобавлению.Очистить();
		
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат Новый Структура("СтандартнаяОбработка,КоллекцияКоманд", Истина, КомандыКДобавлению);
	
КонецФункции

// После добавлением команд на форму элемента участника.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объект формы.
//  ПараметрыНастройкиФормы - см. Участники.НовыеПараметрыПриСозданииНаСервере_ФормаЭлемента.
Процедура ПослеДобавлениемКомандНаФормуЭлемента(Форма, ПараметрыНастройкиФормы) Экспорт
	
	Если УчастникиПЭП.ЭтоФизическоеЛицо(ПараметрыНастройкиФормы.ПустаяСсылка) Тогда
		
		НовыйЭлемент = Форма.Элементы.Добавить("ПодписаноСогласиеНаРаботуСПЭП", Тип("ПолеФормы"),
			Форма.Элементы.Шапка);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПутьКДанным = "Объект.ПодписаноСогласиеНаРаботуСПЭП";
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		НовыйЭлемент.ВидФлажка = ВидФлажка.Выключатель;
		НовыйЭлемент.Заголовок = НСтр("ru = 'Подписано согласие на работу с простой электроной подписью'");
		Форма.Элементы.Переместить(НовыйЭлемент, НовыйЭлемент.Родитель, Форма.Элементы.ГруппаРодитель);
		
	ИначеЕсли УчастникиПЭП.ЭтоЮридическоеЛицо(ПараметрыНастройкиФормы.ПустаяСсылка) Тогда
		
		СтраницаПЭП = Форма.Элементы.Добавить("СтраницаПЭП", Тип("ГруппаФормы"), Форма.Элементы.Страницы);
		СтраницаПЭП.Вид = ВидГруппыФормы.Страница;
		СтраницаПЭП.Заголовок = НСтр("ru = 'Простая электронная подпись'");
		СтраницаПЭП.ЦветФона = ЦветаСтиля.ЦветПанелей;
		
		НовыйЭлемент = Форма.Элементы.Добавить("КонтактноеЛицоПоУмолчанию", Тип("ПолеФормы"), СтраницаПЭП);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПутьКДанным = "Объект.КонтактноеЛицоПоУмолчанию";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
