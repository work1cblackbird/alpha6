
#Область ПрограммныйИнтерфейс

// Формирует напоминания о необходимости заказа авто для тест-драйва
//
// Параметры:
//	СтруктураПараметров - Структура - Структура параметров.
//
Процедура РасчетВыводаАвтомобиляИзТестДрайва(Знач СтруктураПараметров = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СрокОповещения") Тогда
		СрокОповещения = СтруктураПараметров.СрокОповещения;
	Иначе
		СрокОповещения = 0;
	КонецЕсли;
	
	Отчет = Отчеты.ПланЗаказовАвтомобилейДляТестДрайва.Создать();
		
	ВариантОтчета    = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек["Основной"];
		
	Если НЕ ВариантОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОкончания") = Неопределено Тогда
		ВариантОтчета.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Показатели      = ВариантОтчета.Настройки.Выбор;
	Отбор           = ВариантОтчета.Настройки.Отбор;
	СтруктураОтчета = ВариантОтчета.Настройки.Структура;
	Порядок         = ВариантОтчета.Настройки.Порядок;
	
	СтруктураОтчета.Очистить();
	Порядок.Элементы.Очистить();
	
	Показатели.Элементы.Очистить();
	
	НовыйПоказатель = Показатели.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НовыйПоказатель.Использование = Истина;
	
	НовыйПоказатель = Показатели.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовыйПоказатель.Использование = Истина;
	НовыйПоказатель.Поле          = Новый ПолеКомпоновкиДанных("ОсталосьДнейДоВыбытия");
	
	// ТочкаЗаказа
	КоличествоПодчиненных = Отбор.Элементы.Количество()- 1;
	Пока КоличествоПодчиненных >= 0 Цикл
		Отбор.Элементы.Удалить(Отбор.Элементы[КоличествоПодчиненных]);
		КоличествоПодчиненных = КоличествоПодчиненных - 1;
	КонецЦикла;
	
	ТекОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ТекОтбор.Использование  = Истина;
	ТекОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОсталосьДнейДоВыбытия");
	ТекОтбор.ПравоеЗначение = СрокОповещения;
	ТекОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	
	НоваяГруппировка = СтруктураОтчета.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	НоваяГруппировка.Использование = Истина;
	
	Группировка = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
	Группировка.Использование  = Истина;
	
	НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование  = Истина;
	НовоеПоле.Поле           = Новый ПолеКомпоновкиДанных("Автомобиль");
	
	НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование  = Истина;
	НовоеПоле.Поле           = Новый ПолеКомпоновкиДанных("ПодразделениеКомпании.ОтветственныйЗаТД");
	
	НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;
	
	ДатаПробега = КонецДня(ТекущаяДатаСеанса());
	ДатаКонца   = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("КонецПериода", ВариантОтчета.Настройки);
	ДатаПробега = Мин(ДатаКонца, ДатаКонца);
	Отчет.СхемаКомпоновкиДанных.Параметры.ДатаПробега.Значение = ДатаПробега;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		Отчет.СхемаКомпоновкиДанных,
		ВариантОтчета.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
	Если ТаблицаРезультата = Неопределено ИЛИ ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОповещений  = ТекущаяДатаСеанса();
	
	НаборЗаписейНапоминания = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	НаборЗаписейНапоминания.Отбор.Автор.Установить(Пользователи.ТекущийПользователь());
	НаборЗаписейНапоминания.Прочитать();
	
	Для Каждого ТекСтрока Из ТаблицаРезультата Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Автомобиль) ИЛИ ТекСтрока.ОсталосьДнейДоВыбытия = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписейНапоминания.Добавить();
		НоваяЗапись.Пользователь    = ТекСтрока.ПодразделениеКомпанииОтветственныйЗаТД;
		НоваяЗапись.Автор           = Пользователи.ТекущийПользователь();
		НоваяЗапись.ВремяСобытия    = ДатаОповещений;
		НоваяЗапись.Источник        = ТекСтрока.Автомобиль;
		НоваяЗапись.СрокНапоминания = ДатаОповещений;
		Если ТекСтрока.ОсталосьДнейДоВыбытия <= 0 Тогда
			НоваяЗапись.Описание = СтрШаблон(
				НСтр("ru = 'Необходимо вывести из тест-драйва автомобиль: <%1>.'"),
				СокрЛП(ТекСтрока.Автомобиль));
		Иначе
			НоваяЗапись.Описание = СтрШаблон(
				НСтр("ru = 'Через %1 %2 необходимо вывести из тест-драйва автомобиль: <%3>.'"),
				СокрЛП(ТекСтрока.ОсталосьДнейДоВыбытия),
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(ТекСтрока.ОсталосьДнейДоВыбытия),
				СокрЛП(ТекСтрока.Автомобиль));
		КонецЕсли;
			
		НоваяЗапись.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		НоваяЗапись.ИнтервалВремениНапоминания        = 0;
		НоваяЗапись.Расписание                        = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(9));
		НоваяЗапись.ПредставлениеИсточника            = НСтр("ru = 'Вывод автомобилей из тест-драйва'");
		НоваяЗапись.ДатаСоздания                      = ДатаОповещений;
		НоваяЗапись.Активность                        = Истина;
		
	КонецЦикла;
	
	// записываем сформированные напоминания
	Попытка
		НаборЗаписейНапоминания.Записать(Истина); 
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи напоминаний'"),
		УровеньЖурналаРегистрации.Предупреждение,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Формирует напоминания о необходимости заказа авто для тест-драйва
//
// Параметры:
//	СтруктураПараметров - Структура - Структура параметров.
//
Процедура РасчетЗаказаАвтомобиляПодТестДрайв(Знач СтруктураПараметров = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СрокОповещения") Тогда
		СрокОповещения = СтруктураПараметров.СрокОповещения;
	Иначе
		СрокОповещения = 0;
	КонецЕсли;
	
	Отчет = Отчеты.ПланЗаказовАвтомобилейДляТестДрайва.Создать();
	
	ВариантОтчета    = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек["Основной"];
	
	Если НЕ ВариантОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОкончания") = Неопределено Тогда
		ВариантОтчета.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Показатели      = ВариантОтчета.Настройки.Выбор;
	Отбор           = ВариантОтчета.Настройки.Отбор;
	СтруктураОтчета = ВариантОтчета.Настройки.Структура;
	Порядок         = ВариантОтчета.Настройки.Порядок;
	
	СтруктураОтчета.Очистить();
	Порядок.Элементы.Очистить();
	
	Показатели.Элементы.Очистить();
	
	НовыйПоказатель = Показатели.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НовыйПоказатель.Использование = Истина;
	
	НовыйПоказатель = Показатели.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовыйПоказатель.Использование = Истина;
	НовыйПоказатель.Поле          = Новый ПолеКомпоновкиДанных("СрокТочкиЗаказа");
	
	// ТочкаЗаказа
	КоличествоПодчиненных = Отбор.Элементы.Количество()- 1;
	Пока КоличествоПодчиненных >= 0 Цикл
		Отбор.Элементы.Удалить(Отбор.Элементы[КоличествоПодчиненных]);
		КоличествоПодчиненных = КоличествоПодчиненных - 1;
	КонецЦикла;
	
	ТекОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ТекОтбор.Использование  = Истина;
	ТекОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СрокТочкиЗаказа");
	ТекОтбор.ПравоеЗначение = СрокОповещения;
	ТекОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	
	НоваяГруппировка = СтруктураОтчета.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	НоваяГруппировка.Использование = Истина;
	
	Группировка = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
	Группировка.Использование  = Истина;
	
	НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование  = Истина;
	НовоеПоле.Поле           = Новый ПолеКомпоновкиДанных("Автомобиль");
	
	НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование  = Истина;
	НовоеПоле.Поле           = Новый ПолеКомпоновкиДанных("ПодразделениеКомпании.ОтветственныйЗаТД");
	
	НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование  = Истина;
	НовоеПоле.Поле           = Новый ПолеКомпоновкиДанных("Модель");
	
	НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;
	
	НовоеПоле = НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;
	
	ДатаПробега = КонецДня(ТекущаяДатаСеанса());
	ДатаКонца   = ОтчетыПлатформаСервер.КомпоновщикПолучитьЗначениеПараметра("КонецПериода", ВариантОтчета.Настройки);
	ДатаПробега = Мин(ДатаКонца, ДатаКонца);
	Отчет.СхемаКомпоновкиДанных.Параметры.ДатаПробега.Значение = ДатаПробега;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		Отчет.СхемаКомпоновкиДанных,
		ВариантОтчета.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
	Если ТаблицаРезультата = Неопределено ИЛИ ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОповещений = ТекущаяДатаСеанса();
	
	НаборЗаписейНапоминания = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	НаборЗаписейНапоминания.Отбор.Автор.Установить(Пользователи.ТекущийПользователь());
	НаборЗаписейНапоминания.Прочитать();
	
	Для Каждого ТекСтрока Из ТаблицаРезультата Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Автомобиль) ИЛИ ТекСтрока.СрокТочкиЗаказа = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписейНапоминания.Добавить();
		НоваяЗапись.Пользователь    = ТекСтрока.ПодразделениеКомпанииОтветственныйЗаТД;
		НоваяЗапись.Автор           = Пользователи.ТекущийПользователь();
		НоваяЗапись.ВремяСобытия    = ДатаОповещений;
		НоваяЗапись.СрокНапоминания = ДатаОповещений;
		
		Если ТекСтрока.СрокТочкиЗаказа <= 0 Тогда
			НоваяЗапись.Источник = ТекСтрока.Автомобиль;
			НоваяЗапись.Описание = СтрШаблон(
				НСтр("ru = 'Необходимо заказать новый автомобиль для тест-драйва, модель: <%1>.'"),
				СокрЛП(ТекСтрока.Модель));
		Иначе
			НоваяЗапись.Источник = ТекСтрока.Модель;
			НоваяЗапись.Описание = СтрШаблон(
				НСтр("ru = 'Через %1 %2 необходимо заказать новый автомобиль для тест-драйва, модель: <%3>.'"),
				СокрЛП(ТекСтрока.СрокТочкиЗаказа),
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(ТекСтрока.СрокТочкиЗаказа),
				СокрЛП(ТекСтрока.Модель));
		КонецЕсли;
		
		НоваяЗапись.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		НоваяЗапись.ИнтервалВремениНапоминания        = 0;
		НоваяЗапись.Расписание                        = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(9));
		НоваяЗапись.ПредставлениеИсточника            = НСтр("ru = 'Заказ автомобилей для тест-драйва'");
		НоваяЗапись.ДатаСоздания                      = ДатаОповещений;
		НоваяЗапись.Активность                        = Истина;
		
	КонецЦикла;
	
	// записываем сформированные напоминания
	Попытка
		НаборЗаписейНапоминания.Записать(Истина); 
	Исключение  
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи напоминаний'"),
		УровеньЖурналаРегистрации.Предупреждение,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
