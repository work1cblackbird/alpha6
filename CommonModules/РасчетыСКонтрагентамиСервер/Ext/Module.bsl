
#Область ПрограммныйИнтерфейс

// Проверка наличия зачета оплаты документа в качестве аванса
//
// Параметры:
//  Объект - ДокументОбъект - Объект, для которого выполняется обработка события.
//  Отказ  - Булево         - Признак отказа от совершения операции.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ЕстьЗачетАвансаПоДокументу(Объект, Отказ) Экспорт
	
	Если 
		Не ПраваИНастройкиПользователя.Значение("ЗапретитьОтменуПроведенияДокументаОплатыПриЗачетеАванса", Объект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РасчетыСКонтрагентами.Контрагент) КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РасчетыСКонтрагентами.ДоговорВзаиморасчетов) КАК ДоговорВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
		|ГДЕ
		|	РасчетыСКонтрагентами.Регистратор <> &ДокументОплаты
		|	И РасчетыСКонтрагентами.ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|	И РасчетыСКонтрагентами.ДокументРасчетов = &ДокументОплаты";
	
	Запрос.УстановитьПараметр("ДокументОплаты", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(
				НСтр("ru = 'Аванс контрагента ""%1"" по договору ""%2"" был полностью или частично распределен.'"),
						Выборка.Контрагент,
						Выборка.ДоговорВзаиморасчетов
					),
					Объект,,, Отказ
				);
		
	Возврат Истина;
	
КонецФункции

// Процедура выполняет заполнение реквизита "ОстатокСуммы" табличной части "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяТабличнойЧастиЗачетаАванса",
		"ЗачетАвансов");
	
	Если Не ЕстьРеквизит(Объект, ИмяТабличнойЧасти)
		ИЛИ Не ЕстьРеквизит(Объект, "СуммаОстаток", ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыДействия = Неопределено Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		ПараметрыДействия = МенеджерДокумента.ПолучитьПараметрыДействия(Объект);
	КонецЕсли;
	РасчетыСПокупателем = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РасчетыСПокупателем", Истина);
	ИмяОрганизации = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяОрганизации",
		"Организация");
	ИмяКонтрагента = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяКонтрагента",
		"Контрагент");
	ИмяДоговора = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяДоговора",
		"ДоговорВзаиморасчетов");
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			ДатаПолучения = Объект.ДатаЗакрытия;
		Иначе
			ДатаПолучения = Объект.ДатаОкончания;
		КонецЕсли;
		МоментВремени = ?(ЗначениеЗаполнено(ДатаПолучения), ДатаПолучения, Неопределено);
	Иначе
		МоментВремени = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка.МоментВремени(), Неопределено);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК ДокументАванса,
	|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА &РасчетыСПокупателем
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			&МоментВремени,
	|			ДоговорВзаиморасчетов = &Договор
	|				И Контрагент = &Контрагент
	|				И Организация = &Организация
	|				И ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|				И ДокументРасчетов В (&СписокДокументовОплат)) КАК РасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РасчетыСПокупателем
	|				ТОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток < 0
	|			ИНАЧЕ РасчетыСКонтрагентамиОстатки.СуммаОстаток > 0
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("РасчетыСПокупателем", РасчетыСПокупателем);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("Договор", Объект[ИмяДоговора]);
	Запрос.УстановитьПараметр("Организация", Объект[ИмяОрганизации]);
	Запрос.УстановитьПараметр("Контрагент", Объект[ИмяКонтрагента]);
	Запрос.УстановитьПараметр(
		"СписокДокументовОплат",
		Объект[ИмяТабличнойЧасти].Выгрузить().ВыгрузитьКолонку("ДокументАванса"));
	
	ТаблицаОстковПоОплатам = Запрос.Выполнить().Выгрузить();
	
	ОтборСтрок = Новый Структура("ДокументАванса");
	Для Каждого СтрокаАванса Из Объект[ИмяТабличнойЧасти] Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаАванса);
		НайденныеСтроки = ТаблицаОстковПоОплатам.НайтиСтроки(ОтборСтрок);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаАванса.СуммаОстаток = 0;
		Иначе
			СтрокаАванса.СуммаОстаток = НайденныеСтроки[0].СуммаОстаток;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия) Экспорт
	
	ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект, ПараметрыДействия);
	
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяТабличнойЧастиЗачетаАванса",
		"ЗачетАвансов");
	
	// Расчитаем сумму оплаты
	Если ЕстьРеквизит(Объект, "СуммаОстаток", ИмяТабличнойЧасти)
		И Строка.Сумма = 0 Тогда
		
		ИмяДоговораВзаиморасчетов = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыДействия, "ИмяДоговора", "ДоговорВзаиморасчетов");
		СуммаДокумента = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыДействия, "СуммаДокумента", 0);
		
		ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект[ИмяДоговораВзаиморасчетов], "ВалютаВзаиморасчетов");
			
		Если СуммаДокумента = 0 Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			ИтогиОперации = МенеджерОбъекта.РассчитатьИтогиОперации(Объект);
			СуммаДокумента = ИтогиОперации.СуммаДокумента;
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
			СуммаДокумента = СуммаДокумента;
		Иначе
			СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаДокумента,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента,
				ВалютаВзаиморасчетов,
				Объект.Дата);
		КонецЕсли;
		
		СуммаАванса = Объект[ИмяТабличнойЧасти].Итог("Сумма");
		
		Строка.Сумма = Мин(Строка.СуммаОстаток, СуммаДокумента - СуммаАванса);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяем наличие в комиссионных документах маркируемых и прослеживаемых товаров
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - заполняемый документ.
//  Отказ - Булево - признак отказа операции.
//
Процедура ПроверитьКорректностьЗачетаАвансов(Объект, Отказ) Экспорт
	
	// Проверим, что указано в качестве аванса не больше, чем сумма документа
	Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		ИтоговыеСуммы = МенеджерДокумента.РассчитатьИтогиОперации(Объект);
		
		ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов");
		СуммаДокументаВВалютеДоговора = ?(
			Объект.ВалютаДокумента = ВалютаДоговора,
			ИтоговыеСуммы.СуммаДокумента,
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ИтоговыеСуммы.СуммаДокумента,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента,
				ВалютаДоговора,
				Объект.КурсВалютыВзаиморасчетов));
		
		Если СуммаДокументаВВалютеДоговора < Объект.ЗачетАвансов.Итог("Сумма") Тогда
			
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Сумма зачета оплаты превышает сумму документа.'"),
				Объект
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение авансовых платежей для их зачета при формировании долга
//
// Параметры:
//  РасчетыСКонтрагентами	 - ТаблицаЗначений - Таблица для получения результата зачета авансов.
//  ДанныеДокумента			 - Структура - Информация о документе для поиска авансов.
//  РасчетыСПокупателем		 - Булево - Признак того, что производим расчеты с покупателем.
//  ДляКорректировки		 - Булево - Признак вида операции.
//
Процедура ЗачестьОплатуПоСделке(
		РасчетыСКонтрагентами,
		ДанныеДокумента,
		РасчетыСПокупателем = Истина,
		ДляКорректировки = Ложь) Экспорт
	
	СуммаОплатыВВалютеДокумента = (ДанныеДокумента.ВалютаДокумента = ДанныеДокумента.ВалютаДоговора);
	СуммаОплатыПоДокументу = ДанныеДокумента.Сумма;
	
	Если СуммаОплатыВВалютеДокумента Тогда
		СуммаОплаты = СуммаОплатыПоДокументу;
	Иначе
		СуммаОплаты = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаОплатыПоДокументу,
				ДанныеДокумента.ВалютаДокумента,
				ДанныеДокумента.КурсДокумента,
				ДанныеДокумента.ВалютаДоговора,
				ДанныеДокумента.КурсВалютыВзаиморасчетов),
			2);
	КонецЕсли;
	
	Если СуммаОплаты = 0 Тогда
		// Нет суммы для списания долга по сделке
		Возврат;
	КонецЕсли;
	
	МоментВремени = Новый МоментВремени(ДанныеДокумента.Дата, ДанныеДокумента.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляПолученияОстатков(Не РасчетыСПокупателем, Ложь);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("Организация", ДанныеДокумента.Организация);
	Запрос.УстановитьПараметр("Контрагент", ДанныеДокумента.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДанныеДокумента.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("ДокументРасчетов", ДанныеДокумента.Сделка);
	Запрос.УстановитьПараметр("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура;
	СтруктураПараметровБлокировки.Вставить("ТипТаблицы", "РегистрНакопления");
	СтруктураПараметровБлокировки.Вставить("ИмяТаблицы", "РасчетыСКонтрагентами");
	
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДанныеДокумента.Дата));
	ЗначенияБлокировки.Вставить("Контрагент", ДанныеДокумента.Контрагент);
	ЗначенияБлокировки.Вставить("ДоговорВзаиморасчетов", ДанныеДокумента.ДоговорВзаиморасчетов);
	ЗначенияБлокировки.Вставить("Организация", ДанныеДокумента.Организация);
	ЗначенияБлокировки.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока СуммаОплаты <> 0 И Выборка.Следующий() Цикл
		
		СуммаОстаток = ?(Выборка.Сумма < 0 И Не ДляКорректировки, -Выборка.Сумма, Выборка.Сумма);
		
		НоваяСтрока = РасчетыСКонтрагентами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
		НоваяСтрока.ВидДвижения = ?(
			РасчетыСПокупателем ИЛИ (ДляКорректировки И Не РасчетыСПокупателем),
			ВидДвиженияНакопления.Расход,
			ВидДвиженияНакопления.Приход);
		НоваяСтрока.Период = ДанныеДокумента.Дата;
		НоваяСтрока.Регистратор = ДанныеДокумента.Ссылка;
		НоваяСтрока.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
		НоваяСтрока.ДокументРасчетов = Выборка.ДокументРасчетов;
		НоваяСтрока.Заказ = Выборка.Заказ;
		
		// Сформируем сумму
		Если (СуммаОплаты > 0 И СуммаОплаты >= СуммаОстаток)
			ИЛИ (ДляКорректировки И СуммаОплаты < 0 И СуммаОплаты <= СуммаОстаток) Тогда
			
			НоваяСтрока.Сумма = СуммаОстаток;
			НоваяСтрока.СуммаУпр = ?(
				Выборка.СуммаУпр < 0 И Не ДляКорректировки,
				-Выборка.СуммаУпр,
				Выборка.СуммаУпр);
			НоваяСтрока.СуммаБаз = ?(
				Выборка.СуммаБаз < 0 И Не ДляКорректировки,
				-Выборка.СуммаБаз,
				Выборка.СуммаБаз);
			СуммаОплаты = СуммаОплаты - СуммаОстаток;
			
			Если СуммаОплатыВВалютеДокумента Тогда
				СуммаОплатыПоДокументу = СуммаОплаты;
			Иначе
				СуммаОплатыПоДокументу = Окр(
					РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						СуммаОплаты,
						ДанныеДокумента.ВалютаДоговора,
						ДанныеДокумента.КурсВалютыВзаиморасчетов,
						ДанныеДокумента.ВалютаДокумента,
						ДанныеДокумента.КурсДокумента),
					2);
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.Сумма = СуммаОплаты;
			
			НоваяСтрока.СуммаУпр = Окр(СуммаОплаты * ?(
				Выборка.СуммаУпр < 0 И Не ДляКорректировки,
				-Выборка.СуммаУпр,
				Выборка.СуммаУпр) / ?(СуммаОстаток = 0, 1, СуммаОстаток),
				2);
			НоваяСтрока.СуммаБаз = Окр(СуммаОплаты * ?(
				Выборка.СуммаБаз < 0 И Не ДляКорректировки,
				-Выборка.СуммаБаз,
				Выборка.СуммаБаз) / ?(СуммаОстаток = 0, 1, СуммаОстаток),
				2);
			
			СуммаОплатыПоДокументу = 0;
			СуммаОплаты = 0;
			
		КонецЕсли;
		
		НоваяСтрока.СпособЗачета = ДанныеДокумента.СпособЗачетаАвансов;
		НоваяСтрока.ВалютаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ДокументРасчетов, "ВалютаДокумента");
		Если ДляКорректировки Тогда
			НоваяСтрока.ВидОперации = ?(РасчетыСПокупателем,
				Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности,
				Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности);
		Иначе
			НоваяСтрока.ВидОперации = ?(РасчетыСПокупателем,
				Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеДебиторскойЗадолженности,
				Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеКредиторскойЗадолженности);
		КонецЕсли;
		НоваяСтрока.Активность = Истина;
		
	КонецЦикла;
	
	// Обновим сумму остатка для зачета аванса
	Если РасчетыСПокупателем Тогда
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности;
	Иначе
		ВидДвижения = ВидДвиженияНакопления.Приход;
		ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности;
	КонецЕсли;
	
	Если ДляКорректировки И СуммаОплатыПоДокументу < 0 Тогда
		СуммаОплатыПоДокументу = -СуммаОплатыПоДокументу;
	КонецЕсли;
	
	ДобавитьЗаписьРасчетаКонтрагентов(
		ДанныеДокумента,
		РасчетыСКонтрагентами,
		СуммаОплатыПоДокументу,
		ВидДвижения,
		ВидОперации,
		ДанныеДокумента.Ссылка,
		Перечисления.ТипыРасчетов.Аванс,
		Истина);
	
КонецПроцедуры

// Описание данных для записи в регистр "Расчеты с контрагентами"
//
// Параметры:
//  РасчетыСКонтрагентами	 - ТаблицаЗначений - Описание данных для записи в регистр.
//  ДанныеОбОплате			 - Структура - Данные для заполнения записей регистра.
//  ЗачетАванса				 - ТабличцаЗначений - Описание документов для зачета авансовых платежей.
//  Отказ					 - Булево - Признак того, что возникла ошибка при формировании записей.
//  РасчетыСПокупателем		 - Булево - Признак того, что производим расчеты с покупателем.
//  СписокЗаказов			 - Массив - Заказы, которые необходимо учитывать при поиске авансовых платежей.
//
Процедура ДополнитьРасчетыСКонтрагентом(
	РасчетыСКонтрагентами,
	ДанныеОбОплате,
	Знач ЗачетАванса,
	Отказ,
	РасчетыСПокупателем = Истина,
	Знач СписокЗаказов = Неопределено) Экспорт
	
	Если ДанныеОбОплате.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокЗаказов = Неопределено Тогда
		СписокЗаказов = Новый Массив;
	КонецЕсли;
	
	СуммаОплатыВВалютеДокумента = (ДанныеОбОплате.ВалютаДокумента = ДанныеОбОплате.ВалютаДоговора);
	
	Если СуммаОплатыВВалютеДокумента Тогда
		ОстатокДолга = ДанныеОбОплате.Сумма;
	Иначе
		ОстатокДолга = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ДанныеОбОплате.Сумма,
				ДанныеОбОплате.ВалютаДокумента,
				ДанныеОбОплате.КурсДокумента,
				ДанныеОбОплате.ВалютаДоговора,
				ДанныеОбОплате.КурсВалютыВзаиморасчетов),
			2);
	КонецЕсли;
	
	// Необходимо проверить зачет аванса
	Отказ = Отказ
		ИЛИ Не ЗачетАвансаПоДокументу(
				РасчетыСКонтрагентами,
				ДанныеОбОплате,
				ОстатокДолга,
				ЗачетАванса,
				РасчетыСПокупателем,
				СписокЗаказов);
	
	Если РасчетыСПокупателем Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
		ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности;
	Иначе
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности;
	КонецЕсли;
	ДобавитьЗаписьРасчетаКонтрагентов(
		ДанныеОбОплате,
		РасчетыСКонтрагентами,
		ОстатокДолга,
		ВидДвижения,
		ВидОперации,
		ДанныеОбОплате.Сделка);
	
КонецПроцедуры

Процедура ДобавитьЗаписьРасчетаКонтрагентов(
	ДанныеОбОплате,
	РасчетыСКонтрагентами,
	Сумма,
	ВидДвижения,
	ВидОперации,
	ДокументРасчетов,
	Знач ТипРасчета = Неопределено,
	ВВалютеДокумента = Ложь) Экспорт
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипРасчетаКонтрагента = ?(ТипРасчета = Неопределено, Перечисления.ТипыРасчетов.Оплата, ТипРасчета);
	
	НоваяЗапись = РасчетыСКонтрагентами.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеОбОплате);
	
	НоваяЗапись.ВидДвижения = ВидДвижения;
	НоваяЗапись.Период = ДанныеОбОплате.Дата;
	НоваяЗапись.Регистратор = ДанныеОбОплате.Ссылка;
	НоваяЗапись.ТипРасчета = ТипРасчетаКонтрагента;
	НоваяЗапись.ДокументРасчетов = ДокументРасчетов;
	
	Если ВВалютеДокумента Тогда
		НоваяЗапись.Сумма = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Сумма,
				ДанныеОбОплате.ВалютаДокумента,
				ДанныеОбОплате.КурсДокумента,
				ДанныеОбОплате.ВалютаДоговора,
				ДанныеОбОплате.КурсВалютыВзаиморасчетов),
			2);
	Иначе
		НоваяЗапись.Сумма = Сумма;
		Если Не ДанныеОбОплате.ВалютаДокумента = ДанныеОбОплате.ВалютаДоговора Тогда
			Сумма = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Сумма,
					ДанныеОбОплате.ВалютаДоговора,
					ДанныеОбОплате.КурсВалютыВзаиморасчетов,
					ДанныеОбОплате.ВалютаДокумента,
					ДанныеОбОплате.КурсДокумента),
				2);
		КонецЕсли;
	КонецЕсли;
	
	НоваяЗапись.СуммаУпр = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаУпр,
			ДанныеОбОплате.КурсВалютыУпр),
		2);
	НоваяЗапись.СуммаБаз = Окр(
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			Сумма,
			ДанныеОбОплате.ВалютаДокумента,
			ДанныеОбОплате.КурсДокумента,
			ДанныеОбОплате.ВалютаРегл,
			ДанныеОбОплате.КурсВалютыРегл),
		2);
		
	НоваяЗапись.Курс = ДанныеОбОплате.КурсДокумента;
	НоваяЗапись.ВалютаПлатежа = ДанныеОбОплате.ВалютаДокумента;
	НоваяЗапись.СпособЗачета = ДанныеОбОплате.СпособЗачетаАвансов;
	НоваяЗапись.ВидОперации = ВидОперации;
	НоваяЗапись.Активность = Истина;
	
КонецПроцедуры

Функция РасчетыСКонтрагентамиПоДокументу(Документ, СУчетомКорректировки = Ложь, ВключатьВозвраты = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДокументовКорректировки = Новый Массив;
	СписокДокументовКорректировки.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	СписокДокументовКорректировки.Добавить(Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей"));
	СписокДокументовКорректировки.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	СписокДокументовКорректировки.Добавить(Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей"));
	СписокДокументовКорректировки.Добавить(Тип("ДокументСсылка.АктРазногласий"));
	
	Запрос = Новый Запрос;
	
	Если СУчетомКорректировки И СписокДокументовКорректировки.Найти(ТипЗнч(Документ)) <> Неопределено Тогда
		
		Основания = Новый Массив;
		Основания.Добавить(Документ);
		ТекущийДокументОснование = Документ;
		ТипКорректировки = ТипЗнч(Документ);
		
		Пока ТипЗнч(ТекущийДокументОснование) = ТипКорректировки Цикл
			ТекущийДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийДокументОснование, "ДокументОснование");
			Основания.Добавить(ТекущийДокументОснование);
		КонецЦикла;
		
		Если ВключатьВозвраты Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			|	РасчетыСКонтрагентами.ВидДвижения КАК ВидДвижения,
			|	РасчетыСКонтрагентами.Регистратор КАК Регистратор,
			|	РасчетыСКонтрагентами.Организация КАК Организация,
			|	РасчетыСКонтрагентами.Контрагент КАК Контрагент,
			|	РасчетыСКонтрагентами.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
			|	РасчетыСКонтрагентами.ТипРасчета КАК ТипРасчета,
			|	РасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетов,
			|	РасчетыСКонтрагентами.Заказ КАК Заказ,
			|	СУММА(РасчетыСКонтрагентами.Сумма) КАК Сумма,
			|	СУММА(РасчетыСКонтрагентами.СуммаУпр) КАК СуммаУпр,
			|	СУММА(РасчетыСКонтрагентами.СуммаБаз) КАК СуммаБаз
			|ПОМЕСТИТЬ КорректировкаВзаиморасчетов
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
			|ГДЕ
			|	РасчетыСКонтрагентами.Регистратор В(&Основания)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКонтрагентами.Организация,
			|	РасчетыСКонтрагентами.Контрагент,
			|	РасчетыСКонтрагентами.ДоговорВзаиморасчетов,
			|	РасчетыСКонтрагентами.ТипРасчета,
			|	РасчетыСКонтрагентами.ДокументРасчетов,
			|	РасчетыСКонтрагентами.Заказ,
			|	РасчетыСКонтрагентами.ВидДвижения,
			|	РасчетыСКонтрагентами.Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаВзаиморасчетов.ВидДвижения КАК ВидДвижения,
			|	КорректировкаВзаиморасчетов.Организация КАК Организация,
			|	КорректировкаВзаиморасчетов.Контрагент КАК Контрагент,
			|	КорректировкаВзаиморасчетов.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
			|	КорректировкаВзаиморасчетов.ТипРасчета КАК ТипРасчета,
			|	КорректировкаВзаиморасчетов.ДокументРасчетов КАК ДокументРасчетов,
			|	КорректировкаВзаиморасчетов.Заказ КАК Заказ,
			|	СУММА(КорректировкаВзаиморасчетов.Сумма) КАК Сумма,
			|	СУММА(КорректировкаВзаиморасчетов.СуммаУпр) КАК СуммаУпр,
			|	СУММА(КорректировкаВзаиморасчетов.СуммаБаз) КАК СуммаБаз,
			|	0 КАК СуммаДоКорректировки,
			|	0 КАК СуммаУпрДоКорректировки,
			|	0 КАК СуммаБазДоКорректировки,
			|	0 КАК СуммаРазница,
			|	0 КАК СуммаРазницаУпр,
			|	0 КАК СуммаРазницаБаз
			|ИЗ
			|	КорректировкаВзаиморасчетов КАК КорректировкаВзаиморасчетов
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаВзаиморасчетов.ДоговорВзаиморасчетов,
			|	КорректировкаВзаиморасчетов.ДокументРасчетов,
			|	КорректировкаВзаиморасчетов.Контрагент,
			|	КорректировкаВзаиморасчетов.Заказ,
			|	КорректировкаВзаиморасчетов.ТипРасчета,
			|	КорректировкаВзаиморасчетов.ВидДвижения,
			|	КорректировкаВзаиморасчетов.Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаВзаиморасчетов.ВидДвижения,
			|	КорректировкаВзаиморасчетов.Организация,
			|	КорректировкаВзаиморасчетов.Контрагент,
			|	КорректировкаВзаиморасчетов.ДоговорВзаиморасчетов,
			|	КорректировкаВзаиморасчетов.ТипРасчета,
			|	КорректировкаВзаиморасчетов.ДокументРасчетов,
			|	КорректировкаВзаиморасчетов.Заказ,
			|	0,
			|	0,
			|	0,
			|	СУММА(КорректировкаВзаиморасчетов.Сумма),
			|	СУММА(КорректировкаВзаиморасчетов.СуммаУпр),
			|	СУММА(КорректировкаВзаиморасчетов.СуммаБаз),
			|	0,
			|	0,
			|	0
			|ИЗ
			|	КорректировкаВзаиморасчетов КАК КорректировкаВзаиморасчетов
			|ГДЕ
			|	КорректировкаВзаиморасчетов.Регистратор В(&ОснованияБезКорректировки)
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаВзаиморасчетов.ДоговорВзаиморасчетов,
			|	КорректировкаВзаиморасчетов.ДокументРасчетов,
			|	КорректировкаВзаиморасчетов.Контрагент,
			|	КорректировкаВзаиморасчетов.Заказ,
			|	КорректировкаВзаиморасчетов.ТипРасчета,
			|	КорректировкаВзаиморасчетов.ВидДвижения,
			|	КорректировкаВзаиморасчетов.Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаВзаиморасчетов.ВидДвижения,
			|	КорректировкаВзаиморасчетов.Организация,
			|	КорректировкаВзаиморасчетов.Контрагент,
			|	КорректировкаВзаиморасчетов.ДоговорВзаиморасчетов,
			|	КорректировкаВзаиморасчетов.ТипРасчета,
			|	КорректировкаВзаиморасчетов.ДокументРасчетов,
			|	КорректировкаВзаиморасчетов.Заказ,
			|	0,
			|	0,
			|	0,
			|	0,
			|	0,
			|	0,
			|	СУММА(КорректировкаВзаиморасчетов.Сумма),
			|	СУММА(КорректировкаВзаиморасчетов.СуммаУпр),
			|	СУММА(КорректировкаВзаиморасчетов.СуммаБаз)
			|ИЗ
			|	КорректировкаВзаиморасчетов КАК КорректировкаВзаиморасчетов
			|ГДЕ
			|	КорректировкаВзаиморасчетов.Регистратор В(&Корректировка)
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаВзаиморасчетов.ДоговорВзаиморасчетов,
			|	КорректировкаВзаиморасчетов.ДокументРасчетов,
			|	КорректировкаВзаиморасчетов.Контрагент,
			|	КорректировкаВзаиморасчетов.Заказ,
			|	КорректировкаВзаиморасчетов.ТипРасчета,
			|	КорректировкаВзаиморасчетов.ВидДвижения,
			|	КорректировкаВзаиморасчетов.Организация";
			ОснованияБезКорректировки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Основания);
			ОснованияБезКорректировки.Удалить(0);
			Запрос.УстановитьПараметр("ОснованияБезКорректировки", ОснованияБезКорректировки);
			Запрос.УстановитьПараметр("Корректировка", Документ);
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ
			|	РасчетыСКонтрагентами.ВидДвижения КАК ВидДвижения,
			|	РасчетыСКонтрагентами.Организация КАК Организация,
			|	РасчетыСКонтрагентами.Контрагент КАК Контрагент,
			|	РасчетыСКонтрагентами.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
			|	РасчетыСКонтрагентами.ТипРасчета КАК ТипРасчета,
			|	РасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетов,
			|	РасчетыСКонтрагентами.Заказ КАК Заказ,
			|	СУММА(РасчетыСКонтрагентами.Сумма) КАК Сумма,
			|	СУММА(РасчетыСКонтрагентами.СуммаУпр) КАК СуммаУпр,
			|	СУММА(РасчетыСКонтрагентами.СуммаБаз) КАК СуммаБаз
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
			|ГДЕ
			|	РасчетыСКонтрагентами.Регистратор В(&Основания)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКонтрагентами.Контрагент,
			|	РасчетыСКонтрагентами.Организация,
			|	РасчетыСКонтрагентами.ДоговорВзаиморасчетов,
			|	РасчетыСКонтрагентами.ДокументРасчетов,
			|	РасчетыСКонтрагентами.ВидДвижения,
			|	РасчетыСКонтрагентами.Заказ,
			|	РасчетыСКонтрагентами.ТипРасчета";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Основания", Основания);
		
	Иначе
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РасчетыСКонтрагентами.Период КАК Период,
			|	РасчетыСКонтрагентами.Регистратор КАК Регистратор,
			|	РасчетыСКонтрагентами.НомерСтроки КАК НомерСтроки,
			|	РасчетыСКонтрагентами.Активность КАК Активность,
			|	РасчетыСКонтрагентами.ВидДвижения КАК ВидДвижения,
			|	РасчетыСКонтрагентами.Организация КАК Организация,
			|	РасчетыСКонтрагентами.Контрагент КАК Контрагент,
			|	РасчетыСКонтрагентами.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
			|	РасчетыСКонтрагентами.ТипРасчета КАК ТипРасчета,
			|	РасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетов,
			|	РасчетыСКонтрагентами.Заказ КАК Заказ,
			|	РасчетыСКонтрагентами.Сумма КАК Сумма,
			|	РасчетыСКонтрагентами.СуммаУпр КАК СуммаУпр,
			|	РасчетыСКонтрагентами.СуммаБаз КАК СуммаБаз,
			|	РасчетыСКонтрагентами.ХозОперация КАК ХозОперация,
			|	РасчетыСКонтрагентами.Курс КАК Курс,
			|	РасчетыСКонтрагентами.ВалютаПлатежа КАК ВалютаПлатежа,
			|	РасчетыСКонтрагентами.СпособЗачета КАК СпособЗачета,
			|	РасчетыСКонтрагентами.ВидОперации КАК ВидОперации
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
			|ГДЕ
			|	РасчетыСКонтрагентами.Регистратор = &Документ";
		Запрос.УстановитьПараметр("Документ", Документ);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДвиженияРасчетовСКонтрагентамиПоДокументу(Объект, ШапкаДокумента) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ТаблицыДвиженийДокумента")
		И Объект.ДополнительныеСвойства.ТаблицыДвиженийДокумента.Свойство("РасчетыСКонтрагентами") Тогда
		РасчетыСКонтрагентами = Объект.ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами;
	Иначе
		РасчетыСКонтрагентами = Объект.Движения.РасчетыСКонтрагентами.Выгрузить();
		Если РасчетыСКонтрагентами.Количество() = 0 Тогда
			РасчетыСКонтрагентами = РасчетыСКонтрагентамиПоДокументу(ШапкаДокумента.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасчетыСКонтрагентами;
	
КонецФункции

Функция СуммовыеПоказателиРасчетаСКонтрагентами(РасчетыСКонтрагентами, УсловиеОтбора) Экспорт
	
	Сумма = 0;
	СуммаУпр = 0;
	СуммаБаз = 0;
	НайденныеСтроки = РасчетыСКонтрагентами.НайтиСтроки(УсловиеОтбора); 
	
	Для Каждого СтрокаОплаты Из НайденныеСтроки Цикл
		Сумма = Сумма + СтрокаОплаты.Сумма;
		СуммаУпр = СуммаУпр + СтрокаОплаты.СуммаУпр;
		СуммаБаз = СуммаБаз + СтрокаОплаты.СуммаБаз;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Сумма", Сумма);
	Результат.Вставить("СуммаУпр", СуммаУпр);
	Результат.Вставить("СуммаБаз", СуммаБаз);
	
	Возврат Результат;
	
КонецФункции

Процедура РаспределитьСуммыПоЧастиТабличнойЧастиДокумента(
		ТаблицаРаспределения,
		СуммаРаспределения,
		СуммаОбщая,
		ИмяСуммы = "СуммаВсего") Экспорт
	
	НоваяСтрока = ТаблицаРаспределения.Добавить();
	НоваяСтрока[ИмяСуммы] = СуммаОбщая - ТаблицаРаспределения.Итог(ИмяСуммы);
	
	ОбработкаСобытийДокументаСервер.РаспределитьСуммуПоТаблице(
		СуммаРаспределения,
		ТаблицаРаспределения,
		ИмяСуммы);
	
	ТаблицаРаспределения.Удалить(НоваяСтрока);
	
КонецПроцедуры

Функция КурсыВалютДляПересчетаСумм(Объект, ДанныеОВалютах) Экспорт
	
	Результат = Новый Соответствие;
	
	// Получим дату расчета и курсы по документу
	ЕстьКурсВалютыВзаиморасчетов = ЕстьРеквизит(Объект, "КурсВалютыВзаиморасчетов");
	ЕстьКурсВалютыУпр = ЕстьРеквизит(Объект, "КурсВалютыУпр");
	
	СписокРеквизитов = Новый Массив;
	СписокРеквизитов.Добавить("Дата");
	
	Если ЕстьКурсВалютыВзаиморасчетов Тогда
		
		СписокРеквизитов.Добавить("КурсВалютыВзаиморасчетов");
		
	КонецЕсли;
	
	Если ЕстьКурсВалютыУпр Тогда
		
		СписокРеквизитов.Добавить("КурсВалютыУпр");
		
	КонецЕсли;
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект,
		СтрСоединить(СписокРеквизитов, ","));
	
	Результат.Вставить(
		ДанныеОВалютах.ВалютаДоговора,
		?(ЕстьКурсВалютыВзаиморасчетов, ДанныеДокумента.КурсВалютыВзаиморасчетов, ДанныеДокумента.Дата));
	Результат.Вставить(
		ДанныеОВалютах.ВалютаУпр,
		?(ЕстьКурсВалютыУпр, ДанныеДокумента.КурсВалютыУпр, ДанныеДокумента.Дата));
	Результат.Вставить(ДанныеОВалютах.ВалютаРегл, ДанныеДокумента.Дата);
	
	Возврат Результат;
	
КонецФункции

Функция ЗачетАвансаПоДокументу(
		РасчетыСКонтрагентами,
		ДанныеДокумента,
		СуммаДолга,
		ДокументыАвансов,
		НачислениеДебеторскойЗадолженности = Истина,
		СписокЗаказов = Неопределено,
		СписыватьАванс = Истина) Экспорт
	
	ЗакрытьАвансыАвтоматически = (ДанныеДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
	ЗакрытьАвансыПоДокументу = (ДанныеДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	
	Если Не (ЗакрытьАвансыАвтоматически ИЛИ ЗакрытьАвансыПоДокументу) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	СписаныАвансыКорректно = Истина;
	Если СписокЗаказов = Неопределено Тогда
		
		СписокЗаказов = Новый Массив;
		
	КонецЕсли;
	СписокЗаказов.Добавить(Неопределено);
	
	// Сформируем данные для зачета аванса
	ИтоговаяСуммаАванса = 0;
	МоментВремени = Новый МоментВремени(ДанныеДокумента.Дата, ДанныеДокумента.Ссылка);
	Запрос = Новый Запрос;
	
	Если ЗакрытьАвансыАвтоматически Тогда
		
		Запрос.Текст = ТекстЗапросаДляПолученияОстатков(НачислениеДебеторскойЗадолженности);
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
		Запрос.УстановитьПараметр("Организация", ДанныеДокумента.Организация);
		Запрос.УстановитьПараметр("Контрагент", ДанныеДокумента.Контрагент);
		Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДанныеДокумента.ДоговорВзаиморасчетов);
		Запрос.УстановитьПараметр("ТипРасчета", Перечисления.ТипыРасчетов.Аванс);
		Запрос.УстановитьПараметр("СписокДокументовОплаты", Метаданные.ОпределяемыеТипы.ДокументыОплаты.Тип.Типы());
		Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
		
	Иначе
		
		Запрос.Текст = ТекстЗапросаДляПолученияОстатковАвансовПоДокументу(НачислениеДебеторскойЗадолженности);
		Запрос.УстановитьПараметр("Организация", ДанныеДокумента.Организация);
		Запрос.УстановитьПараметр("Контрагент", ДанныеДокумента.Контрагент);
		Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДанныеДокумента.ДоговорВзаиморасчетов);
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
		Запрос.УстановитьПараметр("АвансыПоДокументу", ДокументыАвансов);
		Запрос.УстановитьПараметр("РасчетыСПокупателем", НачислениеДебеторскойЗадолженности);
		
	КонецЕсли;
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура;
	СтруктураПараметровБлокировки.Вставить("ТипТаблицы", "РегистрНакопления");
	СтруктураПараметровБлокировки.Вставить("ИмяТаблицы", "РасчетыСКонтрагентами");
	
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДанныеДокумента.Дата));
	ЗначенияБлокировки.Вставить("Контрагент", ДанныеДокумента.Контрагент);
	ЗначенияБлокировки.Вставить("ДоговорВзаиморасчетов", ДанныеДокумента.ДоговорВзаиморасчетов);
	ЗначенияБлокировки.Вставить("Организация", ДанныеДокумента.Организация);
	ЗначенияБлокировки.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Аванс);
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока СуммаДолга > 0 И Выборка.Следующий() Цикл
		
		СуммаОстаток = ?(Выборка.Сумма < 0, -Выборка.Сумма, Выборка.Сумма);
		СуммаОстатокПоДокументу = ?(Выборка.СуммаОстаток < 0, -Выборка.СуммаОстаток, Выборка.СуммаОстаток);
		
		Если СуммаОстаток > СуммаОстатокПоДокументу Тогда
			
			СписаныАвансыКорректно = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'По документу ""%1"" сумма зачета аванса %2 %3 превышает остаток по документу %4 %3'"),
					Выборка.ДокументРасчетов,
					Формат(СуммаОстаток, "ЧДЦ=2"),
					Выборка.ВалютаДоговора,
					Формат(СуммаОстатокПоДокументу, "ЧДЦ=2")));
			
		КонецЕсли;
		
		НоваяСтрока = РасчетыСКонтрагентами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
		НоваяСтрока.ВидДвижения = ?(
			НачислениеДебеторскойЗадолженности,
			ВидДвиженияНакопления.Приход,
			ВидДвиженияНакопления.Расход);
		НоваяСтрока.Период = ДанныеДокумента.Дата;
		НоваяСтрока.Регистратор = ДанныеДокумента.Ссылка;
		НоваяСтрока.ТипРасчета = Перечисления.ТипыРасчетов.Аванс;
		НоваяСтрока.ДокументРасчетов = Выборка.ДокументРасчетов;
		НоваяСтрока.Заказ = Выборка.Заказ;
		
		// Сформируем сумму
		Если (ЗакрытьАвансыАвтоматически И СуммаДолга >= СуммаОстаток)
			ИЛИ (Не ЗакрытьАвансыАвтоматически И СуммаОстаток = СуммаОстатокПоДокументу) Тогда
			
			НоваяСтрока.Сумма = СуммаОстатокПоДокументу;
			НоваяСтрока.СуммаУпр = ?(
				Выборка.СуммаУпр < 0,
				-Выборка.СуммаУпр,
				Выборка.СуммаУпр);
			НоваяСтрока.СуммаБаз = ?(
				Выборка.СуммаБаз < 0,
				-Выборка.СуммаБаз,
				Выборка.СуммаБаз);
			СуммаДолга = СуммаДолга - СуммаОстаток;
			
		ИначеЕсли Не ЗакрытьАвансыАвтоматически И СуммаОстаток < СуммаДолга Тогда
			
			НоваяСтрока.Сумма = СуммаОстаток;
			НоваяСтрока.СуммаУпр = Окр(СуммаОстаток * ?(
				Выборка.СуммаУпр < 0,
				-Выборка.СуммаУпр,
				Выборка.СуммаУпр) / ?(СуммаОстатокПоДокументу = 0, 1, СуммаОстатокПоДокументу),
				2);
			НоваяСтрока.СуммаБаз = Окр(СуммаОстаток * ?(
				Выборка.СуммаБаз < 0,
				-Выборка.СуммаБаз,
				Выборка.СуммаБаз) / ?(СуммаОстатокПоДокументу = 0, 1, СуммаОстатокПоДокументу),
				2);
			СуммаДолга = СуммаДолга - СуммаОстаток;
			
		Иначе
			
			НоваяСтрока.Сумма = СуммаДолга;
			НоваяСтрока.СуммаУпр = Окр(СуммаДолга * ?(
				Выборка.СуммаУпр < 0,
				-Выборка.СуммаУпр,
				Выборка.СуммаУпр) / ?(СуммаОстатокПоДокументу = 0, 1, СуммаОстатокПоДокументу),
				2);
			НоваяСтрока.СуммаБаз = Окр(СуммаДолга * ?(
				Выборка.СуммаБаз < 0,
				-Выборка.СуммаБаз,
				Выборка.СуммаБаз) / ?(СуммаОстатокПоДокументу = 0, 1, СуммаОстатокПоДокументу),
				2);
			СуммаДолга = 0;
			
		КонецЕсли;
		
		НоваяСтрока.ВалютаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ДокументРасчетов, "ВалютаДокумента");
		НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.ЗачетАванса;
		НоваяСтрока.СпособЗачета = ДанныеДокумента.СпособЗачетаАвансов;
		НоваяСтрока.Активность = Истина;
		
		// Укажем данный зачет аванса как долг и сразу его спишем
		СтрокаНачиленияДолга = РасчетыСКонтрагентами.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачиленияДолга, НоваяСтрока,, "Заказ");
		СтрокаНачиленияДолга.ВидДвижения = ?(
			НачислениеДебеторскойЗадолженности,
			ВидДвиженияНакопления.Расход,
			ВидДвиженияНакопления.Приход);
		СтрокаНачиленияДолга.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
		СтрокаНачиленияДолга.ДокументРасчетов = ДанныеДокумента.Ссылка;
		
		// Списываем долг за счет аванса
		Если СписыватьАванс Тогда
			СтрокаЗачетаДолга = РасчетыСКонтрагентами.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗачетаДолга, СтрокаНачиленияДолга);
			СтрокаЗачетаДолга.ВидДвижения = ?(
				НачислениеДебеторскойЗадолженности,
				ВидДвиженияНакопления.Приход,
				ВидДвиженияНакопления.Расход);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписаныАвансыКорректно;
	
КонецФункции

Процедура ЗаполнитьРеквизитСпособЗачетаАвансовДокументов(Параметры) Экспорт
	
	ДокументыСТабличнойЧастью = Новый Структура();
	ДокументыСТабличнойЧастью.Вставить("ВводОстатковВзаиморасчетов", "Состав");
	ДокументыСТабличнойЧастью.Вставить("Выписка", "Состав");
	ДокументыСТабличнойЧастью.Вставить("ВыплатаЗарплаты", "Сотрудники");
	ДокументыСТабличнойЧастью.Вставить("КорректировкаДолга", "Состав");
	ДокументыСТабличнойЧастью.Вставить("НачислениеЗарплаты", "Сотрудники");
	ДокументыСТабличнойЧастью.Вставить("ОтчетКомиссионера", "Товары");
	ДокументыСТабличнойЧастью.Вставить("ОтчетКомитенту", "Товары");
	ДокументыСТабличнойЧастью.Вставить("Чек", "Оплаты");
	ДокументыСТабличнойЧастью.Вставить("ЧекКоррекции", "Оплаты");
	ДокументыСТабличнойЧастью.Вставить("ЧекНаОплату", "Оплаты");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонТекста = "ВЫБРАТЬ ПЕРВЫЕ 10
	|	Документ.Ссылка,
	|	Документ.УдалитьАвтоЗакрытиеСделок,
	|	"""" КАК ИмяТаблицы
	|ИЗ
	|	Документ.#ИмяДокумента КАК Документ
	|ГДЕ
	|	Документ.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)
	|	И НЕ Документ.Ссылка В (&НеустановленныеДокументы)";
	
	ШаблонТекстаТаблицы = "ВЫБРАТЬ ПЕРВЫЕ 10
	|	Документ.Ссылка,
	|	Документ.УдалитьАвтоЗакрытиеСделок,
	|	""#ИмяТаблицы"" КАК ИмяТаблицы
	|ИЗ
	|	Документ.#ИмяДокумента.#ИмяТаблицы КАК Документ
	|ГДЕ
	|	Документ.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)
	|	И НЕ Документ.Ссылка В (&НеустановленныеДокументы)";
	
	СписокДокументов = Новый Массив;
	
	Для Каждого ТекущийОбъект Из Метаданные.Документы Цикл
		
		Если ТекущийОбъект.Реквизиты.Найти("СпособЗачетаАвансов") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстДокумента = СтрЗаменить(ШаблонТекста, "#ИмяДокумента", ТекущийОбъект.Имя);
		СписокДокументов.Добавить(ТекстДокумента);
		
	КонецЦикла;
	
	Для Каждого Документ Из ДокументыСТабличнойЧастью Цикл
		
		ТекстДокумента = СтрЗаменить(ШаблонТекстаТаблицы, "#ИмяДокумента", Документ.Ключ);
		ТекстДокумента = СтрЗаменить(ТекстДокумента, "#ИмяТаблицы", Документ.Значение);
		СписокДокументов.Добавить(ТекстДокумента);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(
		СписокДокументов,
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|");
	НеустановленныеДокументы = Новый Массив;
	
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("НеустановленныеДокументы", НеустановленныеДокументы);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			
			Документ.Заблокировать();
			УказанаТаблица = Не ПустаяСтрока(Выборка.ИмяТаблицы);
			
			Если Не УказанаТаблица Тогда
				Документ.СпособЗачетаАвансов =  СпособЗачетаАвансовПоПризнаку(Выборка.УдалитьАвтоЗакрытиеСделок);
				Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
					Документ.СпособЗачетаАвансовПоставки =
						СпособЗачетаАвансовПоПризнаку(Документ.УдалитьАвтоЗакрытиеСделокДоговораПоставки);
				КонецЕсли;
			КонецЕсли;
			
			ИмяТабличнойЧасти = ?(
				УказанаТаблица,
				Выборка.ИмяТаблицы,
				?(ДокументыСТабличнойЧастью.Свойство(Выборка.Ссылка.Метаданные().Имя),
					ДокументыСТабличнойЧастью[Выборка.Ссылка.Метаданные().Имя],
					""));
			Если Не ПустаяСтрока(ИмяТабличнойЧасти) Тогда
				
				ЗаполнитьПризнакЗачетаАвансовВТабличнойчастиДокумента(Документ, ИмяТабличнойЧасти);
				
			КонецЕсли;
			
			Документ.ОбменДанными.Загрузка = Истина;
			
			Попытка
				Документ.Записать();
			Исключение
				НеустановленныеДокументы.Добавить(Документ.Ссылка);
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось заполнить способ зачета сделок в %1'"),
					СокрЛП(Строка(Документ.Ссылка)));
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				ЗаписьЖурналаРегистрации(
					ТекстОшибки, ОбщегоНазначения.КодОсновногоЯзыка(),
					УровеньЖурналаРегистрации.Ошибка);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДокументРасчетовПоЗаказу(Заказы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетов,
	|	РасчетыСКонтрагентами.Заказ КАК Заказ
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|ГДЕ
	|	РасчетыСКонтрагентами.Заказ В(&Заказы)";
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорКонтрагента, ЗначениеПоУмолчанию = Ложь) Экспорт
	
	Если ДоговорКонтрагента = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СпособВеденияВзаиморасчетов") =
			Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам;
	
КонецФункции

Функция ЕстьДоговорПоРасчетнымДокументам(
		ДоговораВзаиморасчетов,
		СпособУчета = Неопределено) Экспорт
	
	Если СпособУчета = Неопределено Тогда
		СпособУчета = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам;
	КонецЕсли;
	СпособВеденияВзаиморасчетовДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			ДоговораВзаиморасчетов,
			"СпособВеденияВзаиморасчетов");
	
	Для Каждого СпособВзаиморасчетов Из СпособВеденияВзаиморасчетовДоговоров Цикл
		
		Если СпособВзаиморасчетов.Значение = СпособУчета Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция АвтоматическоеЗакрытиеСделок(ДоговорКонтрагента) Экспорт
	
	Возврат
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СпособЗачетаАвансов") =
			Перечисления.СпособыЗачетаАвансов.Автоматически;
	
КонецФункции

Функция ПредставлениеСпособаЗачетаАвансов(СпособВеденияВзаиморасчетов) Экспорт
	
	Возврат ?(СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам,
		НСтр("ru = 'Способ зачета авансов'"),
		НСтр("ru = 'Способ зачета сделок'"));
	
КонецФункции

Функция ВзаиморасчетыСКонтрагентомПоОтбору(
	УсловиеОтбора,
	НаДату = Неопределено,
	СуммовыеПоказатели = "Сумма,СуммаУпр,СуммаБаз",
	Знач СпособВеденияВзаиморасчетов = Неопределено) Экспорт
	
	Если СпособВеденияВзаиморасчетов = Неопределено
		И УсловиеОтбора.Свойство("ДоговорВзаиморасчетов") Тогда
		СпособВеденияВзаиморасчетов =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УсловиеОтбора.ДоговорВзаиморасчетов, "СпособВеденияВзаиморасчетов");
	КонецЕсли;
	
	Если СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
		Если УсловиеОтбора.Свойство("Сделка") Тогда
			УсловиеОтбора.Вставить("ДокументРасчетов", УсловиеОтбора.Сделка);
			УсловиеОтбора.Удалить("Сделка");
		КонецЕсли;
		
		ДатаДокумента = ?(ТипЗнч(НаДату) = Тип("МоментВремени"), НаДату.Дата, НаДату);
		
		// Проверим, что не указан в качестве сделки заказ
		Если Не УсловиеОтбора.Свойство("Заказ")
			И УсловиеОтбора.Свойство("ДокументРасчетов")
			И Метаданные.ОпределяемыеТипы.ЗаказыДокументовРасчета.Тип.СодержитТип(ТипЗнч(УсловиеОтбора.ДокументРасчетов))
			И Не (ТипЗнч(УсловиеОтбора.ДокументРасчетов) = Тип("ДокументСсылка.ЗаказНаряд")
				И УсловиеОтбора.ДокументРасчетов.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
				И (ДатаДокумента = Неопределено ИЛИ ДатаДокумента >= УсловиеОтбора.ДокументРасчетов.ДатаЗакрытия))
		Тогда
			УсловиеОтбора.Вставить("Заказ", УсловиеОтбора.ДокументРасчетов);
			УсловиеОтбора.Удалить("ДокументРасчетов");
		КонецЕсли;
		Долги = РегистрыНакопления.РасчетыСКонтрагентами.Остатки(НаДату, УсловиеОтбора, , СуммовыеПоказатели);
	Иначе
		Если УсловиеОтбора.Свойство("ДокументРасчетов") Тогда
			УсловиеОтбора.Вставить("Сделка", УсловиеОтбора.ДокументРасчетов);
			УсловиеОтбора.Удалить("ДокументРасчетов");
		КонецЕсли;
		Если УсловиеОтбора.Свойство("ТипРасчета") Тогда
			УсловиеОтбора.Удалить("ТипРасчета");
		КонецЕсли;
		Если УсловиеОтбора.Свойство("Заказ") Тогда
			УсловиеОтбора.Удалить("Заказ");
		КонецЕсли;
		Если УсловиеОтбора.Свойство("Организация") Тогда
			УсловиеОтбора.Удалить("Организация");
		КонецЕсли;
		Долги = РегистрыНакопления.ВзаиморасчетыКомпании.Остатки(НаДату, УсловиеОтбора, , СуммовыеПоказатели);
	КонецЕсли;
	
	Возврат Долги;
	
КонецФункции

Функция ДоступныеТипыДокументовРасчета() Экспорт
	
	Результат = Новый Массив;
	
	ВсеТипыСделок = ПланыВидовХарактеристик.ТипыСделок.ПолучитьРазрешенныеТипыСделок(Ложь, Ложь);
	
	// Исключим те документы, что указываются как Заказ
	ТипыЗаказов = Метаданные.ОпределяемыеТипы.ЗаказыДокументовРасчета.Тип.Типы();
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.ЗаказВнутренний"));
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.СчетНаОплату"));
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.СчетОтПоставщика"));
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили"));
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили"));
	
	ИсключениеТиповЗаказов = Новый Массив();
	ИсключениеТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказНаряд"));
	ИсключениеТиповЗаказов.Добавить(Тип("ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили"));
	ИсключениеТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказНаАвтомобиль"));
	
	Для Каждого ТипДокумента Из ВсеТипыСделок Цикл
		
		Если ТипыЗаказов.Найти(ТипДокумента) <> Неопределено
			И ИсключениеТиповЗаказов.Найти(ТипДокумента) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Добавить(ТипДокумента);
		
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(Результат);
	
КонецФункции

Функция ИменаИсточникаДанных(СпособВеденияВзаиморасчетовПоРасчетнымДокументам) Экспорт
	
	Результат = Новый Структура("ИмяРегистра,ИмяСделки");
	
	Если СпособВеденияВзаиморасчетовПоРасчетнымДокументам = Истина Тогда
		Результат.ИмяРегистра = "РасчетыСКонтрагентами";
		Результат.ИмяСделки = "ДокументРасчетов";
	Иначе
		Результат.ИмяРегистра = "ВзаиморасчетыКомпании";
		Результат.ИмяСделки = "Сделка";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполнение табличной части документа "Состав" данными по документу расчета.
//
// Параметры:
//  Объект											 - ДокументОбъект - Документ, который заполняется.
//  ДокументРасчета									 - ПланВидовХарактеристик.ТипыСделок - Документ, по которому проводится оплата.
//  СпособУчетаВзаиморасчетовПоРасчетнымДокументам	 - Булево - Признак того,
//																что в документе указан договор учета по расчетным документам.
//
Процедура ЗаполнитьСоставОплатыПоДокументуРасчетов(
		Объект,
		ДокументРасчета,
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам = Неопределено) Экспорт
	
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам = Неопределено Тогда
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
	КонецЕсли;
	
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Сделка) Тогда
			Сделка = ДокументРасчета;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТипДокументаРасчета = ТипЗнч(ДокументРасчета);
	Если ЗначениеЗаполнено(ДокументРасчета) И ТипДокументаРасчета = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		ДанныеЗаказНаряда = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчета, "Состояние,ДатаЗакрытия");
		ЭтоЗаказ = Не (ДанныеЗаказНаряда.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
			И Объект.Дата >= ДанныеЗаказНаряда.ДатаЗакрытия);
	Иначе
		ЭтоЗаказ = Метаданные.ОпределяемыеТипы.ЗаказыДокументовРасчета.Тип.СодержитТип(ТипДокументаРасчета);
	КонецЕсли;
	
	НоваяСтрока = Объект.Состав.Добавить();
	Если ЭтоЗаказ Тогда
		НоваяСтрока.Заказ = ДокументРасчета;
	ИначеЕсли ЗначениеЗаполнено(ДокументРасчета) Тогда
		НоваяСтрока.ДокументРасчетов = ДокументРасчета;
	КонецЕсли;
	Если Не ЭтоЗаказ И ЗначениеЗаполнено(ДокументРасчета) Тогда
		НоваяСтрока.СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
	Иначе
		НоваяСтрока.СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	КонецЕсли;
	НоваяСтрока.Сумма = Объект.СуммаДокумента;
	
	Если Не ТипЗнч(ДокументРасчета) = Тип("ДокументСсылка.Инкассация")
		И ОбработкаСобытийОбъектаСервер.ВозможенВводНаОсновании(Объект, ДокументРасчета) Тогда
		ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(ДокументРасчета, Объект, НоваяСтрока.Сумма);
		СтавкаНДС = Объект.СтавкаНДС;
		СуммаНДС = Объект.СуммаНДС;
	Иначе
		СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		СуммаНДС = 0;
	КонецЕсли;
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
	НоваяСтрока.СуммаНДС = СуммаНДС;
	
КонецПроцедуры

// Заполнение табличной части "Состав" данными по документу оплаты.
//
// Параметры:
//  Объект			 - ДокументОбъект - Документ оплаты, который необходимо заполнить.
//  ДокументОплаты	 - ДокументСсылка - Основание документа оплаты.
//
Процедура ЗаполнитьВзаиморасчетыПоДокументуОплаты(Объект, ДокументОплаты) Экспорт
	
	Объект.Состав.Очистить();
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетов,
	               |	РасчетыСКонтрагентами.Заказ КАК Заказ,
	               |	СУММА(РасчетыСКонтрагентами.Сумма) КАК Сумма,
	               |	РасчетыСКонтрагентами.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	               |ГДЕ
	               |	РасчетыСКонтрагентами.Регистратор = &Основание
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетыСКонтрагентами.ДокументРасчетов,
	               |	РасчетыСКонтрагентами.Заказ,
	               |	РасчетыСКонтрагентами.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов";
	Запрос.УстановитьПараметр("Основание", ДокументОплаты);
	
	ПлатежиПоДокументуОплаты = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПлатежа Из ПлатежиПоДокументуОплаты Цикл
		
		НоваяСтрока = Объект.Состав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПлатежа);
		НоваяСтрока.СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		
		Если Объект.ВалютаДокумента = СтрокаПлатежа.ВалютаВзаиморасчетов Тогда
			НоваяСтрока.Сумма = СтрокаПлатежа.Сумма;
		Иначе
			НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаПлатежа.Сумма,
				СтрокаПлатежа.ВалютаВзаиморасчетов,
				ДокументОплаты.Дата,
				Объект.ВалютаДокумента,
				Объект.Дата,
				РежимОкругления.Окр15как20
			);
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("СуммаНДС",        НоваяСтрока.СуммаНДС);
		СтруктураСтроки.Вставить("СтавкаНДС",       НоваяСтрока.СтавкаНДС);
		СтруктураСтроки.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураСтроки.Вставить("КурсДокумента",   Объект.КурсДокумента);
		ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(
			НоваяСтрока.ДокументРасчетов,
			СтруктураСтроки,
			НоваяСтрока.Сумма,,,
			Ложь);
		
		НоваяСтрока.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
		МенеджерДокумента.СоставСтавкаНДСПриИзменении(Объект, НоваяСтрока);
		
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.Состав.Итог("Сумма");
	Документы.ПриходныйКассовыйОрдер.СуммаДокументаПриИзменении(Объект, Объект.ДополнительныеСвойства.ПараметрыДействия);
	Если Объект.Состав.Количество() > 0 Тогда
		Объект.СтавкаНДС = Объект.Состав[0].СтавкаНДС;
	КонецЕсли;
	Объект.СуммаНДС = Объект.Состав.Итог("СуммаНДС");
	
КонецПроцедуры

Процедура ПроизвестиПроверкуЗаполненияСостава(
		Объект,
		Отказ,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура();
	КонецЕсли;
	
	ИмяРеквизитаСделки = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры,
		"ИмяРеквизитаСделки",
		"ДокументРасчетов");
	ПроверятьСуммы = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры,
		"ПроверятьСуммы",
		Истина);
	ПроверятьСостав = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры,
		"ПроверятьСостав",
		Истина);
	ИмяСпособаЗачетаОплаты = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры,
		"ИмяСпособаЗачетаОплаты",
		"СпособЗачетаОплаты");
	ИмяТаблицыСостава = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры,
		"ИмяТаблицыСостава",
		"Состав");
	
	Если Не ПроверятьСостав И Объект.Состав.Количество() = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В документе не определены настройки зачета оплаты.'"),
			Объект,
			,
			,
			Отказ
		);
		Возврат;
		
	КонецЕсли;
	
	// Проверим, что у способ зачета оплаты "По документу" указан документ расчетов
	Для Каждого СтрокаРасчетов Из Объект.Состав Цикл
		
		Если СтрокаРасчетов[ИмяСпособаЗачетаОплаты] = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаРасчетов[ИмяРеквизитаСделки]) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Для строки %1 табличной части ""%2"" не указан документ расчетов.'"),
						СтрокаРасчетов.НомерСтроки,
						ИмяТаблицыСостава
					),
					Объект,
					ИмяТаблицыСостава + "[" + (СтрокаРасчетов.НомерСтроки - 1 ) + "]." + ИмяРеквизитаСделки,
					,
					Отказ
				);
				
			ИначеЕсли Не ОбработкаСобытийДокументаСервер.ПроверкаСоответствияКонтрагентаДоговораПоСделке(
				Объект,
				СтрокаРасчетов[ИмяРеквизитаСделки],
				Объект.Контрагент,
				Объект.ДоговорВзаиморасчетов,
				Объект.ДополнительныеСвойства) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Для строки %1 табличной части ""%2"" не указан документ расчетов контрагент
						|и договор взаиморасчетов документа расчетов не соответствуют указанным в шапке документа.'"),
						СтрокаРасчетов.НомерСтроки,
						ИмяТаблицыСостава
					),
				Объект,
					ИмяТаблицыСостава + "[" + (СтрокаРасчетов.НомерСтроки - 1 ) + "]." + ИмяРеквизитаСделки,
					,
					Отказ
				);
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Контрагент и договор взаиморасчетов документа Сделка не соответствуют указанным в шапке документа'"),
					,
					"Сделка",
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаРасчетов[ИмяСпособаЗачетаОплаты] <> Перечисления.СпособыЗачетаАвансов.Автоматически
			И ЗначениеЗаполнено(СтрокаРасчетов.Заказ) И ТипЗнч(СтрокаРасчетов.Заказ) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			
			// Проверим, что заказ-наряд еще не закрыт.
			ДанныеЗаказНаряда = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаРасчетов.Заказ, "Состояние,ДатаЗакрытия");
			
			Если ДанныеЗаказНаряда.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
				И ДанныеЗаказНаряда.ДатаЗакрытия <= Объект.Дата Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'В строке %1 табличной части ""%2"" указан в реквизите ""Заказ"" документ ""Заказ-наряд"" в состоянии ""Закрыт"".'"),
						СтрокаРасчетов.НомерСтроки,
						ИмяТаблицыСостава
					),
					Объект,
					ИмяТаблицыСостава + "[" + (СтрокаРасчетов.НомерСтроки - 1 ) + "]." + ИмяРеквизитаСделки,
					,
					Отказ
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим суммовые показатели табличной части "Состав" и документа.
	Если Не ПроверятьСуммы Тогда
		Возврат;
	КонецЕсли;
	Если Объект.СуммаДокумента <> Объект.Состав.Итог("Сумма") Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сумма документа не равна сумме платежей.'"),
			Объект,
			,
			,
			Отказ);
	КонецЕсли;
	
	Если Объект.СуммаНДС <> Объект.Состав.Итог("СуммаНДС") Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сумма НДС документа не равна сумме НДС платежей.'"),
			Объект,
			,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьОплатуКонтрагента(РасчетыСКонтрагентами, ОплатыПоДокументу, Отказ, Расход = Истина) Экспорт
	
	Если Расход Тогда
		НаправлениеЗаписи = ВидДвиженияНакопления.Расход;
	Иначе
		НаправлениеЗаписи = ВидДвиженияНакопления.Приход;
	КонецЕсли;
	
	// Первыми закроем все с указанными сделками
	ЗачестьСуммуОплатыНаДокумент =
		ПолучитьЗначениеПараметраСтруктуры(ОплатыПоДокументу, "ЗачестьСуммуОплатыНаДокумент", Ложь);
	СуммаКЗачетуОплатыПоДокументу = 0;
	УсловиеПоиска = Новый Структура("Контрагент,ДоговорВзаиморасчетов,ДокументРасчетов,Заказ");
	
	Для Каждого СтрокаОплаты Из ОплатыПоДокументу.ОплатаПоДокументамРасчета Цикл
		
		// Найдем сколько осталось оплатить по данной сделке
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаОплаты);
		УсловиеПоиска.ДокументРасчетов = СтрокаОплаты.Сделка;
		ОстаткиПоСделке = ОплатыПоДокументу.ОстаткиВзаиморасчетов.НайтиСтроки(УсловиеПоиска);
		
		Если ОстаткиПоСделке.Количество() = 0
			И Не ЗачестьСуммуОплатыНаДокумент Тогда
			
			// Проверим, что есть переплата или нет.
			ПроверитьПереплатуПоСделке(СтрокаОплаты.Сделка, СтрокаОплаты.Сумма, 0, Отказ);
			
			// Долга по сделке нет.
			СуммаКЗачетуОплатыПоДокументу = СуммаКЗачетуОплатыПоДокументу + СтрокаОплаты.Сумма;
			Продолжить;
		КонецЕсли;
		
		КурсВалютыВзаиморасчетов = ?(Не ЗначениеЗаполнено(СтрокаОплаты.КурсВалютыВзаиморасчетов),
					СтрокаОплаты.Дата,
					СтрокаОплаты.КурсВалютыВзаиморасчетов);
		
		Сумма = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаДоговора,
				КурсВалютыВзаиморасчетов),
			2);
		
		Если ЗачестьСуммуОплатыНаДокумент Тогда
			
			СуммаЗачета = СтрокаОплаты.Сумма;
			СуммаДляОплаты = Сумма;
			ТипРасчета = ?(
				Метаданные.ОпределяемыеТипы.ДокументыОплаты.Тип.СодержитТип(ТипЗнч(СтрокаОплаты.Сделка)),
				Перечисления.ТипыРасчетов.Аванс,
				Перечисления.ТипыРасчетов.Оплата);
			
		Иначе
			
			ОстатокПоСделке = ОстаткиПоСделке[0].СуммаОстаток;
			ТипРасчета = ОстаткиПоСделке[0].ТипРасчета;
			СуммаДляОплаты = Мин(ОстатокПоСделке, Сумма);
			
			Если СуммаДляОплаты = ОстатокПоСделке Тогда
				
				ОплатыПоДокументу.ОстаткиВзаиморасчетов.Удалить(ОстаткиПоСделке[0]);
				Если СуммаДляОплаты = Сумма Тогда
					СуммаЗачета = СтрокаОплаты.Сумма;
				Иначе
					СуммаЗачета = Окр(СтрокаОплаты.Сумма * СуммаДляОплаты / Сумма, 2);
				КонецЕсли;
				
				// Проверим, что есть переплата или нет.
				ПроверитьПереплатуПоСделке(СтрокаОплаты.Сделка, СтрокаОплаты.Сумма, СуммаЗачета, Отказ);
				
				СуммаКЗачетуОплатыПоДокументу = СуммаКЗачетуОплатыПоДокументу + СтрокаОплаты.Сумма - СуммаЗачета;
				
			Иначе
				
				ОстаткиПоСделке[0].СуммаОстаток = ОстатокПоСделке - Сумма;
				СуммаЗачета = Окр(СтрокаОплаты.Сумма * СуммаДляОплаты / Сумма, 2);
				
			КонецЕсли;
		
		КонецЕсли;
		
		СуммаУпр = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаЗачета,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаУпр,
				СтрокаОплаты.КурсВалютыУпр),
			2);
		СуммаБаз = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаЗачета,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаРегл,
				СтрокаОплаты.КурсВалютыРегл),
			2);
		
		НоваяСтрока = РасчетыСКонтрагентами.Добавить();
		НоваяСтрока.ВидДвижения = НаправлениеЗаписи;
		НоваяСтрока.Организация = СтрокаОплаты.Организация;
		НоваяСтрока.Период = СтрокаОплаты.Дата;
		НоваяСтрока.Регистратор = СтрокаОплаты.Ссылка;
		НоваяСтрока.Контрагент = СтрокаОплаты.Контрагент;
		НоваяСтрока.ДоговорВзаиморасчетов = СтрокаОплаты.ДоговорВзаиморасчетов;
		НоваяСтрока.ТипРасчета = ТипРасчета;
		НоваяСтрока.ДокументРасчетов = СтрокаОплаты.Сделка;
		НоваяСтрока.Заказ = СтрокаОплаты.Заказ;
		НоваяСтрока.Сумма = СуммаДляОплаты;
		НоваяСтрока.СуммаУпр = СуммаУпр;
		НоваяСтрока.СуммаБаз = СуммаБаз;
		НоваяСтрока.ХозОперация = СтрокаОплаты.ХозОперация;
		НоваяСтрока.Курс = СтрокаОплаты.КурсДокумента;
		НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеДебиторскойЗадолженности;
		НоваяСтрока.Активность = Истина;
		
		// Дополнительные данные.
		НоваяСтрока.КурсВалютыВзаиморасчетов = КурсВалютыВзаиморасчетов;
		
	КонецЦикла;
	
	// Проведем по автоматическому зачету.
	УсловиеПоиска = Новый Структура("ТипРасчета,ДокументРасчетов,Заказ");
	
	Для Каждого СтрокаОплаты Из ОплатыПоДокументу.АвтоматическоеСписание Цикл
		
		// Не осталось незакрытых сделок контрагента по договору.
		Если ОплатыПоДокументу.ОстаткиВзаиморасчетов.Количество() = 0 Тогда
			
			СуммаКЗачетуОплатыПоДокументу = СуммаКЗачетуОплатыПоДокументу + СтрокаОплаты.Сумма;
			Продолжить;
			
		КонецЕсли;
		
		КурсВалютыВзаиморасчетов = ?(Не ЗначениеЗаполнено(СтрокаОплаты.КурсВалютыВзаиморасчетов),
					СтрокаОплаты.Дата,
					СтрокаОплаты.КурсВалютыВзаиморасчетов);
		
		СуммаАвтоматическогоЗачисления = СтрокаОплаты.Сумма;
		УдаляемыеСтрокиОстатков = Новый Массив();
		Для Каждого СтрокаОстатка Из ОплатыПоДокументу.ОстаткиВзаиморасчетов Цикл
			
			Сумма = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаАвтоматическогоЗачисления,
					СтрокаОплаты.ВалютаДокумента,
					СтрокаОплаты.КурсДокумента,
					СтрокаОплаты.ВалютаДоговора,
					КурсВалютыВзаиморасчетов),
				2);
			
			СуммаЗачета = Мин(Сумма, СтрокаОстатка.СуммаОстаток);
			
			Если СуммаЗачета = Сумма Тогда
				
				СуммаДляПересчета = СуммаАвтоматическогоЗачисления;
				СуммаАвтоматическогоЗачисления = 0;
				
			Иначе
				
				СуммаДляПересчета = Окр(СтрокаОплаты.Сумма * СтрокаОстатка.СуммаОстаток / Сумма, 2);
				СуммаАвтоматическогоЗачисления = СуммаАвтоматическогоЗачисления - СуммаДляПересчета;
				
			КонецЕсли;
			
			СуммаУпр = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаДляПересчета,
					СтрокаОплаты.ВалютаДокумента,
					СтрокаОплаты.КурсДокумента,
					СтрокаОплаты.ВалютаУпр,
					СтрокаОплаты.КурсВалютыУпр),
				2);
			СуммаБаз = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаДляПересчета,
					СтрокаОплаты.ВалютаДокумента,
					СтрокаОплаты.КурсДокумента,
					СтрокаОплаты.ВалютаРегл,
					СтрокаОплаты.КурсВалютыРегл),
				2);
			
			// Попробуем найти строку из ранее уже записанных для регистра.
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаОстатка);
			НайденныеСтрокиДокументовРасчетов = РасчетыСКонтрагентами.НайтиСтроки(УсловиеПоиска);
			
			Если НайденныеСтрокиДокументовРасчетов.Количество() > 0 Тогда
				СтрокаДокументаРасчетов = НайденныеСтрокиДокументовРасчетов[0];
				СтрокаДокументаРасчетов.Сумма = СтрокаДокументаРасчетов.Сумма + СуммаЗачета;
				СтрокаДокументаРасчетов.СуммаУпр = СтрокаДокументаРасчетов.СуммаУпр + СуммаЗачета;
				СтрокаДокументаРасчетов.СуммаБаз = СтрокаДокументаРасчетов.СуммаБаз + СуммаЗачета;
			Иначе
				НоваяСтрока = РасчетыСКонтрагентами.Добавить();
				НоваяСтрока.ВидДвижения = НаправлениеЗаписи;
				НоваяСтрока.Организация = СтрокаОплаты.Организация;
				НоваяСтрока.Период = СтрокаОплаты.Дата;
				НоваяСтрока.Регистратор = СтрокаОплаты.Ссылка;
				НоваяСтрока.Контрагент = СтрокаОстатка.Контрагент;
				НоваяСтрока.ДоговорВзаиморасчетов = СтрокаОстатка.ДоговорВзаиморасчетов;
				НоваяСтрока.ТипРасчета = СтрокаОстатка.ТипРасчета;
				НоваяСтрока.ДокументРасчетов = СтрокаОстатка.ДокументРасчетов;
				НоваяСтрока.Заказ = СтрокаОстатка.Заказ;
				НоваяСтрока.Сумма = СуммаЗачета;
				НоваяСтрока.СуммаУпр = СуммаУпр;
				НоваяСтрока.СуммаБаз = СуммаБаз;
				НоваяСтрока.ХозОперация = СтрокаОплаты.ХозОперация;
				НоваяСтрока.Курс = СтрокаОплаты.КурсДокумента;
				НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеДебиторскойЗадолженности;
				НоваяСтрока.Активность = Истина;
				
				// Дополнительные данные
				НоваяСтрока.КурсВалютыВзаиморасчетов = КурсВалютыВзаиморасчетов;
			КонецЕсли;
			
			// Удалим строку, так как всю сумму по ней оплатили.
			Если СуммаЗачета = СтрокаОстатка.СуммаОстаток Тогда
				
				УдаляемыеСтрокиОстатков.Добавить(СтрокаОстатка);
				
			КонецЕсли;
			
			// Всю сумму распределили.
			Если СуммаАвтоматическогоЗачисления <= 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СуммаАвтоматическогоЗачисления > 0 Тогда
			
			СуммаКЗачетуОплатыПоДокументу = СуммаКЗачетуОплатыПоДокументу + СуммаАвтоматическогоЗачисления;
			
		КонецЕсли;
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиОстатков Цикл
			
			ОплатыПоДокументу.ОстаткиВзаиморасчетов.Удалить(УдаляемаяСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Зафиксируем оставшуюся сумму в качестве аванса по данному документу.
	Для Каждого СтрокаОплаты Из ОплатыПоДокументу.ДанныеОбОплате Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОплаты.Заказ) Тогда
			
			СтрокаОплаты.Сумма = СтрокаОплаты.Сумма + СуммаКЗачетуОплатыПоДокументу;
			СуммаКЗачетуОплатыПоДокументу = 0;
			
		КонецЕсли;
		
		КурсВалютыВзаиморасчетов = ?(Не ЗначениеЗаполнено(СтрокаОплаты.КурсВалютыВзаиморасчетов),
					СтрокаОплаты.Дата,
					СтрокаОплаты.КурсВалютыВзаиморасчетов);
		
		Сумма = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаДоговора,
				КурсВалютыВзаиморасчетов),
			2);
		СуммаУпр = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаУпр,
				СтрокаОплаты.КурсВалютыУпр),
			2);
		СуммаБаз = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаРегл,
				СтрокаОплаты.КурсВалютыРегл),
			2);
			
		НоваяСтрока = РасчетыСКонтрагентами.Добавить();
		НоваяСтрока.ВидДвижения = НаправлениеЗаписи;
		НоваяСтрока.Организация = СтрокаОплаты.Организация;
		НоваяСтрока.Период = СтрокаОплаты.Дата;
		НоваяСтрока.Регистратор = СтрокаОплаты.Ссылка;
		НоваяСтрока.Контрагент = СтрокаОплаты.Контрагент;
		НоваяСтрока.ДоговорВзаиморасчетов = СтрокаОплаты.ДоговорВзаиморасчетов;
		НоваяСтрока.ТипРасчета = Перечисления.ТипыРасчетов.Аванс;
		НоваяСтрока.ДокументРасчетов = СтрокаОплаты.Ссылка;
		НоваяСтрока.Заказ = СтрокаОплаты.Заказ;
		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.СуммаУпр = СуммаУпр;
		НоваяСтрока.СуммаБаз = СуммаБаз;
		НоваяСтрока.ХозОперация = СтрокаОплаты.ХозОперация;
		НоваяСтрока.Курс = СтрокаОплаты.КурсДокумента;
		НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности;
		НоваяСтрока.Активность = Истина;
		
		// Дополнительные данные
		НоваяСтрока.КурсВалютыВзаиморасчетов = КурсВалютыВзаиморасчетов;
		
	КонецЦикла;
	
	// Обобщим зачет аванса по остатку суммы.
	ОплатыПоДокументу.ДанныеОДокументе.Следующий();
	Если СуммаКЗачетуОплатыПоДокументу > 0 Тогда
		
		КурсВалютыВзаиморасчетов = ?(Не ЗначениеЗаполнено(ОплатыПоДокументу.ДанныеОДокументе.КурсВалютыВзаиморасчетов),
					ОплатыПоДокументу.ДанныеОДокументе.Дата,
					ОплатыПоДокументу.ДанныеОДокументе.КурсВалютыВзаиморасчетов);
		
		Сумма = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаКЗачетуОплатыПоДокументу,
				ОплатыПоДокументу.ДанныеОДокументе.ВалютаДокумента,
				ОплатыПоДокументу.ДанныеОДокументе.КурсДокумента,
				ОплатыПоДокументу.ДанныеОДокументе.ВалютаДоговора,
				КурсВалютыВзаиморасчетов),
			2);
		СуммаУпр = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаКЗачетуОплатыПоДокументу,
				ОплатыПоДокументу.ДанныеОДокументе.ВалютаДокумента,
				ОплатыПоДокументу.ДанныеОДокументе.КурсДокумента,
				ОплатыПоДокументу.ДанныеОДокументе.ВалютаУпр,
				ОплатыПоДокументу.ДанныеОДокументе.КурсВалютыУпр),
			2);
		СуммаБаз = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаКЗачетуОплатыПоДокументу,
				ОплатыПоДокументу.ДанныеОДокументе.ВалютаДокумента,
				ОплатыПоДокументу.ДанныеОДокументе.КурсДокумента,
				ОплатыПоДокументу.ДанныеОДокументе.ВалютаРегл,
				ОплатыПоДокументу.ДанныеОДокументе.КурсВалютыРегл),
			2);
		
		НоваяСтрока = РасчетыСКонтрагентами.Добавить();
		НоваяСтрока.ВидДвижения = НаправлениеЗаписи;
		НоваяСтрока.Организация = ОплатыПоДокументу.ДанныеОДокументе.Организация;
		НоваяСтрока.Период = ОплатыПоДокументу.ДанныеОДокументе.Дата;
		НоваяСтрока.Регистратор = ОплатыПоДокументу.ДанныеОДокументе.Ссылка;
		НоваяСтрока.Контрагент = ОплатыПоДокументу.ДанныеОДокументе.Контрагент;
		НоваяСтрока.ДоговорВзаиморасчетов = ОплатыПоДокументу.ДанныеОДокументе.ДоговорВзаиморасчетов;
		НоваяСтрока.ТипРасчета = Перечисления.ТипыРасчетов.Аванс;
		НоваяСтрока.ДокументРасчетов = ОплатыПоДокументу.ДанныеОДокументе.Ссылка;
		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.СуммаУпр = СуммаУпр;
		НоваяСтрока.СуммаБаз = СуммаБаз;
		НоваяСтрока.ХозОперация = ОплатыПоДокументу.ДанныеОДокументе.ХозОперация;
		НоваяСтрока.Курс = ОплатыПоДокументу.ДанныеОДокументе.КурсДокумента;
		НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности;
		НоваяСтрока.Активность = Истина;
		
		// Дополнительные данные
		НоваяСтрока.КурсВалютыВзаиморасчетов = КурсВалютыВзаиморасчетов;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УчетПоСпособуЗачетаОплаты(ВерсияОбъекта) Экспорт
	
	Возврат ВерсияОбъекта >= "02.00";
	
КонецФункции

#Область ПроверкаРасчетовСКонтрагентами

Процедура ПроверитьРасчетыСКонтрагентами(
		Объект,
		РасчетыСКонтрагентами,
		Отказ,
		Знач КонтрольДолгаПриПродаже = Истина) Экспорт
	
	КонтрольВзаиморасчетовПоСделкам(Объект, РасчетыСКонтрагентами, Отказ);
	
	Если КонтрольДолгаПриПродаже Тогда
		ПроверитьКредитКонтрагентаПередОтгрузкой(Объект, РасчетыСКонтрагентами, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПереплатуПоСделке(РасчетныйДокумент, СуммаОплаты, СуммаОстатка, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяРасчетногоДокумента = РасчетныйДокумент.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ТипыСделок.ЗапретитьПереплатуПоСделкам КАК ЗапретитьПереплатуПоСделкам
		|ИЗ
		|	ПланВидовХарактеристик.ТипыСделок КАК ТипыСделок
		|ГДЕ
		|	ТипыСделок.ИмяПредопределенныхДанных = &ИмяТипаСделки";
	Запрос.УстановитьПараметр("ИмяТипаСделки", ИмяРасчетногоДокумента);
	
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
	Исключение
		
		// Вариант, когда нет такого предопределенного элемента.
		Возврат;
		
	КонецПопытки;
	
	// Не нашли настройку сделки
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Не Выборка.ЗапретитьПереплатуПоСделкам Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СуммаПереплаты = СуммаОплаты - СуммаОстатка;
	
	Если СуммаПереплаты >= 0.01 Тогда
	
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Для документа ""%1"" распределяемая сумма %2 превышает незакрытую сумму сделки %3 на %4.'"),
				РасчетныйДокумент,
				Формат(СуммаОплаты, "ЧДЦ=2; ЧН=0,00"),
				Формат(СуммаОстатка, "ЧДЦ=2; ЧН=0,00"),
				Формат(СуммаПереплаты, "ЧДЦ=2; ЧН=0,00")),
				,
				,
				,
				Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаДляПолученияОстатков(ДляПрихода = Истина, ДляАванса = Истина)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК ДокументРасчетов,
	|	РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК Сумма,
	|	РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	РасчетыСКонтрагентамиОстатки.СуммаБазОстаток КАК СуммаБаз,
	|	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов.Наименование КАК ВалютаДоговора,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентамиОстатки.Заказ <> НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
	|				И ТипРасчета = &ТипРасчета #УсловиеВыбораДокументов) КАК РасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.СуммаОстаток #ВидСравнения 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	РасчетыСКонтрагентамиОстатки.Заказ.Дата";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВидСравнения", ?(ДляПрихода, "<", ">"));
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"#УсловиеВыбораДокументов",
		?(ДляАванса, "И ТИПЗНАЧЕНИЯ(ДокументРасчетов) В (&СписокДокументовОплаты) И Заказ В (&СписокЗаказов)",
		"И ДокументРасчетов = &ДокументРасчетов"));

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляПолученияОстатковАвансовПоДокументу(ДляПрихода = Истина)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	АвансыПоДокументу.ДокументАванса КАК ДокументАванса,
	|	АвансыПоДокументу.Сумма КАК Сумма
	|ПОМЕСТИТЬ ДокументыАванса
	|ИЗ
	|	&АвансыПоДокументу КАК АвансыПоДокументу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Организация КАК Организация,
	|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
	|	ДокументыАванса.ДокументАванса КАК ДокументРасчетов,
	|	ДокументыАванса.Сумма КАК Сумма,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаБазОстаток, 0) КАК СуммаБаз,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов.Наименование КАК ВалютаДоговора
	|ИЗ
	|	ДокументыАванса КАК ДокументыАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|				&МоментВремени,
	|				Организация = &Организация
	|					И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
	|					И Контрагент = &Контрагент
	|					И ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|					И ДокументРасчетов В
	|						(ВЫБРАТЬ
	|							ДокументыАванса.ДокументАванса КАК ДокументАванса
	|						ИЗ
	|							ДокументыАванса КАК ДокументыАванса)) КАК РасчетыСКонтрагентамиОстатки
	|		ПО ДокументыАванса.ДокументАванса = РасчетыСКонтрагентамиОстатки.ДокументРасчетов
	|ГДЕ
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) #ВидСравнения 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВидСравнения", ?(ДляПрихода, "<", ">"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СпособЗачетаАвансовПоПризнаку(АвтозакрытиеСделок)
	
	Возврат ?(АвтозакрытиеСделок,
		Перечисления.СпособыЗачетаАвансов.Автоматически,
		Перечисления.СпособыЗачетаАвансов.НеЗачитывать);
	
КонецФункции

Процедура ЗаполнитьПризнакЗачетаАвансовВТабличнойчастиДокумента(Документ, ИмяТабличнойЧасти)
	
	Для Каждого СтрокаТаблицы Из Документ[ИмяТабличнойЧасти] Цикл
		
		Если СтрокаТаблицы.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.СпособЗачетаАвансов = СпособЗачетаАвансовПоПризнаку(СтрокаТаблицы.УдалитьАвтоЗакрытиеСделок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КонтрольВзаиморасчетовПоСделкам(Объект, РасчетыСКонтрагентами, Отказ)
	
	КонтрольВзаиморасчетовПоСделкам = ПраваИНастройкиПользователя.Значение("КонтрольВзаиморасчетовПоСделкам");
	
	Если НЕ КонтрольВзаиморасчетовПоСделкам Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаРасчета Из РасчетыСКонтрагентами Цикл
		
		КонтрагентКонтрольПрошел = Истина;
		ДоговорКонтрольПрошел = Истина;
		
		Попытка
			
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаРасчета.ДокументРасчетов);
			КонтрольВзаиморасчетов = МенеджерДокумента.КонтрольСоответствияВзаиморасчетовСделке(СтрокаРасчета);
			КонтрагентКонтрольПрошел = ПолучитьЗначениеПараметраСтруктуры(
				КонтрольВзаиморасчетов,
				"КонтрагентКонтрольПрошел",
				Истина);
			ДоговорКонтрольПрошел = ПолучитьЗначениеПараметраСтруктуры(
				КонтрольВзаиморасчетов,
				"ДоговорКонтрольПрошел",
				Истина);
				
		Исключение
			
			Если ЕстьРеквизит(СтрокаРасчета.ДокументРасчетов, "Контрагент") Тогда
				
				КонтрагентСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаРасчета.ДокументРасчетов,
					"Контрагент");
				КонтрагентКонтрольПрошел = Не ЗначениеЗаполнено(КонтрагентСделки)
					ИЛИ КонтрагентСделки = СтрокаРасчета.Контрагент;
				
			КонецЕсли;
			
			Если ЕстьРеквизит(СтрокаРасчета.ДокументРасчетов, "ДоговорВзаиморасчетов") Тогда
				
				ДоговорВзаиморасчетовСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаРасчета.ДокументРасчетов,
					"ДоговорВзаиморасчетов");
				ДоговорКонтрольПрошел = Не ЗначениеЗаполнено(ДоговорВзаиморасчетовСделки)
					ИЛИ ДоговорВзаиморасчетовСделки = СтрокаРасчета.ДоговорВзаиморасчетов;
				
			КонецЕсли;
			
		КонецПопытки;
		
		Если Не КонтрагентКонтрольПрошел Тогда
			
			ШаблонСообщения = СтрШаблон(
				НСтр("ru = 'Контрагент сделки ""%1"" не соответствует контрагенту ""%2""'"),
				СтрокаРасчета.ДокументРасчетов,
				СтрокаРасчета.Контрагент);
			ОбщегоНазначения.СообщитьПользователю(ШаблонСообщения, Объект);
			Отказ = Истина;
			
		КонецЕсли;
		
		Если Не ДоговорКонтрольПрошел Тогда
			
			ШаблонСообщения = СтрШаблон(
				НСтр("ru = 'Договор взаиморасчетов сделки ""%1"" не соответствует договору ""%2""'"),
				СтрокаРасчета.ДокументРасчетов, 
				СтрокаРасчета.ДоговорВзаиморасчетов);
			ОбщегоНазначения.СообщитьПользователю(ШаблонСообщения, Объект);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКредитКонтрагентаПередОтгрузкой(
		Объект,
		РасчетыСКонтрагентами,
		Отказ)
	
	// Проверим наличе необходимых движений в таблице.
	РасчетыДляПроверки = ИнициализироватьТаблицуДляПроверкиПродажи();
	
	ДанныеДоговоровВзаиморасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		РасчетыСКонтрагентами.ВыгрузитьКолонку("ДоговорВзаиморасчетов"),
		"МаксимальныйКредит, ОтменаКонтроляСуммыКредита");
	
	УсловиеОтбора = Новый Структура(
		"ВидДвижения,ТипРасчета",
		ВидДвиженияНакопления.Приход,
		Перечисления.ТипыРасчетов.Оплата);
	НайденныеСтроки = РасчетыСКонтрагентами.НайтиСтроки(УсловиеОтбора);
	ЕстьФормированиеДолга = Ложь;
	
	Для Каждого СтрокаПродажи Из НайденныеСтроки Цикл
		
		НоваяСтрока = РасчетыДляПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(
			НоваяСтрока,
			СтрокаПродажи);
		
		ДанныеДоговора = ДанныеДоговоровВзаиморасчетов.Получить(СтрокаПродажи.ДоговорВзаиморасчетов);
		Если ДанныеДоговора <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				ДанныеДоговора);
			
		КонецЕсли;
		
		ЕстьФормированиеДолга = ЕстьФормированиеДолга
			ИЛИ СтрокаПродажи.ВидОперации <> Перечисления.ВидыОперацийВзаиморасчетов.ЗачетАванса;
		
	КонецЦикла;
	
	Если РасчетыДляПроверки.Количество() = 0
		ИЛИ Не ЕстьФормированиеДолга Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РасчетыДляПроверки.Свернуть(
		"Контрагент,ДоговорВзаиморасчетов,МаксимальныйКредит,ОтменаКонтроляСуммыКредита",
		"Сумма,СуммаДолга");
	
	// Для документов отгрузки или если указана максимальная сумма кредита нужно рассчитать остатки взаиморасчетов.
	ВидОперацииПродажа = ЕстьРеквизит(Объект, "ХозОперация")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ХозОперация, "ВидОперации") =
			Перечисления.ВидыОперацийДоговора.Продажа;
	
	// При необходимости получим долги контрагента по договору
	ПроверкаМаксимальногоПревышенияКредитаКонтрагента = 
		ПраваИНастройкиПользователя.Значение("ПроверкаМаксимальногоПревышенияКредитаКонтрагента", Объект);
	
	Если ВидОперацииПродажа ИЛИ ПроверкаМаксимальногоПревышенияКредитаКонтрагента Тогда
		
		ЗаполнитьСуммуДолговКонтрагентов(
			Объект,
			РасчетыДляПроверки,
			ВидОперацииПродажа);
		
	КонецЕсли;
	
	// Для документов отгрузки проверим нет ли долгов по взаиморасчетам.
	Если ВидОперацииПродажа Тогда
		
		ПроверитьОтгрузкиКонтрагентуВДолг(Объект, РасчетыДляПроверки, Отказ);
		
	КонецЕсли;
	
	Если ПроверкаМаксимальногоПревышенияКредитаКонтрагента Тогда
		
		ПроверитьМаксимальноеПревышениеСуммыКредитаПоДоговору(Объект, РасчетыДляПроверки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьТаблицуДляПроверкиПродажи()
	
	ПроверкаПродаж = Новый ТаблицаЗначений;
	ПроверкаПродаж.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПроверкаПродаж.Колонки.Добавить("ДоговорВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.ДоговорыВзаиморасчетов"));
	ПроверкаПродаж.Колонки.Добавить("МаксимальныйКредит", Новый ОписаниеТипов("Число"));
	ПроверкаПродаж.Колонки.Добавить("ОтменаКонтроляСуммыКредита", Новый ОписаниеТипов("Булево"));
	ПроверкаПродаж.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ПроверкаПродаж.Колонки.Добавить("СуммаДолга", Новый ОписаниеТипов("Число"));
	
	Возврат ПроверкаПродаж;
	
КонецФункции

Процедура ЗаполнитьСуммуДолговКонтрагентов(
		Объект,
		ДанныеОРасчетахСКонтрагентами,
		ЭтоПродажа)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	               |	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	               |	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	               |			&Момент,
	               |			Контрагент В (&Контрагенты)
	               |				И ДоговорВзаиморасчетов В (&ДоговорыВзаиморасчетов)
	               |				#УсловиеОтменыКонтроляКредита) КАК РасчетыСКонтрагентамиОстатки";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"#УсловиеОтменыКонтроляКредита",
		?(ЭтоПродажа, "", "И НЕ ДоговорВзаиморасчетов.ОтменаКонтроляСуммыКредита"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Момент", ?(
		ЗначениеЗаполнено(Объект.Ссылка),
		Новый Граница(
			?(Объект.ДополнительныеСвойства.Свойство("ДляПроведения"),
				ПолучитьЗначениеПараметраСтруктуры(
					Объект.ДополнительныеСвойства.ДляПроведения,
					"МоментВремени",
					Объект.МоментВремени()),
				Объект.МоментВремени()),
				ВидГраницы.Исключая),
		Неопределено));
	Запрос.УстановитьПараметр("Контрагенты", ДанныеОРасчетахСКонтрагентами.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр(
		"ДоговорыВзаиморасчетов",
		ДанныеОРасчетахСКонтрагентами.ВыгрузитьКолонку("ДоговорВзаиморасчетов"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УсловиеПоиска = Новый Структура("Контрагент, ДоговорВзаиморасчетов");
	Для Каждого СтрокаРасчетов Из ДанныеОРасчетахСКонтрагентами Цикл
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаРасчетов);
		Если Выборка.НайтиСледующий(УсловиеПоиска) Тогда
			
			СтрокаРасчетов.СуммаДолга = Выборка.СуммаОстаток;
			
		КонецЕсли;
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОтгрузкиКонтрагентуВДолг(Объект, РасчетыДляПроверки, Отказ)
	
	РазрешитьОтгрузкуВДолг = ПраваИНастройкиПользователя.Значение("РазрешитьОтгрузкуВДолг", Объект);
	
	Для Каждого СтрокаРасчетов Из РасчетыДляПроверки Цикл
		
		Если СтрокаРасчетов.Сумма + СтрокаРасчетов.СуммаДолга > 0 Тогда
			
			Если РазрешитьОтгрузкуВДолг И СтрокаРасчетов.СуммаДолга > 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Зафиксирована отгрузка контрагенту при наличии задолженности по договору взаиморасчетов.'"),
					Объект
				);
				
			ИначеЕсли НЕ РазрешитьОтгрузкуВДолг 
				И ((СтрокаРасчетов.СуммаДолга + СтрокаРасчетов.Сумма) > СтрокаРасчетов.МаксимальныйКредит
				И НЕ СтрокаРасчетов.ОтменаКонтроляСуммыКредита) Тогда
				
				СообщениеОбОшибке = ?(СтрокаРасчетов.СуммаДолга <= 0,
						НСтр("ru = 'Нет прав производить отгрузку без предварительной оплаты.'"),
						НСтр("ru = 'Нет прав производить отгрузку при наличии задолженности по договору взаиморасчетов.'"));
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, Объект,,, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьМаксимальноеПревышениеСуммыКредитаПоДоговору(Объект, РасчетыДляПроверки, Отказ)
	
	РазрешитьПревышениеМаксимальногоКредитаКонтрагента = 
		ПраваИНастройкиПользователя.Значение("РазрешитьПревышениеМаксимальногоКредитаКонтрагента", Объект);
	
	Для Каждого СтрокаРасчетов Из РасчетыДляПроверки Цикл
		
		Если НЕ СтрокаРасчетов.ОтменаКонтроляСуммыКредита
			И ((СтрокаРасчетов.СуммаДолга + СтрокаРасчетов.Сумма) > СтрокаРасчетов.МаксимальныйКредит) Тогда
			
			// Проверим есть ли право на превышение максимального кредита.
			Если РазрешитьПревышениеМаксимальногоКредитаКонтрагента Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Зафиксировано превышение максимальной суммы кредита по договору взаиморасчетов.'"),
					Объект);
				
			Иначе
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Нет прав на превышение максимальной суммы кредита по договору взаиморасчетов.'"),
					Объект,,, Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти