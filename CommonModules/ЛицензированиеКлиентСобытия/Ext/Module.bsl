
#Область ПрограммныйИнтерфейс

// Обработка состояния закрытия формы системы защиты.
//
// Параметры:
//  Результат             - Произвольный - Результат закрытия формы.
//  ОбработчикПродолжения - Структура    - Дополнительные параметры.
//
Процедура ОбработатьЗакрытиеФормыСостоянияСистемыЗащиты(Результат, ОбработчикПродолжения) Экспорт
	Отказ = ?(Результат = Неопределено,Истина,Результат);
	
	Если Отказ Тогда
		ОписаниеОшибки = "";
		ЛицензированиеСервер.ЗавершениеРаботыСистемыЛицензирования(ОписаниеОшибки);
		ЗавершитьРаботуСистемы();
	Иначе
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, ИСТИНА);
	КонецЕсли;
	
КонецПроцедуры

// Эта процедура выполняется после старта системы защиты в обычном приложении
//
// Параметры:
//  РезультатЗапуска - Булево - Флаг успешного старта системы защиты.
//  ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура ПослеСтартаСистемыЗащитыОбычноеПриложение(РезультатЗапуска, ДополнительныеПараметры) Экспорт
	//
КонецПроцедуры

// Эта процедура выполняется после успешного старта системы лицензирования
//
// Параметры:
//  РезультатЗапуска - Булево - Флаг успешного старта системы лицензирования.
//  ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура ПослеСтартаСистемыЗащиты(РезультатЗапуска, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗапуска=ИСТИНА Тогда
		ЗавершитьРаботуСистемы();
	КонецЕсли;
	
	// прочий код
	
КонецПроцедуры

// Обработчик при начале работы системы.
//
// Параметры:
//  ОбработчикПродолжения - ОписаниеОповещения - Обработчик продолжения выполнения обработки.
//
Процедура ПриНачалеРаботыСистемы(ОбработчикПродолжения) Экспорт
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		
		СписокРешений = ЛицензированиеПоддержка.СписокРешений();
		РезультатыЗапуска = Новый Массив;
		РезультатыЗапускаПоВсемСерверам = Новый Массив;
		Ошибка = Ложь;
		
		АдресаСерверовЛицензирования = ЛицензированиеСервер.СписокАдресовСервераЛицензирования();
		
		КоличествоСерверов = АдресаСерверовЛицензирования.Количество();
		Сч = 1;
		Для Каждого АдресСервера Из АдресаСерверовЛицензирования Цикл
			
			ЛицензированиеСервер.УстановитьПараметрСеансаТекущийАдресСервераЛицензирования(АдресСервера);
			
			Для Каждого Решение Из СписокРешений Цикл
				ОписаниеОшибки = "";
				КодОшибки = 0;
				ЛицензированиеСервер.НачалоРаботыСистемыЛицензирования(Решение.Ключ, ОписаниеОшибки, КодОшибки);
				Если ОписаниеОшибки<>"" Тогда
					Ошибка = Истина;
				КонецЕсли;
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ОписаниеОшибки",ОписаниеОшибки);
				ПараметрыФормы.Вставить("КодОшибки",КодОшибки);
				ПараметрыФормы.Вставить("ПрограммноеОткрытиеФормы",Истина);
				ПараметрыФормы.Вставить("ИмяОбработки", Решение.Ключ);
				ПараметрыФормы.Вставить("ИмяРешения", Решение.Значение);
				РезультатыЗапуска.Добавить(ПараметрыФормы); 
				РезультатыЗапускаПоВсемСерверам.Добавить(ПараметрыФормы);
			КонецЦикла;
			
			Если Ошибка Тогда // В случае нескольких серверов лицензирования - ошибка запуска на последнем сервере  
				
				Если ЛицензированиеСервер.ЕстьОшибкаСоединенияССервером(РезультатыЗапуска) И Сч < КоличествоСерверов Тогда
					// Если ошибка соединения с сервером, на сервере не найден ключ и список серверов не исчерпан, то пробуем
					// подключиться к другому серверу.
					Ошибка = Ложь;
					РезультатыЗапуска.Очистить();
					Сч = Сч + 1;
					Продолжить;
				КонецЕсли;
				
				ПараметрыФормы = Новый Структура("РезультатыЗапуска,ПрограммноеОткрытиеФормы", РезультатыЗапускаПоВсемСерверам, ИСТИНА);
				Оповещение = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСостоянияСистемыЗащиты", ЛицензированиеКлиентСобытия, ОбработчикПродолжения);
				ОткрытьФорму("Обработка.УправлениеЛицензированием.Форма.СостояниеСистемыЗащиты",ПараметрыФормы, , , , , Оповещение);
				
			Иначе
				ВыполнитьОбработкуОповещения(ОбработчикПродолжения, ИСТИНА);
				Прервать; // Прекратить перебор серверов
			КонецЕсли;
			
		КонецЦикла;
		
	#КонецЕсли
	
КонецПроцедуры

// Обработчик при начале работы системы (обычное приложение).
//
// Параметры:
//  ОбработчикПродолжения - ОписаниеОповещения - Обработчик продолжения выполнения обработки.
//
Процедура ПриНачалеРаботыСистемыОбычноеПриложение(ОбработчикПродолжения) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СписокРешений = ЛицензированиеПоддержка.СписокРешений();
		РезультатыЗапуска = Новый Массив;
		РезультатыЗапускаПоВсемСерверам = Новый Массив;
		Ошибка = Ложь;
		
		АдресаСерверовЛицензирования = ЛицензированиеСервер.СписокАдресовСервераЛицензирования();
		
		КоличествоСерверов = АдресаСерверовЛицензирования.Количество();
		Сч = 1;
		
		Для Каждого АдресСервера Из АдресаСерверовЛицензирования Цикл
			
			ЛицензированиеСервер.УстановитьПараметрСеансаТекущийАдресСервераЛицензирования(АдресСервера);
			
			Для Каждого Решение Из СписокРешений Цикл
				ОписаниеОшибки = "";
				КодОшибки = 0;
				
				// Проверка и разбор длинного имени
				ИмяОбработки = Решение.Ключ;
				ИмяМакетаХранилища = "";
				ИмяМакетаПараметровЛицензирования = "";
				КороткоеИмяОбработки = "";
				Если НЕ ЛицензированиеСервер.РазделитьИмяОбработки(ИмяОбработки, ИмяМакетаХранилища, ИмяМакетаПараметровЛицензирования, КороткоеИмяОбработки) Тогда
					ОписаниеОшибки = НСтр("ru = 'Неверный формат имени обработки:';uk = 'Невірний формат імені обробки:'") + Символы.ПС + ИмяОбработки;
					КодОшибки = 1;
					Возврат;
				КонецЕсли;	
				КлючПродукта = ИмяМакетаХранилища+"."+ИмяМакетаПараметровЛицензирования;
				
				
				Если НЕ ЛицензированиеКлиент.ВыполнитьПривязкуКлиента(КлючПродукта, ОписаниеОшибки) Тогда
					ПоказатьПредупреждение(,ОписаниеОшибки);
					Отказ = Истина;
				КонецЕсли;
				
				ОписаниеОшибки = "";
				КодОшибки = 0;
				
				ЛицензированиеСервер.НачалоРаботыСистемыЛицензирования(Решение.Ключ, ОписаниеОшибки, КодОшибки);
				Если ОписаниеОшибки<>"" Тогда
					Ошибка = Истина;
				КонецЕсли;
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ОписаниеОшибки",ОписаниеОшибки);
				ПараметрыФормы.Вставить("КодОшибки",КодОшибки);
				ПараметрыФормы.Вставить("ПрограммноеОткрытиеФормы",Истина);
				ПараметрыФормы.Вставить("ИмяОбработки", Решение.Ключ);
				ПараметрыФормы.Вставить("ИмяРешения", Решение.Значение);
				РезультатыЗапуска.Добавить(ПараметрыФормы); 
				РезультатыЗапускаПоВсемСерверам.Добавить(ПараметрыФормы);
			КонецЦикла;
			
			Если Ошибка Тогда // В случае нескольких серверов лицензирования - ошибка запуска на последнем сервере
				
				Если ЛицензированиеСервер.ЕстьОшибкаСоединенияССервером(РезультатыЗапуска) И Сч < КоличествоСерверов Тогда
					// Если ошибка соединения с сервером, на сервере не найден ключ и список серверов не исчерпан, то пробуем
					// подключиться к другому серверу.
					Ошибка = Ложь;
					РезультатыЗапуска.Очистить();
					Сч = Сч + 1;
					Продолжить;
				КонецЕсли;
				
				ПараметрыФормы = Новый Структура("РезультатыЗапуска,ПрограммноеОткрытиеФормы", РезультатыЗапускаПоВсемСерверам, ИСТИНА);
				Оповещение = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСостоянияСистемыЗащиты", ЛицензированиеКлиентСобытия, ОбработчикПродолжения);
				ОткрытьФорму("Обработка.УправлениеЛицензированием.Форма.СостояниеСистемыЗащиты",ПараметрыФормы, , , , , Оповещение);
				
			Иначе
				ВыполнитьОбработкуОповещения(ОбработчикПродолжения, ИСТИНА);
				Прервать; // Прекратить перебор серверов
			КонецЕсли;
			
		КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти