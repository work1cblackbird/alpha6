// Общий модуль "Управление диалогом регистра (клиент)"

#Область ПрограммныйИнтерфейс

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ - Булево           - Признак отказа от создания формы.
//
Функция ПриОткрытии(Форма, Отказ) Экспорт
	
	// !!!_view Изменение параметров отображения кнопок командной панели совершает лишний серверный вызов.
	// Требуется перенести в обработчик создания формы,
	// но после того как будет исправлена ошибка платформы по обращению SW788871.
	
	// Изменим режим отображения стандартных кнопок командной панели формы
	Форма.Элементы.ФормаЗаписать.Отображение = ОтображениеКнопки.Картинка;
	
	// Перенесем дублирующие действия командной панели "Взаимодействия" в подменю "Еще"
	Если ТипЗнч(Форма.Элементы.ФормаВзаимодействия)=Тип("ГруппаФормы") Тогда
		Для каждого ЭлементФормы Из Форма.Элементы.ФормаВзаимодействия.ПодчиненныеЭлементы Цикл
			ЭлементФормы.ТолькоВоВсехДействиях = ИСТИНА;
		КонецЦикла;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПриОткрытии()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ                - Булево - Признак отказа от создания формы.
//  ЗавершениеРаботы     - Булево - Признак закрытия формы в процессе завершения работы приложения.
//  ТекстПредупреждения  - Булево - Сообщение пользователю не завершенной работе в данном окне.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
Функция ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПередЗакрытием()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте при закрытии формы.
//
// Параметры:
//  Форма            - УправляемаяФорма - Форма, в которой возникло событие.
//  ЗавершениеРаботы - Булево - Признак закрытия формы в процессе завершения работы приложения.
//
Функция ПриЗакрытии(Форма, ЗавершениеРаботы) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПриЗакрытии()

// Устарела. Будет удалена.
// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы.
//
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  Объект            - ДанныеФормыСтруктура      - Объект, для которого выполняется обработка события.
//  Окно              - ОкноКлиентскогоПриложения - Содержит окно, в котором требуется открыть форму.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Функция ОбработкаВыбора(Форма, ВыбранноеЗначение, Окно, ПараметрыДействия) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаВыбора()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  Форма               - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяСобытия          - Строка           - Имя, идентифицирующее событие.
//  Параметр            - Произвольный     - Параметр сообщения.
//  Источник            - Произвольный     - Источник события.
//  ПараметрыДействия   - Структура        - Набор параметров, использующихся при выполнения операции.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ПараметрыДействия = Неопределено) Экспорт
	
	// Обработаем в зависимости от вида события
	Если Источник="ПодключаемоеОборудование" Тогда
		Если НЕ Форма.ВводДоступен() Тогда
			Возврат ЛОЖЬ;
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПараметрыДействия.Вставить("КодКарты", Параметр[0]);
			Возврат ИСТИНА;
			
		ИначеЕсли ИмяСобытия = "ScanData" Тогда
			
			ШтрихКод = ?((Параметр.Количество() > 1) И (Параметр[1] <> Неопределено), Параметр[1][1], Параметр[0]);
			
			// Удалим из кода маркировки криптохвосты
			ШтрихКод = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(ШтрихКод);
			
			ПараметрыДействия.Вставить("ШтрихКод", ШтрихКод);
			Возврат ИСТИНА;
			
		КонецЕсли;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЛОЖЬ;
	
КонецФункции // ОбработкаОповещения()

// Общий обработчик события возникающего на клиенте перед выполнением записи объекта из формы.
//
// Параметры:
//  Форма           - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ           - Булево         - Признак отказа от записи.
//  ПараметрыЗаписи - Структура      - Структура, содержащая параметры записи.
//   
// Возвращаемое значение:
//  Булево - признак отказа записи
//
Функция ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	КлючеваяОперация = "ЗаписьРегистра" + СтрЗаменить(Форма.ПолноеИмяОбъекта, "РегистрСведений.", "");
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ПередЗаписью()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте после записи объекта и после завершения транзакции.
//
// Параметры:
//  Форма           - УправляемаяФорма - Форма, в которой возникло событие.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
Функция ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПослеЗаписи()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ РЕГИСТРА

// Общий обработчик события выбора одного из пунктов меню доступных хоз. операций
// 
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  Команда           - КомандаФормы              - Команда, в которой возникло данное событие.
//  Запись            - ДанныеФормыСтруктура      - Запись, для которой выполняется обработка события.
//  Окно              - ОкноКлиентскогоПриложения - Содержит окно, в котором требуется открыть форму.
//  ПараметрыДействия - Структура                 - Набор параметров, использующихся при выполнения операции.
//
Функция ОбработкаКомандыФормы(Форма, Команда, Запись, Окно=Неопределено,ПараметрыДействия=Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если Команда.Имя="РазрешитьРедактированиеРеквизитовОбъекта" Тогда
		Если ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(Форма,, Объект) Тогда
			ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(Форма);
		КонецЕсли;
	Иначе
		
		Возврат УправлениеСпискомРегистраКлиент.ОбработкаКомандыФормы(Форма, Команда, Запись, Окно,ПараметрыДействия);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЛОЖЬ;
	
КонецФункции // ОбработкаКомандыФормы()

// Общий обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
Функция ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Обработаем в зависимости от переданного параметра события
	Если ДополнительныеПараметры="РазрешитьРедактированиеРеквизитовОбъекта" И РезультатОповещения Тогда
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(Форма);
	КонецЕсли;
	
	// Возвращаем признак того что действие не обработано
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаРезультатаВыполненияДействия(Форма, ПараметрыДействия) Экспорт
	
	// Обработаем в зависимости от параметров действия
	Если ТипЗнч(ПараметрыДействия) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УправлениеДиалогомКлиент.ПоказатьРезультатВыполнения(Форма, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОСНОВНЫХ СОБЫТИЙ ФОРМЫ РЕГИСТРА


#КонецОбласти

