
/////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ОБРАБОТЧИКИ

#Область ПрограммныйИнтерфейс

// Открывает форму с таблицей значений для просмотра пользователем.
//
// Параметры:
//  Адрес - Строка - Адрес таблицы во временном хранилище.
//  Заголовок - Строка - Представление заголовка формы.
//  Владелец - УправляемаяФорма- Владелец формы.
//
Процедура ПоказатьТаблицуЗначений(Адрес, Заголовок, Владелец=Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		
		ОткрытьФорму(
			"ОбщаяФорма.ОтобразитьТаблицуЗначений",
			Новый Структура("Адрес,Заголовок", Адрес, Заголовок),
			Владелец,
			Владелец,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Разворачивает дерево в форме
//
// Параметры:
//  Форма - УправляемаяФорма - Форма содержащая дерево.
//  ИмяЭлемента - Строка - Имя элемента дерева в форме.
//  СПодчиненными - Булево - Определяет нужно ли разворачивать только первый уровень, или все дерево.
//
Процедура РазвернутьДерево(Форма, ИмяЭлемента, СПодчиненными = Истина) Экспорт
	
	Для Каждого ЭлементДерева Из Форма[ИмяЭлемента].ПолучитьЭлементы() Цикл
		Форма.Элементы[ИмяЭлемента].Развернуть(ЭлементДерева.ПолучитьИдентификатор(), СПодчиненными);
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает смещение для часового пояса подразделения от часового пояса информационной базы.
//
// Параметры:
//  ПодразделениеКомпании - СправочникСсылка.ПодразделенияКомпании - Подразделение для которого необходимо получить смещение.
//
// Возвращаемое значение:
//  СмещениеВремени - Число - Смещение между часовым поясом подразделения и ИБ в секундах.
//
Функция СмещениеВремениВПодразделенииКомпании(ПодразделениеКомпании) Экспорт
	
	Возврат ОбщегоНазначенияАвтосалонВызовСервера.СмещениеВремениВПодразделенииКомпании(ПодразделениеКомпании);
	
КонецФункции

// Удаляет строки из таблицы связанные с ведущей таблицей.
//
// Параметры:
//  ВедущиеСтроки - Массив, Число - Набор или одиночная удаляемая строка в ведущей таблице.
//  ТаблицаСПочиненными - ДанныеФормыКоллекция - Таблица из которой необходимо удалять данные.
//  КлючВедущего - Строка - Имя колонки связи в ведущей таблице.
//  КлючПодчиненного - Строка - Имя колонки в подчиненной таблице.
//
Процедура УдалитьСопутствующиеСтроки(
	Знач ВедущиеСтроки,
	ТаблицаСПочиненными,
	КлючВедущего,
	КлючПодчиненного="") Экспорт
	
	Если ТипЗнч(ВедущиеСтроки) <> Тип("Массив") Тогда
		
		ВедущиеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВедущиеСтроки);
		
	КонецЕсли;
	
	Если ПустаяСтрока(КлючПодчиненного) Тогда
		
		КлючПодчиненного = КлючВедущего;
		
	КонецЕсли;
	
	Если НЕ ЕстьРеквизитНаКлиенте(ВедущиеСтроки[0], КлючВедущего) Тогда
		
		ВызватьИсключение НСтр("ru = 'Неверный ключ для ведущей таблицы.'");
		
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого Строка Из ВедущиеСтроки Цикл
		
		НайденныСтроки = ТаблицаСПочиненными.НайтиСтроки(Новый Структура(КлючПодчиненного, Строка[КлючВедущего]));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдаляемыеСтроки, НайденныСтроки);
		
	КонецЦикла;
	
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		
		ТаблицаСПочиненными.Удалить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

// Переводит массив с идентификаторами строк в массив строк таблицы.
//
// Параметры:
//  Идентификаторы - Массив - Набор идентификаторов.
//  Таблица        - ДанныеФормыКоллекция - Таблица для поиска строк
// 
// Возвращаемое значение:
//  Массив - Массив строк исходной таблицы.
//
Функция ИдентификаторыТаблицыВСтроки(Идентификаторы, Таблица) Экспорт
	
	Строки = Новый Массив;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		Строки.Добавить(Таблица.НайтиПоИдентификатору(Идентификатор));
		
	КонецЦикла;
	
	Возврат Строки;
	
КонецФункции

#КонецОбласти