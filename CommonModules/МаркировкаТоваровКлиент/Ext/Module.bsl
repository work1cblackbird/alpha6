
#Область ПрограммныйИнтерфейс

// Обрабтчик при изменении номенклатуры, по которой аедется учет маркировки.
//
// Параметры:
//  Объект					 - ДанныеФормыСтруктура	 - Данные документа для которого выполянется заполнение.
//  Строка					 - ДанныеФормыЭлементКоллекции	 - Данные строки табличной части товара с маркировкой.
//  Форма					 - УправляемаяФорма				 - Форма документа.
//  УдалятьКодыМаркировки	 - Истина - Признак удаления ранее считанных кодов.
//
Процедура НачатьСканированиеМаркировки(Объект, Строка, Форма, УдалятьКодыМаркировки = Истина) Экспорт
	
	// Инициализация параметров сканирования кода маркировки
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторТовара",  Строка.ИдентификаторТовара);
	ПараметрыФормы.Вставить("Номенклатура",         Строка.Номенклатура);
	
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"Подключаемый_СканированиеМаркировкиЗавершение",
		Форма,
		ПараметрыФормы);
	
	// Проверим введены ли были ранее маркировки до изменения номенклатуры.
	СтруктураПоиска = Новый Структура("ИдентификаторТовара", Строка.ИдентификаторТовара);
	НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 И УдалятьКодыМаркировки Тогда
		
		// Выбрали номенклатуру, по которой не ведется учет по маркировке
		Если Строка.МаркируемыйТовар Тогда
			
			// Зададим вопрос об очистке ранее сканированных маркировок.
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ПараметрыФормы", ПараметрыФормы);
			ПараметрыОповещения.Вставить("Форма", Форма);
			ПараметрыОповещения.Вставить("ОбработкаОповещения", ОбработкаОповещения);
			ПараметрыОповещения.Вставить("СтрокиКодовМаркировки", НайденныеСтроки);
			
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"Подключаемый_ЗавершениеВопросаОчисткиКодовМаркировки",
				ЭтотОбъект,
				ПараметрыОповещения);
			
			ПоказатьВопрос(
				ОбработчикОповещения,
				НСтр("ru = 'Для данной строки указаны коды маркировки. Удалить считанные коды маркировки?'"),
				РежимДиалогаВопрос.ДаНет);
			
			Возврат;
		Иначе
			// Очистим ранее введенные маркировки
			Для Каждого ТекущаяМаркировка Из НайденныеСтроки Цикл
				Объект.КодыМаркировки.Удалить(ТекущаяМаркировка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьСканированиеМаркировки(Форма, ПараметрыФормы, ОбработкаОповещения);
	
КонецПроцедуры // НачатьСканированиеМаркировки()

// Открывает форму редактирования текущей строки товаров.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма документа.
//  ВыбраннаяСтрока		 - Ссылка			 - Значение выбранной строки.
//  Поле				 - ПолеФормы		 - Активное поле.
//  СтандартнаяОбработка - Булево			 - В данный параметр передается признак выполнения системной обработки события.
//  ИмяТабличнойЧасти	 - Строка			 - Имя табличной части документа.
//  ТолькоПросмотрКодов	 - Булево			 - Признак того, что список не доступен для редактирования.
//
Процедура ОткрытьСписокКодовМаркировки(
		Форма,
		ВыбраннаяСтрока,
		Поле,
		СтандартнаяОбработка,
		ИмяТабличнойЧасти = "Товары",
		ТолькоПросмотрКодов = Ложь) Экспорт
	
	// Проверим выбранное поле
	Если Форма.Элементы.Найти(ИмяТабличнойЧасти + "КодыМаркировки") = Неопределено
		ИЛИ Поле.Имя <> Форма.Элементы[ИмяТабличнойЧасти + "КодыМаркировки"].Имя Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Неопределено;
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// Проверим, что у строки ведется маркировка
	Если ЕстьРеквизитНаКлиенте(Строка, "МаркируемыйТовар") 
		И НЕ Строка.МаркируемыйТовар Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЧек = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Чек")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекНаОплату")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекКоррекции");
	
	// Получим список кодов маркировки
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторТовара", Строка.ИдентификаторТовара);
	НайденныеКодыМаркировки = Объект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
	
	СписокКодовМаркировки = Новый Массив;
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	Если ЕстьРеквизитНаКлиенте(Строка, "ПроверкаСоответствияКодовМаркировкиПроводилась") Тогда
		ПроверкаСоответствияКодовМаркировкиПроводилась = Строка.ПроверкаСоответствияКодовМаркировкиПроводилась;
		ОтображатьСостояния = Истина;
	ИначеЕсли ЕстьРеквизитНаКлиенте(Форма, "ПроверкаСоответствияКодовМаркировкиПроводилась") Тогда
		ПроверкаСоответствияКодовМаркировкиПроводилась = Форма.ПроверкаСоответствияКодовМаркировкиПроводилась;
		ОтображатьСостояния = Истина;
	Иначе
		ОтображатьСостояния = Ложь;
	КонецЕсли;
	
	ПредставлениеПроверкиККТ = МенеджерОборудованияАвтосалонКлиентСервер.ОформлениеРезультатаПроверкиКодовМаркировки();
	
	Для Каждого ТекущаяСтрока Из НайденныеКодыМаркировки Цикл
		СтрокаСписка = Новый Структура(
			"КодМаркировки,СостояниеКодаМаркировкиИБ,СостояниеКодаМаркировкиСМТ,Соответствует,Примечание,Возврат"
		);
		
		Если ЭтоЧек Тогда
			
			СтрокаСписка.Вставить("КодРезультатаПроверки");
			СтрокаСписка.Вставить("КодМаркировкиПроверен");
			СтрокаСписка.Вставить("КодОбработкиЗапроса");
			СтрокаСписка.Вставить("ПредставлениеРезультатаПроверки");
			СтрокаСписка.Вставить("РезультатПроверки");
			СтрокаСписка.Вставить("РезультатПроверкиОИСМ");
			СтрокаСписка.Вставить("СтатусТовара");
			СтрокаСписка.Вставить("ТекстОшибки");
			СтрокаСписка.Вставить("ЗначениеОтраслевогоРеквизита");
			СтрокаСписка.Вставить("РезультатПроверкиРазрешительногоРежима");
			СтрокаСписка.Вставить("ТекстОшибкиПроверки");
			
			СтрокаСписка.Вставить("СтатусПроверкиККТ");
			СтрокаСписка.Вставить("КартинкаПроверкиККТ");
			
			Если МенеджерОборудованияАвтосалонКлиентСервер.НеПроверенКодМаркировки(ТекущаяСтрока) Тогда
				ИмяСтатуса = "НеПроверено";
			ИначеЕсли МенеджерОборудованияАвтосалонКлиентСервер.ОшибкаПроверкиКодаМаркировки(ТекущаяСтрока) Тогда
				ИмяСтатуса = "Ошибка";
			Иначе
				ИмяСтатуса = "Выполнено";
			КонецЕсли;
			
			ПредставлениеПроверки = ПредставлениеПроверкиККТ.Получить(ИмяСтатуса);
			СтрокаСписка.СтатусПроверкиККТ = ПредставлениеПроверки.Представление;;
			СтрокаСписка.КартинкаПроверкиККТ = ПредставлениеПроверки.Картинка;
			
			ПредставлениеПроверки = ПредставлениеПроверкиККТ.Получить(ИмяСтатуса);
			СтрокаСписка.Вставить("СтатусПроверкиККТ", ПредставлениеПроверки.Представление);
			СтрокаСписка.Вставить("КартинкаПроверкиККТ", ПредставлениеПроверки.Картинка);
			
			Если ТекущаяСтрока.РезультатПроверкиРазрешительногоРежима = 0 Тогда
				ИмяСтатуса = "НеПроверено";
			ИначеЕсли ТекущаяСтрока.РезультатПроверкиРазрешительногоРежима = 1 Тогда
				ИмяСтатуса = "Выполнено";
			ИначеЕсли ТекущаяСтрока.РезультатПроверкиРазрешительногоРежима = 2 Тогда
				ИмяСтатуса = "Ошибка";
			КонецЕсли;
			
			ПредставлениеПроверки = ПредставлениеПроверкиККТ.Получить(ИмяСтатуса);
			СтрокаСписка.Вставить("ПроверкаРазрешительногоРежима", ПредставлениеПроверки.Представление);
			СтрокаСписка.Вставить("КартинкаПроверкиРазрешительногоРежима", ПредставлениеПроверки.Картинка);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаСписка, ТекущаяСтрока);
		Если НЕ ПроверкаСоответствияКодовМаркировкиПроводилась Тогда 
			СтрокаСписка.Соответствует = Истина;
			СтрокаСписка.СостояниеКодаМаркировкиИБ = Неопределено;
			СтрокаСписка.СостояниеКодаМаркировкиСМТ = Неопределено;
			СтрокаСписка.Примечание = "";
		КонецЕсли;
		
		СписокКодовМаркировки.Добавить(СтрокаСписка);
	КонецЦикла;
	
	ЭтоКорректировка = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации");
	ЭтоЧекКоррекции = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекКоррекции");
	ОперацииВозврата = Новый Массив();
	ОперацииВозврата.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.ЧекНаВозврат"));
	ОперацииВозврата.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.ЧекНаОплатуВозврат"));
	ЭтоВозврат = ОперацииВозврата.Найти(Объект.ХозОперация) <> Неопределено;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокКодовМаркировки", СписокКодовМаркировки);
	ПараметрыФормы.Вставить("ИдентификаторТовара", Строка.ИдентификаторТовара);
	ПараметрыФормы.Вставить("Номенклатура", Строка.Номенклатура);
	ПараметрыФормы.Вставить("ОтображатьСостояния", ОтображатьСостояния);
	ПараметрыФормы.Вставить("ТолькоПросмотр", 
		Форма.ТолькоПросмотр ИЛИ Форма.Элементы[ИмяТабличнойЧасти].ТолькоПросмотр ИЛИ ТолькоПросмотрКодов);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ПараметрыФормы.Вставить("ЭтоКорректировка", ЭтоКорректировка);
	ПараметрыФормы.Вставить("ЭтоЧекКоррекции", ЭтоЧекКоррекции);
	ПараметрыФормы.Вставить("ЭтоВозврат", ЭтоВозврат);
	
	// Передадим ФР документа
	Если ЭтоЧек Тогда
		ПараметрыФормы.Вставить("ФР", Объект.ФР);
		ПараметрыФормы.Вставить("ВыводитьПроверкуРазрешительногоРежима", Истина);
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		Форма,
		"РедактированиеКодовМаркировкиСтрокиТовара"
	);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаСпискаМаркировок",
		ПараметрыФормы,
		Форма,
		, , ,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ОткрытьСписокКодовМаркировки()

// Добавление кода маркировки в табличную часть документа "Коды маркировки"
//
// Параметры:
//  ТаблицаКодовМаркировки	 - ДанныеФормыСтруктура - Табличная часть документа с кодами маркировки.
//  КодМаркировки			 - Строка	 - Добавляемый код маркировки
//  ДополнительныеПараметры	 - Структура - Параметры сканирования
//
Процедура ДобавитьКодМаркировки(ТаблицаКодовМаркировки, КодМаркировки, ДополнительныеПараметры) Экспорт
	
	Если КодМаркировки <> Неопределено И НЕ ПустаяСтрока(КодМаркировки) Тогда
		
		ИдентификаторТовара = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИдентификаторТовара", "");
		
		Если ИдентификаторТовара <> "" Тогда
			
			// Удалим ранее считанные для строки
			// Предполагается, что это единственная маркировка считанная на данный момент
			СтруктураПосика = Новый Структура("ИдентификаторТовара", ИдентификаторТовара);
			НайденныеСтроки = ТаблицаКодовМаркировки.НайтиСтроки(СтруктураПосика);
			
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				ТаблицаКодовМаркировки.Удалить(ТекущаяСтрока);
			КонецЦикла;
			
			// Добавим новую строку в список маркировок.
			НоваяСтрока = ТаблицаКодовМаркировки.Добавить();
			НоваяСтрока.ИдентификаторТовара = ИдентификаторТовара;
			НоваяСтрока.КодМаркировки = КодМаркировки;
			
			Если ЕстьРеквизитНаКлиенте(НоваяСтрока, "Подтверждено") Тогда
				НоваяСтрока.Подтверждено = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбменСЧестнымЗнаком

// Начало отправки запроса на сервер Честного знака
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект     - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ОтправитьПолучитьДокумент(Форма, Объект, ДополнительныеПараметры) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ПроверятьОбъект", Истина)
		И (НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ Форма.Модифицированность) Тогда
		
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Данные еще не записаны.
			|Выполните данную операцию после записи документа.'"));
		Возврат;
		
	КонецЕсли;
	
	Если Форма.РежимОбменаСЧестнымЗнаком =
			ПредопределенноеЗначение("Перечисление.СпособыОбменаСЧестнымЗнаком.ЧерезAPI") Тогда
		
		ОбменССистемойМаркировкиКлиент.ФормированиеЗапросаВФоне(Форма, Объект, ДополнительныеПараметры);
		
	ИначеЕсли Форма.РежимОбменаСЧестнымЗнаком = 
			ПредопределенноеЗначение("Перечисление.СпособыОбменаСЧестнымЗнаком.Файловый") Тогда
		
		ОбменССистемойМаркировкиКлиент.ВыполнитьОбменЧерезФайл(Форма, Объект, ДополнительныеПараметры);

	Иначе 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не задан режим обмена с Честным знаком. Операция отменена.'")
		);		
		
	КонецЕсли;
	
КонецПроцедуры

// Начало отправки запроса на сервер Честного знака
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект     - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ОтправитьПолучитьЗапрос(Форма, Объект, ДополнительныеПараметры) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если Форма.РежимОбменаСЧестнымЗнаком =
			ПредопределенноеЗначение("Перечисление.СпособыОбменаСЧестнымЗнаком.ЧерезAPI") Тогда
		
		ОбменССистемойМаркировкиКлиент.ФормированиеЗапросаВФоне(Форма, Объект, ДополнительныеПараметры);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Запрос текущих статусов кодов маркировки возможен только через API. Операция отменена'")
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Начало отправки запроса на сервер Честного знака
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект     - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ОбновитьСтатусДокумента(Форма, Объект) Экспорт
	
	ИмяДействия = "ПолучитьСтатусДокумента";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("Документ", Объект.Ссылка);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ИдентификаторДокумента", Форма.ИдентификаторДокумента);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата",
		Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", Форма, ИмяДействия)
	);
	
	ОтправитьПолучитьДокумент(Форма, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Описание доступных статусов кодов маркировки для проверки состояния.
//
// Параметры:
//  ЭтоВозврат		 - Булево - Признак того, что текущим документ производится возврат товара.
//  ЭтоЧекКоррекции	 - Булево - Признак того, что текущий документ "Чек коррекции".
// 
// Возвращаемое значение:
//  Массив - Список доступных статусов кодов маркировки для проверки.
//
Функция РазрешенныеСостояния(ЭтоВозврат = Ложь, ЭтоЧекКоррекции = Ложь) Экспорт
	
	Результат = Новый Массив();
	Если Не ЭтоВозврат Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияКодовМаркировки.ВведенВОборот"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияКодовМаркировки.ВведенВОборотПриВозврате"));
	КонецЕсли;
	
	Если ЭтоВозврат ИЛИ ЭтоЧекКоррекции Тогда
		Результат.Добавить(
			ПредопределенноеЗначение("Перечисление.СостоянияКодовМаркировки.ВыведенИзОборотаРозничнаяПродажа"));
		Результат.Добавить(
			ПредопределенноеЗначение("Перечисление.СостоянияКодовМаркировки.ВыведенИзОборота"));
		Результат.Добавить(
			ПредопределенноеЗначение("Перечисление.СостоянияКодовМаркировки.ПередачаДругомуСобственнику"));
		Результат.Добавить(
			ПредопределенноеЗначение("Перечисление.СостоянияКодовМаркировки.ВыведенИзОборотаДистанционнаяПродажа"));
		Результат.Добавить(
			ПредопределенноеЗначение("Перечисление.СостоянияКодовМаркировки.ВыведенИзОборотаБезвозмезднаяПередача"));
		Результат.Добавить(
			ПредопределенноеЗначение("Перечисление.СостоянияКодовМаркировки.ВыведенИзОборотаПродажаПоГосКонтракту"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Начало отправки запроса на сервер Честного знака
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Строки - Массив - Идентификаторы документов.
//  ИмяСписка - Строка - Название списка документов.
//
Процедура ОбновитьСтатусДокументовИзСписка(Форма, Строки, ИмяСписка = "Список") Экспорт
	
	// Проверим, что все выделенные строки одной организации, чтобы не мешать.
	Документы = Новый Соответствие();
	ТекущаяОрганизация = Неопределено;
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		Форма.Элементы[ИмяСписка].ТекущаяСтрока = ТекущаяСтрока;
		ДанныеДокумента = Форма.Элементы[ИмяСписка].ТекущиеДанные;
		
		Если ТекущаяОрганизация = Неопределено Тогда
			
			ТекущаяОрганизация = ДанныеДокумента.Организация;
			
		КонецЕсли;
		
		Если ТекущаяОрганизация <> ДанныеДокумента.Организация Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Выделите документы одной организации.'"),
				Форма);
			Возврат;
			
		КонецЕсли;
		
		Документы.Вставить(ДанныеДокумента.Ссылка, ДанныеДокумента.ИдентификаторДокумента);
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", "ПолучитьСтатусДокумента");
	ДополнительныеПараметры.Вставить("Документы", Документы);
	ДополнительныеПараметры.Вставить("Организация", ТекущаяОрганизация);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата",
		Новый ОписаниеОповещения("ПолучитьСтатусКодовЗавершение", Форма)
	);
	
	ОбменССистемойМаркировкиКлиент.ФормированиеЗапросаВФоне(Форма, Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

// Разобрать строку штрихкода в соответствии со стандартом GS1.
//
// Параметры:
//  Штрихкод - Строка - значение штрихкода.
//
// Возвращаемое значение:
//  Структура. 
//
Функция РазобратьШтриховойКодТовара(Штрихкод) Экспорт
	
	Возврат МенеджерОборудованияМаркировкаКлиент.РазобратьШтриховойКодТовара(ШтрихКод);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПродолжитьСканированиеМаркировки(Форма, ПараметрыФормы, ОбработкаОповещения)
	
	ОткрытаяФорма = ОткрытьФорму(
		"ОбщаяФорма.ФормаСканированияМаркировки",
		ПараметрыФормы,
		Форма,
		,
		,
		,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Если ОткрытаяФорма = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработкаОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ЗавершениеВопросаОчисткиКодовМаркировки(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		// Получим основной объект данных формы
		Объект = Неопределено;
		ПолучитьОсновнойОбъектФормы(ДополнительныеПараметры.Форма, Объект);
		
		// Очистим ранее введенные маркировки
		Для Каждого ТекущаяМаркировка Из ДополнительныеПараметры.СтрокиКодовМаркировки Цикл
			Объект.КодыМаркировки.Удалить(ТекущаяМаркировка);
		КонецЦикла;
		
		ПродолжитьСканированиеМаркировки(
			ДополнительныеПараметры.Форма, 
			ДополнительныеПараметры.ПараметрыФормы,
			ДополнительныеПараметры.ОбработкаОповещения);
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ЗавершениеВопросаОчисткиКодовМаркировки()

#КонецОбласти
