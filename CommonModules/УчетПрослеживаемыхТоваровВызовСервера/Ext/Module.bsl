#Область ПрограммныйИнтерфейс

// Возвращает адрес и имя файла уведомления 
//  
// Параметры: 
//  Документ - ДанныеФормыСтруктура - объект, для которого формируем уведомление
// 
// Возвращаемое значение:
//  Структура - адрес и имя файла
//
Функция УведомлениеОбОстаткахПрослеживаемогоТовара(ЗНАЧ Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель
		И НЕ Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для данного вида организации нет возможности сделать выгрузку уведомления, т.к. не является юридическим лицом или индивидуальным предпринимателем.'")
		);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРуководителя = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(
		Документ.Ссылка,
		"Руководитель",
		"Руководитель",
		,
		Истина
	);
	Руководитель = ДанныеРуководителя.Руководитель;
	Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации не указан руководитель для подписания. Выгрузка прервана.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоИП = Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
	
	// Проверим наличие ФИО
	Фамилия = "";
	Имя = "";
	Отчество = "";
	Если ЭтоИП Тогда
		ФИООрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Организация, "Фамилия,Имя,Отчество");
		Фамилия = СокрЛП(ФИООрганизации.Фамилия);
		Имя = СокрЛП(ФИООрганизации.Имя);
		Отчество = СокрЛП(ФИООрганизации.Отчество);
		Если ПустаяСтрока(Фамилия) ИЛИ ПустаяСтрока(Имя) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана фамилия или имя физического лица организации. Выгрузка прервана.'"));
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Документ.Товары.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В документе не указаны товары.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	// Сформируем идентификатор данные
	КодНалоговогоОргана = Документ.Организация.КодИМНС;
	
	ИННКПП = СокрЛП(Документ.Организация.ИНН) + ?(ЭтоИП, "", СокрЛП(Документ.Организация.КПП));
	
	ИдентификаторФайла = СтрШаблон("ON_UVOSTTOV_%1_%1_%2_%3_%4",
		КодНалоговогоОргана,
		ИННКПП,
		Формат(ТекущаяДата(), "ДФ=yyyyMMdd"),
		Документ.Ссылка.УникальныйИдентификатор()
	);
	
	ИмяФайла = СтрШаблон("%1/%2", КаталогВременныхФайлов(), ИдентификаторФайла);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Данные о файле
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("ИдФайл", ИдентификаторФайла);
	ЗаписьXML.ЗаписатьАтрибут("ВерсПрог", "Альфа-Авто КОРП " + Метаданные.Версия);
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "5.02");
	
	// Данные о документе уведомлении
	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписьXML.ЗаписатьАтрибут("КНД", "1169011");
	ЗаписьXML.ЗаписатьАтрибут("НомУвед", УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ));
	ЗаписьXML.ЗаписатьАтрибут("ДатаУвед", Формат(Документ.Дата, "ДФ=dd.MM.yyyy"));
	ЗаписьXML.ЗаписатьАтрибут("НомКорр", "0");
	
	// Данные об организации
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвНП");
	
	Если ЭтоИП Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведИП");
		ЗаписьXML.ЗаписатьАтрибут("ИННФЛ", СокрЛП(Документ.Организация.ИНН));
		ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
		ЗаписьXML.ЗаписатьАтрибут("Фамилия", Фамилия);
		ЗаписьXML.ЗаписатьАтрибут("Имя", Имя);
		Если НЕ ПустаяСтрока(Отчество) Тогда
			ЗаписьXML.ЗаписатьАтрибут("Отчество", Отчество);
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведЮЛ");
		НаименованиеОрганизации =
			УправлениеКонтактнойИнформациейАльфаАвто.НормализованнаяСтрокаXML(СокрЛП(Документ.Организация.НаименованиеПолное));
		ЗаписьXML.ЗаписатьАтрибут("НаимОрг", НаименованиеОрганизации);
		ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ", СокрЛП(Документ.Организация.ИНН));
		КППОрганизации = СокрЛП(Документ.Организация.КПП);
		Если НЕ ПустаяСтрока(КППОрганизации) Тогда
			ЗаписьXML.ЗаписатьАтрибут("КПП", СокрЛП(Документ.Организация.КПП));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Подписант данных
	ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
	ЗаписьXML.ЗаписатьАтрибут("ПрПодп", "1");
	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
	ФИОРуководителя = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеРуководителя.РуководительПредставление);
	ЗаписьXML.ЗаписатьАтрибут("Фамилия", Строка(ФИОРуководителя.Фамилия));
	ЗаписьXML.ЗаписатьАтрибут("Имя", Строка(ФИОРуководителя.Имя));
	ЗаписьXML.ЗаписатьАтрибут("Отчество", Строка(ФИОРуководителя.Отчество));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Товары
	НаименованиеТоваров = "";
	Если Документ.Товары.Количество() = 1 Тогда
		НаименованиеТоваров = СокрЛП(Документ.Товары[0].Номенклатура.Наименование);
	Иначе
		НаименованиеТоваров = СокрЛП(Документ.КодТНВЭД.Наименование);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("УведОстатТов");
	ЗаписьXML.ЗаписатьАтрибут("НаимПервичДок", СокрЛП(Документ.ПервичныйДокумент.ХозОперация.Наименование));
	ЗаписьXML.ЗаписатьАтрибут(
		"НомПервичДок",
		УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ.ПервичныйДокумент)
	);
	ЗаписьXML.ЗаписатьАтрибут("ДатаПервичДок", Формат(Документ.Дата, "ДФ=dd.MM.yyyy"));
	ЗаписьXML.ЗаписатьАтрибут("НаимТовДок", СокрЛП(НаименованиеТоваров));
	ЗаписьXML.ЗаписатьАтрибут("КодТНВЭД", СокрЛП(Документ.КодТНВЭД.Код));
	ЗаписьXML.ЗаписатьАтрибут("КолТоварДок", Формат(Документ.Товары.Итог("Количество"), "ЧЦ=18; ЧДЦ=6; ЧРД=.; ЧГ=0"));
	Если ЗначениеЗаполнено(Документ.ЕдиницаИзмерения) Тогда
		ЕдинИзмерДок = Документ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
	Иначе
		ЕдинИзмерДок = "796";
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("ЕдинИзмерДок", СокрЛП(ЕдинИзмерДок));
	Если ЗначениеЗаполнено(Документ.ЕдиницаИзмеренияПрослеживаемости) Тогда
		ЕдинИзмерКол = Документ.ЕдиницаИзмеренияПрослеживаемости.Код;
	Иначе
		ЕдинИзмерКол = "796";
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("ЕдинИзмерКол", СокрЛП(ЕдинИзмерКол));
	КоличТоварКол = Формат(Документ.Товары.Итог("КоличествоПрослеживаемости"), "ЧЦ=18; ЧДЦ=6; ЧРД=.; ЧГ=0");
	ЗаписьXML.ЗаписатьАтрибут("КоличТоварКол", КоличТоварКол);
	ЗаписьXML.ЗаписатьАтрибут("СтТоварБезНДС", Формат(Документ.Товары.Итог("Сумма"), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресФайла", АдресФайла);
	Результат.Вставить("ИмяФайла", ИдентификаторФайла);
	
	Возврат Результат;
	
КонецФункции

// Функция - Сформировать уведомление о ввозе прослеживаемого товара
//
// Параметры:
//  Документ - ДанныеФормыСтруктура - объект, для которого формируем уведомление 
// 
// Возвращаемое значение:
//  Структура - адрес и имя файла
//
Функция СформироватьУведомлениеОВвозеПрослеживаемогоТовара(ЗНАЧ Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДокумента = Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ДанныеДляУведомленияФНС(Документ.Ссылка);
	ШапкаДокумента = ДанныеДокумента[0].Выбрать();
	ШапкаДокумента.Следующий();
	Товары = ДанныеДокумента[1].Выгрузить();
	Отказ = Ложь;
	
	Если НЕ ШапкаДокумента.ОрганизацияФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель
		И НЕ ШапкаДокумента.ОрганизацияФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для данного вида организации нет возможности сделать выгрузку уведомления, т.к. не является юридическим лицом или индивидуальным предпринимателем.'")
		);
		Отказ = Истина;
	КонецЕсли;
	
	ДанныеРуководителя = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(
		ШапкаДокумента.Ссылка,
		"Руководитель",
		"Руководитель",
		,
		Истина
	);
	Руководитель = ДанныеРуководителя.Руководитель;
	Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'У организации не указан руководитель для подписания. Выгрузка прервана.'")
		);
		Отказ = Истина;
	КонецЕсли;
	
	ИНН = ШапкаДокумента.ОрганизацияИНН;
	ЭтоИП = ШапкаДокумента.ОрганизацияФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
	
	// Проверим наличие ФИО
	Фамилия = "";
	Имя = "";
	Отчество = "";
	Если ЭтоИП Тогда
		Фамилия = СокрЛП(ШапкаДокумента.ОрганизацияФамилия);
		Имя = СокрЛП(ШапкаДокумента.ОрганизацияИмя);
		Отчество = СокрЛП(ШапкаДокумента.ОрганизацияОтчество);
		Если ПустаяСтрока(Фамилия) ИЛИ ПустаяСтрока(Имя) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не указана фамилия или имя физического лица организации. Выгрузка прервана.'")
			);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ИНН) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации не заполнен ИНН.'"));
		Отказ = Истина;
	ИначеЕсли СтрДлина(ИНН) <> 10 И НЕ ЭтоИП Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации ИНН не состоит из 10 цифр.'"));
		Отказ = Истина;
	ИначеЕсли СтрДлина(ИНН) <> 12 И ЭтоИП Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации ИНН не состоит из 12 цифр.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЭтоИП Тогда
		КПП = СокрЛП(ШапкаДокумента.ОрганизацияКПП);
		Если ПустаяСтрока(КПП) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации не заполнен КПП.'"));
			Отказ = Истина;
		КонецЕсли;
		Если СтрДлина(КПП) <> 9 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации КПП не состоит из девяти цифр.'"));
			Отказ = Истина;
		КонецЕсли;
	Иначе
		КПП = "";
	КонецЕсли;
	
	ИННКПП = ИНН + КПП;
	КодНалоговогоОргана = СокрЛП(ШапкаДокумента.ОрганизацияКодИМНС);
	
	Если ПустаяСтрока(КодНалоговогоОргана) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации не заполнен код налогового органа.'"));
		Отказ = Истина;
	ИначеЕсли СтрДлина(КодНалоговогоОргана) <> 4 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'У организации код налогового органа не состоит из четырех цифр.'")
		);
		Отказ = Истина;
	КонецЕсли;
	
	ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		ШапкаДокумента.Организация, Новый Структура("Наименование"));
	
	Если ПустаяСтрока(ПредставлениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для организации не сформировано наименование.'"));
		Отказ = Истина;
	КонецЕсли;
	
	// Получим данные контрагента (продавца)
	КодСтраны = СокрЛП(ШапкаДокумента.СтранаРегистрацииКод);
	
	Если ПустаяСтрока(КодСтраны) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не задан код государства-члена ЕАЭС контрагента (ОКСМ).'"));
		Отказ = Истина;
	КонецЕсли;
	
	НалоговыйНомер = СокрЛП(ШапкаДокумента.НалоговыйНомер);
	
	Если ПустаяСтрока(НалоговыйНомер) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не задан налоговый номер контрагента.'"));
		Отказ = Истина;
	ИначеЕсли СтрДлина(НалоговыйНомер) > 14 ИЛИ СтрДлина(НалоговыйНомер) < 8 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Налоговый номер контрагента должен быть указан из 8-14 цифр.'"));
		Отказ = Истина;
	КонецЕсли;
	
	АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ШапкаДокумента.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
	НаименованиеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		ШапкаДокумента.Контрагент, Новый Структура("Наименование"));
	
	Если ПустаяСтрока(АдресКонтрагента) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнен юридический адрес контрагента.'"));
		Отказ = Истина;
	КонецЕсли;
	
	// Остальные проверки
	Если ЗначениеЗаполнено(ШапкаДокумента.РНПТ) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Регистрационный номер партии товаров (РНПТ) не должен быть заполнен.'")
		);
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.ПервичныйДокумент) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнен первичный документ.'"));
		Отказ = Истина;
	КонецЕсли;
	
	ВходящиеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ШапкаДокумента.ПервичныйДокумент, "ВхДокДата,ВхДокНомер");
	
	Если НЕ ЗначениеЗаполнено(ВходящиеДанныеДокумента.ВхДокНомер) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнен номер входящего документа в основании.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВходящиеДанныеДокумента.ВхДокДата) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена дата входящего документа в основании.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Товары.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В документе не указаны товары.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторФайла = СтрШаблон("ON_UVVOZTOV_%1_%1_%2_%3_%4",
		КодНалоговогоОргана,
		ИННКПП,
		Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"),
		ШапкаДокумента.Ссылка.УникальныйИдентификатор()
	);
	
	ИмяФайла = СтрШаблон("%1/%2", КаталогВременныхФайлов(), ИдентификаторФайла);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Данные о файле
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("ИдФайл", ИдентификаторФайла);
	ЗаписьXML.ЗаписатьАтрибут("ВерсПрог", "Альфа-Авто КОРП " + Метаданные.Версия);
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "5.02");
	
	// Данные о документе уведомлении
	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписьXML.ЗаписатьАтрибут("КНД", "1169008");
	ЗаписьXML.ЗаписатьАтрибут("НомУвед", УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ));
	ЗаписьXML.ЗаписатьАтрибут("ДатаУвед", Формат(ШапкаДокумента.Дата, "ДФ=dd.MM.yyyy"));
	ЗаписьXML.ЗаписатьАтрибут("НомКорр", "0");
	
	// Данные об организации
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвНП");
	
	Если ЭтоИП Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведИП");
		ЗаписьXML.ЗаписатьАтрибут("ИННФЛ", СокрЛП(ИНН));
		ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
		ЗаписьXML.ЗаписатьАтрибут("Фамилия", Фамилия);
		ЗаписьXML.ЗаписатьАтрибут("Имя", Имя);
		Если НЕ ПустаяСтрока(Отчество) Тогда
			ЗаписьXML.ЗаписатьАтрибут("Отчество", Отчество);
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведЮЛ");
		НаименованиеОрганизации =
			УправлениеКонтактнойИнформациейАльфаАвто.НормализованнаяСтрокаXML(
				СокрЛП(ШапкаДокумента.ОрганизацияНаименованиеПолное));
		ЗаписьXML.ЗаписатьАтрибут("НаимОрг", НаименованиеОрганизации);
		ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ", СокрЛП(ИНН));
		КППОрганизации = СокрЛП(КПП);
		Если НЕ ПустаяСтрока(КППОрганизации) Тогда
			ЗаписьXML.ЗаписатьАтрибут("КПП", КППОрганизации);
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Подписант данных
	ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
	ЗаписьXML.ЗаписатьАтрибут("ПрПодп", "1");
	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
	ФИОРуководителя = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеРуководителя.РуководительПредставление);
	ЗаписьXML.ЗаписатьАтрибут("Фамилия", ?(ФИОРуководителя.Фамилия = Неопределено, "", ФИОРуководителя.Фамилия));
	ЗаписьXML.ЗаписатьАтрибут("Имя", ?(ФИОРуководителя.Имя = Неопределено, "", ФИОРуководителя.Имя));
	Если ФИОРуководителя.Отчество <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("Отчество", ФИОРуководителя.Отчество);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Товары
	НаименованиеТоваров = "";
	Если Товары.Количество() = 1 Тогда
		НаименованиеТоваров = СокрЛП(Товары[0].Номенклатура.Наименование);
	Иначе
		НаименованиеТоваров = СокрЛП(ШапкаДокумента.КодТНВЭДНаименование);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("УведПрмщТов");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвЛицПрд");
	ЗаписьXML.ЗаписатьАтрибут("ОКСМ", КодСтраны);
	ЗаписьXML.ЗаписатьАтрибут("ИдКод", НалоговыйНомер);
	ЗаписьXML.ЗаписатьАтрибут("Адрес", СокрЛП(АдресКонтрагента));
	Если ШапкаДокумента.КонтрагентФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
		ЗаписьXML.ЗаписатьАтрибут("Фамилия", ШапкаДокумента.КонтрагентФамилия);
		ЗаписьXML.ЗаписатьАтрибут("Имя", ШапкаДокумента.КонтрагентИмя);
		ЗаписьXML.ЗаписатьАтрибут("Отчество", ШапкаДокумента.КонтрагентОтчество);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("НаимОрг");
		ЗаписьXML.ЗаписатьТекст(СокрЛП(НаименованиеКонтрагента));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвСопрДок");
	ЗаписьXML.ЗаписатьАтрибут("ВидСопрДок", "2");
	ЗаписьXML.ЗаписатьАтрибут("ДатаСопрДок", Формат(ВходящиеДанныеДокумента.ВхДокДата, "ДФ=dd.MM.yyyy"));
	ЗаписьXML.ЗаписатьАтрибут("НомСопрДок", СокрЛП(ВходящиеДанныеДокумента.ВхДокНомер));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("СведТовар");
	ЗаписьXML.ЗаписатьАтрибут("КодТовТНВЭД", СокрЛП(ШапкаДокумента.КодТНВЭДКод));
	ЗаписьXML.ЗаписатьАтрибут("КолТовСопрДок", Формат(Товары.Итог("Количество"), "ЧЦ=18; ЧДЦ=6; ЧРД=.; ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("ЕдинИзмСопрДок", СокрЛП(ШапкаДокумента.КодЕдиницыИзмерения));
	ЗаписьXML.ЗаписатьАтрибут("ЕдинИзмерКол", СокрЛП(ШапкаДокумента.КодЕдиницыИзмеренияПрослеж));
	ЗаписьXML.ЗаписатьАтрибут("КоличТоварКол", Формат(Товары.Итог("КоличествоПрослеживаемости"), "ЧЦ=18; ЧДЦ=6; ЧРД=.; ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("СтоимБезНДС", Формат(Товары.Итог("Сумма"), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресФайла", АдресФайла);
	Результат.Вставить("ИмяФайла", ИдентификаторФайла);
	
	Возврат Результат;
	
КонецФункции


// Функция - Сформировать уведомление о перемещении прослеживаемого товара
//
// Параметры:
//  Документ - ДанныеФормыСтруктура - объект, для которого формируем уведомление
// 
// Возвращаемое значение:
//  Структура - адрес и имя файла
//
Функция СформироватьУведомлениеОПеремещенииПрослеживаемогоТовара(ЗНАЧ Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Отказ = Ложь;
	
	Если НЕ Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель
		И НЕ Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для данного вида организации нет возможности сделать выгрузку уведомления, т.к. не является юридическим лицом или индивидуальным предпринимателем.'")
		);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРуководителя = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(
		Документ.Ссылка,
		"Руководитель",
		"Руководитель",
		,
		Истина
	);
	Руководитель = ДанныеРуководителя.Руководитель;
	Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'У организации не указан руководитель для подписания. Выгрузка прервана.'")
		);
		Возврат Неопределено;
	КонецЕсли;
	
	ИНН = СокрЛП(Документ.Организация.ИНН);
	
	// Проверим наличие ФИО
	ЭтоИП = Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
	
	// Проверим наличие ФИО
	Фамилия = "";
	Имя = "";
	Отчество = "";
	Если ЭтоИП Тогда
		ФИООрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Организация, "Фамилия,Имя,Отчество");
		Фамилия = СокрЛП(ФИООрганизации.Фамилия);
		Имя = СокрЛП(ФИООрганизации.Имя);
		Отчество = СокрЛП(ФИООрганизации.Отчество);
		Если ПустаяСтрока(Фамилия) ИЛИ ПустаяСтрока(Имя) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не указана фамилия или имя физического лица организации. Выгрузка прервана.'")
			);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ИНН) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации не заполнен ИНН.'"));
		Отказ = Истина;
	ИначеЕсли СтрДлина(ИНН) <> 10 И НЕ ЭтоИП Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации ИНН не состоит из 10 цифр.'"));
		Отказ = Истина;
	ИначеЕсли СтрДлина(ИНН) <> 12 И ЭтоИП Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации ИНН не состоит из 12 цифр.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЭтоИП Тогда
		КПП = СокрЛП(Документ.Организация.КПП);
		Если ПустаяСтрока(КПП) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации не заполнен КПП.'"));
			Отказ = Истина;
		ИначеЕсли СтрДлина(КПП) <> 9 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации КПП не состоит из девяти цифр.'"));
			Отказ = Истина;
		КонецЕсли;
	Иначе
		КПП = "";
	КонецЕсли;
	
	ИННКПП = ИНН + КПП;
	КодНалоговогоОргана = СокрЛП(Документ.Организация.КодИМНС);
	
	Если ПустаяСтрока(КодНалоговогоОргана) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации не заполнен код налогового органа.'"));
		Отказ = Истина;
	ИначеЕсли СтрДлина(КодНалоговогоОргана) <> 4 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'У организации код налогового органа не состоит из четырех цифр.'")
		);
		Отказ = Истина;
	КонецЕсли;
	
	ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация);
	
	Если ПустаяСтрока(ПредставлениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для организации не сформировано наименование.'"));
		Отказ = Истина;
	КонецЕсли;
	
	// Получим данные контрагента (покупателя)
	Если Документ.Контрагенты.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указаны покупатели прослеживаемых товаров.'"));
		Отказ = Истина;
	КонецЕсли;
	
	ДанныеКонтрагента = Новый Соответствие;
	
	Для Каждого ТекущийКонтрагент Из Документ.Контрагенты Цикл
		
		РеквизитыКонтрагента = Новый Структура(
			"Контрагент,НаименованиеКонтрагента,КодСтраны,НалоговыйНомер,АдресКонтрагента"
		);
		РеквизитыКонтрагента.Контрагент = ТекущийКонтрагент.Контрагент;
		КодСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийКонтрагент.Контрагент, "СтранаРегистрации.Код");
		РеквизитыКонтрагента.КодСтраны = СокрЛП(КодСтраны);
		РеквизитыКонтрагента.НаименованиеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			ТекущийКонтрагент.Контрагент
		);
		
		Если ПустаяСтрока(РеквизитыКонтрагента.КодСтраны) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не задан код государства - члена ЕАЭС (ОКСМ) контрагента %1.'"),
					РеквизитыКонтрагента.НаименованиеКонтрагента
				)
			);
			Отказ = Истина;
		КонецЕсли;
		
		РеквизитыКонтрагента.НалоговыйНомер = СокрЛП(ТекущийКонтрагент.Контрагент.НалоговыйНомер);
		
		Если ПустаяСтрока(РеквизитыКонтрагента.НалоговыйНомер) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСТр("ru = 'Не задан налоговый номер контрагента %1'"),
					РеквизитыКонтрагента.НаименованиеКонтрагента
				)
			);
			Отказ = Истина;
		ИначеЕсли СтрДлина(РеквизитыКонтрагента.НалоговыйНомер) > 14
			ИЛИ СтрДлина(РеквизитыКонтрагента.НалоговыйНомер) < 8 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Налоговый номер контрагента %1 должен быть указан из 8-14 цифр.'"),
					РеквизитыКонтрагента.НаименованиеКонтрагента
				)
			);
			Отказ = Истина;
		КонецЕсли;
		
		РеквизитыКонтрагента.АдресКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ТекущийКонтрагент.Контрагент,
			Новый Структура("АдресЮридический", "")
		);
		
		Если ПустаяСтрока(РеквизитыКонтрагента.АдресКонтрагента) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не заполнен юридический адрес контрагента %1'"),
					РеквизитыКонтрагента.НаименованиеКонтрагента
				)
			);
			Отказ = Истина;
		КонецЕсли;
		
		ДанныеКонтрагента.Вставить(ТекущийКонтрагент.ИдентификаторСтроки, РеквизитыКонтрагента);
		
	КонецЦикла;
	
	// Проверим ТЧ Товары
	Если Документ.Товары.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В документе не указаны товары.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторФайла = СтрШаблон("ON_UVVIOZTOV_%1_%1_%2_%3_%4",
		КодНалоговогоОргана,
		ИННКПП,
		Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"),
		Документ.Ссылка.УникальныйИдентификатор()
	);
	
	ИмяФайла = СтрШаблон("%1/%2", КаталогВременныхФайлов(), ИдентификаторФайла);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Данные о файле
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("ИдФайл", ИдентификаторФайла);
	ЗаписьXML.ЗаписатьАтрибут("ВерсПрог", "Альфа-Авто КОРП " + Метаданные.Версия);
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "5.02");
	
	// Данные о документе уведомлении
	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписьXML.ЗаписатьАтрибут("КНД", "1169009");
	ЗаписьXML.ЗаписатьАтрибут("НомУвед", УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ));
	ЗаписьXML.ЗаписатьАтрибут("ДатаУвед", Формат(Документ.Дата, "ДФ=dd.MM.yyyy"));
	ЗаписьXML.ЗаписатьАтрибут("НомКорр", "0");
	
	// Данные об организации
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвНП");
	
	Если ЭтоИП Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведИП");
		ЗаписьXML.ЗаписатьАтрибут("ИННФЛ", СокрЛП(Документ.Организация.ИНН));
		ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
		ЗаписьXML.ЗаписатьАтрибут("Фамилия", Фамилия);
		ЗаписьXML.ЗаписатьАтрибут("Имя", Имя);
		Если НЕ ПустаяСтрока(Отчество) Тогда
			ЗаписьXML.ЗаписатьАтрибут("Отчество", Отчество);
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведЮЛ");
		НаименованиеОрганизации = УправлениеКонтактнойИнформациейАльфаАвто.НормализованнаяСтрокаXML(СокрЛП(ПредставлениеОрганизации));
		ЗаписьXML.ЗаписатьАтрибут("НаимОрг", НаименованиеОрганизации);
		ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ", СокрЛП(Документ.Организация.ИНН));
		КППОрганизации = СокрЛП(Документ.Организация.КПП);
		Если НЕ ПустаяСтрока(КППОрганизации) Тогда
			ЗаписьXML.ЗаписатьАтрибут("КПП", КППОрганизации);
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Подписант данных
	ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
	ЗаписьXML.ЗаписатьАтрибут("ПрПодп", "1");
	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
	МассивФИО = СтрРазделить(СокрЛП(Руководитель.Наименование), " ", Ложь);
	ЗаписьXML.ЗаписатьАтрибут("Фамилия", МассивФИО[0]);
	ЗаписьXML.ЗаписатьАтрибут("Имя", ?(МассивФИО.Количество() > 1, МассивФИО[1], ""));
	ЗаписьXML.ЗаписатьАтрибут("Отчество", ?(МассивФИО.Количество() > 2, МассивФИО[2], ""));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Для Каждого ТекущийКонтрагент Из ДанныеКонтрагента Цикл
		// Добавляем данные о контрагенте
		ЗаписьXML.ЗаписатьНачалоЭлемента("УведВывозТов");
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвЛицПрд");
		РеквизитыКонтрагента = ТекущийКонтрагент.Значение;
		ЗаписьXML.ЗаписатьАтрибут("ОКСМ", РеквизитыКонтрагента.КодСтраны);
		ЗаписьXML.ЗаписатьАтрибут("ИдКод", РеквизитыКонтрагента.НалоговыйНомер);
		ЗаписьXML.ЗаписатьАтрибут("Адрес", СокрЛП(РеквизитыКонтрагента.АдресКонтрагента));
		Если РеквизитыКонтрагента.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
			МассивФИО = СтрРазделить(СокрЛП(РеквизитыКонтрагента.НаименованиеКонтрагента), " ", Ложь);
			ЗаписьXML.ЗаписатьАтрибут("Фамилия", МассивФИО[0]);
			ЗаписьXML.ЗаписатьАтрибут("Имя", ?(МассивФИО.Количество() > 1, МассивФИО[1], ""));
			ЗаписьXML.ЗаписатьАтрибут("Отчество", ?(МассивФИО.Количество() > 2, МассивФИО[2], ""));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("НаимОрг");
			ЗаписьXML.ЗаписатьТекст(СокрЛП(РеквизитыКонтрагента.НаименованиеКонтрагента));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Инициализируем данные по документам и товарам
		СписокДокументов = Новый Массив;
		СписокТоваров = Новый Массив;
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущийКонтрагент.Ключ));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			Если СписокДокументов.Найти(ТекущаяСтрока.СопроводительныйДокумент) = Неопределено Тогда
				СписокДокументов.Добавить(ТекущаяСтрока.СопроводительныйДокумент);
			КонецЕсли;
			СтрокаТоваров = Новый Структура();
			СтрокаТоваров.Вставить("НомТовДок", ТекущаяСтрока.ПорядковыйНомер);
			НаименованиеТовара = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекущаяСтрока.Номенклатура);
			СтрокаТоваров.Вставить("НаимТовДок", НаименованиеТовара);
			СтрокаТоваров.Вставить("КоличТоварДок", Формат(ТекущаяСтрока.Количество, "ЧЦ=18; ЧДЦ=6; ЧРД=.; ЧГ=0"));
			КодЕдиницыИзмерения = "";
			Если ТипЗнч(ТекущаяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				КодЕдиницыИзмерения = ТекущаяСтрока.ЕдиницаИзмерения.Код;
			ИначеЕсли ТипЗнч(ТекущаяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				КодЕдиницыИзмерения = ТекущаяСтрока.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
			Иначе
				КодЕдиницыИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт.Код;
			КонецЕсли;
			СтрокаТоваров.Вставить("ЕдинИзмерДок", СокрЛП(КодЕдиницыИзмерения));
			СтрокаТоваров.Вставить("РегНомерТов", СокрЛП(ТекущаяСтрока.РНПТ.Наименование));
			СтрокаТоваров.Вставить("ЕдинИзмерПер", СокрЛП(ТекущаяСтрока.ЕдиницаИзмеренияПрослеживаемости.Код));
			СтрокаТоваров.Вставить("КоличТоварПер", Формат(ТекущаяСтрока.КоличествоПрослеживаемости,  "ЧЦ=18; ЧДЦ=6; ЧРД=.; ЧГ=0"));
			СтрокаТоваров.Вставить("СтТоварБезНДС", Формат(ТекущаяСтрока.Сумма,  "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			СписокТоваров.Добавить(СтрокаТоваров);
		КонецЦикла;
		
		// Запись в файл документы
		Для Каждого ТекущийДокумент Из СписокДокументов Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвСопрДок");
			ЗаписьXML.ЗаписатьАтрибут("ВидСопрДок", "2");
			ЗаписьXML.ЗаписатьАтрибут("ДатаСопрДок", Формат(ТекущийДокумент.Дата, "ДФ=dd.MM.yyyy"));
			ЗаписьXML.ЗаписатьАтрибут("НомСопрДок", УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ТекущийДокумент));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		// Запись в файл товаров
		Для Каждого СтрокаТоваров Из СписокТоваров Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("УведВывозТовСтр");
			ЗаписьXML.ЗаписатьАтрибут("НомТовДок", Строка(СтрокаТоваров.НомТовДок));
			ЗаписьXML.ЗаписатьАтрибут("НаимТовДок", СтрокаТоваров.НаимТовДок);
			ЗаписьXML.ЗаписатьАтрибут("КоличТоварДок", СтрокаТоваров.КоличТоварДок);
			ЗаписьXML.ЗаписатьАтрибут("ЕдинИзмерДок", СтрокаТоваров.ЕдинИзмерДок);
			ЗаписьXML.ЗаписатьАтрибут("РегНомерТов", СтрокаТоваров.РегНомерТов);
			ЗаписьXML.ЗаписатьАтрибут("ЕдинИзмерПер", СтрокаТоваров.ЕдинИзмерПер);
			ЗаписьXML.ЗаписатьАтрибут("КоличТоварПер", СтрокаТоваров.КоличТоварПер);
			ЗаписьXML.ЗаписатьАтрибут("СтТоварБезНДС", СтрокаТоваров.СтТоварБезНДС);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресФайла", АдресФайла);
	Результат.Вставить("ИмяФайла", ИдентификаторФайла);
	
	Возврат Результат;
	
КонецФункции

// Функция - Сформировать отчет об операциях
//
// Параметры:
//  Документ - ДанныеФормыСтруктура -  документ, для которого формируем отчет об операциях.
// 
// Возвращаемое значение:
//  Структура - адрес и имя файла
//
Функция СформироватьОтчетОбОперациях(Знач Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Отказ = Ложь;
	
	ДанныеРуководителя = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(
		Документ.Ссылка,
		"Руководитель",
		"Руководитель",
		,
		Истина
	);
	Руководитель = ДанныеРуководителя.Руководитель;
	Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'У организации не указан руководитель для подписания. Выгрузка прервана.'")
		);
		Отказ = Ложь;
	КонецЕсли;
	
	ИНН = СокрЛП(Документ.Организация.ИНН);
	
	// Проверим наличие ФИО
	ЭтоИП = Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
	
	// Проверим наличие ФИО
	Фамилия = "";
	Имя = "";
	Отчество = "";
	Если ЭтоИП Тогда
		ФИООрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Организация, "Фамилия,Имя,Отчество");
		Фамилия = СокрЛП(ФИООрганизации.Фамилия);
		Имя = СокрЛП(ФИООрганизации.Имя);
		Отчество = СокрЛП(ФИООрганизации.Отчество);
		Если ПустаяСтрока(Фамилия) ИЛИ ПустаяСтрока(Имя) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не указана фамилия или имя физического лица организации. Выгрузка прервана.'")
			);
			Отказ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ИНН) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации не заполнен ИНН.'"));
		Отказ = Истина;
	ИначеЕсли СтрДлина(ИНН) <> 10 И НЕ ЭтоИП Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации ИНН не состоит из 10 цифр.'"));
		Отказ = Истина;
	ИначеЕсли СтрДлина(ИНН) <> 12 И ЭтоИП Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации ИНН не состоит из 12 цифр.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЭтоИП Тогда
		КПП = СокрЛП(Документ.Организация.КПП);
		Если ПустаяСтрока(КПП) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации не заполнен КПП.'"));
			Отказ = Истина;
		ИначеЕсли СтрДлина(КПП) <> 9 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации КПП не состоит из девяти цифр.'"));
			Отказ = Истина;
		КонецЕсли;
	Иначе
		КПП = "";
	КонецЕсли;
	
	ИННКПП = ИНН + КПП;
	КодНалоговогоОргана = СокрЛП(Документ.Организация.КодИМНС);
	
	Если ПустаяСтрока(КодНалоговогоОргана) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У организации не заполнен код налогового органа.'"));
		Отказ = Истина;
	ИначеЕсли СтрДлина(КодНалоговогоОргана) <> 4 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'У организации код налогового органа не состоит из четырех цифр.'")
		);
		Отказ = Истина;
	КонецЕсли;
	
	ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация);
	
	Если ПустаяСтрока(ПредставлениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для организации не сформировано наименование.'"));
		Отказ = Истина;
	КонецЕсли;
	
	// Проверим ТЧ Операции
	Если Документ.Операции.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В документе нет операций о прослеживаемости товаров.'"));
		Отказ = Истина;
	КонецЕсли;
	
	// Проверим данные контрагентов
	Для Каждого ТекущаяОперация Из Документ.Операции Цикл
		Если НЕ ЗначениеЗаполнено(ТекущаяОперация.ДатаОперации) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'В строке операции №%1 не заполнена дата операции.'"),
					ТекущаяОперация.НомерСтроки
				)
			);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущаяОперация.КодОперации) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'В строке операции №%1 не заполнен код вида операции.'"),
					ТекущаяОперация.НомерСтроки
				)
			);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущаяОперация.ВидДокумента) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'В строке операции №%1 не заполнен вид документа.'"),
					ТекущаяОперация.НомерСтроки
				)
			);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущаяОперация.НомерДокумента) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'В строке операции №%1 не заполнен номер документа.'"),
					ТекущаяОперация.НомерСтроки
				)
			);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущаяОперация.ДатаДокумента) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'В строке операции №%1 не заполнен дата документа.'"),
					ТекущаяОперация.НомерСтроки
				)
			);
			Отказ = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяОперация.НаименованиеКонтрагента) Тогда
			Если СтрДлина(ТекущаяОперация.ИННКонтрагента) <> 10
				И СтрДлина(ТекущаяОперация.ИННКонтрагента) <> 12 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'В строке операции №%1 ИНН контрагента должен состоять из 10 или 12 символов.'"),
						ТекущаяОперация.НомерСтроки
					)
				);
				Отказ = Истина;
			КонецЕсли;
			Если СтрДлина(ТекущаяОперация.ИННКонтрагента) = 12 Тогда
				ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СокрЛП(ТекущаяОперация.НаименованиеКонтрагента));
				Если НЕ ЗначениеЗаполнено(ФИО.Фамилия) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'В строке операции №%1 в наименовании контрагента отсутствует фамилия.'"),
							ТекущаяОперация.НомерСтроки
						)
					);
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ФИО.Имя) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'В строке операции №%1 в наименовании контрагента отсутствует имя.'"),
							ТекущаяОперация.НомерСтроки
						)
					);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			Если СтрДлина(ТекущаяОперация.ИННКонтрагента) = 10
				И СтрДлина(ТекущаяОперация.КППКонтрагента) <> 9 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'В строке операции №%1 КПП контрагента должен состоять из 9 символов.'"),
						ТекущаяОперация.НомерСтроки
					)
				);
				Отказ = Истина;
			ИначеЕсли СтрДлина(ТекущаяОперация.ИННКонтрагента) = 12
				И НЕ ПустаяСтрока(ТекущаяОперация.КППКонтрагента) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр(
							"ru = 'В строке операции №%1 КПП контрагента не должен быть заполнен для контрагента с ИНН из 12 символов.'"
						),
						ТекущаяОперация.НомерСтроки
					)
				);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		// Проверим РНПТ и коды единиц
		НайденныеСтроки = Документ.СписокРНПТ.НайтиСтроки(
			Новый Структура("ИдентификаторСтроки", ТекущаяОперация.ИдентификаторСтроки));
		Для Каждого ТекущийРНПТ Из НайденныеСтроки Цикл
			Если НЕ ЗначениеЗаполнено(ТекущийРНПТ.РНПТ) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'В строке операции №%1 не заполнен РНПТ.'"),
						ТекущаяОперация.НомерСтроки
					)
				);
				Отказ = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекущийРНПТ.КодЕдиницыИзмерения) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'В строке операции №%1 не заполнен код единицы измерения прослеживаемости.'"),
						ТекущаяОперация.НомерСтроки
					)
				);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторФайла = СтрШаблон("ON_OTCHOPTOV_%1_%1_%2_%3_%4",
		КодНалоговогоОргана,
		ИННКПП,
		Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"),
		Документ.Ссылка.УникальныйИдентификатор()
	);
	
	ИмяФайла = СтрШаблон("%1/%2", КаталогВременныхФайлов(), ИдентификаторФайла);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Данные о файле
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("ИдФайл", ИдентификаторФайла);
	ЗаписьXML.ЗаписатьАтрибут("ВерсПрог", "Альфа-Авто КОРП " + Метаданные.Версия);
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "5.02");
	
	// Данные о документе уведомлении
	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписьXML.ЗаписатьАтрибут("КНД", "1169010");
	ЗаписьXML.ЗаписатьАтрибут("ОтчетГод", Формат(Документ.ПериодОтчета, "ДФ=гггг"));
	ЗаписьXML.ЗаписатьАтрибут("Период", "2"+Формат(Документ.ПериодОтчета, "ДФ=к"));
	ЗаписьXML.ЗаписатьАтрибут("НомКорр", Строка(Документ.НомерКорректировки));
	ЗаписьXML.ЗаписатьАтрибут("КодНО", СокрЛП(Документ.Организация.КодИМНС));
	
	Если Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
		ПоМесту = "116";
	Иначе
		ПоМесту = "214";
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("ПоМесту", ПоМесту);
	
	// Данные об организации
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвНП");
	
	Если ЭтоИП Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведИП");
		ЗаписьXML.ЗаписатьАтрибут("ИННФЛ", СокрЛП(Документ.Организация.ИНН));
		ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
		ЗаписьXML.ЗаписатьАтрибут("Фамилия", Фамилия);
		ЗаписьXML.ЗаписатьАтрибут("Имя", Имя);
		Если НЕ ПустаяСтрока(Отчество) Тогда
			ЗаписьXML.ЗаписатьАтрибут("Отчество", Отчество);
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведЮЛ");
		НаименованиеОрганизации = УправлениеКонтактнойИнформациейАльфаАвто.НормализованнаяСтрокаXML(СокрЛП(ПредставлениеОрганизации));
		ЗаписьXML.ЗаписатьАтрибут("НаимОрг", НаименованиеОрганизации);
		ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ", СокрЛП(Документ.Организация.ИНН));
		КППОрганизации = СокрЛП(Документ.Организация.КПП);
		Если НЕ ПустаяСтрока(КППОрганизации) Тогда
			ЗаписьXML.ЗаписатьАтрибут("КПП", КППОрганизации);
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Подписант данных
	ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
	ЗаписьXML.ЗаписатьАтрибут("ПрПодп", "1");
	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
	МассивФИО = СтрРазделить(СокрЛП(Руководитель.Наименование), " ", Ложь);
	ЗаписьXML.ЗаписатьАтрибут("Фамилия", МассивФИО[0]);
	ЗаписьXML.ЗаписатьАтрибут("Имя", ?(МассивФИО.Количество() > 1, МассивФИО[1], ""));
	Если МассивФИО.Количество() > 2 И ЗначениеЗаполнено(МассивФИО[2]) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Отчество", СокрЛП(МассивФИО[2]));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Запишем операции
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОтчетОперПрТов");
	Для Каждого ТекущаяОперация Из Документ.Операции Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ОтчетОперПрТовСтр");
		ЗаписьXML.ЗаписатьАтрибут("НомерПор", Строка(ТекущаяОперация.НомерСтроки));
		ЗаписьXML.ЗаписатьАтрибут("ДатаОпер", Формат(ТекущаяОперация.ДатаОперации, "ДФ=dd.MM.yyyy"));
		ЗаписьXML.ЗаписатьАтрибут("КодВидОпер", ТекущаяОперация.КодОперации.Код);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РеквПервичДок");
		ЗаписьXML.ЗаписатьАтрибут("ВидДок", Строка(ТекущаяОперация.ВидДокумента));
		ЗаписьXML.ЗаписатьАтрибут("НомДок", СокрЛП(ТекущаяОперация.НомерДокумента));
		ЗаписьXML.ЗаписатьАтрибут("ДатаДок", Формат(ТекущаяОперация.ДатаДокумента, "ДФ=dd.MM.yyyy"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Если ЗначениеЗаполнено(ТекущаяОперация.НаименованиеКонтрагента) Тогда
			ЭтоИП = (СтрДлина(ТекущаяОперация.ИННКонтрагента) = 12);
			
			// Данные о контрагенте
			ЗаписьXML.ЗаписатьНачалоЭлемента("Контрагент");
			
			Если ЭтоИП Тогда
				ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СокрЛП(ТекущаяОперация.НаименованиеКонтрагента));
				ЗаписьXML.ЗаписатьНачалоЭлемента("СведИП");
				ЗаписьXML.ЗаписатьАтрибут("ИННФЛ", СокрЛП(ТекущаяОперация.ИННКонтрагента));
				ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
				ЗаписьXML.ЗаписатьАтрибут("Фамилия", ФИО.Фамилия);
				ЗаписьXML.ЗаписатьАтрибут("Имя", ФИО.Имя);
				Если НЕ ПустаяСтрока(ФИО.Отчество) Тогда
					ЗаписьXML.ЗаписатьАтрибут("Отчество", ФИО.Отчество);
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("СведЮЛ");
				НаименованиеКонтрагента = УправлениеКонтактнойИнформациейАльфаАвто.НормализованнаяСтрокаXML(
					СокрЛП(ТекущаяОперация.НаименованиеКонтрагента));
				ЗаписьXML.ЗаписатьАтрибут("НаимОрг", НаименованиеКонтрагента);
				ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ", СокрЛП(ТекущаяОперация.ИННКонтрагента));
				КППКонтрагента = СокрЛП(ТекущаяОперация.КППКонтрагента);
				Если НЕ ПустаяСтрока(КППКонтрагента) Тогда
					ЗаписьXML.ЗаписатьАтрибут("КПП", КППКонтрагента);
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
		// Проверим РНПТ и коды единиц
		НайденныеСтроки = Документ.СписокРНПТ.НайтиСтроки(
			Новый Структура("ИдентификаторСтроки", ТекущаяОперация.ИдентификаторСтроки));
		Для Каждого ТекущийРНПТ Из НайденныеСтроки Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ТоварПросл");
			ЗаписьXML.ЗаписатьАтрибут("РегНомерТов", СокрЛП(ТекущийРНПТ.РНПТ));
			ЗаписьXML.ЗаписатьАтрибут("ЕдинИзмерПер", СокрЛП(ТекущийРНПТ.КодЕдиницыИзмерения));
			ЗаписьXML.ЗаписатьАтрибут("КоличТоварПер", Формат(ТекущийРНПТ.Количество, "ЧЦ=23; ЧДЦ=11; ЧРД=.; ЧН=0; ЧГ=0"));
			ЗаписьXML.ЗаписатьАтрибут("СтТоварБезНДС", Формат(ТекущийРНПТ.Сумма,  "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0"));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресФайла", АдресФайла);
	Результат.Вставить("ИмяФайла", ИдентификаторФайла);
	
	Возврат Результат;	
КонецФункции

#КонецОбласти