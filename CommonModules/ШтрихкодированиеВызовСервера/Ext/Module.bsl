
#Область ПрограммныйИнтерфейс

// Формирует штрихкод произвольной длины для произвольного объекта 
//
// Параметры:
//  ДлинаКода - Число - Количество символов в формируемом штрихкоде (необязательное).
//
// Возвращаемое значение:
//  Строка - Штрихкод
//
Функция СформироватьШтрихкодПроизвольногоОбъекта(ДлинаКода = 22) Экспорт 
	
	НовыйКод = СформироватьПроизвольныйКод(ДлинаКода);
	Пока НЕ ПроверкаНовогоШтрихкода(НовыйКод) Цикл
		НовыйКод = СформироватьПроизвольныйКод(ДлинаКода);
	КонецЦикла;
	
	Возврат НовыйКод;
	
КонецФункции // СформироватьШтрихкодПроизвольногоОбъекта()

// Формирует штрихкод объекта
//
// Параметры:
//  Объект		- ДанныеФормаСтруктура	- Объект, для которого выполняется обработка события.
//  ДлинаКода	- Число					- Количество символов в формируемом штрихкоде (необязательное).
//
// Возвращаемое значение:
//  Строка - Штрихкод
//
Функция СформироватьНовыйШтрихкод(Объект, ДлинаКода = 22) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Карточки") Тогда
		
		Возврат СформироватьШтрихкодПроизвольногоОбъекта(ДлинаКода);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Весовой = ?(ЗначениеЗаполнено(Объект.ТипНоменклатуры), Объект.ТипНоменклатуры.Весовой, Ложь);
		Возврат СформироватьШтрихкодEAN13(Объект, Истина, Весовой);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ПрочиеАктивы") Тогда
		
		Возврат СформироватьШтрихкодEAN13(Объект, Ложь); 
		
	ИначеЕсли Метаданные.Документы.Содержит(Объект.Ссылка.Метаданные()) Тогда
		
		Возврат СформироватьШтрихкодEAN13(Объект, Ложь); 
		
	КонецЕсли;	
	
КонецФункции // СформироватьНовыйШтрихкод()

// Функция возвращает штрихкод объекта.
//
// Параметры:
//  Форма	- УправляемаяФорма		- Форма, в которой произошло событие.
//  Объект	- ДанныеФормаСтруктура	- Объект, для которого выполняется обработка события.
//
Процедура ПрочитатьШтрихкодДокумента(Форма, Объект) Экспорт
	
	ИспользованиеШтрихкодирования = ИспользоватьШтрихкодирование(Объект);
	Если ИспользованиеШтрихкодирования Тогда
		Штрихкод = ПолучитьШтрихКодОбъекта(Объект, , , Ложь);
		Если ЕстьРеквизит(Форма, "Штрихкод") Тогда
			Форма.Штрихкод = Штрихкод;
		Иначе
			СлужебныеРеквизиты = Новый Структура();
			СлужебныеРеквизиты.Вставить("Штрихкод", Штрихкод);
			УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(Форма, СлужебныеРеквизиты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьШтрихкодДокумента()

// Выполняет штрихкодирование документов.
//
// Параметры:
//  Форма	- УправляемаяФорма		- Форма, в которой произошло событие.
//  Объект	- ДанныеФормаСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - Истина - если штрихкодирование выполнено или штрихкодирование не используется для объекта
//  		 Ложь   - если не удалось записать штрихкод.
//
Функция ЗаписатьШтрихкодДокумента(Форма, Объект) Экспорт
		
	Если НЕ ИспользоватьШтрихкодирование(Объект) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ШтрихКод = "";
	
	// Выполним запись штрихкода
	Если ЕстьРеквизит(Форма, "Штрихкод") Тогда
		Если ЗначениеЗаполнено(Форма.Штрихкод) Тогда
			Штрихкод = Форма.Штрихкод;
			СтруктураШтрихкод = Новый Структура("Штрихкод,Запрет", ШтрихКод, Ложь);
			
			ШтрихкодЗаписан = Ложь;
			Если ЕстьРеквизит(Объект, "Ссылка") Тогда
				ШтрихкодЗаписан = ЗаписатьШтрихкоды(Объект.Ссылка, СтруктураШтрихкод);
			КонецЕсли;
			
			Если НЕ ШтрихкодЗаписан Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка записи штрихкода документа.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				ВызватьИсключение ТекстОшибки;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Иначе
			// А был ли штрихкод. если да - то его надо удалить.
			Штрихкод = ПолучитьШтрихКодОбъекта(Объект);
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				СтруктураШтрихкод = Новый Структура("Штрихкод,Запрет", ШтрихКод, Ложь);
				ШтрихкодУдален = Ложь;
				Если ЕстьРеквизит(Объект, "Ссылка") Тогда
					ШтрихкодУдален = УдалитьШтрихКоды(Объект.Ссылка, СтруктураШтрихкод);
				КонецЕсли;
			
				Если НЕ ШтрихкодУдален Тогда
					ТекстОшибки = НСтр("ru = 'Ошибка записи штрихкода документа.'");
					ВывестиСообщение(ТекстОшибки);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Возможно необходимо присвоить штрихкод автоматически
	Если НЕ ИспользоватьАвтоШтрихкодированиеДокументов(Объект) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Документ может быть штрихкодирован
	Если ПустаяСтрока(ШтрихКод) Тогда
		
		// Создадим новый штрихкод
		ШтрихКод = СформироватьНовыйШтрихкод(Объект);
		
		// Запишем автоматически сформированный штрихкод
		СтруктураШтрихкод = Новый Структура("Штрихкод,Запрет", ШтрихКод, Ложь);
		ШтрихкодЗаписан = ЗаписатьШтрихкоды(Объект.Ссылка, СтруктураШтрихкод);
		Если НЕ ШтрихкодЗаписан Тогда
			
			ТекстОшибки = НСтр("ru = 'Ошибка записи штрихкода документа.'") ;
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
			
		Иначе
			
			Если ЕстьРеквизит(Форма, "ШтрихКод") Тогда
				
				Форма.Штрихкод = Штрихкод;
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Документу <'") + Объект.Ссылка + НСтр("ru = '> присвоен штрихкод ""'") + ШтрихКод + НСтр("ru = '""'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает штрихкод объекта.
//
// Параметры:
//  Объект						- ДанныеФормаСтруктура							- Объект, для которого выполняется обработка события.
//  ХарактеристикаНоменклатуры	- СправочникСсылка.ХарактеристикиНоменклатуры	- Характеристика номенклатуры 
//																					(необязательное).
//  ЕдиницаИзмерения			- СправочникСсылка.ЕдиницыИзмерения				- Единица измерения номенклатуры (необязательное).
//  ВсеШтрихкоды				- Булево										- Признак выгрузки всех штрихкодов объекта (необязательное).
//
// Возвращаемое значение:
//  Строка, ТаблицаЗначений - Штрихкод, либо таблица, содержащая все штрихкоды объекта.
//
Функция ПолучитьШтрихКодОбъекта(Объект,
		ХарактеристикаНоменклатуры = Неопределено,
		ЕдиницаИзмерения = Неопределено,
		ВсеШтрихкоды = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	             |	ШтрихКоды.Объект КАК Объект,
	             |	ШтрихКоды.Штрихкод,
	             |	ШтрихКоды.Запрет,
	             |	ШтрихКоды.ЕдиницаИзмерения,
	             |	ШтрихКоды.ХарактеристикаНоменклатуры
	             |ИЗ
	             |	РегистрСведений.Штрихкоды КАК ШтрихКоды
	             |ГДЕ
	             |	ШтрихКоды.Объект = &Ссылка";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") Тогда 
		Если Объект.ТипНоменклатуры.ИспользованиеШтрихКодов = 2 И ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЗаменяемыйТекст = "ШтрихКоды.Объект = &Ссылка";
			ТекстЗамены = "ШтрихКоды.Объект = &Ссылка
			|		  И ВЫБОР
			|			КОГДА ШтрихКоды.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
			|				ТОГДА ШтрихКоды.Объект.ОсновнаяЕдиницаИзмерения
			|			ИНАЧЕ ШтрихКоды.ЕдиницаИзмерения
			|			КОНЕЦ = &ЕдиницаИзмерения";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
		КонецЕсли;
		Если Объект.ТипНоменклатуры.ИспользованиеШтрихКодов = 3 И ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
			ЗаменяемыйТекст = "ШтрихКоды.Объект = &Ссылка";
			ТекстЗамены = "ШтрихКоды.Объект = &Ссылка
			|         И ШтрихКоды.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
			Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ВсеШтрихкоды Тогда
		Возврат РезультатЗапроса.Выгрузить();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Штрихкод;
		Иначе
			Возврат "";
		КонецЕсли
	КонецЕсли;
	
КонецФункции // ПолучитьШтрихКодОбъекта()

// Возвращает штрихкод объекта.
//
// Параметры:
//  Товары - ТабличнаяЧасть - таблица товаров.
//
Процедура ЗаполнитьШтрихКодыТоваров(Товары) Экспорт
	
	Номенклатура   = Новый Массив();
	Характеристики = Новый Массив();
	ЕдиницыИзмерения = Новый Массив();
	
	Характеристики  .Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ЕдиницыИзмерения.Добавить(Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	
	Для Каждого СтрокаТаблицыТоваров Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.Номенклатура)
			И ТипЗнч(СтрокаТаблицыТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Номенклатура.Добавить(СтрокаТаблицыТоваров.Номенклатура);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.ЕдиницаИзмерения) Тогда
			ЕдиницыИзмерения.Добавить(СтрокаТаблицыТоваров.ЕдиницаИзмерения);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры) Тогда
			Характеристики.Добавить(СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихКоды.Штрихкод,
	|	ШтрихКоды.Объект.ТипНоменклатуры.ИспользованиеШтрихКодов КАК ИспользованиеШтрихКодов,
	|	ШтрихКоды.Объект КАК Номенклатура,
	|	ШтрихКоды.Запрет,
	|	ШтрихКоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ШтрихКоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК ШтрихКоды
	|ГДЕ
	|	ШтрихКоды.Объект В(&Номенклатура)
	|	И ШтрихКоды.ЕдиницаИзмерения В(&ЕдиницыИзмерения)
	|	И ШтрихКоды.ХарактеристикаНоменклатуры В(&Характеристики)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕдиницаИзмерения УБЫВ,
	|	ХарактеристикаНоменклатуры УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура",     Номенклатура);
	Запрос.УстановитьПараметр("Характеристики",   Характеристики);
	Запрос.УстановитьПараметр("ЕдиницыИзмерения", ЕдиницыИзмерения);
	
	Штрихкоды = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыТоваров Из Товары Цикл
		
		ПараметрыНоменклатуры = Штрихкоды.Найти(СтрокаТаблицыТоваров.Номенклатура, "Номенклатура");
		
		Если ПараметрыНоменклатуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаТаблицыТоваров.Номенклатура);
		
		ШтрихКодДляЕдиницИзмерения = 2;
		ШтрихКодДляХарактеристик   = 3;
		
		Если ПараметрыНоменклатуры.ИспользованиеШтрихКодов = ШтрихКодДляЕдиницИзмерения
			И ЗначениеЗаполнено(СтрокаТаблицыТоваров.ЕдиницаИзмерения) Тогда
			
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", СтрокаТаблицыТоваров.ЕдиницаИзмерения);
			
		КонецЕсли;
		
		Если ПараметрыНоменклатуры.ИспользованиеШтрихКодов = ШтрихКодДляХарактеристик
			И ЗначениеЗаполнено(СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры) Тогда
			
			ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры);
			
		КонецЕсли;
		
		НайденныеСтроки = Штрихкоды.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТаблицыТоваров.Штрихкод = НайденныеСтроки[0].Штрихкод;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьШтрихКодыТоваров()

// Функция записывает штрихкод (массив штрихкодов) в информационную базу.
//
// Параметры:
//  Ссылка				- Произвольный							- Ссылка на объект, для которого записываются штрихкоды.
//  МассивШтрихкоды		- Структура, Массив из Структура		- Массив штрихкодов.
//
// Возвращаемое значение:
//  Булево	- Истина - если штрихкоды были записаны или их не требуется записывать
//				Ложь - если штрихкоды не удалось записать.
//
Функция ЗаписатьШтрихКоды(Ссылка, МассивШтрихкоды) Экспорт

	Если НЕ ИспользоватьШтрихкодирование(Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		РежимШтрихкодированияНоменклатуры = РежимШтрихкодированияНоменклатуры(Ссылка);
	КонецЕсли;
	
	Если ТипЗнч(МассивШтрихкоды) <> Тип("Массив")
		И ТипЗнч(МассивШтрихкоды) = Тип("Структура") Тогда
		СтруктураШтрихкод = МассивШтрихкоды;
		МассивШтрихкоды = Новый Массив;
		МассивШтрихкоды.Добавить(СтруктураШтрихкод);
	КонецЕсли;
	
	НаборЗаписейШтрихКоды = РегистрыСведений.ШтрихКоды.СоздатьНаборЗаписей();
	НаборЗаписейШтрихКоды.Отбор.Объект.Установить(Ссылка);
	
	Для Каждого СтруктураШтрихКод Из МассивШтрихкоды Цикл
	
		Если НЕ ЗначениеЗаполнено(СтруктураШтрихКод.Штрихкод) Тогда 
			Продолжить; 
		КонецЕсли;
		
		Запись = НаборЗаписейШтрихКоды.Добавить();
		Запись.Объект = Ссылка;
		Запись.ШтрихКод = СтруктураШтрихКод.ШтрихКод;
		Запись.Запрет = СтруктураШтрихКод.Запрет;
		
		Если РежимШтрихкодированияНоменклатуры <> Неопределено Тогда
			Если РежимШтрихкодированияНоменклатуры = 2 Тогда
				Запись.ЕдиницаИзмерения = СтруктураШтрихКод.ЕдиницаИзмерения;
			ИначеЕсли РежимШтрихкодированияНоменклатуры = 3 Тогда
				Запись.ХарактеристикаНоменклатуры = СтруктураШтрихКод.ХарактеристикаНоменклатуры;
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЦикла;
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписейШтрихкоды.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось записать штрихкоды:'") + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
		
КонецФункции // ЗаписатьШтрихКоды()

// Функция удаляет штрихкод (массив штрихкодов) из информационной базы.
//
// Параметры:
//  Ссылка				- Произвольный							- Ссылка на объект, для которого записываются штрихкоды.
//  МассивШтрихкоды		- Структура, Массив из Структура		- Массив штрихкодов.
//
// Возвращаемое значение:
//  Булево	- Истина - если штрихкоды были удалены или их не требуется удалить
//				Ложь - если штрихкоды не удалось удалить.
//
Функция УдалитьШтрихКоды(Ссылка, МассивШтрихкоды) Экспорт

	Если НЕ ИспользоватьШтрихкодирование(Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		РежимШтрихкодированияНоменклатуры = РежимШтрихкодированияНоменклатуры(Ссылка);
	КонецЕсли;
	
	Если ТипЗнч(МассивШтрихкоды) <> Тип("Массив")
		И ТипЗнч(МассивШтрихкоды) = Тип("Структура") Тогда
		СтруктураШтрихкод = МассивШтрихкоды;
		МассивШтрихкоды = Новый Массив;
		МассивШтрихкоды.Добавить(СтруктураШтрихкод);
	КонецЕсли;
	
	Для Каждого СтруктураШтрихКод Из МассивШтрихкоды Цикл
		
		ЗаписьШтрихкода = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
		ЗаписьШтрихкода.Объект = Ссылка;
		ЗаписьШтрихкода.Штрихкод = СтруктураШтрихкод.Штрихкод;
		
		Если РежимШтрихкодированияНоменклатуры <> Неопределено Тогда
			Если РежимШтрихкодированияНоменклатуры = 2 Тогда
				ЗаписьШтрихкода.ЕдиницаИзмерения = СтруктураШтрихКод.ЕдиницаИзмерения;
			ИначеЕсли РежимШтрихкодированияНоменклатуры = 3 Тогда
				ЗаписьШтрихкода.ХарактеристикаНоменклатуры = СтруктураШтрихКод.ХарактеристикаНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписьШтрихкода.Прочитать();
		Если ЗаписьШтрихкода.Выбран() ТОгда
			Попытка
				ЗаписьШтрихкода.Удалить();
			Исключение
				ВывестиСообщение(НСтр("ru = 'Не удалось удалить штрихкоды:'") + Символы.ПС + ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, ведется ли штрихкодирования по данному виду объектов.
//
// Параметры:
//  Объект - ДанныеФормаСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - Истина - штрихкодирование ведется
//  		 Ложь   - штрихкодирование не ведется.
//
Функция ИспользоватьШтрихкодирование(Объект) Экспорт
	
	// Проверка, входит ли тип ссылки в тип данных объекта в регистре сведений.
	Результат = Метаданные.РегистрыСведений.ШтрихКоды.Измерения.Объект.Тип.СодержитТип(ТипЗнч(Объект.Ссылка));
	Если НЕ Результат Тогда
		Возврат Ложь
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит(Объект.Ссылка.Метаданные()) Тогда
		
		// для документов
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура") ИЛИ ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		// для номенклатуры
		ТипНоменклатуры = Объект.ТипНоменклатуры;
		Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
			Если ТипНоменклатуры.ИспользованиеШтрихКодов = 0 Тогда
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе	
		
		// для прочих справочников
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ИспользоватьШтрихкодирование()

// Выполняет поиск объектов по штрихкоду.
//
// Параметры:
//  ШтрихкодПараметр	- Строка	- Штрихкод, по которому ведется поиск
//  ЕстьПрефикс			- Булево	- Признак, что штрихкод содержит префикс
//  ПроверкаЗапрета		- Булево	- Запрещает вывод запрещенных штрихкодов.
//
// Возвращаемое значение:
//  Ссылка - Ссылка на найденный справочник или документ.
//
Функция НайтиОбъектыПоШтрихкоду(ШтрихкодПараметр, ЕстьПрефикс = Истина, ПроверкаЗапрета = Ложь) Экспорт
	
	// формирование массива штрихкодов на основе переданных параметров
	МассивШтрихкоды = Новый Массив;
	Если ТипЗнч(ШтрихкодПараметр) = Тип("Массив") Тогда
		МассивШтрихкоды = ШтрихкодПараметр;
	Иначе
		МассивШтрихкоды.Добавить(ШтрихкодПараметр);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	// поиск объектов по штрихкоду
	Если ЕстьПрефикс Тогда
		
		ПрефиксВесовогоШК = Константы.ПрефиксВесовогоШК.Получить();
		
		ТаблицаШтрихкоды = Новый ТаблицаЗначений;
		ТаблицаШтрихкоды.Колонки.Добавить("Штрихкод",      Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
		ТаблицаШтрихкоды.Колонки.Добавить("Префикс",       Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
		ТаблицаШтрихкоды.Колонки.Добавить("Вес",           Новый ОписаниеТипов("Число"));
		ТаблицаШтрихкоды.Колонки.Добавить("КодМаркировки", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
		
		// для весовых товаров уникальность проверяется по первым 7 символам
		Для Каждого Штрихкод Из МассивШтрихкоды Цикл
			
			НоваяСтрока = ТаблицаШтрихкоды.Добавить();
			
			СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(Штрихкод);
			
			// Считали код маркировки
			Если СтруктураМаркировки.ТипИдентификатораТовара =
				ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
				НоваяСтрока.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(Штрихкод, "");
				МаркировкаТоваровКлиентСервер.ЗаписатьПолныйШтрихкод(СтруктураМаркировки);
				Штрихкод = СтруктураМаркировки.EAN;
			КонецЕсли;
			
			НоваяСтрока.Штрихкод = Штрихкод;
			Если Лев(Штрихкод, 2) = Строка(ПрефиксВесовогоШК) Тогда
				НоваяСтрока.Префикс = Формат(Лев(Штрихкод, 7), "ЧГ=0");
				НоваяСтрока.Вес = ПолучитьВесПоШтрихКоду(Штрихкод);
			Иначе
				НоваяСтрока.Префикс = Штрихкод;
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаШтрихкоды", ТаблицаШтрихкоды);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаШтрихкоды.Штрихкод,
		               |	ТаблицаШтрихкоды.Префикс,
		               |	ТаблицаШтрихкоды.Вес,
		               |	ТаблицаШтрихкоды.КодМаркировки
		               |ПОМЕСТИТЬ ТаблицаШтрихкодыВТ
		               |ИЗ
		               |	&ТаблицаШтрихкоды КАК ТаблицаШтрихкоды
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТаблицаШтрихкодыВТ.Штрихкод КАК Штрихкод,
		               |	ТаблицаШтрихкодыВТ.Префикс КАК Префикс,
		               |	ТаблицаШтрихкодыВТ.Вес КАК Вес,
		               |	ТаблицаШтрихкодыВТ.КодМаркировки КАК КодМаркировки,
		               |	ШтрихКоды.Штрихкод КАК ШтрихкодОбъекта,
		               |	ШтрихКоды.Объект,
		               |	ШтрихКоды.ЕдиницаИзмерения,
		               |	ШтрихКоды.ХарактеристикаНоменклатуры,
		               |	ШтрихКоды.Запрет КАК Запрет
		               |ИЗ
		               |	ТаблицаШтрихкодыВТ КАК ТаблицаШтрихкодыВТ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихКоды
		               |		ПО (ШтрихКоды.Штрихкод ПОДОБНО ТаблицаШтрихкодыВТ.Префикс + ""%"")
		               |ГДЕ
		               |	ШтрихКоды.Объект ЕСТЬ НЕ NULL ";
		
	Иначе
		
		ТаблицаШтрихкоды = Новый ТаблицаЗначений;
		ТаблицаШтрихкоды.Колонки.Добавить("Штрихкод",      Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
		ТаблицаШтрихкоды.Колонки.Добавить("КодМаркировки", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
		
		Для Каждого Штрихкод Из МассивШтрихкоды Цикл
			
			НоваяСтрока = ТаблицаШтрихкоды.Добавить();
			
			СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(Штрихкод);
			
			// Считали код маркировки
			Если СтруктураМаркировки.ТипИдентификатораТовара =
				ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
				НоваяСтрока.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(Штрихкод, "");
				МаркировкаТоваровКлиентСервер.ЗаписатьПолныйШтрихкод(СтруктураМаркировки);
				Штрихкод = СтруктураМаркировки.EAN;
			КонецЕсли;
			
			НоваяСтрока.Штрихкод = Штрихкод;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаШтрихкоды", ТаблицаШтрихкоды);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаШтрихкоды.Штрихкод,
		               |	ТаблицаШтрихкоды.КодМаркировки
		               |ПОМЕСТИТЬ ТаблицаШтрихкодыВТ
		               |ИЗ
		               |	&ТаблицаШтрихкоды КАК ТаблицаШтрихкоды
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТаблицаШтрихкодыВТ.Штрихкод КАК Штрихкод,
		               |	ТаблицаШтрихкодыВТ.Штрихкод КАК Префикс,
		               |	0 КАК Вес,
		               |	ТаблицаШтрихкодыВТ.КодМаркировки КАК КодМаркировки,
		               |	ШтрихКоды.Штрихкод КАК ШтрихкодОбъекта,
		               |	ШтрихКоды.Объект,
		               |	ШтрихКоды.ЕдиницаИзмерения,
		               |	ШтрихКоды.ХарактеристикаНоменклатуры,
		               |	ШтрихКоды.Запрет КАК Запрет
		               |ИЗ
		               |	ТаблицаШтрихкодыВТ КАК ТаблицаШтрихкодыВТ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихКоды
		               |		ПО (ШтрихКоды.Штрихкод = ТаблицаШтрихкодыВТ.Штрихкод)
		               |ГДЕ
		               |	ШтрихКоды.Объект ЕСТЬ НЕ NULL ";
		
	КонецЕсли;
	
	Если ПроверкаЗапрета Тогда
		Запрос.Текст = Запрос.Текст + "И НЕ ШтрихКоды.Запрет";
	КонецЕсли;
	
	НайденныеОбъекты = Запрос.Выполнить().Выгрузить();
	
	Возврат НайденныеОбъекты;
	
КонецФункции // НайтиОбъектыПоШтрихкоду()

// Выполняет поиск карточки по штрихкоду и возвращает ссылку на найденную карточку либо Неопределено.
//
// Параметры:
//  Штрихкод - Строка - Штрихкод для поиска.
//
// Возвращаемое значение:
//  СправочникСсылка.Карточки - искомый объект.
//
Функция ПолучитьКарточкуПоКоду(Штрихкод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихКоды.Объект КАК Карточка
	|ИЗ
	|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ
	|	ШтрихКоды.ШтрихКод = &Штрихкод
	|	И ШтрихКоды.Объект ССЫЛКА Справочник.Карточки";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Карточка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьКарточкуПоКоду()

// Формирует сообщение о назначении штрихкода объекту.
//
// Параметры:
//  Штрихкод	- Строка				- Штрихкод, который устанавливается.
//  Объект		- ДанныеФормаСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Строка - сформированное сообщение.
//
Функция СформироватьСообщениеШтрихкодУстановлен(Штрихкод, Объект) Экспорт
	
	ВидОбъекта = ВидОбъектаФормы(Объект);
	Возврат НСтр("ru = 'Установлен штрихкод'") + " " + ВидОбъекта + " """ + ШтрихКод + """.";
	
КонецФункции // СформироватьСообщениеШтрихкодУстановлен()

// Функция выполняет поиск существующих объектов по штрихкоду.
//
// Параметры:
//  ШтрихкодПараметр	- Строка				- Штрихкод, по которому ведется поиск
//  Объект				- ДанныеФормаСтруктура	- Объект, для которого выполняется обработка события.
//  Отказ				- Булево				- Признак отказа от дальнейшей обработки объекта
//  ПараметрыДействия	- Структура				- Структура дополнительных параметров.
//
// Возвращаемое значение:
//  Булево - Истина - если штрихкоды найдены, Ложь - если штрихкоды не удалось найти.
//
Функция ПроверкаУникальностиШтрихкодов(ШтрихкодПараметр, Объект, Отказ = Ложь, ПараметрыДействия = Неопределено) Экспорт
	
	// инициализация вспомогательных переменных
	РезультатПроверки = Истина;
	Ошибки = "";
	
	// получение входных параметров
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	Если НЕ ПараметрыДействия.Свойство("СообщатьОбОшибке") = Неопределено Тогда
		ПараметрыДействия.Вставить("СообщатьОбОшибке", Ложь);
	КонецЕсли;
	Если НЕ ПараметрыДействия.Свойство("ТекстСообщения") Тогда
		ПараметрыДействия.Вставить("ТекстСообщения", "");
	КонецЕсли;
	
	// формирование массива штрихкодов на основе переданных параметров
	МассивШтрихкоды = Новый Массив;
	Если ТипЗнч(ШтрихкодПараметр) = Тип("Массив") Тогда
		МассивШтрихкоды = ШтрихкодПараметр;
	Иначе
		МассивШтрихкоды.Добавить(ШтрихкодПараметр);
	КонецЕсли;
	
	// проверка уникальности штрихкодов внутри массива
	Если МассивШтрихкоды.Количество() > 1  Тогда
		
		// исключение из массива не уникальных штрихкодов
		ВсеШтрихкоды = Новый ТаблицаЗначений;
		ВсеШтрихкоды.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
		Для Каждого ТекШтрихкод Из МассивШтрихкоды Цикл
			СтрокаШтрихкод = ВсеШтрихкоды.Добавить();
			СтрокаШтрихкод.Штрихкод = ТекШтрихкод;
		КонецЦикла;
		УникальныеШтрихкоды = ВсеШтрихкоды.Скопировать();
		УникальныеШтрихкоды.Свернуть("Штрихкод");
		МассивШтрихкоды = УникальныеШтрихкоды.ВыгрузитьКолонку("Штрихкод");
		
		// получение дублей и формирование сообщений об ошибке
		Если МассивШтрихкоды.Количество() <> ВсеШтрихкоды.Количество() Тогда 
			Отказ = Истина;
			Для Каждого ТекШтрихкод Из МассивШтрихкоды Цикл
				МассивСтрок = ВсеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", ТекШтрихкод));
				Если МассивСтрок.Количество() > 1 Тогда
					Ошибки = Ошибки + ?(Ошибки = "", "", Символы.ПС) + "Штрихкод" + " """ + ТекШтрихкод + """ "
						+ НСтр("ru = 'дублируется в таблице.'");
					РезультатПроверки = Ложь;
				КонецЕсли;
			КонецЦикла
		КонецЕсли;
		
	КонецЕсли;
	
	// поиск в базе данных по штрихкодам
	НайденныеОбъекты = НайтиОбъектыПоШтрихкоду(МассивШтрихкоды);
	
	Для Каждого Штрихкод Из МассивШтрихкоды Цикл
		
		Если Штрихкод = "" Тогда
			Продолжить;
		КонецЕсли;
		
		// проверка по найденным в базе данных штрихкодам
		Отбор = Новый Структура();
		Отбор.Вставить("ШтрихКод", ШтрихКод);
		НайденныеСтроки = НайденныеОбъекты.НайтиСтроки(Отбор);
		
		СоответствуетТекущемуОбъекту = Ложь;
		
		Для Каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
			
			// если это текущий объект, то все в порядке
			Если НЕ ЗначениеЗаполнено(ТекНайденнаяСтрока.Объект) ИЛИ ТекНайденнаяСтрока.Объект = Объект Тогда
				СоответствуетТекущемуОбъекту = Истина;				
				Продолжить;
			КонецЕсли;
			
			// штрихкод не уникален
			Ошибки = Ошибки + ?(Ошибки = "", "", Символы.ПС) + СформироватьСообщениеШтрихкодНеУникален(ТекНайденнаяСтрока.Префикс, ТекНайденнаяСтрока.Объект);
			РезультатПроверки = Ложь;
			Прервать;
			
		КонецЦикла;
		
		// проверка по регистру запрещенные штрихкоды
		Если НЕ СоответствуетТекущемуОбъекту И ШтрихкодЗапрещен(ШтрихКод) Тогда
			Ошибки = Ошибки + ?(Ошибки = "", "", Символы.ПС) + "Штрихкод"  + " """ + ШтрихКод + """ " 
				+ НСтр("ru = 'запрещен в системе.'");
			РезультатПроверки = Ложь;
			Отказ = Истина;
		КонецЕсли;
			
	КонецЦикла;
	
	// вывод сообщения об обнаруженных ошибках
	ПараметрыДействия.ТекстСообщения = Ошибки;
	Если ПараметрыДействия.СообщатьОбОшибке Тогда
		Если НЕ РезультатПроверки И ПараметрыДействия.ТекстСообщения <> "" Тогда
			ОбщегоНазначения.СообщитьПользователю(ПараметрыДействия.ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Выполняет обработку после события считывания штрихкода
//
// Параметры:
//  ПараметрыДействия - Структура - Структура дополнительных параметров.
//
Процедура ОбработкаОбъектовПоШтрихкоду(ПараметрыДействия) Экспорт
	
	ОбъектыПоШтрихкоду = ПараметрыДействия.ОбъектыПоШтрихкоду;
	ПараметрыДействия.Удалить("ОбъектыПоШтрихкоду");
	
	ДоступныеПоля = ПараметрыДействия.ДоступныеПоля;
	ЕстьДоступныеПоля = ДоступныеПоля.Количество();
	
	// получим только те объекты, где штрихкод не запрещен
	НеЗапрещенныеОбъектыПоШтрихкоду = Новый Массив;
	Для Каждого ОбъектПоШтрихкоду Из ОбъектыПоШтрихкоду Цикл
		ЕстьВес = ЕстьРеквизит(ОбъектПоШтрихкоду, "Вес");
		ЕстьКодМаркировки =  ЕстьРеквизит(ОбъектПоШтрихкоду, "КодМаркировки");
		Если НЕ ОбъектПоШтрихкоду.Запрет Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектПоШтрихкоду.Объект));
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Объект",						ОбъектПоШтрихкоду.Объект);
			СтруктураСтроки.Вставить("ЕдиницаИзмерения",			ОбъектПоШтрихкоду.ЕдиницаИзмерения);
			СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры",	ОбъектПоШтрихкоду.ХарактеристикаНоменклатуры);
			СтруктураСтроки.Вставить("Штрихкод",					ОбъектПоШтрихкоду.Штрихкод);
			СтруктураСтроки.Вставить("Запрет",						ОбъектПоШтрихкоду.Запрет);
			СтруктураСтроки.Вставить("Вес",							?(ЕстьВес, ОбъектПоШтрихкоду.Вес, 0));
			СтруктураСтроки.Вставить("КодМаркировки",				?(ЕстьКодМаркировки, ОбъектПоШтрихкоду.КодМаркировки, ""));
			СтруктураСтроки.Вставить("ИмяФормыСписка", 				ОбъектМетаданных.ПолноеИмя() + ".ФормаСписка");
			НеЗапрещенныеОбъектыПоШтрихкоду.Добавить(СтруктураСтроки);
		КонецЕсли;
	КонецЦикла;
	
	// Обработка считывания штрихкода в зависимости от количества найденных объектов в регистре.
	Если НеЗапрещенныеОбъектыПоШтрихкоду.Количество() = 0 Тогда
		
		// если все найденные объекты запрещены
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Штрихкод ""%1"" запрещен в системе'"), ОбъектыПоШтрихкоду[0].ШтрихКод)
		);
		
	ИначеЕсли НеЗапрещенныеОбъектыПоШтрихкоду.Количество() = 1 Тогда
		
		// если найден 1 не запрещенный объект
		Обработан = Ложь;
		
		Если ЕстьДоступныеПоля Тогда
			
			ОбъектПоШтрихкоду = НеЗапрещенныеОбъектыПоШтрихкоду[0];
			
			Если ТипЗнч(ОбъектПоШтрихкоду.Объект) = Тип("СправочникСсылка.Номенклатура")
				И ДоступныеПоля.Свойство("ВыборТовара") Тогда
				
				ПараметрыДействия.Вставить("НайденныйОбъект", ОбъектПоШтрихкоду);
				ПараметрыДействия.Вставить("Действие", "УстановитьНоменклатуру");
				Обработан = Истина;
				
			ИначеЕсли ТипЗнч(ОбъектПоШтрихкоду.Объект) = Тип("СправочникСсылка.Карточки")
				И ДоступныеПоля.Свойство("ВыборКарты") Тогда
				
				ПараметрыДействия.Вставить("НайденныйОбъект", ОбъектПоШтрихкоду);
				ПараметрыДействия.Вставить("Действие", "УстановитьКарточку");
				Обработан = Истина;
				
			ИначеЕсли ТипЗнч(ОбъектПоШтрихкоду.Объект) = Тип("СправочникСсылка.ПрочиеАктивы")
				И ДоступныеПоля.Свойство("ВыборАктива") Тогда
				
				ПараметрыДействия.Вставить("НайденныйОбъект", ОбъектПоШтрихкоду);
				ПараметрыДействия.Вставить("Действие", "УстановитьАктив");
				Обработан = Истина;
				
			ИначеЕсли ДоступныеПоля.Свойство("ПоказатьВСписке") Тогда
				
				ПараметрыДействия.Вставить("НайденныйОбъект", НеЗапрещенныеОбъектыПоШтрихкоду);
				ПараметрыДействия.Вставить("Действие", "ПоказатьВСписке");
				Обработан = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если объект невозможно обработать в форме - открытие формы списка с позиционированием на объекте.
		Если НЕ Обработан Тогда
			// Нашли 1 объект, но подставить его не куда...
			ТекстОшибки = НСтр("ru = 'Найденный объект <%1> по штрихкоду ""%2"" не соответствует текущему документу.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				ОбъектПоШтрихкоду.Объект,
				ОбъектыПоШтрихкоду[0].ШтрихКод
			);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ОбъектПоШтрихкоду.Объект
			);
			ПараметрыДействия.Вставить("НайденныйОбъект", НеЗапрещенныеОбъектыПоШтрихкоду);
			ПараметрыДействия.Вставить("Действие", "ПоказатьВСписке");
		КонецЕсли;
		
	Иначе
		
		// Если найдено более 1 не запрещенного объекта,
		// выполняется открытие формы выбора объекта из списка.
		ПараметрыДействия.Вставить("НайденныйОбъект", НеЗапрещенныеОбъектыПоШтрихкоду);
		ПараметрыДействия.Вставить("Действие", "ВыбратьИзСписка");
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет подготовку данных для дальнейшей обработки кода карточки
//
// Параметры:
//  ПараметрыДействия - Структура - структура, содержащая данные для дальнейшей обработки
//
Процедура ПодготовитьДанныеДляОбработкиКодаКарты(ПараметрыДействия) Экспорт
	
	РезультатПоиска = ПолучитьКарточкуПоКоду(ПараметрыДействия.КодКарты);
	Если РезультатПоиска = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не найдена карточка по считанному коду: %1'"), ПараметрыДействия.КодКарты),
			,
			,
			"Объект"
		);
		Возврат;
	КонецЕсли;
	
	// вставим полученную карточку
	Если ПараметрыДействия.ДоступныеПоля.Свойство("ВыборКарточки") Тогда
		
		ПараметрыДействия.Вставить("НайденныйОбъект", РезультатПоиска);
		ПараметрыДействия.Вставить("Действие", "УстановитьКарточку");
		
	ИначеЕсли ЗначениеЗаполнено(РезультатПоиска.Объект) Тогда
		
		ПараметрыДействия.Вставить("НайденныйОбъект", РезультатПоиска.Объект);
		ПараметрыДействия.Вставить("Действие", "ПоказатьВСписке");
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(РезультатПоиска.Объект));
		ПараметрыДействия.Вставить("ИмяФормыСписка", ОбъектМетаданных.ПолноеИмя() + ".ФормаСписка");
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет подготовку данных для дальнейшей обработки штрихкода
//
// Параметры:
//  ПараметрыДействия - Структура - структура, содержащая данные для дальнейшей обработки
//
Процедура ПодготовитьДанныеДляОбработкиШтрихкода(ПараметрыДействия) Экспорт
	
	Штрихкод = ПараметрыДействия.Штрихкод;
	
	ОбъектыПоШтрихкоду = НайтиОбъектыПоШтрихкоду(ШтрихКод, , Истина);
	
	Если ОбъектыПоШтрихкоду.Количество() = 0 И ПараметрыДействия.ДоступныеПоля.Свойство("ВыборШтрихкода") Тогда
		
		// Если не найдено ни одного объекта,
		// штрихкод может быть использован в некоторых справочниках для подстановки в поле "Штрихкод".
		ПараметрыДействия.Вставить("Действие", "УстановитьНовыйШтрихкод");
		ПараметрыДействия.Вставить("НайденныйОбъект", Штрихкод);
		ПараметрыДействия.Вставить("ВидОбъекта", ВидОбъектаФормы(ПараметрыДействия.СсылкаОбъектаФормы));
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектыПоШтрихкоду.Количество() = 0 Тогда
		СтруктураМаркировки = МаркировкаТоваровСервер.РазобратьШтриховойКодТовара(ШтрихКод);
		Если МаркировкаТоваровКлиентСервер.ЭтоКодТовараВФорматеDataMatrixGS1(
				ШтрихКод,
				СтруктураМаркировки) Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не найдена номенклатура по считанному коду %1 с кодом маркировки:'"),
				СтруктураМаркировки.EAN);
			ПараметрыДействия.Ошибки.Добавить(ТекстСообщения);
			ПараметрыДействия.Ошибки.Добавить(МаркировкаТоваровКлиентСервер.СформироватьКодМаркировки(СтруктураМаркировки));
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найден объект по считанному коду: %1'"), ШтрихКод);
			ПараметрыДействия.Ошибки.Добавить(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ОбъектыПоШтрихкоду", ОбъектыПоШтрихкоду);
	ОбработкаОбъектовПоШтрихкоду(ПараметрыДействия);
	
КонецПроцедуры

// Обработчик для события формы ОбработкаОповещения.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  
//  ПараметрыДействия - Структура - структура, содержащая данные для дальнейшей обработки
//  ДополнительныеПараметры - Структура - 
//  ИмяТабличнойЧасти - Строка - имя обрабатываемой табличной части        
//  Объект - ДанныеФормыСтруктура  -.
//
Процедура ОбработкаОповещения(Форма,
		ПараметрыДействия,
		ДополнительныеПараметры,
		ИмяТабличнойЧасти = "Товары",
		Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	Действие = ПараметрыДействия.Действие;
	
	Если ПараметрыДействия.Действие = "УстановитьКарточку" Тогда
		
		// здесь подставим карточку и дернем обработчик
		Если
			Форма.ТолькоПросмотр
			ИЛИ (НЕ Форма.Элементы.Найти("Карточка") = Неопределено
				И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекНаОплату"))
		Тогда
			Возврат;
		КонецЕсли;
		
		Объект.Карточка = ПараметрыДействия.НайденныйОбъект.Объект;
		
		// Вызываем обработчик изменения данных объекта
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		МенеджерОбъекта.КарточкаПриИзменении(Объект, ПараметрыДействия);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Установлена карточка <%1>'"),
			Объект.Карточка
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	ИначеЕсли ПараметрыДействия.Действие = "УстановитьНоменклатуру" Тогда
		
		Если 
			Форма.ТолькоПросмотр
			ИЛИ Форма.Элементы[ИмяТабличнойЧасти].ТолькоПросмотр
			ИЛИ НЕ Форма.Элементы[ИмяТабличнойЧасти].ИзменятьСоставСтрок
		Тогда
			Возврат;
		КонецЕсли;
		
		ВыбранноеЗначение = ПараметрыДействия.НайденныйОбъект;
		
		СтруктураПоиска = Новый Структура("Номенклатура", ВыбранноеЗначение.Объект);
		Если ВыбранноеЗначение.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(ВыбранноеЗначение.ЕдиницаИзмерения) Тогда
			СтруктураПоиска.Вставить("ЕдиницаИзмерения", ВыбранноеЗначение.ЕдиницаИзмерения);
		КонецЕсли;
		Если ВыбранноеЗначение.Свойство("ХарактеристикаНоменклатуры")
			И ЗначениеЗаполнено(ВыбранноеЗначение.ХарактеристикаНоменклатуры) Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ВыбранноеЗначение.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		// для ЗаказНаряда и пр
		Если ПараметрыДействия.Свойство("ИдентификаторПричиныОбращения")
			И ЗначениеЗаполнено(ПараметрыДействия.ИдентификаторПричиныОбращения) Тогда
			СтруктураПоиска.Вставить("ИдентификаторПричиныОбращения", ПараметрыДействия.ИдентификаторПричиныОбращения);
		КонецЕсли;
		
		// для Уведомления о перемещении товаров
		Если ПараметрыДействия.Свойство("ИдентификаторСтроки")
			И ЗначениеЗаполнено(ПараметрыДействия.ИдентификаторСтроки) Тогда
			СтруктураПоиска.Вставить("ИдентификаторСтроки", ПараметрыДействия.ИдентификаторСтроки);
		КонецЕсли;
		
		Количество = 1;
		Если ВыбранноеЗначение.Свойство("Вес") И ВыбранноеЗначение.Вес > 0 Тогда
			Количество = ВыбранноеЗначение.Вес;
		КонецЕсли;
		
		ИмяРеквизитаКоличество = Неопределено;
		ПараметрыДействия.Свойство("ИмяРеквизитаКоличество", ИмяРеквизитаКоличество);
		Если ИмяРеквизитаКоличество = Неопределено Тогда
			ИмяРеквизитаКоличество = "Количество";
		КонецЕсли;
		
		МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение.Объект;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			Выполнить("МенеджерОбъекта."
				+ ИмяТабличнойЧасти
				+ "НоменклатураПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыДействия)"
			);
			СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] = Количество;
			Выполнить("МенеджерОбъекта."
				+ ИмяТабличнойЧасти
				+ ИмяРеквизитаКоличество
				+ "ПриИзменении(Объект, СтрокаТабличнойЧасти)"
			);
			
		Иначе
			СтрокаТабличнойЧасти = МассивСтрокТЧ[0];
			СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] = СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] + Количество;
			Выполнить("МенеджерОбъекта."
				+ ИмяТабличнойЧасти
				+ ИмяРеквизитаКоличество
				+ "ПриИзменении(Объект, СтрокаТабличнойЧасти)"
			);
		КонецЕсли;
		
		// обновим данные документа
		Попытка
			ИтогиОперации = МенеджерОбъекта.РассчитатьИтогиОперации(Объект);
			ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);
		Исключение
			ПричинаОшибки = ИнформацияОбОшибке();
		КонецПопытки;
		
		// Необходимо показать колонку Характеристик, если выбран товар с характеристиками.
		УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(Форма, СтрокаТабличнойЧасти);
		
		Если ЕстьРеквизит(Объект, "КодыМаркировки") И ВыбранноеЗначение.Свойство("КодМаркировки")
			И НЕ ПустаяСтрока(ВыбранноеЗначение.КодМаркировки) Тогда
			НоваяСтрока = Объект.КодыМаркировки.Добавить();
			НоваяСтрока.КодМаркировки = ВыбранноеЗначение.КодМаркировки;
			НоваяСтрока.ИдентификаторТовара = СтрокаТабличнойЧасти.ИдентификаторТовара;
			
			Если ЕстьРеквизит(Объект, "Подтверждено", "КодыМаркировки") Тогда
				НоваяСтрока.Подтверждено = Истина;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(
				Объект,
				СтрокаТабличнойЧасти,
				ПараметрыДействия,
				ИмяТабличнойЧасти
			);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИмяТабличнойЧасти,
			"ТекущаяСтрока",
			СтрокаТабличнойЧасти.ПолучитьИдентификатор()
		);
		
	ИначеЕсли ПараметрыДействия.Действие = "УстановитьАктив" Тогда
		
		Если Форма.ТолькоПросмотр ИЛИ Форма.Элементы[ИмяТабличнойЧасти].ТолькоПросмотр Тогда
			Возврат;
		КонецЕсли;
		
		ВыбранноеЗначение = ПараметрыДействия.НайденныйОбъект;
		
		СтруктураПоиска = Новый Структура("ПрочийАктив", ВыбранноеЗначение.Объект);
		МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.ПрочийАктив = ВыбранноеЗначение.Объект;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			Выполнить("МенеджерОбъекта."
				+ ИмяТабличнойЧасти
				+ "ПрочийАктивПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыДействия)"
			);
			// обновим данные документа
			Попытка
				ИтогиОперации = МенеджерОбъекта.РассчитатьИтогиОперации(Объект);
				ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);
			Исключение
				ПричинаОшибки = ИнформацияОбОшибке();
			КонецПопытки;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяТабличнойЧасти,
				"ТекущаяСтрока",
				СтрокаТабличнойЧасти.ПолучитьИдентификатор()
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция Округляет число до ближайшего верхнего целого
//
// Параметры:
//  Значение - число - значение для округления.
//
// Возвращаемое значение:
//  ВремЗначение - число - результат округления.
//
Функция ОкрВверх(Значение)
	ВремЗначение = Цел(Значение);
	Если Значение > ВремЗначение Тогда
		Возврат ВремЗначение + 1;
	Иначе
		Возврат ВремЗначение;
	КонецЕсли;
КонецФункции // ОкрВверх()

// Функция, приводящая строку к необходимой длине строки символом
//
// Параметры:
//  Реж    - число -  1 - добавлять символы слева, 2 - справа, 3 - слева и справа
//  Стр    - строка - строка которую редактируем,
//  Символ - строка - символ, который вставляем,
//  Длина  - Число - длина до которой приводим.
//
// Возвращаемое значение:
//  Стр - строка - результат редактирования строки.
//
Функция СтрокаПривести(Стр,Символ,Длина,Реж=1)
	ДопСтр=""; Сч=Длина-СтрДлина(Стр);
	Если Сч>0  Тогда
		Для к=1 По Сч Цикл
			ДопСтр=ДопСтр+Символ;
		КонецЦикла;
		Если Реж=1 Тогда Возврат ДопСтр+Стр;
		ИначеЕсли Реж=2 Тогда Возврат Стр+ДопСтр;
		Иначе к=Окр(Сч/2); Возврат Лев(ДопСтр,к)+Стр+Прав(ДопСтр,Сч-к);
		КонецЕсли;
	Иначе Возврат Стр;
	КонецЕсли;
КонецФункции // СтрокаПривести()

// Функция Возвращает псевдослучайное число указанного порядка
// (порядок равен количеству цифр в числе, [1..10])
// Используется генератор GUID.
//
// Параметры:
//  Порядок - порядок числа
//
// Возвращаемое значение:
//  получено число
//
Функция СлучайноеЧисло(Порядок)
	
	Мин = 0;   //минимальное допустимое значение произвольного кода
	Макс = 1;  //максимальное допустимое значение произвольного кода
	Для х = 0 По Порядок - 1 Цикл 
		Макс = Макс * 10; 
	КонецЦикла;
	Макс = Макс-1;
	
	// генерируем GUID и оставляем только цифры
	НовыйУИ = СокрЛП(Новый УникальныйИдентификатор);
	НовыйУИ = СтрЗаменить(НовыйУИ,"-","");
	НовыйУИ = СтрЗаменить(НовыйУИ,"a","");
	НовыйУИ = СтрЗаменить(НовыйУИ,"b","");
	НовыйУИ = СтрЗаменить(НовыйУИ,"c","");
	НовыйУИ = СтрЗаменить(НовыйУИ,"d","");
	НовыйУИ = СтрЗаменить(НовыйУИ,"e","");
	НовыйУИ = СтрЗаменить(НовыйУИ,"f","");
	
	// знаменатель должен иметь такое же количество нулей + 1
	Знаменатель = 10;
	Для н = 2 По (СтрДлина(СтрЗаменить(НовыйУИ,Символы.НПП,""))) Цикл
		Знаменатель = Знаменатель * 10;
	КонецЦикла; 
	
	// получим дробное случайное число в диапазоне от 0 до 1
	Случ = Число(НовыйУИ) / Знаменатель;     
	
	// Преобразуем его в случайное число из заданного интервала, округляем до целого.
	ЧислоИзИнтервала = Мин(Макс(Окр(Мин + (Макс-Мин)*Случ),Мин),Макс);
	Возврат ЧислоИзИнтервала;
	
КонецФункции // СлучайноеЧисло()

// Вычисляет контрольную цифру EAN-13/EAN-8 
// Возвращает штрих-код с контрольной цифрой.
//
// Параметры:
//  Код - строка - код, по которому вычисляем контрольную цифру.
//
// Возвращаемое значение:
//  Рез - Строка - штрих-код с контрольной цифрой. 
//
Функция EAN13(Код)
	ШтрКод = Формат(Число(Код),"ЧН=; ЧВН=; ЧГ=0; ЧЦ="+?(СтрДлина(Код)<8,"7","12"));
	Четн = 0; Нечетн = 0;
	Если СтрДлина(Код)=7 Тогда Итераций = 4; 
	Иначе Итераций = 6; 
	КонецЕсли;
	Для Индекс=1 По Итераций Цикл
		Четн=Четн+Сред(ШтрКод,2*Индекс,1);
		Нечетн=Нечетн+Сред(ШтрКод,2*Индекс-1,1);
	КонецЦикла;
	Если СтрДлина(Код)=7 Тогда Нечетн=Нечетн*3; 
	Иначе Четн=Четн*3;
	КонецЕсли;
	КонтЦифра=10-(Четн+Нечетн)%10;
	Если КонтЦифра=10 Тогда КонтЦифра=0; КонецЕсли;
	Рез=ШтрКод+Строка(КонтЦифра);
	Возврат Рез;
КонецФункции // EAN13()

// Формирует случайный код в произвольном алфавитно-цифровом формате
// Используется генератор GUID
// Возвращает строку чисел если АлфавитноЦифровой=0 и буквенно-цифровую A-Z&0-9 иначе.
//
// Параметры:
//  КоличествоЗнаков - число - длина кода,
//  АлфавитноЦифровой - число определяет тип кода.
//
// Возвращаемое значение:
//  Стр - строка - сформированный произвольный код.
//
Функция СформироватьПроизвольныйКод(КоличествоЗнаков = 22)

	Стр = "";
	Для К = 1 По ОкрВверх(КоличествоЗнаков / 10) Цикл
		Стр = Стр + Формат(СлучайноеЧисло(10),"ЧЦ=10; ЧН=; ЧВН=; ЧГ=0");
	КонецЦикла;
	Возврат Лев(Стр, КоличествоЗнаков);
	
КонецФункции // СформироватьПроизвольныйКод()

// Функция проверяет штрихкод на наличие в списке запрещенных штрих кодов
//
// Параметры
//  <Штрихкод>  - Проверяемый штрихкод
// Возвращаемое значение:
//  Истина - если код запрещен
//  Ложь   - если код разрешен.
Функция ШтрихкодЗапрещен(Штрихкод)
	
	НайденныйШтрихкод = "";
	
	// поиск по штрихкоду
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЗапрещенныеШтрихкоды.ШтрихКод КАК Штрихкод
	                      |ИЗ
	                      |	РегистрСведений.ЗапрещенныеШтрихКоды КАК ЗапрещенныеШтрихкоды
	                      |ГДЕ
	                      |	НЕ ЗапрещенныеШтрихкоды.ЭтоПрефикс
	                      |	И ЗапрещенныеШтрихкоды.ШтрихКод = &Штрихкод
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ 
	                      |	ЗапрещенныеШтрихКоды.ШтрихКод
	                      |ИЗ
	                      |	РегистрСведений.ЗапрещенныеШтрихКоды КАК ЗапрещенныеШтрихКоды
	                      |ГДЕ
	                      |	ЗапрещенныеШтрихКоды.ЭтоПрефикс
	                      |	И &Штрихкод ПОДОБНО ЗапрещенныеШтрихКоды.ШтрихКод + ""%""");
	Запрос.УстановитьПараметр("Штрихкод",Штрихкод);
	Результат=Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		НайденныйШтрихкод = Результат.Выгрузить().Получить(0).Штрихкод;
	КонецЕсли;
	
	Возврат НЕ ПустаяСтрока(НайденныйШтрихкод);
	
КонецФункции // ШтрихкодЗапрещен()

// Формирует штрихкод в формате EAN-13
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Штрихкод
Функция СформироватьШтрихкодEAN13(Товар = Неопределено, ЕстьПрефикс = Ложь, Весовой = Ложь)
	
	ДлинаКода = 12; //13й символ - проверочный
	ПрефиксКода = "";
	
	Если ЕстьПрефикс Тогда
		
		Если Весовой Тогда
		   
			ДлинаКода = 5; //Для весового товара длина штрихкода 7 символов, в том числе 2 символа префикса
			ПрефиксКода = Строка(Константы.ПрефиксВесовогоШК.Получить());
			
		Иначе
			
			ДлинаКода = 10;	//Для не весового товара длина штрихкода 12 символов, в том числе 2 символа префикса
			ПрефиксКода = Строка(Константы.ПрефиксШтучногоШК.Получить());
			
		КонецЕсли;
		
	КонецЕсли;	
		
	НовыйКод = EAN13(Строка(ПрефиксКода) + СтрокаПривести(СформироватьПроизвольныйКод(ДлинаКода), "0", 12 - СтрДлина(ПрефиксКода), 2));
	Пока НЕ ПроверкаНовогоШтрихкода(НовыйКод, ЕстьПрефикс) Цикл
		НовыйКод = EAN13(Строка(ПрефиксКода) + СтрокаПривести(СформироватьПроизвольныйКод(ДлинаКода), "0", 12 - СтрДлина(ПрефиксКода), 2));
	КонецЦикла;
	
	Возврат НовыйКод; 
	
КонецФункции // СформироватьШтрихкод()

// Проверяет, ведется ли автоматическое штрихкодирование по данному виду объектов.
//
// Параметры:
//  Объект - ссылка или объект для проверки.
//
// Возвращаемое значение:
//  Истина - штрихкодирование ведется
//  Ложь   - штрихкодирование не ведется.
Функция ИспользоватьАвтоШтрихкодированиеДокументов(Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеКомпании) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если НЕ Объект.ПодразделениеКомпании.АвтоматическоеШтрихкодированиеДокументов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИспользованиеШтрихкодированияДокументов.ПодразделениеКомпании,
	               |	ИспользованиеШтрихкодированияДокументов.ВидДокументов,
	               |	ИспользованиеШтрихкодированияДокументов.Использование
	               |ИЗ
	               |	РегистрСведений.ИспользованиеШтрихкодированияДокументов КАК ИспользованиеШтрихкодированияДокументов
	               |ГДЕ
	               |	ИспользованиеШтрихкодированияДокументов.ПодразделениеКомпании = &ПодразделениеКомпании
	               |	И ИспользованиеШтрихкодированияДокументов.ВидДокументов = &ВидДокументов";
	Запрос.УстановитьПараметр("ВидДокументов",Объект.Ссылка.Метаданные().Имя);
	Запрос.УстановитьПараметр("ПодразделениеКомпании",Объект.ПодразделениеКомпании);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Использование;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ИспользоватьАвтоШтрихкодированиеДокументов()

// Возвращает режим штрихкодирования номенклатуры
//
// Параметры:
//  Объект - ссылка или объект для проверки.
//
// Возвращаемое значение:
//  Режим штрихкодирования номенклатуры.
Функция РежимШтрихкодированияНоменклатуры(Объект) Экспорт
	
	ТипНоменклатуры = Объект.ТипНоменклатуры;
	Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
		Возврат ТипНоменклатуры.ИспользованиеШтрихКодов;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // РежимШтрихкодированияНоменклатуры()

// Формирует сообщение о неуникальности штрихкода в системе.
//
// Параметры:
//  ШтрихКод - штрихкод, по которому ведется поиск
//	Объект - объект, который использует штрихкод.
Функция СформироватьСообщениеШтрихкодНеУникален(Штрихкод, Объект)
	
	ВидОбъекта = "";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидОбъекта = "номенклатуры";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Карточки") Тогда
		ВидОбъекта = "карточки";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПрочиеАктивы") Тогда
		ВидОбъекта = НСтр("ru = 'прочего актива'");
	ИначеЕсли Метаданные.Документы.Содержит(Объект.Метаданные()) Тогда
		ВидОбъекта = "документа";
	КонецЕсли;	
	
	Возврат "Штрихкод" + " """ + ШтрихКод + """ " + НСтр("ru = 'используется для'") + " " + ВидОбъекта + "  """ + Объект + """.";
	
КонецФункции // СформироватьСообщениеШтрихкодНеУникален()

// Функция проверяет штрихкод на уникальность, запрет и соответствие префикса.
//
// Параметры
//  Штрихкод  - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Истина - если код прошел все проверки
//  Ложь   - если код не прошел все проверки.
Функция ПроверкаНовогоШтрихкода(Штрихкод, ЭтоТовар = Ложь)
	
	// Исключим пересечение документов, карточек и др.объектов по префиксу с товарами.
	Если НЕ ЭтоТовар Тогда
		
		Префикс = Константы.ПрефиксВесовогоШК.Получить();
		Если Лев(Штрихкод,СтрДлина(Префикс)) = Префикс Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Префикс = Константы.ПрефиксШтучногоШК.Получить();
		Если Лев(Штрихкод,СтрДлина(Префикс)) = Префикс Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// проверка по регистру "Запрещенные штрихкоды"
	Если ШтрихкодЗапрещен(ШтрихКод)	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// поиск в базе данных по штрихкодам
	НайденныеОбъекты = НайтиОбъектыПоШтрихкоду(Штрихкод);
	Если НайденныеОбъекты.Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверкаНовогоШтрихкода()

// Получение веса из считанного штрих-кода
//
Функция ПолучитьВесПоШтрихКоду(Штрихкод)
	
	Вес = Сред(Штрихкод, 7 + 1, СтрДлина(Штрихкод) - 8);
	Если НЕ ПустаяСтрока(Вес) Тогда
		Попытка
			Вес = Число(Сред(Штрихкод, 7 + 1, СтрДлина(Штрихкод) - 8)) / 1000;
		Исключение
			Вес = 0;
		КонецПопытки;
	Иначе
		Вес=0;
	КонецЕсли;
	
	Возврат Вес;
	
КонецФункции // ПолучитьВесПоШтрихКоду()

Функция ВидОбъектаФормы(Объект)
	
	ВидОбъекта = "";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидОбъекта = "номенклатуры";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Карточки") Тогда
		ВидОбъекта = "карточки";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПрочиеАктивы") Тогда
		ВидОбъекта = НСтр("ru = 'прочего актива'");
	ИначеЕсли Объект <> Неопределено И Метаданные.Документы.Содержит(Объект.Метаданные()) Тогда
		ВидОбъекта = "документа";
	КонецЕсли;
	
	Возврат ВидОбъекта;
	
КонецФункции

#КонецОбласти
