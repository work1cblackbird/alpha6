// Общий модуль "Управление диалогом документа (сервер)"

#Область ПрограммныйИнтерфейс

// Устарела. см. РаботаСФормой.НастроитьОтображениеСИспользованиемБазовогоКоличества
// Процедура производит адаптацию видимости колонок Количество и Количество (базовое).
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяТабличнойЧасти	 - Строка	- Имя таблицы, при редактировании которой возникло данное событие.
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура УстановитьВидимостьКолонкиКоличествоБазовое(Форма, ИмяТабличнойЧасти = "Товары", Объект = Неопределено) Экспорт
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБазовоеКоличество") И ЕстьРеквизит(Объект, "КоличествоБазовое", ИмяТабличнойЧасти) Тогда
		Форма.Элементы[ИмяТабличнойЧасти+"Количество"].Заголовок = НСтр("ru = 'Мест'");
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьКолонкиКоличествоБазовое()

// Процедура производит установку видимости колонки Ячейка.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяТабличнойЧасти	 - Строка	- Имя таблицы, при редактировании которой возникло данное событие.
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура УстановитьВидимостьКолонкиЯчейка(Форма, ИмяТабличнойЧасти = "Товары", Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	 
	// Определим вариант отображения дополнительных полей "Код" и "Артикул"
	ОтображатьЯчейки = ПолучитьФункциональнуюОпцию("ИспользоватьЯчейкиХранения");
	
	// Установим видимость служебных колонок в зависимости от значения функциональной опции.
	Если НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти+"Ячейка")=Неопределено И ЕстьРеквизит(Объект, "СкладКомпании") Тогда
		Форма.Элементы[ИмяТабличнойЧасти+"Ячейка"].Видимость = ОтображатьЯчейки И ЗначениеЗаполнено(Объект.СкладКомпании) И (Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый ИЛИ Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый);
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьКолонкиЯчейка()

// Процедура производит установку видимости колонок сумма списания в зависимости от прав пользователя,
// функциональной опции и состояния документа.
//
// Параметры:
//  Форма         - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура УстановитьВидимостьКолонкиСуммаСписания(Форма, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Установим видимость для табличной части "Товары" и "Активы"
	Если НЕ Форма.Элементы.Найти("ТоварыСуммаСписания")=Неопределено Тогда
		
		ЕстьСуммаСписания = Объект.Проведен
							И ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюСуммыСписания")
							И ПраваИНастройкиПользователя.Значение("ПоказыватьСебестоимостьПроведения",Объект);
		Если (НЕ Форма.Элементы.Найти("ТоварыСуммаСписания")=Неопределено) Тогда
			Форма.Элементы["ТоварыСуммаСписания"].Видимость = ЕстьСуммаСписания;
			// Установим надпись подвала - общая сумма списания
			Если ЕстьСуммаСписания Тогда
				Форма.Элементы["ТоварыСуммаСписания"].ТекстПодвала = Формат(Объект.Товары.Итог("СуммаСписания"), "ЧДЦ=2");
			КонецЕсли;
		КонецЕсли;
		
		Если (НЕ Форма.Элементы.Найти("ТоварыСуммаСписанияБезНДС")=Неопределено) Тогда
			Форма.Элементы["ТоварыСуммаСписанияБезНДС"].Видимость = ЕстьСуммаСписания;
			// Установим надпись подвала - общая сумма списания без НДС
			Если ЕстьСуммаСписания Тогда
				Форма.Элементы["ТоварыСуммаСписанияБезНДС"].ТекстПодвала =
					Формат(Объект.Товары.Итог("СуммаСписанияБезНДС"), "ЧДЦ=2");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НЕ Форма.Элементы.Найти("АктивыСуммаСписания")=Неопределено Тогда
		
		ЕстьСуммаСписания = Объект.Проведен
							И ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюСуммыСписания")
							И ПраваИНастройкиПользователя.Значение("ПоказыватьСебестоимостьПроведения",Объект);
		Форма.Элементы["АктивыСуммаСписания"].Видимость = ЕстьСуммаСписания;
		
		// Установим надпись подвала - общая сумма списания
		Если ЕстьСуммаСписания Тогда
			Форма.Элементы["АктивыСуммаСписания"].ТекстПодвала = Формат(Объект.Активы.Итог("СуммаСписания"), "ЧДЦ=2");
		КонецЕсли;
		
	ИначеЕсли НЕ Форма.Элементы.Найти("АвтомобилиСуммаСписания")=Неопределено Тогда
		
		ЕстьСуммаСписания = Объект.Проведен
							И ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюСуммыСписания")
							И ПраваИНастройкиПользователя.Значение("ПоказыватьСебестоимостьПроведения",Объект);
		Если (НЕ Форма.Элементы.Найти("АвтомобилиСуммаСписания")=Неопределено) Тогда
			Форма.Элементы["АвтомобилиСуммаСписания"].Видимость = ЕстьСуммаСписания;
			// Установим надпись подвала - общая сумма списания
			Если ЕстьСуммаСписания Тогда
				Форма.Элементы["АвтомобилиСуммаСписания"].ТекстПодвала = Формат(Объект.Автомобили.Итог("СуммаСписания"), "ЧДЦ=2");
			КонецЕсли;
		КонецЕсли;
		
		Если (НЕ Форма.Элементы.Найти("АвтомобилиСуммаСписанияБезНДС")=Неопределено) Тогда
			Форма.Элементы["АвтомобилиСуммаСписанияБезНДС"].Видимость = ЕстьСуммаСписания;
			// Установим надпись подвала - общая сумма списания без НДС
			Если ЕстьСуммаСписания Тогда
				Форма.Элементы["АвтомобилиСуммаСписанияБезНДС"].ТекстПодвала =
					Формат(Объект.Автомобили.Итог("СуммаСписанияБезНДС"), "ЧДЦ=2");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьКолонкиСуммаСписания()

// Устанавливаем условное оформление для характеристик номенклатуры.
//
// Параметры:
//  Форма						 - Форма	 - Содержит данную форму. 
//  ИмяПоляВводаХарактеристики	 - Строка	 - Наименование элемента формы, содержащего характеристики номенклатуры,
//												если оно отличается от "ТоварыХарактеристикаНоменклатуры".
//  ПутьКПолюОтбора				 - Строка	 - Наименование элемента формы, содержащего значение отбора.
//
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
	Форма,
	ИмяПоляВводаХарактеристики = "ТоварыХарактеристикаНоменклатуры",
	ПутьКПолюОтбора = "Объект.Товары.ВладелецХарактеристики") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		Возврат;
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без характеристик>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливаем условное оформление для характеристик номенклатуры с учетом ручного списания.
//
// Параметры:
//  Форма	 - Форма	 - Содержит данную форму. 
//  ИмяПоля	 - Строка	 - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристикаНоменклатуры".
//  ИмяТЧ	 - Строка	 - Имя таблицы, при редактировании которой возникло данное событие.
//
Процедура УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(Форма,
			ИмяПоля = "ТоварыХарактеристикаНоменклатуры",
			ИмяТЧ = "Товары") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	// Ручное списание характеристик
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоля].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект."+ИмяТЧ+".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект."+ИмяТЧ+".ХарактеристикаНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект."+ИмяТЧ+".РучноеСписаниеХарактеристик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;	
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<автосписание>'"));
	
КонецПроцедуры // УстановитьУсловноеОформлениеХарактеристикНоменклатуры()

// Устанавливаем условное оформление для ячейки номенклатуры вида "Услуга".
//
// Параметры:
//  Форма			 - Форма	 - Содержит данную форму. 
//  ИмяПоляЯчейки	 - Строка	 - Наименование элемента формы, содержащего ссылку на ячейку.
//  ПутьКПолюОтбора	 - Строка	 - Наименование элемента формы, содержащего значение отбора.
//
Процедура УстановитьУсловноеОформлениеЗапретРедактированияЯчейкиУслуги(Форма,
			ИмяПоляЯчейки = "ТоварыЯчейка",
			ПутьКПолюОтбора = "Объект.Товары.ЭтоУслуга") Экспорт
			
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляЯчейки].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры // УстановитьУсловноеОформлениеЗапретРедактированияЯчейкиУслуги()

// Устанавливаем условное оформление поля сумма всего.
//
// Параметры:
//  Форма	 - Форма	 - Содержит данную форму.
//  ИмяТЧ	 - Строка	 - Имя таблицы, при редактировании которой возникло данное событие.
// 
Процедура УстановитьУсловноеОформлениеСуммыВсего(Форма, ИмяТЧ = "Товары") Экспорт
													
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["" + ИмяТЧ + "СуммаВсего"].Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""+ ИмяТЧ + "СуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры // УстановитьУсловноеОформлениеСуммыВсего()

// Устанавливаем условное оформление поля содержание.
//
// Параметры:
//  Форма	 - Форма	 - Содержит данную форму.
//  ИмяПоля	 - Строка	 - Наименование элемента формы содержания услуги,
//											   если оно отличается от "Содержание".
//  ИмяТЧ	 - Строка	 - Имя таблицы, при редактировании которой возникло данное событие.
// 
Процедура УстановитьУсловноеОформлениеСодержаниеУслуги(Форма, ИмяПоля = "Содержание", ИмяТЧ = "Товары") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["" + ИмяТЧ + ИмяПоля].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ЭтоУслуга");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<только для услуг>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры // УстановитьУсловноеОформлениеСодержаниеУслуги()

// Устанавливаем условное оформление полей оплаты.
//
// Параметры:
//  Форма	 - Форма	 - Содержит данную форму.
//
Процедура УстановитьУсловноеОформлениеСпособовОплаты(Форма) Экспорт
	
	// При установки способа расчетов с контрагентом
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СоставДокументРасчетов");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.СпособЗачетаОплаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СоставДокументРасчетов");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СоставЗаказ");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.СпособЗачетаОплаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СоставДокументРасчетов");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.СпособЗачетаОплаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На аванс'"));
	
КонецПроцедуры

// Производит формирование и установку дополнительной информации в поле колонки номенклатуры.
//
// Параметры:
//  ТекстПодвала - Строка				 - Представление поля подвала колонки "Номенклатура".
//  Объект       - ДанныеФормыСтруктура  - Объект, для которого выполняется формирование текста подвала.
//
Процедура УстановитьНадписьПодвалаКолонкиНоменклатура(ТекстПодвала, Объект) Экспорт
	
	ЭлементыСтроки = Новый Массив;
	
	Если Объект.Свойство("Карточка") Тогда
		Карта = ?(ЗначениеЗаполнено(Объект.Карточка), СокрЛП(Объект.Карточка), "< нет >");
		ЭлементыСтроки.Добавить(СтрШаблон(НСтр("ru = 'Карта: %1'"), Карта));
		Если Объект.Свойство("СкидкаНаценка") Тогда
			Если ЗначениеЗаполнено(Объект.СкидкаНаценка) Тогда
				СкидкаНаценка    = СокрЛП(Объект.СкидкаНаценка);
				ЗначениеСкидки   = Объект.ЗначениеСкидкиНаценки;
				СпособВычисления = ?(Объект.СкидкаНаценка.СпособВычисления=Перечисления.СкидкиСпособВычисления.Относительная, "%", Строка(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить()));
				ЭлементыСтроки.Добавить(СтрШаблон(НСтр("ru = 'Скидка: %1 (%2 %3)'"), СкидкаНаценка, ЗначениеСкидки, СпособВычисления));
			Иначе
				ЭлементыСтроки.Добавить(НСтр("ru = 'Скидка: <нет>'"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭлементыСтроки.Добавить(НСтр("ru = 'ИТОГО:'"));
	КонецЕсли;
	
	ТекстПодвала = Новый ФорматированнаяСтрока(СтрСоединить(ЭлементыСтроки, "; "));
	
КонецПроцедуры // УстановитьНадписьПодвалаКолонкиНоменклатура()

// Процедура производит установку заголовков колонок.
//
// Параметры:
//  Форма			 - УправляемаяФорма		 - Форма, в которой возникло событие.
//  Объект			 - ДанныеФормыСтруктура	 - Объект, для которого выполняется установка заголовков колонок цены и суммы.
//  РеквизитТипЦен	 - Строка				 - Имя реквизита типа цен.
//  ТабличнаяЧасть	 - Строка				 - Имя табличной части с колонками цены и суммы.
//
Процедура УстановитьЗаголовокКолонок(Форма, Объект = Неопределено, РеквизитТипЦен = "ТипЦен", ТабличнаяЧасть = "Товары") Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	СНДС = Объект[РеквизитТипЦен].ЦенаВключаетНДС;
	
	Если НЕ Форма.Элементы.Найти(ТабличнаяЧасть+"Цена")=Неопределено Тогда
		Форма.Элементы[ТабличнаяЧасть+"Цена"].Заголовок = ?(СНДС, НСтр("ru = 'Цена с НДС'"), НСтр("ru = 'Цена без НДС'"));
	КонецЕсли;
	
	Если НЕ Форма.Элементы.Найти(ТабличнаяЧасть+"Сумма")=Неопределено Тогда
		Форма.Элементы[ТабличнаяЧасть+"Сумма"].Заголовок = ?(СНДС, НСтр("ru = 'Сумма с НДС'"), НСтр("ru = 'Сумма без НДС'"));
		Форма.Элементы[ТабличнаяЧасть+"Сумма"].Подсказка =
			?(СНДС, НСтр("ru = 'Сумма с учетом НДС'"), НСтр("ru = 'Сумма без учета НДС'"));
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокКолонок()

// Обработчик события возникающего при изменении данных поля "Номенклатура" в строке табличной части.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Строка - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//  ИмяТабличнойЧасти - Строка - Имя таблицы, при редактировании которой возникло данное событие.
//  СуффиксКолонок - Строка - Префикс колонки, в которой содержится характеристика номенклатуры.
//
Процедура НоменклатураПриИзменении(Форма, Строка, ПараметрыДействия=Неопределено, ИмяТабличнойЧасти="Товары", СуффиксКолонок="") Экспорт
	
	// Определим имена поле объекта
	ИмяРеквизита      = "ХарактеристикаНоменклатуры" + СуффиксКолонок;
	ИмяКолонки        = ИмяТабличнойЧасти + ИмяРеквизита;
	ИмяСлужебногоПоля = "ВладелецХарактеристики" + СуффиксКолонок;
	
	Если ВидимостьКолонкиТабличнойЧасти(
			Форма,
			Строка,
			ИмяТабличнойЧасти,
			ИмяРеквизита,
			ИмяСлужебногоПоля,
			Неопределено,
			ПараметрыДействия) Тогда
		
		Форма.Элементы[ИмяКолонки].Видимость = Истина;
		
	КонецЕсли;
	
	// Определим видимость колонки кодов маркировки
	ИмяРеквизита      = "КодыМаркировки" + СуффиксКолонок;
	ИмяКолонки        = ИмяТабличнойЧасти + "Группа" + ИмяРеквизита;
	ИмяСлужебногоПоля = "МаркируемыйТовар" + СуффиксКолонок;
	
	Если ВидимостьКолонкиТабличнойЧасти(
			Форма,
			Строка,
			ИмяТабличнойЧасти,
			ИмяРеквизита,
			ИмяСлужебногоПоля,
			Ложь,
			ПараметрыДействия) Тогда
		
		Форма.Элементы[ИмяКолонки].Видимость = Истина;
		
	КонецЕсли;
	
	// Определим видимость колонки содержание услуги
	ИмяРеквизита      = "Содержание" + СуффиксКолонок;
	ИмяКолонки        = ИмяТабличнойЧасти +  ИмяРеквизита;
	ИмяСлужебногоПоля = "ЭтоУслуга" + СуффиксКолонок;
	
	Если ВидимостьКолонкиТабличнойЧасти(
			Форма,
			Строка,
			ИмяТабличнойЧасти,
			ИмяРеквизита,
			ИмяСлужебногоПоля,
			Ложь,
			ПараметрыДействия) Тогда
		
		Форма.Элементы[ИмяКолонки].Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // НоменклатураПриИзменении()

// Устарела. См ПараметрыДокументаАльфаАвто.ПараметрыДокументаПриИзменении
// Общий обработчик события возникающего при изменении данных объекта из формы "Параметры документа".
//
// Параметры:
//  Форма		 - УправляемаяФорма		 - Форма, в которой возникло событие.
//  Параметры	 - Структура			 - Содержит значения измененных реквизитов.
//  Объект		 - ДанныеФормыСтруктура	 - Объект, для которого выполняется формирование текста подвала.
//
Процедура ПараметрыДокументаПриИзменении(Форма, Параметры, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Получим новое состояние отображения панели параметров документа
	ПоказыватьПараметрыДокумента = (Параметры.Свойство("ПоказыватьПараметрыДокумента") И Параметры.ПоказыватьПараметрыДокумента);
	
	// Если новое состояние отображения не соответствует текущему, то перерисуем форму
	Если НЕ Форма.Элементы.Найти("ПараметрыДокумента") = Неопределено И НЕ Форма.Элементы.ПараметрыДокумента.Видимость=ПоказыватьПараметрыДокумента И НЕ Форма.Элементы.НомерДата.Видимость=ПоказыватьПараметрыДокумента Тогда
		
		// Изменяем видимость элементов управления
		Форма.Элементы.ПараметрыДокумента.Видимость = ПоказыватьПараметрыДокумента;
		Форма.Элементы.НомерДата         .Видимость = ПоказыватьПараметрыДокумента;
		
		// Взведем признак необходимости выполнить сохранение настроек формы при закрытии
		Форма.СохраняемыеВНастройкахДанныеМодифицированы = ИСТИНА;
		
	КонецЕсли;
	
	// Произведем настройку параметров отбора для полей зависящих от организации и подразделения контекста.
	Если Параметры.ИзмененныеРеквизиты.Свойство("ПодразделениеКомпании") Тогда
		
		ЗащищенныеФункцииСервер.РасставитьСвязиПараметровВыбораПоОрганизации(Форма, Объект);
		
	КонецЕсли;
	
	Если Параметры.Свойство("Штрихкод") И ЕстьРеквизит(Форма,"Штрихкод") Тогда
		Если ЕстьРеквизит(Форма,"Штрихкод") Тогда
			Форма.Штрихкод = Параметры.Штрихкод;
		Иначе
			СлужебныеРеквизиты = Новый Структура();
			СлужебныеРеквизиты.Вставить("Штрихкод",Параметры.Штрихкод);
			УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(Форма, СлужебныеРеквизиты);
		КонецЕсли;
	КонецЕсли;
	
	// Формируем новый текст для поля представления расширенных параметров документа
	Если НЕ Форма.Элементы.Найти("ПараметрыДокумента") = Неопределено Тогда
		Форма.ПараметрыДокумента = ""+?(ЗначениеЗаполнено(Объект.Организация), Строка(Объект.Организация)+"; ", "") + ?(ЗначениеЗаполнено(Объект.ПодразделениеКомпании), Строка(Объект.ПодразделениеКомпании)+"; ", "") + Строка(Объект.Автор);
	КонецЕсли;
	
	// Установим модифицированность формы
	Форма.Модифицированность = Форма.Модифицированность ИЛИ (НЕ Параметры.ИзмененныеРеквизиты.Количество()=0);
	
КонецПроцедуры // ПараметрыДокументаПриИзменении()

// Заполним доступность колонки "Сумма Всего"
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  ИмяТабличнойЧасти - Строка - Имя таблицы, при редактировании которой возникло данное событие.
//  ИмяКолонки - Строка - имя колонки, содержащей сумму всего.
//  СуффиксКолонок - Строка - Префикс колонки, в которой содержится характеристика номенклатуры.
//
Процедура УстановитьДоступностьКолонкиСуммаВсего(Форма,
		Объект,
		ИмяТабличнойЧасти = "Товары",
		ИмяКолонки = "СуммаВсего",
		СуффиксКолонок="") Экспорт
	
	// Определим, имеет ли смысл давать возможность пользователю редактировать колонку сумма всего.
	Если ЕстьРеквизит(Форма, "РедактированиеЦенИСуммВНоменклатурныхТаблицах") Тогда
		РазрешитьРедактированиеЦенИСумм = Форма.РедактированиеЦенИСуммВНоменклатурныхТаблицах;
	Иначе
		РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	КонецЕсли;
	
	Если Объект.Свойство("СкидкаНаценка")
		 И НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти + ИмяКолонки + СуффиксКолонок) = Неопределено
		 И РазрешитьРедактированиеЦенИСумм И НЕ Форма.Элементы[ИмяТабличнойЧасти + ИмяКолонки + СуффиксКолонок].ТолькоПросмотр Тогда
		Форма.Элементы[ИмяТабличнойЧасти + ИмяКолонки + СуффиксКолонок].ТолькоПросмотр = 
			(НЕ Объект.СкидкаНаценка.Пустая())
				И (Объект.СкидкаНаценка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная);
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКолонкиСуммаВсего()

// Функция доступности суммы всего.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется формирование представления итогов.
//  ИмяТабличнойЧасти - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  ИмяКолонки        - Строка               - Имя колонки, содержащей сумму всего.
//  СуффиксКолонок    - Строка               - Префикс колонки, в которой содержится характеристика номенклатуры.
// 
// Возвращаемое значение:
//  Булево - Признак доступности колонки "Сумма всего".
//
Функция УстановитьДоступностьСуммыВсего(Объект, ИмяТабличнойЧасти = "Товары", ИмяКолонки = "СуммаВсего", СуффиксКолонок="") Экспорт
	
	Если Объект.Свойство("СкидкаНаценка")
		 И ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект) Тогда
		Возврат (НЕ Объект.СкидкаНаценка.Пустая()) И (Объект.СкидкаНаценка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // УстановитьДоступностьСуммыВсего()

// Функция получения реквизитов объекта по умолчанию для события "При окончании редактирования".
//
// Параметры:
//  СоставРеквизитов - Структура - структура реквизитов для события "При окончании редактирования".
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую.
//
Функция ПолучитьРеквизитыПоУмолчаниюСобытияПриОкончанииРедактирования(СоставРеквизитов) Экспорт
	
	Если СоставРеквизитов = Неопределено Тогда
		
		Возврат "_ИтогиОперации,СуммаДокумента,ВалютаДокумента,КурсДокумента,Карточка,СкидкаНаценка,СкидкаНаценка.СпособВычисления,ЗначениеСкидкиНаценки";
		
	КонецЕсли;
	
	Возврат СоставРеквизитов;
	
КонецФункции // ПолучитьРеквизитыПоУмолчаниюСобытияПриОкончанииРедактирования()

// Устарела. Будет удалена
// Общий обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма, в которой возникло событие.
//  Параметры			 - Структура		 - Содержит коллекцию параметров формы.
//  Отказ				 - Булево			 - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево			 - В данный параметр передается признак выполнения системной обработки события.
//  ПараметрыДействия	 - Структура		 - Параметры действий.
//  Объект				 - Объект			 - Альтернативный объект.
// 
// Возвращаемое значение:
//  Булево - Признак успешного завершения.
//
Функция ПриСозданииНаСервере(Форма,
		Параметры,
		Отказ,
		СтандартнаяОбработка,
		ПараметрыДействия = Неопределено,
		Объект = Неопределено) Экспорт
	
	// TODO: Разобрать	
	Возврат Ложь;
	
	// Заполнение объекта могло завершиться отказом, проверим установленный признак
	Если НЕ УправлениеДиалогомСервер.ПроверитьВозможностьОткрытияФормыОбъекта(Форма, Отказ) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Проверим тек объект
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Если были при открытии в форму были переданные данные основного объекта, произведем их установку.
	Если Параметры.ЗначенияЗаполнения.Свойство("КопироватьДанныеФормы") Тогда
		КопироватьДанныеФормы(Параметры.ЗначенияЗаполнения.КопироватьДанныеФормы, Объект);
	КонецЕсли;
	
	// Произведем инициализацию служебных реквизитов формы
	ИнициализироватьСлужебныеРеквизиты(Форма, Объект);
	
	// Произведем инициализацию пунктов меню выбора хозяйственной операции
	ЗащищенныеФункцииСервер.ИнициализироватьМенюВыбораХозОперации(Форма, Объект);
	
	// Настроим состав и параметры отображения командной панели формы
	ИнициализироватьКомандыПанелиДействий(Форма, Объект);
	
	// Произведем настройку параметров отбора для полей зависящих от организации и подразделения контекста.
	ЗащищенныеФункцииСервер.РасставитьСвязиПараметровВыбораПоОрганизации(Форма, Объект);
	
	// По умолчанию панель параметров документа должна быть скрыта
	Форма.Элементы.ПараметрыДокумента.Видимость = ЛОЖЬ;
	Форма.Элементы.НомерДата         .Видимость = ЛОЖЬ;
	
	// Установка предопределенных параметров выбора для реквизита "Контрагент"
	Если ЕстьРеквизит(Объект, "Контрагент") И (НЕ Форма.Элементы.Найти("Контрагент")=Неопределено) Тогда
		ВидыКонтрагентов = Справочники.Контрагенты.ПолучитьВидыКонтрагентов();
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Форма.Элементы.Контрагент.ПараметрыВыбора, "Отбор.ВидКонтрагента", ВидыКонтрагентов);
	КонецЕсли;
	
	// Инициализируем элементы формы связанные с дополнительными реквизитами
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ДополнительныеДействия");
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, ДополнительныеПараметры);
	
	// Инициализируем элементы формы связанные с контактной информацией
	Если ЕстьРеквизит(Объект,, "КонтактнаяИнформация") Тогда
		УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(
			Форма, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	КонецЕсли;
	
	// Проверим возможность штрихкодирования и получим штрихкод
	ШтрихкодированиеВызовСервера.ПрочитатьШтрихкодДокумента(Форма, Объект);
	
	// Добавим команды заполнения объекта
	ЗащищенныеФункцииСервер.ИнициализироватьКомандыЗаполнения(Форма, Объект);
	
	// Установим вариант отображения дополнительных полей "Код" и "Артикул"
	УстановитьВидимостьКолонокКодАртикул(Форма, "Товары");
	
	// Альфа Установим вариант отображения дополнительного поля "Производитель"
	УстановитьВидимостьКолонкиПроизводитель(Форма, "Товары");
	
	// Установим вариант отображения цен и сумм
	ЗащищенныеФункцииСервер.УстановитьДоступностьКолонокЦенИСумм(Форма, "Товары",,Объект);
	
	// Произведем адаптацию видимости колонок Количество и Количество (базовое)
	УстановитьВидимостьКолонкиКоличествоБазовое(Форма,, Объект);
	
	// Стандартные подсистемы - Версионирование объектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	
	// Обновим колонку Цена Базовая
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБазовоеКоличество") И ЕстьРеквизит(Объект,"ЦенаБазовая","Товары") Тогда
		ОбработкаТабличнойЧастиТовары.ЗаполнитьРеквизитЦенаБазовая(Объект);
	КонецЕсли;
	
	// Дальнейшие операции выполняются только для новых документов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	// Обновим колонку владельцев характеристик и единиц измерения
	Если ЕстьРеквизит(Объект,, "Товары") Тогда
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Товары);
	КонецЕсли;
	
	
	// Произведем заполнение служебного реквизита "Остаток"
	ОтображатьОстаток = (ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюОстатковТовара")
		И (ЕстьРеквизит(Объект, "ОстатокНаСкладе", "Товары") ИЛИ ЕстьРеквизит(Объект, "ОстатокНаОрдерномСкладе", "Товары")));
	
	// Установим видимость колонки служебного реквизита "Остаток"
	Если НЕ Форма.Элементы.Найти("ТоварыОстатокНаСкладе")=Неопределено Тогда
		Форма.Элементы.ТоварыОстатокНаСкладе.Видимость = ОтображатьОстаток;
	КонецЕсли;
	
	// Проверим наличие "Остатка на складе" в табличной части
	Если ОтображатьОстаток Тогда
		ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект,, ПараметрыДействия);
	КонецЕсли;
	
	// Покажем колонку "Характеристика", если имеются товары с ведением учета по характеристикам.
	Если ЕстьРеквизит(Объект, , "Товары")
		И (НЕ Форма.Элементы.Найти("ТоварыХарактеристикаНоменклатуры") = Неопределено) Тогда
		
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(Форма,,, Объект);
		
	КонецЕсли;
	
	// Покажем колонку "Коды маркировки", если имеются товары с ведением учета по маркировке.
	Если ЕстьРеквизит(Объект, , "Товары")
		И (НЕ Форма.Элементы.Найти("ТоварыГруппаКодыМаркировки") = Неопределено) Тогда
		
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиКодыМаркировки(Форма,,, Объект);
		ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект,, ПараметрыДействия);
		
	КонецЕсли;
	
	// Пока
	
	// подключаемые команды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма, Неопределено);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПриСозданииНаСервере()

// Устарела. Будет удалена
// Общий обработчик события возникающего на клиенте при выборе объекта без привязки к элементу в контексте сервера.
//
// Параметры:
//  Форма             - УправляемаяФорма - Форма, в которой возникло событие.
//  ВыбранноеЗначение - Произвольный     - Результат выбора в подчиненной форме.
//  ПараметрыДействия - Структура        - Параметры действий.
//  Объект            - Объект           - Альтернативный объект.
//	ИмяТабличнойЧасти - Строка			 - Имя табличной части.
// 
// Возвращаемое значение:
//  Булево - Признак дальнейшей обработки выбора.
//
Функция ОбработкаВыбора(Форма,
	ВыбранноеЗначение,
	ПараметрыДействия = Неопределено,
	Объект = Неопределено,
	ИмяТабличнойЧасти = "Товары") Экспорт
	
	// Проверим тек объект
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Объект") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение.Объект) = Тип("СправочникСсылка.Карточки") Тогда
			
			Если
				Форма.ТолькоПросмотр
				ИЛИ (НЕ Форма.Элементы.Найти("Карточка") = Неопределено
					И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекНаОплату"))
			Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Объект.Карточка = ВыбранноеЗначение.Объект;
			
			// Вызываем обработчик изменения данных объекта
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			МенеджерОбъекта.КарточкаПриИзменении(Объект, ПараметрыДействия);
		
		ИначеЕсли ТипЗнч(ВыбранноеЗначение.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если Форма.ТолькоПросмотр ИЛИ Форма.Элементы[ИмяТабличнойЧасти].ТолькоПросмотр Тогда
				Возврат Ложь;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Номенклатура", ВыбранноеЗначение.Объект);
			Если ВыбранноеЗначение.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(ВыбранноеЗначение.ЕдиницаИзмерения) Тогда
				СтруктураПоиска.Вставить("ЕдиницаИзмерения", ВыбранноеЗначение.ЕдиницаИзмерения);
			КонецЕсли;
			Если ВыбранноеЗначение.Свойство("ХарактеристикаНоменклатуры")
				И ЗначениеЗаполнено(ВыбранноеЗначение.ХарактеристикаНоменклатуры) Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ВыбранноеЗначение.ХарактеристикаНоменклатуры);
			КонецЕсли;
			// для ЗаказНаряда и пр
			Если ПараметрыДействия <> Неопределено
				И ПараметрыДействия.Свойство("ИдентификаторПричиныОбращения")
				И ЗначениеЗаполнено(ПараметрыДействия.ИдентификаторПричиныОбращения) Тогда
				СтруктураПоиска.Вставить("ИдентификаторПричиныОбращения", ПараметрыДействия.ИдентификаторПричиныОбращения);
			КонецЕсли;
			Количество = 1;
			Если ВыбранноеЗначение.Свойство("Вес") И ВыбранноеЗначение.Вес > 0 Тогда
				Количество = ВыбранноеЗначение.Вес;
			КонецЕсли;
			ИмяРеквизитаКоличество = Неопределено;
			Если ПараметрыДействия <> Неопределено Тогда
				ПараметрыДействия.Свойство("ИмяРеквизитаКоличество", ИмяРеквизитаКоличество);
			КонецЕсли;
			Если ИмяРеквизитаКоличество = Неопределено Тогда
				ИмяРеквизитаКоличество = "Количество";
			КонецЕсли;
			
			МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
				СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение.Объект;
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				Выполнить("МенеджерОбъекта."
					+ ИмяТабличнойЧасти
					+ "НоменклатураПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыДействия)"
				);
				СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] = Количество;
				Выполнить("МенеджерОбъекта."
					+ ИмяТабличнойЧасти
					+ ИмяРеквизитаКоличество
					+ "ПриИзменении(Объект, СтрокаТабличнойЧасти)"
				);
				
			Иначе
				СтрокаТабличнойЧасти = МассивСтрокТЧ[0];
				СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] = СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] + Количество;
				Выполнить("МенеджерОбъекта."
					+ ИмяТабличнойЧасти
					+ ИмяРеквизитаКоличество
					+ "ПриИзменении(Объект, СтрокаТабличнойЧасти)"
				);
			КонецЕсли;
			
			// обновим данные документа
			Попытка
				ИтогиОперации = МенеджерОбъекта.РассчитатьИтогиОперации(Объект);
				ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);
			Исключение
				ПричинаОшибки = ИнформацияОбОшибке();
			КонецПопытки;
			
			// Необходимо показать колонку Характеристик, если выбран товар с характеристиками.
			НоменклатураПриИзменении(Форма, СтрокаТабличнойЧасти);
			
			Если ЕстьРеквизит(Объект, "КодыМаркировки") И ВыбранноеЗначение.Свойство("КодМаркировки")
				И НЕ ПустаяСтрока(ВыбранноеЗначение.КодМаркировки) Тогда
				НоваяСтрока = Объект.КодыМаркировки.Добавить();
				НоваяСтрока.КодМаркировки = ВыбранноеЗначение.КодМаркировки;
				НоваяСтрока.ИдентификаторТовара = СтрокаТабличнойЧасти.ИдентификаторТовара;
				
				Если ЕстьРеквизит(Объект, "Подтверждено", "КодыМаркировки") Тогда
					НоваяСтрока.Подтверждено = Истина;
				КонецЕсли;
				
				ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(
					Объект,
					СтрокаТабличнойЧасти,
					ПараметрыДействия,
					ИмяТабличнойЧасти);
			КонецЕсли;
			
			Идентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяТабличнойЧасти,
				"ТекущаяСтрока",
				Идентификатор
			);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыДействия.Свойство("НовыйШтрихкод") Тогда
		
		Если Форма.ТолькоПросмотр Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Форма.Штрихкод = ПараметрыДействия.НовыйШтрихкод;
		ОбщегоНазначения.СообщитьПользователю(
			ШтрихкодированиеВызовСервера.СформироватьСообщениеШтрихкодУстановлен(Форма.Штрихкод, Объект.Ссылка)
		);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаВыбора()

// Устарела. Будет удалена
// Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  Форма             - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяСобытия        - Строка    - Имя, идентифицирующее событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//  Объект            - Объект    - Альтернативный объект.
// 
// Возвращаемое значение:
//  Булево - Признак дальнейшей обработки оповещения.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, ПараметрыДействия=Неопределено, Объект=Неопределено) Экспорт
	
	// Проверим тек объект
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Обработаем в зависимости от 
	Если ПараметрыДействия.Свойство("ШтрихКод") Тогда
		
		Если ПараметрыДействия.ШтрихКод = "" Тогда
			Возврат Истина;
		КонецЕсли;
		
		// поиск объектов по штрихкоду
		ОбъектыПоШтрихкоду = ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(ПараметрыДействия.ШтрихКод,,Истина);
		
		Если ОбъектыПоШтрихкоду.Количество() = 0 Тогда
			СтруктураМаркировки = МаркировкаТоваровСервер.РазобратьШтриховойКодТовара(ПараметрыДействия.ШтрихКод);
			Если МаркировкаТоваровКлиентСервер.ЭтоКодТовараВФорматеDataMatrixGS1(
					ПараметрыДействия.ШтрихКод,
					СтруктураМаркировки) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Не найдена номенклатура по считанному коду %1 с кодом маркировки:'"),
						СтруктураМаркировки.EAN),
					Объект);
				ОбщегоНазначения.СообщитьПользователю(
					МаркировкаТоваровКлиентСервер.СформироватьКодМаркировки(СтруктураМаркировки, Истина),
					Объект);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Не найдена номенклатура по считанному коду: %1'"),ПараметрыДействия.ШтрихКод),
					Объект.Ссылка
				);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыДействия.Вставить("ОбъектыПоШтрихкоду",ОбъектыПоШтрихкоду);
		ШтрихкодированиеВызовСервера.ОбработкаОбъектовПоШтрихкоду(ПараметрыДействия);
		Форма.Модифицированность = Истина;
		
	ИначеЕсли ПараметрыДействия.Свойство("КодКарты") Тогда
		
		РезультатПоиска = ШтрихкодированиеВызовСервера.ПолучитьКарточкуПоКоду(ПараметрыДействия.КодКарты);
		
		Если РезультатПоиска=Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не найдена карточка по считанному коду: %1'"),ПараметрыДействия.КодКарты),
				Объект.Ссылка
			);
			Возврат ЛОЖЬ;
		КонецЕсли;
		
		ВыборКарты = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВыборКарты",  ЕстьРеквизит(Объект,  "Карточка"));
		
		Если ТипЗнч(РезультатПоиска)=Тип("СправочникСсылка.Карточки") И ВыборКарты Тогда
			ПараметрыДействия.Вставить("ВыбранноеЗначение", РезультатПоиска);
		ИначеЕсли ЗначениеЗаполнено(РезультатПоиска.Объект) Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(РезультатПоиска.Объект));
			ПараметрыДействия.Вставить("ИмяФормыСписка", ОбъектМетаданных.ПолноеИмя()+".ФормаСписка");
			ПараметрыДействия.Вставить("НайтиОбъект",    РезультатПоиска.Объект)
		КонецЕсли;
		
	Иначе
		
		// Вызываем соответствующий обработчик подсистемы управления свойствами.
		УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(Форма, Объект);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаОповещения()

// Устарела. Будет удалена
// Общий обработчик события возникающего на сервере при чтении данных объекта.
//
// Параметры:
//  Форма         - УправляемаяФорма - Форма, в которой возникло событие.
//  ТекущийОбъект - ДокументОбъект   - Объект, который будет прочитан.
//  ПараметрыДействия	 - Структура		 - Параметры действий.
//  Объект				 - Объект			 - Альтернативный объект.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПриЧтенииНаСервере(Форма, ТекущийОбъект, ПараметрыДействия=Неопределено, Объект=Неопределено) Экспорт
	
	// TODO: Разобрать
	Возврат Ложь;
	
	// Вызываем соответствующий обработчик подсистемы управления свойствами.
	УправлениеСвойствами.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	
	// Проверим тек объект
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Произведем восстановление версии объекта, если это требуется
	ВерсионированиеОбъектовПлатформа.ПриЧтенииНаСервере(Форма, Объект, ПараметрыДействия);
	
	// Произведем заполнение служебного реквизита "Остаток"
	ОтображатьОстаток       = (ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюОстатковТовара") И (ЕстьРеквизит(Объект, "ОстатокНаСкладе", "Товары") ИЛИ ЕстьРеквизит(Объект, "ОстатокНаОрдерномСкладе", "Товары")));
	
	// Произведем заполнение служебного реквизита "СуммаСписания"
	ОтображатьСуммуСписания = ЕстьРеквизит(Объект, "СуммаСписания", "Товары");
	
	// Заполнение суммы списания
	Если ОтображатьСуммуСписания Тогда
		ИмяРегистра = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяРегистра", "");
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныйРеквизитСуммаСписания(Объект, ИмяРегистра);
	КонецЕсли;
	
	// Обновим колонку владельцев характеристик и единиц измерения
	Если ЕстьРеквизит(Объект,, "Товары") Тогда
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Товары);
	КонецЕсли;
	
	// Установим видимость колонки служебного реквизита "Остаток"
	Если НЕ Форма.Элементы.Найти("ТоварыОстатокНаСкладе")=Неопределено Тогда
		Форма.Элементы.ТоварыОстатокНаСкладе.Видимость = ОтображатьОстаток;
	КонецЕсли;
	
	// Произведем заполнение служебного реквизита "Остаток"
	Если ОтображатьОстаток Тогда
		ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект,, ПараметрыДействия);
	КонецЕсли;
	
	// Покажем колонку "Характеристика", если имеются товары с ведением учета по характеристикам.
	Если ЕстьРеквизит(Объект,, "Товары") И (НЕ Форма.Элементы.Найти("ТоварыХарактеристикаНоменклатуры")=Неопределено) Тогда
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(Форма,,,Объект);
	КонецЕсли;
	
	// Покажем колонку "Коды маркировки", если имеются товары с ведением учета по маркировке.
	Если ЕстьРеквизит(Объект,, "Товары") И (НЕ Форма.Элементы.Найти("ТоварыГруппаКодыМаркировки") = Неопределено) Тогда
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиКодыМаркировки(Форма,,,Объект);
		ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект,, ПараметрыДействия);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПриЧтенииНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере перед записью объекта.
//
// Параметры:
//  Форма           - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ           - Булево           - Признак отказа от создания формы.
//  ТекущийОбъект   - ДокументОбъект   - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//  Объект				 - Объект			 - Альтернативный объект.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи,  Объект=Неопределено) Экспорт
	
	// Вызываем соответствующий обработчик подсистемы управления свойствами
	УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПередЗаписьюНаСервере()

// Устарела. Будет удалена
// Общий обработчик события возникающего на сервере после записи объекта и после завершения транзакции.
//
// Параметры:
//  Форма           - УправляемаяФорма - Форма, в которой возникло событие.
//  ТекущийОбъект   - ДокументОбъект   - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//  Объект				 - Объект			 - Альтернативный объект.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи,  Объект=Неопределено) Экспорт
	
	// Проверим тек объект
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Произведем заполнение служебного реквизита "Остаток"
	ОтображатьОстаток       = (ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюОстатковТовара") И (ЕстьРеквизит(Объект, "ОстатокНаСкладе", "Товары") ИЛИ ЕстьРеквизит(Объект, "ОстатокНаОрдерномСкладе", "Товары")));
	
	// Произведем заполнение служебного реквизита "СуммаСписания"
	ОтображатьСуммуСписания = ЕстьРеквизит(Объект, "СуммаСписания", "Товары");
	
	// Заполнение суммы списания
	Если ОтображатьСуммуСписания Тогда
		ИмяРегистра = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "ИмяРегистра", "");
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныйРеквизитСуммаСписания(Объект, ИмяРегистра);
	КонецЕсли;
	
	// Обновим колонку владельцев характеристик и единиц измерения
	Если ЕстьРеквизит(Объект,, "Товары") Тогда
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Товары);
	КонецЕсли;
	
	// Проверим наличие "ОстатокНаСкладе" в табличной части
	Если ОтображатьОстаток Тогда
		ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект, , ПараметрыЗаписи);
	КонецЕсли;
	
	// Покажем колонку "Характеристика", если имеются товары с ведением учета по характеристикам.
	Если ЕстьРеквизит(Объект,, "Товары") И (НЕ Форма.Элементы.Найти("ТоварыХарактеристикаНоменклатуры")=Неопределено) Тогда
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(Форма,,,Объект);
	КонецЕсли;
	
	// Покажем колонку "Коды маркировки", если имеются товары с ведением учета по маркировке.
	Если ЕстьРеквизит(Объект,, "Товары") И (НЕ Форма.Элементы.Найти("ТоварыГруппаКодыМаркировки") = Неопределено) Тогда
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиКодыМаркировки(Форма,,,Объект);
		ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект, , ПараметрыЗаписи);
	КонецЕсли;
	
	// Обновим колонку Цена Базовая
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБазовоеКоличество") И ЕстьРеквизит(Объект,"ЦенаБазовая","Товары") Тогда
		ОбработкаТабличнойЧастиТовары.ЗаполнитьРеквизитЦенаБазовая(Объект);
	КонецЕсли;
	
	// Выполним автоматическое штрихкодирование документов
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(Форма, Объект);
	
	УтверждениеДокументовСервер.УстановитьКартинкуТекущегоСтатусаДокумента(Форма, ТекущийОбъект);
	
	// Подсистема "ОбменСКонтрагентами".
	Если НЕ Форма.Элементы.Найти("ДекорацияСостояниеЭДО") = Неопределено Тогда
		ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
		ПараметрыПослеЗаписи.Форма = Форма;
		ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
		ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Форма.Элементы.ДекорацияСостояниеЭДО;
		ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Форма.Элементы.ГруппаСостояниеЭДО;
		
		ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	КонецЕсли;
	// Конец подсистема "ОбменСКонтрагентами".
	
	Если ЕстьРеквизит(Объект, "ПрослеживаемыйТовар", "Товары") Тогда
		УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "ПрослеживаемыйТовар", "Автомобили") Тогда
		ИменаРеквизитов = УчетПрослеживаемыхТоваровСервер
			.ИменаРеквизитовДляЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара();
		ИменаРеквизитов.ИмяТаблицы = "Автомобили";
		ИменаРеквизитов.ИмяРеквизита = "Автомобиль";
		УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект, , ИменаРеквизитов);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПослеЗаписиНаСервере()

// Устарела. Будет удалена
// Общий обработчик события возникающего на сервере при необходимости проверки заполнения реквизитов при записи в форме.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ                - Булево           - Признак отказа от создания формы.
//  ПроверяемыеРеквизиты - Массив           - Массив путей к реквизитам, для которых будет выполнена проверка.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	// Вызываем соответствующий обработчик подсистемы управления свойствами
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ОбработкаПроверкиЗаполнения()

// Устарела. Будет удалена.
// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраняемых реквизитов и настроек формы.
//  Объект				 - Объект			 - Альтернативный объект.
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Форма, Настройки, Объект=Неопределено) Экспорт
	
	// Производим сохранение параметров отображения панели параметров документа
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Форма.Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Общий обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраненных реквизитов и настроек формы.
//  Объект				 - Объект			 - Альтернативный объект.
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки, Объект=Неопределено) Экспорт
	
	// Проверим тек объект
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Покажем панель параметров документа если ранее была сохранена ее настройка отображения.
	Если Настройки.Получить("ПоказыватьПараметрыДокумента")=ИСТИНА Тогда
		Форма.Элементы.ПараметрыДокумента.Видимость = ИСТИНА;
		Форма.Элементы.НомерДата         .Видимость = ИСТИНА;
		Форма.ПараметрыДокумента = ""+?(ЗначениеЗаполнено(Объект.Организация), Строка(Объект.Организация)+"; ", "") + ?(ЗначениеЗаполнено(Объект.ПодразделениеКомпании), Строка(Объект.ПодразделениеКомпании)+"; ", "") + Строка(Объект.Автор);
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

// Общий обработчик события возникающего при выходе из режима редактирования строки.
//
// Параметры:
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  НоваяСтрока          - Булево               - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево               - Истина, если произошла отмена редактирования.
//  ИмяТабличнойЧасти    - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  СписокРеквизитов     - Строка               - Имена реквизитов, перечисленные через запятую, в формате
//                                                требований к свойствам структуры.
//                                                Например, "Код, Наименование, Родитель".
//                       - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                                                псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                                                значения (опционально) фактическое имя поля в таблице.
//                                                Если значение не определено, то имя поля берется из ключа.
//                       - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                                                к свойствам структуры.
//                                                Служебные поля для получения данных:
//                                                _ИтогиОпераций, _Константа, _Право.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов с префиксом "Представление".
//
Функция ПриОкончанииРедактирования(Знач Объект, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти="Товары", СписокРеквизитов=Неопределено) Экспорт
	
	// Уточним перечень получаемых реквизитов объекта
	СписокРеквизитов = ПолучитьРеквизитыПоУмолчаниюСобытияПриОкончанииРедактирования(СписокРеквизитов);
	
	// Не всегда объект Признак будет использоваться для определения необходимости 
	ВернутьИзмененныйОбъект = ЛОЖЬ;
	
	// Пересчет скидок требуется выполнить только в случае когда происходит событие отмены редактирования новой строки.
	Если НоваяСтрока И ОтменаРедактирования Тогда
		СкидкиНаценкиСервер.ПересчитатьСкидкиНаценки(Объект, ИмяТабличнойЧасти);
		ВернутьИзмененныйОбъект = ИСТИНА;
	КонецЕсли;
	
	// Получаем данные текущего объекта необходимые для дополнительной обработки события на клиенте/сервере.
	ВозвращаемыеДанные = УправлениеДиалогомСервер.ПолучитьДанныеОбъекта(Объект, СписокРеквизитов);
	
	// Получим текст надписи итогов операции по документу.
	Если ВозвращаемыеДанные.Свойство("_ИтогиОперации") Тогда
		
		ЭлементыСтроки = Новый Массив;
		ЭлементыСтроки.Добавить(НСтр("ru = 'Итого:'"));
		ЭлементыСтроки.Добавить(Формат(ВозвращаемыеДанные._ИтогиОперации.СуммаДокумента, "ЧДЦ=2; ЧН=0,00"));
		ЭлементыСтроки.Добавить(ВозвращаемыеДанные.ВалютаДокументаПредставление);
		ЭлементыСтроки.Добавить(СтрШаблон(НСтр("ru = '(%1)'"), Формат(ВозвращаемыеДанные.КурсДокумента, "ЧДЦ=4; ЧН=0,0000")));
		
		ВозвращаемыеДанные.Вставить("НадписьСуммаДокумента", Новый ФорматированнаяСтрока(СтрСоединить(ЭлементыСтроки, " ")));
		ВозвращаемыеДанные.Вставить("СуммаДокумента", ВозвращаемыеДанные._ИтогиОперации.СуммаДокумента);
		
	КонецЕсли;
	
	// Получим текст подвала колонки "Номенклатура".
	ВозвращаемыеДанные.Вставить("ТоварыНоменклатурыТекстПодвала", "");
	УстановитьНадписьПодвалаКолонкиНоменклатура(ВозвращаемыеДанные.ТоварыНоменклатурыТекстПодвала, Объект);
	
	// Установим доступность колонки "Сумма всего"
	ВозвращаемыеДанные.Вставить("ТоварыСуммаВсегоТолькоПросмотр", УстановитьДоступностьСуммыВсего(Объект));
	
	Если ВернутьИзмененныйОбъект Тогда
		ВозвращаемыеДанные.Вставить("_Объект", Объект);
	КонецЕсли;
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции // ПолучитьДанныеПриОкончанииРедактирования()

// Общий обработчик события возникающего после удаления строки.
//
// Параметры:
//  Форма				- УправляемаяФорма		- Форма, в которой возникло событие.
//  Элемент				- ТаблицаФормы			- Элемент управления, в котором возникло данное событие.
//  ПараметрыДействия	- Структура				- Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура	- Альтернативный объект.
//
Процедура ТоварыПослеУдаления(Форма, Элемент, ПараметрыДействия=Неопределено, Объект = Неопределено) Экспорт
	
	// Проверим тек объект
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Перезаполним скидки/наценки
	СкидкиНаценкиСервер.ПересчитатьСкидкиНаценки(Объект, Элемент.ПутьКДанным, ПараметрыДействия);
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(Форма, Объект);
	
	// Обновляем текст подвала в колонке Номенклатура
	Если ЕстьРеквизит(Форма, "ТоварыНоменклатурыТекстПодвала") Тогда
		УстановитьНадписьПодвалаКолонкиНоменклатура(Форма.ТоварыНоменклатурыТекстПодвала, Объект);
	КонецЕсли;
	
	// Установим доступность колонок
	УстановитьДоступностьКолонкиСуммаВсего(Форма, Форма.Объект);
	
КонецПроцедуры // ТоварыПослеУдаления()

// Общий обработчик события возникающего при получении представления объекта или ссылки.
//
// Параметры:
//  Источник             - ДокументМенеджер - Документ менеджер, для которого происходит формирование представления.
//  Данные               - Структура - Содержит значения полей, из которых формируется представление.
//  Представление        - Строка - Строка, в которую нужно поместить представление объекта или ссылки.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаПолученияПредставления(Источник, Данные, Представление, СтандартнаяОбработка=ИСТИНА) Экспорт
	
	УправлениеДиалогомКлиентСервер.ОбработкаПолученияПредставления(Источник,Данные,Представление, СтандартнаяОбработка);
	
КонецПроцедуры // ОбработкаПолученияПредставления()

// Получение шаблона чека.
//
// Параметры:
//  ОбщиеПараметры		 - Структура - Входные параметры чека.
//  ОписаниеОшибки		 - Строка	 - Описание ошибки шаблона чека.
//  ПараметрыПробития	 - Структура - Дополнительные параметры.
//
Процедура ПолучитьШаблонЧека(ОбщиеПараметры, ОписаниеОшибки, ПараметрыПробития) Экспорт
	
	// Определим вид выписки (расход/приход) и если указаны возвраты, то возврат
	Объект = ПараметрыПробития.Объект;
	
	Сделка = ?(ЕстьРеквизит(Объект,"Сделка"),Объект.Сделка,Неопределено);
	
	ОбщиеПараметры.ТипРасчета = ТипРасчетаЧека(Объект);
	
	// Настройка отправки электронного чека
	УстановитьПривилегированныйРежим(Истина);
	ОбщиеПараметры.Отправляет1СSMS = Не Константы.ОтправлятьЭлектронныеЧекиПоSMSЧерезОФД.Получить()
		И ЗначениеЗаполнено(ОбщиеПараметры.ПокупательНомер);
	ОбщиеПараметры.Отправляет1СEmail = Не Константы.ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД.Получить()
		И ЗначениеЗаполнено(ОбщиеПараметры.ПокупательEmail);
	ОбщиеПараметры.Электронно =
		Константы.НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателю.Получить()
		И (ЗначениеЗаполнено(ОбщиеПараметры.ПокупательНомер) Или ЗначениеЗаполнено(ОбщиеПараметры.ПокупательEmail));
	УстановитьПривилегированныйРежим(Ложь);
	
	// Данные покупателя
	ФормаСобственности = ?(
		ЕстьРеквизит(Объект,"Контрагент"),
		Объект.Контрагент.ФормаСобственности,
		Перечисления.ФормыСобственности.ПустаяСсылка()
	);
	
	Если
		ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
		Или ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель
	Тогда
		
		ПаспортныеДанные = "";
		
		Если
			ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель
			Или ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПодтверждающиеДокументы.Серия КАК Серия,
			|	ПодтверждающиеДокументы.Номер КАК Номер
			|ИЗ
			|	Справочник.ПодтверждающиеДокументы КАК ПодтверждающиеДокументы
			|ГДЕ
			|	ПодтверждающиеДокументы.Владелец = &Владелец
			|	И ПодтверждающиеДокументы.КодВидаДокументаУдостоверяющегоЛичность <> 0
			|	И ПодтверждающиеДокументы.Текущий = ИСТИНА";
			Запрос.УстановитьПараметр("Владелец",Объект.Контрагент);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ОбщиеПараметры.ЕстьПерсональныеДанные = Истина;
				ОбщиеПараметры.ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ПаспортныеДанные;
				ПаспортныеДанные =  Выборка.Серия + " " + Выборка.Номер;
			КонецЕсли;
		КонецЕсли;
		
		ОбщиеПараметры.Получатель = Объект.Контрагент.НаименованиеПолное + " " + ПаспортныеДанные;
		Если ЗначениеЗаполнено(Объект.Контрагент.ИНН) Тогда
			ОбщиеПараметры.ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ИНН;
			ОбщиеПараметры.ПолучательИНН = Объект.Контрагент.ИНН;
			Если ОбщиеПараметры.СведенияОПокупателе.Свойство("ПокупательИНН") Тогда
				ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН = ОбщиеПараметры.ПолучательИНН;
			КонецЕсли;
		КонецЕсли;
		
		КонтрагентЮрЛицо =
			(ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
			ИЛИ ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
		
		Если НЕ КонтрагентЮрЛицо И НЕ ЗначениеЗаполнено(ОбщиеПараметры.ПолучательИНН)
			И ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ПараметрыПробития.ФР)
			И НЕ ЗначениеЗаполнено(Объект.Контрагент.ДатаРождения) Тогда
			ТекстОшибкиКонтрагента = НСтр("ru = 'Перед пробитием контрагенту необходимо заполнить ИНН или дату рождения'");
			ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки),ОписаниеОшибки+Символы.ПС,ТекстОшибкиКонтрагента);
		КонецЕсли;
		
		Если ОбщиеПараметры.СведенияОПокупателе.Свойство("Покупатель")
			И (ЗначениеЗаполнено(ОбщиеПараметры.ПолучательИНН)
			ИЛИ (ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
			И ЗначениеЗаполнено(Объект.Контрагент.ДатаРождения))) Тогда
			ОбщиеПараметры.СведенияОПокупателе.Покупатель = ОбщиеПараметры.Получатель;
		Иначе
			ОбщиеПараметры.Получатель = "";
		КонецЕсли;
		
		Если ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			ОбщиеПараметры.СубъектПерсональныхДанных = Объект.Контрагент;
		КонецЕсли;
		
		Если КонтрагентЮрЛицо И ЗначениеЗаполнено(ОбщиеПараметры.ПолучательИНН)
			И ЕстьРеквизит(Объект, "АдресПокупателя") И ОбщиеПараметры.СведенияОПокупателе.Свойство("ПокупательАдрес") Тогда
			ОбщиеПараметры.СведенияОПокупателе.ПокупательАдрес = Объект.АдресПокупателя;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определеним СНО 
	СтруктураОрганизация = Новый Структура;
	ОрганизацияОбъекта = Неопределено;
	ПодразделениеКомпанииОбъекта = Неопределено;
	СкладКомпанииОбъекта = Неопределено;
	
	Если ЕстьРеквизитНаКлиенте(ПараметрыПробития.Объект, "Организация") Тогда
		ОрганизацияОбъекта = ПараметрыПробития.Объект.Организация;
	КонецЕсли;
	
	Если ЕстьРеквизитНаКлиенте(ПараметрыПробития.Объект, "ПодразделениеКомпании") Тогда
		ПодразделениеКомпанииОбъекта = ПараметрыПробития.Объект.ПодразделениеКомпании;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПробития.Объект.Ссылка) = Тип("ДокументСсылка.Чек") Тогда
		СкладКомпанииОбъекта = ПараметрыПробития.Объект.СкладКомпании;
	КонецЕсли;
	
	Дата = ?(ЕстьРеквизит(ПараметрыПробития.Объект, "Дата"), ПараметрыПробития.Объект.Дата, Неопределено);
	
	СтруктураОрганизация = ПолучитьПараметрыОрганизации(
		ОрганизацияОбъекта,
		ПодразделениеКомпанииОбъекта,
		СкладКомпанииОбъекта,
		Дата);
		
	// Параметры необходимые для чека ЕНВД на принтере чеков
	Если СтруктураОрганизация.Свойство("НаименованиеПолное") Тогда
		ОбщиеПараметры.ОрганизацияНазвание = СтруктураОрганизация.НаименованиеПолное;
	КонецЕсли;
	Если СтруктураОрганизация.Свойство("ИНН") Тогда
		ОбщиеПараметры.ОрганизацияИНН = СтруктураОрганизация.ИНН;
	КонецЕсли;
	Если СтруктураОрганизация.Свойство("КПП") Тогда
		ОбщиеПараметры.ОрганизацияКПП = СтруктураОрганизация.КПП;
	КонецЕсли;
	
	ДокументыОплаты = Новый Массив;
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.ЧекНаОплату"));
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.Чек"));
	ДокументыОплаты.Добавить(Тип("ДокументСсылка.Выписка"));
	
	Если СтруктураОрганизация.Свойство("СистемаНалогообложения") И НЕ ДокументыОплаты.Найти(ТипЗнч(Объект.Ссылка)) = Неопределено Тогда
		
		Если ЕстьРеквизитНаКлиенте(ПараметрыПробития.Объект, "Патент") И ЗначениеЗаполнено(ПараметрыПробития.Объект.Патент) Тогда
			
			ОбщиеПараметры.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент");
			
		Иначе
			
			ОбщиеПараметры.СистемаНалогообложения = ПолучитьСистемуНалогообложенияККТПриПатенте(ОрганизацияОбъекта, Дата);
			
		КонецЕсли;
		
	Иначе
		
		ОбщиеПараметры.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН");
		
	КонецЕсли;

	// Формирование табличной части
	ТекстОшибки = "";
	ЗаполнитьТовары(ТекстОшибки, Объект, ОбщиеПараметры, ПараметрыПробития.ФР);
	
	ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки),ОписаниеОшибки+Символы.ПС,ТекстОшибки);
		
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры, ПараметрыПробития.ФР);
	
	// Формирование таблицы оплат
	ТекстОшибки = "";
	ЗаполнитьОплаты(ТекстОшибки, ПараметрыПробития.Объект, ОбщиеПараметры.ТаблицаОплат, ЕстьРеквизитНаКлиенте(ПараметрыПробития.Объект, "Оплаты"));
	ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки),ОписаниеОшибки+Символы.ПС,ТекстОшибки);
	
КонецПроцедуры

// Получение шаблона чека.
//
// Параметры:
//  ОбщиеПараметры		 - Структура - Входные параметры чека.
//  ОписаниеОшибки		 - Строка	 - Описание ошибки шаблона чека.
//  ПараметрыПробития	 - Структура - Дополнительные параметры.
//
Процедура ПолучитьШаблонЧекаКоррекции(ОбщиеПараметры, ОписаниеОшибки, ПараметрыПробития) Экспорт
	
	// Определим вид выписки (расход/приход) и если указаны возвраты, то возврат
	Объект = ПараметрыПробития.Объект;
	
	Сделка = ?(ЕстьРеквизит(Объект, "Сделка"), Объект.Сделка, Неопределено);
	
	ОбщиеПараметры.ТипРасчета = Объект.ТипРасчета;
	
	// Настройка отправки электронного чека
	ОбщиеПараметры.Отправляет1СSMS = 
		НЕ Константы.ОтправлятьЭлектронныеЧекиПоSMSЧерезОФД.Получить() И ЗначениеЗаполнено(ОбщиеПараметры.ПокупательНомер);
	ОбщиеПараметры.Отправляет1СEmail =
		НЕ Константы.ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД.Получить() И ЗначениеЗаполнено(ОбщиеПараметры.ПокупательEmail);
	ОбщиеПараметры.Электронно =
		Константы.НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателю.Получить()
		И (ЗначениеЗаполнено(ОбщиеПараметры.ПокупательНомер) ИЛИ ЗначениеЗаполнено(ОбщиеПараметры.ПокупательEmail));
	
	// Данные покупателя
	ФормаСобственности = Объект.Контрагент.ФормаСобственности;
	Если (ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
			ИЛИ ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель) Тогда
		ПаспортныеДанные = "";
		Если ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель
			ИЛИ ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПодтверждающиеДокументы.Серия КАК Серия,
			|	ПодтверждающиеДокументы.Номер КАК Номер
			|ИЗ
			|	Справочник.ПодтверждающиеДокументы КАК ПодтверждающиеДокументы
			|ГДЕ
			|	ПодтверждающиеДокументы.Владелец = &Владелец
			|	И ПодтверждающиеДокументы.КодВидаДокументаУдостоверяющегоЛичность <> 0
			|	И ПодтверждающиеДокументы.Текущий = ИСТИНА";
			Запрос.УстановитьПараметр("Владелец",Объект.Контрагент);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ОбщиеПараметры.ЕстьПерсональныеДанные = Истина;
				ОбщиеПараметры.ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ПаспортныеДанные;
				ПаспортныеДанные =  Выборка.Серия + " " + Выборка.Номер;
			КонецЕсли;
		КонецЕсли;
		
		ОбщиеПараметры.Получатель = Объект.Контрагент.НаименованиеПолное + " " + ПаспортныеДанные;
		Если ЗначениеЗаполнено(Объект.Контрагент.ИНН) Тогда
			ОбщиеПараметры.ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ИНН;
			ОбщиеПараметры.ПолучательИНН = Объект.Контрагент.ИНН;
			Если ОбщиеПараметры.СведенияОПокупателе.Свойство("ПокупательИНН") Тогда
				ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН = ОбщиеПараметры.ПолучательИНН;
			КонецЕсли;
		КонецЕсли;
		
		КонтрагентЮрЛицо = ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
			ИЛИ ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
		
		Если НЕ КонтрагентЮрЛицо
			И НЕ ЗначениеЗаполнено(ОбщиеПараметры.ПолучательИНН)
			И ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ПараметрыПробития.ФР)
			И НЕ ЗначениеЗаполнено(Объект.Контрагент.ДатаРождения) Тогда
			ТекстОшибкиКонтрагента = НСтр("ru = 'Перед пробитием контрагенту необходимо заполнить ИНН или дату рождения'");
			ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки), ОписаниеОшибки + Символы.ПС, ТекстОшибкиКонтрагента);
		КонецЕсли;
		
		Если ОбщиеПараметры.СведенияОПокупателе.Свойство("Покупатель")
			И (ЗначениеЗаполнено(ОбщиеПараметры.ПолучательИНН)
			ИЛИ (ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
			И ЗначениеЗаполнено(Объект.Контрагент.ДатаРождения))) Тогда
			ОбщиеПараметры.СведенияОПокупателе.Покупатель = ОбщиеПараметры.Получатель;
		Иначе
			ОбщиеПараметры.Получатель = "";
		КонецЕсли;
		
		Если ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			ОбщиеПараметры.СубъектПерсональныхДанных = Объект.Контрагент;
		КонецЕсли;
		
		Если КонтрагентЮрЛицо И ЗначениеЗаполнено(ОбщиеПараметры.ПолучательИНН)
			И ЕстьРеквизит(Объект, "АдресПокупателя") И ОбщиеПараметры.СведенияОПокупателе.Свойство("ПокупательАдрес") Тогда
			ОбщиеПараметры.СведенияОПокупателе.ПокупательАдрес = Объект.АдресПокупателя;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определеним СНО 
	СтруктураОрганизация = Новый Структура;
	ОрганизацияОбъекта = Неопределено;
	ПодразделениеКомпанииОбъекта = Неопределено;
	СкладКомпанииОбъекта = Неопределено;
	
	ОрганизацияОбъекта = Объект.Организация;
	ПодразделениеКомпанииОбъекта = Объект.ПодразделениеКомпании;
	
	Если ТипЗнч(ПараметрыПробития.Объект.Ссылка) = Тип("ДокументСсылка.Чек") Тогда
		СкладКомпанииОбъекта = ПараметрыПробития.Объект.СкладКомпании;
	КонецЕсли;
	
	СтруктураОрганизация = ПолучитьПараметрыОрганизации(
		Объект.Организация,
		Объект.ПодразделениеКомпании,
		Неопределено,
		Объект.Дата
	);
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	Если СтруктураОрганизация.Свойство("НаименованиеПолное") Тогда
		ОбщиеПараметры.ОрганизацияНазвание = СтруктураОрганизация.НаименованиеПолное;
	КонецЕсли;
	Если СтруктураОрганизация.Свойство("ИНН") Тогда
		ОбщиеПараметры.ОрганизацияИНН = СтруктураОрганизация.ИНН;
	КонецЕсли;
	Если СтруктураОрганизация.Свойство("КПП") Тогда
		ОбщиеПараметры.ОрганизацияКПП = СтруктураОрганизация.КПП;
	КонецЕсли;
	
	// Заполним данные коррекции
	ЗаполнитьДанныеКоррекции(ОбщиеПараметры.ДанныеКоррекции, Объект);
	
	ОбщиеПараметры.Вставить("СформироватьЧекКоррекции", Истина);
	ОбщиеПараметры.СформироватьЧекКоррекцииСторно = Ложь;
	ОбщиеПараметры.НеприменениеККТ = НЕ ЗначениеЗаполнено(ОбщиеПараметры.ДополнительныйРеквизит);
	
	Если Не ОбщиеПараметры.НеприменениеККТ Тогда
		ОбщиеПараметры.КорректируемыйДокумент = Объект.ДокументОснование;
	КонецЕсли;
	
	Если СтруктураОрганизация.Свойство("СистемаНалогообложения") Тогда
		
		Если ЕстьРеквизит(Объект, "Патент") И ЗначениеЗаполнено(Объект.Патент) Тогда
			
			ОбщиеПараметры.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент");
			
		Иначе
			
			ОбщиеПараметры.СистемаНалогообложения = ПолучитьСистемуНалогообложенияККТПриПатенте(ОрганизацияОбъекта, Объект.Дата);
			
		КонецЕсли;
		
	Иначе
		
		ОбщиеПараметры.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН");
		
	КонецЕсли;
	
	// Формирование табличной части
	ТекстОшибки = "";
	ЗаполнитьТовары(ТекстОшибки, Объект, ОбщиеПараметры, ПараметрыПробития.ФР);
	
	ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки), ОписаниеОшибки + Символы.ПС, ТекстОшибки);
	
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры, ПараметрыПробития.ФР);
	
	// Формирование таблицы оплат
	ТекстОшибки = "";
	ЗаполнитьОплаты(ТекстОшибки, Объект, ОбщиеПараметры.ТаблицаОплат, Истина);
	ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки), ОписаниеОшибки + Символы.ПС, ТекстОшибки);
	
КонецПроцедуры

// Заполнение части оплаты чека.
//
// Параметры:
//  ТекстОшибки		 - Строка			 - Описание ошибки.
//  Объект			 - ДокументСсылка	 - Объект пробития чека.
//  ТаблицаОплат	 - ТаблицаЗначений	 - Таблица оплат по документу.
//  ЕстьТаблицаОплат - Булево			 - Передача таблицы оплат.
//
Процедура ЗаполнитьОплаты(ТекстОшибки, Объект, ТаблицаОплат, ЕстьТаблицаОплат = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСделок = Новый Массив;
	МассивСделок.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
	МассивСделок.Добавить(Тип("ДокументСсылка.РеализацияТоваров"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ПоступлениеАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.РеализацияАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ЗаказНаряд"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ИнвентаризацияАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ЗаказНаАвтомобиль"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ОтчетКомитентуЗаАвтомобили"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераЗаАвтомобили"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.РеализацияАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ПоступлениеАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль"));
	
	Если ЕстьТаблицаОплат Тогда
		
		Для Каждого Строка Из Объект.Оплаты Цикл
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Строка.ТипОплаты);
			СтрокаОплаты.Вставить("Сумма", Строка.Сумма);
			//@skip-check many-actual-parameters
			ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЦикла;
					
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки
		ИЛИ Объект.ХозОперация = Справочники.ХозОперации.РасходИзОперационнойКассы
		ИЛИ Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеВОперационнуюКассу Тогда
		СуммаВсехОплат = ?(Объект.СуммаДокумента>0,Объект.СуммаДокумента,-Объект.СуммаДокумента);
		
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Сумма", СуммаВсехОплат);
		//@skip-check many-actual-parameters
		ТаблицаОплат.Добавить(СтрокаОплаты);
		
	Иначе
		СуммаВсехОплат = Объект.СуммаДокумента;
		
		Если ЕстьРеквизит(Объект, "СуммаСкидкиНаценки") И (Объект.СуммаСкидкиНаценки > 0) Тогда
			СуммаВсехОплат = СуммаВсехОплат - Объект.СуммаСкидкиНаценки;
		КонецЕсли;
		
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Сумма", СуммаВсехОплат);
		//@skip-check many-actual-parameters
		ТаблицаОплат.Добавить(СтрокаОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу товаров документа для оплаты
//
// Параметры:
//  Объект - ДокументСсылка.Чек, ДокументСсылка.ЧекНаОплату, ДокументСсылка.ПриходныйКассовыйОрдер,
//           ДокументСсылка.РасходныйКассовыйОрдер, ДокументСсылка.Выписка - Ссылка на документ оплаты.
//  ВыводитьМежценовуюРазницу - ДокументСсылка - Ссылка на документ, по которому производится оплата.
//  ПараметрыДействия - Структура - Дополнительные параметры действия.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица номенклатуры документа Основания.
//
Функция ПодготовитьТаблицуТоваров(Объект, ВыводитьМежценовуюРазницу = Истина, ПараметрыДействия = Неопределено) Экспорт

	ТаблицаТоваров = ИнициализацияТаблицыТоваров();
	
	МассивСделок = СформироватьСписокСделок();
	
	АвтоЗаполнениеТоваров = Объект.Товары.Количество() = 0;
	ЗаполненСостав = ЕстьРеквизит(Объект, "Состав") И Объект.Состав.Количество() > 0;
	
	ДокументОснование = Неопределено;
	
	Если (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Выписка") ИЛИ ЗаполненСостав) И АвтоЗаполнениеТоваров Тогда
		
		ЕстьПередачаТовара = Истина;
		ОбщаяСуммаДокументов = 0;
		
		// Подготовим данные для получение номенклатуры по сделке
		СтрукутраСделки = Новый Структура("ДокументОснование,ВалютаДокумента,КурсДокумента,Дата");
		ЗаполнитьЗначенияСвойств(СтрукутраСделки, Объект, , "ДокументОснование");
		
		ТаблицаТоваровКопия =  ТаблицаТоваров.Скопировать();
		
		// Добавим строку для формирование без сделки
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.Предоплата;
		НоваяСтрока.ПризнакПредметаРасчета = НоваяСтрока.Номенклатура.ТипНоменклатуры.ПризнакПредметаРасчета; 
		НоваяСтрока.Цена = 0;
		ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, НоваяСтрока);
		НоваяСтрока.СтавкаНДС = Объект.СтавкаНДС;
		
		ЕстьДокументРасчетов = ЕстьРеквизит(Объект, "ДокументРасчетов", "Состав");
		
		Если ЕстьДокументРасчетов Тогда
			ТаблицаСделок = Объект.Состав.Выгрузить(, "ДокументРасчетов,Сумма");
			ТаблицаСделок.Колонки.Добавить("Сделка");
			ТаблицаСделок.Колонки.Добавить("СуммаПриход");
			ТаблицаСделок.Колонки.Добавить("СуммаРасход");
			ТаблицаСделок.ЗагрузитьКолонку(
				ТаблицаСделок.ВыгрузитьКолонку("ДокументРасчетов"),
				"Сделка");
			ТаблицаСделок.ЗагрузитьКолонку(
				ТаблицаСделок.ВыгрузитьКолонку("Сумма"),
				"СуммаПриход");
			ТаблицаСделок.ЗаполнитьЗначения(0, "СуммаРасход");
		Иначе
			ТаблицаСделок = Объект.Состав.Выгрузить(, "Сделка,СуммаПриход,СуммаРасход");
		КонецЕсли;
		ТаблицаСделок.Свернуть("Сделка", "СуммаПриход,СуммаРасход");
		ТаблицаСделок.Сортировать("Сделка");
		
		Для Каждого ТекущаяСтрока Из ТаблицаСделок Цикл
			СтрукутраСделки.ДокументОснование = ТекущаяСтрока.Сделка;
			ТабличнаяЧастьДокументаОснования = ПолучитьТабличнуюЧастьДокументаОснования(СтрукутраСделки);
			
			ЕстьПередачаТовара = ЕстьПередачаТовара И (ЗначениеЗаполнено(ТекущаяСтрока.Сделка) И НЕ МассивСделок.Найти(ТипЗнч(ТекущаяСтрока.Сделка)) = Неопределено);
			
			// Укажем сумму сделки как предоплата
			Если ТабличнаяЧастьДокументаОснования = Неопределено ИЛИ ТабличнаяЧастьДокументаОснования.Количество() = 0 Тогда
				ТаблицаТоваров[0].Цена = ТаблицаТоваров[0].Цена + (ТекущаяСтрока.СуммаПриход + ТекущаяСтрока.СуммаРасход);
				ОбщаяСуммаДокументов = ОбщаяСуммаДокументов + (ТекущаяСтрока.СуммаПриход + ТекущаяСтрока.СуммаРасход);  
			Иначе
				
				ОбщаяСуммаДокументов = ОбщаяСуммаДокументов + ТабличнаяЧастьДокументаОснования.Итог("СуммаВсего"); 
				
				ЕстьСебестоимостьАвтомобиля = ЕстьРеквизит(ТабличнаяЧастьДокументаОснования, "СебестоимостьАвтомобиля");
				ЕстьСуммаСкидкиБонусами     = ЕстьРеквизит(ТабличнаяЧастьДокументаОснования, "СуммаСкидкиБонусами");
				
				Для Каждого ТекущаяСтрокаТоваров Из ТабличнаяЧастьДокументаОснования Цикл
					НоваяСтрока = ТаблицаТоваровКопия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаТоваров);
					НоваяСтрока.Цена = ТекущаяСтрокаТоваров.Цена;
					НоваяСтрока.Сумма = ТекущаяСтрокаТоваров.Сумма;
					НоваяСтрока.СуммаНДС = ТекущаяСтрокаТоваров.СуммаНДС;
					НоваяСтрока.СуммаСкидки = ТекущаяСтрокаТоваров.СуммаСкидки;
					НоваяСтрока.СуммаВсего = ТекущаяСтрокаТоваров.СуммаВсего;
					НоваяСтрока.СуммаСкидкиСтроки = ТекущаяСтрокаТоваров.СуммаСкидкиСтроки;
					Если ЕстьСебестоимостьАвтомобиля Тогда
						НоваяСтрока.СебестоимостьАвтомобиля = ТекущаяСтрокаТоваров.СебестоимостьАвтомобиля;
					КонецЕсли;
					Если ЕстьСуммаСкидкиБонусами Тогда
						НоваяСтрока.СуммаСкидкиБонусами = ТекущаяСтрокаТоваров.СуммаСкидкиБонусами;
					КонецЕсли;
				КонецЦикла;
				
				// Распределим текущую сумму оплат на сделку
				Документы.ЧекНаОплату.ПроизвестиРаспределениеСуммыОплаты((ТекущаяСтрока.СуммаПриход + ТекущаяСтрока.СуммаРасход), ТаблицаТоваровКопия);
				
				// Перенесем в Товары
				Для Каждого ТекущаяСтрокаНоменклатуры Из ТаблицаТоваровКопия Цикл
					ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), ТекущаяСтрокаНоменклатуры,, "НомерСтроки");
				КонецЦикла;
				
				ТаблицаТоваровКопия.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;	
		
		// Избавимся от дублей
		ТаблицаТоваров.Свернуть(
			"НомерСтроки, Номенклатура,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,ХарактеристикаНоменклатуры,ДоговорВзаиморасчетов,ПризнакАгента,Наименование,Телефон,ИНН,ПризнакПредметаРасчета,НомерТаможеннойДекларации,ПроцентСкидки,ПроцентСкидкиСтроки,СкидкаНаТовар,КодСтраныПроисхожденияТовара,ГТД,"
			+ "ПолныйКодМаркировки,ГлобальныйИдентификаторТорговойЕдиницы,СерийныйНомер,ТипМаркировки,КодМаркировки,РеквизитКодаТовара,ЗначениеОтраслевогоРеквизита,ДатаДокументаОснования,НомерДокументаОснования",
			"Количество,Цена,Сумма,СуммаСкидкиСтроки,СуммаНДС,СуммаВсего,СуммаОплаты,СуммаСкидки,КоличествоБазовое,СуммаСкидкиБонусами,СебестоимостьАвтомобиля");
		
		// Проверим наличие предоплат
		Если ТаблицаТоваров[0].Цена = 0 ИЛИ ТаблицаТоваров.Количество() = 1 Тогда
			ТаблицаТоваров.Удалить(0);
			// Перезаполним нумерацию строк
			НомерСтроки = 1;
			Для Каждого ТекущаяСтрокаНоменклатуры Из ТаблицаТоваров Цикл
				ТекущаяСтрокаНоменклатуры.НомерСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
				ТекущаяСтрокаНоменклатуры.Цена = Окр(
					ТекущаяСтрокаНоменклатуры.Сумма
					/ ?(ТекущаяСтрокаНоменклатуры.Количество = 0, 1, ТекущаяСтрокаНоменклатуры.Количество), 2);
			КонецЦикла;
		Иначе
			ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект,ТаблицаТоваров[0]);
			ТаблицаТоваров[0].СуммаОплаты = ТаблицаТоваров[0].Цена;
		КонецЕсли;
		
		ЗаполнитьГТД(Объект,ТаблицаТоваров,ТаблицаСделок.ВыгрузитьКолонку("Сделка"));	
		
	ИначеЕсли (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
					ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) 
							И АвтоЗаполнениеТоваров Тогда
		
		ЗаполнитьПоСделке = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗаполнитьПоСделке", Ложь);
		
		ДокументОснование = ?(ЗаполнитьПоСделке И ЗначениеЗаполнено(Объект.Сделка), Объект.Сделка, Объект.ДокументОснование);
		
		ТабличнаяЧастьДокументаОснования=ПолучитьТабличнуюЧастьДокументаОснования(Объект, ДокументОснование);
		ТипЦен = ?(ЕстьРеквизит(ДокументОснование,"ТипЦен"),ДокументОснование.ТипЦен,Справочники.ТипыЦен.ПустаяСсылка());
		Если НЕ ТабличнаяЧастьДокументаОснования = Неопределено И ТабличнаяЧастьДокументаОснования.Количество() > 0 Тогда
			
			// Перенесем в Товары
			Для Каждого ТекущаяСтрокаНоменклатуры Из ТабличнаяЧастьДокументаОснования Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), ТекущаяСтрокаНоменклатуры,, "НомерСтроки");
			КонецЦикла;
			
			ЕстьСебестоимостьАвтомобиля = ЕстьРеквизит(ТаблицаТоваров, "СебестоимостьАвтомобиля");
			ЕстьСуммаСкидкиБонусами     = ЕстьРеквизит(ТаблицаТоваров, "СуммаСкидкиБонусами");
			
			Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
				ТекущаяСтрока.Цена = ТекущаяСтрока.Цена ;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма;
				ТекущаяСтрока.СуммаНДС = ТекущаяСтрока.СуммаНДС;
				ТекущаяСтрока.СуммаСкидки = ТекущаяСтрока.СуммаСкидки ;
				ТекущаяСтрока.СуммаВсего = ТекущаяСтрока.СуммаВсего;
				ТекущаяСтрока.СуммаСкидкиСтроки = ТекущаяСтрока.СуммаСкидкиСтроки;
				Если ЕстьСебестоимостьАвтомобиля Тогда
					ТекущаяСтрока.СебестоимостьАвтомобиля = ТекущаяСтрока.СебестоимостьАвтомобиля;
				Иначе
					ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, ТекущаяСтрока, Новый Структура("ТипЦен,ЕстьСкидка", ТипЦен, Истина));
					ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, ТекущаяСтрока, Новый Структура("ТипЦен,ЕстьСкидка", ТипЦен, Истина));
				КонецЕсли;
				Если ЕстьСуммаСкидкиБонусами Тогда
					ТекущаяСтрока.СуммаСкидкиБонусами = ТекущаяСтрока.СуммаСкидкиБонусами;
				КонецЕсли;
			КонецЦикла;
			Документы.ЧекНаОплату.ПроизвестиРаспределениеСуммыОплаты(Объект.СуммаДокумента, ТаблицаТоваров);
		КонецЕсли;
	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаТоваровДокумента(Объект);
		
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			// Заполним таблицу товаров
			Для Каждого СтрокаТовара Из Результат.Выгрузить() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), СтрокаТовара);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Объект.ДокументОснование;
	КонецЕсли;
	
	Если АвтоЗаполнениеТоваров И ТаблицаТоваров.Количество() > 0 И НЕ (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Чек")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекНаОплату")) И ЗначениеЗаполнено(ДокументОснование)
		И (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратПоставщику")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратОтПокупателя")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетОтПоставщика"))
	Тогда
		ЗаполнитьГТД(Объект,ТаблицаТоваров,,ДокументОснование);
	КонецЕсли;    
	
	ОпределитьПризнакПредметаРасчетаДляАвтомобилей(ТаблицаТоваров);
	
	// Сформируем ТЧ Товаров с маркировкой
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Передача", Ложь)
		И ЕстьРеквизит(Объект,, "КодыМаркировки") Тогда
		КодыМаркировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "КодыМаркировки").Выгрузить();
		РазбитьСтрокиПоКодамМаркировки(Объект, ТаблицаТоваров, КодыМаркировки, ПараметрыДействия);
	КонецЕсли;
	
	Если ВыводитьМежценовуюРазницу Тогда
		ДобавитьСтрокиМежценовойРазницы(ТаблицаТоваров);
	КонецЕсли;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

// Возвращает табличную часть документа основания
//
// Параметры:
//  Ссылка - ДокументСсылка.ПриходныйКассовыйОрдер - Ссылка на документ, для Основания которого получается табличная часть.
//  Сделка - ДокументСсылка - Ссылка на документ, по которому производится оплата.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица номенклатуры документа Основания.
//
Функция ПолучитьТабличнуюЧастьДокументаОснования(Ссылка, Сделка = Неопределено) Экспорт
	
	ДокументОснование = ?(ЗначениеЗаполнено(Сделка), Сделка, Ссылка.ДокументОснование);
	МетаданныеДокументаОснования = Метаданные.НайтиПоТипу(ТипЗнч(ДокументОснование));
	
	Если НЕ ПроверитьДокументОснование(МетаданныеДокументаОснования) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создадим таблицу значений как во фронте кассира
	Результат = ИницализацияТаблицыДокументаОснования();
	ВалютаДокумента = Ссылка.ВалютаДокумента;
	КурсДокумента   = Ссылка.КурсДокумента;
	
	ПараметрыПересчета = Новый Структура;
	ПараметрыПересчета.Вставить("ВалютаДокумента", ВалютаДокумента);
	ПараметрыПересчета.Вставить("КурсДокумента", КурсДокумента);
	ЕстьВалютаДокументаОснования = ЕстьРеквизит(ДокументОснование,"ВалютаДокумента"); 
	Если ЕстьВалютаДокументаОснования Тогда
		ВалютаДокументаОснования = ДокументОснование.ВалютаДокумента;
		КурсДокументаОснования   = ДокументОснование.КурсДокумента;
		ТребуетсяПересчет = (КурсДокументаОснования <> КурсДокумента);
		ПараметрыПересчета.Вставить("ВалютаДокументаОснования", ВалютаДокументаОснования);
		ПараметрыПересчета.Вставить("КурсДокументаОснования", КурсДокументаОснования);
	Иначе
		ТребуетсяПересчет = Ложь;
		ПараметрыПересчета.Вставить("ВалютаДокументаОснования", ВалютаДокумента);
		ПараметрыПересчета.Вставить("КурсДокументаОснования", КурсДокумента);
	КонецЕсли;
	ПараметрыПересчета.Вставить("ТребуетсяПересчет", ТребуетсяПересчет);
	
	Если МетаданныеДокументаОснования = Метаданные.Документы.СчетНаОплату Тогда
		ТекстЗапроса = ТекстЗапросаСчетНаОплату();
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РеализацияАктивов Тогда
		ТекстЗапроса = ТекстЗапросаРеализацияАктивов();
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.Инвентаризация Тогда
		ТекстЗапроса = ТекстЗапросаИнвентаризация();
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ТаможеннаяДекларацияИмпорт Тогда
		ТекстЗапроса = ТекстЗапросаТаможеннаяДекларацияИмпорт();
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЗаказНаряд Тогда
		ТекстЗапроса = ТекстЗапросаЗаказНаряд();
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ИнвентаризацияАвтомобилей Тогда
		ТекстЗапроса = ТекстЗапросаИнвентаризацияАвтомобилей();
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЗаказНаАвтомобиль Тогда
		Возврат ПолучитьТаблицуТоваровПоЗаказуНаАвтомобиль(ДокументОснование, Результат, ПараметрыПересчета);
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтчетКомитентуЗаАвтомобили Тогда
		Результат.Колонки.Добавить("ДокументПоступления");
		Возврат ПолучитьТаблицуТоваровПоОтчетуКомитентуЗаАвтомобили(ДокументОснование, Результат, ПараметрыПересчета);
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтчетКомиссионераЗаАвтомобили
		ИЛИ МетаданныеДокументаОснования = Метаданные.Документы.ВозвратПоставщикуАвтомобилей Тогда
		Результат.Колонки.Добавить("ДокументПередачи");
		Возврат ПолучитьТаблицуПоВовзратуПоставщикуАвтомобилией(ДокументОснование, Результат, ПараметрыПересчета);
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратОтПокупателяАвтомобилей Тогда
		Возврат ПолучитьТаблицуПоВозвратуОтПокупателяАвтомобилей(ДокументОснование, Результат, ПараметрыПересчета);
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РеализацияАвтомобилей
		ИЛИ МетаданныеДокументаОснования = Метаданные.Документы.СчетНаОплатуЗаАвтомобили
		ИЛИ МетаданныеДокументаОснования = Метаданные.Документы.ОптовыйЗаказКлиентаНаАвтомобили
		ИЛИ МетаданныеДокументаОснования = Метаданные.Документы.ОптовыйЗаказПоставщикуНаАвтомобили Тогда
		Возврат ПолучитьТаблицуПоРеализацииАвтомобилей(ДокументОснование, Результат, ПараметрыПересчета);
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПоступлениеАвтомобилей
		ИЛИ МетаданныеДокументаОснования = Метаданные.Документы.КорректировкаРеализацииАвтомобилей Тогда
		Возврат ПолучитьТаблицуПоПоступлениюАвтомобилей(ДокументОснование, Результат, ПараметрыПересчета);
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВводОстатковАвтомобилей
		ИЛИ МетаданныеДокументаОснования = Метаданные.Документы.СчетОтПоставщикаЗаАвтомобили Тогда
		Возврат ПолучитьТаблицуПоВводОстатковАвтомобилей(ДокументОснование, Результат, ПараметрыПересчета);
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЗаказПоставщикуНаАвтомобиль Тогда
		Возврат ПолучитьТаблицуПоЗаказуПоставщикуНаАвтомобиль(ДокументОснование, Результат, ПараметрыПересчета);
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.АктРазногласий Тогда
		ТекстЗапроса = ТекстЗапросаАктРазногласий();
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЗаказПоставщику Тогда
		ПараметрыПересчета.Вставить("ДатаДокумента", Ссылка.Дата);
		Возврат Документы.ЗаказПоставщику.ТоварыДляДокументаОплаты(ДокументОснование, Результат, ПараметрыПересчета);
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЗаказПокупателя Тогда
		ПараметрыПересчета.Вставить("ДатаДокумента", Ссылка.Дата);
		Возврат Документы.ЗаказПокупателя.ТоварыДляДокументаОплаты(ДокументОснование, Результат, ПараметрыПересчета);
	Иначе
		ТекстЗапроса = ТекстЗапросаТоваровОснования(МетаданныеДокументаОснования);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	ВыполнениеЗапроса = Запрос.Выполнить();
	Выборка = ВыполнениеЗапроса.Выбрать();
	
	ЕстьСтавкаНДС = (ВыполнениеЗапроса.Колонки.Найти("СтавкаНДССтавка") <> Неопределено);
	
	АвтоработаТипНоменклатуры  = Справочники.Номенклатура.Авторабота.ТипНоменклатуры;
	АвтомобильТипНоменклатуры  = Справочники.Номенклатура.Автомобиль.ТипНоменклатуры;
	
	// Получим договор комиссионера
	ДоговорКомиссионера = Неопределено;
	РеквизитыДоговораКомиссии = "Ссылка,ИННПоставщика,НаименованиеПоставщика,ТелефонПоставщика,ПризнакАгента";
	Если МетаданныеДокументаОснования = Метаданные.Документы.РеализацияТоваров Тогда
		ЗначенияДокументОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование,
			"ХозОперация, ДоговорКомитента"
		);
		Если ЗначенияДокументОснование.Хозоперация = Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
			ДоговорКомиссионера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЗначенияДокументОснование.ДоговорКомитента,
				РеквизитыДоговораКомиссии
			);
		КонецЕсли;
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СчетНаОплату Тогда
		ОснованиеСчетаНаОплату = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
		Если ЗначениеЗаполнено(ОснованиеСчетаНаОплату)
			И ТипЗнч(ОснованиеСчетаНаОплату) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ОснованиеСчетаНаОплату,
				"Хозоперация,ДоговорКомитента"
			);
			Если ДанныеОснования.Хозоперация = Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
				ДоговорКомиссионера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ДанныеОснования.ДоговорКомитента,
					РеквизитыДоговораКомиссии
				);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПоступлениеТоваров Тогда
		ЗначенияДокументОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование,
			"ХозОперация,ДоговорВзаиморасчетов"
		);
		Если ЗначенияДокументОснование.Хозоперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
			ДоговорКомиссионера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЗначенияДокументОснование.ДоговорВзаиморасчетов,
				РеквизитыДоговораКомиссии
			);
		КонецЕсли;
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СчетОтПоставщика Тогда
		ОснованиеСчетаОтПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
		Если ЗначениеЗаполнено(ОснованиеСчетаОтПоставщика)
			И ТипЗнч(ОснованиеСчетаОтПоставщика) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ОснованиеСчетаОтПоставщика,
				"Хозоперация,ДоговорВзаиморасчетов"
			);
			Если ДанныеОснования.Хозоперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
				ДоговорКомиссионера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ДанныеОснования.ДоговорВзаиморасчетов,
					РеквизитыДоговораКомиссии
				);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент) Тогда
			НоваяСтрока.Коэффициент = 1;
		КонецЕсли;
		
		Если Выборка.Номенклатура = Справочники.Номенклатура.Авторабота
			И ТипЗнч(Выборка.ХарактеристикаНоменклатуры) = Тип("Строка") Тогда
			НаименованиеХарактеристики = СтрШаблон(
				НСтр("ru = 'Авторабота %1. %2'"),
				Выборка.НомерСтроки,
				Строка(Выборка.ХарактеристикаНоменклатуры)
			);
			
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
				НаименованиеХарактеристики,
				Истина,
				,
				АвтоработаТипНоменклатуры
			);
			Если ХарактеристикаНоменклатуры.Пустая() Тогда
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ХарактеристикаНоменклатуры.УстановитьНовыйКод();
				ХарактеристикаНоменклатуры.Владелец = АвтоработаТипНоменклатуры;
				ХарактеристикаНоменклатуры.Наименование = НаименованиеХарактеристики;
				ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
				Попытка
					ХарактеристикаНоменклатуры.Записать();
				Исключение
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Ошибка создания новой характеристики автоработы: %1'"),ОписаниеОшибки())
					);
				КонецПопытки;
			КонецЕсли;
			НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
			
		ИначеЕсли Выборка.Номенклатура = Справочники.Номенклатура.Автомобиль
			И ТипЗнч(Выборка.ХарактеристикаНоменклатуры) = Тип("Строка") Тогда
			
			ХарактеристикаНоменклатурыНаименование = "VIN " + Выборка.ХарактеристикаНоменклатуры;
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
				ХарактеристикаНоменклатурыНаименование,
				Истина,
				,
				АвтомобильТипНоменклатуры
			);
			
			Если ХарактеристикаНоменклатуры.Пустая() Тогда
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ХарактеристикаНоменклатуры.УстановитьНовыйКод();
				ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
				ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
				ХарактеристикаНоменклатуры.СерийныйНомер =  Выборка.ХарактеристикаНоменклатуры;
				ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
				Попытка
					ХарактеристикаНоменклатуры.Записать();
				Исключение
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),Символы.ПС, ОписаниеОшибки())
					);
				КонецПопытки;
			КонецЕсли;
			НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
		КонецЕсли;
		
		Если ЕстьВалютаДокументаОснования Тогда
			НоваяСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.Цена,
				ВалютаДокументаОснования,
				КурсДокументаОснования,
				ВалютаДокумента,
				КурсДокумента
			);
			НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.Сумма,
				ВалютаДокументаОснования,
				КурсДокументаОснования,
				ВалютаДокумента,
				КурсДокумента
			);
			НоваяСтрока.СуммаСкидки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаСкидки,
				ВалютаДокументаОснования,
				КурсДокументаОснования,
				ВалютаДокумента,
				КурсДокумента
			);
			НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаВсего,
				ВалютаДокументаОснования,
				КурсДокументаОснования,
				ВалютаДокумента,
				КурсДокумента
			);
			НоваяСтрока.СуммаСкидкиСтроки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаСкидкиСтроки,
				ВалютаДокументаОснования,
				КурсДокументаОснования,
				ВалютаДокумента,
				КурсДокумента
			);
			
			Если ТребуетсяПересчет Тогда
				
				Если ЕстьСтавкаНДС Тогда
					НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаВсего * Выборка.СтавкаНДССтавка / (100 + Выборка.СтавкаНДССтавка), 2);
				Иначе
					НоваяСтрока.СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						НоваяСтрока.СуммаНДС,
						ВалютаДокументаОснования,
						КурсДокументаОснования,
						ВалютаДокумента,
						КурсДокумента
					);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДоговорКомиссионера = Неопределено Тогда
			НоваяСтрока.ДоговорВзаиморасчетов = ДоговорКомиссионера.Ссылка;
			НоваяСтрока.Наименование = ДоговорКомиссионера.НаименованиеПоставщика;
			НоваяСтрока.ПризнакАгента = ДоговорКомиссионера.ПризнакАгента;
			НоваяСтрока.Телефон = ДоговорКомиссионера.ТелефонПоставщика;
			НоваяСтрока.ИНН = ДоговорКомиссионера.ИННПоставщика;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнениеДаннымиАвтомобиля(ДокументОснование, Результат);
	
	Возврат ?(Результат.Количество() = 0, Неопределено, Результат);
	
КонецФункции

// Возвращает ставку НДС в формате БПО
//
//  Параметры:
//   СтавкаНДС - Перечисление.СтавкиНДС - Значение ставки НДС
//   Аванс - Булево - Признак способа расчета
//   ДатаДокумента - Дата - Дата, указанная в документе
//  
//  Возвращаемое значение:
//   Число,Неопределено - БезНДС, 0, 10, 18, 110, 118.
//
Функция СтавкаНДСВФорматеБПО(СтавкаНДС, ДатаДокумента, Аванс = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтавкиНДС.Ставка КАК ЗначениеСтавки
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	НЕ СтавкиНДС.ПометкаУдаления
	|	И СтавкиНДС.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СтавкаНДС);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
			Возврат Неопределено;
		ИначеЕсли СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС И Аванс Тогда
			Возврат ?(Выборка.ЗначениеСтавки = 20, 120, 118);
		ИначеЕсли Выборка.ЗначениеСтавки = 0 Тогда
			Возврат 0;
		ИначеЕсли Выборка.ЗначениеСтавки = 10 И Аванс Тогда
			Возврат 110;
		ИначеЕсли Выборка.ЗначениеСтавки = 10 Тогда
			Возврат 10;
		ИначеЕсли Выборка.ЗначениеСтавки = 18 И Аванс Тогда
			Возврат 118;
		ИначеЕсли Выборка.ЗначениеСтавки = 18 Тогда
			Возврат 18;
		ИначеЕсли Выборка.ЗначениеСтавки = 20 И Аванс Тогда
			Возврат 120;
		ИначеЕсли Выборка.ЗначениеСтавки = 20 Тогда
			Возврат 20;
		Иначе
			// !!!_Переход на ставку НДС 20%
			Возврат ?(ДатаДокумента < Дата("20190101"), 18, 20);
		КонецЕсли;
	Иначе
		Возврат 20;
	КонецЕсли;
	
КонецФункции // СтавкаНДСВФорматеБПО()

// Получение параметров организации.
//
// Параметры:
//  Организация				 - СправочникСсылка.Организации				 - Организация.
//  ПодразделениеКомпании	 - СправочникСсылка.ПодразделенияКомпании	 - Подразделение компании.
//  СкладКомпании			 - СправочникСсылка.СкладыКомпании			 - Склад компании.
//  Дата					 - Дата										 - Дата получения данных.
// 
// Возвращаемое значение:
//  Структура - Параметры заполнения.
//
Функция ПолучитьПараметрыОрганизации(Организация, ПодразделениеКомпании, СкладКомпании, Дата) Экспорт
	Структура = Новый Структура;
	
	Если НЕ Организация = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.НаименованиеПолное КАК НаименованиеПолное,
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Организация);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Структура.Вставить("НаименованиеПолное", Выборка.НаименованиеПолное);
			Структура.Вставить("ИНН", Выборка.ИНН);
			Структура.Вставить("КПП", Выборка.КПП);
		КонецЕсли;
	КонецЕсли;
	
	// Получим систему налогообложения
	Структура.Вставить("СистемаНалогообложения", ПолучитьСистемуНалогообложенияККТ(Организация, ПодразделениеКомпании, СкладКомпании, Дата));
	
	Возврат Структура;
КонецФункции

// Устанавливаем условное оформление поля ГТД.
//
// Параметры:
// 		Форма - Форма - Содержит данную форму. 
// 		ИмяТч - Строка - Имя табличной части,
//											   если оно отличается от "Товары".
// 
Процедура УстановитьУсловноеОформлениеГТД(Форма, ИмяТч = "Товары") Экспорт	
													
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(""+ ИмяТч + "ГТД");
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["" + ИмяТч + "ГТД"].Имя);

	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФормаСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыСобственности.ПрочаяФормаСобственности;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФормаСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыСобственности.ОбособленноеПодразделение;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФормаСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыСобственности.ЧастноеЛицо;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры // УстановитьУсловноеОформлениеГТД()

Процедура РазбитьСтрокиПоКодамМаркировки(Объект, ТаблицаТоваров, ТаблицаКодовМаркировки, ПараметрыДействия)
	
	Если ТаблицаКодовМаркировки.Количество() = 0 Тогда
		// Коды маркировки не считаны, дальнейшие действия отменены.
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "Сделка") И ЗначениеЗаполнено(Объект.Сделка) Тогда
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Сделка, "Дата,Номер");
	Иначе
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "Дата,Номер");
	КонецЕсли;
	ДатаДокументаОснования = ДанныеДокумента.Дата;
	НомерДокументаОснования = ДанныеДокумента.Номер;
	
	ЕстьЗначениеОтраслевогоРеквизита = ЕстьРеквизит(ТаблицаКодовМаркировки, "ЗначениеОтраслевогоРеквизита");
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	
	// Получим полные коды маркировки
	ПолныеКодыМаркировки = МаркировкаТоваровСервер.КодыМаркировкиВBASE64(
		ТаблицаКодовМаркировки.ВыгрузитьКолонку("КодМаркировки"));
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		Если ПустаяСтрока(СтрокаТоваров.ИдентификаторТовара)
			ИЛИ СтрокаТоваров.ГлобальныйИдентификаторТорговойЕдиницы <> 0
			ИЛИ СтрокаТоваров.КодМаркировки = "0" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.ИдентификаторТовара = СтрокаТоваров.ИдентификаторТовара;
		НайденныеСтроки = ТаблицаКодовМаркировки.НайтиСтроки(СтруктураПоиска);
		
		// Все маркировки заполнены ранее для данного товара.
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяМаркировка Из НайденныеСтроки Цикл
			
			СтруктураМаркировки = МенеджерОборудованияМаркировкаКлиентСервер
					.РазобратьШтриховойКодТовара(ТекущаяМаркировка.КодМаркировки);
			
			// Это не маркировка товара
			Если СтруктураМаркировки.ТипИдентификатораТовара <>
					ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаТоваров.КодМаркировки) Тогда
				СтрокаТоваров.КодМаркировки = "444D";
			КонецЕсли;
			
			GTIN          = Число(СтруктураМаркировки.GTIN);
			СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
			РеквизитКодаТовара = СтруктураМаркировки.РеквизитКодаТовара;
			ПолныйКодМаркировки = ПолныеКодыМаркировки.Получить(ТекущаяМаркировка.КодМаркировки);
			Если ЕстьЗначениеОтраслевогоРеквизита Тогда
				ЗначениеОтраслевогоРеквизита = ТекущаяМаркировка.ЗначениеОтраслевогоРеквизита;
			Иначе
				ЗначениеОтраслевогоРеквизита = "";
			КонецЕсли;
			
			// Весь товар распределен по маркировке
			Если СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент = 1 Тогда
				СтрокаТоваров.ГлобальныйИдентификаторТорговойЕдиницы = GTIN;
				СтрокаТоваров.СерийныйНомер = СерийныйНомер;
				СтрокаТоваров.РеквизитКодаТовара = РеквизитКодаТовара;
				СтрокаТоваров.ПолныйКодМаркировки = ПолныйКодМаркировки;
				СтрокаТоваров.ЗначениеОтраслевогоРеквизита = ЗначениеОтраслевогоРеквизита;
				СтрокаТоваров.ДатаДокументаОснования = ДатаДокументаОснования;
				СтрокаТоваров.НомерДокументаОснования = НомерДокументаОснования;
				Прервать;
			КонецЕсли;
			
			НоваяСтрокаТоваров = ТаблицаТоваров.Вставить(СтрокаТоваров.НомерСтроки);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаТоваров);
			
			НоваяСтрокаТоваров.Количество          = 1;
			НоваяСтрокаТоваров.Коэффициент         = 1;
			НоваяСтрокаТоваров.Сумма               = Окр(СтрокаТоваров.Сумма / СтрокаТоваров.Количество, 2);
			НоваяСтрокаТоваров.СуммаНДС            = Окр(СтрокаТоваров.СуммаНДС / СтрокаТоваров.Количество, 2);
			НоваяСтрокаТоваров.СуммаСкидки         = Окр(СтрокаТоваров.СуммаСкидки / СтрокаТоваров.Количество, 2);
			НоваяСтрокаТоваров.СуммаОплаты         = Окр(СтрокаТоваров.СуммаОплаты / СтрокаТоваров.Количество, 2);
			НоваяСтрокаТоваров.СуммаСкидкиСтроки   = Окр(СтрокаТоваров.СуммаСкидкиСтроки / СтрокаТоваров.Количество, 2);
			НоваяСтрокаТоваров.СуммаСкидкиБонусами = Окр(СтрокаТоваров.СуммаСкидкиБонусами / СтрокаТоваров.Количество, 2);
			НоваяСтрокаТоваров.ГлобальныйИдентификаторТорговойЕдиницы = GTIN;
			НоваяСтрокаТоваров.СерийныйНомер       = СерийныйНомер;
			НоваяСтрокаТоваров.РеквизитКодаТовара  = РеквизитКодаТовара;
			НоваяСтрокаТоваров.ПолныйКодМаркировки      = ПолныйКодМаркировки;
			НоваяСтрокаТоваров.ЗначениеОтраслевогоРеквизита = ЗначениеОтраслевогоРеквизита;
			НоваяСтрокаТоваров.ДатаДокументаОснования = ДатаДокументаОснования;
			НоваяСтрокаТоваров.НомерДокументаОснования = НомерДокументаОснования;
			НоваяСтрокаТоваров.СуммаВсего          = Окр(СтрокаТоваров.СуммаВсего / СтрокаТоваров.Количество, 2);
			
			СтрокаТоваров.Количество          = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент - 1;
			СтрокаТоваров.Коэффициент         = 1;
			СтрокаТоваров.Сумма               = СтрокаТоваров.Сумма - НоваяСтрокаТоваров.Сумма;
			СтрокаТоваров.СуммаНДС            = СтрокаТоваров.СуммаНДС - НоваяСтрокаТоваров.СуммаНДС;
			СтрокаТоваров.СуммаСкидки         = СтрокаТоваров.СуммаСкидки - НоваяСтрокаТоваров.СуммаСкидки;
			СтрокаТоваров.СуммаОплаты         = СтрокаТоваров.СуммаОплаты - НоваяСтрокаТоваров.СуммаОплаты;
			СтрокаТоваров.СуммаСкидкиСтроки   = СтрокаТоваров.СуммаСкидкиСтроки - НоваяСтрокаТоваров.СуммаСкидкиСтроки;
			СтрокаТоваров.СуммаСкидкиБонусами = СтрокаТоваров.СуммаСкидкиБонусами - НоваяСтрокаТоваров.СуммаСкидкиБонусами;
			СтрокаТоваров.СуммаВсего          = СтрокаТоваров.СуммаВсего - НоваяСтрокаТоваров.СуммаВсего;
			
			ТаблицаТоваров.Сдвинуть(НоваяСтрокаТоваров, -1);
			
			// Пересчитаем в таблице номера
			НомерСтрокиТоваров = 0;
			Для Каждого СтрокаТоваровНоменклатуры Из ТаблицаТоваров Цикл
				НомерСтрокиТоваров = НомерСтрокиТоваров + 1;
				СтрокаТоваровНоменклатуры.НомерСтроки = НомерСтрокиТоваров;
			КонецЦикла;
			
			ТаблицаКодовМаркировки.Удалить(ТекущаяМаркировка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // РазбитьСтрокиПоКодамМаркировки()

// Заполнение ГТД для таблицы товаров.
//
// Параметры:
//  Объект				 - ДокументСсылка	 - Документ оплаты.
//  ТаблицаТоваров		 - ТаблицаЗначений	 - Таблица товаров документа.
//  ТаблицаСделок		 - ТаблицаЗначений	 - Список сделок оплаты.
//  ДокументОснование	 - ДокументСсылка	 - Документ основания оплаты.
//
Процедура ЗаполнитьГТД(Объект, ТаблицаТоваров, ТаблицаСделок = Неопределено, ДокументОснование = Неопределено) Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	Если НЕ ДокументОснование = Неопределено
		И ЕстьРеквизит(ДокументОснование, "ТипЦен") Тогда
		ПараметрыЗаполнения.Вставить("ТипЦен", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ТипЦен"));
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("ЗаполнятьТоварами", Истина);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоГТД", Истина);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоПартиям", Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнятьРаботами", Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнятьАвтомобилями", Ложь);
	ПараметрыЗаполнения.Вставить("РезультатЗапросаПоТоварам", Неопределено);
	ПараметрыЗаполнения.Вставить("РезультатЗапросаПоГТД", Неопределено);
	ПараметрыЗаполнения.Вставить("РезультатЗапросаПоРаботам", Неопределено);
	ПараметрыЗаполнения.Вставить("РезультатЗапросаПоАвто", Неопределено);
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	ПараметрыЗаполнения.ЗаполнятьПоГТД = Истина;
	ПараметрыЗаполнения.ЗаполнятьАвтомобилями = Истина;
	
	// Найдем колонку уникальности строки
	Если ТаблицаТоваров.Колонки.Найти("КлючСтроки") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	
	// запрос по документу
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.Количество * Товары.Коэффициент КАК Количество,
	               |	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Товары.Коэффициент КАК Коэффициент,
	               |	Товары.Цена КАК Цена,
	               |	Товары.Сумма КАК Сумма,
	               |	Товары.ПроцентСкидки КАК ПроцентСкидки,
	               |	Товары.СуммаСкидки КАК СуммаСкидки,
	               |	Товары.СкидкаНаТовар КАК СкидкаНаТовар,
	               |	Товары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
	               |	Товары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
	               |	Товары.СтавкаНДС КАК СтавкаНДС,
	               |	Товары.СуммаНДС КАК СуммаНДС,
	               |	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	Товары.СуммаВсего КАК СуммаВсего,
	               |	Товары.СуммаСкидкиБонусами КАК СуммаСкидкиБонусами,
	               |	Товары.СуммаОплаты КАК СуммаОплаты,
	               |	Товары.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	               |	Товары.ГТД КАК ГТД,
	               |	#ПризнакПредметаРасчета
	               |	Товары.КлючСтроки КАК КлючСтроки
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	&Товары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.Количество КАК Количество,
	               |	Товары.Количество КАК КоличествоОсталось,
	               |	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Товары.Коэффициент КАК Коэффициент,
	               |	Товары.Цена КАК Цена,
	               |	Товары.ПроцентСкидки КАК ПроцентСкидки,
	               |	Товары.СуммаСкидки КАК СуммаСкидки,
	               |	Товары.СуммаСкидки КАК СуммаСкидкиОсталось,
	               |	Товары.СкидкаНаТовар КАК СкидкаНаТовар,
	               |	Товары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
	               |	Товары.СуммаСкидкиСтроки КАК СуммаСкидкиСтрокиОсталось,
	               |	Товары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
	               |	Товары.СтавкаНДС КАК СтавкаНДС,
				   |	Товары.СуммаНДС КАК СуммаНДС,
				   |	Товары.СуммаНДС КАК СуммаНДСОсталось,
				   |	Товары.СуммаВсего КАК СуммаВсегоОсталось,
				   |	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				   |	Товары.СуммаСкидкиБонусами КАК СуммаСкидкиБонусами,
				   |	Товары.СуммаСкидкиБонусами КАК СуммаСкидкиБонусамиОсталось,
				   |	Товары.Сумма КАК Сумма,
				   |	Товары.Сумма КАК СуммаОсталось,
				   |	Товары.СуммаОплаты КАК СуммаОплаты,
				   |	Товары.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
				   |	Товары.ДоговорВзаиморасчетов.ИННПоставщика КАК ИНН,
				   |	Товары.ДоговорВзаиморасчетов.НаименованиеПоставщика КАК Наименование,
				   |	Товары.ДоговорВзаиморасчетов.ТелефонПоставщика КАК Телефон,
				   |	Товары.ДоговорВзаиморасчетов.ПризнакАгента КАК ПризнакАгента,
				   |	Товары.ГТД.Страна.Код КАК КодСтраныПроисхожденияТовара,
				   |	Товары.ГТД.Наименование КАК НомерТаможеннойДекларации,
				   |	Товары.ГТД КАК ГТД,
				   |	#ПризнакПредметаРасчета
				   |	Товары.КлючСтроки КАК КлючСтроки
				   |ИЗ
				   |	Товары КАК Товары";
	Если ТаблицаТоваров.Колонки.Найти("ПризнакПредметаРасчета") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПризнакПредметаРасчета", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"#ПризнакПредметаРасчета",
			"Товары.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,");
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Товары",ТаблицаТоваров);
	ПараметрыЗаполнения.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	// запрос по ГТД
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровКомпании.Регистратор КАК Регистратор,
	|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПартииТоваровКомпании.Партия КАК Партия,
	|	ПартииТоваровКомпании.СтатусПартии КАК СтатусПартии,
	|	СУММА(ВЫБОР
	|			КОГДА ПартииТоваровКомпании.Количество > 0
	|				ТОГДА ПартииТоваровКомпании.Количество
	|			ИНАЧЕ -ПартииТоваровКомпании.Количество
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ПартииТоваров
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	ПартииТоваровКомпании.Регистратор В(&Основание)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровКомпании.Регистратор,
	|	ПартииТоваровКомпании.СтатусПартии,
	|	ПартииТоваровКомпании.Номенклатура,
	|	ПартииТоваровКомпании.Партия,
	|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДПартийТоваровКомпании.Регистратор КАК Регистратор,
	|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
	|	СУММА(ВЫБОР
	|			КОГДА ГТДПартийТоваровКомпании.Количество > 0
	|				ТОГДА ГТДПартийТоваровКомпании.Количество
	|			ИНАЧЕ -ГТДПартийТоваровКомпании.Количество
	|		КОНЕЦ) КАК Количество,
	|	ГТДПартийТоваровКомпании.ГТД.Страна.Код КАК КодСтраныПроисхожденияТовара,
	|	ГТДПартийТоваровКомпании.ГТД.Наименование КАК НомерТаможеннойДекларации,
	|	ГТДПартийТоваровКомпании.Партия КАК Партия
	|ПОМЕСТИТЬ ГТДПартий
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор В(&Основание)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ГТД.Страна.Код,
	|	ГТДПартийТоваровКомпании.ГТД.Наименование,
	|	ГТДПартийТоваровКомпании.Партия,
	|	ГТДПартийТоваровКомпании.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГТДПартий.Номенклатура КАК НоменклатураПартии,
	|	ГТДПартий.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ГТДПартий.Партия КАК Партия,
	|	СУММА(ГТДПартий.Количество) КАК Количество
	|ПОМЕСТИТЬ НоменклатураСГТДПартий
	|ИЗ
	|	ГТДПартий КАК ГТДПартий
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартий.Номенклатура,
	|	ГТДПартий.ХарактеристикаНоменклатуры,
	|	ГТДПартий.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваров.Номенклатура КАК Номенклатура,
	|	ПартииТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ КАК ДоговорВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|	КОНЕЦ КАК ПризнакАгента,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИННПоставщика,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						ИНАЧЕ """"
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК СТРОКА(200)) КАК НаименованиеПоставщика,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТелефонПоставщика,
	|	ГТДПартий.ГТД КАК ГТД,
	|	ГТДПартий.КодСтраныПроисхожденияТовара КАК КодСтраныПроисхожденияТовара,
	|	ГТДПартий.НомерТаможеннойДекларации КАК НомерТаможеннойДекларации,
	|	СУММА(ГТДПартий.Количество) КАК Количество,
	|	СУММА(ГТДПартий.Количество) КАК КоличествоОсталось
	|ИЗ
	|	ПартииТоваров КАК ПартииТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГТДПартий КАК ГТДПартий
	|		ПО ПартииТоваров.Регистратор = ГТДПартий.Регистратор
	|			И ПартииТоваров.Номенклатура = ГТДПартий.Номенклатура
	|			И ПартииТоваров.ХарактеристикаНоменклатуры = ГТДПартий.ХарактеристикаНоменклатуры
	|			И ПартииТоваров.Партия = ГТДПартий.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ГТДПартий.КодСтраныПроисхожденияТовара,
	|	ГТДПартий.НомерТаможеннойДекларации,
	|	ГТДПартий.ГТД,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						ИНАЧЕ """"
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК СТРОКА(200))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.Пустаяссылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						ИНАЧЕ """"
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК СТРОКА(200)),
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка),
	|	NULL,
	|	NULL,
	|	СУММА(ПартииТоваров.Количество - ЕСТЬNULL(НоменклатураСГТДПартий.Количество, 0)),
	|	СУММА(ПартииТоваров.Количество - ЕСТЬNULL(НоменклатураСГТДПартий.Количество, 0))
	|ИЗ
	|	ПартииТоваров КАК ПартииТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураСГТДПартий КАК НоменклатураСГТДПартий
	|		ПО ПартииТоваров.Номенклатура = НоменклатураСГТДПартий.НоменклатураПартии
	|			И ПартииТоваров.ХарактеристикаНоменклатуры = НоменклатураСГТДПартий.ХарактеристикаНоменклатуры
	|			И ПартииТоваров.Партия = НоменклатураСГТДПартий.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.Пустаяссылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПартииТоваров.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ПартииТоваров.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|							ТОГДА ВЫРАЗИТЬ(ПартииТоваров.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						ИНАЧЕ """"
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК СТРОКА(200))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВПроизводстве.Номенклатура,
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|				ТОГДА ВЫБОР
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						ИНАЧЕ """"
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК СТРОКА(200)),
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ТоварыВПроизводстве.ГТД,
	|	ТоварыВПроизводстве.ГТД.Страна.Код,
	|	ТоварыВПроизводстве.ГТД.Наименование,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыВПроизводстве.Количество > 0
	|				ТОГДА ТоварыВПроизводстве.Количество
	|			ИНАЧЕ -ТоварыВПроизводстве.Количество
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыВПроизводстве.Количество > 0
	|				ТОГДА ТоварыВПроизводстве.Количество
	|			ИНАЧЕ -ТоварыВПроизводстве.Количество
	|		КОНЕЦ)
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
	|ГДЕ
	|	ТоварыВПроизводстве.Регистратор В(&Основание)
	|	И ВЫРАЗИТЬ(ТоварыВПроизводстве.Регистратор КАК Документ.ЗаказНаряд).Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВПроизводстве.Номенклатура,
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТоварыВПроизводстве.ГТД,
	|	ТоварыВПроизводстве.ГТД.Страна.Код,
	|	ТоварыВПроизводстве.ГТД.Наименование,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|				ТОГДА ВЫБОР
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						ИНАЧЕ """"
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК СТРОКА(200))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВПроизводстве.Номенклатура,
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|				ТОГДА ВЫБОР
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						ИНАЧЕ """"
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК СТРОКА(200)),
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ТоварыВПроизводстве.ГТД,
	|	ТоварыВПроизводстве.ГТД.Страна.Код,
	|	ТоварыВПроизводстве.ГТД.Наименование,
	|	СУММА(ТоварыВПроизводстве.Количество * ВЫБОР
	|			КОГДА ТоварыВПроизводстве.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ),
	|	СУММА(ТоварыВПроизводстве.Количество * ВЫБОР
	|			КОГДА ТоварыВПроизводстве.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ)
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
	|ГДЕ
	|	ТоварыВПроизводстве.ЗаказНаряд В(&Основание)
	|	И ТоварыВПроизводстве.ЗаказНаряд.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВПроизводстве.ГТД,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
	|	ТоварыВПроизводстве.Номенклатура,
	|	ТоварыВПроизводстве.ГТД.Страна.Код,
	|	ТоварыВПроизводстве.ГТД.Наименование,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ПризнакАгента
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ИННПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|						ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварПринятыйКомиссия)
	|				ТОГДА ВЫБОР
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВводОстатковТоваров
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ВозвратОтПокупателя
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ВозвратОтПокупателя).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						КОГДА ТоварыВПроизводстве.Партия ССЫЛКА Документ.ПоступлениеТоваров
	|							ТОГДА ВЫРАЗИТЬ(ТоварыВПроизводстве.Партия КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|						ИНАЧЕ """"
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК СТРОКА(200))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализованныеТовары.Номенклатура,
	|	РеализованныеТовары.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
	|				ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|			КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров
	|				ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК СТРОКА(200)),
	|	ВЫБОР
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	РеализованныеТовары.ГТД,
	|	РеализованныеТовары.ГТД.Страна.Код,
	|	РеализованныеТовары.ГТД.Наименование,
	|	СУММА(ВЫБОР
	|			КОГДА РеализованныеТовары.Количество > 0
	|				ТОГДА РеализованныеТовары.Количество
	|			ИНАЧЕ -РеализованныеТовары.Количество
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА РеализованныеТовары.Количество > 0
	|				ТОГДА РеализованныеТовары.Количество
	|			ИНАЧЕ -РеализованныеТовары.Количество
	|		КОНЕЦ)
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары КАК РеализованныеТовары
	|ГДЕ
	|	РеализованныеТовары.Регистратор В(&Основание)
	|	И РеализованныеТовары.Регистратор ССЫЛКА Документ.ОтчетКомитенту
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ,
	|	РеализованныеТовары.Номенклатура,
	|	РеализованныеТовары.ХарактеристикаНоменклатуры,
	|	РеализованныеТовары.ГТД,
	|	РеализованныеТовары.ГТД.Страна.Код,
	|	РеализованныеТовары.ГТД.Наименование,
	|	ВЫБОР
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ПризнакАгента
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ИННПоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|		КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.ТелефонПоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ВводОстатковТоваров
	|				ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ВводОстатковТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|			КОГДА РеализованныеТовары.ДокументПередачи ССЫЛКА Документ.ПоступлениеТоваров
	|				ТОГДА ВЫРАЗИТЬ(РеализованныеТовары.ДокументПередачи КАК Документ.ПоступлениеТоваров).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК СТРОКА(200))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГТДПартий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НоменклатураСГТДПартий";
	
	Если ТаблицаСделок = Неопределено Тогда
		
		Основание = Неопределено;
		
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументОснование = Объект.ДокументОснование;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			ОснованиеСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
			Если ЗначениеЗаполнено(ОснованиеСчета)
				И (ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.РеализацияТоваров") 
				ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказНаряд")) Тогда
				Основание = ОснованиеСчета;
			Иначе
				Основание = ДокументОснование;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетОтПоставщика") Тогда
			ОснованиеСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
			Если ЗначениеЗаполнено(ОснованиеСчета) И ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
				Основание = ОснованиеСчета;
			Иначе
				Основание = ДокументОснование;
			КонецЕсли;
		Иначе
			Основание = ДокументОснование;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Основание",Основание);
	Иначе
		
		СписокСчетов = Новый Массив;
		УдалитьСделки = Новый Массив;
		ТипЦен = Справочники.ТипыЦен.ПустаяСсылка();
		
		Для Каждого ТекущаяСделка Из ТаблицаСделок Цикл
			Если ТипЗнч(ТекущаяСделка) = Тип("ДокументСсылка.СчетНаОплату")
				ИЛИ ТипЗнч(ТекущаяСделка) = Тип("ДокументСсылка.СчетОтПоставщика") Тогда
				СписокСчетов.Добавить(ТекущаяСделка);
			ИначеЕсли ТипЗнч(ТекущаяСделка) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
				УдалитьСделки.Добавить(ТекущаяСделка);
			КонецЕсли;
			
			// Получим тип цен для выписки
			Если ТипЦен.Пустая() И ЕстьРеквизит(ТекущаяСделка, "ТипЦен") Тогда
				ТипЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСделка, "ТипЦен");
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыЗаполнения.Вставить("ТипЦен", ТипЦен);
		
		// Уберем сделки, по которым не нужно получать ГТД.
		Если УдалитьСделки.Количество() > 0 Тогда
			Для Каждого ТекущаяСтрока Из УдалитьСделки Цикл
				Индекс = ТаблицаСделок.Найти(ТекущаяСтрока);
				ТаблицаСделок.Удалить(Индекс);
			КонецЦикла;
		КонецЕсли;
		
		Если СписокСчетов.Количество() > 0 Тогда
			
			ДокументыОснований = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСчетов, "ДокументОснование");
			
			Для Каждого ТекущееОснование Из ДокументыОснований Цикл
				Если ТипЗнч(ТекущееОснование.Ключ) = Тип("ДокументСсылка.СчетНаОплату")
					И (ТипЗнч(ТекущееОснование.Значение) = Тип("ДокументСсылка.РеализацияТоваров")
					ИЛИ ТипЗнч(ТекущееОснование.Значение) = Тип("ДокументСсылка.ЗаказНаряд")) Тогда
					//@skip-check many-actual-parameters
					ТаблицаСделок.Добавить(ТекущееОснование.Значение);
				ИначеЕсли ТипЗнч(ТекущееОснование.Ключ) = Тип("ДокументСсылка.СчетОтПоставщика")
					И ТипЗнч(ТекущееОснование.Значение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
					//@skip-check many-actual-parameters
					ТаблицаСделок.Добавить(ТекущееОснование.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Основание",ТаблицаСделок);
	КонецЕсли;
	ПараметрыЗаполнения.РезультатЗапросаПоГТД = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.РезультатЗапросаПоГТД) Тогда
		Возврат;
	КонецЕсли;
	
	// Пока получим параметр непосредственно из документа-основания Отчета комитенту
	ЦенаВключаетНДС = Истина;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ТипЦен.ЦенаВключаетНДС");
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	ТаблицаТоваров.Очистить();
	Если ТипЗнч(ТаблицаТоваров) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваровКопия =  ТаблицаТоваров.Скопировать();                                  
	Иначе
		ТаблицаТоваровКопия =  ТаблицаТоваров.Выгрузить();                                  
	КонецЕсли;
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(Объект,ТаблицаТоваровКопия,ПараметрыЗаполнения);
	СуммаДокумента = ?(Объект.СуммаДокумента<0,-Объект.СуммаДокумента, Объект.СуммаДокумента);
	Документы.ЧекНаОплату.ПроизвестиРаспределениеСуммыОплаты(СуммаДокумента, ТаблицаТоваровКопия);
	
	// Перенесем в Товары
	Для Каждого ТекущаяСтрокаНоменклатуры Из ТаблицаТоваровКопия Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), ТекущаяСтрокаНоменклатуры);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьГТД()

// Заполнение реквизитов комиссионера
//
// Параметры:
//  Документ - ДокументСсылка - Документ, в котором происходит заполнение
//  Автомобили - Массив, СправочникСсылка.Автомобили - Автомобили, для которых нужно заполнить договор комиссии.
//
// Возвращаемое значение:
//  Соответствие - содержит автомобили и данные договора
//
Функция ЗаполнитьДоговорКомисси(Документ, Автомобили) Экспорт
	
	МассивАвтомобилей = Новый Массив;
	Если НЕ ТипЗнч(Автомобили) = Тип("Массив") Тогда
		МассивАвтомобилей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Автомобили);
	Иначе
		МассивАвтомобилей = Автомобили;
	КонецЕсли;
	
	Если МассивАвтомобилей.Количество() = 0 Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилей.Период КАК Период,
	|	ОстаткиАвтомобилей.СтатусПартии КАК СтатусПартии,
	|	ВЫБОР
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВводОстатковАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВводОстатковАвтомобилей).ДоговорВзаиморасчетов
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВозвратОтПокупателяАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВозвратОтПокупателяАвтомобилей).ДоговорВзаиморасчетов
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ПоступлениеАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ПоступлениеАвтомобилей).ДоговорВзаиморасчетов
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ИнвентаризацияАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ИнвентаризацияАвтомобилей).ДоговорВзаиморасчетов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ КАК ДоговорВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВводОстатковАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВводОстатковАвтомобилей).ДоговорВзаиморасчетов.ПризнакАгента
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВозвратОтПокупателяАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВозвратОтПокупателяАвтомобилей).ДоговорВзаиморасчетов.ПризнакАгента
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ПоступлениеАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ПоступлениеАвтомобилей).ДоговорВзаиморасчетов.ПризнакАгента
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ИнвентаризацияАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ИнвентаризацияАвтомобилей).ДоговорВзаиморасчетов.ПризнакАгента
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)
	|	КОНЕЦ КАК ПризнакАгента,
	|	ВЫБОР
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВводОстатковАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВводОстатковАвтомобилей).ДоговорВзаиморасчетов.ТелефонПоставщика
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВозвратОтПокупателяАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВозвратОтПокупателяАвтомобилей).ДоговорВзаиморасчетов.ТелефонПоставщика
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ПоступлениеАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ПоступлениеАвтомобилей).ДоговорВзаиморасчетов.ТелефонПоставщика
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ИнвентаризацияАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ИнвентаризацияАвтомобилей).ДоговорВзаиморасчетов.ТелефонПоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Телефон,
	|	ВЫБОР
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВводОстатковАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВводОстатковАвтомобилей).ДоговорВзаиморасчетов.ИННПоставщика
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВозвратОтПокупателяАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВозвратОтПокупателяАвтомобилей).ДоговорВзаиморасчетов.ИННПоставщика
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ПоступлениеАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ПоступлениеАвтомобилей).ДоговорВзаиморасчетов.ИННПоставщика
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ИнвентаризацияАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ИнвентаризацияАвтомобилей).ДоговорВзаиморасчетов.ИННПоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИНН,
	|	ВЫБОР
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВводОстатковАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВводОстатковАвтомобилей).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВозвратОтПокупателяАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВозвратОтПокупателяАвтомобилей).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ПоступлениеАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ПоступлениеАвтомобилей).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|		КОГДА ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ИнвентаризацияАвтомобилей
	|			ТОГДА ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ИнвентаризацияАвтомобилей).ДоговорВзаиморасчетов.НаименованиеПоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Наименование
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Автомобиль В(&Автомобили)
	|	И ОстаткиАвтомобилей.Период <= &Момент
	|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТИПЗНАЧЕНИЯ(ОстаткиАвтомобилей.Регистратор) В (ТИП(Документ.ВводОстатковАвтомобилей), ТИП(Документ.ПоступлениеАвтомобилей), ТИП(Документ.ВозвратОтПокупателяАвтомобилей), ТИП(Документ.ИнвентаризацияАвтомобилей))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Период)
	|ПО
	|	Автомобиль");
	Запрос.УстановитьПараметр("Автомобили", МассивАвтомобилей);
	Запрос.УстановитьПараметр("Момент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Результат = Новый Соответствие;
	ДанныеДоговора = Новый Структура("ДоговорВзаиморасчетов,ПризнакАгента,Телефон,ИНН,Наименование");
	
	ВыборкаАвтомобили = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаАвтомобили.Следующий() Цикл
		
		Если ВыборкаАвтомобили.Период = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаАвтомобили.Выбрать();
		Выборка.Следующий();
		
		Если НЕ Выборка.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия
			ИЛИ Выборка.ДоговорВзаиморасчетов.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеДоговора, Выборка);
		Результат.Вставить(Выборка.Автомобиль, ДанныеДоговора);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьДоговорКомисси()

// Процедура производит установку вариант отображения дополнительного поля "Производитель".
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие
//  ИмяТабличнойЧасти - Строка - Название табличной части
//  ИмяПоляАртикул - Строка - Название поля артикула.
//
Процедура УстановитьВидимостьКолонкиПроизводитель(Форма, ИмяТабличнойЧасти, ИмяПоляАртикул = Неопределено) Экспорт
	
	ОтображатьАртикул = ПолучитьФункциональнуюОпцию("ИспользоватьАртикул");
	ТабличнаяЧасть = Форма.Объект.Ссылка.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
	
	Если
		ТабличнаяЧасть <> Неопределено
		И ТабличнаяЧасть.Реквизиты.Найти("Номенклатура") <> Неопределено
	Тогда
		
		Если ИмяПоляАртикул = Неопределено Тогда
			
			ИмяПоляАртикул = "Артикул";
			
		КонецЕсли; 
		
		ЭлементКод           = Форма.Элементы.Найти(ИмяТабличнойЧасти + "Код");
		ЭлементАртикул       = Форма.Элементы.Найти(ИмяТабличнойЧасти + ИмяПоляАртикул);
		ЭлементНоменклатура  = Форма.Элементы.Найти(ИмяТабличнойЧасти + "Номенклатура");
		ЭлементПроизводитель = Форма.Элементы.Найти(ИмяТабличнойЧасти + "Производитель");
	
		Если ЭлементАртикул <> Неопределено Тогда
			
			Если ЭлементПроизводитель = Неопределено Тогда
				
				ЭлементПроизводитель = Форма.Элементы.Добавить(
					ИмяТабличнойЧасти + "Производитель",
					Тип("ПолеФормы"),
					Форма.Элементы[ИмяТабличнойЧасти]
				);
				ЭлементПроизводитель.Вид         = ВидПоляФормы.ПолеВвода;
				ЭлементПроизводитель.ПутьКДанным = "Объект." + ИмяТабличнойЧасти + ".Номенклатура.Производитель";
				
			КонецЕсли; 
			
			ЭлементПроизводитель.Видимость = ОтображатьАртикул = Перечисления.РежимыВыводаКодаВДокументах.АртикулИПроизводитель
				ИЛИ ОтображатьАртикул = Перечисления.РежимыВыводаКодаВДокументах.КодИПроизводитель
				ИЛИ ОтображатьАртикул = Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель;
			ЭлементПроизводитель.ФиксацияВТаблице = ЭлементАртикул.ФиксацияВТаблице;
			Форма.Элементы.Переместить(ЭлементПроизводитель, ЭлементАртикул.Родитель,ЭлементАртикул); 
			Форма.Элементы.Переместить(ЭлементАртикул, ЭлементАртикул.Родитель,ЭлементПроизводитель); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПризнакПредметаРасчетаДляАвтомобилей(ТаблицаТоваров)
	
	ОтборАвтомобили = Новый Структура();
	ОтборАвтомобили.Вставить("Номенклатура", Справочники.Номенклатура.Автомобиль);
	МассивНоменклатур = ТаблицаТоваров.НайтиСтроки(ОтборАвтомобили);
	
	Если МассивНоменклатур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаХарактеристик = Новый ТаблицаЗначений(); 
	ТаблицаХарактеристик.Колонки.Добавить("ХарактеристикаНаименование",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(17,ДопустимаяДлина.Переменная)));
	
	Для Каждого Элемент Из МассивНоменклатур Цикл 
		
		Если СтрНайти(Элемент.ХарактеристикаНоменклатуры.Наименование,"VIN ") = 1 Тогда
			
			НоваяСтрока = ТаблицаХарактеристик.Добавить();
			НоваяСтрока.ХарактеристикаНаименование = Сред(Элемент.ХарактеристикаНоменклатуры.Наименование, 5);
			
		КонецЕсли;
	
	КонецЦикла;	 
	
	Если ТаблицаХарактеристик.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаХарактеристик.ХарактеристикаНаименование КАК ХарактеристикаНаименование
		|ПОМЕСТИТЬ ТаблицаХарактеристик
		|ИЗ
		|	&ТаблицаХарактеристик КАК ТаблицаХарактеристик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Автомобили.Модель.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
		|	Автомобили.VIN КАК VIN
		|ИЗ
		|	ТаблицаХарактеристик КАК ТаблицаХарактеристик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Автомобили КАК Автомобили
		|		ПО ТаблицаХарактеристик.ХарактеристикаНаименование = Автомобили.VIN";   
	
	Запрос.УстановитьПараметр("ТаблицаХарактеристик", ТаблицаХарактеристик);
	
	ТаблицаАвтомобилей  = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ ТаблицаТоваров Цикл 
		
		Если НЕ Строка.Номенклатура = Справочники.Номенклатура.Автомобиль  Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Строка.ХарактеристикаНоменклатуры.Наименование,"VIN ") = 1 Тогда
			
			VinНомер = Сред(Строка.ХарактеристикаНоменклатуры.Наименование, 5);	
			Отбор = Новый Структура("VIN", VinНомер); 
			Автомобили = ТаблицаАвтомобилей.НайтиСтроки(Отбор);
			
			Если Автомобили.Количество()> 0 Тогда
				Строка.ПризнакПредметаРасчета = Автомобили[0].ПризнакПредметаРасчета; 
			КонецЕсли; 
			
		КонецЕсли;
				
	КонецЦикла;	
	
КонецПроцедуры
#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Общий обработчик события настройки параметров выбора элементов управления диалога в зависимости от значений
// реквизитов объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой возникло событие;
//  Объект - Произвольный - основной объект формы.
//
Процедура НастроитьПараметрыВыбораЭлементовФормы(Форма, Объект = Неопределено) Экспорт
	
	ЗащищенныеФункцииСервер.НастроитьПараметрыВыбораЭлементовФормыДокументы(Форма, Объект);
	
КонецПроцедуры

// Обработчик события настройки параметров выбора автомобиля для комиссионных документов.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой возникло событие;
//  Объект - Произвольный - основной объект формы.
//
Процедура НастроитьПараметрыВыбораАвтомобиляДляКомиссионныхДокументов(Форма, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если УчетПрослеживаемыхТоваровСервер.ЭтоХозОперацияКомиссии(Объект.ХозОперация) Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Форма.Элементы.АвтомобилиАвтомобиль.ПараметрыВыбора,
			"Отбор.Прослеживаемый",
			Ложь
		);
		
	Иначе
		УправлениеДиалогомСервер.УдалитьПараметрВыбора(
			Форма.Элементы.АвтомобилиАвтомобиль.ПараметрыВыбора,
			"Отбор.Прослеживаемый"
		);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события настройки параметров выбора номенклатуры для комиссионных документов.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой возникло событие;
//  Объект - Произвольный - основной объект формы.
//
Процедура НастроитьПараметрыВыбораНоменклатурыДляКомиссионныхДокументов(Форма, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если УчетПрослеживаемыхТоваровСервер.ЭтоХозОперацияКомиссии(Объект.ХозОперация) Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Форма.Элементы.ТоварыНоменклатура.ПараметрыВыбора,
			"Отбор.Прослеживаемый",
			Ложь
		);
		
	Иначе
		
		УправлениеДиалогомСервер.УдалитьПараметрВыбора(
			Форма.Элементы.ТоварыНоменклатура.ПараметрыВыбора,
			"Отбор.Прослеживаемый"
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события настройки параметров отображения элементов формы в зависимости от значений реквизитов
// объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие;
//  Объект - Произвольный - основной объект формы.
//
Процедура УправлениеДиалогомНаСервере(Форма, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	РаботаСФормой.УстановитьЗаголовокФормыДокумента(Форма, Объект);	
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(Форма, Объект);
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиВзаиморасчеты(Форма,, Объект);
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиДенежныеСредства(Форма,, Объект);
	УстановитьВидимостьКолонкиСуммаСписания(Форма, Объект);
	УстановитьВидимостьКолонкиЯчейка(Форма,, Объект);
	
	Если ЕстьРеквизит(Форма, "ТоварыНоменклатурыТекстПодвала") Тогда
		
		УстановитьНадписьПодвалаКолонкиНоменклатура(Форма.ТоварыНоменклатурыТекстПодвала, Объект);
		
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "ТипЦен") Тогда
		
		УстановитьЗаголовокКолонок(Форма, Объект);
		
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "ТипЦенРабот") Тогда
		
		УстановитьЗаголовокКолонок(Форма,Объект, "ТипЦенРабот", "Автоработы");
		
	КонецЕсли;
	
	УстановитьДоступностьРеквизитовВзаиморасчетов(Форма, Объект);
	УстановитьДоступностьПатента(Форма, Объект);	
	
	Если Форма.ТолькоПросмотр Тогда
		
		Возврат;
		
	КонецЕсли;   
	

	УстановитьДоступностьКолонкиСуммаВсего(Форма, Объект);
	УстановитьДоступностьСпособаЗачатаАвансов(Форма, Объект);
	УправлениеДиалогомСервер.РасставитьАвтоотметкиНезаполненного(Форма, Объект);
	УправлениеСвойствамиПлатформа.ОбновитьЗависимостиДополнительныхРеквизитов(Форма, Объект);
	
КонецПроцедуры

// Общий обработчик события выбора одного из пунктов меню доступных хоз. операций
// 
// Параметры:
//  Форма             - УправляемаяФорма - Форма, в которой возникло событие.
//  КомандаИмя        - Строка           - Имя команды, в которой возникло данное событие.
//  ПараметрыДействия - Структура        - Набор параметров, использующихся при выполнения операции.
//  Объект            - Произвольный     - основной объект формы.
//
// Возвращаемое значение:
//  Булево
//
Функция ОбработкаКомандыФормы(Форма, КомандаИмя, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если СтрНачинаетсяС(КомандаИмя, "КомандаДополнительнойОбработкиЗаполнения") Тогда
		
		РезультатВыполнения = Неопределено;
		ПараметрыКоманды = ДополнительныеОтчетыИОбработкиАльфаАвто.ОписаниеКомандыОбработки(КомандаИмя,
							Форма.Команды.Найти("АдресКомандДополнительныхОбработокВоВременномХранилище").Действие);
		РезультатВыполнения = ДополнительныеОтчетыИОбработки.ВыполнитьКоманду(ПараметрыКоманды); 
		
		Если РезультатВыполнения <> Неопределено Тогда
			
			Для каждого Элемент Из РезультатВыполнения Цикл
				
				ПараметрыДействия.Вставить(Элемент.Ключ, Элемент.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КомандаИмя, "УтверждениеДокументов") Тогда
		
		УтверждениеДокументовСервер.ОбработкаКомандыФормы(Форма, КомандаИмя, Объект.Ссылка, ПараметрыДействия);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Общий обработчик события возникающего при оповещении формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  Форма                   - УправляемаяФорма - Форма, в которой возникло событие.
//  РезультатОповещения     - Произвольный     - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный     - Значение, которое было указано при создании описания оповещения.
//  Объект                  - Произвольный     - основной объект формы.
//
// Возвращаемое значение:
//  Булево
//
Функция ОбработкаРезультатаОповещения(Форма,
                                      РезультатОповещения,
                                      ДополнительныеПараметры = Неопределено,
                                      Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если ДополнительныеПараметры = "ПараметрыДокумента" Тогда
		
		ОбработкаРеквизитовДокументаСервер.ПараметрыДокументаПриИзменении(Объект, РезультатОповещения);
		ПараметрыДокументаПриИзменении(Форма, РезультатОповещения, Объект);
		
	ИначеЕсли ДополнительныеПараметры = "РазрешенияДляПересчета" Тогда
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		МенеджерОбъекта.ОбработкаПересчетаПоказателейОбъекта(Объект, РезультатОповещения);
		
		Если ЕстьРеквизит(Объект,, "Товары") Тогда
			
			ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Товары);
			
			Если Форма.Элементы.Найти("ТоварыХарактеристикаНоменклатуры") <> Неопределено Тогда
				
				ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(Форма,,, Объект);
				
			КонецЕсли;
			
			Если Форма.Элементы.Найти("ТоварыГруппаКодыМаркировки") <> Неопределено Тогда
				
				ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиКодыМаркировки(Форма,,, Объект);
				
			КонецЕсли;
			
			Если Форма.Элементы.Найти("ТоварыСодержание") <> Неопределено Тогда
				
				ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиСодержаниеУслуги(Форма, , , Объект);
				
				Если Форма.Элементы.Найти("ТоварыСодержаниеДоКорректировки") <> Неопределено Тогда
				
					ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиСодержаниеУслуги(Форма, , "ДоКорректировки", Объект);
				
				КонецЕсли;
				
			КонецЕсли;
			
			ОтображатьОстаток = ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюОстатковТовара")
				И (ЕстьРеквизит(Объект, "ОстатокНаСкладе", "Товары")
					ИЛИ ЕстьРеквизит(Объект, "ОстатокНаОрдерномСкладе", "Товары"));
			
			Если Форма.Элементы.Найти("ТоварыОстатокНаСкладе") <> Неопределено Тогда
				
				Форма.Элементы.ТоварыОстатокНаСкладе.Видимость = ОтображатьОстаток;
				
			КонецЕсли;
			
			Если ОтображатьОстаток Тогда
				
				ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект);
				
			КонецЕсли;
			
			Если Форма.Элементы.Найти("ТоварыГруппаКодыМаркировки") <> Неопределено Тогда
				
				ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиКодыМаркировки(Форма,,, Объект);
				ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		УправлениеДиалогомСервер.ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры, Объект);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Настройка таможенной декларации на форму документа.
//
// Параметры:
//  Форма                   - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект                  - Произвольный     - основной объект формы.
//
Процедура УстановитьЗаголовокНадписиТаможеннаяДекларация(Форма, Объект) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	Ссылка = Объект.Ссылка;
	
	Если Форма.Элементы.Найти("НадписьТаможеннаяДекларация") = Неопределено 
		ИЛИ НЕ ЕстьРеквизит(Форма, "ТаможеннаяДекларация") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Форма.ТаможеннаяДекларация = Документы.ТаможеннаяДекларацияИмпорт.ПустаяСсылка();
		Форма.Элементы.НадписьТаможеннаяДекларация.Заголовок = НСтр("ru = 'Ввести таможенную декларацию'");
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПодчиненныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
	|ГДЕ
	|	ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основание", Ссылка);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Форма.ТаможеннаяДекларация = Выборка.Ссылка;
		Форма.Элементы.НадписьТаможеннаяДекларация.Заголовок = Выборка.Ссылка;
	Иначе
		Форма.ТаможеннаяДекларация = Документы.ТаможеннаяДекларацияИмпорт.ПустаяСсылка();
		Форма.Элементы.НадписьТаможеннаяДекларация.Заголовок = НСтр("ru = 'Ввести таможенную декларацию'");
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.Документы.ТаможеннаяДекларацияИмпорт;
	Форма.Элементы.НадписьТаможеннаяДекларация.Доступность = ПравоДоступа("Добавление",ОбъектМетаданных);
	
КонецПроцедуры

// Производит установку параметров отбора для выбора документа авансов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Объект - Неопределено, ДанныеФормыСтруктура - основной объект формы.
//  ИмяОбъекта - Строка - Имя объекта к данным.
//  ДополнительныеПараметры - Структура - Параметры для определения полей отбора по объекту.
//
Процедура РасставитьСвязиПараметровВыбораДокументовАванса(
		Форма,
		Объект = Неопределено,
		ИмяОбъекта = "Объект",
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяРеквизитаДокументаАванса = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры,
		"ИмяРеквизитаДокументаАванса",
		"ЗачетАвансовДокументАванса");
	ИмяРеквизитаОрганизация = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры,
		"ИмяРеквизитаОрганизация",
		"Организация");
	ИмяРеквизитаКонтрагент = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры,
		"ИмяРеквизитаКонтрагент",
		"Контрагент");
	ИмяРеквизитаДоговорВзаиморасчетов = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры,
		"ИмяРеквизитаДоговорВзаиморасчетов",
		"ДоговорВзаиморасчетов");
	
	Если Форма.Элементы.Найти(ИмяРеквизитаДокументаАванса) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	СвязиПараметровВыбора = Новый Массив();
	
	Если ЕстьРеквизит(Объект, ИмяРеквизитаОрганизация) Тогда
		СвязиПараметровВыбора.Добавить(
			Новый СвязьПараметраВыбора("Отбор.Организация", ИмяОбъекта + "." + ИмяРеквизитаОрганизация));
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, ИмяРеквизитаКонтрагент) Тогда
		СвязиПараметровВыбора.Добавить(
			Новый СвязьПараметраВыбора("Отбор.Контрагент", ИмяОбъекта + "." + ИмяРеквизитаКонтрагент));
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, ИмяРеквизитаДоговорВзаиморасчетов) Тогда
		СвязиПараметровВыбора.Добавить(
			Новый СвязьПараметраВыбора("Отбор.ДоговорВзаиморасчетов", ИмяОбъекта + "." + ИмяРеквизитаДоговорВзаиморасчетов));
	КонецЕсли;
	
	Форма.Элементы[ИмяРеквизитаДокументаАванса].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти

// Процедура производит возможность редактирования документа при наличии подчиненных документов.
//
// Параметры:
//  Форма  - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект - ДокументСсылка   - Объект, для которого выполняется формирование представления итогов.
//
Процедура ПроверитьНаличиеПодчиненныхДокументов(Форма, Объект) Экспорт
	
	Если
		НЕ ОбщегоНазначения.ЭтоДокумент(Объект.Метаданные())
		ИЛИ Форма.ТолькоПросмотр
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТолькоПросмотр = Ложь;
	ОбработкаСобытийДокументаСервер.ЗаблокироватьПриНаличииПодчиненных(Объект, ТолькоПросмотр);
	Форма.ТолькоПросмотр = ТолькоПросмотр;
	
КонецПроцедуры

// Получение списка возможных адресов для контаргента - физлица
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент, для которого получаем адреса.
//  ВидАдреса  - СправочникСсылка.ВидыКонтактнойИнформации - ссылка, вид адреса.
//
// Возвращаемое значение:
//  Массив из Строка - Содержит представления контактной информации с типом "Адрес" для данного контрагента.
// 
Функция АдресаКонтрагента(Контрагент, ВидАдреса = Неопределено) Экспорт
	
	Адреса = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент
	|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	
	Если ВидАдреса <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И КонтрагентыКонтактнаяИнформация.Вид = &ВидКИ";
		Запрос.УстановитьПараметр("ВидКИ", ВидАдреса);
	КонецЕсли;
	
	Адреса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Представление");
	
	Возврат Адреса;
	
КонецФункции

// Получение списка представлений подтверждающих документов, удостоверяющих личность контаргента - физлица
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент, для которого получаем документы.
//  КодВидаДокумента - Число - Код вида документа подтверждающего личность.
//
// Возвращаемое значение:
//  Массив из Строка - Содержит представления подтверждающих документов для данного контрагента.
//
Функция ДокументыУдостоверяющиеЛичностьКонтрагента(Контрагент, КодВидаДокумента) Экспорт
	
	УдостоверяющиеДокументы = Новый Массив;
	
	Если Контрагент.ФормаСобственности <> Перечисления.ФормыСобственности.ЧастноеЛицо
		ИЛИ НЕ ЗначениеЗаполнено(КодВидаДокумента) Тогда
		Возврат УдостоверяющиеДокументы;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("КодВидаДокументаУдостоверяющегоЛичность", КодВидаДокумента);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодтверждающиеДокументы.Представление КАК Представление
	|ИЗ
	|	Справочник.ПодтверждающиеДокументы КАК ПодтверждающиеДокументы
	|ГДЕ
	|	ПодтверждающиеДокументы.КодВидаДокументаУдостоверяющегоЛичность = &КодВидаДокументаУдостоверяющегоЛичность
	|	И ПодтверждающиеДокументы.Владелец = &Контрагент
	|	И ПодтверждающиеДокументы.Текущий";
	
	УдостоверяющиеДокументы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Представление");
	
	Возврат УдостоверяющиеДокументы;
	
КонецФункции

// Формирует установку и вывод надписи-подсказки о печати бумажного варианта чека.
//
// Параметры:
//  Форма						 - УправляемаяФорма - Форма, в которой возникло событие.
//  ККТ							 - СправочникСсылка.ПодключаемойОборудование - Выбранное ККТ для пробития.
//  КонтактныеДанныеПокупателя	 - Строка - Номер телефона или адрес электронной почты для отправки электронного чека.
//  Выводить					 - Булево - Признак того, что необходимо выводить надпись.
//
Процедура УстановитьИнформациюПечатиЧека(Форма, ККТ, КонтактныеДанныеПокупателя, Выводить) Экспорт
	
	// Установка видимости группы элементов формы
	Форма.Элементы.ИнформацияПечатиЧека.Видимость = Выводить И ЗначениеЗаполнено(ККТ);
	
	// Установим текст надписи для вывода пользователю
	Если НЕ Форма.Элементы.ИнформацияПечатиЧека.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получим параметры оборудования
	ПараметрыУстройства = Справочники.ПодключаемоеОборудование.ПараметрыУстройства(ККТ);
	
	// Найдем параметр устройства (настройку) не БПО драйвера
	РежимПечатиЧека = Неопределено;
	ПараметрыУстройства.Свойство("P_EnablePrinting", РежимПечатиЧека);
	НеПечататьЧек = Константы.НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателю.Получить();
	
	Если РежимПечатиЧека = 2 Тогда
		// Бумажный чек никогда не формируется
		ПредставлениеИнформации = Новый Массив;
		ПредставлениеИнформации.Добавить(НСтр("ru = 'В соответствии с настройками пользователя чек не будет'"));
		ПредставлениеИнформации.Добавить(НСтр("ru = 'печататься независимо от того будет ли он отправлен покупателю на'"));
		ПредставлениеИнформации.Добавить(НСтр("ru = 'почтовый ящик или сообщением на телефон.'"));
		ПредставлениеИнформации.Добавить(НСтр("ru = 'Для изменения настройки обратитесь к Администратору.'"));
		Форма.ПредставлениеИнформацииПечатиЧека = СтрСоединить(ПредставлениеИнформации, " ");
	ИначеЕсли РежимПечатиЧека = 0 Тогда
		// Бумажный чек всегда формируется
		ПредставлениеИнформации = Новый Массив;
		ПредставлениеИнформации.Добавить(НСтр("ru = 'В соответствии с настройками пользователя чек будет'"));
		ПредставлениеИнформации.Добавить(НСтр("ru = 'печататься независимо от того будет ли он отправлен покупателю на'"));
		ПредставлениеИнформации.Добавить(НСтр("ru = 'почтовый ящик или сообщением на телефон.'"));
		ПредставлениеИнформации.Добавить(НСтр("ru = 'Для изменения настройки обратитесь к Администратору.'"));
		Форма.ПредставлениеИнформацииПечатиЧека = СтрСоединить(ПредставлениеИнформации, " ");
	ИначеЕсли НеПечататьЧек И ЗначениеЗаполнено(КонтактныеДанныеПокупателя) Тогда
		// Бумажный чек не формируется
		Форма.ПредставлениеИнформацииПечатиЧека = НСтр("ru = 'После пробития не будет напечатан бумажный чек.'");
	ИначеЕсли НеПечататьЧек Тогда
		// Бумажный чек формируется 
		ПредставлениеИнформации = Новый Массив;
		ПредставлениеИнформации.Добавить(НСтр("ru = 'После пробития будет напечатан бумажный чек.'"));
		ПредставлениеИнформации.Добавить(НСтр("ru = 'Если нет необходимости печатать чек на кассовой ленте необходимо'"));
		ПредставлениеИнформации.Добавить(НСтр("ru = 'заполнить контактные данные покупателя, в таком случае чек будет'"));
		ПредставлениеИнформации.Добавить(НСтр("ru = 'отправлен покупателю.'"));
		Форма.ПредставлениеИнформацииПечатиЧека = СтрСоединить(ПредставлениеИнформации, " ");
	Иначе
		// Бумажный чек формируется
		Форма.ПредставлениеИнформацииПечатиЧека = НСтр("ru = 'После пробития будет напечатан бумажный чек.'");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения поля "Телефон/email покупателя".
//
// Параметры:
//  ТелефонEmail - Строка - проверямые данные;
//
// Возвращаемое значение:
//  Строка - текст ошибки
//
Функция ПроверитьКорректностьЗаполненияТелефонEmail(Знач ТелефонEmail) Экспорт
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(ТелефонEmail) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если ПраваИНастройкиПользователя.Значение("ПроверятьКорректностьТелефонEmailВДокументахОплаты") Тогда
		
		ТелефонEmail = СтрЗаменить(ТелефонEmail, " " ,"");
		ТелефонEmail = СтрЗаменить(ТелефонEmail, "(" ,"");
		ТелефонEmail = СтрЗаменить(ТелефонEmail, ")" ,"");
		ТелефонEmail = СтрЗаменить(ТелефонEmail, "-" ,"");
		
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ТелефонEmail) Тогда
			// Это Email и он заполнен корректно
			Возврат ТекстОшибки;
		ИначеЕсли
			ОбщегоНазначенияАвтосалонКлиентСервер.СтрокаСодержитТолькоДопустимыеСимволы(ТелефонEmail, "+0123456789")
		Тогда
			
			ДлинаНомера = СтрДлина(ТелефонEmail);
			Если ДлинаНомера > 12 Тогда
				Возврат НСтр("ru = 'В поле ""Телефон или электронный адрес покупателя"" введены некорректные данные'");
			КонецЕсли;
			
			Если СтрНайти(ТелефонEmail, "+") = 1 И ДлинаНомера = 12 Тогда
				// считаем что номер задан верно.
				Возврат ТекстОшибки;
			Иначе
				Если ДлинаНомера = 11 Тогда
					// предположим, что телефон ввели в формате 8 *** ***-**-**.
					ТелефонБезКода = ОбщегоНазначенияАвтосалонКлиентСервер.НомерТелефонаБезКодаСтраны(ТелефонEmail);
					Если Прав(ТелефонEmail, 10) <> ТелефонБезКода Тогда
						ТекстОшибки = НСтр("ru = 'В поле ""Телефон или электронный адрес покупателя"" введены некорректные данные'");
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'В поле ""Телефон или электронный адрес покупателя"" введены некорректные данные'");
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ТекстОшибки = НСтр("ru = 'В поле ""Телефон или электронный адрес покупателя"" введены некорректные данные'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура УстановитьЗаголовокКолонокЗачетаАвансов(
		Форма,
		Объект = Неопределено,
		Договор = Неопределено,
		ИменаСуммАвансов = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если Договор = Неопределено Тогда
		
		Если Не ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") Тогда
			Возврат;
		КонецЕсли;
		
		Договор = Объект.ДоговорВзаиморасчетов;
		
	КонецЕсли;
	
	НаименованиеВалютыДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Договор, "ВалютаВзаиморасчетов");
	
	ИмяЗачетАвансовСумма = ПолучитьЗначениеПараметраСтруктуры(
		ИменаСуммАвансов,
		"ИмяЗачетАвансовСумма",
		"ЗачетАвансовСумма");
	Если Форма.Элементы.Найти(ИмяЗачетАвансовСумма) <> Неопределено Тогда
		Форма.Элементы[ИмяЗачетАвансовСумма].Заголовок =
			СтрШаблон(НСтр("ru = 'Сумма, %1'"), НаименованиеВалютыДоговора);
	КонецЕсли;
	ИмяЗачетАвансовСуммаОстаток = ПолучитьЗначениеПараметраСтруктуры(
		ИменаСуммАвансов,
		"ИмяЗачетАвансовСуммаОстаток",
		"ЗачетАвансовСуммаОстаток");
	Если Форма.Элементы.Найти(ИмяЗачетАвансовСуммаОстаток) <> Неопределено Тогда
		Форма.Элементы[ИмяЗачетАвансовСуммаОстаток].Заголовок =
			СтрШаблон(НСтр("ru = 'Остаток, %1'"), НаименованиеВалютыДоговора);
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокКолонокЗачетаАвансов()

// Заполним доступность флага "Авто закрытие сделок"
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  ИмяТабличнойЧасти - Строка - Имя таблицы, при редактировании которой возникло данное событие.
//
Процедура УстановитьДоступностьСпособаЗачатаАвансов(Форма, Объект, ИмяТабличнойЧасти = "Товары") Экспорт
	
	// Определим, имеет ли смысл давать возможность пользователю редактировать колонку сумма всего.
	Если НЕ Форма.Элементы.Найти("СпособЗачетаАвансов") = Неопределено Тогда
		Форма.Элементы.СпособЗачетаАвансов.ТолькоПросмотр =
			НЕ ПраваИНастройкиПользователя.Значение("РедактированиеСпособаЗачатаАвансов", Объект);
	КонецЕсли;
	
	Если НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти + "СпособЗачетаАвансов") = Неопределено Тогда
		Форма.Элементы[ИмяТабличнойЧасти + "СпособЗачетаАвансов"].ТолькоПросмотр =
			НЕ ПраваИНастройкиПользователя.Значение("РедактированиеСпособаЗачатаАвансов", Объект);
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьСпособаЗачатаАвансов()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьДокументОснование(Документ)
	
	Если Документ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Документ = Метаданные.Документы.АвансовыйОтчет
		ИЛИ Документ = Метаданные.Документы.АктПриемаПередачиЦенныхБумаг
		ИЛИ Документ = Метаданные.Документы.ВводОстатковВзаиморасчетов
		ИЛИ Документ = Метаданные.Документы.Взаимозачет
		ИЛИ Документ = Метаданные.Документы.Выписка
		ИЛИ Документ = Метаданные.Документы.ВыплатаЗарплаты
		ИЛИ Документ = Метаданные.Документы.ЗаявкаНаРасходДС
		ИЛИ Документ = Метаданные.Документы.Инкассация
		ИЛИ Документ = Метаданные.Документы.КорректировкаДолга
		ИЛИ Документ = Метаданные.Документы.НачислениеЗарплаты
		ИЛИ Документ = Метаданные.Документы.ОбслуживаниеАктива
		ИЛИ Документ = Метаданные.Документы.ПереоценкаВалютныхСредств
		ИЛИ Документ = Метаданные.Документы.ПланПоступленияДС
		ИЛИ Документ = Метаданные.Документы.РасходныйКассовыйОрдер
		ИЛИ Документ = Метаданные.Документы.ПриходныйКассовыйОрдер Тогда
			Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДокументОснование()

Функция ИницализацияТаблицыДокументаОснования()
	
	Результат = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	Результат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов(Массив,,, Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Результат.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	Результат.Колонки.Добавить("Коэффициент",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	Результат.Колонки.Добавить("КоличествоБазовое",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Результат.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("ПризнакПредметаРасчета",Новый ОписаниеТипов("ПеречислениеСсылка.ПризнакиПредметаРасчета"));
	Результат.Колонки.Добавить("СуммаВсего",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	Результат.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("СуммаСкидкиСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("СкидкаНаТовар",Новый ОписаниеТипов("СправочникСсылка.ТипыСкидок"));
	Результат.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("СуммаОплаты", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("ДоговорВзаиморасчетов",Новый ОписаниеТипов("СправочникСсылка.ДоговорыВзаиморасчетов"));
	Результат.Колонки.Добавить("ПризнакАгента",Новый ОписаниеТипов("ПеречислениеСсылка.ПризнакиАгента"));
	Результат.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(0,ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("Телефон",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(20,ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ИНН",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(12,ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("СебестоимостьАвтомобиля", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("СуммаСкидкиБонусами", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("ГТД",Новый ОписаниеТипов("СправочникСсылка.ГТД"));
	Результат.Колонки.Добавить("НомерТаможеннойДекларации",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(32,ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("КодСтраныПроисхожденияТовара",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(3,ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("Автомобиль",Новый ОписаниеТипов("СправочникСсылка.Автомобили"));
	
	Возврат Результат;
	
КонецФункции // ИницализацияТаблицыДокументаОснования()

Функция ТекстЗапросаСчетНаОплату()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СчетНаОплатуТовары.НомерСтроки КАК НомерСтроки,
		|	СчетНаОплатуТовары.Номенклатура КАК Номенклатура,
		|	СчетНаОплатуТовары.Количество КАК Количество,
		|	СчетНаОплатуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СчетНаОплатуТовары.Коэффициент КАК Коэффициент,
		|	СчетНаОплатуТовары.Цена КАК Цена,
		|	СчетНаОплатуТовары.Сумма КАК Сумма,
		|	СчетНаОплатуТовары.СтавкаНДС КАК СтавкаНДС,
		|	СчетНаОплатуТовары.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
		|	СчетНаОплатуТовары.СуммаНДС КАК СуммаНДС,
		|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СчетНаОплатуТовары.СуммаВсего КАК СуммаВсего,
		|	СчетНаОплатуТовары.СуммаСкидки КАК СуммаСкидки,
		|	СчетНаОплатуТовары.ПроцентСкидки КАК ПроцентСкидки,
		|	СчетНаОплатуТовары.СкидкаНаТовар КАК СкидкаНаТовар,
		|	СчетНаОплатуТовары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
		|	СчетНаОплатуТовары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
		|	СчетНаОплатуТовары.Номенклатура.ТипНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
		|ИЗ
		|	Документ.СчетНаОплату.Товары КАК СчетНаОплатуТовары
		|ГДЕ
		|	СчетНаОплатуТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетНаОплатуАвтоработы.НомерСтроки,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.Авторабота),
		|	СчетНаОплатуАвтоработы.Количество,
		|	СчетНаОплатуАвтоработы.Нормочас,
		|	СчетНаОплатуАвтоработы.Коэффициент,
		|	СчетНаОплатуАвтоработы.Цена,
		|	СчетНаОплатуАвтоработы.Сумма,
		|	СчетНаОплатуАвтоработы.СтавкаНДС,
		|	СчетНаОплатуАвтоработы.СтавкаНДС.Ставка,
		|	СчетНаОплатуАвтоработы.СуммаНДС,
		|	СчетНаОплатуАвтоработы.Авторабота.Наименование,
		|	СчетНаОплатуАвтоработы.СуммаВсего,
		|	СчетНаОплатуАвтоработы.СуммаСкидки,
		|	СчетНаОплатуАвтоработы.ПроцентСкидки,
		|	СчетНаОплатуАвтоработы.СкидкаНаТовар,
		|	СчетНаОплатуАвтоработы.ПроцентСкидкиСтроки,
		|	СчетНаОплатуАвтоработы.СуммаСкидкиСтроки,
		|	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.Номенклатура.Авторабота) КАК Справочник.Номенклатура).ТипНоменклатуры.ПризнакПредметаРасчета
		|ИЗ
		|	Документ.СчетНаОплату.Автоработы КАК СчетНаОплатуАвтоработы
		|ГДЕ
		|	СчетНаОплатуАвтоработы.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРеализацияАктивов()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РеализацияАктивовАктивы.НомерСтроки,
		|	РеализацияАктивовАктивы.ПрочийАктив.Номенклатура КАК Номенклатура,
		|	РеализацияАктивовАктивы.Сумма,
		|	РеализацияАктивовАктивы.СтавкаНДС,
		|	РеализацияАктивовАктивы.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
		|	РеализацияАктивовАктивы.СуммаНДС,
		|	РеализацияАктивовАктивы.Количество,
		|	РеализацияАктивовАктивы.ПрочийАктив.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РеализацияАктивовАктивы.ПрочийАктив.Наименование КАК ХарактеристикаНоменклатуры,
		|	РеализацияАктивовАктивы.Сумма КАК СуммаВсего,
		|	РеализацияАктивовАктивы.ПрочийАктив.Номенклатура.ТипНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
		|ИЗ
		|	Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
		|ГДЕ
		|	РеализацияАктивовАктивы.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияАктивовАктивы.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИнвентаризация()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТовары.НомерСтроки КАК НомерСтроки,
		|	ИнвентаризацияТовары.Номенклатура КАК Номенклатура,
		|	-ИнвентаризацияТовары.Количество КАК Количество,
		|	ИнвентаризацияТовары.ЕдиницаИзмерения,
		|	ИнвентаризацияТовары.Коэффициент,
		|	ИнвентаризацияТовары.Цена КАК Цена,
		|	-ИнвентаризацияТовары.Сумма КАК Сумма,
		|	ИнвентаризацияТовары.ХарактеристикаНоменклатуры,
		|	ИнвентаризацияТовары.Номенклатура.ТипНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
		|ИЗ
		|	Документ.Инвентаризация.Товары КАК ИнвентаризацияТовары
		|ГДЕ
		|	ИнвентаризацияТовары.Ссылка = &Ссылка
		|	И ИнвентаризацияТовары.Количество < 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаможеннаяДекларацияИмпорт()
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	ТаможеннаяДекларацияИмпортТовары.НомерСтроки,
		|	ТаможеннаяДекларацияИмпортТовары.Номенклатура,
		|	ТаможеннаяДекларацияИмпортТовары.ХарактеристикаНоменклатуры,
		|	ТаможеннаяДекларацияИмпортТовары.ЕдиницаИзмерения,
		|	ТаможеннаяДекларацияИмпортТовары.Коэффициент,
		|	ТаможеннаяДекларацияИмпортТовары.Количество,
		|	ТаможеннаяДекларацияИмпортТовары.СуммаПошлины,
		|	ТаможеннаяДекларацияИмпортТовары.СуммаНДС,
		|	ТаможеннаяДекларацияИмпортТовары.СуммаПошлины + ТаможеннаяДекларацияИмпортТовары.СуммаНДС КАК СуммаВсего,
		|	ТаможеннаяДекларацияИмпортРазделы.СтавкаНДС,
		|	ТаможеннаяДекларацияИмпортРазделы.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
		|    ТаможеннаяДекларацияИмпортТовары.Номенклатура.ТипНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ТаможеннаяДекларацияИмпортРазделы
		|		ПО ТаможеннаяДекларацияИмпортТовары.Ссылка = ТаможеннаяДекларацияИмпортРазделы.Ссылка
		|			И ТаможеннаяДекларацияИмпортТовары.НомерРаздела = ТаможеннаяДекларацияИмпортРазделы.НомерРаздела
		|ГДЕ
		|	ТаможеннаяДекларацияИмпортТовары.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаказНаряд()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗаказНарядТовары.НомерСтроки КАК НомерСтроки,
		|	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
		|	ЗаказНарядТовары.Количество КАК Количество,
		|	ЗаказНарядТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказНарядТовары.Коэффициент КАК Коэффициент,
		|	ЗаказНарядТовары.Цена КАК Цена,
		|	ЗаказНарядТовары.Сумма КАК Сумма,
		|	ЗаказНарядТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказНарядТовары.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
		|	ЗаказНарядТовары.СуммаНДС КАК СуммаНДС,
		|	ЗаказНарядТовары.ПроцентСкидки КАК ПроцентСкидки,
		|	ЗаказНарядТовары.СуммаСкидки КАК СуммаСкидки,
		|	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказНарядТовары.СуммаВсего КАК СуммаВсего,
		|	ЗаказНарядТовары.СкидкаНаТовар КАК СкидкаНаТовар,
		|	ЗаказНарядТовары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
		|	ЗаказНарядТовары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
		|	ЗаказНарядТовары.СуммаСкидкиБонусами КАК СуммаСкидкиБонусами,
		|	ЗаказНарядТовары.Номенклатура.ТипНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
		|ИЗ
		|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
		|ГДЕ
		|	ЗаказНарядТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНарядРаботы.НомерСтроки,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.Авторабота),
		|	ЗаказНарядРаботы.Количество,
		|	ЗаказНарядРаботы.Авторабота.Номенклатура.ОсновнаяЕдиницаИзмерения,
		|	ЗаказНарядРаботы.Коэффициент,
		|	ЗаказНарядРаботы.Цена,
		|	ЗаказНарядРаботы.Сумма,
		|	ЗаказНарядРаботы.СтавкаНДС,
		|	ЗаказНарядРаботы.СтавкаНДС.Ставка,
		|	ЗаказНарядРаботы.СуммаНДС,
		|	ЗаказНарядРаботы.ПроцентСкидки,
		|	ЗаказНарядРаботы.СуммаСкидки,
		|	ЗаказНарядРаботы.Авторабота.Наименование,
		|	ЗаказНарядРаботы.СуммаВсего,
		|	ЗаказНарядРаботы.СкидкаНаТовар,
		|	ЗаказНарядРаботы.ПроцентСкидкиСтроки,
		|	ЗаказНарядРаботы.СуммаСкидкиСтроки,
		|	ЗаказНарядРаботы.СуммаСкидкиБонусами,
		|	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.Номенклатура.Авторабота) КАК Справочник.Номенклатура).ТипНоменклатуры.ПризнакПредметаРасчета
		|ИЗ
		|	Документ.ЗаказНаряд.Автоработы КАК ЗаказНарядРаботы
		|ГДЕ
		|	ЗаказНарядРаботы.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИнвентаризацияАвтомобилей()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИнвентаризацияАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.Автомобиль) КАК Номенклатура,
		|	ИнвентаризацияАвтомобилейАвтомобили.Количество КАК Количество,
		|	1 КАК Коэффициент,
		|	ИнвентаризацияАвтомобилейАвтомобили.Цена КАК Цена,
		|	ИнвентаризацияАвтомобилейАвтомобили.Сумма КАК Сумма,
		|	ИнвентаризацияАвтомобилейАвтомобили.Автомобиль.VIN КАК ХарактеристикаНоменклатуры,
		|	ИнвентаризацияАвтомобилейАвтомобили.Сумма КАК СуммаВсего,
		|	ИнвентаризацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
		|	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.Номенклатура.Автомобиль) КАК Справочник.Номенклатура).ТипНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
		|ИЗ
		|	Документ.ИнвентаризацияАвтомобилей.Автомобили КАК ИнвентаризацияАвтомобилейАвтомобили
		|ГДЕ
		|	ИнвентаризацияАвтомобилейАвтомобили.Ссылка = &Ссылка
		|	И ИнвентаризацияАвтомобилейАвтомобили.КоличествоУчет - ИнвентаризацияАвтомобилейАвтомобили.Количество < 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаказНаАвтомобиль()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	NULL КАК НомерСтроки,
		|	ЗаказНаАвтомобиль.Автомобиль КАК Номенклатура,
		|	1 КАК Количество,
		|	ЗаказНаАвтомобиль.ЦенаАвтомобиля КАК Цена,
		|	ЗаказНаАвтомобиль.ЦенаАвтомобиля КАК Сумма,
		|	ЗаказНаАвтомобиль.СтавкаНДСНаАвтомобиль КАК СтавкаНДС,
		|	ЗаказНаАвтомобиль.СтавкаНДСНаАвтомобиль.Ставка КАК СтавкаНДССтавка,
		|	ЗаказНаАвтомобиль.СуммаНДСНаАвтомобиль КАК СуммаНДС,
		|	ЗаказНаАвтомобиль.ЗначениеСкидкиНаценки КАК ПроцентСкидки,
		|	ЗаказНаАвтомобиль.СуммаСкидкиНаценки КАК СуммаСкидки,
		|	""VIN "" + ЗаказНаАвтомобиль.Автомобиль.VIN КАК ХарактеристикаНоменклатуры,
		|	ЗаказНаАвтомобиль.СуммаВсегоНаАвтомобиль КАК СуммаВсего,
		|	ЗаказНаАвтомобиль.УдалитьСкидкаНаценкаНаАвтомобиль КАК СкидкаНаТовар,
		|	ЗаказНаАвтомобиль.УдалитьПроцентСкидкиНаАвтомобиль КАК ПроцентСкидкиСтроки,
		|	ЗаказНаАвтомобиль.СуммаРучнойСкидкиНаАвтомобиль КАК СуммаСкидкиСтроки,
		|	ЗаказНаАвтомобиль.СебестоимостьАвтомобиля КАК СебестоимостьАвтомобиля
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль КАК ЗаказНаАвтомобиль
		|ГДЕ
		|	ЗаказНаАвтомобиль.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаАвтомобильОпции.НомерСтроки,
		|	ЗаказНаАвтомобильОпции.Опция,
		|	ЗаказНаАвтомобильОпции.Количество,
		|	ЗаказНаАвтомобильОпции.Цена,
		|	ЗаказНаАвтомобильОпции.Сумма,
		|	ЗаказНаАвтомобильОпции.СтавкаНДС,
		|	ЗаказНаАвтомобильОпции.СтавкаНДС.Ставка,
		|	ЗаказНаАвтомобильОпции.СуммаНДС,
		|	ЗаказНаАвтомобильОпции.УдалитьПроцентСкидки,
		|	ЗаказНаАвтомобильОпции.УдалитьСуммаСкидки,
		|	"""",
		|	ЗаказНаАвтомобильОпции.СуммаВсего,
		|	NULL,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль.Опции КАК ЗаказНаАвтомобильОпции
		|ГДЕ
		|	ЗаказНаАвтомобильОпции.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаАвтомобильТовары.НомерСтроки,
		|	ЗаказНаАвтомобильТовары.Номенклатура,
		|	ЗаказНаАвтомобильТовары.Количество,
		|	ЗаказНаАвтомобильТовары.Цена,
		|	ЗаказНаАвтомобильТовары.Сумма,
		|	ЗаказНаАвтомобильТовары.СтавкаНДС,
		|	ЗаказНаАвтомобильТовары.СтавкаНДС.Ставка,
		|	ЗаказНаАвтомобильТовары.СуммаНДС,
		|	ЗаказНаАвтомобильТовары.ПроцентСкидки,
		|	ЗаказНаАвтомобильТовары.СуммаСкидки,
		|	ЗаказНаАвтомобильТовары.ХарактеристикаНоменклатуры,
		|	ЗаказНаАвтомобильТовары.СуммаВсего,
		|	ЗаказНаАвтомобильТовары.СкидкаНаТовар,
		|	ЗаказНаАвтомобильТовары.ПроцентСкидкиСтроки,
		|	ЗаказНаАвтомобильТовары.СуммаСкидкиСтроки,
		|	0
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль.Товары КАК ЗаказНаАвтомобильТовары
		|ГДЕ
		|	ЗаказНаАвтомобильТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	NULL,
		|	0,
		|	0,
		|	0,
		|	NULL,
		|	0,
		|	0,
		|	NULL,
		|	ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Значение,
		|	NULL,
		|	0,
		|	NULL,
		|	NULL,
		|	0,
		|	0
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль.СкидкиИМаркетинговыеПрограммы КАК ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы
		|ГДЕ
		|	ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуТоваровПоЗаказуНаАвтомобиль(ДокументОснование, Результат, ПараметрыПересчета)
	
	ТекстЗапроса = ТекстЗапросаЗаказНаАвтомобиль();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	ВыборкаСтрока = Запрос.Выполнить().Выбрать();
	
	НоменклатураАвтомобиль = Справочники.Номенклатура.Автомобиль;
	АвтомобильТипНоменклатуры = НоменклатураАвтомобиль.ТипНоменклатуры;
	
	Если ВыборкаСтрока.Следующий() Тогда
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		НоваяСтрока.Автомобиль = ВыборкаСтрока.Номенклатура;
		НоваяСтрока.Номенклатура = АвтомобилиСервер.НоменклатураАвтомобиля(
			ВыборкаСтрока.Номенклатура, НоменклатураАвтомобиль);
		Если ТипЗнч(ВыборкаСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили")
			И ЗначениеЗаполнено(ВыборкаСтрока.Номенклатура.VIN) Тогда
			VIN = ВыборкаСтрока.Номенклатура.VIN;
		Иначе
			VIN = ВыборкаСтрока.Номенклатура.Наименование;
		КонецЕсли;
		
		ХарактеристикаНоменклатурыНаименование = "VIN " + VIN;
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
			ХарактеристикаНоменклатурыНаименование,
			Истина,, АвтомобильТипНоменклатуры);
		
		Если ХарактеристикаНоменклатуры.Пустая() Тогда
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			ХарактеристикаНоменклатуры.УстановитьНовыйКод();
			ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
			ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
			ХарактеристикаНоменклатуры.СерийныйНомер = VIN;
			ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
			Попытка
				ХарактеристикаНоменклатуры.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),Символы.ПС, ОписаниеОшибки())
				);
			КонецПопытки;
		КонецЕсли;
		НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.Количество = 1;
		ЗначениеСтавкиНДС = ВыборкаСтрока.СтавкаНДССтавка;
		
		Сумма = 0;
		СуммаНДС = 0;
		СуммаСкидки = 0;
		СуммаСкидкиСтроки = 0;
		СуммаВсего = 0;
		Количество = 0;
		СебестоимостьАвтомобиля = 0;
		КоэффициентНДС = 100;
		
		Пока ВыборкаСтрока.Следующий() Цикл
			Сумма = Сумма + ВыборкаСтрока.Сумма;
			СуммаСкидки = СуммаСкидки + ВыборкаСтрока.СуммаСкидки;
			СуммаСкидкиСтроки = СуммаСкидкиСтроки + ВыборкаСтрока.СуммаСкидкиСтроки;
			СебестоимостьАвтомобиля = СебестоимостьАвтомобиля + ВыборкаСтрока.СебестоимостьАвтомобиля;
			
			Количество = Количество + ВыборкаСтрока.Количество;
			
			Если ПараметрыПересчета.ТребуетсяПересчет Тогда
					СуммаВсего = СуммаВсего + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						ВыборкаСтрока.СуммаВсего,
						ПараметрыПересчета.ВалютаДокументаОснования, ПараметрыПересчета.КурсДокументаОснования,
						ПараметрыПересчета.ВалютаДокумента, ПараметрыПересчета.КурсДокумента);
					СуммаНДС = СуммаНДС + Окр(ВыборкаСтрока.СуммаВсего * ВыборкаСтрока.СтавкаНДССтавка
						/ (КоэффициентНДС+ВыборкаСтрока.СтавкаНДССтавка), 2);
				Иначе
					СуммаВсего = СуммаВсего + ВыборкаСтрока.СуммаВсего;
					СуммаНДС = СуммаНДС + ВыборкаСтрока.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока.СуммаСкидки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаСкидки + СуммаСкидки,
				ПараметрыПересчета.ВалютаДокументаОснования, ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента, ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаВсего,
				ПараметрыПересчета.ВалютаДокументаОснования, ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента, ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.СуммаСкидкиСтроки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаСкидкиСтроки + СуммаСкидкиСтроки,
				ПараметрыПересчета.ВалютаДокументаОснования, ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента, ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.Сумма    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.Сумма + Сумма,
				ПараметрыПересчета.ВалютаДокументаОснования,ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента, ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.Цена     = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.Сумма / НоваяСтрока.Количество,
				ПараметрыПересчета.ВалютаДокументаОснования, ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента, ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.СебестоимостьАвтомобиля = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СебестоимостьАвтомобиля,
				ПараметрыПересчета.ВалютаДокументаОснования, ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента, ПараметрыПересчета.КурсДокумента);
				
			Если ПараметрыПересчета.ТребуетсяПересчет Тогда
				НоваяСтрока.СуммаНДС = Окр((НоваяСтрока.СуммаВсего - НоваяСтрока.СебестоимостьАвтомобиля)
					* ЗначениеСтавкиНДС / (КоэффициентНДС + ЗначениеСтавкиНДС), 2);
			КонецЕсли;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + СуммаНДС;
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + СуммаВсего;
			
			// Так как автоработы номеруются так же, как и товары, то будем заполнять номер строки сквозной нумерацией.
			НоваяСтрока.НомерСтроки = Результат.Количество();
			
		КонецЕсли;
	
	ЗаполнениеДаннымиАвтомобиля(ДокументОснование, Результат);
	
	Возврат ?(Результат.Количество()=0, Неопределено, Результат);
	
КонецФункции // ПолучитьТаблицуТоваровПоЗаказуНаАвтомобиль()

Функция ПолучитьТаблицуТоваровПоОтчетуКомитентуЗаАвтомобили(ДокументОснование, Результат, ПараметрыПересчета)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.НомерСтроки КАК НомерСтроки,
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.Автомобиль КАК Номенклатура,
		|	1 КАК Количество,
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.Цена КАК Цена,
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.Сумма КАК Сумма,
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.СтавкаНДС КАК СтавкаНДС,
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.СуммаНДС КАК СуммаНДС,
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.СуммаВсего КАК СуммаВсего,
		|	""VIN "" + ОтчетКомитентуЗаАвтомобилиАвтомобили.Автомобиль.VIN КАК ХарактеристикаНоменклатуры,
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.ДокументПоступления КАК ДокументПоступления
		|ИЗ
		|	Документ.ОтчетКомитентуЗаАвтомобили.Автомобили КАК ОтчетКомитентуЗаАвтомобилиАвтомобили
		|ГДЕ
		|	ОтчетКомитентуЗаАвтомобилиАвтомобили.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НоменклатураАвтомобиль = Справочники.Номенклатура.Автомобиль;
	АвтомобильТипНоменклатуры = НоменклатураАвтомобиль.ТипНоменклатуры;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Автомобиль = Выборка.Номенклатура;
		НоваяСтрока.Номенклатура = АвтомобилиСервер.НоменклатураАвтомобиля(Выборка.Номенклатура, НоменклатураАвтомобиль);
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.Автомобили")
			И ЗначениеЗаполнено(Выборка.Номенклатура.VIN) Тогда
			VIN = Выборка.Номенклатура.VIN;
		Иначе
			VIN = Выборка.Номенклатура.Наименование;
		КонецЕсли;
		
		ХарактеристикаНоменклатурыНаименование = "VIN " + VIN;
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
			ХарактеристикаНоменклатурыНаименование,
			Истина,,
			АвтомобильТипНоменклатуры);
		
		Если ХарактеристикаНоменклатуры.Пустая() Тогда
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			ХарактеристикаНоменклатуры.УстановитьНовыйКод();
			ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
			ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
			ХарактеристикаНоменклатуры.СерийныйНомер = VIN;
			ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
			Попытка
				ХарактеристикаНоменклатуры.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),Символы.ПС, ОписаниеОшибки())
				);
			КонецПопытки;
		КонецЕсли;
		НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.Количество = 1;
		
		НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.СуммаВсего,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента);
		НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.Сумма,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента);
		НоваяСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.Сумма / НоваяСтрока.Количество,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента);
			
		Если НЕ ПараметрыПересчета.КурсДокументаОснования = ПараметрыПересчета.КурсДокумента Тогда
			КоэффициентНДС = 100;
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаВсего * Выборка.СтавкаНДССтавка
				/ (КоэффициентНДС + Выборка.СтавкаНДССтавка), 2);
		КонецЕсли;
		
		// Так как автоработы номеруются так же, как и товары, то будем заполнять номер строки сквозной нумерацией
		НоваяСтрока.НомерСтроки = Результат.Количество();
		
	КонецЦикла;
	
	ЗаполнениеДаннымиАвтомобиля(ДокументОснование, Результат);
	
	Возврат ?(Результат.Количество()=0, Неопределено, Результат);
	
КонецФункции

Функция ПолучитьТаблицуПоВовзратуПоставщикуАвтомобилией(ДокументОснование, Результат, ПараметрыПересчета)
	
	МетаданныеДокументаОснования = Метаданные.НайтиПоТипу(ТипЗнч(ДокументОснование));
	РеквизитыТабличнойЧастиДокументаОснования = МетаданныеДокументаОснования.ТабличныеЧасти.Автомобили.Реквизиты;
	ИмяДокументаОснования = МетаданныеДокументаОснования.Имя;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	"+ИмяДокументаОснования+"Автомобили.НомерСтроки КАК НомерСтроки,
		|	"+ИмяДокументаОснования+"Автомобили.Автомобиль КАК Номенклатура,
		|	"+ИмяДокументаОснования+"Автомобили.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
		|	"+ИмяДокументаОснования+"Автомобили.Количество КАК Количество,
		|	"+ИмяДокументаОснования+"Автомобили.Цена КАК Цена,
		|	"+ИмяДокументаОснования+"Автомобили.Сумма КАК Сумма,
		|	"+ИмяДокументаОснования+"Автомобили.СтавкаНДС КАК СтавкаНДС,
		|	"+ИмяДокументаОснования+"Автомобили.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
		|	"+ИмяДокументаОснования+"Автомобили.СуммаНДС КАК СуммаНДС,
		|	"+ИмяДокументаОснования+"Автомобили.СуммаВсего КАК СуммаВсего,
		|	"+ИмяДокументаОснования+"Автомобили.Автомобиль.ГТД КАК ГТД,
		|	"+ИмяДокументаОснования+"Автомобили.Автомобиль.ГТД.Наименование КАК НомерТаможеннойДекларации,
		|	"+ИмяДокументаОснования+"Автомобили.Автомобиль.ГТД.Страна.Код КАК КодСтраныПроисхожденияТовара,
		|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("ДокументПередачи") = Неопределено, "",
				ИмяДокументаОснования+"Автомобили.ДокументПередачи КАК ДокументПередачи,")+"
		|	""VIN "" + "+ИмяДокументаОснования+"Автомобили.Автомобиль.VIN КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ."+ИмяДокументаОснования+".Автомобили КАК "+ИмяДокументаОснования+"Автомобили
		|ГДЕ
		|	"+ИмяДокументаОснования+"Автомобили.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"+ИмяДокументаОснования+"Товары.НомерСтроки,
		|	"+ИмяДокументаОснования+"Товары.Номенклатура,
		|	"+ИмяДокументаОснования+"Товары.ИдентификаторАвтомобиля,
		|	"+ИмяДокументаОснования+"Товары.Количество,
		|	"+ИмяДокументаОснования+"Товары.Цена,
		|	"+ИмяДокументаОснования+"Товары.Сумма,
		|	"+ИмяДокументаОснования+"Товары.СтавкаНДС,
		|	"+ИмяДокументаОснования+"Товары.СтавкаНДС.Ставка,
		|	"+ИмяДокументаОснования+"Товары.СуммаНДС,
		|	"+ИмяДокументаОснования+"Товары.СуммаВсего,
		|	NULL,
		|	NULL,
		|	NULL,
		|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("ДокументПередачи") = Неопределено, "", "NULL,")+"
		|	"+ИмяДокументаОснования+"Товары.ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ."+ИмяДокументаОснования+".Товары КАК "+ИмяДокументаОснования+"Товары
		|ГДЕ
		|	"+ИмяДокументаОснования+"Товары.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	ИдентификаторАвтомобиля";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НоменклатураАвтомобиль = Справочники.Номенклатура.Автомобиль;
	АвтомобильТипНоменклатуры = НоменклатураАвтомобиль.ТипНоменклатуры;
	КоэффициентНДС = 100;
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаСтрока = Выборка.Выбрать();
		
		Если ВыборкаСтрока.Следующий() Тогда
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
			НоваяСтрока.Автомобиль = ВыборкаСтрока.Номенклатура;
			НоваяСтрока.Номенклатура = АвтомобилиСервер.НоменклатураАвтомобиля(
				ВыборкаСтрока.Номенклатура,
				НоменклатураАвтомобиль);
			Если ТипЗнч(ВыборкаСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили")
				И ЗначениеЗаполнено(ВыборкаСтрока.Номенклатура.VIN) Тогда
				VIN = ВыборкаСтрока.Номенклатура.VIN;
			Иначе
				VIN = ВыборкаСтрока.Номенклатура.Наименование;
			КонецЕсли;
			
			ХарактеристикаНоменклатурыНаименование = "VIN " + VIN;
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
				ХарактеристикаНоменклатурыНаименование,
				Истина,,
				АвтомобильТипНоменклатуры);
			
			Если ХарактеристикаНоменклатуры.Пустая() Тогда
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ХарактеристикаНоменклатуры.УстановитьНовыйКод();
				ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
				ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
				ХарактеристикаНоменклатуры.СерийныйНомер = VIN;
				ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
				
				Попытка
					
					ХарактеристикаНоменклатуры.Записать();
					
				Исключение
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),Символы.ПС, ОписаниеОшибки())
					);
					
				КонецПопытки;
				
			КонецЕсли;
			НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Количество = 1;
			
			ЗначениеСтавкиНДС = ВыборкаСтрока.СтавкаНДССтавка;
			
			Сумма = 0;
			СуммаНДС = 0;
			СуммаВсего = 0;
			Количество = 0;
			
			Пока ВыборкаСтрока.Следующий() Цикл
				Сумма = Сумма + ВыборкаСтрока.Сумма;
				СуммаСкидки = СуммаСкидки + ВыборкаСтрока.СуммаСкидки;
				СуммаСкидкиСтроки = СуммаСкидкиСтроки + ВыборкаСтрока.СуммаСкидкиСтроки;
				
				Количество = Количество + ВыборкаСтрока.Количество;
				
				Если ПараметрыПересчета.ТребуетсяПересчет Тогда
					СуммаВсего = СуммаВсего + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						ВыборкаСтрока.СуммаВсего,
						ПараметрыПересчета.ВалютаДокументаОснования,
						ПараметрыПересчета.КурсДокументаОснования,
						ПараметрыПересчета.ВалютаДокумента,
						ПараметрыПересчета.КурсДокумента);
					СуммаНДС = СуммаНДС + Окр(ВыборкаСтрока.СуммаВсего * ВыборкаСтрока.СтавкаНДССтавка
						/ (КоэффициентНДС+ВыборкаСтрока.СтавкаНДССтавка), 2);
				Иначе
					СуммаВсего = СуммаВсего + ВыборкаСтрока.СуммаВсего;
					СуммаНДС = СуммаНДС + ВыборкаСтрока.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаВсего,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.Сумма + Сумма,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.Сумма / НоваяСтрока.Количество,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			Если ПараметрыПересчета.ТребуетсяПересчет Тогда
				НоваяСтрока.СуммаНДС = Окр((НоваяСтрока.СуммаВсего - НоваяСтрока.СебестоимостьАвтомобиля) * ЗначениеСтавкиНДС
					/ (КоэффициентНДС + ЗначениеСтавкиНДС), 2);
			КонецЕсли;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + СуммаНДС;
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + СуммаВсего;
			
			// Так как автоработы номеруются так же, как и товары, то будем заполнять номер строки сквозной нумерацией
			НоваяСтрока.НомерСтроки = Результат.Количество();
		
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнениеДаннымиАвтомобиля(ДокументОснование, Результат);
	
	Возврат ?(Результат.Количество()=0, Неопределено, Результат);
	
КонецФункции

Функция ПолучитьТаблицуПоВозвратуОтПокупателяАвтомобилей(ДокументОснование, Результат, ПараметрыПересчета)
	
	МетаданныеДокументаОснования = Метаданные.НайтиПоТипу(ТипЗнч(ДокументОснование));
	ИмяДокументаОснования = МетаданныеДокументаОснования.Имя;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	"+ИмяДокументаОснования+"Автомобили.НомерСтроки КАК НомерСтроки,
		|	"+ИмяДокументаОснования+"Автомобили.Автомобиль КАК Номенклатура,
		|	"+ИмяДокументаОснования+"Автомобили.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
		|	"+ИмяДокументаОснования+"Автомобили.Количество,
		|	"+ИмяДокументаОснования+"Автомобили.Цена,
		|	"+ИмяДокументаОснования+"Автомобили.Сумма,
		|	"+ИмяДокументаОснования+"Автомобили.СтавкаНДС,
		|	"+ИмяДокументаОснования+"Автомобили.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
		|	"+ИмяДокументаОснования+"Автомобили.СуммаНДС,
		|	0 КАК ПроцентСкидки,
		|	"+ИмяДокументаОснования+"Автомобили.СуммаСкидки,
		|	"+ИмяДокументаОснования+"Автомобили.СуммаВсего,
		|	"+ИмяДокументаОснования+"Автомобили.Автомобиль.ГТД КАК ГТД,
		|	"+ИмяДокументаОснования+"Автомобили.Автомобиль.ГТД.Наименование КАК НомерТаможеннойДекларации,
		|	"+ИмяДокументаОснования+"Автомобили.Автомобиль.ГТД.Страна.Код КАК КодСтраныПроисхожденияТовара,
		|	""VIN "" + "+ИмяДокументаОснования+"Автомобили.Автомобиль.VIN КАК ХарактеристикаНоменклатуры,
		|	0 КАК СуммаСкидкиСтроки,
		|	"+ИмяДокументаОснования+"Автомобили.СебестоимостьАвтомобиля КАК СебестоимостьАвтомобиля
		|ИЗ
		|	Документ."+ИмяДокументаОснования+".Автомобили КАК "+ИмяДокументаОснования+"Автомобили
		|ГДЕ
		|	"+ИмяДокументаОснования+"Автомобили.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"+ИмяДокументаОснования+"Товары.НомерСтроки,
		|	"+ИмяДокументаОснования+"Товары.Номенклатура,
		|	"+ИмяДокументаОснования+"Товары.ИдентификаторАвтомобиля,
		|	"+ИмяДокументаОснования+"Товары.Количество,
		|	"+ИмяДокументаОснования+"Товары.Цена,
		|	"+ИмяДокументаОснования+"Товары.Сумма,
		|	"+ИмяДокументаОснования+"Товары.СтавкаНДС,
		|	"+ИмяДокументаОснования+"Товары.СтавкаНДС.Ставка,
		|	"+ИмяДокументаОснования+"Товары.СуммаНДС,
		|	"+ИмяДокументаОснования+"Товары.ПроцентСкидки,
		|	"+ИмяДокументаОснования+"Товары.СуммаСкидки,
		|	"+ИмяДокументаОснования+"Товары.СуммаВсего,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	"+ИмяДокументаОснования+"Товары.СуммаСкидкиСтроки,
		|	0
		|ИЗ
		|	Документ."+ИмяДокументаОснования+".Товары КАК "+ИмяДокументаОснования+"Товары
		|ГДЕ
		|	"+ИмяДокументаОснования+"Товары.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	ИдентификаторАвтомобиля";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НоменклатураАвтомобиль = Справочники.Номенклатура.Автомобиль;
	АвтомобильТипНоменклатуры = НоменклатураАвтомобиль.ТипНоменклатуры;
	КоэффициентНДС = 100;
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаСтрока = Выборка.Выбрать();
		
		Если ВыборкаСтрока.Следующий() Тогда
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
			НоваяСтрока.Автомобиль = ВыборкаСтрока.Номенклатура;
			НоваяСтрока.Номенклатура = АвтомобилиСервер.НоменклатураАвтомобиля(
				ВыборкаСтрока.Номенклатура,
				НоменклатураАвтомобиль);
			Если ТипЗнч(ВыборкаСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили")
				И ЗначениеЗаполнено(ВыборкаСтрока.Номенклатура.VIN) Тогда
				
				VIN = ВыборкаСтрока.Номенклатура.VIN;
			
				Иначе
				VIN = ВыборкаСтрока.Номенклатура.Наименование;
			КонецЕсли;
			
			ХарактеристикаНоменклатурыНаименование = "VIN " + VIN;
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
				ХарактеристикаНоменклатурыНаименование,
				Истина,,
				АвтомобильТипНоменклатуры);
			
			Если ХарактеристикаНоменклатуры.Пустая() Тогда
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ХарактеристикаНоменклатуры.УстановитьНовыйКод();
				ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
				ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
				ХарактеристикаНоменклатуры.СерийныйНомер = VIN;
				ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
				
				Попытка
					
					ХарактеристикаНоменклатуры.Записать();
					
				Исключение
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),Символы.ПС, ОписаниеОшибки())
					);
						
				КонецПопытки;
			КонецЕсли;
			НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Количество = 1;
			
			ЗначениеСтавкиНДС = ВыборкаСтрока.СтавкаНДССтавка;
			
			Сумма = 0;
			СуммаНДС = 0;
			СуммаСкидки = 0;
			СуммаСкидкиСтроки = 0;
			СуммаВсего = 0;
			Количество = 0;
			
			Пока ВыборкаСтрока.Следующий() Цикл
				Сумма = Сумма + ВыборкаСтрока.Сумма;
				СуммаСкидки = СуммаСкидки + ВыборкаСтрока.СуммаСкидки;
				СуммаСкидкиСтроки = СуммаСкидкиСтроки + ВыборкаСтрока.СуммаСкидкиСтроки;
				
				Количество = Количество + ВыборкаСтрока.Количество;
				
				Если ПараметрыПересчета.ТребуетсяПересчет Тогда
					СуммаВсего = СуммаВсего + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						ВыборкаСтрока.СуммаВсего,
						ПараметрыПересчета.ВалютаДокументаОснования,
						ПараметрыПересчета.КурсДокументаОснования,
						ПараметрыПересчета.ВалютаДокумента,
						ПараметрыПересчета.КурсДокумента);
					СуммаНДС = СуммаНДС + Окр(ВыборкаСтрока.СуммаВсего * ВыборкаСтрока.СтавкаНДССтавка
						/ (КоэффициентНДС+ВыборкаСтрока.СтавкаНДССтавка), 2);
				Иначе
					СуммаВсего = СуммаВсего + ВыборкаСтрока.СуммаВсего;
					СуммаНДС = СуммаНДС + ВыборкаСтрока.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока.СуммаСкидки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаСкидки + СуммаСкидки,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаВсего,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.СуммаСкидкиСтроки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаСкидкиСтроки + СуммаСкидкиСтроки,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.Сумма + Сумма,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.Сумма / НоваяСтрока.Количество,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.СебестоимостьАвтомобиля = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СебестоимостьАвтомобиля,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			Если ПараметрыПересчета.ТребуетсяПересчет Тогда
				НоваяСтрока.СуммаНДС = Окр((НоваяСтрока.СуммаВсего - НоваяСтрока.СебестоимостьАвтомобиля)
					* ЗначениеСтавкиНДС / (КоэффициентНДС + ЗначениеСтавкиНДС), 2);
			КонецЕсли;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + СуммаНДС;
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + СуммаВсего;
			
			// Так как автоработы номеруются так же, как и товары, то будем заполнять номер строки сквозной нумерацией.
			НоваяСтрока.НомерСтроки = Результат.Количество();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнениеДаннымиАвтомобиля(ДокументОснование, Результат);
	
	Возврат ?(Результат.Количество()=0, Неопределено, Результат);
	
КонецФункции

Функция ПолучитьТаблицуПоРеализацииАвтомобилей(ДокументОснование, Результат, ПараметрыПересчета)
	
	МетаданныеДокументаОснования = Метаданные.НайтиПоТипу(ТипЗнч(ДокументОснование));
	ИмяДокументаОснования = МетаданныеДокументаОснования.Имя;
	
	ЧастиТекстаЗапроса = Новый Массив();
	ЧастиТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	" + ИмяДокументаОснования + "Автомобили.НомерСтроки КАК НомерСтроки,
		|	" + ИмяДокументаОснования + "Автомобили.Автомобиль КАК Номенклатура,
		|	" + ?(ЕстьРеквизит(ДокументОснование, "ИдентификаторАвтомобиля", "Автомобили"),
					ИмяДокументаОснования + "Автомобили.ИдентификаторАвтомобиля",
					ИмяДокументаОснования + "Автомобили.Автомобиль") + " КАК ИдентификаторАвтомобиля,
		|	" + ИмяДокументаОснования + "Автомобили.Количество,
		|	" + ИмяДокументаОснования + "Автомобили.Цена,
		|	" + ИмяДокументаОснования + "Автомобили.Сумма,
		|	" + ИмяДокументаОснования + "Автомобили.СтавкаНДС,
		|	" + ИмяДокументаОснования + "Автомобили.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
		|	" + ИмяДокументаОснования + "Автомобили.СуммаНДС,
		|	0 КАК ПроцентСкидки,
		|	" + ИмяДокументаОснования + "Автомобили.СуммаСкидки,
		|	" + ИмяДокументаОснования + "Автомобили.СуммаВсего,
		|	" + ИмяДокументаОснования + "Автомобили.Автомобиль.ГТД КАК ГТД,
		|	" + ИмяДокументаОснования + "Автомобили.Автомобиль.ГТД.Наименование КАК НомерТаможеннойДекларации,
		|	" + ИмяДокументаОснования + "Автомобили.Автомобиль.ГТД.Страна.Код КАК КодСтраныПроисхожденияТовара,
		|	""VIN "" + " + ИмяДокументаОснования + "Автомобили.Автомобиль.VIN КАК ХарактеристикаНоменклатуры,
		|	0 КАК СуммаСкидкиСтроки,
		|	" + ?(ЕстьРеквизит(ДокументОснование, "СебестоимостьАвтомобиля", "Автомобили"),
					ИмяДокументаОснования + "Автомобили.СебестоимостьАвтомобиля",
					"0") + " КАК СебестоимостьАвтомобиля
		|ИЗ
		|	Документ." + ИмяДокументаОснования + ".Автомобили КАК " + ИмяДокументаОснования + "Автомобили
		|ГДЕ
		|	" + ИмяДокументаОснования + "Автомобили.Ссылка = &Ссылка");

	Если ЕстьРеквизит(ДокументОснование, "Товары") Тогда
		
		ЧастиТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	" + ИмяДокументаОснования + "Товары.НомерСтроки,
		|	" + ИмяДокументаОснования + "Товары.Номенклатура,
		|	" + ИмяДокументаОснования + "Товары.ИдентификаторАвтомобиля,
		|	" + ИмяДокументаОснования + "Товары.Количество,
		|	" + ИмяДокументаОснования + "Товары.Цена,
		|	" + ИмяДокументаОснования + "Товары.Сумма,
		|	" + ИмяДокументаОснования + "Товары.СтавкаНДС,
		|	" + ИмяДокументаОснования + "Товары.СтавкаНДС.Ставка,
		|	" + ИмяДокументаОснования + "Товары.СуммаНДС,
		|	" + ИмяДокументаОснования + "Товары.ПроцентСкидки,
		|	" + ИмяДокументаОснования + "Товары.СуммаСкидки,
		|	" + ИмяДокументаОснования + "Товары.СуммаВсего,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	" + ИмяДокументаОснования + "Товары.СуммаСкидкиСтроки,
		|	0
		|ИЗ
		|	Документ." + ИмяДокументаОснования + ".Товары КАК " + ИмяДокументаОснования + "Товары
		|ГДЕ
		|	" + ИмяДокументаОснования + "Товары.Ссылка = &Ссылка");
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ЧастиТекстаЗапроса, "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|");
	ТекстЗапроса = ТекстЗапроса + "
		|
		|ИТОГИ ПО
		|	ИдентификаторАвтомобиля";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НоменклатураАвтомобиль = Справочники.Номенклатура.Автомобиль;
	АвтомобильТипНоменклатуры = НоменклатураАвтомобиль.ТипНоменклатуры;
	КоэфициентНДС = 100;
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаСтрока = Выборка.Выбрать();
		
		Если ВыборкаСтрока.Следующий() Тогда
		
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
			НоваяСтрока.Автомобиль = ВыборкаСтрока.Номенклатура;
			НоваяСтрока.Номенклатура = АвтомобилиСервер.НоменклатураАвтомобиля(
				ВыборкаСтрока.Номенклатура,
				НоменклатураАвтомобиль);
			Если ТипЗнч(ВыборкаСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили")
				И ЗначениеЗаполнено(ВыборкаСтрока.Номенклатура.VIN) Тогда
				VIN = ВыборкаСтрока.Номенклатура.VIN;
			Иначе
				VIN = ВыборкаСтрока.Номенклатура.Наименование;
			КонецЕсли;
			
			ХарактеристикаНоменклатурыНаименование = "VIN " + VIN;
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
				ХарактеристикаНоменклатурыНаименование,
				Истина,,
				АвтомобильТипНоменклатуры);
			
			Если ХарактеристикаНоменклатуры.Пустая() Тогда
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ХарактеристикаНоменклатуры.УстановитьНовыйКод();
				ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
				ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
				ХарактеристикаНоменклатуры.СерийныйНомер = VIN;
				ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
				Попытка
					
					ХарактеристикаНоменклатуры.Записать();
					
				Исключение
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),Символы.ПС, ОписаниеОшибки())
					);

				КонецПопытки;
			КонецЕсли;
			НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Количество = 1;
			
			ЗначениеСтавкиНДС = ВыборкаСтрока.СтавкаНДССтавка;
			
			Сумма = 0;
			СуммаНДС = 0;
			СуммаСкидки = 0;
			СуммаСкидкиСтроки = 0;
			СуммаВсего = 0;
			Количество = 0;
			
			Пока ВыборкаСтрока.Следующий() Цикл
				Сумма = Сумма + ВыборкаСтрока.Сумма;
				СуммаСкидки = СуммаСкидки + ВыборкаСтрока.СуммаСкидки;
				СуммаСкидкиСтроки = СуммаСкидкиСтроки + ВыборкаСтрока.СуммаСкидкиСтроки;
				
				Количество = Количество + ВыборкаСтрока.Количество;
				
				Если ПараметрыПересчета.ТребуетсяПересчет Тогда
					СуммаВсего = СуммаВсего + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						ВыборкаСтрока.СуммаВсего,
						ПараметрыПересчета.ВалютаДокументаОснования,
						ПараметрыПересчета.КурсДокументаОснования,
						ПараметрыПересчета.ВалютаДокумента,
						ПараметрыПересчета.КурсДокумента);
						СуммаНДС = СуммаНДС + Окр(ВыборкаСтрока.СуммаВсего * ВыборкаСтрока.СтавкаНДССтавка
							/ (КоэфициентНДС+ВыборкаСтрока.СтавкаНДССтавка), 2);
				Иначе
					СуммаВсего = СуммаВсего + ВыборкаСтрока.СуммаВсего;
					СуммаНДС = СуммаНДС + ВыборкаСтрока.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока.СуммаСкидки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаСкидки + СуммаСкидки,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаВсего,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.СуммаСкидкиСтроки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СуммаСкидкиСтроки + СуммаСкидкиСтроки,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.Сумма + Сумма,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.Сумма / НоваяСтрока.Количество,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			НоваяСтрока.СебестоимостьАвтомобиля = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				НоваяСтрока.СебестоимостьАвтомобиля,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
			Если ПараметрыПересчета.ТребуетсяПересчет Тогда
				НоваяСтрока.СуммаНДС = Окр((НоваяСтрока.СуммаВсего - НоваяСтрока.СебестоимостьАвтомобиля) * ЗначениеСтавкиНДС
					/ (КоэфициентНДС + ЗначениеСтавкиНДС), 2);
			КонецЕсли;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + СуммаНДС;
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + СуммаВсего;
			
			// Так как автоработы номеруются так же, как и товары, то будем заполнять номер строки сквозной нумерацией
			НоваяСтрока.НомерСтроки = Результат.Количество();
			
		КонецЕсли;
			
	КонецЦикла;
	
	ЗаполнениеДаннымиАвтомобиля(ДокументОснование, Результат);
	
	Возврат ?(Результат.Количество()=0, Неопределено, Результат);
	
КонецФункции

Функция ПолучитьТаблицуПоПоступлениюАвтомобилей(ДокументОснование, Результат, ПараметрыПересчета)
	
	МетаданныеДокументаОснования = Метаданные.НайтиПоТипу(ТипЗнч(ДокументОснование));
	ИмяДокументаОснования = МетаданныеДокументаОснования.Имя;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	               |	ПоступлениеАвтомобилейАвтомобили.Цена,
	               |	ПоступлениеАвтомобилейАвтомобили.Сумма,
	               |	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС,
	               |	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
	               |	ПоступлениеАвтомобилейАвтомобили.СуммаНДС,
	               |	""VIN "" + ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN КАК ХарактеристикаНоменклатуры,
	               |	ПоступлениеАвтомобилейАвтомобили.СуммаВсего,
	               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль.ГТД,
	               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль.ГТД.Наименование КАК НомерТаможеннойДекларации,
	               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль.ГТД.Страна.Код КАК КодСтраныПроисхожденияТовара,
	               |	ПоступлениеАвтомобилейАвтомобили.Ссылка,
	               |	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.Номенклатура.Автомобиль) КАК Справочник.Номенклатура).ТипНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
	               |ИЗ
	               |	Документ."+ИмяДокументаОснования+".Автомобили КАК ПоступлениеАвтомобилейАвтомобили
	               |ГДЕ
	               |	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	ВыборкаСтрока = Запрос.Выполнить().Выбрать();
	
	НоменклатураАвтомобиль = Справочники.Номенклатура.Автомобиль;
	АвтомобильТипНоменклатуры = НоменклатураАвтомобиль.ТипНоменклатуры;
	КоэффициентНДС = 100;
	
	Пока ВыборкаСтрока.Следующий() Цикл
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		НоваяСтрока.Автомобиль = ВыборкаСтрока.Номенклатура;
		НоваяСтрока.Номенклатура = АвтомобилиСервер.НоменклатураАвтомобиля(
			ВыборкаСтрока.Номенклатура,
			НоменклатураАвтомобиль);
		Если ТипЗнч(ВыборкаСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили")
			И ЗначениеЗаполнено(ВыборкаСтрока.Номенклатура.VIN) Тогда
			
			VIN = ВыборкаСтрока.Номенклатура.VIN;
			
			Иначе
			VIN = ВыборкаСтрока.Номенклатура.Наименование;
		КонецЕсли;
		
		ХарактеристикаНоменклатурыНаименование = "VIN " + VIN;
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
		ХарактеристикаНоменклатурыНаименование,
		Истина,
		,
		АвтомобильТипНоменклатуры
		);
		
		Если ХарактеристикаНоменклатуры.Пустая() Тогда
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			ХарактеристикаНоменклатуры.УстановитьНовыйКод();
			ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
			ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
			ХарактеристикаНоменклатуры.СерийныйНомер = VIN;
			ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
			
			Попытка
				
				ХарактеристикаНоменклатуры.Записать();
				
			Исключение
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),Символы.ПС, ОписаниеОшибки())
				);

			КонецПопытки;
			
		КонецЕсли;
		НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.Количество = 1;
		
		НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ВыборкаСтрока.СуммаВсего,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента);
		НоваяСтрока.Сумма      = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ВыборкаСтрока.Сумма, 
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента);
		НоваяСтрока.Цена       = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		
		Если НЕ ПараметрыПересчета.КурсДокументаОснования = ПараметрыПересчета.КурсДокумента Тогда
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаВсего * ВыборкаСтрока.СтавкаНДССтавка
				/ (КоэффициентНДС + ВыборкаСтрока.СтавкаНДССтавка), 2);
		КонецЕсли;
		
		// Так как автоработы номеруются так же, как и товары, то будем заполнять номер строки сквозной нумерацией
		НоваяСтрока.НомерСтроки = Результат.Количество();
		
	КонецЦикла;
	
	ЗаполнениеДаннымиАвтомобиля(ДокументОснование, Результат);
	
	Возврат ?(Результат.Количество()=0, Неопределено, Результат);
	
КонецФункции

Функция ПолучитьТаблицуПоВводОстатковАвтомобилей(ДокументОснование, Результат, ПараметрыПересчета)
	
	МетаданныеДокументаОснования = Метаданные.НайтиПоТипу(ТипЗнч(ДокументОснование));
	ИмяДокументаОснования = МетаданныеДокументаОснования.Имя;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	               |	ПоступлениеАвтомобилейАвтомобили.Цена,
	               |	ПоступлениеАвтомобилейАвтомобили.Сумма,
	               |	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС,
	               |	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
	               |	ПоступлениеАвтомобилейАвтомобили.СуммаНДС,
	               |	""VIN "" + ПоступлениеАвтомобилейАвтомобили.Автомобиль.VIN КАК ХарактеристикаНоменклатуры,
	               |	ПоступлениеАвтомобилейАвтомобили.СуммаВсего,
	               |	ПоступлениеАвтомобилейАвтомобили.Ссылка
	               |ИЗ
	              |	Документ."+ИмяДокументаОснования+".Автомобили КАК ПоступлениеАвтомобилейАвтомобили
	               |ГДЕ
	               |	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	ВыборкаСтрока = Запрос.Выполнить().Выбрать();
	
	НоменклатураАвтомобиль = Справочники.Номенклатура.Автомобиль;
	АвтомобильТипНоменклатуры = НоменклатураАвтомобиль.ТипНоменклатуры;
	КоэффициентНДС = 100;
	
	Пока ВыборкаСтрока.Следующий() Цикл
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		НоваяСтрока.Автомобиль = ВыборкаСтрока.Номенклатура;
		НоваяСтрока.Номенклатура = АвтомобилиСервер.НоменклатураАвтомобиля(
			ВыборкаСтрока.Номенклатура,
			НоменклатураАвтомобиль);
		Если ТипЗнч(ВыборкаСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили")
			И ЗначениеЗаполнено(ВыборкаСтрока.Номенклатура.VIN) Тогда
			VIN = ВыборкаСтрока.Номенклатура.VIN;
		Иначе
			VIN = ВыборкаСтрока.Номенклатура.Наименование;
		КонецЕсли;
		
		ХарактеристикаНоменклатурыНаименование = "VIN " + VIN;
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
			ХарактеристикаНоменклатурыНаименование,
			Истина,,
			АвтомобильТипНоменклатуры);
		
		Если ХарактеристикаНоменклатуры.Пустая() Тогда
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			ХарактеристикаНоменклатуры.УстановитьНовыйКод();
			ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
			ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
			ХарактеристикаНоменклатуры.СерийныйНомер = VIN;
			ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
			Попытка
				
				ХарактеристикаНоменклатуры.Записать();
				
			Исключение
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),Символы.ПС, ОписаниеОшибки())
				);

			КонецПопытки;
		КонецЕсли;
		НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.Количество = 1;
		
		НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ВыборкаСтрока.СуммаВсего,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента);
		НоваяСтрока.Сумма      = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ВыборкаСтрока.Сумма, 
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента);
		НоваяСтрока.Цена       = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		
		Если НЕ ПараметрыПересчета.КурсДокументаОснования = ПараметрыПересчета.КурсДокумента Тогда
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаВсего * ВыборкаСтрока.СтавкаНДССтавка
				/ (КоэффициентНДС + ВыборкаСтрока.СтавкаНДССтавка), 2);
		КонецЕсли;
		
		// Так как автоработы номеруются так же, как и товары, то будем заполнять номер строки сквозной нумерацией
		НоваяСтрока.НомерСтроки = Результат.Количество();
		
	КонецЦикла;
	
	ЗаполнениеДаннымиАвтомобиля(ДокументОснование, Результат);
	
	Возврат ?(Результат.Количество()=0, Неопределено, Результат);
	
КонецФункции

Функция ПолучитьТаблицуПоЗаказуПоставщикуНаАвтомобиль(ДокументОснование, Результат, ПараметрыПересчета)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	NULL КАК НомерСтроки,
		|	ЗаказПоставщикуНаАвтомобиль.Автомобиль КАК Номенклатура,
		|	1 КАК Количество,
		|	ЗаказПоставщикуНаАвтомобиль.ЦенаАвтомобиля КАК Цена,
		|	ЗаказПоставщикуНаАвтомобиль.ЦенаАвтомобиля КАК Сумма,
		|	ЗаказПоставщикуНаАвтомобиль.СтавкаНДСНаАвтомобиль КАК СтавкаНДС,
		|	ЗаказПоставщикуНаАвтомобиль.СтавкаНДСНаАвтомобиль.Ставка КАК СтавкаНДССтавка,
		|	ЗаказПоставщикуНаАвтомобиль.СуммаНДСНаАвтомобиль КАК СуммаНДС,
		|	""VIN "" + ЗаказПоставщикуНаАвтомобиль.Автомобиль.VIN КАК ХарактеристикаНоменклатуры,
		|	ЗаказПоставщикуНаАвтомобиль.СуммаВсегоНаАвтомобиль КАК СуммаВсего
		|ИЗ
		|	Документ.ЗаказПоставщикуНаАвтомобиль КАК ЗаказПоставщикуНаАвтомобиль
		|ГДЕ
		|	ЗаказПоставщикуНаАвтомобиль.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПоставщикуНаАвтомобильОпции.НомерСтроки,
		|	ЗаказПоставщикуНаАвтомобильОпции.Опция,
		|	ЗаказПоставщикуНаАвтомобильОпции.Количество,
		|	ЗаказПоставщикуНаАвтомобильОпции.Цена,
		|	ЗаказПоставщикуНаАвтомобильОпции.Сумма,
		|	ЗаказПоставщикуНаАвтомобильОпции.СтавкаНДС,
		|	ЗаказПоставщикуНаАвтомобильОпции.СтавкаНДС.Ставка,
		|	ЗаказПоставщикуНаАвтомобильОпции.СуммаНДС,
		|	"""",
		|	ЗаказПоставщикуНаАвтомобильОпции.СуммаВсего
		|ИЗ
		|	Документ.ЗаказПоставщикуНаАвтомобиль.Опции КАК ЗаказПоставщикуНаАвтомобильОпции
		|ГДЕ
		|	ЗаказПоставщикуНаАвтомобильОпции.Ссылка = &Ссылка";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	ВыборкаСтрока = Запрос.Выполнить().Выбрать();
	
	НоменклатураАвтомобиль = Справочники.Номенклатура.Автомобиль;
	АвтомобильТипНоменклатуры = НоменклатураАвтомобиль.ТипНоменклатуры;
	КоэффициентНДС = 100;
	
	Если ВыборкаСтрока.Следующий() Тогда
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		НоваяСтрока.Автомобиль = ВыборкаСтрока.Номенклатура;
		НоваяСтрока.Номенклатура = АвтомобилиСервер.НоменклатураАвтомобиля(
			ВыборкаСтрока.Номенклатура,
			НоменклатураАвтомобиль);
		Если ТипЗнч(ВыборкаСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили")
			И ЗначениеЗаполнено(ВыборкаСтрока.Номенклатура.VIN) Тогда
			VIN = ВыборкаСтрока.Номенклатура.VIN;
		Иначе
			VIN = ВыборкаСтрока.Номенклатура.Наименование;
		КонецЕсли;
		
		ЗначениеСтавкиНДС = ВыборкаСтрока.СтавкаНДССтавка;
		
		ХарактеристикаНоменклатурыНаименование = "VIN " + VIN;
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
			ХарактеристикаНоменклатурыНаименование,
			Истина,,
			АвтомобильТипНоменклатуры);
		
		Если ХарактеристикаНоменклатуры.Пустая() Тогда
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			ХарактеристикаНоменклатуры.УстановитьНовыйКод();
			ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
			ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
			ХарактеристикаНоменклатуры.СерийныйНомер = VIN;
			ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
			
			Попытка
				
				ХарактеристикаНоменклатуры.Записать();
				
			Исключение
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),Символы.ПС, ОписаниеОшибки())
				);

			КонецПопытки;
			
		КонецЕсли;
		НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.Количество = 1;
		
		Сумма = 0;
		СуммаНДС = 0;
		СуммаВсего = 0;
		
		Пока ВыборкаСтрока.Следующий() Цикл
			Сумма = Сумма + ВыборкаСтрока.Сумма;
		
			Если ПараметрыПересчета.ТребуетсяПересчет Тогда
				СуммаВсего = СуммаВсего + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ВыборкаСтрока.СуммаВсего,
				ПараметрыПересчета.ВалютаДокументаОснования,
				ПараметрыПересчета.КурсДокументаОснования,
				ПараметрыПересчета.ВалютаДокумента,
				ПараметрыПересчета.КурсДокумента);
				СуммаНДС = СуммаНДС + Окр(ВыборкаСтрока.СуммаВсего * ВыборкаСтрока.СтавкаНДССтавка
					/ (КоэффициентНДС+ВыборкаСтрока.СтавкаНДССтавка), 2);
			Иначе
				СуммаВсего = СуммаВсего + ВыборкаСтрока.СуммаВсего;
				СуммаНДС = СуммаНДС + ВыборкаСтрока.СуммаНДС;
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.СуммаВсего,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента);
		НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.Сумма + Сумма,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента);
		НоваяСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.Сумма / НоваяСтрока.Количество,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента);
			
		Если ПараметрыПересчета.ТребуетсяПересчет Тогда
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаВсего * ЗначениеСтавкиНДС
				/ (КоэффициентНДС + ЗначениеСтавкиНДС), 2);
		КонецЕсли;
		НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + СуммаНДС;
		НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + СуммаВсего;
		
		// Так как автоработы номеруются так же, как и товары, то будем заполнять номер строки сквозной нумерацией
		НоваяСтрока.НомерСтроки = Результат.Количество();
		
	КонецЕсли;
	
	Возврат ?(Результат.Количество()=0, Неопределено, Результат);
	
КонецФункции

Функция ТекстЗапросаАктРазногласий()
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	АктРазногласийТовары.НомерСтроки КАК НомерСтроки,
		|	АктРазногласийТовары.Номенклатура КАК Номенклатура,
		|	АктРазногласийТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	АктРазногласийТовары.Количество КАК Количество,
		|	АктРазногласийТовары.Коэффициент КАК Коэффициент,
		|	АктРазногласийТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	АктРазногласийТовары.Цена КАК Цена,
		|	АктРазногласийТовары.Сумма КАК Сумма,
		|	АктРазногласийТовары.СтавкаНДС КАК СтавкаНДС,
		|	АктРазногласийТовары.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
		|	АктРазногласийТовары.СуммаНДС КАК СуммаНДС,
		|	АктРазногласийТовары.ПроцентСкидки КАК ПроцентСкидки,
		|	АктРазногласийТовары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
		|	АктРазногласийТовары.СуммаСкидки КАК СуммаСкидки,
		|	АктРазногласийТовары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
		|	АктРазногласийТовары.СуммаВсего КАК СуммаВсего,
		|	АктРазногласийТовары.Номенклатура.ТипНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
		|ИЗ
		|	Документ.АктРазногласий.Товары КАК АктРазногласийТовары
		|ГДЕ
		|	АктРазногласийТовары.Ссылка = &Ссылка
		|	И АктРазногласийТовары.Подтверждение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктРазногласийРаботы.НомерСтроки,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.Авторабота),
		|	АктРазногласийРаботы.Авторабота.Наименование,
		|	АктРазногласийРаботы.Количество,
		|	АктРазногласийРаботы.Коэффициент,
		|	АктРазногласийРаботы.Авторабота.Номенклатура.ОсновнаяЕдиницаИзмерения,
		|	АктРазногласийРаботы.Цена,
		|	АктРазногласийРаботы.Сумма,
		|	АктРазногласийРаботы.СтавкаНДС,
		|	АктРазногласийРаботы.СтавкаНДС.Ставка,
		|	АктРазногласийРаботы.СуммаНДС,
		|	АктРазногласийРаботы.ПроцентСкидки,
		|	АктРазногласийРаботы.ПроцентСкидкиСтроки,
		|	АктРазногласийРаботы.СуммаСкидки,
		|	АктРазногласийРаботы.СуммаСкидкиСтроки,
		|	АктРазногласийРаботы.СуммаВсего,
		|	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.Номенклатура.Авторабота) КАК Справочник.Номенклатура).ТипНоменклатуры.ПризнакПредметаРасчета
		|ИЗ
		|	Документ.АктРазногласий.Автоработы КАК АктРазногласийРаботы
		|ГДЕ
		|	АктРазногласийРаботы.Ссылка = &Ссылка
		|	И АктРазногласийРаботы.Подтверждение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоваровОснования(МетаданныеДокументаОснования)
	
	РеквизитыТабличнойЧастиДокументаОснования = МетаданныеДокументаОснования.ТабличныеЧасти.Товары.Реквизиты;
	ИмяДокументаОснования = МетаданныеДокументаОснования.Имя;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	"+ИмяДокументаОснования+"Товары.НомерСтроки,
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("Номенклатура") = Неопределено, "",
			ИмяДокументаОснования+"Товары.Номенклатура,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("Количество") = Неопределено, "",
			ИмяДокументаОснования+"Товары.Количество,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("ЕдиницаИзмерения") = Неопределено, "",
			ИмяДокументаОснования+"Товары.ЕдиницаИзмерения,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("Коэффициент") = Неопределено, "",
			ИмяДокументаОснования+"Товары.Коэффициент,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("Цена") = Неопределено, "",
			ИмяДокументаОснования+"Товары.Цена,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("Сумма") = Неопределено, "",
			ИмяДокументаОснования+"Товары.Сумма,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("ПроцентСкидки") = Неопределено, "",
			ИмяДокументаОснования+"Товары.ПроцентСкидки,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("СуммаСкидки") = Неопределено, "",
			ИмяДокументаОснования+"Товары.СуммаСкидки,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("СкидкаНаТовар") = Неопределено, "",
			ИмяДокументаОснования+"Товары.СкидкаНаТовар,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("ПроцентСкидкиСтроки") = Неопределено, "",
			ИмяДокументаОснования+"Товары.ПроцентСкидкиСтроки,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("СуммаСкидкиСтроки") = Неопределено, "",
			ИмяДокументаОснования+"Товары.СуммаСкидкиСтроки,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("СтавкаНДС") = Неопределено, "",
			ИмяДокументаОснования+"Товары.СтавкаНДС,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("СтавкаНДС") = Неопределено, "",
			ИмяДокументаОснования+"Товары.СтавкаНДС.Ставка КАК СтавкаНДССтавка,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("СуммаНДС") = Неопределено, "",
			ИмяДокументаОснования+"Товары.СуммаНДС,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("ХарактеристикаНоменклатуры") = Неопределено, "",
			ИмяДокументаОснования+"Товары.ХарактеристикаНоменклатуры,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("МестоРазмещения") = Неопределено, "",
			ИмяДокументаОснования+"Товары.МестоРазмещения,")+"	
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("Номенклатура") = Неопределено, "",
			ИмяДокументаОснования+"Товары.Номенклатура.ТипНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("СуммаСкидкиБонусами") = Неопределено, "",
			ИмяДокументаОснования+"Товары.СуммаСкидкиБонусами,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("ГТД") = Неопределено, "",
			ИмяДокументаОснования+"Товары.ГТД,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("ГТД") = Неопределено, "",
			ИмяДокументаОснования+"Товары.ГТД.Наименование КАК НомерТаможеннойДекларации,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("ГТД") = Неопределено, "",
			ИмяДокументаОснования+"Товары.ГТД.Страна.Код КАК КодСтраныПроисхожденияТовара,")+"
	|	"+?(РеквизитыТабличнойЧастиДокументаОснования.Найти("СуммаВсего") = Неопределено, "",
			ИмяДокументаОснования+"Товары.СуммаВсего")+"
	|ИЗ
	|	Документ."+ИмяДокументаОснования+".Товары КАК "+ИмяДокументаОснования+"Товары
	|ГДЕ
	|	"+ИмяДокументаОснования+"Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	"+ИмяДокументаОснования+"Товары.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСистемуНалогообложенияККТ(Организация, ПодразделениеКомпании, СкладКомпании, НаДату)
	
	ОрганизацияСклада = Неопределено;
	ПодразделениеСклада = Неопределено;
	
	Если ЗначениеЗаполнено(СкладКомпании) Тогда
		ДанныеСкладаКомпании = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СкладКомпании, "Организация,ПодразделениеКомпании");
		ОрганизацияСклада = ДанныеСкладаКомпании.Организация;
		ПодразделениеСклада = ДанныеСкладаКомпании.ПодразделениеКомпании;
	КонецЕсли;
	
	СистемаНалогообложенияККТ = ПолучитьСистемуНалогообложенияККТПоПодразделению(
		?(НЕ ПодразделениеСклада = Неопределено, ПодразделениеСклада, ПодразделениеКомпании),
		НаДату);
		
	Если ЗначениеЗаполнено(СистемаНалогообложенияККТ) Тогда
		Возврат СистемаНалогообложенияККТ;
	КонецЕсли;
	
	СистемаНалогообложенияККТ = ПолучитьСистемуНалогообложенияККТПоОрганизации(
		?(НЕ ОрганизацияСклада = Неопределено, ОрганизацияСклада, Организация),
		НаДату);
		
	Возврат ?(ЗначениеЗаполнено(СистемаНалогообложенияККТ), СистемаНалогообложенияККТ, Перечисления.СистемыНалогообложения.Общая);
	
КонецФункции // ПолучитьСистемуНалогообложенияККТ()

Функция ПолучитьСистемуНалогообложенияККТПоПодразделению(ПодразделениеКомпании, НаДату)
	
	ВидНалога = УчетныеПолитикиСервер.Значение("ВидНалога", НаДату, ПодразделениеКомпании);
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		ПодразделениеКомпанииРодитель = ПодразделениеКомпании.Родитель;
		Пока НЕ ЗначениеЗаполнено(ВидНалога) И ЗначениеЗаполнено(ПодразделениеКомпанииРодитель) Цикл
			ВидНалога = УчетныеПолитикиСервер.Значение("ВидНалога", НаДату, ПодразделениеКомпанииРодитель);
			ПодразделениеКомпанииРодитель = ПодразделениеКомпанииРодитель.Родитель;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ?(НЕ ЗначениеЗаполнено(ВидНалога), Неопределено, ПолучитьСистемуНалогообложенияККТПоВидуНалога(ВидНалога));
	
КонецФункции // ПолучитьСистемуНалогообложенияККТПоПодразделению()

Функция ПолучитьСистемуНалогообложенияККТПоОрганизации(Организация, НаДату)
	
	ВидНалога = УчетныеПолитикиСервер.Значение("ВидНалога", НаДату, Организация);
	
	Если ЗначениеЗаполнено(ВидНалога) Тогда
		Результат = ПолучитьСистемуНалогообложенияККТПоВидуНалога(ВидНалога);
		Если ЗначениеЗаполнено(Результат) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	СистемаНалогообложения = УчетныеПолитикиСервер.Значение("СистемаНалогообложения", НаДату,  Организация);
	
	Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		
		ОбъектНалогообложения = УчетныеПолитикиСервер.Значение("ОбъектНалогообложения", НаДату, Организация);
		
		Если ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы Тогда
			Возврат Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
		Иначе
			Возврат Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	
	
КонецФункции 

Функция ПолучитьСистемуНалогообложенияККТПриПатенте(Организация, НаДату)
	
	СистемаНалогообложения = УчетныеПолитикиСервер.Значение(ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения, НаДату, Организация);
	ОбъектНалогообложения = УчетныеПолитикиСервер.Значение(ПланыВидовХарактеристик.УчетныеПолитики.ОбъектНалогообложения, НаДату, Организация);	
	
	Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		
		Если ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы Тогда
			Возврат Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
		Иначе
			Возврат Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	
	
КонецФункции 

Функция ПолучитьСистемуНалогообложенияККТПоВидуНалога(ВидНалога)
	
	Если ВидНалога = Перечисления.ВидыНалогов.ЕНВД Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.ЕСХН Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ЕСН;
	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.ПСН Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.Патент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСистемуНалогообложенияККТПоВидуНалога()

Процедура ЗаполнитьТовары(ТекстОшибки, Объект, ОбщиеПараметры, ФР)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = Объект.Ссылка;
	ПозицииЧека = ОбщиеПараметры.ПозицииЧека;
	СистемаНалогообложения = ОбщиеПараметры.СистемаНалогообложения;
	
	КонтрагентЮрИп = ЕстьРеквизит(Объект, "Контрагент")
		И (Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
			ИЛИ Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	
	ПризнакСпособаРасчета = ?(ЕстьРеквизит(Объект, "ПризнакСпособаРасчета"),
		Объект.ПризнакСпособаРасчета,
		Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
	);
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная Тогда
		
		Аванс = Истина;
		
	Иначе
		
		Аванс = Ложь;
		
	КонецЕсли;
	
	Если ЕстьРеквизит(Ссылка, "ТипЦен") Тогда
		ЦенаВключаетНДС = Ссылка.ТипЦен.ЦенаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	// Получим признак передачи товаров
	Передача = ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Передача", Передача);
	
	ТаблицаТоваров = ПодготовитьТаблицуТоваров(Объект, , ДополнительныеПараметры);
	
	Если ЕстьРеквизит(Объект, "ПечататьАртикулНоменклатуры") Тогда
		ПечататьАртикулНоменклатуры = Объект.ПечататьАртикулНоменклатуры;
	Иначе
		ПечататьАртикулНоменклатуры = Ложь;
	КонецЕсли;
	
	Если ПечататьАртикулНоменклатуры Тогда
		АртикулыНоменклатуры = АртикулыНоменклатуры(ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	
	// Проверим корректность указанного способа расчета
	ТекстСообщения = "";
	
	ПризнакСпособаРасчетаОбъекта = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(
		Объект,
		ТаблицаТоваров,
		ПризнакСпособаРасчета,
		ТекстСообщения
	);
	Если Объект.Товары.Количество() = 0 
		И НЕ ПризнакСпособаРасчета = ПризнакСпособаРасчетаОбъекта Тогда
		
		ТекстОшибки = НСтр("ru='Неверно заполнен ""Способ расчета"".'") + " " + ТекстСообщения;
		
	КонецЕсли;
	
	// Найдем версию ФФД ФР
	ПараметрыРегистрации = ОборудованиеЧекопечатающиеУстройства.ПараметрыРегистрацииУстройства(ФР);
	Если ПараметрыРегистрации <> Неопределено Тогда
		ВерсияФФДККТ11 = ?(ПараметрыРегистрации.Свойство("ВерсияФФДККТ"), ПараметрыРегистрации.ВерсияФФДККТ, "1.05");
		ВерсияФФДККТ11 = ВерсияФФДККТ11 = "1.1" ИЛИ ВерсияФФДККТ11 = "1.0.5" ИЛИ ВерсияФФДККТ11 = "1.05"; // Признак ФФД 1.1 или ниже
	Иначе
		ВерсияФФДККТ11 = Ложь;
	КонецЕсли;
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		
		СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		СуммаДокумента = ?(Ссылка.СуммаДокумента > 0, Ссылка.СуммаДокумента, -Ссылка.СуммаДокумента);
		
		Наименование = ?(Ссылка.ХозОперация = Справочники.ХозОперации.РасходныйКассовыйОрдер,
			НСтр("ru = 'Возврат по документу:'"),
			НСтр("ru = 'Оплата по документу:'")
		);
		
		СтрокаПозицииЧека.Наименование = Наименование + " " + Ссылка.ХозОперация;
		СтрокаПозицииЧека.Количество     = 1;
		СтрокаПозицииЧека.Цена           = СуммаДокумента;
		СтрокаПозицииЧека.ЦенаСоСкидками = СуммаДокумента;
		СтрокаПозицииЧека.Сумма          = СуммаДокумента;
		СтрокаПозицииЧека.НомерСекции    = 2;
		
		СтрокаПозицииЧека.СтавкаНДС      = СтавкаНДСВФорматеБПО(Ссылка.СтавкаНДС, Ссылка.Дата, Аванс);
		СтрокаПозицииЧека.СуммаНДС		 = ?(Ссылка.СуммаНДС > 0, Ссылка.СуммаНДС, -Ссылка.СуммаНДС);
		
		СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
		
	Иначе
		
		НаименованиеНоменклатуры = НаименованияНоменклатуры(ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
		
		Для Каждого СтрокаТЧ Из ТаблицаТоваров Цикл
			
			ТекстАртикул = "";
			Если ПечататьАртикулНоменклатуры Тогда
				Артикул = АртикулыНоменклатуры.Получить(СтрокаТЧ.Номенклатура);
				Если ЗначениеЗаполнено(Артикул) Тогда
					ТекстАртикул = Строка(Артикул) + Символы.НПП;
				КонецЕсли;
			КонецЕсли;
			
			ПредставлениеНоменклатуры = НаименованиеНоменклатуры.Получить(СтрокаТЧ.Номенклатура);
			Если ПредставлениеНоменклатуры = Неопределено Тогда
				ПредставлениеНоменклатуры = Строка(СтрокаТЧ.Номенклатура);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				НаименованиеТовара = ТекстАртикул + ПредставлениеНоменклатуры
					+ ?(ЗначениеЗаполнено(СтрокаТЧ.ХарактеристикаНоменклатуры),
						" (" + Строка(СтрокаТЧ.ХарактеристикаНоменклатуры) + ")", "");
				ЭтоМежценоваяРазница = Ложь;
			Иначе
				НаименованиеТовара = НСтр("ru = 'Межценовая разница'")
					+ ?(ЗначениеЗаполнено(СтрокаТЧ.ХарактеристикаНоменклатуры),
						" (" + Строка(СтрокаТЧ.ХарактеристикаНоменклатуры) + ")", "");
				ЭтоМежценоваяРазница = Истина;
			КонецЕсли;
			
			Если НЕ (Передача) И СтрокаТЧ.СуммаОплаты = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Передача Тогда
				Цена = СтрокаТЧ.Цена;
				КоличествоСУчетомКоэффициента = Окр(СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент, 3);
				Сумма = СтрокаТЧ.СуммаВсего;
				Если НЕ ЦенаВключаетНДС Тогда
					Цена = Окр(Цена * (1 + СтрокаТЧ.СтавкаНДС.Ставка / 100), 2);
				КонецЕсли;
				СуммаНДС = СтрокаТЧ.СуммаНДС;
				ПараметрАванс = Аванс ИЛИ СтрокаТЧ.СебестоимостьАвтомобиля > 0;
				СтавкаНДС = СтавкаНДСВФорматеБПО(СтрокаТЧ.СтавкаНДС, Ссылка.Дата, ПараметрАванс);
				СуммаСкидкиСтроки = Число(СтрокаТЧ.СуммаСкидкиСтроки);
				СуммаСкидки = Число(СтрокаТЧ.СуммаСкидки);
				СуммаСкидкиБонусами = Число(СтрокаТЧ.СуммаСкидкиБонусами);
				ЦенаСоСкидками = Окр(Сумма / ?(КоличествоСУчетомКоэффициента = 0, 1, КоличествоСУчетомКоэффициента), 2, 1);
				GTIN = СтрокаТЧ.ГлобальныйИдентификаторТорговойЕдиницы;
				СерийныйНомер = СтрокаТЧ.СерийныйНомер;
				ТипМаркировки = СтрокаТЧ.ТипМаркировки;
				ПолныйКодМаркировки = СтрокаТЧ.ПолныйКодМаркировки;
				РеквизитКодаТовара = СтрокаТЧ.РеквизитКодаТовара;
				ЗначениеОтраслевогоРеквизита = СтрокаТЧ.ЗначениеОтраслевогоРеквизита;
				ДатаДокументаОснования = СтрокаТЧ.ДатаДокументаОснования;
				НомерДокументаОснования = СтрокаТЧ.НомерДокументаОснования;
			Иначе
				Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					НаименованиеТовара = Строка(НаименованиеТовара) + " " + НСтр("ru = 'платеж за'") + " "
						+ Окр(СтрокаТЧ.Количество, 3)+ Символы.НПП + Строка(СтрокаТЧ.ЕдиницаИзмерения.Наименование) + "";
				КонецЕсли;
				Цена = СтрокаТЧ.СуммаОплаты;
				КоличествоСУчетомКоэффициента = 1;
				ПараметрАванс = Аванс ИЛИ СтрокаТЧ.СебестоимостьАвтомобиля > 0;
				СтавкаНДС = СтавкаНДСВФорматеБПО(СтрокаТЧ.СтавкаНДС, Ссылка.Дата, ПараметрАванс);
				Сумма = СтрокаТЧ.СуммаОплаты;
				ЦенаСоСкидками = Цена;
				СуммаСкидкиСтроки = 0;
				СуммаСкидки = 0;
				СуммаСкидкиБонусами = 0;
				
				// Если постоплата, то налог уже заплатили при отгрузке
				Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда
					СуммаНДС = 0;
					СтавкаНДС = Неопределено;
				ИначеЕсли ТаблицаТоваров.Итог("СуммаВсего") <> ТаблицаТоваров.Итог("СуммаОплаты") Тогда
					СуммаНДС = Окр(СтрокаТЧ.СуммаОплаты - СтрокаТЧ.СуммаОплаты / (1 + СтрокаТЧ.СтавкаНДС.Ставка / 100), 2);
				Иначе
					СуммаНДС = СтрокаТЧ.СуммаНДС;
				КонецЕсли;
				GTIN = "";
				СерийныйНомер = "";
				ТипМаркировки = Справочники.ТипыМаркировки.ПустаяСсылка();
				ПолныйКодМаркировки = "";
				РеквизитКодаТовара = "";
				ЗначениеОтраслевогоРеквизита = "";
				ДатаДокументаОснования = "";
				НомерДокументаОснования = "";
			КонецЕсли;
			
			СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
			
			СтрокаПозицииЧека.Наименование = НаименованиеТовара;
			СтрокаПозицииЧека.Количество = КоличествоСУчетомКоэффициента;
			СтрокаПозицииЧека.Цена= Цена;
			СтрокаПозицииЧека.Сумма = Сумма;
			СтрокаПозицииЧека.ЦенаСоСкидками = ЦенаСоСкидками;
			СтрокаПозицииЧека.СуммаСкидок = СуммаСкидки + СуммаСкидкиСтроки;
			СтрокаПозицииЧека.СуммаСкидок = СуммаСкидки + СуммаСкидкиСтроки + СуммаСкидкиБонусами;
			СтрокаПозицииЧека.НомерСекции = 0;
			
			СтрокаПозицииЧека.СуммаНДС = СуммаНДС;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
			ИначеЕсли НЕ Передача Тогда
				СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
			Иначе
				СтрокаПозицииЧека.ПризнакПредметаРасчета = СтрокаТЧ.ПризнакПредметаРасчета;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ПризнакАгента)
				И НЕ ЭтоМежценоваяРазница Тогда
				СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = СтрокаТЧ.ПризнакАгента;
				ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека.ДанныеПоставщика,СтрокаТЧ);
			КонецЕсли;	
				
			СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
			СтрокаПозицииЧека.СтавкаНДС = СтавкаНДС;
			
			// Реквизиты "код страны происхождения товара" (тег 1230) и "номер таможенной декларации" (тег 1231) включаются
			// в состав кассового чека (БСО) в случае, если страной происхождения товаров не является Российская Федерация.
			Если КонтрагентЮрИп И НЕ СтрокаТЧ.КодСтраныПроисхожденияТовара = "643" Тогда 
				Если ЗначениеЗаполнено(СтрокаТЧ.НомерТаможеннойДекларации) Тогда
					СтрокаПозицииЧека.НомерТаможеннойДекларации = СтрокаТЧ.НомерТаможеннойДекларации;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЧ.КодСтраныПроисхожденияТовара) Тогда
					СтрокаПозицииЧека.КодСтраныПроисхожденияТовара = СтрокаТЧ.КодСтраныПроисхожденияТовара;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаПозицииЧека.КодЕдиницыИзмерения = СокрЛП(СтрокаТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код);
			СтрокаПозицииЧека.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения.Наименование;
			СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
			
			// Заполним код маркировки товара
			Если ТипМаркировки <> Справочники.ТипыМаркировки.ПустаяСсылка()
				И ЗначениеЗаполнено(GTIN) 
				И ЗначениеЗаполнено(СерийныйНомер) Тогда
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = ТипМаркировки;
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы =
						Формат(GTIN, "ЧЦ=14; ЧВН=; ЧГ=0");
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = СерийныйНомер;
				СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара = РеквизитКодаТовара;
				СтрокаПозицииЧека.КонтрольнаяМарка = ПолныйКодМаркировки;
				ЭтоТабак =
					МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции().Найти(ТипМаркировки.ТоварнаяГруппа) <> 
						Неопределено;
				Если ЭтоТабак И ВерсияФФДККТ11 Тогда
					СтрокаПозицииЧека.Штрихкод =
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы
						+ СерийныйНомер;
				ИначеЕсли ВерсияФФДККТ11 Тогда
					СтрокаПозицииЧека.Штрихкод = "01" + СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы + "21" + СерийныйНомер;
				Иначе
					СтрокаПозицииЧека.ШтрихкодBase64 = ПолныйКодМаркировки;
				КонецЕсли;
				Если Не ПустаяСтрока(ЗначениеОтраслевогоРеквизита) Тогда
					СтрокаПозицииЧека.ОтраслевойРеквизит.ИдентификаторФОИВ = "030";
					СтрокаПозицииЧека.ОтраслевойРеквизит.ДатаДокументаОснования = Формат(ДатаДокументаОснования, "ДФ=dd.MM.yyyy");
					СтрокаПозицииЧека.ОтраслевойРеквизит.НомерДокументаОснования = НомерДокументаОснования;
					СтрокаПозицииЧека.ОтраслевойРеквизит.ЗначениеРеквизита = ЗначениеОтраслевогоРеквизита;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар
				ИЛИ СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ
				ИЛИ СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ
				ИЛИ СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ
				ИЛИ СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ Тогда
				СтрокаПозицииЧека.СуммаАкциза = 0;
			КонецЕсли;
			
			ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЦикла;
		
		// Заполним тег агента 1057 и данные поставщика в шапке
		ТаблицаТоваров.Свернуть("ПризнакАгента,Телефон,Наименование,ИНН");
		Если ВерсияФФДККТ11 И ТаблицаТоваров.Количество() = 1
			И ЗначениеЗаполнено(ТаблицаТоваров[0].ПризнакАгента)
			И ОбщиеПараметры.ПозицииЧека.Количество() > 0 Тогда
			
			ОбщиеПараметры.ПризнакАгента = ОбщиеПараметры.ПозицииЧека[0].ПризнакАгентаПоПредметуРасчета;
			ЗаполнитьЗначенияСвойств(ОбщиеПараметры.ДанныеПоставщика, ОбщиеПараметры.ПозицииЧека[0].ДанныеПоставщика);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализацияТаблицыТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов(Массив,,, Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Коэффициент",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	ТаблицаТоваров.Колонки.Добавить("КоличествоБазовое",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВсего",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("ПризнакПредметаРасчета",Новый ОписаниеТипов("ПеречислениеСсылка.ПризнакиПредметаРасчета"));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаОплаты", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидкиСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СкидкаНаТовар",Новый ОписаниеТипов("СправочникСсылка.ТипыСкидок"));
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)));
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидкиСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)));
	ТаблицаТоваров.Колонки.Добавить("ДоговорВзаиморасчетов",Новый ОписаниеТипов("СправочникСсылка.ДоговорыВзаиморасчетов"));
	ТаблицаТоваров.Колонки.Добавить("ПризнакАгента",Новый ОписаниеТипов("ПеречислениеСсылка.ПризнакиАгента"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(0,ДопустимаяДлина.Переменная)));
	ТаблицаТоваров.Колонки.Добавить("Телефон",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(20,ДопустимаяДлина.Переменная)));
	ТаблицаТоваров.Колонки.Добавить("ИНН",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(12,ДопустимаяДлина.Переменная)));
	ТаблицаТоваров.Колонки.Добавить("СебестоимостьАвтомобиля", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидкиБонусами", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(32,ДопустимаяДлина.Переменная)));
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхожденияТовара",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(3,ДопустимаяДлина.Переменная)));
	ТаблицаТоваров.Колонки.Добавить("ГТД",Новый ОписаниеТипов("СправочникСсылка.ГТД"));
	ТаблицаТоваров.Колонки.Добавить("ПолныйКодМаркировки", Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200,ДопустимаяДлина.Переменная)));
	
	ТаблицаТоваров.Колонки.Добавить(
		"ИдентификаторТовара",
		Новый ОписаниеТипов(
			"Строка",
			Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
			
	ТаблицаТоваров.Колонки.Добавить(
		"ГлобальныйИдентификаторТорговойЕдиницы",
		Новый ОписаниеТипов("Число",
			Новый КвалификаторыЧисла(20, 0)));
		
	ТаблицаТоваров.Колонки.Добавить(
		"СерийныйНомер",
		Новый ОписаниеТипов(
			"Строка",
			Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
		
	ТаблицаТоваров.Колонки.Добавить(
		"ТипМаркировки",
		Новый ОписаниеТипов("СправочникСсылка.ТипыМаркировки"));
		
	ТаблицаТоваров.Колонки.Добавить(
		"КодМаркировки",
		Новый ОписаниеТипов(
			"Строка",
			Новый КвалификаторыСтроки(4, ДопустимаяДлина.Переменная)));
			
	ТаблицаТоваров.Колонки.Добавить(
		"РеквизитКодаТовара",
		Новый ОписаниеТипов(
			"Строка",
			Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаТоваров.Колонки.Добавить(
		"ЗначениеОтраслевогоРеквизита",
		Новый ОписаниеТипов(
			"Строка",
			Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	ТаблицаТоваров.Колонки.Добавить(
		"ДатаДокументаОснования",
		Новый ОписаниеТипов("Дата"));
	ТаблицаТоваров.Колонки.Добавить(
		"НомерДокументаОснования",
		Новый ОписаниеТипов(
			"Строка",
			Новый КвалификаторыСтроки(11, ДопустимаяДлина.Переменная)));
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция СформироватьСписокСделок()
	
	МассивСделок = Новый Массив;
	МассивСделок.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
	МассивСделок.Добавить(Тип("ДокументСсылка.РеализацияТоваров"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ПоступлениеАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.РеализацияАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ЗаказНаряд"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ИнвентаризацияАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ЗаказНаАвтомобиль"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ОтчетКомитентуЗаАвтомобили"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераЗаАвтомобили"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.РеализацияАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ПоступлениеАвтомобилей"));
	МассивСделок.Добавить(Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль"));
	МассивСделок.Добавить(Тип("ДокументСсылка.ОптовыйЗаказПоставщикуНаАвтомобили"));
	
	Возврат МассивСделок;
	
КонецФункции

Функция ТекстЗапросаТоваровДокумента(Объект)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	Товары.Количество КАК Количество,
		|	Товары.Коэффициент КАК Коэффициент,
		|	ВЫРАЗИТЬ(Товары.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СуммаВсего КАК СуммаВсего,
		|	0 КАК СуммаОплаты,
		|	Товары.ПроцентСкидки КАК ПроцентСкидки,
		|	Товары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
		|	Товары.СуммаСкидки КАК СуммаСкидки,
		|	ВЫРАЗИТЬ(Товары.ГТД КАК Справочник.ГТД) КАК ГТД,
		|	Товары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
		|	0 КАК СуммаСкидкиБонусами,
		|	0 КАК СебестоимостьАвтомобиля,
		|	ВЫРАЗИТЬ(Товары.ДоговорВзаиморасчетов КАК Справочник.ДоговорыВзаиморасчетов) КАК ДоговорВзаиморасчетов,
		|	"""" КАК ИдентификаторТовара
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.Количество КАК Количество,
		|	ТаблицаТоваров.Коэффициент КАК Коэффициент,
		|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаТоваров.Цена КАК Цена,
		|	ТаблицаТоваров.Сумма КАК Сумма,
		|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТоваров.СуммаВсего КАК СуммаВсего,
		|	ТаблицаТоваров.СуммаОплаты КАК СуммаОплаты,
		|	ТаблицаТоваров.ПроцентСкидки КАК ПроцентСкидки,
		|	ТаблицаТоваров.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
		|	ТаблицаТоваров.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаТоваров.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
		|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
		|	ТаблицаТоваров.СуммаСкидкиБонусами КАК СуммаСкидкиБонусами,
		|	ТаблицаТоваров.СебестоимостьАвтомобиля КАК СебестоимостьАвтомобиля,
		|	ТаблицаТоваров.ДоговорВзаиморасчетов.ТелефонПоставщика КАК Телефон,
		|	ТаблицаТоваров.ДоговорВзаиморасчетов.ИННПоставщика КАК ИНН,
		|	ТаблицаТоваров.ДоговорВзаиморасчетов.НаименованиеПоставщика КАК Наименование,
		|	ТаблицаТоваров.ДоговорВзаиморасчетов.ПризнакАгента КАК ПризнакАгента,
		|	ТаблицаТоваров.ГТД.Страна.Код КАК КодСтраныПроисхожденияТовара,
		|	ТаблицаТоваров.ГТД.Наименование КАК НомерТаможеннойДекларации,
		|	ТаблицаТоваров.ИдентификаторТовара КАК ИдентификаторТовара,
		|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры.ТипМаркировки КАК ТипМаркировки,
		|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры.ТипМаркировки.КодМаркировки КАК КодМаркировки
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров";
		
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Чек") Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"0 КАК СуммаСкидкиБонусами",
			"Товары.СуммаСкидкиБонусами КАК СуммаСкидкиБонусами");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ВЫРАЗИТЬ(Товары.ГТД КАК Справочник.ГТД) КАК ГТД",
			"ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка) КАК ГТД");
	Иначе
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"0 КАК СуммаОплаты",
			"Товары.СуммаОплаты КАК СуммаОплаты");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"0 КАК СуммаСкидкиБонусами",
			"Товары.СуммаСкидкиБонусами КАК СуммаСкидкиБонусами");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"0 КАК СебестоимостьАвтомобиля",
			"Товары.СебестоимостьАвтомобиля КАК СебестоимостьАвтомобиля");
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "ИдентификаторТовара", "Товары") Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			""""" КАК ИдентификаторТовара",
			"Товары.ИдентификаторТовара КАК ИдентификаторТовара");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполнения дополнительной информацей об автомобиле.
//
Процедура ЗаполнениеДаннымиАвтомобиля(Объект, ТаблицаТоваров)
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(
		Новый Структура("Автомобиль", Справочники.Автомобили.ПустаяСсылка()));
	
	Если НайденныеСтроки.Количество() = ТаблицаТоваров.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ОтчетКомиссионераЗаАвтомобили")
		И ЕстьРеквизит(ТаблицаТоваров, "ДокументПередачи") Тогда
		
		Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
			
			ДоговораКомиссии = ЗаполнитьДоговорКомисси(
				?(ЗначениеЗаполнено(ТекущаяСтрока.ДокументПередачи), ТекущаяСтрока.ДокументПередачи, Объект),
				ТекущаяСтрока.Автомобиль);
			ДоговорКомиссии = ДоговораКомиссии.Получить(ТекущаяСтрока.Автомобиль);
			Если НЕ ДоговорКомиссии = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДоговорКомиссии);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ОтчетКомитентуЗаАвтомобили")
		И ЕстьРеквизит(ТаблицаТоваров, "ДокументПоступления") Тогда
		
		Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
			
			ДоговораКомиссии = ЗаполнитьДоговорКомисси(
				?(ЗначениеЗаполнено(ТекущаяСтрока.ДокументПоступления), ТекущаяСтрока.ДокументПоступления, Объект),
				ТекущаяСтрока.Автомобиль);
			ДоговорКомиссии = ДоговораКомиссии.Получить(ТекущаяСтрока.Автомобиль);
			Если НЕ ДоговорКомиссии = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДоговорКомиссии);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	МассивТиповСчетов = Новый Массив;
	МассивТиповСчетов.Добавить(Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили"));
	МассивТиповСчетов.Добавить(Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили"));
	
	СделкаОснования = Неопределено;
	Если МассивТиповСчетов.Найти(ТипЗнч(Объект)) <> Неопределено Тогда
		СделкаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ДокументОснование");
	КонецЕсли;
	
	// Заполнение договора комиссионера.
	ДоговораКомиссии = ЗаполнитьДоговорКомисси(
		?(ЗначениеЗаполнено(СделкаОснования), СделкаОснования, Объект),
		ТаблицаТоваров.ВыгрузитьКолонку("Автомобиль"));
	
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
		ДоговорКомиссии = ДоговораКомиссии.Получить(ТекущаяСтрока.Автомобиль);
		Если НЕ ДоговорКомиссии = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДоговорКомиссии);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнениеДаннымиАвтомобиля()

// Процедуры производит инициализацию служебных реквизитов формы списка.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которую производиться добавление реквизитов.
//
Процедура ИнициализироватьСлужебныеРеквизиты(Форма, Объект)
	
	// Составим перечень добавляемых в форму реквизитов
	СлужебныеРеквизиты = Новый Структура();
	СлужебныеРеквизиты.Вставить("ПолноеИмяОбъекта", Объект.Ссылка.Метаданные().ПолноеИмя());
	СлужебныеРеквизиты.Вставить("ИзменениеЗапрещено", Ложь);
	СлужебныеРеквизиты.Вставить("ИмяДополнительнойФормы", УправлениеДиалогомВызовСервера.ПолучитьИмяДополнительнойФормыОбъекта(Объект.Ссылка));
		
	Если НЕ Форма.Элементы.Найти("НадписьНалоговыйДокумент") = Неопределено Тогда
		СлужебныеРеквизиты.Вставить("НалоговыйДокумент",ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиНалоговыйДокумент(Форма, Объект));
	КонецЕсли;
	
	// Список Анкет для опроса контрагента
	Анкеты = Новый СписокЗначений;
	СлужебныеРеквизиты.Вставить("Анкеты",Анкеты);
	СлужебныеРеквизиты.Вставить("РеспондентОпроса",Неопределено);
	
	// Проверим возможность штрихкодирования документа
	Если ШтрихкодированиеВызовСервера.ИспользоватьШтрихкодирование(Объект.Ссылка) Тогда
		СлужебныеРеквизиты.Вставить("Штрихкод", ШтрихкодированиеВызовСервера.ПолучитьШтрихКодОбъекта(Объект.Ссылка));
	КонецЕсли;
	
	// Добавлено получение параметров для подключаемого оборудования 
	СлужебныеРеквизиты.Вставить("ИспользоватьПодключаемоеОборудование", МенеджерОборудованияВызовСервераПереопределяемый.ИспользоватьПодключаемоеОборудование());
	СлужебныеРеквизиты.Вставить("ПоддерживаемыеТипыПодключаемогоОборудования",Неопределено);
		
	// Признак разрешения пользователю редактировать реквизиты объекта
	СлужебныеРеквизиты.Вставить("РазрешитьРедактированиеЦенИСумм", ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект));
	
	// Закэшируем значения прав пользователя и параметры сеанса.
	СлужебныеРеквизиты.Вставить("ПравоПерезаписьПодразделения", ПраваИНастройкиПользователя.Значение("ПерезаписьПодразделения", Объект));
	СлужебныеРеквизиты.Вставить("ПодразделениеКомпании",        ПараметрыСеанса.ПодразделениеКомпании);
	СлужебныеРеквизиты.Вставить("ПравоПерезаписьАвтора",        ПраваИНастройкиПользователя.Значение("ПерезаписьАвтора", Объект));
	СлужебныеРеквизиты.Вставить("Автор",                        Пользователи.ТекущийПользователь());
	
	// Производим создание дополнительных реквизитов формы
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(Форма, СлужебныеРеквизиты);
	
КонецПроцедуры // ИнициализироватьСлужебныеРеквизиты()

// Процедуры производит инициализацию команд в форме объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ИнициализироватьКомандыПанелиДействий(Форма, Объект)
	
	// Определим в какую панель формы необходимо помещать новые кнопки
	ИмяКоманднойПанелиФормы = ?(Форма.Элементы.Найти("ОсновныеДействия") = Неопределено,
		"ФормаКоманднаяПанель",
		"ОсновныеДействия"
	);
	
	// Произведем добавление панели для размещения дополнительных операций с формой
	НазначитьДополнительныеДействия = (НЕ Форма.Элементы.Найти("ДополнительныеДействия") = Неопределено);
	
	// Получим описание метаданных текущего объекта
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Форма.ПолноеИмяОбъекта);
	
	// Команда настройки дополнительных параметров объекта
	ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
	ОписаниеКомандыФормы.ИмяКоманды            = "НастроитьПараметрыДокумента";
	ОписаниеКомандыФормы.ИмяГруппы             = ИмяКоманднойПанелиФормы;
	ОписаниеКомандыФормы.Картинка              = БиблиотекаКартинок.ПараметрыДокумента;
	ОписаниеКомандыФормы.Заголовок             = НСтр("ru = 'Параметры'");
	ОписаниеКомандыФормы.Подсказка             = НСтр("ru = 'Расширенное редактирование параметров документа'");
	ОписаниеКомандыФормы.ТолькоВоВсехДействиях = Ложь;
	ОписаниеКомандыФормы.Отображение           = ОтображениеКнопки.КартинкаИТекст;
	ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
	
	// Инициализируем элементы формы связанные с Дополнительными отчетами и обработками.
	ДополнительныеОтчетыИОбработкиАльфаАвто.ПриСозданииНаСервере(Форма, "ФормаОбъекта");
	
	// Создаем подменю печати
	ПодменюПечати = ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(
		Форма,
		"ПодменюПечать",
		ИмяКоманднойПанелиФормы,
		,
		НСтр("ru = 'Печать'"),
		БиблиотекаКартинок.ПодменюПечать,
		НСтр("ru = 'Подменю печати'"),
		,
		ОтображениеКнопки.Картинка
	);
	
	// Добавим команды печати
	УправлениеПечатьюАльфаАвто.ПриСозданииНаСервере(Форма, ПодменюПечати);
	
	// Добавим команды печати комплектов
	УправлениеПечатьюПлатформа.ДобавитьКомандыПечатиКомплекта(Форма, ПодменюПечати);
	
	// Подсистема "ОбменСКонтрагентами".
	Если НЕ Форма.Элементы.Найти("ДекорацияСостояниеЭДО") = Неопределено Тогда
		ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
		ПараметрыЭДОПриСоздании.Форма = Форма;
		ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
		ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Форма.Элементы.ДекорацияСостояниеЭДО;
		ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Форма.Элементы.ГруппаСостояниеЭДО;
		
		ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	КонецЕсли;
	// Конец подсистема "ОбменСКонтрагентами".
	
	// Добавим команды утверждения документов.
	УтверждениеДокументовСервер.ПриСозданииНаСервере(Форма, Объект);
	
	// Написать письмо в тех поддержку
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.Поддержка) Тогда
		ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		ОписаниеКомандыФормы.ИмяКоманды            = "ПисьмоВТехПоддержку";
		ОписаниеКомандыФормы.ИмяГруппы             = "ФормаМенюДополнительныхФункций";
		ОписаниеКомандыФормы.Заголовок             = НСтр("ru = 'Написать письмо в поддержку'");
		ОписаниеКомандыФормы.Подсказка             = НСтр("ru = 'Написать письмо в поддержку'");
		ОписаниеКомандыФормы.ТолькоВоВсехДействиях = Ложь;
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
	КонецЕсли;
	
	// Просмотр структуры подчиненности объекта
	ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
	ОписаниеКомандыФормы.ИмяКоманды            = "ПодчиненныеДокументы";
	ОписаниеКомандыФормы.ИмяГруппы             = ИмяКоманднойПанелиФормы;
	ОписаниеКомандыФормы.Картинка              = БиблиотекаКартинок.ПодчиненныеДокументы;
	ОписаниеКомандыФормы.Заголовок             =  НСтр("ru = 'Подчиненные документы'");
	ОписаниеКомандыФормы.Подсказка             = НСтр("ru = 'Просмотр структуры подчиненности документов'");
	ОписаниеКомандыФормы.ТолькоВоВсехДействиях = Ложь;
	ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
	
	// Производим инициализацию дополнительных команд формы списка
	Если НазначитьДополнительныеДействия Тогда
		
		// Если объект не содержит фискальные реквизиты и его основании можно ввести Чек на оплату,
		// то добавим команду оплаты.
		Если (НЕ ЕстьРеквизит(ОбъектМетаданных, "НомерЧека"))
			И Метаданные.Документы.ЧекНаОплату.ВводитсяНаОсновании.Содержит(ОбъектМетаданных)
			И ПравоДоступа("Добавление", Метаданные.Документы.ЧекНаОплату) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьРозничнаяТорговля") 
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользованиеПодключаемогоОборудования")) Тогда
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды            = "ОплатитьЧерезКассу";
			ОписаниеКомандыФормы.ИмяГруппы             = "ДополнительныеДействия";
			ОписаниеКомандыФормы.Картинка              = БиблиотекаКартинок.ОплатитьЧерезКассу;
			ОписаниеКомандыФормы.Заголовок             = НСтр("ru = 'Оплатить'");
			ОписаниеКомандыФормы.Подсказка             = НСтр("ru = 'Оплатить через кассу'");
			ОписаниеКомандыФормы.ТолькоВоВсехДействиях = Ложь;
			ОписаниеКомандыФормы.Отображение           = ОтображениеКнопки.КартинкаИТекст;
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
			
		КонецЕсли;
			
		// Пункт меню для открытия дополнительной формы редактирования объекта
		Если ЗначениеЗаполнено(Форма.ИмяДополнительнойФормы) ИЛИ ЕстьРеквизит(ОбъектМетаданных, "Комментарий") Тогда
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды      = "ДополнительнаяФорма";
			ОписаниеКомандыФормы.ИмяГруппы       = "ДополнительныеДействия";
			ОписаниеКомандыФормы.Картинка        = БиблиотекаКартинок.РедактироватьВДиалоге;
			ОписаниеКомандыФормы.Заголовок       = НСтр("ru = 'Дополнительная форма'");
			ОписаниеКомандыФормы.Подсказка       = НСтр("ru = 'Открыть дополнительную форму редактирования'");
			ОписаниеКомандыФормы.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.L, Истина);
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		КонецЕсли;
		
		// Формируем секцию дополнительных действий формы
		ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		ОписаниеКомандыФормы.ИмяКоманды      = "ПросмотрДвижений";
		ОписаниеКомандыФормы.ИмяГруппы       = "ДополнительныеДействия";
		ОписаниеКомандыФормы.Картинка        = БиблиотекаКартинок.ПросмотрДвижений;
		ОписаниеКомандыФормы.Заголовок       = НСтр("ru = 'Просмотр движений'");
		ОписаниеКомандыФормы.Подсказка       = НСтр("ru = 'Просмотр движений текущего документа'");
		ОписаниеКомандыФормы.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F2, Истина);
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		
		ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		ОписаниеКомандыФормы.ИмяКоманды = "ЖурналРегистрации";
		ОписаниеКомандыФормы.ИмяГруппы  = "ДополнительныеДействия";
		ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ЖурналРегистрации;
		ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Журнал регистрации'");
		ОписаниеКомандыФормы.Подсказка  = НСтр("ru = 'Журнал регистрации'");
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		
		// Проверим использование дополнительных сведений для данного документа
		Если УправлениеСвойствами.ИспользоватьДопСведения(Объект.Ссылка) Тогда
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ДополнительныеСведения";
			ОписаниеКомандыФормы.ИмяГруппы  = "ДополнительныеДействия";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДополнительныеСведения;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Дополнительные сведения'");
			ОписаниеКомандыФормы.Подсказка  = НСтр("ru = 'Дополнительные сведения'");
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение типа расчета денежными средствами
//
// Параметры:
//  Объект - ДокументСсылка   - Объект, для которого выполняется получение типа расчета.
//
Функция ТипРасчетаЧека(Объект) Экспорт
	
	ХозОперация = Объект.ХозОперация;
	
	// У документа установлен тип расчета.
	Если ЕстьРеквизит(Объект, "ТипРасчета") И ЗначениеЗаполнено(Объект.ТипРасчета) Тогда
		ТипРасчета = Объект.ТипРасчета;
	ИначеЕсли ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЧекНаОплатуПокупкиВозврат") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств");
	ИначеЕсли ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЧекНаОплатуВозврат")
		ИЛИ ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЧекНаВозврат")
		ИЛИ ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровОтПокупателя") Тогда
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	ИначеЕсли ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЧекНаОплатуПокупки") Тогда
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств");
	Иначе
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
	
	Возврат ТипРасчета;
	
КонецФункции

Функция ВидимостьКолонкиТабличнойЧасти(
		Форма,
		Строка,
		ИмяТабличнойЧасти,
		ИмяРеквизита,
		ИмяСлужебногоПоля,
		ЗначениеСравнения,
		ПараметрыДействия)
	
	Объект = Неопределено;
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Обработаем в зависимости от наличия реквизита в табличной части в объекте
	Если НЕ ЕстьРеквизит(Объект, ИмяРеквизита, ИмяТабличнойЧасти) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидимостьКолонки = Ложь;
	
	// Если при обработке текущей строки не был дан отказ, то установим видимость поля Характеристика.
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		ВидимостьКолонки = ВидимостьКолонки ИЛИ (НЕ Строка[ИмяСлужебногоПоля] = ЗначениеСравнения);
	КонецЕсли;
	
	// Если имеется список строк, добавленных при выборе Набора, произведем установку видимости поля Характеристика.
	НовыеСтроки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеСтроки");
	Если ТипЗнч(НовыеСтроки)=Тип("Массив") Тогда
		Для Каждого СтрокаТаблицыТоваров Из НовыеСтроки Цикл
			ВидимостьКолонки = 
				ВидимостьКолонки
				ИЛИ (НЕ Объект[ИмяТабличнойЧасти][СтрокаТаблицыТоваров][ИмяСлужебногоПоля] = ЗначениеСравнения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВидимостьКолонки;
	
КонецФункции // ВидимостьКолонкиТабличнойЧасти()

Процедура ЗаполнитьДанныеКоррекции(ДанныеКоррекции, Объект);
	
	ЗаполнитьЗначенияСвойств(ДанныеКоррекции, Объект);
	Если ДанныеКоррекции.ТипКоррекции = Перечисления.ТипыЧековКоррекции.Самостоятельно Тогда
		ДанныеКоррекции.ТипКоррекции = 0;
	ИначеЕсли ДанныеКоррекции.ТипКоррекции = Перечисления.ТипыЧековКоррекции.ПоПредписанию Тогда
		ДанныеКоррекции.ТипКоррекции = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокиМежценовойРазницы(ТаблицаТоваров)
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ВыделениеМежценовойРазницыОтдельнойСтрокой")
		ИЛИ НЕ ЕстьРеквизит(ТаблицаТоваров, "СебестоимостьАвтомобиля") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		Если СтрокаТоваров.СебестоимостьАвтомобиля = 0 ИЛИ Не ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТоваров = ТаблицаТоваров.Вставить(СтрокаТоваров.НомерСтроки);
		НоваяСтрокаТоваров.Номенклатура = СтрокаТоваров.Номенклатура;
		СтрокаТоваров.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		НоваяСтрокаТоваров.Количество = СтрокаТоваров.Количество;
		НоваяСтрокаТоваров.ЕдиницаИзмерения = СтрокаТоваров.ЕдиницаИзмерения;
		НоваяСтрокаТоваров.Коэффициент = СтрокаТоваров.Коэффициент;
		НоваяСтрокаТоваров.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		НоваяСтрокаТоваров.СуммаНДС = 0;
		НоваяСтрокаТоваров.СуммаСкидки = 0;
		НоваяСтрокаТоваров.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
		НоваяСтрокаТоваров.СуммаСкидкиСтроки=0;
		НоваяСтрокаТоваров.СебестоимостьАвтомобиля=0;
		НоваяСтрокаТоваров.СуммаСкидкиБонусами=0;
		НоваяСтрокаТоваров.ПризнакПредметаРасчета = СтрокаТоваров.ПризнакПредметаРасчета;
		
		Если СтрокаТоваров.СебестоимостьАвтомобиля < СтрокаТоваров.СуммаВсего Тогда
			НоваяСтрокаТоваров.Цена = СтрокаТоваров.СебестоимостьАвтомобиля;
				СтрокаТоваров.Цена = СтрокаТоваров.Цена - НоваяСтрокаТоваров.Цена;
			НоваяСтрокаТоваров.Сумма = СтрокаТоваров.СебестоимостьАвтомобиля;
				СтрокаТоваров.Сумма = СтрокаТоваров.Сумма-НоваяСтрокаТоваров.Сумма;
			НоваяСтрокаТоваров.СуммаОплаты = СтрокаТоваров.СебестоимостьАвтомобиля
				* СтрокаТоваров.СуммаОплаты
				/ СтрокаТоваров.СуммаВсего;
				СтрокаТоваров.СуммаОплаты = СтрокаТоваров.СуммаОплаты - НоваяСтрокаТоваров.СуммаОплаты;
			НоваяСтрокаТоваров.СуммаВсего = СтрокаТоваров.СебестоимостьАвтомобиля;
				СтрокаТоваров.СуммаВсего = СтрокаТоваров.СуммаВсего - НоваяСтрокаТоваров.СуммаВсего;
		Иначе
			НоваяСтрокаТоваров.Цена = СтрокаТоваров.Цена;
				СтрокаТоваров.Цена = 0;
			НоваяСтрокаТоваров.Сумма = СтрокаТоваров.Сумма;
				СтрокаТоваров.Сумма = 0;
			НоваяСтрокаТоваров.СуммаОплаты = СтрокаТоваров.СуммаОплаты;
				СтрокаТоваров.СуммаОплаты = 0;
			НоваяСтрокаТоваров.СуммаВсего = СтрокаТоваров.СуммаВсего;
				СтрокаТоваров.СуммаВсего = 0;
		КонецЕсли;
		
		// Заполнение ГТД
		НоваяСтрокаТоваров.НомерТаможеннойДекларации    = СтрокаТоваров.НомерТаможеннойДекларации;
		НоваяСтрокаТоваров.КодСтраныПроисхожденияТовара = СтрокаТоваров.КодСтраныПроисхожденияТовара;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаТоваров, "ПризнакАгента,Наименование,Телефон,ИНН");
		
		// Пересчитаем номера строк
		НомерСтрокиТоваров = 0;
		Для Каждого СтрокаТоваровНоменклатуры Из ТаблицаТоваров Цикл
			НомерСтрокиТоваров=НомерСтрокиТоваров + 1;
			СтрокаТоваровНоменклатуры.НомерСтроки = НомерСтрокиТоваров;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АртикулыНоменклатуры(Товары)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&Товары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Автоработы.Артикул,
	|	Автоработы.Ссылка
	|ИЗ
	|	Справочник.Автоработы КАК Автоработы
	|ГДЕ
	|	Автоработы.Ссылка В(&Товары)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Номенклатура, Выборка.Артикул);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НаименованияНоменклатуры(Товары)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(150))) = """"
	|			ТОГДА Номенклатура.Наименование
	|		ИНАЧЕ Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Автоработы.НаименованиеПолное КАК СТРОКА(150))) = """"
	|			ТОГДА Автоработы.Наименование
	|		ИНАЧЕ Автоработы.НаименованиеПолное
	|	КОНЕЦ,
	|	Автоработы.Ссылка
	|ИЗ
	|	Справочник.Автоработы КАК Автоработы
	|ГДЕ
	|	Автоработы.Ссылка В(&Товары)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Номенклатура, Выборка.Наименование);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьДоступностьРеквизитовВзаиморасчетов(
	Форма,
	Объект = Неопределено,
	ИменаРеквизитовОбъекта = Неопределено) Экспорт
	
	ИмяСпособЗачетаАвансов = ПолучитьЗначениеПараметраСтруктуры(
		ИменаРеквизитовОбъекта,
		"ИмяРеквизитаСпособЗачетаАвансов",
		"СпособЗачетаАвансов");
	ИмяДоговораВзаиморасчетов = ПолучитьЗначениеПараметраСтруктуры(
		ИменаРеквизитовОбъекта,
		"ИмяРеквизитаДоговорВзаиморасчетов",
		"ДоговорВзаиморасчетов");
	ИмяЗачетаАвансов = ПолучитьЗначениеПараметраСтруктуры(
		ИменаРеквизитовОбъекта,
		"ИмяРеквизитаЗачетаАвансов",
		"ЗачетАвансов");
	ИмяПодборАвансов = ПолучитьЗначениеПараметраСтруктуры(
		ИменаРеквизитовОбъекта,
		"ИмяПодборАвансов",
		"ПодборАвансов");
	ИмяСтраницыЗачетаАвансов = ПолучитьЗначениеПараметраСтруктуры(
		ИменаРеквизитовОбъекта,
		"ИмяСтраницыЗачетаАвансов",
		"СтраницаЗачетАвансов");
	
	Если Не ЕстьРеквизит(Объект, ИмяДоговораВзаиморасчетов)
		ИЛИ Не ЕстьРеквизит(Объект, ИмяСпособЗачетаАвансов) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	ЕстьЗачетАвансов = ЕстьРеквизит(Объект, ИмяЗачетаАвансов);
	
	СпособВеденияВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Объект[ИмяДоговораВзаиморасчетов],
		"СпособВеденияВзаиморасчетов");
	ПоРасчетнымДокументам =
		(СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам);
	
	// Установим заголовок элементу формы 
	Если Форма.Элементы.Найти(ИмяСпособЗачетаАвансов) <> Неопределено Тогда
		
		Если Не Форма.Элементы[ИмяСпособЗачетаАвансов].Заголовок = НСтр("ru = 'Способ зачета оплаты'") Тогда
			Форма.Элементы[ИмяСпособЗачетаАвансов].Заголовок =
				РасчетыСКонтрагентамиСервер.ПредставлениеСпособаЗачетаАвансов(СпособВеденияВзаиморасчетов);
		КонецЕсли;
		
		// Установим доступные значения для выбора
		ДоступныеСпособыЗачета = Форма.Элементы[ИмяСпособЗачетаАвансов].СписокВыбора;
		ТекущийСписокВидовАвансов = ДоступныеСпособыЗачета.ВыгрузитьЗначения();
		НовыйСписокВидовЗачетаАвансов =
			Справочники.ДоговорыВзаиморасчетов.ДоступныеВидыЗачетаАвансаДляУчета(СпособВеденияВзаиморасчетов);
		Если ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				ТекущийСписокВидовАвансов,
				НовыйСписокВидовЗачетаАвансов).Количество() <> 0
			ИЛИ ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				НовыйСписокВидовЗачетаАвансов,
				ТекущийСписокВидовАвансов).Количество() <> 0 Тогда
			ДоступныеСпособыЗачета.Очистить();
			ДоступныеСпособыЗачета.ЗагрузитьЗначения(НовыйСписокВидовЗачетаАвансов);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьЗачетАвансов Тогда
		
		СтраницаЗачетаАвансов = Форма.Элементы.Найти(ИмяСтраницыЗачетаАвансов);
		
		Если СтраницаЗачетаАвансов <> Неопределено Тогда
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			Попытка
				СтраницаЗачетаАвансов.Видимость = МенеджерОбъекта.ДоступноФормированиеРасчетовСКонтрагентами(Объект);
			Исключение
				СтраницаЗачетаАвансов.Видимость = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		Форма.Элементы[ИмяЗачетаАвансов].Видимость = ПоРасчетнымДокументам;
		
		Если ПоРасчетнымДокументам Тогда
			УстановитьЗаголовокКолонокЗачетаАвансов(
				Форма,
				Объект,
				Объект[ИмяДоговораВзаиморасчетов],
				ИменаРеквизитовОбъекта);
		КонецЕсли;
		
		Если Объект[ИмяСпособЗачетаАвансов] = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			Форма.Элементы[ИмяЗачетаАвансов].ТолькоПросмотр = Ложь;
		Иначе
			Форма.Элементы[ИмяЗачетаАвансов].ТолькоПросмотр = Истина;
			Объект[ИмяЗачетаАвансов].Очистить();
		КонецЕсли;
		
		Если Форма.Элементы.Найти(ИмяПодборАвансов) <> Неопределено Тогда
			Форма.Элементы[ИмяПодборАвансов].Доступность = Не Форма.Элементы[ИмяЗачетаАвансов].ТолькоПросмотр;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Имена реквизитов сделки для проверки и заполнения документов оплаты.
//
// Параметры:
//  Объект					 - ДокументСсылка.ПередачаТоваровМеждуОрганизациями - Документ, котрый является сделкой.
//  ДополнительныеПараметры	 - Произвольный - Параметры, которые необходимы для получения реквизитов сделки.
// 
// Возвращаемое значение:
//  Структура - Содержит поля:
//      * ИмяКонтрагента - Строка - Имя реквизита контрагента с кем ведутся взаиморасчеты.
//      * ИмяДоговораВзаиморасчетов - Строка - Имя реквизита договора взаиморасчетов сделки.
//
Функция ИменаКонтрагентаИДоговораВзаиморасчетовПоСделке(Сделка, ДополнительныеПараметры) Экспорт
	
	МенеджерДокументаСделки = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Сделка);
	
	Попытка
		КонтрагентИДоговорСделки = МенеджерДокументаСделки.ИменаКонтрагентаИДоговораВзаиморасчетовПоСделке(
			Сделка,
			ДополнительныеПараметры);
	Исключение
		КонтрагентИДоговорСделки = ИменаКонтрагентаИДоговораВзаиморасчетовПоУмолчанию();
	КонецПопытки;
	
	Возврат КонтрагентИДоговорСделки;
	
КонецФункции

// Имена контрагента и договора взаиморасчетов для начального заполнения.
// 
// Возвращаемое значение:
//  Структура - Содержит поля:
//      * ИмяКонтрагента - Строка - Имя реквизита контрагента с кем ведутся взаиморасчеты.
//      * ИмяДоговораВзаиморасчетов - Строка - Имя реквизита договора взаиморасчетов сделки.
//
Функция ИменаКонтрагентаИДоговораВзаиморасчетовПоУмолчанию() Экспорт
	
	КонтрагентИДоговорСделки = Новый Структура();
	КонтрагентИДоговорСделки.Вставить("ИмяКонтрагента", "Контрагент");
	КонтрагентИДоговорСделки.Вставить("ИмяДоговораВзаиморасчетов", "ДоговорВзаиморасчетов");
	
	Возврат КонтрагентИДоговорСделки;
	
КонецФункции

Функция СписокТиповСделок() Экспорт
	
	ТипыСделок = Новый СписокЗначений();
	ТипыСделок.ЗагрузитьЗначения(Метаданные.ПланыВидовХарактеристик.ТипыСделок.Тип.Типы());
	ТипыСделок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Возврат ТипыСделок;
	
КонецФункции // СписокТипаовСделок()

// Получение типов заказов для дальнейшего выбора.
// 
// Возвращаемое значение:
//  СписокЗначений - Список типов заказов.
//
Функция СписокТиповЗаказов() Экспорт
	
	ТипыСделок = Новый СписокЗначений();
	ТипыСделок.ЗагрузитьЗначения(Метаданные.ОпределяемыеТипы.ЗаказыДокументовРасчета.Тип.Типы());
	ТипыСделок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Возврат ТипыСделок;
	
КонецФункции

Функция ПараметрыДляВыбораСделки(Объект, ТипСделки) Экспорт
	
	ПараметрыСделки = Новый Структура();
	
	ИмяТипаСделки = Метаданные.НайтиПоТипу(ТипСделки).Имя;
	ПараметрыСделки.Вставить(
		"ИмяФормыВыбора",
		СтрШаблон("Документ.%1.ФормаВыбора", ИмяТипаСделки));
	
	ПустойДокументСделки = Документы[ИмяТипаСделки].ПустаяСсылка();
	
	РеквизитыДокумента = УправлениеДиалогомДокументаСервер.ИменаКонтрагентаИДоговораВзаиморасчетовПоСделке(
		ПустойДокументСделки,
		Объект);
	
	ПараметрыОтбора = Новый Структура();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ПустойДокументСделки, РеквизитыДокумента.ИмяКонтрагента) Тогда
		ПараметрыОтбора.Вставить(РеквизитыДокумента.ИмяКонтрагента, Объект.Контрагент);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ПустойДокументСделки, РеквизитыДокумента.ИмяДоговораВзаиморасчетов) Тогда
		ПараметрыОтбора.Вставить(РеквизитыДокумента.ИмяДоговораВзаиморасчетов, Объект.ДоговорВзаиморасчетов);
	КонецЕсли;
	
	ПараметрыСделки.Вставить("ПараметрыВыбора", ПараметрыОтбора);
	
	Возврат ПараметрыСделки;
	
КонецФункции

#КонецОбласти

#Область Устаревшие

// Устарела. см. РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель
// Процедура производит установку вариант отображения дополнительных полей "Код" и "Артикул".
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяТабличнойЧасти	 - Строка	- Имя таблицы, при редактировании которой возникло данное событие.
//
Процедура УстановитьВидимостьКолонокКодАртикул(Форма, ИмяТабличнойЧасти) Экспорт
	
	// Определим вариант отображения дополнительных полей "Код" и "Артикул"
	ОтображатьАртикул = ПолучитьФункциональнуюОпцию("ИспользоватьАртикул");
	
	// Установим видимость служебных колонок в зависимости от значения функциональной опции.
	Если НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти+"Артикул")=Неопределено Тогда
		Форма.Элементы[ИмяТабличнойЧасти+"Артикул"].Видимость = (ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.Артикул ИЛИ ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул ИЛИ ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.АртикулИПроизводитель ИЛИ ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель);
	КонецЕсли;
	
	Если НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти+"Код")=Неопределено Тогда
		Форма.Элементы[ИмяТабличнойЧасти+"Код"]    .Видимость = (ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.Код     ИЛИ ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул ИЛИ ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.КодИПроизводитель    ИЛИ ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель);
	КонецЕсли;
	
	Если НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти+"НоменклатураПоставщикаАртикул")=Неопределено Тогда
		Форма.Элементы[ИмяТабличнойЧасти+"НоменклатураПоставщикаАртикул"].Видимость = (ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.Артикул ИЛИ ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул);
	КонецЕсли;
	
	Если НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти+"НоменклатураПоставщикаКод")=Неопределено Тогда
		Форма.Элементы[ИмяТабличнойЧасти+"НоменклатураПоставщикаКод"]    .Видимость = (ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.Код     ИЛИ ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул);
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьКолонокКодАртикул()

// Устарела. Нужно перенести вызов непосредственов форму.
// Общий обработчик события настройки установленного условного оформления формы.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура УстановитьУсловноеОформление(Форма) Экспорт
 
	Форма.УсловноеОформление.Элементы.Очистить();

	Если Форма.Элементы.Найти("ТоварыХарактеристикаНоменклатуры") <> Неопределено Тогда
		
		УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Устарела. см. УчетПрослеживаемыхТоваровСервер.
// Получение движений по регистру для прослеживаемых товаров
// Параметры:
//  Объект - ДокументСсылка   - Объект, для которого выполняется получение РНПТ.
//
Функция РНПТПрослеживаемыхТоваров(Объект) Экспорт 
	
	Возврат УчетПрослеживаемыхТоваровСервер.РНПТВДокументе(Объект);
	
КонецФункции

// Устанавливает видимость и доступность патента на форме в зависимости от
// вида налога.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие;
//  Объект - Произвольный - основной объект формы.
//
Процедура УстановитьДоступностьПатента(Форма, Объект) Экспорт
	
	Если ЕстьРеквизит(Объект,"Патент") Тогда 
		ОрганизацияДокумента   = ?(ЕстьРеквизит(Объект, "Организация"), Объект.Организация, ПараметрыСеанса.Организация);
		НаДату = ?(ЕстьРеквизит(Объект, "Дата"), Объект.Дата, ТекущаяДатаСеанса());	
		ВидНалога = ПолучитьЗначениеУчетнойПолитики("ВидНалога", ОрганизацияДокумента, НаДату);
        Если ВидНалога = Перечисления.ВидыНалогов.ПСН Тогда
			Форма.Элементы.ИспользуетсяПСН.Видимость = Истина; 
			Форма.Элементы.Патент.Видимость = Истина;
		Иначе
			Форма.Элементы.ИспользуетсяПСН.Видимость = Ложь; 
			Форма.Элементы.Патент.Видимость = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Патент) Тогда
	    	Форма.ИспользуетсяПСН = Истина; 
			Форма.Элементы.Патент.Доступность = Истина;
		Иначе
			Форма.ИспользуетсяПСН = Ложь; 
			Форма.Элементы.Патент.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
