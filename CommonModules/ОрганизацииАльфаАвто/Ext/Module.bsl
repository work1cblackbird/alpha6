
#Область ПрограммныйИнтерфейс

#Область ПереопределениеМетодовСтандартнойПодсистемы

// см. ОрганизацииПереопределяемый.ПриОпределенииРегистрационныхДанныхОрганизации
Процедура ПриОпределенииРегистрационныхДанныхОрганизации(Организация, Поля, Дата, РегистрационныеДанные, КодЯзыка) Экспорт
	
	Если
		Не ЗначениеЗаполнено(Организация)
		Или ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации")
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Поля) Тогда
		
		РегистрационныеДанные = СтруктураРегистрационныхДанныхОрганизации();
		
	Иначе
		
		РегистрационныеДанные = Новый Структура(Поля);
		ЗаполнитьЗначенияСвойств(РегистрационныеДанные, СтруктураРегистрационныхДанныхОрганизации());
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Организации.ДатаРегистрации КАК ДатаРегистрации,
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП,
		|	Организации.КодИМНС КАК КодНалоговогоОргана,
		|	Организации.КодПоОКВЭД КАК КодОКВЭД,
		|	Организации.КодПоКФС КАК КодОКФС,
		|	Организации.НаименованиеПолное КАК НаименованиеПолное,
		|	Организации.Наименование КАК НаименованиеСокращенное,
		|	Организации.ОГРН КАК ОГРН,
		|	Организации.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ЧастноеЛицо) КАК ЭтоФизическоеЛицо,
		|	Организации.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ЮридическоеЛицо) КАК ЭтоЮридическоеЛицо
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка"
	);	
	Запрос.УстановитьПараметр("Ссылка", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеОрганизации = РезультатЗапроса.Выбрать();
		ДанныеОрганизации.Следующий();
		ЗаполнитьЗначенияСвойств(РегистрационныеДанные, ДанныеОрганизации);
		
	КонецЕсли;
	
	// Наименование и КПП переодические реквизиты. Получим их значения на указаную дату.
	Если
		ЗначениеЗаполнено(Дата)
		И (
			ПустаяСтрока(Поля)
			Или РегистрационныеДанные.Свойство("НаименованиеПолное")
			Или РегистрационныеДанные.Свойство("НаименованиеСокращенное")
		)
	Тогда
	
		НаименованияНаДату = Справочники.Организации.НаименованияНаДату(Организация, Дата);
		РегистрационныеДанные.Вставить("НаименованиеПолное", НаименованияНаДату.НаименованиеПолное);
		РегистрационныеДанные.Вставить("НаименованиеСокращенное", НаименованияНаДату.СокращенноеНаименование);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дата) И (ПустаяСтрока(Поля) Или РегистрационныеДанные.Свойство("КПП")) Тогда
		
		РегистрационныеДанные.КПП = Справочники.Организации.КППНаДату(Организация, Дата);
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую сведения о дополнительной информации организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, сведения по которой необходимо получить.
//  Поля - Строка - имена полей, перечисленные через запятую, в формате требований к свойствам структуры.
//                  Список допустимых имен полей см. в описании возвращаемого значения (это максимально возможный список
//                  полей, конечный состав определяется в ОрганизацииПереопределяемый.ПриОпределенииДополнительныхСведенийОрганизации).
//                  Если указана пустая строка, то возвращаются значения всех полей.
//  Дата - Дата
//       - Неопределено - дата, на которую требуется получить данные. Если значение не указано,
//                  то возвращается значение на текущую дату.   
//  ДополнительныеСведения - см. ОрганизацииСервер.ДополнительныеСведенияОрганизации.
//  КодЯзыка - см. ОрганизацииСервер.СведенияОбОрганизации.КодЯзыка
// 
// Возвращаемое значение:
//   Структура - содержит значения затребованных полей:
//        * АдресЭлектроннойПочтыОрганизации - Строка - email организации.
//        * АдресОрганизацииФакт - Строка - адрес организации.
//        * АдресОрганизацииФактXML - Строка - адрес организации xml.
//        * АдресОрганизацииФактJSON - Строка - адрес организации json.
//        * АдресИностраннойОрганизации - Строка - адрес иностранной организации.
//        * АдресИностраннойОрганизацииXML - Строка - адрес иностранной организации.
//        * АдресИностраннойОрганизацииJSON - Строка - адрес иностранной организации.
//            * ВидПлательщикаСтраховыхВзносов - Строка - вид плательщика страховых взносов.
//            * ГоловнаяОрганизацияКПП - Строка - КПП головная организация.
//            * ГоловнаяОрганизацияНаименование - Строка - наименование головной организации.
//            * ДатаПереходаНаУСН - Дата - дата перехода на УСН.
//            * ДолжностьОтправителя - Строка - должность отправителя.
//            * КодОКОНХ - Строка - код ОКОНХ.
//            * КодОрганаПФР - Строка - код органа ПФР.
//            * КодОрганаФСГС - Строка - код органа ФСГС.
//            * КодПодчиненностиФСС - Строка - код подчиненности ФСС.
//            * КодПодчиненностиФССДобрСтрах - Строка - код подчиненности ФСС добр. страх.
//            * КодПоОКТМО - Строка - код по ОКТМО.
//            * НаименованиеТерриториальногоОрганаФСС - Строка - наименование территориального органа ФСС.
//            * ОбъектНалогообложенияУСН - Число - объект налогообложения УСН.
//            * ОтветственноеЛицоСтатистикаФИО - Строка - ФИО ответственного лица за статистическую отчетность.
//            * ОтветственноеЛицоСтатистикаДолжность - Строка - должность ответственного лица за статистическую отчетность.
//            * ОтветственноеЛицоСтатистикаТелефон - Строка - телефон ответственного лица за статистическую отчетность.
//            * ОтветственноеЛицоСтатистикаАдресЭлектроннойПочты - Строка - email ответственного лица за статистическую отчетность.
//            * ПочтовыйАдресОрганизации - Строка - почтовый адрес организации.
//            * ПочтовыйАдресОрганизацииXML - Строка - почтовый адрес организации в формате xml.
//            * ПочтовыйАдресОрганизацииJSON - Строка - почтовый адрес организации в формате json.
//            * РегистрационныйНомерТФОМС - Строка - регистрационный номер ТФОМС.
//            * РегистрационныйНомерФСС - Строка - регистрационный номер ФСС.
//            * СведенияОбИсполнителеДолжность - Строка - должность исполнителя.
//            * СведенияОбИсполнителеТелефон - Строка - телефон исполнителя.
//            * СведенияОбИсполнителеФИО - Строка - ФИО.
//            * БухгалтерИмя - Строка - имя бухгалтера.
//            * БухгалтерОтчество - Строка - отчество бухгалтера.
//            * БухгалтерФамилия - Строка - фамилия бухгалтера.
//        * БухгалтерАдресЭлектроннойПочты - Строка - адрес электронной почты бухгалтера.	
//            * РуководительДолжность - Строка - должность руководителя.
//            * РуководительИмя - Строка - имя руководителя.
//            * РуководительОтчество - Строка - отчество руководителя.
//            * РуководительФамилия - Строка - фамилия руководителя.
//        * РуководительАдресЭлектроннойПочты - Строка - адрес электронной почты руководителя.
//            * СистемыНалогообложения - Строка - система налогообложения.
//            * СтраховойТариф - Число - страховой тариф.
//            * ТелефонОрганизации - Строка - телефон организации.
//            * ФаксОрганизации - Строка - факс организации.
//            * ШифрСтрахователяФСС - Строка - шифр страхователя ФСС.
//        * ЭмблемаОрганизацииДляШтампаЭлектроннойПодписи - Картинка - эмблема организации для штампа электронной 
//            подписи согласно ГОСТ Р 7.0.97-2016.
//  
Процедура ПриОпределенииДополнительныхСведенийОрганизации(Организация, Поля, Дата, ДополнительныеСведения, КодЯзыка) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	ПолныеДанные 	= СтруктураДополнительныхСведенийОрганизации();
	
	Отбор 			= УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	Отбор.Дата 		= Дата;
	Отбор.КодЯзыка 	= КодЯзыка;
	ТаблицаКИ 		= УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Организация, Отбор);
	
	ПочтаОрганизации 		= Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ФактАдресОрганизации 	= Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ТелефонОрганизации 		= Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ФаксОрганизации 		= Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		Если СтрокаКИ.Вид = ПочтаОрганизации Тогда 
			ПолныеДанные.АдресЭлектроннойПочтыОрганизации = СтрокаКИ.Представление;	
		ИначеЕсли СтрокаКИ.Вид = ФактАдресОрганизации Тогда 
			ПолныеДанные.АдресОрганизацииФакт = СтрокаКИ.Представление;
			ПолныеДанные.АдресОрганизацииФактXML = СтрокаКИ.ЗначенияПолей;
			ПолныеДанные.АдресОрганизацииФактJSON = СтрокаКИ.Значение;
		ИначеЕсли СтрокаКИ.Вид = ТелефонОрганизации Тогда
			ПолныеДанные.ТелефонОрганизации = СтрокаКИ.Представление;
		ИначеЕсли СтрокаКИ.Вид = ФаксОрганизации Тогда
			ПолныеДанные.ФаксОрганизации = СтрокаКИ.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ОтборКИ 		= УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКИ.ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailСотрудника);
	ОтборКИ.Дата 	= Дата;
	Отбор.КодЯзыка 	= КодЯзыка;
	
	СписокСотрудников = Новый СписокЗначений();
	СписокСотрудников.Добавить(Перечисления.ВидыОбъектовСведений.ГлавныйБухгалтер, 	"Бухгалтер");
	СписокСотрудников.Добавить(Перечисления.ВидыОбъектовСведений.Руководитель, 		"Руководитель");
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		Отбор 				= Новый Структура("Организация, Объект", Организация, Сотрудник.Значение);
		СтруктураСведений 	= РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(Дата, Отбор);
		
		Если СтруктураСведений.Значение <> Неопределено Тогда
			СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СтруктураСведений.Значение.Наименование);
			
			Для Каждого ЧастьИмени Из СтруктураФИО Цикл
				ПолныеДанные[Сотрудник.Представление + ЧастьИмени.Ключ] = ЧастьИмени.Значение;	
			КонецЦикла;
			
			ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(СтруктураСведений.Значение, ОтборКИ);
			Если ТаблицаКИ.Количество() Тогда
				ПолныеДанные[Сотрудник.Представление + "АдресЭлектроннойПочты"] = ТаблицаКИ[0].Представление;
			КонецЕсли;
			
			Если Сотрудник.Представление = "Руководитель" Тогда  
				ПолныеДанные.РуководительДолжность = СтруктураСведений.Значение.Должность;		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Поля <> "" Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля); 
		Для Каждого Элемент Из МассивПолей Цикл
			Поле = СокрЛП(Элемент);
			ДополнительныеСведения.Вставить(Поле, ПолныеДанные[Поле]);
		КонецЦикла;
	Иначе
		ДополнительныеСведения = ПолныеДанные;	
	КонецЕсли;

КонецПроцедуры

// Возвращает структуру, содержащую сведения о контактной информации организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, сведения по которой необходимо получить.
//  Поля - Строка - имена полей, перечисленные через запятую, в формате требований к свойствам структуры.
//                  Список допустимых имен полей см. в описании возвращаемого значения (это максимально возможный список
//                  полей, конечный состав определяется в ОрганизацииПереопределяемый.ПриОпределенииКонтактнойИнформацииОрганизации).
//                  Если указана пустая строка, то возвращаются значения всех полей.
//  Дата - Дата
//       - Неопределено - дата, на которую требуется получить данные. Если значение не указано,
//                  то возвращается значение на текущую дату. 
//  КонтактнаяИнформация - см. ОрганизацииСервер.КонтактнаяИнформацияОрганизации.
//  КодЯзыка - см. ОрганизацииСервер.СведенияОбОрганизации.КодЯзыка
// 
// Возвращаемое значение:
//   Структура - содержит значения затребованных полей:
//            * АдресОрганизации - Строка - адрес организации.
//            * АдресОрганизацииXML - Строка - адрес организации xml.
//            * АдресОрганизацииJSON - Строка - адрес организации json.
//            * АдресОрганизацииГород - Строка - город.
//            * АдресОрганизацииДом - Строка - дом.
//            * АдресОрганизацииИндекс - Строка - индекс.
//            * АдресОрганизацииКвартира - Строка - квартира.
//            * АдресОрганизацииКодРегиона - Строка - код региона.
//            * АдресОрганизацииКорпус - Строка - корпус.
//            * АдресОрганизацииНаселенныйПункт - Строка - населенный пункт.
//            * АдресОрганизацииРайон - Строка - район.
//            * АдресОрганизацииРегион - Строка - регион.
//            * АдресОрганизацииУлица - Строка - улица.
//
Процедура ПриОпределенииКонтактнойИнформацииОрганизации(Организация, Поля, Дата, КонтактнаяИнформация, КодЯзыка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	ТипАдрес 		= Перечисления.ТипыКонтактнойИнформации.Адрес;
	
	Отбор 			= УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	Отбор.Дата 		= Дата;
	Отбор.КодЯзыка 	= КодЯзыка;
	Отбор.ТипыКонтактнойИнформации.Добавить(ТипАдрес);
	Отбор.ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ТаблицаКИ 		= УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Организация, Отбор);
	
	ПолныйАдрес 	= СтруктураКонтактнойИнформацииОрганизации();
					
	СтруктураАдреса = Новый Структура();
	
	Если ТаблицаКИ.Количество() Тогда
		СтруктураАдреса = РаботаСАдресами.СведенияОбАдресе(ТаблицаКИ[0].ЗначенияПолей);
	КонецЕсли;
		
	Для Каждого Поле Из СтруктураАдреса Цикл
		Если Поле.Ключ = "Представление" Тогда
			ПолныйАдрес.АдресОрганизации 				= Поле.Значение;	
		КонецЕсли;
		ПолныйАдрес.АдресОрганизацииXML 				= ТаблицаКИ[0].ЗначенияПолей;	
		ПолныйАдрес.АдресОрганизацииJSON 				= ТаблицаКИ[0].Значение;	
		Если Поле.Ключ = "Город" Тогда
			ПолныйАдрес.АдресОрганизацииГород 			= Поле.Значение;	
		КонецЕсли;
		Если Поле.Ключ = "Здание" Тогда
			ПолныйАдрес.АдресОрганизацииДом 			= Поле.Значение.Номер;
		КонецЕсли;
		Если Поле.Ключ = "Индекс" Тогда
			ПолныйАдрес.АдресОрганизацииИндекс 			= Поле.Значение;
		КонецЕсли;
		Если Поле.Ключ = "Помещения" И Поле.Значение.Количество() Тогда
			ПолныйАдрес.АдресОрганизацииКвартира 		= Поле.Значение[0].Номер;
		КонецЕсли;
		Если Поле.Ключ = "КодРегиона" Тогда
			ПолныйАдрес.АдресОрганизацииКодРегиона 		= Поле.Значение;
		КонецЕсли;
		Если Поле.Ключ = "Корпуса" И Поле.Значение.Количество() Тогда
			ПолныйАдрес.АдресОрганизацииКорпус 			= Поле.Значение[0].Номер;
		КонецЕсли;
		Если Поле.Ключ = "НаселенныйПункт" Тогда
			ПолныйАдрес.АдресОрганизацииНаселенныйПункт = Поле.Значение;
		КонецЕсли;
		Если Поле.Ключ = "Район" Тогда
			ПолныйАдрес.АдресОрганизацииРайон 			= Поле.Значение;
		КонецЕсли;
		Если Поле.Ключ = "Регион" Тогда
			ПолныйАдрес.АдресОрганизацииРегион 			= Поле.Значение;
		КонецЕсли;
		Если Поле.Ключ = "Улица" Тогда
			ПолныйАдрес.АдресОрганизацииУлица 			= Поле.Значение;	
		КонецЕсли;
	КонецЦикла;
	
	Если Поля <> "" Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля); 
		Для Каждого Элемент Из МассивПолей Цикл
			Поле = СокрЛП(Элемент);
			КонтактнаяИнформация.Вставить(Поле, ПолныйАдрес[Поле]);
		КонецЦикла;
	Иначе
		КонтактнаяИнформация = ПолныйАдрес;	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую сведения о банковском счете организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, сведения по которой необходимо получить.
//  Поля - Строка - имена полей, перечисленные через запятую, в формате требований к свойствам структуры.
//                  Список допустимых имен полей см. в описании возвращаемого значения (это максимально возможный список
//                  полей, конечный состав определяется в ОрганизацииПереопределяемый.ПриОпределенииБанковскогоСчетаОрганизации).
//                  Если указана пустая строка, то возвращаются значения всех полей.
//  Дата - Дата
//       - Неопределено - дата, на которую требуется получить данные. Если значение не указано,
//                  то возвращается значение на текущую дату.
//  БанковскийСчет - Структура - сведения о банковском счете организации.
//  КодЯзыка - см. ОрганизацииСервер.СведенияОбОрганизации.КодЯзыка 
// 
// Возвращаемое значение:
//   Структура - содержит значения затребованных полей:
//            * БанковскийСчетБанк - Строка - банк.
//            * БанковскийСчетБИК - Строка - БИК.
//            * БанковскийСчетКоррСчет - Строка - корреспондентский счет.
//            * БанковскийСчетНомерСчета - Строка - номер счета.
//
Процедура ПриОпределенииБанковскогоСчетаОрганизации(Организация, Поля, Дата, БанковскийСчет, КодЯзыка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	ПолныеДанные			= Новый Структура(); 
	ОсновнойБанковскийСчет 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОсновнойБанковскийСчет");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Банк КАК БанковскийСчетБанк,
		|	КлассификаторБанков.СВИФТБИК КАК БанковскийСчетБИК,
		|	КлассификаторБанков.КоррСчет КАК БанковскийСчетКоррСчет,
		|	БанковскиеСчета.НомерСчета КАК БанковскийСчетНомерСчета
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|		ПО БанковскиеСчета.Банк = КлассификаторБанков.Ссылка
		|ГДЕ
		|	БанковскиеСчета.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ОсновнойБанковскийСчет);
	
	Результат = Запрос.Выполнить();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		ПолныеДанные.Вставить(Колонка.Имя);	
	КонецЦикла;
	
	Если Не Результат.Пустой() Тогда
		СтрокаРезультата = Результат.Выгрузить()[0];
		ПолныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаРезультата);
	КонецЕсли;
	
	Если Поля <> "" Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля); 
		Для Каждого Элемент Из МассивПолей Цикл
			Поле = СокрЛП(Элемент);
			БанковскийСчет.Вставить(Поле, ПолныеДанные[Поле]);
		КонецЦикла;
	Иначе
		БанковскийСчет = ПолныеДанные;	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую сведения о регистрационной информации руководителя организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, сведения по которой необходимо получить.
//  Поля - Строка - имена полей, перечисленные через запятую, в формате требований к свойствам структуры.
//                  Список допустимых имен полей см. в описании возвращаемого значения (это максимально возможный список
//                  полей, конечный состав определяется в ОрганизацииПереопределяемый.ПриОпределенииРегистрационныхДанныхРуководителяОрганизации).
//                  Если указана пустая строка, то возвращаются значения всех полей.
//  Дата - Дата
//       - Неопределено - дата, на которую требуется получить данные. Если значение не указано,
//                  то возвращается значение на текущую дату. 
//  РегистрационныеДанные - см. ОрганизацииСервер.РегистрационныеДанныеОрганизации
//  КодЯзыка - см. ОрганизацииСервер.СведенияОбОрганизации.КодЯзыка
// 
// Возвращаемое значение:
//   Структура - содержит имена (ключи) и значения затребованных полей:
//            * РуководительГражданствоКод - Строка - код гражданства.
//            * РуководительГражданствоНаименование - Строка - наименование гражданства.
//            * РуководительДатаРождения - Дата - дата рождения.
//            * РуководительИНН - Строка - ИНН.
//            * РуководительМестоРождения - Строка - место рождения.
//            * РуководительПол - Строка - пол.
//            * РуководительТелефон - Строка - телефон.
//            * РуководительУдостоверениеЛичностиВидДокумента - Строка - вид документа.
//            * РуководительУдостоверениеЛичностиДатаВыдачи - Дата - дата выдачи.
//            * РуководительУдостоверениеЛичностиКемВыдан - Строка - кем выдан.
//            * РуководительУдостоверениеЛичностиКод - Строка - код.
//            * РуководительУдостоверениеЛичностиКодПодразделения - Строка - код подразделения.
//            * РуководительУдостоверениеЛичностиНомер - Строка - номер.
//            * РуководительУдостоверениеЛичностиСерия - Строка - серия.
//            * РуководительФИО - Строка - ФИО.
//
Процедура ПриОпределенииРегистрационныхДанныхРуководителяОрганизации(Организация, Поля, Дата, РегистрационныеДанные, КодЯзыка) Экспорт
	
	Если
		Не ЗначениеЗаполнено(Организация)
		Или ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации")
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПолныеДанные  		= СтруктураРегистрационныхДанныхСотрудника("Руководитель");
	
	Отбор 				= Новый Структура("Организация, Объект", Организация, Перечисления.ВидыОбъектовСведений.Руководитель);
	СтруктураСведений 	= РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(Дата, Отбор);
	Руководитель		= СтруктураСведений.Значение;
	
	Если ЗначениеЗаполнено(Руководитель) Тогда
		ПолныеДанные.РуководительДатаРождения 	= Руководитель.ДатаРождения;
		ПолныеДанные.РуководительПол 			= Руководитель.Пол;
		
		ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
		ОтборКИ.ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника);
		ОтборКИ.Дата     = Дата;
		ОтборКИ.КодЯзыка = КодЯзыка;
		
		ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Руководитель, ОтборКИ);
		
		Если ТаблицаКИ.Количество() Тогда
			
			ПолныеДанные.РуководительТелефон = ТаблицаКИ[0].Представление;
			
		КонецЕсли;
		
		Документ 		= Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(Руководитель);	
		ДанныеПаспорта 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
							"ВидПодтверждающегоДокумента, КодПодразделения, КодВидаДокументаУдостоверяющегоЛичность, Серия, Номер, ДатаВыдачи, КемВыдан");
		
		ПолныеДанные.РуководительУдостоверениеЛичностиВидДокумента 		= ДанныеПаспорта.ВидПодтверждающегоДокумента;
		ПолныеДанные.РуководительУдостоверениеЛичностиДатаВыдачи 		= ДанныеПаспорта.ДатаВыдачи;
		ПолныеДанные.РуководительУдостоверениеЛичностиКемВыдан 			= ДанныеПаспорта.КемВыдан;
		ПолныеДанные.РуководительУдостоверениеЛичностиКод 				= ДанныеПаспорта.КодВидаДокументаУдостоверяющегоЛичность;
		ПолныеДанные.РуководительУдостоверениеЛичностиКодПодразделения 	= ДанныеПаспорта.КодПодразделения;
		ПолныеДанные.РуководительУдостоверениеЛичностиНомер 			= ДанныеПаспорта.Номер;
		ПолныеДанные.РуководительУдостоверениеЛичностиСерия 			= ДанныеПаспорта.Серия;

		ПолныеДанные.РуководительФИО 									= Руководитель.Наименование;
	КонецЕсли;
	
	Если Поля <> "" Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля); 
		Для Каждого Элемент Из МассивПолей Цикл
			Поле = СокрЛП(Элемент);
			РегистрационныеДанные.Вставить(Поле, ПолныеДанные[Поле]);
		КонецЦикла;
	Иначе
		РегистрационныеДанные = ПолныеДанные;	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую сведения о контактной информации руководителя организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, сведения по которой необходимо получить.
//  Поля - Строка - имена полей, перечисленные через запятую, в формате требований к свойствам структуры.
//                  Список допустимых имен полей см. в описании возвращаемого значения (это максимально возможный список
//                  полей, конечный состав определяется в ОрганизацииПереопределяемый.ПриОпределенииКонтактнойИнформацииРуководителяОрганизации).
//                  Если указана пустая строка, то возвращаются значения всех полей.
//  Дата - Дата
//       - Неопределено - дата, на которую требуется получить данные. Если значение не указано,
//                  то возвращается значение на текущую дату.    
//  КонтактнаяИнформация - см. ОрганизацииСервер.КонтактнаяИнформацияОрганизации.
//  КодЯзыка - см. ОрганизацииСервер.СведенияОбОрганизации.КодЯзыка
// 
// Возвращаемое значение:
//   Структура - содержит имена (ключи) и значения затребованных полей:
//            * РуководительАдресМестаЖительства - Строка - адрес.
//            * РуководительАдресМестаЖительстваXML - Строка - адрес xml.
//            * РуководительАдресМестаЖительстваJSON - Строка - адрес json.
//            * РуководительАдресМестаЖительстваГород - Строка - город.
//            * РуководительАдресМестаЖительстваДом - Строка - дом.
//            * РуководительАдресМестаЖительстваИндекс - Строка - индекс.
//            * РуководительАдресМестаЖительстваКвартира - Строка - квартира.
//            * РуководительАдресМестаЖительстваКодРегиона - Строка - код региона.
//            * РуководительАдресМестаЖительстваКорпус - Строка - корпус.
//            * РуководительАдресМестаЖительстваНаселенныйПункт - Строка - населенный пункт.
//            * РуководительАдресМестаЖительстваРайон - Строка - район.
//            * РуководительАдресМестаЖительстваРегион - Строка - регион.
//            * РуководительАдресМестаЖительстваУлица - Строка - улица.
//
Процедура ПриОпределенииКонтактнойИнформацииРуководителяОрганизации(Организация, Поля, Дата, КонтактнаяИнформация, КодЯзыка) Экспорт
	
	Если
		Не ЗначениеЗаполнено(Организация)
		Или ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации")
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПолныйАдрес = СтруктураКонтактнойИнформацииСотрудника("Руководитель");
	
	Отбор = Новый Структура("Организация, Объект", Организация, Перечисления.ВидыОбъектовСведений.Руководитель);
	СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(Дата, Отбор);
	Руководитель = СтруктураСведений.Значение;
	
	Если ЗначениеЗаполнено(Руководитель) Тогда
		
		ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
		ОтборКИ.ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресСотрудника);
		ОтборКИ.Дата     = Дата;
		ОтборКИ.КодЯзыка = КодЯзыка;
		
		ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Руководитель, ОтборКИ);
		
		Если ТаблицаКИ.Количество() > 0 Тогда
			
			СтруктураАдреса = РаботаСАдресами.СведенияОбАдресе(ТаблицаКИ[0].ЗначенияПолей);
		
			Для Каждого Поле Из СтруктураАдреса Цикл
				
				Если Поле.Ключ = "Представление" Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительства = Поле.Значение;
					
				КонецЕсли;
				
				ПолныйАдрес.РуководительАдресМестаЖительстваXML  = ТаблицаКИ[0].ЗначенияПолей;
				ПолныйАдрес.РуководительАдресМестаЖительстваJSON = ТаблицаКИ[0].Значение;
				
				Если Поле.Ключ = "Город" Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительстваГород = Поле.Значение;
					
				КонецЕсли;
				
				Если Поле.Ключ = "Здание" Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительстваДом = Поле.Значение.Номер;
					
				КонецЕсли;
				
				Если Поле.Ключ = "Индекс" Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительстваИндекс = Поле.Значение;
					
				КонецЕсли;
				
				Если Поле.Ключ = "Помещения" И Поле.Значение.Количество() Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительстваКвартира = Поле.Значение[0].Номер;
					
				КонецЕсли;
				
				Если Поле.Ключ = "КодРегиона" Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительстваКодРегиона = Поле.Значение;
					
				КонецЕсли;
				
				Если Поле.Ключ = "Корпуса" И Поле.Значение.Количество() Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительстваКорпус = Поле.Значение[0].Номер;
					
				КонецЕсли;
				
				Если Поле.Ключ = "НаселенныйПункт" Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительстваНаселенныйПункт = Поле.Значение;
					
				КонецЕсли;
				
				Если Поле.Ключ = "Район" Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительстваРайон = Поле.Значение;
					
				КонецЕсли;
				
				Если Поле.Ключ = "Регион" Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительстваРегион = Поле.Значение;
					
				КонецЕсли;
				
				Если Поле.Ключ = "Улица" Тогда
					
					ПолныйАдрес.РуководительАдресМестаЖительстваУлица = Поле.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Поля <> "" Тогда
		
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля); 
		
		Для Каждого Элемент Из МассивПолей Цикл
			
			Поле = СокрЛП(Элемент);
			КонтактнаяИнформация.Вставить(Поле, ПолныйАдрес[Поле]);
			
		КонецЦикла;
		
	Иначе
		
		КонтактнаяИнформация = ПолныйАдрес;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую сведения о регистрационной информации главного бухгалтера организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, сведения по которой необходимо получить.
//  Поля - Строка - имена полей, перечисленные через запятую, в формате требований к свойствам структуры.
//                  Список допустимых имен полей см. в описании возвращаемого значения (это максимально возможный список
//                  полей, конечный состав определяется в ОрганизацииПереопределяемый.ПриОпределенииРегистрационныхДанныхГлавногоБухгалтера).
//                  Если указана пустая строка, то возвращаются значения всех полей.
//  Дата - Дата
//       - Неопределено - дата, на которую требуется получить данные. Если значение не указано,
//                  то возвращается значение на текущую дату. 
//  РегистрационныеДанные - см. ОрганизацииСервер.РегистрационныеДанныеОрганизации
//  КодЯзыка - см. ОрганизацииСервер.СведенияОбОрганизации.КодЯзыка
// 
// Возвращаемое значение:
//   Структура - содержит имена (ключи) и значения затребованных полей:
//            * БухгалтерГражданствоКод - Строка - код гражданства бухгалтера.
//            * БухгалтерГражданствоНаименование - Строка - наименование гражданства бухгалтера.
//            * БухгалтерГражданствоУполномоченногоПредставителя - Строка - гражданство уполномоченного представителя.
//            * БухгалтерДатаРождения - Строка - дата рождения.
//            * БухгалтерИНН - Строка - ИНН.
//            * БухгалтерМестоРождения - Строка - место рождения.
//            * БухгалтерПол - Строка - пол.
//            * БухгалтерПолУполномоченногоПредставителя - Строка - пол уполномоченного представителя.
//            * БухгалтерТелефон - Строка - телефон.
//            * БухгалтерУдостоверениеЛичностиВидДокумента - Строка - вид документа.
//            * БухгалтерУдостоверениеЛичностиДатаВыдачи - Строка - дата выдачи.
//            * БухгалтерУдостоверениеЛичностиКемВыдан - Строка - кем выдан.
//            * БухгалтерУдостоверениеЛичностиКод - Строка - код.
//            * БухгалтерУдостоверениеЛичностиКодПодразделения - Строка - код подразделения.
//            * БухгалтерУдостоверениеЛичностиНомер - Строка - номер.
//            * БухгалтерУдостоверениеЛичностиСерия - Строка - серия.
//            * БухгалтерУполномоченномПредставителеГражданствоНаименование - Строка - наименование гражданства
//                                                                                     уполномоченного представителя.
//            * БухгалтерФИО - Строка - ФИО.
//
Процедура ПриОпределенииРегистрационныхДанныхГлавногоБухгалтера(Организация, Поля, Дата, РегистрационныеДанные, КодЯзыка) Экспорт
	
	Если
		Не ЗначениеЗаполнено(Организация)
		Или ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации")
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Отбор = Новый Структура("Организация, Объект", Организация, Перечисления.ВидыОбъектовСведений.ГлавныйБухгалтер);
	СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(Дата, Отбор);
	Бухгалтер = СтруктураСведений.Значение;
	
	ПолныеДанные = СтруктураРегистрационныхДанныхСотрудника("Бухгалтер");
	
	Если ЗначениеЗаполнено(Бухгалтер) Тогда
		ПолныеДанные.БухгалтерДатаРождения 	= Бухгалтер.ДатаРождения;
		ПолныеДанные.БухгалтерПол 			= Бухгалтер.Пол;
		
		ОтборКИ 		= УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
		ОтборКИ.ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника);
		ОтборКИ.Дата 	= Дата;
		ОтборКИ.КодЯзыка 	= КодЯзыка;
		ТаблицаКИ 		= УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Бухгалтер, ОтборКИ);
		
		Если ТаблицаКИ.Количество() > 0 Тогда
			
			ПолныеДанные.БухгалтерТелефон =	ТаблицаКИ[0].Представление;
			
		КонецЕсли;
		
		Документ 		= Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(Бухгалтер);	
		ДанныеПаспорта 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
							"ВидПодтверждающегоДокумента, КодПодразделения, КодВидаДокументаУдостоверяющегоЛичность, Серия, Номер, ДатаВыдачи, КемВыдан");
		
		ПолныеДанные.БухгалтерУдостоверениеЛичностиВидДокумента 	= ДанныеПаспорта.ВидПодтверждающегоДокумента;
		ПолныеДанные.БухгалтерУдостоверениеЛичностиДатаВыдачи 		= ДанныеПаспорта.ДатаВыдачи;
		ПолныеДанные.БухгалтерУдостоверениеЛичностиКемВыдан 		= ДанныеПаспорта.КемВыдан;
		ПолныеДанные.БухгалтерУдостоверениеЛичностиКод 				= ДанныеПаспорта.КодВидаДокументаУдостоверяющегоЛичность;
		ПолныеДанные.БухгалтерУдостоверениеЛичностиКодПодразделения = ДанныеПаспорта.КодПодразделения;
		ПолныеДанные.БухгалтерУдостоверениеЛичностиНомер 			= ДанныеПаспорта.Номер;
		ПолныеДанные.БухгалтерУдостоверениеЛичностиСерия 			= ДанныеПаспорта.Серия;

		ПолныеДанные.БухгалтерФИО 									= Бухгалтер.Наименование;
	КонецЕсли;
	
	Если Поля <> "" Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля); 
		Для Каждого Элемент Из МассивПолей Цикл
			Поле = СокрЛП(Элемент);
			РегистрационныеДанные.Вставить(Поле, ПолныеДанные[Поле]);
		КонецЦикла;
	Иначе
		РегистрационныеДанные = ПолныеДанные;	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую сведения о контактной информации главного бухгалтера организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, сведения по которой необходимо получить.
//  Поля - Строка - имена полей, перечисленные через запятую, в формате требований к свойствам структуры.
//                  Список допустимых имен полей см. в описании возвращаемого значения (это максимально возможный список
//                  полей, конечный состав определяется в ОрганизацииПереопределяемый.ПриОпределенииКонтактнойИнформацииГлавногоБухгалтера).
//                  Если указана пустая строка, то возвращаются значения всех полей.
//  Дата - Дата
//       - Неопределено - дата, на которую требуется получить данные. Если значение не указано,
//                  то возвращается значение на текущую дату.  
//  КонтактнаяИнформация - см. ОрганизацииСервер.КонтактнаяИнформацияОрганизации.
//  КодЯзыка - см. ОрганизацииСервер.СведенияОбОрганизации.КодЯзыка
// 
// Возвращаемое значение:
//   Структура - содержит имена (ключи) и значения затребованных полей:
//            * БухгалтерАдресМестаЖительства - Строка - адрес.
//            * БухгалтерАдресМестаЖительстваXML - Строка - адрес xml.
//            * БухгалтерАдресМестаЖительстваJSON - Строка - адрес json.
//            * БухгалтерАдресМестаЖительстваГород - Строка - город.
//            * БухгалтерАдресМестаЖительстваДом - Строка - дом.
//            * БухгалтерАдресМестаЖительстваИндекс - Строка - индекс.
//            * БухгалтерАдресМестаЖительстваКвартира - Строка - квартира.
//            * БухгалтерАдресМестаЖительстваКодРегиона - Строка - код региона.
//            * БухгалтерАдресМестаЖительстваКорпус - Строка - корпус.
//            * БухгалтерАдресМестаЖительстваНаселенныйПункт - Строка - населенный пункт.
//            * БухгалтерАдресМестаЖительстваРайон - Строка - район.
//            * БухгалтерАдресМестаЖительстваРегион - Строка - регион.
//            * БухгалтерАдресМестаЖительстваУлица - Строка - улица.
//
Процедура ПриОпределенииКонтактнойИнформацииГлавногоБухгалтера(Организация, Поля, Дата, КонтактнаяИнформация, КодЯзыка) Экспорт
	
	Если
		Не ЗначениеЗаполнено(Организация)
		Или ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации")
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПолныйАдрес = СтруктураКонтактнойИнформацииСотрудника("Бухгалтер");
	
	Отбор = Новый Структура("Организация, Объект", Организация, Перечисления.ВидыОбъектовСведений.ГлавныйБухгалтер);
	СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(Дата, Отбор);
	Бухгалтер = СтруктураСведений.Значение;
	
	Если ЗначениеЗаполнено(Бухгалтер) Тогда
		ОтборКИ 		= УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
		ОтборКИ.ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресСотрудника);
		ОтборКИ.Дата 	= Дата;
		ОтборКИ.КодЯзыка 	= КодЯзыка;
		ТаблицаКИ 		= УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Бухгалтер, ОтборКИ);
		
		Если ТаблицаКИ.Количество() > 0 Тогда
			
			СтруктураАдреса = РаботаСАдресами.СведенияОбАдресе(ТаблицаКИ[0].ЗначенияПолей);
			
			ПолныйАдрес.БухгалтерАдресМестаЖительства = СтруктураАдреса.Представление;
			ПолныйАдрес.БухгалтерАдресМестаЖительстваXML = ТаблицаКИ[0].ЗначенияПолей;	
			ПолныйАдрес.БухгалтерАдресМестаЖительстваJSON = ТаблицаКИ[0].Значение;
			ПолныйАдрес.БухгалтерАдресМестаЖительстваГород = СтруктураАдреса.Город;
			ПолныйАдрес.БухгалтерАдресМестаЖительстваДом = СтруктураАдреса.Здание;
			ПолныйАдрес.БухгалтерАдресМестаЖительстваИндекс = СтруктураАдреса.Индекс;
			
			Если СтруктураАдреса.Помещения.Количество() Тогда
				
				ПолныйАдрес.БухгалтерАдресМестаЖительстваКвартира = СтруктураАдреса.Помещения[0].Номер;
				
			КонецЕсли;
			
			Если СтруктураАдреса.Корпуса.Количество() Тогда
				
				ПолныйАдрес.БухгалтерАдресМестаЖительстваКорпус = СтруктураАдреса.Корпуса[0].Номер;
				
			КонецЕсли;
			
			ПолныйАдрес.БухгалтерАдресМестаЖительстваКодРегиона = СтруктураАдреса.КодРегиона;
			ПолныйАдрес.БухгалтерАдресМестаЖительстваНаселенныйПункт = СтруктураАдреса.НаселенныйПункт;
			ПолныйАдрес.БухгалтерАдресМестаЖительстваРайон = СтруктураАдреса.Район;
			ПолныйАдрес.БухгалтерАдресМестаЖительстваРегион = СтруктураАдреса.Регион;
			ПолныйАдрес.БухгалтерАдресМестаЖительстваУлица = СтруктураАдреса.Улица;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Поля <> "" Тогда
		
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
		
		Для Каждого Элемент Из МассивПолей Цикл
			
			Поле = СокрЛП(Элемент);
			КонтактнаяИнформация.Вставить(Поле, ПолныйАдрес[Поле]);
			
		КонецЦикла;
		
	Иначе
		
		КонтактнаяИнформация = ПолныйАдрес;
		
	КонецЕсли;
	
КонецПроцедуры

// Преобразование описания организации в строку
//
// Параметры:
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "") Экспорт

	Если ПустаяСтрока(Список) Тогда
		
		ПоляДляПредставления = Новый Массив();
		
		Если СписокСведений.Свойство("ТелефонЮридическогоАдреса") Тогда
		
			ПоляДляПредставления.Добавить("ТелефонЮридическогоАдреса");
			
		КонецЕсли;
		
		Если Не СписокСведений.Свойство("НаименованиеДляПечатныхФорм") Тогда
			
			ПоляДляПредставления.Добавить("НаименованиеПолное");
			
		Иначе
			
			ПоляДляПредставления.Добавить("НаименованиеДляПечатныхФорм");
			
		КонецЕсли;
		
	Иначе
		
		ПоляДляПредставления = СтрРазделить(Список, ",", Ложь);
		
		Для Индекс = 0 По ПоляДляПредставления.ВГраница() Цикл
			
			ПоляДляПредставления[Индекс] = СокрЛП(ПоляДляПредставления[Индекс]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПрефиксыЧастейОписанияОрганизации = ПрефиксыЧастейОписанияОрганизации();
	ЧастиОписания = Новый Массив;
	ЗначениеПоля = Неопределено;
	ПрефиксПоля = Неопределено;

	Для Каждого Поле Из ПоляДляПредставления Цикл
		
		Если СписокСведений.Свойство(Поле, ЗначениеПоля) Тогда
			
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПрефиксыЧастейОписанияОрганизации.Свойство(Поле, ПрефиксПоля) Тогда
				
				ЧастиОписания.Добавить(ПрефиксПоля + ЗначениеПоля);
				
			Иначе
				
				ЧастиОписания.Добавить(ЗначениеПоля);
				
			КонецЕсли;
			
		Иначе

			ТекстСообщения = НСТр("ru = 'Не удалось определить значение параметра организации:'") + " " + Поле;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Формирование сведений об организации'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Организации,, 
				ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = 0 По ЧастиОписания.ВГраница() Цикл
		
		ЧастиОписания[Индекс] = СокрЛП(ЧастиОписания[Индекс]);
		
	КонецЦикла;

	Возврат СтрСоединить(ЧастиОписания, " ");

КонецФункции

#КонецОбласти

#Область ПереопределениеМетодовСтандартнойПодсистемы

// Получает информацию об ответственном лице организации.
// Информация об ответственных лицах переодическая и храниться в регистре СведенияКомпании
// поэтому для получения информации об ответственных лицах рекомендуется использовать данный метод.
//
// Параметры:
//  Организация - СправочникСсылка.Огранизации 
//  ВидОтветственногоЛица - ПеречислениеСсылка.ВидыОбъектовСведений
//  НаДату - Дата
// 
// Возвращаемое значение:
//    СправочникСсылка.Сотрудники
//
Функция ОтветственноеЛицо(Организация, ВидОтветственногоЛица, Знач НаДату = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СведенияКомпанииСрезПоследних.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.СведенияКомпании.СрезПоследних(
		|			&НаДату,
		|			Организация = &Организация
		|				И УдалитьОрганизация = &ОрганизацияНеопределено
		|				И Объект = &ВидОтветственногоЛица) КАК СведенияКомпанииСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияКомпанииСрезПоследних.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.СведенияКомпании.СрезПоследних(
		|			&НаДату,
		|			Организация = &Организация
		|				И УдалитьОрганизация = &ОрганизацияПустая
		|				И Объект = &ВидОтветственногоЛица) КАК СведенияКомпанииСрезПоследних"
	);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидОтветственногоЛица", ВидОтветственногоЛица);
	Запрос.УстановитьПараметр("ОрганизацияНеопределено", Неопределено);
	Запрос.УстановитьПараметр("ОрганизацияПустая", Справочники.Организации.ПустаяСсылка());
	
	Если НаДату = Неопределено Тогда
		
		НаДату = НачалоДня(ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Справочники.Сотрудники.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Значение;
	
КонецФункции

// Получает информацию о руководителе лице организации.
// Информация об ответственных лицах переодическая и храниться в регистре СведенияКомпании
// поэтому для получения информации об ответственных лицах рекомендуется использовать данный метод.
//
// Параметры:
//  Организация - СправочникСсылка.Огранизации 
//  НаДату - Дата
// 
// Возвращаемое значение:
//    СправочникСсылка.Сотрудники
//
Функция Руководитель(Организация, Знач НаДату = Неопределено) Экспорт

	Возврат ОтветственноеЛицо(Организация, Перечисления.ВидыОбъектовСведений.Руководитель, НаДату); 

КонецФункции

// Получает информацию о главном бухгалтере организации.
// Информация об ответственных лицах переодическая и храниться в регистре СведенияКомпании
// поэтому для получения информации об ответственных лицах рекомендуется использовать данный метод.
//
// Параметры:
//  Организация - СправочникСсылка.Огранизации 
//  НаДату - Дата
// 
// Возвращаемое значение:
//    СправочникСсылка.Сотрудники
//
Функция ГлавныйБухгалтер(Организация, Знач НаДату = Неопределено) Экспорт

	Возврат ОтветственноеЛицо(Организация, Перечисления.ВидыОбъектовСведений.ГлавныйБухгалтер, НаДату); 

КонецФункции

// Получает информацию о кассире организации.
// Информация об ответственных лицах переодическая и храниться в регистре СведенияКомпании
// поэтому для получения информации об ответственных лицах рекомендуется использовать данный метод.
//
// Параметры:
//  Организация - СправочникСсылка.Огранизации 
//  НаДату - Дата
// 
// Возвращаемое значение:
//    СправочникСсылка.Сотрудники
//
Функция Кассир(Организация, Знач НаДату = Неопределено) Экспорт

	Возврат ОтветственноеЛицо(Организация, Перечисления.ВидыОбъектовСведений.Кассир, НаДату); 

КонецФункции

// Получает информацию о МОЛе организации.
// Информация об ответственных лицах переодическая и храниться в регистре СведенияКомпании
// поэтому для получения информации об ответственных лицах рекомендуется использовать данный метод.
//
// Параметры:
//  Организация - СправочникСсылка.Огранизации 
//  НаДату - Дата
// 
// Возвращаемое значение:
//    СправочникСсылка.Сотрудники
//
Функция МОЛ(Организация, Знач НаДату = Неопределено) Экспорт

	Возврат ОтветственноеЛицо(Организация, Перечисления.ВидыОбъектовСведений.МОЛ, НаДату); 

КонецФункции

Функция Отпустил(Организация, Знач НаДату = Неопределено) Экспорт 
	
	Возврат ОтветственноеЛицо(Организация, Перечисления.ВидыОбъектовСведений.Отпустил, НаДату); 

КонецФункции
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураРегистрационныхДанныхОрганизации()
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ДатаРегистрации", Дата(1, 1, 1));
	СтруктураВозврата.Вставить("ИНН", "");
	СтруктураВозврата.Вставить("КодНалоговогоОргана", "");
	СтруктураВозврата.Вставить("КодОКВЭД", "");
	СтруктураВозврата.Вставить("КодОКВЭД2", "");
	СтруктураВозврата.Вставить("КодОКФС", "");
	СтруктураВозврата.Вставить("КодПоОКАТО", "");
	СтруктураВозврата.Вставить("КодПоОКТМО", "");
	СтруктураВозврата.Вставить("КПП", "");
	СтруктураВозврата.Вставить("НаименованиеНалоговогоОргана", "");
	СтруктураВозврата.Вставить("НаименованиеОКВЭД", "");
	СтруктураВозврата.Вставить("НаименованиеОКВЭД2", "");
	СтруктураВозврата.Вставить("НаименованиеПолное", "");
	СтруктураВозврата.Вставить("НаименованиеСокращенное", "");
	СтруктураВозврата.Вставить("ОГРН", "");
	СтруктураВозврата.Вставить("ПризнакНалогоплательщикаКатегория", "");
	СтруктураВозврата.Вставить("ПризнакНалогоплательщикаКод", 00);
	СтруктураВозврата.Вставить("РегистрационныйНомерПФР", "");
	СтруктураВозврата.Вставить("РегистрационныйНомерТФОМС", "");
	СтруктураВозврата.Вставить("СвидетельствоДатаВыдачи", Дата(1, 1, 1));
	СтруктураВозврата.Вставить("СвидетельствоКодОргана", "");
	СтруктураВозврата.Вставить("СвидетельствоНаименованиеОргана", "");
	СтруктураВозврата.Вставить("СвидетельствоСерияНомер", "");
	СтруктураВозврата.Вставить("СтавкаНалогаНаПрибыльМестный", 0);
	СтруктураВозврата.Вставить("СтавкаНалогаНаПрибыльСубъектРФ", 0);
	СтруктураВозврата.Вставить("СтавкаНалогаНаПрибыльФБ", 0);
	СтруктураВозврата.Вставить("СтавкаНалогаУСН", 0);
	СтруктураВозврата.Вставить("ЭтоФизическоеЛицо", Ложь);
	СтруктураВозврата.Вставить("ЭтоЮридическоеЛицо", Ложь);

	Возврат СтруктураВозврата;
	
КонецФункции

Функция СтруктураДополнительныхСведенийОрганизации()
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("АдресЭлектроннойПочтыОрганизации", "");
	СтруктураВозврата.Вставить("АдресОрганизацииФакт", "");
	СтруктураВозврата.Вставить("АдресОрганизацииФактXML", "");
	СтруктураВозврата.Вставить("АдресОрганизацииФактJSON", "");
	СтруктураВозврата.Вставить("АдресИностраннойОрганизации", "");
	СтруктураВозврата.Вставить("АдресИностраннойОрганизацииXML", "");
	СтруктураВозврата.Вставить("АдресИностраннойОрганизацииJSON", "");
	СтруктураВозврата.Вставить("ВидПлательщикаСтраховыхВзносов", "");
	СтруктураВозврата.Вставить("ГоловнаяОрганизацияКПП", "");
	СтруктураВозврата.Вставить("ГоловнаяОрганизацияНаименование", "");
	СтруктураВозврата.Вставить("ДатаПереходаНаУСН", Дата(1, 1, 1));
	СтруктураВозврата.Вставить("ДолжностьОтправителя", "");
	СтруктураВозврата.Вставить("КодОКОНХ", "");
	СтруктураВозврата.Вставить("КодОрганаПФР", "");
	СтруктураВозврата.Вставить("КодОрганаФСГС", "");
	СтруктураВозврата.Вставить("КодПодчиненностиФСС", "");
	СтруктураВозврата.Вставить("КодПодчиненностиФССДобрСтрах", "");
	СтруктураВозврата.Вставить("НаименованиеТерриториальногоОрганаФСС", "");
	СтруктураВозврата.Вставить("ОбъектНалогообложенияУСН", 0);
	СтруктураВозврата.Вставить("ОтветственноеЛицоСтатистикаФИО", "");
	СтруктураВозврата.Вставить("ОтветственноеЛицоСтатистикаДолжность", "");
	СтруктураВозврата.Вставить("ОтветственноеЛицоСтатистикаТелефон", "");
	СтруктураВозврата.Вставить("ОтветственноеЛицоСтатистикаАдресЭлектроннойПочты", "");
	СтруктураВозврата.Вставить("ПочтовыйАдресОрганизации", "");
	СтруктураВозврата.Вставить("ПочтовыйАдресОрганизацииXML", "");
	СтруктураВозврата.Вставить("ПочтовыйАдресОрганизацииJSON", "");
	СтруктураВозврата.Вставить("РегистрационныйНомерФСС", "");
	СтруктураВозврата.Вставить("СведенияОбИсполнителеДолжность", "");
	СтруктураВозврата.Вставить("СведенияОбИсполнителеТелефон", "");
	СтруктураВозврата.Вставить("СведенияОбИсполнителеФИО", "");
	СтруктураВозврата.Вставить("БухгалтерИмя", "");
	СтруктураВозврата.Вставить("БухгалтерОтчество", "");
	СтруктураВозврата.Вставить("БухгалтерФамилия", "");
	СтруктураВозврата.Вставить("БухгалтерАдресЭлектроннойПочты", "");
	СтруктураВозврата.Вставить("РуководительДолжность", "");
	СтруктураВозврата.Вставить("РуководительИмя", "");
	СтруктураВозврата.Вставить("РуководительОтчество", "");
	СтруктураВозврата.Вставить("РуководительФамилия", "");
	СтруктураВозврата.Вставить("РуководительАдресЭлектроннойПочты", "");
	СтруктураВозврата.Вставить("СистемыНалогообложения", "");
	СтруктураВозврата.Вставить("СтраховойТариф", 0);
	СтруктураВозврата.Вставить("ТелефонОрганизации", "");
	СтруктураВозврата.Вставить("ФаксОрганизации", "");
	СтруктураВозврата.Вставить("ШифрСтрахователяФСС", "");
	СтруктураВозврата.Вставить("ЭмблемаОрганизацииДляШтампаЭлектроннойПодписи", Неопределено);

	Возврат СтруктураВозврата;

КонецФункции

Функция СтруктураКонтактнойИнформацииОрганизации()
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("АдресОрганизации", "");
	СтруктураВозврата.Вставить("АдресОрганизацииXML", "");
	СтруктураВозврата.Вставить("АдресОрганизацииJSON", "");
	СтруктураВозврата.Вставить("АдресОрганизацииГород", "");
	СтруктураВозврата.Вставить("АдресОрганизацииДом", "");
	СтруктураВозврата.Вставить("АдресОрганизацииИндекс", "");
	СтруктураВозврата.Вставить("АдресОрганизацииКвартира", "");
	СтруктураВозврата.Вставить("АдресОрганизацииКодРегиона", "");
	СтруктураВозврата.Вставить("АдресОрганизацииКорпус", "");
	СтруктураВозврата.Вставить("АдресОрганизацииНаселенныйПункт", "");
	СтруктураВозврата.Вставить("АдресОрганизацииРайон", "");
	СтруктураВозврата.Вставить("АдресОрганизацииРегион", "");
	СтруктураВозврата.Вставить("АдресОрганизацииУлица", "");

	Возврат СтруктураВозврата;
	
КонецФункции

Функция СтруктураРегистрационныхДанныхСотрудника(Сотрудник)
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить(Сотрудник + "ГражданствоКод");
	СтруктураДанных.Вставить(Сотрудник + "ГражданствоНаименование");
	СтруктураДанных.Вставить(Сотрудник + "ДатаРождения");
	СтруктураДанных.Вставить(Сотрудник + "ИНН");
	СтруктураДанных.Вставить(Сотрудник + "МестоРождения");
	СтруктураДанных.Вставить(Сотрудник + "Пол");
	СтруктураДанных.Вставить(Сотрудник + "Телефон");
	СтруктураДанных.Вставить(Сотрудник + "УдостоверениеЛичностиВидДокумента");
	СтруктураДанных.Вставить(Сотрудник + "УдостоверениеЛичностиДатаВыдачи");
	СтруктураДанных.Вставить(Сотрудник + "УдостоверениеЛичностиКемВыдан");
	СтруктураДанных.Вставить(Сотрудник + "УдостоверениеЛичностиКод");
	СтруктураДанных.Вставить(Сотрудник + "УдостоверениеЛичностиКодПодразделения");
	СтруктураДанных.Вставить(Сотрудник + "УдостоверениеЛичностиНомер");
	СтруктураДанных.Вставить(Сотрудник + "УдостоверениеЛичностиСерия");
	СтруктураДанных.Вставить(Сотрудник + "ФИО");

	Возврат СтруктураДанных;

КонецФункции

Функция СтруктураКонтактнойИнформацииСотрудника(Сотрудник)
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительства");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваXML");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваJSON");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваГород");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваДом");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваИндекс");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваКвартира");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваКодРегиона");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваКорпус");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваНаселенныйПункт");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваРайон");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваРегион");
	СтруктураДанных.Вставить(Сотрудник + "АдресМестаЖительстваУлица");
	
	Возврат СтруктураДанных;

КонецФункции

Функция ПрефиксыЧастейОписанияОрганизации()
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН", "ИНН ");
	Результат.Вставить("КПП", "КПП ");
	Результат.Вставить("СвидетельствоДатаВыдачи", "от ");
	Результат.Вставить("Телефоны", "тел.: ");
	Результат.Вставить("ТелефонЮридическогоАдреса", "тел.: ");
	Результат.Вставить("Факс", "факс: ");
	Результат.Вставить("НомерСчета", "р/с ");
	Результат.Вставить("Банк", "в банке ");
	Результат.Вставить("БИК", "БИК ");
	Результат.Вставить("КоррСчет", "к/с ");
	Результат.Вставить("КодПоОКПО", "Код по ОКПО ");
	Результат.Вставить("ОГРН", "ОГРН ");
	Возврат Результат;
	
КонецФункции

#КонецОбласти