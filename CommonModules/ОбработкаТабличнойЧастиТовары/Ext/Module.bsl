// Общий модуль "Обработка табличной части товары"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ

// Процедура выполняет обработку изменения данных реквизита строки "Номенклатура"
//
// Параметры:
//	Объект            - ДанныеФормыСтруктура - Объект владелец ТЧ
//	Строка            - СтрокаТабличнойЧасти - Строка табличной части
//	ПараметрыДействия - Структура            - Параметры действия обработки реквизита
//  ИмяТаблицы        - Строка               - Название таблицы, по умолчанию - Товары.
//
Процедура ОбработатьИзменениеНоменклатура(Объект, Строка, ПараметрыДействия, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Номенклатура = Строка.Номенклатура;
	
	// установим количество
	Если ЕстьРеквизит(Объект.Ссылка, "Количество", ИмяТаблицы) И Строка.Количество=0 Тогда
		Строка.Количество = 1;
		ПараметрыДействия.Вставить("ИзменилосьКоличество", Истина);
		
		Если ЕстьРеквизит(Объект.Ссылка, "КоличествоПоНакладной", ИмяТаблицы) Тогда
			Строка.КоличествоПоНакладной = Строка.Количество;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект.Ссылка, "СтавкаНДС", ИмяТаблицы)
		И НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеПересчитыватьСтроку", Ложь) Тогда
		
		СтавкаНДС = Строка.СтавкаНДС;  
		
		ПараметрыНДС = Новый Структура();
		
		Если Справочники.ХозОперации.СоответствуетВидуОперации(Объект.ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка) Тогда
			Контрагент = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("Контрагент", Объект, ПараметрыДействия);
			Если ЕстьРеквизит(Контрагент, "ОсвобожденОтНДС") Тогда
				ОсвобожденОтНДС = Контрагент.ОсвобожденОтНДС;
			Иначе
				ОсвобожденОтНДС = Ложь;
			КонецЕсли;
		Иначе
			// Заполним ставку НДС
			ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь);
			Если ЕстьРеквизит(Объект, "ВидРемонта") Тогда
				ОсвобожденОтНДС = Объект.ВидРемонта.ОсвобожденОтНДС ИЛИ ОсвобожденОтНДС;
			КонецЕсли;
			
			ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
			ОсвобожденОтНДС = ОсвобожденОтНДС ИЛИ ПараметрыНДС.ОсвобожденОтНДС;
			
		КонецЕсли;
		
		Если ОсвобожденОтНДС Тогда
			СтавкаНДС = Справочники.СтавкиНДС.БезНДС; 
		Иначе 
			СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Номенклатура);
		КонецЕсли;
		
		Строка.СтавкаНДС = СтавкаНДС;
		
	КонецЕсли;
	
	// Alfa_IvEd +++
	
	Если ЕстьРеквизит(Объект, "КлючСтрокиПоставщика", ИмяТаблицы) Тогда
		Строка.Поставщик            = Неопределено;
		Строка.КлючСтрокиПоставщика = Неопределено;
		Строка.НаправлениеПоставки  = Неопределено;
		Строка.СрокПоставкиВСтроке  = Неопределено;
	КонецЕсли;
	
	// Alfa_IvEd ---
	
	ИспользованиеХарактеристик   = Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик;
	ИспользованиеЕдиницИзмерения = Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения;
	
	// В ТЧ может не существовать реквизита Характеристика
	Если ЕстьРеквизит(Объект.Ссылка, "ХарактеристикаНоменклатуры", ИмяТаблицы)
		И ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры) Тогда
		
		Если (ИспользованиеХарактеристик = 1 И Строка.ХарактеристикаНоменклатуры.Владелец <> Номенклатура.ТипНоменклатуры)
			ИЛИ (ИспользованиеХарактеристик = 2 И Строка.ХарактеристикаНоменклатуры.Владелец <> Номенклатура)
			ИЛИ ИспользованиеХарактеристик = 3 Тогда
			
			Строка.ХарактеристикаНоменклатуры = Неопределено;
			ОбработатьИзменениеХарактеристикаНоменклатуры(Объект, Строка, ПараметрыДействия,ИмяТаблицы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект.Ссылка, "ЕдиницаИзмерения", ИмяТаблицы) Тогда
		Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Если (ИспользованиеЕдиницИзмерения = 1 И Строка.ЕдиницаИзмерения.Владелец <> Номенклатура.ТипНоменклатуры)
				ИЛИ (ИспользованиеЕдиницИзмерения = 2 И Строка.ЕдиницаИзмерения.Владелец <> Номенклатура) Тогда
				Строка.ЕдиницаИзмерения = Номенклатура.ОсновнаяЕдиницаИзмерения;
			КонецЕсли;
		Иначе
			Строка.ЕдиницаИзмерения = Номенклатура.ОсновнаяЕдиницаИзмерения;
		КонецЕсли;
		ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия,ИмяТаблицы);
	КонецЕсли;
	
	Если ЕстьРеквизит(Номенклатура, "ВидНоменклатуры") Тогда
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
		ЭтоУслуга = ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
	Иначе
		ЭтоУслуга = Ложь;
	КонецЕсли;
	
	// Только для интерактива
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") И ТипЗнч(Строка) = Тип("ДанныеФормыЭлементКоллекции")Тогда
		
		Если Строка.Свойство("Артикул") Тогда
			Строка.Артикул = Номенклатура.Артикул;
		КонецЕсли;
		
		Если Строка.Свойство("ВладелецХарактеристики") Тогда
			Если ИспользованиеХарактеристик = 1 Тогда
				Строка.ВладелецХарактеристики = Номенклатура.ТипНоменклатуры;
			ИначеЕсли ИспользованиеХарактеристик = 2 Тогда
				Строка.ВладелецХарактеристики = Номенклатура;
			Иначе
				Строка.ВладелецХарактеристики = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Свойство("ВладелецЕдиницыИзмерения") Тогда
			Если ИспользованиеЕдиницИзмерения = 1 Тогда
				Строка.ВладелецЕдиницыИзмерения = Номенклатура.ТипНоменклатуры;
			ИначеЕсли ИспользованиеЕдиницИзмерения = 2 Тогда
				Строка.ВладелецЕдиницыИзмерения = Номенклатура;
			Иначе
				Строка.ВладелецЕдиницыИзмерения = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Свойство("РучноеСписаниеХарактеристик") Тогда
			РежимСписанияХарактеристик = Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик;
			Строка.РучноеСписаниеХарактеристик =
				(РежимСписанияХарактеристик = Перечисления.РежимыАвтоСписанияХарактеристик.РучноеСписание
				ИЛИ РежимСписанияХарактеристик = Перечисления.РежимыАвтоСписанияХарактеристик.ПустаяСсылка());
		КонецЕсли;
		
		Если Строка.Свойство("МаркируемыйТовар") Тогда
			Строка.МаркируемыйТовар = Номенклатура.ТипНоменклатуры.ВедетсяМаркировка;
		КонецЕсли;
		
		Если Строка.Свойство("ЭтоУслуга") Тогда
			Строка.ЭтоУслуга = ЭтоУслуга;
		КонецЕсли;
		
		// Добавим иконку для прослеживаемого товара
		ИменаРеквизитов = УчетПрослеживаемыхТоваровСервер.ИменаРеквизитовДляЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара();
		ИменаРеквизитов.ИмяТаблицы = ИмяТаблицы;
		УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект, Строка, ИменаРеквизитов);
		
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект.Ссылка, "Ячейка", ИмяТаблицы) И НЕ ЗначениеЗаполнено(Строка.Ячейка) Тогда
		Если ЭтоУслуга Тогда
			Строка.Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
			ПараметрыДействия.Вставить("НеПерезаполнятьЯчейку", Истина);
		ИначеЕсли ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(Объект.СкладКомпании) Тогда
			Строка.Ячейка = Справочники.Номенклатура.ПолучитьЯчейкуХранения(Номенклатура, Объект.СкладКомпании);
		Иначе
			Строка.Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект.Ссылка, "Содержание", ИмяТаблицы)
		И Не ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеОчищатьСодержание", Ложь) Тогда
		Строка.Содержание = "";
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеНоменклатура()

// Процедура выполняет обработку изменения данных реквизита строки "ЕдиницаИзмерения"
//
// Параметры:
//	Объект            - ДанныеФормыСтруктура - Объект владелец ТЧ
//	Строка            - СтрокаТабличнойЧасти - Строка табличной части
//	ПараметрыДействия - Структура            - Параметры действия обработки реквизита
//  ИмяТаблицы        - Строка               - Название таблицы, по умолчанию - Товары.
//
Процедура ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если НЕ Строка.ЕдиницаИзмерения.Пустая() Тогда
		Если НЕ Строка.Коэффициент = Строка.ЕдиницаИзмерения.Коэффициент Тогда
			Строка.Коэффициент = Строка.ЕдиницаИзмерения.Коэффициент;
			ПараметрыДействия.Вставить("ИзменилосьКоличество", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Alfa_IvEd +++
	
	Если ЕстьРеквизит(Объект, "КлючСтрокиПоставщика", ИмяТаблицы) Тогда
		Строка.Поставщик            = Неопределено;
		Строка.КлючСтрокиПоставщика = Неопределено;
		Строка.НаправлениеПоставки  = Неопределено;
		Строка.СрокПоставкиВСтроке  = Неопределено;
	КонецЕсли;
	
	// Alfa_IvEd ---
	
КонецПроцедуры // ОбработатьИзменениеЕдиницаИзмерения()

// Процедура выполняет обработку изменения данных реквизита строки "ХарактеристикаНоменклатуры"
//
// Параметры:
//	Объект            - ДанныеФормыСтруктура - Объект владелец ТЧ
//	Строка            - СтрокаТабличнойЧасти - Строка табличной части
//	ПараметрыДействия - Структура            - Параметры действия обработки реквизита
//  ИмяТаблицы        - Строка               - Название таблицы, по умолчанию - Товары.
//
Процедура ОбработатьИзменениеХарактеристикаНоменклатуры(Объект,
                                                        Строка,
                                                        ПараметрыДействия,
                                                        ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		
		ПараметрыДействия = Новый Структура();
		
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "КлючСтрокиПоставщика", ИмяТаблицы) Тогда
		
		Строка.Поставщик            = Неопределено;
		Строка.КлючСтрокиПоставщика = Неопределено;
		Строка.НаправлениеПоставки  = Неопределено;
		Строка.СрокПоставкиВСтроке  = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ ДАННЫХ РЕКВИЗИТОВ

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Проверим а не набор ли у нас...
	Если Строка.Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.Набор Тогда
		РазложитьНаборНаСтроки(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
		Возврат;
	КонецЕсли;
	
	// Производим корректировку и заполнение связанных аналитик в строке
	ОбработатьИзменениеНоменклатура(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеПересчитыватьСтроку", Ложь) Тогда
		
		// Производим получение и установку цены в строке
		УстановитьЦены(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
		
		// Пересчитаем сумму строки по измененным показателям
		РассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
		
	КонецЕсли;
	
	ПерезаполнитьЯчейкуНоменклатуры(Объект, Строка, ПараметрыДействия);

	// Заполняем служебные реквизиты строки
	ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
	// Производим расчет скидок
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТаблицы);

КонецПроцедуры // НоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ХарактеристикаНоменклатуры" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим корректировку и заполнение связанных аналитик в строке
	ОбработатьИзменениеХарактеристикаНоменклатуры(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеПересчитыватьСтроку", Ложь) Тогда
		
		ПараметрыДействия.Вставить("ЦенаТолькоДляХарактеристики", Истина);
		
		// Производим получение и установку цены в строке
		УстановитьЦены(Объект, Строка, ПараметрыДействия,ИмяТаблицы);
		
		// Пересчитаем сумму строки по измененным показателям
		РассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
		
	КонецЕсли;
	
	// Заполняем служебные реквизиты строки
	ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // ХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ЕдиницаИзмерения" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Сохраним предыдущий коэффициент для расчета
	ПредыдущийКоэффициент = ПолучитьКоэффициентСтроки(Объект, Строка);
	
	// Производим корректировку и заполнение связанных аналитик в строке
	ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия, ИмяТаблицы);

	Точность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЕдиницаИзмерения, "Точность");
	Если Точность = Неопределено Тогда 
		Точность = 3;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБазовоеКоличество") И ЕстьРеквизит(Объект, "КоличествоБазовое", ИмяТаблицы) Тогда
		РасчетСуммыСтрокиКоличествоБазовое = Истина;
		КоличествоБазовое = Окр(Строка.КоличествоБазовое, Точность);
		Если Строка.КоличествоБазовое <> КоличествоБазовое Тогда 
			Строка.КоличествоБазовое = КоличествоБазовое;
			КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	Иначе 
		РасчетСуммыСтрокиКоличествоБазовое = Ложь;
		Количество = Окр(Строка.Количество, Точность);
		Если Строка.Количество <> Количество Тогда 
			Строка.Количество = Количество;
			КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеПересчитыватьСтроку", Ложь) Тогда
		
		УстановитьЦены(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
		
	КонецЕсли;
	
	// Пересчитаем сумму строки по измененным показателям
	РассчитатьСуммуСтроки(?(РасчетСуммыСтрокиКоличествоБазовое, "КоличествоБазовое", "Количество"), Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
	ОтображатьОстаток = ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюОстатковТовара");
	
	// проверим наличие "ОстатокНаСкладе" в табличной части
	Если ОтображатьОстаток Тогда
		Коэффициент = ПолучитьКоэффициентСтроки(Объект, Строка);
		Если ЕстьРеквизит(Объект, "ОстатокНаСкладе", "Товары") Тогда
			Строка.ОстатокНаСкладе = Окр(Строка.ОстатокНаСкладе * ПредыдущийКоэффициент / Коэффициент, 3);
		ИначеЕсли ЕстьРеквизит(Объект, "ОстатокНаОрдерномСкладе", "Товары") Тогда
			Строка.ОстатокНаОрдерномСкладе = Окр(Строка.ОстатокНаОрдерномСкладе * ПредыдущийКоэффициент / Коэффициент, 3);
		КонецЕсли;
	КонецЕсли;
	
	// Обновим индикацию кодов маркировки
	ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // ЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура КоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;

	Если ЕстьРеквизит(Объект, "ЕдиницаИзмерения", ИмяТаблицы) Тогда 
		Точность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЕдиницаИзмерения, "Точность");
		Если Точность = Неопределено Тогда 
			Точность = 3;
		КонецЕсли;
		Количество = Окр(Строка.Количество, Точность);
		Если Строка.Количество <> Количество Тогда 
			Строка.Количество = Количество;
		КонецЕсли;
	КонецЕсли;
	
	// Установим количество по накладной
	Если ЕстьРеквизит(Объект, "КоличествоПоНакладной", "Товары") Тогда
		Строка.КоличествоПоНакладной = Строка.Количество;
	КонецЕсли;
	
	РассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТаблицы);
	
	// Обновим индикацию кодов маркировки
	ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // КоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "КоличествоБазовое" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;

	Если ЕстьРеквизит(Объект, "ЕдиницаИзмерения", ИмяТаблицы) Тогда 
		Точность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЕдиницаИзмерения, "Точность");
		Если Точность = Неопределено Тогда 
			Точность = 3;
		КонецЕсли;
		КоличествоБазовое = Окр(Строка.КоличествоБазовое, Точность);
		Если Строка.КоличествоБазовое <> КоличествоБазовое Тогда 
			Строка.КоличествоБазовое = КоличествоБазовое;
		КонецЕсли;
	КонецЕсли;
	
	// Получим целое количество мест, которое занимает введенное количество товара в базовых единицах.
	Количество      = Строка.КоличествоБазовое/?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
	Если Количество <> 0 Тогда
		 КоличествоЦел     = Цел(Количество);
		 КоличествоДробь   = Количество - КоличествоЦел;
		 Строка.Количество = КоличествоЦел + ?(КоличествоДробь=0,0,1);
	КонецЕсли; 
	
	РассчитатьСуммуСтроки("КоличествоБазовое", Объект, Строка, ПараметрыДействия);
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТаблицы);
	
	// Обновим индикацию кодов маркировки
	ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // КоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура ЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // ЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура СуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("Сумма", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // СуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "СтавкаНДС" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("СтавкаНДС", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // СтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "СуммаВсего" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("СуммаВсего", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	СуммаВсего = Строка.СуммаВсего;
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТаблицы);
	Строка.СуммаВсего = СуммаВсего;
	РассчитатьСуммуСтроки("СуммаВсего", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // СуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "СуммаНДС" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("СуммаНДС", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // СуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ГТД" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура ГТДПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	// Заполняем служебные реквизиты строки
	ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // ГТДПриИзменении()

// Alfa_IvEd ---

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура ПартияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	// Заполняем служебные реквизиты строки
	ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // ПартияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("СуммаСкидкиСтроки", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // СуммаСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("СуммаСкидки", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // СуммаСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // СкидкаНаТоварПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("ПроцентСкидки", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // ТоварыПроцентСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("ПроцентСкидкиСтроки", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // ПроцентСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена розничная" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("ЦенаРозничная", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // ЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент наценки" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура ПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("ПроцентНаценки", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // ПроцентНаценкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма розничная" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура СуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	РассчитатьСуммуСтроки("СуммаРозничная", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // СуммаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Место размещения" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура МестоРазмещенияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Заполняем служебные реквизиты строки
	ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры // МестоРазмещенияПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ПЕРЕСЧЕТА ТАБЛИЧНОЙ ЧАСТИ

// Разложение набора на строки
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура РазложитьНаборНаСтроки(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ИмяРеквизитаКоличество = "Количество";
	Если ПараметрыДействия.Свойство("ИмяРеквизитаКоличество", ИмяРеквизитаКоличество) Тогда
		ЕстьКоличество = Истина;
	Иначе
		ИмяРеквизитаКоличество = "Количество";
		ЕстьКоличество     = ЕстьРеквизит(Объект, ИмяРеквизитаКоличество, ИмяТаблицы);
	КонецЕсли;
	
	ЕстьХарактеристика = ЕстьРеквизит(Объект, "ХарактеристикаНоменклатуры", ИмяТаблицы);
	ЕстьНабор          = ЕстьРеквизит(Объект, "Набор",                      ИмяТаблицы);
	СоставНабора       = Строка.Номенклатура.СоставНабора;
	НовыеСтроки        = Новый Массив();
	КоличествоНаборов  = ?(ЕстьКоличество И ЗначениеЗаполнено(Строка[ИмяРеквизитаКоличество]), Строка[ИмяРеквизитаКоличество], 1);
	
	// Удаляем текущую строку из табличной части
	Объект[ИмяТаблицы].Удалить(Строка.НомерСтроки-1);
	
	// Определим менеджер текущего объекта
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Формируем структуру поиска существующей строки в таблице
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Номенклатура");
	Если ЕстьХарактеристика Тогда
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры");
	КонецЕсли;
	
	// Сформируем массив доступных видов номенклатуры
	ЕстьХозОперация  = ЕстьРеквизит(Объект, "ХозОперация");
	ВидыНоменклатуры = Новый Массив;
	Если ЕстьХозОперация Тогда
		ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(Объект.ХозОперация);
	КонецЕсли;
	
	// теперь будем рекурсивно добавлять состав набора
	Для Каждого СтрокаСоставаНабора Из СоставНабора Цикл
		
		// Проверим вид номенклатуры в соответствии с ХО
		Если ЕстьХозОперация Тогда
			ВидНоменклатурыСтроки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСоставаНабора.Номенклатура, "ВидНоменклатуры");
			Если ВидыНоменклатуры.Найти(ВидНоменклатурыСтроки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Заполняем структуру поиска данными текущей позиции набора
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаСоставаНабора);
		
		// Поищем номенклатуру из набора в таблице товаров
		НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
		
		// Обработаем результат поиска
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			// Количества может и не быть, в этом случае ничего не выполняем
			Если НЕ ЕстьКоличество Тогда
				Продолжить;
			КонецЕсли;
			
			// Получим строку и увеличим в ней количество
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			Коэффициент          = ПолучитьКоэффициентСтроки(Объект, СтрокаТабличнойЧасти);
			Количество           = ?(СтрокаСоставаНабора.Количество=0, 1, СтрокаСоставаНабора.Количество);
			СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] = СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] + (СтрокаСоставаНабора.Количество*КоличествоНаборов/Коэффициент);
			
			// Вызываем обработчик изменения данных объекта
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(Объект);
			ПараметрыВыполнения.Добавить(СтрокаТабличнойЧасти);
			ПараметрыВыполнения.Добавить(ПараметрыДействия);
			Имя = СтрЗаменить(Строка(МенеджерДокумента), "ДокументМенеджер", "Документы");
			РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(Имя + "." + ИмяТаблицы + ИмяРеквизитаКоличество + "ПриИзменении", ПараметрыВыполнения);
			
		Иначе
			
			// Добавим строку и установим в ней показатели
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтрокаСоставаНабора.Номенклатура;
			Если ЕстьХарактеристика Тогда
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаСоставаНабора.ХарактеристикаНоменклатуры;
			КонецЕсли;
			Если ЕстьКоличество Тогда
				Коэффициент = ПолучитьКоэффициентСтроки(Объект, СтрокаТабличнойЧасти);
				Количество  = ?(СтрокаСоставаНабора.Количество=0, 1, СтрокаСоставаНабора.Количество);
				СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] = СтрокаСоставаНабора.Количество*КоличествоНаборов/Коэффициент;
			КонецЕсли;
			Если ЕстьНабор Тогда
				СтрокаТабличнойЧасти.Набор = Строка.Номенклатура;
			КонецЕсли;
			Если ПараметрыДействия.Свойство("КлючСтроки") Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Строка, ПараметрыДействия.КлючСтроки);
			КонецЕсли;
			
			// Помещаем номер добавленной строки в коллекцию новых строк
			НовыеСтроки.Добавить(СтрокаТабличнойЧасти.НомерСтроки-1);
			
			// Вызываем обработчик изменения данных объекта
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(Объект);
			ПараметрыВыполнения.Добавить(СтрокаТабличнойЧасти);
			ПараметрыВыполнения.Добавить(ПараметрыДействия);
			Имя = СтрЗаменить(Строка(МенеджерДокумента), "ДокументМенеджер", "Документы");
			РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(Имя + "." + ИмяТаблицы + "НоменклатураПриИзменении", ПараметрыВыполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Устанавливаем признак отказа от дальнейшей обработки параметров строки набора
	ПараметрыДействия.Вставить("Отказ",       ИСТИНА);
	ПараметрыДействия.Вставить("НовыеСтроки", НовыеСтроки);
	
КонецПроцедуры // РазложитьНаборНаСтроки()

// Перезаполнение таблицы реквизит ячейка
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//
Процедура ПерезаполнитьТаблицуРеквизитЯчейка(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ИмяЯчейки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Ячейка", "Ячейка");
	
	Если НЕ ЕстьРеквизит(Объект, ИмяЯчейки, "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	СкладКомпании = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("СкладКомпании", Объект, ПараметрыДействия);
	
	// Перезаполним ячейки склада
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары[ИмяЯчейки] = Справочники.Номенклатура.ПолучитьЯчейкуХранения(СтрокаТовары.Номенклатура, СкладКомпании);
	КонецЦикла;
	
КонецПроцедуры

// Перезаполнение розничной цены у табличной части
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура - Вспомогательная параметры обработки табличной части.
//
Процедура ПерезаполнитьТаблицуРеквизитЦенаРозничная(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если НЕ ЕстьРеквизит(Объект, "ЦенаРозничная", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	СкладКомпании = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("СкладКомпании", Объект, ПараметрыДействия);
	
	// отработаем специфику розничного склада
	Если (НЕ СкладКомпании.Розничный) ИЛИ (НЕ ЗначениеЗаполнено(СкладКомпании.ТипЦенРозничнойТорговли)) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		УстановитьРозничнуюЦену(Объект, СтрокаТовары, ПараметрыДействия);
		ЦенаРозничнаяПриИзменении(Объект, СтрокаТовары, ПараметрыДействия);
	КонецЦикла;
	
КонецПроцедуры

// Процедуры выполняет пересчет суммы строки табличной части.
//
// Параметры:
//  ТочкаВхода			- Строка				- Имя колонки ТЧ, в которой возникло событие
//  Объект				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка
//  Строка				- СтрокаТабличнойЧасти	- Строка, для которой выполняется пересчет
//  ПараметрыДействия	- Структура				- Набор параметров, использующихся при выполнения операции.
//  ИмяТабличнойЧасти	- Строка				- Название таблицы.
//
Процедура РассчитатьСуммуСтроки(ТочкаВхода, Объект, Строка, ПараметрыДействия, ИмяТабличнойЧасти = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Реквизита КоличествоБазовое может не быть в ТЧ
	ЕстьКоличествоБазовое = ЕстьРеквизит(Объект, "КоличествоБазовое", 	ИмяТабличнойЧасти);
	ЕстьКоличество        = ЕстьРеквизит(Объект, "Количество",        	ИмяТабличнойЧасти);
	ЕстьКоэффициент       = ЕстьРеквизит(Объект, "Коэффициент",       	ИмяТабличнойЧасти);
	ЕстьСумма             = ЕстьРеквизит(Объект, "Сумма",             	ИмяТабличнойЧасти);
	ЕстьСуммаВсего        = ЕстьРеквизит(Объект, "СуммаВсего",        	ИмяТабличнойЧасти);
	ЕстьСтавкаНДС         = ЕстьРеквизит(Объект, "СтавкаНДС",         	ИмяТабличнойЧасти);
	ЕстьСуммаНДС          = ЕстьРеквизит(Объект, "СуммаНДС",     	  	ИмяТабличнойЧасти);
	ЕстьСкидка            = ЕстьРеквизит(Объект, "СкидкаНаценка");
	ЕстьСкидкаСтроки      = ЕстьРеквизит(Объект, "СкидкаНаТовар",     	ИмяТабличнойЧасти);
	ЕстьСкидкаБонусами	  = ЕстьРеквизит(Объект, "СуммаСкидкиБонусами", ИмяТабличнойЧасти);		
	
	СкладКомпании = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("СкладКомпании", Объект, ПараметрыДействия);
	
	// Получим СтавкаНДС и ЦенаВключаетНДС
	Если ЕстьСтавкаНДС Тогда
		Если ПараметрыДействия.Свойство("ТипЦен") Тогда
			ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
		ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
			ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
		КонецЕсли;
		СтавкаНДС = Строка.СтавкаНДС;
	Иначе
		ЦенаВключаетНДС = Истина;
		СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;	
	
	// Обработка розничных реквизитов
	ЕстьРозница        = Ложь;
	ЕстьПроцентНаценки = Ложь;
	Если ЕстьРеквизит(Объект, "ЦенаРозничная", ИмяТабличнойЧасти) Тогда
		
		Если НЕ СкладКомпании = Неопределено
			И ТипЗнч(СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании")
			И СкладКомпании.Розничный Тогда
			
			ЕстьРозница        = Истина;
			ЕстьПроцентНаценки = ЕстьРеквизит(Объект, "ПроцентНаценки", ИмяТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Производим корректировку количества для серийного товара
	Если (ТочкаВхода = "Количество" ИЛИ ТочкаВхода = "КоличествоБазовое")
		И ЕстьКоличество
		И ЗначениеЗаполнено(Строка.Номенклатура) Тогда
		
		// Получим количество товара в базовых единицах
		Если ТочкаВхода = "КоличествоБазовое" Тогда
			КоличествоБазовое = Строка.КоличествоБазовое;
		Иначе
			Точность = Неопределено;
			Если ЕстьРеквизит(Объект, "ЕдиницаИзмерения", ИмяТабличнойЧасти) Тогда 
				Точность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЕдиницаИзмерения, "Точность");
			КонецЕсли;
			Если Точность = Неопределено Тогда 
				Точность = 3;
			КонецЕсли;
			КоличествоБазовое = ?(ЕстьКоэффициент, Строка.Количество * Строка.Коэффициент, Строка.Количество);
			КоличествоБазовое = Окр(КоличествоБазовое, Точность);
			Если ЕстьКоличествоБазовое Тогда
				Если Строка.КоличествоБазовое <> КоличествоБазовое Тогда 
					Строка.КоличествоБазовое = КоличествоБазовое;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Проверим и сообщим пользователю, если что-то не так
		Если КоличествоБазовое > 1 И Строка.Номенклатура.ТипНоменклатуры.УникальностьСерийногоНомера Тогда
			
			Строка.Количество = 1;
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, Строка.НомерСтроки, "Номенклатура");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = '[%1] Номенклатура ""%2"" учитывается по уникальным серийным номерам. Количество не может превышать 1 базовую единицу.'"),
					УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Строка.Номенклатура),
					Строка.Номенклатура
				),
				,
				ПутьКТабличнойЧасти,
				"Объект"
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет "Базового количества"
	Если ТочкаВхода = "Количество" И ЕстьКоличествоБазовое Тогда
		Точность = Неопределено;
		Если ЕстьРеквизит(Объект, "ЕдиницаИзмерения", ИмяТабличнойЧасти) Тогда 
			Точность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЕдиницаИзмерения, "Точность");
		КонецЕсли;
		Если Точность = Неопределено Тогда 
			Точность = 3;
		КонецЕсли;
		КоличествоБазовое = ?(ЕстьКоэффициент, Строка.Количество * Строка.Коэффициент, Строка.Количество);
		КоличествоБазовое = Окр(КоличествоБазовое, Точность);
		Если Строка.КоличествоБазовое <> КоличествоБазовое Тогда 
			Строка.КоличествоБазовое = КоличествоБазовое;
		КонецЕсли;
	КонецЕсли;
	
	// В дальнейших расчетах эти точки входа равнозначны
	Если ТочкаВхода = "КоличествоБазовое" Тогда
		ТочкаВхода = "Количество";
	КонецЕсли;
	
	// Получим количество товара в базовых единицах
	Если ЕстьКоличество Тогда
		КоличествоБазовое = ?(ЕстьКоличествоБазовое, Строка.КоличествоБазовое, ?(ЕстьКоэффициент, Строка.Количество*Строка.Коэффициент, Строка.Количество));
	Иначе
		КоличествоБазовое = 1;
	КонецЕсли;
	
	// Пересчет "Суммы" и "Суммы НДС"
	Если ТочкаВхода = "СуммаВсего" И ЕстьСумма Тогда
		
		СуммаРасчетная = ?(ЦенаВключаетНДС, Строка.СуммаВсего, Строка.СуммаВсего * 100 / (100 + СтавкаНДС.Ставка));
		
		// Сначала шапочная скидка.
		Если ЕстьСкидка Тогда
			СкидкаШапкиАбсолютная = (Объект.СкидкаНаценка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная);
			Если СкидкаШапкиАбсолютная Тогда
				ЗначениеСкидкиШапки = ?(ЦенаВключаетНДС, Строка.СуммаСкидки, Строка.СуммаСкидки * 100 / (100 + СтавкаНДС.Ставка));
			Иначе
				ЗначениеСкидкиШапки = Строка.ПроцентСкидки;
			КонецЕсли;
		Иначе
			СкидкаШапкиАбсолютная = Ложь;
			ЗначениеСкидкиШапки   = 0;
		КонецЕсли;
		
		// Теперь определяем какая скидка установлена для строки.
		Если ЕстьСкидкаСтроки Тогда
			СкидкаСтрокиАбсолютная = (Строка.СкидкаНаТовар.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная);
			Если СкидкаСтрокиАбсолютная Тогда
				ЗначениеСкидкиСтроки = ?(ЦенаВключаетНДС, Строка.СуммаСкидкиСтроки, Строка.СуммаСкидкиСтроки*100/(100 + СтавкаНДС.Ставка));
			Иначе
				ЗначениеСкидкиСтроки = Строка.ПроцентСкидкиСтроки;
			КонецЕсли;
		Иначе
			СкидкаСтрокиАбсолютная = Ложь;
			ЗначениеСкидкиСтроки   = 0;
		КонецЕсли;
		
		Если СкидкаШапкиАбсолютная И СкидкаСтрокиАбсолютная Тогда
			СуммаРасчетная = СуммаРасчетная + ЗначениеСкидкиШапки + ЗначениеСкидкиСтроки;
		ИначеЕсли СкидкаШапкиАбсолютная И НЕ СкидкаСтрокиАбсолютная Тогда
			СуммаРасчетная = ? (ЗначениеСкидкиСтроки = 100, 0, (СуммаРасчетная + ЗначениеСкидкиШапки) / (1 - ЗначениеСкидкиСтроки / 100));
		ИначеЕсли НЕ СкидкаШапкиАбсолютная И СкидкаСтрокиАбсолютная Тогда
			СуммаРасчетная = ?(ЗначениеСкидкиШапки = 100, 0, (СуммаРасчетная + ЗначениеСкидкиСтроки) / (1 - ЗначениеСкидкиШапки / 100));
		Иначе
			ЗначениеСкидки = ЗначениеСкидкиСтроки + ЗначениеСкидкиШапки;  
			СуммаРасчетная = ?(ЗначениеСкидки = 100, 0, СуммаРасчетная / (1 - (ЗначениеСкидки) / 100));
		КонецЕсли;
		
		Строка.Сумма = Окр(СуммаРасчетная, 2);
		
		// Рассчитываем новую сумму НДС.
		Если ЕстьСуммаНДС Тогда
			Строка.СуммаНДС = Окр((Строка.СуммаВсего * СтавкаНДС.Ставка)/(100 + СтавкаНДС.Ставка), 2);
		КонецЕсли;
		
		СуммаБезСкидки = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти);
		СуммаСкидки = 0;
		Если Не ЦенаВключаетНДС И ЕстьСуммаНДС Тогда
			СуммаРасчетаПоТипуЦен = СуммаБезСкидки - Окр(Строка.Сумма * СтавкаНДС.Ставка / 100, 2);
		Иначе
			СуммаРасчетаПоТипуЦен = СуммаБезСкидки;
		КонецЕсли;
		
		Если ЕстьСкидка Тогда
			Если СкидкаШапкиАбсолютная Тогда
				Строка.ПроцентСкидки = ?(СуммаБезСкидки = 0, 0, Строка.СуммаСкидки * 100 / СуммаБезСкидки);
				СуммаСкидки = Строка.СуммаСкидки;
			Иначе
				Строка.СуммаСкидки = СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(СуммаБезСкидки * ЗначениеСкидкиШапки / 100, Объект.СкидкаНаценка);
				СуммаСкидки = СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(
					СуммаРасчетаПоТипуЦен * ЗначениеСкидкиШапки / 100,
					Объект.СкидкаНаценка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСкидкаСтроки Тогда
			Если СкидкаСтрокиАбсолютная Тогда
				Строка.ПроцентСкидкиСтроки = ?(СуммаБезСкидки = 0, 0, Строка.СуммаСкидкиСтроки*100/СуммаБезСкидки);
				СуммаСкидки = СуммаСкидки + Строка.СуммаСкидкиСтроки;
			Иначе
				Строка.СуммаСкидкиСтроки = СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(СуммаБезСкидки*ЗначениеСкидкиСтроки/100, Строка.СкидкаНаТовар);
				СуммаСкидки = СуммаСкидки + СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(
					СуммаРасчетаПоТипуЦен * ЗначениеСкидкиСтроки / 100,
					Строка.СкидкаНаТовар);
			КонецЕсли;
		КонецЕсли;
		
		// Рассчитываем сумму с учетом скидок
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РассчитыватьСуммуОтСуммыВсего", Ложь) Тогда
			Строка.Сумма = Строка.СуммаВсего + СуммаСкидки - ?(Не ЕстьСуммаНДС ИЛИ ЦенаВключаетНДС, 0, Строка.СуммаНДС);
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет "Цены" от "Суммы"
	Если (ТочкаВхода = "Сумма" ИЛИ ТочкаВхода = "СуммаВсего") Тогда
		
		Если Строка.Количество = 0 Тогда
			Если ТочкаВхода = "Сумма" Тогда
				Строка.Цена = Строка.Сумма;
				Строка.Сумма = 0;
			Иначе
				Строка.Цена = Строка.СуммаВсего;
				Строка.СуммаВсего = 0;
				Строка.Сумма = 0;
				Строка.СуммаНДС = 0;
			КонецЕсли;
		Иначе
			Строка.Цена = Окр(Строка.Сумма/Строка.Количество, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет "Суммы" от "Цены"
	Если ЕстьСумма И (ТочкаВхода = "Количество" ИЛИ ТочкаВхода = "Цена") Тогда
		
		Строка.Сумма = Строка.Цена * Строка.Количество;
		
	КонецЕсли;
	
	// Пересчет суммы скидки
	Если ТочкаВхода = "ПроцентСкидки" Тогда
		Если Строка.ПроцентСкидки > 100 Тогда
			Строка.ПроцентСкидки = 100;
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(Строка.СкидкаНаТовар) И Строка.СкидкаНаТовар.ФлагВытеснения) 
			ИЛИ (ЕстьРеквизит(Объект, "СкидкаНаценка") И НЕ ЗначениеЗаполнено (Объект.СкидкаНаценка)) Тогда
			Строка.ПроцентСкидки = 0;
		КонецЕсли;
		
		СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти);
		Строка.СуммаСкидки = Окр(СуммаБезСкидок*Строка.ПроцентСкидки/100, 2);
		
		// округлим скидки
		Если ЕстьРеквизит(Объект, "СкидкаНаценка") Тогда
			Строка.СуммаСкидки = СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(Строка.СуммаСкидки, Объект.СкидкаНаценка);	
		КонецЕсли;
		
	КонецЕсли;
	
	// пересчет процента скидки
	Если ТочкаВхода = "СуммаСкидки" Тогда
		
		Если ((ЗначениеЗаполнено(Строка.СкидкаНаТовар) И Строка.СкидкаНаТовар.ФлагВытеснения) 
			ИЛИ (ЕстьРеквизит(Объект, "СкидкаНаценка") И НЕ ЗначениеЗаполнено (Объект.СкидкаНаценка)))
			И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзменятьСкидку", Истина) Тогда
			Строка.СуммаСкидки = 0;
		КонецЕсли;
		
		СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(
			Объект,
			Строка,
			ИмяТабличнойЧасти,
			ПараметрыДействия
		);
		Если СуммаБезСкидок < Строка.СуммаСкидки Тогда
			Строка.СуммаСкидки = СуммаБезСкидок;
			Строка.ПроцентСкидки =100;
		Иначе
			Строка.ПроцентСкидки = ?(СуммаБезСкидок = 0, 0, Окр(Строка.СуммаСкидки * 100 / СуммаБезСкидок, 2));
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет суммы скидки
	Если ТочкаВхода = "ПроцентСкидкиСтроки"
		ИЛИ ((ТочкаВхода = "СуммаСкикди" ИЛИ ТочкаВхода = "ПроцентСкидки")
			И ЕстьСкидкаСтроки
			И ЗначениеЗаполнено(Строка.СкидкаНаТовар)
			И Строка.СкидкаНаТовар.СпособВычисления = Перечисления.СкидкиСпособВычисления.Относительная) Тогда
		
		Если Строка.ПроцентСкидкиСтроки > 100 Тогда
			Строка.ПроцентСкидкиСтроки = 100;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.СкидкаНаТовар) Тогда
			Строка.ПроцентСкидкиСтроки = 0;
		КонецЕсли;
		
		СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти);  
		
		СуммаСкидкиСтроки = Окр(СуммаБезСкидок * Строка.ПроцентСкидкиСтроки / 100, 2);

   		БазоваяСумма = СуммаБезСкидок - ?(ЕстьСкидка, Строка.СуммаСкидки, 0);
		
		Если БазоваяСумма <= СуммаСкидкиСтроки Тогда
			СуммаСкидкиСтроки = БазоваяСумма;
			Строка.ПроцентСкидкиСтроки = ?(СуммаБезСкидок = 0, 0, Окр(СуммаСкидкиСтроки * 100 / СуммаБезСкидок, 2));
		КонецЕсли;
		Строка.СуммаСкидкиСтроки = СуммаСкидкиСтроки;
		
		// округлим скидки
		Если ЕстьРеквизит(Объект, "СкидкаНаТовар", ИмяТабличнойЧасти) Тогда
			Строка.СуммаСкидкиСтроки = СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(Строка.СуммаСкидкиСтроки, Строка.СкидкаНаТовар);
		КонецЕсли;				
	КонецЕсли;
	
	Если ТочкаВхода = "СуммаСкидкиСтроки"
		ИЛИ ((ТочкаВхода = "СуммаСкикди" ИЛИ ТочкаВхода = "ПроцентСкидки")
			И ЕстьСкидкаСтроки
			И ЗначениеЗаполнено(Строка.СкидкаНаТовар)
			И Строка.СкидкаНаТовар.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная) Тогда
		
		Если Строка.СкидкаНаТовар.Пустая() Тогда
			Строка.СуммаСкидкиСтроки = 0;
		КонецЕсли;
		
		СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(
			Объект,
			Строка,
			ИмяТабличнойЧасти,
			ПараметрыДействия
		);
		Если СуммаБезСкидок < Строка.СуммаСкидки + Строка.СуммаСкидкиСтроки Тогда
			Строка.СуммаСкидкиСтроки = СуммаБезСкидок - Строка.СуммаСкидки;
		КонецЕсли;
		Строка.ПроцентСкидкиСтроки = ?(СуммаБезСкидок = 0, 0, Окр(Строка.СуммаСкидкиСтроки * 100 / СуммаБезСкидок,2));
	КонецЕсли;
	
	// Пересчет "Суммы НДС" и "Суммы всего"
	Если (ТочкаВхода = "Количество"
		ИЛИ ТочкаВхода = "Цена"
		ИЛИ ТочкаВхода = "Сумма"
		ИЛИ ТочкаВхода = "СтавкаНДС"
		ИЛИ ТочкаВхода = "ПроцентСкидкиСтроки"
		ИЛИ ТочкаВхода = "ПроцентСкидки"
		ИЛИ ТочкаВхода = "СуммаСкидки"
		ИЛИ ТочкаВхода = "СуммаСкидкиСтроки")
		И ЕстьСумма Тогда
		
		СуммаБезСкидки = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(
			Объект,
			Строка,
			ИмяТабличнойЧасти,
			ПараметрыДействия
		);
		СуммаСоСкидкой = СуммаБезСкидки
			- ?(ЕстьСкидкаСтроки, Строка.СуммаСкидкиСтроки, 0)
			- ?(ЕстьСкидка ИЛИ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЕстьСкидка", Ложь), Строка.СуммаСкидки, 0);
		
		// пересчитаем скидку строки при отрицательной сумме всего
		Если СуммаСоСкидкой < 0 Тогда
			СуммаСоСкидкой = 0;
		КонецЕсли;
		
		Если ЕстьСтавкаНДС Тогда
			 		
			Строка.СуммаВсего = СуммаСоСкидкой;
			Строка.СуммаНДС   = Окр((СуммаСоСкидкой * СтавкаНДС.Ставка)/(100 + СтавкаНДС.Ставка), 2);
			
		ИначеЕсли ЕстьСуммаВсего Тогда
			Строка.СуммаВсего = СуммаСоСкидкой;
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет "Суммы всего"
	Если ТочкаВхода = "СуммаНДС" И НЕ ЦенаВключаетНДС
		И ЕстьСумма И ЕстьСуммаВсего
		И НЕ ЕстьСкидка И НЕ ЕстьСкидкаСтроки И НЕ ЕстьСкидкаБонусами Тогда		
		
		// ЕИС 75454
		// - В документах поступления требуется, чтобы колонки СуммаБезНДС, СуммаВсего и СуммаНДС соответствовали входным документам от поставщика (УПД или Торг-12)
		// При возникновении несоответствия в копейках в результате округления требуется вручную внести корректировку в документ,
		// но ввод СуммыВсего приводит к пересчету СуммыБезНДС и СуммыНДС, поэтому данный вариант корректировки не подходит.
		// В связи с чем требуется как в УПД ввести в документе СуммуБезНДС, затем СуммуНДС, после чего пересчитывается СуммаВсего
		// В результате всегда (СуммаБезНДС + СуммаНДС) будет равно СуммаВсего
		// - Для типа цен ВключаяНДС данный пересчет делать не требуется
		// - Для документов со скидками при изменении СуммыВсего требуется пересчет скидок, что приводит к повторному пересчету СуммыНДС
		// поэтому для документов со скидками данная логика не используется
		
		Строка.СуммаВсего = Строка.Сумма + Строка.СуммаНДС;						
		
	КонецЕсли;
	
	Если НЕ ЕстьРозница Тогда
		Возврат;
	КонецЕсли;
	
	ИзмениласьЦенаРозничная = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзмениласьЦенаРозничная", Ложь);
	ИзменилсяПроцентНаценки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзменилсяПроцентНаценки", Ложь);
	
	Если ИзмениласьЦенаРозничная Тогда
		ТочкаВхода = "ЦенаРозничная";
	ИначеЕсли ИзменилсяПроцентНаценки Тогда
		ТочкаВхода = "ПроцентНаценки";
	КонецЕсли;
	
	// Пересчет "Розничной цены"
	Если ЕстьПроцентНаценки
		И (ТочкаВхода = "ПроцентНаценки"
		ИЛИ ТочкаВхода = "Цена"
		ИЛИ ТочкаВхода = "Сумма"
		ИЛИ ТочкаВхода = "СуммаВсего") Тогда
		
		ВалютаРозницы  = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(СкладКомпании.ТипЦенРозничнойТорговли, Строка.Номенклатура, Истина);
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРозницы, Объект.Дата);
		КурсРозницы    = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		
		ТекЦенаЗакупки = ?(КурсРозницы = Объект.КурсДокумента, Строка.Цена, РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка.Цена, Объект.ВалютаДокумента, Объект.КурсДокумента, ВалютаРозницы, КурсРозницы)); 
		Строка.ЦенаРозничная = ТекЦенаЗакупки + (ТекЦенаЗакупки*Строка.ПроцентНаценки/100);
		Если НЕ Объект.ТипЦен.ЦенаВключаетНДС И ЕстьСтавкаНДС И СкладКомпании.ТипЦенРозничнойТорговли.ЦенаВключаетНДС Тогда
			Строка.ЦенаРозничная = Строка.ЦенаРозничная*(1 + (Строка.СтавкаНДС.Ставка/100));
		ИначеЕсли Объект.ТипЦен.ЦенаВключаетНДС И ЕстьСтавкаНДС И НЕ СкладКомпании.ТипЦенРозничнойТорговли.ЦенаВключаетНДС Тогда
			Строка.ЦенаРозничная = Строка.ЦенаРозничная*(1 - (Строка.СтавкаНДС.Ставка/100));
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет "Розничной цены"
	Если ТочкаВхода = "СуммаРозничная" Тогда
		
		Если Строка.Количество = 0 Тогда
			Строка.ЦенаРозничная = Строка.СуммаРозничная;
		Иначе
			Строка.ЦенаРозничная = Окр(Строка.СуммаРозничная/Строка.Количество, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет "Розничной суммы"
	Если ЕстьПроцентНаценки
		И (ТочкаВхода = "Цена"
		ИЛИ ТочкаВхода = "Сумма"
		ИЛИ ТочкаВхода = "СуммаВсего")
		ИЛИ ТочкаВхода = "Количество"
		ИЛИ ТочкаВхода = "ЦенаРозничная"
		ИЛИ ТочкаВхода = "ПроцентНаценки" Тогда
		
		Строка.СуммаРозничная = Строка.ЦенаРозничная*Строка.Количество;
	КонецЕсли;
	
	// Пересчет "Розничного процента наценки"
	Если (ТочкаВхода = "ЦенаРозничная" ИЛИ ТочкаВхода = "СуммаРозничная") И ЕстьРеквизит(Объект, "ПроцентНаценки", ИмяТабличнойЧасти) Тогда
		
		ПроцентНаценки = 0;
		
		МоментВремени   = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка.МоментВремени());
		ВалютаДокумента = Объект.ВалютаДокумента;
		КурсДокумента   = Объект.КурсДокумента;
		
		ВалютаРозницы  = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(СкладКомпании.ТипЦенРозничнойТорговли, Строка.Номенклатура, Истина);
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРозницы, МоментВремени);
		Курс           = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		
		Цена          = Строка.Цена;
		ЦенаРозничная = Строка.ЦенаРозничная;
		
		Если ЕстьСтавкаНДС Тогда
			
			СтавкаНДС     = Строка.СтавкаНДС;
			
			Если Объект.ТипЦен.ЦенаВключаетНДС И (НЕ СкладКомпании.ТипЦенРозничнойТорговли.ЦенаВключаетНДС) Тогда
				НДСРозничный = (ЦенаРозничная * СтавкаНДС.Ставка)/(100 + СтавкаНДС.Ставка);
				ЦенаРозничная = ЦенаРозничная + НДСРозничный;
			ИначеЕсли (НЕ Объект.ТипЦен.ЦенаВключаетНДС) И СкладКомпании.ТипЦенРозничнойТорговли.ЦенаВключаетНДС Тогда
				НДСРозничный = (ЦенаРозничная * СтавкаНДС.Ставка)/(100 + СтавкаНДС.Ставка);
				ЦенаРозничная = ЦенаРозничная - НДСРозничный;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Цена = 0 Тогда
			ПроцентНаценки = 0;
		Иначе
			ЦенаЗакупки    = ?(ВалютаРозницы = ВалютаДокумента, Цена, РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Цена, ВалютаДокумента, КурсДокумента, ВалютаРозницы, Курс));
			ПроцентНаценки =((ЦенаРозничная-ЦенаЗакупки)/ЦенаЗакупки)*100;
		КонецЕсли;
		
		Строка.ПроцентНаценки = ПроцентНаценки;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для получения таблицы номенклатуры, в типе которой стоит признак ручного списания
// характеристик, либо этот признак не заполнен. Вызывается при проведении документов.
//
// Параметры:
//  Объект - ДокументСсылка - Ссылка на проводимый документ
//  ИмяРеквизитаНоменклатура - Строка - Имя реквизита, содержащего номенклатуру.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица товаров с ручным списанием характеристик.
//
Функция ПолучитьНоменклатуруСРучнымСписаниемХарактеристик(Объект, ИмяРеквизитаНоменклатура = "Номенклатура") Экспорт
	
	// возвращаем в виде таблицы значений
	ТаблицаНоменклатуры = Неопределено;
	
	Если НЕ ОбщегоНазначения.ЭтоДокумент(Объект.Ссылка.Метаданные()) ИЛИ НЕ ЕстьРеквизит(Объект,, "Товары") Тогда
		Возврат ТаблицаНоменклатуры;
	КонецЕсли;
	
	// получаем данные
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокТовары." + ИмяРеквизитаНоменклатура + " КАК Номенклатура
	|ИЗ
	|	Документ." + Объект.Ссылка.Метаданные().Имя + ".Товары КАК ДокТовары
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &Ссылка
	|	И (ДокТовары." + ИмяРеквизитаНоменклатура + ".ТипНоменклатуры.АвтоСписаниеХарактеристик = &РучноеСписание ИЛИ ДокТовары." + ИмяРеквизитаНоменклатура + ".ТипНоменклатуры.АвтоСписаниеХарактеристик = &ПустойРежим)
	|
	|СГРУППИРОВАТЬ ПО 
	|	ДокТовары." + ИмяРеквизитаНоменклатура + "
	|";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("РучноеСписание", Перечисления.РежимыАвтоСписанияХарактеристик.РучноеСписание);
	Запрос.УстановитьПараметр("ПустойРежим",    Перечисления.РежимыАвтоСписанияХарактеристик.ПустаяСсылка());
	
	РезультатПоиска = Запрос.Выполнить();
	
	Если НЕ РезультатПоиска.Пустой() Тогда
		ТаблицаНоменклатуры = РезультатПоиска.Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции // ПолучитьНоменклатуруСРучнымСписаниемХарактеристик()

// Перезаполнение в строке таблицы реквизита "Ячейка"
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура			- Объект, для которого выполняется обработка события.
//	Строка				- ДанныеФормыЭлементКоллекции   - Строка таблицы, в которой перезаполняется ячейка.
//  ПараметрыДействия	- Структура						- Набор параметров, использующихся при выполнения операции.
//
Процедура ПерезаполнитьЯчейкуНоменклатуры(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ИмяЯчейки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Ячейка", "Ячейка");
	НеПерезаполнятьЯчейку = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеПерезаполнятьЯчейку", Ложь);
		
	Если НеПерезаполнятьЯчейку ИЛИ НЕ ЕстьРеквизит(Объект, ИмяЯчейки, "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	СкладКомпании = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("СкладКомпании", Объект, ПараметрыДействия);
	
	Строка[ИмяЯчейки] = Справочники.Номенклатура.ПолучитьЯчейкуХранения(Строка.Номенклатура, СкладКомпании);	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНИЦИАЛИЗАЦИИ СЛУЖЕБНЫХ РЕКВИЗИТОВ

// Процедура выполняет заполнение реквизита "ОстатокНаСкладе" табличной части "товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//  ИмяТабличнойЧасти - Строка - Имя таблицы, в которой произошло событие.
//
Процедура ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект, ТекущаяСтрока = Неопределено, ПараметрыДействия = Неопределено, ИмяТабличнойЧасти = "Товары") Экспорт
	
	ОтображатьОстаток = ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюОстатковТовара");
	
	// проверим наличие "ОстатокНаСкладе" в табличной части
	Если (НЕ ОтображатьОстаток) ИЛИ (НЕ ЕстьРеквизит(Объект, "ОстатокНаСкладе", ИмяТабличнойЧасти) И НЕ ЕстьРеквизит(Объект, "ОстатокНаОрдерномСкладе", ИмяТабличнойЧасти)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "ОстатокНаОрдерномСкладе", ИмяТабличнойЧасти) Тогда
		ЗащищенныеФункцииСервер.ЗаполнитьРеквизитОстаткомПоОрдерномуСкладу(Объект, "ОстатокНаОрдерномСкладе", ТекущаяСтрока, ИмяТабличнойЧасти, ПараметрыДействия);
	Иначе
		ЗащищенныеФункцииСервер.ЗаполнитьРеквизитОстаткомПоСкладу(Объект, "ОстатокНаСкладе", ТекущаяСтрока, ИмяТабличнойЧасти, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныйРеквизитОстатокНаСкладе()

// Устарела. см. МаркировкаТоваровСервер.ЗаполнитьСлужебныйРеквизитКодыМаркировки 
// Процедура выполняет заполнение реквизита "КодыМаркировки" табличной части "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//  ИмяТабличнойЧасти - Строка - Имя таблицы, в которой произошло событие.
//
Процедура ЗаполнитьСлужебныйРеквизитКодыМаркировки(
		Объект,
		ТекущаяСтрока = Неопределено,
		ПараметрыДействия = Неопределено,
		ИмяТабличнойЧасти = "Товары") Экспорт
	
	МаркировкаТоваровСервер.ЗаполнитьСлужебныйРеквизитКодыМаркировки(
		Объект,
		ТекущаяСтрока,
		ПараметрыДействия,
		ИмяТабличнойЧасти
	);
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныйРеквизитДоляСтоимости(
		Объект,
		ПараметрыДействия = Неопределено,
		ИмяТабличнойЧасти = "Товары") Экспорт
							
	СуммаОбщая =  Объект[ИмяТабличнойЧасти].Итог("СуммаВсего")- Объект[ИмяТабличнойЧасти].Итог("СуммаНДС");
	Если СуммаОбщая > 0 Тогда
		Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл  
				
			Строка.ДоляСтоимости =Окр((Строка.СуммаВсего - Строка.СуммаНДС)/СуммаОбщая*100,2); 
				
		КонецЦикла;
	КонецЕсли;
				
КонецПроцедуры

// Процедура выполняет заполнение реквизита "ОстатокНаСкладе" табличной части "товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//  ИмяТабличнойЧасти - Строка - Имя таблицы, в которой произошло событие.
//
Процедура ЗаполнитьРеквизитЦенаБазовая(Объект, ТекущаяСтрока = Неопределено, ПараметрыДействия = Неопределено, ИмяТабличнойЧасти = "Товары") Экспорт
	
	Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
		Строка.ЦенаБазовая = Строка.Цена/?(Строка.Коэффициент=0,1,Строка.Коэффициент);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСлужебныйРеквизитОстатокНаСкладе()

// Alfa_IvEd +++

// Обработчик события возникающего при изменении данных реквизита "Поставщик" в таблице "Товары".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура			- Объект, для которого выполняется обработка события.
//  Строка				- ДанныеФормыЭлементКоллекции	- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура						- Набор параметров, использующихся при выполнения операции.
//  ИмяТаблицы			- Строка						- Имя таблицы, в которой произошло событие.
//
Процедура ПоставщикПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "КлючСтрокиПоставщика", ИмяТаблицы) Тогда
		Строка.КлючСтрокиПоставщика = Неопределено;
		Строка.НаправлениеПоставки  = Неопределено;
		Строка.СрокПоставкиВСтроке  = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Возвращает массу товаров в строке
// вес позиции берется из карточки единицы измерения (первый приоритет) 
// или из карточки номенклатуры (второй приоритет), вес умножается на количество из строки.
//
// Параметры:
//  ТекущиеДанные - СтрокаТабличнойЧасти - строка табличной части товары.
// 
// Возвращаемое значение:   
//   - Число - расчитанная масса строки.
//
Функция ПолучитьМассуСтрокиТовары(ТекущиеДанные) Экспорт 
	
	Вес = 0;
	Масса = 0;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения) Тогда
		Если ТипЗнч(ТекущиеДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			Вес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения,"Вес");
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Вес) Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			Если ТипЗнч(ТекущиеДанные.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
				Вес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура,"Вес");
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если Вес > 0 Тогда
		Масса = Вес * ТекущиеДанные.Количество;
	КонецЕсли;
	
	Возврат Масса;
	
КонецФункции

// Процедура - выводит в подвале таблицы формы надпись с итоговой массой товаров из табличной части.
//
// Параметры:
//  ТаблицаТоваров	 - ДокументТабличнаяЧасть - таблица товаров, в таблице должен быть реквизит Масса
//  ТаблицаФормы	 - ЭлементФормы           - элемент формы, в который выводится таблица товаров.
//  ЕдиницаИзмеренияМассы - Строка - Основная единица измерения массы.
//
Процедура ВывестиОбщуюМассуТоваров(ТаблицаТоваров, ТаблицаФормы, ЕдиницаИзмеренияМассы) Экспорт
	
	ЭлементыСтроки = Новый Массив;
	ЭлементыСтроки.Добавить(НСтр("ru = 'Масса:'"));
	ЭлементыСтроки.Добавить(Формат(ТаблицаТоваров.Итог("Масса"),"ЧДЦ=3; ЧН=0"));
	ЭлементыСтроки.Добавить(ЕдиницаИзмеренияМассы);
	
	ТаблицаФормы = Новый ФорматированнаяСтрока(СтрСоединить(ЭлементыСтроки, " "));
	
КонецПроцедуры

// Возвращает значение реквизита коэффициент строки.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ИмяТаблицы - Строка - Имя таблицы, в которой произошло событие.
//
// Возвращаемое значение:
//  Число - Коэффициент
//
Функция ПолучитьКоэффициентСтроки(Объект, Строка, ИмяТаблицы = "Товары") Экспорт
	
	Если НЕ ЕстьРеквизит(Объект, "Коэффициент", ИмяТаблицы) Тогда
		Коэффициент = 1;
	ИначеЕсли Строка.Коэффициент = 0 Тогда
		Коэффициент = 1;
	Иначе
		Коэффициент = Строка.Коэффициент;
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

// Перезатолнение ТЧ с учетом ГТД
//
// Параметры:
//  Объект - ДокументСсылка - Документ оплаты.
//  ТаблицаТоваров - ТаблицаЗначений - Таблица товаров документа.
//  Параметры - Структура - параметры заполнения.
//
Процедура ПерезаполнитьСУчетомГТДПартий(Объект, ТаблицаТоваров, Параметры) Экспорт
	
	// Получим менеджер текущего объекта
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Если Параметры.Свойство("ТипЦен") Тогда
		ТипЦен = Параметры.ТипЦен;
	Иначе
		ТипЦен = ?(ЕстьРеквизит(Объект.ДокументОснование, "ТипЦен"),
			Объект.ДокументОснование.ТипЦен,
			Справочники.ТипыЦен.ПустаяСсылка()
		);
	КонецЕсли;
	
	Если Параметры.Свойство("ЦенаВключаетНДС") Тогда
		ЦенаВключаетНДС = Параметры.ЦенаВключаетНДС;
	ИначеЕсли НЕ ТипЦен.Пустая() Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Если Параметры.ЗаполнятьТоварами И ЗначениеЗаполнено(Параметры.РезультатЗапросаПоТоварам) Тогда
		
		ЕстьСкидки = НЕ Параметры.РезультатЗапросаПоТоварам.Колонки.Найти("СуммаСкидки") = Неопределено;
		ЕстьСкидкиСтроки = НЕ Параметры.РезультатЗапросаПоТоварам.Колонки.Найти("СуммаСкидкиСтроки") = Неопределено;
		ЕстьСуммаСкидкиБонусами = НЕ Параметры.РезультатЗапросаПоТоварам.Колонки.Найти("СуммаСкидкиБонусами") = Неопределено;
		ЕстьГТДРасшифровка = ЕстьРеквизит(ТаблицаТоваров,"КодСтраныПроисхожденияТовара");
		ЕстьДоговорРасшифровка = ЕстьРеквизит(ТаблицаТоваров,"ПризнакАгента");
		ЕстьДоговорВзаиморасчетов = ЕстьРеквизит(ТаблицаТоваров,"ДоговорВзаиморасчетов");
		ЕстьСодержание = ЕстьРеквизит(ТаблицаТоваров, "Содержание")
			И Не Параметры.РезультатЗапросаПоТоварам.Колонки.Найти("Содержание") = Неопределено;
		ЕстьПартия = НЕ Параметры.РезультатЗапросаПоТоварам.Колонки.Найти("Партия") = Неопределено;
		ЕстьСуммаВсего = НЕ Параметры.РезультатЗапросаПоТоварам.Колонки.Найти("СуммаВсегоОсталось") = Неопределено;
		ЕстьКлючСтроки = Параметры.РезультатЗапросаПоТоварам.Колонки.Найти("КлючСтроки") <> Неопределено
			И ЕстьРеквизит(ТаблицаТоваров, "КлючСтроки");
		ЕстьПризнакПредметаРасчета =
			Параметры.РезультатЗапросаПоТоварам.Колонки.Найти("ПризнакПредметаРасчета") <> Неопределено
			И ЕстьРеквизит(ТаблицаТоваров, "ПризнакПредметаРасчета");
		
		ПараметрыДействия = Новый Структура("ЕстьСкидка,ТипЦен,ИзменятьСкидку", ЕстьСкидки, ТипЦен, Ложь);
		
		Если Параметры.ЗаполнятьПоГТД Тогда
			
			// пройдемся по товарам с указанным ГТД
			МассивСГТД = Документы.СчетФактураВыданный.ПолучитьСтрокиСГТД(Параметры.РезультатЗапросаПоТоварам);
			ЕстьПартияВСтроке = ЕстьРеквизит(Параметры.РезультатЗапросаПоТоварам, "Партия");
			
			Для Каждого стрМассива Из МассивСГТД Цикл
				
				Если стрМассива.КоличествоОсталось = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ПартияТовара = Неопределено;
				
				Если ЕстьПартияВСтроке Тогда
					
					ПартияТовара = стрМассива.Партия;
					
				КонецЕсли;
				
				Отбор = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ГТД");
				ЗаполнитьЗначенияСвойств(Отбор, стрМассива);
				
				Если ЗначениеЗаполнено(ПартияТовара) Тогда
					
					Отбор.Вставить("Партия", ПартияТовара);
					
				КонецЕсли;
				
				МассивПоиска = Параметры.РезультатЗапросаПоГТД.НайтиСтроки(Отбор);
				
				Для Каждого ТекСтрока Из МассивПоиска Цикл
					
					Если стрМассива.КоличествоОсталось = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
					Если ТекСтрока.КоличествоОсталось = 0 Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					СписываемКоличество = Мин(стрМассива.КоличествоОсталось, ТекСтрока.КоличествоОсталось);
					СписываемСумма = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаОсталось,
						Окр((стрМассива.Сумма / стрМассива.Количество) * СписываемКоличество, 2));
					СписываемСуммаНДС   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаНДСОсталось,
						Окр((стрМассива.СуммаНДС / стрМассива.Количество) * СписываемКоличество, 2));
					НоваяСтрока = ТаблицаТоваров.Добавить();
					НоваяСтрока.Номенклатура = стрМассива.Номенклатура;
					МенеджерОбъекта.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
					
					НоваяСтрока.ХарактеристикаНоменклатуры = стрМассива.ХарактеристикаНоменклатуры;
					НоваяСтрока.Количество = СписываемКоличество / ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент);
					НоваяСтрока.ГТД = стрМассива.ГТД;
					Если ЕстьГТДРасшифровка Тогда
						НоваяСтрока.КодСтраныПроисхожденияТовара = стрМассива.КодСтраныПроисхожденияТовара;
						НоваяСтрока.НомерТаможеннойДекларации = стрМассива.НомерТаможеннойДекларации;
					КонецЕсли;
					Если ЕстьДоговорВзаиморасчетов Тогда
						НоваяСтрока.ДоговорВзаиморасчетов = ТекСтрока.ДоговорВзаиморасчетов;
					КонецЕсли;
					Если ЕстьДоговорРасшифровка Тогда
						НоваяСтрока.ИНН  = ТекСтрока.ИННПоставщика;
						НоваяСтрока.Телефон = ТекСтрока.НаименованиеПоставщика;
						НоваяСтрока.Наименование = ТекСтрока.ТелефонПоставщика;
						НоваяСтрока.ПризнакАгента = ТекСтрока.ПризнакАгента;
					КонецЕсли;
					Если ЕстьПартия Тогда
						НоваяСтрока.Партия = ТекСтрока.Партия;
					КонецЕсли;
					НоваяСтрока.СтавкаНДС = стрМассива.СтавкаНДС;
					НоваяСтрока.СуммаВсего = СписываемСумма;
					НоваяСтрока.СуммаНДС = СписываемСуммаНДС;
					ПересчитатьСумму(Объект,НоваяСтрока,ЦенаВключаетНДС);
					
					Если ЕстьСкидки Тогда 
						СписываемСуммаСкидки   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаСкидкиОсталось, Окр((стрМассива.СуммаСкидки / стрМассива.Количество) * СписываемКоличество, 2));
						НоваяСтрока.СуммаСкидки = СписываемСуммаСкидки;
						МенеджерОбъекта.ТоварыСуммаСкидкиПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
						стрМассива.СуммаСкидкиОсталось = стрМассива.СуммаСкидкиОсталось - СписываемСуммаСкидки;
					КонецЕсли;
					Если ЕстьСкидкиСтроки Тогда 
						СписываемСуммаСкидкиСтроки   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаСкидкиСтрокиОсталось,Окр((стрМассива.СуммаСкидкиСтроки / стрМассива.Количество) * СписываемКоличество, 2));
						НоваяСтрока.СуммаСкидкиСтроки = СписываемСуммаСкидкиСтроки;
						НоваяСтрока.СкидкаНаТовар = стрМассива.СкидкаНаТовар;
						МенеджерОбъекта.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
						стрМассива.СуммаСкидкиСтрокиОсталось = стрМассива.СуммаСкидкиСтрокиОсталось - СписываемСуммаСкидкиСтроки;
					КонецЕсли;	
					Если ЕстьСуммаСкидкиБонусами Тогда 
						СписываемСуммаСкидкиБонусами   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаСкидкиБонусамиОсталось, Окр((стрМассива.СуммаСкидкиБонусами / стрМассива.Количество) * СписываемКоличество, 2));
						НоваяСтрока.СуммаСкидкиБонусами = СписываемСуммаСкидкиБонусами;
						НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего-СписываемСуммаСкидкиБонусами;
						НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаВсего*НоваяСтрока.СтавкаНДС.Ставка/(100+НоваяСтрока.СтавкаНДС.Ставка);
						стрМассива.СуммаСкидкиБонусамиОсталось = стрМассива.СуммаСкидкиБонусамиОсталось - СписываемСуммаСкидкиБонусами;
					КонецЕсли;
					
					Если ЕстьКлючСтроки Тогда
						НоваяСтрока.КлючСтроки = стрМассива.КлючСтроки;
					КонецЕсли;
					
					Если ЕстьПризнакПредметаРасчета Тогда
						НоваяСтрока.ПризнакПредметаРасчета = стрМассива.ПризнакПредметаРасчета;
					КонецЕсли;
					
					// уменьшим нераспределенное количество
					стрМассива.КоличествоОсталось = стрМассива.КоличествоОсталось - СписываемКоличество;
					ТекСтрока.КоличествоОсталось = ТекСтрока.КоличествоОсталось - СписываемКоличество;
					стрМассива.СуммаОсталось = стрМассива.СуммаОсталось - СписываемСумма;
					стрМассива.СуммаНДСОсталось = стрМассива.СуммаНДСОсталось - СписываемСуммаНДС;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// пройдемся по товарам с партиями
		Если Параметры.ЗаполнятьПоПартиям Тогда
			
			МассивСПартиями = Документы.СчетФактураВыданный.ПолучитьСтрокиСПартиями(Параметры.РезультатЗапросаПоТоварам);
			
			Для Каждого стрМассива Из МассивСПартиями Цикл
				
				Если стрМассива.КоличествоОсталось = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Отбор = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Партия");
				ЗаполнитьЗначенияСвойств(Отбор, стрМассива);
				МассивПоиска = Параметры.РезультатЗапросаПоГТД.НайтиСтроки(Отбор);
				
				Для Каждого ТекСтрока Из МассивПоиска Цикл
					
					Если стрМассива.КоличествоОсталось = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
					Если ТекСтрока.КоличествоОсталось = 0 Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					СписываемКоличество = Мин(стрМассива.КоличествоОсталось,ТекСтрока.КоличествоОсталось);
					СписываемСумма = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаОсталось,
						Окр((стрМассива.Сумма / стрМассива.Количество) * СписываемКоличество, 2));
					СписываемСуммаНДС   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаНДСОсталось,
						Окр((стрМассива.СуммаНДС / стрМассива.Количество) * СписываемКоличество, 2));
					НоваяСтрока = ТаблицаТоваров.Добавить();
					НоваяСтрока.Номенклатура = стрМассива.Номенклатура;
					МенеджерОбъекта.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
					НоваяСтрока.ХарактеристикаНоменклатуры = стрМассива.ХарактеристикаНоменклатуры;
					НоваяСтрока.Количество = СписываемКоличество / ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент);
					НоваяСтрока.ГТД = ТекСтрока.ГТД;
					Если ЕстьГТДРасшифровка Тогда
						НоваяСтрока.КодСтраныПроисхожденияТовара = ТекСтрока.КодСтраныПроисхожденияТовара;
						НоваяСтрока.НомерТаможеннойДекларации = ТекСтрока.НомерТаможеннойДекларации;
					КонецЕсли;
					Если ЕстьДоговорВзаиморасчетов Тогда
						НоваяСтрока.ДоговорВзаиморасчетов = стрМассива.ДоговорВзаиморасчетов;
					КонецЕсли;
					Если ЕстьДоговорРасшифровка Тогда
						НоваяСтрока.ИНН  = стрМассива.ИННПоставщика;
						НоваяСтрока.Телефон = стрМассива.НаименованиеПоставщика;
						НоваяСтрока.Наименование = стрМассива.ТелефонПоставщика;
						НоваяСтрока.ПризнакАгента = стрМассива.ПризнакАгента;
					КонецЕсли;
					НоваяСтрока.Партия = стрМассива.Партия;
					НоваяСтрока.СтавкаНДС = стрМассива.СтавкаНДС;
					НоваяСтрока.СуммаВсего = СписываемСумма;
					НоваяСтрока.СуммаНДС = СписываемСуммаНДС;
					
					ПересчитатьСумму(Объект,НоваяСтрока,ЦенаВключаетНДС);
					Если ЕстьСкидки Тогда 
						СписываемСуммаСкидки   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаСкидкиОсталось, Окр((стрМассива.СуммаСкидки / стрМассива.Количество) * СписываемКоличество, 2));
						НоваяСтрока.СуммаСкидки = СписываемСуммаСкидки;
						МенеджерОбъекта.ТоварыСуммаСкидкиПриИзменении(Объект, НоваяСтрока);
						стрМассива.СуммаСкидкиОсталось = стрМассива.СуммаСкидкиОсталось - СписываемСуммаСкидки;
					КонецЕсли;
					Если ЕстьСкидкиСтроки Тогда 
						СписываемСуммаСкидкиСтроки   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаСкидкиСтрокиОсталось,Окр((стрМассива.СуммаСкидкиСтроки / стрМассива.Количество) * СписываемКоличество, 2));
						НоваяСтрока.СуммаСкидкиСтроки = СписываемСуммаСкидкиСтроки;
						НоваяСтрока.СкидкаНаТовар = стрМассива.СкидкаНаТовар;
						МенеджерОбъекта.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, НоваяСтрока);
						стрМассива.СуммаСкидкиСтрокиОсталось = стрМассива.СуммаСкидкиСтрокиОсталось - СписываемСуммаСкидкиСтроки;
					КонецЕсли;	
					Если ЕстьСуммаСкидкиБонусами Тогда 
						СписываемСуммаСкидкиБонусами   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаСкидкиБонусамиОсталось, Окр((стрМассива.СуммаСкидкиБонусами / стрМассива.Количество) * СписываемКоличество, 2));
						НоваяСтрока.СуммаСкидкиБонусами = СписываемСуммаСкидкиБонусами;
						НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего-СписываемСуммаСкидкиБонусами;
						НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаВсего*НоваяСтрока.СтавкаНДС.Ставка/(100+НоваяСтрока.СтавкаНДС.Ставка);
						стрМассива.СуммаСкидкиБонусамиОсталось = стрМассива.СуммаСкидкиБонусамиОсталось - СписываемСуммаСкидкиБонусами;
					КонецЕсли;
					
					Если ЕстьКлючСтроки Тогда
						НоваяСтрока.КлючСтроки = стрМассива.КлючСтроки;
					КонецЕсли;
					
					Если ЕстьПризнакПредметаРасчета Тогда
						НоваяСтрока.ПризнакПредметаРасчета = стрМассива.ПризнакПредметаРасчета;
					КонецЕсли;
					
					// уменьшим нераспределенное количество
					стрМассива.КоличествоОсталось = стрМассива.КоличествоОсталось - СписываемКоличество;
					ТекСтрока.КоличествоОсталось = ТекСтрока.КоличествоОсталось - СписываемКоличество;
					стрМассива.СуммаОсталось = стрМассива.СуммаОсталось - СписываемСумма;
					стрМассива.СуммаНДСОсталось = стрМассива.СуммаНДСОсталось - СписываемСуммаНДС;
					
				КонецЦикла;
				
				// Заполним партиями, по котрым не указан ГТД
				Если стрМассива.КоличествоОсталось > 0 Тогда
					
					НоваяСтрока = ТаблицаТоваров.Добавить();
					НоваяСтрока.Номенклатура = стрМассива.Номенклатура;
					МенеджерОбъекта.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
					
					НоваяСтрока.ХарактеристикаНоменклатуры = стрМассива.ХарактеристикаНоменклатуры;
					НоваяСтрока.Количество                 = стрМассива.КоличествоОсталось/?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент);
					НоваяСтрока.Партия                     = стрМассива.Партия;
					НоваяСтрока.СтавкаНДС                  = стрМассива.СтавкаНДС;
					НоваяСтрока.СуммаВсего                 = стрМассива.СуммаОсталось;
					
					НоваяСтрока.СуммаНДС                   = стрМассива.СуммаНДСОсталось;
					ПересчитатьСумму(Объект,НоваяСтрока,ЦенаВключаетНДС);
					Если ЕстьСкидки Тогда 
						НоваяСтрока.СуммаСкидки = стрМассива.СуммаСкидкиОсталось;
						МенеджерОбъекта.ТоварыСуммаСкидкиПриИзменении(Объект, НоваяСтрока);
					КонецЕсли;
					Если ЕстьСкидкиСтроки Тогда 
						НоваяСтрока.СуммаСкидкиСтроки = стрМассива.СуммаСкидкиСтрокиОсталось;
						НоваяСтрока.СкидкаНаТовар = стрМассива.СкидкаНаТовар;
						МенеджерОбъекта.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, НоваяСтрока);
					КонецЕсли;
					Если ЕстьСуммаСкидкиБонусами Тогда 
						НоваяСтрока.СуммаСкидкиБонусами = стрМассива.СуммаСкидкиБонусамиОсталось;
						НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего-НоваяСтрока.СуммаСкидкиБонусами;
						НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаВсего*НоваяСтрока.СтавкаНДС.Ставка/(100+НоваяСтрока.СтавкаНДС.Ставка);
					КонецЕсли;
					
					Если ЕстьКлючСтроки Тогда
						НоваяСтрока.КлючСтроки = стрМассива.КлючСтроки;
					КонецЕсли;
					
					Если ЕстьПризнакПредметаРасчета Тогда
						НоваяСтрока.ПризнакПредметаРасчета = стрМассива.ПризнакПредметаРасчета;
					КонецЕсли;
					
					стрМассива.КоличествоОсталось = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// простой обход
		Если ЕстьПартия Тогда
			ГруппировкаСтрок = "Номенклатура,ХарактеристикаНоменклатуры,ГТД,Партия";
		Иначе 
			ГруппировкаСтрок = "Номенклатура,ХарактеристикаНоменклатуры,ГТД";
		КонецЕсли;

		Если ЕстьДоговорРасшифровка Тогда
			ГруппировкаСтрок = ГруппировкаСтрок + ",КодСтраныПроисхожденияТовара,НомерТаможеннойДекларации";
		КонецЕсли;
		Если ЕстьДоговорВзаиморасчетов Тогда
			ГруппировкаСтрок = ГруппировкаСтрок + ",ДоговорВзаиморасчетов";
		КонецЕсли;
		Если ЕстьДоговорРасшифровка Тогда
			ГруппировкаСтрок = ГруппировкаСтрок + ",ИННПоставщика,НаименованиеПоставщика,ТелефонПоставщика,ПризнакАгента";
		КонецЕсли;
		Параметры.РезультатЗапросаПоГТД.Свернуть(ГруппировкаСтрок, "Количество,КоличествоОсталось");
		
		Для Каждого стрМассива Из Параметры.РезультатЗапросаПоТоварам Цикл
			
			Если стрМассива.КоличествоОсталось = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СуммаВсегоТовара = 0;
			
			Отбор = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
			ЗаполнитьЗначенияСвойств(Отбор, стрМассива);
			МассивПоиска = Параметры.РезультатЗапросаПоГТД.НайтиСтроки(Отбор);
			
			Для Каждого ТекСтрока Из МассивПоиска Цикл
				
				Если стрМассива.КоличествоОсталось = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
				Если ТекСтрока.КоличествоОсталось = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СписываемКоличество = Мин(стрМассива.КоличествоОсталось, ТекСтрока.КоличествоОсталось);
				СписываемСумма = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
					стрМассива.СуммаОсталось,
					Окр((стрМассива.Сумма / стрМассива.Количество) * СписываемКоличество, 2));
				СписываемСуммаНДС = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
					стрМассива.СуммаНДСОсталось,
					Окр((стрМассива.СуммаНДС / стрМассива.Количество) * СписываемКоличество, 2));
						
				НоваяСтрока = ТаблицаТоваров.Добавить();
				НоваяСтрока.Номенклатура = стрМассива.Номенклатура;
				МенеджерОбъекта.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
				Если ЕстьСодержание Тогда
					НоваяСтрока.Содержание = стрМассива.Содержание;
				КонецЕсли;
				НоваяСтрока.ХарактеристикаНоменклатуры = стрМассива.ХарактеристикаНоменклатуры;
				НоваяСтрока.Количество = СписываемКоличество / ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент);
				НоваяСтрока.ГТД = ТекСтрока.ГТД;
				Если ЕстьПартия Тогда
					НоваяСтрока.Партия = ТекСтрока.Партия;
				КонецЕсли;
				Если ЕстьГТДРасшифровка Тогда
					НоваяСтрока.КодСтраныПроисхожденияТовара = ТекСтрока.КодСтраныПроисхожденияТовара;
					НоваяСтрока.НомерТаможеннойДекларации = ТекСтрока.НомерТаможеннойДекларации;
				КонецЕсли;
				Если ЕстьДоговорВзаиморасчетов Тогда
					НоваяСтрока.ДоговорВзаиморасчетов = ТекСтрока.ДоговорВзаиморасчетов;
				КонецЕсли;
				Если ЕстьДоговорРасшифровка Тогда
					НоваяСтрока.ИНН  = ТекСтрока.ИННПоставщика;
					НоваяСтрока.Телефон = ТекСтрока.НаименованиеПоставщика;
					НоваяСтрока.Наименование = ТекСтрока.ТелефонПоставщика;
					НоваяСтрока.ПризнакАгента = ТекСтрока.ПризнакАгента;
				КонецЕсли;
				НоваяСтрока.СтавкаНДС = стрМассива.СтавкаНДС;
				НоваяСтрока.СуммаВсего = СписываемСумма;
				НоваяСтрока.СуммаНДС = СписываемСуммаНДС;
				ПересчитатьСумму(Объект,НоваяСтрока,ЦенаВключаетНДС);
				
				Если ЕстьСкидки Тогда 
					СписываемСуммаСкидки   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
					стрМассива.СуммаСкидкиОсталось, Окр((стрМассива.СуммаСкидки / стрМассива.Количество) * СписываемКоличество, 2));
					НоваяСтрока.СуммаСкидки = СписываемСуммаСкидки;
					МенеджерОбъекта.ТоварыСуммаСкидкиПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
					стрМассива.СуммаСкидкиОсталось = стрМассива.СуммаСкидкиОсталось - СписываемСуммаСкидки;
				КонецЕсли;
				Если ЕстьСкидкиСтроки Тогда 
					СписываемСуммаСкидкиСтроки   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
					стрМассива.СуммаСкидкиСтрокиОсталось,Окр((стрМассива.СуммаСкидкиСтроки / стрМассива.Количество) * СписываемКоличество, 2));
					НоваяСтрока.СуммаСкидкиСтроки = СписываемСуммаСкидкиСтроки;
					НоваяСтрока.СкидкаНаТовар = стрМассива.СкидкаНаТовар;
					МенеджерОбъекта.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
					стрМассива.СуммаСкидкиСтрокиОсталось = стрМассива.СуммаСкидкиСтрокиОсталось - СписываемСуммаСкидкиСтроки;
				КонецЕсли;
				Если ЕстьСуммаСкидкиБонусами Тогда 
					СписываемСуммаСкидкиБонусами   = ?(стрМассива.КоличествоОсталось = СписываемКоличество,
						стрМассива.СуммаСкидкиБонусамиОсталось, Окр((стрМассива.СуммаСкидкиБонусами / стрМассива.Количество) * СписываемКоличество, 2));
					НоваяСтрока.СуммаСкидкиБонусами = СписываемСуммаСкидкиБонусами;
					НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего-СписываемСуммаСкидкиБонусами;
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаВсего*НоваяСтрока.СтавкаНДС.Ставка/(100+НоваяСтрока.СтавкаНДС.Ставка);
					стрМассива.СуммаСкидкиБонусамиОсталось = стрМассива.СуммаСкидкиБонусамиОсталось - СписываемСуммаСкидкиБонусами;
				КонецЕсли;
				
				Если ЕстьКлючСтроки Тогда
					НоваяСтрока.КлючСтроки = стрМассива.КлючСтроки;
				КонецЕсли;
				
				Если ЕстьПризнакПредметаРасчета Тогда
					НоваяСтрока.ПризнакПредметаРасчета = стрМассива.ПризнакПредметаРасчета;
				КонецЕсли;
				
				// уменьшим нераспределенное количество
				стрМассива.КоличествоОсталось = стрМассива.КоличествоОсталось - СписываемКоличество;
				ТекСтрока.КоличествоОсталось = ТекСтрока.КоличествоОсталось - СписываемКоличество;
				стрМассива.СуммаОсталось = стрМассива.СуммаОсталось - СписываемСумма;
				стрМассива.СуммаНДСОсталось = стрМассива.СуммаНДСОсталось - НоваяСтрока.СуммаНДС;
				СуммаВсегоТовара = СуммаВсегоТовара + НоваяСтрока.СуммаВсего;
				
			КонецЦикла;
			
			// если осталось еще допишем без гтд
			Если стрМассива.КоличествоОсталось > 0 Тогда
				
				НоваяСтрока = ТаблицаТоваров.Добавить();
				НоваяСтрока.Номенклатура = стрМассива.Номенклатура;
				МенеджерОбъекта.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
				Если ЕстьСодержание Тогда
					НоваяСтрока.Содержание = стрМассива.Содержание;
				КонецЕсли;
				НоваяСтрока.ХарактеристикаНоменклатуры = стрМассива.ХарактеристикаНоменклатуры;
				НоваяСтрока.Количество = стрМассива.КоличествоОсталось / ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент);
				НоваяСтрока.ГТД = Справочники.ГТД.ПустаяСсылка();
				НоваяСтрока.СтавкаНДС = стрМассива.СтавкаНДС;
				НоваяСтрока.СуммаВсего = стрМассива.СуммаОсталось;
				НоваяСтрока.СуммаНДС = стрМассива.СуммаНДСОсталось;
				
				ПересчитатьСумму(Объект,НоваяСтрока,ЦенаВключаетНДС);
				Если ЕстьСкидки Тогда 
					НоваяСтрока.СуммаСкидки = стрМассива.СуммаСкидкиОсталось;
					МенеджерОбъекта.ТоварыСуммаСкидкиПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
				КонецЕсли;
				Если ЕстьСкидкиСтроки Тогда 
					НоваяСтрока.СкидкаНаТовар = стрМассива.СкидкаНаТовар;
					НоваяСтрока.СуммаСкидкиСтроки = стрМассива.СуммаСкидкиСтрокиОсталось;
					МенеджерОбъекта.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
				КонецЕсли;
				Если ЕстьСуммаСкидкиБонусами Тогда 
					НоваяСтрока.СуммаСкидкиБонусами = стрМассива.СуммаСкидкиБонусамиОсталось;
					НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего-НоваяСтрока.СуммаСкидкиБонусами;
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаВсего*НоваяСтрока.СтавкаНДС.Ставка/(100+НоваяСтрока.СтавкаНДС.Ставка);
				КонецЕсли;	
				
				Если ЕстьКлючСтроки Тогда
					НоваяСтрока.КлючСтроки = стрМассива.КлючСтроки;
				КонецЕсли;
				
				Если ЕстьПризнакПредметаРасчета Тогда
					НоваяСтрока.ПризнакПредметаРасчета = стрМассива.ПризнакПредметаРасчета;
				КонецЕсли;
				
			ИначеЕсли стрМассива.СуммаОсталось <> 0 ИЛИ стрМассива.СуммаНДСОсталось <> 0 Тогда
				
				Если ЕстьСуммаВсего И СуммаВсегоТовара <> стрМассива.СуммаВсегоОсталось Тогда
					стрМассива.СуммаОсталось = стрМассива.СуммаВсегоОсталось - СуммаВсегоТовара;
				КонецЕсли;
				
				НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + стрМассива.СуммаОсталось;
				СуммаВсего = НоваяСтрока.СуммаВсего;
				СтараяСуммаНДС = НоваяСтрока.СуммаНДС;
				НоваяСтрока.СуммаНДС = СтараяСуммаНДС + стрМассива.СуммаНДСОсталось;
				СтараяСуммаНДС = НоваяСтрока.СуммаНДС;
				
				Если НЕ ТипЦен.Пустая() Тогда
					ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
				КонецЕсли;
				ПересчитатьСумму(Объект,НоваяСтрока,ЦенаВключаетНДС);
				Если ЕстьСкидки Тогда 
					НоваяСтрока.СуммаСкидки = НоваяСтрока.СуммаСкидки + стрМассива.СуммаСкидкиОсталось;
					МенеджерОбъекта.ТоварыСуммаСкидкиПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
				КонецЕсли;
				Если ЕстьСкидкиСтроки Тогда 
					НоваяСтрока.СуммаСкидкиСтроки = НоваяСтрока.СуммаСкидкиСтроки + стрМассива.СуммаСкидкиСтрокиОсталось;
					МенеджерОбъекта.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);
				КонецЕсли;
				НоваяСтрока.СуммаВсего = СуммаВсего;
				НоваяСтрока.СуммаНДС = СтараяСуммаНДС;
				Если ЕстьСуммаСкидкиБонусами Тогда 
					НоваяСтрока.СуммаСкидкиБонусами = стрМассива.СуммаСкидкиБонусамиОсталось;
					НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего-НоваяСтрока.СуммаСкидкиБонусами;
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаВсего*НоваяСтрока.СтавкаНДС.Ставка/(100+НоваяСтрока.СтавкаНДС.Ставка);
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Избавимся от дублей
		Если НЕ ЕстьПартия Тогда
			КолонкиГруппировки = "Номенклатура,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,ХарактеристикаНоменклатуры,ГТД,Цена";
			КолонкиГруппировки = КолонкиГруппировки + ?(ЕстьКлючСтроки, ",КлючСтроки", "");
			КолонкиГруппировки = КолонкиГруппировки + ?(ЕстьПризнакПредметаРасчета, ",ПризнакПредметаРасчета", "");
			КолонкиСуммирования = "Количество,Сумма,СуммаНДС,СуммаВсего";
			Если ЕстьРеквизит(ТаблицаТоваров,"ДоговорВзаиморасчетов") Тогда
				КолонкиГруппировки = КолонкиГруппировки + ",ДоговорВзаиморасчетов";
			КонецЕсли;
			Если ЕстьСодержание Тогда
				КолонкиГруппировки = КолонкиГруппировки + ",Содержание";
			КонецЕсли;
			Если ЕстьРеквизит(ТаблицаТоваров,"СуммаОплаты") Тогда
				КолонкиСуммирования = КолонкиСуммирования + ",СуммаОплаты";
			КонецЕсли;
			Если ЕстьРеквизит(ТаблицаТоваров,"СебестоимостьАвтомобиля") Тогда
				КолонкиСуммирования = КолонкиСуммирования + ",СебестоимостьАвтомобиля";
			КонецЕсли;
			Если ЕстьСкидки Тогда
				КолонкиГруппировки = КолонкиГруппировки + ",ПроцентСкидки";
				КолонкиСуммирования = КолонкиСуммирования + ",СуммаСкидки";
			КонецЕсли;
			Если ЕстьСкидкиСтроки Тогда
				КолонкиГруппировки = КолонкиГруппировки + ",ПроцентСкидкиСтроки,СкидкаНаТовар";
				КолонкиСуммирования = КолонкиСуммирования + ",СуммаСкидкиСтроки";
			КонецЕсли;
			Если ЕстьСуммаСкидкиБонусами Тогда
				КолонкиСуммирования = КолонкиСуммирования + ",СуммаСкидкиБонусами";
			КонецЕсли;
			Если ЕстьГТДРасшифровка Тогда
				КолонкиГруппировки = КолонкиГруппировки + ",КодСтраныПроисхожденияТовара,НомерТаможеннойДекларации";
			КонецЕсли;
			Если ЕстьДоговорВзаиморасчетов Тогда
				КолонкиГруппировки = КолонкиГруппировки + ",ДоговорВзаиморасчетов"
			КонецЕсли;
			Если ЕстьДоговорРасшифровка Тогда
				КолонкиГруппировки = КолонкиГруппировки + ",ИНН,Наименование,Телефон,ПризнакАгента";
			КонецЕсли;
			ТаблицаТоваров.Свернуть(КолонкиГруппировки,КолонкиСуммирования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ЗаполнятьРаботами И ЗначениеЗаполнено(Параметры.РезультатЗапросаПоРаботам) Тогда
		
		Для Каждого ТекСтрока Из Параметры.РезультатЗапросаПоРаботам Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.ЗаполнятьАвтомобилями И ЗначениеЗаполнено(Параметры.РезультатЗапросаПоАвто) Тогда
		
		Для Каждого СтрокаАвто Из Параметры.РезультатЗапросаПоАвто Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура = СтрокаАвто.Номенклатура;
			МенеджерОбъекта.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАвто);
			НоваяСтрока.СуммаНДС = СтрокаАвто.СуммаНДС;
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
			ПересчитатьСумму(Объект,НоваяСтрока,ЦенаВключаетНДС);
					
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьСУчетомГТДПартий()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЦенуНоменклатуры(Объект, Строка, ПараметрыДействия, ИмяТаблицы = "Товары") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПодразделениеКомпании = Объект.ПодразделениеКомпании;
	ВалютаДокумента       = Объект.ВалютаДокумента;
	КурсДокумента         = Объект.КурсДокумента;
	Контрагент            = ?(ЕстьРеквизит(Объект, "Контрагент"), Объект.Контрагент, Неопределено);
	ДоговорВзаиморасчетов = ?(ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов"), Объект.ДоговорВзаиморасчетов, Неопределено);
	
	// ЦЕНА: Непосредственно самое получение цены. Сначала пытаемся получить тип цен.
	ТипЦен = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("ТипЦен", Объект, ПараметрыДействия);
	
	Если ТипЦен = Неопределено Тогда
		Если Строка.Цена <> 0 Тогда
			Строка.Цена = 0;
			ПараметрыДействия.Вставить("ИзмениласьЦена", Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЦенаТолькоДляХарактеристики = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЦенаТолькоДляХарактеристики", Ложь);
	
	Если ЦенаТолькоДляХарактеристики И (НЕ ТипЦен.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике) Тогда
		Возврат;
	КонецЕсли;
	
	// попытаемся получить цену

	ЦенаДляЗаказНаряда = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "МоментДействияЦены", );
	Если  ЦенаДляЗаказНаряда <> Неопределено Тогда
		МоментЦены = ЦенаДляЗаказНаряда;
	Иначе
		МоментЦены = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка.МоментВремени());
	КонецЕсли;
	
	  
	// В ТЧ может не существовать реквизита ХарактеристикаНоменклатуры
	ХарактеристикаНоменклатуры = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("ХарактеристикаНоменклатуры", Строка, ПараметрыДействия);
	
	// В ТЧ может не существовать реквизита ЕдиницаИзмерения
	ЕдиницаИзмерения = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("ЕдиницаИзмерения", Строка, ПараметрыДействия);
	
	НоваяЦена = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, Строка.Номенклатура, МоментЦены, Контрагент, ВалютаДокумента, КурсДокумента, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ПодразделениеКомпании,, ДоговорВзаиморасчетов);
	
	Если НоваяЦена = 0 Тогда
		НоваяЦена = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, Строка.Номенклатура, МоментЦены, , ВалютаДокумента, КурсДокумента, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ПодразделениеКомпании);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект,"ЦенаБазовая", ИмяТаблицы) Тогда
		Строка.ЦенаБазовая = НоваяЦена;
	КонецЕсли;
		
	Если ЕстьРеквизит(Объект, "Коэффициент", ИмяТаблицы) Тогда
		НоваяЦена = НоваяЦена * Строка.Коэффициент; 
	КонецЕсли;
	
	Если Строка.Цена <> НоваяЦена Тогда
		Строка.Цена = НоваяЦена;
		ПараметрыДействия.Вставить("ИзмениласьЦена", Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦенуНоменклатуры()

Процедура УстановитьРозничнуюЦену(Объект, Строка, ПараметрыДействия, ИмяТаблицы = "Товары" ) Экспорт
	
	СкладКомпании = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("СкладКомпании", Объект, ПараметрыДействия);
	
	СтараяЦенаРозничная  = Строка.ЦенаРозничная;
	Строка.ЦенаРозничная = 0;
	
	ПараметрыДействия.Вставить("ИзмениласьЦенаРозничная", Ложь);
	ПараметрыДействия.Вставить("ИзменилсяПроцентНаценки", Ложь);
	
	Если (НЕ ТипЗнч(СкладКомпании)=Тип("СправочникСсылка.СкладыКомпании")) ИЛИ (НЕ СкладКомпании.Розничный) Тогда
		// обнулим розничную сумму и процент наценки
		ПараметрыДействия.Вставить("ИзмениласьЦенаРозничная", Истина);
		Возврат;
	КонецЕсли;
	
	ТипЦен = СкладКомпании.ТипЦенРозничнойТорговли;
	
	ЦенаТолькоДляХарактеристики = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЦенаТолькоДляХарактеристики", Ложь);
	Если ЦенаТолькоДляХарактеристики И (НЕ ТипЦен.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике) Тогда
		// расчет розничной цены от закупочной цены
		ПараметрыДействия.Вставить("ИзменилсяПроцентНаценки", Истина);
		Возврат;
	КонецЕсли;
	
	Номенклатура = Строка.Номенклатура;
	Если (НЕ ТипЗнч(Номенклатура)=Тип("СправочникСсылка.Номенклатура")) ИЛИ (Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга) Тогда
		// обнулим розничную сумму и процент наценки
		ПараметрыДействия.Вставить("ИзмениласьЦенаРозничная", Истина);
		Возврат;
	КонецЕсли;
	
	МоментВремени   = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка.МоментВремени());
	
	// В ТЧ может не существовать реквизита ХарактеристикаНоменклатуры
	ХарактеристикаНоменклатуры = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("ХарактеристикаНоменклатуры", Строка, ПараметрыДействия);
	
	// В ТЧ может не существовать реквизита ЕдиницаИзмерения
	ЕдиницаИзмерения = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("ЕдиницаИзмерения", Строка, ПараметрыДействия);
	
	ЦенаРозничная = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, Номенклатура, МоментВремени,,,, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, СкладКомпании.ПодразделениеКомпании);
	
	ЦенаРозничнаяБазовая = ЦенаРозничная;
	Если ЕстьРеквизит(Объект, "Коэффициент","Товары") Тогда
		ЦенаРозничная = ЦенаРозничная * Строка.Коэффициент; 
	КонецЕсли;
	
	Если ЦенаРозничная=0 И ЕстьРеквизит(Объект.Ссылка, "ПроцентНаценки", ИмяТаблицы) Тогда
		Строка.ПроцентНаценки = Номенклатура.ПроцентНаценки;
		// расчет розничной цены от закупочной цены
		ПараметрыДействия.Вставить("ИзменилсяПроцентНаценки", Истина);
	Иначе
		Строка.ЦенаРозничная = ЦенаРозничная;
		// пересчитаем розничную сумму и процент наценки
		Если НЕ Строка.ЦенаРозничная = СтараяЦенаРозничная Тогда
			ПараметрыДействия.Вставить("ИзмениласьЦенаРозничная", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЦены(Объект, Строка, ПараметрыДействия, ИмяТаблицы = "Товары") Экспорт
	
	Если ЕстьРеквизит(Объект.Ссылка, "Цена", ИмяТаблицы) Тогда
		УстановитьЦенуНоменклатуры(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект.Ссылка, "ЦенаРозничная", ИмяТаблицы) Тогда
		УстановитьРозничнуюЦену(Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет существует ли данная строка
//
// Параметры:
//	Строка - Строка табличной части - Строка табличной части для которой осуществляется проверка.
//
// Возвращаемое значение:
//	Булево - Истина строка доступна, Ложь - не доступна.
//
Функция ДопустимаяСтрока(Строка, ТабличнаяЧасть) Экспорт
	
	Возврат (ТабличнаяЧасть.Индекс(Строка) >= 0);
	
КонецФункции // ДопустимаяСтрока()

Процедура ПересчитатьСумму(Объект, Строка, ЦенаВключаетНДС)
	
	СуммаРасчетная = ?(ЦенаВключаетНДС, Строка.СуммаВсего, Строка.СуммаВсего - Строка.СуммаНДС);
	Строка.Сумма = Окр(СуммаРасчетная, 2);
	
	Если Строка.Количество = 0 Тогда
		Строка.Цена = Строка.СуммаВсего;
		Строка.СуммаВсего = 0;
		Строка.Сумма = 0;
		Строка.СуммаНДС = 0;
	Иначе
		Строка.Цена = Окр(Строка.Сумма/Строка.Количество, 2);
	КонецЕсли;
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		
		СтавкаНДС       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СтавкаНДС, "Ставка");
		СтавкаНДС       = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, 0);
		Себестоимость   = АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Номенклатура, Объект);
		СуммаНДС        = Окр((Макс(Строка.СуммаВсего - Себестоимость, 0) * СтавкаНДС)/(100 + СтавкаНДС),2);
		СуммаРасчетная  = ?(ЦенаВключаетНДС, Строка.СуммаВсего, Строка.СуммаВсего - СуммаНДС);
		Строка.Сумма    = СуммаРасчетная;
		СуммаРасчетная  = Макс(СуммаРасчетная - Себестоимость, 0);
		
		Если ЦенаВключаетНДС Тогда
			Строка.СуммаНДС = Окр((СуммаРасчетная * СтавкаНДС)/(100 + СтавкаНДС),2);
		Иначе
			Строка.СуммаНДС = Окр(СуммаРасчетная * СтавкаНДС / 100,2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСумму()

#КонецОбласти
