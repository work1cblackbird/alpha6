////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со связанными работами:
//  - получение состава связанных работ
//  - добавление новых связанных работ в документ
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляем выбранне автоработы в документ
//
// Параметры:
//  ВыбранныеПозиции - Массив - Выбранные связанные работы.
//  Объект - ДанныеФормыСтруктура - Объект документа.
//  Форма - УправляемаяФорма - Форма в которой происходит добавление.
//  СоставПолей - Структура - связанные поля
//   * ТаблицаТовары - Строка - наименование таблицы товаров;
//   * ТаблицаАвтоработы - Строка - Наименование таблицы Автоработы;
//   * КолонкаАвтоработы - Строка - Наименование колонки Автоработы;
//   * Суффикс - Строка - Постфикс наименования колонки.
//
// Возвращаемое значение:
//  Структура - параметры действия.
//
Функция ЗаполнитьСвязаннымиРаботами(ВыбранныеПозиции, Объект, Форма, СоставПолей = Неопределено) Экспорт
	
	Если СоставПолей = Неопределено Тогда	
		СоставПолей = СоставПолейДокументаПоУмолчанию();	
	КонецЕсли;
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ЕстьПричиныОбращения = ЕстьРеквизит(Объект,, "ПричиныОбращения");
	ЕстьИдентификаторРаботы = ЕстьРеквизит(Объект, "ИдентификаторРаботы", СоставПолей.ТаблицаАвтоработы);
	НовыеАвтоработы = Новый Массив;
	НовыеТовары = Новый Массив;
	ПараметрыДействия = МенеджерДокумента.ПолучитьПараметрыДействия(Объект);
	
	// Блокировка перерсчета скидок построчно
	ПересчитатьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитатьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	Для Каждого Источник Из ВыбранныеПозиции Цикл
		Если ЕстьПричиныОбращения Тогда	
			// Определим причину обращения в которую необходимо поместить новые позиции.
			ТипИсточника = ТипЗнч(Источник.Источник);
			Если Источник.Свойство("Контейнер") И ЗначениеЗаполнено(Источник.Контейнер) Тогда	
				ИдентификаторКонтейнера = Источник.Контейнер;	
			ИначеЕсли (ТипИсточника = Тип("СправочникСсылка.ПричиныОбращений")
				ИЛИ ТипИсточника = Тип("СправочникСсылка.Номенклатура"))
				И ЗначениеЗаполнено(Источник.КлючСтроки) Тогда	
				ИдентификаторКонтейнера = Источник.КлючСтроки;	
			ИначеЕсли ТипИсточника = Тип("СправочникСсылка.Автоработы")
				И ЕстьИдентификаторРаботы
				И ЗначениеЗаполнено(Источник.КлючСтроки) Тогда	
				НайденныеСтроки = Объект
					.Автоработы
					.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Источник.КлючСтроки));	
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИдентификаторКонтейнера = НайденныеСтроки[0].ИдентификаторПричиныОбращения;	
				КонецЕсли;
				
			ИначеЕсли Объект.ПричиныОбращения.Количество() > 0 Тогда
				ИдентификаторКонтейнера = Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения;	
			КонецЕсли;	
		КонецЕсли;
		
		Для Каждого Строка Из Источник.Данные Цикл
			
			Если Строка.ЭтоАвторабота И НЕ Строка.ВспомогательнаяАвторабота Тогда
				
				Условие = Новый Структура(СоставПолей.КолонкаАвтоработы, Строка.СвязаннаяРабота);
				
				Если ЕстьПричиныОбращения И ЗначениеЗаполнено(ИдентификаторКонтейнера) Тогда
					
					Условие.Вставить("ИдентификаторПричиныОбращения", ИдентификаторКонтейнера);
					
				КонецЕсли;
				
				ПодходящиеСтроки = Объект[СоставПолей.ТаблицаАвтоработы].НайтиСтроки(Условие);
				
				Если ПодходящиеСтроки.Количество() = 0 Тогда
					
					НоваяСтрока = Объект[СоставПолей.ТаблицаАвтоработы].Добавить();
					НоваяСтрока[СоставПолей.КолонкаАвтоработы] = Строка.СвязаннаяРабота;
					НоваяСтрока.Количество = Строка.Количество;
					
					Если ЕстьИдентификаторРаботы Тогда
						
						НоваяСтрока.ИдентификаторРаботы = Новый УникальныйИдентификатор;
						
					КонецЕсли;
					
					Если ЕстьПричиныОбращения Тогда
						
						НоваяСтрока.ИдентификаторПричиныОбращения = ИдентификаторКонтейнера;
						
					КонецЕсли;
					
					Выполнить("МенеджерДокумента."
						+ СоставПолей.ТаблицаАвтоработы
						+ СоставПолей.КолонкаАвтоработы
						+ "ПриИзменении(Объект, НоваяСтрока, ПараметрыДействия)");
					
					НовыеАвтоработы.Добавить(НоваяСтрока.ПолучитьИдентификатор());
					
				Иначе
					
					ПодходящиеСтроки[0].Количество = ПодходящиеСтроки[0].Количество + Строка.Количество;
					Выполнить("МенеджерДокумента."
						+ СоставПолей.ТаблицаАвтоработы
						+ "КоличествоПриИзменении(Объект, ПодходящиеСтроки[0], ПараметрыДействия)");
					
				КонецЕсли;
				
			ИначеЕсли Строка.ЭтоАвторабота Тогда
				
				Если ЕстьРеквизит(Объект,, "ВспомогательныеАвтоработы") Тогда
					
					Условие = Новый Структура("Авторабота", Строка.СвязаннаяРабота);
					
					Если Объект.ВспомогательныеАвтоработы.НайтиСтроки(Условие).Количество() = 0 Тогда
						
						НоваяСтрока = Объект.ВспомогательныеАвтоработы.Добавить();
						НоваяСтрока.Авторабота = Строка.СвязаннаяРабота;
						МенеджерДокумента.ВспомогательныеАвтоработыАвтоработаПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Условие = Новый Структура("Номенклатура", Строка.СвязаннаяРабота);
				
				Если Строка.Свойство("Характеристика") Тогда
					
					Условие.Вставить("ХарактеристикаНоменклатуры", Строка.Характеристика);
					
				КонецЕсли;
				
				Если ЕстьПричиныОбращения И ЗначениеЗаполнено(ИдентификаторКонтейнера) Тогда
					
					Условие.Вставить("ИдентификаторПричиныОбращения", ИдентификаторКонтейнера);
					
				КонецЕсли;
				
				ПодходящиеСтроки = Объект[СоставПолей.ТаблицаТовары].НайтиСтроки(Условие);
				
				Если ПодходящиеСтроки.Количество() = 0 Тогда
					
					НоваяСтрока = Объект[СоставПолей.ТаблицаТовары].Добавить();
					НоваяСтрока.Номенклатура = Строка.СвязаннаяРабота;
					НоваяСтрока.ХарактеристикаНоменклатуры = ПолучитьЗначениеПараметраСтруктуры(Строка, 
																			"Характеристика", Неопределено);
					НоваяСтрока.Количество = Строка.Количество;
					
					Если ЕстьПричиныОбращения Тогда
						
						НоваяСтрока.ИдентификаторПричиныОбращения = ИдентификаторКонтейнера;
						
					КонецЕсли;
					
					Выполнить("МенеджерДокумента."
						+ СоставПолей.ТаблицаТовары
						+ "НоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия)");
					
					НовыеТовары.Добавить(НоваяСтрока.ПолучитьИдентификатор());
					
				Иначе
					
					ПодходящиеСтроки[0].Количество = ПодходящиеСтроки[0].Количество + Строка.Количество;
					Выполнить("МенеджерДокумента."
						+ СоставПолей.ТаблицаТовары
						+ "КоличествоПриИзменении(Объект, ПодходящиеСтроки[0], ПараметрыДействия)");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Пересчет скидок
	Если ПересчитатьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
		Если ЕстьРеквизит(Объект, "Автоработы") Тогда
			ПараметрыДействия  = МенеджерДокумента.ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьПричиныОбращения Тогда
		ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
			Объект.ПричиныОбращения, Объект[СоставПолей.ТаблицаАвтоработы], Объект[СоставПолей.ТаблицаТовары]);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "ХарактеристикаНоменклатуры", СоставПолей.ТаблицаТовары) Тогда
		
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(
			Форма,
			СоставПолей.ТаблицаТовары,
			,
			Объект,
			СоставПолей.ТаблицаТовары + "ХарактеристикаНоменклатуры" + СоставПолей.Суффикс);
		
	КонецЕсли;
	
	
	Если ЕстьРеквизит(Объект, "КодыМаркировки", СоставПолей.ТаблицаТовары) Тогда
		
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиКодыМаркировки(
			Форма,
			СоставПолей.ТаблицаТовары,
			,
			Объект);
		
	КонецЕсли;
	
	ПараметрыДействия.Вставить("НовыеАвтоработы", НовыеАвтоработы);
	ПараметрыДействия.Вставить("НовыеТовары", НовыеТовары);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Имена реквизитов документа по умолчанию
//
// Возвращаемое значение:
//  Структура - связанные поля
//   * ТаблицаТовары - Строка - наименование таблицы товаров;
//   * ТаблицаАвтоработы - Строка - Наименование таблицы Автоработы;
//   * КолонкаАвтоработы - Строка - Наименование колонки Автоработы;
//   * Суффикс - Строка - Постфикс наименования колонки.
//
Функция СоставПолейДокументаПоУмолчанию() Экспорт
	
	СоставПолей = Новый Структура;
	СоставПолей.Вставить("ТаблицаТовары", "Товары");
	СоставПолей.Вставить("ТаблицаАвтоработы", "Автоработы");
	СоставПолей.Вставить("КолонкаАвтоработы", "Авторабота");
	СоставПолей.Вставить("Суффикс", "");
	
	Возврат СоставПолей;
	
КонецФункции

// Формирует таблицу связанных работ
//
// Параметры:
//  Объект - СправочникСсылка.Авторабота, СправочникСсылка.ПричинаОбращения - Объект для которого
//                                                                            необходимо получить связанные.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица со связанными работами для переданного объекта
//
Функция СвязанныеРаботыОбъекта(Объект) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СвязанныеРаботы.СвязаннаяРабота КАК СвязаннаяРабота,
	|	СвязанныеРаботы.Модель КАК Модель,
	|	СвязанныеРаботы.ВариантКомплектации КАК ВариантКомплектации,
	|	СвязанныеРаботы.Количество КАК Количество,
	|	СвязанныеРаботы.ВспомогательнаяАвторабота КАК ВспомогательнаяАвторабота,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СвязанныеРаботы.СвязаннаяРабота) = ТИП(Справочник.Автоработы)
	|			ТОГДА ВЫБОР
	|					КОГДА СвязанныеРаботы.СвязаннаяРабота.ВидИспользования = ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияАвторабот.ПланированиеИПроизводство)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступностьРеквизитаВспомогательнойРаботы
	|ИЗ
	|	РегистрСведений.СвязанныеРаботы КАК СвязанныеРаботы
	|ГДЕ
	|	СвязанныеРаботы.Авторабота = &ПричинаОбращения");
	Запрос.УстановитьПараметр("ПричинаОбращения", Объект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СвязанныеРаботыОбъекта()

// Разрешает или запрещает редактировать реквизит вспомогательной автоработы в табличной части.
//
// Параметры:
//  СвязанныеРаботы - ТаблицаЗначений - Таблица со связанными работами объекта.
Процедура ЗаполнитьДоступностьРеквизитаВспомогательнойРаботы(СвязанныеРаботы) Экспорт
	
	// Получим Виды использования авторабот
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Автоработы.Ссылка КАК Ссылка,
	|	Автоработы.ВидИспользования КАК ВидИспользования
	|ИЗ
	|	Справочник.Автоработы КАК Автоработы
	|ГДЕ
	|	Автоработы.Ссылка В(&Ссылки)");
	Запрос.УстановитьПараметр("Ссылки", СвязанныеРаботы.Выгрузить().ВыгрузитьКолонку("Авторабота"));
	
	РезультатЗапроса = Запрос.Выполнить();
	ВидыИспользованияАвторабот = Новый Соответствие;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ВидыИспользованияАвторабот.Вставить(Выборка.Ссылка, Выборка.ВидИспользования);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Строка Из СвязанныеРаботы Цикл
		ВидИспользованияАвтоработы = ВидыИспользованияАвторабот.Получить(Строка.Авторабота);
		
		Если ВидИспользованияАвтоработы = Неопределено
			ИЛИ ВидИспользованияАвтоработы = Перечисления.ВидыИспользованияАвторабот.Производство Тогда
			
			Строка.ДоступностьРеквизитаВспомогательнойРаботы = Ложь;
			Строка.ВспомогательнаяАвторабота = Ложь;
			
		ИначеЕсли ВидИспользованияАвтоработы = Перечисления.ВидыИспользованияАвторабот.Производство Тогда
			
			Строка.ДоступностьРеквизитаВспомогательнойРаботы = Ложь;
			Строка.ВспомогательнаяАвторабота = Истина;
			
		Иначе
			
			Строка.ДоступностьРеквизитаВспомогательнойРаботы = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет автоработы по виду ремонта при создании нового документа
//
// Параметры:
//  Объект - СправочникСсылка.Авторабота, СправочникСсылка.ПричинаОбращения - Объект для которого
//                                                                            необходимо заполнить автоработы.
//
Процедура ЗаполнитьАвтоработыПоВидуРемонтаПриСозданииНовогоДокумента(Объект) Экспорт
	
	Если Объект = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидРемонта) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРемонтаАвтоработы.Авторабота КАК Авторабота,
	|	ВидыРемонтаАвтоработы.Количество КАК Количество,
	|	ВидыРемонтаАвтоработы.ВспомогательнаяАвторабота КАК ВспомогательнаяАвторабота
	|ИЗ
	|	Справочник.ВидыРемонта.Автоработы КАК ВидыРемонтаАвтоработы
	|ГДЕ
	|	ВидыРемонтаАвтоработы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.ВидРемонта);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ПараметрыДействия = Менеджер.ПолучитьПараметрыДействия(Объект);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Таблица = ?(НЕ Выборка.ВспомогательнаяАвторабота, "Автоработы", "ВспомогательныеАвтоработы");
		НоваяСтрока = Объект[Таблица].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИдентификаторРаботы = Новый УникальныйИдентификатор;
		
		Выполнить("Менеджер." + Таблица + "АвтоработаПриИзменении(Объект, НоваяСтрока, ПараметрыДействия)");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

