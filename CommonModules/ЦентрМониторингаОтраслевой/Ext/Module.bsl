#Область СлужебныйПрограммныйИнтерфейс

// Обработчик события получения параметров центра мониторинга по умолчанию
//
Процедура ПриПолученииПараметровПоУмолчанию(Параметры, ТолькоПараметрыСервера = ЛОЖЬ) Экспорт
	
	// Если включено разделение по областям данных, значит это база с особым обслуживанием, исключаем из рассмотрения
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Переопределим параметры отправки данных
	Параметры.Вставить("Сервер",                   "stat.rarus.ru");
	Параметры.Вставить("АдресРесурса",             "RarusQMC/hs/PultQMC/v1/packet/");
	Параметры.Вставить("АдресРесурсаДляДампов",    "RarusQMC/hs/PultQMC/DumpsInfo/");
	Параметры.Вставить("Порт",                     443);
	Параметры.Вставить("ЗащищенноеСоединение",     Истина);
	
	// Возвращаем ограниченный комплект настроек.
	Если ТолькоПараметрыСервера Тогда
		Возврат;
	КонецЕсли;
	
	// Определим режим по умолчанию.
	Параметры.Вставить("ВключитьЦентрМониторинга",           Истина);
	Параметры.Вставить("ЦентрОбработкиИнформацииОПрограмме", Ложь);
	
	// Встроим параметры, которых нет в прежних версиях БСП.
	Если НЕ Параметры.Свойство("ИдентификаторИнформационнойБазыПостоянный") Тогда
		Параметры.Вставить("ИдентификаторИнформационнойБазыПостоянный", Неопределено);
	КонецЕсли;
	Если НЕ Параметры.Свойство("ОзнакомительныйПакетОтправлен") Тогда
		Параметры.Вставить("ОзнакомительныйПакетОтправлен", ИСТИНА);
	КонецЕсли;
	Если НЕ Параметры.Свойство("КонтактнаяИнформацияИзменена") Тогда
		Параметры.Вставить("КонтактнаяИнформацияИзменена", ИСТИНА);
	КонецЕсли;
	
	// Корректируем параметры отправки минимальных сведений о системе.
	Параметры.Вставить("РегистрироватьИнформациюОСистеме", ИСТИНА);
	Параметры.Вставить("РегистрироватьВерсииПодсистем",    ЛОЖЬ);
	
	// Корректируем типовые параметры сбора бизнес статистики.
	Параметры.Вставить("БизнесСтатистикаПериодФормирования", 3600);
	Параметры.Вставить("ПериодАгрегацииМалый",               600);
	Параметры.Вставить("ПериодАгрегации",                    3600);
	Параметры.Вставить("ПериодУдаления",                     86400);
	
	// Параметры нужные для регистрации продукта в личном кабинете клиента.
	Параметры.Вставить("РегистрацияПродуктаРегНомер",         "");
	Параметры.Вставить("РегистрацияПродуктаИНН",              "");
	Параметры.Вставить("РегистрацияПродуктаКПП",              "");
	Параметры.Вставить("РегистрацияПродуктаИТС",              "");
	Параметры.Вставить("РегистрацияПродуктаАккаунт",          "");
	Параметры.Вставить("РегистрацияПродуктаКонтактноеЛицо",   "");
	Параметры.Вставить("РегистрацияПродуктаЭлектроннаяПочта", "");
	Параметры.Вставить("РегистрацияПродуктаНомерТелефона",    "");
	Параметры.Вставить("РегистрацияПродуктаПартнер",          "");
	Параметры.Вставить("РегистрацияПродуктаДатаПриобретения", "");
	Параметры.Вставить("РегистрацияПродуктаНаименованиеБазы", "");
	
	// Параметры информационной базы.
	Параметры.Вставить("ПолучитьСостояниеЗащитыНаКлиенте", ЛОЖЬ);
	Параметры.Вставить("СостояниеЗащиты",                  Неопределено);
	Параметры.Вставить("НачалоВеденияУчета",               Дата(1,1,1));
	Параметры.Вставить("ПоследняяПроверкаНаКлиенте",       Дата(1,1,1));
	
	// Параметры периодичности сбора статистики.
	Параметры.Вставить("РазмерДанныхТаблицСледующееФормирование",        Дата(1,1,1));
	Параметры.Вставить("РазмерДанныхТаблицПериодФормирования",           30*24*60*60);
	Параметры.Вставить("НачалоВеденияУчетаСледующееФормирование",        Дата(1,1,1));
	Параметры.Вставить("НачалоВеденияУчетаПериодФормирования",           3*30*24*60*60);
	Параметры.Вставить("ИдентификаторКонфигурацииСледующееФормирование", Дата(1,1,1));
	
КонецПроцедуры // ПриПолученииПараметровПоУмолчанию()

// Добавляет необходимые параметры работы клиента при запуске.
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(ПараметрыКлиентаЦентрМониторинга, Параметры) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ИдентификаторПользователяИБ = Строка(ТекущийПользователь.ИдентификаторПользователяИБ);
	БизнесРольПользователя      = ИдентификаторБизнесРолиПользователя(ТекущийПользователь);
	
	ПараметрыКлиентаЦентрМониторинга.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	ПараметрыКлиентаЦентрМониторинга.Вставить("БизнесРольПользователя",      БизнесРольПользователя);
	
КонецПроцедуры // ПриДобавленииПараметровРаботыКлиентаПриЗапуске()

// Вызывается из обработчика ожидания каждые 20 минут, например, для контроля
// динамического обновления и окончания срока действия учетной записи пользователя.
//
// Параметры:
//  Параметры - Структура - в структуру следует вставить свойства для дальнейшего анализа на клиенте.
//
Процедура ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Параметры=Неопределено) Экспорт
	
	// Если включено разделение по областям данных, значит это база с особым обслуживанием, исключаем из рассмотрения
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Получим настройки центра мониторинга.
	ПараметрыЦентраМониторинга = Новый Структура();
	ПараметрыЦентраМониторинга.Вставить("ВключитьЦентрМониторинга");
	ПараметрыЦентраМониторинга.Вставить("ЦентрОбработкиИнформацииОПрограмме");
	ПараметрыЦентраМониторинга.Вставить("ПоследняяПроверкаНаКлиенте");
	ПараметрыЦентраМониторинга.Вставить("СостояниеЗащиты");
	ПараметрыЦентраМониторинга.Вставить("ПолучитьСостояниеЗащитыНаКлиенте");
	ПараметрыЦентраМониторинга = ЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	// Проверим, включен ли центр мониторинга.
	Если НЕ ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга И НЕ ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме Тогда
		Возврат;
	КонецЕсли;
	
	// Получим маркеры изменения интервалов времени.
	ПоследняяПроверкаНаКлиенте = МИН(ТекущаяДатаСеанса(), ПараметрыЦентраМониторинга.ПоследняяПроверкаНаКлиенте);
	ИзменениеЧаса   = (НачалоЧаса  (ПоследняяПроверкаНаКлиенте) <> НачалоЧаса  (ТекущаяДатаСеанса()));
	ИзменениеДня    = (НачалоДня   (ПоследняяПроверкаНаКлиенте) <> НачалоДня   (ТекущаяДатаСеанса()));
	ИзменениеНедели = (НачалоНедели(ПоследняяПроверкаНаКлиенте) <> НачалоНедели(ТекущаяДатаСеанса()));
	
	// Подготовим структуру для фиксации записываемых параметров.
	ПараметрыДляЗаписи = Новый Структура();	
	
	// При изменении интервала, обновляем параметры.
	Если ИзменениеЧаса Тогда
		ПараметрыДляЗаписи.Вставить("ПоследняяПроверкаНаКлиенте", ТекущаяДатаСеанса());
	КонецЕсли;
	
	// Получаем состояние системы защиты.
	Если ПараметрыЦентраМониторинга.ПолучитьСостояниеЗащитыНаКлиенте И (ИзменениеДня ИЛИ ПараметрыЦентраМониторинга.СостояниеЗащиты=Неопределено) Тогда
		СостояниеЗащиты = ПолучитьПараметрыЛицензий(ЦентрМониторингаОтраслевой, Новый Массив);
		ПараметрыДляЗаписи.Вставить("СостояниеЗащиты", Новый ХранилищеЗначения(СостояниеЗащиты, Новый СжатиеДанных(9)));
	КонецЕсли;
	
	// Записываем измененные параметры в константу.
	Если ПараметрыДляЗаписи.Количество() > 0 Тогда
		ЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыДляЗаписи);
	КонецЕсли;
	
КонецПроцедуры // ПриВыполненииСтандартныхПериодическихПроверокНаСервере()

// Обработчик обновления настроек отправки статистики при переходе на новый релиз
//
Процедура ПриОбновленииИнформационнойБазы() Экспорт
	
	// Если включено разделение по областям данных, значит это база с особым обслуживанием, исключаем из рассмотрения
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Получим текущие настройки.
	ПараметрыЦентраМониторинга = ЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторинга();
	
	// Определить необходимость обновления.
	Если Не ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга И Не ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме Тогда
		Возврат;
	КонецЕсли;
	
	// Переопределить параметры для отправки данных.
	ПриПолученииПараметровПоУмолчанию(ПараметрыЦентраМониторинга, Истина);
	
	// Переключим на основной сервер ЦКК.
	ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга           = Истина;
	ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме = Ложь;
	
	// Обновляем значения параметров.
	ЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	// Проверим регламентное задание.
	РегЗадание = ЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
	ЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	
	// Получим идентификатор информационной базы.
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	ПараметрыПроцедуры = Новый Структура("Итератор,ОтправкаТестовогоПакета,ПолучениеИдентификатора", 0, Ложь, Истина);
	ЦентрМониторингаСлужебный.ОтправитьТестовыйПакет(ПараметрыПроцедуры, АдресРезультата);
	
КонецПроцедуры // ПриОбновленииИнформационнойБазы()

// Обработчик события сбора статистики конфигурации
//
Процедура ПриСбореПоказателейСтатистикиКонфигурации(Параметры, ДатаЗапуска, НеобходимаЗаписьОценкиПроизводительности) Экспорт
	
	// Если включено разделение по областям данных, значит это база с особым обслуживанием, исключаем из рассмотрения.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	ПриоритетныйРежим = (НЕ ЭтоФоновоеЗадание());
	
	// Выполняем операцию под полными правами.
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	// Получим настройки центра мониторинга.
	ПараметрыЦентраМониторинга = Новый Структура();
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьСтатистикуКонфигурации");
	ПараметрыЦентраМониторинга.Вставить("ОтправкаДанныхСледующееФормирование");
	ПараметрыЦентраМониторинга.Вставить("НомерКрайнегоПакета");
	ПараметрыЦентраМониторинга.Вставить("РазмерДанныхТаблицСледующееФормирование");
	ПараметрыЦентраМониторинга.Вставить("РазмерДанныхТаблицПериодФормирования");
	ПараметрыЦентраМониторинга.Вставить("НачалоВеденияУчетаСледующееФормирование");
	ПараметрыЦентраМониторинга.Вставить("НачалоВеденияУчетаПериодФормирования");
	ПараметрыЦентраМониторинга.Вставить("СостояниеЗащиты");
	ПараметрыЦентраМониторинга.Вставить("ПолучитьСостояниеЗащитыНаКлиенте");
	ПараметрыЦентраМониторинга.Вставить("КонтактнаяИнформацияИзменена");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаРегНомер");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаИНН");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаКПП");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаИТС");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаАккаунт");
	ПараметрыЦентраМониторинга = ЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	// Подготовим структуру для накопления измененных параметров.
	ПараметрыДляЗаписи = Новый Структура();
	
	// Обновим сведения о размере таблиц информационной базы.
	Если ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации И ДатаЗапуска >= ПараметрыЦентраМониторинга.РазмерДанныхТаблицСледующееФормирование Тогда
		
		Попытка
			
			// Регистрируем размеры таблиц.
			РегистрироватьРазмерДанныхТаблицИнформационнойБазы();
			
			// Устанавливаем следующую дату актуализации.
			ПараметрыДляЗаписи.Вставить("РазмерДанныхТаблицСледующееФормирование", ДатаЗапуска + ПараметрыЦентраМониторинга.РазмерДанныхТаблицПериодФормирования);
			НеобходимаЗаписьОценкиПроизводительности = ИСТИНА;
			
		Исключение
			ИсключительнаяСитуацияПриСбореПоказателейСтатистики(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	// Обновим сведения о размере таблиц информационной базы.
	Если ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации И ДатаЗапуска >= ПараметрыЦентраМониторинга.НачалоВеденияУчетаСледующееФормирование Тогда
		
		Попытка
			
			// Получаем дату начала ведения учета.
			РегистрироватьНачалоВеденияУчета();
			
			// Устанавливаем следующую дату актуализации.
			ПараметрыДляЗаписи.Вставить("НачалоВеденияУчетаСледующееФормирование", ДатаЗапуска + ПараметрыЦентраМониторинга.НачалоВеденияУчетаПериодФормирования);
			НеобходимаЗаписьОценкиПроизводительности = ИСТИНА;
			
		Исключение
			ИсключительнаяСитуацияПриСбореПоказателейСтатистики(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	// При работе со внешними копонентами могут произойти разные внештатные ситуации.
	Если НЕ ПараметрыЦентраМониторинга.ПолучитьСостояниеЗащитыНаКлиенте И ДатаЗапуска >= ПараметрыЦентраМониторинга.ОтправкаДанныхСледующееФормирование Тогда
		
		// При работе со внешними копонентами могут произойти разные внештатные ситуации.
		ПараметрыДляЗаписи.Вставить("ПолучитьСостояниеЗащитыНаКлиенте", ИСТИНА);
		ПараметрыДляЗаписи.Вставить("СостояниеЗащиты",                  Неопределено);
		ЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыДляЗаписи);
		
		// Выполняем получение состояния.
		НайденаСистемаЗащиты = ЛОЖЬ;
		СостояниеЗащиты      = Новый Массив();
		ПолучитьПараметрыЛицензий(ЦентрМониторингаОтраслевой, СостояниеЗащиты, НайденаСистемаЗащиты);
		
		// Если системы защиты нет, или успешно получены параметры, фиксируем факт работы.
		Если НЕ НайденаСистемаЗащиты ИЛИ СостояниеЗащиты.Количество() > 0 Тогда
			ПараметрыДляЗаписи.Вставить("ПолучитьСостояниеЗащитыНаКлиенте", ЛОЖЬ);
			ПараметрыДляЗаписи.Вставить("СостояниеЗащиты",                  Новый ХранилищеЗначения(СостояниеЗащиты, Новый СжатиеДанных(9)));
		КонецЕсли;
		
	ИначеЕсли (ПараметрыЦентраМониторинга.НомерКрайнегоПакета+1)%5 = 0 Тогда
		ПараметрыДляЗаписи.Вставить("ПолучитьСостояниеЗащитыНаКлиенте", ЛОЖЬ);
	КонецЕсли;
	
	// Корректируем ключевую регистрационную информацию.
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		
		// Получаем данные из безопасного хранилища.
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ИДПодсистемыИПП = МодульИнтернетПоддержкаПользователей.ИдентификаторПодсистемы();
		ХранилищеДанных = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИДПодсистемыИПП, "regnumber,inn,kpp,login");
		
		// Проверяем корректность заполнения контактной информации.
		Если ПустаяСтрока(ПараметрыЦентраМониторинга.РегистрацияПродуктаРегНомер) И ХранилищеДанных.regnumber<>Неопределено Тогда
			ПараметрыДляЗаписи.Вставить("РегистрацияПродуктаРегНомер",  ХранилищеДанных.regnumber);
			ПараметрыДляЗаписи.Вставить("КонтактнаяИнформацияИзменена", ИСТИНА);
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыЦентраМониторинга.РегистрацияПродуктаИНН) И ХранилищеДанных.inn<>Неопределено Тогда
			ПараметрыДляЗаписи.Вставить("РегистрацияПродуктаИНН",       ХранилищеДанных.inn);
			ПараметрыДляЗаписи.Вставить("КонтактнаяИнформацияИзменена", ИСТИНА);
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыЦентраМониторинга.РегистрацияПродуктаКПП) И ХранилищеДанных.kpp<>Неопределено Тогда
			ПараметрыДляЗаписи.Вставить("РегистрацияПродуктаКПП",       ХранилищеДанных.kpp);
			ПараметрыДляЗаписи.Вставить("КонтактнаяИнформацияИзменена", ИСТИНА);
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыЦентраМониторинга.РегистрацияПродуктаИТС) И ХранилищеДанных.login<>Неопределено Тогда
			ПараметрыДляЗаписи.Вставить("РегистрацияПродуктаИТС",       ХранилищеДанных.login);
			ПараметрыДляЗаписи.Вставить("КонтактнаяИнформацияИзменена", ИСТИНА);
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохраняем измененные параметры.
	Если ПараметрыДляЗаписи.Количество() > 0 Тогда
		ЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыДляЗаписи);
	КонецЕсли;
	
КонецПроцедуры // ПриСбореПоказателейСтатистикиКонфигурации()

// Обработчик события возникающего перед формированием ознакомительного пакета
//
Процедура ПередОтправкойОзнакомительногоПакета(ПараметрыВыполнения, ДатаЗапуска, ПараметрыЦентраМониторинга) Экспорт
	
	// Если включено разделение по областям данных, значит это база с особым обслуживанием, исключаем из рассмотрения
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Технические сведения о система отправляем всегда
	ЦентрМониторингаСлужебный.УстановитьПараметрЦентраМониторингаВнешнийВызов("РегистрироватьИнформациюОСистеме", ИСТИНА);
	
КонецПроцедуры // ПередОтправкойОзнакомительногоПакета()

// Обработчик события формирования пакета для отправки на сервер статистики
//
Процедура ПриФормированииПакетаДляОтправки(ПакетДанных, ПараметрыЦентраМониторинга, ДатаЗапуска, ДатаНачала, ДатаОкончания, ПериодУдаления) Экспорт
	
	// Если включено разделение по областям данных, значит это база с особым обслуживанием, исключаем из рассмотрения
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	ПриоритетныйРежим = (НЕ ЭтоФоновоеЗадание());
	ПолученоСогласие  = (ПараметрыЦентраМониторинга.ЗапросКонтактнойИнформации=1);
	
	// Расширяем пакет информации о сервере.
	Если ПараметрыЦентраМониторинга.РегистрироватьИнформациюОСистеме И ПакетДанных.Свойство("info") Тогда
		
		// Регистрируем сведения о текущем типе СУБД.
		ПакетДанных["info"].Вставить("dbType", ОпределитьТипСУБД());
		
		// Получим идентификаторы соединения информационной баз.
		Соединение = РазложитьСтрокуСоединенияНаПараметры(СтрокаСоединенияИнформационнойБазы(), Истина);
		ПакетДанных["info"].Вставить("hostName", ?(ПолученоСогласие, Соединение.Компьютер, ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Соединение.Компьютер)));
		ПакетДанных["info"].Вставить("srvrName", ?(ПолученоСогласие, Соединение.Кластер,   ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Соединение.Кластер)));
		ПакетДанных["info"].Вставить("baseName", ?(ПолученоСогласие, Соединение.ИмяБазы,   ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Соединение.ИмяБазы)));
		
		// Получим сведения о количество пользователей в информационной системе
		ПакетДанных["info"].Вставить("usrCount", ПользователиИнформационнойБазы.ПолучитьПользователей().Количество());
		
	КонецЕсли;
	
	// Расширяем секцию статистических сведений о таблицах базы.
	Если ПараметрыЦентраМониторинга.РегистрироватьСтатистикуКонфигурации И ПакетДанных.Свойство("config") Тогда
		
		// Включаем информацию о дате начала ведения учета.
		ПакетДанных["config"].Вставить("StartOfAccounting", ПараметрыЦентраМониторинга.НачалоВеденияУчета);
		
		// Признак блокировки работы с внешними ресурсами.
		ПакетДанных["config"].Вставить("ExternalResourcesIsBlocked", РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована());
		
	КонецЕсли;
	
	// Расширяем секцию бизнес-статистики.
	Если ПараметрыЦентраМониторинга.РегистрироватьБизнесСтатистику И ПакетДанных.Свойство("business") Тогда
		
		БизнесСтатистика = ПакетДанных["business"];
		
		КолонкиИндекса = Новый Соответствие;
		КолонкиИндекса.Вставить("ОперацияСтатистики", Новый Соответствие);
		КолонкиИндекса.Вставить("КлючАналитики",      Новый Соответствие);
		
		ДополнительныеПараметры = Новый Соответствие;
		ДополнительныеПараметры.Вставить("ДатаНачала",     ДатаНачала);
		ДополнительныеПараметры.Вставить("ДатаОкончания",  ДатаОкончания);
		ДополнительныеПараметры.Вставить("КолонкиИндекса", КолонкиИндекса);
		
		ДанныеСекции = ПолучитьСгруппированныеЗамеры();
		ИмяСекции = "OperationStatisticsClientGrouped";
		
		Секция = СформироватьJSONСтруктуруТаблицаЗначений(
		    ИмяСекции, ДанныеСекции, ДатаНачала, ДатаОкончания, , КолонкиИндекса);
		    БизнесСтатистика.Вставить(ИмяСекции, Секция[ИмяСекции]);
		
		ДанныеСекции = ПолучитьУникальныеЗамеры();
		ИмяСекции = "OperationStatisticsClientUnique";
		
		Секция = СформироватьJSONСтруктуруТаблицаЗначений(
		    ИмяСекции, ДанныеСекции, ДатаНачала, ДатаОкончания, , КолонкиИндекса);
		    БизнесСтатистика.Вставить(ИмяСекции, Секция[ИмяСекции]);
		
	КонецЕсли;
	
	// Размещаем секцию информации о продукте.
	ПакетДанных.Вставить("product", ПолучитьПредставлениеПродукта());
	
	// В каждый 10-й пакет будем включать информацию об идентификаторе конфигурации.
	Если ПараметрыЦентраМониторинга.ОзнакомительныйПакетОтправлен И (ПараметрыЦентраМониторинга.НомерКрайнегоПакета < 4 ИЛИ ДатаЗапуска >= ПараметрыЦентраМониторинга.ИдентификаторКонфигурацииСледующееФормирование ИЛИ ПриоритетныйРежим) Тогда
		ПакетДанных["product"].Вставить("ConfigurationID", ПолучитьИдентификаторКонфигурации());
		ПараметрыЦентраМониторинга.ИдентификаторКонфигурацииСледующееФормирование = ДатаЗапуска + ПараметрыЦентраМониторинга.ОтправкаДанныхПериодФормирования * 10;
	КонецЕсли;
	
	// Размещаем секцию информации о состоянии защиты.
	Если ПриоритетныйРежим Тогда
		СостояниеЗащиты = ПолучитьПараметрыЛицензий(ЦентрМониторингаОтраслевой, Новый Массив);
	ИначеЕсли ТипЗнч(ПараметрыЦентраМониторинга.СостояниеЗащиты)=Тип("ХранилищеЗначения") Тогда
		СостояниеЗащиты = ПараметрыЦентраМониторинга.СостояниеЗащиты.Получить();
	Иначе
		СостояниеЗащиты = Неопределено;
	КонецЕсли;
	ПакетДанных.Вставить("protection", СостояниеЗащиты);
	
	// Размещаем секцию регламентных заданий.
	Если ПараметрыЦентраМониторинга.РегистрироватьНастройкуКонфигурации Тогда
		
		КолонкиИндекса = Новый Соответствие;
		КолонкиИндекса.Вставить("Расписание", Новый Соответствие);
		КолонкиИндекса.Вставить("Состояние",  Новый Соответствие);
		
		СекцияРегламентныеЗадания = СформироватьJSONСтруктуруТаблицаЗначений("Пакет", ПолучитьРегламентныеЗадания(),,,, КолонкиИндекса);
		ПакетДанных.Вставить("scheduledJobs", СекцияРегламентныеЗадания["Пакет"]);
		
	КонецЕсли;
	
	// Информация для регистрации продукта.
	Если ПолученоСогласие И (ПараметрыЦентраМониторинга.КонтактнаяИнформацияИзменена ИЛИ ПриоритетныйРежим) Тогда
		
		// Проверяем наличие серкции contacts в пакете.
		Если НЕ ПакетДанных.Свойство("contacts") ИЛИ ПакетДанных["contacts"]=Неопределено Тогда
			ПакетДанных.Вставить("contacts", Новый Структура);
		КонецЕсли;
		
		// Вносим данные для регистрации базы в личном кабинете.
		ПакетДанных["contacts"].Вставить("dbName",    ПараметрыЦентраМониторинга.РегистрацияПродуктаНаименованиеБазы);
		ПакетДанных["contacts"].Вставить("regNumber", ПараметрыЦентраМониторинга.РегистрацияПродуктаРегНомер);
		ПакетДанных["contacts"].Вставить("inn",       ПараметрыЦентраМониторинга.РегистрацияПродуктаИНН);
		ПакетДанных["contacts"].Вставить("kpp",       ПараметрыЦентраМониторинга.РегистрацияПродуктаКПП);
		ПакетДанных["contacts"].Вставить("its",       ПараметрыЦентраМониторинга.РегистрацияПродуктаИТС);
		ПакетДанных["contacts"].Вставить("account",   ПараметрыЦентраМониторинга.РегистрацияПродуктаАккаунт);
		ПакетДанных["contacts"].Вставить("user",      ПараметрыЦентраМониторинга.РегистрацияПродуктаКонтактноеЛицо);
		ПакетДанных["contacts"].Вставить("email",     ПараметрыЦентраМониторинга.РегистрацияПродуктаЭлектроннаяПочта);
		ПакетДанных["contacts"].Вставить("phone",     ПараметрыЦентраМониторинга.РегистрацияПродуктаНомерТелефона);
		ПакетДанных["contacts"].Вставить("seller",    ПараметрыЦентраМониторинга.РегистрацияПродуктаПартнер);
		ПакетДанных["contacts"].Вставить("purchase",  ПараметрыЦентраМониторинга.РегистрацияПродуктаДатаПриобретения);
		
	КонецЕсли;
	
	// Обращения в службу технической поддержки.
	Если ПолученоСогласие Тогда
		ОтправитьОбращенияПользователейВСлужбуТехническойПоддержки(ПакетДанных, ПараметрыЦентраМониторинга);
	КонецЕсли;
	
КонецПроцедуры // ПриФормированииПакетаДляОтправки()

// Обработчик события обработки получения ответа от сервера статистики после отправки пакета
//
Процедура ПриПолученииПараметровОтСервера(ПакетОтвета, Параметры) Экспорт
	
	// Проверим наличие подсистемы обращений
	Если Метаданные.РегистрыСведений.Найти("ОбращенияВСлужбуПоддержки")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если включено разделение по областям данных, значит это база с особым обслуживанием, исключаем из рассмотрения
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем наличие серкции support в ответе
	Если ПустоеЗначениеJSON(ПакетОтвета, "support", ИСТИНА) Тогда
		Возврат;
	КонецЕсли;
	
	// Выполняем действия под полными правами
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	// Фиксируем номера обращений в базе
	Для каждого Обращение Из ПакетОтвета.support Цикл
		
		Идентификатор  = Обращение.id;
		НомерОбращения = Обращение.rn;
		
		Если ТипЗнч(Идентификатор)<>Тип("Строка") ИЛИ СтрДлина(СокрЛП(Идентификатор))<>36 Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НомерОбращения)<>Тип("Строка") ИЛИ ПустаяСтрока(НомерОбращения) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = РегистрыСведений["ОбращенияВСлужбуПоддержки"].СоздатьМенеджерЗаписи();
		Запись.Идентификатор = Идентификатор;
		Запись.Прочитать();
		
		Если НЕ Запись.Выбран() Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Запись.НомерОбращения = НомерОбращения;
			Запись.Записать(ИСТИНА);
		Исключение
			ИсключительнаяСитуацияПриСбореПоказателейСтатистики(ИнформацияОбОшибке(), "Обращения");
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ПриПолученииПараметровОтСервера()

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выполняет корректировку типовых форм на предмет указания компании разработчика и сведения об отправке статистики
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мониторинга центра мониторинга.
//
Процедура НастроитьЭлементыФормыПараметровЦентраМониторинга(Форма) Экспорт
	
	// Если включено разделение по областям данных, значит это база с особым обслуживанием, исключаем из рассмотрения
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ВРег(Форма.ИмяФормы), ВРег("ИнтернетПоддержкаИСервисы")) > 0 Тогда
		
		Элемент = Форма.Элементы.ЦентрМониторингаРазрешитьОтправлятьДанные.СписокВыбора[0];
		Элемент.Представление = НСтр("ru = 'Разрешить автоматическую отправку сведений об использовании программы в фирму ""1С-Рарус""'");
		
	ИначеЕсли СтрНайти(ВРег(Форма.ИмяФормы), ВРег("ОтправкаКонтактнойИнформации")) > 0 Тогда
		
		// Предоставим возможность администратору удалить регистрационную информацию
		Элемент = Форма.Элементы.Найти("ФормаОтказаться");
		Если Элемент<>Неопределено И РольДоступна("ПолныеПрава") Тогда
			Элемент.Видимость = ИСТИНА;
			Элемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьПолучателяСтатистическойИнформации(Форма, "ЦентрМониторингаРазрешитьОтправлятьДанные");
	ИзменитьПолучателяСтатистическойИнформации(Форма, "РазрешитьОтправкуСтатистики");
	ИзменитьПолучателяСтатистическойИнформации(Форма, "Сообщение");
	ИзменитьПолучателяСтатистическойИнформации(Форма, "Заголовок");
	ИзменитьПолучателяСтатистическойИнформации(Форма, "ОтправлятьИнформациюОбОшибкахРасширеннаяПодсказка");
	
	// Отправить собранную информацию о защите.
	ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Неопределено);
	
КонецПроцедуры // НастроитьЭлементыФормыПараметровЦентраМониторинга()

// Выполняет проверку режима и адреса отправки статистики
//
// Возвращаемое значение:
//  Булево - признак отправки статистики
//
Функция ВключенаОтправкаСтатистики() Экспорт
	
	// Формируем перечень получаемых параметров.
	ПараметрыСервиса = Новый Структура;
	ПараметрыСервиса.Вставить("ВключитьЦентрМониторинга");
	ПараметрыСервиса.Вставить("ЦентрОбработкиИнформацииОПрограмме");
	
	ПараметрыСервиса.Вставить("Сервер");
	ПараметрыСервиса.Вставить("АдресРесурса");
	ПараметрыСервиса.Вставить("АдресРесурсаДляДампов");
	ПараметрыСервиса.Вставить("Порт");
	ПараметрыСервиса.Вставить("ЗащищенноеСоединение");
	
	// Получаем значения параметров.
	ЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыСервиса);
	
	// Если включена отправка на типовой адрес, на этом проверку можно завершить.
	Если ПараметрыСервиса.ВключитьЦентрМониторинга Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	// Проверяем выключена ли отправка на сторонний сервер.
	Если НЕ ПараметрыСервиса.ЦентрОбработкиИнформацииОПрограмме Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Определим целевые значения параметров сервер.
	ПараметрыПоУмолчанию = Новый Структура();
	ПриПолученииПараметровПоУмолчанию(ПараметрыПоУмолчанию, ИСТИНА);
	
	// Проверим сервер.
	Если ВРег(СокрЛП(ПараметрыСервиса.Сервер)) <> ВРег(СокрЛП(ПараметрыПоУмолчанию.Сервер)) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Адрес ресурса на сервере.
	Если ВРег(СокрЛП(ПараметрыСервиса.АдресРесурса)) <> ВРег(СокрЛП(ПараметрыПоУмолчанию.АдресРесурса)) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Прочие настройки.
	Если ПараметрыСервиса.Порт <> ПараметрыПоУмолчанию.Порт Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Проверяем создано ли регламентное задание.
	Если ЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Ложь) = Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат ИСТИНА;
	
КонецФункции // ВключенаОтправкаСтатистики()

// Включает отправку статистики на сервер разработчика
//
// Параметры:
//	ОтправитьОперативно - Булево - опративная отправка статистики
//	ОтправлятьИнформациюОбОшибках - Булево - отправка информации об ошибках
//	Сервер - Строка - сервер статистики
//	АдресРесурса - Строка - адрес сервера
//	Порт - Строка - порт сервера статистики
//
Процедура ВключитьОтправкуСтатистики(ОтправитьОперативно = ЛОЖЬ, ОтправлятьИнформациюОбОшибках = Неопределено, Сервер = Неопределено, АдресРесурса = Неопределено, Порт = Неопределено) Экспорт
	
	// Если включено разделение по областям данных, значит это база с особым обслуживанием, исключаем из рассмотрения
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Определим какой режим настройки требуется.
	ИспользоватьТиповойСервер = НЕ(ЗначениеЗаполнено(Сервер) ИЛИ ЗначениеЗаполнено(АдресРесурса) ИЛИ ЗначениеЗаполнено(Порт));
	
	// Определим целевые значения параметров сервер.
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("ВключитьЦентрМониторинга",           ИспользоватьТиповойСервер);
	ПараметрыОтправки.Вставить("ЦентрОбработкиИнформацииОПрограмме", НЕ ИспользоватьТиповойСервер);
	
	// Сбрасываем настройки отправки в значение по умолчанию.
	ПриПолученииПараметровПоУмолчанию(ПараметрыОтправки, ИСТИНА);
	
	// Устанавливаем параметры переданного сервера.
	Если ЗначениеЗаполнено(Сервер) Тогда
		ПараметрыОтправки.Сервер = Сервер;
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресРесурса) Тогда
		ПараметрыОтправки.АдресРесурса = АдресРесурса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Порт) Тогда
		ПараметрыОтправки.Порт = Порт;
	КонецЕсли;
	
	// Настройки сбора статистической информации.
	ПараметрыОтправки.Вставить("РегистрироватьИнформациюОСистеме",                ИСТИНА);
	ПараметрыОтправки.Вставить("РегистрироватьВерсииПодсистем",                   ЛОЖЬ);
	ПараметрыОтправки.Вставить("РегистрироватьБизнесСтатистику",                  ИСТИНА);
	ПараметрыОтправки.Вставить("РегистрироватьСтатистикуКонфигурации",            ИСТИНА);
	ПараметрыОтправки.Вставить("РегистрироватьНастройкуКонфигурации",             ИСТИНА);
	ПараметрыОтправки.Вставить("РегистрироватьПроизводительность",                ИСТИНА);
	ПараметрыОтправки.Вставить("РегистрироватьПроизводительностьТехнологическую", ИСТИНА);
	
	Если НЕ ОтправлятьИнформациюОбОшибках=Неопределено Тогда
		ПараметрыОтправки.Вставить("РегистрироватьДампы",   ОтправлятьИнформациюОбОшибках);
		ПараметрыОтправки.Вставить("ОтправлятьФайлыДампов", ?(ОтправлятьИнформациюОбОшибках, 1, 0));
	КонецЕсли;
	
	// Настройки отправки сведений о регистрации продукта.
	ПараметрыОтправки.Вставить("КонтактнаяИнформацияИзменена", ИСТИНА);
	ПараметрыОтправки.Вставить("ЗапросКонтактнойИнформации",   1);
	
	// Настройки интервалов сбора сведений и обмена сообщениями.
	Если ОтправитьОперативно Тогда
		
		СледующееФормирование = ТекущаяУниверсальнаяДата()-1;
		ПараметрыОтправки.Вставить("СтатистикаКонфигурацииСледующееФормирование",    СледующееФормирование);
		ПараметрыОтправки.Вставить("БизнесСтатистикаСледующееФормирование",          СледующееФормирование);
		ПараметрыОтправки.Вставить("РегистрацияДамповСледующееФормирование",         СледующееФормирование);
		ПараметрыОтправки.Вставить("ОтправкаДанныхСледующееФормирование",            СледующееФормирование);
		
		ПараметрыОтправки.Вставить("РазмерДанныхТаблицСледующееФормирование",        СледующееФормирование);
		ПараметрыОтправки.Вставить("НачалоВеденияУчетаСледующееФормирование",        СледующееФормирование);
		ПараметрыОтправки.Вставить("ИдентификаторКонфигурацииСледующееФормирование", СледующееФормирование);
		
	КонецЕсли;
	
	// Помещаем параметры в константу.
	ЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыОтправки);
	
	// Создание и настрока регламентного задания, отвечающего за сбор и отправку статистики.
	СтароеРегЗадание = ЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Ложь);
	Если СтароеРегЗадание = Неопределено Тогда 
		// Регл. задание еще не создавалось. Создаем новое.
		РегЗадание = ЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
		ЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	КонецЕсли;
	
КонецПроцедуры // ВключитьОтправкуСтатистики()

// Вызывается из метода ПолучитьПараметрыЛицензий после чтения параметров лицензии
//
// Параметры:
//	ПараметрыЛицензий - ФормаКлиентскогоПриложения - форма регистрации программного продукта
//	ТипСистемыЗащиты - СписокЗначений - список систем защиты программного продукта
//	Идентификатор - Строка - идентификатор
//	Наименование - Строка - наименование программного продукта
//	Параметры - Стркетура - параметры лицензирования
//	ВерсияКомпоненты - Строка - версия компоненты защиты
//
Процедура ПриПолученииПараметровЛицензии(ПараметрыЛицензий, ТипСистемыЗащиты, Идентификатор, Наименование, Параметры, ВерсияКомпоненты) Экспорт
	
	ПараметрыЛицензий.Добавить(Новый Структура("Type,Product,Description,Properties,Version", ТипСистемыЗащиты, Идентификатор, Наименование, Параметры, ВерсияКомпоненты));
	
КонецПроцедуры // ПриПолученииПараметровЛицензии()

// Производит получение сведений об используемых лицензиях в продукте
//
// Параметры:
//	МодульОбработчика - ФормаКлиентскогоПриложения - форма настройки центра мониторинга
//	ПараметрыЛицензий - СписокЗначений - список систем защиты программного продукта
//
// Возвращаемое значение:
//  Соответствие - Параметры лицензирования
//
Функция ПолучитьПараметрыЛицензий(МодульОбработчика, ПараметрыЛицензий = Неопределено, НайденаСистемаЗащиты = ЛОЖЬ) Экспорт
	
	// Последовательно собираем сведения о лицензиях со всех систем защиты.
	Если ПараметрыЛицензий = Неопределено Тогда
		ПараметрыЛицензий = Новый Соответствие();
	КонецЕсли;
	
	// Наличие системы защиты определим по отклику из соответсвующих модулей.
	НайденаСистемаЗащиты = ЛОЖЬ;
	
	// Получаем параметры лицензий защиты.
	Попытка
		ПолучитьПараметрыЛицензийРАРУС(МодульОбработчика, ПараметрыЛицензий, НайденаСистемаЗащиты);
	Исключение
		ИсключительнаяСитуацияПриСбореПоказателейСтатистики(ИнформацияОбОшибке());
	КонецПопытки;
	
	// Получаем параметры лицензий защиты СЛК (Библиотека функциональных подсистем).
	Попытка
		ПолучитьПараметрыЛицензийСЛК_БФП(МодульОбработчика, ПараметрыЛицензий, НайденаСистемаЗащиты);
	Исключение
		ИсключительнаяСитуацияПриСбореПоказателейСтатистики(ИнформацияОбОшибке());
	КонецПопытки;
	
	// Получаем параметры лицензий защиты СЛК (библиотека от Катран).
	Попытка
		ПолучитьПараметрыЛицензийСЛК_Катран(МодульОбработчика, ПараметрыЛицензий, НайденаСистемаЗащиты);
	Исключение
		ИсключительнаяСитуацияПриСбореПоказателейСтатистики(ИнформацияОбОшибке());
	КонецПопытки;
	
	// Возвращаем собранную коллекцию.
	Возврат ПараметрыЛицензий;
	
КонецФункции // ПолучитьПараметрыЛицензий()

// Возвращает сведения о количестве записей в таблицах БД дополненные информациоей о размере таблиц
//
// Параметры:
//	ИдентификаторОбластиСтатистики - Строка - идентификатор области статистики
//	ТаблицаИмен - СписокЗначений - список регтсьраций программного продукта
//
// Возвращаемое значение:
//  РезультатЗапроса - выборка статистики конфигурации
//
Функция ПолучитьСтатистикуИспользованияОбъектовБазыДанных(ИдентификаторОбластиСтатистики = Неопределено, ТаблицаИмен = Неопределено) Экспорт
	
	// Работу в модели сервиса на текущий момент не рассматриваем.
	Если НЕ ИдентификаторОбластиСтатистики = Неопределено Тогда
		РезультатЗапроса = РегистрыСведений.СтатистикаКонфигурации.ПолучитьСтатистику(0, ТаблицаИмен, ИдентификаторОбластиСтатистики);
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	// Получаем сведения о количестве записей и размере таблиц базы данных.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОперацииСтатистики.Наименование КАК ОперацияСтатистики,
	|	СтатистикаКонфигурации.Значение КАК Значение,
	|	ЕСТЬNULL(СтатистикаРазмеровТаблиц.Значение, -1) КАК Размер
	|ИЗ
	|	РегистрСведений.СтатистикаКонфигурации КАК СтатистикаКонфигурации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииСтатистики КАК ОперацииСтатистики
	|		ПО СтатистикаКонфигурации.ОперацияСтатистики = ОперацииСтатистики.ИдентификаторОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаКонфигурации КАК СтатистикаРазмеровТаблиц
	|		ПО СтатистикаКонфигурации.ОперацияСтатистики = СтатистикаРазмеровТаблиц.ОперацияСтатистики
	|			И СтатистикаКонфигурации.ИдентификаторОбластиСтатистики = СтатистикаРазмеровТаблиц.ИдентификаторОбластиСтатистики
	|			И (СтатистикаРазмеровТаблиц.ВидСтатистики = 9)
	|ГДЕ
	|	СтатистикаКонфигурации.ВидСтатистики = 0";
	
	// Выполняем запрос.
	Запрос = Новый Запрос(ТекстЗапроса);
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьСтатистикуИспользованияОбъектовБазыДанных()

// Возвращает талицу регламентных заданий и статусов их выполнения
//
// Возвращаемое значение:
//  ТаблицаЗначений - список регламентых заданий
//
Функция ПолучитьРегламентныеЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	// Создаем таблицу для накопления отправляемых параметров регламентных заданий.
	ПараметрыЗаданий = Новый ТаблицаЗначений;
	
	// Ключевые параметры.
	ПараметрыЗаданий.Колонки.Добавить("Идентификатор",                            Новый ОписаниеТипов("Строка"));
	ПараметрыЗаданий.Колонки.Добавить("ИмяЗадания",                               Новый ОписаниеТипов("Строка"));
	ПараметрыЗаданий.Колонки.Добавить("Наименование",                             Новый ОписаниеТипов("Строка"));
	ПараметрыЗаданий.Колонки.Добавить("Предопределенное",                         Новый ОписаниеТипов("Булево"));
	
	// Параметры выполнения.
	ПараметрыЗаданий.Колонки.Добавить("Использование",                            Новый ОписаниеТипов("Булево"));
	ПараметрыЗаданий.Колонки.Добавить("Доступно",                                 Новый ОписаниеТипов("Булево"));
	ПараметрыЗаданий.Колонки.Добавить("Расписание",                               Новый ОписаниеТипов("Строка"));
	
	// Последний сеанс выполнения.
	ПараметрыЗаданий.Колонки.Добавить("Начало",                                   Новый ОписаниеТипов("Дата"));
	ПараметрыЗаданий.Колонки.Добавить("Конец",                                    Новый ОписаниеТипов("Дата"));
	ПараметрыЗаданий.Колонки.Добавить("Состояние",                                Новый ОписаниеТипов("Строка"));
	ПараметрыЗаданий.Колонки.Добавить("ИнформацияОбОшибке",                       Новый ОписаниеТипов("Строка"));
	
	// Получаем отраслевые параметры регламентных заданий.
	ЗависимостиЗаданий = РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	
	// Обработаем все созданные (зарегистрированные) в информационной базе регламентные задания.
	Для Каждого РегламентноеЗадание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания() Цикл
		
		// Основные параметры.
		ОписаниеЗадания = ПараметрыЗаданий.Добавить();
		ОписаниеЗадания.Идентификатор = Строка(РегламентноеЗадание.УникальныйИдентификатор);
		ОписаниеЗадания.ИмяЗадания    = РегламентноеЗадание.Метаданные.Имя;
		ЗаполнитьЗначенияСвойств(ОписаниеЗадания, РегламентноеЗадание);
		
		// Информация о последнем сеансе.
		ПоследнееФоновоеЗадание = НайтиПоследнееВыполненноеФоновоеЗадание(РегламентноеЗадание);
		Если ПоследнееФоновоеЗадание <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеЗадания, ПоследнееФоновоеЗадание);
			Если ПоследнееФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
				ОписаниеЗадания.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ПоследнееФоновоеЗадание.ИнформацияОбОшибке);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Наполняем таблицу регламентными заданиями из метаданных, которые не были созданы в информационной базе.
	Для Каждого ОбъектМетаданных Из Метаданные.РегламентныеЗадания Цикл
		
		// По одному объекту метаданных может быть создано несколько регламентных заданий.
		НайденныеСтроки = ПараметрыЗаданий.НайтиСтроки(Новый Структура("ИмяЗадания", ОбъектМетаданных.Имя));
		
		// Добавляем текущее задание в таблицу.
		Если НайденныеСтроки.Количество() = 0 Тогда
			ОписаниеЗадания = ПараметрыЗаданий.Добавить();
			ОписаниеЗадания.ИмяЗадания = ОбъектМетаданных.Имя;
			ЗаполнитьЗначенияСвойств(ОписаниеЗадания, ОбъектМетаданных);
			НайденныеСтроки.Добавить(ОписаниеЗадания);
		КонецЕсли;
		
		// Получим отраслевые параметры текущего регламентного задания.
		ПрикладныеПараметры = ЗависимостиЗаданий.Найти(ОбъектМетаданных, "РегламентноеЗадание");
		
		// Определим разрешено ли использовать регламентное задание.
		ЗаданиеДоступно = РегламентныеЗаданияСлужебный.РегламентноеЗаданиеДоступноПоФункциональнымОпциям(ОбъектМетаданных, ЗависимостиЗаданий);
		
		// Корректируем все найденные регламентные задания.
		Для каждого ОписаниеЗадания Из НайденныеСтроки Цикл
			
			// Параметры отраслевой логики.
			Если НЕ ПрикладныеПараметры=Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ОписаниеЗадания, ПрикладныеПараметры);
			КонецЕсли;
			
			// Признак доступности задания по отраслевой логике.
			ОписаниеЗадания.Доступно = ЗаданиеДоступно;
			
			// Уточним наименование текущего задания.
			Если ОписаниеЗадания.Предопределенное ИЛИ ПустаяСтрока(ОписаниеЗадания.Наименование) Тогда
				ОписаниеЗадания.Наименование = ОбъектМетаданных.Синоним;
			КонецЕсли;
			Если ПустаяСтрока(ОписаниеЗадания.Наименование) Тогда
				ОписаниеЗадания.Наименование = ОписаниеЗадания.ИмяЗадания;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПараметрыЗаданий;
	
КонецФункции // ПолучитьРегламентныеЗадания()

// Веб-сервер регистрации обращений пользователей отсекает окончание пакета, если оно превышает заданный лимит
//
Функция МаксимальныйРазмерПрикрепленийДляОбращения() Экспорт
	
	Возврат 15*1024*1024;
	
КонецФункции // МаксимальныйРазмерПрикрепленийДляОбращения()

// Записывает операцию бизнес статистики.
//
// Параметры:
//  ИмяОперации	- Строка	- имя операции статистики, в случае отсутствия создается новое.
//  Значение	- Число		- количественное значение операции статистики.
//
Процедура ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение = 1) Экспорт
	
	Если Не ЦентрМониторинга.ЗаписыватьОперацииБизнесСтатистики() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура("ИмяОперации, КлючУникальности, Значение, Замещать, ТипЗаписи, ПериодЗаписи");
	ПараметрыЗаписи.ИмяОперации      = ИмяОперации;
	ПараметрыЗаписи.КлючУникальности = КлючДанныхЗамера();
	ПараметрыЗаписи.Значение         = Значение;
	ПараметрыЗаписи.Замещать         = Истина;
	ПараметрыЗаписи.ТипЗаписи        = 8;
	ПараметрыЗаписи.ПериодЗаписи     = ТекущаяУниверсальнаяДата();
	
	ЦентрМониторингаСлужебный.ЗаписатьОперациюБизнесСтатистикиСлужебная(ПараметрыЗаписи);
	
КонецПроцедуры // ЗаписатьОперациюБизнесСтатистики()

// Производит корректировку структуры параметров записи операции бизнес статистики
//
Процедура ПриПолученииПараметровЗаписиОперацииБизнесСтатистики(ПараметрыЗаписи, ТипЗаписи, ТекЗамер, ТекДата) Экспорт
	
	Если ТипЗаписи = 8 Или ТипЗаписи = 9 Тогда
		ПараметрыЗаписи.ПериодЗаписи = ТекЗамер.Значение.ПериодЗаписи;
	КонецЕсли;
	
КонецПроцедуры // ПриПолученииПараметровЗаписиОперацииБизнесСтатистики()

// Производит проверку корректности заполнения регистрационных данных
//
Функция РегистрационныеДанныеЗаполнены(РегНомер="", ИНН="") Экспорт
	
	// Читаем сохраненные регистрационные данных из параметров Цента мониторинга
	ПараметрыЦентраМониторинга = Новый Структура();
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаРегНомер");
	ПараметрыЦентраМониторинга.Вставить("РегистрацияПродуктаИНН");
	ПараметрыЦентраМониторинга.Вставить("ЗапросКонтактнойИнформации");
	ЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	// Выполняем проверки заполненности ключевых параметров
	Если ПустаяСтрока(ПараметрыЦентраМониторинга.РегистрацияПродуктаРегНомер) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыЦентраМониторинга.РегистрацияПродуктаИНН) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	Если ПараметрыЦентраМониторинга.ЗапросКонтактнойИнформации<>1 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Возвращаем ключевые параметры
	РегНомер = ПараметрыЦентраМониторинга.РегистрацияПродуктаРегНомер;
	ИНН      = ПараметрыЦентраМониторинга.РегистрацияПродуктаИНН;
	
	// Все проверки пройдены успешно
	Возврат ИСТИНА;
	
КонецФункции // РегистрационныеДанныеЗаполнены()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заимствована из служебного модуля без изменений с целью уменьшить количество врезок в типовом модуле
Функция СформироватьJSONСтруктуруТаблицаЗначений(ИмяСекции, Данные, ДатаНачала = Неопределено, ДатаОкончания = Неопределено, ДопПараметры = Неопределено, КолонкиИндекса = Неопределено)
	JSONСтруктура = Новый Соответствие;
	
	Секция = Новый Структура;
	
	
	Если ДатаНачала <> Неопределено Тогда
		Секция.Вставить("date_start", ДатаНачала);
	КонецЕсли;
	
	Если ДатаОкончания <> Неопределено Тогда
		Секция.Вставить("date_end", ДатаОкончания);
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено Тогда
		Для Каждого Параметр Из ДопПараметры Цикл
			Секция.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
			
	Строки = Новый Массив;
	// Предназначена для хранения структуры данных.
	СтруктурыКоллекций = Новый Структура;
	// Предназначено для хранения коллекций данных в виде ключевое поле - реквизиты со значениями.
	СоответствияКоллекций = Новый Соответствие; 
	// Список исключаемых из выгрузки колонок. Их данные идут в СоответствияКоллекций.
	ИсключаемыеКолонки = Новый Соответствие;
	Если КолонкиИндекса <> Неопределено Тогда
		ИндексыЗначений = Новый Соответствие;
		Для Каждого ТекКолонка Из КолонкиИндекса Цикл
			ИндексыЗначений.Вставить(ТекКолонка.Ключ, Новый Соответствие);
			Если ТекКолонка.Значение.Количество() Тогда
				СоответствияКоллекций.Вставить(ТекКолонка.Ключ, Новый Соответствие);
				СтруктураОбъекта = Новый Структура;
				Для Каждого Запись Из ТекКолонка.Значение Цикл
					СтруктураОбъекта.Вставить(Запись.Ключ);
					ИсключаемыеКолонки.Вставить(Запись.Ключ, Истина);
				КонецЦикла;
				СтруктурыКоллекций.Вставить(ТекКолонка.Ключ, СтруктураОбъекта);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Колонки = Новый Массив;
	Для Каждого ТекКолонка Из Данные.Колонки Цикл
		Если ИсключаемыеКолонки[ТекКолонка.Имя] = Истина Тогда
			Продолжить;
		КонецЕсли;
		Колонки.Добавить(ТекКолонка.Имя);
	КонецЦикла;
	Секция.Вставить("columns", Колонки);
	
	Для Каждого Выборка Из Данные Цикл
		Строка = Новый Массив;
		Для Каждого ТекКолонка Из Колонки Цикл
			ЗначениеДляДобавления = Выборка[ТекКолонка];
			Если КолонкиИндекса <> Неопределено И КолонкиИндекса[ТекКолонка] <> Неопределено Тогда
				Если КолонкиИндекса[ТекКолонка][ЗначениеДляДобавления] = Неопределено Тогда
					ИндексЗначения = КолонкиИндекса[ТекКолонка].Количество() + 1;
					КолонкиИндекса[ТекКолонка].Вставить(ЗначениеДляДобавления, ИндексЗначения);
					ИндексыЗначений[ТекКолонка].Вставить(Формат(ИндексЗначения, "ЧГ=0"), ЗначениеДляДобавления);
				КонецЕсли;
				
				ЗначениеДляДобавления = КолонкиИндекса[ТекКолонка][ЗначениеДляДобавления];
			КонецЕсли;
			
			Если СтруктурыКоллекций.Свойство(ТекКолонка) 
				И СоответствияКоллекций[ТекКолонка][Выборка[ТекКолонка]] = Неопределено Тогда
				СоответствиеОбъекта = Новый Соответствие;
				Для Каждого Запись Из СтруктурыКоллекций[ТекКолонка] Цикл
					СоответствиеОбъекта.Вставить(Запись.Ключ, Выборка[Запись.Ключ]);
				КонецЦикла;
				СоответствияКоллекций[ТекКолонка].Вставить(Выборка[ТекКолонка], СоответствиеОбъекта);
			КонецЕсли;
			
			Строка.Добавить(ЗначениеДляДобавления);
		КонецЦикла;
		Строки.Добавить(Строка);
	КонецЦикла;
	
	Для Каждого Запись Из СоответствияКоллекций Цикл
		Секция.Вставить(Запись.Ключ, Запись.Значение);
	КонецЦикла;
	Секция.Вставить("columnsValueIndex", ИндексыЗначений);
	Секция.Вставить("rows", Строки);		
	
	JSONСтруктура.Вставить(ИмяСекции, Секция);
	
	Возврат JSONСтруктура;
КонецФункции

Функция ПустоеЗначениеJSON(ПакетДанных, ИмяПоля, ЭтоСписок=ЛОЖЬ, ЭтоСтрока=ЛОЖЬ)
	
	Если ПакетДанных=Неопределено Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Значение = Неопределено;
	
	Если ТипЗнч(ПакетДанных)=Тип("Соответствие") Тогда
		Значение = ПакетДанных[ИмяПоля];
	ИначеЕсли ТипЗнч(ПакетДанных)=Тип("Структура") Тогда
		ПакетДанных.Свойство(ИмяПоля, Значение);
	КонецЕсли;
	
	Если Значение=Неопределено Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	ТипПоля = ТипЗнч(Значение);
	
	Если ЭтоСписок Тогда
		Если ТипПоля=Тип("Массив") ИЛИ ТипПоля=Тип("Соответствие") ИЛИ ТипПоля=Тип("Структура") Тогда
			Возврат (Значение.Количество()=0);
		Иначе
			Возврат ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоСтрока<>ЛОЖЬ Тогда
		Если ТипПоля=Тип("Строка") Тогда
			Если ТипЗнч(ЭтоСтрока)=Тип("Число") Тогда
				Возврат СтрДлина(СокрЛП(Значение))<>ЭтоСтрока;
			Иначе
				Возврат ПустаяСтрока(Значение);
			КонецЕсли;
		Иначе
			Возврат ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипПоля=Тип("Строка") Тогда
		Возврат ПустаяСтрока(Значение);
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Значение);
	КонецЕсли;
	
КонецФункции // ПустоеЗначениеJSON()

Процедура РегистрироватьРазмерДанныхТаблицИнформационнойБазы()
	
	// Метод актуален только для платформы версии 8.3.15 и выше.
	ТехническиеПараметры = Новый СистемнаяИнформация;
	ПолучитьРазмер       = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТехническиеПараметры.ВерсияПриложения, "8.3.15.1489") >= 0);
	РежимОтладки         = ЛОЖЬ;
	МассивИменМетаданных = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОперацииСтатистики.Наименование КАК НаименованиеОперацииСтатистики,
	|	9 КАК ВидСтатистики,
	|	СтатистикаКонфигурации.ИдентификаторОбластиСтатистики КАК ИдентификаторОбластиСтатистики,
	|	СтатистикаКонфигурации.ОперацияСтатистики КАК ОперацияСтатистики,
	|	СтатистикаКонфигурации.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.СтатистикаКонфигурации КАК СтатистикаКонфигурации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииСтатистики КАК ОперацииСтатистики
	|		ПО СтатистикаКонфигурации.ОперацияСтатистики = ОперацииСтатистики.ИдентификаторОперации
	|ГДЕ
	|	СтатистикаКонфигурации.ВидСтатистики = 0";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	НаборЗаписей = РегистрыСведений.СтатистикаКонфигурации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидСтатистики.Установить(9);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Найдем объект метаданных текущей таблицы.
		ОбъектМетаданных = ПолучитьОбъектМетаданных(Выборка.НаименованиеОперацииСтатистики);
		Если ОбъектМетаданных=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавляем запись в регистр сведений "Статистика конфигурации".
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		// Получаем значение размера таблицы
		Если РежимОтладки Тогда
			// В значение будет помещено количество записей в таблице.
			Продолжить;
			
		ИначеЕсли ПолучитьРазмер Тогда
			МассивИменМетаданных.Очистить();
			МассивИменМетаданных.Добавить(ОбъектМетаданных);
			Запись.Значение = ОбщегоНазначения.ВычислитьВБезопасномРежиме("ПолучитьРазмерДанныхБазыДанных(Новый Массив(), Параметры)", МассивИменМетаданных);
		Иначе
			// Необходимо зафиксировать 0 для всех реальных таблиц метаданных.
			Запись.Значение = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = ЛОЖЬ;
	НаборЗаписей.Записать(ИСТИНА);
	
КонецПроцедуры // РегистрироватьРазмерДанныхТаблицИнформационнойБазы()

Процедура РегистрироватьНачалоВеденияУчета()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОперацииСтатистики.Наименование КАК НаименованиеОперацииСтатистики,
	|	СтатистикаКонфигурации.Значение КАК Значение,
	|	ЛОЖЬ КАК ЭтоРегистрНакопления
	|ИЗ
	|	РегистрСведений.СтатистикаКонфигурации КАК СтатистикаКонфигурации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииСтатистики КАК ОперацииСтатистики
	|		ПО СтатистикаКонфигурации.ОперацияСтатистики = ОперацииСтатистики.ИдентификаторОперации
	|ГДЕ
	|	СтатистикаКонфигурации.ВидСтатистики = 0
	|	И СтатистикаКонфигурации.Значение >= 100
	|
	|УПОРЯДОЧИТЬ ПО
	|	Значение УБЫВ";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	КоличествоЗаписей = 0;
	ИтогоЗаписей      = 0;
	ШаблонЗапроса = 
	"ОБЪЕДИНИТЬ ВЫБРАТЬ
	|	ПервыеОперации.Регистратор,
	|	ПервыеОперации.Период
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|		Таблица.Регистратор КАК Регистратор,
	|		Таблица.Период КАК Период
	|	ИЗ
	|		$Таблица$ КАК Таблица
	|	ГДЕ
	|		Таблица.Период > ДАТАВРЕМЯ(1980, 1, 1)
	|		И Таблица.Регистратор.Проведен
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Период) КАК ПервыеОперации
	|
	|";
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ //";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() И КоличествоЗаписей < 10000 Цикл
		
		// Найдем объект метаданных текущей таблицы.
		ОбъектМетаданных = ПолучитьОбъектМетаданных(Выборка.НаименованиеОперацииСтатистики);
		Если ОбъектМетаданных=Неопределено ИЛИ НЕ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		// Формируем текст запроса к таблице регистра.
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "$Таблица$", Выборка.НаименованиеОперацииСтатистики);
		
		// Больше 10 тыс. записей рассматривать совсем избыточно.
		КоличествоЗаписей = КоличествоЗаписей + МИН(Выборка.Значение, 1000);
		ИтогоЗаписей      = ИтогоЗаписей + Выборка.Значение;
		
	КонецЦикла;
	
	// Если по всем регистрам насчитывается менее 1000 записей, то начала ведения учета определять нет смысла.
	Если КоличествоЗаписей<1000 Тогда
		Возврат;
	КонецЕсли;
	
	// Устанавливаем новый текст запроса.
	Запрос.Текст = ТекстЗапроса +
	"УПОРЯДОЧИТЬ ПО
	|	Период";
	
	// Если удалось собрать менее 1000 записей, то начала ведения учета определять нет смысла.
	ВсеЗаписи = Запрос.Выполнить().Выгрузить();
	Если ВсеЗаписи.Количество() < 1000 Тогда
		Возврат;
	КонецЕсли;
	
	// Получим медиану набора данных.
	НомерСреднейСтрокиВыборки = Окр(ВсеЗаписи.Количество() / 2, 0, РежимОкругления.Окр15как20);
	НачалоВеденияУчета = ВсеЗаписи[НомерСреднейСтрокиВыборки].Период;
	
	// Помещаем в параметры рассчитанную дату
	ЦентрМониторингаСлужебный.УстановитьПараметрЦентраМониторингаВнешнийВызов("НачалоВеденияУчета", НачалоВеденияУчета);
	
КонецПроцедуры // РегистрироватьНачалоВеденияУчета()

Функция ПолучитьОбъектМетаданных(НаименованиеТаблицы)
	
	ЭлементыИмени = СтрРазделить(НаименованиеТаблицы, ".", ЛОЖЬ);
	ПолноеИмя     = "";
	
	Если ЭлементыИмени.Количество() = 2 Тогда
		ПолноеИмя = СокрЛП(ЭлементыИмени[0]) + "." + СокрЛП(ЭлементыИмени[1]);
	ИначеЕсли ЭлементыИмени.Количество()=3 Тогда
		ПолноеИмя = СокрЛП(ЭлементыИмени[0]) + "." + СокрЛП(ЭлементыИмени[1]) + ".ТабличнаяЧасть." + СокрЛП(ЭлементыИмени[2]);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
	Возврат ОбъектМетаданных;
	
КонецФункции // ПолучитьОбъектМетаданных()

Функция ПолучитьИдентификаторОбъектовМетаданных(ГруппаТаблиц = Неопределено, ХешированиеДанных = Неопределено)
	
	Если ГруппаТаблиц = Неопределено Тогда
		
		Попытка
			// Попытаемся создать объект схемы запроса.
			СхемаЗапроса = Новый("СхемаЗапроса");
			ГруппаТаблиц = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")).ДоступныеТаблицы;
		Исключение
			// Версия платформы ниже 8.3.5, следовательно информация о размере таблиц недоступна.
			Причина = ИнформацияОбОшибке();
			Возврат Неопределено;
		КонецПопытки;
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		
	КонецЕсли;
	
	Для каждого Элемент Из ГруппаТаблиц Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаДоступныхТаблицСхемыЗапроса") Тогда
			ПолучитьИдентификаторОбъектовМетаданных(Элемент.Состав, ХешированиеДанных);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДоступнаяТаблицаСхемыЗапроса") Тогда
			ХешированиеДанных.Добавить(Элемент.Имя);
			ПолучитьИдентификаторОбъектовМетаданных(Элемент.Поля, ХешированиеДанных);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
			ХешированиеДанных.Добавить(Элемент.Имя);
			ПолучитьИдентификаторОбъектовМетаданных(Элемент.Поля, ХешированиеДанных);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
			ХешированиеДанных.Добавить(Элемент.Имя);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПараметрДоступнойТаблицыСхемыЗапроса") Тогда
			ХешированиеДанных.Добавить(Элемент.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	
КонецФункции // ПолучитьИдентификаторОбъектовМетаданных()

Функция ОпределитьТипСУБД()
	
	// Определим идентификаторы типов.
	ТипФайловаяБаза = 0;
	ТипMicrosoftSQL = 1;
	ТипPostgreSQL   = 2;
	ТипIBMDB2       = 3;
	ТипOracle       = 4;
	
	// Проверим параметры подключения соединения сервера к базе данных.
	ПараметрыСоединенияБазы = СтрРазделить(ВРег(СтрокаСоединенияИнформационнойБазы()), ";", ЛОЖЬ);
	Для каждого ТекущийПараметр Из ПараметрыСоединенияБазы Цикл
		КлючЗначение = СтрРазделить(СокрЛП(ТекущийПараметр), "=");
		Если КлючЗначение.Количество() < 2 Тогда
			Продолжить;
		ИначеЕсли СокрЛП(КлючЗначение[0]) = "FILE" Тогда
			Возврат ТипФайловаяБаза;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим порядок сортировки значения NULL в текущей СУБД.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	NULL КАК ПолеСортировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки УБЫВ";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.ПолеСортировки = 1 Тогда
		
		// IBM DB2 не поддерживает конструкцию [...] в шаблоне операции ПОДОБНО.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Поле1 КАК Поле1
		|ИЗ
		|	(ВЫБРАТЬ
		|		""12456"" КАК Поле1) КАК Т
		|ГДЕ
		|	Т.Поле1 ПОДОБНО ""12[34]%""";
		
		Попытка
			Запрос = Новый Запрос(ТекстЗапроса);
			Возврат ?(Запрос.Выполнить().Пустой(), ТипIBMDB2, ТипMicrosoftSQL);
		Исключение
			Возврат ТипIBMDB2;
		КонецПопытки;
		
	Иначе
		
		// Oracle Database не поддерживает использование внутри оператора В вложенного запроса с модификатором ПЕРВЫЕ,
		// если внутри вложенного запроса есть обращения к полям внешнего запроса.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Поле1 КАК Поле1,
		|	Таблица.Поле2 КАК Поле2
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица1.Поле1 КАК Поле1
		|ИЗ
		|	Таблица КАК Таблица1
		|ГДЕ
		|	Таблица1.Поле1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 10
		|				Таблица2.Поле2 КАК Поле2
		|			ИЗ
		|				Таблица КАК Таблица2
		|			ГДЕ
		|				Таблица2.Поле2 = Таблица1.Поле1
		|			УПОРЯДОЧИТЬ ПО
		|				Поле2)";
		
		// Подготавливаем данные.
		ТаблицаДанных= Новый ТаблицаЗначений();
		ТаблицаДанных.Колонки.Добавить("Поле1", Новый ОписаниеТипов("Число"));
		ТаблицаДанных.Колонки.Добавить("Поле2", Новый ОписаниеТипов("Число"));
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Поле1 = 1;
		НоваяСтрока.Поле2 = 2;
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Поле1 = 2;
		НоваяСтрока.Поле2 = 3;
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Поле1 = 5;
		НоваяСтрока.Поле2 = 5;
		
		// Проверяем.
		Попытка
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Таблица", ТаблицаДанных);
			Возврат ?(Запрос.Выполнить().Пустой(), ТипOracle, ТипPostgreSQL);
		Исключение
			Возврат ТипOracle;
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции // ОпределитьТипСУБД()

Функция ЭтоФоновоеЗадание()
	
	#Если ВнешнееСоединение Тогда
		Возврат ЛОЖЬ;
	#Иначе
		Возврат (ПолучитьИнформациюЭкрановКлиента() = Неопределено);
	#КонецЕсли
	
КонецФункции // ЭтоФоновоеЗадание()

Функция ПолучитьПредставлениеПродукта()
	
	// Формируем структуру пакета с информацией о продукте.
	ПакетДанных = Новый Структура();
	ПакетДанных.Вставить("MetadataName",                     Метаданные.Имя);
	ПакетДанных.Вставить("MetadataID",                       ПолучитьИдентификаторОбъектовМетаданных());
	ПакетДанных.Вставить("Version",                          Метаданные.Версия);
	ПакетДанных.Вставить("Synonym",                          Метаданные.Синоним);
	ПакетДанных.Вставить("BriefInformation",                 Метаданные.КраткаяИнформация);
	ПакетДанных.Вставить("Vendor",                           Метаданные.Поставщик);
	ПакетДанных.Вставить("Copyright",                        Метаданные.АвторскиеПрава);
	ПакетДанных.Вставить("VendorInformationAddress",         Метаданные.АдресИнформацииОПоставщике);
	ПакетДанных.Вставить("ConfigurationInformationAddress",  Метаданные.АдресИнформацииОКонфигурации);
	ПакетДанных.Вставить("Subsystems",                       СтандартныеПодсистемыПовтИсп.ОписанияПодсистем());
	Возврат ПакетДанных;
	
КонецФункции // ПолучитьПредставлениеПродукта()

Процедура ПолучитьПараметрыЛицензийРАРУС(МодульОбработчика, ПараметрыЛицензий, ЕстьСистемаЗащиты)
	
	// Проверим наличие в конфигурации ключевого общего модуля.
	Если Метаданные.ОбщиеМодули.Найти("ЛицензированиеСервер") = Неопределено
			ИЛИ Метаданные.ОбщиеМодули.Найти("ЛицензированиеПоддержка") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получим перечень продуктов, используемых в конфигурации.
	МодульЛицензированиеПоддержка = ОбщегоНазначения.ОбщийМодуль("ЛицензированиеПоддержка");
	Попытка
		СписокРешений = МодульЛицензированиеПоддержка.СписокРешений();
	Исключение
		Попытка
			СписокРешений = МодульЛицензированиеПоддержка.ПолучитьСписокРешений();
		Исключение
			ПричинаОшибки = ИнформацияОбОшибке();
			Возврат;
		КонецПопытки;
	КонецПопытки;
	
	// Инициализируем переменные.
	ОписаниеОшибки = "";
	КодОшибки      = 0;
	
	// Определим имя защищенной обработки.
	Для каждого Решение Из СписокРешений Цикл
		
		// Если найдено хоть одно решение, то установим признак наличия системы защиты
		ЕстьСистемаЗащиты = ИСТИНА;
		
		// Получим защищенную обработку и активную копоненту защиты.
		Попытка
			Обработка = ОбщегоНазначения.ОбщийМодуль("ЛицензированиеСервер").ПолучитьЗащищеннуюОбработку(Решение.Ключ, ОписаниеОшибки, КодОшибки);
			Если Обработка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			ПричинаОшибки = ИнформацияОбОшибке();
			Продолжить;
		КонецПопытки;
		Компонента = Обработка.Компонента;
		
		// Получим версию защиты.
		ВерсияЗащиты = Компонента.Версия;
		
		// Определим тип ключа и режим работы системы защиты РАРУС.
		// 1 - аппаратный (версия 1);
		// 2 - программный 1С-Рарус;
		// 3 - аппаратный (версия 2);
		// 4 - программный СЛК;
		Попытка
			
			ТипКлючаЗащиты = 0;
			Если НЕ Компонента.ПолучитьТипКлючаЗащиты(ТипКлючаЗащиты) Тогда
				ОписаниеОшибки = Компонента.ОписаниеОшибки;
				ТипКлючаЗащиты = 0;
			КонецЕсли;
			
		Исключение
			ПричинаОшибки  = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ПричинаОшибки);
		КонецПопытки;
		
		// Получаем параметры ключа СЛК
		Если ТипКлючаЗащиты = 0 ИЛИ ТипКлючаЗащиты = 4 Тогда
			
			Попытка
				Параметры = Неопределено;
				Если Компонента.ПолучитьПараметрыКлючаСЛК(Решение.Ключ, Параметры) Тогда
					
					Если ТипЗнч(Параметры)=Тип("Строка") Тогда
						ЧтениеJSON = Новый ЧтениеJSON;
						ЧтениеJSON.УстановитьСтроку(Параметры);
						Параметры = ПрочитатьJSON(ЧтениеJSON);
						ЧтениеJSON.Закрыть();
					КонецЕсли;
					
					МодульОбработчика.ПриПолученииПараметровЛицензии(
						ПараметрыЛицензий, 2, Компонента.ИдентификаторПродукта, Решение.Значение,
						Параметры, ВерсияЗащиты);
					Продолжить;
					
				Иначе
					ОписаниеОшибки = Компонента.ОписаниеОшибки;
				КонецЕсли;
			Исключение
				ПричинаОшибки  = ИнформацияОбОшибке();
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ПричинаОшибки);
			КонецПопытки;
			
		КонецЕсли;
		
		// Получаем параметры ключа
		Если ТипКлючаЗащиты <> 4 Тогда
			
			// Формируем структуру параметров лицензии по формату.
			Параметры = Новый Структура("Type,Enabled,Blocked,Workable,Version,KeyNo,KeyID,KeyType,ServiceType,LicenceCount,BlankKeyNo,ActivationCode,ExpireDate,DaysLeft,Expired,Counters,Flags,ProductName,ArticleName,Счетчик2,Счетчик3,ВсегоЗаМесто,СвободноЗаМесто,ВсегоЗаСессию,СвободноЗаСессию");
			
			// Читаем параметры из копоненты.
			Если Компонента.ПолучитьПараметрыКлючаЗащиты(Параметры.ВсегоЗаМесто, Параметры.СвободноЗаМесто, Параметры.ВсегоЗаСессию, Параметры.СвободноЗаСессию, Параметры.Flags, Параметры.Counters, Параметры.Счетчик2, Параметры.Счетчик3, Параметры.ExpireDate, Параметры.KeyType, Параметры.KeyNo, Параметры.BlankKeyNo, Параметры.ActivationCode, Параметры.ArticleName) Тогда
				
				// Заполняем рассчетные параметры.
				Если ТипКлючаЗащиты=0 Тогда
					Параметры.Type = ?(Параметры.KeyNo = Параметры.BlankKeyNo, "Virtual", "USB");
				КонецЕсли;
				Параметры.Enabled      = ИСТИНА;
				Параметры.Blocked      = ЛОЖЬ;
				Параметры.Workable     = ИСТИНА;
				Параметры.Version      = Формат(ТипКлючаЗащиты, "ЧН=0; ЧГ=0");
				Параметры.KeyID        = Компонента.ИдентификаторПродукта;
				Параметры.KeyType      = ?(Параметры.KeyType=1, 3, 5);
				Параметры.ServiceType  = 0;
				Параметры.LicenceCount = МАКС(Параметры.ВсегоЗаМесто, Параметры.ВсегоЗаСессию);
				Если ЗначениеЗаполнено(Параметры.ExpireDate) И Параметры.ExpireDate > Дата(1980, 1, 1) Тогда
					Параметры.DaysLeft = Цел((НачалоДня(Параметры.ExpireDate) - НачалоДня(ТекущаяДатаСеанса())) / 24 / 60 / 60);
					Параметры.Expired  = (НачалоДня(Параметры.ExpireDate) < НачалоДня(ТекущаяДатаСеанса()));
				Иначе
					Параметры.Expired  = ЛОЖЬ;
				КонецЕсли;
				Параметры.ProductName = Решение.Значение;
				
				// Вызываем обработчик чтения лицензии.
				МодульОбработчика.ПриПолученииПараметровЛицензии(ПараметрыЛицензий, 1, Компонента.ИдентификаторПродукта, Решение.Значение, Параметры, ВерсияЗащиты);
				
			Иначе
				ОписаниеОшибки = Компонента.ОписаниеОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьПараметрыЛицензийРАРУС()

Процедура ПолучитьПараметрыЛицензийСЛК_БФП(МодульОбработчика, ПараметрыЛицензий, ЕстьСистемаЗащиты)
	
	// Определим параметры получения данных лицензий.
	ПоВсемСериям    = ЛОЖЬ;
	ТолькоДоступные = ИСТИНА;
	
	// Проверим наличие в конфигурации общего модуля из библиотеки БФП.
	Если Метаданные.ОбщиеМодули.Найти("слкМенеджерЗащитыПовтИсп") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодульМенеджерЗащиты = ОбщегоНазначения.ОбщийМодуль("слкМенеджерЗащитыПовтИсп");
	
	// Найдем серию активной лицензии
	Для Каждого ЭлементЗащиты Из МодульМенеджерЗащиты.ПолучитьМенеджерЗащиты(ИСТИНА) Цикл
		
		// Если найдено хоть одно решение, то установим признак наличия системы защиты
		ЕстьСистемаЗащиты = ИСТИНА;
		
		// Проверяем настроены ли параметры подключения
		Если ПустаяСтрока(ЭлементЗащиты.Значение.ПараметрыПодключения.Host) Тогда
			Продолжить;
		КонецЕсли;
		
		// Получаем центральный объект системы защиты СЛК.
		Попытка
			МенеджерОбъектов = МодульМенеджерЗащиты.МенеджерОбъектовСерииЗащиты(ЭлементЗащиты.Ключ);
		Исключение
			ПричинаОшибки = ИнформацияОбОшибке();
			Продолжить;
		КонецПопытки;
		
		// Проверяем, удалось ли подключиться к менеджеру защиты.
		Если МенеджерОбъектов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Получим версию защиты
		ИнформациюОСервере = МенеджерОбъектов.ПолучитьИнформациюОСервере();
		ВерсияЗащиты = ?(ИнформациюОСервере=Неопределено ИЛИ НЕ ИнформациюОСервере.Свойство("Version"), "", ИнформациюОСервере.Version);
		
		// Получаем лицензии доступные по текущей серии.
		Лицензии = МенеджерОбъектов.ПопыткаПолучитьЛицензии(ЛОЖЬ, ИСТИНА);
		Если Лицензии=Неопределено Тогда
			ОписаниеОшибки = МенеджерОбъектов.ПолучитьОписаниеОшибки();
			Продолжить;
		КонецЕсли;
		
		// Вносим сведения о лицензиях в нашу коллекцию.
		Для каждого Параметры Из Лицензии Цикл
			МодульОбработчика.ПриПолученииПараметровЛицензии(ПараметрыЛицензий, 3, ЭлементЗащиты.Ключ, ЭлементЗащиты.Значение.Наименование, Параметры, ВерсияЗащиты);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьПараметрыЛицензийСЛК_БФП()

Процедура ПолучитьПараметрыЛицензийСЛК_Катран(МодульОбработчика, ПараметрыЛицензий, ЕстьСистемаЗащиты)
	
	// Определим параметры получения данных лицензий.
	ПоВсемСериям    = ЛОЖЬ;
	ТолькоДоступные = ИСТИНА;
	
	// Если конфигурация построена на базе библиотеки Катран, то достаточно вызвать служебную функцию.
	Если Метаданные.ОбщиеМодули.Найти("СЛКПовтИсп") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем центральный объект системы защиты СЛК.
	МенеджерОбъектов = ОбщегоНазначения.ОбщийМодуль("СЛКПовтИсп").МенеджерОбъектов();
	
	// Проверяем, удалось ли подключиться к менеджеру защиты.
	Если МенеджерОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Менеджер защиты есть, установим признак наличия системы защиты
	ЕстьСистемаЗащиты = ИСТИНА;
	
	// Получим версию защиты
	ИнформациюОСервере = МенеджерОбъектов.ПолучитьИнформациюОСервере();
	ВерсияЗащиты = ?(ИнформациюОСервере = Неопределено ИЛИ НЕ ИнформациюОСервере.Свойство("Version"), "", ИнформациюОСервере.Version);
	
	// Получаем лицензии доступные по текущей серии.
	Лицензии = МенеджерОбъектов.ПопыткаПолучитьЛицензии(ПоВсемСериям, ТолькоДоступные);
	Если Лицензии = Неопределено Тогда
		ОписаниеОшибки = МенеджерОбъектов.ПолучитьОписаниеОшибки();
		Возврат;
	КонецЕсли;
	
	// Вносим сведения о лицензиях в нашу коллекцию.
	Для каждого Параметры Из Лицензии Цикл
		МодульОбработчика.ПриПолученииПараметровЛицензии(ПараметрыЛицензий, 3, Параметры.KeyID, "", Параметры, ВерсияЗащиты);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьПараметрыЛицензийСЛК_Катран()

Процедура ИзменитьПолучателяСтатистическойИнформации(Форма, ИмяПоля)
	
	Элемент = Форма.Элементы.Найти(ИмяПоля);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, "1С", "1С-Рарус");
	Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, "1C", "1C-Rarus");
	
КонецПроцедуры // ИзменитьПолучателяСтатистическойИнформации()

Процедура ИсключительнаяСитуацияПриСбореПоказателейСтатистики(ПричинаОшибки, ВидОшибки=Неопределено)
	
	Если ВидОшибки="Обращения" Тогда
		ИмяСобытия  = НСтр("ru = 'Центр мониторинга.Обращения в службу поддержки'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИмяОперации = "ЦентрМониторинга.ОбращенияВСлужбуПоддержки.Ошибка";
	Иначе
		ИмяСобытия  = НСтр("ru = 'Центр мониторинга.Собрать отраслевую статистику'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИмяОперации = "ЦентрМониторинга.СобратьОтраслевуюСтатистику.Ошибка";
	КонецЕсли;
	
	Если ТипЗнч(ПричинаОшибки)=Тип("ИнформацияОбОшибке") Тогда
		Комментарий = ПодробноеПредставлениеОшибки(ПричинаОшибки);
	Иначе
		Комментарий = СокрЛП(ПричинаОшибки);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, 1, Комментарий);
	
КонецПроцедуры // ИсключительнаяСитуацияПриСбореПоказателейСтатистики()

Функция НайтиПоследнееВыполненноеФоновоеЗадание(РегламентноеЗадание)
	
	// Получаем последнее фоновое задание.
	ПоследнееФоновоеЗадание = РегламентноеЗадание.ПоследнееЗадание;
	
	// Если фоновое задание еще работает, получем предпоследнее.
	Если ПоследнееФоновоеЗадание<>Неопределено И НЕ ЗначениеЗаполнено(ПоследнееФоновоеЗадание.Конец) Тогда
		
		// Получим все выполненные к этому времении фоновые задания
		АвтоматическиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("РегламентноеЗадание", РегламентноеЗадание));
		ПоследнееФоновоеЗадание      = Неопределено;
		
		// Найдем с наибольшей датой завершения.
		Для каждого ТекущееЗадание Из АвтоматическиеФоновыеЗадания Цикл
			Если ЗначениеЗаполнено(ТекущееЗадание.Конец) Тогда
				Если ПоследнееФоновоеЗадание=Неопределено Тогда
					ПоследнееФоновоеЗадание = ТекущееЗадание;
				ИначеЕсли ТекущееЗадание.Конец > ПоследнееФоновоеЗадание.Конец Тогда
					ПоследнееФоновоеЗадание = ТекущееЗадание;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверим фоновые задания запущенные вручную.
	ФоновыеЗаданияЗапущенныеВручную = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ,Конец", Строка(РегламентноеЗадание.УникальныйИдентификатор), ТекущаяДатаСеанса()));
	
	// Найдем с наибольшей датой завершения.
	Для каждого ТекущееЗадание Из ФоновыеЗаданияЗапущенныеВручную Цикл
		Если ЗначениеЗаполнено(ТекущееЗадание.Конец) Тогда
			Если ПоследнееФоновоеЗадание=Неопределено Тогда
				ПоследнееФоновоеЗадание = ТекущееЗадание;
			ИначеЕсли ТекущееЗадание.Конец > ПоследнееФоновоеЗадание.Конец Тогда
				ПоследнееФоновоеЗадание = ТекущееЗадание;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоследнееФоновоеЗадание;
	
КонецФункции // НайтиПоследнееВыполненноеФоновоеЗадание()

Функция ПолучитьСгруппированныеЗамеры()
	
	ТипЗаписи = 8;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацииСтатистики.Наименование КАК ОперацияСтатистики,
	|	НАЧАЛОПЕРИОДА(ЗамерыОперацииСтатистики.ПериодЗаписи, ЧАС) КАК Период,
	|	ЗамерыОперацииСтатистики.Ключ КАК КлючАналитики,
	|	СУММА(1) КАК КоличествоЗначений,
	|	СУММА(ЗамерыОперацииСтатистики.ЗначениеОперации) КАК СуммаЗначений
	|ИЗ
	|	РегистрСведений.ЗамерыСтатистики КАК ЗамерыОперацииСтатистики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииСтатистики КАК ОперацииСтатистики
	|		ПО ЗамерыОперацииСтатистики.ОперацияСтатистики = ОперацииСтатистики.ИдентификаторОперации
	|ГДЕ
	|	ЗамерыОперацииСтатистики.ТипЗаписи = &ТипЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацииСтатистики.Наименование,
	|	НАЧАЛОПЕРИОДА(ЗамерыОперацииСтатистики.ПериодЗаписи, ЧАС),
	|	ЗамерыОперацииСтатистики.Ключ";
	
	Запрос.УстановитьПараметр("ТипЗаписи", ТипЗаписи);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУникальныеЗамеры()
	
	ТипЗаписи = 9;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацииСтатистики.Наименование КАК ОперацияСтатистики,
	|	ЗамерыОперацииСтатистики.ПериодЗаписи КАК Период,
	|	ЗамерыОперацииСтатистики.Ключ КАК КлючАналитики,
	|	1 КАК КоличествоЗначений,
	|	ЗамерыОперацииСтатистики.ЗначениеОперации КАК СуммаЗначений
	|ИЗ
	|	РегистрСведений.ЗамерыСтатистики КАК ЗамерыОперацииСтатистики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииСтатистики КАК ОперацииСтатистики
	|		ПО ЗамерыОперацииСтатистики.ОперацияСтатистики = ОперацииСтатистики.ИдентификаторОперации
	|ГДЕ
	|	ЗамерыОперацииСтатистики.ТипЗаписи = &ТипЗаписи";
	
	Запрос.УстановитьПараметр("ТипЗаписи", ТипЗаписи);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторБизнесРолиПользователя(Пользователь = Неопределено)
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь, Истина, Ложь) Тогда
		БизнесРольПользователя = "Администратор";
		Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(БизнесРольПользователя);
	КонецЕсли;
	
	БизнесРольПользователя = "ПрочийПользователь";
	ЦентрМониторингаПереопределяемый.ПриОпределенииБизнесРолиПользователя(Пользователь, БизнесРольПользователя);
	
	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(БизнесРольПользователя);
	
КонецФункции // ИдентификаторБизнесРолиПользователя()

Функция КлючДанныхЗамера()
	
	// Макисмальная длина строкового ключа данных - 100 символов,
	// как в измерении "Ключ" регистра сведений "ЗамерыСтатистики".
	// Формат ключа: <ПрефиксВидаКлюча> + <ДанныеКлюча>.
	// Длина ПрефиксВидаКлюча - 1 символ, ДанныеКлюча - до 99 символов.
	
	ПрефиксВидаКлюча = "0";
	
	// ПрефиксВидаКлюча = "0": данные ключа содержат до трех строк фиксированной длины 32 символа -
	// MD5 хешей или уникальных идентификаторов с удаленными дефисами.
	// Каждая из этих строк предваряется односимвольным префиксом, указывающими на тип передаваемых в строке данных.
	// Формат данных ключа: <ПрефиксТипа1> + <Строка1> [ + ПрефиксТипа2> + <Строка2> [ + <ПрефиксТипа3> + <Строка3>]]
	
	ПрефиксТипаДанных = "1";
	
	// ПрефиксТипаДанных = "1": передается идентификатор бизнес роли пользователя.
	
	БизнесРольПользователя = ИдентификаторБизнесРолиПользователя();
	
	Возврат ПрефиксВидаКлюча + ПрефиксТипаДанных + БизнесРольПользователя;
	
КонецФункции // КлючДанныхЗамера()

Функция РазложитьСтрокуСоединенияНаПараметры(СтрокаСоединения, ЭтоСтрокаСоединенияСервера=Ложь)
	
	ЭлементыСтроки = Новый Соответствие();
	
	Для Каждого ЭлементСтрокиСоединения Из СтрРазделить(НРег(СтрокаСоединения), ";", Ложь) Цикл
		
		ЭлементыПараметра = СтрРазделить(ЭлементСтрокиСоединения, "=");
		Если ЭлементыПараметра.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = СокрЛП(ЭлементыПараметра[0]);
		Значение     = СокрЛП(СтрЗаменить(ЭлементыПараметра[1], """", ""));
		ЭлементыСтроки.Вставить(ИмяПараметра, Значение);
		
	КонецЦикла;
	
	ПарметрыСоединения = Новый Структура("Тип,Компьютер,Кластер,Порт,ИмяБазы", 0, "", "", "", "");
	ПарметрыСоединения.Компьютер = НРег(ИмяКомпьютера());
	
	Если ЭлементыСтроки["ws"] <> Неопределено Тогда
		
		Части = СтрРазделить(ЭлементыСтроки["ws"], "/", Ложь);
		
		ПарметрыСоединения.Кластер = Части[1];
		ПарметрыСоединения.ИмяБазы = Части[Части.ВГраница()];
		ПарметрыСоединения.Тип     = 3;
		
	ИначеЕсли ЭлементыСтроки["srvr"] <> Неопределено Тогда
		
		Если СтрНайти(ЭлементыСтроки["srvr"], ":") > 0 Тогда
			Части = СтрРазделить(ЭлементыСтроки["srvr"], ":");
			ПарметрыСоединения.Кластер = Части[0];
			ПарметрыСоединения.Порт    = Части[1];
		Иначе
			ПарметрыСоединения.Кластер = ЭлементыСтроки["srvr"];
		КонецЕсли;
		
		ПарметрыСоединения.ИмяБазы = ЭлементыСтроки["ref"];
		ПарметрыСоединения.Тип     = 2;
		
	ИначеЕсли ЭлементыСтроки["file"] <> Неопределено Тогда
		
		Каталог = ЭлементыСтроки["file"];
		Части   = СтрРазделить(Каталог, "/\", Ложь);
		
		Если СтрНачинаетсяС(Каталог, "\\") Тогда
			ПарметрыСоединения.Кластер = Части[0];
			
		ИначеЕсли СтрНачинаетсяС(Каталог, "smb://") Тогда
			ПарметрыСоединения.Кластер = Части[1];
			
		Иначе
			ПарметрыСоединения.Кластер = "localhost";
		КонецЕсли;
		
		ПарметрыСоединения.ИмяБазы = Части[Части.ВГраница()];
		ПарметрыСоединения.Тип     = 1;
		
	КонецЕсли;
	
	Если ЭтоСтрокаСоединенияСервера И ПарметрыСоединения.Кластер = "localhost" Тогда
		ПарметрыСоединения.Кластер = ПарметрыСоединения.Компьютер;
	КонецЕсли;
	
	Возврат ПарметрыСоединения;
	
КонецФункции // РазложитьСтрокуСоединенияНаПараметры()

Процедура ОтправитьОбращенияПользователейВСлужбуТехническойПоддержки(ПакетДанных, ПараметрыЦентраМониторинга)
	
	// Проверим наличие подсистемы обращений
	Если Метаданные.РегистрыСведений.Найти("ОбращенияВСлужбуПоддержки")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтправляемыеОбращения = Новый Массив();
	ИменаПолей            = "Идентификатор,ДатаОбращения,НомерОбращения,ВидОбращения,Пользователь,ЭлектроннаяПочта,Телефон,Тема,ОписаниеРоли,ОписаниеДействия,ОжидаемаяЦель,ФактическоеПоведение,Прикрепления";
	ПределПакетаСервера   = МаксимальныйРазмерПрикрепленийДляОбращения();
	
	// Получим обращения с пустыми номерами регистрации
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбращенияВСлужбуПоддержки.Идентификатор КАК Идентификатор,
	|	ОбращенияВСлужбуПоддержки.ДатаОбращения КАК ДатаОбращения,
	|	ОбращенияВСлужбуПоддержки.НомерОбращения КАК НомерОбращения,
	|	ОбращенияВСлужбуПоддержки.ВидОбращения КАК ВидОбращения,
	|	ОбращенияВСлужбуПоддержки.Пользователь КАК Пользователь,
	|	ОбращенияВСлужбуПоддержки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
	|	ОбращенияВСлужбуПоддержки.Телефон КАК Телефон,
	|	ОбращенияВСлужбуПоддержки.Тема КАК Тема,
	|	ОбращенияВСлужбуПоддержки.ОписаниеРоли КАК ОписаниеРоли,
	|	ОбращенияВСлужбуПоддержки.ОписаниеДействия КАК ОписаниеДействия,
	|	ОбращенияВСлужбуПоддержки.ОжидаемаяЦель КАК ОжидаемаяЦель,
	|	ОбращенияВСлужбуПоддержки.ФактическоеПоведение КАК ФактическоеПоведение,
	|	ОбращенияВСлужбуПоддержки.Прикрепления КАК Прикрепления
	|ИЗ
	|	РегистрСведений.ОбращенияВСлужбуПоддержки КАК ОбращенияВСлужбуПоддержки
	|ГДЕ
	|	ОбращенияВСлужбуПоддержки.НомерОбращения = """"";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПустаяСтрока(Выборка.НомерОбращения) Тогда
			Продолжить;
		КонецЕсли;
		
		Обращение = Новый Структура(ИменаПолей);
		ЗаполнитьЗначенияСвойств(Обращение, Выборка);
		
		Обращение.Пользователь = СокрЛП(Выборка.Пользователь);
		Обращение.Прикрепления = Новый Массив();
		ОтправляемыеОбращения.Добавить(Обращение);
		
		Прикрепления = Выборка.Прикрепления.Получить();
		Если ТипЗнч(Прикрепления)<>Тип("Массив") ИЛИ Прикрепления.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		РазмерПрикреплений = 0;
		
		Для каждого ОписаниеФайла Из Прикрепления Цикл
			
			Если ТипЗнч(ОписаниеФайла)<>Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			ПрикрепленныйФайл = Новый Структура("ИмяФайла,Размер,Данные");
			ПрикрепленныйФайл.ИмяФайла = ОписаниеФайла.ИмяФайла;
			ПрикрепленныйФайл.Размер   = ОписаниеФайла.Данные.Размер();
			
			РазмерПрикреплений = РазмерПрикреплений + ПрикрепленныйФайл.Размер;
			
			Если РазмерПрикреплений > ПределПакетаСервера Тогда
				Данные = Новый ХранилищеЗначения(Неопределено);
			Иначе
				Данные = Новый ХранилищеЗначения(ОписаниеФайла.Данные, Новый СжатиеДанных(9));
			КонецЕсли;
			
			ПрикрепленныйФайл.Данные = ЗначениеВСтрокуВнутр(Данные);
			
			Обращение.Прикрепления.Добавить(ПрикрепленныйФайл);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Помещаем в пакет секцию с еще не обработанными обращениями
	Если ОтправляемыеОбращения.Количество() > 0 Тогда
		ПакетДанных.Вставить("support", ОтправляемыеОбращения);
	КонецЕсли;
	
КонецПроцедуры // ОтправитьОбращенияПользователейВСлужбуТехническойПоддержки()

#КонецОбласти
