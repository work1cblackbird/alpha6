////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции по работе с объектами автосалона
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Процедура выполняет контроль введенного ГОС Номера автомобиля
//
Процедура УстановитьЗначениеДопустимыхСимволовГосНомера() Экспорт
	
	ДопустимыеСимволыГосНомера = "АВЕКМНОРСТУХавекмнорстух 0123456789	ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	Константы.ДопустимыеСимволыГосНомера.Установить(ДопустимыеСимволыГосНомера);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Формирует строку представления автомобиля
//
// Параметры:
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль, для которого создается информация.
//
// Возвращаемое значение:
//  Строка - Представление информации об автомобиле.
//
Функция ИнформацияАвтомобиля(Автомобиль) Экспорт
	
	Если ЗначениеЗаполнено(Автомобиль) Тогда
		ДанныеАвтомобиля = ДанныеАвтомобиля(Автомобиль);
		
		Формат =ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Автомобиль);
		
		СоставИнформации = Новый Структура;
		СоставИнформации.Вставить("Модель"              , "Модель");
		СоставИнформации.Вставить("ВариантКомплектации" , "Комплектация");
		СоставИнформации.Вставить("VIN"                 , "VIN");
		СоставИнформации.Вставить("ГосНомер"            , "Гос. номер");
		СоставИнформации.Вставить("ГодВыпуска"          , "Дата выпуска!&"+Формат);
		СоставИнформации.Вставить("Пробег"              , "Пробег");
		СоставИнформации.Вставить("Владелец"            , "Владелец");
		СоставИнформации.Вставить("Цвет"                , "Цвет");
		СоставИнформации.Вставить("МодельДвигателя"     , "Двигатель");
		СоставИнформации.Вставить("ТипДвигателя"        , "Тип двигателя");
		СоставИнформации.Вставить("ТипКПП"              , "КПП");
		СоставИнформации.Вставить("ТипСалона"           , "ТипСалона");
		
		ИнформацияОбАвтомобиле = Новый Массив;
		Для Каждого КлючЗначение Из СоставИнформации Цикл
			ЗначениеСвойства = Неопределено;
			
			Если ДанныеАвтомобиля.Свойство(КлючЗначение.Ключ, ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				Если СтрНайти(КлючЗначение.Значение, "!&") > 0 Тогда
					РазделенноеЗначение = СтрРазделить(КлючЗначение.Значение, "!&", Ложь);
					Если РазделенноеЗначение.ВГраница() < 1 Тогда
						ВызватьИсключение СтрШаблон("Неверно задан формат поля ""%1""", КлючЗначение.Значение);
					КонецЕсли;
					
					Заголовок        = РазделенноеЗначение[0];
					ЗначениеСвойства = Формат(ЗначениеСвойства, РазделенноеЗначение[1]);
				Иначе
					Заголовок = КлючЗначение.Значение;
				КонецЕсли;
				
				ИнформацияОбАвтомобиле.Добавить(СтрШаблон("%1: %2", Заголовок, ЗначениеСвойства));
			КонецЕсли;
		КонецЦикла;
		
		Если ИнформацияОбАвтомобиле.Количество() > 0 Тогда
			ИнформацияОбАвтомобиле = СтрСоединить(ИнформацияОбАвтомобиле, "; ");
		Иначе
			ИнформацияОбАвтомобиле = "<Нет данных об автомобиле>";
		КонецЕсли;
	Иначе
		ИнформацияОбАвтомобиле = "<Автомобиль не выбран>";
	КонецЕсли;
	
	Возврат ИнформацияОбАвтомобиле;
	
КонецФункции

// Готовит коллекцию со значениями реквизитов автомобиля собранных из разных мест хранения
//
// Параметры:
//  Автомобиль - СправочникСсылка.Автомобиль - Автомобиль.
//
// Возвращаемое значение:
//  Структура - Ключом является реквизит, а значением значение реквизита.
//
Функция ДанныеАвтомобиля(Автомобиль, НаДату = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АвтомобилиСрезПоследних.ВидЗначения КАК ВидЗначения,
	|	АвтомобилиСрезПоследних.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.Автомобили.СрезПоследних(&НаДату, Автомобиль = &Автомобиль) КАК АвтомобилиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Автомобили.Марка КАК Марка,
	|	Автомобили.Модель КАК Модель,
	|	Автомобили.НомерДвигателя КАК НомерДвигателя,
	|	Автомобили.НомерКузова КАК НомерКузова,
	|	Автомобили.НомерШасси КАК НомерШасси,
	|	Автомобили.ВариантКомплектации КАК ВариантКомплектации,
	|	Автомобили.VIN КАК VIN,
	|	Автомобили.ГодВыпуска КАК ГодВыпуска,
	|	Автомобили.Цвет КАК Цвет,
	|	Автомобили.ТипСалона КАК ТипСалона,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Автомобили.МодельДвигателя <> ЗНАЧЕНИЕ(Справочник.МоделиДвигателей.ПустаяСсылка)
	|				ТОГДА Автомобили.МодельДвигателя
	|			КОГДА Автомобили.ВариантКомплектации.МодельДвигателя <> ЗНАЧЕНИЕ(Справочник.МоделиДвигателей.ПустаяСсылка)
	|				ТОГДА Автомобили.ВариантКомплектации.МодельДвигателя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.МоделиДвигателей.ПустаяСсылка)
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.МоделиДвигателей.ПустаяСсылка)) КАК МодельДвигателя,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Автомобили.МодельДвигателя <> ЗНАЧЕНИЕ(Справочник.МоделиДвигателей.ПустаяСсылка)
	|				ТОГДА Автомобили.МодельДвигателя.Тип
	|			КОГДА Автомобили.ТипДвигателя <> ЗНАЧЕНИЕ(Справочник.ТипыДвигателей.ПустаяСсылка)
	|				ТОГДА Автомобили.ТипДвигателя
	|			КОГДА Автомобили.ВариантКомплектации.МодельДвигателя <> ЗНАЧЕНИЕ(Справочник.МоделиДвигателей.ПустаяСсылка)
	|				ТОГДА Автомобили.ВариантКомплектации.МодельДвигателя.Тип
	|			ИНАЧЕ Автомобили.ВариантКомплектации.ТипДвигателя
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ТипыДвигателей.ПустаяСсылка)) КАК ТипДвигателя,
	|	ВЫБОР
	|		КОГДА Автомобили.МодельДвигателя <> ЗНАЧЕНИЕ(Справочник.МоделиДвигателей.ПустаяСсылка)
	|			ТОГДА Автомобили.МодельДвигателя.Объем
	|		КОГДА Автомобили.ВариантКомплектации.МодельДвигателя <> ЗНАЧЕНИЕ(Справочник.МоделиДвигателей.ПустаяСсылка)
	|			ТОГДА Автомобили.ВариантКомплектации.МодельДвигателя.Объем
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Объем,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Автомобили.ТипКузова <> ЗНАЧЕНИЕ(Справочник.ТипыКузовов.ПустаяСсылка)
	|				ТОГДА Автомобили.ТипКузова
	|			КОГДА Автомобили.ВариантКомплектации <> ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка)
	|				ТОГДА Автомобили.ВариантКомплектации.ТипКузова
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТипыКузовов.ПустаяСсылка)
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ТипыКузовов.ПустаяСсылка)) КАК ТипКузова,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Автомобили.ТипКПП <> ЗНАЧЕНИЕ(Справочник.ТипыКПП.ПустаяСсылка)
	|				ТОГДА Автомобили.ТипКПП
	|			КОГДА Автомобили.ВариантКомплектации <> ЗНАЧЕНИЕ(Справочник.ТипыКПП.ПустаяСсылка)
	|				ТОГДА Автомобили.ВариантКомплектации.ТипКПП
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТипыКПП.ПустаяСсылка)
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ТипыКПП.ПустаяСсылка)) КАК ТипКПП
	|ИЗ
	|	Справочник.Автомобили КАК Автомобили
	|ГДЕ
	|	Автомобили.Ссылка = &Автомобиль");
	
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Данные = Новый Структура("Владелец,ГосНомер,Пробег,Вид,Паспорт,Свидетельство");
	
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		
		ДанныеИзСправочника = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатыЗапроса[1].Выгрузить()[0]);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Данные, ДанныеИзСправочника, Истина);
		
	КонецЕсли;
	
	Если НЕ РезультатыЗапроса[0].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин Тогда
				Данные.Владелец = Выборка.Значение;
			ИначеЕсли Выборка.ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер Тогда
				Данные.ГосНомер = Выборка.Значение;
			ИначеЕсли Выборка.ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег Тогда
				Данные.Пробег = Выборка.Значение;
			ИначеЕсли Выборка.ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля Тогда
				Данные.Вид = Выборка.Значение;
			ИначеЕсли Выборка.ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт Тогда
				Данные.Паспорт = Выборка.Значение;
			ИначеЕсли Выборка.ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.СвидетельствоОРегистрацииТС Тогда
				Данные.Свидетельство = Выборка.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Проверка необходимости проведения сервисной кампании для автомобиля
//
// Параметры:
//  Автомобиль       - СправочникСсылка.Автомобили  - Ссылка на автомобиль, 
//													для которого необходимо проверить наличие сервисной кампании.
//  НаДату           - Дата   - Дата выполнения сервисной кампании.
//  ТолькоАктуальные - Булево - Выбирать только актуальные сервисные кампании.
//  ЗаказНаряд       - ДокументСсылка.ЗаказНаряд - Отбор по заказ-наряду
//
// Возвращаемое значение:
//   ТаблицаЗначений - Список сервисных кампаний, в которые включен данный автомобиль.
//
Функция ПроверитьСервиснуюКампанию(Автомобиль, НаДату = Неопределено,
	ТолькоАктуальные = Истина, ЗаказНаряд = Неопределено) Экспорт
	
	Результат = ПустойРезультатПроверитьСервиснуюКампанию();
	
	Если НЕ ЗначениеЗаполнено(Автомобиль) 
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ВыполнениеСервисныхКампаний) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	НомераVIN = Новый Структура("Обычный,Оригинальный");
	
	ТипАвтомобиля = ТипЗнч(Автомобиль);
	
	Если ТипАвтомобиля = Тип("СправочникСсылка.Автомобили") Тогда
		
		НомераVIN = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Автомобиль, Новый Структура("Обычный,Оригинальный", "VIN", "ОригинальныйVIN"));
		
	ИначеЕсли ТипАвтомобиля = Тип("Структура") Тогда
		
		НомераVIN.Обычный = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Автомобиль, "VIN");
		НомераVIN.Оригинальный = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Автомобиль, "ОригинальныйVIN");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомераVIN.Обычный) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("VIN", НомераVIN.Обычный);
	Запрос.УстановитьПараметр("МаскаVIN", Лев("________________________________________", СтрДлина(НомераVIN.Обычный)));
	Запрос.УстановитьПараметр("ДатаТекущая", ?(НаДату = Неопределено, ТекущаяДатаСеанса(), НаДату));
	Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказНаряд);
	
	СписокVIN = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НомераVIN.Обычный);
	СписокVIN.Добавить(НомераVIN.Оригинальный);
	Запрос.УстановитьПараметр("СписокVIN", СписокVIN);
	
	#Область ТекстЗапросаСервисныхКомпаний
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыполнениеСервисныхКампаний.СервиснаяКампания КАК СервиснаяКампания,
	|	ВыполнениеСервисныхКампаний.СервиснаяКампания.ДатаНачала КАК ДатаНачала,
	|	ВыполнениеСервисныхКампаний.СервиснаяКампания.ДатаОкончания КАК ДатаОкончания,
	|	ВыполнениеСервисныхКампаний.ДатаВыполнения КАК ДатаВыполнения,
	|	ВыполнениеСервисныхКампаний.ДокументВыполнения КАК ДокументВыполнения,
	|	0 КАК ВидИсточника
	|ПОМЕСТИТЬ СервисныеКомпанииБезГруппировки
	|ИЗ
	|	РегистрСведений.ВыполнениеСервисныхКампаний КАК ВыполнениеСервисныхКампаний
	|ГДЕ
	|	ВыполнениеСервисныхКампаний.VIN В(&СписокVIN)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СервисныеКампанииДиапазоныVIN.Ссылка,
	|	СервисныеКампанииДиапазоныVIN.Ссылка.ДатаНачала,
	|	СервисныеКампанииДиапазоныVIN.Ссылка.ДатаОкончания,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаряд.ПустаяСсылка),
	|	1
	|ИЗ
	|	Справочник.СервисныеКампании.ДиапазоныVIN КАК СервисныеКампанииДиапазоныVIN
	|ГДЕ
	|	&VIN МЕЖДУ СервисныеКампанииДиапазоныVIN.НачальноеЗначение И СервисныеКампанииДиапазоныVIN.КонечноеЗначение
	|	И СервисныеКампанииДиапазоныVIN.КонечноеЗначение ПОДОБНО &МаскаVIN
	|	И (СервисныеКампанииДиапазоныVIN.Ссылка.ДатаОкончания > &ДатаТекущая
	|			ИЛИ СервисныеКампанииДиапазоныVIN.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|	И (СервисныеКампанииДиапазоныVIN.Ссылка.ДатаНачала < &ДатаТекущая
	|			ИЛИ СервисныеКампанииДиапазоныVIN.Ссылка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|ВЫБРАТЬ
	|	СервисныеКомпанииБезГруппировки.СервиснаяКампания КАК СервиснаяКампания,
	|	СервисныеКомпанииБезГруппировки.ДатаНачала КАК ДатаНачала,
	|	СервисныеКомпанииБезГруппировки.ДатаОкончания КАК ДатаОкончания,
	|	МАКСИМУМ(СервисныеКомпанииБезГруппировки.ДатаВыполнения) КАК ДатаВыполнения,
	|	МАКСИМУМ(СервисныеКомпанииБезГруппировки.ДокументВыполнения) КАК ДокументВыполнения,
	|	МИНИМУМ(СервисныеКомпанииБезГруппировки.ВидИсточника) КАК ВидИсточника
	|ПОМЕСТИТЬ СервисныеКомпанииСГруппрованные
	|ИЗ
	|	СервисныеКомпанииБезГруппировки КАК СервисныеКомпанииБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	СервисныеКомпанииБезГруппировки.ДатаОкончания,
	|	СервисныеКомпанииБезГруппировки.ДатаНачала,
	|	СервисныеКомпанииБезГруппировки.СервиснаяКампания
	|;
	|
	|ВЫБРАТЬ
	|	СервисныеКомпанииСГруппрованные.СервиснаяКампания КАК СервиснаяКампания,
	|	СервисныеКомпанииСГруппрованные.ДатаНачала КАК ДатаНачала,
	|	СервисныеКомпанииСГруппрованные.ДатаОкончания КАК ДатаОкончания,
	|	СервисныеКомпанииСГруппрованные.ДатаВыполнения КАК ДатаВыполнения,
	|	СервисныеКомпанииСГруппрованные.ДокументВыполнения КАК ДокументВыполнения,
	|	СервисныеКомпанииСГруппрованные.ВидИсточника КАК ВидИсточника
	|ИЗ
	|	СервисныеКомпанииСГруппрованные КАК СервисныеКомпанииСГруппрованные";
	
	Если ТолькоАктуальные Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС
			+ "ГДЕ
			|	(СервисныеКомпанииСГруппрованные.ДатаВыполнения = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ СервисныеКомпанииСГруппрованные.ДокументВыполнения = &ЗаказНаряд)
			|	И (СервисныеКомпанииСГруппрованные.ДокументВыполнения = ЗНАЧЕНИЕ(Документ.ЗаказНаряд.ПустаяСсылка)
			|			ИЛИ СервисныеКомпанииСГруппрованные.ДокументВыполнения = &ЗаказНаряд)
			|	И (СервисныеКомпанииСГруппрованные.ДатаНачала < &ДатаТекущая
			|			ИЛИ СервисныеКомпанииСГруппрованные.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
			|	И (СервисныеКомпанииСГруппрованные.ДатаОкончания > &ДатаТекущая
			|			ИЛИ СервисныеКомпанииСГруппрованные.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))"
		
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидИсточника > 0 Тогда
			
			Отказ = РегистрыСведений.ВыполнениеСервисныхКампаний.ЗаписатьВыполненныеСервисныеКампании(
						НомераVIN.Обычный,
						Выборка.СервиснаяКампания,
						ТекущийПользователь);
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПроверитьСервиснуюКампанию()

// Настройка внешнего вида поля ввода сервеисной компании на форме.
//
// Параметры:
//  ЕстьКоппании - Булево - Признак наличия компаний для автомобиля.
//  ПолеВвода - ЭлементФормы - Поле ввода сервисной компании на форме.
//  Декорация - ДекорацияФормы - Элемент декорации подсказки на форме.
//
Процедура ОбновитьСостояниеСервиснойКомпании(ЕстьКоппании, ПолеВвода, Декорация) Экспорт
	
	Декорация.Видимость              = ЕстьКоппании;
	ПолеВвода.АвтоМаксимальнаяШирина = НЕ ЕстьКоппании;
	
КонецПроцедуры

// Обновление индикатора состояния маркетинговой программы
//
// Параметры:
//  Объект    - Произвольный   - Объект который содержит маркетинговую программу
//  ПолеВвода - ЭлементФормы - Поле ввода маркетинговой программы.
//  Декорация - ДекорацияФормы - Элемент формы индикатор
//  Модель    - СправочникСсылка.Модели, Неопределено - Модель автомобиля, для проверки производителя.
//
Процедура ОбновитьСостояниеМаркетинговойПрограммы(Объект, ПолеВвода, Декорация, Модель=Неопределено) Экспорт
	Предупреждения = Новый Массив;
	
	Если НЕ Объект.МаркетинговаяПрограмма.Пустая() Тогда
		МаркетинговаяПрограмма = ОбщегоНазначения
			.ЗначенияРеквизитовОбъекта(Объект.МаркетинговаяПрограмма, "ДатаНачала,ДатаОкончания,Производитель");
	
		Если МаркетинговаяПрограмма.ДатаНачала > Объект.Дата ИЛИ МаркетинговаяПрограмма.ДатаОкончания < Объект.Дата Тогда
			Предупреждения.Добавить(НСтр("ru = 'Маркетинговая программа просрочена'"));
		КонецЕсли;
		
		Если НЕ МаркетинговаяПрограмма.Производитель.Пустая()
			И МаркетинговаяПрограмма.Производитель <> Модель.Производитель Тогда
			
			Предупреждения.Добавить(НСтр("ru = 'Производитель маркетинговой программы не соответствует производителю автомобиля.'"));
			
		КонецЕсли;
	КонецЕсли;
	
	Если Предупреждения.Количество() = 0 Тогда
		Декорация.Видимость              = Ложь;
		ПолеВвода.АвтоМаксимальнаяШирина = Истина;
	Иначе
		Декорация.Видимость              = Истина;
		ПолеВвода.АвтоМаксимальнаяШирина = Ложь;
		Декорация.Подсказка              = СтрСоединить(Предупреждения, Символы.ПС);
	КонецЕсли;
КонецПроцедуры

// Определяет размер пробега автомобиля на каждую из списка дат
//
// Параметры:
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль, для которого необходимо получить пробеги;
//  КлючевыеДаты - Массив, Дата - Коллекция дат, на которые необходимо получить пробеги.
//
// Возвращаемое значение:
//  Соответствие - Где ключ дата, а значение пробег.
//
Функция ПробегиАвтомобиляПоДатам(Автомобиль, Знач КлючевыеДаты) Экспорт
	
	ТипКлючевыхДат = ТипЗнч(КлючевыеДаты);
	
	Если Автомобиль.Пустая() Тогда
		
		Возврат Новый Соответствие;
		
	ИначеЕсли ТипКлючевыхДат <> Тип("Массив") И ТипКлючевыхДат <> Тип("Дата") Тогда
		
		ВызватьИсключение НСтр("ru = 'Неверный тип параметра 2.'");
		
	ИначеЕсли ТипКлючевыхДат = Тип("Дата") Тогда
		
		КлючевыеДаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючевыеДаты);
		
	КонецЕсли;
	
	ДатыВТаблице = Новый ТаблицаЗначений;
	ДатыВТаблице.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ДатыВТаблице, КлючевыеДаты, "Дата");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВИ", ДатыВТаблице);
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВИ.Дата КАК Дата
	|ПОМЕСТИТЬ Даты
	|ИЗ
	|	&ВИ КАК ВИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Автомобили.Период КАК Период,
	|	Автомобили.Значение КАК Значение
	|ПОМЕСТИТЬ Пробеги
	|ИЗ
	|	РегистрСведений.Автомобили КАК Автомобили
	|ГДЕ
	|	Автомобили.Автомобиль = &Автомобиль
	|	И Автомобили.ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.Пробег)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Даты.Дата КАК Дата,
	|	МАКСИМУМ(ЕСТЬNULL(Пробеги.Значение, 0)) КАК Пробег
	|ИЗ
	|	Даты КАК Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Пробеги КАК Пробеги
	|		ПО Даты.Дата >= Пробеги.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Даты.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Соответствие;
		
	КонецЕсли;
	
	Результат = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Пробег > 0 Тогда
			
			Результат.Вставить(Выборка.Дата, Выборка.Пробег);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получение информации о себестоимости автомобилей купленных у физ. лиц.
// Необходимо для корректного расчета ставки и значения НДС автомобилей.
//
// Параметры:
//  Автомобили - Массив, СправочникСсылка.Автомобили - Автомобили для которых необходимо получить себестоимость.
//  ДанныеДокумента - ДокументОбъект, Структура - Должен содержать информацию о дате операции, валюте и курсе документа.
//
// Возвращаемое значение:
//  Соответствие - Ключ - автомобиль, значение - себестоимость. Содержит только автомобили 
//                 для которых себестоимость отлична от 0.
//
Функция СебестоимостьАвтомобилейПриобретенныхУФизЛиц(Автомобили, ДанныеДокумента) Экспорт
	
	ОберткаДанныхДокумента = Новый Структура("Дата,ВалютаДокумента,КурсДокумента");
	ЗаполнитьЗначенияСвойств(ОберткаДанныхДокумента, ДанныеДокумента);
	
	Если ЕстьРеквизит(ДанныеДокумента, "Автомобили") Тогда
		ОберткаДанныхДокумента.Вставить(
			"Автомобили",
			?(ТипЗнч(ДанныеДокумента.Автомобили) = Тип("ТаблицаЗначений"),
			ДанныеДокумента.Автомобили,
			ДанныеДокумента.Автомобили.Выгрузить()));
	КонецЕсли;
	
	ОберткаАвтомобили = Автомобили;
	Если ТипЗнч(Автомобили) <> Тип("Массив") Тогда
		ОберткаАвтомобили = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Автомобили);
	КонецЕсли;
	
	Возврат ЗащищенныеФункцииАльфаАвтоСервер
		.СебестоимостьАвтомобилейПриобретенныхУФизЛиц(ОберткаАвтомобили, ОберткаДанныхДокумента);
	
КонецФункции // СебестоимостьАвтомобилейПриобретенныхУФизЛиц()

// Получает себестоимость автомобиля из коллекции себестоимостей
//
// Параметры:
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль.
//  ДанныеДокумента - ДокументОбъект, Структура - Должен содержать информацию о дате операции, валюте и курсе документа.
//
// Возвращаемое значение:
//  Число - Себестоимость автомобиля
//
Функция СебестоимостьАвтомобиляПриобретенногоУФизЛица(
		Автомобиль,
		ДанныеДокумента) Экспорт
	
	Себестоимость = СебестоимостьАвтомобилейПриобретенныхУФизЛиц(Автомобиль, ДанныеДокумента).Получить(Автомобиль);
	
	Если ЗначениеЗаполнено(Себестоимость) Тогда
		
		Возврат Себестоимость;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ПолучитьСебестоимостьАвтомобиля()

// Проверяет вид автомобиля
//
// Параметры:
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль для которого выполняется проверка;
//  Дата - Дата - дата документа, на которую необходимо получить значение
//
// Возвращаемое значение:
//  Булево - Если Истина, то автомобиль с пробегом. Иначе без пробега.
// 
Функция ЭтоАвтомобильСПробегом(Автомобиль, Дата) Экспорт
	
	ВидАвтомобиля = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля, Дата); 
			
	Возврат ВидАвтомобиля = Перечисления.ВидАвтомобиля.АвтомобильСПробегом;
	
КонецФункции

// Формирует пустой объект для параметра функция НомераАвтомобиляКорректны(), НомераАвтомобиляУникальны()
// 
// Возвращаемое значение:
//  Структура - Обязательные поля для работы:
//  * Ссылка - Неопределено - Ссылка на автомобиль.
//  * ЭтоГруппа - Булево - Ложь: это не группа автомобилей.
//  * VIN - Строка - VIN номер автомобиля.
//  * ОригинальныйVIN - Строка - Оригинальный VIN номер автомобиля.
//  * НомерШасси - Строка - Номер шасси автомобиля.
//
Функция ПроверкаНомеровОписаниеАвтомобиля() Экспорт
	
	Описание = Новый Структура();
	Описание.Вставить("Ссылка", Неопределено);
	Описание.Вставить("ЭтоГруппа", Ложь);
	Описание.Вставить("VIN", "");
	Описание.Вставить("ОригинальныйVIN", "");
	Описание.Вставить("НомерШасси", "");
	Возврат Описание;
	
КонецФункции

// Проверка корректности номеров автомобиля
//
// Параметры:
//  Автомобиль - СправочникОбъект.Автомобили, Стуктура - Структура описывающая автомобиль.
//   Обязательные поля (см.ПроверкаНомеровОписаниеАвтомобиля.ПроверкаНомеровОписаниеАвтомобиля())
//  ПроверяемыеПоля   - Строка, Массив - Список полей к проверке.
//  ВыводитьСообщение - Булево - Признак необходимости формировать сообщения пользователю.
// 
// Возвращаемое значение:
//  Структура - Результат проверки номеров:
//  * Ошибка - Булево - Признак наличия ошибки
//  * ЗапрещенныеСимволы - Структура - Где ключ имя поля с ошибкой, а значение список запрещенных символов.
//
Функция НомераАвтомобиляКорректны(Автомобиль, ПроверяемыеПоля=Неопределено, ВыводитьСообщение=Истина) Экспорт
	
	РезультатПроверки = Новый Структура("Ошибка,ЗапрещенныеСимволы", Ложь, Новый Структура());
	
	Если Автомобиль.ЭтоГруппа Тогда
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	ПроверятьVIN = ЗначениеЗаполнено(Автомобиль.VIN);
	ПроверятьОригинальныйVIN = ЗначениеЗаполнено(Автомобиль.ОригинальныйVIN);
	
	Если ТипЗнч(ПроверяемыеПоля) = Тип("Строка") Тогда
		
		ПроверяемыеПоля = СтрРазделить(ПроверяемыеПоля, ",");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроверяемыеПоля) И ТипЗнч(ПроверяемыеПоля) = Тип("Массив") Тогда
		
		ПроверятьVIN = ПроверятьVIN И (ПроверяемыеПоля.Найти("VIN") <> Неопределено);
		ПроверятьОригинальныйVIN = ПроверятьОригинальныйVIN И (ПроверяемыеПоля.Найти("ОригинальныйVIN") <> Неопределено);
		
	КонецЕсли;
	
	Если НЕ(ПроверятьVIN ИЛИ ПроверятьОригинальныйVIN) Тогда
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	НомераСПредставлением = Новый Структура;
	
	Если ПроверятьVIN Тогда
		
		НомераСПредставлением.Вставить("VIN", Новый Структура("Значение,Представление", Автомобиль.VIN, "VIN"));
		
	КонецЕсли;
	
	Если ПроверятьОригинальныйVIN Тогда
		
		НомераСПредставлением.Вставить("ОригинальныйVIN",
			Новый Структура("Значение,Представление", Автомобиль.ОригинальныйVIN, "Оригинальный VIN"));
		
	КонецЕсли;
	
	Для Каждого КлючЗначение Из НомераСПредставлением Цикл
		
		НомерНеКорректный = Ложь;
		ЗапрещенныеСимволы = Справочники.Автомобили.ПроверитьКорректностьVIN(НомерНеКорректный, КлючЗначение.Значение.Значение);
		РезультатПроверки.ЗапрещенныеСимволы.Вставить(КлючЗначение.Ключ, ЗапрещенныеСимволы);
		
		Если НомерНеКорректный Тогда
			
			РезультатПроверки.Ошибка = Истина;
			
			Если ВыводитьСообщение Тогда
				
				ОбщегоНазначения.СообщитьПользователю (СтрШаблон(НСтр("ru = 'Внимание! %1 автомобиля содержит недопустимые символы: [%2]'"),
					КлючЗначение.Значение.Представление, ЗапрещенныеСимволы));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Проверка корректности номеров автомобиля
//
// Параметры:
//  Автомобиль - СправочникОбъект.Автомобили, Структура - Структура описывающая автомобиль.
//   Обязательные поля (см.ПроверкаНомеровОписаниеАвтомобиля.ПроверкаНомеровОписаниеАвтомобиля())
//  ПроверяемыеПоля   - Строка, Массив - Список полей к проверке.
//  ВыводитьСообщение - Булево - Признак необходимости формировать сообщения пользователю.
// 
// Возвращаемое значение:
//  Структура - Результат проверки номеров:
//  * Ошибка - Булево - Признак наличия ошибки
//  * НеУникальныеПоля - Массив - Представления полей с неуникальными значениями.
//
Функция НомераАвтомобиляУникальны(Автомобиль, ПроверяемыеПоля=Неопределено, ВыводитьСообщение=Истина) Экспорт
	
	РезультатПроверки = Новый Структура("Ошибка,НеУникальныеПоля", Ложь, Новый Массив());
	
	Если Автомобиль.ЭтоГруппа Тогда
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	ПроверятьVIN = ЗначениеЗаполнено(Автомобиль.VIN);
	ПроверятьОригинальныйVIN = ЗначениеЗаполнено(Автомобиль.ОригинальныйVIN);
	
	Если ТипЗнч(ПроверяемыеПоля) = Тип("Строка") Тогда
		
		ПроверяемыеПоля = СтрРазделить(ПроверяемыеПоля, ",");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроверяемыеПоля) И ТипЗнч(ПроверяемыеПоля) = Тип("Массив") Тогда
		
		ПроверятьVIN = ПроверятьVIN И (ПроверяемыеПоля.Найти("VIN") <> Неопределено);
		ПроверятьОригинальныйVIN = ПроверятьОригинальныйVIN И (ПроверяемыеПоля.Найти("ОригинальныйVIN") <> Неопределено);
		
	КонецЕсли;
	
	Если НЕ(ПроверятьVIN ИЛИ ПроверятьОригинальныйVIN) Тогда
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	ШаблонЗапроса =
	"ВЫБРАТЬ //РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Автомобили.Ссылка КАК Автомобиль,
	|	(Автомобили.VIN = &VIN ИЛИ Автомобили.ОригинальныйVIN = &VIN) КАК VINНеУникален,
	|	(Автомобили.VIN = &ОригинальныйVIN ИЛИ Автомобили.ОригинальныйVIN = &ОригинальныйVIN) КАК ОригинальныйVINНеУникален
	|ИЗ
	|	Справочник.Автомобили КАК Автомобили
	|ГДЕ
	|	Автомобили.Ссылка <> &Ссылка";
	
	Разделитель =
	"
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ЧастиЗапроса = Новый Массив();
	
	Если ПроверятьVIN Тогда
		
		ЧастиЗапроса.Добавить(ШаблонЗапроса + " И (Автомобили.VIN = &VIN ИЛИ Автомобили.ОригинальныйVIN = &VIN)");
		
	КонецЕсли;
	
	Если ПроверятьОригинальныйVIN Тогда
		
		ЧастиЗапроса.Добавить(ШаблонЗапроса
			+ " И (Автомобили.VIN = &ОригинальныйVIN ИЛИ Автомобили.ОригинальныйVIN = &ОригинальныйVIN)");
		
	КонецЕсли;
	
	ЧастиЗапроса[0] = СтрЗаменить(ЧастиЗапроса[0], "//РАЗРЕШЕННЫЕ ПЕРВЫЕ 1", "РАЗРЕШЕННЫЕ ПЕРВЫЕ 1");
	
	Запрос = Новый Запрос(СтрСоединить(ЧастиЗапроса, Разделитель));
	Запрос.УстановитьПараметр("Ссылка", Автомобиль.Ссылка);
	Запрос.УстановитьПараметр("VIN", Автомобиль.VIN);
	Запрос.УстановитьПараметр("ОригинальныйVIN", Автомобиль.ОригинальныйVIN);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	РезультатПроверки.Ошибка = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если
			Выборка.VINНеУникален
			И ПроверятьVIN
			И РезультатПроверки.НеУникальныеПоля.Найти("vin") = Неопределено
		Тогда
			
			РезультатПроверки.НеУникальныеПоля.Добавить("vin");
			
		КонецЕсли;
		
		Если
			Выборка.ОригинальныйVINНеУникален
			И ПроверятьОригинальныйVIN
			И РезультатПроверки.НеУникальныеПоля.Найти("оригинальный vin") = Неопределено
		Тогда
			
			РезультатПроверки.НеУникальныеПоля.Добавить("оригинальный vin");
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если ВыводитьСообщение Тогда
		
		ТекстРеквизиты = НСтр("ru = 'Реквизиты'");
		
		Если РезультатПроверки.НеУникальныеПоля.Количество() < 2 Тогда
			
			ТекстРеквизиты = НСтр("ru = 'Реквизит'");
			
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='%1 ""%2"" не уникален.'"),
				ТекстРеквизиты,
				СтрСоединить(РезультатПроверки.НеУникальныеПоля, ", ")
			)
		);
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Функция ищет в автомобиле дополнительный реквизит "Номенклатура"
// 
// Параметры:
//  АвтомобильДляПоиска - СправочникСсылка.Автомобили - Автомобиль для поиска номенклатуры.
//  НоменклатураАвтомобиль - СправочникСсылка.Номенклатура - Номенклатура автомобиля по умолчанию.
//
// Возвращаемое значение:
//  СправочникСсылка.Автомобили - Ссылка на автомобиль.
//
Функция НоменклатураАвтомобиля(АвтомобильДляПоиска, НоменклатураАвтомобиль) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Автомобили)
	|	И ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО ""%Номенклатура%""
	|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|	И ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО ""%Номенклатура%""
	|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Автомобиль = ?(ЗначениеЗаполнено(Выборка.Ссылка),
			УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(Выборка.Ссылка, АвтомобильДляПоиска),
			НоменклатураАвтомобиль
		);
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Автомобиль = ?(ЗначениеЗаполнено(Автомобиль), Автомобиль, НоменклатураАвтомобиль);
	
	Возврат Автомобиль;
	
КонецФункции

// Выполняет обновление свойства автомобиля
//
// Параметры:
//  Свойство - Строка - имя свойства автомобиля;
//  Значение - Произвольный - новое значение свойства;
//  Автомобиль - СправочникСсылка.Автомобили - обновляемый автомобиль.
//
Процедура ОбновитьСвойствоАвтомобиля(Свойство, Значение, Автомобиль) Экспорт
	
	Обработки.ПомощникВРаботеСАвтомобилем
		.Создать()
		.ДляАвтомобиля(Автомобиль)
		.ДляСвойства(Свойство)
		.БезПроверок()
		.ЗаписатьЗначение(Значение);
	
КонецПроцедуры

// Получение результата запроса с параметрами расчета себестоимости автомобиля
//
// Параметры:
//  Автомобили	 - Справочники.Автомобили	 - Автомобили, для котрых вычисляется себестоимость.
//  НаДату		 - Дата						 - Дата, на которую определяем себестоимость.
// 
// Возвращаемое значение:
//  РезультатЗапроса - полученный запрос
//
Функция СебестоимостьАвтомобиля(Автомобили, НаДату) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	МАКСИМУМ(ОстаткиАвтомобилей.Период) КАК Период
	|ПОМЕСТИТЬ втПоследнийПриход
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Автомобиль В(&Автомобили)
	|	И ОстаткиАвтомобилей.Период <= &Момент
	|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТИПЗНАЧЕНИЯ(ОстаткиАвтомобилей.Регистратор) В (ТИП(Документ.ВводОстатковАвтомобилей), ТИП(Документ.ПоступлениеАвтомобилей))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиАвтомобилей.Автомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоследнийПриход.Автомобиль КАК Автомобиль,
	|	втПоследнийПриход.Период КАК Период
	|ПОМЕСТИТЬ втАвтомобили
	|ИЗ
	|	втПоследнийПриход КАК втПоследнийПриход
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|		ПО втПоследнийПриход.Автомобиль = ОстаткиАвтомобилей.Автомобиль
	|			И втПоследнийПриход.Период = ОстаткиАвтомобилей.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль,
	|	АвтомобилиСрезПоследних.Значение КАК ПриобретенУФизЛица
	|ПОМЕСТИТЬ ПриобретеныУФизЛиц
	|ИЗ
	|	РегистрСведений.Автомобили.СрезПоследних(
	|			&Момент,
	|			ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица)
	|				И Автомобиль В (&Автомобили)) КАК АвтомобилиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАвтомобили.Автомобиль КАК Автомобиль,
	|	СУММА(ОстаткиАвтомобилей.Сумма) КАК Сумма,
	|	СУММА(ОстаткиАвтомобилей.СуммаУпр) КАК СуммаУпр,
	|	ЕСТЬNULL(ПриобретеныУФизЛиц.ПриобретенУФизЛица, ЛОЖЬ) КАК ПриобретенУФизЛица
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАвтомобили КАК втАвтомобили
	|		ПО ОстаткиАвтомобилей.Автомобиль = втАвтомобили.Автомобиль
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПриобретеныУФизЛиц КАК ПриобретеныУФизЛиц
	|		ПО ОстаткиАвтомобилей.Автомобиль = ПриобретеныУФизЛиц.Автомобиль
	|ГДЕ
	|	ОстаткиАвтомобилей.Период МЕЖДУ втАвтомобили.Период И &Момент
	|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТИПЗНАЧЕНИЯ(ОстаткиАвтомобилей.Регистратор) В (&ТипДокументаПриход)
	|
	|СГРУППИРОВАТЬ ПО
	|	втАвтомобили.Автомобиль,
	|	ЕСТЬNULL(ПриобретеныУФизЛиц.ПриобретенУФизЛица, ЛОЖЬ)");
	
	Запрос.УстановитьПараметр("Момент", НаДату);
	Запрос.УстановитьПараметр("Автомобили", Автомобили);
	ТипДокументаПриход = Новый Массив;
	ТипДокументаПриход.Добавить(Тип("ДокументСсылка.ВводОстатковАвтомобилей"));
	ТипДокументаПриход.Добавить(Тип("ДокументСсылка.ПоступлениеАвтомобилей"));
	ТипДокументаПриход.Добавить(Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей"));
	ТипДокументаПриход.Добавить(Тип("ДокументСсылка.КорректировкаДвижений"));
	Запрос.УстановитьПараметр("ТипДокументаПриход", ТипДокументаПриход);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ДополнитьСебестоимостьюАвтомобилей(Автомобили, НаДату, ИмяРеквизитаАвтомобиля = "Номенклатура") Экспорт
	
	// Дополним таблицу себестоимостью по регистру остатки автомобили
	РезультатЗапроса = СебестоимостьАвтомобиля(Автомобили.ВыгрузитьКолонку("Номенклатура"), НаДату);
	СебестоимостьАвтомобилей = РезультатЗапроса.Выгрузить();
	
	Автомобили.Колонки.Добавить("СебестоимостьРегл", Новый ОписаниеТипов("Число"));
	Автомобили.Колонки.Добавить("СебестоимостьУпр", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаСебестоимости Из СебестоимостьАвтомобилей Цикл
		
		Если НЕ СтрокаСебестоимости.ПриобретенУФизЛица Тогда
			Продолжить;
		КонецЕсли;
		
		УсловиеОтбора = Новый Структура(ИмяРеквизитаАвтомобиля, СтрокаСебестоимости.Автомобиль);
		НайденныеСтроки = Автомобили.НайтиСтроки(УсловиеОтбора);
		
		Для Каждого СтрокаАвтомобиля Из НайденныеСтроки Цикл
			
			СтрокаАвтомобиля.СебестоимостьРегл = СтрокаСебестоимости.Сумма;
			СтрокаАвтомобиля.СебестоимостьУпр = СтрокаСебестоимости.СуммаУпр;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняем поиск ссылок на автомобили в объектах конфигурации и автомобили без ссылок помечаются на удаление.
// Данная операция нужна для оптимизация количества ссылок на автомобили.
// Перед удаление автомобиля может потребоваться вручную удалить связанные объекты. Например, непроведенные документы.
// 
// Объекты поиска использывания ссылок:
//  * Документы.ЗаказНаряд
//  * Документы.ЗаявкаНаРемонт
//  * Документы.ОптовыйЗаказКлиентаНаАвтомобили
//  * Документы.ОптовыйЗаказПоставщикуНаАвтомобили
//
//  * РегистрыСведений.АрендаСостоянияАвтомобилей
//  * РегистрыСведений.ОперацииПрослеживаемыхТоваров
//  * РегистрыСведений.СтатусыКомпенсацийПоМаркетинговымПрограммам
//
//  * РегистрыНакопления.АвтомобилиДляТестДрайва
//  * РегистрыНакопления.АвтомобилиОтданные
//  * РегистрыНакопления.ВыработкаСотрудников
//  * РегистрыНакопления.ЗаказыАвтомобилей
//  * РегистрыНакопления.ЗаказыПоставщикамНаАвтомобили
//  * РегистрыНакопления.КомпенсацииПоМаркетинговымПрограммам
//  * РегистрыНакопления.КомплектацияАвтомобилей
//  * РегистрыНакопления.ОстаткиАвтомобилей
//  * РегистрыНакопления.ОстаткиАвтомобилейОрдерныйСклад
//  * РегистрыНакопления.ПартииТоваровОтданные
//  * РегистрыНакопления.Продажи
//  * РегистрыНакопления.ПродажиАвтомобилей
//  * РегистрыНакопления.ПрочиеАктивыВЭксплуатации
//  * РегистрыНакопления.РеализованныеАвтомобили
//  * РегистрыНакопления.РеализованныеТовары
//
Процедура ПоискИУдалениеНеиспользуемыхАвтомобилей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПоискИУдалениеНеиспользуемыхАвтомобилей);
	
	Порция = Неопределено;
	Порция = ПорцияАвтомобилейДляПроверки(Порция);
	
	Пока Порция.Автомобили.Количество() > 0 Цикл
		
		ПочтиНеиспользуемыеАвтомобили = ПочтиНеиспользуемыеАвтомобили(Порция.Автомобили);
		
		ПометитьАвтомобилиНаУдаление(ПочтиНеиспользуемыеАвтомобили);
		
		//@skip-check query-in-loop
		// Цикл тут специально, для ограничения количества записей обрабатываемых за один проход
		Порция = ПорцияАвтомобилейДляПроверки(Порция);
		
	КонецЦикла;
	
КонецПроцедуры

#Область Обновление

Процедура ВыполнитьЗаполнениеАвтомобильПриобретенУФизЛица(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиАвтомобилей.Период КАК Период,
	               |	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	               |	ОстаткиАвтомобилей.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ПоступленияОтФизЛиц
	               |ИЗ
	               |	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	               |ГДЕ
	               |	ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ПоступлениеАвтомобилей
	               |	И ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ПоступлениеАвтомобилей).Контрагент.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ЧастноеЛицо)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОстаткиАвтомобилей.Период,
	               |	ОстаткиАвтомобилей.Автомобиль,
	               |	ОстаткиАвтомобилей.Регистратор
	               |ИЗ
	               |	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	               |ГДЕ
	               |	ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.ВводОстатковАвтомобилей
	               |	И ВЫРАЗИТЬ(ОстаткиАвтомобилей.Регистратор КАК Документ.ВводОстатковАвтомобилей).Контрагент.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ЧастноеЛицо)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступленияОтФизЛиц.Период КАК Период,
	               |	ПоступленияОтФизЛиц.Автомобиль КАК Автомобиль,
	               |	ПоступленияОтФизЛиц.Регистратор КАК Регистратор
	               |ИЗ
	               |	ПоступленияОтФизЛиц КАК ПоступленияОтФизЛиц
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПоступленияОтФизЛиц.Регистратор КАК Ссылка
	               |ИЗ
	               |	ПоступленияОтФизЛиц КАК ПоступленияОтФизЛиц
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПоступлениеАвтомобилей.Ссылка
	               |ИЗ
	               |	Документ.ПоступлениеАвтомобилей КАК ПоступлениеАвтомобилей
	               |ГДЕ
	               |	НЕ ПоступлениеАвтомобилей.Проведен
	               |	И ПоступлениеАвтомобилей.Контрагент.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ЧастноеЛицо)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВводОстатковАвтомобилей.Ссылка
	               |ИЗ
	               |	Документ.ВводОстатковАвтомобилей КАК ВводОстатковАвтомобилей
	               |ГДЕ
	               |	НЕ ВводОстатковАвтомобилей.Проведен
	               |	И ВводОстатковАвтомобилей.Контрагент.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ЧастноеЛицо)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиАвтомобилей.Регистратор КАК Ссылка,
	               |	ПоступленияОтФизЛиц.Автомобиль КАК Автомобиль
	               |ИЗ
	               |	ПоступленияОтФизЛиц КАК ПоступленияОтФизЛиц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	               |		ПО ПоступленияОтФизЛиц.Автомобиль = ОстаткиАвтомобилей.Автомобиль
	               |			И ПоступленияОтФизЛиц.Регистратор = ОстаткиАвтомобилей.Партия
	               |			И (ОстаткиАвтомобилей.Регистратор ССЫЛКА Документ.РеализацияАвтомобилей)
	               |ГДЕ
	               |	НЕ ОстаткиАвтомобилей.Регистратор ЕСТЬ NULL
	               |ИТОГИ ПО
	               |	Ссылка";
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаАвтомобилей = ПакетЗапросов[1].Выбрать();
	
	Пока ВыборкаАвтомобилей.Следующий() Цикл
		
		Если ТипЗнч(ВыборкаАвтомобилей.Регистратор) = Тип("ДокументСсылка.ВводОстатковАвтомобилей") Тогда
			ИсточникИнформации = Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ВводОстатковАвтомобилей;
		Иначе
			ИсточникИнформации = Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ПоступлениеАвтомобиля;
		КонецЕсли;
		
		// Запишем признак в регистр характеристик автомобиля
		Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
			ВыборкаАвтомобилей.Автомобиль,
			Истина,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица,
			ВыборкаАвтомобилей.Период,
			ИсточникИнформации);
		
	КонецЦикла;
	
	ВыборкаДокументов = ПакетЗапросов[2].Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументАвтомобиля = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ЕстьАвтомобилиОтФизЛиц = Ложь;
		
		Для Каждого СтрокаАвтомобиля Из ДокументАвтомобиля.Автомобили Цикл
			
			Если СтрокаАвтомобиля.ПриобретенУФизЛица Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаАвтомобиля.ПриобретенУФизЛица = Истина;
			ЕстьАвтомобилиОтФизЛиц = Истина;
			
		КонецЦикла;
		
		Если Не ЕстьАвтомобилиОтФизЛиц Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументАвтомобиля.ОбменДанными.Загрузка = Истина;
		
		Попытка
			
			ДокументАвтомобиля.Записать();
			
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У документа ""%1"" не удалось установить признак приобретения у физ. лица автомобиля по причине:
						|%2'"),
					ВыборкаДокументов.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				ДокументАвтомобиля.Ссылка.Метаданные(),
				"ПоступлениеАвтомобилей",
				ТекстСообщения
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
	// Обновим реализацию автомобилей
	ВыборкаДокументовРеализации = ПакетЗапросов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументовРеализации.Следующий() Цикл
		
		РеализацияАвтомобилей = ВыборкаДокументовРеализации.Ссылка.ПолучитьОбъект();
		АвтомобилиРеализации = ВыборкаДокументовРеализации.Выбрать();
		ЕстьАвтомобилиОтФизЛиц = Ложь;
		
		Пока АвтомобилиРеализации.Следующий() Цикл
			
			УсловиеОтбора = Новый Структура("Автомобиль", АвтомобилиРеализации.Автомобиль);
			СтрокиАвтомобилей = РеализацияАвтомобилей.Автомобили.НайтиСтроки(УсловиеОтбора);
			
			Для Каждого СтрокаАвтомобиля Из СтрокиАвтомобилей Цикл
				
				Если СтрокаАвтомобиля.ПриобретенУФизЛица Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаАвтомобиля.ПриобретенУФизЛица = Истина;
				ЕстьАвтомобилиОтФизЛиц = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ЕстьАвтомобилиОтФизЛиц Тогда
			Продолжить;
		КонецЕсли;
		
		РеализацияАвтомобилей.ОбменДанными.Загрузка = Истина;
		
		Попытка
			
			РеализацияАвтомобилей.Записать();
			
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У документа ""%1"" не удалось установить признак приобретения у физ. лица автомобиля по причине:
						|%2'"),
					ВыборкаДокументовРеализации.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				ВыборкаДокументовРеализации.Ссылка.Метаданные(),
				"РеализацияАвтомобилей",
				ТекстСообщения
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает форматную строку года выпуска автомобиля
Функция ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Объект) Экспорт
	
	ФорматПредставленияГодаВыпускаАвтомобиля =  ПраваИНастройкиПользователя.Значение("ФорматПредставленияГодаВыпускаАвтомобиля");
	ФорматПредставления = Метаданные.Перечисления.ФорматПредставленияГодаВыпускаАвтомобиля.ЗначенияПеречисления[Перечисления.ФорматПредставленияГодаВыпускаАвтомобиля.Индекс(ФорматПредставленияГодаВыпускаАвтомобиля)];
	
	Возврат ФорматПредставления.Комментарий;
	
КонецФункции // ПолучитьФорматПредставленияГодаВыпускаАвтомобиля() 

// Формирует структуру с данными объекта, которые необходимы для заполнения шаблона
Функция ПолучитьДанныеОбъектаПечатиШаблонаЗаказНаряда(ДокументыПечати) Экспорт
	
	ДанныеПечати = Новый Массив;
	
	Для Каждого Документ Из ДокументыПечати Цикл
		
		ДатаПечатная = ?(НЕ ЗначениеЗаполнено(Документ.ДатаЗакрытия),Документ.ДатаСоздания,Документ.ДатаЗакрытия);
		
		ДанныеОбъекта = Новый Структура;
		
		ДанныеОбъекта.Вставить("Организация", Документ.Организация);
		ДанныеОбъекта.Вставить("ФирмаПолноеНаименование",	УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация));
		
		ФирмаАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.ПодразделениеКомпании, Справочники.ВидыКонтактнойИнформации.ФактАдресПодразделенияКомпании, ДатаПечатная);
		Если ПустаяСтрока(СокрЛП(ФирмаАдресПочтовый)) Тогда
			ФирмаАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Организация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ДатаПечатная);
		КонецЕсли;
		ДанныеОбъекта.Вставить("ФирмаАдресПочтовый", ФирмаАдресПочтовый);
		
		ФирмаАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.ПодразделениеКомпании, Справочники.ВидыКонтактнойИнформации.ЮрАдресПодразделенияКомпании, ДатаПечатная);
		Если ПустаяСтрока(СокрЛП(ФирмаАдресЮридический)) Тогда
			ФирмаАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ДатаПечатная);
		КонецЕсли;
		ДанныеОбъекта.Вставить("ФирмаАдресЮридический", ФирмаАдресЮридический);
		
		ФирмаТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.ПодразделениеКомпании, Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияКомпании, ДатаПечатная);
		Если ПустаяСтрока(СокрЛП(ФирмаТелефоны)) Тогда
			ФирмаТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ДатаПечатная);
		КонецЕсли;
		ДанныеОбъекта.Вставить("ФирмаТелефоны", ФирмаТелефоны);
		
		Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		ДанныеОбъекта.Вставить("НомерДок", УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ));
		ДанныеОбъекта.Вставить("ДатаДок", Формат(ДатаПечатная, "ДЛФ=DD"));
		ДанныеОбъекта.Вставить("ДатаДок2", Формат(ДатаПечатная, "ДЛФ=DD"));
		ДанныеОбъекта.Вставить("ДатаДок3", Формат(ДатаПечатная, "ДЛФ=DD"));
		ДанныеОбъекта.Вставить("Заказчик", Заказчик);
		ДанныеОбъекта.Вставить("ЗаказчикПолноеНаименование", УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик));
		ДанныеОбъекта.Вставить("ЗаказчикАдресПочтовый", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ДатаПечатная));
		ДанныеОбъекта.Вставить("ЗаказчикТелефоны", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ДатаПечатная));
		ДанныеОбъекта.Вставить("Контрагент", Документ.Контрагент);
		ДанныеОбъекта.Вставить("КонтрагентПолноеНаименование", УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент));
		ДанныеОбъекта.Вставить("КонтрагентИНН", Документ.Контрагент.ИНН);
		ДанныеОбъекта.Вставить("КонтрагентАдресЮридический", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ДатаПечатная));
		ДанныеОбъекта.Вставить("КонтрагентТелефоны", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ДатаПечатная));
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		ДанныеОбъекта.Вставить("Автомобиль", Автомобиль);
		ДанныеОбъекта.Вставить("АвтомобильКод", Автомобиль.VIN);
		ДанныеОбъекта.Вставить("АвтомобильМодель", Автомобиль.Модель);
		ДанныеОбъекта.Вставить("АвтомобильГодВыпуска", Формат(Автомобиль.ГодВыпуска, ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ)));
		ДанныеОбъекта.Вставить("АвтомобильНомерДвигателя", Автомобиль.НомерДвигателя);
		ДанныеОбъекта.Вставить("АвтомобильНомерШасси", Автомобиль.НомерШасси);
		ДанныеОбъекта.Вставить("АвтомобильНомерКузова", Автомобиль.НомерКузова);
		ДанныеОбъекта.Вставить("АвтомобильЦвет", Автомобиль.Цвет);
		ДанныеОбъекта.Вставить("АвтомобильГосНомер", Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,Документ.ДатаСоздания));
		ДанныеОбъекта.Вставить("АвтомобильТехПаспорт", СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт,Документ.ДатаСоздания)));
		ДанныеОбъекта.Вставить("АвтомобильПробег", СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,Документ.ДатаСоздания)));
		
		ДанныеОбъекта.Вставить("Мастер", Документ.Мастер);
		ДанныеОбъекта.Вставить("МастерПолноеНаименование", Документ.Мастер.Наименование);
		ДанныеОбъекта.Вставить("Заказчик", Заказчик);
		ДанныеОбъекта.Вставить("ЗаказчикПолноеНаименование", УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик));
		ДанныеОбъекта.Вставить("Контрагент", Документ.Контрагент);
		ДанныеОбъекта.Вставить("КонтрагентПолноеНаименование", УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент));
		ДанныеОбъекта.Вставить("Автомобиль", Автомобиль);
		
		
		ДанныеПечати.Добавить(ДанныеОбъекта);
	КонецЦикла;
	
	Возврат ДанныеПечати;
	
КонецФункции

// Установить формат представления года выпуска автомобиля
//
// Параметры:
//  Форма       - УправляемаяФорма - Форма на которой располагается элемент года выпуска
//  СуффиксПоля - Строка           - Суффикс имени поля ввода года выпуска
//
Процедура УстановитьФорматПредставленияГодаВыпускаАвтомобиля(Форма, СуффиксПоля = "") Экспорт
	
	ИмяПоляГодаВыпуска   = "ГодВыпуска" + СуффиксПоля;
	ПолеВводаГодаВыпуска = Форма.Элементы.Найти(ИмяПоляГодаВыпуска);
	
	Если ПолеВводаГодаВыпуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получим формат
	Формат = ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Неопределено);
	
	ПолеВводаГодаВыпуска.Формат               = Формат;
	ПолеВводаГодаВыпуска.ФорматРедактирования = Формат;
	
КонецПроцедуры

// процедура выполняет контроль введенного ГОС Номера автомобиля
//
// Параметры:
//  ГосНомер - Строка - введенный в строке редактирования ГосНомер;
//	ВыводитьСообщение - Булево - 	Истина - вывод сообщений пользователю,
//									Ложь - отказ от вывода сообщений.
//
// Возвращаемое значение:
//  НаличиеОшибокВПроверяемойСтроке - Булево - 	Истина, если ошибки были найдены, 
//											    Ложь, если ошибок не найдено.
//
Функция ПроверитьКорректностьГосНомера(Объект, ГосНомер, ВыводитьСообщения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДопустимыеСимволы = Константы.ДопустимыеСимволыГосНомера.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	КоличествоСимволовВНомере = СтрДлина(ГосНомер);
	НаличиеОшибокВПроверяемойСтроке = Ложь;
	
	Если СтрДлина(ДопустимыеСимволы) = 0 Тогда
		Возврат НаличиеОшибокВПроверяемойСтроке;
	КонецЕсли;
	
	МассивНеверныхСимволов = Новый Массив;
	
	Для Сч = 1 По КоличествоСимволовВНомере Цикл
		ПроверяемыйСимвол = Сред(ГосНомер, Сч, 1);
		НайденаОшибкаВСимволе = Найти(ДопустимыеСимволы, ПроверяемыйСимвол);
		Если НайденаОшибкаВСимволе < 1 И МассивНеверныхСимволов.Найти(ПроверяемыйСимвол) = Неопределено Тогда
			// пробелы
			Если ПроверяемыйСимвол = " " Тогда
				МассивНеверныхСимволов.Добавить("<пробел>");
			// табуляции
			ИначеЕсли ПроверяемыйСимвол = "	" Тогда
				МассивНеверныхСимволов.Добавить("<табуляция>");
			// другие символы
			Иначе
				МассивНеверныхСимволов.Добавить(ПроверяемыйСимвол);
			КонецЕсли;
			НаличиеОшибокВПроверяемойСтроке = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НаличиеОшибокВПроверяемойСтроке И ВыводитьСообщения Тогда
		ОбщегоНазначения.СообщитьПользователю (
			?(МассивНеверныхСимволов.Количество() = 1, "Символ <", "Символы <") 
				+ СтрСоединить(МассивНеверныхСимволов, ">, <")
				+ "> запрещено использовать в Гос Номере",
			Объект.Ссылка,
			"ГосНомер"
		);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Допустимые символы для записи Гос Номера:'") + Символы.НПП + ДопустимыеСимволы);
	КонецЕсли;
	
	Возврат НаличиеОшибокВПроверяемойСтроке;
	
КонецФункции

// Определяет является ли заполнение vin обязательным для автомобиля.
//
// Параметры:
//  Автомобиль - СправочникСсылка.Автомобили, ДанныеФормыОбъект - Автомобиль,
//    для которого определяется необходимость vin.
//
// Возвращаемое значение:
//  Булево - Истина - vin обязательный, Ложь - vin не обязательный.
//
Функция VINОбязательный(Автомобиль) Экспорт
	
	Возврат НЕ  ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.РазрешитьПустойVIN)
		И (Автомобиль.Пустая() ИЛИ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автомобиль, "VIN")));
	
КонецФункции // VINОбязательный()

// Определяет является ли заполнение номера шасси обязательным для автомобиля.
//
// Параметры:
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль,
//    для которого определяется необходимость заполнения номера шасси.
//
// Возвращаемое значение:
//  Булево - Истина - обязательный, Ложь - не обязательный.
//
Функция НомерШассиОбязательный(Автомобиль) Экспорт
	
	Возврат НЕ  ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.РазрешитьПустойНомерШасси)
		И (Автомобиль.Пустая() ИЛИ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автомобиль, "НомерШасси")));
	
КонецФункции // НомерШассиОбязательный()

// Возвращает описание типа принимаемого значения дополнительной информации автомобиля.
//
// Параметры:
//  ВидЗначения - ПеречислениеСсылка.ДополнительнаяИнформацияАвтомобилей - Вид значения
//  																		дополнительной информации автомобиля.
//
Функция ОписаниеТипаПринимаемогоЗначения(ВидЗначения) Экспорт
	
	ОписаниеТипа = Неопределено;
	
	Если ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин Тогда
		
		ДоступныеТипы = Новый Массив;
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Организации"));
		ОписаниеТипа = Новый ОписаниеТипов(ДоступныеТипы);
		
	ИначеЕсли ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер Тогда
		
		ОписаниеТипа = Новый ОписаниеТипов("Строка");
		
	ИначеЕсли ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег Тогда
		
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		
	ИначеЕсли ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля Тогда
		
		ОписаниеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ВидАвтомобиля");
		
	ИначеЕсли ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт Тогда
		
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодтверждающиеДокументы");
		
	ИначеЕсли ВидЗначения = Перечисления.ДополнительнаяИнформацияАвтомобилей.СвидетельствоОРегистрацииТС Тогда
		
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодтверждающиеДокументы");
		
	КонецЕсли;
	
	Возврат ОписаниеТипа;
	
КонецФункции

#Область ПриобретениеАвтомобиляУФизЛица

Процедура ЗаполнитьПризнакПриобретенияУФизЛица(Объект, Строка) Экспорт
	
	Если Не ЗначениеЗаполнено(Строка.Автомобиль) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПоступлениеАвтомобиляОтФизЛица(Объект) Тогда
		Строка.ПриобретенУФизЛица = Истина;
		Возврат;
	КонецЕсли;
	
	Строка.ПриобретенУФизЛица = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
		Строка.Автомобиль,
		Перечисления.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица,
		Объект.Дата);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиПриобретенияАвтомобилейУФизЛица(Объект) Экспорт
	
	ЭтоПоступлениеАвтомобиляОтФизЛица = ЭтоПоступлениеАвтомобиляОтФизЛица(Объект);
	
	Для Каждого СтрокаАвтомобиля Из Объект.Автомобили Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаАвтомобиля.Автомобиль) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЭтоПоступлениеАвтомобиляОтФизЛица Тогда
			
			СтрокаАвтомобиля.ПриобретенУФизЛица = Истина;
			Продолжить;
			
		КонецЕсли;
		
		СтрокаАвтомобиля.ПриобретенУФизЛица = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
			СтрокаАвтомобиля.Автомобиль,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица,
			Объект.Дата);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПоступлениеАвтомобиляОтФизЛица(Объект)
	
	ЭтоПоступление = ЭтоПоступлениеАвтомобиля(Объект.Ссылка);
	
	Если Не ЭтоПоступление ИЛИ Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФормаСобственностиПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ФормаСобственности");
	
	Возврат ФормаСобственностиПоставщика = Перечисления.ФормыСобственности.ЧастноеЛицо;
	
КонецФункции

Функция ЭтоПоступлениеАвтомобиля(Объект)
	
	ДокументыПоступления = Новый Массив();
	ДокументыПоступления.Добавить(Тип("ДокументСсылка.ПоступлениеАвтомобилей"));
	ДокументыПоступления.Добавить(Тип("ДокументОбъект.ПоступлениеАвтомобилей"));
	ДокументыПоступления.Добавить(Тип("ДокументСсылка.ВводОстатковАвтомобилей"));
	ДокументыПоступления.Добавить(Тип("ДокументОбъект.ВводОстатковАвтомобилей"));
	
	Возврат ДокументыПоступления.Найти(ТипЗнч(Объект)) <> Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПустойРезультатПроверитьСервиснуюКампанию()
	
	ПустаяКоллекция = Новый ТаблицаЗначений;
	ПустаяКоллекция.Колонки.Добавить(
		"СервиснаяКампания",
		Новый ОписаниеТипов("СправочникСсылка.СервисныеКампании"),
		НСтр("ru = 'Сервисная кампания'")
	);
	ПустаяКоллекция.Колонки.Добавить(
		"ДокументВыполнения",
		Новый ОписаниеТипов("ДокументСсылка.ЗаказНаряд"),
		НСтр("ru = 'Документ выполнения'")
	);
	ПустаяКоллекция.Колонки.Добавить(
		"ВидИсточника",
		ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный),
		НСтр("ru = 'Вид источника'")
	);
	
	ОписаниеТипаДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	ПустаяКоллекция.Колонки.Добавить("ДатаНачала", ОписаниеТипаДата, "ДатаНачала");
	ПустаяКоллекция.Колонки.Добавить("ДатаОкончания", ОписаниеТипаДата, "ДатаОкончания");
	ПустаяКоллекция.Колонки.Добавить("ДатаВыполнения", ОписаниеТипаДата, "ДатаВыполнения");
	Возврат ПустаяКоллекция;
	
КонецФункции

Функция ПорцияАвтомобилейДляПроверки(Знач ПредыдущаяПорция = Неопределено)
	
	Если ПредыдущаяПорция = Неопределено Тогда
		
		Результат = Новый Структура("Автомобили, ПоследнийКод", Новый Массив(), Неопределено);
		
	Иначе
		
		Результат = ПредыдущаяПорция;
		Результат.Автомобили.Очистить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Автомобили.Код КАК Код,
		|	Автомобили.Ссылка КАК Автомобиль
		|ИЗ
		|	Справочник.Автомобили КАК Автомобили
		|ГДЕ
		|	НЕ Автомобили.ПометкаУдаления
		|	И Автомобили.VIN = """"
		|	И (&ПоВсемКодам
		|			ИЛИ Автомобили.Код > &Код)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код"
	);
	
	Запрос.УстановитьПараметр("ПоВсемКодам", НЕ ЗначениеЗаполнено(Результат.ПоследнийКод));
	Запрос.УстановитьПараметр("Код", Результат.ПоследнийКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Автомобили.Добавить(Выборка.Автомобиль);
		Результат.ПоследнийКод = Выборка.Код;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПочтиНеиспользуемыеАвтомобили(Знач Автомобили)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СводныйРемонтныйЗаказ.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ ИспользованиеАвтомобилей
		|ИЗ
		|	Документ.СводныйРемонтныйЗаказ КАК СводныйРемонтныйЗаказ
		|ГДЕ
		|	СводныйРемонтныйЗаказ.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаРемонт.Автомобиль
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	ЗаявкаНаРемонт.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОптовыйЗаказКлиентаНаАвтомобилиАвтомобили.Автомобиль КАК Автомобиль
		|ИЗ
		|	Документ.ОптовыйЗаказКлиентаНаАвтомобили.Автомобили КАК ОптовыйЗаказКлиентаНаАвтомобилиАвтомобили
		|ГДЕ
		|	ОптовыйЗаказКлиентаНаАвтомобилиАвтомобили.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Автомобиль КАК Автомобиль
		|ИЗ
		|	Документ.ОптовыйЗаказПоставщикуНаАвтомобили.Автомобили КАК ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили
		|ГДЕ
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АрендаСостоянияАвтомобилей.Автомобиль
		|ИЗ
		|	РегистрСведений.АрендаСостоянияАвтомобилей КАК АрендаСостоянияАвтомобилей
		|ГДЕ
		|	АрендаСостоянияАвтомобилей.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОперацииПрослеживаемыхТоваров.Номенклатура
		|ИЗ
		|	РегистрСведений.ОперацииПрослеживаемыхТоваров КАК ОперацииПрослеживаемыхТоваров
		|ГДЕ
		|	ОперацииПрослеживаемыхТоваров.Номенклатура В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтатусыКомпенсацийПоМаркетинговымПрограммам.Автомобиль
		|ИЗ
		|	РегистрСведений.СтатусыКомпенсацийПоМаркетинговымПрограммам КАК СтатусыКомпенсацийПоМаркетинговымПрограммам
		|ГДЕ
		|	СтатусыКомпенсацийПоМаркетинговымПрограммам.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АвтомобилиДляТестДрайва.Автомобиль
		|ИЗ
		|	РегистрНакопления.АвтомобилиДляТестДрайва КАК АвтомобилиДляТестДрайва
		|ГДЕ
		|	АвтомобилиДляТестДрайва.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АвтомобилиОтданные.Автомобиль
		|ИЗ
		|	РегистрНакопления.АвтомобилиОтданные КАК АвтомобилиОтданные
		|ГДЕ
		|	АвтомобилиОтданные.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыработкаСотрудников.Автомобиль
		|ИЗ
		|	РегистрНакопления.ВыработкаСотрудников КАК ВыработкаСотрудников
		|ГДЕ
		|	ВыработкаСотрудников.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыАвтомобилей.Автомобиль
		|ИЗ
		|	РегистрНакопления.ЗаказыАвтомобилей КАК ЗаказыАвтомобилей
		|ГДЕ
		|	ЗаказыАвтомобилей.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамНаАвтомобили.Автомобиль
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили КАК ЗаказыПоставщикамНаАвтомобили
		|ГДЕ
		|	ЗаказыПоставщикамНаАвтомобили.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КомпенсацииПоМаркетинговымПрограммам.Автомобиль
		|ИЗ
		|	РегистрНакопления.КомпенсацииПоМаркетинговымПрограммам КАК КомпенсацииПоМаркетинговымПрограммам
		|ГДЕ
		|	КомпенсацииПоМаркетинговымПрограммам.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КомплектацияАвтомобилей.Автомобиль
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиАвтомобилей.Автомобиль
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|ГДЕ
		|	ОстаткиАвтомобилей.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиАвтомобилейОрдерныйСклад.Автомобиль
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилейОрдерныйСклад КАК ОстаткиАвтомобилейОрдерныйСклад
		|ГДЕ
		|	ОстаткиАвтомобилейОрдерныйСклад.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПартииТоваровОтданные.Автомобиль
		|ИЗ
		|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
		|ГДЕ
		|	ПартииТоваровОтданные.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Продажи.Автомобиль
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПродажиАвтомобилей.Автомобиль
		|ИЗ
		|	РегистрНакопления.ПродажиАвтомобилей КАК ПродажиАвтомобилей
		|ГДЕ
		|	ПродажиАвтомобилей.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрочиеАктивыВЭксплуатации.Автомобиль
		|ИЗ
		|	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
		|ГДЕ
		|	ПрочиеАктивыВЭксплуатации.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализованныеАвтомобили.Автомобиль
		|ИЗ
		|	РегистрНакопления.РеализованныеАвтомобили КАК РеализованныеАвтомобили
		|ГДЕ
		|	РеализованныеАвтомобили.Автомобиль В(&Автомобили)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализованныеТовары.Автомобиль
		|ИЗ
		|	РегистрНакопления.РеализованныеТовары КАК РеализованныеТовары
		|ГДЕ
		|	РеализованныеТовары.Автомобиль В(&Автомобили)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИспользованиеАвтомобилей.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ ИспользованиеАвтомобилейСвернуто
		|ИЗ
		|	ИспользованиеАвтомобилей КАК ИспользованиеАвтомобилей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Автомобили.Ссылка КАК Автомобиль
		|ПОМЕСТИТЬ АвтомобилиИзСправочника
		|ИЗ
		|	Справочник.Автомобили КАК Автомобили
		|ГДЕ
		|	Автомобили.Ссылка В(&Автомобили)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвтомобилиИзСправочника.Автомобиль КАК Автомобиль
		|ИЗ
		|	АвтомобилиИзСправочника КАК АвтомобилиИзСправочника
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеАвтомобилейСвернуто КАК ИспользованиеАвтомобилейСвернуто
		|		ПО АвтомобилиИзСправочника.Автомобиль = ИспользованиеАвтомобилейСвернуто.Автомобиль
		|ГДЕ
		|	ИспользованиеАвтомобилейСвернуто.Автомобиль ЕСТЬ NULL"
	);
	
	Запрос.УстановитьПараметр("Автомобили", Автомобили);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Автомобиль");
	
КонецФункции

Функция ПометитьАвтомобилиНаУдаление(Знач ПочтиНеиспользуемыеАвтомобили)
	
	// Выполним дополнительную проверку использований уже по всем ссылкам
	ВсеМестаИспользования = ОбщегоНазначения.МестаИспользования(ПочтиНеиспользуемыеАвтомобили);
	ВсеМестаИспользования.Свернуть("Ссылка, ВспомогательныеДанные");
	
	Для каждого АвтомобильСсылка Из ПочтиНеиспользуемыеАвтомобили Цикл
		
		Фильтр = Новый Структура();
		Фильтр.Вставить("Ссылка", АвтомобильСсылка);
		Фильтр.Вставить("ВспомогательныеДанные", Ложь);
		
		МестаИспользования = ВсеМестаИспользования.НайтиСтроки(Фильтр);
		
		Если МестаИспользования.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			АвтомобильОбъект = АвтомобильСсылка.ПолучитьОбъект();
			АвтомобильОбъект.УстановитьПометкуУдаления(Истина);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ПоискИУдалениеНеиспользуемыхАвтомобилей'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Автомобили,
				АвтомобильСсылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти
