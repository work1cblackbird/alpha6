// Общий модуль "А6 автомобили (автосервис,клиент)"

#Область ПрограммныйИнтерфейс

// Открывает отчет история автомобиля с установленным отбором по автомобилю
//
// Параметры:
//	Форма - УправляемаяФорма - Форма владелец отчета
//	Автомобиль - СправочникСсылка.Автомобили - автомобиль для отбора
//
Процедура ОтчетИсторияАвтомобиля(Форма, Автомобиль = Неопределено) Экспорт
	
	Если ТипЗнч(Автомобиль) <> Тип("СправочникСсылка.Автомобили") ИЛИ НЕ ЗначениеЗаполнено(Автомобиль) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("Автомобиль", Автомобиль);
	ПолноеИмяОбъекта = РаботаСФормойКлиентСервер.ПолноеИмяОбъекта(Форма);
	ОтчетОтбор.Вставить("ЭтоЗаказНаряд", ПолноеИмяОбъекта = "Документ.ЗаказНаряд");
	ОтчетОтбор.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму(
		"Отчет.ИсторияАвтомобилей.Форма",
		ОтчетОтбор,
		Форма,
		, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

// Формирование набора документов к печати и выбор печатной формы
//
// Параметры:
//  ОписаниеКоманды - Структура - Команда печати шаблона.
//
// Возвращаемое значение:
//  Неопределено - Возврат одного значения
//
Функция ПечатьШаблонаЗаказНаряда(ОписаниеКоманды) Экспорт
	
	Если ОписаниеКоманды.ОбъектыПечати.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДокументыПечати = АвтомобилиСервер.ПолучитьДанныеОбъектаПечатиШаблонаЗаказНаряда(ОписаниеКоманды.ОбъектыПечати);
	МакетИДанныеОбъекта = УправлениеПечатьюВызовСервера.МакетыИДанныеОбъектовДляПечати("Документ.ЗаказНаряд",
		"ДоговорЗаказНарядШаблон", ДокументыПечати);
	
	Для Каждого Документ Из ДокументыПечати Цикл
		
		НапечататьШаблонЗаказНаряда(Строка(Документ.НомерДок) + Строка(Документ.ДатаДок), МакетИДанныеОбъекта,
			"ДоговорЗаказНарядШаблон", МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
		
	КонецЦикла;
	
КонецФункции // ПечатьШаблонаЗаказНаряда()

// Открывает форму подбора автомобиля
//
// Параметры:
//  Владелец - УправляемаяФорма - Форма владелец подбора
//  ПараметрыОткрытия - Структура - Параметры открытия подбора (См.АвтомобилиКлиент.НовыеПараметрыПодбораАвтомобилей)
//  ОбратныйВызов - ОписаниеОповещения - Обработчик подбора выбранного значения
//
Процедура ОткрытьПодборАвтомобиля(Владелец, ПараметрыОткрытия=Неопределено, ОбратныйВызов=Неопределено) Экспорт
	
	Если ПараметрыОткрытия = Неопределено Тогда
		
		ПараметрыОткрытия = НовыеПараметрыПодбораАвтомобилей();
		
	КонецЕсли;
	
	Если ОбратныйВызов = Неопределено Тогда
		
		ОбратныйВызов = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораАвтомобиля", Владелец);
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборАвтомобиля.Форма", ПараметрыОткрытия, Владелец, Владелец,,, ОбратныйВызов);
	
КонецПроцедуры // ОткрытьПодборАвтомобиля()

// Преднастроенный объект параметров для подбора автомобилей
//
// Возвращаемое значение:
//  Структура - Параметры подбора:
//  * РежимВыбора - Булево - Указывает на используемый режим выбора.
//  * ПодразделениеКомпании - СправочникСсылка.ПодразделенияКомпании - Подразделение для подбора.
//  * ТипЦен - СправочникСсылка.ТипыЦен - Тип цен, для которому ведется расчет цены.
//  * Контекст - Структура - Описание контекста открытия подбора:
//    * Контрагент - СправочникСсылка.Контрагенты, Строка - Клиент для которого подбирается товар;
//    * Телефон - Строка - Телефон клиента;
//    * Документ - ДокументСсылка - Документ из которого открыт подбор.
//  * Отборы - Структура - Отборы для подбора.
//
Функция НовыеПараметрыПодбораАвтомобилей() Экспорт
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ПодразделениеКомпании", Неопределено); 
	ПараметрыПодбора.Вставить("Организация", Неопределено);
	ПараметрыПодбора.Вставить("ТипЦен", Неопределено);
	ПараметрыПодбора.Вставить("Контекст", Новый Структура());
	ПараметрыПодбора.Вставить("Отборы", Новый Структура());
	Возврат ПараметрыПодбора;
	
КонецФункции // НовыеПараметрыПодбораАвтомобилей()

// Выполняет обновление свойства автомобиля
//
// Параметры:
//  Свойство - Строка - имя свойства автомобиля;
//  Значение - Произвольный - новое значение свойства;
//  Автомобиль - СправочникСсылка.Автомобили - обновляемый автомобиль.
//
Процедура ОбновитьСвойствоАвтомобиля(Свойство, Значение, Автомобиль) Экспорт
	
	АвтомобилиВызовСервера.ОбновитьСвойствоАвтомобиля(Свойство, Значение, Автомобиль);
	
КонецПроцедуры

// Вывод вопроса при удалении хозяина фиктивного контрагента "Не определен"
//
// Параметры:
//  Хозяин				 - СправочникСсылка.Контргаенты - Текущий хозяин автомобиля.
//  ОбработчикВопроса	 - ОписаниеОповещения - Обработка ответа на вопрос.
//
Процедура ПоказатьВопросОбОчисткеХозяина(Хозяин, ОбработчикВопроса) Экспорт
	
	НеопределенныйВладелец = ПредопределенноеЗначение("Справочник.Контрагенты.НеОпределен");
	
	Если НЕ ЗначениеЗаполнено(Хозяин) ИЛИ Хозяин = НеопределенныйВладелец Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем текст вопроса
	ТекстВопроса = НСтр("ru = 'Установить неопределенного владельца?'");
	ОбработчикВопроса.ДополнительныеПараметры.Вставить("НеопределенныйВладелец", НеопределенныйВладелец);
	
	// Получаем подтверждение операции от пользователя
	ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнение и вывод печатной формы для каждого документа
//
Процедура НапечататьШаблонЗаказНаряда(ДокументКлюч, МакетИДанныеОбъекта, ИмяМакета, ЛокальныйКаталогФайловПечати)
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументКлюч][ИмяМакета];
	
	Попытка
		Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], "DOC", ИмяМакета);
		ТипМакета = "DOC";
	Исключение
		Попытка
			Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], "ODT", ИмяМакета);
			ТипМакета = "ODT";
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю (НСтр("ru = 'Ошибка при попытке установки соединения. "+Символы.ПС+"Для вывода печатных форм требуется, чтобы на компьютере был установлен пакет Microsoft Office или Open Office.'"));
			Возврат;
		КонецПопытки;
	КонецПопытки;
	
	Если Макет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
		Если ПечатнаяФорма = Неопределено Тогда
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			Возврат;
		КонецЕсли;
		
		// Вывод обычных областей с параметрами
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаДоговора"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ПриложенияУсловия"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ПодвалДоговора"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОбщиеУсловия"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОбщиеУсловияПодвал"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	
КонецПроцедуры // НапечататьШаблонЗаказНаряда()

#КонецОбласти
