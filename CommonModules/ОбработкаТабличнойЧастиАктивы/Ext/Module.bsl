// Общий модуль "Обработка табличной части товары"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ

// Обработчик события возникающего при изменении данных реквизита "Актив" в таблице "Активы".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТабличнойЧасти	- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура АктивПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТабличнойЧасти = "Активы") Экспорт
	
	ЗаполнитьСлужебныеРеквизиты(Объект, Строка, ПараметрыДействия, ИмяТабличнойЧасти);
	
	Если ЕстьРеквизит(Объект, "Количество", ИмяТабличнойЧасти) И ЗначениеЗаполнено(Строка.ПрочийАктив) Тогда
		
		УникальныйНомер = НЕ(Строка.ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецодежда 
			ИЛИ Строка.ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецоснастка 
			ИЛИ Строка.ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Инструменты
			ИЛИ Строка.ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы);
		
		Если ЕстьРеквизит(Объект, "УникальныйНомер", ИмяТабличнойЧасти) Тогда
			Строка.УникальныйНомер = УникальныйНомер;
		КонецЕсли;
		
		Если Строка.Количество = 0 Тогда
			Строка.Количество = 1;
		ИначеЕсли Строка.Количество > 1 И УникальныйНомер Тогда
			Строка.Количество = 1;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Актив ""%1"" учитывается по уникальным номерам. Количество не может превышать 1 единицу.'"),
					Строка.ПрочийАктив
				));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // АктивПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "СтавкаНДС" в таблице "Активы".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТабличнойЧасти	- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТабличнойЧасти = "Активы") Экспорт
	
	Строка.СуммаНДС = Окр((Строка.Сумма* Строка.СтавкаНДС.Ставка)/(100 + Строка.СтавкаНДС.Ставка),2);
	
КонецПроцедуры // СтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Активы".
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  Строка				- СтрокаТабличнойЧасти		- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//  ИмяТабличнойЧасти	- Строка					- Имя таблицы, в которой произошло событие.
//
Процедура СуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено, ИмяТабличнойЧасти = "Активы") Экспорт
	
	Строка.СуммаНДС = Окр((Строка.Сумма* Строка.СтавкаНДС.Ставка)/(100 + Строка.СтавкаНДС.Ставка),2);
	
КонецПроцедуры // СуммаПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ПЕРЕСЧЕТА ТАБЛИЧНОЙ ЧАСТИ

// Обработка выполнения пересчета табличной части "Активы"
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//
Процедура ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия) Экспорт
	
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	
	Если ТребуетсяПересчетЦен Тогда
		// составим список колонок пересчета
		ЕстьСумма               = ЕстьРеквизит(Объект, "Сумма", "Активы");
		ЕстьБалансоваяСтоимость = ЕстьРеквизит(Объект, "БалансоваяСтоимость", "Активы");
		ЕстьАмортизация         = ЕстьРеквизит(Объект, "Амортизация", "Активы");
		ЕстьОстаточнаяСтоимость = ЕстьРеквизит(Объект, "ОстаточнаяСтоимость", "Активы");
		ЕстьСуммаАмортизации    = ЕстьРеквизит(Объект, "СуммаАмортизации", "Активы");
		ЕстьСуммаОбслуживания   = ЕстьРеквизит(Объект, "СуммаОбслуживания", "Активы");
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс * НовыйКурс) = 0 Тогда
			ТекстСообщения = НСтр("ru = 'При пересчете валюты обнаружен нулевой курс валюты.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс = НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		Для Каждого Строка Из Объект.Активы Цикл
			Если ЕстьСумма Тогда
				Строка.Сумма = Окр(Строка.Сумма*КоэффициентСоотношенияКурсов, 2);
				ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).АктивыСуммаПриИзменении(Объект, Строка);
			КонецЕсли;
			
			Если ЕстьБалансоваяСтоимость Тогда
				Строка.БалансоваяСтоимость = Окр(Строка.БалансоваяСтоимость * КоэффициентСоотношенияКурсов, 2);
			КонецЕсли;
			
			Если ЕстьАмортизация Тогда
				Строка.Амортизация = Окр(Строка.Амортизация * КоэффициентСоотношенияКурсов, 2);
			КонецЕсли;
			
			Если ЕстьОстаточнаяСтоимость Тогда
				Строка.ОстаточнаяСтоимость = Окр(Строка.ОстаточнаяСтоимость * КоэффициентСоотношенияКурсов, 2);
			КонецЕсли;
			
			Если ЕстьСуммаАмортизации Тогда
				Строка.СуммаАмортизации = Окр(Строка.СуммаАмортизации * КоэффициентСоотношенияКурсов, 2);
			КонецЕсли;
			
			Если ЕстьСуммаОбслуживания Тогда
				Строка.СуммаОбслуживания = Окр(Строка.СуммаОбслуживания * КоэффициентСоотношенияКурсов, 2);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНИЦИАЛИЗАЦИИ СЛУЖЕБНЫХ РЕКВИЗИТОВ

// Процедура выполняет заполнение реквизитов табличной части "Активы".
//
// Параметры:
//  Объект 			  - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ТекущаяСтрока     - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//  ИмяТабличнойЧасти - Строка - Имя таблицы, в которой произошло событие.
//
Процедура ЗаполнитьСлужебныеРеквизиты(Объект, ТекущаяСтрока = Неопределено, ПараметрыДействия = Неопределено, ИмяТабличнойЧасти = "Активы") Экспорт
	
	ВыводитьБалансовуюСтоимость = ЕстьРеквизит(Объект, "БалансоваяСтоимость", ИмяТабличнойЧасти);
	ВыводитьАмортизацию         = ЕстьРеквизит(Объект, "Амортизация",         ИмяТабличнойЧасти);
	ВыводитьОстаточнуюСтоимость = ЕстьРеквизит(Объект, "ОстаточнаяСтоимость", ИмяТабличнойЧасти);
	ВыводитьМОЛ                 = ЕстьРеквизит(Объект, "МОЛ",                 ИмяТабличнойЧасти);
	ВыводитьТипЭксплуатации     = ЕстьРеквизит(Объект, "ТипЭксплуатации",     ИмяТабличнойЧасти);
	ВыводитьСуммаСписания       = ЕстьРеквизит(Объект, "СуммаСписания",       ИмяТабличнойЧасти) 
				И ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюСуммыСписания");
	ВыводитьУникальныйНомер     = ЕстьРеквизит(Объект, "УникальныйНомер",     ИмяТабличнойЧасти);
	ЕстьКоличество              = ЕстьРеквизит(Объект, "Количество",          ИмяТабличнойЧасти);
	
	ПодразделениеКомпании = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия, "ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	
	Если ТекущаяСтрока = Неопределено Тогда
		МассивАктивов    = Объект[ИмяТабличнойЧасти].Выгрузить().ВыгрузитьКолонку("ПрочийАктив");
		ТаблицаДокумента = Объект[ИмяТабличнойЧасти];
	Иначе
		МассивАктивов    = ТекущаяСтрока.ПрочийАктив;
		ТаблицаДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяСтрока);
	КонецЕсли;
	
	Если ВыводитьБалансовуюСтоимость
		ИЛИ ВыводитьАмортизацию
		ИЛИ ВыводитьОстаточнуюСтоимость
		ИЛИ ВыводитьМОЛ
		ИЛИ ВыводитьТипЭксплуатации Тогда
		
		МоментВремени = ?(Объект.Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.Дата)), Объект.Ссылка.МоментВремени());
		Параметры = Новый Структура;
		Параметры.Вставить("Подразделение", ПодразделениеКомпании);
		Параметры.Вставить("Актив",         МассивАктивов);
		Параметры.Вставить("Момент",        МоментВремени);
		ТаблицаАктивов = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивов(Параметры);
		
		// пересчитаем активы
		ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		Если Объект.ВалютаДокумента = ВалютаРегл Тогда
			Для Каждого СтрокаАктива Из ТаблицаАктивов Цикл
				СтрокаАктива.БалансоваяСтоимость = СтрокаАктива.БалансоваяСтоимостьРегл;
				СтрокаАктива.Амортизация         = СтрокаАктива.АмортизацияРегл;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаАктива Из ТаблицаАктивов Цикл
				СтрокаАктива.БалансоваяСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАктива.БалансоваяСтоимость, ВалютаУпр, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
				СтрокаАктива.Амортизация         = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАктива.Амортизация        , ВалютаУпр, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыводитьСуммаСписания Тогда
		ЗаполнитьСлужебныйРеквизитСуммаСписания(Объект);
	КонецЕсли;
	
	// заполнение данных таблицы или строки
	Для Каждого Строка Из ТаблицаДокумента Цикл
		
		Если ТаблицаАктивов <> Неопределено Тогда
			Активы = ТаблицаАктивов.НайтиСтроки(Новый Структура("Актив", Строка.ПрочийАктив));
			Если Активы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Актив = Активы[0];
			
			// Заполним остатком
			Если ЕстьКоличество И НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = Актив.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыводитьБалансовуюСтоимость Тогда
			Строка.БалансоваяСтоимость = Актив.БалансоваяСтоимость;
		КонецЕсли;
		
		Если ВыводитьАмортизацию Тогда
			Строка.Амортизация = Актив.Амортизация;
		КонецЕсли;
		
		Если ВыводитьОстаточнуюСтоимость И ВыводитьБалансовуюСтоимость И ВыводитьАмортизацию Тогда
			Строка.ОстаточнаяСтоимость = Актив.БалансоваяСтоимость - Актив.Амортизация;
		КонецЕсли;
		
		Если ВыводитьМОЛ Тогда
			Строка.МОЛ = Актив.МОЛ;
		КонецЕсли;
		
		Если ВыводитьТипЭксплуатации Тогда
			Строка.ТипЭксплуатации = Актив.ТипЭксплуатации;
		КонецЕсли;
		
		Если ВыводитьУникальныйНомер Тогда
			
			Строка.УникальныйНомер = НЕ (Строка.ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецодежда
				ИЛИ Строка.ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецоснастка
				ИЛИ Строка.ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Инструменты
				ИЛИ Строка.ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизиты()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Устанавливает значение ставки НДС в ТЧ "Активы"
//
// Параметры:
//	Объект - объект применения
//
Процедура УстановитьСтавкуНДСПоАктивам(Объект) Экспорт
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	Для Каждого Строка Из Объект.Активы Цикл
		Если ПараметрыНДС.ОсвобожденОтНДС Тогда
			Строка.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		Иначе
			Строка.СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.ПрочийАктив.Номенклатура);
		КонецЕсли;
		
		МенеджерДокумента.АктивыСтавкаНДСПриИзменении(Объект, Строка);
	КонецЦикла;
	
КонецПроцедуры

// Функция для получения сумм списания, по регистрам в разрезе уникальных реквизитов табличной части документа.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ИмяРегистра - Текст - Имя регистра движений.
//  ИспользуемыеРесурсы - Структура - Список ресурсов регистра, которые необходимо рассчитать.
//  ВидДвиженияПриход - ВидДвиженияНакопления - Вид движения регистра(Приход/Расход).
//  ТекстЗапроса - Текст - Если требуется нестандартный текст запроса для получения данных из документа.
//  ТекстОтбора - Текст - Текст отбора для регистра.
//  ПараметрыОтбора - Структура - Описание дополнительных отборов для регистра.
//
//  Возвращаемое значение - ТаблицаЗначений - таблица сумм списания
//
Функция ПолучитьТаблицуСуммСписания(Объект)
	
	ИспользуемыеРесурсы = Новый Структура;
	ИспользуемыеРесурсы.Вставить("БалансоваяСтоимость","Сумма");
	ИспользуемыеРесурсы.Вставить("БалансоваяСтоимостьУпр","СуммаУпр"); 
	ИспользуемыеРесурсы.Вставить("СуммаАмортизации","СуммаАмортизация"); 
	ИспользуемыеРесурсы.Вставить("СуммаАмортизацииУпр","СуммаАмортизацияУпр"); 
	
	ВидДвиженияПриход = ВидДвиженияНакопления.Расход;
	
	СтруктураТаблиц = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьУникальныеРеквизиты(Объект);
	
	Если СтруктураТаблиц.Свойство("Активы") Тогда
		ИспользуемыеИзмерения = СтруктураТаблиц.Активы;
	КонецЕсли;
	
	ПоляВыборки = ""; ПоляГруппировки = ""; ПоляСуммирования = "";
	
	Для Каждого ИмяКолонки Из ИспользуемыеИзмерения Цикл
		ПоляВыборки     = ПоляВыборки + ?(ПустаяСтрока(ПоляВыборки),"", "," + Символы.ПС) +"РегистрОстатков."+ИмяКолонки+" КАК "+ИмяКолонки;
		ПоляГруппировки = ПоляГруппировки + ?(ПустаяСтрока(ПоляГруппировки),"", "," + Символы.ПС) + "РегистрОстатков." + ИмяКолонки;
	КонецЦикла;
	
	Для Каждого ИмяКолонки Из ИспользуемыеРесурсы Цикл
		ПоляСуммирования = ПоляСуммирования + "," + Символы.ПС + "СУММА(РегистрОстатков." + ИмяКолонки.Ключ + ") КАК " + ИмяКолонки.Значение;
	КонецЦикла;
	
	// таблица регистра
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"+ ПоляВыборки + ПоляСуммирования +"
	|ИЗ
	|	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК РегистрОстатков
	|ГДЕ
	|	РегистрОстатков.Регистратор = &Регистратор
	|	И РегистрОстатков.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО "+ ПоляГруппировки;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияПриход);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции

// Процедура выполняет заполнение реквизита "СуммаСписания" табличной части "активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ИмяРегистра - Строка - Содержит имя регистра.
//
Процедура ЗаполнитьСлужебныйРеквизитСуммаСписания(Объект, ИмяРегистра = "ПрочиеАктивыВЭксплуатации")
	
	Если НЕ ЕстьРеквизит(Объект, "СуммаСписания", "Активы") Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект.Активы;
	
	Если (НЕ Объект.Проведен) Тогда
		
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Строка.СуммаСписания = 0;
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Если Объект.ВалютаДокумента = ВалютаРегл Тогда
		ИмяРесурсаСумма = "Сумма"; 
		ИмяРесурсаАмортизация = "СуммаАмортизация";
		ТребуетсяПересчет = Ложь;
	ИначеЕсли Объект.ВалютаДокумента = ВалютаУпр Тогда
		ИмяРесурсаСумма = "СуммаУпр";
		ИмяРесурсаАмортизация = "СуммаАмортизацияУпр";
		ТребуетсяПересчет = Ложь;
	Иначе
		ИмяРесурсаСумма = "СуммаУпр"; 
		ИмяРесурсаАмортизация = "СуммаАмортизацияУпр";
		ТребуетсяПересчет = Истина;
	КонецЕсли;
	
	Если ТребуетсяПересчет Тогда
		
		Если ЕстьРеквизит(Объект, "КурсВалютыУпр") И ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
			КурсВалютыУпр = Объект.КурсВалютыУпр;
		Иначе
			КурсВалютыУпр = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
		КонецЕсли;
		
		КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУпр, КурсВалютыУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
		
	КонецЕсли;
	
	ТаблицаСписания = ПолучитьТаблицуСуммСписания(Объект);
	
	СтруктураТаблиц = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьУникальныеРеквизиты(Объект);
	
	Если СтруктураТаблиц.Свойство("Активы") Тогда
		ИспользуемыеИзмерения = СтруктураТаблиц.Активы;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Активы Цикл
		// составим строку отбора
		Отбор = Новый Структура;
		Для Каждого ИмяКолонки Из ИспользуемыеИзмерения Цикл
			Отбор.Вставить(ИмяКолонки, Строка[ИмяКолонки]);
		КонецЦикла;
		
		НайденныеСтроки = ТаблицаСписания.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого СтрМассивСумм Из НайденныеСтроки Цикл
				Строка.СуммаСписания = Строка.СуммаСписания + СтрМассивСумм[ИмяРесурсаСумма] -  СтрМассивСумм[ИмяРесурсаАмортизация]; 
			КонецЦикла;
			
			Если ТребуетсяПересчет Тогда
				Строка.СуммаСписания = Окр(Строка.СуммаСписания*КоэффициентПересчета, 2);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКоличествоУникальныхНомеров(Объект, Отказ = Ложь, ИмяТабличнойЧасти = "Активы", ИмяПоляАктива = "ПрочийАктив") Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		ПрочийАктив = СтрокаТабличнойЧасти[ИмяПоляАктива];
		
		Если НЕ (ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецодежда 
			ИЛИ ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Спецоснастка 
			ИЛИ ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.Инструменты
			ИЛИ ПрочийАктив.ВидПрочегоАктива = Перечисления.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы) Тогда
			
			Если СтрокаТабличнойЧасти.Количество > 1 Тогда
				СтрокаТабличнойЧасти.Количество = 1;
				ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
				НСтр("ru = 'Прочий актив ""%1"" учитывается по уникальным номерам. Количество не может превышать 1 единицу. Заменена на 1.'"),
				ПрочийАктив
				),
				Объект, 
				ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].Количество");
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьКоличествоУникальныхНомеров()

#КонецОбласти