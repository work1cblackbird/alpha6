#Область ПрограммныйИнтерфейс

#Область СрокПоставкиПрайсЛиста

// Формирует представление интервала срока поставки
//
// Параметры:
//  СрокПоставкиМинЧисло	- Число	- минимальный срок поставки в секундах.
//  СрокПоставкиМаксЧисло	- Число	- максимальный срок поставки в секундах.
//
// Возвращаемое значение:
//  Строка - Сформированное представление интервала.
//
Функция ПредставлениеСрокаПоставкиИнтервал(СрокПоставкиМинЧисло, СрокПоставкиМаксЧисло) Экспорт
	СрокПоставки = ""; 
	ПостфиксМин  = ""; 
	ПостфиксМакс = "";
	
	Если (СрокПоставкиМинЧисло + СрокПоставкиМаксЧисло) > 0 Тогда
		Если СрокПоставкиМинЧисло <> СрокПоставкиМаксЧисло Тогда
			СрокПоставкиМин  = ПредставлениеСрокаПоставки(СрокПоставкиМинЧисло, ПостфиксМин);
			СрокПоставкиМакс = ПредставлениеСрокаПоставки(СрокПоставкиМаксЧисло, ПостфиксМакс);
			
			Если ПостфиксМин = ПостфиксМакс Тогда
				СрокПоставки = ?(СрокПоставкиМинЧисло > 0, СтрЗаменить(СрокПоставкиМин, ПостфиксМин, "") + " - ", " до ")
									+ СрокПоставкиМакс;
			Иначе
				СрокПоставки = ?(СрокПоставкиМинЧисло > 0, "от " + СрокПоставкиМин, "") + " до " + СрокПоставкиМакс;
			КонецЕсли;
		Иначе
			СрокПоставкиМин = ПредставлениеСрокаПоставки(СрокПоставкиМинЧисло, ПостфиксМин);
			СрокПоставки = СрокПоставкиМин;
		КонецЕсли;
	Иначе
		СрокПоставки = "0 дн.(наличие)";
	КонецЕсли;
	
	Возврат СрокПоставки;
КонецФункции // ПредставлениеСрокаПоставкиИнтервал()

// Расчитывает срок поставки 
//
// Параметры:
//  БазоваяДата       - Дата	- Стартовая дата от которой расчитывается срок поставки.
//  СрокПоставкиЧисло - Число	- максимальная продолжительность поставки.
//  ТолькоРабочиеДни  - Булево  - Признак необходимости учитывать рабочие дни.
//
// Возвращаемое значение:
//   Дата   - Расчитанный срок поставки.
//
Функция РассчитатьСрокПоставки(БазоваяДата, СрокПоставкиЧисло, ТолькоРабочиеДни = Ложь) Экспорт
	СрокПоставки = "";
	
	Если Не ЗначениеЗаполнено(БазоваяДата) Тогда
		#Если Клиент Тогда
			БазоваяДата = ТекущаяДата();
		#Иначе
			БазоваяДата = ТекущаяДатаСеанса();	
		#КонецЕсли
	КонецЕсли;
	
	Если СрокПоставкиЧисло < 180 Тогда // Меньше 6 минут - это косяк?
		pragDeliveryTimeInSecond = Ложь;
	КонецЕсли;
	
	// Менее одного дня - отображаем в часах, менее 2-х часов отображаем в часах с минутами, 
	// менее часа отображаем в 15 минутном интервале.
	Дни = Цел(СрокПоставкиЧисло / (24 * 60 * 60));
	Часы = Цел((СрокПоставкиЧисло % (24 * 60 * 60)) / 3600);
	Минуты = Цел((СрокПоставкиЧисло % (60 * 60)) / 60);
	
	Если ТолькоРабочиеДни Тогда
		ОдинДень = 60 * 60 * 24;
		ДеньПоставки = 0;
		Пока ДеньПоставки < Дни Цикл
			Если ДеньНедели(БазоваяДата + ДеньПоставки * ОдинДень) > 5 Тогда
				// Попали на выходной, поэтому удлиняем дни
				Дни = Дни + 1;
			КонецЕсли;
			ДеньПоставки = ДеньПоставки + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если Дни >= 1 Тогда
		// Смещаем и приводим к концу дня
		СрокПоставки = КонецДня(БазоваяДата + Дни * ( 24 * 60 * 60) + Часы * ( 60 * 60) + Минуты * 60);
	Иначе
		// Считаем простое смещение
		СрокПоставки = БазоваяДата + Дни * (24 * 60 * 60) + Часы * (60 * 60) + Минуты * 60;
	КонецЕсли;
	
	Возврат СрокПоставки;
КонецФункции // РассчитатьСрокПоставки()

// Добавление разделителя каталога
//
// Параметры:
//  Каталог  - Строка - Путь к каталогу файлов.
//  ИмяФайла - Строка - Имя файла.
// 
// Возвращаемое значение:
//  Строка - путь к каталогу с конечным символом-разделителем.
//
Функция ДобавитьРазделительКаталога(Знач Каталог, ИмяФайла) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог) + ИмяФайла;
	
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

// Процедура разделяет имя файла и его расширение.
//
// Параметры:
//  Путь       - Строка - Путь к файлу.
//  Имя        - Строка - Имя файла.
//  Расширение - Строка - Расширение файла.
//
Процедура РазделитьИмяИРасширение(Знач Путь, Имя, Расширение) Экспорт
	РазделенныйПуть = СтрРазделить(Путь, ПолучитьРазделительПутиКлиента());
	Имя = РазделенныйПуть[РазделенныйПуть.ВГраница()];
	
	РазделенноеИмяФайла = СтрРазделить(Имя, ".");
	
	Имя = ""; 
	Расширение = "";
	Если РазделенноеИмяФайла.Количество() > 1 Тогда
		Расширение = РазделенноеИмяФайла[РазделенноеИмяФайла.ВГраница()];
		
		РазделенноеИмяФайла.Удалить(РазделенноеИмяФайла.ВГраница());
		
		Для Каждого ЭлементИмени Из РазделенноеИмяФайла Цикл
			Имя = Имя + ?(НЕ ПустаяСтрока(Имя), ".", "") + ЭлементИмени;
		КонецЦикла;
	ИначеЕсли РазделенноеИмяФайла.Количество() = 1 Тогда
		Имя = РазделенноеИмяФайла[0];
	КонецЕсли;
КонецПроцедуры

// Получение расширения файла.
//
// Параметры:
//  Путь - Строка - Путь к файлу.
// 
// Возвращаемое значение:
//  Строка - Расширение файла.
//
Функция ПолучитьРасширение(Путь) Экспорт
	
	Файл = Новый Файл(Путь);
	Возврат Файл.Расширение;
	
КонецФункции

// Получение расширения указанного файла.
//
// Параметры:
//  Путь                      - Строка - Путь к файлу.
//  ПривестиКВерхнемуРегистру - Булево - Привести к верхнему регистру имя файла при поиске расширения.
// 
// Возвращаемое значение:
//  Строка - Имя расширения.
//
Функция ВычленитьРасширение(Путь, ПривестиКВерхнемуРегистру = Истина) Экспорт
	
	РазложеннаяСтрока = СтрРазделить(Путь, ".", Истина);
	Расширение = РазложеннаяСтрока[РазложеннаяСтрока.ВГраница()];
	
	Если ПривестиКВерхнемуРегистру Тогда
		Расширение = ВРег(Расширение);
	КонецЕсли;
	
	Возврат Расширение;
	
КонецФункции

// Признак табличного документа.
//
// Параметры:
//  Расширение - Строка - Расширение проверки.
// 
// Возвращаемое значение:
//  Булево - Если это табличный документ, то Истина. Иначе Ложь.
//
Функция ЭтоТабличныйДокумент(Расширение) Экспорт
	
	ТипФайла = СтрЗаменить(ВРег(Расширение), ".", "");
	Возврат (ТипФайла = "XLS" ИЛИ ТипФайла = "XLSX" ИЛИ ТипФайла = "XLSM" ИЛИ ТипФайла = "ODS" ИЛИ ТипФайла = "OTS");
	
КонецФункции

// Признак текстового документа.
//
// Параметры:
//  Расширение - Строка - Расширение файла проверки.
// 
// Возвращаемое значение:
//  Булево - Если это текстовый документ, то Истина. Иначе Ложь.
//
Функция ЭтоТекстовыйДокумент(Расширение) Экспорт
	
	ТипФайла = ВРег(Расширение);
	Возврат (ТипФайла = ".TXT" ИЛИ ТипФайла = ".CSV");
	
КонецФункции

#КонецОбласти

// Вывод окна ожидания выполнения операции.
//
// Параметры:
//  ТабличныйДокумент		 - ТабличныйДокумент - Табличный документ вывода состояния ожидания.
//  ОтключитьРежимОжидания	 - Булево - Признак необходимости продолжения режима ожидания.
//  Текст					 - Строка - Текст состояния ожидания.
//  Картинка				 - Картинка - Картинка ожидания.
//
Процедура УстановитьРежимОжиданияТабличногоДокумента(
	ТабличныйДокумент,
	ОтключитьРежимОжидания = Ложь,
	Текст = Неопределено,
	Картинка = Неопределено) Экспорт
	
	Если Текст = Неопределено Тогда
		Текст = НСтр("ru = 'Обновление...'");
	КонецЕсли;
	
	Если Картинка = Неопределено Тогда
		Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	КонецЕсли;
	
	ОтображениеСостояния = ТабличныйДокумент.ОтображениеСостояния;
	
	Если НЕ ОтключитьРежимОжидания Тогда
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Текст                          = Текст;
		
		#Если НЕ ВебКлиент Тогда
			ОтображениеСостояния.Картинка = Картинка;
		#КонецЕсли
	Иначе
		ОтображениеСостояния.Видимость                      = Ложь;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	КонецЕсли;
	
КонецПроцедуры

// Наименование прайс-листа.
//
// Параметры:
//  ПрайсЛист	 - СправочникСсылка.ПрайсЛистыКонтрагентов - Прайс-лист, которому формируется наименование.
// 
// Возвращаемое значение:
//  Строка - Сформированное наименование прайс-листа.
//
Функция СформироватьНаименованиеПрайсЛиста(ПрайсЛист) Экспорт
	
	Возврат СтрШаблон("%2 <%1>", Строка(ПрайсЛист.Владелец), 
			?(ПрайсЛист.ВидПрайсЛиста.Пустая(), "Прайс-лист", Строка(ПрайсЛист.ВидПрайсЛиста)));
	
КонецФункции

// Получение текста ошибки.
//
// Параметры:
//  ТекстОшибки - Строка - Текст ошибки.
// 
// Возвращаемое значение:
//  Структура -  В структуру добавляются поля:
//		* Ошибка - Булево - Истина.
//		* Сообщение - Строка - Текст ошибки.
//
Функция СформироватьОшибку(ТекстОшибки) Экспорт
	
	Возврат Новый Структура("Ошибка,Сообщение", Истина, ТекстОшибки);
	
КонецФункции

#КонецОбласти     

#Область СлужебныеПроцедурыИФункции

// Формирует представление срока поставки
//
// Параметры:
//  СрокПоставкиЧисло - Число	- сроок поставки в секундах.
//  Постфикс          - Строка	- Постфикс представления срока поставки.
//
// Возвращаемое значение:
//   Строка   - Сформированное представление.
//
Функция ПредставлениеСрокаПоставки(СрокПоставкиЧисло, Постфикс = "")
	СрокПоставки = "";
	
	Если СрокПоставкиЧисло < 180 Тогда // Меньше 6 минут - это косяк?
		pragDeliveryTimeInSecond = Ложь;
	КонецЕсли;
	
	// Менее одного дня - отображаем в часах, менее 2-х часов отображаем в часах с минутами, менее часа отобразаем в 15 минутном интервале.
	Дни    = Цел(СрокПоставкиЧисло / (24 * 60 * 60));
	Часы   = Цел((СрокПоставкиЧисло % (24 * 60 * 60)) / 3600);
	Минуты = Цел((СрокПоставкиЧисло % (60 * 60)) / 60);
	
	Если Дни >= 1 Тогда
		// Указываем только дни!
		СрокПоставки = Формат(Дни, "ЧГ=0") + " дн.";
		Постфикс = " дн.";
	Иначе
		СрокПоставки = ?(Дни > 0, Формат(Дни, "ЧГ=0") + " дн.", "") + ?(Часы > 0, Формат(Часы, "ЧГ=0") + " ч.", "") 
				+ ?(Минуты > 0, Формат(Минуты, "ЧГ=0") + " мин.", "");
		МинутыТекст = ?(Минуты > 0, " мин.", "");
		ЧасыТекст = ?(Часы > 0, " ч.", МинутыТекст);
		Постфикс = ?(Дни > 0, " дн.", ЧасыТекст);
	КонецЕсли;
	
	Возврат СрокПоставки;
КонецФункции // ПредставлениеСрокаПоставки()

#КонецОбласти 
