// Общий модуль "Значимые события"

#Область ПрограммныйИнтерфейс

// Общий обработчик события вызываемый по подписке при записи объекта.
//
// Параметры:
//  Источник - Произвольный   - Объект, для которого выполняется обработка события.
//  Отказ    - Булево         - В данный параметр передается признак выполнения события.
//
Процедура ЗначимыеСобытияПриЗаписи(Источник, Отказ) Экспорт
	
	РеакцияНаЗначимоеСобытие(Источник, Отказ, "ПриЗаписи");
	
КонецПроцедуры

// Общий обработчик события вызываемый по подписке при записи регистров.
//
// Параметры:
//  Источник  - Произвольный - Объект, для которого выполняется обработка события.
//  Отказ     - Булево       - В данный параметр передается признак выполнения события.
//  Замещение - Булево       - Режим записи набора.
//
Процедура ЗначимыеСобытияПриЗаписиРегистры(Источник, Отказ, Замещение) Экспорт
	
	// Проверим текущее состояние транзакции.
	РеакцияНаЗначимоеСобытие(Источник, Отказ, "ПриЗаписи");
		
КонецПроцедуры

// Общий обработчик события вызываемый по подписке перед удалением объекта.
//
// Параметры:
//  Источник - Произвольный   - Объект, для которого выполняется обработка события.
//  Отказ    - Булево         - В данный параметр передается признак выполнения события.
//
Процедура ЗначимыеСобытияПередУдалением(Источник, Отказ) Экспорт
	
	РеакцияНаЗначимоеСобытие(Источник, Отказ, "ПередУдалением");
	
КонецПроцедуры

// Общий обработчик события вызываемый по подписке при удалении проведения документа.
//
// Параметры:
//  Источник - Произвольный - Объект, для которого выполняется обработка события.
//  Отказ    - Булево         - В данный параметр передается признак выполнения события.
//
Процедура ЗначимыеСобытияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	РеакцияНаЗначимоеСобытие(Источник, Отказ, "ОбработкаУдаленияПроведения");
	
КонецПроцедуры

// Общий обработчик события вызываемый по подписке при проведении документа.
//
// Параметры:
//  Источник        - Произвольный             - Объект, для которого выполняется обработка события.
//  Отказ           - Булево                   - В данный параметр передается признак выполнения события.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ЗначимыеСобытияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	РеакцияНаЗначимоеСобытие(Источник, Отказ, "ОбработкаПроведения");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает дерево реквизитов объекта метаданных.
//
// Параметры:
//  Ссылка   - ЛюбаяСсылка - ссылка на элемент базы данных, для которого требуется получить результат функции.
//  ИмяКорня - Строка      - название корня дерева с реквизитами.
// 
// Возвращаемое значение:
//  Строка - строка реквизитов объекта метаданных конфигурации, разделенные символом ",".
//
Функция ПолучитьДеревоМетаданныхОбъекта(Источник, ИмяКорня = "Ссылка", ВыводитьРеквизитыТЧ = Истина) Экспорт
	
	// Сформируем дерево полей и структуру его колонок.
	ДеревоПолей = Новый ДеревоЗначений;
	ДеревоПолей.Колонки.Добавить("Поле"     , Новый ОписаниеТипов("Строка"));
	ДеревоПолей.Колонки.Добавить("ТипМетаданного");
	ДеревоПолей.Колонки.Добавить("ИмяМетаданного", Новый ОписаниеТипов("Строка"));
	ДеревоПолей.Колонки.Добавить("ВидМетаданного", Новый ОписаниеТипов("Строка"));
	ДеревоПолей.Колонки.Добавить("ИмяТЧ", Новый ОписаниеТипов("Строка"));
	ДеревоПолей.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоПолей.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Число"));
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Источник.ПолноеИмя);
	
	Корень = ДеревоПолей.Строки.Добавить();
	Корень.Поле = Строка(МетаданныеОбъекта);
	Корень.ТипМетаданного = "Корень";
	Корень.ИмяМетаданного = ИмяКорня;
	Корень.ВидМетаданного = "Корень";
	Корень.ЭтоГруппа      = ИСТИНА;
	Корень.Картинка       = 4;
	
	Результат = "";
	
	// Если выбрана группа метаданных "Справочники", "документы" и т.д.
	Если МетаданныеОбъекта = Неопределено Тогда
		
		Корень.Поле = Строка(Источник);
		
		// Добавим стандартные реквизиты объекта.
		Для Каждого Реквизит Из Метаданные[Источник.ПолноеИмя][0].СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				Продолжить;
			КонецЕсли;
			
			Имя = Реквизит.Имя;
			Если Реквизит.Имя = "ПометкаУдаления" Тогда
				Имя = НСтр("ru = 'Пометка удаления'");
			ИначеЕсли Реквизит.Имя = "ЭтоГруппа" Тогда
				Имя = НСтр("ru = 'Это группа'");
			КонецЕсли;
			
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит.Имя;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Константа";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
	ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеОбъекта) Тогда
		
		Корень.Поле = Строка(МетаданныеОбъекта);
		Корень.ТипМетаданного = МетаданныеОбъекта.Тип;
		Корень.ИмяМетаданного = МетаданныеОбъекта.Имя;
		Корень.ВидМетаданного = "Константа";
		Корень.ЭтоГруппа      = ЛОЖЬ;
		Корень.Картинка       = 0;
	
	ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
		
		// Добавим общие реквизиты объекта.
		Для Каждого РеквизитОбщий Из Метаданные.ОбщиеРеквизиты Цикл
			Если ЕстьРеквизит(МетаданныеОбъекта, РеквизитОбщий.Имя) Тогда
				НоваяСтрока                = Корень.Строки.Добавить();
				НоваяСтрока.Поле           = РеквизитОбщий;
				НоваяСтрока.ТипМетаданного = РеквизитОбщий.Тип;
				НоваяСтрока.ИмяМетаданного = РеквизитОбщий.Имя;
				НоваяСтрока.ВидМетаданного = "Реквизит";
				НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
				НоваяСтрока.Картинка       = 0;
			КонецЕсли;
		КонецЦикла;
	
		// Добавим стандартные реквизиты объекта.
		Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				Продолжить;
			КонецЕсли;
			
			Имя = Реквизит.Имя;
			Если Реквизит.Имя = "ПометкаУдаления" Тогда
				Имя = НСтр("ru = 'Пометка удаления'");
			ИначеЕсли Реквизит.Имя = "ЭтоГруппа" Тогда
				Имя = НСтр("ru = 'Это группа'");
			КонецЕсли;
			
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит.Имя;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
		// Добавим реквизиты объекта.
		Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
		// Добавим измерения объекта.
		Для Каждого Реквизит Из МетаданныеОбъекта.Измерения Цикл
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
		// Добавим ресурсы объекта.
		Для Каждого Реквизит Из МетаданныеОбъекта.Ресурсы Цикл
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
	Иначе
		
		// Добавим общие реквизиты объекта.
		Для Каждого РеквизитОбщий Из Метаданные.ОбщиеРеквизиты Цикл
			Если ЕстьРеквизит(МетаданныеОбъекта, РеквизитОбщий.Имя) Тогда
				НоваяСтрока                = Корень.Строки.Добавить();
				НоваяСтрока.Поле           = РеквизитОбщий;
				НоваяСтрока.ТипМетаданного = РеквизитОбщий.Тип;
				НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+РеквизитОбщий.Имя;
				НоваяСтрока.ВидМетаданного = "Реквизит";
				НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
				НоваяСтрока.Картинка       = 0;
			КонецЕсли;
		КонецЦикла;
		
		// Добавим стандартные реквизиты объекта.
		Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				Продолжить;
			КонецЕсли;
			
			Имя = Реквизит.Имя;
			Если Реквизит.Имя = "ПометкаУдаления" Тогда
				Имя = НСтр("ru = 'Пометка удаления'");
			ИначеЕсли Реквизит.Имя = "ЭтоГруппа" Тогда
				Имя = НСтр("ru = 'Это группа'");
			КонецЕсли;
			
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Имя;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
		// Добавим реквизиты объекта.
		Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			НоваяСтрока                = Корень.Строки.Добавить();
			НоваяСтрока.Поле           = Реквизит;
			НоваяСтрока.ТипМетаданного = Реквизит.Тип;
			НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+Реквизит.Имя;
			НоваяСтрока.ВидМетаданного = "Реквизит";
			НоваяСтрока.ЭтоГруппа      = ЛОЖЬ;
			НоваяСтрока.Картинка       = 0;
		КонецЦикла;
		
		// Добавим табличные части.
		Если ВыводитьРеквизитыТЧ Тогда
			Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
				
				НоваяСтрока                = Корень.Строки.Добавить();
				НоваяСтрока.Поле           = ТабличнаяЧасть;
				НоваяСтрока.ТипМетаданного = "ТабличнаяЧасть";
				НоваяСтрока.ИмяМетаданного = Корень.ИмяМетаданного+"."+ТабличнаяЧасть.Имя;
				НоваяСтрока.ВидМетаданного = "ТабличнаяЧасть";
				НоваяСтрока.ЭтоГруппа      = ИСТИНА;
				НоваяСтрока.Картинка       = 1;
				
				// Добавим реквизиты текущей табличной части.
				Для Каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
					НоваяСтрокаРеквизитов                = НоваяСтрока.Строки.Добавить();
					НоваяСтрокаРеквизитов.Поле           = РеквизитТабличнойЧасти;
					НоваяСтрокаРеквизитов.ТипМетаданного = РеквизитТабличнойЧасти.Тип;
					НоваяСтрокаРеквизитов.ИмяМетаданного = НоваяСтрока.ИмяМетаданного+"."+РеквизитТабличнойЧасти.Имя;
					НоваяСтрокаРеквизитов.ИмяТЧ = ТабличнаяЧасть.Имя;
					НоваяСтрокаРеквизитов.ВидМетаданного = "РеквизитТЧ";
					НоваяСтрокаРеквизитов.ЭтоГруппа      = ЛОЖЬ;
					НоваяСтрокаРеквизитов.Картинка       = 0;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДеревоПолей;
	
КонецФункции

// Функция предназначения для преобразования источника в подходящий тип данных, для передачи на сервер.
//
// Параметры:
//  Источник  - Произвольный объект - объект-источник события.
//  ИдентификаторОбъектаМетаданных  - Справочник.Ссылка -Ссылка на справочник идентификаторы метаданных.
//  ТипИсточника  - "Строка" - возвращает строковое представление типа источника.
//							   Используется для обратного преобразования на сервере.
//
// Возвращаемое значение:
//   Возвращает преобразованный источник события. 
//   Для ссылочных данных возвращается соответствующая ссылка. Для наборов записей возвращается
//	 структура, позволяющая восстановить этот набор записей.
//   
Функция ПреобразоватьИсточник(Источник, ИдентификаторОбъектаМетаданных, ТипИсточника = "")
		
	Класс = ИдентификаторОбъектаМетаданных.Родитель.ПолноеИмя;
	
	Если Класс = "Константы" Тогда
		
		// КонстантуМенеджерЗначения можно передавать на сервер.
		ТипИсточника = "Константы";
		Возврат Источник; 
		
	ИначеЕсли НЕ ИдентификаторОбъектаМетаданных.ЗначениеПустойСсылки = Неопределено Тогда
		
		// Для ссылочных типов передаем ссылки.
		ТипИсточника = "СсылочныйТип";
		Возврат Источник.Ссылка;
		
	ИначеЕсли Класс="РегистрыСведений" 
		ИЛИ Класс="РегистрыНакопления" 
		ИЛИ Класс="РегистрыБухгалтерии" 
		ИЛИ Класс="РегистрыРасчета" Тогда
		
		// Для регистров создадим структуру, и через нее передадим параметры отбора, а так же имя регистра.
		ТипИсточника = Класс;
		
		ИсточникВозвращаемый = Новый Структура;
		ИсточникВозвращаемый.Вставить("ТипРегистра", ТипИсточника);
		ИсточникВозвращаемый.Вставить("ИмяРегистра", ИдентификаторОбъектаМетаданных.Имя);
		ИсточникВозвращаемый.Вставить("Отбор",       Источник.Отбор);
		
		Возврат ИсточникВозвращаемый;
	КонецЕсли;
	
КонецФункции

// Возвращает массив значимых событий к исполнению
//
Функция ЗначимыеСобытияПоУсловию(Источник, Событие, ЭтоНовый, СтруктураПараметровСеанса = Неопределено)
	
	МассивЗначимыхСобытий = Новый Массив;
	
	Если Источник = Неопределено Тогда
		Возврат МассивЗначимыхСобытий;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поищем подходящие элементы справочника "Значимые события".
	ОбъектМетаданных = Источник.Метаданные();
	Имя              = ОбъектМетаданных.Имя;
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗначимыеСобытия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗначимыеСобытия КАК ЗначимыеСобытия
		|ГДЕ
		|	НЕ ЗначимыеСобытия.ЭтоГруппа
		|	И НЕ ЗначимыеСобытия.ПометкаУдаления
		|	И ЗначимыеСобытия.Источник В (&Источники)
		|	И ЗначимыеСобытия.Событие = &Событие
		|	И ЗначимыеСобытия.Активность
		|	%1
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначимыеСобытия.Код";
	
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
			СтруктураПараметровСеанса,
			"ЭтоВосстановлениеПоследовательностей",
			Ложь);
	ТекстЗапроса = СтрШаблон(
			ТекстЗапроса,
			?(ЭтоВосстановлениеПоследовательностей, "И ЗначимыеСобытия.ВыполнятьПриВосстановленииПоследовательностей", ""));
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Источники = Новый Массив;
	Источники.Добавить(ИдентификаторОбъектаМетаданных);
	Источники.Добавить(ИдентификаторОбъектаМетаданных.Родитель);

	Запрос.УстановитьПараметр("Источники",     Источники);
	Запрос.УстановитьПараметр("Событие",       Событие);
	
	МассивЗначимыхСобытий  = Новый Массив;
	ВыборкаЗначимыхСобытий = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗначимыхСобытий.Следующий() Цикл
		Если ПроверитьУсловияЗначимогоСобытия(ВыборкаЗначимыхСобытий.Ссылка, Источник, ИдентификаторОбъектаМетаданных,
				Имя, ЭтоНовый) Тогда
				
			МассивЗначимыхСобытий.Добавить(ВыборкаЗначимыхСобытий.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЗначимыхСобытий;
	
КонецФункции

// Функция обрабатывает значимое событие. Проверяет условия и выполняет действия значимого события.
// Если происходит работа в клиент-серверном режиме, то данная функция выполняется на сервере.
//
// Параметры:
//  Источник  - произвольный - преобразованный объект-источник события.
//
//  Событие  - "Строка" - строковое представление события
//
//  ТипИсточника  - "Строка" - строковое представление типа источника ("СсылочныйТип" либо "НаборЗаписей").
//
Процедура ОбработатьЗначимоеСобытие(
		Источник,
		Событие,
		ТипИсточника = "",
		ЭтоНовый = Ложь,
		СтруктураПараметровСеанса = Неопределено,
		МассивЗначимыхСобытий = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Преобразуем данные Источника-структуры в Набор записей и подставим его в качестве источника записей.
	Если (ТипИсточника="РегистрыСведений" 
		ИЛИ ТипИсточника="РегистрыНакопления" 
		ИЛИ ТипИсточника="РегистрыБухгалтерии" 
		ИЛИ ТипИсточника="РегистрыРасчета") 
		И  ТипЗнч(Источник) = Тип("Структура") Тогда
		
		НаборЗаписей = Неопределено;
		НаборЗаписей = РаботаВБезопасномРежимеАльфа.ВычислитьВБезопасномРежиме(Источник.ТипРегистра +"."+ Источник.ИмяРегистра 
			+ ".СоздатьНаборЗаписей()");
		Для Каждого Элемент Из НаборЗаписей.Отбор Цикл
			ЭлементИсточника = Источник.Отбор.Найти(Элемент.Имя);
			Если НЕ ЭлементИсточника = Неопределено  Тогда
				Элемент.Установить(ЭлементИсточника.Значение) ;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Прочитать();
		Источник = НаборЗаписей;
	КонецЕсли;
	
	Если СтруктураПараметровСеанса<>Неопределено Тогда
		ПараметрыСеанса.Организация            = СтруктураПараметровСеанса.Организация;
		ПараметрыСеанса.ПодразделениеКомпании  = СтруктураПараметровСеанса.ПодразделениеКомпании;
		ПараметрыСеанса.ТекущийПользователь    = СтруктураПараметровСеанса.Пользователь;
	КонецЕсли;
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Источник.Метаданные();
	Имя              = ОбъектМетаданных.Имя;
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	
	Результат = Новый Массив;
	Для Каждого ТекСобытие Из МассивЗначимыхСобытий Цикл
		Если ВыполнитьДействияЗначимогоСобытия(ТекСобытие, Источник, ИдентификаторОбъектаМетаданных, Имя, Результат) Тогда
			
			Текст = НСтр("ru = 'Выполнены следующие действия значимого события'") + " <" + ТекСобытие + ">:" + Символы.ПС;
			
			Для Каждого ТекТекст Из Результат Цикл
				Текст = " - " + ТекТекст;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Успешно выполнены действия значимого события.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,ТекСобытие,Текст);
			
		Иначе
			
			ТекстОшибка = "";
			
			Для Каждого ТекОшибка Из Результат Цикл
				ТекстОшибка = " - " + ТекОшибка;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'При выполнении действий значимого события обнаружены ошибки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,ТекСобытие,ТекстОшибка);
			ВызватьИсключение НСтр("ru='При выполнении значимого события обнаружены ошибки.'");
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из всех обработчиков подписок.
//
// Параметры:
//  Источник  - произвольный объект - объект вызвавший событие.
//  Отказ     - Булево         - В данный параметр передается признак выполнения события.
//  Событие  - "Строка" - вид события.
// 
Процедура РеакцияНаЗначимоеСобытие(Источник,Отказ, Событие)
	
	// Проверим текущее состояние транзакции.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производится.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	
	// Отбросим из рассмотрения объекты, попавшие в исключения
	Если Метаданные.ОпределяемыеТипы.ИсключенияЗначимыеСобытия.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем, нужно ли использовать значимые события для данного объекта.
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(Источник.ДополнительныеСвойства, "ИспользоватьЗначимоеСобытие", 
			ПолучитьФункциональнуюОпцию("ИспользоватьЗначимыеСобытия")) Тогда
			
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодВыполняетсяНаСервере = НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(типЗнч(Источник));
	ТипИсточника     = "";
	ИсточникНаСервер = ПреобразоватьИсточник(Источник, ИдентификаторОбъектаМетаданных, ТипИсточника);
	
	Если ТипИсточника = "СсылочныйТип" Тогда
		Ключ = СтрЗаменить(Источник.Ссылка.УникальныйИдентификатор(),"-","_");
		Ключ = Ключ + "_" + Событие;
	Иначе
		Ключ = "";
	КонецЕсли;
	
	СтруктураПараметровСеанса = Новый Структура;
	СтруктураПараметровСеанса.Вставить("Организация", ПараметрыСеанса.Организация);
	СтруктураПараметровСеанса.Вставить("ПодразделениеКомпании", ПараметрыСеанса.ПодразделениеКомпании);
	СтруктураПараметровСеанса.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
			Источник.ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь);
	СтруктураПараметровСеанса.Вставить("ЭтоВосстановлениеПоследовательностей", ЭтоВосстановлениеПоследовательностей);
	
	// Так же необходимо передать на сервер признак того, что объект новый.
	ЭтоНовый = ?(Источник.ДополнительныеСвойства.Свойство("ЭтоНовый"), Источник.ДополнительныеСвойства.ЭтоНовый, Ложь);
	
	МассивЗначимыхСобытий = ЗначимыеСобытияПоУсловию(Источник, Событие, ЭтоНовый, СтруктураПараметровСеанса);
	
	// Если условия не выполняются, то продолжать не имеет смысла.
	Если МассивЗначимыхСобытий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В режиме фонового задания обработка значимых заданий , будет производится в рамках выполняющегося задания.
	Если ТехнологическаяПлатформаВызовСервера.ЭтоФоновоеЗадание() Тогда
		ОбработатьЗначимоеСобытие(
			ИсточникНаСервер,
			Событие,
			ТипИсточника,
			ЭтоНовый,
			СтруктураПараметровСеанса,
			МассивЗначимыхСобытий);
	Иначе
		
		Параметры = Новый Массив;
		Параметры.Добавить(ИсточникНаСервер);
		Параметры.Добавить(Событие);
		Параметры.Добавить(ТипИсточника);
		Параметры.Добавить(ЭтоНовый);
		Параметры.Добавить(СтруктураПараметровСеанса);
		Параметры.Добавить(МассивЗначимыхСобытий);
		
		Задание = ФоновыеЗадания.Выполнить("ЗначимыеСобытия.ОбработатьЗначимоеСобытие", Параметры,, "ЗначимоеСобытие");
	КонецЕсли;

КонецПроцедуры


// Функция проверяет условия значимого события.
//
// Параметры:
//  ЭлементСсылка  - "СправочникСсылка.ЗначимыеСобытия" - ссылка на элемент справочника,
//					 условия которого нужно проверить.
//
//  Источник  - произвольный объект - объект-источник события.
//
//  Класс  - "Строка" - класс объектов метаданных, которому принадлежит текущий объект-источник.
//
//  Имя  - "Строка" - имя объекта метаданных соответствующего объекту-источнику.
//
//  Событие  - "Строка" - обрабатываемое событие.
//
// Возвращаемое значение:
//   "Булево"   - Если все проверки успешно пройдены, то возвращается Истина, иначе Ложь.
// 
Функция ПроверитьУсловияЗначимогоСобытия(Знач ЭлементСсылка, Знач Источник, Знач ИдентификаторОбъектаМетаданных, Знач Имя, ЭтоНовый=Ложь)
	
	// Если у элемента справочника "Значимые события" установлен флаг "Обрабатывать события только для новых объектов", 
	// то необходимо произвести эту проверку.
	Если ЭлементСсылка.ТолькоНовыйОбъект Тогда
		Если НЕ ЭтоНовый Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СсылочныйТип = НЕ (ИдентификаторОбъектаМетаданных.ЗначениеПустойСсылки = Неопределено);
	ЭтоКонстанта = ИдентификаторОбъектаМетаданных.ПорядокКоллекции = 0;
	ИмяТаблицы   = ИдентификаторОбъектаМетаданных.ПолноеИмя;
	
	// Сначала проверяем простые условия.
	// Проверять будем при помощи запроса. В зависимости от класса объекта-источника, текст запроса будет различен.
	РезультатПроверки = Истина;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Использование", Истина);
	СтруктураПоиска.Вставить("ВидУсловия",    Ложь);
	МассивСтрок = ЭлементСсылка.Условия.НайтиСтроки(СтруктураПоиска);
	
	МассивСтрокСписков = Новый Массив;
	Для Каждого Строка Из ЭлементСсылка.ЗначенияСписков Цикл
		МассивСтрокСписков.Добавить(Строка);
	КонецЦикла;
	
	Если МассивСтрок.Количество()<>0 Тогда
		Если ЭтоКонстанта Тогда
			РезультатПроверки = ПроверитьПростыеУсловияКонстанты(МассивСтрок, Имя);
		Иначе
			Если СсылочныйТип Тогда
				РезультатПроверки = ПроверитьПростыеУсловияСсылочногоТипа(МассивСтрок, Источник, ИмяТаблицы, МассивСтрокСписков);
			Иначе
				РезультатПроверки = ПроверитьПростыеУсловияНеСсылочногоТипа(МассивСтрок, Источник, ИмяТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Если уже Ложь, то проверять дальше смысла нет.
	Если НЕ РезультатПроверки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Теперь проверяем произвольные условия.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Использование", Истина);
	СтруктураПоиска.Вставить("ВидУсловия",    Истина);
	МассивСтрок = ЭлементСсылка.Условия.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество()<>0 Тогда
		Для Каждого ТекУсловие Из МассивСтрок Цикл
			Результат = Неопределено;
			Объект    = Источник;
			Попытка
				//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(ТекУсловие.ТекстПроизвольногоУсловия);
				УстановитьБезопасныйРежим(Истина);
				Выполнить(ТекУсловие.ТекстПроизвольногоУсловия);
				УстановитьБезопасныйРежим(Ложь);
			Исключение	
				Результат = Неопределено
			КонецПопытки;
			Если ТипЗнч(Результат)=Тип("Булево") Тогда
				Если НЕ Результат Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьУсловияЗначимогоСобытия() 

// Функция проверяет простые условия объекта-источника вида "Константа".
// Проверка выполняется посредством запроса.
//
// Параметры:
//  МассивСтрок  - "Массив" - массив строк табличной части "Условия" элемента справочника "Значимые события",
//						   соответствующих простым условиям.                   
// 
//  ИмяКонстанты  - "Строка" - имя константы.
//
// Возвращаемое значение:
//   "Булево" - в случае успешной проверки всех условий возвращается Истина.
//
Функция ПроверитьПростыеУсловияКонстанты(МассивСтрок, ИмяКонстанты)
	
	ТекстЗапроса = "";	
	
	Для Сч=0 По (МассивСтрок.Количество()-1) Цикл  	
		ТекУсловие = МассивСтрок[Сч];
		
		Если ПустаяСтрока(ТекУсловие.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекстЗапроса="" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	" + ИмяКонстанты +  "
			|ИЗ
			|	Константы 
			|{ГДЕ
			|";			
		Иначе
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС; 			
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекУсловие.ПутьКДанным + ".*";		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "}";
	Запрос = Новый ПостроительЗапроса(ТекстЗапроса);
	Запрос.ЗаполнитьНастройки();
	
	Для Сч=0 По (МассивСтрок.Количество()-1) Цикл
		ОтборИмя = СтрЗаменить(МассивСтрок[Сч].ПутьКДанным,".","");
		
		Если НЕ Запрос.ДоступныеПоля[ОтборИмя] = Неопределено
			И Запрос.ДоступныеПоля[ОтборИмя].ТипЗначения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Отбор.Добавить(ОтборИмя);
		Запрос.Отбор[ОтборИмя].Использование = Истина;
		Запрос.Отбор[ОтборИмя].Значение 	 = МассивСтрок[Сч].ЗначениеСравнения;
		
		Сравнение = ВидСравнения.Равно;
		Если МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.Больше Тогда
			Сравнение = ВидСравнения.Больше;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.БольшеИлиРавно Тогда
			Сравнение = ВидСравнения.БольшеИлиРавно;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.Меньше Тогда
			Сравнение = ВидСравнения.Меньше;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.МеньшеИлиРавно Тогда
			Сравнение = ВидСравнения.МеньшеИлиРавно;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеРавно Тогда
			Сравнение = ВидСравнения.НеРавно;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.Содержит Тогда
			Сравнение = ВидСравнения.Содержит;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеСодержит Тогда
			Сравнение = ВидСравнения.НеСодержит;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.ВСписке Тогда
			Сравнение = ВидСравнения.ВСписке;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеВСписке Тогда
			Сравнение = ВидСравнения.НеВСписке;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.ВГруппе Тогда
			Сравнение = ВидСравнения.ВИерархии;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеВГруппе Тогда
			Сравнение = ВидСравнения.НеВИерархии;
		КонецЕсли;
		
		Запрос.Отбор[ОтборИмя].ВидСравнения  = Сравнение;
	КонецЦикла;
	
	Запрос.Выполнить();
	
	Если Запрос.Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
КонецФункции // ПроверитьПростыеУсловияКонстанты()

// Функция проверяет простые условия объекта-источника ссылочного вида.
//
// Параметры:
//  МассивСтрок - "Массив" - массив строк табличной части "Условия" элемента справочника "Значимые события".
//  Источник - произвольный объект - объект-источник события.
//  ИмяТаблицы - "Строка" - имя таблицы БД, соответствующей объекту-источнику.
//  МассивСтрокСписков - "Массив" - массив строк списков.
//
// Возвращаемое значение:
//  Булево - в случае успешной проверки всех условий возвращается Истина.
//
Функция ПроверитьПростыеУсловияСсылочногоТипа(МассивСтрок, Источник, ИмяТаблицы, МассивСтрокСписков)
	
	ТекстЗапроса = "";	
	
	Для Сч=0 По (МассивСтрок.Количество()-1) Цикл  	
		ТекУсловие = МассивСтрок[Сч];
		
		Если ПустаяСтрока(ТекУсловие.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекстЗапроса="" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ссылка
			|ИЗ
			|	" + ИмяТаблицы + "
			|{ГДЕ
			|	Ссылка.*,
			|";			
		Иначе
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекУсловие.ПутьКДанным + ".* КАК " + СтрЗаменить(МассивСтрок[Сч].ПутьКДанным,".","");
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "}";
	Запрос = Новый ПостроительЗапроса(ТекстЗапроса);
	Запрос.ЗаполнитьНастройки();
	
	Запрос.Отбор.Добавить("Ссылка");
	Запрос.Отбор["Ссылка"].Использование = Истина;
	Запрос.Отбор["Ссылка"].Значение 	 = Источник.Ссылка;
	Запрос.Отбор["Ссылка"].ВидСравнения  = ВидСравнения.Равно;
	
	Для Сч=0 По (МассивСтрок.Количество()-1) Цикл
		ОтборИмя = СтрЗаменить(МассивСтрок[Сч].ПутьКДанным,".","");
		
		Если НЕ Запрос.ДоступныеПоля[ОтборИмя] = Неопределено
			И Запрос.ДоступныеПоля[ОтборИмя].ТипЗначения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Отбор.Добавить(ОтборИмя);
		Запрос.Отбор[ОтборИмя].Использование = Истина;
		
		Если МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.ВСписке
			ИЛИ МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеВСписке Тогда
			Запрос.Отбор[ОтборИмя].ВидСравнения = ?(МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.ВСписке,
				ВидСравнения.ВСписке, ВидСравнения.НеВСписке);
			СписокОтбора = Новый СписокЗначений();
			Для Каждого Строка Из МассивСтрокСписков Цикл
				Если Строка.КлючСтроки = (Сч + 1) Тогда
					СписокОтбора.Добавить(Строка.Значение);
				КонецЕсли;
			КонецЦикла;
			Запрос.Отбор[ОтборИмя].Значение = СписокОтбора;
			Продолжить;
		Иначе
			Запрос.Отбор[ОтборИмя].Значение = МассивСтрок[Сч].ЗначениеСравнения;
		КонецЕсли;
	
		Сравнение = ВидСравнения.Равно;
		Если МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.Больше Тогда
			Сравнение = ВидСравнения.Больше;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.БольшеИлиРавно Тогда
			Сравнение = ВидСравнения.БольшеИлиРавно;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.Меньше Тогда
			Сравнение = ВидСравнения.Меньше;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.МеньшеИлиРавно Тогда
			Сравнение = ВидСравнения.МеньшеИлиРавно;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеРавно Тогда
			Сравнение = ВидСравнения.НеРавно;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.Содержит Тогда
			Сравнение = ВидСравнения.Содержит;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеСодержит Тогда
			Сравнение = ВидСравнения.НеСодержит;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.ВГруппе Тогда
			Сравнение = ВидСравнения.ВИерархии;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеВГруппе Тогда
			Сравнение = ВидСравнения.НеВИерархии;
		КонецЕсли;
		
		Запрос.Отбор[ОтборИмя].ВидСравнения = Сравнение;
	КонецЦикла;
	
	Запрос.Выполнить();
	
	Если Запрос.Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // ПроверитьПростыеУсловияСсылочногоТипа() 

// Функция проверяет простые условия объекта-источника не ссылочного вида (наборы записей).
//
// Параметры:
//  МассивСтрок  - "Массив" - массив строк табличной части "Условия" элемента справочника "Значимые события",
//                 		   соответствующих простым условиям.
//  Источник  - произвольный объект - объект-источник события.
//
//  ИмяТаблицы  - "Строка" - имя таблицы БД, соответствующей объекту-источнику.
//
// Возвращаемое значение:
//   "Булево" - в случае успешной проверки всех условий возвращается Истина.
// 
Функция ПроверитьПростыеУсловияНеСсылочногоТипа(МассивСтрок, Источник, ИмяТаблицы)
	
	ТекстЗапроса = "
	| ВЫБРАТЬ РАЗРЕШЕННЫЕ *
	| ИЗ
	|" + ИмяТаблицы + "
	|";
	
	ТекстОграничений = ""; 	
	Для Сч=0 По (МассивСтрок.Количество()-1) Цикл  			
		ТекУсловие = МассивСтрок[Сч];
		
		Если ПустаяСтрока(ТекУсловие.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекстОграничений="" Тогда
			ТекстОграничений = "{ ГДЕ ";
		Иначе
			ТекстОграничений = ТекстОграничений + "," + Символы.ПС; 			
		КонецЕсли;
		ТекстОграничений = ТекстОграничений + ТекУсловие.ПутьКДанным + ".* КАК " 
			+ СтрЗаменить(МассивСтрок[Сч].ПутьКДанным,".","");	
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОграничений) Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстОграничений + "}";
	КонецЕсли;
	
	Запрос = Новый ПостроительЗапроса(ТекстЗапроса);
	Запрос.ЗаполнитьНастройки();
	
	Для Сч=0 По (МассивСтрок.Количество()-1) Цикл
		ОтборИмя = СтрЗаменить(МассивСтрок[Сч].ПутьКДанным,".","");
		
		Если НЕ Запрос.ДоступныеПоля[ОтборИмя] = Неопределено
			И Запрос.ДоступныеПоля[ОтборИмя].ТипЗначения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Отбор.Добавить(ОтборИмя);
		Запрос.Отбор[ОтборИмя].Использование = Истина;
		Запрос.Отбор[ОтборИмя].Значение 	 = МассивСтрок[Сч].ЗначениеСравнения;
		
		Сравнение = ВидСравнения.Равно;
		Если МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.Больше Тогда
			Сравнение = ВидСравнения.Больше;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.БольшеИлиРавно Тогда
			Сравнение = ВидСравнения.БольшеИлиРавно;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.Меньше Тогда
			Сравнение = ВидСравнения.Меньше;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.МеньшеИлиРавно Тогда
			Сравнение = ВидСравнения.МеньшеИлиРавно;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеРавно Тогда
			Сравнение = ВидСравнения.НеРавно;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.Содержит Тогда
			Сравнение = ВидСравнения.Содержит;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеСодержит Тогда
			Сравнение = ВидСравнения.НеСодержит;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.ВСписке Тогда
			Сравнение = ВидСравнения.ВСписке;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеВСписке Тогда
			Сравнение = ВидСравнения.НеВСписке;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.ВГруппе Тогда
			Сравнение = ВидСравнения.ВИерархии;
		ИначеЕсли МассивСтрок[Сч].ВидСравнения = Перечисления.ВидСравнения.НеВГруппе Тогда
			Сравнение = ВидСравнения.НеВИерархии;
		КонецЕсли;
		
		Запрос.Отбор[ОтборИмя].ВидСравнения  = Сравнение;		
	КонецЦикла; 	
	
	Запрос.Выполнить();
	
	Если Запрос.Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 	
	
КонецФункции // ПроверитьПростыеУсловияНеСсылочногоТипа()


//////////////////////////////////////////////////////////////////////////////////
// ВЫПОЛНЕНИЕ ДЕЙСТВИЙ ЗНАЧИМОГО СОБЫТИЯ, ПРОШЕДШЕГО ПРОВЕРКУ.
//////////////////////////////////////////////////////////////////////////////////

// Функция выполняет действия значимого события. 
//
// Параметры:
//  СобытиеСсылка  - "СправочникСсылка.ЗначимыеСобытия" - ссылка на элемент справочника "Значимые события", 
//														  действия которого необходимо выполнить.
//  Источник  - Произвольный объект - объект-источник события.
//
//  КлассИсточника  - "Строка" - строковое представление класса объектов метаданных,
//					  которому принадлежит объект-источник.
//
//  ИмяИсточника  - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//
Функция ВыполнитьДействияЗначимогоСобытия(СобытиеСсылка, Источник, Идентификатор, ИмяИсточника, Результат)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектИсточникСобытия", Источник);
	Параметры.Вставить("ПолноеИмя",             Идентификатор.ПолноеИмя);
	Параметры.Вставить("ИмяИсточника",          ИмяИсточника);
	Параметры.Вставить("ЭтоКонстанта",          (Идентификатор.ПорядокКоллекции = 0));
	Параметры.Вставить("СсылочныйТип",          (НЕ Идентификатор.ЗначениеПустойСсылки=Неопределено));
	Параметры.Вставить("ВыполненныеДействия",   Новый Массив);
	Параметры.Вставить("Ошибки",                Новый Массив);
	Параметры.Вставить("СозданныеОбъекты",      Новый Массив);
	Параметры.Вставить("Событие",               СобытиеСсылка.Событие);
	
	НапоминанияПользователю = СоздатьТаблицуНапоминанияПользователю();
	
	Если СобытиеСсылка.РежимВыполнения=Перечисления.РежимыВыполненияДействий.ВТранзакции Тогда
		
		ВыполнитьДействияЗначимогоСобытияВТранзакции(СобытиеСсылка.Действия, Параметры, НапоминанияПользователю);
		
	Иначе
		
		Для Каждого Действие Из СобытиеСсылка.Действия Цикл
			
			СозданныйОбъект = ВыполнитьДействиеЗначимогоСобытия(Действие.Действие, Параметры, НапоминанияПользователю);
			
			Если
				СозданныйОбъект = Неопределено
				И СобытиеСсылка.РежимВыполнения = Перечисления.РежимыВыполненияДействий.Прерывать
			Тогда
			
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписатьНапоминания(Параметры, НапоминанияПользователю);
	
	Если Параметры.Ошибки.Количество() <> 0 Тогда
		
		Результат = Параметры.Ошибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Параметры.ВыполненныеДействия.Количество() <> 0 Тогда 
		
		Результат = Параметры.ВыполненныеДействия;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьДействияЗначимогоСобытияВТранзакции(Действия, Параметры, НапоминанияПользователю)
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого Действие Из Действия Цикл
		
			СозданныйОбъект = ВыполнитьДействиеЗначимогоСобытия(Действие.Действие, Параметры, НапоминанияПользователю);
		
			Если СозданныйОбъект = Неопределено Тогда
				
				ВызватьИсключение "Не удалось выполнить действие";
			
			КонецЕсли;
		
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		Параметры.ВыполненныеДействия.Очистить();
		
	КонецПопытки;
	
КонецПроцедуры

Функция ВыполнитьДействиеЗначимогоСобытия(Действие, Параметры, НапоминанияПользователю)
	
	Если Действие.ВидДействия=Перечисления.ВидДействияНаЗначимоеСобытие.СоздатьИЗаписатьОбъект Тогда
			
		СозданныйОбъект = СоздатьИЗаписатьОбъект(Действие, Параметры);
		
	ИначеЕсли Действие.ВидДействия=Перечисления.ВидДействияНаЗначимоеСобытие.СоздатьНапоминание Тогда
		
		НапоминанияПользователю = СоздатьНапоминание(Действие, Параметры, НапоминанияПользователю);
		СозданныйОбъект = НапоминанияПользователю;

	ИначеЕсли Действие.ВидДействия=Перечисления.ВидДействияНаЗначимоеСобытие.СоздатьЗаписьЖурналаРегистрации Тогда
		
		СозданныйОбъект = СоздатьЗаписьЖурналаРегистрации(Действие, Параметры);
		
	ИначеЕсли Действие.ВидДействия=Перечисления.ВидДействияНаЗначимоеСобытие.НаписатьЭлектронноеПисьмо Тогда
		
		СозданныйОбъект = СоздатьЭлектронноеПисьмо(Действие, Параметры);
		
	ИначеЕсли Действие.ВидДействия=Перечисления.ВидДействияНаЗначимоеСобытие.НаписатьSMS Тогда
		
		СозданныйОбъект = СоздатьСообщениеSMS(Действие, Параметры);
		
	ИначеЕсли Действие.ВидДействия=Перечисления.ВидДействияНаЗначимоеСобытие.Прочее Тогда
		
		ВыполнитьПрочееДействие(Действие, Параметры);
		
	КонецЕсли;
	
	Возврат СозданныйОбъект;
	
КонецФункции

// Функция таблицу для формирования записей в регистр НапоминанияПользователю.
Функция СоздатьТаблицуНапоминанияПользователю ()
		
	
	    ОписаниеТиповИсточника = Новый Массив;
		ОписаниеТиповИсточника.Добавить("СправочникСсылка");
		ОписаниеТиповИсточника.Добавить("ДокументСсылка");
		ОписаниеТиповИсточника.Добавить("ПланВидовХарактеристикСсылка");
		ОписаниеТиповИсточника.Добавить("ПланСчетовСсылка");
		ОписаниеТиповИсточника.Добавить("ПланВидовРасчетаСсылка");
		ОписаниеТиповИсточника.Добавить("БизнесПроцессСсылка");
		ОписаниеТиповИсточника.Добавить("ЗадачаСсылка");
		ОписаниеТиповИсточника.Добавить("ПланОбменаСсылка");
		
		НапоминанияПользователю = Новый ТаблицаЗначений;
		НапоминанияПользователю.Колонки.Добавить("Пользователь",                      Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		НапоминанияПользователю.Колонки.Добавить("Автор",                             Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		НапоминанияПользователю.Колонки.Добавить("ВремяСобытия",                      Новый ОписаниеТипов("Дата"));
		НапоминанияПользователю.Колонки.Добавить("Источник",                          Новый ОписаниеТипов(ОписаниеТиповИсточника));
		НапоминанияПользователю.Колонки.Добавить("СрокНапоминания",                   Новый ОписаниеТипов("Дата"));
		НапоминанияПользователю.Колонки.Добавить("Описание",                          Новый ОписаниеТипов("Строка"));
		НапоминанияПользователю.Колонки.Добавить("СпособУстановкиВремениНапоминания", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУстановкиВремениНапоминания"));
		НапоминанияПользователю.Колонки.Добавить("ИнтервалВремениНапоминания",        Новый ОписаниеТипов("Число"));
		НапоминанияПользователю.Колонки.Добавить("ИмяРеквизитаИсточника",             Новый ОписаниеТипов("Строка"));
		НапоминанияПользователю.Колонки.Добавить("Расписание",                        Новый ОписаниеТипов("ХранилищеЗначения"));
		НапоминанияПользователю.Колонки.Добавить("ПредставлениеИсточника",            Новый ОписаниеТипов("Строка"));
		НапоминанияПользователю.Колонки.Добавить("ДатаСоздания",                      Новый ОписаниеТипов("Дата"));
		НапоминанияПользователю.Колонки.Добавить("Действие",                	      Новый ОписаниеТипов("СправочникСсылка.ДействияНаЗначимыеСобытия"));
		НапоминанияПользователю.Колонки.Добавить("Количество",                	      Новый ОписаниеТипов("Число"));

	    Возврат НапоминанияПользователю;

КонецФункции // СоздатьТаблицуНапоминанияПользователю()

// Функция выполняет создание документа "Электронное письмо" и его отправку.
//
// Параметры:
//  Выборка  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
//
//  Параметры  - "Структура" - структура необходимых параметров.
//				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
//				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
//				к которому принадлежит объект-источник.
//               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
//               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
//               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
//													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
//
// Возвращаемое значение:
//   В случае успешного создания документа, возвращает объект-документ. 
//	 Если произошла ошибка, что возвращается НЕОПРЕДЕЛЕНО.
//
Функция СоздатьЭлектронноеПисьмо(Действие, Параметры)
	
	Автор         = Справочники.Пользователи.ПустаяСсылка();
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	Тема          = "";
	Комментарий   = "";
	ТекстПисьма   = "";
	Важность      = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	ФорматТекста  = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	
	мсвПоляВыборки = Новый Массив;
	
	// Вычисляем значение реквизита Автор.
	Если НЕ ПустаяСтрока(Действие.АвторПутьКДанным) Тогда
		РеквизитОбъектаИсточника = СтрЗаменить(Действие.АвторПутьКДанным, "Ссылка.", "");
		мсвПоляВыборки.Добавить(РеквизитОбъектаИсточника + " КАК Автор");
		
	ИначеЕсли НЕ ПустаяСтрока(Действие.АвторПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Автор            = Неопределено; 
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.АвторПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.АвторПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(Автор)<>Тип("СправочникСсылка.Пользователи") Тогда
				Автор =  Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие'") + " <" + Действие.Наименование + "> - " 
				+ НСтр("ru = 'ошибка при заполнении реквизита <Автор электронного письма>. Ошибка при выполнении произвольного кода:'") 
				+ " " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Автор)=Тип("СправочникСсылка.Пользователи") Тогда
			Автор = Действие.Автор;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Учетная запись.
	Если НЕ ПустаяСтрока(Действие.эпУчетнаяЗаписьПутьКДанным) Тогда
		РеквизитОбъектаИсточника = СтрЗаменить(Действие.эпУчетнаяЗаписьПутьКДанным, "Ссылка.", "");
		мсвПоляВыборки.Добавить(РеквизитОбъектаИсточника + " КАК УчетнаяЗапись");
		
	ИначеЕсли НЕ ПустаяСтрока(Действие.эпУчетнаяЗаписьПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			УчетнаяЗапись    = Неопределено; 
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.эпУчетнаяЗаписьПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.эпУчетнаяЗаписьПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(УчетнаяЗапись)<>Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
				УчетнаяЗапись =  Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие'") +" <" + Действие.Наименование + "> - " 
				+ НСтр("ru = 'ошибка при заполнении реквизита <Учетная запись>. Ошибка при выполнении произвольного кода:'") 
				+ " " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.эпУчетнаяЗапись)=Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			УчетнаяЗапись = Действие.эпУчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;

	// Вычисляем значение реквизита Тема.
	Если НЕ ПустаяСтрока(Действие.ТемаПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Тема             = Неопределено; 
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.ТемаПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.ТемаПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(Тема)<>Тип("Строка") Тогда
				Тема =  Строка(Тема);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие'") + " <" + Действие.Наименование + "> - "
				+ НСтр("ru = 'ошибка при заполнении реквизита <Тема>. Ошибка при выполнении произвольного кода:'") 
				+ " " +ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Тема)=Тип("Строка") Тогда
			Тема = Действие.Тема;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Комментарий.
	Если НЕ ПустаяСтрока(Действие.КомментарийПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Комментарий      = Неопределено; 
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.КомментарийПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.КомментарийПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(Комментарий)<>Тип("Строка") Тогда
				Комментарий =  Строка(Комментарий);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие'") + " <" + Действие.Наименование + "> - "
				 + НСтр("ru = 'ошибка при заполнении реквизита <Комментарий>. Ошибка при выполнении произвольного кода:'")
				 + " " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Комментарий)=Тип("Строка") Тогда
			Комментарий = Действие.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Важность.
	Если НЕ ПустаяСтрока(Действие.ВажностьПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Важность         = Неопределено;
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.ВажностьПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.ВажностьПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(Важность)<>Тип("ПеречислениеСсылка.ВариантыВажностиВзаимодействия") Тогда
				Важность =  Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие'") + " <" + Действие.Наименование + "> - "
				+ НСтр("ru = 'ошибка при заполнении реквизита <Важность>. Ошибка при выполнении произвольного кода:'") + " "
				+ ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Важность)=Тип("ПеречислениеСсылка.ВариантыВажностиВзаимодействия") Тогда
			Важность = Действие.Важность;
		КонецЕсли;
	КонецЕсли; 
	
	// Вычисляем значение реквизита Текст письма.
	Если НЕ ПустаяСтрока(Действие.эпТекстПисьмаПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			ТекстПисьма      = Неопределено; 
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.эпТекстПисьмаПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.эпТекстПисьмаПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(ТекстПисьма)<>Тип("Строка") Тогда
				ТекстПисьма =  Строка(ТекстПисьма);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить(НСтр("ru = 'Действие'") + " <" + Действие.Наименование + "> - "
				+ НСтр("ru = 'ошибка при заполнении реквизита <Текст письма>. Ошибка при выполнении произвольного кода:'") + " "
				+ ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.эпТекстПисьма)=Тип("Строка") Тогда
			ТекстПисьма = Действие.эпТекстПисьма;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Формат текста.
	Если НЕ Действие.эпФорматТекста.Пустая() Тогда
		ФорматТекста = Действие.эпФорматТекста;
	КонецЕсли;
	
	// Заполняем реквизиты, которые заполняются по объекту-источнику.
	Если мсвПоляВыборки.Количество()<>0 Тогда
		СсылочныйТип = Параметры.СсылочныйТип;
		ЭтоКонстанта = Параметры.ЭтоКонстанта;
		ИмяТаблицы = Параметры.ПолноеИмя;
		Если ЭтоКонстанта ИЛИ СсылочныйТип Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ";
			Для Сч=0 По (мсвПоляВыборки.Количество()-1) Цикл
				ТекстЗапроса = ТекстЗапроса + " " + мсвПоляВыборки[Сч];
				Если Сч<(мсвПоляВыборки.Количество()-1) Тогда
					ТекстЗапроса = ТекстЗапроса + ",";
				КонецЕсли;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + " ИЗ ";
			ТекстЗапроса = ТекстЗапроса + ИмяТаблицы;
			Если СсылочныйТип Тогда
				ТекстЗапроса = ТекстЗапроса + " ГДЕ Ссылка=&Ссылка";
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Если СсылочныйТип Тогда
				Запрос.УстановитьПараметр("Ссылка", Параметры.ОбъектИсточникСобытия.Ссылка);
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			ТекВыборка = Запрос.Выполнить().Выбрать();
			
			Если ТекВыборка.Следующий() Тогда 
				Для Каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
					Если ТекКолонка.Имя="Автор" Тогда
						Если ТипЗнч(ТекВыборка[ТекКолонка.Имя])=Тип("СправочникСсылка.Пользователи") Тогда
							Автор = ТекВыборка[ТекКолонка.Имя];
						КонецЕсли;
					ИначеЕсли ТекКолонка.Имя="УчетнаяЗапись" Тогда
						Если ТипЗнч(ТекВыборка[ТекКолонка.Имя])=Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
							УчетнаяЗапись = ТекВыборка[ТекКолонка.Имя]; 
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем получателей письма.
	тзПолучателиПисьма  = Новый ТаблицаЗначений;
	тзПолучателиПисьма.Колонки.Добавить("АдресЭлектроннойПочты");
	тзПолучателиПисьма.Колонки.Добавить("Представление");
	тзПолучателиПисьма.Колонки.Добавить("КодГруппыАдреса");
	тзПолучателиПисьма.Колонки.Добавить("Контакт");
	
	тзПолучателиВыгрузка = Действие.ПолучателиПисьма.Выгрузить();
	Для Каждого ТекСтрока Из тзПолучателиВыгрузка Цикл
		Если ТекСтрока.ВидПравила=Перечисления.ВидыПравил.ТочноеЗначение Тогда
			Если НЕ ПустаяСтрока(ТекСтрока.АдресЭлектроннойПочты) Тогда
				НоваяСтрока = тзПолучателиПисьма.Добавить();
				НоваяСтрока.АдресЭлектроннойПочты = ТекСтрока.АдресЭлектроннойПочты;
				НоваяСтрока.Представление         = ТекСтрока.Представление;
				НоваяСтрока.КодГруппыАдреса       = ТекСтрока.КодГруппыАдреса;
				НоваяСтрока.Контакт               = ТекСтрока.Контакт;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.ВидПравила=Перечисления.ВидыПравил.ПроизвольныйКод Тогда
			Попытка
				ОбъектИсточник        = Параметры.ОбъектИсточникСобытия;
				СозданныеОбъекты      = Параметры.СозданныеОбъекты;
				АдресЭлектроннойПочты = Неопределено;
				//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(ТекСтрока.ПроизвольныйКод);
				УстановитьБезопасныйРежим(Истина);
				Выполнить(ТекСтрока.ПроизвольныйКод);
				УстановитьБезопасныйРежим(Ложь);
				Если ТипЗнч(АдресЭлектроннойПочты)=Тип("Строка") Тогда
					Если НЕ ПустаяСтрока(АдресЭлектроннойПочты) Тогда
						НоваяСтрока = тзПолучателиПисьма.Добавить();
						НоваяСтрока.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
						НоваяСтрока.Представление         = "";
						НоваяСтрока.Контакт               = ТекСтрока.Контакт;
						НоваяСтрока.КодГруппыАдреса       = ТекСтрока.КодГруппыАдреса;
					КонецЕсли;
				КонецЕсли;
			Исключение
				Параметры.Ошибки.Добавить(НСтр("ru = 'Действие'") + " <" + Действие.Наименование + "> - "
					+ НСтр("ru = 'ошибка при заполнении получателей электронного письма. Ошибка при выполнении произвольного кода:'")
					+" " + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// Получим представление отправителя.
	ОтправительПредставление = ?(СокрЛП(УчетнаяЗапись.Пользователь) = "", "<", УчетнаяЗапись.Пользователь + " <") 
		+ УчетнаяЗапись.АдресЭлектроннойПочты + ">" ;
	
	// Получаем вариант записи электронного письма.
	ВариантЗаписи = Действие.эпВариантЗаписи;
	
	// СОЗДАНИЕ ДОКУМЕНТА "ЭЛЕКТРОННОЕ ПИСЬМО".
	НовыйДокумент = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	
	// Исключаем бесконечный цикл.
	НовыйДокумент.ДополнительныеСвойства.Вставить("ИспользоватьЗначимыеСобытия", Истина);
	НовыйДокумент.Заполнить(Неопределено);
	НовыйДокумент.Дата                     = ТекущаяДатаСеанса();
	НовыйДокумент.Автор                    = Автор;
	НовыйДокумент.Важность                 = ?(Важность.Пустая(), Перечисления.ВариантыВажностиЗадачи.Обычная, Важность);
	НовыйДокумент.ЕстьВложения             = Ложь;
	НовыйДокумент.Комментарий              = Комментарий;
	Если ФорматТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		НовыйДокумент.Текст                = ТекстПисьма;
	Иначе
		НовыйДокумент.ТекстHTML            = ТекстПисьма;
	КонецЕсли;
	НовыйДокумент.Тема                     = Тема;
	НовыйДокумент.УчетнаяЗапись            = УчетнаяЗапись;
	НовыйДокумент.ОтправительПредставление = УчетнаяЗапись;
	НовыйДокумент.ТипТекста                = ФорматТекста;
		
	// Теперь заполняем табличную часть документа "Получатели"
	// За одно сформируем представление всех получателей.
	ПредставлениеПолучателейПисьма = "";
	Для Каждого ТекПолучатель Из тзПолучателиПисьма Цикл
		Если ТекПолучатель.КодГруппыАдреса = "Кому" Тогда
			НоваяСтрока = НовыйДокумент.ПолучателиПисьма.Добавить();
		ИначеЕсли ТекПолучатель.КодГруппыАдреса = "Копия" Тогда
			НоваяСтрока = НовыйДокумент.ПолучателиКопий.Добавить();
		ИначеЕсли ТекПолучатель.КодГруппыАдреса = "СкрытаяКопия" Тогда
			НоваяСтрока = НовыйДокумент.ПолучателиСкрытыхКопий.Добавить();
		КонецЕсли;
		НоваяСтрока.Адрес = ТекПолучатель.АдресЭлектроннойПочты;
		НоваяСтрока.Представление = ТекПолучатель.Представление;
		НоваяСтрока.Контакт       = ТекПолучатель.Контакт;
	КонецЦикла;
	НовыйДокумент.СписокПолучателейПисьма = 
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(НовыйДокумент.ПолучателиПисьма, Ложь);
	НовыйДокумент.СписокПолучателейКопий = 
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(НовыйДокумент.ПолучателиКопий, Ложь);
	НовыйДокумент.СписокПолучателейСкрытыхКопий = 
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(НовыйДокумент.ПолучателиСкрытыхКопий, Ложь);
	
	// Выполняем запись созданного документа.
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Параметры.ВыполненныеДействия.Добавить("Создано электронное письмо: " + НовыйДокумент);	
		
		// Если нужно, пробуем отправить письмо.
		Если ВариантЗаписи=Перечисления.ВариантЗаписиЭлектронногоПисьма.ОтправитьНемедленно Тогда
			
			Попытка
				ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(НовыйДокумент).ИдентификаторПисьмаSMTP;
			Исключение
				Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
			Если НЕ НовыйДокумент.УдалятьПослеОтправки Тогда
				
				НовыйДокумент.ИдентификаторСообщения = ИдентификаторПисьма;
				НовыйДокумент.СтатусПисьма    = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
				НовыйДокумент.ДатаОтправления = ТекущаяДатаСеанса();
				НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
				
				Взаимодействия.УстановитьПапкуЭлектронногоПисьма(
				НовыйДокумент.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(НовыйДокумент.Ссылка));
				ТекущийСтатусПисьма = НовыйДокумент.СтатусПисьма;
				
			Иначе
				
				НовыйДокумент.Прочитать();
				НовыйДокумент.Удалить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование 
			+ "> - " + НСтр("ru = 'ошибка при записи документа ""Электронное письмо"":'") + " "+ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат НовыйДокумент;
КонецФункции // СоздатьЭлектронноеПисьмо() 

// Функция выполняет создание объекта произвольного вида.
// А также ряд дополнительных действий. Например, проведение документа.
//
// Параметры:
//  Выборка  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
//
//  Параметры  - "Структура" - структура необходимых параметров.
//				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
//				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
//				 к которому принадлежит объект-источник.
//               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
//               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
//               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
//													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
//
// Возвращаемое значение:
//   В случае успешного создания объекта возвращает созданный объект. 
//	 Если произошла ошибка, что возвращается НЕОПРЕДЕЛЕНО.
//
Функция СоздатьИЗаписатьОбъект(Действие, Параметры)
	
	ТипОбъекта = Действие.ТипОбъекта;
	Если ПустаяСтрока(ТипОбъекта) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем класс объекта метаданных, к которому принадлежит СОЗДАВАЕМЫЙ объект.
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Действие.ТипОбъекта.ПолноеИмя);
	КлассОбъекта     = Действие.ТипОбъекта.Родитель.ПолноеИмя;
	
	Если ОбъектМетаданных=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КлассОбъекта="Константы" Тогда
		НовыйОбъект = Константы[ОбъектМетаданных.Имя].СоздатьМенеджерЗначения();
		
	ИначеЕсли КлассОбъекта="Справочники" Тогда
		НовыйОбъект = Справочники[ОбъектМетаданных.Имя].СоздатьЭлемент();
		
	ИначеЕсли КлассОбъекта="Документы" Тогда
		НовыйОбъект = Документы[ОбъектМетаданных.Имя].СоздатьДокумент();
		
	ИначеЕсли КлассОбъекта="ПланыВидовХарактеристик" Тогда
		НовыйОбъект = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].СоздатьЭлемент();
		
	ИначеЕсли КлассОбъекта="ПланыСчетов" Тогда
		НовыйОбъект = ПланыСчетов[ОбъектМетаданных.Имя].СоздатьСчет();
		
	ИначеЕсли КлассОбъекта="ПланыВидовРасчета" Тогда
		НовыйОбъект = ПланыВидовРасчета[ОбъектМетаданных.Имя].СоздатьВидРасчета();
		
	ИначеЕсли КлассОбъекта="РегистрыСведений" Тогда
		НаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		НовыйОбъект  = НаборЗаписей.Добавить();
		
	ИначеЕсли КлассОбъекта="БизнесПроцессы" Тогда
		НовыйОбъект = БизнесПроцессы[ОбъектМетаданных.Имя].СоздатьБизнесПроцесс();
		
	ИначеЕсли КлассОбъекта = "Задачи" Тогда
		НовыйОбъект = Задачи[ОбъектМетаданных.Имя].СоздатьЗадачу();
		
	ИначеЕсли КлассОбъекта = "ПланыОбмена" Тогда
		НовыйОбъект = ПланыОбмена[ОбъектМетаданных.Имя].СоздатьУзел();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нужно, задействуем механизм ввода на основании.
	Попытка
		Если Действие.ЗаполнитьРеквизитыПоУмолчанию Тогда
			НовыйОбъект.Заполнить(Неопределено);
		ИначеЕсли Действие.ЗадействоватьВводНаОсновании Тогда
			НовыйОбъект.Заполнить(Параметры.ОбъектИсточникСобытия.Ссылка);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// ТОЧНЫЕ ЗНАЧЕНИЯ
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидПравила", Перечисления.ВидыПравил.ТочноеЗначение);
	тзСоответствия = Действие.Соответствия.Выгрузить();
	мсвПравил      = тзСоответствия.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекПравило Из мсвПравил Цикл
		Если КлассОбъекта="Константы" Тогда
			НовыйОбъект.Значение = ТекПравило.Правило;
			Прервать;
		Иначе
			НовыйОбъект[СтрЗаменить(ТекПравило.РеквизитОбъекта, "Ссылка.", "")] = ТекПравило.Правило;
		КонецЕсли;
	КонецЦикла;
	
	// РЕКВИЗИТЫ ОБЪЕКТА-ИСТОЧНИКА.
	мсвПоляВыборки = Новый Массив;	
	СтруктураПоиска.Вставить("ВидПравила", Перечисления.ВидыПравил.РеквизитОбъектаИсточника);
	мсвПравил = тзСоответствия.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекПравило Из мсвПравил Цикл
		Если НЕ ПустаяСтрока(ТекПравило.ПутьКДанным) Тогда
			Если КлассОбъекта="Константы" Тогда
				мсвПоляВыборки.Добавить("" + ТекПравило.ПутьКДанным + " КАК " + "Значение");
				Прервать;
			Иначе
				РеквизитОбъектаИсточника = СтрЗаменить(ТекПравило.ПутьКДанным, "Ссылка.", "");
				РеквизитНовогоОбъекта    = СтрЗаменить(ТекПравило.РеквизитОбъекта, "Ссылка.", "");
				мсвПоляВыборки.Добавить("" + РеквизитОбъектаИсточника + " КАК " + РеквизитНовогоОбъекта);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если мсвПоляВыборки.Количество() <> 0 Тогда
		СсылочныйТип = Параметры.СсылочныйТип;
		ЭтоКонстанта = Параметры.ЭтоКонстанта;
		ИмяТаблицы = Параметры.ПолноеИмя;
		Если ЭтоКонстанта ИЛИ СсылочныйТип Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ";
			Для Сч = 0 По (мсвПоляВыборки.Количество() - 1) Цикл
				ТекстЗапроса = ТекстЗапроса + " " + мсвПоляВыборки[Сч];
				Если Сч < (мсвПоляВыборки.Количество() - 1) Тогда
					ТекстЗапроса = ТекстЗапроса + ",";
				КонецЕсли;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + " ИЗ ";
			ТекстЗапроса = ТекстЗапроса + ИмяТаблицы;
			Если СсылочныйТип Тогда
				ТекстЗапроса = ТекстЗапроса + " ГДЕ Ссылка=&Ссылка";
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Если СсылочныйТип Тогда
				Запрос.УстановитьПараметр("Ссылка", Параметры.ОбъектИсточникСобытия.Ссылка);
			КонецЕсли;
			
			ТекВыборка = Запрос.Выполнить().Выбрать();
			
			Если ТекВыборка.Следующий() Тогда
				Для Каждого ТекПравило Из мсвПравил Цикл
					Реквизит = СтрЗаменить(ТекПравило.РеквизитОбъекта, "Ссылка.", "");
					Попытка
						Если КлассОбъекта = "Константы" Тогда
							НовыйОбъект.Значение = ТекВыборка.Значение;
							Прервать;
						Иначе
							НовыйОбъект[Реквизит] = ТекВыборка[Реквизит];
						КонецЕсли;
					Исключение
						Если КлассОбъекта = "Константы" Тогда
							Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
								+ НСтр("ru = 'ошибка при установке значения константы. Неверное значение реквизита объекта-источника:'")
								+ " " + ОписаниеОшибки());	
						Иначе
							Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
								+ НСтр("ru = 'ошибка при установке реквизита'") + " <" + ТекПравило.ПредставлениеРеквизита + ">. " 
								+ НСтр("ru = 'Неверное значение реквизита объекта-источника:'") + " " + ОписаниеОшибки());
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// ПРОИЗВОЛЬНЫЙ КОД
	СтруктураПоиска.Вставить("ВидПравила", Перечисления.ВидыПравил.ПроизвольныйКод);
	мсвПравил = тзСоответствия.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекПравило Из мсвПравил Цикл 
		ЗначениеРеквизита = Неопределено;
		ОбъектИсточник    = Параметры.ОбъектИсточникСобытия;
		ТекущийОбъект     = НовыйОбъект;
		СозданныеОбъекты  = Параметры.СозданныеОбъекты;
		
		Реквизит = СтрЗаменить(ТекПравило.РеквизитОбъекта, "Ссылка.", "");
		Попытка
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(ТекПравило.ПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(ТекПравило.ПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Попытка
				Если КлассОбъекта = "Константы" Тогда
					НовыйОбъект.Значение = ЗначениеРеквизита;
					Прервать;
				Иначе
					НовыйОбъект[Реквизит] = ЗначениеРеквизита;
				КонецЕсли;
			Исключение
				Если КлассОбъекта = "Константы" Тогда
					Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - "
						+ НСтр("ru = 'ошибка при установке значения константы. Не соответствие типов:'") 
						+ " " + ОписаниеОшибки());	
				Иначе
					Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
						+ НСтр("ru = 'ошибка при установке реквизита'") + " <" + ТекПравило.ПредставлениеРеквизита 
						+ ">. " + НСтр("ru = 'Не соответствие типов:'") + " " + ОписаниеОшибки());
				КонецЕсли;
			КонецПопытки;
		Исключение
			Если КлассОбъекта="Константы" Тогда
				Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - "
					+ НСтр("ru = 'ошибка при установке значения константы. Ошибка выполнения произвольного кода:'") + " "
					+ ОписаниеОшибки());
			Иначе
				Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - "
					+ НСтр("ru = 'ошибка при установке реквизита'") + " <" + ТекПравило.ПредставлениеРеквизита 
					+ ">. " + НСтр("ru = 'Ошибка выполнения произвольного кода:'") + " " + ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	// ЗАПИСЬ ОБЪЕКТА
	// Пометим объект, чтобы исключить бесконечную рекурсию.
	Если КлассОбъекта="РегистрыСведений" Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("ИспользоватьЗначимыеСобытия", Истина);
	Иначе
		НовыйОбъект.ДополнительныеСвойства.Вставить("ИспользоватьЗначимыеСобытия", Истина);
	КонецЕсли;
	
	Если КлассОбъекта="Документы" Тогда
		Попытка
			НовыйОбъект.Записать(РежимЗаписиДокумента.Запись);
			Параметры.ВыполненныеДействия.Добавить(НСтр("ru = 'Записан документ:'") + " " + НовыйОбъект);
		Исключение
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование 
				+ "> - " + НСтр("ru = 'ошибка при записи документа:'") + " " +ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		Если Действие.ПровестиДокумент Тогда
			Попытка
				НовыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Параметры.ВыполненныеДействия.Добавить("Проведен документ: " + НовыйОбъект);
			Исключение
				Параметры.Ошибки.Добавить("Действие <" + Действие.Наименование 
					+ "> - " + НСтр("ru = 'ошибка при проведении документа'") + " <" + НовыйОбъект + ">: "+ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли КлассОбъекта="РегистрыСведений" Тогда
		
		// Реквизиты записи соответствующие измерениям должны быть обязательно заполнены,
		// чтобы по ним можно было установить отбор набора записей.
		Если ОбъектМетаданных.РежимЗаписи<>Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			Если НЕ ЗначениеЗаполнено(НовыйОбъект.Регистратор) Тогда
				Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование 
					+ "> - " + НСтр("ru = 'не заполнен реквизит ""Регистратор""'"));
			Иначе
				НаборЗаписей.Отбор["Регистратор"].Установить(НовыйОбъект.Регистратор);
			КонецЕсли;
		Иначе
			Для Каждого ТекИзмерение Из ОбъектМетаданных.Измерения Цикл
				Если НЕ ЗначениеЗаполнено(НовыйОбъект[ТекИзмерение.Имя]) Тогда
					Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование 
						+ "> - " + НСтр("ru = 'не заполнен реквизит'") + " """ + ТекИзмерение.Представление() + """");
				Иначе
					НаборЗаписей.Отбор[ТекИзмерение.Имя].Установить(НовыйОбъект[ТекИзмерение.Имя]);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектМетаданных.ПериодичностьРегистраСведений <>
					Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					
				Если НЕ ЗначениеЗаполнено(НовыйОбъект.Период) Тогда
					Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
						+ НСтр("ru = 'не заполнен реквизит ""Период""'"));
				Иначе
					НаборЗаписей.Отбор["Период"].Установить(НовыйОбъект.Период);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Ошибки.Количество()<>0 Тогда
			Возврат Неопределено;
		Иначе
			Попытка
				НаборЗаписей.Записать();
				Параметры.ВыполненныеДействия.Добавить(НСтр("ru = 'Создана запись регистра сведений'") + " <" 
					+ ОбъектМетаданных.Имя + ">");
			Исключение
				Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
					+ НСтр("ru = 'ошибка при записи объекта'") + " <" + НовыйОбъект + ">: "+ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			НовыйОбъект.Записать();
			Если КлассОбъекта="Константы" Тогда
				Параметры.ВыполненныеДействия.Добавить("Установлено значение константы:" + " " 
					+ НовыйОбъект.Метаданные().Представление());	
			Иначе
				Параметры.ВыполненныеДействия.Добавить("Создан объект:" + " " + НовыйОбъект);
			КонецЕсли;
		Исключение
			Если КлассОбъекта="Константы" Тогда
				Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
					+ НСтр("ru = 'ошибка при установлении значения константы'") + " <" + НовыйОбъект.Метаданные().Представление() 
					+ ">: "+ОписаниеОшибки());
			Иначе
				Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
					+ НСтр("ru = 'ошибка при записи объекта'") + " <" + НовыйОбъект + ">: "+ОписаниеОшибки());
			КонецЕсли;
			
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат НовыйОбъект;
	
КонецФункции // СоздатьИЗаписатьОбъект()

// Функция выполняет создание записи в журнале регистрации.
//
// Параметры:
//  Выборка  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
//
//  Параметры  - "Структура" - структура необходимых параметров.
//				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
//				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
//				 к которому принадлежит объект-источник.
//               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
//               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
//               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
//													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
//
// Возвращаемое значение:
//   В случае успешного создания записи в журнале регистрации возвращает пустую строку. 
//	 Если произошла ошибка, что возвращается НЕОПРЕДЕЛЕНО.
//
Функция СоздатьЗаписьЖурналаРегистрации(Действие, Параметры)
	
	Событие          = "";
	УровеньВажности  = Неопределено;
	ОбъектМетаданных = Неопределено;
	Данные           = Неопределено;
	Комментарий      = "";
	Результат        = Истина;
	
	// Определяем регистрируемое событие.
	Если НЕ ПустаяСтрока(Действие.жрСобытиеПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Событие          = Неопределено;
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.жрСобытиеПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.жрСобытиеПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Событие = Строка(Событие);
		Исключение
			Событие = "";
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - "
				+ НСтр("ru = 'ошибка при заполнении реквизита <Регистрируемое событие>. Ошибка при выполнении произвольного кода:'") 
				+ " " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Событие = Действие.жрСобытие;
	КонецЕсли;
	
	Если ПустаяСтрока(Событие) Тогда
		Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
			+ НСтр("ru = 'обязательный реквизит <Регистрируемое событие> - не заполнен.'"));
		Результат = Ложь;
	КонецЕсли;
	
	// Определяем уровень важности.
	Если Действие.жрУровеньВажности="Информация" Тогда
		УровеньВажности = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли Действие.жрУровеньВажности="Ошибка" Тогда
		УровеньВажности = УровеньЖурналаРегистрации.Ошибка
	ИначеЕсли Действие.жрУровеньВажности="Предупреждение" Тогда
		УровеньВажности = УровеньЖурналаРегистрации.Предупреждение
	ИначеЕсли Действие.жрУровеньВажности="Примечание" Тогда
		УровеньВажности = УровеньЖурналаРегистрации.Примечание
	Иначе
		УровеньВажности = Неопределено;
	КонецЕсли;
	
	// Определяем объект метаданных.
	Если НЕ ПустаяСтрока(Действие.жрОбъектМетаданныхИмяОбъекта) Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Действие.жрОбъектМетаданныхИмяОбъекта);
	ИначеЕсли НЕ ПустаяСтрока(Действие.жрОбъектМетаданных.ПолноеИмя) Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Действие.жрОбъектМетаданных.ПолноеИмя);
	ИначеЕсли НЕ ПустаяСтрока(Действие.жрОбъектМетаданныхПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			ОбъектМетаданных = Неопределено;
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.жрОбъектМетаданныхПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.жрОбъектМетаданныхПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(ОбъектМетаданных)<>Тип("ОбъектМетаданных") Тогда
				ОбъектМетаданных = Неопределено;
			КонецЕсли;
		Исключение
			ОбъектМетаданных = Неопределено;
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
				+ НСтр("ru = 'ошибка при заполнении реквизита <Объект метаданных>. Ошибка при выполнении произвольного кода:'") 
				+ " " + ОписаниеОшибки());
		КонецПопытки; 
	Иначе
		ОбъектМетаданных = Неопределено;
	КонецЕсли;
	
	// Теперь данные
	Если НЕ ПустаяСтрока(Действие.жрДанныеПутьКДанным) Тогда
		
		// Запрос
		СсылочныйТип = Параметры.СсылочныйТип;
		ЭтоКонстанта = Параметры.ЭтоКонстанта;
		ИмяТаблицы = Параметры.ПолноеИмя;
		Если ЭтоКонстанта ИЛИ СсылочныйТип Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			| " + СтрЗаменить(Действие.жрДанныеПутьКДанным, "Ссылка.", "") + " КАК Данные ";
			ТекстЗапроса = ТекстЗапроса + " ИЗ ";
			ТекстЗапроса = ТекстЗапроса + ИмяТаблицы;
			Если СсылочныйТип Тогда
				ТекстЗапроса = ТекстЗапроса + " ГДЕ Ссылка=&Ссылка";
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Если СсылочныйТип Тогда
				Запрос.УстановитьПараметр("Ссылка", Параметры.ОбъектИсточникСобытия.Ссылка);
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			ТекВыборка = Запрос.Выполнить().Выбрать();
			
			Если ТекВыборка.Следующий() Тогда 
				Данные = ТекВыборка.Данные;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли НЕ ПустаяСтрока(Действие.жрДанныеПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Данные           = Неопределено;
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.жрДанныеПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.жрДанныеПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
		Исключение
			Данные = Неопределено;
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
				+ НСтр("ru = 'ошибка при заполнении реквизита <Данные>. Ошибка при выполнении произвольного кода:'") 
				+ " "+ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Данные = Действие.жрДанные;
	КонецЕсли;
	
	// Комментарий
	Если НЕ ПустаяСтрока(Действие.КомментарийПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Комментарий      = Неопределено;
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.КомментарийПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.КомментарийПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Комментарий = Строка(Комментарий);
		Исключение
			Комментарий = "";
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
			+ НСтр("ru = 'ошибка при заполнении реквизита <Комментарий>. Ошибка при выполнении произвольного кода:'")
			+ " " + ОписаниеОшибки());
		КонецПопытки; 
	Иначе
		Комментарий = Действие.Комментарий;
	КонецЕсли;
	
	// СОЗДАНИЕ ЗАПИСИ
	Попытка
		ЗаписьЖурналаРегистрации(Событие, УровеньВажности, ОбъектМетаданных, Данные, Комментарий, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		Параметры.ВыполненныеДействия.Добавить(НСтр("ru = 'Записано событие'") + " <" + Событие + "> " 
			+ НСтр("ru = 'в журнал регистрации.'")); 
	Исключение
		Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
			+ НСтр("ru = 'ошибка записи события в журнал регистрации:'") + " " + ОписаниеОшибки()); 
	КонецПопытки;
	
	// Т.к. ссылаться на запись в журнале регистрации нельзя, то просто вернем
	// пустую строку (а не НЕОПРЕДЕЛЕНО), тогда ошибка не будет зафиксирована.
	Возврат "";
	
КонецФункции // СоздатьЗаписьЖурналаРегистрации() 

// Функция выполняет создание документа "Сообщение SMS" и его отправку.
//
// Параметры:
//  Выборка  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
//
//  Параметры  - "Структура" - структура необходимых параметров.
//				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
//				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
//				к которому принадлежит объект-источник.
//               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
//               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
//               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
//													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
//
// Возвращаемое значение:
//   В случае успешного создания документа, возвращает объект-документ. 
//	 Если произошла ошибка, что возвращается НЕОПРЕДЕЛЕНО.
//
Функция СоздатьСообщениеSMS(Действие, Параметры)
	
	Автор         = Справочники.Пользователи.ПустаяСсылка();
	Тема          = "";
	Комментарий   = "";
	ТекстСообщения   = "";
	Важность      = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	
	мсвПоляВыборки = Новый Массив;
	
	// Вычисляем значение реквизита Автор.
	Если НЕ ПустаяСтрока(Действие.АвторПутьКДанным) Тогда
		РеквизитОбъектаИсточника = СтрЗаменить(Действие.АвторПутьКДанным, "Ссылка.", "");
		мсвПоляВыборки.Добавить(РеквизитОбъектаИсточника + " КАК Автор");
		
	ИначеЕсли НЕ ПустаяСтрока(Действие.АвторПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Автор            = Неопределено; 
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.АвторПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.АвторПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(Автор)<>Тип("СправочникСсылка.Пользователи") Тогда
				Автор =  Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - "
				+ НСтр("ru = 'ошибка при заполнении реквизита <Автор электронного письма>. Ошибка при выполнении произвольного кода:'")
				+ " " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Автор)=Тип("СправочникСсылка.Пользователи") Тогда
			Автор = Действие.Автор;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Тема.
	Если НЕ ПустаяСтрока(Действие.ТемаПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Тема             = Неопределено; 
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.ТемаПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.ТемаПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(Тема)<>Тип("Строка") Тогда
				Тема =  Строка(Тема);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - "
				+ НСтр("ru = 'ошибка при заполнении реквизита <Тема>. Ошибка при выполнении произвольного кода:'") 
				+ " " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Тема)=Тип("Строка") Тогда
			Тема = Действие.Тема;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Комментарий.
	Если НЕ ПустаяСтрока(Действие.КомментарийПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Комментарий      = Неопределено; 
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.КомментарийПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.КомментарийПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(Комментарий)<>Тип("Строка") Тогда
				Комментарий =  Строка(Комментарий);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
				+ НСтр("ru = 'ошибка при заполнении реквизита <Комментарий>. Ошибка при выполнении произвольного кода:'")
				+ " " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Комментарий)=Тип("Строка") Тогда
			Комментарий = Действие.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	// Вычисляем значение реквизита Важность.
	Если НЕ ПустаяСтрока(Действие.ВажностьПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			Важность         = Неопределено;
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.ВажностьПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.ВажностьПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(Важность)<>Тип("ПеречислениеСсылка.ВариантыВажностиВзаимодействия") Тогда
				Важность =  Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
				+ НСтр("ru = 'ошибка при заполнении реквизита <Важность>. Ошибка при выполнении произвольного кода:'") 
				+ " " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.Важность)=Тип("ПеречислениеСсылка.ВариантыВажностиВзаимодействия") Тогда
			Важность = Действие.Важность;
		КонецЕсли;
	КонецЕсли; 
	
	// Вычисляем значение реквизита Текст письма.
	Если НЕ ПустаяСтрока(Действие.SMSТекстСообщенияПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			ТекстСообщения      = Неопределено; 
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.SMSТекстСообщенияПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.SMSТекстСообщенияПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(ТекстСообщения)<>Тип("Строка") Тогда
				ТекстСообщения =  Строка(ТекстСообщения);
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - "
				+ НСтр("ru = 'ошибка при заполнении реквизита <Текст письма>. Ошибка при выполнении произвольного кода:'") 
				+ " " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ТипЗнч(Действие.SMSТекстСообщения)=Тип("Строка") Тогда
			ТекстСообщения = Действие.SMSТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем реквизиты, которые заполняются по объекту-источнику.
	Если мсвПоляВыборки.Количество()<>0 Тогда
		СсылочныйТип = Параметры.СсылочныйТип;
		ЭтоКонстанта = Параметры.ЭтоКонстанта;
		ИмяТаблицы = Параметры.ПолноеИмя;
		Если ЭтоКонстанта ИЛИ СсылочныйТип Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ";
			Для Сч=0 По (мсвПоляВыборки.Количество()-1) Цикл
				ТекстЗапроса = ТекстЗапроса + " " + мсвПоляВыборки[Сч];
				Если Сч<(мсвПоляВыборки.Количество()-1) Тогда
					ТекстЗапроса = ТекстЗапроса + ",";
				КонецЕсли;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + " ИЗ ";
			ТекстЗапроса = ТекстЗапроса + ИмяТаблицы;
			Если СсылочныйТип Тогда
				ТекстЗапроса = ТекстЗапроса + " ГДЕ Ссылка=&Ссылка";
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Если СсылочныйТип Тогда
				Запрос.УстановитьПараметр("Ссылка", Параметры.ОбъектИсточникСобытия.Ссылка);
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			ТекВыборка = Запрос.Выполнить().Выбрать();
			
			Если ТекВыборка.Следующий() Тогда 
				Для Каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
					Если ТекКолонка.Имя="Автор" Тогда
						Если ТипЗнч(ТекВыборка[ТекКолонка.Имя])=Тип("СправочникСсылка.Пользователи") Тогда
							Автор = ТекВыборка[ТекКолонка.Имя];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем получателей письма.
	тзПолучателиПисьма  = Новый ТаблицаЗначений;
	тзПолучателиПисьма.Колонки.Добавить("НомерДляОтправки");
	тзПолучателиПисьма.Колонки.Добавить("ПредставлениеКонтакта");
	тзПолучателиПисьма.Колонки.Добавить("Контакт");
	тзПолучателиПисьма.Колонки.Добавить("КакСвязаться");
	
	тзПолучателиВыгрузка = Действие.ПолучателиSMS.Выгрузить();
	Для Каждого ТекСтрока Из тзПолучателиВыгрузка Цикл
		Если НЕ ПустаяСтрока(ТекСтрока.ПроизвольныйКод) Тогда
			Попытка
				ОбъектИсточник        = Параметры.ОбъектИсточникСобытия;
				СозданныеОбъекты      = Параметры.СозданныеОбъекты;
				Телефон = Неопределено;
				//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(ТекСтрока.ПроизвольныйКод);
				УстановитьБезопасныйРежим(Истина);
				Выполнить(ТекСтрока.ПроизвольныйКод);
				УстановитьБезопасныйРежим(Ложь);
				Если ТипЗнч(Телефон)=Тип("Строка") Тогда
					Если НЕ ПустаяСтрока(Телефон) Тогда
						НоваяСтрока = тзПолучателиПисьма.Добавить();
						НоваяСтрока.НомерДляОтправки      = Телефон;
						НоваяСтрока.КакСвязаться          = Телефон;
						НоваяСтрока.ПредставлениеКонтакта = ТекСтрока.ПредставлениеКонтакта;
						НоваяСтрока.Контакт               = ТекСтрока.Контакт;
					КонецЕсли;
				КонецЕсли;
			Исключение
				Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
					+ НСтр("ru = 'ошибка при заполнении получателей электронного письма. Ошибка при выполнении произвольного кода:'") 
					+ " " + ОписаниеОшибки());
			КонецПопытки;
			
		ИначеЕсли НЕ ПустаяСтрока(ТекСтрока.НомерДляОтправки) Тогда
				НоваяСтрока = тзПолучателиПисьма.Добавить();
				НоваяСтрока.НомерДляОтправки      = ТекСтрока.НомерДляОтправки;
				НоваяСтрока.КакСвязаться          = ТекСтрока.КакСвязаться;
				НоваяСтрока.ПредставлениеКонтакта = ТекСтрока.ПредставлениеКонтакта;
				НоваяСтрока.Контакт               = ТекСтрока.Контакт;
		КонецЕсли;
	КонецЦикла;
	
	// Получаем вариант записи электронного письма.
	ОтправитьSMS = Действие.ОтправитьSMS;
	
	// СОЗДАНИЕ ДОКУМЕНТА "Сообщение SMS".
	НовыйДокумент = Документы.СообщениеSMS.СоздатьДокумент();
	
	// Исключаем бесконечный цикл.
	НовыйДокумент.ДополнительныеСвойства.Вставить("ИспользоватьЗначимыеСобытия", Истина);
	НовыйДокумент.Заполнить(Неопределено);
	НовыйДокумент.Дата                     = ТекущаяДатаСеанса();
	НовыйДокумент.Автор                    = Автор;
	НовыйДокумент.Важность                 = ?(Важность.Пустая(), Перечисления.ВариантыВажностиЗадачи.Обычная, Важность);
	НовыйДокумент.Комментарий              = Комментарий;
	НовыйДокумент.ТекстСообщения           = ТекстСообщения;
	НовыйДокумент.Тема                     = Тема;
	НовыйДокумент.ОтправлятьВТранслите     = Действие.SMSОтправлятьВТранслите;
	НовыйДокумент.Состояние                = Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
		
	// Теперь заполняем табличную часть документа "Получатели"
	// За одно сформируем представление всех получателей.
	ПредставлениеПолучателейПисьма = "";
	Для Каждого ТекПолучатель Из тзПолучателиПисьма Цикл
		НоваяСтрока = НовыйДокумент.Адресаты.Добавить();
		НоваяСтрока.НомерДляОтправки = ТекПолучатель.НомерДляОтправки;
		НоваяСтрока.КакСвязаться = ТекПолучатель.КакСвязаться;
		НоваяСтрока.ПредставлениеКонтакта = ТекПолучатель.ПредставлениеКонтакта;
		НоваяСтрока.Контакт          = ТекПолучатель.Контакт;
		НоваяСтрока.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Черновик;
	КонецЦикла;
	Взаимодействия.СформироватьСписокУчастников(НовыйДокумент);
	
	// Выполняем запись созданного документа.
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Параметры.ВыполненныеДействия.Добавить(НСтр("ru = 'Создано сообщение SMS:'") + " " + НовыйДокумент);
		
		// Если нужно, пробуем отправить сообщение.
		Если ОтправитьSMS Тогда
			
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				КоличествоОтправленных = Взаимодействия.ОтправкаSMSПоДокументу(НовыйДокумент);
			Иначе
				Взаимодействия.УстановитьСостояниеИсходящееДокументСообщениеSMS(НовыйДокумент);
			КонецЕсли;
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	Исключение
		
		Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
			+ НСтр("ru = 'ошибка при записи документа ""Сообщение SMS"":'") + " "+ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат НовыйДокумент;
	
КонецФункции // СоздатьСообщениеSMS() 

// Выполнение произвольного действия.
//
// Параметры:
//  Действие  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
//
//  Параметры  - "Структура" - структура необходимых параметров.
//				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
//				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
//				 к которому принадлежит объект-источник.
//               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
//               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
//               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
//													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
Процедура ВыполнитьПрочееДействие(Действие, Параметры)
	
	Попытка
		//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.ПроизвольныйКод);
		УстановитьБезопасныйРежим(Истина);
		Выполнить(Действие.ПроизвольныйКод);
		УстановитьБезопасныйРежим(Ложь);
	Исключение
		Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
			+ НСтр("ru = 'ошибка при записи документа:'") + " " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры //ВыполнитьПрочееДействие()

// Функция формирует записи для регистра сведений "Напоминания".
//
// Параметры:
//  Выборка  - "ВыборкаИзРезультатЗапроса" - спозиционированная выборка из запроса.
//
//  Параметры  - "Структура" - структура необходимых параметров.
//				 ОбъектИсточникСобытия - Произвольный объект - объект-источник.
//				 КлассИсточника        - "Строка" - строковое представление класса объектов метаданных,
//				 к которому принадлежит объект-источник.
//               ИмяИсточника		   - "Строка" - имя объекта метаданных, соответствующего объекту-источнику.
//               ВыполненныеДействия   - "Массив" - массив информационных строк о выполненных действиях.  
//               Ошибки				   - "Массив" - массив информационных строк о произошедших ошибках. 
//               ВыполненныеДействия   - "Массив" - массив созданных в предыдущих действиях объектов. 
//													Индексы элементов в массиве соответствуют значениям реквизита "Порядок".
//
// Возвращаемое значение:
//   В случае успешного создания напоминания возвращает созданный набор записей. 
//	 Если произошла ошибка, что возвращается НЕОПРЕДЕЛЕНО.
//
Функция СоздатьНапоминание(Действие, Параметры, НапоминанияПользователям)
	
	// Содержание напоминания
	Если НЕ ПустаяСтрока(Действие.СодержаниеПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник      = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты    = Параметры.СозданныеОбъекты;
			Содержание          = Неопределено;
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.СодержаниеПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.СодержаниеПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
		Исключение
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
				+ НСтр("ru = 'ошибка при заполнении реквизита ""Содержание"". Ошибка при выполнении произвольного кода:'") 
				+ " " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Содержание = Действие.Содержание;
	КонецЕсли;
	
	// Теперь пользователи-получатели.
	тзПолучателиРезультат = Новый ТаблицаЗначений;
	тзПолучателиРезультат.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	тзПолучателиВыгрузка = Действие.ПолучателиНапоминания.Выгрузить();
	Для Каждого ТекСтрока Из тзПолучателиВыгрузка Цикл  	
		Если ТекСтрока.ВидПравила=Перечисления.ВидыПравил.ТочноеЗначение Тогда
			Если ТипЗнч(ТекСтрока.Значение)=Тип("СправочникСсылка.Пользователи") Тогда
				Если НЕ ТекСтрока.Значение.Пустая() Тогда
					НоваяСтрока = тзПолучателиРезультат.Добавить();
					НоваяСтрока.Пользователь = ТекСтрока.Значение;
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ТекСтрока.ВидПравила=Перечисления.ВидыПравил.ПроизвольныйКод Тогда
			Попытка
				ОбъектИсточник      = Параметры.ОбъектИсточникСобытия;
				СозданныеОбъекты    = Параметры.СозданныеОбъекты;
				Пользователь        = Неопределено;
				//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(ТекСтрока.ПроизвольныйКод);
				УстановитьБезопасныйРежим(Истина);
				Выполнить(ТекСтрока.ПроизвольныйКод);
				УстановитьБезопасныйРежим(Ложь);
				Если ТипЗнч(Пользователь)=Тип("СправочникСсылка.Пользователи") Тогда
					Если НЕ Пользователь.Пустая() Тогда
						НоваяСтрока = тзПолучателиРезультат.Добавить();
						НоваяСтрока.Пользователь = Пользователь;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(Пользователь)=Тип("Массив") Тогда
					Для Каждого ТекПользователь Из Пользователь Цикл
						Если ТипЗнч(ТекПользователь)=Тип("СправочникСсылка.Пользователи") Тогда
							Если НЕ ТекПользователь.Пустая() Тогда
								НоваяСтрока = тзПолучателиРезультат.Добавить();
								НоваяСтрока.Пользователь = ТекПользователь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Исключение
				Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
					+ НСтр("ru = 'ошибка при заполнении реквизита <Пользователи>. Ошибка при выполнении произвольного кода:'") 
					+ " " + ОписаниеОшибки());
			КонецПопытки;
		ИначеЕсли ТекСтрока.ВидПравила=Перечисления.ВидыПравил.РеквизитОбъектаИсточника Тогда
			СтрокаВыполнить = "ТекПользователь = Параметры.ОбъектИсточникСобытия." 
				+ СтрЗаменить(ТекСтрока.ПутьКДанным, "Ссылка.", "");
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(СтрокаВыполнить);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(СтрокаВыполнить);
			УстановитьБезопасныйРежим(Ложь);
			НоваяСтрока = тзПолучателиРезультат.Добавить();
			НоваяСтрока.Пользователь = ТекПользователь;
		КонецЕсли;
	КонецЦикла;
	
	// Формируем переменные, не зависящие от Способа Установки Времени Напоминания 
	пПользователь                       = Неопределено;
	пАвтор			 					= Пользователи.ТекущийПользователь();
	пИсточник    						= Параметры.ОбъектИсточникСобытия;
	пОписание							= Содержание;
	пСпособУстановкиВремениНапоминания 	= Действие.СпособУстановкиВремениНапоминания;
	
	// Формируем переменные, зависящие от Способа Установки Времени Напоминания 
	Если Действие.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя Тогда
		пВремяСобытия  			  			= Действие.ВремяСобытия;
		пСрокНапоминания  					= пВремяСобытия;
		пИнтервалВремениНапоминания 		= 0;
		пИмяРеквизитаИсточника	        	= "";
		пРасписание                         = Неопределено;
	КонецЕсли;
	Если Действие.СпособУстановкиВремениНапоминания = 
						Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета Тогда
						
		СтрокаВыполнить = "пВремяСобытия = Параметры.ОбъектИсточникСобытия." 
			+ СтрЗаменить(Действие.ДатаНапоминанияПутьКДанным, "Ссылка.", "") + " - Действие.ИнтервалВремениНапоминания;";
		//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(СтрокаВыполнить);
		УстановитьБезопасныйРежим(Истина);
		Выполнить(СтрокаВыполнить);
		УстановитьБезопасныйРежим(Ложь);
		пСрокНапоминания  					= пВремяСобытия;
		пИнтервалВремениНапоминания 		= Действие.ИнтервалВремениНапоминания;
		пИмяРеквизитаИсточника	        	= Действие.ДатаНапоминанияПутьКДанным;
		пРасписание                         = Неопределено;
	КонецЕсли;
	Если Действие.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени Тогда
		пВремяСобытия  			  			= ТекущаяДатаСеанса() + Действие.ИнтервалВремениНапоминания;
		пСрокНапоминания  					= пВремяСобытия;
		пИнтервалВремениНапоминания 		= Действие.ИнтервалВремениНапоминания;
		пИмяРеквизитаИсточника	        	= "";
		пРасписание                         = Неопределено;
	КонецЕсли;
	Если Действие.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.Периодически Тогда
		пВремяСобытия  						= Действие.ВремяСобытия;
		пСрокНапоминания  					= пВремяСобытия;
		пИнтервалВремениНапоминания 		= 0;
		пИмяРеквизитаИсточника	        	= "";
		пРасписание                         = Действие.Расписание;
	КонецЕсли;
	Если Действие.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ПроизвольныйКод Тогда
		Если НЕ ПустаяСтрока(Действие.ДатаНапоминанияПроизвольныйКод) Тогда
		Попытка
			ОбъектИсточник   = Параметры.ОбъектИсточникСобытия;
			СозданныеОбъекты = Параметры.СозданныеОбъекты;
			ДатаНапоминания  = Неопределено;
			//РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме(Действие.ДатаНапоминанияПроизвольныйКод);
			УстановитьБезопасныйРежим(Истина);
			Выполнить(Действие.ДатаНапоминанияПроизвольныйКод);
			УстановитьБезопасныйРежим(Ложь);
			Если ТипЗнч(ДатаНапоминания)<>Тип("Дата") Тогда
				ДатаНапоминания = Дата("00010101");
			КонецЕсли;
		Исключение
			Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
				+ НСтр("ru = 'ошибка при заполнении реквизита <Дата начала>. Ошибка при выполнении произвольного кода:'") 
				+ " " + ОписаниеОшибки());
		КонецПопытки;
		КонецЕсли;
		пВремяСобытия  			  			= ДатаНапоминания;
		пСрокНапоминания  					= Действие.ВремяСобытия;
		пИнтервалВремениНапоминания 		= 0;
		пИмяРеквизитаИсточника	        	= "";
		пРасписание                         = Действие.Расписание;
	КонецЕсли;
	
	// Количество записей будет равно количеству пользователей, которые получат напоминание.
	тзПолучателиРезультат.Свернуть("Пользователь");
	Для Каждого ЭлементСписка Из тзПолучателиРезультат Цикл
		
		НоваяЗапись = НапоминанияПользователям.Добавить();
		НоваяЗапись.Пользователь                      = ЭлементСписка.Пользователь;
		НоваяЗапись.Автор                             = пАвтор;
		НоваяЗапись.ВремяСобытия                      = пВремяСобытия;
		НоваяЗапись.СрокНапоминания                   = пСрокНапоминания;
		НоваяЗапись.Описание                          = пОписание;
		НоваяЗапись.СпособУстановкиВремениНапоминания = пСпособУстановкиВремениНапоминания;
		НоваяЗапись.ИнтервалВремениНапоминания        = пИнтервалВремениНапоминания;
		НоваяЗапись.Расписание                        = пРасписание;
		НоваяЗапись.Источник                          = пИсточник;
		НоваяЗапись.ИмяРеквизитаИсточника          	  = пИмяРеквизитаИсточника;
		
	КонецЦикла;
	
	Возврат НапоминанияПользователям;
	
КонецФункции // СоздатьНапоминание()

// Процедура выполняет запись регистра сведений "Напоминания".
//
// Параметры:
//  	Параметры  - "Структура" - структура необходимых параметров.
//	 	НапоминанияПользователям - "Таблица значений" - Таблица значений с данными для регистра.
//
Процедура ЗаписатьНапоминания(Параметры,НапоминанияПользователям)
	
	Если НапоминанияПользователям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	РабочаяТаблица = НапоминанияПользователям.Скопировать();	
	РабочаяТаблица.Свернуть("Пользователь,Автор,ВремяСобытия,Источник" );
	
	Для каждого СтрокаРабочейТаблицы Из РабочаяТаблица Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Пользователь",	СтрокаРабочейТаблицы.Пользователь);
		Отбор.Вставить("Автор", 		СтрокаРабочейТаблицы.Автор);
		Отбор.Вставить("ВремяСобытия", 	СтрокаРабочейТаблицы.ВремяСобытия);
		Отбор.Вставить("Источник", 		СтрокаРабочейТаблицы.Источник);
		Строки = НапоминанияПользователям.НайтиСтроки(Отбор);
		
		Инд = 0;
		Для каждого Строка Из Строки Цикл
			Строка.ВремяСобытия    = Строка.ВремяСобытия+Инд;
			Строка.СрокНапоминания = Строка.ВремяСобытия;
			Инд = Инд+1;
		КонецЦикла; 
		
	КонецЦикла; 
	
	НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Источник.Установить(Параметры.ОбъектИсточникСобытия);	
	НаборЗаписей.Очистить();
	
	// Исключаем бесконечный цикл
	НаборЗаписей.ДополнительныеСвойства.Вставить("ИспользоватьЗначимыеСобытия", Истина);
	
	// Количество записей будет равно количеству пользователей, которые получат напоминание.
	Для Каждого ЭлементСписка Из НапоминанияПользователям Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь                      = ЭлементСписка.Пользователь;
		НоваяЗапись.Автор                             = ЭлементСписка.Автор;
		НоваяЗапись.ВремяСобытия                      = ЭлементСписка.ВремяСобытия;
		НоваяЗапись.СрокНапоминания                   = ЭлементСписка.СрокНапоминания;
		НоваяЗапись.Описание                          = ЭлементСписка.Описание;
		НоваяЗапись.СпособУстановкиВремениНапоминания = ЭлементСписка.СпособУстановкиВремениНапоминания;
		НоваяЗапись.ИнтервалВремениНапоминания        = ЭлементСписка.ИнтервалВремениНапоминания;
		НоваяЗапись.Расписание                        = ЭлементСписка.Расписание;
		НоваяЗапись.Источник                          = ЭлементСписка.Источник;
		НоваяЗапись.ИмяРеквизитаИсточника             = ЭлементСписка.ИмяРеквизитаИсточника;
		
		Действие                                      = ЭлементСписка.Действие;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать(Истина);
		Параметры.ВыполненныеДействия.Добавить("Создано напоминание.");
	Исключение
		Параметры.Ошибки.Добавить("Действие" + " <" + Действие.Наименование + "> - " 
			+ НСтр("ru = 'ошибка при записи:'") + " " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьНапоминания()

#КонецОбласти