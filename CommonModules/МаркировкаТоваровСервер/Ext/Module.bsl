
#Область ПрограммныйИнтерфейс

// Заполняет служебные реквизиты маркировки
//
// Параметры:
//  Форма  - Форма	- Форма настроек обмена
//  Объект - - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ПриСозданииЧтенииНаСервере(Форма, Объект) Экспорт
	
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиКодыМаркировки(Форма,,, Объект);
	ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект);
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита "КодыМаркировки" табличной части "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//  ИмяТабличнойЧасти - Строка - Имя таблицы, в которой произошло событие.
//
Процедура ЗаполнитьСлужебныйРеквизитКодыМаркировки(
		Объект,
		ТекущаяСтрока = Неопределено,
		ПараметрыДействия = Неопределено,
		ИмяТабличнойЧасти = "Товары") Экспорт
	
	Если НЕ ЕстьРеквизит(Объект, "КодыМаркировки", ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПризнакВозврата = ЕстьРеквизит(Объект, "Возврат", "КодыМаркировки");
	
	// Сформируем строки, для которых заполним реквизит
	Если ТекущаяСтрока = Неопределено Тогда
		ТаблицаТоваров = Объект[ИмяТабличнойЧасти];
	Иначе
		ТаблицаТоваров = Новый Массив;
		ТаблицаТоваров.Добавить(ТекущаяСтрока);
	КонецЕсли;
	
	// По строкам, для которых необходимо обновить реквизит.
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
		
		Если НЕ ЕстьРеквизит(ТекущаяСтрока, "МаркируемыйТовар") Тогда
			Продолжить;
		КонецЕсли;
		
		// Товар не маркируется.
		Если НЕ ТекущаяСтрока.МаркируемыйТовар Тогда
			ТекущаяСтрока.КодыМаркировки = "";
			ТекущаяСтрока.КартинкаМаркировки = Неопределено;
			Продолжить;
		КонецЕсли;
		
		// Получим количество маркировок
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторТовара", ТекущаяСтрока.ИдентификаторТовара);
		Если ЕстьПризнакВозврата Тогда
			СтруктураПоиска.Вставить("Возврат", Ложь);
		КонецЕсли;
		СписокКодовМаркировки = Объект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
		
		// Установим текст строки кода маркировки с количеством.
		ТекущаяСтрока.КодыМаркировки =
			СтрокаСЧислом(
				НСтр("ru = '%1 кодов маркировки; %1 код маркировки; %1 кода маркировки; %1 кодов маркировки;'") 
				+ НСтр("ru = '%1 кодов маркировки; %1 кодов маркировки'"),
				Строка(СписокКодовМаркировки.Количество()),
				ВидЧисловогоЗначения.Количественное);
		
		КоличествоНоменклатуры = ТекущаяСтрока.Коэффициент * ТекущаяСтрока.Количество;
		КоличествоМаркировки   = СписокКодовМаркировки.Количество();
		ДатаОбъекта = ДатаПроверкиНачалаОбязательнойМаркировки(Объект);
		ОбязательнаМаркировка = ?(ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
			И ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура"),
			МаркировкаНоменклатурыОбязательная(ТекущаяСтрока.Номенклатура, ДатаОбъекта),
			Ложь);
		
		Если НЕ ОбязательнаМаркировка
			И КоличествоМаркировки <> 0 
			И КоличествоМаркировки < КоличествоНоменклатуры Тогда
			КартинкаМаркировки = БиблиотекаКартинок.ОформлениеКругЖелтый;
		ИначеЕсли КоличествоНоменклатуры <> КоличествоМаркировки ИЛИ КоличествоМаркировки = 0 Тогда
			КартинкаМаркировки = БиблиотекаКартинок.ОформлениеКругКрасный;
		Иначе
			КартинкаМаркировки = БиблиотекаКартинок.ОформлениеКругЗеленый;
		КонецЕсли;
		
		ТекущаяСтрока.КартинкаМаркировки = КартинкаМаркировки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение начальных значений констант настроек обменов
//
Процедура ЗаполнитьНачальнуюНастройку() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущееЗначение = Константы.РежимОбменаСЧестнымЗнаком.Получить();
	
	// По умолчанию установим обмен по api
	Если ТекущееЗначение = Перечисления.СпособыОбменаСЧестнымЗнаком.ПустаяСсылка() Тогда
		Константы.РежимОбменаСЧестнымЗнаком.Установить(Перечисления.СпособыОбменаСЧестнымЗнаком.ЧерезAPI);
	КонецЕсли;
	
КонецПроцедуры

// Добавление служебных реквизитов настроек обмена
//
// Параметры:
//  Форма	- Форма				- Форма настроек обмена
//
Процедура ИнициализироватьСлужебныеРеквизиты(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СлужебныеРеквизиты = Новый Структура();
	Если НЕ ЕстьРеквизит(Форма, "РежимОбменаСЧестнымЗнаком") Тогда
		СлужебныеРеквизиты.Вставить("РежимОбменаСЧестнымЗнаком", Константы.РежимОбменаСЧестнымЗнаком.Получить());
	КонецЕсли;
	
	// Производим создание дополнительных реквизитов формы
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(Форма, СлужебныеРеквизиты);
	
КонецПроцедуры

// Процедура - Проверка кодов маркировки перед записью
//
// Параметры:
//  Объект				 - ДокументОбъект	 - Записываемый документ
//  ИмяТабличнойЧасти	 - Строка			 - Имя табличной части документа.
//
Процедура ПроверкаКодовМаркировкиПередЗаписью(Объект, ИмяТабличнойЧасти = "Товары") Экспорт
	
	// Проверим наличие ТЧ кодов маркировки.
	Если НЕ ЕстьРеквизит(Объект,, "КодыМаркировки") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПодтверждение = ЕстьРеквизит(Объект, "Подтверждено", "КодыМаркировки");
	
	// Удалим коды маркировки, которые не связаны с товарами
	МассивУдаления = Новый Массив;
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	Для Каждого ТекущаяСтрока Из Объект.КодыМаркировки Цикл
		
		Если ЕстьПодтверждение И ПустаяСтрока(ТекущаяСтрока.ИдентификаторТовара) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.ИдентификаторТовара = ТекущаяСтрока.ИдентификаторТовара;
		НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			МассивУдаления.Добавить(ТекущаяСтрока);
		КонецЕсли;
		
		// Приведем коды маркировки к формату хранения без хвостов
		ТекущаяСтрока.КодМаркировки = 
			МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
				ТекущаяСтрока.КодМаркировки,,
				СтрНачинаетсяС(ТекущаяСтрока.КодМаркировки, "("));
		
	КонецЦикла;
	
	// Непосредственно удаление.
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		Объект.КодыМаркировки.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ПроверкаКодовМаркировкиПередЗаписью()

// Проверка заполнения у документа корректность ТЧ Коды маркировки
//
// Параметры:
//  Объект					 - ДокументОбъект - Документ с маркировкой товаров.
//  Отказ					 - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ИмяТаблицыТоваров		 - Строка - Имя таблицы товаров в документе.
//  ИмяТаблицыМаркировки	 - Строка - Имя таблицы кодов маркировки в документе.
//  ПроверкаОбязательности	 - Булево - Признак полной проверки или частичной (только соответствия количества кодов).
//
Процедура ПроверитьЗаполнениеКодовМаркировки(
		Объект,
		Отказ,
		ИмяТаблицыТоваров = "Товары",
		ИмяТаблицыМаркировки = "КодыМаркировки",
		ПроверкаОбязательности = Ложь) Экспорт
	
	// Проверка права для дальнейшего выполнения
	Если НЕ  ПраваИНастройкиПользователя.Значение("ПроверкаЗаполненияСправочниковИДокументов") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что нет признака восстановления последовательностей.
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства,
		"ЭтоВосстановлениеПоследовательностей",
		Ложь);
	Если ЭтоВосстановлениеПоследовательностей Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие количества кодов маркировок и количество товаров.
	ПроверитьКоличествоКодовМаркировкиИТоваров(Объект, Отказ, ИмяТаблицыТоваров, ИмяТаблицыМаркировки);
	
	// Проверим уникальность кодов маркировки в документе
	ПроверитьУникальностьКодовМаркировки(Объект, Отказ, ИмяТаблицыТоваров, ИмяТаблицыМаркировки);
	
	// Проверить корректность кодов маркировки
	ПроверитьКорректностьКодовМаркировки(Объект, Отказ, ИмяТаблицыТоваров, ИмяТаблицыМаркировки);
	
	// Проверка в зависимости от настройки обязательности ввода
	РежимЗаписи = ПолучитьЗначениеПараметраСтруктуры(
		Объект.ДополнительныеСвойства,
		"РежимЗаписи",
		РежимЗаписиДокумента.Проведение);
	Если ПроверкаОбязательности И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьОбязательноеЗаполнениеКодовМаркировки(Объект, Отказ, ИмяТаблицыТоваров, ИмяТаблицыМаркировки);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеКодовМаркировки()

// Производим заполнение кодов маркировки на основании документов.
//
// Параметры:
//  Объект				 - ДокументОбъект - Документ, который вводится на основании
//  Основание			 - ДокументСсылка - Документ, на основании которого вводится документ
//  ИмяТаблицыМаркировки - ИмяТаблицыМаркировки - Имя табличной части документа с маркировкой
//
Процедура ЗаполнитьКодыМаркировкиТоваров(Объект, Основание, ИмяТаблицыМаркировки = "КодыМаркировки") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ТипЗнч(Основание);
	
	ТекстЗапроса = "";
	
	// Заполним если вели на основании Заказ-Наряда
	Если ТипОснования = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		// Для заполнения маркировки: ЗН - закрыт, по движению ЗН, иначе - по остаткам
		Если Основание.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МаркировкаТоваровВПроизводстве.Номенклатура КАК Номенклатура,
			|	МаркировкаТоваровВПроизводстве.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	МаркировкаТоваровВПроизводстве.КодМаркировки КАК КодМаркировки,
			|	МаркировкаТоваровВПроизводстве.ГТД КАК ГТД
			|ИЗ
			|	РегистрНакопления.МаркировкаТоваровВПроизводстве КАК МаркировкаТоваровВПроизводстве
			|ГДЕ
			|	МаркировкаТоваровВПроизводстве.Регистратор = &Основание";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МаркировкаТоваровВПроизводствеОстатки.Номенклатура КАК Номенклатура,
			|	МаркировкаТоваровВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	""(01)"" + МаркировкаТоваровВПроизводствеОстатки.GTIN + ""(21)"" + МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер КАК КодМаркировки,
			|	МаркировкаТоваровВПроизводствеОстатки.ГТД КАК ГТД,
			|	МаркировкаТоваровВПроизводствеОстатки.GTIN КАК GTIN,
			|	МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер КАК СерийныйНомер
			|ПОМЕСТИТЬ КодыМаркировкиПроизводства
			|ИЗ
			|	РегистрНакопления.МаркировкаТоваровВПроизводстве.Остатки(, ЗаказНаряд = &Основание) КАК МаркировкаТоваровВПроизводствеОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КодыМаркировкиПроизводства.Номенклатура КАК Номенклатура,
			|	КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ЕСТЬNULL(СостоянияКодовМаркировкиСрезПоследних.КодМаркировки, КодыМаркировкиПроизводства.КодМаркировки) КАК КодМаркировки,
			|	КодыМаркировкиПроизводства.ГТД КАК ГТД
			|ИЗ
			|	КодыМаркировкиПроизводства КАК КодыМаркировкиПроизводства
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКодовМаркировки.СрезПоследних(
			|				,
			|				(Номенклатура, ХарактеристикаНоменклатуры, GTIN, СерийныйНомер) В
			|					(ВЫБРАТЬ
			|						КодыМаркировкиПроизводства.Номенклатура КАК Номенклатура,
			|						КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|						КодыМаркировкиПроизводства.GTIN КАК GTIN,
			|						КодыМаркировкиПроизводства.СерийныйНомер КАК СерийныйНомер
			|					ИЗ
			|						КодыМаркировкиПроизводства КАК КодыМаркировкиПроизводства)) КАК СостоянияКодовМаркировкиСрезПоследних
			|		ПО КодыМаркировкиПроизводства.Номенклатура = СостоянияКодовМаркировкиСрезПоследних.Номенклатура
			|			И КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры = СостоянияКодовМаркировкиСрезПоследних.ХарактеристикаНоменклатуры
			|			И КодыМаркировкиПроизводства.GTIN = СостоянияКодовМаркировкиСрезПоследних.GTIN
			|			И КодыМаркировкиПроизводства.СерийныйНомер = СостоянияКодовМаркировкиСрезПоследних.СерийныйНомер";
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ ТипОснования = Тип("ДокументСсылка.ВозвратОтПокупателя") Тогда
		
		ИмяДокумента = Основание.Метаданные().Имя;
		ЕстьГТД = Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("ГТД") <> Неопределено;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара,
		|	ДокументКодыМаркировки.КодМаркировки КАК КодМаркировки
		|ПОМЕСТИТЬ КодыМаркировок
		|ИЗ
		|	Документ." + ИмяДокумента + ".КодыМаркировки КАК ДокументКодыМаркировки
		|ГДЕ
		|	ДокументКодыМаркировки.Ссылка = &Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокументТовары.ИдентификаторТовара КАК ИдентификаторТовара,
		|	" + ?(ЕстьГТД, "ДокументТовары.ГТД", "ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)") + " КАК ГТД
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	Документ." + ИмяДокумента + ".Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка = &Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыМаркировок.КодМаркировки КАК КодМаркировки,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.ИдентификаторТовара КАК ИдентификаторТовара,
		|	ТаблицаТоваров.ГТД КАК ГТД
		|ИЗ
		|	КодыМаркировок КАК КодыМаркировок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
		|		ПО КодыМаркировок.ИдентификаторТовара = ТаблицаТоваров.ИдентификаторТовара";
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара,
		|	ДокументКодыМаркировки.КодМаркировки КАК КодМаркировки
		|ПОМЕСТИТЬ КодыМаркировок
		|ИЗ
		|	Документ.КорректировкаРеализации.КодыМаркировки КАК ДокументКодыМаркировки
		|ГДЕ
		|	ДокументКодыМаркировки.Ссылка = &Основание
		|	И НЕ ДокументКодыМаркировки.Возврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокументТовары.ИдентификаторТовара КАК ИдентификаторТовара,
		|	ДокументТовары.ГТД КАК ГТД
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка = &Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыМаркировок.КодМаркировки КАК КодМаркировки,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.ИдентификаторТовара КАК ИдентификаторТовара,
		|	ТаблицаТоваров.ГТД КАК ГТД
		|ИЗ
		|	КодыМаркировок КАК КодыМаркировок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
		|		ПО КодыМаркировок.ИдентификаторТовара = ТаблицаТоваров.ИдентификаторТовара";
		
	Иначе
		// Для остальных объектов никаких действий выполнять не будем
		Возврат;
	КонецЕсли;
	
	Попытка
		Объект[ИмяТаблицыМаркировки].Очистить();
	Исключение
		// ТЧ с кодами маркировки нет у документа
		Возврат;
	КонецПопытки;
	
	// Заполним доп. поля для товарной строки
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		Если ПустаяСтрока(СтрокаТовар.ИдентификаторТовара) Тогда
			СтрокаТовар.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основание", Основание);
	
	МаркировкаТоваров = Запрос.Выполнить().Выгрузить();
	
	МаркировкаТоваров.Сортировать("Номенклатура,ХарактеристикаНоменклатуры,ГТД");
	
	// Поля поиска строки в ТЧ Товары
	СтруктураОтбораСГТД = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ГТД");
	СтруктураОтбораБезГТД = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	ЕстьГТД = ЕстьРеквизит(Объект, "ГТД", "Товары");
	
	// Занесем маркировку в ТЧ документа с привязкой к строкам
	Для Каждого ТекущаяСтрока Из МаркировкаТоваров Цикл
		
		// Найдем строки в ТЧ Товары документа
		Если ЕстьГТД И ЗначениеЗаполнено(ТекущаяСтрока.ГТД) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтбораСГТД, ТекущаяСтрока);
			СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбораСГТД);
		Иначе
			// Не во всех документа есть ГТД
			СтрокиТоваров = Новый Массив;
		КонецЕсли;
		
		// Для данной маркировки нет строки в ТЧ Товары
		Если СтрокиТоваров.Количество() = 0 Тогда
			
			// Поищем стороки без ГТД
			ЗаполнитьЗначенияСвойств(СтруктураОтбораБезГТД, ТекущаяСтрока);
			СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбораБезГТД);
			
			Если СтрокиТоваров.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИдентификаторТовара = "";
		Если ПустаяСтрока(СтрокиТоваров[0].ИдентификаторТовара) Тогда
			СтрокиТоваров[0].ИдентификаторТовара = Новый УникальныйИдентификатор;
			ИдентификаторТовара = СтрокиТоваров[0].ИдентификаторТовара;
		Иначе
			// Проверим что для строки товара еще не превышено количество маркировок
			// Для ситуации когда в ТЧ есть несколько строк с одинаковой номенклатуры
			Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("ИдентификаторТовара", СтрокаТоваров.ИдентификаторТовара);
				НайденныеКодыМаркировки = Объект[ИмяТаблицыМаркировки].НайтиСтроки(СтруктураПоиска);
				
				// Количество товара в строке меньше, чем маркировок - туда и добавим
				Если СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент > НайденныеКодыМаркировки.Количество() Тогда
					ИдентификаторТовара = СтрокаТоваров.ИдентификаторТовара;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		// Нашли строку товаров маркировки, добавляем маркировку
		Если НЕ ПустаяСтрока(ИдентификаторТовара) Тогда
			НоваяСтрока = Объект[ИмяТаблицыМаркировки].Добавить();
			НоваяСтрока.ИдентификаторТовара = ИдентификаторТовара;
			НоваяСтрока.КодМаркировки = ТекущаяСтрока.КодМаркировки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКодыМаркировкиТоваров()

// Устанавливаем условное оформление для характеристик номенклатуры.
//
// Параметры:
//  Форма						 - Форма	 - Содержит данную форму. 
//  ИмяПоляКодаМаркировки		 - Строка	 - Наименование элемента формы, содержащего характеристики номенклатуры,
//												если оно отличается от "ТоварыХарактеристикаНоменклатуры".
//  ПутьКПолюОтбора				 - Строка	 - Наименование элемента формы, содержащего значение отбора.
//
Процедура УстановитьУсловноеОформлениеКодыМаркировок(Форма,
		ИмяПоляКодаМаркировки = "ТоварыКодыМаркировки",
		ПутьКПолюОтбора = "Объект.Товары.МаркируемыйТовар") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляКодаМаркировки].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не ведется>'"));
	
	Если ЕстьРеквизит(Форма, "ПроверкаСоответствияКодовМаркировкиПроводилась") Тогда
		//	 оформление соответствия кодов маркировки
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляКодаМаркировки].Имя);
		
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЕстьРазличияСостоянийКМ");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ЕстьРеквизит(Форма.Объект, "ПроверкаСоответствияКодовМаркировкиПроводилась", "Товары") Тогда
			ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПроверкаСоответствияКодовМаркировкиПроводилась");
		Иначе
			ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроверкаСоответствияКодовМаркировкиПроводилась");
		КонецЕсли;
		ОтборЭлемента.ЛевоеЗначение = ЛевоеЗначение;
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		ЭлементУсловногоОформления.Оформление
			.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.СписокКодовМаркировкиОшибкиПриПроверкеШрифт);
	КонецЕсли;
	
КонецПроцедуры // УстановитьУсловноеОформлениеКодыМаркировок()

// Проверка наличия у номенклатуры остатов на регистрих при установке признака обязательности маркировки.
//
// Параметры:
//  ТипНоменклатуры - СправочникСсылка.ТипыНоменклатуры - приверяемый тип номенклатуры.
//
// Возвращаемое значение:
//  Булево - Истина, если есть остаток, Ллжь - в противном случае.
//
Функция ПроверитьОстатокНоменклатуры(ТипНоменклатуры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТипНоменклатуры.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	               |	СУММА(ТоварыВПроизводствеОстатки.КоличествоОстаток) КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ТаблицаОстатоковВПроизводстве
	               |ИЗ
	               |	РегистрНакопления.ТоварыВПроизводстве.Остатки(, Номенклатура.ТипНоменклатуры = &ТипНоменклатуры) КАК ТоварыВПроизводствеОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыВПроизводствеОстатки.Номенклатура
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МаркировкаТоваровВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	               |	СУММА(МаркировкаТоваровВПроизводствеОстатки.КоличествоОстаток) КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ТаблицаОстатковКодовМаркировки
	               |ИЗ
	               |	РегистрНакопления.МаркировкаТоваровВПроизводстве.Остатки(, Номенклатура.ТипНоменклатуры = &ТипНоменклатуры) КАК МаркировкаТоваровВПроизводствеОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МаркировкаТоваровВПроизводствеОстатки.Номенклатура
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОстатковКодовМаркировки.Номенклатура КАК Номенклатура,
	               |	ТаблицаОстатковКодовМаркировки.КоличествоОстаток КАК КоличествоОстатокаВПроизводстве,
	               |	ТаблицаОстатоковВПроизводстве.КоличествоОстаток КАК КоличествоОстатокМаркировки
	               |ИЗ
	               |	ТаблицаОстатоковВПроизводстве КАК ТаблицаОстатоковВПроизводстве
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКодовМаркировки КАК ТаблицаОстатковКодовМаркировки
	               |		ПО ТаблицаОстатоковВПроизводстве.Номенклатура = ТаблицаОстатковКодовМаркировки.Номенклатура
	               |			И ТаблицаОстатоковВПроизводстве.КоличествоОстаток <> ТаблицаОстатковКодовМаркировки.КоличествоОстаток";
	Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьОстатокНоменклатуры()

// Делает запись в регистр "Коды маркировки для печати" кодов маркировки с криптохвостами.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаказКодовМаркировки - документ заказа кодов маркировки;
//  КодыМаркировки - ТаблицаЗначений - таблица, содержащая информацию о кодах маркировки:
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура;
//    * ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикаНоменклатуры - характеристика номенклатуры;
//    * КодМаркировки - Строка - полученный полный код маркировки.
//
Процедура ДобавитьЗаписиВРегистр(Ссылка, КодыМаркировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.КодыМаркировкиДляПечати.ДобавитьЗаписиВРегистр(Ссылка, КодыМаркировки);
	
КонецПроцедуры

// Поиск соответствия ГТИН из кода маркировки для номенклатуры и запись в регистр Штрихкодов
//
// Параметры:
//  Объект				 - ДокументСсылка - Документ, на основании которого проверяем
//  ИмяТаблицыТоваров	 - Строка - Имя табличной части документа с товарами
//  ИмяТаблицыМаркировки - Строка - Имя табличной части документа с кодами маркировки
//
Процедура ПроверитьИДобавитьГТИННоменклатуры(
		Объект,
		ИмяТаблицыТоваров = "Товары",
		ИмяТаблицыМаркировки = "КодыМаркировки") Экспорт
	
	// Проверим наличие настройки для выполнения операции
	ДобавитьНовыйШтрихкодПриПоступленииТовара = УчетныеПолитикиСервер.Значение(
		ПланыВидовХарактеристик.УчетныеПолитики.ДобавитьНовыйШтрихкодПриПоступленииТовара,
		Объект.Дата);
	
	Если НЕ ДобавитьНовыйШтрихкодПриПоступленииТовара Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЕстьРеквизит(Объект,, ИмяТаблицыТоваров)
		ИЛИ НЕ ЕстьРеквизит(Объект,, ИмяТаблицыМаркировки) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним таблицу номенклатурой и ГТИН
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКодов.Колонки.Добавить("ХарактеристикаНоменклатуры",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаКодов.Колонки.Добавить("ШтрихКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(13)));
	
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	
	СписокТЧДокумента = СтрШаблон("%1,%2", ИмяТаблицыТоваров, ИмяТаблицыМаркировки);
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, СписокТЧДокумента);
	ТаблицаТоваров = ДанныеДокумента[ИмяТаблицыТоваров].Выгрузить();
	ТаблицаКодовМаркировки = ДанныеДокумента[ИмяТаблицыМаркировки].Выгрузить();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Найдем коды маркировки товара
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовара);
		НайденныеКодыМаркировки = ТаблицаКодовМаркировки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаМаркировки Из НайденныеКодыМаркировки Цикл
			
			// Разберем маркировку
			СтруктураМаркировки =
				МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(СтрокаМаркировки.КодМаркировки);
				
			// Это не маркировка
			Если СтруктураМаркировки.ТипИдентификатораТовара <>
				ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаКодов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
			
			СтрокаGTIN = Строка(Число(СтруктураМаркировки.GTIN));
			НоваяСтрока.ШтрихКод = СтрЗаменить(СтрокаGTIN, Символы.НПП, "");
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Найдем соответствие в регистре штрихкодов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаШК.Номенклатура КАК Номенклатура,
	               |	ТаблицаШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТаблицаШК.ШтрихКод КАК ШтрихКод
	               |ПОМЕСТИТЬ ТаблицаШК
	               |ИЗ
	               |	&ТаблицаШК КАК ТаблицаШК
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаШК.Номенклатура КАК Номенклатура,
	               |	ТаблицаШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТаблицаШК.ШтрихКод КАК ШтрихКод
	               |ИЗ
	               |	ТаблицаШК КАК ТаблицаШК
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	               |		ПО ТаблицаШК.Номенклатура = Штрихкоды.Объект
	               |			И ТаблицаШК.ШтрихКод = Штрихкоды.Штрихкод
	               |ГДЕ
	               |	ЕСТЬNULL(Штрихкоды.GTIN, ИСТИНА)
	               |	И Штрихкоды.Объект ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ТаблицаШК", ТаблицаКодов);
	
	Если НЕ ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяЗапись = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
		НоваяЗапись.Штрихкод = Выборка.Штрихкод;
		НоваяЗапись.Объект = Выборка.Номенклатура;
		НоваяЗапись.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяЗапись.GTIN = Ложь; // чтоб не появлялся при заказах
		НоваяЗапись.Запрет = Ложь;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьИДобавитьГТИННоменклатуры()

// Записать результат проверки кодов маркировани из Честного знака
//
// Параметры:
//  Документ		 - ДокументОбъект	 - Документ, в котором была проверка.
//  ДатаПроверки	 - Дата				 - Дата, по которой проводилась проверка
//  АвторПроверки	 - СправочникСсылка.Пользователи	 - Инициатор проверки кодов маркировки.
//  Результат		 - Булево			 - Результат проверки.
//
Процедура ЗафиксироватьРезультатПроверкиКодовМаркировки(Документ, ДатаПроверки, АвторПроверки, Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияПроверкиКодовМаркировки.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ДатаПроверки;
	МенеджерЗаписи.Документ = Документ.Ссылка;
	МенеджерЗаписи.Пользователь = АвторПроверки;
	МенеджерЗаписи.Успешно = Результат;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры // ЗафиксироватьРезультатПроверкиКодовМаркировки()

// Проверка наличия кодов маркировки в производстве по всей номенклатуре
//
// Параметры:
//  ЗаказНаряд	 - ДокументОбъект.ЗаказНаряд	 - Заказ-наряд, по которому выполняется проверка.
//  Отказ		 - Булево	 - Признак того, что проверка пройдена с ошибкой.
//
Процедура ПроверитьКодыМаркировкиВПроизводстве(ЗаказНаряд, Отказ) Экспорт
	
	// Проверку выполняем только в состоянии "Выполнен"
	Если ЗаказНаряд.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка права для дальнейшего выполнения
	Если НЕ  ПраваИНастройкиПользователя.Значение("ПроверкаЗаполненияСправочниковИДокументов") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что нет признака восстановления последовательностей.
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		ЗаказНаряд.ДополнительныеСвойства,
		"ЭтоВосстановлениеПоследовательностей",
		Ложь);
	Если ЭтоВосстановлениеПоследовательностей Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка в зависимости от настройки обязательности ввода
	РежимЗаписи = ПолучитьЗначениеПараметраСтруктуры(
		ЗаказНаряд.ДополнительныеСвойства,
		"РежимЗаписи",
		РежимЗаписиДокумента.Проведение);
	Если НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЗаказНарядТовары.Количество * ЗаказНарядТовары.Коэффициент КАК Количество
	               |ПОМЕСТИТЬ ТаблицаТоваров
	               |ИЗ
	               |	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	               |ГДЕ
	               |	ЗаказНарядТовары.Ссылка = &ЗаказНаряд
	               |	И ЗаказНарядТовары.Номенклатура.ТипНоменклатуры.МаркировкаОбязательная
				   |	И (ЗаказНарядТовары.Номенклатура.ТипНоменклатуры.ДатаОбязательнойМаркировки = ДАТАВРЕМЯ(1,1,1)
				   |		ИЛИ ЗаказНарядТовары.Номенклатура.ТипНоменклатуры.ДатаОбязательнойМаркировки < &ДатаДокумента)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МаркировкаТоваровВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	               |	МаркировкаТоваровВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	МаркировкаТоваровВПроизводствеОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ТоварыМаркировкиВПроизводстве
	               |ИЗ
	               |	РегистрНакопления.МаркировкаТоваровВПроизводстве.Остатки(
	               |			,
	               |			ЗаказНаряд = &ЗаказНаряд
	               |				И (Номенклатура, ХарактеристикаНоменклатуры) В
	               |					(ВЫБРАТЬ
	               |						ТаблицаТоваров.Номенклатура КАК Номенклатура,
	               |						ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	               |					ИЗ
	               |						ТаблицаТоваров КАК ТаблицаТоваров)) КАК МаркировкаТоваровВПроизводствеОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	               |	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	МАКСИМУМ(ТаблицаТоваров.Количество) КАК Количество,
	               |	ТаблицаТоваров.Номенклатура.Артикул КАК НоменклатураАртикул,
	               |	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК НоменклатураПредставление,
	               |	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатурыПредставление,
	               |	СУММА(ЕСТЬNULL(ТоварыМаркировкиВПроизводстве.КоличествоОстаток, 0)) КАК КоличествоВПроизводстве
	               |ИЗ
	               |	ТаблицаТоваров КАК ТаблицаТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыМаркировкиВПроизводстве КАК ТоварыМаркировкиВПроизводстве
	               |		ПО ТаблицаТоваров.Номенклатура = ТоварыМаркировкиВПроизводстве.Номенклатура
	               |			И ТаблицаТоваров.ХарактеристикаНоменклатуры = ТоварыМаркировкиВПроизводстве.ХарактеристикаНоменклатуры
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаТоваров.Номенклатура,
	               |	ТаблицаТоваров.ХарактеристикаНоменклатуры,
	               |	ТаблицаТоваров.Номенклатура.Артикул";
	Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказНаряд.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", ЗаказНаряд.ДатаЗакрытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество > Выборка.КоличествоВПроизводстве Тогда
			
			Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон( 
					    НСтр("ru = 'Количество [%1] %2 с характеристикой %3 без кодов маркировок - %4. Необходимо указать коды маркировки'"),
						Выборка.НоменклатураАртикул,
						Выборка.НоменклатураПредставление,
						Выборка.ХарактеристикаНоменклатурыПредставление,
						Выборка.Количество - Выборка.КоличествоВПроизводстве),
					ЗаказНаряд,,,
					Отказ
				);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон( 
						НСтр("ru = 'Количество [%1] %2 без кодов маркировок - %3. Необходимо указать коды маркировки.'"),
						Выборка.НоменклатураАртикул,
						Выборка.НоменклатураПредставление,
						Выборка.Количество - Выборка.КоличествоВПроизводстве),	
					ЗаказНаряд,,,
					Отказ);
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получение доступного списка товарных групп
//
// Параметры:
//  УсловиеВыбора	 - Строка - Условие выбора товарных групп
// 
// Возвращаемое значение:
//  Массив - Список товарных групп
//
Функция СписокТоварныхГрупп(Документ, УсловиеВыбора = "") Экспорт
	
	УсловиеОтбора = УсловиеВыбора;
	Если НЕ ЗначениеЗаполнено(УсловиеОтбора) Тогда
		УсловиеОтбора = "ТипыМаркировки.ТоварнаяГруппа <> """"";
	КонецЕсли;
	
	НедоступныеТоварныеГруппы = НедоступныеТоварныеГруппы(Документ);
	Если НедоступныеТоварныеГруппы.Количество() > 0 Тогда
		УсловиеОтбора = СтрШаблон("%1 И Не ТипыМаркировки.ТоварнаяГруппа В (&НедоступныеТоварныеГруппы)", УсловиеОтбора);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТипыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТипыМаркировки КАК ТипыМаркировки
	|ГДЕ
	|	ТипыМаркировки.ДоступноСозданиеДокументов
	|	И #УсловиеОтбора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеОтбора", УсловиеОтбора);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НедоступныеТоварныеГруппы", НедоступныеТоварныеГруппы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получение списка типов номенклатуры по указанной товарной группе
//
// Параметры:
//  ТоварнаяГруппа	 - СправочникСсылка.ТипыМаркировки - Указанная товарная группа для поиска.
// 
// Возвращаемое значение:
//  Массив - Список типов номенклатуры
//
Функция ТипыНоменклатурыТоварнойГруппы(ТоварнаяГруппа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ТипыНоменклатуры КАК ТипыНоменклатуры
	               |ГДЕ
	               |	ТипыНоменклатуры.ТипМаркировки = &ТоварнаяГруппа
	               |	И ТипыНоменклатуры.ВедетсяМаркировка";
	Запрос.УстановитьПараметр("ТоварнаяГруппа", ТоварнаяГруппа);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Общий обработчик события настройки параметров выбора элементов управления диалога
//  в зависимости от значений реквизитов.
//
// Параметры:
//  Форма	 - УправляемаяФорма		 - Форма, в которой возникло событие.
//  Объект	 - ДанныеФормыСтруктура	 - Объект формы документа.
//
Процедура НастроитьПараметрыВыбораЭлементовФормы(Форма, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если НЕ ЕстьРеквизит(Объект, "ТоварнаяГруппа") Тогда
		Возврат;
	КонецЕсли;
	
	ТоварнаяГруппа = Объект.ТоварнаяГруппа;
	
	Если НЕ ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		УправлениеДиалогомСервер
		.УдалитьПараметрВыбора(Форма.Элементы.ТоварыНоменклатура.ПараметрыВыбора, "Отбор.ТипНоменклатуры");
		
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, , "Товары")
		И (НЕ Форма.Элементы.Найти("ТоварыНоменклатура") = Неопределено) Тогда
		
		ТипыНоменклатуры = ТипыНоменклатурыТоварнойГруппы(ТоварнаяГруппа);
		
		Если ТипыНоменклатуры.Количество() > 0 Тогда
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Форма.Элементы.ТоварыНоменклатура.ПараметрыВыбора, 
																	"Отбор.ТипНоменклатуры", ТипыНоменклатуры);
		Иначе
			УправлениеДиалогомСервер
			.УдалитьПараметрВыбора(Форма.Элементы.ТоварыНоменклатура.ПараметрыВыбора, "Отбор.ТипНоменклатуры");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверка соответствия номенклатуры товарной группе документа.
//
// Параметры:
//  Объект	 - ДокументОбъект - Проверяемый документ.
//  Отказ	 - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//
Процедура НоменклатураСоответствуетТоварнойГруппе(Объект, Отказ) Экспорт
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	Если НЕ ЕстьРеквизит(МетаданныеОбъекта, "ТоварнаяГруппа") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоменклатурыВТаблицах = Новый Структура;
	ОбщийСписокНоменклатуры = Новый Массив;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если ЕстьРеквизит(ТабличнаяЧасть, "Номенклатура") Тогда
			
			НоменклатураВТаблице = Объект[ТабличнаяЧасть.Имя].Выгрузить().ВыгрузитьКолонку("Номенклатура");
			
			Если НоменклатураВТаблице.Количество() Тогда
			
				НоменклатурыВТаблицах.Вставить(ТабличнаяЧасть.Имя, НоменклатураВТаблице);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ОбщийСписокНоменклатуры, НоменклатурыВТаблицах[ТабличнаяЧасть.Имя], Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбщийСписокНоменклатуры.Количество() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипыНоменклатуры = ТипыНоменклатурыТоварнойГруппы(Объект.ТоварнаяГруппа);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Номенклатура.Ссылка) КАК НоменклатураПредставление
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И НЕ Номенклатура.ТипНоменклатуры В (&ТипыНоменклатуры)");
	Запрос.УстановитьПараметр("СписокНоменклатуры", ОбщийСписокНоменклатуры);
	Запрос.УстановитьПараметр("ТипыНоменклатуры", ТипыНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПлохаяНоменклатура = РезультатЗапроса.Выгрузить();
	ТоварнаяГруппаПредставление = Строка(Объект.ТоварнаяГруппа);
	
	Для Каждого Строка Из ПлохаяНоменклатура Цикл
		
		Для Каждого КлючЗначение Из НоменклатурыВТаблицах Цикл
			
			СтрокиВТаблице = Объект[КлючЗначение.Ключ].НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
			
			Если НЕ СтрокиВТаблице.Количество() Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого СтрокаВТаблице Из СтрокиВТаблице Цикл
			
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Тип номенклатуры ""%1"" недопустим для выбранной группы товаров ""%2"".'"),
						Строка.НоменклатураПредставление,
						ТоварнаяГруппаПредставление
					),
					Объект,
					КлючЗначение.Ключ + "[" + (СтрокаВТаблице.НомерСтроки - 1) + "].Номенклатура", 
					,
					Отказ);
					
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает товарную группу из перечня номенклатуры.
//
// Параметры:
//  Номенклатура - Массив из СправочникСсылка.Номенклатура - номенклатура из табличной части.
//  УсловиеВыбора - Строка - условие отбора товарных групп в зависимости от документа.
//
// Возвращаемое значение:
//  СправочникСсылка.ТипыМаркировки - товарная группа.
//
Функция ТоварнаяГруппа(Номенклатура, УсловиеВыбора = "") Экспорт
	
	УсловиеОтбора = УсловиеВыбора;
	Если НЕ ЗначениеЗаполнено(УсловиеОтбора) Тогда
		УсловиеОтбора = "ТипыМаркировки.ТоварнаяГруппа <> """"";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ПОМЕСТИТЬ ТипыНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТипыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	ТипыНоменклатуры КАК ТипыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыМаркировки КАК ТипыМаркировки
	|		ПО ТипыНоменклатуры.ТипНоменклатуры.ТипМаркировки = ТипыМаркировки.Ссылка
	|ГДЕ
	|	#УсловиеОтбора";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#УсловиеОтбора", УсловиеОтбора);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.ТипыМаркировки.ПустаяСсылка();
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	
КонецФункции

// Обработчик обновления для заполнения реквизита "Товарная группа" в существующих документах.
//
Процедура ЗаполнитьТоварныеГруппы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводВОборотКодовМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводВОборотКодовМаркировки КАК ВводВОборотКодовМаркировки
	|ГДЕ
	|	ВводВОборотКодовМаркировки.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТипыМаркировки.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратВОборотКодовМаркировки.Ссылка
	|ИЗ
	|	Документ.ВозвратВОборотКодовМаркировки КАК ВозвратВОборотКодовМаркировки
	|ГДЕ
	|	ВозвратВОборотКодовМаркировки.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТипыМаркировки.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыводИзОборотаКодовМаркировки.Ссылка
	|ИЗ
	|	Документ.ВыводИзОборотаКодовМаркировки КАК ВыводИзОборотаКодовМаркировки
	|ГДЕ
	|	ВыводИзОборотаКодовМаркировки.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТипыМаркировки.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказКодовМаркировки.Ссылка
	|ИЗ
	|	Документ.ЗаказКодовМаркировки КАК ЗаказКодовМаркировки
	|ГДЕ
	|	ЗаказКодовМаркировки.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТипыМаркировки.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтгрузкаТоваровКодовМаркировки.Ссылка
	|ИЗ
	|	Документ.ОтгрузкаТоваровКодовМаркировки КАК ОтгрузкаТоваровКодовМаркировки
	|ГДЕ
	|	ОтгрузкаТоваровКодовМаркировки.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТипыМаркировки.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Перемаркировка.Ссылка
	|ИЗ
	|	Документ.Перемаркировка КАК Перемаркировка
	|ГДЕ
	|	Перемаркировка.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТипыМаркировки.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеКодовМаркировки.Ссылка
	|ИЗ
	|	Документ.СписаниеКодовМаркировки КАК СписаниеКодовМаркировки	
	|ГДЕ
	|	СписаниеКодовМаркировки.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТипыМаркировки.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ТоварнаяГруппа = Справочники.ТипыМаркировки.ШиныИАвтопокрышки;
		
		Попытка
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		Исключение
			
			ЕстьОшибки = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обновление ИБ.Заполнение реквизита ""Товарная группа""'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает полный код маркировки в формате BASE64 в регистр.
//
// Параметры:
//  СтруктураМаркировки - Структура - см. МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара()
//
Процедура ЗаписатьПолныйШтрихкод(СтруктураМаркировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.КодыМаркировки.ЗаписатьПолныйШтрихкод(СтруктураМаркировки);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получает полные коды маркировки по краткому коду маркировки.
//
// Параметры:
//  КодыМаркировки - Массив, Строка - Коды маркировки для получения полных кодов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - код маркировки, Значение - полный код маркировки в формате BASE64
//
Функция КодыМаркировкиВBASE64(КодыМаркировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений.КодыМаркировки.КодыМаркировкиВBASE64(КодыМаркировки);
	
КонецФункции

// Записывает время пробития полного кода маркировки в регистр "Коды маркировки"
//
// Параметры:
//  КодыМаркировки - Массив, Строка - Коды маркировки для получения полных кодов.
//
Процедура ПробитьКодыМаркировки(КодыМаркировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.КодыМаркировки.ПробитьКодыМаркировки(КодыМаркировки);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверим наличие отмены пробития чека на ФР и очистки данных проверки кодов маркировки
//
// Параметры:
//  Объект	 - 	ДокументОбъект - Документ, на основании которого был пробит чек.
//
Процедура ОчиститьДанныеПроверкиКодовМаркировки(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.ДатаФР = Дата(1,1,1) Тогда
		
		// Проверим, что ранее чек пробивался
		ДатаФРДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДатаФР");
		
		Если ЗначениеЗаполнено(ДатаФРДокумента) Тогда
			
			Для Каждого ТекущаяСтрока Из Объект.КодыМаркировки Цикл
				
				ТекущаяСтрока.КодРезультатаПроверки = "";
				ТекущаяСтрока.КодМаркировкиПроверен = Ложь;
				ТекущаяСтрока.КодОбработкиЗапроса = "";
				ТекущаяСтрока.ПредставлениеРезультатаПроверки = "";
				ТекущаяСтрока.РезультатПроверки = Ложь;
				ТекущаяСтрока.РезультатПроверкиОИСМ = Ложь;
				ТекущаяСтрока.СтатусТовара = Перечисления.ОтветОИСМОСтатусеТовара.ПустаяСсылка();
				ТекущаяСтрока.ТекстОшибки = "";
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сопоставляет текстовое значение статус, полученного из ЧЗ и перечисления "Статусы документов маркировки".
//
// Параметры:
//  Статус - Строка, ПеречислениеСсылка.СтатусыДокументовМаркировки - статус документа.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыДокументовМаркировки - статус, соответствующих входному значению.
//
Функция СтатусДокументаМаркировкиПоЗначениюИзЧЗ(Статус) Экспорт
	
	Если ТипЗнч(Статус) = Тип("ПеречислениеСсылка.СтатусыДокументовМаркировки") Тогда
		Возврат Статус;
	КонецЕсли;
	
	Если Статус = "IN_PROGRESS" ИЛИ Статус = "WAIT_FOR_CONTINUATION" Тогда
		Возврат Перечисления.СтатусыДокументовМаркировки.ОжидаетОбработки;
	ИначеЕсли Статус = "CHECKED_OK" Тогда
		Возврат Перечисления.СтатусыДокументовМаркировки.Выполнен;
	ИначеЕсли Статус = "CHECKED_NOT_OK" Тогда
		Возврат Перечисления.СтатусыДокументовМаркировки.Отменен;
	ИначеЕсли Статус = "PROCESSING_ERROR" Тогда
		Возврат Перечисления.СтатусыДокументовМаркировки.ОбработанСОшибками;
	// только для документа "Отгрузка"
	ИначеЕсли Статус = "ACCEPTED" Тогда
		Возврат Перечисления.СтатусыДокументовМаркировки.Принят; // Принят
	ИначеЕсли Статус = "WAIT_PARTICIPANT_REGISTRATION" Тогда
		Возврат Перечисления.СтатусыДокументовМаркировки.ОжидаетРегистрации; // Устанавливается при успешной обработке документа "Отгрузка товара" в сторону незарегистрированного участника
	ИначеЕсли Статус = "CANCELLED" Тогда
		Возврат Перечисления.СтатусыДокументовМаркировки.АннулированаОтгрузка; // Аннулирован
	ИначеЕсли Статус = "WAIT_ACCEPTANCE" Тогда
		Возврат Перечисления.СтатусыДокументовМаркировки.ОжидаетПриемку; // ожидает приемку. Устанавливается при успешной обработке документа "Отгрузка"
	//--------
	ИначеЕсли Статус = "PARSE_ERROR" Тогда
		Возврат Перечисления.СтатусыДокументовМаркировки.ОбработанСОшибками; // обработан с ошибками
	Иначе
		Возврат Перечисления.СтатусыДокументовМаркировки.Новый;
	КонецЕсли;
	
КонецФункции

// Получение разрешенных статусов документов для заданного документа.
//
// Параметры:
//  Документ - ДокументСсылка - исходный документ.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыДокументовМаркировки - перечень разрешенных статусов.
//
Функция РазрешенныеСтатусыДокументовМаркировки(Документ) Экспорт
	
	ЭтоДокументОтгрузки = ТипЗнч(Документ) = Тип("ДокументСсылка.ОтгрузкаТоваровКодовМаркировки");
	
	РазрешенныеСтатусы = Новый Массив;
	
	РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.Новый);
	РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.Отправлен);
	РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.ОжидаетОбработки);
	Если ЭтоДокументОтгрузки Тогда
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.Принят);
	КонецЕсли;
	РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.Выполнен);
	РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.Отменен);
	РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.ОбработанСОшибками);
	Если ЭтоДокументОтгрузки Тогда
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.АннулированаОтгрузка);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.ОжидаетПриемку);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.ОжидаетРегистрации);
	КонецЕсли;
	
	Возврат РазрешенныеСтатусы;
	
КонецФункции

// Записывает текущий статус документа в регистр.
//
// Параметры:
//  Документ - ДокументОбъект - документ, в котором произошло событие.
//  Параметры - Структура - Структура параметров:
//    * ИдентификаторДокумента - Строка - идентификатор документа, полученный из ЧЗ;
//    * Статус - ПеречислениеСсылка.СтатусыДокументовМаркировки - текущий статус документа;
//    * ОписаниеОшибки - Строка - описание ошибки, возникшей при получении статуса или отправки документа.
//
Процедура ЗаписатьСтатусДокумента(Документ, Параметры) Экспорт
	
	ИдентификаторДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИдентификаторДокумента", "");
	Статус = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Параметры,
		"Статус",
		Перечисления.СтатусыДокументовМаркировки.Новый
	);
	ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОписаниеОшибки", "");
	
	РегистрыСведений.СтатусыДокументовМаркировки.ЗаписатьСтатусДокумента(
		Документ,
		ИдентификаторДокумента,
		Статус,
		ОписаниеОшибки
	);
	
КонецПроцедуры

// Разрешает/запрещает ввод вручную кодов маркировки в зависимости от права "РазрешитьРучнойВводКодовМаркировки".
//
// Параметры:
//  Форма  - УправляемаяФорма - Форма, в которой возникло событие.
//  Ссылка - ДокументСсылка - Ссылка на документ, в форме которого произошло событие.
//  ИмяЭлемента - Строка - Имя элемента формы, отображающего код маркировки.
//
Процедура УстановитьРедактированиеКодовМаркировки(Форма, Ссылка, ИмяЭлемента) Экспорт
	
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	РазрешитьРучнойВводКодовМаркировки = ПраваИНастройкиПользователя.Значение(
		"РазрешитьРучнойВводКодовМаркировки",
		Ссылка
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИмяЭлемента,
		"ТолькоПросмотр",
		Не РазрешитьРучнойВводКодовМаркировки
	);
	
КонецПроцедуры

// Очищает коды маркировки перед записью документа ПоступлениеТоваров для тех номенклатур,
// для которых не ведется учет КМ в базе.
//
// Параметры:
//  Объект				 - ДокументОбъект	 - Записываемый документ
//  ИмяТабличнойЧасти	 - Строка			 - Имя табличной части документа.
//
Процедура ОчиститьНеиспользуемыеКодыМаркировки(Объект, ИмяТабличнойЧасти = "Товары") Экспорт
	
	// Проверим наличие ТЧ кодов маркировки.
	Если НЕ ЕстьРеквизит(Объект, , "КодыМаркировки") Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим коды маркировки, которые связаны с товарами, для которых маркировка не настроена (не используется)
	МассивУдаления = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ИдентификаторТовара КАК ИдентификаторТовара
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.ИдентификаторТовара В (&ИдентификаторыТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				втТовары.Номенклатура КАК Номенклатура
	|			ИЗ
	|				втТовары КАК втТовары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.ИдентификаторТовара КАК ИдентификаторТовара
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыНоменклатуры КАК ТипыНоменклатуры
	|		ПО втНоменклатура.ТипНоменклатуры = ТипыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО втНоменклатура.Ссылка = втТовары.Номенклатура
	|ГДЕ
	|	НЕ ТипыНоменклатуры.ВедетсяМаркировка";
	
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "Номенклатура, ИдентификаторТовара");
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ИдентификаторыТоваров", Объект.КодыМаркировки.ВыгрузитьКолонку("ИдентификаторТовара"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска.ИдентификаторТовара = Выборка.ИдентификаторТовара;
		НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			МассивУдаления.Добавить(ТекущаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	// Непосредственно удаление.
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		Объект.КодыМаркировки.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Разобрать строку штрихкода в соответствии со стандартом GS1.
//
// Параметры:
//  Штрихкод - Строка - значение штрихкода.
//
// Возвращаемое значение:
//  Структура. 
//
Функция РазобратьШтриховойКодТовара(Штрихкод) Экспорт
	
	Возврат МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(ШтрихКод);
	
КонецФункции

// Определяет обязательность маркировки номенклатуры по дате документа и типу номенклатуры.
//
// Параметры:
//  Объект - СправочникСсылка.Номенклатура, СправочникСсылка.ТипыНоменклатуры - объект,
//     для которого происходит определение.
//  Дата - Дата, Неопределено - (необязательный). Дата определения обязательности маркировки.
//
// Возвращаемое значение:
//  Булево - Истина, если маркировка обязательна для данной номенклатуры/типа номенклатуры.
//
Функция МаркировкаНоменклатурыОбязательная(Знач Объект, Дата = Неопределено) Экспорт
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ТипНоменклатуры");
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ТипыНоменклатуры") Тогда
		
		ТипНоменклатуры = Объект;
		
	Иначе
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипНоменклатуры) Тогда 
		
		Возврат Результат;
		
	КонецЕсли;
	
	ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТипНоменклатуры,
			"МаркировкаОбязательная,ДатаОбязательнойМаркировки"
		);
	Результат = ДанныеОбъекта.МаркировкаОбязательная
		И ?(ЗначениеЗаполнено(ДанныеОбъекта.ДатаОбязательнойМаркировки), ДанныеОбъекта.ДатаОбязательнойМаркировки < Дата, Истина);
	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Очищает представления с кодами маркировки с криптохвостами после печати
//
Процедура ОчисткаНапечатанныхКодовМаркировки() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОчисткаНапечатанныхКодовМаркировки);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Не указан срок хранения кодов
	СрокХранения = Константы.СрокХраненияКодовМаркировкиПечати.Получить();
	Если СрокХранения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КодыМаркировкиДляПечати.ДокументОснование КАК ДокументОснование,
	               |	КодыМаркировкиДляПечати.Номенклатура КАК Номенклатура,
	               |	КодыМаркировкиДляПечати.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	КодыМаркировкиДляПечати.КодМаркировки КАК КодМаркировки
	               |ИЗ
	               |	РегистрСведений.КодыМаркировкиДляПечати КАК КодыМаркировкиДляПечати
	               |ГДЕ
	               |	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(КодыМаркировкиДляПечати.ДатаПечати, ДЕНЬ), &ТекущаяДата, ДЕНЬ) >= &СрокХранения
	               |	И КодыМаркировкиДляПечати.ДатаПечати <> ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("СрокХранения", СрокХранения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Чистим код маркировки для всех найденных записей
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.КодыМаркировкиДляПечати.СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.ХарактеристикаНоменклатуры.Установить(Выборка.ХарактеристикаНоменклатуры);
		Набор.Отбор.КодМаркировки.Установить(Выборка.КодМаркировки);
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ОчисткаНапечатанныхКодовМаркировки()

Процедура ПроверитьКоличествоКодовМаркировкиИТоваров(Объект, Отказ, ИмяТаблицыТоваров, ИмяТаблицыМаркировки)
	
	// Проверим, что нет строк, где количество товара меньше количества маркировки.
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТаблицыТоваров] Цикл
		
		// Найдем маркировку данной товарной строки
		СтруктураПоиска.ИдентификаторТовара = ТекущаяСтрока.ИдентификаторТовара;
		
		НайденныеСтроки = Объект[ИмяТаблицыМаркировки].НайтиСтроки(СтруктураПоиска);
		
		Если ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент < НайденныеСтроки.Количество() Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'В строке %1 табличной части ""%2"" указано кодов маркировки больше, чем номенклатуры.'"),
					ТекущаяСтрока.НомерСтроки,
					ИмяТаблицыТоваров
				),
				Объект,
				ИмяТаблицыТоваров + "[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Номенклатура",
					,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьКоличествоКодовМаркировкиИТоваров()

Процедура ПроверитьУникальностьКодовМаркировки(Объект, Отказ, ИмяТаблицыТоваров, ИмяТаблицыМаркировки)
	
	// Проверим, чтоб не было повторяющихся кодов маркировок в документе
	ОбработанныеСтроки = Новый Соответствие;
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	СтруктураПоискаКода = Новый Структура("КодМаркировки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТаблицыМаркировки] Цикл
		
		Если ОбработанныеСтроки.Получить(ТекущаяСтрока.КодМаркировки) <> Неопределено Тогда
			// Разобран ранее
			Продолжить;
		КонецЕсли;
		
		ОбработанныеСтроки.Вставить(ТекущаяСтрока.КодМаркировки, ТекущаяСтрока.КодМаркировки);
		
		СтруктураПоискаКода.КодМаркировки = ТекущаяСтрока.КодМаркировки;
		НайденныеСтроки = Объект[ИмяТаблицыМаркировки].НайтиСтроки(СтруктураПоискаКода);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			// Найдено более одного кода маркировки
			НомераСтрокПовтора = Новый Массив;
			
			Для Каждого ТекущаяМаркирвока Из НайденныеСтроки Цикл
				СтруктураПоиска.ИдентификаторТовара = ТекущаяМаркирвока.ИдентификаторТовара;
				ТоварнаяСтрока = Объект[ИмяТаблицыТоваров].НайтиСтроки(СтруктураПоиска);
				Если ТоварнаяСтрока.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если НомераСтрокПовтора.Найти(Строка(ТоварнаяСтрока[0].НомерСтроки)) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НомераСтрокПовтора.Добавить(Строка(ТоварнаяСтрока[0].НомерСтроки));
			КонецЦикла;
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для строк(и) %1 табличной части ""%2"" повторяется код маркировки %3'"),
					СтрСоединить(НомераСтрокПовтора, ","),
					ИмяТаблицыТоваров,
					ТекущаяСтрока.КодМаркировки),
				Объект,,,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьКодовМаркировки(Объект, Отказ, ИмяТаблицыТоваров, ИмяТаблицыМаркировки)
	
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	
	// Проверим, что все указанные коды маркировки соответствуют формату DataMatrix.
	Для Каждого ТекущаяСтрока Из Объект[ИмяТаблицыМаркировки] Цикл
		
		// Проверим, что считана именно маркировка.
		СтруктураШК = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(ТекущаяСтрока.КодМаркировки);
		
		Если (СтруктураШК.ТипИдентификатораТовара <>
			ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1")) Тогда
			
			СтруктураПоиска.ИдентификаторТовара = ТекущаяСтрока.ИдентификаторТовара;
			ТоварнаяСтрока = Объект[ИмяТаблицыТоваров].НайтиСтроки(СтруктураПоиска);
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'В строке %1 табличной части ""%2"" некорректный код маркировки %3'"),
					ТоварнаяСтрока[0].НомерСтроки,
					ИмяТаблицыТоваров,
					ТекущаяСтрока.КодМаркировки
				),
				Объект,
				ИмяТаблицыТоваров + "[" + (ТоварнаяСтрока[0].НомерСтроки - 1) + "].Номенклатура",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОбязательноеЗаполнениеКодовМаркировки(Объект, Отказ, ИмяТаблицыТоваров, ИмяТаблицыМаркировки)
	
	// Сформируем список номенклатуры для проверки.
	СписокНоменклатуры = Новый Массив;
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТаблицыТоваров] Цикл
		Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
			И СписокНоменклатуры.Найти(ТекущаяСтрока.Номенклатура) = Неопределено Тогда
			СписокНоменклатуры.Добавить(ТекущаяСтрока.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	// Получим настройки номенклатуры
	СоответствиеНоменклатуры = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(Номенклатура.ТипНоменклатуры.МаркировкаОбязательная, ЛОЖЬ) КАК МаркировкаОбязательная,
	|	ЕСТЬNULL(Номенклатура.ТипНоменклатуры.ДатаОбязательнойМаркировки, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОбязательнойМаркировки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&МассивНоменклатуры)";
	Запрос.УстановитьПараметр("МассивНоменклатуры", СписокНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Значение = Новый Структура("МаркировкаОбязательная,ДатаОбязательнойМаркировки");
		ЗаполнитьЗначенияСвойств(Значение, Выборка);
		СоответствиеНоменклатуры.Вставить(Выборка.Ссылка, Значение);
	КонецЦикла;
	
	ДатаДокумента = ДатаПроверкиНачалаОбязательнойМаркировки(Объект);
	Для Каждого ТекущаяСтрока Из Объект[ИмяТаблицыТоваров] Цикл
		
		Значение = СоответствиеНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);
		
		Если Значение = Неопределено
			Или Не Значение.МаркировкаОбязательная
			Или Значение.МаркировкаОбязательная И Значение.ДатаОбязательнойМаркировки > ДатаДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим, что количество считанных кодов маркировки совпадает с количеством товаров.
		СтруктураПоиска.ИдентификаторТовара = ТекущаяСтрока.ИдентификаторТовара;
		
		НайденныеСтроки = Объект[ИмяТаблицыМаркировки].НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() < ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для строки %1 табличной части ""%2"" заполнено кодов маркировки меньше, чем указано номенклатуры.'"),
					ТекущаяСтрока.НомерСтроки,
					ИмяТаблицыТоваров
				),
				Объект,
				ИмяТаблицыТоваров + "[" + (ТекущаяСтрока.НомерСтроки - 1 ) + "].Номенклатура",
				,
				Отказ			
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НедоступныеТоварныеГруппы(Документ)
	
	НедоступныеТоварныеГруппы = Новый Массив;
	ТипДокумента = ТипЗнч(Документ);
	
	Если ТипДокумента = Тип("ДокументСсылка.ВводВОборотКодовМаркировки") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			НедоступныеТоварныеГруппы,
			МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции());
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратВОборотКодовМаркировки") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			НедоступныеТоварныеГруппы,
			МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции());
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтгрузкаТоваровКодовМаркировки") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			НедоступныеТоварныеГруппы,
			МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции());
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Перемаркировка") Тогда
		НедоступныеТоварныеГруппы.Добавить("milk");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			НедоступныеТоварныеГруппы,
			МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции());
	КонецЕсли;
	
	Возврат НедоступныеТоварныеГруппы;
	
КонецФункции

Функция ДатаПроверкиНачалаОбязательнойМаркировки(Объект)
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказНаряд") И ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
		Дата = Объект.ДатаЗакрытия;
	Иначе
		Дата = Объект.Дата;
	КонецЕсли;
	
	Дата = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Возврат Дата;
	
КонецФункции

#КонецОбласти

