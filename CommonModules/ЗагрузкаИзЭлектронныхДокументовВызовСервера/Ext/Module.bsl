

#Область ПрограммныйИнтерфейс

// Дополнение дополнительными реквизитами таблицы реквизитов.
//
// Параметры:
//  МетаданныеИсточникаЗагрузки								 - ОбъектМетаданных					 - Объект загрузки.
//  ТаблицаЗагружаемыхРеквизитов							 - ТаблицаЗначений					 - Таблица реквизитов.
//  ВидНоменклатуры											 - СправочникСсылка.ТипыНоменклатуры - Тип номенклатуры.
//  ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры	 - Булево							 - Признак загрузки дополнительных реквизитов
//  ТолькоОбщиеДопРеквизитыСведения							 - Булево							 - Загружать только общие реквизиты.
//
Процедура ДополнитьДополнительныеРеквизитыВТаблицуРеквизитов(
	МетаданныеИсточникаЗагрузки, ТаблицаЗагружаемыхРеквизитов,
	ВидНоменклатуры,
	ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры,
	ТолькоОбщиеДопРеквизитыСведения) Экспорт
	
	Если НЕ (Метаданные.Справочники.Найти(МетаданныеИсточникаЗагрузки.Имя)<>Неопределено 
		И (МетаданныеИсточникаЗагрузки.Имя = "Номенклатура" 
		ИЛИ МетаданныеИсточникаЗагрузки.Имя = "ХарактеристикиНоменклатуры"
		ИЛИ МетаданныеИсточникаЗагрузки.Имя = "Контрагенты")) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МетаданныеИсточникаЗагрузки.Имя = "ХарактеристикиНоменклатуры" Тогда
		ЗаполнитьТаблицуПриемникаДопРеквизитамиХарактеристик(ТаблицаЗагружаемыхРеквизитов, ВидНоменклатуры, 
			ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры, ТолькоОбщиеДопРеквизитыСведения);
	Иначе
		ЗаполнитьТаблицуПриемникаДопРеквизитамиНоменклатуры(ТаблицаЗагружаемыхРеквизитов, ВидНоменклатуры, 
			ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры, ТолькоОбщиеДопРеквизитыСведения, МетаданныеИсточникаЗагрузки.ПолноеИмя());	
	КонецЕсли;
	
КонецПроцедуры

// Процедура переноса табличного файла в табличное поле с помощью внешней обработки.
//
// Параметры:
//  ПолноеИмяФайла - Строка - Строка, содержащая полное имя файла.
//  ОбработкаПреобразования - СправочникСсылка.ДополнительныеОтчетыИОбработки - Подключаемая обработка.
//  ТабличныйДокумент - ТабличныйДокумент - Документ, в который будет перемещен файл.
//  АдресВХранилище - Строка - Адрес во временном хранилище.
//
Процедура ЗаполнитьТабличныйДокументИзXMLСервер(ПолноеИмяФайла, ОбработкаПреобразования, ТабличныйДокумент, АдресВХранилище) Экспорт
	
	ОбработкаЗагрузки = Неопределено;
	Попытка
		ОбработкаЗагрузки = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ОбработкаПреобразования);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Не удалось создать обработку преобразования.'"));
		Возврат;
	КонецПопытки;
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
	Попытка
		ОбработкаЗагрузки.ИмяФайла = ПолноеИмяФайла;
		ОбработкаЗагрузки.АдресВХранилище = АдресВХранилище;
		ОбработкаЗагрузки.РазложитьФайлВТаблицу();
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбработкаЗагрузки.ПеренестиДанныеВТабличноеПоле());
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Не удалось преобразовать файл в таблицу.'"));
	КонецПопытки;
	
КонецПроцедуры

// Заполняет настройки колонок по умолчанию для справочника.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - ТабличныйДокумент, в который необходимо прочитать данные.
//  РасширениеФайла   - Строка            - Расширение файла, из которого необходимо прочитать данные.
//  ИмяБезРасширения  - Строка            - Имя файла в формате TXT, из которого необходимо прочитать данные.
//  АдресВоВременномХранилище - Строка    - Адрес двоичных данных во временном хранилище.
//  Табуляция - Строка                    - Разделитель.
//  Кодировка - КодировкаТекста, Строка   - кодировка текста читаемого файла,
//
Процедура ПрочитатьТабличныйДокумент(ТабличныйДокумент, РасширениеФайла, ИмяБезРасширения, АдресВоВременномХранилище, Табуляция, Кодировка) Экспорт
	
	Расширение = НРег(РасширениеФайла);
	
	Если Расширение = ".mxl" Тогда
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		ВременныйФайл = КаталогВременныхФайлов() + "testUA.mxl";
		ДанныеФайла.Записать(ВременныйФайл);
		
		Попытка
			ТабличныйДокумент.Прочитать(ВременныйФайл);
		Исключение
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru= 'Ошибка открытия файла.'"));
		КонецПопытки;
		
	ИначеЕсли Расширение = ".xls" ИЛИ Расширение = ".xlsx" ИЛИ Расширение = ".ods" Тогда
		
		ПрочитатьТабличныйДокументИзExcel(ТабличныйДокумент, АдресВоВременномХранилище, Кодировка,,Расширение);
		
	ИначеЕсли (Расширение = ".txt") ИЛИ (Расширение = ".sst") ИЛИ (Расширение = ".mmo") ИЛИ (Расширение = ".csv") Тогда
		
		Разделитель = СокрЛП(Табуляция);
		Если ВРег(Разделитель) = "ТАБ" ИЛИ ВРег(Разделитель) = "TAB" Тогда
			Разделитель = Символы.Таб;
		ИначеЕсли НЕ СтрДлина(Разделитель)=1 Тогда
			Разделитель = Неопределено;
		КонецЕсли;
		ПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент, Разделитель, АдресВоВременномХранилище, Расширение, Кодировка);
		
	ИначеЕсли Расширение = ".dbf" Тогда
		
		ПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент, ИмяБезРасширения, АдресВоВременномХранилище, Кодировка);
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный формат файла (*%1).'"),Расширение));
	КонецЕсли;
	
	УдалитьПустыеСтроки(ТабличныйДокумент);
	
КонецПроцедуры // ПрочитатьТабличныйДокумент()

// Функция считывает в табличный документ данные из файла в формате Excel.
//
// Параметры:
//  ТабличныйДокумент			 - ТабличныйДокумент		- ТабличныйДокумент, в который необходимо прочитать данные.
//  АдресВоВременномХранилище	 - Строка					- Адрес двоичных данных во временном хранилище.
//  Кодировка					 - КодировкаТекста, Строка	- кодировка текста читаемого файла,
//  НомерЛистаExcel				 - Число					- Номер листа книги Excel, из которого необходимо прочитать данные.
//  ПереданноеРасширение		 - Строка					- Расширение файла, из которого необходимо прочитать данные.
//
// Возвращаемое значение:
//  Булево			- Истина, если файл прочитан, Ложь - иначе.
//
Функция ПрочитатьТабличныйДокументИзExcel(
		ТабличныйДокумент,
		АдресВоВременномХранилище,
		Кодировка,
		НомерЛистаExcel = 1,
		ПереданноеРасширение = ".xls") Экспорт
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ВременныйФайл = КаталогВременныхФайлов() + "testUA"+ПереданноеРасширение;
	ДанныеФайла.Записать(ВременныйФайл);
	ИмяФайла = ВременныйФайл;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		ОбщегоНазначения.СообщитьПользователю (НСтр("ru= 'Файл не существует.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ТабличныйДокументФайла = Новый ТабличныйДокумент;
	
	Попытка
		ТабличныйДокументФайла.Прочитать(ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	// Скопируем данные из загруженного файла в табличный документ.
	Для НомерСтроки = 1 По ТабличныйДокументФайла.ВысотаТаблицы Цикл
		
		Для НомерКолонки = 1 По ТабличныйДокументФайла.ШиринаТаблицы Цикл
			ТабличныйДокумент.Область(НомерСтроки, НомерКолонки).Текст =
				ТабличныйДокументФайла.Область(НомерСтроки, НомерКолонки).Текст;
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции // ПрочитатьТабличныйДокументИзExcel()

// Процедура формирует структуру колонок загружаемых реквизитов из табличной части "ТаблицаЗагружаемыхРеквизитов".
//
// Параметры:
//  СтруктураРеквизитов - Структура - перечень значений реквизитов.
//
Процедура СформироватьСтруктуруКолонок(СтруктураРеквизитов) Экспорт
	
	НомерКолонки = 1;
	Колонки = Новый Структура;
	ТаблицаЗагружаемыхРеквизитов = СтруктураРеквизитов.ТаблицаЗагружаемыхРеквизитов.Скопировать();
	Для Каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		Колонка = Новый Структура;
		Для Каждого КолонкаЗагружаемыхРеквизитов Из ТаблицаЗагружаемыхРеквизитов.Колонки Цикл
			Колонка.Вставить(КолонкаЗагружаемыхРеквизитов.Имя,ЗагружаемыйРеквизит[КолонкаЗагружаемыхРеквизитов.Имя]);
		КонецЦикла;
		
		Колонки.Вставить(Колонка.ИмяРеквизита,Колонка);
		
	КонецЦикла;
	СтруктураРеквизитов.Вставить("Колонки", Колонки);
КонецПроцедуры // СформироватьСтруктуруКолонок()

// Функция возвращает метаданные источника данных.
//
// Параметры:
//  СтруктураРеквизитов - Структура - перечень значений реквизитов.
//
// Возвращаемое значение:
//   ОбъектМетаданныхКонфигурация - Объект метаданных.
//
Функция ПолучитьМетаданныеИсточника(СтруктураРеквизитов) Экспорт 
	
	РежимЗагрузки 			= СтруктураРеквизитов.РежимЗагрузки;
	СсылкаИсточника 		= СтруктураРеквизитов.СсылкаИсточника;
	ТабличнаяЧастьИсточника = СтруктураРеквизитов.ТабличнаяЧастьИсточника;
	ИмяВидаРегистра 		= СтруктураРеквизитов.ИмяВидаРегистра;
	ИмяСправочника 			= СтруктураРеквизитов.ИмяСправочника;
	
	Если РежимЗагрузки = 0 Тогда
		
		Если НЕ СсылкаИсточника = Неопределено Тогда
			Возврат СсылкаИсточника.Метаданные();
		КонецЕсли;
		
	ИначеЕсли РежимЗагрузки = 1 ИЛИ РежимЗагрузки = 3 Тогда
		
		Если НЕ СсылкаИсточника = Неопределено И НЕ ТабличнаяЧастьИсточника = Неопределено Тогда
			Возврат СсылкаИсточника.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧастьИсточника);
		ИначеЕсли НЕ ПустаяСтрока(ИмяВидаРегистра) Тогда
			Возврат Метаданные.РегистрыСведений[ИмяВидаРегистра];
		ИначеЕсли НЕ ПустаяСтрока(ИмяСправочника) Тогда
			Возврат Метаданные.Справочники[ИмяСправочника];
		КонецЕсли;
		
	ИначеЕсли РежимЗагрузки = 2 Тогда
		
		Если НЕ ПустаяСтрока(ИмяВидаРегистра) Тогда
			Возврат Метаданные.РегистрыСведений[ИмяВидаРегистра];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьМетаданныеИсточника()

// Процедура обновляет содержимое табличного документа, в соответствии с таблицей загружаемых реквизитов.
//
// Параметры:
//  СтруктураРеквизитов		 - Структура			 - перечень значений реквизитов.
//  ТабличныйДокумент		 - ТабличныйДокумент	 - ТабличныйДокумент, который необходимо обновить
//  БезВопросов				 - Булево				 - Если Ложь, спрашивать об очистке табличного документа, если он не пустой,
//														Истина - иначе
//  ЗаполнитьИзТЧДокумента - Булево					 - табличный документ будет заполнен текущими значениями
//														табличной части документа (имеет значение при РежимЗагрузки=1,3).
//
Процедура ОбновитьДанныеТабличногоДокумента(СтруктураРеквизитов, ТабличныйДокумент, БезВопросов = Ложь, ЗаполнитьИзТЧДокумента = Истина) Экспорт
	
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруКолонок(СтруктураРеквизитов);
	СформироватьШапкуТабличногоДокумента(СтруктураРеквизитов, ТабличныйДокумент);
	
	НомерСтроки = СтруктураРеквизитов.ПерваяСтрокаДанныхТабличногоДокумента;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.РежимЗагрузки = 0 ИЛИ СтруктураРеквизитов.РежимЗагрузки = 2
	 ИЛИ МетаданныеИсточника = Неопределено ИЛИ НЕ ЗаполнитьИзТЧДокумента Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитов.ТЧДокумента = Неопределено И СтруктураРеквизитов.СсылкаИсточника <> Неопределено Тогда
		Источник = СтруктураРеквизитов.СсылкаИсточника[СтруктураРеквизитов.ТабличнаяЧастьИсточника];
	ИначеЕсли СтруктураРеквизитов.ТЧДокумента <> Неопределено Тогда
		Источник = СтруктураРеквизитов.ТЧДокумента;
	Иначе
		// Очистим тип загружаемого объекта, он явно поменялся.
		СтруктураРеквизитов.ИмяСправочника = "";
		СтруктураРеквизитов.ИмяВидаРегистра = "";
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из Источник Цикл
		
		НомерКолонки = 0;
		
		Для каждого ЗагружаемыйРеквизит Из СтруктураРеквизитов.ТаблицаЗагружаемыхРеквизитов Цикл
			
			Если ЗагружаемыйРеквизит.Пометка Тогда
				
				Если СтруктураРеквизитов.РучнаяНумерацияКолонокТабличногоДокумента Тогда
					НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
				Иначе
					НомерКолонки = НомерКолонки + 1;
				КонецЕсли;
				
				Если НомерКолонки > 0 Тогда
					Область = ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C" + НомерКолонки);
					Значение = Строка[ЗагружаемыйРеквизит.ИмяРеквизита];
					
					Попытка
						Представление = Значение[ЗагружаемыйРеквизит.ИскатьПо];
						
					Исключение
						
						Представление = Значение;
						
					КонецПопытки;
					
					Область.Текст = Представление;
					Область.Расшифровка = Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьДанныеТабличногоДокумента(()

// Инициализация параметров по умолчанию.
// 
// Возвращаемое значение:
//  Структура - Структура с параметрами.
//
Функция Инициализация() Экспорт
	
	СтруктураПараметров = Новый Структура;
	МенеджерыОбъектовМетаданных =  Новый Структура();
	МенеджерыОбъектовМетаданных.Вставить("Справочники",             Справочники);
	МенеджерыОбъектовМетаданных.Вставить("Перечисления",            Перечисления);
	МенеджерыОбъектовМетаданных.Вставить("Документы",               Документы);
	МенеджерыОбъектовМетаданных.Вставить("ПланыВидовХарактеристик", ПланыВидовХарактеристик);
	МенеджерыОбъектовМетаданных.Вставить("ПланыСчетов",             ПланыСчетов);
	МенеджерыОбъектовМетаданных.Вставить("ПланыВидовРасчета",       ПланыВидовРасчета);
	МенеджерыОбъектовМетаданных.Вставить("БизнесПроцессы",          БизнесПроцессы);
	МенеджерыОбъектовМетаданных.Вставить("Задачи",                  Задачи);
	СтруктураПараметров.Вставить("МенеджерыОбъектовМетаданных",МенеджерыОбъектовМетаданных);
	
	СтруктураПараметров.Вставить("КешМенеджеровПоТипу", Новый Соответствие);
	
	ПримитивныеТипы = Новый Структура();
	ПримитивныеТипы.Вставить("Число",  Тип("Число"));
	ПримитивныеТипы.Вставить("Строка", Тип("Строка"));
	ПримитивныеТипы.Вставить("Дата",   Тип("Дата"));
	ПримитивныеТипы.Вставить("Булево", Тип("Булево"));
	СтруктураПараметров.Вставить("ПримитивныеТипы", ПримитивныеТипы);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Проверка признака документа
//
// Параметры:
//  СсылкаИсточника - ЛюбаяСсылка - Объект проверки.
// 
// Возвращаемое значение:
//  Булево - Истина: это документ. Ложь: это не документ.
//
Функция ПроверитьЧтоЭтоДокумент(СсылкаИсточника) Экспорт
	Возврат Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаИсточника));
КонецФункции

// Получение списка табличных частей объекта.
//
// Параметры:
//  СсылкаИсточника - ЛюбаяСсылка - Объект получения табличных частей.
// 
// Возвращаемое значение:
//  СписокЗначений - Список табличных частей.
//
Функция ПолучитьСписокТабличныхЧастей(СсылкаИсточника) Экспорт
	СписокВыбора = Новый СписокЗначений;
	
	Если СсылкаИсточника = Неопределено Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из СсылкаИсточника.Метаданные().ТабличныеЧасти Цикл
		СписокВыбора.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции

// Функция возвращает список, элементами которого выступают возможные имена представления загружаемого реквизита.
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка	- Строка таблицы значений загружаемого реквизита.
//
// Возвращаемое значение:
//  СписокЗначений		- Список значений; значение списка - строка имя представления.
//
Функция ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	Для Каждого Тип Из ЗагружаемыйРеквизит.ОписаниеТипов.Типы() Цикл
		
		РеквизитыОбъектаДляПоиска = Новый СписокЗначений;
		МетаданныеТипа      = Метаданные.НайтиПоТипу(Тип);
		ЭтоСправочник       = Справочники.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоСчет             = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоВидХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип);
		
		Если Не (ЭтоСправочник ИЛИ ЭтоСчет ИЛИ ЭтоВидХарактеристик) Тогда
			Продолжить;
		КонецЕсли;
			
		ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
		ЕстьИмя = МетаданныеТипа.ДлинаНаименования > 0;
		ЭтоСчетПредставление = ?(ЭтоСчет, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета, 
			Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики);	 
		ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника, 
			ЭтоСчетПредставление);
		
		Если МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода Тогда
			
			Если ЕстьКод Тогда
				РеквизитыОбъектаДляПоиска.Добавить("Код", "Код");
			КонецЕсли;
			
			Если ЕстьИмя Тогда
				РеквизитыОбъектаДляПоиска.Добавить("Наименование", "Наименование");
			КонецЕсли;
			
		Иначе
			
			Если ЕстьИмя Тогда
				РеквизитыОбъектаДляПоиска.Добавить("Наименование", "Наименование");
			КонецЕсли;
			
			Если ЕстьКод Тогда
				РеквизитыОбъектаДляПоиска.Добавить("Код", "Код");
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
			
			Если НЕ Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать
				И Реквизит.Тип.Типы().Количество() = 1 И Реквизит.Тип.Типы()[0] = Тип ("Строка") Тогда
				
				РеквизитыОбъектаДляПоиска.Добавить(Реквизит.Имя, Реквизит.Представление());
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если (Тип = Тип("СправочникСсылка.Номенклатура")) 
			ИЛИ (Тип = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")) Тогда
			
			РеквизитыОбъектаДляПоиска.Добавить("ШтрихКод", "Штрих-код");
		КонецЕсли;
		
		Для Каждого РеквизитДляПоиска Из РеквизитыОбъектаДляПоиска Цикл
			
			Если СписокВыбора.НайтиПоЗначению(РеквизитДляПоиска.Значение) = Неопределено Тогда
				
				СписокВыбора.Добавить(РеквизитДляПоиска.Значение, РеквизитДляПоиска.Представление);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСписокИменПредставлений()

// Функция возвращает список, элементами которого выступают возможные связи по владельцу для загружаемого реквизита.
//
// Параметры:
//  ЗагружаемыйРеквизит				 - Строка			 - Строка таблицы значений загружаемого реквизита.
//  ТаблицаЗагружаемыхРеквизитов	 - ТаблицаЗначений	 - загружаемые реквизиты.
//
// Возвращаемое значение:
//  СписокЗначений		- Список значений; значение списка - строка имя колонки связи или ссылка на элемент связи.
//
Функция ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит, ТаблицаЗагружаемыхРеквизитов) Экспорт
	
	ЕстьТипСамогоОбъекта = Ложь;
	ОписаниеТиповСправочника = Неопределено;
	
	СписокВыбора = Новый СписокЗначений;
	ТипыВладельцев = Новый Соответствие;
	
	Если ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[0] = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		СписокВыбора.Добавить("Вычисляется по виду номенклатуры", НСтр("ru = 'Вычисляется по виду номенклатуры'"));
	КонецЕсли;
		
	Для Каждого ТипКолонки Из ЗагружаемыйРеквизит.ОписаниеТипов.Типы() Цикл
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипКолонки) Тогда
			ТекВладельцыКолонки = Метаданные.НайтиПоТипу(ТипКолонки).Владельцы;
			Для Каждого ТекВладелец Из ТекВладельцыКолонки Цикл
				ТипВладельца   = Тип(СтрЗаменить(ТекВладелец.ПолноеИмя(), ".", "Ссылка."));
				Если ТипыВладельцев[ТипВладельца] = Неопределено Тогда
 					Если ТипВладельца = ОписаниеТиповСправочника Тогда
						ЕстьТипСамогоОбъекта = Истина;
					КонецЕсли;
					ТипыВладельцев.Вставить(ТипВладельца, ТекВладелец.ПолноеИмя());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ТипыВладельцев Цикл
		Для Каждого КолонкаСвязиПоВладельцу Из ТаблицаЗагружаемыхРеквизитов Цикл
			Для Каждого ТекТипВладельца Из КолонкаСвязиПоВладельцу.ОписаниеТипов.Типы() Цикл
				Если ТекТипВладельца = КлючИЗначение.Ключ Тогда
					СписокВыбора.Добавить(КолонкаСвязиПоВладельцу.ИмяРеквизита,КолонкаСвязиПоВладельцу.ИмяРеквизита);
					Для Каждого ТекРеквизитВладельца Из Метаданные.НайтиПоТипу(ТекТипВладельца).Реквизиты Цикл
						Для Каждого ТекПроверкаТипов Из ТипыВладельцев Цикл
							Если ТекРеквизитВладельца.Тип.СодержитТип(ТекПроверкаТипов.Ключ) Тогда
								СписокВыбора.Добавить(КолонкаСвязиПоВладельцу.ИмяРеквизита+"."
									+ТекРеквизитВладельца.Имя, КолонкаСвязиПоВладельцу.ИмяРеквизита+"."+ТекРеквизитВладельца.Имя);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСписокСвязейПоВладельцу()

// Функция возвращает список, элементами которого выступают возможные связи по типу для загружаемого реквизита.
//
// Параметры:
//  ЗагружаемыйРеквизит				 - Строка			 - Строка таблицы значений загружаемого реквизита.
//  ТаблицаЗагружаемыхРеквизитов	 - ТаблицаЗначений	 - загружаемые реквизиты.
//
// Возвращаемое значение:
//  СписокЗначений		- Список значений; значение списка - строка имя колонки связи или ссылка на элемент связи.
//
Функция ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит,ТаблицаЗагружаемыхРеквизитов) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	
	ВозможныеПланыСчетов = Новый Структура;
	Для Каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		Если ПланСчетов.ВидыСубконто = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПланСчетов.ВидыСубконто.Тип = ЗагружаемыйРеквизит.ОписаниеТипов Тогда
			ВозможныеПланыСчетов.Вставить(ПланСчетов.Имя,ПланыСчетов[ПланСчетов.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		ТипЗНЧПланСчетов = ТипЗНЧ(ПланСчетов.Значение.ПустаяСсылка());
		Для Каждого КолонкаСвязиПоТипу Из ТаблицаЗагружаемыхРеквизитов Цикл
			Если КолонкаСвязиПоТипу.ОписаниеТипов.Типы()[0] = ТипЗНЧПланСчетов Тогда
				СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита,КолонкаСвязиПоТипу.ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ ВозможныеПланыСчетов.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< " + НСтр("ru = 'пустое значение'") + " >");
	КонецЕсли;
	
	Для Каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		СписокВыбора.Добавить("ПланСчетовСсылка."+ПланСчетов.Ключ,"<"+ПланСчетов.Ключ+">");
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСписокСвязейПоТипу()

// Функция "расщепляет" строку на подстроки, используя заданный
//		разделитель. Разделитель может иметь любую длину.
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//
//	Параметры:
//		Стр - 			Строка	- Строка, которую необходимо разложить на подстроки.
//								Параметр передается по значению.
//		Разделитель - 	Строка	- Строка-разделитель, по умолчанию - запятая.
//
//	Возвращаемое значение:
//		Массив 	- Массив значений, элементы которого подстроки.
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = СтрНайти(Стр,Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = СтрНайти(Стр,Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	Возврат МассивСтрок;
	
КонецФункции // РазложитьСтрокуВМассивПодстрок

// Функция приводит строковое представление числа к его значению.
//
// Параметры:
//  Представление - Строка			- Представление числа
//  ОписаниеТипов - ОписаниеТипов	- Допустимое описание типов численного значения
//  Примечание    - Строка			- Примечание (необязательный).
//
// Возвращаемое значение:
//  Число		- Значение типа число.
//
Функция ПривестиКЧислу(Представление, Знач ОписаниеТипов = Неопределено, Примечание = "") Экспорт
	
	Если ОписаниеТипов = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Число");
	КонецЕсли;
	
	НРегПредставление = НРег(Представление);
	Если НРегПредставление = "да" ИЛИ НРегПредставление = "истина" ИЛИ НРегПредставление = "включено" Тогда
		Возврат 1;
	ИначеЕсли НРегПредставление = "нет" ИЛИ НРегПредставление = "ложь" ИЛИ НРегПредставление = "выключено" Тогда
		Возврат 0;
	КонецЕсли;
	
	Результат = СтрЗаменить(Представление, " ", "");
	Попытка
		Результат = Число(Результат);
	Исключение
		Примечание = НСтр("ru = 'Недопустимое числовое значение'");
		Возврат 0;
	КонецПопытки;
	
	Результат1 = ОписаниеТипов.ПривестиЗначение(Результат);
	
	Если НЕ Результат1 = Результат Тогда
		Примечание = НСтр("ru = 'Недопустимое числовое значение'");
	КонецЕсли;
	
	Возврат Результат1;
	
КонецФункции // мПривестиКЧислу()

// Заполняет настройки колонок по умолчанию или по переданным настройкам.
//
// Параметры:
//  Настройки				 - ТабличныйДокумент			 - Табличный документ или неопределено.
//  СтруктураПараметров		 - Структура					 - Параметры загрузки.
//  МетаданныеДляЗагрузки	 - ОбъектМетаданныхКонфигурация	 - Объект метаданных
//
Процедура ЗаполнитьНастройкиКолонок(Настройки, СтруктураПараметров, МетаданныеДляЗагрузки = Неопределено) Экспорт
	
	СтруктураПараметров.ПередЗаписьюОбъекта   = "";
	СтруктураПараметров.ПриЗаписиОбъекта      = "";
	СтруктураПараметров.ПослеДобавленияСтроки = "";
	
	Если ТипЗнч(Настройки) = Тип("ТабличныйДокумент") Тогда
		
		ВерсияОбработки = СокрЛП(Настройки.Область("R1C5").Текст);
		
		ПараметрыДляОбработки = 
			ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ПолучитьПараметрыПоВерсииОбработки(ВерсияОбработки, Настройки);		
		ТекущаяСтрока = ПараметрыДляОбработки.ТекущаяСтрока;
		
		Попытка
			
			ТекстВосстановленногоРежимаЗагрузки = СокрЛП(Настройки.Область(?(ВерсияОбработки = "1.1","R1","R2") + "C5").Текст);
			Если ТекстВосстановленногоРежимаЗагрузки = НСтр("ru = 'в справочник'") 
				ИЛИ ТекстВосстановленногоРежимаЗагрузки = "" Тогда
				
				ВосстановленныйРежимЗагрузки = 0;
			ИначеЕсли ТекстВосстановленногоРежимаЗагрузки = НСтр("ru = 'в табличную часть'") 
					ИЛИ ТекстВосстановленногоРежимаЗагрузки = "Х" Тогда
					
				Если ТекстВосстановленногоРежимаЗагрузки = НСтр("ru = 'в табличную часть'") Тогда
					ТекстОбъекта = СокрЛП(Настройки.Область(?(ВерсияОбработки = "1.1","R2","R3") + "C5").Текст);
					Если Лев(ТекстОбъекта, 16) = "РегистрСведений." Тогда
						ВосстановленныйРежимЗагрузки = 2;
					Иначе
						ВосстановленныйРежимЗагрузки = 1;
					КонецЕсли;
				Иначе
					ВосстановленныйРежимЗагрузки = 1;
				КонецЕсли;
			ИначеЕсли ТекстВосстановленногоРежимаЗагрузки = НСтр("ru = 'в регистр сведений'") Тогда
				ВосстановленныйРежимЗагрузки = 2;
			КонецЕсли;
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Настройки.Область(?(ВерсияОбработки = "1.1","R2","R3") + "C5").Текст);
			Если МетаданныеОбъекта = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Неправильный формат файла'");
			КонецЕсли;
			
			Если ВосстановленныйРежимЗагрузки = 0 Тогда
				ВосстановленныйСсылкаИсточника = Новый(СтрЗаменить(МетаданныеОбъекта.ПолноеИмя(),".","Ссылка."));
			ИначеЕсли ВосстановленныйРежимЗагрузки = 1 Тогда
				ВосстановленныйСсылкаИсточника = Новый(СтрЗаменить(МетаданныеОбъекта.Родитель().ПолноеИмя(),".","Ссылка."));
			ИначеЕсли ВосстановленныйРежимЗагрузки = 3 Тогда
				ВосстановленныйСсылкаИсточника = СтруктураПараметров.СсылкаИсточника;
			Иначе
				ВосстановленныйСсылкаИсточника = Неопределено;
			КонецЕсли;
			
			СтруктураУмолчаний = Новый Структура;
			ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
			ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
			Пока НЕ ПустаяСтрока(ИмяРеквизита) Цикл
				СтруктураУмолчанияРеквизита = Новый Структура;
				СтруктураУмолчанияРеквизита.Вставить("ИмяРеквизита",ИмяРеквизита);
				СтруктураУмолчанияРеквизита.Вставить("Пометка",
					НЕ ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C1").Текст));
				СтруктураУмолчанияРеквизита.Вставить("ПолеПоиска",
					НЕ ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C3").Текст));
				
				Типы = Новый Массив;
				ОписаниеТиповСтрокой = Настройки.Область(ТекущаяСтрокаОбласти + "C4").Текст;
				Для к = 1 По СтрЧислоСтрок(ОписаниеТиповСтрокой)  Цикл
					
					кс = Неопределено;кч = Неопределено;кд = Неопределено;
					МассивЧастейТипа = РазложитьСтрокуВМассивПодстрок(НРег(СокрЛП(СтрПолучитьСтроку(ОписаниеТиповСтрокой,к ))), ",");
					Если МассивЧастейТипа.Количество() = 0 Тогда
						Продолжить;
					ИначеЕсли СтрНайти(МассивЧастейТипа[0],".") Тогда
						Тип = Тип(СтрЗаменить(МассивЧастейТипа[0],".","Ссылка."));
					ИначеЕсли МассивЧастейТипа[0] = "строка" Тогда
						Тип = Тип("Строка");
						Если МассивЧастейТипа.Количество() = 2 Тогда
							кс = Новый КвалификаторыСтроки(ПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Переменная);
						ИначеЕсли МассивЧастейТипа.Количество() = 3 Тогда
							кс = Новый КвалификаторыСтроки(ПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Фиксированная);
						Иначе
							кс = Новый КвалификаторыСтроки;
						КонецЕсли;
					ИначеЕсли МассивЧастейТипа[0] = "число" Тогда
						Тип = Тип("Число");
						кч = Новый КвалификаторыЧисла(ПривестиКЧислу(МассивЧастейТипа[1]),ПривестиКЧислу(МассивЧастейТипа[2]),
							?(МассивЧастейТипа.Количество() = 4, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой));
					ИначеЕсли МассивЧастейТипа[0] = "булево" Тогда
						Тип = Тип("Булево");
					ИначеЕсли МассивЧастейТипа[0] = "дата" Тогда
						Тип = Тип("Дата");
						кд = Новый КвалификаторыДаты(ЧастиДаты.Дата);
					ИначеЕсли МассивЧастейТипа[0] = "время" Тогда
						Тип = Тип("Дата");
						кд = Новый КвалификаторыДаты(ЧастиДаты.Время);
						ИначеЕсли МассивЧастейТипа[0] = НСтр("ru = 'дата и время'") Тогда
						Тип = Тип("Дата");
						кд = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
					Иначе
						Продолжить;
					КонецЕсли;
					Типы.Добавить(Тип);
				КонецЦикла;
				
				ОписаниеТипов = Новый ОписаниеТипов(Типы, кч, кс, кд);
				СтруктураУмолчанияРеквизита.Вставить("ОписаниеТипов",ОписаниеТипов);
				
				РежимЗагрузкиРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C5").Текст;
				
				СтруктураУмолчанияРеквизита.Вставить("РежимЗагрузки",РежимЗагрузкиРеквизита);
				СтруктураУмолчанияРеквизита.Вставить("НомерКолонки", Настройки.Область(ТекущаяСтрокаОбласти + "C6").Текст);
				ЗначениеПоУмолчанию = Настройки.Область(ТекущаяСтрокаОбласти + "C7").Текст;
				СтруктураУмолчанияРеквизита.Вставить("ЗначениеПоУмолчанию",?(ПустаяСтрока(ЗначениеПоУмолчанию), 
					ОписаниеТипов.ПривестиЗначение(Неопределено), ЗначениеИзСтрокиВнутр(ЗначениеПоУмолчанию)));
				НастройкаЗагрузки = Настройки.Область(ТекущаяСтрокаОбласти + "C13").Текст;
				СтруктураУмолчанияРеквизита.Вставить("НастройкаЗагрузки",
					?(ПустаяСтрока(НастройкаЗагрузки), Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ПустаяСсылка(),
						ЗначениеИзСтрокиВнутр(НастройкаЗагрузки)));
				ЭтоДополнительныйРеквизит = ?(ВерсияОбработки>="1.7",
					ЗначениеЗаполнено(Настройки.Область(ТекущаяСтрокаОбласти + "C14").Текст), Ложь);
				ЭтоСведение = ?(ВерсияОбработки>="1.7", ЗначениеЗаполнено(Настройки.Область(ТекущаяСтрокаОбласти + "C16").Текст), Ложь);
				СсылкаРеквизита = ?(ВерсияОбработки>="1.7", Настройки.Область(ТекущаяСтрокаОбласти + "C15").Текст, "");
				СтруктураУмолчанияРеквизита.Вставить("СсылкаРеквизита",?(ПустаяСтрока(СсылкаРеквизита), 
					ОписаниеТипов.ПривестиЗначение(Неопределено), ЗначениеИзСтрокиВнутр(СсылкаРеквизита)));
				СтруктураУмолчанияРеквизита.Вставить("ЭтоДополнительныйРеквизит",ЭтоДополнительныйРеквизит);
				СтруктураУмолчанияРеквизита.Вставить("ЭтоСведение",ЭтоСведение);
				
				Если РежимЗагрузкиРеквизита = "Вычислять" Тогда
					СтруктураУмолчанияРеквизита.Вставить("Выражение",Настройки.Область(ТекущаяСтрокаОбласти + "C8").Текст);
				Иначе
					СтруктураУмолчанияРеквизита.Вставить("ИскатьПо",Настройки.Область(ТекущаяСтрокаОбласти + "C8").Текст);
					
					СвязьПоВладельцу   = Настройки.Область(ТекущаяСтрокаОбласти + "C9").Текст;
					СтруктураУмолчанияРеквизита.Вставить("СвязьПоВладельцу",?(Лев(СвязьПоВладельцу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоВладельцу), СвязьПоВладельцу));
					
					СвязьПоТипу        = Настройки.Область(ТекущаяСтрокаОбласти + "C10").Текст;
					СтруктураУмолчанияРеквизита.Вставить("СвязьПоТипу",?(Лев(СвязьПоТипу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоТипу), СвязьПоТипу));
					
					СтруктураУмолчанияРеквизита.Вставить("ЭлементСвязиПоТипу",ПривестиКЧислу(Настройки.Область(ТекущаяСтрокаОбласти + "C11").Текст));
				КонецЕсли;
				
				СтруктураУмолчанияРеквизита.Вставить("РежимПоиска",?(ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C12").Текст), НСтр("ru = 'По равному значению'"), Настройки.Область(ТекущаяСтрокаОбласти + "C12").Текст));
				СтруктураУмолчаний.Вставить(ИмяРеквизита,СтруктураУмолчанияРеквизита);
				ТекущаяСтрока = ТекущаяСтрока + 1;
				ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
				ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
				
			КонецЦикла;
			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= '%1'"), ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецПопытки;
		
		МетаданныеИсточника = ПолучитьМетаданныеИсточника(СтруктураПараметров);
		Если МетаданныеИсточника = Неопределено И МетаданныеДляЗагрузки = Неопределено Тогда
			Возврат;
		ИначеЕсли МетаданныеИсточника = Неопределено Тогда
			МетаданныеИсточника = МетаданныеДляЗагрузки;
			СтруктураПараметров.ИмяСправочника  = МетаданныеДляЗагрузки.Имя;
			ВосстановленныйРежимЗагрузки = 3;
			СтруктураПараметров.РежимЗагрузки = 3;
		КонецЕсли;
		
		Если Метаданные.Документы.Содержит(МетаданныеИсточника) Тогда
			
			СтруктураПараметров.РежимЗагрузки   = ВосстановленныйРежимЗагрузки;
			СтруктураПараметров.СсылкаИсточника = ВосстановленныйСсылкаИсточника;
			СтруктураПараметров.ТабличнаяЧастьИсточника = ?(ВосстановленныйРежимЗагрузки,МетаданныеОбъекта.Имя,Неопределено);
			
			Если СтруктураПараметров.РежимЗагрузки = 3 Тогда
				СтруктураПараметров.ТЧДокумента = СтруктураПараметров.ТабличнаяЧастьДокументаОбъекта.Выгрузить();
			КонецЕсли;
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеИсточника) Тогда
			
			СтруктураПараметров.РежимЗагрузки   = ВосстановленныйРежимЗагрузки;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ПараметрыДляОбработки);
		Если ПараметрыДляОбработки.ДополнительныеРеквизитыПоТипуНоменклатурыИзНастроек<>Неопределено Тогда
			СтруктураПараметров.ДополнительныеРеквизитыПоТипуНоменклатуры = ПараметрыДляОбработки.ДополнительныеРеквизитыПоТипуНоменклатурыИзНастроек.Скопировать();
		Иначе
			СтруктураПараметров.ДополнительныеРеквизитыПоТипуНоменклатуры.Очистить();
		КонецЕсли;
		
		СтруктураПараметров.ПередЗаписьюОбъекта = Настройки.Область("R" + Формат(ТекущаяСтрока + 2, "ЧГ=") + "C3").Текст;
		СтруктураПараметров.ПриЗаписиОбъекта    = Настройки.Область("R" + Формат(ТекущаяСтрока + 3, "ЧГ=") + "C3").Текст;
		
		Если СтруктураПараметров.РежимЗагрузки Тогда
			СтруктураПараметров.ПослеДобавленияСтроки = Настройки.Область("R" + Формат(ТекущаяСтрока + 4, "ЧГ=") + "C3").Текст;
		КонецЕсли;
		
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
	КонецЕсли;
	
	Оформление = Неопределено;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(СтруктураПараметров);
	СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Очистить();
	
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.РежимЗагрузки = 0 Тогда
		
		ЗаполнитьНастройкиКолонокСправочника(СтруктураПараметров);
		
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 1 ИЛИ СтруктураПараметров.РежимЗагрузки = 3 Тогда
		
		Если НЕ СтруктураПараметров.ИмяВидаРегистра = "" Тогда
			ЗаполнитьНастройкиКолонокРегистраСведений(СтруктураПараметров);
		ИначеЕсли НЕ СтруктураПараметров.ИмяСправочника = "" Тогда
			ЗаполнитьНастройкиКолонокСправочника(СтруктураПараметров);
		Иначе
			ЗаполнитьНастройкиКолонокТабличнойЧасти(СтруктураПараметров);
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 2 Тогда
		ЗаполнитьНастройкиКолонокРегистраСведений(СтруктураПараметров);
	КонецЕсли;
	
	Если НЕ СтруктураУмолчаний = Неопределено Тогда
		
		НомерКолонкиОформления = 0;
		Для Каждого КлючИЗначение Из СтруктураУмолчаний Цикл
			Колонка = КлючИЗначение.Значение;
			
			ЗагружаемыйРеквизит = Неопределено;
			ОтборСтрок = Новый Структура("ИмяРеквизита",Колонка.ИмяРеквизита);
			СтрокиТаблицы = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(ОтборСтрок);
			Если СтрокиТаблицы.Количество() > 0 Тогда
				ЗагружаемыйРеквизит = СтрокиТаблицы[0];
			КонецЕсли;
			
			Если НЕ ЗагружаемыйРеквизит = Неопределено Тогда
				Индекс = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Индекс(ЗагружаемыйРеквизит);
				Если Индекс >= НомерКолонкиОформления Тогда
					ЗаполнитьЗначенияСвойств(ЗагружаемыйРеквизит, Колонка);
					
					СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Сдвинуть(Индекс, НомерКолонкиОформления - Индекс);
					НомерКолонкиОформления = НомерКолонкиОформления + 1;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		НомерКолонки = 1;
		Для Каждого ЗагружаемыйРеквизит Из СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов Цикл
			
			ЗагружаемыйРеквизит.Пометка      = Истина;
			ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
			НомерКолонки = НомерКолонки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНастройкиКолонок()

// Функция выполняет загрузку данных из табличного документа в справочник или табличную часть документа.
//
// Параметры:
//  ТабличныйДокумент		 - ТабличныйДокумент	 - ТабличныйДокумент, у которого необходимо сформировать шапку.
//  СтруктураПараметров		 - Структура			 - Параметры загрузки.
//  ВернутьЗагруженнуюСсылку - Булево				 - Если Истина - возвращает ссылку на загруженные данные.
//
// Возвращаемое значение:
//  Булево	- Истина, если загрузка прошла без ошибок, Ложь - иначе.
//
Функция ЗагрузитьДанные(ТабличныйДокумент,СтруктураПараметров, ВернутьЗагруженнуюСсылку = Ложь) Экспорт
	
	Перем ЗадаватьВопросы; //переменная функции
	
	ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок;
	КЭШЗначений = Новый ТаблицаЗначений;
	КЭШЗначений.Колонки.Добавить("ТипРеквизита");
	КЭШЗначений.Колонки.Добавить("ИскатьПо");
	КЭШЗначений.Колонки.Добавить("Представление");
	КЭШЗначений.Колонки.Добавить("Ссылка");
	КЭШЗначений.Колонки.Добавить("ЗначениеРеквизита");
	КЭШЗначений.Колонки.Добавить("СписокСлов");
	СтруктураПараметров.Вставить("КЭШЗначений", КЭШЗначений);
	Если СтруктураПараметров.ТЧДокумента <> Неопределено Тогда
		СтруктураПараметров.ТЧДокумента.Очистить();
	КонецЕсли;
	
	// если передали этот параметр Истина- эти данные уже есть в структуре
	Если Не ВернутьЗагруженнуюСсылку Тогда
		СтруктураИнициализации = Инициализация();
		Для Каждого ЭлементСтруктуры Из СтруктураИнициализации Цикл
			СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураПараметров.ДопПараметры=Неопределено Тогда
		СтруктураПараметров.ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ДопПараметры.Свойство("ЗадаватьВопросы",ЗадаватьВопросы) Тогда
		ЗадаватьВопросы = Истина;
	КонецЕсли;

	ЗаписыватьОбъект = Истина;
	
	СформироватьСтруктуруКолонок(СтруктураПараметров);
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(СтруктураПараметров);
	
	Если СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("Пометка",Истина)).Количество() = 0 Тогда
		СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'Не отмечен ни один загружаемый реквизит.'") + Символы.ПС;
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - СтруктураПараметров.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	Если КоличествоЭлементов <= 0 Тогда
		СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'Нет данных для загрузки'") + Символы.ПС;
		Возврат Ложь;
	КонецЕсли;
	
	МаксимальныНомерКолонки = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов[0].НомерКолонки; // Строки должны быть (см. проверку пометки)
	Для сч=1 По (СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Количество()-1) Цикл
		Строка = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов[сч];
		Если Строка.Пометка И МаксимальныНомерКолонки < Строка.НомерКолонки Тогда
			МаксимальныНомерКолонки = Строка.НомерКолонки;
		КонецЕсли;	
	КонецЦикла;
	
	Если МаксимальныНомерКолонки > ТабличныйДокумент.ШиринаТаблицы Тогда
		// Свойство ШиринаТаблицы не доступно на запись, выполняем фиктивное обращение к ячейке.
		ТабличныйДокумент.Область("R1C"+Формат(МаксимальныНомерКолонки,"ЧН=0; ЧГ=0")).Текст = "";
	КонецЕсли;	
	
	Если СтруктураПараметров.РежимЗагрузки = 0 ИЛИ (СтруктураПараметров.РежимЗагрузки = 3 И НЕ ПустаяСтрока(СтруктураПараметров.ИмяСправочника)) Тогда
		Источник = СтруктураПараметров.СсылкаИсточника;
		ТекстВопросаИсточника = " " + НСтр("ru = 'элементов в справочник:'") + " """ + МетаданныеИсточника.Представление() + """";
		
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 1 Тогда
		
		Если СтруктураПараметров.СсылкаИсточника.Пустая() Тогда
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru= 'Не выбрана ссылка'"));
			Возврат Ложь;
		КонецЕсли;
		 
		ОбъектИсточника = СтруктураПараметров.СсылкаИсточника.ПолучитьОбъект();
		Источник = ОбъектИсточника[СтруктураПараметров.ТабличнаяЧастьИсточника];
		ТекстВопросаИсточника = " " + НСтр("ru = 'строк в табличную часть:'") + " """ + МетаданныеИсточника.Представление() + """";
		
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 2 Тогда
		
		ТекстВопросаИсточника = " " + НСтр("ru = 'записей в регистр сведений:'") + " """ + МетаданныеИсточника.Представление() + """";
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 3 Тогда
		
		ТекстВопросаИсточника = " " + НСтр("ru = 'строк в табличную часть:'") + " """ + МетаданныеИсточника.Представление() + """";
		
	КонецЕсли;
		
	Запрос = Неопределено;
	Если СтруктураПараметров.РежимЗагрузки = 0 
		ИЛИ (СтруктураПараметров.РежимЗагрузки = 3 
		И НЕ ПустаяСтрока(СтруктураПараметров.ИмяСправочника)) Тогда
		
		СтрокиПоиска = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("ПолеПоиска,Пометка",Истина,Истина));
		Если НЕ СтрокиПоиска.Количество() = 0 Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|Справочник.Ссылка КАК Ссылка
			|ИЗ Справочник."+МетаданныеИсточника.Имя+" КАК Справочник
			|Где";
			
			ЕстьХотьОдноУсловиеТочногоПоиска = Ложь;
			Для Каждого СтрокаПоиска Из СтрокиПоиска Цикл
				Если СтрокаПоиска.РежимПоиска = НСтр("ru = 'По равному значению'") ИЛИ СтрокаПоиска.РежимПоиска = "" Тогда
					ЕстьХотьОдноУсловиеТочногоПоиска = Истина;
					ТекстЗапроса = ТекстЗапроса +"
					|Справочник."+СтрокаПоиска.ИмяРеквизита+" = &" + СтрокаПоиска.ИмяРеквизита + "
					|И";
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса) - ?(ЕстьХотьОдноУсловиеТочногоПоиска,2, 3));
			Запрос = Новый Запрос (ТекстЗапроса);
		КонецЕсли;
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 1 Тогда
		
		Источник.Очистить();
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 2 Тогда
		
		ИзмеренияРегистра = Новый Структура;
		Для каждого Колонка Из СтруктураПараметров.Колонки Цикл
			Если Колонка.Значение.МожетБытьПолемПоиска Тогда
				ИзмеренияРегистра.Вставить(Колонка.Ключ,Колонка.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'Выполняется загрузка'")+ ТекстВопросаИсточника  + Символы.ПС;
	СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + "Всего:" + " " + КоличествоЭлементов  + Символы.ПС;
	
	Загружено = 0;
	НомерТекущейСтроки = 0;
	Для К = СтруктураПараметров.ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		ТекстыЯчеек = Неопределено;
		Отказ = Ложь;
		ТекущаяСтрока = КонтрольЗаполненияСтроки(ТабличныйДокумент, К, СтруктураПараметров, ТекстыЯчеек);
		Если СтруктураПараметров.РежимЗагрузки = 0 ИЛИ (СтруктураПараметров.РежимЗагрузки = 3 И НЕ ПустаяСтрока(СтруктураПараметров.ИмяСправочника)) Тогда
			
			Объект = Неопределено;
			Если НЕ Запрос = Неопределено Тогда
				СтрокаОшибок = "";
				Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
					
					ЗначениеРеквизита = Неопределено;
					
					ТекущаяСтрока.Свойство(СтрокаПоиска.ИмяРеквизита,ЗначениеРеквизита);
					Если ПустаяСтрока(ЗначениеРеквизита) Тогда
						СтрокаОшибок = ?(ПустаяСтрока(СтрокаОшибок),"",СтрокаОшибок + ", ") + СтрокаПоиска.ПредставлениеРеквизита;
					Иначе
						Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита,ТекущаяСтрока[СтрокаПоиска.ИмяРеквизита]);
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ПустаяСтрока(СтрокаОшибок) Тогда
					СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + "Строка " + НомерТекущейСтроки 
						+ " " + НСтр("ru = 'не может быть записана.Не указано значение ключевых реквизитов:'") + " "  + Символы.ПС;
					Продолжить;
				КонецЕсли;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Объект = Выборка.Ссылка.ПолучитьОбъект();
				КонецЕсли;
				
			КонецЕсли;
			
			ОбъектНайден = НЕ Объект = Неопределено;
			Если НЕ ОбъектНайден Тогда
				Если СтруктураПараметров.НеСоздаватьНовыхЭлементов Тогда
					Продолжить;
				Иначе
					ОбъектЯвляетсяГруппой = Ложь;
					Для Каждого КлючИЗначение Из ТекущаяСтрока Цикл
						Если КлючИЗначение.Ключ = "ЭтоГруппа" И КлючИЗначение.Значение Тогда
							ОбъектЯвляетсяГруппой = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если ОбъектЯвляетсяГруппой Тогда
						Объект = Справочники[МетаданныеИсточника.Имя].СоздатьГруппу();
					Иначе
						Объект = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтруктураПараметров.НеОбновлятьСуществующиеЭлементы Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.РежимЗагрузки = 1 Тогда
			Объект = Источник.Добавить();
			ОбъектНайден = Ложь;
		ИначеЕсли СтруктураПараметров.РежимЗагрузки = 2 Тогда
			Объект = РегистрыСведений[МетаданныеИсточника.Имя].СоздатьМенеджерЗаписи();
			Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
				
				Если ИзмеренияРегистра.Свойство(КлючИЗначение.Ключ) Тогда
					Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ СтруктураПараметров.ЗамещатьСуществующиеЗаписи Тогда
				Объект.Прочитать();
				ОбъектНайден = Объект.Выбран();
			Иначе
				ОбъектНайден = Ложь;
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.РежимЗагрузки = 3 Тогда
			Объект = СтруктураПараметров.ТЧДокумента.Добавить();
			ОбъектНайден = Ложь;
		КонецЕсли;
		
		СтруктураПараметров.ВладелецСерии = Неопределено;
				
		Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
			
			Если НЕ ОбъектНайден ИЛИ КлючИЗначение.Ключ = "ДополнительныеРеквизитыИСведенияДляЗагрузки" ИЛИ СтруктураПараметров.Колонки[КлючИЗначение.Ключ].Пометка  Тогда
				Попытка
					Если (СтруктураПараметров.РежимЗагрузки = 3) ИЛИ (ПроверитьЧтоЭтоДокумент(СтруктураПараметров.СсылкаИсточника) И (СтруктураПараметров.РежимЗагрузки = 1)) Тогда
						Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда 
							Если КлючИЗначение.Ключ<>"ЭтоГруппа" Тогда
								Если КлючИЗначение.Ключ = "ДополнительныеРеквизитыИСведенияДляЗагрузки" Тогда
									Если ЕстьРеквизит(Объект, "ДополнительныеСвойства") Тогда
										Объект.ДополнительныеСвойства.Вставить("ДополнительныеРеквизитыИСведенияДляЗагрузки", КлючИЗначение.Значение);
									КонецЕсли;
								Иначе
									Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
								КонецЕсли;
							КонецЕсли;
							Если ЕстьРеквизит(Объект, "Номенклатура") И ЕстьРеквизит(Объект, "СтавкаНДС") Тогда
								Если КлючИЗначение.Ключ = "СтавкаНДС" Тогда
									Если ЗначениеЗаполнено(Объект.Номенклатура) И Объект.Номенклатура.СтавкаНДС <> Объект.СтавкаНДС Тогда
										ТекстСообщения = НСтр("ru = 'Для номенклатуры %1 ставка НДС в карточке (%2) отличается от ставки НДС в накладной (%3).'");
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Объект.Номенклатура), Объект.Номенклатура.СтавкаНДС, Объект.СтавкаНДС);
										ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если КлючИЗначение.Ключ <> "ЭтоГруппа" Тогда
							Если КлючИЗначение.Ключ = "ДополнительныеРеквизитыИСведенияДляЗагрузки" Тогда
								Если СтруктураПараметров.РежимЗагрузки <> 2
									И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДополнительныеСвойства") Тогда
										Объект.ДополнительныеСвойства.Вставить("ДополнительныеРеквизитыИСведенияДляЗагрузки", КлючИЗначение.Значение);
								КонецЕсли;
							ИначеЕсли НЕ Метаданные.Справочники.Содержит(МетаданныеИсточника) И НЕ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеИсточника) Тогда   
								Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
							ИначеЕсли (КлючИЗначение.Ключ = "Наименование" ИЛИ КлючИЗначение.Ключ = "Код" ИЛИ КлючИЗначение.Ключ = "Родитель"
								ИЛИ КлючИЗначение.Ключ = "Владелец" ИЛИ КлючИЗначение.Ключ = "ПометкаУдаления" ИЛИ ЕстьРеквизит(Объект, КлючИЗначение.Ключ))
								И (Метаданные.Справочники.Содержит(МетаданныеИсточника) ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеИсточника)) Тогда
								Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Исключение
					СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок 
						+ НСтр("ru = 'Ошибка при установке значения реквизита'") + " """ + КлючИЗначение.Ключ + "" + ОписаниеОшибки() 
						+ Символы.ПС;
					Отказ = Истина;
					Прервать;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураПараметров.РежимЗагрузки = 0 
			ИЛИ (СтруктураПараметров.РежимЗагрузки = 3 
			И НЕ ПустаяСтрока(СтруктураПараметров.ИмяСправочника)) Тогда
			
			Если НЕ Отказ И ЗаписатьОбъект(Объект, СтруктураПараметров, ТекстыЯчеек) Тогда
				СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + ?(ОбъектНайден,"Изменен","Загружен") 
					+ " " + НСтр("ru = 'элемент справочника:'")  + " " + Объект.ссылка + Символы.ПС;
				Загружено = Загружено + 1;
			Иначе
				СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'Объект не'") + " " 
					+ ?(ОбъектНайден,"изменен","загружен") + ". " + НСтр("ru = 'Элемент справочника:'") + " " + Объект + "." 
					+ Символы.ПС;
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.РежимЗагрузки = 1 Тогда
			
		Если НЕ ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, Объект, ТекстыЯчеек, СтруктураПараметров) Тогда
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок +НСтр("ru = 'Обработана строка:'") + " " 
					+ (Загружено + 1) + Символы.ПС;
			Иначе
				СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок +НСтр("ru = 'При добавлении строки'") + " " 
					+ (Загружено + 1) + " " + НСтр("ru = 'возникли ошибки.'") + " " + Символы.ПС;
				ЗаписыватьОбъект = Ложь;
			КонецЕсли;
			
			Загружено = Загружено + 1;
			
		ИначеЕсли СтруктураПараметров.РежимЗагрузки = 2 Тогда
			Если НЕ Отказ И ЗаписатьВРегистр(Объект) Тогда
				СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + ?(ОбъектНайден,"Изменена","Добавлена") 
					+ " " + НСтр("ru = 'запись'") +" № " + НомерТекущейСтроки + "." + Символы.ПС;
				Загружено = Загружено + 1;
			Иначе
				СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'Запись не'") + " " 
					+ ?(ОбъектНайден,"изменена","загружена") + ". № " + НСтр("ru = 'записи:'") + " " + НомерТекущейСтроки + "." 
					+ Символы.ПС;
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.РежимЗагрузки = 3 Тогда
			
			Если НЕ ОбработатьСобытиеПослеДобавленияСтроки(СтруктураПараметров.СсылкаИсточника, Объект, ТекстыЯчеек,
						СтруктураПараметров) Тогда
						
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'Обработана строка:'") + " " 
					+ (Загружено + 1) + Символы.ПС;
			Иначе
				СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'При добавлении строки'") + " " 
					+ (Загружено + 1) + " " + НСтр("ru = 'возникли ошибки.'") + " " + Символы.ПС;
				ЗаписыватьОбъект = Ложь;
			КонецЕсли;
			
			Загружено = Загружено + 1;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если СтруктураПараметров.РежимЗагрузки = 1 Тогда
		Если ЗаписыватьОбъект И ЗаписатьОбъект(ОбъектИсточника, СтруктураПараметров) Тогда
			
			ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДобавитьВОписаниеОшибокСтрокуОЗагрузкеСправочника(СтруктураПараметров, 
				ТекстВопросаИсточника, Загружено, КоличествоЭлементов);
			
			Возврат Истина;
		Иначе
			СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'Объект не записан:'") + " " 
				+ Объект + "." + Символы.ПС;
			ОбщегоНазначения.СообщитьПользователю (СтруктураПараметров.ОписаниеОшибок);
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 0 Тогда
		СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'Выполнена обработка'")
			+ 	ТекстВопросаИсточника + Символы.ПС;
		СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + "" +Загружено +" " + "из" + " "
			+ КоличествоЭлементов + " " + НСтр("ru = 'элементов.'") + Символы.ПС;
		ОбщегоНазначения.СообщитьПользователю (СтруктураПараметров.ОписаниеОшибок);
		Возврат Истина;
		
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 2 Тогда
		СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'Выполнена обработка'")
			+ 	ТекстВопросаИсточника + Символы.ПС;
		СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + "" +Загружено +" " + "из" + " "
			+ КоличествоЭлементов + " " + "записей." + Символы.ПС;
		ОбщегоНазначения.СообщитьПользователю (СтруктураПараметров.ОписаниеОшибок);
		
		Возврат Истина;
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 3 Тогда
		
		Если ВернутьЗагруженнуюСсылку Тогда
			Попытка
				ВозвращаемоеЗначениеТекущее = Объект.Ссылка;
			Исключение
				ВозвращаемоеЗначениеТекущее = Неопределено;
			КонецПопытки;
			Возврат ВозвращаемоеЗначениеТекущее;
		КонецЕсли;
		
		ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДобавитьВОписаниеОшибокСтрокуОЗагрузкеСправочника(СтруктураПараметров,
			ТекстВопросаИсточника, Загружено, КоличествоЭлементов,Ложь);
		
		СтруктураРезультата = Новый Структура("ОписаниеОшибок,ТЧДокумента");
		СтруктураРезультата.ТЧДокумента = СтруктураПараметров.ТЧДокумента;
		СтруктураРезультата.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок;
		
		Возврат СтруктураРезультата;
		
	КонецЕсли;
	
КонецФункции // ЗагрузитьДанные()

// Процедура выполняет контроль заполнения данных табличного документа
// сообщает об ошибках и устанавливает комментарии к ошибочным ячейкам.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент	 - ТабличныйДокумент, у которого необходимо сформировать шапку.
//  СтруктураПараметров	 - Структура			 - Параметры загрузки.
//
Процедура КонтрольЗаполнения(ТабличныйДокумент, СтруктураПараметров) Экспорт
	
	СтруктураИнициализации = Инициализация();
	Для Каждого ЭлементСтруктуры Из СтруктураИнициализации Цикл
		СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	КЭШЗначений = Новый ТаблицаЗначений;
	КЭШЗначений.Колонки.Добавить("ТипРеквизита");
	КЭШЗначений.Колонки.Добавить("ИскатьПо");
	КЭШЗначений.Колонки.Добавить("Представление");
	КЭШЗначений.Колонки.Добавить("Ссылка");
	КЭШЗначений.Колонки.Добавить("ЗначениеРеквизита");
	КЭШЗначений.Колонки.Добавить("СписокСлов");
	СтруктураПараметров.Вставить("КЭШЗначений", КЭШЗначений);
	
	СформироватьСтруктуруКолонок(СтруктураПараметров);
	
	КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - СтруктураПараметров.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	КоличествоОшибок = 0;
	Для К = 0  По КоличествоЭлементов - 1 Цикл
		КонтрольЗаполненияСтроки(ТабличныйДокумент, К + СтруктураПараметров.ПерваяСтрокаДанныхТабличногоДокумента,СтруктураПараметров, ,КоличествоОшибок);
	КонецЦикла;
	
	Если КоличествоОшибок Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Выявлены ячейки, содержащие ошибки/неоднозначное представление'"));
	Иначе
		ОбщегоНазначения.СообщитьПользователю (НСтр("ru= 'Ячеек, содержащих ошибки, не выявлено'"));
	КонецЕсли;
	
КонецПроцедуры // КонтрольЗаполнения()

// Функция выполняет контроль заполнения строки данных табличного документа
// сообщает об ошибках и устанавливает комментарии к ошибочным ячейкам.
//
// Параметры:
//  ТабличныйДокумент		 - ТабличныйДокумент	- ТабличныйДокумент, у которого необходимо сформировать шапку
//  НомерСтроки				 - Число				- Число, номер строки табличного документа
//  СтруктураПараметров		 - Структура			 - Параметры загрузки.
//  ТекстыЯчеек				 - Массив				 - Возвращает массив текстов ячеек строки.
//  КоличествоОшибок		 - Число				 - количество ошибок, которые возникли при выполнении
//
// Возвращаемое значение:
//  Структура	- Структура, ключ - Имя загружаемого реквизита, Значение - Значение загружаемого реквизита.
//
Функция КонтрольЗаполненияСтроки(ТабличныйДокумент, НомерСтроки, СтруктураПараметров, ТекстыЯчеек = Неопределено, КоличествоОшибок = 0) Экспорт
	
	ТекстыЯчеек = Новый Массив;
	ТекстыЯчеек.Добавить(Неопределено);
	Для к = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		ТекстыЯчеек.Добавить(СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(К,"ЧГ=")).Текст));
	КонецЦикла;
	
	ТекущаяСтрока     = Новый Структура;
	ДополнительныеРеквизитыИСведения = Новый ТаблицаЗначений;
	ДополнительныеРеквизитыИСведения.Колонки.Добавить("СсылкаРеквизита");
	ДополнительныеРеквизитыИСведения.Колонки.Добавить("Результат");
	ДополнительныеРеквизитыИСведения.Колонки.Добавить("ЭтоСведение");
	Колонки = СтруктураПараметров.Колонки;
	Для каждого КлючИЗначение Из Колонки Цикл
		
		Колонка = КлючИЗначение.Значение;
		
		Если Колонка.Пометка Тогда
			
			Если Колонка.РежимЗагрузки = "Устанавливать" Тогда
				
				Результат = Колонка.ЗначениеПоУмолчанию;
				
				Если Колонка.ЭтоДополнительныйРеквизит Тогда
					НовСтр 					= ДополнительныеРеквизитыИСведения.Добавить();
					НовСтр.СсылкаРеквизита 	= Колонка.СсылкаРеквизита;
					НовСтр.Результат 		= Результат;
					НовСтр.ЭтоСведение 		= Колонка.ЭтоСведение;
				Иначе
					ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита,Результат);
				КонецЕсли;
				
			ИначеЕсли Колонка.РежимЗагрузки = "Искать" И НЕ Колонка.НомерКолонки = 0 Тогда
				
				Если НЕ ОбработатьОбласть(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(Колонка.НомерКолонки,"ЧГ=")), Колонка, ТекущаяСтрока, ТекстыЯчеек, СтруктураПараметров, ДополнительныеРеквизитыИСведения) Тогда
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецЕсли;
				Если КлючИЗначение.Ключ = "Номенклатура" И Не Колонка.ЭтоДополнительныйРеквизит Тогда
					СтруктураПараметров.ВладелецСерии = ТекущаяСтрока.Номенклатура;
				КонецЕсли;	
				
			ИначеЕсли Колонка.РежимЗагрузки = "Вычислять" Тогда
				
				Если ТекстыЯчеек.ВГраница() < Колонка.НомерКолонки Тогда
					ТекстЯчейки = "";
				Иначе
					ТекстЯчейки = ТекстыЯчеек[Колонка.НомерКолонки];	
				КонецЕсли;	
				
				Вычисление  = ВычислитьЗначениеЯчейки(Колонка.Выражение,ТекущаяСтрока,?(Колонка.НомерКолонки = 0, "", ТекстЯчейки),ТекстыЯчеек,Колонка.ЗначениеПоУмолчанию, СтруктураПараметров.флКонтрольЗаполнения, СтруктураПараметров.СсылкаИсточника);
				Результат   = Вычисление.Результат;
				Примечание  = Вычисление.ОписаниеОшибки;
				
				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Результат = Колонка.ЗначениеПоУмолчанию;
				КонецЕсли;
	
				Если Колонка.ЭтоДополнительныйРеквизит Тогда
					НовСтр 					= ДополнительныеРеквизитыИСведения.Добавить();
					НовСтр.СсылкаРеквизита 	= Колонка.СсылкаРеквизита;
					НовСтр.Результат 		= Результат;
					НовСтр.ЭтоСведение 		= Колонка.ЭтоСведение;
				Иначе
                	ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита,Результат);
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(Примечание) Тогда
					ТекстСообщения = НСтр("ru = 'Строка %1 (%2): %3'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерСтроки, Колонка.ПредставлениеРеквизита, Примечание);
					ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецЕсли;
				
			ИначеЕсли Колонка.РежимЗагрузки = "Загружать" И ЗначениеЗаполнено(Колонка.НастройкаЗагрузки) Тогда
				
				ТаблицаЗагружаемыхРеквизитов    = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.СкопироватьКолонки();
				Если СтруктураПараметров.ТаблицаДополнительныхПараметров <> Неопределено Тогда
					ТаблицаДополнительныхПараметров = СтруктураПараметров.ТаблицаДополнительныхПараметров.СкопироватьКолонки();
				Иначе
					ТаблицаДополнительныхПараметров = Неопределено;
				КонецЕсли;
				Попытка
					МетаданныеДляЗагрузки = Колонка.ЗначениеПоУмолчанию.Метаданные();
					Если НЕ Метаданные.Справочники.Содержит(МетаданныеДляЗагрузки) Тогда
						МетаданныеДляЗагрузки = Неопределено;
					КонецЕсли;
				Исключение
					МетаданныеДляЗагрузки = Неопределено;
				КонецПопытки;
				Результат = ЗагрузитьРеквизитПоНастройке(ТабличныйДокумент, 
														НомерСтроки, 
														Колонка.НастройкаЗагрузки, 
														ТаблицаЗагружаемыхРеквизитов,
														ТаблицаДополнительныхПараметров,
														СтруктураПараметров.СоответствиеНоменклатуры.СкопироватьКолонки(), 
														МетаданныеДляЗагрузки);
				Если Колонка.ЭтоДополнительныйРеквизит Тогда
					НовСтр 					= ДополнительныеРеквизитыИСведения.Добавить();
					НовСтр.СсылкаРеквизита 	= Колонка.СсылкаРеквизита;
					НовСтр.Результат 		= Результат;
					НовСтр.ЭтоСведение 		= Колонка.ЭтоСведение;
				Иначе
					ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита,Результат);
				КонецЕсли;
				
				Если КлючИЗначение.Ключ = "Номенклатура"  И Не Колонка.ЭтоДополнительныйРеквизит Тогда
					СтруктураПараметров.ВладелецСерии = ТекущаяСтрока.Номенклатура;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущаяСтрока.Вставить("ДополнительныеРеквизитыИСведенияДляЗагрузки", ДополнительныеРеквизитыИСведения);
	
	Возврат ТекущаяСтрока;
	
КонецФункции // КонтрольЗаполненияСтроки()

// Функция возвращает массив возможных значений для текущей колонки по представлению.
//
// Параметры:
//  Колонка 		- Структура	- Структура, свойства, в соответствии с которыми необходимо получить возможные значения
//  Представление 	- Строка	- Строка, по которой необходимо вернуть массив значений
//  Примечание    	- Массив	- Массив текстов ячеек строки
//  ТекущиеДанные  	- Структура	- Структура загруженных значений.
//  ТекстыЯчеек				 - Массив				 - Возвращает массив текстов ячеек строки.
//  СтруктураПараметров		 - Структура			 - Параметры загрузки.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров (необязательный),
//     * НеИспользоватьТаблицуСоответствий - Число - признак использования таблицы соответствий (по умолчанию 0),
//     * Дополнительно - Структура - дополнительные параметры поиска (необязательный).
//
// Возвращаемое значение:
//  Массив			- Массив возможных значений.
//
Функция ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные, ТекстыЯчеек, 
											СтруктураПараметров, ДополнительныеПараметры = Неопределено)  Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("НеИспользоватьТаблицуСоответствий") Тогда
		ДополнительныеПараметры.Вставить("НеИспользоватьТаблицуСоответствий", 0);
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("Дополнительно") Тогда
		ДополнительныеПараметры.Вставить("Дополнительно", Неопределено);
	КонецЕсли;
	
	Примечание = "";
	Представление = СокрЛП(Представление);
	НормаЗначений = 50;
	НайденныеЗначения = Новый Массив;
	ТаблицаСлов = Новый ТаблицаЗначений;
	ТаблицаСлов.Колонки.Добавить("Ссылка");
	ТаблицаСлов.Колонки.Добавить("ЗначениеРеквизита");
	ТаблицаСлов.Колонки.Добавить("СписокСлов");
	
	ПримитивныеТипы = СтруктураПараметров.ПримитивныеТипы;
	ТаблицаЗагружаемыхРеквизитов = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов;
	РежимЗагрузки = СтруктураПараметров.РежимЗагрузки;
	СсылкаИсточника = СтруктураПараметров.СсылкаИсточника;
	флПоискПоПрайсуПоставщика = СтруктураПараметров.флПоискПоПрайсуПоставщика;
	ТЧДокумента = СтруктураПараметров.ТЧДокумента;
	флКонтрольЗаполнения = СтруктураПараметров.флКонтрольЗаполнения;
	КЭШЗначений = СтруктураПараметров.КЭШЗначений;
	ТаблицаДополнительныхПараметров = СтруктураПараметров.ТаблицаДополнительныхПараметров;
	Если СтруктураПараметров.Свойство("Поставщик") Тогда
		Поставщик = СтруктураПараметров.Поставщик;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ВсегдаФормироватьНовыеСерии") Тогда
		ВсегдаФормироватьНовыеСерии = СтруктураПараметров.ВсегдаФормироватьНовыеСерии;
	Иначе
		ВсегдаФормироватьНовыеСерии = Ложь;
	КонецЕсли;
		
	Если ПустаяСтрока(Представление) Тогда
		
		Возврат НайденныеЗначения;
		
	Иначе
		СвязьПоТипу = Неопределено;
		Если НЕ ПустаяСтрока(Колонка.СвязьПоТипу)  Тогда
			
			Если ТипЗНЧ(Колонка.СвязьПоТипу) = Тип("Строка") Тогда
				ТекущиеДанные.Свойство(Колонка.СвязьПоТипу,СвязьПоТипу);
			Иначе
				СвязьПоТипу = Колонка.СвязьПоТипу;
			КонецЕсли;
			Если НЕ СвязьПоТипу = Неопределено Тогда
				
				ЭлементСвязиПоТипу = Колонка.ЭлементСвязиПоТипу;
				Если ЭлементСвязиПоТипу = 0 Тогда
					ЭлементСвязиПоТипу = 1;
				КонецЕсли;
				ВидыСубконто = СвязьПоТипу.ВидыСубконто;
				Если ЭлементСвязиПоТипу > ВидыСубконто.Количество() Тогда
					Возврат НайденныеЗначения;
				КонецЕсли;
				Тип = СвязьПоТипу.ВидыСубконто[ЭлементСвязиПоТипу - 1].ВидСубконто.ТипЗначения;
			Иначе
				Тип = Колонка.ОписаниеТипов;
			КонецЕсли;
			
		Иначе
			
			// Для регистра "Автомобили" ограничем набор выбора типа Значения
			Если ПолучитьЗначениеПараметраСтруктуры(СтруктураПараметров, "ИмяВидаРегистра", "") = "Автомобили"
				И Колонка.ИмяРеквизита = "Значение"
				И ЗначениеЗаполнено(ТекущиеДанные.ВидЗначения) Тогда
				Тип = АвтомобилиСервер.ОписаниеТипаПринимаемогоЗначения(ТекущиеДанные.ВидЗначения);
			Иначе
				Тип = Колонка.ОписаниеТипов;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТипРеквизита Из Тип.Типы() Цикл
		
		Если ТипРеквизита = ПримитивныеТипы.Число Или ТипРеквизита = ПримитивныеТипы.Булево Тогда
			НайденныеЗначения.Добавить(ПривестиКЧислу(Представление, Колонка.ОписаниеТипов, Примечание));
		ИначеЕсли ТипРеквизита = ПримитивныеТипы.Строка ИЛИ ТипРеквизита = ПримитивныеТипы.Дата Тогда
			НайденныеЗначения.Добавить(ПривестиКДате(Представление, Колонка.ОписаниеТипов, Примечание));
			
		Иначе
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
			
			Если Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
				
				// Это Перечисление
				Для каждого Перечисление Из ПолучитьМенеджераПоТипу(ТипРеквизита, СтруктураПараметров) Цикл
					Если Строка(Перечисление) = Представление Тогда
						НайденныеЗначения.Добавить(Перечисление);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
				
				// Это документ
				
				Менеджер = ПолучитьМенеджераПоТипу(ТипРеквизита, СтруктураПараметров);
				
				ДлинаСинонима = СтрДлина("" + МетаданныеТипа);
				
				Если Лев(Представление, ДлинаСинонима) = "" + МетаданныеТипа Тогда
					НомерИДата = СокрЛП(Сред(Представление, ДлинаСинонима+1));
					ПозицияОт = СтрНайти(НомерИДата, " от ");
					Если НЕ ПозицияОт = 0 Тогда
						НомерДок = Лев(НомерИДата, ПозицияОт - 1);
						Попытка
							ДатаДок = Дата(Сред(НомерИДата, ПозицияОт + 4));
						Исключение
							ДатаДок = Неопределено;
						КонецПопытки;
						Если НЕ ДатаДок = Неопределено Тогда
							НайденноеЗначение = Менеджер.НайтиПоНомеру(НомерДок, ДатаДок);
							Если НЕ НайденноеЗначение.Пустая() Тогда
								НайденныеЗначения.Добавить(НайденноеЗначение);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НЕ МетаданныеТипа = Неопределено Тогда
				
				ИскатьПо = Колонка.ИскатьПо;
				ИскатьПоСерииИСрокуГодности = Ложь;
				Если ИскатьПо = "СерияПроизводителяИСрокГодности" Тогда
					 ИскатьПо = "ор_СерияПроизводителя";
					 ИскатьПоСерииИСрокуГодности = Истина;
				КонецЕсли;
				ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита);
				СтрокаНастройки = ТаблицаЗагружаемыхРеквизитов.Найти(Колонка.ИмяРеквизита, "ИмяРеквизита");
				ПоискПоСхожести = Ложь;
				Если СтрокаНастройки<>Неопределено И СтрокаНастройки.РежимПоиска = НСтр("ru = 'По похожим словам'") Тогда
					// Ищем по схожести значений.
					ПоискПоСхожести = Истина;
				КонецЕсли;
				Если ПустаяСтрока(ИскатьПо) Тогда
					СтрокаОсновногоПредставления = Строка(МетаданныеТипа.ОсновноеПредставление);
					
					Если СтрокаОсновногоПредставления = "ВВидеКода" Тогда
						ИскатьПо = "Код";
					ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНаименования" Тогда
						ИскатьПо = "Наименование";
					ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНомера" Тогда
						ИскатьПо = "Номер";
					КонецЕсли;
				КонецЕсли;
				
				// Обрежем наименование до максимально допустимого.
				Если ЭтоСправочник И (ТипРеквизита = Тип("СправочникСсылка.Номенклатура")) Тогда
					Представление = Лев(Представление, 150);
				КонецЕсли;
				
				// Попробуем найти номенклатуру по таблице соответствия.
				Если СтруктураПараметров.Свойство("СоответствиеНоменклатуры") Тогда
					ТаблицаСоответствияНоменклатуры = СтруктураПараметров.СоответствиеНоменклатуры;
				Иначе
					ТаблицаСоответствияНоменклатуры = Неопределено;
				КонецЕсли;
					
				Если (ТаблицаСоответствияНоменклатуры <> Неопределено) 	
						И (ДополнительныеПараметры.НеИспользоватьТаблицуСоответствий = 0) И ЭтоСправочник
					 И (ТипРеквизита = Тип("СправочникСсылка.Номенклатура")) И ((РежимЗагрузки = 3) 
					 ИЛИ (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаИсточника)) И (РежимЗагрузки = 1))) Тогда
					 
					НайденнаяСтрока = ТаблицаСоответствияНоменклатуры.Найти(Представление,"ЗначениеДляПоиска");
					Если  (НайденнаяСтрока <> Неопределено) И (НЕ НайденнаяСтрока.Номенклатура.Пустая()) Тогда 
						НайденныеЗначения.Добавить(НайденнаяСтрока.Номенклатура);
						Возврат НайденныеЗначения;
					КонецЕсли;
				КонецЕсли;
				
				// Найдем номенклатуру по прайс листу контрагентов.
				Если флПоискПоПрайсуПоставщика И ЭтоСправочник И (ТипРеквизита = Тип("СправочникСсылка.Номенклатура")) Тогда
					Если (РежимЗагрузки = 1) Тогда
						Если ЕстьРеквизит(СсылкаИсточника, "Контрагент") Тогда
							Поставщик = СсылкаИсточника.Контрагент;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(Поставщик) Тогда
						НоменклатураПрайса = НайтиЗначениеВПрайсеПоставщика(Представление, ИскатьПо, Поставщик, "Номенклатура", 
											ДополнительныеПараметры.Дополнительно, СтруктураПараметров.флПоискПоПрайсуПоставщика);
						Если НоменклатураПрайса <> Неопределено  Тогда 
							НайденныеЗначения.Добавить(НоменклатураПрайса); 
							Возврат НайденныеЗначения;
						КонецЕсли;
					Иначе
						ОбщегоНазначения.СообщитьПользователю (НСтр("ru= 'Не найден контрагент. Невозможно выполнить поиск по прайс-листу контрагента.'"));
					КонецЕсли;
				КонецЕсли;
				
				// Найдем номенклатуру/характеристики по штрих-коду.
				Если (ИскатьПо = "ШтрихКод") И ЭтоСправочник  Тогда
					ТаблицаНоменклатурыИХарактеристик = ПолучитьШтрихкоды(Представление);
					ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ОтработатьПоискСправочникаПоШК(СтруктураПараметров,
																											ТаблицаНоменклатурыИХарактеристик,
																											НайденныеЗначения,
																											ТЧДокумента,
																											ТекстыЯчеек,
																											ТипРеквизита,
																											флКонтрольЗаполнения);
					Возврат НайденныеЗначения;
				КонецЕсли;
				
				КЭШЗаполнен = Ложь;
				ЕстьРеквизитПоискаОбъекта = МетаданныеТипа.Реквизиты.Найти(ИскатьПо) <> Неопределено
					ИЛИ ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеТипа.СтандартныеРеквизиты, ИскатьПо);
				Запрос = Новый Запрос;
				Если Не ЭтоСправочник ИЛИ (ЭтоСправочник И Не ПоискПоСхожести) Тогда
					Запрос.Текст =
					"ВЫБРАТЬ
					|	Врем_Таблица.Ссылка
					|ИЗ
					|	" + МетаданныеТипа.ПолноеИмя() + " КАК Врем_Таблица
					|ГДЕ";
					Если ЭтоСправочник И МетаданныеТипа.Иерархический И МетаданныеТипа.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
						Если ЕстьРеквизит(СтрокаНастройки, "ВыборГрупп") Тогда
							Если СтрокаНастройки.ВыборГрупп = "" Тогда
								Запрос.Текст = Запрос.Текст + "
								|	Врем_Таблица.ЭтоГруппа = ЛОЖЬ И ";
							ИначеЕсли СтрокаНастройки.ВыборГрупп = "Группы" Тогда
								Запрос.Текст = Запрос.Текст + "
								|	Врем_Таблица.ЭтоГруппа И ";
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Запрос.Текст = Запрос.Текст + "
					|	Врем_Таблица." + ИскатьПо + " = &Представление";
					
					Запрос.УстановитьПараметр("Представление", Представление);
					
				Иначе
					ТаблицаСлов.Очистить();
					СтруктураОтбораВКЭШе = Новый Структура("ТипРеквизита, ИскатьПо, Представление", ТипРеквизита, ИскатьПо, Представление);
					МассивСтрокКЭШа = КЭШЗначений.НайтиСтроки(СтруктураОтбораВКЭШе);
					Если МассивСтрокКЭШа.Количество() = 0 И ЕстьРеквизитПоискаОбъекта Тогда
						// КЭШ пустой, заполним его.
						МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипРеквизита);	
						СтрокаУпорядочивания = МетаданныеСправочника.ВводПоСтроке;
						Если НЕ ПустаяСтрока(СтрокаУпорядочивания) Тогда
							СтрокаУпорядочивания = "УПОРЯДОЧИТЬ ПО " + СтрокаУпорядочивания;	
						КонецЕсли;
						Запрос.Текст = "
						|ВЫБРАТЬ Ссылка,
						|" + ИскатьПо + " КАК ЗначениеРеквизита 
						|Из " + МетаданныеСправочника.ПолноеИмя() + " КАК Спр1
						|ГДЕ
						|Спр1." + ИскатьПо + " ПОДОБНО &Представление
						|" + ?(МетаданныеСправочника.Иерархический, " И Спр1.ЭтоГруппа = ЛОЖЬ", "") + "
						|" + СтрокаУпорядочивания + "
						|	{ГДЕ Спр1.Ссылка.* КАК Элемент}";
						Запрос.УстановитьПараметр("Представление", "%" + Представление + "%");
						Выборка = Запрос.Выполнить().Выбрать();
						
						Пока Выборка.Следующий() Цикл
							НоваяСтрокаКЭШа = КЭШЗначений.Добавить();
							НоваяСтрокаКЭШа.ТипРеквизита = ТипРеквизита;
							НоваяСтрокаКЭШа.ИскатьПо = ИскатьПо;
							НоваяСтрокаКЭШа.Представление = Представление;
							НоваяСтрокаКЭШа.Ссылка = Выборка.Ссылка;
							НоваяСтрокаКЭШа.ЗначениеРеквизита = Выборка.ЗначениеРеквизита;
							СписокСлов = Новый СписокЗначений;
							СписокСлов = ПолучитьСписокСлов(Выборка.ЗначениеРеквизита);
							НоваяСтрокаКЭШа.СписокСлов = СписокСлов.Скопировать();
							// добавим сразу строку в таблицу слов
							НовСтр = ТаблицаСлов.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр, НоваяСтрокаКЭШа);
						КонецЦикла;
					Иначе
						// КЭШ уже есть, возьмем его
						Для Каждого СтрокаМассива Из МассивСтрокКЭШа Цикл
							НовСтр = ТаблицаСлов.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр, СтрокаМассива);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			
				Если ЭтоСправочник И НЕ ПустаяСтрока(Колонка.СвязьПоВладельцу) И МетаданныеТипа.Владельцы.Количество() Тогда
					
					СвязьПоВладельцу = Неопределено;
					Если ВРег(Колонка.СвязьПоВладельцу) = "ВЫЧИСЛЯЕТСЯ ПО ВИДУ НОМЕНКЛАТУРЫ" Тогда
						ТекНоменклатура = ТекущиеДанные.Номенклатура;
						Если Колонка.ОписаниеТипов.Типы()[0] = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
							Если ТекНоменклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2 Тогда
								СвязьПоВладельцу = ТекНоменклатура;
								СтруктураПараметров.ВладелецСерии = ТекНоменклатура;
							ИначеЕсли ТекНоменклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1 Тогда
								СвязьПоВладельцу = ТекНоменклатура.ВидНоменклатуры;
								СтруктураПараметров.ВладелецСерии = ТекНоменклатура.ВидНоменклатуры;
							Иначе
								НайденныеЗначения.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ТипЗНЧ(Колонка.СвязьПоВладельцу) = Тип("Строка") Тогда
						ПозицияТочки = СтрНайти(Колонка.СвязьПоВладельцу,".");
						Если ПозицияТочки>0 Тогда
							Если ТекущиеДанные.Свойство(Лев(Колонка.СвязьПоВладельцу,ПозицияТочки-1)) Тогда
								СвязьПоВладельцу = ТекущиеДанные[Лев(Колонка.СвязьПоВладельцу,ПозицияТочки-1)];
								СвязьПоВладельцу = СвязьПоВладельцу[Сред(Колонка.СвязьПоВладельцу,ПозицияТочки+1)];
							Иначе
								ОбщегоНазначения.СообщитьПользователю (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для реквизита ""%1"" неверно задана связь по владельцу для типа ""%2"".'"), Колонка.ПредставлениеРеквизита, Строка(ТипРеквизита)));
								СвязьПоВладельцу = Неопределено;
							КонецЕсли;
						Иначе
							ТекущиеДанные.Свойство(Колонка.СвязьПоВладельцу,СвязьПоВладельцу);
						КонецЕсли;
					Иначе
						СвязьПоВладельцу = Колонка.СвязьПоВладельцу;
					КонецЕсли;
					
					Запрос.Текст = Запрос.Текст + Символы.ПС + " И Врем_Таблица.Владелец = &СвязьПоВладельцу";
					Запрос.УстановитьПараметр("СвязьПоВладельцу", СвязьПоВладельцу);
				КонецЕсли;
				
				Если Не ПоискПоСхожести И ЕстьРеквизитПоискаОбъекта Тогда
					Выборка =  Запрос.Выполнить().Выбрать();
				Иначе
					Выборка = Неопределено;
				КонецЕсли;
				
				ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ОбработатьВсеНайденныеЗначения(Выборка,
																				НайденныеЗначения,
																				Представление,
																				НормаЗначений,
																				ТаблицаСлов,
																				ПоискПоСхожести ИЛИ Не ЕстьРеквизитПоискаОбъекта);
				
			Иначе
				Примечание = НСтр("ru = 'Не описан способ поиска'");
				Примечание = НСтр("ru = 'Для Колонки не определен тип значения'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныеЗначения;
	
КонецФункции // ПолучитьВозможныеЗначения()

// Разбивает строку на слова. Возвращает список полученных слов.
//
// Параметры:
//	ЗначениеРеквизита - Строка - Строка, которую необходимо разбить на слова.
//
// Возвращаемое значение:
//	СписокСлов - СписокЗначений - список полученных слов.
//
Функция ПолучитьСписокСлов(ЗначениеРеквизита) Экспорт
	
	СписокСлов = Новый СписокЗначений;
	Слово = "";
	Для индекс = 1 По СтрДлина(ЗначениеРеквизита) Цикл
		Символ = Сред(ЗначениеРеквизита, индекс, 1);
		Если ЭтоБуква(Символ) Тогда
			Слово = Слово + Символ;
		Иначе
			Если Слово<>"" Тогда
			СписокСлов.Добавить(ВРЕГ(Слово));
			Слово = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Слово<>"" Тогда
		СписокСлов.Добавить(ВРЕГ(Слово));
	КонецЕсли;
	СписокСлов.СортироватьПоЗначению();
	Возврат СписокСлов;
	
КонецФункции // ()

// Возвращает степень соответствия
//
// Параметры:
//  СписокСлов1  - Список	- список слов
//  СписокСлов2  - Список	- список слов.
//
// Возвращаемое значение:
//  Число	- процент, степень соответствия списков.
//
Функция ВернутьСтепеньСоответствияСписковСлов(СписокСлов1, СписокСлов2) Экспорт
	СовпавшихЭлементов = 0;
	
	НачалоЗапроса = "";
	КонецЗапроса = "";
	
	МассивКодов1 = Новый Массив();
	Для Каждого Слово Из СписокСлов1 Цикл
		МассивСлова = Новый Массив();
		Для Сч = 1 По СтрДлина(Слово) Цикл
			МассивСлова.Добавить(КодСимвола(ВРег(Сред(Слово, Сч, 1))));
		КонецЦикла;
		МассивКодов1.Добавить(МассивСлова);
	КонецЦикла;
	
	МассивКодов2 = Новый Массив();
	Для Каждого Слово Из СписокСлов2 Цикл
		МассивСлова = Новый Массив();
		Для Сч = 1 По СтрДлина(Слово) Цикл
			МассивСлова.Добавить(КодСимвола(ВРег(Сред(Слово, Сч, 1))));
		КонецЦикла;
		МассивКодов2.Добавить(МассивСлова);
	КонецЦикла;
	
	
	Для Каждого ПервоеСлово Из МассивКодов1 Цикл
		ДлинаПервогоСлова = ПервоеСлово.Количество();
		СовпалоСПервымСловом = 0;
		Для Каждого ВтороеСлово Из МассивКодов2 Цикл
			ДлинаВторогоСлова = ВтороеСлово.Количество();
			КоличествоПолей = ДлинаПервогоСлова + 2 * (ДлинаВторогоСлова - 1);
			Таблица1 = Новый ТаблицаЗначений();
			Для Сч = 1 По КоличествоПолей Цикл
				Таблица1.Колонки.Добавить("Поле" + СокрЛП(Сч), Новый ОписаниеТипов("Число"));
			КонецЦикла;
			Таблица2 = Таблица1.Скопировать();
			
			СтрокаТаблицы = Таблица1.Добавить();
			Для Сч = 1 По КоличествоПолей Цикл
				СтрокаТаблицы["Поле" + СокрЛП(Сч)] = ?((Сч>=ДлинаВторогоСлова) И (Сч <= ДлинаВторогоСлова + ДлинаПервогоСлова - 1), ПервоеСлово[Сч - ДлинаВторогоСлова], 0);
			КонецЦикла;
			
			Для ВнешнийСчетчик = 1 По ДлинаПервогоСлова + ДлинаВторогоСлова - 1 Цикл
				СтрокаТаблицы = Таблица2.Добавить();
				Для Сч = 1 По КоличествоПолей Цикл
					СтрокаТаблицы["Поле" + СокрЛП(Сч)] = ?((Сч>=ВнешнийСчетчик) И (Сч <= ВнешнийСчетчик + ДлинаВторогоСлова - 1), ВтороеСлово[Сч - ВнешнийСчетчик], 0);
				КонецЦикла;
			КонецЦикла;
			
			ТекстПоля = "";
			Разделитель = "";
			Для Сч = 1 По КоличествоПолей Цикл
				ТекстСчетчика = СокрЛП(Сч);
				ТекстПоля = ТекстПоля + Разделитель + "ВЫБОР КОГДА Таблица1.Поле" + ТекстСчетчика + " = Таблица2.Поле" + ТекстСчетчика + " И (Таблица1.Поле" + ТекстСчетчика + " + Таблица2.Поле" + ТекстСчетчика + ") > 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
				Разделитель = " + ";
			КонецЦикла;
			
			ТекстПоля = ТекстПоля + " КАК ЧислоСовпадений";
			
			ТекстЗапроса = "ВЫБРАТЬ * ПОМЕСТИТЬ Таблица1 ИЗ &Таблица1 КАК Табл1; ВЫБРАТЬ * ПОМЕСТИТЬ Таблица2 ИЗ &Таблица2 КАК Табл2; ";
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	" + ТекстПоля + "
			|ИЗ Таблица1 КАК Таблица1
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таблица2 КАК Таблица2
			|		ПО ИСТИНА
			|УПОРЯДОЧИТЬ ПО
			|	ЧислоСовпадений УБЫВ";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
			Запрос.УстановитьПараметр("Таблица1", Таблица1);
			Запрос.УстановитьПараметр("Таблица2", Таблица2);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЧислоСовпадений = Выборка.ЧислоСовпадений;
			Иначе
				ЧислоСовпадений = 0;
			КонецЕсли;
			
			Если ЧислоСовпадений > СовпалоСПервымСловом Тогда
				СовпалоСПервымСловом = ЧислоСовпадений;
			КонецЕсли;
		КонецЦикла;
		СовпавшихЭлементов = СовпавшихЭлементов + СовпалоСПервымСловом;
	КонецЦикла;
	
	ДлинаПервогоСписка = 0;
	Для Каждого ПервоеСлово Из МассивКодов1 Цикл
		ДлинаПервогоСписка = ДлинаПервогоСписка + ПервоеСлово.Количество();
	КонецЦикла;
	
	ДлинаВторогоСписка = 0;
	Для Каждого ВтороеСлово Из МассивКодов2 Цикл
		ДлинаВторогоСписка = ДлинаВторогоСписка + ВтороеСлово.Количество();
	КонецЦикла;
	
	Возврат СовпавшихЭлементов / Макс(ДлинаПервогоСписка, ДлинаВторогоСписка);
	
КонецФункции

// Функция возвращает текущие настройки загружаемых реквизитов в формате Табличного документа.
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры загрузки.
//
// Возвращаемое значение:
//  ТабличныйДокумент	- Табличный документ.
//
Функция ПолучитьНастройки(СтруктураПараметров) Экспорт
	Если НЕ СтруктураПараметров.Свойство("МетаданныеИсточникаИзСправочника") Тогда
		МетаданныеОбъекта = ПолучитьМетаданныеИсточника(СтруктураПараметров);
	Иначе
		МетаданныеОбъекта = СтруктураПараметров.МетаданныеИсточникаИзСправочника;
	КонецЕсли;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидОбъекта     = МетаданныеОбъекта.ПолноеИмя();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	Макет = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ПолучитьМакет("МакетСохраненияНастроек");
	
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	
	Если СтруктураПараметров.РежимЗагрузки = 0 Тогда
		ОбластьШапки.Параметры.РежимЗагрузки = НСтр("ru = 'в справочник'");
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 1 ИЛИ СтруктураПараметров.РежимЗагрузки = 3 Тогда
		ОбластьШапки.Параметры.РежимЗагрузки = НСтр("ru = 'в табличную часть'");
	ИначеЕсли СтруктураПараметров.РежимЗагрузки = 2 Тогда
		ОбластьШапки.Параметры.РежимЗагрузки = НСтр("ru = 'в регистр сведений'");
	КонецЕсли;
	
	ОбластьШапки.Параметры.ВидОбъекта                                = ВидОбъекта;
	ОбластьШапки.Параметры.НеСоздаватьНовыхЭлементов                 = ?(СтруктураПараметров.НеСоздаватьНовыхЭлементов, "Х","");
	ОбластьШапки.Параметры.НеОбновлятьСуществующиеЭлементы           = ?(СтруктураПараметров.НеОбновлятьСуществующиеЭлементы, "Х","");
	ОбластьШапки.Параметры.ЗамещатьСуществующиеЗаписи                = ?(СтруктураПараметров.ЗамещатьСуществующиеЗаписи, "Х","");
	ОбластьШапки.Параметры.РучнаяНумерацияКолонокТабличногоДокумента = ?(СтруктураПараметров.РучнаяНумерацияКолонокТабличногоДокумента, "Х","");
	ОбластьШапки.Параметры.ПерваяСтрокаДанныхТабличногоДокумента     = СтруктураПараметров.ПерваяСтрокаДанныхТабличногоДокумента;
	ОбластьШапки.Параметры.ДействиеСЗагружаемымФайлом                = СтруктураПараметров.ДействиеСЗагружаемымФайлом;
    ОбластьШапки.Параметры.флПоискПоПрайсуПоставщика                 = ?(СтруктураПараметров.флПоискПоПрайсуПоставщика, "Х","");
    ОбластьШапки.Параметры.КаталогАрхиваЗагруженныхФайлов            = СтруктураПараметров.КаталогАрхиваЗагруженныхФайлов;
	ОбластьШапки.Параметры.Кодировка                                 = СтруктураПараметров.Кодировка;
	ОбластьШапки.Параметры.Табуляция                                 = СтруктураПараметров.Табуляция;
	ОбластьШапки.Параметры.ИспользоватьВнешнийМодульПреобразованияФайла = ?(СтруктураПараметров.ИспользоватьВнешнийМодульПреобразованияФайла, "Х","");
	ОбластьШапки.Параметры.ОбработкаПреобразования                	 = Строка(СтруктураПараметров.ОбработкаПреобразования.УникальныйИдентификатор());
	ОбластьШапки.Параметры.ЗагружатьДополнительныеРеквизитыИСведения = ?(СтруктураПараметров.ЗагружатьДополнительныеРеквизитыИСведения, "Х","");
	ОбластьШапки.Параметры.ДополнительныеРеквизитыИСведенияТолькоОбщие = ?(СтруктураПараметров.ДополнительныеРеквизитыИСведенияТолькоОбщие, "Х","");
	ОбластьШапки.Параметры.ДополнительныеРеквизитыПоТипуНоменклатуры  = ?(СтруктураПараметров.ДополнительныеРеквизитыПоТипуНоменклатуры.Количество() = 0, "", ЗначениеВСтрокуВнутр(СтруктураПараметров.ДополнительныеРеквизитыПоТипуНоменклатуры));
	
	ДокументРезультат.Вывести(ОбластьШапки);
	
	Для Каждого ЗагружаемыйРеквизит Из СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов Цикл
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + ?(ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять","Выражение",""));
		
		ОбластьСтроки.Параметры.Пометка      = ?(ЗагружаемыйРеквизит.Пометка, "Х","");
		ОбластьСтроки.Параметры.ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;
		ОбластьСтроки.Параметры.ПолеПоиска   = ?(ЗагружаемыйРеквизит.ПолеПоиска, "Х","");
		ОбластьСтроки.Параметры.ЭтоДополнительныйРеквизит   = ?(ЗагружаемыйРеквизит.ЭтоДополнительныйРеквизит, "Х","");
		ОбластьСтроки.Параметры.ЭтоСведение  = ?(ЗагружаемыйРеквизит.ЭтоСведение, "Х","");
		ОписаниеТипов = "";
		Для Каждого Тип Из ЗагружаемыйРеквизит.ОписаниеТипов.Типы() Цикл
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если НЕ МетаданныеТипа = Неопределено Тогда
				ОписаниеТипа = МетаданныеТипа.ПолноеИмя();
			ИначеЕсли Тип = Тип("Строка") Тогда
				
				ОписаниеТипа = "Строка";
				Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина Тогда
					ОписаниеТипа = ОписаниеТипа + ", " + ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина;
					Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная Тогда
						ОписаниеТипа = ОписаниеТипа + ", " + ДопустимаяДлина.Фиксированная;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Тип = Тип("Число") Тогда
				ОписаниеТипа = "Число"
				+ ", "+ ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.Разрядность
				+ ", "+ ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти
				+ ?(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный,", Неотрицательный","");
			ИначеЕсли Тип = Тип("Дата") Тогда
				ОписаниеТипа = "" + ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыДаты.ЧастиДаты;
			ИначеЕсли Тип = Тип("Булево") Тогда
				ОписаниеТипа = "Булево";
			Иначе
				Продолжить;
			КонецЕсли;
			
			ОписаниеТипов = ?(ПустаяСтрока(ОписаниеТипов),"",ОписаниеТипов +Символы.ПС) + ОписаниеТипа;
			
		КонецЦикла;
		ОбластьСтроки.Параметры.ОписаниеТипов       = ОписаниеТипов;
		ОбластьСтроки.Параметры.РежимЗагрузки       = ЗагружаемыйРеквизит.РежимЗагрузки;
		ОбластьСтроки.Параметры.НомерКолонки        = ЗагружаемыйРеквизит.НомерКолонки;
		Если ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено) = ЗагружаемыйРеквизит.ЗначениеПоУмолчанию Тогда
			ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = "";
		Иначе
			ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		КонецЕсли;
		
		Если ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено) = ЗагружаемыйРеквизит.СсылкаРеквизита Тогда
			ОбластьСтроки.Параметры.СсылкаРеквизита = "";
		Иначе
			ОбластьСтроки.Параметры.СсылкаРеквизита = ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СсылкаРеквизита);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗагружаемыйРеквизит.НастройкаЗагрузки) Тогда
			ОбластьСтроки.Параметры.НастройкаЗагрузки = "";
		Иначе
			ОбластьСтроки.Параметры.НастройкаЗагрузки = ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.НастройкаЗагрузки);
		КонецЕсли;
		
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
			
			ОбластьСтроки.Параметры.Выражение           = ЗагружаемыйРеквизит.Выражение;
			
		Иначе
			ОбластьСтроки.Параметры.ИскатьПо            = ЗагружаемыйРеквизит.ИскатьПо;
			ОбластьСтроки.Параметры.СвязьПоВладельцу    = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоВладельцу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоВладельцу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоВладельцу));
			ОбластьСтроки.Параметры.СвязьПоТипу         = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоТипу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоТипу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоТипу));
			ОбластьСтроки.Параметры.ЭлементСвязиПоТипу  = ЗагружаемыйРеквизит.ЭлементСвязиПоТипу;
		КонецЕсли;
		ОбластьСтроки.Параметры.РежимПоиска        = ЗагружаемыйРеквизит.РежимПоиска;
		ДокументРезультат.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ОбластьПодвала = Макет.ПолучитьОбласть("События");
	ОбластьПодвала.Параметры.ПередЗаписьюОбъекта = СтруктураПараметров.ПередЗаписьюОбъекта;
	ОбластьПодвала.Параметры.ПриЗаписиОбъекта = СтруктураПараметров.ПриЗаписиОбъекта;
	ДокументРезультат.Вывести(ОбластьПодвала);
	ОбластьПодвала = Макет.ПолучитьОбласть("СобытияПослеДобавленияСтроки");
	ОбластьПодвала.Параметры.ПослеДобавленияСтроки = СтруктураПараметров.ПослеДобавленияСтроки;
	ДокументРезультат.Вывести(ОбластьПодвала);
	
	Возврат ДокументРезультат;
	
КонецФункции // ПолучитьНастройки()

// Процедура сохраняет данные таблицы соответствия номенклатуры в прайс-лист поставщика.
//
// Параметры:
//  ПрайсЛистКонтрагента					 - СправочникСсылка.ПрайсЛистКонтрагента	 - прайс лист контрагента.
//  НастройкиЗагрузкиНоменклатурыИскатьПо	 - Строка									 - Строка поиска реквизит номенклатуры.
//  ТаблицаДополнительныхПараметров			 - ТаблицаЗначений							 - соджержит дополнительные параметры.
//  ТаблицаЗагружаемыхРеквизитов			 - ТаблицаЗначений							 - загружаемые реквизиты.
//  СоответствиеНоменклатуры				 - ТаблицаЗначений							 - таблица соответствия номенклатуры.
//
Процедура СохранитьТаблицуСоответствия(
	ПрайсЛистКонтрагента,
	НастройкиЗагрузкиНоменклатурыИскатьПо,
	ТаблицаДополнительныхПараметров,
	ТаблицаЗагружаемыхРеквизитов,
	СоответствиеНоменклатуры)  Экспорт
	
	РезультатЗагрузки=Истина;
	
	ИскатьПо        = НастройкиЗагрузкиНоменклатурыИскатьПо;
	
	// Получим набор записей регистра сведений
	РегистрПрайсЛистов=РегистрыСведений.ПрайсЛистыКонтрагентов.СоздатьНаборЗаписей();
	РегистрПрайсЛистов.Отбор.ПрайсЛист.Значение=ПрайсЛистКонтрагента; 
	РегистрПрайсЛистов.Отбор.ПрайсЛист.Использование=Истина;
	
	ТекстСообщения = НСтр("ru = 'Выполняется сохранение таблицы соответствия в прайс-лист <%1>'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(ПрайсЛистКонтрагента));
	ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
	НачатьТранзакцию();
	
	Попытка
		
		РегистрПрайсЛистов.Прочитать();
		
		ТЗПрайсЛиста=РегистрПрайсЛистов.Выгрузить(); 
		
		ТЗПрайсЛиста.Колонки.Добавить("СтрокаОбновлена");
		ТЗПрайсЛиста.ЗаполнитьЗначения(Ложь, "СтрокаОбновлена");
		ТЗПрайсЛиста.Колонки.Добавить("НаименованиеВРег");
		Для Каждого СтрокаТЗ Из ТЗПрайсЛиста Цикл
			СтрокаТЗ.НаименованиеВРег = ВРег(СокрЛП(СтрокаТЗ.Наименование));
		КонецЦикла;
		
		// Дата регистрации цены
		ДатаЗагрузки = ТекущаяДатаСеанса();
		
		ОтборПоПроизводителю = Ложь;
		Если ТаблицаДополнительныхПараметров<>Неопределено Тогда
			СтрокаПроизводитель = ТаблицаДополнительныхПараметров.Найти("Производитель");
			Если НЕ СтрокаПроизводитель = Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаПроизводитель.НомерКолонки) Тогда
					ОтборПоПроизводителю = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаСоответствия Из СоответствиеНоменклатуры Цикл
			Если НЕ СтрокаСоответствия.Номенклатура.Пустая()  Тогда 
				
				сНоменклатура = СтрокаСоответствия.Номенклатура;
				ЗначениеДляПоиска = СтрокаСоответствия.ЗначениеДляПоиска;
				СтруктураПоиска=Новый Структура();
				Если ИскатьПо = "Наименование" Тогда
					СтруктураПоиска.Вставить("НаименованиеВРег",ВРег(СокрЛП(ЗначениеДляПоиска)));
				Иначе
					Если ТЗПрайсЛиста.Колонки.Найти(ИскатьПо)<>Неопределено Тогда
						СтруктураПоиска.Вставить(ИскатьПо,ЗначениеДляПоиска);
					КонецЕсли;
				КонецЕсли;
				
				Если ОтборПоПроизводителю Тогда
					Если ПолучитьЗначениеПараметраСтруктуры(СтрокаСоответствия, "Производитель") Тогда
						СтруктураПоиска.Вставить("Производитель", СтрокаСоответствия.Производитель);
					КонецЕсли;
				КонецЕсли;
				
				НоваяПозицияПрайсЛиста=Неопределено;
				Если СтруктураПоиска.Количество()>0 Тогда
					МассивПозицийПрайсЛиста=ТЗПрайсЛиста.НайтиСтроки(СтруктураПоиска);
					Если МассивПозицийПрайсЛиста.Количество()>0 Тогда
						НоваяПозицияПрайсЛиста=МассивПозицийПрайсЛиста[0];
					КонецЕсли; 
				КонецЕсли; 
				Если НоваяПозицияПрайсЛиста = Неопределено Тогда
					НоваяПозицияПрайсЛиста  = ТЗПрайсЛиста.Добавить();
					НоваяПозицияПрайсЛиста.ПрайсЛист    = ПрайсЛистКонтрагента;
					НоваяПозицияПрайсЛиста.Контрагент   = ПрайсЛистКонтрагента.Владелец; 
					НоваяПозицияПрайсЛиста.Номенклатура = сНоменклатура; 
					НоваяПозицияПрайсЛиста.Наименование = сНоменклатура.Наименование;
					НоваяПозицияПрайсЛиста.СтрокаОбновлена = Истина;
					Если (ИскатьПо = "Код") ИЛИ (ИскатьПо = "Артикул") Тогда
						НоваяПозицияПрайсЛиста.Артикул      = ЗначениеДляПоиска;
					ИначеЕсли (ИскатьПо = "Наименование") Тогда
						НоваяПозицияПрайсЛиста.Наименование = ЗначениеДляПоиска;
					КонецЕсли;
					
				ИначеЕсли НоваяПозицияПрайсЛиста.Номенклатура <> сНоменклатура Тогда
					НоваяПозицияПрайсЛиста.Номенклатура = сНоменклатура;
					НоваяПозицияПрайсЛиста.СтрокаОбновлена = Истина;
				КонецЕсли;
				
				СтрокаНастройки = ТаблицаЗагружаемыхРеквизитов.Найти("Цена");
				Если СтрокаНастройки = Неопределено Тогда
					НомерКолонкиЦена = 0;
				Иначе
					НомерКолонкиЦена = СтрокаНастройки.НомерКолонки;
				КонецЕсли;
				
				Если НомерКолонкиЦена>1 И СтрокаСоответствия.Цена>0 Тогда
					НоваяПозицияПрайсЛиста.Цена = СтрокаСоответствия.Цена;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ТЗПрайсЛиста.Колонки.Удалить("НаименованиеВРег");
		
		Для Каждого СтрокаТаблицы Из ТЗПрайсЛиста Цикл
			Если СтрокаТаблицы.СтрокаОбновлена Тогда
				НоваяЗапись = РегистрыСведений.ПрайсЛистыКонтрагентов.СоздатьМенеджерЗаписи();
				НоваяЗапись.ПрайсЛист    		= ПрайсЛистКонтрагента;
				НоваяЗапись.Номенклатура 		= СтрокаТаблицы.Номенклатура; 
				НоваяЗапись.Артикул      		= СтрокаТаблицы.Артикул;
				НоваяЗапись.Наименование 		= СтрокаТаблицы.Наименование;
				
				НоваяЗапись.Цена        		= СтрокаТаблицы.Цена;
				НоваяЗапись.Количество   		= СтрокаТаблицы.Количество;
				НоваяЗапись.СрокПоставки 		= СтрокаТаблицы.СрокПоставки;
				НоваяЗапись.Контрагент   		= СтрокаТаблицы.Контрагент;
				
				НоваяЗапись.Записать();
				
			КонецЕсли;
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'Обработка таблицы соответствия завершена'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Ошибка записи таблицы соответствия в прайс-лист: <%1>'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Функция выполняет загрузку данных из табличного документа в табличную часть соответствия.
//
// Параметры:
//  ТабличныйДокумент							 - ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку.
//  СтруктураПараметров							 - Структура		 - Параметры загрузки.
//  НомерКолонкиНаименованиеТабличногоДокумента	 - Число			 - Номер колонки наименования номенклатуры.
//
// Возвращаемое значение:
//  Булево	- Истина, если загрузка прошла без ошибок, Ложь - иначе.
//
Функция ЗагрузитьСоответствиеНоменклатуры(ТабличныйДокумент, СтруктураПараметров, НомерКолонкиНаименованиеТабличногоДокумента = 0) Экспорт
	
	СтруктураИнициализации = Инициализация();
	Для Каждого ЭлементСтруктуры Из СтруктураИнициализации Цикл
		СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	КЭШЗначений = Новый ТаблицаЗначений;
	КЭШЗначений.Колонки.Добавить("ТипРеквизита");
	КЭШЗначений.Колонки.Добавить("ИскатьПо");
	КЭШЗначений.Колонки.Добавить("Представление");
	КЭШЗначений.Колонки.Добавить("Ссылка");
	КЭШЗначений.Колонки.Добавить("ЗначениеРеквизита");
	КЭШЗначений.Колонки.Добавить("СписокСлов");
	СтруктураПараметров.Вставить("КЭШЗначений", КЭШЗначений);
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(СтруктураПараметров);
	СтрокаНастройкиЗагрузкиНоменклатуры =  СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Найти("Номенклатура","ПредставлениеРеквизита"); 
	Если (СтрокаНастройкиЗагрузкиНоменклатуры = Неопределено) ИЛИ (СтрокаНастройкиЗагрузкиНоменклатуры.Пометка = Ложь)  Тогда
		ТекстСообщения = НСтр("ru = 'Не отмечен реквизит номенклатура.'");
		ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// если номенклатуру ищем по наименованию, тогда скроем соответствующую колонку
	Если СтрокаНастройкиЗагрузкиНоменклатуры.ИскатьПо <> "Наименование" Тогда
		
		НомерКолонкиНеНайден = ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.НомерКолонкиНаименованияНеНайден(СтруктураПараметров, 
																															НомерКолонкиНаименованиеТабличногоДокумента);
		
		Если НомерКолонкиНеНайден Тогда
			ТекстСообщения = НСтр("ru = 'Не указан номер колонки наименования номенклатуры.'");
			ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - СтруктураПараметров.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	Если КоличествоЭлементов <= 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для загрузки'");
		ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
		
	СохранятьПроставленные = СтруктураПараметров.Свойство("СохранятьПроставленные") И СтруктураПараметров.СохранятьПроставленные;
	
	ТаблицаПроставленных = СтруктураПараметров.СоответствиеНоменклатуры.Скопировать();

	СтруктураПараметров.СоответствиеНоменклатуры.Очистить();
	             
	Загружено = 0;
	
	СтруктураОтраслевыхДополнительныхПараметров = ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ПолучитьСтруктуруОтраслевыхДопПараметров(СтруктураПараметров);
	
	НомерТекущейСтроки = 0;
	Для К = СтруктураПараметров.ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		ТекстыЯчеек = Неопределено;
		ЗначенийБольшеОдного = Ложь;
		ТекущаяСтрока = ПолучитьСтрокуТаблицыСоответствия(ТабличныйДокумент, К, СтруктураПараметров, ТекстыЯчеек);
		
		Если СтрокаНастройкиЗагрузкиНоменклатуры.ИскатьПо = "Наименование" Тогда
			Если СтрокаНастройкиЗагрузкиНоменклатуры.НомерКолонки<>0 Тогда
				Наименование      = СокрЛП(ТекущаяСтрока.Представление);
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе	
			Наименование = ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ПолучитьНаименованиеДляТаблицыСоответствия(СтруктураПараметров, 
																																ТабличныйДокумент, 
																																ТекстыЯчеек, 
																																НомерКолонкиНаименованиеТабличногоДокумента, 
																																К);
		КонецЕсли;
		
		НайденнаяСтрока   = СтруктураПараметров.СоответствиеНоменклатуры.Найти(Наименование,"Наименование");
		
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрокаТаблСоответствия                   = СтруктураПараметров.СоответствиеНоменклатуры.Добавить();
			НоваяСтрокаТаблСоответствия.ЗначениеДляПоиска = СокрЛП(ТекущаяСтрока.Представление);
			НоваяСтрокаТаблСоответствия.Номенклатура      = ТекущаяСтрока.Результат;
			НоваяСтрокаТаблСоответствия.ЗначенийБольшеОдного  = ТекущаяСтрока.ЗначенийБольшеОдного;
			НоваяСтрокаТаблСоответствия.Наименование      = Наименование;
			Если ТекущаяСтрока.Результат = Справочники.Номенклатура.ПустаяСсылка() Тогда
				НоваяСтрокаТаблСоответствия.Загружать = Истина;
			Иначе 
				НоваяСтрокаТаблСоответствия.Загружать = Ложь;
			КонецЕсли;
			
			ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ЗаполнитьСтрокуТаблицыСоответствияПоДопПараметрам(СтруктураПараметров,
																														НоваяСтрокаТаблСоответствия,
																														СтруктураОтраслевыхДополнительныхПараметров, 
																														ТабличныйДокумент, 
																														К,
																														ТекстыЯчеек);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СохранятьПроставленные Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтрокаСоответствия Из СтруктураПараметров.СоответствиеНоменклатуры Цикл
		Если Не СтрокаСоответствия.Загружать Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВПроставленных = ТаблицаПроставленных.Найти(СтрокаСоответствия.ЗначениеДляПоиска, "ЗначениеДляПоиска");
		Если СтрокаВПроставленных<>Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаСоответствия, СтрокаВПроставленных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ЗагрузитьСоответствиеНоменклатуры()

// Создание новой номенклатуры
//
// Параметры:
//  СоответствиеНоменклатуры - Соответствие						 - Данные заполнения номенклатуры.
//  ГруппаНоменклатуры		 - СправочникСсылка.Номенклатура	 - Родитель номенклатуры.
//  ТипНоменклатуры			 - СправочникСсылка.ТипыНоменклатуры - Тип новой номенклатуры.
//  ДанныеЗаполнения		 - Структура						 - Дополнительные данные заполнения.
//
Процедура СоздатьНоменклатуру(СоответствиеНоменклатуры, ГруппаНоменклатуры, ТипНоменклатуры, ДанныеЗаполнения) Экспорт
	Для Каждого СтрокаТаблицыСоответствия Из СоответствиеНоменклатуры Цикл
		
		// Попробуем создать новую номенклатуру или связать с существующей
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСоответствия.Номенклатура) И (СтрокаТаблицыСоответствия.Загружать) Тогда
			
			// Номенклатура не прописана - поищем с таким артикулом
			Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТаблицыСоответствия.Наименование, Истина);
			Если Номенклатура.Пустая() Тогда
				
				// Нет номенклатуры с таким артикулом - создаем новую
				Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
				Номенклатура.Родитель           = ГруппаНоменклатуры;
				Номенклатура.Наименование       = СтрокаТаблицыСоответствия.Наименование;
				Номенклатура.УстановитьНовыйКод();
				Номенклатура.НаименованиеПолное = Номенклатура.Наименование;
				Номенклатура.ТипНоменклатуры    = ТипНоменклатуры;
				Номенклатура.ВидНоменклатуры	= ТипНоменклатуры.ВидНоменклатуры;
				Номенклатура.БазоваяЕдиницаИзмерения   = ДанныеЗаполнения.ЕдиницаИзмерения;
				Номенклатура.СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТаблицыСоответствия.СтавкаНДС), СтрокаТаблицыСоответствия.СтавкаНДС, ДанныеЗаполнения.СтавкаНДС);
				Номенклатура.ВалютаУчета	    = ДанныеЗаполнения.ВалютаУчета;
				Номенклатура.Артикул		    = ДанныеЗаполнения.Артикул;
				
				ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ДописатьПараметрыВСоздаваемуюНоменклатуру(Номенклатура,СтрокаТаблицыСоответствия, ДанныеЗаполнения.СтранаПроисхождения);
				
				Попытка
					Номенклатура.Записать();
					НоваяОсновнаяЕдиница = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
					Если ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1 Тогда
						НоваяОсновнаяЕдиница.Владелец = ТипНоменклатуры;
					Иначе
						НоваяОсновнаяЕдиница.Владелец = Номенклатура.Ссылка;
					КонецЕсли;
					НоваяОсновнаяЕдиница.ЕдиницаПоКлассификатору = ДанныеЗаполнения.ЕдиницаИзмерения;
					НоваяОсновнаяЕдиница.Наименование = ДанныеЗаполнения.ЕдиницаИзмерения.Наименование;
					НоваяОсновнаяЕдиница.Коэффициент = 1;
					НоваяОсновнаяЕдиница.Записать();
					Номенклатура.ОсновнаяЕдиницаИзмерения = НоваяОсновнаяЕдиница.Ссылка;
					Номенклатура.Записать();
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'Ошибка записи номенклатуры ""%1""'"), Номенклатура.Наименование);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецПопытки;
				
				СтрокаТаблицыСоответствия.Номенклатура = Номенклатура.Ссылка;
				СтрокаТаблицыСоответствия.Загружать    = Ложь;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСоответствия.СтавкаНДС) Тогда
					СтрокаТаблицыСоответствия.СтавкаНДС = Номенклатура.СтавкаНДС;
				КонецЕсли;
				
			Иначе
				// Добавим найденную позицию
				СтрокаТаблицыСоответствия.Номенклатура = Номенклатура.Ссылка;
				СтрокаТаблицыСоответствия.Загружать    = Ложь;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСоответствия.СтавкаНДС) Тогда
					СтрокаТаблицыСоответствия.СтавкаНДС = Номенклатура.СтавкаНДС;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

// Создание номенклатуры по настройке.
//
// Параметры:
//  ТабличныйДокументОбъекта				 - ТабличныйДокумент							 - Документ настройки загрузки номенклатуры.
//  Настройка								 - НастройкиЗагрузкиДанныхИзТабличногоДокумента	 - Настройка загрузки.
//  НомерКолонкиНоменклатуры				 - Число										 - Номер колонки таблицы с номенклатурой.
//  СоответствиеНоменклатуры				 - Соответствие									 - Соответствие номенклатуры.
//  ТаблицаЗагружаемыхРеквизитов			 - ТаблицаЗначений								 - Таблица реквизитов для загрузки.
//  ТаблицаДополнительныхПараметров			 - ТаблицаЗначений								 - Таблица с дополнительными параметрами.
//  ПерваяСтрокаДанныхТабличногоДокумента	 - Число										 - Номер строки с началом данных загрузки.
// 
// Возвращаемое значение:
//  Булево - Признак доступности загрузки.
//
Функция СоздатьНоменклатуруПоНастройке(
	ТабличныйДокументОбъекта,
	Настройка,
	НомерКолонкиНоменклатуры,
	СоответствиеНоменклатуры,
	ТаблицаЗагружаемыхРеквизитов,
	ТаблицаДополнительныхПараметров,
	ПерваяСтрокаДанныхТабличногоДокумента) Экспорт
	
	ЕстьЧтоЗагружать = Ложь;
	
	ТабличныйДокументНоменклатуры = Новый ТабличныйДокумент;
	
	Для Каждого СтрокаСоответствия Из СоответствиеНоменклатуры Цикл
		Если СтрокаСоответствия.Загружать Тогда
			ЕстьЧтоЗагружать = Истина;
			ТабличныйДокумент = ТабличныйДокументОбъекта;
			Для К = ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
				Область = ТабличныйДокумент.Область("R"+Формат(К,"ЧГ=")+"C"+Формат(НомерКолонкиНоменклатуры,"ЧГ="));
				Представление = СокрЛП(Область.Текст);
				Если Представление = СтрокаСоответствия.ЗначениеДляПоиска Тогда
					ОбластьСтрока = ТабличныйДокумент.ПолучитьОбласть("R"+Формат(К,"ЧГ="));
					ТабличныйДокументНоменклатуры.Вывести(ОбластьСтрока);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров = ЗагрузкаИзЭлектронныхДокументовВызовСервера.Инициализация();
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов", 			ТаблицаЗагружаемыхРеквизитов);
	СтруктураПараметров.Вставить("ТаблицаДополнительныхПараметров", 		ТаблицаДополнительныхПараметров);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента", 	1);
	СтруктураПараметров.Вставить("РежимЗагрузки", 							3);
	СтруктураПараметров.Вставить("ИмяСправочника", 							"Номенклатура");
	СтруктураПараметров.Вставить("ИмяВидаРегистра", 						"");
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта", 					"");
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта", 						"");
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки", 					"");
	СтруктураПараметров.Вставить("СсылкаИсточника", 						Неопределено);
	СтруктураПараметров.Вставить("ТабличнаяЧастьИсточника", 				Неопределено);
	СтруктураПараметров.Вставить("НеСоздаватьНовыхЭлементов", 				Ложь);
    СтруктураПараметров.Вставить("НеОбновлятьСуществующиеЭлементы", 		Ложь);
	СтруктураПараметров.Вставить("ЗамещатьСуществующиеЗаписи", 				Ложь);
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", Ложь);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента", 	1);
	СтруктураПараметров.Вставить("ФорматДатыСрокаГодности", 				"");
	СтруктураПараметров.Вставить("ВсегдаФормироватьНовыеСерии", 			Ложь);
	СтруктураПараметров.Вставить("НеФормироватьДопНомерСерии", 				Ложь);
	СтруктураПараметров.Вставить("ДействиеСЗагружаемымФайлом", 				"");
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика", 				Ложь);
	СтруктураПараметров.Вставить("КаталогАрхиваЗагруженныхФайлов", 			"");
	СтруктураПараметров.Вставить("СоздаватьПроизводителя", 					Ложь);
	СтруктураПараметров.Вставить("Табуляция", 								Неопределено);
	СтруктураПараметров.Вставить("ИспользоватьВнешнийМодульПреобразованияФайла", Ложь);
	СтруктураПараметров.Вставить("ОбработкаПреобразования", 				Неопределено);
	СтруктураПараметров.Вставить("Кодировка",				 				"");
	СтруктураПараметров.Вставить("ИмяТаблицы",				 				"");
	СтруктураПараметров.Вставить("ОписаниеОшибок",				 			"");
	СтруктураПараметров.Вставить("ТЧДокумента",				 				Неопределено);
	СтруктураПараметров.Вставить("ДопПараметры",				 			Неопределено);
	СтруктураПараметров.Вставить("флКонтрольЗаполнения", 					Ложь);
	СтруктураПараметров.Вставить("ВладелецСерии",				 			Неопределено);
	СтруктураПараметров.Вставить("ЗагружатьДополнительныеРеквизитыИСведения",	Ложь);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыИСведенияТолькоОбщие",	Ложь);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыПоТипуНоменклатуры",	Новый СписокЗначений);
	
	ЗаполнитьНастройкиКолонок(Настройка.НастройкиЗагрузкиВыгрузки.Получить(), СтруктураПараметров);
	СтруктураПараметров.ПерваяСтрокаДанныхТабличногоДокумента = 1;
	
	ЗагрузитьДанные(ТабличныйДокументНоменклатуры,СтруктураПараметров);
	Если ЗначениеЗаполнено(СтруктураПараметров.ОписаниеОшибок) Тогда
		ОбщегоНазначения.СообщитьПользователю(СтруктураПараметров.ОписаниеОшибок);
	КонецЕсли;
	
	Возврат ЕстьЧтоЗагружать;
	
КонецФункции

// Функция определить возможность установки режима поиска для текущих данных
//
// Параметры:
//  РеквизитПоиска              - Строка			- реквизит поиска
//  ОписаниеТиповРеквизита      - ОписаниеТипов		- Допустимое описание типов численного значения
//  РеквизитИскатьПо            - Строка			- реквизит поиска
//  РеквизитЗначениеПоУмолчанию - Строка			- значение реквизита по умолчанию.
//
// Возвращаемое значение:
// 	Булево 	- Истина - есть возможность установки режима поиска для текущих данных, ложь - иначе.
//
Функция ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных(РеквизитПоиска, ОписаниеТиповРеквизита, РеквизитИскатьПо, РеквизитЗначениеПоУмолчанию) Экспорт
		// режим поиска по похожим словам
		Если РеквизитПоиска="Владелец"
			ИЛИ РеквизитПоиска="Родитель" Тогда
				
			Возврат Ложь;
			
		ИначеЕсли РеквизитПоиска="Наименование" Тогда	 
			
			Возврат Истина;
			
		Иначе
			Если НЕ ОписаниеТиповРеквизита.СодержитТип(Тип("Строка")) Тогда
				МассивТипов = ОписаниеТиповРеквизита.Типы();
				Если МассивТипов.Количество()<>0 Тогда
					ТипРеквизита = МассивТипов[0];
					Если ТипРеквизита = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
						Возврат Ложь;
					КонецЕсли;
					Попытка
						Если ТипЗнч(РеквизитЗначениеПоУмолчанию[РеквизитИскатьПо]) = Тип("Строка") Тогда
							Возврат Истина;
						КонецЕсли;
					Исключение
						Возврат Ложь;
					КонецПопытки;
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
			
	Возврат Истина;
	
КонецФункции //ОпределитьВозможностьУстановкиРежимаПоискаДляТекущихДанных()

// Функция определить возможность установки режима загрузки для текущих данных
//
// Параметры:
//  ОписаниеТиповРеквизита	 - ОписаниеТипов	 - Допустимое описание типов численного значения.
//  ЗначениеПоУмолчанию		 - Произвольный		 - значение по-умолчанию.
//
// Возвращаемое значение:
// 	Булево 	- Истина - есть возможность установки режима загрузки для текущих данных, ложь - иначе.
//
Функция ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных(ОписаниеТиповРеквизита, ЗначениеПоУмолчанию) Экспорт
	МассивТипов = ОписаниеТиповРеквизита.Типы();
	ВсеОк = Ложь;
	Если МассивТипов.Количество()<>0 Тогда
		ТипРеквизита = МассивТипов[0];
		Попытка
			Если ТипРеквизита = ТипЗнч(ЗначениеПоУмолчанию) И Метаданные.Справочники.Содержит(ЗначениеПоУмолчанию.Метаданные()) Тогда
				ВсеОк = Истина;
			КонецЕсли;
		Исключение
			ВсеОк = Ложь;
		КонецПопытки;
	КонецЕсли;
	Возврат ВсеОк;
КонецФункции //ОпределитьВозможностьУстановкиРежимаЗагрузкиДляТекущихДанных()

// Функция получает настройку из хранилища
//
// Параметры:
//  НастройкиСсылка - СправочникСсылка.НастройкиЗагрузкиДанныхИзТабличногоДокумента - Настройка.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Настройки выгрузки/загрузки данных.
//
Функция ПолучитьНастройкуИзХранилища(НастройкиСсылка) Экспорт
	
	ОбъектНастройка = НастройкиСсылка.ПолучитьОбъект();
	
	Настройки = ОбъектНастройка.НастройкиЗагрузкиВыгрузки.Получить();
	
	Возврат Настройки;
	
КонецФункции

// Процедура устанавливает флаг таблицы
//
// Параметры:
//  ЗначениеФлага - Булево - Значение флага, которое необходимо установить.
//  ТаблицаСоответствий - ТаблицаЗначений - Таблица, в которой будем устанавливать флаг.
//
Процедура УстановитьФлагТаблицыСоответствий(ЗначениеФлага, ТаблицаСоответствий) Экспорт
	
	Для Каждого Элемент Из ТаблицаСоответствий Цикл
		Если ЗначениеЗаполнено(Элемент.Номенклатура) Тогда
			Элемент.Загружать = Ложь;
		Иначе
			Элемент.Загружать = ЗначениеФлага;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получить настройки для всех контрагентов
// 
// Возвращаемое значение:
//  Массив - Список настроек для всех контрагентов.
//
Функция ПолучитьНастройкиДляВсехКонтрагентов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиЗагрузкиДанныхИзТабличногоДокументаКонтрагенты.Ссылка,
	               |	НастройкиЗагрузкиДанныхИзТабличногоДокументаКонтрагенты.Контрагент
	               |ПОМЕСТИТЬ Таб
	               |ИЗ
	               |	Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента.Контрагенты КАК НастройкиЗагрузкиДанныхИзТабличногоДокументаКонтрагенты
	               |ГДЕ
	               |	НастройкиЗагрузкиДанныхИзТабличногоДокументаКонтрагенты.Контрагент <> &ПустойКонтрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкиЗагрузкиДанныхИзТабличногоДокумента.Ссылка
	               |ИЗ
	               |	Справочник.НастройкиЗагрузкиДанныхИзТабличногоДокумента КАК НастройкиЗагрузкиДанныхИзТабличногоДокумента
	               |ГДЕ
	               |	НастройкиЗагрузкиДанныхИзТабличногоДокумента.ЭтоГруппа = ЛОЖЬ
	               |	И НЕ НастройкиЗагрузкиДанныхИзТабличногоДокумента.Ссылка В
	               |				(ВЫБРАТЬ
	               |					Таб.Ссылка
	               |				ИЗ
	               |					Таб)";
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция считывает в табличный документ данные из файла в формате TXT.
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент	- ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - Строка				- Имя файла в формате TXT, из которого необходимо прочитать данные
//  Разделитель           - Строка			- Разделитель.
//
// Возвращаемое значение:
//  Булево			- Истина, если файл прочитан, Ложь - иначе.
//
Функция ПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент, Разделитель, АдресВоВременномХранилище, Расширение, Кодировка)
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ВременныйФайл = КаталогВременныхФайлов() + "testUA" + Расширение;
	ДанныеФайла.Записать(ВременныйФайл);
	ИмяФайла = ВременныйФайл;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Файл не существует.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;	
	Попытка
		Если ПустаяСтрока(Кодировка) Тогда
			ТекстовыйДокумент.Прочитать(ИмяФайла);	
		ИначеЕсли Кодировка = "cpCP866" Тогда
			ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.OEM);
		Иначе
			ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.ANSI); // По умолчанию открываем в "cpCP1251", в т.ч. для перекодировки
		КонецЕсли;
 	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Ошибка открытия файла.'"));
		Возврат Ложь;
	КонецПопытки;
	
	НеобходимаПерекодировка = Кодировка = "cpKOI8" ИЛИ Кодировка = "cpISO8859";

	Попытка
		Если Разделитель = Неопределено Тогда
			СимволТабуляции = ?(нРег(ВыбФайл.Расширение)=".sst",";",Символы.Таб); 
		Иначе
			СимволТабуляции = Разделитель;
		КонецЕсли;
		ТабличныйДокумент.Очистить();
		Для ТекущаяСтрока = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
			ТекущаяКолонка = 0;
			Для Каждого Значение Из РазложитьСтрокуВМассивПодстрок(ТекстовыйДокумент.ПолучитьСтроку(ТекущаяСтрока),
																										СимволТабуляции) Цикл
				ТекущаяКолонка = ТекущаяКолонка + 1;
				
				Текст = Значение;
				ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Текст;
			КонецЦикла;
		КонецЦикла;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Ошибка открытия файла.'"));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось удалить временный файл'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ПрочитатьТабличныйДокументИзТекста()

// Функция считывает в табличный документ данные из файла в формате dBase III (*.dbf).
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент	- ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - Строка				- Имя файла в формате TXT, из которого необходимо прочитать данные
//  ИмяБезРасширения   - Строка				- Имя файла в формате TXT, из которого необходимо прочитать данные.
//
// Возвращаемое значение:
//  Булево	-	Истина, если файл прочитан, Ложь - иначе.
//
Функция ПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент, ИмяБезРасширения, АдресВоВременномХранилище, Кодировка)
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ВременныйФайл = КаталогВременныхФайлов() + "testUA.dbf";
	ДанныеФайла.Записать(ВременныйФайл);
	ИмяФайла = ВременныйФайл;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Файл не существует.'"));
		Возврат Ложь;
	КонецЕсли;
	
	XBase  = Новый XBase;
	// Если кодировка установлена в Авто, по умолчанию открываем в DOS.
	XBase.Кодировка = КодировкаXBase.OEM;	
	
	// выполним проверку превышения длины имени файла > 8 символов
	Если СтрДлина(ИмяБезРасширения) > 8 Тогда
		Попытка
			ИмяВременногоФайла = КаталогВременныхФайлов() + "tempUA.dbf";
			КопироватьФайл(ИмяФайла, ИмяВременногоФайла);
			ИмяЗагружаемогоФайла = ИмяВременногоФайла;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Невозможно создать временный файл.'"));
			Возврат Ложь;
		КонецПопытки;
	Иначе
		ИмяЗагружаемогоФайла = ИмяФайла;
	КонецЕсли;
	
	Попытка
		XBase.ОткрытьФайл(ИмяЗагружаемогоФайла);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Ошибка открытия файла.'"));
		Возврат Ложь;
	КонецПопытки;
	
	Если Кодировка = "cpCP866" Тогда
		XBase.Кодировка = КодировкаXBase.OEM;
	ИначеЕсли НЕ ПустаяСтрока(Кодировка) Тогда
		XBase.Кодировка = КодировкаXBase.ANSI; // В т.ч. для перекодировки
	КонецЕсли;
	НеобходимаПерекодировка = Кодировка = "cpKOI8" ИЛИ Кодировка = "cpISO8859";
	
	ТабличныйДокумент.Очистить();
	ТекущаяСтрока = 1;
	
	ТекущаяКолонка = 0;
	Для каждого Поле Из XBase.поля Цикл
		ТекущаяКолонка = ТекущаяКолонка + 1;
		ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") + "C" 
			+ Формат(ТекущаяКолонка, "ЧГ=")).Текст = Поле.Имя;
	КонецЦикла;
	
	Попытка 
		Рез = XBase.Первая();
		Пока НЕ XBase.ВКонце() Цикл
			ТекущаяСтрока = ТекущаяСтрока + 1;
			
			ТекущаяКолонка = 0;
			Для каждого Поле Из XBase.поля Цикл
				ТекущаяКолонка = ТекущаяКолонка + 1;
				
				Текст = XBase.ПолучитьЗначениеПоля(ТекущаяКолонка - 1);
				ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") + "C" 
					+ Формат(ТекущаяКолонка, "ЧГ=")).Текст = Текст;
			КонецЦикла;
			
			XBase.Следующая();
		КонецЦикла;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Ошибка открытия файла.'"));
		Возврат Ложь;
	КонецПопытки; 
	
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось удалить временный файл'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // мПрочитатьТабличныйДокументИзDBF()

// Процедура формирует шапку табличного документа, в соответствии с таблицей загружаемых реквизитов.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент	- ТабличныйДокумент, у которого необходимо сформировать шапку.
//
Процедура СформироватьШапкуТабличногоДокумента(СтруктураРеквизитов, ТабличныйДокумент) 
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	
	Таблица = СтруктураРеквизитов.ТаблицаЗагружаемыхРеквизитов.Скопировать();
	Колонки = СтруктураРеквизитов.Колонки;
	
	Попытка
		Таблица.Сортировать("НомерКолонки");
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось сортировать по номеру колонки'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Для каждого КлючИЗначение Из Колонки Цикл
		ЗагружаемыйРеквизит = КлючИЗначение.Значение;
		НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
		Если НЕ ЗагружаемыйРеквизит.Пометка Или НомерКолонки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗагружаемыйРеквизит.ШиринаКолонки = 0 Тогда
			
			ШиринаКолонки = 40;
			Если ЗагружаемыйРеквизит.ОписаниеТипов.Типы().Количество() = 1 Тогда
				ПервыйТип = ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[0];
				Если ПервыйТип = Тип("Строка") Тогда
					Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина = 0 Тогда
						ШиринаКолонки = 80;
					Иначе
						ШиринаКолонки = Мин(Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина,10),80);
					КонецЕсли;
				ИначеЕсли ПервыйТип = Тип("Число") Тогда
					ШиринаКолонки = Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.Разрядность,10);
				ИначеЕсли ПервыйТип = Тип("Булево") Тогда
					ШиринаКолонки = 10;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ШиринаКолонки = ЗагружаемыйРеквизит.ШиринаКолонки;
		КонецЕсли;
		
		Область = ТабличныйДокумент.Область("R1C"+НомерКолонки);
		БылТекст = НЕ ПустаяСтрока(Область.Текст);
		Область.Текст       = ?(БылТекст,Область.Текст + Символы.ПС,"") + ЗагружаемыйРеквизит.ПредставлениеРеквизита;
		Область.Расшифровка = ЗагружаемыйРеквизит.ИмяРеквизита;
		Область.Обвести(Линия, Линия, Линия, Линия);
		
		ОбластьКолонки = ТабличныйДокумент.Область("C"+НомерКолонки);
		ОбластьКолонки.ШиринаКолонки = ?(БылТекст,Макс(ОбластьКолонки.ШиринаКолонки,ШиринаКолонки),ШиринаКолонки);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьШапкуТабличногоДокумента()

// Функция  заполнения номенклатуры в таблице соответствия табличного документа
// сообщает об ошибках и устанавливает комментарии к ошибочным ячейкам.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент	- ТабличныйДокумент, у которого необходимо сформировать шапку
//  НомерСтроки       - Число				- Число, номер строки табличного документа
//  ТекстыЯчеек    	  - Массив				- Возвращает массив текстов ячеек строки.
//
// Возвращаемое значение:
//  Структура	- Структура, ключ - Имя загружаемого реквизита, Значение - Значение загружаемого реквизита.
//
Функция ПолучитьСтрокуТаблицыСоответствия(ТабличныйДокумент, НомерСтроки, СтруктураПараметров, ТекстыЯчеек = Неопределено, КоличествоОшибок = 0)
	
	Если НомерСтроки < 1 Тогда	
		ТекстСообщения = НСтр("ru = 'Первая строка данных табличного документа должна быть больше нуля.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаТаблицыСоответствия = Новый Структура;
	ТекстыЯчеек = Новый Массив;
	ТекстыЯчеек.Добавить(Неопределено);
	
	Для к = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		ТекстыЯчеек.Добавить(СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(К,"ЧГ=")).Текст));
	КонецЦикла;
	
	НайденнаяСтрока =  СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Найти("Номенклатура","ПредставлениеРеквизита"); 		
	
	Если НайденнаяСтрока = Неопределено ИЛИ НЕ НайденнаяСтрока.Пометка Тогда	
		ТекстСообщения = НСтр("ru = 'Не отмечен реквизит номенклатура.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если НайденнаяСтрока.НомерКолонки=0 Тогда
		ТекстСообщения = НСтр("ru = 'Не указан номер колонки номенклатура.'");
		ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ НайденнаяСтрока.НомерКолонки = 0 Тогда
		
		Область = ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(НайденнаяСтрока.НомерКолонки,"ЧГ="));	
		Представление = Область.Текст;
		Примечание = "";
		
		ЗначенийБольшеОдного = Ложь;
		Если НайденнаяСтрока.РежимЗагрузки = "Вычислять" Тогда
			
			Вычисление = ВычислитьЗначениеЯчейки(НайденнаяСтрока.Выражение,НайденнаяСтрока,Представление, ТекстыЯчеек, НайденнаяСтрока.ЗначениеПоУмолчанию, СтруктураПараметров.флКонтрольЗаполнения, СтруктураПараметров.СсылкаИсточника);
			Если НЕ ПустаяСтрока(Вычисление.ОписаниеОшибки) Тогда
				Результат   = Неопределено;
				Примечание = ""+ Вычисление.ОписаниеОшибки;
			Иначе
				Результат = Вычисление.Результат;
			КонецЕсли;
			
		ИначеЕсли ПустаяСтрока(Представление) Тогда
			Результат = Неопределено;
		Иначе
			НайденныеЗначения = ЗагрузкаИзЭлектронныхДокументовОтраслеваяСпецификаСервер.ПолучитьЗначенияПоПроизводителю(ТабличныйДокумент,
																															ТекстыЯчеек,
																															Примечание,
																															Представление,
																															НайденнаяСтрока,
																															НомерСтроки,
																															СтруктураПараметров);
			
			Если НайденныеЗначения.Количество() = 0 Тогда
				Примечание = НСтр("ru = 'Не найден'")+?(Примечание = "","", Символы.ПС+Примечание);
				Результат = Неопределено;
			ИначеЕсли НайденныеЗначения.Количество() = 1 Тогда
				Результат = НайденныеЗначения[0];
			Иначе
				ЗначенийБольшеОдного = Истина;
				Примечание = НСтр("ru = 'Не однозначное представление. Вариантов:'") + " "+НайденныеЗначения.Количество()
					+?(Примечание = "","", Символы.ПС+Примечание);
				Нашли = Ложь;
				НашлиЗначениеПоУмолчанию = Ложь;
				Для каждого НайденноеЗначение Из НайденныеЗначения Цикл
					Если НайденноеЗначение = Область.Расшифровка Тогда
						Нашли = Истина;
						Прервать;
					КонецЕсли;
					Если НайденноеЗначение = НайденнаяСтрока.ЗначениеПоУмолчанию Тогда
						НашлиЗначениеПоУмолчанию = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ Нашли Тогда
					НайденноеЗначение = Справочники.Номенклатура.ПустаяСсылка();
					Если НашлиЗначениеПоУмолчанию Тогда
						НайденноеЗначение = НайденнаяСтрока.ЗначениеПоУмолчанию;
					Иначе
						Для Каждого Значение Из НайденныеЗначения Цикл
							Если НЕ Значение.ЭтоГруппа Тогда
								НайденноеЗначение = Значение;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				Результат = НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = НайденнаяСтрока.ЗначениеПоУмолчанию;
		КонецЕсли;
		
		СтрокаТаблицыСоответствия.Вставить("Представление",Представление);
		СтрокаТаблицыСоответствия.Вставить("Результат",Результат);
		СтрокаТаблицыСоответствия.Вставить("ЗначенийБольшеОдного",ЗначенийБольшеОдного);
		
		Область.Расшифровка = Результат;
		Область.Примечание.Текст = Примечание;
		Если ЗначенийБольшеОдного Тогда
			Область.ЦветФона = WebЦвета.ГолубойСоСтальнымОттенком;
		КонецЕсли;
	КонецЕсли;
		
	Возврат СтрокаТаблицыСоответствия;
	
КонецФункции // ПолучитьСтрокуТаблицыСоответствия()

// Функция возвращает части представления даты.
//
// Параметры:
//  Представление - Строка	- Представление даты.
//
// Возвращаемое значение:
//  Массив	- Массив частей даты
//
Функция ПолучитьЧастиПредставленияДаты(ЗНАЧ Представление)
	
	МассивЧастей = Новый Массив;
	НачалоЦифры = 0;
	Для к = 1 По СтрДлина(Представление) Цикл
		
		Символ = Сред(Представление, к ,1);
		ЭтоЦифра = Символ >= "0" И Символ <= "9";
		
		Если ЭтоЦифра Тогда
			
			Если НачалоЦифры = 0 Тогда
				НачалоЦифры = к;
			КонецЕсли;
			
		Иначе
			
			Если НЕ НачалоЦифры = 0 Тогда
				МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры, к - НачалоЦифры)));
			КонецЕсли;
			
			НачалоЦифры = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НачалоЦифры = 0 Тогда
		МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры)));
	КонецЕсли;
	
	Возврат МассивЧастей;
	
КонецФункции //ПолучитьЧастиПредставленияДаты()

// Функция приводит строковое представление даты к его значению.
//
// Параметры:
//  Представление - Строка			- Представление числа.
//  ОписаниеТипов - ОписаниеТипов	- Допустимое описание типов значения типа дата.
//  Примечание    - Строка			- Примечание (необязательный).
//
// Возвращаемое значение:
//  Дата 		- Значение типа дата.
//
Функция ПривестиКДате(Представление, ТипРеквизита, Примечание = "")
	
	Результат = ТипРеквизита.ПривестиЗначение(Представление);
	Если Результат = '00010101' Тогда
		
		МассивЧастей = ПолучитьЧастиПредставленияДаты(Представление);
		Если ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
			
			Попытка
				
				Если МассивЧастей.Количество() = 3 Тогда
					Результат = Дата(1,1,1, МассивЧастей[0],МассивЧастей[1],МассивЧастей[2]);
				ИначеЕсли МассивЧастей.Количество() = 6 Тогда
					Результат = Дата(1,1,1, МассивЧастей[3],МассивЧастей[4],МассивЧастей[5]);
				КонецЕсли;
				
			Исключение
				Примечание = НСтр("ru = 'Неправильный формат даты'");
			КонецПопытки;
			
		ИначеЕсли МассивЧастей.Количество() = 3 ИЛИ МассивЧастей.Количество() = 6 Тогда
			
			Если МассивЧастей[0] >= 1000 Тогда
				Временно = МассивЧастей[0];
				МассивЧастей[0] = МассивЧастей[2];
				МассивЧастей[2] = Временно;
			КонецЕсли;
			
			Если МассивЧастей[2] < 100 Тогда
				МассивЧастей[2] = МассивЧастей[2] + ?(МассивЧастей[2] < 30, 2000,1900);
			КонецЕсли;
			
			Попытка
				Если МассивЧастей.Количество() = 3 ИЛИ ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0]);
				Иначе
					Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0],МассивЧастей[3],МассивЧастей[4],МассивЧастей[5]);
				КонецЕсли;
			Исключение
				Примечание = НСтр("ru = 'Неправильный формат даты'");
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //мПривестиКДате()

// Заполняет настройки колонок по умолчанию для справочника.
//
Процедура ЗаполнитьНастройкиКолонокСправочника(СтруктураПараметров)
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(СтруктураПараметров);
	
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		
		ЗагружаемыйРеквизит = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Код";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Код";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = 
				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		Иначе
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = 
				Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаНаименования > 0 Тогда
		
		ЗагружаемыйРеквизит = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , 
			Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаНаименования));
		
	КонецЕсли;
	
	ЗагружаемыйРеквизит = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "ПометкаУдаления";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Пометка удаления'");
	ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Ложь;
	ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(МассивБулево);
	
	Если МетаданныеИсточника.Владельцы.Количество() > 0 Тогда
		
		ЗагружаемыйРеквизит = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Владелец";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Владелец";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		СтрокаОписанияТипов = "";
			
		Для Каждого ТекВладелец Из МетаданныеИсточника.Владельцы Цикл
			СтрокаОписанияТипов = ?(ПустаяСтрока(СтрокаОписанияТипов),"",СтрокаОписанияТипов + ", ") + ТекВладелец.ПолноеИмя();
		КонецЦикла;
			
		СтрокаОписанияТипов = СтрЗаменить(СтрокаОписанияТипов,".","Ссылка.");
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрокаОписанияТипов);
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Иерархический Тогда
		
		ЗагружаемыйРеквизит = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Родитель";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Родитель";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = 
			Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
		Если МетаданныеИсточника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			ЗагружаемыйРеквизит.ВыборГрупп = "Группы";
		КонецЕсли;
		
		ЗагружаемыйРеквизит = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "ЭтоГруппа";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Это группа'");
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Ложь;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(МассивБулево);
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если НЕ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ЗагружаемыйРеквизит                        = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			Если Реквизит.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
				ЗагружаемыйРеквизит.ВыборГрупп = "Группы";
			ИначеЕсли  Реквизит.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы Тогда
				ЗагружаемыйРеквизит.ВыборГрупп = НСтр("ru = 'Группы и элементы'");
			КонецЕсли;
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = 
				НЕ Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
		ЗначениеСостава = Реквизит.Состав.Найти(МетаданныеИсточника);
		Если ЗначениеСостава=Неопределено 
			ИЛИ (НЕ ЗначениеСостава.Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда
			
			Продолжить;
		КонецЕсли;
		ЗагружаемыйРеквизит                        = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		Если Реквизит.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
			ЗагружаемыйРеквизит.ВыборГрупп = "Группы";
		ИначеЕсли  Реквизит.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы Тогда
			ЗагружаемыйРеквизит.ВыборГрупп = НСтр("ru = 'Группы и элементы'");
		КонецЕсли;
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = НЕ Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Реквизит.Тип;
	КонецЦикла;
	
	ДополнитьДополнительныеРеквизитыВТаблицуРеквизитов(МетаданныеИсточника, СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов, СтруктураПараметров.ДополнительныеРеквизитыПоТипуНоменклатуры, СтруктураПараметров.ЗагружатьДополнительныеРеквизитыИСведения, СтруктураПараметров.ДополнительныеРеквизитыИСведенияТолькоОбщие);

	Для Каждого ЗагружаемыйРеквизит Из СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.ОписаниеТипов = ЗагружаемыйРеквизит.ДоступноеОписаниеТипов;
	КонецЦикла;
	
	Для Каждого ЗагружаемыйРеквизит Из СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит, СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если СтрНайти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли СтрНайти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
	
	
КонецПроцедуры // ЗаполнитьНастройкиКолонокСправочника()

// Заполняет настройки колонок по умолчанию для регистра сведений.
//
Процедура ЗаполнитьНастройкиКолонокРегистраСведений(СтруктураПараметров)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(СтруктураПараметров);
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ МетаданныеИсточника.ПериодичностьРегистраСведений = 
			Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		ЗагружаемыйРеквизит = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Период";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Период";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ПолеПоиска           = Истина;
		
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Дата", , , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
		ЗагружаемыйРеквизит                        = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Измерения[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
		ЗагружаемыйРеквизит                        = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Ресурсы[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для Каждого ЗагружаемыйРеквизит Из СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.ОписаниеТипов = ЗагружаемыйРеквизит.ДоступноеОписаниеТипов;
	КонецЦикла;
	
	Для Каждого ЗагружаемыйРеквизит Из СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит, СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если СтрНайти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли СтрНайти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
		ЗагружаемыйРеквизит.РежимПоиска = НСтр("ru = 'По равному значению'");
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНастройкиКолонокРегистраСведений()

// Заполняет настройки колонок по умолчанию для табличной части.
//
Процедура ЗаполнитьНастройкиКолонокТабличнойЧасти(СтруктураПараметров)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(СтруктураПараметров);
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеИсточника) Тогда
		Для Каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
			ЗагружаемыйРеквизит                        = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Реквизит.Тип;
			ЗагружаемыйРеквизит.ОписаниеТипов          = Реквизит.Тип;
		КонецЦикла;
		Для Каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
			ЗагружаемыйРеквизит                        = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Реквизит.Тип;
			ЗагружаемыйРеквизит.ОписаниеТипов          = Реквизит.Тип;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Реквизит.Тип;
		ЗагружаемыйРеквизит.ОписаниеТипов          = Реквизит.Тип;
	КонецЦикла;
	
	Для Каждого ЗагружаемыйРеквизит Из СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит, СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если СтрНайти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
			ИначеЕсли СтрНайти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
			Иначе
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
			КонецЕсли;
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
		ЗагружаемыйРеквизит.РежимПоиска = НСтр("ru = 'По равному значению'");
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНастройкиКолонокТабличнойЧасти()

// Функция обрабатывает событие "После добавления строки",
// определенное пользователем в форме редактирования событий.
//
// Параметры:
//  Объект      	- ТабличныйДокумент	- Записываемый объект
//  ТекущиеДанные  	- Структура			- Структура загруженных значений
//  ТекстыЯчеек    	- Массив			- Массив текстов ячеек строки.
//
// Возвращаемое значение:
//  Булево			- Истина, если в событие "После добавления строки" не был установлен Отказ, Ложь - иначе.
//
Функция ОбработатьСобытиеПослеДобавленияСтроки(Объект, ТекущиеДанные, ТекстыЯчеек, СтруктураПараметров)
	
	Попытка
		
		СсылкаИсточника = СтруктураПараметров.СсылкаИсточника;
		ТаблицаЗагружаемыхРеквизитов = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов;
		ТаблицаДополнительныхПараметров = СтруктураПараметров.ТаблицаДополнительныхПараметров;
		
		Выполнить(СтруктураПараметров.ПослеДобавленияСтроки);
		
		// Заполняем коэффициент, если он не был загружен
		Если ЕстьРеквизитТЧОбъекта("Коэффициент", Объект.Метаданные(), СтруктураПараметров.ТабличнаяЧастьИсточника)
			И ЕстьРеквизитТЧОбъекта("ЕдиницаИзмерения", Объект.Метаданные(), СтруктураПараметров.ТабличнаяЧастьИсточника)
			И ТекущиеДанные.Коэффициент = 0
			И ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения) Тогда
			
			ТекущиеДанные.Коэффициент = ТекущиеДанные.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
		// Рассчитаем количество
		Если ЕстьРеквизитТЧОбъекта("Количество", Объект.Метаданные(), СтруктураПараметров.ТабличнаяЧастьИсточника)
		   И ЕстьРеквизитТЧОбъекта("КоличествоУпаковок", Объект.Метаданные(), СтруктураПараметров.ТабличнаяЧастьИсточника)Тогда
			
			Если ТекущиеДанные.КоличествоУпаковок<>0 Тогда
				Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
					ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок * ТекущиеДанные.Упаковка.Коэффициент;
				Иначе
					ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок;
				КонецЕсли;
			ИначеЕсли ТекущиеДанные.Количество<>0 Тогда
				Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
					ТекущиеДанные.КоличествоУпаковок = ТекущиеДанные.Количество / ТекущиеДанные.Упаковка.Коэффициент;
				Иначе
					ТекущиеДанные.КоличествоУпаковок = ТекущиеДанные.Количество;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Рассчитаем цену и сумму в строке
		Если ЕстьРеквизитТЧОбъекта("Цена", Объект.Метаданные(), СтруктураПараметров.ТабличнаяЧастьИсточника) Тогда
			Если ЕстьРеквизитТЧОбъекта("Сумма", Объект.Метаданные(), СтруктураПараметров.ТабличнаяЧастьИсточника) Тогда
				// Если сумма не заполнена, а цена заполнена, то рассчитаем сумму по цене
				Если ТекущиеДанные.Цена<>0 Тогда
					Если ТекущиеДанные.Количество = 0 Тогда
						ТекущиеДанные.Сумма = ТекущиеДанные.Цена;
					Иначе
						ТекущиеДанные.Сумма = Окр(ТекущиеДанные.Цена * ТекущиеДанные.Количество, 2);
					КонецЕсли;
					
				// Если сумма заполнена, а цена - нет, то рассчитаем цену от суммы.
				ИначеЕсли ТекущиеДанные.Сумма<>0 Тогда
					Если ТекущиеДанные.Количество = 0 Тогда
						ТекущиеДанные.Цена = ТекущиеДанные.Сумма;
					Иначе
						ТекущиеДанные.Цена = Окр(ТекущиеДанные.Сумма / ТекущиеДанные.Количество, 2);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Рассчитаем НДС
		Если ЕстьРеквизитТЧОбъекта("СтавкаНДС", Объект.Метаданные(), СтруктураПараметров.ТабличнаяЧастьИсточника)
			И ЕстьРеквизитТЧОбъекта("Номенклатура", Объект.Метаданные(), СтруктураПараметров.ТабличнаяЧастьИсточника)
			И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			
			Если (ТекущиеДанные.СтавкаНДС = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СтавкаНДС)) Тогда
				
				ТекущиеДанные.СтавкаНДС = ТекущиеДанные.Номенклатура.СтавкаНДС;
				
			КонецЕсли;
			
			// Рассчитаем сумму НДС
			Если ЕстьРеквизитТЧОбъекта("СуммаНДС", Объект.Метаданные(), СтруктураПараметров.ТабличнаяЧастьИсточника) Тогда
				
				ПроцентНДС = ТекущиеДанные.СтавкаНДС.Ставка;
				ЕстьРеквизитЦенаВключаетНДС = Ложь;
				
				Если ЕстьРеквизит(Объект, "ЦенаВключаетНДС") Тогда
					ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
					ЕстьРеквизитЦенаВключаетНДС = Истина;
				ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
					ЦенаВключаетНДС = Объект.ТипЦен.ЦенаВключаетНДС;
					ЕстьРеквизитЦенаВключаетНДС = Истина;
				КонецЕсли;
				
				Если ЕстьРеквизитЦенаВключаетНДС Тогда
					
					Если ТекущиеДанные.Сумма = 0 И ТекущиеДанные.СуммаВсего <> 0 Тогда
						
						Если ЦенаВключаетНДС Тогда
							ТекущиеДанные.Сумма = ТекущиеДанные.СуммаВсего;
						Иначе
							ТекущиеДанные.Сумма = ТекущиеДанные.СуммаВсего / (1 + ПроцентНДС / 100);
						КонецЕсли;
						
						Если ТекущиеДанные.Количество = 0 Тогда
							ТекущиеДанные.Цена = ТекущиеДанные.Сумма;
						Иначе
							ТекущиеДанные.Цена = Окр(ТекущиеДанные.Сумма / ТекущиеДанные.Количество, 2);
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЦенаВключаетНДС Тогда
						ТекущиеДанные.СуммаНДС = ТекущиеДанные.Сумма * ПроцентНДС / (100 + ПроцентНДС);
						ТекущиеДанные.СуммаВсего = ТекущиеДанные.Сумма;
					Иначе
						ТекущиеДанные.СуммаНДС = ТекущиеДанные.Сумма * ПроцентНДС / 100;
						ТекущиеДанные.СуммаВсего = ТекущиеДанные.Сумма + ТекущиеДанные.СуммаНДС;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ОбработатьСобытиеПослеДобавленияСтроки()

// Функция выполняет проверку символа
//
// Параметры:
//	Символ - Строка
//
// Возвращаемое значение:
//	Булево - Истина - Это буква
//
Функция ЭтоБуква (Символ)
	
	Код = КодСимвола(Символ);
	
	Если (Код<=47) ИЛИ (Код>=58 И Код<=64) ИЛИ (Код>=91 И Код<=96)  ИЛИ (Код>=123 И Код<=126) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция записывает объект в информационную базу данных, используя
// события определенные пользователем в форме редактирования событий.
//
// Параметры:
//  Объект      - ДокументСсылка	- Записываемый объект
//  ТекстыЯчеек - Массив			- Массив текстов ячеек, загружаемой строки.
//
// Возвращаемое значение:
//  Булево		- Результат
//
Функция ЗаписатьОбъект(Объект, СтруктураПараметров, ТекстыЯчеек = Неопределено)
	
	Отказ = Ложь;
	НачатьТранзакцию();
	Попытка
		Объект.ОбменДанными.Загрузка=Истина;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка изменения параметров обмена данными.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки; 
	Если НЕ ПустаяСтрока(СтруктураПараметров.ПередЗаписьюОбъекта) Тогда
		Попытка
			Выполнить(СтруктураПараметров.ПередЗаписьюОбъекта);
			Если Отказ Тогда
				ОписаниеОшибки = "";//Установлен отказ перед записью объекта
			КонецЕсли;
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	// Если это загрузка не в регистр сведений, то пытаемся установить код.
	Если (НЕ Отказ) И (СтруктураПараметров.РежимЗагрузки<>2) Тогда
		Если ЕстьРеквизит(Объект, "Код") Тогда
			Код = Объект.Код;
			Попытка
				Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
					Объект.УстановитьНовыйКод("");
				КонецЕсли;
				Объект.Записать();
			Исключение
				Отказ = Истина;
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ И НЕ ПустаяСтрока(СтруктураПараметров.ПриЗаписиОбъекта) Тогда
		Попытка
			Выполнить(СтруктураПараметров.ПриЗаписиОбъекта);
			Если Отказ Тогда
				ОписаниеОшибки = "";//Установлен отказ при записи объекта
			КонецЕсли;
			
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ Отказ  Тогда
		Попытка
			Объект.Записать();
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли; 	
	
	Если НЕ Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		ОтменитьТранзакцию();
	КонецЕсли;
	   
	Если Не Отказ Тогда
		
		ЕстьДопРеквизитыИСведения = Объект.ДополнительныеСвойства.Свойство("ДополнительныеРеквизитыИСведенияДляЗагрузки")
			И (УправлениеСвойствами.ИспользоватьДопРеквизиты(Объект) ИЛИ УправлениеСвойствами.ИспользоватьДопСведения(Объект));
		
		Если ЕстьДопРеквизитыИСведения Тогда
			
			// дополнительные сведения
			МассивСведений = Объект.ДополнительныеСвойства.ДополнительныеРеквизитыИСведенияДляЗагрузки.НайтиСтроки(Новый Структура("ЭтоСведение", Истина));
			Для Каждого СтрокаДопПараметров Из МассивСведений Цикл
				Попытка
					Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
					Набор.Отбор.Объект.Установить(Объект.Ссылка);
					Набор.Отбор.Свойство.Установить(СтрокаДопПараметров.СсылкаРеквизита);
					Набор.Прочитать();
					Если Набор.Количество() = 0 Тогда
						Запись = Набор.Добавить();
						Запись.Свойство = СтрокаДопПараметров.СсылкаРеквизита;
						Запись.Значение = СтрокаДопПараметров.Результат;
						Запись.Объект   = Объект.Ссылка;
					Иначе
						Набор[0].Значение = СтрокаДопПараметров.Результат;
					КонецЕсли;
					Набор.Записать();
				Исключение
					
					Событие = НСтр("ru = 'Загрузка из электронных документов.Перенос дополнительных сведений'",
						ОбщегоНазначения.КодОсновногоЯзыка());
					ОписаниеОшибки = НСтр("ru = 'Не удалось записать дополнительные сведения:'")
						+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,, Объект.Ссылка, ОписаниеОшибки);
					
				КонецПопытки
			КонецЦикла;
			
			// Дополнительные реквизиты
			Попытка
				ТаблицаДопРеквизитов = Объект.ДополнительныеРеквизиты.Выгрузить();
			Исключение
				ТаблицаДопРеквизитов = Неопределено;
			КонецПопытки;
			
			Если ТаблицаДопРеквизитов<>Неопределено Тогда
				МассивРеквизитов = Объект.ДополнительныеСвойства.ДополнительныеРеквизитыИСведенияДляЗагрузки.НайтиСтроки(Новый Структура("ЭтоСведение", Ложь));
				Для Каждого СтрокаДопПараметров Из МассивРеквизитов Цикл
					Попытка
						СтрокаСвойства = ТаблицаДопРеквизитов.Найти(СтрокаДопПараметров.СсылкаРеквизита, "Свойство");
						Если СтрокаСвойства = Неопределено Тогда
							СтрокаСвойства = ТаблицаДопРеквизитов.Добавить();
						КонецЕсли;
						СтрокаСвойства.Свойство = СтрокаДопПараметров.СсылкаРеквизита;
						СтрокаСвойства.Значение = СтрокаДопПараметров.Результат;
					Исключение
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Ошибка записи дополнительных реквизитов'", ОбщегоНазначения.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки
				КонецЦикла;
				Если ЕстьРеквизит(Объект,,"ДополнительныеРеквизиты") Тогда
					Объект.ДополнительныеРеквизиты.Загрузить(ТаблицаДопРеквизитов);
				КонецЕсли;
				Попытка
					Объект.Записать();
				Исключение
					Отказ = Истина;
					ОписаниеОшибки = ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Объект.ОбменДанными.Загрузка=Ложь;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка изменения параметров обмена данными.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки; 
	
	Возврат НЕ Отказ;
	
КонецФункции // ЗаписатьОбъект()

// Функция записывает объект в информационную базу данных, используя
// события определенные пользователем в форме редактирования событий.
//
// Параметры:
//  Объект      - ДокументСсылка	- Записываемый объект
//  ТекстыЯчеек - Массив			- Массив текстов ячеек, загружаемой строки.
//
// Возвращаемое значение:
//  Булево		- Результат
//
Функция ЗаписатьВРегистр(Объект)
	
	Попытка
		Объект.Записать(Истина);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ЗаписатьВРегистр()

Функция ЕстьРеквизитТЧОбъекта(ИмяРеквизита, МетаданныеОбъекта, ИмяТЧ)

	ТЧ = МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТЧ);
	Если ТЧ = Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Если ТЧ.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

КонецФункции 

Процедура ЗаполнитьТаблицуПриемникаДопРеквизитамиНоменклатуры(
	ТаблицаЗагружаемыхРеквизитов,
	ТипНоменклатуры,
	ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры,
	ТолькоОбщиеДопРеквизитыСведения,
	МетаданныеИмя = Неопределено)
	
	Если Метаданные = Неопределено Тогда
		Имя = "Справочник_Номенклатура";    
	Иначе
		Имя = СтрЗаменить(МетаданныеИмя, ".", "_");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТипыНоменклатуры.Ссылка,
	|	ТипыНоменклатуры.ИспользованиеХарактеристик,
	|	ТипыНоменклатуры.НаборСвойствНоменклатуры,
	|	ТипыНоменклатуры.НаборСвойствХарактеристик,
	|	ТипыНоменклатуры.ВидНоменклатуры
	|ПОМЕСТИТЬ ТипыНоменклатуры
	|ИЗ
	|	Справочник.ТипыНоменклатуры КАК ТипыНоменклатуры
	|ГДЕ
	|	НЕ ТипыНоменклатуры.ЭтоГруппа
	|	И НЕ ТипыНоменклатуры.ПометкаУдаления
	|	%УсловиеТипаНоменклатуры%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка,
	|	ДополнительныеРеквизиты.Свойство,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	1 КАК ДопРеквизитСведение,
	|	1 КАК Сортировка
	|ПОМЕСТИТЬ ДопРеквизитыСведения
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	(ДополнительныеРеквизиты.Ссылка%Родитель% = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.%ИмяОбъекта%) И %ДопНоменклатуры%)
	|	И НЕ ДополнительныеРеквизиты.Ссылка.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Ссылка,
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Свойство.ТипЗначения,
	|	ДополнительныеСведения.Свойство.ЗаполнятьОбязательно,
	|	2,
	|	1 КАК Сортировка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	(ДополнительныеСведения.Ссылка%Родитель% = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.%ИмяОбъекта%) И %ДопНоменклатуры%)
	|	И НЕ ДополнительныеСведения.Ссылка.ЭтоГруппа
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопРеквизитыСведения.Ссылка КАК НаборСвойств,
	|	ДопРеквизитыСведения.Свойство,
	|	ДопРеквизитыСведения.ЗаполнятьОбязательно КАК ОбязательныйДляЗаполнения,
	|	ДопРеквизитыСведения.ДопРеквизитСведение,
	|	ТипыНоменклатуры.Ссылка КАК ТипНоменклатурыНабора,
	|	ДопРеквизитыСведения.ТипЗначения
	|ИЗ
	|	ДопРеквизитыСведения КАК ДопРеквизитыСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипыНоменклатуры КАК ТипыНоменклатуры
	|		ПО ДопРеквизитыСведения.Ссылка = ТипыНоменклатуры.НаборСвойствНоменклатуры
	|%УсловиеТолькоОбщие%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДопРеквизитыСведения.Ссылка,
	|	ДопРеквизитыСведения.Свойство,
	|	ДопРеквизитыСведения.ЗаполнятьОбязательно,
	|	ДопРеквизитыСведения.ДопРеквизитСведение,
	|	NULL,
	|	ДопРеквизитыСведения.ТипЗначения
	|ИЗ
	|	ДопРеквизитыСведения КАК ДопРеквизитыСведения
	|ГДЕ
	|	%ЭтоНоменклатура%";
	
	УсловиеТипаНоменклатуры = ?(ЗначениеЗаполнено(ТипНоменклатуры), "И ТипыНоменклатуры.Ссылка В (&ТипНоменклатуры)", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УсловиеТипаНоменклатуры%",УсловиеТипаНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ДопНоменклатуры%", 
		?(ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры, "Истина","Ложь"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УсловиеТолькоОбщие%", 
		?(ТолькоОбщиеДопРеквизитыСведения, "ГДЕ Ложь","ГДЕ Истина"));		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%", Имя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Родитель%", ?(Имя = "Справочник_Номенклатура", ".Родитель", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЭтоНоменклатура%", ?(Имя = "Справочник_Номенклатура",
		"ДопРеквизитыСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)",
		"ИСТИНА"));
	
	Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	ПромежуточнаяТаблица = Новый ТаблицаЗначений;
	ПромежуточнаяТаблица.Колонки.Добавить("ИмяРеквизита");
	ПромежуточнаяТаблица.Колонки.Добавить("ПредставлениеРеквизита");
	ПромежуточнаяТаблица.Колонки.Добавить("МожетБытьПолемПоиска");
	ПромежуточнаяТаблица.Колонки.Добавить("ДоступноеОписаниеТипов");
	ПромежуточнаяТаблица.Колонки.Добавить("ЭтоДополнительныйРеквизит");
	ПромежуточнаяТаблица.Колонки.Добавить("СсылкаРеквизита");
	ПромежуточнаяТаблица.Колонки.Добавить("ЭтоСведение");
	
	Пока Выборка.Следующий() Цикл
		
		ЗагружаемыйРеквизит                        = ПромежуточнаяТаблица.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = СтрЗаменить("Н"+Строка(Выборка.Свойство.УникальныйИдентификатор()), "-", "");
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Выборка.Свойство.Наименование;
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Ложь;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Выборка.ТипЗначения;
		ЗагружаемыйРеквизит.ЭтоДополнительныйРеквизит = Истина;
		ЗагружаемыйРеквизит.СсылкаРеквизита 	   = Выборка.Свойство;
		ЗагружаемыйРеквизит.ЭтоСведение		 	   = Выборка.Свойство.ЭтоДополнительноеСведение;
	КонецЦикла;
	
	ПромежуточнаяТаблица.Свернуть("ИмяРеквизита, ПредставлениеРеквизита, МожетБытьПолемПоиска,ДоступноеОписаниеТипов,ЭтоДополнительныйРеквизит, СсылкаРеквизита,ЭтоСведение");
	Для Каждого СтрокаПромежуточнойТаблицы Из ПромежуточнаяТаблица Цикл
		НовСтр = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,СтрокаПромежуточнойТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПриемникаДопРеквизитамиХарактеристик(
	ТаблицаЗагружаемыхРеквизитов,
	ТипНоменклатуры,
	ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры,
	ТолькоОбщиеДопРеквизитыСведения)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТипыНоменклатуры.Ссылка,
	|	ТипыНоменклатуры.ИспользованиеХарактеристик,
	|	ТипыНоменклатуры.НаборСвойствНоменклатуры,
	|	ТипыНоменклатуры.НаборСвойствХарактеристик,
	|	ТипыНоменклатуры.ВидНоменклатуры
	|ПОМЕСТИТЬ ТипыНоменклатуры
	|ИЗ
	|	Справочник.ТипыНоменклатуры КАК ТипыНоменклатуры
	|ГДЕ
	|	НЕ ТипыНоменклатуры.ЭтоГруппа
	|	И НЕ ТипыНоменклатуры.ПометкаУдаления
	|	%УсловиеТипаНоменклатуры%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка,
	|	ДополнительныеРеквизиты.Свойство,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	1 КАК ДопРеквизитСведение,
	|	1 КАК Сортировка
	|ПОМЕСТИТЬ ДопРеквизитыСведения
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	(ДополнительныеРеквизиты.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры) И %ДопХарактеристик%)
	|	И НЕ ДополнительныеРеквизиты.Ссылка.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Ссылка,
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Свойство.ТипЗначения,
	|	ДополнительныеСведения.Свойство.ЗаполнятьОбязательно,
	|	2,
	|	1 КАК Сортировка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	(ДополнительныеСведения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры) И %ДопХарактеристик%)
	|	И НЕ ДополнительныеСведения.Ссылка.ЭтоГруппа
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопРеквизитыСведения.Ссылка КАК НаборСвойств,
	|	ДопРеквизитыСведения.Свойство,
	|	ДопРеквизитыСведения.ЗаполнятьОбязательно КАК ОбязательныйДляЗаполнения,
	|	ДопРеквизитыСведения.ДопРеквизитСведение,
	|	ТипыНоменклатуры.Ссылка КАК ТипНоменклатурыНабора,
	|	ДопРеквизитыСведения.ТипЗначения
	|ИЗ
	|	ДопРеквизитыСведения КАК ДопРеквизитыСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипыНоменклатуры КАК ТипыНоменклатуры
	|		ПО ДопРеквизитыСведения.Ссылка = ТипыНоменклатуры.НаборСвойствХарактеристик
	|%УсловиеТолькоОбщие%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДопРеквизитыСведения.Ссылка,
	|	ДопРеквизитыСведения.Свойство,
	|	ДопРеквизитыСведения.ЗаполнятьОбязательно,
	|	ДопРеквизитыСведения.ДопРеквизитСведение,
	|	NULL,
	|	ДопРеквизитыСведения.ТипЗначения
	|ИЗ
	|	ДопРеквизитыСведения КАК ДопРеквизитыСведения
	|ГДЕ
	|	ДопРеквизитыСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие)";
	
	УсловиеТипаНоменклатуры = ?(ЗначениеЗаполнено(ТипНоменклатуры), "И ТипыНоменклатуры.Ссылка В (&ТипНоменклатуры)", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УсловиеТипаНоменклатуры%",УсловиеТипаНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ДопХарактеристик%", 
		?(ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры, "Истина","Ложь"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УсловиеТолькоОбщие%", 
		?(ТолькоОбщиеДопРеквизитыСведения, "ГДЕ Ложь","ГДЕ Истина"));
	
	Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	ПромежуточнаяТаблица = Новый ТаблицаЗначений;
	ПромежуточнаяТаблица.Колонки.Добавить("ИмяРеквизита");
	ПромежуточнаяТаблица.Колонки.Добавить("ПредставлениеРеквизита");
	ПромежуточнаяТаблица.Колонки.Добавить("МожетБытьПолемПоиска");
	ПромежуточнаяТаблица.Колонки.Добавить("ДоступноеОписаниеТипов");
	ПромежуточнаяТаблица.Колонки.Добавить("ЭтоДополнительныйРеквизит");
	ПромежуточнаяТаблица.Колонки.Добавить("СсылкаРеквизита");
	ПромежуточнаяТаблица.Колонки.Добавить("ЭтоСведение");
	
	Пока Выборка.Следующий() Цикл
		
		ЗагружаемыйРеквизит                        = ПромежуточнаяТаблица.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = СтрЗаменить("Х"+Строка(Выборка.Свойство.УникальныйИдентификатор()), "-", "");
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Выборка.Свойство.Наименование;
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Ложь;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Выборка.ТипЗначения;
		ЗагружаемыйРеквизит.ЭтоДополнительныйРеквизит = Истина;
		ЗагружаемыйРеквизит.СсылкаРеквизита 	   = Выборка.Свойство;
		ЗагружаемыйРеквизит.ЭтоСведение		 	   = Выборка.Свойство.ЭтоДополнительноеСведение;
	КонецЦикла;
	
	ПромежуточнаяТаблица.Свернуть("ИмяРеквизита, ПредставлениеРеквизита, МожетБытьПолемПоиска,ДоступноеОписаниеТипов,ЭтоДополнительныйРеквизит, СсылкаРеквизита,ЭтоСведение");
	Для Каждого СтрокаПромежуточнойТаблицы Из ПромежуточнаяТаблица Цикл
		НовСтр = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,СтрокаПромежуточнойТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПустыеСтроки(ТабличныйДокумент)
	
	ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	
	ПустыеСтроки = Новый Массив;
	
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
		
		ВсеЯчейкиПустые = Истина;
		Для НомерКолонки = 1 По ШиринаТаблицы Цикл
			
			Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			Если Не ПустаяСтрока(Ячейка.Текст) Тогда
				ВсеЯчейкиПустые = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсеЯчейкиПустые Тогда
			ПустыеСтроки.Добавить(НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	ВГраница = ПустыеСтроки.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		
		НомерСтроки = ПустыеСтроки[ВГраница - Индекс];
		Область = ТабличныйДокумент.Область(НомерСтроки, , НомерСтроки);
		ТабличныйДокумент.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает информацию по заданному штрихкоду
//
// Параметры:
//  Штрихкод         - Строка			- значение штрих-кода.
//
// Возвращаемое значение:
//  Таблица		- Таблица найденных товаров.
//
Функция ПолучитьШтрихкоды(Штрихкод)
	
	// Создадим запрос по регистру сведений
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШК",Штрихкод);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Штрихкоды.Объект КАК Объект,
	               |	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	               |ИЗ
	               |	РегистрСведений.Штрихкоды КАК Штрихкоды
	               |ГДЕ
	               |	Штрихкоды.Штрихкод = &ШК
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Объект";
	
	Запрос.Текст= ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ПолучитьШтрихкодыШтрихкоды()

Функция ЗагрузитьРеквизитПоНастройке(ИсходныйТабличныйДокумент, НомерСтроки, НастройкаЗагрузки, ТаблицаЗагружаемыхРеквизитов, ТаблицаДополнительныхПараметров, СоответствиеНоменклатуры, МетаданныеДляЗагрузки = Неопределено)
	// подготовим табличный документ с единственной текущей строкой
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ОбластьСтрока = ИсходныйТабличныйДокумент.ПолучитьОбласть("R"+Формат(НомерСтроки,"ЧГ="));
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	// инициализируем параметры, которые считаем из настройки
	СтруктураПараметров = Инициализация();
	СтруктураПараметров.Вставить("СсылкаИсточника", 							Неопределено);
	СтруктураПараметров.Вставить("РежимЗагрузки", 								0);
	СтруктураПараметров.Вставить("ТабличнаяЧастьИсточника", 					"");
	СтруктураПараметров.Вставить("ИмяВидаРегистра", 							"");
	СтруктураПараметров.Вставить("ИмяСправочника", 								"");
	СтруктураПараметров.Вставить("ТабличнаяЧастьДокументаОбъекта",				Неопределено);
	СтруктураПараметров.Вставить("ТЧДокумента",									Неопределено);
	СтруктураПараметров.Вставить("НеСоздаватьНовыхЭлементов",					Ложь);
	СтруктураПараметров.Вставить("НеОбновлятьСуществующиеЭлементы",				Ложь);
	СтруктураПараметров.Вставить("ЗамещатьСуществующиеЗаписи",					Ложь);
	СтруктураПараметров.Вставить("РучнаяНумерацияКолонокТабличногоДокумента",	Ложь);
	СтруктураПараметров.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",		1);
	СтруктураПараметров.Вставить("ФорматДатыСрокаГодности",						"");
	СтруктураПараметров.Вставить("ВсегдаФормироватьНовыеСерии",					Ложь);
	СтруктураПараметров.Вставить("НеФормироватьДопНомерСерии",					Ложь);
	СтруктураПараметров.Вставить("ДействиеСЗагружаемымФайлом",					"");
	СтруктураПараметров.Вставить("флПоискПоПрайсуПоставщика",					Ложь);
	СтруктураПараметров.Вставить("КаталогАрхиваЗагруженныхФайлов",				"");
	СтруктураПараметров.Вставить("СоздаватьПроизводителя",						Ложь);
	СтруктураПараметров.Вставить("ИспользоватьВнешнийМодульПреобразованияФайла",Ложь);
	СтруктураПараметров.Вставить("ОбработкаПреобразования",						Неопределено);
	СтруктураПараметров.Вставить("Кодировка",									"");
	СтруктураПараметров.Вставить("Табуляция",									"");
	СтруктураПараметров.Вставить("ИмяТаблицы",									"");
	СтруктураПараметров.Вставить("ТаблицаДополнительныхПараметров",				ТаблицаДополнительныхПараметров);
	СтруктураПараметров.Вставить("ПередЗаписьюОбъекта",							"");
	СтруктураПараметров.Вставить("ПриЗаписиОбъекта",							"");
	СтруктураПараметров.Вставить("ПослеДобавленияСтроки",						"");
	СтруктураПараметров.Вставить("ТаблицаЗагружаемыхРеквизитов",				ТаблицаЗагружаемыхРеквизитов);
	СтруктураПараметров.Вставить("ИмяВидаРегистра",								"");
	СтруктураПараметров.Вставить("ИмяСправочника",								"");
	СтруктураПараметров.Вставить("ЗагружатьДополнительныеРеквизитыИСведения",	Ложь);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыИСведенияТолькоОбщие",	Ложь);
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыПоТипуНоменклатуры",	Новый СписокЗначений);
	
	// заполним параметры
	ЗаполнитьНастройкиКолонок(НастройкаЗагрузки.НастройкиЗагрузкиВыгрузки.Получить(), СтруктураПараметров, МетаданныеДляЗагрузки);
	// снова установим первую строку принудительно
	СтруктураПараметров.ПерваяСтрокаДанныхТабличногоДокумента = 1;
	
	// дополним нужные параметры для загрузки
	СтруктураПараметров.Вставить("флКонтрольЗаполнения", 						Ложь);
	СтруктураПараметров.Вставить("ОписаниеОшибок", 								"");
	СтруктураПараметров.Вставить("ДопПараметры", 								Неопределено);
	СтруктураПараметров.Вставить("ВладелецСерии", 								Неопределено);
	СтруктураПараметров.Вставить("СоответствиеНоменклатуры", 					СоответствиеНоменклатуры);
	
	Рез = ЗагрузитьДанные(ТабличныйДокумент,СтруктураПараметров, Истина);
	Возврат  Рез;
	
КонецФункции

// Процедура выполняет обработку области табличного документа:
// заполняет расшифровку по представлению ячейки в соответствии со структурой загружаемых реквизитов
// сообщает об ошибке и устанавливает комментарий, если ячейка содержит ошибку.
//
// Параметры:
//  Область 		- ТабличныйДокумент	- Область табличного документа
//  Колонка 		- Структура			- Структура, свойства, в соответствии с которыми необходимо выполнить обработку области
//  ТекущиеДанные  	- Структура			- Структура загруженных значений
//  ТекстыЯчеек    	- Массив			- Массив текстов ячеек строки.
//
Функция ОбработатьОбласть(Область, Колонка, ТекущиеДанные, ТекстыЯчеек, СтруктураПараметров, ДополнительныеРеквизитыИСведения)
	
	Представление = СокрЛП(Область.Текст);
	Примечание = "";
	ЗначенийБольшеОдного = Ложь;
	Если Колонка.РежимЗагрузки = "Вычислять" Тогда
		
		Вычисление = ВычислитьЗначениеЯчейки(Колонка.Выражение,ТекущиеДанные,Представление, ТекстыЯчеек, Колонка.ЗначениеПоУмолчанию,СтруктураПараметров.флКонтрольЗаполнения, СтруктураПараметров.СсылкаИсточника);
		Если НЕ ПустаяСтрока(Вычисление.ОписаниеОшибки) Тогда
			Результат   = Неопределено;
			Примечание = ""+ Вычисление.ОписаниеОшибки;
		Иначе
			Результат = Вычисление.Результат;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Представление) Тогда
		Результат = Неопределено;
	Иначе
		
		НайденныеЗначения = ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные,ТекстыЯчеек,СтруктураПараметров);
		
		Если НайденныеЗначения.Количество() = 0 Тогда
			
			Примечание = НСтр("ru = 'Не найден'") + ?(Примечание = "","", Символы.ПС+Примечание);
			Результат = Неопределено;
			
		ИначеЕсли НайденныеЗначения.Количество() = 1 Тогда
			
			Результат = НайденныеЗначения[0];
			
		Иначе
			ЗначенийБольшеОдного = Истина;
			Примечание = НСтр("ru = 'Не однозначное представление. Вариантов:'") + " " +НайденныеЗначения.Количество()
				+?(Примечание = "","", Символы.ПС+Примечание);
			
			Нашли = Ложь;
			НашлиЗначениеПоУмолчанию = Ложь;
			Для каждого НайденноеЗначение Из НайденныеЗначения Цикл
				Если НайденноеЗначение = Область.Расшифровка Тогда
					Нашли = Истина;
					Прервать;
				КонецЕсли;
				Если НайденноеЗначение = Колонка.ЗначениеПоУмолчанию Тогда
					НашлиЗначениеПоУмолчанию = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ Нашли Тогда
				
				Если НашлиЗначениеПоУмолчанию Тогда
					НайденноеЗначение = Колонка.ЗначениеПоУмолчанию;
				Иначе
					НайденноеЗначение = НайденныеЗначения[0];
				КонецЕсли;
			КонецЕсли;
			Результат = НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Колонка.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если Колонка.ЭтоДополнительныйРеквизит Тогда
		НовСтр 					= ДополнительныеРеквизитыИСведения.Добавить();
		НовСтр.СсылкаРеквизита 	= Колонка.СсылкаРеквизита;
		НовСтр.Результат 		= Результат;
		НовСтр.ЭтоСведение 		= Колонка.ЭтоСведение;
	Иначе
		ТекущиеДанные.Вставить(Колонка.ИмяРеквизита,Результат);
	КонецЕсли;
	
	Область.Расшифровка = Результат;
	Область.Примечание.Текст = Примечание;
	Если ЗначенийБольшеОдного Тогда
		Область.ЦветФона = WebЦвета.ГолубойСоСтальнымОттенком;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Примечание) Тогда
		ТекстСообщения = НСтр("ru = 'Ячейка[%1] (%2): %3'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			Область.Имя, Колонка.ПредставлениеРеквизита, Примечание);
		ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
	КонецЕсли;
	
	Возврат ПустаяСтрока(Примечание);
	
КонецФункции // ОбработатьОбласть()

// Функция вычисляет значение ячейки для режима "Вычислять"
//
// Параметры:
//  Выражение 		- Строка	- Программный код, который необходимо выполнить
//  ТекущиеДанные  	- Структура	- Структура загруженных значений
//  ТекстЯчейки    	- Строка	- Текст текущей ячейки
//  ТекстыЯчеек    	- Массив	- Массив текстов ячеек строки
//  Результат      	- Число		- Результат вычисления.
//
// Возвращаемое значение:
//  Структура		- Структура, содержащая Результат и ОписаниеОшибки.
//
Функция ВычислитьЗначениеЯчейки(Знач Выражение,Знач ТекущиеДанные,Знач ТекстЯчейки, Знач ТекстыЯчеек,Знач Результат, Знач флКонтрольЗаполнения, Знач ДокументОбъект) 
	
	ТекстЯчейки = СокрЛП(ТекстЯчейки);
	ТекстСообщения = "";
	Попытка
		Выполнить(Выражение);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при вычислении выражения %1: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выражение, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
	КонецПопытки;
	
	Возврат Новый Структура("Результат,ОписаниеОшибки",Результат,ТекстСообщения);
	
КонецФункции // ВычислитьЗначениеЯчейки()

// Функция возвращает менеджер по типу значения
//
// Параметры:
//  ТипЗначения - Неопределено	- Тип значения, по которому нужна вернуть менеджер.
//
// Возвращаемое значение:
//  Строка		- Менеджер
//
Функция ПолучитьМенеджераПоТипу(ТипЗначения, СтруктураПараметров)
	
	Если НЕ ТипЗначения = Неопределено Тогда
		Менеджер = СтруктураПараметров.КешМенеджеровПоТипу[ТипЗначения];
		Если Менеджер = Неопределено Тогда
			Для Каждого МенеджерОбъектаМетаданных Из СтруктураПараметров.МенеджерыОбъектовМетаданных Цикл
				Если МенеджерОбъектаМетаданных.Значение.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
					Менеджер = МенеджерОбъектаМетаданных.Значение[Метаданные.НайтиПоТипу(ТипЗначения).Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтруктураПараметров.КешМенеджеровПоТипу.Вставить(ТипЗначения, Менеджер);
		КонецЕсли;
		Возврат Менеджер;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции //ПолучитьМенеджераПоТипу()

// Поиск номенклатуры по прайсу поставщика
//
// Параметры:
//  Текст         - Строка			- значение поиска
//  ИскатьПо      - Строка			- поле поиска
//  Контрагент    - СправочникСсылка.Контрагенты - Владелец прайса
//  Реквизит      - Строка			- реквизит поиска
//  Дополнительно - Структура		- дополнительные параметры поиска.
//
// Возвращаемое значение:
//  Список		- Список найденных товаров.
//
Функция НайтиЗначениеВПрайсеПоставщика(Текст, ИскатьПо, Контрагент, Реквизит, Дополнительно = неопределено, флПоискПоПрайсуПоставщика = Ложь)
	
	Если флПоискПоПрайсуПоставщика И ИскатьПо <> "ор_НомерПоКаталогу" И ИскатьПо <> "ор_МСНК" И ИскатьПо <> "ШтрихКод" И ИскатьПо <> "ор_ЕГК" Тогда
		// проверки
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru= 'Не указан поставщик.'"));
			Возврат Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Текст) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЗначениеПоиска =Лев(СокрЛП(Текст),150) + "%";
		
		// ищем
		Запрос=Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрайсЛисты." 
		+ Реквизит + " КАК " + Реквизит + "
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛисты
		|
		|ГДЕ
		|	ПрайсЛисты.ПрайсЛист.Владелец=&Контрагент
		|	И ПрайсЛисты.Номенклатура <> &ПустаяСсылка
		| И ПрайсЛисты." +?(ИскатьПо="Код","Артикул",ИскатьПо)+" ПОДОБНО &ЗначениеПоиска ";
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Запрос.УстановитьПараметр("ЗначениеПоиска",ЗначениеПоиска);
		Запрос.УстановитьПараметр("ПустаяСсылка",Справочники.Номенклатура.ПустаяСсылка());
		
		РезультатПоиска=Запрос.Выполнить();
		// смотрим, что в результате
		Если РезультатПоиска.Пустой() Тогда
			// ничего не нашли- выходим
			Возврат Неопределено;
		Иначе
			СписокНайденныхТоваров=Новый СписокЗначений();
			СписокНайденныхТоваров.ЗагрузитьЗначения(РезультатПоиска.Выгрузить().ВыгрузитьКолонку(Реквизит));
			// возвращаем первый
			Возврат СписокНайденныхТоваров[0].Значение;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // НайтиНоменклатурыПоПрайсуПоставщика()

#КонецОбласти