#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Системные

// Возвращает номер версии библиотеки подключаемого оборудования.
//
// Возвращаемое значение:
//  Строка.
//
Функция ВерсияБиблиотеки() Экспорт
	
	ВерсияБиблиотекиБПО = "3.2.3.28";
	Возврат ВерсияБиблиотекиБПО;
	
КонецФункции

// Возвращает список доступных типов оборудования.
// 
// Возвращаемое значение:
//   Массив из ПеречислениеСсылка.ТипыПодключаемогоОборудования - Массив доступных типов подключаемого оборудования в конфигурации.
//
Функция ДоступныеТипыОборудования() Экспорт
	
	СписокТиповОборудования = Новый Массив;
	СтандартнаяОбработка = Истина;
	
	МенеджерОборудованияВызовСервераПереопределяемый.ДоступныеТипыОборудования(СписокТиповОборудования, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		СписокТиповОборудования.Очистить();
		Если ОбщегоНазначенияБПО.ИспользуетсяУстройстваВвода() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
		// ++ НеМобильноеПриложение
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт);
		// -- НеМобильноеПриложение     
		КонецЕсли;
		Если ОбщегоНазначенияБПО.ИспользуетсяЧекопечатающиеУстройства() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков);
		КонецЕсли;
		Если ОбщегоНазначенияБПО.ИспользуетсяДисплеиПокупателя() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя);
		КонецЕсли;
		// ++ НеМобильноеПриложение
		Если ОбщегоНазначенияБПО.ИспользуетсяТерминалыСбораДанных() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных);
		КонецЕсли;
		// -- НеМобильноеПриложение     
		Если ОбщегоНазначенияБПО.ИспользуетсяПлатежныеСистемы() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);
		КонецЕсли;
		Если ОбщегоНазначенияБПО.ИспользуетсяВесовоеОборудование() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы);  
		// ++ НеМобильноеПриложение
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток);
		// -- НеМобильноеПриложение     
		КонецЕсли;
		// ++ НеМобильноеПриложение
		Если ОбщегоНазначенияБПО.ИспользуетсяПринтерыЭтикеток() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток);
		КонецЕсли;
		Если ОбщегоНазначенияБПО.ИспользуетсяСчитывательRFID() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID);
		КонецЕсли;
		Если ОбщегоНазначенияБПО.ИспользуетсяУстройствоРаспознавания() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.УстройствоРаспознавания);
		КонецЕсли;
		// -- НеМобильноеПриложение     
	КонецЕсли;
	
	// ++ НеМобильноеПриложение
	УдалитьККМОфлайн = СписокТиповОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.УдалитьККМОфлайн);
	Если УдалитьККМОфлайн <> Неопределено Тогда
		СписокТиповОборудования.Удалить(УдалитьККМОфлайн);
	КонецЕсли;
	
	ФискальныйРегистратор = СписокТиповОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	Если ФискальныйРегистратор <> Неопределено Тогда
		СписокТиповОборудования.Удалить(ФискальныйРегистратор);
	КонецЕсли;
	// -- НеМобильноеПриложение     
	Возврат СписокТиповОборудования;
	
КонецФункции

// Возвращает доступность добавление новых драйверов.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ДоступноДобавлениеНовыхДрайверов() Экспорт
	
#Если МобильноеПриложениеСервер Тогда  
	Результат = Ложь; 
#Иначе
	Результат = Истина;
	ДобавлениеНовыхДрайверовДоступно = Результат; 
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияВызовСервераПереопределяемый.ДоступноДобавлениеНовыхДрайверов(ДобавлениеНовыхДрайверовДоступно, СтандартнаяОбработка);
	Результат = ?(СтандартнаяОбработка, Результат, ДобавлениеНовыхДрайверовДоступно);
#КонецЕсли
	Возврат Результат; 
	
КонецФункции

// Возвращает доступность сетевого оборудования.
//
// Возвращаемое значение:
//  Булево.
//
Функция ДоступноСетевоеОборудование() Экспорт
	
#Если МобильноеПриложениеСервер Тогда    
	Результат = Ложь;
#Иначе
	Результат = Истина;  
	СетевоеОборудованиеДоступно = Результат; 
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияВызовСервераПереопределяемый.ДоступноСетевоеОборудование(СетевоеОборудованиеДоступно, СтандартнаяОбработка);
	Результат = ?(СтандартнаяОбработка, Результат, СетевоеОборудованиеДоступно);
#КонецЕсли
	Возврат Результат; 
	
КонецФункции

// Возвращает доступность инкассации в форме управление фискальным устройством.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ДоступноИнкассацияВУправлениеФискальнымУстройством() Экспорт
	
	Результат = Ложь;
	ИнкассацияДоступна = Результат; 
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияВызовСервераПереопределяемый.ДоступноИнкассацияВУправлениеФискальнымУстройством(ИнкассацияДоступна, СтандартнаяОбработка);
	Результат = ?(СтандартнаяОбработка, Результат, ИнкассацияДоступна);
	Возврат Результат; 
	
КонецФункции

// Ведется учет ИСМП в конфигурации
// 
// Возвращаемое значение:
//  Булево - Ведется учет ИСМП в конфигурации
//
Функция ВедетсяУчетПродукцииИСМП() Экспорт
	
	СтандартнаяОбработка = Истина;
	УчетПродукцииИСМП = Ложь;
	МенеджерОборудованияВызовСервераПереопределяемый.ВедетсяУчетПродукцииИСМП(УчетПродукцииИСМП, СтандартнаяОбработка);
	Результат = ?(Не СтандартнаяОбработка, УчетПродукцииИСМП, Ложь); 
	Возврат Результат;
	
КонецФункции

// Возвращает список доступных типов общедоступного оборудования.
// 
// Возвращаемое значение:
//   Массив из ПеречислениеСсылка.ТипыПодключаемогоОборудования - Массив доступных типов подключаемого оборудования в конфигурации.
//
Функция ДоступныеТипыОбщедоступногоОборудования() Экспорт
	
	СписокТиповОборудования = Новый Массив;
	СтандартнаяОбработка = Истина;
	
	МенеджерОборудованияВызовСервераПереопределяемый.ДоступныеТипыСетевогоОборудования(СписокТиповОборудования, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		СписокТиповОборудования.Очистить();
		Если ОбщегоНазначенияБПО.ИспользуетсяЧекопечатающиеУстройства() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
		КонецЕсли;
		Если ОбщегоНазначенияБПО.ИспользуютсяОблачныеККТ() Тогда
			СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ОблачнаяККТ);
		КонецЕсли;
	КонецЕсли;
	 
	Возврат СписокТиповОборудования;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДрайверов

// Обновить поставляемые драйвера БПО.
//
Процедура ОбновитьПоставляемыеДрайвера() Экспорт
	
	МодулиОбновления = Новый Массив();
	Если ОбщегоНазначенияБПО.ИспользуетсяУстройстваВвода() Тогда
		МодулиОбновления.Добавить(ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеУстройстваВвода"));       
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодулиОбновления.Добавить(ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройства"));       
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяПлатежныеСистемы() Тогда
		МодулиОбновления.Добавить(ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеПлатежныеСистемы"));       
	КонецЕсли;          
	Если ОбщегоНазначенияБПО.ИспользуетсяДисплеиПокупателя() Тогда
		МодулиОбновления.Добавить(ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеДисплеиПокупателя"));       
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяВесовоеОборудование() Тогда
		МодулиОбновления.Добавить(ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеВесовоеОборудование"));       
	КонецЕсли;                          
// ++ НеМобильноеПриложение
	Если ОбщегоНазначенияБПО.ИспользуетсяТерминалыСбораДанных() Тогда
		МодулиОбновления.Добавить(ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеТерминалыСбораДанных"));       
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяПринтерыЭтикеток() Тогда
		МодулиОбновления.Добавить(ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеПринтерыЭтикеток"));       
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяСчитывательRFID() Тогда
		МодулиОбновления.Добавить(ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеСчитывательRFID"));       
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяУстройствоРаспознавания() Тогда
		МодулиОбновления.Добавить(ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеУстройствоРаспознавания"));       
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуютсяОблачныеККТ() Тогда
		МодулиОбновления.Добавить(ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеОблачныеККТ"));       
	КонецЕсли;
// -- НеМобильноеПриложение
	ДрайвераОборудования = НоваяТаблицаПоставляемыхДрайверовОборудования();
	Для Каждого МодульОбновления Из МодулиОбновления Цикл
		МодульОбновления.ОбновитьПоставляемыеДрайвера(ДрайвераОборудования);
	КонецЦикла;
	
	Справочники.ДрайверыОборудования.ПриНачальномЗаполненииЭлементов(ДрайвераОборудования);
	
	УдалитьУстаревшиеДрайвера();
	
КонецПроцедуры

// Обновить установленные драйвера.
//
Процедура ОбновитьУстановленныеДрайвера() Экспорт
	
	// ККТ с передачей данных ОФД
	ОбновитьУстановленныеДрайвераПоТипу(Перечисления.ТипыПодключаемогоОборудования.ККТ);
	// Конец ККТ с передачей данных ОФД.
	
	// Принтеры чеков
	ОбновитьУстановленныеДрайвераПоТипу(Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток);
	// Конец Принтеры чеков.
	
	// Сканеры штрихкода
	ОбновитьУстановленныеДрайвераПоТипу(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
	// Конец Сканеры штрихкода
	
КонецПроцедуры

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования на рабочем месте.
//
// Параметры:
//  РабочееМесто - СправочникСсылка.РабочиеМеста.
//  ДрайверОборудования - СправочникСсылка.ДрайверыОборудования. 
//  Признак - Булево - требуется переустановить драйвер
//
Процедура УстановитьПризнакПереустановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяПереустановка = &ТребуетсяПереустановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяПереустановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяПереустановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Обновить установленные драйвера по справочнику подключаемого оборудования.
//
// Параметры:
//  ТипОборудования - ПеречисленияСсылка.ТипыПодключаемогоОборудования
Процедура ОбновитьУстановленныеДрайвераПоТипу(ТипОборудования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
							|	ПодключаемоеОборудование.Ссылка
							|ИЗ
							|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
							|ГДЕ
							|	(ПодключаемоеОборудование.ТипОборудования = &ТипОборудования)");
							
	Запрос.УстановитьПараметр("ТипОборудования", ТипОборудования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяПереустановка = Истина;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОборудованием

// Возвращает список подключенного в справочнике ПО по установленному отбору
//
// Параметры:
//  Отбор - см. МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор.
//
// Возвращаемое значение:
//  Массив из Структура.
//
Функция СписокОборудования(Отбор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СписокОборудования(Отбор);
	
КонецФункции

// Функция возвращает структуру с данными устройства.
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование.    
//  КодЯзыка - Строка
//
// Возвращаемое значение:
//  Структура - см. Справочники.ПодключаемоеОборудование.ДанныеУстройства
//
Функция ДанныеУстройства(Идентификатор, КодЯзыка = Неопределено) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ДанныеУстройства(Идентификатор, КодЯзыка);
	
КонецФункции

// Функция возвращает по идентификатору устройства его параметры
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПараметрыУстройства(Идентификатор);
	
КонецФункции

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника.
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование.
//  Параметры - Структура - параметры устройства.
//
// Возвращаемое значение:
//  Булево.
//
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыУстройства(Идентификатор, Параметры);
	
КонецФункции

// Функция возвращает структуру с данными драйвера.
//
// Параметры:
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//
// Возвращаемое значение:
//  Структура.
//
Функция ДанныеДрайвераОборудования(ИдентификаторДрайвера) Экспорт
	
	Возврат Справочники.ДрайверыОборудования.ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	
КонецФункции

// Функция возвращает драйвера по типу оборудования
//
// Параметры:
//  ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования - типы подключаемого оборудования.
//  ТолькоДоступные - Булево - признак только доступных драйверов.
//  СнятыеСПоддержкиДрайвера - Булево - признак отображения снятых с поддержки драйверов.
//
// Возвращаемое значение:
//  СписокЗначений.
//
Функция ДрайвераПоТипуОборудования(ТипОборудования, ТолькоДоступные = Истина, СнятыеСПоддержкиДрайвера = Ложь) Экспорт
	
	Возврат Справочники.ДрайверыОборудования.ДрайвераПоТипуОборудования(ТипОборудования, ТолькоДоступные, СнятыеСПоддержкиДрайвера);
	
КонецФункции

// Функция создает запись в справочнике о новом драйвере.
//
// Параметры:
//  ПараметрыСоздания - Структура - параметры создания оборудования.
//
// Возвращаемое значение:
//  СправочникСсылка.ПодключаемоеОборудование.
//
Функция НовыйДрайверОборудования(ПараметрыСоздания) Экспорт
	
	Возврат Справочники.ДрайверыОборудования.СоздатьНовыйЭлемент(ПараметрыСоздания);
	
КонецФункции

#КонецОбласти

#Область ЕМРЦ

// Получает цену ЕМРЦ из данных информационной базы на дату.
//
// Параметры:
//  ОсобенностьУчета - Перечисления.ВидыМаркированнойПродукцииБПО - тип маркированной продукции для проверки цены.
//  Период - Дата - дата проверки цены.
//  ЕМРЦ - Число - значение ЕМРЦ.
//
Процедура ПолучитьЦенуЕМРЦ(ОсобенностьУчета, Период = Неопределено, ЕМРЦ = 0) Экспорт
	// ++ Локализация
	РегистрыСведений.ЗначенияЕМРЦ.ПолучитьЦенуЕМРЦ(Перечисления.ВидыМаркированнойПродукцииБПО.Табак, Период, ЕМРЦ);
	// -- Локализация
КонецПроцедуры

#КонецОбласти

#Область ПодключениеОборудования

// Добавить на форму список подключаемого оборудования
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ТипыОборудования - см. МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования
Процедура ПриСозданииНаСервере(Форма, ТипыОборудования) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудованиеНаФорме(Форма);
	Если ЕстьПодключаемоеОборудование() Тогда
		ПодключаемоеОборудование.ТипыПО = ТипыОборудования;
		Отбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		Отбор.ТипыПО = ТипыОборудования;
		РабочееМестоКлиентаНаСервере = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		Если ЗначениеЗаполнено(РабочееМестоКлиентаНаСервере) Тогда
			ПодключаемоеОборудование.СписокОборудования = СписокОборудования(Отбор);
		Иначе
			ПодключаемоеОборудование.ТребуетсяЗапросСпискаОборудованияНаКлиенте = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет существует ли в базе подключаемое оборудование, и возвращает 
// Истина если в справочнике Подключаемое оборудование отсутствует хотя бы один элемент.
//
// Возвращаемое значение:
//  Булево
Функция ЕстьПодключаемоеОборудование() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование";
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

#Область Интеграция

// Устарела: следует использовать ИнтеграцияПодсистемБПО.ПриОпределенииНастроекРегламентныхЗаданий.
// Вызывается из процедуры РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
// для установки доступности регламентного задания, определяет зависимость от функциональных опций.
// 
// Параметры:
//  Настройки - ТаблицаЗначений
//  ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки, ФункциональнаяОпция) Экспорт
	
	ИнтеграцияПодсистемБПО.ПриОпределенииНастроекРегламентныхЗаданий(Настройки, ФункциональнаяОпция);
	
КонецПроцедуры

// Устарела: следует использовать ИнтеграцияПодсистемБПО.ПриПолученииСпискаШаблонов.
// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ИнтеграцияПодсистемБПО.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	
КонецПроцедуры

// Устарела: следует использовать ИнтеграцияПодсистемБПО.ПриОпределенииПсевдонимовОбработчиков.
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	ИнтеграцияПодсистемБПО.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Структура типа оборудования  
//
// Параметры:
//   ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования - 
// Возвращаемое значение:
//   Структура
//
Функция ПараметрыТипыОборудования(ТипОборудования) Экспорт
	
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	
	ТипыОборудования.СканерШтрихкода          = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода;
	ТипыОборудования.СчитывательМагнитныхКарт = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт;
	ТипыОборудования.ККТ                      = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ;
	ТипыОборудования.ФискальныйРегистратор    = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор;
	ТипыОборудования.ПринтерЧеков             = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков;
	ТипыОборудования.ДисплейПокупателя        = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	ТипыОборудования.ТерминалСбораДанных      = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных;
	ТипыОборудования.ЭквайринговыйТерминал    = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	ТипыОборудования.ЭлектронныеВесы          = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы;
	ТипыОборудования.ВесыСПечатьюЭтикеток     = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	ТипыОборудования.ПринтерЭтикеток          = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток;
	ТипыОборудования.СчитывательRFID          = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID;   
	ТипыОборудования.УстройствоРаспознавания  = ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.УстройствоРаспознавания;
	
	Возврат ТипыОборудования;
	
КонецФункции

// Формирования массива типов оборудования
// 
// Параметры:
//   ТипыОборудования - Структура, Массив, Строка - тип оборудования.
// Возвращаемое значение:
//   Массив - ПеречислениеСсылка.ТипыПодключаемогоОборудования -  
//           
Функция ПолучитьТипыОборудования(ТипыОборудования) Экспорт
	
	МассивТипов = Новый Массив();
	
	Если ТипЗнч(ТипыОборудования) = Тип("Строка") Тогда    
		ТипыВМассиве = СтрРазделить(ТипыОборудования, ",", Ложь);
		Для Каждого ТипОборудования Из ТипыВМассиве Цикл
			МассивТипов.Добавить(ПолучитьТипОборудования(ТипыОборудования));
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТипыОборудования) = Тип("Массив") Тогда
		Для Каждого ТипОборудования Из ТипыОборудования Цикл   
			Если ТипЗнч(ТипОборудования) = Тип("Строка") Тогда 
				МассивТипов.Добавить(ПолучитьТипОборудования(ТипОборудования));   
			ИначеЕсли ТипЗнч(ТипОборудования) = Тип("ПеречислениеСсылка.ТипыПодключаемогоОборудования") Тогда 
				МассивТипов.Добавить(ТипОборудования);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТипыОборудования) = Тип("Структура") Тогда
		Если ТипыОборудования.Свойство("СканерШтрихкода") И ТипыОборудования.СканерШтрихкода Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
		КонецЕсли;
		Если ТипыОборудования.Свойство("СчитывательМагнитныхКарт") И ТипыОборудования.СчитывательМагнитныхКарт Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт);
		КонецЕсли;    
		Если ТипыОборудования.Свойство("ККТ") И ТипыОборудования.ККТ Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
		КонецЕсли;
		Если ТипыОборудования.Свойство("ФискальныйРегистратор") И ТипыОборудования.ФискальныйРегистратор Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
		КонецЕсли;
		Если ТипыОборудования.Свойство("ПринтерЧеков") И ТипыОборудования.ПринтерЧеков Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков);
		КонецЕсли;
		Если ТипыОборудования.Свойство("ДисплейПокупателя") И ТипыОборудования.ДисплейПокупателя Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя);
		КонецЕсли;
		Если ТипыОборудования.Свойство("ТерминалСбораДанных") И ТипыОборудования.ТерминалСбораДанных Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных);
		КонецЕсли;
		Если ТипыОборудования.Свойство("ЭквайринговыйТерминал") И ТипыОборудования.ЭквайринговыйТерминал Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);
		КонецЕсли;
		Если ТипыОборудования.Свойство("ЭлектронныеВесы") И ТипыОборудования.ЭлектронныеВесы Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы);
		КонецЕсли;
		Если ТипыОборудования.Свойство("ВесыСПечатьюЭтикеток") И ТипыОборудования.ВесыСПечатьюЭтикеток Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток);
		КонецЕсли;
		Если ТипыОборудования.Свойство("ПринтерЭтикеток") И ТипыОборудования.ПринтерЭтикеток Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток);
		КонецЕсли;
		Если ТипыОборудования.Свойство("СчитывательRFID") И ТипыОборудования.СчитывательRFID Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID);
		КонецЕсли;
		Если ТипыОборудования.Свойство("УстройствоРаспознавания") И ТипыОборудования.УстройствоРаспознавания Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.УстройствоРаспознавания);
		КонецЕсли;
		Если ТипыОборудования.Свойство("ОблачнаяККТ") И ТипыОборудования.ОблачнаяККТ Тогда
			МассивТипов.Добавить(Перечисления.ТипыПодключаемогоОборудования.ОблачнаяККТ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивТипов; 
	
КонецФункции

// Получить соответствие типов оборудования
//
// Возвращаемое значение:
//   Соответствие -
//
Функция ПолучитьСоответствиеТиповОборудования() Экспорт
	
	Соответствие = Новый Соответствие();                                                                          
	// Russian alphabet. Не локализовывать
	Соответствие.Вставить("СканерШтрихкода"         , Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода); //@NON-NLS-1 @NON-NLS-2      
	Соответствие.Вставить("УстройствоВвода"         , Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("СчитывательМагнитныхКарт", Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("ККТ"                     , Перечисления.ТипыПодключаемогоОборудования.ККТ); //@NON-NLS-1 @NON-NLS-2    
	Соответствие.Вставить("ФискальныйРегистратор"   , Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("ПринтерЧеков"            , Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("ДисплейПокупателя"       , Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("ТерминалСбораДанных"     , Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("ЭквайринговыйТерминал"   , Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("ЭлектронныеВесы"         , Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("ВесыСПечатьюЭтикеток"    , Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("ПринтерЭтикеток"         , Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("СчитывательRFID"         , Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID); //@NON-NLS-1 @NON-NLS-2       
	Соответствие.Вставить("УстройствоРаспознавания" , Перечисления.ТипыПодключаемогоОборудования.УстройствоРаспознавания); //@NON-NLS-1 @NON-NLS-2       
	
	// English alphabet. 
	Соответствие.Вставить("BarcodeScanner"        , Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода); //@NON-NLS-1 @NON-NLS-2      
	Соответствие.Вставить("CardReader"            , Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("KKT"                   , Перечисления.ТипыПодключаемогоОборудования.ККТ); //@NON-NLS-1 @NON-NLS-2    
	Соответствие.Вставить("FiscalRegistrar"       , Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("ReceiptPrinter"        , Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("CustomerDisplay"       , Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("DataCollectionTerminal", Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("POSTerminal"           , Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("WeighingScales"        , Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("LabelPrintingScale"    , Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("LabelPrinter"          , Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток); //@NON-NLS-1 @NON-NLS-2   
	Соответствие.Вставить("RFIDReader"            , Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID); //@NON-NLS-1 @NON-NLS-2    
	Соответствие.Вставить("Recognizer"            , Перечисления.ТипыПодключаемогоОборудования.УстройствоРаспознавания); //@NON-NLS-1 @NON-NLS-2       
	
	Возврат Соответствие;
	
КонецФункции

// Получить тип оборудования по строке
//
// Параметры:
//   ТипОборудования - Строка - тип оборудования.
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыПодключаемогоОборудования -
//
Функция ПолучитьТипОборудования(ТипОборудования) Экспорт
	
	Соответствие = ПолучитьСоответствиеТиповОборудования();
	Возврат Соответствие.Получить(ТипОборудования);
	
КонецФункции

// Заполняет данные о макетах
//
// Параметры:
//   ИмяДрайвера - Строка- 
//   ИмяМакетаДрайвера - Строка- 
//   МакетДоступен - Булево- 
//   ШаблонЛокализации - Строка- 
//   КодЯзыка - Строка- 
//
Процедура ЗаполнитьДанныеМакетов(ИмяДрайвера, ИмяМакетаДрайвера, МакетДоступен, ШаблонЛокализации, КодЯзыка = "") Экспорт
	
	ИмяМакетаДрайвера = ?(ПустаяСтрока(ИмяМакетаДрайвера), ИмяДрайвера, ИмяМакетаДрайвера);    
	МакетДрайвера = Метаданные.ОбщиеМакеты.Найти(ИмяМакетаДрайвера);                                                            
	
	Если МакетДрайвера <> Неопределено И МакетДрайвера.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ВнешняяКомпонента Тогда
		МакетДоступен = Истина;                 
		Если Не ПустаяСтрока(КодЯзыка) Тогда // Проверяем файл с наличием локализации
			МакетШаблонЛокализации = ИмяМакетаДрайвера + "_" + КодЯзыка;   
			МакетШаблон = Метаданные.ОбщиеМакеты.Найти(МакетШаблонЛокализации);
			Если МакетШаблон <> Неопределено И МакетШаблон.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ТекстовыйДокумент Тогда
				ШаблонЛокализации = ПолучитьОбщийМакет(МакетШаблонЛокализации).ПолучитьТекст();
			КонецЕсли;              
		КонецЕсли;              
	Иначе // Проверяем наличие драйвера по маске типа "*_ru"
		Если ПустаяСтрока(КодЯзыка) Тогда
			КодЯзыка = ТекущийЯзык().КодЯзыка;
		КонецЕсли;
		ИмяМакетаДрайвера = ИмяМакетаДрайвера + "_" + КодЯзыка;   
		МакетШаблон = Метаданные.ОбщиеМакеты.Найти(ИмяМакетаДрайвера);
		МакетДоступен = МакетШаблон <> Неопределено И МакетШаблон.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ВнешняяКомпонента;
	КонецЕсли;              
	ИмяМакетаДрайвера = "ОбщийМакет." + ИмяМакетаДрайвера;     
	
КонецПроцедуры

// Заполняет данные об используемых внешних компонентах
//
// Параметры:
//   Компоненты - ТаблицаЗначений
Процедура ЗаполнитьИспользуемыеВнешниеКомпоненты(Компоненты) Экспорт
	
	Если ОбщегоНазначенияБПО.ПодсистемаСуществует("СтандартныеПодсистемы.ГенерацияШтрихкода") Тогда
		НоваяСтрока = Компоненты.Добавить();
		НоваяСтрока.Идентификатор = "Barcode";
		НоваяСтрока.ОбновлятьАвтоматически = Истина;   
	КонецЕсли;
	
	Если ОбщегоНазначенияБПО.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
		МодульЭлектронныеСертификатыНСПККлиентСервер = ОбщегоНазначенияБПО.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиентСервер");
		ОписаниеКомпоненты = МодульЭлектронныеСертификатыНСПККлиентСервер.ОписаниеКомпоненты();
		НоваяСтрока = Компоненты.Добавить();
		НоваяСтрока.Идентификатор = ОписаниеКомпоненты.ИмяОбъекта;
		НоваяСтрока.ОбновлятьАвтоматически = Истина;   
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пустую таблицу поставляемых драйверов оборудования. 
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования - тип оборудования
//   * Наименование - Строка - наименование оборудования
//   * ИдентификаторОбъекта - Строка - уникальный идентификатор объекта
//   * ИмяДрайвера - Строка - внутреннее имя драйвера
//   * ИмяМакетаДрайвера - Строка - имя макета драйвера, если оно отличается от имени драйвера
//   * ВерсияДрайвера - Строка
//   * СнятСПоддержки - Булево - признак того, что драйвер снят с поддержки
//   * СпособПодключения - ПеречислениеСсылка.СпособПодключенияДрайвера
//   * ЛокальныйРежим - Булево - признак локальности драйвера
//   * СетевойРежим - Булево - признак работы в сетевом режиме
//   * СерверныйРежим - Булево
//
Функция НоваяТаблицаПоставляемыхДрайверовОборудования() Экспорт
	
	ДрайвераОборудования = Новый ТаблицаЗначений;
	// Общие свойства.
	ДрайвераОборудования.Колонки.Добавить("ТипОборудования"     , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПодключаемогоОборудования"));
	ДрайвераОборудования.Колонки.Добавить("Наименование"        , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДрайвераОборудования.Колонки.Добавить("ИдентификаторОбъекта", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДрайвераОборудования.Колонки.Добавить("ИмяДрайвера"         , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДрайвераОборудования.Колонки.Добавить("ИмяМакетаДрайвера"   , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДрайвераОборудования.Колонки.Добавить("ВерсияДрайвера"      , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДрайвераОборудования.Колонки.Добавить("СнятСПоддержки"      , Новый ОписаниеТипов("Булево"));
	ДрайвераОборудования.Колонки.Добавить("СпособПодключения"   , Новый ОписаниеТипов("ПеречислениеСсылка.СпособПодключенияДрайвера"));
	ДрайвераОборудования.Колонки.Добавить("БезопасноеПодключение" , Новый ОписаниеТипов("Булево"));
	// Параметры работы
	ДрайвераОборудования.Колонки.Добавить("ЛокальныйРежим", Новый ОписаниеТипов("Булево"));
	ДрайвераОборудования.Колонки.Добавить("СетевойРежим"  , Новый ОписаниеТипов("Булево"));
	ДрайвераОборудования.Колонки.Добавить("СерверныйРежим", Новый ОписаниеТипов("Булево"));   
	Возврат ДрайвераОборудования;
	
КонецФункции

// Возвращает массив содержащий имена макетов для переустановки драйверов, для которых требуется переустановка,
// а так же снимает флаг признака переустановки у найденных элементов.
//
// Параметры:
//   ИдентификаторКлиента - Строка - идентификатор клиента для рабочего места
//   ИмяКомпьютера - Строка - Имя компьютера
//
// Возвращаемое значение:
//   Массив из строк - имена макетов внешних компонент, которые требуется переустановить
Функция МакетыДляПереустановкиДрайверов(ИдентификаторКлиента, ИмяКомпьютера) Экспорт

	МассивРабочихМест = МенеджерОборудованияВызовСервера.НайтиРабочиеМестаПоИдентификатору(ИдентификаторКлиента, ИмяКомпьютера);
	ОборудованиеДляПереустановки = Новый Массив();
	
	Если МассивРабочихМест.Количество() = 0 Тогда
		РабочееМесто = Неопределено;
	Иначе
		РабочееМесто = МассивРабочихМест[0];
	КонецЕсли;
	
	// Переустановить драйверы помеченные флагом для переустановки.
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		СписокОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();   
		СписокОтбор.РабочееМесто = РабочееМесто;                  
		СписокОборудования = СписокОборудования(СписокОтбор);
		Для Каждого Оборудование Из СписокОборудования Цикл
			Если Оборудование.ПодключениеИзМакета И Оборудование.МакетДоступен И Оборудование.ТребуетсяПереустановка Тогда
				ОборудованиеДрайверОборудования = Оборудование.ДрайверОборудования; // Структура
				ОписаниеОборудованияДляПереустановки = Новый Структура();   
				ОписаниеОборудованияДляПереустановки.Вставить("ИмяМакетаДрайвера", Оборудование.ИмяМакетаДрайвера);
				ОписаниеОборудованияДляПереустановки.Вставить("Наименование", Оборудование.Наименование);
				ОписаниеОборудованияДляПереустановки.Вставить("Версия", Оборудование.ВерсияДрайвера);
				ОборудованиеДляПереустановки.Добавить(ОписаниеОборудованияДляПереустановки);      
			КонецЕсли;
			УстановитьПризнакПереустановкиДрайвера(
				РабочееМесто,
				Оборудование.ДрайверОборудования,
				Ложь); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОборудованиеДляПереустановки;
	
КонецФункции

// Получить параметры подключения в XML
//
// Параметры:
//   Параметры - Структура - Параметры подключения.     
//   ТипОборудования - Строка - Тип оборудования 
// Возвращаемое значение:
//   Строка -
//
Функция ПолучитьПараметрыXML(Параметры, ТипОборудования = Неопределено) Экспорт
	
	Результат = ""; 
	
	Если Параметры <> Неопределено Тогда 
		
		ЗаписьXML = Новый ЗаписьXML; 
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");    
		
		Если Не ПустаяСтрока(ТипОборудования) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Parameter");   
			ЗаписьXML.ЗаписатьАтрибут("Name", "EquipmentType");      
			ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ТипОборудования));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Для Каждого Параметр ИЗ Параметры Цикл
			Если Лев(Параметр.Ключ, 2) = "P_" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Parameter");   
				ЗаписьXML.ЗаписатьАтрибут("Name", Сред(Параметр.Ключ, 3));      
				ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(Параметр.Значение));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Результат = ЗаписьXML.Закрыть();   
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти     

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьУстаревшиеДрайвера()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДрайверыОборудования.Ссылка КАК Ссылка,
		|	ДрайверыОборудования.Представление КАК Представление
		|ИЗ
		|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|		ПО ДрайверыОборудования.Ссылка = ПодключаемоеОборудование.ДрайверОборудования
		|ГДЕ
		|	ДрайверыОборудования.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ПустаяСсылка)
		|	И ПодключаемоеОборудование.Ссылка ЕСТЬ NULL";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		УстаревшийДрайверОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			УстаревшийДрайверОбъект.Заблокировать();
			УстаревшийДрайверОбъект.ОбменДанными.Загрузка = Истина;
			УстаревшийДрайверОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			УстаревшийДрайверОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			УстаревшийДрайверОбъект.Удалить();
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удается заблокировать удаляемый драйвер %1.'", 
				ОбщегоНазначенияБПО.КодОсновногоЯзыка()), Выборка.Представление);
			ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодключаемоеОборудованиеНаФорме(Форма)

	ЗначенияСвойств = Новый Структура("ПодключаемоеОборудованиеБПО", Null);
	ЗаполнитьЗначенияСвойств(ЗначенияСвойств, Форма);

	Результат = ЗначенияСвойств.ПодключаемоеОборудованиеБПО;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Если Результат = Null Тогда
			ДобавляемыеРеквизиты = Новый Массив;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПодключаемоеОборудованиеБПО", Новый ОписаниеТипов));
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("СписокОборудования", Новый Массив());
		Результат.Вставить("ТребуетсяЗапросСпискаОборудованияНаКлиенте", Ложь);
		Результат.Вставить("ТипыПО", МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования());
		
		Форма.ПодключаемоеОборудованиеБПО = Результат;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти     

#КонецЕсли