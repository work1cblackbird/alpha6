// Общий модуль "Управление диалогом документа (клиент)"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ ДОКУМЕНТА

// Общий обработчик события выбора одного из пунктов меню доступных хоз. операций
// 
// Параметры:
//  Объект     - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Элементы   - КоллекцияЭлементовУправляемойФормы - предоставляет доступ к элементам формы.
//  ИмяКоманды - Строка               - Имя команды, в которой возникло данное событие.
//
Процедура ОбработатьВыборХозОперации(Объект, Элементы, ИмяКоманды) Экспорт
	
	Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации."+СтрЗаменить(ИмяКоманды, "ХозОперация", ""));
	
	Для каждого КнопкаОперации Из Элементы.ВыборХозОперации.ПодчиненныеЭлементы Цикл
		КнопкаОперации.Пометка = (КнопкаОперации.Имя=ИмяКоманды);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьВыборХозОперации()

// Общий обработчик события возникающего при открытии настройки параметров документа.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект     - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура НастроитьПараметрыДокумента(Форма, Объект = Неопределено,ПараметрыДействия = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Источник", Объект);
	ПараметрыВызова.Вставить("Форма", Форма);
	ОбщиеПараметрыДокументовКлиент.НастроитьПараметрыДокумента(Объект.Ссылка, ПараметрыВызова);
	
КонецПроцедуры // НастроитьПараметрыДокумента()

// Общий обработчик события возникающего при нажатии на надпись "Налоговый документ".
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура НадписьНалоговыйДокументНажатие(Форма, Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если Объект.Ссылка.Пустая() ИЛИ Форма.Модифицированность И НЕ ЗначениеЗаполнено(Форма.НалоговыйДокумент) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Источник", Объект);
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Ввести счет-фактуру"" возможно только после записи данных.
			|Данные будут записаны.'"
		);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыполнитьПодключаемуюКомандуПодтверждениеЗаписи",
			УправлениеДиалогомДокументаКлиент,
			ДополнительныеПараметры
		);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	НадписьНалоговыйДокументНажатиеПродолжение(Форма, Объект);
	
КонецПроцедуры // НадписьНалоговыйДокументНажатие()

// Общий обработчик события возникающего при нажатии на надпись "Взаиморасчеты".
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяРеквизитаКонтрагента  - Строка - Наименование реквизита "Контрагент" на форме, по умолчанию "Контрагент"
//  ИмяРеквизитаДоговора     - Строка - Наименование реквизита "ДоговорВзаиморасчетов" на форме,
//                                     по умолчанию "ДоговорВзаиморасчетов".
//  Объект					 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура НадписьВзаиморасчетыНажатие(Форма,
		ИмяРеквизитаКонтрагента = "Контрагент",
		ИмяРеквизитаДоговора = "ДоговорВзаиморасчетов",
		Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыВзаиморасчетов") Тогда
		Контрагент = Объект.Владелец;
		ДоговорВзаиморасчетов = Объект.Ссылка;
	Иначе
		Контрагент = Объект[ИмяРеквизитаКонтрагента];
		ДоговорВзаиморасчетов = Объект[ИмяРеквизитаДоговора];
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Контрагент)) Или (Не ЗначениеЗаполнено(ДоговорВзаиморасчетов)) Тогда
		Возврат;
	КонецЕсли;
	
	// фильтры
	Отбор = Новый Структура;
	Отбор.Вставить("Контрагент",            Контрагент);
	Отбор.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	
	ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ВзаиморасчетыСКонтрагентом", "ВзаиморасчетыКомпании",,,, Отбор, , ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры // НадписьВзаиморасчетыНажатие()

// Общий обработчик события возникающего при нажатии на надпись "Денежные средства".
//
// Параметры:
//  Форма			- УправляемаяФорма		- Форма, в которой возникло событие.
//  ИмяРеквизита	- Строка				- Наименование реквизита.
//  Объект			- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
Процедура НадписьДенежныеСредстваНажатие(Форма, ИмяРеквизита="", Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	КассаКомпании = Объект[ИмяРеквизита];
	
	Если НЕ ЗначениеЗаполнено(КассаКомпании) Тогда
		Возврат;
	КонецЕсли;
	
	// фильтры
	Отбор = Новый Структура;
	Отбор.Вставить("СтруктурнаяЕдиница", КассаКомпании);
	
	Если ОтчетыПлатформаВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьМногоВалютныйУчет") Тогда
		ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ОстаткиИОборотыДенежныхСредствКомпании", "ОстаткиПоВалюте",,,, Отбор, , ОбщегоНазначенияКлиент.ДатаСеанса());
	Иначе
		ОтчетыПлатформаКлиент.ОткрытьОтчет("Отчет.ОстаткиИОборотыДенежныхСредствКомпании", "Остатки",,,, Отбор, , ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры // НадписьДенежныеСредстваНажатие()

// Общий обработчик события возникающего при нажатии на надпись "Таможенная декларация".
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура НадписьТаможеннаяДекларацияНажатие(Форма, Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Форма.Модифицированность
		И НЕ ЗначениеЗаполнено(Форма.ТаможеннаяДекларация) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Источник", Объект);
		ДополнительныеПараметры.Вставить("Событие", "СоздатьОткрытьТаможеннуюДекларацию");
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Ввести таможенную декларацию"" возможно только после записи данных.
			|Данные будут записаны.'"
		);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыполнитьПодключаемуюКомандуПодтверждениеЗаписи",
			УправлениеДиалогомДокументаКлиент,
			ДополнительныеПараметры
		);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	НадписьТаможеннаяДекларацияНажатиеПродолжение(Форма, Объект);
	
КонецПроцедуры // НадписьНалоговыйДокументНажатие()

// Общий обработчик события возникающего при расширенном редактировании поля "Комментарий".
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент              - ПолеФормы        - Элемент управления, в котором возникло данное событие.
//  СтандартнаяОбработка - Булево        - В данный параметр передается признак выполнения системной обработки события.
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура РасширенноеРедактированиеПоляКомментарий(Форма, Элемент, СтандартнаяОбработка, Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Проверим блокировку объекта другим пользователем.
	Если УправлениеДиалогомВызовСервера.ПроверитьЗапретРедактированияДанных(Объект.Ссылка, Форма.УникальныйИдентификатор) Тогда
		Возврат;
	КонецЕсли;

	// Отказываемся от стандартной обработки события.
	СтандартнаяОбработка = ЛОЖЬ;
	
	// Формируем описание обработчика перехвата закрытия формы.
	ОбработкаРезультатаЗакрытия = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "РасширенноеРедактированиеПоляКомментарий");
	
	// Открываем диалог многострочного редактирования текста комментария.
	ПоказатьВводСтроки(ОбработкаРезультатаЗакрытия, СокрЛП(Объект.Комментарий), НСтр("ru = 'Введите комментарий'") + " ...",, ИСТИНА);
	
КонецПроцедуры // РасширенноеРедактированиеПоляКомментарий()

// Общий обработчик события возникающего на клиенте при нажатии на надпись "Сумма документа".
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ПолеФормы        - Элемент управления, в котором возникло данное событие.
//  Объект  - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ПоказатьРасширенныеИтогиОперации(Форма, Элемент, Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Получим представление расширенных итогов операции
	ПредставлениеИтогов = ЗащищенныеФункцииВызовСервера.ПолучитьПредставленияИтоговОперации(Объект);
	
	// Формируем описание обработчика перехвата закрытия формы
	ОбработкаРезультатаЗакрытия = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "ВыборЭлементаРасширенныхИтоговОперации");
	
	// Производим визуализацию переданного списка
	Форма.ПоказатьВыборИзМеню(ОбработкаРезультатаЗакрытия, ПредставлениеИтогов, Элемент);
	
КонецПроцедуры // ПоказатьРасширенныеИтогиОперации()

// Общий обработчик события возникающего при выборе "Партии" в товарах.
//
// Параметры:
//  Форма				- УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент				- ПолеФормы        - Элемент управления, в котором возникло данное событие.
//  ПараметрыДействия	- Структура - Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ОткрытьПодборПартий(Форма, Элемент, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	// Инициализируем структуру параметров действия
	Если НЕ ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		ПараметрыДействия = Новый Структура();
	КонецЕсли;
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	ТекущиеДанные = Форма.Элементы.Товары.ТекущиеДанные;
	
	// Проверим заполнение объекта
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ИзвлечениеТоваровИзПроизводства")
		ИЛИ Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ПеремещениеНезавершенногоПроизводства") Тогда
		Если НЕ ПараметрыДействия.Свойство("Цех") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДействия.Цех) Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не заполнен цех'"));
			Возврат;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СкладКомпании")
			И Не ЗначениеЗаполнено(Объект.СкладКомпании) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не заполнен склад компании'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана номенклатура'"));
		Возврат;
		
	КонецЕсли;
	
	Если
		Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия")
		И Не ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов)
	Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не указан договор комиссии.'"));
		Возврат;
		
	КонецЕсли;
	
	// Инициализируем структуру основных параметры подбора товаров в документ
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("ДокументОснование");
	ПараметрыПодбора.Вставить("ВозвратНам", Ложь);
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ЗаказНаряд");
	ПараметрыПодбора.Вставить("Цех");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СкладКомпании") Тогда
		
		ПараметрыПодбора.Вставить("СкладКомпании", Объект.СкладКомпании);
		
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаНоменклатуры) Тогда
		
		ПараметрыПодбора.Вставить("ХарактеристикаНоменклатуры",ТекущиеДанные.ХарактеристикаНоменклатуры);
		
	КонецЕсли;
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия") Тогда
		
		ПараметрыПодбора.Вставить("СтатусПартии", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварПринятыйКомиссия"));
		
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровПоставщику") Тогда
		
		ПараметрыПодбора.Вставить("СтатусПартии", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварКупленный"));
		
	КонецЕсли;
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия") Тогда
		
		ПараметрыПодбора.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
		
	ИначеЕсли Объект.ХозОперация =
			ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах")
		ИЛИ Объект.ХозОперация =
			ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон") Тогда
		
		ПараметрыПодбора.Вставить("Сделка", Объект.Сделка);
		
	КонецЕсли;
	
	// параметры объекта
	ПараметрыПодбора.Вставить("ДатаКонца", Объект.Дата);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("КурсДокумента", Объект.КурсДокумента);
	ПараметрыПодбора.Вставить("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	ПараметрыПодбора.Вставить("ХозОперация", Объект.ХозОперация);
	
	// Перезаполним по переданным параметрам
	ЗаполнитьЗначенияСвойств(ПараметрыПодбора, ПараметрыДействия);
	ПараметрыПодбора.Вставить("Документ", ПараметрыПодбора.ДокументОснование);
	
	// Производим открытие формы подбора номенклатуры
	ОткрытьФорму("ПланВидовХарактеристик.ТипыПартий.Форма.ФормаВыбораПартий", ПараметрыПодбора, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьПодборПартий()

// Общий обработчик события возникающего при нажатии кнопки "Печать чека"
// 
// Параметры:
//  Форма				- УправляемаяФорма - Форма, в которой возникло событие.
//  ПараметрыДействия	- Структура - Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ПробитьЧек(Форма,ПараметрыДействия, Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	ПараметрыДействия.Вставить("Форма",Форма);
	ПараметрыДействия.Вставить("Объект",Объект);
	
	Наличные = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Наличные", Ложь);
	НеНуженЭТ = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеНуженЭТ", Ложь);
	
	// Выполним предварительные проверки перед печатью 
	Если ПараметрыДействия.Свойство("СегодняшняяДата") 
		И Объект.Дата < НачалоДня(ПараметрыДействия.СегодняшняяДата) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дата документа меньше сегодняшней.'"),, "Дата", "Объект");
		Возврат;
	КонецЕсли;  
	
	Если Объект.СуммаДокумента = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана сумма к оплате'"),, "СуммаДокумента", "Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФР) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан ФР.'"),, "ФР", "Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана касса ККМ.'"),, "КассаККМ", "Объект");
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизитНаКлиенте(Объект,"ПризнакСпособаРасчета") И  НЕ ЗначениеЗаполнено(Объект.ПризнакСпособаРасчета) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана способ расчета.'"),, "ПризнакСпособаРасчета", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.НомерДокумента <> 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Чек уже пробит на фискальном регистраторе.'"));
		Возврат;
	КонецЕсли;
	
	// Проверим надо ли взаимодействовать с ЭТ
	СуммаПоЭТ = 0;
	Если НЕ Наличные И ЕстьРеквизитНаКлиенте(Объект,"Оплаты") Тогда
		ЕстьСдача = Объект.Оплаты.Количество()>0 И ЕстьРеквизитНаКлиенте(Объект.Оплаты[0],"Сдача");
		Для Каждого СтрОплаты Из Объект.Оплаты Цикл
			Если СтрОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаПоЭТ = СуммаПоЭТ + СтрОплаты.Сумма - ?(ЕстьСдача,СтрОплаты.Сдача,0);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПараметрыДействия.Вставить("СуммаПоЭТ",СуммаПоЭТ);
	
	// Пробить можно только проведенный документ
	// Создадим обработчик оповещения.
	Если НЕ ЗначениеЗаполнено(Объект.ДатаФР) И (СуммаПоЭТ > 0) И НЕ НеНуженЭТ Тогда
		ОбработчикСобытия = Новый ОписаниеОповещения("ПродолжитьПробитьЧекЭТ", УправлениеДиалогомДокументаКлиент, ПараметрыДействия);
	Иначе
		ОбработчикСобытия = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОповещениеПробитьЧекЗавершениеФР", Новый ОписаниеОповещения("ПробитьЧекЗавершениеФР", УправлениеДиалогомДокументаКлиент, ПараметрыДействия));
	КонецЕсли;
	
	ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
	ПараметрыЗаписиНового.ПровестиДокумент  = Истина;
	ПараметрыЗаписиНового.ОбработчикСобытия = ОбработчикСобытия;

	Если ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(Форма, ПараметрыЗаписиНового) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаФР) И (СуммаПоЭТ > 0) И НЕ НеНуженЭТ Тогда
		ПродолжитьПробитьЧекЭТ(Неопределено,ПараметрыДействия);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработчикСобытия, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧек()

// Общий обработчик события возникающего при нажатии кнопки "Печать чека"
// 
// Параметры:
//  Форма					- УправляемаяФорма - Форма, в которой возникло событие.
//  ПараметрыДействия		- Структура - Набор параметров, использующихся при выполнения операции.
//  Объект					- ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ЗаписыватьНовыйДокумент - Булево - признак записи нового документа.
//
Процедура ПробитьЧекКоррекции(Форма,
		ПараметрыДействия,
		Объект = Неопределено,
		ЗаписыватьНовыйДокумент = Истина) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("Форма", Форма);
	ПараметрыДействия.Вставить("Объект", Объект);
	Наличные = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Наличные", Ложь);
	
	// Выполним предварительные проверки перед печатью
	Если Объект.СуммаДокумента = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана сумма к оплате'"),, "СуммаДокумента","Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФР) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан ФР.'"), , "ФР", "Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана касса ККМ.'"), , "КассаККМ", "Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПризнакСпособаРасчета) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана способ расчета.'"), , "ПризнакСпособаРасчета","Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.НомерДокумента <> 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Чек уже пробит на фискальном регистраторе.'"));
		Возврат;
	КонецЕсли;
	
	ОбработчикСобытия = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ОповещениеПробитьЧекЗавершениеФР",
		Новый ОписаниеОповещения("ПробитьЧекКоррекцииЗавершениеФР", УправлениеДиалогомДокументаКлиент, ПараметрыДействия)
	);
	
	Если ЗаписыватьНовыйДокумент Тогда
		
		ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
		ПараметрыЗаписиНового.ПровестиДокумент  = Истина;
		ПараметрыЗаписиНового.ОбработчикСобытия = ОбработчикСобытия;
		
		Если ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(Форма, ПараметрыЗаписиНового) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработчикСобытия, Неопределено);
	
КонецПроцедуры // ПробитьЧекКоррекции()

// Общий обработчик события возникающего при нажатии кнопки "Печать чека"
// 
// Параметры:
//  РезультатОповещения	 - Произвольный - Результат выполнения операции в подчиненной форме.
//  ПараметрыДействия	 - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ПродолжитьПробитьЧекЭТ(РезультатОповещения,ПараметрыДействия) Экспорт
	
	// Нужно чтобы не оформить ЭТ при закрытой смене
	СтатусПоследнейСмены =
		МенеджерОборудованияАльфаАвтоВызовСервера.ПолучитьСтатусПоследнейСмены(ПараметрыДействия.Объект.ФР);
	Если Не СтатусПоследнейСмены.Активна Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Кассовая смена не открыта или истекла.'"));
		Возврат;
	КонецЕсли;	
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОткрыватьФормуПроверкиМаркировкиККТ", Ложь) Тогда
		ПараметрыДействия.ОткрыватьФормуПроверкиМаркировкиККТ = Ложь;
		
		// Произведем проверку кодов маркировки
		ОповещениеПриЗавершенииПроверкиКодовМаркировки = Новый ОписаниеОповещения(
			"ПродолжитьПробитиеЧекаЭТПослеПроверкиККТ",
			УправлениеДиалогомДокументаКлиент,
			ПараметрыДействия);
		
		// Откроем форму проверки кодов маркировки
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Документ", ПараметрыДействия.Объект.Ссылка);
		ПараметрыПроверки.Вставить("ПробитиеЧека", Истина);
		
		ОткрытьФорму(
			"ОбщаяФорма.ФормаСпискаМаркировокПроверкаККТ",
			ПараметрыПроверки,
			ПараметрыДействия.Форма,,,,
			ОповещениеПриЗавершенииПроверкиКодовМаркировки,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПробитиеЧекаЭТПослеПроверкиККТ(Неопределено, ПараметрыДействия);
	
КонецПроцедуры // ПродолжитьПробитьЧек()

// Завершение операции по платежной карте.
//
// Параметры:
//  РезультатВыполнения	 - Структура - Результат выполнения операции.
//  Параметры			 - Структура - Дополнительные параметры.
//
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция завершена.'");
		Если Параметры.Свойство("ОповещениеПробитьЧекЗавершениеФР") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПробитьЧекЗавершениеФР, Параметры);
		Иначе
			ПробитьЧекЗавершениеФР(Неопределено,Параметры);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'При выполнении операции произошла ошибка:""%1""'"),РезультатВыполнения.ОписаниеОшибки));
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(
			Неопределено,
			Параметры.Форма.УникальныйИдентификатор,
			Параметры.Объект.ФР
		);
	КонецЕсли;
	
КонецПроцедуры // ОперацияПоПлатежнойКартеЗавершение()

// Общий обработчик события возникающего при нажатии кнопки "Печать чека"
// 
// Параметры:
//  ПараметрыВыбранногоЭТ	 - Произвольный - Результат выполнения операции в подчиненной форме.
//  ПараметрыДействия		 - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ПробитьЧекЗавершениеФР(ПараметрыВыбранногоЭТ, ПараметрыДействия) Экспорт
	
	Форма = ПараметрыДействия.Форма;
	Объект = ПараметрыДействия.Объект;
		
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Заполняем параметры операции пробития чека
	ПараметрыПробития = Новый Структура("");
		
	// Определяем переменные для возвратных параметров
	ОписаниеОшибки = "";
	ДопПараметры = Новый Структура("Объект, Форма");
	ДопПараметры.Объект = Объект;
	ДопПараметры.Форма = Форма;
	
	ОповещениеПриЗавершении = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОповещениеПриЗавершении", Новый ОписаниеОповещения("ПечатьЧекаЗавершение", УправлениеДиалогомДокументаКлиент, ДопПараметры));
	
	ПараметрыПробития.Вставить("Объект",         Объект);
	ПараметрыПробития.Вставить("ДокументСсылка",	Объект.Ссылка);
	ПараметрыПробития.Вставить("ФР",				Объект.ФР);
	
	НужнаПроверкаКодовМаркировки =
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОткрыватьФормуПроверкиМаркировкиККТ", Ложь);
	ПараметрыПробития.Вставить("НеФормироватьЧек", НужнаПроверкаКодовМаркировки);
	
	ОбщиеПараметры = ПолучитьШаблонЧека(ОписаниеОшибки, ПараметрыПробития);
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	// + Pyalek обработчик оповещения печати копии чека
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаФР) Тогда
		ДопПараметры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
		ОповещениеПриЗавершении = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОповещениеПриЗавершении", Новый ОписаниеОповещения("ПродолжитьПечатьКопииЧека", УправлениеДиалогомДокументаКлиент, ДопПараметры));
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеШириныСтрокиПечатающегоУстройства(
			ОповещениеПриЗавершении,
			Форма.УникальныйИдентификатор
		);
	// - Pyalek
	ИначеЕсли НужнаПроверкаКодовМаркировки Тогда
		ПараметрыПробитияЧека = Новый Структура;
		ПараметрыПробитияЧека.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ПараметрыПробитияЧека.Вставить("УникальныйИдентификаторФормы", Форма.УникальныйИдентификатор);
		ПараметрыПробитияЧека.Вставить("ПараметрыПробития", ПараметрыПробития);
		ПараметрыПробитияЧека.Вставить("ФР", Объект.ФР);
		ПараметрыПробитияЧека.Вставить("Форма", Форма);
		
		// Произведем проверку кодов маркировки
		ОповещениеПриЗавершенииПроверкиКодовМаркировки = Новый ОписаниеОповещения(
			"ПечатьЧекаНаККТ",
			УправлениеДиалогомДокументаКлиент,
			ПараметрыПробитияЧека);
		
		// Откроем форму проверки кодов маркировки
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Документ", Объект.Ссылка);
		ПараметрыПроверки.Вставить("ПробитиеЧека", Истина);
		
		ОткрытьФорму(
			"ОбщаяФорма.ФормаСпискаМаркировокПроверкаККТ",
			ПараметрыПроверки,
			Форма,,,,
			ОповещениеПриЗавершенииПроверкиКодовМаркировки,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			ОповещениеПриЗавершении,
			Форма.УникальныйИдентификатор,
			Объект.ФР,
			ОбщиеПараметры
		);
		
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧекЗавершениеФР()

// Общий обработчик события возникающего при нажатии кнопки "Печать чека"
// 
// Параметры:
//  ПараметрыВыбранногоЭТ	 - Произвольный - Результат выполнения операции в подчиненной форме.
//  ПараметрыДействия		 - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ПробитьЧекКоррекцииЗавершениеФР(ПараметрыВыбранногоЭТ, ПараметрыДействия) Экспорт
	
	Форма = ПараметрыДействия.Форма;
	Объект = ПараметрыДействия.Объект;
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Заполняем параметры операции пробития чека
	ПараметрыПробития = Новый Структура("");
	
	// Определяем переменные для возвратных параметров
	ОписаниеОшибки = "";
	ДопПараметры = Новый Структура("Объект, Форма");
	ДопПараметры.Объект = Объект;
	ДопПараметры.Форма = Форма;
	
	ОповещениеПриЗавершении = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ОповещениеПриЗавершении",
		Новый ОписаниеОповещения("ПечатьЧекаКоррекцииЗавершение", УправлениеДиалогомДокументаКлиент, ДопПараметры)
	);
	
	ПараметрыПробития.Вставить("Объект", Объект);
	ПараметрыПробития.Вставить("ДокументСсылка", Объект.Ссылка);
	ПараметрыПробития.Вставить("ФР", Объект.ФР);
	
	НужнаПроверкаКодовМаркировки =
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОткрыватьФормуПроверкиМаркировкиККТ", Ложь);
	ПараметрыПробития.Вставить("НеФормироватьЧек", НужнаПроверкаКодовМаркировки);
	
	ОбщиеПараметры = ПолучитьШаблонЧекаКоррекции(ОписаниеОшибки, ПараметрыПробития);
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки, Объект.Ссылка);
	// + Pyalek обработчик оповещения печати копии чека
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаФР) Тогда
		// #SINIKO# нефакт что нужно!!!!!!!
		ДопПараметры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
		ОповещениеПриЗавершении = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыДействия,
			"ОповещениеПриЗавершении",
			Новый ОписаниеОповещения("ПродолжитьПечатьКопииЧека", УправлениеДиалогомДокументаКлиент, ДопПараметры)
		);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеШириныСтрокиПечатающегоУстройства(
			ОповещениеПриЗавершении,
			Форма.УникальныйИдентификатор
		);
	// - Pyalek
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОткрыватьФормуПроверкиМаркировкиККТ", Ложь) Тогда
		ПараметрыПробитияЧека = Новый Структура;
		ПараметрыПробитияЧека.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ПараметрыПробитияЧека.Вставить("УникальныйИдентификаторФормы", Форма.УникальныйИдентификатор);
		ПараметрыПробитияЧека.Вставить("ПараметрыПробития", ПараметрыПробития);
		ПараметрыПробитияЧека.Вставить("ЭтоЧекКоррекции", Истина);
		ПараметрыПробитияЧека.Вставить("ФР", Объект.ФР);
		ПараметрыПробитияЧека.Вставить("Форма", Форма);
		
		// Произведем проверку кодов маркировки
		ОповещениеПриЗавершенииПроверкиКодовМаркировки = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыДействия,
			"ОповещениеПриЗавершенииПроверкиКодовМаркировки",
			Неопределено
		);
		
		Если ОповещениеПриЗавершенииПроверкиКодовМаркировки = Неопределено Тогда
			ОповещениеПриЗавершенииПроверкиКодовМаркировки = Новый ОписаниеОповещения(
				"ПечатьЧекаКоррекцииНаККТ",
				УправлениеДиалогомДокументаКлиент,
				ПараметрыПробитияЧека
			);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОповещениеПриЗавершенииПроверкиКодовМаркировки.ДополнительныеПараметры, ПараметрыПробитияЧека);
		КонецЕсли;
		
		// Откроем форму проверки кодов маркировки
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Документ", Объект.Ссылка);
		ПараметрыПроверки.Вставить("ПробитиеЧека", Истина);
		
		ОткрытьФорму(
			"ОбщаяФорма.ФормаСпискаМаркировокПроверкаККТ",
			ПараметрыПроверки,
			Форма,
			, , ,
			ОповещениеПриЗавершенииПроверкиКодовМаркировки,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	Иначе
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(
			ОповещениеПриЗавершении,
			Форма.УникальныйИдентификатор,
			Объект.ФР,
			ОбщиеПараметры
		);
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧекЗавершениеФР()

// Выполняет печать чека
// 
// Параметры:
//  РезультатВыполнения	 - Структура - Результат выполнения операции.
//  ПараметрыЧека		 - Структура -
//
Процедура ПечатьЧекаНаККТ(РезультатВыполнения, ПараметрыЧека) Экспорт
	
	ПараметрыЧека.Форма.Прочитать();
	
	Если РезультатВыполнения <> Неопределено
		И ПолучитьЗначениеПараметраСтруктуры(РезультатВыполнения, "ОтменаПробитияЧека", Ложь) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ПараметрыЧека.ПараметрыПробития.Вставить("НеФормироватьЧек", Ложь);
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыЧека, "ЭтоЧекКоррекции", Ложь) Тогда
		
		ОбщиеПараметры = ПолучитьШаблонЧекаКоррекции(ОписаниеОшибки, ПараметрыЧека.ПараметрыПробития);
		
	Иначе
		
		ОбщиеПараметры = ПолучитьШаблонЧека(ОписаниеОшибки, ПараметрыЧека.ПараметрыПробития);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
		ПараметрыЧека.ОповещениеПриЗавершении,
		ПараметрыЧека.УникальныйИдентификаторФормы,
		ПараметрыЧека.ФР,
		ОбщиеПараметры
	);
	
КонецПроцедуры

// Выполняет печать чека коррекции
// 
// Параметры:
//  РезультатВыполнения	 - Структура - Результат выполнения операции.
//  ПараметрыЧека		 - Структура -
//
Процедура ПечатьЧекаКоррекцииНаККТ(РезультатВыполнения, ПараметрыЧека) Экспорт
	
	ПараметрыЧека.Форма.Прочитать();
	
	Если РезультатВыполнения <> Неопределено
		И ПолучитьЗначениеПараметраСтруктуры(РезультатВыполнения, "ОтменаПробитияЧека", Ложь) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ПараметрыЧека.ПараметрыПробития.Вставить("НеФормироватьЧек", Ложь);
	ОбщиеПараметры = ПолучитьШаблонЧекаКоррекции(ОписаниеОшибки, ПараметрыЧека.ПараметрыПробития);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(
		ПараметрыЧека.ОповещениеПриЗавершении,
		ПараметрыЧека.УникальныйИдентификаторФормы,
		ПараметрыЧека.ФР,
		ОбщиеПараметры
	);
	
КонецПроцедуры

// Выполняет пробитие чека после проверки ККТ
// 
// Параметры:
//  РезультатВыполнения	 - Структура - Результат выполнения операции.
//  ПараметрыДействия	 - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ПродолжитьПробитиеЧекаЭТПослеПроверкиККТ(РезультатВыполнения, ПараметрыДействия) Экспорт
	
	ПараметрыДействия.Форма.Прочитать();
	
	Если РезультатВыполнения <> Неопределено
		И ПолучитьЗначениеПараметраСтруктуры(РезультатВыполнения, "ОтменаПробитияЧека", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// подключим ККТ
	ПодключенноеУстройство = МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(ПараметрыДействия.Объект.ФР);
	Если ПодключенноеУстройство = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьПробитиеЧекаЭТПослеПодключенияККТ", ЭтотОбъект, ПараметрыДействия);
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(
			ОписаниеОповещения,
			ПараметрыДействия.Форма.УникальныйИдентификатор,
			ПараметрыДействия.Объект.ФР
		);
	Иначе
		ПродолжитьПробитиеЧекаЭТПослеПодключенияККТ(Неопределено, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

// Завершение печати чека.
//
// Параметры:
//  РезультатВыполнения	 - Структура - Результат выполнения операции.
//  Параметры			 - Структура - Дополнительные параметры.
//
Процедура ПечатьЧекаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Булево") Тогда
		Если НЕ РезультатВыполнения.Результат Тогда
			ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Иначе
			// Получить номер чека и номер смены.
			ПараметрыФискализации = РезультатВыполнения.ПараметрыФискализации;
			
			ФискальныеРеквизиты = Новый Структура;
			
			НомерСмены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерСменыККТ", "");
			ФискальныеРеквизиты.Вставить("НомерСмены", НомерСмены);
			
			НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерЧекаККТ", "");
			ФискальныеРеквизиты.Вставить("НомерДокумента", НомерДокумента);
			
			ДатаФР = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыФискализации,
				"ДатаВремяЧека",
				МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса()
			);
			ФискальныеРеквизиты.Вставить("ДатаФР", ДатаФР);
			
			НомерЧека = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерЧекаЗаСмену", "");
			ФискальныеРеквизиты.Вставить("НомерЧека", НомерЧека);
			
			Объект = Параметры.Объект;
			Форма = Параметры.Форма;
			
			Если НЕ ЗначениеЗаполнено(Объект.ДатаФР) Тогда
				Если НЕ УправлениеДиалогомВызовСервера.ЗаписатьОбъект(Объект, ИСТИНА, ФискальныеРеквизиты) Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru='Не удалось записать сведения о фискальных реквизитах в документ %1. Необходимо вручную внести данные в документ: номер чека - %2, дата чека - %3, номер смены - %4, номер документа - %5'"),
							Объект.Ссылка,
							ФискальныеРеквизиты.НомерЧека,
							ФискальныеРеквизиты.ДатаФР,
							ФискальныеРеквизиты.НомерСмены,
							ФискальныеРеквизиты.НомерДокумента
						),
						,
						"НомерЧека"
					);
				КонецЕсли;
			КонецЕсли;
			ОповеститьОбИзменении(Объект.Ссылка);
			Форма.Закрыть();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Операция выполнена успешно.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(
		Неопределено,
		Параметры.Форма.УникальныйИдентификатор,
		Параметры.Объект.ФР
	);

КонецПроцедуры

// Завершение печати чека.
//
// Параметры:
//  РезультатВыполнения	 - Структура - Результат выполнения операции.
//  Параметры			 - Структура - Дополнительные параметры.
//
Процедура ПечатьЧекаКоррекцииЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Булево") Тогда
		Если НЕ РезультатВыполнения.Результат Тогда
			ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Иначе
			ПараметрыФискализации = РезультатВыполнения.ПараметрыФискализации;
			
			ФискальныеРеквизиты = Новый Структура;
			
			НомерСмены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерСменыККТ", "");
			ФискальныеРеквизиты.Вставить("НомерСмены", НомерСмены);
			
			НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерЧекаККТ", "");
			ФискальныеРеквизиты.Вставить("НомерДокумента", НомерДокумента);
			
			ДатаФР = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыФискализации,
				"ДатаВремяЧека",
				МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса()
			);
			ФискальныеРеквизиты.Вставить("ДатаФР", ДатаФР);
			
			НомерЧека = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерЧекаЗаСмену", "");
			ФискальныеРеквизиты.Вставить("НомерЧека", НомерЧека);
			
			Объект = Параметры.Объект;
			Форма = Параметры.Форма;
			
			Если НЕ ЗначениеЗаполнено(Объект.ДатаФР) Тогда
				Если НЕ УправлениеДиалогомВызовСервера.ЗаписатьОбъект(Объект, ИСТИНА, ФискальныеРеквизиты) Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru='Не удалось записать сведения о фискальных реквизитах в документ %1. Необходимо вручную внести данные в документ: номер чека - %2, дата чека - %3, номер смены - %4, номер документа - %5'"),
							Объект.Ссылка,
							ФискальныеРеквизиты.НомерЧека,
							ФискальныеРеквизиты.ДатаФР,
							ФискальныеРеквизиты.НомерСмены, 
							ФискальныеРеквизиты.НомерДокумента),
						, 
						"НомерЧека",
						"Объект" 
					);
				КонецЕсли;
			КонецЕсли;
			ОповеститьОбИзменении(Объект.Ссылка);
			Форма.Закрыть();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Операция выполнена успешно.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОСНОВНЫХ СОБЫТИЙ ФОРМЫ ДОКУМЕНТА

// Устарела. Разобрана на составляющие.
// Общий обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ - Булево           - Признак отказа от создания формы.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПриОткрытии(Форма, Отказ) Экспорт
	
	// TODO: Разобрать
	Возврат Ложь;
	
	ЗащищенныеФункцииКлиент.НастроитьКоманднуюПанельФормы(Форма);
	
	// ПодключаемоеОборудование
	Если ЕстьРеквизитНаКлиенте(Форма,"ПоддерживаемыеТипыПодключаемогоОборудования") Тогда
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, Форма, "СканерШтрихкода, СчитывательМагнитныхКарт");
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Настройка кнопок командной панели табличной части
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Активы");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "ВыданныеАвансы");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "ГрафикРаспределенияДС");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "ДвиженияКорректировки");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Накопления");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Оплаты");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "ОприходованныеЦенности");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "ПараметрыПлана");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Платежи");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "ПоДаннымОрганизации");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "ПоДаннымКонтрагента");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Показатели");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "РаспределениеЗаказа");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Расходы");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Замены");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "РасходыИДоходы");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Скидки");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "СтатьиДДС");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Состав");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Товары");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "ТоварыЗаменители");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Услуги");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "ЦенныеБумаги");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(Форма, "Работы");
	
	// Подсистема "ОбменСКонтрагентами"
	Если НЕ Форма.Элементы.Найти("КомандыЭДО") = Неопределено Тогда
		ОбменСКонтрагентамиКлиент.ПриОткрытии(Форма);
	КонецЕсли;
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПриОткрытии()

// Устарела. Будет удалена
// Общий обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ                - Булево - Признак отказа от создания формы.
//  ЗавершениеРаботы     - Булево - Признак закрытия формы в процессе завершения работы приложения.
//  ТекстПредупреждения  - Булево - Сообщение пользователю не завершенной работе в данном окне.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПередЗакрытием()

// Устарела. Будет удалена
// Общий обработчик события возникающего на клиенте при закрытии формы.
//
// Параметры:
//  Форма            - УправляемаяФорма - Форма, в которой возникло событие.
//  ЗавершениеРаботы - Булево - Признак закрытия формы в процессе завершения работы приложения.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПриЗакрытии(Форма, ЗавершениеРаботы) Экспорт
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	// Конец ПодключаемоеОборудование
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПриЗакрытии()

// Устарела. Будет удалена.
// Обработчик события возникающего на клиенте при выборе объекта без привязки к элементу формы.
//
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
//  Объект            - ДанныеФормыСтруктура      - Объект, для которого выполняется обработка события.
//  Окно              - ОкноКлиентскогоПриложения - Содержит окно, в котором требуется открыть форму.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаВыбора(Форма, ВыбранноеЗначение, Объект, Окно, ПараметрыДействия) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаВыбора()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  Форма               - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяСобытия          - Строка           - Имя, идентифицирующее событие.
//  Параметр            - Произвольный     - Параметр сообщения.
//  Источник            - Произвольный     - Источник события.
//  ПараметрыДействия   - Структура        - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ПараметрыДействия=Неопределено) Экспорт
	
	// Обработаем в зависимости от вида события
	Если Источник="ПодключаемоеОборудование" Тогда
		
		Если НЕ Форма.ВводДоступен() Тогда
			Возврат ЛОЖЬ;
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПараметрыДействия.Вставить("КодКарты", Параметр[0]);
			Возврат ИСТИНА;
			
		ИначеЕсли ИмяСобытия = "ScanData" Тогда
			
			ШтрихКод = ?((Параметр.Количество() > 1) И (Параметр[1] <> Неопределено), Параметр[1][1], Параметр[0]);
			
			// Удалим из кода маркировки криптохвосты
			СтруктураМаркировки = МаркировкаТоваровКлиент.РазобратьШтриховойКодТовара(ШтрихКод);
			
			Если МаркировкаТоваровКлиентСервер.ЭтоКодТовараВФорматеDataMatrixGS1(ШтрихКод, СтруктураМаркировки) Тогда
				МаркировкаТоваровКлиентСервер.ЗаписатьПолныйШтрихкод(СтруктураМаркировки);
				ШтрихКод = МаркировкаТоваровКлиентСервер.СформироватьКодМаркировки(СтруктураМаркировки);
			КонецЕсли;
			
			ПараметрыДействия.Вставить("ШтрихКод", ШтрихКод);
			Возврат Истина;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписьСчетФактуры" И НЕ Форма.Элементы.Найти("НадписьНалоговыйДокумент")= Неопределено Тогда
		
		Если Источник = Форма Тогда
			Форма.НалоговыйДокумент = Параметр.Ссылка;
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	ИначеЕсли ИмяСобытия = "Записан_Документ" И Параметр <> Форма.Объект.Ссылка Тогда
		
		Форма.Прочитать();
		
		Возврат Ложь;
		
	ИначеЕсли ИмяСобытия = "ЗаписатьТаможеннуюДекларацию" Тогда
		
		Если Источник <> Форма Тогда
			Возврат Ложь;
		Иначе
			Форма.ТаможеннаяДекларация = Параметр.Ссылка;
			Возврат Истина;
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АктивизацияСтрокиНоменклатуры" ИЛИ ИмяСобытия = "ПодключенияСообщенийФискализации" Тогда
		
		Если Источник <> Форма Тогда
			Возврат Ложь;
		КонецЕсли	
		
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	Если НЕ Форма.Элементы.Найти("ДекорацияСостояниеЭДО") = Неопределено Тогда
		ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
		ПараметрыОповещения.Форма = Форма;
		ПараметрыОповещения.ДокументСсылка = Форма.Объект.Ссылка;
		ПараметрыОповещения.ДекорацияСостояниеЭДО = Форма.Элементы.ДекорацияСостояниеЭДО;
		ПараметрыОповещения.ГруппаСостояниеЭДО = Форма.Элементы.ГруппаСостояниеЭДО;
		
		ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения"  И Параметр.Найти(Форма.Объект.Ссылка) <> Неопределено Тогда
		Форма.Прочитать();
	КонецЕсли;
	// Конец подсистема "ОбменСКонтрагентами".
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(Форма, ИмяСобытия, Параметр);
			
КонецФункции // ОбработкаОповещения()

// Устарела. Будет удалена
// Общий обработчик события возникающего на клиенте перед выполнением записи объекта из формы.
//
// Параметры:
//  Форма           - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ           - Булево         - Признак отказа от записи.
//  ПараметрыЗаписи - Структура      - Структура, содержащая параметры записи.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		
		// Проверим тек объект
		Объект = Неопределено;
		ПолучитьОсновнойОбъектФормы(Форма,Объект);
		
		МногоСтрокВТч = (ЕстьРеквизитНаКлиенте(Объект,"Товары") И Объект.Товары.Количество()>500);
			
		КлючеваяОперация = "ПроведениеДокумента" + СтрЗаменить(Форма.ПолноеИмяОбъекта,"Документ.","") + ?(МногоСтрокВТч,"СБольшимКоличествомСтрок","");
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
		
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Запись") Тогда
		КлючеваяОперация = "ЗаписьДокумента" + СтрЗаменить(Форма.ПолноеИмяОбъекта,"Документ.","");
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
	Если Форма.ПравоПерезаписьАвтора И Форма.Автор <> Форма.Объект.Автор Тогда
		Форма.Объект.Автор = Форма.Автор;
	КонецЕсли;
	
	Если ЕстьРеквизитНаКлиенте(Форма.Объект, "ПодразделениеКомпании")
		И Форма.ПравоПерезаписьПодразделения
		И Форма.ПодразделениеКомпании <> Форма.Объект.ПодразделениеКомпании Тогда
		
		ТекстВопроса = НСтр("ru = 'Подразделение компании документа не соответствуют текущему пользователю:'")
			+ Символы.ПС
			+ НСтр("ru = 'Подразделение компании документа:'")
			+ Символы.НПП
			+ Форма.Объект.ПодразделениеКомпании
			+ Символы.ПС
			+ НСтр("ru = 'Подразделение компании пользователя:'")
			+ Символы.НПП
			+ Форма.ПодразделениеКомпании;
		
		СписокОтветов = Новый СписокЗначений;
		СписокОтветов.Добавить("ОК");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИзменениеПодразделения", Истина);
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ОО = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, ДополнительныеПараметры);
		ПоказатьВопрос(ОО, ТекстВопроса, СписокОтветов,,"ОК","Документ не может быть сохранен");
		
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПередЗаписью()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте после записи объекта и после завершения транзакции.
//
// Параметры:
//  Форма           - УправляемаяФорма - Форма, в которой возникло событие.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	// Проведем оповещение записи документа
	Если НЕ ПраваИНастройкиПользователяКлиент.Значение("РедактированиеДокументовПриНаличииПодчиненных") Тогда
		Оповестить("Записан_Документ", Форма.Объект.Ссылка);
	КонецЕсли;
	
	// Перезаполним введенные на основании СчетФактура и СчетНаОплату.
	ПерезаполнитьСчетФактуру(Форма, ?(ПараметрыЗаписи.Свойство("МассивВидов"), ПараметрыЗаписи.МассивВидов, Неопределено));
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ТОВАРЫ"

// Общий обработчик события начала выбора номенклатуры в табличной части "Товары" документов
// 
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Элемент              - ПолеФормы                  - Поле номенклатуры в табличной части документа.
//  ДанныеВыбора         - СписокЗначений             - Данные для выбора в поле формы.
//  ВыборДобавлением     - Булево                     - Определяет, как поле ввода обработает начало выбора значения.
//  СтандартнаяОбработка - Булево                     - Признак выполнения стандартной (системной) обработки события.
//
Процедура ТоварыНоменклатураНачалоВыбора(Форма,
										Элемент,
										ДанныеВыбора,
										ВыборДобавлением,
										СтандартнаяОбработка,
										ДополнительныеПараметры = Неопределено,
										ЦеныКонтрагента = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Объект = Форма.Объект;
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗаполнятьПараметрыИзСохраненныхНастроек", Ложь);
	
	РеквизитыЦенообразования = Новый Массив;
	РеквизитыЦенообразования.Добавить("ПодразделениеКомпании");
	РеквизитыЦенообразования.Добавить("Валюта");
	РеквизитыЦенообразования.Добавить("ТипЦен");
	РеквизитыЦенообразования.Добавить("СкладКомпании");
	Если ЦеныКонтрагента Тогда
		РеквизитыЦенообразования.Добавить("Контрагент");
	КонецЕсли;
	
	Для Каждого Реквизит Из РеквизитыЦенообразования Цикл
	
		Если ЕстьРеквизитНаКлиенте(Объект, Реквизит) Тогда
			ПараметрыОткрытия.Вставить(Реквизит, Объект[Реквизит]);
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЕстьРеквизитНаКлиенте(Объект, "КурсДокумента") Тогда
		ПараметрыОткрытия.Вставить("КурсВалюты", Объект.КурсДокумента);
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОткрытия, ДополнительныеПараметры, Истина);
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.Номенклатура.ФормаСписка",
		ПараметрыОткрытия,
		Элемент,
		,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Устарела. Переносить код в соответствующие документы.
// Общий обработчик события возникающего перед началом интерактивного добавления строки.
//
// Параметры:
//  Форма       - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент     - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево           - Признак отказа от создания формы.
//  Копирование - Булево           - Определяет режим копирования.
//  Родитель    - Ссылка           - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево           - Признак добавления группы.
//  Параметр    - Произвольный     - Параметр команды, выполняемой при добавлении строки в таблицу.
//
Процедура ТоварыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр) Экспорт
	
	Если ЕстьРеквизитНаКлиенте(Форма, "ПроверкаСоответствияКодовМаркировкиПроводилась") Тогда
		Форма.ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТоварыПередНачаломДобавления()

// Устарела. Будет удалена.
// Общий обработчик события возникающего перед началом интерактивного изменения строки.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево           - Признак отказа от создания формы.
//
Процедура ТоварыПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // ТоварыПередНачаломИзменения()

// Устарела. Переносить код в соответствующие документы.
// Общий обработчик события возникающего перед удалением строки или группы строк.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево           - Признак отказа от создания формы.
//
Процедура ТоварыПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	Если ЕстьРеквизитНаКлиенте(Форма, "ПроверкаСоответствияКодовМаркировкиПроводилась") Тогда
		Форма.ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события возникающего на клиенте при выходе из режима редактирования строки.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент              - ТаблицаФормы         - Элемент управления, в котором возникло данное событие.
//  НоваяСтрока          - Булево               - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево               - Истина, если произошла отмена редактирования.
//  ИмяТабличнойЧасти    - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  СписокРеквизитов     - Строка               - Имена реквизитов, перечисленные через запятую, в формате
//                                                требований к свойствам структуры.
//                                                Например, "Код, Наименование, Родитель".
//                       - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                                                псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                                                значения (опционально) фактическое имя поля в таблице.
//                                                Если значение не определено, то имя поля берется из ключа.
//                       - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                                                к свойствам структуры.
//                                                Служебные поля для получения данных:
//                                                _ИтогиОпераций, _Константа, _Право.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов с префиксом "Представление".
//
Функция ТоварыПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти="Товары", Объект=Неопределено, СписокРеквизитов=Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// После удаления строки набора, параметр отмены редактирования может не верно передаваться.
	Если НЕ ОтменаРедактирования И (Элемент.ТекущаяСтрока = Неопределено ИЛИ Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Элемент.ТекущаяСтрока) = Неопределено) Тогда
		
		ОтменаРедактирования = Истина;
		
	КонецЕсли;
	
	// Обработаем событие в бесконтекстном серверном вызове.
	СтруктураДанных = УправлениеДиалогомВызовСервера.ПриОкончанииРедактирования(Объект, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти, СписокРеквизитов);
	
	// Заполним реквизиты объекта измененными данными.
	Если СтруктураДанных.Свойство("_Объект") И СтруктураДанных._Объект <> Объект Тогда
		
		КопироватьДанныеФормы(СтруктураДанных._Объект, Объект);
		
	КонецЕсли;
	
	// Заполним реквизиты формы полученными данными.
	ЗаполнитьЗначенияСвойств(Форма, СтруктураДанных);
	
	// Возвращаем структуру данных для дальнейшей обработки.
	Возврат СтруктураДанных;
	
КонецФункции // ТоварыПриОкончанииРедактирования()

// Устарела. Будет удалена.
// Общий обработчик события возникающего при движении курсора в поле приемнике данных.
//
// Параметры:
//  Форма                   - УправляемаяФорма        - Форма, в которой возникло событие.
//  Элемент                 - ТаблицаФормы            - Элемент управления, в котором возникло данное событие.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - Параметры содержат тип действия, возможные действия и значение.
//  СтандартнаяОбработка    - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Строка                  - Число    - Номер строки, над которой находится курсор.
//  Поле                    - ПолеФормы - Элемент, с которым связана данная колонка таблицы.
//
Процедура ТоварыПроверкаПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // ТоварыПроверкаПеретаскивания()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СЛУЖЕБНОГО ПРОГРАММНОГО ИНТЕРФЕЙСА

// Общий обработчик события выбора одного из пунктов меню доступных хоз. операций
// 
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  Команда           - КомандаФормы              - Команда, в которой возникло данное событие.
//  Объект            - ДанныеФормыСтруктура      - Объект, для которого выполняется обработка события.
//  Окно              - ОкноКлиентскогоПриложения - Содержит окно, в котором требуется открыть форму.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаКомандыФормы(Форма, Команда, Объект, Окно = Неопределено, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
	ПараметрыЗаписиНового.ОбновитьИзмененный = Истина;
	ПараметрыЗаписиНового.ПровестиДокумент   = Истина;
	ПараметрыЗаписиНового.РезультатСобытия   = Команда;

	// Обработаем в зависимости от выбранной команды
	Если Команда.Имя = "НастроитьПараметрыДокумента" Тогда
		
		УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(Форма, Объект, ПараметрыДействия);
		
	ИначеЕсли Команда.Имя = "ПисьмоВТехПоддержку" Тогда
		
		ПараметрыФормы = Новый Структура("ТекущийОбъект", Объект.Ссылка);
		ОткрытьФорму(
			"Обработка.Поддержка.Форма.ПолучениеИнформацииОСистеме",
			ПараметрыФормы,
			Форма,
			, , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	ИначеЕсли Команда.Имя = "РедактироватьСоставДополнительныхРеквизитов" Тогда
				
		Наборы = Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта;
		
		Если Наборы.Количество() = 0
			ИЛИ НЕ ЗначениеЗаполнено(Наборы[0].Значение) Тогда
			
			ПоказатьПредупреждение(,
			НСтр("ru = 'Не удалось получить наборы дополнительных реквизитов объекта.
			|
			|Возможно у объекта не заполнены необходимые реквизиты.'"));
			
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПоказатьДополнительныеРеквизиты");
			
			ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка", ПараметрыФормы);
			
			ПараметрыПерехода = Новый Структура;
			ПараметрыПерехода.Вставить("Набор", Наборы[0].Значение);
			ПараметрыПерехода.Вставить("Свойство", Неопределено);
			ПараметрыПерехода.Вставить("ЭтоДополнительноеСведение", Ложь);
			
			ДлинаНачала = СтрДлина("ДополнительныйРеквизитЗначение_");
			ЭтоПолеФормы = (ТипЗнч(Форма.ТекущийЭлемент) = Тип("ПолеФормы"));
			Если ЭтоПолеФормы И ВРег(Лев(Форма.ТекущийЭлемент.Имя, ДлинаНачала)) = ВРег("ДополнительныйРеквизитЗначение_") Тогда
				
				ИдентификаторНабора   = СтрЗаменить(Сред(Форма.ТекущийЭлемент.Имя, ДлинаНачала +  1, 36), "x","-");
				ИдентификаторСвойства = СтрЗаменить(Сред(Форма.ТекущийЭлемент.Имя, ДлинаНачала + 38, 36), "x","-");
				
				Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(НРег(ИдентификаторНабора)) Тогда
					ПараметрыПерехода.Вставить("Набор", ИдентификаторНабора);
				КонецЕсли;
				
				Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(НРег(ИдентификаторСвойства)) Тогда
					ПараметрыПерехода.Вставить("Свойство", ИдентификаторСвойства);
				КонецЕсли;
			КонецЕсли;
			
			Оповестить("Переход_НаборыДополнительныхРеквизитовИСведений", ПараметрыПерехода);
		КонецЕсли;

	ИначеЕсли Команда.Имя = "РазрешитьРедактированиеРеквизитовОбъекта" Тогда
		
		ОбработкаПродолжения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			Форма,
			"РазрешитьРедактированиеРеквизитовОбъекта"
		);
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(Форма, ОбработкаПродолжения);
		
	ИначеЕсли Команда.Имя = "ПараметрыПечати" Тогда
		
		МассивДополнительныхРеквизитов = Новый Массив();
		Для Каждого СтрокаСвойств Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
			ДополнительныйРеквизит = Новый Структура;
			ДополнительныйРеквизит.Вставить("Свойство", СтрокаСвойств.Свойство);
			ДополнительныйРеквизит.Вставить("Значение", Форма[СтрокаСвойств.ИмяРеквизитаЗначение]);
			МассивДополнительныхРеквизитов.Добавить(ДополнительныйРеквизит);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Объект", Объект);
		ПараметрыФормы.Вставить("ОписаниеДополнительныхРеквизитов", МассивДополнительныхРеквизитов);
		ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
		ОткрытьФорму(
			"ОбщаяФорма.ПараметрыПечати",
			ПараметрыФормы,
			Форма,
			, , ,
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "ПараметрыПечатиОбъект")
		);
		
	ИначеЕсли СтрНайти(Команда.Имя,"НастройкаКомплекта") > 0 Тогда
		
		ОткрытьФорму(
			"Справочник.НастройкаПечатиКомплекта.ФормаСписка",
			Новый Структура("Документ", Объект.Ссылка),
			Форма,
			, ,  , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	ИначеЕсли ЛЕВ(Команда.Имя, 17) = "КомандаЗаполнения" Тогда
		
		ЗаполнениеДокументовКлиент.ВыполнитьПодключаемуюКомандуЗаполнения(Форма, Команда.Имя, Объект, ПараметрыДействия);
		
	ИначеЕсли ЛЕВ(Команда.Имя, 30) = "КомандаДополнительнойОбработки" Тогда
		
		Возврат НЕ ДополнительныеОтчетыИОбработкиКлиентАльфаАвто.ВыполнитьНазначаемуюКомандуНаКлиенте(Форма, Команда.Имя);
		
	ИначеЕсли Команда.Имя = "ОплатитьЧерезКассу" 
		И ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(Форма, ПараметрыЗаписиНового) Тогда
		
		// Для выполнения команды требуется провести документ
		Возврат Ложь;
		
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, "ДополнительнаяФорма") Тогда
		
		УправлениеДиалогомКлиент.ОткрытьДополнительнуюФормуОбъекта(Форма, Объект.Ссылка, Форма.ИмяДополнительнойФормы);
		
	Иначе
		
		ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
		ПараметрыЗаписиНового.ОбновитьИзмененный = Истина;
		ПараметрыЗаписиНового.РезультатСобытия   = Команда;
		
		// Общие команды списка и объекта могут быть обработаны только в случае существования ссылки в базе на объект.
		Если ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(Форма, ПараметрыЗаписиНового) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Обработаем текущую команду как команду списка
		Возврат УправлениеСпискомДокументаКлиент.ОбработкаКомандыФормы(Форма, Команда, Объект, Окно, ПараметрыДействия);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Ложь;
	
КонецФункции // ОбработкаКомандыФормы()

// Обработчик события возникающего на клиенте при изменении программно добавленного реквизита.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ПолеФормы        - Элемент управления, в котором возникло данное событие.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриИзмененииДополнительногоРеквизита(Форма, Элемент) Экспорт
	
	// Обработаем в зависимости от имени реквизита
	Если СтрНачинаетсяС(Элемент.Имя, "ДополнительныйРеквизитЗначение_") Тогда
		УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(Форма);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЛОЖЬ;
	
КонецФункции // ПриИзмененииДополнительногоРеквизита()

// Общий обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Форма                   - УправляемаяФорма - Форма, в которой возникло событие.
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//  Объект                  - ДанныеФормыСтруктура      - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры=Неопределено, Объект = Неопределено) Экспорт
	
	// Получим основной объект данных формы
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Обработаем в зависимости от переданного параметра события.
	Если ДополнительныеПараметры="ВыборЭлементаРасширенныхИтоговОперации" Тогда
		
		Попытка
			
			#Если НЕ МобильныйКлиент Тогда
			
			// Создаем объект HTML документа и производим копирование значения в буфер обмена.
			ДокументHTML = Новый COMОбъект("HTMLFile");
			ДокументHTML.ParentWindow.ClipboardData.Setdata("Text", РезультатОповещения.Значение);
			
			// Информируем пользователя о произошедшем.
			ПоказатьОповещениеПользователя(НСтр("ru = 'Буфер обмена'"),, "Значение" + " " + РезультатОповещения.Значение + " " 
				+ НСтр("ru = 'скопировано в буфер обмена.'"), БиблиотекаКартинок.Информация32);
				
			#Иначе
			ВызватьИсключение НСтр("ru = 'Функция недоступна в режиме мобильного клиента.'");
			#КонецЕсли
				
		Исключение
			ТехнологическаяПлатформаВызовСервера.СделатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при работе с COM-объектом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Дальнейшая обработка события не нужна.
		Возврат ЛОЖЬ;
		
	ИначеЕсли ДополнительныеПараметры="РазрешенияДляПересчета" Тогда
		Возврат ОбработкаРеквизитовДокументаКлиент.ОбработкаПолученияРазрешенийДляПересчета(ЭтотОбъект, РезультатОповещения);
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИзменениеПодразделения", Ложь) Тогда
		
		НастроитьПараметрыДокумента(Форма);
		Возврат Ложь;
		
	Иначе
		
		// Вызываем общий обработчик действия.
		Возврат УправлениеДиалогомКлиент.ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры, Объект);
		
	КонецЕсли;
	
КонецФункции // ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  Форма             - УправляемаяФорма - Форма, в которой возникло событие.
//  ПараметрыДействия - Структура        - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаРезультатаВыполненияДействия(Форма, ПараметрыДействия) Экспорт
	
	// Проверяем целесообразность выполнения дальнейших операций
	Если НЕ(ТипЗнч(ПараметрыДействия)=Тип("Структура") ИЛИ ТипЗнч(ПараметрыДействия)=Тип("ФиксированнаяСтруктура") ИЛИ ТипЗнч(ПараметрыДействия)=Тип("ДанныеФормыСтруктура")) Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем в зависимости от параметров действия
	Если ПараметрыДействия.Свойство("ОбновитьНастройкиКоманднойПанели") Тогда
		ЗащищенныеФункцииКлиент.НастроитьКоманднуюПанельФормы(Форма)
		
	КонецЕсли;
	
	УправлениеДиалогомКлиент.ПоказатьРезультатВыполнения(Форма, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

// Устарела. см. РаботаСФормойКлиент.ОбновитьПодчиненныеСчета
Процедура ПерезаполнитьСчетФактуру(Форма, ВидыДокументов = Неопределено) Экспорт
	
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Форма.Объект.Ссылка, ВидыДокументов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПодключаемуюКомандуПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Источник = ДополнительныеПараметры.Источник;
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ОчиститьСообщения();
		
		Попытка
			Форма.Записать();
		Исключение
			ПричинаОшибки(Форма, РезультатВопроса, ДополнительныеПараметры);
		КонецПопытки;
		
		Если Источник.Ссылка.Пустая() Или Форма.Модифицированность Тогда
			Возврат; // Запись не удалась.
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "СоздатьОткрытьТаможеннуюДекларацию" Тогда
		НадписьТаможеннаяДекларацияНажатиеПродолжение(Форма, Источник);
	Иначе
		НадписьНалоговыйДокументНажатиеПродолжение(Форма, Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьНалоговыйДокументНажатиеПродолжение(Форма, Объект)
	
	// Получим вид счет фактуры
	Если Тип("ДокументСсылка.СчетФактураПолученный") = ТипЗнч(Форма.НалоговыйДокумент) Тогда
		ВидСФ = "СчетФактураПолученный";
	Иначе
		ВидСФ = "СчетФактураВыданный";
	КонецЕсли;
	
	// Определим параметры открытия формы
	ПараметрыОткрытия = Новый Структура;
	
	// счет-фактура найден, откроем его
	Если ЗначениеЗаполнено(Форма.НалоговыйДокумент)  Тогда
		
		ПараметрыОткрытия.Вставить("Ключ", Форма.НалоговыйДокумент);
		
	Иначе
		
		// счет-фактура НЕ найден, введем новый
		ПараметрыОткрытия.Вставить("Основание", Объект.Ссылка);
		
	КонецЕсли;
		
	// откроем форму
	ОткрытьФорму("Документ." + ВидСФ + ".ФормаОбъекта", ПараметрыОткрытия,Форма);
	
КонецПроцедуры

Процедура НадписьТаможеннаяДекларацияНажатиеПродолжение(Форма, Объект)
	
	// Определим параметры открытия формы
	ПараметрыОткрытия = Новый Структура;
	
	// декларация найдена, откроем его
	Если ЗначениеЗаполнено(Форма.ТаможеннаяДекларация)  Тогда
		
		ПараметрыОткрытия.Вставить("Ключ", Форма.ТаможеннаяДекларация);
		
	Иначе
		
		// декларация НЕ найдена, введем новый
		ПараметрыОткрытия.Вставить("Основание", Объект.Ссылка);
		
	КонецЕсли;
		
	// откроем форму
	ОткрытьФорму("Документ.ТаможеннаяДекларацияИмпорт.ФормаОбъекта", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

Функция ПолучитьШаблонЧека(ОписаниеОшибки, ПараметрыПробития)
	
	// Общие параметры чека
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыПробития, "НеФормироватьЧек", Ложь) Тогда
		Возврат ОбщиеПараметры;
	КонецЕсли;
	
	// Определим вид выписки (расход/приход) и если указаны возвраты, то возврат
	Объект = ПараметрыПробития.Объект;
	
	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	ОбщиеПараметры.НомерКассы = "00001";
	ОбщиеПараметры.НомерСмены = 0;
	ОбщиеПараметры.НомерЧека = 0;
		
	// Определим телефон и/или емаил
	Если ЕстьРеквизитНаКлиенте(Объект,"ТелефонEmailПокупателя") И ЗначениеЗаполнено(Объект.ТелефонEmailПокупателя) Тогда
		
		ЕстьОшибкаТелефонаEmail = Ложь;
		
		Телефон = СтрЗаменить(Объект.ТелефонEmailПокупателя, " " ,"");
		Телефон = СтрЗаменить(Телефон, "(" ,"");
		Телефон = СтрЗаменить(Телефон, ")" ,"");
		Телефон = СтрЗаменить(Телефон, "-" ,"");
		
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Объект.ТелефонEmailПокупателя) Тогда
			ОбщиеПараметры.ПокупательEmail = Объект.ТелефонEmailПокупателя;
		ИначеЕсли ОбщегоНазначенияАвтосалонКлиентСервер.СтрокаСодержитТолькоДопустимыеСимволы(Телефон,"+0123456789") Тогда
			ДлинаНомера = СтрДлина(Телефон);
			Если СтрНайти(Телефон,"+") = 1 И ДлинаНомера = 12 Тогда
				// считаем что номер задан верно.
				ОбщиеПараметры.ПокупательНомер = Телефон;
			Иначе
				Если ДлинаНомера = 11 Тогда
					// предположим, что телефон ввели в формате 8 *** ***-**-**.
					ТелефонБезКода = ОбщегоНазначенияАвтосалонКлиентСервер.НомерТелефонаБезКодаСтраны(Телефон);
					Если Прав(Телефон, 10) = ТелефонБезКода Тогда
						ОбщиеПараметры.ПокупательНомер = "+7" + ТелефонБезКода;
					Иначе
						ЕстьОшибкаТелефонаEmail = Истина;
					КонецЕсли;
				Иначе
					ЕстьОшибкаТелефонаEmail = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЕстьОшибкаТелефонаEmail = Истина;
		КонецЕсли;
		
		Если ЕстьОшибкаТелефонаEmail Тогда
			ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки),ОписаниеОшибки + Символы.ПС, ОписаниеОшибки)
				+ НСтр("ru = 'В поле ""Телефон или электронный адрес покупателя"" введены не корректные данные'");
			Возврат ОбщиеПараметры;
		КонецЕсли;
	КонецЕсли;
	
	// Дополнительный реквизит чека
	Если ЕстьРеквизитНаКлиенте(Объект,"ДополнительныйРеквизитЧека") И ЗначениеЗаполнено(Объект.ДополнительныйРеквизитЧека) Тогда
		ОбщиеПараметры.ДополнительныйРеквизит = Объект.ДополнительныйРеквизитЧека;
	КонецЕсли;
	
	УправлениеДиалогомВызовСервера.ПолучитьШаблонЧека(ОбщиеПараметры,ОписаниеОшибки,ПараметрыПробития);
	
	Возврат ОбщиеПараметры;

КонецФункции

Функция ПолучитьШаблонЧекаКоррекции(ОписаниеОшибки, ПараметрыПробития) Экспорт
	
	// Общие параметры чека
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыПробития, "НеФормироватьЧек", Ложь) Тогда
		Возврат ОбщиеПараметры;
	КонецЕсли;
	
	// Определим вид выписки (расход/приход) и если указаны возвраты, то возврат
	Объект = ПараметрыПробития.Объект;
	
	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	ОбщиеПараметры.НомерКассы = "00001";
	ОбщиеПараметры.НомерСмены = 0;
	ОбщиеПараметры.НомерЧека = 0;
	
	// Определим телефон и/или емаил
	Если ЕстьРеквизитНаКлиенте(Объект,"ТелефонEmailПокупателя") И ЗначениеЗаполнено(Объект.ТелефонEmailПокупателя) Тогда
		
		ЕстьОшибкаТелефонаEmail = Ложь;
		Телефон = СтрЗаменить(Объект.ТелефонEmailПокупателя, " " ,"");
		Телефон = СтрЗаменить(Телефон, "(" ,"");
		Телефон = СтрЗаменить(Телефон, ")" ,"");
		Телефон = СтрЗаменить(Телефон, "-" ,"");
		
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Объект.ТелефонEmailПокупателя) Тогда
			ОбщиеПараметры.ПокупательEmail = Объект.ТелефонEmailПокупателя;
		ИначеЕсли ОбщегоНазначенияАвтосалонКлиентСервер.СтрокаСодержитТолькоДопустимыеСимволы(Телефон,"+0123456789") Тогда
			ДлинаНомера = СтрДлина(Телефон);
			Если СтрНайти(Телефон,"+") = 1 И ДлинаНомера = 12 Тогда
				// считаем что номер задан верно.
				ОбщиеПараметры.ПокупательНомер = Телефон;
			Иначе
				Если ДлинаНомера = 11 Тогда
					// предположим, что телефон ввели в формате 8 *** ***-**-**.
					ТелефонБезКода = ОбщегоНазначенияАвтосалонКлиентСервер.НомерТелефонаБезКодаСтраны(Телефон);
					Если Прав(Телефон, 10) = ТелефонБезКода Тогда
						ОбщиеПараметры.ПокупательНомер = "+7" + ТелефонБезКода;
					Иначе
						ЕстьОшибкаТелефонаEmail = Истина;
					КонецЕсли;
				Иначе
					ЕстьОшибкаТелефонаEmail = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЕстьОшибкаТелефонаEmail = Истина;
		КонецЕсли;
		
		Если ЕстьОшибкаТелефонаEmail Тогда
			ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки),ОписаниеОшибки + Символы.ПС, ОписаниеОшибки)
				+ НСтр("ru = 'В поле ""Телефон или электронный адрес покупателя"" введены не корректные данные'");
			Возврат ОбщиеПараметры;
		КонецЕсли;
		
	КонецЕсли;
	
	// Дополнительный реквизит чека
	Если ЗначениеЗаполнено(Объект.ДополнительныйРеквизитЧека) Тогда
		ОбщиеПараметры.ДополнительныйРеквизит = Объект.ДополнительныйРеквизитЧека;
	КонецЕсли;
	
	ДанныеКассира = МенеджерОборудованияКлиентСервер.ТекущийКассирДляФискальныхОпераций();
	ОбщиеПараметры.Кассир = ДанныеКассира.Кассир;
	ОбщиеПараметры.КассирИНН = ДанныеКассира.КассирИНН;
	
	УправлениеДиалогомВызовСервера.ПолучитьШаблонЧекаКоррекции(ОбщиеПараметры, ОписаниеОшибки, ПараметрыПробития);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

Процедура ПродолжитьПробитиеЧекаЭТПослеПодключенияККТ(Результат, ПараметрыДействия) Экспорт
	
	Если ПараметрыДействия.Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЧекНаОплатуВозврат")
		ИЛИ ПараметрыДействия.Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЧекНаОплатуПокупкиВозврат") 
		ИЛИ ПараметрыДействия.Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЧекНаВозврат") Тогда
		ТипТранзакции = "AuthorizeRefund";
	Иначе
		ТипТранзакции = "AuthorizeSales";
	КонецЕсли;
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = ТипТранзакции;
	ПараметрыОперации.СуммаОперации  = ПараметрыДействия.СуммаПоЭТ;
	ПараметрыОперации.НомерЧека      = "";
	ПараметрыОперации.НомерЧекаЭТ    = "";
	ПараметрыОперации.СсылочныйНомер = "";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ПараметрыДействия);
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
		ОписаниеОповещения,
		ПараметрыДействия.Форма.УникальныйИдентификатор,
		Неопределено,
		ПараметрыОперации,
		,
		ПараметрыДействия.Объект.Фр
	);
	
КонецПроцедуры

#КонецОбласти