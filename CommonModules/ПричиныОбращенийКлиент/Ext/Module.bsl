
#Область ПрограммныйИнтерфейс

// Формирует списка авторабот для причины обращения.
//
// Параметры:
//  guidПричины - Строка - Идентификатор причины обращения.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Автоработы - Список авторабот причины обращения.
//
Функция АвтоработыПричиныОбращения(guidПричины) Экспорт
	
	Возврат ПричиныОбращенийСлужебныйВызовСервера.АвтоработыПричиныОбращения(guidПричины);
	
КонецФункции

// Перенос причины обращения из одного заказ-наряда в другой.
//
// Параметры:
//  Приемник - ДокументСсылка.ЗаказНаряд - куда перемещается причина обращения.
//  Источник - ДокументСсылка.ЗаказНаряд - документ, из которого перемещается причина обращения.
//  ПричиныОбращения - Массив - список причин обращения для переноса.
// 
// Возвращаемое значение:
//  Неопределено - возврат пустого результата действия.
//
Функция ПеренестиПричинуОбращения(Приемник, Источник, ПричиныОбращения) Экспорт
	
	ПричиныОбращенийСлужебныйВызовСервера.ПеренестиПричинуОбращения(Приемник, Источник, ПричиныОбращения);
	
КонецФункции

// Устарела. Перенос авторабот из одного заказ-наряда в другой.
//
// Параметры:
//  Приемник         - ДокументСсылка.ЗаказНаряд - куда перемещается авторабота.
//  Источник         - ДокументСсылка.ЗаказНаряд - документ, из которого перемещается авторабота.
//  Автоработы - Массив - список авторабот для переноса.
// 
// Возвращаемое значение:
//  Неопределено - возврат пустого результата действия.
//
Функция ПеренестиАвтоработы(Приемник, Источник, Автоработы) Экспорт
	
	ПричиныОбращенийСлужебныйВызовСервера.ПеренестиАвтоработы(Приемник, Источник, Автоработы);
	
КонецФункции

// Возвращает первую строку причин обращения. Если нет указанных причин - создает строку.
//
// Параметры:
//  Объект - ДокументСсылка.ЗаказНаряд, ДокументСсылка.ЗаявкаНаРемонт - документ, для которого выполняется обработка.
//
// Возвращаемое значение:
//  СтрокаТабличнойЧасти - первая сстрока причины обращения.
//
Функция ПерваяСтрокаПричиныОбращения(Объект) Экспорт
	
	Если Объект.ПричиныОбращения.Количество() = 0 Тогда
		Возврат Объект.ПричиныОбращения.Добавить();
	Иначе
		Возврат Объект.ПричиныОбращения[0];
	КонецЕсли;
	
КонецФункции

// Заполняет идентификатор причины обращения для работ и товаров идентификатором первой строки в причинах обращения.
// Если в документе нет ни одной причины идентификаторы будут очищены.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаряд, ДокументОбъект.ЗаявкаНаРемонт - Документ для таблиц которого
//                                                                      необходимо выполнить заполнение.
//  ПроверятьЗаполнениеИдентификатора - Булево - Признак проверки заполненности идентификатора перед его заполнением.
//                                               Не используется при пустой таблице причин.
//                                               Истина - идентификатор будет устанавливаться
//                                                        только для строк с пустым идентификатором.
//                                               Ложь - Заменит идентификатор для всех строк.
//
Процедура ОбновитьИдентификаторыТаблиц(Объект, ПроверятьЗаполнениеИдентификатора = Истина) Экспорт
	
	Если Объект.ПричиныОбращения.Количество() = 0 Тогда
		// очистим идентификаторы
		Для Каждого Строка Из Объект.Автоработы Цикл
			Строка.ИдентификаторПричиныОбращения = "";
		КонецЦикла;
		
		Для Каждого Строка Из Объект.Товары Цикл
			Строка.ИдентификаторПричиныОбращения = "";
		КонецЦикла;
	Иначе
		ПервыйИдентификатор = Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
		Если НЕ ЗначениеЗаполнено(ПервыйИдентификатор) Тогда
			ПервыйИдентификатор = Новый УникальныйИдентификатор;
			Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения = ПервыйИдентификатор;
		КонецЕсли;
		
		Для Каждого Строка Из Объект.Автоработы Цикл 
			Если ПроверятьЗаполнениеИдентификатора И ПустаяСтрока(Строка.ИдентификаторПричиныОбращения) Тогда
				Строка.ИдентификаторПричиныОбращения = ПервыйИдентификатор;
			ИначеЕсли Не ПроверятьЗаполнениеИдентификатора Тогда
				Строка.ИдентификаторПричиныОбращения = ПервыйИдентификатор;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из Объект.Товары Цикл
			Если ПроверятьЗаполнениеИдентификатора И ПустаяСтрока(Строка.ИдентификаторПричиныОбращения) Тогда
				Строка.ИдентификаторПричиныОбращения = ПервыйИдентификатор;
			ИначеЕсли Не ПроверятьЗаполнениеИдентификатора Тогда
				Строка.ИдентификаторПричиныОбращения = ПервыйИдентификатор;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку причины обращения.
//
// Параметры:
//  Строка - СтрокаТабличнойЧасти - заполняемая строка;
//  ВыбранноеЗначение - СправочникСсылка.ПричиныОбращений - причина обращения строки.
//  Параметры - Структура - дополнительные параметры.
//
Процедура ЗаполнитьСтрокуПричиныПоВыбранномуЗначению(Строка, ВыбранноеЗначение, Параметры) Экспорт
	
	Если ПустаяСтрока(Строка.ИдентификаторПричиныОбращения) Тогда
		
		Строка.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		Строка,
		ПричиныОбращенийСлужебныйВызовСервера.ДанныеСтрокиПричиныОбращения(ВыбранноеЗначение, Параметры));
	
	Если ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЗаменитьВыбранноеЗначениеПричины", Истина) Тогда
		
		ВыбранноеЗначение = Строка.ПричинаОбращенияСодержание;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет добавление новой строки причины обращения в документ
//
// Параметры:
//  Причина - СправочникСсылка.ПричиныОбращения - Добавляемая причина.
//  Объект  - ДанныеФормыСтруктура - Объект документа в который добавляется новая причина.
//  РежимДобавления - Строка - Определяет режим добавления новой причины обращения. Может принимать значения:
//                               "ПерваяСтрока" - Добавление происходит в первую строку с заменой предыдущего значения.
//                                                Если таблица причин пустая - добавляется новая строка.
//                               "НоваяСтрокаБезДублирования" - Добавление происходит в новую строку если в таблице нет
//                                                              строк с данной причиной.
//                               "НоваяСтрока" - Всегда добавляется новая строка.
//  ЗаменитьВыбранноеЗначениеПричины - Булево - (необязательное) Истина, если заменять выбранное значение.
//
// Возвращаемое значение:
//  Структура,Неопределено - Неопределено если не удалось добавить новую строку.
//                           Структура с ключами:
//                             "НеобходимаПостобработка". Булево. Признак необходимости обработать добавление новой причины.
//                             "Строка". ЭлементКоллекции. Объект строки причины обращения.
//
Функция ДобавитьПричиныОбращенияВДокумент(
	Причина,
	Объект,
	РежимДобавления = "ПерваяСтрока",
	ЗаменитьВыбранноеЗначениеПричины = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Причина) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если РежимДобавления = "ПерваяСтрока" Тогда
		
		СтрокаПричины = ПерваяСтрокаПричиныОбращения(Объект);
		
	ИначеЕсли СтрНачинаетсяС(РежимДобавления, "НоваяСтрока") Тогда
		
		Если РежимДобавления = "НоваяСтрокаБезДублирования" Тогда
			
			СтрокиПричины = Объект
				.ПричиныОбращения
				.НайтиСтроки(Новый Структура("ПричинаОбращения", Причина));
			
			Если СтрокиПричины.Количество() > 0 Тогда
				
				Возврат Новый Структура("Строка,НеобходимаПостобработка", СтрокиПричины[0], Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаПричины = Объект
			.ПричиныОбращения
			.Добавить();
		
	КонецЕсли;
	
	Если СтрокаПричины = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПараметрыДобавления = ПолучитьПараметрыЗаполненияПоОбъекту(Объект);
	ПараметрыДобавления.Вставить("ЗаменитьВыбранноеЗначениеПричины", ЗаменитьВыбранноеЗначениеПричины);
	ЗаполнитьСтрокуПричиныПоВыбранномуЗначению(СтрокаПричины, Причина, ПараметрыДобавления);
	
	Возврат Новый Структура("Строка,НеобходимаПостобработка", СтрокаПричины, Истина);
	
КонецФункции // ДобавитьПричиныОбращенияВДокумент()

#Область ОписаниеПричинОбращения

// Обработчик события возникающего на клиенте во время начала ожидания ввода текста.
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  Текст - Строка - Строка текста, введенная в поле ввода..
//  ДанныеВыбора - СписокЗначений - Содержит список значений, который будет использован 
//                                  при стандартной обработке события.
//  ПараметрыПолученияДанных - Структура, Неопределено - Содержит параметры поиска, которые будут переданы
//                                                       в метод ПолучитьДанныеВыбора.
//  Ожидание - Число - Интервал в секундах после ввода текста, через который произошло событие.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной
//                                  (системной) обработки события.
//
Процедура ОписаниеПричиныОбращенияАвтоПодбор(Элемент,
	Текст,
	ДанныеВыбора,
	ПараметрыПолученияДанных,
	Ожидание,
	СтандартнаяОбработка) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Отбор"               , Новый Структура());
	ПараметрыПодбора.Вставить("СтрокаПоиска"        , Текст);
	ПараметрыПодбора.Вставить("ВыборГруппИЭлементов", ПредопределенноеЗначение("ИспользованиеГруппИЭлементов.Элементы"));
	ПараметрыПодбора.Вставить("Источник"            , "ЗаявкаНаРемонт_ПричинаОбращения");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ПричиныОбращений"), ПараметрыПодбора);
	
КонецПроцедуры // ОписаниеПричиныОбращенияАвтоПодбор()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Описание причины обращения".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной)
//                                  обработки события.
//
Процедура ОписаниеПричиныОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ЗапретитьВыбор", Ложь));
	
	ОткрытьФорму(
		"Справочник.ПричиныОбращений.ФормаВыбора",
		ПараметрыОткрытия,
		Элемент,
		Элемент,
		, , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ОписаниеПричиныОбращенияНачалоВыбора()

// Заполняет описание причины обращения.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаряд, ДокументОбъект.ЗаявкаНаРемонт - Документ для таблиц которого
//                                                                      необходимо выполнить заполнение.
//  Элемент - ПолеФормы - поле описания причины обращения.
//
Процедура ОбновитьОписаниеПричиныОбращения(Объект, Элемент) Экспорт
	
	Объект.ОписаниеПричиныОбращения = "";
	Для Каждого Причина Из Объект.ПричиныОбращения Цикл
		Объект.ОписаниеПричиныОбращения = Объект.ОписаниеПричиныОбращения
			+ ?(ПустаяСтрока(Объект.ОписаниеПричиныОбращения), "", "; ") + Причина.ПричинаОбращенияСодержание;
		
		Если СтрДлина(Объект.ОписаниеПричиныОбращения) > 300 Тогда
			Объект.ОписаниеПричиныОбращения = Лев(Объект.ОписаниеПричиныОбращения, 297) + "...";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элемент.Доступность = (Объект.ПричиныОбращения.Количество() <= 1);
	
КонецПроцедуры // ОбновитьОписаниеПричиныОбращения()

#КонецОбласти

#Область ПричиныОбращения

// Открывает формы выбора причины обращения
//
// Параметры:
//  Элемент - ПолеФормы - элемент причины обращения;
//  ПричинаОбращения - СправочникСсылка.ПричиныОбращений - причина обращения.
//
Процедура ОткрытьФормуВыбораПричиныОбращения(Элемент, ПричинаОбращения) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора"   , Истина);
	ПараметрыОткрытия.Вставить("ТекущаяСтрока" , ПричинаОбращения);
	ПараметрыОткрытия.Вставить("Отбор"         , Новый Структура("ЗапретитьВыбор", Ложь));
	
	ОткрытьФорму("Справочник.ПричиныОбращений.ФормаВыбора", ПараметрыОткрытия, Элемент, Элемент, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьФормуВыбораПричиныОбращения()

// Запускает форму редактирования данных строки причины.
//
// Параметры:
//  Строка - ДанныеФормыЭлементКоллекции - Данные редактируемой причины обращения.
//  Форма - УправляемаяФорма - Форма из которой вызывается редактирование.
//  Обработчик - ОписаниеОповещения - (необязательное) Нестандартный обработчик события завершения.
//  ТолькоПросмотр - Булево - (необязательное) Истина, если причина недоступна для редактирования.
//                            Значнеие по умолчанию - Ложь.
//
Процедура НачатьРедактированиеПричины(Строка, Форма, Обработчик = Неопределено, ТолькоПросмотр = Ложь) Экспорт
	
	Если Строка = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Обработчик = Неопределено И НЕ ТолькоПросмотр Тогда
		
		Обработчик = Новый ОписаниеОповещения(
			"Подключаемый_РедактированиеПричиныЗавершение", Форма, Строка.ПолучитьИдентификатор());
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПричинаОбращения");
	ПараметрыФормы.Вставить("ТипПричиныОбращения");
	ПараметрыФормы.Вставить("ВидРемонтаПричиныОбращения");
	ПараметрыФормы.Вставить("ПричинаОбращенияСодержание");
	ПараметрыФормы.Вставить("НормаВремени");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Строка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
		ОткрытьФорму("Документ.ЗаявкаНаРемонт.Форма.ФормаРедактированияСтрокиПричиныОбращения",
			ПараметрыФормы, Форма, Форма, , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // НачатьРедактированиеПричины()

// Заполняет строку причины обарщения по переданным данным.
//
// Параметры:
//  ДанныеСтроки - Структура, Неопределено - Структура с полями строки причины 
//                                           или Неопределено при отмене редактирования.
//  КлючСтроки -  Число - Идентификатор редактируемой строки
//  Форма - УправляемаяФорма - Форма из которой вызывается редактирование.
//  Объект -  - (необязательное) основной объект формы.
//  ЭлементОписания - Строка - (необязательное) - имя элемента формы описания причины ообращения.
//  
// Возвращаемое значение:
//  Булево - Истина, если операция завершилась успешно, в противном случае - Ложь.
//
Функция ЗаполнитьСтрокуПричины(
	ДанныеСтроки, КлючСтроки, Форма, Объект = Неопределено, ЭлементОписания = "ОписаниеПричиныОбращения") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	Строка = Объект.ПричиныОбращения.НайтиПоИдентификатору(КлючСтроки);
	ЗаполнятьСвязанные = (Строка.ПричинаОбращения <> ДанныеСтроки.ПричинаОбращения);
	
	Если ПустаяСтрока(Строка.ИдентификаторПричиныОбращения) Тогда
		
		Строка.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
	
	Если ЗаполнятьСвязанные Тогда
		
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, Строка, Форма);
		
	КонецЕсли;
	
	ОбновитьОписаниеПричиныОбращения(Объект, Форма.Элементы[ЭлементОписания]);
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьСтрокуПричины()

// Включение/отключение отбора товаров и работ в заказ-нарядах в разрезе причин обращений.
//
// Параметры:
//  Причина - Структура - Структура текущей строки причины обращения.
//  ТаблицаФормы - ТаблицаФормы - Таблица формы причин обращения.
//  ИспользоватьПричиныОбращений - Булево - Признак использования причин обращения.
//
Процедура ОтобратьДанныеПоПричинеОбращения(Причина, ТаблицаФормы, ИспользоватьПричиныОбращений) Экспорт
	
	Если (НЕ ИспользоватьПричиныОбращений) ИЛИ (Причина = Неопределено) Тогда
		ТаблицаФормы.ОтборСтрок = Неопределено;
	Иначе
		ТаблицаФормы.ОтборСтрок = Новый ФиксированнаяСтруктура(
			"ИдентификаторПричиныОбращения", Причина.ИдентификаторПричиныОбращения);
	КонецЕсли;
	
КонецПроцедуры // ОтобратьДанныеПоПричинеОбращения()

// Очищает идентификаторы причин обращения при удалении причины обращения.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаряд, ДокументОбъект.ЗаявкаНаРемонт - Документ для таблиц которого
//                                                                      необходимо обработать событие.
//  Идентификатор - Строка - Идентификатор причины обращения.
//
Процедура СброситьИдентификаторПричиныОбращения(Объект, Идентификатор) Экспорт
	
	Отбор = Новый Структура("ИдентификаторПричиныОбращения", Идентификатор);
	СтрокиУдаляемогоЭлемента = Объект.Автоработы.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из СтрокиУдаляемогоЭлемента Цикл
		Строка.ИдентификаторПричиныОбращения = "";
	КонецЦикла;
	
	СтрокиУдаляемогоЭлемента = Объект.Товары.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из СтрокиУдаляемогоЭлемента Цикл
		Строка.ИдентификаторПричиныОбращения = "";
	КонецЦикла;
	
КонецПроцедуры // СброситьИдентификаторПричиныОбращения()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыЗаполненияПоОбъекту(Объект)
	
	ТипОбъекта = ТипЗнч(Объект.Ссылка);
	
	Если ТипОбъекта = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		
		Возврат Новый Структура("Модель,Комплектация", Объект.Модель, Объект.ВариантКомплектации);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		Возврат Новый Структура("Документ", Объект.СводныйРемонтныйЗаказ);
		
	КонецЕсли;
	
	Возврат Новый Структура;
	
КонецФункции

#КонецОбласти
