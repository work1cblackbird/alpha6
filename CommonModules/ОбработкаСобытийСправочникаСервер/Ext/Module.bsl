// Общий модуль "Обработка событий справочника (сервер)"

#Область ПрограммныйИнтерфейс

// Общий обработчик события заполнения объекта при вводе на основании существующего.
//
// Параметры:
//  Объект					- ДокументОбъект	- Объект, для которого выполняется обработка события.
//  ДанныеЗаполнения		- Произвольный		- Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения			- Строка			- Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка	- Булево			- В данный параметр передается признак выполнения системной обработки события.
//  ИменаИсключаемыхРеквизитов	- Строка			- текст, содержащий имена реквизитов, которые не будут заполняться.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ОбработкаЗаполненияНаОсновании(Объект, ДанныеЗаполнения, ТекстЗаполнения, 
											СтандартнаяОбработка, ИменаИсключаемыхРеквизитов = "") Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЗащищенныеФункцииСервер.ОбработкаЗаполненияНаОсновании(Объект, ДанныеЗаполнения, ТекстЗаполнения, 
												СтандартнаяОбработка, ИменаИсключаемыхРеквизитов,"ОбработкаСобытийСправочникаСервер");
	
КонецФункции // ОбработкаЗаполненияНаОсновании()

// Общий обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  Объект						- СправочникОбъект	- Объект, для которого выполняется обработка события.
//  ДанныеЗаполнения			- Произвольный		- Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения				- Строка			- Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка		- Булево			- В данный параметр передается признак выполнения системной обработки события.
//  ИменаИсключаемыхРеквизитов	- Строка			- текст, содержащий имена реквизитов, которые не будут заполняться.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ОбработкаЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ИменаИсключаемыхРеквизитов = "") Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЗащищенныеФункцииСервер.ОбработкаЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, 
												СтандартнаяОбработка, ИменаИсключаемыхРеквизитов,"ОбработкаСобытийСправочникаСервер");
	
КонецФункции // ОбработкаЗаполнения()

// Общий обработчик события вызываемый по подписке после заполнения объекта как при создании нового,
// так и при вводе на основании существующего.
//
// Параметры:
//  Объект					- ДокументОбъект	- Объект, для которого выполняется обработка события.
//  ДанныеЗаполнения		- ДокументСсылка	- Содержит ссылку на передаваемый объект метаданных.
//  ТекстЗаполнения			- Строка			- Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка	- Булево			- В данный параметр передается признак выполнения системной обработки события.
//
Процедура ПослеЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	// Проверим на отказ от выполнения стандартной обработки события
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Зарезервировано = Истина;
	
КонецПроцедуры // ПослеЗаполнения()

// Общий обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  Объект            - СправочникОбъект - Объект, для которого выполняется обработка события.
//  ОбъектКопирования - СправочникОбъект - Исходный объект, который является источником копирования.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	// Получим менеджер объекта
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Произведем очистку реквизитов, которые являются уникальными в пределах таблицы объекта.
	Для каждого УникальныйРеквизит Из МенеджерОбъекта.ПолучитьУникальныеРеквизиты(Объект) Цикл
		Если НЕ ТипЗнч(УникальныйРеквизит.Значение) = Тип("Массив") Тогда
			Объект[УникальныйРеквизит.Ключ] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Копировать значения реквизитов подчиненных этому же справочнику не имеет смысла
	Для каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект[Реквизит.Имя]));
		
		Если (НЕ ОбъектМетаданных = Неопределено) И Метаданные.Справочники.Содержит(ОбъектМетаданных) 
			И ОбъектМетаданных.Владельцы.Количество() > 0 И ТипЗнч(Объект[Реквизит.Имя].Владелец) = ТипЗнч(Объект.Ссылка) Тогда
			Объект[Реквизит.Имя] = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	// Инициализируем реквизиты, зависящие от текущего контекста ввода
	Если ЕстьРеквизит(Объект, "ДатаСоздания") Тогда
		Объект.ДатаСоздания = Дата("00010101");
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "Автор") Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Производим корректировку копируемых реквизитов
	Если ЕстьРеквизит(Объект, "Комментарий") Тогда
		Объект.Комментарий = "";
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ПриКопировании()

// Общий обработчик события возникающего при необходимости проверки заполнения реквизитов при записи объекта.
//
// Параметры:
//  Объект               - СправочникОбъект - Объект, для которого выполняется обработка события.
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	// Проверку обязательных реквизитов производим по данным служебных функций из модуля менеджера.
	ПроверяемыеРеквизиты.Очистить();
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производится.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Объект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Прекращаем обработку если пользователь работает в "супер" режиме
	Если НЕ  ПраваИНастройкиПользователя.Значение("ПроверкаЗаполненияСправочниковИДокументов", Объект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Выполняем общую проверку корректности заполнения объекта
	ОбработкаСобытийОбъектаСервер.ПроверитьЗаполнениеРеквизитовОбъекта(Объект, Отказ, ПроверяемыеРеквизиты);
	
	// Выполняем общую проверку соответствия установленным в конфигураторе параметрам выбора.
	ОбработкаСобытийОбъектаСервер.ПроверитьПараметрыВыбораРеквизитовОбъекта(Объект, Отказ);
	
	// Проверим Подразделение и Организацию объекта на соответствие
	ОбработкаСобытийОбъектаСервер.ПроверитьСоответствиеОрганизацииПодразделения(Объект, Отказ);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаПроверкиЗаполнения()

// Общий обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Объект - СправочникОбъект - Объект, для которого выполняется обработка события.
//  Отказ  - Булево           - Признак отказа от совершения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ПередЗаписью(Объект, Отказ) Экспорт
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производится.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Объект) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	// Дальнейшие операции будем выполнять только в случае успешного выполнения предшествующих.
	Если Отказ Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Получим текущие значения флагов управляющих проверками возможности записи или модификации объекта.
	ПроверкаИзмененияОбъектовПараметровУчета = ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, "ПроверкаИзмененияОбъектовПараметровУчета", Истина);
	ПроверкаИзмененияПометкиУдаления         = ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, "ПроверкаИзмененияПометкиУдаления",         Истина);
	
	// Контроль возможности изменения состояния пометки удаления объекта
	Если ПроверкаИзмененияПометкиУдаления И НЕ Объект.ЭтоНовый() И Объект.Модифицированность() И НЕ ПравоДоступа("ИнтерактивнаяПометкаУдаления", Объект.Ссылка.Метаданные()) И Объект.ПометкаУдаления<>Объект.Ссылка.ПометкаУдаления Тогда
		Если Объект.ПометкаУдаления Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Недостаточно прав для установки пометки удаления элемента ""%1""'"),Объект),
				Объект,,, Отказ
			);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Недостаточно прав для снятия пометки удаления элемента ""%1""'"),Объект),
				Объект,,, Отказ
			);

		КонецЕсли;
	КонецЕсли;
	
	// Проверим объект на использование его в константах
	Если ПроверкаИзмененияОбъектовПараметровУчета 
		И НЕ Объект.ЭтоНовый() 
		И Объект.Модифицированность()
		И НЕ  ПраваИНастройкиПользователя.Значение("РедактированиеОбъектовЗначенийКонстант", Объект) Тогда
		
		ИмяКонстанты = "";
		Если ОбработкаСобытийОбъектаСервер.ПроверитьИспользованиеСсылкиВКонстантах(Объект.Ссылка, ИмяКонстанты) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Недостаточно прав для изменения элемента указанного в значении параметра учета ""%1""'"),
					ИмяКонстанты
				),
				Объект,
				,, Отказ
			);

		КонецЕсли;
	КонецЕсли;
	
	// Дальнейшие операции будем выполнять только в случае успешного выполнения предшествующих.
	Если Отказ Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Установим дату создания документа
	Если Объект.ЭтоНовый() И ЕстьРеквизит(Объект, "ДатаСоздания") Тогда
		Объект.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", ?(Объект.ЭтоНовый(), Истина, Ложь));
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ПередЗаписью()

// Общий обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Объект - СправочникОбъект - Объект, для которого выполняется обработка события.
//  Отказ  - Булево           - Признак отказа от совершения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ПриЗаписи(Объект, Отказ) Экспорт
	
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Объект) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПеренестиСвойстваСРодителей(Объект, Отказ);
	
	Возврат Истина;
	
КонецФункции

// Устарела. Будет удалена.
// Общий обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Объект - СправочникОбъект - Объект, для которого выполняется обработка события.
//  Отказ  - Булево           - Признак отказа от совершения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ПередУдалением(Объект, Отказ) Экспорт
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производится.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Объект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ПередУдалением()

// Общий обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКомпании) И ЕстьРеквизит(Объект, "Организация") И (НЕ Объект.Организация=Объект.ПодразделениеКомпании.Организация) Тогда
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Подразделение ""%1"" не принадлежит организации ""%2""'"),
					Объект.ПодразделениеКомпании,
					Объект.Организация
				), 
				Объект.Ссылка,
				"Организация"
			);
		КонецЕсли;
		Объект.Организация = Объект.ПодразделениеКомпании.Организация;
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЕстьРеквизит(Объект, "ПодразделениеКомпании") И ЗначениеЗаполнено(Объект.ПодразделениеКомпании) И (НЕ Объект.ПодразделениеКомпании.Организация=Объект.Организация) Тогда
		ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Подразделение ""%1"" не принадлежит организации ""%2""'"),
					Объект.ПодразделениеКомпании,
					Объект.Организация
				), 
				Объект.Ссылка,
				"Организация"
			);

	КонецЕсли
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Общий обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
// Производит заполнение объекта по умолчанию.
//
// Параметры:
//  Объект                     - СправочникОбъект - Объект, для которого выполняется обработка события.
//  ТекстЗаполнения            - Строка         - Текст, используемый для заполнения объекта.
//  ПараметрыДействия          - Структура      - Набор параметров, использующихся при выполнения операции.
//  ИменаИсключаемыхРеквизитов - Строка - Перечень реквизитов, разделенных зяпятой, которые не учавствуют в обработке.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ЗаполнитьОбъектПоУмолчанию(Объект, ТекстЗаполнения,ПараметрыДействия, ИменаИсключаемыхРеквизитов = "") Экспорт
	
	// Произведем инициализацию реквизитов, которые устанавливаются один раз при создании объекта.
	Если Объект.ЭтоНовый() Тогда
		
		// Инициализируем реквизиты, зависящие от текущего контекста ввода
		Если ЕстьРеквизит(Объект, "ДатаСоздания") Тогда
			Объект.ДатаСоздания = Дата("00010101");
		КонецЕсли;
		Если ЕстьРеквизит(Объект, "Автор") Тогда
			Объект.Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим менеджер текущего объекта
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Производим инициализацию реквизитов, которые имеют сложную логику начального заполнения.
	Если ЕстьРеквизит(Объект, "ПодразделениеКомпании") И (НЕ ЗначениеЗаполнено(Объект.ПодразделениеКомпании)) И (НЕ Объект.ЭтоГруппа) Тогда
		Объект.ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
		МенеджерОбъекта.ПодразделениеКомпанииПриИзменении(Объект);
	КонецЕсли;
	Если ЕстьРеквизит(Объект, "Организация") И (НЕ ЗначениеЗаполнено(Объект.Организация)) И (НЕ Объект.ЭтоГруппа) Тогда
		Объект.Организация = ПараметрыСеанса.Организация;
		МенеджерОбъекта.ОрганизацияПриИзменении(Объект);
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	// Проверим, что справочник иерархический
	Если Объект.ЭтоНовый() И Метаданные.Справочники.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.Иерархический Тогда
		ЗаполнитьОбъектПоРодителю(Объект, ИменаИсключаемыхРеквизитов);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ЗаполнитьОбъектПоУмолчанию()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// !!!_alalek Оживить или удалить при восстановлении работы права
// "КонтрольВводаЗапрещенныхСимволовАртикулНоменклатуры"
// Проверяет наличие в строке недопустимых символов.
//
// Параметры:
//	стрЗначение - строка для проверки
//	Права       - права пользователя.
//	Авторабота           - Булево   - Истина, если проверяем Автоработы, Ложь - если Номенклатуру.
//
// Возвращает истину если ошибок нет, иначе ложь
//
Функция ПроверкаНаНедопустимыеСимволы(стрЗначение,Права,Авторабота = Ложь) Экспорт
	
	Перем стрДопСимволов;
	
	Рез = "";
	
	стрДопСимволов =  ПраваИНастройкиПользователя.Значение(
		"КонтрольВводаЗапрещенныхСимволовАртикул" + ?(Авторабота, "Автоработы", "Номенклатуры")
	);
	
	// проверим есть ли вообще запрещенные символы
	Если НЕ ЗначениеЗаполнено(стрДопСимволов) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// обходим строку посимвольно и запоминаем недопустимые символы
	Для Сч = 1 По СтрДлина(стрЗначение) Цикл
		Символ = Прав(Лев(стрЗначение,Сч),1);
		
		Если (СтрНайти(стрДопСимволов,Символ)>0) Тогда
			Если СтрНайти(Рез,Символ)=0 Тогда
				Рез = Рез + ?(ПустаяСтрока(Рез),"",", ") + Символ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Рез) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр(" ru = 'Были обнаружены следующие недопустимые символы: %1'"),Рез)
		);
	КонецЕсли;
	
	Возврат ПустаяСтрока(Рез);
	
КонецФункции

// Возвращает перечень имен реквизитов, которые не должны переноситься при вводе документов на основании и копировании.
//
Функция ПолучитьИменаИсключаемыхРеквизитов() Экспорт
	
	// Составим перечень реквизитов, значения которых не должны копироваться из переданных данных заполнения.
	ИменаИсключаемыхРеквизитов = ",Код,Наименование,ДатаСоздания,Автор,Комментарий";
	
	// Перечень исключений дополним служебными реквизитами
	ИменаИсключаемыхРеквизитов = ИменаИсключаемыхРеквизитов + ",ЭтоГруппа,ПометкаУдаления,ДополнительныеРеквизиты,КонтактнаяИнформация,ОбластьДанныхВспомогательныеДанные,ОбластьДанныхОсновныеДанные";
	
	Возврат ИменаИсключаемыхРеквизитов;
	
КонецФункции // ПолучитьИменаИсключаемыхРеквизитов()

Процедура ЗаполнитьОбъектПоРодителю(Объект, ИменаИсключаемыхРеквизитов)
	
	ОбъектМетаданных = Объект.Метаданные();
	
	// Уберем из заполнения общие реквизиты "Организация" и "ПодразделениеКомпании" для групп.
	Если Объект.ЭтоГруппа Тогда
		ИменаИсключаемыхРеквизитов = ИменаИсключаемыхРеквизитов + ", Организация, ПодразделениеКомпании,";
	КонецЕсли;
	
	// Заполнение реквизитов справочника
	РодительскаяГруппа = Объект.Родитель;
	
	// Заполняем специфические для данного объекта реквизиты
	Если ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		Пока ЗначениеЗаполнено(РодительскаяГруппа) Цикл
			
			// Копируем общие реквизиты объекта
			Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
				Если СтрНайти(ВРег(ИменаИсключаемыхРеквизитов), ВРег(Реквизит.Имя))=0 И ЕстьРеквизит(Объект, Реквизит.Имя) И ЕстьРеквизит(РодительскаяГруппа, Реквизит.Имя) И НЕ ЗначениеЗаполнено(Объект[Реквизит.Имя]) Тогда
					Объект[Реквизит.Имя] = РодительскаяГруппа[Реквизит.Имя];
				КонецЕсли;
			КонецЦикла;
			
			// Копируем реквизиты шапки объекта
			Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
				Если СтрНайти(ВРег(ИменаИсключаемыхРеквизитов), ВРег(Реквизит.Имя))=0 И ЕстьРеквизит(Объект, Реквизит.Имя) И НЕ ЗначениеЗаполнено(Объект[Реквизит.Имя]) Тогда
					Объект[Реквизит.Имя] = РодительскаяГруппа[Реквизит.Имя];
				КонецЕсли;
			КонецЦикла;
			
			// Копируем содержимое табличных частей
			Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
				
				Если НЕ ЕстьРеквизит(Объект,, ТабличнаяЧасть.Имя) ИЛИ ЕстьРеквизит(РодительскаяГруппа, ТабличнаяЧасть.Имя) ИЛИ СтрНайти(ВРег(ИменаИсключаемыхРеквизитов), ВРег(ТабличнаяЧасть.Имя)) > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект[ТабличнаяЧасть.Имя]) Тогда
					
					// Идем по строкам и реквизитам табличной части и заполняем соответствующие
					Для Каждого СтрокаТабличнойЧасти Из РодительскаяГруппа[ТабличнаяЧасть.Имя] Цикл
						
						НоваяСтрока = Объект[ТабличнаяЧасть.Имя].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти,, "НомерСтроки");
						
						Если ЕстьРеквизит(Объект, "КоличествоБазовое", ТабличнаяЧасть.Имя) И НЕ ЗначениеЗаполнено(НоваяСтрока.КоличествоБазовое) И ЕстьРеквизит(Объект, "Количество", ТабличнаяЧасть.Имя) И ЕстьРеквизит(Объект, "Коэффициент", ТабличнаяЧасть.Имя) Тогда
							НоваяСтрока.КоличествоБазовое = НоваяСтрока.Количество * НоваяСтрока.Коэффициент;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			РодительскаяГруппа = РодительскаяГруппа.Родитель;
			
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов
	Если ЕстьРеквизит(Объект,, "ДополнительныеРеквизиты") И ЕстьРеквизит(РодительскаяГруппа,, "ДополнительныеРеквизиты") И СтрНайти(ВРег(ИменаИсключаемыхРеквизитов), ВРег("ДополнительныеРеквизиты")) = 0 Тогда
		
		ТаблицаДопРеквизитов = УправлениеСвойствами.ПолучитьСписокСвойств(Объект.Ссылка,, Ложь);
		
		Для Каждого ТекСвойство Из ТаблицаДопРеквизитов Цикл
			
			Если Объект.ДополнительныеРеквизиты.Найти(ТекСвойство, "Свойство") = Неопределено Тогда
				
				РодительГруппы = Объект.Родитель;
				Пока ЗначениеЗаполнено(РодительГруппы) Цикл
					НайденноеСвойство = РодительГруппы.ДополнительныеРеквизиты.Найти(ТекСвойство, "Свойство");
					Если НайденноеСвойство <> Неопределено Тогда
						
						НоваяЗапись = Объект.ДополнительныеРеквизиты.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, НайденноеСвойство);
						Прервать;
					КонецЕсли;
					РодительГруппы = РодительГруппы.Родитель;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОбъектПоРодителю()

Процедура ПеренестиСвойстваСРодителей(Объект, Отказ)
	
	Если
		Не Объект.ДополнительныеСвойства.ЭтоНовый
		Или Не ДляОбъектаИспользуютсяДополнительныеСведения(Объект)
		Или Не ОбщегоНазначения.ЭтоСправочник(Объект.Метаданные())
		Или Не Объект.Метаданные().Иерархический
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Свойства = УправлениеСвойствами.ПолучитьСписокСвойств(Объект.Ссылка, Ложь);
	
	Если Свойства.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВсеРодители = ВсеРодители(Объект);
	СвойстваРодителей = СвойстваРодителей(ВсеРодители);
	
	Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Объект.Ссылка);
	
	УсловиеПоиска = Новый Структура("Объект, Свойство");
	
	Для Каждого Свойство Из Свойства Цикл
		
		Для Каждого Родитель Из ВсеРодители Цикл
			
			УсловиеПоиска.Объект = Родитель;
			УсловиеПоиска.Свойство = Свойство;
			
			НайденныеСвойства = СвойстваРодителей.НайтиСтроки(УсловиеПоиска);
			
			Если НайденныеСвойства.Количество() <> 0 Тогда
				
				Запись = Набор.Добавить();
				Запись.Свойство = Свойство;
				Запись.Значение = НайденныеСвойства[0].Значение;
				Запись.Объект   = Объект.Ссылка;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Попытка
		
		Набор.Записать();
		
	Исключение
		
		Событие = НСтр("ru = 'Справочники.Перенос дополнительных сведений родителя'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеОшибки = НСтр("ru = 'Не удалось записать дополнительные сведения:'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,, Объект.Ссылка, ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ДляОбъектаИспользуютсяДополнительныеСведения(Объект)
	
	Возврат Метаданные.ОпределяемыеТипы.ВладелецДополнительныхСведений.Тип.СодержитТип(ТипЗнч(Объект.Ссылка));
	
КонецФункции

Функция ВсеРодители(Объект)
	
	Результат = Новый Массив;
	
	Родитель = Объект.Родитель;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока ЗначениеЗаполнено(Родитель) Цикл
		
		Результат.Добавить(Родитель);
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваРодителей(Родители)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект,
		|	ДополнительныеСведения.Свойство,
		|	ДополнительныеСведения.Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект В (&Родители)"
	);
	Запрос.УстановитьПараметр("Родители", Родители);
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти
