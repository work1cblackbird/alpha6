// Общий модуль Альфа-Авто 6: "Управление диалогом сервер"

#Область ПрограммныйИнтерфейс

// Заполнить строку подвала автомобилей
//
// Параметры:
//  Колонка - ПолеФормы            - Колонка, текст подвала которой нужно установить.
//  Объект  - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура УстановитьНадписьПодавалаКолонки(Колонка, Объект) Экспорт
	
	Если Объект.Свойство("Карточка") Тогда
		Если Объект.Свойство("СкидкаНаценка") Тогда
			СпособВычисленияТекст = ?(Объект.СкидкаНаценка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Относительная, 
				"%", Строка(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить()));
			Колонка.ТекстПодвала = "Карта: " + ?(ЗначениеЗаполнено(Объект.Карточка), СокрЛП(Объект.Карточка), "< нет > ") 
				+ "; Скидка: " + ?(ЗначениеЗаполнено(Объект.СкидкаНаценка), СокрЛП(Объект.СкидкаНаценка) + 
				" (" + Объект.ЗначениеСкидкиНаценки + " " + СпособВычисленияТекст + ")", "< нет >");
		Иначе
			Колонка.ТекстПодвала = "Карта: " + ?(ЗначениеЗаполнено(Объект.Карточка), СокрЛП(Объект.Карточка), "< нет > ");
		КонецЕсли;
	Иначе
		Колонка.ТекстПодвала = "ИТОГО:";
	КонецЕсли;
	
КонецПроцедуры

// Заполнить строку подвала автомобилей
//
// Параметры:
//  Колонка - ПолеФормы            - Колонка, текст подвала которой нужно установить
//  Объект  - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура УстановитьНадписьПодавалаКолонкиАвтомобиль(Колонка, Объект) Экспорт
	
	Если Объект.Свойство("Карточка") Тогда
		Колонка.ТекстПодвала = "Карта: " + ?(ЗначениеЗаполнено(Объект.Карточка), СокрЛП(Объект.Карточка), "< нет > ");
	Иначе
		Колонка.ТекстПодвала = "ИТОГО:";
	КонецЕсли;
	
КонецПроцедуры

// Заполнить строку подвала автомобилей
//
// Параметры:
//  Колонка - ПолеФормы            - Колонка, текст подвала которой нужно установить.
//  Объект  - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура УстановитьНадписьПодавалаКолонкиРабота(Колонка, Объект) Экспорт
	
	Если Объект.Свойство("Карточка") Тогда
		Если Объект.Свойство("СкидкаНаценкаРаботы") Тогда
			СпособВычисленияТекст = ?(Объект.СкидкаНаценкаРаботы.СпособВычисления = Перечисления.СкидкиСпособВычисления.Относительная, 
				"%", Строка(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить()));
			Колонка.ТекстПодвала = "Карта: " + ?(ЗначениеЗаполнено(Объект.Карточка), СокрЛП(Объект.Карточка), 
			"< нет > ") + "; Скидка: " + ?(ЗначениеЗаполнено(Объект.СкидкаНаценкаРаботы), 
			СокрЛП(Объект.СкидкаНаценкаРаботы) + " (" + Объект.ЗначениеСкидкиНаценкиРабот + " " 
			+ СпособВычисленияТекст	+ ")", "< нет >");
		Иначе
			Колонка.ТекстПодвала = "Карта: " + ?(ЗначениеЗаполнено(Объект.Карточка), СокрЛП(Объект.Карточка), "< нет > ");
		КонецЕсли;
	Иначе
		Колонка.ТекстПодвала = "ИТОГО:";
	КонецЕсли;
	
КонецПроцедуры

// Заполним доступность колонки "Сумма Всего"
//
// Параметры:
//  Форма             - УправляемаяФорма     - Форма, в которой возникло событие.
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ИмяТабличнойЧасти - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  ИмяКолонки        - Строка               - Имя колонки, доступность которой нужно установить.
//  СуффиксКолонок    - Строка               - Префикс колонки.
//
Процедура УстановитьДоступностьКолонкиСуммаВсего(Форма, Объект, ИмяТабличнойЧасти = "Автоработы", ИмяКолонки = "СуммаВсего", СуффиксКолонок = "") Экспорт
	
	// Определим, имеет ли смысл давать возможность пользователю редактировать колонку сумма всего
	Если ЕстьРеквизит(Форма, "РедактированиеЦенИСуммВНоменклатурныхТаблицах") Тогда
		РазрешитьРедактированиеЦенИСумм = Форма.РазрешитьРедактированиеЦенИСумм;
	Иначе
		РазрешитьРедактированиеЦенИСумм =  ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	КонецЕсли;
	
	Если Объект.Свойство("СкидкаНаценкаРаботы") И НЕ Форма.ТолькоПросмотр
		 И НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти + ИмяКолонки + СуффиксКолонок) = Неопределено
		 И РазрешитьРедактированиеЦенИСумм Тогда
		Форма.Элементы[ИмяТабличнойЧасти + ИмяКолонки + СуффиксКолонок].ТолькоПросмотр = (НЕ Объект.СкидкаНаценкаРаботы.Пустая()) И (Объект.СкидкаНаценкаРаботы.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная);
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКолонкиСуммаВсего()

// Общий обработчик события настройки параметров отображения элементов формы в зависимости от значений реквизитов
// объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура УправлениеДиалогомНаСервере(Форма) Экспорт
	
	// вызываем стандартный обработчик
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(Форма);
	
	// Обновляем текст подвала в колонке Номенклатура
	Если НЕ Форма.Элементы.Найти("АвтомобилиАвтомобиль") = Неопределено Тогда
		УстановитьНадписьПодавалаКолонкиАвтомобиль(Форма.Элементы.АвтомобилиАвтомобиль, Форма.Объект);
	КонецЕсли;
	
	// Обновляем текст подвала в колонке Номенклатура
	Если НЕ Форма.Элементы.Найти("ОпцииОпция") = Неопределено Тогда
		УстановитьНадписьПодавалаКолонки(Форма.Элементы.ОпцииОпция, Форма.Объект);
	КонецЕсли;
	
	// Обновляем текст подвала в колонке Номенклатура
	Если НЕ Форма.Элементы.Найти("АвтоработыАвторабота") = Неопределено Тогда
		УстановитьНадписьПодавалаКолонкиРабота(Форма.Элементы.АвтоработыАвторабота, Форма.Объект);
	КонецЕсли;
	
	// Обновляем доступность редактирования колонки "Сумма всего"
	Если НЕ Форма.Элементы.Найти("Автоработы") = Неопределено Тогда
		УстановитьДоступностьКолонкиСуммаВсего(Форма, Форма.Объект);
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

// Формирование условного обозначения для форм списка справочников и документов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ФормаСписка, в которой возникло событие, в списке
//												должна присудствовать колонка с состоянием (статусом)
//  Источник - СправочникМенеджер - Справочник с хранимыми значениями статусов (состояний) документа
//  ПолеОтбора - Строка - Путь к данным в Списке
//  ПолеЦвета - Строка - Наименование реквизита справочника, в котором хранится значение цвета
//  ИсключаемыеПоля  - Строка - Поля, которые не будут окрашены.
//  ДинамическийСписок - Строка - Имя реквизита динамический список.
//
//@skip-check method-too-many-params
Процедура СформироватьУсловноеОформление(Форма,
                                         Источник,
                                         ПолеОтбора = "Ссылка",
                                         ПолеЦвета = "Цвет",
                                         ИсключаемыеПоля = "",
                                         ДинамическийСписок = "Список") Экспорт
	
	УсловиеОтбора = "";
		Если Источник.ПустаяСсылка().Метаданные().Иерархический = Истина Тогда
			Если Метаданные.Справочники[Строка(Источник.ПустаяСсылка().Метаданные().Имя)].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				УсловиеОтбора = "ГДЕ
								|	(Справочник.ЭтоГруппа = ЛОЖЬ)";
			КонецЕсли;
		КонецЕсли;
		
	
	Форма.УсловноеОформление.Элементы.Очистить();
	НаименованиеСправочника = "Справочник." + Строка(Источник.ПустаяСсылка().Метаданные().Имя);
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.Ссылка,
	|	Справочник." + ПолеЦвета + " КАК Цвет
	|ИЗ
	|	" + НаименованиеСправочника + " КАК Справочник
	|	" + УсловиеОтбора + "";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		// Создаем условие отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2", ДинамическийСписок, ПолеОтбора));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
		// Значение для отбора
		ЭлементОтбора.ПравоеЗначение = Выборка.Ссылка;
		ЭлементОтбора.Использование = Истина;
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Выборка.Цвет.Получить());
		ЭлементОформления.Использование = Истина;
		
		НайденныйЭлемент = Форма.Элементы.Найти(ДинамическийСписок);
		// оформление полей списка
		Если НайденныйЭлемент <> Неопределено Тогда
			ПолеДляОформления = ЭлементОформления.Поля.Элементы.Добавить();
			ПолеДляОформления.Поле = Новый ПолеКомпоновкиДанных(НайденныйЭлемент.Имя);
			ПолеДляОформления.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновление установки скидок/наценок при изменении данных в табличной части.
//
// Параметры:
//  Форма             - УправляемаяФорма     - Форма, в которой возникло событие.
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ИмяТабличнойЧасти - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПересчитатьСкидкиНаценки(Форма, Объект = Неопределено, ИмяТабличнойЧасти = "Автоработы", ПараметрыДействия = Неопределено) Экспорт
	
	// Получим объект.
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Получение параметров установки скидок.
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	МенеджерДокумента.ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ИмяТабличнойЧасти = "Автоработы" Тогда
		// Дополним структуру параметров скидок.
		Если ЕстьРеквизит(Объект, "СкидкаНаценкаРаботы")
			ИЛИ ЕстьРеквизит(Объект, "СуммаСкидкиНаценкиРабот") Тогда
			МенеджерДокумента.ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
		КонецЕсли;
		
		// Установка скидок/наценок автоработы.
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСкидкиНаценки()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Общий обработчик события возникающего на сервере при чтении данных объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ПриЧтенииНаСервере(Форма) Экспорт
	
	Если ЕстьРеквизит(Форма.Объект, , "Автомобили") Тогда
		ОбработкаТабличнойЧастиАвтомобили.ЗаполнитьДополнительныеРеквизиты(Форма.объект);
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Если ЕстьРеквизит(Форма.Объект, , "Автомобили") Тогда
		ОбработкаТабличнойЧастиАвтомобили.ЗаполнитьДополнительныеРеквизиты(Форма.объект);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "АВТОМОБИЛИ"

// Общий обработчик события возникающего при выходе из режима редактирования строки.
//
// Параметры:
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  НоваяСтрока          - Булево               - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево               - Истина, если произошла отмена редактирования.
//  ИмяТабличнойЧасти    - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  СписокРеквизитов     - Строка               - Имена реквизитов, перечисленные через запятую, в формате
//                                                требований к свойствам структуры.
//                                                Например, "Код, Наименование, Родитель".
//                       - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                                                псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                                                значения (опционально) фактическое имя поля в таблице.
//                                                Если значение не определено, то имя поля берется из ключа.
//                       - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                                                к свойствам структуры.
//                                                Служебные поля для получения данных:
//                                                _ИтогиОпераций, _Константа, _Право
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов с префиксом "Представление".
//
Функция АвтомобилиПриОкончанииРедактирования(Знач Объект, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти = "Автомобили", СписокРеквизитов = Неопределено) Экспорт
	
	// Уточним перечень получаемых реквизитов объекта
	СписокРеквизитов = ПолучитьРеквизитыПоУмолчаниюАвтомобилиОпцииПриОкончанииРедактирования(СписокРеквизитов);
	
	// Не всегда объект Признак будет использоваться для определения необходимости 
	ВернутьИзмененныйОбъект = Ложь;
	
	// Пересчет скидок требуется выполнить только в случае когда происходит событие отмены редактирования новой строки
	Если НоваяСтрока И ОтменаРедактирования Тогда
		СкидкиНаценкиСервер.ПересчитатьСкидкиНаценки(Объект, ИмяТабличнойЧасти);
		ВернутьИзмененныйОбъект = Истина;
	КонецЕсли;
	
	// Получаем данные текущего объекта необходимые для дополнительной обработки события на клиенте/сервере
	ВозвращаемыеДанные = УправлениеДиалогомСервер.ПолучитьДанныеОбъекта(Объект, СписокРеквизитов);
	
	// Получим текст надписи итогов операции по документу.
	Если ВозвращаемыеДанные.Свойство("_ИтогиОперации") Тогда
		
		ЭлементыСтроки = Новый Массив;
		ЭлементыСтроки.Добавить(НСтр("ru = 'Итого:'"));
		ЭлементыСтроки.Добавить(Формат(ВозвращаемыеДанные._ИтогиОперации.СуммаДокумента, "ЧДЦ=2; ЧН=0,00"));
		ЭлементыСтроки.Добавить(ВозвращаемыеДанные.ВалютаДокументаПредставление);
		ЭлементыСтроки.Добавить(СтрШаблон(НСтр("ru = '(%1)'"), Формат(ВозвращаемыеДанные.КурсДокумента, "ЧДЦ=4; ЧН=0,0000")));
		
		ВозвращаемыеДанные.Вставить("НадписьСуммаДокумента", Новый ФорматированнаяСтрока(СтрСоединить(ЭлементыСтроки, " ")));
		ВозвращаемыеДанные.Вставить("СуммаДокумента", ВозвращаемыеДанные._ИтогиОперации.СуммаДокумента);
		
	КонецЕсли;
	
	// Получим текст подвала колонки "Номенклатура".
	ВозвращаемыеДанные.Вставить("АвтомобилиАвтомобильТекстПодвала", "");
	УстановитьНадписьПодавалаАвтомобиль(ВозвращаемыеДанные.АвтомобилиАвтомобильТекстПодвала, Объект);
	
	// Установим доступность колонки "Сумма всего"
	ВозвращаемыеДанные.Вставить("ТоварыСуммаВсегоТолькоПросмотр", УправлениеДиалогомДокументаСервер.УстановитьДоступностьСуммыВсего(Объект, "Автомобили"));
	
	Если ВернутьИзмененныйОбъект Тогда
		ВозвращаемыеДанные.Вставить("_Объект", Объект);
	КонецЕсли;
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции // ПолучитьДанныеПриОкончанииРедактирования()

// Общий обработчик события возникающего после удаления строки.
//
// Параметры:
//  Форма				 - УправляемаяФорма		 - Форма, в которой возникло событие.
//  Элемент				 - ТаблицаФормы			 - Элемент управления, в котором возникло данное событие.
//  ПараметрыДействия	 - Структура			 - Набор параметров, использующихся при выполнения операции.
//  Объект				 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//
Процедура АвтомобилиПослеУдаления(Форма, Элемент, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	// Перезаполним скидки/наценки
	ПересчитатьСкидкиНаценки(Форма, Объект, "Автомобили", ПараметрыДействия);
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(Форма);
	
	// Обновляем текст подвала в колонке Автомобиль
	УстановитьНадписьПодавалаКолонкиАвтомобиль(Форма.Элементы.АвтомобилиАвтомобиль, Форма.Объект);
	
КонецПроцедуры // ТоварыПослеУдаления()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ОПЦИИ"

// Общий обработчик события возникающего при выходе из режима редактирования строки.
//
// Параметры:
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  НоваяСтрока          - Булево               - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево               - Истина, если произошла отмена редактирования.
//  ИмяТабличнойЧасти    - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  СписокРеквизитов     - Строка               - Имена реквизитов, перечисленные через запятую, в формате
//                                                требований к свойствам структуры.
//                                                Например, "Код, Наименование, Родитель".
//                       - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                                                псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                                                значения (опционально) фактическое имя поля в таблице.
//                                                Если значение не определено, то имя поля берется из ключа.
//                       - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                                                к свойствам структуры.
//                                                Служебные поля для получения данных:
//                                                _ИтогиОпераций, _Константа, _Право
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов с префиксом "Представление".
//
Функция ОпцииПриОкончанииРедактирования(Знач Объект, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти = "Опции", СписокРеквизитов = Неопределено) Экспорт
	
	// Уточним перечень получаемых реквизитов объекта
	СписокРеквизитов = ПолучитьРеквизитыПоУмолчаниюАвтомобилиОпцииПриОкончанииРедактирования(СписокРеквизитов);
	
	// Не всегда объект Признак будет использоваться для определения необходимости 
	ВернутьИзмененныйОбъект = Ложь;
	
	// Пересчет скидок требуется выполнить только в случае когда происходит событие отмены редактирования новой строки
	Если НоваяСтрока И ОтменаРедактирования Тогда
		СкидкиНаценкиСервер.ПересчитатьСкидкиНаценки(Объект, ИмяТабличнойЧасти);
		ВернутьИзмененныйОбъект = Истина;
	КонецЕсли;
	
	// Получаем данные текущего объекта необходимые для дополнительной обработки события на клиенте/сервере
	ВозвращаемыеДанные = УправлениеДиалогомСервер.ПолучитьДанныеОбъекта(Объект, СписокРеквизитов);
	
	// Получим текст надписи итогов операции по документу.
	Если ВозвращаемыеДанные.Свойство("_ИтогиОперации") Тогда
		
		//!!!НадписьСуммаДокумента = ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(Неопределено, Объект, СтруктураДанных, Ложь);
		ЭлементыСтроки = Новый Массив;
		ЭлементыСтроки.Добавить(НСтр("ru = 'Итого:'"));
		ЭлементыСтроки.Добавить(Формат(ВозвращаемыеДанные._ИтогиОперации.СуммаДокумента, "ЧДЦ=2; ЧН=0,00"));
		ЭлементыСтроки.Добавить(ВозвращаемыеДанные.ВалютаДокументаПредставление);
		ЭлементыСтроки.Добавить(СтрШаблон(НСтр("ru = '(%1)'"), Формат(ВозвращаемыеДанные.КурсДокумента, "ЧДЦ=4; ЧН=0,0000")));
		
		ВозвращаемыеДанные.Вставить("НадписьСуммаДокумента", Новый ФорматированнаяСтрока(СтрСоединить(ЭлементыСтроки, " ")));
		ВозвращаемыеДанные.Вставить("СуммаДокумента", ВозвращаемыеДанные._ИтогиОперации.СуммаДокумента);
		
	КонецЕсли;
	
	// Получим текст подвала колонки "Номенклатура".
	ВозвращаемыеДанные.Вставить("ОпцииОпцияТекстПодвала", "");
	УстановитьНадписьПодавалаАвтомобиль(ВозвращаемыеДанные.ОпцииОпцияТекстПодвала, Объект);
	
	// Установим доступность колонки "Сумма всего"
	ВозвращаемыеДанные.Вставить("ТоварыСуммаВсегоТолькоПросмотр", УправлениеДиалогомДокументаСервер.УстановитьДоступностьСуммыВсего(Объект, "Опции"));
	
	Если ВернутьИзмененныйОбъект Тогда
		ВозвращаемыеДанные.Вставить("_Объект", Объект);
	КонецЕсли;
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции // ПолучитьДанныеПриОкончанииРедактирования()

// Общий обработчик события возникающего при выходе из режима редактирования строки.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ОпцииПослеУдаления(Форма) Экспорт
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(Форма);
	
	// Обновляем текст подвала в колонке Опция
	УстановитьНадписьПодавалаКолонки(Форма.Элементы.ОпцииОпция, Форма.Объект);
	
КонецПроцедуры // ТоварыПриОкончанииРедактирования()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "АВТОРАБОТЫ"

// Общий обработчик события возникающего при выходе из режима редактирования строки.
//
// Параметры:
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  НоваяСтрока          - Булево               - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево               - Истина, если произошла отмена редактирования.
//  ИмяТабличнойЧасти    - Строка               - Имя таблицы, при редактировании которой возникло данное событие.
//  СписокРеквизитов     - Строка               - Имена реквизитов, перечисленные через запятую, в формате
//                                                требований к свойствам структуры.
//                                                Например, "Код, Наименование, Родитель".
//                       - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                                                псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                                                значения (опционально) фактическое имя поля в таблице.
//                                                Если значение не определено, то имя поля берется из ключа.
//                       - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                                                к свойствам структуры.
//                                                Служебные поля для получения данных:
//                                                _ИтогиОпераций, _Константа, _Право
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов с префиксом "Представление".
//
Функция ПриОкончанииРедактирования(Знач Объект, НоваяСтрока, ОтменаРедактирования, ИмяТабличнойЧасти = "Автоработы", СписокРеквизитов = Неопределено) Экспорт
	
	// Уточним перечень получаемых реквизитов объекта
	СписокРеквизитов = ПолучитьРеквизитыПоУмолчаниюАвтоработыПриОкончанииРедактирования(СписокРеквизитов);
	
	// Не всегда объект Признак будет использоваться для определения необходимости 
	ВернутьИзмененныйОбъект = Ложь;
	
	// Пересчет скидок требуется выполнить только в случае когда происходит событие отмены редактирования новой строки
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Если ИмяТабличнойЧасти = "Автоработы" Тогда
			ПараметрыДействия = Неопределено;
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			МенеджерДокумента.ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
			Попытка
				МенеджерДокумента.ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
			Исключение
			КонецПопытки;
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТабличнойЧасти);
		Иначе
			СкидкиНаценкиСервер.ПересчитатьСкидкиНаценки(Объект, ИмяТабличнойЧасти);
		КонецЕсли;
		ВернутьИзмененныйОбъект = Истина;
	КонецЕсли;
	
	// Получаем данные текущего объекта необходимые для дополнительной обработки события на клиенте/сервере
	ВозвращаемыеДанные = УправлениеДиалогомСервер.ПолучитьДанныеОбъекта(Объект, СписокРеквизитов);
	
	// Получим текст надписи итогов операции по документу.
	Если ВозвращаемыеДанные.Свойство("_ИтогиОперации") Тогда
		
		ЭлементыСтроки = Новый Массив;
		ЭлементыСтроки.Добавить(НСтр("ru = 'Итого:'"));
		ЭлементыСтроки.Добавить(Формат(ВозвращаемыеДанные._ИтогиОперации.СуммаДокумента, "ЧДЦ=2; ЧН=0,00"));
		ЭлементыСтроки.Добавить(ВозвращаемыеДанные.ВалютаДокументаПредставление);
		ЭлементыСтроки.Добавить(СтрШаблон(НСтр("ru = '(%1)'"), Формат(ВозвращаемыеДанные.КурсДокумента, "ЧДЦ=4; ЧН=0,0000")));
		
		ВозвращаемыеДанные.Вставить("НадписьСуммаДокумента", Новый ФорматированнаяСтрока(СтрСоединить(ЭлементыСтроки, " ")));
		ВозвращаемыеДанные.Вставить("СуммаДокумента", ВозвращаемыеДанные._ИтогиОперации.СуммаДокумента);
		
	КонецЕсли;
	
	// Получим текст подвала колонки "Номенклатура".
	ВозвращаемыеДанные.Вставить("АвтоработыНоменклатурыТекстПодвала", "");
	УстановитьНадписьПодавалаКолонкиАвторабота(ВозвращаемыеДанные.АвтоработыНоменклатурыТекстПодвала, Объект);
	
	// Установим доступность колонки "Сумма всего"
	ВозвращаемыеДанные.Вставить("ТоварыСуммаВсегоТолькоПросмотр", УправлениеДиалогомДокументаСервер.УстановитьДоступностьСуммыВсего(Объект, "Автоработы"));
	
	Если ВернутьИзмененныйОбъект Тогда
		ВозвращаемыеДанные.Вставить("_Объект", Объект);
	КонецЕсли;
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции // ПолучитьДанныеПриОкончанииРедактирования()

// Общий обработчик события возникающего после удаления строки.
//
// Параметры:
//  Форма				 - УправляемаяФорма		 - Форма, в которой возникло событие.
//  Элемент				 - ТаблицаФормы			 - Элемент управления, в котором возникло данное событие.
//  ПараметрыДействия	 - Структура			 - Набор параметров, использующихся при выполнения операции.
//  Объект				 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//
Процедура АвтоработыПослеУдаления(Форма, Элемент, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	// Перезаполним скидки/наценки
	ПересчитатьСкидкиНаценки(Форма, Объект, "Автоработы", ПараметрыДействия);
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(Форма);
	
	// Обновляем текст подвала в колонке Авторабота
	УстановитьНадписьПодавалаКолонкиРабота(Форма.Элементы.АвтоработыАвторабота, Форма.Объект);
	
	// Установим доступность колонок
	УстановитьДоступностьКолонкиСуммаВсего(Форма, Форма.Объект);
	
КонецПроцедуры // АвтоработыПослеУдаления()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ОБЩЕГО НАЗНАЧЕНИЯ

// Общий обработчик события возникающего при выполнении оповещения о подборе авторабот.
//
// Параметры:
//  Форма				 - УправляемаяФорма		 - Форма, в которой возникло событие.
//  ПараметрыПодбора	 - Структура			 - Параметры выполнения подбора.
//
Процедура ОбработкаРезультатаПодбораАвторабот(Форма, ПараметрыПодбора) Экспорт
	
	// Получим параметры выполнения подбора
	ПодобраннаяАвторабота  = ПолучитьИзВременногоХранилища(ПараметрыПодбора.ПодобранныеАвтоработы);
	ИмяТабличнойЧасти       = ПараметрыПодбора.ИмяТабличнойЧасти;
	ТабличнаяЧастьОбъекта  = Форма.Объект[ИмяТабличнойЧасти];
	МенеджерДокумента      = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыПодбора.ПолноеИмяОбъекта);
	ЕстьКоличество         = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПодбора.ПараметрыДействия, "ЕстьКоличество", Истина);
	
	ПараметрыОтбора = Новый Структура("Авторабота");
	
	// Заблокируем построчный пересчет скидок.
	ПараметрыПодбора.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Производим перенос подобранной номенклатуры в табличную часть объекта
	Для Каждого СтрокаАвторабот Из ПодобраннаяАвторабота Цикл
			
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаАвторабот);
		НайденныеСтроки = ТабличнаяЧастьОбъекта.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			// Добавим новую строку и заполним ее
			СтрокаТабличнойЧасти = ТабличнаяЧастьОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаАвторабот);
			
			// Вызываем обработчик изменения данных объекта
			Выполнить("МенеджерДокумента." + ИмяТабличнойЧасти
				+ "АвтоработаПриИзменении(Форма.Объект, СтрокаТабличнойЧасти, ПараметрыПодбора.ПараметрыДействия)");
			
		Иначе
			
			// Получим строку и увеличим в ней количество
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			
			Если ЕстьКоличество Тогда
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаАвторабот.Количество;
				
				// Вызываем обработчик изменения данных объекта
				Выполнить("МенеджерДокумента." + ИмяТабличнойЧасти 
					+ "КоличествоПриИзменении(Форма.Объект, СтрокаТабличнойЧасти, ПараметрыПодбора.ПараметрыДействия)");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Пересчет скидок
	ПараметрыПодбора.ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Форма.Объект, ПараметрыПодбора.ПараметрыДействия, ИмяТабличнойЧасти);
	
КонецПроцедуры // ОбработкаРезультатаПодбораАвторабот()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит формирование и установку дополнительной информации в поле колонки номенклатуры.
//
// Параметры
//  ТекстПодвала - ФорматированнаяСтрока - Представление поля подвала колонки "Номенклатура".
//  Объект       - ДанныеФормыСтруктура  - Объект, для которого выполняется формирование текста подвала.
//
Процедура УстановитьНадписьПодавалаКолонкиАвторабота(ТекстПодвала, Объект)
	
	ЭлементыСтроки = Новый Массив;
	
	Если Объект.Свойство("Карточка") Тогда
		Карта = ?(ЗначениеЗаполнено(Объект.Карточка), СокрЛП(Объект.Карточка), "< нет >");
		ЭлементыСтроки.Добавить(СтрШаблон(НСтр("ru = 'Карта: %1'"), Карта));
		Если Объект.Свойство("СкидкаНаценкаРаботы") Тогда
			Если ЗначениеЗаполнено(Объект.СкидкаНаценкаРаботы) Тогда
				СкидкаНаценкаРаботы = СокрЛП(Объект.СкидкаНаценкаРаботы);
				ЗначениеСкидки      = Объект.ЗначениеСкидкиНаценки;
				СпособВычисления    = ?(Объект.СкидкаНаценкаРаботы.СпособВычисления = Перечисления.СкидкиСпособВычисления.Относительная, 
					"%", Строка(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить()));
				ЭлементыСтроки.Добавить(СтрШаблон(НСтр("ru = 'Скидка: %1 (%2 %3)'"), СкидкаНаценкаРаботы, ЗначениеСкидки, СпособВычисления));
			Иначе
				ЭлементыСтроки.Добавить(НСтр("ru = 'Скидка: <нет>'"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭлементыСтроки.Добавить(НСтр("ru = 'ИТОГО:'"));
	КонецЕсли;
	
	ТекстПодвала = Новый ФорматированнаяСтрока(СтрСоединить(ЭлементыСтроки, "; "));
	
КонецПроцедуры // УстановитьНадписьПодавалаКолонкиНоменклатура()

// Заполнить строку подвала автомобилей
Процедура УстановитьНадписьПодавалаАвтомобиль(ТекстПодвала, Объект)
	
	ЭлементыСтроки = Новый Массив;
	
	Если Объект.Свойство("Карточка") Тогда
		Карта = ?(ЗначениеЗаполнено(Объект.Карточка), СокрЛП(Объект.Карточка), "< нет >");
		ЭлементыСтроки.Добавить(СтрШаблон(НСтр("ru = 'Карта: %1'"), Карта));
	Иначе
		ЭлементыСтроки.Добавить(НСтр("ru = 'ИТОГО:'"));
	КонецЕсли;
	
	ТекстПодвала = Новый ФорматированнаяСтрока(СтрСоединить(ЭлементыСтроки, "; "));
	
КонецПроцедуры

// Функция получения реквизитов объекта по умолчанию для события "При окончании редактирования".
//
// Параметры:
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую.
//
Функция ПолучитьРеквизитыПоУмолчаниюАвтоработыПриОкончанииРедактирования(СоставРеквизитов)
	
	Если СоставРеквизитов = Неопределено Тогда
		
		Возврат "_ИтогиОперации,СуммаДокумента,ВалютаДокумента,КурсДокумента,Карточка,СкидкаНаценкаРаботы,СкидкаНаценкаРаботы.СпособВычисления,ЗначениеСкидкиНаценкиРабот";
		
	КонецЕсли;
	
	Возврат СоставРеквизитов;
	
КонецФункции // ПолучитьРеквизитыПоУмолчаниюАвтоработыПриОкончанииРедактирования()

// Функция получения реквизитов объекта по умолчанию для события "При окончании редактирования".
//
// Параметры:
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую.
//
Функция ПолучитьРеквизитыПоУмолчаниюАвтомобилиОпцииПриОкончанииРедактирования(СоставРеквизитов)
	
	Если СоставРеквизитов = Неопределено Тогда
		
		Возврат "_ИтогиОперации,СуммаДокумента,ВалютаДокумента,КурсДокумента,Карточка";
		
	КонецЕсли;
	
	Возврат СоставРеквизитов;
	
КонецФункции // ПолучитьРеквизитыПоУмолчаниюАвтомобилиОпцииПриОкончанииРедактирования()

#КонецОбласти
