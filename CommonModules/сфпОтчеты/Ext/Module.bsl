
#Область ПрограммныйИнтерфейс

// Возвращает картинку-образец отчета по ссылке на вариант
//
// Параметры:
//   Вариант - СправочникСсылка.ВариантыОтчетов,СправочникСсылка.ВариантыДополнительных - Ссылка на вариант отчета.
//
// Возвращаемое значение:
//   Картинка или Неопределено - образец отчета или Неопределено в случае его отсутствия
//
Функция ОбразецВарианта(Вариант) Экспорт
	
	Образец = Неопределено;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вариант", Вариант);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиВариантовОтчетовУНФ.Образец
	|ИЗ
	|	РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|ГДЕ
	|	НастройкиВариантовОтчетовУНФ.Вариант = &Вариант";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Значение = Выборка.Образец.Получить();
		Если ТипЗнч(Значение)=Тип("Картинка") Тогда
			Образец = Значение;
		КонецЕсли; 
	КонецЕсли;
	Возврат Образец;
	
КонецФункции

// Определяет количество элементов для заданного типа значений
//
// Параметры:
//   ТипЗначения     - Тип - Тип значения, для которого выполняется расчет
//   ПараметрыВыбора - ФиксированныйМассив - Фиксированный массив из элементов типа ПараметрВыбора
//
// Возвращаемое значение: 
//   * Число         - Количество элементов заданного типа
//
Функция ОпределитьКоличествоЭлементов(ТипЗначения, ПараметрыВыбора = Неопределено) Экспорт
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Ссылка = Новый(ТипЗначения);
		МетаданныеОбъекта = Ссылка.Метаданные();
		Возврат МетаданныеОбъекта.ЗначенияПеречисления.Количество();
	Иначе
		МодульОбщегоНазначения = сфпОбщегоНазначения.сфпОбщийМодуль("ОбщегоНазначения");
		ИмяТаблицы = МодульОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(ТипЗначения));
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		сфпСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	%1 КАК Объект",
		ИмяТаблицы);
		Если НЕ ПараметрыВыбора=Неопределено И ПараметрыВыбора.Количество()>0 Тогда
			Условия = "";
			Для каждого Параметр Из ПараметрыВыбора Цикл
				Если Найти(Параметр.Имя, "Отбор.")=0 Тогда
					Продолжить;
				КонецЕсли; 
				Если ТипЗнч(ПараметрыВыбора)=Тип("ПараметрыВыбораКомпоновкиДанных") Тогда
					Индекс = ПараметрыВыбора.Индекс(Параметр);
				ИначеЕсли ТипЗнч(ПараметрыВыбора)=Тип("Массив") Тогда 
					Индекс = ПараметрыВыбора.Найти(Параметр);
				Иначе
					Продолжить;
				КонецЕсли;
				ИмяРеквизита = СтрЗаменить(Параметр.Имя, "Отбор.", "");
				Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита)=Неопределено И НЕ СуществуетСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизита) Тогда
					Продолжить;
				КонецЕсли; 
				Условия = Условия+
				?(ПустаяСтрока(Условия), "ГДЕ ", Символы.ПС+"	И")+
				" Объект."+ИмяРеквизита+
				?(ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") ИЛИ ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив"), " В (&Значение"+Индекс+")", " = &Значение"+Индекс);
				Если ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") Тогда
					ЗначениеПараметра = Параметр.Значение.ВыгрузитьЗначения();
				ИначеЕсли ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив") Тогда
					ЗначениеПараметра = Новый Массив(Параметр.Значение);
				Иначе
					ЗначениеПараметра = Параметр.Значение;
				КонецЕсли; 
				Запрос.УстановитьПараметр("Значение"+Индекс, ЗначениеПараметра);
			КонецЦикла; 
			Если НЕ ПустаяСтрока(Условия) Тогда
				Запрос.Текст = Запрос.Текст+Символы.ПС+Условия;
			КонецЕсли; 
		КонецЕсли; 
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ?(Выборка.Количество=Null, 0, Выборка.Количество);
		Иначе
			Возврат 0;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции

// Возвращает список элементов заданного типа с учетом параметров выбора
//
// Параметры:
//   ТипЗначения     - Тип - Тип значения, для которого выполняется выборка элементов
//   ПараметрыВыбора - ФиксированныйМассив - Фиксированный массив из элементов типа ПараметрВыбора
//
// Возвращаемое значение: 
//   * Массив        - Массив элементов заданного типа
//
Функция ПолучитьСписокЭлементов(ТипЗначения, ПараметрыВыбора) Экспорт
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Ссылка = Новый(ТипЗначения);
		МетаданныеОбъекта = Ссылка.Метаданные();
		
		МодульОбщегоНазначения = сфпОбщегоНазначения.сфпОбщийМодуль("ОбщегоНазначения");
		МенеджерОбъекта = МодульОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
		МассивЗначений = Новый Массив;
		Для каждого Значение Из МетаданныеОбъекта.ЗначенияПеречисления Цикл
			МассивЗначений.Добавить(МенеджерОбъекта[Значение.Имя]);
		КонецЦикла; 
		Возврат МассивЗначений;
	Иначе
		МодульОбщегоНазначения = сфпОбщегоНазначения.сфпОбщийМодуль("ОбщегоНазначения");
		ИмяТаблицы = МодульОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(ТипЗначения));
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		сфпСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Объект.Ссылка КАК Ссылка
		|ИЗ
		|	%1 КАК Объект",
		ИмяТаблицы);
		Если НЕ ПараметрыВыбора=Неопределено И ПараметрыВыбора.Количество()>0 Тогда
			Условия = "";
			Для каждого Параметр Из ПараметрыВыбора Цикл
				Если Найти(Параметр.Имя, "Отбор.")=0 Тогда
					Продолжить;
				КонецЕсли; 
				Если ТипЗнч(ПараметрыВыбора)=Тип("ПараметрыВыбораКомпоновкиДанных") Тогда
					Индекс = ПараметрыВыбора.Индекс(Параметр);
				ИначеЕсли ТипЗнч(ПараметрыВыбора)=Тип("Массив") Тогда 
					Индекс = ПараметрыВыбора.Найти(Параметр);
				Иначе
					Продолжить;
				КонецЕсли; 
				ИмяРеквизита = СтрЗаменить(Параметр.Имя, "Отбор.", "");
				Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита)=Неопределено И НЕ СуществуетСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизита) Тогда
					Продолжить;
				КонецЕсли; 
				Условия = Условия+
				?(ПустаяСтрока(Условия), "ГДЕ ", Символы.ПС+"	И")+
				" Объект."+ИмяРеквизита+
				?(ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") ИЛИ ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив"), " В (&Значение"+Индекс+")", " = &Значение"+Индекс);
				Если ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") Тогда
					ЗначениеПараметра = Параметр.Значение.ВыгрузитьЗначения();
				ИначеЕсли ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив") Тогда
					ЗначениеПараметра = Новый Массив(Параметр.Значение);
				Иначе
					ЗначениеПараметра = Параметр.Значение;
				КонецЕсли; 
				Запрос.УстановитьПараметр("Значение"+Индекс, ЗначениеПараметра);
			КонецЦикла; 
			Если НЕ ПустаяСтрока(Условия) Тогда
				Запрос.Текст = Запрос.Текст+Символы.ПС+Условия;
			КонецЕсли; 
		КонецЕсли;
		Запрос.Текст = Запрос.Текст+Символы.ПС+"АВТОУПОРЯДОЧИВАНИЕ";
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
		Если ТаблицаЗначений.Количество()>0 Тогда
			Возврат ТаблицаЗначений.ВыгрузитьКолонку("Ссылка");
		Иначе
			Возврат Новый Массив;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции

// Отмечает в списке значений используемые выбранные поля отчета
//
// Параметры:
//   Элементы  - КоллекцияВыбранныхПолейКомпоновкиДанных - Коллекция выбранных полй, для которой выполняется
//														   рекурсивная отметка полей
//   Результат - СписокЗначений - Список полей выбора, для которых нужно определить признак использования
//
Процедура ОтметитьВыбранныеПоляРекурсивно(Элементы, Результат)
	
	Для каждого ВыбранноеПоле Из Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле)=Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Элемент = Результат.НайтиПоЗначению(Строка(ВыбранноеПоле.Поле));
			Если НЕ Элемент=Неопределено И ВыбранноеПоле.Использование Тогда
				Элемент.Пометка = Истина;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ВыбранноеПоле)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ОтметитьВыбранныеПоляРекурсивно(ВыбранноеПоле.Элементы, Результат);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Возвращает признак использования иерархии для описания типов
//
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов, для которого определяется использование иерархии
//
// Возвращаемое значение: 
//   * Булево      - Истина в случае если среди типов есть хоть один иерархический
//
Функция ОписаниеТиповСодержитИерархическийТип(ОписаниеТипов) Экспорт
	
	МодульОбщегоНазначения = сфпОбщегоНазначения.сфпОбщийМодуль("ОбщегоНазначения");
	
	Для каждого Тип Из ОписаниеТипов.Типы() Цикл
		Если НЕ МодульОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Продолжить;
		КонецЕсли;
		ПустаяСсылка = Новый(Тип);
		ОбъектМетаданных = ПустаяСсылка.Метаданные();
		Если НЕ МодульОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) И НЕ МодульОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		Если ОбъектМетаданных.Иерархический Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

#Область НастройкиОтчета

// Заполняет структуру настроек отчета параметрами по умолчанию
//
// Параметры:
//   НастройкиОтчета - Структура - Структура настроек
//
Процедура ИнициализироватьНастройкиОтчета(НастройкиОтчета) Экспорт
	
	// Признак поддержки отчетом интерфейса программного изменения общей формы отчета
	НастройкиОтчета.Вставить("ПрограммноеИзменениеФормыОтчета", Ложь);
	
	// Признак возможности изменения настроек диаграмм в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьНастройкиДиаграммыНаФормеОтчета", Истина);
	
	// Признак возможности выбора колонок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппуКолонкиНаФормеОтчета", Истина);
	
	// Признак возможности изменения группировок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппуСтрокиНаФормеОтчета", Истина);
	
	// Признак возможности изменения группировок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппировкиКолонокНаФормеОтчета", Истина);
	
	// Признак возможности изменения группировок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьПоказателиНаФормеОтчета", Истина);
	
	// Признак возможности изменения фильтров в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппуФильтрыНаФормеОтчета", Истина);
	
	// Признак разрешения ручного редактирвоания настроек варианта СКД
	НастройкиОтчета.Вставить("РазрешитьРедактироватьСКД", Истина);
	
	// Признак разрешения использования режима сравнения 
	НастройкиОтчета.Вставить("ИспользоватьСравнение", Ложь);
	
	НастройкиОтчета.Вставить("ИспользоватьДополнительныеРежимыСравнения", Истина);
	
	НастройкиОтчета.Вставить("СформироватьПриОткрытии", Ложь);
	
	// Признак возможности разворачивания отчета по периоду. Имеет смысл только если разрешен режим сравнения 
	НастройкиОтчета.Вставить("ИспользоватьПериодичность", Истина);
	
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихГруппировокСтрок", Истина);
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихГруппировокКолонок", Истина);
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихПолейСравнения", Истина);
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихФильтров", Истина);
	
	// Список наиболее часто используемых полей группировоки строк, отображаемых в меню при добавлении строки
	НастройкиОтчета.Вставить("ДополнительныеГруппировкиСтрок", Новый СписокЗначений);
	
	// Список наиболее часто используемых полей сравнения и группировки колонок 
	НастройкиОтчета.Вставить("ДополнительныеГруппировкиКолонок", Новый СписокЗначений);
	
	// Список наиболее часто используемых полей отбора, отображаемых в меню при добавлении фильтра
	НастройкиОтчета.Вставить("ДополнительныеФильтры", Новый СписокЗначений);
	
КонецПроцедуры

// Заполняет структуру настроек варианта параметрами по умолчанию
//
// Параметры:
//   НастройкиВарианта - Структура - Структура настроек
//
Процедура ИнициализироватьНастройкиВарианта(НастройкиВарианта) Экспорт
	
	// Отчет отображается в режиме "Рекомендуемые отчеты" панели отчетов
	НастройкиВарианта.Вставить("Рекомендуемый", Ложь);
	
	// Содержит имя функциональной опции, связанной с вариантом отчета
	НастройкиВарианта.Вставить("ФункциональнаяОпция", "");
	
	// Признак разрешения использования в варианте отчета только полей-ресурсов с ролью "Конечный остаток"
	НастройкиВарианта.Вставить("ТолькоРесурсыОстатков", Ложь);
	
	// Содержит массив описаний связи полей отчета и объектов метаданных для контекстного формирования. 
	//   см. подробнее процедуру ДобавитьОписаниеПривязки 
	НастройкиВарианта.Вставить("СвязанныеПоля", Новый Массив);
	
	// Содержит варианты оформления полей отчета. Соответствие вида: ИмяПоля (Строка) - ОписанийОформлений (Соответствие)
	//   см. подробнее процедуру ДобавитьВариантОформления
	НастройкиВарианта.Вставить("ВариантыОформления", Новый Соответствие);
	
	// Содержит массив описаний отчетов расшифровки
	//   см. подробнее процедуру ДобавитьВариантРасшифровки
	НастройкиВарианта.Вставить("ВариантыРасшифровки", Новый Массив);
	
	// Имя макета (типа ДвоичныеДанные), содержащего картинку с образцом варианта
	//   стандарт образца: картинка размерами 580х366 пикселей
	НастройкиВарианта.Вставить("ИмяМакетаОбразца", "");
	
	// Содержит теги для поиска варианта
	//   теги в строке разделяются запятыми
	НастройкиВарианта.Вставить("Теги", "");
	
	// Массив имен полей, по которым можно наложить отбор через строку поиска в форме отчета
	//   если массив пустой, то отбор можно будет наложить только по значениям полей фильтров, отображенных в форме
	НастройкиВарианта.Вставить("ПоляПоиска", Новый Массив);
	
КонецПроцедуры

// Добавляет описание контекстной привязки
//
// Параметры:
//   СвязанныеПоля - Массив - Массив описаний связанных полей
//   Поле - Строка - Имя поля, по которому выполняется отбор при контекстном открытии
//   Объект - Строка - Полное имя объекта метаданных, к которому выполняется привязка, например "Справочник.Номенклатура"
//   ДополнительныйРазрез - ПеречислениеСсылка - Дополнительная фильтрация. Поддерживается:
//      ПеречислениеСсылка.ТипыНоменклатуры - для разделения номенклатуры
//      ПеречислениеСсылка.ТипыСтруктурныхЕдиниц - для разделения структурных единиц
//      Перечисления вариантов операций документов
//   СложныйАлгоритм - Булево - Признак использования сложного алгоритма наложения отборов при контекстном открытии
//      В модуле объекта отчета должна присутствовать экспортируемая процедура ПриКонтекстномОткрытии
//   Рекомендуемый - Булево - Признак рекомендуемости для контекстного режима списка отчетов
//
Процедура ДобавитьОписаниеПривязки(СвязанныеПоля, Поле, Объект, ДополнительныйРазрез = Неопределено, СложныйАлгоритм = Ложь, Рекомендуемый = Ложь) Экспорт
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("Поле", Поле);
	СтруктураОписания.Вставить("Объект", Объект);
	СтруктураОписания.Вставить("СложныйАлгоритм", СложныйАлгоритм);
	СтруктураОписания.Вставить("ДополнительныйРазрез", ДополнительныйРазрез);
	СтруктураОписания.Вставить("Рекомендуемый", Рекомендуемый);
	СвязанныеПоля.Добавить(СтруктураОписания);
	
КонецПроцедуры

// Добавляет предопределенный вариант оформления поля отчета
//
// Параметры:
//   ВариантыОформления - Соответствие - Описания предопределенных вариантов оформления в разрезе полей
//   Поле - Строка - Имя поля, для которго добавляется предопределенный вариант оформления
//   КлючВариантаОформления - Строка - Имя предопределенного варианта оформления
//   ЭлементОформления - Строка - Имя параметра оформления
//   ЗначениеОформления - Произвольный - Значение параметра оформления
//
Процедура ДобавитьВариантОформления(ВариантыОформления, Поле, КлючВариантаОформления, ЭлементОформления, ЗначениеОформления) Экспорт
	
	Если ВариантыОформления.Получить(Поле)=Неопределено Тогда
		ВариантыОформления.Вставить(Поле, Новый Соответствие);
	КонецЕсли;
	ОформленияПоля = ВариантыОформления.Получить(Поле);
	
	Если ОформленияПоля.Получить(КлючВариантаОформления)=Неопределено Тогда
		ОформленияПоля.Вставить(КлючВариантаОформления, Новый Структура);
	КонецЕсли;
	Оформление = ОформленияПоля.Получить(КлючВариантаОформления);
	
	Оформление.Вставить(ЭлементОформления, ЗначениеОформления);
	
КонецПроцедуры

// Добавляет описание нестандартного варианта расшифровки
//
// Параметры:
//   ВариантыРасшифровки - Массив - Варианты расшифровки
//   ИмяОтчета - Строка - Имя отчета для расшифровки
//   КлючВарианта - Строка - Ключ вариант отчета для расшифровки
//   Поле - Строка - Имя расшифровываемого поля
//   Заголовок - Строка - Заголовок варианта расшифровки
//
Процедура ДобавитьВариантРасшифровки(ВариантыРасшифровки, ИмяОтчета, КлючВарианта, Поле = "", Заголовок = "") Экспорт
	
	МодульВариантыОтчетов = сфпОбщегоНазначения.сфпОбщийМодуль("ВариантыОтчетов");
	МодульОбщегоНазначения = сфпОбщегоНазначения.сфпОбщийМодуль("ОбщегоНазначения");
	Вариант = МодульВариантыОтчетов.ВариантОтчета(МодульОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяОтчета), КлючВарианта);
	
	Если Не ЗначениеЗаполнено(Вариант) Тогда
		ВызватьИсключение СтрШаблон(НСтр(
		"ru = 'Не удалось определить вариант отчета по переданным параметрам:
		|ИмяОтчета = ""%1"", КлючВарианта = ""%2"".'"),
		ИмяОтчета, КлючВарианта);
	КонецЕсли;
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("Вариант", Вариант);
	СтруктураОписания.Вставить("Поле", Поле);
	СтруктураОписания.Вставить("Заголовок", Заголовок);
	ВариантыРасшифровки.Добавить(СтруктураОписания);
	
КонецПроцедуры

// Добавляет стандартные варианты оформления для суммовых полей
//
// Параметры:
//   ВариантыОформления - Соответствие - Описания предопределенных вариантов оформления в разрезе полей
//   Поля - Строка, Массив - Имена суммовых полей
//   НастройкиКД - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета для установки основного варианта оформления
//
Процедура ДобавитьВариантыОформленияСумм(ВариантыОформления, Поля, НастройкиКД = Неопределено) Экспорт
	
	Если ТипЗнч(Поля)=Тип("Строка") Тогда
		МассивПолей = сфпСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
	ИначеЕсли ТипЗнч(Поля)=Тип("Массив") Тогда
		МассивПолей = Поля;
	Иначе
		Возврат;
	КонецЕсли;
	
	КлючОсновногоВариантаОформления = НСтр("ru = 'С копейками'");
	
	Для каждого ИмяПоля Из МассивПолей Цикл
		
		КлючВариантаОформления = КлючОсновногоВариантаОформления;
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=2");
		
		КлючВариантаОформления = НСтр("ru = 'Без копеек'");
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=0");
		
		КлючВариантаОформления = НСтр("ru = 'В тысячах'");
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=0; ЧС=3");
			
	КонецЦикла; 
	
	Если НЕ НастройкиКД=Неопределено Тогда
		Для каждого ИмяПоля Из МассивПолей Цикл
			сфпОтчетыКлиентСервер.ДобавитьУсловноеОформление(НастройкиКД, ИмяПоля, ВариантыОформления[ИмяПоля][КлючОсновногоВариантаОформления]); 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

// Добавляет стандартные варианты оформления для количественных полей
//
// Параметры:
//   ВариантыОформления - Соответствие - Описания предопределенных вариантов оформления в разрезе полей
//   Поля - Строка, Массив - Имена количественных полей
//   НастройкиКД - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета для установки основного варианта оформления
//
Процедура ДобавитьВариантыОформленияКоличества(ВариантыОформления, Поля, НастройкиКД = Неопределено) Экспорт
	
	Если ТипЗнч(Поля)=Тип("Строка") Тогда
		МассивПолей = сфпСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
	ИначеЕсли ТипЗнч(Поля)=Тип("Массив") Тогда
		МассивПолей = Поля;
	Иначе
		Возврат;
	КонецЕсли;
	
	КлючОсновногоВариантаОформления = НСтр("ru = 'Не выравнивать'");
	
	Для каждого ИмяПоля Из МассивПолей Цикл
		
		КлючВариантаОформления = КлючОсновногоВариантаОформления;
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧРГ=' '");
			
		КлючВариантаОформления = НСтр("ru = 'Выравнивать до 3-х знаков после запятой'");
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=3");
		
	КонецЦикла;
	
	Если НЕ НастройкиКД=Неопределено Тогда
		Для каждого ИмяПоля Из МассивПолей Цикл
			сфпОтчетыКлиентСервер.ДобавитьУсловноеОформление(НастройкиКД, ИмяПоля, ВариантыОформления[ИмяПоля][КлючОсновногоВариантаОформления]); 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеОтчета

// Возвращает структуру служебных данных для формирования отчета
//
// Параметры:
//    НастройкиОтчета - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//
// Возвращаемое значение: 
//   * Структура     - Структура сложебных данных для формирования. Содержит поля;
//      НастройкиОтчета - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//      ВыводитьЗаголовок - Булево - Признак отображения заголовка отчета
//      Заголовок - Строка - Заголовок отчета
//      ПараметрыВключаемыеВТекстОтбора - Массив - Массив имен параметров, включаемых в текст отбора при выводе заголовка
//      Переносит параметры из структуры ДополнительныеСвойства настроек компоновки данных
//
Функция ПараметрыФормированияОтчета(НастройкиОтчета) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиОтчета", НастройкиОтчета);
	
	ДополнительныеСвойства = НастройкиОтчета.ДополнительныеСвойства;
	Для каждого Свойство Из ДополнительныеСвойства Цикл
		Результат.Вставить(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	
	Параметр = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Результат.Вставить("ВыводитьЗаголовок", НЕ Параметр=Неопределено И Параметр.Использование И Параметр.Значение);
	Если Результат.ВыводитьЗаголовок И НЕ Результат.Свойство("Заголовок") Тогда
		Параметр = НастройкиОтчета.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
		Если НЕ Параметр=Неопределено И Параметр.Использование Тогда
			Результат.Вставить("Заголовок", Параметр.Значение);
		Иначе
			Результат.Вставить("Заголовок", "");
		КонецЕсли; 
	КонецЕсли; 
	
	ПараметрыВключаемыеВТекстОтбора = Новый Массив;
	НевыводимыеПараметры = сфпСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("НачалоПериода,КонецПериода,Период,СтПериод,Периодичность,ТипДиаграммы,ВыводитьЗаголовок");
	Для каждого Параметр Из НастройкиОтчета.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		Если НЕ НевыводимыеПараметры.Найти(Строка(Параметр.Параметр))=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ПараметрыВключаемыеВТекстОтбора.Добавить(Параметр); 
	КонецЦикла;
	Если ПараметрыВключаемыеВТекстОтбора.Количество()>0 Тогда
		Результат.Вставить("ПараметрыВключаемыеВТекстОтбора", ПараметрыВключаемыеВТекстОтбора);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Добавляет дополнительные вычисляемые поля в схему компоновки данных отчета
//    Добавляемые поля: МесяцГода, ДеньМесяцГода, НеделяГода
//
// Параметры:
//    СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//
Процедура ДобавитьВычисляемыеПоля(СхемаКомпоновкиДанных) Экспорт
	
	Поле = ПолеСхемы(СхемаКомпоновкиДанных, "ПериодДляРасчета");
	Если Поле=Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Период");
	КонецЕсли; 
	Если Поле=Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "ПериодСекунда");
	КонецЕсли; 
	Если НЕ Поле=Неопределено Тогда
		ИмяПоля = Поле.ПутьКДанным;
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("МесяцГода");
		Если ВычисляемоеПоле=Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "МесяцГода";
			ВычисляемоеПоле.Выражение = "сфпОтчеты.МесяцГода("+ИмяПоля+")";
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'Месяц года'");
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("Формат", НСтр("ru = 'ДФ=ММММ'"));
			ВычисляемоеПоле.ОграничениеИспользования.Условие = Истина;
		КонецЕсли; 
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДеньМесяцГода");
		Если ВычисляемоеПоле=Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "ДеньМесяцГода";
			ВычисляемоеПоле.Выражение = "сфпОтчеты.ДеньМесяцГода("+ИмяПоля+")";
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'День и месяц года'");
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("Формат", НСтр("ru = 'ДФ=''д ММММ'''")); 
			ВычисляемоеПоле.ОграничениеИспользования.Условие = Истина;
		КонецЕсли; 
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("НеделяГода");
		Если ВычисляемоеПоле=Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "НеделяГода";
			ВычисляемоеПоле.Выражение = "сфпОтчеты.НомерНеделиГода("+ИмяПоля+")";
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'Неделя года'");
			ВычисляемоеПоле.ОграничениеИспользования.Условие = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Контрагент");
	Если Поле=Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Покупатель");
	КонецЕсли;
	Если Поле=Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Поставщик");
	КонецЕсли;
	Если Поле<>Неопределено Тогда
		//ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДобавленноеПоле_Тег");
		//Если ВычисляемоеПоле=Неопределено Тогда
		//	ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		//	ВычисляемоеПоле.ПутьКДанным = "ДобавленноеПоле_Тег";
		//	ВычисляемоеПоле.Выражение = "";
		//	ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Теги");
		//	ВычисляемоеПоле.Заголовок = НСтр("ru = 'Тег'");
		//	ВычисляемоеПоле.ОграничениеИспользования.Группировка = Истина;
		//	ВычисляемоеПоле.ОграничениеИспользования.Поле = Истина;
		//	ВычисляемоеПоле.ОграничениеИспользования.Порядок = Истина;
		//КонецЕсли; 
		//ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДобавленноеПоле_Сегмент");
		//Если ВычисляемоеПоле=Неопределено Тогда
		//	ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		//	ВычисляемоеПоле.ПутьКДанным = "ДобавленноеПоле_Сегмент";
		//	ВычисляемоеПоле.Выражение = "";
		//	ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сегменты");
		//	ВычисляемоеПоле.Заголовок = НСтр("ru = 'Сегмент'");
		//	ВычисляемоеПоле.ОграничениеИспользования.Группировка = Истина;
		//	ВычисляемоеПоле.ОграничениеИспользования.Поле = Истина;
		//	ВычисляемоеПоле.ОграничениеИспользования.Порядок = Истина;
		//КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Стандартизирует схему компоновки данных отчета
//    * Устанавливает стандартные заголовки периодических полей отчета
//    * Устанавливаент стандартные форматы вывода периодических полей отчета 
//
// Параметры:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//
Процедура СтандартизироватьСхему(СхемаКомпоновкиДанных) Экспорт
	
	ТабПолей = Новый ТаблицаЗначений;
	ТабПолей.Колонки.Добавить("Поле");
	ТабПолей.Колонки.Добавить("Заголовок");
	ТабПолей.Колонки.Добавить("Формат");
	
	// Форматы по умолчанию
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодСекунда", НСтр("ru = 'Секунда'"), НСтр("ru = 'ДФ=''дд.ММ.гггг ЧЧ:мм:сс'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодМинута", НСтр("ru = 'Минута'"), НСтр("ru = 'ДФ=''дд.ММ.гггг ЧЧ:мм'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодЧас", НСтр("ru = 'Час'"), НСтр("ru = 'ДФ=''дд.ММ.гггг ЧЧ:00'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодДень", НСтр("ru = 'День'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодНеделя", НСтр("ru = 'Начало недели'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодДекада", НСтр("ru = 'Начало декады'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодМесяц", НСтр("ru = 'Месяц'"), НСтр("ru = 'ДФ=''МММ гггг'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодКвартал", НСтр("ru = 'Квартал'"), НСтр("ru = 'ДФ=''к ''''кв.'''' гггг'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодПолугодие", НСтр("ru = 'Начало полугодия'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодГод", НСтр("ru = 'Год'"), НСтр("ru = 'ДФ=гггг'"));
	
	Для каждого Стр Из ТабПолей Цикл
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, Стр.Поле);
		Если Поле=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Стр.Заголовок) Тогда
			Поле.Заголовок = Стр.Заголовок;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Стр.Формат) Тогда
			Поле.Оформление.УстановитьЗначениеПараметра("Формат", Стр.Формат); 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Изменяет схему отчета для поддержки мультивалютности
//
// Параметры:
//    СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//    Настройки - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//
Процедура ОбработатьСхемуМультивалютногоОтчета(СхемаКомпоновкиДанных, Настройки) Экспорт
	
	Если Настройки.Структура.Количество()>1 Тогда
		Возврат;
	КонецЕсли; 
	ГруппировкиСВалютами = МультивалютныеГруппировкиРекурсивно(Настройки.Структура);
	ДобавитьГруппировкиПериодов(ГруппировкиСВалютами, СхемаКомпоновкиДанных);
	Если ГруппировкиСВалютами.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	ГруппировкиКолонок = ГруппировкиКолонокРекурсивно(Настройки.Структура);
	ГруппировкиБезВалют = ПрочиеГруппировки(Настройки, ГруппировкиСВалютами, ГруппировкиКолонок);
	ВыбранныеРесурсы = Новый Массив;
	Для каждого Ресурс Из СхемаКомпоновкиДанных.ПоляИтога Цикл
		Ресурс.Группировки.Очистить();
		Для каждого ИмяГруппировки Из ГруппировкиБезВалют Цикл
			Ресурс.Группировки.Добавить(ИмяГруппировки);
		КонецЦикла;
		Ресурс.Группировки.Добавить("ОбщийИтог");
	КонецЦикла; 
	Для каждого ПолеВыбор Из Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ ПолеВыбор.Ресурс Тогда
			Продолжить;
		КонецЕсли; 
		ИмяПоля = Строка(ПолеВыбор.Поле);
		Если Найти(ИмяПоля, "Вал")>0 Тогда
			Продолжить;
		КонецЕсли; 
		Суффиксы = сфпСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("НачальныйОстаток,Приход,Расход,Оборот,КонечныйОстаток,Остаток,");
		ПолеВыборВал = Неопределено;
		Для каждого Суффикс Из Суффиксы Цикл
			Если ПустаяСтрока(Суффикс) Тогда
				ИмяПоляВал = ИмяПоля+"Вал";
			Иначе
				Позиция = Найти(ИмяПоля, Суффикс);
				Если Позиция=0 Тогда
					Продолжить;
				КонецЕсли;
				ИмяПоляВал = Лев(ИмяПоля, Позиция-1)+"Вал"+Сред(ИмяПоля, Позиция);
			КонецЕсли; 
			ПолеВыборВал = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляВал));
			Если ПолеВыборВал=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Прервать;
		КонецЦикла;
		Если НЕ ПолеВыборВал=Неопределено Тогда
			НовыйРесурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			НовыйРесурс.ПутьКДанным = ИмяПоля;
			НовыйРесурс.Выражение = "СУММА("+ИмяПоляВал+")";
			Для каждого Группировка Из ГруппировкиСВалютами Цикл
				НовыйРесурс.Группировки.Добавить(Группировка);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Выводит картинки из данных расшифровки в отчет. Используется в режиме сравнения
//
// Параметры:
//    ЭлементРезультата - ЭлементРезультатаКомпоновкиДанных - Элемент результата выполнения компоновки данных
//    ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки
//    ДокументРезультат - ТабличныйДокумент - Результат компоновки отчета
//    ПараметрыФормирования - Структура - Служебные параметры формирования отчета
//
Процедура ВывестиКартинкиВЭлементРезультата(ЭлементРезультата, ДанныеРасшифровки, ДокументРезультат, ПараметрыФормирования) Экспорт
	
	Если ЭлементРезультата.ЗначенияПараметров.Количество() = 0 Тогда 
		Возврат; 
	КонецЕсли;

	Для Каждого ЭлементПараметра Из ЭлементРезультата.ЗначенияПараметров Цикл
		Если ТипЗнч(ЭлементПараметра.Значение) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			Поля = ДанныеРасшифровки.Элементы[ЭлементПараметра.Значение].ПолучитьПоля();
			Для Каждого Поле Из Поля Цикл
				Если НЕ ПараметрыФормирования.ПорядокГруппировокЗаполнен Тогда
					Если ПараметрыФормирования.СтруктураПолейСравнения.Количество()=0 Тогда
						ПараметрыФормирования.ПорядокГруппировокЗаполнен = Истина;
					ИначеЕсли НЕ Поле.Поле=ПараметрыФормирования.ГруппировкаКолонок И НЕ Поле.Поле=ПараметрыФормирования.Сравнение Тогда
						ПараметрыФормирования.ПорядокГруппировокЗаполнен = Истина;
					Иначе
						Если НЕ ПараметрыФормирования.Свойство("ПерваяКолонка") Тогда
							ПараметрыФормирования.Вставить("ПерваяКолонка", ДокументРезультат.ШиринаТаблицы-ПараметрыФормирования.СтруктураПолейСравнения.Количество()+1);
						КонецЕсли; 
						ПараметрыФормирования.ПорядокГруппировок.Добавить(Поле.Поле);
					КонецЕсли; 
				КонецЕсли; 
				Если ТипЗнч(Поле.Значение)=Тип("ХранилищеЗначения") ТОгда
					Картинка = Поле.Значение.Получить();
					Для НомерКолонки = 1 По ДокументРезультат.ШиринаТаблицы Цикл
						ОбластьЯчейки = ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, НомерКолонки, ДокументРезультат.ВысотаТаблицы, НомерКолонки);
						Если ЭлементПараметра.Значение=ОбластьЯчейки.Расшифровка Тогда
							Изображение = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
							Изображение.РазмерКартинки = РазмерКартинки.АвтоРазмер;
							Изображение.Картинка = Картинка;
							Изображение.ГраницаСверху = Ложь;
							Изображение.ГраницаСнизу = Ложь;
							Изображение.ГраницаСправа = Ложь;
							Изображение.ГраницаСлева = Ложь;
							Изображение.ГраницаСлева = Ложь;
							Изображение.ЦветФона = Новый Цвет;
							Изображение.Расположить(ОбластьЯчейки);
							ОбластьЯчейки.Текст = "";
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

// Возвращает массив цветов стандартной палитры диаграмм
//
// Возвращаемое значение: 
//   * Массив - Массив элементов типа Цвет
//
Функция ЦветаСерийДиаграмм32() Экспорт
	
	Цвета = Новый Массив;
	Цвета.Добавить(Новый Цвет(245, 152, 150));
	Цвета.Добавить(Новый Цвет(142, 201, 249));
	Цвета.Добавить(Новый Цвет(255, 202, 125));
	Цвета.Добавить(Новый Цвет(178, 154, 218));
	Цвета.Добавить(Новый Цвет(163, 214, 166));
	Цвета.Добавить(Новый Цвет(244, 140, 175));
	Цвета.Добавить(Новый Цвет(125, 221, 233));
	Цвета.Добавить(Новый Цвет(255, 242, 128));
	Цвета.Добавить(Новый Цвет(205, 145, 215));
	Цвета.Добавить(Новый Цвет(125, 202, 194));
	//10
	Цвета.Добавить(Новый Цвет(229, 216, 165));
	Цвета.Добавить(Новый Цвет(178, 136, 143));
	Цвета.Добавить(Новый Цвет(135, 151, 106));
	Цвета.Добавить(Новый Цвет(94, 163, 153));
	Цвета.Добавить(Новый Цвет(163, 137, 109));
	Цвета.Добавить(Новый Цвет(169, 155, 174));
	Цвета.Добавить(Новый Цвет(122, 131, 135));
	Цвета.Добавить(Новый Цвет(132, 122, 112));
	Цвета.Добавить(Новый Цвет(240, 185, 200));
	Цвета.Добавить(Новый Цвет(158, 152, 131));
	//20
	Цвета.Добавить(Новый Цвет(107, 195, 102));
	Цвета.Добавить(Новый Цвет(188, 255, 189));
	Цвета.Добавить(Новый Цвет(150, 197, 191));
	Цвета.Добавить(Новый Цвет(193, 146, 64));
	Цвета.Добавить(Новый Цвет(197, 146, 250));
	Цвета.Добавить(Новый Цвет(210, 110, 71));
	Цвета.Добавить(Новый Цвет(158, 140, 255));
	Цвета.Добавить(Новый Цвет(114, 149, 92));
	Цвета.Добавить(Новый Цвет(126, 144, 230));
	Цвета.Добавить(Новый Цвет(252, 119, 87));
	//30
	Цвета.Добавить(Новый Цвет(127, 192, 255));
	Цвета.Добавить(Новый Цвет(179, 114, 101));
	Возврат Цвета;
	
КонецФункции

// Предопределенный обработчик "ПриКомпоновкеРезультата"
//
// Параметры:
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
//   ДокументРезультат - ТабличныйДокумент - Документ, в который выводится результат.
//   ДанныеРасшифровки - Произвольный - Данные расшифровки.
//   СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ПриКомпоновкеРезультата(КомпоновщикНастроек, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	Если сфпСофтФонПроСервер.сфпИспользоватьОграничениеПоказаТелефонныхЗвонков() Тогда
		МассивПользователей = сфпСофтФонПроСервер.сфпПолучитьМассивПрослушиваемыхПользователей(сфпСофтФонПроСервер.сфпТекущийПользователь());
		СписокПользователей = Новый СписокЗначений();
		СписокПользователей.ЗагрузитьЗначения(МассивПользователей);
		
		Для Каждого Настройка Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(Настройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Если Настройка.Параметр = Новый ПараметрКомпоновкиДанных("Сотрудники") Тогда
					Настройка.Значение = СписокПользователей;
					Настройка.Использование = Истина;
					
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

// Возвращает поле схемы компоновки данных по имени или полю компоновки данных
//
// Параметры:
//   Схема - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//   Поле - Строка, ПолеКомпоновкиДанных - Поле компоновки для которого нужно получить соответствующее поле схемы
//
// Возвращаемое значение: 
//   * ПолеНабораДанныхСхемыКомпоновкиДанных,ВычисляемоеПолеСхемыКомпоновкиДанных - Найденное поле схемы компоновки данных
//   * Неопределено                                                               - Если поле не найдено
//
Функция ПолеСхемы(Схема, Поле) Экспорт
	
	ИмяПоля = Строка(Поле);
	Если ПустаяСтрока(ИмяПоля) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Для каждого Набор Из Схема.НаборыДанных Цикл
		ПолеСхемы = Набор.Поля.Найти(ИмяПоля);
		Если НЕ ПолеСхемы=Неопределено Тогда
			Возврат ПолеСхемы;
		КонецЕсли;  
	КонецЦикла;
	ПолеСхемы = Схема.ВычисляемыеПоля.Найти(ИмяПоля);
	Если НЕ ПолеСхемы=Неопределено Тогда
		Возврат ПолеСхемы;
	КонецЕсли; 
	Возврат Неопределено;
	
КонецФункции

// Ограничивает использование поля схемы компоновки данных с заданным именем
//
// Параметры:
//   Схема - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//   ИмяПоля - Строка - Имя поля компоновки, которое следует ограничить
//
Процедура ОграничитьИспользованиеПоля(Схема, ИмяПоля) Экспорт
	
	ПолеСКД = ПолеСхемы(Схема, ИмяПоля);
	Если ПолеСКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеСКД.ОграничениеИспользования.Группировка = Истина;
	ПолеСКД.ОграничениеИспользования.Поле = Истина;
	ПолеСКД.ОграничениеИспользования.Порядок = Истина;
	ПолеСКД.ОграничениеИспользования.Условие = Истина;
	ПолеСКД.ОграничениеИспользованияРеквизитов.Группировка = Истина;
	ПолеСКД.ОграничениеИспользованияРеквизитов.Поле = Истина;
	ПолеСКД.ОграничениеИспользованияРеквизитов.Порядок = Истина;
	ПолеСКД.ОграничениеИспользованияРеквизитов.Условие = Истина;
	
КонецПроцедуры

// Возвращает таблицу периодов для заданного промежутка 
//
// Параметры:
//   НачалоПериода - Дата - Дата начала определения периодов
//   КонецПериода - Дата - Дата конца определения периодов
//   ПараметрыОтчета - Структура - Служебные параметры формирования отчета
//
// Возвращаемое значение: 
//   * ТаблицаЗначений - Таблица периодов с колонками ПериодНачало, ПериодКонец
//
Функция ТаблицаПериодов(НачалоПериода, КонецПериода, ПараметрыОтчета) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПериодНачало");
	Результат.Колонки.Добавить("ПериодКонец");
	
	Если ПараметрыОтчета.Периодичность <> Перечисления.сфпПериодичность.ПустаяСсылка() Тогда
		Периодичность = ПараметрыОтчета.Периодичность;
	Иначе
		Периодичность = ПолучитьЗначениеПериодичности(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	ТекущаяДата = НачалоПериода;
	
	Пока ТекущаяДата <= КонецПериода Цикл
		НоваяСтрока = Результат.Добавить();
		Если Периодичность = Перечисления.сфпПериодичность.День Тогда
			НоваяСтрока.ПериодНачало = НачалоДня(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецДня(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Неделя Тогда
			НоваяСтрока.ПериодНачало = НачалоНедели(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецНедели(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Декада Тогда
			НоваяСтрока.ПериодНачало = НачалоДекады(ТекущаяДата);
			НоваяСтрока.ПериодКонец = КонецДекады(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Месяц Тогда
			НоваяСтрока.ПериодНачало = НачалоМесяца(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецМесяца(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Квартал Тогда
			НоваяСтрока.ПериодНачало = НачалоКвартала(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецКвартала(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Полугодие Тогда
			Если Месяц(ТекущаяДата) > 6 Тогда
				НоваяСтрока.ПериодНачало = НачалоДня(Дата(Год(ТекущаяДата), 7, 1));
				НоваяСтрока.ПериодКонец  = КонецГода(ТекущаяДата);
			Иначе
				НоваяСтрока.ПериодНачало = НачалоДня(Дата(Год(ТекущаяДата), 1, 1));
				НоваяСтрока.ПериодКонец  = КонецМесяца(Дата(Год(ТекущаяДата), 6, 1));
			КонецЕсли;
		ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Год Тогда
			НоваяСтрока.ПериодНачало = НачалоГода(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецГода(ТекущаяДата);
		Иначе
			ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отсутствует обработчик параметра Периодичность = ""%1"".'"),
			Периодичность);
		КонецЕсли;
		ТекущаяДата = НоваяСтрока.ПериодКонец + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает начало декады для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения начала декады
//
// Возвращаемое значение: 
//    * Дата - Дата начала декады
//
Функция НачалоДекады(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если День(ПараметрДата) < 11 Тогда
		Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 1);
	КонецЕсли;
	
	Если День(ПараметрДата) < 21 Тогда
		Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 11);
	КонецЕсли;
	
	Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 21);
	
КонецФункции

// Возвращает конец декады для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения конца декады
//
// Возвращаемое значение: 
//    * Дата - Дата конца декады
//
Функция КонецДекады(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если День(ПараметрДата) >= 21 Тогда
		Возврат КонецМесяца(ПараметрДата);
	КонецЕсли;
	
	Если День(ПараметрДата) >= 11 Тогда
		Возврат КонецДня(Дата(Год(ПараметрДата), Месяц(ПараметрДата), 20));
	КонецЕсли;
	
	Возврат КонецДня(Дата(Год(ПараметрДата), Месяц(ПараметрДата), 10));
	
КонецФункции

// Возвращает преобразованную дату, для которой актуальными остается только месяц, остальные части даты сбрасываются 
//
// Параметры:
//    ПараметрДата - Дата - Дата определения месяца
//
// Возвращаемое значение: 
//    * Дата - Дата содержащая месяц
//
Функция МесяцГода(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Дата(1900, Месяц(ПараметрДата), 1, 0, 0, 0);		
	
КонецФункции

// Возвращает преобразованную дату, для которой актуальными остается только месяц и день, остальные части даты сбрасываются 
//
// Параметры:
//    ПараметрДата - Дата - Дата определения месяца и дня
//
// Возвращаемое значение: 
//    * Дата - Дата содержащая месяц и день
//
Функция ДеньМесяцГода(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Дата(1900, Месяц(ПараметрДата), День(ПараметрДата), 0, 0, 0);		
	
КонецФункции

// Возвращает номер недели года. Используется в вычисляемых полях отчетов
//
// Параметры:
//    ПараметрДата - Дата - Дата определения номера недели
//
// Возвращаемое значение: 
//    * Число - Номер недели года
//
Функция НомерНеделиГода(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НеделяГода(ПараметрДата);		
	
КонецФункции

// Возвращает исходный текст, очищенный от html-тегов
//
// Параметры:
//    Текст - Строка - Текст с тегами
//
// Возвращаемое значение: 
//    * Строка - Текст с удаленными тегами
//
Функция ТекстБезТегов(Текст) Экспорт
	
	Результат = "";
	ОстатокСтроки = Текст;
	Позиция = Найти(ОстатокСтроки, "<");
	Пока Позиция>0 Цикл
		ТекстДо = Лев(ОстатокСтроки, Позиция-1);
		Результат = Результат+ТекстДо;
		ОстатокСтроки = Сред(ОстатокСтроки, Позиция);
		ПозицияКонца = Найти(ОстатокСтроки, ">");
		Если ПозицияКонца=0 Тогда
			ОстатокСтроки = "";
			Прервать;
		КонецЕсли; 
		ОстатокСтроки = Сред(ОстатокСтроки, ПозицияКонца+1);
		Позиция = Найти(ОстатокСтроки, "<");
	КонецЦикла;
	Результат = Результат+ОстатокСтроки;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыСозданияЭлементов

// Добавляет фильтр на форму отчета
//
// Параметры:
//   Стр - ДанныеФормыЭлементДерева или СтрокаДереваЗначений - строка описания фильтра
//   Форма - УправляемаяФорма - Экземпляр формы отчета, на которую добавляется фильтр
//   ПараметрыВыбора - ФиксированныйМассив - Фиксированный массив элементов типа ПараметрВыбора
//   СвязиПараметровВыбора - ФиксированныйМассив - Фиксированный массив элементов типа СвязьПараметраВыбора
//
// Места использования:
//   ОбщаяФорма.ОтчетыУНФ.ВнестиИзмененияВРеквизитыНаФорме()
//
Процедура ДобавитьЭлементФильтр(Стр, Форма, ПараметрыВыбора, СвязиПараметровВыбора) Экспорт
	
	Элементы = Форма.Элементы;
	Если Стр.ВидЭлемента="Поле" Тогда
		СоздатьФильтрПолеВвода(Стр, Форма, Элементы, ПараметрыВыбора, СвязиПараметровВыбора);
	ИначеЕсли Стр.ВидЭлемента="Период" Тогда
		СоздатьФильтрПериод(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Пределы" Тогда
		СоздатьФильтрПределы(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Тумблер" Тогда
		СоздатьФильтрТумблер(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Флажок" Тогда
		СоздатьФильтрФлажки(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Булево" Тогда
		СоздатьФильтрБулево(Стр, Форма, Элементы);
	Иначе
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОтчета

Процедура ДобавитьСтрокуТаблицыПолей(Таблица, Поле, Заголовок = Неопределено, Формат = Неопределено)
	
	Стр = Таблица.Добавить();
	Стр.Поле = Поле;
	Стр.Заголовок = Заголовок;
	Стр.Формат = Формат;
	
КонецПроцедуры

Функция МультивалютныеГруппировкиРекурсивно(Структура, Знач Добавить = Ложь)
	
	Результат = Новый Массив;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если ИмяПоля="Валюта" Тогда
					Добавить = Истина;
				КонецЕсли; 
			КонецЦикла;
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если Добавить И Результат.Найти(ИмяПоля)=Неопределено Тогда
					Если Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Элементы Тогда
						Результат.Добавить(ИмяПоля);
					ИначеЕсли Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
						Результат.Добавить(ИмяПоля+" Иерархия");
					ИначеЕсли Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
						Результат.Добавить(ИмяПоля);
						Результат.Добавить(ИмяПоля+" Иерархия");
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			ВложенныйРезультат = МультивалютныеГруппировкиРекурсивно(Элемент.Структура, Добавить);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ВложенныйРезультат = МультивалютныеГруппировкиРекурсивно(Элемент.Строки, Добавить);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьГруппировкиПериодов(Группировки, СхемаКомпоновкиДанных)
	
	Если Группировки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ПоляПериода = Новый Массив;
	Для каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для каждого Поле Из Набор.Поля Цикл
			Если НЕ ТипЗнч(Поле)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли; 
			Если Поле.Роль.НомерПериода>0 Тогда
				ПоляПериода.Добавить(Поле.ПутьКДанным);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	Добавлять = Ложь;
	Для каждого ИмяПоля Из ПоляПериода Цикл
		Если НЕ Группировки.Найти(ИмяПоля)=Неопределено Тогда
			Добавлять = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если Добавлять Тогда
		Для каждого ИмяПоля Из ПоляПериода Цикл
			Если Группировки.Найти(ИмяПоля)=Неопределено Тогда
				Группировки.Добавить(ИмяПоля);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ГруппировкиКолонокРекурсивно(Структура)
	
	Результат = Новый Массив;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если Результат.Найти(ИмяПоля)=Неопределено Тогда
					Если Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Элементы Тогда
						Результат.Добавить(ИмяПоля);
					ИначеЕсли Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
						Результат.Добавить(ИмяПоля+" Иерархия");
					ИначеЕсли Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
						Результат.Добавить(ИмяПоля);
						Результат.Добавить(ИмяПоля+" Иерархия");
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			ВложенныйРезультат = ГруппировкиКолонокРекурсивно(Элемент.Структура);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ВложенныйРезультат = ГруппировкиКолонокРекурсивно(Элемент.Колонки);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ПрочиеГруппировки(Настройки, ГруппировкиВалют, ГруппировкиКолонок)
	
	ТипыСправочник = Справочники.ТипВсеСсылки();
	ТипыПВХ = ПланыВидовХарактеристик.ТипВсеСсылки();
	Результат = Новый Массив;
	Для каждого Поле Из Настройки.ДоступныеПоляГруппировок.Элементы Цикл
		ИмяПоля = Строка(Поле.Поле);
		Если ГруппировкиВалют.Найти(ИмяПоля)=Неопределено И ГруппировкиКолонок.Найти(ИмяПоля)=Неопределено Тогда
			Результат.Добавить(ИмяПоля);
		КонецЕсли;
		Для каждого Тип Из Поле.ТипЗначения.Типы() Цикл
			Если ТипыСправочник.СодержитТип(Тип) ИЛИ ТипыПВХ.СодержитТип(Тип) Тогда
				МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип);
				Если МетаданныеОбъекта.Иерархический Тогда
					ИмяПоля = ИмяПоля+" Иерархия";
					Если ГруппировкиВалют.Найти(ИмяПоля)=Неопределено И ГруппировкиКолонок.Найти(ИмяПоля)=Неопределено Тогда
						Результат.Добавить(ИмяПоля);
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;   
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция СтрокФиксироватьСлева(КомпоновщикНастроек) Экспорт

    ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки");
	Если ПараметрВывода.Использование 
		И ПараметрВывода.Значение = РасположениеПолейГруппировкиКомпоновкиДанных.Вместе Тогда
		ГруппировкиОтдельно = Ложь; 
	Иначе
		ГруппировкиОтдельно = Истина;
	КонецЕсли; 
    ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");
	Если ПараметрВывода.Использование 
		И ПараметрВывода.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		РеквизитыОтдельно = Истина; 
	Иначе
		РеквизитыОтдельно = Ложь;
	КонецЕсли; 
    СтрокФиксироватьСлева = МасксимальноеКоличествоПолейРекурсивно(КомпоновщикНастроек.Настройки.Структура, ГруппировкиОтдельно, РеквизитыОтдельно);

    ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ГоризонтальноеРасположениеОбщихИтогов");
    Если (ПараметрВывода.Значение = РасположениеИтоговКомпоновкиДанных.Начало
        ИЛИ ПараметрВывода.Значение = РасположениеИтоговКомпоновкиДанных.НачалоИКонец)
        И ПараметрВывода.Использование = Истина Тогда

        СтрокФиксироватьСлева = СтрокФиксироватьСлева + 1;

    КонецЕсли;

    ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("РасположениеРесурсов");
    Если ПараметрВывода.Значение = РасположениеРесурсовКомпоновкиДанных.Вертикально
        И ПараметрВывода.Использование = Истина Тогда

        СтрокФиксироватьСлева = СтрокФиксироватьСлева + 1;

    КонецЕсли;

    Возврат СтрокФиксироватьСлева;

КонецФункции

Функция МасксимальноеКоличествоПолейРекурсивно(ЭлементыСтруктуры, ГруппировкиОтдельно, РеквизитыОтдельно)
	
	КоличествоПолей = 0;
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если НЕ Элемент.Использование Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") И НЕ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ГруппировкиОтдельно Тогда
			Возврат 1;
		КонецЕсли; 
		КоличествоПолейГруппировки = 0;
		Для каждого ПолеГруппировки Из Элемент.ПоляГруппировки.Элементы Цикл
			Если НЕ ПолеГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли; 
			Если НЕ ТипЗнч(ПолеГруппировки)=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			ИмяПоля = Строка(ПолеГруппировки.Поле);
			ЭтоРеквизит = Ложь;
			Позиция = Найти(ИмяПоля, ".");
			Если НЕ РеквизитыОтдельно И Позиция>0 Тогда
				ИмяРодителя = Лев(ИмяПоля, Позиция-1);
				Для каждого ПолеПроверки Из Элемент.ПоляГруппировки.Элементы Цикл
					ИмяПоляПроверки  = Строка(ПолеПроверки.Поле);
					Если ИмяПоля=ИмяПоляПроверки Тогда
						Прервать;
					КонецЕсли;
					ПозицияПроверки = Найти(ИмяПоляПроверки, ".");
					ИмяРодителяПроверки = ?(ПозицияПроверки=0, ИмяПоляПроверки, Лев(ИмяПоляПроверки, ПозицияПроверки-1));
					Если ИмяРодителя=ИмяРодителяПроверки Тогда
						ЭтоРеквизит = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
			КоличествоПолейГруппировки = КоличествоПолейГруппировки+?(ЭтоРеквизит, ?(КоличествоПолейГруппировки=0, 1, 0), 1);
		КонецЦикла;
		КоличествоПолей = Макс(КоличествоПолей, КоличествоПолейГруппировки);
	КонецЦикла;
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			КоличествоПолей = Макс(КоличествоПолей, МасксимальноеКоличествоПолейРекурсивно(Элемент.Структура, ГруппировкиОтдельно, РеквизитыОтдельно));
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			КоличествоПолей = Макс(КоличествоПолей, МасксимальноеКоличествоПолейРекурсивно(Элемент.Строки, ГруппировкиОтдельно, РеквизитыОтдельно));
		КонецЕсли; 
	КонецЦикла; 
	Возврат КоличествоПолей;
	
КонецФункции

#КонецОбласти 

#Область ПроцедурыСозданияЭлементов

Функция СоздатьГруппу(Стр, Отображение = Неопределено, ЭтаФорма, Элементы) Экспорт
	
	Идентификатор = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	Группа = Элементы.Добавить("ГруппаФильтр"+Идентификатор, Тип("ГруппаФормы"), ?(Стр.Тип="Фильтр", Элементы.ГруппаФильтрЭлементы, Элементы.ГруппаПараметрыЭлементы));
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Группа.Заголовок = Стр.Заголовок;
	Группа.Подсказка = Стр.Заголовок;
	Группа.ОтображатьОтступСлева = Ложь;
	Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	Если Отображение = Неопределено Тогда
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	Иначе
		Группа.Отображение = Отображение;
	КонецЕсли;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Стр.ИмяГруппы = Группа.Имя;
	Возврат Группа;
	
КонецФункции

Процедура СоздатьФильтрПериод(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр,, ЭтаФорма, Элементы);
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита+"Начало", Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ПутьКДанным = ИмяРеквизита+".ДатаНачала";
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Элемент.Ширина = 9;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
		
		Элемент = Элементы.Добавить(ИмяРеквизита+"Разделитель", Тип("ДекорацияФормы"), Группа);
		Элемент.Вид = ВидДекорацииФормы.Надпись;
		Элемент.Заголовок = "-";
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.Ширина = 1;
		Стр.Элементы.Вставить(Элемент.Имя);
		
		Элемент = Элементы.Добавить(ИмяРеквизита+"Окончание", Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ПутьКДанным = ИмяРеквизита+".ДатаОкончания";
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Элемент.Ширина = 9;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрПределы(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр,, ЭтаФорма, Элементы);
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок = ?(Прав(ИмяРеквизита,2)="От", НСтр("ru = 'от'"), НСтр("ru = 'до'"));
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.КнопкаОчистки = Истина;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.КнопкаВыбора = Ложь;
		Элемент.Ширина = 10;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрТумблер(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр, ОтображениеОбычнойГруппы.Нет, ЭтаФорма, Элементы);
	Группа.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Группа.ОтображатьЗаголовок = Ложь;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Значения = Реквизит.Значение;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеПереключателя;
		//Элемент.ВидПереключателя = ВидПереключателя.Тумблер;
		Элемент.ВидПереключателя = ВидПереключателя.Переключатель;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элемент.Заголовок = Группа.Заголовок;
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли; 
		Если ТипЗнч(Значения)=Тип("Массив") Тогда
			Элемент.СписокВыбора.Добавить(Стр.ТипЗначения.ПривестиЗначение(Неопределено), НСтр("ru = 'Все'"));
			Для каждого Значение Из Значения Цикл
				Элемент.СписокВыбора.Добавить(Значение);
			КонецЦикла; 
		Иначе
			Для каждого ЭлементСписка Из Значения Цикл
				Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ЭлементСписка.Пометка);
			КонецЦикла; 
		КонецЕсли; 
		ЭтаФорма[ИмяРеквизита] = ?(ТипЗнч(ЭтаФорма[ИмяРеквизита])=Тип("ПеречислениеСсылка.сфпБулевоТриСостояния"), 
		ПредопределенноеЗначение("Перечисление.сфпБулевоТриСостояния.НеИзменять"), 
		Неопределено);
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрФлажки(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр,, ЭтаФорма, Элементы);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Заголовок = Строка(Реквизит.Значение);
		Элемент.Заголовок = Заголовок;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли; 
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрБулево(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр,, ЭтаФорма, Элементы);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.ОтображатьЗаголовок = Ложь;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.Заголовок = Стр.Заголовок;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьФильтрПолеВвода(Стр, ЭтаФорма, Элементы, ПараметрыВыбора, СвязиПараметровВыбора) Экспорт
	
	Группа = СоздатьГруппу(Стр,, ЭтаФорма, Элементы);
	Группа.ОтображатьЗаголовок = Ложь;
	
	МодульОбщегоНазначения = сфпОбщегоНазначения.сфпОбщийМодуль("ОбщегоНазначения");
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.КнопкаОткрытия = Ложь;
		Элемент.КнопкаСоздания = Ложь;
		Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
		Если Стр.ТипЗначения.Типы().Количество()>1 Тогда
			Элемент.КнопкаВыпадающегоСписка = Ложь;
			Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		ИначеЕсли НЕ Стр.ТипЗначения.Типы().Количество()=0 И МодульОбщегоНазначения.ЭтоСсылка(Стр.ТипЗначения.Типы().Получить(0)) Тогда
			Элемент.КнопкаВыпадающегоСписка = Истина;
		Иначе
			Элемент.КнопкаВыпадающегоСписка = Неопределено;
		КонецЕсли; 
		Элемент.ПодсказкаВвода = Стр.Заголовок;
		Элемент.Ширина = 23;
		
		Если Стр.ДополнительныеПараметры.Свойство("БыстрыйВыбор") И Стр.ДополнительныеПараметры.БыстрыйВыбор Тогда
			Элемент.БыстрыйВыбор = Истина;
		Иначе
			Элемент.БыстрыйВыбор = Ложь;
		КонецЕсли; 
		Если Стр.ДополнительныеПараметры.Свойство("АвтоОтметкаНезаполненного") И Стр.ДополнительныеПараметры.АвтоОтметкаНезаполненного Тогда
			Элемент.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли; 
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
			Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ФильтрОбработкаВыбора");
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ФильтрНачалоВыбора");
			Если ОписаниеТиповСодержитИерархическийТип(Стр.ТипЗначения) Тогда
				Кнопка = Элементы.Добавить(ИмяРеквизита+"_Иерархия", Тип("ДекорацияФормы"), Группа);
				Кнопка.Вид = ВидДекорацииФормы.Картинка;
				Кнопка.Гиперссылка = Истина;
				Кнопка.Ширина = 2;
				Элемент.Ширина = Элемент.Ширина-3;
				Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
				Кнопка.Высота = 1;
				Кнопка.РастягиватьПоГоризонтали = Ложь;
				Кнопка.РастягиватьПоВертикали = Ложь;
				Кнопка.Картинка = БиблиотекаКартинок.сфпРежимВыбораЭлементов;
				Кнопка.Подсказка = НСтр("ru = 'Используется выбор элементов'");
				Кнопка.УстановитьДействие("Нажатие", "Подключаемый_ИерархияФильтраНажатие");
			КонецЕсли; 
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли; 
		Если НЕ ПараметрыВыбора=Неопределено И ПараметрыВыбора.Количество()>0 Тогда
			Если ТипЗнч(ПараметрыВыбора)=Тип("СписокЗначений") Тогда
				Элемент.СписокВыбора.Очистить();
				Для каждого Параметр Из ПараметрыВыбора Цикл
					Элемент.СписокВыбора.Добавить(Параметр.Значение, Параметр.Представление);
				КонецЦикла;
				Если Элемент.СписокВыбора.Количество()>0 Тогда
					Элемент.РежимВыбораИзСписка = Истина;
					Элемент.КнопкаВыбора = Ложь;
				КонецЕсли; 
			Иначе
				МассивПараметров = Новый Массив;
				Для каждого Параметр Из ПараметрыВыбора Цикл
					МассивПараметров.Добавить(Новый ПараметрВыбора(Параметр.Имя, Параметр.Значение));
				КонецЦикла;
				Если МассивПараметров.Количество()>0 Тогда
					Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОтчета

Процедура ДобавитьСимволВалютыКЗаголовкамПолей(СхемаКомпоновкиДанных, Поля, Валюта = Неопределено) Экспорт
	
	Если Валюта=Неопределено Тогда
		СимволВалюты = "";
	Иначе
		СимволВалюты = "";
	КонецЕсли;
	
	МассивПолей = сфпСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
	
	Для каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для каждого Поле Из МассивПолей Цикл
			ПолеСхемы = Набор.Поля.Найти(Поле);
			Если ПолеСхемы=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ПолеСхемы.Заголовок = ПолеСхемы.Заголовок+", "+СимволВалюты;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция СуществуетСтандартныйРеквизит(СтандартныеРеквизиты, Имя)
	
	Для каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя=Имя Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьЗначениеПериодичности(НачалоПериода, КонецПериода) Экспорт
	
	Результат = Перечисления.сфпПериодичность.Месяц;
	Если ЗначениеЗаполнено(НачалоПериода)
		И ЗначениеЗаполнено(КонецПериода) Тогда
		
		Разность = КонецПериода - НачалоПериода;
		Если Разность / 86400 < 45 Тогда
			Результат = Перечисления.сфпПериодичность.День;
		Иначе
			Результат = Перечисления.сфпПериодичность.Месяц; // месяц
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура устанавливает формулу расчета и формат динамического периода.
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - СКД отчета
//		КомпоновщикНастроек - НастройкиКомпоновкиДанных - настройки отчета
//
Процедура НастроитьДинамическийПериод(СхемаКомпоновкиДанных, ПараметрыОтчета, ДополнятьПериод = Ложь) Экспорт
	
	НастройкиОтчета = ПараметрыОтчета.НастройкиОтчета;
	
	ПолеПараметр = Новый ПараметрКомпоновкиДанных("Периодичность");
	ПараметрПериодичность = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	
	Если ПараметрПериодичность = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрПериодичность.Использование Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрПериодичность.Значение) Тогда
		ПараметрПериодичность.Значение = ПолучитьЗначениеПериодичности(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	ИскомоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДинамическийПериод");
	
	Если ИскомоеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульОбщегоНазначения = сфпОбщегоНазначения.сфпОбщийМодуль("ОбщегоНазначения");
	СтрокаДлительностьПериода = МодульОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрПериодичность.Значение);
	ИскомоеПоле.Выражение = "Период" + СтрокаДлительностьПериода;
	ИскомоеПоле.Заголовок = СтрокаДлительностьПериода;
	
	ПараметрОформленияФормат = ИскомоеПоле.Оформление.Элементы.Найти("Формат");
	ПараметрОформленияФормат.Значение = ФорматнаяСтрокаДинамическогоПериода(ПараметрПериодичность.Значение);
	ПараметрОформленияФормат.Использование = Истина;
	
	Если Не ДополнятьПериод Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыОтчета.Свойство("НачалоПериода") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыОтчета.Свойство("КонецПериода") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнениеПериода = ТипДополненияПериодаКомпоновкиДанных[СтрокаДлительностьПериода];
	ПолеДинамическийПериод = Новый ПолеКомпоновкиДанных("ДинамическийПериод");
	Группировки = ПолучитьГруппировки(НастройкиОтчета);
	Для Каждого Группировка Из Группировки Цикл
		Если Группировка.Значение.ПоляГруппировки.Элементы.Количество() = 1
			И Группировка.Значение.ПоляГруппировки.Элементы[0].Поле = ПолеДинамическийПериод Тогда
			ГруппировкаДинамическийПериод = Группировка.Значение.ПоляГруппировки.Элементы[0];
			ГруппировкаДинамическийПериод.ТипДополнения = ДополнениеПериода;
			ГруппировкаДинамическийПериод.НачалоПериода = ПараметрыОтчета.НачалоПериода;
			ГруппировкаДинамическийПериод.КонецПериода = ПараметрыОтчета.КонецПериода;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ФорматнаяСтрокаДинамическогоПериода(Периодичность) Экспорт
	
	ФорматнаяСтрока = "";
	
	Если Периодичность = Перечисления.сфпПериодичность.День Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yy'";
	ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Неделя Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yy'";
	ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Декада Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yy'";
	ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Месяц Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='MMM yy'";
	ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Квартал Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='q ""кв."" yy'";
	ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Полугодие Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='ММ.yy'";
	ИначеЕсли Периодичность = Перечисления.сфпПериодичность.Год Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='yyyy'";
	КонецЕсли;
	
	Возврат ФорматнаяСтрока;
	
КонецФункции

Процедура ОбработатьДиаграммыОтчета(ПараметрыОтчета, ДокументРезультат) Экспорт
	
	Для Каждого Рисунок Из ДокументРезультат.Рисунки Цикл
		// Выводим надписи вертикально, если количество точек диаграмм больше 6
		Попытка
			Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Диаграмма
				И ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				
				Если ПараметрыОтчета.Свойство("ТипДиаграммы")
					И ПараметрыОтчета.ТипДиаграммы <> Неопределено
					И Рисунок.Объект.ТипДиаграммы <> ПараметрыОтчета.ТипДиаграммы Тогда
					Рисунок.Объект.ТипДиаграммы = ПараметрыОтчета.ТипДиаграммы;
				КонецЕсли;
				
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 6);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
				
			КонецЕсли;
		Исключение
		// При возникновении исключения не обрабатываем рисунок
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает размер рисунка с диаграммой отчета.
//
Процедура УстановитьРазмерДиаграммыОтчета(Рисунок) Экспорт

	Рисунок.Объект.ОтображатьЗаголовок = Ложь;
	Рисунок.Объект.ОбластьЛегенды.Низ = 0.90;
	Рисунок.Высота = 95;
	Рисунок.Ширина = 145;

КонецПроцедуры

Процедура УстановитьМакетОформленияОтчета(НастройкиОтчета) Экспорт
	
	ПараметрМакетОформления = ПолучитьПараметрВывода(НастройкиОтчета, "МакетОформления");
	Если ПараметрМакетОформления <> Неопределено
		И ПараметрМакетОформления.Использование
		И ЗначениеЗаполнено(ПараметрМакетОформления.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	МакетОформления = "CRM_МакетОформления";
	
	УстановитьПараметрВывода(НастройкиОтчета, "МакетОформления", МакетОформления);
	
КонецПроцедуры

#Область НастройкиОтчетов

// Процедура включает родительские группировки в пользовательских настройках, если включена хоть одна дочерняя
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ПользовательскиеНастройкиМодифицированы - Булево - обязательный к установке признак модификации польз. настроек отчета
//
Процедура ИсправитьНастройкиГруппировок(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы) Экспорт
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	Настройки = КомпоновщикНастроек.Настройки;
	
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройки.Элементы Цикл
		Если (ТипЗнч(ПользовательскаяНастройка) = Тип("ГруппировкаКомпоновкиДанных") 
			Или ТипЗнч(ПользовательскаяНастройка) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			Или ТипЗнч(ПользовательскаяНастройка) = Тип("ТаблицаКомпоновкиДанных"))
			И ПользовательскаяНастройка.Использование Тогда
			ИсправитьНастройкиРодительскойГруппировки(ПользовательскаяНастройка, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ИсправитьНастройкиРодительскойГруппировки(ПользовательскаяНастройка, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы)
	ИдентификаторПользовательскойНастройки = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
	
	Если Не ПустаяСтрока(ИдентификаторПользовательскойНастройки) Тогда
		ОбъектНастройки = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки);
	Иначе
		ОбъектНастройки = ПользовательскаяНастройка;
	КонецЕсли;
	РодительОбъектаНастройки = ОбъектНастройки.Родитель;
	
	Если ТипЗнч(РодительОбъектаНастройки) = Тип("ГруппировкаКомпоновкиДанных") 
		Или ТипЗнч(РодительОбъектаНастройки) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		Или ТипЗнч(РодительОбъектаНастройки) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		ИдентификаторПользовательскойНастройкиРодителя = РодительОбъектаНастройки.ИдентификаторПользовательскойНастройки;
		
		Если Не ПустаяСтрока(ИдентификаторПользовательскойНастройкиРодителя) Тогда
			ПользовательскаяНастройкаРодитель = НайтиПользовательскуюНастройку(ПользовательскиеНастройки, ИдентификаторПользовательскойНастройкиРодителя);
			ПользовательскаяНастройкаРодитель.Использование = Истина;
			ПользовательскиеНастройкиМодифицированы = Истина;
			
			ИсправитьНастройкиРодительскойГруппировки(ПользовательскаяНастройкаРодитель, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы);
		Иначе
			ИсправитьНастройкиРодительскойГруппировки(РодительОбъектаНастройки, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает список всех группировок компоновщика настроек
// 
// Параметры:
//		ЭлементСтруктуры - элемент структуры настройки СКД, настройка СКД или компоновщик настроек 
//		ПоказыватьГруппировкиТаблиц - признак добавления в список группировки колонок (по умолчанию Истина)
//
Функция ПолучитьГруппировки(ЭлементСтруктуры, ПоказыватьГруппировкиТаблиц = Истина) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Настройки.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
	Иначе
		ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокПолей, ПоказыватьГруппировкиТаблиц);
	КонецЕсли;
	
	Возврат СписокПолей;
	
КонецФункции

// Добавляет вложенные группировки элемента структуры.
//
Процедура ДобавитьГруппировки(Структура, СписокГруппировок, ПоказыватьГруппировкиТаблиц = Истина)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокГруппировок);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокГруппировок);
		Иначе
			СписокГруппировок.Добавить(ЭлементСтруктуры);
			Если ПоказыватьГруппировкиТаблиц Тогда
				ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокГруппировок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Находит общую настройку по идентификатору пользовательской настройки.
//
// Параметры:
//   Настройки - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ИдентификаторПользовательскойНастройки - Строка -
//
Функция ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки, Иерархия = Неопределено) Экспорт
	Если Иерархия <> Неопределено Тогда
		Иерархия.Добавить(Настройки);
	КонецЕсли;
	
	ТипНастройки = ТипЗнч(Настройки);
	
	Если ТипНастройки <> Тип("НастройкиКомпоновкиДанных") Тогда
		
		Если Настройки.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			
			Возврат Настройки;
			
		ИначеЕсли ТипНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			
			Возврат ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Настройки, ИдентификаторПользовательскойНастройки, Иерархия);
			
		ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			
			Для Каждого ВложенныйЭлемент Из Настройки Цикл
				РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(ВложенныйЭлемент, ИдентификаторПользовательскойНастройки, Иерархия);
				Если РезультатПоиска <> Неопределено Тогда
					Возврат РезультатПоиска;
				КонецЕсли;
			КонецЦикла;
			
			Если Иерархия <> Неопределено Тогда
				Иерархия.Удалить(Иерархия.ВГраница());
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Настройки.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.Выбор;
	ИначеЕсли Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.УсловноеОформление;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Настройки.Отбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Отбор;
		ИначеЕсли Настройки.Порядок.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Порядок;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.ПараметрыДанных, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.Отбор, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПоиска = НайтиЭлементНастройки(Настройки.УсловноеОформление, ИдентификаторПользовательскойНастройки);
	Если РезультатПоиска <> Неопределено Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Строки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Колонки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Точки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Серии, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	Иначе
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Структура, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Иерархия <> Неопределено Тогда
		Иерархия.Удалить(Иерархия.ВГраница());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЭлементНастройки(ЭлементНастройки, ИдентификаторПользовательскойНастройки)
	// Поиск элемента с заданным значением свойства ИдентификаторПользовательскойНастройки (ИПН).
	
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(ЭлементНастройки.Элементы);
	
	Пока МассивГрупп.Количество() > 0 Цикл
		
		КоллекцияЭлементов = МассивГрупп.Получить(0);
		МассивГрупп.Удалить(0);
		
		Для Каждого ПодчиненныйЭлемент Из КоллекцияЭлементов Цикл
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов не содержит ИПН.
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
			ИначеЕсли ПодчиненныйЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
				// Найден нужный элемент.
				Возврат ПодчиненныйЭлемент;
			Иначе
				// Содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.Элементы);
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит пользовательскую настройку по ее идентификатору.
//
// Параметры:
//   ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Коллекция пользовательских настроек.
//   Идентификатор - Строка -
//
Функция НайтиПользовательскуюНастройку(ПользовательскиеНастройкиКД, Идентификатор) Экспорт
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
		Если ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Получает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//
Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	МассивПараметров   = сфпСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = Настройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//		Значение - значение параметра вывода СКД
//		Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрВывода(Настройка, ИмяПараметра);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Снять использование параметра пользовательской настройки компоновщика настроек
//
Процедура ОтключитьИспользованиеПользовательскойНастройки(КомпоновщикНастроек, Настройка) Экспорт
	
	ИскомаяНастройка = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Настройка);
	
	Если ИскомаяНастройка = Неопределено Тогда
		
		ПолеПоиска = Новый ПолеКомпоновкиДанных(Настройка);
		
		Для Каждого Настройка Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если Настройка.ЛевоеЗначение = ПолеПоиска Тогда
				ИскомаяНастройка = Настройка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если ИскомаяНастройка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИскомаяНастройка.ИдентификаторПользовательскойНастройки);
	
	
	ПользовательскаяНастройка.Использование = Ложь;
	
КонецПроцедуры

// Устанавливает значение параметра пользовательской настройки компоновщика настроек
//
Процедура ПолучитьЗначениеПользовательскойНастройки(КомпоновщикНастроек, Настройка,ЗначениеНастройки) Экспорт
	
	ИскомаяНастройка = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Настройка);
	
	Если ИскомаяНастройка = Неопределено Тогда
		
		ПолеПоиска = Новый ПолеКомпоновкиДанных(Настройка);
		
		Для Каждого Настройка Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если Настройка.ЛевоеЗначение = ПолеПоиска Тогда
				ИскомаяНастройка = Настройка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если ИскомаяНастройка = Неопределено Тогда
			ЗначениеНастройки = Неопределено;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИскомаяНастройка.ИдентификаторПользовательскойНастройки);
	
	Если ПользовательскаяНастройка = Неопределено Тогда
		ЗначениеНастройки = Неопределено;
	ИначеЕсли ПользовательскаяНастройка.Использование Тогда
		Если ТипЗнч(ПользовательскаяНастройка) =Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗначениеНастройки = ПользовательскаяНастройка.ПравоеЗначение;
		Иначе
			ЗначениеНастройки = ПользовательскаяНастройка.Значение;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение параметра пользовательской настройки компоновщика настроек
//
Процедура УстановитьЗначениеПользовательскойНастройки(КомпоновщикНастроек, Настройка,ЗначениеНастройки) Экспорт
	
	ИскомаяНастройка = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Настройка);
	
	Если ИскомаяНастройка = Неопределено Тогда
		
		ПолеПоиска = Новый ПолеКомпоновкиДанных(Настройка);
		
		Для Каждого Настройка Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если Настройка.ЛевоеЗначение = ПолеПоиска Тогда
				ИскомаяНастройка = Настройка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если ИскомаяНастройка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИскомаяНастройка.ИдентификаторПользовательскойНастройки);
	
	Если ТипЗнч(ПользовательскаяНастройка) =Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ПользовательскаяНастройка.ЛевоеЗначение = ПолеПоиска;
		ПользовательскаяНастройка.ПравоеЗначение = ЗначениеНастройки;
		
	Иначе
		ПользовательскаяНастройка.Значение = ЗначениеНастройки;
	КонецЕсли;
	
	ПользовательскаяНастройка.Использование = Истина;
	
КонецПроцедуры

Функция СформироватьРезультатДляСохраненияСервер(КонтекстЭтаФорма) Экспорт
	
	Попытка
		Попытка
			СохраненныеДанныеРасшифровки = ПолучитьИзВременногоХранилища(КонтекстЭтаФорма.ОтчетДанныеРасшифровки);
			Если ТипЗнч(СохраненныеДанныеРасшифровки) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
				СохраненныеДанныеРасшифровки = Неопределено;
			КонецЕсли;
		Исключение
			СохраненныеДанныеРасшифровки = Неопределено;
		КонецПопытки;
		
		ОтчетОбъект = КонтекстЭтаФорма.РеквизитФормыВЗначение("Отчет");
		СКД = ОтчетОбъект.СхемаКомпоновкиДанных;
		
		ИспользуемыеНастройки = КонтекстЭтаФорма.Отчет.КомпоновщикНастроек.Настройки;
		
		Если СохраненныеДанныеРасшифровки = Неопределено Тогда
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			ИспользуемыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных();
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, ИспользуемыеНастройки, ИспользуемыеДанныеРасшифровки);
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ИспользуемыеДанныеРасшифровки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		Иначе
			ИспользуемыеДанныеРасшифровки = СохраненныеДанныеРасшифровки;
		КонецЕсли;
		
		РезультатТаблица = Новый ТаблицаЗначений();
		МассивПоляГруппировки = Новый Массив();
		ПолучитьПоляГруппировкиПоПорядку(ИспользуемыеНастройки.Структура, МассивПоляГруппировки);
		Для Каждого ИмяПоляГруппировки Из МассивПоляГруппировки Цикл
			НайденноеПоле = ИспользуемыеНастройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляГруппировки));
			Если НайденноеПоле <> Неопределено Тогда
				
				ИмяПоля = ИмяКолонкиЗаменитьНедопустимыеСимволы(ИмяПоляГруппировки);
				
				РезультатТаблица.Колонки.Добавить(ИмяПоля, НайденноеПоле.ТипЗначения, НайденноеПоле.Заголовок);
			КонецЕсли;
		КонецЦикла;
		
		СоответствиеИспользуемыхКолонок = Новый Соответствие();
		СоответствиеИгнорируемыхПолей = Новый Соответствие();
		Для Каждого ЭлементРасшифровки Из ИспользуемыеДанныеРасшифровки.Элементы Цикл
			Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
				ЗначенияПолей = ЭлементРасшифровки.ПолучитьПоля();
				Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
					Если Не ЗначениеЗаполнено(ЗначениеПоля.Значение) Тогда Продолжить; КонецЕсли;
					
					ИмяПоля = ИмяКолонкиЗаменитьНедопустимыеСимволы(ЗначениеПоля.Поле);
					
					Если СоответствиеИгнорируемыхПолей[ИмяПоля] <> Неопределено Тогда Продолжить; КонецЕсли;
					
					Если РезультатТаблица.Колонки.Найти(ИмяПоля) = Неопределено Тогда
						НайденноеПоле = ИспользуемыеНастройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ЗначениеПоля.Поле));
						Если НайденноеПоле <> Неопределено Тогда
							Попытка
								Если НайденноеПоле.Папка Тогда
									СоответствиеИгнорируемыхПолей.Вставить(ИмяПоля, 1);
									Продолжить;
								КонецЕсли;
							Исключение КонецПопытки;
							Попытка
								Если НайденноеПоле.Ресурс Тогда
									СоответствиеИгнорируемыхПолей.Вставить(ИмяПоля, 1);
									Продолжить;
								КонецЕсли;
							Исключение КонецПопытки;
							Попытка
								Если НайденноеПоле.Таблица Тогда
									СоответствиеИгнорируемыхПолей.Вставить(ИмяПоля, 1);
									Продолжить;
								КонецЕсли;
							Исключение КонецПопытки;
							РезультатТаблица.Колонки.Добавить(ИмяПоля, НайденноеПоле.ТипЗначения, НайденноеПоле.Заголовок);
						Иначе
							СоответствиеИгнорируемыхПолей.Вставить(ИмяПоля, 1);
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока = РезультатТаблица.Добавить();
					НоваяСтрока[ИмяПоля] = ЗначениеПоля.Значение;
					
					Если СоответствиеИспользуемыхКолонок[ИмяПоля] = Неопределено Тогда
						СоответствиеИспользуемыхКолонок.Вставить(ИмяПоля, 1);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		нИндекс = 0;
		Пока нИндекс < РезультатТаблица.Колонки.Количество() Цикл
			Колонка = РезультатТаблица.Колонки[нИндекс];
			Если СоответствиеИспользуемыхКолонок[Колонка.Имя] = Неопределено Тогда
				РезультатТаблица.Колонки.Удалить(РезультатТаблица.Колонки[нИндекс]);
			Иначе
				нИндекс = нИндекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Новый Структура("АдресДереваЗначенийВоВременномХранилище,НазваниеОтчета,НазваниеВарианта,Режим",
			ПоместитьВоВременноеХранилище(РезультатТаблица, КонтекстЭтаФорма.УникальныйИдентификатор),
			КонтекстЭтаФорма.РеквизитФормыВЗначение("Отчет").Метаданные().Синоним,
			КонтекстЭтаФорма.ПредставлениеТекущегоВарианта,
			"Сохранение");
		//
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецФункции

Процедура ПолучитьПоляГруппировкиПоПорядку(НастройкиСтруктура, МассивПолейГруппировок)
	
	Для Каждого ЭлементСтруктуры Из НастройкиСтруктура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Если Не ЭлементСтруктуры.Использование
				Или ЭлементСтруктуры.Состояние <> СостояниеЭлементаНастройкиКомпоновкиДанных.Включен Тогда
				//
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЭлементГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если Не ЭлементГруппировки.Использование Тогда Продолжить; КонецЕсли;
				
				ИмяПоля = Строка(ЭлементГруппировки.Поле);
				Если МассивПолейГруппировок.Найти(ИмяПоля) = Неопределено Тогда
					МассивПолейГруппировок.Добавить(ИмяПоля);
				КонецЕсли;
				ПолучитьПоляГруппировкиПоПорядку(ЭлементСтруктуры.Структура, МассивПолейГруппировок);
			КонецЦикла;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Не ЭлементСтруктуры.Использование Тогда Продолжить; КонецЕсли;
			
			Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
				ПолучитьПоляГруппировкиПоПорядку(ЭлементСтруктуры.Строки, МассивПолейГруппировок);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяКолонкиЗаменитьНедопустимыеСимволы(ИмяКолонки)
	
	ИмяПоля = СтрЗаменить(ИмяКолонки, ".", "_");
	ИмяПоля = СтрЗаменить(ИмяПоля, "[", "_");
	ИмяПоля = СтрЗаменить(ИмяПоля, "]", "_");
	ИмяПоля = СтрЗаменить(ИмяПоля, "(", "_");
	ИмяПоля = СтрЗаменить(ИмяПоля, ")", "_");
	ИмяПоля = СтрЗаменить(ИмяПоля, " ", "_");
	
	Возврат ИмяПоля;
	
КонецФункции

#КонецОбласти

#КонецОбласти