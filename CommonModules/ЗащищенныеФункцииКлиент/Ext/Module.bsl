
#Область ПрограммныйИнтерфейс

// При вызове формы выбора из элемента управления с настроенными отборами в связи параметров выбора
// отборы устанавливаются с РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный. В данном методе
// изменяем вид отображения на РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ.
// 
// Параметры: 
//  Форма -  - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//
Процедура РазрешитьСниматьОтборыУстановленныеИзСвязиПараметровВыбора(Форма) Экспорт

	ПоляИзСвязиПараметровВыбора = ПоляИзСвязиПараметровВыбора(Форма.ВладелецФормы,
		РежимИзмененияСвязанногоЗначения.НеИзменять);

	Если ЗначениеЗаполнено(ПоляИзСвязиПараметровВыбора) Тогда

		ОбновитьРежимОтображенияНастроек(Форма.Список.КомпоновщикНастроек.Настройки, ПоляИзСвязиПараметровВыбора);

	КонецЕсли;

КонецПроцедуры

// Возвращает параметры по умолчанию для функции ЗаписатьНовыйОбъектНаКлиенте()
// 
// Возвращаемое значение:
//  Структура - параметры записи нового объекта на клиенте.
//
Функция СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПредставлениеДействия", Неопределено);
	Результат.Вставить("ОбновитьИзмененный",    Истина);
	Результат.Вставить("ПровестиДокумент",      Ложь);
	Результат.Вставить("ОбработчикСобытия",     Неопределено);
	Результат.Вставить("РезультатСобытия",      Неопределено);
	Результат.Вставить("ПараметрыСобытия",      Неопределено);
	Возврат Результат;
	
КонецФункции

#Область МетодыПереходаВЗакодированнуюОбработку

// Функция используется для организации стандартизованной записи нового и модифицированного объекта в форме.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  ПараметрыЗаписиНового - см. ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте
//  ПараметрыЗаписи       - Структура - Переметры которые будут переданы в метод записи как параметры записи.
// 
// Возвращаемое значение:
//  Булево - Признак успешной записи нового объекта.
//
Функция ЗаписатьНовыйОбъектНаКлиенте(Форма, ПараметрыЗаписиНового, ПараметрыЗаписи = Неопределено) Экспорт
	
	Возврат ЛицензированиеКлиентПовтИсп
		.ПолучитьЗащищенныйМодуль()
		.ЗаписатьНовыйОбъектНаКлиенте(Форма, ПараметрыЗаписиНового, ПараметрыЗаписи);
	
КонецФункции

// Функция используется для организации стандартизованной записи нового и модифицированного объекта в форме.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  ТекущаяСтрока         - ДокументСсылка   - Ссылка, для которой выполняется обработка события.
//  РезультатСобытия      - КомандаФормы     - Команда, в которой возникло данное событие.
//  ПредставлениеДействия - Строка           - Представление выполняемого действия.
//  ОбработчикСобытия     - Строка           - Описание процедуры обработки действия.
//  ПараметрыСобытия      - Структура        - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Булево - Признак продолжения выполнения действия.
//
Функция ПровестиДокументНаКлиенте(Форма,
                                  ТекущаяСтрока,
                                  РезультатСобытия,
                                  ПредставлениеДействия = Неопределено,
                                  ОбработчикСобытия = Неопределено,
                                  ПараметрыСобытия = Неопределено) Экспорт
	
	Возврат ЛицензированиеКлиентПовтИсп.ПолучитьЗащищенныйМодуль().ПровестиДокументНаКлиенте(
		Форма,
		ТекущаяСтрока,
		ПредставлениеДействия,
		ОбработчикСобытия,
		РезультатСобытия,
		ПараметрыСобытия
	);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоляИзСвязиПараметровВыбора(ПолеФормы, РежимИзмененияСвязанногоЗначения)
	
	Если ТипЗнч(ПолеФормы) <> Тип("ПолеФормы") Тогда
		
		Возврат Новый Массив();
		
	КонецЕсли;
	
	Результат = Новый Массив();
	
	Для Каждого ПараметрВыбора Из ПолеФормы.СвязиПараметровВыбора Цикл
		
		Если ПараметрВыбора.ИзменениеЗначения = РежимИзмененияСвязанногоЗначения Тогда
			
			Результат.Добавить(СтрПолучитьСтроку(СтрЗаменить(ПараметрВыбора.Имя, ".", Символы.ПС), 2));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ОбновитьРежимОтображенияНастроек(НастройкиКомпоновщикаНастроек, ОтборыДляИзменения)
	
	Для Каждого ЭлементОтбора Из НастройкиКомпоновщикаНастроек.Отбор.Элементы Цикл
		
		Если
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
			И ОтборыДляИзменения.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено
		Тогда
			
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			ЭлементОтбора.ИдентификаторПользовательскойНастройки = Строка(ЭлементОтбора.ЛевоеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область УстаревщиеМетоды

// Устарела. Будет удалена.
// Производит настройку основной командной панели объекта.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой возникло событие;
//  ФормаСписка - Булево - Признак того, что это форма списка;
//  ПрефиксКнопок		- Строка			- Содержит префикс кнопки.
//  ИмяКоманднойПанели	- Строка			- Содержит имя командной панели формы.
//
Процедура НастроитьКоманднуюПанельФормы(Форма,
                                        ФормаСписка = Ложь,
                                        ПрефиксКнопок = "Форма",
                                        ИмяКоманднойПанели = "ФормаКоманднаяПанель") Экспорт
	
	ЛицензированиеКлиентПовтИсп.
		ПолучитьЗащищенныйМодуль().
		НастроитьКоманднуюПанельФормы(Форма, ФормаСписка, ПрефиксКнопок, ИмяКоманднойПанели);
	
КонецПроцедуры

// Устарела. См.ЗащищенныеФункцииКлиент.РазрешитьСниматьОтборыУстановленныеИзСвязиПараметровВыбора
// Производит настройку основного динамического списка формы выбора.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//
Процедура НастроитьОсновнойДинамическийСписокФормы(Форма) Экспорт
	
	РазрешитьСниматьОтборыУстановленныеИзСвязиПараметровВыбора(Форма);
	
КонецПроцедуры

// Устарела. Настройку командной панели следует выполнять руками.
// Производит настройку связанного динамического списка, расположенного на форме основного объекта.
//
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  ИмяСписка - Строка           - Содержит имя динамического списка.
//  Префикс   - Строка           - Содержит префикс.
//
Процедура НастроитьЭлементФормыДинамическогоСписка(Форма, ИмяСписка, Префикс = Неопределено) Экспорт
	
	ЛицензированиеКлиентПовтИсп
		.ПолучитьЗащищенныйМодуль()
		.НастроитьЭлементФормыДинамическогоСписка(Форма, ИмяСписка, Префикс);
	
КонецПроцедуры

// Устарела. Настройку командной панели следует выполнять руками.
// Производит настройку табличной части, расположенного на форме основного объекта.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  ИмяТабличнойЧасти - Строка           - Содержит имя табличной части.
//  Префикс           - Строка           - Содержит префикс.
//
Процедура НастроитьЭлементФормыТабличнойЧасти(Форма, ИмяТабличнойЧасти, Префикс = Неопределено) Экспорт
	
	ЛицензированиеКлиентПовтИсп
		.ПолучитьЗащищенныйМодуль()
		.НастроитьЭлементФормыТабличнойЧасти(Форма, ИмяТабличнойЧасти, Префикс);
	
КонецПроцедуры

// Устарела. Будет удалена
// Общий обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Команда       - КомандаФормы               - Команда, в которой возникло данное событие.
//  ТекущиеДанные - ДокументСсылка             - Ссылка, для которой выполняется обработка события.
//
Процедура ОбработкаКомандыГруппировкиПоКолонке(Форма,Команда, ТекущиеДанные) Экспорт
	
	ЛицензированиеКлиентПовтИсп.ПолучитьЗащищенныйМодуль().ОбработкаКомандыГруппировкиПоКолонке(Форма,Команда, ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти