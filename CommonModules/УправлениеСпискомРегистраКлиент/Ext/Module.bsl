// Общий модуль "Управление списком регистра (клиент)"


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СЛУЖЕБНОГО ПРОГРАММНОГО ИНТЕРФЕЙСА

// Устарела. Будет удалена.
// Общий обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Форма         - УправляемаяФорма          - Форма, в которой возникло событие.
//  Команда       - КомандаФормы              - Команда, в которой возникло данное событие.
//  ТекущиеДанные - ДокументСсылка            - Ссылка, для которой выполняется обработка события.
//  Окно          - ОкноКлиентскогоПриложения - Содержит окно, в котором требуется открыть форму.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение
//  Булево - признак возможности дальнейшей обработки события
//
Функция ОбработкаКомандыФормы(Форма, Команда, ТекущиеДанные, Окно=Неопределено,ПараметрыДействия=Неопределено) Экспорт
	
	// Обработаем в зависимости от выбранной команды
	УправлениеДиалогомКлиент.ОбработкаКомандыФормы(Форма, Команда, ТекущиеДанные, Окно);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаКомандыФормы()

// Устарела. Будет удалена.
// Общий обработчик события возникающего при получении результата работы подчиненной формы.
//
// Параметры:
//  Форма              - УправляемаяФорма - Форма, в которой возникло событие.
//  РезультатЗакрытия  - Произвольный     - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
// Возвращаемое значение
//  Булево - признак возможности дальнейшей обработки события
//
Функция ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Возвращаем признак того что действие не обработано
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаРезультатаОповещения()

// Устарела. Будет удалена.
// Отображает результат выполнения действия.
//
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаРезультатаВыполненияДействия(Форма, ПараметрыДействия) Экспорт
	
	УправлениеДиалогомКлиент.ПоказатьРезультатВыполнения(Форма, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

#КонецОбласти

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОСНОВНЫХ СОБЫТИЙ ФОРМЫ СПИСКА РЕГИСТРОВ

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ - Булево           - Признак отказа от создания формы.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриОткрытии(Форма, Отказ=ЛОЖЬ) Экспорт
	
	Для каждого Элемент Из Форма.Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы Цикл
		Если НЕ(ТипЗнч(Элемент)=Тип("ГруппаФормы") И Элемент.Вид=ВидГруппыФормы.ГруппаКнопок) Тогда
			Элемент.Отображение = ОтображениеКнопки.Картинка;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Элемент Из Форма.Элементы.ГлобальныеКоманды.ПодчиненныеЭлементы Цикл
		Если НЕ(ТипЗнч(Элемент)=Тип("ГруппаФормы") И Элемент.Вид=ВидГруппыФормы.ГруппаКнопок) Тогда
			Элемент.Отображение = ОтображениеКнопки.Картинка;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Форма.Элементы.Найти("ФормаСоздать")=Неопределено Тогда
		Форма.Элементы.ФормаСоздать.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЕсли;
	Если НЕ Форма.Элементы.Найти("ФормаСкопировать")=Неопределено Тогда
		Форма.Элементы.ФормаСкопировать.ТолькоВоВсехДействиях = ЛОЖЬ;
	КонецЕсли;
	Если НЕ Форма.Элементы.Найти("ФормаУдалить")=Неопределено Тогда
		Форма.Элементы.ФормаУдалить.ТолькоВоВсехДействиях = ЛОЖЬ;
	КонецЕсли;
	
	// В режиме веб-клиента произведем показ кнопки изменения текущего объекта
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() И НЕ Форма.Элементы.Найти("ФормаИзменить")=Неопределено Тогда
		Форма.Элементы.ФормаИзменить.ТолькоВоВсехДействиях = ЛОЖЬ;
	КонецЕсли;

	Если НЕ Форма.Элементы.Найти("ФормаИзменить")=Неопределено Тогда
		Форма.Элементы.ФормаИзменить.ТолькоВоВсехДействиях = ЛОЖЬ;
	КонецЕсли;
	
	Форма.Элементы.ФормаНайти        .ТолькоВоВсехДействиях = ИСТИНА;
	Форма.Элементы.ФормаОтменитьПоиск.ТолькоВоВсехДействиях = ИСТИНА;
	
	Форма.Элементы.ФормаСоздатьНаОсновании.Картинка = БиблиотекаКартинок.ВводНаОсновании;
	
	// Изменим режим отображения стандартных кнопок командной панели "Действия формы"
	Если Форма.Элементы.Найти("ФормаОбщаяКомандаДополнительныеОтчетыИОбработкиЗаполнениеОбъекта")<> Неопределено Тогда
		Форма.Элементы.ФормаОбщаяКомандаДополнительныеОтчетыИОбработкиЗаполнениеОбъекта.ТолькоВоВсехДействиях = ИСТИНА;
	КонецЕсли;
	
	// Отключим видимость некоторых команды формы, функционал которых замещен
	Если НЕ Форма.Элементы.Найти("СписокКонтекстноеМенюСоздать")=Неопределено Тогда
		Форма.Элементы.СписокКонтекстноеМенюСоздать.Видимость = ЛОЖЬ;
	КонецЕсли;
	Если НЕ Форма.Элементы.Найти("СписокКонтекстноеМенюСкопировать")=Неопределено Тогда
		Форма.Элементы.СписокКонтекстноеМенюСкопировать.Видимость = ЛОЖЬ;
	КонецЕсли;
	Если НЕ Форма.Элементы.Найти("СписокКонтекстноеМенюИнтервал")=Неопределено Тогда
		Форма.Элементы.СписокКонтекстноеМенюИнтервал.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	// Произведем настройку основного динамического списка формы
	ЗащищенныеФункцииКлиент.НастроитьОсновнойДинамическийСписокФормы(Форма);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПриОткрытии()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ                - Булево - Признак отказа от создания формы.
//  ЗавершениеРаботы     - Булево - Признак закрытия формы в процессе завершения работы приложения.
//  ТекстПредупреждения  - Булево - Сообщение пользователю не завершенной работе в данном окне.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПередЗакрытием()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте при закрытии формы.
//
// Параметры:
//  Форма            - УправляемаяФорма - Форма, в которой возникло событие.
//  ЗавершениеРаботы - Булево - Признак закрытия формы в процессе завершения работы приложения.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриЗакрытии(Форма, ЗавершениеРаботы=ЛОЖЬ) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПриЗакрытии()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  Форма               - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяСобытия          - Строка           - Имя, идентифицирующее событие.
//  Параметр            - Произвольный     - Параметр сообщения.
//  Источник            - Произвольный     - Источник события.
//  ПараметрыДействия   - Структура        - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ПараметрыДействия=Неопределено) Экспорт
	
	// Обработаем в зависимости от вида события
	Если Источник="ПодключаемоеОборудование" Тогда
		Если НЕ Форма.ВводДоступен() Тогда
			Возврат ЛОЖЬ;
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПараметрыДействия.Вставить("КодКарты", Параметр[0]);
			Возврат ИСТИНА;
			
		ИначеЕсли ИмяСобытия = "ScanData" Тогда
			
			ШтрихКод = ?((Параметр.Количество() > 1) И (Параметр[1] <> Неопределено), Параметр[1][1], Параметр[0]);
			
			// Удалим из кода маркировки криптохвосты
			ШтрихКод = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(ШтрихКод);
			
			ПараметрыДействия.Вставить("ШтрихКод", ШтрихКод);
			Возврат ИСТИНА;
			
		КонецЕсли;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ЛОЖЬ;
	
КонецФункции // ОбработкаОповещения()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте при вызове метода ОповеститьОбАктивизации из формы-владельца.
//
// Параметры:
//  Форма          - УправляемаяФорма - Форма, в которой возникло событие.
//  АктивныйОбъект - Произвольный     - Активный объект.
//  Источник       - УправляемаяФорма - Форма, источник сообщения.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаАктивизации(Форма, АктивныйОбъект, Источник) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // СписокОбработкаАктивизации()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте при записи объекта в одной из подчиненных форм.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  НовыйОбъект          - Произвольный     - Добавленный в подчиненной форме объект.
//  Источник             - УправляемаяФорма - Форма, источник сообщения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаписиНового(Форма, НовыйОбъект, Источник, СтандартнаяОбработка=ИСТИНА) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // СписокОбработкаЗаписиНового()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДИНАМИЧЕСКОГО СПИСКА ФОРМЫ

// Устарела. Будет удалена.
// Общий обработчик события возникающего при выборе строки списка.
//
// Параметры:
//  Форма					- УправляемаяФорма				- Форма, в которой возникло событие.
//  Элемент					- ТаблицаФормы					- Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока			- ДанныеФормыЭлементКоллекции	- выбранная строка
//  Поле					- ПолеФормы						- Активное поле (колонка).
//  СтандартнаяОбработка	- Булево						- В данный параметр передается признак выполнения системной обработки события.
//
Процедура СписокВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка=ИСТИНА) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // СписокВыбор()

// Устарела. Будет удалена.
// Общий обработчик события возникающего при активизации строки списка.
//
// Параметры:
//  Форма      - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент    - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  ПоЗадержке - Булево           - Признак выполнения обработчика после окончания пользователем серфинга по списку.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция СписокПриАктивизацииСтроки(Форма, Элемент, ПоЗадержке=ЛОЖЬ) Экспорт
	
	// По-умолчанию обработка на сервере не требуется
	ОбработатьНаСервере = ЛОЖЬ;
	
	// Обработаем в зависимости от режима вызова общего обработчика
	Если ПоЗадержке Тогда
		
		// Проверим наличие подменю печати
		Если НЕ Форма.Элементы.Найти("ПодменюПечать")=Неопределено И Форма.Элементы.ПодменюПечать.ПодчиненныеЭлементы.Количество() > 0 Тогда
			ОбработатьНаСервере = ИСТИНА;
		КонецЕсли;
		
	Иначе
		
		// Пропустим лишние события активизации строк списка
		Если Форма.ТекущийЭлементСписка=Элемент.ТекущаяСтрока Тогда
			Возврат ЛОЖЬ;
		Иначе
			Форма.ТекущийЭлементСписка = Элемент.ТекущаяСтрока;
		КонецЕсли;
		
		
		// Производим подключение обработчика события выполняемого с задержкой
		Форма.ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.5, ИСТИНА);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ОбработатьНаСервере;
	
КонецФункции // СписокПриАктивизацииСтроки()

// Устарела. Будет удалена.
// Общий обработчик события возникающего при активизации строки списка.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//
Процедура СписокПриАктивизацииЯчейки(Форма, Элемент) Экспорт
	
	// Произведем установку доступности пункта меню "Группировать по значению колонки"
	УправлениеДиалогомКлиент.ОбновитьДоступностьКомандГруппировкиСписка(Форма, Элемент.ТекущиеДанные, Элемент.ТекущийЭлемент);
	
	// Произведем установку доступности пункта меню "Поиск по текущему значению"
	УправлениеДиалогомКлиент.ОбновитьДоступностьКомандПоискаПоТекущемуЗначениюСписка(Форма, Элемент.ТекущиеДанные, Элемент.ТекущийЭлемент);
	
КонецПроцедуры // СписокПриАктивизацииЯчейки()

// Устарела. Будет удалена.
// Общий обработчик события возникающего  перед началом добавления строки в  список.
//
// Параметры:
//  Форма				- УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент				- ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ				- Булево           - Признак отказа от действия.
//  Копирование			- Булево           - Определяет режим копирования.
//  Родитель			- Ссылка           - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа				- Булево           - Признак добавления группы.
//  Параметр			- Структура        - Набор параметров, использующихся при выполнения операции.
//
Процедура СписокПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр=Неопределено) Экспорт
	
	Если Копирование Тогда
		КлючеваяОперация = "КопированиеРегистра" + СтрЗаменить(Форма.ПолноеИмяОбъекта, "РегистрСведений.", "");
	Иначе
		КлючеваяОперация = "СозданиеРегистра" + СтрЗаменить(Форма.ПолноеИмяОбъекта, "РегистрСведений.", "");
	КонецЕсли;
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(, КлючеваяОперация);
	
КонецПроцедуры // СписокПередНачаломДобавления()

// Устарела. Будет удалена.
// Общий обработчик события возникающего перед началом изменения списка.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево           - Признак отказа от действия.
//
Процедура СписокПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	КлючеваяОперация = "ОткрытиеЗаписиРегистра" + СтрЗаменить(Форма.ПолноеИмяОбъекта, "РегистрСведений.", "");
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(, КлючеваяОперация);
	
КонецПроцедуры // СписокПередНачаломИзменения()

// Устарела. Будет удалена.
// Общий обработчик события возникающего после удаления строки списка.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//
Процедура СписокПослеУдаления(Форма, Элемент) Экспорт
	
	Зарезервировано = ИСТИНА;
	
КонецПроцедуры // СписокПослеУдаления()

#КонецОбласти
