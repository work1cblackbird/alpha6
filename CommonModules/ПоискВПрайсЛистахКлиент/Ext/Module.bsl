
#Область Программныйинтерфейс

// Получение структуры поставки.
//
// Параметры:
//  Данные - Структура - Строка с данными источника обеспечения.
// 
// Возвращаемое значение:
//  Структура - Структура поставки по строке.
//
Функция СформироватьСтруктуруПоставки(Данные) Экспорт
	
	Поставка = Новый Структура("НаправлениеПоставки,КлючСтрокиПоставщика,Цена,Поставщик,СрокПоставкиВСтроке");
	ЗаполнитьЗначенияСвойств(Поставка, Данные);
	
	Поставка.СрокПоставкиВСтроке = Данные.СрокПоставки;
	
	Возврат Поставка;
	
КонецФункции

// Устарела. Следует использовать ПоискВПрайсЛистахКлиент.НачатьСозданиеНоменклатуры()
//
Процедура ЗапросНаСозданиеНоменклатуры(Форма, ПутьКДанным, ТекущаяСтрока, ПродолжитьВыбор = Ложь, ИнтерактивноеСоздание = Ложь) Экспорт
	
	ДопПараметры = Новый Структура("Форма,ПутьКДанным,ТекущаяСтрока,ПродолжитьВыбор,ИнтерактивноеСоздание", Форма, ПутьКДанным, ТекущаяСтрока, ПродолжитьВыбор,ИнтерактивноеСоздание);
	
	ОписниеОповещенияОЗаверщении = Новый ОписаниеОповещения("СоздатьНоменклатуру", ЭтотОбъект, ДопПараметры);
	
	ТекстВопроса = НСтр("ru = 'Выбранная номенклатура отсутствует в базе. Создать?'");
	
	ПоказатьВопрос(ОписниеОповещенияОЗаверщении, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Создание номенклатуры ...");
	
КонецПроцедуры

// Устарела. Следует использовать ПоискВПрайсЛистахКлиент.ВопросСозданиеНоменклатурыЗавршение()
//
Процедура СоздатьНоменклатуру(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Стандартное создание
	ТекущиеДанные = ДопПараметры.Форма[ДопПараметры.ПутьКДанным].НайтиПоИдентификатору(ДопПараметры.ТекущаяСтрока);
	
	ДопПараметры.Вставить("Событие", "СозданиеНоменклатурыИзСписка");
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Артикул"         , ?(ПустаяСтрока(ТекущиеДанные.Артикул), ТекущиеДанные.АртикулДляПоиска, ТекущиеДанные.Артикул));
	ДанныеЗаполнения.Вставить("АртикулДляПоиска", ТекущиеДанные.АртикулДляПоиска);
	ДанныеЗаполнения.Вставить("Производитель"   , ТекущиеДанные.Производитель);
	
	Если ЕстьРеквизитНаКлиенте(ТекущиеДанные, "Наименование") Тогда
		ДанныеЗаполнения.Вставить("Наименование", ТекущиеДанные.Наименование);
	ИначеЕсли ЕстьРеквизитНаКлиенте(ТекущиеДанные, "Представление") Тогда
		ДанныеЗаполнения.Вставить("Наименование", ТекущиеДанные.Представление);
	КонецЕсли;
	
	Если ДопПараметры.ИнтерактивноеСоздание Тогда
		
		ОткрытьФорму(
			"Справочник.Номенклатура.ФормаОбъекта",
			Новый Структура("Основание", ДанныеЗаполнения),
			ДопПараметры.Форма,
			ДопПараметры.Форма,
			,
			,
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ДопПараметры.Форма, ДопПараметры),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		
		ПараметрыСозданияНоменклатуры = Новый Структура;
		ПараметрыСозданияНоменклатуры.Вставить("ПараметрыЗаполнения", ДанныеЗаполнения);
		ПараметрыСозданияНоменклатуры.Вставить("ДопПараметры",        ДопПараметры);
		
		// Создадим номенклатуру автоматически.
		Оповестить("СоздатьНоменклатуру", ПараметрыСозданияНоменклатуры, ДопПараметры.Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаЗагрузкиИзБазовогоКаталога()

// Обработка создания номенклатуры из прайс-листа. Задает вопрос пользователю о необходимости создания номенклатуры
//  и передает управление ВопросСозданиеНоменклатурыЗавршение().
//
// Параметры:
//  ДанныеЗаполнения - Структура - Данные номенклатуры для заполнения:
//                                  - Артикул - Строка - Артикул номенклатуры;
//                                  - АртикулДляПоиска - Строка - Артикул для поиска номенклатуры;
//                                  - Производитель - СправочникСсылка.Производители - Производитель номенклатуры;
//                                  - Наименование - Строка - Наименование номенклатуры;
//  Форма - УправляемаяФорма - Форма из которой идет вызов;
//  ОбратныйВызов - ОписаниеОповещения - Обработчик в который будет передано управление после создания номенклатуры.
//  Интерактивно - Булево - Признак интерактивного создания номенклатуры:
//                           - Истина - Будет открыта заполненая форма элемента номенклатуры,
//                                      а обратный вызов произойдет после ее закрытия;
//                           - Ложь - Номенклатура будет создана программно;
//
Процедура НачатьСозданиеНоменклатуры(ДанныеЗаполнения, Форма, ОбратныйВызов, Интерактивно = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	ДополнительныеПараметры.Вставить("ОбратныйВызов", ОбратныйВызов);
	ДополнительныеПараметры.Вставить("Интерактивно", Интерактивно);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ОбратныйВызов.ДополнительныеПараметры, "ПродолжитьВыбор", Ложь) Тогда
		ВопросСозданиеНоменклатурыЗавршение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ОписниеОповещенияОЗавершении = Новый ОписаниеОповещения(
		"ВопросСозданиеНоменклатурыЗавршение",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	ТекстВопроса = НСтр("ru = 'Выбранная номенклатура отсутствует в базе. Создать?'");
	ПоказатьВопрос(
		ОписниеОповещенияОЗавершении,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Нет,
		НСтр("ru = 'Создание номенклатуры...'"));
	
КонецПроцедуры

// Обработка ответа пользователя на вопрос о создании номенклатуры. Не предназначена для самостоятелного вызова.
//
// Параметры:
//  Ответ - КодВозвратаДиалога, Неопределено - Ответ пользователя.
//  ДополнительныеПараметры - Стуктура - Содержит информацию переданную в процедуру НачатьСозданиеНоменклатуры().
//
Процедура ВопросСозданиеНоменклатурыЗавршение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура("Номенклатура, Производитель, ПоискПоВнешнимПрайсЛистам");
	Параметры.Вставить("Номенклатура", ДополнительныеПараметры.ДанныеЗаполнения.АртикулДляПоиска);
	Параметры.Вставить("Производитель", ДополнительныеПараметры.ДанныеЗаполнения.Производитель);
	Если ЕстьРеквизитНаКлиенте(ДополнительныеПараметры.Форма, "ИскатьВоВнешнихПрайсЛистахКонтрагентов") Тогда
		ПоискПоВнешнимПрайсЛистам = ДополнительныеПараметры.Форма.ИскатьВоВнешнихПрайсЛистахКонтрагентов;
	Иначе
		ПоискПоВнешнимПрайсЛистам = Ложь;
	КонецЕсли;
	Параметры.Вставить("ПоискПоВнешнимПрайсЛистам", ПоискПоВнешнимПрайсЛистам);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Результат = ПоискВПрайсЛистахВызовСервера.ЗагрузитьЦеныПрайсЛистов(Параметры, АдресРезультата);
	
	Если Результат = Ложь Тогда
		// открыть форму с выбором прайслиста
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ОбработкаВыбораПрайсЛистаПриСозданииНоменклатуры",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		ОткрытьФорму(
			"ОбщаяФорма.ВыборПрайсЛиста",
			Новый Структура("АдресТаблицыЦен", АдресРезультата),
			, , , ,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораПрайсЛистаПриСозданииНоменклатуры(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработкаВыбораПрайсЛистаПриСозданииНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ДанныеЗаполнения.Вставить("ПрайсЛист", Результат);
	
	Если НЕ ДополнительныеПараметры.Интерактивно Тогда
		
		РезультатСоздания = ПоискВПрайсЛистахВызовСервера
			.СоздатьНоменклатуру(ДополнительныеПараметры.ДанныеЗаполнения);
			
		Если НЕ РезультатСоздания.Свойство("Номенклатура") Тогда  
			
			
			ПоказатьПредупреждение(
				,
				НСтр("ru = 'Не удалось создать номенклатуру. Проверьте настройки загрузки номенклатуры в прайс-листе.'"),
				,
				НСтр("ru = 'Ошибка'")
			);
			Возврат;
		КонецЕсли;  		
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбратныйВызов, РезультатСоздания);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ЗавершениеСозданияНоменклатурыИнтерактивно",
			ЭтотОбъект,
			ДополнительныеПараметры
	);

	ОткрытьФорму(
		"Справочник.Номенклатура.ФормаОбъекта",
		Новый Структура("Основание", ДополнительныеПараметры.ДанныеЗаполнения),
		, , , ,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры   

Процедура ЗавершениеСозданияНоменклатурыИнтерактивно(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ПрайсЛист", ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ПрайсЛист"));
	ДанныеЗаполнения.Вставить("Номенклатура",ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ДобавленнаяСсылка"));
	
	РезультатСоздания = ПоискВПрайсЛистахВызовСервера.
		СоздатьНоменклатуру(ДанныеЗаполнения, Истина);   
		
	Если НЕ РезультатСоздания.Свойство("Номенклатура") Тогда  
		
		ПоказатьПредупреждение(
				,
				НСтр("ru = 'Не удалось создать номенклатуру. Проверьте настройки загрузки номенклатуры в прайс-листе.'"),
				,
				НСтр("ru = 'Ошибка'")
			);
		Возврат;
		
	КонецЕсли;
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбратныйВызов, РезультатСоздания);
	Возврат;
					
КонецПроцедуры
	
#Область ПроцедурыОбработчиковЭлементовФормыДокументов

// Обработчик события возникающего на клиенте при начале выбора данных реквизита "СРТС".
//
// Параметры:
//  Форма                - УправляемаяФорма              - Форма, в которой возникло событие.
//  Элемент              - ПолеФормы                     - Элемент управления, в котором возникло данное событие.
//  Номенклатура         - СправочникСсылка.Номенклатура - Выбранная номенклатура.
//  ТекущаяСтрока        - Число                         - Идентификатор текущей строки.
//  СтандартнаяОбработка - Булево                        - Признак стандартной обработки.
//
Процедура ПоставщикНачалоВыбора(Форма, Элемент, Номенклатура, ТекущаяСтрока, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	СписокВыбораТипов = Новый СписокЗначений;
	
	Если НЕ Номенклатура.Пустая() Тогда
		СписокВыбораТипов.Добавить("ИсточникиОбеспечения", "Выбрать из доступных источников обеспечения");
	КонецЕсли;
	
	СписокВыбораТипов.Добавить("ПодразделенияКомпании", "Подразделение компании");
	СписокВыбораТипов.Добавить("СкладыКомпании"       , "Склады компании");
	СписокВыбораТипов.Добавить("Контрагенты"          , "Контрагенты");
	
	
	ДопПараметры = Новый Структура("Элемент,Форма,Номенклатура,ТекущаяСтрока", Элемент, Форма, Номенклатура, ТекущаяСтрока);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ВыборТипаПоставщикаЗаверщение", ЭтотОбъект, ДопПараметры);
	
	Форма.ПоказатьВыборИзСписка(ОписаниеОповещенияОЗакрытии, СписокВыбораТипов, Элемент);
КонецПроцедуры

// Подключаемый обработчик выбора типа поставщика
//
// Параметры:
//  РежимВыбора  - ЭлементСпискаЗначений - Результат выбора типа.
//  ДопПараметры - Структура             - Дополнительные параметры.
//
Процедура Подключаемый_ВыборТипаПоставщикаЗаверщение(РежимВыбора, ДопПараметры) Экспорт
	
	Если РежимВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимВыбора.Значение = "ИсточникиОбеспечения" Тогда
		ПараметрыОткрытия = Новый Структура("ПодразделениеКомпании,ТипЦен,Валюта,СкладКомпании");
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ДопПараметры.Форма.Объект);
		
		ПараметрыОткрытия.Вставить("Номенклатура" , ДопПараметры.Номенклатура);
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", ДопПараметры.ТекущаяСтрока);
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборИсточникаОбеспечения",
			ПараметрыОткрытия,
			ДопПараметры.Элемент,
			ДопПараметры.Форма,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Параметры = Новый Структура("РежимВыбора", Истина);
		
		ОткрытьФорму(
			СтрШаблон("Справочник.%1.ФормаВыбора", РежимВыбора.Значение),
			Параметры,
			ДопПараметры.Элемент,
			ДопПараметры.Форма,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти