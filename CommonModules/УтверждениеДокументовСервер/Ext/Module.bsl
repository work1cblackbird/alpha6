// Общий модуль "Утверждение документов (сервер)"

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормыСпискаИДокумента

// Размещает команды утверждения документов на форме.
//
// МестоРазмещенияКоманд - ЭлементФормы - группа, в которую необходимо разместить меню УтверждениеДокументов,
//                                        по умолчанию размещается в командную панель формы.
Процедура ПриСозданииНаСервере(Форма, Объект) Экспорт
	
	ПолноеИмяОбъекта = РаботаСФормойКлиентСервер.ПолноеИмяОбъекта(Форма);
	// Проверим, используется ли утверждение документов.
	СтруктураРезультата = УтверждениеДокументовПовтИсп.КонтролироватьУтверждениеДокумента(ПолноеИмяОбъекта); 
	
	Если НЕ ИспользоватьУтверждениеДокументов()
		ИЛИ НЕ СтруктураРезультата.ДокументУчаствуетВУтверждении Тогда
		// Утверждение в данном документе не используется, отключаем видимость колонки статуса.
		ГруппаКолонокУтверждения = Форма.Элементы.Найти("Утверждения");
		Если ГруппаКолонокУтверждения <> Неопределено Тогда
			ГруппаКолонокУтверждения.Видимость = Ложь;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Посмотрим, включена ли настройка утверждения для данного типа документов (есть ли хотя бы один доступный статус).
	ДоступныеСтатусы = УтверждениеДокументовПовтИсп.ДоступныеСтатусы(ПолноеИмяОбъекта);
	Если ДоступныеСтатусы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКомандыУтверждения(Форма, СтатусыДокументов());
	
	Если Объект <> Неопределено Тогда
		УстановитьКартинкуТекущегоСтатусаДокумента(Форма, Объект);
	КонецЕсли;

КонецПроцедуры

// Общий обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Форма              - УправляемаяФорма  - Форма, в которой вызвано выполнение команды.
//  КомандаИмя         - Строка            - Имя выполняемой команды.
//  ТекущийЭлемент     - ДокументСсылка    - Документ, для которого настраиваются доступность команд утверждения
//  ПараметрыДействия  - Структура         - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаКомандыФормы(Форма, КомандаИмя, ТекущийЭлемент, ПараметрыДействия = Неопределено) Экспорт
	
	ИмяСтатуса = "";
	
	// Нажата кнопка изменения статуса документа, ищем по имени команды выбранный статус.
	СтатусыДокументов = СтатусыДокументов();
	Для Каждого ТекСтатус Из СтатусыДокументов Цикл
		
		// В имени команды используем строчное значение имени перечисления.
		ПредставлениеСтатуса = Строка(ТекСтатус.Значение);
		Если СтрНайти(КомандаИмя, "Статус" + ПредставлениеСтатуса) > 0 Тогда
			
			ИмяСтатуса = ПредставлениеСтатуса;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ИмяСтатуса) Тогда
		Возврат;
	КонецЕсли;
	
	// Изменим статус документа
	УтверждениеДокумента(Форма, ТекущийЭлемент, ИмяСтатуса);
	
КонецПроцедуры

// Проверяет допустимость записи и проведения документа в зависимости от статуса и настроек утверждения.
//
// Параметры:
//  Объект       - ДокументОбъект        - Записываемый документ.
//  Отказ        - Булево                - Флаг отказа от дальнейшего выполнения операции.
//  РежимЗаписи  - РежимЗаписиДокумента  - Режим записи документа.
//
Процедура ОбработкаУтвержденияПередЗаписью(Объект, Отказ, РежимЗаписи) Экспорт
	
	Если Объект.ОбменДанными.Загрузка ИЛИ Не ИспользоватьУтверждениеДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ ИЛИ НЕ ЕстьРеквизит(Объект, "СтатусУтверждения") Тогда
		// У документа нет необходимых общих реквизитов, выходим.
		Возврат;
	КонецЕсли;
	
	// Получим необходимые значения из документа.
	СтатусИзОбъекта = Объект.СтатусУтверждения;
	СтатусИзСсылки  = Объект.Ссылка.СтатусУтверждения;
	ИмяДокумента    = Объект.Метаданные().ПолноеИмя();
	
	// Проверяем участие документа в утверждении и получаем значение настройки ОтклонениеПриОтменеПроведения из регистра.
	СтруктураРезультата = УтверждениеДокументовПовтИсп.КонтролироватьУтверждениеДокумента(ИмяДокумента); 
	
	Если НЕ СтруктураРезультата.ДокументУчаствуетВУтверждении Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	// Найдем автора, установившего предыдущий статус документа.
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	АвторСтатуса        = Неопределено;
	СтатусДокумента(Объект.Ссылка, АвторСтатуса);
	
	// Получим доступные статусы документа.
	ДоступныеСтатусы = УтверждениеДокументовПовтИсп.ДоступныеСтатусы(ИмяДокумента);
	
	// Для удобства чтения условий проверок запомним основные статусы документов.
	Подготовка  = Перечисления.СтатусыДокументов.Подготовка;
	Подготовлен = Перечисления.СтатусыДокументов.Подготовлен;
	Согласован  = Перечисления.СтатусыДокументов.Согласован;
	Утвержден   = Перечисления.СтатусыДокументов.Утвержден;
	Отклонен    = Перечисления.СтатусыДокументов.Отклонен;
	
	СтатусыЗапрещенныеДляРедактирования = Новый Структура("Согласован, Утвержден, Отклонен", Истина, Истина, Истина);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		
		// Если статус документа не заполнен, устанавливаем статус Подготовка.
		Если НЕ ЗначениеЗаполнено(СтатусИзОбъекта) ИЛИ СтатусИзОбъекта = Перечисления.СтатусыДокументов.НеУстановлен Тогда
			
			Объект.СтатусУтверждения = Подготовка;
			СтатусИзОбъекта = Подготовка;
		КонецЕсли;
		
		// При утверждении (из формы документа) переключаем запись на проведение и вызываем проверку заново.
		Если СтатусИзОбъекта = Утвержден Тогда
			
			// Проверяем право на утверждение документа.
			Если ДоступныеСтатусы.НайтиПоЗначению(Утвержден) <> Неопределено Тогда
				
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Иначе
				// У пользователя нет прав на утверждение документов, проведение тоже запрещено.
				Отказ = Истина;
				ТекстОшибки = НСтр("ru = 'Недостаточно прав для утверждения документов «%1», проведение отменено.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СокрЛП(Объект.Метаданные().Синоним));
			КонецЕсли;
			
		ИначеЕсли СтатусИзОбъекта = СтатусИзСсылки И СтатусыЗапрещенныеДляРедактирования.Свойство(Строка(СтатусИзОбъекта)) Тогда
			
			// Документ отклонен, изменять нельзя.
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Документ в статусе «%1», запись отменена. Перед изменением документа нужно установить статус «Подготовлен».'"),
					СтатусИзОбъекта
				)
			);
			
		ИначеЕсли (СтатусИзОбъекта = Подготовка ИЛИ СтатусИзОбъекта = Подготовлен ИЛИ СтатусИзОбъекта = Согласован) И СтатусИзСсылки = Согласован И ДоступныеСтатусы.НайтиПоЗначению(Согласован) = Неопределено Тогда
			
			// Документ согласован, нет прав на согласование.
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Недостаточно прав для согласования (и редактирования согласованных) документов «%1», запись отменена.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СокрЛП(Объект.Метаданные().Синоним));
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтатусИзСсылки) Тогда
			
			// Документ был создан до включения механизма контроля утверждения документов.
			Если Объект.Проведен И СтатусИзОбъекта <> Утвержден Тогда
				
				РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
			ИначеЕсли НЕ Объект.Проведен И СтатусИзОбъекта = Утвержден Тогда
				
				РежимЗаписи = РежимЗаписиДокумента.Проведение
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если СтатусИзОбъекта = Отклонен Тогда
			
			// Документ отклонен, проводить нельзя.
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Документ был отклонен, проведение отменено. Сначала нужно установить статус «Подготовлен».'");
			
		ИначеЕсли СтатусИзОбъекта <> Утвержден И Объект.Проведен Тогда
			
			// Документ был создан до включения механизма контроля утверждения документов.
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
			
		ИначеЕсли СтатусИзОбъекта <> Утвержден И СтатусИзСсылки <> Утвержден Тогда
			
			// Проверяем право на утверждение документа, если есть, сразу устанавливаем статус Утвержден.
			Если ДоступныеСтатусы.НайтиПоЗначению(Утвержден) <> Неопределено Тогда
				
				Объект.СтатусУтверждения = Утвержден;
			Иначе
				// У пользователя/подразделения нет прав на утверждение документов, проведение тоже запрещено.
				Отказ = Истина;
				ТекстОшибки = НСтр("ru = 'Недостаточно прав для утверждения документов «%1», проведение отменено.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СокрЛП(Объект.Метаданные().Синоним));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		// Разрешаем отменять проведение только пользователям, у которых есть права на утверждение.
		Если ДоступныеСтатусы.НайтиПоЗначению(Утвержден) <> Неопределено Тогда
			
			Объект.СтатусУтверждения = ?(СтруктураРезультата.ОтклонениеПриОтменеПроведения, Отклонен, Подготовка);
			СтатусИзОбъекта          = Объект.СтатусУтверждения;
		Иначе
			
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Недостаточно прав для утверждения (и отмены проведения) документов «%1», действие отменено.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СокрЛП(Объект.Метаданные().Синоним));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ И СтатусИзОбъекта = Согласован И СтатусИзСсылки = Утвержден Тогда
		
		// Проверяем право на утверждение и согласование документа.
		Если ДоступныеСтатусы.НайтиПоЗначению(Утвержден) <> Неопределено И ДоступныеСтатусы.НайтиПоЗначению(Согласован) <> Неопределено Тогда
			
			// Статус был изменен с Утвержден на Согласован, отменяем проведение.
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			// У пользователя нет прав на утверждение и согласование документов, проведение тоже запрещено.
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Недостаточно прав для утверждения и согласования документов «%1», действие отменено.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СокрЛП(Объект.Метаданные().Синоним));
		КонецЕсли;
	КонецЕсли;
	
	// Сообщаем об ошибках.
	Если Отказ И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	// Если документ будет проведен, выполним проверку заполнения
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если НЕ Объект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДоступностьЗаписиИПроведенияПоСтатусуУтверждения()

// Проверяет и записывает в регистр статус утверждения документа.
//
// Параметры:
//  Объект       - ДокументОбъект        - Записываемый документ.
//  Отказ        - Булево                - Флаг отказа от дальнейшего выполнения операции.
//
Процедура ОбработкаУтвержденияПриЗаписи(Объект, Отказ) Экспорт
	
	Если НЕ ИспользоватьУтверждениеДокументов() Тогда
		Возврат
	КонецЕсли;
	
	Если Отказ ИЛИ НЕ ЕстьРеквизит(Объект, "СтатусУтверждения") Тогда
		// У документа нет необходимых общих реквизитов, выходим.
		Возврат;
	КонецЕсли;
	
	// Получим необходимые значения из документа.
	СтатусИзОбъекта   = Объект.СтатусУтверждения;
	ИмяДокумента      = Объект.Метаданные().ПолноеИмя();
	
	// Проверяем участие документа в утверждении.
	СтруктураРезультата = УтверждениеДокументовПовтИсп.КонтролироватьУтверждениеДокумента(ИмяДокумента); 
	
	Если НЕ СтруктураРезультата.ДокументУчаствуетВУтверждении Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем автора, установившего предыдущий статус документа.
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	АвторСтатуса        = Неопределено;
	СтатусИзРегистра    = СтатусДокумента(Объект.Ссылка, АвторСтатуса);
	
	// Статус не был изменен, записывать изменения в регистр не нужно.
	Если СтатусИзОбъекта = СтатусИзРегистра ИЛИ НЕ ЗначениеЗаполнено(СтатусИзОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получаем значения реквизитов документа.
	СуммаДокументаКомментарий = Новый Структура("СуммаДокумента, Комментарий", 0, "");
	ЗаполнитьЗначенияСвойств(СуммаДокументаКомментарий, Объект);
	
	СуммаДокумента = СуммаДокументаКомментарий.СуммаДокумента;
	Комментарий    = СуммаДокументаКомментарий.Комментарий;
	
	// Создаем набор записей РС СостоянияДокументов и устанавливаем отбор по текущему документу.
	НаборЗаписейСостоянияДокументов = РегистрыСведений.СостоянияДокументов.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияДокументов.Отбор.Регистратор.Установить(Объект.Ссылка);
	НаборЗаписейСостоянияДокументов.Прочитать();
	
	// Добавляем новую запись в набор записей.
	Запись = НаборЗаписейСостоянияДокументов.Добавить();
	Запись.Регистратор     = Объект.Ссылка;
	Запись.Период          = ТекущаяДатаСеанса();
	Запись.Пользователь    = ТекущийПользователь;
	Запись.СтатусДокумента = СтатусИзОбъекта;
	Запись.Сумма           = СуммаДокумента;
	Запись.Комментарий     = Комментарий;
	
	// Записываем набор записей в регистр.
	НаборЗаписейСостоянияДокументов.Записать();
	
КонецПроцедуры // ПроверитьДоступностьЗаписиИПроведенияПоСтатусуУтверждения()

#КонецОбласти

// Проверяет и устанавливает ТолькоПросмотр в форме в зависимости от статуса документа и прав пользователя.
//
// Параметры:
//  Форма                    - УправляемаяФорма - Форма текущего документа.
//  ФормаНеДоступнаИзменений - Булево           - Признак доступности форму для изменений.
//
Процедура УстановитьДоступностьФормыДляРедактирования(Форма, ФормаНеДоступнаИзменений, Объект) Экспорт
	
	ПолноеИмяОбъекта = РаботаСФормойКлиентСервер.ПолноеИмяОбъекта(Форма);
	// Проверим, используется ли утверждение документов.
	СтруктураРезультата = УтверждениеДокументовПовтИсп.КонтролироватьУтверждениеДокумента(ПолноеИмяОбъекта); 
	
	Если НЕ ИспользоватьУтверждениеДокументов()
		ИЛИ НЕ СтруктураРезультата.ДокументУчаствуетВУтверждении Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СтатусУтверждения") Тогда
		
		ТекущийСтатус = Объект.СтатусУтверждения;
		// Закрываем на редактирование форму документа, который утвержден или отклонен.
		Если    ТекущийСтатус = Перечисления.СтатусыДокументов.Утвержден
			ИЛИ ТекущийСтатус = Перечисления.СтатусыДокументов.Отклонен
			ИЛИ ТекущийСтатус = Перечисления.СтатусыДокументов.Согласован
			ИЛИ НЕ ЗначениеЗаполнено(ТекущийСтатус) И Объект.Проведен Тогда
			
			Форма.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку на необходимость использования системы утверждения документов
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Булево - Использование подсистемы утверждения документов: Истина - включено, Ложь - отключено.
//
Функция ИспользоватьУтверждениеДокументов() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУтверждениеДокументов");
	
КонецФункции // ИспользоватьУтверждениеДокументов()

// Возвращает текущий статус утверждения документа.
//
// Параметры:
//  Документ         - Документ.Ссылка - Ссылка на документ, по которому получаем статус.
//  Пользователь     - Неопределено    - Переменная, в которую будет помещен пользователь, установивший статус.
// Возвращаемое значение:
//  СтатусДокумента  - ПеречислениеСсылка.СтатусыДокумента - Текущий статус документа.
//
Функция СтатусДокумента(Документ, Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СтатусДокумента, Пользователь ИЗ РегистрСведений.СостоянияДокументов ГДЕ Регистратор = &Регистратор УПОРЯДОЧИТЬ ПО Период УБЫВ";
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат    = Перечисления.СтатусыДокументов.ПустаяСсылка();
	Пользователь = Пользователи.ТекущийПользователь();
	
	Если Выборка.Следующий() Тогда
		Результат    = Выборка.СтатусДокумента;
		Пользователь = Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СтатусДокумента()

// Обновляет настройки в кэше повторного использования после их изменения.
//
// Параметры:
//  Документ   - Строка  - Имя документа, для которого обновляется кэш.
//
Процедура ОбновитьНастройкуВКэше(Документ = Неопределено) Экспорт
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры // ОбновитьНастройкуВКэше()

// Устанавливает доступность кнопок в подменю утверждения документов
//
// Параметры:
//  Форма          - УправляемаяФорма - Форма списка документа.
//  ТекущийЭлемент - ДокументСсылка   - Документ, для которого настраиваются доступность команд утверждения.
//
Процедура УстановитьКартинкуТекущегоСтатусаДокумента(Форма, ТекущийЭлемент) Экспорт
	
	ПодменюУтверждения = Форма.Элементы.Найти("ПодменюУтверждениеДокументов");
	
	// Проверяем наличие подменю утверждения (использование подсистемы).
	Если ПодменюУтверждения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтатусДокумента = "Утверждение";
	
	Если НЕ ТипЗнч(ТекущийЭлемент)=Тип("СтрокаГруппировкиДинамическогоСписка") И ЕстьРеквизит(ТекущийЭлемент, "СтатусУтверждения") Тогда
		
		ТекСтатусДокумента = Строка(ТекущийЭлемент.СтатусУтверждения);
		Если НЕ ЗначениеЗаполнено(ТекСтатусДокумента) Тогда
			ТекСтатусДокумента = "Подготовка";
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПодменюУтверждения.Картинка = БиблиотекаКартинок[ТекСтатусДокумента] Тогда
		ПодменюУтверждения.Картинка = БиблиотекаКартинок[ТекСтатусДокумента];
	КонецЕсли;
	
КонецПроцедуры // УстановитьКартинкуТекущегоСтатусаДокумента()

// Запись нового статуса документа в реквизит документа.
//
// Параметры:
//  Форма              - УправляемаяФорма - Форма документа.
//  Документ           - ДокументСсылка   - Документ, у которого меняем статус утверждения.
//  ИмяСтатуса         - Строка     - Имя нового устанавливаемого статуса документа (Перечисления.СтатусыДокументов).
//
Процедура УтверждениеДокумента(Форма, Документ, ИмяСтатуса, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	ТекущийПользователь  = Пользователи.ТекущийПользователь();
	АвторСтатуса         = Неопределено;
	НовыйСтатусДокумента = Перечисления.СтатусыДокументов[ИмяСтатуса];
	ТекСтатусДокумента   = СтатусДокумента(Документ, АвторСтатуса);
	
	// Статус не изменился, ничего делать не надо.
	Если НовыйСтатусДокумента = ТекСтатусДокумента Тогда
		Возврат;
	КонецЕсли;
	
	// Записываем новый статус в реквизит документа СтатусУтверждения.
	Если Объект <> Неопределено И ЕстьРеквизит(Объект, "СтатусУтверждения") Тогда
		
		// Из формы документа документ не записываем, только меняем реквизит.
		СтарыйСтатусДокумента = Объект.СтатусУтверждения;
		Объект.СтатусУтверждения = НовыйСтатусДокумента;
		Попытка
			Форма.Записать();
			Форма.ТолькоПросмотр = Ложь;
		Исключение
			Объект.СтатусУтверждения = СтарыйСтатусДокумента;
			ПолноеИмяОбъекта = РаботаСФормойКлиентСервер.ПолноеИмяОбъекта(Форма);
			ЗаписьЖурналаРегистрации(
				НСтр(
					"ru = 'Не удалось записать" + Символы.НПП + ТипЗнч(ПолноеИмяОбъекта) + ".'",
					ОбщегоНазначения.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Ошибка,
				, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		УстановитьКартинкуТекущегоСтатусаДокумента(Форма, Документ);
	Иначе
		
		// Из списка документов для записи сначала по ссылке получаем объект.
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ЕстьРеквизит(ДокументОбъект, "СтатусУтверждения") Тогда
			
			ДокументОбъект.СтатусУтверждения = НовыйСтатусДокумента;
			Попытка
				ДокументОбъект.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Не удалось записать" + Символы.НПП + ТипЗнч(ДокументОбъект) + ".'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
				ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		Иначе
			
			ТекстОшибки = НСтр(
				"ru = 'В документе %1 не найден реквизит «Статус утверждения». Статус утверждения документа не изменен.'"
			);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТипЗнч(ДокументОбъект));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает статусы документа с учетом текущего статуса.
//
// Параметры:
//  Документ - ДокументСсылка - Документ, для которого получаются статусы
//  ПолноеИмяОбъекта - Строка - Имя документа
//  ЗаполнятьДоступные - Булево - Заполнять коллекцию доступных статусов
//  ЗаполнятьВозможные - Булево - Заполнять коллекцию ваозможных статусов
//
// Возвращаемое значение:
//   Структура - Статусы для документа:
//   * Все - Соответствие - Все статусы утверждения
//   * Доступные - СписокЗначений - Доступные статусы утверждения
//   * Возможные - СписокЗначений - Возможные статусы утверждения
//
Функция СтатусыДокумента(Документ, ПолноеИмяОбъекта, ЗаполнятьДоступные=Истина, ЗаполнятьВозможные=Истина) Экспорт
	
	Статусы = Новый Структура(
		"Все,Доступные,Возможные",
		Новый Соответствие(),
		Новый СписокЗначений(),
		Новый СписокЗначений());
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыДокументов.Ссылка КАК Значение,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СтатусыДокументов.Ссылка) КАК Ключ
	|ИЗ
	|	Перечисление.СтатусыДокументов КАК СтатусыДокументов");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Статусы.Все.Вставить(Выборка.Ключ, Выборка.Значение);
		
	КонецЦикла;
	
	Если ЗаполнятьДоступные И ЕстьРеквизит(Документ, "СтатусУтверждения") Тогда
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
			ПолноеИмяОбъекта = Документ.Метаданные().ПолноеИмя();
		КонецЕсли;
		Статусы.Доступные = УтверждениеДокументовПовтИсп.ДоступныеСтатусы(ПолноеИмяОбъекта);
		
	КонецЕсли;
	
	Если ЗаполнятьВозможные И Статусы.Доступные.Количество() Тогда
		
		РеквизитыДокумента = Новый Структура("СтатусУтверждения,Проведен", Неопределено, Ложь);
		
		Если ЗначениеЗаполнено(Документ) Тогда
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "СтатусУтверждения,Проведен");
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыДокумента.СтатусУтверждения)
			ИЛИ РеквизитыДокумента.СтатусУтверждения = ПредопределенноеЗначение("Перечисление.СтатусыДокументов.НеУстановлен") Тогда
			
			Если РеквизитыДокумента.Проведен Тогда
				
				Статусы.Возможные.Добавить("Согласован");
				
			Иначе
				
				Статусы.Возможные.Добавить("Подготовка");
				Статусы.Возможные.Добавить("Подготовлен");
				Статусы.Возможные.Добавить("Утвержден");
				Статусы.Возможные.Добавить("Отклонен");
				
			КонецЕсли;
			
		ИначеЕсли РеквизитыДокумента.СтатусУтверждения = ПредопределенноеЗначение("Перечисление.СтатусыДокументов.Подготовка") Тогда
			
			Статусы.Возможные.Добавить("Подготовлен");
			Статусы.Возможные.Добавить("Согласован");
			Статусы.Возможные.Добавить("Утвержден");
			Статусы.Возможные.Добавить("Отклонен");
			
		ИначеЕсли РеквизитыДокумента.СтатусУтверждения = ПредопределенноеЗначение("Перечисление.СтатусыДокументов.Подготовлен") Тогда
			
			Статусы.Возможные.Добавить("Подготовка");
			Статусы.Возможные.Добавить("Согласован");
			Статусы.Возможные.Добавить("Утвержден");
			Статусы.Возможные.Добавить("Отклонен");
			
		ИначеЕсли РеквизитыДокумента.СтатусУтверждения = ПредопределенноеЗначение("Перечисление.СтатусыДокументов.Согласован") Тогда
			
			Статусы.Возможные.Добавить("Подготовка");
			Статусы.Возможные.Добавить("Подготовлен");
			Статусы.Возможные.Добавить("Утвержден");
			Статусы.Возможные.Добавить("Отклонен");
			
		ИначеЕсли РеквизитыДокумента.СтатусУтверждения = ПредопределенноеЗначение("Перечисление.СтатусыДокументов.Утвержден") Тогда
			
			Статусы.Возможные.Добавить("Согласован");
			
		ИначеЕсли РеквизитыДокумента.СтатусУтверждения = ПредопределенноеЗначение("Перечисление.СтатусыДокументов.Отклонен") Тогда
			
			Статусы.Возможные.Добавить("Подготовка");
			Статусы.Возможные.Добавить("Подготовлен");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выбирает статусы утверждения документов из перечисления (кроме служебного №0).
//
// Параметры:
//   НЕТ
//
// Возвращаемое значение:
//   СписокЗначений   - Статусы утверждения документов из перечисления (кроме служебного №0).
//
Функция СтатусыДокументов()
	
	ДоступныеСтатусы = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Перечисление.СтатусыДокументов ГДЕ Порядок > 0 УПОРЯДОЧИТЬ ПО Порядок";
	
	ВыборкаСтатусов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСтатусов.Следующий() Цикл
		ДоступныеСтатусы.Добавить(ВыборкаСтатусов.Ссылка, Строка(ВыборкаСтатусов.Ссылка));
	КонецЦикла;
	
	Возврат ДоступныеСтатусы;
	
КонецФункции // СтатусыДокументов()

// Создает подменю "Утверждение документов" на форме и добавляет в него команды.
Процедура ДобавитьКомандыУтверждения(Форма, Знач ДоступныеСтатусы)
	
	Если Форма.Элементы.Найти("ПодменюУтверждениеДокументов") = Неопределено Тогда
		// не должны сюда попасть...
		Возврат;
	КонецЕсли;
	
	// Добавляем в список статусов элемент для отображения истории утверждения документа.
	ДоступныеСтатусы.Добавить("ИсторияДокументов", "История");
	
	// Перебираем статусы из перечисления.
	Для Каждого ТекДоступныйСтатус Из ДоступныеСтатусы Цикл
		
		ПредставлениеСтатуса = Строка(ТекДоступныйСтатус.Значение);
		
		// В имени команды используем строчное значение имени перечисления.
		ИмяКоманды = "УтверждениеДокументов" + "Статус" + ПредставлениеСтатуса;
		ИмяГруппыКомандУтверждения = "ПодменюИзменениеСтатусаУтвержденияДокументов";
		
		// Добавим отдельную группу для кнопки "История".
		Если ПредставлениеСтатуса = "ИсторияДокументов" Тогда
			ИмяГруппыКомандУтверждения = "ПодменюИсторияИзмененияСтатусаУтвержденияДокументов";
			ПредставлениеСтатуса = ТекДоступныйСтатус.Представление;
		КонецЕсли;
		
		// Создаем команды изменения статуса.
		ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		ОписаниеКомандыФормы.Действие = "Подключаемый_ВыполнитьКомандуУтверждения";
		ОписаниеКомандыФормы.ИмяКоманды = ИмяКоманды;
		ОписаниеКомандыФормы.ИмяГруппы = ИмяГруппыКомандУтверждения;
		ОписаниеКомандыФормы.Картинка = БиблиотекаКартинок[ПредставлениеСтатуса];
		ОписаниеКомандыФормы.Заголовок = ПредставлениеСтатуса;
		ОписаниеКомандыФормы.Подсказка = СтрШаблон(
			НСтр("ru = 'Установить статус документа: %1'"),
			ТекДоступныйСтатус.Представление
		);
		ОписаниеКомандыФормы.ТолькоВоВсехДействиях = Ложь;
		ОписаниеКомандыФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
