// Общий модуль "Управление диалогом (клиент-сервер)"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// возвращает результат проверки номера таможенной декларации 
// 
// Параметры:
//  НомерТаможеннойДекларации - Строка - проверяемый номер
//
// Возвращаемое значение:
//  Строка - пустая строка или сообщение с ошибкой
//
Функция КорректныйНомерДекларации(НомерТаможеннойДекларации) Экспорт
	//
	
	// ПроверитьКорректностьНомераТаможеннойДекларации
	// НаличиеОшибокВНомереДекларации
	
	
	// Установим корректные даты начала и окончания
	НачалоПериода = Дата(2000, 01, 01);
	
	#Если Клиент ИЛИ ВебКлиент ИЛИ МобильныйКлиент Тогда
		КонецПериода = ДобавитьМесяц(КонецГода(ОбщегоНазначенияКлиент.ДатаСеанса()), 9 * 12);
	#Иначе
		КонецПериода = ДобавитьМесяц(КонецГода(ТекущаяДатаСеанса()), 9 * 12);
	#КонецЕсли
	
	НомерДекларацииНаТовары = СокрЛП(НомерТаможеннойДекларации);
	
	// Проверим наличие номера ГТД
	Если НЕ ЗначениеЗаполнено(НомерДекларацииНаТовары) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	// Проверим наличие необходимых блоков
	МассивНомеров = СтрРазделить(НомерДекларацииНаТовары, "/");
	
	Если МассивНомеров.Количество() > 4
		ИЛИ МассивНомеров.Количество() < 3 Тогда
	
		Возврат НСтр("ru = 'Номер должен состоять из трех или четырех блоков, разделенных дробью ""/""'");
		
	КонецЕсли;
	
	КодТаможенногоОргана = МассивНомеров[0];
	
	// Проверим код таможенного органа
	Если СтрДлина(КодТаможенногоОргана) <> 2
		И СтрДлина(КодТаможенногоОргана) <> 5
		И СтрДлина(КодТаможенногоОргана) <> 8 Тогда
		
		Возврат НСтр("ru = 'Код таможенного органа (первый блок) должен состоять из 2, 5 или 8 цифр'");
		
	КонецЕсли;
	
	// Проверим дату регистрации
	ДатаПринятияДекларацииНаТовары = МассивНомеров[1];
	
	Если СтрДлина(ДатаПринятияДекларацииНаТовары) <> 6
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДатаПринятияДекларацииНаТовары) Тогда
		
		Возврат НСтр("ru = 'Дата регистрации декларации (второй блок) должен быть в формате ДДММГГ'");
		
	Иначе
		
		СтрокаВДату = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаПринятияДекларацииНаТовары);
		Если НЕ ЗначениеЗаполнено(СтрокаВДату) Тогда
			
			Возврат НСтр("ru = 'Дата регистрации декларации (второй блок) должен быть в формате ДДММГГ'");
			
		Иначе
			
			Если СтрокаВДату < НачалоПериода
				ИЛИ СтрокаВДату > КонецПериода Тогда
				
				Возврат НСтр("ru = 'Дата регистрации декларации (второй блок) указанный год за пределами допустимого периода'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим порядковый номер ТД
	ПорядковыйНомерДекларацииНаТовары = МассивНомеров[2];
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) < 7
		ИЛИ СтрДлина(ПорядковыйНомерДекларацииНаТовары) > 8 Тогда
		
		Возврат НСтр("ru = 'Порядковый номер декларации (третий блок) может состоять из (один из вариантов):
								|  1) 7 цифр
								|  2) двух букв (""ОБ"" или ""ЗВ"") и 6 цифр
								|  3) одной буквы (""В"") и 6 цифр'");
		
	КонецЕсли;
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) = 7 Тогда
		
		ПервыйСимволНомера = ВРег(Лев(ПорядковыйНомерДекларацииНаТовары, 1));
		ПоследниеШестьСимволов = ВРег(Прав(ПорядковыйНомерДекларацииНаТовары, 6));
		УстаревшийНомерТД = 
			ПервыйСимволНомера = "П" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеШестьСимволов);
		ЗаявлениеОВыпускеТоваров =
			ПервыйСимволНомера = "В" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеШестьСимволов);
		
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПорядковыйНомерДекларацииНаТовары)
			И НЕ УстаревшийНомерТД
			И НЕ ЗаявлениеОВыпускеТоваров Тогда
			
			Возврат НСтр("ru = 'Порядковый номер декларации (третий блок) может состоять из (один из вариантов):
								|  1) 7 цифр
								|  2) двух букв (""ОБ"" или ""ЗВ"") и 6 цифр
								|  3) одной буквы (""В"") и 6 цифр'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) = 8 Тогда
		
		ПервыеДваСимвола = ВРег(Лев(ПорядковыйНомерДекларацииНаТовары, 2));
		Если ПервыеДваСимвола = "0Б" Тогда
			
			Возврат НСтр("ru = 'В порядковом номере декларации (третий блок) вместо буквы ""О"" указана цифра ноль'");
			
		ИначеЕсли ПервыеДваСимвола = "3В"
			ИЛИ ПервыеДваСимвола = "3B" Тогда
			
			Возврат НСтр("ru = 'В порядковом номере декларации (третий блок) вместо буквы ""З"" указана цифра три'");
			
		ИначеЕсли ПервыеДваСимвола <> "ОБ"
			И ПервыеДваСимвола <> "OБ"
			И ПервыеДваСимвола <> "ЗВ"
			И ПервыеДваСимвола <> "ЗB" Тогда 
			
			Возврат НСтр("ru = 'Порядковый номер декларации (третий блок) может состоять из (один из вариантов):
								|  1) 7 цифр
								|  2) двух букв (""ОБ"" или ""ЗВ"") и 6 цифр
								|  3) одной буквы (""В"") и 6 цифр'");
			
		КонецЕсли;
		
		ПоследниеШестьСимволов = ВРег(Прав(ПорядковыйНомерДекларацииНаТовары, 6));
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеШестьСимволов) Тогда
			
			Возврат НСтр("ru = 'Порядковый номер декларации (третий блок) может состоять из (один из вариантов):
								|  1) 7 цифр
								|  2) двух букв (""ОБ"" или ""ЗВ"") и 6 цифр
								|  3) одной буквы (""В"") и 6 цифр'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивНомеров.Количество() = 4 Тогда
		
		ПорядковыйНомерТовара = МассивНомеров[3];
		Если СтрДлина(ПорядковыйНомерТовара) > 3
			ИЛИ СтрДлина(ПорядковыйНомерТовара) < 1
			ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПорядковыйНомерТовара) Тогда
			
			Возврат НСтр("ru = 'Порядковый номер товара (четвертый блок) должен содержать от 1 до 3 цифр'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#Область Оплаты

// Установить реквизит документа "Отправлять команду на эквайринговый терминал"
//
// Параметры:
//  Объект  - ДокументСсылка - Документ, где возникло событие.
//
Процедура УстановитьПризнакНеобходимостиЭТ(Объект) Экспорт
	
	УсловиеОтбора = Новый Структура();
	УсловиеОтбора.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
	Объект.ОтправлятьКомандуНаЭТ = Объект.Оплаты.НайтиСтроки(УсловиеОтбора).Количество() <> 0
		И МенеджерОборудованияАльфаАвтоВызовСервера.ЕстьЭквайринговыйТерминал();
	
КонецПроцедуры // УстановитьПризнакНеобходимостиЭТ()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОЛУЧЕНИЯ ПРЕДСТАВЛЕНИЯ ДОКУМЕНТА

// Общий обработчик события получения состава полей, из которых формируется представление объекта или ссылки.
//
// Параметры:
//  Источник             - ДокументОбъект - Объект, для которого происходит формирование представления.
//  Поля                 - Массив - Массив, содержащий имена полей, которые нужны для формирования представления.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаПолученияПолейПредставления(Источник, Поля, СтандартнаяОбработка=ИСТИНА) Экспорт
	
	УправлениеДиалогомВызовСервера.ОбработкаПолученияПолейПредставления(ТипЗнч(Источник), Поля, СтандартнаяОбработка);
	
КонецПроцедуры // ОбработкаПолученияПолейПредставления()

// Общий обработчик события возникающего при получении представления объекта или ссылки.
//
// Параметры:
//  Источник             - ДокументМенеджер - Документ менеджер, для которого происходит формирование представления.
//  Данные               - Структура - Содержит значения полей, из которых формируется представление.
//  Представление        - Строка - Строка, в которую нужно поместить представление объекта или ссылки.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаПолученияПредставления(Источник, Данные, Представление, СтандартнаяОбработка=ИСТИНА) Экспорт
	
	// Проверяем целесообразность программной обработки события.
	Если НЕ Данные.Свойство("ХозОперация") Тогда
		Возврат;
	КонецЕсли;
	
	//ААА6 ++
	
	СтандартнаяОбработка = ЛОЖЬ;
	ЭтоНовый = НЕ ЗначениеЗаполнено(Данные.Ссылка);
	ЧастиПредставления = Новый Массив;
	ЧастиПредставления.Добавить(Данные.ХозОперация);
	
	Если Данные.Свойство("ПризнакСпособаРасчета") И ЗначениеЗаполнено(Данные.ПризнакСпособаРасчета) Тогда
		Если Не Данные.Свойство("ДляПробитияНаФР") Тогда
			ЧастиПредставления.Добавить(НРег("(" + Данные.ПризнакСпособаРасчета + ")"));
		ИначеЕсли Данные.ДляПробитияНаФР Тогда 
			ЧастиПредставления.Добавить(НРег("(" + Данные.ПризнакСпособаРасчета + ")"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоНовый Тогда
		
		ЧастиПредставления.Добавить(СтрШаблон(НСтр("ru = '№ %1 от %2'"), Данные.Номер, Формат(Данные.Дата, "ДЛФ=D")));
		
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = '(создание)'"));
		
	ИначеЕсли Данные.ПометкаУдаления Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = '(помечен на удаление)'"));
		
	ИначеЕсли Данные.Проведен И УправлениеДиалогомВызовСервера.ПроведениеРазрешено(Данные.Ссылка) Тогда
		
		ЧастиПредставления.Добавить(НСтр("ru = '(проведен)'"));
		
	Иначе
		
		ЧастиПредставления.Добавить(НСтр("ru = '(записан)'"));
		
	КонецЕсли;
	
	Представление = СтрСоединить(ЧастиПредставления, " ");
	
	//ААА6 --
	
КонецПроцедуры // ОбработкаПолученияПредставления()

#КонецОбласти