////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции СофтФон.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Функция - Ссылка на запись разговора
//  Возвращает ссылку на запись разговора
//
// Параметры:
//  ИдентификаторЗвонка	 - Строка	 - Идентификатор звонка
//  ВнутреннийНомер		 - Строка	 - Внутренний номер
//  Ошибка				 - Строка	 - Возвращаемое описание возникшей ошибки
// 
// Возвращаемое значение:
//  Строка - URI записи звонка.
//
Функция СсылкаНаЗаписьРазговора(ИдентификаторЗвонка, ВнутреннийНомер, Ошибка) Экспорт
	
	Возврат сфпСофтФонПроСерверПереопределяемый.СсылкаНаЗаписьРазговора(ИдентификаторЗвонка, ВнутреннийНомер, Ошибка);
	
КонецФункции

// Функция - Создать изменить служебного пользователя телефонии
//  Функция создает нового пользователя. Если пользователь уже создан, то изменяет настройки его аутентификации.
//
// Параметры:
//  Включить - Булево	 - Признак необходимости использования аутентификации.
// 
// Возвращаемое значение:
//  Булево - Результат выполнения функции. Истина, если пользователь создан или изменен.
//
Функция СоздатьИзменитьСлужебногоПользователяТелефонии(Включить = Ложь) Экспорт
	
	Логин = СлужебныйПользовательТелефонииЛогин();
	Пароль = СлужебныйПользовательТелефонииПароль();
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИзСправочника = сфпОбщегоНазначения.НайтиПользователяПоИмени(Логин);
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка
		Если ПользовательИзСправочника = Неопределено Тогда
			
			ИмяСобытия = "Телефония.СозданиеСлужебногоПользователя";
			
			ОписаниеПользователяИБ = сфпОбщегоНазначения.НовоеОписаниеПользователяИБ();
			ОписаниеПользователяИБ.Имя = Логин;
			ОписаниеПользователяИБ.ПолноеИмя = НСтр("en='Service user telephony';ru='Служебный пользователь телефонии'");
			ОписаниеПользователяИБ.АутентификацияСтандартная = Включить;
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
			ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
			ОписаниеПользователяИБ.Пароль = Пароль;
			ОписаниеПользователяИБ.Роли = Новый Массив;
			ОписаниеПользователяИБ.Роли.Добавить(Метаданные.Роли.сфпУправлениеМаршрутизацией.Имя);
			
			НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
			НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
			НовыйПользователь["Служебный"] = Истина;
			// АльфаАвто
			// Установим идентификационные реквизиты пользователя
			НовыйПользователь.ПодразделениеКомпании = Справочники.ПодразделенияКомпании.ОсновноеПодразделение;
			НовыйПользователь.Организация           = Справочники.Организации          .ОсновнаяОрганизация;
			// Конец АльфаАвто
			НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			НовыйПользователь.Записать();
			
		Иначе
			
			ИмяСобытия = "Телефония.ИзменениеДоступаСлужебногоПользователя";
			ИзменитьДоступВБазу(Включить, Пароль, ПользовательИзСправочника);
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.Пользователи, ПользовательИзСправочника);
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Процедура - Параметры работы клиента при запуске
// Заполняет параметры работы клиента при запуске.
//
// Параметры:
//  Параметры	 - Структура	 -  Структура параметров
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ИспользуетсяТелефония = ИспользуетсяТелефония();
	
	Параметры.Вставить("ИспользуетсяТелефония", ИспользуетсяТелефония);
	
	Если НЕ ИспользуетсяТелефония Тогда
		Возврат;
	КонецЕсли;
	
	ЖурналЗвонков = КлючОбсужденияЖурналЗвонков();
	
	Если ЖурналЗвонков <> Неопределено Тогда
		Параметры.Вставить("СлужебныйЖурналЗвонков", ЖурналЗвонков);
		УстановитьПривилегированныйРежим(Истина);
		Если НЕ Константы.сфпЖурналЗвонковОбновлен.Получить() Тогда
			Параметры.Вставить("ОбновитьЖурналЗвонков", Истина);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

КонецПроцедуры

// Функция - Используется телефония
//  Функция возвращает признак использования телефонии
// 
// Возвращаемое значение:
//  Булево - Признак использования телефонии.
//
Функция ИспользуетсяТелефония() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("сфпИспользоватьОблачнуюТелефонию") ИЛИ ПолучитьФункциональнуюОпцию("сфпИспользоватьМобильнуюТелефонию");
	
КонецФункции

// Процедура - Маршрутизировать вызов манго
//  Процедура предназначена для изменения маршрута вызова, еще не распределенного сотруднику
//  ВАТС (т.е. находящегося в голосовом меню или в очереди ожидания на группе); а также для
//  перехвата вызова, распределенного на сотрудника, до снятия им трубки (в состоянии Appeared).
//  В случае успешной обработки команды генерируется новый вызов.
//
// Параметры:
//  call_id			 - Строка	 - Идентификатор вызова, маршрут которого необходимо изменить.
//  ВнутреннийНомер	 - Строка	 - Внутренний номер
//
Процедура МаршрутизироватьВызовМанго(call_id, ВнутреннийНомер) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
	ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
	ЗаписьJSON.ЗаписатьЗначение(call_id);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
	ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	НастройкиТелефонии = ПолучитьНастройкиТелефонии();
	sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
	
	ПараметрыТела = Новый Массив;
	ПараметрыТела.Добавить("vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key);
	ПараметрыТела.Добавить("sign=" + sign);
	ПараметрыТела.Добавить(КодироватьСтроку("json=" + json, СпособКодированияСтроки.URLВКодировкеURL));
	
	URL = КорневойАдресАТС() + "commands/route";
	СтруктураURI = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.УстановитьТелоИзСтроки(сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыТела, "&"),
		КодировкаТекста.UTF8,
		ИспользованиеByteOrderMark.НеИспользовать
	);
	
	HTTPСоединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт,,,,,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
	ЗаписьЖурналаРегистрации(
		сфпСофтФонПроСерверПереопределяемый.СобытиеЖурналаРегистрации() + "./commands/route",
		УровеньЖурналаРегистрации.Примечание,
		,
		,
		json + Символы.ПС + НСтр("en='HTTP status code of the response: ';ru='Код состояния HTTP ответа: '") + HTTPОтвет.КодСостояния
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обработчик подписки "ОчиститьВходящиеЗвонки". Очищает вспомогательные данные по удаляемому абоненту.
//
Процедура ОчиститьТекущиеЗвонкиПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Пользователь
	|ИЗ РегистрСведений.сфпТекущиеЗвонки
	|ГДЕ АбонентКонтакт = &УдаляемыйАбонент");
	Запрос.УстановитьПараметр("УдаляемыйАбонент", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.сфпТекущиеЗвонки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция КлючСлужебногоОбсужденияСистемыВзаимодействия() Экспорт
	
	Возврат "ТелефонияЖурналЗвонков";
	
КонецФункции

Процедура ПроверитьИдентификаторЖурналаЗвонков(СохраненныйИдентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
	Если Обсуждение = Неопределено Тогда
		  ОбсуждениеЖурналИдентификатор = сфпСофтФонПроСервер.СоздатьОбсуждениеЖурналЗвонков();
	Иначе ОбсуждениеЖурналИдентификатор = Обсуждение.Идентификатор;
	КонецЕсли;
	
	Если СохраненныйИдентификатор <> ОбсуждениеЖурналИдентификатор Тогда
		Константы.сфпИдентификаторЖурналаЗвонковСистемыВзаимодействия.Установить(ОбсуждениеЖурналИдентификатор);
		СохраненныйИдентификатор = ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

Функция СлужебныйПользовательТелефонииЛогин() Экспорт
	Возврат "TelephonyService";
КонецФункции

Функция СлужебныйПользовательТелефонииПароль() Экспорт
	Возврат "Rhp5931QwL";
КонецФункции

Функция СлужебныйПользовательТелефонииАвторизацияВСтрокеПодключения() Экспорт
	Возврат сфпОбщегоНазначения.сфпПодставитьПараметрыВСтроку("Usr=%1;Pwd=&quot;%2&quot;;", СлужебныйПользовательТелефонииЛогин(), СлужебныйПользовательТелефонииПароль());
КонецФункции

Функция ВосстановлениеJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Свойство = "timestamp" Тогда
		Возврат МестноеВремя(Дата(1970,01,01) + Число(Значение), ЧасовойПоясСеанса());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьSign(vpbx_api_key, json, vpbx_api_salt) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(vpbx_api_key + json + vpbx_api_salt);
	
	Возврат НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", ""));
	
КонецФункции

Функция ПолучитьИдентификаторЗаписиРазговора(Звонок) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ИдентификаторЗаписи
	|ИЗ РегистрСведений.сфпИсторияЗвонков
	|ГДЕ Звонок = &Звонок");	
	Запрос.УстановитьПараметр("Звонок", Звонок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторЗаписи;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьАбонентаПоНомеруТелефона(знач НомерТелефонаАбонента) Экспорт
	
	ПоисковоеВыражение = СтрЗаменить(НомерТелефонаАбонента, "+", "") + "%";
	Если сфпОбщегоНазначения.сфпСтрНачинаетсяС(ПоисковоеВыражение, "7") Или сфпОбщегоНазначения.сфпСтрНачинаетсяС(ПоисковоеВыражение, "8") Тогда
		ПоисковоеВыражение = "[78]" + Сред(ПоисковоеВыражение, 2);
	КонецЕсли;
	
	ТипыАбонентов = Новый Массив;
	Если Метаданные.Справочники.Найти("Партнеры") <> Неопределено Тогда
		ТипыАбонентов.Добавить(Метаданные.Справочники["Партнеры"]);
	КонецЕсли;
	Если Метаданные.Справочники.Найти("КонтактныеЛицаПартнеров") <> Неопределено Тогда
		ТипыАбонентов.Добавить(Метаданные.Справочники["КонтактныеЛицаПартнеров"]);
	КонецЕсли;
	Если Метаданные.Справочники.Найти("Контрагенты") <> Неопределено Тогда
		ТипыАбонентов.Добавить(Метаданные.Справочники["Контрагенты"]);
	КонецЕсли;
	Если Метаданные.Справочники.Найти("КонтактныеЛица") <> Неопределено Тогда
		ТипыАбонентов.Добавить(Метаданные.Справочники["КонтактныеЛица"]);
	КонецЕсли;
	Если Метаданные.Справочники.Найти("CRM_ПотенциальныеКлиенты") <> Неопределено Тогда
		ТипыАбонентов.Добавить(Метаданные.Справочники["CRM_ПотенциальныеКлиенты"]);
	КонецЕсли;
	
	СекцияОбъединить = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	БазаЗапроса = "
	|ВЫБРАТЬ
	|	КонтактнаяИнформация_1.Ссылка
	|ИЗ
	|	СправочникИсточник.КонтактнаяИнформация КАК КонтактнаяИнформация_1
	|ГДЕ
	|	КонтактнаяИнформация_1.НомерТелефона ПОДОБНО &ПоисковоеВыражение
	|	И КонтактнаяИнформация_1.Тип = &ТипТелефон";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоисковоеВыражение", ПоисковоеВыражение);
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления["ТипыКонтактнойИнформации"].Телефон);
	Запрос.Текст = "";
	НомерОбъединения = 0;
	
	Для Каждого ТипАбонента Из ТипыАбонентов Цикл
		
		НомерОбъединения = НомерОбъединения + 1;
		ЧастьОбъединения = СтрЗаменить(БазаЗапроса, "СправочникИсточник", ТипАбонента.ПолноеИмя());
		ЧастьОбъединения = СтрЗаменить(ЧастьОбъединения, "КонтактнаяИнформация_1", "КонтактнаяИнформация_" + НомерОбъединения);
		
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", СекцияОбъединить) + ЧастьОбъединения;
		
	КонецЦикла;
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	Исключение
		СтрОшибки = ИнформацияОбОшибке();
	КонецПопытки;
		
	Возврат Неопределено;
	
КонецФункции

Процедура ЗарегистрироватьТекущийВходящийЗвонок(НомерТелефонаАбонента, АбонентОтКого, ПользовательКому, ДатаЗвонка, Событие, Входящий, ИдентификаторЗвонкаВАТС = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПользовательКому) ИЛИ ТипЗнч(ПользовательКому) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.сфпТекущиеЗвонки.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(ПользовательКому);
	Набор.Отбор.ИдентификаторЗвонка.Установить(ИдентификаторЗвонкаВАТС);
	
	ЗаписьНабора = Набор.Добавить();
	ЗаписьНабора.Пользователь = ПользовательКому;
	ЗаписьНабора.ИдентификаторЗвонка = ИдентификаторЗвонкаВАТС;
	ЗаписьНабора.НомерТелефона = НомерТелефонаАбонента;
	ЗаписьНабора.АбонентКонтакт = АбонентОтКого;
	ЗаписьНабора.ДатаЗвонка = ?(ЗначениеЗаполнено(ДатаЗвонка), ДатаЗвонка, ТекущаяДата());
	ЗаписьНабора.Звонок = Событие;
	ЗаписьНабора.Входящий = Входящий;

	Набор.Записать(Истина);
	
КонецПроцедуры

Функция НастройкиТелефонииПоУмолчанию()
	
	Результат = Новый Структура();
	
	Результат.Вставить("МаршрутизироватьВходящиеНаОтветственных", Ложь);
	
	Результат.Вставить("ДействиеВходящегоЗвонка", "ОткрытьТелефонныйЗвонок");
	Результат.Вставить("ДействиеИсходящегоЗвонка", "НичегоНеДелать");
	
	// СофтФонWebModule, MangoOffice, Ростелеком
	Результат.Вставить("vpbx_api_key", "");
	Результат.Вставить("vpbx_api_salt", "");
	
	// Ростелеком
	Результат.Вставить("Domain", "");
	
	// Itoolabs
	Результат.Вставить("АдресОблачнойАТС", "");
	Результат.Вставить("КлючДляАвторизацииВОблачнойАТС", "");
	Результат.Вставить("КлючДляАвторизацииВИБ", Строка(Новый УникальныйИдентификатор));
	
	// Яндекс
	Результат.Вставить("КлючДляАвторизацииАТСЯндекс", "");
	
	// Билайн
	Результат.Вставить("КлючДляАвторизацииВОблачнойАТС", "");
	Результат.Вставить("КлючПодпискиНаСобытия", "");
	
	// МТТ
	Результат.Вставить("АдресОблачнойАТС", "");
	Результат.Вставить("КлючДляАвторизацииВОблачнойАТС", "");
	Результат.Вставить("КлючДляАвторизацииВИБ", Строка(Новый УникальныйИдентификатор));
	
	// UIS
	Результат.Вставить("КлючДляАвторизацииАТСUIS", "");

	Результат.Вставить("ИдентификаторЖурналаЗвонковСистемыВзаимодействия", "");
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПользователяПоВнутреннемуНомеру(ВнутреннийНомер) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Объект КАК Абонент
	|ИЗ РегистрСведений.сфпКонтактыТелефонии
	|ГДЕ ВнутреннийНомерАТС = &ВнутреннийНомер");
	Запрос.УстановитьПараметр("ВнутреннийНомер", ВнутреннийНомер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Абонент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьВнутреннийНомерПоПользователю(Пользователь = Неопределено) Экспорт
	
	ДанныеПользователяАТС = сфпЛицензированиеСервер.ДанныеПользователяАТС(Пользователь);
	Если ДанныеПользователяАТС = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ДанныеПользователяАТС.ВнутреннийНомер;
	
КонецФункции

Процедура ИзменитьДоступВБазу(Включить, Знач Пароль, Знач ПользовательИзСправочника)
	
	ОбновляемыеСвойства = Новый Структура;
	ОбновляемыеСвойства.Вставить("СтарыйПароль", Пароль);
	ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", Включить);
	
	ОписаниеОшибки = "";
	ПользовательИБ = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательЗаписан = сфпОбщегоНазначения.ЗаписатьПользователяИБ(
	//Пользователи.УстановитьСвойстваПользователяИБ(
		сфпОбщегоНазначения.сфпЗначениеРеквизитаОбъекта(ПользовательИзСправочника, "ИдентификаторПользователяИБ"),
		ОбновляемыеСвойства,
		Ложь,
		ОписаниеОшибки,
		ПользовательИзСправочника
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПользовательЗаписан Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеЗвонка(Звонок, ИдентификаторЗвонкаВАТС, ДатаСобытия, НачалоРазговора = Неопределено, Входящий, Контрагент, НомерТелефона, ВнутреннийНомер, Ответственный, ПараметрыКоллтрекинга = Неопределено) Экспорт
	
	ИдентификаторЗаписи = "";
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.НомерТелефона.Установить(ИдентификаторЗвонкаВАТС);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		ИдентификаторЗаписи = НаборЗаписей[0].ИдентификаторЗаписи;
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Звонок.Значение = Звонок;
	НаборЗаписей.Отбор.Звонок.Использование = Истина;
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		  Запись = НаборЗаписей[0];
	Иначе Запись = НаборЗаписей.Добавить();
	КонецЕсли;
	
	Запись.Звонок = Звонок;
	Запись.ИдентификаторЗвонка = ИдентификаторЗвонкаВАТС;
	Если НЕ ЗначениеЗаполнено(Запись.ИдентификаторЗаписи) Тогда
		Запись.ИдентификаторЗаписи = ИдентификаторЗаписи;
	КонецЕсли;
	Запись.ДатаНачала = ДатаСобытия;
	Если НачалоРазговора <> Неопределено Тогда
		Запись.ДатаОтвета = НачалоРазговора;
	КонецЕсли;
	Запись.Входящий = Входящий;
	Запись.АбонентКонтакт = Контрагент;
	Запись.ВнутреннийНомер = ВнутреннийНомер;
	Запись.НомерТелефона = НомерТелефона;
	Запись.Ответственный = Ответственный;
	
	Если ПараметрыКоллтрекинга <> Неопределено Тогда
		Попытка
			Запись.КаналРекламногоВоздействия = ПараметрыКоллтрекинга.КаналРекламногоВоздействия;
			Запись.МаркетинговоеМероприятие = ПараметрыКоллтрекинга.МаркетинговоеМероприятие;
			Запись.utm_source = ПараметрыКоллтрекинга.utm_source;
			Запись.utm_medium = ПараметрыКоллтрекинга.utm_medium;
			Запись.utm_campaign = ПараметрыКоллтрекинга.utm_campaign;
			Запись.utm_term = ПараметрыКоллтрекинга.utm_term;
			Запись.utm_content = ПараметрыКоллтрекинга.utm_content;
		Исключение КонецПопытки;	
	КонецЕсли;	
	
	НачатьТранзакцию();
	
	НаборЗаписей.Записать(Истина);
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонкаВАТС) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ДатаНачала, НомерТелефона, Звонок
		|ИЗ РегистрСведений.сфпИсторияЗвонков
		|ГДЕ ИдентификаторЗвонка = &ИдентификаторЗвонка");
		Запрос.УстановитьПараметр("ИдентификаторЗвонка", ИдентификаторЗвонкаВАТС);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.Звонок) Тогда
				МенеджерЗаписи = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ДатаНачала = Выборка.ДатаНачала;
				МенеджерЗаписи.НомерТелефона = Выборка.НомерТелефона;
				МенеджерЗаписи.Звонок = Выборка.Звонок;
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция СоздатьТелефонныйЗвонок(Абонент, НомерТелефонаАбонента, Пользователь, Сотрудник, ВнутреннийНомерПользователя, Входящий, ДатаНачалаРазговора, ИдентификаторЗвонкаВАТС = Неопределено, Состояние = Неопределено) Экспорт
	
	ТелефонныйЗвонок = Неопределено;
	Если ИдентификаторЗвонкаВАТС <> Неопределено Тогда
		ТелефонныйЗвонок = НайтиТелефонныйЗвонокПоДаннымЗвонка(,, ИдентификаторЗвонкаВАТС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТелефонныйЗвонок) Тогда
		Возврат ТелефонныйЗвонок;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	ИмяДокументаТелефонныйЗвонок = СтрЗаменить(сфпСофтФонПроСервер.сфпИмяДокументаТелефонныйЗвонок(), "Документ.", "");
	РеквизитыДокумента = Метаданные.Документы[ИмяДокументаТелефонныйЗвонок].Реквизиты;
	
	ТелефонныйЗвонокОбъект	= Документы[ИмяДокументаТелефонныйЗвонок].СоздатьДокумент();
	ТелефонныйЗвонокОбъект.Заполнить(Неопределено);
	ТелефонныйЗвонокОбъект.Входящий = Входящий;
	ТелефонныйЗвонокОбъект.Дата = ТекущаяДатаСеанса();
	ТелефонныйЗвонокОбъект.Автор = сфпСофтФонПроСервер.сфпТекущийПользователь();
	ТелефонныйЗвонокОбъект.Ответственный = ?(ЗначениеЗаполнено(Сотрудник), Сотрудник, ТелефонныйЗвонокОбъект.Автор);
	ТелефонныйЗвонокОбъект.АбонентКакСвязаться = НомерТелефонаАбонента; 
	ТелефонныйЗвонокОбъект.АбонентПредставление = НСтр("en='!!!Indefined!!!';ru='!!!Не определен!!!'");
	ТелефонныйЗвонокОбъект.сфпИдентификаторЗвонка = ИдентификаторЗвонкаВАТС;
	ТелефонныйЗвонокОбъект.сфпДлительностьЗвонка = 0;
	ТелефонныйЗвонокОбъект.Описание = сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(ТелефонныйЗвонокОбъект.сфпДлительностьЗвонка);
	
	ПараметрыКоллтрекинга = Новый Структура();
	
	Если ТелефонныйЗвонокОбъект.Входящий Тогда
		ТелефонныйЗвонокОбъект.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный;
		
		МенеджерЗаписи = РегистрыСведений.сфпДанныеКоллтрекинга.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НомерТелефона = Прав(ТелефонныйЗвонокОбъект.АбонентКакСвязаться, 10);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			КаналВоздействия = "";
			Если ЗначениеЗаполнено(МенеджерЗаписи.utm_source) Тогда
				КаналВоздействия = Справочники.сфпКаналыРекламныхВоздействий.НайтиПоРеквизиту("Идентификатор", МенеджерЗаписи.utm_source);
				Если КаналВоздействия.Пустая() Тогда
					КаналВоздействияОбъект = Справочники.сфпКаналыРекламныхВоздействий.СоздатьЭлемент();
					КаналВоздействияОбъект.Наименование = МенеджерЗаписи.utm_source;
					КаналВоздействияОбъект.Идентификатор = МенеджерЗаписи.utm_source;
					КаналВоздействияОбъект.Записать();
					
					КаналВоздействия = КаналВоздействияОбъект.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			
			Мероприятие = "";
			Если ЗначениеЗаполнено(МенеджерЗаписи.utm_campaign) Тогда
				Мероприятие = Справочники.сфпМаркетинговыеМероприятия.НайтиПоРеквизиту("Идентификатор", МенеджерЗаписи.utm_campaign);
				Если Мероприятие.Пустая() Тогда
					МероприятиеОбъект = Справочники.сфпМаркетинговыеМероприятия.СоздатьЭлемент();
					МероприятиеОбъект.Наименование = МенеджерЗаписи.utm_campaign;
					МероприятиеОбъект.Идентификатор = МенеджерЗаписи.utm_campaign;
					МероприятиеОбъект.Записать();
					
					Мероприятие = МероприятиеОбъект.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			
			ТелефонныйЗвонокОбъект["сфпCoMagicID"] = МенеджерЗаписи.Идентификатор;
			ТелефонныйЗвонокОбъект["Комментарий"] = ТелефонныйЗвонокОбъект["Комментарий"] + ?(НЕ ЗначениеЗаполнено(ТелефонныйЗвонокОбъект["Комментарий"]), "", Символы.ПС)
				+ НСтр("ru='Сайт: ';en='Website: '") + МенеджерЗаписи.Сайт + Символы.ПС
				+ НСтр("ru='Ключевые слова: ';en='Keywords: '") + МенеджерЗаписи.utm_term;

			ПараметрыКоллтрекинга.Вставить("КаналРекламногоВоздействия", КаналВоздействия);
			ПараметрыКоллтрекинга.Вставить("МаркетинговоеМероприятие", Мероприятие);
			ПараметрыКоллтрекинга.Вставить("utm_source", МенеджерЗаписи.utm_source);
			ПараметрыКоллтрекинга.Вставить("utm_medium", МенеджерЗаписи.utm_medium);
			ПараметрыКоллтрекинга.Вставить("utm_campaign", МенеджерЗаписи.utm_campaign);
			ПараметрыКоллтрекинга.Вставить("utm_term", МенеджерЗаписи.utm_term);
			ПараметрыКоллтрекинга.Вставить("utm_content", МенеджерЗаписи.utm_content);
			
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Состояние) Тогда
		ТелефонныйЗвонокОбъект.сфпСостояниеЗвонка = Состояние;
	КонецЕсли;
	
	Если ТелефонныйЗвонокОбъект.Ссылка.Метаданные().Реквизиты.Найти("Важность") <> Неопределено Тогда
		Если ТелефонныйЗвонокОбъект.Важность.Метаданные().Имя = "ВариантыВажностиЗадачи" Тогда
			  ТелефонныйЗвонокОбъект.Важность = Перечисления["ВариантыВажностиЗадачи"].Обычная;
		Иначе ТелефонныйЗвонокОбъект.Важность = Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыДокумента.Найти("Тема") <> Неопределено Тогда
		ТелефонныйЗвонокОбъект.Тема = сфпСофтФонПроСервер.сфпЗаполнитьТемуТелефонногоЗвонка(ТелефонныйЗвонокОбъект.Входящий, ТелефонныйЗвонокОбъект.Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Абонент) Тогда
		ТелефонныйЗвонокОбъект.АбонентПредставление = "" + Абонент;
		ТелефонныйЗвонокОбъект.АбонентКонтакт = Абонент;
		ТелефонныйЗвонокОбъект.сфпКлиент = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Абонент);
	КонецЕсли;	
	
	Попытка
		ТелефонныйЗвонокОбъект.УстановитьНовыйНомер();
		ТелефонныйЗвонокОбъект.Записать();
		ТелефонныйЗвонок = ТелефонныйЗвонокОбъект.Ссылка;
		
		// РегистрСведений.сфпИсторияЗвонков
		Если ЗначениеЗаполнено(ДатаНачалаРазговора) Тогда
			ДатаСобытия = ДатаНачалаРазговора;
		Иначе
			ДатаСобытия = ТелефонныйЗвонокОбъект.Дата;
		КонецЕсли;
		
		ЗаписатьДанныеЗвонка(ТелефонныйЗвонок, ИдентификаторЗвонкаВАТС, ДатаСобытия,, Входящий, Абонент, НомерТелефонаАбонента, ВнутреннийНомерПользователя, Сотрудник, ПараметрыКоллтрекинга);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ТелефонныйЗвонок;
	
КонецФункции

Функция ПолучитьВходящийЗвонокПользователя(Пользователь = Неопределено) Экспорт
	
	Результат = Новый Структура("АбонентКонтакт, ДатаЗвонка, НомерТелефона, ПредставлениеАбонента");
	
	Если Пользователь = Неопределено Тогда
		Пользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторЗвонка,
	|	АбонентКонтакт,
	|	ДатаЗвонка,
	|	НомерТелефона,
	|	ПРЕДСТАВЛЕНИЕ(АбонентКонтакт) КАК ПредставлениеАбонента
	|ИЗ
	|	РегистрСведений.сфпТекущиеЗвонки
	|ГДЕ
	|	Пользователь = &ПользовательКому
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗвонка УБЫВ");
	Запрос.УстановитьПараметр("ПользовательКому", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.сфпТекущиеЗвонки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Записать(Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеЗвонка(ИдентификаторЗвонка, ОчиститьДанные = Неопределено, ДанныеЗаполнения = Неопределено) Экспорт
	
	Если ОчиститьДанные = Неопределено Тогда
		ОчиститьДанные = Истина;
	КонецЕсли;
	ОчиститьДанные = Ложь;
	
	Результат = ПолучитьНастройкиТелефонии();
	ТекущийПользователь = сфпТекущийПользователь();
	
	ДанныеЗвонка = Новый Структура("Пользователь,АбонентКонтакт,ДатаЗвонка,НомерТелефона,Звонок,ПредставлениеАбонента,Входящий,ИдентификаторЗвонка");
	ДанныеЗвонка.Вставить("Пользователь", ТекущийПользователь);
	
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ
	//|	Пользователь,
	//|	ИдентификаторЗвонка,
	//|	АбонентКонтакт,
	//|	ДатаЗвонка,
	//|	НомерТелефона,
	//|	Звонок,
	//|	Входящий
	//|ИЗ
	//|	РегистрСведений.сфпТекущиеЗвонки
	//|ГДЕ
	//|	ИдентификаторЗвонка = &ИдентификаторЗвонка");
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИдентификаторЗвонка,
	|	АбонентКонтакт,
	|	ДатаНачала КАК ДатаЗвонка,
	|	НомерТелефона,
	|	Звонок,
	|	Входящий,
	|	ВнутреннийНомер
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков
	|ГДЕ
	|	ИдентификаторЗвонка = &ИдентификаторЗвонка И ДатаНачала > &ДатаНачала");
	Запрос.УстановитьПараметр("ИдентификаторЗвонка", ИдентификаторЗвонка);
	Запрос.УстановитьПараметр("ДатаНачала", (ТекущаяДата() - 3600));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗвонка, Выборка);
		ДанныеЗвонка.Вставить("Контакт", ДанныеЗвонка.АбонентКонтакт);
		ДанныеЗвонка.Вставить("ВходящийЗвонок", ДанныеЗвонка.Входящий);
		ДанныеЗвонка.Вставить("НовыйЗвонок", ДанныеЗвонка.Звонок);
		
		МассивЗвонящих = Новый Массив();
		МассивЗвонящих.Добавить(ДанныеЗвонка.АбонентКонтакт);
		ДанныеЗвонка.Вставить("МассивЗвонящих", МассивЗвонящих);
						
		Если ОчиститьДанные Тогда
			НаборЗаписей = РегистрыСведений.сфпТекущиеЗвонки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
			НаборЗаписей.Записать();
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗЛИЧНЫЕ Пользователь
			|ИЗ РегистрСведений.сфпТекущиеЗвонки
			|ГДЕ Звонок = &Звонок");
			Запрос.УстановитьПараметр("Звонок", ДанныеЗвонка.Звонок);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.сфпТекущиеЗвонки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗвонка.АбонентКонтакт) Тогда
		ДанныеЗвонка.ПредставлениеАбонента = Строка(ДанныеЗвонка.АбонентКонтакт);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Звонок) И ЗначениеЗаполнено(ДанныеЗвонка.ИдентификаторЗвонка) Тогда
		ДанныеЗвонка.Звонок = НайтиТелефонныйЗвонокПоДаннымЗвонка(,, ДанныеЗвонка.ИдентификаторЗвонка);
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ЗначениеЗаполнено(ДанныеЗвонка.Звонок) Тогда
		ЗвонокОбъект = ДанныеЗвонка.Звонок.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(ЗвонокОбъект.ВзаимодействиеОснование) Тогда
			Попытка
				Если ЗначениеЗаполнено(ДанныеЗаполнения.Основание) Тогда
					Если ЗвонокОбъект.Метаданные().Реквизиты.ВзаимодействиеОснование.Тип.СодержитТип(ТипЗнч(ДанныеЗаполнения.Основание)) Тогда
						ЗвонокОбъект.ВзаимодействиеОснование = ДанныеЗаполнения.Основание;
						ЗвонокОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
			Исключение КонецПопытки;	
		КонецЕсли;
	КонецЕсли;
	
	сфпОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеЗвонка, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеСоответствияСтрокой(Соответствие) Экспорт
	
	Строка = "";
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если ЗначениеЗаполнено(Строка) Тогда
			Строка = Строка + Символы.ПС;
		КонецЕсли;
		Строка = Строка + КлючИЗначение.Ключ + ":" + КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат Строка
	
КонецФункции

Функция ИспользуемаяВерсияСофтФона() Экспорт
	
	ВерсияСофтФон = Константы.сфпИспользуемаяВерсияСофтФон.Получить();
	Если НЕ ЗначениеЗаполнено(ВерсияСофтФон) Тогда
		ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотПроф;
	КонецЕсли;

	Возврат ВерсияСофтФон;

КонецФункции

Процедура ОбновитьКонтактыПанелиЗвонка(ЭтаФорма) Экспорт
	
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ
	//|	ТелефоннаяКнига, Абонент, Владелец, НомерТелефона, Представление
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		ВЫБОР КОГДА ТелефоннаяКнига = ЗНАЧЕНИЕ(Справочник.сфпТелефонныеКниги.ПустаяСсылка) ТОГДА ""АТС"" ИНАЧЕ ТелефоннаяКнига.Наименование КОНЕЦ КАК ТелефоннаяКнига,
	//|		Абонент КАК Абонент,
	//|		"""" КАК Владелец,
	//|		ВЫБОР КОГДА ТелефоннаяКнига = ЗНАЧЕНИЕ(Справочник.сфпТелефонныеКниги.ПустаяСсылка) ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК Порядок,
	//|		ВЫБОР КОГДА ТелефоннаяКнига = ЗНАЧЕНИЕ(Справочник.сфпТелефонныеКниги.ПустаяСсылка) ТОГДА Абоненты.ВнутреннийНомер ИНАЧЕ КИ.НомерТелефона КОНЕЦ КАК НомерТелефона,
	//|		ВЫБОР КОГДА ТелефоннаяКнига = ЗНАЧЕНИЕ(Справочник.сфпТелефонныеКниги.ПустаяСсылка) ТОГДА Абоненты.ВнутреннийНомер ИНАЧЕ КИ.Представление КОНЕЦ КАК Представление
	//|	 ИЗ
	//|	 	РегистрСведений.сфпАбонентыТелефонныхКниг КАК Абоненты
	//|	 	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КИ
	//|	 	ПО КИ.Ссылка = Абоненты.Абонент
	//|	 	И КИ.Вид = Абоненты.ВидТелефона
	//|	
	//|	 ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	 ВЫБРАТЬ
	//|		""Клиенты"" КАК ТелефоннаяКнига,
	//|		Объект,
	//|		Объект.Владелец,
	//|		3,
	//|		НомерТелефона,
	//|		Представление
	//|	 ИЗ
	//|		РегистрСведений.сфпНомераТелефоновДляПоиска) КАК Подзапрос
	//|УПОРЯДОЧИТЬ ПО
	//|	Порядок,
	//|	ТелефоннаяКнига,
	//|	Абонент	
	//|ИТОГИ ПО
	//|	ТелефоннаяКнига
	//|АВТОУПОРЯДОЧИВАНИЕ");
	//
	//СтрокиДерева = ЭтаФорма.Контакты.ПолучитьЭлементы();
	//
	//ВыборкаКниг = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаКниг.Следующий() Цикл
	//	СтрокаДерева = СтрокиДерева.Добавить();
	//	СтрокаДерева.КнигаКонтакт = ВыборкаКниг.ТелефоннаяКнига;
	//	
	//	СтрокиАбонентов = СтрокаДерева.ПолучитьЭлементы();
	//	
	//	Выборка = ВыборкаКниг.Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		НоваяСтрока = СтрокиАбонентов.Добавить();
	//		НоваяСтрока.КнигаКонтакт = Выборка.Абонент;
	//		НоваяСтрока.Клиент = Выборка.Владелец;
	//		НоваяСтрока.ВнутреннийНомер = Выборка.ВнутреннийНомер;
	//		НоваяСтрока.Номер = Выборка.Представление;
	//	КонецЦикла;
	//КонецЦикла;

КонецПроцедуры

Функция ПредставлениеОшибкиОблачнойАТС(Ошибка) Экспорт
	
	Если Ошибка = "НеЗаполненыНастройкиПользователя" ИЛИ Ошибка = "НеЗаполненВнутреннийНомерПользователя" Тогда
		Возврат НСтр("en=""You must specify the user's extension number to the PBX."";ru='Необходимо указать внутренний номер пользователя АТС.'");
		
	ИначеЕсли Ошибка = "НеЗаполненНомерИсходящегоЗвонкаПользователя" Тогда
		Возврат НСтр("ru='Необходимо указать номер исходящего звонка в настройках интеграции.'");
		
	ИначеЕсли Ошибка = "НеЗаполненАдресАТС" Тогда
		Возврат НСтр("en='Not filled the address of your PBX in the integration settings.';ru='Не заполнен адрес вашей АТС в настройках интеграции.'");
		
	ИначеЕсли Ошибка = "НекорректныйВнутреннийНомерПользователя" Тогда
		Возврат НСтр("ru='Указан некорректный внутренний номер пользователя телефонии.'");
		
	ИначеЕсли Ошибка = "НеЗаполненыНастройкиИнтеграции" Тогда
		Возврат НСтр("en='Not full set up integration with selected PBX.';ru='Не заполнены настройки интеграции с выбранной АТС.'");
		
	ИначеЕсли Ошибка = "АккаунтЗаблокирован" Тогда
		Возврат НСтр("en='Account is blocked.';ru='Аккаунт заблокирован.'");	
		
	Иначе
		Возврат Ошибка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеПредставленияКонтакта(Контакт, УникальныйИдентификатор) Экспорт
	
	СтруктураДанных = Новый Структура("ВладелецКонтакта,Аватар", Неопределено, "");
	
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Если Контакт.Метаданные().Владельцы.Количество() > 0 Тогда
			СтруктураДанных.ВладелецКонтакта = Контакт.Владелец;
		КонецЕсли;
		
		АдресКартинки = "";
		Если (Контакт.Метаданные().Реквизиты.Найти("CRM_Фотография") <> Неопределено) И ЗначениеЗаполнено(Контакт.CRM_Фотография) Тогда
			МодульРаботаСФайлами = сфпОбщегоНазначения.сфпОбщийМодуль("РаботаСФайлами");
			АдресКартинки = МодульРаботаСФайлами.ДанныеФайла(Контакт.CRM_Фотография, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		КонецЕсли;
				
		СтруктураДанных.Аватар = АдресКартинки;
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ПодключитьОбновлениеПодпискиНаСобытияОблачнойАТС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтключитьОбновлениеПодпискиНаСобытияОблачнойАТС();
	
	Задание = РегламентныеЗадания.НайтиПредопределенное("сфпОбновлениеПодпискиНаСобытияОблачнойАТС");
	Задание.ИмяПользователя = сфпСофтФонПроСервер.СлужебныйПользовательТелефонииЛогин();
	Задание.Использование = Истина;
	Задание.КоличествоПовторовПриАварийномЗавершении = 0;
	Задание.ИнтервалПовтораПриАварийномЗавершении = 0;
	
	Расписание = Новый РасписаниеРегламентногоЗадания();
	Расписание.ПериодНедель = 1;
	Расписание.ПериодПовтораВТечениеДня = 3540;
	Расписание.ПериодПовтораДней = 1;
	Задание.Расписание = Расписание;

	Задание.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ОтключитьОбновлениеПодпискиНаСобытияОблачнойАТС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗадания.НайтиПредопределенное("сфпОбновлениеПодпискиНаСобытияОблачнойАТС");
	Задание.Использование = Ложь;
	Задание.Записать();

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура сфпОбновлениеПодпискиНаСобытияОблачнойАТС() Экспорт
	
	ВыполнятьОбновление = Ложь;
	
	ИспользоватьОблачнуюТелефонию = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользоватьОблачнуюТелефонию");
	Если ИспользоватьОблачнуюТелефонию Тогда
		ИспользуемаяАТС = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользуемаяАТС");
		Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
			ВыполнятьОбновление = Истина;	
		КонецЕсли;	
	КонецЕсли;
	
	Если ВыполнятьОбновление Тогда
		РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПолучитьДанныеПодпискиНаСобытия");
		Если РезультатЗапроса.Успешно Тогда
			json = Новый ЧтениеJSON();
			json.УстановитьСтроку(РезультатЗапроса.Результат);
			jsonСтруктура = ПрочитатьJSON(json);
			json.Закрыть();
			
			Если jsonСтруктура.Свойство("expires") И jsonСтруктура.expires > 3000 Тогда
				Возврат;	
			КонецЕсли;
			
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПодпискаНаСобытия");
			Если РезультатЗапроса.Успешно Тогда
				json = Новый ЧтениеJSON();
				json.УстановитьСтроку(РезультатЗапроса.Результат);
				jsonСтруктура = ПрочитатьJSON(json);
				json.Закрыть();
				
				Если jsonСтруктура.Свойство("subscriptionId") Тогда
					сфпСофтФонПроСервер.УстановитьНастройкуТелефонии("КлючПодпискиНаСобытия", jsonСтруктура.subscriptionId);
					
					ПодключитьОбновлениеПодпискиНаСобытияОблачнойАТС();
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;
		
	Иначе
		ОтключитьОбновлениеПодпискиНаСобытияОблачнойАТС();
	КонецЕсли;	
	
КонецПроцедуры

Функция СтруктураJSON(СтрокаJSON) Экспорт
	
	СтруктураJSON = Новый Структура();
	
	Если ЗначениеЗаполнено(СтрокаJSON) Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	КонецЕсли;	
	
	Возврат СтруктураJSON;			

КонецФункции

Процедура СохранитьНастройкиПубликацииСервисовТелефонии(АдресСервераПубликации, АдресРесурсаПубликации) Экспорт
	
	Если Прав(АдресСервераПубликации, 1) = "/" Тогда
		АдресСервераПубликации = Лев(АдресСервераПубликации, СтрДлина(АдресСервераПубликации) - 1);
	КонецЕсли;
	Если Лев(АдресРесурсаПубликации, 1) = "/" Тогда
		АдресРесурсаПубликации = Сред(АдресРесурсаПубликации, 2);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресСервераПубликации) И НЕ ЗначениеЗаполнено(АдресРесурсаПубликации) Тогда
		Настройки = Неопределено;
		
	Иначе
		Настройки = Новый Структура();
		Настройки.Вставить("АдресСервераОсновнойПубликации", АдресСервераПубликации);
		Настройки.Вставить("АдресРесурсаОсновнойПубликации", АдресРесурсаПубликации);
		
		//Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		//	Шаблон = "[АдресСервера]/[АдресПубликации]/[ОбластьДанных]/hs/[КорневойURLСервиса]";
		//Иначе
			Шаблон = "[АдресСервера]/[АдресПубликации]/hs/[КорневойURLСервиса]";
		//КонецЕсли;
		
		ПараметрыСтроки = Новый Структура();
		Если ЗначениеЗаполнено(АдресСервераПубликации) Тогда
			ПараметрыСтроки.Вставить("АдресСервера", АдресСервераПубликации);
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресРесурсаПубликации) Тогда
			ПараметрыСтроки.Вставить("АдресПубликации", АдресРесурсаПубликации);
		КонецЕсли;
		
		НастройкиПубликации = Новый Соответствие();
		
		КорневойURLСервиса = сфпСофтФонПроСервер.КорневойURLСервисаОсновнойПубликации(Перечисления.сфпДоступныеАТС.СофтФонWebModule);
		ПараметрыСтроки.Вставить("КорневойURLСервиса", КорневойURLСервиса);
		ПолныйПутьПубликации = сфпОбщегоНазначенияКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыСтроки);
	    НастройкиПубликации.Вставить(Перечисления.сфпДоступныеАТС.СофтФонWebModule, Новый Структура("АдресРесурсаОсновнойПубликации", ПолныйПутьПубликации));
		
		КорневойURLСервиса = сфпСофтФонПроСервер.КорневойURLСервисаОсновнойПубликации(Перечисления.сфпДоступныеАТС.MangoOffice);
		ПараметрыСтроки.Вставить("КорневойURLСервиса", КорневойURLСервиса);
		ПолныйПутьПубликации = сфпОбщегоНазначенияКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыСтроки);
		НастройкиПубликации.Вставить(Перечисления.сфпДоступныеАТС.MangoOffice, Новый Структура("АдресРесурсаОсновнойПубликации", ПолныйПутьПубликации));
		
		КорневойURLСервиса = сфпСофтФонПроСервер.КорневойURLСервисаОсновнойПубликации(Перечисления.сфпДоступныеАТС.Яндекс);
		ПараметрыСтроки.Вставить("КорневойURLСервиса", КорневойURLСервиса);
		ПолныйПутьПубликации = сфпОбщегоНазначенияКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыСтроки);
		НастройкиПубликации.Вставить(Перечисления.сфпДоступныеАТС.Яндекс, Новый Структура("АдресРесурсаОсновнойПубликации", ПолныйПутьПубликации));
		
		КорневойURLСервиса = сфпСофтФонПроСервер.КорневойURLСервисаОсновнойПубликации(Перечисления.сфпДоступныеАТС.Билайн);
		ПараметрыСтроки.Вставить("КорневойURLСервиса", КорневойURLСервиса);
		ПолныйПутьПубликации = сфпОбщегоНазначенияКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыСтроки);
		НастройкиПубликации.Вставить(Перечисления.сфпДоступныеАТС.Билайн, Новый Структура("АдресРесурсаОсновнойПубликации", ПолныйПутьПубликации));
		
		КорневойURLСервиса = сфпСофтФонПроСервер.КорневойURLСервисаОсновнойПубликации(Перечисления.сфпДоступныеАТС.МТТ);
		ПараметрыСтроки.Вставить("КорневойURLСервиса", КорневойURLСервиса);
		ПолныйПутьПубликации = сфпОбщегоНазначенияКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыСтроки);
		НастройкиПубликации.Вставить(Перечисления.сфпДоступныеАТС.МТТ, Новый Структура("АдресРесурсаОсновнойПубликации", ПолныйПутьПубликации));

		КорневойURLСервиса = сфпСофтФонПроСервер.КорневойURLСервисаОсновнойПубликации(Перечисления.сфпДоступныеАТС.УниверсальныйItoolabs);
		ПараметрыСтроки.Вставить("КорневойURLСервиса", КорневойURLСервиса);
		ПолныйПутьПубликации = сфпОбщегоНазначенияКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыСтроки);
		НастройкиПубликации.Вставить(Перечисления.сфпДоступныеАТС.УниверсальныйItoolabs, Новый Структура("АдресРесурсаОсновнойПубликации", ПолныйПутьПубликации));

		Настройки.Вставить("НастройкиПубликации", НастройкиПубликации);		
	КонецЕсли;
	
	Константы.сфпОбщиеНастройкиТелефонии.Установить(ЗначениеВСтрокуВнутр(Настройки));
	
КонецПроцедуры


/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С НОМЕРОМ ТЕЛЕФОНА

// Функция возвращает номер телефона в котором убраны все символы, кроме цифр
//
// Параметры:
//	НомерТелефона	- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Очищенный номер телефона
//
Функция сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона, ЭтоВнутреннийНомер = Неопределено) Экспорт
	
	ПозицияРазделителя = Найти(НомерТелефона, "@");
	Если ПозицияРазделителя > 0 Тогда
		НомерТелефона = Лев(НомерТелефона, ПозицияРазделителя - 1); 	
	КонецЕсли;	
	
	СтрокаЦифр = "0123456789";
	
	ОчищенныйНомер = "";
	ДлинаНомера = СтрДлина(НомерТелефона);
	Для НомерСимвола = 1 По ДлинаНомера Цикл
		ТекущийСимвол = Сред(НомерТелефона, НомерСимвола, 1);
		Если Найти(СтрокаЦифр, ТекущийСимвол) > 0 Тогда
			ОчищенныйНомер = ОчищенныйНомер + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	ДлинаВнутреннихНомеров = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпМаксимальнаяДлинаВнутреннихНомеров");
	
	Если ЭтоВнутреннийНомер = Неопределено Тогда
		ЭтоВнутреннийНомер = Ложь;
				
		Если СтрДлина(ОчищенныйНомер) <= ДлинаВнутреннихНомеров Тогда
			ЭтоВнутреннийНомер = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Убираем из начала полученного внутреннего номера лидирующие нули, если такие есть
	Если ЭтоВнутреннийНомер Тогда
		ЛевыйСимвол = Лев(ОчищенныйНомер, 1);
		Пока ЛевыйСимвол = "0" Цикл
			Если СтрДлина(ОчищенныйНомер) > 1 Тогда
				ОчищенныйНомер = Сред(ОчищенныйНомер, 2);
				ЛевыйСимвол = Лев(ОчищенныйНомер, 1);
				
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ОчищенныйНомер;

КонецФункции // сфпУбратьИзНомераТелефонаВсеПрефиксы()

// Функция убирает из номера все префиксы выхода на линию
//
// Параметры:
//	НомерТелефона - Строка	- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Номер телефона без префиксов
//
Функция сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(НомерТелефона) Экспорт
	НомерТелефона = сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
	Если СтрДлина(НомерТелефона) > 10 Тогда
		ПрефиксВыхода = Константы.сфпПрефиксВыходаВГород.Получить();
		Если Найти(НомерТелефона, ПрефиксВыхода) = 1 Тогда
			НомерТелефона = Сред(НомерТелефона, СтрДлина(ПрефиксВыхода) + 1);
		КонецЕсли;	
		Если СтрДлина(НомерТелефона) > 10 Тогда
			ПрефиксВыхода = Константы.сфпПрефиксВыходаВМежгород.Получить();
			Если Найти(НомерТелефона, ПрефиксВыхода) = 1 Тогда
				НомерТелефона = Сред(НомерТелефона, СтрДлина(ПрефиксВыхода) + 1);
			КонецЕсли;	
		КонецЕсли;	
		Если СтрДлина(НомерТелефона) > 10 Тогда
			ПрефиксВыхода = Константы.сфпПрефиксВыходаНаМеждународную.Получить();
			Если Найти(НомерТелефона, ПрефиксВыхода) = 1 Тогда
				НомерТелефона = Сред(НомерТелефона, СтрДлина(ПрефиксВыхода) + 1);
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли СтрДлина(НомерТелефона) < 10 Тогда
		сфпПараметрыСервера	= сфпСофтФонПроСервер.сфпПараметрыСервера();
		КодГорода 	= сфпПараметрыСервера.КодГорода;
		Если НЕ ПустаяСтрока(КодГорода) Тогда
			Если СтрДлина(НомерТелефона) > (10 - СтрДлина(КодГорода)) Тогда
				ПрефиксВыхода = Константы.сфпПрефиксВыходаВГород.Получить();
				Если Найти(НомерТелефона, ПрефиксВыхода) = 1 Тогда
					НомерТелефона = Сред(НомерТелефона, СтрДлина(ПрефиксВыхода) + 1);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	Возврат НомерТелефона;
КонецФункции // сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию()

// Функция по полю "Представление" заполняет структуры полей для номера телефона
//
// Параметры:
//	Представление	- Строка	- Представление номера телефона
//
// Возвращаемое значение:
//	Структура	- Структура телефонного номера
//
Функция сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Представление, сфпПараметрыСервера = Неопределено) Экспорт
	
	КодСтраны = "";
	КодГорода = "";
	НомерТелефона = "";
	Добавочный = "";
	Комментарий = "";
	
	ТекСтр = СокрЛП(Представление);
	
	// Вырежем добавочный номер с комментарием
	ПозДоб = Найти(ВРЕГ(ТекСтр), "ДОБ.");
	Если ПозДоб = 0 Тогда
		ПозДоб = Найти(ВРЕГ(ТекСтр), "EXT.");
	КонецЕсли;
	Если ПозДоб > 0 Тогда
		ДобавочныйСКомментарием = СокрЛП(Сред(ТекСтр, ПозДоб + 4));
		ТекСтр = СокрЛП(Лев(ТекСтр, ПозДоб - 1));
		Если Прав(ТекСтр, 1) = "," Тогда
			ТекСтр = Лев(ТекСтр, СтрДлина(ТекСтр) - 1);
		КонецЕсли;
		
		ПозДоб = Найти(ВРЕГ(ДобавочныйСКомментарием), ", ");
		Если ПозДоб > 0 Тогда
			Добавочный	= СокрЛП(Лев(ДобавочныйСКомментарием, ПозДоб - 1));
			Комментарий	= СокрЛП(Сред(ДобавочныйСКомментарием, ПозДоб + 2));
			
		Иначе
			Добавочный = ДобавочныйСКомментарием;
		КонецЕсли;
	КонецЕсли;
	
	// Вырежем код города
	Поз = Найти(ТекСтр, "(");
	Если Поз > 0 Тогда
		КодСтраны = СокрЛП(Лев(ТекСтр, Поз - 1));
		ТекСтр = СокрЛП(Сред(ТекСтр, Поз + 1));
		Поз = Найти(ТекСтр, ")");
		Если Поз > 0 Тогда
			КодГорода = СокрЛП(Лев(ТекСтр, Поз - 1));
			ТекСтр = СокрЛП(Сред(ТекСтр, Поз + 1));
		КонецЕсли;
	КонецЕсли;
	
	Поз = Найти(текСтр, ", ");
	// Если Добавочного номера нет - ориентируемся по номеру телефона и комментарию
	Если ПозДоб = 0 И Поз > 0 Тогда
		// Вырежем комментарий
		НомерТелефона = СокрЛП(Лев(ТекСтр, Поз - 1));
		Комментарий = СокрЛП(Сред(ТекСтр, Поз + 2));
	
	Иначе
		// Все оставшееся это номер
		НомерТелефона = ТекСтр;
	КонецЕсли;
	
	// Удаляем лишние символы из номера телефона
	НомерТелефона = сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
	
	Если сфпПараметрыСервера = Неопределено Тогда
		сфпПараметрыСервера	= сфпПараметрыСервера();	
	КонецЕсли;
	
	СофтФонКодСтраны = сфпПараметрыСервера.КодСтраны;
	
	Если НЕ ЗначениеЗаполнено(СофтФонКодСтраны) Тогда
		СофтФонКодСтраны = "+7";
	КонецЕсли;
	
	Если СофтФонКодСтраны = "+84" ИЛИ СофтФонКодСтраны = "84" Тогда
		Если Лев(НомерТелефона, 1) = "0" Тогда
			НомерТелефона = "84" + Сред(НомерТелефона, 2);
		КонецЕсли;
	КонецЕсли;
	
	ПоследниеЦифрыТелефонногоНомера = сфпПараметрыСервера.ПоследниеЦифрыТелефонногоНомера;
	ПоследниеЦифрыТелефонногоНомера = ?(ПоследниеЦифрыТелефонногоНомера = 0, 10, ПоследниеЦифрыТелефонногоНомера);
	
	// Если номер телефона не разобран, то заново разбираем его
	ДлинаНомера = СтрДлина(НомерТелефона);
    Если СтрДлина(КодГорода) + ДлинаНомера > сфпПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров Тогда
		Если СофтФонКодСтраны = "+7" И (Найти(сфпПараметрыСервера.КодГорода, "499") > 0 ИЛИ Найти(сфпПараметрыСервера.КодГорода, "495") > 0) Тогда		
			СофтФонКодГорода = "";

		Иначе			
			СофтФонКодГорода = сфпПараметрыСервера.КодГорода;
		КонецЕсли;
		
		// Выделяем код страны
		Если СофтФонКодСтраны = "+84" ИЛИ СофтФонКодСтраны = "84" Тогда
			Если ДлинаНомера > ПоследниеЦифрыТелефонногоНомера Тогда
				Если Лев(НомерТелефона, 2) <> "84" Тогда
					// Номер другой страны
					СофтФонКодСтраны = "";
				КонецЕсли;
				
				Если Лев(НомерТелефона, 2) = "84" Тогда
					НомерТелефона = Сред(НомерТелефона, 3);
				КонецЕсли;
			КонецЕсли;

		Иначе
			Если ДлинаНомера > ПоследниеЦифрыТелефонногоНомера Тогда
				КодСтраны = Лев(НомерТелефона, ДлинаНомера - ПоследниеЦифрыТелефонногоНомера);
				НомерТелефона = Сред(НомерТелефона, ДлинаНомера - (ПоследниеЦифрыТелефонногоНомера - 1));
				Если КодСтраны = "7" ИЛИ КодСтраны = "8" ИЛИ КодСтраны = "+8" Тогда
					КодСтраны = "+7";

				ИначеЕсли НЕ Найти(КодСтраны, "+") = 1 Тогда
					КодСтраны = "+" + КодСтраны;
				КонецЕсли;
			КонецЕсли;
		
			// Выделяем код города
			ДлинаНомера = СтрДлина(НомерТелефона);
			Если НЕ ПустаяСтрока(СофтФонКодГорода) И (ПустаяСтрока(КодСтраны) ИЛИ (КодСтраны = СофтФонКодСтраны)) Тогда
				Если ДлинаНомера = ПоследниеЦифрыТелефонногоНомера Тогда
					Если Найти(НомерТелефона, СофтФонКодГорода) = 1 Тогда
						КодСтраны = СофтФонКодСтраны;
						КодГорода = СофтФонКодГорода;
						НомерТелефона = Сред(НомерТелефона, СтрДлина(СофтФонКодГорода) + 1);
						
					Иначе
						КодГорода = Лев(НомерТелефона, 3);
						НомерТелефона = Сред(НомерТелефона, 4);
					КонецЕсли;	
					
				ИначеЕсли (ДлинаНомера + СтрДлина(СофтФонКодГорода)) = ПоследниеЦифрыТелефонногоНомера Тогда
					Если НЕ ЗначениеЗаполнено(КодСтраны) Тогда
						КодСтраны = СофтФонКодСтраны;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(КодГорода) Тогда
						КодГорода = СофтФонКодГорода;
					КонецЕсли;					
				КонецЕсли;
				
			ИначеЕсли ДлинаНомера = ПоследниеЦифрыТелефонногоНомера Тогда
				КодГорода = Лев(НомерТелефона, 3);
				НомерТелефона = Сред(НомерТелефона, 4);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДлинаНомера < ПоследниеЦифрыТелефонногоНомера И СофтФонКодСтраны <> "+84" И СофтФонКодСтраны <> "84" Тогда
		СофтФонКодСтраны = "";
	КонецЕсли;
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("КодСтраны", ?(ЗначениеЗаполнено(КодСтраны), КодСтраны, СофтФонКодСтраны));
	СтруктураПолей.Вставить("КодГорода", КодГорода);
	СтруктураПолей.Вставить("НомерТелефона", НомерТелефона);
	СтруктураПолей.Вставить("Добавочный", Добавочный);
	СтруктураПолей.Вставить("Комментарий", Комментарий);
	Возврат СтруктураПолей;

КонецФункции // сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон()

// Функция разбирает переданную структуру номера телефона и возвращает строку номера, которую будет набирать АТС.
//
// Параметры:
//	СтруктураНомера	- Структура	- Структура телефонного номера.
//
// Возвращаемое значение:
//	Строка	- Строка для набора АТС.
//
Функция сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера) Экспорт
	
	сфпПараметрыСервера	= сфпПараметрыСервера();
	Если ПустаяСтрока(СтруктураНомера.НомерТелефона) Тогда
		Если ПустаяСтрока(СтруктураНомера.Добавочный) Тогда
			// Номера нет.
			РезультатНомер = "";

		Иначе
			// Внутренний номер.
			РезультатНомер = СтруктураНомера.Добавочный;
		КонецЕсли;			
		
	// Проверяем длину номеру вместе с длиной кода города, т.к. в ряде компаний внутренний. 
	// Номер может быть достаточно длинным, до 9 символов.
	// У внутренних же номеров код города отсутствует.

	ИначеЕсли СтрДлина(СтруктураНомера.НомерТелефона)+СтрДлина(СтруктураНомера.КодГорода) > сфпПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров Тогда
		КодСтраныНомера	= СтруктураНомера.КодСтраны;
		КодСтраныНомера	= СтрЗаменить(КодСтраныНомера, "+", "");
		КодСтраныНомера	= СокрЛП(?(КодСтраныНомера = "8", "7", КодСтраныНомера));
		
		КодСтраныПользователя = сфпПараметрыСервера.КодСтраны;
		КодСтраныПользователя = СтрЗаменить(КодСтраныПользователя, "+", "");
		КодСтраныПользователя = СокрЛП(?(КодСтраныПользователя = "8", "7", КодСтраныПользователя));
		
		Если ПустаяСтрока(КодСтраныНомера) Тогда
			// Номер нашей страны.
			РезультатНомер = СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
		//ИначеЕсли ПустаяСтрока(КодСтраныПользователя) Тогда
		//	// Номер нашей страны.
		//	РезультатНомер = СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
		//ИначеЕсли (КодСтраныНомера	= КодСтраныПользователя) Тогда
		//	// Номер нашей страны.
		//	РезультатНомер = СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
		Иначе
			// Номер другой страны.
			РезультатНомер = СтруктураНомера.КодСтраны + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
		КонецЕсли;

	Иначе
		// Внутренний номер.
		РезультатНомер = СтруктураНомера.НомерТелефона;
	КонецЕсли;	
	
	Возврат РезультатНомер;

КонецФункции // ПреобразоватьНомерСУчетомПрефиксов()

Функция ПроверитьНомерТелефонаКонтакта(НомерКонтакта) Экспорт
	
	НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерКонтакта);
	
	ПараметрыСервера = сфпСофтФонПроСерверПовтИсп.сфпПараметрыСервера();
	ДлинаВнутреннегоНомера = ПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров;
	ДлинаНомераТелефона = ПараметрыСервера.ПоследниеЦифрыТелефонногоНомера;
	КодГорода = ПараметрыСервера.КодГорода;
				
	Если СтрДлина(НомерТелефона) < ДлинаНомераТелефона И СтрДлина(НомерТелефона) > ДлинаВнутреннегоНомера И ЗначениеЗаполнено(КодГорода) Тогда
		Если СтрДлина(КодГорода + НомерТелефона) = ДлинаНомераТелефона Тогда
			НомерТелефона = "" + КодГорода + НомерТелефона;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции	//	ПроверитьНомерТелефонаКонтакта()


/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Процедура-обработчик события "ПриЗаписи" объекта контактной информации
//
// Параметры:
//	Источник 	- СправочникОбъект	- Контакт, у которого записывается контактная информация
//	Отказ		- Булево			- Признак отмены
//
Процедура сфпПриЗаписиОбъектаКонтактнойИнформации(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	сфпЗаполнитьРегистрПоискаПоНомерам(Источник, Истина, Истина);
	
	Если сфпРеквизитСуществует(Источник, "КонтактноеЛицо") Тогда
		Если ЗначениеЗаполнено(Источник.КонтактноеЛицо) Тогда
			сфпЗаполнитьРегистрПоискаПоНомерам(Источник.КонтактноеЛицо, Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// АльфаАвто
	// Удалена очистка регистра прав и настроек для недействительного пользователя
	
КонецПроцедуры // сфпПриЗаписиОбъектаКонтактнойИнформации()

// Функция разбивает номер телефона на части для полнотекстового поиска
//
// Параметры:
//  СтрокаТелефона 	- Строка - Разбиваемая строка номера телефона
//
// Возвращаемое значение:
//	СтрокаРазбивки	- Строка, состоящая из строк номера телефона различной длины, взятых справа
//
Функция сфпРазбитьНомерТелефонаДляПолнотекстовогоПоиска(СтрокаТелефона) Экспорт
	ДлинаНомера = СтрДлина(СтрокаТелефона);
	РезСтрока	= "";
	Для КоличествоСимволов = 4 По ДлинаНомера Цикл
		РезСтрока = РезСтрока + " " + Прав(СтрокаТелефона, КоличествоСимволов);
	КонецЦикла;	
	Возврат СокрЛП(РезСтрока);
КонецФункции // сфпРазбитьНомерТелефонаДляПолнотекстовогоПоиска()	

// Процедура добавляет записи в регистр поиска по номерам
//
// Параметры:
//	Объект			- СправочникСсылка	- Владелец телефона
//	ПроверкаНаКИ	- Булево			- Признак проверки наличия ТЧ "Контактная информация"
//
Процедура сфпЗаполнитьРегистрПоискаПоНомерам(Объект, ПроверкаНаКИ = Истина, ЗаписьМаршрутизации = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекМетаданные = Объект.Метаданные();
	
	ВыборкаКонтактов = Неопределено;
	Если ТекМетаданные.Имя = "КонтактныеЛица" Тогда
		Если Метаданные.РегистрыСведений.Найти("СвязиКонтрагентКонтакт") <> Неопределено Тогда
			ЗапросКонтрагентов = Новый Запрос("
			|ВЫБРАТЬ Контакт, Контрагент.Наименование КАК Наименование
			|ИЗ РегистрСведений.СвязиКонтрагентКонтакт
			|ГДЕ Контакт = &Контакт И НЕ СвязьНедействительна И Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|УПОРЯДОЧИТЬ ПО Контакт, Порядок
			|ИТОГИ ПО Контакт
			|АВТОУПОРЯДОЧИВАНИЕ");
			ЗапросКонтрагентов.УстановитьПараметр("Контакт", Объект.Ссылка);
			
			ВыборкаКонтактов = ЗапросКонтрагентов.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;
	КонецЕсли;
	
	ИмяРеквизитаОсновнойТелефон = Неопределено;
	
	ТаблицаКонтактнаяИнформация = Неопределено;
	Если ТекМетаданные.ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
		ТаблицаКонтактнаяИнформация = Объект.КонтактнаяИнформация;
		Если ТекМетаданные.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("CRM_ОсновнойДляСвязи") <> Неопределено Тогда
			ИмяРеквизитаОсновнойТелефон = "CRM_ОсновнойДляСвязи";
		КонецЕсли;

	ИначеЕсли ТекМетаданные.Имя = "Картотека" Тогда
		// Поддержка решения "1С:Медицина. Поликлиника"
		Если Метаданные.ОбщиеМодули.Найти("Регистратура") <> Неопределено Тогда
			МодульРегистратура = сфпОбщегоНазначения.сфпОбщийМодуль("Регистратура");
			ТаблицаКонтактнаяИнформация = МодульРегистратура.ПолучитьКонтактыПациента(Объект);
			ТаблицаКонтактнаяИнформация.Колонки.Добавить("НомерСтроки");
			Для НомерСтроки = 0 По ТаблицаКонтактнаяИнформация.Количество() - 1 Цикл
				ТаблицаКонтактнаяИнформация[НомерСтроки].НомерСтроки = НомерСтроки;	
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыСведений.Найти("КонтактнаяИнформация") <> Неопределено Тогда
		КонтактнаяИнформация = РегистрыСведений["КонтактнаяИнформация"].СоздатьНаборЗаписей();
		КонтактнаяИнформация.Отбор.Объект.Установить(Объект.Ссылка);
		КонтактнаяИнформация.Отбор.Тип.Установить(ПредопределенноеЗначение("Перечисление." + "ТипыКонтактнойИнформации" + ".Телефон"));
		КонтактнаяИнформация.Прочитать();
		
		ТаблицаКонтактнаяИнформация = КонтактнаяИнформация.Выгрузить(, "Тип,Вид,Представление,ЗначениеПоУмолчанию");
		ТаблицаКонтактнаяИнформация.Колонки.Добавить("НомерСтроки");
		Для НомерСтроки = 0 По ТаблицаКонтактнаяИнформация.Количество() - 1 Цикл
			ТаблицаКонтактнаяИнформация[НомерСтроки].НомерСтроки = НомерСтроки;	
		КонецЦикла;
		
		ИмяРеквизитаОсновнойТелефон = "ЗначениеПоУмолчанию";
	КонецЕсли;
	
	Если ПроверкаНаКИ И ТаблицаКонтактнаяИнформация = Неопределено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Объект.Ссылка;
	Если ТекМетаданные.Имя = "СменаКонтактнойИнформации" Тогда
		// Поддержка решения "1С:Медицина. Поликлиника"
		ОбъектСсылка = Объект.Пациент;	
	КонецЕсли;
		
	// Очистим все записи по объекту
	НаборЗаписей = РегистрыСведений.сфпНомераТелефоновДляПоиска.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписей.Прочитать();
	
	СтарыйНабор = НаборЗаписей.Выгрузить(, "НомерТелефона,Представление,ВнутреннийНомер");
	
	// Сохраняем пользователя для переключения звонков
	Если НаборЗаписей.Количество() = 0 Тогда
		сфпПользователь = Справочники.Пользователи.ПустаяСсылка();
		сфпВнутреннийНомер = "";
		
	Иначе	
		сфпПользователь = НаборЗаписей[0].Пользователь;
		сфпВнутреннийНомер = сфпТекущийВнутреннийНомер(НаборЗаписей[0].Пользователь);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(сфпПользователь) Тогда
		сфпВнутреннийНомер = "";
	КонецЕсли;

	// Очищаем набор записей
	НаборЗаписей.Очистить();
	
	// Заполняем набор записей заново
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимыеТипы = Новый Массив();
	ДопустимыеТипы.Добавить(Перечисления["ТипыКонтактнойИнформации"].Телефон);
	Если Метаданные.Перечисления["ТипыКонтактнойИнформации"].ЗначенияПеречисления.Найти("Факс") <> Неопределено Тогда
		ДопустимыеТипы.Добавить(Перечисления["ТипыКонтактнойИнформации"]["Факс"]);
	КонецЕсли;
	
	ПервыйТелефон = "";
	ПервыйТелефонПредставление = "";
	
	ОсновнойТелефон = "";
	ОсновнойТелефонПредставление = "";
		
	Для Каждого Контакт Из ТаблицаКонтактнаяИнформация Цикл
		Если ДопустимыеТипы.Найти(Контакт.Тип) <> Неопределено Тогда
		    СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт.Представление);
			НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
			Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект					= ОбъектСсылка;
			НоваяЗапись.Вид						= Контакт.Вид;
			НоваяЗапись.ПорядковыйНомер			= Контакт.НомерСтроки;
			НоваяЗапись.НомерТелефона 			= НомерТелефона;
			НоваяЗапись.Представление			= Контакт.Представление;
			НоваяЗапись.Пользователь			= сфпПользователь;
			НоваяЗапись.ВнутреннийНомер			= сфпВнутреннийНомер;
			НоваяЗапись.НомерТелефонаДляПоиска	= сфпРазбитьНомерТелефонаДляПолнотекстовогоПоиска(НомерТелефона);
			
			Если НЕ ЗначениеЗаполнено(ПервыйТелефон) Тогда
				ПервыйТелефон = НомерТелефона;
				ПервыйТелефонПредставление = Контакт.Представление;
			КонецЕсли;
			Если ИмяРеквизитаОсновнойТелефон <> Неопределено Тогда
				Если Контакт[ИмяРеквизитаОсновнойТелефон] Тогда
					ОсновнойТелефон = НомерТелефона;
					ОсновнойТелефонПредставление = Контакт.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
		НаборЗаписан = Истина;
	Исключение;
		НаборЗаписан = Ложь;
	КонецПопытки;	
	
	Если НаборЗаписан И ТекМетаданные.Имя <> "Партнеры" И ТекМетаданные.Имя <> "Организации" Тогда
		ТелефонКонтакта = "";
		ТелефонКонтактаПредставление = "";
				
		Если ЗначениеЗаполнено(ОсновнойТелефон) Тогда
			ТелефонКонтакта = ОсновнойТелефон;
			ТелефонКонтактаПредставление = ОсновнойТелефонПредставление;

		ИначеЕсли ЗначениеЗаполнено(ПервыйТелефон) Тогда
			ТелефонКонтакта = ПервыйТелефон;
			ТелефонКонтактаПредставление = ПервыйТелефонПредставление;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТелефонКонтакта) Тогда
			СтрокаВладельцев = "";
			Если ТекМетаданные.Имя = "КонтактныеЛица" И ВыборкаКонтактов <> Неопределено Тогда
				ВыборкаКонтактов.Сбросить();
				
				СтруктураПоиска = Новый Структура("Контакт", ОбъектСсылка);
				Если ВыборкаКонтактов.НайтиСледующий(СтруктураПоиска) Тогда
					ВыборкаКонтрагентов = ВыборкаКонтактов.Выбрать();
					Пока ВыборкаКонтрагентов.Следующий() Цикл
						СтрокаВладельцев = СтрокаВладельцев + ?(СтрокаВладельцев = "", "", "; ") + ВыборкаКонтрагентов.Наименование;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ЗаписатьМенеджер = Ложь;
			
			МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ОбъектСсылка;
			МенеджерЗаписи.ТелефоннаяКнига = Справочники.сфпТелефонныеКниги.ПустаяСсылка();
			МенеджерЗаписи.ИдентификаторАТС = "";
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Объект = ОбъектСсылка;
				МенеджерЗаписи.ТелефоннаяКнига = Справочники.сфпТелефонныеКниги.ПустаяСсылка();
				МенеджерЗаписи.ИдентификаторАТС = "";
				ЗаписатьМенеджер = Истина;
			КонецЕсли;
			Если МенеджерЗаписи.ОсновнойНомерТелефона <> ТелефонКонтакта Тогда
				МенеджерЗаписи.ОсновнойНомерТелефона = ТелефонКонтакта;
				МенеджерЗаписи.ОсновнойНомерТелефонаПредставление = ТелефонКонтактаПредставление;
				ЗаписатьМенеджер = Истина;
			КонецЕсли;
			Если МенеджерЗаписи.Владельцы <> СтрокаВладельцев Тогда
				МенеджерЗаписи.Владельцы = СтрокаВладельцев;
				ЗаписатьМенеджер = Истина;
			КонецЕсли;
			Если ЗаписатьМенеджер Тогда
				МенеджерЗаписи.Записать();
			КонецЕсли;
		Иначе // АльфаАвто
			// Если нет номеров у контакта - очистим запись
			
			МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ОбъектСсылка;
			МенеджерЗаписи.ТелефоннаяКнига = Справочники.сфпТелефонныеКниги.ПустаяСсылка();
			МенеджерЗаписи.ИдентификаторАТС = "";
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
			//Конец АльфаАвто
		КонецЕсли;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь); 
	
	Если НЕ НаборЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаписьМаршрутизации И сфпИспользоватьМаршрутизацию() Тогда
		Если НЕ сфпЗаполненыНастройкиСервера() Тогда
			Возврат;
		КонецЕсли;
		
		НовыйНабор = НаборЗаписей.Выгрузить(, "НомерТелефона,Представление,ВнутреннийНомер");
		СписокМаршрутизации	= сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
		сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);	
	КонецЕсли;
	
КонецПроцедуры // сфпЗаполнитьРегистрПоискаПоНомерам()

// Процедура добавляет записи в регистр поиска по номерам
//
// Параметры:
//	ТипОбъекта	- Строка - Имя справочника
//
Процедура сфпЗаполнитьРегистрПоискаНомеровПоТипуОбъекта(ТипОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
	
	ТекМетаданные = Метаданные.Справочники[ТипОбъекта];
	ЕстьПользовательДляПереключенияЗвонков = (ТекМетаданные.Реквизиты.Найти("сфпПользовательДляПереключенияЗвонков") <> Неопределено);
	
	ВыборкаКонтактов = Неопределено;
	Если ТипОбъекта = "КонтактныеЛица" Тогда
		Если Метаданные.РегистрыСведений.Найти("СвязиКонтрагентКонтакт") <> Неопределено Тогда
			ЗапросКонтрагентов = Новый Запрос("
			|ВЫБРАТЬ Контакт, Контрагент.Наименование КАК Наименование
			|ИЗ РегистрСведений.СвязиКонтрагентКонтакт
			|ГДЕ НЕ СвязьНедействительна И Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|УПОРЯДОЧИТЬ ПО Контакт, Порядок
			|ИТОГИ ПО Контакт
			|АВТОУПОРЯДОЧИВАНИЕ");
			ВыборкаКонтактов = ЗапросКонтрагентов.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;
	КонецЕсли;

	ИмяПоляВладельца = "";
	Если Метаданные.Справочники[ТипОбъекта].Владельцы.Количество() > 0 Тогда
		ИмяПоляВладельца = "Владелец";
	КонецЕсли;
	
	ИмяРегистраКонтактнаяИнформация = "КонтактнаяИнформация";
	Если Метаданные.РегистрыСведений.Найти(ИмяРегистраКонтактнаяИнформация) <> Неопределено Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Объект КАК Ссылка,
		|	Тип,
		|	Вид,
		|	Представление,
		|	ЗначениеПоУмолчанию КАК ОсновнойДляСвязи,
		|	Объект.сфпПользовательДляПереключенияЗвонков КАК ПользовательДляПереключенияЗвонков,
		|	" + ?(ИмяПоляВладельца = "", """""", "Объект." + ИмяПоляВладельца) + " КАК Владелец
		|ИЗ
		|	РегистрСведений." + ИмяРегистраКонтактнаяИнформация + "
		|ГДЕ
		|	Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И Объект ССЫЛКА Справочник." + ТипОбъекта + "
		|ИТОГИ МАКСИМУМ(Объект.сфпПользовательДляПереключенияЗвонков) ПО
		|	Объект");
		ВыборкаОбъектов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ЕстьОсновнойТелефон = Истина;
		
	ИначеЕсли ТекМетаданные.ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Ссылка,
		|	Тип,
		|	Вид,
		|	Представление,
		|	ЛОЖЬ КАК ОсновнойДляСвязи,
		|	" + ?(ИмяПоляВладельца = "", """""", "Ссылка." + ИмяПоляВладельца) + " КАК Владелец,
		|	" + ?(ЕстьПользовательДляПереключенияЗвонков, "Ссылка.сфпПользовательДляПереключенияЗвонков", "ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)") + " КАК ПользовательДляПереключенияЗвонков
		|ИЗ
		|	Справочник." + ТипОбъекта + ".КонтактнаяИнформация
		|ГДЕ
		|	Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|ИТОГИ ПО
		|	Ссылка");
		ВыборкаОбъектов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		ЕстьОсновнойТелефон = (ТекМетаданные.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("CRM_ОсновнойДляСвязи") <> Неопределено);
		
	ИначеЕсли ТипОбъекта = "Картотека" Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Картотека.Ссылка КАК Ссылка,
		|	Контакты.Тип КАК Тип,
		|	Контакты.Вид КАК Вид,
		|	Контакты.Представление КАК Представление,
		|	Контакты.Основной КАК ОсновнойДляСвязи,
		|	" + ?(ИмяПоляВладельца = "", """""", "Ссылка." + ИмяПоляВладельца) + " КАК Владелец,
		|	" + ?(ЕстьПользовательДляПереключенияЗвонков, "Ссылка.сфпПользовательДляПереключенияЗвонков", "ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)") + " КАК ПользовательДляПереключенияЗвонков
		|ИЗ
		|	Справочник.Картотека КАК Картотека
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформацияПациента.СрезПоследних(,) КАК Контакты
		|	ПО Контакты.Пациент = Картотека.Ссылка
		|ГДЕ
		|	Контакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|ИТОГИ ПО
		|	Картотека.Ссылка");
		ВыборкаОбъектов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ЕстьОсновнойТелефон = Истина;
		
	Иначе
		Возврат;
	КонецЕсли;

	Пока ВыборкаОбъектов.Следующий() Цикл
		// Очистим все записи по объекту
		НаборЗаписей = РегистрыСведений.сфпНомераТелефоновДляПоиска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаОбъектов.Ссылка);
		НаборЗаписей.Прочитать();
		
		СтарыйНабор = НаборЗаписей.Выгрузить(, "НомерТелефона,Представление,ВнутреннийНомер");
		
		// Сохраняем пользователя для переключения звонков
		Если НаборЗаписей.Количество() = 0 Тогда
			сфпПользователь	= ПустойПользователь;
			сфпВнутреннийНомер = "";

		Иначе	
			сфпПользователь	= НаборЗаписей[0].Пользователь;
			сфпВнутреннийНомер = сфпТекущийВнутреннийНомер(НаборЗаписей[0].Пользователь);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(сфпПользователь) Тогда
			сфпВнутреннийНомер = "";
		КонецЕсли;

		// Очищаем набор записей
		НаборЗаписей.Очистить();
		
		ПервыйТелефон = "";
		ПервыйТелефонПредставление = "";
	
		ОсновнойТелефон = "";
		ОсновнойТелефонПредставление = "";
		
		ПорядковыйНомер = 1;
		
		Выборка = ВыборкаОбъектов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.Представление) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Выборка.Представление);
			НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
			Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяЗапись	= НаборЗаписей.Добавить();
			НоваяЗапись.Объект = ВыборкаОбъектов.Ссылка;
			НоваяЗапись.Вид = Выборка.Вид;
			НоваяЗапись.ПорядковыйНомер = ПорядковыйНомер;
			НоваяЗапись.НомерТелефона = НомерТелефона;
			НоваяЗапись.Представление = Выборка.Представление;
			НоваяЗапись.НомерТелефонаДляПоиска = сфпРазбитьНомерТелефонаДляПолнотекстовогоПоиска(НомерТелефона);
			НоваяЗапись.Пользователь = сфпПользователь;
			НоваяЗапись.ВнутреннийНомер = сфпВнутреннийНомер;
			
			Если НЕ ЗначениеЗаполнено(ПервыйТелефон) Тогда
				ПервыйТелефон = НомерТелефона;
				ПервыйТелефонПредставление = Выборка.Представление;
			КонецЕсли;
			Если ЕстьОсновнойТелефон И Выборка.ОсновнойДляСвязи Тогда
				ОсновнойТелефон = НомерТелефона;
				ОсновнойТелефонПредставление = Выборка.Представление;
			КонецЕсли;
			
			ПорядковыйНомер = ПорядковыйНомер + 1;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
			НаборЗаписан = Истина;
		Исключение
			НаборЗаписан = Ложь;
		КонецПопытки;
		
		Если НаборЗаписан И ТипОбъекта <> "Партнеры" И ТипОбъекта <> "Организации" Тогда	
			ТелефонКонтакта = "";
			ТелефонКонтактаПредставление = "";
					
			Если ЗначениеЗаполнено(ОсновнойТелефон) Тогда
				ТелефонКонтакта = ОсновнойТелефон;
				ТелефонКонтактаПредставление = ОсновнойТелефонПредставление;

			ИначеЕсли ЗначениеЗаполнено(ПервыйТелефон) Тогда
				ТелефонКонтакта = ПервыйТелефон;
				ТелефонКонтактаПредставление = ПервыйТелефонПредставление;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТелефонКонтакта) Тогда
				СтрокаВладельцев = "";
				Если ТипОбъекта = "КонтактныеЛица" И ВыборкаКонтактов <> Неопределено Тогда
					ВыборкаКонтактов.Сбросить();
					
					СтруктураПоиска = Новый Структура("Контакт", ВыборкаОбъектов.Ссылка);
					Если ВыборкаКонтактов.НайтиСледующий(СтруктураПоиска) Тогда
						ВыборкаКонтрагентов = ВыборкаКонтактов.Выбрать();
						Пока ВыборкаКонтрагентов.Следующий() Цикл
							СтрокаВладельцев = СтрокаВладельцев + ?(СтрокаВладельцев = "", "", "; ") + ВыборкаКонтрагентов.Наименование;
						КонецЦикла;
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ИмяПоляВладельца) Тогда
					СтрокаВладельцев = СтрокаВладельцев + ?(СтрокаВладельцев = "", "", "; ") + ВыборкаОбъектов[ИмяПоляВладельца];
				КонецЕсли;
				
				ЗаписатьМенеджер = Ложь;
				
				МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = ВыборкаОбъектов.Ссылка;
				МенеджерЗаписи.ТелефоннаяКнига = Справочники.сфпТелефонныеКниги.ПустаяСсылка();
				МенеджерЗаписи.ИдентификаторАТС = "";
				МенеджерЗаписи.Прочитать();
				Если НЕ МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Объект = ВыборкаОбъектов.Ссылка;
					МенеджерЗаписи.ТелефоннаяКнига = Справочники.сфпТелефонныеКниги.ПустаяСсылка();
					МенеджерЗаписи.ИдентификаторАТС = "";
					ЗаписатьМенеджер = Истина;
				КонецЕсли;
				Если МенеджерЗаписи.ОсновнойНомерТелефона <> ТелефонКонтакта Тогда
					МенеджерЗаписи.ОсновнойНомерТелефона = ТелефонКонтакта;
					МенеджерЗаписи.ОсновнойНомерТелефонаПредставление = ТелефонКонтактаПредставление;
					ЗаписатьМенеджер = Истина;
				КонецЕсли;
				Если МенеджерЗаписи.Владельцы <> СтрокаВладельцев Тогда
					МенеджерЗаписи.Владельцы = СтрокаВладельцев;
					ЗаписатьМенеджер = Истина;
				КонецЕсли;
				Если ЗаписатьМенеджер Тогда
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь); 

КонецПроцедуры // сфпЗаполнитьРегистрПоискаНомеровПоТипуОбъекта()

// Процедура заново заполняет регистр поиска по номерам
//
// Параметры:
//	Нет.
//
Процедура сфпПерезаполнитьРегистрПоискаПоНомерам() Экспорт
	
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ТипыКонтактов = сфпОбщегоНазначенияПовтИсп.сфпПолучитьИспользуемыеТипыКонтактов();
	Для Каждого ТипКонтакта Из ТипыКонтактов Цикл
		Выборка = Справочники[ТипКонтакта].Выбрать();
		Пока Выборка.Следующий() Цикл
			сфпЗаполнитьРегистрПоискаПоНомерам(Выборка.Ссылка, Ложь);
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	Если сфпИспользоватьМаршрутизацию() Тогда
		// Если включена маршрутизация, то заменяем таблицу маршрутизации
		СтарыйНабор = Новый Массив;
		НовыйНабор = сфпПолучитьТаблицуМаршрутизации();
		СписокМаршрутизации = сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
		сфпЗаменитьМаршрутизациюВАТС(СписокМаршрутизации);
	КонецЕсли;

КонецПроцедуры // сфпПерезаполнитьРегистрПоискаПоНомерам()

// Функция вычисляет общее количество объектов для перезаполнения по номерам  
//
// Параметры:
//	Нет.
//
Функция сфпВычислитьОбщееКоличествоОбъектовДляПерезаполненияПоНомерам() Экспорт
	
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ТекстЗапроса = "";
	
	ТипыКонтактов = сфпОбщегоНазначенияПовтИсп.сфпПолучитьИспользуемыеТипыКонтактов();
	Для Каждого ТипКонтакта Из ТипыКонтактов Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", "
		|ОБЪЕДИНИТЬ ВСЕ") + "
		|ВЫБРАТЬ КОЛИЧЕСТВО(Ссылка) КАК КоличествоСсылок
		|ИЗ Справочник." + ТипКонтакта.Значение;
	КонецЦикла;
	
	ОбщееКоличество = 0;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ СУММА(КоличествоСсылок) КАК КоличествоСсылок
		|ИЗ
		|	(" + ТекстЗапроса + ") КАК Подзапрос");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщееКоличество = Выборка.КоличествоСсылок;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщееКоличество;

КонецФункции // сфпВычислитьОбщееКоличествоОбъектовДляПерезаполненияПоНомерам()

// Функция вычисляет типы объектов для перезаполнения по номерам
//
// Параметры:
//	Нет.
//
Функция сфпПолучитьТипыОбъектовДляПерезаполненияПоНомерам() Экспорт
	
	МассивТипов = Новый Массив();
	
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда
		Возврат МассивТипов;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ТипыКонтактов = сфпОбщегоНазначенияПовтИсп.сфпПолучитьИспользуемыеТипыКонтактов();
	Для Каждого ТипКонтакта Из ТипыКонтактов Цикл
		МассивТипов.Добавить(ТипКонтакта.Значение);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивТипов;

КонецФункции // сфпПолучитьТипыОбъектовДляПерезаполненияПоНомерам()

// Функция формирует список объектов для перезаполнения по номерам
//
// Параметры:
//	Нет.
//
Функция сфпПолучитьСписокОбъектовДляПерезаполнения() Экспорт
	
	СписокОбъектов = Новый СписокЗначений();
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ТипыКонтактов = сфпОбщегоНазначенияПовтИсп.сфпПолучитьИспользуемыеТипыКонтактов();
	Для Каждого ТипКонтакта Из ТипыКонтактов Цикл
		Выборка = Справочники[ТипКонтакта.Значение].Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОбъектов.Добавить(Выборка.Ссылка);;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СписокОбъектов;
	
КонецФункции // сфпПолучитьСписокОбъектовДляПерезаполнения()

// Функция возвращает массив телефонов и факсов
//
// Параметры:
//	Ссылка	- СправочникСсылка	- Ссылка на владельца контактной информации
//
// Возвращаемое значение:
//	Массив	- Массив структур телефонов и факсов
//
Функция сфпПолучитьМассивТелефоновИФаксов(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопУсловие = "";
	
	ИмяМетаданных = Ссылка.Метаданные().Имя;
	Если ИмяМетаданных = "Пользователи" Тогда
		Если Метаданные.Справочники.Пользователи.Реквизиты.Найти("ФизЛицо") <> Неопределено Тогда
			ДопУсловие = " ИЛИ Номера.Объект В (ВЫБРАТЬ ФизЛицо ИЗ Справочник.Пользователи ГДЕ Ссылка = &Объект)";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных = "Партнеры" Тогда
		ДопУсловие = " ИЛИ Номера.Объект В (ВЫБРАТЬ Ссылка ИЗ Справочник.КонтактныеЛицаПартнеров ГДЕ Владелец = &Объект)";

	ИначеЕсли ИмяМетаданных = "Контрагенты" Тогда
		Если Метаданные.РегистрыСведений.Найти("СвязиКонтрагентКонтакт") = Неопределено Тогда
			Если Метаданные.Справочники.Найти("КонтактныеЛица") <> Неопределено
				И Метаданные.Справочники["КонтактныеЛица"].Реквизиты.Найти("ОбъектВладелец") <> Неопределено Тогда
				ДопУсловие = " ИЛИ Номера.Объект В (ВЫБРАТЬ Ссылка ИЗ Справочник.КонтактныеЛица ГДЕ ОбъектВладелец = &Объект)";
				
			Иначе
				ДопУсловие = " ИЛИ Номера.Объект В (ВЫБРАТЬ Ссылка ИЗ Справочник.КонтактныеЛица ГДЕ Владелец = &Объект)";
			КонецЕсли;

		Иначе
			ДопУсловие = " ИЛИ Номера.Объект В (ВЫБРАТЬ Контакт ИЗ РегистрСведений.СвязиКонтрагентКонтакт ГДЕ Контрагент = &Объект И НЕ СвязьНедействительна)";
		КонецЕсли;
	КонецЕсли;
	
	ЕстьДопРеквизит = (Метаданные.Справочники.ВидыКонтактнойИнформации.Реквизиты.Найти("РеквизитДопУпорядочивания") <> Неопределено);
	
	ИспользоватьПрефиксыИсходящихВызов = Константы.сфпИспользоватьПрефиксыИсходящихВызов.Получить();
	Если ИспользоватьПрефиксыИсходящихВызов Тогда
		// АльфаАвто
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номера.Вид КАК Вид,
		|	Номера.Представление КАК Представление,
		|	Номера.Объект КАК Объект,
		|	ЕСТЬNULL(Префиксы.Ссылка.Наименование, """") КАК ПрефиксНабора,
		|	ВЫБОР КОГДА Номера.Объект = &Объект ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК Порядок
		|ИЗ
		|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК Номера
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.сфпПрефиксыИсходящихВызовов.Клиенты КАК Префиксы
		|	ПО Префиксы.Клиент = Номера.Объект
		|ГДЕ
		|	Номера.Объект = &Объект
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Объект" + ?(ЕстьДопРеквизит, ", Номера.Вид.РеквизитДопУпорядочивания", "") + "
		|АВТОУПОРЯДОЧИВАНИЕ");
		// Конец АльфаАвто
	Иначе
		// АльфаАвто
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номера.Вид КАК Вид,
		|	Номера.Представление КАК Представление,
		|	Номера.Объект КАК Объект,
		|	"""" КАК ПрефиксНабора,
		|	ВЫБОР КОГДА Номера.Объект = &Объект ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК Порядок
		|ИЗ
		|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК Номера
		|ГДЕ
		|	Номера.Объект = &Объект
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Объект" + ?(ЕстьДопРеквизит, ", Номера.Вид.РеквизитДопУпорядочивания", "") + "
		|АВТОУПОРЯДОЧИВАНИЕ");
		// Конец АльфаАвто
	КонецЕсли;	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	МассивТелефоновИФаксов = Новый Массив();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураТелефона = Новый Структура("Вид,Представление,Объект,ЗадержкаДобавочногоНомера,ПрефиксНабора",
			Выборка.Вид, Выборка.Представление, Выборка.Объект, 0, Выборка.ПрефиксНабора);
		МассивТелефоновИФаксов.Добавить(СтруктураТелефона);
	КонецЦикла;
	
	Возврат МассивТелефоновИФаксов;

КонецФункции // сфпПолучитьМассивТелефоновИФаксов()

// Функция ищет объект в регистре по телефону
//
// Параметры:
//	НомерТелефона - Строка	- Номер телефона
//
// Возвращаемое значение:
//	Массив	- Массив найденных владельцев телефонного номера
//
Функция сфпНайтиОбъектВРегистреПоТелефону(НомерТелефона, МассивВладельцевКонтактов = Неопределено) Экспорт
	
	Если МассивВладельцевКонтактов = Неопределено Тогда
		МассивВладельцевКонтактов = Новый Массив();	
	КонецЕсли;	
	
	МассивОбъектов = Новый Массив;
	ОчищенныйНомерТелефона = сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
	Если СтрДлина(ОчищенныйНомерТелефона) > 0 Тогда
		УстановитьПривилегированныйРежим(Истина); 
		
		ДлинаВнутреннихНомеров = Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
		КоличествоЦифрВНомере = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
		
		ИспользуемыеТипыКонтактов = сфпОбщегоНазначенияПовтИсп.сфпПолучитьИспользуемыеТипыКонтактов();
		
		СчПорядка = 2;
		
		ТекстЗапросаВладелец = "";
		ТекстЗапросаВремТаблица = "";
		
		ЕстьСвязиКонтрагентов = (Метаданные.РегистрыСведений.Найти("СвязиКонтрагентКонтакт") <> Неопределено);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НомераТелефонов.Объект КАК Объект,
		|	ВЫБОР";
		Для Каждого Тип Из ИспользуемыеТипыКонтактов Цикл
			ТекТип = Тип.Значение;
			МетаданныеСправочника = Метаданные.Справочники[ТекТип];
			Если ТекТип = "Партнеры" Тогда
				ИмяТипаРеквизита = "ПеречислениеСсылка.КомпанияЧастноеЛицо";
				Реквизит = МетаданныеСправочника.Реквизиты.Найти("ЮрФизЛицо");
				Если Реквизит <> Неопределено И Реквизит.Тип.СодержитТип(Тип(ИмяТипаРеквизита)) Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	КОГДА ТИПЗНАЧЕНИЯ(НомераТелефонов.Объект) = ТИП(Справочник." + ТекТип + ") ТОГДА
					|		ВЫБОР КОГДА НомераТелефонов.Объект.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо) ТОГДА 1 ИНАЧЕ " + СчПорядка + " КОНЕЦ";
					
				Иначе
					ТекстЗапроса = ТекстЗапроса + "
					|	КОГДА ТИПЗНАЧЕНИЯ(НомераТелефонов.Объект) = ТИП(Справочник." + ТекТип + ") ТОГДА " + СчПорядка;
				КонецЕсли;

			Иначе	
				ТекстЗапроса = ТекстЗапроса + "
				|	КОГДА ТИПЗНАЧЕНИЯ(НомераТелефонов.Объект) = ТИП(Справочник." + ТекТип + ") ТОГДА " + СчПорядка;
			КонецЕсли;
			
			Если МетаданныеСправочника.Владельцы.Количество() > 0 Тогда
				Если ТекТип = "КонтактныеЛица" ИЛИ ТекТип = "КонтактныеЛицаПартнеров" Тогда
					ТекстЗапросаВремТаблица = "
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ Объект.Владелец КАК Владелец
					|ПОМЕСТИТЬ ВладельцыКонтактныхЛиц	
					|ИЗ РегистрСведений.сфпНомераТелефоновДляПоиска
					|ГДЕ Объект ССЫЛКА Справочник." + ТекТип + " И НомерТелефона = &НомерТелефона
					|;";
				КонецЕсли;
			
				ТекстЗапросаВладелец = ТекстЗапросаВладелец + ?(ТекстЗапросаВладелец = "", ",
				|   ВЫБОР ", "") + "
				|   КОГДА ТИПЗНАЧЕНИЯ(НомераТелефонов.Объект) = ТИП(Справочник." + ТекТип + ") ТОГДА НомераТелефонов.Объект.Владелец";
				
			ИначеЕсли ТекТип = "CRM_ПотенциальныеКлиенты" Тогда
				ТекстЗапросаВладелец = ТекстЗапросаВладелец + ?(ТекстЗапросаВладелец = "", ",
				|   ВЫБОР ", "") + "
				|   КОГДА ТИПЗНАЧЕНИЯ(НомераТелефонов.Объект) = ТИП(Справочник." + ТекТип + ") ТОГДА НомераТелефонов.Объект.Партнер";
				
			ИначеЕсли ТекТип = "КонтактныеЛица" И ЕстьСвязиКонтрагентов Тогда
				ТекстЗапросаВладелец = ТекстЗапросаВладелец + ?(ТекстЗапросаВладелец = "", ",
				|   ВЫБОР ", "") + "
				|   КОГДА ТИПЗНАЧЕНИЯ(НомераТелефонов.Объект) = ТИП(Справочник." + ТекТип + ") ТОГДА СвязиКонтактов.Контрагент";	
			КонецЕсли;
							
			СчПорядка = СчПорядка + 1;
		КонецЦикла;
		
		Если ТекстЗапросаВладелец = "" Тогда
			ТекстЗапросаВладелец = ",
			|	НЕОПРЕДЕЛЕНО КАК Владелец";
			
		Иначе
			ТекстЗапросаВладелец = ТекстЗапросаВладелец + "
			|   ИНАЧЕ Неопределено
			|   КОНЕЦ КАК Владелец";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаВремТаблица + ТекстЗапроса + "
		|	КОНЕЦ КАК Порядок" + ТекстЗапросаВладелец + "
		|ИЗ
		|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК НомераТелефонов" + ?(НЕ ЕстьСвязиКонтрагентов, "", "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних() КАК СвязиКонтактов
		|	ПО СвязиКонтактов.Контакт = НомераТелефонов.Объект
		|	И СвязиКонтактов.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)") + "
		|ГДЕ
		|	НомераТелефонов.НомерТелефона = &НомерТелефона" + ?(ТекстЗапросаВремТаблица = "", "", "
		|	И НЕ НомераТелефонов.Объект В (ВЫБРАТЬ Владелец ИЗ ВладельцыКонтактныхЛиц)") + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Если СтрДлина(ОчищенныйНомерТелефона) > ДлинаВнутреннихНомеров Тогда
			// Если внешний номер, то ищем в регистре номеров для поиска
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("НомерТелефона", Прав(ОчищенныйНомерТелефона, КоличествоЦифрВНомере));

		Иначе
			ИмяПВХ_СофтфонНастройкиПользователей = сфпИмяПВХ_СофтфонНастройкиПользователей();
			ИмяРегистраСофтфонНастройкиПользователей = сфпИмяРегистраСофтфонНастройкиПользователей();
			
			// Если внутренний номер, то ищем в настройках пользователей
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	" + ?(ИмяРегистраСофтфонНастройкиПользователей = "ПраваИНастройки", "ПользовательПрофиль", "Пользователь") + " КАК Объект,
			|	НЕОПРЕДЕЛЕНО КАК Владелец
			|ИЗ
			|	РегистрСведений." + ИмяРегистраСофтфонНастройкиПользователей + "
			|ГДЕ
			|	" + ?(ИмяРегистраСофтфонНастройкиПользователей = "ПраваИНастройки", "ПравоНастройка", "Настройка") + " = &Настройка
			|	И Значение = &НомерТелефона");
			Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик[ИмяПВХ_СофтфонНастройкиПользователей].сфпТекущийВнутреннийНомер);
			Запрос.УстановитьПараметр("НомерТелефона", ОчищенныйНомерТелефона);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				// Если внутренний номер не нашли, то ищем в регистре номеров для поиска
				Запрос = Новый Запрос(ТекстЗапроса);
				Запрос.УстановитьПараметр("НомерТелефона", ОчищенныйНомерТелефона);
			КонецЕсли;	
		КонецЕсли;
		
		МассивДобавленных = Новый Массив();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// Владельца КЛ добавляем в массив добавленных объектов (повторно в список поиска партнёра-владельца не берём).
			Если ЗначениеЗаполнено(Выборка.Владелец) Тогда
				Если МассивВладельцевКонтактов.Найти(Выборка.Владелец) = Неопределено Тогда	
					МассивВладельцевКонтактов.Добавить(Выборка.Владелец);
				КонецЕсли;
				
				Если Выборка.Объект.Метаданные().Имя = "CRM_ПотенциальныеКлиенты" Тогда
					Продолжить;
				КонецЕсли;
				
				Если МассивДобавленных.Найти(Выборка.Владелец) = Неопределено Тогда
					МассивДобавленных.Добавить(Выборка.Владелец);
				КонецЕсли;
			КонецЕсли;
			
			Если МассивДобавленных.Найти(Выборка.Объект) = Неопределено Тогда
				МассивДобавленных.Добавить(Выборка.Объект);
				МассивОбъектов.Добавить(Выборка.Объект);
			КонецЕсли;
		КонецЦикла;

		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	Возврат МассивОбъектов;

КонецФункции // сфпНайтиОбъектВРегистреПоТелефону()

// Функция выполняет поиск объекта в базе данных по значению переданного GUID
//
// Параметры:
//	GUID	- Строка	- Уникальный идентификатор
//
// Возвращаемое значение:
//	СправочникСсылка	- Владелец GUID
//	
Функция сфпНайтиКонтактПоGUID(GUID) Экспорт
	
	НайденныйОбъект = Неопределено;
	
	Попытка
		УникальныйИдентификаторДляПоиска = Новый УникальныйИдентификатор(GUID);
	Исключение
		Возврат НайденныйОбъект;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыКонтактов = сфпОбщегоНазначенияПовтИсп.сфпПолучитьИспользуемыеТипыКонтактов();
	Для Каждого ТипКонтакта Из ТипыКонтактов Цикл
		НайденныйОбъект = Справочники[ТипКонтакта.Значение].ПолучитьСсылку(УникальныйИдентификаторДляПоиска);
		Если сфпСсылкаСуществует(НайденныйОбъект) Тогда
			Прервать;
			
		Иначе
			НайденныйОбъект = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	Возврат НайденныйОбъект;

КонецФункции // сфпНайтиКонтактПоGUID()

// Функция возвращает владельца контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	СправочникСсылка	- Владелец контакта
//
Функция сфпПолучитьВладельцаКонтакта(Контакт, ПредставлениеВладельца = "") Экспорт
	
	Владелец = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		МетаданныеКонтакта = Контакт.Метаданные();
		ИмяМетаданных = МетаданныеКонтакта.Имя;
		Если МетаданныеКонтакта.Владельцы.Количество() > 0 Тогда
			Владелец = Контакт.Владелец;

		ИначеЕсли ИмяМетаданных = "CRM_ПотенциальныеКлиенты" Тогда
			Владелец = Контакт.Партнер;
			
		ИначеЕсли ИмяМетаданных = "КонтактныеЛица" Тогда
			Если Метаданные.РегистрыСведений.Найти("СвязиКонтрагентКонтакт") <> Неопределено Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ Контрагент
				|ИЗ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контакт = &Контакт)
				|ГДЕ НЕ СвязьНедействительна");
				Запрос.УстановитьПараметр("Контакт", Контакт);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Владелец = Выборка.Контрагент;
				КонецЕсли;
				
			Иначе
				Попытка
					// Поддержка 1С:ЖКХ
					Владелец = Контакт.ОбъектВладелец;
				Исключение КонецПопытки;
			КонецЕсли;
			
		ИначеЕсли ИмяМетаданных = "Контрагенты" ИЛИ ИмяМетаданных = "Партнеры" Тогда
			Владелец = Контакт;
			
		ИначеЕсли Метаданные.РегистрыСведений.Найти("КонтактныеЛица") <> Неопределено Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ Владелец
			|ИЗ РегистрСведений.КонтактныеЛица
			|ГДЕ КонтактноеЛицо = &КонтактноеЛицо");
			Запрос.УстановитьПараметр("КонтактноеЛицо", Контакт);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Владелец;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		ДополнительнаяИнформация = ПолучитьДополнительнуюИнформациюКонтакта(Владелец);
		Если ЗначениеЗаполнено(ДополнительнаяИнформация) Тогда
			  ПредставлениеВладельца = "" + Владелец + ": " + ДополнительнаяИнформация;
		Иначе ПредставлениеВладельца = "" + Владелец;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	Возврат Владелец;
	
КонецФункции // сфпПолучитьВладельцаКонтакта()

// Функция получает наименование контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Строка	- Наименование контакта
//
Функция сфпПолучитьНаименованиеКонтакта(Контакт) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	НаименованиеКонтакта = Контакт.Наименование;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат НаименованиеКонтакта;
КонецФункции // сфпПолучитьНаименованиеКонтакта()

// Функция получает представление контакта с дополнительной информацией
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Строка	- Представление контакта
//
Функция сфпПолучитьПредставлениеКонтакта(Контакт) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ПредставлениеКонтакта = "" + Контакт;
		
	ДополнительнаяИнформация = ПолучитьДополнительнуюИнформациюКонтакта(Контакт);
	Если ЗначениеЗаполнено(ДополнительнаяИнформация) Тогда
		ПредставлениеКонтакта = ПредставлениеКонтакта + ": " + ДополнительнаяИнформация;
	КонецЕсли;
		
	Возврат ПредставлениеКонтакта;

КонецФункции // сфпПолучитьПредставлениеКонтакта()

// Функция получает уникальный идентификатор контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Строка	- Уникальный идентификатор контакта
//
Функция сфпПолучитьИдентификаторКонтакта(Контакт) Экспорт
	УстановитьПривилегированныйРежим(Истина); 
	ИдентификаторКонтакта = Строка(Контакт.УникальныйИдентификатор());
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат ИдентификаторКонтакта;
КонецФункции // сфпПолучитьИдентификаторКонтакта()

// Функция формирует строковое представление телефона
//
// Параметры:
//	КодСтраны		- Строка	- Код страны
//	КодГорода		- Строка	- Код города
//	НомерТелефона	- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Представление телефона
//
Функция сфпСформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона) Экспорт
	Возврат сфпОбщегоНазначенияКлиентСервер.сфпСформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, "", "");
КонецФункции // сфпСформироватьПредставлениеТелефона()	

// Функция ищет в регистре представление номера телефона по контакту и его номеру телефона
//
// Параметры:
//	Контакт			- СправочникСсылка	- Контакт
//	НомерТелефона	- Строка			- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Представление номера телефона
//
Функция сфпПолучитьПредставлениеНомераТелефона(Контакт, НомерТелефона) Экспорт
	ПредставлениеНомераТелефона = НомерТелефона;
	ОчищенныйНомерТелефона = сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
	Если ЗначениеЗаполнено(Контакт) Тогда
		Если СтрДлина(ОчищенныйНомерТелефона) > 0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Объект", Контакт);
			ДлинаВнутреннихНомеров	= Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
			КоличествоЦифрВНомере	= Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
			Если СтрДлина(ОчищенныйНомерТелефона) > КоличествоЦифрВНомере Тогда
				Запрос.УстановитьПараметр("НомерТелефона", Прав(ОчищенныйНомерТелефона, КоличествоЦифрВНомере));
			Иначе
				сфпПараметрыСервера	= сфпСофтФонПроСервер.сфпПараметрыСервера();
				КодГорода 	= сфпПараметрыСервера.КодГорода;
				Если СтрДлина(КодГорода + ОчищенныйНомерТелефона) = 10 Тогда
					Запрос.УстановитьПараметр("НомерТелефона", Прав(КодГорода + ОчищенныйНомерТелефона, КоличествоЦифрВНомере));
				Иначе
					Запрос.УстановитьПараметр("НомерТелефона", ОчищенныйНомерТелефона);
				КонецЕсли;
			КонецЕсли;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	сфпНомераТелефоновДляПоиска.Представление
			               |ИЗ
			               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
			               |ГДЕ
			               |	сфпНомераТелефоновДляПоиска.НомерТелефона = &НомерТелефона
			               |	И сфпНомераТелефоновДляПоиска.Объект = &Объект";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПредставлениеНомераТелефона = Выборка.Представление;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыСервера = сфпПараметрыСервера();
		// Получаем структуру полей по представлению
		СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);
		// Если не заполнены код страны или код города, то заполняем их по умолчанию
		Если НЕ ЗначениеЗаполнено(СтруктураНомера.КодСтраны) Тогда
			СтруктураНомера.КодСтраны = ПараметрыСервера.КодСтраны;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			СтруктураНомера.КодГорода = ПараметрыСервера.КодГорода;
		КонецЕсли;	
		ПредставлениеНомераТелефона = сфпСформироватьПредставлениеТелефона(СтруктураНомера.КодСтраны,
			СтруктураНомера.КодГорода, СтруктураНомера.НомерТелефона);
	КонецЕсли;
	Возврат ПредставлениеНомераТелефона;
КонецФункции // сфпПолучитьПредставлениеНомераТелефона()


/////////////////////////////////////////////////
// МАРШРУТИЗАЦИЯ

 // Функция проверяет использование маршрутизации средствами сервера СофтФона
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования маршрутизации
//
Функция сфпИспользоватьМаршрутизацию() Экспорт
	Возврат Константы.сфпИспользоватьМаршрутизацию.Получить();
КонецФункции // сфпИспользоватьМаршрутизацию()

// Функция возвращает идентификатор таблицы маршрутизации
//
// Параметры:
//	Нет.
//
Функция сфпПолучитьИдентификаторМаршрутизации(СоздаватьНовый = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторМаршрутизации = Константы.сфпИдентификаторМаршрутизации.Получить();
	Если ПустаяСтрока(ИдентификаторМаршрутизации) Тогда
		Если СоздаватьНовый Тогда
			ИдентификаторМаршрутизации = Строка(Новый УникальныйИдентификатор);
			Константы.сфпИдентификаторМаршрутизации.Установить(ИдентификаторМаршрутизации);
		КонецЕсли;	
	КонецЕсли;

	Возврат ИдентификаторМаршрутизации;

КонецФункции // сфпПолучитьИдентификаторМаршрутизации()

// Функция возвращает внутренний номер текущего пользователя
//
// Параметры:
//	Пользователь			- СправочникСсылка	- Пользователь, для которого получается внутренний номер
//  НомерДляМаршрутизации   - Булево - Признак получения номера для нужд маршрутизации
//
// Возвращаемое значение:
//	Строка	- Внутренний номер пользователя
//
Функция сфпТекущийВнутреннийНомер(Пользователь = Неопределено, НомерДляМаршрутизации = Ложь) Экспорт
	
	ИспользуемаяВерсия = Константы.сфпИспользуемаяВерсияСофтФон.Получить();
	ИспользоватьОблачнуюТелефонию = Константы.сфпИспользоватьОблачнуюТелефонию.Получить();
	Если ИспользуемаяВерсия = Перечисления.сфпВерсииСофтФон.СофтФотPROSTO И ИспользоватьОблачнуюТелефонию Тогда
		ДанныеАбонента = сфпЛицензированиеСервер.ДанныеПользователяАТС(Пользователь);
		Возврат ДанныеАбонента.ВнутреннийНомер;

	Иначе	
		сфпВнутреннийНомер = сфпПолучитьЗначениеНастройкиПользователя("сфпТекущийВнутреннийНомер", Пользователь);
		Если НЕ НомерДляМаршрутизации Тогда
			Возврат сфпУбратьИзНомераТелефонаВсеПрефиксы(сфпВнутреннийНомер, Истина);
			
		Иначе
			Если НЕ ЗначениеЗаполнено(сфпВнутреннийНомер) Тогда
				сфпВнутреннийНомер = сфпПолучитьВнутреннийНомерПользователяИзКИ(Пользователь);
			КонецЕсли;			
			
			Возврат сфпВнутреннийНомер; 
		КонецЕсли;
	КонецЕсли;

КонецФункции // сфпТекущийВнутреннийНомер()

// Функция возвращает дополнительные внутренние номера текущего пользователя
//
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь, для которого получаются внутренние номера
//
// Возвращаемое значение:
//	Массив	- Дополнительные внутренние номера пользователя
//
Функция сфпНомераЛинийПользователя(Пользователь = Неопределено) Экспорт
	
	ДополнительныеНомера = сфпПолучитьЗначениеНастройкиПользователя("сфпДополнительныеВнутренниеНомера", Пользователь);
	МассивНомеров = сфпОбщегоНазначенияКлиентСервер.сфпРазложитьСтрокуВМассивПодстрок(ДополнительныеНомера, ",");
	
	ВнутренниеНомера = Новый Массив();
	Для Каждого ТекНомер Из МассивНомеров Цикл
		ВнутренниеНомера.Добавить(сфпУбратьИзНомераТелефонаВсеПрефиксы(ТекНомер, Истина));
	КонецЦикла;
	
	Возврат ВнутренниеНомера; 

КонецФункции // сфпНомераЛинийПользователя()

// Функция возращает внутренний номер телефона из контактной информации пользователя
//
// Параметры:
//	Пользователь			- СправочникСсылка	- Пользователь, для которого получается внутренний номер
//
// Возвращаемое значение:
//	Строка	- Внутренний номер пользователя из КИ
//
Функция сфпПолучитьВнутреннийНомерПользователяИзКИ(Пользователь = Неопределено) Экспорт
	
	ИмяПредопределенногоЗначения = "";
	Если ПустаяСтрока(ИмяПредопределенногоЗначения) Тогда
		Попытка
			ИмяПредопределенногоЗначения = "Справочник.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий";
		Исключение КонецПопытки;
	КонецЕсли;
	Если ПустаяСтрока(ИмяПредопределенногоЗначения) Тогда
		Попытка
			ИмяПредопределенногоЗначения = "Справочник.ВидыКонтактнойИнформации.ТелефонПользователя";
		Исключение КонецПопытки;
	КонецЕсли;
	
	МетаданныеТЧ = Метаданные.Справочники["Пользователи"].ТабличныеЧасти.Найти("КонтактнаяИнформация");
	
	Если НЕ ПустаяСтрока(ИмяПредопределенногоЗначения) И МетаданныеТЧ <> Неопределено Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ Представление КАК НомерТелефона
		|ИЗ Справочник.Пользователи.КонтактнаяИнформация
		|ГДЕ Ссылка = &Пользователь И Вид = &ВидКИ");
		
		Если МетаданныеТЧ.Реквизиты.Найти("ОсновнойДляСвязи") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО ОсновнойДляСвязи УБЫВ";
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("ВидКИ", ПредопределенноеЗначение(ИмяПредопределенногоЗначения));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.НомерТелефона;
		КонецЕсли;
	КонецЕсли;

	Возврат "";
	
КонецФункции

// Функция изменяет внутренний номер пользователя и возвращает массив пользователей, у которых был очищен внутрений номер
//
// Параметры:
//	НомерЛинии		- Строка			- Номер линии
//	Пользователь	- СправочникСсылка	- Пользователь
//
// Возвращаемое значение:
//	Массив	- Массив пользователей, внутренние номера которых были очищены
//
Функция сфпЗаписатьНомерПользователю(НомерЛинии, Пользователь) Экспорт
	
	МассивПользователей = Новый Массив();
	
	// Записываем новый номер только, если он не пустой
	Если НЕ ПустаяСтрока(НомерЛинии) Тогда
		НомерЗаписан = Ложь;
		
		ИмяПВХ_СофтфонНастройкиПользователей = сфпИмяПВХ_СофтфонНастройкиПользователей();
		ИмяРегистраСофтфонНастройкиПользователей = сфпИмяРегистраСофтфонНастройкиПользователей();
		
		ЗначениеНастройки = ПланыВидовХарактеристик[ИмяПВХ_СофтфонНастройкиПользователей].сфпТекущийВнутреннийНомер;
		
		НаборЗаписей = Неопределено;
		
		Если ИмяРегистраСофтфонНастройкиПользователей = "ПраваИНастройки" Тогда
		    НаборЗаписей = РегистрыСведений[ИмяРегистраСофтфонНастройкиПользователей].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПравоНастройка.Установить(ЗначениеНастройки);
			НаборЗаписей.Прочитать();
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.ПользовательПрофиль = Пользователь Тогда
					ЗаписьНабора.Значение = НомерЛинии;
					НомерЗаписан = Истина;
					
				ИначеЕсли ЗаписьНабора.Значение = НомерЛинии Тогда
					ЗаписьНабора.Значение = "";
					МассивПользователей.Добавить(ЗаписьНабора.ПользовательПрофиль);	
				КонецЕсли;	
			КонецЦикла;
			
			Если НЕ НомерЗаписан Тогда
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ПользовательПрофиль = Пользователь;
				ЗаписьНабора.ПравоНастройка = ЗначениеНастройки;
				ЗаписьНабора.Значение = НомерЛинии;
				ЗаписьНабора.Объект = "";
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(ИмяРегистраСофтфонНастройкиПользователей) Тогда
			НаборЗаписей = РегистрыСведений[ИмяРегистраСофтфонНастройкиПользователей].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Настройка.Установить(ЗначениеНастройки);
			НаборЗаписей.Прочитать();
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.Пользователь = Пользователь Тогда
					ЗаписьНабора.Значение = НомерЛинии;
					НомерЗаписан = Истина;
					
				ИначеЕсли ЗаписьНабора.Значение = НомерЛинии Тогда
					ЗаписьНабора.Значение = "";
					МассивПользователей.Добавить(ЗаписьНабора.Пользователь);	
				КонецЕсли;	
			КонецЦикла;
			
			Если НЕ НомерЗаписан Тогда
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.Пользователь = Пользователь;
				ЗаписьНабора.Настройка = ЗначениеНастройки;
				ЗаписьНабора.Значение = НомерЛинии;
			КонецЕсли;
		КонецЕсли;
		
		Если НаборЗаписей <> Неопределено Тогда
			Попытка
				НаборЗаписей.Записать();
			Исключение
				МассивПользователей = Новый Массив();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции // сфпЗаписатьНомерПользователю()

// Процедура изменяет дополнительные внутренние номера пользователя
//
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь
//	НомераЛиний		- Строка			- Номера линий
//
Процедура сфпЗаписатьДополнительныеНомераПользователю(Пользователь, НомераЛиний) Экспорт
	
	// АльфаАвто
	// В базовых правах только есть доступ на чтение прав и настроек
	УстановитьПривилегированныйРежим(Истина);
	// Конец АльфаАвто
	
	ИмяПВХ_СофтфонНастройкиПользователей = сфпИмяПВХ_СофтфонНастройкиПользователей();
	ИмяРегистраСофтфонНастройкиПользователей = сфпИмяРегистраСофтфонНастройкиПользователей();
	
	ЗначениеНастройки = ПланыВидовХарактеристик[ИмяПВХ_СофтфонНастройкиПользователей].сфпДополнительныеВнутренниеНомера;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраСофтфонНастройкиПользователей].СоздатьМенеджерЗаписи();
	
	Если ИмяРегистраСофтфонНастройкиПользователей = "ПраваИНастройки" Тогда
		МенеджерЗаписи.ПользовательПрофиль = Пользователь;
		МенеджерЗаписи.ПравоНастройка = ЗначениеНастройки;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ПользовательПрофиль = Пользователь;
			МенеджерЗаписи.ПравоНастройка = ЗначениеНастройки;
		КонецЕсли;
		
	Иначе	
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.Настройка = ЗначениеНастройки;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Пользователь = Пользователь;
			МенеджерЗаписи.Настройка = ЗначениеНастройки;
		КонецЕсли;
	КонецЕсли;

	Если МенеджерЗаписи.Значение <> НомераЛиний Тогда
		МенеджерЗаписи.Значение = НомераЛиний;
		МенеджерЗаписи.Записать();
	КонецЕсли;

КонецПроцедуры // сфпЗаписатьДополнительныеНомераПользователю()

// Функция возвращает список маршрутизации
//
// Параметры:
//	Объект			- СправочникСсылка	- Владелец контактной информации
//	Пользователь	- СправочникСсылка	- Пользователь для переключения звонков
//
// Возвращаемое значение:
//	Строка	- Строка маршрутизации
//
Функция сфпПолучитьСписокМаршрутизации(Объект = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = сфпТекущийПользователь();
	КонецЕсли;	
	
	ИмяПВХ_СофтфонНастройкиПользователей = сфпИмяПВХ_СофтфонНастройкиПользователей();
	ИмяРегистраСофтфонНастройкиПользователей = сфпИмяРегистраСофтфонНастройкиПользователей();
	
	СписокСтрока = "";
	
	Если НЕ ЗначениеЗаполнено(ИмяПВХ_СофтфонНастройкиПользователей) ИЛИ НЕ ЗначениеЗаполнено(ИмяРегистраСофтфонНастройкиПользователей) Тогда
		Возврат СписокСтрока;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	// АльфаАвто
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НомераТелефоновДляПоиска.Объект КАК Контакт,
	|	НомераТелефоновДляПоиска.Представление,
	|	ЕСТЬNULL(НастройкиПользователей.Значение, """") КАК НомерВнТелефона
	|ИЗ
	|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК НомераТелефоновДляПоиска
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПользовательПрофиль КАК Пользователь, Значение
	|		              ИЗ РегистрСведений." + ИмяРегистраСофтфонНастройкиПользователей + "
	|		              ГДЕ ПравоНастройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик." + ИмяПВХ_СофтфонНастройкиПользователей + ".сфпТекущийВнутреннийНомер)) КАК НастройкиПользователей
	|	ПО НомераТелефоновДляПоиска.Пользователь = НастройкиПользователей.Пользователь";
	// Конец АльфаАвто
	
	Если ЗначениеЗаполнено(Объект) Тогда				   
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	НЕ НомераТелефоновДляПоиска.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И НомераТелефоновДляПоиска.Объект = &Объект";
		
	ИначеЕсли ЗначениеЗаполнено(Пользователь) Тогда				   
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	НомераТелефоновДляПоиска.Пользователь = &Пользователь";
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.НомерВнТелефона) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Выборка.Представление);
		НомерТелефона = СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
		Если ПустаяСтрока(НомерТелефона) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокСтрока = СписокСтрока + Прав(НомерТелефона, 10) + "=" + СокрЛП(Выборка.НомерВнТелефона) + ";";
	КонецЦикла;
	
	Возврат СписокСтрока;
	
КонецФункции // сфпПолучитьСписокМаршрутизации()

// Процедура меняет пользователя для переключения у выбранного контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт, для которого ищется пользователь для переключения звонков
//
// Возвращаемое значение:
//	СправочникСсылка	- Пользователь для переключения звонков 
//
Функция сфпПолучитьПользователяДляПереключенияЗвонков(Контакт) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.Текст = "ВЫБРАТЬ
	               |	сфпНомераТелефоновДляПоиска.Пользователь
	               |ИЗ
	               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
	               |ГДЕ
	               |	сфпНомераТелефоновДляПоиска.Объект = &Контакт";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;	
КонецФункции // сфпПолучитьПользователяДляПереключенияЗвонков()

// Функция возвращает признак наличия взаимодействий по пользователю
//
// Параметры:
//	Ссылка	- ДокументСсылка	- Телефонный звонок
//
// Возвращаемое значение:
//	Булево	- Признак наличия определенного количества взаимодействий
//
Функция сфпЕстьВзаимодействияПоКонтакту(Ссылка) Экспорт
	
	КоличествоВзаимодействий = Константы.сфпКоличествоВзаимодействийДляМаршрутизации.Получить();
	
	ИмяДокументаТелефонныйЗвонок = сфпИмяДокументаТелефонныйЗвонок();
	ИмяРеквизитаАбонентКонтакт = сфпИмяРеквизитаАбонентКонтакт();
	Если ПустаяСтрока(ИмяРеквизитаАбонентКонтакт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Строка(КоличествоВзаимодействий) + "
	|	Ответственный,
	|	Ссылка
	|ИЗ
	|	" + ИмяДокументаТелефонныйЗвонок + "
	|ГДЕ
	|	" + ИмяРеквизитаАбонентКонтакт + " = &Контакт
	|	И НЕ ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ");
	Запрос.УстановитьПараметр("Контакт", Ссылка[ИмяРеквизитаАбонентКонтакт]);
	Результат = Запрос.Выполнить();
	
	ТЗ = Результат.Выгрузить();
	Если ТЗ.Количество() < КоличествоВзаимодействий Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТЗ.Свернуть("Ответственный");
	Если ТЗ.Количество() = 1 И ТЗ[0].Ответственный = Ссылка.Ответственный Тогда
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // сфпЕстьВзаимодействияПоКонтакту() 

// Функция записывает нового пользователя для переключения в регистр номеров телефонов
//
// Параметры:
//	Контакт						- СправочникСсылка	- Контакт
//	НовыйПользователь			- СправочникСсылка	- Новый пользователь для переключения
//  ИскатьНомерВКИПользователя 	- Булево - Признак поиска номера телефона в КИ пользователя
//
// Возвращаемое значение:
//	Булево	- Признак обновления регистра
//
Функция сфпЗаписатьНовогоПользователя(Контакт, НовыйПользователь, ИскатьНомерВКИПользователя = Ложь) Экспорт
	
	НаборЗаписей = РегистрыСведений.сфпНомераТелефоновДляПоиска.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Контакт);
	НаборЗаписей.Прочитать();
	
	ВнутреннийНомер = "";
	Если ЗначениеЗаполнено(НовыйПользователь) Тогда
		Если НЕ ИскатьНомерВКИПользователя Тогда
			  ВнутреннийНомер = сфпТекущийВнутреннийНомер(НовыйПользователь);
		Иначе ВнутреннийНомер = сфпТекущийВнутреннийНомер(НовыйПользователь, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора.Пользователь = НовыйПользователь;
		ЗаписьНабора.ВнутреннийНомер = ВнутреннийНомер;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать(Истина);
		НабораЗписан = Истина;
	Исключение	
		НабораЗписан = Ложь;
	КонецПопытки;
	
	Возврат НабораЗписан;

КонецФункции // сфпЗаписатьНовогоПользователя()	

// Процедура перезаписывает внутренний номер, на который осуществляется маршрутизация пользователя
//
// Параметры:
//	НовыйПользователь			- СправочникСсылка	- Новый пользователь для переключения
//  НомерЛинии 					- Строка - Новый внутренний нмоер пользователя
//
Процедура сфпПерезаписатьНомерЛинииТекущегоПользователяВРегистреПоиска(НовыйПользователь, НомерЛинии) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст =   "ВЫБРАТЬ
	|	сфпНомераТелефоновДляПоиска.Объект,
	|	сфпНомераТелефоновДляПоиска.Вид,
	|	сфпНомераТелефоновДляПоиска.ПорядковыйНомер,
	|	сфпНомераТелефоновДляПоиска.НомерТелефона,
	|	сфпНомераТелефоновДляПоиска.Представление,
	|	сфпНомераТелефоновДляПоиска.Пользователь,
	|	сфпНомераТелефоновДляПоиска.ВнутреннийНомер,
	|	сфпНомераТелефоновДляПоиска.НомерТелефонаДляПоиска
	|ИЗ
	|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
	|ГДЕ
	|	сфпНомераТелефоновДляПоиска.Пользователь = &НовыйПользователь";
	Запрос.УстановитьПараметр("НовыйПользователь", НовыйПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивКонтактов = Новый Массив();
	Пока Выборка.Следующий() Цикл
		// для каждой записи регистра изменяем номер линии на новый
		НайденныйКонтакт = Выборка.Объект;
		Если МассивКонтактов.Найти(НайденныйКонтакт) = Неопределено Тогда		 
			НаборЗаписей = РегистрыСведений.сфпНомераТелефоновДляПоиска.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(НайденныйКонтакт);
			НаборЗаписей.Прочитать();
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если НЕ (ЗаписьНабора.ВнутреннийНомер = НомерЛинии) Тогда
					ЗаписьНабора.ВнутреннийНомер = НомерЛинии;
				КонецЕсли;			
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение
			КонецПопытки;
			МассивКонтактов.Добавить(НайденныйКонтакт);
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

// Функция возвращает признак использования маршрутизации по номеру из КИ пользователя
//
// Возвращаемое значение:
//	Булево	- Используем маршрутизацию по номеру СФ (Значение - Ложь) или по номеру из КИ (Истина)
//
Функция сфпИспользоватьМаршрутизациюПоНомеруИзКИПользователя() Экспорт
	Возврат Константы.сфпИспользоватьВнутреннийНомерИзКИПользователя.Получить();
КонецФункции	

// Функция возвращает таблицу маршрутизации
//
// Параметры:
//	Контакт			- СправочникСсылка	- Контакт
//	Пользователь	- СправочникСсылка	- Пользователь
//
// Возвращаемое значение:
//	Массив	- Таблица маршрутизации
//
Функция сфпПолучитьТаблицуМаршрутизации(Контакт = Неопределено, Пользователь = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сфпНомераТелефоновДляПоиска.НомерТелефона,
	               |	сфпНомераТелефоновДляПоиска.Представление,
	               |	сфпНомераТелефоновДляПоиска.ВнутреннийНомер
	               |ИЗ
	               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска";
	Если НЕ (Контакт = Неопределено) И ЗначениеЗаполнено(Контакт) Тогда
		Запрос.УстановитьПараметр("Объект", Контакт);
		Запрос.Текст = Запрос.Текст + "				   
	               |ГДЕ
	               |	сфпНомераТелефоновДляПоиска.Объект = &Объект";
		Если НЕ (Пользователь = Неопределено) И ЗначениеЗаполнено(Пользователь) Тогда
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
			Запрос.Текст = Запрос.Текст + "				   
	               |	И сфпНомераТелефоновДляПоиска.Пользователь = &Пользователь";
		КонецЕсли;		   
	ИначеЕсли НЕ (Пользователь = Неопределено) И ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.Текст = Запрос.Текст + "				   
	               |ГДЕ
	               |	сфпНомераТелефоновДляПоиска.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	ТаблицаМаршрутизации = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураТаблицы = Новый Структура();
		СтруктураТаблицы.Вставить("НомерТелефона",		Выборка.НомерТелефона);
		СтруктураТаблицы.Вставить("Представление",		Выборка.Представление);
		СтруктураТаблицы.Вставить("ВнутреннийНомер",	Выборка.ВнутреннийНомер);
		ТаблицаМаршрутизации.Добавить(СтруктураТаблицы);
	КонецЦикла;	
	Возврат ТаблицаМаршрутизации;
КонецФункции // сфпПолучитьТаблицуМаршрутизации()	

// Функция возвращает список маршрутизации
//
// Параметры:
//	Объект			- СправочникСсылка	- Владелец контактной информации
//	Пользователь	- СправочникСсылка	- Пользователь для переключения звонков
//
// Возвращаемое значение:
//	Строка	- Строка маршрутизации
//
Функция сфпСформироватьСписокМаршрутизации(СтараяТаблица, НоваяТаблица) Экспорт
	
	СтрокаМаршрутизации = "";
	
	Для Каждого СтрокаТаблицы Из СтараяТаблица Цикл
		Если ПустаяСтрока(СтрокаТаблицы.ВнутреннийНомер) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = Неопределено;
		Для Каждого СтрокаМассива Из НоваяТаблица Цикл
			Если СтрокаМассива.НомерТелефона = СтрокаТаблицы.НомерТелефона Тогда
				НайденнаяСтрока = СтрокаМассива;
				Прервать;	
			КонецЕсли;	
		КонецЦикла;
		
		Если НайденнаяСтрока = Неопределено Тогда
			СтруктураНомера	= сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаТаблицы.Представление);
			НомерТелефона = СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
			СтрокаМаршрутизации	= СтрокаМаршрутизации + СокрЛП(НомерТелефона) + "=" + ";";

		ИначеЕсли СтрокаТаблицы.ВнутреннийНомер <> НайденнаяСтрока.ВнутреннийНомер Тогда
			СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаТаблицы.Представление);
			НомерТелефона = СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
			СтрокаМаршрутизации	= СтрокаМаршрутизации + СокрЛП(НомерТелефона) + "=" + СокрЛП(НайденнаяСтрока.ВнутреннийНомер) + ";";
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из НоваяТаблица Цикл
		Если ПустаяСтрока(СтрокаТаблицы.ВнутреннийНомер) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = Неопределено;
		Для Каждого СтрокаМассива Из СтараяТаблица Цикл
			Если СтрокаМассива.НомерТелефона = СтрокаТаблицы.НомерТелефона Тогда
				НайденнаяСтрока = СтрокаМассива;
				Прервать;	
			КонецЕсли;	
		КонецЦикла;
		
		Если НайденнаяСтрока = Неопределено Тогда
			СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаТаблицы.Представление);
			НомерТелефона = СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
			СтрокаМаршрутизации = СтрокаМаршрутизации + СокрЛП(НомерТелефона) + "=" + СокрЛП(СтрокаТаблицы.ВнутреннийНомер) + ";";

		ИначеЕсли НЕ ЗначениеЗаполнено(НайденнаяСтрока.ВнутреннийНомер) И СтрокаТаблицы.ВнутреннийНомер <> НайденнаяСтрока.ВнутреннийНомер Тогда
			СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаТаблицы.Представление);
			НомерТелефона = СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
			СтрокаМаршрутизации = СтрокаМаршрутизации + СокрЛП(НомерТелефона) + "=" + СокрЛП(СтрокаТаблицы.ВнутреннийНомер) + ";";
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтрокаМаршрутизации;

КонецФункции // сфпПолучитьСписокМаршрутизации()

// Процедура изменяет таблицу маршрутизации в АТС
//
// Параметры:
//	Объект	- СправочникСсылка	- Объект, информацию о маршрутизации которого следует изменить
//
//@skip-check code-never-compilied
Процедура сфпЗаменитьМаршрутизациюВАТС(СписокМаршрутизации) Экспорт
	Если ПустаяСтрока(СписокМаршрутизации) Тогда Возврат; КонецЕсли;
	#Если Вебклиент Тогда
		Состояние(НСтр("ru='Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
		ВебСервис = Неопределено;
		АдресСервера = Константы.сфпИмяСервера.Получить();
		ПортСервера = Константы.сфпПорт.Получить();
		SSL = Новый ЗащищенноеСоединениеOpenSSL();
		Попытка
			Определения	= Новый WSОпределения("http://" + АдресСервера + ":" + Формат(Число(ПортСервера), "ЧГ=0") + "/wsdl/ISOAPSoftPhoneSrv",,,,, SSL);
			ВебСервис = Новый WSПрокси(Определения, "http://tempuri.org/", "ISOAPSoftPhoneSrvservice", "ISOAPSoftPhoneSrvPort",,, SSL);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Подключение к серверу СофтФон'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось подключиться к серверу СофтФон'"));
		КонецПопытки;	
		Если ВебСервис = Неопределено Тогда Возврат; КонецЕсли;
		ИдентификаторМаршрутизации = сфпПолучитьИдентификаторМаршрутизации(Истина);
		Попытка
			ВебСервис.SendStrData("", 1, "", ИдентификаторМаршрутизации);
			ВебСервис.SendStrData("", 0, СписокМаршрутизации, ИдентификаторМаршрутизации);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Запись таблицы маршрутизации'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось записать таблицу маршрутизации'"));
		КонецПопытки;	
	#КонецЕсли
КонецПроцедуры // сфпЗаменитьМаршрутизациюВАТС()

// Процедура изменяет таблицу маршрутизации в АТС
//
// Параметры:
//	Объект	- СправочникСсылка	- Объект, информацию о маршрутизации которого следует изменить
//
//@skip-check code-never-compilied
Процедура сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации) Экспорт
	Если ПустаяСтрока(СписокМаршрутизации) Тогда Возврат; КонецЕсли;
	#Если Вебклиент Тогда
		Состояние(НСтр("ru='Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
		ВебСервис 		= Неопределено;
		АдресСервера	= Константы.сфпИмяСервера.Получить();
		ПортСервера		= Константы.сфпПорт.Получить();
		Попытка
			Определения	= Новый WSОпределения("http://" + АдресСервера + ":" + Формат(Число(ПортСервера), "ЧГ=0") + "/wsdl/ISOAPSoftPhoneSrv");
			ВебСервис	= Новый WSПрокси(Определения, "http://tempuri.org/", "ISOAPSoftPhoneSrvservice", "ISOAPSoftPhoneSrvPort");
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Подключение к серверу СофтФон'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось подключиться к серверу СофтФон'"));
		КонецПопытки;	
		Если ВебСервис = Неопределено Тогда Возврат; КонецЕсли;
		ИдентификаторМаршрутизации	= сфпПолучитьИдентификаторМаршрутизации(Ложь);
		Если ПустаяСтрока(ИдентификаторМаршрутизации) Тогда
			// Если таблица маршрутизации еще ни разу не передавалась на сервер СофтФон
			СтарыйНабор = Новый Массив;
			НовыйНабор	= сфпПолучитьТаблицуМаршрутизации();
			СписокМаршрутизации = сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпЗаменитьМаршрутизациюВАТС(СписокМаршрутизации);
		Иначе	
			Попытка
				ВебСервис.SendStrData("", 2, СписокМаршрутизации, ИдентификаторМаршрутизации);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru='Запись таблицы маршрутизации'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось записать таблицу маршрутизации'"));
			КонецПопытки;	
		КонецЕсли;	
	#КонецЕсли
КонецПроцедуры // сфпИзменитьМаршрутизациюВАТС()

// Функция определяет требуется ли обновитьтаблицу маршрутизации после записи телефонного звонка
//
// Параметры:
//	НовыйЗвонок	- ДокументСсылка	- Новый телефонный звонок
//
// Возвращаемое значение:
//	Булево	- Необходимость обновления таблицы маршрутизации
//
Процедура сфпОбновитьТаблицуМаршрутизации(НовыйЗвонок) Экспорт
	
	ТребуетсяОбновление = Ложь;
	
	ИмяРеквизитаАбонентКонтакт = сфпИмяРеквизитаАбонентКонтакт();
	Если ПустаяСтрока(ИмяРеквизитаАбонентКонтакт) Тогда
		Возврат;
	КонецЕсли;
	
	Если сфпЕстьВзаимодействияПоКонтакту(НовыйЗвонок) Тогда
		ПользовательДляПереключения	= сфпПолучитьПользователяДляПереключенияЗвонков(НовыйЗвонок[ИмяРеквизитаАбонентКонтакт]);
		ТребуетсяОбновление	= НЕ (ПользовательДляПереключения = НовыйЗвонок.Ответственный);
	КонецЕсли;
	
	Если ТребуетсяОбновление Тогда
		СтарыйНабор	= сфпПолучитьТаблицуМаршрутизации(НовыйЗвонок[ИмяРеквизитаАбонентКонтакт], ПользовательДляПереключения);
		ПользовательОбновлен	= сфпЗаписатьНовогоПользователя(НовыйЗвонок[ИмяРеквизитаАбонентКонтакт], НовыйЗвонок.Ответственный);
		Если ПользовательОбновлен Тогда
			НовыйНабор	= сфпПолучитьТаблицуМаршрутизации(НовыйЗвонок[ИмяРеквизитаАбонентКонтакт], НовыйЗвонок.Ответственный);
			СписокМаршрутизации = сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // сфпОбновитьТаблицуМаршрутизации()	


/////////////////////////////////////////////////
// ЗАПИСЬ ТЕЛЕФОННЫХ ПЕРЕГОВОРОВ

// Функция проверяет использование записи переговоров
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования СофтФона
//
Функция сфпИспользоватьЗаписьПереговоров() Экспорт
	Возврат Константы.сфпИспользоватьЗаписьПереговоров.Получить();
КонецФункции // ИспользоватьЗаписьПереговоров(

// Функция проверяет использование Спрут7
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования СофтФона
//
Функция сфпИспользоватьСпрут7() Экспорт
	Возврат Константы.сфпИспользоватьСпрут7.Получить();
КонецФункции // ИспользоватьСпрут7()

// Функция проверяет использование CLON
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования СофтФона
//
Функция сфпИспользоватьCLON() Экспорт
	Возврат Константы.сфпИспользоватьCLON.Получить();
КонецФункции // ИспользоватьCLON()

// Функция возвращает массив пользователей, телефонные переговоры которых могут прослушиваться переданным пользователем
//
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь, который контролирует телефонные переговоры
//
// Возвращаемое значение:
//	Массив	- Массив прослушиваемых пользователей
//
Функция сфпПолучитьМассивПрослушиваемыхПользователей(Пользователь) Экспорт
	МассивПользователей = Новый Массив;
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат МассивПользователей;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	СписокПользователейГрупп = Новый СписокЗначений;
	ИспользоватьГруппыПользователей	= сфпИспользоватьГруппыПользователей();	
	Если ИспользоватьГруппыПользователей Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	сфпДоступныеДляПрослушиванияПользователи.КонтролируемыйПользователь КАК Группа
		               |ИЗ
		               |	РегистрСведений.сфпДоступныеДляПрослушиванияПользователи КАК сфпДоступныеДляПрослушиванияПользователи
		               |ГДЕ
		               |	сфпДоступныеДляПрослушиванияПользователи.Пользователь = &Пользователь
		               |	И сфпДоступныеДляПрослушиванияПользователи.ЭтоГруппа";
		СписокГрупп = Новый СписокЗначений;
		СписокГрупп.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Группа"));
		Если СписокГрупп.НайтиПоЗначению(Справочники.ГруппыПользователей.ВсеПользователи) = Неопределено Тогда
			Запрос.УстановитьПараметр("СписокГрупп", СписокГрупп);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ГруппыПользователейСостав.Пользователь КАК Пользователь
			               |ИЗ
			               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			               |ГДЕ
			               |	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&СписокГрупп)";
			СписокПользователейГрупп.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь"));
		Иначе	
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	Пользователи.Ссылка КАК Пользователь
			               |ИЗ
			               |	Справочник.Пользователи КАК Пользователи";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
			   МассивПользователей.Добавить(Выборка.Пользователь);
		   	КонецЦикла;
			Если МассивПользователей.Найти(Пользователь) = Неопределено Тогда
				МассивПользователей.Добавить(Пользователь);
			КонецЕсли;				
			Возврат МассивПользователей;	
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	сфпДоступныеДляПрослушиванияПользователи.КонтролируемыйПользователь КАК Пользователь
	               |ИЗ
	               |	РегистрСведений.сфпДоступныеДляПрослушиванияПользователи КАК сфпДоступныеДляПрослушиванияПользователи
	               |ГДЕ
	               |	сфпДоступныеДляПрослушиванияПользователи.Пользователь = &Пользователь
	               |	И НЕ сфпДоступныеДляПрослушиванияПользователи.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	   МассивПользователей.Добавить(Выборка.Пользователь);
	КонецЦикла;
	Если ИспользоватьГруппыПользователей Тогда
		Для Каждого ПользовательГруппы Из СписокПользователейГрупп Цикл
			Если МассивПользователей.Найти(ПользовательГруппы.Значение) = Неопределено Тогда
				МассивПользователей.Добавить(ПользовательГруппы.Значение);
			КонецЕсли;	
		КонецЦикла;	                
	КонецЕсли;	
	Если МассивПользователей.Найти(Пользователь) = Неопределено Тогда
		МассивПользователей.Добавить(Пользователь);
	КонецЕсли;
	Возврат МассивПользователей;	
КонецФункции // сфпПолучитьМассивПрослушиваемыхПользователей()	


/////////////////////////////////////////////////
// МАСТЕР НАСТРОЙКИ IP-АТС AGAT UX

// Функция возвращает массив пользователей, для использования в мастере настроек
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив пользователей
//
Функция сфпПолучитьМассивПользователей() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Пользователи.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");			   
КонецФункции // сфпПолучитьМассивПользователей()

// Функция возвращает адрес хранилища файла настроек мастера настройки
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Адрес хранилища мастера настроек
//
Функция сфпВернутьХранилищеФайлаНастройкиМастера() Экспорт
	Макет = ПолучитьОбщийМакет("сфпФайлНастроекМастераAgatUX");
	Адрес = ПоместитьВоВременноеХранилище(Макет);
	Возврат Адрес;
КонецФункции // сфпВернутьХранилищеФайлаНастройкиМастера()

// Функция возвращает адрес хранилища мастера настроек
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Адрес хранилища мастера настроек
//
Функция сфпВернутьХранилищеМастераНастройки() Экспорт
	Макет = ПолучитьОбщийМакет("сфпУстановщикМастераНастройкиAgatUX");
	Адрес = ПоместитьВоВременноеХранилище(Макет);
	Возврат Адрес;
КонецФункции // сфпВернутьХранилищеМастераНастройки()


/////////////////////////////////////////////////
// СИСТЕМА ЗАПИСИ ТЕЛЕФОННЫХ ПЕРЕГОВОРОВ CLON

// Функция убирает из IP-адреса пробелы и незначащие нули
//
// Параметры:
//	IPАдрес	- Строка IP-адреса
//
// Возвращаемое значение:
//	Строка	- Строка IP-адреса после очистки
//
Функция ОчиститьIPАдрес(IPАдрес)
	Попытка
		СтрокаIP		= IPАдрес;
		ПозицияТочки	= Найти(СтрокаIP, ".");
		Строка1IP		= Лев(СтрокаIP, ПозицияТочки - 1);
		СтрокаIP		= Сред(СтрокаIP, ПозицияТочки + 1);
		ПозицияТочки	= Найти(СтрокаIP, ".");
		Строка2IP		= Лев(СтрокаIP, ПозицияТочки - 1);
		СтрокаIP		= Сред(СтрокаIP, ПозицияТочки + 1);
		ПозицияТочки	= Найти(СтрокаIP, ".");
		Строка3IP		= Лев(СтрокаIP, ПозицияТочки - 1);
		Строка4IP		= Сред(СтрокаIP, ПозицияТочки + 1);
		CLONServerIP 	= Строка(Число(СокрЛП(Строка1IP))) + "." + Строка(Число(СокрЛП(Строка2IP))) + "."
			+ Строка(Число(СокрЛП(Строка3IP))) + "." + Строка(Число(СокрЛП(Строка4IP)));
	Исключение
		CLONServerIP	= IPАдрес;
	КонецПопытки;
	Возврат CLONServerIP;
КонецФункции // ОчиститьIPАдрес()

// Функция возвращает структуру настроек для подключения к серверу CLON
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура настроек
//
Функция сфпПолучитьНастройкиCLON() Экспорт
	НастройкиCLON = Новый Структура;
	CLONServerIP = ОчиститьIPАдрес(Константы.сфпCLONServerIP.Получить());
	НастройкиCLON.Вставить("CLONServerIP",			CLONServerIP);
	НастройкиCLON.Вставить("CLONServerPort",		Константы.сфпCLONServerPort.Получить());
	CLONType = Константы.сфпCLONType.Получить();
	Если CLONType = Перечисления.сфпCLONType.E1 Тогда
		НастройкиCLON.Вставить("CLONType",	0);
	ИначеЕсли CLONType = Перечисления.сфпCLONType.BRI Тогда
		НастройкиCLON.Вставить("CLONType",	2);
	ИначеЕсли CLONType = Перечисления.сфпCLONType.IP Тогда
		НастройкиCLON.Вставить("CLONType",	3);
	Иначе	
		НастройкиCLON.Вставить("CLONType",	1);
	КонецЕсли;	
	НастройкиCLON.Вставить("CLONServerLogin",		СокрЛП(Константы.сфпCLONServerLogin.Получить()));
	НастройкиCLON.Вставить("CLONServerPassword",	СокрЛП(Константы.сфпCLONServerPassword.Получить()));
	Возврат НастройкиCLON;
КонецФункции // сфпПолучитьНастройкиCLON()


/////////////////////////////////////////////////
// ОБЩИЕ ТЕЛЕФОННЫЕ КНИГИ СЕРВЕРА СОФТФОН

// Функция проверяет заполнение констант настроек сервера СофтФон
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Заполнение настроек
//
Функция сфпЗаполненыНастройкиСервера()
	ЕстьОшибки = Ложь;	
	Если ПустаяСтрока(Константы.сфпИмяСервера.Получить()) Тогда
		ЕстьОшибки = Истина;	
	КонецЕсли;	
	Если ПустаяСтрока(Константы.сфпПорт.Получить()) Тогда
		ЕстьОшибки = Истина;	
	КонецЕсли;
	Возврат НЕ ЕстьОшибки;
КонецФункции // сфпЗаполненыНастройкиСервера()	

// Функция возвращает расписание регламентного задания
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	РасписаниеРегламентногоЗадания	- Расписание регламентного задания
//
Функция сфпПолучитьРасписаниеРегламентноеЗадание() Экспорт
	РегламентноеЗадание = сфпПолучитьРегламентноеЗаданиеОбновленияТелефонныхКниг();
	Возврат РегламентноеЗадание.Расписание;
КонецФункции // сфпПолучитьРасписаниеРегламентноеЗадание();

// Функция возвращает регламентное задание ПроверкаСМС
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	РегламентноеЗадание	- Регламентное задание обновления телефонных книг
//
Функция сфпПолучитьРегламентноеЗаданиеОбновленияТелефонныхКниг() Экспорт
    Возврат РегламентныеЗадания.НайтиПредопределенное("сфпОбновлениеТелефонныхКниг");
КонецФункции // сфпПолучитьРегламентноеЗаданиеОбновленияТелефонныхКниг()

// Функция возвращает строку с описанием номера для дерева телефонной книги
//
// Параметры:
//	Контакт			- СправочникСсылка	- Контакт
//	ВидТелефона		- СправочникСсылка	- Вид телефонного номера
//	ПорядковыйНомер	- Число				- Порядковый номер телефона
//
Функция сфпПолучитьПредставлениеНомера(Контакт, ВидТелефона, ПорядковыйНомер) Экспорт
	ПредставлениеНомера = "";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",				Контакт);
	Запрос.УстановитьПараметр("Вид",				ВидТелефона);
	Запрос.УстановитьПараметр("ПорядковыйНомер",	ПорядковыйНомер);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	сфпНомераТелефоновДляПоиска.Представление
	               |ИЗ
	               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
	               |ГДЕ
	               |	сфпНомераТелефоновДляПоиска.Объект = &Объект
	               |	И сфпНомераТелефоновДляПоиска.Вид = &Вид";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредставлениеНомера = Выборка.Представление;
	КонецЕсли;	
	Возврат ПредставлениеНомера;
КонецФункции // сфпПолучитьПредставлениеНомера()	

// Функция возвращает массив всех пользователей
//
// Параметры:
//	МассивВидов	- Массив	- Массив используемых  видов телефонов
//
// Возвращаемое значение:
//	Массив	- Массив всех пользователей
//
Функция сфпПолучитьМассивВсехПользователей(МассивВидов) Экспорт
	
	МассивВсехПользователей = Новый Массив();
	
	СписокВидов = Новый СписокЗначений();
	СписокВидов.ЗагрузитьЗначения(МассивВидов);
	
	ИмяПВХ_СофтфонНастройкиПользователей = сфпИмяПВХ_СофтфонНастройкиПользователей();
	ИмяРегистраСофтфонНастройкиПользователей = сфпИмяРегистраСофтфонНастройкиПользователей();
	
	ЕстьРеквизитТекущееПодразделение = Метаданные.Справочники.Пользователи.Реквизиты.Найти("ТекущееПодразделение") <> Неопределено;
	
	// АльфаАвто
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Объект КАК Объект,
	|	Пользователи.Наименование КАК Наименование,
	|	Пользователи.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(Телефоны.Вид, ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)) КАК Вид,
	|	ЕСТЬNULL(Телефоны.НаименованиеВида, """") КАК НаименованиеВида,
	|	ЕСТЬNULL(Телефоны.ПорядковыйНомер, 0) КАК ПорядковыйНомер,
	|	ЕСТЬNULL(Телефоны.Представление, """") КАК Представление,
	|	ЕСТЬNULL(Настройки.Значение, """") КАК ВнутреннийНомер
	|ИЗ
	|	(ВЫБРАТЬ
	|		Ссылка КАК Объект,
	|		Наименование," + ?(ЕстьРеквизитТекущееПодразделение, "
	|		ТекущееПодразделение КАК Подразделение", "
	|	    """" КАК Подразделение") + "	
	|	ИЗ
	|		Справочник.Пользователи
	|	ГДЕ
	|		НЕ ПометкаУдаления) КАК Пользователи
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Объект, Вид, ПорядковыйНомер, Представление, Вид.Наименование КАК НаименованиеВида
	|	                  ИЗ РегистрСведений.сфпНомераТелефоновДляПоиска КАК НомераТелефоновДляПоиска
	|		              ГДЕ Вид В(&СписокВидов)) КАК Телефоны
	|	ПО Пользователи.Объект = Телефоны.Объект
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ " + ?(ИмяРегистраСофтфонНастройкиПользователей = "ПраваИНастройки", "ПользовательПрофиль", "Пользователь") + ", Значение
	|	                  ИЗ РегистрСведений." + ИмяРегистраСофтфонНастройкиПользователей + "
	|	                  ГДЕ " + ?(ИмяРегистраСофтфонНастройкиПользователей = "ПраваИНастройки", "ПравоНастройка", "Настройка") + " = &Настройка) КАК Настройки
	|	ПО Пользователи.Объект = Настройки.ПользовательПрофиль
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование,
	|	ЕСТЬNULL(Телефоны.Вид, ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)),
	|	ЕСТЬNULL(Телефоны.ПорядковыйНомер, 0)");
	// Конец АльфаАвто
	Запрос.УстановитьПараметр("СписокВидов", СписокВидов);
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик[ИмяПВХ_СофтфонНастройкиПользователей].сфпТекущийВнутреннийНомер);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Объект) Тогда
			СтруктураПользователя = Новый Структура();
			СтруктураПользователя.Вставить("Объект",		  Выборка.Объект);
			СтруктураПользователя.Вставить("Наименование",	   Выборка.Наименование);
			СтруктураПользователя.Вставить("ВнутреннийНомер",  Выборка.ВнутреннийНомер);
			СтруктураПользователя.Вставить("Подразделение",	   Выборка.Подразделение);
			СтруктураПользователя.Вставить("Вид",			   Выборка.Вид);
			СтруктураПользователя.Вставить("НаименованиеВида", Выборка.НаименованиеВида);
			СтруктураПользователя.Вставить("ПорядковыйНомер",  Выборка.ПорядковыйНомер);
			СтруктураПользователя.Вставить("Представление",	   Выборка.Представление);
			
			МассивВсехПользователей.Добавить(СтруктураПользователя);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивВсехПользователей;
	
КонецФункции // ПолучитьМассивВсехПользователей()	

// Процедура проверяет заполнение структуры строки телефонной книги и добавляет ее в массив строк
//
// Параметры:
//	ЭлементМассива			- Структура	- Структура строки телефонной книги
//	МассивТелефоннойКниги	- Массив	- Массив строк телефонной книги
//	Родитель				- Структура	- Строка-родитель текущей строки телефонной книги
//
Процедура сфпДобавитьВМассивТелефоннойКниги(ЭлементМассива, МассивТелефоннойКниги, Родитель)
	
	Если сфпЭтоСсылка(ЭлементМассива.Объект) И НЕ сфпСсылкаСуществует(ЭлементМассива.Объект) Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(ЭлементМассива.Объект) Тогда
		Если ЭлементМассива.Картинка = 2 Тогда
			Если ТипЗнч(ЭлементМассива.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
				ВнутреннийНомер	= сфпТекущийВнутреннийНомер(ЭлементМассива.Объект);
				Если ПустаяСтрока(ВнутреннийНомер) Тогда Возврат; КонецЕсли;
				ЭлементМассива.Наименование = НСтр("ru='Внутренний номер: '") + ВнутреннийНомер;
			Иначе
				ПредставлениеНомера = сфпПолучитьПредставлениеНомера(Родитель.Объект, ЭлементМассива.Объект, ЭлементМассива.ПорядковыйНомер);
				Если ПустаяСтрока(ПредставлениеНомера) Тогда Возврат; КонецЕсли;
				ЭлементМассива.Наименование = ЭлементМассива.Объект.Наименование + ": " + ПредставлениеНомера;
			КонецЕсли;	
			МассивТелефоннойКниги.Добавить(ЭлементМассива);
		Иначе
			Если ЭлементМассива.Объект.ПометкаУдаления Тогда Возврат; КонецЕсли; 
			ЭлементМассива.Наименование = ЭлементМассива.Объект.Наименование;
			ПодчиненныеСтроки 			= ЭлементМассива.Строки;
			ЭлементМассива.Строки		= Новый Массив;
			Для Каждого ПодчиненныйЭлемент Из  ПодчиненныеСтроки Цикл
				сфпДобавитьВМассивТелефоннойКниги(ПодчиненныйЭлемент, ЭлементМассива.Строки, ЭлементМассива);
			КонецЦикла;	
			Если ЭлементМассива.Строки.Количество() > 0 Тогда
				МассивТелефоннойКниги.Добавить(ЭлементМассива);
			КонецЕсли;	
		КонецЕсли;
	Иначе
		ПодчиненныеСтроки 		= ЭлементМассива.Строки;
		ЭлементМассива.Строки	= Новый Массив;
		Для Каждого ПодчиненныйЭлемент Из  ПодчиненныеСтроки Цикл
			сфпДобавитьВМассивТелефоннойКниги(ПодчиненныйЭлемент, ЭлементМассива.Строки, ЭлементМассива);
		КонецЦикла;	
		Если ЭлементМассива.Строки.Количество() > 0 Тогда
			МассивТелефоннойКниги.Добавить(ЭлементМассива);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // сфпДобавитьВМассивТелефоннойКниги()	

// Функция обновляет данные телефонной книги и возвращает ее структуру
//
// Параметры:
//	ТелефоннаяКнига	- СправочникСсылка	- Телефонная книга
//
Функция сфпОбновитьТелефоннуюКнигу(ТелефоннаяКнига)
	СтруктураКниги	= Новый Структура;
	СтруктураКниги.Вставить("Идентификатор",	ТелефоннаяКнига.Идентификатор);
	СтруктураКниги.Вставить("ИмяКниги",			ТелефоннаяКнига.Наименование);
	СтруктураКниги.Вставить("Порядок",			ТелефоннаяКнига.РеквизитДопУпорядочивания);
	Если ТелефоннаяКнига.ПометкаУдаления Тогда
		СтруктураКниги.Вставить("ВидыТелефонов",	Новый Массив);
		СтруктураКниги.Вставить("МассивКниги",		Новый Массив);
		Возврат СтруктураКниги;
	КонецЕсли;	
	ТелефоннаяКнигаОбъект	= ТелефоннаяКнига.ПолучитьОбъект();
	МассивВидовТелефонов	= Новый Массив;
	МассивВидов				= Новый Массив;
	Для Каждого СтрокаВида Из ТелефоннаяКнигаОбъект.ВидыТелефонов Цикл
		Если НЕ СтрокаВида.Пометка Тогда
			Продолжить;
		ИначеЕсли СтрокаВида.Вид = НСтр("ru='Внутренний номер'") Тогда 	
			СтруктураВида = Новый Структура;
			СтруктураВида.Вставить("Идентификатор",	СтрокаВида.Идентификатор);
			СтруктураВида.Вставить("Наименование",	СтрокаВида.Наименование);
			СтруктураВида.Вставить("Псевдоним",		СтрокаВида.Псевдоним);
			МассивВидовТелефонов.Добавить(СтруктураВида);
			МассивВидов.Добавить(СтрокаВида.Вид);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаВида.Вид) Тогда
			СтрокаВида.Пометка	= Ложь;
		ИначеЕсли НЕ сфпСсылкаСуществует(СтрокаВида.Вид) Тогда
			СтрокаВида.Вид		= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			СтрокаВида.Пометка	= Ложь;
		ИначеЕсли СтрокаВида.Вид.ПометкаУдаления Тогда
			СтрокаВида.Вид		= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			СтрокаВида.Пометка	= Ложь;
		Иначе
			СтруктураВида = Новый Структура;
			СтруктураВида.Вставить("Идентификатор",	СтрокаВида.Идентификатор);
			СтруктураВида.Вставить("Наименование",	СтрокаВида.Наименование);
			СтруктураВида.Вставить("Псевдоним",		СтрокаВида.Псевдоним);
			МассивВидовТелефонов.Добавить(СтруктураВида);
			МассивВидов.Добавить(СтрокаВида.Вид);
		КонецЕсли;	
	КонецЦикла;
	МассивВсехПользователей	= сфпПолучитьМассивВсехПользователей(МассивВидов);
	МассивКниги				= ТелефоннаяКнигаОбъект.МассивКниги.Получить();
	Если МассивКниги = Неопределено Тогда
		МассивКниги	= Новый Массив;
	КонецЕсли;	
	// Обновляем телефонную книгу
	МассивТелефоннойКниги	= Новый Массив;
	Для Каждого ЭлементМассива Из МассивКниги Цикл
		сфпДобавитьВМассивТелефоннойКниги(ЭлементМассива, МассивТелефоннойКниги, Неопределено);
	КонецЦикла;	
	ТелефоннаяКнигаОбъект.МассивКниги = Новый ХранилищеЗначения(МассивТелефоннойКниги, Новый СжатиеДанных(9));
	Попытка	
		ТелефоннаяКнигаОбъект.Записать();
	Исключение
	КонецПопытки;	
	СтруктураКниги.Вставить("ВидыТелефонов",	МассивВидовТелефонов);
	СтруктураКниги.Вставить("МассивКниги",		МассивТелефоннойКниги);
	Возврат СтруктураКниги;
КонецФункции // сфпОбновитьТелефоннуюКнигу()	
	
// Процедура записывает описание группы телефонной книги
//
// Параметры:
//	XMLОписание		- ЗаписьXML	- Описание телефонной книги
//	СтруктураГруппы	- Структура	- Структура группы
//
Процедура сфпЗаписатьОписаниеГруппы(XMLОписание, СтруктураГруппы)
	XMLОписание.ЗаписатьНачалоЭлемента("group");
	XMLОписание.ЗаписатьАтрибут("id",		XMLСтрока(СтруктураГруппы.Идентификатор));
	XMLОписание.ЗаписатьАтрибут("name",		XMLСтрока(СтруктураГруппы.Наименование));
	XMLОписание.ЗаписатьАтрибут("deleted",	XMLСтрока(0));
	Для Каждого СтрокаСтруктурыГруппы Из СтруктураГруппы.Строки Цикл
		Если СтрокаСтруктурыГруппы.ЭтоГруппа Тогда
			сфпЗаписатьОписаниеГруппы(XMLОписание, СтрокаСтруктурыГруппы);
		Иначе
			сфпЗаписатьОписаниеКонтакта(XMLОписание, СтрокаСтруктурыГруппы);
		КонецЕсли;	
	КонецЦикла;
	XMLОписание.ЗаписатьКонецЭлемента();
КонецПроцедуры	// сфпЗаписатьОписаниеГруппы()

// Процедура записывает описание контакта телефонной книги
//
// Параметры:
//	XMLОписание			- ЗаписьXML	- Описание телефонной книги
//	СтруктураКонтакта	- Структура	- Структура контакта
//
Процедура сфпЗаписатьОписаниеКонтакта(XMLОписание, СтруктураКонтакта)
	XMLОписание.ЗаписатьНачалоЭлемента("contact");
	XMLОписание.ЗаписатьАтрибут("id",			XMLСтрока(СтруктураКонтакта.Идентификатор));
	XMLОписание.ЗаписатьАтрибут("name",			XMLСтрока(СтруктураКонтакта.Наименование));
	XMLОписание.ЗаписатьАтрибут("extcode",		XMLСтрока(""));
	XMLОписание.ЗаписатьАтрибут("timestamp",	XMLСтрока(""));
	XMLОписание.ЗаписатьАтрибут("deleted",		XMLСтрока(0));
	СписокНомеров = Новый СписокЗначений;	
	Для Каждого СтрокаСтруктурыКонтакта Из СтруктураКонтакта.Строки Цикл
		ПозицияРазделителя = Найти(СтрокаСтруктурыКонтакта.Наименование, ": ");
		Если ПозицияРазделителя > 0 Тогда
			Телефон = Сред(СтрокаСтруктурыКонтакта.Наименование, ПозицияРазделителя + 2);
			СтруктураНомера	= сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
			Телефон = сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера);
			
			НайденныйЭлемент = СписокНомеров.НайтиПоЗначению(СтрокаСтруктурыКонтакта.Идентификатор);
			Если НайденныйЭлемент = Неопределено Тогда 		
				СписокНомеров.Добавить(СтрокаСтруктурыКонтакта.Идентификатор, Телефон);
			Иначе
				НайденныйЭлемент.Представление = НайденныйЭлемент.Представление + ";" + Телефон;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Для Каждого ЭлементСписка Из СписокНомеров Цикл
		XMLОписание.ЗаписатьНачалоЭлемента("item");
		XMLОписание.ЗаписатьАтрибут("infoid",	XMLСтрока(ЭлементСписка.Значение));
		XMLОписание.ЗаписатьАтрибут("value",	XMLСтрока(ЭлементСписка.Представление));
		XMLОписание.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	АватарКонтакта = сфпПолучитьАватарКонтакта(СтруктураКонтакта.Объект, Ложь);
	Если НЕ ПустаяСтрока(АватарКонтакта) Тогда
		XMLОписание.ЗаписатьНачалоЭлемента("image");
		XMLОписание.ЗаписатьТекст(XMLСтрока(СтрЗаменить(АватарКонтакта, Символы.ПС, "")));
		XMLОписание.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	XMLОписание.ЗаписатьКонецЭлемента();
КонецПроцедуры // сфпЗаписатьОписаниеКонтакта()

// Функция формирует XML-строку описания телефонной книги
//
// Параметры:
//	СтруктураКниги	- Структура	- Структура телефонной книги
//	УдалениеКниги	- Булево	- Признак формирования сокращенной структуры книги для ее удаления
//		
// Возвращаемое значение:
//	Строка	- XML-строка описания телефонной книги
//
Функция сфпСформироватьОписаниеТелефоннойКниги(СтруктураКниги, УдалениеКниги = Ложь) Экспорт
	XMLОписание = Новый ЗаписьXML();
	XMLОписание.УстановитьСтроку();
	XMLОписание.ЗаписатьОбъявлениеXML();
	XMLОписание.ЗаписатьНачалоЭлемента("addressbook");
	XMLОписание.ЗаписатьАтрибут("id",			XMLСтрока(СтруктураКниги.Идентификатор));
	XMLОписание.ЗаписатьАтрибут("name",			XMLСтрока(СтруктураКниги.ИмяКниги));
	XMLОписание.ЗаписатьАтрибут("type",			XMLСтрока(0));
	XMLОписание.ЗаписатьАтрибут("login",		XMLСтрока(""));
	XMLОписание.ЗаписатьАтрибут("pass",			XMLСтрока(""));
	XMLОписание.ЗаписатьАтрибут("timestamp",	XMLСтрока(""));
	XMLОписание.ЗаписатьАтрибут("fullreload",	XMLСтрока(1));
	
	ПорядокКниги = ?(СтруктураКниги.Свойство("Порядок"), СтруктураКниги.Порядок, 0);
	XMLОписание.ЗаписатьАтрибут("order",		XMLСтрока(ПорядокКниги));
	
	Если УдалениеКниги Тогда
		XMLОписание.ЗаписатьАтрибут("deleted",	XMLСтрока(1));
	Иначе	
		XMLОписание.ЗаписатьАтрибут("deleted",	XMLСтрока(0));
		XMLОписание.ЗаписатьНачалоЭлемента("infotype");
		Для Каждого СтрокаВида Из СтруктураКниги.ВидыТелефонов Цикл
			XMLОписание.ЗаписатьНачалоЭлемента("info");
			XMLОписание.ЗаписатьАтрибут("infoid",		XMLСтрока(СтрокаВида.Идентификатор));
			XMLОписание.ЗаписатьАтрибут("name",			XMLСтрока(СтрокаВида.Наименование));
			XMLОписание.ЗаписатьАтрибут("shortname",	XMLСтрока(СтрокаВида.Псевдоним));
			XMLОписание.ЗаписатьАтрибут("type",			XMLСтрока(0));
			XMLОписание.ЗаписатьКонецЭлемента();
		КонецЦикла;
		XMLОписание.ЗаписатьКонецЭлемента();
		XMLОписание.ЗаписатьНачалоЭлемента("group");
		XMLОписание.ЗаписатьАтрибут("id",		XMLСтрока(СтруктураКниги.Идентификатор));
		XMLОписание.ЗаписатьАтрибут("name",		XMLСтрока(СтруктураКниги.ИмяКниги));
		XMLОписание.ЗаписатьАтрибут("deleted",	XMLСтрока(0));
		// Контакты
		Для Каждого ЭлементМассива Из СтруктураКниги.МассивКниги Цикл
			Если ЭлементМассива.ЭтоГруппа Тогда
				сфпЗаписатьОписаниеГруппы(XMLОписание, ЭлементМассива);
			Иначе
				сфпЗаписатьОписаниеКонтакта(XMLОписание, ЭлементМассива);
			КонецЕсли;	
		КонецЦикла;
		XMLОписание.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	XMLОписание.ЗаписатьКонецЭлемента();
	Возврат XMLОписание.Закрыть();
КонецФункции // сфпСформироватьОписаниеТелефоннойКниги()

// Процедура - обработчик регламентного задания по обновлению общих телефонных книг
//
// Параметры:
//	Нет.
//
Процедура сфпОбновлениеТелефонныхКниг() Экспорт
	
	Если НЕ сфпИспользоватьСофтФон() Тогда
		Возврат;
		
	ИначеЕсли НЕ сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ сфпЗаполненыНастройкиСервера() Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Подключение к серверу СофтФон'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не заполнены настройки подключения к веб-сервису сервера СофтФон'"));
		Возврат;
	КонецЕсли;

	ВебСервис = Неопределено;
	АдресСервера = Константы.сфпИмяСервера.Получить();
	ПортСервера	= Константы.сфпПорт.Получить();
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	Попытка
		Определения = Новый WSОпределения("http://" + АдресСервера + ":" + Формат(Число(ПортСервера), "ЧГ=0") + "/wsdl/ISOAPSoftPhoneSrv",,,,, SSL);
		ВебСервис = Новый WSПрокси(Определения, "http://tempuri.org/", "ISOAPSoftPhoneSrvservice", "ISOAPSoftPhoneSrvPort",,, SSL);
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru='Подключение к серверу СофтФон'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось подключиться к веб-сервису серверу СофтФон'") + ": " + СтрокаОшибки);
	КонецПопытки;	
	
	Если ВебСервис = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выборка	= Справочники.сфпТелефонныеКниги.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ПометкаУдаления И Выборка.УчаствуетВРегламентномЗадании Тогда
			СтруктураКниги = сфпОбновитьТелефоннуюКнигу(Выборка.Ссылка);
			ОписаниеТелефоннойКниги = сфпСформироватьОписаниеТелефоннойКниги(СтруктураКниги, Выборка.ПометкаУдаления);
			Попытка
				ВебСервис.PutAddressBookXML("", ОписаниеТелефоннойКниги); 
			Исключение
				СтрокаОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(НСтр("ru='Запись телефонной книги'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось записать телефонную книгу: '") + Выборка.Наименование + ": " + СтрокаОшибки);
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	сфпПараметрыСервера	= сфпСофтФонПроСервер.сфпПараметрыСервера();
	Если сфпПараметрыСервера.ПоследниеЦифрыТелефонногоНомера = 0 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Получение общей телефонной книги'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не заполнена настройка Последние цифры телефонного номера'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		ДанныеКнигиXML = ВебСервис.GetAddressBookXML("", "");
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru='Получение общей телефонной книги'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось получить общую телефонную книгу'") + ": " + СтрокаОшибки);
		Возврат;
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(ДанныеКнигиXML);

	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	КонтактыКниги = ДокументDOM.ПолучитьЭлементыПоИмени("contact");
	Если КонтактыКниги.Количество() > 0 Тогда
		Книга = ДокументDOM.ПолучитьЭлементыПоИмени("addressbook");
		Если Книга.Количество() > 0 Тогда
			ИмяКниги = Книга[0].ПолучитьАтрибут("name");
			ИдентификаторКниги = Книга[0].ПолучитьАтрибут("id");
			Если ЗначениеЗаполнено(ИмяКниги) И ЗначениеЗаполнено(ИдентификаторКниги) Тогда
				ИдентификаторВнутреннегоНомера = "";
				ИдентификаторМобильногоНомера = "";
				
				ВидыТелефонов = ДокументDOM.ПолучитьЭлементыПоИмени("info");
				Для Каждого ТекВидТелефона Из ВидыТелефонов Цикл
					ИдентификаторВидаТелефона = ТекВидТелефона.ПолучитьАтрибут("infoid");
					НаименованиеВидаТелефона = ТекВидТелефона.ПолучитьАтрибут("name");
					
					Если НаименованиеВидаТелефона = "Внутренний номер" Тогда
						ИдентификаторВнутреннегоНомера = ИдентификаторВидаТелефона;
						
					ИначеЕсли НаименованиеВидаТелефона = "Мобильный номер" Тогда
						ИдентификаторМобильногоНомера = ИдентификаторВидаТелефона;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ИдентификаторВнутреннегоНомера) ИЛИ ЗначениеЗаполнено(ИдентификаторМобильногоНомера) Тогда
					Запрос = Новый Запрос("
					|ВЫБРАТЬ Ссылка
					|ИЗ Справочник.сфпТелефонныеКниги
					|ГДЕ ИдентификаторАТС = &ИдентификаторКниги");
					Запрос.УстановитьПараметр("ИдентификаторКниги", ИдентификаторКниги);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ТелефоннаяКнига = Выборка.Ссылка;
						
					Иначе
						ТелефоннаяКнигаОбъект = Справочники.сфпТелефонныеКниги.СоздатьЭлемент();
						ТелефоннаяКнигаОбъект.Наименование = ИмяКниги;
						ТелефоннаяКнигаОбъект.УчаствуетВРегламентномЗадании = Ложь;
						ТелефоннаяКнигаОбъект.ИдентификаторАТС = ИдентификаторКниги;
						ТелефоннаяКнигаОбъект.ОбменДанными.Загрузка = Истина;
						ТелефоннаяКнигаОбъект.Записать();
						
						ТелефоннаяКнига = ТелефоннаяКнигаОбъект.Ссылка;
					КонецЕсли;
					
					НаборЗаписей = РегистрыСведений.сфпКонтактыТелефонии.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Объект.Установить(Неопределено);
					НаборЗаписей.Отбор.ТелефоннаяКнига.Установить(ТелефоннаяКнига);
					
					Для Каждого ТекКонтакт Из КонтактыКниги Цикл
						ИдентификаторКонтакта = ТекКонтакт.ПолучитьАтрибут("id");
			        	ИмяКонтакта = ТекКонтакт.ПолучитьАтрибут("name");
						ПочтаКонтакта = ТекКонтакт.ПолучитьАтрибут("email");
						ВнутреннийНомер = "";
						МобильныйНомер = "";
						МобильныйНомерПредставление = "";
						
						ОписаниеКонтакта = СтрЗаменить(СокрЛП(ТекКонтакт.ПолучитьАтрибут("description")), ИмяКниги + "/", "");
						Если Лев(ОписаниеКонтакта, 1) = "/" Тогда
							ОписаниеКонтакта = Сред(ОписаниеКонтакта, 2);
						КонецЕсли;
						Если Прав(ОписаниеКонтакта, 1) = "/" Тогда
							ОписаниеКонтакта = Лев(ОписаниеКонтакта, СтрДлина(ОписаниеКонтакта) - 1);
						КонецЕсли;
						
						МассивОписанияКонтакта = сфпСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеКонтакта, "/", Истина);
						
						ОписаниеКонтакта = "";
						
						СчОписаний = МассивОписанияКонтакта.Количество() - 1;
						Пока СчОписаний >= 0 Цикл
							ОписаниеКонтакта = ОписаниеКонтакта + ?(ОписаниеКонтакта = "", "", "/") + МассивОписанияКонтакта[СчОписаний];
							
							СчОписаний = СчОписаний - 1;
						КонецЦикла;
						
						Для Каждого ТекНомер Из ТекКонтакт.ДочерниеУзлы Цикл
							ИдентификаторВидаТелефона = ТекНомер.ПолучитьАтрибут("infoid");
																					
							Если ИдентификаторВидаТелефона = ИдентификаторВнутреннегоНомера Тогда
								ВнутреннийНомер = ТекНомер.ПолучитьАтрибут("value");
								
							ИначеЕсли ИдентификаторВидаТелефона = ИдентификаторМобильногоНомера Тогда
								МобильныйНомерПредставление = ТекНомер.ПолучитьАтрибут("value");
								СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(МобильныйНомерПредставление, сфпПараметрыСервера);
								МобильныйНомер = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, сфпПараметрыСервера.ПоследниеЦифрыТелефонногоНомера);
							КонецЕсли;
						КонецЦикла;
						
						Если ЗначениеЗаполнено(ВнутреннийНомер) ИЛИ ЗначениеЗаполнено(МобильныйНомер) Тогда
							НоваяЗапись = НаборЗаписей.Добавить();
							НоваяЗапись.Объект = Неопределено;
							НоваяЗапись.ТелефоннаяКнига = ТелефоннаяКнига;
							НоваяЗапись.ИдентификаторАТС = ИдентификаторКонтакта;
							НоваяЗапись.ВнутреннийНомер = ВнутреннийНомер;
							НоваяЗапись.ОсновнойНомерТелефона = МобильныйНомер;
							НоваяЗапись.ОсновнойНомерТелефонаПредставление = МобильныйНомерПредставление;
							НоваяЗапись.ОбъектАТС = ИмяКонтакта;
							НоваяЗапись.Владельцы = ОписаниеКонтакта;
						КонецЕсли;
					КонецЦикла;
					
					Попытка
						НаборЗаписей.Записать();
					Исключение
						СтрокаОшибки = ОписаниеОшибки();
						ЗаписьЖурналаРегистрации(НСтр("ru='Получение общей телефонной книги'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось записать общую телефонную книгу'") + ": " + СтрокаОшибки);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры // сфпОбновлениеТелефонныхКниг()	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С JSON

// Функция получает описание объекта из модели JSON 
//
// Параметры:
//  СтрJSON	- Строка	- Описание объекта в виде модели json
//
// Возвращаемое значение:
//  Значение	- Соответствие	- Соответствие свойств и значений объекта 
//
Функция UnJSON(СтрJSON) Экспорт 
	СтрJSON	= ЗаменитьНедопустимыеСимволыXML(СтрJSON);	
	Значение = "";
	Если сфпПолучитьЗначениеJSON(СтрJSON, Значение) = 0 Тогда
		Возврат Значение;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // UnJSON()

// Функция заменяет недопустимые символы в XML-строке на заданные символы
//
// Параметры:
//   Текст			– Строка	– Строка, в которой требуется выполнить замену недопустимых символов.
//   СимволЗамены	– Строка	– Строка, на которую требуется выполнить замену недопустимого символа в XML-строке
// 
//  Возвращаемое значение:
//    Строка - Строка, полученная заменой недопустимых символов в XML-строке.
//
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ") Экспорт
	ПозицияНачала = 1;
	Пока Истина Цикл
		Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		Если Позиция > 1 Тогда
			НедопустимыйСимвол = Сред(Текст, Позиция - 1, 1);
			Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
				Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
			КонецЕсли;
		КонецЕсли;
		НедопустимыйСимвол = Сред(Текст, Позиция, 1);
		Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
			Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
		КонецЕсли;
		ПозицияНачала = Позиция + 1;
	КонецЦикла;
	Возврат Текст;
КонецФункции // ЗаменитьНедопустимыеСимволыXML()

// Функция осуществляет непосредственный разбор JSON 
//
// Параметры:
//  СтрJSON		- Строка		- Описание объекта в виде модели json
//  Значение	- Соответствие	- Соответствие свойств и значений объекта 
//	Позиция		- Число			- Позиция в описании
//	Ключ		- Строка		- Ключ соответствия
//
// Возвращаемое значение:
//  Число	- Позиция в описании
//
Функция сфпПолучитьЗначениеJSON(СтрJSON, Значение, Позиция = 1, Ключ = "") Экспорт
	Кавычка			= "";
	ЗначениеВСтроке	= "";
	Кавычек			= 0;
	Комментарий		= Ложь;
	Строка			= Ложь;
	Пока Позиция <= СтрДлина(СтрJSON) Цикл
		ХХ		= Сред(СтрJSON, Позиция, 2);
		ЗнХ		= Лев(ХХ,1);
		Позиция	= Позиция + 1;
		Если ЗнХ > " " ИЛИ Строка Тогда // Отсекаем всякий хлам
			Если Комментарий Тогда
				// Это комментарий. Крутимся в цикле пока не встретится конец комментария
				Если ХХ = "*/" Тогда
					// Комментарий закончился
					Комментарий	= Ложь;
					Позиция		= Позиция + 1;
				КонецЕсли;
			ИначеЕсли ЗнХ = "\" Тогда
				Позиция	= Позиция + 1;
				ХХ		= ВРег(ХХ);
				Если ХХ = "\""" Тогда
					ЗначениеВСтроке	= ЗначениеВСтроке + """";
				ИначеЕсли ХХ = "\\" Тогда
					ЗначениеВСтроке	= ЗначениеВСтроке + "\";
				ИначеЕсли ХХ = "\/" Тогда
					ЗначениеВСтроке	= ЗначениеВСтроке + "/";
				ИначеЕсли ХХ = "\B" Тогда
					ЗначениеВСтроке	= ЗначениеВСтроке + Символ(8);
				ИначеЕсли ХХ = "\F" Тогда
					ЗначениеВСтроке	= ЗначениеВСтроке + Символы.ПФ; // Перевод формы (страницы)
				ИначеЕсли ХХ = "\N" Тогда
					ЗначениеВСтроке	= ЗначениеВСтроке + Символы.ПС; // Перевод строки
				ИначеЕсли ХХ = "\R" Тогда
					ЗначениеВСтроке	= ЗначениеВСтроке + Символы.ВК; // Возврат каретки
				ИначеЕсли ХХ = "\T" Тогда
					ЗначениеВСтроке	= ЗначениеВСтроке + Символы.ВТаб; // Символ вертикальной табуляции
				ИначеЕсли ХХ = "\U" Тогда
					ЗначениеВСтроке	= ЗначениеВСтроке + Символ(сфпHex2Число(Сред(СтрJSON, Позиция, 4))); // Шестнадцатиричное число
					Позиция = Позиция + 4;
				КонецЕсли;
			ИначеЕсли Строка Тогда
				// Если строка не закончилась, то пропускаем управляющие символы
				Если ЗнХ = Кавычка Тогда
					// Закончилась строка
					Строка	= Ложь;
					Кавычек	= Кавычек + 1;
				Иначе
					ЗначениеВСтроке	= ЗначениеВСтроке + ЗнХ;
				КонецЕсли;
			ИначеЕсли ХХ = "/*" Тогда
				// Начался комментарий
				Комментарий	= Истина;
				Позиция		= Позиция + 1;
			ИначеЕсли Найти("""'{}[]:,", ЗнХ) > 0 Тогда
				Если (ЗнХ = """") ИЛИ (ЗнХ = "'") Тогда
					// Началась строка
					// Строка - коллекция нуля или больше символов Unicode, заключенная в
					// двойные кавычки, используя "\" в качестве символа экранирования.
					// Символ представляется как односимвольная строка.
					// Похожий синтаксис используется в C и Java.
					Строка	= Истина;
					Кавычка	= ЗнХ;
					Кавычек	= Кавычек + 1;
				ИначеЕсли ЗнХ = "{" Тогда
					// Начался объект
					// Объект - неупорядоченный набор пар ключ/значение.
					// Объект начинается с "{" и заканчивается "}".
					// Каждое имя сопровождается ":", пары ключ/значение разделяются ",".
					Объект	= Новый Соответствие;
					Пока Истина Цикл
						// Получим ключ и значение
						Ключ	= "";
						Режим	= сфпПолучитьЗначениеJSON(СтрJSON, Значение, Позиция, Ключ);
						// 0 - есть значение и не конец объекта (запятая)
						// 1 - есть значение и конец объекта
						// 2 - нет значения и не конец объекта (запятая)
						// 3 - нет значения и конец объекта
						Если Режим = 0 Тогда
							Объект.Вставить(Ключ, Значение);
						ИначеЕсли Режим = 1 Тогда
							Объект.Вставить(Ключ, Значение);
							Прервать;
						ИначеЕсли Режим = 3 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Значение	= Объект;
					Возврат 0;
				ИначеЕсли ЗнХ = "[" Тогда
					// Начался массив
					// Массив - упорядоченная коллекция значений.
					// Массив начинается с "[" и заканчивается "]".
					// Значения разделены ",".
					Массив	= Новый Массив;
					Пока Истина Цикл
						Режим	= сфпПолучитьЗначениеJSON(СтрJSON, Значение, Позиция);
						// 0 - есть значение и не конец массива (запятая)
						// 1 - есть значение и конец массива
						// 2 - нет значения и не конец массива (запятая)
						// 3 - нет значения и конец массива
						Если Режим = 0 Тогда
							Массив.Добавить(Значение);
						ИначеЕсли Режим = 1 Тогда
							Массив.Добавить(Значение);
							Прервать;
						ИначеЕсли Режим = 3 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Значение	= Массив;
					Возврат 0;
				ИначеЕсли (ЗнХ = "]") ИЛИ (ЗнХ = "}") Тогда
					// Закончился массив/объект
					Если (ЗначениеВСтроке = "") И (Кавычек = 0) Тогда
						Возврат 3; // Нет значения и конец массива/объекта
					Иначе
						Значение	= сфпПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек);
						Возврат 1; // Есть значение и конец массива/объекта
					КонецЕсли;
				ИначеЕсли ЗнХ = ":" Тогда
					Ключ	= ЗначениеВСтроке;
					Возврат сфпПолучитьЗначениеJSON(СтрJSON, Значение, Позиция);
				Иначе
					// Запятая
					Прервать;
				КонецЕсли;
			Иначе
				ЗначениеВСтроке	= ЗначениеВСтроке + ЗнХ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Кавычек > 0 Тогда
		Значение = сфпЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Если ЗначениеВСтроке = "" Тогда
			Возврат 2;
		Иначе
			Значение	= сфпЗначениеБезКавычек(ЗначениеВСтроке);
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции // сфпПолучитьЗначениеJSON()

// Вспомогательная функция перевода шестнацатиричного числа в десятичное 
//
// Параметры:
//	Hex	- Строка	- Число в шестнадцатиричном представлении
//
// Возвращаемое значение:
//	Число	- Десятичное число
//
Функция сфпHex2Число(Hex) 
	Стр	= ВРег(СокрЛП(Hex));
	Dec	= 0;
	Для Х = 1 По СтрДлина(Стр) Цикл
		Dec	= Dec + Найти("123456789ABCDEF", Сред(Стр, Х, 1)) * Pow(16, СтрДлина(Стр) - Х);
	КонецЦикла;
	Возврат Dec;
КонецФункции // сфпHex2Число()

// Функция получает значение из строки
//
// Параметры:
//	ЗначениеВСтроке	- Строка	- Строка, содержащая значение
//	Кавычек			- Число		- Количество кавычек в строке
//
// Возвращаемое значение:
//	Произвольный	- Значение из строки
//
Функция сфпПолучитьЗначениеИзСтроки(ЗначениеВСтроке, Кавычек)
	Если ЗначениеВСтроке = "" Тогда
		Возврат Неопределено;
	ИначеЕсли Кавычек > 0 Тогда
		Возврат сфпЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Возврат сфпЗначениеБезКавычек(ЗначениеВСтроке);
	КонецЕсли;
КонецФункции // сфпПолучитьЗначениеИзСтроки()

// Функция получает значение из строки без кавычек
//
// Параметры:
//	ЗначениеВСтроке	- Строка	- Строка, содержащая значение
//
// Возвращаемое значение:
//	Строка	- Значение из строки
//
Функция сфпЗначениеВКавычках(ЗначениеВСтроке)
	Возврат ЗначениеВСтроке;
КонецФункции // сфпЗначениеВКавычках()

// Функция получает значение из строки с кавычками
//
// Параметры:
//	ЗначениеВСтроке	- Строка	- Строка, содержащая значение
//
// Возвращаемое значение:
//	Произвольный	- Значение из строки
//
//@skip-check code-never-compilied
Функция сфпЗначениеБезКавычек(ЗначениеВСтроке)
	// Это число, булево или null.
	// Хотя здесь могут быть и строки. Например: {Code:123}
	Стр = ВРег(ЗначениеВСтроке);
	Если Стр = "TRUE" Тогда
		Возврат Истина;
	ИначеЕсли Стр = "FALSE" Тогда
		Возврат Ложь;
	ИначеЕсли Стр = "NULL" Тогда
		Возврат Неопределено;
	КонецЕсли;
	// Пробежимся по предполагаемому "числу"
	Экспонента	= Ложь;
	ХХ			= " ";
	Для Индекс = 1 По СтрДлина(Стр) Цикл
		ЗнХ = Сред(Стр, Индекс, 1);
		Если Найти("0123456789.+-", ЗнХ) Тогда
			ХХ = ХХ + ЗнХ;
		ИначеЕсли ЗнХ = "E" Тогда
			#Если ВебКлиент Тогда
				Возврат ЗначениеВСтроке;
			#Иначе
				Экспонента = Истина;
				УУ = XMLЗначение(Тип("Число"),ХХ);
				ХХ = " ";
			#КонецЕсли
		Иначе
			// Это не число, а строка
			Возврат ЗначениеВСтроке;
		КонецЕсли;
	КонецЦикла;
	#Если ВебКлиент Тогда
		//@skip-check empty-except-statement
		Попытка
			ХХ = Число(ХХ);
		Исключение
		КонецПопытки;	
	#Иначе
		ХХ = XMLЗначение(Тип("Число"), ХХ);
		Если Экспонента Тогда
			ХХ = УУ * Pow(10, ХХ);
		КонецЕсли;
	#КонецЕсли
	Возврат ХХ;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОЗДАНИЯ ДОКУМЕНТОВ

// Функция создает документ "Телефонный звонок"
//
// Параметры:
//	СтруктураЗвонка		- Структура	- Структура данных звонка
//	ДанныеЗаполнения	- Структура	- Структура данных для заполнения документа
//
// Возвращаемое значение:
//	ДокументСсылка	- Телефонный звонок
//
Функция сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, ДанныеЗаполнения, СозданЗвонок = Ложь) Экспорт
	
	НовыйЗвонок	= Неопределено;
	
	Если СтруктураЗвонка.Свойство("ДатаНачала") И ЗначениеЗаполнено(СтруктураЗвонка.ДатаНачала) Тогда
		  ДатаНачала = СтруктураЗвонка.ДатаНачала;
	Иначе ДатаНачала = сфпТекущаяДата();
	КонецЕсли;
	
	// Проверяем наличие уже созданного ранее документа телефонный звонок по данному звонку
	НовыйЗвонок = сфпНайтиЗвонокВРегистреПоДаннымЗвонка(СтруктураЗвонка.hCall, СтруктураЗвонка.ВходящийЗвонок, ДатаНачала, СтруктураЗвонка.НомерТелефона);
	Если НЕ ЗначениеЗаполнено(НовыйЗвонок) Тогда
		НовыйЗвонок	= сфпСофтФонПроСерверПереопределяемый.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, ДанныеЗаполнения);
		СозданЗвонок = ЗначениеЗаполнено(НовыйЗвонок);
	// АльфаАвто
	ИначеЕсли СтруктураЗвонка.Свойство("Контакт") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбъектНовыйЗвонок = НовыйЗвонок.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(ОбъектНовыйЗвонок.АбонентКонтакт) Тогда
			Если СтруктураЗвонка.Свойство("ContactID") И ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
				СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
			КонецЕсли;
			ОбъектНовыйЗвонок.АбонентПредставление = сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт);
			ИмяРеквизитаАбонентКонтакт = сфпСофтФонПроСервер.сфпИмяРеквизитаАбонентКонтакт();
			ОбъектНовыйЗвонок[ИмяРеквизитаАбонентКонтакт] = СтруктураЗвонка.Контакт;
			ОбъектНовыйЗвонок.сфпКлиент = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
			Попытка
				ОбъектНовыйЗвонок.Записать();
			Исключение
				СтрОшибки = ОписаниеОшибки();
			КонецПопытки; 
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	// Конец АльфаАвто
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НовыйЗвонок) Тогда
		// Добавляем запись в регистр истории звонков
		МенеджерЗаписи = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаНачала	 = НовыйЗвонок.Дата;
		МенеджерЗаписи.НомерТелефона = НовыйЗвонок.АбонентКакСвязаться;
	 	МенеджерЗаписи.Звонок 		 = НовыйЗвонок.Ссылка;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ДатаНачала 			= НовыйЗвонок.Дата;
			МенеджерЗаписи.НомерТелефона 		= НовыйЗвонок.АбонентКакСвязаться;
	 		МенеджерЗаписи.Звонок 				= НовыйЗвонок.Ссылка;
		    МенеджерЗаписи.ДатаОтвета			= НовыйЗвонок.Дата;
			МенеджерЗаписи.ДатаОкончания		= НовыйЗвонок.Дата;	
			МенеджерЗаписи.Входящий				= НовыйЗвонок.Входящий;
			МенеджерЗаписи.ИдентификаторЗаписи	= НовыйЗвонок.сфпИдентификаторЗаписи;
			МенеджерЗаписи.ИдентификаторЗвонка	= НовыйЗвонок.сфпИдентификаторЗвонка;
			МенеджерЗаписи.Ответственный		= НовыйЗвонок.Ответственный;
			МенеджерЗаписи.НомерКомпании		= СтруктураЗвонка.Caller_Destination_Number;
			
			Если СтруктураЗвонка.Свойство("ВнутреннийНомер") И ЗначениеЗаполнено(СтруктураЗвонка.ВнутреннийНомер) Тогда
				  МенеджерЗаписи.ВнутреннийНомер = СтруктураЗвонка.ВнутреннийНомер;
			Иначе МенеджерЗаписи.ВнутреннийНомер = сфпТекущийВнутреннийНомер();
			КонецЕсли;
			
			ИмяРеквизитаАбонентКонтакт = сфпИмяРеквизитаАбонентКонтакт();
			Если НЕ ПустаяСтрока(ИмяРеквизитаАбонентКонтакт) Тогда
				МенеджерЗаписи.АбонентКонтакт = НовыйЗвонок[ИмяРеквизитаАбонентКонтакт];
			КонецЕсли;

			Если СтруктураЗвонка.Свойство("ДатаНачала") И ЗначениеЗаполнено(СтруктураЗвонка.ДатаНачала) Тогда
				МенеджерЗаписи.ДатаНачала = СтруктураЗвонка.ДатаНачала;
			КонецЕсли;
			Если СтруктураЗвонка.Свойство("ДатаОтвета") И ЗначениеЗаполнено(СтруктураЗвонка.ДатаОтвета) Тогда
				МенеджерЗаписи.ДатаОтвета = СтруктураЗвонка.ДатаОтвета;
			КонецЕсли;
			Если СтруктураЗвонка.Свойство("ДатаОкончания") И ЗначениеЗаполнено(СтруктураЗвонка.ДатаОкончания) Тогда
				МенеджерЗаписи.ДатаОкончания = СтруктураЗвонка.ДатаОкончания;
			КонецЕсли;
		
			Попытка
				МенеджерЗаписи.Записать();
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;		
	
	Возврат НовыйЗвонок.Ссылка;
	
КонецФункции // сфпСоздатьТелефонныйЗвонок()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ЗВОНКОВ

// Функция проверяет подключение внешнего источника данных звонков.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак подключения источника.
//
Функция сфпИсточникИсторииЗвонковПодключен() Экспорт
	СтрокаПодключения	= Константы.сфпСтрокаПодключенияИстории.Получить();
	Если ПустаяСтрока(СтрокаПодключения) Тогда Возврат Ложь; КонецЕсли;	
	СтруктураПодключения	= сфпПолучитьСтруктуруПодключения(СтрокаПодключения);
	СостояниеПодключения	= ВнешниеИсточникиДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.ПолучитьСостояние();
	Если СостояниеПодключения = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
		ПараметрыСоединения = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		ПараметрыСоединения.АутентификацияСтандартная	= Истина;
		ПараметрыСоединения.ИмяПользователя				= СтруктураПодключения.Пользователь;
		ПараметрыСоединения.Пароль						= СтруктураПодключения.Пароль;
		ПараметрыСоединения.СтрокаСоединения			= "DRIVER={SQL Server};SERVER=" + СтруктураПодключения.Сервер + ";UID=" 
			+ СтруктураПодключения.Пользователь + ";PWD=" + СтруктураПодключения.Пароль + ";DATABASE="
			+ СтруктураПодключения.БазаДанных + ";LANGUAGE=русский";
		ПараметрыСоединения.СУБД						= "MSSQLServer";
		ВнешниеИсточникиДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.УстановитьОбщиеПараметрыСоединения(ПараметрыСоединения);
		ВнешниеИсточникиДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.УстановитьПараметрыСоединенияСеанса(ПараметрыСоединения);
		ВнешниеИсточникиДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.УстановитьСоединение();
		СостояниеПодключения = ВнешниеИсточникиДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.ПолучитьСостояние();
		Если СостояниеПодключения = СостояниеВнешнегоИсточникаДанных.Отключен Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции // сфпИсточникИсторииЗвонковПодключен()	

// Функция проверяет использование оповещений о пропущенных звонках
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования оповещений о пропущенных звонках
//
Функция сфпОповещатьОПропущенныхЗвонках()
	Возврат Константы.сфпОповещатьОПропущенныхЗвонках.Получить();
КонецФункции // сфпОповещатьОПропущенныхЗвонках()

// Процедура устанавливает значение реквизита с проверкой изменения
//
// Параметры:
//	ОбъектУстановки 	- Произвольный	- Объект, для которого производится установка реквизита
//	ИмяРеквизита		- Строка		- Имя реквизита
//	ЗначениеРеквизита	- Произвольный	- Значение реквизита
//	ТребуетсяЗапись		- Булево		- Признак изменения объекта записи
//
Процедура УстановитьЗначениеРеквизита(ОбъектУстановки, ИмяРеквизита, ЗначениеРеквизита, ТребуетсяЗапись)
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ОбъектУстановки[ИмяРеквизита] <> ЗначениеРеквизита Тогда
			ОбъектУстановки[ИмяРеквизита] = ЗначениеРеквизита;
		
			ТребуетсяЗапись = Истина;
		КонецЕсли;
	Исключение КонецПопытки;
	
КонецПроцедуры
			
// Процедура загружает историю звонков из SQL-базы сервера СофтФон
//
// Параметры:
//	Нет.
//
Процедура сфпПолучитьИсториюЗвонков() Экспорт
	
	Если НЕ сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ сфпИсточникИсторииЗвонковПодключен() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	НачалоЗагрузкиИстории = сфпТекущаяДата();
	
	ДатаНачалаВыборки = Константы.сфпДатаИсторииЗвонков.Получить();
	Если ДатаНачалаВыборки = Дата('00010101') Тогда
		ДатаНачалаВыборки = НачалоМесяца(НачалоЗагрузкиИстории);
	КонецЕсли;
	
	ЗапросВерсииТаблицы = Новый Запрос;
	ЗапросВерсииТаблицы.Текст = "ВЫБРАТЬ
	|	dbo_c_Sys.ParamName КАК ИмяПараметра,
	|	dbo_c_Sys.ParamValue КАК ЗначениеПараметра
	|ИЗ
	|	ВнешнийИсточникДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.Таблица.dbo_c_Sys КАК dbo_c_Sys";
	ТаблицаЗапроса = ЗапросВерсииТаблицы.Выполнить().Выгрузить();
	СвежаяВерсияТаблицы = Ложь;
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		ИскомаяСтрока = ТаблицаЗапроса[0];
		Если ИскомаяСтрока.ИмяПараметра = "VerDB" Тогда
			СвежаяВерсияТаблицы = (Число(ИскомаяСтрока.ЗначениеПараметра) >= 24);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	dbo_Calls.hCall КАК hCall,
	|	dbo_Calls.StartTime,
	|	ЕСТЬNULL(dbo_Calls.AnswerTime, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК AnswerTime,
	|	ЕСТЬNULL(dbo_Calls.DropTime, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК DropTime,
	|	dbo_Calls.CallerId,
	|	dbo_Calls.CalledId,
	|	dbo_Calls.Origin,
	|	dbo_Calls.RecordID,
	|	// Имя_Параметра КАК NumberOnLine
	|ИЗ
	|	ВнешнийИсточникДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.Таблица.dbo_Calls КАК dbo_Calls
	|ГДЕ
	|	dbo_Calls.StartTime > &ДатаНачалаВыборки
	|	И dbo_Calls.Deleted = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	dbo_Calls.StartTime");
	Запрос.УстановитьПараметр("ДатаНачалаВыборки", ДатаНачалаВыборки);
	
	Если СвежаяВерсияТаблицы Тогда
		  Запрос.Текст = СтрЗаменить(Запрос.Текст, "// Имя_Параметра", "ЕСТЬNULL(dbo_Calls.NumberOnLine, """")");
	Иначе Запрос.Текст = СтрЗаменить(Запрос.Текст, "// Имя_Параметра", """""");
	КонецЕсли;
	
	ДлинаВнутреннихНомеров = Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
	ДействиеПриОшибке = Константы.сфпДействиеПриОшибкеЗагрузкиИсторииЗвонков.Получить();
	ПрерватьВыполнениеПриОшибке = (ДействиеПриОшибке = Перечисления.сфпДействияПриОшибкеЗагрузкиИсторииЗвонков.ПрерватьВыполнение);
	ПовторитьВыполнениеПриОшибке = (ДействиеПриОшибке = Перечисления.сфпДействияПриОшибкеЗагрузкиИсторииЗвонков.ПовторитьВыполнение);
	
	НеЗагружатьЗвонкиДлительностьюМенее = Константы.сфпНеЗагружатьЗвонкиДлительностьюМенее.Получить();
	ЗагружатьВнутренниеЗвонки = Константы.сфпЗагружатьВнутренниеЗвонки.Получить();
	
	ДатаНезавершенногоЗвонка = Дата('00010101');
	ДатаПоследнегоЗвонка = ДатаНачалаВыборки;
	
	ТекущийАвторизованныйПользователь = сфпТекущийПользователь();
	ПользовательДляОповещений = Константы.сфпПользовательДляОповещений.Получить();
	Если НЕ ЗначениеЗаполнено(ПользовательДляОповещений) Тогда
		ПользовательДляОповещений = ТекущийАвторизованныйПользователь;
	КонецЕсли;
	
	ВнутренниеНомераИБ = Константы.сфпВнутренниеНомераИнформационнойБазы.Получить();
	МассивВнутреннихНомеровИБ = Новый Массив();
	МассивНомеров = сфпОбщегоНазначенияКлиентСервер.сфпРазложитьСтрокуВМассивПодстрок(ВнутренниеНомераИБ, ",");
	Для Каждого ТекНомер Из МассивНомеров Цикл
		ПозицияРазделителя = Найти(ТекНомер, "-");
		
		Попытка
			Если ПозицияРазделителя > 0 Тогда
				НачалоДиапазона = Число(СокрЛП(Лев(ТекНомер, ПозицияРазделителя - 1)));
				КонецДиапазона = Число(СокрЛП(Сред(ТекНомер, ПозицияРазделителя + 1)));
				Для к = НачалоДиапазона По КонецДиапазона Цикл
					МассивВнутреннихНомеровИБ.Добавить(Формат(к, "ЧГ="));
				КонецЦикла;
				
			Иначе
				МассивВнутреннихНомеровИБ.Добавить(Формат(Число(СокрЛП(ТекНомер)), "ЧГ="));
			КонецЕсли;
		Исключение КонецПопытки;	
	КонецЦикла;

	ЗапросРегистра = Новый Запрос("
	|ВЫБРАТЬ ДатаНачала, НомерТелефона, Звонок
	|ИЗ РегистрСведений.сфпИсторияЗвонков
	|ГДЕ ИдентификаторЗвонка = &ИдентификаторЗвонка И ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода");
	
	СчетчикЗаписей = 0;
	КоличествоЗаписейВПакете = 1000;
	
	ИмяДокументаТелефонныйЗвонок = СтрЗаменить(сфпИмяДокументаТелефонныйЗвонок(), "Документ.", "");
	
	ВажностьЗвонка = Неопределено;
	Если Метаданные.Документы[ИмяДокументаТелефонныйЗвонок].Реквизиты.Найти("Важность") <> Неопределено Тогда
		Если Метаданные.Перечисления.Найти("ВариантыВажностиЗадачи") <> Неопределено Тогда
			ВажностьЗвонка = Перечисления["ВариантыВажностиЗадачи"].Обычная;

		ИначеЕсли Метаданные.Перечисления.Найти("ВариантыВажностиВзаимодействия") <> Неопределено Тогда
			ВажностьЗвонка = Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СчетчикЗаписей = СчетчикЗаписей + 1;
		
		Если СчетчикЗаписей = КоличествоЗаписейВПакете Тогда
			СчетчикЗаписей = 1;
			
			// Проверяем на незавершенные звонки
			Если ДатаНезавершенногоЗвонка = Дата('00010101') Тогда
				// Устанавливаем дату начала последнего звонка
				Константы.сфпДатаИсторииЗвонков.Установить(ДатаПоследнегоЗвонка);

			Иначе
				// Устанавливаем дату начала первого незавершенного звонка
				Константы.сфпДатаИсторииЗвонков.Установить(ДатаНезавершенногоЗвонка);
				ДатаНезавершенногоЗвонка = Дата('00010101');
			КонецЕсли;
		КонецЕсли;
		
		сфпCallerId	= Выборка.CallerId;
		сфпCallerId	= сфпУбратьИзНомераТелефонаВсеПрефиксы(сфпCallerId);
		
		сфпCalledId	= Выборка.CalledId;
		сфпCalledId	= сфпУбратьИзНомераТелефонаВсеПрефиксы(сфпCalledId);
		
		Если ПустаяСтрока(сфпCallerId) ИЛИ ПустаяСтрока(сфпCalledId) Тогда
			// Нет номера звонящего или вызываемого абонента
			Продолжить;

		ИначеЕсли (СтрДлина(сфпCalledId) <= ДлинаВнутреннихНомеров) И (СтрДлина(сфпCallerId) <= ДлинаВнутреннихНомеров)
			И НЕ ЗагружатьВнутренниеЗвонки Тогда
			// Внутренний звонок
			Продолжить;

		ИначеЕсли Выборка.StartTime >= (Выборка.DropTime - 3) Тогда
			// Звонок сразу переключен на другой внутренний номер
			Продолжить;

		ИначеЕсли Выборка.DropTime = Дата('00010101') Тогда
			// Если разговор не завершен
			Если НачалоДня(НачалоЗагрузкиИстории) = НачалоДня(Выборка.StartTime) Тогда
				Если ДатаНезавершенногоЗвонка = Дата('00010101') Тогда
					// Запоминаем дату первого незавершенного звонка
					ДатаНезавершенногоЗвонка = Выборка.StartTime - 1;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;

		ИначеЕсли СвежаяВерсияТаблицы И Выборка.NumberOnLine = "" Тогда
			// Попали на дозвон от шлюза, игнорируем
			Продолжить;	

		Иначе	
			// Добавляем запись в регистр
			ЭтоВходящийЗвонок = сфпОпределитьВходящийЗвонокПриЗагрузкеИстории(Выборка.Origin); 
			
			// Возможен случай, когда невозможно точно определить вид звонка по origin,
			// тогда используем "старый" алгоритм определения входящий/исходящий
			Если ЭтоВходящийЗвонок = Неопределено Тогда
				Если СтрДлина(сфпCallerId) <= ДлинаВнутреннихНомеров И СтрДлина(сфпCalledId) > ДлинаВнутреннихНомеров Тогда
					ЭтоВходящийЗвонок = Ложь;

				ИначеЕсли СтрДлина(сфпCalledId) <= ДлинаВнутреннихНомеров И СтрДлина(сфпCallerId) > ДлинаВнутреннихНомеров Тогда
					ЭтоВходящийЗвонок = Истина;

				Иначе
					ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru='Не удалось определить тип звонка'") + ": hCall = " + Выборка.hCall);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если СвежаяВерсияТаблицы Тогда
				  НомерТелефонаВнутренний = Выборка.NumberOnLine;
			Иначе НомерТелефонаВнутренний = ?(ЭтоВходящийЗвонок, сфпCalledId, сфпCallerId);
			КонецЕсли;
			
			Если МассивВнутреннихНомеровИБ.Количество() > 0 Тогда
				Если МассивВнутреннихНомеровИБ.Найти(НомерТелефонаВнутренний) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;			
			
			НомерТелефона = ?(ЭтоВходящийЗвонок, сфпCallerId, сфпCalledId);
			ИдентификаторЗвонка = СтрЗаменить(Формат(Выборка.hCall, "ЧГ=3,0"), ",", Символы.НПП);
			
			ЗапросРегистра.УстановитьПараметр("ИдентификаторЗвонка", ИдентификаторЗвонка);
			ЗапросРегистра.УстановитьПараметр("НачалоПериода", Выборка.StartTime - 300);
			ЗапросРегистра.УстановитьПараметр("КонецПериода", Выборка.StartTime + 300);
			
			ВыборкаРегистра = ЗапросРегистра.Выполнить().Выбрать();
			Если ВыборкаРегистра.Следующий() Тогда
				ЗаписьРегистра = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.ДатаНачала = ВыборкаРегистра.ДатаНачала;
				ЗаписьРегистра.НомерТелефона = ВыборкаРегистра.НомерТелефона;
				ЗаписьРегистра.Звонок = ВыборкаРегистра.Звонок;
				ЗаписьРегистра.Прочитать();

				ТребуетсяЗаписьРегистра = Ложь;

			Иначе
				Если сфпНайтиЗвонокВРегистреПоНомеруПриЗагрузкеИстории(Выборка.StartTime, сфпCallerId) Тогда
					// Звонок уже есть в регистре
					ДатаПоследнегоЗвонка = Выборка.StartTime;
					Продолжить;
					
				ИначеЕсли сфпНайтиЗвонокВРегистреПоНомеруПриЗагрузкеИстории(Выборка.StartTime, сфпCalledId) Тогда
					// Звонок уже есть в регистре
					ДатаПоследнегоЗвонка = Выборка.StartTime;
					Продолжить;
				КонецЕсли;
				
				ЗаписьРегистра = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.ДатаНачала = Выборка.StartTime;
				ЗаписьРегистра.НомерТелефона = НомерТелефона;
				ЗаписьРегистра.Звонок = "";
				
				ТребуетсяЗаписьРегистра = Истина;
			КонецЕсли;
			
			ДатаОкончанияЗвонка = ?(Выборка.DropTime = Дата('00010101'), МАКС(Выборка.StartTime, Выборка.AnswerTime), Выборка.DropTime);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "ДатаОкончания", ДатаОкончанияЗвонка, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "ДатаОтвета", Выборка.AnswerTime, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "Входящий", ЭтоВходящийЗвонок, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "ИдентификаторЗаписи", Выборка.RecordID, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "ИдентификаторЗвонка", ИдентификаторЗвонка, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "ВнутреннийНомер", НомерТелефонаВнутренний, ТребуетсяЗаписьРегистра);
			
			Если НеЗагружатьЗвонкиДлительностьюМенее > 0 И ЗначениеЗаполнено(ЗаписьРегистра.ДатаОкончания) Тогда // фильтр установлен
				Если ЗначениеЗаполнено(ЗаписьРегистра.ДатаОтвета) Тогда
					ДлительностьРазговора = ЗаписьРегистра.ДатаОкончания - ЗаписьРегистра.ДатаОтвета;
				    Если ДлительностьРазговора < НеЗагружатьЗвонкиДлительностьюМенее Тогда
						Продолжить;
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ЗаписьРегистра.ДатаНачала) Тогда
					ДлительностьРазговора = ЗаписьРегистра.ДатаОкончания - ЗаписьРегистра.ДатаНачала;
				    Если ДлительностьРазговора < НеЗагружатьЗвонкиДлительностьюМенее Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Проверяем наличие уже созданного ранее документа телефонный звонок по данному звонку
			Если ЗначениеЗаполнено(ЗаписьРегистра.Звонок) Тогда
				НайденныйЗвонок = ЗаписьРегистра.Звонок;
			
			Иначе	
				НайденныйЗвонок = сфпНайтиПоследнийЗвонокПоНомеру(ЗаписьРегистра.НомерТелефона, ЗаписьРегистра.ДатаНачала);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйЗвонок) Тогда
				// Обновляем существующий звонок
				ЗвонокОбъект = НайденныйЗвонок.ПолучитьОбъект();
				ТребуетсяЗаписьЗвонка = Ложь;
				
			Иначе	
				// Создаем новый телефонный звонок
				Если ЗначениеЗаполнено(ИмяДокументаТелефонныйЗвонок) Тогда
					ЗвонокОбъект = Документы[ИмяДокументаТелефонныйЗвонок].СоздатьДокумент();
					ЗвонокОбъект.Дата = ЗаписьРегистра.ДатаНачала;
					ТребуетсяЗаписьЗвонка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "Входящий", ЗаписьРегистра.Входящий, ТребуетсяЗаписьЗвонка);
			
			Если ВажностьЗвонка <> Неопределено Тогда
				УстановитьЗначениеРеквизита(ЗвонокОбъект, "Важность", ВажностьЗвонка, ТребуетсяЗаписьЗвонка);
			КонецЕсли;

			ТемаЗвонка = сфпЗаполнитьТемуТелефонногоЗвонка(ЗвонокОбъект.Входящий, ЗвонокОбъект.Дата);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "Тема", ТемаЗвонка, ТребуетсяЗаписьЗвонка);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "АбонентКакСвязаться", НомерТелефона, ТребуетсяЗаписьЗвонка);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "сфпИдентификаторЗвонка", ЗаписьРегистра.ИдентификаторЗвонка, ТребуетсяЗаписьЗвонка);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "сфпИдентификаторЗаписи", ЗаписьРегистра.ИдентификаторЗаписи, ТребуетсяЗаписьЗвонка);
            			
			ДлительностьЗвонка = ЗаписьРегистра.ДатаОкончания - ЗаписьРегистра.ДатаНачала;
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "сфпДлительностьЗвонка", ДлительностьЗвонка, ТребуетсяЗаписьЗвонка);
			
			СостояниеЗвонка = ?(ЗаписьРегистра.ДатаОтвета = Дата('00010101'), Перечисления.сфпСостоянияЗвонков.Пропущенный, Перечисления.сфпСостоянияЗвонков.Отвеченный);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "сфпСостояниеЗвонка", СостояниеЗвонка, ТребуетсяЗаписьЗвонка);
						
			НайденныйОтветственный = сфпНайтиОтветственного(ЗаписьРегистра.ВнутреннийНомер);
			Если ЗначениеЗаполнено(НайденныйОтветственный) Тогда
				УстановитьЗначениеРеквизита(ЗвонокОбъект, "Ответственный", НайденныйОтветственный, ТребуетсяЗаписьЗвонка);
			КонецЕсли;
						
			ОписаниеЗвонка = сфпЗаполнитьОписаниеТелефонногоЗвонка(ЗвонокОбъект.сфпДлительностьЗвонка);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "Описание", ОписаниеЗвонка, ТребуетсяЗаписьЗвонка);
						
			ОписаниеЗвонка = "";
			
			ИмяРеквизитаАбонентКонтакт = сфпИмяРеквизитаАбонентКонтакт();
			
			МассивЗвонящих = сфпНайтиОбъектВРегистреПоТелефону(ЗаписьРегистра.НомерТелефона);
			Если МассивЗвонящих.Количество() = 0 Тогда
				АбонентПредставление = НСтр("ru='!!!Не определен!!!'");

			ИначеЕсли МассивЗвонящих.Количество() = 1 Тогда
				АбонентКонтакт = МассивЗвонящих[0];
				АбонентПредставление = сфпПолучитьНаименованиеКонтакта(АбонентКонтакт);
				ВладелецКонтакта = сфпПолучитьВладельцаКонтакта(АбонентКонтакт);
				
				УстановитьЗначениеРеквизита(ЗвонокОбъект, "сфпКлиент", ВладелецКонтакта, ТребуетсяЗаписьЗвонка);
				УстановитьЗначениеРеквизита(ЗвонокОбъект, ИмяРеквизитаАбонентКонтакт, АбонентКонтакт, ТребуетсяЗаписьЗвонка);
				
				Если ЗаписьРегистра.Входящий Тогда
					Если НЕ ЗначениеЗаполнено(ЗвонокОбъект.Ответственный) Тогда
						НовыйОтветственный = Неопределено;
						
						КонтактИмяМетаданных = АбонентКонтакт.Метаданные().Имя;
						Если КонтактИмяМетаданных = "Партнеры" Тогда
							НовыйОтветственный = АбонентКонтакт.ОсновнойМенеджер;

						ИначеЕсли КонтактИмяМетаданных = "КонтактныеЛицаПартнеров" Тогда
							ВладелецКонтакта = сфпПолучитьВладельцаКонтакта(АбонентКонтакт);
							НовыйОтветственный = ВладелецКонтакта.ОсновнойМенеджер;

						ИначеЕсли КонтактИмяМетаданных = "Контрагенты" Тогда
							Если сфпРеквизитСуществует(АбонентКонтакт, "Ответственный") Тогда
								НовыйОтветственный = АбонентКонтакт.Ответственный;
							КонецЕсли;

						ИначеЕсли КонтактИмяМетаданных = "КонтактныеЛица" Тогда
							Если сфпРеквизитСуществует(АбонентКонтакт, "Ответственный") Тогда
								НовыйОтветственный = АбонентКонтакт.Ответственный;
								Если НЕ ЗначениеЗаполнено(НовыйОтветственный) Тогда
									Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
										Если сфпРеквизитСуществует(ВладелецКонтакта, "Ответственный") Тогда
											НовыйОтветственный = АбонентКонтакт.ВладелецКонтакта;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(НовыйОтветственный) Тогда
									НовыйОтветственный = сфпПолучитьПользователяСотрудника(НовыйОтветственный);
								КонецЕсли;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(НовыйОтветственный) Тогда
								УстановитьЗначениеРеквизита(ЗвонокОбъект, "Ответственный", НовыйОтветственный, ТребуетсяЗаписьЗвонка);
								Если ЗначениеЗаполнено(ЗвонокОбъект.Ответственный) Тогда
									ТекстОписания = Нстр("ru = 'Ответственный определен по закреплению менеджера (сотрудника) за клиентом'");
									ОписаниеЗвонка = ОписаниеЗвонка + Символы.ПС + Символы.ПС + ТекстОписания;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			
			Иначе
				АбонентПредставление = НСтр("ru='Несколько совпадений номера: '") + ЗаписьРегистра.НомерТелефона;

				СписокЗвонящих = сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(МассивЗвонящих);
				Если СписокЗвонящих.Количество() > 0 Тогда
					СтрокаДобавки = Нстр("ru = 'Совпадения по номеру '") + ЗаписьРегистра.НомерТелефона + Нстр("ru =':'");
					ОписаниеЗвонка = ?(ЗначениеЗаполнено(ОписаниеЗвонка), ОписаниеЗвонка + Символы.ПС + Символы.ПС + СтрокаДобавки, СтрокаДобавки);
				КонецЕсли;
				Для Каждого ЭлементСписка Из СписокЗвонящих Цикл
					СтрокаПредставления = ЭлементСписка.Представление;
					ОписаниеЗвонка = ОписаниеЗвонка + Символы.ПС + СтрокаПредставления;
				КонецЦикла;
			КонецЕсли;	
			
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "АбонентПредставление", АбонентПредставление, ТребуетсяЗаписьЗвонка);
			
			Если НЕ ПустаяСтрока(ОписаниеЗвонка) Тогда
				УстановитьЗначениеРеквизита(ЗвонокОбъект, "Описание", ОписаниеЗвонка, ТребуетсяЗаписьЗвонка);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЗвонокОбъект.Ответственный) Тогда
				УстановитьЗначениеРеквизита(ЗвонокОбъект, "Ответственный", ПользовательДляОповещений, ТребуетсяЗаписьЗвонка);
			КонецЕсли;
			
			АвторЗвонка = ?(ЗначениеЗаполнено(ЗвонокОбъект.Ответственный), ЗвонокОбъект.Ответственный, ТекущийАвторизованныйПользователь);
            УстановитьЗначениеРеквизита(ЗвонокОбъект, "Автор", АвторЗвонка, ТребуетсяЗаписьЗвонка);
														
			Если Не ЗначениеЗаполнено(НайденныйЗвонок) Тогда
				ЗвонокОбъект.УстановитьНовыйНомер();
			КонецЕсли;
			Попытка
				Если ТребуетсяЗаписьЗвонка Тогда
					ЗвонокОбъект.Записать();
				КонецЕсли;
			Исключение
				СтрОшибки = ОписаниеОшибки();
				СтрОшибки = НСтр("ru='Не удалось записать Телефонный звонок'") + ": " + СтрОшибки;
								
				Если ПрерватьВыполнениеПриОшибке Тогда
					ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
					ВызватьИсключение СтрОшибки;
					
				ИначеЕсли ПовторитьВыполнениеПриОшибке Тогда
					УспешнаяЗапись = Ложь;
					
					Для к = 1 По 3 Цикл
						Попытка
							ЗвонокОбъект.Записать();
							УспешнаяЗапись = Истина;
							Прервать;
						Исключение
							СтрОшибки = ОписаниеОшибки();
							СтрОшибки = НСтр("ru='Не удалось записать Телефонный звонок'") + ": " + СтрОшибки;
						КонецПопытки;	
					КонецЦикла;
					
					Если НЕ УспешнаяЗапись Тогда
						ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
						ВызватьИсключение СтрОшибки;
					КонецЕсли;
					
				Иначе
					ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
				КонецЕсли;	
			КонецПопытки;
			
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "Звонок", ЗвонокОбъект.Ссылка, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "Ответственный", ЗвонокОбъект.Ответственный, ТребуетсяЗаписьРегистра);
						
			Если НЕ ПустаяСтрока(ИмяРеквизитаАбонентКонтакт) Тогда
				УстановитьЗначениеРеквизита(ЗаписьРегистра, "АбонентКонтакт", ЗвонокОбъект[ИмяРеквизитаАбонентКонтакт], ТребуетсяЗаписьРегистра);
			КонецЕсли;

			// Записываем новую запись регистра
			Попытка
				Если ТребуетсяЗаписьРегистра Тогда
					ЗаписьРегистра.Записать();
				КонецЕсли;
			Исключение
				СтрОшибки = ОписаниеОшибки();
				СтрОшибки = НСтр("ru='Не удалось сформировать запись регистра Истории звонков'") + ": " + СтрОшибки;
								
				Если ПрерватьВыполнениеПриОшибке Тогда
					ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
					ВызватьИсключение СтрОшибки;
					
				ИначеЕсли ПовторитьВыполнениеПриОшибке Тогда
					УспешнаяЗапись = Ложь;
					
					Для к = 1 По 3 Цикл
						Попытка
							ЗвонокОбъект.Записать();
							УспешнаяЗапись = Истина;
							Прервать;
						Исключение
							СтрОшибки = ОписаниеОшибки();
							СтрОшибки = НСтр("ru='Не удалось записать Телефонный звонок'") + ": " + СтрОшибки;
						КонецПопытки;	
					КонецЦикла;
					
					Если НЕ УспешнаяЗапись Тогда
						ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
						ВызватьИсключение СтрОшибки;
					КонецЕсли;
					
				Иначе
					ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
				КонецЕсли;
			КонецПопытки;
			
			Если ЗвонокОбъект.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный Тогда
				// Отмечаем все неотвеченные звонки по данному номеру, как отвеченные
				сфпЗавершитьПропущенныеЗвонки(ЗаписьРегистра.НомерТелефона);
			КонецЕсли;
			
			// Сдвигаем границу начала выборки записей
			ДатаПоследнегоЗвонка = Выборка.StartTime;
		КонецЕсли;	
	КонецЦикла;
	
	// Проверяем на незавершенные звонки
	Если ДатаНезавершенногоЗвонка = Дата('00010101') Тогда
		// Устанавливаем дату начала последнего звонка
		Константы.сфпДатаИсторииЗвонков.Установить(ДатаПоследнегоЗвонка);

	Иначе
		// Устанавливаем дату начала первого незавершенного звонка
		Константы.сфпДатаИсторииЗвонков.Установить(ДатаНезавершенногоЗвонка);
	КонецЕсли;
	
	// Создаем напоминания о пропущенных звонках
	сфпНапомнитьОПропущенныхЗвонках();

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // сфпПолучитьИсториюЗвонков()

// Процедура записывает окончание звонка в регистр истории звонков
//
// Параметры:
//	Звонок				- ДокументСсылка	- Телефонный звонок
//	ИдентификаторЗвонка	- Число				- Идентификатор звонка
//
Процедура сфпЗаписатьОкончаниеЗвонкаВРегистр(Звонок, ИдентификаторЗвонка) Экспорт
	
	ДатаОкончания = сфпТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(Звонок);
	НаборЗаписей.Прочитать();
	
	ИмяРеквизитаАбонентКонтакт = сфпИмяРеквизитаАбонентКонтакт();
	
	ЗаписатьНабор = Ложь;
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если ЗаписьНабора.ИдентификаторЗвонка = Строка(ИдентификаторЗвонка) Тогда
			Если ЗаписьНабора.ДатаОкончания <> ДатаОкончания Тогда
				ЗаписьНабора.ДатаОкончания = ДатаОкончания;
				ЗаписатьНабор = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЗаписьНабора.АбонентКонтакт) И НЕ ПустаяСтрока(ИмяРеквизитаАбонентКонтакт) Тогда
				Если ЗаписьНабора.АбонентКонтакт <> Звонок[ИмяРеквизитаАбонентКонтакт] Тогда
					ЗаписьНабора.АбонентКонтакт = Звонок[ИмяРеквизитаАбонентКонтакт];
					ЗаписатьНабор = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				Если ЗаписатьНабор Тогда
					НаборЗаписей.Записать();
				КонецЕсли;
			Исключение КонецПопытки;	
			
			// Отмечаем все неотвеченные звонки по данному номеру, как отвеченные
			сфпЗавершитьПропущенныеЗвонки(ЗаписьНабора.НомерТелефона);	
			
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // сфпЗаписатьОкончаниеЗвонкаВРегистр()	

// Процедура записывает идентификатор записи в регистр истории звонков
//
// Параметры:
//	Звонок				- ДокументСсылка	- Телефонный звонок
//	ИдентификаторЗвонка	- Число				- Идентификатор звонка
//	ИдентификаторЗаписи	- Строка			- Идентификатор записи
//
Процедура сфпЗаписатьИдентификаторЗаписиВРегистр(Звонок, ИдентификаторЗвонка, ИдентификаторЗаписи) Экспорт
	
	Если Звонок = Неопределено Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДатаНачала,
		|	НомерТелефона,
		|	Звонок,
		|	Звонок.сфпИдентификаторЗаписи КАК сфпИдентификаторЗаписи
		|ИЗ
		|	РегистрСведений.сфпИсторияЗвонков
		|ГДЕ
		|	ИдентификаторЗвонка = &ИдентификаторЗвонка
		|	И ПОДСТРОКА(ИдентификаторЗаписи, 1, 10) = """"
		|	И ДатаНачала > &ДатаНачала");
		Запрос.УстановитьПараметр("ИдентификаторЗвонка", "" + ИдентификаторЗвонка);
		Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - 7200);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.ИдентификаторЗаписи = ИдентификаторЗаписи;
				
				Попытка
					МенеджерЗаписи.Записать();
				Исключение КонецПопытки;
				
				Если Выборка.сфпИдентификаторЗаписи <> ИдентификаторЗаписи Тогда
					ЗвонокОбъект = Выборка.Звонок.ПолучитьОбъект();
					ЗвонокОбъект.сфпИдентификаторЗаписи = ИдентификаторЗаписи;
					
					Попытка
						ЗвонокОбъект.Записать();
					Исключение КонецПопытки;
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;	
		
	Иначе
		Если НЕ ЗначениеЗаполнено(Звонок) ИЛИ НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) ИЛИ НЕ ЗначениеЗаполнено(ИдентификаторЗаписи) Тогда	
			Возврат;
		КонецЕсли;

		ИмяРеквизитаАбонентКонтакт = сфпИмяРеквизитаАбонентКонтакт();
		Если ПустаяСтрока(ИмяРеквизитаАбонентКонтакт) Тогда
			Возврат;
		КонецЕсли;

		НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Звонок.Установить(Звонок);
		НаборЗаписей.Прочитать();
		
		ЗаписатьНабор = Ложь;
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗаписьНабора.ИдентификаторЗвонка = Строка(ИдентификаторЗвонка) Тогда
				Если НЕ ЗначениеЗаполнено(ЗаписьНабора.ИдентификаторЗаписи) Тогда
					ЗаписьНабора.ИдентификаторЗаписи = ИдентификаторЗаписи;
					ЗаписатьНабор = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗаписьНабора.АбонентКонтакт) И ЗаписьНабора.АбонентКонтакт <> Звонок[ИмяРеквизитаАбонентКонтакт] Тогда
					ЗаписьНабора.АбонентКонтакт = Звонок[ИмяРеквизитаАбонентКонтакт];
					ЗаписатьНабор = Истина;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;

		Если ЗаписатьНабор Тогда
			Попытка
				НаборЗаписей.Записать();
			Исключение КонецПопытки;	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // сфпЗаписатьИдентификаторЗаписиВРегистр()

// Функция выполняет поиск звонка в регистре истории звонков по данным звонка
// в диапазоне +- 1 час от даты начала звонка
//
// Параметры:
//	hCall		- Строка	- Идентификатор звонка
//	StartDate	- Дата		- Дата начала звонка
//
// Возвращаемое значение:
//	Ссылка	- Ссылка на документ Телефонный звонок
//
Функция сфпНайтиЗвонокВРегистреПоДаннымЗвонка(hCall, ВходящийЗвонок, StartDate, НомерТелефона) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Звонок = Документы.ТелефонныйЗвонок.ПустаяСсылка();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Звонок
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков
	|ГДЕ
	|	ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода" + ?(СтрДлина(hCall) > 1, "", "
	|	И НомерТелефона = &НомерТелефона") + "
	|	И ИдентификаторЗвонка = &ИдентификаторЗвонка
	|	И Входящий = &Входящий
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала");
	Запрос.УстановитьПараметр("ИдентификаторЗвонка", "" + hCall);
	Запрос.УстановитьПараметр("Входящий", ВходящийЗвонок);
	Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	Запрос.УстановитьПараметр("НачалоПериода", ?(СтрДлина(hCall) > 1, StartDate - 3600, StartDate - 30));
	Запрос.УстановитьПараметр("КонецПериода", StartDate + 60);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Звонок = Выборка.Звонок;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Звонок;

КонецФункции //сфпНайтиЗвонокВРегистреПоДаннымЗвонка()

// Процедура записывает/изменяет абонента в регистре из документа "Телефонный звонок"
//
// Параметры:
//	Звонок				- ДокументСсылка	- Телефонный звонок
//	ИдентификаторЗвонка	- Число				- Идентификатор звонка
//
Процедура сфпЗаписатьАбонентаЗвонкаВРегистрИсторииЗвонков(Звонок, ИдентификаторЗвонка)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		Возврат;
	КонецЕсли;

	ИмяРеквизитаАбонентКонтакт = сфпИмяРеквизитаАбонентКонтакт();
	Если ПустаяСтрока(ИмяРеквизитаАбонентКонтакт) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатаНачала,
	|	НомерТелефона,
	|	Звонок,
	|	Звонок." + ИмяРеквизитаАбонентКонтакт + " КАК АбонентКонтакт
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков
	|ГДЕ
	|	ИдентификаторЗвонка = &ИдентификаторЗвонка");
	Запрос.УстановитьПараметр("ИдентификаторЗвонка", ИдентификаторЗвонка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаНачала = Выборка.ДатаНачала;
		МенеджерЗаписи.НомерТелефона = Выборка.НомерТелефона;
		МенеджерЗаписи.Звонок = Выборка.Звонок;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			Если МенеджерЗаписи.АбонентКонтакт <> Выборка.АбонентКонтакт Тогда
				МенеджерЗаписи.АбонентКонтакт = Выборка.АбонентКонтакт;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // сфпЗаписатьАбонентаЗвонкаВРегистрИсторииЗвонков()

// Функция выполняет поиск звонка в регистре истории звонков по номеру телефона 
// в диапазоне +- 10 секунд от переданной даты звонка
//
// Параметры:
//	ДатаНачала			- Дата		- Дата начала звонка
//	НомерТелефона		- Строка	- очищенный номер телефона
//
// Возвращаемое значение:
//	Булево	- Наличие записи в регистре
//
Функция сфпНайтиЗвонокВРегистреПоНомеруПриЗагрузкеИстории(ДатаЗвонка, НомерТелефона)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",			ДатаЗвонка - 10);
	Запрос.УстановитьПараметр("КонецПериода",			ДатаЗвонка + 10);
	Запрос.УстановитьПараметр("НомерТелефона",			"%" + НомерТелефона + "%");
	// Получаем таблицу истории звонков
	Запрос.Текст = "ВЫБРАТЬ
	               |	сфпИсторияЗвонков.Звонок
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	               |ГДЕ
	               |	сфпИсторияЗвонков.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И сфпИсторияЗвонков.НомерТелефона ПОДОБНО &НомерТелефона";
	Выборка = Запрос.Выполнить();
	Возврат НЕ Выборка.Пустой(); 
КонецФункции //сфпНайтиЗвонокВРегистреПоНомеруПриЗагрузкеИстории()

// Функция находит звонок по номеру телефона и дате звонка в регистре истории звонков.
//
// Параметры:
//	НомерТелефона	- Строка	- Номер телефона
//	ДатаЗвонка		- Дата		- Дата и время звонка
//
// Возвращаемое значение:
//	ДокументСсылка	- Найденный звонок
//
Функция сфпНайтиПоследнийЗвонокПоНомеру(НомерТелефона, ДатаЗвонка)
	
	Звонок = "";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Звонок, МИНИМУМ(ДатаНачала) КАК ДатаНачала, МАКСИМУМ(ДатаОкончания) КАК ДатаОкончания
	|ИЗ РегистрСведений.сфпИсторияЗвонков
	|ГДЕ НомерТелефона = &НомерТелефона И ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
	|СГРУППИРОВАТЬ ПО Звонок
	|УПОРЯДОЧИТЬ ПО Звонок.Дата");
	Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаЗвонка - 3600);
	Запрос.УстановитьПараметр("КонецПериода", ДатаЗвонка + 1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДатаЗвонка >= Выборка.ДатаНачала Тогда
			Если ДатаЗвонка < Выборка.ДатаОкончания Тогда
				// Новый звонок входит в текущий.
				Звонок = Выборка.Звонок;
				Прервать;

			ИначеЕсли (ДатаЗвонка - Выборка.ДатаОкончания) < 3 Тогда
				// Новый звонок является продолжением текущего.
				Звонок = Выборка.Звонок;
				Прервать;
			КонецЕсли;

		ИначеЕсли (Выборка.ДатаНачала - ДатаЗвонка) < 60 Тогда
			// Новый звонок является началом текущего.
			Звонок = Выборка.Звонок;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Звонок;

КонецФункции // сфпНайтиПоследнийЗвонокПоНомеру()	

// Функция находит ответственного по его внутреннему номеру
//
// Параметры:
//	ВнутреннийНомер	- Строка	- Внутренний номер
//
// Возвращаемое значение:
//	СправочникСсылка	- Ответственный
//
Функция сфпНайтиОтветственного(ВнутреннийНомер) Экспорт
	
	Если ПустаяСтрока(ВнутреннийНомер) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПВХ_СофтфонНастройкиПользователей = сфпИмяПВХ_СофтфонНастройкиПользователей();
	ИмяРегистраСофтфонНастройкиПользователей = сфпИмяРегистраСофтфонНастройкиПользователей();
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ " + ?(ИмяРегистраСофтфонНастройкиПользователей = "ПраваИНастройки", "ПользовательПрофиль", "Пользователь") + " КАК Пользователь
	|ИЗ РегистрСведений." + ИмяРегистраСофтфонНастройкиПользователей + "
	|ГДЕ " + ?(ИмяРегистраСофтфонНастройкиПользователей = "ПраваИНастройки", "ПравоНастройка", "Настройка") + " = ЗНАЧЕНИЕ(ПланВидовХарактеристик." + ИмяПВХ_СофтфонНастройкиПользователей + ".сфпТекущийВнутреннийНомер) И Значение = &ВнутреннийНомер");
	Запрос.УстановитьПараметр("ВнутреннийНомер", ВнутреннийНомер);
	Запрос.УстановитьПараметр("ВнутреннийНомерДополнительный", "%" + ВнутреннийНомер + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;	
	КонецЕсли;

	Возврат Справочники.Пользователи.ПустаяСсылка();

КонецФункции // сфпНайтиОтветственного()	

// Функция формирует из строки подключения структуру параметров подключения
//
// Параметры:
//	СтрокаПодключения	- Строка	- Строка подключения
//
// Возвращаемое значение:
//	Структура	- Структура  параметров подключения
//
Функция сфпПолучитьСтруктуруПодключения(СтрокаПодключения) Экспорт
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения.Вставить("Пользователь",	"");
	СтруктураПодключения.Вставить("Пароль",			"");
	СтруктураПодключения.Вставить("Сервер",			"");
	СтруктураПодключения.Вставить("БазаДанных",		"");
	Пока Истина Цикл
		ПозицияКонца	= Найти(СтрокаПодключения, ";");
		ПозицияСередины	= Найти(СтрокаПодключения, "=");
		Если ПозицияСередины = 0 Тогда Прервать; КонецЕсли;
		Ключ = Лев(СтрокаПодключения, ПозицияСередины - 1);
		Если ПозицияКонца = 0 Тогда
			Значение = Сред(СтрокаПодключения, ПозицияСередины + 1);
			СтрокаПодключения = "";
		Иначе	
			Значение = Сред(СтрокаПодключения, ПозицияСередины + 1, ПозицияКонца - ПозицияСередины - 1);	 
			СтрокаПодключения = Сред(СтрокаПодключения, ПозицияКонца + 1); 
		КонецЕсли;	
		Если Ключ = "Data Source" Тогда
			СтруктураПодключения.Сервер = Значение;
		ИначеЕсли Ключ = "Initial Catalog" Тогда
			СтруктураПодключения.БазаДанных = Значение;
		ИначеЕсли Ключ = "User ID" Тогда
			СтруктураПодключения.Пользователь = Значение;
		ИначеЕсли Ключ = "Password" Тогда
			СтруктураПодключения.Пароль = Значение;
		КонецЕсли;	
	КонецЦикла;
	Возврат СтруктураПодключения;
КонецФункции // сфпПолучитьСтруктуруПодключения()	

// Процедура меняет статус у пропущенных звонков по номеру телефона на отвеченные
//
// Параметры:
//	НомерТелефона	- Строка	- Номер телефона
//
Процедура сфпЗавершитьПропущенныеЗвонки(НомерТелефона) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерсияСофтФона = ИспользуемаяВерсияСофтФона();
	УдалятьНапоминания = (ВерсияСофтФона <> Перечисления.сфпВерсииСофтФон.СофтФотPROSTO);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Звонок
	|ИЗ РегистрСведений.сфпИсторияЗвонков
	|ГДЕ НомерТелефона = &НомерТелефона И Звонок.сфпСостояниеЗвонка = ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Пропущенный) И Входящий");
	Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗвонокОбъект = Выборка.Звонок.ПолучитьОбъект();
		ЗвонокОбъект.сфпСостояниеЗвонка	= Перечисления.сфпСостоянияЗвонков.Отвеченный;
		ЗвонокОбъект.сфпПерезвонили = Истина;
			
		Попытка
			ЗвонокОбъект.Записать();
		Исключение КонецПопытки;
		
		Если УдалятьНапоминания Тогда
			// Удаляем напоминание о пропущенном звонке
			сфпУдалитьНапоминанияОПропущенныхЗвонках(Выборка.Звонок);
		КонецЕсли;
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // сфпЗавершитьПропущенныеЗвонки()	

// Процедура создает напоминания о пропущенных звонках
//
// Параметры:
//	Нет.
//
Процедура сфпНапомнитьОПропущенныхЗвонках()
	
	Если НЕ сфпОповещатьОПропущенныхЗвонках() Тогда
		Возврат;
	КонецЕсли;
	
	ВремяСобытия = сфпТекущаяДата();
	сфпОтветственный = Константы.сфпПользовательДляОповещений.Получить();
	ПараметрыНапоминания = Новый Структура;
	Если ЗначениеЗаполнено(сфпОтветственный) Тогда
		  ПараметрыНапоминания.Вставить("Пользователь", сфпОтветственный);
	Иначе ПараметрыНапоминания.Вставить("Пользователь", сфпТекущийПользователь());
	КонецЕсли;
	ПараметрыНапоминания.Вставить("ВремяСобытия", ВремяСобытия);
	ПараметрыНапоминания.Вставить("Источник", "");
	ПараметрыНапоминания.Вставить("СрокНапоминания", ВремяСобытия);
	ПараметрыНапоминания.Вставить("Описание", "");
	ПараметрыНапоминания.Вставить("СпособУстановкиВремениНапоминания", Перечисления["СпособыУстановкиВремениНапоминания"].ВУказанноеВремя);
	
	МассивЗвонков = сфпПолучитьПропущенныеЗвонкиДляНапоминаний();
	Для Каждого ЭлементМассива Из МассивЗвонков Цикл
		ПараметрыНапоминания.Источник = ЭлементМассива.Звонок;
		ПараметрыНапоминания.Описание = НСтр("ru='Пропущенный звонок по номеру: '") + ЭлементМассива.Звонок.АбонентКакСвязаться
			+ " от абонента: " + ЭлементМассива.Звонок.АбонентПредставление;
		Если ЗначениеЗаполнено(ЭлементМассива.Звонок.Ответственный) Тогда
			ПараметрыНапоминания.Пользователь = ЭлементМассива.Звонок.Ответственный;
		КонецЕсли;
		
		сфпОбщегоНазначения.сфпПодключитьНапоминание(ПараметрыНапоминания, Ложь);
	КонецЦикла;	
	
КонецПроцедуры // сфпНапомнитьОПропущенныхЗвонках()

// Процедура удаляет напоминания о пропущенных звонках
//
// Параметры:
//	Источник	- ДокументСсылка	- Телефонный звонок
//
Процедура сфпУдалитьНапоминанияОПропущенныхЗвонках(Источник)
	
	ПараметрыНапоминания = Новый Структура();
	ПараметрыНапоминания.Вставить("Пользователь", сфпТекущийПользователь());
	ПараметрыНапоминания.Вставить("ВремяСобытия", сфпТекущаяДата());
	ПараметрыНапоминания.Вставить("Источник", "");
	
	ИмяДокументаТелефонныйЗвонок = сфпИмяДокументаТелефонныйЗвонок();
	Если ЗначениеЗаполнено(ИмяДокументаТелефонныйЗвонок) И ЗначениеЗаполнено(Источник) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ Пользователь, ВремяСобытия, Источник
		|ИЗ РегистрСведений.НапоминанияПользователя
		|ГДЕ Источник = &Источник");
		Запрос.УстановитьПараметр("Источник", Источник);

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПараметрыНапоминания.Пользователь = Выборка.Пользователь;
			ПараметрыНапоминания.ВремяСобытия = Выборка.ВремяСобытия;
			ПараметрыНапоминания.Источник = Выборка.Источник;
			сфпОбщегоНазначения.сфпОтключитьНапоминание(ПараметрыНапоминания, Ложь);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // сфпУдалитьНапоминанияОПропущенныхЗвонках()

// Функция возвращает массив пропущенных звонков для создания напоминаний
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив телефонных звонков
//
Функция сфпПолучитьПропущенныеЗвонкиДляНапоминаний()
	
	// АльфаАвто
	// Зафиксируем период вывода звонков в напоминания
	УстановитьПривилегированныйРежим(Истина);
	ДатаПоследнегоНапоминания = Константы.ДатаСозданияНапоминанийОПропущенныхЗвонках.Получить();
	ТекущаяДатаНапоминания = ТекущаяДатаСеанса();
	Константы.ДатаСозданияНапоминанийОПропущенныхЗвонках.Установить(ТекущаяДатаНапоминания);
	// Конец АльфаАвто
	
	Запрос = Новый Запрос;
	// АльфаАвто
	Запрос.УстановитьПараметр("ДатаНачала", ДатаПоследнегоНапоминания);
	Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДатаНапоминания);
	// Конец АльфаАвто
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	МИНИМУМ(сфпИсторияЗвонков.Звонок) КАК Звонок,
	               |	сфпИсторияЗвонков.НомерТелефона,
	               |	СУММА(1) КАК Количество
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	               |ГДЕ
	               |	сфпИсторияЗвонков.Входящий
	               |	И сфпИсторияЗвонков.Звонок.сфпСостояниеЗвонка = ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Пропущенный)
	// АльфаАвто
	               |	И сфпИсторияЗвонков.Звонок.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	// Конец АльфаАвто
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	сфпИсторияЗвонков.НомерТелефона";
	МассивЗвонков = Новый Массив;
	Выборка	= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураЗвонка = Новый Структура;
		СтруктураЗвонка.Вставить("Звонок",			Выборка.Звонок);
		СтруктураЗвонка.Вставить("НомерТелефона",	Выборка.НомерТелефона);
		СтруктураЗвонка.Вставить("Количество",		Выборка.Количество);
		МассивЗвонков.Добавить(СтруктураЗвонка);
	КонецЦикла;	
	Возврат МассивЗвонков;
КонецФункции // сфпПолучитьПропущенныеЗвонкиДляНапоминаний()

// Процедура-обработчик события "ПриЗаписи" объекта-документа СофтФона
//
// Параметры:
//	Источник 	- ДокументОбъект	- Документ СофтФона, который записывается
//	Отказ		- Булево			- Признак отмены
//
Процедура сфпПриЗаписиОбъектаСофтфона(Источник, Отказ) Экспорт
	Если Отказ Тогда Возврат; КонецЕсли;
	Если сфпИспользоватьСофтФон() Тогда
		МетаданныеДокумента = Источник.Ссылка.Метаданные();
		Если сфпОбщегоНазначения.сфпЕстьРеквизитОбъекта("Партнер",МетаданныеДокумента) Тогда
			ТелефонныйЗвонок = сфпВернутьОснованиеДокумента(Источник.Ссылка);
			сфпСкорректироватьАбонентаУТелефонногоЗвонка(Источник.КонтактноеЛицо, Источник.Партнер, ТелефонныйЗвонок);
		ИначеЕсли сфпОбщегоНазначения.сфпЕстьРеквизитОбъекта("Клиент",МетаданныеДокумента) Тогда
			ТелефонныйЗвонок = сфпВернутьОснованиеДокумента(Источник.Ссылка);		
			сфпСкорректироватьАбонентаУТелефонногоЗвонка(Источник.КонтактноеЛицо, Источник.Клиент, ТелефонныйЗвонок)
		КонецЕсли;
	КонецЕсли;
// +код для УНФ
	// УправлениеНебольшойФирмойСервер.ЕстьРеквизитДокумента() = ОбщегоНазначения.ЕстьРеквизитОбъекта()
// -код для УНФ	
КонецПроцедуры	

Процедура сфпПередЗаписьюОбъектаСофтФонаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если НЕ сфпИспользоватьСофтФон() Тогда
		Возврат;
	КонецЕсли;

	МетаданныеОбъекта = Источник.Ссылка.Метаданные();
	ИмяМетаданных = МетаданныеОбъекта.Имя;
	
	Если ИмяМетаданных = "ТелефонныйЗвонок" Тогда
		Если НЕ ЗначениеЗаполнено(Источник.сфпИдентификаторЗаписи) Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ ДатаНачала, НомерТелефона, Звонок, ИдентификаторЗаписи
			|ИЗ РегистрСведений.сфпИсторияЗвонков
			|ГДЕ Звонок = &Звонок И ИдентификаторЗвонка = &ИдентификаторЗвонка И ПОДСТРОКА(ИдентификаторЗаписи, 1, 10) <> &ПустаяСтрока");
			Запрос.УстановитьПараметр("Звонок", Источник.Ссылка);
			Запрос.УстановитьПараметр("ИдентификаторЗвонка", Источник.сфпИдентификаторЗвонка);
			Запрос.УстановитьПараметр("ПустаяСтрока", "");
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ИдентификаторЗаписи) Тогда
				Источник.сфпИдентификаторЗаписи = Выборка.ИдентификаторЗаписи;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОНТЕКСТНАЯ РЕКЛАМА COMAGIC

// Функция проверяет использование CoMagic
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования Comagic
//
Функция сфпИспользоватьCoMagic() Экспорт
	Возврат Константы.сфпИспользоватьCoMagic.Получить();
КонецФункции // сфпИспользоватьCoMagic()

// Функция ищет контакт в справочниках элемент по переданному ID CoMagic
//
// Параметры: 
//  ID	- Строка	- Идентификатор контакта в системе CoMagic
//
// Возвращаемое значение: 
//  СправочникСсылка	- Найденный контакт
//
Функция сфпНайтиКонтактПоIDИзCoMagic(ID) Экспорт
	КонтактComagic	= Неопределено; 
	Если НЕ ПустаяСтрока(ID) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ID", ID);
		СписокСправочников = Новый СписокЗначений;
		СписокСправочников.Добавить("КонтактныеЛицаПартнеров");
		СписокСправочников.Добавить("Партнеры");
		СписокСправочников.Добавить("КонтактныеЛица");
		СписокСправочников.Добавить("Контрагенты");
		Для Каждого ЭлементСписка Из СписокСправочников Цикл
			Если Метаданные.Справочники.Найти(ЭлементСписка.Значение) = Неопределено Тогда
				Продолжить;
			ИначеЕсли Метаданные.Справочники[ЭлементСписка.Значение].Реквизиты.Найти("сфпCoMagicID") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Запрос.Текст = "ВЫБРАТЬ СправочникКонтактов.Ссылка ИЗ Справочник." + ЭлементСписка.Значение
				+ " КАК СправочникКонтактов ГДЕ СправочникКонтактов.сфпCoMagicID = &ID";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				КонтактComagic	= Выборка.Ссылка; 
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	Возврат КонтактComagic;
КонецФункции // сфпНайтиКонтактПоIDИзCoMagic()

// Процедура записывает ID клиента системы Comagic
//
// Параметры: 
//	Контакт	- СправочникСсылка	- Контакт	
//  ID		- Строка 			- Идентификатор контакта
//
Процедура сфпЗаписатьIDCoMagic(Контакт, ID) Экспорт 
	КонтактОбъект = Контакт.ПолучитьОбъект();
	КонтактОбъект.сфпCoMagicID = ID;
	Попытка
		КонтактОбъект.Записать();	
	Исключение
	КонецПопытки;			
КонецПроцедуры // ЗаписатьIDCoMagic()	

// Функция возвращает ключ сесси CoMagic
//
// Параметры:
//   Нет.
//
// Возвращаемое значение:
//  Строка - Ключ сессии получен
//
Функция сфпПолучитьКлючСессииCoMagic() Экспорт
	ПараметрыОператораКоллтрекинга = сфпСофтФонПроСервер.сфпПараметрыОператораКоллтрекинга();
	Соединение 			= Новый HTTPСоединение(ПараметрыОператораКоллтрекинга.ДоменAPI, , , , , ,
		Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
	Запрос 				= Новый HTTPЗапрос;
	Запрос.АдресРесурса = "/api/login/?login=" + СокрЛП(Константы.сфпЛогинCoMagic.Получить())
		+ "&password=" + СокрЛП(Константы.сфпПарольCoMagic.Получить()); 
	ФайлРезультата		= ПолучитьИмяВременногоФайла("txt");
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос, ФайлРезультата);
		Если Ответ.КодСостояния = 200 Тогда
			ТекстовыйФайл = Новый ТекстовыйДокумент;
			ТекстовыйФайл.Прочитать(ФайлРезультата,"UTF-8");
			РезультатСоответствие = UnJSON(ТекстовыйФайл.ПолучитьТекст());
			КлючСессии = РезультатСоответствие.Получить("data").Получить("session_key");
		Иначе
			КлючСессии	= "";
		КонецЕсли;
	Исключение
		сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(НСтр("ru = 'Не удалось получить ключ сессии: '") + Символы.ПС + ОписаниеОшибки());
		КлючСессии	= "";
	КонецПопытки;
	Соединение = Неопределено;
	Возврат КлючСессии;
КонецФункции // сфпПолучитьКлючСессииCoMagic()

// Процедура записывает в документ структуру CoMagic
//
// Параметры:
//	НовыйЗвонок			- ДокументСсылка	- Ссылка на документ
//	СтруктураCoMagic	- Структура			- Структура CoMagic
//
Процедура сфпЗаписатьСтруктуруCoMagic(НовыйЗвонок, СтруктураCoMagic) Экспорт
	ДокументОбъект				= НовыйЗвонок.ПолучитьОбъект();
	ДокументОбъект.сфпCoMagicID	= СтруктураCoMagic.comagic_context.visitor_id;
	ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + ?(ПустаяСтрока(ДокументОбъект.Комментарий), "", Символы.ПС) 
		+ НСтр("ru='Кампания: '") + СтруктураCoMagic.comagic_context.campaign + Символы.ПС 
		+ НСтр("ru='Сайт: '") + СтруктураCoMagic.comagic_context.site + Символы.ПС
		+ НСтр("ru='Ключевые слова: '") + СтруктураCoMagic.comagic_context.search_query; 
	Попытка
		ДокументОбъект.Записать();
	Исключение
	КонецПопытки;	
КонецПроцедуры // сфпЗаписатьСтруктуруCoMagic()


////////////////////////////////////////////////////////////////////////////////
// ПЛАН НУМЕРАЦИИ ФАС (РОССВЯЗЬ)

// Функция возвращает состав файлов реестра плана нумерации
//
// Параметры:
//  Разделитель	- Строка	- Разделитель файлов. Значение по умолчанию: ";"
//
// Возвращаемое значение:
//  Массив - Состав файлов реестра
//
Функция сфпПолучитьФайлыРеестра(Разделитель = ",")
	
	ИнтернетАдресРеестра = Константы["сфпПланНумерацииАдресРеестра"].Получить();
	Если ПустаяСтрока(ИнтернетАдресРеестра) Тогда
		ИнтернетАдресРеестра = "https://rossvyaz.gov.ru/docs/articles/";
	КонецЕсли;
	
	ФайлыРеестраНумерации = Константы["сфпПланНумерацииФайлыРеестра"].Получить();
	Если ПустаяСтрока(ФайлыРеестраНумерации) Тогда
		ФайлыРеестраНумерации = "Kody_ABC-3kh.csv,Kody_ABC-4kh.csv,Kody_ABC-8kh.csv,Kody_DEF-9kh.csv";
	КонецЕсли;
	ФайлыРеестра = сфпРазложитьСтрокуВМассивПодстрок(ФайлыРеестраНумерации, Разделитель);
	
	ПолныеИменаФайловРеестра = Новый Массив();
	
	Для Каждого ФайлРеестра Из ФайлыРеестра Цикл
		ПолныеИменаФайловРеестра.Добавить(ИнтернетАдресРеестра + ФайлРеестра);
	КонецЦикла;

	Возврат ПолныеИменаФайловРеестра;

КонецФункции // сфпПолучитьФайлыРеестра()

// Функция создает Бизнес-регион по полному имени региона
//
// Параметры:
//  ПолноеИмяРегиона	- Строка	- Полное имя Бизнес-региона 
//
// Возвращаемое значение:
//  СправочникСсылка - Бизнес-регион
//
Функция сфпСоздатьБизнесРегион(ПолноеИмяРегиона)
	
	МассивРегионов = Новый Массив();
	
	ОстатокИмени = ПолноеИмяРегиона;
	Позиция = Найти(ПолноеИмяРегиона, "|");
	Пока Позиция > 0 Цикл
		ТекРегион = СокрЛП(Лев(ОстатокИмени, Позиция - 1));
		МассивРегионов.Добавить(ТекРегион);
	
		ОстатокИмени = Сред(ОстатокИмени, Позиция + 1);
		Позиция = Найти(ОстатокИмени, "|");
	КонецЦикла;
		
	Если ЗначениеЗаполнено(ОстатокИмени) Тогда
		МассивРегионов.Добавить(ОстатокИмени);
	КонецЕсли;

	Если Метаданные.Справочники.Найти("CRM_Регионы") <> Неопределено И Метаданные.Справочники.Найти("CRM_Города") <> Неопределено Тогда
		Регион = Справочники["CRM_Регионы"].ПустаяСсылка();
		Город = Справочники["CRM_Города"].ПустаяСсылка();
		
		Если МассивРегионов.Количество() > 1 Тогда
			Регион = Справочники["CRM_Регионы"].НайтиПоНаименованию(МассивРегионов[1], Истина);
			Если Регион.Пустая() Тогда
				РегионОбъект = Справочники["CRM_Регионы"].СоздатьЭлемент();
				РегионОбъект.Наименование = МассивРегионов[1];
				РегионОбъект.Записать();
				
				Регион = РегионОбъект.Ссылка;
			КонецЕсли;
			
			Город = Справочники["CRM_Города"].НайтиПоНаименованию(МассивРегионов[0], Истина,, Регион);
			Если Город.Пустая() Тогда
				ГородОбъект = Справочники["CRM_Города"].СоздатьЭлемент();
				ГородОбъект.Владелец = Регион;
				ГородОбъект.Наименование = МассивРегионов[0];
				ГородОбъект.Записать();
				
				Город = ГородОбъект.Ссылка;
			КонецЕсли;
			
		ИначеЕсли МассивРегионов.Количество() > 0 Тогда
			Регион = Справочники["CRM_Регионы"].НайтиПоНаименованию(МассивРегионов[0], Истина);
			Если Регион.Пустая() Тогда
				РегионОбъект = Справочники["CRM_Регионы"].СоздатьЭлемент();
				РегионОбъект.Наименование = МассивРегионов[0];
				РегионОбъект.Записать();
				
				Регион = РегионОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;	
			
		Возврат Новый Структура("Регион, Город", Регион, Город);
	
	Иначе	
		ТекРодитель = Справочники["БизнесРегионы"].ПустаяСсылка();
		
		НайденныйРегион = "";
		
		СчРегионов = МассивРегионов.Количество() - 1;
		Пока СчРегионов >= 0 Цикл
			ТекИмяРегиона = МассивРегионов[СчРегионов];
			
			НайденныйРегион = Справочники["БизнесРегионы"].НайтиПоНаименованию(ТекИмяРегиона, Истина, ТекРодитель);
			Если НайденныйРегион.Пустая() Тогда
				НайденныйРегион = Справочники["БизнесРегионы"].СоздатьЭлемент();
				НайденныйРегион.Родитель = ТекРодитель;
				НайденныйРегион.Наименование = ТекИмяРегиона;
				НайденныйРегион.Записать();
				
				НайденныйРегион = НайденныйРегион.Ссылка;
			КонецЕсли;
			
			ТекРодитель = НайденныйРегион;
			
			СчРегионов = СчРегионов - 1;
		КонецЦикла;	
		
		Возврат Новый Структура("Регион", НайденныйРегион);
	КонецЕсли;

КонецФункции // сфпСоздатьБизнесРегион()

// Процедура создает запись регистра Плана нумерации
//
// Параметры:
//	Код				- Строка			- Код оператора
//	НачалоДиапазона	- Строка			- Начало диапазона нумерации
//	КонецДиапазона	- Строка			- Конец диапазона нумерации
//	Емкость			- Число				- Количество номеров в диапазоне
//	Оператор		- Строка			- Наименование оператора
//	Регион			- СправочникСсылка	- Ссылка на Бизнес-регион
//	КэшРегионов		- ТаблицаЗначений	- Кэш регионов в разрезе полных наименований регионов
//
Процедура сфпОбновитьРегистрНумерации(Код, НачалоДиапазона, КонецДиапазона, Емкость, Оператор, РегионДиапазона, КэшРегионов = Неопределено)
	
	Если КэшРегионов <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Наименование", РегионДиапазона);
		НайденныеСтроки = КэшРегионов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			БизнесРегион = сфпСоздатьБизнесРегион(РегионДиапазона);
						
			НоваяСтрока = КэшРегионов.Добавить();
			НоваяСтрока.Наименование = РегионДиапазона;
			НоваяСтрока.Регион = БизнесРегион.Регион;
			
			Попытка
				НоваяСтрока.Город = БизнесРегион.Город;
			Исключение КонецПопытки;

		Иначе
			Регион = НайденныеСтроки[0].Регион;
			Город = НайденныеСтроки[0].Город;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РегионДиапазона) = Тип("Строка") Тогда
		БизнесРегион = сфпСоздатьБизнесРегион(РегионДиапазона);
		Регион = БизнесРегион.Регион;
			
		Попытка
			Город = БизнесРегион.Город;
		Исключение КонецПопытки;
		
	ИначеЕсли ТипЗнч(РегионДиапазона) = Тип("Структура") Тогда
		Регион = РегионДиапазона.Регион;
			
		Попытка
			Город = РегионДиапазона.Город;
		Исключение КонецПопытки;
		
	Иначе
		Возврат;
	КонецЕсли;
		
	МенеджерЗаписи = РегистрыСведений["сфпПланНумерации"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Код = Код;
	МенеджерЗаписи.НачалоДиапазона = НачалоДиапазона;
	МенеджерЗаписи.КонецДиапазона = КонецДиапазона;
	МенеджерЗаписи.Емкость = Емкость;
	МенеджерЗаписи.Оператор = Оператор;
	
	Попытка
		МенеджерЗаписи.БизнесРегион = Регион;
	Исключение КонецПопытки;
	
	Попытка
		МенеджерЗаписи.Регион = Регион;
		МенеджерЗаписи.Город = Город;
	Исключение КонецПопытки;

	МенеджерЗаписи.Записать();
	
КонецПроцедуры // сфпОбновитьРегистрНумерации()

// Процедура - обработчик регламентного задания загрузки плана нумерации
//
// Параметры:
//	Нет.
//
Процедура сфпЗагрузитьПланНумерацииИзСети() Экспорт
	
	Если НЕ сфпИспользоватьСофтФон() Тогда
		Возврат;
	
	ИначеЕсли НЕ сфпИспользоватьАвтоопределениеБизнесРегиона() Тогда
		Возврат;
	КонецЕсли;
	
	ФайлыРеестра = сфпПолучитьФайлыРеестра();
	Если ФайлыРеестра.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка Плана нумерации'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Файлы не найдены!'"));
		Возврат;
	КонецЕсли;	
	
	КэшРегионов = Новый ТаблицаЗначений();
	КэшРегионов.Колонки.Добавить("Наименование");
	КэшРегионов.Колонки.Добавить("Регион");
	КэшРегионов.Колонки.Добавить("Город");
	КэшРегионов.Индексы.Добавить("Наименование");
	
	НаборЗаписей = РегистрыСведений["сфпПланНумерации"].СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	Для Каждого АдресФайла Из ФайлыРеестра Цикл
		ИмяФайлаРеестра = СкачатьФайлРеестра(АдресФайла);
		Если ЗначениеЗаполнено(ИмяФайлаРеестра) Тогда
			ТекстФайла = Новый ЧтениеТекста(ИмяФайлаРеестра, КодировкаТекста.UTF8);
			ТекСтрока = ТекстФайла.ПрочитатьСтроку();
			Пока ТекСтрока <> Неопределено Цикл
				ЗначенияСтроки = сфпРазложитьСтрокуВМассивПодстрок(ТекСтрока, ";");
				
				Код = СокрЛП(ЗначенияСтроки[0]);
							
				Попытка
					КодЧислом = Число(Код);
				Исключение
					ТекСтрока = ТекстФайла.ПрочитатьСтроку();
					Продолжить;
				КонецПопытки;

				НачалоДиапазона = СокрЛП(ЗначенияСтроки[1]);
				КонецДиапазона = СокрЛП(ЗначенияСтроки[2]);
				Емкость = СокрЛП(ЗначенияСтроки[3]);
				Оператор = СокрЛП(ЗначенияСтроки[4]);
				Регион = СокрЛП(ЗначенияСтроки[5]);
				
				сфпОбновитьРегистрНумерации(Код, НачалоДиапазона, КонецДиапазона, Емкость, Оператор, Регион, КэшРегионов);
				
				ТекСтрока = ТекстФайла.ПрочитатьСтроку();
			КонецЦикла;
			
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка Плана нумерации'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Файл не найден: '" + АдресФайла));
		КонецЕсли;
	КонецЦикла;

	Если Метаданные.Справочники.Найти("Партнеры") <> Неопределено Тогда
		Если Метаданные.Справочники["Партнеры"].Реквизиты.Найти("БизнесРегион") <> Неопределено Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка
			|ИЗ Справочник.Партнеры.КонтактнаяИнформация
			|ГДЕ НЕ Ссылка.ПометкаУдаления И НЕ Ссылка.ЭтоГруппа И Ссылка.БизнесРегион = ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)");
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
				сфпЗаполнитьБизнесРегионПоНомеру(ТекОбъект);
				Если ЗначениеЗаполнено(ТекОбъект.БизнесРегион) Тогда
					ТекОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Справочники.Найти("Контрагенты") <> Неопределено Тогда
		Если Метаданные.Справочники["Контрагенты"].Реквизиты.Найти("CRM_Регион") <> Неопределено Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка
			|ИЗ Справочник.Контрагенты.КонтактнаяИнформация
			|ГДЕ НЕ Ссылка.ПометкаУдаления И НЕ Ссылка.ЭтоГруппа И Ссылка.CRM_Регион = ЗНАЧЕНИЕ(Справочник.CRM_Регионы.ПустаяСсылка)");
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
				сфпЗаполнитьБизнесРегионПоНомеру(ТекОбъект);
				Если ЗначениеЗаполнено(ТекОбъект.CRM_Регион) Тогда
					ТекОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // сфпЗагрузитьПланНумерацииИзСети()

// Функция возвращает путь к загруженному файлу реестра плана нумерации
//
// Параметры:
//  АдресФайла	- Строка	- url файла реестра на сайте ФАС Россвязь
//
// Возвращаемое значение:
//  Строка - Путь к загруженному файлу
//
Функция СкачатьФайлРеестра(АдресФайла)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("csv");
		
	СтруктураАдреса = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(АдресФайла);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураАдреса.ПутьНаСервере;
	Если ВРЕГ(Лев(АдресФайла, 5)) = ВРЕГ("HTTPS") Тогда
		  HTTPСоединение = Новый HTTPСоединение(СтруктураАдреса.Хост, СтруктураАдреса.Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	Иначе HTTPСоединение = Новый HTTPСоединение(СтруктураАдреса.Хост, СтруктураАдреса.Порт);
	КонецЕсли;
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяВременногоФайла);
	
	Если HTTPОтвет.КодСостояния = 301 Тогда
		НовыйАдресФайла = HTTPОтвет.Заголовки.Получить("location");
		Если ЗначениеЗаполнено(НовыйАдресФайла) Тогда
			Возврат СкачатьФайлРеестра(НовыйАдресФайла);
		КонецЕсли;
		
	Иначе
		Возврат ИмяВременногоФайла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	//	СкачатьФайлРеестра()

// Функция возвращает Бизнес-регион, определенный по номеру телефона (из регистра Плана нумерации)
//
// Параметры:
//  НомерТелефона	- Строка	- Номер телефона, по которому необходимо определить Бизнес-регион
//
// Возвращаемое значение:
//  СправочникСсылка - Бизнес-регион
//
Функция сфпНайтиБизнесРегионВРегистре(НомерТелефона)
	
	КодОператораПоиска = Лев(НомерТелефона, 3);
	НомерТелефонаПоиска = Сред(НомерТелефона, 4);
	
	Если НЕ ПустаяСтрока(КодОператораПоиска) И НЕ ПустаяСтрока(НомерТелефонаПоиска) Тогда
		Если Метаданные.РегистрыСведений.Найти("сфпПланНумерации") <> Неопределено Тогда
			РесурсыРегистра = Метаданные.РегистрыСведений["сфпПланНумерации"].Ресурсы;
			Если РесурсыРегистра.Найти("Регион") <> Неопределено И РесурсыРегистра.Найти("Город") <> Неопределено Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ Регион, Город
				|ИЗ РегистрСведений." + "сфпПланНумерации
				|ГДЕ Код = &Код И &Номер МЕЖДУ НачалоДиапазона И КонецДиапазона");
				Запрос.УстановитьПараметр("Код", КодОператораПоиска);
				Запрос.УстановитьПараметр("Номер", НомерТелефонаПоиска);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Возврат Новый Структура("Регион,Город", Выборка.Регион, Выборка.Город);
				КонецЕсли;
			
			ИначеЕсли РесурсыРегистра.Найти("БизнесРегион") <> Неопределено Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ БизнесРегион
				|ИЗ РегистрСведений." + "сфпПланНумерации
				|ГДЕ Код = &Код И &Номер МЕЖДУ НачалоДиапазона И КонецДиапазона");
				Запрос.УстановитьПараметр("Код", КодОператораПоиска);
				Запрос.УстановитьПараметр("Номер", НомерТелефонаПоиска);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Возврат Новый Структура("Регион", Выборка.БизнесРегион);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Регион", "");

КонецФункции // сфпНайтиБизнесРегионВРегистре()

// Функция возвращает Бизнес-регион, определенный по номеру телефона
//
// Параметры:
//  НомерТелефона	- Строка	- Номер телефона, по которому необходимо определить Бизнес-регион
//
// Возвращаемое значение:
//  СправочникСсылка - Бизнес-регион
//
Функция сфпПолучитьБизнесРегионПоНомеруТелефона(НомерТелефона) Экспорт
	
	Если НЕ сфпИспользоватьСофтФон() Тогда
		Возврат Неопределено;
	
	ИначеЕсли НЕ сфпИспользоватьАвтоопределениеБизнесРегиона() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БизнесРегион = сфпНайтиБизнесРегионВРегистре(НомерТелефона);
	Возврат БизнесРегион;

КонецФункции // сфпПолучитьБизнесРегионПоНомеруТелефона()

// Процедура-обработчик события "ПриЗаписи" объекта определения Бизнес-региона
//
// Параметры:
//	Источник 	- СправочникОбъект, ДокументОбъект	- Объект, проверяемый на заполнение Бизнес-региона по номеру
//	Отказ		- Булево							- Признак отмены
//
Процедура сфпПриЗаписиОбъектаОпределенияБизнесРегиона(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ сфпИспользоватьСофтФон() Тогда
		Возврат;
	
	ИначеЕсли НЕ сфпИспользоватьАвтоопределениеБизнесРегиона() Тогда
		Возврат;
	КонецЕсли;

	сфпЗаполнитьБизнесРегионПоНомеру(Источник);

КонецПроцедуры // сфпПриЗаписиОбъектаОпределенияБизнесРегиона()

// Процедура проверяет заполнение Бизнес-региона и выполняет установку для незаполненных ревизитов 
//
// Параметры:
//	Объект	- СправочникОбъект, ДокументОбъект	- Объект, в котором необходимо заполнить Бизнес-регион
//
Процедура сфпЗаполнитьБизнесРегионПоНомеру(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбъекта = Объект.Метаданные().Имя;
	ИмяДокументаТелефонныйЗвонок = СтрЗаменить(сфпИмяДокументаТелефонныйЗвонок(), "Документ.", "");
	
	Если ИмяОбъекта = "CRM_Телемаркетинг" Тогда
		Для Каждого СтрокаУчастника Из Объект.Участники Цикл
			КонтактИмяМетаданных = СтрокаУчастника.Партнер.Метаданные().Имя;
			Если ЗначениеЗаполнено(СтрокаУчастника.Партнер) И КонтактИмяМетаданных = "Партнеры" Тогда
				ПартнерОбъект = СтрокаУчастника.Партнер.ПолучитьОбъект();
				
				Если НЕ ЗначениеЗаполнено(ПартнерОбъект.БизнесРегион) Тогда
					Если ЗначениеЗаполнено(СтрокаУчастника.Телефон) Тогда
						СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаУчастника.Телефон);
						НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
					
						БизнесРегион = сфпПолучитьБизнесРегионПоНомеруТелефона(НомерТелефона);
						Если ЗначениеЗаполнено(БизнесРегион) Тогда
							ПартнерОбъект.БизнесРегион = БизнесРегион;
							ПартнерОбъект.Записать();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли ИмяОбъекта = ИмяДокументаТелефонныйЗвонок Тогда
		ИмяРеквизитаАбонентКонтакт = сфпИмяРеквизитаАбонентКонтакт();
		Если НЕ ПустаяСтрока(ИмяРеквизитаАбонентКонтакт) Тогда
			АбонентКонтакт = Объект[ИмяРеквизитаАбонентКонтакт];
			Если НЕ ЗначениеЗаполнено(АбонентКонтакт) ИЛИ ТипЗнч(АбонентКонтакт) = Тип("Строка") Тогда
				Если Объект.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
					АбонентКонтакт = Объект.Контрагент;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(АбонентКонтакт) Тогда
				ВладелецКонтактаОбъект = Неопределено;
				
				КонтактИмяМетаданных = АбонентКонтакт.Метаданные().Имя;
				Если КонтактИмяМетаданных = "Партнеры" ИЛИ КонтактИмяМетаданных = "Контрагенты" Тогда
					ВладелецКонтактаОбъект = АбонентКонтакт.ПолучитьОбъект();
					
				ИначеЕсли КонтактИмяМетаданных = "КонтактныеЛицаПартнеров" ИЛИ КонтактИмяМетаданных = "КонтактныеЛица" Тогда
					ВладелецКонтакта = сфпПолучитьВладельцаКонтакта(АбонентКонтакт);
					Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
						ВладелецКонтактаОбъект = ВладелецКонтакта.ПолучитьОбъект();
					КонецЕсли;
				КонецЕсли;	
				
				Если ВладелецКонтактаОбъект <> Неопределено Тогда
					Если сфпРеквизитСуществует(ВладелецКонтактаОбъект.Ссылка, "БизнесРегион") Тогда
						Если НЕ ЗначениеЗаполнено(ВладелецКонтактаОбъект.БизнесРегион) Тогда
							Если ЗначениеЗаполнено(Объект.АбонентКакСвязаться) Тогда
								СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Объект.АбонентКакСвязаться);
								НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
													
								БизнесРегион = сфпПолучитьБизнесРегионПоНомеруТелефона(НомерТелефона);
								Если ЗначениеЗаполнено(БизнесРегион.Регион) Тогда
									ВладелецКонтактаОбъект.БизнесРегион = БизнесРегион.Регион;
									ВладелецКонтактаОбъект.Записать();
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли сфпРеквизитСуществует(ВладелецКонтактаОбъект.Ссылка, "CRM_Регион") Тогда
						Если НЕ ЗначениеЗаполнено(ВладелецКонтактаОбъект.CRM_Регион) Тогда
							Если ЗначениеЗаполнено(Объект.АбонентКакСвязаться) Тогда
								СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Объект.АбонентКакСвязаться);
								НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
													
								БизнесРегион = сфпПолучитьБизнесРегионПоНомеруТелефона(НомерТелефона);
								Если ЗначениеЗаполнено(БизнесРегион.Регион) Тогда
									ВладелецКонтактаОбъект.CRM_Регион = БизнесРегион.Регион;
									ВладелецКонтактаОбъект.CRM_Город = БизнесРегион.Город;
									ВладелецКонтактаОбъект.Записать();
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяОбъекта = "Партнеры" Тогда
		Если сфпРеквизитСуществует(Объект.Ссылка, "БизнесРегион") Тогда
			Если НЕ ЗначениеЗаполнено(Объект.БизнесРегион) Тогда
				Для Каждого Контакт Из Объект.КонтактнаяИнформация Цикл
					Если (Контакт.Тип = Перечисления["ТипыКонтактнойИнформации"].Телефон) ИЛИ (Контакт.Тип = Перечисления["ТипыКонтактнойИнформации"]["Факс"]) Тогда
						СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт.Представление);
						НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
						Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда Продолжить; КонецЕсли;
						
						БизнесРегион = сфпПолучитьБизнесРегионПоНомеруТелефона(НомерТелефона);
						Если ЗначениеЗаполнено(БизнесРегион.Регион) Тогда
							Объект.БизнесРегион = БизнесРегион.Регион;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяОбъекта = "Контрагенты" Тогда
		Если сфпРеквизитСуществует(Объект.Ссылка, "CRM_Регион") Тогда
			Если НЕ ЗначениеЗаполнено(Объект.CRM_Регион) Тогда
				Для Каждого Контакт Из Объект.КонтактнаяИнформация Цикл
					Если (Контакт.Тип = Перечисления["ТипыКонтактнойИнформации"].Телефон) ИЛИ (Контакт.Тип = Перечисления["ТипыКонтактнойИнформации"]["Факс"]) Тогда
						СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт.Представление);
						НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
						Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда Продолжить; КонецЕсли;
						
						БизнесРегион = сфпПолучитьБизнесРегионПоНомеруТелефона(НомерТелефона);
						Если ЗначениеЗаполнено(БизнесРегион.Регион) Тогда
							Объект.CRM_Регион = БизнесРегион.Регион;
							Объект.CRM_Город = БизнесРегион.Город;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // сфпЗаполнитьБизнесРегионПоНомеру()

// Функция возвращает Бизнес-регион Контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Партнер или Контактное лицо, для которого необходимо получить Бизнес-регион
//
Функция сфпБизнесРегионКонтакта(Контакт) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ БизнесРегион.Ссылка КАК БизнесРегион, БизнесРегион.CRM_ВремяПоГринвичу_GMT КАК ВремяПоГринвичу
	|ИЗ Справочник.Партнеры
	|ГДЕ Ссылка = &Ссылка И БизнесРегион <> ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ Владелец.БизнесРегион.Ссылка КАК БизнесРегион, Владелец.БизнесРегион.CRM_ВремяПоГринвичу_GMT КАК ВремяПоГринвичу
	|ИЗ Справочник.КонтактныеЛицаПартнеров
	|ГДЕ Ссылка = &Ссылка И Владелец.БизнесРегион <> ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)");
	Запрос.УстановитьПараметр("Ссылка", Контакт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("БизнесРегион,ВремяПоГринвичу", Выборка.БизнесРегион, Выборка.ВремяПоГринвичу);
	КонецЕсли;	

	Возврат Новый Структура("БизнесРегион,ВремяПоГринвичу", Справочники["БизнесРегионы"].ПустаяСсылка(), 0);
	
КонецФункции

функция сфпРеквизитСуществует(Ссылка, ИмяРеквизита) Экспорт
	Возврат (Ссылка.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено);
КонецФункции

функция сфпТабличнаяЧастьСуществует(Ссылка, ИмяТабличнойЧасти) Экспорт
	Возврат (Ссылка.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено);
КонецФункции

Функция сфпПолучитьИмяМетаданных(Ссылка) Экспорт
	
	Попытка    Возврат Ссылка.Метаданные().Имя;
	Исключение Возврат "";
	КонецПопытки;

КонецФункции

#Область ИнтеграцияСистемаВзаимодействия

Функция ИдентификаторОбсужденияЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если сфпОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") < 0 Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	#Если НЕ ВнешнееСоединение Тогда
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	Обсуждение = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
		Если Обсуждение = Неопределено Тогда
			  ОбсуждениеЖурналИдентификатор = СоздатьОбсуждениеЖурналЗвонков();
		Иначе ОбсуждениеЖурналИдентификатор = Обсуждение.Идентификатор;
        КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Поиск обсуждения Системы взаимодействия по ключу';en='Search discuss of Interaction System by key'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	#КонецЕсли
		
	Возврат ОбсуждениеЖурналИдентификатор;
	
КонецФункции

Функция КлючОбсужденияЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если сфпОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") < 0 Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	Обсуждение = Неопределено;
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
	#Если НЕ ВнешнееСоединение Тогда
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("en='Search discuss System interaction key';ru='Поиск обсуждения Системы взаимодействия по ключу'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	#КонецЕсли
	
	Если Обсуждение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

Функция СоздатьОбсуждениеЖурналЗвонков() Экспорт
	
	Ключ = Неопределено;
	// АльфаАвто
	ОбсуждениеЖурналИдентификатор = Неопределено;
	// Конец АльфаАвто
	
	#Если НЕ ВнешнееСоединение Тогда
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
	УстановитьПривилегированныйРежим(Истина);
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия();
	ОтборОбсуждений.Ключ = Ключ;
	Попытка
		СообщенияТелефонии = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Создание служебного обсуждения Системы взаимодействия';en='Create service discussing the System of interaction'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СообщенияТелефонии.Количество() = 0 Тогда
		ОбсуждениеЖурнал = СистемаВзаимодействия.СоздатьОбсуждение();
		ОбсуждениеЖурнал.Ключ = Ключ;
		ОбсуждениеЖурнал.Отображаемое = Ложь;
		ОбсуждениеЖурнал.Заголовок = НСтр("ru='Журнал звонков';en='Call log'");
		//ОбсуждениеЖурнал.Участники.Добавить(СистемаВзаимодействия.СтандартныеПользователи.ВсеПользователиПриложения);
		
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			ОбсуждениеЖурнал.Записать();
			
			ВсеПользователи = СистемаВзаимодействия.СтандартныеПользователи.ВсеПользователиПриложения;
			Если НЕ ОбсуждениеЖурнал.Участники.Содержит(ВсеПользователи) Тогда
			   ОбсуждениеЖурнал.Участники.Добавить(ВсеПользователи);        
			   ОбсуждениеЖурнал.Записать();
			КонецЕсли;
			
			ОбсуждениеЖурналИдентификатор = ОбсуждениеЖурнал.Идентификатор;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Создание служебного обсуждения Системы взаимодействия';en='Create service discussing the System of interaction'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		ОбсуждениеЖурналИдентификатор = СообщенияТелефонии[0].Идентификатор;
	КонецЕсли;
	#КонецЕсли
	
	Возврат ОбсуждениеЖурналИдентификатор;
	
КонецФункции

#КонецОбласти

#Область СистемаВзаимодействияПрочее

// Процедура - обработчик регламентного задания по очистке сообщений журнала звонков
//
// Параметры:
//	Нет.
//
Процедура ОчисткаСообщенийЖурналаЗвонков() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		ТекстКомментария = НСтр("ru = 'База не зарегистрирована в Системе взаимодействий'");
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка сообщений журнала звонков (СофтФон)'"), УровеньЖурналаРегистрации.Предупреждение,,, ТекстКомментария);
		Возврат;
	КонецЕсли;
	
	// Получение обсуждения
	ИдентификаторОбсужденияЖурналЗвонков = сфпСофтФонПроСервер.ИдентификаторОбсужденияЖурналЗвонков();
	Если ИдентификаторОбсужденияЖурналЗвонков = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка сообщений журнала звонков (СофтФон)'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось получить журнал звонков'"));
		Возврат;
	КонецЕсли;
	
	сфпСрокЖизниСообщенияЖурналаЗвонков = Константы.сфпСрокЖизниСообщенияЖурналаЗвонков.Получить();
	Если НЕ ЗначениеЗаполнено(сфпСрокЖизниСообщенияЖурналаЗвонков) Тогда
		ТекстКомментария = НСтр("ru = 'Не задан срок жизни сообщения журнала звонков'");
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка сообщений журнала звонков (СофтФон)'"), УровеньЖурналаРегистрации.Предупреждение,,, ТекстКомментария);
		Возврат;
	КонецЕсли;
	
	ОчиститьРанееДаты = ТекущаяДатаСеанса() - сфпСрокЖизниСообщенияЖурналаЗвонков * 24*60*60;
	
	ЖурналОчищен = Ложь;
	
	КоличествоОшибок = 0;
	КоличествоУдаленныхСообщений = 0;
	Пока НЕ (ЖурналОчищен ИЛИ КоличествоОшибок > 3) Цикл
		
		ЖурналОчищен = ВыполнитьОчисткуСообщенийЖурналаЗвонков(ИдентификаторОбсужденияЖурналЗвонков, ОчиститьРанееДаты, КоличествоУдаленныхСообщений, КоличествоОшибок);
		
	КонецЦикла;
	
	ТекстКомментария = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Работа обработки завершена. Всего удалено %1 сообщений. Количество ошибок: %2'"),
						КоличествоУдаленныхСообщений, КоличествоОшибок);
						
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка сообщений журнала звонков (СофтФон)'"), УровеньЖурналаРегистрации.Предупреждение,,, ТекстКомментария);
	
КонецПроцедуры

Функция ВыполнитьОчисткуСообщенийЖурналаЗвонков(ИдентификаторОбсужденияЖурналЗвонков, ОчиститьРанееДаты, КоличествоУдаленныхСообщений, КоличествоОшибок)
	
	УдаленоВДаннойИтерации = 0;
	
	УстановитьПривилегированныйРежим(Истина);
		
	Попытка
		
		// Удаление сообщений обсуждения
		ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия();
		ОтборСообщений.Количество = 200;
		ОтборСообщений.Обсуждение = ИдентификаторОбсужденияЖурналЗвонков;
		ОтборСообщений.НаправлениеСортировки = НаправлениеСортировки.Возр;
		
		Сообщения = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
		
		Для Каждого Сообщение Из Сообщения Цикл
			Если Сообщение.Дата < ОчиститьРанееДаты Тогда
				СистемаВзаимодействия.УдалитьСообщение(Сообщение.Идентификатор);
				УдаленоВДаннойИтерации = УдаленоВДаннойИтерации + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если УдаленоВДаннойИтерации = 0 Тогда // все возможные сообщения удалены
			Возврат Истина;
		КонецЕсли;
		
	Исключение
		КоличествоОшибок = КоличествоОшибок + 1;
		ТекстКомментария = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка сообщений журнала звонков (СофтФон)'"), УровеньЖурналаРегистрации.Предупреждение,,, ТекстКомментария);
	КонецПопытки;
	
	КоличествоУдаленныхСообщений = КоличествоУдаленныхСообщений + УдаленоВДаннойИтерации;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияТехнологияСервиса

Процедура ПриЗагрузкеПользователяИнформационнойБазы(ПользовательИБ) Экспорт
	
	Если ПользовательИБ.Имя <> СлужебныйПользовательТелефонииЛогин() Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	
	Если НЕ ПользовательИБ.ПарольУстановлен Тогда
		ПользовательИБ.Пароль = СлужебныйПользовательТелефонииПароль();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиТелефонии

Функция КорневойАдресАТС(УправлениеЗвонками = Ложь) Экспорт
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		Возврат "https://app.mango-office.ru/vpbx/";

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		Возврат "https://api.yandex.mightycall.ru/";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		Возврат "https://cloudpbx.beeline.ru/";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		Возврат "https://api.cloudpbx.rt.ru/";	
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.UIS Тогда
		Если УправлениеЗвонками Тогда
			Возврат "https://callapi.uiscom.ru/v4.0";

		Иначе	
			Возврат "https://dataapi.uiscom.ru/v2.0";
		КонецЕсли;

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule
		ИЛИ сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		
		АдресОблачнойАТС = ПолучитьНастройкиТелефонии().АдресОблачнойАТС;
		Если Прав(АдресОблачнойАТС, 1) <> "/" Тогда
			АдресОблачнойАТС = АдресОблачнойАТС + "/";
		КонецЕсли;	
		
		Возврат АдресОблачнойАТС;

	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНастройкиТелефонии() Экспорт
	
	Результат = НастройкиТелефонииПоУмолчанию();
	
	СохраненныеНастройки = Константы.сфпНастройкиТелефонии.Получить().Получить();
	Если СохраненныеНастройки <> Неопределено Тогда
		Для Каждого КлючИЗначение Из Результат Цикл
			Если СохраненныеНастройки.Свойство(КлючИЗначение.Ключ) Тогда
				Результат[КлючИЗначение.Ключ] = СохраненныеНастройки[КлючИЗначение.Ключ];
			КонецЕсли;
		КонецЦикла;
		
		Если СохраненныеНастройки.Свойство("КлючДляАвторизацииВУНФ") Тогда
			Результат.КлючДляАвторизацииВИБ = СохраненныеНастройки.КлючДляАвторизацииВУНФ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьНастройкуТелефонии(Ключ, Значение) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	НастройкиТелефонии.Вставить(Ключ, Значение);
	
	Константы.сфпНастройкиТелефонии.Установить(Новый ХранилищеЗначения(НастройкиТелефонии));
	
КонецФункции

Функция ПерсональноеМобильноеУстройство() Экспорт
	
	// СофтФон
	Возврат Неопределено;
	//Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТелефонии", "УзелОбмена", Неопределено);
	
КонецФункции

Функция АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС = Неопределено, АдресВебхуковКоллтрекинга = "") Экспорт
	Перем НавигационнаяСсылка;
	
	Если ИспользуемаяАТС = Неопределено Тогда
		ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИспользуемаяАТС) Тогда
		//Возврат НавигационнаяСсылка;
	КонецЕсли;
	
	ОбщиеНастройкиТелефонии = Неопределено;
	
	ПараметрыПодключения = Новый Структура;
	КонстантаОбщиеНастройкиТелефонии = Константы.сфпОбщиеНастройкиТелефонии.Получить();
	Если ЗначениеЗаполнено(КонстантаОбщиеНастройкиТелефонии) И ТипЗнч(КонстантаОбщиеНастройкиТелефонии) = Тип("Строка") Тогда
		ОбщиеНастройкиТелефонии = ЗначениеИзСтрокиВнутр(КонстантаОбщиеНастройкиТелефонии);
	КонецЕсли;	
	
	АдресСервераОсновнойПубликации = Неопределено;
	АдресРесурсаОсновнойПубликации = Неопределено;
	АдресВебхуковКоллтрекинга = "";
	
	Если ТипЗнч(ОбщиеНастройкиТелефонии) = Тип("Структура") Тогда
		ОбщиеНастройкиТелефонии.Свойство("АдресСервераОсновнойПубликации", АдресСервераОсновнойПубликации);
		ОбщиеНастройкиТелефонии.Свойство("АдресРесурсаОсновнойПубликации", АдресРесурсаОсновнойПубликации);
		
		Если ЗначениеЗаполнено(АдресСервераОсновнойПубликации) Тогда
			ПараметрыПодключения.Вставить("АдресСервераОсновнойПубликации", АдресСервераОсновнойПубликации);
		КонецЕсли;
		
		НастройкиПубликации = сфпОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбщиеНастройкиТелефонии, "НастройкиПубликации", Новый Соответствие);
		
		КорневойURLСервиса = КорневойURLСервисаОсновнойПубликации(ИспользуемаяАТС);
		
		АдресВебхуковКоллтрекинга = АдресСервераОсновнойПубликации + "/" + АдресРесурсаОсновнойПубликации + "/hs/telephony-api/calltracking";
		АдресРесурсаОсновнойПубликации = АдресСервераОсновнойПубликации + "/" + АдресРесурсаОсновнойПубликации + "/hs/" + КорневойURLСервиса;
	КонецЕсли;
	
	//Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
	//	ОбластьДанных = Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0");
	//	АдресРесурсаОсновнойПубликации = СтрЗаменить(АдресРесурсаОсновнойПубликации, "/hs/", "/" + ОбластьДанных + "/hs/");
	//	//ШаблонСтроки = "[АдресСервераОсновнойПубликации]/[ОбластьДанных]/hs/[КорневойURL]";
	//КонецЕсли;
	
	АдресРесурсаОсновнойПубликации = СтрЗаменить(АдресРесурсаОсновнойПубликации, "://", "@&?");
	АдресРесурсаОсновнойПубликации = СтрЗаменить(АдресРесурсаОсновнойПубликации, "//", "/");	
	АдресРесурсаОсновнойПубликации = СтрЗаменить(АдресРесурсаОсновнойПубликации, "@&?", "://");
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		АдресВебхуковКоллтрекинга = СтрЗаменить(АдресРесурсаОсновнойПубликации, "telephony-api/mango", "telephony-api/calltracking");
	КонецЕсли;
		
	Возврат АдресРесурсаОсновнойПубликации;
	
КонецФункции

Функция КорневойURLСервисаОсновнойПубликации(ИспользуемаяАТС) Экспорт
	
	КорневойСервис = Метаданные.HTTPСервисы.softphoneTelephonyApi.КорневойURL;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		URLСервиса = КорневойСервис + "/webmodule";

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		URLСервиса = КорневойСервис + "/mango";

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		URLСервиса = КорневойСервис + Метаданные.HTTPСервисы.softphoneTelephonyApi.ШаблоныURL.yandexEvent.Шаблон;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		URLСервиса = КорневойСервис + Метаданные.HTTPСервисы.softphoneTelephonyApi.ШаблоныURL.beelineEvent.Шаблон;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.МТТ Тогда
		URLСервиса = КорневойСервис + Метаданные.HTTPСервисы.softphoneTelephonyApi.ШаблоныURL.mttEvent.Шаблон;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.UIS Тогда
		URLСервиса = КорневойСервис + Метаданные.HTTPСервисы.softphoneTelephonyApi.ШаблоныURL.uisEvent.Шаблон;	
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		URLСервиса = КорневойСервис + "/rt";
		
	ИначеЕсли сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		URLСервиса = КорневойСервис + Метаданные.HTTPСервисы.softphoneTelephonyApi.ШаблоныURL.itoolabsEvent.Шаблон;	

	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат СтрЗаменить(URLСервиса, "/*", "");
	
КонецФункции

#КонецОбласти

#Область ОблачнаяТелефония

Функция ПолучитьПользователяОтветственногоЗаАбонента(АбонентОтКого) Экспорт
	
	Если Не ЗначениеЗаполнено(АбонентОтКого) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АбонентОтКого.Метаданные().Реквизиты.Найти("Ответственный") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// СофтФон
	Возврат Справочники.Пользователи.ПустаяСсылка();
	//Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АбонентОтКого, "Ответственный");
	//Если ЗначениеЗаполнено(Ответственный) И ТипЗнч(Ответственный) = Тип("СправочникСсылка.Сотрудники") Тогда
	//	Ответственный = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(Ответственный);
	//КонецЕсли;
	//
	//Возврат Ответственный;
	
КонецФункции

Функция ОбработатьВходящийЗвонок(НомерКонтакта, Пользователь, ДатаНачалаРазговора = Неопределено, ИдентификаторЗвонкаВАТС = Неопределено) Экспорт

	Если НЕ БылаИнициализацияЗвонка(ИдентификаторЗвонкаВАТС, Пользователь) Тогда
		Возврат сфпЛицензированиеСервер.ОбработатьВходящийЗвонок(НомерКонтакта, Пользователь, ДатаНачалаРазговора, ИдентификаторЗвонкаВАТС);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ОбработатьИсходящийЗвонок(ДатаСобытия, Пользователь, Контрагент = Неопределено, НомерКонтакта = Неопределено, ИдентификаторЗвонкаВАТС = Неопределено, ДатаНачалаРазговора = Неопределено, Состояние = Неопределено) Экспорт
	Возврат сфпЛицензированиеСервер.ОбработатьИсходящийЗвонок(ДатаСобытия, Пользователь, Контрагент, НомерКонтакта, ИдентификаторЗвонкаВАТС, ДатаНачалаРазговора);
КонецФункции

Функция ОбработатьИзменениеЗвонка(ИдентификаторЗвонкаВАТС = Неопределено, ДатаНачалаРазговора, Пользователь = Неопределено, ВходящееИсходящее = Неопределено, НомерКонтакта = Неопределено) Экспорт

	Если НЕ БылаИнициализацияЗвонка(ИдентификаторЗвонкаВАТС, Пользователь) Тогда
		Если ВходящееИсходящее = Истина Тогда
			сфпЛицензированиеСервер.ОбработатьВходящийЗвонок(НомерКонтакта, Пользователь, ДатаНачалаРазговора, ИдентификаторЗвонкаВАТС);
			
		Иначе	
			сфпЛицензированиеСервер.ОбработатьИсходящийЗвонок(ДатаНачалаРазговора, Пользователь,, НомерКонтакта, ИдентификаторЗвонкаВАТС, ДатаНачалаРазговора);
        КонецЕсли;
	КонецЕсли;
	
	Возврат сфпЛицензированиеСервер.ОбработатьИзменениеЗвонка(ИдентификаторЗвонкаВАТС, ДатаНачалаРазговора, Пользователь, ВходящееИсходящее, НомерКонтакта);

КонецФункции

Функция ОбработатьУдержаниеЗвонка(ИдентификаторЗвонкаВАТС, Пользователь) Экспорт
	Возврат сфпЛицензированиеСервер.ОбработатьУдержаниеЗвонка(ИдентификаторЗвонкаВАТС, Пользователь);
КонецФункции

Функция ОбработатьЗавершениеЗвонка(Входящий = Неопределено, НомерКонтакта = Неопределено, ДатаНачалаВызова = Неопределено, ДатаЗавершенияВызова = Неопределено, ДлительностьРазговора = Неопределено,
		Неотвеченный = Неопределено, СсылкаНаЗаписьРазговора = Неопределено, ТрубетсяЗапроситьЗаписьРазговора = Ложь, ИдентификаторЗвонкаВАТС = Неопределено, ОпределятьНеотвеченный = Истина, Пользователь = Неопределено) Экспорт
	Возврат сфпЛицензированиеСервер.ОбработатьЗавершениеЗвонка(Входящий, НомерКонтакта, ДатаНачалаВызова, ДатаЗавершенияВызова, ДлительностьРазговора, Неотвеченный, СсылкаНаЗаписьРазговора, ТрубетсяЗапроситьЗаписьРазговора, ИдентификаторЗвонкаВАТС, ОпределятьНеотвеченный, Пользователь);
КонецФункции

Функция ОбработатьЗаписьЗвонка(ИдентификаторЗвонкаВАТС, СсылкаНаЗаписьРазговора) Экспорт
	Возврат сфпЛицензированиеСервер.ОбработатьЗаписьЗвонка(ИдентификаторЗвонкаВАТС, СсылкаНаЗаписьРазговора);
КонецФункции

Функция ПолучитьДанныеКлиента(НомерКонтакта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Абонент = ПолучитьАбонентаПоНомеруТелефона(НомерКонтакта);
	
	Если НЕ ЗначениеЗаполнено(Абонент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответственный = ПолучитьПользователяОтветственногоЗаАбонента(Абонент);
	ВнутреннийНомерОтветственного = Неопределено;
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ДанныеПользователя = сфпЛицензированиеСервер.ДанныеПользователяАТС(Ответственный);
		ВнутреннийНомерОтветственного = ДанныеПользователя.ВнутреннийНомер;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", Строка(Абонент));
	Если ЗначениеЗаполнено(ВнутреннийНомерОтветственного) Тогда
		Результат.Вставить("ВнутреннийНомерОтветственного", ВнутреннийНомерОтветственного);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция БылаИнициализацияЗвонка(ИдентификаторЗвонкаВАТС, Пользователь = "")
	
	ДатаНачала = (ТекущаяДата() - 3600);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Звонок
	|ИЗ РегистрСведений.сфпИсторияЗвонков
	|ГДЕ ИдентификаторЗвонка = &ИдентификаторЗвонка И ДатаНачала > &ДатаНачала");
	Запрос.УстановитьПараметр("ИдентификаторЗвонка", ИдентификаторЗвонкаВАТС);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	Если ЗначениеЗаполнено(Пользователь) И ТипЗнч(Пользователь) = Тип("Строка") Тогда
		Запрос.Текст = Запрос.Текст + " И ВнутреннийНомер = &ВнутреннийНомер";
		Запрос.УстановитьПараметр("ВнутреннийНомер", Пользователь);
	КонецЕсли;

	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область МобильнаяТелефония

Функция НайтиТелефонныйЗвонокПоДаннымЗвонка(Входящий, Знач Номер = Неопределено, ИдентификаторЗвонкаВАТС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Звонок
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков
	|ГДЕ
	|	ВЫБОР КОГДА &ЭтоЗвонокОблачнойАТС ТОГДА
	|		ИдентификаторЗвонка = &ИдентификаторЗвонкаВАТС И ДатаНачала > &ДатаНачала
	|	ИНАЧЕ Входящий = &Входящий
	|		  И НомерТелефона ПОДОБНО &ПоисковоеВыражение
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала УБЫВ");
	
	ПоисковоеВыражение = СтрЗаменить(Номер, "+", "") + "%";
	Если сфпОбщегоНазначения.сфпСтрНачинаетсяС(ПоисковоеВыражение, "7") Или сфпОбщегоНазначения.сфпСтрНачинаетсяС(ПоисковоеВыражение, "8") Тогда
		ПоисковоеВыражение = "[78]" + Сред(ПоисковоеВыражение, 2);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтоЗвонокОблачнойАТС", ИдентификаторЗвонкаВАТС <> Неопределено);
	Запрос.УстановитьПараметр("ИдентификаторЗвонкаВАТС", ИдентификаторЗвонкаВАТС);
	Запрос.УстановитьПараметр("Входящий", Входящий);
	Запрос.УстановитьПараметр("ПоисковоеВыражение", ПоисковоеВыражение);
	Запрос.УстановитьПараметр("ДатаНачала", (ТекущаяДата() - 3600));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Звонок;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РечеваяАналитика

Процедура сфпОбновлениеРечевойАналитики() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Константы.сфпИспользоватьРечевуюАналитику.Получить() Тогда
		Возврат;
	КонецЕсли;	
	
	ДатаВыборки = Константы.сфпДатаРечевойАналитики.Получить();
	Если НЕ ЗначениеЗаполнено(ДатаВыборки) Тогда
		ДатаВыборки = НачалоМесяца(ТекущаяДата());
	КонецЕсли;	
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Звонок, ИдентификаторЗаписи, ДатаНачала, НомерТелефона, ВнутреннийНомер
	|ИЗ РегистрСведений.сфпИсторияЗвонков
	|ГДЕ ДатаНачала >= &ДатаВыборки И ПОДСТРОКА(ИдентификаторЗаписи, 1, 10) <> """"
	|УПОРЯДОЧИТЬ ПО ДатаНачала
	|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ДатаВыборки", ДатаВыборки);
	
	КоличествоПорцииОбработки = 100;
	ИдентификаторыЗвонков = Новый Соответствие();
	
	ДатаПоследнегоЗвонка = Неопределено;
	
	ТаблицаИстории = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаИстории Из ТаблицаИстории Цикл
		Если ИдентификаторыЗвонков.Количество() = КоличествоПорцииОбработки Тогда
			ЗаполнитьРасшифровкуЗвонков(ИдентификаторыЗвонков);

			ИдентификаторыЗвонков.Очистить();
		КонецЕсли;
		
		ПараметрыЗвонка = Новый Структура("Звонок,ВнутреннийНомер,НомерТелефона", СтрокаИстории.Звонок, СтрокаИстории.ВнутреннийНомер, СтрокаИстории.НомерТелефона);
		ИдентификаторыЗвонков.Вставить(СтрокаИстории.ИдентификаторЗаписи, ПараметрыЗвонка);
		
		РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПолучитьРезультатыРаспознованияТематики", СтрокаИстории.ИдентификаторЗаписи);
		Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.Результат) Тогда
			json = Новый ЧтениеJSON();
			json.УстановитьСтроку(РезультатЗапроса.Результат);
			jsonСтруктура = ПрочитатьJSON(json);
			json.Закрыть();
			
			Если jsonСтруктура.result = 1000 Тогда
				Для Каждого СтрокаДанных Из jsonСтруктура.data Цикл
					Если СтрокаДанных.recording_id = СтрокаИстории.ИдентификаторЗаписи Тогда
						Для Каждого СтрокаКатегории Из СтрокаДанных.categories Цикл
							Тематика = ПолучитьТематикуРечевойАналитики(Перечисления.сфпДоступныеАТС.MangoOffice, СтрокаКатегории.id, СтрокаКатегории.name);
							
							СтопСлова = "";
							Количество = 0;
														
							Для Каждого СтрокаСлов Из СтрокаКатегории.terms Цикл
								СтопСлово = СтрЗаменить(СтрокаСлов.value, """", "");
								СтопСлова = СтопСлова + ?(СтопСлова = "", "", ", ") + СтопСлово;
								Количество = Количество + СтрокаСлов.count;
							КонецЦикла;
							
							МенеджерЗаписи = РегистрыСведений.сфпРечеваяАналитика.СоздатьМенеджерЗаписи();
							МенеджерЗаписи.Звонок = СтрокаИстории.Звонок;
							МенеджерЗаписи.Тематика = Тематика;
							МенеджерЗаписи.Количество = Количество;
							МенеджерЗаписи.СтопСлова = СтопСлова;
							МенеджерЗаписи.Записать();
							
							ДатаПоследнегоЗвонка = СтрокаИстории.ДатаНачала;
						КонецЦикла;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	

		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;	

	ЗаполнитьРасшифровкуЗвонков(ИдентификаторыЗвонков);

	Если ДатаПоследнегоЗвонка <> Неопределено Тогда
		Константы.сфпДатаРечевойАналитики.Установить(ДатаПоследнегоЗвонка);
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаполнитьРасшифровкуЗвонков(ДанныеЗвонков)
	
	СтрОшибки = "";
	
	Если ДанныеЗвонков.Количество() > 0 Тогда
		РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПолучитьРезультатыРасшифровкиРазговоров", ДанныеЗвонков);
		Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.Результат) Тогда
			json = Новый ЧтениеJSON();
			json.УстановитьСтроку(РезультатЗапроса.Результат);
			jsonСтруктура = ПрочитатьJSON(json);
			json.Закрыть();
			
			Если jsonСтруктура.result = 1000 Тогда
				Для Каждого СтрокаДанных Из jsonСтруктура.data Цикл
					ДанныеЗвонка = ДанныеЗвонков.Получить(СтрокаДанных.recording_id);
					Если ЗначениеЗаполнено(ДанныеЗвонка.Звонок) Тогда
						ТекстРазговора = "";
						Для Каждого СтрокаФраз Из СтрокаДанных.phrases Цикл
							СтрокаРасшифровки = СтрокаФраз[0] + ": " + СтрокаФраз[1];
							ТекстРазговора = ТекстРазговора + ?(ТекстРазговора = "", "", "
							|
							|") + СтрокаРасшифровки;
						КонецЦикла;	
						
						Если ЗначениеЗаполнено(ТекстРазговора) Тогда
							ТекстРазговора = СтрЗаменить(ТекстРазговора, "operator", ДанныеЗвонка.ВнутреннийНомер);
							ТекстРазговора = СтрЗаменить(ТекстРазговора, "client", ДанныеЗвонка.НомерТелефона);
														
							ЗвонокОбъект = ДанныеЗвонка.Звонок.ПолучитьОбъект();
							ЗвонокОбъект.сфпРасшифровкаРазговора = ТекстРазговора;
							ЗвонокОбъект.ОбменДанными.Загрузка = Истина;
							ЗвонокОбъект.Записать();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				СтрОшибки = РезультатЗапроса.Результат;
			КонецЕсли;	
			
		Иначе
			СтрОшибки = РезультатЗапроса.Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрОшибки) Тогда
		ВызватьИсключение "При получении расшифровки звонков произошла ошибка: " + СтрОшибки;
	КонецЕсли;

КонецПроцедуры	//	ЗаполнитьРасшифровкуЗвонков()

Функция ПолучитьТематикуРечевойАналитики(Оператор, Идентификатор, Наименование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка, Наименование
	|ИЗ Справочник.сфпТематикиРечевойАналитики
	|ГДЕ Оператор = &Оператор И Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Оператор", Оператор);
	Запрос.УстановитьПараметр("Идентификатор", "" + Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Наименование <> Наименование Тогда
			ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТекОбъект.Наименование = Наименование;
			ТекОбъект.Записать();
		КонецЕсли;
		
		Возврат Выборка.Ссылка;
	КонецЕсли;	
	
	НовыйЭлемент = Справочники.сфпТематикиРечевойАналитики.СоздатьЭлемент();
	НовыйЭлемент.Оператор = Оператор;
	НовыйЭлемент.Идентификатор = Идентификатор;
	НовыйЭлемент.Наименование = Наименование;
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

#КонецОбласти

Процедура сфпЗаписьЖурналаРегистрации(ИмяСобытия, ТекстЗаписи, Ошибка = Ложь) Экспорт
	
	Если Ошибка Тогда
		  Уровень = УровеньЖурналаРегистрации.Ошибка;
	Иначе Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Телефония." + ИмяСобытия, Уровень,,, ТекстЗаписи);

КонецПроцедуры

// Функция проверяет использование СофтФона
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования СофтФона
//
Функция сфпИспользоватьСофтФон() Экспорт
	Возврат Константы.сфпИспользоватьСофтФон.Получить();
КонецФункции // сфпИспользоватьСофтФон()

// Функция проверяет использование автоматического определения Бизнес-региона
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования автоматического определения Бизнес-региона
//
Функция сфпИспользоватьАвтоопределениеБизнесРегиона() Экспорт
	
	Если Метаданные.Константы.Найти("сфпПланНумерацииАвтоопределениеБизнесРегиона") = Неопределено Тогда
		  Возврат Ложь;
	Иначе Возврат Константы["сфпПланНумерацииАвтоопределениеБизнесРегиона"].Получить();
	КонецЕсли;

КонецФункции // сфпИспользоватьАвтоопределениеБизнесРегиона()

// Функция возвращает значение настройки для переданного пользователя
//
// Параметры:
//	ИмяНастройки	- Строка			- Имя настройки в ПВХ НастройкиПользователей
//	Пользователь	- СправочникСсылка	- Пользователь, для которого получается настройка
//
// Возвращаемое значение:
//	Произвольный	- Значение настройки.
//
Функция сфпПолучитьЗначениеНастройкиПользователя(ИмяНастройки, Пользователь = Неопределено) Экспорт
	
	Попытка
		// Для решений на базе ТП 1С:Рарус
		ЗначениеНастройки = Вычислить("ПравоПользователя(ИмяНастройки)");
		Возврат ЗначениеНастройки;
	Исключение КонецПопытки;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = сфпТекущийПользователь();
	КонецЕсли;
	
	ИмяПВХ_СофтфонНастройкиПользователей = сфпИмяПВХ_СофтфонНастройкиПользователей();
	Если НЕ ЗначениеЗаполнено(ИмяПВХ_СофтфонНастройкиПользователей) Тогда
		Возврат "";
	КонецЕсли;
		
	НастройкаПВХ = ПланыВидовХарактеристик[ИмяПВХ_СофтфонНастройкиПользователей][ИмяНастройки];
	
	ИмяРегистраСофтфонНастройкиПользователей = сфпИмяРегистраСофтфонНастройкиПользователей();
	Если ЗначениеЗаполнено(ИмяРегистраСофтфонНастройкиПользователей) Тогда  
		// АльфаАвто
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ Значение
		|ИЗ РегистрСведений." + ИмяРегистраСофтфонНастройкиПользователей + "
		|ГДЕ ПользовательПрофиль = &Пользователь И ПравоНастройка = &Настройка");
		// Конец АльфаАвто
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("Настройка", НастройкаПВХ);	
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.Значение) Тогда
				Возврат Выборка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВерсияСофтфон = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользуемаяВерсияСофтФон");
	Если ВерсияСофтфон = Перечисления.сфпВерсииСофтФон.СофтФотPROSTO И НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Если (ИмяНастройки = "сфпДействиеПриВходящемЗвонке" ИЛИ ИмяНастройки = "сфпДействиеПриИсходящемЗвонке") Тогда
			НастройкиТелефонии = ПолучитьНастройкиТелефонии();
			
			Если ИмяНастройки = "сфпДействиеПриВходящемЗвонке" Тогда
				Возврат НастройкиТелефонии.ДействиеВходящегоЗвонка;
				
			ИначеЕсли ИмяНастройки = "сфпДействиеПриИсходящемЗвонке" Тогда
				Возврат НастройкиТелефонии.ДействиеИсходящегоЗвонка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкаПВХ.ТипЗначения.ПривестиЗначение();

КонецФункции // сфпПолучитьЗначениеНастройкиПользователя() 

// Функция возвращает структуру параметров сервера
//
// Параметры:
//	Нет.
//
Функция сфпПараметрыСервера() Экспорт 
	Возврат сфпСофтФонПроСерверПовтИсп.сфпПараметрыСервера();
КонецФункции // сфпПараметрыСервера()

// Процедура сохраняет в константах префиксы и настройки, полученные от сервера СофтФона
//
// Параметры:
//	СтруктураНастроек	- Соответствие	- Префиксы и настройки, полученные от сервера СофтФона
//
Процедура сфпЗаписатьПараметрыСервераНативнаяКомпонента(СтруктураНастроек) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если СтруктураНастроек.Свойство("PrefCity") И НЕ (СтруктураНастроек["PrefCity"]  = Неопределено) Тогда
		Константы.сфпПрефиксВыходаВГород.Установить(СтруктураНастроек["PrefCity"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("PrefContry") И НЕ (СтруктураНастроек["PrefContry"] = Неопределено) Тогда
		Константы.сфпПрефиксВыходаВМежгород.Установить(СтруктураНастроек["PrefContry"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("PrefWorld") И НЕ (СтруктураНастроек["PrefWorld"] = Неопределено) Тогда
		Константы.сфпПрефиксВыходаНаМеждународную.Установить(СтруктураНастроек["PrefWorld"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("InternalNumMaxLen") И НЕ (СтруктураНастроек["InternalNumMaxLen"] = Неопределено) Тогда
		Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Установить(СтруктураНастроек["InternalNumMaxLen"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("InternalNumMinLen") И НЕ (СтруктураНастроек["InternalNumMinLen"] = Неопределено) Тогда
		Константы.сфпМинимальнаяДлинаВнутреннихНомеров.Установить(СтруктураНастроек["InternalNumMinLen"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("LastNumberCount") И НЕ (СтруктураНастроек["LastNumberCount"] = Неопределено) Тогда
		Константы.сфпПоследниеЦифрыТелефонногоНомера.Установить(СтруктураНастроек["LastNumberCount"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("SQLConnectionString") И НЕ (СтруктураНастроек["SQLConnectionString"] = Неопределено) Тогда
		Константы.сфпСтрокаПодключенияИстории.Установить(СтруктураНастроек["SQLConnectionString"]);	
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("UseRouter") И НЕ (СтруктураНастроек["UseRouter"] = Неопределено) Тогда
		Константы.сфпИспользоватьМаршрутизацию.Установить(СтруктураНастроек["UseRouter"]);	
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("HistoryOn") И НЕ (СтруктураНастроек["HistoryOn"] = Неопределено) Тогда
		Константы.сфпИспользоватьИсториюЗвонков.Установить(СтруктураНастроек["HistoryOn"]);	
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("UseHistory") И НЕ (СтруктураНастроек["UseHistory"] = Неопределено) Тогда
		Константы.сфпИспользоватьИсториюЗвонков.Установить(СтруктураНастроек["UseHistory"]);	
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("UseSMS") И НЕ (СтруктураНастроек.Свойство("UseSMS") = Неопределено) Тогда
		Константы.сфпИспользоватьSMS.Установить(СтруктураНастроек["UseSMS"]);	
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("ContryCode") И НЕ (СтруктураНастроек["ContryCode"] = Неопределено) Тогда
		Константы.сфпКодСтраны.Установить(СтруктураНастроек["ContryCode"]);	
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("CityCode") И НЕ (СтруктураНастроек["CityCode"] = Неопределено) Тогда
		Константы.сфпКодГорода.Установить(СтруктураНастроек["CityCode"]);	
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("WSDL") И НЕ (СтруктураНастроек["WSDL"] = Неопределено) Тогда
		СтрокаWSDL			= СтруктураНастроек["WSDL"];
		ПозицияРазделителя	= Найти(СтрокаWSDL, "/wsdl/");
		СтрокаПути			= Лев(СтрокаWSDL, ПозицияРазделителя - 1);
		СтрокаПути			= СтрЗаменить(СтрокаПути, "http://", "");
		ПозицияРазделителя	= Найти(СтрокаПути, ":");
		сфпИмяСервера		= Лев(СтрокаПути, ПозицияРазделителя - 1);
		сфпПорт				= Сред(СтрокаПути, ПозицияРазделителя + 1);
		Константы.сфпИмяСервера.Установить(сфпИмяСервера);	
		Константы.сфпПорт.Установить(сфпПорт);	
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // сфпЗаписатьПараметрыСервераНативнаяКомпонента()

// Функция возвращает текущего пользователя
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь
//
Функция сфпТекущийПользователь() Экспорт
	Возврат сфпОбщегоНазначенияКлиентСервер.сфпАвторизованныйПользователь();
КонецФункции // сфпТекущийПользователь()

// Функция возвращает текущее время на сервере
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Дата	- Текущая дата и время
//
Функция сфпТекущаяДата() Экспорт
	Возврат ТекущаяДата();	
КонецФункции // сфпТекущаяДата()

// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  Ссылка       - Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция сфпПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	Возврат сфпОбщегоНазначения.сфпЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции // сфпПолучитьЗначениеРеквизита()

// Функция получает картинку контакта
//
// Параметры:
//	Контакт		- СправочникСсылка	- Контакт
//	ПоУмолчанию	- Булево			- Признак возвращения аватара по умолчанию, в случае его отсутствия
//
// Возвращаемое значение:
//	Строка	- Двоичное представление картинки
//
Функция сфпПолучитьАватарКонтакта(Контакт, ПоУмолчанию = Истина) Экспорт
	//Возврат Base64Строка(БиблиотекаКартинок.сфпАватарПоУмолчанию.ПолучитьДвоичныеДанные());
	Возврат "";
КонецФункции // сфпПолучитьАватарКонтакта()

// Функция возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного).
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция сфпРолиДоступны(ИменаРолей, Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь	= сфпТекущийПользователь();
	КонецЕсли;	
	Возврат сфпОбщегоНазначения.сфпРолиДоступны(ИменаРолей, Пользователь);
КонецФункции // сфпРолиДоступны()

// Функция проверяет использование регламентного задания обновления телефонных книг
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования регламентного задания обновления телефонных книг
//
Функция сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг()
	Возврат Константы.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг.Получить();
КонецФункции // сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг()
 
// Функция возвращает признак использования подразделений пользователей
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Использование подразделений пользователей
//
Функция сфпИспользоватьПодразделенияПользователей() Экспорт
	Если Метаданные.Справочники.Найти("СтруктураПредприятия") = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции // сфпИспользоватьПодразделенияПользователей()	

// Функция возвращает признак использования групп пользователей
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Использование групп пользователей
//
Функция сфпИспользоватьГруппыПользователей() Экспорт
	ИмяОпции = "ИспользоватьГруппыПользователей";
	Если Метаданные.ФункциональныеОпции.Найти(ИмяОпции) = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ПолучитьФункциональнуюОпцию(ИмяОпции) = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции // сфпИспользоватьГруппыПользователей()	

// Процедура записывает окончание разговора в документ "Телефонный звонок"
//
// Параметры:
//	НовыйЗвонок			- ДокументСсылка	- Ссылка на документ
//  НовыйОтветственный 	- СпарвочникСсылка 	- Новый ответственный звонка
//
Процедура сфпЗаписатьОкончаниеЗвонка(НовыйЗвонок, НовыйОтветственный = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ДатаОкончания = сфпТекущаяДата();
	ДокументОбъект = НовыйЗвонок.ПолучитьОбъект();
	ДокументОбъект.сфпДлительностьЗвонка = (ДатаОкончания - НовыйЗвонок.Дата);
	ДокументОбъект.Описание	= сфпЗаполнитьОписаниеТелефонногоЗвонка(ДокументОбъект.сфпДлительностьЗвонка);
	Если НовыйОтветственный <> Неопределено Тогда
		ДокументОбъект.Ответственный = НовыйОтветственный;
		
		сфпСофтФонПроСерверПереопределяемый.ЗаполнитьОбщиеРеквизиты(ДокументОбъект);
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать();
	Исключение КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // сфпЗаписатьОкончаниеЗвонка()

// Функция записывает окончание разговора в документ "Телефонный звонок"
//
// Параметры:
//	Звонок			- ДокументСсылка	- Ссылка на документ
//  ДанныеЗвонка	- Структура			- Обновляемые параметры
//
Функция сфпОбновитьДанныеЗвонка(Звонок, ДанныеЗвонка, ЗавершатьПропущенныеЗвонки = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ЗвонокОбъект = Звонок.ПолучитьОбъект();
	
	ЗаписатьОбъект = Ложь;
	
	Если ДанныеЗвонка.Свойство("СостояниеЗвонка") И ЗначениеЗаполнено(ДанныеЗвонка.СостояниеЗвонка) И (ЗвонокОбъект.сфпСостояниеЗвонка <> ДанныеЗвонка.СостояниеЗвонка) Тогда
		ЗвонокОбъект.сфпСостояниеЗвонка = ДанныеЗвонка.СостояниеЗвонка;
		ЗаписатьОбъект = Истина;
	КонецЕсли;
	
	Если ДанныеЗвонка.Свойство("ДлительностьЗвонка") И ЗначениеЗаполнено(ДанныеЗвонка.ДлительностьЗвонка) И (ЗвонокОбъект.сфпДлительностьЗвонка <> ДанныеЗвонка.ДлительностьЗвонка) Тогда
		ЗвонокОбъект.сфпДлительностьЗвонка = ДанныеЗвонка.ДлительностьЗвонка;
		ЗаписатьОбъект = Истина;
	КонецЕсли;	
	
	Если ДанныеЗвонка.Свойство("ИдентификаторЗаписи") И ЗначениеЗаполнено(ДанныеЗвонка.ИдентификаторЗаписи) И НЕ ЗначениеЗаполнено(ЗвонокОбъект.сфпИдентификаторЗаписи) Тогда
		ЗвонокОбъект.сфпИдентификаторЗаписи = ДанныеЗвонка.ИдентификаторЗаписи;
		ЗаписатьОбъект = Истина;
	КонецЕсли;	
	
	Описание = сфпЗаполнитьОписаниеТелефонногоЗвонка(ЗвонокОбъект.сфпДлительностьЗвонка);
	Если ЗвонокОбъект.Описание <> Описание Тогда
		ЗвонокОбъект.Описание = Описание;
		ЗаписатьОбъект = Истина;
	КонецЕсли;
	
	Результат = Ложь;
	
	Попытка
		Если ЗаписатьОбъект Тогда
			ЗвонокОбъект.Записать();
			Результат = Истина;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Если ЗвонокОбъект.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный И ЗавершатьПропущенныеЗвонки = Истина Тогда
		// Отмечаем все неотвеченные звонки по данному номеру, как отвеченные
		сфпЗавершитьПропущенныеЗвонки(ЗвонокОбъект.АбонентКакСвязаться);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции // сфпОбновитьДанныеЗвонка()

// Функция преобразовывает строковые данные оповещения в объекты
//
// Параметры:
//  ДанныеОповещения	- Структура	- Данные оповещения
//
Функция сфпПреобразоватьДанныеОповещения(ДанныеОповещения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ПреобразованныеДанные = ДанныеОповещения;
	
	Если ДанныеОповещения.Свойство("СостояниеЗвонка") И ЗначениеЗаполнено(ДанныеОповещения.СостояниеЗвонка) Тогда
		ПреобразованныеДанные.Вставить("СостояниеЗвонка", Перечисления.сфпСостоянияЗвонков[ДанныеОповещения.СостояниеЗвонка]);
	КонецЕсли;
	
	Если ДанныеОповещения.Свойство("ДлительностьЗвонка") И ЗначениеЗаполнено(ДанныеОповещения.ДлительностьЗвонка) Тогда
		ПреобразованныеДанные.Вставить("ДлительностьЗвонка", Число(ДанныеОповещения.ДлительностьЗвонка));
	КонецЕсли;
	
	Если ДанныеОповещения.Свойство("Звонок") И ЗначениеЗаполнено(ДанныеОповещения.Звонок) Тогда
		ПреобразованныеДанные.Вставить("Звонок", Документы.ТелефонныйЗвонок.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеОповещения.Звонок)));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПреобразованныеДанные;
	
КонецФункции // сфпПреобразоватьДанныеОповещения()

// Функция проверяет существует ли данный справочник в конфигурации
//
// Параметры:
//	ИмяСправочника	- Строка	- Имя справочника в конфигурации
//
// Возвращаемое значение:
//	Булево	- Признак наличия справочника
//
Функция сфпСправочникСуществует(ИмяСправочника) Экспорт
	ОбъектМетаданных = Метаданные.Справочники.Найти(ИмяСправочника);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции // сфпСправочникСуществует()

// Функция формирует список объектов для выбора пользователем среди найденного массива номеров
//
// Параметры:
//	МассивЗвонящих	- Массив - Массив найденных объектов по номеру телефона
//  ТолькоПартнеры  - Булево - В список добавлять только партнёров и КЛ
//
// Возвращаемое значение:
//	СписокКонтактов - СписокЗначений - Список значений для выбора
//
Функция сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(МассивЗвонящих, ТолькоПартнеры = Ложь) Экспорт
	
	СписокКонтактов = Новый СписокЗначений();
	Для Каждого Контакт Из МассивЗвонящих Цикл
		Если Найти(Строка(Контакт), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
			// Работаем под неполными правами, контакт нам не доступен, в список выбора не подставляем
			Продолжить;
		КонецЕсли;			
		
		КонтактИмяМетаданных = Контакт.Метаданные().Имя;
		Если КонтактИмяМетаданных = "КонтактныеЛицаПартнеров" Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + " <" + Строка(сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт)) + ">" + Нстр("ru = ' (контактное лицо партнера)'"));

		ИначеЕсли КонтактИмяМетаданных = "ФизическиеЛица" И НЕ ТолькоПартнеры Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (физическое лицо)'"));
			
		ИначеЕсли КонтактИмяМетаданных = "Пользователи" И НЕ ТолькоПартнеры Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (пользователь)'"));
			
		ИначеЕсли КонтактИмяМетаданных = "Партнеры" Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (партнер)'"));
			
		ИначеЕсли КонтактИмяМетаданных = "Контрагенты" Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (контрагент)'"));
			
		ИначеЕсли КонтактИмяМетаданных = "КонтактныеЛица" Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + " <" + Строка(сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт)) + ">" + Нстр("ru = ' (контактное лицо контрагента)'"));
			
		ИначеЕсли КонтактИмяМетаданных = "СтруктурныеЕдиницы" И НЕ ТолькоПартнеры Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (структурная единица)'"));
			
		ИначеЕсли КонтактИмяМетаданных = "Организации" И НЕ ТолькоПартнеры Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (организация)'"));
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СписокКонтактов;

КонецФункции

// Функция преобразовывает входящий массив в список значений
//
// Параметры:
//	МассивЗвонящих	- Массив - Массив звонящих
//
// Возвращаемое значение:
//	СписокЗвонящих - Список значений - Преобразованынй список значений
//
Функция сфпПреобразоватьМассивЗвонящихВСписокЗначений(МассивЗвонящих) Экспорт
	
	СписокЗвонящих = Новый СписокЗначений();
	СписокЗвонящих.ЗагрузитьЗначения(МассивЗвонящих);
	
	Возврат СписокЗвонящих;

КонецФункции

// Процедура корректирует в случае необходимости значение абонента в документе "Телефонный звонок"
//
// Параметры:
//	КонтактноеЛицо		- СправочникСсылка	- Ссылка на Контактное Лицо
//	Абонент				- СправочникСсылка	- Ссылка на Партнера
//	ТелефонныйЗвонок	- ДокументСсылка	- Ссылка на документ
//
Процедура сфпСкорректироватьАбонентаУТелефонногоЗвонка(КонтактноеЛицо = Неопределено, Абонент, ТелефонныйЗвонок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТелефонныйЗвонок = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ИмяДокументаТелефонныйЗвонок = сфпИмяДокументаТелефонныйЗвонок(Истина);
	Если ЗначениеЗаполнено(ИмяДокументаТелефонныйЗвонок) Тогда
		Если ТипЗнч(ТелефонныйЗвонок) <> Тип(ИмяДокументаТелефонныйЗвонок) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаАбонентКонтакт = сфпИмяРеквизитаАбонентКонтакт();
	Если ПустаяСтрока(ИмяРеквизитаАбонентКонтакт) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактноеЛицо = ТелефонныйЗвонок[ИмяРеквизитаАбонентКонтакт] Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактноеЛицо <> Неопределено Тогда
		  АбонентНовый = КонтактноеЛицо;
	Иначе АбонентНовый = Абонент;
	КонецЕсли;
	
	Если АбонентНовый <> ТелефонныйЗвонок[ИмяРеквизитаАбонентКонтакт] Тогда
		ДокументОбъект = ТелефонныйЗвонок.ПолучитьОбъект();
		ДокументОбъект[ИмяРеквизитаАбонентКонтакт] = АбонентНовый;
		ДокументОбъект.АбонентПредставление = Строка(ДокументОбъект[ИмяРеквизитаАбонентКонтакт]);
		
		Попытка  
			ДокументОбъект.Записать();
			Записали = Истина;
		Исключение
			Записали = Ложь;
		КонецПопытки;
		
		Если Записали Тогда
			сфпЗаписатьАбонентаЗвонкаВРегистрИсторииЗвонков(ТелефонныйЗвонок, ТелефонныйЗвонок.сфпИдентификаторЗвонка);
		КонецЕсли;			
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры	

// Функция возвращает ссылку на документ-основание переданного документа
//
// Параметры:
//	ДокументСсылка	- ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//	ДокументОснование - ДокументСсылка - Ссылка на документ-основание
//
Функция сфпВернутьОснованиеДокумента(ДокументСсылка) Экспорт
	МетаданныеДокумента = ДокументСсылка.Метаданные(); 
	Если сфпОбщегоНазначения.сфпЕстьРеквизитОбъекта("ДокументОснование",МетаданныеДокумента) Тогда
		Возврат ДокументСсылка.ДокументОснование;
	ИначеЕсли сфпОбщегоНазначения.сфпЕстьРеквизитОбъекта("Основание",МетаданныеДокумента) Тогда
		Возврат ДокументСсылка.Основание;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Функция возвращает тему для заполнения переданного звонка
//
// Параметры:
//	НаправлениеЗвонка	- Булево 			 - Истина - входящий, Ложь - исходящий звонок
//	ДатаЗвонка			- Дата				 - Дата звонка
//
// Возвращаемое значение:
//	ТемаЗвонка - Строка - Тема звонка
//
Функция сфпЗаполнитьТемуТелефонногоЗвонка(НаправлениеЗвонка, ДатаЗвонка) Экспорт
	// тема звонка = Направление звонка (Входящий/Исходящий) + Время звонка с секундами
	ТемаЗвонка = "";
	Если НаправлениеЗвонка Тогда
		ТемаЗвонка = ТемаЗвонка + Нстр("ru = 'Входящий: '") + Формат(ДатаЗвонка, "ДЛФ=В");
	Иначе
		ТемаЗвонка = ТемаЗвонка + Нстр("ru = 'Исходящий: '") + Формат(ДатаЗвонка, "ДЛФ=В");		
	КонецЕсли;
	Возврат ТемаЗвонка;
КонецФункции

// Функция возвращает описание для заполнения переданного звонка
//
// Параметры:
//	ДлительностьЗвонка	- Дата - Продолжительность звонка
//
// Возвращаемое значение:
//	ОписаниеЗвонка - Строка - Описание звонка
//
Функция сфпЗаполнитьОписаниеТелефонногоЗвонка(ДлительностьЗвонка) Экспорт
	// Описание: Длительность - [длительность звонка]
	ОписаниеЗвонка = Нстр("ru = 'Длительность - '") + Формат(Дата('00010101') + ДлительностьЗвонка, "ДЛФ=T; ДП=0:00:00");
	Возврат ОписаниеЗвонка;
КонецФункции

// Функция возвращает всех контактых лиц переданного партнера
//
// Параметры:
//	Партнер - СправочникСсылка - Ссылка на партнера
//
// Возвращаемое значение:
//	МассивКЛ - - Массив - Массив полученных контактных лиц
//
Функция сфпПолучитьВсехКонтактныхЛицПартнера(Партнер) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ Ссылка
	|ИЗ Справочник.КонтактныеЛицаПартнеров
	|ГДЕ Владелец = &Партнер");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

// Функция формирует дату из даты и времени.
//
// Параметры:
//	ПараметрДата	- Дата	- Дата
//	ПараметрВремя	- Дата	- Время
//
// Возвращаемое значение:
//	Дата	- Дата
//
Функция сфпСформироватьДатуИзДатыИВремени(ПараметрДата, ПараметрВремя) Экспорт
	Возврат НачалоДня(ПараметрДата) + (ПараметрВремя - Дата("00010101"));
КонецФункции // сфпСформироватьДатуИзДатыИВремени()

// Функция разделяет дату на дату и время, возвращает структуру с полями "Дата", "Время".
//
// Параметры:
//	ПараметрДата	- Дата	- Дата
//
// Возвращаемое значение:
//	Структура	- Структура с датой м временем.
//
Функция сфпРазделитьДатаНаДатуИВремя(ПараметрДата) Экспорт
	Возврат Новый Структура("Дата,Время", НачалоДня(ПараметрДата), Дата("00010101") + (ПараметрДата - НачалоДня(ПараметрДата)));
КонецФункции // сфпРазделитьДатаНаДатуИВремя()

// Функция определяет входящий или исходящий звонок
//
// Параметры:
//	НомерСобытия	- Число	- Состояние звонка
//
// Возвращаемое значение:
//	Булево	- Признак входящего звонка
//
Функция сфпОпределитьВходящийЗвонокПриЗагрузкеИстории(НаправлениеЗвонка) 
	Если НаправлениеЗвонка = 1 Тогда
		Возврат Ложь;
	ИначеЕсли НаправлениеЗвонка = 2 
		ИЛИ НаправлениеЗвонка = 3
		ИЛИ НаправлениеЗвонка = 4 
		ИЛИ НаправлениеЗвонка = 6  Тогда
		Возврат Истина;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // сфпОпределитьВходящийЗвонок()

// Функция проверяет используется ли в конфигурации ограничение по телефонным звонкам
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования ограничения
//
Функция сфпИспользоватьОграничениеПоказаТелефонныхЗвонков() Экспорт
	Возврат Константы.сфпОграничениеНаПросмотрТелефонныхЗвонков.Получить();
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция сфпРазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция определяет имя документа "Телефонный звонок", как оно задано в Конфигураторе
// в зависимости от используемой конфигурации
//
// Параметры:
//  КакСсылка	- Булево	- признак возврата имени документа с учетом ссылочного типа
//
// Возвращаемое значение:
//  Строка - имя документа "Телефонный звонок", как оно задано в Конфигураторе.
// 
Функция сфпИмяДокументаТелефонныйЗвонок(КакСсылка = Ложь) Экспорт
	
	Если Метаданные.Документы.Найти("ТелефонныйЗвонок") <> Неопределено Тогда
		ИмяДокумента = ?(КакСсылка, "ДокументСсылка.ТелефонныйЗвонок", "Документ.ТелефонныйЗвонок");
		
	ИначеЕсли Метаданные.Документы.Найти("CRM_ТелефонныйЗвонок") <> Неопределено Тогда
		ИмяДокумента = ?(КакСсылка, "ДокументСсылка.CRM_ТелефонныйЗвонок", "Документ.CRM_ТелефонныйЗвонок");
		
	Иначе
		ИмяДокумента = "";
	КонецЕсли;
	
	Возврат ИмяДокумента;

КонецФункции

// Функция определяет имя формы документа "Телефонный звонок", как оно задано в Конфигураторе
// в зависимости от используемой конфигурации
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка - имя формы документа "Телефонный звонок", как оно задано в Конфигураторе.
// 
Функция сфпИмяФормыДокументаТелефонныйЗвонок() Экспорт
	
	Если Метаданные.Документы.Найти("ТелефонныйЗвонок") <> Неопределено Тогда
		ИмяФормаЗвонка = "Документ.ТелефонныйЗвонок.ФормаОбъекта";
		
	ИначеЕсли Метаданные.Документы.Найти("CRM_ТелефонныйЗвонок") <> Неопределено Тогда
		ИмяФормаЗвонка = "Документ.CRM_ТелефонныйЗвонок.ФормаОбъекта";
		
	Иначе
		ИмяФормаЗвонка = "";
	КонецЕсли;
	
	Возврат ИмяФормаЗвонка;

КонецФункции

// Функция определяет имя формы списка документов "Телефонный звонок", как оно задано в Конфигураторе
// в зависимости от используемой конфигурации
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка - имя формы списка документов "Телефонный звонок", как оно задано в Конфигураторе.
//
Функция сфпИмяФормыСпискаДокументовТелефонныйЗвонок() Экспорт
	
	Если Метаданные.Документы.Найти("ТелефонныйЗвонок") <> Неопределено Тогда
		ИмяФормаЗвонка = "Документ.ТелефонныйЗвонок.ФормаСписка";
		
	ИначеЕсли Метаданные.Документы.Найти("CRM_ТелефонныйЗвонок") <> Неопределено Тогда
		ИмяФормаЗвонка = "Документ.CRM_ТелефонныйЗвонок.ФормаСписка";
		
	Иначе
		ИмяФормаЗвонка = "";
	КонецЕсли;
	
	Возврат ИмяФормаЗвонка;

КонецФункции

// Функция определяет имя ПВХ "Настройки пользователей", как оно задано в Конфигураторе
// в зависимости от используемой конфигурации
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка - имя ПВХ "Настройки пользователей", как оно задано в Конфигураторе.
//
Функция сфпИмяПВХ_СофтфонНастройкиПользователей() Экспорт
	
	Если Метаданные.ПланыВидовХарактеристик.Найти("сфпНастройкиПользователей") <> Неопределено Тогда
		ИмяПВХ_СофтфонНастройкиПользователей = "сфпНастройкиПользователей";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("CRM_НастройкиПользователей") <> Неопределено Тогда
		ИмяПВХ_СофтфонНастройкиПользователей = "CRM_НастройкиПользователей";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("НастройкиПользователей") <> Неопределено Тогда
		ИмяПВХ_СофтфонНастройкиПользователей = "НастройкиПользователей";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("ПраваИНастройки") <> Неопределено Тогда
		ИмяПВХ_СофтфонНастройкиПользователей = "ПраваИНастройки";
		
	Иначе
		ИмяПВХ_СофтфонНастройкиПользователей = "";
	КонецЕсли;
	
	Возврат ИмяПВХ_СофтфонНастройкиПользователей;

КонецФункции

// Функция определяет имя регистра сведений "Настройки пользователей", как оно задано в Конфигураторе
// в зависимости от используемой конфигурации
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка - имя регистра сведений "Настройки пользователей", как оно задано в Конфигураторе.
//
Функция сфпИмяРегистраСофтфонНастройкиПользователей() Экспорт
	
	Если Метаданные.РегистрыСведений.Найти("сфпНастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраСофтфонНастройкиПользователей = "сфпНастройкиПользователей";
		
	ИначеЕсли Метаданные.РегистрыСведений.Найти("CRM_НастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраСофтфонНастройкиПользователей = "CRM_НастройкиПользователей";

	ИначеЕсли Метаданные.РегистрыСведений.Найти("НастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраСофтфонНастройкиПользователей = "НастройкиПользователей";

	ИначеЕсли Метаданные.РегистрыСведений.Найти("ПраваИНастройки") <> Неопределено Тогда
		ИмяРегистраСофтфонНастройкиПользователей = "ПраваИНастройки";

	Иначе
		ИмяРегистраСофтфонНастройкиПользователей = "";
	КонецЕсли;
	
	Возврат ИмяРегистраСофтфонНастройкиПользователей;

КонецФункции

// Функция определяет имя реквизита АбонентКонтакт документа "Телефонный звонок", как оно задано в Конфигураторе
// в зависимости от используемой конфигурации
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка - имя реквизита АбонентКонтакт документа "Телефонный звонок", как оно задано в Конфигураторе.
//
Функция сфпИмяРеквизитаАбонентКонтакт() Экспорт
	
	ИмяДокумента = СтрЗаменить(сфпИмяДокументаТелефонныйЗвонок(), "Документ.", "");
	Если НЕ ПустаяСтрока(ИмяДокумента) Тогда
		РеквизитыДокумента = Метаданные.Документы[ИмяДокумента].Реквизиты;
		
		ИмяРеквизита = "АбонентКонтакт";
		Если РеквизитыДокумента.Найти(ИмяРеквизита) <> Неопределено Тогда
			Возврат ИмяРеквизита;
		КонецЕсли;
		
		ИмяРеквизита = "Абонент";
		Если РеквизитыДокумента.Найти(ИмяРеквизита) <> Неопределено Тогда
			Возврат ИмяРеквизита;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";

КонецФункции

Функция сфпТребуетсяНастройкаТелефонии() Экспорт
	
	ТребуетсяНастройка = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерсияСофтФон = Константы.сфпИспользуемаяВерсияСофтФон.Получить();
	Если ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотPROSTO Тогда
		ТребуетсяНастройка = сфпТребуетсяНастройкаОблачнойТелефонии();
		
	ИначеЕсли ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотПроф Тогда
		ТребуетсяНастройка = сфпТребуетсяНастройкаОбычнойТелефонии();
	КонецЕсли;

	Возврат ТребуетсяНастройка;
	
КонецФункции

Функция сфпТребуетсяНастройкаОблачнойТелефонии() Экспорт
	
	ТребуетсяНастройка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Метаданные.Константы.Найти("ИспользоватьРазделениеПоОбластямДанных") <> Неопределено Тогда
		  ИспользуетсяРазделениеПоОбластямДанных = Константы["ИспользоватьРазделениеПоОбластямДанных"].Получить();
	Иначе ИспользуетсяРазделениеПоОбластямДанных = Ложь;
	КонецЕсли;
	
	ИспользуемаяАТС = Неопределено;
	Если Константы.сфпИспользоватьОблачнуюТелефонию.Получить() Тогда
		ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	
	ИначеЕсли Константы.сфпИспользоватьМобильнуюТелефонию.Получить() Тогда
		ИспользуемаяАТС = "МобильнаяТелефония";
		
	Иначе
		ТребуетсяНастройка = Истина;
	КонецЕсли;
	
	АдресСервераПубликацииСервисовТелефонии = "";
	ИмяПубликацииСервисовТелефонии = "";
	
	Если НЕ ТребуетсяНастройка И НЕ ИспользуетсяРазделениеПоОбластямДанных Тогда
		ОбщиеНастройкиТелефонии = Константы.сфпОбщиеНастройкиТелефонии.Получить();
		Если ЗначениеЗаполнено(ОбщиеНастройкиТелефонии) И ТипЗнч(ОбщиеНастройкиТелефонии) = Тип("Строка") Тогда
			ОбщиеНастройкиТелефонии = ЗначениеИзСтрокиВнутр(ОбщиеНастройкиТелефонии);
			Если ТипЗнч(ОбщиеНастройкиТелефонии) = Тип("Структура") Тогда
				ОбщиеНастройкиТелефонии.Свойство("АдресСервераОсновнойПубликации", АдресСервераПубликацииСервисовТелефонии);
				ОбщиеНастройкиТелефонии.Свойство("АдресРесурсаОсновнойПубликации", ИмяПубликацииСервисовТелефонии);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Константы.сфпИспользоватьСофтФон.Получить() Тогда
			ТребуетсяНастройка = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(АдресСервераПубликацииСервисовТелефонии) ИЛИ НЕ ЗначениеЗаполнено(ИмяПубликацииСервисовТелефонии) Тогда
			ТребуетсяНастройка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТребуетсяНастройка Тогда
		НастройкиТелефонии = ПолучитьНастройкиТелефонии();
		
		Если ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.MangoOffice") Тогда
			Если НЕ ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key) ИЛИ НЕ ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt) Тогда
				ТребуетсяНастройка = Истина;
			КонецЕсли;

		ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Билайн") Тогда
			Если НЕ ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС) ИЛИ НЕ ЗначениеЗаполнено(НастройкиТелефонии.КлючПодпискиНаСобытия) Тогда
				ТребуетсяНастройка = Истина;
			КонецЕсли;

		ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.МТТ") Тогда
			Если НЕ ЗначениеЗаполнено(НастройкиТелефонии.АдресОблачнойАТС) ИЛИ НЕ ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС) ИЛИ НЕ ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВИБ) Тогда
				ТребуетсяНастройка = Истина;
			КонецЕсли;

		ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Яндекс") Тогда
			Если НЕ ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииАТСЯндекс) Тогда
				ТребуетсяНастройка = Истина;
			КонецЕсли;

		ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.СофтФонWebModule") Тогда
			Если НЕ ЗначениеЗаполнено(НастройкиТелефонии.АдресОблачнойАТС) ИЛИ НЕ ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key) ИЛИ НЕ ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt) Тогда
				ТребуетсяНастройка = Истина;
			КонецЕсли;

		ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Ростелеком") Тогда
			Если НЕ ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt) ИЛИ
				 НЕ ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key) ИЛИ
				 НЕ ЗначениеЗаполнено(НастройкиТелефонии.Domain) Тогда
				ТребуетсяНастройка = Истина;
			КонецЕсли;

		ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.UIS") Тогда
			Если НЕ ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииАТСUIS) Тогда
				ТребуетсяНастройка = Истина;
			КонецЕсли;

		Иначе	
			Если НЕ ЗначениеЗаполнено(НастройкиТелефонии.АдресОблачнойАТС) ИЛИ НЕ ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС) ИЛИ НЕ ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВИБ) Тогда
				ТребуетсяНастройка = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		Если НЕ ТребуетсяНастройка Тогда
		   	ТребуетсяНастройка = НЕ сфпПроверитьПодпискуНаСобытия();
			Если ТребуетсяНастройка Тогда
				РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПроверкаСтатуса");
				ТребуетсяНастройка = НЕ РезультатЗапроса.Успешно;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#Если НЕ ВнешнееСоединение Тогда
	Если НЕ ТребуетсяНастройка Тогда
		Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
			ТребуетсяНастройка = Истина;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли

	Возврат ТребуетсяНастройка;

КонецФункции

Функция сфпТребуетсяНастройкаОбычнойТелефонии() Экспорт
	
	ТребуетсяНастройка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Метаданные.Константы.Найти("ИспользоватьРазделениеПоОбластямДанных") <> Неопределено Тогда
		  ИспользуетсяРазделениеПоОбластямДанных = Константы["ИспользоватьРазделениеПоОбластямДанных"].Получить();
	Иначе ИспользуетсяРазделениеПоОбластямДанных = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользуетсяРазделениеПоОбластямДанных Тогда
		Если НЕ Константы.сфпИспользоватьСофтФон.Получить() Тогда
			ТребуетсяНастройка = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат ТребуетсяНастройка;

КонецФункции

Функция сфпПроверитьПодпискуНаСобытия()
	
	ИспользуемаяАТС = Неопределено;
	Если Константы.сфпИспользоватьОблачнуюТелефонию.Получить() Тогда
		ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	
	ИначеЕсли Константы.сфпИспользоватьМобильнуюТелефонию.Получить() Тогда
		ИспользуемаяАТС = "МобильнаяТелефония";
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
		КлючПодпискиНаСобытия = НастройкиТелефонии.КлючПодпискиНаСобытия;
	    		
		Если ЗначениеЗаполнено(КлючПодпискиНаСобытия) Тогда
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПолучитьДанныеПодпискиНаСобытия");
			Если РезультатЗапроса.Успешно Тогда
				json = Новый ЧтениеJSON();
				json.УстановитьСтроку(РезультатЗапроса.Результат);
				jsonСтруктура = ПрочитатьJSON(json);
				json.Закрыть();
				
				Если jsonСтруктура.Свойство("errorCode") Тогда
					сфпЗаписатьЗначениеНастройкиИнтеграцииАТС("КлючПодпискиНаСобытия", "");
					
				ИначеЕсли jsonСтруктура.Свойство("expires") Тогда
					Если jsonСтруктура.expires = 0 Тогда
						сфпЗаписатьЗначениеНастройкиИнтеграцииАТС("КлючПодпискиНаСобытия", "");
					КонецЕсли;	
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(КлючПодпискиНаСобытия) Тогда
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПодпискаНаСобытия");
			Если РезультатЗапроса.Успешно Тогда
				json = Новый ЧтениеJSON();
				json.УстановитьСтроку(РезультатЗапроса.Результат);
				jsonСтруктура = ПрочитатьJSON(json);
				json.Закрыть();
				
				Если jsonСтруктура.Свойство("subscriptionId") Тогда
					сфпЗаписатьЗначениеНастройкиИнтеграцииАТС("КлючПодпискиНаСобытия", jsonСтруктура.subscriptionId);
					
					сфпСофтФонПроСервер.ПодключитьОбновлениеПодпискиНаСобытияОблачнойАТС();
				КонецЕсли;				
			КонецЕсли;
			
		Иначе
			сфпСофтФонПроСервер.ПодключитьОбновлениеПодпискиНаСобытияОблачнойАТС();
		КонецЕсли;	
		
		Возврат ЗначениеЗаполнено(КлючПодпискиНаСобытия);
		
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

Процедура сфпЗаписатьЗначениеНастройкиИнтеграцииАТС(КлючНастройки, ЗначениеНастройки)
	
	сфпУдалитьСлужебныеСимволы(ЗначениеНастройки);
	сфпСофтФонПроСервер.УстановитьНастройкуТелефонии(КлючНастройки, ЗначениеНастройки);
	
КонецПроцедуры

Процедура сфпУдалитьСлужебныеСимволы(Строка) Экспорт
	
	Строка = СтрЗаменить(Строка, Символы.ПС, "");
	Строка = СокрЛП(Строка);
	Строка = СтрЗаменить(Строка, "¶", "");
	
КонецПроцедуры

Функция сфпПолучитьПользователяСотрудника(Сотрудник) Экспорт
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ Пользователь
		|ИЗ РегистрСведений.СотрудникиПользователя
		|ГДЕ Сотрудник = &Сотрудник И Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) И НЕ Пользователь.Недействителен И НЕ Пользователь.ПометкаУдаления");
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Пользователь;
		КонецЕсли;
	КонецЕсли;

	Возврат Справочники.Пользователи.ПустаяСсылка();

КонецФункции

Процедура сфпПриЗаписиОбъектаТелефонныйЗвонокПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		Если Источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		ИмяРегистра = "ПредметыПапкиВзаимодействий";
		Если Метаданные.РегистрыСведений.Найти(ИмяРегистра) <> Неопределено Тогда
			ИзмерениеВзаимодействие = Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("Взаимодействие");
			Если ИзмерениеВзаимодействие <> Неопределено И Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Количество() = 1 Тогда
				Если ИзмерениеВзаимодействие.Тип.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
					УстановитьПривилегированныйРежим(Истина);
					
					МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Взаимодействие = Источник.Ссылка;
					МенеджерЗаписи.Прочитать();
					Если НЕ МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.Взаимодействие = Источник.Ссылка;
						МенеджерЗаписи.Записать();
					КонецЕсли;
					
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает текст кнопки перевода звонков
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Строка	- Текст кнопки перевода звонков
//
Функция сфпПолучитьТекстКнопкиПереводЗвонков(Контакт) Экспорт
	
	Результат = "Переводить звонки на...";
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1 Пользователь
		|ИЗ РегистрСведений.сфпНомераТелефоновДляПоиска
		|ГДЕ Объект = &Объект");
		Запрос.УстановитьПараметр("Объект", Контакт);	
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.Пользователь) Тогда
				Возврат "Переводить звонки на: " + Выборка.Пользователь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // сфпПолучитьТекстКнопкиПереводЗвонков()

Функция сфпТребуетсяОбновитьКонтактыТелефонии() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Объект ИЗ РегистрСведений.сфпКонтактыТелефонии");
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

Функция сфпМожноОбновитьТелефонныеЗвонки() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Документ.ТелефонныйЗвонок ГДЕ сфпКлиент <> &сфпКлиент");
	Запрос.УстановитьПараметр("сфпКлиент", Метаданные.Документы.ТелефонныйЗвонок.Реквизиты.сфпКлиент.Тип.ПривестиЗначение(Неопределено));
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

Процедура сфпОбновитьТелефонныеЗвонки() Экспорт

	Если Метаданные.Справочники.Найти("КонтактныеЛицаКонтрагентов") <> Неопределено Тогда
		ИмяСправочникаКонтактов = "КонтактныеЛицаКонтрагентов";

	ИначеЕсли Метаданные.Справочники.Найти("КонтактныеЛицаПартнеров") <> Неопределено Тогда
		ИмяСправочникаКонтактов = "КонтактныеЛицаПартнеров";

	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка, АбонентКонтакт.Владелец КАК ВладелецКонтакта
	|ИЗ
	|	Документ.ТелефонныйЗвонок
	|ГДЕ
	|	сфпКлиент = &сфпКлиент
	|	И АбонентКонтакт ССЫЛКА Справочник." + ИмяСправочникаКонтактов + "
	|	И АбонентКонтакт <> ЗНАЧЕНИЕ(Справочник." + ИмяСправочникаКонтактов + ".ПустаяСсылка)");
	Запрос.УстановитьПараметр("сфпКлиент", Метаданные.Документы.ТелефонныйЗвонок.Реквизиты.сфпКлиент.Тип.ПривестиЗначение(Неопределено));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТекОбъект.сфпКлиент <> Выборка.ВладелецКонтакта Тогда
			ТекОбъект.сфпКлиент = Выборка.ВладелецКонтакта;
			ТекОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ТекОбъект.Записать();
			Исключение КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновитьРегистрКонтактыТелефонии(Параметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|   сфпАбонентыТелефонныхКниг.ТелефоннаяКнига КАК ТелефоннаяКнига,
	|	сфпАбонентыТелефонныхКниг.Абонент КАК Абонент,
	|	сфпАбонентыТелефонныхКниг.ВидТелефона КАК ВидТелефона,
	|	сфпАбонентыТелефонныхКниг.ВнутреннийНомер КАК ВнутреннийНомер,
	|	сфпАбонентыТелефонныхКниг.УдалитьИсходящийНомер КАК УдалитьИсходящийНомер,
	|	сфпАбонентыТелефонныхКниг.УдалитьЛогин КАК УдалитьЛогин,
	|	сфпАбонентыТелефонныхКниг.УдалитьДанныеАТС КАК УдалитьДанныеАТС,
	|	сфпАбонентыТелефонныхКниг.УдалитьЛицензия КАК УдалитьЛицензия
	|ИЗ
	|	РегистрСведений.сфпАбонентыТелефонныхКниг КАК сфпАбонентыТелефонныхКниг
	|ГДЕ
	|	сфпАбонентыТелефонныхКниг.ТелефоннаяКнига = ЗНАЧЕНИЕ(Справочник.сфпТелефонныеКниги.ПустаяСсылка)
	|	И сфпАбонентыТелефонныхКниг.ВидТелефона = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Выборка.Абонент;
		МенеджерЗаписи.ВнутреннийНомерАТС = Выборка.ВнутреннийНомер;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Объект = Выборка.Абонент;
			МенеджерЗаписи.ВнутреннийНомерАТС = Выборка.ВнутреннийНомер;
			МенеджерЗаписи.ДанныеАТС = Выборка.УдалитьДанныеАТС;
			МенеджерЗаписи.ИсходящийНомерАТС = Выборка.УдалитьИсходящийНомер;
			МенеджерЗаписи.Лицензия = Выборка.УдалитьЛицензия;
			МенеджерЗаписи.ЛогинАТС = Выборка.УдалитьЛогин;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.сфпАбонентыТелефонныхКниг.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТелефоннаяКнига = Выборка.ТелефоннаяКнига;
		МенеджерЗаписи.Абонент = Выборка.Абонент;
		МенеджерЗаписи.ВидТелефона = Выборка.ВидТелефона;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	ТипыОбъектовДляПерезаполнения = сфпПолучитьТипыОбъектовДляПерезаполненияПоНомерам();
	Если ТипыОбъектовДляПерезаполнения.Количество() > 0 Тогда
		ТекстЗапроса = "";
		Для Каждого ИмяСправочника Из ТипыОбъектовДляПерезаполнения Цикл
			Если ИмяСправочника = "Партнеры" ИЛИ ИмяСправочника = "Организации" Тогда
				Продолжить;
			КонецЕсли;

			ЕстьОсновнойТелефон = (Метаданные.Справочники[ИмяСправочника].ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("CRM_ОсновнойДляСвязи") <> Неопределено);
			
			ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "
			|ВЫБРАТЬ Ссылка, Представление, " + ?(ЕстьОсновнойТелефон, "CRM_ОсновнойДляСвязи", "ЛОЖЬ") + " КАК CRM_ОсновнойДляСвязи
			|ИЗ Справочник." + ИмяСправочника + ".КонтактнаяИнформация
			|ГДЕ Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)";
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		ПредыдущийКонтакт = Неопределено;
		
		ПервыйТелефон = "";
		ПервыйТелефонПредставление = "";
	
		ОсновнойТелефон = "";
		ОсновнойТелефонПредставление = "";
				
		ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Выборка.Представление);
			НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
			Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПредыдущийКонтакт <> Выборка.Ссылка Тогда
				Если ПредыдущийКонтакт <> Неопределено Тогда
					ТелефонКонтакта = "";
					ТелефонКонтактаПредставление = "";
							
					Если ЗначениеЗаполнено(ОсновнойТелефон) Тогда
						ТелефонКонтакта = ОсновнойТелефон;
						ТелефонКонтактаПредставление = ОсновнойТелефонПредставление;

					ИначеЕсли ЗначениеЗаполнено(ПервыйТелефон) Тогда
						ТелефонКонтакта = ПервыйТелефон;
						ТелефонКонтактаПредставление = ПервыйТелефонПредставление;	
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТелефонКонтакта) Тогда
						МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Объект = ПредыдущийКонтакт;
						МенеджерЗаписи.ВнутреннийНомерАТС = "";
						МенеджерЗаписи.Прочитать();
						Если НЕ МенеджерЗаписи.Выбран() Тогда
							МенеджерЗаписи.Объект = ПредыдущийКонтакт;
							МенеджерЗаписи.ВнутреннийНомерАТС = "";
						КонецЕсли;
						Если МенеджерЗаписи.ОсновнойНомерТелефона <> ТелефонКонтакта Тогда
							МенеджерЗаписи.ОсновнойНомерТелефона = ТелефонКонтакта;
							МенеджерЗаписи.ОсновнойНомерТелефонаПредставление = ТелефонКонтактаПредставление;
							МенеджерЗаписи.Записать();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ПервыйТелефон = "";
				ПервыйТелефонПредставление = "";
	
				ОсновнойТелефон = "";
				ОсновнойТелефонПредставление = "";
				
				ПредыдущийКонтакт = Выборка.Ссылка;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПервыйТелефон) Тогда
				ПервыйТелефон = НомерТелефона;
				ПервыйТелефонПредставление = Выборка.Представление;
			КонецЕсли;
			Если Выборка.CRM_ОсновнойДляСвязи Тогда
				ОсновнойТелефон = НомерТелефона;
				ОсновнойТелефонПредставление = Выборка.Представление;
			КонецЕсли;
		КонецЦикла;
		
		Если ПредыдущийКонтакт <> Неопределено Тогда
			ТелефонКонтакта = "";
			ТелефонКонтактаПредставление = "";
					
			Если ЗначениеЗаполнено(ОсновнойТелефон) Тогда
				ТелефонКонтакта = ОсновнойТелефон;
				ТелефонКонтактаПредставление = ОсновнойТелефонПредставление;

			ИначеЕсли ЗначениеЗаполнено(ПервыйТелефон) Тогда
				ТелефонКонтакта = ПервыйТелефон;
				ТелефонКонтактаПредставление = ПервыйТелефонПредставление;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТелефонКонтакта) Тогда
				МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = ПредыдущийКонтакт;
				МенеджерЗаписи.ВнутреннийНомерАТС = "";
				МенеджерЗаписи.Прочитать();
				Если НЕ МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Объект = ПредыдущийКонтакт;
					МенеджерЗаписи.ВнутреннийНомерАТС = "";
				КонецЕсли;
				Если МенеджерЗаписи.ОсновнойНомерТелефона <> ТелефонКонтакта Тогда
					МенеджерЗаписи.ОсновнойНомерТелефона = ТелефонКонтакта;
					МенеджерЗаписи.ОсновнойНомерТелефонаПредставление = ТелефонКонтактаПредставление;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Функция возвращает Регламентное задание
//
// Параметры:
//	ИмяЗадания	- Строка	- Имя регламентного задания
//
// Возвращаемое значение:
//	РегламентноеЗадание	- Регламентное задание
//
Функция ПолучитьРегламентноеЗадание(ИмяЗадания) Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);
	Если Задание = Неопределено Тогда
		ТекМетаданные = Метаданные.РегламентныеЗадания[ИмяЗадания];
		СтруктураОтбора = Новый Структура("Метаданные", ТекМетаданные);
		НайденныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураОтбора);
		Если НайденныеЗадания.Количество() > 0 Тогда
			Задание = НайденныеЗадания[0];
			
		Иначе
			Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(ТекМетаданные);
			Задание.Использование = Истина;
			Задание.Ключ = Новый УникальныйИдентификатор();
			Задание.Наименование = ТекМетаданные.Представление();
			Задание.ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
			Задание.Записать();
		КонецЕсли;
	КонецЕсли;

	Возврат Задание;

КонецФункции // ПолучитьРегламентноеЗадание()

// Функция возвращает расписание регламентного задания
//
// Параметры:
//	ИмяЗадания	- Строка	- Имя регламентного задания
//
// Возвращаемое значение:
//	Расписание	- Расписание регламентного задания
//
Функция ПолучитьРасписаниеРегламентногоЗадания(ИмяЗадания) Экспорт
	
	Задание = ПолучитьРегламентноеЗадание(ИмяЗадания);
	Если Задание <> Неопределено Тогда
		Возврат Задание.Расписание;
	КонецЕсли;
		
	Возврат Неопределено;

КонецФункции // ПолучитьРасписаниеРегламентногоЗадания()

// Процедура устанавливает расписание регламентного задания
//
// Параметры:
//	Расписание	- РасписаниеРегламентногоЗадания	- Расписание регламентного задания
//	ИмяЗадания	- Строка							- Имя регламентного задания
//
Процедура УстановитьРасписаниеРегламентногоЗадания(Расписание, ИмяЗадания) Экспорт
	
	Задание = ПолучитьРегламентноеЗадание(ИмяЗадания);
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Задание.Расписание = Расписание;
		Задание.Записать();
	Исключение КонецПопытки;

КонецПроцедуры	//	УстановитьРасписаниеРегламентногоЗадания()

// Процедура устанавливает признак использования регламентного задания
//
// Параметры:
//	ИмяЗадания		- Строка	- Имя регламентного задания
//	Использование	- Булево	- Признак использования регламентного задания
//
Процедура УстановитьИспользованиеРегламентногоЗадания(ИмяЗадания, Использование) Экспорт
	
	Задание = ПолучитьРегламентноеЗадание(ИмяЗадания);
	Если Задание <> Неопределено Тогда
		Попытка
			Если Задание.Использование <> Использование Тогда
				Задание.Использование = Использование;
				Задание.Записать();
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЕсли;

КонецПроцедуры	//	УстановитьРасписаниеРегламентногоЗадания()

// Функция возвращает доступность команд API
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	СтруктураКоманд	-	Структура доступности команд API
//
Функция ПолучитьДоступностьКомандAPI() Экспорт
	
	СтруктураКоманд = Новый Структура("Ответ, Завершить, Пауза, Перевод", Ложь, Истина, Истина, Истина);
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	Если сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаITooLabs(ИспользуемаяАТС) ИЛИ
		 ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.UIS ИЛИ
		 ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		СтруктураКоманд = Новый Структура("Ответ, Завершить, Пауза, Перевод", Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	
	Возврат СтруктураКоманд;

КонецФункции

// Функция возвращает значение дополнительной информации контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт-ссылка
//
// Возвращаемое значение:
//	ДополнительнаяИнформация	- Значение дополнительной информации контакта
//
Функция ПолучитьДополнительнуюИнформациюКонтакта(Контакт)
	
	ДополнительнаяИнформацияКонтактов = Константы.сфпДополнительнаяИнформацияКонтактов.Получить();
	
	Если НЕ ЗначениеЗаполнено(Контакт) ИЛИ НЕ ЗначениеЗаполнено(ДополнительнаяИнформацияКонтактов) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяРеквизитаКонтакта = "";
	ИмяМетаданныхКонтакта = Контакт.Метаданные().Имя;
	
	МассивДополнительнойИнформации = сфпРазложитьСтрокуВМассивПодстрок(ДополнительнаяИнформацияКонтактов, ";");
	Для Каждого СтрокаИнформации Из МассивДополнительнойИнформации Цикл
		Позиция = Найти(СтрокаИнформации, ".");
		Если Позиция > 0 Тогда
			ИмяМетаданныхСтроки = Лев(СтрокаИнформации, Позиция - 1);
			Если ИмяМетаданныхСтроки = ИмяМетаданныхКонтакта Тогда
				ИмяРеквизитаКонтакта = Сред(СтрокаИнформации, Позиция + 1);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаКонтакта) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СКД = Новый СхемаКомпоновкиДанных();
	
	Источник = СКД.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ Ссылка КАК Контакт ИЗ Справочник." + Контакт.Метаданные().Имя;
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	НастройкиСКД = СКД.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = НастройкиСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));

	ВыбранныеПоляДетальнаяГруппировка = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДетальнаяГруппировка.Поле = Новый ПолеКомпоновкиДанных("Контакт." + ИмяРеквизитаКонтакта);

	ОтборКонтакта = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборКонтакта.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контакт.Ссылка");
	ОтборКонтакта.Использование = Истина;
	ОтборКонтакта.ПравоеЗначение = Контакт;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	Попытка
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		Возврат "";
	КонецПопытки;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
			
	ТаблицаРезультат = Новый ТаблицаЗначений();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
			
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДополнительнаяИнформация = "";
	
	Если ТаблицаРезультат.Количество() > 0 Тогда
		ДополнительнаяИнформация = ТаблицаРезультат[0][0];
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДополнительнаяИнформация;
	
КонецФункции

Процедура сфпОбработкаЗаполненияОбработчик(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Источник.Ссылка.Пустая() Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Звонок") Тогда
			Если ДанныеЗаполнения.Свойство("Владелец") И ЗначениеЗаполнено(ДанныеЗаполнения.Владелец) Тогда
				Источник.Владелец = ДанныеЗаполнения.Владелец;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Источник.Наименование) И ДанныеЗаполнения.Свойство("Наименование") И ЗначениеЗаполнено(ДанныеЗаполнения.Наименование) Тогда
				Источник.Наименование = ДанныеЗаполнения.Наименование;
			КонецЕсли;
			Если Источник.КонтактнаяИнформация.Количество() = 0 И ДанныеЗаполнения.Свойство("Телефон") И ЗначениеЗаполнено(ДанныеЗаполнения.Телефон) Тогда
				ИмяМетаданных = Источник.Ссылка.Метаданные().Имя;
				
				ВидыПоМетаданным = Новый Структура();
				ВидыПоМетаданным.Вставить("Партнеры", "ТелефонПартнера");
				ВидыПоМетаданным.Вставить("_ДемоПартнеры", "_ДемоТелефонПартнера");
				ВидыПоМетаданным.Вставить("КонтактныеЛицаПартнеров", "ТелефонКонтактногоЛица");
				ВидыПоМетаданным.Вставить("_ДемоКонтактныеЛицаПартнеров", "_ДемоТелефонКонтактногоЛица");
				ВидыПоМетаданным.Вставить("Контрагенты", "ТелефонКонтрагента");
				ВидыПоМетаданным.Вставить("_ДемоКонтрагенты", "_ДемоТелефонКонтрагента");
				ВидыПоМетаданным.Вставить("КонтактныеЛица", "ТелефонРабочийКонтактныеЛица");
				ВидыПоМетаданным.Вставить("Пользователи", "ТелефонПользователя");
				ВидыПоМетаданным.Вставить("ФизическиеЛица", "ТелефонМобильныйФизическиеЛица");
				ВидыПоМетаданным.Вставить("Организации", "ТелефонОрганизации");
				ВидыПоМетаданным.Вставить("Лиды", "ТелефонЛида");
				
				ИмяВидаТелефона = ВидыПоМетаданным[ИмяМетаданных];
				
				ВидТелефона = "";
				
				Попытка
					ВидТелефона = Справочники.ВидыКонтактнойИнформации[ИмяВидаТелефона];
				Исключение
					
					ТекРодитель = Справочники.ВидыКонтактнойИнформации["Справочник" + ИмяМетаданных];
					
					Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	Ссылка
					|ИЗ
					|	Справочник.ВидыКонтактнойИнформации
					|ГДЕ
					|	Родитель = &Родитель
					|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
					|	И НЕ ПометкаУдаления");
					Запрос.УстановитьПараметр("Родитель", ТекРодитель);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ВидТелефона = Выборка.Ссылка;
					КонецЕсли;	
				КонецПопытки;	
				
				Если ЗначениеЗаполнено(ВидТелефона) Тогда
					НоваяСтрока = Источник.КонтактнаяИнформация.Добавить();
					НоваяСтрока.Тип = Перечисления["ТипыКонтактнойИнформации"].Телефон;
					НоваяСтрока.Представление = ДанныеЗаполнения.Телефон;
					НоваяСтрока.НомерТелефона = ДанныеЗаполнения.Телефон;
					НоваяСтрока.НомерТелефонаБезКодов = ДанныеЗаполнения.Телефон;				
					НоваяСтрока.Вид = ВидТелефона;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеРегистров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Объект ИЗ РегистрСведений.сфпНомераТелефоновДляПоиска");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Объект ИЗ РегистрСведений.сфпКонтактыТелефонии ГДЕ ВнутреннийНомерАТС <> """"");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Функция сфпПараметрыПереадресации(НомерТелефона) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ПараметрыПереадресации = Новый Структура("ВнутреннийНомер,НаименованиеКонтакта", "", "");
	
	ИспользоватьМаршрутизацию = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользоватьМаршрутизацию");
	Если ИспользоватьМаршрутизацию Тогда
		ОчищенныйНомерТелефона = сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		Если СтрДлина(ОчищенныйНомерТелефона) > 0 Тогда
			ДлинаВнутреннихНомеров = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпМаксимальнаяДлинаВнутреннихНомеров");
			КоличествоЦифрВНомере = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпПоследниеЦифрыТелефонногоНомера");
			
			Если СтрДлина(ОчищенныйНомерТелефона) > ДлинаВнутреннихНомеров Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	Номера.Объект.Наименование КАК НаименованиеКонтакта,
				|   ЕСТЬNULL(АбонентыАТС.ВнутреннийНомерАТС, """") КАК ВнутреннийНомер,
				|   ЕСТЬNULL(АбонентыАТС.ЛогинАТС, """") КАК Логин
				|ИЗ
				|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК Номера
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сфпКонтактыТелефонии КАК АбонентыАТС
				|	ПО АбонентыАТС.Объект = Номера.Пользователь
				|ГДЕ
				|	Номера.НомерТелефона = &НомерТелефона
				|	И (ЕСТЬNULL(АбонентыАТС.ВнутреннийНомерАТС, """") <> """"
				|		ИЛИ ЕСТЬNULL(АбонентыАТС.ЛогинАТС, """") <> """")");
				Запрос.УстановитьПараметр("НомерТелефона", Прав(ОчищенныйНомерТелефона, КоличествоЦифрВНомере));
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ПараметрыПереадресации.Вставить("ВнутреннийНомер", Выборка.ВнутреннийНомер);
					ПараметрыПереадресации.Вставить("Логин", Выборка.Логин);
					ПараметрыПереадресации.Вставить("НаименованиеКонтакта", Выборка.НаименованиеКонтакта);
				КонецЕсли;
	 		КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыПереадресации;

КонецФункции // сфпПараметрыПереадресации()

Функция сфпПараметрыОператораКоллтрекинга(Оператор = Неопределено) Экспорт
	
	Перем ТекущийОператор;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Протокол","");
	СтруктураПараметров.Вставить("ДоменAPP","");
	СтруктураПараметров.Вставить("ДоменAPI","");
	СтруктураПараметров.Вставить("ДоменCallAPI","");
	СтруктураПараметров.Вставить("ОтносительныйURLCallAPI","");
	СтруктураПараметров.Вставить("ДоменDataAPI","");
	СтруктураПараметров.Вставить("ОтносительныйURLDataAPI","");
	
	Если ТипЗнч(Оператор) = Тип("ПеречислениеСсылка.сфпОператорыКоллтрекинга") Тогда
		ТекущийОператор = Оператор;
	Иначе
		ТекущийОператор = Константы.сфпОператорКоллтрекинга.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийОператор) ИЛИ ТекущийОператор = Перечисления.сфпОператорыКоллтрекинга.Comagic Тогда
		
		СтруктураПараметров.Протокол = "https://";
		СтруктураПараметров.ДоменAPP = "app.comagic.ru";
		СтруктураПараметров.ДоменAPI = "api.comagic.ru";
		СтруктураПараметров.ДоменCallAPI = "callapi.comagic.ru";
		СтруктураПараметров.ОтносительныйURLCallAPI = "/v4.0";
		СтруктураПараметров.ДоменDataAPI = "dataapi.comagic.ru";
		СтруктураПараметров.ОтносительныйURLDataAPI = "/v2.0";
		
	ИначеЕсли ТекущийОператор = Перечисления.сфпОператорыКоллтрекинга.UIS Тогда
		
		СтруктураПараметров.Протокол = "https://";
		СтруктураПараметров.ДоменAPP = "app.uiscom.ru";
		СтруктураПараметров.ДоменAPI = "api.uiscom.ru";
		СтруктураПараметров.ДоменCallAPI = "callapi.uiscom.ru";
		СтруктураПараметров.ОтносительныйURLCallAPI = "/v4.0";
		СтруктураПараметров.ДоменDataAPI = "dataapi.uiscom.ru";
		СтруктураПараметров.ОтносительныйURLDataAPI = "/v2.0";
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция Телефония_ПолучитьКоличествоЗвонков(НачалоПериода, КонецПериода, Пользователь = Неопределено, Подразделения = Неопределено, КонтролируемыеПользователи = Неопределено) Экспорт
	
	ТекстУсловия = "";
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстУсловия = ТекстУсловия + " И Дата МЕЖДУ &НачалоПериода И &КонецПериода";
		
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
		ТекстУсловия = ТекстУсловия + " И Дата >= &НачалоПериода";

	ИначеЕсли ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстУсловия = ТекстУсловия + " И Дата <= КонецПериода";
	КонецЕсли;
	
	ТекстУсловияПринадлежностиЗвонки = "";
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ТекстУсловияПринадлежностиЗвонки = ТекстУсловияПринадлежностиЗвонки + ?(ТекстУсловияПринадлежностиЗвонки = "", "", " ИЛИ ") + " (Автор = &Пользователь ИЛИ Ответственный = &Пользователь)";	
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделения) И ТипЗнч(Подразделения) = Тип("Массив") Тогда
		ТекстУсловияПринадлежностиЗвонки = ТекстУсловияПринадлежностиЗвонки + ?(ТекстУсловияПринадлежностиЗвонки = "", "", " ИЛИ ") + " (Автор.Подразделение В ИЕРАРХИИ(&Подразделения) ИЛИ Ответственный.Подразделение В ИЕРАРХИИ(&Подразделения))";
	КонецЕсли;
	Если ЗначениеЗаполнено(КонтролируемыеПользователи) И ТипЗнч(КонтролируемыеПользователи) = Тип("Массив") Тогда
		ТекстУсловияПринадлежностиЗвонки = ТекстУсловияПринадлежностиЗвонки + ?(ТекстУсловияПринадлежностиЗвонки = "", "", " ИЛИ ") + " (Автор В (&КонтролируемыеПользователи) ИЛИ Ответственный В (&КонтролируемыеПользователи))";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстУсловияПринадлежностиЗвонки) Тогда
		ТекстУсловия = ТекстУсловия + " И (" + ТекстУсловияПринадлежностиЗвонки + ")";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(ВсеЗвонки) КАК ВсеЗвонки,
	|   СУММА(Входящие) КАК Входящие,
	|	СУММА(Исходящие) КАК Исходящие,
	|	СУММА(Пропущенные) КАК Пропущенные
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВсеЗвонки,
	|		ВЫБОР КОГДА Входящий И сфпСостояниеЗвонка <> ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Пропущенный) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Входящие,
	|		ВЫБОР КОГДА Входящий ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК Исходящие,
	|		ВЫБОР КОГДА Входящий И сфпСостояниеЗвонка = ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Пропущенный) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Пропущенные
	|	ИЗ
	|		Документ.ТелефонныйЗвонок
	|	ГДЕ
	|		НЕ ПометкаУдаления" + ТекстУсловия + ") КАК Подзапрос");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.УстановитьПараметр("КонтролируемыеПользователи", КонтролируемыеПользователи);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВсегоЗвонков = ?(Выборка.ВсеЗвонки = Null, 0, Выборка.ВсеЗвонки);
		ВсегоВходящих = ?(Выборка.Входящие = Null, 0, Выборка.Входящие);
		ВсегоИсходящих = ?(Выборка.Исходящие = Null, 0, Выборка.Исходящие);
		ВсегоПропущенных = ?(Выборка.Пропущенные = Null, 0, Выборка.Пропущенные);
		
	Иначе
		ВсегоЗвонков = 0;
		ВсегоВходящих = 0;
		ВсегоИсходящих = 0;
		ВсегоПропущенных = 0;
	КонецЕсли;	
	
	Возврат Новый Структура("Все,Входящие,Исходящие,Пропущенные", ВсегоЗвонков, ВсегоВходящих, ВсегоИсходящих, ВсегоПропущенных);

КонецФункции

Процедура СохранитьКонтактЗвонка(Телефон, Контакт) Экспорт
	
	ТелефонКонтакта = СтрЗаменить(Телефон, "+", "");
	
	МенеджерЗаписи = РегистрыСведений.сфпТекущиеЗвонки.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	МенеджерЗаписи.ИдентификаторЗвонка = "Исходящий_" + ТелефонКонтакта;
	МенеджерЗаписи.АбонентКонтакт = Контакт;
	МенеджерЗаписи.ДатаЗвонка = ТекущаяДата();
	МенеджерЗаписи.НомерТелефона = ТелефонКонтакта;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Функция проверяет существует ли данная ссылка в конфигурации
//
// Параметры:
//	ЛюбаяСсылка	- Произвольный	- Ссылка на объект конфигурации
//
// Возвращаемое значение:
//	Булево	- Признак существования ссылки
//
Функция сфпСсылкаСуществует(ЛюбаяСсылка) Экспорт
	Возврат сфпОбщегоНазначения.сфпСсылкаСуществует(ЛюбаяСсылка);
КонецФункции // сфпСсылкаСуществует()

// Функция проверяет является ли переданный тип ссылочным типом данных
// Для типа "Неопределено" возвращается Ложь
//
// Параметры:
//	ЛюбаяСсылка	- Произвольный	- Ссылка на объект конфигурации
//
// Возвращаемое значение:
//	Булево	- Признак ссылочного типа
//
Функция сфпЭтоСсылка(ЛюбаяСсылка) Экспорт
	Возврат сфпОбщегоНазначения.сфпЭтоСсылка(ТипЗнч(ЛюбаяСсылка));
КонецФункции // сфпЭтоСсылка(()

// Функция возвращает значение состояния переданного события
//
// Параметры:
//	СобытиеСсылка - ДокументСсылка - Ссылка событие
//
// Возвращаемое значение:
//	СостояниеСобытия - Перечисление - Состояние события
//
Функция сфпВернутьСостояниеСобытияПоСсылке(СобытиеСсылка) Экспорт
	Возврат СобытиеСсылка.СостояниеСобытия;
КонецФункции	

// Функция возвращает идентификатор события по ссылке
//
// Параметры:
//	СобытиеСсылка	- ДокументСсылка - Ссылка на событие
//
// Возвращаемое значение:
//	Строка	- Идентификатор звонка
//
Функция сфпПолучитьИдентификаторСобытия(СобытиеСсылка) Экспорт
	Возврат СобытиеСсылка.сфпИдентификаторЗвонка;
КонецФункции

// Процедура меняет реквизит "Взаимодействие" в документе "Телефонный звонок" на переданное Событие
//
// Параметры:
//	ЗвонокСсылка	- ДокументСсылка	- Ссылка на документ "Телефонный звонок", в котором меняем взаимодействие
//	СобытиеСсылка	- ДокументСсылка	- Ссылка на документ "Событие", которое подставляем в реквизит звонка
//
Процедура сфпПерезаписатьВзаимодействиеУТелефонногоЗвонка(ЗвонокСсылка, СобытиеСсылка) Экспорт
	ЗвонокОбъект = ЗвонокСсылка.ПолучитьОбъект();
	ЗвонокОбъект.ВзаимодействиеОснование = СобытиеСсылка;
	Попытка
		ЗвонокОбъект.Записать();
	Исключение
	КонецПопытки;		
КонецПроцедуры	

// Функция проверяет сохраненную структуру с результатами отчета на корректность.
//
// Параметры:
//	ПроверяемаяСтруктура	- Структура	- Проверяемая структура.
//
// Возвращаемое значение:
//	Булево	- Результат проверки.
//
Функция СохраненнаяСтруктураРезультатаОтчетаКорректна(ПроверяемаяСтруктура) Экспорт
	Если ТипЗнч(ПроверяемаяСтруктура) <> Тип("Структура")
		ИЛИ	НЕ ПроверяемаяСтруктура.Свойство("СписокНаименований")
		ИЛИ	НЕ ПроверяемаяСтруктура.Свойство("СоответствиеНаименованийСпискам")
		ИЛИ	ТипЗнч(ПроверяемаяСтруктура.СписокНаименований) <> Тип("СписокЗначений")
		ИЛИ ТипЗнч(ПроверяемаяСтруктура.СоответствиеНаименованийСпискам) <> Тип("Соответствие") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции // СохраненнаяСтруктураРезультатаОтчетаКорректна()

// Функция возвращает сохраненный список с результатами отчета по имени.
//
// Параметры:
//	Наименование	- Строка	- Наименование отчета.
//
// Возвращаемое значение:
//	Неопределено или СписокЗначений	- Список с результатами отчета.
//
Функция ПолучитьСохраненныйРезультатОтчетаПоНаименованию(Наименование) Экспорт
	
	Попытка
		СохраненнаяСтруктура = ПараметрыСеанса.сфпСохраненныеРезультатыОтчетов.Получить();
	Исключение
		СохраненнаяСтруктура = Неопределено;
	КонецПопытки;
	
	Если СохраненнаяСтруктураРезультатаОтчетаКорректна(СохраненнаяСтруктура) Тогда
		Попытка
			Возврат СохраненнаяСтруктура.СоответствиеНаименованийСпискам[Наименование];
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьСохраненныйРезультатОтчетаПоНаименованию()

// Процедура сохраняет список с результатами отчета под указанным именем.
//
// Параметры:
//	Наименование	- Строка			- Наименование отчета.
//	Список			- СписокЗначений	- Список с результатами отчета.
//
Процедура СохранитьРезультатОтчетаВПараметрахСеанса(Наименование, Список) Экспорт
	
	Попытка
		СохраняемаяСтруктура = ПараметрыСеанса.сфпСохраненныеРезультатыОтчетов.Получить();
	Исключение
		СохраняемаяСтруктура = Неопределено;
	КонецПопытки;
	Если Не СохраненнаяСтруктураРезультатаОтчетаКорректна(СохраняемаяСтруктура) Тогда
		СохраняемаяСтруктура = Новый Структура("СписокНаименований,СоответствиеНаименованийСпискам", Новый СписокЗначений(), Новый Соответствие());
	КонецЕсли;
	
	Если СохраняемаяСтруктура.СписокНаименований.НайтиПоЗначению(Наименование) = Неопределено Тогда
		СохраняемаяСтруктура.СписокНаименований.Добавить(Наименование);
	КонецЕсли;
	
	СохраняемаяСтруктура.СоответствиеНаименованийСпискам.Вставить(Наименование, Список);
	
	ПараметрыСеанса.сфпСохраненныеРезультатыОтчетов = Новый ХранилищеЗначения(СохраняемаяСтруктура, Новый СжатиеДанных(9));

КонецПроцедуры // СохранитьРезультатОтчетаВПараметрахСеанса()

// Функция возвращает список выбора наименования сохраненного результата отчета.
// 
// Возвращаемое значение:
//  СписокЗначений - Список выбора наименования.
//
Функция ПолучитьСписокВыбораНаименованийСохраненныхРезультатовОтчетов() Экспорт
	Список = Новый СписокЗначений();
	Попытка
		СохраненнаяСтруктура = ПараметрыСеанса.сфпСохраненныеРезультатыОтчетов.Получить();
	Исключение
		СохраненнаяСтруктура = Неопределено;
	КонецПопытки;
	Если СохраненнаяСтруктураРезультатаОтчетаКорректна(СохраненнаяСтруктура) Тогда
		Список.ЗагрузитьЗначения(СохраненнаяСтруктура.СписокНаименований.ВыгрузитьЗначения());
	КонецЕсли;
	Возврат Список;
КонецФункции // ПолучитьСписокВыбораНаименованийСохраненныхРезультатовОтчетов()

// Останавливает выполнение кода на заданное время.
//
// Параметры:
//  Секунд - Число - время ожидания в секундах.
//
Процедура Пауза(Секунд) Экспорт
	
	ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("сфпСофтФонПроСервер.Пауза", Параметры);
	КонецЕсли;
		
	ФоновоеЗадание.ОжидатьЗавершенияВыполнения(Секунд);
	
КонецПроцедуры

#КонецОбласти