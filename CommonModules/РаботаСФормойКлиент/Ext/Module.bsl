
#Область ПрограммныйИнтерфейс

// Устанавливает текущую строку на новый объект
// 
// Параметры: 
//  Список  - ДинамическийСписок - список, для которого устанавливается текущая строка
//  НовыйОбъект -СправочникСылка, ДокументСсылка - ссылка на элемент списка
//
Процедура УстановитьТекущуюСтрокуНаНовыйОбъект(Список, НовыйОбъект) Экспорт
	
	Если ЗначениеЗаполнено(НовыйОбъект) Тогда
		
		Список.ТекущаяСтрока = НовыйОбъект;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет замер времени выполнения записи элементов 
// 
// Параметры:
//  ИмяОбъекта 		 - Строка 			- имя записываемого объекта
//  РежимЗаписи		 - ПараметрыЗаписи	- режим записи объекта
//  БольшойДокумент  - Булево 			- 
//
Процедура ЗамерВремениЗапись(ИмяОбъекта, РежимЗаписи = Неопределено, БольшойДокумент = Ложь) Экспорт
	
	Если РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		
		КлючеваяОперация = "ПроведениеДокумента" + ИмяОбъекта;
		
		Если БольшойДокумент Тогда
		
			 КлючеваяОперация = КлючеваяОперация + "СБольшимКоличествомСтрок";
			
		КонецЕсли;
		
	ИначеЕсли РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Запись") Тогда
				
		КлючеваяОперация = "ЗаписьДокумента" + ИмяОбъекта;
		
	Иначе
		
		КлючеваяОперация = "Запись" + ИмяОбъекта;
		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
КонецПроцедуры

// Возвращает признак соответствия подразделения и пользователя
// 
// Параметры: 
//  ПодразделениеДокумента - СправочникСсылка.ПодразделенияКомпании  - подразделение компании документа
//  ОбратныйВызов          - ОписаниеОповещения - вызов процедуры после проверки
//
// Возвращаемое значение:
//  Булево - ложь - подразделения соответствуют 
//
Функция НачатьПроверкуПодразделенияДокументаИПользователя(ПодразделениеДокумента, ОбратныйВызов) Экспорт
	
	ПараметрыПользователя = РаботаСФормойВызовСервера.ПользователюДоступноИзменениеПодразделения();
	
	Если
		ПараметрыПользователя.ЗапрещенаПерезаписьПодразделения
		И ПараметрыПользователя.ТекущееПодразделение <> ПодразделениеДокумента
	Тогда
		
		ШаблонПредупреждения = НСтр(
			"ru = 'Подразделение компании документа не соответствуют текущему пользователю:
				  |Подразделение компании документа: %1
				  |Подразделение компании пользователя: %2'"
		);
		ТекстПредупреждения = СтрШаблон(
			ШаблонПредупреждения,
			ПодразделениеДокумента,
			ПараметрыПользователя.ТекущееПодразделение
		);
		ПоказатьПредупреждение(ОбратныйВызов, ТекстПредупреждения);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обработка оповещения "Записан_Документ" пока не реализована
// 
// Параметры:
//  Документ - ДокументСсылка - ссылка на записываемый документ
//
Процедура ОповеститьОЗаписиДокумента(Документ) Экспорт
	
	РедактированиеДокументовПриНаличииПодчиненных = 
		ПраваИНастройкиПользователяКлиент.Значение("РедактированиеДокументовПриНаличииПодчиненных");
	
	Если Не РедактированиеДокументовПриНаличииПодчиненных Тогда
		
		Оповестить("Записан_Документ", Документ);
		
	КонецЕсли;
	
КонецПроцедуры
// Обработка оповещения "Записан_Документ" пока не реализована

// Обновление списка подчиненных документов
// 
// Параметры: 
//  Документ   - ДокументСсылка -
//  ВидыСчетов - Массив 		-
//
Процедура ОбновитьПодчиненныеСчета(Документ, ВидыСчетов) Экспорт
	
	ПерезаполнятьСчетаПриРедактированииДокументов = 
		ПраваИНастройкиПользователяКлиент.Значение("ПерезаполнятьСчетаПриРедактированииДокументов");
		
	Если Не ПерезаполнятьСчетаПриРедактированииДокументов Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПерезаполнятьСФВыданныйБезусловно =
		УправлениеДиалогомВызовСервера.ПерезаполнятьСчетФактуруБезусловно(Документ, "СчетФактураВыданный");
	ПерезаполнятьСФПолученныйБезусловно =
		УправлениеДиалогомВызовСервера.ПерезаполнятьСчетФактуруБезусловно(Документ, "СчетФактураПолученный");
	
	Если ВидыСчетов = Неопределено Тогда
		
		ВидыСчетов = Новый Массив;
		Если Не ПерезаполнятьСФПолученныйБезусловно Тогда
			ВидыСчетов.Добавить("СчетФактураПолученный");
		КонецЕсли;
		Если Не ПерезаполнятьСФВыданныйБезусловно Тогда
			ВидыСчетов.Добавить("СчетФактураВыданный");
		КонецЕсли;
		
		ВидыСчетов.Добавить("СчетНаОплату");
		
	КонецЕсли;
	
	// Исключим счет-фактуру из поиска подчиненных документов
	Если ПерезаполнятьСФПолученныйБезусловно Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВидыСчетов, "СчетФактураПолученный");
	КонецЕсли;
	Если ПерезаполнятьСФВыданныйБезусловно Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВидыСчетов, "СчетФактураВыданный");
	КонецЕсли;
	
	СписокПодчиненных = УправлениеДиалогомВызовСервера.ПолучитьСписокПодчиненных(Документ, ВидыСчетов);
	
	Если ЗначениеЗаполнено(СписокПодчиненных) Тогда
		
		Параметры = Новый Структура("Документ", Документ);
		
		Для Каждого ЭлементСписка Из СписокПодчиненных Цикл
			
			Если Не ЭлементСписка.Пометка Тогда
				
				Если
					ТипЗнч(ЭлементСписка.Значение) = Тип("ДокументСсылка.СчетНаОплату") 
					И Не Параметры.Свойство("СчетНаОплату")
				Тогда
					
					Параметры.Вставить("СчетНаОплату", ЭлементСписка.Значение);
					
				ИначеЕсли
					(ТипЗнч(ЭлементСписка.Значение) = Тип("ДокументСсылка.СчетФактураПолученный")
						Или ТипЗнч(ЭлементСписка.Значение) = Тип("ДокументСсылка.СчетФактураВыданный"))
					И Не Параметры.Свойство("СчетФактура")
				Тогда
					
					Параметры.Вставить("СчетФактура", ЭлементСписка.Значение);
					
				ИначеЕсли
					ТипЗнч(ЭлементСписка.Значение) = Тип("ДокументСсылка.СчетОтПоставщика")
					И Не Параметры.Свойство("СчетОтПоставщика")
				Тогда
					
					Параметры.Вставить("СчетОтПоставщика", ЭлементСписка.Значение);
					
				ИначеЕсли
					(Параметры.Свойство("СчетФактура") Или Параметры.Свойство("СчетОтПоставщика")) 
					И Параметры.Свойство("СчетНаОплату")
				Тогда
					
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если
			Параметры.Свойство("СчетФактура")
			Или Параметры.Свойство("СчетНаОплату")
			Или Параметры.Свойство("СчетОтПоставщика")
		Тогда
			
			ОткрытьФорму("ОбщаяФорма.ОбновлениеДокументовОплаты", Параметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Оповещает о создании нового объекта
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//
Процедура ОповеститьОСозданииНовогоОбъекта(Форма) Экспорт
	
	ОповещениеОСозданииНовогоОбъекта = ОповещениеОСозданииНовогоОбъекта(Форма);
	
	Если ОповещениеОСозданииНовогоОбъекта <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОповещениеОСозданииНовогоОбъекта, Форма.Объект.Ссылка);
		Форма.ОписаниеОповещенияОЗакрытии = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Оповещает об обновлении заголовка надписи налоговый документ
//
// Параметры:
//  Объект - ДанныеФормаСтруктура - Объект, для которого выполняется событие.
// 
Процедура ОбновитьЗаголовокНадписиНалоговыйДокумент(Объект = Неопределено) Экспорт
	
	Оповестить("ОбновитьЗаголовокНадписиНалоговыйДокумент", Объект);
	
КонецПроцедуры 

// Возращает признак необходимости обновления заголовка надписи налоговый документ
// 
// Параметры: 
//  Форма - ФормаКлиентскогоПриложения - форма документа, в котором нужно обновить надпись
//  ИмяСобытия - Строка - 
//
Процедура ТребуетсяОбновитьЗаголовокНадписиНалоговыйДокумент(Форма, ИмяСобытия) Экспорт
	
	Если ИмяСобытия = "ОбновитьЗаголовокНадписиНалоговыйДокумент" Тогда
		ПараметрыДействия = Новый Структура;
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбновитьЗаголовокНадписиНалоговыйДокумент", Форма);
		ВыполнитьОбработкуОповещения(Обработчик, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

// Оповещает об обновлении заголовка надписи таможенная декларация
//
// Параметры:
//  Объект - ДанныеФормаСтруктура - Объект, для которого выполняется событие.
// 
Процедура ОбновитьЗаголовокНадписиТаможеннаяДекларация(Объект = Неопределено) Экспорт
	
	Оповестить("ОбновитьЗаголовокНадписиТаможеннаяДекларация", Объект);
	
КонецПроцедуры 

// Возращает признак необходимости обновления заголовка надписи налоговый документ
// 
// Параметры: 
//  Форма - ФормаКлиентскогоПриложения - форма документа, в котором нужно обновить надпись
//  ИмяСобытия - Строка - 
//
Процедура ТребуетсяОбновитьЗаголовокНадписиТаможеннаяДекларация(Форма, ИмяСобытия) Экспорт
	
	Если ИмяСобытия = "ОбновитьЗаголовокНадписиНалоговыйДокумент" Тогда
		ПараметрыДействия = Новый Структура;
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбновитьЗаголовокНадписиТаможеннаяДекларация", Форма);
		ВыполнитьОбработкуОповещения(Обработчик, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийДинамическогоСпискаФормы

// Общий обработчик события возникающего при выборе строки списка.
//
// Параметры:
//  Форма					- УправляемаяФорма				- Форма, в которой возникло событие.
//  Элемент					- ТаблицаФормы					- Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока			- ДанныеФормыЭлементКоллекции	- выбранная строка
//  Поле					- ПолеФормы						- Активное поле (колонка).
//  СтандартнаяОбработка	- Булево						- В данный параметр передается признак выполнения системной обработки события.
//
Процедура СписокВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем инвертирование значения реквизита "Регламентированный учет" у выбранного объекта.
	Если Поле.Имя = "РегламентированныйУчет" Тогда
		УправлениеДиалогомВызовСервера.ИнверсияРегламентногоУчета(ВыбраннаяСтрока, СтандартнаяОбработка);
		Форма.Элементы.Список.Обновить();
	КонецЕсли;
	
	Если Поле.Имя = "СчетФактура" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущийСтатус = Элемент.ТекущиеДанные.СчетФактура;
		Если ТекущийСтатус = "Не требуется" ИЛИ НЕ ЗначениеЗаполнено(ТекущийСтатус) Тогда
			Возврат;
		КонецЕсли;
		
		// Получим счет-фактуру
		ПодчиненныйСчетФактура = ЗащищенныеФункцииВызовСервера.ПолучитьВидПодчиненнойСчетаФактуры(ВыбраннаяСтрока);
		Если ПодчиненныйСчетФактура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Определим параметры открытия формы
		ПараметрыОткрытия = Новый Структура;
		Если ТекущийСтатус = "Отсутствует" Тогда
			ПараметрыОткрытия.Вставить("Основание", ВыбраннаяСтрока);
		Иначе
			ПараметрыОткрытия.Вставить("Ключ", ПодчиненныйСчетФактура.СчетФактура);
		КонецЕсли;
		
		// откроем форму
		ОткрытьФорму("Документ." + ПодчиненныйСчетФактура.ВидСФ + ".ФормаОбъекта", ПараметрыОткрытия,Форма);
		
	КонецЕсли;
	
КонецПроцедуры // СписокВыбор()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОповещениеОСозданииНовогоОбъекта(Форма)
	
	Если Форма.ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;

	Если ТипЗнч(Форма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры) <> Тип("Структура") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Форма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры,
		"ОповещениеОСозданииНовогоОбъекта",
		Неопределено
	);

КонецФункции

#КонецОбласти