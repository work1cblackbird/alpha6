////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции обработки типовых реквизитов документов:
// - для проверки заполнения;
// - для заполнения/обновления связанных данных;
// - прочее.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получение договора взаиморасчетов контрагента с заданными параметрами.
// Если договора заданного типа нет - создается новый договор.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на справочник контрагентов,
//				 договор которого требуется получить.
//  ВидДоговора - ПеречислениеСсылка.ВидыДоговоров - Ссылка на перечисление вида получаемого договора.
//  Объект		- ДокументОбъект - Документ, в рамках которого производится создание нового договора.
//				 Если значение неопределено, параметры договора берутся из настроек.
//  ПараметрыДействия - Структура - Структура, содержащая тип цен покупки и продажи для заполнения нового договора.
//				 Если значение неопределено или не определен тот или иной тип цен - они берутся из настроек.
//  УчитыватьАналитики - Булево - Определяет нужно ли дополнительно проверять соответствие подразделения
//				 основного договора с данными объекта.
//
// Возвращаемое значение:
//  СправочникСсылка.ДоговорыВзаиморасчетов - Ссылка на справочник ДоговорыВзаиморасчетов с найденным договором
//											 или вновь созданным.
Функция ПолучитьДоговорВзаиморасчетов(Контрагент,
                                      ВидДоговора,
                                      Объект = Неопределено,
                                      ПараметрыДействия = Неопределено,
                                      УчитыватьАналитики = Истина) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		
		ПараметрыДействия = Новый Структура;
		
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Организация,ПодразделениеКомпании,Дата");
	ПоискПоВидуДеятельности = Ложь;
	
	Если Объект <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Объект);
		ПоискПоВидуДеятельности = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.Организация) Тогда
		
		ПараметрыПоиска.Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыДействия, "Организация", ПараметрыСеанса.Организация
		);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.ПодразделениеКомпании) Тогда
		
		ПараметрыПоиска.ПодразделениеКомпании = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыДействия, "ПодразделениеКомпании", ПараметрыСеанса.ПодразделениеКомпании
		);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.Дата) Тогда
		
		ПараметрыПоиска.Дата = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	ПараметрыПоиска.Вставить(
		"Валюта",
		ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("ВалютаВзаиморасчетов", Объект, ПараметрыДействия)
	);
	Попытка
		// При первичном заполнении базы, работы фонового задания - когда ключ не доступен
		// и не инициализирован параметр сеанса ПараметрыСеанса.МаскаЛицензирования
		ДоступенАвтосалон = ПолучитьФункциональнуюОпцию(
			"ДоступенАвтосалон",
			Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования)
		);
	Исключение
		ДоступенАвтосалон = Истина;
	КонецПопытки;
	
	// Аренда автомобилей
	Попытка
		// При первичном заполнении базы, работы фонового задания - когда ключ не доступен
		// и не инициализирован параметр сеанса ПараметрыСеанса.МаскаЛицензирования
		ДоступнаАренда = ПолучитьФункциональнуюОпцию(
			"ДоступенАрендаАвтомобилей",
			Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования)
		);
	Исключение
		ДоступнаАренда = Истина;
	КонецПопытки;
	
	КонтрольКорректностиДоговораИСкладаДокумента =  ПраваИНастройкиПользователя.Значение("КонтрольКорректностиДоговораИСкладаДокумента", Объект);
	ПоВидуДеятельности = Новый Структура;
	ПоВидуДеятельности.Вставить("ДляАвтосалона", ДоступенАвтосалон);
	ПоВидуДеятельности.Вставить("ДляАвтосервиса", Истина);
	ПоВидуДеятельности.Вставить("Внутренний", Истина);
	ПоВидуДеятельности.Вставить("ДляАренды", ДоступнаАренда);
	ПоВидуДеятельности.Вставить("ДляДепозитаАренды", Ложь);
	
	Если ПоискПоВидуДеятельности Тогда
		
		ДокументыПоВидамДеятельности = ДокументыПоВидамДеятельности();
		ИмяДокумента = Объект.Ссылка.Метаданные().Имя;
		
		Если ДокументыПоВидамДеятельности.Универсальный.Найти(ИмяДокумента) <> Неопределено Тогда
			
			ПоВидуДеятельности.ДляАвтосалона = ДоступенАвтосалон;
			ПоВидуДеятельности.ДляАвтосервиса = Истина;
			ПоВидуДеятельности.Внутренний = Истина;
			ПоВидуДеятельности.ДляАренды = Ложь;
			ПоВидуДеятельности.ДляДепозитаАренды = Ложь;
			
		ИначеЕсли ДокументыПоВидамДеятельности.Прочее.Найти(ИмяДокумента) <> Неопределено Тогда
			
			ПоВидуДеятельности.Внутренний = Истина;
			ПоВидуДеятельности.ДляАвтосалона = Ложь;
			ПоВидуДеятельности.ДляАвтосервиса = Ложь;
			ПоВидуДеятельности.ДляАренды = Ложь;
			ПоВидуДеятельности.ДляДепозитаАренды = Ложь;
			
		ИначеЕсли ДокументыПоВидамДеятельности.Сервис.Найти(ИмяДокумента) <> Неопределено Тогда
			
			ПоВидуДеятельности.ДляАвтосервиса = Истина;
			ПоВидуДеятельности.ДляАвтосалона = Ложь;
			ПоВидуДеятельности.Внутренний = Ложь;
			ПоВидуДеятельности.ДляАренды = Ложь;
			ПоВидуДеятельности.ДляДепозитаАренды = Ложь;
			
		ИначеЕсли ДоступенАвтосалон И ДокументыПоВидамДеятельности.Салон.Найти(ИмяДокумента) <> Неопределено Тогда
			
			ПоВидуДеятельности.ДляАвтосалона = Истина;
			ПоВидуДеятельности.ДляАвтосервиса = Ложь;
			ПоВидуДеятельности.Внутренний = Ложь;
			ПоВидуДеятельности.ДляАренды = Ложь;
			ПоВидуДеятельности.ДляДепозитаАренды = Ложь;
			
		// Аренда автомобилей
		ИначеЕсли ДокументыПоВидамДеятельности.Аренда.Найти(ИмяДокумента) <> Неопределено Тогда
			
			ДоговорДляДепозитаАренды = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ДоговорДляДепозитаАренды", Ложь);
			
			ПоВидуДеятельности.ДляАвтосалона = Ложь;
			ПоВидуДеятельности.ДляАвтосервиса = Ложь;
			ПоВидуДеятельности.Внутренний = Ложь;
			ПоВидуДеятельности.ДляАренды = ДоступнаАренда И НЕ ДоговорДляДепозитаАренды;
			ПоВидуДеятельности.ДляДепозитаАренды = ДоговорДляДепозитаАренды;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// В первую очередь необходимо получить договор, удовлетворяющий всем условиям,
	// в т.ч. у которого совпадают реквизиты "Подразделение компании" и "Организация".
	// Если такого договора нет, то необходимо попытаться получить договор, у которого хотя бы организация совпадет.
	// Если и такого договора нет, то пытаемся получить договор, у которого подразделение совпадает.
	// Если и такого нет, то получаем любой договор (в пределах подчинения, разумеется).
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыПоиска.Организация);
	Запрос.УстановитьПараметр("Подразделение", ПараметрыПоиска.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыВзаиморасчетов.Ссылка КАК Договор,
	|	ВЫБОР
	|		КОГДА ДоговорыВзаиморасчетов.Организация = &Организация
	|				И ДоговорыВзаиморасчетов.ПодразделениеКомпании = &Подразделение
	|			ТОГДА 0
	|		КОГДА ДоговорыВзаиморасчетов.Организация = &Организация
	|				И ДоговорыВзаиморасчетов.ПодразделениеКомпании В ИЕРАРХИИ (&Подразделение)
	|			ТОГДА 1
	|		КОГДА ДоговорыВзаиморасчетов.Организация = &Организация
	|			ТОГДА 2
	|		КОГДА ДоговорыВзаиморасчетов.ПодразделениеКомпании = &Подразделение
	|			ТОГДА 3
	|		КОГДА ДоговорыВзаиморасчетов.ПодразделениеКомпании В ИЕРАРХИИ (&Подразделение)
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК ПолеДляСортировки,
	|	ДоговорыВзаиморасчетов.Основной КАК Основной,
	|	ДоговорыВзаиморасчетов.ДатаКонца КАК ДатаКонца,
	|	ДоговорыВзаиморасчетов.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
	|ГДЕ
	|	НЕ ДоговорыВзаиморасчетов.ПометкаУдаления
	|	И ДоговорыВзаиморасчетов.Владелец = &Владелец";
	Отборы = Новый Массив;
	ОтборыПоВидамДеятельности = Новый Массив;
	Если ВидДоговора <> Неопределено Тогда
		
		Договора = Новый Массив;
		
		Если ПараметрыДействия.Свойство("ДоступныеВидыДоговоров") Тогда
			
			Договора = ПараметрыДействия.ДоступныеВидыДоговоров;
			
		ИначеЕсли ПараметрыДействия.Свойство("ХозОперация") И ЗначениеЗаполнено(ПараметрыДействия.Хозоперация)Тогда 
							
			Договора = ПараметрыДействия.ХозОперация.ВидыДоговоров.ВыгрузитьКолонку("ВидДоговора");
						
		ИначеЕсли Объект <> Неопределено Тогда
			
			Для Каждого Вид Из Объект.ХозОперация.ВидыДоговоров Цикл
				
				Договора = Объект.ХозОперация.ВидыДоговоров.ВыгрузитьКолонку("ВидДоговора");
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Договора) Тогда
			
			Запрос.УстановитьПараметр("ВидДоговора", Договора);
			Отборы.Добавить("ДоговорыВзаиморасчетов.ВидДоговора В(&ВидДоговора)");
			
		Иначе
			
			Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
			Отборы.Добавить("ДоговорыВзаиморасчетов.ВидДоговора = &ВидДоговора");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПоиска.Валюта <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрыПоиска.Валюта);
		Отборы.Добавить("ДоговорыВзаиморасчетов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов");
		
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ПоВидуДеятельности Цикл
		
		Если НЕ КлючЗначение.Значение Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОтборыПоВидамДеятельности.Добавить(СтрШаблон("ДоговорыВзаиморасчетов.%1", КлючЗначение.Ключ));
		
	КонецЦикла;
	
	Отборы.Добавить("(ДоговорыВзаиморасчетов.ДатаНачала <= &ДатаДоговора И ДоговорыВзаиморасчетов.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
										|	ИЛИ &ДатаДоговора МЕЖДУ ДоговорыВзаиморасчетов.ДатаНачала И ДоговорыВзаиморасчетов.ДатаКонца)");
	Запрос.УстановитьПараметр("ДатаДоговора", ПараметрыПоиска.Дата);
	
	Если ПраваИНастройкиПользователя.Значение("КонтролироватьСоответствиеОрганизацииПодразделения", Объект) Тогда
		
		Отборы.Добавить("ДоговорыВзаиморасчетов.ПодразделениеКомпании.Организация = &Организация");
		
	КонецЕсли;
	
	Если
		КонтрольКорректностиДоговораИСкладаДокумента
			= ПредопределенноеЗначение("Перечисление.СпособКонтроляКорректностиДоговораИСкладаДокумента.КонтрольПоОрганизации")
	Тогда
		
		Отборы.Добавить("ДоговорыВзаиморасчетов.Организация = &Организация");
		
	ИначеЕсли
		КонтрольКорректностиДоговораИСкладаДокумента
			= ПредопределенноеЗначение("Перечисление.СпособКонтроляКорректностиДоговораИСкладаДокумента.КонтрольПоОрганизацииИПодразделению")
	Тогда
		
		Отборы.Добавить("ДоговорыВзаиморасчетов.Организация = &Организация
										|И ДоговорыВзаиморасчетов.ПодразделениеКомпании = &Подразделение");
		
	ИначеЕсли
		КонтрольКорректностиДоговораИСкладаДокумента
			= ПредопределенноеЗначение("Перечисление.СпособКонтроляКорректностиДоговораИСкладаДокумента.КонтрольПоОрганизацииИИерархииПодразделению")
	Тогда
		
		Отборы.Добавить("ДоговорыВзаиморасчетов.Организация = &Организация
										|И ДоговорыВзаиморасчетов.ПодразделениеКомпании В ИЕРАРХИИ(&Подразделение)");
		
	КонецЕсли;
	
	Если Отборы.Количество() Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И " + СтрСоединить(Отборы, " И ");
		
	КонецЕсли;
	
	Если ОтборыПоВидамДеятельности.Количество() Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И (" + СтрСоединить(ОтборыПоВидамДеятельности, " ИЛИ ") + ")";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"
	|УПОРЯДОЧИТЬ ПО
	|	ПолеДляСортировки,
	|	Основной УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Договор;
		
	КонецЕсли;
	
	Если
		Не ПраваИНастройкиПользователя.Значение("АвтоматическоеСозданиеОсновногоДоговора", Объект)
		Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ВидКонтрагента") = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.КонтактноеЛицо")
		Или ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеСоздаватьДоговор", Ложь)
	Тогда
		
		Возврат ПредопределенноеЗначение("Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка");
		
	КонецЕсли;
	
	ПараметрыСоздания = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыСоздания, ПараметрыПоиска);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыСоздания, ПоВидуДеятельности);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыСоздания, ПараметрыДействия, Истина);
	
	Возврат НовыйДоговор(Контрагент, ВидДоговора, ПараметрыСоздания, Объект);
	
КонецФункции // ПолучитьДоговорВзаиморасчетов()

// Устарела. См ПараметрыДокументаАльфаАвто.ПараметрыДокументаПриИзмененииРеквизитов
// Общий обработчик события возникающего при изменении данных объекта из формы "Параметры документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПараметрыДокументаПриИзменении(Объект, ПараметрыДействия) Экспорт
	
	ИзмененныеРеквизиты = ПараметрыДействия.ИзмененныеРеквизиты;
	
	// Проверим, имеет ли смысл дальнейшая обработка
	Если ИзмененныеРеквизиты.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним все измененные реквизиты
	ЗаполнитьЗначенияСвойств(Объект, ИзмененныеРеквизиты);
	
	// Получим менеджер текущего объекта
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Устанавливаем параметры выполнения операции
	Если ИзмененныеРеквизиты.Свойство("Дата") Тогда 
		МенеджерОбъекта.ДатаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("ПодразделениеКомпании") Тогда 
		МенеджерОбъекта.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("Организация") Тогда
		МенеджерОбъекта.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("Автор") Тогда
		МенеджерОбъекта.АвторПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("Проект") Тогда
		МенеджерОбъекта.ПроектПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("ТипЦен") Тогда
		ПараметрыДействия.Вставить("ИзменятьВалютуИзТипаЦен", Ложь);
		МенеджерОбъекта.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("ТипЦенРабот") Тогда
		ПараметрыДействия.Вставить("ИзменятьВалютуИзТипаЦен", Ложь);
		МенеджерОбъекта.ТипЦенРаботПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("КурсДокумента") Тогда
		МенеджерОбъекта.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("ДокументОснование") Тогда
		МенеджерОбъекта.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("КурсВалютыВзаиморасчетов") Тогда
		МенеджерОбъекта.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("СкидкаНаценка") Тогда
		МенеджерОбъекта.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("СкидкаНаценкаРаботы") Тогда
		МенеджерОбъекта.СкидкаНаценкаРаботыПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("Карточка") Тогда
		МенеджерОбъекта.КарточкаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ПараметрыДокументаПриИзменении()

// Общий обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ОбработкаЗаполненияНаОсновании(Объект, ПараметрыДействия);
	
	ИзменитьКурсВалютыПриСменеДаты(Объект, ПараметрыДействия);
	
	ОбработкаПересчетаСуммыДокумента(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#Область ТиповыеРеквизиты

// Общий обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
	
		ПараметрыДействия = Новый Структура;
	
	КонецЕсли;
	
	Если НЕ ПараметрыДействия.Свойство("ИзмененныеРеквизиты")
		И ПроверитьПериодНумерацииДокумента(Объект.Ссылка, Объект.Ссылка.Дата, Объект.Дата) <> 0 Тогда
		Объект.Номер = "";
	КонецЕсли;
	
	Если (НЕ ТипЗнч(Объект)=Тип("ДанныеФормыСтруктура")) ИЛИ (НЕ ЕстьРеквизит(Объект, "ВалютаДокумента")) ИЛИ (НЕ ЕстьРеквизит(Объект, "КурсДокумента")) Тогда
		Возврат;
	КонецЕсли;
	
	// Если пользователю разрешено редактировать курс, то уточним у него, хочет ли он это сделать.
	Если  ПраваИНастройкиПользователя.Значение("РазрешитьИзменениеКурсаДокумента", Объект) Тогда
		
		// Получим значение курса на новую дату
		КурсНаДату = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		
		// Если курс отличается
		Если (КурсНаДату > 0) И (КурсНаДату <> Объект.КурсДокумента) Тогда
			ПараметрыДействия.Вставить("ТребуетсяИзменитьКурс", Истина);
			ПараметрыДействия.Вставить("НовыйКурс",             КурсНаДату);
		КонецЕсли;
		
		// формирование по курсу валюты упр
		Если ЕстьРеквизит(Объект, "КурсВалютыУпр") Тогда
			
			// Получим значение курса на новую дату
			КурсНаДату = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Объект.Дата);
			
			// Если курс отличается
			Если (КурсНаДату > 0) И (КурсНаДату <> Объект.КурсВалютыУпр) Тогда
				ПараметрыДействия.Вставить("ТребуетсяИзменитьКурс", Истина);
				ПараметрыДействия.Вставить("НовыйКурсУпр",          КурсНаДату);
			КонецЕсли;
			
		КонецЕсли;
		
		// формирование по курсу валюты взаиморасчетов
		Если ЕстьРеквизит(Объект, "КурсВалютыВзаиморасчетов") Тогда
			// получим значение курса на новую дату
			ДоговорВзаиморасчетов = Неопределено;
			Если ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") И ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
				ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
			КонецЕсли;
			ДокументОснование = Неопределено;
			Если ЕстьРеквизит(Объект, "ДокументОснование") И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				ДокументОснование = Объект.ДокументОснование;
			КонецЕсли;
			
			КурсНаДату = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(Объект, ДоговорВзаиморасчетов, ДокументОснование);
			// если курс отличается
			Если (КурсНаДату > 0) И (КурсНаДату <> Объект.КурсВалютыВзаиморасчетов) Тогда
				ПараметрыДействия.Вставить("ТребуетсяИзменитьКурс",   Истина);
				ПараметрыДействия.Вставить("НовыйКурсВзаиморасчетов", КурсНаДату);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Получаем курс валюты на дату документа
		ОбновитьКурсДокумента(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПараметрыДействия.Вставить("ТребуетсяЗаполнитьНаОсновании", Истина);
	КонецЕсли;
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если ПравоПользователя("КонтролироватьСоответствиеОрганизацииПодразделения") Тогда
		Если Объект.Организация <> Объект.ПодразделениеКомпании.Организация Тогда
			Объект.Организация = Объект.ПодразделениеКомпании.Организация;
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			МенеджерОбъекта.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	// Предложим поменять валюту документа на валюту подразделения
	Если ЕстьРеквизит(Объект, "ВалютаДокумента") И ЗначениеЗаполнено(Объект.ПодразделениеКомпании.Валюта) 
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> Объект.ПодразделениеКомпании.Валюта Тогда
		ПараметрыДействия.Вставить("НоваяВалюта", Объект.ПодразделениеКомпании.Валюта);
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	
	// Перезаполним договор взаиморасчетов
	Если ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов")
		И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПроверитьДоговорВзаиморасчетов(Объект, Объект.Контрагент, Объект.ДоговорВзаиморасчетов, ПараметрыДействия);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "ЭтоУниверсальныйДокумент") Тогда
		УстановитьПризнакЭтоУниверсальныйДокумент(Объект, Объект.ПодразделениеКомпании, ПараметрыДействия);
	КонецЕсли;

	УстановитьПатентПоОрганизации(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Общий обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Организация может являются плательщиком НДС, а может и нет.. надо обработать таблицу
	// однако ее может не быть, либо в ней не отражается НДС
	// Помимо этого необходимо учесть особенность документа "Поступление товаров", 
	// т.к. в этом случае контрагент (поставщик) может не является плательщиком НДС.
	// (если контрагент - частное лицо, не смотрим на флаг, проставляем ставку БезНДС).
	
	ЕстьСтавкаНДС = (ЕстьРеквизит(Объект.Ссылка, "СтавкаНДС") ИЛИ ЕстьРеквизит(Объект.Ссылка, "СтавкаНДС", "Товары"));
	
	Если ЕстьСтавкаНДС Тогда
		
		ПараметрыНДС = Новый Структура();
		
		Если Справочники.ХозОперации.СоответствуетВидуОперации(Объект.ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка) Тогда
			Если ЕстьРеквизит(Объект, "Контрагент") Тогда
				ЭтоЧастноеЛицо = Ложь;
				Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					ЭтоЧастноеЛицо = Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
				КонецЕсли;
				ОсвобожденОтНДС = Объект.Контрагент.ОсвобожденОтНДС ИЛИ ЭтоЧастноеЛицо;
			Иначе
				ОсвобожденОтНДС = Ложь;
			КонецЕсли;
		Иначе
			ПодразделениеДокумента = ?(ЕстьРеквизит(Объект, "ПодразделениеКомпании"), Объект.ПодразделениеКомпании, Неопределено);
			ОрганизацияДокумента   = ?(ЕстьРеквизит(Объект, "Организация"), Объект.Организация, Неопределено);
			НаДату = ?(ЕстьРеквизит(Объект, "Дата"), Объект.Дата, Неопределено);

			Если ПравоПользователя("КонтролироватьСоответствиеОрганизацииПодразделения") Тогда
				 Если Объект.Организация <> Объект.ПодразделениеКомпании.Организация Тогда
					ПодразделениеДокумента = Неопределено; 
					ОрганизацияДокумента = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(ОрганизацияДокумента, ПодразделениеДокумента, НаДату);
			ОсвобожденОтНДС = ПараметрыНДС.ОсвобожденОтНДС;

		КонецЕсли;
		
		Если ЕстьРеквизит(Объект,, "Товары") Тогда
			ТаблицаТоваров  = Объект.Товары;
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
				Если ОсвобожденОтНДС Тогда
					СтрокаТоваров.СтавкаНДС = Справочники.СтавкиНДС.БезНДС; 
				Иначе 
					СтрокаТоваров.СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, СтрокаТоваров.Номенклатура); 
				КонецЕсли; 
				
				МенеджерОбъекта.ТоварыСтавкаНДСПриИзменении(Объект, СтрокаТоваров);
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "СтавкаНДС") Тогда
			Если ОсвобожденОтНДС Тогда
				Объект.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			Иначе
				Объект.СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС);
			КонецЕсли; 
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			МенеджерОбъекта.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПатентПоОрганизации(Объект, ПараметрыДействия);
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект, ПараметрыДействия);
КонецПроцедуры

// Общий обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ЕстьРеквизит(Объект, "Менеджер") И (НЕ ЗначениеЗаполнено(Объект.Менеджер)) Тогда
		Объект.Менеджер = Объект.Автор.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Обработчик зарезервирован
	
КонецПроцедуры

// Общий обработчик события возникающего при изменении данных реквизита "Менеджер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МенеджерПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Обработчик зарезервирован
	
КонецПроцедуры // МенеджерПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ИзменятьВалюту = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзменятьВалютуИзТипаЦен", Истина);
	
	Если ИзменятьВалюту И ЗначениеЗаполнено(Объект.ТипЦен.ВалютаЦены) И (Объект.ТипЦен.ВалютаЦены <> Объект.ВалютаДокумента) И  ПраваИНастройкиПользователя.Значение("ИзменятьВалютуПоКатегорииЦен", Объект) Тогда
		Объект.ВалютаДокумента = Объект.ТипЦен.ВалютаЦены;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		МенеджерОбъекта.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	
КонецПроцедуры

// Общий обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Получаем курс валюты на дату документа
	ОбновитьКурсДокумента(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Общий обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если НЕ ЕстьРеквизит(Объект, "КурсВалютыУпр") Тогда
		Возврат;
	КонецЕсли;
	
	// Получим курс упр. на дату документа
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	Если ВалютаУпрУчета=Объект.ВалютаДокумента Тогда
		Объект.КурсВалютыУпр = Объект.КурсДокумента;
	Иначе
		// Восстановим управленческий курс по умолчанию
		Объект.КурсВалютыУпр = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаУпрУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Обработка изменения ХО
	Если (НЕ ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов")) ИЛИ (НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов)) ИЛИ (НЕ ЗначениеЗаполнено(Объект.ХозОперация)) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Справочники.ХозОперации.ДоговорСоответствуетХозОперации(Объект.ХозОперация, Объект.ДоговорВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Вид договора не соответствует Хоз.операции.'"), Объект.Ссылка, "ДоговорВзаиморасчетов");
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		МенеджерОбъекта.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	СкладКомпании = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("СкладКомпании", Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект,, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(СкладКомпании) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Перезаполним ячейки склада
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЯчейка(Объект, ПараметрыДействия);
	
	// Перезаполним скидки/наценки
	Если ЕстьРеквизит(Объект,, "Товары") Тогда
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Товары");
	КонецЕсли;
	
	Если ТипЗнч(СкладКомпании) = Тип("СправочникСсылка.СкладыКомпании") И СкладКомпании.Розничный Тогда
		
		ЗапретИзмененияЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗапретИзмененияЦен", Ложь);
		
		Если ЗапретИзмененияЦен Тогда
			Возврат;
		КонецЕсли;
		
		ЭтоПродажа = ?(ЕстьРеквизит(Объект, "ХозОперация"), Объект.ХозОперация.ВидОперации = Перечисления.ВидыОперацийДоговора.Продажа, Ложь);
		
		// Посмотрим можно менять валюту или нет
		ВозможностьИзмененияЦенПоТипуЦен = (ЭтоПродажа И ЕстьРеквизит(Объект, "ТипЦен") И  ПраваИНастройкиПользователя.Значение("ИзменятьВалютуПоКатегорииЦен", Объект));
		
		Если ВозможностьИзмененияЦенПоТипуЦен И ЗначениеЗаполнено(СкладКомпании.ТипЦенРозничнойТорговли) И (НЕ Объект.ТипЦен = СкладКомпании.ТипЦенРозничнойТорговли) Тогда
			
			Объект.ТипЦен = СкладКомпании.ТипЦенРозничнойТорговли;
			МенеджерОбъекта.ТипЦенПриИзменении(Объект, ПараметрыДействия);
			
		КонецЕсли;
		
		// Перезаполним розничную цену
		ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЦенаРозничная(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРеквизитаСкладКомпании()

// Общий обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И НЕ  ПраваИНастройкиПользователя.Значение("ВводДокументовДляВсехКонтрагентов", Объект) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ СотрудникиПользователя
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка = &Пользователь
		|;
		|
		|/////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Кураторы.Контрагент,
		|	Кураторы.Куратор
		|ИЗ
		|	РегистрСведений.Кураторы КАК Кураторы
		|ГДЕ
		|	Кураторы.Контрагент = &Контрагент
		|	И Кураторы.Куратор В (ВЫБРАТЬ Сотрудник ИЗ СотрудникиПользователя)");
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
		
		Если Запрос.Выполнить().Пустой() Тогда
			
			ПараметрыДействия.Вставить("ВыводСообщения",
				Новый Структура(
					"Текст,ПутьКРеквизитуФормы,Использование",
					СтрШаблон(НСтр("ru = '< %1 > не доступен для выбора текущим пользователем'"), Объект.Контрагент),
					"Объект.Контрагент",
					Истина));
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект,, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") Тогда
			Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			МенеджерОбъекта.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Товары");
	МассивТЧ.Добавить("Автомобили");
	МассивТЧ.Добавить("Автоработы");
	МассивТЧ.Добавить("Опции");
	
	ЭтоПокупка = Справочники.ХозОперации.СоответствуетВидуОперации(Объект.ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка);
	
	Если ЭтоПокупка Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Объект);
		МассивПараметров.Добавить("");
		
		Для Каждого ТабличнаяЧасть Из МассивТЧ Цикл
			ЕстьСтавкаНДС 	= ЕстьРеквизит(Объект, "СтавкаНДС", ТабличнаяЧасть);
			ЕстьТЧ			= ЕстьРеквизит(Объект, , 			ТабличнаяЧасть); 
			
			Если ЕстьСтавкаНДС И ЕстьТЧ Тогда 
				ЭтоЧастноеЛицо = Ложь;
				Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					ЭтоЧастноеЛицо = Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
				КонецЕсли;
				
				ОсвобожденОтНДС 	= Объект.Контрагент.ОсвобожденОтНДС ИЛИ ЭтоЧастноеЛицо;
				ИмяПроцедуры 		= СтрШаблон("Документы.%1.%2СтавкаНДСПриИзменении", Объект.Ссылка.Метаданные().Имя, ТабличнаяЧасть);
				
				Для Каждого СтрокаТЧ Из Объект[ТабличнаяЧасть] Цикл
					Если ОсвобожденОтНДС Тогда
						СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
					ИначеЕсли ТабличнаяЧасть = "Товары" И ЕстьРеквизит(СтрокаТЧ.Номенклатура, "СтавкаНДС") Тогда
						СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
					ИначеЕсли ТабличнаяЧасть = "Автоработы" И ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
						СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС; 
					Иначе
						СтрокаТЧ.СтавкаНДС = РаботаСоСтавкамиНДСПовтИсп.СтавкаНДСПоЗначению(20,Ложь);	
					КонецЕсли;
					МассивПараметров.Установить(1, СтрокаТЧ);
					ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяПроцедуры, МассивПараметров); 
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Произошла смена контрагента, значит необходимо очистить реквизит "карта". 
	Если ЕстьРеквизит(Объект, "Карточка") Тогда
		Если (НЕ Объект.Карточка.Пустая()) И (Объект.Карточка.Объект <> Объект.Контрагент) Тогда
			Объект.Карточка = Неопределено;
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			МенеджерОбъекта.КарточкаПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	
	Если ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Чек") Тогда
		Если Объект.Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.КонтактноеЛицо Тогда
			ПараметрыДействия.Вставить("ВыводСообщения",
				Новый Структура(
					"Текст,ПутьКРеквизитуФормы,Использование",
					НСтр("ru = 'Запрещен ввод контрагентов с видом отношений ""Контактное лицо""'"),
					"Объект.Контрагент",
					Истина));
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			Если ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") Тогда
				ПроверитьДоговорВзаиморасчетов(Объект, Объект.Контрагент, Объект.ДоговорВзаиморасчетов, ПараметрыДействия);
				ДоговорВзаиморасчетовПриИзменении(Объект);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
	
	НеПерезаполнятьПоДоговоруВзаиморасчетов = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеПерезаполнятьПоДоговоруВзаиморасчетов", Ложь);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Проверим даты действия договора
	КонтрольКорректностиДатДоговоров =  ПраваИНастройкиПользователя.Значение("КонтрольКорректностиДатДоговоров", Объект);
	
	Если КонтрольКорректностиДатДоговоров<>Перечисления.ВидыКонтроля.НеКонтролировать Тогда
		Если ЗначениеЗаполнено(Объект.Дата) Тогда
			
			КонтрольКорректностиДатДоговоровОшибка = Ложь;
			
			Если ДоговорВзаиморасчетов.ДатаНачала > Объект.Дата Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Дата начала действия договора позже даты документа.'"), Объект.Ссылка, "ДоговорВзаиморасчетов",, КонтрольКорректностиДатДоговоровОшибка);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоговорВзаиморасчетов.ДатаКонца) И ДоговорВзаиморасчетов.ДатаКонца < Объект.Дата Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Дата окончания действия договора ранее даты документа.'"), Объект.ССылка, "ДоговорВзаиморасчетов",, КонтрольКорректностиДатДоговоровОшибка);
			КонецЕсли;
			
			Если КонтрольКорректностиДатДоговоровОшибка И КонтрольКорректностиДатДоговоров = Перечисления.ВидыКонтроля.Запрещать Тогда
				Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
				МенеджерОбъекта.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИзменилиТипЦен = Ложь;
	ИзменилиТипЦенРабот = Ложь;
	
	// Заполним курс валюты взаиморасчетов - если у документа есть соответствующий реквизит.
	Если ЕстьРеквизит(Объект, "КурсВалютыВзаиморасчетов") Тогда
		Основание = ?(ЕстьРеквизит(Объект, "ДокументОснование") И ЗначениеЗаполнено(Объект.ДокументОснование), Объект.ДокументОснование, Неопределено);
		Объект.КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(Объект, ДоговорВзаиморасчетов, Основание);
		МенеджерОбъекта.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Если настройка автоматического изменения валюты и типа цен документа 
	// по договору взаиморасчетов с контрагентом разрешена. 
	
	Если ПраваИНастройкиПользователя.Значение("ИзменятьВалютуПоДоговоруВзаиморасчетов", Объект) Тогда
		
		// Проверим на наличие у документа реквизита типа цен
		Если ЕстьРеквизит(Объект, "ТипЦен") Тогда
			НовыйТипЦен = Справочники.ХозОперации.ПолучитьОсновнойТипЦенДоговора(Объект.ХозОперация, ДоговорВзаиморасчетов);
			Если ЗначениеЗаполнено(НовыйТипЦен) И НЕ Объект.ТипЦен = НовыйТипЦен Тогда
				Объект.ТипЦен  = НовыйТипЦен;
				МенеджерОбъекта.ТипЦенПриИзменении(Объект, ПараметрыДействия);
				Если ПараметрыДействия.Свойство("ТипЦен") Тогда	
					ПараметрыДействия.ТипЦен = НовыйТипЦен;    
				КонецЕсли;
				ИзменилиТипЦен = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// +Альфа-Авто
		
		// Проверим на наличие у документа реквизита типа цен работ
		Если ЕстьРеквизит(Объект, "ТипЦенРабот") Тогда
			НовыйТипЦенРабот = ДоговорВзаиморасчетов.ТипЦенРабот;
			Если ЗначениеЗаполнено(НовыйТипЦенРабот) И НЕ Объект.ТипЦенРабот = НовыйТипЦенРабот И НовыйТипЦенРабот.ДляРабот Тогда
				Объект.ТипЦенРабот  = НовыйТипЦенРабот;
				МенеджерОбъекта.ТипЦенРаботПриИзменении(Объект, ПараметрыДействия);
				Если ПараметрыДействия.Свойство("ТипЦенРабот") Тогда	
					ПараметрыДействия.ТипЦенРабот = НовыйТипЦенРабот;    
				КонецЕсли;
				ИзменилиТипЦенРабот = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// -Альфа-Авто
		
		// Проверим на наличие у документа реквизита валюты
		Если ЕстьРеквизит(Объект, "ВалютаДокумента") И ЗначениеЗаполнено(ДоговорВзаиморасчетов.ВалютаВзаиморасчетов) И Объект.ВалютаДокумента <> ДоговорВзаиморасчетов.ВалютаВзаиморасчетов Тогда
			Объект.ВалютаДокумента = Объект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
			МенеджерОбъекта.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
	КонецЕсли;
	
	// заполним идентификатор гос. контракта, если он есть
	Если ЕстьРеквизит(Объект, "ИдентификаторГосударственногоКонтракта") Тогда
		Объект.ИдентификаторГосударственногоКонтракта = Объект.ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта;
	КонецЕсли;
	
	// определимся со способом зачета авансов
	Если ЕстьРеквизит(Объект, "СпособЗачетаАвансов") И ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") И ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		Объект.СпособЗачетаАвансов = ДоговорВзаиморасчетов.СпособЗачетаАвансов;
	КонецЕсли;
	
	// проверка корректности проекта договора для данного документа
	Если ЕстьРеквизит(Объект, "Проект") И ЗначениеЗаполнено(ДоговорВзаиморасчетов.ОсновнойПроект) И ДоговорВзаиморасчетов.ОсновнойПроект<>Объект.Проект И (НЕ  ПраваИНастройкиПользователя.Значение("КонтролироватьСоответствиеПроектов", Объект) = Перечисления.ВидыКонтроля.НеКонтролировать) Тогда
		Объект.Проект = ДоговорВзаиморасчетов.ОсновнойПроект;
		МенеджерОбъекта.ПроектПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Установка профиля скидок
	Если ЕстьРеквизит(Объект, "Карточка") И ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов.ПрофильСкидки) Тогда
		ОБъект.Карточка = Объект.ДоговорВзаиморасчетов.ПрофильСкидки;
		МенеджерОбъекта.КарточкаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// установим скидку документа
	Если ЕстьРеквизит(Объект, "СкидкаНаценка") И НЕ Объект.ДоговорВзаиморасчетов.ТипСкидкиНаценки.Пустая() Тогда
		Если Не ЕстьРеквизит(Объект, "БлокироватьПерерасчетСкидок") Или Не Объект.БлокироватьПерерасчетСкидок Тогда
			Объект.СкидкаНаценка = Объект.ДоговорВзаиморасчетов.ТипСкидкиНаценки;
			МенеджерОбъекта.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", Истина));
	
	// +Альфа-Авто
	// Установим скидку работ документа
	Если ЕстьРеквизит(Объект, "СкидкаНаценкаРаботы") И НЕ Объект.ДоговорВзаиморасчетов.ТипСкидкиНаценкиРабот.Пустая() Тогда
		Если Не ЕстьРеквизит(Объект, "БлокироватьПерерасчетСкидок") Или Не Объект.БлокироватьПерерасчетСкидок Тогда
			Объект.СкидкаНаценкаРаботы = Объект.ДоговорВзаиморасчетов.ТипСкидкиНаценкиРабот;
			МенеджерОбъекта.СкидкаНаценкаРаботыПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	// -Альфа-Авто
	
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Обработка изменения курса валюты взаиморасчетов документа
	спрВалютаДокумента = Объект.ВалютаДокумента;
	спрВалютаРасчетов  = Объект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	
	// Если валюта документа и валюта взаиморасчетов совпадают, то установим курс документа таким же,
	// как курс взаиморасчетов.
	НеЗаполнятьКурсДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеЗаполнятьКурсДокумента", Ложь);
	
	Если спрВалютаДокумента = спрВалютаРасчетов 
		И ПраваИНастройкиПользователя.Значение("РазрешитьИзменениеКурсаДокумента", Объект)
		И НЕ НеЗаполнятьКурсДокумента Тогда
		
		Объект.КурсДокумента = Объект.КурсВалютыВзаиморасчетов;
		
	КонецЕсли;
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Касса компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Узнаем как точно называется реквизит, т.к. в документах планирования ДДС он называется "Структурная единица".
	КассаКомпании = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("КассаКомпании", Объект, ПараметрыДействия);
	
	// Определим, является ли текущая касса многовалютной
	МноговалютнаяКасса = ?(ТипЗнч(КассаКомпании)=Тип("СправочникСсылка.КассыКомпании"), КассаКомпании.МноговалютнаяКасса, ЛОЖЬ);
	
	// Если касса не многовалютная, то изменим валюту документа и пересчитаем
	Если ЗначениеЗаполнено(КассаКомпании) И (НЕ МноговалютнаяКасса) И (НЕ Объект.ВалютаДокумента=КассаКомпании.ВалютаДенежныхСредств) Тогда
		
		// Получим менеджер текущего переданного документа
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		
		// Установим валюту из кассы
		Объект.ВалютаДокумента = КассаКомпании.ВалютаДенежныхСредств;
		МенеджерОбъекта.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры // КассаКомпанииПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Касса ККМ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаККМПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Проверим нужно ли изменять валюту
	ВалютаЗависитОтКассыККМ = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВалютаЗависитОтКассыККМ", Истина);
	
	// Если касса заполнена, то сменим валюту документа
	Если ВалютаЗависитОтКассыККМ И ЗначениеЗаполнено(Объект.КассаККМ) И (НЕ Объект.ВалютаДокумента=Объект.КассаККМ.ВалютаДенежныхСредств) Тогда
		
		// Получим менеджер текущего переданного документа
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		
		// Установим валюту из кассы
		Объект.ВалютаДокумента = Объект.КассаККМ.ВалютаДенежныхСредств;
		МенеджерОбъекта.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	// Попытаемся получить фискальный регистратор привязанный к ККМ на текущем рабочем месте.
	Если ЗначениеЗаполнено(Объект.КассаККМ) И ЕстьРеквизит(Объект, "ФР") И НЕ ЗначениеЗаполнено(Объект.ФР) Тогда
		Объект.ФР = Справочники.НастройкиРМК.ПолучитьПодключенноеОборудование(Перечисления.ТипыПодключаемогоОборудования.ККТ,
																			  Объект.КассаККМ);
	КонецЕсли;
	
	// Попытаемся получить склад по-умолчанию из ККМ.
	Если ЗначениеЗаполнено(Объект.КассаККМ) И ЕстьРеквизит(Объект, "СкладКомпании") Тогда
		Объект.СкладКомпании = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "СкладКомпании");
	КонецЕсли;

КонецПроцедуры // КассаККМПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтавкаНДСПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Объект.СуммаНДС = Окр((Объект.СуммаДокумента * Объект.СтавкаНДС.Ставка)/(100 + Объект.СтавкаНДС.Ставка), 2);
	
КонецПроцедуры // СтавкаНДСПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Сумма документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ЕстьРеквизит(Объект, "СтавкаНДС") Тогда
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекНаОплату") 
			И Объект.СуммаДокумента = Объект.Товары.Итог("СуммаВсего") И ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			Объект.СуммаНДС = Объект.Товары.Итог("СуммаНДС");
		Иначе
			Объект.СуммаНДС = Окр((Объект.СуммаДокумента * Объект.СтавкаНДС.Ставка)/(100 + Объект.СтавкаНДС.Ставка), 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Карточка = Объект.Карточка;
	Если ЗначениеЗаполнено(Карточка)
		И Карточка.ВидКарточки = Перечисления.ВидыКарточек.ДисконтнаяКарта
		И ТипЗнч(Карточка.Объект) = Тип("СправочникСсылка.Контрагенты")
		И ЕстьРеквизит(Объект, "Контрагент")
		И ЗначениеЗаполнено(Карточка.Объект)
		И Объект.Контрагент <> Карточка.Объект Тогда
		
		Объект.Контрагент = Карточка.Объект;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		МенеджерОбъекта.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	
КонецПроцедуры // КарточкаПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

#КонецОбласти

// Устанавливает в документе признак "Это универсальный документ"
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  ПодразделениеКомпании - СправочникСсылка.ПодразделенияКомпании - подразделение документа
//  ПараметрыДействия - Структура - (необязательный) Набор параметров, использующихся при выполнения операции.
//
Процедура УстановитьПризнакЭтоУниверсальныйДокумент(Объект, ПодразделениеКомпании, ПараметрыДействия = Неопределено) Экспорт
	
	НастройкиПодразделения = ПодразделениеКомпании.НастройкаАвтоматическойУстановкиУниверсальногоДокумента;
	Если НастройкиПодразделения.Количество() = 0 Тогда
		НастройкиПодразделения = НастройкаАвтоматическойУстановкиУниверсальногоДокументаПоУмолчанию();
	КонецЕсли;
	ПараметрыОтбора = Новый Структура("Документ", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект.Ссылка)));
	НайденныеСтроки = НастройкиПодразделения.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Объект.ЭтоУниверсальныйДокумент = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов.
//
// Параметры:
//  Объект - ДокументСсылка - Документ, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьПериодНумерацииДокумента(Ссылка, НачальнаяДатаДокумента, НоваяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = Ссылка.Метаданные().ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров,
	// определяем разность между старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

// Получение подразделения учета договоров для заданного подразделения.
//
// Параметры:
//  ПодразделениеКомпании  - СправочникСсылка.ПодразделениеКомпании - подразделение, для которого нужно получить
//                                                                    подразделение учета договоров.
//
// Возвращаемое значение:
//   СправочникСсылка.ПодразделениеКомпании   - Подразделение учета договоров.
//
Функция ПолучитьПодразделениеУчетаДоговоров(ПодразделениеКомпании) Экспорт
	
	ПодразделениеУчетаДоговоров = УчетныеПолитикиСервер.Значение("ПодразделениеУчетаДоговоров", ,ПодразделениеКомпании);
	
	Если ЗначениеЗаполнено(ПодразделениеУчетаДоговоров) Тогда
		
		Возврат ПодразделениеУчетаДоговоров;
		
	КонецЕсли;
	
	Возврат ПодразделениеКомпании;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработка изменения реквизита "Документ основание"
// 
// Параметры:
// Объект - Данные формы структура или документ объект.
// ПараметрыДействия - Вспомогательная параметры обработки табличной части.
//
Процедура ОбработкаЗаполненияНаОсновании(Объект, ПараметрыДействия)
	
	// Получим признак необходимости перезаполнения документа
	ТребуетсяЗаполнитьНаОсновании = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ТребуетсяЗаполнитьНаОсновании",
		Ложь
	);
	Если ТребуетсяЗаполнитьНаОсновании Тогда
		ПараметрыДействия.ТребуетсяЗаполнитьНаОсновании = Ложь;
		Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
			Документ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект." + Объект.Ссылка.Метаданные().Имя + ""));
		Иначе
			Документ = Объект;
		КонецЕсли;
		
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПолучитьДанныеНаДатуОснования", Ложь) Тогда
			Документ.ДополнительныеСвойства.Вставить("ПолучитьДанныеНаДатуОснования", Истина);
		КонецЕсли;
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "СкопироватьТабличнуюЧастьОснования", Ложь) Тогда
			Документ.ДополнительныеСвойства.Вставить("СкопироватьТабличнуюЧастьОснования", Истина);
		КонецЕсли;
		
		Документ.Заполнить(Объект.ДокументОснование);
		ЗначениеВДанныеФормы(Документ, Объект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполненияНаОсновании()

// Обработка изменения курсов валют при смене даты.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ИзменитьКурсВалютыПриСменеДаты(Объект, ПараметрыДействия)
	
	ТребуетсяИзменитьКурс = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяИзменитьКурс", Ложь);
	
	Если НЕ ТребуетсяИзменитьКурс Тогда
		Возврат;
	КонецЕсли;
	ПараметрыДействия.ТребуетсяИзменитьКурс = ЛОЖЬ;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	ПараметрыДействия.Вставить("НеЗаполнятьКурсДокумента", Истина);
	КурсНаДату = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыйКурс", 0);
	Если Не ПараметрыДействия.Свойство("СтарыйКурс") Тогда
		ПараметрыДействия.Вставить("СтарыйКурс", Объект.КурсДокумента);
	КонецЕсли;
	Если КурсНаДату>0 Тогда
		Объект.КурсДокумента = КурсНаДату;
		МенеджерОбъекта.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// формирование по курсу управленческой валюты
	КурсУпрНаДату = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыйКурсУпр", 0);
	Если КурсУпрНаДату>0 Тогда
		Объект.КурсВалютыУпр = КурсУпрНаДату;
	КонецЕсли;
	
	// формирование по курсу валюты взаиморасчетов
	КурсВзаиморасчетовНаДату = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыйКурсВзаиморасчетов", 0);
	Если КурсВзаиморасчетовНаДату>0 Тогда
		Объект.КурсВалютыВзаиморасчетов = КурсВзаиморасчетовНаДату;
		МенеджерОбъекта.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыДействия.Удалить("НеЗаполнятьКурсДокумента");
	
КонецПроцедуры

// Перезаполнение цен у табличной части
// %
// Параметры:
// Объект - Данные формы структура или документ объект.
// ПараметрыДействия - Вспомогательная параметры обработки табличной части.
Процедура ОбработкаПересчетаСуммыДокумента(Объект, ПараметрыДействия)
	
	// Получим признаки необходимости совершить пересчет суммовых показателей документа.
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	ВозможенПересчетСуммы = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПересчетСуммы",         ИСТИНА);
	
	// Прекращаем обработку, если пересчет не требуется
	Если НЕ(ВозможенПересчетСуммы И (ТребуетсяУстановкаЦен ИЛИ ТребуетсяПересчетЦен)) Тогда
		Возврат;
	КонецЕсли;
	
	// Сбрасываем признаки необходимости пересчета
	Если ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") Тогда
		ПараметрыДействия.ТребуетсяУстановкаЦен = ЛОЖЬ;
	КонецЕсли;
	Если ПараметрыДействия.Свойство("ТребуетсяПересчетЦен") Тогда
		ПараметрыДействия.ТребуетсяПересчетЦен  = ЛОЖЬ;
	КонецЕсли;
	
	// Получим признаки возможности пересчета суммовых показателей объекта
	ЕстьТабличнаяЧасть           = ЕстьРеквизит(Объект,, "Товары");
	ЕстьТабличнаяЧастьАвто       = ЕстьРеквизит(Объект,, "Автомобили");
	ЕстьТабличнаяЧастьСотрудники = ЕстьРеквизит(Объект,, "Сотрудники"); 
	ЕстьТабличнаяЧастьРасходы	 = ЕстьРеквизит(Объект,, "Расходы");
	ПересчетСуммСотрудники       = ЕстьТабличнаяЧастьСотрудники И ЕстьРеквизит(Объект, "БазоваяСумма", "Сотрудники");
	ПересчетЦеныТабличнойЧасти   = ЕстьТабличнаяЧасть И ЕстьРеквизит(Объект, "Цена", "Товары");
	ПересчетСуммыДокумента       = (НЕ ЕстьТабличнаяЧасть) И ЕстьРеквизит(Объект, "СуммаДокумента");
	ПересчетСуммСписанияТЧ       = ЕстьТабличнаяЧасть И ЕстьРеквизит(Объект, "СуммаСписания", "Товары");
	ПересчетСуммСписанияТЧАвто   = ЕстьТабличнаяЧастьАвто И ЕстьРеквизит(Объект, "СуммаСписания", "Автомобили");
	ПересчетСуммРасходыТЧ		 = ЕстьТабличнаяЧастьРасходы И ЕстьРеквизит(Объект, "Цена", "Расходы") И ЕстьРеквизит(Объект, "ЕстьСчетФактура", "Расходы") ; 
	ТребуетсяПересчетСуммСписания = ПересчетСуммСписанияТЧ ИЛИ ПересчетСуммСписанияТЧАвто;
	
	// Прекращаем обработку события, если пересчет не нужен
	Если НЕ(ПересчетЦеныТабличнойЧасти ИЛИ ПересчетСуммыДокумента) И НЕ ТребуетсяПересчетСуммСписания Тогда
		Возврат;
	КонецЕсли;
	
	// Определим менеджер текущего объекта
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Если ТребуетсяУстановкаЦен И ПересчетЦеныТабличнойЧасти Тогда
		
		// Запретим перерасчет скидок
		ПерерасчитатьСкидки = Ложь;
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
			ПерерасчитатьСкидки = Истина;
			ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		КонецЕсли;
		
		// Выполняем установку новых цен
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			ОбработкаТабличнойЧастиТовары.УстановитьЦены(Объект, СтрокаТовары, ПараметрыДействия);
			МенеджерОбъекта.ТоварыЦенаПриИзменении(Объект, СтрокаТовары, ПараметрыДействия);
		КонецЦикла;
		
		// Пересчитаем скидки
		Если ПерерасчитатьСкидки Тогда
			ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
		КонецЕсли;
		
		Если ПересчетСуммРасходыТЧ Тогда 
			Для Каждого СтрокаРасходы Из Объект.Расходы Цикл
				Если СтрокаРасходы.ЕстьСчетФактура Тогда 
					МенеджерОбъекта.РасходыЦенаПриИзменении(Объект, СтрокаРасходы, ПараметрыДействия); 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		// Заполним итоговые показатели
		ИтогиОперации = МенеджерОбъекта.РассчитатьИтогиОперации(Объект);
		ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='При пересчете валюты обнаружен нулевой курс валюты.'"), Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		
		// Запретим перерасчет скидок
		ПерерасчитатьСкидки = Ложь;
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
			ПерерасчитатьСкидки = Истина;
			ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		КонецЕсли;
		
		Если ПересчетЦеныТабличнойЧасти Тогда
			
			ЕстьСкидкиСтроки = ЕстьРеквизит(Объект, "СуммаСкидкиСтроки", "Товары");
			ЕстьСкидкаШапки = ЕстьРеквизит(Объект, "СкидкаНаценка");
			ЕстьЦенаБазовая = ЕстьРеквизит(Объект, "ЦенаБазовая", "Товары");
			ЕстьСуммаСписания = ЕстьРеквизит(Объект, "СуммаСписания", "Товары");
			ЕстьСуммаСписанияБезНДС = ЕстьРеквизит(Объект, "СуммаСписанияБезНДС", "Товары");
			
			// Пересчитываем цены и скидки по новому коэффициенту
			Для Каждого СтрокаТовары Из Объект.Товары Цикл
				СтрокаТовары.Цена = Окр(СтрокаТовары.Цена * КоэффициентСоотношенияКурсов, 2);
				
				Если ЕстьСкидкиСтроки Тогда
					СтрокаТовары.СуммаСкидкиСтроки = Окр(СтрокаТовары.СуммаСкидкиСтроки * КоэффициентСоотношенияКурсов, 2);
				КонецЕсли;
				
				Если ЕстьСкидкаШапки Тогда
					СтрокаТовары.СуммаСкидки = Окр(СтрокаТовары.СуммаСкидки * КоэффициентСоотношенияКурсов, 2);
				КонецЕсли;	
				
				Если ЕстьЦенаБазовая Тогда
					СтрокаТовары.ЦенаБазовая = Окр(СтрокаТовары.ЦенаБазовая * КоэффициентСоотношенияКурсов, 2);
				КонецЕсли;
				
				Если ЕстьСуммаСписания Тогда
					СтрокаТовары.СуммаСписания = Окр(СтрокаТовары.СуммаСписания * КоэффициентСоотношенияКурсов, 2);
				КонецЕсли;	
				
				Если ЕстьСуммаСписанияБезНДС Тогда
					СтрокаТовары.СуммаСписанияБезНДС = Окр(СтрокаТовары.СуммаСписанияБезНДС * КоэффициентСоотношенияКурсов, 2);
				КонецЕсли;
				
				МенеджерОбъекта.ТоварыЦенаПриИзменении(Объект, СтрокаТовары, ПараметрыДействия);
			КонецЦикла;
			
			// Заполним итоговые показатели
			ИтогиОперации = МенеджерОбъекта.РассчитатьИтогиОперации(Объект);
			ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);
			
		ИначеЕсли ПересчетСуммСотрудники Тогда
			
			// Пересчитываем базовую сумму по новому коэффициенту
			Для Каждого СтрокаСотрудники Из Объект.Сотрудники Цикл
				
				СтрокаСотрудники.БазоваяСумма = Окр(СтрокаСотрудники.БазоваяСумма * КоэффициентСоотношенияКурсов, 2);
				МенеджерОбъекта.СотрудникиБазоваяСуммаПриИзменении(Объект, СтрокаСотрудники, ПараметрыДействия);
				
			КонецЦикла;
			
		ИначеЕсли ПересчетСуммСписанияТЧ Тогда
			
			ЕстьЦенаРозничная = ЕстьРеквизит(Объект, "ЦенаРозничная", "Товары");
			ЕстьСуммаРозничная = ЕстьРеквизит(Объект, "СуммаРозничная", "Товары");
			ЕстьСуммаСписанияБезНДС = ЕстьРеквизит(Объект, "СуммаСписанияБезНДС", "Товары");
			Для Каждого СтрокаТовары Из Объект.Товары Цикл
				СтрокаТовары.СуммаСписания = Окр(СтрокаТовары.СуммаСписания * КоэффициентСоотношенияКурсов, 2);
				Если ЕстьСуммаСписанияБезНДС Тогда
					СтрокаТовары.СуммаСписанияБезНДС = Окр(СтрокаТовары.СуммаСписанияБезНДС * КоэффициентСоотношенияКурсов, 2);
				КонецЕсли;
				Если ЕстьЦенаРозничная Тогда
					СтрокаТовары.ЦенаРозничная = Окр(СтрокаТовары.ЦенаРозничная * КоэффициентСоотношенияКурсов, 2);
				КонецЕсли;
				Если ЕстьСуммаРозничная Тогда
					СтрокаТовары.СуммаРозничная = Окр(СтрокаТовары.СуммаРозничная * КоэффициентСоотношенияКурсов, 2);
				КонецЕсли;
			КонецЦикла;
			Если ПересчетЦеныТабличнойЧасти ИЛИ ПересчетСуммыДокумента Тогда
				Объект.СуммаДокумента = Окр(Объект.СуммаДокумента * КоэффициентСоотношенияКурсов, 2);
				МенеджерОбъекта.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
			Иначе
				Возврат;
			КонецЕсли;
		ИначеЕсли ПересчетСуммСписанияТЧАвто Тогда
			
			ЕстьСуммаСписанияБезНДС = ЕстьРеквизит(Объект, "СуммаСписанияБезНДС", "Автомобили");
			Для Каждого СтрокаАвто Из Объект.Автомобили Цикл
				СтрокаАвто.СуммаСписания = Окр(СтрокаАвто.СуммаСписания * КоэффициентСоотношенияКурсов, 2);
				Если ЕстьСуммаСписанияБезНДС Тогда
					СтрокаАвто.СуммаСписанияБезНДС = Окр(СтрокаАвто.СуммаСписанияБезНДС * КоэффициентСоотношенияКурсов, 2);
				КонецЕсли;
			КонецЦикла;
			Если ПересчетЦеныТабличнойЧасти ИЛИ ПересчетСуммыДокумента Тогда
				Объект.СуммаДокумента = Окр(Объект.СуммаДокумента * КоэффициентСоотношенияКурсов, 2);
				МенеджерОбъекта.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Объект.СуммаДокумента = Окр(Объект.СуммаДокумента * КоэффициентСоотношенияКурсов, 2);
			МенеджерОбъекта.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
		// Пересчитаем скидки
		Если ПерерасчитатьСкидки Тогда
			ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПересчетаСуммыДокумента()

Процедура ПроверитьДоговорВзаиморасчетов(Объект, Контрагент, ДоговорВзаиморасчетов, ПараметрыДействия)
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Нет договора
	Если ДоговорВзаиморасчетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Договор не нужно перевыбирать
	Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) И ДоговорВзаиморасчетов.Владелец=Контрагент И Справочники.ХозОперации.ДоговорСоответствуетХозОперации(Объект.ХозОперация, ДоговорВзаиморасчетов) И ДоговорВзаиморасчетов.ПодразделениеКомпании = Объект.ПодразделениеКомпании Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ТипЦен = Неопределено;
		ПараметрыДействия.Свойство("ТипЦен", ТипЦен);
		
		ТипЦенРабот = Неопределено;
		ПараметрыДействия.Свойство("ТипЦенРабот", ТипЦенРабот);
		
		ХозОперация = Объект.ХозОперация;
		ВидДоговора = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВидДоговора", Неопределено);
		Если ВидДоговора = Неопределено Тогда
			ВидДоговора = Справочники.ХозОперации.ПолучитьВидДоговора(ХозОперация);
		КонецЕсли;
		
		Если ТипЦен = Неопределено Тогда
			ПараметрыДействия.Вставить("ТипЦен", ?(ЕстьРеквизит(Объект, "ТипЦен"), Объект.ТипЦен, Справочники.ТипыЦен.ПустаяСсылка()));
		КонецЕсли;
		
		Если ТипЦенРабот = Неопределено Тогда
			ПараметрыДействия.Вставить("ТипЦенРабот", ?(ЕстьРеквизит(Объект, "ТипЦенРабот"), Объект.ТипЦенРабот, Справочники.ТипыЦен.ПустаяСсылка()));
		КонецЕсли;
		
		Объект.ДоговорВзаиморасчетов = ПолучитьДоговорВзаиморасчетов(Контрагент, ВидДоговора, Объект, ПараметрыДействия);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		МенеджерОбъекта.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	Иначе
		// если контрагент не указан, то очистим договор
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		МенеджерОбъекта.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКурсДокумента(Объект, ПараметрыДействия)
	
	НовыйКурсДокумента = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	
	Если Объект.КурсДокумента <> НовыйКурсДокумента Тогда
		
		ОбъектЗаполнен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", Истина);
		ОбъектЗаполненАвтоработами = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполненАвтоработами", Ложь);
		ПараметрыДействия.Вставить("ТребуетсяПересчетЦен", ОбъектЗаполнен ИЛИ ОбъектЗаполненАвтоработами);
		ПараметрыДействия.Вставить("СтарыйКурс", Объект.КурсДокумента);
		Объект.КурсДокумента = НовыйКурсДокумента;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		МенеджерОбъекта.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументыПоВидамДеятельности()
	
	Результат = Новый Структура;
	Результат.Вставить("Прочее", Новый Массив);
	Результат.Вставить("Универсальный", Новый Массив);
	Результат.Вставить("Сервис", Новый Массив);
	Результат.Вставить("Салон", Новый Массив);
	Результат.Вставить("Аренда", Новый Массив);
	ВидыДеятельности = Справочники.ДоговорыВзаиморасчетов.ПолучитьМакет("ВидыДеятельности");
	
	Для Каждого КлючЗначение Из Результат Цикл
		
		ТекущаяОбласть = ВидыДеятельности.ПолучитьОбласть(КлючЗначение.Ключ);
		
		Для Сч = 1 По ТекущаяОбласть.ВысотаТаблицы Цикл
			
			КлючЗначение.Значение.Добавить(ТекущаяОбласть.Область(Сч, 1, Сч, 1).Текст);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДоговор(Контрагент, ВидДоговора, ПараметрыСоздания, Объект)
	
	ДанныеКЗаписи = Новый Структура("ВалютаДокумента");
	
	Если Объект <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеКЗаписи, Объект);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеКЗаписи.ВалютаДокумента) Тогда
		
		ДанныеКЗаписи.ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		
	КонецЕсли;
	
	ВидОперации = Справочники.ДоговорыВзаиморасчетов.ПолучитьВидОперации(ВидДоговора);
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДоговора.Продажа") Тогда
		ТипЦен =  ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", Объект);
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДоговора.Покупка") Тогда
		ТипЦен =  ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупки", Объект);
	КонецЕсли;
	ТипЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыСоздания, "ТипЦен", ТипЦен);
	
	ТипЦенРабот =  ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенРабот", Объект);
	ТипЦенРабот = ПолучитьЗначениеПараметраСтруктуры(ПараметрыСоздания, "ТипЦенРабот", ТипЦенРабот);
	
	НовыйДоговор = Справочники.ДоговорыВзаиморасчетов.СоздатьЭлемент();
	НовыйДоговор.Заполнить(Неопределено);
	НовыйДоговор.УстановитьНовыйКод();
	НовыйДоговор.Владелец = Контрагент;
	НовыйДоговор.Организация = ПараметрыСоздания.Организация;
	НовыйДоговор.ПодразделениеКомпании = ПолучитьПодразделениеУчетаДоговоров(ПараметрыСоздания.ПодразделениеКомпании);
	НовыйДоговор.ВидДоговора = ВидДоговора;
	// Обусловлено автоматическим созданием договоров.
	НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.ВиртуальныйДоговор;
	НовыйДоговор.ДляАвтосалона = ПараметрыСоздания.ДляАвтосалона;
	НовыйДоговор.ДляАвтосервиса = ПараметрыСоздания.ДляАвтосервиса;
	НовыйДоговор.Внутренний = ПараметрыСоздания.Внутренний;
	// Аренда автомобилей
	НовыйДоговор.ДляАренды = ПараметрыСоздания.ДляАренды;
	НовыйДоговор.ДляДепозитаАренды = ПараметрыСоздания.ДляДепозитаАренды;
	НовыйДоговор.ВалютаВзаиморасчетов = ДанныеКЗаписи.ВалютаДокумента;
	// Убрана обязательная дата начала договора. Обусловлено автоматическим созданием договоров,
	// где пользователь не управляет датой начала.
	// НовыйДоговор.ДатаНачала = ПараметрыСоздания.Дата;
	НовыйДоговор.Основной = Истина;
	НовыйДоговор.ТипЦен = ТипЦен;
	НовыйДоговор.ТипЦенРабот = ТипЦенРабот;
	НовыйДоговор.ПроцентПредоплаты = -1;
	НовыйДоговор.СпособЗачетаАвансов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыСоздания.Организация,
		"СпособЗачетаАвансов"
	);
	НовыйДоговор.ОтменаКонтроляСуммыКредита = УчетныеПолитикиСервер.Значение(
		"ОтменаКонтроляСуммыКредита",
		ПараметрыСоздания.Дата,
		ПараметрыСоздания.ПодразделениеКомпании	
	);
	НовыйДоговор.ЕдиницаИзмеренияАвтоработВПечатныхФормах = УчетныеПолитикиСервер.Значение(
		"ЕдиницаИзмеренияАвтоработВПечатныхФормах", 
		ПараметрыСоздания.Дата,
		ПараметрыСоздания.ПодразделениеКомпании
	);
	
	НовыйДоговор.Наименование = Справочники.ДоговорыВзаиморасчетов.СформироватьНаименованиеПоУмолчанию(НовыйДоговор);
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСоздания, "ОбменДаннымиЗагрузка", Ложь) Тогда
		НовыйДоговор.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	Попытка
		
		НовыйДоговор.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр(
				"ru = 'Ошибка при записи элемента справочника ""Договоры взаиморасчетов""'",
				ОбщегоНазначения.КодОсновногоЯзыка()
			),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
	КонецПопытки;
	
	Возврат НовыйДоговор.Ссылка;
	
КонецФункции

// Устанавливает патент в документе, если используется ПСН.
// 
// Параметры:
// Объект - Данные формы структура или документ объект.
// ПараметрыДействия - Вспомогательная параметры обработки табличной части.
Процедура УстановитьПатентПоОрганизации(Объект, ПараметрыДействия = Неопределено) Экспорт

	Если Не ЕстьРеквизит(Объект, "Патент") Тогда
		Возврат;
	КонецЕсли;

	ПодразделениеДокумента = ?(ЕстьРеквизит(Объект, "ПодразделениеКомпании"), Объект.ПодразделениеКомпании, 
		ПараметрыСеанса.ПодразделениеКомпании);
	ОрганизацияДокумента   = ?(ЕстьРеквизит(Объект, "Организация"), Объект.Организация, ПараметрыСеанса.Организация);
	НаДату = ?(ЕстьРеквизит(Объект, "Дата"), Объект.Дата, ТекущаяДатаСеанса());	
	ВидНалога = УчетныеПолитикиСервер.Значение("ВидНалога",	НаДату, ОрганизацияДокумента, Ложь);

	ПатентПоУмолчанию = Справочники.Патенты.ПустаяСсылка();

	Если ВидНалога = Перечисления.ВидыНалогов.ПСН Тогда 

		// Вначале смотрим по подразделению, вдруг заполнен.
		ПатентПоУмолчанию = УчетныеПолитикиСервер.Значение("ПатентПоУмолчанию", НаДату, ПодразделениеДокумента);
		
		Если Не ЗначениеЗаполнено(ПатентПоУмолчанию) Тогда
			ПатентПоУмолчанию = УчетныеПолитикиСервер.Значение("ПатентПоУмолчанию", НаДату, ОрганизацияДокумента);	
		КонецЕсли;

	КонецЕсли;

	Объект.Патент = ПатентПоУмолчанию;

КонецПроцедуры

Функция НастройкаАвтоматическойУстановкиУниверсальногоДокументаПоУмолчанию()
	
	ДанныеДокументов = Автосервис.ДокументыСПризнакомУниверсальныйДокумент();
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("Значение");
	
	Для Каждого ТекущаяСтрока Из ДанныеДокументов Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Документ = ТекущаяСтрока.Документ;
		НоваяСтрока.Значение = ТекущаяСтрока.ЭтоПоступление;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
