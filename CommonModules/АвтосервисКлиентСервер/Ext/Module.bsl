///////////////////////////////////////////////////////////////////////////////
// Модуль для работы с блоком документов "Заказ-наряд", "Заявка на ремонт",  //
// "Сводный ремонтный заказ", "Запись на ремонт"                             //
///////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НачисленияСотрудникам

// Шаблон заполнения параметров расчета начислений сотрудников.
// 
// Возвращаемое значение:
//  Структура - Для последующего заполнения перед расчетом начислений.
//
Функция ДанныеАвтоработыДляРасчетаНачисления() Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ПараметрыРасчета.Вставить("ВалютаДокумента", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	ПараметрыРасчета.Вставить("КурсДокумента", 1);
	ПараметрыРасчета.Вставить("ВалютаРегл", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	ПараметрыРасчета.Вставить("КурсРегл", 1);
	ПараметрыРасчета.Вставить("КоличествоНормочасов", 0);
	ПараметрыРасчета.Вставить("СуммаБезНДС", 0);
	ПараметрыРасчета.Вставить("ИдентификаторРаботы", "");
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Расчет суммы начислений строке исполнителей.
//
// Параметры:
//  СтрокаИсполнителя	 - ДанныеФормыЭлементКоллекции - Текущая строка исполнителя для расчета.
//  ДанныеАвтоработы	 - Структура - Дополнительные параметры, которые необходимы для расчета суммы.
//
Процедура РассчитатьСуммуНачисленияСотрудника(СтрокаИсполнителя, ДанныеАвтоработы) Экспорт
	
	// Индикатор того, что сумму начислений не надо устанавливать
	Если ДанныеАвтоработы = Неопределено
		ИЛИ СтрокаИсполнителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаИсполнителя.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчета.ПоНормочасам") Тогда
		СтрокаИсполнителя.Начислено =
			ДанныеАвтоработы.КоличествоНормочасов * СтрокаИсполнителя.Процент / 100 * СтрокаИсполнителя.ПараметрРасчетаНачисления;
	ИначеЕсли СтрокаИсполнителя.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчета.Суммой") Тогда
		СтрокаИсполнителя.Начислено = СтрокаИсполнителя.ПараметрРасчетаНачисления;
	ИначеЕсли СтрокаИсполнителя.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчета.Процентом") Тогда
		СтрокаИсполнителя.Начислено =
			ДанныеАвтоработы.СуммаБезНДС
			* СтрокаИсполнителя.Процент / 100
			* СтрокаИсполнителя.ПараметрРасчетаНачисления / 100;
	КонецЕсли;
	
КонецПроцедуры

// Перерасчет суммы начислений только для указанного способа расчетов.
//
// Параметры:
//  Исполнители		 - ДанныеФормыЭлементКоллекции - Табличная часть "Исполнители" документа.
//  ДанныеАвтоработы - Структура - Параметры для расчета суммы начислений.
//  СпособРасчета	 - Перечисление.СпособыРасчета - Способ расчета, для которых выполнить перерасчет.
//
Процедура ПересчитатьСуммуНачисленийСУчетомСпособа(Исполнители, ДанныеАвтоработы, СпособРасчета = Неопределено) Экспорт
	
	Для Каждого СтрокаИсполнителя Из Исполнители Цикл
		
		Если СпособРасчета = Неопределено
			ИЛИ СтрокаИсполнителя.СпособРасчета = СпособРасчета Тогда
			РассчитатьСуммуНачисленияСотрудника(СтрокаИсполнителя, ДанныеАвтоработы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверка заполнения полей настройки расчетов начислений сотрудникам.
//
// Параметры:
//  Исполнители	 - ДанныеФормыЭлементКоллекции - Табличная часть "Исполнители" документа.
//  Автоработы	 - ДанныеФормыЭлементКоллекции - Табличная часть "Автоработы" документа.
//  Отказ		 - Булево - Признак того, что имеются ошибки.
//
Процедура ПроверитьЗаполнениеПараметровРасчетаНачислений(Исполнители, Автоработы = Неопределено, Отказ = Ложь) Экспорт
	
	// Оповестим пользователя если указали сумму начислений без вида
	Для Каждого СтрокаИсполнителя Из Исполнители Цикл
		
		Если СтрокаИсполнителя.Начислено <> 0 Тогда
			
			НезаполненныеПоля = Новый Массив;
			Если НЕ ЗначениеЗаполнено(СтрокаИсполнителя.ВидНачисления) Тогда
				НезаполненныеПоля.Добавить(НСтр("ru = '""Вид начисления""'"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаИсполнителя.ПараметрРасчетаНачисления) Тогда
				НезаполненныеПоля.Добавить(НСтр("ru = '""Параметр расчета начисления""'"));
			КонецЕсли;
			
			Если НезаполненныеПоля.Количество() > 0 Тогда
				ТекстСообщения = Новый Массив;
				Если Автоработы <> Неопределено Тогда
					СтрокиАвторабот = Автоработы.НайтиСтроки(
						Новый Структура("ИдентификаторРаботы", СтрокаИсполнителя.ИдентификаторРаботы));
					ТекстСообщения.Добавить(СтрШаблон(НСтр("ru = 'Авторабота %1'"), СтрокиАвторабот[0].Авторабота));
				КонецЕсли;
				ТекстСообщения.Добавить(СтрШаблон(НСтр("ru = 'В строке исполнителя %1'"), СтрокаИсполнителя.Исполнитель));
				Если НезаполненныеПоля.Количество() > 1 Тогда
					ТекстСообщения.Добавить(НСтр("ru = 'не заполнены поля: '"));
				Иначе
					ТекстСообщения.Добавить(НСтр("ru = 'не заполнено поле '"));
				КонецЕсли;
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст =СтрСоединить(ТекстСообщения, " ") + СтрСоединить(НезаполненныеПоля, ", "); 
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти