///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Подключение 1С-Такском".
// ОбщийМодуль.Подключение1СТакскомПереопределяемый.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Переопределяет разрешение использовать функции сервиса 1С-Такском
// (получение уникального идентификатора абонента, открытие личного кабинета).
// Если необходимо запретить использование функций подключения 1С-Такском,
// тогда параметру Отказ необходимо присвоить значение Истина;
//
// Параметры:
//	Отказ - Булево - Истина, если использование функций 1С-Такском запрещено;
//		Ложь - в противном случае;
//		Значение по умолчанию - Ложь;
//
// Пример:
//	Если <Выражение> Тогда
//		Отказ = Истина;
//	КонецЕсли;
//
//@skip-warning
Процедура ИспользоватьСервис1СТакском(Отказ) Экспорт
	
	Отказ = Истина;
	
КонецПроцедуры

// Процедура возвращает данные для заполнения заявки на получение уникального
// идентификатора абонента, добавления сертификата абонента.
//
// Параметры:
//	Организация - Произвольный - ссылка на элемент справочника Организации;
//	ДанныеОрганизации - Структура - данные об организации:
//		* Индекс - Строка - почтовый индекс организации;
//		* Регион - Строка - код региона организации;
//		* Район - Строка - Район;
//		* Город - Строка - Город;
//		* НаселенныйПункт - Строка - населенный пункт расположения организации;
//		* Улица - Строка - Улица;
//		* Дом - Строка - Дом;
//		* Корпус - Строка - Корпус;
//		* Квартира - Строка - Квартира;
//		* Телефон - Строка - телефон организации;
//		* Наименование - Строка - наименование организации;
//		* ИНН - Строка - ИНН организации;
//		* КПП - Строка - КПП организации;
//		* ОГРН - Строка - ОГРН организации;
//		* КодИМНС - Строка - код ИМНС организации;
//		* ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//		* Фамилия - Строка - фамилия руководителя;
//		* Имя - Строка - имя руководителя;
//		* Отчество - Строка - отчество руководителя;
//
//@skip-warning
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт
	
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Организация, 
		"НаименованиеПолное, ИНН, КПП, ОГРН, КодИМНС, ФормаСобственности, Фамилия, Имя, Отчество"
	);
	//
	ДанныеОрганизации.Вставить("Наименование", СвойстваОрганизации.НаименованиеПолное);
	ДанныеОрганизации.Вставить("ИНН"         , СвойстваОрганизации.ИНН);
	ДанныеОрганизации.Вставить("КПП"         , СвойстваОрганизации.КПП);
	ДанныеОрганизации.Вставить("ОГРН"        , СвойстваОрганизации.ОГРН);
	ДанныеОрганизации.Вставить("КодИМНС"     , СвойстваОрганизации.КодИМНС);
	ДанныеОрганизации.Вставить("Фамилия"     , СвойстваОрганизации.Фамилия);
	ДанныеОрганизации.Вставить("Имя"         , СвойстваОрганизации.Имя);
	ДанныеОрганизации.Вставить("Отчество"    , СвойстваОрганизации.Отчество);
	
	Если СвойстваОрганизации.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
		
		ДанныеОрганизации.Вставить("ЮрФизЛицо", "ФизЛицо");
		
	Иначе
		
		ДанныеОрганизации.Вставить("ЮрФизЛицо", "ЮрЛицо");
		
	КонецЕсли;
	ДанныеОрганизации.Вставить("Индекс"         , "");
	ДанныеОрганизации.Вставить("Регион"         , "");
	ДанныеОрганизации.Вставить("Район"          , "");
	ДанныеОрганизации.Вставить("Город"          , "");
	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
	ДанныеОрганизации.Вставить("Улица"          , "");
	ДанныеОрганизации.Вставить("Дом"            , "");
	ДанныеОрганизации.Вставить("Корпус"         , "");
	ДанныеОрганизации.Вставить("Квартира"       , "");
	
	АдресаОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		ТекущаяДатаСеанса(),
		Ложь
	);
		
	Если АдресаОрганизации.Количество() > 0 Тогда
		
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(АдресаОрганизации[0].ЗначенияПолей);
		КодРегиона = АдресныйКлассификатор.КодРегионаПоНаименованию(СокрЛП(СведенияОбАдресе.Регион));
		
		ДанныеОрганизации.Индекс          = СведенияОбАдресе.Индекс;
		ДанныеОрганизации.Регион          = Строка(КодРегиона);
		ДанныеОрганизации.Район           = СведенияОбАдресе.Район;
		ДанныеОрганизации.Город           = СведенияОбАдресе.Город;
		ДанныеОрганизации.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт;
		ДанныеОрганизации.Улица           = СведенияОбАдресе.Улица;
		
		Если СведенияОбАдресе.Здание.ТипЗдания = "Дом" Тогда
			
			ДанныеОрганизации.Вставить("Дом", СведенияОбАдресе.Здание.Номер);
			
		КонецЕсли;
		
		Если СведенияОбАдресе.Корпуса.Количество() > 0 Тогда
			
			ДанныеОрганизации.Вставить("Корпус", СведенияОбАдресе.Корпуса[0].Номер);
			
		КонецЕсли;
		
		Если СведенияОбАдресе.Помещения.Количество() > 0 Тогда
			
			ДанныеОрганизации.Вставить("Квартира", СведенияОбАдресе.Помещения[0].Номер);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, 
		ТекущаяДатаСеанса()
	);
	ДанныеОрганизации.Вставить("Телефон", ТелефонОрганизации);
	
КонецПроцедуры

#КонецОбласти
