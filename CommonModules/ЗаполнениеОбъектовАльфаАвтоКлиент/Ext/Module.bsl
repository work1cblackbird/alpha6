#Область ПрограммныйИнтерфейс

// Начальная точка входа для обработки команд заполнения документов
//
// Параметры:
//  Ссылка     - Ссылка    - Ссылка на объект.
//  Обработчик - Структура - Параметры выполнения команды.
//
Процедура ВыполнитьПодключаемуюКоманду(Ссылка, Обработчик) Экспорт
	
	ПараметрыОпросов = Новый Структура();
	ПараметрыОпросов.Вставить("КоллекцияОпераций", КоллекцияОперацийДляОбработчикаЗаполнения(Обработчик));
	ПараметрыОпросов.Вставить("ПараметрыДействия", Новый Структура());
	ПараметрыОпросов.Вставить("КомандаЗаполнения", Обработчик.ОписаниеКоманды);
	ПараметрыОпросов.Вставить("Форма", Обработчик.Форма);
	
	ОбработчикСобытияОкончанияОпроса = Новый ОписаниеОповещения("ПродолжитьВыполнятьПодключаемуюКоманду",
		ЗаполнениеОбъектовАльфаАвтоКлиент, Обработчик.ОписаниеКоманды.Идентификатор);
	ПараметрыОпросов.Вставить("ОбработчикСобытия", ОбработчикСобытияОкончанияОпроса);
	
	ПоследовательныеОперацииКлиент.ВыполнитьПоследовательно(ПараметрыОпросов);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура НачатьОчисткуТабличнойЧасти(ОбъектЗаполнения, ПараметрыКоманды) Экспорт
	
	ИмяТабличнойЧасти = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ИмяТабличнойЧасти;
	
	Если ПараметрыКоманды.Источник[ИмяТабличнойЧасти].Количество() > 0 Тогда
	
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗавершитьОчисткуТабличнойЧасти", ЭтотОбъект, ПараметрыКоманды),
			НСтр("ru = 'Очистить табличную часть?'"),
			РежимДиалогаВопрос.ДаНет
		);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьОчисткуТабличнойЧасти(Ответ, ПараметрыКоманды) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ИмяТабличнойЧасти = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ИмяТабличнойЧасти;
		ПараметрыКоманды.Источник[ИмяТабличнойЧасти].Очистить();
		
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "Форма", Неопределено) <> Неопределено Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеОбработкиЗаполнения",
				ПараметрыКоманды.Форма,
				Новый Структура("ОчисткаТабличнойЧасти,ИмяТабличнойЧасти", Истина, ИмяТабличнойЧасти));
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗаполнениеИзФайла(ОбъектЗаполнения, ПараметрыКоманды) Экспорт
	
	ИмяТабличнойЧасти = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ИмяТабличнойЧасти;
	
	Если ПараметрыКоманды.Источник[ИмяТабличнойЧасти].Количество() > 0 Тогда
	
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПродолжитьЗаполнениеИзФайла", ЭтотОбъект, ПараметрыКоманды),
			НСтр("ru = 'Очистить табличную часть?'"),
			РежимДиалогаВопрос.ДаНет
		);
		
	Иначе
		
		ПродолжитьЗаполнениеИзФайла(КодВозвратаДиалога.Нет, ПараметрыКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьЗаполнениеИзФайла(Ответ, ПараметрыКоманды) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект = ПараметрыКоманды.Источник;
		ИмяТабличнойЧасти = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ИмяТабличнойЧасти;
		
		Объект[ИмяТабличнойЧасти].Очистить();
		
	КонецЕсли;
	
	Если ПараметрыКоманды.Форма.Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Для продолжения необходимо записать документ. Записать?'");
		Оповещение = Новый ОписаниеОповещения(
			"ПродолжитьЗаполнениеИзФайлаПослеВопросаСохранения",
			ЗаполнениеОбъектовАльфаАвтоКлиент,
			ПараметрыКоманды);
		
		ПоказатьВопрос(
			Оповещение,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru='Необходимо записать документ'"));
		
	Иначе
		ПродолжитьЗаполнениеИзФайлаПослеВопросаСохранения(КодВозвратаДиалога.Да, ПараметрыКоманды);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьЗаполнениеИзФайлаПослеВопросаСохранения(Ответ, ПараметрыКоманды) Экспорт
	
	Форма = ПараметрыКоманды.Форма;
	Объект = ПараметрыКоманды.Источник;
	ИмяТабличнойЧасти = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ИмяТабличнойЧасти;
	
	Если НЕ (Ответ = КодВозвратаДиалога.Да И Форма.Записать())
		ИЛИ Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Параметры = Новый Структура();
	Параметры.Вставить("РежимЗагрузки", 3);
	Параметры.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", Ложь);
	Параметры.Вставить("СсылкаИсточника", Объект.Ссылка);
	Параметры.Вставить("ТабличнаяЧастьИсточника", ИмяТабличнойЧасти);
	Параметры.Вставить("Контрагент");
	
	Если Объект.Свойство("Контрагент") Тогда
		
		Параметры.Вставить("Контрагент", Объект.Контрагент);
		
	КонецЕсли;
	
	ОбработчикСобытия = Новый ОписаниеОповещения("ЗавершитьЗаполнениеИзФайла", ЗаполнениеОбъектовАльфаАвтоКлиент,
		ПараметрыКоманды);
	
	РезультатОткрытия = ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзТабличногоДокумента.Форма.ФормаПомощник",
		Параметры,
		Форма,
		,
		,
		,
		ОбработчикСобытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

	Если РезультатОткрытия = Неопределено Или Не РезультатОткрытия.Открыта() Тогда
		
		ВыполнитьОбработкуОповещения(ОбработчикСобытия, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьЗаполнениеИзФайла(Результат, ПараметрыКоманды) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Форма = ПараметрыКоманды.Форма;
		Объект = Неопределено;
		ПолучитьОсновнойОбъектФормы(Форма, Объект);
		
		ЗаполнениеОбъектовАльфаАвтоВызовСервера.ЗагрузкаИзФайла(Объект, Результат);
		КопироватьДанныеФормы(Объект, Форма.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьВыполнятьПодключаемуюКоманду(ПараметрыОпросов, ИмяКоманды) Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	
	Для Каждого Параметр Из ПараметрыОпросов.КоллекцияОпераций Цикл
		
		ПараметрыЗаполнения.Вставить(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Форма = ПараметрыОпросов.Форма;
	Объект = Неопределено;
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	КомандаЗаполнения = ПараметрыОпросов.КомандаЗаполнения;
	ИмяТабличнойЧасти = КомандаЗаполнения.ДополнительныеПараметры.ИмяТабличнойЧасти;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыОпросов.КоллекцияОпераций, "ОчиститьТабличнуюЧасть", Ложь) Тогда
		
		Объект[ИмяТабличнойЧасти].Очистить();
		
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ПараметрКоманды", КомандаЗаполнения.ДополнительныеПараметры.ПараметрВыполнения);
	
	ПараметрыВыполнения = ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды();
	
	ИмяКомандыВФорме = КомандаЗаполнения.ИмяВФорме;
	АдресНастроек = Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
	ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(ИмяКомандыВФорме, АдресНастроек);
		
	ПараметрыВыполнения.ОписаниеКоманды = Новый Структура(ОписаниеКоманды);
	ПараметрыВыполнения.Форма = Форма;
	ПараметрыВыполнения.Источник = Объект;
	ПараметрыВыполнения.ЭтоФормаОбъекта = ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура");
	ПараметрыВыполнения.ТребуетсяЗапись = ПараметрыВыполнения.ЭтоФормаОбъекта 
											И ОписаниеКоманды.РежимЗаписи <> "НеЗаписывать";
	ПараметрыВыполнения.ТребуетсяПроведение = (ОписаниеКоманды.РежимЗаписи = "Проводить");
	ПараметрыВыполнения.ТребуетсяРаботаСФайлами = ОписаниеКоманды.ТребуетсяРаботаСФайлами;
	ПараметрыВыполнения.ВызовСервераЧерезОбработкуОповещения = Истина;
	
	Если КомандаЗаполнения.ДополнительныеПараметры.Серверная Тогда 
		
		МассивСтрокИмяФормы = СтрРазделить(ПараметрыОпросов.Форма.ИмяФормы, ".");
		ИмяПроцедуры = "Документы." + МассивСтрокИмяФормы[1] + "." + ИмяКоманды;
		
		СерверныйКонтекст = Новый Структура;
		СерверныйКонтекст.Вставить("ПараметрКоманды", 	Форма.Объект.Ссылка);
		СерверныйКонтекст.Вставить("ИмяКомандыВФорме", 	ИмяКомандыВФорме);
		СерверныйКонтекст.Вставить("Результат",  		Новый Структура);
		
		Если СтрНайти(ИмяКоманды, ".") > 0 Тогда
			ИмяПроцедуры = ИмяКоманды;
		КонецЕсли;
		
		ИзменитьОписаниеКоманды(ИмяКомандыВФорме, АдресНастроек, ПараметрыЗаполнения, ИмяПроцедуры);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПродолжитьВыполнениеКомандыНаСервере", Форма);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СерверныйКонтекст);
		Результат = СерверныйКонтекст.Результат; 

		Если ЗначениеЗаполнено(Результат.Текст) Тогда
			ПоказатьПредупреждение(, Результат.Текст);
		Иначе
			ОбновитьФорму(ПараметрыВыполнения);
		КонецЕсли;	
		
		ИзменитьОписаниеКоманды(ИмяКомандыВФорме, АдресНастроек, , КомандаЗаполнения.Обработчик);
		
	Иначе
		
		Если ЗначениеЗаполнено(КомандаЗаполнения.Идентификатор) Тогда
			МассивПодстрок = СтрРазделить(ОписаниеКоманды.Идентификатор, ".");
			Если МассивПодстрок.Количество() = 1 Тогда
				ПараметрыФормы = ПараметрыФормы(ПараметрыВыполнения, Форма.Объект.Ссылка);
				// АПК:65-выкл ПолучитьФорму используется для вызова обработчика описания оповещения
				КлиентскийМодуль = ПараметрыВыполнения.Форма;
				// АПК:65-вкл
				ИмяПроцедуры = ОписаниеКоманды.Идентификатор;
			Иначе
				КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивПодстрок[0]);
				ИмяПроцедуры = МассивПодстрок[1];
			КонецЕсли;
			ПараметрыЗаполнения.Вставить("Объект", Объект);
			Обработчик = Новый ОписаниеОповещения(ИмяПроцедуры, КлиентскийМодуль, ПараметрыЗаполнения);
			ВыполнитьОбработкуОповещения(Обработчик, Форма.Объект.Ссылка);
		ИначеЕсли ЗначениеЗаполнено(ОписаниеКоманды.ИмяФормы) Тогда
			ПараметрыФормы = ПараметрыФормы(ПараметрыВыполнения, Форма.Объект.Ссылка);
			ОткрытьФорму(ОписаниеКоманды.ИмяФормы, ПараметрыФормы, ПараметрыВыполнения.Форма, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(КомандаЗаполнения.ДополнительныеПараметры, "ЭтоКомандаЗаполнения", Ложь) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбработкиЗаполнения", Форма);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды загрузки из ТСД.
//
// Параметры:
//  Параметры - Структура - параметры выполнения команды
//  ОбработчикРезультата - ОбработкаОповещения - оповещение при завершении команды.
//
Процедура ЗагрузитьИзТСД(Параметры, ПараметрыКоманды) Экспорт
	
	ПараметрыОперации = ОборудованиеТерминалыСбораДанныхКлиентСервер.ПараметрыВыгрузкиВТСД();
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
		ПараметрыКоманды,,
		"",
		Неопределено,
		ПараметрыОперации
	); 
	  
КонецПроцедуры

// Обработчик команды выгрузки в ТСД.
//
// Параметры:
//  Параметры - Структура - параметры выполнения команды
//  ОбработчикРезультата - ОбработкаОповещения - оповещение при завершении команды.
//
Процедура ВыгрузитьВТСД(Параметры, ОбработчикРезультата) Экспорт
	
	Товары = Новый Массив;
	
	Для каждого СтрокаТабличнойЧасти Из ОбработчикРезультата.Источник.Товары Цикл
		НоваяСтрока = ОборудованиеТерминалыСбораДанныхКлиентСервер.ПараметрыСтрокиВыгрузкиВТСД();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		Товары.Добавить(НоваяСтрока);
	КонецЦикла;
	
	ШтрихкодированиеВызовСервера.ЗаполнитьШтрихКодыТоваров(Товары);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьВТСДЗавершение", ЭтотОбъект);
	ПараметрыОперации = ОборудованиеТерминалыСбораДанныхКлиентСервер.ПараметрыВыгрузкиВТСД();
	ПараметрыОперации.Вставить("ТаблицаТоваров", Товары);
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьВыгрузкуДанныеВТСД(
		ОписаниеОповещения,
		Неопределено,
		Неопределено,
		ПараметрыОперации
	);
	
КонецПроцедуры // ВыгрузитьВТСД()

Процедура НачатьЗаполнениеИзДокумента(ОбъектЗаполнения, ПараметрыКоманды) Экспорт
	
	ИмяТабличнойЧасти = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ИмяТабличнойЧасти;
	
	Если ПараметрыКоманды.Источник[ИмяТабличнойЧасти].Количество() > 0 Тогда
	
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПродолжитьЗаполнениеИзДокумента", ЭтотОбъект, ПараметрыКоманды),
			НСтр("ru = 'Очистить табличную часть?'"),
			РежимДиалогаВопрос.ДаНет
		);
		
	Иначе
		
		ПродолжитьЗаполнениеИзДокумента(КодВозвратаДиалога.Нет, ПараметрыКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьЗаполнениеИзДокумента(Ответ, ПараметрыКоманды) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект = ПараметрыКоманды.Источник;
		ИмяТабличнойЧасти = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ИмяТабличнойЧасти;
		
		Объект[ИмяТабличнойЧасти].Очистить();
		
	КонецЕсли;
	
	Если ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.Свойство("ОбработчикОповещения") Тогда
		Обработчик = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ОбработчикОповещения;
		ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.Удалить("ОбработчикОповещения");
	Иначе
		Обработчик = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ПараметрыКоманды.Форма,
			"ЗагрузкаИзДокумента"
		);
	КонецЕсли;
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаЗаполненияПоДокументу",
		ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры,
		ЭтотОбъект,
		, , ,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры


Процедура НачатьЗаполнениеИзКорзины(ОбъектЗаполнения, ПараметрыКоманды) Экспорт
	
	Если ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.Свойство("ОбработчикОповещения") Тогда
		Обработчик = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ОбработчикОповещения;
		ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.Удалить("ОбработчикОповещения");
	Иначе
		Обработчик = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ПараметрыКоманды.Форма,
			"ЗагрузкаИзКорзины"
		);
	КонецЕсли;
	
	ПараметрыФормы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму(
		"РегистрСведений.Корзина.ФормаСписка",
		ПараметрыФормы,
		ЭтотОбъект,
		, , ,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоллекцияОперацийДляОбработчикаЗаполнения(Обработчик)
	
	Форма = Обработчик.Форма;
	Объект = Обработчик.Источник;
	ОписаниеКоманды = Обработчик.ОписаниеКоманды;
	ИмяКоманды = ОписаниеКоманды.Идентификатор;
	ИмяТабличнойЧасти = ОписаниеКоманды.ДополнительныеПараметры.ИмяТабличнойЧасти;
	ОчиститьПередЗаполнением = ОписаниеКоманды.ДополнительныеПараметры.ОчиститьПередЗаполнением;
	ПодтверждениеПередЗаполнением = ОписаниеКоманды.ДополнительныеПараметры.ПодтверждениеПередЗаполнением;
	ПараметрыКоманды = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		ОписаниеКоманды.ДополнительныеПараметры.ПоследовательныеОперации);
	
	КоллекцияОпераций = Новый Структура();
	
	Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
	
		Если ОчиститьПередЗаполнением Тогда
			
			ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(
				КоллекцияОпераций,
				"ОчиститьТабличнуюЧасть",
				НСтр("ru='Очистить табличную часть перед заполнением?'")
			);
				
		ИначеЕсли ПодтверждениеПередЗаполнением Тогда
			
			ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(
				КоллекцияОпераций,
				"ПодтверждениеПередЗаполнением",
				НСтр("ru='Табличная часть будет изменена. Продолжить?'")
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыКоманды Цикл
		
		КоллекцияОпераций.Вставить(Параметр.Ключ, Параметр.Значение);
		
		Если Объект.Свойство(Параметр.Ключ) Тогда
			
			Если ЗначениеЗаполнено(Объект[Параметр.Ключ]) Тогда
				
				Параметр.Значение.Результат = Объект[Параметр.Ключ];
				Параметр.Значение.Пропустить = Истина;
				
			Иначе
				
				Параметр.Значение.Пропустить = Ложь;
				Параметр.Значение.Результат = Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			Параметр.Значение.Результат = Неопределено;
			Параметр.Значение.Пропустить = Ложь;
			
		КонецЕсли;
		
		Если Параметр.Значение.Свойство("ВыборСсылки") Тогда
			
			Если Параметр.Значение.Свойство("Владелец") И Параметр.Значение.Владелец = Неопределено Тогда
				
				Параметр.Значение.Владелец = Форма;
				
			КонецЕсли;
			
			Если Параметр.Значение.Параметры.Свойство("Отбор") Тогда
				
				Для Каждого ЗначениеОтбора Из Параметр.Значение.Параметры.Отбор Цикл
					
					Если ТипЗнч(ЗначениеОтбора.Значение) = Тип("Строка") И Объект.Свойство(ЗначениеОтбора.Значение) Тогда
						
						Параметр.Значение.Параметры.Отбор[ЗначениеОтбора.Ключ] = Объект[ЗначениеОтбора.Значение];
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если
					Параметр.Ключ = "ДоговорВзаиморасчетов"
					И ЕстьРеквизитНаКлиенте(Объект, "Контрагент") 
					И ЗначениеЗаполнено(Объект.Контрагент)
				Тогда
					
					Параметр.Значение.Параметры.Отбор.Вставить("Владелец", Объект.Контрагент);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого ЗначениеПараметра Из Параметр.Значение.Параметры Цикл
				
				Если
					ЗначениеПараметра.Ключ <> "ТабличнаяЧастьИсточника"
					И ТипЗнч(ЗначениеПараметра.Значение) = Тип("Строка")
					И Объект.Свойство(ЗначениеПараметра.Значение)
				Тогда
				
					Параметр.Значение.Параметры[ЗначениеПараметра.Ключ] = Объект[ЗначениеПараметра.Значение];
					
				КонецЕсли;
				
				Если
					ЗначениеПараметра.Ключ = "СсылкаИсточника"
					И Не ЗначениеЗаполнено(ЗначениеПараметра.Значение)
					И ЗначениеЗаполнено(Объект.Ссылка)
				Тогда
				
					Параметр.Значение.Параметры[ЗначениеПараметра.Ключ] = Объект.Ссылка;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияОпераций;
	
КонецФункции

Функция ПараметрыФормы(Контекст, ПараметрКоманды)
	
	Результат = Контекст.ОписаниеКоманды.ПараметрыФормы;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Контекст.ОписаниеКоманды.Удалить("ПараметрыФормы");
	Результат.Вставить("ОписаниеКоманды", Контекст.ОписаниеКоманды);
	
	Если ПустаяСтрока(Контекст.ОписаниеКоманды.ИмяПараметраФормы) Тогда
		
		Результат.Вставить("ПараметрКоманды", ПараметрКоманды);
		
	Иначе
		
		МассивИмен = СтрРазделить(Контекст.ОписаниеКоманды.ИмяПараметраФормы, ".", Ложь);
		Узел = Результат;
		ВГраница = МассивИмен.ВГраница();
		
		Для Индекс = 0 По ВГраница - 1 Цикл
			
			Имя = СокрЛП(МассивИмен[Индекс]);
			
			Если Не Узел.Свойство(Имя) Или ТипЗнч(Узел[Имя]) <> Тип("Структура") Тогда
				
				Узел.Вставить(Имя, Новый Структура);
				
			КонецЕсли;
			
			Узел = Узел[Имя];
			
		КонецЦикла;
		
		Узел.Вставить(МассивИмен[ВГраница], ПараметрКоманды);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьФорму(Контекст)
	
	Если
		Контекст.ЭтоФормаОбъекта
		И Контекст.ОписаниеКоманды.РежимЗаписи <> "НеЗаписывать"
		И Не Контекст.Форма.Модифицированность
	Тогда
		
		Попытка
			Контекст.Форма.Прочитать();
		Исключение
			// Если метода Прочитать нет, значит печать выполнена не из формы объекта.
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Ошибка метода Прочитать'"),
       				"Ошибка",
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, Истина);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Контекст.ОписаниеКоманды.РежимЗаписи <> "НеЗаписывать" Тогда
		
		ТипыИзмененныхОбъектов = Новый Массив;
		
		Для Каждого Ссылка Из Контекст.МассивСсылок Цикл
			
			Тип = ТипЗнч(Ссылка);
			
			Если ТипыИзмененныхОбъектов.Найти(Ссылка) = Неопределено Тогда
				ТипыИзмененныхОбъектов.Добавить(Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Тип Из ТипыИзмененныхОбъектов Цикл
			
			ОповеститьОбИзменении(Тип);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОписаниеКоманды(ИмяКомандыВФорме,
                                  АдресНастроек,
                                  ПараметрыЗаполнения = Неопределено,
                                  Обработчик = Неопределено)
	
	ЗаполнениеОбъектовАльфаАвтоВызовСервера.ИзменитьОписаниеКоманды(
		ИмяКомандыВФорме,
		АдресНастроек,
		ПараметрыЗаполнения,
		Обработчик
	);
	
КонецПроцедуры

Процедура ВыгрузитьВТСДЗавершение(Успешно, Параметры) Экспорт
	
	Если ТипЗнч(Успешно)=Тип("Структура") И Успешно.Свойство("Результат") И Успешно.Результат Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выгрузка успешно завершена'"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'В процессе выгрузки произошла ошибка'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти