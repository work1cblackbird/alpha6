////////////////////////////////////////////////////////////////////////////////
// Рассылка прайс-листов:
//  - подготовка прайс-листа к отправке;
//  - заполнение цен;
//  - отправка;
//  - заполнение журнала.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует и отправляет прайс-листы.
//
// Параметры:
//  КОтправке - Массив - коллекция строк к отправке.
//
Процедура СформироватьИОтправить(Знач КОтправке) Экспорт
	
	КОтправке = СтруктурироватьДанныеКОтправке(КОтправке);
	
	Пока КОтправке.Итератор.Следующий() Цикл
		
		Построитель = НовыйПостроительПрайсЛиста(КОтправке.Итератор.ПрайсЛист);
		Писатель = НовыйПисательПрайсЛиста(КОтправке.Итератор.ПрайсЛист);
		
		Если ЭтоОшибка(Построитель) Тогда
			
			//@skip-check unknown-method-property
			// У ошибки есть поле тип
			ЗаписатьВЖурналПоОтбору(
				КОтправке.ИсходныеДанные,
				Новый Структура("ПрайсЛист", КОтправке.Итератор.ПрайсЛист),
				Построитель.Тип
			);
			Продолжить;
			
		КонецЕсли;
		
		Построитель.Построить();
		ТипыЦен = КОтправке.Итератор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		СортировкаПрайсЛиста(КОтправке, Построитель, КОтправке.Итератор.ПрайсЛист);
		
		Пока ТипыЦен.Следующий() Цикл
			
			Построитель.УстановитьТипЦен(ТипыЦен.ТипЦен);
			Писатель.Начать();
			Построитель.Сформировать(Писатель);
			ФайлКОтправке = Писатель.Закончить();
			
			Если ЭтоОшибка(ФайлКОтправке) Тогда
				
				ЗаписатьВЖурналПоОтбору(
					КОтправке.ИсходныеДанные,
					Новый Структура("ПрайсЛист,ТипЦен", ТипыЦен.ПрайсЛист, ТипыЦен.ТипЦен),
					ФайлКОтправке.Тип
				);
				Продолжить;
				
			КонецЕсли;
			
			Транспорты = ТипыЦен.Выбрать();
			
			Пока Транспорты.Следующий() Цикл
				
				РезультатТранспортировки = Справочники.НастройкиТранспортаИсходящихФайлов.Отправить(
					Транспорты.Транспорт,
					ФайлКОтправке,
					Ложь
				);
				
				Если ЭтоОшибка(РезультатТранспортировки) Тогда
					
					ЗаписатьВЖурнал(
						Транспорты,
						Перечисления.ВидыСобытийЖурналаРассылкиПрайсЛитов.Ошибка,
						РезультатТранспортировки.Тип
					);
					Продолжить;
					
				КонецЕсли;
				
				ЗаписатьВЖурнал(
					Транспорты,
					Перечисления.ВидыСобытийЖурналаРассылкиПрайсЛитов.Отправлен
				);
				
			КонецЦикла;
			
			УдалитьФайлы(ФайлКОтправке.ПолноеИмя);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСОшибками

// Возвращает описание ошибки.
// 
// Параметры:
//  ТипОшибки - Строка - строковое представление ошибки
// 
// Возвращаемое значение:
//  Структура - структура описания ошибки
//    * Ошибка    - Булево - Истина;
//    * ТипОшибки - Строка - строковое представление ошибки.
Функция НоваяОшибка(ТипОшибки) Экспорт
	
	Возврат Новый Структура("Ошибка,Тип", Истина, ТипОшибки);
	
КонецФункции

// Возвращает Истина, если переданное значение является ошибкой.
//
// Параметры:
//  Ошибка - Структура - проверяемое значение;
//
// Возвращаемое значение:
//  Булево - Истина, если переданное значение является ошибкой.
//
Функция ЭтоОшибка(Ошибка) Экспорт
	
	Возврат (ТипЗнч(Ошибка) = Тип("Структура") И Ошибка.Свойство("Ошибка") И Ошибка.Ошибка);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗаписатьВЖурнал(Рассылка, Событие, Комментарий="") Экспорт
	
	Менеджер = РегистрыСведений.ЖурналРассылкиПрайсЛистов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Менеджер, Рассылка);
	Менеджер.Событие = Событие;
	Менеджер.Комментарий = Комментарий;
	Менеджер.Период = ТекущаяДатаСеанса();
	
	Попытка
		
		Менеджер.Записать(Истина);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Рассылка прайс-листов.Регистрация в журнале рассылки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

Процедура СформироватьИОтправитьПоРасписанию(Знач СтруктураПараметров = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РассылкаПрайсЛистов);
	
	ТекстЗапроса ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиРассылкиПрайсЛистов.Получатель КАК Получатель,
		|	НастройкиРассылкиПрайсЛистов.ПрайсЛист КАК ПрайсЛист,
		|	НастройкиРассылкиПрайсЛистов.Транспорт КАК Транспорт,
		|	НастройкиРассылкиПрайсЛистов.ПериодичностьРассылки КАК ПериодичностьРассылки
		|ПОМЕСТИТЬ РассылкиПрайсов
		|ИЗ
		|	РегистрСведений.НастройкиРассылкиПрайсЛистов КАК НастройкиРассылкиПрайсЛистов
		|ГДЕ
		|	НастройкиРассылкиПрайсЛистов.ПериодичностьРассылки > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналРассылкиПрайсЛистовСрезПоследних.Получатель КАК Получатель,
		|	ЖурналРассылкиПрайсЛистовСрезПоследних.ПрайсЛист КАК ПрайсЛист,
		|	ЖурналРассылкиПрайсЛистовСрезПоследних.Транспорт КАК Транспорт,
		|	ЖурналРассылкиПрайсЛистовСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ДанныеОбОтправке
		|ИЗ
		|	РегистрСведений.ЖурналРассылкиПрайсЛистов.СрезПоследних(
		|			,
		|			(Получатель, ПрайсЛист, Транспорт) В
		|					(ВЫБРАТЬ
		|						РассылкиПрайсов.Получатель КАК Получатель,
		|						РассылкиПрайсов.ПрайсЛист КАК ПрайсЛист,
		|						РассылкиПрайсов.Транспорт КАК Транспорт
		|					ИЗ
		|						РассылкиПрайсов КАК РассылкиПрайсов)
		|				И Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийЖурналаРассылкиПрайсЛитов.Отправлен)) КАК ЖурналРассылкиПрайсЛистовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РассылкиПрайсов.Получатель КАК Получатель,
		|	РассылкиПрайсов.ПрайсЛист КАК ПрайсЛист,
		|	РассылкиПрайсов.Транспорт КАК Транспорт
		|ИЗ
		|	РассылкиПрайсов КАК РассылкиПрайсов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеОбОтправке КАК ДанныеОбОтправке
		|		ПО (РассылкиПрайсов.Получатель = ДанныеОбОтправке.Получатель)
		|			И (РассылкиПрайсов.ПрайсЛист = ДанныеОбОтправке.ПрайсЛист)
		|			И (РассылкиПрайсов.Транспорт = ДанныеОбОтправке.Транспорт)
		|ГДЕ
		|	ВЫБОР
		|		КОГДА РассылкиПрайсов.ПериодичностьРассылки = 86400
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(ДанныеОбОтправке.Период, ДАТАВРЕМЯ(1, 1, 1)), ДЕНЬ, 1), ДЕНЬ) <= &ТекущаяДата
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ЕСТЬNULL(ДанныеОбОтправке.Период, ДАТАВРЕМЯ(1, 1, 1)), СЕКУНДА, РассылкиПрайсов.ПериодичностьРассылки)<= &ТекущаяДата
		|	КОНЕЦ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса()); 
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьИОтправить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // Процедура СформироватьИОтправитьПоРасписанию()

Функция СоответствиеКолонокТаблицыЗначений(Ключ) Экспорт
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("Код", "Код");
	СоответствиеКолонок.Вставить("Код товара", "Артикул");
	СоответствиеКолонок.Вставить("Наименование", "Наименование");
	СоответствиеКолонок.Вставить("Иностранное наименование", "НаименованиеИностранное");
	СоответствиеКолонок.Вставить("Кол-во", "Количество");
	СоответствиеКолонок.Вставить("Резерв", "Резерв");
	СоответствиеКолонок.Вставить("Цена", "Цена");
	СоответствиеКолонок.Вставить("Валюта", "ВалютаУчета");
	СоответствиеКолонок.Вставить("Принадлежность", "");
	СоответствиеКолонок.Вставить("Производитель", "Производитель");
	СоответствиеКолонок.Вставить("Группа товаров", "ГруппаТоваров");
	
	Возврат СоответствиеКолонок.Получить(Ключ);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктурироватьДанныеКОтправке(КОтправке)
	
	ДляЗапроса = Новый ТаблицаЗначений;
	ДляЗапроса.Колонки.Добавить("ПрайсЛист", Новый ОписаниеТипов("СправочникСсылка.ПрайсЛисты"));
	ДляЗапроса.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДляЗапроса.Колонки.Добавить("Транспорт", Новый ОписаниеТипов("СправочникСсылка.НастройкиТранспортаИсходящихФайлов"));
	ДляЗапроса.Колонки.Добавить("ТипЦен", Новый ОписаниеТипов("СправочникСсылка.ТипыЦен"));
	
	ПрайсЛисты = Новый Массив;
	Получатели = Новый Массив;
	
	Для Каждого Элемент Из КОтправке Цикл
		
		Если ПрайсЛисты.Найти(Элемент.ПрайсЛист) = Неопределено Тогда
			
			ПрайсЛисты.Добавить(Элемент.ПрайсЛист);
			
		КонецЕсли;
		
		Если Получатели.Найти(Элемент.Получатель) = Неопределено Тогда
			
			Получатели.Добавить(Элемент.Получатель);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыПрайсЛистов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПрайсЛисты, "Владелец,ТипЦен");
	ТипыЦенПолучателей = ТипыЦенПолучателей(Получатели);
	ПоУмолчанию = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойТипЦенПродажи);
	
	Для Каждого Элемент Из КОтправке Цикл
		
		НоваяСтрока = ДляЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		ЗначениеРеквизитов = РеквизитыПрайсЛистов.Получить(Элемент.ПрайсЛист);
		
		Если ЗначениеРеквизитов = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Условие = Новый Структура("Получатель,ПодразделениеКомпании",
															Элемент.Получатель,
															ЗначениеРеквизитов.Владелец);
		НайденныеСтроки = ТипыЦенПолучателей.НайтиСтроки(Условие);
		
		Если НайденныеСтроки.Количество() > 0 И НЕ НайденныеСтроки[0].ТипЦен.Пустая() Тогда
			
			НоваяСтрока.ТипЦен = НайденныеСтроки[0].ТипЦен;
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ЗначениеРеквизитов.ТипЦен.Пустая() Тогда
			
			НоваяСтрока.ТипЦен = ЗначениеРеквизитов.ТипЦен;
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока.ТипЦен = ПоУмолчанию;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЗ.ПрайсЛист КАК ПрайсЛист,
	|	ТЗ.Получатель КАК Получатель,
	|	ТЗ.Транспорт КАК Транспорт,
	|	ТЗ.ТипЦен КАК ТипЦен
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ПрайсЛист КАК ПрайсЛист,
	|	ВТ.Получатель КАК Получатель,
	|	ВТ.Транспорт КАК Транспорт,
	|	ВТ.ТипЦен КАК ТипЦен
	|ИЗ
	|	ВТ КАК ВТ
	|ИТОГИ ПО
	|	ПрайсЛист,
	|	ТипЦен");
	Запрос.УстановитьПараметр("ТЗ", ДляЗапроса);
	Возврат Новый Структура("Итератор,ИсходныеДанные", Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ДляЗапроса);
	
КонецФункции

Функция ВсеПостроителиПрайсЛистов()
	
	ПостроителиПрайсЛистов = Новый Соответствие;
	ПостроителиПрайсЛистов.Вставить(ПредопределенноеЗначение("Перечисление.ИсточникиПрайсЛистов.ВсяНоменклатура"),
																	Обработки.ПостроительПрайсЛистаВсяНоменклатура);
	ПостроителиПрайсЛистов.Вставить(ПредопределенноеЗначение("Перечисление.ИсточникиПрайсЛистов.ОстаткиНаСкладах"),
																	Обработки.ПостроительПрайсЛистаОстаткиНаСкладах);
	ПостроителиПрайсЛистов.Вставить(ПредопределенноеЗначение("Перечисление.ИсточникиПрайсЛистов.ПрайсЛистПоставщика"),
																	Обработки.ПостроительПрайсЛистаПрайсЛистПоставщика);
	Возврат ПостроителиПрайсЛистов;
	
КонецФункции

Функция ВсеПисателиПрайсЛистов()
	
	Писатели = Новый Соответствие;
	Писатели.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыПредставленияПрайсЛистов.ТекстовыйФайл"),
		Обработки.ПисательПрайсЛистаВТекстовыйФайл
	);
	Писатели.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыПредставленияПрайсЛистов.ТабличныйДокумент"),
		Обработки.ПисательПрайсЛистаВТабличныйДокумент
	);
	Возврат Писатели;
	
КонецФункции

Функция НовыйПостроительПрайсЛиста(ПрайсЛист)
	
	Если НЕ ЗначениеЗаполнено(ПрайсЛист) Тогда
		
		Возврат НоваяОшибка("ПустойПрайс");
		
	КонецЕсли;
	
	НовыйПостроитель = ВсеПостроителиПрайсЛистов()
		.Получить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрайсЛист, "Источник"));
	
	Если НовыйПостроитель = Неопределено Тогда
		
		Возврат НоваяОшибка("НеЗарегистрированныйИсточник");
		
	КонецЕсли;
	
	Возврат НовыйПостроитель.Создать().Инициализировать(ПрайсЛист);
	
КонецФункции

Функция НовыйПисательПрайсЛиста(ПрайсЛист)
	
	Если НЕ ЗначениеЗаполнено(ПрайсЛист) Тогда
		
		Возврат НоваяОшибка("ПустойПрайс");
		
	КонецЕсли;
	
	КонструкторПисателя = ВсеПисателиПрайсЛистов()
		.Получить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрайсЛист, "ВидПредставления"));
	
	Если КонструкторПисателя = Неопределено Тогда
		
		Возврат НоваяОшибка("НеЗарегистрированныйПисатель");
		
	КонецЕсли;
	
	Возврат КонструкторПисателя.Создать().Инициализировать(ПрайсЛист);
	
КонецФункции

Функция ТипыЦенПолучателей(Получатели)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДоговорыВзаиморасчетов.Владелец КАК Получатель,
		|	ДоговорыВзаиморасчетов.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	ДоговорыВзаиморасчетов.ТипЦен КАК ТипЦен,
		|	ДоговорыВзаиморасчетов.Основной КАК Основной
		|ИЗ
		|	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
		|ГДЕ
		|	ДоговорыВзаиморасчетов.Владелец В(&Получатели)
		|	И НЕ ДоговорыВзаиморасчетов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыВзаиморасчетов.Основной УБЫВ"
	);
	Запрос.УстановитьПараметр("Получатели", Получатели);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаписатьВЖурналПоОтбору(Рассылки, Отбор, ТипОшибки)
	
	РассылкиСОшибкой = Рассылки.НайтиСтроки(Отбор);
	
	Для Каждого Рассылка Из РассылкиСОшибкой Цикл
		
		ЗаписатьВЖурнал(Рассылка, Перечисления.ВидыСобытийЖурналаРассылкиПрайсЛитов.Ошибка, ТипОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СортировкаПрайсЛиста(КОтправке, Построитель, ПрайсЛист)
	
	РеквизитыПрайсЛиста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрайсЛист, "Владелец,ОтборНоменклатуры");	
	Подразделение = РеквизитыПрайсЛиста.Владелец;
	
	Если ТипЗнч(Построитель) <> Тип("ОбработкаОбъект.ПостроительПрайсЛистаПрайсЛистПоставщика") Тогда
		
		ТипыЦен = КОтправке.Итератор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ТипыЦен.Следующий() Цикл		
			
			ТипЦен = ТипыЦен.ТипЦен;
			Для Каждого Строка Из Построитель.ДанныеПрайсЛиста Цикл
				Строка.Цена = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, Строка.Номенклатура, , , , , , , Подразделение);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ХранилищеЗначенияКолонокДляВыгрузки = ПрайсЛист.Ссылка.НастройкаКолонокДляВыгрузки;	
	НастройкиКолонокДляВыгрузки = Справочники.ПрайсЛисты.ПолучитьНастройкиКолонокДляВыгрузки(ХранилищеЗначенияКолонокДляВыгрузки);
	
	Для Каждого Настройка Из НастройкиКолонокДляВыгрузки Цикл
		Если НЕ Настройка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонСортировки = СоответствиеКолонокТаблицыЗначений(Настройка.Представление);
		
		Если Не ЗначениеЗаполнено(ШаблонСортировки)
			ИЛИ Построитель.ДанныеПрайсЛиста.Колонки.Найти(ШаблонСортировки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Если Настройка.Сортировка = "По возрастанию" Тогда				
			Построитель.ДанныеПрайсЛиста.Сортировать(ШаблонСортировки + " Возр");
		ИначеЕсли Настройка.Сортировка = "По убыванию" Тогда
			Построитель.ДанныеПрайсЛиста.Сортировать(ШаблонСортировки + " Убыв");
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
