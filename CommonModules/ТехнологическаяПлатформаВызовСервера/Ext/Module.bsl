// Общий модуль "Технологическая платформа (сервер)"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СИСТЕМЫ

// Установление параметров сеанса.
//
// Параметры:
//  ИмяПараметра			 - Строка - имя параметра сеанса.
//  УстановленныеПараметры	 - Массив - Список установленных параметров.
//
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	ПараметрыСеанса.ПодразделениеКомпании = Пользователи.ТекущийПользователь().ПодразделениеКомпании;
	ПараметрыСеанса.Организация           = Пользователи.ТекущийПользователь().Организация;
	ПараметрыСеанса.ОбщиеЗначения         = Новый ХранилищеЗначения(Новый Структура);
	
	УстановленныеПараметры.Добавить("ПодразделениеКомпании");
	УстановленныеПараметры.Добавить("Организация");
	УстановленныеПараметры.Добавить("ОбщиеЗначения");
	
КонецПроцедуры // УстановкаПараметровСеанса()


////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ

// Заполним предопределенные доп реквизиты и свойства
// запускается после релиза 3.0.01.03.
Процедура ОбновитьПредопределенныеДопРеквизитыИСвойства() Экспорт
	
	ДеревоДополнительныхРеквизитовИСвойств = ПолучитьДеревоСвойствИРеквизитов();
	
	Для Каждого СтрокаРодитель Из ДеревоДополнительныхРеквизитовИСвойств.Строки Цикл
		
		// получим доп свойство
		ДополнительныйРеквизитСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения[СтрокаРодитель.ИмяСвойства];
		
		ДополнительныйРеквизитСвойствоОбъект = ДополнительныйРеквизитСвойство.ПолучитьОбъект();
		ДополнительныйРеквизитСвойствоОбъект.ЭтоДополнительноеСведение = НЕ СтрокаРодитель.РеквизитСвойство;
		ДополнительныйРеквизитСвойствоОбъект.Подсказка                 = СтрокаРодитель.Подсказка;
		ДополнительныйРеквизитСвойствоОбъект.ТолькоДляПечати           = СтрокаРодитель.ТолькоДляПечати;
		ДополнительныйРеквизитСвойствоОбъект.Заголовок                 = СтрокаРодитель.Подсказка;
		
		ДополнительныйРеквизитСвойствоОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", ИСТИНА);
		ДополнительныйРеквизитСвойствоОбъект.Записать();
		
		// заполним наборы
		Для Каждого СтрокаДочерняя Из СтрокаРодитель.Строки Цикл
			Набор = Справочники.НаборыДополнительныхРеквизитовИСведений[СтрокаДочерняя.ИмяОбъекта];
			НаборОбъект = Набор.ПолучитьОбъект();
			
			ИмяТабличнойЧасти = ?(СтрокаРодитель.РеквизитСвойство, "ДополнительныеРеквизиты", "ДополнительныеСведения");
			
			СтрокаДобавить = НаборОбъект[ИмяТабличнойЧасти].Найти(ДополнительныйРеквизитСвойство,"Свойство");
			
			Если СтрокаДобавить = Неопределено Тогда
				СтрокаДобавить                 = НаборОбъект[ИмяТабличнойЧасти].Добавить();
				СтрокаДобавить.Свойство        = ДополнительныйРеквизитСвойство;
			КонецЕсли;
			
			НаборОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", ИСТИНА);
			НаборОбъект.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Проверка режима переноса данных из предыдущей редакции.
// 
// Возвращаемое значение:
//  Булево - Признак режима переноса данных.
//
Функция РежимПереносаДанныхИзПредыдущейРедакции() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомераРелизаКонфигурацииПустой = Метаданные.Константы.Найти("НомерРелизаКонфигурации")=Неопределено ИЛИ ПустаяСтрока(Константы.НомерРелизаКонфигурации.Получить());
	
	Возврат (НЕ НомераРелизаКонфигурацииПустой) И ОбновлениеИнформационнойБазыСлужебный.РежимОбновленияДанных()="НачальноеЗаполнение";
	
КонецФункции // РежимПереносаДанныхИзПредыдущейРедакции()

// Проверка, что это фоновое задание
// 
// Возвращаемое значение:
//  Булево - Признак фонового задания.
//
Функция ЭтоФоновоеЗадание() Экспорт
	
	Возврат (ПолучитьИнформациюЭкрановКлиента()=Неопределено);
		
КонецФункции // ЭтоФоновоеЗадание()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Доопределяет структуру параметров, необходимых для работы клиентского кода при запуске конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
КонецПроцедуры // ПриДобавленииПараметровРаботыКлиентаПриЗапуске()

// Позволяет указать роли специального назначения. Все остальные роли не требуется указывать -
// это роли, которые предназначены для любых пользователей, кроме внешних пользователей.
//
// Параметры:
//  НазначениеРолей - Структура - со свойствами:
//   * ТолькоДляАдминистраторовСистемы - Массив - имена ролей, которые при выключенном разделении
//     предназначены для любых пользователей, кроме внешних пользователей, а в разделенном режиме
//     предназначены только для администраторов сервиса, например:
//       Администрирование, ОбновлениеКонфигурацииБазыДанных, АдминистраторСистемы,
//     а также все роли с правами:
//       Администрирование,
//       Администрирование расширений конфигурации,
//       Обновление конфигурации базы данных.
//     Такие роли, как правило, существуют только в БСП и не встречаются в прикладных решениях.
//
//   * ТолькоДляПользователейСистемы - Массив - имена ролей, которые при выключенном разделении
//     предназначены для любых пользователей, кроме внешних пользователей, а в разделенном режиме
//     предназначены только для неразделенных пользователей (сотрудников технической поддержки сервиса и
//     администраторов сервиса), например:
//       ДобавлениеИзменениеАдресныхСведений, ДобавлениеИзменениеБанков,
//     а также все роли с правами изменения неразделенных данных и следующими правами:
//       Толстый клиент,
//       Внешнее соединение,
//       Automation,
//       Режим все функции,
//       Интерактивное открытие внешних обработок,
//       Интерактивное открытие внешних отчетов.
//     Такие роли в большей части существует в БСП, но могут встречаться и в прикладных решениях.
//
//   * ТолькоДляВнешнихПользователей - Массив - имена ролей, которые предназначены
//     только для внешних пользователей (роли со специально разработанным набором прав), например:
//       ДобавлениеИзменениеОтветовНаВопросыАнкет, БазовыеПраваВнешнегоПользователя.
//     Такие роли существуют и в БСП, и в прикладных решениях (если используются внешние пользователи).
//
//   * СовместноДляПользователейИВнешнихПользователей - Массив - имена ролей, которые предназначены
//     для любых пользователей (и внутренних, и внешних, и неразделенных), например:
//       ЧтениеОтветовНаВопросыАнкет, ДобавлениеИзменениеЛичныхВариантовОтчетов.
//     Такие роли существуют и в БСП, и в прикладных решениях (если используются внешние пользователи).
//
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// ТолькоДляАдминистраторовСистемы
	НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(Метаданные.Роли.ОбновлениеКонфигурации.Имя);
	//НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(Метаданные.Роли.ТестЦентр.Имя);
	
КонецПроцедуры // ПриОпределенииНазначенияРолей()

// Записывает событие в журнал регистрации.
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Комментарий - Строка - произвольная строка комментария к событию.
//
Процедура СделатьЗаписьЖурналаРегистрации(ИмяСобытия, Комментарий) Экспорт
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВНУТРЕННЕГО ИСПОЛЬЗОВАНИЯ

// Функция строит дерево предопределенных реквизитов и свойств по макету в ПВХ
// %
// Параметры:
//	Нет
//
// Возвращаемое значение - Дерево значений.
//
Функция ПолучитьДеревоСвойствИРеквизитов()
	// создадим дерево
	ДеревоРеквизитовИСвойств = Новый ДеревоЗначений();
	ДеревоРеквизитовИСвойств.Колонки.Добавить("ИмяСвойства", Новый ОписаниеТипов("Строка"));
	ДеревоРеквизитовИСвойств.Колонки.Добавить("РеквизитСвойство", Новый ОписаниеТипов("Булево"));
	ДеревоРеквизитовИСвойств.Колонки.Добавить("ИмяОбъекта", Новый ОписаниеТипов("Строка"));
	ДеревоРеквизитовИСвойств.Колонки.Добавить("Подсказка", Новый ОписаниеТипов("Строка"));
	ДеревоРеквизитовИСвойств.Колонки.Добавить("ТолькоДляПечати", Новый ОписаниеТипов("Булево"));
	
	// получим макет
	МакетСвойствИРеквизитов = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьМакет("ПредопределенныеСвойстваИРеквизиты");
	КоличествоЗаписейМакета = МакетСвойствИРеквизитов.ВысотаТаблицы;
	
	// запустим цикл для построения дерева
	Сч = 2;                ИмяСвойства = "";
	РеквизитСвойство = ""; ИмяОбъекта = "";
	СтрокаКорень = Неопределено;
	Пока Сч <= КоличествоЗаписейМакета Цикл
		// значения колонок строки
		ИмяСвойства      = Строка(МакетСвойствИРеквизитов.Область(Сч, 1, Сч, 1).Текст);
		РеквизитСвойство = Строка(МакетСвойствИРеквизитов.Область(Сч, 2, Сч, 2).Текст);
		ИмяОбъекта       = Строка(МакетСвойствИРеквизитов.Область(Сч, 3, Сч, 3).Текст);
		Подсказка        = Строка(МакетСвойствИРеквизитов.Область(Сч, 4, Сч, 4).Текст);
		ТолькоДляПечати  = Строка(МакетСвойствИРеквизитов.Область(Сч, 5, Сч, 5).Текст);
		
		Если ПустаяСтрока(ИмяСвойства) И ПустаяСтрока(ИмяОбъекта) Тогда
			Сч = Сч + 1; // увеличиваем счетчик
			Продолжить;
		КонецЕсли;
		
		ЭтоКорень = (НЕ ПустаяСтрока(ИмяСвойства) И ПустаяСтрока(ИмяОбъекта));
		
		Если ЭтоКорень Тогда
			СтрокаКорень = ДеревоРеквизитовИСвойств.Строки.Добавить();
			СтрокаКорень.ИмяСвойства      = ИмяСвойства;
			СтрокаКорень.РеквизитСвойство = (РеквизитСвойство = "Реквизит");
			СтрокаКорень.Подсказка        = Подсказка;
			СтрокаКорень.ТолькоДляПечати  = Булево(ТолькоДляПечати);
		Иначе
			НоваяСтрока = СтрокаКорень.Строки.Добавить();
			
			НоваяСтрока.ИмяСвойства = СтрокаКорень.ИмяСвойства;
			НоваяСтрока.ИмяОбъекта  = ИмяОбъекта;
		КонецЕсли;
		Сч = Сч + 1; // увеличиваем счетчик
	КонецЦикла;
	
	Возврат ДеревоРеквизитовИСвойств;
КонецФункции

#КонецОбласти