////////////////////////////////////////////////////////////////////////////////
// Модуль по работе с границами последовательностей:
//  регистрация,
//  удаление,
//  восстановление;
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик события, возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Объект - ДокументОбъект - Объект, для которого выполняется обработка события.
//  Отказ  - Булево         - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Объект, Отказ) Экспорт
	
	Если НЕ Объект.Проведен Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДвигаетРегистр(Объект, "ПартииТоваровКомпании") Тогда
		
		РегистрыСведений.ГраницыПартий.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ДвигаетРегистр(Объект, "ВзаиморасчетыКомпании") Тогда
		
		РегистрыСведений.ГраницыВзаиморасчетов.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ДвигаетРегистр(Объект, "РасчетыСКонтрагентами") Тогда
		
		РегистрыСведений.ГраницыВзаиморасчетов.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ДвигаетРегистр(Объект, "ЗаказыПокупателей")
		ИЛИ ДвигаетРегистр(Объект, "ЗаказыПоставщикам")
		ИЛИ ДвигаетРегистр(Объект, "ЗаказыРаспределение") Тогда
		
		РегистрыСведений.ГраницыЗаказы.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ДвигаетРегистр(Объект, "ОстаткиТоваровОрдерныйСклад") Тогда
		
		РегистрыСведений.ГраницыОрдерныйСклад.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ДвигаетРегистр(Объект, "ТоварыВПроизводстве") Тогда
		
		РегистрыСведений.ГраницыПроизводство.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ДвигаетРегистр(Объект, "ОстаткиАвтомобилей") Тогда
		
		РегистрыСведений.ГраницыАвтомобили.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ДвигаетРегистр(Объект, "ОстаткиАвтомобилейОрдерныйСклад") Тогда
		
		РегистрыСведений.ГраницыАвтомобилиОрдерныйСклад.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ДвигаетРегистр(Объект, "КомплектацияАвтомобилей") Тогда
		
		РегистрыСведений.ГраницыКомплектация.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ДвигаетРегистр(Объект, "ЗаказыАвтомобилей") ИЛИ ДвигаетРегистр(Объект, "ЗаказыПоставщикамНаАвтомобили") Тогда
		
		РегистрыСведений.ГраницыЗаказыНаАвтомобили.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события, возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Объект - ДокументОбъект - Объект, для которого выполняется обработка события.
//  Отказ  - Булево         - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ДвиженияВзаиморасчетовПередПроведением") Тогда
		
		РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Объект.Ссылка, Объект.ДополнительныеСвойства, Объект.Движения);
		РегистрыСведений.ГраницыВзаиморасчетов.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДвиженияПоЗаказамПередПроведением") Тогда
		
		РаботаСГраницами.СдвинутьГраницуЗаказов(Объект.Ссылка, Объект.ДополнительныеСвойства, Объект.Движения);
		РегистрыСведений.ГраницыЗаказы.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДвиженияПартийПередПроведением") Тогда
		
		РаботаСГраницами.СдвинутьГраницуПартий(Объект.Ссылка, Объект.ДополнительныеСвойства, Объект.Движения);
		РегистрыСведений.ГраницыПартий.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДвиженияОрдерныйУчетПередПроведением") Тогда
		
		РаботаСГраницами.СдвинутьГраницуОрдерногоУчета(Объект.Ссылка, Объект.ДополнительныеСвойства, Объект.Движения);
		РегистрыСведений.ГраницыОрдерныйСклад.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДвиженияОстаткиАвтомобилейПередПроведением") Тогда
		
		РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(Объект.Ссылка, Объект.ДополнительныеСвойства, Объект.Движения);
		РегистрыСведений.ГраницыАвтомобили.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДвиженияПоЗаказамАвтомобилейПередПроведением") Тогда
		
		РаботаСГраницами.СдвинутьГраницуЗаказовАвтомобилей(Объект.Ссылка, Объект.ДополнительныеСвойства, Объект.Движения);
		РегистрыСведений.ГраницыЗаказыНаАвтомобили.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДвиженияКомплектацииПередПроведением") Тогда
		
		РаботаСГраницами.СдвинутьГраницуКомплектации(Объект.Ссылка, Объект.ДополнительныеСвойства, Объект.Движения);
		РегистрыСведений.ГраницыКомплектация.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДвиженияПроизводстваПередПроведением") Тогда
		
		РаботаСГраницами.СдвинутьГраницуПроизводства(Объект.Ссылка, Объект.ДополнительныеСвойства, Объект.Движения);
		РегистрыСведений.ГраницыПроизводство.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДвиженияОрдерныйУчетАвтомобилейПередПроведением") Тогда
		
		РаботаСГраницами.СдвинутьГраницуОрдерногоУчетаПоАвтомобилям(Объект.Ссылка, Объект.ДополнительныеСвойства, Объект.Движения);
		РегистрыСведений.ГраницыАвтомобилиОрдерныйСклад.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДвиженияРасчетыСКонтрагентамиПередПроведением") Тогда
		
		РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Объект.Ссылка, Объект.ДополнительныеСвойства, Объект.Движения);
		РегистрыСведений.ГраницыРасчетыСКонтрагентами.УдалитьСсылкуНаДокумент(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Фиксирует МоментВремени в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура МоментВремениПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если Документ.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "МоментВремени,Проведен");
	
	Если РеквизитыДокумента.Проведен Тогда
		
		ДополнительныеСвойства.Вставить("МоментВремениБыл", РеквизитыДокумента.МоментВремени);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Взаиморасчеты

// Фиксирует движения документа в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура ДвиженияПоВзаиморасчетамПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства)
		ИЛИ ДополнительныеСвойства.Свойство("ДвиженияВзаиморасчетовПередПроведением") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДвиженияВзаиморасчетовПередПроведением",
		ДвиженияПоРегистру(Документ, Метаданные.РегистрыНакопления.ВзаиморасчетыКомпании));
	
КонецПроцедуры

// Сдвигает границу взаиморасчетов.
//
// Параметры:
//  Документ				 - ДокументСсылка    - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура         - Дополнительные свойства объекта.
//  ТекущиеДвижения			 - КоллекцияДвижений - текущие движения документа.
//
Процедура СдвинутьГраницуВзаиморасчетов(Документ, ДополнительныеСвойства, ТекущиеДвижения) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МоментВремениБыл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "МоментВремениБыл");
	ДвиженияДо = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ДвиженияВзаиморасчетовПередПроведением");
	ДвиженияСейчас = ТекущиеДвижения.ВзаиморасчетыКомпании.Выгрузить();
	
	НовыйМоментВремени = ПолучитьЗначениеПараметраСтруктуры
							(ДополнительныеСвойства, "НовыйМоментВремени", Документ.МоментВремени());
	Если НЕ (МоментВремениБыл <> НовыйМоментВремени ИЛИ ДвиженияИзменились(ДвиженияДо, ДвиженияСейчас)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментФиксации = МоментФиксации(НовыйМоментВремени, МоментВремениБыл);
	ОтборПоАналитикам = "И ТаблицаДвижений.ДоговорВзаиморасчетов В (&Договора)";
	Договора = ДвиженияДо.ВыгрузитьКолонку("ДоговорВзаиморасчетов");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Договора, ДвиженияСейчас.ВыгрузитьКолонку("ДоговорВзаиморасчетов"), Истина);
	ЗначенияАналитик = Новый Структура("Договора", Договора);
	
	Если НЕ ЕстьДокументыПосле(Документ, МоментФиксации, "ВзаиморасчетыКомпании", ОтборПоАналитикам, ЗначенияАналитик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГраницыВзаиморасчетов.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ГраницыВзаиморасчетов.МоментВремени КАК МоментВремени,
	|	ГраницыВзаиморасчетов.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.ГраницыВзаиморасчетов КАК ГраницыВзаиморасчетов
	|ГДЕ
	|	ГраницыВзаиморасчетов.ДоговорВзаиморасчетов В(&Договора)");
	Запрос.УстановитьПараметр("Договора", Договора);
	ТекущиеГраницы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Договор Из Договора Цикл
		
		СтрокиПоУсловию = ТекущиеГраницы.НайтиСтроки(Новый Структура("ДоговорВзаиморасчетов", Договор));
		ОбновитьГраницу = Истина;
		
		Если СтрокиПоУсловию.Количество() Тогда
			
			МоментВремениКПроверке = Новый МоментВремени(СтрокиПоУсловию[0].МоментВремени, СтрокиПоУсловию[0].ДокументСсылка);
			ОбновитьГраницу = (МоментФиксации.Сравнить(МоментВремениКПроверке) = -1);
			
		КонецЕсли;
		
		Если ОбновитьГраницу Тогда
			
			НоваяЗапись = РегистрыСведений.ГраницыВзаиморасчетов.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДоговорВзаиморасчетов = Договор;
			НоваяЗапись.МоментВремени         = МоментФиксации.Дата;
			НоваяЗапись.ДокументСсылка        = МоментФиксации.Ссылка;
			НоваяЗапись.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Заказы

// Фиксирует движения документа в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура ДвиженияПоЗаказамПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства)
		ИЛИ ДополнительныеСвойства.Свойство("ДвиженияПоЗаказамПередПроведением") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Регистры = Новый Структура();
	Регистры.Вставить("ЗаказыПокупателей", Метаданные.РегистрыНакопления.ЗаказыПокупателей);
	Регистры.Вставить("ЗаказыПоставщикам", Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
	Регистры.Вставить("ЗаказыРаспределение", Метаданные.РегистрыНакопления.ЗаказыРаспределение);
	ОписаниеДвижений = Документ.Метаданные().Движения;
	Результат = Новый Структура();
	
	Для Каждого Регистр Из Регистры Цикл
		
		Если НЕ ОписаниеДвижений.Содержит(Регистр.Значение) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Вставить(Регистр.Ключ, ДвиженияПоРегистру(Документ, Регистр.Значение));
		
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ДвиженияПоЗаказамПередПроведением", Результат);
	
КонецПроцедуры

// Сдвигает границу по заказам.
//
// Параметры:
//  Документ				 - ДокументСсылка    - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура         - Дополнительные свойства объекта.
//  ТекущиеДвижения			 - КоллекцияДвижений - текущие движения документа.
//
Процедура СдвинутьГраницуЗаказов(Документ, ДополнительныеСвойства, ТекущиеДвижения) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МоментВремениБыл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "МоментВремениБыл");
	ДвиженияДо = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ДвиженияПоЗаказамПередПроведением");
	ДвиженияСейчас = Новый Структура();
	
	Если ДвиженияДо.Свойство("ЗаказыПокупателей") Тогда
		
		ДвиженияСейчас.Вставить("ЗаказыПокупателей", ТекущиеДвижения.ЗаказыПокупателей.Выгрузить());
		
	КонецЕсли;
	
	Если ДвиженияДо.Свойство("ЗаказыПоставщикам") Тогда
		
		ДвиженияСейчас.Вставить("ЗаказыПоставщикам", ТекущиеДвижения.ЗаказыПоставщикам.Выгрузить());
		
	КонецЕсли;
	
	Если ДвиженияДо.Свойство("ЗаказыРаспределение") Тогда
		
		ДвиженияСейчас.Вставить("ЗаказыРаспределение", ТекущиеДвижения.ЗаказыРаспределение.Выгрузить());
		
	КонецЕсли;
	
	НовыйМоментВремени = ПолучитьЗначениеПараметраСтруктуры
							(ДополнительныеСвойства, "НовыйМоментВремени", Документ.МоментВремени());
	Если НЕ (
		МоментВремениБыл <> НовыйМоментВремени
		ИЛИ (ДвиженияДо.Свойство("ЗаказыПокупателей") И ДвиженияИзменились(ДвиженияДо.ЗаказыПокупателей, ДвиженияСейчас.ЗаказыПокупателей))
		ИЛИ (ДвиженияДо.Свойство("ЗаказыПоставщикам") И ДвиженияИзменились(ДвиженияДо.ЗаказыПоставщикам, ДвиженияСейчас.ЗаказыПоставщикам))
		ИЛИ (ДвиженияДо.Свойство("ЗаказыРаспределение") И ДвиженияИзменились(ДвиженияДо.ЗаказыРаспределение, ДвиженияСейчас.ЗаказыРаспределение))
	) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментФиксации = МоментФиксации(НовыйМоментВремени, МоментВремениБыл);
	ОтборПоАналитикамЗаказыПокупателей = "И ТаблицаДвижений.Заказ В (&ЗаказыПокупателей)";
	ОтборПоАналитикамЗаказыПоставщикам = "И ТаблицаДвижений.ЗаказПоставщику В (&ЗаказыПоставщикам)";
	ОтборПоАналитикамЗаказыРаспределение = "И ТаблицаДвижений.ЗаказПокупателя В (&ЗаказыПокупателей)
	|И ТаблицаДвижений.ЗаказПоставщика В (&ЗаказыПоставщикам)";
	ЗаказыПокупателей = Новый Массив;
	ЗаказыПоставщикам = Новый Массив;
	
	Если ДвиженияДо.Свойство("ЗаказыПокупателей") Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗаказыПокупателей, ДвиженияДо.ЗаказыПокупателей.ВыгрузитьКолонку("Заказ"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗаказыПокупателей, ДвиженияСейчас.ЗаказыПокупателей.ВыгрузитьКолонку("Заказ"), Истина);
		
	КонецЕсли;
	
	Если ДвиженияДо.Свойство("ЗаказыПоставщикам") Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗаказыПоставщикам, ДвиженияДо.ЗаказыПоставщикам.ВыгрузитьКолонку("ЗаказПоставщику"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗаказыПоставщикам, ДвиженияСейчас.ЗаказыПоставщикам.ВыгрузитьКолонку("ЗаказПоставщику"), Истина);
		
	КонецЕсли;
	
	Если ДвиженияДо.Свойство("ЗаказыРаспределение") Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ЗаказыПокупателей, ДвиженияДо.ЗаказыРаспределение.ВыгрузитьКолонку("ЗаказПокупателя"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ЗаказыПокупателей, ДвиженияСейчас.ЗаказыРаспределение.ВыгрузитьКолонку("ЗаказПокупателя"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ЗаказыПоставщикам, ДвиженияДо.ЗаказыРаспределение.ВыгрузитьКолонку("ЗаказПоставщика"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ЗаказыПоставщикам, ДвиженияСейчас.ЗаказыРаспределение.ВыгрузитьКолонку("ЗаказПоставщика"), Истина);
		
	КонецЕсли;
	
	ЗначенияАналитик = Новый Структура("ЗаказыПокупателей,ЗаказыПоставщикам", ЗаказыПокупателей, ЗаказыПоставщикам);
	
	Если НЕ (
		(ДвиженияДо.Свойство("ЗаказыПокупателей")
			И ЕстьДокументыПосле(Документ, МоментФиксации, "ЗаказыПокупателей", ОтборПоАналитикамЗаказыПокупателей, ЗначенияАналитик))
		ИЛИ (ДвиженияДо.Свойство("ЗаказыПоставщикам")
			И ЕстьДокументыПосле(Документ, МоментФиксации, "ЗаказыПоставщикам", ОтборПоАналитикамЗаказыПоставщикам, ЗначенияАналитик))
		ИЛИ (ДвиженияДо.Свойство("ЗаказыРаспределение")
			И ЕстьДокументыПосле(Документ, МоментФиксации, "ЗаказыРаспределение", ОтборПоАналитикамЗаказыРаспределение, ЗначенияАналитик))
	) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Заказы = ЗаказыПокупателей;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Заказы, ЗаказыПоставщикам);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГраницыЗаказы.Заказ КАК Заказ,
	|	ГраницыЗаказы.МоментВремени КАК МоментВремени,
	|	ГраницыЗаказы.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.ГраницыЗаказы КАК ГраницыЗаказы
	|ГДЕ
	|	ГраницыЗаказы.Заказ В(&Заказы)");
	Запрос.УстановитьПараметр("Заказы", Заказы);
	ТекущиеГраницы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Заказ Из Заказы Цикл
		
		СтрокиПоУсловию = ТекущиеГраницы.НайтиСтроки(Новый Структура("Заказ", Заказ));
		ОбновитьГраницу = Истина;
		
		Если СтрокиПоУсловию.Количество() Тогда
			
			МоментВремениКПроверке = Новый МоментВремени(СтрокиПоУсловию[0].МоментВремени, СтрокиПоУсловию[0].ДокументСсылка);
			ОбновитьГраницу = (МоментФиксации.Сравнить(МоментВремениКПроверке) = -1);
			
		КонецЕсли;
		
		Если ОбновитьГраницу Тогда
			
			НоваяЗапись = РегистрыСведений.ГраницыЗаказы.СоздатьМенеджерЗаписи();
			НоваяЗапись.Заказ = Заказ;
			НоваяЗапись.МоментВремени = МоментФиксации.Дата;
			НоваяЗапись.ДокументСсылка = МоментФиксации.Ссылка;
			НоваяЗапись.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Партии

// Фиксирует движения документа в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура ДвиженияПоПартиямПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства)
		ИЛИ ДополнительныеСвойства.Свойство("ДвиженияПартийПередПроведением") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДвиженияПартийПередПроведением",
		ДвиженияПоРегистру(Документ, Метаданные.РегистрыНакопления.ПартииТоваровКомпании));
	
КонецПроцедуры

// Сдвигает границу по партиям.
//
// Параметры:
//  Документ				 - ДокументСсылка    - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура         - Дополнительные свойства объекта.
//  ТекущиеДвижения			 - КоллекцияДвижений - текущие движения документа.
//
Процедура СдвинутьГраницуПартий(Документ, ДополнительныеСвойства, ТекущиеДвижения) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МоментВремениБыл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "МоментВремениБыл");
	ДвиженияДо = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ДвиженияПартийПередПроведением");
	ДвиженияСейчас = ТекущиеДвижения.ПартииТоваровКомпании.Выгрузить();
	
	НовыйМоментВремени = ПолучитьЗначениеПараметраСтруктуры
							(ДополнительныеСвойства, "НовыйМоментВремени", Документ.МоментВремени());
	Если НЕ (МоментВремениБыл <> НовыйМоментВремени ИЛИ ДвиженияИзменились(ДвиженияДо, ДвиженияСейчас)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментФиксации = МоментФиксации(НовыйМоментВремени, МоментВремениБыл);
	ОтборПоАналитикам = "И ТаблицаДвижений.СкладКомпании В (&Склады)";
	Склады = ДвиженияДо.ВыгрузитьКолонку("СкладКомпании");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Склады, ДвиженияСейчас.ВыгрузитьКолонку("СкладКомпании"), Истина);
	ЗначенияАналитик = Новый Структура("Склады", Склады);
	
	Если НЕ ЕстьДокументыПосле(Документ, МоментФиксации, "ПартииТоваровКомпании", ОтборПоАналитикам, ЗначенияАналитик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГраницыПартий.СкладКомпании КАК СкладКомпании,
	|	ГраницыПартий.МоментВремени КАК МоментВремени,
	|	ГраницыПартий.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.ГраницыПартий КАК ГраницыПартий
	|ГДЕ
	|	ГраницыПартий.СкладКомпании В(&Склады)");
	Запрос.УстановитьПараметр("Склады", Склады);
	ТекущиеГраницы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Склад Из Склады Цикл
		
		СтрокиПоУсловию = ТекущиеГраницы.НайтиСтроки(Новый Структура("СкладКомпании", Склад));
		ОбновитьГраницу = Истина;
		
		Если СтрокиПоУсловию.Количество() Тогда
			
			МоментВремениКПроверке = Новый МоментВремени(СтрокиПоУсловию[0].МоментВремени, СтрокиПоУсловию[0].ДокументСсылка);
			ОбновитьГраницу = (МоментФиксации.Сравнить(МоментВремениКПроверке) = -1);
			
		КонецЕсли;
		
		Если ОбновитьГраницу Тогда
			
			НоваяЗапись = РегистрыСведений.ГраницыПартий.СоздатьМенеджерЗаписи();
			НоваяЗапись.СкладКомпании = Склад;
			НоваяЗапись.МоментВремени = МоментФиксации.Дата;
			НоваяЗапись.ДокументСсылка = МоментФиксации.Ссылка;
			НоваяЗапись.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОрдерныйУчет

// Фиксирует движения документа в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура ДвиженияПоОрдерномуУчетуПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства)
		ИЛИ ДополнительныеСвойства.Свойство("ДвиженияОрдерныйУчетПередПроведением") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДвиженияОрдерныйУчетПередПроведением",
		ДвиженияПоРегистру(Документ, Метаданные.РегистрыНакопления.ОстаткиТоваровОрдерныйСклад));
	
КонецПроцедуры

// Сдвигает границу ордерного учета.
//
// Параметры:
//  Документ				 - ДокументСсылка    - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура         - Дополнительные свойства объекта.
//  ТекущиеДвижения			 - КоллекцияДвижений - текущие движения документа.
//
Процедура СдвинутьГраницуОрдерногоУчета(Документ, ДополнительныеСвойства, ТекущиеДвижения) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МоментВремениБыл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "МоментВремениБыл");
	ДвиженияДо = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ДвиженияОрдерныйУчетПередПроведением");
	ДвиженияСейчас = ТекущиеДвижения.ОстаткиТоваровОрдерныйСклад.Выгрузить();
	
	НовыйМоментВремени = ПолучитьЗначениеПараметраСтруктуры
							(ДополнительныеСвойства, "НовыйМоментВремени", Документ.МоментВремени());
	Если НЕ (МоментВремениБыл <> НовыйМоментВремени ИЛИ ДвиженияИзменились(ДвиженияДо, ДвиженияСейчас)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментФиксации = МоментФиксации(НовыйМоментВремени, МоментВремениБыл);
	ОтборПоАналитикам = "И ТаблицаДвижений.СкладКомпании В (&Склады)";
	Склады = ДвиженияДо.ВыгрузитьКолонку("СкладКомпании");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Склады, ДвиженияСейчас.ВыгрузитьКолонку("СкладКомпании"), Истина);
	ЗначенияАналитик = Новый Структура("Склады", Склады);
	
	Если НЕ ЕстьДокументыПосле(Документ, МоментФиксации, "ОстаткиТоваровОрдерныйСклад", ОтборПоАналитикам, ЗначенияАналитик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГраницыОрдерныйСклад.СкладКомпании КАК СкладКомпании,
	|	ГраницыОрдерныйСклад.МоментВремени КАК МоментВремени,
	|	ГраницыОрдерныйСклад.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.ГраницыОрдерныйСклад КАК ГраницыОрдерныйСклад
	|ГДЕ
	|	ГраницыОрдерныйСклад.СкладКомпании В(&Склады)");
	Запрос.УстановитьПараметр("Склады", Склады);
	ТекущиеГраницы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Склад Из Склады Цикл
		
		СтрокиПоУсловию = ТекущиеГраницы.НайтиСтроки(Новый Структура("СкладКомпании", Склад));
		ОбновитьГраницу = Истина;
		
		Если СтрокиПоУсловию.Количество() Тогда
			
			МоментВремениКПроверке = Новый МоментВремени(СтрокиПоУсловию[0].МоментВремени, СтрокиПоУсловию[0].ДокументСсылка);
			ОбновитьГраницу = (МоментФиксации.Сравнить(МоментВремениКПроверке) = -1);
			
		КонецЕсли;
		
		Если ОбновитьГраницу Тогда
			
			НоваяЗапись = РегистрыСведений.ГраницыОрдерныйСклад.СоздатьМенеджерЗаписи();
			НоваяЗапись.СкладКомпании = Склад;
			НоваяЗапись.МоментВремени = МоментФиксации.Дата;
			НоваяЗапись.ДокументСсылка = МоментФиксации.Ссылка;
			НоваяЗапись.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Фиксирует движения документа в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура ДвиженияПоОрдерномуУчетуАвтомобилейПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства)
		ИЛИ ДополнительныеСвойства.Свойство("ДвиженияОрдерныйУчетАвтомобилейПередПроведением") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДвиженияОрдерныйУчетАвтомобилейПередПроведением",
		ДвиженияПоРегистру(Документ, Метаданные.РегистрыНакопления.ОстаткиАвтомобилейОрдерныйСклад));
	
КонецПроцедуры

// Сдвигает границу ордерного учета автомобилей.
//
// Параметры:
//  Документ				 - ДокументСсылка    - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура         - Дополнительные свойства объекта.
//  ТекущиеДвижения			 - КоллекцияДвижений - текущие движения документа.
//
Процедура СдвинутьГраницуОрдерногоУчетаПоАвтомобилям(Документ, ДополнительныеСвойства, ТекущиеДвижения) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МоментВремениБыл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "МоментВремениБыл");
	ДвиженияДо = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ДвиженияОрдерныйУчетАвтомобилейПередПроведением");
	ДвиженияСейчас = ТекущиеДвижения.ОстаткиАвтомобилейОрдерныйСклад.Выгрузить();
	
	НовыйМоментВремени = ПолучитьЗначениеПараметраСтруктуры
							(ДополнительныеСвойства, "НовыйМоментВремени", Документ.МоментВремени());
	Если НЕ (МоментВремениБыл <> НовыйМоментВремени ИЛИ ДвиженияИзменились(ДвиженияДо, ДвиженияСейчас)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментФиксации = МоментФиксации(НовыйМоментВремени, МоментВремениБыл);
	ОтборПоАналитикам = "И ТаблицаДвижений.СкладКомпании В (&Склады)";
	Склады = ДвиженияДо.ВыгрузитьКолонку("СкладКомпании");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Склады, ДвиженияСейчас.ВыгрузитьКолонку("СкладКомпании"), Истина);
	ЗначенияАналитик = Новый Структура("Склады", Склады);
	
	Если НЕ ЕстьДокументыПосле(Документ, МоментФиксации, "ОстаткиАвтомобилейОрдерныйСклад", ОтборПоАналитикам, ЗначенияАналитик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГраницыОрдерныйСклад.СкладКомпании КАК СкладКомпании,
	|	ГраницыОрдерныйСклад.МоментВремени КАК МоментВремени,
	|	ГраницыОрдерныйСклад.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.ГраницыАвтомобилиОрдерныйСклад КАК ГраницыОрдерныйСклад
	|ГДЕ
	|	ГраницыОрдерныйСклад.СкладКомпании В(&Склады)");
	Запрос.УстановитьПараметр("Склады", Склады);
	ТекущиеГраницы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Склад Из Склады Цикл
		
		СтрокиПоУсловию = ТекущиеГраницы.НайтиСтроки(Новый Структура("СкладКомпании", Склад));
		ОбновитьГраницу = Истина;
		
		Если СтрокиПоУсловию.Количество() Тогда
			
			МоментВремениКПроверке = Новый МоментВремени(СтрокиПоУсловию[0].МоментВремени, СтрокиПоУсловию[0].ДокументСсылка);
			ОбновитьГраницу = (МоментФиксации.Сравнить(МоментВремениКПроверке) = -1);
			
		КонецЕсли;
		
		Если ОбновитьГраницу Тогда
			
			НоваяЗапись = РегистрыСведений.ГраницыАвтомобилиОрдерныйСклад.СоздатьМенеджерЗаписи();
			НоваяЗапись.СкладКомпании = Склад;
			НоваяЗапись.МоментВремени = МоментФиксации.Дата;
			НоваяЗапись.ДокументСсылка = МоментФиксации.Ссылка;
			НоваяЗапись.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОстаткиАвтомобилей

// Фиксирует движения документа в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура ДвиженияПоОстаткамАвтомобилейПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства)
		ИЛИ ДополнительныеСвойства.Свойство("ДвиженияОстаткиАвтомобилейПередПроведением") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДвиженияОстаткиАвтомобилейПередПроведением",
		ДвиженияПоРегистру(Документ, Метаданные.РегистрыНакопления.ОстаткиАвтомобилей));
	
КонецПроцедуры

// Сдвигает границу остатков автомобилей.
//
// Параметры:
//  Документ				 - ДокументСсылка    - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура         - Дополнительные свойства объекта.
//  ТекущиеДвижения			 - КоллекцияДвижений - текущие движения документа.
//
Процедура СдвинутьГраницуОстатковАвтомобилей(Документ, ДополнительныеСвойства, ТекущиеДвижения) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МоментВремениБыл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "МоментВремениБыл");
	ДвиженияДо = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ДвиженияОстаткиАвтомобилейПередПроведением");
	ДвиженияСейчас = ТекущиеДвижения.ОстаткиАвтомобилей.Выгрузить();
	
	НовыйМоментВремени = ПолучитьЗначениеПараметраСтруктуры
							(ДополнительныеСвойства, "НовыйМоментВремени", Документ.МоментВремени());
	Если НЕ (МоментВремениБыл <> НовыйМоментВремени ИЛИ ДвиженияИзменились(ДвиженияДо, ДвиженияСейчас)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментФиксации = МоментФиксации(НовыйМоментВремени, МоментВремениБыл);
	ОтборПоАналитикам = "И ТаблицаДвижений.СкладКомпании В (&Склады)";
	Склады = ДвиженияДо.ВыгрузитьКолонку("СкладКомпании");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Склады, ДвиженияСейчас.ВыгрузитьКолонку("СкладКомпании"), Истина);
	ЗначенияАналитик = Новый Структура("Склады", Склады);
	
	Если НЕ ЕстьДокументыПосле(Документ, МоментФиксации, "ОстаткиАвтомобилей", ОтборПоАналитикам, ЗначенияАналитик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГраницыАвтомобили.СкладКомпании КАК СкладКомпании,
	|	ГраницыАвтомобили.МоментВремени КАК МоментВремени,
	|	ГраницыАвтомобили.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.ГраницыАвтомобили КАК ГраницыАвтомобили
	|ГДЕ
	|	ГраницыАвтомобили.СкладКомпании В(&Склады)");
	Запрос.УстановитьПараметр("Склады", Склады);
	ТекущиеГраницы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Склад Из Склады Цикл
		
		СтрокиПоУсловию = ТекущиеГраницы.НайтиСтроки(Новый Структура("СкладКомпании", Склад));
		ОбновитьГраницу = Истина;
		
		Если СтрокиПоУсловию.Количество() Тогда
			
			МоментВремениКПроверке = Новый МоментВремени(СтрокиПоУсловию[0].МоментВремени, СтрокиПоУсловию[0].ДокументСсылка);
			ОбновитьГраницу = (МоментФиксации.Сравнить(МоментВремениКПроверке) = -1);
			
		КонецЕсли;
		
		Если ОбновитьГраницу Тогда
			
			НоваяЗапись = РегистрыСведений.ГраницыАвтомобили.СоздатьМенеджерЗаписи();
			НоваяЗапись.СкладКомпании = Склад;
			НоваяЗапись.МоментВремени = МоментФиксации.Дата;
			НоваяЗапись.ДокументСсылка = МоментФиксации.Ссылка;
			НоваяЗапись.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказыАвтомобилей

// Фиксирует движения документа в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура ДвиженияПоЗаказамАвтомобилейПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства)
			ИЛИ ДополнительныеСвойства.Свойство("ДвиженияПоЗаказамАвтомобилейПередПроведением") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Регистры = Новый Структура();
	Регистры.Вставить("ЗаказыПокупателей", Метаданные.РегистрыНакопления.ЗаказыАвтомобилей);
	Регистры.Вставить("ЗаказыПоставщикам", Метаданные.РегистрыНакопления.ЗаказыПоставщикамНаАвтомобили);
	ОписаниеДвижений = Документ.Метаданные().Движения;
	Результат = Новый Структура();
	
	Для Каждого Регистр Из Регистры Цикл
		
		Если НЕ ОписаниеДвижений.Содержит(Регистр.Значение) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Вставить(Регистр.Ключ, ДвиженияПоРегистру(Документ, Регистр.Значение));
		
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ДвиженияПоЗаказамАвтомобилейПередПроведением", Результат);
	
КонецПроцедуры

// Сдвигает границу заказов автомобилей.
//
// Параметры:
//  Документ				 - ДокументСсылка    - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура         - Дополнительные свойства объекта.
//  ТекущиеДвижения			 - КоллекцияДвижений - текущие движения документа.
//
Процедура СдвинутьГраницуЗаказовАвтомобилей(Документ, ДополнительныеСвойства, ТекущиеДвижения) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МоментВремениБыл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "МоментВремениБыл");
	ДвиженияДо = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ДвиженияПоЗаказамАвтомобилейПередПроведением");
	ДвиженияСейчас = Новый Структура();
	
	Если ДвиженияДо.Свойство("ЗаказыПокупателей") Тогда
		
		ДвиженияСейчас.Вставить("ЗаказыПокупателей", ТекущиеДвижения.ЗаказыАвтомобилей.Выгрузить());
		
	КонецЕсли;
	
	Если ДвиженияДо.Свойство("ЗаказыПоставщикам") Тогда
		
		ДвиженияСейчас.Вставить("ЗаказыПоставщикам", ТекущиеДвижения.ЗаказыПоставщикамНаАвтомобили.Выгрузить());
		
	КонецЕсли;
	
	НовыйМоментВремени = ПолучитьЗначениеПараметраСтруктуры
							(ДополнительныеСвойства, "НовыйМоментВремени", Документ.МоментВремени());
	Если НЕ (
		МоментВремениБыл <> НовыйМоментВремени
		ИЛИ (ДвиженияДо.Свойство("ЗаказыПокупателей") И ДвиженияИзменились(ДвиженияДо.ЗаказыПокупателей, ДвиженияСейчас.ЗаказыПокупателей))
		ИЛИ (ДвиженияДо.Свойство("ЗаказыПоставщикам") И ДвиженияИзменились(ДвиженияДо.ЗаказыПоставщикам, ДвиженияСейчас.ЗаказыПоставщикам))
	) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментФиксации = МоментФиксации(НовыйМоментВремени, МоментВремениБыл);
	ОписаниеТипаАвтомобили = Новый ОписаниеТипов("СправочникСсылка.Автомобили");
	ТипыЗаказов = Новый Массив();
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.ЗаказНаАвтомобиль"));
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили"));
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.РезервированиеАвтомобилей"));
	АналитикиЗаказыПокупателей = Новый ТаблицаЗначений;
	АналитикиЗаказыПокупателей.Колонки.Добавить("Автомобиль", ОписаниеТипаАвтомобили);
	АналитикиЗаказыПокупателей.Колонки.Добавить("Заказ", Новый ОписаниеТипов(ТипыЗаказов));
	АналитикиЗаказыПоставщикам = Новый ТаблицаЗначений;
	АналитикиЗаказыПоставщикам.Колонки.Добавить("Автомобиль", ОписаниеТипаАвтомобили);
	ТипыЗаказов = Новый Массив();
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль"));
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.ОптовыйЗаказПоставщикуНаАвтомобили"));
	АналитикиЗаказыПоставщикам.Колонки.Добавить("ЗаказПоставщику", Новый ОписаниеТипов(ТипыЗаказов));
	
	Если ДвиженияДо.Свойство("ЗаказыПокупателей") Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ДвиженияДо.ЗаказыПокупателей.Скопировать(, "Автомобиль,Заказ"), АналитикиЗаказыПокупателей);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ДвиженияСейчас.ЗаказыПокупателей.Скопировать(, "Автомобиль,Заказ"), АналитикиЗаказыПокупателей);
		
	КонецЕсли;
	
	Если ДвиженияДо.Свойство("ЗаказыПоставщикам") Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ДвиженияДо.ЗаказыПоставщикам.Скопировать(, "Автомобиль,ЗаказПоставщику"), АналитикиЗаказыПоставщикам);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ДвиженияСейчас.ЗаказыПоставщикам.Скопировать(, "Автомобиль,ЗаказПоставщику"), АналитикиЗаказыПоставщикам);
		
	КонецЕсли;
	
	ЗначенияАналитик = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗаказовПокупателей.Автомобиль КАК Автомобиль,
	|	ТаблицаЗаказовПокупателей.Заказ КАК Заказ
	|ПОМЕСТИТЬ ТаблицаЗаказовПокупателей
	|ИЗ
	|	&ТаблицаЗаказовПокупателейИсточник КАК ТаблицаЗаказовПокупателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗаказовПоставщикам.Автомобиль КАК Автомобиль,
	|	ТаблицаЗаказовПоставщикам.ЗаказПоставщику КАК Заказ
	|ПОМЕСТИТЬ ТаблицаЗаказовПоставщикам
	|ИЗ
	|	&ТаблицаЗаказовПоставщикамИсточник КАК ТаблицаЗаказовПоставщикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказовПокупателей.Автомобиль КАК Автомобиль,
	|	ТаблицаЗаказовПокупателей.Заказ КАК Заказ
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	ТаблицаЗаказовПокупателей КАК ТаблицаЗаказовПокупателей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗаказовПоставщикам.Автомобиль,
	|	ТаблицаЗаказовПоставщикам.Заказ
	|ИЗ
	|	ТаблицаЗаказовПоставщикам КАК ТаблицаЗаказовПоставщикам");
	Запрос.МенеджерВременныхТаблиц = ЗначенияАналитик;
	Запрос.УстановитьПараметр("ТаблицаЗаказовПокупателейИсточник", АналитикиЗаказыПокупателей);
	Запрос.УстановитьПараметр("ТаблицаЗаказовПоставщикамИсточник", АналитикиЗаказыПоставщикам);
	Запрос.Выполнить();
	
	ОтборПоАналитикамЗаказыПокупателей = "И (ТаблицаДвижений.Автомобиль, ТаблицаДвижений.Заказ) В
	|(ВЫБРАТЬ ТаблицаЗаказовПокупателей.Автомобиль, ТаблицаЗаказовПокупателей.Заказ ИЗ ТаблицаЗаказовПокупателей КАК ТаблицаЗаказовПокупателей)";
	ОтборПоАналитикамЗаказыПоставщикам = "И (ТаблицаДвижений.Автомобиль, ТаблицаДвижений.ЗаказПоставщику) В
	|(ВЫБРАТЬ ТаблицаЗаказовПоставщикам.Автомобиль, ТаблицаЗаказовПоставщикам.Заказ ИЗ ТаблицаЗаказовПоставщикам КАК ТаблицаЗаказовПоставщикам)";
	
	Если НЕ (
		ЕстьДокументыПосле(Документ, МоментФиксации, "ЗаказыАвтомобилей", ОтборПоАналитикамЗаказыПокупателей, ЗначенияАналитик)
		ИЛИ ЕстьДокументыПосле(Документ, МоментФиксации, "ЗаказыПоставщикамНаАвтомобили", ОтборПоАналитикамЗаказыПоставщикам, ЗначенияАналитик)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаЗаказов.Автомобиль,
	|	ТаблицаЗаказов.Заказ
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|
	|;
	|
	|ВЫБРАТЬ
	|	ГраницыЗаказыНаАвтомобили.Автомобиль КАК Автомобиль,
	|	ГраницыЗаказыНаАвтомобили.Заказ КАК Заказ,
	|	ГраницыЗаказыНаАвтомобили.МоментВремени КАК МоментВремени,
	|	ГраницыЗаказыНаАвтомобили.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.ГраницыЗаказыНаАвтомобили КАК ГраницыЗаказыНаАвтомобили
	|ГДЕ
	|	(ГраницыЗаказыНаАвтомобили.Автомобиль, ГраницыЗаказыНаАвтомобили.Заказ) В
	|			(ВЫБРАТЬ
	|				ТаблицаЗаказов.Автомобиль,
	|				ТаблицаЗаказов.Заказ
	|			ИЗ
	|				ТаблицаЗаказов КАК ТаблицаЗаказов)");
	Запрос.МенеджерВременныхТаблиц = ЗначенияАналитик;
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Аналитики = РезультатыЗапроса[0].Выбрать();
	ТекущиеГраницы = РезультатыЗапроса[1].Выгрузить();
	УсловиеПоиска = Новый Структура("Автомобиль,Заказ");
	
	Пока Аналитики.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, Аналитики);
		СтрокиПоУсловию = ТекущиеГраницы.НайтиСтроки(УсловиеПоиска);
		ОбновитьГраницу = Истина;
		
		Если СтрокиПоУсловию.Количество() Тогда
			
			МоментВремениКПроверке = Новый МоментВремени(СтрокиПоУсловию[0].МоментВремени, СтрокиПоУсловию[0].ДокументСсылка);
			ОбновитьГраницу = (МоментФиксации.Сравнить(МоментВремениКПроверке) = -1);
			
		КонецЕсли;
		
		Если ОбновитьГраницу Тогда
			
			НоваяЗапись = РегистрыСведений.ГраницыЗаказыНаАвтомобили.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Аналитики);
			НоваяЗапись.МоментВремени = МоментФиксации.Дата;
			НоваяЗапись.ДокументСсылка = МоментФиксации.Ссылка;
			НоваяЗапись.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Комплектация

// Фиксирует движения документа в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура ДвиженияПоКомплектацииПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства)
		ИЛИ ДополнительныеСвойства.Свойство("ДвиженияКомплектацииПередПроведением") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДвиженияКомплектацииПередПроведением",
		ДвиженияПоРегистру(Документ, Метаданные.РегистрыНакопления.КомплектацияАвтомобилей));
	
КонецПроцедуры

// Сдвигает границу комплектации.
//
// Параметры:
//  Документ				 - ДокументСсылка    - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура         - Дополнительные свойства объекта.
//  ТекущиеДвижения			 - КоллекцияДвижений - текущие движения документа.
//
Процедура СдвинутьГраницуКомплектации(Документ, ДополнительныеСвойства, ТекущиеДвижения) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МоментВремениБыл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "МоментВремениБыл");
	ДвиженияДо = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ДвиженияКомплектацииПередПроведением");
	ДвиженияСейчас = ТекущиеДвижения.КомплектацияАвтомобилей.Выгрузить();
	
	НовыйМоментВремени = ПолучитьЗначениеПараметраСтруктуры
							(ДополнительныеСвойства, "НовыйМоментВремени", Документ.МоментВремени());
	Если НЕ (МоментВремениБыл <> НовыйМоментВремени ИЛИ ДвиженияИзменились(ДвиженияДо, ДвиженияСейчас)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментФиксации = МоментФиксации(НовыйМоментВремени, МоментВремениБыл);
	Аналитики = ДвиженияДо.Скопировать(, "Автомобиль,СкладКомпании");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДвиженияСейчас.Скопировать(, "Автомобиль,СкладКомпании"), Аналитики);
	
	ЗначенияАналитик = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточник.Автомобиль КАК Автомобиль,
	|	ТаблицаИсточник.СкладКомпании КАК СкладКомпании
	|ПОМЕСТИТЬ ТаблицаАналитик
	|ИЗ
	|	&ТаблицаИсточник КАК ТаблицаИсточник");
	Запрос.МенеджерВременныхТаблиц = ЗначенияАналитик;
	Запрос.УстановитьПараметр("ТаблицаИсточник", Аналитики);
	Запрос.Выполнить();
	
	ОтборПоАналитикам = "И (ТаблицаДвижений.Автомобиль, ТаблицаДвижений.СкладКомпании) В
	|(ВЫБРАТЬ ТаблицаАналитик.Автомобиль, ТаблицаАналитик.СкладКомпании ИЗ ТаблицаАналитик КАК ТаблицаАналитик)";
	
	Если НЕ ЕстьДокументыПосле(Документ, МоментФиксации, "КомплектацияАвтомобилей", ОтборПоАналитикам, ЗначенияАналитик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГраницыКомплектация.Автомобиль КАК Автомобиль,
	|	ГраницыКомплектация.СкладКомпании КАК СкладКомпании,
	|	ГраницыКомплектация.МоментВремени КАК МоментВремени,
	|	ГраницыКомплектация.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.ГраницыКомплектация КАК ГраницыКомплектация
	|ГДЕ
	|	(ГраницыКомплектация.Автомобиль, ГраницыКомплектация.СкладКомпании) В
	|			(ВЫБРАТЬ
	|				ТаблицаАналитик.Автомобиль,
	|				ТаблицаАналитик.СкладКомпании
	|			ИЗ
	|				ТаблицаАналитик КАК ТаблицаАналитик)");
	Запрос.МенеджерВременныхТаблиц = ЗначенияАналитик;
	ТекущиеГраницы = Запрос.Выполнить().Выгрузить();
	УсловиеПоиска = Новый Структура("Автомобиль,СкладКомпании");
	
	Для Каждого Аналитика Из Аналитики Цикл
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, Аналитика);
		СтрокиПоУсловию = ТекущиеГраницы.НайтиСтроки(УсловиеПоиска);
		ОбновитьГраницу = Истина;
		
		Если СтрокиПоУсловию.Количество() Тогда
			
			МоментВремениКПроверке = Новый МоментВремени(СтрокиПоУсловию[0].МоментВремени, СтрокиПоУсловию[0].ДокументСсылка);
			ОбновитьГраницу = (МоментФиксации.Сравнить(МоментВремениКПроверке) = -1);
			
		КонецЕсли;
		
		Если ОбновитьГраницу Тогда
			
			НоваяЗапись = РегистрыСведений.ГраницыКомплектация.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Аналитика);
			НоваяЗапись.МоментВремени = МоментФиксации.Дата;
			НоваяЗапись.ДокументСсылка = МоментФиксации.Ссылка;
			НоваяЗапись.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Производство

// Фиксирует движения документа в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура ДвиженияПоПроизводствуПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства)
		ИЛИ ДополнительныеСвойства.Свойство("ДвиженияПроизводстваПередПроведением") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДвиженияПроизводстваПередПроведением",
		ДвиженияПоРегистру(Документ, Метаданные.РегистрыНакопления.ТоварыВПроизводстве));
	
КонецПроцедуры

// Сдвигает границу производства.
//
// Параметры:
//  Документ				 - ДокументСсылка    - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура         - Дополнительные свойства объекта.
//  ТекущиеДвижения			 - КоллекцияДвижений - текущие движения документа.
//
Процедура СдвинутьГраницуПроизводства(Документ, ДополнительныеСвойства, ТекущиеДвижения) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МоментВремениБыл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "МоментВремениБыл");
	ДвиженияДо = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ДвиженияПроизводстваПередПроведением");
	ДвиженияСейчас = ТекущиеДвижения.ТоварыВПроизводстве.Выгрузить();
	
	НовыйМоментВремени = ПолучитьЗначениеПараметраСтруктуры
							(ДополнительныеСвойства, "НовыйМоментВремени", Документ.МоментВремени());
	Если НЕ (МоментВремениБыл <> НовыйМоментВремени ИЛИ ДвиженияИзменились(ДвиженияДо, ДвиженияСейчас)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментФиксации = МоментФиксации(НовыйМоментВремени, МоментВремениБыл);
	ОтборПоАналитикам = "И ТаблицаДвижений.ЗаказНаряд В (&ЗаказНаряды)";
	ЗаказНаряды = ДвиженияДо.ВыгрузитьКолонку("ЗаказНаряд");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗаказНаряды, ДвиженияСейчас.ВыгрузитьКолонку("ЗаказНаряд"), Истина);
	ЗначенияАналитик = Новый Структура("ЗаказНаряды", ЗаказНаряды);
	
	Если НЕ ЕстьДокументыПосле(Документ, МоментФиксации, "ТоварыВПроизводстве", ОтборПоАналитикам, ЗначенияАналитик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГраницыПроизводство.ЗаказНаряд КАК ЗаказНаряд,
	|	ГраницыПроизводство.МоментВремени КАК МоментВремени,
	|	ГраницыПроизводство.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.ГраницыПроизводство КАК ГраницыПроизводство
	|ГДЕ
	|	ГраницыПроизводство.ЗаказНаряд В(&ЗаказНаряды)");
	Запрос.УстановитьПараметр("ЗаказНаряды", ЗаказНаряды);
	ТекущиеГраницы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ЗаказНаряд Из ЗаказНаряды Цикл
		
		СтрокиПоУсловию = ТекущиеГраницы.НайтиСтроки(Новый Структура("ЗаказНаряд", ЗаказНаряд));
		ОбновитьГраницу = Истина;
		
		Если СтрокиПоУсловию.Количество() Тогда
			
			МоментВремениКПроверке = Новый МоментВремени(СтрокиПоУсловию[0].МоментВремени, СтрокиПоУсловию[0].ДокументСсылка);
			ОбновитьГраницу = (МоментФиксации.Сравнить(МоментВремениКПроверке) = -1);
			
		КонецЕсли;
		
		Если ОбновитьГраницу Тогда
			
			НоваяЗапись = РегистрыСведений.ГраницыПроизводство.СоздатьМенеджерЗаписи();
			НоваяЗапись.ЗаказНаряд = ЗаказНаряд;
			НоваяЗапись.МоментВремени = МоментФиксации.Дата;
			НоваяЗапись.ДокументСсылка = МоментФиксации.Ссылка;
			НоваяЗапись.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетыСКонтрагентами

// Фиксирует движения документа в дополнительных свойствах.
//
// Параметры:
//  Документ				 - ДокументСсылка - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура      - Дополнительные свойства объекта.
//
Процедура ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Документ, ДополнительныеСвойства) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства)
		ИЛИ ДополнительныеСвойства.Свойство("ДвиженияРасчетыСКонтрагентамиПередПроведением") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДвиженияРасчетыСКонтрагентамиПередПроведением",
		ДвиженияПоРегистру(Документ, Метаданные.РегистрыНакопления.РасчетыСКонтрагентами));
	
КонецПроцедуры

// Сдвигает границу расчетов с контрагентами.
//
// Параметры:
//  Документ				 - ДокументСсылка    - Ссылка на объект, для которого выполняется обработка события.
//  ДополнительныеСвойства	 - Структура         - Дополнительные свойства объекта.
//  ТекущиеДвижения			 - КоллекцияДвижений - текущие движения документа.
//
Процедура СдвинутьГраницуРасчетовСКонтрагентами(Документ, ДополнительныеСвойства, ТекущиеДвижения) Экспорт
	
	Если ЭтоОперативноеПроведение(ДополнительныеСвойства) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МоментВремениБыл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "МоментВремениБыл");
	ДвиженияДо = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ДвиженияРасчетыСКонтрагентамиПередПроведением");
	ДвиженияСейчас = ТекущиеДвижения.РасчетыСКонтрагентами.Выгрузить();
	
	НовыйМоментВремени = ПолучитьЗначениеПараметраСтруктуры
							(ДополнительныеСвойства, "НовыйМоментВремени", Документ.МоментВремени());
	Если НЕ (МоментВремениБыл <> НовыйМоментВремени ИЛИ ДвиженияИзменились(ДвиженияДо, ДвиженияСейчас)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МоментФиксации = МоментФиксации(НовыйМоментВремени, МоментВремениБыл);
	ОтборПоАналитикам = "И ТаблицаДвижений.ДоговорВзаиморасчетов В (&Договора)";
	Договора = ДвиженияДо.ВыгрузитьКолонку("ДоговорВзаиморасчетов");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Договора, ДвиженияСейчас.ВыгрузитьКолонку("ДоговорВзаиморасчетов"), Истина);
	ЗначенияАналитик = Новый Структура("Договора", Договора);
	
	Если НЕ ЕстьДокументыПосле(Документ, МоментФиксации, "РасчетыСКонтрагентами", ОтборПоАналитикам, ЗначенияАналитик) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГраницыРасчетыСКонтрагентами.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ГраницыРасчетыСКонтрагентами.МоментВремени КАК МоментВремени,
	|	ГраницыРасчетыСКонтрагентами.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.ГраницыРасчетыСКонтрагентами КАК ГраницыРасчетыСКонтрагентами
	|ГДЕ
	|	ГраницыРасчетыСКонтрагентами.ДоговорВзаиморасчетов В(&Договора)");
	Запрос.УстановитьПараметр("Договора", Договора);
	ТекущиеГраницы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Договор Из Договора Цикл
		
		СтрокиПоУсловию = ТекущиеГраницы.НайтиСтроки(Новый Структура("ДоговорВзаиморасчетов", Договор));
		ОбновитьГраницу = Истина;
		
		Если СтрокиПоУсловию.Количество() Тогда
			
			МоментВремениКПроверке = Новый МоментВремени(СтрокиПоУсловию[0].МоментВремени, СтрокиПоУсловию[0].ДокументСсылка);
			ОбновитьГраницу = (МоментФиксации.Сравнить(МоментВремениКПроверке) = -1);
			
		КонецЕсли;
		
		Если ОбновитьГраницу Тогда
			
			НоваяЗапись = РегистрыСведений.ГраницыРасчетыСКонтрагентами.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДоговорВзаиморасчетов = Договор;
			НоваяЗапись.МоментВремени         = МоментФиксации.Дата;
			НоваяЗапись.ДокументСсылка        = МоментФиксации.Ссылка;
			НоваяЗапись.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоОперативноеПроведение(ДополнительныеСвойства)
	
	РежимПроведения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "РежимПроведения");
	ЭтоНовый = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ЭтоНовый", Ложь);
	Возврат (РежимПроведения = РежимПроведенияДокумента.Оперативный) И ЭтоНовый;
	
КонецФункции

Функция ДвигаетРегистр(Объект, Регистр)
	
	Возврат Объект.Движения.Найти(Регистр) <> Неопределено;
	
КонецФункции

Функция ДвиженияПоРегистру(Документ, Регистр)
	
	ШаблонЗапроса = "ВЫБРАТЬ
	|	Регистр.Период КАК Период,
	|	Регистр.ВидДвижения КАК ВидДвижения,
	|	%2
	|ИЗ
	|	%1 КАК Регистр
	|ГДЕ
	|	Регистр.Регистратор = &Регистратор";
	ШаблонПоля = "Регистр.%1 КАК %1";
	ПоляЗапроса = Новый Массив;
	
	Для Каждого Измерение Из Регистр.Измерения Цикл
		
		ПоляЗапроса.Добавить(СтрШаблон(ШаблонПоля, Измерение.Имя));
		
	КонецЦикла;
	
	Для Каждого Измерение Из Регистр.Ресурсы Цикл
		
		ПоляЗапроса.Добавить(СтрШаблон(ШаблонПоля, Измерение.Имя));
		
	КонецЦикла;
	
	ТекстЗапроса = СтрШаблон(ШаблонЗапроса, Регистр.ПолноеИмя(), СтрСоединить(ПоляЗапроса, "," + Символы.ПС));
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", Документ);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция МоментФиксации(НовыйМоментВремени, МоментВремениБыл)
	
	МоментФиксации = НовыйМоментВремени;
	
	Если ЗначениеЗаполнено(МоментВремениБыл) И МоментВремениБыл.Сравнить(МоментФиксации) = -1 Тогда
		
		МоментФиксации = МоментВремениБыл;
		
	КонецЕсли;
	
	Возврат МоментФиксации;
	
КонецФункции

Функция ДвиженияИзменились(ДвиженияДо, ДвиженияСейчас)
	
	Если ТипЗнч(ДвиженияДо) <> Тип("ТаблицаЗначений") ИЛИ ДвиженияДо.Количество() <> ДвиженияСейчас.Количество() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПоляПоиска = Новый Массив;
	
	Для Каждого Колонка Из ДвиженияДо.Колонки Цикл
		
		ПоляПоиска.Добавить(Колонка.Имя);
		
	КонецЦикла;
	
	УсловиеПоиска = Новый Структура(СтрСоединить(ПоляПоиска, ","));
	
	Для Каждого Строка Из ДвиженияДо Цикл
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка);
		
		Если НЕ ДвиженияСейчас.НайтиСтроки(УсловиеПоиска).Количество() Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьДокументыПосле(Документ, МоментВремени, ИмяТаблицыДвижений, ОтборПоАналитикам="", ЗначенияАналитик=Неопределено)
	
	Запрос = Новый Запрос(СтрШаблон(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДвижений.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.%1 КАК ТаблицаДвижений
	|ГДЕ
	|	ТаблицаДвижений.Регистратор <> &Документ
	|	И ТаблицаДвижений.МоментВремени > &МоментФиксации
	|	%2", ИмяТаблицыДвижений, ОтборПоАналитикам));
	Запрос.УстановитьПараметр("МоментФиксации", МоментВремени);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Если ЗначенияАналитик <> Неопределено Тогда
		
		ТипАналитик = ТипЗнч(ЗначенияАналитик);
		
		Если ТипАналитик = Тип("Структура") Тогда
		
			Для Каждого КлючЗначение Из ЗначенияАналитик Цикл
				
				Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
				
			КонецЦикла;
			
		ИначеЕсли ТипАналитик = Тип("МенеджерВременныхТаблиц") Тогда
			
			Запрос.МенеджерВременныхТаблиц = ЗначенияАналитик;
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Не поддерживаемый тип аналитик. Ожидается Структура или МенеджерВременныхТаблиц'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

