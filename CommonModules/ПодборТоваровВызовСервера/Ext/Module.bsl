
#Область ПрограммныйИнтерфейс

// Запуск фонового задания для обновления замен номенклатуры.
//
// Параметры:
//  Артикул - Строка - Артикул для поиска. См. ПодборТоваровКлиентСервер.ВАртикулДляПоиска.
//  Производитель - СправочникСсылка.Производитель - Производитель.
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы.
//  ДополнительныеДанные - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Структура - Описание стартованого фоного задания. См.ДлительныеОперации.ВыполнитьВФоне возвращаемое значение.
//
Функция НачатьОбновлениеЗаменНоменклатуры(Артикул, Производитель, ИдентификаторФормы, ДополнительныеДанные=Неопределено) Экспорт
	
	ПараметрыПроцедуры = Новый Структура("Артикул,Производитель,ДополнительныеДанные", Артикул, Производитель, ДополнительныеДанные);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПодборТоваровСервер.ЗаменыНоменклатуры", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// ++ siniko

// Запуск фонового задания для обновления цен номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура.
//  ПодразделениеКомпании - СправочникСсылка.ПодразделенияКомпании - Подразделение цены.
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - Описание стартованого фоного задания. См.ДлительныеОперации.ВыполнитьВФоне возвращаемое значение.
//
Функция НачатьОбновлениеЦен(Номенклатура, ПодразделениеКомпании, ИдентификаторФормы) Экспорт
	
	ПараметрыПроцедуры = Новый Структура("Номенклатура", Номенклатура);
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		
		ПараметрыПроцедуры.Вставить("ПодразделениеКомпании", ПараметрыСеанса.ПодразделениеКомпании);
		
	Иначе
		
		ПараметрыПроцедуры.Вставить("ПодразделениеКомпании", ПодразделениеКомпании);
		
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПодборТоваровСервер.ЦеныНоменклатуры", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// Запуск фонового задания для обновления цен номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура.
//  ПодразделениеКомпании - СправочникСсылка.ПодразделенияКомпании - Подразделение цены.
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - Описание стартованого фоного задания. См.ДлительныеОперации.ВыполнитьВФоне возвращаемое значение.
//
Функция НачатьОбновлениеЦенКонтрагентов(Номенклатура, ПодразделениеКомпании, ИдентификаторФормы) Экспорт
	
	ПараметрыПроцедуры = Новый Структура("Номенклатура", Номенклатура);
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		
		ПараметрыПроцедуры.Вставить("ПодразделениеКомпании", ПараметрыСеанса.ПодразделениеКомпании);
		
	Иначе
		
		ПараметрыПроцедуры.Вставить("ПодразделениеКомпании", ПодразделениеКомпании);
		
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПодборТоваровСервер.ЦеныКонтрагентов", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// -- siniko

// Запуск фонового задания для поиска номенклатуры с учетом прайс-листов контрагнетов.
//
// Параметры:
//  Артикул - Строка - Параметры поиска. 
//  Наименование - Строка - Наименование параметра поиска.
//  ПараметрыПоиска - Структура - См. ПодборТоваровКлиент.НовыеПараметрыПоискаНоменклатуры() возвращаемое значение .
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - Описание стартованого фоного задания. См.ДлительныеОперации.ВыполнитьВФоне возвращаемое значение.
//
Функция НачатьПоискНоменклатуры(Артикул, Наименование, ПараметрыПоиска, ИдентификаторФормы) Экспорт
	
	ПараметрыПроцедуры = Новый Структура("Артикул, Наименование", Артикул, Наименование);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПроцедуры, ПараметрыПоиска);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПодборТоваровСервер.ПоискНоменклатуры", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// Определяет владельна характеристики номенклатуры: номенклатура, тип номенклатуры или не ведется.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура для которой ищем владельца.
// 
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура, СправочникСсылка.ТипыНоменклатуры, Неопределено.
//
Функция ВладелецХарактеристики(Номенклатура) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
	Реквизиты.Вставить("ИспользованиеХарактеристик", "ТипНоменклатуры.ИспользованиеХарактеристик");
	ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, Реквизиты);
	
	Если ЗначениеРеквизитов.ИспользованиеХарактеристик = 3 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ЗначениеРеквизитов.ИспользованиеХарактеристик = 1 Тогда
		
		Возврат ЗначениеРеквизитов.ТипНоменклатуры;
		
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции

// Подготовка таблицы документа для подбора замен.
//
// Параметры:
//  ТаблицаДокумента - ТаблицаЗначений - Таблица документа.
//  УникальныйИдентификатор - Строка - Адрес для хранения измененной таблицы.
// 
// Возвращаемое значение:
//  Строка - Путь к хранению таблицы результата.
//
Функция ПодготовитьТаблицуДокументаДляПодбораЗамен(Знач ТаблицаДокумента, УникальныйИдентификатор) Экспорт
	
	ДанныеДокумента = ТаблицаДокумента.Выгрузить();
	ДанныеДокумента.Очистить();
	
	ДанныеДокумента.Колонки.Добавить(
		"СтрокаВДокументе",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	
	Для Каждого Строка Из ТаблицаДокумента Цикл
		НоваяСтрока = ДанныеДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.СтрокаВДокументе = Строка.ПолучитьИдентификатор();
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеДокумента, УникальныйИдентификатор);

КонецФункции

#КонецОбласти
