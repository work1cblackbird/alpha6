////////////////////////////////////////////////////////////////////////////////
// СкидкиНаценкиСерверПереопределяемый: содержит ряд функций и процедур,
// используемых для расчета скидок и обработки связанных со скидками объектов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


// Формирует список значений возможных получателей скидок
//
// Параметры:
//  ЗаполняемыйСписок -СписокЗначений - Заполняемый список  значений возможных получателей скидок.
//
// Возвращаемое значение:
//   СписокЗначений - список значений возможных получателей скидок.
//
Функция ПолучитьСписокЗначенийПолучателейСкидок(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить("ВидыДисконтныхКарт"     , НСтр("ru = 'Вид дисконтной карты'"));
	ЗаполняемыйСписок.Добавить("ИнформационныеКарты"    , НСтр("ru = 'Дисконтная карта'"));
	ЗаполняемыйСписок.Добавить("ФизическиеЛица"         , НСтр("ru = 'Физическое лицо'"));
	ЗаполняемыйСписок.Добавить("Контрагенты"            , "Контрагент");
	ЗаполняемыйСписок.Добавить("ГруппыПолучателейСкидки", НСтр("ru = 'Группа получателей скидки'"));
	// + Диапазон карт
	ЗаполняемыйСписок.Добавить("ор_ПрефиксыДиапазоновКарт", НСтр("ru = 'Префиксы сторонних карт'"));
	// - Диапазон карт
	
	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийПолучателейСкидок()

// Получает значение типа получателя по умолчанию
//
// Возвращаемое значение:
//  Строка - тип значения получателя по умолчанию.
//
Функция ПолучитьТипЗначенияПолучателяСкидокПоУмолчанию() Экспорт

	Возврат "ВидыДисконтныхКарт";

КонецФункции // ПолучитьТипЗначенияПолучателяСкидокПоУмолчанию()


/////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА СКИДОК (НАЦЕНОК) ПО ДОКУМЕНТАМ

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаКурсыВалют() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	"""" КАК Валюта,
	|	1 КАК Курс,
	|	1 КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Результат = Новый Структура();
	Результат.Вставить("ТекстЗапроса",           ТекстЗапроса);
	Результат.Вставить("КоличествоТаблиц",       1);
	Результат.Вставить("НомерТаблицыРезультата", 1);
	Результат.Вставить("ИмяТаблицы",             "КурсыВалют");
	
	Возврат Результат;
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()


////////////////////////////////////////////////////////////////////////////////
// ОТОБРАЖЕНИЕ СКИДКИ

// Обновляет табличную Части скидки
//
// Параметры:
//  Объект - Объект - Чек ККМ или Реализация Товаров
//  ИмяТЧ - Строка - Имя табличной части
//  ИмяОсновнойТЧ - Строка - Имя табличной части.
//
Процедура ОбновитьОтображениеСкидки(Объект, ИмяОсновнойТЧ = "Товары", ИмяТЧ = "СкидкиНаценки") Экспорт

	ОсновнаяТаблица = Объект[ИмяОсновнойТЧ].Выгрузить();
	
	Для каждого СтрокаСкидкиНаценки Из Объект[ИмяТЧ] Цикл
		
		КлючСвязи = СтрокаСкидкиНаценки.КлючСвязи;
		
		СтрокаОсновнойТаблицы = ОсновнаяТаблица.Найти(КлючСвязи, "КлючСвязи");
		
		Если НЕ СтрокаОсновнойТаблицы = Неопределено Тогда
		
			СтрокаСкидкиНаценки.Номенклатура               = СтрокаОсновнойТаблицы.Номенклатура;
			СтрокаСкидкиНаценки.Характеристика             = СтрокаОсновнойТаблицы.Характеристика;
			СтрокаСкидкиНаценки.НомерСтрокиОсновойТаблицы  = СтрокаОсновнойТаблицы.НомерСтроки;
			СтрокаСкидкиНаценки.ХарактеристикиИспользуются = СтрокаОсновнойТаблицы.ХарактеристикиИспользуются
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // ОбновитьОтображениеСкидки()

// Функция формирует текст запроса для динамического списка номенклатуры в обработке "Подбор товаров",
// если включена функциональная опция использования ассортимента
// и подбор открыт с учетом отбора по ассортименту.
// Возвращаемое значение:
// 		ТекстЗапроса - Строка - итоговый текст запроса.
Функция ТекстЗапросаДинамическогоСпискаДляПодбора() Экспорт
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	СправочникНоменклатура.Ссылка КАК Номенклатура,
	             |	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	             |	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	             |	СправочникНоменклатура.Родитель КАК Родитель,
	             |	СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	             |	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	             |	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	             |	ВЫБОР
	             |		КОГДА СправочникНоменклатура.ЭтоГруппа
	             |			ТОГДА ВЫБОР
	             |					КОГДА СправочникНоменклатура.ПометкаУдаления
	             |						ТОГДА 13
	             |					ИНАЧЕ 12
	             |				КОНЕЦ
	             |		ИНАЧЕ -1 + ВЫБОР
	             |				КОГДА СправочникНоменклатура.ПометкаУдаления
	             |					ТОГДА 1
	             |				ИНАЧЕ 0
	             |			КОНЕЦ + ВЫБОР
	             |				КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
	             |					ТОГДА 1
	             |				ИНАЧЕ 3
	             |			КОНЕЦ
	             |	КОНЕЦ КАК ИндексКартинки,
	             |	ДействиеСкидок.СкидкаНаценка
	             |ИЗ
	             |	Справочник.Номенклатура КАК СправочникНоменклатура
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	             |				&НаДату,
	             |				(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &НаДату
	             |					ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	             |					И СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	             |					И СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
	             |					И (Магазин = &Магазин
	             |						ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))) КАК ДействиеСкидок
	             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	             |			ПО ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
				 |   		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТЧУсловия
				 |   			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ТЧВремяДействия
				 |   			ПО (ТЧВремяДействия.Ссылка = ТЧУсловия.УсловиеПредоставления)
				 |   				И (ВЫБОР
				 |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
				 |   						ТОГДА 1
				 |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
				 |   						ТОГДА 2
				 |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
				 |   						ТОГДА 3
				 |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
				 |   						ТОГДА 4
				 |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
				 |   						ТОГДА 5
				 |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
				 |   						ТОГДА 6
				 |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
				 |   						ТОГДА 7
				 |   					ИНАЧЕ ДЕНЬНЕДЕЛИ(&НаДату)
				 |   				КОНЕЦ = ДЕНЬНЕДЕЛИ(&НаДату))
				 |   				И (ЧАС(&НаДату) > ЧАС(ТЧВремяДействия.ВремяНачала)
				 |   						И ЧАС(&НаДату) < ЧАС(ТЧВремяДействия.ВремяОкончания)
				 |   					ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяНачала)
				 |   						И МИНУТА(&НаДату) > МИНУТА(ТЧВремяДействия.ВремяНачала)
				 |   					ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяОкончания)
				 |   						И МИНУТА(&НаДату) < МИНУТА(ТЧВремяДействия.ВремяОкончания)
				 |   					ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяНачала)
				 |   						И МИНУТА(&НаДату) = МИНУТА(ТЧВремяДействия.ВремяНачала)
				 |   						И СЕКУНДА(&НаДату) >= СЕКУНДА(ТЧВремяДействия.ВремяНачала)
				 |   					ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяОкончания)
				 |   						И МИНУТА(&НаДату) = МИНУТА(ТЧВремяДействия.ВремяОкончания)
				 |   						И СЕКУНДА(&НаДату) < СЕКУНДА(ТЧВремяДействия.ВремяОкончания))
				 |   		ПО (ТЧУсловия.Ссылка = ДействиеСкидок.СкидкаНаценка)
				 |		ПО (НоменклатураСегмента.Номенклатура = СправочникНоменклатура.Ссылка
	             |				ИЛИ НоменклатураСегмента.Номенклатура ЕСТЬ NULL 
	             |					И ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))
	             |ГДЕ
	             |	ДействиеСкидок.СкидкаНаценка ЕСТЬ NULL 
	             |{ГДЕ
	             |	(СправочникНоменклатура.Ссылка В
	             |			(ВЫБРАТЬ 
	             |				Сегменты.Номенклатура
	             |			ИЗ
	             |				РегистрСведений.НоменклатураСегмента КАК Сегменты
	             |			ГДЕ
	             |				Сегменты.Сегмент = &СегментНоменклатуры))}";
	Возврат ТекстЗапроса;
	
КонецФункции

// Обрабатывает структуру шаблона и устанавливает значения некоторых параметров
// которые должны отображаться только при определенных условиях
// а данные должны получаться отдельными запросами.
//
// Параметры:
//  СтруктураШаблона - Структура - структура шаблона,
//  ДокументСсылка - Ссылка - объект, значения реквизитов которого необходимо изменить.
Процедура ОбработатьСтруктуруШаблонаЧекаПриПечати(СтруктураШаблона, ДокументСсылка) Экспорт
	
	Для Каждого СтрокаШаблонаУровень1 Из СтруктураШаблона.Шаблон.Строки Цикл
		Если СтрокаШаблонаУровень1.Элемент = "Подвал" ИЛИ СтрокаШаблонаУровень1.Элемент = "Шапка" Тогда
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрокаШаблонаУровень2 Из СтрокаШаблонаУровень1.Строки Цикл
				Если СтрокаШаблонаУровень2.Элемент = "%%Скидки.СуммаНакопления%%" Тогда
					РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Ссылка, Дата, Проведен, ВидОперации, ДисконтнаяКарта, СтатусЧекаККМ, ОтчетОРозничныхПродажах");
					Если ЗначениеЗаполнено(РеквизитыДокумента.ДисконтнаяКарта) Тогда
						ОбработатьПараметрСуммыНакопления(РеквизитыДокумента, СтрокаШаблонаУровень2);
					Иначе
						МассивУдаляемыхСтрок.Добавить(СтрокаШаблонаУровень2);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
				СтрокаШаблонаУровень1.Строки.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет проверку соответствия дисконтной карты возврата
// и дисконтных карт документов продажи.
//
// Параметры:
//  Объект - Объект - объект.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица расхождений.
//
Функция РасхожденияДисконтныхКартВозвратаИПродаж(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.ДокументПродажи КАК Документ.РеализацияТоваров) КАК ДокументПродажи,
	|	ВЫРАЗИТЬ(Товары.ЧекККМ КАК Документ.ЧекККМ) КАК ЧекККМ
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.НомерСтроки КАК НомерСтрокиОснования,
	|	Подзапрос.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	Подзапрос.Основание КАК Основание
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.НомерСтроки КАК НомерСтроки,
	|		Товары.ДокументПродажи.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|		""ДокументПродажи"" КАК Основание
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		Товары.ДокументПродажи ССЫЛКА Документ.РеализацияТоваров
	|		И Товары.ДокументПродажи <> ЗНАЧЕНИЕ(Документ.РеализацияТоваров.ПустаяСсылка)
	|		И Товары.ДокументПродажи.ДисконтнаяКарта <> &ДисконтнаяКарта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.НомерСтроки,
	|		Товары.ЧекККМ.ДисконтнаяКарта,
	|		""ЧекККМ""
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		Товары.ЧекККМ ССЫЛКА Документ.ЧекККМ
	|		И Товары.ЧекККМ <> ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|		И Товары.ЧекККМ.ДисконтнаяКарта <> &ДисконтнаяКарта) КАК Подзапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА СКИДОК

// Получает сумму накопления по карте при печати чека
Функция СуммаНакопленияПоКартеДляПечатиЧека(РеквизитыДокумента)
	
	Сумма = 0;
	ДатаНачала = Дата(1, 1, 1, 0, 0, 0);
	ЕстьОшибкиДисконтногоСервера = Ложь;
	Если РеквизитыДокумента.Архивный Тогда
		ДатаОкончания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.ОтчетОРозничныхПродажах, "Дата");
	Иначе
		ДатаОкончания = РеквизитыДокумента.Дата;
	КонецЕсли;
	
	Карточка = Неопределено;
	Если РеквизитыДокумента.Свойство("Карточка", Неопределено) И ЗначениеЗаполнено(Неопределено) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ПродажиПоДисконтнымКартамОбороты.Сумма), 0) КАК Сумма,
		|	ЕСТЬNULL(СУММА(ПродажиПоДисконтнымКартамОбороты.Количество), 0) КАК Количество
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ПродажиПоДисконтнымКартамОбороты
		|ГДЕ ПродажиПоДисконтнымКартамОбороты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПродажиПоДисконтнымКартамОбороты.ДисконтнаяКарта В (&ДисконтныеКарты)
		|	И ПродажиПоДисконтнымКартамОбороты.Регистратор <> &Регистратор";
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("ДисконтныеКарты", Карточка);
		Запрос.УстановитьПараметр("Регистратор", РеквизитыДокумента.Ссылка);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Сумма = Сумма + Выборка.Сумма;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ (РеквизитыДокумента.Архивный) Тогда
		ЗапросТовары = Новый Запрос;
		ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(&Коэффициент * ТаблицаТовары.Сумма), 0) КАК Сумма,
		|	ЕСТЬNULL(СУММА(&Коэффициент * ТаблицаТовары.Количество), 0) КАК Количество
		|ИЗ
		|	Документ.Чек.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка";
		ЗапросТовары.УстановитьПараметр("Ссылка", РеквизитыДокумента.Ссылка);
		ЗапросТовары.УстановитьПараметр("Коэффициент", ?(РеквизитыДокумента.ХозОперация = Справочники.ХозОперации.ЧекНаВозврат, -1, 1));
		РезультатТовары = ЗапросТовары.Выполнить();
		Если Не РезультатТовары.Пустой() Тогда
			ВыборкаТовары = РезультатТовары.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				Сумма = Сумма + ВыборкаТовары.Сумма;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

Процедура ОбработатьПараметрСуммыНакопления(РеквизитыДокумента, КлючЭлемента)
	
	Если РеквизитыДокумента.Дата = НачалоДня(ТекущаяДатаСеанса()) Тогда
		РеквизитыДокумента.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	СуммаНакопления = СуммаНакопленияПоКартеДляПечатиЧека(РеквизитыДокумента);

	Если ПустаяСтрока(КлючЭлемента.Префикс) Тогда
		Префикс = НСтр("ru = 'Сумма накопления:'") + " ";
	Иначе
		Префикс = КлючЭлемента.Префикс;
		КлючЭлемента.Префикс = "";
	КонецЕсли;
	Если ПустаяСтрока(КлючЭлемента.Постфикс) Тогда
		Постфикс = " " + НСтр("ru = 'руб.'");
	Иначе
		Постфикс = КлючЭлемента.Постфикс;
		КлючЭлемента.Постфикс = "";
	КонецЕсли;
	Если КлючЭлемента.ТипЭлемента <> "СтрокаТекста" Тогда
		КлючЭлемента.ТипЭлемента = "СтрокаТекста";
	КонецЕсли;
	Если ЗначениеЗаполнено(КлючЭлемента.Формат) Тогда
		КлючЭлемента.Элемент = Префикс + Формат(СуммаНакопления, КлючЭлемента.Формат) + Постфикс;
	Иначе
		КлючЭлемента.Элемент = Префикс + СуммаНакопления + Постфикс;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
