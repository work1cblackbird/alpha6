#Область ПрограммныйИнтерфейс

// Связывает поступление автомобилей с заказом на автомобиль
//
// Параметры:
//  Заказ    - ДокументСсылка.ЗаказНаАвтомобиль;
//  Документ - ДокументСсылка.ПоступлениеАвтомобилей;
//
Процедура СвязатьСПоступлениемАвтомобилей(Заказ, Документ) Экспорт
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.ПоступлениеАвтомобилей") Тогда
		
		ВызватьИсключение НСтр("ru = 'Не верный тип связываемого документа'");
		
	КонецЕсли;
	
	// а если уже связан???
	Если Заказ = СвязанныйЗаказ(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Заказ);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ОшибкаБлокировкиЗаказа(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Заказ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось заблокировать заказ на автомобиль для редактирования.
			|Подробнее в журнале регистрации.'");
		
	КонецПопытки;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаказОбъект.ОбменДанными.Загрузка = Истина;
	ЗаказОбъект.ТрейдИн = Истина;
	НоваяСтрока = ЗаказОбъект.ПоступленияTradeIn.Добавить();
	НоваяСтрока.Документ = Документ;
	НоваяСтрока.Добавлен = ТекущаяДатаСеанса();
	НоваяСтрока.Автор = Пользователи.ТекущийПользователь();
	
	Попытка
		
		ЗаказОбъект.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ОшибкаЗаписиЗаказа(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Заказ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось записать заказ на автомобиль.
			|Подробнее в журнале регистрации.'");
		
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(Заказ);
	
КонецПроцедуры

// Удаляет связь поступления автомобилей с заказом на автомобиль
//
// Параметры:
//  Документ - ДокументСсылка.ПоступлениеАвтомобилей;
//
Процедура СброситьСвязьСЗаказами(Документ) Экспорт
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.ПоступлениеАвтомобилей") Тогда
		
		ВызватьИсключение НСтр("ru = 'Не верный тип документа связываемого документа.'");
		
	КонецЕсли;
	
	ОчиститьЗаказ(СвязанныйЗаказ(Документ), Документ);
	
КонецПроцедуры

// Ищет заказ по поступлению автомобиля
//
// Параметры:
//  Поступление - ДокументСсылка.ПоступлениеАвтомобилей - документ поиска
// 
// Возвращаемое значение:
//  ДокументСсылка.ЗаказНаАвтомобиль - найденный документ
//
Функция СвязанныйЗаказ(Поступление) Экспорт
	
	Если Поступление.Пустая() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ЗаказНаАвтомобильПоступленияTradeIn.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль.ПоступленияTradeIn КАК ЗаказНаАвтомобильПоступленияTradeIn
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаАвтомобиль КАК ЗаказНаАвтомобиль
		|		ПО ЗаказНаАвтомобильПоступленияTradeIn.Ссылка = ЗаказНаАвтомобиль.ДокументОснование
		|ГДЕ
		|	ЗаказНаАвтомобильПоступленияTradeIn.Документ = &Поступление
		|	И ЗаказНаАвтомобиль.Ссылка ЕСТЬ NULL"
	);
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Заказ;
	
КонецФункции

// Создает документ передачи денег с документа источника на заказ на автомобиль
//
// Параметры:
//  Источник - ДокументСсылка.ПоступлениеАвтомобилей - документ источник денег;
//  Заказ - ДокументСсылка.ЗаказНаАвтомобиль - документ заказа;
//  Сумма - Число - распределяемая сумма
//
Процедура РаспределитьДеньгиНаЗаказ(Источник, Заказ, Сумма) Экспорт
	
	Взаимозачет = Документы.Взаимозачет.СоздатьДокумент();
	Взаимозачет.Заполнить(Источник);
	Взаимозачет.Дебитор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Контрагент");
	Документы.Взаимозачет.ДебиторПриИзменении(Взаимозачет);
	Взаимозачет.Кредитор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Контрагент");
	Документы.Взаимозачет.КредиторПриИзменении(Взаимозачет);
	Взаимозачет.Комментарий = НСтр(
		"ru = 'Создан автоматически для регистрации переноса денег с выкупа на сделку по продаже автомобиля.'",
		ОбщегоНазначения.КодОсновногоЯзыка()
	);
	
	НоваяСтрока = Взаимозачет.Состав.Добавить();
	НоваяСтрока.СделкаДебитор = Заказ;
	Документы.Взаимозачет.СоставСделкаДебиторПриИзменении(Взаимозачет, НоваяСтрока);
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
		НоваяСтрока.ДоговорВзаиморасчетовДебитор) Тогда
		НоваяСтрока.ТипРасчетаДебитор = Перечисления.ТипыРасчетов.Аванс;
		НоваяСтрока.ЗаказДебитор = Заказ;
	КонецЕсли;
	НоваяСтрока.СделкаКредитор = Источник;
	Документы.Взаимозачет.СоставСделкаКредиторПриИзменении(Взаимозачет, НоваяСтрока);
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
		НоваяСтрока.ДоговорВзаиморасчетовКредитор) Тогда
		НоваяСтрока.ТипРасчетаКредитор = Перечисления.ТипыРасчетов.Оплата;
	КонецЕсли;
	НоваяСтрока.Сумма = Сумма;
	
	Если НЕ Взаимозачет.ПроверитьЗаполнение() Тогда
		
		 ВызватьИсключение НСтр("ru = 'Не удалось провести документ взаимозачета'");
		
	КонецЕсли;
	
	Попытка
		
		Взаимозачет.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ОшибкаБлокировкиЗаказа(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Источник,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось провести документ взаимозачета.
			|Подробнее в журнале регистрации'");
		
	КонецПопытки;
	
КонецПроцедуры

// Формирует данные о документе оценки автомобиля, связанного с текущим документом.
//
// Параметры:
//  Документ - ДокументСссылка - документ, для которого формируются данные.
//
// Возвращаемое значение:
//  Структура - сформированные данные:
//    * Оценка - ДокументСсылка.АктОценкиАвтомобиля - связанный документ оценки;
//    * Валюта - СправочникСсылка.Валюты - валюта документа;
//    * Автомобиль - СправочникСсылка.Автомобили - автомобиль, для которого получаются данные.
//  Неопределено - если документ "ИзменениеЦенАвтомобилей"не найден.
//
Функция ПолучитьДокументОсмотра(Документ) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ);
	Если Менеджер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Менеджер.ПолучитьДокументОсмотра(Документ);
	
КонецФункции

// Получает актуальные заказы на автомобиль, связанные с рабочим листом.
//
// Параметры:
//  РабочийЛист - ДокументСсылка.РабочийЛист - документ, для которого получаем заказы.
//
// Возвращаемое значение:
//  Массив из ДокументСсылка - список заказов на автомобиль в цепочке.
//
Функция АктуальныеЗаказыРабочегоЛиста(РабочийЛист) Экспорт
	
	ПодчиненныеДокументы = Новый Массив;
	
	Если ЗначениеЗаполнено(РабочийЛист) Тогда
		
		ОбработанныеДокументы = Новый Массив;
		ОбработанныеДокументы.Добавить(РабочийЛист);
		
		ПодчиненныеДокументы.Добавить(РабочийЛист);
		
		ДополнитьПодчиненнымиДокументами(ПодчиненныеДокументы, ОбработанныеДокументы, РабочийЛист);
		
	КонецЕсли;
	
	Возврат ТолькоАктуальныеЗаказы(ПодчиненныеДокументы);
	
КонецФункции

// Проверяет актуальность заказы на автомобиль.
//
// Параметры:
//  Заказ - ДокументСсылка.ЗаказНаАвтомобиль - проверяемый заказ.
//
// Возвращаемое значение:
//  Булево - Истина, если заказ актуален, в противном случае Ложь.
//
Функция ЭтоАктуальныйЗаказ(Заказ) Экспорт
	
	Заказы = ТолькоАктуальныеЗаказы(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Заказ));
	Возврат Заказы.Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбновитьИнформациюОРаспределении(ПараметрыОперации, АдресРезультата) Экспорт
	
	ВзаимозачетыПоДокументу = ВзаимозачетыПоДокументу(
		ПараметрыОперации.Документ,
		ПараметрыОперации.ОтборСвязанныеДокументы
	);
	
	ДокументРезультат = СформироватьРасшифровкуРаспределения(ВзаимозачетыПоДокументу, ПараметрыОперации.Колонка);
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресРезультата);
	
КонецПроцедуры

// Ищет связанные события с переданным документом.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.РабочийЛист, ДокументСсылка.Событие - головной документ;
//  Параметры - Структура - (необязательный). дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.Событие - события, связанные с головным документом.
//
Функция СвязанныеСобытия(ДокументСсылка, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ПодчиненныеДокументы = Новый Массив;
	
	ОписаниеТиповДокументов = Документы.ТипВсеСсылки();
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РабочийЛист") Тогда
		ПервыйДокумент = ДокументСсылка;
	Иначе
		ОбработанныеДокументы = Новый Массив;
		ПервыйДокумент = Обработки.ПодчиненныеДокументы.НайтиПервыйДокументЦепочкиПодчиненности(
			ДокументСсылка, ОбработанныеДокументы, ОписаниеТиповДокументов);
	КонецЕсли;
	
	Комментарий = Новый Массив;
	Комментарий.Добавить(Строка(ТипЗнч(ДокументСсылка)));
	Комментарий.Добавить(Строка(ДокументСсылка.Номер));
	Комментарий.Добавить(Формат(ДокументСсылка.ДатаОперации, "ДЛФ=DDT"));
	Комментарий = СтрСоединить(Комментарий, Символы.НПП);
	
	Параметры.Вставить("Номер", ПервыйДокумент.Номер);
	Параметры.Вставить("Дата", ПервыйДокумент.Дата);
	Параметры.Вставить("Комментарий", Комментарий);
	
	ОбработанныеДокументы = Новый Массив;
	ОбработанныеДокументы.Добавить(ПервыйДокумент);
	
	ПодчиненныеДокументы.Добавить(ПервыйДокумент);
	
	ДополнитьПодчиненнымиДокументами(ПодчиненныеДокументы, ОбработанныеДокументы, ПервыйДокумент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Событие.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.Состояние <> &СостояниеЗавершено
		|	И Событие.Состояние <> &СостояниеОтменено
		|	И Событие.Ссылка В (&МассивСсылок)";
	Запрос.УстановитьПараметр("СостояниеЗавершено", ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Завершено"));
	Запрос.УстановитьПараметр("СостояниеОтменено",  ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Отменено"));
	Запрос.УстановитьПараметр("МассивСсылок",       ПодчиненныеДокументы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ПодчиненныеДокументы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ПодчиненныеДокументы;
	
КонецФункции // СвязанныеСобытия()

// Перезаписывает события со статусом "Отменено".
//
// Параметры:
//  События - Массив Из ДокументСсылка.Событие - отменяемые события.
//
Процедура ОтменитьСвязанныеСобытия(События, Комментарий) Экспорт
	
	// напишем комментарий
	Текст = НСТр("ru = 'Отменен автоматически при отказе от сделки, установленном в %1 пользователем %2'");
	Текст = СтрШаблон(Текст, Комментарий, ПользователиКлиентСервер.ТекущийПользователь());
	
	Для Каждого Документ Из События Цикл
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Документ);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Событие.Блокировка'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Документ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Отменено");
		ДокументОбъект.Комментарий = Текст;
		
		Попытка
			
			ДокументОбъект.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Событие.Запись'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Документ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
		РазблокироватьДанныеДляРедактирования(Документ);
		
	КонецЦикла;
	
КонецПроцедуры // ОтменитьСвязанныеСобытия()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОчиститьЗаказ(Заказ, Документ)
	
	Если Заказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Заказ);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ОшибкаБлокировкиЗаказа(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Заказ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось заблокировать заказ на автомобиль для редактирования.
			|Подробнее в журнале регистрации.'");
		
	КонецПопытки;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаказОбъект.ОбменДанными.Загрузка = Истина;
	ДляУдаления = ЗаказОбъект.ПоступленияTradeIn.НайтиСтроки(Новый Структура("Документ", Документ));
	
	Для Каждого Элемент Из ДляУдаления Цикл
		
		ЗаказОбъект.ПоступленияTradeIn.Удалить(Элемент);
		
	КонецЦикла;
	
	Попытка
		
		ЗаказОбъект.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ОшибкаЗаписиЗаказа(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Заказ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось записать заказ на автомобиль.
			|Подробнее в журнале регистрации.'");
		
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(Заказ);
	
КонецПроцедуры

Функция ВзаимозачетыПоДокументу(Документ, СвязанныеДокументы)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаимозачетСостав.СделкаДебитор КАК Источник,
		|	ВзаимозачетСостав.Ссылка КАК Документ,
		|	""Списание"" КАК Операция,
		|	ВзаимозачетСостав.Ссылка.ВалютаДокумента КАК Валюта,
		|	ВзаимозачетСостав.Сумма КАК Сумма
		|ИЗ
		|	Документ.Взаимозачет.Состав КАК ВзаимозачетСостав
		|ГДЕ
		|	НЕ ВзаимозачетСостав.Ссылка.ПометкаУдаления
		|	И ВзаимозачетСостав.Ссылка.Проведен
		|	И ВзаимозачетСостав.СделкаКредитор = &Документ
		|	%1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВзаимозачетСостав.СделкаКредитор,
		|	ВзаимозачетСостав.Ссылка,
		|	""Начисление"",
		|	ВзаимозачетСостав.Ссылка.ВалютаДокумента,
		|	ВзаимозачетСостав.Сумма
		|ИЗ
		|	Документ.Взаимозачет.Состав КАК ВзаимозачетСостав
		|ГДЕ
		|	НЕ ВзаимозачетСостав.Ссылка.ПометкаУдаления
		|	И ВзаимозачетСостав.Ссылка.Проведен
		|	И ВзаимозачетСостав.СделкаДебитор = &Документ
		|	%2"
	);
	
	ПервыйДополнительныйОтбор = "";
	ВторойДополнительныйОтбор = "";
	
	Если ЗначениеЗаполнено(СвязанныеДокументы) Тогда
		
		ПервыйДополнительныйОтбор = "И ВзаимозачетСостав.СделкаДебитор В (&ОтборСвязанныеДокументы)";
		ВторойДополнительныйОтбор = "И ВзаимозачетСостав.СделкаКредитор В (&ОтборСвязанныеДокументы)";
		
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(Запрос.Текст, ПервыйДополнительныйОтбор, ВторойДополнительныйОтбор);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ОтборСвязанныеДокументы", СвязанныеДокументы);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьРасшифровкуРаспределения(ВзаимозачетыПоДокументу, ИмяКолонкиИсточник = "Источник")
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ДляПросмотраРасшифровкиРаспределения");
	ОтступСверху = Макет.ПолучитьОбласть("ОтступСверху");
	Операция = Макет.ПолучитьОбласть("Шапка|Операция");
	Источник = Макет.ПолучитьОбласть(СтрШаблон("Шапка|%1", ИмяКолонкиИсточник));
	Документ = Макет.ПолучитьОбласть("Шапка|Документ");
	Сумма    = Макет.ПолучитьОбласть("Шапка|Сумма");
	Отступ   = Макет.ПолучитьОбласть("Шапка|Отступ");
	
	ДокументРезультат.Вывести(ОтступСверху);
	ДокументРезультат.Вывести(Отступ);
	ДокументРезультат.Присоединить(Операция);
	ДокументРезультат.Присоединить(Отступ);
	ДокументРезультат.Присоединить(Источник);
	ДокументРезультат.Присоединить(Отступ);
	ДокументРезультат.Присоединить(Документ);
	ДокументРезультат.Присоединить(Отступ);
	ДокументРезультат.Присоединить(Сумма);
	
	Операция = Макет.ПолучитьОбласть("Строка|Операция");
	Источник = Макет.ПолучитьОбласть(СтрШаблон("Строка|%1", ИмяКолонкиИсточник));
	Документ = Макет.ПолучитьОбласть("Строка|Документ");
	Сумма    = Макет.ПолучитьОбласть("Строка|Сумма");
	Отступ   = Макет.ПолучитьОбласть("Строка|Отступ");
	
	Для Каждого Запись Из ВзаимозачетыПоДокументу Цикл
		
		Операция.Параметры.Заполнить(Запись);
		Источник.Параметры.Заполнить(Запись);
		Документ.Параметры.Заполнить(Запись);
		Сумма.Параметры.Заполнить(Запись);
		
		Сумма.Параметры.Сумма = Формат(Запись.Сумма, НСтр("ru = 'ЧДЦ=2'"));
		
		ДокументРезультат.Вывести(Отступ);
		ДокументРезультат.Присоединить(Операция);
		ДокументРезультат.Присоединить(Отступ);
		ДокументРезультат.Присоединить(Источник);
		ДокументРезультат.Присоединить(Отступ);
		ДокументРезультат.Присоединить(Документ);
		ДокументРезультат.Присоединить(Отступ);
		ДокументРезультат.Присоединить(Сумма);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#Область СообщенияЖурналаРегистрации

Функция ОшибкаБлокировкиЗаказа()
	
	Возврат НСтр(
		"ru = 'TradeIn.Блокировка заказ на автомобиль'",
		ОбщегоНазначения.КодОсновногоЯзыка()
	);
	
КонецФункции

Функция ОшибкаЗаписиЗаказа()
	
	Возврат НСтр(
		"ru = 'TradeIn.Запись заказ на автомобиль'",
		ОбщегоНазначения.КодОсновногоЯзыка()
	);
	
КонецФункции

#КонецОбласти

Процедура ДополнитьПодчиненнымиДокументами(ПодчиненныеДокументы, ОбработанныеДокументы, Документ)
	
	ТекстЗапроса = Обработки.ПодчиненныеДокументы.ПолучитьТекстЗапроса(Документ);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Основание", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ОбработанныеДокументы.Найти(Выборка.Документ) <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОбработанныеДокументы.Добавить(Выборка.Документ);
		ПодчиненныеДокументы.Добавить(Выборка.Документ);
		ДополнитьПодчиненнымиДокументами(ПодчиненныеДокументы, ОбработанныеДокументы, Выборка.Документ);
		
	КонецЦикла;
	
КонецПроцедуры // ДополнитьМассивДокументов()

Функция ТолькоАктуальныеЗаказы(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаАвтомобиль.Ссылка КАК Ссылка,
		|	ЗаказНаАвтомобиль.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль КАК ЗаказНаАвтомобиль
		|ГДЕ
		|	ЗаказНаАвтомобиль.Ссылка В(&МассивСсылок)
		|	И ЗаказНаАвтомобиль.Проведен = ИСТИНА
		|	И НЕ ЗаказНаАвтомобиль.Ссылка В 
		|				(ВЫБРАТЬ
		|					Основания.ДокументОснование
		|				ИЗ
		|					Документ.ЗаказНаАвтомобиль КАК Основания)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти