
#Область ПрограммныйИнтерфейс

#Область Биллинг

// Авторизация.
// 
// Параметры:
//  Пользователь - Строка - Пользователь
//  Пароль - Строка - Пароль
// 
// Возвращаемое значение:
//  Строка - токен доступа
Функция Авторизация(Пользователь, Пароль) Экспорт
	
	Тело = Новый Структура("login,password", Пользователь, Пароль);
	Возврат ВыполнитьЗапрос("post", "/auth/login", Тело).result.access_token;
	
КонецФункции

// Получение текущего баланса с сервера
// 
// Возвращаемое значение:
//  Строка - Текущий баланс в формате `<Сумма> <Валюта>`
Функция ТекущийБаланс() Экспорт
	
	Результат = ВыполнитьЗащищенныйЗапрос(
		"get",
		"/billing/balance"
	);
	
	Если Результат.Свойство("result") И Результат.result.Свойство("final_balance") Тогда
		
		Возврат СтрШаблон("%1 руб.", Строка(Результат.result.final_balance));
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Сервер прислал неожиданный ответ'");
		
	КонецЕсли;
	
КонецФункции

// Отправка на сервер запроса на создание счета на оплату.
// На сервер отправляется запрос на создание счета, счет создается и направляется на указанную в запросе почту.
// 
// Параметры:
//  ДанныеСчета - Структура - Данные счета на оплату:
//   * ЮридическоеЛицо - ОпределяемыйТип.ЮридическиеЛицаПЭП - Организация на которую выставляется счет;
//   * Сумма - Число - Сумма пополнения;
//   * АдресПочты - Строка - Адрес на который будут отправлены данные для оплаты;
// 
// Возвращаемое значение:
//  Булево - признак успешно соданого счета
Функция СоздатьСчетНаОплату(ДанныеСчета) Экспорт
	
	Тело = Новый Структура();
	Тело.Вставить("legal_entity_id", Строка(УчастникиПЭП.ИдентификаторУчастника(ДанныеСчета.ЮридическоеЛицо)));
	Тело.Вставить("amount", ДанныеСчета.Сумма);
	Тело.Вставить("email", ДанныеСчета.АдресПочты);
	Тело.Вставить("phone", ДанныеСчета.Телефон);
	
	Результат = ВыполнитьЗащищенныйЗапрос(
		"post",
		"/billing/bills",
		Тело
	);
	
	Возврат Результат.result;
	
КонецФункции

// Тарифная сетка.
// 
// Возвращаемое значение:
//  Массив из Структура - Тарифная сетка:
//  * Код - Строка -
//  * Имя - Строка - 
//  * Страниц - Число - 
//  * Цена - Число - 
//  * ЦенаЗаСтраницу - Число - 
Функция ТарифнаяСетка() Экспорт
	
	РезультатЗапроса = ВыполнитьЗапрос("get", "/billing/tariffs");
	Результат = Новый Массив();
	
	Для Каждого Тариф Из РезультатЗапроса.result Цикл
		
		НовыйТариф = Новый Структура();
		НовыйТариф.Вставить("Имя", Тариф.name);
		НовыйТариф.Вставить("Документов", Тариф.documents_limit);
		НовыйТариф.Вставить("ЦенаЗаДокумент", Тариф.document_price);
		НовыйТариф.Вставить("Цена", Тариф.total_price);
		Результат.Добавить(НовыйТариф);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЮридическиеЛица

// Формирует список юридических лиц и подчиненных им контакнтных лиц
// 
// Параметры:
//  НумерацияСтраниц - Структура - настройка постраничного вывода списка:
//   * Текущая - Число - номер страницы которую хотим получить
//   * НаСтранице - Число - количество записе на одной странице
//  Отборы - Структура, Неопределено -  Отборы
// 
// Возвращаемое значение:
//  Структура -  Юридические лица:
//   * НумерацияСтраниц - Структура - :
//    ** Страница - Число - 
//    ** НаСтранице - Число -
//    ** ВсегоСтраниц - Число -
//   * ЮридическиеЛица - Массив из Структура - описание юр. лиц:
//    ** ИдентификаторУчастника - УникальныйИдентификатор -
//    ** Имя - Строка -
//    ** Адрес - Строка -
//    ** ИНН - Строка -
//    ** КонтактныеЛица - Массив из Структура - описание контактных лиц:
//     *** ИдентификаторУчастника - УникальныйИдентификатор -
//     *** ИдентификаторКонтактногоЛица - УникальныйИдентификатор -
//     *** Имя - Строка -
//     *** Почта - Строка -
//     *** Телефон - Строка -
//     *** ЭтоКонтактноеЛицо - Булево -
Функция ЮридическиеЛица(Знач НумерацияСтраниц, Отборы = Неопределено) Экспорт
	
	Если Отборы <> Неопределено Тогда
		
		ПараметрыЗапроса = Новый Структура();
		
		Если Отборы.Свойство("ИдентификаторУчастника") Тогда
			
			ПараметрыЗапроса.Вставить("id", Отборы.ИдентификаторУчастника);
			
		КонецЕсли;
		
		Если Отборы.Свойство("ИНН") Тогда
			
			ПараметрыЗапроса.Вставить("inn", Отборы.ИНН);
			
		КонецЕсли;
		
		Если Отборы.Свойство("Имя") Тогда
			
			ПараметрыЗапроса.Вставить("name", Отборы.Имя);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"get",
		"/legal-entities",
		,
		ДобавитьНумерациюСтраницВПраметрыЗапроса(НумерацияСтраниц, ПараметрыЗапроса)
	);
	
	НумерацияСтраниц = Новый Структура(
		"Страница,НаСтранице,ВсегоСтраниц",
		РезультатЗапроса.pagination.page,
		РезультатЗапроса.pagination.per_page,
		РезультатЗапроса.pagination.total_pages
	);
	
	ЮридическиеЛица = Новый Массив();
	
	Для Каждого ЮрЛицо Из РезультатЗапроса.result Цикл
		
		ЮридическоеЛицо = Новый Структура();
		ЮридическоеЛицо.Вставить("ИдентификаторУчастника", Новый УникальныйИдентификатор(ЮрЛицо.id));
		ЮридическоеЛицо.Вставить("Имя", ЮрЛицо.name);
		ЮридическоеЛицо.Вставить("Адрес", ЮрЛицо.legal_address);
		ЮридическоеЛицо.Вставить("ИНН", ЮрЛицо.inn);
		ЮридическоеЛицо.Вставить("КонтактныеЛица", Новый Массив);
		ЮридическиеЛица.Добавить(ЮридическоеЛицо);
		
	КонецЦикла;
	
	Возврат Новый Структура("НумерацияСтраниц, ЮридическиеЛица", НумерацияСтраниц, ЮридическиеЛица);
	
КонецФункции

// Создание юр. лица
// 
// Параметры:
//  Данные - Структура - Данные юр. лица:
//   * Наименование - Строка -
//   * ИНН - Строка -
//   * Адрес - Строка -
//   * ИдентификаторУчастника - УникальныйИдентификатор -
// 
// Возвращаемое значение:
//  Структура -  Новое юридическое лицо:
// * Имя - Строка -
// * ИНН - Строка -
// * Адрес - Строка -
// * ИдентификаторУчастника - УникальныйИдентификатор - 
Функция НовоеЮридическоеЛицо(Знач Данные) Экспорт
	
	Тело = Новый Структура();
	Тело.Вставить("id", Строка(Данные.ИдентификаторУчастника));
	Тело.Вставить("inn", Данные.ИНН);
	Тело.Вставить("name", Данные.Наименование);
	Тело.Вставить("legal_address", Данные.Адрес);
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"post",
		"/legal-entities",
		Тело
	);
	
	Результат = Новый Структура();
	Результат.Вставить("Имя", Строка(РезультатЗапроса.result.name));
	Результат.Вставить("ИНН", Строка(РезультатЗапроса.result.inn));
	Результат.Вставить("Адрес", Строка(РезультатЗапроса.result.legal_address));
	Результат.Вставить("ИдентификаторУчастника", Новый УникальныйИдентификатор(РезультатЗапроса.result.id));
	Возврат Результат;
	
КонецФункции

// Обновление юридического лица.
// 
// Параметры:
//  Данные - Структура - новые данные юр. лица:
//  * ИдентификаторУчастника - УникальныйИдентификатор -
//  * ИНН - Строка - 
//  * Наименование - Строка - 
//  * Адрес - Строка -  
// 
// Возвращаемое значение:
//  Структура -  Обновить юридическое лицо:
// * Имя - Строка - 
// * ИНН - Строка - 
// * Адрес - Строка - 
// * ИдентификаторУчастника - УникальныйИдентификатор - 
Функция ОбновитьЮридическоеЛицо(Данные) Экспорт
	
	Тело = Новый Структура();
	Тело.Вставить("id", Строка(Данные.ИдентификаторУчастника));
	Тело.Вставить("inn", Данные.ИНН);
	Тело.Вставить("name", Данные.Наименование);
	Тело.Вставить("legal_address", Данные.Адрес);
	Тело.Вставить("contacts", Новый Массив());
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"put",
		СтрШаблон("/legal-entities/%1", Строка(Данные.ИдентификаторУчастника)),
		Тело
	);
	
	Результат = Новый Структура();
	Результат.Вставить("Имя", Строка(РезультатЗапроса.result.name));
	Результат.Вставить("ИНН", Строка(РезультатЗапроса.result.inn));
	Результат.Вставить("Адрес", Строка(РезультатЗапроса.result.legal_address));
	Результат.Вставить("ИдентификаторУчастника", Новый УникальныйИдентификатор(РезультатЗапроса.result.id));
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонтактныеЛица

// Формирует список контактных лиц.
// 
// Параметры:
//  НумерацияСтраниц - Структура - настройка постраничного вывода списка:
//   * Текущая - Число - номер страницы которую хотим получить
//   * НаСтранице - Число - количество записе на одной странице
//  Отборы - Структура, Неопределено -  Отборы
// 
// Возвращаемое значение:
//  Структура -  Юридические лица:
//   * НумерацияСтраниц - Структура - :
//    ** Страница - Число - 
//    ** НаСтранице - Число -
//    ** ВсегоСтраниц - Число -
//   * КонтактныеЛица - Массив из Структура - описание юр. лиц:
//    ** ИдентификаторУчастника - УникальныйИдентификатор -
//    ** Фамилия - Строка -
//    ** Имя - Строка -
//    ** Отчество - Строка -
//    ** Почта - Строка -
//    ** Телефон - Строка -
Функция КонтактныеЛица(Знач НумерацияСтраниц, Отборы = Неопределено) Экспорт
	
	Если Отборы <> Неопределено Тогда
		
		ПараметрыЗапроса = Новый Структура();
		
		Если Отборы.Свойство("ИдентификаторУчастника") Тогда
			
			ПараметрыЗапроса.Вставить("id", Отборы.ИдентификаторУчастника);
			
		КонецЕсли;
		
		Если Отборы.Свойство("Телефон") Тогда
			
			ПараметрыЗапроса.Вставить("phone", Отборы.Телефон);
			
		КонецЕсли;
		
		Если Отборы.Свойство("Почта") Тогда
			
			ПараметрыЗапроса.Вставить("email", Отборы.Почта);
			
		КонецЕсли;
		
		Если Отборы.Свойство("ФИО") Тогда
			
			ПараметрыЗапроса.Вставить("name", Отборы.ФИО);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"get",
		"/legal-entities-contacts",
		,
		ДобавитьНумерациюСтраницВПраметрыЗапроса(НумерацияСтраниц, ПараметрыЗапроса)
	);
	
	НумерацияСтраниц = Новый Структура(
		"Страница,НаСтранице,ВсегоСтраниц",
		РезультатЗапроса.pagination.page,
		РезультатЗапроса.pagination.per_page,
		РезультатЗапроса.pagination.total_pages
	);
	
	КонтактныеЛица = Новый Массив();
	
	Для Каждого Лицо Из РезультатЗапроса.result Цикл
		
		КонтактноеЛицо = Новый Структура();
		КонтактноеЛицо.Вставить("ИдентификаторУчастника", Новый УникальныйИдентификатор(Лицо.id));
		КонтактноеЛицо.Вставить("Имя", Лицо.name);
		КонтактноеЛицо.Вставить("Телефон", Лицо.phone);
		КонтактноеЛицо.Вставить("Почта", Лицо.email);
		КонтактныеЛица.Добавить(КонтактноеЛицо);
		
	КонецЦикла;
	
	Возврат Новый Структура("НумерацияСтраниц, КонтактныеЛица", НумерацияСтраниц, КонтактныеЛица);
	
КонецФункции

// Данные контактного лица
// 
// Параметры:
//  ИдентификаторУчастника - УникальныйИдентификатор - 
// Возвращаемое значение:
//  Структура -  Обновить контактное лицо:
// * Имя - Строка - 
// * Фамилия - Строка - 
// * Отчество - Строка - 
// * Почта - Строка - 
// * Телефон - Строка - 
// * ИдентификаторУчастника - УникальныйИдентификатор -  
Функция КонтактноеЛицо(ИдентификаторУчастника) Экспорт
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"get",
		СтрШаблон("/legal-entities-contacts/%1", Строка(ИдентификаторУчастника))
	);
	
	Результат = Новый Структура();
	Результат.Вставить("Имя", Строка(РезультатЗапроса.result.name));
	Результат.Вставить("Телефон", Строка(РезультатЗапроса.result.phone));
	//Результат.Вставить("Почта", Строка(РезультатЗапроса.result.email));
	Результат.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
	Возврат Результат;
	
КонецФункции

// Созадние контактного лица.
// 
// Параметры:
//  Данные - Структура - Данные контактного лица:
//   * Имя - Строка -
//   * Фамилия - Строка -
//   * Отчество - Строка -
//   * Почта - Строка -
//   * Телефон - Строка -
// 
// Возвращаемое значение:
//  Структура -  Новое физическое лицо:
//   * Имя - Строка - 
//   * Фамилия - Строка - 
//   * Отчество - Строка - 
//   * Почта - Строка - 
//   * Телефон - Строка - 
//   * ИдентификаторУчастника - УникальныйИдентификатор - 
Функция НовоеКонтактноеЛицо(Данные) Экспорт
	
	Если ПустаяСтрока(Данные.Телефон) Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не указан номер телефона контактного лица ""%1""'"),
				СокрЛП(Данные.Имя));
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		Отказ = Истина;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Данные.Почта) Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не указан адрес электронной почты контактного лица ""%1""'"),
				СокрЛП(Данные.Имя));
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		Отказ = Истина;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Тело = Новый Структура();
	Тело.Вставить("id", Строка(Данные.ИдентификаторУчастника));
	Тело.Вставить("name", Данные.Имя);
	Тело.Вставить("phone", Данные.Телефон);
	Тело.Вставить("email", Данные.Почта);
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"post",
		"/legal-entities-contacts",
		Тело
	);
	
	Результат = Новый Структура();
	Результат.Вставить("Имя", Строка(РезультатЗапроса.result.name));
	Результат.Вставить("Почта", Строка(РезультатЗапроса.result.email));
	Результат.Вставить("Телефон", Строка(РезультатЗапроса.result.phone));
	Результат.Вставить("ИдентификаторУчастника", Новый УникальныйИдентификатор(РезультатЗапроса.result.id));
	Возврат Результат;
	
КонецФункции

// Обновление контактного лица
// 
// Параметры:
//  Данные - Структура - Данные контактного лица:
//   * Имя - Строка -
//   * Фамилия - Строка -
//   * Отчество - Строка -
//   * Почта - Строка -
//   * Телефон - Строка -
//   * ИдентификаторУчастника - УникальныйИдентификатор - 
// 
// Возвращаемое значение:
//  Структура -  Обновить контактное лицо:
// * Имя - Строка - 
// * Фамилия - Строка - 
// * Отчество - Строка - 
// * Почта - Строка - 
// * Телефон - Строка - 
// * ИдентификаторУчастника - УникальныйИдентификатор -  
Функция ОбновитьКонтактноеЛицо(Данные) Экспорт
	
	Тело = Новый Структура();
	Тело.Вставить("id", Строка(Данные.ИдентификаторУчастника));
	Тело.Вставить("name", Данные.Имя);
	Тело.Вставить("phone", Данные.Телефон);
	Тело.Вставить("email", Данные.Почта);
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"put",
		СтрШаблон("/legal-entities-contacts/%1", Строка(Данные.ИдентификаторУчастника)),
		Тело
	);
	
	Результат = Новый Структура();
	Результат.Вставить("Имя", Строка(РезультатЗапроса.result.name));
	//Результат.Вставить("Почта", Строка(РезультатЗапроса.result.email));
	Результат.Вставить("Телефон", Строка(РезультатЗапроса.result.phone));
	Результат.Вставить("ИдентификаторУчастника", Данные.ИдентификаторУчастника);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФизическиеЛица

// Формирует список физических лиц.
// 
// Параметры:
//  НумерацияСтраниц - Структура - настройка постраничного вывода списка:
//   * Текущая - Число - номер страницы которую хотим получить
//   * НаСтранице - Число - количество записе на одной странице
//  Отборы - Структура, Неопределено -  Отборы
// 
// Возвращаемое значение:
//  Структура -  Юридические лица:
//   * НумерацияСтраниц - Структура - :
//    ** Страница - Число - 
//    ** НаСтранице - Число -
//    ** ВсегоСтраниц - Число -
//   * ФизическиеЛица - Массив из Структура - описание юр. лиц:
//    ** ИдентификаторУчастника - УникальныйИдентификатор -
//    ** Фамилия - Строка -
//    ** Имя - Строка -
//    ** Отчество - Строка -
//    ** Почта - Строка -
//    ** Телефон - Строка -
Функция ФизическиеЛица(Знач НумерацияСтраниц, Отборы = Неопределено) Экспорт
	
	Если Отборы <> Неопределено Тогда
		
		ПараметрыЗапроса = Новый Структура();
		
		Если Отборы.Свойство("ИдентификаторУчастника") Тогда
			
			ПараметрыЗапроса.Вставить("id", Отборы.ИдентификаторУчастника);
			
		КонецЕсли;
		
		Если Отборы.Свойство("Телефон") Тогда
			
			ПараметрыЗапроса.Вставить("phone", Отборы.Телефон);
			
		КонецЕсли;
		
		Если Отборы.Свойство("Почта") Тогда
			
			ПараметрыЗапроса.Вставить("email", Отборы.Почта);
			
		КонецЕсли;
		
		Если Отборы.Свойство("ФИО") Тогда
			
			ПараметрыЗапроса.Вставить(
				"full_name",
				СтрШаблон(
					"{""first_name"":""%1"",""last_name"":""%2"",""middle_name"":""%3""}",
					Отборы.Фамилия,
					Отборы.Имя,
					Отборы.Отчество
				)
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"get",
		"/individuals",
		,
		ДобавитьНумерациюСтраницВПраметрыЗапроса(НумерацияСтраниц, ПараметрыЗапроса)
	);
	
	НумерацияСтраниц = Новый Структура(
		"Страница,НаСтранице,ВсегоСтраниц",
		РезультатЗапроса.pagination.page,
		РезультатЗапроса.pagination.per_page,
		РезультатЗапроса.pagination.total_pages
	);
	
	ФизЛица = Новый Массив();
	
	Для Каждого ЮрЛицо Из РезультатЗапроса.result Цикл
		
		ФизическоеЛицо = Новый Структура();
		ФизическоеЛицо.Вставить("ИдентификаторУчастника", Новый УникальныйИдентификатор(ЮрЛицо.id));
		ФизическоеЛицо.Вставить("Фамилия", ЮрЛицо.full_name.last_name);
		ФизическоеЛицо.Вставить("Имя", ЮрЛицо.full_name.first_name);
		ФизическоеЛицо.Вставить("Отчество", ЮрЛицо.full_name.middle_name);
		ФизическоеЛицо.Вставить("Почта", ЮрЛицо.email);
		ФизическоеЛицо.Вставить("Телефон", ЮрЛицо.phone);
		ФизЛица.Добавить(ФизическоеЛицо);
		
	КонецЦикла;
	
	Возврат Новый Структура("НумерацияСтраниц, ФизическиеЛица", НумерацияСтраниц, ФизЛица);
	
КонецФункции

// Созадние физ. лица.
// 
// Параметры:
//  ДанныеФизЛица - Структура - Данные физ. лица:
//   * Имя - Строка -
//   * Фамилия - Строка -
//   * Отчество - Строка -
//   * Почта - Строка -
//   * Телефон - Строка -
//   * ИдентификаторУчастника - УникальныйИдентификатор - 
// 
// Возвращаемое значение:
//  Структура -  Новое физическое лицо:
// * Имя - Строка - 
// * Фамилия - Строка - 
// * Отчество - Строка - 
// * Почта - Строка - 
// * Телефон - Строка - 
// * ИдентификаторУчастника - УникальныйИдентификатор - 
Функция НовоеФизическоеЛицо(Знач ДанныеФизЛица) Экспорт
	
	Тело = Новый Структура();
	Тело.Вставить("id", Строка(ДанныеФизЛица.ИдентификаторУчастника));
	Тело.Вставить("email", ДанныеФизЛица.Почта);
	Тело.Вставить("phone", ДанныеФизЛица.Телефон);
	
	ПолноеИмя = Новый Структура(
			"first_name,last_name,middle_name",
			ДанныеФизЛица.Имя,
			ДанныеФизЛица.Фамилия,
			ДанныеФизЛица.Отчество
	);
	Тело.Вставить("full_name", ПолноеИмя);
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"post",
		"/individuals",
		Тело
	);
	
	Результат = Новый Структура();
	Результат.Вставить("Имя", Строка(РезультатЗапроса.result.full_name.first_name));
	Результат.Вставить("Фамилия", Строка(РезультатЗапроса.result.full_name.last_name));
	Результат.Вставить("Отчество", Строка(РезультатЗапроса.result.full_name.middle_name));
	Результат.Вставить("Почта", Строка(РезультатЗапроса.result.email));
	Результат.Вставить("Телефон", Строка(РезультатЗапроса.result.phone));
	Результат.Вставить("ИдентификаторУчастника", Новый УникальныйИдентификатор(РезультатЗапроса.result.id));
	Возврат Результат;
	
КонецФункции

// Обновление физического лица
// 
// Параметры:
//  Данные - Структура - Данные контактного лица:
//   * Имя - Строка -
//   * Фамилия - Строка -
//   * Отчество - Строка -
//   * Почта - Строка -
//   * Телефон - Строка -
//   * ИдентификаторУчастника - УникальныйИдентификатор - 
// 
// Возвращаемое значение:
//  Структура -  Обновить контактное лицо:
// * Имя - Строка - 
// * Фамилия - Строка - 
// * Отчество - Строка - 
// * Почта - Строка - 
// * Телефон - Строка - 
// * ИдентификаторУчастника - УникальныйИдентификатор -  
Функция ОбновитьФизическоеЛицо(Данные) Экспорт
	
	Тело = Новый Структура();
	Тело.Вставить("id", Строка(Данные.ИдентификаторУчастника));
	Тело.Вставить(
		"full_name",
		Новый Структура(
			"first_name,last_name,middle_name",
			Данные.Имя,
			Данные.Фамилия,
			Данные.Отчество
		)
	);
	Тело.Вставить("phone", Данные.Телефон);
	Тело.Вставить("email", Данные.Почта);
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"put",
		СтрШаблон("/individuals/%1", Строка(Данные.ИдентификаторУчастника)),
		Тело
	);
	
	Результат = Новый Структура();
	Результат.Вставить("Имя", Строка(РезультатЗапроса.result.full_name.first_name));
	Результат.Вставить("Фамилия", Строка(РезультатЗапроса.result.full_name.last_name));
	Результат.Вставить("Отчество", Строка(РезультатЗапроса.result.full_name.middle_name));
	Результат.Вставить("Почта", Строка(РезультатЗапроса.result.email));
	Результат.Вставить("Телефон", Строка(РезультатЗапроса.result.phone));
	Результат.Вставить("ИдентификаторУчастника", Данные.ИдентификаторУчастника);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СистемныйЖурнал

// Системный журнал ПЭП.
// 
// Параметры:
//  НумерацияСтраниц - Структура - настройка постраничного вывода списка:
//   * Текущая - Число - номер страницы которую хотим получить
//   * НаСтранице - Число - количество записе на одной странице
//  Отборы - Структура, Неопределено -  Отборы
// 
// Возвращаемое значение:
//  Структура -  Системный журнал:
// * НумерацияСтраниц - Структура - :
//  ** Страница - Число - 
//  ** НаСтранице - Число -
//  ** ВсегоСтраниц - Число -
// * СобытияЖурнала - Массив из Структура - описание события журнала:
//  ** Данные - Неопределено -
//  ** ИдентификаторЗаписи - УникальныйИдентификатор -
//  ** ИдентификаторДанных - УникальныйИдентификатор -
//  ** ДатаСоздания - Дата -
//  ** ПодсистемаПЭП - Строка -
//  ** УровеньЖурнала - Строка -
//  ** Контекст - Произвольный -
Функция СистемныйЖурнал(Знач НумерацияСтраниц, Отборы = Неопределено) Экспорт
	
	Если Отборы <> Неопределено Тогда
		
		ПараметрыЗапроса = Новый Структура();
		
		Если Отборы.Свойство("ДатаНачала") Тогда
			
			ПараметрыЗапроса.Вставить("created_from", Отборы.ДатаНачала);
			
		КонецЕсли;
		
		Если Отборы.Свойство("ДатаОкончания") Тогда
			
			ПараметрыЗапроса.Вставить("created_to", Отборы.ДатаОкончания);
			
		КонецЕсли;
		
		Если Отборы.Свойство("УровеньЖурнала") Тогда
			
			ПараметрыЗапроса.Вставить("level", Отборы.УровеньЖурнала);
			
		КонецЕсли;
		
		Если Отборы.Свойство("ПодсистемаПЭП") Тогда
			
			ПараметрыЗапроса.Вставить("system", Отборы.ПодсистемаПЭП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"get",
		"/journal",
		,
		ДобавитьНумерациюСтраницВПраметрыЗапроса(НумерацияСтраниц, ПараметрыЗапроса)
	);
	
	НумерацияСтраниц = Новый Структура(
		"Страница,НаСтранице,ВсегоСтраниц",
		РезультатЗапроса.pagination.page,
		РезультатЗапроса.pagination.per_page,
		РезультатЗапроса.pagination.total_pages
	);
	
	СобытияЖурнала = Новый Массив();
	
	Для Каждого Событие Из РезультатЗапроса.result Цикл
		
		НовоеСобытие = Новый Структура("Данные");
		НовоеСобытие.Вставить("ИдентификаторЗаписи", Новый УникальныйИдентификатор(Событие.id));
		
		Если ЗначениеЗаполнено(Событие.entity_id) Тогда
			
			НовоеСобытие.Вставить("ИдентификаторДанных", Новый УникальныйИдентификатор(Событие.entity_id));
			
		Иначе
			
			НовоеСобытие.Вставить("ИдентификаторДанных", Неопределено);
			
		КонецЕсли;
		
		НовоеСобытие.Вставить("ДатаСоздания", XMLЗначение(Тип("Дата"), Событие.created_at));
		НовоеСобытие.Вставить("ПодсистемаПЭП", Событие.system);
		НовоеСобытие.Вставить("УровеньЖурнала", Событие.level);
		НовоеСобытие.Вставить("Контекст", Событие.context);
		СобытияЖурнала.Добавить(НовоеСобытие);
		
	КонецЦикла;
	
	Возврат Новый Структура("НумерацияСтраниц, СобытияЖурнала", НумерацияСтраниц, СобытияЖурнала);
	
КонецФункции

#КонецОбласти

#Область Файлы

// Отправка нового файла на сервер.
// 
// Параметры:
//  ИмяФайла - Строка - Имя файла;
//  ДанныеФайла - ДвоичныеДанные - Данные файла для отправки;
// 
// Возвращаемое значение:
//  Структура - Новый файл:
// * ИмяФайлаПЭП - Строка -
// * ИдентификаторФайла - УникальныйИдентификатор - 
Функция НовыйФайл(ИмяФайла, ДанныеФайла) Экспорт
	
	Разделитель = "Asrf456BGe4h";
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
	
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	ЗаписьДанных.ЗаписатьСтроку(СтрШаблон("Content-Disposition: form-data; name=""file""; filename=""%1""", ИмяФайла));
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: application/pdf");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.Записать(ДанныеФайла);
	ЗаписьДанных.Закрыть();
	ЗавернутыйФайл = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""name""");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку(ИмяФайла);
	ЗаписьДанных.Закрыть();
	ЗавернутыйТекст = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Тело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Тело);
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ЗавернутыйФайл);
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ЗавернутыйТекст);
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
	ЗаписьДанных.Закрыть();
	ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"post",
		"/files",
		ДанныеТела,
		,
		Новый Структура("Заголовки", Заголовки)
	);
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФайлаПЭП", Строка(РезультатЗапроса.result.file_name));
	Результат.Вставить("ИдентификаторФайла", Новый УникальныйИдентификатор(РезультатЗапроса.result.id));
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаявкиНаПодпись

// Новая заявка на подпись.
// 
// Параметры:
//  ИдентификаторЗаявки - УникальныйИдентификатор - Уникальный идентификатор заявки;
//  Участники - Структура - Идентификаторы участников;
//  Файл - УникальныйИдентификатор - Идентификатор файла;
// 
// Возвращаемое значение:
//  Структура - Идентификатор созданной заявки:
//  * ИдентификаторЗаявки - УникальныйИдентификатор - 
//  * СсылкаДляСкачиванияВПЭП - Строка - 
Функция НоваяЗаявкаНаПодпись(ИдентификаторЗаявки, Участники, Файл) Экспорт
	
	Тело = Новый Структура("channel", "sms");
	Тело.Вставить("id", Строка(ИдентификаторЗаявки));
	Тело.Вставить("legal_entity_id", Строка(Участники.ИдентификаторЮридическоеЛицоПЭП));
	Тело.Вставить("contact_id", Строка(Участники.ИдентификаторКонтактноеЛицоПЭП));
	Тело.Вставить("individual_id", Строка(Участники.ИдентификаторФизическоеЛицоПЭП));
	Тело.Вставить("file_id", Строка(Файл));
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"post",
		"/document-sign-requests",
		Тело
	);
	Возврат Новый Структура(
		"ИдентификаторЗаявки,СсылкаДляСкачиванияВПЭП",
		Новый УникальныйИдентификатор(РезультатЗапроса.result.id),
		Строка(РезультатЗапроса.result.file_data.download_url)
	);
	
КонецФункции

// Получение данных заявки на подпись из ПЭП
// 
// Параметры:
//  ИдентификаторЗаявкиНаПодпись - УникальныйИдентификатор - Идентификатор заявки на подпись
// 
// Возвращаемое значение:
//  Структура -  Заявка на подпись:
// * СсылкаДляСкачиванияВПЭП - Строка - 
// * СостояниеДокумента - ПеречислениеСсылка.СтатусыЗаявокНаПодпись - 
Функция ЗаявкаНаПодпись(ИдентификаторЗаявкиНаПодпись) Экспорт
	
	РезультатЗапроса = ВыполнитьЗащищенныйЗапрос(
		"get",
		СтрШаблон("/document-sign-requests/%1", Строка(ИдентификаторЗаявкиНаПодпись))
	);
	
	Результат = Новый Структура();
	Результат.Вставить("СсылкаДляСкачиванияВПЭП", Строка(РезультатЗапроса.result.file_data.download_url));
	Результат.Вставить("СостояниеДокумента", НайтиСостояниеДокумента(РезультатЗапроса.result.status));
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьЗапрос(Глагол,
                        Путь,
                        Тело = Неопределено,
                        Параметры = Неопределено,
                        ДополнительныеПараметры = Неопределено)
	
	МенеджерСоединения = МенеджерСоединения();
	
	Ответ = HTTPТранспортПЭПКлиентСервер.ВыполнитьЗапрос(
		МенеджерСоединения,
		Глагол, Путь,
		Тело,
		Параметры,
		Новый Соответствие(),
		,
		ДополнительныеПараметры
	);
	
	Возврат РазобратьТелоОтвета(Ответ);
	
КонецФункции

Функция ВыполнитьЗащищенныйЗапрос(Глагол,
                                  Путь,
                                  Тело = Неопределено,
                                  Параметры = Неопределено,
                                  ДополнительныеПараметры = Неопределено)
	
	МенеджерСоединения = МенеджерСоединения();
	ЗаголовкиЗащищенногоЗапроса = ЗаголовкиЗащищенногоЗапроса();
	
	Ответ = HTTPТранспортПЭПКлиентСервер.ВыполнитьЗапрос(
		МенеджерСоединения,
		Глагол, Путь,
		Тело,
		Параметры,
		ЗаголовкиЗащищенногоЗапроса,
		,
		ДополнительныеПараметры
	);
	
	Возврат РазобратьТелоОтвета(Ответ);
	
КонецФункции

Функция МенеджерСоединения()
	
	Возврат ИнтеграцияПЭППереопределяемый.МенеджерСоединения();
	
КонецФункции

Функция ЗаголовкиЗащищенногоЗапроса()
	
	Результат = Новый Соответствие();
	
	ApiКлюч = ApiКлюч();
	
	Если Не ЗначениеЗаполнено(ApiКлюч) Тогда
		
		ВызватьИсключение НСтр("ru = 'Не выполнена авторизация на сервере ПЭП, выполнение запроса не возможно'");
		
	КонецЕсли;
	
	Результат.Вставить("Authorization", СтрШаблон("Bearer %1", ApiКлюч));
	Возврат Результат;
	
КонецФункции

Функция ApiКлюч()
	
	Возврат ИнтеграцияПЭППереопределяемый.APIКлюч();
	
КонецФункции

Функция РазобратьТелоОтвета(Ответ)
	
	Если Ответ.Ошибка Тогда
		
		ТекстИсключения = Ответ.тело;
		
		Попытка
			
			ТелоОтвета = HTTPТранспортПЭПКлиентСервер.РазобратьJSON(Ответ.Тело);
			
		Исключение
			
			ВызватьИсключение ТекстИсключения;
			
		КонецПопытки;
		
		Если ТелоОтвета.Свойство("error") И ТелоОтвета.error.Свойство("message") Тогда
			ТекстИсключения = ТелоОтвета.error.message;
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли ТелоОтвета.Свойство("status") И ТелоОтвета.Свойство("detail") Тогда
			ВызватьИсключение ТелоОтвета.detail;
		Иначе
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	Иначе
		
		Попытка
			
			ТелоОтвета = HTTPТранспортПЭПКлиентСервер.РазобратьJSON(Ответ.Тело);
			
		Исключение
			
			ВызватьИсключение НСтр("ru='Тело ответа сервера не является валидным'") ;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ТелоОтвета;
	
КонецФункции

Функция ДобавитьНумерациюСтраницВПраметрыЗапроса(НумерацияСтраниц, Знач ПараметрыЗапроса = Неопределено)
	
	Если ПараметрыЗапроса = Неопределено Тогда
		
		ПараметрыЗапроса = Новый Структура();
		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("page", НумерацияСтраниц.Текущая);
	ПараметрыЗапроса.Вставить("per_page", НумерацияСтраниц.НаСтранице);
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Найти состояние документа.
// 
// Параметры:
//  СостояниеДокументаВПЭП - Строка - Состояние документа ВПЭП
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыЗаявокНаПодпись
Функция НайтиСостояниеДокумента(СостояниеДокументаВПЭП)
	
	Состояния = Новый Структура(
		"new,signed,rejected",
		Перечисления.СтатусыЗаявокНаПодпись.ОтправленВПЭП,
		Перечисления.СтатусыЗаявокНаПодпись.Подписан,
		Перечисления.СтатусыЗаявокНаПодпись.Отклонен
	);
	Возврат Состояния[СостояниеДокументаВПЭП];
	
КонецФункции

#КонецОбласти
