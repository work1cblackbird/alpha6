// Общий модуль "Управление печатью (платформа,сервер)"

#Область ПрограммныйИнтерфейс

// Процедура добавления команды печати в комплект
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати. 
//                                    см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//  МенеджерПечати - Строка, Неопределено - Имя объекта, в модуле менеджера которого располагается
//											процедура Печать, формирующая табличные документы для этой команды
//  Идентификатор - Строка - Идентификатор команды печати, по которому менеджер печати определяет печатную
//								форму, которую необходимо сформировать
//  Представление - Строка - Представление команды в меню Печать
//  Объект - ДокументСсылка, СправочникСсылка - (необязательный). Объект, для которого добавляется команда.
//  Обработчик - Строка - (необязательный).Клиентский обработчик команды, в который необходимо передать
//											управление вместо стандартного обработчика команды печать.
//  МестоРазмещения - Строка - Имя командной панели формы, в которую необходимо разместить команду печати.
//  Картинка - Картинка - Картинка, которая отображается возле команды в меню Печать
//  СписокФорм - Строка - (необязательный).Имена форм через запятую, в которых должна отображаться
//											команда. Если параметр не указан, то команда печати будет отображаться во
//											всех формах объекта, где встроена подсистема Печать.
//  ЗаголовокФормы - Строка - (необязательный).Произвольная строка, переопределяющая стандартных заголовок
//											формы «Печать документов»
//  ПроверкаПроведенияПередПечатью - Булево - (необязательный) Признак необходимости проверки проведенности
//											документов перед печатью. Если параметр не указан, то проверка проведенности не выполняется.
//  СразуНаПринтер - Булево - (необязательный).Признак необходимости печати документов без предварительного
//											просмотра, сразу на принтер. Если параметр не указан, то при выборе команды
//											печати открывается форма предварительного просмотра «Печать документов».
//  ФорматСохранения - ТипФайлаТабличногоДокумента - (необязательный) Применяется для быстрого сохранения печатной
//											формы (без дополнительных действий) в различные форматы, отличные от mxl.
//											Если параметр не указан, то формируется обычный mxl.
//  ПереопределитьПользовательскиеНастройкиКоличества - - Булево - (необязательный) Признак необходимости отключения в
//											форме ПечатьДокументов механизма сохранения/восстановления выбранного
//											пользователем количества экземпляров на печать. Если параметр не указан, то
//											механизм сохранения/восстановления настроек будет работать при открытии формы.
//											ПечатьДокументов.
//  ДополнитьКомплектВнешнимиПечатнымиФормами - Булево - (необязательный). Признак необходимости дополнить комплект
//											документов всеми подключенными к объекту внешними печатными формами
//											(подсистема ДополнительныеОтчетыИОбработки). Если параметр не указан, внешние
//											печатные формы не добавляются в комплект.
//  ФиксированныйКомплект - Булево - (необязательный).Признак необходимости блокировки от изменения пользователем
//											состава комплекта документов. Если параметр не указан, то пользователь сможет
//											исключать отдельные печатные формы из комплекта в форме ПечатьДокументов, а
//											также изменять их количество.
//  НеВыполнятьЗаписьВФорме - Булево  - (необязательный) Признак необходимости отключения механизма записи объекта
//											перед выполнением команды печати. Используется в исключительных случаях. Если
//											параметр не указан, производится запись объекта в случае, если в форме
//											объекта установлен признак модифицированности.
//  Порядок - Число - (необязательный) Значение от 1 до 100, указывающее порядок размещения команды
//											по отношению к другим командам. Сортировка команд меню Печать осуществляется
//											сначала по полю Порядок, затем по представлению.
//											Значение по умолчанию: 50.
//  ФункциональныеОпции - Строка - (необязательный). Имена функциональных опций через запятую, от которых зависит
//											доступность команды печати.
//  ТипыОбъектовПечати - Массив - (необязательный) список типов объектов, для которых предназначена команда
//											печати. Параметр предназначен для команд печати в журналах документов, где
//											требуется проверка передаваемого типа объекта перед вызовом менеджера печати.
//											Если список не заполнен, то при автоматическом создании списка команд печати
//											в журнале документов он заполняется типом объекта, из которого была
//											импортирована команда печати.
//
Процедура ДобавитьКоманду(КомандыПечати,
		МенеджерПечати,
		Идентификатор,
		Представление,
		Объект = "",
		Обработчик = "",
		МестоРазмещения = Неопределено,
		Картинка = Неопределено,
		СписокФорм = "",
		ЗаголовокФормы = "",
		ПроверкаПроведенияПередПечатью = Неопределено,
		СразуНаПринтер = Ложь,
		ФорматСохранения = Неопределено,
		ПереопределитьПользовательскиеНастройкиКоличества = Ложь,
		ДополнитьКомплектВнешнимиПечатнымиФормами = Ложь,
		ФиксированныйКомплект = Ложь,
		НеВыполнятьЗаписьВФорме = Неопределено,
		Порядок = Неопределено,
		ФункциональныеОпции = "",
		ТипыОбъектовПечати = Неопределено) Экспорт
	
	Если КомандыПечати=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// !!!_alalek Временно! удалить после разнесения правок в ТП3 и А6
	Если Найти(Объект, ".") > 0 Тогда
		ДобавитьКоманду(
			КомандыПечати,
			МенеджерПечати,
			Идентификатор,
			Представление,
			,
			Объект,
			Обработчик,
			МестоРазмещения,
			Картинка,
			СписокФорм,
			ЗаголовокФормы,
			ПроверкаПроведенияПередПечатью,
			СразуНаПринтер,
			ФорматСохранения,
			ПереопределитьПользовательскиеНастройкиКоличества,
			ДополнитьКомплектВнешнимиПечатнымиФормами,
			ФиксированныйКомплект,
			НеВыполнятьЗаписьВФорме,
			Порядок,
			ФункциональныеОпции
		);
		Возврат;
	КонецЕсли;
	// !!!_alalek Временно! удалить после разнесения правок в ТП3 и А6
	
	СтрокаКоманды = КомандыПечати.Добавить();
	СтрокаКоманды.МенеджерПечати = МенеджерПечати;
	СтрокаКоманды.Идентификатор  = Идентификатор;
	СтрокаКоманды.Представление  = Представление;
	СтрокаКоманды.Обработчик     = Обработчик;
	
	Если ЗначениеЗаполнено(МестоРазмещения) Тогда
		СтрокаКоманды.МестоРазмещения = МестоРазмещения;
	КонецЕсли;

	Если ЗначениеЗаполнено(Картинка) Тогда
		СтрокаКоманды.Картинка = Картинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокФорм) Тогда
		СтрокаКоманды.СписокФорм = СписокФорм;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФункциональныеОпции) Тогда
		СтрокаКоманды.ФункциональныеОпции = ФункциональныеОпции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаголовокФормы) Тогда
		СтрокаКоманды.ЗаголовокФормы = ЗаголовокФормы;
	Иначе
		СтрокаКоманды.ЗаголовокФормы = Представление;
	КонецЕсли;
	
	Если ПроверкаПроведенияПередПечатью <> Неопределено Тогда
		СтрокаКоманды.ПроверкаПроведенияПередПечатью = ПроверкаПроведенияПередПечатью;
	Иначе
		СтрокаКоманды.ПроверкаПроведенияПередПечатью = (НЕ ПраваИНастройкиПользователя.Значение("ПечатьНепроведенных", Объект));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СразуНаПринтер) Тогда
		СтрокаКоманды.СразуНаПринтер = СразуНаПринтер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФорматСохранения) Тогда
		СтрокаКоманды.ФорматСохранения = ФорматСохранения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПереопределитьПользовательскиеНастройкиКоличества) Тогда
		СтрокаКоманды.ПереопределитьПользовательскиеНастройкиКоличества = ПереопределитьПользовательскиеНастройкиКоличества;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнитьКомплектВнешнимиПечатнымиФормами) Тогда
		СтрокаКоманды.ДополнитьКомплектВнешнимиПечатнымиФормами = ДополнитьКомплектВнешнимиПечатнымиФормами;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФиксированныйКомплект) Тогда
		СтрокаКоманды.ФиксированныйКомплект = ФиксированныйКомплект;
	КонецЕсли;
	
	Если СтрокаКоманды.ПроверкаПроведенияПередПечатью Тогда
		СтрокаКоманды.НеВыполнятьЗаписьВФорме = Ложь;
	ИначеЕсли НеВыполнятьЗаписьВФорме <> Неопределено Тогда
		СтрокаКоманды.НеВыполнятьЗаписьВФорме = НеВыполнятьЗаписьВФорме;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Порядок) Тогда
		СтрокаКоманды.Порядок = Порядок;
	Иначе
		СтрокаКоманды.Порядок = КомандыПечати.Количество()+1;
	КонецЕсли;
	
	Если ТипыОбъектовПечати <> Неопределено Тогда
		СтрокаКоманды.ТипыОбъектовПечати = ТипыОбъектовПечати;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКоманду()

// Устанавливает для табличного документа стандартные параметры печати.
//
// Параметры:
//  ИмяПараметровПечати - Строка - идентификатор параметров печати;
//  НастраиваемыйТабличныйДокумент - ТабличныйДокумент - настраиваемый табличный документ.
//
Процедура УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, НастраиваемыйТабличныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПечати = ХранилищеСистемныхНастроек.Загрузить(ИмяПараметровПечати + "_Стандартный", , , "Стандартный");
	Если НЕ ПараметрыПечати = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастраиваемыйТабличныйДокумент, ПараметрыПечати);
		Если НЕ НастраиваемыйТабличныйДокумент.ИмяПараметровПечати = "" Тогда
			ХранилищеСистемныхНастроек.Удалить(
				"Общее/НастройкиПечатиТабличногоДокумента/" + ИмяПараметровПечати,
				Неопределено,
				Строка(Пользователи.ТекущийПользователь())
			);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //УстановитьСтандартныеПараметрыПечати()

// Возвращает формат вывода количества
//
// Параметры:
//  Объект - Ссылка
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьФорматВыводаКоличества(Объект) Экспорт
	
	Формат = Константы.ФорматВыводаКоличества.Получить();
	
	Если НЕ ЗначениеЗаполнено(Формат) Тогда
		Формат = "ЧН=0";
	КонецЕсли;
	
	Возврат Формат;
	
КонецФункции

// Возвращает формат вывода суммы
//
// Параметры:
//  Объект - Ссылка
//
// Возвращаемое значение:
//  Строка
Функция ПолучитьФорматВыводаСуммы(Объект) Экспорт
	
	Формат = Константы.ФорматВыводаСуммы.Получить();
	
	Если НЕ ЗначениеЗаполнено(Формат) Тогда
		Формат = "ЧДЦ=2; ЧН=0,00";
	КонецЕсли;
	
	Возврат Формат;
	
КонецФункции

// Полное наименование справочника, если есть.
//
// Параметры:
//  Объект - СправочникСсылка - объект, для которого получаем наименование
//  НаДату - Дата - (необязательное) дата, на которую получаем данные
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьНаименованиеСправочника(Объект, НаДату = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект,"НаименованиеПолное") Тогда
		Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
			НаименованиеПолное = Объект.НаименованиеПолное;
			
			Если ЗначениеЗаполнено(НаДату) Тогда
				СтруктураНаименований = ОбщегоНазначенияАвтосалон.ПолучитьНаименованияНаДату(Объект, НаДату);
				НаименованиеПолное = СтруктураНаименований.НаименованиеПолное;
			КонецЕсли;
			
			Возврат НаименованиеПолное;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Объект.Наименование;
	
КонецФункции

// КПП для печати
//
// Параметры:
//  Организация		- СправочникСсылка.Организации			 - Организация из документа
//  Подразделение	- СправочникСсылка.ПодразделенияКомпании - подразделение компании из документа;
//  ДатаДокумента	- Дата									 - дата, на которую получаем КПП.
//
// Возвращаемое значение:
//  Строка - КПП на дату
//
Функция ПолучитьКППДляПечати(Организация, Подразделение, ДатаДокумента) Экспорт
	
	Если ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат РеквизитыСИсторией.ПолучитьКППНаДату(Организация, ДатаДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Подразделение.КПП) Тогда
		КПП = РеквизитыСИсторией.ПолучитьКППНаДату(Подразделение, ДатаДокумента);
	Иначе
		КПП = РеквизитыСИсторией.ПолучитьКППНаДату(Организация, ДатаДокумента);
	КонецЕсли;
	
	Возврат КПП;
	
КонецФункции // ПолучитьКППДляПечати()

// Данные ответственного лица документа.
//
// Параметры:
//  Документ - ДокументСсылка - документ, для которого получаем данные;
//  ВидОтветственногоЛица - Строка, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения - вид ответственного лица;
//  ВыводНаПечать - Строка - префикс;
//  Организация - СправочникСсылка.Организации - (необязательное) организация из документа.  
//  ВыводитьПолноеФИО - Булево - истина, вывод в формате Фамилия Имя Отчество
//  ОбрамлятьФИО      - Булево - истина, вывод в формате /ФИО/
//
// Возвращаемое значение:
//  Структура - содержит должность и представление ответственного лица.
//
Функция ДанныеОтветственногоЛица(Документ,
	ВидОтветственногоЛица,
	ВыводНаПечать = "",
	Знач Организация = Неопределено,
	ВыводитьПолноеФИО = Ложь,
	ОбрамлятьФИО = Ложь) Экспорт
	
	
	Если ЕстьРеквизит(Документ, ВидОтветственногоЛица) И ЗначениеЗаполнено(Документ[ВидОтветственногоЛица]) Тогда
		
		ОтветственноеЛицо = Документ[ВидОтветственногоЛица]; 
		
		Если ТипЗнч(ОтветственноеЛицо) =Тип("СправочникСсылка.Подписанты") Тогда 
				
				СтруктураПодписант = ДанныеОтветственногоЛицаПодписанты(Документ,ВидОтветственногоЛица,Организация, ВыводитьПолноеФИО, ОбрамлятьФИО);
				
				Если ПустаяСтрока(ВыводНаПечать) Тогда
					
					ВыводНаПечать =  ВидОтветственногоЛица;
					
				КонецЕсли; 
				
				СтруктураСВидом = Новый Структура(); 
				СтруктураСВидом.Вставить(ВыводНаПечать + "Должность", СтруктураПодписант.Должность);
				СтруктураСВидом.Вставить(ВыводНаПечать + "Представление", СтруктураПодписант.Представление); 
				
				Если СтруктураПодписант.Свойство("Руководитель") Тогда
					СтруктураСВидом.Вставить(ВыводНаПечать, СтруктураПодписант.Руководитель);
				ИначеЕсли СтруктураПодписант.Свойство("ГлавныйБухгалтер") Тогда
					СтруктураСВидом.Вставить(ВыводНаПечать, СтруктураПодписант.ГлавныйБухгалтер);
				ИначеЕсли СтруктураПодписант.Свойство("Отпустил") Тогда
					СтруктураСВидом.Вставить(ВыводНаПечать, СтруктураПодписант.Отпустил);
				ИначеЕсли СтруктураПодписант.Свойство("Получил") Тогда
					СтруктураСВидом.Вставить(ВыводНаПечать, СтруктураПодписант.Получил); 
				ИначеЕсли СтруктураПодписант.Свойство("Принял") Тогда
					СтруктураСВидом.Вставить(ВыводНаПечать, СтруктураПодписант.Принял); 
				ИначеЕсли СтруктураПодписант.Свойство("Исполнитель") Тогда 
					СтруктураСВидом.Вставить(ВыводНаПечать, СтруктураПодписант.Исполнитель); 
				КонецЕсли;
				
				Возврат СтруктураСВидом; 
				
			КонецЕсли;
			
	КонецЕсли;

	ОтветственноеЛицо = Неопределено; 
		
	стрВидОтветственногоЛица = ?(ТипЗнч(ВидОтветственногоЛица) = Тип("Строка"),
		ВидОтветственногоЛица,
		Метаданные
			.Перечисления
			.ВидыОбъектовСведений
			.ЗначенияПеречисления[Перечисления.ВидыОбъектовСведений.Индекс(ВидОтветственногоЛица)].Имя
	);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда 
		Если стрВидОтветственногоЛица = "Отпустил" Тогда
			Организация	= Документ.ПодразделениеКомпании;
		Иначе
			Организация = Документ.Организация; 
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(ВыводНаПечать) Тогда
		ВыводНаПечать = стрВидОтветственногоЛица;
	КонецЕсли;
	
	// пытаемся найти заполненное значение
	Свойства = УправлениеСвойствами.ПолучитьЗначенияСвойств(
		Документ.Ссылка,
		ЕстьРеквизит(Документ, , "ДополнительныеРеквизиты")
	);
	
	Попытка
		СвойствоПВХ = ?(ТипЗнч(ВидОтветственногоЛица) = Тип("Строка"),
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения[ВидОтветственногоЛица],
			ВидОтветственногоЛица
		);
	Исключение
		СвойствоПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	КонецПопытки;
	
	СтрокаСвойства = Свойства.Найти(СвойствоПВХ, "Свойство");
	Если СтрокаСвойства <> Неопределено Тогда
		ОтветственноеЛицо = СтрокаСвойства.Значение;
	КонецЕсли;
	
	// +Рарус Для корректной работы функции при вызове из справочника "Подтверждающие документы".
	Если Метаданные.Документы.Содержит(Документ.Метаданные()) Тогда
		Дата = Документ.Дата; 
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	// -Рарус
	
	Если НЕ ЗначениеЗаполнено(ОтветственноеЛицо) Тогда
		Если ЕстьРеквизит(Документ, стрВидОтветственногоЛица) И ЗначениеЗаполнено(Документ[стрВидОтветственногоЛица]) Тогда
			ОтветственноеЛицо = Документ[стрВидОтветственногоЛица];
		Иначе
			// +Рарус Для корректной работы функции при вызове из справочника "Подтверждающие документы"
			//Если Метаданные.Документы.Содержит(Документ.Метаданные()) Тогда
			//	Дата = Документ.Дата; 
			//Иначе
			//	Дата = ТекущаяДатаСеанса();
			//КонецЕсли;
			
			ТипОтветственногоЛица = ПолучитьТипОтветственногоЛица(стрВидОтветственногоЛица);
			ДокументПоставщика = ПолучитьДокументыПоставщика(Документ);
			
			Если ТипОтветственногоЛица <> Неопределено И Не ДокументПоставщика Тогда
				Отбор = Новый Структура("Организация,Объект", Организация, ТипОтветственногоЛица);
				СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(Дата, Отбор);
				// -Рарус
				ОтветственноеЛицо = СтруктураСведений.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// положим все в структуру
	СтруктураВозврата = Новый Структура;
	Если ЕстьРеквизит(ОтветственноеЛицо, "Должность") Тогда
		СтруктураВозврата.Вставить(ВыводНаПечать + "Должность",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтветственноеЛицо, "Должность")
		);
	Иначе
		СтруктураВозврата.Вставить(ВыводНаПечать + "Должность");
	КонецЕсли;
	// +Рарус
	      
	ФамилияИмяОтчество =  ПолучитьНаименованиеСправочника(ОтветственноеЛицо, Дата);
	Если НЕ ВыводитьПолноеФИО
		И НЕ ПустаяСтрока(ФамилияИмяОтчество)
		И ФизическиеЛицаКлиентСервер.ФИОНаписаноВерно(ФамилияИмяОтчество) Тогда 
		
		ФамилияИмяОтчество = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФамилияИмяОтчество)
		
	КонецЕсли;
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 %2 %1",
		?(ОбрамлятьФИО, "/", ""),
		ФамилияИмяОтчество
	);
	СтруктураВозврата.Вставить(ВыводНаПечать + "Представление", Представление);
	
	// -Рарус
	СтруктураВозврата.Вставить(ВыводНаПечать, ОтветственноеЛицо);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	ВсеОбъектыПечати = УправлениеПечатьюПовтИсп.ОбъектыСКомандамиПечати();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокОбъектов, ВсеОбъектыПечати);
	
КонецПроцедуры // ПриОпределенииОбъектовСКомандамиПечати()

// Добавляет группу команд на форму.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - См. УправлениеПечатью.СоздатьКоллекциюКомандПечати().
//  Идентификатор - Строка - строковый идентификатор группы.
//  Представление - Строка - имя группы.
//  ЭтоПодменю - Булево - Истина, если это подменю
//  МестоРазмещения - Строка - (необязательное) имя элемента формы.
//  Порядок - Число.
//
Процедура ДобавитьГруппуКоманд(КомандыПечати, Идентификатор, Представление, ЭтоПодменю,
		МестоРазмещения = Неопределено, Порядок = Неопределено) Экспорт
	
	Если КомандыПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКоманды = КомандыПечати.Добавить();
	СтрокаКоманды.ЭтоГруппа        = Истина;
	СтрокаКоманды.Идентификатор    = Идентификатор;
	СтрокаКоманды.Представление    = Представление;
	СтрокаКоманды.ВидГруппыПодменю = ЭтоПодменю;
	
	Если ЗначениеЗаполнено(МестоРазмещения) Тогда
		СтрокаКоманды.МестоРазмещения = МестоРазмещения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Порядок) Тогда
		СтрокаКоманды.Порядок = Порядок;
	Иначе
		СтрокаКоманды.Порядок = КомандыПечати.Количество() + 1;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьГруппуКоманд()

// Добавляет группу команд на форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//  КомандыПечати - ТаблицаЗначений - См. УправлениеПечатью.СоздатьКоллекциюКомандПечати().
//  МестоРазмещенияКомандПоУмолчанию - Строка - имя элемента формы.
//
Процедура СоздатьГруппыКомандНаФорме(Форма, КомандыПечати, МестоРазмещенияКомандПоУмолчанию) Экспорт
	
	// Определим имя группы подменю печати по умолчанию
	Если МестоРазмещенияКомандПоУмолчанию = Неопределено Тогда
		ИмяГруппыРодителяПоУмолчанию = "КоманднаяПанель";
	Иначе
		ИмяГруппыРодителяПоУмолчанию = МестоРазмещенияКомандПоУмолчанию.Имя;
	КонецЕсли;
	
	// Произведем добавление кнопки подменю Печать на командной панели формы
	Если НЕ (Форма.Элементы[ИмяГруппыРодителяПоУмолчанию].Вид = ВидГруппыФормы.Подменю
			ИЛИ КомандыПечати.Количество() = 1) Тогда
		
		МестоРазмещенияКомандПоУмолчанию = ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(
			Форма,
			ИмяГруппыРодителяПоУмолчанию + "ПодменюПечать",
			ИмяГруппыРодителяПоУмолчанию,
			Истина,
			НСтр("ru = 'Печать'"),
			БиблиотекаКартинок.Печать,
			НСтр("ru = 'Подменю печати'"),
			,
			ОтображениеКнопки.Картинка
		);
		ИмяГруппыРодителяПоУмолчанию = ИмяГруппыРодителяПоУмолчанию + "ПодменюПечать";
	КонецЕсли;
	
	// Обработаем все команды, которые описывают группы
	Для Каждого ГруппаКоманд Из КомандыПечати.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина)) Цикл
		
		// Определим где должна располагаться текущая группа
		Если ЗначениеЗаполнено(ГруппаКоманд.МестоРазмещения) 
			И (НЕ Форма.Элементы.Найти(ГруппаКоманд.МестоРазмещения) = Неопределено) Тогда
			
			ИмяГруппыРодителя = ГруппаКоманд.МестоРазмещения;
			
		Иначе
			
			ИмяГруппыРодителя = ИмяГруппыРодителяПоУмолчанию;
			
		КонецЕсли;
		
		// Определим имя группы с которым оно будет добавлено на форму
		ИмяГруппы = ИмяГруппыРодителя + "Группа" + ГруппаКоманд.Идентификатор;
		
		// Производим создание элемента формы
		ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(
			Форма,
			ИмяГруппы,
			ИмяГруппыРодителя,
			ГруппаКоманд.ВидГруппыПодменю,
			ГруппаКоманд.Представление,
			Новый Картинка,
			, ,
			ОтображениеКнопки.Текст
		);
		
		// Производим корректировку имен мест размещения вложенных команд печати
		ПараметрыОтбора = Новый Структура("МестоРазмещения", ГруппаКоманд.Идентификатор);
		Для Каждого КомандаПечати Из КомандыПечати.НайтиСтроки(ПараметрыОтбора) Цикл
			КомандаПечати.МестоРазмещения = ИмяГруппы;
		КонецЦикла;
		
		// Текущая группа обработана, исключим ее из общего списка
		КомандыПечати.Удалить(ГруппаКоманд);
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьГруппыКомандНаФорме()

// Приводит макет печатной формы в соответствие с данными документа
//
// Параметры:
//  Макет -ТабличныйДокумент - макет печатной формы.
//  Объект - ДокументСсылка - документ, для которого производится действие
//  ТабличныеЧасти - Массив из Строка - (необязательное) имена табличных частей документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент - Область шапки таблицы с заполненными параметрами.
//
Функция ПривестиМакетПечатнойФормы(Макет, Объект, ТабличныеЧасти = Неопределено) Экспорт
	// получим нужные области
	ОбластьТовар = Макет.Область("Товар");
	
	// определим, нужны ли скидки
	ЕстьСкидка = Ложь;
	
	Если ТабличныеЧасти = Неопределено Тогда
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить("Товары");
	КонецЕсли;
	
	// проверим нужно ли выводить код в печатных формах
	ПоправкаНаКод = 0;
	ЕстьКод = ПраваИНастройкиПользователя.Значение("ВыводитьКодВПечатныхФормах");
	Если НЕ ЕстьКод И Макет.Области.Найти("Код") <> Неопределено Тогда
		ПоправкаНаКод = 1;
		// удалим область "Код"
		ОбластьКод = Макет.Область("Код | Строка");
		ОбластьШапка  = Макет.Область("Код | ШапкаТаблицы");
		
		Сч = ОбластьКод.Право;
		ШиринаКода = ОбластьКод.ШиринаКолонки;
		ОбластьШапкаЛево = Неопределено;
		ОбластьСтрокаЛево = Неопределено;
		
		ОбластьСтрокаПраво = Макет.Область(ОбластьКод.Верх, Сч, ОбластьКод.Низ, Сч);
		ОбластьШапкаПраво  = Макет.Область(ОбластьШапка.Низ, Сч, ОбластьШапка.Низ, Сч);
		ОбластьСтрокаЛево  = Макет.Область(ОбластьКод.Верх, Сч - 1, ОбластьКод.Низ, Сч - 1);
		ОбластьШапкаЛево   = Макет.Область(ОбластьШапка.Низ, Сч - 1, ОбластьШапка.Низ, Сч - 1);
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаПраво, ОбластьСтрокаЛево);
		ЗаполнитьЗначенияСвойств(ОбластьШапкаПраво, ОбластьШапкаЛево);
		
		Если ОбластьШапкаЛево.Параметр = Неопределено Тогда
			ОбластьШапкаПраво.Текст = ОбластьШапкаЛево.Текст;
		КонецЕсли;
		
		ОбластьСтрокаЛево.Очистить();
		ОбластьШапкаЛево.Очистить();
		
		ОбластьШапкаЛево.ШиринаКолонки  = ШиринаКода;
		ОбластьСтрокаЛево.ШиринаКолонки = ШиринаКода;
		
		Отступ = 2;
		Макет.Область(ОбластьШапка.Низ, ОбластьКод.Право - Отступ, ОбластьШапка.Низ, ОбластьКод.Право).Объединить();
		Макет.Область(ОбластьСтрокаЛево.Низ, ОбластьКод.Право - Отступ, ОбластьСтрокаЛево.Низ, ОбластьКод.Право).Объединить();
		
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ЕстьСкидка = ЕстьРеквизит(Объект, "СуммаСкидки", ТабличнаяЧасть) И (Объект[ТабличнаяЧасть].Итог("СуммаСкидки") <> 0);
		ЕстьСкидка = ЕстьСкидка ИЛИ (ЕстьРеквизит(Объект,"СуммаСкидкиСтроки", ТабличнаяЧасть) И (Объект[ТабличнаяЧасть].Итог("СуммаСкидкиСтроки") <> 0));
		ЕстьСкидка = ЕстьСкидка ИЛИ (ЕстьРеквизит(Объект,"СуммаСкидкиБонусами", ТабличнаяЧасть) И (Объект[ТабличнаяЧасть].Итог("СуммаСкидкиБонусами") <> 0));
		Если ЕстьСкидка Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбластьШапкаТаблицы = Макет.Область("ШапкаТаблицы");
	ОбластьШапкаТаблицы.СоздатьФорматСтрок();
	ОбластьСтрока = Макет.Область("Строка");
	ОбластьСтрока.СоздатьФорматСтрок();
	
	Если НЕ ЕстьСкидка И  Макет.Области.Найти("Скидка") <> Неопределено Тогда
			// удалим область "Скидка"
			ОбластьСкидка = Макет.Область("Скидка | Строка");
			ОбластьШапка  = Макет.Область("Скидка | ШапкаТаблицы");
			ОбластьПодвал = Макет.Область("Скидка | Подвал");
			
			Сч = ОбластьСкидка.Право;
			ШиринаСкидки = ОбластьСкидка.ШиринаКолонки;
			ОбластьШапкаЛево = Неопределено;
			ОбластьСтрокаЛево = Неопределено;
			
			НачалоОтсчета = 4;
			
			Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
				НачалоОтсчета = 3;
			КонецЕсли;
			
			Пока Сч > ОбластьСкидка.Право - (НачалоОтсчета - ПоправкаНаКод) Цикл
				ОбластьСтрокаПраво = Макет.Область(ОбластьСкидка.Верх, Сч, ОбластьСкидка.Низ, Сч);
				ОбластьШапкаПраво  = Макет.Область(ОбластьШапка.Низ, Сч, ОбластьШапка.Низ, Сч);
				ОбластьСтрокаЛево  = Макет.Область(ОбластьСкидка.Верх, Сч - 1, ОбластьСкидка.Низ, Сч - 1);
				ОбластьШапкаЛево   = Макет.Область(ОбластьШапка.Низ, Сч - 1, ОбластьШапка.Низ, Сч - 1);
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаПраво, ОбластьСтрокаЛево);
				ЗаполнитьЗначенияСвойств(ОбластьШапкаПраво, ОбластьШапкаЛево);
				Если ОбластьШапкаЛево.Параметр = Неопределено Тогда
					ОбластьШапкаПраво.Текст = ОбластьШапкаЛево.Текст;
				КонецЕсли;
				ОбластьСтрокаЛево.Очистить();
				ОбластьШапкаЛево.Очистить();
				Сч = Сч - 1;
			КонецЦикла;
			ОбластьШапкаЛево.ШиринаКолонки  = ШиринаСкидки;
			ОбластьСтрокаЛево.ШиринаКолонки = ШиринаСкидки;

			Макет.Область(ОбластьШапка.Низ, ОбластьСкидка.Право - 6, ОбластьШапка.Низ, ОбластьСкидка.Право - (НачалоОтсчета -ПоправкаНаКод)).Объединить();
			Макет.Область(ОбластьСтрокаЛево.Низ, ОбластьСкидка.Право - 6, ОбластьСтрокаЛево.Низ, ОбластьСкидка.Право - (НачалоОтсчета - ПоправкаНаКод)).Объединить();
			
			ОбластьПодвалСкидка = Макет.Область(ОбластьПодвал.Верх, ОбластьСкидка.Право-1, ОбластьПодвал.Верх, ОбластьСкидка.Право);
			ОбластьПодвалСкидка.Объединить();
			ОбластьПодвалСкидка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			ОбластьПодвалСкидка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
			
			// объединим где есть ИтогоПоСтранице
			ОбластьИтогоПоСтранице = Макет.Области.Найти("ИтогоПоСтранице");
			Если ЗначениеЗаполнено(ОбластьИтогоПоСтранице) Тогда
				Область = Макет.Область(ОбластьИтогоПоСтранице.Верх, ОбластьСкидка.Право - 1, ОбластьИтогоПоСтранице.Верх, ОбластьСкидка.Право);
				Область.Объединить();
				Область.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				Область.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
			КонецЕсли;
			
			ОбластьПодвалАкта = Макет.Области.Найти("ПодвалАкта");
			Если ЗначениеЗаполнено(ОбластьПодвалАкта) Тогда
				Область = Макет.Область(ОбластьПодвалАкта.Верх, ОбластьСкидка.Лево - 1, ОбластьПодвалАкта.Верх, ОбластьСкидка.Лево);
				Область.Объединить();
				Область.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
				Область.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
			КонецЕсли;
			
	КонецЕсли;
	
	
	// теперь запишем параметры шапки
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	Если ЕстьКод Тогда
		КолонкаКода = ПолучитьПараметрыРежимаВыводаКодаВДокументах();
		ОбластьМакета.Параметры.ИмяКолонкиКод = СтрЗаменить(КолонкаКода.Синоним, "/", Символы.ПС);
	КонецЕсли;
	
	// заполняем заголовок колонки НДС по типу цен
	Параметры = Новый Структура("НДС");
	Параметры.НДС = "НДС";
	Если ЕстьРеквизит(Объект, "ТипЦен") И Объект.ТипЦен.ЦенаВключаетНДС Тогда	// Если НДС включен
		Организация = Неопределено;
		ПодразделениеКомпании = Неопределено;
		ДатаСреза = Неопределено;
		
		Если ЕстьРеквизит(Объект,"Организация") Тогда
			Организация = Объект.Организация;
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект,"ПодразделениеКомпании") Тогда
			ПодразделениеКомпании = Объект.ПодразделениеКомпании;
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "Дата") Тогда
			ДатаСреза = Объект.Дата;
		КонецЕсли;
		
		Если НЕ ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсвобожденОтНДС Тогда
			Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
		КонецЕсли; 
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(Параметры);
	
	Возврат ОбластьМакета;
КонецФункции

// Функция возвращает объект метаданных по текущему значению права "Режим вывода кода в документах".
//
// Возвращаемое значение:
//  ОбъектМетаданных - объект метаданных по текущему значению права "Режим вывода кода в документах".
//
Функция ПолучитьПараметрыРежимаВыводаКодаВДокументах() Экспорт
	
	РежимыВыводаКодаВДокументах = ПолучитьФункциональнуюОпцию("ИспользоватьАртикулПечатныеФормы");
	Если НЕ ЗначениеЗаполнено(РежимыВыводаКодаВДокументах) Тогда
		РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.Артикул;
	КонецЕсли;
	
	Индекс = Перечисления.РежимыВыводаКодаВДокументах.Индекс(РежимыВыводаКодаВДокументах);
	МД = Метаданные.Перечисления.РежимыВыводаКодаВДокументах;
	
	Возврат МД.ЗначенияПеречисления[Индекс];
	
КонецФункции

// Процедура возвращает значение колонки код из номенклатуры
//
// Параметры:
//  Номенклатура - Справочник "Номенклатура". Номенклатура для получения значений.
//
// Возвращаемое значение:
//  Строка - Значение колонки код.
//
Функция ПолучитьЗначениеКолонкиКода(Номенклатура) Экспорт
	// получим значение права
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат "";
	КонецЕсли;
	
	// +Альфа
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("VIN",Номенклатура.метаданные()) Тогда
		Возврат Номенклатура.VIN;	
	КонецЕсли;
	// -Альфа
	
	РежимВыводаКода = ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
	НоменклатураСокрКод = СокрЛП(Номенклатура["Код"]);
	
	Если Номенклатура.Метаданные().Реквизиты.Найти("Производитель") = Неопределено Тогда
		Производитель = "";
	Иначе
		Производитель = Символы.ПС + Номенклатура["Производитель"];
	КонецЕсли;
		
	// +Альфа
	Если РежимВыводаКода = "АртикулКодПроизводитель" Тогда
		КодНоменклатуры = НоменклатураСокрКод + Символы.ПС + Номенклатура["Артикул"] + Производитель;
		Возврат КодНоменклатуры;
	ИначеЕсли 	РежимВыводаКода = "КодИПроизводитель" Тогда
		КодНоменклатуры = НоменклатураСокрКод + Производитель;
		Возврат КодНоменклатуры;
	ИначеЕсли 	РежимВыводаКода = "АртикулИПроизводитель" Тогда
		КодНоменклатуры = Номенклатура["Артикул"] + Производитель;
		Возврат КодНоменклатуры;
	КонецЕсли;
	// -Альфа	
	
	Если РежимВыводаКода = "КодИАртикул" Тогда
		КодНоменклатуры = НоменклатураСокрКод + Символы.ПС + Номенклатура["Артикул"];
	Иначе
		КодНоменклатуры = Номенклатура[РежимВыводаКода];
	КонецЕсли;
	
	Возврат КодНоменклатуры;
КонецФункции

// Процедура формирования наименования документа по ссылке
//
// Параметры:
//	Документ - Ссылка на документ для которого готовится представление
//	АльтернативноеНазвание - название документа которое будет использовано вместо синонима
//								при формировании представления.
//
// Возвращаемое значение:
//  Строка - Представление документа.
//
Функция ПолучитьПредставлениеДокумента(Документ, АльтернативноеНазвание="") Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ПустаяСтрока(АльтернативноеНазвание) Тогда
		ПредставлениеДокумента = АльтернативноеНазвание;
		
	ИначеЕсли ЕстьРеквизит(Документ, "ХозОперация") Тогда
		
		ПредставлениеДокумента = Строка(Документ.ХозОперация);
				
	Иначе
		ПредставлениеДокумента = УправлениеДиалогомСервер.ПредставлениеОбъект(Документ);
	КонецЕсли;
		
	Возврат СокрЛП(ПредставлениеДокумента) + " № " + ПолучитьНомерДляПечати(Документ) + " от " + Формат(Документ.Дата,"ДФ = dd.MM.yyyy");
	УстановитьПривилегированныйРежим(Ложь);	
КонецФункции

// Функция формирования номера для печати(убраны лидирующие нули).
//
// Параметры:
//	Документ - ДокументСсылка, Структура - Контейнер из которого можно получить номер;
//	СокращенныйНомер - признак сокращенного номера.
//
// Возвращаемое значение:
//  Строка - Номер для печати.
//
Функция ПолучитьНомерДляПечати(Документ, Знач СокращенныйНомер=Неопределено) Экспорт
	
	Если СокращенныйНомер = Неопределено Тогда
		
		СокращенныйНомер = НЕ Константы.ПолныйНомерДокументаВПечатныхФормах.Получить();
		
	КонецЕсли;
	
	НомерДокумента = Документ.Номер;
		
	Если СокращенныйНомер Тогда
		
		НомерДокумента = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(НомерДокумента, Истина, Истина);
		
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		НомерДокумента = ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(НомерДокумента, Документ);
		
	КонецЕсли;	
	
	Возврат НомерДокумента;
	
КонецФункции // ПолучитьНомерДляПечати()

// Формирует необязательные параметры вызова функции ПолучитьПредставлениеСправочника()
//
// Возвращаемое значение:
//  Структура - необязательные параметры вызова.
//   * ДляПечати					- Булево	- Истина
//   * РасчетныйСчетДокумента		- СправочникСсылка.БанковскиеСчета	- Расчетный счет, который надо подставить
//																			в представление,
//   * НаДату						- Дата								- Дата, на которую получается представление,
//   * ИспользоватьКИПодразделения	- Булево							- Истина - использовать КИ подразделения,
//   * ИспользоватьКПППодразделения	- Булево							- Истина, если подставляем КПП подразделения.
Функция ПолучитьПараметрыВызоваПредставленияСправочника() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДляПечати",                    Ложь);
	Параметры.Вставить("РасчетныйСчетДокумента",       Неопределено);
	Параметры.Вставить("НаДату",                       Неопределено);
	Параметры.Вставить("ИспользоватьКИПодразделения",  Ложь);
	Параметры.Вставить("ИспользоватьКПППодразделения", Ложь);
	
	Возврат Параметры;
	
КонецФункции // ПолучитьПараметрыВызоваПредставленияСправочника()

// Формирует структуру представления, общую для некоторых печатных форм
// 
// Возвращаемое значение:
//  Структура - с полями:
//	* Наименование     - Строка - Наименование
//	* ИНН              - Строка - ИНН
//	* АдресЮридический - Строка - Адрес юридический
//	* ТелефонРабочий   - Строка - Телефон рабочий
//	* БанковскийСчет   - Строка - Банковский счет
//	* Банк             - Строка - Банк
//	* БИК              - Строка - БИК
//	* КоррСчет         - Строка - Корр. счет
//
Функция СформироватьСтруктуруПредставления() Экспорт
	
	СтруктураПредставления=Новый Структура;
	СтруктураПредставления.Вставить("Наименование",     "");
	СтруктураПредставления.Вставить("ИНН",              "ИНН ");
	СтруктураПредставления.Вставить("АдресЮридический", "");
	СтруктураПредставления.Вставить("ТелефонРабочий",   "тел.: ");
	СтруктураПредставления.Вставить("БанковскийСчет",   "р/с ");
	СтруктураПредставления.Вставить("Банк",             НСтр("ru = 'в банке'") + " ");
	СтруктураПредставления.Вставить("БИК",              "БИК ");
	СтруктураПредставления.Вставить("КоррСчет",         "к/с ");
	
	Возврат СтруктураПредставления;
	
КонецФункции

// Формирует коллекцию с даннми объекта
//
// Параметры:
//  Объект - ДокументОбъект, ДокументСсылка - объект для упаковки
// 
// Возвращаемое значение:
//  Структура - содержит значения реквизитов, общих реквизитов и табличных частей
//
Функция ПолучитьДанныеДокументаДляПечати(Объект) Экспорт
	
	ДанныеОбъекта     = Новый Структура();
	МетаданныеОбъекта = Объект.Метаданные();
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		ДанныеОбъекта.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
		
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		ДанныеОбъекта.Вставить("ТабличнаяЧасть"+ТабличнаяЧасть.Имя, Объект[ТабличнаяЧасть.Имя].Выгрузить());
		
	КонецЦикла;
	
	Для Каждого РеквизитОбщий Из Метаданные.ОбщиеРеквизиты Цикл
		
		Если ЕстьРеквизит(Объект, РеквизитОбщий.Имя) Тогда
			
			ДанныеОбъекта.Вставить(РеквизитОбщий.Имя, Объект[РеквизитОбщий.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Возвращает правильное склонение слова "день" по количеству дней.
//
// Параметры:
//  КолДней   - Число  - количество дней.
//
// Возвращаемое значение:
//  Строка - Слово в нужном склонении.
//
Функция ПолучитьПредставлениеДня(Знач КолДней) Экспорт
	КолДней = Макс(КолДней, -КолДней); 
	ОстатокОтДеления = КолДней % 10; 
	Если ОстатокОтДеления = 0 ИЛИ ОстатокОтДеления >= 5 И ОстатокОтДеления <= 9 
		ИЛИ КолДней % 100 >= 10 И КолДней % 100 <= 19 Тогда
		Возврат "дней";	
	ИначеЕсли ОстатокОтДеления = 1 Тогда
		Возврат "день";
	ИначеЕсли ОстатокОтДеления >= 2 И ОстатокОтДеления <= 4 Тогда
		Возврат "дня";
	Иначе
		Возврат "день";	
	КонецЕсли;		
КонецФункции //ПолучитьПредставлениеДня()
 
// Добавить в командную панель формы команду вызова формы параметров печати комплекта 
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма в которую добавляется команда
//  МестоРазмещенияКоманд - ЭлементФормы               - группа кнопок в которую добавляем комманду
//
Процедура ДобавитьКомандуНастройкиПечатиКомплекта(Форма, МестоРазмещенияКоманд) Экспорт
	
	// Если печатных форм нет, то настройки параметров печати не нужны
	Если МестоРазмещенияКоманд.ПодчиненныеЭлементы.Количество() = 0  Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(
		Форма,
		"ПодменюПараметрыПечати",
		МестоРазмещенияКоманд.Имя,
		Ложь,
		"Настройки",
		Новый Картинка
	);
	ОписаниеКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
	ОписаниеКоманды.ИмяКоманды = "НастройкаКомплекта";
	ОписаниеКоманды.ИмяГруппы = "ПодменюПараметрыПечати";
	ОписаниеКоманды.Заголовок = НСтр("ru='Настройка комплекта печати'");
	ОписаниеКоманды.Подсказка = НСтр("ru='Настройка комплекта печати'");
	ОписаниеКоманды.ТолькоВоВсехДействиях = Ложь;
	ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКоманды);
	
КонецПроцедуры

// Добавить в командную панель формы команды печати комплекта
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма в которую добавляется команда
//  МестоРазмещенияКоманд - ЭлементФормы               - группа кнопок в которую добавляем комманду
//
Процедура ДобавитьКомандыПечатиКомплекта(Форма, МестоРазмещенияКоманд) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	// Получим адрес хранения описания команд печати
	АдресКомандПечати = Форма.Команды.Найти("АдресКомандПечатиВоВременномХранилище");
	
	// Проверим использование печатных форм для данной формы
	Если АдресКомандПечати=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипыОбъектовКомплекта = Новый Массив;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	КонецЕсли;
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат;
	Иначе
		Если ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных) Тогда
			Для каждого Документ Из ОбъектМетаданных.РегистрируемыеДокументы Цикл
				ТипыОбъектовКомплекта.Добавить("Документ." + Документ.Имя);
			КонецЦикла;
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			ТипыОбъектовКомплекта.Добавить(Форма.ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбъектовКомплекта.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкаПечатиКомплекта.Ссылка КАК Ссылка,
		|	НастройкаПечатиКомплекта.Код КАК Код,
		|	НастройкаПечатиКомплекта.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВозможныеКомплекты
		|ИЗ
		|	Справочник.НастройкаПечатиКомплекта КАК НастройкаПечатиКомплекта
		|ГДЕ
		|	НастройкаПечатиКомплекта.СписокПечатныхФорм.ТипДокумента В(&ТипДокумента)
		|	И НастройкаПечатиКомплекта.ПометкаУдаления = ЛОЖЬ
		|	И (НастройкаПечатиКомплекта.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступаКВариантуОтчета.БезОграничения)
		|			ИЛИ НастройкаПечатиКомплекта.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступаКВариантуОтчета.ПоПользователю)
		|				И НастройкаПечатиКомплекта.ОбъектДоступа = &Администратор
		|			ИЛИ НастройкаПечатиКомплекта.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступаКВариантуОтчета.ПоПодразделениюКомпании)
		|				И НастройкаПечатиКомплекта.ОбъектДоступа = &ПодразделениеКомпании
		|			ИЛИ НастройкаПечатиКомплекта.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступаКВариантуОтчета.ПоГруппеПользователей)
		|				И НастройкаПечатиКомплекта.ОбъектДоступа В
		|					(ВЫБРАТЬ
		|						ГруппыПользователейСостав.Ссылка
		|					ИЗ
		|						Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|					ГДЕ
		|						ГруппыПользователейСостав.Пользователь = &Администратор))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкаПечатиКомплектаСписокПечатныхФорм.ТипДокумента КАК ТипДокумента,
		|	ВозможныеКомплекты.Код КАК Код,
		|	ВозможныеКомплекты.Наименование КАК Наименование
		|ИЗ
		|	ВозможныеКомплекты КАК ВозможныеКомплекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкаПечатиКомплекта.СписокПечатныхФорм КАК НастройкаПечатиКомплектаСписокПечатныхФорм
		|		ПО ВозможныеКомплекты.Ссылка = НастройкаПечатиКомплектаСписокПечатныхФорм.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НастройкаПечатиКомплектаСписокПечатныхФорм.ТипДокумента,
		|	ВозможныеКомплекты.Код,
		|	ВозможныеКомплекты.Наименование
		|ИТОГИ ПО
		|	Код";
		
		Запрос.УстановитьПараметр("ТипДокумента",ТипыОбъектовКомплекта);
		Запрос.УстановитьПараметр("ПодразделениеКомпании",ПараметрыСеанса.ПодразделениеКомпании);
		Запрос.УстановитьПараметр("Администратор",Пользователи.ТекущийПользователь());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		КомандыПечати = ПолучитьИзВременногоХранилища(АдресКомандПечати.Действие);
		ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(
			Форма,
			"ПодменюКомплектыПечати",
			МестоРазмещенияКоманд.Имя,
			Ложь,
			НСтр("ru = 'Настройки'"),
			Новый Картинка,
			НСтр("ru = 'Настройки комплекта'"),
			"ПодменюПечатьГруппаПодменюПараметрыПечати"
		);
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			ИмяКоманды = "ПечатьКомплекта" + Выборка.Код;
			НоваяКоманда = КомандыПечати.Добавить();
			ВыборкаТипов = Выборка.Выбрать();
			ПредставлениеКоманды = ИмяКоманды;
			
			Пока ВыборкаТипов.Следующий() Цикл
				
				НоваяКоманда.ТипыОбъектовПечати.Добавить(Тип(СтрЗаменить(ВыборкаТипов.ТипДокумента,"Документ", "ДокументСсылка")));
				ПредставлениеКоманды = ВыборкаТипов.Наименование;
				
			КонецЦикла;
			
			НоваяКоманда.Идентификатор                  = ИмяКоманды;
			НоваяКоманда.ПроверкаПроведенияПередПечатью = Истина;
			НоваяКоманда.Представление                  = ПредставлениеКоманды;
			НоваяКоманда.ЭлементФормы                   = ИмяКоманды;
			НоваяКоманда.ПроверкаПроведенияПередПечатью = Не ПраваИНастройкиПользователя.Значение(
				"ПечатьНепроведенных",
				ОбъектМетаданных.Имя
			);
			
			ОписаниеКоманды = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКоманды.ИмяКоманды = ИмяКоманды;
			ОписаниеКоманды.ИмяГруппы = "ПодменюКомплектыПечати";
			ОписаниеКоманды.Заголовок = ПредставлениеКоманды;
			ОписаниеКоманды.Подсказка = НСтр("ru='Печать комплекта'");
			ОписаниеКоманды.ТолькоВоВсехДействиях = Ложь;
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКоманды);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Сохраняет параметры печати в хранилище
//
// Параметры:
//  ИмяПараметровПечати				 - Строка            - Имя параметров печати для сохранения
//  НастраиваемыйТабличныйДокумент	 - ТабличныйДокумент - табличный документ с параметрами
//
Процедура СохранитьТекущиеПараметрыКакСтандартные(ИмяПараметровПечати, НастраиваемыйТабличныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПечати = Новый Структура();
	ПараметрыПечати.Вставить("АвтоМасштаб");
	ПараметрыПечати.Вставить("РазмерСтраницы");
	ПараметрыПечати.Вставить("ОриентацияСтраницы");
	ПараметрыПечати.Вставить("МасштабПечати");
	ПараметрыПечати.Вставить("ПолеСверху");
	ПараметрыПечати.Вставить("ПолеСлева");
	ПараметрыПечати.Вставить("ПолеСнизу");
	ПараметрыПечати.Вставить("ПолеСправа");
	ПараметрыПечати.Вставить("РазмерКолонтитулаСверху");
	ПараметрыПечати.Вставить("РазмерКолонтитулаСнизу");
	ПараметрыПечати.Вставить("ЭкземпляровНаСтранице");
	ПараметрыПечати.Вставить("ЧередованиеРасположенияСтраниц");
	ПараметрыПечати.Вставить("ДвусторонняяПечать");
	ПараметрыПечати.Вставить("ЧерноБелаяПечать");	
	
	ЗаполнитьЗначенияСвойств(ПараметрыПечати,НастраиваемыйТабличныйДокумент);
	ХранилищеСистемныхНастроек.Сохранить(
		НастраиваемыйТабличныйДокумент.ИмяПараметровПечати + "_Стандартный",
		,
		ПараметрыПечати,
		,
		"Стандартный"
	);
	
КонецПроцедуры

// Формирование строкового представления справочника
//
// Параметры:
//  Объект						- СправочникСсылка.Организации,
//								  СправочникСсылка.ПодразделенияКомпании,
//								  СправочникСсылка.СкладыКомпании,
//								  СправочникСсылка.Контрагенты				- Объект, для которого получается представление,
//  СтруктураПараметров			- Структура									- Состав представления справочника,
//  ДополнительныеПараметры		- Структура									- Необязательные параметры, которые возвращает 
//																				ПолучитьПараметрыВызоваПредставленияСправочника().
//
// Возвращаемое значение:
//  Строка - строковое представление справочника.
//
Функция ПолучитьПредставлениеСправочника(Объект, Знач СтруктураПараметров = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	// Проверим подходит ли объект под тип.
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта <> Тип("СправочникСсылка.Организации")
		И ТипОбъекта <> Тип("СправочникСсылка.ПодразделенияКомпании")
		И ТипОбъекта <> Тип("СправочникСсылка.СкладыКомпании")
		И ТипОбъекта <> Тип("СправочникСсылка.Контрагенты") Тогда
			Возврат НСтр("ru = 'Неправильный тип объекта.'");
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры = ПолучитьПараметрыВызоваПредставленияСправочника();
	КонецЕсли;
	
	ДляПечати = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ДляПечати", Ложь);
	
	РасчетныйСчетДокумента = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "РасчетныйСчетДокумента",
		Неопределено);
	
	НаДату = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НаДату", Неопределено);
	
	ПодразделениеКомпании = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ПодразделениеКомпании",
		Справочники.ПодразделенияКомпании.ПустаяСсылка());
	
	ИспользоватьКИПодразделения = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры,
		"ИспользоватьКИПодразделения", Ложь);
	
	ИспользоватьКПППодразделения = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры,
		"ИспользоватьКПППодразделения", Ложь);
	
	Представление = "";
	// Если не указана структура параметров, работаем по умолчанию.
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("Наименование",     "");
		СтруктураПараметров.Вставить("ИНН",              "ИНН ");
		СтруктураПараметров.Вставить("КПП",              "КПП ");
		СтруктураПараметров.Вставить("АдресЮридический", "");
		СтруктураПараметров.Вставить("ТелефонРабочий",   "тел.: ");
		СтруктураПараметров.Вставить("ОКПО",             "Код по ОКПО ");
	КонецЕсли;
	
	// объявим часто используемые переменные
	ТипСклад = Тип("СправочникСсылка.СкладыКомпании");
	ТипПодразделение = Тип("СправочникСсылка.ПодразделенияКомпании");
	
	// Если у подразделения документа стоит флаг "ИспользоватьКИПодразделенияПриПечати", то КИ выводим для подразделения.
	ИспользоватьКИПодразделенияПриПечати = ИспользоватьКИПодразделения
		И ПодразделениеКомпании.ИспользоватьКИПодразделенияПриПечати;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		
		ЗначениеПараметра = Неопределено;
		
		Если ВРЕГ(Параметр.Ключ) = "НАИМЕНОВАНИЕ" Тогда
			
			ЗначениеПараметра = СформироватьНаименование(Объект, ДляПечати, ТипОбъекта, ТипПодразделение, ТипСклад, НаДату);
			
		ИначеЕсли ВРег(Параметр.Ключ) = "ИНН" Тогда
			
			ЗначениеПараметра = СформироватьИНН(Объект, ТипОбъекта, ТипСклад, ТипПодразделение);
			
		ИначеЕсли ВРег(Параметр.Ключ)="КПП" Тогда
			
			ЗначениеПараметра = СформироватьКПП(Объект, ТипОбъекта, ТипСклад, ТипПодразделение, НаДату,
				ИспользоватьКПППодразделения, ПодразделениеКомпании);
			
		ИначеЕсли ВРег(Параметр.Ключ) = "ОКПО" Тогда
			
			ЗначениеПараметра = СформироватьОКПО(Объект, ТипОбъекта, ТипСклад, ТипПодразделение);
			
		ИначеЕсли ВРег(Параметр.Ключ) = "АДРЕСЮРИДИЧЕСКИЙ" ИЛИ ВРег(Параметр.Ключ) = "АДРЕСФАКТИЧЕСКИЙ" Тогда
			
			ВидКИ = ?(ВРег(Параметр.Ключ)="АДРЕСЮРИДИЧЕСКИЙ", "ЮрАдрес", "ФактАдрес");
			ЗначениеПараметра = СформироватьАдрес(Объект, ТипОбъекта, ТипСклад, ТипПодразделение, ВидКИ,
				ИспользоватьКИПодразделенияПриПечати, ПодразделениеКомпании, НаДату);
			
		ИначеЕсли ВРег(Параметр.Ключ)="ТЕЛЕФОНРАБОЧИЙ" Тогда
			
			ЗначениеПараметра = СформироватьТелефон(Объект, ТипОбъекта, ТипСклад, ТипПодразделение,
				ИспользоватьКИПодразделенияПриПечати, ПодразделениеКомпании, НаДату);
			
		ИначеЕсли ВРег(Параметр.Ключ)="ФАКС" Тогда
			
			ЗначениеПараметра = СФормироватьФакс(Объект, ТипОбъекта, ТипСклад, ТипПодразделение,
				ИспользоватьКИПодразделенияПриПечати, ПодразделениеКомпании);
			
		ИначеЕсли ВРег(Параметр.Ключ)="БАНКОВСКИЙСЧЕТ" Тогда
			
			ЗначениеПараметра = СформироватьБанковскийСчет(Объект, ТипОбъекта, ТипПодразделение, РасчетныйСчетДокумента);
			
		ИначеЕсли ВРег(Параметр.Ключ)="БАНК" Тогда
			
			ЗначениеПараметра = СформироватьБанк(Объект, ТипОбъекта, ТипПодразделение, РасчетныйСчетДокумента);
			
		ИначеЕсли ВРег(Параметр.Ключ)="БИК" Тогда
			
			ЗначениеПараметра = СформироватьБИК(Объект, ТипОбъекта, ТипПодразделение, РасчетныйСчетДокумента);
			
		ИначеЕсли ВРег(Параметр.Ключ)="КОРРСЧЕТ" Тогда
			
			ЗначениеПараметра = СформироватьКоррСчет(Объект, ТипОбъекта, ТипПодразделение, РасчетныйСчетДокумента);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Представление) Тогда
			Представление = Представление + ", ";
		КонецЕсли;
		
		Если Параметр.Значение <> Неопределено Тогда
			Представление = Представление + Параметр.Значение;
		КонецЕсли;
		
		Представление = Представление + ЗначениеПараметра;
		
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

// Строковое представление ставки НДС
//
// Параметры:
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - Ставка, для которой получаем строковое представление.
//  Процент - Строка - (необязательный). Символ "%".
//
// Возвращаемое значение:
//  Строка - строковое представление ставки НДС.
//
Функция ПолучитьПредставлениеСтавкиНДС(СтавкаНДС, Процент = "") Экспорт
	
	Если СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС") Тогда
		
		Возврат НСтр("ru = 'Без НДС'");
		
	ИначеЕсли СтавкаНДС.РасчетнаяСтавка Тогда
	 
		Возврат  СокрЛП(СтавкаНДС.Ставка) + "/" + Строка(СтавкаНДС.Ставка +100);
		
	КонецЕсли;
	
	Возврат СокрЛП(СтавкаНДС.Ставка) + Процент;
	
КонецФункции

// Функция заполнения структуры печатной строки по строке табличной части
//
// Параметры:
//  СтрокаТЧ - СтрокаТабличнойЧасти - строка табличной части, для которой получаем представление.
//  Документ - ДокументСсылка - документ, в котором произошло событие.
//  ИмяТабличнойЧасти - Строка - (необязательный). Имя табличной части документа, для которой производится заполнение.
//
// Возвращаемое значение:
//  Структура - представление данных товарной строки
//
Функция ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ, ИмяТабличнойЧасти = "Товары") Экспорт
	СтруктураСтроки = Новый Структура;
	
	// заполнение номенклатуры и характеристики
	ТоварНаименование = ПолучитьНаименованиеСправочника(СтрокаТЧ.Номенклатура);
	
	Если ЕстьРеквизит(Документ, "Содержание", ИмяТабличнойЧасти) И ЗначениеЗаполнено(СтрокаТЧ.Содержание) Тогда
		ТоварНаименование = СтрокаТЧ.Содержание;
	ИначеЕсли ЕстьРеквизит(Документ,"ХарактеристикаНоменклатуры",ИмяТабличнойЧасти) Тогда
		Если ЗначениеЗаполнено(СтрокаТЧ.ХарактеристикаНоменклатуры) Тогда
			ТоварНаименование = ТоварНаименование + "," + ПолучитьНаименованиеСправочника(СтрокаТЧ.ХарактеристикаНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураСтроки.Вставить("НомерСтроки",СтрокаТЧ.НомерСтроки);
	СтруктураСтроки.Вставить("ТоварНаименование",ТоварНаименование);
	СтруктураСтроки.Вставить("Номенклатура",СтрокаТЧ.Номенклатура);
	
	// получение кода
	СтруктураСтроки.Вставить("Код", ПолучитьЗначениеКолонкиКода(СтрокаТЧ.Номенклатура));
	
	ФорматВыводаКоличества = ПолучитьФорматВыводаКоличества(Документ);
	ФорматВыводаСуммы      = ПолучитьФорматВыводаСуммы(Документ);
	
	// если количество не равно базовому, корректируем вывод
	Если ЕстьРеквизит(Документ, "КоличествоБазовое", ИмяТабличнойЧасти) Тогда
		
		Если Окр(СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент,3) <> СтрокаТЧ.КоличествоБазовое Тогда
			Количество        = СтрокаТЧ.КоличествоБазовое;
			Если ЕстьРеквизит(СтрокаТЧ.Номенклатура,"БазоваяЕдиницаИзмерения") Тогда
				ЕдиницаИзмерения  = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;
				Коэффициент       = 1;
			Иначе
				ЕдиницаИзмерения  = СтрокаТЧ.ЕдиницаИзмерения;
				Коэффициент       = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;
		Иначе
			Количество        = СтрокаТЧ.Количество;
			ЕдиницаИзмерения  = СтрокаТЧ.ЕдиницаИзмерения;
			Коэффициент       = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
		СтруктураСтроки.Вставить("Количество"      , Формат(Количество, ФорматВыводаКоличества));
		СтруктураСтроки.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		
	Иначе
		
		Если ЕстьРеквизит(Документ, "Количество", ИмяТабличнойЧасти) Тогда
			Количество = СтрокаТЧ.Количество;
		Иначе
			Количество = 0;
		КонецЕсли;
		
		Если ЕстьРеквизит(Документ, "ЕдиницаИзмерения" , ИмяТабличнойЧасти) Тогда
			ЕдиницаИзмерения  = СтрокаТЧ.ЕдиницаИзмерения;
			Коэффициент       = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
		Иначе
			ЕдиницаИзмерения = "-";
			Если ЕстьРеквизит(Документ, "Коэффициент", ИмяТабличнойЧасти) Тогда
				Коэффициент = СтрокаТЧ.Коэффициент;
			Иначе
				Коэффициент = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураСтроки.Вставить("Количество"      , Формат(Количество, ФорматВыводаКоличества));
		СтруктураСтроки.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	// Масса брутто
	МассаБрутто = 0;
	Если ЕстьРеквизит(Документ, "Количество" , ИмяТабличнойЧасти) Тогда
		Если ЕстьРеквизит(Документ, "ЕдиницаИзмерения" , ИмяТабличнойЧасти) Тогда
			МассаБрутто = Справочники.Номенклатура.ПолучитьВесНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.ЕдиницаИзмерения) 
							* СтрокаТЧ.Количество;
		Иначе	
			МассаБрутто = Справочники.Номенклатура.ПолучитьВесНоменклатуры(СтрокаТЧ.Номенклатура) 
							* СтрокаТЧ.Количество;				
		КонецЕсли;	
	КонецЕсли;
	СтруктураСтроки.Вставить("МассаБрутто", МассаБрутто);
		
	// цена
	Если ЕстьРеквизит(Документ, "Цена", ИмяТабличнойЧасти) Тогда
		Цена = ?(Коэффициент = 0, СтрокаТЧ.Цена, СтрокаТЧ.Цена * Коэффициент);
		СтруктураСтроки.Вставить("Цена", Формат(Цена,ФорматВыводаСуммы));
	КонецЕсли;
	
	// ставка НДС
	Если ЕстьРеквизит(Документ,"СтавкаНДС", ИмяТабличнойЧасти) Тогда
		СтруктураСтроки.Вставить("СтавкаНДС", ПолучитьПредставлениеСтавкиНДС(СтрокаТЧ.СтавкаНДС));
	КонецЕсли;
	
	// сумма НДС
	ЕстьСуммаНДС = ЕстьРеквизит(Документ, "СуммаНДС", ИмяТабличнойЧасти);
	Если ЕстьСуммаНДС Тогда
		СтруктураСтроки.Вставить("СуммаНДС",Формат(СтрокаТЧ.СуммаНДС, ФорматВыводаСуммы));
		Если СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда // вместо пустой суммы выведем прочерк
			СтруктураСтроки.СуммаНДС = "-";
		КонецЕсли;
	КонецЕсли;
	
	// сумма всего
	ЕстьСуммаВсего = ЕстьРеквизит(Документ, "СуммаВсего", ИмяТабличнойЧасти);
	Если ЕстьСуммаВсего Тогда
		СтруктураСтроки.Вставить("СуммаВсего", Формат(СтрокаТЧ.СуммаВсего, ФорматВыводаСуммы));
	КонецЕсли;
	
	// сумма без НДС
	Если ЕстьСуммаНДС И ЕстьСуммаВсего Тогда
		СуммаБезНДС = СтрокаТЧ.СуммаВсего - СтрокаТЧ.СуммаНДС;
	ИначеЕсли ЕстьСуммаВсего Тогда
		СуммаБезНДС = СтрокаТЧ.СуммаВсего;
	ИначеЕсли ЕстьРеквизит(Документ, "Сумма", ИмяТабличнойЧасти) Тогда
		СуммаБезНДС = СтрокаТЧ.Сумма;
	Иначе
		СуммаБезНДС = 0;
	КонецЕсли;
	СтруктураСтроки.Вставить("СуммаБезНДС", Формат(СуммаБезНДС, ФорматВыводаСуммы));
	
	// цена без НДС
	Количество = Количество * Коэффициент;
	ЦенаБезНДС = ?(Количество = 0, 0, СуммаБезНДС / Количество);
	СтруктураСтроки.Вставить("ЦенаБезНДС", Формат(ЦенаБезНДС, ФорматВыводаСуммы));
	
	// розница
	Если ЕстьРеквизит(Документ, "ЦенаРозничная", ИмяТабличнойЧасти) Тогда
		СтруктураСтроки.Вставить("ЦенаРозничная", Формат(СтрокаТЧ.ЦенаРозничная,ФорматВыводаСуммы));
	КонецЕсли;
	
	Если ЕстьРеквизит(Документ, "СуммаРозничная", ИмяТабличнойЧасти) Тогда
		СтруктураСтроки.Вставить("СуммаРозничная", Формат(СтрокаТЧ.СуммаРозничная,ФорматВыводаСуммы));
	КонецЕсли;
	
	// скидки
	ПредставлениеСкидки = 0;
	Если ЕстьРеквизит(Документ, "СуммаСкидки", ИмяТабличнойЧасти) Тогда
		ПредставлениеСкидки = ПредставлениеСкидки + СтрокаТЧ.СуммаСкидки;
	КонецЕсли;
	
	Если ЕстьРеквизит(Документ, "СуммаСкидкиСтроки", ИмяТабличнойЧасти) Тогда
		ПредставлениеСкидки = ПредставлениеСкидки + СтрокаТЧ.СуммаСкидкиСтроки;
	КонецЕсли;
	
	Если ЕстьРеквизит(Документ, "СуммаСкидкиБонусами", ИмяТабличнойЧасти) Тогда
		ПредставлениеСкидки = ПредставлениеСкидки + СтрокаТЧ.СуммаСкидкиБонусами;
	КонецЕсли;
	
	СтруктураСтроки.Вставить("ПредставлениеСкидки", Формат(ПредставлениеСкидки, ФорматВыводаСуммы));
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Проверка на возможность вывода области, если не удалось - выводится горизонтальный разделитель.  
//
// Параметры: 
//  ТабличныйДокумент   - ТабличныйДокумент - документ, для которого проводится проверка
//  Область 		    - ТабличныйДокумент - область документа, для которой проверяем пападание на страницу
//  ОбластьШапкаТаблицы - ТабличныйДокумент - неопределено, в случае если при переносе не нужно добавлять шапку
//  ОбластьПодвал       - ТабличныйДокумент - неопределено, в случае если при переносе не нужно добавлять подвал
//  НомерСтраницы		-  Число - номер текущей страницы
//  СтруктураИтоговПоСтранице - Структура - итоги страницы 
//  Документ			- Ссылка - 
//  мсвДопОбластиПодвала - Массив - массив дополнительных областей для проверки 
//	СтруктураИтоговПоСтраницеДополнительно - Структура - итоги страницы дополнительные
//
// Возвращаемое значение:
//  Число - номер текущей страницы
//
Функция ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, Область, ОбластьШапкаТаблицы=Неопределено, ОбластьПодвал=Неопределено, НомерСтраницы=1, СтруктураИтоговПоСтранице=Неопределено, Документ, мсвДопОбластиПодвала=Неопределено, СтруктураИтоговПоСтраницеДополнительно=Неопределено) Экспорт
	
	// запишем их в один массив
	МассивОбластейДляПроверки = Новый Массив;
	МассивОбластейДляПроверки.Добавить(Область);
	Если ОбластьПодвал <> Неопределено Тогда
		МассивОбластейДляПроверки.Добавить(ОбластьПодвал);
	КонецЕсли;
	Если мсвДопОбластиПодвала <> Неопределено Тогда
		Для Каждого ТекОбласть Из мсвДопОбластиПодвала Цикл
			МассивОбластейДляПроверки.Добавить(ТекОбласть);
		КонецЦикла;
	КонецЕсли;
	
	
	// проверим, помещаются ли на странице
	РезультатПроверки = ТабличныйДокумент.ПроверитьВывод(МассивОбластейДляПроверки);
	
	// если не помещаются, то ...
	Если НЕ РезультатПроверки Тогда
		ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьПодвал,СтруктураИтоговПоСтранице,Документ,СтруктураИтоговПоСтраницеДополнительно); //выводим итог по странице
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //переходим на следующую страницу
		НомерСтраницы = НомерСтраницы + 1;
		Если ОбластьШапкаТаблицы <> Неопределено Тогда
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы); //выводим шапку таблицы
		КонецЕсли;
	КонецЕсли;
	
	// выводим текущую область
	ТабличныйДокумент.Вывести(Область);
	
	Возврат НомерСтраницы;
	
КонецФункции

// Инкремент структуры итогов
//
// Параметры:
//  СтрокаТЧ - СтрокаТабличнойЧасти - строка табличной части, которую добавляем в итоги.
//  СтруктураИтоговПоСтранице - Структура - структура итогов.
//
Процедура ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице) Экспорт
	
	Для Каждого ЭлементСтруктуры Из СтруктураИтоговПоСтранице Цикл
		Если ЭлементСтруктуры.Ключ = "ВалютаДокумента" Тогда
			Продолжить;
		КонецЕсли;
		НовоеЗначение = ЭлементСтруктуры.Значение + СтрокаТЧ[ЭлементСтруктуры.Ключ];
		Если ЭлементСтруктуры.Ключ = "СуммаСкидки" Тогда
			Если ТипЗнч(СтрокаТЧ) = Тип("СтрокаТаблицыЗначений") Тогда
				Владелец = СтрокаТЧ.Владелец();
				Если Владелец.Колонки.Найти("СуммаСкидкиСтроки") <> Неопределено Тогда
					НовоеЗначение = НовоеЗначение + СтрокаТЧ.СуммаСкидкиСтроки;
				КонецЕсли; 
				Если Владелец.Колонки.Найти("СуммаСкидкиБонусами") <> Неопределено Тогда
					НовоеЗначение = НовоеЗначение + СтрокаТЧ.СуммаСкидкиБонусами;
				КонецЕсли; 
			Иначе
				НовоеЗначение = НовоеЗначение 
					+ ПолучитьЗначениеПараметраСтруктуры(СтрокаТЧ, "СуммаСкидкиСтроки", 0)
					+ ПолучитьЗначениеПараметраСтруктуры(СтрокаТЧ, "СуммаСкидкиБонусами", 0);
			КонецЕсли;
		КонецЕсли;
		СтруктураИтоговПоСтранице.Вставить(ЭлементСтруктуры.Ключ, НовоеЗначение);
	КонецЦикла;
	
КонецПроцедуры

// Вывод строки итогов по странице.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - печатный документ.
//  ОбластьПодвал - ТабличныйДокумент - область подвала табличного документа.
//  СтруктураИтоговПоСтранице - Структура - структура итогов.
//  Документ - ДокументСсылка - документ, в котором произошло событие.
//	СтруктураИтоговПоСтраницеДополнительно - Структура - структура итогов дополнительно.
//
Процедура ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьПодвал, СтруктураИтоговПоСтранице, Документ, СтруктураИтоговПоСтраницеДополнительно=Неопределено) Экспорт
	Если ОбластьПодвал <> Неопределено Тогда

		ФорматВыводаКоличества = ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = ПолучитьФорматВыводаСуммы(Документ);
		
		Если СтруктураИтоговПоСтранице <> Неопределено Тогда
			Для Каждого ЭлементИтога Из СтруктураИтоговПоСтранице Цикл
				Если СтрНайти(ЭлементИтога.Ключ,"Кол") <> 0 Тогда
					ЗначениеПараметра = Формат(ЭлементИтога.Значение,ФорматВыводаКоличества);
				Иначе
					ЗначениеПараметра = Формат(ЭлементИтога.Значение,ФорматВыводаСуммы);
				КонецЕсли; 
				Попытка
					ОбластьПодвал.Параметры[ЭлементИтога.Ключ] = ЗначениеПараметра;
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи параметра'"),
					УровеньЖурналаРегистрации.Предупреждение,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки; 
			КонецЦикла;
		КонецЕсли;

		Если СтруктураИтоговПоСтраницеДополнительно <> Неопределено Тогда
			Для Каждого ЭлементИтога Из СтруктураИтоговПоСтраницеДополнительно Цикл
				Если СтрНайти(ЭлементИтога.Ключ,"Кол") <> 0 Тогда
					ЗначениеПараметра = Формат(ЭлементИтога.Значение,ФорматВыводаКоличества);
				Иначе
					ЗначениеПараметра = Формат(ЭлементИтога.Значение,ФорматВыводаСуммы);
				КонецЕсли; 
				Попытка
					ОбластьПодвал.Параметры[ЭлементИтога.Ключ] = ЗначениеПараметра;
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи параметра'"),
					УровеньЖурналаРегистрации.Предупреждение,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки; 
			КонецЦикла;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
	КонецЕсли;
КонецПроцедуры

// Вывод штрих-кода или удаление его с формы
//
// Параметры:
//  Область - ТабличныйДокумент  - заполняемая область.
//  Документ -  ДокументСсылка - документ, в котором произошло событие.
//  ИмяРисунка - Строка - (необязательное). Имя рисунка штрихкода. Значнеие по умолчанию - "ШК".
//
Процедура ОбработатьШтрихКодОбъекта(Область, Документ, ИмяРисунка = "ШК") Экспорт
	РисунокШК = Неопределено;
	
	// получим рисунок
	Для Каждого Рисунок Из Область.Рисунки Цикл
		Если Рисунок.Имя = ИмяРисунка Тогда
			РисунокШК = Рисунок;
		КонецЕсли;
	КонецЦикла;
	
	Если РисунокШК = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если  Метаданные.РегистрыСведений.ШтрихКоды.Измерения.Объект.Тип.СодержитТип(ТипЗнч(Документ)) Тогда
		// получим штрих код документа
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШтрихКоды.ШтрихКод
		|ИЗ
		|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ
		|	ШтрихКоды.Объект = &Объект
		|	И ШтрихКоды.Запрет = ЛОЖЬ");
		Запрос.УстановитьПараметр("Объект", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
	Иначе
		РезультатЗапроса = Неопределено;
	КонецЕсли;
	
	Если РезультатЗапроса = Неопределено ИЛИ РезультатЗапроса.Пустой() Тогда
		// удаляем рисунок
		Область.Рисунки.Удалить(РисунокШК);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
		ПараметрыШтрихкода.Вставить("Штрихкод",        Выборка.ШтрихКод);
		ПараметрыШтрихкода.Вставить("Ширина",          300);
		ПараметрыШтрихкода.Вставить("Высота",          100);
		ПараметрыШтрихкода.Вставить("ТипКода",         4);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    24);
		
		Попытка
			РисунокШК.Картинка = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода).Картинка;
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка получения изображения штрихкода'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

// Вывод строки свойств в параметр области
// Параметры:
//  Область - ТабличныйДокумент  - область, в которой находится заполняемый параметр.
//  Документ -  ДокументСсылка - документ, в котором произошло событие.
//  ИмяПараметраВОбласти - Строка - (необязательный) имя заполняемого параметра.
//
Процедура ЗаполнитьСвойствамиОбъекта(Область, Документ, ИмяПараметраВОбласти = "СтрокаСвойств") Экспорт
	
	ПолучатьДопРеквизиты = УправлениеСвойствами.ИспользоватьДопРеквизиты(Документ);
	ПолучатьДопСведения  = УправлениеСвойствами.ИспользоватьДопСведения (Документ);
	
	Если НЕ (ПолучатьДопРеквизиты ИЛИ ПолучатьДопСведения) Тогда
		Возврат;
	КонецЕсли;
	
	// получим свойства документа
	Свойства = УправлениеСвойствами.ПолучитьЗначенияСвойств(Документ.Ссылка, ПолучатьДопРеквизиты, ПолучатьДопСведения);
	
	// получим строку
	СтрокаСвойств = "";
	Для Каждого Свойство Из Свойства Цикл
		Если НЕ ЗначениеЗаполнено(Свойство.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаСвойств) Тогда
			СтрокаСвойств = СтрокаСвойств + Символы.ПС;
		КонецЕсли;
		
		СтрокаСвойств = СтрокаСвойств + Строка(Свойство.Свойство) + " : """ + Строка(Свойство.Значение) + """";
	КонецЦикла;
	
	Область.Параметры[ИмяПараметраВОбласти] = СтрокаСвойств;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЕКЦИЯ Альфа-Авто: Автосервис + Автозапчасти

// Функция, подготавливает структуру строки документа для вывода в печ. формы
// формат структуры:
// 	НомерСтроки
// 	АвтомобильНаименование - полное наименование товара с характеристикой, если есть
// 	Автомобиль - значение номенклатуры для расшифровки
// 	VIN - уникальный код автомобиля
// 	НомерДвигателя
// 	НомерКузова
// 	НомерШасси
// 	Количество - если Количество*Коэффициент <> КоличествоБазовое, то выводится базовое
// 	Цена
// 	СуммаНДС
// 	СуммаВсего
// 	СуммаБезНДС
// 	ЦенаБезНДС
// 	ЦенаРозничная
// 	СуммаРозничная
// 	ПредставлениеСкидки - определяется настройкой пользователя.
//
// Параметры:
//  СтрокаТЧ - СтрокаТабличнойЧасти - строка табличной части, для которой получаем представление.
//  Документ - ДокументСсылка - документ, в котором произошло событие.
//  ИмяТабличнойЧасти - Строка - (необязательный). Имя табличной части документа, для которой производится заполнение.
//
// Возвращаемое значение:
//  Структура - представление данных строки для автомобиля.
//
Функция ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТЧ, Документ, ИмяТабличнойЧасти = "Автомобили") Экспорт
	
	СтруктураСтроки = Новый Структура;
	// заполняем структуру строки
	
	Если ЕстьРеквизит(Документ, "Автомобиль", ИмяТабличнойЧасти) Тогда
		АвтомобильНаименование = ПолучитьНаименованиеСправочника(СтрокаТЧ.Автомобиль);
		
		СтруктураСтроки.Вставить("Автомобиль",СтрокаТЧ.Автомобиль);
		СтруктураСтроки.Вставить("НомерСтроки",СтрокаТЧ.НомерСтроки);
		СтруктураСтроки.Вставить("АвтомобильНаименование",АвтомобильНаименование);
		
		// номера
		Если ЕстьРеквизит(Документ, "VIN", ИмяТабличнойЧасти) Тогда
			СтруктураСтроки.Вставить("VIN", СтрокаТЧ.VIN);
		ИначеЕсли ЕстьРеквизит(СтрокаТЧ.Автомобиль, "VIN") Тогда
			СтруктураСтроки.Вставить("VIN", СтрокаТЧ.Автомобиль.VIN);
		КонецЕсли;
		
		Если ЕстьРеквизит(Документ, "НомерДвигателя", ИмяТабличнойЧасти) Тогда
			СтруктураСтроки.Вставить("НомерДвигателя", СтрокаТЧ.НомерДвигателя);
		ИначеЕсли ЕстьРеквизит(СтрокаТЧ.Автомобиль, "НомерДвигателя") Тогда
			СтруктураСтроки.Вставить("НомерДвигателя", СтрокаТЧ.Автомобиль.НомерДвигателя);
		КонецЕсли;
		
		Если ЕстьРеквизит(Документ, "НомерКузова", ИмяТабличнойЧасти) Тогда
			СтруктураСтроки.Вставить("НомерКузова", СтрокаТЧ.НомерКузова);
		ИначеЕсли ЕстьРеквизит(СтрокаТЧ.Автомобиль, "НомерКузова") Тогда
			СтруктураСтроки.Вставить("НомерКузова", СтрокаТЧ.Автомобиль.НомерКузова);
		КонецЕсли;
		
		Если ЕстьРеквизит(Документ, "НомерШасси", ИмяТабличнойЧасти) Тогда
			СтруктураСтроки.Вставить("НомерШасси", СтрокаТЧ.НомерШасси);
		ИначеЕсли ЕстьРеквизит(СтрокаТЧ.Автомобиль, "НомерШасси") Тогда
			СтруктураСтроки.Вставить("НомерШасси", СтрокаТЧ.Автомобиль.НомерШасси);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизит(Документ, "Опция", ИмяТабличнойЧасти) Тогда
		СтруктураСтроки.Вставить("ОпцияНаименование",ПолучитьНаименованиеСправочника(СтрокаТЧ.Опция));
		СтруктураСтроки.Вставить("Опция",СтрокаТЧ.Опция);
		СтруктураСтроки.Вставить("НомерСтроки",СтрокаТЧ.НомерСтроки);
	КонецЕсли;
			
	ФорматВыводаКоличества = ПолучитьФорматВыводаКоличества(Документ);
	ФорматВыводаСуммы      = ПолучитьФорматВыводаСуммы(Документ);
		
	// если количество не равно базовому, корректируем вывод

	Если ЕстьРеквизит(Документ, "Коэффициент", ИмяТабличнойЧасти) Тогда
		Коэффициент = СтрокаТЧ.Коэффициент;
	Иначе
		Коэффициент = 0;
	КонецЕсли;
	
	Если ЕстьРеквизит(Документ, "Количество", ИмяТабличнойЧасти) Тогда
		Количество = СтрокаТЧ.Количество;
		СтруктураСтроки.Вставить("Количество"      , Формат(СтрокаТЧ.Количество, ФорматВыводаКоличества));
	Иначе
		Количество = 0;
	КонецЕсли;
	
	// Сумма
	Если ЕстьРеквизит(Документ, "Сумма", ИмяТабличнойЧасти) Тогда
		//Цена = ?(Коэффициент = 0, СтрокаТЧ.Цена, СтрокаТЧ.Цена * Коэффициент);
		СтруктураСтроки.Вставить("Сумма", Формат(СтрокаТЧ.Сумма,ФорматВыводаСуммы));
	КонецЕсли;
	
	// цена
	Если ЕстьРеквизит(Документ, "Цена", ИмяТабличнойЧасти) Тогда
		Цена = ?(Коэффициент = 0, СтрокаТЧ.Цена, СтрокаТЧ.Цена * Коэффициент);
		СтруктураСтроки.Вставить("Цена", Формат(Цена,ФорматВыводаСуммы));
	КонецЕсли;
	
	// ставка НДС
	Если ЕстьРеквизит(Документ,"СтавкаНДС", ИмяТабличнойЧасти) Тогда
		СтруктураСтроки.Вставить("СтавкаНДС", ПолучитьПредставлениеСтавкиНДС(СтрокаТЧ.СтавкаНДС));
	КонецЕсли;
	
	// сумма НДС
	ЕстьСуммаНДС = ЕстьРеквизит(Документ, "СуммаНДС", ИмяТабличнойЧасти);
	Если ЕстьСуммаНДС Тогда
		СтруктураСтроки.Вставить("СуммаНДС",Формат(СтрокаТЧ.СуммаНДС, ФорматВыводаСуммы));
		Если СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда // вместо пустой суммы выведем прочерк
			СтруктураСтроки.СуммаНДС = "-";
		КонецЕсли;
	КонецЕсли;
	
	// сумма всего
	ЕстьСуммаВсего = ЕстьРеквизит(Документ, "СуммаВсего", ИмяТабличнойЧасти);
	Если ЕстьСуммаВсего Тогда
		СтруктураСтроки.Вставить("СуммаВсего", Формат(СтрокаТЧ.СуммаВсего, ФорматВыводаСуммы));
	КонецЕсли;
	
	// сумма без НДС
	Если ЕстьСуммаНДС И ЕстьСуммаВсего Тогда
		СуммаБезНДС = СтрокаТЧ.СуммаВсего - СтрокаТЧ.СуммаНДС;
	ИначеЕсли ЕстьСуммаВсего Тогда
		СуммаБезНДС = СтрокаТЧ.СуммаВсего;
	ИначеЕсли ЕстьРеквизит(Документ, "Сумма", ИмяТабличнойЧасти) Тогда
		СуммаБезНДС = СтрокаТЧ.Сумма;
	Иначе
		СуммаБезНДС = 0;
	КонецЕсли;
	СтруктураСтроки.Вставить("СуммаБезНДС", Формат(СуммаБезНДС, ФорматВыводаСуммы));
	
	// цена без НДС
	Количество = Количество * Коэффициент;
	ЦенаБезНДС = ?(Количество = 0, 0, СуммаБезНДС / Количество);
	СтруктураСтроки.Вставить("ЦенаБезНДС", Формат(ЦенаБезНДС, ФорматВыводаСуммы));
	
	// розница
	Если ЕстьРеквизит(Документ, "ЦенаРозничная", ИмяТабличнойЧасти) Тогда
		СтруктураСтроки.Вставить("ЦенаРозничная", Формат(СтрокаТЧ.ЦенаРозничная,ФорматВыводаСуммы));
	КонецЕсли;
	
	Если ЕстьРеквизит(Документ, "СуммаРозничная", ИмяТабличнойЧасти) Тогда
		СтруктураСтроки.Вставить("СуммаРозничная", Формат(СтрокаТЧ.СуммаРозничная,ФорматВыводаСуммы));
	КонецЕсли;
	
	// скидики
	ПредставлениеСкидки = 0;
	Если ЕстьРеквизит(Документ, "СуммаСкидки", ИмяТабличнойЧасти) Тогда
		ПредставлениеСкидки = ПредставлениеСкидки + СтрокаТЧ.СуммаСкидки;
	КонецЕсли;
	
	Если ЕстьРеквизит(Документ, "СуммаСкидкиСтроки", ИмяТабличнойЧасти) Тогда
		ПредставлениеСкидки = ПредставлениеСкидки + СтрокаТЧ.СуммаСкидкиСтроки;
	КонецЕсли;
	
	СтруктураСтроки.Вставить("ПредставлениеСкидки", Формат(ПредставлениеСкидки, ФорматВыводаСуммы));
	
	Возврат СтруктураСтроки;
	
КонецФункции // ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей()

// Возвращает подпись сотрудника в виде двоичного избражения.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники - Сотрудник, для которого получаем факсимиле.
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные присоединенного файла.
//
Функция ПолучитьФаксимилеПодписи(Сотрудник) Экспорт
	
	Перем Картинка;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) ИЛИ ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Картинка = Сотрудник.ФаксимилеПодписи;
	
	Если НЕ ЗначениеЗаполнено(Картинка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	Возврат МодульРаботаСФайлами.ДвоичныеДанныеФайла(Картинка);
	
КонецФункции

// Возвращает печать организации в виде двоичного избражения.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация из документа
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные присоединенного файла.
//
Функция ПолучитьФаксимилеПечати(Организация) Экспорт
	
	Перем Картинка;
	
	Картинка = Организация.ПечатьОрганизации;
	
	Если НЕ ЗначениеЗаполнено(Картинка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульПрисоединенныеФайлы = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	Возврат МодульПрисоединенныеФайлы.ДвоичныеДанныеФайла(Картинка);
	
КонецФункции

// Проверяет, есть ли у организации/подразделения логотип. Если есть, то логотип будет выведен в печатные формы.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация из документа.
//  ПодразделениеКомпании - СправочникСсылка.ПодразделенияКомпании - Организация из документа.
//
// Возвращаемое значение:
//  Булево - Истина, если есть логотип, Ложь - в противном случае.
//
Функция ЕстьЛоготип(Организация, ПодразделениеКомпании) Экспорт
	
	Возврат НЕ Организация.ФайлКартинки.Пустая() ИЛИ НЕ ПодразделениеКомпании.ФайлКартинки.Пустая();
	
КонецФункции

// Вывод логотипа организации или подразделения на печатную форму.
//
// Параметры:
//  ОбластьТабличногоДокумента - ТабличныйДокумент - область табличного документа с логотипом.
//  Организация - СправочникСсылка.Организации - Организация из документа.
//  ПодразделениеКомпании - СправочникСсылка.ПодразделениеКомпании - подразделение из документа.
//  ИмяОбластиЛоготипа - Строка - (необязательное). - Имя именованной области табличного документа логотипа организации.
//
Процедура ЗаполнитьЛоготип(ОбластьТабличногоДокумента,
		Организация,
		ПодразделениеКомпании,
		ИмяОбластиЛоготипа = "ЛоготипОрганизации") Экспорт
	
	Картинка = ПолучитьЛоготип(Организация, ПодразделениеКомпании);
	
	Если Картинка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Рисунок Из ОбластьТабличногоДокумента.Рисунки Цикл
		Если Рисунок.Имя = ИмяОбластиЛоготипа Тогда
			Рисунок.Картинка = Новый Картинка(Картинка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Данные ответственного лица документа, формирование структуры на основании Подписанта
//
// Параметры:
//  Документ               - ДокументСсылка - документ, для которого получаем данные
//  ВидОтветственногоЛица  - Строка
//  Организация            - СправочникСсылка.Организации - (необязательное) организация из документа.
//  ВыводитьПолноеФИО      - Булево - истина, вывод в формате Фамилия Имя Отчество
//  ОбрамлятьФИО           - Булево - истина, вывод в формате /ФИО/
//
// Возвращаемое значение:
//  Структура - содержит должность и представление ответственного лица.
//
Функция ДанныеОтветственногоЛицаПодписанты(Документ,
	ВидОтветственногоЛица, 
	Знач Организация = Неопределено,
	ВыводитьПолноеФИО = Ложь,
	ОбрамлятьФИО = Ложь) Экспорт  
		
	ОтветственноеЛицо = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда 
		Если ВидОтветственногоЛица = "Отпустил" Тогда
			Организация	= Документ.ПодразделениеКомпании;
		Иначе
			Организация = Документ.Организация; 
		КонецЕсли;
	КонецЕсли;   
	
	Если Метаданные.Документы.Содержит(Документ.Метаданные()) Тогда
		Дата = Документ.Дата;
	
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;

	
	ДокументПоставщика = ПолучитьДокументыПоставщика(Документ);
	
	Если ЕстьРеквизит(Документ, ВидОтветственногоЛица) И ЗначениеЗаполнено(Документ[ВидОтветственногоЛица]) Тогда
		ОтветственноеЛицо = Документ[ВидОтветственногоЛица];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтветственноеЛицо) И НЕ ДокументПоставщика Тогда
		ТипОтветственногоЛица = ПолучитьТипОтветственногоЛица(ВидОтветственногоЛица);
			
		Если ТипОтветственногоЛица <> Неопределено Тогда
				Отбор = Новый Структура("Организация,Объект", Организация, ТипОтветственногоЛица);
				СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(Дата, Отбор);
				ОтветственноеЛицо = СтруктураСведений.Значение;
		КонецЕсли;
	КонецЕсли;	

	// положим все в структуру
	СтруктураВозврата = Новый Структура; 
	Если ОтветственноеЛицо <> Неопределено Тогда
		Если ТипЗнч(ОтветственноеЛицо) = Тип("СправочникСсылка.Подписанты")	Тогда	
			Если ЕстьРеквизит(ОтветственноеЛицо.Подписант, "Должность") Тогда
				СтруктураВозврата.Вставить("Должность",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтветственноеЛицо.Подписант, "Должность")
				);  
			Иначе 
				СтруктураВозврата.Вставить("Должность", "");
			КонецЕсли; 
			
			Если ЕстьРеквизит(ОтветственноеЛицо, "Основание") Тогда 
				
				СтруктураВозврата.Вставить("Основание",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтветственноеЛицо, "Основание")
				);
			КонецЕсли;   
			
			ФамилияИмяОтчество =  ПолучитьНаименованиеСправочника(ОтветственноеЛицо.Подписант, Дата);
			СтруктураВозврата.Вставить(ВидОтветственногоЛица, ОтветственноеЛицо.Подписант);  
		Иначе 
			Если ЕстьРеквизит(ОтветственноеЛицо, "Должность") Тогда
				СтруктураВозврата.Вставить("Должность",
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтветственноеЛицо, "Должность")
				);  
				
			КонецЕсли; 
		
			СтруктураВозврата.Вставить("Основание", "");  
            СтруктураВозврата.Вставить(ВидОтветственногоЛица, ОтветственноеЛицо);
			ФамилияИмяОтчество =  ПолучитьНаименованиеСправочника(ОтветственноеЛицо, Дата);
		  
		КонецЕсли;
		
		Если НЕ ВыводитьПолноеФИО
			И НЕ ПустаяСтрока(ФамилияИмяОтчество)
			И ФизическиеЛицаКлиентСервер.ФИОНаписаноВерно(ФамилияИмяОтчество) Тогда 
			
			ФамилияИмяОтчество = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФамилияИмяОтчество)
			
		КонецЕсли;
		
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 %2 %1",
			?(ОбрамлятьФИО, "/", ""),
			ФамилияИмяОтчество
		);  
		
		СтруктураВозврата.Вставить("Представление", Представление);
	Иначе  

		СтруктураВозврата.Вставить(ВидОтветственногоЛица, ""); 
		СтруктураВозврата.Вставить("Должность", "");
		СтруктураВозврата.Вставить("Основание", "");
		СтруктураВозврата.Вставить("Представление", "");

	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции

Функция ДанныеСотрудникаДляПечати(ВидОтветственного, Сотрудник) Экспорт
	
	ФамилияИмяОтчество =  Сотрудник.Наименование;
	Если НЕ ПустаяСтрока(ФамилияИмяОтчество)
			И ФизическиеЛицаКлиентСервер.ФИОНаписаноВерно(ФамилияИмяОтчество) Тогда 
			
			ФамилияИмяОтчество = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФамилияИмяОтчество)
	КонецЕсли;
	
	Структура = Новый Структура ();
	
	Структура.Вставить(ВидОтветственного + "Представление" , ФамилияИмяОтчество);
	Структура.Вставить(ВидОтветственного + "Должность"	  ,	Сотрудник.Должность); 
	
	Возврат Структура;	
КонецФункции

// Функция формирования номера для печати для Счет-фактуры выданной
//
// Параметры:
//	СчетФактураВыданный - Ссылка на документ СчетФактураВыданный;
//	Номер - Исходный номер документа.
//
// Возвращаемое значение:
//  Строка - номер документа, включая индекс обособленного подразделения.
//
Функция ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(Знач Номер, СчетФактураВыданный) Экспорт
	
	Если ТипЗнч(СчетФактураВыданный) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ПодразделениеКомпании = СчетФактураВыданный.ПодразделениеКомпании;
		
	Иначе
		
		ПодразделениеКомпании = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактураВыданный,"ПодразделениеКомпании");
		
	КонецЕсли;
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПодразделениеКомпании, "ОбособленноеПодразделение,ЦифровойИндексОбособленногоПодразделения");
	
	Если РеквизитыПодразделения.ОбособленноеПодразделение 
		И ЗначениеЗаполнено(РеквизитыПодразделения.ЦифровойИндексОбособленногоПодразделения)Тогда
		
		Номер = Номер + "/" + РеквизитыПодразделения.ЦифровойИндексОбособленногоПодразделения;

	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

// Вывод QR-кода для оплаты
//
// Параметры:
//  Область - ТабличныйДокумент  - заполняемая область.
//  Документ -  Документ - Данные для заполнения информации QR-кода.
//  ЕстьСуммаНДС - Булево - Признак того, что в документе не нулевая сумма НДС.
//  ИмяРисунка - Строка - (необязательное). Имя рисунка штрихкода. Значнеие по умолчанию - "ШК".
//
Процедура ОбработатьQRКодОплаты(Область, Документ, ЕстьСуммаНДС, ИмяРисунка = "QRКод") Экспорт
	
	РеквизитыПлатежа = РеквизитыПлатежаДляQRКода(Документ, ЕстьСуммаНДС);
	ДанныеДляQR = УправлениеПечатьюРФ.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
	
	Если Не ПустаяСтрока(ДанныеДляQR) Тогда
		
		ДанныеQRКода = ГенерацияШтрихкода.ДанныеQRКода(ДанныеДляQR, 0, 190);
		
		Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			КартинкаQRКода = Новый Картинка(ДанныеQRКода);
			Область.Рисунки[ИмяРисунка].Картинка = КартинкаQRКода;
		Иначе
			ВывестиСообщение(Нстр("ru = 'Не удалось сформировать QR-код.'"), Документ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДокументаДляПерерасчетаТаблицы() Экспорт
	
	ДокументОбъектСтруктура = Новый Структура();
	ДокументОбъектСтруктура.Вставить("Документ");
	ДокументОбъектСтруктура.Вставить("Дата");
	ДокументОбъектСтруктура.Вставить("ВалютаДокумента");
	ДокументОбъектСтруктура.Вставить("КурсДокумента");
	ДокументОбъектСтруктура.Вставить("ТипЦен");
	ДокументОбъектСтруктура.Вставить("ЭтоПродажа", Истина);
	ДокументОбъектСтруктура.Вставить("ПропуститьПересчетПоВзаиморасчетам", Ложь);
	
	Возврат ДокументОбъектСтруктура;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьНаименование(Объект, ДляПечати, ТипОбъекта, ТипПодразделение, ТипСклад, НаДату)
	
	Результат = Неопределено;
	
	Если ДляПечати И ТипОбъекта = ТипПодразделение Тогда
		
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		Результат = ПолучитьНаименованиеСправочника(Объект.Организация, НаДату);
		
	ИначеЕсли ТипОбъекта <> ТипСклад Тогда
		
		Результат = ПолучитьНаименованиеСправочника(Объект, НаДату);
		
	Иначе
		
		Результат = ПолучитьНаименованиеСправочника(Объект);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьНаименование()

Функция СформироватьИНН(Объект, ТипОбъекта, ТипСклад, ТипПодразделение)
	
	Результат = Неопределено;
	
	//@skip-check reading-attribute-from-database
	Если ТипОбъекта = ТипПодразделение ИЛИ ТипОбъекта = ТипСклад Тогда
		
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		Результат = СокрЛП(Объект.Организация.ИНН);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты")
		И Объект.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
		
		ИННОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ГоловнойКонтрагент.ИНН");
		Результат  = СокрЛП(ИННОбъекта);
		
	Иначе
		
		Результат = СокрЛП(Объект.ИНН);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьИНН()

Функция СформироватьКПП(Объект, ТипОбъекта, ТипСклад, ТипПодразделение, НаДату, ИспользоватьКПППодразделения,
		ПодразделениеКомпании)
	
	Результат = Неопределено;
	
	//@skip-check reading-attribute-from-database
	Если ТипОбъекта = ТипСклад
		ИЛИ ТипОбъекта = ТипПодразделение И НЕ ЗначениеЗаполнено(Объект.КПП) Тогда
		
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		Результат = СокрЛП(Справочники.Организации.КППНаДату(Объект.Организация, НаДату));
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты")
		И (Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
			ИЛИ Объект.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение) Тогда
		
		Результат = СокрЛП(Справочники.Контрагенты.КППНаДату(Объект, НаДату));
		
	ИначеЕсли ТипОбъекта = ТипПодразделение Тогда
		
		Результат = СокрЛП(Справочники.ПодразделенияКомпании.КППНаДату(Объект, НаДату));
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
		
		Если ИспользоватьКПППодразделения Тогда
			
			Результат = СокрЛП(Справочники.ПодразделенияКомпании.КППНаДату(ПодразделениеКомпании, НаДату));
			
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = СокрЛП(Справочники.Организации.КППНаДату(Объект, НаДату));
			КонецЕсли;
			
		Иначе
			
			Результат = СокрЛП(Справочники.Организации.КППНаДату(Объект, НаДату));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьКПП()

Функция СформироватьОКПО(Объект, ТипОбъекта, ТипСклад, ТипПодразделение)
	
	Результат = Неопределено;
	
	//@skip-check reading-attribute-from-database
	Если ТипОбъекта = ТипСклад ИЛИ ТипОбъекта = ТипПодразделение Тогда
		
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		Результат = СокрЛП(Объект.Организация.КодПоОКПО);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации")
		ИЛИ (ТипОбъекта = Тип("СправочникСсылка.Контрагенты")
			И (Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
				ИЛИ Объект.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение)) Тогда
		
		Результат = СокрЛП(Объект.КодПоОКПО);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьОКПО()

Функция СформироватьАдрес(Объект, ТипОбъекта, ТипСклад, ТипПодразделение, ВидКИ,
	ИспользоватьКИПодразделенияПриПечати, ПодразделениеКомпании, НаДату = Неопределено)
	
	Результат = Неопределено;
	НаДату = ?(НаДату = Неопределено, ТекущаяДатаСеанса(), НаДату);
	
	Если ТипОбъекта = ТипПодразделение Тогда
		
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
			Справочники.ВидыКонтактнойИнформации[ВидКИ + "ПодразделенияКомпании"], НаДату);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			//@skip-check reading-attribute-from-database
			//@skip-check unknown-method-property
			Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,
				Справочники.ВидыКонтактнойИнформации[ВидКИ + "Организации"], НаДату);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = ТипСклад Тогда
		
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,
			Справочники.ВидыКонтактнойИнформации[ВидКИ + "Организации"], НаДату);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
		
		// Если у подразделения документа стоит флаг "ИспользоватьКИПодразделенияПриПечати",
		// то КИ выводим для подразделения.
		
		Если ИспользоватьКИПодразделенияПриПечати Тогда
			
			Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПодразделениеКомпании,
				Справочники.ВидыКонтактнойИнформации[ВидКИ + "ПодразделенияКомпании"], НаДату);
			
		Иначе
			
			Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
				Справочники.ВидыКонтактнойИнформации[ВидКИ + "Организации"], НаДату);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
			Справочники.ВидыКонтактнойИнформации[ВидКИ + "Контрагента"], НаДату);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьАдрес()

Функция СформироватьТелефон(Объект, ТипОбъекта, ТипСклад, ТипПодразделение,
	ИспользоватьКИПодразделенияПриПечати, ПодразделениеКомпании, НаДату)
	
	Результат = Неопределено;
	НаДату = ?(НаДату = Неопределено, ТекущаяДатаСеанса(), НаДату);
	
	Если ТипОбъекта = ТипПодразделение Тогда
		
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
			Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияКомпании, НаДату);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			//@skip-check reading-attribute-from-database
			//@skip-check unknown-method-property
			Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, НаДату);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = ТипСклад Тогда
		
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, НаДату);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
		
		// Если у подразделения документа стоит флаг "ИспользоватьКИПодразделенияПриПечати",
		// то КИ выводим для подразделения.
		
		Если ИспользоватьКИПодразделенияПриПечати Тогда
			Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПодразделениеКомпании,
				Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияКомпании, НаДату);
		Иначе
			Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, НаДату);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, НаДату);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СФормироватьФакс(Объект, ТипОбъекта, ТипСклад, ТипПодразделение,
	ИспользоватьКИПодразделенияПриПечати, ПодразделениеКомпании)
	
	Результат = Неопределено;
	
	Если ТипОбъекта = ТипПодразделение Тогда
		
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
			Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияКомпании, ТекущаяДатаСеанса());
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			//@skip-check reading-attribute-from-database
			//@skip-check unknown-method-property
			Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,
				Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, ТекущаяДатаСеанса());
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = ТипСклад Тогда
		
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,
			Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, ТекущаяДатаСеанса());
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
		
		// Если у подразделения документа стоит флаг "ИспользоватьКИПодразделенияПриПечати",
		// то КИ выводим для подразделения.
		
		Если ИспользоватьКИПодразделенияПриПечати Тогда
			Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПодразделениеКомпании,
				Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияКомпании, ТекущаяДатаСеанса());
		Иначе
			Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
				Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, ТекущаяДатаСеанса());
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
			Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента, ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьФакс()

Функция СформироватьБанковскийСчет(Объект, ТипОбъекта, ТипПодразделение, РасчетныйСчетДокумента)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(РасчетныйСчетДокумента) Тогда
		
		Результат = СокрЛП(РасчетныйСчетДокумента.НомерСчета);
	Иначе
		
		Если ЕстьРеквизит(Объект, "ОсновнойБанковскийСчет") Тогда
			
			Результат = СокрЛП(Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект).НомерСчета);
			
			Если НЕ ЗначениеЗаполнено(Результат) И ТипОбъекта = ТипПодразделение Тогда
				//@skip-check reading-attribute-from-database
				//@skip-check unknown-method-property
				Результат = СокрЛП(Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация).НомерСчета);
			КонецЕсли;
			
		Иначе
			
			//@skip-check reading-attribute-from-database
			//@skip-check unknown-method-property
			Результат = СокрЛП(Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация).НомерСчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьБанковскийСчет()

Функция СформироватьБанк(Объект, ТипОбъекта, ТипПодразделение, РасчетныйСчетДокумента)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(РасчетныйСчетДокумента) Тогда
		
		Результат = СокрЛП(РасчетныйСчетДокумента.Банк);
		
	Иначе
		
		Если ЕстьРеквизит(Объект, "ОсновнойБанковскийСчет") Тогда
			
			//@skip-check reading-attribute-from-database
			Результат = СокрЛП(Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект).Банк);
			
			Если НЕ ЗначениеЗаполнено(Результат) И ТипОбъекта = ТипПодразделение Тогда
				//@skip-check reading-attribute-from-database
				//@skip-check unknown-method-property
				Результат = СокрЛП(Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация).Банк);
			КонецЕсли;
			
		Иначе
			
			//@skip-check reading-attribute-from-database
			//@skip-check unknown-method-property
			Результат = СокрЛП(Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация).Банк);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьБанк()

Функция СформироватьБИК(Объект, ТипОбъекта, ТипПодразделение, РасчетныйСчетДокумента)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(РасчетныйСчетДокумента) Тогда
		
		Результат = СокрЛП(РасчетныйСчетДокумента.Банк.Код);
		
	Иначе
		
		Если ЕстьРеквизит(Объект, "ОсновнойБанковскийСчет") Тогда
			
			ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект);
			Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
				//@skip-check reading-attribute-from-database
				Результат = СокрЛП(ОсновнойБанковскийСчет.Банк.Код);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Результат) И ТипОбъекта = ТипПодразделение Тогда
				//@skip-check reading-attribute-from-database
				//@skip-check unknown-method-property
				Результат = СокрЛП(Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация).Банк.Код);
			КонецЕсли;
			
		Иначе
			
			//@skip-check reading-attribute-from-database
			//@skip-check unknown-method-property
			Результат = СокрЛП(Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация).Банк.Код);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьБИК()

Функция СформироватьКоррСчет(Объект, ТипОбъекта, ТипПодразделение, РасчетныйСчетДокумента)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(РасчетныйСчетДокумента) Тогда
		
		Банк = РасчетныйСчетДокумента.Банк;
		
	Иначе
		
		Если ЕстьРеквизит(Объект, "ОсновнойБанковскийСчет") Тогда
			
			//@skip-check reading-attribute-from-database
			Банк = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект).Банк;
			Если НЕ ЗначениеЗаполнено(Результат) И ТипОбъекта = ТипПодразделение Тогда
				
				//@skip-check reading-attribute-from-database
				//@skip-check unknown-method-property
				Банк = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация).Банк;
				
			КонецЕсли;
		Иначе
			
			//@skip-check reading-attribute-from-database
			//@skip-check unknown-method-property
			Банк = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация).Банк;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Результат = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "КоррСчет"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьКоррСчет()

// получение ответственного лица
Функция ПолучитьТипОтветственногоЛица(ВидОтветственногоЛица)
	
	Если ТипЗнч(ВидОтветственногоЛица) <> Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидОтветственногоЛица = "ГлавныйБухгалтер" Тогда
		Возврат Перечисления.ВидыОбъектовСведений.ГлавныйБухгалтер;
	ИначеЕсли ВидОтветственногоЛица = "Руководитель" Тогда
		Возврат Перечисления.ВидыОбъектовСведений.Руководитель;
	ИначеЕсли ВидОтветственногоЛица = "Кассир" Тогда
		Возврат Перечисления.ВидыОбъектовСведений.Кассир;
	ИначеЕсли ВидОтветственногоЛица = "МОЛ" Тогда
		Возврат Перечисления.ВидыОбъектовСведений.МОЛ;
	ИначеЕсли ВидОтветственногоЛица = "Отпустил" Тогда
		Возврат Перечисления.ВидыОбъектовСведений.Отпустил;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьТипОтветственногоЛица()

// Возвращает логотип организации/подразделения в виде двоичного избражения.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация из документа
//  ПодразделениеКомпании - СправочникСсылка.ПодразделениеКомпании - Подразделение из документа.
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные присоединенного файла.
//
Функция ПолучитьЛоготип(Организация, ПодразделениеКомпании)
	
	Перем Картинка;
	
	Картинка = ПодразделениеКомпании.ФайлКартинки;
	
	Если НЕ ЗначениеЗаполнено(Картинка) Тогда
		Картинка = Организация.ФайлКартинки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Картинка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульПрисоединенныеФайлы = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	Возврат МодульПрисоединенныеФайлы.ДвоичныеДанныеФайла(Картинка);
	
КонецФункции

// Функция заполнения структуры для заполнения QR-code
//
// Параметры:
//  Документ - ДокументСсылка - документ, в котором произошло событие.
//
// Возвращаемое значение:
//  Структура - для передачи данных для формирования QR-code
//
Функция РеквизитыПлатежаДляQRКода(Документ, ЕстьСуммаНДС)
	
	ПолноеИмяДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ)).ПолноеИмя();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплату.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	СчетНаОплату.Контрагент.Имя КАК КонтрагентИмя,
	|	СчетНаОплату.Контрагент.Фамилия КАК КонтрагентФамилия,
	|	СчетНаОплату.Контрагент.Отчество КАК КонтрагентОтчество,
	|	СчетНаОплату.Контрагент.ИНН КАК КонтрагентИНН,
	|	СчетНаОплату.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СчетНаОплату.Организация.Наименование КАК ОрганизацияНаименование,
	|	СчетНаОплату.Организация.ИНН КАК ОрганизацияИНН,
	|	СчетНаОплату.Организация.КПП КАК ОрганизацияКПП,
	|	СчетНаОплату.РасчетныйСчетОрганизации.НомерСчета КАК РасчетныйСчетОрганизацииНомерСчета,
	|	СчетНаОплату.РасчетныйСчетОрганизации.Банк.Наименование КАК РасчетныйСчетОрганизацииБанкНаименование,
	|	СчетНаОплату.РасчетныйСчетОрганизации.Банк.Город КАК РасчетныйСчетОрганизацииБанкГород,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.РасчетныйСчетОрганизации.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.РасчетныйСчетОрганизации.Банк.Наименование
	|		ИНАЧЕ СчетНаОплату.РасчетныйСчетОрганизации.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаРасчетов,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.РасчетныйСчетОрганизации.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.РасчетныйСчетОрганизации.Банк.Код
	|		ИНАЧЕ СчетНаОплату.РасчетныйСчетОрганизации.БанкДляРасчетов.Код
	|	КОНЕЦ КАК БИКБанкаРасчетов,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.РасчетныйСчетОрганизации.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.РасчетныйСчетОрганизации.Банк.КоррСчет
	|		ИНАЧЕ СчетНаОплату.РасчетныйСчетОрганизации.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаРасчетов,
	|	СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	СчетНаОплату.Номер КАК Номер,
	|	СчетНаОплату.Дата КАК Дата,
	|	СчетНаОплату.РасчетныйСчетОрганизации.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка) КАК ПрямойРасчет
	|ИЗ
	|	%ИмяДокумента% КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка = &Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ПолноеИмяДокумента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	ДанныеДокумента = Запрос.Выполнить().Выбрать();
	ДанныеДокумента.Следующий();
	
	ПредставлениеОрганизации = ?(
		Не ЗначениеЗаполнено(ДанныеДокумента.ОрганизацияНаименованиеПолное),
		ДанныеДокумента.ОрганизацияНаименование,
		ДанныеДокумента.ОрганизацияНаименованиеПолное);
	
	Если ДанныеДокумента.ПрямойРасчет Тогда
		ТекстПолучателя = ПредставлениеОрганизации;
	Иначе
		ТекстПолучателя = СтрШаблон(НСтр("ru = '%1 р/с %2 в %3 %4'"),
			ПредставлениеОрганизации,
			ДанныеДокумента.РасчетныйСчетОрганизацииНомерСчета,
			ДанныеДокумента.РасчетныйСчетОрганизацииБанкНаименование,
			ДанныеДокумента.РасчетныйСчетОрганизацииБанкГород);
	КонецЕсли;
	НазначениеПлатежа = СтрШаблон(НСтр("ru = 'Оплата по счету № %1 от %2. Сумма %3. %4.'"),
		ДанныеДокумента.Номер,
		Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"),
		Формат(ДанныеДокумента.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="),
		?(ЕстьСуммаНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Без налога (НДС)'")));
	
	РеквизитыПлатежа = Новый Структура;
	РеквизитыПлатежа.Вставить("ТекстПолучателя", ТекстПолучателя);
	РеквизитыПлатежа.Вставить("НомерСчетаПолучателя", ДанныеДокумента.РасчетныйСчетОрганизацииНомерСчета);
	РеквизитыПлатежа.Вставить("НаименованиеБанкаПолучателя", ДанныеДокумента.НаименованиеБанкаРасчетов);
	РеквизитыПлатежа.Вставить("БИКБанкаПолучателя", ДанныеДокумента.БИКБанкаРасчетов);
	РеквизитыПлатежа.Вставить("СчетБанкаПолучателя", ДанныеДокумента.КоррСчетБанкаРасчетов);
	РеквизитыПлатежа.Вставить("СуммаЧислом", ДанныеДокумента.СуммаДокумента);
	РеквизитыПлатежа.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	РеквизитыПлатежа.Вставить("ИННПолучателя", ДанныеДокумента.ОрганизацияИНН);
	РеквизитыПлатежа.Вставить("КПППолучателя", ДанныеДокумента.ОрганизацияКПП);
	РеквизитыПлатежа.Вставить("ИННПлательщика", ДанныеДокумента.КонтрагентИНН);
	РеквизитыПлатежа.Вставить("ФамилияПлательщика", ДанныеДокумента.КонтрагентФамилия);
	РеквизитыПлатежа.Вставить("ИмяПлательщика", ДанныеДокумента.КонтрагентИмя);
	РеквизитыПлатежа.Вставить("ОтчествоПлательщика", ДанныеДокумента.КонтрагентОтчество);
	РеквизитыПлатежа.Вставить("Ссылка", Документ);
	
	Возврат РеквизитыПлатежа
	
КонецФункции

Функция ПолучитьПодписантаСотрудника(Подписант, Организация, ПодразделениеКомпании)  Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подписанты.Организация КАК Организация,
		|	Подписанты.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	Подписанты.ВидПодписанта КАК ВидПодписанта,
		|	Подписанты.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Подписанты КАК Подписанты
		|ГДЕ
		|	Подписанты.Организация = &Организация
		|	И Подписанты.ПодразделениеКомпании = &ПодразделениеКомпании
		|	И Подписанты.ВидПодписанта = &ВидПодписанта
		|	И Подписанты.Подписант = &Подписант
		|	И НЕ Подписанты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Подписанты.Организация,
		|	Подписанты.ПодразделениеКомпании,
		|	Подписанты.ВидПодписанта,
		|	Подписанты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Подписанты КАК Подписанты
		|ГДЕ
		|	Подписанты.ВидПодписанта = &ВидПодписанта
		|	И Подписанты.Организация = &Организация
		|	И Подписанты.Подписант = &Подписант
		|	И НЕ Подписанты.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("ВидПодписанта", Перечисления.ВидыПодписантов.ПодписантОтОрганизации);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("Подписант", Подписант);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Подписанты.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПолучитьДокументыОрганизации() Экспорт
	
	ДокументыОрганизации = Новый Массив();
	ДокументыОрганизации.Добавить("СчетФактураВыданный"); 
	ДокументыОрганизации.Добавить("РеализацияТоваров");
	ДокументыОрганизации.Добавить("РеализацияАвтомобилей");
	ДокументыОрганизации.Добавить("РеализацияАктивов");
	ДокументыОрганизации.Добавить("КорректировкаРеализации");
	ДокументыОрганизации.Добавить("КорректировкаРеализацииАвтомобилей");
	ДокументыОрганизации.Добавить("АктРазногласий");
	ДокументыОрганизации.Добавить("ВозвратПоставщику"); 
	ДокументыОрганизации.Добавить("ВозвратПоставщикуАвтомобилей");
	ДокументыОрганизации.Добавить("ЗаказНаряд");
	ДокументыОрганизации.Добавить("Чек");
	ДокументыОрганизации.Добавить("ОтчетКомиссионера");
	ДокументыОрганизации.Добавить("ОтчетКомиссионераЗаАвтомобили");
	ДокументыОрганизации.Добавить("ПередачаТоваровМеждуОрганизациями");
	ДокументыОрганизации.Добавить("СчетНаОплатуЗаАвтомобили"); 
	ДокументыОрганизации.Добавить("СчетНаОплату"); 
	
	Возврат ДокументыОрганизации
КонецФункции

Функция ПроверитьВходящийИсходящий(Документ)
	
	ДокументыОрганизации = ПолучитьДокументыОрганизации();
	ИмяДокумента = Документ.Метаданные().Имя; 
	
	ДокументОрганизации = Истина;
	Если ДокументыОрганизации.Найти(ИмяДокумента) = Неопределено Тогда
		ДокументОрганизации = Ложь;
	КонецЕсли; 
	
	Возврат ДокументОрганизации;
	
КонецФункции

Функция ПолучитьДокументыПоставщика(Документ)Экспорт

	ДокументыПоступления = Новый Массив();
	ДокументыПоступления.Добавить("ПоступлениеТоваров");
	ДокументыПоступления.Добавить("ПоступлениеАвтомобилей");
	ДокументыПоступления.Добавить("ПоступлениеДопРасходов");
	ДокументыПоступления.Добавить("СчетФактураПолученный"); 
	ДокументыПоступления.Добавить("КорректировкаПоступления");
	ДокументыПоступления.Добавить("КорректировкаПоступленияАвтомобилей");
	ДокументыПоступления.Добавить("СчетОтПоставщика");  
	ДокументыПоступления.Добавить("СчетОтПоставщикаЗаАвтомобили");
	
	ИмяДокумента = Документ.Метаданные().Имя; 
	
	ДокументПоставщика = Истина;
	Если ДокументыПоступления.Найти(ИмяДокумента) = Неопределено Тогда
		ДокументПоставщика = Ложь;
	КонецЕсли; 
	
	Возврат ДокументПоставщика;

КонецФункции
#КонецОбласти
