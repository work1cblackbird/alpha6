
#Область ПрограммныйИнтерфейс

// Получение текущего ключа сессии для организации
//
// Параметры:
//  Организация				 - СправочникСсылка.Организации	 - Организация, для которой необходимо выполнить получение ключа
//  КлючСессииСУЗ			 - Булево						 - Признак того, что получаем ключ для СУЗ
//  ИдентификаторСоединения	 - Строка						 - Идентификатор соединения для получения токена СУЗ.
// 
// Возвращаемое значение:
//  Структура - Признак получения ключа и текст ошибки
//
Функция КлючСессии(Организация = Неопределено, КлючСессииСУЗ = Ложь, ИдентификаторСоединения = "") Экспорт
	
	Результат = Новый Структура("КлючСессииПолучен,ТекстОшибки", Ложь, "");
	
	// Без организации не получим все данные для входа
	Если Организация = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КлючСессииСУЗ И ПустаяСтрока(ИдентификаторСоединения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Получим параметры запроса для формирования
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(Организация);
	
	// Для получения ключа необходимо получить данные из Честного знака и подписать их
	ПараметрыАвторизации = ПараметрыАвторизации(ПараметрыЗапроса);
	Если НЕ ПустаяСтрока(ПараметрыАвторизации.ТекстОшибки) Тогда
		Результат.ТекстОшибки = ПараметрыАвторизации.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	// Получим сертификат
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса.Сертификат) Тогда
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Для организации %1 не указан сертификат для входа в личный кабинет Честного знака'"),
			Организация);
		Возврат Результат;
	КонецЕсли;
	
	ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(ПараметрыАвторизации.Данные);
	ДанныеВBase64 = Base64Строка(ДвоичныеДанныеСтроки);
	
	// Подпишем полученные данные
	Попытка
		Подпись = ПодписатьДанные(
			ДанныеВBase64,
			ПараметрыЗапроса.Сертификат,
			Ложь);
	Исключение
		Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка подписания данных сертификатом'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Ошибка при подписании сертификатом данных для отправки:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;
	КонецПопытки;
	
	УстановитьПолученныйКлючСессии(
		Организация,
		Результат,
		ПараметрыЗапроса,
		ПараметрыАвторизации,
		Подпись,
		ИдентификаторСоединения);
	
	Возврат Результат;
	
КонецФункции

// Подпись передаваемых данных
// 
// Параметры:
//  Данные - Строка - Подписываемые данные
//	Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - Сертификат подписи
//  Открепленная - Булево - Открепленная
// 
// Возвращаемое значение:
//  Строка - Текст сообщения
// 
Функция ПодписатьДанные(Данные, Сертификат, Открепленная = Истина) Экспорт
	
	Отпечаток = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "Отпечаток");
	
	СертификатКриптографии = ЭлектроннаяПодписьСлужебный.ПолучитьСертификатПоОтпечатку(Отпечаток, Ложь, Ложь);
	
	ОбъектПодписи = Новый COMОбъект("CAdESCOM.CPSigner");
	ОбъектПодписи.Certificate = ПолучитьСертификатПоОтпечатку(
		ПолучитьHexСтрокуИзДвоичныхДанных(СертификатКриптографии.Отпечаток));
	
	АтрибутыВремени = Новый COMОбъект("CAdESCOM.CPAttribute");
	АтрибутыВремени.Name = 0; // Атрибут штампа времени
	АтрибутыВремени.Value = ТекущаяДатаСеанса();
	ОбъектПодписи.AuthenticatedAttributes2.Add(АтрибутыВремени);
	
	УстановитьПривилегированныйРежим(Истина);
	ПарольСертификата = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Сертификат, "ПарольСертификата");
	Если ЗначениеЗаполнено(ПарольСертификата) Тогда
		ОбъектПодписи.KeyPin = ПарольСертификата;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстДляПодписи = СокрЛП(Данные);
	oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
	oSignedData.ContentEncoding = 1;
	oSignedData.Content = ТекстДляПодписи;
	
	ТипКодировки = 0;
	sSignedMessage = oSignedData.SignCades(ОбъектПодписи, 1, Открепленная, ТипКодировки);
	
	Возврат sSignedMessage;
	
КонецФункции // ПодписатьДанные()

// Формирование из структуры текста JSON
// 
// Параметры:
//  Структура - Структура - Структура данных
//	БезПробеловИПереносов	- Булево - Результат без пробелов
// 
// Возвращаемое значение:
//  Строка - Текст JSON
// 
Функция ДанныеВТекстJSON(Структура, БезПробеловИПереносов = Ложь) Экспорт 
	
	Если БезПробеловИПереносов Тогда
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	Иначе
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	ТекстJSON = ЗаписьJSON.Закрыть();
	
	Возврат ТекстJSON;
	
КонецФункции

// Формирование из текста JSON структуру.
// 
// Параметры:
//  ТекстJSON - Строка - Текст JSON
//	ПрочитатьВСоответствие - Булево - Чтение объекта JSON в соответствие или структуру.
// 
// Возвращаемое значение:
//  Структура - Текст JSON
// 
Функция ТекстJSONВОбъект(ТекстJSON, ПрочитатьВСоответствие = Ложь) Экспорт 
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	Попытка
		РезультатРазбора = ПрочитатьJSON(Чтение, ПрочитатьВСоответствие);
	Исключение
		РезультатРазбора = Неопределено;
	КонецПопытки;
	Возврат РезультатРазбора;
	
КонецФункции

#Область ОбменПоAPI

// Выполняет команду обработки и возвращает результат ее выполнения.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура СформироватьЗапрос(ПараметрыКоманды, АдресРезультата) Экспорт
	
	Результат = Новый Структура();
	
	СертификатыОрганизации = СертификатыОрганизации(ПараметрыКоманды.Организация);
	Результат.Вставить("ОтборСертификатов", СертификатыОрганизации);
	
	// Проверим необходимость подписания данных и аунтификацию
	ТекстОшибкиКлюча = "";
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "НеТребуетсяКлючСессии", Ложь) Тогда
		
		// Получим идентификатор соединения
		КлючСессииСУЗ = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "КлючСессииСУЗ", Ложь);
		ИдентификаторСоединения = "";
		Если КлючСессииСУЗ Тогда
			ПолучитьКлючСессииСУЗ(ПараметрыКоманды, Результат, ИдентификаторСоединения, ТекстОшибкиКлюча);
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстОшибкиКлюча)
			И НЕ ПолучитьЗначениеПараметраСтруктуры(Результат, "ПолученКлючСессии", Ложь) Тогда
			ПолученияКлючаСессии(ПараметрыКоманды, Результат, КлючСессииСУЗ, ИдентификаторСоединения);
			Если Результат.Свойство("ТекстОшибки") Тогда
				Если ПустаяСтрока(Результат.ТекстОшибки) Тогда
					ТекстОшибкиКлюча = НСтр("ru = 'Не удалось получить данные авторизации'");
				Иначе
					ТекстОшибкиКлюча = Результат.ТекстОшибки;
				КонецЕсли;
				Результат.ТекстОшибки = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Получить сообщение JSON из документа
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПараметрыКоманды.Документ);
	
	Попытка
		ПричинаОтказа = "";
		СтруктураСообщения = Менеджер.ЗапросДокумента(ПараметрыКоманды.Документ, ПараметрыКоманды, ПричинаОтказа);
		
		Если СтруктураСообщения = Неопределено Тогда
			Результат.Вставить("ТекстОшибки", ПричинаОтказа);
		Иначе
			СообщениеJSON = ДанныеВТекстJSON(СтруктураСообщения, Истина);
			Результат.Вставить("СообщениеJSON", СообщениеJSON);
		КонецЕсли;
		
	Исключение
		Результат.Вставить("ТекстОшибки", СтрШаблон(
			НСтр("ru = 'Ошибка при формировании запроса: %1'"),
			ОписаниеОшибки()));
	КонецПопытки;
	
	Если Результат.Свойство("ТекстОшибки") И ПустаяСтрока(Результат.ТекстОшибки) Тогда
		Результат.ТекстОшибки = ТекстОшибкиКлюча;
	КонецЕсли;
	
	// Помещаем результат во временное хранилище
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры // СформироватьЗапрос()

// Выполняет отправку команды и ее возвращение.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура ОтправитьЗапрос(ПараметрыКоманды, АдресРезультата) Экспорт
	
	ОтветЗапроса = Новый Структура("Успешно,Сообщение,ТекстОшибки", Ложь, "", "");
	
	// Получим параметры запроса для формирования
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
	
	// Получим ключ сессии
	КлючСессии = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "КлючСессии", "");
	ТребуетсяКлючСессии = НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "НеТребуетсяКлючСессии", Ложь);
	
	НовыйКлюч = Ложь;
	
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии Тогда
		
		ПодписьДанныхАутентификации = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыКоманды, "ПодписьДанныхАутентификации", "");
		Если ЗначениеЗаполнено(ПодписьДанныхАутентификации) Тогда
			ПолучениеКлюча = Новый Структура("КлючСессииПолучен,ТекстОшибки", Ложь, "");
			УстановитьПолученныйКлючСессии(
				ПараметрыКоманды.Организация,
				ПолучениеКлюча,
				ПараметрыЗапроса,
				ПараметрыКоманды,
				ПодписьДанныхАутентификации,
				ПараметрыКоманды.ИдентификаторСоединения);
			Если НЕ ПустаяСтрока(ПолучениеКлюча.ТекстОшибки) Тогда
				ОтветЗапроса.Вставить("ТекстОшибки", ПолучениеКлюча.ТекстОшибки);
				ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКлюча = ПолучитьСформироватьКлючСессии(
			ПараметрыКоманды.Организация,,
			ПараметрыКоманды.КлючСессииСУЗ,
			ПараметрыКоманды.ИдентификаторСоединения);
		
		Если НЕ ПустаяСтрока(СтруктураКлюча.ТекстОшибки) Тогда
			ОтветЗапроса.Вставить("ТекстОшибки", СтруктураКлюча.ТекстОшибки);
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
		
		НовыйКлюч = Истина;
		
	КонецЕсли;
	
	// Если ключ не получен, то дальнейшая отправка смысла не имеет
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии Тогда
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		Возврат;
	ИначеЕсли НовыйКлюч Тогда
		ОтветЗапроса.Вставить("КлючСессии", СтруктураКлюча);
	КонецЕсли;
	
	// Получить сообщение JSON из документа
	Если ТипЗнч(ПараметрыКоманды.Документ) = Тип("ДокументСсылка.ЗаказКодовМаркировки") Тогда
		ОтправкаЗапросаЗаказаМаркировки(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии, ОтветЗапроса);
	ИначеЕсли ТипЗнч(ПараметрыКоманды.Документ) = Тип("ДокументСсылка.ОтчетОНанесенииКодовМаркировки") Тогда
		ОтправитьЗапросОтчетаОНанесенииКодовМаркировки(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии, ОтветЗапроса);
	Иначе
		ОтправкаЗапросаСозданияДокумента(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии, ОтветЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
	
КонецПроцедуры // ОтправитьЗапрос()

// Получить ключ сесии.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура ПроверитьКлючСессии(ПараметрыКоманды, АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	
	СертификатыОрганизации = СертификатыОрганизации(ПараметрыКоманды.Организация);
	Результат.Вставить("ОтборСертификатов", СертификатыОрганизации);
	
	ПолученияКлючаСессии(ПараметрыКоманды, Результат);
	
	// Помещаем результат во временное хранилище
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры // ПолучениеКодыТоваровОстатков()

// Получить коды остатков товаров.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура ПолучениеКодыТоваровОстатков(ПараметрыКоманды, АдресРезультата) Экспорт
	
	Результат = Новый Структура("УспешныйПоиск,ТекстОшибки", Ложь, "");
	
	КлючСессии = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "КлючСессии", "");
	Если ПустаяСтрока(КлючСессии) Тогда
		ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
		ПодписьДанныхАутентификации = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыКоманды, "ПодписаниеДанных", "");
		Если ЗначениеЗаполнено(ПодписьДанныхАутентификации) Тогда
			ПолучениеКлюча = Новый Структура("КлючСессииПолучен,ТекстОшибки", Ложь, "");
			УстановитьПолученныйКлючСессии(
				ПараметрыКоманды.Организация,
				ПолучениеКлюча,
				ПараметрыЗапроса,
				ПараметрыКоманды,
				ПодписьДанныхАутентификации);
		КонецЕсли;
		
		СтруктураКлюча = ПолучитьСформироватьКлючСессии(ПараметрыКоманды.Организация);
		
		Если НЕ ПустаяСтрока(СтруктураКлюча.ТекстОшибки) Тогда
			Результат.Вставить("ТекстОшибки", СтруктураКлюча.ТекстОшибки);
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
		
		НовыйКлюч = Истина;
		
	КонецЕсли;
	
	// Если ключ не получен, то дальнейшая отправка смысла не имеет
	Если ПустаяСтрока(КлючСессии) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Получим объект документа
	ДокументЗаказа = ПараметрыКоманды.Документ.ПолучитьОбъект();
	
	// Получим товары документа
	НайденныеСтрокиБезGTIN = ДокументЗаказа.Товары.НайтиСтроки(Новый Структура("GTIN", ""));
	
	КоличествоСтрокБезГТИН = НайденныеСтрокиБезGTIN.Количество();
	
	// Параметры запроса
	НомерСтраницы = 0;
	ИННОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыКоманды.Организация, "ИНН");
	
	Пока КоличествоСтрокБезГТИН > 0 Цикл
		
		СчитанныеДанные =
			НайтиТоварыПоИНН(ПараметрыКоманды.Организация, ИННОрганизации, НомерСтраницы, КлючСессии);
		НомерСтраницы = НомерСтраницы + 1;
		
		Если НЕ ПустаяСтрока(СчитанныеДанные.ТекстОшибки) Тогда
			Результат.ТекстОшибки = СчитанныеДанные.ТекстОшибки;
			Прервать;
		КонецЕсли;
		
		Если СчитанныеДанные.Данные.Количество() = 0 Тогда
			// Обошли весь каталог
			Прервать;
		КонецЕсли;
		
		// Проверяем и устанавливаем GTIN
		Для Каждого ТекущаяСтрока Из СчитанныеДанные.Данные Цикл
			СтруктураПоиска = СтруктураПоискаПоОстаткам(ДокументЗаказа, ТекущаяСтрока);
			НайденныеСтроки = ДокументЗаказа.Товары.НайтиСтроки(СтруктураПоиска);
			
			// Заполним Строки без GTIN
			Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
				Если НЕ ПустаяСтрока(СтрокаТовара.GTIN) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТовара.GTIN = ТекущаяСтрока.Ключ;
				КоличествоСтрокБезГТИН = КоличествоСтрокБезГТИН - 1;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Зафиксируем изменения
	ДокументЗаказа.ОписаниеОшибки = Результат.ТекстОшибки;
	
	Если ЗначениеЗаполнено(ДокументЗаказа.ОписаниеОшибки) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение GTIN из Честного знака.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			ДокументЗаказа.Ссылка,
			СтрШаблон(
			НСтр("ru = 'При получении GTIN возникла ошибка: %1'"),
				ДокументЗаказа.ОписаниеОшибки));
	КонецЕсли;
	
	// Статус заказа
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("GTIN", "");
	
	НайденныеСтроки = ДокументЗаказа.Товары.НайтиСтроки(СтруктураПоиска);
	КоличествоТоваров = ДокументЗаказа.Товары.Количество();
	
	Если НайденныеСтроки.Количество() <> ДокументЗаказа.Товары.Количество() 
		И КоличествоТоваров <> 0 Тогда
		Если НайденныеСтроки.Количество() = 0 Тогда
			ДокументЗаказа.Статус = Перечисления.СтатусыДокументовМаркировки.ПолностьюЗаполненGTIN;
		Иначе
			ДокументЗаказа.Статус = Перечисления.СтатусыДокументовМаркировки.ЧастичноЗаполненGTIN;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ДокументЗаказа.Записать();
		Результат.УспешныйПоиск = Истина;
	Исключение
		Результат.ТекстОшибки = 
			СтрШаблон(
			НСтр("ru = 'При записи GTIN в документ возникла ошибка: %1'"),
			ОписаниеОшибки());
	КонецПопытки;
	
	// Помещаем результат во временное хранилище
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры // ПолучениеКодыТоваровОстатков()

// Запрос загрузки кодов маркировки.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура ЗапросЗагрузкиКодовМаркировки(ПараметрыКоманды, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтветЗапроса = Новый Структура("Успешно,Сообщение", Ложь, "");
	
	СертификатыОрганизации = СертификатыОрганизации(ПараметрыКоманды.Организация);
	ОтветЗапроса.Вставить("ОтборСертификатов", СертификатыОрганизации);
	
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
	
	// Получим ключ сессии
	КлючСессии = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "КлючСессии", "");
	
	Если НЕ ПолученКлючСессииСУЗ(КлючСессии, ПараметрыКоманды, ПараметрыЗапроса, ОтветЗапроса, АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	ОтветЗапроса.Вставить("ТекстОшибки", "");
	
	// Таблица полученных кодов маркировки
	ТаблицаКодовМаркировки = Новый ТаблицаЗначений();
	ТаблицаКодовМаркировки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКодовМаркировки.Колонки.Добавить(
		"ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаКодовМаркировки.Колонки.Добавить("КодМаркировки", Новый ОписаниеТипов("Строка"));
	
	НаборКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборКодовМаркировки.Отбор.ДокументОснование.Установить(ПараметрыКоманды.Документ);
	НаборКодовМаркировки.Прочитать();
	
	// Получим ранее считанные коды маркировки
	ТекущиеКодыМаркировки = НаборКодовМаркировки.Выгрузить();
	
	ДокументОбъект = ПараметрыКоманды.Документ.ПолучитьОбъект();
	
	ДатаЗаписи = ТекущаяДатаСеанса();
	
	ПараметрыЗапроса.Вставить("Токен", КлючСессии);
	
	ТоварнаяГруппа = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыКоманды,
		"ТоварнаяГруппа",
		ДокументОбъект.ТоварнаяГруппа.ТоварнаяГруппа);
	
	Если Не ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		
		ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПараметрыКоманды.Документ, "ТоварнаяГруппа.ТоварнаяГруппа",
			ТоварнаяГруппа);
		
	КонецЕсли;
	
	ВидЭмиссии = ?(
		МаркировкаТоваровКлиентСервер.ТоварнаяГруппаИспользуетОтчетОНанесении(ТоварнаяГруппа),
		Перечисления.СостоянияКодовМаркировки.ЭмитированВыпущен,
		Перечисления.СостоянияКодовМаркировки.Эмитирован);
	
	// Для каждой строки товара получим коды маркировки из ЧЗ
	СтруктураПоиска = Новый Структура("GTIN");
	ПолученыВсеКоды = Истина;
	Для Каждого ТекущаяСтрока Из ДокументОбъект.Товары Цикл
		
		// Если уже есть в регистре коды маркировки, то получать не будем
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		НайденныеСтроки = ТекущиеКодыМаркировки.НайтиСтроки(СтруктураПоиска);
		
		СчитанноеКоличество = НайденныеСтроки.Количество();
		
		Если СчитанноеКоличество >= ТекущаяСтрока.Количество Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоЗаказа = ТекущаяСтрока.Количество - СчитанноеКоличество;
		
		ПолученныеКоды = КодыМаркировкиПоGTIN(
			ДокументОбъект.ИдентификаторЗаказа,
			ТекущаяСтрока.GTIN,
			КоличествоЗаказа,
			СчитанноеКоличество,
			ПараметрыЗапроса,
			ПараметрыКоманды);
			
		Если НЕ ПустаяСтрока(ПолученныеКоды.ТекстОшибки) Тогда
			
			ПолученыВсеКоды = Ложь;
			ОтветЗапроса.ТекстОшибки = ?(ПустаяСтрока(ПолученныеКоды.ТекстОшибки),
				НСтр("ru = 'Ошибка при получении кодов маркировки'"),
				ПолученныеКоды.ТекстОшибки);
			Прервать;
			
		КонецЕсли;
		
		Если ПолученныеКоды.Данные = Неопределено Тогда
			ПолученыВсеКоды = Ложь;
			Продолжить;
		КонецЕсли;
		
		// Дополним коды маркировки
		Для Каждого КодМаркировки Из ПолученныеКоды.Данные.КодыМаркировки Цикл
			НоваяСтрока = ТекущиеКодыМаркировки.Добавить();
			НоваяСтрока.Период = ДатаЗаписи;
			НоваяСтрока.ДокументОснование = ПараметрыКоманды.Документ;
			НоваяСтрока.Организация = ПараметрыКоманды.Организация;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(КодМаркировки, "");
			НоваяСтрока.Состояние = ВидЭмиссии;
			
			// Разложим код маркировки на составляющие
			СтруктураМаркировки = МенеджерОборудованияМаркировкаКлиентСервер
					.РазобратьШтриховойКодТовара(КодМаркировки);
			МаркировкаТоваровСервер.ЗаписатьПолныйШтрихкод(СтруктураМаркировки);
			
			НоваяСтрока.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
			
			НоваяСтрока = ТаблицаКодовМаркировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.КодМаркировки = СтрЗаменить(
				КодМаркировки, 
				ОбщегоНазначенияБПОКлиентСервер.РазделительGS1(),
				ОбщегоНазначенияБПОКлиентСервер.ЭкранированныйСимволGS1());
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Запишим полученные коды
	НаборКодовМаркировки.Загрузить(ТекущиеКодыМаркировки);
	НаборКодовМаркировки.Записать();
	
	// Заполним регистр для печати кодов маркировки
	Если ТаблицаКодовМаркировки.Количество() > 0 Тогда
		МаркировкаТоваровСервер.ДобавитьЗаписиВРегистр(ПараметрыКоманды.Документ, ТаблицаКодовМаркировки);
	КонецЕсли;
	
	// Если коды все получены, то поменем статус документа на Выполнен
	Если ПолученыВсеКоды Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыДокументовМаркировки.Выполнен;
		ДокументОбъект.ОписаниеОшибки = "";
		
		ОтветЗапроса.Успешно = Истина;
		ОтветЗапроса.Сообщение = НСтр("ru = 'Успешно получены коды маркировки'");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение кодов маркировки из Честного знака.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,,
			ДокументОбъект.Ссылка,
			НСтр("ru = 'Получены коды маркировки по заказу'"));
		
	ИначеЕсли ЗначениеЗаполнено(ОтветЗапроса.ТекстОшибки) Тогда
		
		ДокументОбъект.ОписаниеОшибки = ОтветЗапроса.ТекстОшибки;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение кодов маркировки из Честного знака.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			ДокументОбъект.Ссылка,
			СтрШаблон(
			НСтр("ru = 'При получении кодов маркировки возникла ошибка: %1'"),
				ДокументОбъект.ОписаниеОшибки));
		
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать();
	
	ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
	
КонецПроцедуры // ЗапросЗагрузкиКодовМаркировки()

// Запрос загрузки кодов маркировки.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура ЗапросСтатусовКодовМаркировки(ПараметрыКоманды, АдресРезультата) Экспорт
	
	ОтветЗапроса = Новый Структура("Успешно,Сообщение,Данные", Ложь, "", Неопределено);
	
	СертификатыОрганизации = СертификатыОрганизации(ПараметрыКоманды.Организация);
	ОтветЗапроса.Вставить("ОтборСертификатов", СертификатыОрганизации);
	
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
	
	// Получим ключ сессии
	КлючСессии = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "КлючСессии", "");
	ТребуетсяКлючСессии = НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "НеТребуетсяКлючСессии", Ложь);
	
	НовыйКлюч = Ложь;
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда
		СтруктураКлюча = ТекущийКодСессииОрганизации(ПараметрыКоманды.Организация);
		Если СтруктураКлюча = Неопределено Тогда
			ПолученияКлючаСессии(ПараметрыКоманды, ОтветЗапроса);
			Если ОтветЗапроса.Свойство("КлючСессии") Тогда
				КлючСессии = ОтветЗапроса.КлючСессии;
				ОтветЗапроса.Удалить("КлючСессии");
			КонецЕсли;
			СтруктураКлюча = ТекущийКодСессииОрганизации(ПараметрыКоманды.Организация);
			Если СтруктураКлюча <> Неопределено Тогда
				НовыйКлюч = Истина;
			КонецЕсли;
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтветЗапроса.Свойство("ТекстОшибки") Тогда
		Если ПустаяСтрока(ОтветЗапроса.ТекстОшибки) Тогда
			ОтветЗапроса.ТекстОшибки = НСтр("ru = 'Не удалось получить данные авторизации'");
		КонецЕсли;
		// вываливаемся
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии И ПараметрыКоманды.Свойство("ПодписьДанныхАутентификации") Тогда
		
		ПодписьДанныхАутентификации = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыКоманды, "ПодписьДанныхАутентификации", "");
		Если ЗначениеЗаполнено(ПодписьДанныхАутентификации) Тогда
			ПолучениеКлюча = Новый Структура("КлючСессииПолучен,ТекстОшибки", Ложь, "");
			УстановитьПолученныйКлючСессии(
				ПараметрыКоманды.Организация,
				ПолучениеКлюча,
				ПараметрыЗапроса,
				ПараметрыКоманды,
				ПодписьДанныхАутентификации);
			Если НЕ ПустаяСтрока(ПолучениеКлюча.ТекстОшибки) Тогда
				ОтветЗапроса.Вставить("ТекстОшибки", ПолучениеКлюча.ТекстОшибки);
				ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКлюча = ПолучитьСформироватьКлючСессии(ПараметрыКоманды.Организация);
		
		Если НЕ ПустаяСтрока(СтруктураКлюча.ТекстОшибки) Тогда
			ОтветЗапроса.Вставить("ТекстОшибки", СтруктураКлюча.ТекстОшибки);
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
		
		НовыйКлюч = Истина;
		
	КонецЕсли;
	
	// Если ключ не получен, то дальнейшая отправка смысла не имеет
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии Тогда
		ОтветЗапроса.Удалить("ТекстОшибки");
		ОтветЗапроса.Успешно = Истина;
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		Возврат;
	ИначеЕсли НовыйКлюч Тогда
		ОтветЗапроса.Вставить("КлючСессии", СтруктураКлюча);
	КонецЕсли;
	
	КодыМаркировки = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыКоманды.КодыМаркировки);
	
	// Подготовим данные для выполнения запроса
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	
	Для Индекс = 0 По КодыМаркировки.Количество() - 1 Цикл
		КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(КодыМаркировки[Индекс], , Ложь);
		КодыМаркировки[Индекс] = КодироватьСтроку(КодМаркировки, СпособКодированияСтроки.КодировкаURL);
	КонецЦикла;
	
	URLЗапроса = СтрШаблон("api/v3/true-api/cises/list?values=%1", СтрСоединить(КодыМаркировки, "&values="));
	ДанныеЗапроса = Неопределено;
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		URLЗапроса,
		ДанныеЗапроса,
		ПараметрыЗапроса,
		"POST",
		Неопределено,
		ЗаголовокHTTP
	);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета, Истина);
		
		Если ДанныеОбработки = Неопределено Тогда
			
			ОтветЗапроса.Вставить("ТекстОшибки", 
				СтрШаблон(НСтр("ru = 'Ошибка в результате отправки запроса состояния кодов маркировки: %1'"),
				РезультатОтправки.СообщениеОтвета)
			);
			
		Иначе
			
			Данные = Новый Структура;
			Данные.Вставить(
				"КодыМаркировки",
				ПодготовитьКодыМаркировки(
					ДанныеОбработки,
					ПараметрыКоманды));
			
			ОтветЗапроса.Данные = Данные;
			ОтветЗапроса.Успешно = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка в результате получения состояния кодов маркировки'",
				ОбщегоНазначения.КодОсновногоЯзыка()
			),
			УровеньЖурналаРегистрации.Ошибка,
			, ,
			НСтр("ru = 'Ошибка в результате получения состояния кодов маркировки:'")
				+ Символы.ПС
				+ ?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки)
		);
		
		ОтветЗапроса.Вставить("ТекстОшибки",
			НСтр("ru = 'Ошибка в результате получения состояния кодов маркировки: подробности в Журнале регистрации'")
		);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
	
КонецПроцедуры // ЗапросСтатусовКодовМаркировки()

// Запрос загрузки кодов маркировки.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура ЗапросСверкиКодовМаркировки(ПараметрыКоманды, АдресРезультата) Экспорт
	
	ОтветЗапроса = Новый Структура("Успешно,Сообщение,Данные", Ложь, "", Неопределено);
	
	СертификатыОрганизации = СертификатыОрганизации(ПараметрыКоманды.Организация);
	ОтветЗапроса.Вставить("ОтборСертификатов", СертификатыОрганизации);
	
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
	
	// Получим ключ сессии
	КлючСессии = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "КлючСессии", "");
	ТребуетсяКлючСессии = НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "НеТребуетсяКлючСессии", Ложь);
	
	НовыйКлюч = Ложь;
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда
		СтруктураКлюча = ТекущийКодСессииОрганизации(ПараметрыКоманды.Организация);
		Если СтруктураКлюча = Неопределено Тогда
			ПолученияКлючаСессии(ПараметрыКоманды, ОтветЗапроса);
			Если ОтветЗапроса.Свойство("КлючСессии") Тогда
				КлючСессии = ОтветЗапроса.КлючСессии;
				ОтветЗапроса.Удалить("КлючСессии");
			КонецЕсли;
			СтруктураКлюча = ТекущийКодСессииОрганизации(ПараметрыКоманды.Организация);
			Если СтруктураКлюча <> Неопределено Тогда
				НовыйКлюч = Истина;
			КонецЕсли;
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтветЗапроса.Свойство("ТекстОшибки") Тогда
		Если ПустаяСтрока(ОтветЗапроса.ТекстОшибки) Тогда
			ОтветЗапроса.ТекстОшибки = НСтр("ru = 'Не удалось получить данные авторизации'");
		КонецЕсли;
		// вываливаемся
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии И ПараметрыКоманды.Свойство("ПодписьДанныхАутентификации") Тогда
		
		ПодписьДанныхАутентификации = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыКоманды, "ПодписьДанныхАутентификации", "");
		Если ЗначениеЗаполнено(ПодписьДанныхАутентификации) Тогда
			ПолучениеКлюча = Новый Структура("КлючСессииПолучен,ТекстОшибки", Ложь, "");
			УстановитьПолученныйКлючСессии(
				ПараметрыКоманды.Организация,
				ПолучениеКлюча,
				ПараметрыЗапроса,
				ПараметрыКоманды,
				ПодписьДанныхАутентификации);
			Если НЕ ПустаяСтрока(ПолучениеКлюча.ТекстОшибки) Тогда
				ОтветЗапроса.Вставить("ТекстОшибки", ПолучениеКлюча.ТекстОшибки);
				ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКлюча = ПолучитьСформироватьКлючСессии(ПараметрыКоманды.Организация);
		
		Если НЕ ПустаяСтрока(СтруктураКлюча.ТекстОшибки) Тогда
			ОтветЗапроса.Вставить("ТекстОшибки", СтруктураКлюча.ТекстОшибки);
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
		
		НовыйКлюч = Истина;
		
	КонецЕсли;
	
	// Если ключ не получен, то дальнейшая отправка смысла не имеет
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии Тогда
		ОтветЗапроса.Удалить("ТекстОшибки");
		ОтветЗапроса.Успешно = Истина;
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		Возврат;
	ИначеЕсли НовыйКлюч Тогда
		ОтветЗапроса.Вставить("КлючСессии", СтруктураКлюча);
	КонецЕсли;
	
	// Подготовим данные для выполнения запроса
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
	
	ОтправитьЗапросНаПолучениеСведенийПоФильтру(ПараметрыКоманды, ПараметрыЗапроса, ОтветЗапроса, КлючСессии);
	ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
	
КонецПроцедуры // ЗапросСверкиКодовМаркировки()

// Запрос получения статуса участника системы маркировки по ИНН.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура ЗапросСтатусаУчастниковПоИНН(ПараметрыКоманды, АдресРезультата) Экспорт
	
	ОтветЗапроса = Новый Структура("Успешно,Сообщение", Ложь, Новый Массив, "");
	
	// Получим список ИНН
	СписокУчастников = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "СписокИНН", Новый Соответствие);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "ЗаполнятьИНН", Ложь) Тогда
		
		ЗаполнитьИННУчастниковГИСМТ(СписокУчастников);
		ОтветЗапроса.Вставить("ЗаполнятьИНН", Ложь);
		
	КонецЕсли;
	
	// Избавимся от пустых ИНН контрагентов и дублей
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "ПроверитьЗаполнениеИНН", Истина) Тогда
		
		ПроверитьЗаполнениеИННУчастников(СписокУчастников, ОтветЗапроса);
		ОтветЗапроса.Вставить("ПроверитьЗаполнениеИНН", Ложь);
		
	КонецЕсли;
	
	Если СписокУчастников.Количество() = 0 Тогда
		
		ОтветЗапроса.Вставить(
			"ТекстОшибки",
			НСтр("ru = 'Список участников проверки статусов в ГИС МТ пустой. Операция отменена.'"));
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		ОтветЗапроса.Успешно = Истина;
		Возврат;
		
	КонецЕсли;
	
	ОтветЗапроса.Вставить("СписокИНН", СписокУчастников);
	
	
	СертификатыОрганизации = СертификатыОрганизации(ПараметрыКоманды.Организация);
	ОтветЗапроса.Вставить("ОтборСертификатов", СертификатыОрганизации);
	
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
	
	// Получим ключ сессии
	КлючСессии = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "КлючСессии", "");
	
	Если НЕ ПроверкаКлючаСессии(КлючСессии, ОтветЗапроса, ПараметрыЗапроса, ПараметрыКоманды, АдресРезультата, Истина) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ШаблонСообщенияОбОшибке =
		НСтр("ru = 'Для контрагента %1 не получены данные данные о статусе в ГИС МТ. Подробности в журнале регистрации.'");
	
	СтрокаОшибки = "Organisation with inn = %1 was not found";
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	
	Данные = Новый Структура("СтатусУчастникаГИСМТ,ДатаПолученияСтатусаГИСМТ");
	
	Для Каждого ТекущийКонтрагент Из СписокУчастников Цикл
		
		РезультатОбОтсутсвии = СтрШаблон(СтрокаОшибки, ТекущийКонтрагент.Значение);
		
		ТекстМетода = "api/v3/true-api/participants?inns=%1";
		
		URLЗапроса = СтрШаблон(ТекстМетода, ТекущийКонтрагент.Значение);
		
		РезультатЗапроса = ОтправитьЗапросВСервис(
			URLЗапроса,
			Неопределено,
			ПараметрыЗапроса,
			"GET",
			Неопределено,
			ЗаголовокHTTP
		);
		
		РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
		НеНайденИНН = СтрНайти(РезультатОтправки.СообщениеОтвета, РезультатОбОтсутсвии) > 0;
		
		Если РезультатОтправки.КодСостояния = 200 ИЛИ НеНайденИНН Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка в результате получения статуса УОТ ГИС МТ'",
						ОбщегоНазначения.КодОсновногоЯзыка()
					),
					УровеньЖурналаРегистрации.Ошибка,,
					ТекущийКонтрагент.Ключ,
					НСтр("ru = 'Ошибка в результате получения статуса участника ГИС МТ:'")
						+ Символы.ПС
						+ ?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки));
				
				ОтветЗапроса.Сообщение.Добавить(СтрШаблон(ШаблонСообщенияОбОшибке, ТекущийКонтрагент.Ключ));
				Продолжить;
				
			КонецЕсли;
			
			Если ТипЗнч(ДанныеОбработки) = Тип("Массив") Тогда
				ДанныеОбработки = ДанныеОбработки[0];
			КонецЕсли;
			
			Данные.СтатусУчастникаГИСМТ = ?(
				НеНайденИНН,
				Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.НеЗарегистрирован,
				ПолучитьСтатусУчастникаГИСМТ(ДанныеОбработки.Получить("status")));
			Данные.ДатаПолученияСтатусаГИСМТ = ТекущаяДатаСеанса();
			
			ОбновитьСтатусКонтрагента(ТекущийКонтрагент.Ключ, Данные, ОтветЗапроса.Сообщение);
			
		Иначе
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка в результате получения статуса УОТ ГИС МТ'",
					ОбщегоНазначения.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Ошибка,,
				ТекущийКонтрагент.Ключ,
				НСтр("ru = 'Ошибка в результате получения статуса участника ГИС МТ:'")
					+ Символы.ПС
					+ ?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки));
			
			ОтветЗапроса.Сообщение.Добавить(СтрШаблон(ШаблонСообщенияОбОшибке, ТекущийКонтрагент.Ключ));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтветЗапроса.Успешно = Истина;
	
	ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
	
КонецПроцедуры

// Запрос загрузки кодов маркировки.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура ЗапросСтатусаДокумента(ПараметрыКоманды, АдресРезультата) Экспорт
	
	ОтветЗапроса = Новый Структура("Успешно,Сообщение,Данные", Ложь, "", Неопределено);
	
	СертификатыОрганизации = СертификатыОрганизации(ПараметрыКоманды.Организация);
	ОтветЗапроса.Вставить("ОтборСертификатов", СертификатыОрганизации);
	
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
	
	// Получим ключ сессии
	КлючСессии = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "КлючСессии", "");
	ТребуетсяКлючСессии = НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "НеТребуетсяКлючСессии", Ложь);
	
	НовыйКлюч = Ложь;
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда
		СтруктураКлюча = ТекущийКодСессииОрганизации(ПараметрыКоманды.Организация);
		Если СтруктураКлюча = Неопределено Тогда
			ПолученияКлючаСессии(ПараметрыКоманды, ОтветЗапроса);
			Если ОтветЗапроса.Свойство("КлючСессии") Тогда
				КлючСессии = ОтветЗапроса.КлючСессии;
				ОтветЗапроса.Удалить("КлючСессии");
			КонецЕсли;
			СтруктураКлюча = ТекущийКодСессииОрганизации(ПараметрыКоманды.Организация);
			Если СтруктураКлюча <> Неопределено Тогда
				НовыйКлюч = Истина;
			КонецЕсли;
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтветЗапроса.Свойство("ТекстОшибки") Тогда
		Если ПустаяСтрока(ОтветЗапроса.ТекстОшибки) Тогда
			ОтветЗапроса.ТекстОшибки = НСтр("ru = 'Не удалось получить данные авторизации'");
		КонецЕсли;
		// вываливаемся
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии И ПараметрыКоманды.Свойство("ПодписьДанныхАутентификации") Тогда
		
		ПодписьДанныхАутентификации = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыКоманды, "ПодписьДанныхАутентификации", "");
		Если ЗначениеЗаполнено(ПодписьДанныхАутентификации) Тогда
			ПолучениеКлюча = Новый Структура("КлючСессииПолучен,ТекстОшибки", Ложь, "");
			УстановитьПолученныйКлючСессии(
				ПараметрыКоманды.Организация,
				ПолучениеКлюча,
				ПараметрыЗапроса,
				ПараметрыКоманды,
				ПодписьДанныхАутентификации);
			Если НЕ ПустаяСтрока(ПолучениеКлюча.ТекстОшибки) Тогда
				ОтветЗапроса.Вставить("ТекстОшибки", ПолучениеКлюча.ТекстОшибки);
				ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКлюча = ПолучитьСформироватьКлючСессии(ПараметрыКоманды.Организация);
		
		Если НЕ ПустаяСтрока(СтруктураКлюча.ТекстОшибки) Тогда
			ОтветЗапроса.Вставить("ТекстОшибки", СтруктураКлюча.ТекстОшибки);
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
		
		НовыйКлюч = Истина;
		
	КонецЕсли;
	
	// Если ключ не получен, то дальнейшая отправка смысла не имеет
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии Тогда
		ОтветЗапроса.Удалить("ТекстОшибки");
		ОтветЗапроса.Успешно = Истина;
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		Возврат;
	ИначеЕсли НовыйКлюч Тогда
		ОтветЗапроса.Вставить("КлючСессии", СтруктураКлюча);
	КонецЕсли;
	
	Если ПараметрыКоманды.Свойство("Документы") Тогда
		
		Для Каждого ДокументСтатуса Из ПараметрыКоманды.Документы Цикл
			
			Если Не ЗначениеЗаполнено(ДокументСтатуса.Значение)
				ИЛИ ДокументСтатуса.Значение = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
				
				// Получим из регистра идентификатор
				Запись = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(ДокументСтатуса.Ключ);
				ИдентификаторДокумента = Запись.ИдентификаторДокумента;
				
				Если ИдентификаторДокумента = "" Тогда
					ДанныеДокумента = Новый Структура("ТекстОшибки,Обработан,Статус", "", Истина, "");
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				ИдентификаторДокумента = ДокументСтатуса.Значение;
				
			КонецЕсли;
			
			ДанныеДокумента = ЗапросПолученияСодержимогоДокумента(
				ПараметрыКоманды,
				ПараметрыЗапроса,
				КлючСессии,
				ИдентификаторДокумента
			);
			РегистрыСведений.СтатусыДокументовМаркировки.ЗаписатьСтатусДокумента(
				ДокументСтатуса.Ключ,
				ИдентификаторДокумента,
				ДанныеДокумента.Статус,
				ДанныеДокумента.ТекстОшибки
			);
			
		КонецЦикла;
		
	Иначе
		
		ДанныеДокумента = ЗапросПолученияСодержимогоДокумента(
			ПараметрыКоманды,
			ПараметрыЗапроса,
			КлючСессии,
			ПараметрыКоманды.ИдентификаторДокумента
		);
		РегистрыСведений.СтатусыДокументовМаркировки.ЗаписатьСтатусДокумента(
			ПараметрыКоманды.Документ,
			ПараметрыКоманды.ИдентификаторДокумента,
			ДанныеДокумента.Статус,
			ДанныеДокумента.ТекстОшибки
		);
		
	КонецЕсли;
	
	ОтветЗапроса.Успешно = Истина;
	ОтветЗапроса.Вставить("Данные", ДанныеДокумента);
	
	ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
	
КонецПроцедуры

// Запрос проверки соединения к станции управления заказами.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура ЗапросПроверкиСоединенияСУЗ(ПараметрыКоманды, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтветЗапроса = Новый Структура("Успешно,Сообщение", Ложь, "");
	
	СертификатыОрганизации = СертификатыОрганизации(ПараметрыКоманды.Организация);
	ОтветЗапроса.Вставить("ОтборСертификатов", СертификатыОрганизации);
	
	ИменаРеквизитов = "Адрес,
		|ВерсияФорматаОбмена,
		|Порт,
		|ВремяОжидания,
		|ЗащищенноеСоединение,
		|СписокУстройств,
		|Сертификат,
		|ИдентификаторСУЗ,
		|АдресСУЗ,
		|ПортСУЗ";
	ПараметрыЗапроса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыКоманды.НастройкаСУЗ, ИменаРеквизитов);
	ПараметрыЗапроса.Вставить("АдресКонтура", ПараметрыЗапроса.АдресСУЗ);
	ПараметрыЗапроса.Вставить("Порт", ПараметрыЗапроса.ПортСУЗ);
	ПараметрыЗапроса.Вставить("omsId", ПараметрыЗапроса.ИдентификаторСУЗ);
	ПараметрыЗапроса.Вставить("СписокУстройств", ПараметрыЗапроса.СписокУстройств.Выгрузить());
	ПараметрыЗапроса.Вставить(
		"ВерсияФорматаОбмена",
		Перечисления.ВерсииФорматовОбменаЧестногоЗнака.ЗначениеВерсииФормата(ПараметрыЗапроса.ВерсияФорматаОбмена));
	ПодразделениеНастройки = Неопределено;
	
	Если ПараметрыЗапроса.СписокУстройств.Количество() > 0 Тогда
		ПодразделениеНастройки = Новый Структура(
			"ПодразделениеКомпании",
			ПараметрыЗапроса.СписокУстройств[0].ПодразделениеКомпании);
	КонецЕсли;
	ПараметрыКоманды.Вставить("Документ", ПодразделениеНастройки);
	
	// Получим ключ сессии
	КлючСессии = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "КлючСессии", "");
	ПараметрыКоманды.Вставить("ФормироватьНовыйКлючСессии", Истина);
	
	Если НЕ ПолученКлючСессииСУЗ(КлючСессии, ПараметрыКоманды, ПараметрыЗапроса, ОтветЗапроса, АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	ОтветЗапроса.Вставить("ПроверкаПодключенияПройдена", Ложь);
	ПараметрыЗапроса.Вставить("Токен", КлючСессии);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",       "application/json");
	ЗаголовокHTTP.Вставить("clientToken",  КлючСессии);
	
	ТекстМетода = "api/v2/tires/ping?omsId=%1";
	URLЗапроса = СтрШаблон(ТекстМетода, ПараметрыЗапроса.omsId);
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		URLЗапроса,
		Неопределено,
		ПараметрыЗапроса,
		"GET",
		Неопределено,
		ЗаголовокHTTP
	);
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		ДанныеРезультатаЗапроса = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета);
		
		Если ДанныеРезультатаЗапроса = Неопределено Тогда
			
			ОтветЗапроса.Вставить("Сообщение",
				НСтр("ru = 'Ошибка при проверке подключения к СУЗ. Проверьте корректность настроек.
					|Подробности в журнале регистрации.'"));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при проверке подключения к станции управления заказами'",
					ОбщегоНазначения.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Ошибка,,
				ПараметрыКоманды.НастройкаСУЗ,
				НСтр("ru = 'Ошибка при проверке подключения к станции управления заказами:'")
					+ Символы.ПС
					+ РезультатОтправки.СообщениеОтвета);
			
		Иначе
			
			ОтветЗапроса.ПроверкаПодключенияПройдена = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при проверке подключения к станции управления заказами'",
				ОбщегоНазначения.КодОсновногоЯзыка()
			),
			УровеньЖурналаРегистрации.Ошибка,,
			ПараметрыКоманды.НастройкаСУЗ,
			НСтр("ru = 'Ошибка при проверке подключения к станции управления заказами:'")
				+ Символы.ПС
				+ ?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки));
		
		ОтветЗапроса.Сообщение = НСтр("ru = 'При проверке соединения СУЗ возникла ошибка. Подробности в журнале регистрации.'");
		
	КонецЕсли;
	
	ОтветЗапроса.Успешно = Истина;
	
	Если ОтветЗапроса.Свойство("ТекстОшибки") И ПустаяСтрока(ОтветЗапроса.ТекстОшибки) Тогда
		ОтветЗапроса.Удалить("ТекстОшибки");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет обновление статусов документов маркировки
//
// Параметры: 
//  СтруктураПараметров - Структура - структура параметров
//
Процедура ОбновлениеСтатусовУчастниковГИСМТ(Знач СтруктураПараметров = Неопределено) Экспорт
	
	// Проверим, что есть чем подписать данные авторизации
	Организация = ПолучитьЗначениеПараметраСтруктуры(СтруктураПараметров, "Организация", Неопределено);
	СрокОбновления = ПолучитьЗначениеПараметраСтруктуры(СтруктураПараметров, "СрокОбновления", 0);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Регламентное задание ""Обновление статусов участников ГИС МТ""'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,,,
			НСтр("ru = 'Не указана в параметрах задания организация с настройками обмена с Честным знаком.'"));
		Возврат;
		
	КонецЕсли;
	
	// Получим ключ сессии
	СтруктураКлючаСессии = КлючСессии(Организация);
	ТекстОшибки = ПолучитьЗначениеПараметраСтруктуры(СтруктураКлючаСессии, "ТекстОшибки");
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Регламентное задание ""Обновление статусов участников ГИС МТ""'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(НСтр("ru = 'Ошибка при получении ключа сессии: %1'"), ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Регламентное задание ""Обновление статусов участников ГИС МТ""'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,,,
		НСтр("ru = 'Начало обновления статусов участников ГИС МТ'"));
	
	Порция = 1000;
	ВыборкаЗапроса = СписокПроверкиСтатусовУчастников(СрокОбновления);
	СписокИНН = Новый Соответствие;
	
	Пока Истина Цикл
		
		СписокИНН.Очистить();
		
		// Получим список ИНН для проверки
		Пока СписокИНН.Количество() < Порция И ВыборкаЗапроса.Следующий() Цикл
			
			СписокИНН.Вставить(ВыборкаЗапроса.Контрагент, ВыборкаЗапроса.ИНН);
			
		КонецЦикла;
		
		// Всех контрагентов обработали
		Если СписокИНН.Количество() = 0 Тогда
			
			Прервать;
			
		КонецЕсли;
		
		ОтправитьЗапросОбноваленияСтатусовУчастника(СписокИНН, СтруктураКлючаСессии, Организация);
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Регламентное задание ""Обновление статусов участников ГИС МТ""'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,,,
		НСтр("ru = 'Завершено обновление статусов участников ГИС МТ'"));
	
КонецПроцедуры // ОбновлениеСтатусовУчастниковГИСМТ()

// Выполняет обновление статусов документов маркировки
//
Процедура ОбновлениеСтатусовДокументовМаркировкиОжидаетОбработки() Экспорт
	
	ДокументыКОбновлению = РегистрыСведений.СтатусыДокументовМаркировки.ДокументыКОбновлению();
	Для Каждого Строка Из ДокументыКОбновлению.Строки Цикл
		
		// Получим ключ сессии
		СтруктураКлючаСессии = КлючСессии(Строка.Организация);
		ТекстОшибки = ПолучитьЗначениеПараметраСтруктуры(СтруктураКлючаСессии, "ТекстОшибки");
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Регламентное задание ""Обновление статусов документов маркировки""'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				СтрШаблон(НСтр("ru = 'Ошибка при получении ключа сессии для организации %1: %2'"), Строка.Организация, ТекстОшибки)
			);
			Продолжить;
			
		КонецЕсли;
		
		ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(Строка.Организация);
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("Действие", "ПолучениеСтатусаДокумента");
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Регламентное задание ""Обновление статусов документов маркировки""'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			, ,
			НСтр("ru = 'Начало обновления статусов документов маркировки'")
			);
		
		Для Каждого СтрокаДокумента Из Строка.Строки Цикл
			
			ДанныеДокумента = ЗапросПолученияСодержимогоДокумента(
				ПараметрыКоманды,
				ПараметрыЗапроса,
				СтруктураКлючаСессии.КлючСессии.Ключ,
				СтрокаДокумента.ИдентификаторДокумента
			);
			РегистрыСведений.СтатусыДокументовМаркировки.ЗаписатьСтатусДокумента(
				СтрокаДокумента.Документ,
				СтрокаДокумента.ИдентификаторДокумента,
				ДанныеДокумента.Статус,
				ДанныеДокумента.ТекстОшибки
			);
			
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Регламентное задание ""Обновление статусов документов маркировки""'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			, ,
			НСтр("ru = 'Завершено обновление статусов документов маркировки'")
		);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обновление статусов документов маркировки
//
Процедура ОбновлениеСтатусовДокументовМаркировкиОжидаетРегистрации() Экспорт
	
	ДокументыКОбновлению = РегистрыСведений.СтатусыДокументовМаркировки.ДокументыКОбновлению(Ложь);
	Для Каждого Строка Из ДокументыКОбновлению.Строки Цикл
		
		// Получим ключ сессии
		СтруктураКлючаСессии = КлючСессии(Строка.Организация);
		ТекстОшибки = ПолучитьЗначениеПараметраСтруктуры(СтруктураКлючаСессии, "ТекстОшибки");
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Регламентное задание ""Обновление статусов документов маркировки""'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				, ,
				СтрШаблон(НСтр("ru = 'Ошибка при получении ключа сессии для организации %1: %2'"), Строка.Организация, ТекстОшибки)
			);
			Продолжить;
			
		КонецЕсли;
		
		ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(Строка.Организация);
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("Действие", "ПолучениеСтатусаДокумента");
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Регламентное задание ""Обновление статусов документов маркировки""'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			, ,
			НСтр("ru = 'Начало обновления статусов документов маркировки'")
			);
		
		Для Каждого СтрокаДокумента Из Строка.Строки Цикл
			
			ДанныеДокумента = ЗапросПолученияСодержимогоДокумента(
				ПараметрыКоманды,
				ПараметрыЗапроса,
				СтруктураКлючаСессии.КлючСессии.Ключ,
				СтрокаДокумента.ИдентификаторДокумента
			);
			РегистрыСведений.СтатусыДокументовМаркировки.ЗаписатьСтатусДокумента(
				СтрокаДокумента.Документ,
				СтрокаДокумента.ИдентификаторДокумента,
				ДанныеДокумента.Статус,
				ДанныеДокумента.ТекстОшибки
			);
			
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Регламентное задание ""Обновление статусов документов маркировки""'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			, ,
			НСтр("ru = 'Завершено обновление статусов документов маркировки'")
		);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПреобразованиеДанных

// Получение значения способа выпуска в оборот для передачи запроса
//
// Параметры:
//  СпособВыпуска	 - Перечисление.СпособыВыпускаВОборот - Значение, по которому ищем способ
// 
// Возвращаемое значение:
//  Строка - Значениеспособа выпуска в оборот
//
Функция СпособВыпускаВОборот(СпособВыпуска) Экспорт
	
	Если СпособВыпуска = Перечисления.СпособыВыпускаВОборот.ПроизводствоРФ Тогда
		Возврат "PRODUCTION";
	ИначеЕсли СпособВыпуска = Перечисления.СпособыВыпускаВОборот.МаркировкаОстатков Тогда
		Возврат "REMAINS";
	ИначеЕсли СпособВыпуска = Перечисления.СпособыВыпускаВОборот.ТрансграничнаяТорговля Тогда
		Возврат "CROSSBORDER";
	ИначеЕсли СпособВыпуска = Перечисления.СпособыВыпускаВОборот.ИмпортВРФ Тогда
		Возврат "IMPORT";
	ИначеЕсли СпособВыпуска = Перечисления.СпособыВыпускаВОборот.Перемаркировка Тогда
		Возврат "REMARK";
	ИначеЕсли СпособВыпуска = Перечисления.СпособыВыпускаВОборот.ПринятНаКомиссиюОтФизическогоЛица Тогда
		Возврат "COMMISSION";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Получение способа заполнения серийных номеров в формате формирования запроса
//
// Параметры:
//  ЗначениеСпособаЗаполнения - Перечисление.СпособыЗаполненияСерийногоНомера - Значение поиска значения
// 
// Возвращаемое значение:
//  Строка - Результат значения
//
Функция СпособЗаполненияСерийныхНомеров(ЗначениеСпособаЗаполнения) Экспорт 
	
	Если ЗначениеСпособаЗаполнения = Перечисления.СпособыЗаполненияСерийногоНомера.Автоматически Тогда
		Возврат "OPERATOR";
	ИначеЕсли ЗначениеСпособаЗаполнения = Перечисления.СпособыЗаполненияСерийногоНомера.Ручной Тогда
		Возврат "SELF_MADE";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращиет значение вида документа соответствия для отправки запроса
//
// Параметры:
//  ВидДокумента - Перечисление.ВидыДокументовСоответствия - Искомое значение, по которому идет поиск
// 
// Возвращаемое значение:
//  Строка - Результат в формате запроса
//
Функция ВидДокументаСоответствия(ВидДокумента) Экспорт
	
	Если ВидДокумента = Перечисления.ВидыДокументовСоответствия.ДекларацияОСоответствии Тогда
		Возврат "CONFORMITY_DECLARATION";
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовСоответствия.СертификатСоответствия Тогда
		Возврат "CONFORMITY_CERTIFICATE";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Получение вида первичного документа для отправки запроса
//
// Параметры:
//  ВидДокумента - Перечисление.ВидыПервичныхДокументов - Вид документа для запроса
// 
// Возвращаемое значение:
//  Строка - Формат вида документа по значению в документе
//
Функция ВидПервичногоДокумента(ВидДокумента) Экспорт
	
	Если ВидДокумента = Перечисления.ВидыПервичныхДокументов.КассовыйЧек Тогда
		Возврат "RECEIPT";
	ИначеЕсли ВидДокумента = Перечисления.ВидыПервичныхДокументов.ТоварныйЧек Тогда
		Возврат "SALES_RECEIPT";
	ИначеЕсли ВидДокумента = Перечисления.ВидыПервичныхДокументов.ТаможеннаяДекларация Тогда
		Возврат "CUSTOMS_DECLARATION";
	ИначеЕсли ВидДокумента = Перечисления.ВидыПервичныхДокументов.УПД Тогда
		Возврат "UTD";
	ИначеЕсли ВидДокумента = Перечисления.ВидыПервичныхДокументов.ТоварнаяНакладная Тогда
		Возврат "CONSIGNMENT_NOTE";
	ИначеЕсли ВидДокумента = Перечисления.ВидыПервичныхДокументов.АктУничтожения Тогда
		Возврат "DESTRUCTION_ACT";
	ИначеЕсли ВидДокумента = Перечисления.ВидыПервичныхДокументов.Прочее Тогда
		Возврат "OTHER";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Получение причины вывода из оборота для отправки запроса
//
// Параметры:
//  Причина - Перечисление.ПричиныВыводаИзОборота - Причина вывода из оборота
// 
// Возвращаемое значение:
//  Строка - Формат вида документа по значению в документе
//
Функция ПричинаВыводаИзОборота(Причина) Экспорт
	
	СоответствиеПричинВывода = Новый Соответствие;
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.РозничнаяПродажа,
		"RETAIL");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ЭкспортЕАЭС,
		"EAS_TRADE");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Экспорт,
		"BEYOND_EEC_EXPORT");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Возврат,
		"RETURN");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ДистанционнаяПродажа,
		"DISTANCE");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.УтратаПовреждение,
		"LOSS");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Уничтожение,
		"DESTRUCTION");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Конфискация,
		"CONFISCATION");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Ликвидация,
		"LIQUIDATION");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ДляСобственныхНужд,
		"OWN_USE");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.БезвозмезднаяПередача,
		"DONATION");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Другое,
		"OTHER");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ПродажаПоГосКонтракту,
		"STATE_CONTRACT");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ПродажаПоОбразцам,
		"BY_SAMPLES");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ПродажаПоСделкеСГосТайной,
		"STATE_SECRET");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Утилизация,
		"UTILIZATION");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ОтзывТоваровСРынка,
		"RECALL");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ПродажаЧерезВендинговыйАппарат,
		"VENDING");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ИстечениеСрокаГодности,
		"EXPIRATION");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ИспользованиеДляПроизводственныхЦелей,
		"PRODUCTION_USE");
	СоответствиеПричинВывода.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Фасовка,
		"PACKING");
	
	НайденнаяПричина = СоответствиеПричинВывода.Получить(Причина);
	
	Если НайденнаяПричина = Неопределено Тогда
		НайденнаяПричина = "";
	КонецЕсли;
	
	Возврат НайденнаяПричина;
	
КонецФункции

// Получение причины перемаркировки документа для отправки запроса
//
// Параметры:
//  Причина	 - Перечисление.ПричиныПеремаркировки - Вид документа для запроса
// 
// Возвращаемое значение:
//  Строка - Формат вида документа по значению в документе
//
Функция ПричинаПеремаркировки(Причина) Экспорт
	
	ПричиныПеремаркировки = Новый Соответствие;
	ПричиныПеремаркировки.Вставить(
		Перечисления.ПричиныПеремаркировки.ИспорченаМаркировка,
		"KM_SPOILED");
	ПричиныПеремаркировки.Вставить(
		Перечисления.ПричиныПеремаркировки.ОшибкаВОписании,
		"DESCRIPTION_ERRORS");
	ПричиныПеремаркировки.Вставить(
		Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиДистанционнаяПродажа,
		"REMOTE_SALE_RETURN");
	ПричиныПеремаркировки.Вставить(
		Перечисления.ПричиныПеремаркировки.ВозвратБезМаркировкиРозничнаяПродажа,
		"RETAIL_RETURN");
	ПричиныПеремаркировки.Вставить(
		Перечисления.ПричиныПеремаркировки.ВозвратОтКонечногоПокупателя,
		"LEGAL_RETURN");
	ПричиныПеремаркировки.Вставить(
		Перечисления.ПричиныПеремаркировки.РешениеНеСвязанныхСРеализацией,
		"INTERNAL_RETURN");
	ПричиныПеремаркировки.Вставить(
		Перечисления.ПричиныПеремаркировки.ВозвратРанееЭкспортированногоВЕАЭС,
		"EEC_EXPORT_RETURN");
	
	Возврат ПричиныПеремаркировки.Получить(Причина);
	
КонецФункции // ПричинаПеремаркировки()

// Получение причины списания кода маркировки для отправки запроса
//
// Параметры:
//  Причина	 - Перечисление.ПричиныСписанияКодовМаркировки - Причина для запроса
// 
// Возвращаемое значение:
//  Строка - Формат вида документа по значению в документе
//
Функция ПричинаСписанияКодаМаркировки(Причина) Экспорт
	
	Если Причина = Перечисления.ПричиныСписанияКодовМаркировки.Испорчен Тогда
		Возврат "KM_SPOILED";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.Уничтожен Тогда
		Возврат "KM_DESTROYED";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.Утерян Тогда
		Возврат "KM_LOST";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПричинаСписанияКодаМаркировки()

// Получение причины списания кода маркировки для отправки запроса для табака
//
// Параметры:
//  Причина	 - Перечисление.ПричиныСписанияКодовМаркировки - Причина для запроса
// 
// Возвращаемое значение:
//  Строка - Формат вида документа по значению в документе
//
Функция ПричинаСписанияКодаМаркировкиДляТабака(Причина) Экспорт
	
	Если Причина = Перечисления.ПричиныСписанияКодовМаркировки.Утерян Тогда
		Возврат "DAMAGE_LOSS";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.Брак Тогда
		Возврат "DEFECT";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.Уничтожен Тогда
		Возврат "DESTRUCTION";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.Ликвидация Тогда
		Возврат "LIQUIDATION";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.Конфискация Тогда
		Возврат "CONFISCATION";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.ИстечениеСрокаГодности Тогда
		Возврат "EXPIRY";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.ЛабораторныеОбразцы Тогда
		Возврат "QA_SAMPLES";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.ОтзывТоваровСРынка Тогда
		Возврат "PRODUCT_RECALL";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.Рекламации Тогда
		Возврат "COMPLAINTS";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.Другое Тогда
		Возврат "OTHER";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.ТестовыеОбразцы Тогда
		Возврат "PRODUCT_TESTING";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.ДемонстрационныеОбразцы Тогда
		Возврат "DEMO_SAMPLES";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.ВыбытиеДоОбязательнойМаркировки Тогда
		Возврат "BEFORE_MARKING";
	ИначеЕсли Причина = Перечисления.ПричиныСписанияКодовМаркировки.ИспользованиеДляСобственныхНужд Тогда
		Возврат "OWN_USE_EXCISE";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПричинаСписанияКодаМаркировки()

// Получение причины возврата в оборот маркировки для отправки запроса
//
// Параметры:
//  ВидВозврата	 - Перечисление.ВидыВозвратов - Причина для запроса
// 
// Возвращаемое значение:
//  Строка - Формат вида документа по значению в документе
//
Функция ВидВозвратаВОборот(ВидВозврата) Экспорт
	
	ВидыВозврата = Новый Соответствие;
	ВидыВозврата.Вставить(
		Перечисления.ВидыВозвратов.ВозвратПриРозничнойРеализации,
		"RETAIL_RETURN");
	ВидыВозврата.Вставить(
		Перечисления.ВидыВозвратов.ВозвратПриДистанционномСпособе,
		"REMOTE_SALE_RETURN");
	ВидыВозврата.Вставить(
		Перечисления.ВидыВозвратов.ЧекВозврата,
		"RECEIPT_RETURN");
	ВидыВозврата.Вставить(
		Перечисления.ВидыВозвратов.ВозвратТовараИзОборотаДляСобственныхНужд,
		"OWN_USE_RETURN");
	ВидыВозврата.Вставить(
		Перечисления.ВидыВозвратов.ВозвратТовараИзОборотаДляПроизводственныхЦелей,
		"PRODUCTION_USE_RETURN");
	ВидыВозврата.Вставить(
		Перечисления.ВидыВозвратов.ВозвратПокупателяНеСвязанныхСПоследующейРеализацией,
		"NOT_FOR_SALE_RETURN");
	ВидыВозврата.Вставить(
		Перечисления.ВидыВозвратов.ВозвратТовараИзОборотаЧерезВендинговыйАппарат,
		"VENDING_RETURN");
	
	Результат = ВидыВозврата.Получить(ВидВозврата);
	
	Возврат ?(Результат = Неопределено, "", Результат);
	
КонецФункции

// Получение вид отгрузки товаров для отправки запроса
//
// Параметры:
//  ВидОтгрузкиТоваров - Перечисление.ВидыОтгрузкиТоваров - Вид отгрузки товаров
// 
// Возвращаемое значение:
//  Строка - Формат вида документа по значению в документе
//
Функция ВидТоварооборота(ВидОтгрузкиТоваров) Экспорт
	
	Если ВидОтгрузкиТоваров = Перечисления.ВидыОтгрузкиТоваров.Продажа Тогда
		Возврат "SELLING";
	ИначеЕсли ВидОтгрузкиТоваров = Перечисления.ВидыОтгрузкиТоваров.Комиссия Тогда
		Возврат "COMMISSION";
	ИначеЕсли ВидОтгрузкиТоваров = Перечисления.ВидыОтгрузкиТоваров.Агент Тогда
		Возврат "AGENT";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Получение причины отгрузки товара при продаже для отправки запроса
//
// Параметры:
//  ПричинаВыводаИзОборота - Перечисление.ПричиныОтгрузкиТоваров - Причина, по которой отгружен товар
// 
// Возвращаемое значение:
//  Строка - Формат вида документа по значению в документе
//
Функция ПричинаОтгрузкиТовара(ПричинаВыводаИзОборота) Экспорт
	
	Если ПричинаВыводаИзОборота = Перечисления.ПричиныОтгрузкиТоваров.БезВозмезднаяПередача Тогда
		Возврат "DONATION";
	ИначеЕсли ПричинаВыводаИзОборота =
			Перечисления.ПричиныОтгрузкиТоваров.ПриобретениеГосПредприятием Тогда
		Возврат "STATE_ENTERPRISE";
	ИначеЕсли ПричинаВыводаИзОборота =
			Перечисления.ПричиныОтгрузкиТоваров.ИспользованиеДляСобственныхНуждПокупателем Тогда
		Возврат "NO_RETAIL_USE";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область УстановкаПараметровСеанса

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
// Параметры:
//  Обработчики - Соответствие - Список обработчиков
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("НомерСессииМаркировки", "ОбменССистемойМаркировкиСервер.УстановкаПараметровСеанса");
	
КонецПроцедуры // ПриДобавленииОбработчиковУстановкиПараметровСеанса()

// Установка параметров сеанса
//
// Параметры:
//  ИмяПараметра			 - Строка - Имя установки параметра.
//  УстановленныеПараметры	 - Массив - Список установленных параметров.
//
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	КоличествоСессий = 0;
	Попытка
		КоличествоСессий = ПараметрыСеанса.НомерСессииМаркировки.Количество();
	Исключение
		КоличествоСессий = 0;
	КонецПопытки;
	
	Если УстановленныеПараметры.Найти("НомерСессииМаркировки") = Неопределено
		И КоличествоСессий = 0 Тогда
		ПараметрыСеанса.НомерСессииМаркировки = Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
	
	УстановленныеПараметры.Добавить("НомерСессииМаркировки");
	
КонецПроцедуры // УстановкаПараметровСеанса()

#КонецОбласти

#Область РазрешительныйРежим

// Выполняет команду обработки и возвращает результат ее выполнения.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//   АдресРезультата - Строка - Адрес временного хранилища.
//
// Возвращаемое значение:
//   * Структура - Результат выполнения, который далее передается на клиент.
//   * Неопределено - Если был передан АдресРезультата.
//
Процедура ПроверитьКодыМаркировкиВРазрешительномРежиме(ПараметрыКоманды, АдресРезультата) Экспорт
	
	Результат = Новый Структура("КодыМаркировки,ТекстОшибки", Неопределено, "");
	
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
	
	// Попробуем получить токен из запроса к Честному знаку.
	ТокенДляККТ = ТокенДляККТ(ПараметрыКоманды.Организация, ПараметрыЗапроса);
	
	Если ПустаяСтрока(ТокенДляККТ) Тогда
		
		Результат.ТекстОшибки = НСтр("ru = 'Не обнаружен токен для проверки кодов маркировки в разрешительном режиме.
			|Заполните его в соответствующей настройке обмена с Честным знаком для организации.'");
		
		// Помещаем результат во временное хранилище
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
		
	КонецЕсли;
	
	// Актуализация CDN площадок
	CDNПлощадки = АктуальныйСписокCDNПлощадок(ПараметрыЗапроса, ТокенДляККТ);
	
	Если Не ПустаяСтрока(CDNПлощадки.ТекстОшибки) Тогда
		
		// Помещаем результат во временное хранилище
		Результат.ТекстОшибки = CDNПлощадки.ТекстОшибки;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
		
	КонецЕсли;
	
	// Закэшируем список площадок в базе.
	Если CDNПлощадки.СписокCDNПлощадок.Количество() > 0 Тогда
		
		РезультатОбновления = ЗаписатьВРегистрCDNПлощадок(CDNПлощадки.СписокCDNПлощадок);
		
		Если ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки) Тогда
			
			// Помещаем результат во временное хранилище
			Результат.ТекстОшибки = РезультатОбновления.ТекстОшибки;
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Выполним проверку кодов маркировки.
	РезультатПроверки = ПроверитьКодыМаркировки(ПараметрыКоманды, ПараметрыЗапроса, ТокенДляККТ);
	
	// Помещаем результат во временное хранилище
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресРезультата);
	
КонецПроцедуры // ПолучитьТокенПроверкиВРазрешительномРежиме()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапросСозданияДокумента(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии, Документ, ВидДокумента = "")
	
	// Определим вид документа
	Если ПустаяСтрока(ВидДокумента) Тогда
		ВидДокумента = ВидДокумента(Документ, ПараметрыКоманды);
	КонецЕсли;
	
	Результат = Новый Структура("ТекстОшибки,Результат,АннулированиеОтгрузки", "", Неопределено, Ложь);
	Если ВидДокумента = "LP_CANCEL_SHIPMENT" Тогда
		Результат.АннулированиеОтгрузки = Истина;
		Результат.Вставить("ИдентификаторДокумента", ТекстJSONВОбъект(ПараметрыКоманды.СообщениеJSON).shipment_number);
	КонецЕсли;
	
	СтрокаДокумента = ДанныеДокументаВСтроку(ПараметрыКоманды.СообщениеJSON);
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("product_document", СтрокаДокумента);
	ТелоЗапроса.Вставить("document_format",  "MANUAL");
	ТелоЗапроса.Вставить("signature",        ДвоичныеДанныеBase64(ПараметрыКоманды.ПодписьДанныхЗапроса));
	ТелоЗапроса.Вставить("type",             ВидДокумента);
	
	ПараметрыЗапросаОбмена = Новый Массив;
		ПараметрыЗапросаОбмена.Добавить(
			СтрШаблон(
				"pg=%1",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ТоварнаяГруппа.ТоварнаяГруппа")));
	
	ТекстМетода = "api/%1/true-api/lk/documents/create?%2";
	
	URLЗапроса = СтрШаблон(
		ТекстМетода,
		ПараметрыЗапроса.ВерсияФорматаОбмена,
		СтрСоединить(ПараметрыЗапросаОбмена, "&"));
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		URLЗапроса,
		ТелоЗапроса,
		ПараметрыЗапроса,
		"POST",
		КлючСессии);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.Свойство("ОтветПолучен")
		ИЛИ РезультатОтправки.Свойство("СообщениеОтвета") Тогда
		
		Если РезультатОтправки.КодСостояния = 200
			ИЛИ РезультатОтправки.КодСостояния = 201 Тогда
			
			Если Результат.АннулированиеОтгрузки Тогда
				Результат.Результат = Результат.ИдентификаторДокумента;
			Иначе
				РезультатОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета);
				
				Если РезультатОбработки = Неопределено Тогда
					Результат.Результат = РезультатОтправки.СообщениеОтвета;
				Иначе
					Результат.Результат = РезультатОбработки;
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат Результат;
			
		Иначе
			
			Результат.ТекстОшибки = РезультатОтправки.ТекстОшибки;
			
		КонецЕсли;
		
	Иначе
		
		Результат.ТекстОшибки = РезультатОтправки.ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправкаЗапросаЗаказаМаркировки(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии, РезультатЗапроса)
	
	Если ПараметрыКоманды.Действие = "ОтправкаЗапросаНаПолучениеКодовМаркировки" Тогда
		РезультатЗапроса.Удалить("КлючСессии");
		ОтветЗапроса = ОтправкаЗапросаНаПолучениеКодовМаркировки(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии);
		ДокументЗаказа = ПараметрыКоманды.Документ.ПолучитьОбъект();
		Если ОтветЗапроса.Результат <> Неопределено Тогда
			// Запишем регистрационные данные из ЧЗ
			ДокументЗаказа.ИдентификаторЗаказа = ОтветЗапроса.Результат.ИдентификаторЗаявки;
			ДокументЗаказа.ИдентификаторУстройства = ОтветЗапроса.Результат.ИдентификаторУстройства;
			ДокументЗаказа.Статус = Перечисления.СтатусыДокументовМаркировки.Отправлен;
			ДокументЗаказа.ОписаниеОшибки = "";
			РезультатЗапроса.Успешно = Истина;
			ДокументЗаказа.Записать();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Заказ кодов маркировки. Отправка заказа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,
				ДокументЗаказа.Ссылка,
				СтрШаблон(
				НСтр("ru = 'Сформирован заказ кодов маркировки. Идентификатор заказа: %1'"),
					ОтветЗапроса.Результат.ИдентификаторЗаявки));
			Если ОтветЗапроса.Результат.Свойство("ПроверятьПосле") И ОтветЗапроса.Результат.ПроверятьПосле > 0 Тогда
				РезультатЗапроса.Сообщение = СтрШаблон(НСтр("ru = 'Запрос на заказ кодов маркировки отправлен.
					|Коды будут готовы для загрузки через %1 минут.'"), ОтветЗапроса.Результат.ПроверятьПосле);
			КонецЕсли;
		Иначе
			РезультатЗапроса.ТекстОшибки = ОтветЗапроса.ТекстОшибки;
			ДокументЗаказа.ОписаниеОшибки = ОтветЗапроса.ТекстОшибки;
			ДокументЗаказа.ОбменДанными.Загрузка = Истина;
			ДокументЗаказа.Записать();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Заказ кодов маркировки. Отправка заказа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,
				ДокументЗаказа.Ссылка,
				СтрШаблон(
				НСтр("ru = 'Ошибка при отправки заказа кода маркировки: %1'"),
					ОтветЗапроса.ТекстОшибки));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтправкаЗапросаНаПолучениеКодовМаркировки(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии)
	
	Результат = Новый Структура("ТекстОшибки,Результат", "", Неопределено);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса.omsId) Тогда
		Результат.ТекстОшибки =
			НСтр("ru = 'В настройках обмена с системой маркировки не указано устройство СУЗ. Операция отменена.'");
		Возврат Результат;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json;charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("clientToken", КлючСессии);
	ЗаголовокHTTP.Вставить("X-Signature", ДвоичныеДанныеBase64(ПараметрыКоманды.ПодписьДанныхЗапроса));
		
	ПараметрыЗапроса.ЗащищенноеСоединение = Истина;
	
	ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыКоманды.Документ, "ТоварнаяГруппа.ТоварнаяГруппаСУЗ");
	СтрокаЗапроса = СтрШаблон("api/v2/%1/orders?omsId=%2",
		ТоварнаяГруппа,
		ПараметрыЗапроса.omsId);
	
	// Сопоставим настройки для СУЗ
	ПараметрыЗапросаСУЗ = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
	ПараметрыЗапросаСУЗ.АдресКонтура = ПараметрыЗапроса.АдресСУЗ;
	ПараметрыЗапросаСУЗ.Порт = ПараметрыЗапроса.ПортСУЗ;
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		СтрокаЗапроса,
		ПараметрыКоманды.СообщениеJSON,
		ПараметрыЗапросаСУЗ,
		"POST",
		Неопределено,
		ЗаголовокHTTP);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		РезультатОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета);
		Если РезультатОбработки = Неопределено Тогда
			
			Результат.Вставить("ТекстОшибки", 
				СтрШаблон(НСтр("ru = 'Ошибка в результате отправки запроса поиска по каталогу: %1'"),
				РезультатОтправки.СообщениеОтвета));
			
		Иначе
			
			Если РезультатОбработки.Свойство("expectedCompleteTimestamp") Тогда
				ДатаПолучениеКодов = РезультатОбработки.expectedCompleteTimestamp;
			ИначеЕсли РезультатОбработки.Свойство("expectedCompletionTime") Тогда
				ДатаПолучениеКодов = РезультатОбработки.expectedCompletionTime;
			Иначе
				ДатаПолучениеКодов = 10000;
			КонецЕсли;
			
			КоэффициентМинут = 60000;
			
			ДанныеЗаказа = Новый Структура;
			ДанныеЗаказа.Вставить("ИдентификаторЗаявки", РезультатОбработки.orderId);
			ДанныеЗаказа.Вставить("ИдентификаторУстройства", РезультатОбработки.omsId);
			ДанныеЗаказа.Вставить("ПроверятьПосле",
				Окр(ДатаПолучениеКодов / КоэффициентМинут, 0, РежимОкругления.Окр15как20));
			
			Результат.Результат = ДанныеЗаказа;
			
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		
		Результат.Вставить("ТекстОшибки", 
			СтрШаблон(НСтр("ru = 'Ошибка в результате получения кодов маркировки: %1'"),
			?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки)));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьЗапросОтчетаОНанесенииКодовМаркировки(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии, РезультатЗапроса)
	
	РезультатЗапроса.Удалить("КлючСессии");
	ОтветЗапроса = ОтправкаЗапросаОтчетаОНанесенииКодовМаркировки(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии);
	ДокументОтчета = ПараметрыКоманды.Документ.ПолучитьОбъект();
	Если ОтветЗапроса.Результат <> Неопределено Тогда
		// Запишем регистрационные данные из ЧЗ
		ДокументОтчета.ИдентификаторДокумента = ОтветЗапроса.Результат.ИдентификаторДокумента;
		ДокументОтчета.Статус = Перечисления.СтатусыДокументовМаркировки.Выполнен;
		ДокументОтчета.ОписаниеОшибки = "";
		РезультатЗапроса.Успешно = Истина;
		Если ДокументОтчета.Проведен Тогда
			ДокументОтчета.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокументОтчета.Записать();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отчет о нанесении кодов маркировки. Отправка отчета.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,,
		ДокументОтчета.Ссылка,
			СтрШаблон(
				НСтр("ru = 'Сформирован отчет о нанесении кодов маркировки. Идентификатор документа: %1'"),
				ОтветЗапроса.Результат.ИдентификаторДокумента));
	Иначе
		РезультатЗапроса.ТекстОшибки = ОтветЗапроса.ТекстОшибки;
		ДокументОтчета.ОписаниеОшибки = ОтветЗапроса.ТекстОшибки;
		ДокументОтчета.ОбменДанными.Загрузка = Истина;
		ДокументОтчета.Записать();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отчет о нанесении кодов маркировки. Отправка отчета.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
		ДокументОтчета.Ссылка,
		СтрШаблон(
			НСтр("ru = 'Ошибка при отправки отчета о нанесении кодов маркировки: %1'"),
			ОтветЗапроса.ТекстОшибки));
	КонецЕсли;
	
КонецПроцедуры

Функция ОтправкаЗапросаОтчетаОНанесенииКодовМаркировки(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии)
	
	Результат = Новый Структура("ТекстОшибки,Результат", "", Неопределено);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса.omsId) Тогда
		Результат.ТекстОшибки =
			НСтр("ru = 'В настройках обмена с системой маркировки не указано устройство СУЗ. Операция отменена.'");
		Возврат Результат;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json;charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("clientToken", КлючСессии);
	ЗаголовокHTTP.Вставить("X-Signature", ДвоичныеДанныеBase64(ПараметрыКоманды.ПодписьДанныхЗапроса));
		
	ПараметрыЗапроса.ЗащищенноеСоединение = Истина;
	
	ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыКоманды.Документ, "ТоварнаяГруппа.ТоварнаяГруппаСУЗ");
	СтрокаЗапроса = СтрШаблон("api/v2/%1/utilisation?omsId=%2",
		ТоварнаяГруппа,
		ПараметрыЗапроса.omsId);
	
	// Сопоставим настройки для СУЗ
	ПараметрыЗапросаСУЗ = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
	ПараметрыЗапросаСУЗ.АдресКонтура = ПараметрыЗапроса.АдресСУЗ;
	ПараметрыЗапросаСУЗ.Порт = ПараметрыЗапроса.ПортСУЗ;
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		СтрокаЗапроса,
		ПараметрыКоманды.СообщениеJSON,
		ПараметрыЗапросаСУЗ,
		"POST",
		Неопределено,
		ЗаголовокHTTP);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		РезультатОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета);
		Если РезультатОбработки = Неопределено Тогда
			
			Результат.Вставить("ТекстОшибки", 
				СтрШаблон(НСтр("ru = 'Ошибка в результате отправки запроса: %1'"),
				РезультатОтправки.СообщениеОтвета));
			
		Иначе
			
			ДанныеОтчета = Новый Структура;
			ДанныеОтчета.Вставить("ИдентификаторДокумента",
				?(РезультатОбработки.Свойство("reportId"), РезультатОбработки.reportId, ""));
			
			Результат.Результат = ДанныеОтчета;
			
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		
		Результат.Вставить("ТекстОшибки", 
			СтрШаблон(НСтр("ru = 'Ошибка в результате отправки отчета о нанесении: %1'"),
			?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки)));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСформироватьКлючСессии(
		Организация,
		ПолучитьНовыйКлюч = Истина,
		КлючСессииСУЗ = Ложь,
		ИдентификаторСоединения = "")
	
	Результат = Новый Структура("КлючСессии,СрокДействия,ТекстОшибки", "", "");
	
	Если КлючСессииСУЗ Тогда
		ТекущийКодСессии = ТекущийКодСессииСУЗ(Организация, ИдентификаторСоединения);
	Иначе
		ТекущийКодСессии = ТекущийКодСессииОрганизации(Организация);
	КонецЕсли;
	
	Если ТекущийКодСессии = Неопределено 
		И ПолучитьНовыйКлюч 
		И (ОбщегоНазначения.ИнформационнаяБазаФайловая()
			ИЛИ ЭлектроннаяПодпись.ОбщиеНастройки().СоздаватьЭлектронныеПодписиНаСервере) Тогда
			
		// Запрашиваем новый ключ сессии
		СозданКлюч = КлючСессии(Организация, КлючСессииСУЗ, ИдентификаторСоединения);
		Если НЕ СозданКлюч.КлючСессииПолучен Тогда
			Результат.ТекстОшибки = СозданКлюч.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		Если КлючСессииСУЗ Тогда
			ТекущийКодСессии = ТекущийКодСессииСУЗ(Организация, ИдентификаторСоединения);
		Иначе
			ТекущийКодСессии = ТекущийКодСессииОрганизации(Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийКодСессии <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ТекущийКодСессии);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекущийКодСессииОрганизации(Организация)
	
	Возврат ОбменССистемойМаркировкиВызовСервера.КлючСессииОрганизации(Организация);
	
КонецФункции

Процедура ЗаписатьКлючСессии(Организация, КлючСессии, СрокДействия)
	
	НомераСессииМаркировки = ПараметрыСеанса.НомерСессииМаркировки;
	
	Если НомераСессииМаркировки = Неопределено Тогда
		НомерСессииМаркировки = Новый Соответствие;
	Иначе
		НомерСессииМаркировки = Новый Соответствие(НомераСессииМаркировки);
	КонецЕсли;
	
	НомерСессииМаркировки.Вставить(Организация,
		Новый ФиксированнаяСтруктура("КлючСессии, СрокДействия", КлючСессии, СрокДействия));
		
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса.НомерСессииМаркировки = Новый ФиксированноеСоответствие(НомерСессииМаркировки);
	ПараметрыСеанса.Организация = Организация;
	
КонецПроцедуры

Функция ТекущийКодСессииСУЗ(Организация, ИдентификаторСоединения)
	
	Возврат ОбменССистемойМаркировкиВызовСервера.КлючСессииОрганизацииСУЗ(Организация, ИдентификаторСоединения);
	
КонецФункции

Процедура ЗаписатьКлючСессииСУЗ(Организация, ИдентификаторСоединения, КлючСессии, СрокДействия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.КлиентскиеТокеныСУЗ.СоздатьМенеджерЗаписи();
	НоваяЗапись.Организация = Организация;
	НоваяЗапись.ИдентификаторСоединения = ИдентификаторСоединения;
	НоваяЗапись.Токен = КлючСессии;
	НоваяЗапись.СрокДействия = УниверсальноеВремя(СрокДействия);
	
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры

// Отпечаток - строка HEX
Функция ПолучитьСертификатПоОтпечатку(Отпечаток)
	
	Рез = Неопределено; // Найденный сертификат (Com-объект)
	ХранилищеСертификатовCOM = Новый COMОбъект("CAdESCOM.Store"); // Объект описывает хранилище
	
	ХранилищеСертификатовCOM.Open(2, "My", 0); // Открыть хранилище сертификатов личное
	Сертификаты = ХранилищеСертификатовCOM.Certificates.Find(0, Отпечаток);
	Рез = Сертификаты.Item(1);
	
	// На сервере иногда падает
	Попытка
		ХранилищеСертификатовCOM.Close(); // Закрыть хранилище сертификатов и освободить объект 61
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка закрытия хранилище сертификатов'"),
		УровеньЖурналаРегистрации.Предупреждение,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

Функция ПараметрыАвторизации(ПараметрыЗапроса)
	
	Результат = Новый Структура("УИД,Данные,ТекстОшибки", "", "", "");
	
	ТекстМетода = "api/%1/true-api/auth/key";
	АдресСервера = СтрШаблон(ТекстМетода, ПараметрыЗапроса.ВерсияФорматаОбмена);
	
	// Отправка http запроса
	РезультатЗапроса = ЗапросВСервис(АдресСервера, ПараметрыЗапроса, Неопределено);
	
	// Выведим ошибку
	Если ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
		Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	РезультатЗапроса.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	// Преобразуем ответ запроса в json
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.СообщениеОтвета <> Неопределено Тогда
		
		Если РезультатОтправки.КодСостояния = 200 Тогда
			
			ЧтениеОтвета = Новый ЧтениеJSON;
			ЧтениеОтвета.УстановитьСтроку(РезультатОтправки.СообщениеОтвета);
			
			Попытка
				ОтветАвторизации = ПрочитатьJSON(ЧтениеОтвета, Ложь);
			Исключение
				ОтветАвторизации = Неопределено;
			КонецПопытки;
			
			Если ОтветАвторизации = Неопределено Тогда
				Результат.ТекстОшибки = РезультатОтправки.ТекстОшибки;
				Возврат Результат;
			Иначе
				Результат.УИД = ОтветАвторизации.uuid;
				Результат.Данные = ОтветАвторизации.data;
			КонецЕсли;
			
		Иначе
			Результат.ТекстОшибки = РезультатОтправки.ТекстОшибки;
		КонецЕсли;
		
	Иначе
		Результат.ТекстОшибки = РезультатОтправки.ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПолученныйКлючСессии(
		Организация,
		Результат,
		ПараметрыЗапроса,
		ПараметрыАвторизации,
		Подпись,
		ИдентификаторСоединения = "")
	
	ПолучитьКлючСессии(
		Организация,
		Результат,
		ПараметрыЗапроса,
		ПараметрыАвторизации,
		Подпись,
		ИдентификаторСоединения);
	
	Если Результат.Свойство("КлючСессии") Тогда
		
		Результат.КлючСессииПолучен = Истина;
		
		Если ЗначениеЗаполнено(ИдентификаторСоединения) Тогда
			
			ЗаписатьКлючСессииСУЗ(
				Организация,
				ИдентификаторСоединения,
				Результат.КлючСессии.Ключ,
				Результат.КлючСессии.СрокДействия);
			
		Иначе
			
			ЗаписатьКлючСессии(Организация, Результат.КлючСессии.Ключ, Результат.КлючСессии.СрокДействия);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКлючСессии(
	Организация,
	Результат,
	ПараметрыЗапроса,
	ПараметрыАвторизации,
	Подпись,
	ИдентификаторСоединения)
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("uuid", ПараметрыАвторизации.УИД);
	ДанныеЗапроса.Вставить("data", ДвоичныеДанныеBase64(Подпись));
	ДанныеЗапроса.Вставить("inn", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН"));
	
	ПараметрыЗапросаСУЗ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыЗапроса);
	ПараметрыЗапросаСУЗ.АдресКонтура = ПараметрыЗапросаСУЗ.Адрес;
	
	ТекстМетода = "api/%1/true-api/auth/simpleSignIn%2";
	АдресСервера = СтрШаблон(
		ТекстМетода,
		ПараметрыЗапроса.ВерсияФорматаОбмена,
		?(ПустаяСтрока(ИдентификаторСоединения), "", СтрШаблон("/%1", ИдентификаторСоединения)));
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		АдресСервера,
		ДанныеЗапроса,
		ПараметрыЗапросаСУЗ,
		"POST",
		Неопределено);
	
	// Преобразуем ответ запроса в json
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.СообщениеОтвета <> Неопределено Тогда
		
		Если РезультатОтправки.КодСостояния = 200 Тогда
			ЧтениеОтвета = Новый ЧтениеJSON;
			ЧтениеОтвета.УстановитьСтроку(РезультатОтправки.СообщениеОтвета);
			
			Попытка
				ОтветТокен = ПрочитатьJSON(ЧтениеОтвета, Ложь);
			Исключение
				ОтветТокен = Неопределено;
			КонецПопытки;
			
			Если ОтветТокен = Неопределено Тогда
				Результат.ТекстОшибки = РезультатОтправки.ТекстОшибки;
				Возврат;
			Иначе
				
				ТекстОписания = ПолучитьЗначениеПараметраСтруктуры(ОтветТокен, "description", "");
				Если ПолучитьЗначениеПараметраСтруктуры(ОтветТокен, "token", "") = "" Тогда
					Результат.ТекстОшибки =
						СтрШаблон(
							НСтр("ru = 'Не удалось получить токен. Проверьте настройки подключения к личному кабинету организации. %1'"),
							ТекстОписания);
					Возврат;
				КонецЕсли;
				
				ДобавитьВосемьЧасов = 30000;
				СрокДействия = ТекущаяДатаСеанса() + ДобавитьВосемьЧасов;
				РазборТокена = РазобратьТокен(ОтветТокен.token);
				
				Если РазборТокена <> Неопределено И РазборТокена.Свойство("exp") Тогда
					СрокДействия = МестноеВремя(Дата(1970, 1, 1) + РазборТокена.exp);
				КонецЕсли;
				
				СтруктураКлючаСессии = Новый Структура;
				СтруктураКлючаСессии.Вставить("Ключ", ОтветТокен.token);
				СтруктураКлючаСессии.Вставить("СрокДействия", СрокДействия);
				
				Результат.Вставить("КлючСессии", СтруктураКлючаСессии);
				
			КонецЕсли;
			
		Иначе
			Результат.ТекстОшибки = РезультатОтправки.СообщениеОтвета;
		КонецЕсли;
		
	Иначе
		Результат.ТекстОшибки = РезультатОтправки.ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросВСервис(АдресСервера, ПараметрыЗапроса, КлючСессии)
	
	Результат = Новый Структура("Ответ,ТекстОшибки", Неопределено, "");
	
	Если ПараметрыЗапроса.ЗащищенноеСоединение Тогда
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
			Неопределено,
			Новый СертификатыУдостоверяющихЦентровОС());
	Иначе
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Заголовок = Новый Соответствие();
	Заголовок.Вставить("Content-Type",   "application/json; charset=utf-8");
	Заголовок.Вставить("Accept-Charset", "utf-8");
	Заголовок.Вставить("Cache-Control",  "no-cache");
	Если КлючСессии <> Неопределено Тогда
		Заголовок.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(АдресСервера, Заголовок);
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыЗапроса.АдресКонтура,
			ПараметрыЗапроса.Порт,,,
			ИнтернетПрокси,
			ПараметрыЗапроса.ВремяОжидания,
			ЗащищенноеСоединение);
		
		Результат.Ответ = Соединение.Получить(Запрос);
		
	Исключение
		
		Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка запроса в Честный знак'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru = 'Ошибка при исполнении запроса GET %1 на сервер %2: '"),
				АдресСервера,
				ПараметрыЗапроса.АдресКонтура) + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьЗапросВСервис(
		АдресСервера,
		ДанныеЗапроса,
		ПараметрыЗапроса,
		МетодЗапроса,
		КлючСессии,
		Заголовок = Неопределено)
	
	Результат = Новый Структура("Ответ,ТекстОшибки", Неопределено, "");
	
	Если ТипЗнч(ДанныеЗапроса) = Тип("Строка") Тогда
		ТелоЗапроса = ДанныеЗапроса;
	ИначеЕсли ДанныеЗапроса <> Неопределено Тогда
		ТелоЗапроса = ДанныеВТекстJSON(ДанныеЗапроса, Истина);
	КонецЕсли;
	
	Если ПараметрыЗапроса.ЗащищенноеСоединение Тогда
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
			Неопределено,
			Новый СертификатыУдостоверяющихЦентровОС());
	Иначе
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Заголовок = Неопределено Тогда
		Заголовок = Новый Соответствие();
		Заголовок.Вставить("Content-Type",   "application/json; charset=utf-8");
		Заголовок.Вставить("Accept-Charset", "utf-8");
		Если КлючСессии <> Неопределено Тогда
			Заголовок.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
	КонецЕсли;
	
	Запрос  = Новый HTTPЗапрос(АдресСервера, Заголовок);
	Если ДанныеЗапроса <> Неопределено Тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыЗапроса.АдресКонтура,
			ПараметрыЗапроса.Порт,,,
			ИнтернетПрокси,
			ПараметрыЗапроса.ВремяОжидания,
			ЗащищенноеСоединение);
		
		Если МетодЗапроса = "POST" Тогда
			Результат.Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		Иначе
			Результат.Ответ = Соединение.ВызватьHTTPМетод(МетодЗапроса, Запрос);
		КонецЕсли;
		
	Исключение
		
		Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен с личным кабинетом Честного знака'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru = 'Ошибка исполнения POST запроса %1: '"),
				АдресСервера) + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеОтправкаJSON(ПараметрыЗапроса)
	
	Результат = Новый Структура("СообщениеОтвета,КодСостояния,ТекстОшибки", Неопределено, 0, "");
	
	Если ПараметрыЗапроса <> Неопределено
		И ПараметрыЗапроса.Ответ <> Неопределено Тогда
		
		КодСостояния = ПараметрыЗапроса.Ответ.КодСостояния;
		ОтветТекст = ПараметрыЗапроса.Ответ.ПолучитьТелоКакСтроку();
		
		Если ЗначениеЗаполнено(ОтветТекст) Тогда
			
			ЧтениеОтвета = Новый ЧтениеJSON;
			ЧтениеОтвета.УстановитьСтроку(ОтветТекст);
			
			Попытка
				Объект = ПрочитатьJSON(ЧтениеОтвета, Ложь);
			Исключение
				Попытка
					Объект = ПрочитатьJSON(ЧтениеОтвета, Истина);
				Исключение
					Объект = Неопределено;
				КонецПопытки;
			КонецПопытки;
			
			Если Объект = Неопределено Тогда
				Результат.СообщениеОтвета = ОтветТекст;
			Иначе
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
				ЗаписьJSON = Новый ЗаписьJSON();
				ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
				ЗаписатьJSON(ЗаписьJSON, Объект);
				Результат.СообщениеОтвета = ЗаписьJSON.Закрыть();
			КонецЕсли;
			
			Результат.КодСостояния  = КодСостояния;
			
		ИначеЕсли ЗначениеЗаполнено(КодСостояния) Тогда
			Результат.ТекстОшибки = СтрШаблон(НСтр("ru = 'Код состояния запроса HTTP: %1'"), КодСостояния);
		Иначе
			Результат.ТекстОшибки = НСтр("ru = 'Не отправлен запрос HTTP'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьТокен(Токен)
	
	Результат = Новый Структура;
	Результат.Вставить("Расшифровка", Неопределено);
	Результат.Вставить("ТекстОшибки", "");
	
	МассивТокена = СтрРазделить(Токен, ".");
	Если МассивТокена.Count() <> 3 Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Токен не соответствует формату'");
		Возврат Результат;
	КонецЕсли;
	
	ДанныеТокена = МассивТокена[1];
	
	ДанныеРазбора = ТекстJSONВОбъект(
		ПолучитьСтрокуИзДвоичныхДанных(
			ДвоичныеДанныеТокена(ДанныеТокена)));

	Возврат ДанныеРазбора;
	
КонецФункции

Функция ДвоичныеДанныеТокена(Знач Значение)
	
	Значение = СтрЗаменить(Значение, "-", "+");
	Значение = СтрЗаменить(Значение, "_", "/");
	
	Остаток = СтрДлина(Значение) % 4;

	Если Остаток = 1 Тогда
		Возврат Неопределено;
	ИначеЕсли Остаток = 2 Тогда
		Значение = Значение + "==";
	ИначеЕсли Остаток = 3 Тогда
		Значение = Значение + "=";
	КонецЕсли;
	
	Возврат Base64Значение(Значение);
	
КонецФункции

Функция СертификатыОрганизации(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат
	               |ИЗ
	               |	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	               |ГДЕ
	               |	СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь
	               |	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления
	               |	И СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = &Организация
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
	               |ИЗ
	               |	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	               |ГДЕ
	               |	СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления
	               |	И СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = &Организация";
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сертификат");
	
КонецФункции

Функция ДанныеДокументаВСтроку(ДанныеДокумента)
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ДанныеДокумента);
	
	Возврат ДвоичныеДанныеВСтроку(ДвоичныеДанные);
	
КонецФункции

Функция ДвоичныеДанныеВСтроку(ДвоичныеДанные)
	
	Результат = Base64Строка(ДвоичныеДанные);
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьКлючСессииСУЗ(ПараметрыКоманды, Результат, ИдентификаторСоединения, ТекстОшибкиКлюча)
	
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
	ИдентификаторСоединения = ПолучитьУстройствоСУЗ(ПараметрыКоманды.Документ, ПараметрыЗапроса.СписокУстройств);
	Если НЕ ЗначениеЗаполнено(ИдентификаторСоединения) Тогда
		ТекстОшибкиКлюча =
			НСтр("ru = 'Необходимо указать идентификатор соединения в настройке обмена с личным кабинетом'");
		Результат.Вставить("ТекстОшибки");
	КонецЕсли;
	
	Результат.Вставить("ИдентификаторСоединения", ИдентификаторСоединения);
	
КонецПроцедуры

Функция ПолученКлючСессииСУЗ(КлючСессии, ПараметрыКоманды, ПараметрыЗапроса, ОтветЗапроса, АдресРезультата)
	
	ТребуетсяКлючСессии = НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "НеТребуетсяКлючСессии", Ложь);
	ИдентификаторСоединения = "";
	
	НовыйКлюч = Ложь;
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда
		
		// Получим идентификатор соединения
		ИдентификаторСоединения = ПолучитьУстройствоСУЗ(ПараметрыКоманды.Документ, ПараметрыЗапроса.СписокУстройств);
		Если НЕ ЗначениеЗаполнено(ИдентификаторСоединения) Тогда
			ТекстОшибкиКлюча =
				НСтр("ru = 'Необходимо указать идентификатор соединения в настройке обмена с личным кабинетом'");
			ОтветЗапроса.Вставить("ТекстОшибки", ТекстОшибкиКлюча);
			ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
			Возврат Ложь;
		КонецЕсли;
		ОтветЗапроса.Вставить("ИдентификаторСоединения", ИдентификаторСоединения);
		
		СтруктураКлюча = ТекущийКодСессииСУЗ(ПараметрыКоманды.Организация, ИдентификаторСоединения);
		Если СтруктураКлюча = Неопределено Тогда
			ПолученияКлючаСессии(ПараметрыКоманды, ОтветЗапроса, Истина, ИдентификаторСоединения);
			Если ОтветЗапроса.Свойство("КлючСессии") Тогда
				КлючСессии = ОтветЗапроса.КлючСессии;
				ОтветЗапроса.Удалить("КлючСессии");
			КонецЕсли;
			СтруктураКлюча = ТекущийКодСессииСУЗ(ПараметрыКоманды.Организация, ИдентификаторСоединения);
			Если СтруктураКлюча <> Неопределено Тогда
				НовыйКлюч = Истина;
			КонецЕсли;
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтветЗапроса.Свойство("ТекстОшибки") Тогда
		Если ПустаяСтрока(ОтветЗапроса.ТекстОшибки) Тогда
			ОтветЗапроса.ТекстОшибки = НСтр("ru = 'Не удалось получить данные авторизации'");
		КонецЕсли;
		// вываливаемся
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	ОтветЗапроса.Вставить("ТекстОшибки", "");
	
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии И ПараметрыКоманды.Свойство("ПодписьДанныхАутентификации") Тогда
		
		ПодписьДанныхАутентификации = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыКоманды, "ПодписьДанныхАутентификации", "");
		Если ЗначениеЗаполнено(ПодписьДанныхАутентификации) Тогда
			ПолучениеКлюча = Новый Структура("КлючСессииПолучен,ТекстОшибки", Ложь, "");
			УстановитьПолученныйКлючСессии(
				ПараметрыКоманды.Организация,
				ПолучениеКлюча,
				ПараметрыЗапроса,
				ПараметрыКоманды,
				ПодписьДанныхАутентификации,
				ИдентификаторСоединения);
			Если НЕ ПустаяСтрока(ПолучениеКлюча.ТекстОшибки) Тогда
				ОтветЗапроса.Вставить("ТекстОшибки", ПолучениеКлюча.ТекстОшибки);
				ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКлюча = ПолучитьСформироватьКлючСессии(ПараметрыКоманды.Организация,, Истина, ИдентификаторСоединения);
		
		Если НЕ ПустаяСтрока(СтруктураКлюча.ТекстОшибки) Тогда
			ОтветЗапроса.Вставить("ТекстОшибки", СтруктураКлюча.ТекстОшибки);
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
		
		НовыйКлюч = Истина;
		
	КонецЕсли;
	
	// Если ключ не получен, то дальнейшая отправка смысла не имеет
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии Тогда
		ОтветЗапроса.Удалить("ТекстОшибки");
		ОтветЗапроса.Успешно = Истина;
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		Возврат Ложь;
	ИначеЕсли НовыйКлюч Тогда
		ОтветЗапроса.Вставить("КлючСессии", СтруктураКлюча);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьУстройствоСУЗ(Документ, СписокУстройств, ИмяИдентификатора = "ИдентификаторСоединения")
	
	СтруктураОтбора = Новый Структура("ПодразделениеКомпании");
	
	Если ЕстьРеквизит(Документ, "ПодразделениеКомпании") Тогда
		Если ТипЗнч(Документ) = Тип("Структура") Тогда
			Подразделение = Документ.ПодразделениеКомпании;
		Иначе
			Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПодразделениеКомпании");
		КонецЕсли;
		СтруктураОтбора.ПодразделениеКомпании = Подразделение;
		НайденныеСтроки = СписокУстройств.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0][ИмяИдентификатора];
		КонецЕсли;
	КонецЕсли;
	
	Подразделение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	СтруктураОтбора.ПодразделениеКомпании = Подразделение;
	НайденныеСтроки = СписокУстройств.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0][ИмяИдентификатора];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВидДокумента(Документ, ПараметрыКоманды)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВводВОборотКодовМаркировки") Тогда
		
		СпособВвода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СпособВводаВОборот");
		
		Если СпособВвода = Перечисления.СпособыВводаВОборот.МаркировкаОстатков Тогда
			Возврат "LP_INTRODUCE_OST";
		ИначеЕсли СпособВвода = Перечисления.СпособыВводаВОборот.ПроизводствоРФ Тогда
			Возврат "LP_INTRODUCE_GOODS";
		ИначеЕсли СпособВвода = Перечисления.СпособыВводаВОборот.ПроизводствоВнеЕАЭС Тогда
			Возврат "LP_GOODS_IMPORT";
		ИначеЕсли СпособВвода = Перечисления.СпособыВводаВОборот.КонтактноеПроизводствоРФ Тогда
			Возврат "LK_CONTRACT_COMMISSIONING";
		ИначеЕсли СпособВвода = Перечисления.СпособыВводаВОборот.ПолучениеОтФизическихЛиц Тогда
			Возврат "LK_INDI_COMMISSIONING";
		ИначеЕсли СпособВвода = Перечисления.СпособыВводаВОборот.ТрансграничнаяТорговля Тогда
			Возврат "CROSSBORDER";
		ИначеЕсли СпособВвода = Перечисления.СпособыВводаВОборот.ИмпортФТС Тогда
			Возврат "LP_FTS_INTRODUCE";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВыводИзОборотаКодовМаркировки") Тогда
		
		Возврат "LK_RECEIPT";
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Перемаркировка") Тогда
		
		Возврат "LK_REMARK";
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеКодовМаркировки") Тогда
		
		ХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ХозОперация");
		ТабачнаяПродукция = МаркировкаТоваровКлиентСервер.ТоварныеГруппыТабачнойПродукции();
		
		Если ТабачнаяПродукция.Найти(Документ.ТоварнаяГруппа.ТоварнаяГруппа) <> Неопределено Тогда
			Возврат "WRITE_OFF";
		ИначеЕсли ХозОперация = Справочники.ХозОперации.СписаниеНанесенныхКодовМаркировки Тогда
			Возврат "LK_APPLIED_KM_CANCELLATION";
		Иначе
			Возврат "LK_KM_CANCELLATION";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратВОборотКодовМаркировки") Тогда
		
		Возврат "LP_RETURN";
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтгрузкаТоваровКодовМаркировки") Тогда
		
		ИмяДействия = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "Действие", "");
		
		Если ИмяДействия = "АннулироватьОтгрузкуТоваров" Тогда
			Возврат "LP_CANCEL_SHIPMENT";
		КонецЕсли;
		
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ВидТоварооборота,ДатаВыводаИзОборота");
		
		Если ДанныеДокумента.ВидТоварооборота = Перечисления.ВидыОтгрузкиТоваров.Продажа
			И ЗначениеЗаполнено(ДанныеДокумента.ДатаВыводаИзОборота) Тогда
			Возврат "LP_SHIP_RECEIPT";
		Иначе
			Возврат "LP_SHIP_GOODS";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ПолученияКлючаСессии(ПараметрыКоманды, Результат, КлючСессииСУЗ = Ложь, ИдентификаторСоединения = "")
	
	СтруктураСессии = ПолучитьСформироватьКлючСессии(
		ПараметрыКоманды.Организация,,
		КлючСессииСУЗ,
		ИдентификаторСоединения);
	
	// Ключ сессии не удалось получить - подпишем на клиенте
	Если ЗначениеЗаполнено(СтруктураСессии.КлючСессии) Тогда
		Результат.Вставить("КлючСессии", СтруктураСессии.КлючСессии);
	Иначе
		ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(ПараметрыКоманды.Организация);
		ПараметрыАвторизации = ПараметрыАвторизации(ПараметрыЗапроса);
		Если ЗначениеЗаполнено(ПараметрыАвторизации.Данные) Тогда
			Результат.Вставить("ДанныеАвторизации", ПараметрыАвторизации.Данные);
			Результат.Вставить("УИД", ПараметрыАвторизации.УИД);
		Иначе
			Результат.Вставить("ТекстОшибки", ПараметрыАвторизации.ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолученияКлючаСессии()

// Получение списка товаров, которые доступны по указанному ИНН.
// 
// Параметры:
// 	ИНН           - Строка - ИНН производителя.
// 	НомерСтраницы - Число - Номер страницы.
// 	КлючСессии - Строка - Текущий номер сессии.
// 
// Возвращаемое значение:
// 	Структура - Структура результата запроса
Функция НайтиТоварыПоИНН(Организация, ИНН, НомерСтраницы = 0, КлючСессии = Неопределено)
	
	ПараметрыЗапроса = ОбменССистемойМаркировкиПовтИсп.ПараметрыЗапроса(Организация);
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", Неопределено);
	Результат.Вставить("ТекстОшибки", "");
	
	Если КлючСессии = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить(
		СтрШаблон(
			"inn=%1",
			КодироватьСтроку(ИНН, СпособКодированияСтроки.КодировкаURL)));
	ПараметрыURL.Добавить(
		СтрШаблон(
			"page=%1",
			Формат(НомерСтраницы, "ЧН=0; ЧГ=0")));
	ПараметрыURL.Добавить(
		СтрШаблон(
			"limit=%1",
			200));

	URLЗапроса = СтрШаблон(
		"api/v3/product/search?%1",
		СтрСоединить(ПараметрыURL, "&"));
	РезультатЗапроса = ЗапросВСервис(
		URLЗапроса,
		ПараметрыЗапроса,
		КлючСессии);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета);
		
		Если ДанныеОбработки = Неопределено Тогда
			
			Результат.Вставить("ТекстОшибки", 
				СтрШаблон(НСтр("ru = 'Ошибка в результате отправки запроса поиска по каталогу: %1'"),
				РезультатОтправки.СообщениеОтвета));
			
		Иначе
			
			Данные = Новый Соответствие;
			Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
				
				СтруктураДанных = Новый Структура("GTIN,ТорговаяМарка,Модель,КодТНВЭД,Наименование");
				СтруктураДанных.GTIN = ЭлементДанных["gtin"];
				СтруктураДанных.ТорговаяМарка = ЭлементДанных["brand"];
				СтруктураДанных.Модель = ПолучитьЗначениеПараметраСтруктуры(ЭлементДанных, "model", "");
				СтруктураДанных.КодТНВЭД = ПолучитьЗначениеПараметраСтруктуры(ЭлементДанных, "tnVedCode", "");
				СтруктураДанных.Наименование = ПолучитьЗначениеПараметраСтруктуры(ЭлементДанных, "name", "");
				
				Данные.Вставить(СтруктураДанных.GTIN, СтруктураДанных);
				
			КонецЦикла;
			
			Результат.Данные = Данные;
			
		КонецЕсли;
		
	Иначе
		
		Результат.Вставить("ТекстОшибки", 
			СтрШаблон(НСтр("ru = 'Ошибка в результате отправки запроса поиска по каталогу: %1'"),
			?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки)));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КодыМаркировкиПоGTIN(
			ИдентификаторЗаказа,
			GTIN,
			Количество,
			НачальнаяПозиция,
			ПараметрыЗапроса,
			ПараметрыКоманды)
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", Неопределено);
	Результат.Вставить("ТекстОшибки", "");
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса.omsId) Тогда
		Результат.ТекстОшибки =
			НСтр("ru = 'В настройках обмена с системой маркировки не указано устройство СУЗ. Операция отменена.'");
		Возврат Результат;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json;charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("clientToken", ПараметрыЗапроса.Токен);
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить(
		СтрШаблон(
			"omsId=%1",
			ПараметрыЗапроса.omsId));
	ПараметрыURL.Добавить(
		СтрШаблон(
			"orderId=%1",
			ИдентификаторЗаказа));
	ПараметрыURL.Добавить(
		СтрШаблон(
			"gtin=%1",
			GTIN));
	ПараметрыURL.Добавить(
		СтрШаблон(
			"quantity=%1",
			Количество));
	ПараметрыURL.Добавить(
		СтрШаблон(
			"lastBlockId=%1",
			НачальнаяПозиция));
	
	ГруппаТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыКоманды.Документ, "ТоварнаяГруппа.ТоварнаяГруппаСУЗ");
	
	// Шины
	URLЗапроса = СтрШаблон(
		"api/v2/%1/codes?%2",
		ГруппаТоваров,
		СтрСоединить(ПараметрыURL, "&"));
	
	// Сопоставим настройки для СУЗ
	ПараметрыЗапросаСУЗ = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
	ПараметрыЗапросаСУЗ.АдресКонтура = ПараметрыЗапроса.АдресСУЗ;
	ПараметрыЗапросаСУЗ.Порт = ПараметрыЗапроса.ПортСУЗ;
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		URLЗапроса,
		Неопределено,
		ПараметрыЗапросаСУЗ,
		"GET",
		Неопределено,
		ЗаголовокHTTP);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета);
		Если ДанныеОбработки = Неопределено Тогда
			
			Результат.Вставить("ТекстОшибки", 
				СтрШаблон(НСтр("ru = 'Ошибка в результате отправки запроса поиска по каталогу: %1'"),
				РезультатОтправки.СообщениеОтвета));
			
		Иначе
			
			Данные = Новый Структура;
			Данные.Вставить("КодыМаркировки", ДанныеОбработки.codes);
			Данные.Вставить("ИдентификаторПоследнегоБлокаКодов", ДанныеОбработки.blockId);
			
			Результат.Данные = Данные;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрНайти(РезультатОтправки.ТекстОшибки, "Billing response didn't received in time. Close request sent") Тогда
			Результат.Вставить("ТекстОшибки", НСтр("ru = 'Заказ кодов маркировки обрабатывается'"));
		Иначе
			Результат.Вставить("ТекстОшибки", 
				СтрШаблон(НСтр("ru = 'Ошибка в результате получения кодов маркировки: %1'"),
				?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки)));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправкаЗапросаСозданияДокумента(ПараметрыКоманды, ПараметрыЗапроса, КлючСессии, ОтветЗапроса)
	
	РезультатЗапроса = ЗапросСозданияДокумента(
		ПараметрыКоманды,
		ПараметрыЗапроса,
		КлючСессии,
		ПараметрыКоманды.Документ);
	ДокументЗапроса = ПараметрыКоманды.Документ.ПолучитьОбъект();
	Если РезультатЗапроса.Результат <> Неопределено Тогда
		
		ДанныеДокумента = ЗапросПолученияСодержимогоДокумента(
			ПараметрыКоманды,
			ПараметрыЗапроса,
			КлючСессии,
			РезультатЗапроса.Результат
		);
		ОтветЗапроса.Успешно = Истина;
		
		Если ДанныеДокумента.Обработан Тогда
			Комментарий = СтрШаблон(
				НСтр("ru = 'Сформирован документ в Честном знаке. Номер документа %1'"),
				РезультатЗапроса.Результат
			);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Отправка запроса в Честный знак.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				ДокументЗапроса.Ссылка,
				Комментарий
			);
		Иначе
			Если ДокументЕщеНеОбработан(ДанныеДокумента.ТекстОшибки) Тогда
				ДанныеДокумента.ТекстОшибки = "";
				ДанныеДокумента.Вставить("Статус", "IN_PROGRESS");
				Комментарий = СтрШаблон(
					НСтр("ru = 'Сформирован документ в Честном знаке. Номер документа %1'"),
					РезультатЗапроса.Результат
				);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Отправка запроса в Честный знак.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Информация,
					,
					ДокументЗапроса.Ссылка,
					Комментарий
				);
			Иначе
				ОтветЗапроса.Сообщение = ДанныеДокумента.ТекстОшибки;
				Комментарий = СтрШаблон(НСтр("ru = 'При формировании документа возникла ошибка: %1'"), ДанныеДокумента.ТекстОшибки);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Отправка запроса в Честный знак.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					ДокументЗапроса.Ссылка,
					Комментарий
				);
			КонецЕсли;
		КонецЕсли;
		РегистрыСведений.СтатусыДокументовМаркировки.ЗаписатьСтатусДокумента(
			ПараметрыКоманды.Документ,
			РезультатЗапроса.Результат,
			ДанныеДокумента.Статус,
			ДанныеДокумента.ТекстОшибки
		);
	Иначе
		ОтветЗапроса.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отправка запроса в Честный знак.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ДокументЗапроса.Ссылка,
			СтрШаблон(НСтр("ru = 'При формировании документа возникла ошибка: %1'"), ОтветЗапроса.ТекстОшибки)
		);
		Если РезультатЗапроса.АннулированиеОтгрузки Тогда
			ИдентификаторДокумента = РезультатЗапроса.ИдентификаторДокумента;
		Иначе
			ИдентификаторДокумента = "";
		КонецЕсли;
		РегистрыСведений.СтатусыДокументовМаркировки.ЗаписатьСтатусДокумента(
			ПараметрыКоманды.Документ,
			ИдентификаторДокумента,
			Перечисления.СтатусыДокументовМаркировки.Новый,
			РезультатЗапроса.ТекстОшибки
		);
	КонецЕсли;
	
КонецПроцедуры // ОтправкаЗапросаСозданияДокумента()

Функция ЗапросПолученияСодержимогоДокумента(
		ПараметрыКоманды,
		ПараметрыЗапроса,
		КлючСессии,
		УИДДокумента,
		ДатаПовторногоЗапроса = Неопределено)
	
	Результат = Новый Структура("ТекстОшибки,Обработан,Статус", "", Ложь, "");
	
	// Нет данных для поиска документа
	Если НЕ ЗначениеЗаполнено(УИДДокумента) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстМетода = "api/v4/true-api/doc/%2/info";
	
	URLЗапроса = СтрШаблон(
		ТекстМетода,
		ПараметрыЗапроса.ВерсияФорматаОбмена,
		УИДДокумента);
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		URLЗапроса,
		Неопределено,
		ПараметрыЗапроса,
		"GET",
		КлючСессии);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	ОшибкаСтраницы = 404;
	
	Если РезультатОтправки.Свойство("ОтветПолучен")
		ИЛИ РезультатОтправки.Свойство("СообщениеОтвета") Тогда
		
		Если РезультатОтправки.КодСостояния = 200
			ИЛИ РезультатОтправки.КодСостояния = 201 Тогда
			
			РезультатОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета);
			Если РезультатОбработки = Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
			
			ПолучитьСтатусЗагруженногоДокумента(РезультатОбработки, ПараметрыКоманды, Результат);
			Возврат Результат;
			
		ИначеЕсли РезультатОтправки.КодСостояния = ОшибкаСтраницы И РезультатОтправки.Свойство("СообщениеОтвета") Тогда
			
			РезультатОбработкиОтвета = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета);
			Если ТипЗнч(РезультатОбработкиОтвета) = Тип("Структура") Тогда
				Результат.ТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					РезультатОбработкиОтвета,
					"error_message",
					РезультатОтправки.ТекстОшибки
				);
			Иначе
				Результат.ТекстОшибки = РезультатОтправки.СообщениеОтвета;
			КонецЕсли;
			
		ИначеЕсли РезультатОтправки.Свойство("СообщениеОтвета") И РезультатОтправки.СообщениеОтвета <> Неопределено Тогда
			
			РезультатОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета);
			
			Результат.ТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				РезультатОбработки,
				"error_message",
				РезультатОтправки.ТекстОшибки
			);
			
		Иначе
			
			Результат.ТекстОшибки = РезультатОтправки.ТекстОшибки;
			
		КонецЕсли;
		
		Результат.Обработан = Истина;
		Результат.Статус = "IN_PROGRESS";
		
	Иначе
		
		Результат.ТекстОшибки = РезультатОтправки.ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьСтатусЗагруженногоДокумента(ПолученныеДанные, ПараметрыКоманды, ДанныеЗагрузки)
	
	СтатусДокумента = Неопределено;
	Если ПолученныеДанные.Количество() > 0 Тогда
		СтатусДокумента = ПолученныеДанные[0].status;
		Если ЕстьРеквизит(ПолученныеДанные[0], "errors")
			И ПолученныеДанные[0].errors <> Неопределено Тогда
			ДанныеЗагрузки.ТекстОшибки = СтрСоединить(ПолученныеДанные[0].errors, Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
	Если СтатусДокумента <> Неопределено Тогда
		ДанныеЗагрузки.Обработан = Истина;
		ДанныеЗагрузки.Статус = СтатусДокумента;
		Если ПараметрыКоманды.Действие = "АннулироватьОтгрузкуТоваров" Тогда
			СтатусыДокументов = Новый Массив;
			СтатусыДокументов.Добавить("CHECKED_OK");
			СтатусыДокументов.Добавить("WAIT_ACCEPTANCE");
			СтатусыДокументов.Добавить("WAIT_PARTICIPANT_REGISTRATION");
			Если СтатусыДокументов.Найти(ДанныеЗагрузки.Статус) Тогда
				ДанныеЗагрузки.Статус = "IN_PROGRESS";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьКодыМаркировки(ДанныеЗапроса, ДополнительныеПараметры)
	
	ИННОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.Организация, "ИНН");
	СостоянияКодовМаркировкиИБ = ПолучитьСостоянияКодовМаркировки(ДополнительныеПараметры.КодыМаркировки, ДополнительныеПараметры.Организация);
	Результат = Новый Массив;
	ПредставлениеСостояния = МаркировкаТоваровКлиентСервер.ПредставлениеСостояния();
	РазрешенныеСостояния = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры, "РазрешенныеСостояния", Неопределено
	);
	Для Каждого КодМаркировки Из ДополнительныеПараметры.КодыМаркировки Цикл
		РезультатСтроки = Новый Структура(
			"КодМаркировки,СостояниеКодаМаркировкиИБ,СостояниеКодаМаркировкиСМТ,Примечание,Соответствует"
		);
		РезультатСтроки.КодМаркировки = КодМаркировки;
		РезультатСтроки.Соответствует = Ложь;
		КодМаркировкиПоиска = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(КодМаркировки, , Ложь);
		Ответ = Неопределено;
		НомерОтвета = 0;
		Пока НомерОтвета < ДанныеЗапроса.Количество() Цикл
			Если ДанныеЗапроса[НомерОтвета].Получить("cis") = КодМаркировкиПоиска
				ИЛИ ДанныеЗапроса[НомерОтвета].Получить("requestedCis") = КодМаркировкиПоиска Тогда
				Ответ = ДанныеЗапроса[НомерОтвета];
				Прервать;
			КонецЕсли;
			НомерОтвета = НомерОтвета + 1;
		КонецЦикла;
		
		ПараметрыОтбора = Новый Структура("КодМаркировки", КодМаркировки);
		НайденныеСтроки = СостоянияКодовМаркировкиИБ.НайтиСтроки(ПараметрыОтбора);
		КодаНетВИБ = НайденныеСтроки.Количество() = 0;
		Если КодаНетВИБ Тогда
			Примечание = НСтр("ru = 'нашей базе'");
			РезультатСтроки.СостояниеКодаМаркировкиИБ = Перечисления.СостоянияКодовМаркировки.Неопределен;
		Иначе
			РезультатСтроки.СостояниеКодаМаркировкиИБ = НайденныеСтроки[0].Состояние;
		КонецЕсли;
		
		КодаНетВСМТ = Ответ = Неопределено;
		Если КодаНетВСМТ Тогда
			Если КодаНетВИБ Тогда
				Примечание = НСтр("ru = 'нашей базе и системе ""Честного знака""'");
			Иначе
				Примечание = НСтр("ru = 'системе ""Честного знака""'");
			КонецЕсли;
			РезультатСтроки.СостояниеКодаМаркировкиСМТ = НСтр("ru = 'Неопределен'");
		Иначе
			СостояниеКодаМаркировкиСМТ = Ответ.Получить("status");
			РезультатСтроки.СостояниеКодаМаркировкиСМТ = ПредставлениеСостояния.Получить(СостояниеКодаМаркировкиСМТ);
		КонецЕсли;
		
		Если КодаНетВИБ ИЛИ КодаНетВСМТ Тогда 
			РезультатСтроки.Примечание = СтрШаблон(
				НСтр("ru = 'Код маркировки отсутствует в %1.'"),
				Примечание);
			Результат.Добавить(РезультатСтроки);
			Продолжить;
		КонецЕсли;
		
		// В случае когда владельцем товара являемя не мы, то ИНН владельца можем не получить
		ВладелецТовара = Ответ.Получить("ownerInn");
		Если Не ЗначениеЗаполнено(ВладелецТовара) ИЛИ ВладелецТовара <> СокрЛП(ИННОрганизации) Тогда
			РезультатСтроки.Примечание = СтрШаблон(
				НСтр("ru = 'Код маркировки не принадлежит организации <%1>'"),
				ДополнительныеПараметры.Организация
			);
			Результат.Добавить(РезультатСтроки);
			Продолжить;
		КонецЕсли;
		
		РезультатСтроки.Соответствует = МаркировкаТоваровКлиентСервер.СопоставитьСостоянияКодовМаркировкиСЧестнымЗнаком(
			РезультатСтроки.СостояниеКодаМаркировкиИБ,
			СостояниеКодаМаркировкиСМТ,
			РазрешенныеСостояния,
			РезультатСтроки.Примечание
		);
		
		Результат.Добавить(РезультатСтроки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСостоянияКодовМаркировки(КодыМаркировки, ОрганизацияДокумента)
	
	// Разберем код маркировки и на основании этих данных будем искать
	ТаблицаКодовМаркировки = Новый ТаблицаЗначений;
	Строка50 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	Строка200 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200));
	ТаблицаКодовМаркировки.Колонки.Добавить("КодМаркировки", Строка200);
	ТаблицаКодовМаркировки.Колонки.Добавить("GTIN", Строка50);
	ТаблицаКодовМаркировки.Колонки.Добавить("СерийныйНомер", Строка50);
	
	Для Каждого ТекущийКодМаркировки Из КодыМаркировки Цикл
		
		СтруктураМаркировки =
			МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(ТекущийКодМаркировки);
			
		
		Если СтруктураМаркировки.ТипИдентификатораТовара <>
			ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКодовМаркировки.Добавить();
		НоваяСтрока.КодМаркировки = ТекущийКодМаркировки;
		НоваяСтрока.GTIN = СтруктураМаркировки.GTIN;
		НоваяСтрока.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ТаблицаКодовМаркировки.КодМаркировки КАК КодМаркировки,
	|	ТаблицаКодовМаркировки.GTIN КАК GTIN,
	|	ТаблицаКодовМаркировки.СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ ТаблицаКодовМаркировки
	|ИЗ
	|	&ТаблицаКодовМаркировки КАК ТаблицаКодовМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияКодовМаркировки.Период) КАК Период,
	|	ТаблицаКодовМаркировки.КодМаркировки КАК КодМаркировки
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.СостоянияКодовМаркировки КАК СостоянияКодовМаркировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКодовМаркировки КАК ТаблицаКодовМаркировки
	|		ПО СостоянияКодовМаркировки.GTIN = ТаблицаКодовМаркировки.GTIN
	|			И СостоянияКодовМаркировки.СерийныйНомер = ТаблицаКодовМаркировки.СерийныйНомер
	|ГДЕ
	|	СостоянияКодовМаркировки.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКодовМаркировки.КодМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияКодовМаркировки.Состояние КАК Состояние,
	|	ВТ.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКодовМаркировки КАК СостоянияКодовМаркировки
	|		ПО ВТ.Период = СостоянияКодовМаркировки.Период";
	Запрос.УстановитьПараметр("ТаблицаКодовМаркировки", ТаблицаКодовМаркировки);
	Запрос.УстановитьПараметр("Организация", ОрганизацияДокумента);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ДвоичныеДанныеBase64(Данные)
	
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Результат = Base64Строка(Данные);
	Иначе
		Результат = Данные;
	КонецЕсли;
		
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеСверки(ДанныеОбработки, ПоследняяЗапись)
	
	Результат = Новый Массив;
	СоответствиеКодов = ДанныеОбработки.Получить("results");
	ПоследняяЗапись = Новый Структура("UIT, emissionDate");
	
	Для Каждого КлючЗначение Из СоответствиеКодов Цикл
		СтрокаРезультата = Новый Структура("GTIN, Наименование, Производитель, Владелец, ПричинаВыводаИзОборота,
		| КодМаркировки, ДатаЭмиссии, АктуальныйСтатус"); 
		СтрокаРезультата.GTIN = КлючЗначение.Получить("gtin");
		
		СтрокаРезультата.Наименование = КлючЗначение.Получить("productName");
		СтрокаРезультата.Производитель = КлючЗначение.Получить("producerName");
		СтрокаРезультата.Владелец = КлючЗначение.Получить("ownerName");
		СтрокаРезультата.ПричинаВыводаИзОборота = КлючЗначение.Получить("withdrawReason");
		СтрокаРезультата.КодМаркировки = КлючЗначение.Получить("uit");
		СтрокаРезультата.ДатаЭмиссии = КлючЗначение.Получить("emissionDate");
		СтрокаРезультата.АктуальныйСтатус = КлючЗначение.Получить("status");
		ПоследняяЗапись.UIT = СтрокаРезультата.КодМаркировки;
		ПоследняяЗапись.emissionDate = СтрокаРезультата.ДатаЭмиссии;
		Результат.Добавить(СтрокаРезультата);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаСЧасовымПоясом(Дата, Знач ЧасовойПояс = Неопределено) Экспорт
	
	Если ЧасовойПояс = Неопределено Тогда
		ЧасовойПояс = ЧасовойПоясСеанса();
	КонецЕсли;
	
	Смещение = (Дата - УниверсальноеВремя(Дата, ЧасовойПояс)) / 3600;
	Если Смещение > 0 Тогда
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTHH:mm:ss.000Z");
		// TODO: не забыть про смещение
	Иначе
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "-" + Формат(-Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураПоискаПоОстаткам(Документ, ДанныеЗапроса)
	
	ТорговаяМарка =
		?(ДанныеЗапроса.Значение.ТорговаяМарка = НСтр("ru = 'Без товарного знака'"), "",
			ДанныеЗапроса.Значение.ТорговаяМарка);
	
	Результат = Новый Структура();
	Результат.Вставить("ТоварныйЗнак", ТорговаяМарка);
	
	Если Документ.ТоварнаяГруппа = Справочники.ТипыМаркировки.ШиныИАвтопокрышки Тогда
		
		Результат.Вставить("Модель", ДанныеЗапроса.Значение.Модель);
		
	ИначеЕсли Документ.ТоварнаяГруппа = Справочники.ТипыМаркировки.ЛегкаяПромышленность Тогда
		
		ПараметрыНоменклатуры = СтрРазделить(ДанныеЗапроса.Значение.Наименование, ".");
		Индекс = ПараметрыНоменклатуры.Количество() - 1;
		
		// Способ вывода из оборота
		Если СтрНайти(ПараметрыНоменклатуры[Индекс], "Ввезен в РФ") > 0 Тогда
			Результат.Вставить("СпособВыпускаТоваровВОборот", Перечисления.СпособыВыпускаВОборот.ИмпортВРФ);
		ИначеЕсли СтрНайти(ПараметрыНоменклатуры[Индекс], "Произведен в РФ") > 0 Тогда
			Результат.Вставить("СпособВыпускаТоваровВОборот", Перечисления.СпособыВыпускаВОборот.ПроизводствоРФ);
		КонецЕсли;
		
		// Дополнительные характеристики
		Индекс = Индекс - 1;
		
		Если Индекс = -1 Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ДанныеЗапроса.Значение.КодТНВЭД, "63") Тогда
			
			Если СтрНайти(ПараметрыНоменклатуры[Индекс], "Детское") > 0 Тогда
				Результат.Вставить("ВозрастнаяКатегория", Перечисления.ВозврастныеКатегории.Детское);
			ИначеЕсли СтрНайти(ПараметрыНоменклатуры[Индекс], "Взрослое") > 0 Тогда
				Результат.Вставить("ВозрастнаяКатегория", Перечисления.ВозврастныеКатегории.Взрослое);
			ИначеЕсли СтрНайти(ПараметрыНоменклатуры[Индекс], "Без возраста") > 0 Тогда
				Результат.Вставить("ВозрастнаяКатегория", Перечисления.ВозврастныеКатегории.БезВозрастнойКатегории);
			КонецЕсли;
			
		ИначеЕсли СтрНачинаетсяС(ДанныеЗапроса.Значение.КодТНВЭД, "42")
			ИЛИ СтрНачинаетсяС(ДанныеЗапроса.Значение.КодТНВЭД, "61")
			ИЛИ СтрНачинаетсяС(ДанныеЗапроса.Значение.КодТНВЭД, "62")
			ИЛИ СтрНачинаетсяС(ДанныеЗапроса.Значение.КодТНВЭД, "64") Тогда
			
			Если СтрНайти(ПараметрыНоменклатуры[Индекс], "Мужская") > 0 Тогда
				Результат.Вставить("ЦелевойПол", Перечисления.ЦелевойПол.Мужской);
			ИначеЕсли СтрНайти(ПараметрыНоменклатуры[Индекс], "Женская") > 0 Тогда
				Результат.Вставить("ЦелевойПол", Перечисления.ЦелевойПол.Женский);
			ИначеЕсли СтрНайти(ПараметрыНоменклатуры[Индекс], "Детская") > 0 Тогда
				Результат.Вставить("ЦелевойПол", Перечисления.ЦелевойПол.Детский);
			ИначеЕсли СтрНайти(ПараметрыНоменклатуры[Индекс], "Унисекс") > 0 Тогда
				Результат.Вставить("ЦелевойПол", Перечисления.ЦелевойПол.Унисекс);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИННУчастниковГИСМТ(СписокУчастников)
	
	МассивКонтрагентов = Новый Массив;
	Для Каждого ТекущийКонтрагент Из СписокУчастников Цикл
		Если НЕ ЗначениеЗаполнено(ТекущийКонтрагент.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		МассивКонтрагентов.Добавить(ТекущийКонтрагент.Ключ);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеКонтрагентов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивКонтрагентов, "ИНН,ФормаСобственности");
	
	УдалитьКонтрагенты = Новый Массив;
	
	Для Каждого ТекущийКонтрагент Из СписокУчастников Цикл
		
		ДанныеКонтрагента = ДанныеКонтрагентов.Получить(ТекущийКонтрагент.Ключ);
		
		// Проверим, что текущий контрагент это юр. лицо или ИП
		Если НЕ (ДанныеКонтрагента.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
			ИЛИ ДанныеКонтрагента.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель) Тогда
			
			УдалитьКонтрагенты.Добавить(ТекущийКонтрагент.Ключ);
			Продолжить;
			
		КонецЕсли;
		
		СписокУчастников.Вставить(ТекущийКонтрагент.Ключ, ДанныеКонтрагента.ИНН);
		
	КонецЦикла;
	
	Для Каждого ТекущийКонтрагент Из УдалитьКонтрагенты Цикл
		
		СписокУчастников.Удалить(ТекущийКонтрагент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеИННУчастников(СписокУчастников, Результат)
	
	УдалитьЗаписи = Новый Массив;
	ШаблонСообщения = НСтр("ru = 'У контрагента %1 не указан ИНН'");
	Для Каждого ТекущийКонтрагент Из СписокУчастников Цикл
		Если НЕ ЗначениеЗаполнено(ТекущийКонтрагент.Ключ) Тогда
			УдалитьЗаписи.Добавить(ТекущийКонтрагент.Ключ);
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущийКонтрагент.Значение) Тогда
			УдалитьЗаписи.Добавить(ТекущийКонтрагент.Ключ);
			Результат.Сообщение.Добавить(СтрШаблон(ШаблонСообщения, ТекущийКонтрагент.Ключ));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущийУчастник Из УдалитьЗаписи Цикл
		СписокУчастников.Удалить(ТекущийУчастник);
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверкаКлючаСессии(КлючСессии, ОтветЗапроса, ПараметрыЗапроса, ПараметрыКоманды, АдресРезультата, ТребуетсяКлючСессии)
	
	НовыйКлюч = Ложь;
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда
		СтруктураКлюча = ТекущийКодСессииОрганизации(ПараметрыКоманды.Организация);
		Если СтруктураКлюча = Неопределено Тогда
			ПолученияКлючаСессии(ПараметрыКоманды, ОтветЗапроса);
			Если ОтветЗапроса.Свойство("КлючСессии") Тогда
				КлючСессии = ОтветЗапроса.КлючСессии;
				ОтветЗапроса.Удалить("КлючСессии");
			КонецЕсли;
			СтруктураКлюча = ТекущийКодСессииОрганизации(ПараметрыКоманды.Организация);
			Если СтруктураКлюча <> Неопределено Тогда
				НовыйКлюч = Истина;
			КонецЕсли;
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтветЗапроса.Свойство("ТекстОшибки") Тогда
		Если ПустаяСтрока(ОтветЗапроса.ТекстОшибки) Тогда
			ОтветЗапроса.ТекстОшибки = НСтр("ru = 'Не удалось получить данные авторизации'");
		КонецЕсли;
		// вываливаемся
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		ОтветЗапроса.Успешно = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии И ПараметрыКоманды.Свойство("ПодписьДанныхАутентификации") Тогда
		
		ПодписьДанныхАутентификации = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыКоманды, "ПодписьДанныхАутентификации", "");
		Если ЗначениеЗаполнено(ПодписьДанныхАутентификации) Тогда
			ПолучениеКлюча = Новый Структура("КлючСессииПолучен,ТекстОшибки", Ложь, "");
			УстановитьПолученныйКлючСессии(
				ПараметрыКоманды.Организация,
				ПолучениеКлюча,
				ПараметрыЗапроса,
				ПараметрыКоманды,
				ПодписьДанныхАутентификации);
			Если НЕ ПустаяСтрока(ПолучениеКлюча.ТекстОшибки) Тогда
				ОтветЗапроса.Вставить("ТекстОшибки", ПолучениеКлюча.ТекстОшибки);
				ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
				ОтветЗапроса.Успешно = Истина;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКлюча = ПолучитьСформироватьКлючСессии(ПараметрыКоманды.Организация);
		
		Если НЕ ПустаяСтрока(СтруктураКлюча.ТекстОшибки) Тогда
			ОтветЗапроса.Вставить("ТекстОшибки", СтруктураКлюча.ТекстОшибки);
		Иначе
			КлючСессии = СтруктураКлюча.КлючСессии;
		КонецЕсли;
		
		НовыйКлюч = Истина;
		
	КонецЕсли;
	
	// Если ключ не получен, то дальнейшая отправка смысла не имеет
	Если ПустаяСтрока(КлючСессии) И ТребуетсяКлючСессии Тогда
		
		ОтветЗапроса.Удалить("ТекстОшибки");
		ОтветЗапроса.Успешно = Истина;
		ПоместитьВоВременноеХранилище(ОтветЗапроса, АдресРезультата);
		Возврат Ложь;
		
	Иначе
		
		ОтветЗапроса.Вставить("КлючСессии", СтруктураКлюча);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтатусУчастникаГИСМТ(СтатусУчастника)
	
	ПредставлениеСтатуса = ВРег(СтатусУчастника);
	
	Если ПредставлениеСтатуса = "REGISTERED"
		ИЛИ ПредставлениеСтатуса = "ЗАРЕГИСТРИРОВАН" Тогда
		
		Возврат Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.Зарегистрирован;
		
	ИначеЕсли ПредставлениеСтатуса = "PRE_REGISTERED"
		ИЛИ ПредставлениеСтатуса = "ПРЕДВАРИТЕЛЬНАЯ РЕГИСТРАЦИЯ НАЧАЛАСЬ" Тогда
		
		Возврат Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.ПредварительнаяРегистрацияНачалась;
		
	ИначеЕсли ПредставлениеСтатуса = "NOT_REGISTERED"
		ИЛИ ПредставлениеСтатуса = "НЕ ЗАРЕГИСТРИРОВАН" Тогда
		
		Возврат Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.НеЗарегистрирован;
		
	ИначеЕсли ПредставлениеСтатуса = "REMOVED"
		ИЛИ ПредставлениеСтатуса = "УДАЛЕН" Тогда
		
		Возврат Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.Удален;
		
	ИначеЕсли ПредставлениеСтатуса = "RESTORED"
		ИЛИ ПредставлениеСтатуса = "ВОССТАНОВЛЕН" Тогда
		
		Возврат Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.Восстановлен;
		
	ИначеЕсли ПредставлениеСтатуса = "BLOCKED"
		ИЛИ ПредставлениеСтатуса = "ЗАБЛОКИРОВАН" Тогда
		
		Возврат Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.Заблокирован;
		
	ИначеЕсли ПредставлениеСтатуса = "PRE_REGISTERED_ISSUER"
		ИЛИ ПредставлениеСтатуса = "ПРЕДВАРИТЕЛЬНАЯ РЕГИСТРАЦИЯ ПРОИЗВОДИТЕЛЯ" Тогда
		
		Возврат Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.ПредварительнаяРегистрацияПроизводителя;
		
	ИначеЕсли ПредставлениеСтатуса = "PRE_REGISTERED_TRADER"
		ИЛИ ПредставлениеСтатуса = "ПРЕДВАРИТЕЛЬНАЯ РЕГИСТРАЦИЯ ПРОДАВЦА" Тогда
		
		Возврат Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.ПредварительнаяРегистрацияПродавца;
		
	КонецЕсли;
	
	Возврат Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.НеЗарегистрирован;
	
КонецФункции

Процедура ОбновитьСтатусКонтрагента(Контрагент, ДанныеСтатуса, Сообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектКонтрагент = Контрагент.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ОбъектКонтрагент, ДанныеСтатуса);
	ОбъектКонтрагент.ОбменДанными.Загрузка = Истина;
	
	Попытка
		
		ОбъектКонтрагент.Записать();
		Сообщения.Добавить(СтрШаблон(НСтр("ru = 'Получен статус участника ГИС МТ %1'"), Контрагент));
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка в результате получения статуса УОТ ГИС МТ'",
				ОбщегоНазначения.КодОсновногоЯзыка()
			),
			УровеньЖурналаРегистрации.Ошибка,,
			Контрагент,
				НСтр("ru = 'Ошибка в при записи статуса ГИС МТ контрагенту:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Сообщения.Добавить(
			СтрШаблон(НСтр("ru = 'Не удалось обновить статус в ГИС МТ контрагента %1 по причине: %2'"),
			Контрагент,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		
	КонецПопытки;
	
КонецПроцедуры

Функция СписокПроверкиСтатусовУчастников(СрокОбновления)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ЮридическоеЛицо)
	|	И Контрагенты.ИНН <> """"
	|	И Контрагенты.ДатаПолученияСтатусаГИСМТ = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ИндивидуальныйПредприниматель)
	|	И Контрагенты.ИНН <> """"
	|	И Контрагенты.ДатаПолученияСтатусаГИСМТ = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ЮридическоеЛицо)
	|	И Контрагенты.ИНН <> """"
	|	И РАЗНОСТЬДАТ(Контрагенты.ДатаПолученияСтатусаГИСМТ, &ТекущаяДата, ДЕНЬ) >= &СрокОбновления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ИндивидуальныйПредприниматель)
	|	И Контрагенты.ИНН <> """"
	|	И РАЗНОСТЬДАТ(Контрагенты.ДатаПолученияСтатусаГИСМТ, &ТекущаяДата, ДЕНЬ) >= &СрокОбновления";
	Запрос.УстановитьПараметр("СрокОбновления", СрокОбновления);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ОтправитьЗапросОбноваленияСтатусовУчастника(СписокИНН, СтруктураКлючаСессии, Организация)
	
	// Проверим нужен ли нам новый ключ сессии
	РазностьВремени = 1800;
	
	Если СтруктураКлючаСессии.КлючСессии.СрокДействия > (ТекущаяДатаСеанса() - РазностьВремени) Тогда
		
		СтруктураКлючаСессии = КлючСессии(Организация);
		
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("СписокИНН", СписокИНН);
	ПараметрыЗапроса.Вставить("Организация", Организация);
	ПараметрыЗапроса.Вставить("НеТребуетсяКлючСессии", Ложь);
	ПараметрыЗапроса.Вставить("ЗаполнятьИНН", Ложь);
	ПараметрыЗапроса.Вставить("КлючСессии", СтруктураКлючаСессии.КлючСессии.Ключ);
	
	ЗапросСтатусаУчастниковПоИНН(ПараметрыЗапроса, "");
	
КонецПроцедуры // ОтправитьЗапросОбноваленияСтатусовУчастника()

Функция ДокументЕщеНеОбработан(ТекстОшибки)
	
	СтруктураОтвета = ТекстJSONВОбъект(ТекстОшибки);
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура") Тогда
		
		КодОшибки = 404;
		СообщениеОшибки = "Requested entity was not found";
		Код = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтвета, "code", 0);
		Сообщение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтвета, "error_message", "");
		
		Если Код = КодОшибки И Сообщение = СообщениеОшибки Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОтправитьЗапросНаПолучениеСведенийПоФильтру(ПараметрыКоманды, ПараметрыЗапроса, ОтветЗапроса, КлючСессии)
	
	ПараметрыОтбора = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "ПараметрыОтбора", Неопределено);
	
	Если ПараметрыОтбора = Неопределено
		ИЛИ Не ПараметрыОтбора.Свойство("ТоварныеГруппы") Тогда
		ОтветЗапроса.Вставить("ТекстОшибки", НСтр("ru = 'Для получения кодов маркировки не переданы группы товаров. Операция отменена.'"));
		Возврат;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	
	ЕстьОтборНачалоПериода = Ложь;
	
	URLЗапроса = "api/v4/true-api/cises/search";
	
	ПоследняяЗапись = Новый Структура("sgtin, lastEmissionDate");
	Данные = Новый Массив;
	
	ТипыМаркировки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыМаркировки, ПараметрыОтбора.ТоварныеГруппы, Истина);
	ТоварныеГруппыМаркировок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТипыМаркировки, "ТоварнаяГруппа");
	ТоварныеГруппы = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ТоварныеГруппыМаркировок Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Значение) Тогда
			ТоварныеГруппы.Добавить(ТекущаяСтрока.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТоварныеГруппы);
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("filter", Новый Структура());
	
	Если ПараметрыОтбора.Свойство("GTIN") Тогда
		КодыТоваров = Новый Массив;
		КодыТоваров.Добавить(ПараметрыОтбора.GTIN);
		ТелоЗапроса.filter.Вставить("gtins", КодыТоваров);
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("КодТНВЭД") Тогда
		ТелоЗапроса.filter.Вставить("tnVed10", ПараметрыОтбора.КодТНВЭД);
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("Статус") Тогда
		СтатусыОтбора = Новый Структура;
		Для Каждого Значение Из ПараметрыОтбора.Статус Цикл
			СтатусыОтбора.Вставить(СтрШаблон("status", Значение.Значение));
		КонецЦикла;
		ТелоЗапроса.filter.Вставить("states", СтатусыОтбора);
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("ТипЭмиссии") Тогда
		ТелоЗапроса.filter.Вставить("emissionTypes", ПараметрыОтбора.ТипЭмиссии);
	КонецЕсли;
	
	ЕстьНачалоПериода = ПараметрыОтбора.Свойство("НачалоПериода");
	ЕстьКонецПериода  = ПараметрыОтбора.Свойство("КонецПериода");
	
	Если ЕстьНачалоПериода ИЛИ ЕстьКонецПериода Тогда
		
		ДатыЭмиссии = Новый Структура();
		Если ЕстьНачалоПериода Тогда
			ЕстьОтборНачалоПериода = Истина;
			ДатыЭмиссии.Вставить("from", ДатаСЧасовымПоясом(ПараметрыОтбора.НачалоПериода));
		КонецЕсли;
		
		Если ЕстьКонецПериода Тогда
			ДатыЭмиссии.Вставить("to", ДатаСЧасовымПоясом(ПараметрыОтбора.КонецПериода));
		КонецЕсли;
		
		ТелоЗапроса.filter.Вставить("emissionDatePeriod", ДатыЭмиссии);
		
	КонецЕсли;
	ТелоЗапроса.filter.Вставить("productGroups", ТоварныеГруппы);
	ТелоЗапроса.Вставить("pagination", Новый Структура("perPage", "1000"));
	
	Пока Истина Цикл
		
		РезультатЗапроса = ОтправитьЗапросВСервис(
			URLЗапроса,
			ТелоЗапроса,
			ПараметрыЗапроса,
			"POST",
			Неопределено,
			ЗаголовокHTTP
		);
		
		РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
		
		Если РезультатОтправки.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ОтветЗапроса.Вставить("ТекстОшибки", 
					СтрШаблон(НСтр("ru = 'Ошибка в результате отправки запроса состояния кодов маркировки: %1'"),
					РезультатОтправки.СообщениеОтвета)
				);
				Прервать;
				
			Иначе
				
				КоличествоДоДобавления = Данные.Количество();
				КодыМаркировки = Новый Массив;
				ДополнитьМассив(
					Данные,
					ПодготовитьДанныеСверкиЧерезTrueApi(ДанныеОбработки, ПоследняяЗапись, КодыМаркировки),
					Истина
				);
				
				Если КодыМаркировки.Количество() > 0 Тогда
					ДополнитьДанныеКодовМаркировки(КодыМаркировки, ЗаголовокHTTP, ПараметрыЗапроса, Данные, ОтветЗапроса);
				КонецЕсли;
				
				Если Данные.Количество() = КоличествоДоДобавления Тогда
					// по какой-то причине мы зациклились..
					Прервать;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПоследняяЗапись.sgtin) Тогда
					ТелоЗапроса.pagination.Вставить("sgtin", ПоследняяЗапись.sgtin);
					ТелоЗапроса.pagination.Вставить("lastEmissionDate", ПоследняяЗапись.lastEmissionDate);
				Иначе
					Прервать;
				КонецЕсли;
				
				ОтветЗапроса.Данные = Данные;
				ОтветЗапроса.Успешно = Истина;
				
			КонецЕсли;
			
		Иначе
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка в результате получения состояния кодов маркировки'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
				),
				УровеньЖурналаРегистрации.Ошибка,
				, ,
				НСтр("ru = 'Ошибка в результате получения состояния кодов маркировки:'")
					+ Символы.ПС
					+ ?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки)
			);
			
			ОтветЗапроса.Вставить("ТекстОшибки",
				НСтр("ru = 'Ошибка в результате получения состояния кодов маркировки: подробности в Журнале регистрации'")
			);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьДанныеСверкиЧерезTrueApi(ДанныеОбработки, ПоследняяЗапись, КодыМаркировки)
	
	Результат = Новый Массив;
	СоответствиеКодов = ДанныеОбработки.Получить("result");
	ПоследняяЗапись = Новый Структура("sgtin, lastEmissionDate");
	
	Для Каждого КлючЗначение Из СоответствиеКодов Цикл
		СтрокаРезультата = Новый Структура("GTIN, Наименование, Производитель, Владелец, ПричинаВыводаИзОборота,
		| КодМаркировки, ДатаЭмиссии, АктуальныйСтатус");
		СтрокаРезультата.GTIN = КлючЗначение.Получить("gtin");
		
		СтрокаРезультата.Наименование = КлючЗначение.Получить("productName");
		СтрокаРезультата.Производитель = КлючЗначение.Получить("producerName");
		СтрокаРезультата.Владелец = КлючЗначение.Получить("ownerName");
		СтрокаРезультата.ПричинаВыводаИзОборота = КлючЗначение.Получить("eliminationReason");
		СтрокаРезультата.КодМаркировки = СтрШаблон(
			"%1%2",
			КлючЗначение.Получить("cis"),
			ПолучитьМРЦПоШаблону(КлючЗначение.Получить("mrp")));
		СтрокаРезультата.ДатаЭмиссии = КлючЗначение.Получить("emissionDate");
		СтрокаРезультата.АктуальныйСтатус = КлючЗначение.Получить("status");
		ПоследняяЗапись.sgtin = КлючЗначение.Получить("sgtin");
		ПоследняяЗапись.lastEmissionDate = СтрокаРезультата.ДатаЭмиссии;
		Результат.Добавить(СтрокаРезультата);
		КодыМаркировки.Добавить(СокрЛП(СтрокаРезультата.КодМаркировки));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьДанныеКодовМаркировки(КодыМаркировки, ЗаголовокHTTP, ПараметрыЗапроса, Данные, ОтветЗапроса)
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		"api/v3/true-api/cises/info",
		КодыМаркировки,
		ПараметрыЗапроса,
		"POST",
		Неопределено,
		ЗаголовокHTTP);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета, Истина);
		
		Если ДанныеОбработки = Неопределено Тогда
			
			ОтветЗапроса.Вставить("ТекстОшибки", 
				СтрШаблон(НСтр("ru = 'Ошибка в результате отправки запроса состояния кодов маркировки: %1'"),
				РезультатОтправки.СообщениеОтвета)
			);
			Возврат;
			
		Иначе
			
			ЗаполнитьДополнительнуюИнформациюОКодеМаркировки(ДанныеОбработки, Данные);
			
		КонецЕсли;
		
	Иначе
	
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка в результате получения состояния кодов маркировки'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
			),
			УровеньЖурналаРегистрации.Ошибка,
			, ,
			НСтр("ru = 'Ошибка в результате получения состояния кодов маркировки:'")
				+ Символы.ПС
				+ ?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки)
		);
			
		ОтветЗапроса.Вставить("ТекстОшибки",
			НСтр("ru = 'Ошибка в результате получения состояния кодов маркировки: подробности в Журнале регистрации'")
		);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительнуюИнформациюОКодеМаркировки(ДанныеОбработки, Данные)
	
	// Попробуем по GTIN определить наименование товара
	НаименованиеПоГТИН = Новый Соответствие();
	
	Для Каждого ТекущийКодМаркировки Из ДанныеОбработки Цикл
		
		ДанныеКодаМаркировки = ТекущийКодМаркировки.Получить("cisInfo");
		КодМаркировки = ?(ДанныеКодаМаркировки.Получить("requestedCis") <> Неопределено,
			ДанныеКодаМаркировки.Получить("requestedCis"),
			ДанныеКодаМаркировки.Получить("cis"));
		
		Для Каждого ИнформацияОКодеМаркировки Из Данные Цикл
			
			Если КодМаркировки = ИнформацияОКодеМаркировки.КодМаркировки Тогда
				
				ИмяТовара = ДанныеКодаМаркировки.Получить("productName");
				Если ЗначениеЗаполнено(ИмяТовара) Тогда
					ИнформацияОКодеМаркировки.Наименование = ДанныеКодаМаркировки.Получить("productName");
					НаименованиеПоГТИН.Вставить(ИнформацияОКодеМаркировки.gtin, ИнформацияОКодеМаркировки.Наименование);
				Иначе
					ИнформацияОКодеМаркировки.Наименование = НаименованиеПоГТИН.Получить(ИнформацияОКодеМаркировки.gtin);
				КонецЕсли;
				ИнформацияОКодеМаркировки.Производитель = ДанныеКодаМаркировки.Получить("producerName");
				ИнформацияОКодеМаркировки.Владелец = ДанныеКодаМаркировки.Получить("ownerName");
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения,
//	ТолькоУникальныеЗначения - булево, необязательный, если истина, 
//		то в массив будут включены только те значения, которых в нем еще нет, причем единожды.
// 
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь)
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение.КодМаркировки, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение.КодМаркировки] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение.КодМаркировки, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМРЦПоШаблону(МРЦ)
	
	Если МРЦ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	КодировкаМРЦ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?";
	
	ОстатокПоМРЦ = МРЦ;
	КоличествоСиволов = 80;
	ЗакодированнаяМРЦ = "";
	
	Пока ОстатокПоМРЦ > 0 Цикл
		
		ОстатокОтДеления = ОстатокПоМРЦ % КоличествоСиволов;
		ОстатокПоМРЦ = Цел(ОстатокПоМРЦ / КоличествоСиволов);
		
		ЗакодированнаяМРЦ = Сред(КодировкаМРЦ, ОстатокОтДеления + 1, 1) + ЗакодированнаяМРЦ;
		
	КонецЦикла;
	
	Пока СтрДлина(ЗакодированнаяМРЦ) < 4 Цикл
		ЗакодированнаяМРЦ = "A" + ЗакодированнаяМРЦ;
	КонецЦикла;
	
	Возврат ЗакодированнаяМРЦ;
	
КонецФункции

Функция ТокенДляККТ(Организация, ПараметрыЗапроса)
	
	Если Не ПустаяСтрока(ПараметрыЗапроса.ТокенДляККТ) Тогда
		
		Возврат ПараметрыЗапроса.ТокенДляККТ;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗапроса.Сертификат) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	// Подпишем сертификатом данные.
	ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки("РазрешительныйРежим");
	ДанныеВBase64 = Base64Строка(ДвоичныеДанныеСтроки);
	
	// Подпишем полученные данные
	Попытка
		Подпись = ПодписатьДанные(
			ДанныеВBase64,
			ПараметрыЗапроса.Сертификат,
			Ложь);
	Исключение
		Возврат "";
	КонецПопытки;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	
	URLЗапроса = "api/v3/true-api/auth/permissive-access";
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("data", Подпись);
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		URLЗапроса,
		ТелоЗапроса,
		ПараметрыЗапроса,
		"POST",
		Неопределено,
		ЗаголовокHTTP);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета, Истина);
		
		Если ДанныеОбработки = Неопределено Тогда
			
			Возврат "";
			
		Иначе
			
			// Зафиксируем в настройке токен.
			Если Не ПустаяСтрока(ДанныеОбработки["access_token"]) Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	НастройкаОбменаМаркировкиТоваров.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.НастройкаОбменаМаркировкиТоваров КАК НастройкаОбменаМаркировкиТоваров
				|ГДЕ
				|	НастройкаОбменаМаркировкиТоваров.Организация = &Организация
				|	И НастройкаОбменаМаркировкиТоваров.Сертификат = &Сертификат";
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("Сертификат", ПараметрыЗапроса.Сертификат);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					НастройкаОбмена = Выборка.Ссылка.ПолучитьОбъект();
					НастройкаОбмена.ТокенДляККТ = ДанныеОбработки["access_token"];
					НастройкаОбмена.ОбменДанными.Загрузка = Истина;
					НастройкаОбмена.Записать();
					
				КонецЕсли;
				
				Возврат ДанныеОбработки["access_token"];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция АктуальныйСписокCDNПлощадок(
		ПараметрыЗапроса,
		ТокенДляККТ,
		ПроверятьДатуОбновленияПлощадок = Истина)
	
	ДатаПроверкиСпискаCDNПлощадок = ТекущаяУниверсальнаяДата();
	РезультатАктуализации = Новый Структура();
	РезультатАктуализации.Вставить("СписокCDNПлощадок", Новый Соответствие());
	РезультатАктуализации.Вставить("ТекстОшибки", "");
	РезультатАктуализации.Вставить("КодОшибки", "");
	РезультатАктуализации.Вставить("ДатаОбновленияCDNПлощадок", ДатаПроверкиСпискаCDNПлощадок);
	
	ДатаПоследнегоПолученияПлощадки = ПоследнееОбновлениеCDNПлощадки();
	ШестьЧасов = 3456;
	
	// Если дата последней загрузки площадки менее шести часов, то обновления не требуется.
	Если ПроверятьДатуОбновленияПлощадок
		И ДатаПоследнегоПолученияПлощадки <> Дата(1, 1, 1)
		И ДатаПоследнегоПолученияПлощадки + ШестьЧасов > ДатаПроверкиСпискаCDNПлощадок Тогда
		Возврат РезультатАктуализации;
	КонецЕсли;
	
	ПараметрыЗапросаДляCDNПлощадки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыЗапроса);
	ПараметрыЗапросаДляCDNПлощадки.АдресКонтура = ПараметрыЗапросаДляCDNПлощадки.АдресCDNПлощадок;
	
	// Сформируем запрос обновления CDN-площадки
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("X-API-KEY", ТокенДляККТ);
	
	URLЗапроса = "api/v4/true-api/cdn/info";
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		URLЗапроса,
		Неопределено,
		ПараметрыЗапросаДляCDNПлощадки,
		"GET",
		ТокенДляККТ,
		ЗаголовокHTTP);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета, Истина);
		
		Если ДанныеОбработки = Неопределено Тогда
			
			Возврат "";
			
		Иначе
			
			СписокCDNПлощадок = ДанныеОбработки.Получить("hosts");
			
			
			// Обновим информацию о площадках.
			Для Каждого CDNПлощадка Из СписокCDNПлощадок Цикл
				
				АдресCDNПлощадки = CDNПлощадка.Получить("host");
				ПолучитьСостояниеCDNПлощадки(
					АдресCDNПлощадки,
					ТокенДляККТ,
					РезультатАктуализации,
					ПараметрыЗапросаДляCDNПлощадки,
					ЗаголовокHTTP);
				
				// Необходимо обновить токен
				Если РезультатАктуализации.КодОшибки = 401 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка в результате актуализации CDN-площадки'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
			),
			УровеньЖурналаРегистрации.Ошибка,
			, ,
			НСтр("ru = 'Ошибка в результате актуализации CDN-площадки:'")
				+ Символы.ПС
				+ ?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки)
		);
			
		РезультатАктуализации.Вставить("ТекстОшибки",
			НСтр("ru = 'Ошибка в результате актуализации CDN-площадки: подробности в Журнале регистрации'")
		);
		
	КонецЕсли;
	
	Возврат РезультатАктуализации;
	
КонецФункции // АктуализироватьCDNПлощадки()

Функция ПоследнееОбновлениеCDNПлощадки()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	CDNПлощадки.ДатаАктуализации КАК ДатаАктуализации
	|ИЗ
	|	РегистрСведений.CDNПлощадки КАК CDNПлощадки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаАктуализации УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ДатаАктуализации;
	
КонецФункции

Процедура ПолучитьСостояниеCDNПлощадки(
		АдресCDNПлощадки,
		ТокенДляККТ,
		РезультатАктуализации,
		ПараметрыЗапроса,
		ЗаголовокHTTP)
	
	ПараметрыЗапросаСостояния = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыЗапроса);
	ПараметрыЗапросаCDNПлощадки = ЧастиАдресаCDNПлощадки(АдресCDNПлощадки);
	ПараметрыЗапросаСостояния.АдресКонтура = ПараметрыЗапросаCDNПлощадки.Адрес;
	ПараметрыЗапросаСостояния.Порт = ПараметрыЗапросаCDNПлощадки.Порт;
	ПараметрыЗапросаСостояния.ЗащищенноеСоединение = ПараметрыЗапросаCDNПлощадки.ЗащищенноеСоединение;
	
	URLЗапроса    = "api/v4/true-api/cdn/health/check";
	НачалоОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		URLЗапроса,
		Неопределено,
		ПараметрыЗапросаСостояния,
		"GET",
		ТокенДляККТ,
		ЗаголовокHTTP);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета, Истина);
		ВремяПроверки = 0;
		
		Если ДанныеОбработки.Получить("avgTimeMs") <> Неопределено Тогда
			ВремяПроверки = ДанныеОбработки.Получить("avgTimeMs");
		КонецЕсли;
		
		СостояниеПлощадки = Новый Структура();
		СостояниеПлощадки.Вставить("ВремяВыполненияОперации", ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОперации);
		СостояниеПлощадки.Вставить("ВремяПроверки", ВремяПроверки);
		СостояниеПлощадки.Вставить("ДатаОбновленияCDNПлощадок", РезультатАктуализации.ДатаОбновленияCDNПлощадок);
		
		Если РезультатАктуализации.Свойство("СписокCDNПлощадок") Тогда
			РезультатАктуализации.СписокCDNПлощадок.Вставить(АдресCDNПлощадки, СостояниеПлощадки);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РезультатАктуализации, СостояниеПлощадки, Ложь);
		КонецЕсли;
		
	ИначеЕсли РезультатОтправки.КодСостояния = 429
		ИЛИ (РезультатОтправки.КодСостояния >= 500 И РезультатОтправки.КодСостояния < 600) Тогда
		
		Если ПолучитьЗначениеПараметраСтруктуры(РезультатАктуализации, "КодОшибки", 0) <> 0 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета, Истина);
			
			КодСостояния = 0;
			Если ДанныеОбработки.Получить("code") <> Неопределено Тогда
				КодСостояния = ДанныеОбработки.Получить("code");
			КонецЕсли;
			
			// Данная площадка повторно проверена, но еще не доступна.
			// Устанавливаем недостуность площадки на 15 минут.
			ПятнадцатьМинут = 900;
			СостояниеПлощадки = Новый Структура();
			СостояниеПлощадки.Вставить("ПропуститьПроверкуПроверки", КодСостояния = 5000);
			СостояниеПлощадки.Вставить("ВремяВыполненияОперации", ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОперации);
			СостояниеПлощадки.Вставить("ВремяПроверки", 0);
			СостояниеПлощадки.Вставить("ДатаОбновленияCDNПлощадок", РезультатАктуализации.ДатаОбновленияCDNПлощадок);
			СостояниеПлощадки.Вставить("ДатаНедоступностиДо", ТекущаяУниверсальнаяДата() + ПятнадцатьМинут);
			Если РезультатАктуализации.Свойство("СписокCDNПлощадок") Тогда
				РезультатАктуализации.СписокCDNПлощадок.Вставить(АдресCDNПлощадки, СостояниеПлощадки);
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РезультатАктуализации, СостояниеПлощадки);
			КонецЕсли;
			Возврат;
			
		КонецЕсли;
		
		РезультатАктуализации.Вставить("КодОшибки", РезультатОтправки.КодСостояния);
		
		// Повторяем запрос
		ПолучитьСостояниеCDNПлощадки(
			АдресCDNПлощадки,
			ТокенДляККТ,
			РезультатАктуализации,
			ПараметрыЗапроса,
			ЗаголовокHTTP);
		
	ИначеЕсли Не ПустаяСтрока(РезультатОтправки.ТекстОшибки)
			ИЛИ Не ПустаяСтрока(РезультатОтправки.СообщениеОтвета) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка в результате получения состояния CDN-площадки'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
			),
			УровеньЖурналаРегистрации.Ошибка,
			, ,
			СтрШаблон(НСтр("ru = 'Ошибка в результате получения состояния CDN-площадки %1%2%3'"),
				АдресCDNПлощадки,
				Символы.ПС,
				?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки))
		);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЧастиАдресаCDNПлощадки(Адрес)
	
	Результат = Новый Структура("Адрес,Порт,ЗащищенноеСоединение");
	ЧастиАдреса = СтрРазделить(Адрес, "/", Ложь);
	
	Протокол = СокрЛП(ЧастиАдреса[0]) + "//";
	ЧастиАдреса.Удалить(0);
	
	ЧастиИмени = СтрРазделить(СокрЛП(ЧастиАдреса[0]), ":");
	ЧастиАдреса.Удалить(0);
	Результат.Адрес = ЧастиИмени[0];
	ПортСервера = ?(ЧастиИмени.Количество() = 1, "", СокрЛП(ЧастиИмени[1]));
	Результат.Порт = ?(ПустаяСтрока(ПортСервера), 443, Число(ПортСервера));
	Если Протокол = "http://" Тогда
		Результат.ЗащищенноеСоединение = Ложь;
	Иначе
		Результат.ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьВРегистрCDNПлощадок(СписокCDNПлощадок)
	
	РезультатВозврата = Новый Структура("ТекстОшибки", "");
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.CDNПлощадки");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
	
		НаборЗаписей = РегистрыСведений.CDNПлощадки.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
		
		Для Каждого СтрокаСпискаПлощадок Из СписокCDNПлощадок Цикл
			
			ЗаписьРегистра = РегистрыСведений.CDNПлощадки.СоздатьМенеджерЗаписи();
			
			ЗаписьРегистра.Адрес = СтрокаСпискаПлощадок.Ключ;
			ЗаписьРегистра.ДатаАктуализации = СтрокаСпискаПлощадок.Значение.ДатаОбновленияCDNПлощадок;
			ЗаписьРегистра.ВремяОтвета = СтрокаСпискаПлощадок.Значение.ВремяВыполненияОперации;
			ЗаписьРегистра.ВремяПроверкиКодаМаркировки = СтрокаСпискаПлощадок.Значение.ВремяПроверки;
			
			Если СтрокаСпискаПлощадок.Значение.Свойство("ДатаНедоступностиДо") Тогда
				
				ЗаписьРегистра.ДатаНедоступностиДо = СтрокаСпискаПлощадок.Значение.ДатаНедоступностиДо;
				
			КонецЕсли;
			
			ЗаписьРегистра.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		РезультатВозврата.ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат РезультатВозврата;
	
КонецФункции

Функция ПроверитьКодыМаркировки(
		ПараметрыКоманды,
		ПараметрыЗапроса,
		КлючСессии)
	
	Результат = Новый Структура();
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("КодыМаркировки", Новый Соответствие());
	
	// Сформируем запрос проверки.
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("X-API-KEY", КлючСессии);
	
	ПолучениеАдресаCDNПлощадки = CDNПлощадкаДляПроверки(ПараметрыЗапроса, КлючСессии, ЗаголовокHTTP);
	
	// Достуных площадок не найдено.
	Если ЗначениеЗаполнено(ПолучениеАдресаCDNПлощадки.ТекстОшибки) Тогда
		ЗаполнитьЗначенияСвойств(Результат, ПолучениеАдресаCDNПлощадки);
		Возврат Результат;
	ИначеЕсли ПустаяСтрока(ПолучениеАдресаCDNПлощадки.АдресCDNПлощадки) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Сервис проверки кодов в разрешительном режиме недоступен.'");
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЗапросаПроверки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыЗапроса);
	ПараметрыЗапросаCDNПлощадки = ЧастиАдресаCDNПлощадки(ПолучениеАдресаCDNПлощадки.АдресCDNПлощадки);
	ПараметрыЗапросаПроверки.АдресКонтура = ПараметрыЗапросаCDNПлощадки.Адрес;
	ПараметрыЗапросаПроверки.Порт = ПараметрыЗапросаCDNПлощадки.Порт;
	ПараметрыЗапросаПроверки.ЗащищенноеСоединение = ПараметрыЗапросаCDNПлощадки.ЗащищенноеСоединение;
	
	ПолныеКодыМаркировки = ПолныеКодыМаркировки(ПараметрыКоманды.КодыМаркировки);
	Если ПараметрыКоманды.Свойство("Документ") Тогда
		ЭтоВозвратКодаМаркировки = ДокументВозвратаКодаМаркировки(ПараметрыКоманды.Документ);
	Иначе
		ЭтоВозвратКодаМаркировки = Ложь;
	КонецЕсли;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("codes", ПолныеКодыМаркировки);
	
	URLЗапроса = "api/v4/true-api/codes/check";
	
	РезультатЗапроса = ОтправитьЗапросВСервис(
		URLЗапроса,
		ТелоЗапроса,
		ПараметрыЗапросаПроверки,
		"POST",
		КлючСессии,
		ЗаголовокHTTP);
	
	РезультатОтправки = ПреобразованиеОтправкаJSON(РезультатЗапроса);
	
	Если Не ПолучитьЗначениеПараметраСтруктуры(РезультатОтправки, "ОтветПолучен", Истина) Тогда
		
		Результат.Вставить("ТекстОшибки", 
			СтрШаблон(НСтр("ru = 'Ошибка в результате проверки кодов маркировки в разрешительном режиме: %1'"),
			РезультатОтправки.СообщениеОтвета)
		);
		Возврат Результат;
		
	КонецЕсли;
	
	Если РезультатОтправки.КодСостояния = 200 Тогда
		
		ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправки.СообщениеОтвета, Истина);
		
		Если ДанныеОбработки = Неопределено Тогда
			
			Результат.Вставить("ТекстОшибки", 
				СтрШаблон(НСтр("ru = 'Ошибка в результате проверки кодов маркировки в разрешительном режиме: %1'"),
				РезультатОтправки.СообщениеОтвета)
			);
			
		Иначе
			
			КодыОшибкиПриПроверкеКодаМаркировки = КодыОшибкиПриПроверкеКодаМаркировки();
			ДанныеПоКодамМаркировки = ДанныеОбработки.Получить("codes");
			Для Каждого ЭлементДанных Из ДанныеПоКодамМаркировки Цикл
				
				КодОшибки = ЭлементДанных["errorCode"];
				СообщениеОбОшибке = ЭлементДанных["message"];
				ТекстОшибки = "";
				
				Если ЗначениеЗаполнено(КодОшибки) Тогда
					
					ОписаниеОшибки = КодыОшибкиПриПроверкеКодаМаркировки.Получить(КодОшибки);
					
					Если ОписаниеОшибки = Неопределено Тогда
						
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Возникала ошибка при проверке кода маркирвоки в разрешительном режиме.
							|Описание из сервиса: %1.'"),
							?(СообщениеОбОшибке = Неопределено, "ошибка не указана", СообщениеОбОшибке));
						
					Иначе
						
						ТекстОшибки = ОписаниеОшибки;
						
					КонецЕсли;
					
				Иначе
					
					Если ЭлементДанных["found"] = Ложь Тогда
						
						ТекстОшибки = НСтр("ru = 'Код маркировки не найден в ГИС МТ.'");
						
					ИначеЕсли ЭлементДанных["utilised"] = Ложь Тогда
						
						ТекстОшибки = НСтр("ru = 'Код маркировки эмитирован, но нет информации о его нанесении.'");
						
					ИначеЕсли ЭлементДанных["verified"] = Ложь Тогда
						
						ТекстОшибки = НСтр("ru = 'Не пройдена криптографическая проверка кода маркировки.'");
						
					ИначеЕсли Не ЭтоВозвратКодаМаркировки И ЭлементДанных["sold"] = Истина Тогда
						
						ТекстОшибки = НСтр("ru = 'Код маркировки ранее был выведен из оборота.'");
						
					ИначеЕсли ЭтоВозвратКодаМаркировки И ЭлементДанных["sold"] = Ложь Тогда
						
						ТекстОшибки = НСтр("ru = 'Код маркировки ранее не был выведен из оборота.'");
						
					ИначеЕсли ЭлементДанных["isBlocked"] = Истина
						И ЭлементДанных["ogvs"] <> Неопределено Тогда
						
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Код маркировки заблокирован по решению %1'"), 
							ПредставлениеОргановГосударственнойВласти(ЭлементДанных["ogvs"]));
						
					ИначеЕсли Не ЭтоВозвратКодаМаркировки И ЭлементДанных["realizable"] = Ложь Тогда
						
						ТекстОшибки = НСтр("ru = 'Нет информации о вводе в оборот.'");
						
					ИначеЕсли ЭлементДанных["valid"] = Ложь Тогда
						
						ТекстОшибки = НСтр("ru = 'Структура данных кода маркировки некорректна.'");
						
					ИначеЕсли СообщениеОбОшибке <> Неопределено Тогда
						
						ШаблонПодсказки   = НСтр("ru = 'Возникала ошибка при проверке кода маркирвоки в разрешительном режиме.
						|Описание из сервиса: %1.'");
						
						ТекстОшибки = СтрШаблон(ШаблонПодсказки, СообщениеОбОшибке);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ДатаЗапроса = Формат(ДанныеОбработки.Получить("reqTimestamp"), "ЧГ=0");
				ИдентификаторЗапроса = ДанныеОбработки.Получить("reqId");
				ЗначениеОтраслевогоРеквизита = СтрШаблон("UUID=%1&Time=%2", ИдентификаторЗапроса, ДатаЗапроса);
				
				КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(ЭлементДанных["printView"]);
				
				ОписаниеРезультатаПроверки = Новый Структура();
				ОписаниеРезультатаПроверки.Вставить("ЗначениеОтраслевогоРеквизита", ЗначениеОтраслевогоРеквизита);
				ОписаниеРезультатаПроверки.Вставить("ТекстОшибки", ТекстОшибки);
				
				Результат.КодыМаркировки.Вставить(КодМаркировки, ОписаниеРезультатаПроверки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка в результате проверки кодов маркировки в разрешительном режиме'",
				ОбщегоНазначения.КодОсновногоЯзыка()
			),
			УровеньЖурналаРегистрации.Ошибка,
			, ,
			НСтр("ru = 'Ошибка в результате проверки кодов маркировки в разрешительном режиме:'")
				+ Символы.ПС
				+ ?(РезультатОтправки.ТекстОшибки = "", РезультатОтправки.СообщениеОтвета, РезультатОтправки.ТекстОшибки)
		);
		
		Результат.Вставить("ТекстОшибки",
			НСтр("ru = 'Ошибка в результате проверки кодов маркировки в разрешительном режиме: подробности в Журнале регистрации'")
		);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДокументВозвратаКодаМаркировки(Документ)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОперацииВозврата = Новый Массив;
	ОперацииВозврата.Добавить(Справочники.ХозОперации.ЧекНаВозврат);
	ОперацииВозврата.Добавить(Справочники.ХозОперации.ЧекНаОплатуВозврат);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекКоррекции") Тогда
		Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ДокументОснование, "ХозОперация");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ХозОперация");
	КонецЕсли;
	
	Возврат ОперацииВозврата.Найти(ХозОперация) <> Неопределено;
	
КонецФункции

Функция ПолныеКодыМаркировки(СписокКодовМаркировок)
	
	Результат = Новый Массив;
	ПолныеКодыМаркировки = МаркировкаТоваровСервер.КодыМаркировкиВBASE64(СписокКодовМаркировок);
	
	// Переведем полные коды из Base64 в строку с экранированием символа групп (29)
	Для Каждого КодМаркировки Из ПолныеКодыМаркировки Цикл
		
		ПолныйКодМаркировки = МенеджерОборудованияКлиентСервер.Base64ВШтрихкод(КодМаркировки.Значение);
		//ПолныйКодМаркировкиЭранированный = СтрЗаменить(ПолныйКодМаркировки, Символ(29), "\u001d");
		Результат.Добавить(ПолныйКодМаркировки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокДоступныхCNDПлощадок()
	
	// Получим доступные площадки.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	CDNПлощадки.ДатаАктуализации КАК ДатаАктуализации
	|ПОМЕСТИТЬ МаксимальнаяДатаОбновления
	|ИЗ
	|	РегистрСведений.CDNПлощадки КАК CDNПлощадки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаАктуализации УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CDNПлощадки.Адрес КАК Адрес,
	|	CDNПлощадки.ДатаНедоступностиДо КАК ДатаНедоступностиДо,
	|	CDNПлощадки.ДатаАктуализации КАК ДатаАктуализации,
	|	CDNПлощадки.ВремяПроверкиКодаМаркировки + CDNПлощадки.ВремяОтвета КАК Приоритет
	|ИЗ
	|	МаксимальнаяДатаОбновления КАК МаксимальнаяДатаОбновления,
	|	РегистрСведений.CDNПлощадки КАК CDNПлощадки
	|ГДЕ
	|	CDNПлощадки.ДатаАктуализации В
	|			(ВЫБРАТЬ
	|				МаксимальнаяДатаОбновления.ДатаАктуализации КАК ДатаАктуализации
	|			ИЗ
	|				МаксимальнаяДатаОбновления КАК МаксимальнаяДатаОбновления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНедоступностиДо,
	|	Приоритет";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция CDNПлощадкаДляПроверки(ПараметрыЗапроса, КлючСессии, ЗаголовокHTTP)
	
	Результат = Новый Структура();
	Результат.Вставить("АдресCDNПлощадки", "");
	Результат.Вставить("ТекстОшибки", "");
	
	// Получим список доступных CND-площадок.
	ДоступныеCNDПлощадки = СписокДоступныхCNDПлощадок();
	
	Если ДоступныеCNDПлощадки.Количество() = 0 Тогда
		
		// Попробуем еще раз обновить площадки.
		CDNПлощадки = АктуальныйСписокCDNПлощадок(
			ПараметрыЗапроса,
			КлючСессии,
			Ложь);
		
		Если Не ПустаяСтрока(CDNПлощадки.ТекстОшибки) Тогда
			
			// Ошибка при получении площадок.
			Результат.ТекстОшибки = CDNПлощадки.ТекстОшибки;
			Возврат Результат;
			
		КонецЕсли;
		
		// Закэшируем список площадок в базе.
		Если CDNПлощадки.СписокCDNПлощадок.Количество() > 0 Тогда
			
			РезультатОбновления = ЗаписатьВРегистрCDNПлощадок(CDNПлощадки.СписокCDNПлощадок);
			
			Если ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки) Тогда
				
				// Помещаем результат во временное хранилище
				Результат.ТекстОшибки = РезультатОбновления.ТекстОшибки;
				Возврат Результат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДоступныеCNDПлощадки = СписокДоступныхCNDПлощадок();
		
		Если ДоступныеCNDПлощадки.Количество() = 0 Тогда
			
			Результат.ТекстОшибки =
				НСтр("ru = 'Нет доступных CDN-площадок для проверки кодов маркировки в разрешительном режиме'");
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Берем первую площадку по приоритету и получаем ее состояние
	Для Каждого Площадка Из ДоступныеCNDПлощадки Цикл
		
		РезультатАктуализации = Новый Структура();
		РезультатАктуализации.Вставить("ДатаОбновленияCDNПлощадок", Площадка.ДатаАктуализации);
		ПолучитьСостояниеCDNПлощадки(
			Площадка.Адрес,
			КлючСессии,
			РезультатАктуализации,
			ПараметрыЗапроса,
			ЗаголовокHTTP);
		
		Если ПолучитьЗначениеПараметраСтруктуры(РезультатАктуализации, "ПропуститьПроверкуПроверки", Ложь) Тогда
			
			Результат.ТекстОшибки =
				НСтр("ru = 'Сервис трансграничной проверки кодов недоступен. Чек можно пробить без проверки в режиме онлайн.'");
			Возврат Результат;
			
		КонецЕсли;
		
		// Площадка еще не доступна. Зафисируем время ее недостуности и перейдем к выбору другой.
		Если РезультатАктуализации.Свойство("ДатаНедоступностиДо")
			И ЗначениеЗаполнено(РезультатАктуализации.ДатаНедоступностиДо) Тогда
			
			СписокCDNПлощадок = Новый Соответствие;
			СписокCDNПлощадок.Вставить(Площадка.Адрес, РезультатАктуализации);
			ЗаписатьВРегистрCDNПлощадок(СписокCDNПлощадок);
			Продолжить;
			
		КонецЕсли;
		
		// Получили доступную площадку.
		Результат.АдресCDNПлощадки = Площадка.Адрес;
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КодыОшибкиПриПроверкеКодаМаркировки()
	
	ОписаниеОшибкиПоКоду = Новый Соответствие();
	ОписаниеОшибкиПоКоду.Вставить(0, НСтр("ru = 'Ошибки отсутствуют.'"));
	ОписаниеОшибкиПоКоду.Вставить(1, НСтр("ru = 'Ошибка валидации кода маркировки.'"));
	ОписаниеОшибкиПоКоду.Вставить(2, НСтр("ru = 'Код маркировки не содержит GTIN.'"));
	ОписаниеОшибкиПоКоду.Вставить(3, НСтр("ru = 'Код маркировки не содержит серийный номер.'"));
	ОписаниеОшибкиПоКоду.Вставить(4, НСтр("ru = 'Код маркировки содержит недопустимые символы.'"));
	ОписаниеОшибкиПоКоду.Вставить(5, 
		НСтр("ru = 'Ошибка верификации крипто-подписи кода маркировки (формат крипто-подписи не соответствует типу).'"));
	ОписаниеОшибкиПоКоду.Вставить(6,
		НСтр("ru = 'Ошибка верификации крипто-подписи кода маркировки (крипто-подпись не валидная).'"));
	ОписаниеОшибкиПоКоду.Вставить(7,
		НСтр("ru = 'Ошибка верификации крипто-подписи кода маркировки (крипто-ключ не валиден).'"));
	ОписаниеОшибкиПоКоду.Вставить(8, НСтр("ru = 'Код маркировки не прошел верификацию в стране эмитента.'"));
	ОписаниеОшибкиПоКоду.Вставить(9, НСтр("ru = 'Найденные AI в коде маркировки не поддерживаются.'"));
	ОписаниеОшибкиПоКоду.Вставить(10, НСтр("ru = 'Код маркировки не найден в ГИС МТ.'"));
	ОписаниеОшибкиПоКоду.Вставить(11, НСтр("ru = 'Код маркировки не найден в трансгране.'"));
	
	Возврат ОписаниеОшибкиПоКоду;
	
КонецФункции

Функция ПредставлениеОргановГосударственнойВласти(ИдентификаторыОргановГосударственнойВласти)
	
	ПредставленияОргановГосударственнойВласти = Новый Соответствие();
	ПредставленияОргановГосударственнойВласти.Вставить("RAR",  НСтр("ru = 'Росалкогольрегулирование'"));
	ПредставленияОргановГосударственнойВласти.Вставить("FTS",  НСтр("ru = 'ФТС России'"));
	ПредставленияОргановГосударственнойВласти.Вставить("FNS",  НСтр("ru = 'ФНС России'"));
	ПредставленияОргановГосударственнойВласти.Вставить("RSHN", НСтр("ru = 'Россельхознадзор (РСХН)'"));
	ПредставленияОргановГосударственнойВласти.Вставить("RPN",  НСтр("ru = 'Роспотребнадзор (РПН)'"));
	ПредставленияОргановГосударственнойВласти.Вставить("MVD",  НСтр("ru = 'МВД России'"));
	ПредставленияОргановГосударственнойВласти.Вставить("RZN",  НСтр("ru = 'Росздравнадзор'"));
	
	ПредствленияИдентификаторов = Новый Массив;
	
	Для Каждого Идентификатор Из ИдентификаторыОргановГосударственнойВласти Цикл
		
		Представление = ПредставленияОргановГосударственнойВласти.Получить(Идентификатор);
		
		Если Представление = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредствленияИдентификаторов.Добавить(Представление);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ПредствленияИдентификаторов, ", ");
	
КонецФункции


#КонецОбласти
