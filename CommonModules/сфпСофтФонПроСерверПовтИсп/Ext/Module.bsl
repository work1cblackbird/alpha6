
#Область ПрограммныйИнтерфейс

// Функция возвращает структуру параметров сервера
//
// Параметры:
//	Нет.
//
Функция сфпПараметрыСервера() Экспорт 
	
	ПараметрыСервера = Новый Структура();
	ПараметрыСервера.Вставить("ПрефиксВыходаВМежгород",				Константы.сфпПрефиксВыходаВМежгород.Получить());
	ПараметрыСервера.Вставить("ПрефиксВыходаНаМеждународную",		Константы.сфпПрефиксВыходаНаМеждународную.Получить());
	ПараметрыСервера.Вставить("МаксимальнаяДлинаВнутреннихНомеров",	Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить());
	ПараметрыСервера.Вставить("ПоследниеЦифрыТелефонногоНомера",	Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить());
	ПараметрыСервера.Вставить("КодСтраны",							Константы.сфпКодСтраны.Получить());
	ПараметрыСервера.Вставить("КодГорода",							Константы.сфпКодГорода.Получить());
	ПараметрыСервера.Вставить("ПрефиксВыходаВГород",				Константы.сфпПрефиксВыходаВГород.Получить());
	ПараметрыСервера.Вставить("ИспользоватьИсториюЗвонков",			Константы.сфпИспользоватьИсториюЗвонков.Получить());
	ПараметрыСервера.Вставить("СтрокаПодключенияИстории",			Константы.сфпСтрокаПодключенияИстории.Получить());
	ПараметрыСервера.Вставить("ИспользоватьМаршрутизацию",			Константы.сфпИспользоватьМаршрутизацию.Получить());
	Возврат ПараметрыСервера;

КонецФункции // сфпПараметрыСервера()

// Функция - Идентификатор текущего пользователя системы взаимодействия
// 
// Возвращаемое значение:
//  ИдентификаторПользователяСистемыВзаимодействия  - Идентифицирует пользователя системы взаимодействия.
// 
Функция ИдентификаторТекущегоПользователяСистемыВзаимодействия() Экспорт
	
	Возврат СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
	
КонецФункции

// функция возвращает подчиненные по иерерахии подразделения.
//
// Параметры:
//  ПодраздениеРодитель	 - СправочникСсылка	 - Подразделение
//  МассивПодразделений	 - Массив			 - формируемый рекурсивно массив.
// 
// Возвращаемое значение:
//  МассивПодразделений - Массив подразделений.
//
Функция ПолучитьПодчиненныеПодразделенияПользователя(ПодраздениеРодитель, МассивПодразделений) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка
	|ИЗ Справочник.СтруктураПредприятия
	|ГДЕ Родитель = &Родитель");
	Запрос.УстановитьПараметр("Родитель", ПодраздениеРодитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПодразделений.Добавить(Выборка.Ссылка);
		ПолучитьПодчиненныеПодразделенияПользователя(Выборка.Ссылка, МассивПодразделений);
	КонецЦикла;
	
	Возврат МассивПодразделений; 
		
КонецФункции // ПолучитьПодчиненныеПодразделенияПользователя()

// функция возвращает массив подразделений, в которых пользователь - руководитель.
// 
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь
//  ПодчиненныеПодразделения  - Булево - включаем подчиненные  по иерархии подразделения или нет.
//
// Возвращаемое значение:
//	МассивПодразделений	- Массив подразделений.
//
Функция ПолучитьПодразделенияВКоторыхРуководитель(Пользователь, ПодчиненныеПодразделения = Ложь) Экспорт
	
	МассивПодразделений = Новый Массив();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка
	|ИЗ Справочник.СтруктураПредприятия
	|ГДЕ ТекущийРуководитель = &ТекущийРуководитель");
	Запрос.УстановитьПараметр("ТекущийРуководитель", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПодразделений.Добавить(Выборка.Ссылка);
		Если ПодчиненныеПодразделения Тогда
			ПолучитьПодчиненныеПодразделенияПользователя(Выборка.Ссылка, МассивПодразделений);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПодразделений;
		
КонецФункции // ПолучитьПодразделенияВКоторыхРуководитель()

// Возвращает идентификатор текущего пользователя системы взаимодействия
// 
// Возвращаемое значение:
//	ИдентификаторПользователяСистемыВзаимодействия	- Идентификатор текущего пользователя системы взаимодействия
//
Функция ТекущийПользовательСистемыВзаимодействия() Экспорт
	
	Возврат сфпЛицензированиеСервер.ТекущийПользовательСистемыВзаимодействия();

КонецФункции

// функция возвращает идентификатор того пользователя системы взаимодействия,
// который соответствует пользователю информационной базы.
// 
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь
//
// Возвращаемое значение:
//	ИдентификаторПользователяСистемыВзаимодействия	- Идентификатор пользователя системы взаимодействия.
//
Функция ИдентификаторПользователяСистемыВзаимодействия(Пользователь) Экспорт
	
	Попытка    ИдентификаторПользователя = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(Пользователь.ИдентификаторПользователяИБ);
	Исключение ИдентификаторПользователя = Неопределено;
	КонецПопытки;
	
	Возврат ИдентификаторПользователя;
	
КонецФункции	//	ИдентификаторПользователяСистемыВзаимодействия()

Функция ИдентификаторОбсужденияЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если сфпОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") < 0 Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	#Если НЕ ВнешнееСоединение Тогда
	Ключ = сфпСофтФонПроСервер.КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторСтрокой = Константы.сфпИдентификаторЖурналаЗвонковСистемыВзаимодействия.Получить();
	Если ЗначениеЗаполнено(ИдентификаторСтрокой) Тогда
		ОбсуждениеЖурналИдентификатор = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдентификаторСтрокой);
		
	Иначе
		Попытка
			Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
			Если Обсуждение = Неопределено Тогда
				  ОбсуждениеЖурналИдентификатор = сфпСофтФонПроСервер.СоздатьОбсуждениеЖурналЗвонков();
			Иначе ОбсуждениеЖурналИдентификатор = Обсуждение.Идентификатор;
			КонецЕсли;
			Константы.сфпИдентификаторЖурналаЗвонковСистемыВзаимодействия.Установить(ОбсуждениеЖурналИдентификатор);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("en='Search discuss System interaction key';ru='Поиск обсуждения Системы взаимодействия по ключу'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;	
	#КонецЕсли
		
	Возврат ОбсуждениеЖурналИдентификатор;
	
КонецФункции	//	ИдентификаторОбсужденияЖурналЗвонков()

// Возвращает полное имя формы документа Событие
// 
// Возвращаемое значение:
//	Строка	- Полное имя формы документа Событие
//
Функция ИмяФормыДокументаСобытие() Экспорт

	ТекМетаданные = Метаданные.Документы["Событие"];
	Если ТекМетаданные.Формы.Найти("ФормаСобытия") <> Неопределено Тогда
		ИмяФормы = "Документ.Событие.Форма.ФормаСобытия";

	ИначеЕсли ТекМетаданные.Формы.Найти("ФормаДокументаСобытия") <> Неопределено Тогда
		ИмяФормы = "Документ.Событие.Форма.ФормаДокументаСобытия";

	Иначе
		ИмяФормы = "Документ.Событие.ФормаОбъекта";
	КонецЕсли;
	
	Возврат ИмяФормы;

КонецФункции	

// Возвращает имя формы отчета Взаиморасчеты
// 
// Параметры:
//	КлючВарианта				- Строка	- Возвращаемый параметр (ключ варианта отчета)
//	КлючНазначенияИспользования	- Строка	- Возвращаемый параметр (ключ назначения использования отчета)
//
// Возвращаемое значение:
//	Строка	- Имя формы отчета Взаиморасчеты
//
Функция ИмяФормыОтчетаВзаиморасчеты(КлючВарианта, КлючНазначенияИспользования) Экспорт
	
	Если Метаданные.Отчеты["Взаиморасчеты"].Формы.Найти("ФормаОтчетаДополнительная") <> Неопределено Тогда
		ИмяФормы = "Отчет.Взаиморасчеты.Форма.ФормаОтчетаДополнительная";
		КлючВарианта = "Ведомость в валюте (кратко)";
		КлючНазначенияИспользования = "";

	Иначе
		ИмяФормы = "Отчет.Взаиморасчеты.ФормаОбъекта";
		КлючВарианта = "ВедомостьКраткоКонтекст";
		КлючНазначенияИспользования = "ВедомостьКраткоКонтекстПоКонтрагенту";
	КонецЕсли;
	
	Возврат ИмяФормы;

КонецФункции

#КонецОбласти