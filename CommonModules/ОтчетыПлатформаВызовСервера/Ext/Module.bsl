
#Область ПрограммныйИнтерфейс

// Получение оформление компоновки данных.
//
// Параметры:
//  ОформлениеТаблицы - Строка - Ключ оформления.
// 
// Возвращаемое значение:
//  Структура, Неопределено - Полученное оформление.
//
Функция ПолучитьОформление(ОформлениеТаблицы) Экспорт
	
	Рез = Неопределено;
	ТекПараметр = БиблиотекаМакетовОформленияКомпоновкиДанных.Найти(ОформлениеТаблицы);
	Если НЕ ТекПараметр = Неопределено Тогда
		Рез = Новый Структура("Имя, Представление", ТекПараметр.Имя, ТекПараметр.Представление);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

// Получение значения функциональной опции.
//
// Параметры:
//  ИмяФункциональнойОпции - Строка - Имя функциональной опции.
// 
// Возвращаемое значение:
//  Произвольный - Значения функциональной опции.
//
Функция ЗначениеФункциональнойОпции(ИмяФункциональнойОпции) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции);
	
КонецФункции

// Возвращает результат проверки возможности выполнения отбора
//
// Параметры:
//  ЛевоеЗначение - ПолеКомпановкиДанных - Имя поля компановки данных
// 
// Возвращаемое значение:
//  Булево - результат проверки.
//
Функция ДействиеОтбораВозможноВыполнить(ЛевоеЗначение) Экспорт
	Возврат ОтчетыПлатформаСервер.ДействиеОтбораВозможноВыполнить(ЛевоеЗначение);	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С КОМПОНОВЩИКОМ ДАННЫХ //////////////////////////////////////

// Получить настройки компоновщика.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек данных.
// 
// Возвращаемое значение:
//  НастройкиКомпоновкиДанных - Полученные настройки компоновки настроек.
//
Функция КомпоновщикПолучитьНастройки(Знач КомпоновщикНастроек) Экспорт
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

#Область ОтчетыТП

// Процедура - Заполнить настройки отчета
//
// Параметры:
//  ФормаОтчета        - УправляемаяФорма - Форма, в которой возникло событие
//  КоллекцияЭлементов - ТаблицаФормы     - Коллекция элементов формы.
//  ОбъектНастройки    - Произвольный     - Объекты настройки формы.
//  ДоступныеНастройки - Произвольный     - Доступные настройки.
//  РодительЭлементов  - Произвольный     - Элемент группировки отчета.
//
Процедура ЗаполнитьНастройкиОтчета(
	ФормаОтчета,
	КоллекцияЭлементов,
	ОбъектНастройки,
	ДоступныеНастройки = Неопределено,
	РодительЭлементов = Неопределено) Экспорт
	
	ОтчетыПлатформаСервер.ЗаполнитьНастройкиОтчета(ФормаОтчета, КоллекцияЭлементов, ОбъектНастройки, ДоступныеНастройки, РодительЭлементов);
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетСверкаТоварногоИОрдерногоУчета

// Возвращает данные расшифровки отчета 
//
// Параметры:
//  СтруктураПараметров - Структура - 
//
// Возвращаемое значение: 
//   ТаблицаЗначений, Неопределено - 
//
Функция ПолучитьДанныеРасшифровкиСверкиТоварногоИОрдерногоУчета(СтруктураПараметров) Экспорт 
	
	ПодчиненныеДокументы = Неопределено;
		
	Если ЗначениеЗаполнено(СтруктураПараметров.ДанныеРасшифровки) И ЭтоАдресВременногоХранилища(СтруктураПараметров.ДанныеРасшифровки) Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(СтруктураПараметров.ДанныеРасшифровки);
	КонецЕсли;	
	
	Если ТипЗнч(СтруктураПараметров.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		ПоляРасшифровки = ДанныеРасшифровки.Элементы.Получить(СтруктураПараметров.Расшифровка).ПолучитьПоля();
		НайденноеПоле   = ПоляРасшифровки.Найти("ПодчиненныйДокументРасшифровка"); 
		
		Если НЕ НайденноеПоле = Неопределено Тогда
			ПодчиненныеДокументы = НайденноеПоле.Значение.ВыгрузитьКолонку("Колонка1");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПодчиненныеДокументы;
	
КонецФункции

#КонецОбласти

#КонецОбласти