// Общий модуль "Управление диалогом регистра (сервер)"

#Область ПрограммныйИнтерфейс
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СЛУЖЕБНОГО ПРОГРАММНОГО ИНТЕРФЕЙСА

// Общий обработчик события настройки параметров выбора элементов управления диалога в зависимости от значений
// реквизитов объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура НастроитьПараметрыВыбораЭлементовФормы(Форма) Экспорт
	
	// Установим динамический отбор подразделений по указанной организации
	Если Форма.Элементы.Найти("ПодразделениеКомпании")=Неопределено ИЛИ Форма.Элементы.Найти("Организация")=Неопределено Тогда
		// Не полный набор реквизитов для отбора
	Иначе
		
		Если ЗначениеЗаполнено(Форма.Запись.Организация) Тогда
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Форма.Элементы.ПодразделениеКомпании.ПараметрыВыбора, "Отбор.Организация", Форма.Запись.Организация);
		Иначе
			УправлениеДиалогомСервер.УдалитьПараметрВыбора (Форма.Элементы.ПодразделениеКомпании.ПараметрыВыбора, "Отбор.Организация");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

// Общий обработчик события настройки параметров отображения элементов формы в зависимости от значений реквизитов
// объекта.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма, в которой возникло событие.
//  Объект	 - ДанныеФормыСтруктура - объект, для которого выполняется обработка события.
//
Процедура УправлениеДиалогомНаСервере(Форма, Объект = Неопределено) Экспорт
	
	// Дальнейшие операции имеют смысл только когда форма не находится в режиме просмотра.
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	// Расставим признаки обязательности заполнения реквизитов формы
	УправлениеДиалогомСервер.РасставитьАвтоотметкиНезаполненного(Форма, Объект);
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

// Общий обработчик события выбора одного из пунктов меню доступных хоз. операций
// 
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  КомандаИмя        - Строка                    - Имя команды, в которой возникло данное событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаКомандыФормы(Форма, КомандаИмя, ПараметрыДействия = Неопределено) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаКомандыФормы()

// Общий обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Форма					 - УправляемаяФорма - Форма, в которой возникло событие.
//  РезультатОповещения		 - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры	 - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//  Объект					 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры=Неопределено, Объект = Неопределено) Экспорт
	
	// Обработаем в зависимости от переданного параметра события
	УправлениеДиалогомСервер.ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры, Объект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаРезультатаОповещения()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОСНОВНЫХ СОБЫТИЙ ФОРМЫ РЕГИСТРА

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Параметры            - Структура        - Содержит коллекцию параметров формы.
//  Отказ                - Булево           - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  ПараметрыДействия    - Структура        - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПриСозданииНаСервере(Форма, Параметры, Отказ, СтандартнаяОбработка, ПараметрыДействия=Неопределено) Экспорт
	
	// Заполнение объекта могло завершиться отказом, проверим установленный признак
	Если НЕ УправлениеДиалогомСервер.ПроверитьВозможностьОткрытияФормыОбъекта(Форма, Отказ) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Произведем инициализацию служебных реквизитов формы
	ИнициализироватьСлужебныеРеквизиты(Форма);
	
	// Все формы элементов регистра будем открывать в режиме блокировки интерфейса
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	// Настроим состав и параметры отображения командной панели формы
	ИнициализироватьКомандыПанелиДействий(Форма);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПриСозданииНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте при выборе объекта без привязки к элементу в контексте сервера.
//
// Параметры:
//  Форма				- УправляемаяФорма		- Форма, в которой возникло событие.
//  ВыбранноеЗначение	- Произвольный			- Результат выбора в подчиненной форме.
//  ПараметрыДействия	- Структура				- Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаВыбора(Форма, ВыбранноеЗначение, ПараметрыДействия=Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если ПараметрыДействия.Свойство("НовыйШтрихкод") Тогда
		
		Если Форма.ТолькоПросмотр Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
		
		Форма.Штрихкод = ПараметрыДействия.НовыйШтрихкод;
		ОбщегоНазначения.СообщитьПользователю(ШтрихкодированиеВызовСервера.СформироватьСообщениеШтрихкодУстановлен(Форма.Штрихкод, Объект.Ссылка));
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаВыбора()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  Форма				- УправляемаяФорма		- Форма, в которой возникло событие.
//  ИмяСобытия			- Строка				- Имя, идентифицирующее событие.
//  ПараметрыДействия	- Структура				- Набор параметров, использующихся при выполнения операции.
//  Источник			- Произвольный			- Источник обработки оповещения
//  Объект				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, ПараметрыДействия=Неопределено, Источник=Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Обработаем в зависимости от параметров действия
	Если ПараметрыДействия.Свойство("ШтрихКод") Тогда
		
		Если ПараметрыДействия.ШтрихКод = "" Тогда
			Возврат Истина;
		КонецЕсли;
		
		// поиск объектов по штрихкоду
		ОбъектыПоШтрихкоду = ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(ПараметрыДействия.ШтрихКод,,Истина);
		ПараметрыДействия.Вставить("ОбъектыПоШтрихкоду",ОбъектыПоШтрихкоду);
		ШтрихкодированиеВызовСервера.ОбработкаОбъектовПоШтрихкоду(ПараметрыДействия);
		
	ИначеЕсли ПараметрыДействия.Свойство("КодКарты") Тогда
		
		РезультатПоиска = ШтрихкодированиеВызовСервера.ПолучитьКарточкуПоКоду(ПараметрыДействия.КодКарты);
		
		Если РезультатПоиска=Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не найдена карточка по считанному коду: %1'"),ПараметрыДействия.КодКарты), Объект.Ссылка);
			Возврат ЛОЖЬ;
		КонецЕсли;
		
		ВыборКарты = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВыборКарты",  ЕстьРеквизит(Форма.Запись,  "Карточка"));
		
		Если ТипЗнч(РезультатПоиска)=Тип("СправочникСсылка.Карточки") И ВыборКарты Тогда
			ПараметрыДействия.Вставить("ВыбранноеЗначение", РезультатПоиска);
		ИначеЕсли ЗначениеЗаполнено(РезультатПоиска.Объект) Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(РезультатПоиска.Объект));
			ПараметрыДействия.Вставить("ИмяФормыСписка", ОбъектМетаданных.ПолноеИмя()+".ФормаСписка");
			ПараметрыДействия.Вставить("НайтиОбъект",    РезультатПоиска.Объект)
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаОповещения()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при чтении данных объекта.
//
// Параметры:
//  Форма         - УправляемаяФорма - Форма, в которой возникло событие.
//  ТекущийОбъект - ДокументОбъект   - Объект, который будет прочитан.
//  ПараметрыДействия	- Структура				- Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПриЧтенииНаСервере(Форма, ТекущийОбъект, ПараметрыДействия = Неопределено) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПриЧтенииНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере перед записью объекта.
//
// Параметры:
//  Форма           - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ           - Булево           - Признак отказа от создания формы.
//  ТекущийОбъект   - ДокументОбъект   - Записываемый объект.
//  ПараметрыЗаписи - Структура        - Структура, содержащая параметры записи.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПередЗаписьюНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере после записи объекта и после завершения транзакции.
//
// Параметры:
//  Форма			- УправляемаяФорма		- Форма, в которой возникло событие.
//  ТекущийОбъект	- Регистр				- Записываемый объект.
//  ПараметрыЗаписи	- Структура				- Структура, содержащая параметры записи.
//  Объект			- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи, Объект = Неопределено) Экспорт
	
	// Настроим блокировку элементов формы
	Если ЕстьРеквизит(Форма, "ПараметрыЗапретаРедактированияРеквизитов") Тогда
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(Форма,,, Объект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ПослеЗаписиНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при необходимости проверки заполнения реквизитов при записи в форме.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ                - Булево           - Признак отказа от создания формы.
//  ПроверяемыеРеквизиты - Массив           - Массив путей к реквизитам, для которых будет выполнена проверка.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ОбработкаПроверкиЗаполнения()

// Устарела. Будет удалена.
// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраняемых реквизитов и настроек формы.
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Форма, Настройки) Экспорт
	
	// Обработчик зарезервирован
	Зарезервировано = ИСТИНА;
	
	// !!!_view Реализовать сохранение состояния "свернутости" групп
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраненных реквизитов и настроек формы.
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	// Обработчик зарезервирован
	Зарезервировано = ИСТИНА;
	
	// !!!_view Реализовать функционал восстановления состояния сворачиваемых групп
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедуры производит инициализацию служебных реквизитов формы списка.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которую производиться добавление реквизитов.
//
Процедура ИнициализироватьСлужебныеРеквизиты(Форма)
	
	// Составим перечень добавляемых в форму реквизитов
	СлужебныеРеквизиты = Новый Структура();
	СлужебныеРеквизиты.Вставить("ПолноеИмяОбъекта", УправлениеДиалогомСервер.ПолучитьМетаданныеОбъектаФормы(Форма).ПолноеИмя());
	СлужебныеРеквизиты.Вставить("ИзменениеЗапрещено", Ложь);
	
	// Производим создание дополнительных реквизитов формы
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(Форма, СлужебныеРеквизиты);
	
КонецПроцедуры // ИнициализироватьСлужебныеРеквизиты()

// Процедуры производит инициализацию команд в форме объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ИнициализироватьКомандыПанелиДействий(Форма)
	
	Зарезервировано = Истина;
	
КонецПроцедуры // ИнициализироватьКомандыПанелиДействий()

#КонецОбласти