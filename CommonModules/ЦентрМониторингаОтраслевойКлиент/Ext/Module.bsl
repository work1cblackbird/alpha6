
#Область ПрограммныйИнтерфейс

// Записывает замер операции бизнес-статистики в клиентский кэш замеров
//  для последующей передачи на сервер и сохранения
//
// Параметры:
//  ИмяОперации	- Строка	- Имя операции статистики, в случае отсутствия создается новое.
//  Значение	- Число		- Количественное значение операции статистики.
//  ТипЗаписи	- Число		- Идентификатор типа записи.
//  ДатаНачала	- Дата		- Дата начала операции.
//
Процедура ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение = 1, ТипЗаписи = 8, Знач ДатаНачала = '00010101') Экспорт
	
	Если Не РегистрироватьБизнесСтатистику() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ОбщегоНазначенияКлиент.ДатаУниверсальная();
	КонецЕсли;
	
	ПараметрыЦентраМониторинга = ЦентрМониторингаКлиентСлужебный.ПолучитьПараметрыПриложения();
	
	Если ПараметрыЦентраМониторинга["Замеры"][ТипЗаписи] = Неопределено Тогда
		ПараметрыЦентраМониторинга["Замеры"].Вставить(ТипЗаписи, Новый Соответствие);
	КонецЕсли;
	
	Замеры = ПараметрыЦентраМониторинга["Замеры"][ТипЗаписи];
	
	Замер = Новый Структура("ПериодЗаписи, ТипЗаписи, Ключ, ОперацияСтатистики, Значение, Замещать");
	Замер.ПериодЗаписи = ДатаНачала;
	Замер.ТипЗаписи = ТипЗаписи;
	Замер.ОперацияСтатистики = ИмяОперации;
	Замер.Значение = Значение;
	Замер.Замещать = Истина;
	Замер.Ключ = КлючДанныхЗамера(ПараметрыЦентраМониторинга);
	
	УникальныйКлюч = Строка(Новый УникальныйИдентификатор);
	Замеры.Вставить(УникальныйКлюч, Замер);
	
КонецПроцедуры

// Регистрирует начало замера длительности операции бизнес-статистики
//
// Параметры:
//  ИмяОперации		- Строка	- Имя операции статистики, в случае отсутствия создается новое.
//  АвтоЗавершение	- Булево	- Признак автоматического завершения операции.
//
Процедура НачатьЗамерОперацииБизнесСтатистики(ИмяОперации, АвтоЗавершение = Ложь) Экспорт
	
	Если Не РегистрироватьБизнесСтатистику() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала = ОбщегоНазначенияКлиент.ДатаУниверсальная();
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПараметрыЦентраМониторинга = ЦентрМониторингаКлиентСлужебный.ПолучитьПараметрыПриложения();
	
	ИмяПараметра = "Отраслевой_ЗамерыНачатые";
	Если ПараметрыЦентраМониторинга[ИмяПараметра] = Неопределено Тогда
		ПараметрыЦентраМониторинга.Вставить(ИмяПараметра, Новый Соответствие);
	КонецЕсли;
	
	ДанныеОперации = Новый Структура;
	ДанныеОперации.Вставить("ВремяНачала", ВремяНачала);
	ДанныеОперации.Вставить("ДатаНачала", ДатаНачала);
	ДанныеОперации.Вставить("АвтоЗавершение", АвтоЗавершение);
	
	ПараметрыЦентраМониторинга[ИмяПараметра].Вставить(ИмяОперации, ДанныеОперации);
	
	Если АвтоЗавершение Тогда
		
		ИмяПараметра = "Отраслевой_ЕстьОбработчик";
		Если ПараметрыЦентраМониторинга[ИмяПараметра] = Неопределено Тогда
			ПараметрыЦентраМониторинга.Вставить(ИмяПараметра, Ложь);
		КонецЕсли;
		
		Если Не ПараметрыЦентраМониторинга[ИмяПараметра] Тогда
			ПодключитьОбработчикОжидания("ЗавершитьЗамерОперацииБизнесСтатистикиАвто", 0.1, Истина);
			ПараметрыЦентраМониторинга[ИмяПараметра] = Истина;
			ПараметрыЦентраМониторинга.Вставить("Отраслевой_ВремяПодключенияОбработчика", ВремяНачала);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка завершения замера длительности операции бизнес-статистики на клиенте автоматически.
//
Процедура ЗавершитьЗамерОперацииБизнесСтатистикиНаКлиентеАвто() Экспорт
	
	Если Не РегистрироватьБизнесСтатистику() Тогда
		Возврат;
	КонецЕсли;
	
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПараметрыЦентраМониторинга = ЦентрМониторингаКлиентСлужебный.ПолучитьПараметрыПриложения();
	
	ИмяПараметра = "Отраслевой_ЗамерыНачатые";
	Если ПараметрыЦентраМониторинга[ИмяПараметра] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВремяПодключенияОбработчика = ПараметрыЦентраМониторинга["Отраслевой_ВремяПодключенияОбработчика"];
	
	КоличествоНеЗавершенныхАвтоЗамеров = 0;
	
	Для Каждого ДанныеОперации Из ПараметрыЦентраМониторинга[ИмяПараметра] Цикл
		ЗамерЗначение = ДанныеОперации.Значение;
		Если ЗамерЗначение["АвтоЗавершение"] Тогда
			Если ЗамерЗначение["ВремяНачала"] <= ВремяПодключенияОбработчика Тогда
				ЗавершитьЗамерОперацииБизнесСтатистики(ДанныеОперации.Ключ, ВремяОкончания);
			Иначе
				КоличествоНеЗавершенныхАвтоЗамеров = КоличествоНеЗавершенныхАвтоЗамеров + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Если КоличествоНеЗавершенныхАвтоЗамеров = 0 Тогда
		ПараметрыЦентраМониторинга.Вставить("Отраслевой_ЕстьОбработчик", Ложь);
	Иначе
		ВремяПодключенияОбработчика = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ПодключитьОбработчикОжидания("ЗавершитьЗамерОперацииБизнесСтатистикиАвто", 0.1, Истина);
		ПараметрыЦентраМониторинга.Вставить("Отраслевой_ЕстьОбработчик", Истина);
		ПараметрыЦентраМониторинга.Вставить("Отраслевой_ВремяПодключенияОбработчика", ВремяПодключенияОбработчика);
	КонецЕсли;
	
КонецПроцедуры


// Обработка завершения замера длительности операции бизнес-статистики на клиенте.
//
// Параметры:
//  ИмяОперации		- Строка	- Имя операции статистики, в случае отсутствия создается новое.
//  ВремяОкончания	- Дата		- Дата окончания операции статистики.
//
Процедура ЗавершитьЗамерОперацииБизнесСтатистики(ИмяОперации, Знач ВремяОкончания = Неопределено) Экспорт
	
	Если Не РегистрироватьБизнесСтатистику() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВремяОкончания = Неопределено Тогда
		ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	
	ПараметрыЦентраМониторинга = ЦентрМониторингаКлиентСлужебный.ПолучитьПараметрыПриложения();
	
	ИмяПараметра = "Отраслевой_ЗамерыНачатые";
	Если ПараметрыЦентраМониторинга[ИмяПараметра] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОперации = ПараметрыЦентраМониторинга[ИмяПараметра].Получить(ИмяОперации);
	Если ДанныеОперации <> Неопределено Тогда
		
		ПараметрыЦентраМониторинга[ИмяПараметра].Удалить(ИмяОперации);
		
		МиллисекундВСекунде = 1000;
		ДлительностьСекунд = Окр((ВремяОкончания - ДанныеОперации.ВремяНачала) / МиллисекундВСекунде);
		
		ТипЗаписи = 9;
		ЗаписатьОперациюБизнесСтатистики(ИмяОперации, ДлительностьСекунд, ТипЗаписи, ДанныеОперации.ДатаНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция КлючДанныхЗамера(ПараметрыЦентраМониторинга)
	
	// Макисмальная длина строкового ключа данных - 100 символов,
	// как в измерении "Ключ" регистра сведений "ЗамерыСтатистики".
	// Формат ключа: <ПрефиксВидаКлюча> + <ДанныеКлюча>.
	// Длина ПрефиксВидаКлюча - 1 символ, ДанныеКлюча - до 99 символов.
	
	ПрефиксВидаКлюча = "0";
	
	// ПрефиксВидаКлюча = "0": данные ключа содержат до трех строк фиксированной длины 32 символа -
	// MD5 хешей или уникальных идентификаторов с удаленными дефисами.
	// Каждая из этих строк предваряется односимвольным префиксом, указывающими на тип передаваемых в строке данных.
	// Формат данных ключа: <ПрефиксТипа1> + <Строка1> [ + ПрефиксТипа2> + <Строка2> [ + <ПрефиксТипа3> + <Строка3>]]
	
	ПрефиксТипаДанных = "1";
	
	// ПрефиксТипаДанных = "1": передается идентификатор бизнес роли пользователя.
	
	ИдентификаторПользователяИБ =
		ПараметрыЦентраМониторинга["ИнформацияКлиента"]["ПараметрыКлиента"]["ИдентификаторПользователяИБ"];
	БизнесРольПользователя      =
		ПараметрыЦентраМониторинга["ИнформацияКлиента"]["ПараметрыКлиента"]["БизнесРольПользователя"];
	
	Возврат ПрефиксВидаКлюча + ПрефиксТипаДанных + БизнесРольПользователя;
	
КонецФункции

Функция РегистрироватьБизнесСтатистику()
	
	ИмяПараметра = "СтандартныеПодсистемы.ЦентрМониторинга";
	
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, ЦентрМониторингаКлиентСлужебный.ПолучитьПараметрыПриложения());
	КонецЕсли;
	
	Возврат ПараметрыПриложения[ИмяПараметра]["РегистрироватьБизнесСтатистику"];
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
