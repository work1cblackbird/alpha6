// Общий модуль "Присоединенные файлы платформа вызов сервера"


#Область ПрограммныйИнтерфейс

// Установить текущее изображение на форме объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой вызвана процедура.
//  ПараметрыДействия - Структура - Дополнительные параметры действия.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура УстановитьТекущееИзображение(Форма, ПараметрыДействия, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Форма.ТекущаяКартинка = ПараметрыДействия.НоваяКартинкаОписания;
	
	Форма.АдресКартинки = НавигационнаяСсылкаКартинки(Форма.ТекущаяКартинка, Форма.УникальныйИдентификатор);
	МассивКартинок = ПолучитьМассивИзображений(Объект);
	Если МассивКартинок.Количество()>0 Тогда
		Если МассивКартинок.Найти(Форма.ТекущаяКартинка) <> Неопределено Тогда
			ИндексКартинки = МассивКартинок.Найти(Объект.ФайлКартинки);
			Форма.ИндикаторКоличестваКартинок = СтрШаблон(НСтр("ru = '%1 из %2'"), Строка(МассивКартинок.Найти(Форма.ТекущаяКартинка) + 1), Строка(МассивКартинок.Количество()));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для вывода последующих изображений
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой вызвана процедура.
//  ДвижениеПросмотра - Строка - Формирование направления просмотра.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ПолучитьСледующееИзображение(Форма, ДвижениеПросмотра, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Сформируем список форматов изображения
	СписокИзображений = ПолучитьМассивИзображений(Объект);
	
	// Выведем очередную картинку
	НомерКартинки = 0;
	Если СписокИзображений.Количество() > 1 Тогда
		КоличествоИзображений = СписокИзображений.Количество();
		Для Индекс = 0 По КоличествоИзображений - 1 Цикл
			Если Форма.ТекущаяКартинка = СписокИзображений[Индекс].Ссылка Тогда
				Если ДвижениеПросмотра = "Вперед" Тогда
					Если Индекс = КоличествоИзображений - 1 Тогда
						НомерКартинки = 0;
					Иначе
						НомерКартинки = Индекс + 1;
					КонецЕсли;
				ИначеЕсли ДвижениеПросмотра = "Назад" Тогда
					Если Индекс = 0 Тогда
						НомерКартинки = КоличествоИзображений - 1;
					Иначе
						НомерКартинки = Индекс - 1;
					КонецЕсли;
				КонецЕсли;
				Форма.ТекущаяКартинка = СписокИзображений[НомерКартинки];
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверим тип выбранного файла картинки
	Если (Форма.ТекущаяКартинка.ИндексКартинки < 42 ИЛИ Форма.ТекущаяКартинка.ИндексКартинки > 52)
		И Форма.ТекущаяКартинка.Расширение <> "jfif" 
		И СписокИзображений.Количество() > 0 Тогда
		Форма.ТекущаяКартинка = СписокИзображений[0];
		НомерКартинки = 0;
	КонецЕсли;
	
	Если НЕ Форма.ТекущаяКартинка.Пустая() Тогда
		Форма.ИндикаторКоличестваКартинок = СтрШаблон(НСтр("ru = '%1 из %2'"), Строка(НомерКартинки + 1), Строка(СписокИзображений.Количество()));
		Форма.АдресКартинки = НавигационнаяСсылкаКартинки(Форма.ТекущаяКартинка, Форма.УникальныйИдентификатор)
	Иначе
		Форма.ИндикаторКоличестваКартинок = "";
		Форма.АдресКартинки = "";
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСледующееИзображение()

// Вывод текущего изображения на форму объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой вызвана процедура.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ВывестиТекущееИзображение(Форма, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		Форма.АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, Форма.УникальныйИдентификатор);
		МассивКартинок = ПолучитьМассивИзображений(Объект);
		Если МассивКартинок.Количество()>0 Тогда
			Форма.ИндикаторКоличестваКартинок = СтрШаблон(НСтр("ru = '%1 из %2'"), Строка(МассивКартинок.Найти(Объект.ФайлКартинки) + 1), Строка(МассивКартинок.Количество()));
			Форма.ТекущаяКартинка = Объект.ФайлКартинки; 
		КонецЕсли;
	Иначе
		ПолучитьСледующееИзображение(Форма, "Вперед", Объект);
	КонецЕсли;
	
КонецПроцедуры

// Удаление изображения из объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой вызвана процедура.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ИмяСправочникаПрисоединенныхФалов - Строка - Имя справочника хранения присоединенных файлов.
//
Процедура УдалитьИзображение(Форма, Объект = Неопределено, ИмяСправочникаПрисоединенныхФалов = "") Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Получим имя справочника присоединенных файлов
	Если ИмяСправочникаПрисоединенныхФалов = "" Тогда
		ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
		ИмяСправочникаПрисоединенныхФалов = ИмяОбъекта+"ПрисоединенныеФайлы";
	КонецЕсли;
	ПустаяКартинка = Справочники[ИмяСправочникаПрисоединенныхФалов].ПустаяСсылка();
	
	Если Форма.ТекущаяКартинка = Объект.ФайлКартинки Тогда
		Объект.ФайлКартинки = ПустаяКартинка;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ТекущаяКартинка) Тогда
		
		// Получаем объект документа
		СправочникОбъект = Форма.ТекущаяКартинка.ПолучитьОбъект();
		
		// Установим пометку на удаление
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли;
	Форма.ТекущаяКартинка = ПустаяКартинка;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  Форма				- УправляемаяФорма - Форма, в которой возникло событие.
//  ПараметрыДействия	- Структура        - Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
Процедура ОбработкаОповещения(Форма, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если ПараметрыДействия.Свойство("НоваяКартинкаОписания") Тогда
		
		УстановитьТекущееИзображение(Форма, ПараметрыДействия, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает все подчиненные файлы.
//
// Параметры:
//   ВладелецФайла - ЛюбаяСсылка - владелец файла.
//   ПараметрыФильтрации - Структура - Дополнительные параметры отбора файлов
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.Файлы - массив файлов.
//
Функция ВсеПодчиненныеФайлы(ВладелецФайла, ПараметрыФильтрации = Неопределено) Экспорт
	
	ИменаСправочников = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(ВладелецФайла);
	
	Если ИменаСправочников.Количество() = 0 Тогда
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Для Каждого ТекущийСправочник Из ИменаСправочников Цикл
		
		ИмяСправочника = ТекущийСправочник.Ключ;
		Прервать;
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	&ИмяСправочника КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Если ПараметрыФильтрации <> Неопределено И ТипЗнч(ПараметрыФильтрации) = Тип("Структура") Тогда
		
		Для Каждого Параметр Из ПараметрыФильтрации Цикл
			
			Если Метаданные.Справочники[ИмяСправочника].Реквизиты.Найти(Параметр.Ключ) <> Неопределено Тогда
				
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + "И Файлы." + Параметр.Ключ+" = " + Параметр.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает признак принадлежности файла к допустимым изображениям
//
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//
// Возвращаемое значение:
//  Булево - Истина, если файл является допустимым изображением
//           Ложь, в ином случае
//           Принадлежность к допустимым изображениям определяется сравнением с расширением файла, а так же
//           по номеру Индекса картинки (см. РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла)
//           Список расширений допустимых изображений:
//           *.bmp;*.gif;*.png;*.jpeg;*.dib;*.tif;*.tiff;*.jpg;*.jp2;*.jpe;*.jfif
Функция ЭтоФайлДопустимогоИзображения(Файл) Экспорт

	Возврат (Файл.ИндексКартинки > 41 И Файл.ИндексКартинки < 51) ИЛИ Файл.Расширение ="jfif";

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура для вывода последующих изображений
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события. 
//
// Возвращаемое значение:
//  Массив - список изображений
//
Функция ПолучитьМассивИзображений(Объект) Экспорт
	
	СписокФайлов = ВсеПодчиненныеФайлы(Объект.Ссылка);
	
	// Сформируем список форматов изображения
	СписокИзображений = Новый Массив;
	Для Каждого Файл Из СписокФайлов Цикл
		Если (Файл = Объект.ФайлКартинки) 
			ИЛИ (НЕ Файл.ПометкаУдаления И Файл.ИндексКартинки > 41 И Файл.ИндексКартинки < 51) 
			// исключения для картинок
			ИЛИ (НЕ Файл.ПометкаУдаления И Файл.Расширение ="jfif") Тогда
			СписокИзображений.Добавить(Файл);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокИзображений;
	
КонецФункции// ПолучитьМассивИзображений()

Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

#КонецОбласти