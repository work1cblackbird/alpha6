
#Область ПрограммныйИнтерфейс

// Курс валюты на дату
//
// Параметры:
//   Валюта                 - СправочникСсылка.Валюты      - валюта, для которой получается курс;
//   МоментВремени          - Дата, МоментВремени, Граница - дата, на которую получается курс;
//   ВыводитьПредупреждение - Булево                       - выводить предупреждения если курс не задан;
//
// Возвращаемое значение:
//   Число - значение курса валюты.
//
Функция ПолучитьКурсВалюты(Валюта, МоментВремени, ВыводитьПредупреждение = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если МоментВремени = Неопределено Тогда
		
		МоментВремени = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	КурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(МоментВремени, Новый Структура("Валюта", Валюта));
	
	Если КурсВалюты.Курс = 0 Тогда
		
		Если ВыводитьПредупреждение Тогда
			
			НаДату = ?(ТипЗнч(МоментВремени)=Тип("Граница"), МоментВремени.Значение, МоментВремени);
			НаДату = ?(ТипЗнч(НаДату)=Тип("МоментВремени"), НаДату.Дата, НаДату);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Курс валюты ""%1"" на дату %2 не задан.'"), Валюта, Формат(НаДату, "ДЛФ=DD")));
			
		КонецЕсли;
		
		Возврат 0;
		
	КонецЕсли;
	
	Возврат ?(
		КурсВалюты.Кратность = 0 ИЛИ КурсВалюты.Кратность = 1,
		КурсВалюты.Курс,
		КурсВалюты.Курс / КурсВалюты.Кратность
	);
	
КонецФункции

// Возвращает значение курса валюты взаиморасчетов для документа
//
// Параметры:
//   Объект     - ДокументСсылка или ДокументОбъект       - документ для которого рассчитывается курс
//   Договор    - СправочникСсылка.ДоговорыВзаиморасчетов - договор взаиморасчетов
//   Основание  - ДокументСсылка                          - документ основание.
//
// Возвращаемое значение:
//   Число - значение курса валюты взаимозачетов.
//
Функция ПолучитьКурсВалютыВзаиморасчетов(Объект, Знач Договор = Неопределено, Основание = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		
		Договор = ДоговорВОбъекте(Объект);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		
		ДоговорОснования = ДоговорВОсновании(Основание);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(ДоговорОснования) Тогда
		
		Договор = ДоговорОснования;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Курс = 0;
	ВалютаДоговора = Договор.ВалютаВзаиморасчетов;
	Курс = ПолучитьКурсВалюты(ВалютаДоговора, Объект.Дата);
	
	Возврат Курс;
	
КонецФункции

// Коэффициент пересчета из валюты упр. учета в валюту регл.учета на заданную дату
//
// Параметры:
//  Дата - Дата - на какую дату получить.
//
// Возвращаемое значение:
//   Число - значение коэффициента пересчета валюты.
//
Функция ПолучитьКоэффициентПересчетаВалют(Дата) Экспорт
	
	КурсРегл = ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Дата);
	КурсУпр  = ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(),        Дата);
	
	Возврат ?(КурсРегл=0, 0, КурсУпр / КурсРегл);
	
КонецФункции

// Определяет валюту по типу цени и номенклатуре
//
// Параметры:
//   ТипЦен            - СправочникСсылка - тип цен;
//   Номенклатура      - СправочникСсылка - номенклатура;
//   ВыводитьСообщения - Булево           - сообщать об ошибках пользователю;
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - валюта цены.
//
Функция ВалютаТипаЦены(ТипЦен, Номенклатура = Неопределено, ВыводитьСообщения = Ложь) Экспорт
	
	Если Номенклатура <> Неопределено И ТипЦен.ВВалютеУчета Тогда
		
		Если НЕ ЗначениеЗаполнено(Номенклатура.ВалютаУчета) Тогда
			
			Если ВыводитьСообщения Тогда
				
				// BSLLS:NestedFunctionInParameters-off
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не заполнена валюта учета номенклатуры ""%1"". Используется валюта регламентированного учета.'"),
					Номенклатура
				);
				// BSLLS:NestedFunctionInParameters-on
				ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
				
			КонецЕсли;
			
			Результат = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
			
		Иначе
			
			Результат = Номенклатура.ВалютаУчета;
			
		КонецЕсли; 
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ТипЦен.ВалютаЦены) Тогда
			
			Если ВыводитьСообщения Тогда
				// BSLLS:NestedFunctionInParameters-off
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не заполнена валюта типа цен ""%1"". Используется валюта регламентированного учета.'"),
					ТипЦен
				);
				// BSLLS:NestedFunctionInParameters-on
				ОбщегоНазначения.СообщитьПользователю (ТекстСообщения);
				
			КонецЕсли;
			
			Результат = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
			
		Иначе
			
			Результат = ТипЦен.ВалютаЦены;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Пересчитывает сумму из одного курса валюты в другой.
//
// Параметры:
//	Сумма           - Число - Сумма для пересчета
//	КурсНачальный   - Число - Курс валюты или дата курса
//	КурсКонечный    - Число - Курс валюты или дата курса
//	РежимОкругления - Число - Режим округления.
//
// Возвращаемое значение:
//	Число - Сумма после пересчета
//
Функция ПересчетПоКурсу(Знач Сумма, КурсНачальный, КурсКонечный, Знач РежимОкругления = Неопределено) Экспорт
	
	Если (КурсНачальный * КурсКонечный) = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю (НСтр("ru = 'При пересчете валюты обнаружен нулевой курс.'"));
		Возврат Сумма;
		
	КонецЕсли;
	
	Если КурсНачальный = КурсКонечный Тогда
		
		Возврат Сумма;
		
	КонецЕсли;
	
	ЧислоРезультат = Сумма * КурсНачальный / КурсКонечный;
	
	Если РежимОкругления <> Неопределено Тогда
		
		ЧислоРезультат = Окр(ЧислоРезультат, 2, РежимОкругления);
		
	КонецЕсли;
	
	Возврат ЧислоРезультат;
	
КонецФункции

// Пересчитывает Цену из одной валюты в другую.
// в параметрах КурсНачальный и КурсКонечный могут передаваться либо сами курсы либо даты.
//
// Параметры:
//	Сумма           - Число            - Сумма для пересчета
//	ВалютаНачальная - СправочникСсылка - Начальная валюта
//	КурсНачальный   - Число, Дата      - Курс валюты или дата курса
//	ВалютаКонечная  - СправочникСсылка - Конечная валюта
//	КурсКонечный    - Число, Дата      - Курс валюты или дата курса
//	РежимОкругления - Число            - Режим округления.
//
// Возвращаемое значение:
//	Число - Сумма после пересчета
//
Функция ПересчетПоВалюте(Знач Сумма,
                         ВалютаНачальная,
                         КурсНачальный,
                         ВалютаКонечная,
                         КурсКонечный,
                         Знач РежимОкругления = Неопределено) Экспорт
	
	Если Сумма = Null Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаНачальная) ИЛИ НЕ ЗначениеЗаполнено(ВалютаКонечная) Тогда
		
		Возврат Сумма;
		
	КонецЕсли;
	
	Если ВалютаНачальная = ВалютаКонечная Тогда
		
		Возврат Сумма;
		
	КонецЕсли;
	
	ТипКурса = ТипЗнч(КурсНачальный);
	
	Если ТипКурса = Тип("Число") Тогда
		
		КурсВалютыНач = КурсНачальный;
		
	ИначеЕсли ТипКурса = Тип("Дата") ИЛИ ТипКурса = Тип("МоментВремени") ИЛИ ТипКурса = Тип("Граница") Тогда
		
		КурсВалютыНач = ПолучитьКурсВалюты(ВалютаНачальная, КурсНачальный);
		
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Неверный тип параметра при пересчете валюты.(1)'"));
		Возврат Сумма;
		
	КонецЕсли;
	
	ТипКурса = ТипЗнч(КурсКонечный);
	
	Если ТипКурса = Тип("Число") Тогда
		
		КурсВалютыКон = КурсКонечный;
		
	ИначеЕсли ТипКурса = Тип("Дата") ИЛИ ТипКурса = Тип("МоментВремени") ИЛИ ТипКурса = Тип("Граница") Тогда
		
		КурсВалютыКон = ПолучитьКурсВалюты(ВалютаКонечная, КурсКонечный);
		
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Неверный тип параметра при пересчете валюты.(2)'"));
		Возврат Сумма;
		
	КонецЕсли;
	
	Результат = ПересчетПоКурсу(Сумма, КурсВалютыНач, КурсВалютыКон, РежимОкругления);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДоговорВОбъекте(Объект)
	
	Если ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов") Тогда
		
		Возврат Объект["ДоговорВзаиморасчетов"];
		
	ИначеЕсли ЕстьРеквизит(Объект, "ДоговорВзаиморасчетовИнкассатор") Тогда
		
		Возврат Объект["ДоговорВзаиморасчетовИнкассатор"];
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДоговорВОсновании(Основание)
	
	Если ЕстьРеквизит(Основание, "ДоговорВзаиморасчетов") Тогда
		
		Возврат Основание["ДоговорВзаиморасчетов"];
		
	ИначеЕсли ЕстьРеквизит(Основание, "ДоговорВзаиморасчетовИнкассатор") Тогда
		
		Возврат Основание["ДоговорВзаиморасчетовИнкассатор"];
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
