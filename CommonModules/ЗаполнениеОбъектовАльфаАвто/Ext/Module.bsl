
#Область ПрограммныйИнтерфейс

#Область ПодключаемыеКоманды

// См. ЗаполнениеОбъектовПереопределяемый.ПриОпределенииОбъектовСКомандамиЗаполнения
Процедура ПриОпределенииОбъектовСКомандамиЗаполнения(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.АвансовыйОтчет);
	Объекты.Добавить(Метаданные.Документы.АктОценкиАвтомобиля);
	Объекты.Добавить(Метаданные.Документы.АктСверкиВзаиморасчетов);
	Объекты.Добавить(Метаданные.Документы.Амортизация);
	Объекты.Добавить(Метаданные.Документы.БюджетДДС);
	Объекты.Добавить(Метаданные.Документы.БюджетДоходовИРасходов);
	Объекты.Добавить(Метаданные.Документы.БюджетЗакупок);
	Объекты.Добавить(Метаданные.Документы.БюджетЗакупокАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.БюджетОказанияУслугПоАвтоработам);
	Объекты.Добавить(Метаданные.Документы.БюджетПродаж);
	Объекты.Добавить(Метаданные.Документы.БюджетПродажАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.ВводВОборотКодовМаркировки);
	Объекты.Добавить(Метаданные.Документы.ВводВЭксплуатацию);
	Объекты.Добавить(Метаданные.Документы.ВводВЭксплуатациюАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковТоваров);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковТоваровВПроизводстве);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковВзаиморасчетов);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковНакопительныхСумм);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковПрочихАктивов);
	Объекты.Добавить(Метаданные.Документы.Взаимозачет);
	Объекты.Добавить(Метаданные.Документы.ВозвратОтПокупателя);
	Объекты.Добавить(Метаданные.Документы.ВозвратПоставщику);
	Объекты.Добавить(Метаданные.Документы.ВозвратПоставщикуАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.ВыводИзЭксплуатацииАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.Выписка);
	Объекты.Добавить(Метаданные.Документы.ВыплатаЗарплаты);
	Объекты.Добавить(Метаданные.Документы.ДоговорАренды);
	Объекты.Добавить(Метаданные.Документы.ЗаказВнутренний);
	Объекты.Добавить(Метаданные.Документы.ЗаказПокупателя);
	Объекты.Добавить(Метаданные.Документы.ЗаказПоставщику);
	Объекты.Добавить(Метаданные.Документы.ЗаменаВЗаказеПокупателя);
	Объекты.Добавить(Метаданные.Документы.ЗаменаВЗаказеПоставщику);
	Объекты.Добавить(Метаданные.Документы.ЗаявкаНаРемонт);
	Объекты.Добавить(Метаданные.Документы.ИзвлечениеТоваровИзПроизводства);
	Объекты.Добавить(Метаданные.Документы.ИзменениеАссортиментаПодразделения);
	Объекты.Добавить(Метаданные.Документы.ИзменениеЦенАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.ИзменениеЦенАвторабот);
	Объекты.Добавить(Метаданные.Документы.ИзменениеЦенОпций);
	Объекты.Добавить(Метаданные.Документы.ИзменениеЦенАренды);
	Объекты.Добавить(Метаданные.Документы.Инвентаризация);
	Объекты.Добавить(Метаданные.Документы.ИнвентаризацияАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.ИнвентаризацияОрдерногоСклада);
	Объекты.Добавить(Метаданные.Документы.Инкассация);
	Объекты.Добавить(Метаданные.Документы.Комплектация);
	Объекты.Добавить(Метаданные.Документы.КорректировкаБонусов);
	Объекты.Добавить(Метаданные.Документы.КорректировкаДолга);
	Объекты.Добавить(Метаданные.Документы.КорректировкаЗаказаПокупателя);
	Объекты.Добавить(Метаданные.Документы.КорректировкаЗаказаПоставщику);
	Объекты.Добавить(Метаданные.Документы.КорректировкаПоступления);
	Объекты.Добавить(Метаданные.Документы.КорректировкаОпцийАвтомобиля);
	Объекты.Добавить(Метаданные.Документы.НазначениеСкидокСтроки);
	Объекты.Добавить(Метаданные.Документы.КорректировкаСтатусовКодовМаркировки);
	Объекты.Добавить(Метаданные.Документы.НазначениеСкидокНаценокПоПрайсЛисту);
	Объекты.Добавить(Метаданные.Документы.НазначениеСкидокШапки);
	Объекты.Добавить(Метаданные.Документы.НачислениеЗарплаты);
	Объекты.Добавить(Метаданные.Документы.ОтчетКомиссионера);
	Объекты.Добавить(Метаданные.Документы.ОтчетКомиссионераЗаАвтомобили);
	Объекты.Добавить(Метаданные.Документы.ОтчетКомитенту);
	Объекты.Добавить(Метаданные.Документы.ОтчетКомитентуЗаАвтомобили);
	Объекты.Добавить(Метаданные.Документы.ОтчетПрослеживаемыеТоварыОтчетОбОперациях);
	Объекты.Добавить(Метаданные.Документы.ОптовыйЗаказКлиентаНаАвтомобили);
	Объекты.Добавить(Метаданные.Документы.ОптовыйЗаказПоставщикуНаАвтомобили);
	Объекты.Добавить(Метаданные.Документы.Перемаркировка);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеАктивов);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеНезавершенногоПроизводства);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеТоваровВПроизводство);
	Объекты.Добавить(Метаданные.Документы.Переоценка);
	Объекты.Добавить(Метаданные.Документы.ПереоценкаАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.ПереразмещениеТоваров);
	Объекты.Добавить(Метаданные.Документы.ПересортицаТоваров);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеТоваров);
	Объекты.Добавить(Метаданные.Документы.ПриходныйСкладскойОрдер);
	Объекты.Добавить(Метаданные.Документы.РабочийЛист);
	Объекты.Добавить(Метаданные.Документы.Разукомплектация);
	Объекты.Добавить(Метаданные.Документы.РазукомплектацияАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.Рассылка);
	Объекты.Добавить(Метаданные.Документы.РасходныйСкладскойОрдер);
	Объекты.Добавить(Метаданные.Документы.РеализацияАктивов);
	Объекты.Добавить(Метаданные.Документы.РеализацияТоваров);
	Объекты.Добавить(Метаданные.Документы.РеализацияАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.СнятиеРаспределенияЗаказовПокупателя);
	Объекты.Добавить(Метаданные.Документы.СписаниеАвтомобилей);
	Объекты.Добавить(Метаданные.Документы.СписаниеАктивов);
	Объекты.Добавить(Метаданные.Документы.СписаниеТоваров);
	Объекты.Добавить(Метаданные.Документы.СчетНаОплату);
	Объекты.Добавить(Метаданные.Документы.СчетНаОплатуЗаАвтомобили);
	Объекты.Добавить(Метаданные.Документы.СчетОтПоставщика);
	Объекты.Добавить(Метаданные.Документы.СчетОтПоставщикаЗаАвтомобили);
	Объекты.Добавить(Метаданные.Документы.СчетФактураВыданный);
	Объекты.Добавить(Метаданные.Документы.СчетФактураПолученный);
	Объекты.Добавить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт);
	Объекты.Добавить(Метаданные.Документы.Чек); 
	Объекты.Добавить(Метаданные.Документы.ЧекНаОплату);
	Объекты.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями);
	Объекты.Добавить(Метаданные.Справочники.СервисныеКампании);
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеКомандЗаполнения

// Добавляет новую команду заполнения в коллекцию подключаемых команд и заполняет поля предопределенными данными.
// Заполнение соответствует сценарию работы команд заполения когда заполняемая таблица "Товары", обработчик находиться
// в модуле менеджера. Перед выполнение заполнения происходит сбор дополнительных параметров перечисленных
// в доп. параметрах команды.
//
// Параметры:
//	Команды - ТаблицаЗначений - Коллекция команд заполнения.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - с колонками:
//  * Вид - Строка
//  * Подменю - Строка
//  * МножественныйВыбор - Булево
//  * Обработчик - Строка
//  * РежимЗаписи - Строка
//  * Порядок - Число
//  * ВидимостьВФормах - Строка
//  * ПараметрВыполнения - Строка
//  * Серверная - Булево
//  * ОчиститьПередЗаполнением - Булево
//  * ПодтверждениеПередЗаполнением - Булево
//
Функция ДобавитьКоманду(Команды) Экспорт
	
	Результат = Команды.Добавить();
	Результат.Вид = "ЗаполнениеОбъектов";
	Результат.Подменю = "ТоварыПодменюЗаполнения";
	Результат.МножественныйВыбор = Ложь;
	Результат.Обработчик = "ЗаполнениеОбъектовАльфаАвтоКлиент.ВыполнитьПодключаемуюКоманду";
	Результат.РежимЗаписи = "НеЗаписывать";
	Результат.Порядок = 50;
	Результат.ВидимостьВФормах = "ФормаДокумента";
	
	Результат.ДополнительныеПараметры.Вставить("Серверная", Истина);
	Результат.ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "Товары");
	Результат.ДополнительныеПараметры.Вставить("ПараметрВыполнения", "");
	Результат.ДополнительныеПараметры.Вставить("ОчиститьПередЗаполнением", Истина);
	Результат.ДополнительныеПараметры.Вставить("ПодтверждениеПередЗаполнением", Ложь);
	Результат.ДополнительныеПараметры.Вставить("ПоследовательныеОперации", Новый Структура());
	Результат.ДополнительныеПараметры.Вставить("ЭтоКомандаЗаполнения", Истина);
	
	Возврат Результат;
	
КонецФункции

// Готовит имя подменю команд заполнения
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - Имя табличной части.
//
// Возвращаемое значение:
//  Строка - сформированное наименование подменю.
//
Функция ИмяПодменюПоУмолчанию(ИмяТабличнойЧасти) Экспорт
	
	Возврат ИмяТабличнойЧасти + "ПодменюЗаполнения";
	
КонецФункции

// Процедура добавления команды заполнения объекта из файла в коллекцию подключаемых команд.
//
// Параметры:
//	Команды - ТаблицаЗначений - Таблица команд заполнения.
//	ИмяТабличнойЧасти - Строка - Имя табличной части.
//
Процедура ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(Команды, ИмяТабличнойЧасти) Экспорт
	
	НоваяКоманда = ДобавитьКоманду(Команды);
	НоваяКоманда.Идентификатор = "ЗагрузкаИзФайла";
	НоваяКоманда.Представление = НСтр("ru = 'Загрузить из файла'");
	НоваяКоманда.Подменю = ИмяПодменюПоУмолчанию(ИмяТабличнойЧасти);
	НоваяКоманда.Порядок = 100;
	НоваяКоманда.Обработчик = "ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзФайла";
	НоваяКоманда.Картинка = БиблиотекаКартинок.ЗаполнениеДокументовЗагрузитьИзФайла;
	НоваяКоманда.ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
КонецПроцедуры

// Процедура добавления команды заполнения объекта из файла в коллекцию подключаемых команд.
//
// Параметры:
//	Команды - ТаблицаЗначений - Таблица команд заполнения.
//	ИмяТабличнойЧасти - Строка - Имя табличной части.
//
Процедура ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(Команды,
		ИмяТабличнойЧасти,
		Параметры,
		ДополнительныеПараметры = Неопределено) Экспорт
		
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыЗаполненияТЧИзДокумента(Параметры) ;
	КонецЕсли;
	
	НоваяКоманда = ДобавитьКоманду(Команды);
	НоваяКоманда.Идентификатор = "ЗагрузкаИзДокумента";
	НоваяКоманда.Представление = НСтр("ru = 'Загрузить из документа'");
	НоваяКоманда.Подменю = ИмяПодменюПоУмолчанию(ИмяТабличнойЧасти);
	НоваяКоманда.Порядок = 99;
	НоваяКоманда.Обработчик = "ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзДокумента";
	НоваяКоманда.ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НоваяКоманда.ДополнительныеПараметры, ДополнительныеПараметры, Ложь);
	
КонецПроцедуры

Функция ДополнительныеПараметрыЗаполненияТЧИзДокумента(Параметры) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИмяРеквизитаКоличество", "Количество");
	Результат.Вставить("ЕстьЯчейка", Ложь);
	Результат.Вставить("ПолноеИмяОбъекта", Параметры.МетаданныеФормы.Родитель().ПолноеИмя());
	
	Возврат Результат;
	
КонецФункции

// Процедура добавления команды очистки табличной части в коллекцию подключаемых команд.
//
// Параметры:
//	Команды - ТаблицаЗначений - Таблица команд заполнения.
//	ИмяТабличнойЧасти - Строка - Имя табличной части.
//
Процедура ДобавитьКомандуОчиститкиТабличнойЧасти(Команды, ИмяТабличнойЧасти) Экспорт
	
	НоваяКоманда = ДобавитьКоманду(Команды);
	НоваяКоманда.Идентификатор = "ОчиститьТабличнуюЧасть";
	НоваяКоманда.Представление = НСтр("ru = 'Очистить табличную часть'");
	НоваяКоманда.Подменю = ИмяПодменюПоУмолчанию(ИмяТабличнойЧасти);
	НоваяКоманда.Порядок = 1;
	НоваяКоманда.Обработчик = "ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьОчисткуТабличнойЧасти";
	НоваяКоманда.Картинка = БиблиотекаКартинок.ЗаполнениеДокументовОчиститьТабличнуюЧасть;
	НоваяКоманда.ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
КонецПроцедуры

// Проверяем доступна ли работа с ТСД
// 
// Возвращаемое значение:
//   Булево
//
Функция ВозможнаРаботаТСД() Экспорт
	
	Возврат МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ТерминалСбораДанных").Количество() > 0;
	
КонецФункции

// Процедура добавления команды для работы с ТСД в коллекцию подключаемых команд.
//
// Параметры:
//	Команды - ТаблицаЗначений - Таблица команд заполнения.
//	ИмяТабличнойЧасти - Строка - Имя табличной части.
//
Процедура ДобавитьКомандыРаботыСТСД(Команды, ИмяТабличнойЧасти) Экспорт
	
	ЗагрузкаТСД = ДобавитьКоманду(Команды);
	ЗагрузкаТСД.Идентификатор = "ЗаполнениеОбъектовАльфаАвто.ЗагрузитьИзТСД";
	ЗагрузкаТСД.Представление = НСтр("ru = 'Загрузить из ТСД'");
	ЗагрузкаТСД.Подменю = ИмяПодменюПоУмолчанию(ИмяТабличнойЧасти);
	ЗагрузкаТСД.Порядок = 69;
	ЗагрузкаТСД.Картинка = БиблиотекаКартинок.ПодключаемоеОборудованиеТСД;
	ЗагрузкаТСД.ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	ПоследовательныеОперацииКлиентСервер.ДобавитьОперацию(ЗагрузкаТСД.ДополнительныеПараметры.ПоследовательныеОперации, "ЗагрузитьИзТСД",
		"ЗаполнениеОбъектовАльфаАвтоКлиент.ЗагрузитьИзТСД", Истина);
	
	ВыгрузитьТСД = ДобавитьКоманду(Команды);
	ВыгрузитьТСД.Идентификатор = "ВыгрузитьВТСД";
	ВыгрузитьТСД.Представление = НСтр("ru = 'Выгрузить в ТСД'");
	ВыгрузитьТСД.Подменю = ИмяПодменюПоУмолчанию(ИмяТабличнойЧасти);
	ВыгрузитьТСД.Обработчик = "ЗаполнениеОбъектовАльфаАвтоКлиент.ВыгрузитьВТСД";
	ВыгрузитьТСД.Порядок = 70;
	ВыгрузитьТСД.Картинка = БиблиотекаКартинок.ПодключаемоеОборудованиеТСД;
	ВыгрузитьТСД.ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти

// Процедура добавления результата опроса по последовательным операциям в временное хранилище настроек команды.
// Изменяет наименование обработчика для дальнейшей передачи в параметры команды.
//
// Параметры:
//  ИмяКомандыВФорме	- Строка	-	Имя команды в форме.
//  АдресНастроек		- Строка		-	Адрес врем. хранилища натроек.
//  ПараметрыЗаполнения	- Структура		-	Результаты параметров опроса.
//  Обработчик			- Строка		-	Новое наименование обработчика.
//
Процедура ИзменитьОписаниеКоманды(ИмяКомандыВФорме, АдресНастроек, ПараметрыЗаполнения, Обработчик) Экспорт
	
	Команды = ПолучитьИзВременногоХранилища(АдресНастроек);
	Команда = Команды.Найти(ИмяКомандыВФорме, "ИмяВФорме");
	
	Если ПараметрыЗаполнения <> Неопределено Тогда
		
		Команда.ДополнительныеПараметры.Вставить("ПараметрыВыполненияКоманды", ПараметрыЗаполнения);
		
	КонецЕсли;
	
	Если Обработчик <> Неопределено Тогда
		
		Команда.Обработчик = Обработчик;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Команды, АдресНастроек);
	
КонецПроцедуры

// Процедура заполнения складскими остатками.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - Заполняемый документ
//  ПараметрыЗаполнения	 - Структура			 - Структура параметров, необходимых для заполнения складскими остатками.
//													При необходимости хранит дополнительные фильтры.
//  ПараметрыДействия	 - Структура			 - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция ЗагрузкаИзФайла(Объект, ПараметрыЗаполнения, ПараметрыДействия = Неопределено) Экспорт
	
	АдресТаблицаЗагрузкаИЗФайлаВХранилище = ПараметрыЗаполнения.АдресТаблицаЗагрузкаИЗФайлаВХранилище;
	ИмяТабличнойЧасти = ПараметрыЗаполнения.ИмяТабличнойЧасти;
	
	Если ЗначениеЗаполнено(АдресТаблицаЗагрузкаИЗФайлаВХранилище) Тогда
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТаблицаЗагрузкаИЗФайлаВХранилище);
		
		Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
			
			ЗаполнитьЗначенияСвойств(Объект[ИмяТабличнойЧасти].Добавить(), СтрокаТоваров);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура заполнения складскими остатками.
//
// Параметры:
//  ПараметрыЗаполнения		 - Структура			 - Структура параметров, необходимых для заполнения складскими остатками.
//														При необходимости хранит дополнительные фильтры.
//  ПараметрыДействия		 - Структура			 - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция ЗагрузитьИзТСД(ПараметрыЗаполнения, ПараметрыДействия) Экспорт
	
	ДопПараметрыКоманды = ПараметрыДействия.ОписаниеКоманды.ДополнительныеПараметры; 
	
	Объект 				= ПараметрыДействия.Источник;
	ЗагрузитьИзТСД		= ДопПараметрыКоманды.ПараметрыВыполненияКоманды.ЗагрузитьИзТСД;
	
	Если ЗагрузитьИзТСД.Результат = Ложь Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Если ЗагрузитьИзТСД.Свойство("ТаблицаТоваров") 
		И ТипЗнч(ЗагрузитьИзТСД.ТаблицаТоваров) = Тип("Массив") Тогда
		// Определим в какое имя у реквизита описывающего Количество.
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Инвентаризация") Тогда
			ИмяРеквизитаКоличество = "КоличествоФакт";
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИнвентаризацияОрдерногоСклада") Тогда
			ИмяРеквизитаКоличество = "КоличествоУчет";
		Иначе
			ИмяРеквизитаКоличество = "Количество";
		КонецЕсли;

		ТипНоменклатуры = Ложь;
		Если ПараметрыДействия.Источник.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоКатегориям
			Или ПараметрыДействия.Источник.ХозОперация = Справочники.ХозОперации.БюджетПродажПоКатегориям Тогда
			ТипНоменклатуры = Истина;	
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура();
		
		Если ЕстьРеквизит(Объект, "Номенклатура", ДопПараметрыКоманды.ИмяТабличнойЧасти) Тогда
			СтруктураПоиска.Вставить("Номенклатура");
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "ХарактеристикаНоменклатуры", ДопПараметрыКоманды.ИмяТабличнойЧасти) Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры");
		КонецЕсли;
		
		ШтрихКодыБезТоваров = Новый Соответствие;
		
		Для каждого СтрокаТоваров Из ЗагрузитьИзТСД.ТаблицаТоваров Цикл
			Если СтрокаТоваров.ШтрихКод = "" ИЛИ НЕ ЗначениеЗаполнено(СтрокаТоваров.Количество) Тогда
				Продолжить;
			КонецЕсли;
			// Поиск объектов по штрихкоду.
			ОбъектыПоШтрихкоду = ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(СтрокаТоваров.ШтрихКод, , Истина);
			
			Если ОбъектыПоШтрихкоду.Количество() = 0 
				Или ТипЗнч(ОбъектыПоШтрихкоду[0].Объект) <> Тип("СправочникСсылка.Номенклатура") Тогда
				
				ВывестиНенайденныйКод(Объект, СтрокаТоваров.ШтрихКод, ШтрихКодыБезТоваров);
				Продолжить;
			КонецЕсли;
			
			ДобавитьНоменклатуруВДокумент(
				СтрокаТоваров,
				Объект,
				ОбъектыПоШтрихкоду,
				ДопПараметрыКоманды,
				ИмяРеквизитаКоличество,
				ТипНоменклатуры,
				СтруктураПоиска);
		КонецЦикла;
		// Выведем считанные коды, к которым не нашли товаров
		Если ШтрихКодыБезТоваров.Количество() > 0 Тогда
			Для Каждого ТекущийШК Из ШтрихКодыБезТоваров Цикл
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Не найдена номенклатура по считанному коду %1 со следующими кодами маркировки:'"),
						ТекущийШК.Ключ
					),
					Объект.Ссылка
				);
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон("%1", СтрСоединить(ТекущийШК.Значение, Символы.ПС)), Объект.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ЗагрузитьИзТСД()

// Производит формирование и установку форматированной строки представления итоговой суммы по операции.
//
// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
Процедура ПослеОбработкиЗаполнения(ЭтотОбъект, Объект) Экспорт
	
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, Объект);
	УстановитьВидимостьКолонокТЧ(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Производит установку видимости колонок ТЧ документов после обработки заполнения подключаемыми командами
//
// Параметры:
//  Форма - - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  ИмяТабличнойЧасти - Строка - Имя таблицы, при редактировании которой возникло данное событие.
//  СуффиксКолонок - Строка - Префикс колонки, в которой содержится характеристика номенклатуры
//
Процедура УстановитьВидимостьКолонокТЧ(Форма, Объект, ИмяТабличнойЧасти = "Товары", СуффиксКолонок = "") Экспорт
	
	Если ЕстьРеквизит(Объект, ИмяТабличнойЧасти)
		И Не Объект[ИмяТабличнойЧасти].Количество() = 0
		И ЕстьРеквизит(Объект, "Номенклатура", ИмяТабличнойЧасти) Тогда
		
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект[ИмяТабличнойЧасти]);
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(
			Форма,
			ИмяТабличнойЧасти,
			СуффиксКолонок,
			Объект
		);
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиКодыМаркировки(Форма, ИмяТабличнойЧасти, СуффиксКолонок, Объект);
		ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект, , , ИмяТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиНенайденныйКод(Объект, ШтрихКод, ШтрихКодыБезТоваров)
	
	СтруктураМаркировки = МаркировкаТоваровСервер.РазобратьШтриховойКодТовара(ШтрихКод);
	Если МаркировкаТоваровКлиентСервер.ЭтоКодТовараВФорматеDataMatrixGS1(
					ШтрихКод,
					СтруктураМаркировки) Тогда
		ШтрихкодТовара = СтруктураМаркировки.EAN;
		ТекущийШК = ШтрихКодыБезТоваров.Получить(ШтрихкодТовара);
		Если ТекущийШК = Неопределено Тогда
			ШтрихКодыБезТоваров.Вставить(ШтрихкодТовара, Новый Массив);
			ТекущийШК = ШтрихКодыБезТоваров.Получить(ШтрихкодТовара);
		КонецЕсли;
		ТекущийШК.Добавить(МаркировкаТоваровКлиентСервер.СформироватьКодМаркировки(СтруктураМаркировки, Истина));
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не найдена номенклатура по считанному коду: %1'"), ШтрихКод)
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьНоменклатуруВДокумент(
		СтрокаТоваров,
		Объект,
		ОбъектыПоШтрихкоду,
		ПараметрыЗаполнения,
		ИмяРеквизитаКоличество,
		ТипНоменклатуры,
		СтруктураПоиска)
	
	// Вызываем обработчик изменения данных объекта.
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Для Каждого ОбъектПоШтрихкоду Из ОбъектыПоШтрихкоду Цикл
		Если ОбъектПоШтрихкоду.Запрет Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = ?(ОбъектПоШтрихкоду.Вес = 0, СтрокаТоваров.Количество, ОбъектПоШтрихкоду.Вес);
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Номенклатура",               ОбъектПоШтрихкоду.Объект);
		СтруктураСтроки.Вставить(ИмяРеквизитаКоличество,       Количество);
		СтруктураСтроки.Вставить("ЕдиницаИзмерения",           ОбъектПоШтрихкоду.ЕдиницаИзмерения);
		СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", ОбъектПоШтрихкоду.ХарактеристикаНоменклатуры);
		СтруктураСтроки.Вставить("Штрихкод",                   ОбъектПоШтрихкоду.Штрихкод);
		СтруктураСтроки.Вставить("Запрет",                     ОбъектПоШтрихкоду.Запрет);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураСтроки);
		НайденныеСтроки = Объект[ПараметрыЗаполнения.ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Объект[ПараметрыЗаполнения.ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтроки);
			
			Если ТипНоменклатуры Тогда 
				СтрокаТабличнойЧасти.Номенклатура = ОбъектПоШтрихкоду.Объект.ТипНоменклатуры;
			Иначе
				ПараметрыДействия = Новый Структура;
				ПараметрыДействия.Вставить("НеЗаполнятьКоличествоФакт", Истина);
				
				ПараметрыВыполнения = Новый Массив;
				ПараметрыВыполнения.Добавить(Объект);
				ПараметрыВыполнения.Добавить(СтрокаТабличнойЧасти);
				ПараметрыВыполнения.Добавить(ПараметрыДействия);
					Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ДокументМенеджер", "Документы");
				РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(
					Имя + "." + ПараметрыЗаполнения.ИмяТабличнойЧасти + "НоменклатураПриИзменении",
					ПараметрыВыполнения
				);
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] =
			СтрокаТабличнойЧасти[ИмяРеквизитаКоличество] + СтруктураСтроки[ИмяРеквизитаКоличество];
			
			ПараметрыДействия = Новый Структура;
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(Объект);
			ПараметрыВыполнения.Добавить(СтрокаТабличнойЧасти);
			ПараметрыВыполнения.Добавить(ПараметрыДействия);
			Имя = СтрЗаменить(Строка(МенеджерОбъекта), "ДокументМенеджер", "Документы");
			РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации(СтрШаблон("%1.%2%3ПриИзменении", 
			Имя, ПараметрыЗаполнения.ИмяТабличнойЧасти, ИмяРеквизитаКоличество), 
			ПараметрыВыполнения
			);
		КонецЕсли;
		
		// Заполним код маркировки в ТЧ КодыМаркирвоки
		Если ЕстьРеквизит(Объект, "ИдентификаторТовара", ПараметрыЗаполнения.ИмяТабличнойЧасти)
			И ЕстьРеквизит(Объект,, "КодыМаркировки")
			И НЕ ПустаяСтрока(ОбъектПоШтрихкоду.КодМаркировки) Тогда
			НоваяСтрока = Объект.КодыМаркировки.Добавить();
			НоваяСтрока.ИдентификаторТовара = СтрокаТабличнойЧасти.ИдентификаторТовара;
			НоваяСтрока.КодМаркировки = ОбъектПоШтрихкоду.КодМаркировки;
			Если ЕстьРеквизит(Объект, "Подтверждено", "КодыМаркировки") Тогда
				НоваяСтрока.Подтверждено = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти