
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ ДАННЫХ РЕКВИЗИТОВ ТЧ "АВТОМОБИЛИ"

// Процедура выполняет обработку изменения данных реквизита строки "Автомобиль" в таблице "Автомобили".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		
		ПараметрыДействия = Новый Структура();
		
	КонецЕсли;
	
	ОбработатьИзменениеАвтомобиль(Объект, Строка, ПараметрыДействия);
	УстановитьЦенуНаАвтомобиль(Объект, Строка, ПараметрыДействия);
	АвтомобилиРассчитатьСуммуСтроки(
		?(ПараметрыДействия.Свойство("НоваяТочкаВхода"), ПараметрыДействия.НоваяТочкаВхода, "Цена"),
		Объект,
		Строка,
		ПараметрыДействия,
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Автомобили")
	);
	ЗаполнитьДополнительныеРеквизиты(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "СтавкаНДС" в таблице "Автомобили".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	АвтомобилиРассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Автомобили"));
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "Сумма НДС" в таблице "Автомобили".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	АвтомобилиРассчитатьСуммуСтроки(
		"СуммаНДС",
		Объект,
		Строка,
		ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Автомобили"));
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "Цена" в таблице "Автомобили".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Автомобили");
	АвтомобилиРассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия, ИмяТабличнойЧасти);
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "Сумма" в таблице "Автомобили".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	АвтомобилиРассчитатьСуммуСтроки("Сумма", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Автомобили"));
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "СуммаВсего" в таблице "Автомобили".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	АвтомобилиРассчитатьСуммуСтроки("СуммаВсего", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Автомобили"));
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "СуммаВсего" в таблице "Автомобили".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	АвтомобилиРассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Автомобили"));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ ДАННЫХ РЕКВИЗИТОВ ТЧ "ОПЦИИ"

// Процедура выполняет обработку изменения данных реквизита строки "Опция" в таблице "Опции".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.Опция) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка на набор
	Если Строка.Опция.ПризнакНабора Тогда
		РазложитьНаборОпцийНаСтроки(Объект, Строка, ПараметрыДействия);
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеОпции(Объект, Строка, ПараметрыДействия);
	
	УстановитьЦенуНаОпции(Объект, Строка, ПараметрыДействия);
	
	ОпцииРассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Опции"));
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "Количество" в таблице "Опции".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	ОпцииРассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Опции"));
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "СтавкаНДС" в таблице "Опции".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	ОпцииРассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Опции"));
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "Цена" в таблице "Опции".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	ОпцииРассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Опции"));
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "Сумма" в таблице "Опции".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	ОпцииРассчитатьСуммуСтроки("Сумма", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Опции"));
	
КонецПроцедуры

// Процедура выполняет обработку изменения данных реквизита строки "СуммаВсего" в таблице "Опции".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Строка            - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОпцииСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// расчитаем сумму по строке
	ОпцииРассчитатьСуммуСтроки("СуммаВсего", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Опции"));
	
КонецПроцедуры


// Заполнение доп реквизитов строки ТЧ автомобили
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура, ДокументОбъект	- Объект, для которого выполняется обработка.
//  Строка				- СтрокаТабличнойЧасти					- Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия	- Структура								- Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаполнитьДополнительныеРеквизиты(Объект, Строка = Неопределено, ПараметрыДействия = Неопределено) Экспорт
	
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Автомобили");
	
	Если Строка = Неопределено Тогда
		ТаблицаДокумента = Объект[ИмяТабличнойЧасти];
	Иначе
		ТаблицаДокумента = Новый Массив;
		ТаблицаДокумента.Добавить(Строка);
	КонецЕсли;
	
	ВыводитьМодель                            = ЕстьРеквизит(Объект, "Модель", ИмяТабличнойЧасти);
	ВыводитьЦвет                              = ЕстьРеквизит(Объект, "Цвет", ИмяТабличнойЧасти);
	ВыводитьВнешнийНомерЗаказа                = ЕстьРеквизит(Объект, "ВнешнийНомерЗаказа", ИмяТабличнойЧасти);
	ВыводитьВариантКомплектации               = ЕстьРеквизит(Объект, "ВариантКомплектации", ИмяТабличнойЧасти);
	ВыводитьЗаказКлиента                      = ЕстьРеквизит(Объект, "ЗаказКлиента", ИмяТабличнойЧасти);
	ВыводитьЕстьСервиснаяКомпания             = ЕстьРеквизит(Объект, "ЕстьСервиснаяКомпания", ИмяТабличнойЧасти);
	ВыводитьЕстьОбязательнаяСервиснаяКампания = ЕстьРеквизит(Объект, "ЕстьОбязательнаяСервиснаяКампания", ИмяТабличнойЧасти);
	
	Для Каждого СтрокаТЧ Из ТаблицаДокумента Цикл
		
		ЭтоАвтомобиль = (ТипЗнч(СтрокаТЧ.Автомобиль) = Тип("СправочникСсылка.Автомобили"));
		
		Если ВыводитьМодель И ЭтоАвтомобиль Тогда
			СтрокаТЧ.Модель = СтрокаТЧ.Автомобиль.Модель;
		КонецЕсли;
		
		Если ВыводитьЦвет и ЭтоАвтомобиль Тогда
			СтрокаТЧ.Цвет = СтрокаТЧ.Автомобиль.Цвет;
		КонецЕсли;
		
		Если ВыводитьВариантКомплектации И ЭтоАвтомобиль Тогда
			СтрокаТЧ.ВариантКомплектации = СтрокаТЧ.Автомобиль.ВариантКомплектации;
		КонецЕсли;
		
		Если ВыводитьВнешнийНомерЗаказа И СтрокаТЧ.ЗаказНаАвтомобиль <> Неопределено Тогда
			СтрокаТЧ.ВнешнийНомерЗаказа = СтрокаТЧ.ЗаказНаАвтомобиль.ВнешнийНомерЗаказа;
		КонецЕсли;
		
		Если ВыводитьЕстьСервиснаяКомпания И ЭтоАвтомобиль Тогда
			СервисныеКомпании = АвтомобилиСервер.ПроверитьСервиснуюКампанию(СтрокаТЧ.Автомобиль, ТекущаяДатаСеанса(), Истина);
			СтрокаТЧ.ЕстьСервиснаяКомпания = "";
			Если СервисныеКомпании.Количество() > 0 Тогда
				Для Каждого СервиснаяКомпания Из СервисныеКомпании Цикл
					Если СервиснаяКомпания.СервиснаяКампания.ЗапретОтгрузкиБезВыполненияСервиснойКампании И ВыводитьЕстьОбязательнаяСервиснаяКампания Тогда
						СтрокаТЧ.ЕстьОбязательнаяСервиснаяКампания = Истина;
					КонецЕсли;
					СтрокаТЧ.ЕстьСервиснаяКомпания = СтрокаТЧ.ЕстьСервиснаяКомпания + ?(ЗначениеЗаполнено(СтрокаТЧ.ЕстьСервиснаяКомпания), "; ","") + Строка(СервиснаяКомпания.СервиснаяКампания);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыводитьЗаказКлиента Тогда
			СтрокаТЧ.ЗаказКлиента = ЗаказыСервер.ПолучитьЗаказКлиентаНаАвтомобиль(ТекущаяДатаСеанса(), СтрокаТЧ.Автомобиль);
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаРеквизитов = УчетПрослеживаемыхТоваровСервер.ИменаРеквизитовДляЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара();
	ИменаРеквизитов.ИмяТаблицы = "Автомобили";
	ИменаРеквизитов.ИмяРеквизита = "Автомобиль";
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект, Строка, ИменаРеквизитов);
	
КонецПроцедуры

// Перезаполение цен у табличной части
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура, ДокументОбъект	- Объект, для которого выполняется обработка.
//  ПараметрыДействия	- Структура								- Набор параметров, использующихся при выполнения операции.
//
Процедура ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	
	// Определим менеджер текущего объекта
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Если ЕстьРеквизит(Объект, , "Автомобили") Тогда
		Если ТребуетсяУстановкаЦен И ЕстьРеквизит(Объект, "Цена", "Автомобили") Тогда
			Для Каждого СтрокаАвтомобили Из Объект.Автомобили Цикл
				Если ЕстьРеквизит(Объект, "ЗаказНаАвтомобиль", "Автомобили") Тогда
					ПараметрыДействия.Вставить("ИзменилсяЗаказ", Истина);
				КонецЕсли;
				УстановитьЦенуНаАвтомобиль(Объект, СтрокаАвтомобили, ПараметрыДействия);
				МенеджерДокумента.АвтомобилиЦенаПриИзменении(Объект, СтрокаАвтомобили);
			КонецЦикла;
		ИначеЕсли ТребуетсяПересчетЦен И ЕстьРеквизит(Объект, "Цена", "Автомобили") Тогда
			ЕстьСкидка = ЕстьРеквизит(Объект, "СуммаСкидки", "Автомобили");
			СтарыйКурс = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "СтарыйКурс", 0);
			
			Для Каждого Автомобиль Из Объект.Автомобили Цикл
				
				Автомобиль.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоКурсу(
					Автомобиль.Цена,
					СтарыйКурс,
					Объект.КурсДокумента
				);
				
				Если ЕстьСкидка Тогда
					Автомобиль.СуммаСкидки = РаботаСКурсамиВалютПлатформа.ПересчетПоКурсу(
						Автомобиль.СуммаСкидки,
						СтарыйКурс,
						Объект.КурсДокумента
					);
				КонецЕсли;
				
				МенеджерДокумента.АвтомобилиЦенаПриИзменении(Объект, Автомобиль);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, , "Опции") Тогда
		Если ТребуетсяУстановкаЦен И ЕстьРеквизит(Объект, "Цена", "Опции") Тогда
			ЕстьЗаказ = ЕстьРеквизит(Объект, "ЗаказНаАвтомобиль", "Автомобили");
			
			Для Каждого СтрокаОпции Из Объект.Опции Цикл
				// если есть заказ определим его
				Если ЕстьЗаказ Тогда
					//@skip-check unknown-method-property
					СтрокиАвтомобиля = Объект.Автомобили.НайтиСтроки(
						Новый Структура("ИдентификаторАвтомобиля",СтрокаОпции.ИдентификаторАвтомобиля)
					);
					Если СтрокиАвтомобиля.Количество() > 0 Тогда
						ЗаказНаАвтомобиль = СтрокиАвтомобиля[0].ЗаказНаАвтомобиль;
						ПараметрыДействия.Вставить("Модель", СтрокиАвтомобиля[0].Автомобиль.Модель);
						ПараметрыДействия.Вставить("ВариантКомплектации", СтрокиАвтомобиля[0].Автомобиль.ВариантКомплектации);
						Если ЗначениеЗаполнено(ЗаказНаАвтомобиль) Тогда
							ОпцииЗаказа = ЗаказНаАвтомобиль.Опции.НайтиСтроки(Новый Структура("Опция", СтрокаОпции.Опция));
							Если ОпцииЗаказа.Количество() > 0 Тогда
								ПараметрыДействия.Вставить("СтрокаЗаказа", ОпцииЗаказа[0]);
							КонецЕсли;
						КонецЕсли;
					Иначе
						ПараметрыДействия.Вставить("Модель", Справочники.Модели.ПустаяСсылка());
						ПараметрыДействия.Вставить("ВариантКомплектации", Справочники.ВариантыКомплектации.ПустаяСсылка());
					КонецЕсли;
				КонецЕсли;
				
				УстановитьЦенуНаОпции(Объект, СтрокаОпции, ПараметрыДействия);
				МенеджерДокумента.ОпцииЦенаПриИзменении(Объект, СтрокаОпции);
			КонецЦикла;
		ИначеЕсли ТребуетсяПересчетЦен И ЕстьРеквизит(Объект, "Цена", "Опции") Тогда
			
			СтарыйКурс = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "СтарыйКурс", 0);
			
			Для Каждого Опция Из Объект.Опции Цикл
				
				Опция.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоКурсу(Опция.Цена, СтарыйКурс, Объект.КурсДокумента);
				МенеджерДокумента.ОпцииЦенаПриИзменении(Объект, Опция);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка выполнения пересчета табличной части "Автомобили"
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура		- Объект, для которого выполняется обработка события.
//  ПараметрыДействия	- Структура					- Набор параметров, использующихся при выполнения операции.
//
Процедура ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия) Экспорт
	
	ТребуетсяПересчетЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	
	Если НЕ ТребуетсяПересчетЦен Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка));
	
	Если МетаданныеОбъекта = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектМетаданныхТЧАвтомобили = МетаданныеОбъекта.ТабличныеЧасти.Найти("Автомобили");
	
	Если ОбъектМетаданныхТЧАвтомобили = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЕстьСумма =         НЕ ОбъектМетаданныхТЧАвтомобили.Реквизиты.Найти("Сумма") = Неопределено;
	ЕстьСуммаДепозита = НЕ ОбъектМетаданныхТЧАвтомобили.Реквизиты.Найти("СуммаДепозита") = Неопределено;
	
	СтарыйКурс = ПараметрыДействия.СтарыйКурс;
	НовыйКурс  = Объект.КурсДокумента;
	
	Если (СтарыйКурс * НовыйКурс) = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'При пересчете валюты обнаружен нулевой курс валюты.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	ИначеЕсли СтарыйКурс = НовыйКурс Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоэффициентСоотношенияКурсов = СтарыйКурс / НовыйКурс;
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Для Каждого Строка Из Объект.Автомобили Цикл
		
		Если ЕстьСумма Тогда
			
			Строка.Сумма = Окр(Строка.Сумма * КоэффициентСоотношенияКурсов, 2);
			МенеджерОбъекта.АвтомобилиСуммаПриИзменении(Объект, Строка);
			
		КонецЕсли;
		
		Если ЕстьСуммаДепозита Тогда
			
			Строка.СуммаДепозита = Окр(Строка.СуммаДепозита * КоэффициентСоотношенияКурсов, 2);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Процедуры выполняет пересчет суммы строки табличной части "Автомобили".
//
// Параметры:
//  ТочкаВхода        - Строка               - Имя колонки ТЧ, в которой возникло событие
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка
//  Строка            - СтрокаТабличнойЧасти - Строка, для которой выполняется пересчет
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции
//  ИмяТабличнойЧасти - Строка               - Название таблицы.
//
Процедура АвтомобилиРассчитатьСуммуСтроки(ТочкаВхода, Объект, Строка, ПараметрыДействия, ИмяТабличнойЧасти = "Автомобили") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ЕстьСумма      = ЕстьРеквизит(Объект, "Сумма", ИмяТабличнойЧасти);
	ЕстьСуммаВсего = ЕстьРеквизит(Объект, "СуммаВсего", ИмяТабличнойЧасти);
	ЕстьСтавкаНДС  = ЕстьРеквизит(Объект, "СтавкаНДС", ИмяТабличнойЧасти);
	
	ЕстьСкидка = ЕстьРеквизит(Объект, "СуммаСкидки", ИмяТабличнойЧасти);
	
	Если ЕстьСтавкаНДС Тогда
		Если ПараметрыДействия.Свойство("ТипЦен") Тогда
			ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
		ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
			ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
		Иначе
			ЦенаВключаетНДС = Истина;
		КонецЕсли;
		
		СтавкаНДС = Строка.СтавкаНДС;
	Иначе
		ЦенаВключаетНДС = Истина;
		СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
	// расчет суммы от суммы всего
	Если ТочкаВхода = "СуммаВсего" И ЕстьСумма Тогда
		
		СтавкаНДС = СтавкаНДС.Ставка;
		
		// Сначала шапочная скидка.
		Если ЕстьСкидка Тогда
			ЗначениеСкидки = Строка.СуммаСкидки;
		Иначе
			ЗначениеСкидки = 0;
		КонецЕсли;
		
		// посчитаем сумму ндс с себестоимостью
		Себестоимость  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Себестоимость", 0);
		СуммаНДС       = Окр((Макс(Строка.СуммаВсего - Себестоимость, 0) * СтавкаНДС)/(100 + СтавкаНДС),2);
		СуммаРасчетная = ?(ЦенаВключаетНДС, Строка.СуммаВсего, Строка.СуммаВсего - СуммаНДС);
		
		Строка.Сумма = Окр(СуммаРасчетная + ЗначениеСкидки, 2);
		
		// Рассчитываем новую сумму НДС.
		СуммаВсегоБезСкидки = Строка.Сумма - ?(ЕстьСкидка, Строка.СуммаСкидки, 0);
		
		Если НЕ Себестоимость = 0 Тогда
			СуммаВсегоБезСкидки = Макс(СуммаВсегоБезСкидки - Себестоимость, 0);
		КонецЕсли;
		
		Если ЦенаВключаетНДС Тогда
			Строка.СуммаНДС = Окр((СуммаВсегоБезСкидки * СтавкаНДС)/(100 + СтавкаНДС),2);
		Иначе
			Строка.СуммаНДС = Окр(СуммаВсегоБезСкидки * СтавкаНДС / 100,2);
		КонецЕсли;
	КонецЕсли;
	
	Если (ТочкаВхода = "Сумма" ИЛИ ТочкаВхода = "СуммаВсего") И ЕстьРеквизит(Объект, "Цена", ИмяТабличнойЧасти) Тогда
		Строка.Цена = Строка.Сумма;
	КонецЕсли;
	
	// расчет суммы от цены
	Если (ТочкаВхода = "Количество" ИЛИ
		ТочкаВхода = "Цена") И
		ЕстьСумма Тогда
		
		Строка.Сумма = Строка.Цена*?(ЕстьРеквизит(Объект, "Количество", ИмяТабличнойЧасти), Строка.Количество, 1);
		
	КонецЕсли;
	
	// расчет суммы всего и суммы НДС
	Если (ТочкаВхода = "Количество" ИЛИ
		ТочкаВхода = "Цена" ИЛИ
		ТочкаВхода = "Сумма" ИЛИ
		ТочкаВхода = "ПроцентСкидки" ИЛИ
		ТочкаВхода = "СуммаСкидки") И
		ЕстьСуммаВсего Тогда
		
		Если ЕстьСтавкаНДС Тогда
			// получим показатель расчета из типа цен
			Если ПараметрыДействия.Свойство("ТипЦен") Тогда
				ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
			ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
				ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
			Иначе
				ЦенаВключаетНДС = Истина;
			КонецЕсли;
			
			СуммаСоСкидкой = Строка.Сумма - ?(ЕстьСкидка, Строка.СуммаСкидки, 0);
			Себестоимость  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Себестоимость", 0);
			
			СуммаРасчетная = Макс(СуммаСоСкидкой - Себестоимость, 0);
			
			Если ЦенаВключаетНДС Тогда
				Строка.СуммаВсего = СуммаСоСкидкой;
				Строка.СуммаНДС   = Окр((СуммаРасчетная * Строка.СтавкаНДС.Ставка)/(100 + Строка.СтавкаНДС.Ставка), 2);
			Иначе
				Строка.СуммаНДС   = Окр((СуммаРасчетная * Строка.СтавкаНДС.Ставка)/100, 2);
				Строка.СуммаВсего = СуммаСоСкидкой + Строка.СуммаНДС;
			КонецЕсли;
		Иначе
			Строка.СуммаВсего = Строка.Сумма - ?(ЕстьСкидка, Строка.СуммаСкидки, 0);;
		КонецЕсли;
	КонецЕсли;
	
	// Пересчет "Суммы всего"
	Если ТочкаВхода = "СуммаНДС" И НЕ ЦенаВключаетНДС
		И ЕстьСумма И ЕстьСуммаВсего
		И НЕ ЕстьСкидка Тогда
		
		Строка.СуммаВсего = Строка.Сумма + Строка.СуммаНДС;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедуры выполняет пересчет суммы строки табличной части "Опции".
//
// Параметры:
//	ТочкаВхода        - Строка               - Имя колонки ТЧ, в которой возникло событие
//	Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка
//	Строка            - СтрокаТабличнойЧасти - Строка, для которой выполняется пересчет
//	ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции
//	ИмяТабличнойЧасти - Строка               - Название таблицы.
//
Процедура ОпцииРассчитатьСуммуСтроки(ТочкаВхода, Объект, Строка, ПараметрыДействия, ИмяТабличнойЧасти = "Опции") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ЕстьСумма      = ЕстьРеквизит(Объект, "Сумма", ИмяТабличнойЧасти);
	ЕстьСуммаВсего = ЕстьРеквизит(Объект, "СуммаВсего", ИмяТабличнойЧасти);
	ЕстьСтавкаНДС  = ЕстьРеквизит(Объект, "СтавкаНДС", ИмяТабличнойЧасти);
	
	// расчет суммы от суммы всего
	Если ТочкаВхода = "СуммаВсего" И ЕстьСумма Тогда
		Если ЕстьСтавкаНДС Тогда
			Если ПараметрыДействия.Свойство("ТипЦен") Тогда
				ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
			ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
				ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
			Иначе
				ЦенаВключаетНДС = Истина;
			КонецЕсли;
			
			СтавкаНДС = Строка.СтавкаНДС;
		Иначе
			ЦенаВключаетНДС = Истина;
			СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
		
		СуммаРасчетная = ?(ЦенаВключаетНДС, Строка.СуммаВсего, Строка.СуммаВсего*100/(100 + СтавкаНДС.Ставка));
		
		Строка.Сумма = Окр(СуммаРасчетная, 2);
		
		// Рассчитываем новую сумму НДС.
		Строка.СуммаНДС = Окр((Строка.СуммаВсего * СтавкаНДС.Ставка)/(100 + СтавкаНДС.Ставка), 2);
	КонецЕсли;
	
	Если (ТочкаВхода = "Сумма" ИЛИ ТочкаВхода = "СуммаВсего") И ЕстьРеквизит(Объект, "Цена", ИмяТабличнойЧасти) Тогда
		Если ЕстьРеквизит(Объект, "Количество", ИмяТабличнойЧасти) Тогда
			Строка.Цена = ?(Строка.Количество <> 0, Строка.Сумма/Строка.Количество,0);
		Иначе
			Строка.Цена = Строка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	// расчет суммы от цены
	Если (ТочкаВхода = "Количество" ИЛИ
		ТочкаВхода = "Цена") И
		ЕстьСумма Тогда
		
		Строка.Сумма = Строка.Цена*?(ЕстьРеквизит(Объект, "Количество", ИмяТабличнойЧасти), Строка.Количество, 1);
		
	КонецЕсли;
	 
	// расчет суммы всего и суммы НДС
	Если (ТочкаВхода = "Количество" ИЛИ
		ТочкаВхода = "Цена" ИЛИ
		ТочкаВхода = "Сумма") И
		ЕстьСуммаВсего Тогда
		
		Если ЕстьСтавкаНДС Тогда
			// получим показатель расчета из типа цен
			Если ПараметрыДействия.Свойство("ТипЦен") Тогда
				ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
			ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
				ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
			Иначе
				ЦенаВключаетНДС = Истина;
			КонецЕсли;
			
			Если ЦенаВключаетНДС Тогда
				Строка.СуммаВсего = Строка.Сумма;
				Строка.СуммаНДС   = Окр((Строка.Сумма * Строка.СтавкаНДС.Ставка)/(100 + Строка.СтавкаНДС.Ставка), 2);
			Иначе
				Строка.СуммаНДС   = Окр((Строка.Сумма * Строка.СтавкаНДС.Ставка)/100, 2);
				Строка.СуммаВсего = Строка.Сумма + Строка.СуммаНДС;
			КонецЕсли;
		Иначе
			Строка.СуммаВсего = Строка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЦенуНаАвтомобиль(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзменилсяЗаказ", Ложь)
		ИЛИ НЕ ЗначениеЗаполнено(Строка.ЗаказНаАвтомобиль) Тогда
		
		Если ТипЗнч(Строка.Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
			Автомобиль = Строка.Автомобиль;
			Модель = Автомобиль.Модель;
			ВариантКомплектации = Автомобиль.ВариантКомплектации;
		ИначеЕсли ТипЗнч(Строка.Автомобиль) = Тип("СправочникСсылка.Модели") Тогда
			Автомобиль = Справочники.Автомобили.ПустаяСсылка();
			Модель = Строка.Автомобиль;
			Попытка
				ВариантКомплектации = Строка.ВариантКомплектации;
			Исключение
				ВариантКомплектации = Справочники.ВариантыКомплектации.ПустаяСсылка();
			КонецПопытки;
		Иначе
			Автомобиль = Строка.Автомобиль;
			Модель = Справочники.Модели.ПустаяСсылка();
			ВариантКомплектации = Справочники.ВариантыКомплектации.ПустаяСсылка();
		КонецЕсли;
		ОбъектыПоискаЦены = Новый Структура("Автомобиль,Модель,ВариантКомплектации", Автомобиль, Модель, ВариантКомплектации);
		Строка.Цена = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
			Объект.ТипЦен,
			ОбъектыПоискаЦены,
			ВариантКомплектации,
			?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка),
			Объект.ВалютаДокумента,
			Объект.КурсДокумента);
	Иначе
		ВалютаЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЗаказНаАвтомобиль, "ВалютаДокумента");
		
		// получить сумму всего из заказа
		ИтогиОперации = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Строка.ЗаказНаАвтомобиль)
			.РассчитатьИтогиОперации(Строка.ЗаказНаАвтомобиль, Истина);
		
		// Из заказа на автомобиль стоимость автомобиля рассичтывается как сумма опций и сумма автомобиля
		Если ТипЗнч(Строка.ЗаказНаАвтомобиль) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
			
			СуммовыеПоказатели = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Строка.ЗаказНаАвтомобиль, "СуммаВсегоНаАвтомобиль,Опции");
			ИтогиОперации.СуммаДокумента =
				СуммовыеПоказатели.СуммаВсегоНаАвтомобиль + СуммовыеПоказатели.Опции.Выгрузить().Итог("СуммаВсего");
				
		ИначеЕсли
			ТипЗнч(Строка.ЗаказНаАвтомобиль) = Тип("ДокументСсылка.ОптовыйЗаказПоставщикуНаАвтомобили")
			Или ТипЗнч(Строка.ЗаказНаАвтомобиль) = Тип("ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили")
		Тогда
			
			СуммовыеПоказателиАвтомобиля = ОбщегоНазначения
				.МенеджерОбъектаПоСсылке(Строка.ЗаказНаАвтомобиль)
				.СуммовыеПоказателиАвтомобиля(Строка.ЗаказНаАвтомобиль, Строка.Автомобиль);
			ИтогиОперации.СуммаДокумента = СуммовыеПоказателиАвтомобиля.Сумма;
			
		КонецЕсли;
			
		Если ЕстьРеквизит(Строка, "СуммаСкидки") Тогда
			Строка.СуммаСкидки = РаботаСКурсамиВалют.ПересчитатьВВалюту(
				ИтогиОперации.СуммаСкидкиДокумента,
				ВалютаЗаказа,
				Объект.ВалютаДокумента,
				Объект.Дата
			);
		КонецЕсли;
		
		Строка.СуммаВсего = 
		РаботаСКурсамиВалют.ПересчитатьВВалюту(
			ИтогиОперации.СуммаДокумента,
			ВалютаЗаказа,
			Объект.ВалютаДокумента,
			Объект.Дата
		);
		
		Если ПараметрыДействия = Неопределено Тогда
			ПараметрыДействия = Новый Структура;
		КонецЕсли;
		
		ПараметрыДействия.Вставить("НоваяТочкаВхода", "СуммаВсего");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЦенуНаОпции(Объект, Строка, ПараметрыДействия) Экспорт
	
	// уточняющие реквизиты передаем через параметры действия
	Модель              = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Модель", Справочники.Модели.ПустаяСсылка());
	ВариантКомплектации = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВариантКомплектации", Справочники.ВариантыКомплектации.ПустаяСсылка());
	
	// заполнение
	СтрокаЗаказа = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "СтрокаЗаказа", Неопределено);
	
	Если СтрокаЗаказа <> Неопределено Тогда
		Строка.СтавкаНДС = СтрокаЗаказа.СтавкаНДС;
		Строка.Цена      = СтрокаЗаказа.Цена;
	КонецЕсли;
	
	// Установим ставку НДС
	Если Строка.Цена = 0 Тогда 
		
		ПараметрыНДС = Новый Структура();
		Если  Справочники.ХозОперации.СоответствуетВидуОперации(Объект.ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка) Тогда
			Если ЕстьРеквизит(Объект, "Контрагент") И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				ОсвобожденОтНДС	= ?(ЕстьРеквизит(Объект, "Контрагент"),Объект.Контрагент.ОсвобожденОтНДС, Ложь)
								  ИЛИ ?(ЕстьРеквизит(Объект, "Контрагент"),(Объект.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо), Ложь);
			Иначе
				ОсвобожденОтНДС = Ложь;
			КонецЕсли;
		Иначе
			ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь);
			
			ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата); 
			ОсвобожденОтНДС = ОсвобожденОтНДС ИЛИ ПараметрыНДС.ОсвобожденОтНДС;	
		КонецЕсли;
		
		Если ОсвобожденОтНДС Тогда
			Строка.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		Иначе
			Строка.СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.Опция);
 		КонецЕсли;
		
		Строка.Цена = ЦенообразованиеСервер.ПолучитьЦенуОпции(Объект.ТипЦен, Строка.Опция, Модель, ВариантКомплектации,
			?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка), Объект.ВалютаДокумента, Объект.КурсДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазложитьНаборОпцийНаСтроки(Объект, Строка, ПараметрыДействия)
	
	// получим иметна тч
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Опции");
	
	// Определим менеджер текущего объекта
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	ЕстьИдентификаторАвтомобиля = ЕстьРеквизит(Строка, "ИдентификаторАвтомобиля");
	
	Если ЕстьИдентификаторАвтомобиля Тогда
		
		ИдентификаторСтроки = Строка.ИдентификаторАвтомобиля;
		
	КонецЕсли;
	
	// имеем дело с набором, разложим его...
	Набор            = Строка.Опция;
	КоличествоНабора = Строка.Количество;
	
	Если КоличествоНабора = 0 Тогда
		КоличествоНабора = 1;
	КонецЕсли;
	
	// удалим строку из табличной части
	Объект[ИмяТабличнойЧасти].Удалить(Строка);
	
	Для Каждого ИзНабора Из Набор.СоставНабора Цикл
		
		// поищем оборудование из набора в таблице
		МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("Опция",ИзНабора.Опция));
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			// Если добавляемое оборудование уже есть в табличной части
			// просто увеличим количество, если его запрашивать не надо.
			СтрокаТЧ = МассивСтрок[0];
			СтрокаТЧ.Количество = СтрокаТЧ.Количество + (ИзНабора.Количество*КоличествоНабора);
			МенеджерДокумента.ОпцииКоличествоПриИзменении(Объект, СтрокаТЧ);
			
		Иначе
			
			СтрокаТЧ = Объект[ИмяТабличнойЧасти].Добавить();
			
			Если ЕстьИдентификаторАвтомобиля Тогда
				
				СтрокаТЧ.ИдентификаторАвтомобиля = ИдентификаторСтроки;
				
			КонецЕсли;
			
			СтрокаТЧ.Опция = ИзНабора.Опция;
			СтрокаТЧ.Количество = ИзНабора.Количество*КоличествоНабора;
			МенеджерДокумента.ОпцииОпцияПриИзменении(Объект, СтрокаТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзменениеАвтомобиль(Объект, Строка, ПараметрыДействия = Неопределено)
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Автомобили");
	
	// заполним "количество"
	Если ЕстьРеквизит(Объект, "Количество", ИмяТабличнойЧасти) Тогда
		Если Строка.Количество = 0 Тогда
			Строка.Количество = 1;
			ПараметрыДействия.Вставить("ИзменилосьКоличество", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// заполним "vin"
	Если ЕстьРеквизит(Объект, "VIN", ИмяТабличнойЧасти) Тогда
		Если НЕ ПустаяСтрока(Строка.Автомобиль.VIN) Тогда
			Строка.VIN = Строка.Автомобиль.VIN;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеКонтрагента = Неопределено;
	Если ЕстьРеквизит(Объект, "Контрагент") И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВидКонтрагента,ОсвобожденОтНДС");
	КонецЕсли;
	
	Если ДанныеКонтрагента <> Неопределено И ЕстьРеквизит(Объект, "АвтомобильБУ", ИмяТабличнойЧасти) Тогда
		Строка.АвтомобильБУ = (ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Покупатель);
	КонецЕсли;
	
	// заполним ставки НДС
	Если ЕстьРеквизит(Объект, "СтавкаНДС", ИмяТабличнойЧасти) Тогда
		
		ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС");
		ПараметрыНДС = Новый Структура();
		
		Если ОсвобожденОтНДС = Неопределено Тогда
			Если Справочники.ХозОперации.СоответствуетВидуОперации(Объект.ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка) Тогда
				Если ОсвобожденОтНДС = Неопределено Тогда
					Если ДанныеКонтрагента <> Неопределено Тогда
						ОсвобожденОтНДС = ДанныеКонтрагента.ОсвобожденОтНДС;
					Иначе
						ОсвобожденОтНДС = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
				ОсвобожденОтНДС = ПараметрыНДС.ОсвобожденОтНДС;
			КонецЕсли;
		КонецЕсли;
		
		ЕстьСебестоимость = ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Себестоимость"));
		ОсновнаяСтавка = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС); 
		
		Если ОсвобожденОтНДС Тогда
			Строка.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		ИначеЕсли ЕстьСебестоимость Тогда 
			Строка.СтавкаНДС = РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(ОсновнаяСтавка);
		Иначе
			Строка.СтавкаНДС = ОсновнаяСтавка;
		КонецЕсли;	
		
	КонецЕсли;
	
	// заполним заказ если есть
	Если (ЕстьРеквизит(Объект, "ЗаказНаАвтомобиль", ИмяТабличнойЧасти) И ЗначениеЗаполнено(Строка.Автомобиль))
		И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИскатьЗаказ", Истина) Тогда
		
		// если заказ поставщика
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗаказПоставщика", Ложь) Тогда
			Строка.ЗаказНаАвтомобиль = ЗаказыСервер.ПолучитьЗаказПоставщикуНаАвтомобтль(
				?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДатаСеанса(), Объект.Ссылка.МоментВремени()),
				Строка.Автомобиль,
				ПараметрыДействия
			);
			
			ПараметрыДействия.Вставить("ИзменилсяЗаказ", Истина);
		ИначеЕсли ЗначениеЗаполнено(Строка.Автомобиль) Тогда
			// прописать для реализации
			Строка.ЗаказНаАвтомобиль = ЗаказыСервер.ПолучитьЗаказКлиентаСРезервом(Объект, Строка.Автомобиль);
			ПараметрыДействия.Вставить("ИзменилсяЗаказ", Истина);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьИзменениеОпции(Объект, Строка, ПараметрыДействия = Неопределено)
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобильРеквизитОбъекта", Ложь) Тогда
		
		Автомобиль = Объект.Автомобиль;
		ЗаказНаАвтомобиль = Неопределено;
		
	Иначе
		
		Автомобиль = СвязанныйАвтомобильВТабличнойЧасти(Строка, Объект, ПараметрыДействия);
		ЗаказНаАвтомобиль = СвязанныйЗаказВТабличнойЧасти(Строка, Объект, ПараметрыДействия);
		
		Если НЕ ЗначениеЗаполнено(Автомобиль) И НЕ ЗначениеЗаполнено(ЗаказНаАвтомобиль) Тогда
			
			Строка.Опция = Неопределено;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МодельИКомплектация = Новый Структура(
		"Модель,ВариантКомплектации",
		Справочники.Модели.ПустаяСсылка(),
		Справочники.ВариантыКомплектации.ПустаяСсылка()
	);
	ЗаполнитьЗначенияСвойств(МодельИКомплектация, ПараметрыДействия);
	ЗаполнитьЗначенияСвойств(МодельИКомплектация, МодельИКомплектацияАвтомобиля(Автомобиль, ЗаказНаАвтомобиль));
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыДействия, МодельИКомплектация, Истина);
	
	Если
		НЕ ОпцииАвтомобилей.МожноУстанавливатьОпциюДляКомплектации(Строка.Опция, МодельИКомплектация.ВариантКомплектации)
		И НЕ ОпцииАвтомобилей.МожноУстанавливатьОпциюДляАвтомобиля(Строка.Опция, Автомобиль)
	Тогда
		
		БазовыеОпцииКомплектации = ОпцииАвтомобилей.БазовыеОпцииКомплектации(МодельИКомплектация.ВариантКомплектации);
		
		Если БазовыеОпцииКомплектации.Найти(Строка.Опция) = Неопределено Тогда
			
			ШаблонСообщения = НСтр("ru = 'Опция <%1> недопустима для данного варианта комплектации'");
			
		Иначе
			
			ШаблонСообщения = НСтр("ru = 'Опция <%1> для данного варианта комплектации поставляется как базовая'");
			
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ШаблонСообщения, Строка.Опция)
		);
		Строка.Опция = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	ОпцияИзЗаказа = Неопределено;
	
	Если ЗначениеЗаполнено(ЗаказНаАвтомобиль) Тогда
		
		ОпцияИзЗаказа = ЗаказНаАвтомобиль.Опции.Найти(Строка.Опция,"Опция");
		
		Если ОпцияИзЗаказа <> Неопределено Тогда
			
			Если ОпцияИзЗаказа.Количество <> 0 Тогда
				
				Строка.Количество = ОпцияИзЗаказа.Количество;
				ПараметрыДействия.Вставить("СтрокаЗаказа", ОпцияИзЗаказа);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТабличнойЧасти", "Опции");
	
	Если
		ЕстьРеквизит(Объект, "Количество", ИмяТабличнойЧасти)
		И Строка.Количество = 0
	Тогда
		
		Строка.Количество = 1;
		ПараметрыДействия.Вставить("ИзменилосьКоличество", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвязанныйАвтомобильВТабличнойЧасти(Знач Строка, Знач Объект, Знач ПараметрыДействия)
	
	ИмяТабличнойЧастиАвтомобили = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяТабличнойЧастиАвтомобили",
		"Автомобили"
	);
	СтрокиСАвтомобилем = Объект[ИмяТабличнойЧастиАвтомобили].НайтиСтроки(
		Новый Структура("ИдентификаторАвтомобиля", Строка.ИдентификаторАвтомобиля)
	);
	
	Если СтрокиСАвтомобилем.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат СтрокиСАвтомобилем[0].Автомобиль;

КонецФункции

Функция СвязанныйЗаказВТабличнойЧасти(Знач Строка, Знач Объект, Знач ПараметрыДействия)
	
	ИмяТабличнойЧастиАвтомобили = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяТабличнойЧастиАвтомобили",
		"Автомобили"
	);
	
	Если НЕ ЕстьРеквизит(Объект, "ЗаказНаАвтомобиль", ИмяТабличнойЧастиАвтомобили) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтрокиСАвтомобилем = Объект[ИмяТабличнойЧастиАвтомобили].НайтиСтроки(
		Новый Структура("ИдентификаторАвтомобиля", Строка.ИдентификаторАвтомобиля)
	);
	
	Если СтрокиСАвтомобилем.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат СтрокиСАвтомобилем[0].ЗаказНаАвтомобиль;
	
КонецФункции

Функция МодельИКомплектацияАвтомобиля(Знач Автомобиль, Знач ЗаказНаАвтомобиль)
	
	Если ЗначениеЗаполнено(Автомобиль) Тогда
		
		Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Автомобиль, "Модель,ВариантКомплектации");
		
	ИначеЕсли  ЗначениеЗаполнено(ЗаказНаАвтомобиль) Тогда
		
		Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказНаАвтомобиль, "Модель,ВариантКомплектации");
		
	КонецЕсли;
	
	Возврат Новый Структура();
	
КонецФункции

#КонецОбласти