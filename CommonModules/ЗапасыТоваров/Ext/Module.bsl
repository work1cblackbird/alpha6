
#Область ПрограммныйИнтерфейс

#Область ОбособленныйУчетТоваровПоОрганизациям

// Возвращает дату начала обособленного учета товаров по организациям
// 
// Возвращаемое значение:
//  Булево
Функция ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям.Получить();
	
КонецФункции

// Возвращает признак активности обособленного учета товаров по организациям
// 
// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Булево
Функция ОбособленныйУчетТоваровПоОрганизациям(ДатаГраницаМомент = Неопределено) Экспорт
	
	ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям = ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям();
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаГраницаМомент)Тогда
		
		ДатаПроверки = ТекущаяДатаСеанса();
		
	ИначеЕсли ТипЗнч(ДатаГраницаМомент) = Тип("Дата") Тогда
		
		ДатаПроверки = ДатаГраницаМомент;
		
	ИначеЕсли ТипЗнч(ДатаГраницаМомент) = Тип("МоментВремени") Тогда
		
		ДатаПроверки = ДатаГраницаМомент.Дата;
		
	ИначеЕсли ТипЗнч(ДатаГраницаМомент) = Тип("Граница") Тогда
		
		Если ТипЗнч(ДатаГраницаМомент.Значение) = Тип("МоментВремени") Тогда
			ДатаПроверки = ДатаГраницаМомент.Значение.Дата;
		Иначе
			ДатаПроверки = ДатаГраницаМомент.Значение;
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение(НСтр("ru = 'Невозможно определить признак обособления товаров по организациям'"));
		
	КонецЕсли;
	
	Возврат (ДатаПроверки > ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям);
	
КонецФункции

// Возвращает организацию, по которой требуется производить движения по регистрам Партии и ГТД
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  СкладКомпании - СправочникСсылка.СкладыКомпании
//  Дата - Дата
//  ОрганизацияРегистра - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  СправочникСсылка.Организации
Функция ОрганизацияДляДвиженийПоПартиям(Организация, СкладКомпании, Дата, ОрганизацияРегистра = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Дата) Тогда
		
		ВызватьИсключение(НСтр("ru = 'Невозможно определить организацию для движений по партиям'"));
		
	КонецЕсли;
	
	Если ОбособленныйУчетТоваровПоОрганизациям(Дата) Тогда
		
		Если РежимКонтроляОстатковНаСкладахПоКомпании() И ЗначениеЗаполнено(ОрганизацияРегистра) Тогда
			Возврат ОрганизацияРегистра;
		Иначе
			Возврат Организация;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СкладКомпании) Тогда
			ВызватьИсключение(НСтр("ru = 'Невозможно определить организацию для движений по партиям'"));
		КонецЕсли;
		
		// Получаем значение через точку, так как много обращения в цикле
		// Справочник обычно маленький и поэтому значения быстро закешируются при первом обращении
		Возврат СкладКомпании.Организация;
		
	КонецЕсли;
	
КонецФункции

// Возвращает организацию, по которой требуется производить движения по регистру Товары в производстве
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Цех - СправочникСсылка.Цеха
//  Дата - Дата
//  ОрганизацияРегистра - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  СправочникСсылка.Организации
Функция ОрганизацияДляДвиженийВПроизводстве(Организация, Цех, Дата, ОрганизацияРегистра = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Дата) Тогда
	
		ВызватьИсключение(НСтр("ru = 'Невозможно определить организацию для движений по товарам в производстве'"));
	
	КонецЕсли;
	
	Если ОбособленныйУчетТоваровПоОрганизациям(Дата) Тогда
		
		Если РежимКонтроляОстатковНаСкладахПоКомпании() И ЗначениеЗаполнено(ОрганизацияРегистра) Тогда
			Возврат ОрганизацияРегистра;
		Иначе
			Возврат Организация;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Цех) Тогда
			ВызватьИсключение(НСтр("ru = 'Невозможно определить организацию для движений по товарам в производстве'"));
		КонецЕсли;
		
		// Получаем значение через точку, так как много обращения в цикле
		// Справочник обычно маленький и поэтому значения быстро закешируются при первом обращении
		Возврат Цех.Организация;
		
	КонецЕсли;
	
КонецФункции

Функция ПодсказкаДляОрганизацииСкладаЦеха() Экспорт
	
	Результат = "";
	
	ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям = ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям();
	
	Если НачальноеЗаполнениеОрганизацииВРегистрыУчетаТоваровПриОбновленииИБ() Тогда 
		
		Результат = НСтр("ru = 'До завершения обновления ИБ отключен обособленный учет товаров по организациям. То есть организация для движений и остатков берется из склада/цеха. После завершения обновления, из документа.'");

	ИначеЕсли ЗначениеЗаполнено(ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям) Тогда
	
		Результат = СтрШаблон(НСтр("ru = 'До даты начала обособленного учета товаров по организациям (%1), организация для движений и остатков берется из склада/цеха, после этой даты из документа.'"),
			Формат(ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям, "ДЛФ=Д"));
		
	Иначе
		
		Результат = НСтр("ru = 'Организация по умолчанию для новых документов'");
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак установки режима контроля остатков на складах "По компании"
//
// Возвращаемое значение:
//  Булево - Истина, если установлен режим контроля остатков на складах "По компании", Ложь в противном случае.
//
Функция РежимКонтроляОстатковНаСкладахПоКомпании() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.РежимКонтроляОстатковНаСкладах.Получить() = Перечисления.РежимыКонтроляОстатковНаСкладах.ПоКомпании;
	
КонецФункции

Функция ФильтрЗапросаПоОрганизации(ДатаГраницаМомент = Неопределено) Экспорт
	
	Если Не ОбособленныйУчетТоваровПоОрганизациям(ДатаГраницаМомент) Тогда
		Возврат Истина;
	Иначе
		Возврат РежимКонтроляОстатковНаСкладахПоКомпании();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Интеркампани

// Определяет разрешено или нет интеркампани для хоз операции
// 
// Параметры:
//  ХозОперация - СправочникСсылка.ХозОперации
// 
// Возвращаемое значение:
//  Булево
Функция ИнтеркампаниРазрешено(ХозОперация) Экспорт

	Возврат (ХозОперация = Справочники.ХозОперации.РеализацияТоваров
		ИЛИ ХозОперация = Справочники.ХозОперации.ЗакрытиеСмены 
		ИЛИ ХозОперация = Справочники.ХозОперации.ЗаказНаряд);

КонецФункции

// Возвращает организации, разрешенные для интеркампани
// 
// Параметры:
//  ОрганизацияПолучатель - СправочникСсылка.Организации
//  Дата - Дата
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Организации
Функция ОрганизацииДляИнтеркампани(ОрганизацияПолучатель, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПередачиТоваровМеждуОрганизациямиСрезПоследних.ОрганизацияОтправитель КАК ОрганизацияОтправитель
		|ИЗ
		|	РегистрСведений.НастройкиПередачиТоваровМеждуОрганизациями.СрезПоследних(
		|		&Период,
		|		ОрганизацияПолучатель = &ОрганизацияПолучатель) КАК НастройкиПередачиТоваровМеждуОрганизациямиСрезПоследних
		|ГДЕ
		|	НастройкиПередачиТоваровМеждуОрганизациямиСрезПоследних.СпособПередачиТоваров = &СпособПередачиТоваров
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОрганизацияОтправитель"; // Сортировка по GUID, чтобы результат был неизменным
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("СпособПередачиТоваров", Перечисления.СпособыПередачиТоваров.Продажа);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОрганизацияОтправитель");
	
КонецФункции

// Возвращает значение реквизита ЭтоЗапасыДругойОрганизацииПоИнтеркампани 
// для соответствующего реквизита регистров Партии, ГТД, Производство  
// 
// Параметры:
//  ОрганизацияОстатков - СправочникСсылка.Организации
//  ОрганизацияДокумента - СправочникСсылка.Организации
//  Дата - Дата
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоЗапасыДругойОрганизацииПоИнтеркампани(ОрганизацияОстатков, ОрганизацияДокумента, Дата) Экспорт

	Если НЕ ОбособленныйУчетТоваровПоОрганизациям(Дата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ОрганизацияОстатков <> ОрганизацияДокумента);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура Установить_ДатаНачалаОбособленногоУчетаТоваровПоОрганизациямПередОбновлениемИБ() Экспорт
	
	Если Константы.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям.Получить() <> Дата(1,1,1) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МенеджерЗначения = Константы.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = ДатаНачалаОбособленногоУчетаТовараРазныхОрганизацийПриОбновленииИБ();
	
	Попытка
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		
	Исключение
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать значение <%1> в константу <Дата начала обособленного учета товаров по организациям>, по причине:
											  |%2'"),
			Формат(МенеджерЗначения.Значение, "ДЛФ=Д"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Константы.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям,
			МенеджерЗначения.Значение,
			ТекстСообщения);
			
		ВызватьИсключение(ТекстСообщения);
			
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаполнитьИзмерениеОрганизацияДляРегистровОстатковТоваров(Параметры) Экспорт
	
	Пока Истина Цикл
		
		// Делаем проверку в цикле иначе обработчик зависнет, при создании склада / цеха с незаполненной организацией
		Если ЕстьСкладыИлиЦехаБезОрганизации() Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена Организация во всех Складах и Цехах, см. журнал регистрации'");
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				ТекстСообщения);
				
			ВызватьИсключение(ТекстСообщения);
		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
			|	ПартииТоваровКомпании.Регистратор КАК Регистратор,
			|	ПартииТоваровКомпании.Период КАК Период,
			|	ИСТИНА КАК ПартииТоваровКомпании,
			|	ЛОЖЬ КАК ГТДПартийТоваровКомпании,
			|	ЛОЖЬ КАК ТоварыВПроизводстве
			|ПОМЕСТИТЬ втДанныеРегистров
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			|ГДЕ
			|	ПартииТоваровКомпании.Организация = &ОрганизацияПустаяСсылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
			|	ГТДПартийТоваровКомпании.Регистратор,
			|	ГТДПартийТоваровКомпании.Период,
			|	ЛОЖЬ,
			|	ИСТИНА,
			|	ЛОЖЬ
			|ИЗ
			|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
			|ГДЕ
			|	ГТДПартийТоваровКомпании.Организация = &ОрганизацияПустаяСсылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
			|	ТоварыВПроизводстве.Регистратор,
			|	ТоварыВПроизводстве.Период,
			|	ЛОЖЬ,
			|	ЛОЖЬ,
			|	ИСТИНА
			|ИЗ
			|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
			|ГДЕ
			|	ТоварыВПроизводстве.Организация = &ОрганизацияПустаяСсылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втДанныеРегистров.Регистратор КАК Ссылка,
			|	втДанныеРегистров.Период КАК Период,
			|	МАКСИМУМ(втДанныеРегистров.ПартииТоваровКомпании) КАК ПартииТоваровКомпании,
			|	МАКСИМУМ(втДанныеРегистров.ГТДПартийТоваровКомпании) КАК ГТДПартийТоваровКомпании,
			|	МАКСИМУМ(втДанныеРегистров.ТоварыВПроизводстве) КАК ТоварыВПроизводстве
			|ИЗ
			|	втДанныеРегистров КАК втДанныеРегистров
			|
			|СГРУППИРОВАТЬ ПО
			|	втДанныеРегистров.Регистратор,
			|	втДанныеРегистров.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";
		
		Запрос.УстановитьПараметр("ОрганизацияПустаяСсылка", Справочники.Организации.ПустаяСсылка());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Установить_ДатаНачалаОбособленногоУчетаТоваровПоОрганизациямПослеОбновленияИБ();
			
			Параметры.ОбработкаЗавершена = Истина;
			
			Возврат;
		
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СчОшибокЗаписи = 0;
			
			Пока Истина Цикл // Пробуем записать документ несколько раз для исключения ошибок блокировки данных
			
				НачатьТранзакцию();
				
				Попытка
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
					ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					Блокировка.Заблокировать();
					
					Если Выборка.ПартииТоваровКомпании Тогда
						
						Набор = РегистрыНакопления.ПартииТоваровКомпании.СоздатьНаборЗаписей();
						Набор.Отбор.Регистратор.Установить(Выборка.Ссылка);
						Набор.БлокироватьДляИзменения = Истина;
						Набор.Прочитать();
						
						Для Каждого Движение Из Набор Цикл
							
							Движение.Организация = Движение.СкладКомпании.Организация;
							
						КонецЦикла;
						
						Набор.Записать();
					
					КонецЕсли;
					
					Если Выборка.ГТДПартийТоваровКомпании Тогда
						
						Набор = РегистрыНакопления.ГТДПартийТоваровКомпании.СоздатьНаборЗаписей();
						Набор.Отбор.Регистратор.Установить(Выборка.Ссылка);
						Набор.БлокироватьДляИзменения = Истина;
						Набор.Прочитать();
						
						Для Каждого Движение Из Набор Цикл
							
							Движение.Организация = Движение.СкладКомпании.Организация;
						
						КонецЦикла;
						
						Набор.Записать();
					
					КонецЕсли;
					
					Если Выборка.ТоварыВПроизводстве Тогда
						
						Набор = РегистрыНакопления.ТоварыВПроизводстве.СоздатьНаборЗаписей();
						Набор.Отбор.Регистратор.Установить(Выборка.Ссылка);
						Набор.БлокироватьДляИзменения = Истина;
						Набор.Прочитать();
						
						Для Каждого Движение Из Набор Цикл
							
							Движение.Организация = Движение.Цех.Организация;
							
						КонецЦикла;
						
						Набор.Записать();
					
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
					Прервать;
					
				Исключение
					
					ОтменитьТранзакцию();
					
					СчОшибокЗаписи = СчОшибокЗаписи + 1;
					
					Если СчОшибокЗаписи > 10 Тогда
						
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать объект: %1 по причине: %2'"),
							Выборка.Ссылка,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
						ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,
							Выборка.Ссылка.Метаданные(),
							Выборка.Ссылка,
							ТекстСообщения);
							
						ВызватьИсключение(ТекстСообщения);
					
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЦикла
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура Установить_ДатаНачалаОбособленногоУчетаТоваровПоОрганизациямПослеОбновленияИБ()
	
	Если Константы.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям.Получить() <> 
		ДатаНачалаОбособленногоУчетаТовараРазныхОрганизацийПриОбновленииИБ() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МенеджерЗначения = Константы.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям.СоздатьМенеджерЗначения();
	
	Если КоличествоОрганизацийВСправочнике() <= 1 Тогда
		
		МенеджерЗначения.Значение = Дата(1, 1, 1);
		
	Иначе
		
		ДатаПоследнегоПроблемногоДокумента = ДатаПоследнегоДокументаСОрганизациейСкладаОтличнойОтОрганизацииДокумента();
		
		Если ДатаПоследнегоПроблемногоДокумента = Дата(1, 1, 1) Тогда
		
			МенеджерЗначения.Значение = Дата(1, 1, 1);
			
		Иначе
			
			СекундВДне = 86400;
			МенеджерЗначения.Значение = ДатаПоследнегоПроблемногоДокумента + СекундВДне;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Попытка
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		
	Исключение
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать значение <%1> в константу <Дата начала обособленного учета товаров по организациям>, по причине:
											  |%2'"),
			Формат(МенеджерЗначения.Значение, "ДЛФ=Д"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Константы.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям,
			МенеджерЗначения.Значение,
			ТекстСообщения);
			
		ВызватьИсключение(ТекстСообщения);
			
	КонецПопытки;
	
КонецПроцедуры

Функция НачальноеЗаполнениеОрганизацииВРегистрыУчетаТоваровПриОбновленииИБ() Экспорт
	
	Возврат Константы.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям.Получить() =
		ДатаНачалаОбособленногоУчетаТовараРазныхОрганизацийПриОбновленииИБ()
		И НЕ ЗаполненаОрганизацияВРегистрыУчетаТоваров();

КонецФункции

Функция ЕстьСкладыИлиЦехаБезОрганизации()
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыКомпании.Ссылка КАК Ссылка,
		|	СкладыКомпании.Представление КАК Представление
		|ИЗ
		|	Справочник.СкладыКомпании КАК СкладыКомпании
		|ГДЕ
		|	СкладыКомпании.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И НЕ СкладыКомпании.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Отказ  = Истина;
		ШаблонСообщения = НСтр("ru = 'У склада <%1> не заполнена организация'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения,	Выборка.Представление);
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Выборка.Ссылка.Метаданные(),
			Выборка.Ссылка,
			ТекстСообщения);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Цеха.Ссылка КАК Ссылка,
		|	Цеха.Представление КАК Представление
		|ИЗ
		|	Справочник.Цеха КАК Цеха
		|ГДЕ
		|	Цеха.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Отказ  = Истина;
		
		ШаблонСообщения = НСтр("ru = 'У цеха <%1> не заполнена организация'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Представление);
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Выборка.Ссылка.Метаданные(),
			Выборка.Ссылка,
			ТекстСообщения);
		
	КонецЦикла;
	
	Возврат Отказ;

КонецФункции

Функция КоличествоОрганизацийВСправочнике()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КоличествоОрганизаций
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.КоличествоОрганизаций;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;

КонецФункции

Функция ДатаНачалаОбособленногоУчетаТовараРазныхОрганизацийПриОбновленииИБ()

	Возврат Дата(3999, 12, 31);
	
КонецФункции

Функция ЗаполненаОрганизацияВРегистрыУчетаТоваров()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартииТоваровКомпании.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ втДанныеРегистров
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.Организация = &ОрганизацияПустаяСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГТДПартийТоваровКомпании.Регистратор
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Организация = &ОрганизацияПустаяСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыВПроизводстве.Регистратор
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.Организация = &ОрганизацияПустаяСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеРегистров.Регистратор КАК Ссылка
		|ИЗ
		|	втДанныеРегистров КАК втДанныеРегистров
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеРегистров.Регистратор";
	
	Запрос.УстановитьПараметр("ОрганизацияПустаяСсылка", Справочники.Организации.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

Функция ДатаПоследнегоДокументаСОрганизациейСкладаОтличнойОтОрганизацииДокумента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартииТоваровКомпании.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
		|ГДЕ
		|	ПартииТоваровКомпании.Регистратор.Организация <> ПартииТоваровКомпании.СкладКомпании.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГТДПартийТоваровКомпании.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор.Организация <> ГТДПартийТоваровКомпании.СкладКомпании.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыВПроизводстве.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.Регистратор.Организация <> ТоварыВПроизводстве.Цех.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	
	ВыборкаПартии		= РезультатПакетаЗапросов[0].Выбрать();
	ВыборкаГТД			= РезультатПакетаЗапросов[1].Выбрать();
	ВыборкаПроизводство = РезультатПакетаЗапросов[2].Выбрать();
	
	ДатаПоследнегоДокумента = Дата(1, 1, 1);
	
	Если ВыборкаПартии.Следующий() Тогда
		ДатаПоследнегоДокумента = ВыборкаПартии.Период;
	КонецЕсли;
	
	Если ВыборкаГТД.Следующий() Тогда
		ДатаПоследнегоДокумента = Макс(ДатаПоследнегоДокумента, ВыборкаГТД.Период);
	КонецЕсли;
	
	Если ВыборкаПроизводство.Следующий() Тогда
		ДатаПоследнегоДокумента = Макс(ДатаПоследнегоДокумента, ВыборкаПроизводство.Период);
	КонецЕсли;
	
	Возврат ДатаПоследнегоДокумента;

КонецФункции

#КонецОбласти
