
#Область ПрограммныйИнтерфейс

// см. ПользователиПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.РедактированиеРолей = Истина;
	
КонецПроцедуры

// Переопределяет поведение формы пользователя и формы внешнего пользователя,
// группы внешних пользователей, когда оно должно отличаться от поведения по умолчанию.
//
// Параметры:
//  Ссылка	- СправочникСсылка.Пользователи
//          - СправочникСсылка.ВнешниеПользователи
//          - СправочникСсылка.ГруппыВнешнихПользователей - ссылка на пользователя,
//                          внешнего пользователя или группу внешних пользователей при создании формы.
//  ДействияВФорме - Структура:
//         * Роли                   - Строка - "", "Просмотр", "Редактирование".
//                                             Например, когда роли редактируются в другой форме, можно скрыть
//                                             их в этой форме или только блокировать редактирование.
//         * КонтактнаяИнформация   - Строка - "", "Просмотр", "Редактирование".
//
Процедура ИзменитьДействияВФорме(Знач Ссылка, Знач ДействияВФорме) Экспорт
	
	ДействияВФорме.Роли = "Просмотр";
	
КонецПроцедуры

// Заполняет подсистемы и роли 
// 
// Параметры: 
//  КоллекцияСтрокДерева - КоллекцияСтрокДерева - дерево ролей с подсистемами
//  Подсистемы  - Подсистемы - список подсистем конфигурации
//  НедоступныеРоли - Соответствие - роли недоступные для назначения
//  ВсеРоли - Соотвествие - все роли 
//  ТекущийИндекс - Число - текущий индекс операции
//
Процедура ЗаполнитьПодсистемыИРоли(
		КоллекцияСтрокДерева,
		Подсистемы,
		НедоступныеРоли,
		ВсеРоли = Неопределено,
		ТекущийИндекс = 0) Экспорт
	
	Если Подсистемы = Неопределено Тогда
		Подсистемы = Метаданные.Подсистемы;
	КонецЕсли;
	
	Если ВсеРоли = Неопределено Тогда
		ВсеРоли = Новый Соответствие;
		Для Каждого Роль Из Метаданные.Роли Цикл
			
			Если НедоступныеРоли.Получить(Роль.Имя) <> Неопределено
			 Или ВРег(Лев(Роль.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
			
				Продолжить;
			КонецЕсли;
			ВсеРоли.Вставить(Роль, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Подсистема Из Подсистемы Цикл
		
		ОписаниеПодсистемы = КоллекцияСтрокДерева.Добавить();
		ОписаниеПодсистемы.Имя     = Подсистема.Имя;
		ОписаниеПодсистемы.Синоним = ?(ЗначениеЗаполнено(Подсистема.Синоним), Подсистема.Синоним, Подсистема.Имя);
		ОписаниеПодсистемы.Порядок = ТекущийИндекс;
		ТекущийИндекс = ТекущийИндекс + 1;
		
		ЗаполнитьПодсистемыИРоли(ОписаниеПодсистемы.Строки, Подсистема.Подсистемы, НедоступныеРоли, ВсеРоли, ТекущийИндекс);
		
		Для Каждого ОбъектМетаданных Из Подсистема.Состав Цикл
			Если ВсеРоли[ОбъектМетаданных] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Роль = ОбъектМетаданных;
			ОписаниеРоли = ОписаниеПодсистемы.Строки.Добавить();
			ОписаниеРоли.ЭтоРоль = Истина;
			ОписаниеРоли.Имя     = Роль.Имя;
			ОписаниеРоли.Синоним = ?(ЗначениеЗаполнено(Роль.Синоним), Роль.Синоним, Роль.Имя);
			ОписаниеРоли.Порядок = 99999;
		КонецЦикла;
		
		Отбор = Новый Структура("ЭтоРоль", Истина);
		Если ОписаниеПодсистемы.Строки.НайтиСтроки(Отбор, Истина).Количество() = 0 Тогда
			КоллекцияСтрокДерева.Удалить(ОписаниеПодсистемы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Установка параметров сеанса после записи пользователя.
//
// Параметры:
//  Объект - СправочникОбъект.Пользователи - Пользователь, для которого выполняется действие.
//  Отказ  - Булево - Отказ от записи объекта.
//
Процедура ОбновитьПараметрыСеанса(Объект, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	Исключение
		ТекущийПользователь = Неопределено;
	КонецПопытки;
	
	Если Объект.Ссылка = ТекущийПользователь Тогда
		
		// У текущего пользователя сменилось подразделение
		Если Объект.ПодразделениеКомпании <> ПараметрыСеанса.ПодразделениеКомпании Тогда
			ПараметрыСеанса.ПодразделениеКомпании = Объект.ПодразделениеКомпании;
		КонецЕсли;
		
		// У текущего пользователя сменилась организация
		Если Объект.Организация <> ПараметрыСеанса.Организация Тогда
			ПараметрыСеанса.Организация = Объект.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПараметрыСеанса()

// Добавление элементов на форму
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется событие.
//
Процедура ФормаПользователиПриСозданииНаСервере(Форма) Экспорт
	
	// Добавим реквизиты
	ДобавитьНаФормуОтраслевыеРеквизиты(Форма);
	
	// Заполним реквизиты
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Форма.Карточка = Справочники.Карточки.НайтиПоРеквизиту("Объект", Форма.Объект.Ссылка);
		Форма.ПользовательСотрудник = ЗначениеЗаполнено(Форма.Объект.Сотрудник);
	КонецЕсли;
	
	// Изменить видимость и положение элементов форм
	ИзменитьВидимостьРасположениеЭлементовФормы(Форма);
	
	Если Форма.Элементы.Найти("ФормаОбработкаПерсональныеНастройкиПерсональныеНастройкиПанельФормы") <> Неопределено Тогда
		Форма.Элементы.ФормаОбработкаПерсональныеНастройкиПерсональныеНастройкиПанельФормы.Видимость = Ложь;
	КонецЕсли;
	
	Форма.ЭтоКопированиеПользователя = ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования);
	Форма.ДатаПоследнейАктивности = ПолучитьДатуПоследнейАктивности(Форма.Объект.Ссылка);
	Форма.Элементы.РолиУстановитьФлажки.Видимость = Ложь;
	Форма.Элементы.РолиСнятьФлажки.Видимость = Ложь;
	
КонецПроцедуры // ФормаПользователиПриСозданииНаСервере()

// Добавление элементов на форму списка справочника "Пользователи"
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется событие.
//
Процедура ФормаСпискаПользователиПриСозданииНаСервере(Форма) Экспорт
	
	// Уберем лишние элементы с формы
	Форма.Элементы.Фотография.Видимость = Ложь;
	
	// Изменим список
	Форма.ПользователиСписок.ТекстЗапроса = ТекстЗапросаСпискаПользователей();
	Форма.Элементы.ПользователиСписок.Шапка = Истина;
	
	// Вывод колонок в список
	ГруппаДатаПоследнейАктивности = Форма.Элементы.Вставить(
		"ГруппаДатаПоследнейАктивности",
		Тип("ГруппаФормы"),
		Форма.Элементы.ПользователиСписок,
		Форма.Элементы.Ссылка);
	ГруппаДатаПоследнейАктивности.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаДатаПоследнейАктивности.Группировка = ГруппировкаКолонок.ВЯчейке;
	ГруппаДатаПоследнейАктивности.ОтображатьВШапке = Ложь;
	
	ДатаПоследнейАктивности = Форма.Элементы.Добавить(
		"ДатаПоследнейАктивности",
		Тип("ПолеФормы"),
		ГруппаДатаПоследнейАктивности);
	ДатаПоследнейАктивности.Вид = ВидПоляФормы.ПолеВвода;
	ДатаПоследнейАктивности.ПутьКДанным = "ПользователиСписок.ДатаПоследнейАктивности";
	ДатаПоследнейАктивности.Формат = "ДЛФ=D";
	
	ПоследняяАктивностьВремя = Форма.Элементы.Добавить(
		"ПоследняяАктивностьВремя",
		Тип("ПолеФормы"),
		ГруппаДатаПоследнейАктивности);
	ПоследняяАктивностьВремя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПоследняяАктивностьВремя.Вид = ВидПоляФормы.ПолеВвода;
	ПоследняяАктивностьВремя.ПутьКДанным = "ПользователиСписок.ПоследняяАктивностьВремя";
	ПоследняяАктивностьВремя.Формат = "ДЛФ=T";
	
	Если Форма.Элементы.Найти("ФормаОбработкаПерсональныеНастройкиПерсональныеНастройкиПанельФормы") <> Неопределено Тогда
		Форма.Элементы.ФормаОбработкаПерсональныеНастройкиПерсональныеНастройкиПанельФормы.Видимость = 
			РольПользователя("Администрирование");
	КонецЕсли;
	
КонецПроцедуры

// Возвращается группа прав и настройки по имени.
//
// Параметры:
//  ИмяГруппыПравИНастроек	 - Строка - Имя группы настроек и прав.
// 
// Возвращаемое значение:
//  СправочникСсылка.ГруппыПравИНастроек - Ссылка на соответствующий элемент справочника.
//
Функция ГруппаПравИНастроекПоНаименованию(ИмяГруппыПравИНастроек) Экспорт
	
	ГруппаНастроек = Справочники.ГруппыПравИНастроек.НайтиПоНаименованию(
		ИмяГруппыПравИнастроек,
		Истина);
	
	Если ЗначениеЗаполнено(ГруппаНастроек) Тогда
		Возврат ГруппаНастроек;
	КонецЕсли;
	
	НоваяГруппа = Справочники.ГруппыПравИНастроек.СоздатьЭлемент();
	НоваяГруппа.Заполнить(Неопределено);
	НоваяГруппа.Наименование = ИмяГруппыПравИНастроек;
	НоваяГруппа.Описание = НСтр("ru = 'Группа сформирована автоматически'");
	
	НоваяГруппа.Записать();
	
	Возврат НоваяГруппа.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура отключает использование внешних пользователей в конфигурации.
// Необходима при обновлении. Так как была вырезана подсистема внешних пользователей.
//
Процедура ОтключитьИспользованиеВнешнихПользователей() Экспорт
	
	Если Константы.ИспользоватьВнешнихПользователей.Получить() Тогда
		
		Константы.ИспользоватьВнешнихПользователей.Установить(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьНаФормуОтраслевыеРеквизиты(Форма)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	РеквизитПропуститьПроверкуПодразделения = Новый РеквизитФормы(
		"ПропуститьПроверкуПодразделения",
		ТипБулево,
		,
		НСтр("ru = 'Пропустить проверку подразделения'")
	);
	ДобавляемыеРеквизиты.Добавить(РеквизитПропуститьПроверкуПодразделения);
	
	РеквизитЭтоКопированиеПользователя = Новый РеквизитФормы(
		"ЭтоКопированиеПользователя",
		ТипБулево,
		,
		НСтр("ru = 'Это копирование пользователя'")
	);
	ДобавляемыеРеквизиты.Добавить(РеквизитЭтоКопированиеПользователя);
	
	РеквизитПользовательСотрудник = Новый РеквизитФормы(
		"ПользовательСотрудник",
		ТипБулево,
		,
		НСтр("ru = 'Является сотрудником'")
	);
	ДобавляемыеРеквизиты.Добавить(РеквизитПользовательСотрудник);
	
	РеквизитСотрудникОбъект = Новый РеквизитФормы(
		"СотрудникОбъект",
		Новый ОписаниеТипов("СправочникОбъект.Сотрудники"),
		,
		НСтр("ru = 'Сотрудник объект'")
	);
	ДобавляемыеРеквизиты.Добавить(РеквизитСотрудникОбъект);
	
	РеквизитКарточка = Новый РеквизитФормы(
		"Карточка",
		Новый ОписаниеТипов("СправочникСсылка.Карточки"),
		,
		НСтр("ru = 'Карточка'")
	);
	ДобавляемыеРеквизиты.Добавить(РеквизитКарточка);
	
	РеквизитДатаПоследнейАктивности = Новый РеквизитФормы(
		"ДатаПоследнейАктивности",
		Новый ОписаниеТипов("Дата"),
		,
		НСтр("ru = 'Дата последней активности'")
	);
	ДобавляемыеРеквизиты.Добавить(РеквизитДатаПоследнейАктивности);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ИзменитьВидимостьРасположениеЭлементовФормы(Форма)
	
	// Уберем ненужные элементы из формы
	Форма.Элементы.Фотография.Видимость = Ложь;
	Форма.Элементы.ФизическоеЛицо.Видимость = Ложь;
	Форма.Элементы.Подразделение.Видимость = Ложь;
	Форма.Элементы.КомандыФормы.Видимость = Ложь;
	Форма.Элементы.ФормаВыбратьФотографию.Видимость = Ложь;
	
	// Добавим команды на командную панель
	Если Форма.Элементы.Найти("ФормаЗаписать") = Неопределено Тогда
		ФормаЗаписать = Форма.Элементы.Вставить(
			"ФормаЗаписать",
			Тип("КнопкаФормы"),
			Форма.Элементы.ФормаКоманднаяПанель,
			Форма.Элементы.КомандыФормы);
		ФормаЗаписать.ИмяКоманды = "Записать";
	Иначе
		Форма.Элементы.Переместить(
			Форма.Элементы.ФормаЗаписать,
			Форма.Элементы.ФормаКоманднаяПанель,
			Форма.Элементы.КомандыФормы);
		ФормаЗаписать = Форма.Элементы.ФормаЗаписать;
	КонецЕсли;
	ФормаЗаписать.Отображение = ОтображениеКнопки.Картинка;
	
	Если Форма.Элементы.Найти("ФормаОбработкаПерсональныеНастройкиПерсональныеНастройкиПанельФормы") <> Неопределено Тогда
		Форма.Элементы.Переместить(
			Форма.Элементы.ФормаОбработкаПерсональныеНастройкиПерсональныеНастройкиПанельФормы,
			Форма.Элементы.ФормаКоманднаяПанель,
			Форма.Элементы.КомандыФормы);
	КонецЕсли;
	
	// Группа прав и настроек
	ЭлементРоли = Форма.Элементы.Найти("Роли");
	НовыйЭлемент = Форма.Элементы.Вставить("ГруппаПравИНастроек", Тип("ПолеФормы"), Форма.Элементы.ОтображениеРолей, ЭлементРоли);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.ГруппаПравИНастроек";
	НовыйЭлемент.КнопкаОткрытия = Истина;
	НовыйЭлемент.КнопкаСоздания = Ложь;
	
	// Изменим свойства элементов
	Форма.Элементы.СвойстваПользователяИБ.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
	Форма.Элементы.КонтактнаяИнформация.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
	Форма.Элементы.СтраницаДополнительныеРеквизиты.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
	Форма.Элементы.СтраницаКомментарий.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
	Форма.Элементы.Главное.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
	Форма.Элементы.ОтображениеРолей.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
	
	// Добавим страницу "Параметры пользователя" и элементы
	ДобавитьСтраницуПараметрыПользователя(Форма);
	
	// Добавим страницу "Сотрудник" и элементы
	ДобавитьСтраницуСотрудник(Форма);
	
КонецПроцедуры

Функция ПолучитьДатуПоследнейАктивности(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОПользователях.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности
	               |ИЗ
	               |	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	               |ГДЕ
	               |	СведенияОПользователях.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда Возврат Неопределено; КонецЕсли;
	
	РезультатЗапроса = Результат.Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.ДатаПоследнейАктивности;
	
КонецФункции

Процедура ДобавитьСтраницуПараметрыПользователя(Форма)
	
	СтраницаПараметрыПользователя = Форма.Элементы.Вставить(
		"ПараметрыПользователя",
		Тип("ГруппаФормы"),
		Форма.Элементы.Страницы,
		Форма.Элементы.СтраницаДополнительныеРеквизиты);
	СтраницаПараметрыПользователя.Вид = ВидГруппыФормы.Страница;
	СтраницаПараметрыПользователя.Заголовок = НСтр("ru = 'Параметры пользователя'");
	СтраницаПараметрыПользователя.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
	
	ГруппаИдентификационныеПараметры = Форма.Элементы.Добавить(
		"ИдентификационныеПараметры",
		Тип("ГруппаФормы"),
		СтраницаПараметрыПользователя);
	ГруппаИдентификационныеПараметры.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаИдентификационныеПараметры.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаИдентификационныеПараметры.ОтображатьЗаголовок = Ложь;
	ГруппаИдентификационныеПараметры.Объединенная = Истина;
	ГруппаИдентификационныеПараметры.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	НовыйЭлемент = Форма.Элементы.Добавить("ПодразделениеКомпании", Тип("ПолеФормы"), ГруппаИдентификационныеПараметры);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.ПодразделениеКомпании";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПодразделениеКомпанииПриИзменении");
	
	НовыйЭлемент = Форма.Элементы.Добавить("Организация", Тип("ПолеФормы"), ГруппаИдентификационныеПараметры);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.Организация";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОрганизацияПриИзменении");
	
	НовыйЭлемент = Форма.Элементы.Добавить("ИНН", Тип("ПолеФормы"), ГруппаИдентификационныеПараметры);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.ИНН";
	
	НовыйЭлемент = Форма.Элементы.Добавить("Карточка", Тип("ПолеФормы"), ГруппаИдентификационныеПараметры);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Карточка";
	СвязиПараметровВыбора = Новый Массив;
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Объект", "Объект.Ссылка"));
	НовыйЭлемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
	НовыйЭлемент = Форма.Элементы.Добавить("ГрафикРаботы", Тип("ПолеФормы"), ГруппаИдентификационныеПараметры);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.ГрафикРаботы";
	
	НовыйЭлемент = Форма.Элементы.Добавить("ДатаПоследнейАктивности", Тип("ПолеФормы"), ГруппаИдентификационныеПараметры);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ДатаПоследнейАктивности";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	
	ГруппаАвторИДата = Форма.Элементы.Добавить(
		"ГруппаАвторИДата",
		Тип("ГруппаФормы"),
		СтраницаПараметрыПользователя);
	ГруппаАвторИДата.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаАвторИДата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаАвторИДата.ОтображатьЗаголовок = Ложь;
	ГруппаАвторИДата.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	ГруппаАвторИДата.Объединенная = Истина;
	ГруппаАвторИДата.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	НовыйЭлемент = Форма.Элементы.Добавить("Автор", Тип("ПолеФормы"), ГруппаАвторИДата);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.Автор";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("ДатаСоздания", Тип("ПолеФормы"), ГруппаАвторИДата);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.ДатаСоздания";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
КонецПроцедуры

Процедура ДобавитьСтраницуСотрудник(Форма)
	
	СтраницаСотрудник = Форма.Элементы.Вставить(
		"СтраницаСотрудник",
		Тип("ГруппаФормы"),
		Форма.Элементы.Страницы,
		Форма.Элементы.СтраницаДополнительныеРеквизиты);
	СтраницаСотрудник.Вид = ВидГруппыФормы.Страница;
	СтраницаСотрудник.Заголовок = НСтр("ru = 'Сотрудник'");
	СтраницаСотрудник.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	СтраницаСотрудник.ПутьКДаннымЗаголовка = "ПользовательСотрудник";
	СтраницаСотрудник.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
	
	ГруппаСотрудникЛево = Форма.Элементы.Добавить(
		"СотрудникЛево",
		Тип("ГруппаФормы"),
		СтраницаСотрудник);
	ГруппаСотрудникЛево.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСотрудникЛево.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСотрудникЛево.ОтображатьЗаголовок = Ложь;
	ГруппаСотрудникЛево.Объединенная = Истина;
	ГруппаСотрудникЛево.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСотрудникЛево.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	
	ГруппаЯвляетсяСотрудником = Форма.Элементы.Добавить(
		"ГруппаЯвляетсяСотрудником",
		Тип("ГруппаФормы"),
		ГруппаСотрудникЛево);
	ГруппаЯвляетсяСотрудником.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЯвляетсяСотрудником.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЯвляетсяСотрудником.ОтображатьЗаголовок = Ложь;
	ГруппаЯвляетсяСотрудником.Объединенная = Истина;
	ГруппаЯвляетсяСотрудником.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЯвляетсяСотрудником.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	
	НовыйЭлемент = Форма.Элементы.Добавить("ПользовательСотрудник", Тип("ПолеФормы"), ГруппаЯвляетсяСотрудником);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.Заголовок = НСтр("ru = 'Сотрудник:'");
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	НовыйЭлемент.ПутьКДанным = "ПользовательСотрудник";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПользовательСотрудникПриИзменении");
	
	НовыйЭлемент = Форма.Элементы.Добавить("Сотрудник", Тип("ПолеФормы"), ГруппаЯвляетсяСотрудником);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.ПутьКДанным = "Объект.Сотрудник";
	НовыйЭлемент.ПодсказкаВвода = Нстр("ru = '< Новый сотрудник >'");
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СотрудникПриИзменении");
	
	НовыйЭлемент = Форма.Элементы.Добавить("СотрудникДолжность", Тип("ПолеФормы"), ГруппаСотрудникЛево);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.Заголовок = НСтр("ru = 'Должность'");
	НовыйЭлемент.ПутьКДанным = "СотрудникОбъект.Должность";
	
	ГруппаДаты = Форма.Элементы.Добавить(
		"ГруппаДаты",
		Тип("ГруппаФормы"),
		ГруппаСотрудникЛево);
	ГруппаДаты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДаты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаДаты.ОтображатьЗаголовок = Ложь;
	ГруппаДаты.Объединенная = Истина;
	ГруппаДаты.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ГруппаДатыЛево = Форма.Элементы.Добавить(
		"ГруппаДатыЛево",
		Тип("ГруппаФормы"),
		ГруппаДаты);
	ГруппаДатыЛево.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДатыЛево.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаДатыЛево.ОтображатьЗаголовок = Ложь;
	ГруппаДатыЛево.Объединенная = Ложь;
	ГруппаДатыЛево.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	НовыйЭлемент = Форма.Элементы.Добавить("СотрудникДатаРождения", Тип("ПолеФормы"), ГруппаДатыЛево);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = НСтр("ru = 'Дата рождения'");
	НовыйЭлемент.ПутьКДанным = "СотрудникОбъект.ДатаРождения";
	
	НовыйЭлемент = Форма.Элементы.Добавить("СотрудникДатаПриема", Тип("ПолеФормы"), ГруппаДатыЛево);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = НСтр("ru = 'Дата приема'");
	НовыйЭлемент.ПутьКДанным = "СотрудникОбъект.ДатаПриема";
	
	ГруппаДатыПраво = Форма.Элементы.Добавить(
		"ГруппаДатыПраво",
		Тип("ГруппаФормы"),
		ГруппаДаты);
	ГруппаДатыПраво.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДатыПраво.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаДатыПраво.ОтображатьЗаголовок = Ложь;
	ГруппаДатыПраво.Объединенная = Ложь;
	ГруппаДатыПраво.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	НовыйЭлемент = Форма.Элементы.Добавить("СотрудникУволен", Тип("ПолеФормы"), ГруппаДатыПраво);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.Заголовок = НСтр("ru = 'Уволен'");
	НовыйЭлемент.ПутьКДанным = "СотрудникОбъект.ФлагУволен";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СотрудникУволенПриИзменении");
	
	НовыйЭлемент = Форма.Элементы.Добавить("СотрудникДатаУвольнения", Тип("ПолеФормы"), ГруппаДатыПраво);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = НСтр("ru = 'Дата увольнения'");
	НовыйЭлемент.ПутьКДанным = "СотрудникОбъект.ДатаУвольнения";
	
	ГруппаСотрудникПраво = Форма.Элементы.Добавить(
		"СотрудникПраво",
		Тип("ГруппаФормы"),
		СтраницаСотрудник);
	ГруппаСотрудникПраво.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСотрудникПраво.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСотрудникПраво.ОтображатьЗаголовок = Ложь;
	
	НовыйЭлемент = Форма.Элементы.Добавить("ФотоПользователя", Тип("ПолеФормы"), ГруппаСотрудникПраво);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.ПутьКДанным = "АдресФотографии";
	НовыйЭлемент.Масштабировать = Истина;
	НовыйЭлемент.Масштаб = 100;
	НовыйЭлемент.Ширина = 0;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.РастягиватьПоВертикали = Истина;
	НовыйЭлемент.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	
КонецПроцедуры

Функция ТекстЗапросаСпискаПользователей()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Подготовлен КАК Подготовлен,
	|	Пользователи.ПометкаУдаления КАК ПометкаУдаления,
	|	Пользователи.Недействителен КАК Недействителен,
	|	Пользователи.Наименование КАК Наименование,
	|	Пользователи.Служебный КАК Служебный,
	|	Пользователи.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА Пользователи.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НомерКартинки,
	|	ВЫБОР
	|		КОГДА Пользователи.Служебный
	|			ТОГДА ЛОЖЬ
	|		КОГДА Пользователи.Недействителен
	|			ТОГДА ЛОЖЬ
	|		КОГДА Пользователи.ИдентификаторПользователяИБ = &ИдентификаторТекущегоПользователяИБ
	|			ТОГДА ИСТИНА
	|		КОГДА &ВозможноСменитьТолькоСвойПароль
	|			ТОГДА ЛОЖЬ
	|		КОГДА Пользователи.ИдентификаторПользователяИБ = &ПустойУникальныйИдентификатор
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВозможноСменитьПароль,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|	СведенияОПользователях.ДатаПоследнейАктивности КАК ПоследняяАктивностьВремя,
	|	НАЧАЛОПЕРИОДА(СведенияОПользователях.ДатаПоследнейАктивности, ДЕНЬ) КАК ДатаПоследнейАктивности
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО Пользователи.Ссылка = СведенияОПользователях.Пользователь
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВсеПользователи
	|				ТОГДА ИСТИНА
	|			КОГДА &ВыбиратьИерархически
	|				ТОГДА ИСТИНА В
	|						(ВЫБРАТЬ
	|							ИСТИНА
	|						ИЗ
	|							РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|						ГДЕ
	|							СоставыГруппПользователей.Пользователь = Пользователи.Ссылка
	|							И СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей)
	|			ИНАЧЕ ИСТИНА В
	|					(ВЫБРАТЬ
	|						ИСТИНА
	|					ИЗ
	|						Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|					ГДЕ
	|						ГруппыПользователейСостав.Пользователь = Пользователи.Ссылка
	|						И ГруппыПользователейСостав.Ссылка = &ГруппаПользователей)
	|		КОНЕЦ";
	
КонецФункции

#КонецОбласти