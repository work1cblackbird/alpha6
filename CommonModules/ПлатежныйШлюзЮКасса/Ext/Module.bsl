////////////////////////////////////////////////////////////////////////////////
// Работа с платежным шлюзом Ю-Касса
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Зарегистрировать счет в платежном шлюзе
//
// Параметры:
//  ДанныеСчета             - Структура - см. ОнлайнОплата.ПолучитьДанныеСчетаДляРегистрации
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//  Холдирование         - Булево - признак ходирования денежных средств (Истина - холдирование, Ложь - оплата)
//
Процедура ЗарегистрироватьСчет(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения, Холдирование) Экспорт

	Если Холдирование Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Холдирование средств в данной версии не поддерживается'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьЗаголовки(ПараметрыВзаимодействия);
	
	СформироватьЗапросНаРегистрациюСчета(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос. Ошибки записаны при получении ответа
	Если ОтветСервера = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Сохранить ответ сервера в журнал регистрации событий
	ОнлайнОплата.СохранитьОтветСервераВЖурнал(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	// Дополнительный контроль на случай, когда код ошибки не распознан
	Если НЕ СчетЗарегистрирован(ОтветСервера, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Запись результатов регистрации счета в регистр Платежный шлюз
	ОнлайнОплата.ЗаписатьРегистрациюСчета(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);

КонецПроцедуры // ЗарегистрироватьСчет()

// Получить данные платежного шлюза по состоянию оплаты счета
//
// Параметры:
//  ДанныеСчета             - Структура - см. ОнлайнОплата.ПолучитьДанныеЗарегистрированногоСчета
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Структура - измерения и ресурсы для записи в регистр ПлатежныйШлюз
//
Функция ПолучитьДанныеСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	ПараметрыВзаимодействия.Вставить("Заголовки", Новый Соответствие);
	
	СформироватьЗапросНаПолучениеСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос
	Если ОтветСервера = Неопределено Тогда
		
		Возврат Новый Структура;
		
	КонецЕсли;
	
	// Сохранить ответ сервера в журнал регистрации событий
	ОнлайнОплата.СохранитьОтветСервераВЖурнал(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	ДанныеДляЗаписи = ПолучитьДанныеДляЗаписиСтатусаОплаты(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции // ПолучитьДанныеСтатусаОплаты()

// Зарегистрировать заявку на расход д/с в платежном шлюзе
//
// Параметры:
//  ДанныеСчета             - Структура - см. ОнлайнОплата.ПолучитьДанныеЗарегистрированногоСчета
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если заявка зарегистрирована, ЛОЖЬ - в противном случае
//
Функция ЗарегистрироватьВозврат(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	СформироватьЗаголовки(ПараметрыВзаимодействия);
	
	СформироватьЗапросНаВозвратОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос
	Если ОтветСервера = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Сохранить ответ сервера в журнал регистрации событий
	ОнлайнОплата.СохранитьОтветСервераВЖурнал(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	Если НЕ ВозвратЗарегистрирован(ОтветСервера, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗарегистрироватьВозврат()

// Получить данные платежного шлюза по состоянию возврата д/с
//
// Параметры:
//  ДанныеСчета             - Структура - см. ОнлайнОплата.ПолучитьДанныеЗарегистрированногоСчета
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Структура - измерения и ресурсы для записи в регистр ПлатежныйШлюз
//
Функция ПолучитьДанныеСтатусаВозврата(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	ПараметрыВзаимодействия.Вставить("Заголовки", Новый Соответствие);
	
	СформироватьЗапросНаПолучениеСтатусаВозврата(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос
	Если ОтветСервера = Неопределено Тогда
		
		Возврат Новый Структура;
		
	КонецЕсли;
	
	// Сохранить ответ сервера в журнал регистрации событий
	ОнлайнОплата.СохранитьОтветСервераВЖурнал(ДанныеСчета, ОтветСервера, РезультатВыполнения);
	
	ДанныеДляЗаписи = ПолучитьДанныеДляЗаписиСтатусаВозврата(ДанныеСчета, ОтветСервера, ПараметрыВзаимодействия
	, РезультатВыполнения);
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции

// Обработать данные входящего уведомления (callback)
//
// Параметры:
//  ПараметрыЗапроса - ФиксированноеСоответствие - параметры уведомления в формате JSON
//
// Возвращаемое значение:
//   Число - код состояния в ответе на уведомление
//
Функция ОбработатьВходящееУведомление(ПараметрыЗапроса) Экспорт
	
	КодОК = 200;
	КодНеОК = 500;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения();
	
	ТипСообщения = ПараметрыЗапроса.Получить("type");
	Событие = ПараметрыЗапроса.Получить("event");
	СтатусУведомления = ПолучитьСтатусУведомления(Событие);
	Объект = ПараметрыЗапроса.Получить("object");
	ИдентификаторОперации = Неопределено;
	Если Объект <> Неопределено Тогда
		ИдентификаторОперации = Объект.Получить("id");
	КонецЕсли;
	
	ЕстьНеопределенность = ТипСообщения <> "notification" ИЛИ Событие = Неопределено ИЛИ Объект = Неопределено
	ИЛИ СтатусУведомления = Неопределено ИЛИ ИдентификаторОперации = Неопределено;
	
	Если ЕстьНеопределенность Тогда
		
		Заголовок = НСтр("ru='Параметры запроса:'");
		ТекстПараметрыЗапроса = ОнлайнОплата.ПолучитьТекстОтветаСервера(ПараметрыЗапроса, Заголовок);
		ШаблонКомментария = НСтр("ru='Неверный формат уведомления ЮКасса%1%2'");
		Комментарий = СтрШаблон(ШаблонКомментария, Символы.ПС, ТекстПараметрыЗапроса);
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		
		Возврат КодОК;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйШлюз.СчетНаОплату КАК СчетНаОплату,
	|	ПлатежныйШлюз.ЗаявкаНаРасходДС КАК ЗаявкаНаРасходДС,
	|	ПлатежныйШлюз.ДатаУведомления КАК ДатаУведомления,
	|	ПлатежныйШлюз.СтатусУведомления КАК СтатусУведомления
	|ИЗ
	|	РегистрСведений.ПлатежныйШлюз КАК ПлатежныйШлюз
	|ГДЕ
	|	(ПлатежныйШлюз.ИдентификаторОперации = &ИдентификаторОперации
	|			ИЛИ ПлатежныйШлюз.ИдентификаторОперацииОплаты = &ИдентификаторОперации)";
	Запрос.УстановитьПараметр("ИдентификаторОперации", ИдентификаторОперации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		
		Заголовок = НСтр("ru='Параметры запроса:'");
		ТекстПараметрыЗапроса = ОнлайнОплата.ПолучитьТекстОтветаСервера(ПараметрыЗапроса, Заголовок);
		ШаблонКомментария = НСтр("ru='Неверный идентификатор операции в уведомлении ЮКасса%1%2'");
		Комментарий = СтрШаблон(ШаблонКомментария, Символы.ПС, ТекстПараметрыЗапроса);
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		
		Возврат КодОК;
		
	КонецЕсли;
	
	Заголовок = НСтр("ru='Получено уведомление ЮКасса с параметрами:'");
	ТекстПараметрыЗапроса = ОнлайнОплата.ПолучитьТекстОтветаСервера(ПараметрыЗапроса, Заголовок);
	ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Информация
	, , Выборка.СчетНаОплату, ТекстПараметрыЗапроса);
		
	ДанныеДляЗаписи = Новый Структура;
	Если СтатусУведомления <> Выборка.СтатусУведомления Тогда
		
		ДанныеДляЗаписи.Вставить("СчетНаОплату", Выборка.СчетНаОплату);
		ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", Выборка.ЗаявкаНаРасходДС);
		ДанныеДляЗаписи.Вставить("ДатаУведомления", ТекущаяДатаСеанса());
		ДанныеДляЗаписи.Вставить("СтатусУведомления", СтатусУведомления);
		
		ОнлайнОплата.ЗаписатьДанныеОбменаРегистр(ДанныеДляЗаписи, РезультатВыполнения);
		
		Если РезультатВыполнения.Успешно Тогда
			
			Возврат КодОК;
			
		Иначе	
			
			Возврат КодНеОК;
			
		КонецЕсли;
		
	Иначе
		
		Возврат КодОК;
		
	КонецЕсли;
	
КонецФункции // ОбработатьВходящееУведомление()

// Построить отчет по операциям
//
// Параметры:
//  ТаблицаОтчета           - ТаблицаЗначений - см. ОнлайнОплата.ПолучитьТаблицуОтчетаПоОперациям
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
Процедура ПостроитьОтчетПоОперациям(ТаблицаОтчета, ПараметрыВзаимодействия, РезультатВыполнения) Экспорт
	
	КоличествоСтрокВОтвете = 50;
	ПараметрыВзаимодействия.Вставить("КоличествоСтрокВОтвете", КоличествоСтрокВОтвете);
	
	ПаузаМеждуЗапросами = 5;
	ПараметрыВзаимодействия.Вставить("ПаузаМеждуЗапросами", ПаузаМеждуЗапросами);
	
	Заголовки = Новый Соответствие;
	ПараметрыВзаимодействия.Вставить("Заголовки", Заголовки);
	
	СформироватьЗапросНаПолучениеОтчетаПоОплатам(ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос. Ошибки записаны при получении ответа
	Если ОтветСервера = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РазобратьОтветСервераНаПолучениеОтчетаПоОплатам(ОтветСервера, ТаблицаОтчета, ПараметрыВзаимодействия
	, РезультатВыполнения);
	
	Пока ПараметрыВзаимодействия.Свойство("Курсор") И РезультатВыполнения.Успешно Цикл
		
		ОнлайнОплата.Пауза(ПараметрыВзаимодействия.ПаузаМеждуЗапросами);
		
		СформироватьЗапросНаПолучениеОтчетаПоОплатам(ПараметрыВзаимодействия, РезультатВыполнения);
		
		ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
		
		// Сервер не обработал запрос. Ошибки записаны при получении ответа
		Если ОтветСервера = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		РазобратьОтветСервераНаПолучениеОтчетаПоОплатам(ОтветСервера, ТаблицаОтчета, ПараметрыВзаимодействия
		, РезультатВыполнения);
		
	КонецЦикла;
	
	СформироватьЗапросНаПолучениеОтчетаПоВозвратам(ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
	
	// Сервер не обработал запрос. Ошибки записаны при получении ответа
	Если ОтветСервера = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РазобратьОтветСервераНаПолучениеОтчетаПоВозвратам(ОтветСервера, ТаблицаОтчета, ПараметрыВзаимодействия
	, РезультатВыполнения);
	
	Пока ПараметрыВзаимодействия.Свойство("Курсор") И РезультатВыполнения.Успешно Цикл
		
		ОнлайнОплата.Пауза(ПараметрыВзаимодействия.ПаузаМеждуЗапросами);
		
		СформироватьЗапросНаПолучениеОтчетаПоВозвратам(ПараметрыВзаимодействия, РезультатВыполнения);
		
		ОтветСервера = ОнлайнОплата.ПолучитьОтветСервера(ПараметрыВзаимодействия, РезультатВыполнения);
		
		// Сервер не обработал запрос. Ошибки записаны при получении ответа
		Если ОтветСервера = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		РазобратьОтветСервераНаПолучениеОтчетаПоВозвратам(ОтветСервера, ТаблицаОтчета, ПараметрыВзаимодействия
		, РезультатВыполнения);
		
	КонецЦикла;
	
	ТаблицаОтчета.Сортировать("ДатаОперации");
	
КонецПроцедуры // ПостроитьОтчетПоОперациям()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сформировать заголовки для HTTP-запроса и поместить их в ПараметрыВзаимодействия
//
// Параметры:
//  ПараметрыВзаимодействия - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//
Процедура СформироватьЗаголовки(ПараметрыВзаимодействия)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Idempotence-Key", Строка(Новый УникальныйИдентификатор));
	ПараметрыВзаимодействия.Вставить("Заголовки", Заголовки);
	
КонецПроцедуры

#Область ФормированиеЗапросов

Процедура СформироватьЗапросНаРегистрациюСчета(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ПараметрыВзаимодействия.Вставить("АдресРесурса", "v3/payments");
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	// ++ Объект amount
	Запись_JSON.ЗаписатьИмяСвойства("amount");
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Запись_JSON.ЗаписатьИмяСвойства("value");
	Запись_JSON.ЗаписатьЗначение(Формат(ДанныеСчета.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
	
	Запись_JSON.ЗаписатьИмяСвойства("currency");
	Запись_JSON.ЗаписатьЗначение("RUB");
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	// -- Объект amount
	
	// ++ Объект confirmation
	Запись_JSON.ЗаписатьИмяСвойства("confirmation");
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Запись_JSON.ЗаписатьИмяСвойства("type");
	Запись_JSON.ЗаписатьЗначение("redirect");
	
	Запись_JSON.ЗаписатьИмяСвойства("return_url");
	Запись_JSON.ЗаписатьЗначение(ПараметрыВзаимодействия.АдресВозвратаПослеОплаты);
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	// -- Объект confirmation
	
	// Холдирование пока не используется
	Запись_JSON.ЗаписатьИмяСвойства("capture");
	Запись_JSON.ЗаписатьЗначение(Истина);
	
	ДлинаНазначенияПлатежа = 128;
	Запись_JSON.ЗаписатьИмяСвойства("description");
	Запись_JSON.ЗаписатьЗначение(Лев(ДанныеСчета.НазначениеПлатежа, ДлинаНазначенияПлатежа));
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
КонецПроцедуры

Процедура СформироватьЗапросНаПолучениеСтатусаОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ПараметрыВзаимодействия.Вставить("АдресРесурса", "v3/payments/" + ДанныеСчета.ИдентификаторОперацииОплаты);
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "GET");
	
КонецПроцедуры

Процедура СформироватьЗапросНаВозвратОплаты(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	АктивнаяСтрокаВозврат = ДанныеСчета.АктивнаяСтрокаВозврат;
	
	ПараметрыВзаимодействия.Вставить("АдресРесурса", "v3/refunds");
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "POST");
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Запись_JSON.ЗаписатьИмяСвойства("payment_id");
	Запись_JSON.ЗаписатьЗначение(АктивнаяСтрокаВозврат.ИдентификаторОперацииОплаты);
	
	// ++ Объект amount
	Запись_JSON.ЗаписатьИмяСвойства("amount");
	
	Запись_JSON.ЗаписатьНачалоОбъекта();
	
	Запись_JSON.ЗаписатьИмяСвойства("value");
	Запись_JSON.ЗаписатьЗначение(Формат(АктивнаяСтрокаВозврат.СуммаЗаявкиНаРасход, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
	
	Запись_JSON.ЗаписатьИмяСвойства("currency");
	Запись_JSON.ЗаписатьЗначение("RUB");
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	// -- Объект amount
	
	ДлинаНазначенияПлатежа = 128;
	Запись_JSON.ЗаписатьИмяСвойства("description");
	Запись_JSON.ЗаписатьЗначение(Лев(ДанныеСчета.НазначениеПлатежа, ДлинаНазначенияПлатежа));
	
	Запись_JSON.ЗаписатьКонецОбъекта();
	
	ПараметрыЗапроса = Запись_JSON.Закрыть();
	
	ПараметрыВзаимодействия.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
КонецПроцедуры

Процедура СформироватьЗапросНаПолучениеСтатусаВозврата(ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	АктивнаяСтрокаВозврат = ДанныеСчета.АктивнаяСтрокаВозврат;
	
	ПараметрыВзаимодействия.Вставить("АдресРесурса", "v3/refunds/" + АктивнаяСтрокаВозврат.ИдентификаторОперации);
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "GET");
	
КонецПроцедуры

Процедура СформироватьЗапросНаПолучениеОтчетаПоОплатам(ПараметрыВзаимодействия, РезультатВыполнения)
	
	ПараметрыВзаимодействия.Вставить("АдресРесурса", "v3/payments");
	
	СформироватьЗапросНаПолучениеОтчета(ПараметрыВзаимодействия, РезультатВыполнения);
	
КонецПроцедуры

Процедура СформироватьЗапросНаПолучениеОтчетаПоВозвратам(ПараметрыВзаимодействия, РезультатВыполнения)
	
	ПараметрыВзаимодействия.Вставить("АдресРесурса", "v3/refunds");
	
	СформироватьЗапросНаПолучениеОтчета(ПараметрыВзаимодействия, РезультатВыполнения);
	
КонецПроцедуры

Процедура СформироватьЗапросНаПолучениеОтчета(ПараметрыВзаимодействия, РезультатВыполнения)
	
	ПараметрыВзаимодействия.Вставить("МетодЗапроса", "GET");
	
	ПараметрДатаНачала = ЗаписатьДатуJSON(ПараметрыВзаимодействия.ДатаНачала, ФорматДатыJSON.ISO
	, ВариантЗаписиДатыJSON.УниверсальнаяДата);
	ПараметрДатаОкончания = ЗаписатьДатуJSON(ПараметрыВзаимодействия.ДатаОкончания + 1, ФорматДатыJSON.ISO
	, ВариантЗаписиДатыJSON.УниверсальнаяДата);
	
	ПараметрыЗапроса = "?created_at.gte=" + ПараметрДатаНачала + "&created_at.lt=" + ПараметрДатаОкончания
	+ "&status=succeeded&limit=50";
	Если ПараметрыВзаимодействия.Свойство("Курсор") Тогда
		ПараметрыЗапроса = ПараметрыЗапроса + "&cursor=" + ПараметрыВзаимодействия.Курсор;
	КонецЕсли;
	
	ПараметрыВзаимодействия.Вставить("АдресРесурса", ПараметрыВзаимодействия.АдресРесурса + ПараметрыЗапроса);
	
КонецПроцедуры

#КонецОбласти

// Проверить успешность выполнения запроса на регистрацию счета в платежном шлюзе
// В случае успеха добавить полученные параметры в структуру ДанныеСчета
//
// Параметры:
//  ОтветСервера            - Соответствие - ответ HTTP-сервиса в формате JSON
//  ДанныеСчета             - Структура - реквизиты Счета на оплату
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА - счет зарегистрирован, ЛОЖЬ - в противном случае
//
Функция СчетЗарегистрирован(ОтветСервера, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ВсеОК = Ложь;
	
	СтатусОперации = ПолучитьСтатусОплаты(ОтветСервера, ДанныеСчета, РезультатВыполнения);
	
	Если СтатусОперации = Перечисления.СтатусыОнлайнОплат.ОжиданиеОплаты Тогда
		
		ВсеОК = Истина;
		
		ИдентификаторЗапроса = ОтветСервера.Получить("id");
		ДанныеСчета.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
		ДанныеСчета.Вставить("ИдентификаторОперацииОплаты", ИдентификаторЗапроса);
		
		ОбъектПодтверждение = ОтветСервера.Получить("confirmation");
		АдресФормыОплаты = ОбъектПодтверждение.Получить("confirmation_url");
		ДанныеСчета.Вставить("АдресФормыОплаты", АдресФормыОплаты);
		
		ДатаРегистрации = ОтветСервера.Получить("created_at");
		ДатаРегистрации = ПрочитатьДатуJSON(ДатаРегистрации, ФорматДатыJSON.ISO);
		ДанныеСчета.Вставить("ДатаРегистрации", ДатаРегистрации);
		
		СрокЖизниСсылки = ОтветСервера.Получить("expires_at");
		Если СрокЖизниСсылки <> Неопределено Тогда
			СрокЖизниСсылки = ПрочитатьДатуJSON(СрокЖизниСсылки, ФорматДатыJSON.ISO);
			ДанныеСчета.Вставить("СрокЖизниСсылки", СрокЖизниСсылки);	
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ВсеОК Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось зарегистрировать %1'"), ДанныеСчета.СчетНаОплату);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ТекстЗапроса = ОнлайнОплата.ПолучитьТекстЗапросаБезПароля(ПараметрыВзаимодействия);
		ТекстОтвета = ОнлайнОплата.ПолучитьТекстОтветаСервера(ОтветСервера);
		Комментарий = НСтр("ru='Текст запроса:'") + Символы.ПС + ТекстЗапроса + Символы.ПС + НСтр("ru='Текст ответа:'")
		+ Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, ,
		, ТекстСообщения + Символы.ПС + Комментарий);
		
	КонецЕсли;
	
	Возврат ВсеОК;
	
КонецФункции // СчетЗарегистрирован()

// Проверить успешность выполнения запроса на регистрацию заявки на расход в платежном шлюзе
// В случае успеха добавить полученные параметры в структуру ДанныеСчета
//
// Параметры:
//  ОтветСервера            - Соответствие - ответ HTTP-сервиса в формате JSON
//  ДанныеСчета             - Структура - реквизиты Счета на оплату
//  ПараметрыВзаимодействия - Структура - см. Справочники.ИнтерфейсыДляВнешнихСистем.ПолучитьПараметрыВзаимодействия
//  РезультатВыполнения     - Структура - см. ОнлайнОплата.ПолучитьСтруктуруРезультатВыполнения
//
// Возвращаемое значение:
//   Булево - ИСТИНА - счет зарегистрирован, ЛОЖЬ - в противном случае
//
Функция ВозвратЗарегистрирован(ОтветСервера, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ВсеОК = Ложь;
	
	АктивнаяСтрокаВозврат = ДанныеСчета.АктивнаяСтрокаВозврат;
	
	ДанныеДляЗаписи = Новый Структура;
	ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
	ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", АктивнаяСтрокаВозврат.ЗаявкаНаРасходДС);
	
	СтатусОперации = ПолучитьСтатусВозврата(ОтветСервера, ДанныеСчета, РезультатВыполнения);
	ДанныеДляЗаписи.Вставить("СтатусОперации", СтатусОперации);
	
	Если СтатусОперации = Перечисления.СтатусыОнлайнОплат.ОжиданиеВозврата
		ИЛИ СтатусОперации = Перечисления.СтатусыОнлайнОплат.ВыполненВозврат Тогда
		
		ВсеОК = Истина;
		
		ИдентификаторОперации = ОтветСервера.Получить("id");
		АктивнаяСтрокаВозврат.ИдентификаторОперации = ИдентификаторОперации;
		ДанныеДляЗаписи.Вставить("ИдентификаторОперации", ИдентификаторОперации);
		
		ДатаРегистрации = ОтветСервера.Получить("created_at");
		ДатаРегистрации = ПрочитатьДатуJSON(ДатаРегистрации, ФорматДатыJSON.ISO);
		АктивнаяСтрокаВозврат.ДатаРегистрации = ДатаРегистрации;
		ДанныеДляЗаписи.Вставить("ДатаРегистрации", ДатаРегистрации);
		АктивнаяСтрокаВозврат.СрокЖизниСсылки = ДатаРегистрации;
		ДанныеДляЗаписи.Вставить("СрокЖизниСсылки", ДатаРегистрации);
		
		Если СтатусОперации = Перечисления.СтатусыОнлайнОплат.ВыполненВозврат Тогда
			
			ОформитьМоментальныйВозврат(ОтветСервера, ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия
			, РезультатВыполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ВсеОК Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось зарегистрировать %1'"), АктивнаяСтрокаВозврат.ЗаявкаНаРасходДС);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ТекстЗапроса = ОнлайнОплата.ПолучитьТекстЗапросаБезПароля(ПараметрыВзаимодействия);
		ТекстОтвета = ОнлайнОплата.ПолучитьТекстОтветаСервера(ОтветСервера);
		Комментарий = НСтр("ru='Текст запроса:'") + Символы.ПС + ТекстЗапроса + Символы.ПС + НСтр("ru='Текст ответа:'")
		+ Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,
		, АктивнаяСтрокаВозврат.ЗаявкаНаРасходДС, ТекстСообщения + Символы.ПС + Комментарий);
		
	КонецЕсли;
	
	Попытка
		
		ОнлайнОплата.ЗаписатьДанныеОбменаРегистр(ДанныеДляЗаписи, РезультатВыполнения);
		
	Исключение
		
		Комментарий = НСтр("ru='Не удалось записать в регистр Платежный шлюз данные:'");
		Для каждого КлючИЗначение Из ДанныеДляЗаписи Цикл
			Комментарий = Комментарий + Символы.ПС + КлючИЗначение.Ключ + " = " + КлючИЗначение.Значение;
		КонецЦикла;
		Комментарий = Комментарий + Символы.ПС + НСтр("ru='Информация об ошибке:'") + Символы.ПС
		+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,
		, АктивнаяСтрокаВозврат.ЗаявкаНаРасходДС, Комментарий);
		
	КонецПопытки;
	
	Возврат ВсеОК;
	
КонецФункции // ВозвратЗарегистрирован()

Функция ПолучитьСтатусОплаты(ОтветСервера, ДанныеСчета, РезультатВыполнения)
	
	СтатусОплаты = Неопределено;
	
	СоответствиеСтатусов = ПолучитьСоответствиеСтатусовОплаты();
	КлючСтатуса = ОтветСервера.Получить("status");
	СтатусОплаты = СоответствиеСтатусов.Получить(КлючСтатуса);
	
	Если СтатусОплаты = Неопределено Тогда
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Не найдено соответствие статусу оплаты ""%1""'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, КлючСтатуса);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,
		, ДанныеСчета.СчетНаОплату, ТекстСообщения);
	КонецЕсли;
	
	Возврат СтатусОплаты;
	
КонецФункции

Функция ПолучитьСоответствиеСтатусовОплаты()
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("waiting_for_capture", Перечисления.СтатусыОнлайнОплат.ОжиданиеОплаты);
	СоответствиеСтатусов.Вставить("succeeded", Перечисления.СтатусыОнлайнОплат.Оплачен);
	СоответствиеСтатусов.Вставить("canceled", Перечисления.СтатусыОнлайнОплат.ОтказОплаты);
	СоответствиеСтатусов.Вставить("pending", Перечисления.СтатусыОнлайнОплат.ОжиданиеОплаты);
	
	Возврат СоответствиеСтатусов;
	
КонецФункции // ПолучитьСоответствиеСтатусовОплаты()

Функция ПолучитьСтатусВозврата(ОтветСервера, ДанныеСчета, РезультатВыполнения)
	
	СтатусВозврата = Неопределено;
	
	СоответствиеСтатусов = ПолучитьСоответствиеСтатусовВозврата();
	КлючСтатуса = ОтветСервера.Получить("status");
	СтатусВозврата = СоответствиеСтатусов.Получить(КлючСтатуса);
	
	Если СтатусВозврата = Неопределено Тогда
		РезультатВыполнения.Успешно = Ложь;
		СтрокаШаблон = НСтр("ru='Не найдено соответствие статусу возврата ""%1""'");
		ТекстСообщения = СтрШаблон(СтрокаШаблон, КлючСтатуса);
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		ЗаписьЖурналаРегистрации(РезультатВыполнения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,
		, ДанныеСчета.СчетНаОплату, ТекстСообщения);
	КонецЕсли;
	
	Возврат СтатусВозврата;
	
КонецФункции

Функция ПолучитьСоответствиеСтатусовВозврата()
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("pending", Перечисления.СтатусыОнлайнОплат.ОжиданиеВозврата);
	СоответствиеСтатусов.Вставить("succeeded", Перечисления.СтатусыОнлайнОплат.ВыполненВозврат);
	СоответствиеСтатусов.Вставить("canceled", Перечисления.СтатусыОнлайнОплат.ОтказВозврата);
	
	Возврат СоответствиеСтатусов;
	
КонецФункции

Функция ПолучитьСтатусУведомления(КлючСтатуса)

	СоответствиеСтатусов = ПолучитьСоответствиеСтатусовУведомлений();
	
	Возврат СоответствиеСтатусов.Получить(КлючСтатуса);

КонецФункции

Функция ПолучитьСоответствиеСтатусовУведомлений()
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("payment.waiting_for_capture", Перечисления.СтатусыОнлайнОплат.ОжиданиеОплаты);
	СоответствиеСтатусов.Вставить("payment.succeeded", Перечисления.СтатусыОнлайнОплат.Оплачен);
	СоответствиеСтатусов.Вставить("payment.canceled", Перечисления.СтатусыОнлайнОплат.ОтказОплаты);
	СоответствиеСтатусов.Вставить("refund.succeeded", Перечисления.СтатусыОнлайнОплат.ВыполненВозврат);
	
	Возврат СоответствиеСтатусов;
	
КонецФункции

Функция ПолучитьПричинуОтменыПлатежа(КлючПричиныОтмены)
	
	СоответствиеПричинОтмены = ПолучитьСоответствиеПричинОтменыПлатежей();
	
	Возврат СоответствиеПричинОтмены.Получить(КлючПричиныОтмены);
	
КонецФункции

Функция ПолучитьСоответствиеПричинОтменыПлатежей()
	
	СоответствиеПричинОтмены = Новый Соответствие;
	СоответствиеПричинОтмены.Вставить("3d_secure_failed", НСтр("ru='Не пройдена аутентификация по 3-D Secure'"));
	СоответствиеПричинОтмены.Вставить("call_issuer", НСтр("ru='Оплата отклонена по неизвестным причинам'"));
	СоответствиеПричинОтмены.Вставить("canceled_by_merchant", НСтр("ru='Платеж отменен продавцом'"));
	СоответствиеПричинОтмены.Вставить("card_expired", НСтр("ru='Истек срок действия банковской карты'"));
	СоответствиеПричинОтмены.Вставить("country_forbidden"
	, НСтр("ru='Нельзя заплатить банковской картой, выпущенной в этой стране'"));
	СоответствиеПричинОтмены.Вставить("deal_expired", НСтр("ru='Закончился срок жизни сделки'"));
	СоответствиеПричинОтмены.Вставить("expired_on_capture"
	, НСтр("ru='Истек срок списания оплаты у двухстадийного платежа'"));
	СоответствиеПричинОтмены.Вставить("expired_on_confirmation", НСтр("ru='Истек срок оплаты'"));
	СоответствиеПричинОтмены.Вставить("fraud_suspected"
	, НСтр("ru='Платеж заблокирован из-за подозрения в мошенничестве'"));
	СоответствиеПричинОтмены.Вставить("general_decline", НСтр("ru='Оплата отклонена по неизвестным причинам'"));
	СоответствиеПричинОтмены.Вставить("identification_required"
	, НСтр("ru='Превышены ограничения на платежи для кошелька ЮMoney'"));
	СоответствиеПричинОтмены.Вставить("insufficient_funds", НСтр("ru='Не хватает денег для оплаты'"));
	СоответствиеПричинОтмены.Вставить("internal_timeout", НСтр("ru='Технические неполадки на стороне ЮKassa'"));
	СоответствиеПричинОтмены.Вставить("invalid_card_number", НСтр("ru='Неправильно указан номер карты'"));
	СоответствиеПричинОтмены.Вставить("invalid_csc", НСтр("ru='Неправильно указан код CVV2 (CVC2, CID)'"));
	СоответствиеПричинОтмены.Вставить("issuer_unavailable"
	, НСтр("ru='Организация, выпустившая платежное средство, недоступна'"));
	СоответствиеПричинОтмены.Вставить("payment_method_limit_exceeded"
	, НСтр("ru='Исчерпан лимит платежей для данного платежного средства или вашего магазина'"));
	СоответствиеПричинОтмены.Вставить("payment_method_restricted"
	, НСтр("ru='Запрещены операции данным платежным средством'"));
	СоответствиеПричинОтмены.Вставить("permission_revoked", НСтр("ru='Пользователь отозвал разрешение на автоплатежи'"));
	СоответствиеПричинОтмены.Вставить("unsupported_mobile_operator"
	, НСтр("ru='Нельзя заплатить с номера телефона этого мобильного оператора'"));
	
	Возврат СоответствиеПричинОтмены;
	
КонецФункции

Функция ПолучитьПричинуОтменыВозвратаПлатежа(КлючПричиныОтмены)
	
	СоответствиеПричинОтмены = ПолучитьСоответствиеПричинОтменыВозвратовПлатежей();
	
	Возврат СоответствиеПричинОтмены.Получить(КлючПричиныОтмены);
	
КонецФункции

Функция ПолучитьСоответствиеПричинОтменыВозвратовПлатежей()
	
	СоответствиеПричинОтмены = Новый Соответствие;
	СоответствиеПричинОтмены.Вставить("insufficient_funds", НСтр("ru='Не хватает денег, чтобы сделать возврат'"));
	СоответствиеПричинОтмены.Вставить("general_decline", НСтр("ru='Причина отказа не детализирована'"));
	СоответствиеПричинОтмены.Вставить("yoo_money_account_closed", НСтр("ru='Пользователь закрыл кошелек ЮMoney'"));
	
	Возврат СоответствиеПричинОтмены;
	
КонецФункции

Функция ПолучитьДанныеДляЗаписиСтатусаОплаты(ДанныеСчета, ОтветСервера, РезультатВыполнения)
	
	ДанныеДляЗаписи = Новый Структура;
	
	СтатусОперации = ПолучитьСтатусОплаты(ОтветСервера, ДанныеСчета, РезультатВыполнения);
	
	Если СтатусОперации = Неопределено Тогда
	
		Возврат ДанныеДляЗаписи;
	
	КонецЕсли;
	
	Если СтатусОперации = ДанныеСчета.СтатусОперации Тогда
	
		Возврат ДанныеДляЗаписи;
	
	КонецЕсли;
	
	ДанныеДляЗаписи.Вставить("СтатусОперации", СтатусОперации);
	
	ДобавитьДанныеОперацииОплаты(ОтветСервера, ДанныеДляЗаписи, РезультатВыполнения);
	
	ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
	ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", Документы.ЗаявкаНаРасходДС.ПустаяСсылка());
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции

Процедура ДобавитьДанныеОперацииОплаты(ОтветСервера, ДанныеДляЗаписи, РезультатВыполнения)
	
	ОбъектСпособОплаты = ОтветСервера.Получить("payment_method");
	Если ОбъектСпособОплаты <> Неопределено Тогда
		СпособОплаты = ОбъектСпособОплаты.Получить("type");
		ДанныеДляЗаписи.Вставить("СпособОплаты", СпособОплаты);
	КонецЕсли;
	
	ДатаОперации = ОтветСервера.Получить("captured_at");
	Если ДатаОперации <> Неопределено Тогда
		ДатаОперации = ПрочитатьДатуJSON(ДатаОперации, ФорматДатыJSON.ISO);
		ДанныеДляЗаписи.Вставить("ДатаОперации", ДатаОперации);
		ОбъектСуммаОперации = ОтветСервера.Получить("amount");
		СуммаОперации = ОбъектСуммаОперации.Получить("value");
		ТипЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
		СуммаОперации = ТипЧисло.ПривестиЗначение(СуммаОперации);
		ДанныеДляЗаписи.Вставить("СуммаОперации", СуммаОперации);
	КонецЕсли;
	
	Если ДанныеДляЗаписи.СтатусОперации = Перечисления.СтатусыОнлайнОплат.Оплачен Тогда
		ИдентификаторОперации = ОтветСервера.Получить("id");
		ДанныеДляЗаписи.Вставить("ИдентификаторОперации", ИдентификаторОперации);
	КонецЕсли;
	
	ОбъектАвторизация = ОтветСервера.Получить("authorization_details");
	Если ОбъектАвторизация <> Неопределено Тогда
		
		ИдентификаторОперацииЭмитента = ОбъектАвторизация.Получить("rrn");
		Если ИдентификаторОперацииЭмитента <> Неопределено Тогда
			ДанныеДляЗаписи.Вставить("ИдентификаторОперацииЭмитента", ИдентификаторОперацииЭмитента);
		КонецЕсли;
		
		КодАвторизации = ОбъектАвторизация.Получить("auth_code");
		Если КодАвторизации <> Неопределено Тогда
			ДанныеДляЗаписи.Вставить("КодАвторизации", КодАвторизации);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектОтказ = ОтветСервера.Получить("cancellation_details");
	Если ОбъектОтказ <> Неопределено Тогда
		КлючПричиныОтказа = ОбъектОтказ.Получить("reason");
		Комментарий = ПолучитьПричинуОтменыПлатежа(КлючПричиныОтказа);
		Если Комментарий <> Неопределено Тогда
			ДанныеДляЗаписи.Вставить("Комментарий", Комментарий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДляЗаписиСтатусаВозврата(ДанныеСчета, ОтветСервера, ПараметрыВзаимодействия, РезультатВыполнения)
	
	АктивнаяСтрокаВозврат = ДанныеСчета.АктивнаяСтрокаВозврат;
	
	ДанныеДляЗаписи = Новый Структура;
	
	СтатусОперации = ПолучитьСтатусВозврата(ОтветСервера, ДанныеСчета, РезультатВыполнения);
	
	Если СтатусОперации = Неопределено Тогда
	
		Возврат ДанныеДляЗаписи;
	
	КонецЕсли;
	
	Если СтатусОперации = АктивнаяСтрокаВозврат.СтатусОперации Тогда
	
		Возврат ДанныеДляЗаписи;
	
	КонецЕсли;
	
	ДанныеДляЗаписи.Вставить("СтатусОперации", СтатусОперации);
	
	ДанныеДляЗаписи.Вставить("СчетНаОплату", ДанныеСчета.СчетНаОплату);
	ДанныеДляЗаписи.Вставить("ЗаявкаНаРасходДС", АктивнаяСтрокаВозврат.ЗаявкаНаРасходДС);
	
	Если СтатусОперации = Перечисления.СтатусыОнлайнОплат.ВыполненВозврат Тогда
		
		ДанныеДляЗаписи.Вставить("ДатаОперации", ТекущаяДатаСеанса());
		
	Иначе
		
		ДанныеДляЗаписи.Вставить("ДатаУведомления", ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	ДобавитьДанныеОперацииВозврата(ОтветСервера, ДанныеДляЗаписи, ПараметрыВзаимодействия, РезультатВыполнения);
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции

Процедура ДобавитьДанныеОперацииВозврата(ОтветСервера, ДанныеДляЗаписи, ПараметрыВзаимодействия, РезультатВыполнения)
	
	ОбъектСуммаВозврата = ОтветСервера.Получить("amount");
	Если ОбъектСуммаВозврата <> Неопределено Тогда
		СуммаОперации = ОбъектСуммаВозврата.Получить("value");
		ТипЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
		СуммаОперации = ТипЧисло.ПривестиЗначение(СуммаОперации);
		ДанныеДляЗаписи.Вставить("СуммаОперации", СуммаОперации);
	КонецЕсли;
	
	ОбъектОтказ = ОтветСервера.Получить("cancellation_details");
	Если ОбъектОтказ <> Неопределено Тогда
		КлючПричиныОтказа = ОбъектОтказ.Получить("reason");
		Комментарий = ПолучитьПричинуОтменыВозвратаПлатежа(КлючПричиныОтказа);
		Если Комментарий <> Неопределено Тогда
			ДанныеДляЗаписи.Вставить("Комментарий", Комментарий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьМоментальныйВозврат(ОтветСервера, ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия
	, РезультатВыполнения)

	ДобавитьДанныеОперацииВозврата(ОтветСервера, ДанныеДляЗаписи, ПараметрыВзаимодействия, РезультатВыполнения);
	
	ОнлайнОплата.СоздатьЧекНаВозврат(ДанныеДляЗаписи, ДанныеСчета, ПараметрыВзаимодействия, РезультатВыполнения);
	
КонецПроцедуры

Процедура РазобратьОтветСервераНаПолучениеОтчетаПоОплатам(ОтветСервера, ТаблицаОтчета, ПараметрыВзаимодействия
	, РезультатВыполнения)
	
	КвалификаторТипаСумма = Новый КвалификаторыЧисла(15, 2);
	ТипСумма = Новый ОписаниеТипов("Число", , , КвалификаторТипаСумма);
	
	ТипОтвета = ОтветСервера.Получить("type");
	
	Если ТипОтвета = Неопределено Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Запрос на построение отчета по операциям: в ответе сервера нет поля type'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	Иначе	
		Если ЗначениеЗаполнено(ТипОтвета) Тогда
			
			Если ТипОтвета = "list" Тогда
				
				Оплаты = ОтветСервера.Получить("items");
				Для каждого Оплата Из Оплаты Цикл
					
					НоваяСтрока = ТаблицаОтчета.Добавить();
					НоваяСтрока.ТипОперации = "Оплата";
					НоваяСтрока.ДатаОперации = ПрочитатьДатуJSON(Оплата.Получить("captured_at"), ФорматДатыJSON.ISO);
					
					ДанныеОплаты = Оплата.Получить("amount");
					СтрокаСумма = ДанныеОплаты.Получить("value");
					НоваяСтрока.СуммаОплаты = ТипСумма.ПривестиЗначение(СтрокаСумма);
					
					ДанныеСуммаБезКомиссии = Оплата.Получить("income_amount");
					Если ДанныеСуммаБезКомиссии <> Неопределено Тогда
						СтрокаСуммаБезКомиссии = ДанныеСуммаБезКомиссии.Получить("value");
						НоваяСтрока.СуммаКомиссии = НоваяСтрока.СуммаОплаты - ТипСумма.ПривестиЗначение(СтрокаСуммаБезКомиссии);
					КонецЕсли;
					
					НоваяСтрока.ИдентификаторОперации = Оплата.Получить("id");
					НоваяСтрока.ИдентификаторОперацииОплаты = НоваяСтрока.ИдентификаторОперации;
					
				КонецЦикла;
				
				Курсор = ОтветСервера.Получить("next_cursor");
				Если Курсор = Неопределено Тогда
					
					Если ПараметрыВзаимодействия.Свойство("Курсор") Тогда
						ПараметрыВзаимодействия.Удалить(Курсор);
					КонецЕсли;	
					
				Иначе
					
					ПараметрыВзаимодействия.Вставить("Курсор", Курсор);
					
				КонецЕсли;
				
			Иначе
				
				РезультатВыполнения.Успешно = Ложь;
				ТекстСообщения = НСтр("ru='Запрос на построение отчета по операциям: в ответе сервера type - не ""list""'");
				РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			РезультатВыполнения.Успешно = Ложь;
			ТекстСообщения = НСтр("ru='Запрос на построение отчета по операциям: в ответе сервера не заполнено поле type'");
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьОтветСервераНаПолучениеОтчетаПоВозвратам(ОтветСервера, ТаблицаОтчета, ПараметрыВзаимодействия
	, РезультатВыполнения)
	
	КвалификаторТипаСумма = Новый КвалификаторыЧисла(15, 2);
	ТипСумма = Новый ОписаниеТипов("Число", , , КвалификаторТипаСумма);
	
	ТипОтвета = ОтветСервера.Получить("type");
	
	Если ТипОтвета = Неопределено Тогда
		
		РезультатВыполнения.Успешно = Ложь;
		ТекстСообщения = НСтр("ru='Запрос на построение отчета по операциям (возвраты): в ответе сервера нет поля type'");
		РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
		
		Возврат;
		
	Иначе	
		Если ЗначениеЗаполнено(ТипОтвета) Тогда
			
			Если ТипОтвета = "list" Тогда
				
				ВозвратыОплат = ОтветСервера.Получить("items");
				Для каждого ВозвратОплаты Из ВозвратыОплат Цикл
					
					НоваяСтрока = ТаблицаОтчета.Добавить();
					НоваяСтрока.ТипОперации = "Возврат";
					НоваяСтрока.ДатаОперации = ПрочитатьДатуJSON(ВозвратОплаты.Получить("created_at"), ФорматДатыJSON.ISO);
					ДанныеОплаты = ВозвратОплаты.Получить("amount");
					СтрокаСумма = ДанныеОплаты.Получить("value");
					НоваяСтрока.СуммаВозврата = ТипСумма.ПривестиЗначение(СтрокаСумма);
					НоваяСтрока.ИдентификаторОперации = ВозвратОплаты.Получить("id");
					НоваяСтрока.ИдентификаторОперацииОплаты = ВозвратОплаты.Получить("payment_id");
					
				КонецЦикла;
				
				Курсор = ОтветСервера.Получить("next_cursor");
				Если Курсор = Неопределено Тогда
					
					Если ПараметрыВзаимодействия.Свойство("Курсор") Тогда
						ПараметрыВзаимодействия.Удалить(Курсор);
					КонецЕсли;	
					
				Иначе
					
					ПараметрыВзаимодействия.Вставить("Курсор", Курсор);
					
				КонецЕсли;
				
			Иначе
				
				РезультатВыполнения.Успешно = Ложь;
				ТекстСообщения
				= НСтр("ru='Запрос на построение отчета по операциям (возвраты): в ответе сервера type - не ""list""'");
				РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			РезультатВыполнения.Успешно = Ложь;
			ТекстСообщения
			= НСтр("ru='Запрос на построение отчета по операциям (возвраты): в ответе сервера не заполнено поле type'");
			РезультатВыполнения.ТекстыСообщений.Добавить(ТекстСообщения);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти