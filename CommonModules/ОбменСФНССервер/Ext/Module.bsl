
#Область ПрограммныйИнтерфейс

// Процедура - Выполнить запрос проверки РНПТ
//
// Параметры:
//  ПараметрыКоманды - Структура - Параметры для проверки РНПТ:
//    * РНПТ - СправочникСсылка.ГТД - РНПТ для проверки ФНС;
//    * Организация - СправочникСсылка.Организации - Организация для определения настроек подключения к ФНС.
//  АдресРезультата	 - УникальныйИдентификатор  - идентификатор фонового задания
//
Процедура ВыполнитьЗапросПроверкиРНПТ(ПараметрыКоманды, АдресРезультата) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("РезультатПроверки", Новый Структура("КодСтатуса,Представление,ДатаПроверки"));
	Результат.Вставить("Токен", "");
	Результат.Вставить("ДатаДействия");
	Результат.Вставить("ИдентификаторСообщения", "");
	
	// Получим параметры проверки
	Организация = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "Организация");
	РНПТ = ПолучитьЗначениеПараметраСтруктуры(ПараметрыКоманды, "РНПТ");
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не указана организация, на основании которой производить проверку.'");
		Отказ = Истина;
	Иначе
		ПараметрыПодключения = ДанныеПодлюченияКСервису(Организация);
		Если ПараметрыПодключения = Неопределено Тогда
			Результат.ТекстОшибки = НСтр("ru = 'Не указаны настройки подключения к сервису ФНС.'");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РНПТ) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не указан РНПТ для проверки.'");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		// Помещаем результат во временное хранилище
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Дополним параметры подключения данными токена
	ПолучитьТокенЗапросаФНС(Организация, ПараметрыПодключения, Результат);
	
	Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ОтправкаПолучениеПроверкиРНПТ(РНПТ, ПараметрыПодключения, Результат);
	
	// Помещаем результат во временное хранилище
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключениеКСервису

Функция ДанныеПодлюченияКСервису(Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыПодключенияКСервисуФНС.МастерТокен КАК МастерТокен,
	               |	ПараметрыПодключенияКСервисуФНС.ТестовыйКонтур КАК ТестовыйКонтур,
	               |	ПараметрыПодключенияКСервисуФНС.ВремяОжиданияЗапроса КАК ВремяОжидания
	               |ИЗ
	               |	РегистрСведений.ПараметрыПодключенияКСервисуФНС КАК ПараметрыПодключенияКСервисуФНС
	               |ГДЕ
	               |	ПараметрыПодключенияКСервисуФНС.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подключение = Новый Структура("МастерТокен,ВремяОжидания");
	ЗаполнитьЗначенияСвойств(Подключение, Выборка);
	
	Если Выборка.ТестовыйКонтур Тогда
		ПараметрыСервера = ТестовыйКонтур();
	Иначе
		ПараметрыСервера = ПромышленныйКонтур();
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Подключение, ПараметрыСервера);
	
	Возврат Подключение;
	
КонецФункции

Функция ТестовыйКонтур()
	
	Возврат Новый Структура("АдресСервера,Порт", "koe-open-api.nalog.ru", 443);
	
КонецФункции

Функция ПромышленныйКонтур()
	
	Возврат Новый Структура("АдресСервера,Порт", "openapi.nalog.ru", 8090);
	
КонецФункции

Процедура ПолучитьТокенЗапросаФНС(Организация, ПараметрыПодключения, ПараметрыОтвета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТокеныЗапросовФНС.Токен КАК Токен,
	               |	ТокеныЗапросовФНС.ДатаДействия КАК ДатаДействия
	               |ИЗ
	               |	РегистрСведений.ТокеныЗапросовФНС КАК ТокеныЗапросовФНС
	               |ГДЕ
	               |	ТокеныЗапросовФНС.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазностьВремени = 360;
	Если Выборка.Следующий() И Выборка.ДатаДействия > УниверсальноеВремя(ТекущаяДатаСеанса() + РазностьВремени) Тогда
		ПараметрыОтвета.Токен = Выборка.Токен;
		Возврат;
	КонецЕсли;
	
	// Получение нового токена
	ОтправитьЗапросАвторизации(ПараметрыПодключения, ПараметрыОтвета);
	
	// Проверим ключ и запишем его в базу
	Если ЗначениеЗаполнено(ПараметрыОтвета.Токен) Тогда
		
		НоваяЗапись = РегистрыСведений.ТокеныЗапросовФНС.СоздатьМенеджерЗаписи();
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.Токен = ПараметрыОтвета.Токен;
		НоваяЗапись.ДатаДействия = ПараметрыОтвета.ДатаДействия;
		НоваяЗапись.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеЗапросов

Процедура ОтправкаПолучениеПроверкиРНПТ(РНПТ, ПараметрыПодключения, Результат)
	
	// Отправим сообщение на проверка РНПТ
	ОтправитьЗапросПроверкиРНПТ(
		ПараметрыПодключения.АдресСервера,
		ПараметрыПодключения.Порт,
		ПараметрыПодключения.ВремяОжидания,
		ПараметрыПодключения.МастерТокен,
		РНПТ,
		Результат);
	
	Если ПустаяСтрока(Результат.ИдентификаторСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение результата по полученному идентификатору
	ПолучитьРезультатПроверкиРНПТ(
		ПараметрыПодключения.АдресСервера,
		ПараметрыПодключения.Порт,
		ПараметрыПодключения.ВремяОжидания,
		ПараметрыПодключения.МастерТокен,
		Результат);
	
	// Запишем результат в регистр
	ЗафиксироватьПроверкуРНПТ(
		РНПТ,
		Результат.РезультатПроверки.КодСтатуса,
		Результат.РезультатПроверки.Представление,
		Результат.РезультатПроверки.ДатаПроверки);
	
КонецПроцедуры

Процедура ОтправитьЗапросАвторизации(ПараметрыПодключения, Результат)
	
	АдресСервиса = "/open-api/AuthService/0.1";
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept-Encoding", "gzip,deflate");
	ЗаголовокHTTP.Вставить("Content-Type", "text/xml;charset=UTF-8");
	ЗаголовокHTTP.Вставить("SOAPAction", "urn:GetMessageRequest");
	ЗаголовокHTTP.Вставить("Connection", "Keep-Alive");
	ЗаголовокHTTP.Вставить("User-Agent", "Apache-HttpClient/4.1.1 (java 1.5)");
	
	ТекстЗапроса = ТекстЗапросаАвторизации(ПараметрыПодключения.МастерТокен);
	
	РезультатОтвета = ОтправитьЗапрос(
		ПараметрыПодключения.АдресСервера,
		ПараметрыПодключения.Порт,
		ПараметрыПодключения.ВремяОжидания,
		АдресСервиса,
		ЗаголовокHTTP,
		ТекстЗапроса);
	
	Если НЕ ПустаяСтрока(РезультатОтвета.ТекстОшибки) Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатОтвета);
		Возврат;
	КонецЕсли;
	
	ОтветXML = Новый ЧтениеXML;
	ОтветXML.УстановитьСтроку(РезультатОтвета.Ответ.ПолучитьТелоКакСтроку());
	ДанныеОтвета = ФабрикаXDTO.ПрочитатьXML(ОтветXML);
	
	Если ДанныеОтвета.Свойства().Получить("Body") <> Неопределено Тогда
		// Запишем новый ключ
		Если ДанныеОтвета.Body.Свойства().Получить("GetMessageResponse") <> Неопределено Тогда
			Если ДанныеОтвета.Body.GetMessageResponse.Message.AuthResponse.Свойства().Получить("Fault") <> Неопределено Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка выполнения команды авторизации в ФНС'"),
				УровеньЖурналаРегистрации.Ошибка, , ,
				СтрШаблон(НСтр("ru = 'Ошибка при авторизации на сервисе: %1'"),
					ДанныеОтвета.Body.GetMessageResponse.Message.AuthResponse.Fault.Message));
				Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды сервиса. См. журнал регистрации.'");
			ИначеЕсли ДанныеОтвета.Body.GetMessageResponse.Message.AuthResponse.Свойства().Получить("Result") <> Неопределено Тогда
				Результат.Токен = ДанныеОтвета.Body.GetMessageResponse.Message.AuthResponse.Result.Token;
				ДатаДействия = ДанныеОтвета.Body.GetMessageResponse.Message.AuthResponse.Result.ExpireTime;
				Результат.ДатаДействия = 
					XmlЗначение(Тип("Дата"), ДатаДействия);
				// Смещение даты проверим
				ЕстьСмещение = СтрДлина(ДатаДействия) > 24 И (Сред(ДатаДействия, 24, 1) = "+" ИЛИ Сред(ДатаДействия, 24, 1) = "-");
				Если ЕстьСмещение Тогда
					СмещениеМинут = Число(Прав(ДатаДействия, 2)) * 60;
					СмещениеЧас = Число(Сред(ДатаДействия, 25, 2)) * 3600;
					ДельтаЧас = ?(Сред(ДатаДействия, 24, 1) = "+", -1, 1);
					Результат.ДатаДействия = Результат.ДатаДействия + ДельтаЧас * (СмещениеЧас + СмещениеМинут);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ДанныеОтвета.Body.Свойства().Получить("Fault") <> Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка выполнения команды авторизации в ФНС'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			СтрШаблон(НСтр("ru = 'Ошибка при авторизации на сервисе: %1'"), ДанныеОтвета.Body.Fault.faultstring));
			Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды сервиса. См. журнал регистрации.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Ошибка выполнения команды авторизации в ФНС'"),
		УровеньЖурналаРегистрации.Ошибка, , ,
		НСтр("ru = 'Ошибка при выполнении авторизации на сервисе.'"));
	Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды сервиса. См. журнал регистрации.'");
	
КонецПроцедуры

Процедура ОтправитьЗапросПроверкиРНПТ(АдресСервера, Порт, ВремяОжидания, МастерТокен, РНПТ, Результат)
	
	АдресСервиса = "/open-api/ais3/TraceabilityService/0.1";
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept-Encoding", "gzip,deflate");
	ЗаголовокHTTP.Вставить("Content-Type", "text/xml;charset=UTF-8");
	ЗаголовокHTTP.Вставить("SOAPAction", "urn:SendMessageRequest");
	ЗаголовокHTTP.Вставить("Connection", "Keep-Alive");
	ЗаголовокHTTP.Вставить("User-Agent", "Apache-HttpClient/4.1.1 (java 1.5)");
	ЗаголовокHTTP.Вставить("FNS-OpenApi-UserToken", МастерТокен);
	ЗаголовокHTTP.Вставить("FNS-OpenApi-Token", Результат.Токен);
	
	ТекстЗапроса = ТекстЗапросаПроверкиРНПТ(РНПТ.Наименование);
	
	РезультатОтвета = ОтправитьЗапрос(АдресСервера, Порт, ВремяОжидания, АдресСервиса, ЗаголовокHTTP, ТекстЗапроса);
	
	Если НЕ ПустаяСтрока(РезультатОтвета.ТекстОшибки) Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатОтвета);
		Возврат;
	КонецЕсли;
	
	// Запись результата
	ОтветXML = Новый ЧтениеXML;
	ОтветXML.УстановитьСтроку(РезультатОтвета.Ответ.ПолучитьТелоКакСтроку());
	ДанныеОтвета = ФабрикаXDTO.ПрочитатьXML(ОтветXML);
	
	Если ДанныеОтвета.Свойства().Получить("Body") <> Неопределено Тогда
		// Запишем новый ключ
		Если ДанныеОтвета.Body.Свойства().Получить("SendMessageResponse") <> Неопределено Тогда
			Если ДанныеОтвета.Body.SendMessageResponse.Свойства().Получить("Fault") <> Неопределено Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка выполнения команды проверки РНПТ в ФНС'"),
				УровеньЖурналаРегистрации.Ошибка, , ,
				СтрШаблон(НСтр("ru = 'Ошибка при проверке РНПТ в ФНС на сервисе: %1'"),
					ДанныеОтвета.Body.SendMessageResponse.Fault.Message));
				Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды сервиса. См. журнал регистрации.'");
			ИначеЕсли ДанныеОтвета.Body.SendMessageResponse.Свойства().Получить("MessageId") <> Неопределено Тогда
				Результат.ИдентификаторСообщения = ДанныеОтвета.Body.SendMessageResponse.MessageId;
			КонецЕсли;
		ИначеЕсли ДанныеОтвета.Body.Свойства().Получить("Fault") <> Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка выполнения команды проверки РНПТ в ФНС'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			СтрШаблон(НСтр("ru = 'Ошибка при проверке РНПТ в ФНС на сервисе: %1'"), ДанныеОтвета.Body.Fault.faultstring));
			Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды сервиса. См. журнал регистрации.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Ошибка выполнения команды проверки РНПТ в ФНС'"),
		УровеньЖурналаРегистрации.Ошибка, , ,
		НСтр("ru = 'Ошибка при выполнении проверки РНПТ в ФНС.'"));
	Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды сервиса. См. журнал регистрации.'");
	
КонецПроцедуры

Процедура ПолучитьРезультатПроверкиРНПТ(АдресСервера, Порт, ВремяОжидания, МастерТокен, Результат)
	
	АдресСервиса = "/open-api/ais3/TraceabilityService/0.1";
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept-Encoding", "gzip,deflate");
	ЗаголовокHTTP.Вставить("Content-Type", "text/xml;charset=UTF-8");
	ЗаголовокHTTP.Вставить("SOAPAction", "urn:GetMessageRequest");
	ЗаголовокHTTP.Вставить("Connection", "Keep-Alive");
	ЗаголовокHTTP.Вставить("User-Agent", "Apache-HttpClient/4.1.1 (java 1.5)");
	ЗаголовокHTTP.Вставить("FNS-OpenApi-UserToken", МастерТокен);
	ЗаголовокHTTP.Вставить("FNS-OpenApi-Token", Результат.Токен);
	
	ТекстЗапроса = ТекстЗапросаПолученияРезультатаПроверкиРНПТ(Результат.ИдентификаторСообщения);
	
	РезультатОтвета = ОтправитьЗапрос(АдресСервера, Порт, ВремяОжидания, АдресСервиса, ЗаголовокHTTP, ТекстЗапроса);
	
	// Запись результата
	ОтветXML = Новый ЧтениеXML;
	ОтветXML.УстановитьСтроку(РезультатОтвета.Ответ.ПолучитьТелоКакСтроку());
	ДанныеОтвета = ФабрикаXDTO.ПрочитатьXML(ОтветXML);
	
	Если ДанныеОтвета.Свойства().Получить("Body") <> Неопределено Тогда
		// Запишем результат проверки
		Если ДанныеОтвета.Body.Свойства().Получить("GetMessageResponse") <> Неопределено Тогда
			Если ДанныеОтвета.Body.GetMessageResponse.Свойства().Получить("Fault") <> Неопределено Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка выполнения команды проверки РНПТ в ФНС'"),
				УровеньЖурналаРегистрации.Ошибка, , ,
				СтрШаблон(НСтр("ru = 'Ошибка при получении результата проверки РНПТ в ФНС на сервисе: %1'"),
					ДанныеОтвета.Body.GetMessageResponse.Fault.Message));
				Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды сервиса. См. журнал регистрации.'");
			ИначеЕсли ДанныеОтвета.Body.GetMessageResponse.Свойства().Получить("ProcessingStatus") <> Неопределено Тогда
				Если ДанныеОтвета.Body.GetMessageResponse.ProcessingStatus = "PROCESSING" Тогда
					// Повторим получение
					ПолучитьРезультатПроверкиРНПТ(АдресСервера, Порт, ВремяОжидания, МастерТокен, Результат);
				ИначеЕсли ДанныеОтвета.Body.GetMessageResponse.ProcessingStatus = "COMPLETED" Тогда
					СформироватьРезультатПроверкиРНПТ(ДанныеОтвета.Body.GetMessageResponse.Message, Результат);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ДанныеОтвета.Body.Свойства().Получить("Fault") <> Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка выполнения команды проверки РНПТ в ФНС'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			СтрШаблон(НСтр("ru = 'Ошибка при получении результата проверки РНПТ в ФНС на сервисе: %1'"),
				ДанныеОтвета.Body.Fault.faultstring));
			Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды сервиса. См. журнал регистрации.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Ошибка выполнения команды проверки РНПТ в ФНС'"),
		УровеньЖурналаРегистрации.Ошибка, , ,
		НСтр("ru = 'Ошибка при выполнении проверки РНПТ в ФНС.'"));
	Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды сервиса. См. журнал регистрации.'");
	
	
КонецПроцедуры

Функция ОтправитьЗапрос(АдресСервераAPI, Порт, ВремяОжидания, АдресСервиса, ЗаголовокHTTP, ТекстЗапроса)
	
	РезультатОтвета = Новый Структура("Ответ,ТекстОшибки", Неопределено, "");
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	
	// Формирование запроса
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTPS");
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресСервиса, ЗаголовокHTTP); 
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	
	Попытка
		
		Соединение = Новый HTTPСоединение(АдресСервераAPI, Порт,,,, ВремяОжидания, SSL);
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка выполнения команды сервиса обмена с ФНС'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			СтрШаблон(НСтр("ru = 'Ошибка получении данных при обращении к %1'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), АдресСервиса));
		РезультатОтвета.ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды сервиса. См. журнал регистрации.'");
		Возврат РезультатОтвета;
		
	КонецПопытки;
	
	РезультатОтвета.Ответ = HTTPОтвет;
	Возврат РезультатОтвета;
	
КонецФункции

Процедура СформироватьРезультатПроверкиРНПТ(Сообщение, Результат)
	
	// Нет соответствующего блока
	Если Сообщение.Свойства().Получить("CheckTRCRNPT_Response") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = Сообщение.CheckTRCRNPT_Response;
	Результат.РезультатПроверки.ДатаПроверки = ТекущаяДатаСеанса();
	
	// Определимся с результатом
	Если РезультатПроверки.STATUS_CODE = "1" Тогда
		// Ошибка
		Результат.РезультатПроверки.КодСтатуса = 1;
		Результат.РезультатПроверки.Представление = СтрШаблон(
			НСтр("ru ='Код ошибки %1. %2.'"),
			РезультатПроверки.FAULT.ERR_CODE,
			РезультатПроверки.FAULT.ERR_NAME);
	ИначеЕсли РезультатПроверки.STATUS_CODE = "2" Тогда
		// Получили данные о РНПТ
		Результат.РезультатПроверки.КодСтатуса = 2;
		ИнформацияОРНПТ = РезультатПроверки.RESULT;
		ПредставлениеПроверки = Новый Массив;
		ПредставлениеПроверки.Добавить(СтрШаблон(НСтр("ru = 'Код ТН ВЭД: %1'"), ИнформацияОРНПТ.CODE_TNVED));
		ПредставлениеПроверки.Добавить(СтрШаблон(НСтр("ru = 'Товар: %1'"), ИнформацияОРНПТ.NAME_GOODS));
		ПредставлениеПроверки.Добавить(СтрШаблон(
			НСтр("ru = 'Страна: [%1] %2'"),
			ИнформацияОРНПТ.CODE_CO_PROD,
			ИнформацияОРНПТ.NAME_CO_PROD));
		ПредставлениеПроверки.Добавить(СтрШаблон(
			НСтр("ru = 'Дата выпуска/регистрации товара: %1'"),
			Формат(XmlЗначение(Тип("Дата"), ИнформацияОРНПТ.DATE_PROD), "ДЛФ=D")));
		ПредставлениеПроверки.Добавить(СтрШаблон(
			НСтр("ru = 'Ед. изм.: [%1] %2'"),
			ИнформацияОРНПТ.UNIT_CODE,
			ИнформацияОРНПТ.NAME_UNIT_CODE));
		ПредставлениеПроверки.Добавить(СтрШаблон(
			НСтр("ru = 'Количество ввезенного товара: %1'"),
			ИнформацияОРНПТ.QUANT_INPUT_GOODS));
		ПредставлениеПроверки.Добавить(СтрШаблон(
			НСтр("ru = 'Количество выбывшего товара: %1'"),
			ИнформацияОРНПТ.QUANT_OUTPUT_GOODS));
		ПредставлениеПроверки.Добавить(СтрШаблон(
			НСтр("ru = 'Количество товара в обороте: %1'"),
			ИнформацияОРНПТ.QUANT_CIRCUL_GOODS));
		ПредставлениеПроверки.Добавить(СтрШаблон(
			НСтр("ru = 'Дата обновления: %1'"),
			Формат(XmlЗначение(Тип("Дата"), ИнформацияОРНПТ.DATE_UPDATED), "ДЛФ=D")));
		Результат.РезультатПроверки.Представление = СтрСоединить(ПредставлениеПроверки, " / ");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаАвторизации(МастерТокен)
	
	ШаблонСообщения = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"">
					|<soapenv:Header/>
					|<soapenv:Body>
					|	<ns0:GetMessageRequest xmlns:ns0=""urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/types/1.0"">
					|		<ns0:Message>
					|			<ns1:AuthRequest xmlns:ns1=""urn://x-artefacts-gnivc-ru/ais3/kkt/AuthService/types/1.0"">
					|				<ns1:AuthAppInfo>
					|					<ns1:MasterToken>%1</ns1:MasterToken>
					|				</ns1:AuthAppInfo>
					|			</ns1:AuthRequest>
					|		</ns0:Message>
					|	</ns0:GetMessageRequest>
					|</soapenv:Body>
					|</soapenv:Envelope>";
	
	Возврат СтрШаблон(ШаблонСообщения, СокрЛП(МастерТокен));
	
КонецФункции

Функция ТекстЗапросаПроверкиРНПТ(РНПТ)
	
	ШаблонСообщения = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
					|xmlns:ns=""urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0"">
					|<soapenv:Header/>
					|<soapenv:Body>
					|	<ns:SendMessageRequest>
					|		<ns:Message>
					|			<CheckTRCRNPT_Request xmlns=""urn://x-artefacts-gnivcru/ais3/TRC/ServicesTraceability/types/1.0"">
					|				<RNPT>%1</RNPT>
					|			</CheckTRCRNPT_Request>
					|		</ns:Message>
					|	</ns:SendMessageRequest>
					|</soapenv:Body>
					|</soapenv:Envelope>";
	
	Возврат СтрШаблон(ШаблонСообщения, СокрЛП(РНПТ));
	
КонецФункции

Функция ТекстЗапросаПолученияРезультатаПроверкиРНПТ(ИдентификаторСообщения)
	
	ШаблонСообщения = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ns=""urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0"">
					|   <soapenv:Header/>
					|   <soapenv:Body>
					|      <ns:GetMessageRequest>
					|         <ns:MessageId>%1</ns:MessageId>
					|      </ns:GetMessageRequest>
					|   </soapenv:Body>
					|</soapenv:Envelope>";
	
	Возврат СтрШаблон(ШаблонСообщения, СокрЛП(ИдентификаторСообщения));
	
КонецФункции

#КонецОбласти

#Область РезультатПроверки

Процедура ЗафиксироватьПроверкуРНПТ(РНПТ, СтатусПроверки, Представление, ДатаПроверки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.РезультатыПроверкиРНПТ.СоздатьМенеджерЗаписи();
	НоваяЗапись.РНПТ = РНПТ;
	НоваяЗапись.КодСтатуса = СтатусПроверки;
	НоваяЗапись.Представление = Представление;
	НоваяЗапись.ДатаПроверки = ДатаПроверки;
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
