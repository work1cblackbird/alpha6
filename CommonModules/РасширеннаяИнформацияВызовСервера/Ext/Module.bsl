// Общий модуль "Расширенная информация (сервер)"

#Область ПрограммныйИнтерфейс

// Устарела. Будет удалена в дальнейшем.
// Общий обработчик события возникающего при активизации строки списка.
//
// Параметры:
//  Форма         - УправляемаяФорма - Форма, в которой возникло событие.
//  ТекущаяСтрока - Произвольный     - Элемент списка, при активизации которого возникло событие.
//
Процедура СписокПриАктивизацииСтроки(Форма, ТекущаяСтрока) Экспорт
	
	// Проверим на использование подсистемы в форме объекта
	Если Форма.Элементы.Найти("РасширеннаяИнформация") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Производим подключение обработчика обновления содержимого поля расширенной информации.
	Если Форма.Элементы.РасширеннаяИнформация.Видимость Тогда
		
		// Произведем формирование нового расширенного описания для текущей выделенной строки.
		ДокументHTML = СформироватьРасширеннуюИнформациюОбОбъекте(ТекущаяСтрока);
		
		// Проверим целесообразность производить изменение данных поля
		Если НЕ Форма.РасширеннаяИнформация = ДокументHTML Тогда
			Форма.РасширеннаяИнформация = ДокументHTML;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СписокПриАктивизацииСтроки()

// Общий обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  ОписаниеЭлементов - Структура - с полями:
//  * Поле - ПолеФормы - поле для отображения расширенной информации об объекте
//  * КомандаПереключатель - КнопкаКоманднойПанели - элемент отвечающий за переключение режима видимости поля
//
Процедура ПриСозданииНаСервере(ОписаниеЭлементов) Экспорт
	
	// По умолчанию поле расширенной информации должно быть скрыто
	ОписаниеЭлементов.Поле.Видимость = Ложь;
	ОписаниеЭлементов.КомандаПереключатель.Пометка = Ложь;
	
КонецПроцедуры

// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраняемых реквизитов и настроек формы.
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Форма, Настройки) Экспорт
	
	// Проверим на использование подсистемы в форме объекта
	Если Форма.Элементы.Найти("РасширеннаяИнформация")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Производим сохранение параметров отображения поля расширенной информации
	Настройки.Вставить("РасширеннаяИнформацияВидимость", Форма.Элементы.РасширеннаяИнформация.Видимость);
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Общий обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраненных реквизитов и настроек формы.
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	// Проверим на использование подсистемы в форме объекта
	Если Форма.Элементы.Найти("РасширеннаяИнформация") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Восстанавливаем параметры отображения поля расширенной информации
	Если НЕ Настройки.Получить("РасширеннаяИнформацияВидимость") = Неопределено Тогда
		
		// Получим значение сохраненной настройки
		ПоказатьРасширеннуюИнформацию = (НЕ Настройки.Получить("РасширеннаяИнформацияВидимость") = Ложь);
		
		// Произведем настройку параметров отображения полей расширенной информации
		Форма.Элементы.РасширеннаяИнформация        .Видимость = ПоказатьРасширеннуюИнформацию;
		Форма.Элементы.ПоказатьРасширеннуюИнформацию.Пометка   = ПоказатьРасширеннуюИнформацию;
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

// Функция возвращает HTML текст содержания по переданным параметрам.
//
// Параметры:
//	СсылкаИлиДеревоНастроекИлиОбъект	- Произвольный		- Ссылка или дерево настроек или объект.
//	ОграниченияТипов					- ОписаниеТипов		- Ограничения типов для кэша.
//	ДополнительныеПараметры				- Структура			- Дополнительные параметры.
//
// Возвращаемое значение:
//	Строка	- HTML текст содержания. 
//
Функция СформироватьРасширеннуюИнформациюОбОбъекте(СсылкаИлиДеревоНастроекИлиОбъект, ОграниченияТипов = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если
		СсылкаИлиДеревоНастроекИлиОбъект = Неопределено 
		Или	ТипЗнч(СсылкаИлиДеревоНастроекИлиОбъект) = Тип("СтрокаГруппировкиДинамическогоСписка")
	Тогда
		
		Возврат РасширеннаяИнформацияКлиентСервер.НастройкиПолейРасширеннойИнформацииПолучитьПустоеСодержание();
	
	Иначе
		Тип = ТипЗнч(СсылкаИлиДеревоНастроекИлиОбъект);
		
		СсылкаНаОбъект = Неопределено;
		
		ШиринаЛевойКолонки				= Неопределено;
		ШиринаЛевойКолонкиАбсолютная	= Неопределено;
		ШиринаПравойКолонки				= Неопределено;
		ШиринаПравойКолонкиАбсолютная	= Неопределено;
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ДополнительныеПараметры.Свойство("ШиринаЛевойКолонки",				ШиринаЛевойКолонки);
			ДополнительныеПараметры.Свойство("ШиринаЛевойКолонкиАбсолютная",	ШиринаЛевойКолонкиАбсолютная);
			ДополнительныеПараметры.Свойство("ШиринаПравойКолонки",				ШиринаПравойКолонки);
			ДополнительныеПараметры.Свойство("ШиринаПравойКолонкиАбсолютная",	ШиринаПравойКолонкиАбсолютная);
		КонецЕсли;
		
		Если Тип = Тип("ДеревоЗначений") Тогда
			ДеревоНастроек = СсылкаИлиДеревоНастроекИлиОбъект;
		Иначе
			Если Тип = Тип("Строка") Тогда
				ТипСтрокой = СсылкаИлиДеревоНастроекИлиОбъект;
			Иначе
				// передана ссылка
				СсылкаНаОбъект = СсылкаИлиДеревоНастроекИлиОбъект;
				
				Попытка 
					ТипСтрокой = СсылкаНаОбъект.Метаданные().ПолноеИмя();
				Исключение
					ТипСтрокой = Неопределено;
				КонецПопытки;
				Если ТипСтрокой = Неопределено Тогда
					Возврат РасширеннаяИнформацияКлиентСервер.НастройкиПолейРасширеннойИнформацииПолучитьПустоеСодержание();
				КонецЕсли;
				
			КонецЕсли;
			ТаблицаНастроек = НастройкиПолейРасширеннойИнформацииПолучитьНастройки(?(ОграниченияТипов = Неопределено, ТипСтрокой, ОграниченияТипов));
			
			Если ТаблицаНастроек.Количество() = 0 Тогда
				ТаблицаНастроек = НастройкиПолейРасширеннойИнформацииПолучитьНастройки(?(ОграниченияТипов = Неопределено, ТипСтрокой, ОграниченияТипов),Истина);
			КонецЕсли;	
			
			Если ТаблицаНастроек.Количество() = 0 Тогда
				Возврат РасширеннаяИнформацияКлиентСервер.НастройкиПолейРасширеннойИнформацииПолучитьПустоеСодержание();
			Иначе
				НайденнаяСтрока = ТаблицаНастроек.Найти(ТипСтрокой, "Объект");
				Если НайденнаяСтрока = Неопределено Тогда
					Возврат РасширеннаяИнформацияКлиентСервер.НастройкиПолейРасширеннойИнформацииПолучитьПустоеСодержание();
				Иначе
					ДеревоНастроек = НайденнаяСтрока.ДеревоНастроек;
					
					Если ШиринаЛевойКолонки = Неопределено И ЕстьРеквизит(ТаблицаНастроек,"ШиринаЛевойКолонки") Тогда
						ШиринаЛевойКолонки = НайденнаяСтрока.ШиринаЛевойКолонки;
					КонецЕсли;
					Если ШиринаЛевойКолонкиАбсолютная = Неопределено И ЕстьРеквизит(ТаблицаНастроек,"ШиринаЛевойКолонкиАбсолютная") Тогда
						ШиринаЛевойКолонкиАбсолютная = НайденнаяСтрока.ШиринаЛевойКолонкиАбсолютная;
					КонецЕсли;
					Если ШиринаПравойКолонки = Неопределено И ЕстьРеквизит(ТаблицаНастроек,"ШиринаПравойКолонки") Тогда
						ШиринаПравойКолонки = НайденнаяСтрока.ШиринаПравойКолонки;
					КонецЕсли;
					Если ШиринаПравойКолонкиАбсолютная = Неопределено И ЕстьРеквизит(ТаблицаНастроек,"ШиринаПравойКолонкиАбсолютная") Тогда
						ШиринаПравойКолонкиАбсолютная = НайденнаяСтрока.ШиринаПравойКолонкиАбсолютная;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ШиринаЛевойКолонки = Неопределено ИЛИ ШиринаЛевойКолонки <= 0 Тогда
			ШиринаЛевойКолонки = 75;
			ШиринаЛевойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		Если ШиринаЛевойКолонкиАбсолютная = Неопределено Тогда
			ШиринаЛевойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		Если ШиринаПравойКолонки = Неопределено ИЛИ ШиринаПравойКолонки <= 0 Тогда
			ШиринаПравойКолонки = 25;
			ШиринаПравойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		Если ШиринаПравойКолонкиАбсолютная = Неопределено Тогда
			ШиринаПравойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		
		ВывестиПримерЗаполнения = (СсылкаНаОбъект = Неопределено);
		
		Если ВывестиПримерЗаполнения Тогда
			ГиперссылкаНастройки = "";
		Иначе
			ГиперссылкаНастройки = "<div class=""title""><span class=""leftSide""> 
			|<FONT style=""color:#000000; background-color:#ffffff; font-size:14px; "" face=""MS Sans Serif"">
			| <B>" + СсылкаНаОбъект + "</B></FONT>
			| </span>
			|<span class=""rightSide"">
			|<a name=""НастройкаПечати"" class=""press"" title=""Печать"" tabindex=""1"">
			|  <span class=""pressImg"" style=""background-image: url(e1cib/pictureCollection/picture/-13?confver=5cbcc1a9dd7879498ff6404ab53bd07d00000000&w=16&h=16); background-position: 0px 0px; width:16px;""></span>
			|  <span class=""pressBox"">Печать</span>
			|</a>
			|<a name=""НастройкаПолейОтображения"" class=""press"" title=""Настроить поле расширенной информации"" tabindex=""1"">
			|  <span class=""pressImg"" style=""background-image: url(e1cib/pictureCollection/picture/0_64919ea0-5c5a-4b8e-a407-d0546811a9e3?confver=92291b4da4a00844b20aedd116f693b700000000&w=16&h=16);  background-position: 0px 0px; width:16px;""></span>
			|  <span class=""pressBox"">Настройки</span>
			|</a>
			|</span> </div>";
		КонецЕсли;
		
		Описание =ГиперссылкаНастройки
		+"<table width=""100%"" border=""0"" cellspacing=""2"">
		|";
		НачальнаяДлинаОписания = СтрДлина(Описание);
		
		стрЛеваяКолонка = "";
		стрПраваяКолонка = "";
		
		ШрифтЭлемента      = Новый Шрифт("MS Sans Serif", 12);
		ЦветТекстаЭлемента = Новый Цвет(0, 0, 0);
		ЦветФонаЭлемента   = Новый Цвет(255, 255, 255);
		ТегиЭлемента       = Неопределено;
		
		ЭтоСсылка = ОбщегоНазначения.ЗначениеСсылочногоТипа(СсылкаИлиДеревоНастроекИлиОбъект);
		ЭтоГруппа = Ложь;
		Если ЭтоСсылка Тогда
			МетаданныеОбъекта =СсылкаИлиДеревоНастроекИлиОбъект.Метаданные();
			ЭтоГруппа = ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) И СсылкаИлиДеревоНастроекИлиОбъект.ЭтоГруппа;
		КонецЕсли;	
			
		Для Каждого СтрокаНастройки Из ДеревоНастроек.Строки Цикл
			
			// Для групп справочинка будет выводить только то что используется для групп 
			Если ЭтоГруппа Тогда
				Если (НЕ МетаданныеОбъекта.Реквизиты.Найти(СтрокаНастройки.Реквизит) = Неопределено И МетаданныеОбъекта.Реквизиты[СтрокаНастройки.Реквизит].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента) 
					Или  (НЕ МетаданныеОбъекта.ТабличныеЧасти.Найти(СтрокаНастройки.Реквизит) = Неопределено И МетаданныеОбъекта.ТабличныеЧасти[СтрокаНастройки.Реквизит].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента) Тогда
					Продолжить;
				КонецЕсли;			
			КонецЕсли;
				
			// если строка не табличная часть и имеет реквизиты то перебираем каждый реквизит
			Если Не СтрокаНастройки.ЭтоТабличнаяЧасть И СтрокаНастройки.Строки.Количество() > 0 Тогда        
				Для Каждого ТекСтрока Из СтрокаНастройки.Строки Цикл
					Если НЕ ТекСтрока.ЭтоТабличнаяЧасть Тогда
						ТегиЭлемента = НастройкиПолейРасширеннойИнформацииПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента, ЦветФонаЭлемента, ШрифтЭлемента);
					КонецЕсли;
					
					мОписание = "";

					Если ВывестиПримерЗаполнения Тогда
						ОригинальноеПредставлениеРеквизитаТекст = ?(ЗначениеЗаполнено(ТекСтрока.ОригинальноеПредставлениеРеквизита), ТекСтрока.ОригинальноеПредставлениеРеквизита, НСтр("ru = 'Реквизит'"));
						ПримерПредставлениеРеквизита = ?(ЗначениеЗаполнено(ТекСтрока.ПредставлениеРеквизита), ТекСтрока.ПредставлениеРеквизита, ОригинальноеПредставлениеРеквизитаТекст);
						
						Если ТегиЭлемента <> Неопределено Тогда
							ПримерПредставлениеРеквизита = ТегиЭлемента.ОткрывающийТег + ПримерПредставлениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
						КонецЕсли;
						
						мОписание = мОписание + ?(ЗначениеЗаполнено(ТекСтрока.ПредставлениеРеквизита), "<%ЗаголовокОткрывающийТег%>" 
									+ ТекСтрока.ПредставлениеРеквизита + ": " + "<%ЗаголовокЗакрывающийТег%>", "") 
									+ ?(ТекСтрока.ТипЗначенияРеквизита = "Строка", "  {" + ПримерПредставлениеРеквизита + "}", 
									"</B>" + "<a href="""">" + "  {" + ПримерПредставлениеРеквизита + "}</a>");
					Иначе
						ПредставлениеРеквизита = ТекСтрока.Реквизит;
						
						Попытка
							Объект = СсылкаНаОбъект[ТекСтрока.Родитель.Реквизит];
							Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, ПредставлениеРеквизита);
							ЗначениеРеквизита = Результат;
						Исключение
							ЗначениеРеквизита = "";
						КонецПопытки;
						
						Если ТекСтрока.ТипЗначенияРеквизита = "Строка" Тогда
							
							Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
								ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ПС, "</BR>");
								ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
							ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
								ЗначениеРеквизита = Строка(ЗначениеРеквизита);
							ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
								Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
									ЗначениеРеквизита = "<%ПредставлениеПустойДаты%>";
								КонецЕсли;
							КонецЕсли;
							
							Если ТегиЭлемента <> Неопределено Тогда
								ЗначениеРеквизита = ТегиЭлемента.ОткрывающийТег + ЗначениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
							КонецЕсли;
							
							мОписание = мОписание + ?(ЗначениеЗаполнено(ТекСтрока.ПредставлениеРеквизита), "<%ЗаголовокОткрывающийТег%>" + ТекСтрока.ПредставлениеРеквизита + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ЗначениеРеквизита;
						Иначе
							СтрокаРеквизита = НастройкиПолейРасширеннойИнформацииПолучитьОписаниеОбъектаHTML(ЗначениеРеквизита, ТекСтрока.ПредставлениеРеквизита, Истина,, ТегиЭлемента);
							мОписание = мОписание + СтрокаРеквизита;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(мОписание) Тогда
						Попытка    
							Размещение = ТекСтрока.Размещение;
						Исключение 
							Размещение = Неопределено;
						КонецПопытки;
						Если Размещение = "ЛеваяКолонка" Тогда
							Если ТекСтрока.Положение = "НоваяСтрока" Тогда
								стрЛеваяКолонка = стрЛеваяКолонка + ?(стрЛеваяКолонка = "", "", " </BR>") + мОписание;
							Иначе
								стрЛеваяКолонка = стрЛеваяКолонка + ?(стрЛеваяКолонка = "", "", "  ") + мОписание;
							КонецЕсли;
							
						ИначеЕсли Размещение = "ПраваяКолонка" Тогда	
							Если ТекСтрока.Положение = "НоваяСтрока" Тогда
								стрПраваяКолонка = стрПраваяКолонка + ?(стрПраваяКолонка = "", "", " </BR>") + мОписание;
							Иначе
								стрПраваяКолонка = стрПраваяКолонка + ?(стрПраваяКолонка = "", "", "  ") + мОписание;
							КонецЕсли;
							
						Иначе
							Если ЗначениеЗаполнено(стрЛеваяКолонка) Или ЗначениеЗаполнено(стрПраваяКолонка) Тогда
								Если ШиринаЛевойКолонкиАбсолютная Тогда
									Описание = Описание + "
									|<tr>
									|
									|<table width=""100%"">
									|
									|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
									|" + стрЛеваяКолонка + "
									|</td>
									|<td valign=""top"">
									|" + стрПраваяКолонка + "
									|</td>
									|
									|</table>
									|
									|</tr>
									|";
								ИначеЕсли ШиринаПравойКолонкиАбсолютная Тогда
									Описание = Описание + "
									|<tr>
									|
									|<table width=""100%"">
									|
									|<td valign=""top"">
									|" + стрЛеваяКолонка + "
									|</td>
									|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
									|" + стрПраваяКолонка + "
									|</td>
									|
									|</table>
									|
									|</tr>
									|";
								Иначе
									Описание = Описание + "
									|<tr>
									|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
									|" + стрЛеваяКолонка + "
									|</td>
									|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
									|" + стрПраваяКолонка + "
									|</td>
									|</tr>
									|";
								КонецЕсли;
							КонецЕсли;
							стрЛеваяКолонка = "";
							стрПраваяКолонка = "";
							
							Если ТекСтрока.Положение = "НоваяСтрока" Тогда
								Описание = Описание + "
								|<tr>
								|<td colspan=2>
								|	" + ?(СтрДлина(Описание) = НачальнаяДлинаОписания, "", " </BR>") + мОписание + "
								|</td>
								|<tr>
								|";
							Иначе
								Описание = Описание + ?(Описание = "", "", "  ") + мОписание;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ СтрокаНастройки.ЭтоТабличнаяЧасть Тогда
				ТегиЭлемента = НастройкиПолейРасширеннойИнформацииПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента, ЦветФонаЭлемента, ШрифтЭлемента);
			КонецЕсли;
			
			мОписание = "";
			
			Если СтрокаНастройки.ЭтоРазделитель Тогда
				ПредставлениеРеквизита = СтрокаНастройки.ПредставлениеРеквизита;
				
				Если ТегиЭлемента <> Неопределено Тогда
					ПредставлениеРеквизита = ТегиЭлемента.ОткрывающийТег + ПредставлениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
				КонецЕсли;
				
				мОписание = мОписание + ПредставлениеРеквизита + " ";
				
			ИначеЕсли СтрокаНастройки.ЭтоТабличнаяЧасть Тогда
				
				Если НЕ ДеревоНастроек.Колонки.Найти("ПредставлениеСписком") = Неопределено 
						И СтрокаНастройки.ПредставлениеСписком Тогда
					мОписание = мОписание + НастройкиПолейРасширеннойИнформацииПолучитьHTMLОписаниеТабличнойЧастиСписком(СсылкаНаОбъект, СтрокаНастройки.Строки, СтрокаНастройки);
				Иначе
					Если ВывестиПримерЗаполнения Тогда
						мОписание = мОписание + НастройкиПолейРасширеннойИнформацииПолучитьHTMLОписаниеТабличнойЧасти(Неопределено, СтрокаНастройки.Строки, СтрокаНастройки);
					Иначе
						мОписание = мОписание + НастройкиПолейРасширеннойИнформацииПолучитьHTMLОписаниеТабличнойЧасти(СсылкаНаОбъект, СтрокаНастройки.Строки, СтрокаНастройки);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Если ВывестиПримерЗаполнения Тогда
					ОригинальноеПредставлениеРеквизитаТекст =  ?(ЗначениеЗаполнено(СтрокаНастройки.ОригинальноеПредставлениеРеквизита), 
																	СтрокаНастройки.ОригинальноеПредставлениеРеквизита, НСтр("ru = 'Реквизит'"));
					ПримерПредставлениеРеквизита = ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита), СтрокаНастройки.ПредставлениеРеквизита, ОригинальноеПредставлениеРеквизитаТекст);
					
					Если ТегиЭлемента <> Неопределено Тогда
						ПримерПредставлениеРеквизита = ТегиЭлемента.ОткрывающийТег + ПримерПредставлениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
					КонецЕсли;
					
					мОписание = мОписание + ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита), 
									"<%ЗаголовокОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита + ": " + "<%ЗаголовокЗакрывающийТег%>", "") 
										+ ?(СтрокаНастройки.ТипЗначенияРеквизита = "Строка", 
										"  {" + ПримерПредставлениеРеквизита + "}", "</B>" + "<a href="""">" + "  {" + ПримерПредставлениеРеквизита + "}</a>");
				Иначе
					Попытка
						ЗначениеРеквизита = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
					Исключение
						ЗначениеРеквизита = "";
					КонецПопытки;
					
					Если СтрокаНастройки.ТипЗначенияРеквизита = "Строка" Тогда
						
						Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
							ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ПС, "</BR>");
							ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
							ЗначениеРеквизита = Строка(ЗначениеРеквизита);
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
							Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
								ЗначениеРеквизита = "<%ПредставлениеПустойДаты%>";
							КонецЕсли;
						КонецЕсли;
						
						Если ТегиЭлемента <> Неопределено Тогда
							ЗначениеРеквизита = ТегиЭлемента.ОткрывающийТег + ЗначениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
						КонецЕсли;
						
						мОписание = мОписание + ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита), "<%ЗаголовокОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ЗначениеРеквизита;
					Иначе
						СтрокаРеквизита = НастройкиПолейРасширеннойИнформацииПолучитьОписаниеОбъектаHTML(ЗначениеРеквизита, СтрокаНастройки.ПредставлениеРеквизита, Истина,, ТегиЭлемента);
						мОписание = мОписание + СтрокаРеквизита;
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(мОписание) Тогда
				Попытка    
					Размещение = СтрокаНастройки.Размещение;
				Исключение 
					Размещение = Неопределено;
				КонецПопытки;
				Если Размещение = "ЛеваяКолонка" Тогда
					Если СтрокаНастройки.Положение = "НоваяСтрока" Тогда
						стрЛеваяКолонка = стрЛеваяКолонка + ?(стрЛеваяКолонка = "", "", " </BR>") + мОписание;
					Иначе
						стрЛеваяКолонка = стрЛеваяКолонка + ?(стрЛеваяКолонка = "", "", "  ") + мОписание;
					КонецЕсли;
					
				ИначеЕсли Размещение = "ПраваяКолонка" Тогда	
					Если СтрокаНастройки.Положение = "НоваяСтрока" Тогда
						стрПраваяКолонка = стрПраваяКолонка + ?(стрПраваяКолонка = "", "", " </BR>") + мОписание;
					Иначе
						стрПраваяКолонка = стрПраваяКолонка + ?(стрПраваяКолонка = "", "", "  ") + мОписание;
					КонецЕсли;
					
				Иначе
					Если ЗначениеЗаполнено(стрЛеваяКолонка) Или ЗначениеЗаполнено(стрПраваяКолонка) Тогда
						Если ШиринаЛевойКолонкиАбсолютная Тогда
							Описание = Описание + "
							|<tr>
							|
							|<table width=""100%"">
							|
							|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
							|" + стрЛеваяКолонка + "
							|</td>
							|<td valign=""top"">
							|" + стрПраваяКолонка + "
							|</td>
							|
							|</table>
							|
							|</tr>
							|";
						ИначеЕсли ШиринаПравойКолонкиАбсолютная Тогда
							Описание = Описание + "
							|<tr>
							|
							|<table width=""100%"">
							|
							|<td valign=""top"">
							|" + стрЛеваяКолонка + "
							|</td>
							|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
							|" + стрПраваяКолонка + "
							|</td>
							|
							|</table>
							|
							|</tr>
							|";
						Иначе
							Описание = Описание + "
							|<tr>
							|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
							|" + стрЛеваяКолонка + "
							|</td>
							|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
							|" + стрПраваяКолонка + "
							|</td>
							|</tr>
							|";
						КонецЕсли;
					КонецЕсли;
					стрЛеваяКолонка = "";
					стрПраваяКолонка = "";
					
					Если СтрокаНастройки.Положение = "НоваяСтрока" Тогда
						Описание = Описание + "
						|<tr>
						|<td colspan=2>
						|	" + ?(СтрДлина(Описание) = НачальнаяДлинаОписания, "", " </BR>") + мОписание + "
						|</td>
						|<tr>
						|";
					Иначе
						Описание = Описание + ?(Описание = "", "", "  ") + мОписание;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(стрЛеваяКолонка) ИЛИ ЗначениеЗаполнено(стрПраваяКолонка) Тогда
			Если ШиринаЛевойКолонкиАбсолютная Тогда
				Описание = Описание + "
				|<tr>
				|
				|<table width=""100%"">
				|
				|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
				|" + стрЛеваяКолонка + "
				|</td>
				|<td valign=""top"">
				|" + стрПраваяКолонка + "
				|</td>
				|
				|</table>
				|
				|</tr>
				|";
			ИначеЕсли ШиринаПравойКолонкиАбсолютная Тогда
				Описание = Описание + "
				|<tr>
				|
				|<table width=""100%"">
				|
				|<td valign=""top"">
				|" + стрЛеваяКолонка + "
				|</td>
				|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
				|" + стрПраваяКолонка + "
				|</td>
				|
				|</table>
				|
				|</tr>
				|";
			Иначе
				Описание = Описание + "
				|<tr>
				|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
				|" + стрЛеваяКолонка + "
				|</td>
				|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
				|" + стрПраваяКолонка + "
				|</td>
				|</tr>
				|";
			КонецЕсли;
		КонецЕсли;
		
		Описание = Описание
		+ "</table>
		|";
		
		Описание = СтрЗаменить(Описание, "<%ЗаголовокОткрывающийТег%>", "<font style=""font-size:12px;"" face=""MS Sans Serif"">");
		Описание = СтрЗаменить(Описание, "<%ЗаголовокЗакрывающийТег%>", "</font>");
		
		Описание = СтрЗаменить(Описание, "<%ЗаголовокТаблицыОткрывающийТег%>", "<B><font style=""font-size:12px;"" face=""MS Sans Serif"">");
		Описание = СтрЗаменить(Описание, "<%ЗаголовокТаблицыЗакрывающийТег%>", "</font></B>");
		
		Описание = СтрЗаменить(Описание, "<%ШапкаТаблицыОткрывающийТег%>", "<font style=""font-size:12px; font-weight:normal"" face=""MS Sans Serif"">");
		Описание = СтрЗаменить(Описание, "<%ШапкаТаблицыЗакрывающийТег%>", "</font>");
		
		Описание = СтрЗаменить(Описание, "<%ПредставлениеПустойДаты%>", НСтр("ru = 'дата не указана'"));
		СтильКнопки = НастройкиПолейРасширеннойИнформацииПолучитьСтильКнопки();
		
		Описание =
		"<html>
		|<head>
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">
		|<style type=""text/css"">
		|	a {text-decoration:none;}
		|.title .rightSide { float:right }
		|body {min-width: 650px;}
		|.title .leftSide { float:left }
		|  " + СтильКнопки + "
		|</style>
		|<style>
		|TABLE.main {
		|       border: 1px solid #a0a0a0;
		|      border-collapse: collapse;
		|        color: #333;
		|        /* Убираем двойные линии между ячейками */
		|      }
		|      TD.main, TH.main {
		|        border: 1px solid #ccc;
		|        /* Параметры рамки */
		|      }
		|      TH.main {
		|        background-color: #f2f2f2;
		|      }
		|      TD.main {
		|        background-color: #FFFFFF;
		|      }
		|</style>
		|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
		|<title></title>
		|</head>
		|<body>
		|" + Описание + "
		|</body>
		|</html>";
		
		Возврат Описание;
	КонецЕсли;
	
КонецФункции // СформироватьРасширеннуюИнформациюОбОбъекте()

// Функция восстанавливает настройки полей отображения расширенной информации
//
// Параметры:
//	ПолучитьДляОбъектаИлиТипа		- Произвольный		- Объект Или тип.
//	ПолучитьНастройкиПоУмолчанию	- Булево			- Получить настройки по умолчанию.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица настроек полей отображения содержания. 
//
Функция НастройкиПолейРасширеннойИнформацииПолучитьНастройки(ПолучитьДляОбъектаИлиТипа = Неопределено, ПолучитьНастройкиПоУмолчанию = Ложь) Экспорт
	
	Если ПолучитьДляОбъектаИлиТипа = Неопределено Тогда
		МассивФильтрПоОбъектам = Неопределено;
	Иначе
		МассивФильтрПоОбъектам = Новый Массив();
		Если ТипЗнч(ПолучитьДляОбъектаИлиТипа) = Тип("Строка") Тогда
			МассивФильтрПоОбъектам.Добавить(ПолучитьДляОбъектаИлиТипа);
		ИначеЕсли ТипЗнч(ПолучитьДляОбъектаИлиТипа) = Тип("ОписаниеТипов") Тогда
			Для Каждого Тип Из ПолучитьДляОбъектаИлиТипа.Типы() Цикл
				Если НЕ ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	КлючОбъекта = НастройкиПолейРасширеннойИнформацииПолучитьКлючОбъектаДляСохраненияВосстановления();
	
	Если ПолучитьНастройкиПоУмолчанию Тогда
		ТаблицаНастройки = НастройкиПолейРасширеннойИнформацииПолучитьНастройкиПоУмолчанию(ПолучитьДляОбъектаИлиТипа);
	Иначе
		ТаблицаНастройки = РасширеннаяИнформацияВызовСервера.ЗагрузитьНастройкуДанныхФормы(КлючОбъекта, "ТаблицаНастройки");
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаНастройки) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаРезультат = НастройкиПолейРасширеннойИнформацииПолучитьТаблицуНастроекБланк();
	ИначеЕсли МассивФильтрПоОбъектам <> Неопределено Тогда
		ТаблицаПоФильтру = НастройкиПолейРасширеннойИнформацииПолучитьТаблицуНастроекБланк();
		Для Каждого СтрокаТаблицы Из ТаблицаНастройки Цикл
			Если МассивФильтрПоОбъектам.Найти(СтрокаТаблицы.Объект) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаПоФильтру.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		ТаблицаРезультат = ТаблицаПоФильтру;
	Иначе
		ТаблицаРезультат = ТаблицаНастройки;
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции // НастройкиПолейРасширеннойИнформацииПолучитьНастройки()

// Процедура сохраняет настройки полей отображения содержания.
//
// Параметры:
//	Дерево					- ДеревоЗначений	- Дерево с настройками полей отображения содержания. 
//	ЗаместитьВсеНастройки	- Булево			- Флаг замены настроек.
//
Процедура НастройкиПолейРасширеннойИнформацииСохранитьНастройки(Дерево, ЗаместитьВсеНастройки = Ложь) Экспорт
	
	ТаблицаНастройки = НастройкиПолейРасширеннойИнформацииПреобразоватьДеревоВТаблицу(Дерево);
	Если ЗаместитьВсеНастройки Тогда
		НастройкиПолейРасширеннойИнформацииСохранитьТаблицуНастроек(ТаблицаНастройки);
	Иначе
		ТаблицаБланк = НастройкиПолейРасширеннойИнформацииПолучитьТаблицуНастроекБланк();
		ТаблицаСохраненная = НастройкиПолейРасширеннойИнформацииПолучитьНастройки();
		Для Каждого Колонка Из ТаблицаБланк.Колонки Цикл
			Если ТаблицаСохраненная.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				ТаблицаСохраненная.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ТаблицаНастройки Цикл
			НайденнаяСтрока = ТаблицаСохраненная.Найти(СтрокаТаблицы.Объект, "Объект");
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = ТаблицаСохраненная.Добавить();
				НайденнаяСтрока.Объект = СтрокаТаблицы.Объект;
				НайденнаяСтрока.ДеревоНастроек = СтрокаТаблицы.ДеревоНастроек.Скопировать();
			Иначе
				НайденнаяСтрока.ДеревоНастроек = СтрокаТаблицы.ДеревоНастроек.Скопировать();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаТаблицы,, "ДеревоНастроек");
		КонецЦикла;
		НастройкиПолейРасширеннойИнформацииСохранитьТаблицуНастроек(ТаблицаСохраненная);
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры // НастройкиПолейРасширеннойИнформацииСохранитьНастройки()

// Функция сохраняет настройки полей отображения содержания в файл
//
// Параметры:
//	ИмяФайла	- Строка	- Имя файла 
//  Объект		- Строка    - Имя объекта
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке.
//
Функция НастройкиПолейРасширеннойИнформацииСохранитьВФайл(ИмяФайла,Объект) Экспорт
	
	Попытка
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ТаблицаНастроек = НастройкиПолейРасширеннойИнформацииПолучитьНастройки(Объект);
		ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(ТаблицаНастроек, Новый СжатиеДанных(9)));
		ЗаписьXML.Закрыть();
		Возврат "";
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Попытка 
			ЗаписьXML.Закрыть();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при загрузке из файла'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции // НастройкиПолейОтображенияСодержанияСохранитьВФайл()

// Функция загружает настройки полей отображения содержания из файла
//
// Параметры:
//	ИмяФайла										- Строка	- Имя файла
//	ПоместитьТаблицуВоВременноеХранилищеПоАдресу	- Строка	- Адрес во временном хранилище.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке.
//
Функция НастройкиПолейРасширеннойИнформацииЗагрузитьИзФайла(ИмяФайла, ПоместитьТаблицуВоВременноеХранилищеПоАдресу = Неопределено) Экспорт
	
	Попытка
		СтрокаОшибкаФорматаФайла = НСтр("ru = 'Файл не является файлом сохраненных полей отображения содержания.'");
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		Попытка
			Хранилище = ПрочитатьXML(ЧтениеXML);
		Исключение
			ВызватьИсключение СтрокаОшибкаФорматаФайла;
		КонецПопытки;
		ЧтениеXML.Закрыть();
		Если ТипЗнч(Хранилище) <> Тип("ХранилищеЗначения") Тогда
			ВызватьИсключение СтрокаОшибкаФорматаФайла;
		КонецЕсли;
		ТаблицаНастройки = Хранилище.Получить();
		Если ТипЗнч(ТаблицаНастройки) <> Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение СтрокаОшибкаФорматаФайла;
		КонецЕсли;
		Если ПоместитьТаблицуВоВременноеХранилищеПоАдресу = Неопределено Тогда
			РезультатЗагрузки = НастройкиПолейРасширеннойИнформацииЗагрузитьИзВнешнейТаблицы(ТаблицаНастройки, СтрокаОшибкаФорматаФайла);
			Если НЕ ПустаяСтрока(РезультатЗагрузки) Тогда
				ВызватьИсключение РезультатЗагрузки;
			КонецЕсли;
		Иначе
			ТаблицаРезультат = НастройкиПолейРасширеннойИнформацииСкорректироватьВнешнююТаблицу(ТаблицаНастройки);
			Если ТаблицаРезультат = Неопределено Тогда
				ВызватьИсключение СтрокаОшибкаФорматаФайла;
			Иначе
				Если ЭтоАдресВременногоХранилища(ПоместитьТаблицуВоВременноеХранилищеПоАдресу) Тогда
					ПоместитьВоВременноеХранилище(ТаблицаРезультат, ПоместитьТаблицуВоВременноеХранилищеПоАдресу);
				Иначе
					ВызватьИсключение НСтр("ru = 'Ошибка при работе с временным хранилищем значений'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат "";
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Попытка 
			ЧтениеXML.Закрыть();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при загрузке из файла'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции // НастройкиПолейРасширеннойИнформацииЗагрузитьИзФайла()


////////////////////////////////////////////////////////////////////////////////
// Блок процедур и функций для работы с хранилищем настроек

// Процедура сохраняет настройки.
//
// Параметры:
//	КлючОбъекта	     - Строка          - Ключ сохраняемого объекта.
//  КлючНастроек     - Строка          - Ключ сохраняемой настройки для объекта.
//  Настройки        - ТаблицаЗначений - Таблица, содержащая сохраняемые настройки.
//  ОписаниеНастроек - Строка          - Описание сохраняемых настроек.
//  ИмяПользователя  - Строка          - Имя пользователя текущего сеанса.
//
Процедура Сохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек = Неопределено, Знач ИмяПользователя = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователя = ПолучитьИдентификаторПользователя(ИмяПользователя);
	
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИдентификаторПользователя);
	
КонецПроцедуры // Сохранить()

// Функция загружает настройки.
//
// Параметры:
//  КлючОбъекта      - Строка - Ключ сохраняемого объекта.
//  КлючНастроек     - Строка - Ключ сохраняемой настройки для объекта.
//  ОписаниеНастроек - Строка - Описание сохраняемых настроек.
//  ИмяПользователя  - Строка - Имя пользователя текущего сеанса.
// 
// Возвращаемое значение:
//  Произвольный - Настройка данных формы.
//
Функция ЗагрузитьНастройкуДанныхФормы(КлючОбъекта, КлючНастроек = "", ОписаниеНастроек = Неопределено, Знач ИмяПользователя = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователя = ПолучитьИдентификаторПользователя(ИмяПользователя);
	
	Результат = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИдентификаторПользователя);
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьНастройкуДанныхФормы()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает таблицу настроек по умолчанию
//
// Параметры:
//  ИмяОбъекта - Строка - Полное имя объекта.
//
// Возвращаемое значение:
//  Неопределено Или ТаблицаЗначений - Таблица настроек по умолчанию.
//
Функция НастройкиПолейРасширеннойИнформацииПолучитьНастройкиПоУмолчанию(ИмяОбъекта)
	
	// попробуем получить макет по умолчанию для заданного объекта
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	ПриватныйМакет = ОбъектМетаданных.Макеты.Найти("НастройкаПолейПоУмолчанию");
	
	Если ПриватныйМакет = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Макет = Обработки.НастройкаПоляРасширеннойИнформации.ПолучитьМакет("НастройкаПолейПоУмолчанию");
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
			Макет = Документы[ОбъектМетаданных.Имя].ПолучитьМакет("НастройкаПолейПоУмолчанию");
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
			Макет = Справочники[ОбъектМетаданных.Имя].ПолучитьМакет("НастройкаПолейПоУмолчанию");
		ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных) Тогда
			Макет = БизнесПроцессы[ОбъектМетаданных.Имя].ПолучитьМакет("НастройкаПолейПоУмолчанию");
		ИначеЕсли ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных) Тогда
			Макет = Задачи[ОбъектМетаданных.Имя].ПолучитьМакет("НастройкаПолейПоУмолчанию");
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
		Хранилище = ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		Если ТипЗнч(Хранилище) <> Тип("ХранилищеЗначения") Тогда
			ВызватьИсключение "";
		КонецЕсли;
		ТаблицаНастройки = Хранилище.Получить();
		Если ТипЗнч(ТаблицаНастройки) <> Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "";
		КонецЕсли;
		Возврат НастройкиПолейРасширеннойИнформацииСкорректироватьВнешнююТаблицу(ТаблицаНастройки,ИмяОбъекта);
	Исключение
		Попытка 
			ЧтениеXML.Закрыть();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при загрузке из файла'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции // НастройкиПолейРасширеннойИнформацииПолучитьНастройкиПоУмолчанию()

// Вспомогательная функция, вызывается из функции СформироватьРасширеннуюИнформациюОбОбъекте,
// формирует строку в формате HTML для отображения табличной части объекта.
//
// Параметры:
//	СсылкаНаОбъект	- ЛюбаяСсылка				- Ссылка на объект.
//	Реквизиты		- Строки дерева значений	- Строки с описанием реквизитов, которые нужно отобразить.
//	СтрокаНастройки	- Строка дерева значений	- Строка с описанием табличной части.
//	
// Возвращаемое значение:
//	Строка	- HTML текст описания табличной части.
//	
Функция НастройкиПолейРасширеннойИнформацииПолучитьHTMLОписаниеТабличнойЧасти(СсылкаНаОбъект, Реквизиты, СтрокаНастройки)
	
	Описание = "";
	
	Если СсылкаНаОбъект <> Неопределено Тогда
		Если ЕстьРеквизит(СсылкаНаОбъект,, СтрокаНастройки.Реквизит) Тогда
			ТабличнаяЧасть = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
			Если ТабличнаяЧасть.Количество() = 0 Тогда
				Возврат Описание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЦветРамки			= "#A0A0A0";
	ЦветФонаЗаголовков	= "#F2F2F2";
	ЦветФонаСтрок		= "#FFFFFF";
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Если Реквизиты.Количество() > 0 Тогда
		ТаблицаРеквизитов.Колонки.Добавить();
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока[0] = Реквизиты[0];
	КонецЕсли;
	
	ТекущаяКолонка = 0;
	ТекущаяСтрока  = 0;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит = Реквизиты[0] Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Положение = "НоваяСтрока" Тогда
			ТекущаяСтрока = ТекущаяСтрока + 1;
			Если ТаблицаРеквизитов.Количество() < ТекущаяСтрока + 1 Тогда
				НоваяСтрока = ТаблицаРеквизитов.Добавить();
			КонецЕсли;
		Иначе
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТаблицаРеквизитов.Колонки.Добавить();
			ТекущаяСтрока  = 0;
		КонецЕсли;
		
		ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка] = Реквизит;
	КонецЦикла;
	
	МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество() - 1;
	Для Каждого Строка Из ТаблицаРеквизитов Цикл
		ТекущаяСтрока =  ТаблицаРеквизитов.Индекс(Строка);
		ТекущаяКолонка = 0;
		ОписаниеСтроки = "";
		Для Каждого Колонка Из  ТаблицаРеквизитов.Колонки Цикл
			КолОбъединяемыхЯчеек = 1;
			Для Сч = ТекущаяСтрока + 1 По  МаксимальныйИндексСтроки Цикл
				Если ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
					КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
			Если Реквизит <> Неопределено Тогда
				ОписаниеСтроки = ОписаниеСтроки + "<TH class=""main"" align=""center"" rowspan = " + Строка(КолОбъединяемыхЯчеек) + "><%ШапкаТаблицыОткрывающийТег%>" + Реквизит.ПредставлениеРеквизита + "<%ШапкаТаблицыЗакрывающийТег%></TH>";
			КонецЕсли;
			ТекущаяКолонка = ТекущаяКолонка + 1;
		КонецЦикла;
		Описание = Описание + "<TR class=""main"" bgcolor=" + ЦветФонаЗаголовков + ">" + ОписаниеСтроки + "  </TR>";
	КонецЦикла;
	
	Если СсылкаНаОбъект = Неопределено Тогда
		МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество()-1;
		Для Каждого Строка Из ТаблицаРеквизитов Цикл
			ТекущаяСтрока = ТаблицаРеквизитов.Индекс(Строка);
			ТекущаяКолонка = 0;
			ОписаниеСтроки = "";
			Для Каждого колонка Из  ТаблицаРеквизитов.Колонки Цикл
				КолОбъединяемыхЯчеек = 1;
				Для Сч = ТекущаяСтрока+1 По  МаксимальныйИндексСтроки Цикл
					Если  ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
						КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
					Иначе 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
				
				ШрифтЭлемента		= Новый Шрифт("MS Sans Serif", 12);
				ЦветТекстаЭлемента	= Новый Цвет(0, 0, 0);
				ЦветФонаЭлемента	= Новый Цвет(255, 255, 255);
				
				Если Реквизит <> Неопределено Тогда
					ТегиЭлемента = НастройкиПолейРасширеннойИнформацииПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента, ЦветФонаЭлемента, ШрифтЭлемента);
					ОригинальноеПредставлениеРеквизитаТекст = ?(ЗначениеЗаполнено(Реквизит.ОригинальноеПредставлениеРеквизита), 
													Реквизит.ОригинальноеПредставлениеРеквизита, НСтр("ru = 'Реквизит'")); 
					ПримерПредставлениеРеквизита = ?(ЗначениеЗаполнено(Реквизит.ПредставлениеРеквизита), Реквизит.ПредставлениеРеквизита, ОригинальноеПредставлениеРеквизитаТекст);
					
					ПримерПредставлениеРеквизита = ТегиЭлемента.ОткрывающийТег + ПримерПредставлениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
					
					ОписаниеРеквизита = ?(Реквизит.ТипЗначенияРеквизита = "Строка", "  {" + ПримерПредставлениеРеквизита + "}", "</B>" + "<a href="""">" + "  {" + ПримерПредставлениеРеквизита + "}</a>");
					
					ОписаниеСтроки = ОписаниеСтроки + "<TD class=""main"" rowspan = " + Строка(КолОбъединяемыхЯчеек) + ">" + ОписаниеРеквизита + "</TD>";
				КонецЕсли;
				ТекущаяКолонка = ТекущаяКолонка + 1;
			КонецЦикла;
			Описание = Описание + "<TR class=""main"" bgcolor=" + ЦветФонаСтрок + "> " + ОписаниеСтроки + "  </TR>";
		КонецЦикла;
		
	Иначе
		Попытка
			ТабличнаяЧасть = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
		Исключение
			Возврат "";
		КонецПопытки;
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			
			Если ПроверитьСтрокуТЧНаВидКИСИсторией(СтрокаНастройки, СтрокаТабличнойЧасти, СсылкаНаОбъект) Тогда
				Продолжить;
			КонецЕсли;
			
			МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество()-1;
			Для каждого Строка Из ТаблицаРеквизитов Цикл
				ТекущаяСтрока = ТаблицаРеквизитов.Индекс(Строка);
				ТекущаяКолонка = 0;
				ОписаниеСтроки = "";
				Для Каждого колонка Из  ТаблицаРеквизитов.Колонки Цикл
					КолОбъединяемыхЯчеек = 1;
					Для Сч = ТекущаяСтрока + 1 По  МаксимальныйИндексСтроки Цикл
						Если  ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
							КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
						Иначе 
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
					Если Реквизит <> Неопределено Тогда
						ШрифтЭлемента		= Новый Шрифт("MS Sans Serif", 12);
						ЦветТекстаЭлемента	= Новый Цвет(0, 0, 0);
						ЦветФонаЭлемента	= Новый Цвет(255, 255, 255);
						
						ТегиЭлемента = НастройкиПолейРасширеннойИнформацииПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента, ЦветФонаЭлемента, ШрифтЭлемента);
						
						Попытка
							ЗначениеРеквизита =  СтрокаТабличнойЧасти[Реквизит.Реквизит];
						Исключение
							ЗначениеРеквизита = "";
						КонецПопытки;
						
						Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							ОписаниеРеквизита = "&nbsp";
							
							ОписаниеРеквизита = ТегиЭлемента.ОткрывающийТег + ОписаниеРеквизита + ТегиЭлемента.ЗакрывающийТег;
							
						ИначеЕсли Реквизит.ТипЗначенияРеквизита = "Строка" Тогда
							Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
								ОписаниеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ПС, "</BR>");
								ОписаниеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
							ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
								ОписаниеРеквизита = Строка(ЗначениеРеквизита);
							ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
								Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
									ЗначениеРеквизита = "<%ПредставлениеПустойДаты%>"
								КонецЕсли;
							Иначе
								ОписаниеРеквизита = ЗначениеРеквизита;
							КонецЕсли;
							
							ОписаниеРеквизита = ТегиЭлемента.ОткрывающийТег + ОписаниеРеквизита + ТегиЭлемента.ЗакрывающийТег;
							
						Иначе
							ПредставлениеОбъекта = Строка(ЗначениеРеквизита);
							ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;
							
							Если СтрЧислоВхождений(ПредставлениеОбъекта, НСтр("ru = 'Объект не найден'")) = 0 Тогда	
								НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗначениеРеквизита);
								ОписаниеРеквизита = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта + "</a>";
							Иначе
								ОписаниеРеквизита = НСтр("ru = '[Объект недоступен]'");
							КонецЕсли;
							
						КонецЕсли;
						
						ОписаниеСтроки = ОписаниеСтроки + "<TD class=""main"" rowspan = " + Строка(КолОбъединяемыхЯчеек) + ">" + ОписаниеРеквизита + "</TD>";
						
					КонецЕсли;
					ТекущаяКолонка = ТекущаяКолонка + 1;
				КонецЦикла;
				Описание = Описание + "<TR class=""main"" bgcolor=" + ЦветФонаСтрок + "> " + ОписаниеСтроки + "  </TR>";
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат "<TABLE class=""main"" width=""100%"" cellspacing=0 cellpadding=5 bordercolor=" + ЦветРамки + "> <DIV><%ЗаголовокТаблицыОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита + "<%ЗаголовокТаблицыЗакрывающийТег%></DIV>" +  Описание + "</TABLE>";
	
КонецФункции // НастройкиПолейРасширеннойИнформацииПолучитьHTMLОписаниеТабличнойЧасти()

// Вспомогательная функция, вызывается из функции СформироватьРасширеннуюИнформациюОбОбъекте,
// формирует строку в формате HTML для отображения табличной части объекта.
//
// Параметры:
//	СсылкаНаОбъект	- ЛюбаяСсылка				- Ссылка на объект.
//	Реквизиты		- Строки дерева значений	- Строки с описанием реквизитов, которые нужно отобразить.
//	СтрокаНастройки	- Строка дерева значений	- Строка с описанием табличной части.
//	
// Возвращаемое значение:
//	Строка	- HTML текст описания табличной части.
//	
Функция НастройкиПолейРасширеннойИнформацииПолучитьHTMLОписаниеТабличнойЧастиСписком(СсылкаНаОбъект, Реквизиты, СтрокаНастройки)
	
	Описание = "";
	
	Если СсылкаНаОбъект <> Неопределено Тогда
		Если ЕстьРеквизит(СсылкаНаОбъект,, СтрокаНастройки.Реквизит) Тогда
			ТабличнаяЧасть = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
			Если ТабличнаяЧасть.Количество() = 0 Тогда
				Возврат Описание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Если Реквизиты.Количество() > 0 Тогда
		ТаблицаРеквизитов.Колонки.Добавить();
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока[0] = Реквизиты[0];
	КонецЕсли;
	
	ТекущаяКолонка = 0;
	ТекущаяСтрока  = 0;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит = Реквизиты[0] Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Положение = "НоваяСтрока" Тогда
			ТекущаяСтрока = ТекущаяСтрока + 1;
			Если ТаблицаРеквизитов.Количество() < ТекущаяСтрока + 1 Тогда
				НоваяСтрока = ТаблицаРеквизитов.Добавить();
			КонецЕсли;
		Иначе
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТаблицаРеквизитов.Колонки.Добавить();
			ТекущаяСтрока  = 0;
		КонецЕсли;
		
		ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка] = Реквизит;
	КонецЦикла;
	
	МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество() - 1;
	
	Если СсылкаНаОбъект = Неопределено Тогда
		МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество()-1;
		Для Каждого Строка Из ТаблицаРеквизитов Цикл
			ТекущаяСтрока = ТаблицаРеквизитов.Индекс(Строка);
			ТекущаяКолонка = 0;
			ОписаниеСтроки = "";
			Для Каждого колонка Из  ТаблицаРеквизитов.Колонки Цикл
				КолОбъединяемыхЯчеек = 1;
				Для Сч = ТекущаяСтрока+1 По  МаксимальныйИндексСтроки Цикл
					Если  ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
						КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
					Иначе 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
				
				ШрифтЭлемента		= Новый Шрифт("MS Sans Serif", 12);
				ЦветТекстаЭлемента	= Новый Цвет(0, 0, 0);
				ЦветФонаЭлемента	= Новый Цвет(255, 255, 255);
				
				Если Реквизит <> Неопределено Тогда
					ТегиЭлемента = НастройкиПолейРасширеннойИнформацииПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента, ЦветФонаЭлемента, ШрифтЭлемента);
					ОригинальноеПредставлениеРеквизитаТекст = ?(ЗначениеЗаполнено(Реквизит.ОригинальноеПредставлениеРеквизита), 
															Реквизит.ОригинальноеПредставлениеРеквизита, НСтр("ru = 'Реквизит'"));
					ПримерПредставлениеРеквизита = ?(ЗначениеЗаполнено(Реквизит.ПредставлениеРеквизита), Реквизит.ПредставлениеРеквизита, ОригинальноеПредставлениеРеквизитаТекст);
					
					ПримерПредставлениеРеквизита = ТегиЭлемента.ОткрывающийТег + ПримерПредставлениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
					
					ОписаниеРеквизита = ?(Реквизит.ТипЗначенияРеквизита = "Строка", "  {" + ПримерПредставлениеРеквизита + "}", "</B>" + "<a href="""">" + "  {" + ПримерПредставлениеРеквизита + "}</a>");
					КолонкиКоличествоТекст = ?(ТаблицаРеквизитов.Колонки.Количество() = ТекущаяКолонка + 1, "", ", ");
					ОписаниеСтрокиТекст = ?(ОписаниеСтроки = "", ": ", КолонкиКоличествоТекст);
					ОписаниеСтроки = ОписаниеСтроки + ОписаниеРеквизита + ?(ТаблицаРеквизитов.Колонки.Количество() > 1, ОписаниеСтрокиТекст, КолонкиКоличествоТекст);
				КонецЕсли;
				ТекущаяКолонка = ТекущаяКолонка + 1;
			КонецЦикла;
			Описание = Описание + ОписаниеСтроки;
		КонецЦикла;
		
	Иначе
		Попытка
			ТабличнаяЧасть = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
		Исключение
			Возврат "";
		КонецПопытки;
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			
			Если ПроверитьСтрокуТЧНаВидКИСИсторией(СтрокаНастройки, СтрокаТабличнойЧасти, СсылкаНаОбъект) Тогда
				Продолжить;
			КонецЕсли;
			
			МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество() - 1;
			Для каждого Строка Из ТаблицаРеквизитов Цикл
				ТекущаяСтрока = ТаблицаРеквизитов.Индекс(Строка);
				ТекущаяКолонка = 0;
				ОписаниеСтроки = "";
				Для Каждого колонка Из  ТаблицаРеквизитов.Колонки Цикл
					КолОбъединяемыхЯчеек = 1;
					Для Сч = ТекущаяСтрока + 1 По  МаксимальныйИндексСтроки Цикл
						Если  ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
							КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
						Иначе 
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
					Если Реквизит <> Неопределено Тогда
						ШрифтЭлемента		= Новый Шрифт("MS Sans Serif", 12);
						ЦветТекстаЭлемента	= Новый Цвет(0, 0, 0);
						ЦветФонаЭлемента	= Новый Цвет(255, 255, 255);
						
						ТегиЭлемента = НастройкиПолейРасширеннойИнформацииПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента, ЦветФонаЭлемента, ШрифтЭлемента);
						
						Попытка
							ЗначениеРеквизита =  СтрокаТабличнойЧасти[Реквизит.Реквизит];
						Исключение
							ЗначениеРеквизита = "";
						КонецПопытки;
						
						Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							ОписаниеРеквизита = "&nbsp";
							
							ОписаниеРеквизита = ТегиЭлемента.ОткрывающийТег + ОписаниеРеквизита + ТегиЭлемента.ЗакрывающийТег;
							
						ИначеЕсли Реквизит.ТипЗначенияРеквизита = "Строка" Тогда
							Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
								ОписаниеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ПС, "</BR>");
								ОписаниеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
							ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
								ОписаниеРеквизита = Строка(ЗначениеРеквизита);
							ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
								Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
									ЗначениеРеквизита = "<%ПредставлениеПустойДаты%>";
								Иначе
									ОписаниеРеквизита = Строка(ЗначениеРеквизита);
								КонецЕсли;
							Иначе
								ОписаниеРеквизита = ЗначениеРеквизита;
							КонецЕсли;
							
							ОписаниеРеквизита = ТегиЭлемента.ОткрывающийТег + ОписаниеРеквизита + ТегиЭлемента.ЗакрывающийТег;
							
						Иначе
							ПредставлениеОбъекта = Строка(ЗначениеРеквизита);
							ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;
							
							Если СтрЧислоВхождений(ПредставлениеОбъекта, НСтр("ru = 'Объект не найден'")) = 0 Тогда	
								НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗначениеРеквизита);
								ОписаниеРеквизита = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта + "</a>";
							Иначе
								ОписаниеРеквизита = НСтр("ru = '[Объект недоступен]'");
							КонецЕсли;
							
						КонецЕсли;
						КолонкиКоличествоТекст = ?(ТаблицаРеквизитов.Колонки.Количество() = ТекущаяКолонка + 1, "", ", ");
						ОписаниеСтрокиТекст = ?(ОписаниеСтроки = "", ": ", КолонкиКоличествоТекст);
						ОписаниеСтроки = ОписаниеСтроки + ОписаниеРеквизита + 
						?(ТаблицаРеквизитов.Колонки.Количество() > 1, ОписаниеСтрокиТекст, КолонкиКоличествоТекст);
						
					КонецЕсли;
					ТекущаяКолонка = ТекущаяКолонка + 1;
				КонецЦикла;
				Описание = Описание + ОписаниеСтроки + "</BR>";
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат  "<%ЗаголовокТаблицыОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита 
					+ "<%ЗаголовокТаблицыЗакрывающийТег%></BR>" +  Описание;
	
КонецФункции // НастройкиПолейРасширеннойИнформацииПолучитьHTMLОписаниеТабличнойЧасти()

// Вспомогательная функция, возвращает описание объекта в HTML формате
//
// Параметры:
//	СсылкаНаОбъект	- ЛюбаяСсылка		- Ссылка на объект.
//	Представление	- Строка			- Представление объекта.
//	БезПереноса		- Булево			- Признак переноса строк.
//	ГиперСсылка		- Булево			- Признак отображать объект гиперссылкой.
//	ТегиЭлемента	- Структура			- Структура с описанием тегов элемента.
//	
// Возвращаемое значение:
//	Строка	- HTML текст описания объекта. 
//	
Функция НастройкиПолейРасширеннойИнформацииПолучитьОписаниеОбъектаHTML(
	СсылкаНаОбъект,
	Представление,
	БезПереноса = Ложь,
	ГиперСсылка = Истина,
	ТегиЭлемента = Неопределено)
	
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("Строка")  Тогда
			ПредставлениеОбъекта = Строка(СсылкаНаОбъект);
			
			Если ТегиЭлемента <> Неопределено Тогда
				ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;
			КонецЕсли;
			
			стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ПредставлениеОбъекта + ?(БезПереноса,"","</BR>");
			
			Возврат стрОписание;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(СсылкаНаОбъект);
		
		Если ТегиЭлемента <> Неопределено Тогда
			ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;
		КонецЕсли;
		
		Если СтрЧислоВхождений(ПредставлениеОбъекта,  НСтр("ru = 'Объект не найден'")) = 0 Тогда
			Если ГиперСсылка Тогда
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
				стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>" + ?(БезПереноса,"","</BR>");
			Иначе
				стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ПредставлениеОбъекта+"</a>" + ?(БезПереноса, "", "</BR>");
			КонецЕсли;
		Иначе
			стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + НСтр("ru = '[Объект недоступен]'") + ?(БезПереноса, "" , "</BR>");
		КонецЕсли;
	Иначе
		стрОписание = "";
	КонецЕсли;	
	
	Возврат стрОписание;
	
КонецФункции // НастройкиПолейРасширеннойИнформацииПолучитьОписаниеОбъектаHTML()

// Функция возвращает ключ для сохранения и восстановления настроек.
//
// Возвращаемое значение:
//	Строка	- Ключ для сохранения и восстановления настроек.
//
Функция НастройкиПолейРасширеннойИнформацииПолучитьКлючОбъектаДляСохраненияВосстановления()
	
	Возврат "_НастройкиПолейОтображенияСодержания_";
	
КонецФункции // НастройкиПолейРасширеннойИнформацииПолучитьКлючОбъектаДляСохраненияВосстановления()

// Функция корректирует внешнюю таблицу настроек полей отображения содержания по текущим метаданным,
// (проверяет наличие реквизитов объектов метаданных, структуру колонок, и т.д.).
//
// Параметры:
//	ТаблицаИсточник	- ТаблицаЗначений	- Таблица настроек полей отображения содержания.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица настроек полей отображения содержания. 
//
Функция НастройкиПолейРасширеннойИнформацииСкорректироватьВнешнююТаблицу(ТаблицаИсточник,ИмяОбъекта=Неопределено)
	
	ТаблицаНастройки = НастройкиПолейРасширеннойИнформацииПолучитьТаблицуНастроекБланк();
	ТипСтрока = Тип("Строка");
	ТипБулево = Тип("Булево");
	ОбязательныеКолонки = Новый Массив();
	ОбязательныеКолонки.Добавить("Реквизит");
	ОбязательныеКолонки.Добавить("ТипЗначенияРеквизита");
	ОбязательныеКолонки.Добавить("Положение");
	ОбязательныеКолонки.Добавить("Объект");
	ОбязательныеКолонки.Добавить("ЭтоТабличнаяЧасть");
	ОбязательныеКолонки.Добавить("ЭтоРеквизитТабличнойЧасти");
	ОбязательныеКолонки.Добавить("ЭтоРазделитель");
	ОбязательныеКолонки.Добавить("ПредставлениеСписком");
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаИсточник.Объект) Или ТипЗнч(СтрокаИсточник.ДеревоНастроек) <> Тип("ДеревоЗначений") Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаИсточник.Объект = "ВсеОбъекты" Тогда
			ИмяИсточника = ИмяОбъекта;
		Иначе
			ИмяИсточника = СтрокаИсточник.Объект;
		КонецЕсли;
			
		Попытка
			ОбъектМд = Метаданные.НайтиПоПолномуИмени(ИмяИсточника);
		Исключение
			ОбъектМд = Неопределено;
		КонецПопытки;
		Если ОбъектМд = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Дерево = СтрокаИсточник.ДеревоНастроек;
		бСтруктураДереваКорректна = Истина;
		Для Каждого КолонкаИмя Из ОбязательныеКолонки Цикл
			Если Дерево.Колонки.Найти(КолонкаИмя) = Неопределено Тогда
				бСтруктураДереваКорректна = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ бСтруктураДереваКорректна Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаНастройки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник,, "ДеревоНастроек");
		НоваяСтрока.Объект = ИмяИсточника;
		НоваяСтрока.ДеревоНастроек = Дерево.Скопировать();
		НоваяСтрока.ДеревоНастроек.Строки.Очистить();
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			Если СтрокаДерева.ЭтоТабличнаяЧасть = Истина Тогда
				Если ОбъектМд.ТабличныеЧасти.Найти(СтрокаДерева.Реквизит) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивСтандартныеРеквизиты = Новый Массив();
				Попытка
					СтандартныеРеквизиты = ОбъектМд.ТабличныеЧасти[СтрокаДерева.Реквизит].СтандартныеРеквизиты;
				Исключение
					СтандартныеРеквизиты = Неопределено;
				КонецПопытки;
				Если СтандартныеРеквизиты <> Неопределено Тогда
					Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
						МассивСтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
					КонецЦикла;
				КонецЕсли;
				Реквизиты = ОбъектМд.ТабличныеЧасти[СтрокаДерева.Реквизит].Реквизиты;
				СтрокаТЧ = НоваяСтрока.ДеревоНастроек.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДерева);
				СтрокаТЧ.Объект = ИмяИсточника;
				Для Каждого СтрокаТЧИсточник Из СтрокаДерева.Строки Цикл
					Если МассивСтандартныеРеквизиты.Найти(СтрокаТЧИсточник.Реквизит) = Неопределено И Реквизиты.Найти(СтрокаТЧИсточник.Реквизит) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаРеквизит = СтрокаТЧ.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРеквизит, СтрокаТЧИсточник);
					СтрокаРеквизит.Объект = ИмяИсточника;
				КонецЦикла;
				Если СтрокаТЧ.Строки.Количество() = 0 Тогда
					НоваяСтрока.ДеревоНастроек.Строки.Удалить(СтрокаТЧ);
				КонецЕсли;
			Иначе
				Если НЕ СтрокаДерева.ЭтоРазделитель Тогда
					МассивСтандартныеРеквизиты = Новый Массив();
					Попытка
						СтандартныеРеквизиты = ОбъектМд.СтандартныеРеквизиты;
					Исключение
						СтандартныеРеквизиты = Неопределено;
					КонецПопытки;
					Если СтандартныеРеквизиты <> Неопределено Тогда
						Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
							МассивСтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
						КонецЦикла;
					КонецЕсли;
					Попытка
						СтандартныеРеквизиты = Метаданные.ОбщиеРеквизиты;
					Исключение
						СтандартныеРеквизиты = Неопределено;
					КонецПопытки;
					Если СтандартныеРеквизиты <> Неопределено Тогда
						Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
							МассивСтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
						КонецЦикла;
					КонецЕсли;
					Попытка
						СтандартныеРеквизиты = ОбъектМд.РеквизитыАдресации;
					Исключение
						СтандартныеРеквизиты = Неопределено;
					КонецПопытки;
					Если СтандартныеРеквизиты <> Неопределено Тогда
						Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
							МассивСтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
						КонецЦикла;
					КонецЕсли;
										
					Реквизиты = ОбъектМд.Реквизиты;
					Если МассивСтандартныеРеквизиты.Найти(СтрокаДерева.Реквизит) = Неопределено И Реквизиты.Найти(СтрокаДерева.Реквизит) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрокаРеквизит = НоваяСтрока.ДеревоНастроек.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРеквизит, СтрокаДерева);
				СтрокаРеквизит.Объект = ИмяИсточника;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ТаблицаНастройки;
	
КонецФункции // НастройкиПолейРасширеннойИнформацииСкорректироватьВнешнююТаблицу()

// Функция возвращает пустую таблицу-бланк для сохранения / восстановления настроек полей отображения содержания.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Пустая таблица значений.
//
Функция НастройкиПолейРасширеннойИнформацииПолучитьТаблицуНастроекБланк()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ШиринаЛевойКолонкиАбсолютная", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ШиринаПравойКолонкиАбсолютная", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ШиринаЛевойКолонки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ШиринаПравойКолонки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ДеревоНастроек");
	Возврат Таблица;
	
КонецФункции // НастройкиПолейРасширеннойИнформацииПолучитьТаблицуНастроекБланк()

// Процедура сохраняет таблицу настроек полей отображения содержания.
//
// Параметры:
//	ТаблицаНастройки	- ТаблицаЗначений	- Таблица настроек полей отображения содержания.	
//
Процедура НастройкиПолейРасширеннойИнформацииСохранитьТаблицуНастроек(ТаблицаНастройки, ИмяПользователя = Неопределено, КлючОбъекта = Неопределено)
	
	Если КлючОбъекта = Неопределено Тогда
		КлючОбъекта = НастройкиПолейРасширеннойИнформацииПолучитьКлючОбъектаДляСохраненияВосстановления();
	КонецЕсли;
	Если ИмяПользователя = Неопределено Тогда
		Сохранить(КлючОбъекта, "ТаблицаНастройки", ТаблицаНастройки);
	Иначе
		Сохранить(КлючОбъекта, "ТаблицаНастройки", ТаблицаНастройки,, ИмяПользователя);
	КонецЕсли;
	
КонецПроцедуры // НастройкиПолейРасширеннойИнформацииСохранитьТаблицуНастроек()

// Вспомогательная функция, формирует теги для отрисовки текста определенным цветом и шрифтом.
//
// Параметры:
//	ЦветТекста	- Цвет	- Цвет текста в формате 1С.
//	ЦветФона	- Цвет	- Цвет фона в формате 1С.
//	Шрифт		- Шрифт	- Шрифт текста в формате 1С.
//
// Возвращаемое значение:
//	Структура	- структура с открывающимся и закрывающимся тегами.
//
Функция НастройкиПолейРасширеннойИнформацииПолучитьТегиШрифтаТекстаHTML(ЦветТекста, ЦветФона, Шрифт)
	
	СтруктураРезультат = Новый Структура("ОткрывающийТег,ЗакрывающийТег", "", "");
	
	Если ЦветТекста = Неопределено Тогда
		ЦветТекстаHTML = Неопределено;
	Иначе
		ЦветТекстаHTML = НастройкиПолейРасширеннойИнформацииПолучитьЦветДляHTMLКода(ЦветТекста);
	КонецЕсли;
	
	Если ЦветФона = Неопределено Тогда
		ЦветФонаHTML = Неопределено;
	Иначе
		ЦветФонаHTML = НастройкиПолейРасширеннойИнформацииПолучитьЦветДляHTMLКода(ЦветФона);
	КонецЕсли;
	
	Если Шрифт = Неопределено Тогда
		ШрифтЭлемента = Неопределено;
	Иначе
		Если Шрифт.Размер < 0 Тогда
			ШрифтЭлемента = Неопределено;
		Иначе
			ШрифтЭлемента = Шрифт;
		КонецЕсли;
	КонецЕсли;
	
	Если ЦветТекстаHTML <> Неопределено Или ЦветФонаHTML <> Неопределено Или ШрифтЭлемента <> Неопределено Тогда
		СтруктураРезультат.ОткрывающийТег = "<FONT style=""";
		
		Если ЦветТекстаHTML <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "color:" + ЦветТекстаHTML + "; ";
		КонецЕсли;
		Если ЦветФонаHTML <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "background-color:" + ЦветФонаHTML + "; ";
		КонецЕсли;
		
		Если ШрифтЭлемента <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "font-size:" + Формат(ШрифтЭлемента.Размер, "ЧН=0; ЧГ=") + "px; ";
		КонецЕсли;
		
		СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + """";
		
		Если ШрифтЭлемента <> Неопределено Тогда
			Если ЗначениеЗаполнено(ШрифтЭлемента.Имя) Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + " face=""" + ШрифтЭлемента.Имя + """";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + ">";
		
		Если ШрифтЭлемента <> Неопределено Тогда
			Если ШрифтЭлемента.Жирный = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<B>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</B>";
			КонецЕсли;
			Если ШрифтЭлемента.Наклонный = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<I>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</I>";
			КонецЕсли;
			Если ШрифтЭлемента.Подчеркивание = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<U>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</U>";
			КонецЕсли;
			Если ШрифтЭлемента.Зачеркивание = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<DEL>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</DEL>";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</FONT>";
	КонецЕсли;
		
	Возврат СтруктураРезультат;
	
КонецФункции  // НастройкиПолейРасширеннойИнформацииПолучитьТегиШрифтаТекстаHTML()

// Вспомогательная функция преобразует цвет из формата 1С в формат, пригодный для использования в HTML.
//
// Параметры:
//	ОбъектЦвет	- Цвет - Цвет в формате 1С.
//
// Возвращаемое значение:
//	Строка	- цвет в формате html.
//
Функция НастройкиПолейРасширеннойИнформацииПолучитьЦветДляHTMLКода(ОбъектЦвет)
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	
	Если ОбъектЦвет = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(ОбъектЦвет) = Тип("Строка") Тогда
		Возврат ОбъектЦвет;
	ИначеЕсли ОбъектЦвет.Красный < 0 Или ОбъектЦвет.Зеленый < 0 Или ОбъектЦвет.Синий < 0 Тогда
		
		// получим цвет стиля
		Попытка
			ТабДок=Новый ТабличныйДокумент;
			ТабДок.Область(1,1,1,1).ЦветФона=ОбъектЦвет;
			вф=ПолучитьИмяВременногоФайла("htm");
			ТабДок.Записать(вф,ТипФайлаТабличногоДокумента.HTML);
			// читаем грубо, без ДокументHTML
			рКодПоиска="tr.R0 td.R0C0{ background-color:"; // если 1С изменит формат, эту строку придется поменять
			ТекстДок=Новый ТекстовыйДокумент;
			ТекстДок.Прочитать(вф);
			стро=ТекстДок.ПолучитьТекст();
			УдалитьФайлы(вф);
			пози=СтрНайти(стро,рКодПоиска);
			Если пози<>0 Тогда
				Возврат ВРег(Сред(стро,пози+СтрДлина(рКодПоиска),8));
			КонецЕсли;
			Возврат "#000000";
		Исключение
			Возврат "#000000";
		КонецПопытки;
		
	КонецЕсли;
	
	СтрокаШестнадцатеричныеСимволы = "0123456789abcdef";
	
	Возврат	"#"
	+	Сред(СтрокаШестнадцатеричныеСимволы, Цел(ОбъектЦвет.Красный / 16) + 1, 1) + Сред(СтрокаШестнадцатеричныеСимволы, Цел(ОбъектЦвет.Красный % 16) + 1, 1)
	+	Сред(СтрокаШестнадцатеричныеСимволы, Цел(ОбъектЦвет.Зеленый / 16) + 1, 1) + Сред(СтрокаШестнадцатеричныеСимволы, Цел(ОбъектЦвет.Зеленый % 16) + 1, 1)
	+	Сред(СтрокаШестнадцатеричныеСимволы, Цел(ОбъектЦвет.Синий / 16) + 1, 1) + Сред(СтрокаШестнадцатеричныеСимволы, Цел(ОбъектЦвет.Синий % 16) + 1, 1);
	
КонецФункции // НастройкиПолейРасширеннойИнформацииПолучитьЦветДляHTMLКода()

// Функция преобразует дерево с настройками полей отображения содержания в таблицу значений,
// используемую для сохранения настроек.
//
// Параметры:
//	Дерево	- ДеревоЗначений	- Дерево с настройками полей отображения содержания. 
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица значений для сохранения настроек.
//
Функция НастройкиПолейРасширеннойИнформацииПреобразоватьДеревоВТаблицу(Дерево)
	
	Таблица = НастройкиПолейРасширеннойИнформацииПолучитьТаблицуНастроекБланк();
	Для Каждого СтрокаВерхнегоУровня Из Дерево.Строки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаВерхнегоУровня.Объект) Тогда
			Продолжить;
		КонецЕсли;
		НайденнаяСтрока = Таблица.Найти(СтрокаВерхнегоУровня.Объект, "Объект");
		Если НайденнаяСтрока <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Объект = СтрокаВерхнегоУровня.Объект;
		НоваяСтрока.ДеревоНастроек = СтрокаВерхнегоУровня.ДеревоНастроек;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВерхнегоУровня,, "ДеревоНастроек");
	КонецЦикла;
	Возврат Таблица;
	
КонецФункции // НастройкиПолейРасширеннойИнформацииПреобразоватьДеревоВТаблицу()

// Функция загружает настройки полей отображения содержания из внешней таблицы значений.
//
// Параметры:
//	ТаблицаИсточник		- ТаблицаЗначений	- Таблица настроек полей отображения содержания
//	СтрокаОшибкаФормата	- Строка			- Строка для вывода сообщения об ошибке формата.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке формата.
//
Функция НастройкиПолейРасширеннойИнформацииЗагрузитьИзВнешнейТаблицы(ТаблицаИсточник, СтрокаОшибкаФормата = Неопределено)
	
	Если СтрокаОшибкаФормата = Неопределено Тогда
		СтрокаОшибкаФормата = НСтр("ru = 'Ошибка формата данных.'");
	КонецЕсли;
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		Возврат СтрокаОшибкаФормата;
	КонецЕсли;
	Если	ТаблицаИсточник.Колонки.Найти("Объект") = Неопределено
		Или	ТаблицаИсточник.Колонки.Найти("ДеревоНастроек") = Неопределено Тогда
		Возврат СтрокаОшибкаФормата;
	КонецЕсли;
	ТаблицаНастройки = НастройкиПолейРасширеннойИнформацииСкорректироватьВнешнююТаблицу(ТаблицаИсточник);
	НастройкиПолейРасширеннойИнформацииСохранитьТаблицуНастроек(ТаблицаНастройки);
	Возврат "";
	
КонецФункции // НастройкиПолейРасширеннойИнформацииЗагрузитьИзВнешнейТаблицы()

// Вспомогательная функция устанавливает стандартный стиль кнопки 1с.
//
// Возвращаемое значение:
// Строка - Стиль для кнопки в формате html.
//
Функция НастройкиПолейРасширеннойИнформацииПолучитьСтильКнопки()
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	
	Возврат ".IWebForm .press:hover::before, .IWebForm .press:active::before {
	|border-radius: 4px;
	|    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.3);
	|}
	|.press::before {
	|    content: """";
	|    display: inline-block;
	|    height: 100%;
	|    margin-right: -100%;
	|    position: relative;
	|    vertical-align: middle;
	|    width: 100%;
	|}
	|.IWebForm .press:active::after, .IWebForm .pressChecked::after, .IWebForm .pressChecked:hover::after {
	|    background-color: rgba(175, 175, 175, 0.15);
	|}
	|.IWebForm .press:hover::after {
	 |    background-color: rgba(255, 255, 255, 0.01);
	|}
	|.press:active::after, .focus.press::after {
	|    border: 1px dotted #2a2a2a;
	|}
	|.press:active::after {
	|    background-color: rgba(175, 200, 255, 0.15);
	|    box-shadow: none;
	|}
	|.press:hover::after {
	|    background-color: rgba(255, 255, 255, 0.15);
	|    box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.2);
	|}
	|.pressButton::after, .I82Form .pressDefault::after, .IWebForm .press::after, .press:hover::after, .press:active::after {
	|    background-image: url(""e1csys/mngsrv/_pressBottom.png?sysver=8.3.6.2390"");
	|    background-position: left bottom;
	|    background-repeat: repeat-x;
	|    background-size: auto 50%;
	|}
	|.press::after {
	|    bottom: 1px;
	|    content: """";
	|    display: block;
	|    left: 1px;
	|    position: absolute;
	|    right: 1px;
	|    top: 1px;
	|}
	|.IWebForm .press:active, .IWebForm .pressChecked {
	|    background-image: url(""e1csys/mngsrv/_pressTopHover.png?sysver=8.3.6.2390"");
	|    background-position: 0 0;
	|    background-repeat: repeat-x;
	|    background-size: auto auto;
	|    color: #424242;
	|}
	|.IWebForm .press:hover {
	|    color: #474747;
	|}
	|.IWebForm .command .press {
	|    height: 26px;
	|    margin-left: 10px;
	|    margin-right: 0;
	|}
	|.IWebForm .press {
	|    background-color: #f6f6f6;
	|    background-size: auto 100%;
	|    border-color: #a0a0a0;
	|    color: #4d4d4d;
	|    font-family: Arial;
	|    font-size: 10pt;
	|}
	|.command .press {
	|    height: 22px;
	|    margin-right: 3px;
	|}
	|.press:active {
	|    background-image: none;
	|   box-shadow: 0 3px 4px -2px rgba(0, 0, 0, 0.2) inset;
	|}
	|.pressButton, .I82Form .pressDefault, .IWebForm .press {
	|    background-image: url(""e1csys/mngsrv/_pressTop.png?sysver=8.3.6.2390"");
	|background-position: 0 0;
	|    background-repeat: repeat-x;
	|}
	|.press {
	|    height: 26px;
	|    margin-right: 3px;
	|    border: 1px solid transparent;
	|    border-radius: 4px;
	|    box-sizing: border-box;
	|    display: inline-block;
	|    /*margin-bottom: 15px;*/
	|    outline: medium none;
	|    position: relative;
	|    vertical-align: top;
	|    background-color: #f6f6f6;
	|    background-size: auto 100%;
	|    border-color: #a0a0a0;
	|    color: #4d4d4d;
	|    font-family: Arial;
	|    font-size: 10pt;
	|}
	|.press:active span {
	|    top: 1px;
	|}
	|.IWebForm .pressImg {
	|    margin: 0 8px;
	|}
	|.pressImg {
	|    margin: 0 2px;
	|}
	|.pressImg {
	|    background: rgba(0, 0, 0, 0) url(""e1csys/mngsrv/_sprite.png?sysver=8.3.6.2390"") no-repeat scroll center center;
	|    display: inline-block;
	|    height: 16px;
	|    max-height: 100%;
	|    position: relative;
	|    vertical-align: middle;
	|    width: 16px;
	|}
	|.IWebForm .command .pressImg + .pressBox {
	|    border-left-width: 0;
	|    margin-left: -2px;
	|}
	|.IWebForm .command .pressBox {
	|    border-width: 0 12px;
	|}
	|.pressBox {
	|    border-width: 0 2px;
	|}
	|.pressBox {
	|    margin-right: 8px;
	|    border-color: transparent;
	|    border-style: solid;
	|    box-sizing: border-box;
	|    display: inline-block;
	|    overflow: hidden;
	|    position: relative;
	|    text-align: center;
	|    text-decoration: inherit;
	|    vertical-align: middle;
	|}";
	
КонецФункции // НастройкиПолейРасширеннойИнформацииПолучитьСтильКнопки()

// Функция получает идентификатор пользователя.
//
// Параметры:
// ИмяПользователя - Строка - Имя пользователя текущего сеанса.
//
Функция ПолучитьИдентификаторПользователя(ИмяПользователя = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяПользователя = Неопределено Тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Иначе
		ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	КонецЕсли;
	Если ТекущийПользователь = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТекущийПользователь.УникальныйИдентификатор;
	КонецЕсли;
	
КонецФункции  // ПолучитьИдентификаторПользователя()

// Функция проверяет вид контактной информации на историю изменений.
//
// Параметры:
// СтрокаНастройки - СтрокаДереваЗначений
// СтрокаТабличнойЧасти - ТабличнаяЧастьСтрока
// СсылкаНаОбъект - СправочникСсылка.Контрагенты
//
Функция ПроверитьСтрокуТЧНаВидКИСИсторией(СтрокаНастройки, СтрокаТабличнойЧасти, СсылкаНаОбъект)
	
	Если СтрокаНастройки.Реквизит = "КонтактнаяИнформация" Тогда
		ХранитьИсториюИзменений = СтрокаТабличнойЧасти.Вид.ХранитьИсториюИзменений;
		Если ХранитьИсториюИзменений Тогда
			Контакт = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаОбъект,
			СтрокаТабличнойЧасти, ТекущаяДатаСеанса(), Ложь); 
			
			Отбор = Новый Структура;
			Отбор.Вставить("Дата", СтрокаТабличнойЧасти.ДействуетС);
			Отбор.Вставить("Вид", СтрокаТабличнойЧасти.Вид);
			
			Если Контакт.НайтиСтроки(Отбор).Количество() = 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
#КонецОбласти