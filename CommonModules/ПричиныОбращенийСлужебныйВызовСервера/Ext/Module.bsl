
#Область ПрограммныйИнтерфейс

// Получение списка авторабот для причины обращения.
//
// Параметры:
//  guidПричины - Строка - идентификатор причины обращения.
// 
// Возвращаемое значение:
//  Массив - список авторабот причины обращения.
//
Функция АвтоработыПричиныОбращения(guidПричины) Экспорт
	
	Возврат ПричиныОбращенийСлужебный.АвтоработыПричиныОбращения(guidПричины);
	
КонецФункции

// Перенос причины обращения из одного заказ-наряда в другой.
//
// Параметры:
//  Приемник         - ДокументСсылка.ЗаказНаряд - куда перемещается причина обращения.
//  Источник         - ДокументСсылка.ЗаказНаряд - документ, из которого перемещается причина обращения.
//  ПричиныОбращения - Массив - список причин обращения для переноса.
// 
// Возвращаемое значение:
//  Неопределено - возврат пустого результата действия.
//
Функция ПеренестиПричинуОбращения(Приемник, Источник, ПричиныОбращения) Экспорт
	
	ПричиныОбращенийСлужебный.ПеренестиПричинуОбращения(Приемник, Источник, ПричиныОбращения);
	
КонецФункции

// Устарела. Перенос авторабот из одного заказ-наряда в другой.
//
// Параметры:
//  Приемник         - ДокументСсылка.ЗаказНаряд - куда перемещается авторабота.
//  Источник         - ДокументСсылка.ЗаказНаряд - документ, из которого перемещается авторабота.
//  Автоработы - Массив - список авторабот для переноса.
// 
// Возвращаемое значение:
//  Неопределено - возврат пустого результата действия.
//
Функция ПеренестиАвтоработы(Приемник, Источник, Автоработы) Экспорт
	
	ПричиныОбращенийСлужебный.ПеренестиАвтоработы(Приемник, Источник, Автоработы);
	
КонецФункции

// Данные причины обращения необходимые для указания в строке документа
//
// Параметры:
//  Причина   - СправочникСсылка.ПричиныОбращений - причина обращения строки.
//  Параметры - Структура - дополнительные параметры.
// 
// Возвращаемое значение:
//  Структура - сформированные реквизиты строки.
//
Функция ДанныеСтрокиПричиныОбращения(Причина, Параметры) Экспорт
	
	ПоляВСтроке = Новый Массив;
	ПоляВСтроке.Добавить("ПричинаОбращения");
	ПоляВСтроке.Добавить("ПричинаОбращенияСодержание");
	ПоляВСтроке.Добавить("ТипПричиныОбращения");
	ПоляВСтроке.Добавить("НормаВремени");
	ПоляВСтроке.Добавить("ВидРемонтаПричиныОбращения");
	
	Результат = Новый Структура(СтрСоединить(ПоляВСтроке, ","));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПричиныОбращений.Ссылка КАК ПричинаОбращения,
	|	ПричиныОбращений.ПричинаОбращения КАК ПричинаОбращенияСодержание,
	|	ПричиныОбращений.ТипПричиныОбращения КАК ТипПричиныОбращения,
	|	ПричиныОбращений.ВидРемонта КАК ВидРемонтаПричиныОбращения,
	|	ПричиныОбращений.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПричиныОбращений КАК ПричиныОбращений
	|ГДЕ
	|	ПричиныОбращений.Ссылка = &Значение");
	Запрос.УстановитьПараметр("Значение", Причина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(); Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Если ПустаяСтрока(Результат.ПричинаОбращенияСодержание) Тогда
			Результат.ПричинаОбращенияСодержание = Выборка.Наименование;
		КонецЕсли;
		
		Значение = Неопределено;
		Если Параметры.Свойство("Документ", Значение) И ЗначениеЗаполнено(Значение) Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Модель", "Автомобиль.Модель");
			Реквизиты.Вставить("Комплектация", "Автомобиль.ВариантКомплектации");
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Значение, Реквизиты);
			
			Значение = ?(
				ЗначениеЗаполнено(ЗначенияРеквизитов.Комплектация), ЗначенияРеквизитов.Комплектация, ЗначенияРеквизитов.Модель);
			
		ИначеЕсли Параметры.Свойство("Комплектация", Значение) И НЕ ЗначениеЗаполнено(Значение) Тогда
			
			Значение = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Модель");
			
		КонецЕсли;
		
		Результат.НормаВремени = ЦенообразованиеСервер.НормаВремениПричиныОбращения(Причина, Значение) * 3600;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти