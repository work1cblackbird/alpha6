
#Область ПрограммныйИнтерфейс

// Функция - Получить порядок элементов
//
// Параметры:
//  МассивЭлементов	 - Массив	 - Массив объектов
// 
// Возвращаемое значение:
//  Массив - Массив отсортированных элементов.
//
Функция ПолучитьПорядокЭлементов(МассивЭлементов) Экспорт
	
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат МассивЭлементов;
	КонецЕсли;
	
	// порядок авторабот
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаОбъектов.ОбъектПланирования КАК ОбъектПланирования,
		|	ТаблицаОбъектов.ТипЭлемента КАК ТипЭлемента,
		|	ТаблицаОбъектов.ИдентификаторПричиныОбращения КАК ИдентификаторПричиныОбращения
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ЕстьNull(ВЫБОР
		|		КОГДА ВТ.ТипЭлемента = 1
		|			ТОГДА ВЫРАЗИТЬ(ВТ.ОбъектПланирования КАК Справочник.ПричиныОбращений).ТипАвторабот.РеквизитДопУпорядочивания
		|		ИНАЧЕ ВЫРАЗИТЬ(ВТ.ОбъектПланирования КАК Справочник.Автоработы).Тип.РеквизитДопУпорядочивания
		|	КОНЕЦ,0) КАК Порядок,
		|	ВТ.ИдентификаторПричиныОбращения КАК ИдентификаторПричиныОбращения,
		|	ВТ.ТипЭлемента КАК ТипЭлемента
		|ИЗ
		|	ВТ КАК ВТ
		|	УПОРЯДОЧИТЬ ПО Порядок";
		
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторСтроки",Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15)));
	СписокТипов = Новый Массив;
    СписокТипов.Добавить(Тип("СправочникСсылка.ПричиныОбращений"));
    СписокТипов.Добавить(Тип("СправочникСсылка.Автоработы"));
	ТаблицаОбъектов.Колонки.Добавить("ОбъектПланирования", Новый ОписаниеТипов(СписокТипов));
	ТаблицаОбъектов.Колонки.Добавить("ТипЭлемента", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1)));
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторПричиныОбращения", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	
	Для каждого Элемент Из МассивЭлементов Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОбъектов.Добавить(),Элемент); 
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивЭлементов.Очистить(); 
	
	Пока Выборка.Следующий() Цикл
		СтурктураОбъекта = Новый Структура("ИдентификаторСтроки,ТипЭлемента,ИдентификаторПричиныОбращения");
		ЗаполнитьЗначенияСвойств(СтурктураОбъекта, Выборка); 
		МассивЭлементов.Добавить(СтурктураОбъекта);
	КонецЦикла;
	
	Возврат МассивЭлементов;
КонецФункции // ПолучитьПорядокЭлементов()

// Выполняет контроль пересечения интервалов планирования документов
//
// Параметры:
//  Интервалы - ТаблицаЗначений, ДанныеФормыКоллекция                    - Коллекция интервалов документа
//  Документ  - ДокументСсылка.ЗаявкаНаРемонт, ДокументСсылка.ЗаказНаряд - Проверяемый документ
// 
// Возвращаемое значение:
//  Структура - Структура разультата:
//  * Отказ - Булево -  Признак успешности действия
//  * ТекстОшибки - Строка - Текст ошибки
//  * Справшивать - Булево - Признак необходимости спрашивать пользователя.
//
Функция КонтрольПересеченияИнтервалов(Знач Интервалы, Документ) Экспорт
	
	Возврат ПланированиеРесурсов.КонтрольПересеченияИнтервалов(Интервалы, Документ);
	
КонецФункции // КонтрольПересеченияИнтервалов()

// Проверяет возможно ли планирование объекта на указанных ресурсах,
// тип объекта планирования должен содержаться в типе переданных ресурсов.
//
// Параметры:
//  Объект  - СправочникСсылка.ПричиныОбращения, СправочникСсылка.Автоработы - Проверяемый объект планирования.
//  ВыделенныеРесурсы - Массив - Массив со ссылками на проверяемые ресурсы планирования,
//                               ресурсы должны быть одного типа.
//
// Возвращаемое значение:
//   Булево - Истина если планирование доступно на всех ресурсах,
//            ложь если хотябы на одном планирование не возможно.
//
Функция ДоступноПланированиеОбъектаНаРесурсе(Объект, ВыделенныеРесурсы) Экспорт
	
	// получим тип объекта планирования
	Тип = ОбщегоНазначения.
		ЗначениеРеквизитаОбъекта(Объект, ?(ТипЗнч(Объект) = Тип("СправочникСсылка.Автоработы"), "Тип", "ТипАвторабот"));
	
	// получим типы ресурсов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ресурс,
	|	Сотрудники.ТипРесурса КАК ТипРесурса
	|ПОМЕСТИТЬ Ресурсы
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В (&Ресурсы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Цеха.Ссылка,
	|	Цеха.ТипРесурса
	|ИЗ
	|	Справочник.Цеха КАК Цеха
	|ГДЕ
	|	Цеха.Ссылка В(&Ресурсы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ресурсы.Ресурс КАК Ресурс,
	|	Ресурсы.ТипРесурса КАК ТипРесурса,
	|	ТипыРесурсовДоступныеТипыАвторабот.ТипАвтоработы КАК ТипАвтоработы
	|ИЗ
	|	Ресурсы КАК Ресурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыРесурсов.ДоступныеТипыАвторабот КАК ТипыРесурсовДоступныеТипыАвторабот
	|		ПО Ресурсы.ТипРесурса = ТипыРесурсовДоступныеТипыАвторабот.Ссылка
	|ГДЕ
	|	ТипыРесурсовДоступныеТипыАвторабот.ТипАвтоработы = &ТипАвтоработы");
	
	Запрос.УстановитьПараметр("Ресурсы", ВыделенныеРесурсы);
	Запрос.УстановитьПараметр("ТипАвтоработы", Тип);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() ИЛИ РезультатЗапроса.Выбрать().Количество() <> ВыделенныеРесурсы.Количество() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДоступноПланированиеОбъектаНаРесурсе()


#КонецОбласти