// Общий модуль "Управление списком документа (клиент)"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ОБЩЕГО НАЗНАЧЕНИЯ

// Обработчик команд печати комплектов
//
// Параметры:
//  ОписаниеКоманды - Структура - Параметры выбранной команды.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаКомандыПечатиКомплекта(ОписаниеКоманды) Экспорт
	
	Если СтрНайти(ОписаниеКоманды.Идентификатор, "НастройкаКомплекта") > 0 Тогда
		ОткрытьФорму(
			"Справочник.НастройкаПечатиКомплекта.ФормаСписка",
			Новый Структура("Документ", ОписаниеКоманды.ОбъектыПечати[0]),
			ОписаниеКоманды.Форма,
			, , , , 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	ИначеЕсли ЛЕВ(ОписаниеКоманды.Идентификатор, 15) = "ПечатьКомплекта" Тогда
		ОткрытьФорму(
			"Справочник.НастройкаПечатиКомплекта.Форма.ФормаНастройки",
			Новый Структура("ОбъектыПечати,КомандаИмя", ОписаниеКоманды.ОбъектыПечати, ОписаниеКоманды.Идентификатор),
			ОписаниеКоманды.Форма
		);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаКомандыПечатиКомплекта()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОСНОВНЫХ СОБЫТИЙ ФОРМЫ СПИСКА ДОКУМЕНТОВ

// Устарела. 
// Общий обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  Отказ - Булево           - Признак отказа от создания формы.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриОткрытии(Форма, Отказ = Ложь) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат Ложь;
	
	ЗащищенныеФункцииКлиент.НастроитьКоманднуюПанельФормы(Форма, Истина);
	
	// Произведем настройку основного динамического списка формы
	ЗащищенныеФункцииКлиент.НастроитьОсновнойДинамическийСписокФормы(Форма);
	
	// Подсистема "ОбменСКонтрагентами".
	Если НЕ Форма.Элементы.Найти("КомандыЭДО") = Неопределено Тогда
		ОбменСКонтрагентамиКлиент.ПриОткрытии(Форма);
	КонецЕсли;
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ПодключаемоеОборудование
	Если ЕстьРеквизитНаКлиенте(Форма, "ПоддерживаемыеТипыПодключаемогоОборудования") Тогда
		МенеджерОборудованияКлиент
		.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, Форма, "СканерШтрихкода, СчитывательМагнитныхКарт");
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПриОткрытии()

// Устарела. Будет удален в дальнейшем
// Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  Форма               - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяСобытия          - Строка           - Имя, идентифицирующее событие.
//  Параметр            - Произвольный     - Параметр сообщения.
//  Источник            - Произвольный     - Источник события.
//  ПараметрыДействия   - Структура        - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ПараметрыДействия = Неопределено) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат Ложь;
	
	// Обработаем в зависимости от вида события
	Если Источник = "ПодключаемоеОборудование" Тогда
		
		Если НЕ Форма.ВводДоступен() Тогда
			Возврат Ложь;
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПараметрыДействия.Вставить("КодКарты", Параметр[0]);
			Возврат Истина;
			
		ИначеЕсли ИмяСобытия = "ScanData" Тогда
			
			ШтрихКод = ?((Параметр.Количество() > 1) И (Параметр[1] <> Неопределено), Параметр[1][1], Параметр[0]);
			
			// Удалим из кода маркировки криптохвосты
			ШтрихКод = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(ШтрихКод);
			
			ПараметрыДействия.Вставить("ШтрихКод", ШтрихКод);
			Возврат Истина;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПослеУтвержденияДокументов"
		И Форма.Элементы.Список.ТекущаяСтрока = Параметр
		И (НЕ Форма.ИмяФормы = Источник)
		И (НЕ Форма.Элементы.Найти("ГруппаИзменениеСтатусаУтвержденияДокументов") = Неопределено) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	Если НЕ Форма.Элементы.Найти("КомандыЭДО") = Неопределено Тогда
		ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
		ПараметрыОповещенияЭДО.Форма = Форма;
		ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
		ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	КонецЕсли;
	// Конец подсистема "ОбменСКонтрагентами".
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Ложь;
	
КонецФункции // ОбработкаОповещения()

// Устарела. Будет удален.
// Общий обработчик события возникающего на клиенте при вызове метода ОповеститьОбАктивизации из формы-владельца.
//
// Параметры:
//  Форма          - УправляемаяФорма - Форма, в которой возникло событие.
//  АктивныйОбъект - Произвольный     - Активный объект.
//  Источник       - УправляемаяФорма - Форма, источник сообщения.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаАктивизации(Форма, АктивныйОбъект, Источник) Экспорт
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // СписокОбработкаАктивизации()

// Устарела. Будет удален.
// Общий обработчик события возникающего на клиенте при записи объекта в одной из подчиненных форм.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  НовыйОбъект          - Произвольный     - Добавленный в подчиненной форме объект.
//  Источник             - УправляемаяФорма - Форма, источник сообщения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаписиНового(Форма, НовыйОбъект, Источник, СтандартнаяОбработка = Истина) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат Ложь;
	
	// Позиционирование на новом документе в форме списка
	Если ЗначениеЗаполнено(НовыйОбъект) Тогда
		Форма.Элементы.Список.ТекущаяСтрока = НовыйОбъект;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // СписокОбработкаЗаписиНового()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДИНАМИЧЕСКОГО СПИСКА ФОРМЫ

// Устарела. Будет удален.
// Общий обработчик события возникающего при активизации строки списка.
//
// Параметры:
//  Форма      - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент    - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  ПоЗадержке - Булево           - Признак выполнения обработчика после окончания пользователем серфинга по списку.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция СписокПриАктивизацииСтроки(Форма, Элемент, ПоЗадержке = Ложь) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат Ложь;
	
	Если ПоЗадержке Тогда
		
		Если Форма.Элементы.Найти("ГруппаИзменениеСтатусаУтвержденияДокументов") <> Неопределено Тогда
			
			УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(Форма, Элемент.ТекущаяСтрока);
			
		КонецЕсли;
		
		Возврат Форма.Элементы.Найти("РасширеннаяИнформация") <> Неопределено
			ИЛИ (Форма.Элементы.Найти("ПодменюПечать") <> Неопределено
					И Форма.Элементы.ПодменюПечать.ПодчиненныеЭлементы.Количество() > 0);
		
	КонецЕсли;
	
	Если Форма.ТекущийЭлементСписка = Элемент.ТекущаяСтрока Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Форма.ТекущийЭлементСписка = Элемент.ТекущаяСтрока;
	Форма.ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.5, Истина);
	
	Возврат Ложь;
	
КонецФункции // СписокПриАктивизацииСтроки()

// Устарела. Будет удален.
// Общий обработчик события возникающего при активизации строки списка.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//
Процедура СписокПриАктивизацииЯчейки(Форма, Элемент) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат;
	
	// Произведем установку доступности пункта меню "Группировать по значению колонки"
	УправлениеДиалогомКлиент
	.ОбновитьДоступностьКомандГруппировкиСписка(Форма, Элемент.ТекущиеДанные, Элемент.ТекущийЭлемент);
	
	// Произведем установку доступности пункта меню "Поиск по текущему значению"
	УправлениеДиалогомКлиент
	.ОбновитьДоступностьКомандПоискаПоТекущемуЗначениюСписка(Форма, Элемент.ТекущиеДанные, Элемент.ТекущийЭлемент);
	
КонецПроцедуры // СписокПриАктивизацииЯчейки()

// Устарела. Будет удален.
// Общий обработчик события возникающего  перед началом добавления строки в  список.
//
// Параметры:
//  Форма       - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент     - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ       - Булево           - Признак отказа от действия.
//  Копирование - Булево           - Определяет режим копирования.
//  Родитель    - Ссылка           - Ссылка на элемент, который будет использован при добавлении в качестве родителя.
//  Группа      - Булево           - Признак добавления группы.
//  Параметр    - Произвольный     - Параметр команды, выполняемой при добавлении строки в таблицу.
//
Процедура СписокПередНачаломДобавления(Форма,
	Элемент,
	Отказ,
	Копирование,
	Родитель,
	Группа,
	Параметр = Неопределено) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат;
	
	Если Копирование Тогда
		КлючеваяОперация = "КопированиеДокумента" + СтрЗаменить(Форма.ПолноеИмяОбъекта, "Документ.", "");
	Иначе
		КлючеваяОперация = "СозданиеФормыДокумента" + СтрЗаменить(Форма.ПолноеИмяОбъекта, "Документ.", "");
	КонецЕсли;
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(, КлючеваяОперация);
	
КонецПроцедуры // СписокПередНачаломДобавления()

// Устарела. Будет удален.
// Общий обработчик события возникающего перед началом изменения списка.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево           - Признак отказа от действия.
//
Процедура СписокПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат;
	
	КлючеваяОперация = "ОткрытиеФормыДокумента" + СтрЗаменить(Форма.ПолноеИмяОбъекта, "Документ.", "");
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(, КлючеваяОперация);
	
КонецПроцедуры // СписокПередНачаломИзменения()

// Устарела. Будет удален.
// Общий обработчик события возникающего после удаления строки списка.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы     - Элемент управления, в котором возникло данное событие.
//
Процедура СписокПослеУдаления(Форма, Элемент) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПослеУдаления()

// Обработчик события возникающего на клиенте при двойном щелчке мыши (нажатии Enter) в ячейке списка.
//
// Параметры:
//  Элемент              - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  ВыбраннаяСтрока      - Ссылка       - Значение выбранной строки.
//  Поле                 - ПолеФормы    - Активное поле.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//  Связи           - СписокЗначений    - Список связи.
//
Процедура СвязиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Связи) Экспорт
	// TODO: Нужно реализовать в других структурах
	Возврат;
	
	СтандартнаяОбработка = Ложь;
	
	ПолученныйДокумент = Элемент.ТекущиеДанные.Значение;
	
	ПолноеИмя = УправлениеДиалогомВызовСервера.ПолучитьПолноеИмя(ПолученныйДокумент);
	
	Если ПолученныйДокумент <> Неопределено Тогда
		ТекИмяФормы = ПолноеИмя + ".ФормаОбъекта";
		
		СтруктураОткрытия = Новый Структура("Ключ", ПолученныйДокумент);
		ОткрытьФорму(ТекИмяФормы, СтруктураОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Форма         - УправляемаяФорма          - Форма, в которой возникло событие.
//  Команда       - КомандаФормы              - Команда, в которой возникло данное событие.
//  ТекущиеДанные - ДокументСсылка            - Ссылка, для которой выполняется обработка события.
//  Окно          - ОкноКлиентскогоПриложения - Содержит окно, в котором требуется открыть форму.
//  ПараметрыДействия - Структура                 - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ОбработкаКомандыФормы(Форма,
		Команда,
		ТекущиеДанные,
		Окно = Неопределено, 
		ПараметрыДействия = Неопределено) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат Ложь;
	
	// Получим признак существования текущей выделенной строки
	//@skip-check unknown-method-property
	ЕстьТекущаяСтрока = Не (
		ТекущиеДанные = Неопределено
		Или ЕстьРеквизитНаКлиенте(ТекущиеДанные, "ГруппировкаСтроки")
		И ЗначениеЗаполнено(ТекущиеДанные.ГруппировкаСтроки)
	);
	
	// Обработаем в зависимости от выбранной команды
	Если Команда.Имя = "ПоказатьРасширеннуюИнформацию" Тогда
		РасширеннаяИнформацияКлиент.ПоказатьРасширеннуюИнформацию(Форма);
		
	ИначеЕсли Команда.Имя = "ПисьмоВТехПоддержку" Тогда
		
		ВызватьИсключение "Необходимо переключить на команду";
		
	ИначеЕсли Команда.Имя = "ПодчиненныеДокументы" И ЕстьТекущаяСтрока Тогда
		
		ВызватьИсключение "Необходимо переключить на команду";
		
	ИначеЕсли Команда.Имя = "ПросмотрДвижений" И ЕстьТекущаяСтрока Тогда
		
		ВызватьИсключение "Необходимо переключить на команду";
		
	ИначеЕсли СтрНайти(Команда.Имя, "СоздатьПоПараметру") > 0 Тогда
		СоздатьДокументПоПараметру(Форма, Команда);
		
	ИначеЕсли Команда.Имя = "ОплатитьЧерезКассу" И ЕстьТекущаяСтрока Тогда
		
		ВызватьИсключение "Необходимо переключить на команду";
		
	ИначеЕсли ЛЕВ(Команда.Имя, 15) = "ПечатьКомплекта" И ЕстьТекущаяСтрока Тогда
		Если Форма.Элементы.Найти("Список") = Неопределено Тогда
			ПараметрыФормы = Новый Структура("Документ,КомандаИмя", ТекущиеДанные.Ссылка, Команда.Имя);
			ОткрытьФорму("Справочник.НастройкаПечатиКомплекта.Форма.ФормаНастройки", ПараметрыФормы, Форма);
		Иначе
			ОбъектыПечати = КомплектыПечатиКлиент.ОбъектыПечати(Форма.Элементы.Список);
			ПараметрыФормы = Новый Структура("ОбъектыПечати,КомандаИмя", ОбъектыПечати, Команда.Имя);
			ОткрытьФорму("Справочник.НастройкаПечатиКомплекта.Форма.ФормаНастройки", ПараметрыФормы, Форма);
		КонецЕсли;
	ИначеЕсли Лев(Команда.Имя, 21) = "УтверждениеДокументов"
		И Команда.Имя <> "УтверждениеДокументовСтатусИсторияДокументов"
		И ЕстьТекущаяСтрока Тогда
		
		// Для изменения статуса утверждения документа сразу уходим на сервер, историю продолжаем открывать на клиенте.
		Возврат Истина;
		
	ИначеЕсли (Команда.Имя = "Провести" ИЛИ Команда.Имя = "ОтменаПроведения") И ЕстьТекущаяСтрока Тогда
		
		Возврат Истина;
		
	ИначеЕсли Команда.Имя = "ПоказатьСвязи" Тогда
		// Определим новое значение статуса отображения расширенной информации
		ПоказатьСвязи = (НЕ Форма.Элементы.Связи.Видимость);
		
		// Произведем настройку параметров отображения полей расширенной информации
		Форма.Элементы.Связи        .Видимость = ПоказатьСвязи;
		Форма.Элементы.ПоказатьСвязи.Пометка   = ПоказатьСвязи;
		
		// Взведем признак необходимости выполнить сохранение настроек формы при закрытии
		Форма.СохраняемыеВНастройкахДанныеМодифицированы = Истина;
		
		// Обновим информации по строке
		Форма.ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.5, Истина);
		
		Возврат Истина;
		
	Иначе
		
		УправлениеДиалогомКлиент.ОбработкаКомандыФормы(Форма, Команда, ТекущиеДанные, Окно, ПараметрыДействия);
		Возврат ПараметрыДействия.Свойство("Результат")
			И Тип("Булево") = ТипЗнч(ПараметрыДействия.Результат)
			И ПараметрыДействия.Результат;
			
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаКомандыФормы()

// Общий обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат Ложь;
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	Возврат УправлениеДиалогомКлиент.ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры);
	
КонецФункции // ОбработкаРезультатаОповещения()

// Отображает результат выполнения действия.
//
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаРезультатаВыполненияДействия(Форма, ПараметрыДействия) Экспорт
	
	// TODO: Нужно реализовать в других структурах
	Возврат;
	
	// Обработаем в зависимости от параметров действия
	Если ПараметрыДействия.Свойство("ОбновитьНастройкиКоманднойПанели") Тогда
		
		ЗащищенныеФункцииКлиент.НастроитьКоманднуюПанельФормы(Форма, Истина);
		
	ИначеЕсли ПараметрыДействия.Свойство("ПечатьРеестра") Тогда
		
		ПараметрыДействия.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.ПечатьРеестра.Форма", ПараметрыДействия);
		
	КонецЕсли;
	
	УправлениеДиалогомКлиент.ПоказатьРезультатВыполнения(Форма, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Общий обработчик события возникающего при выборе пункта меню "СоздатьПоПараметру"
// в форме списка журналов документа.
//
// Параметры:
//  Форма         - УправляемаяФорма          - Форма, в которой возникло событие.
//  Команда       - КомандаФормы              - Команда, в которой возникло данное событие.
//
Процедура СоздатьДокументПоПараметру(Форма, Команда)
	
	ИмяДокумента = Прав(Команда.Имя, СтрДлина(Команда.Имя) - 18);
	
	СтруктураОтбора = Новый Структура;
	
	Для Каждого ЭлементНастройки Из Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
			Для Каждого ЭлементОтбора Из ЭлементНастройки.Элементы Цикл
				Если ЭлементОтбора.Использование Тогда
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						СтруктураОтбора.Вставить(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
						И ЭлементОтбора.ПравоеЗначение.Количество() = 1 Тогда
						СтруктураОтбора.Вставить(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", Параметры, Форма);
	
КонецПроцедуры // СоздатьДокументПоПараметру()


#КонецОбласти
