
#Область ПрограммныйИнтерфейс

// Получение коэффициента пересчета валют.
//
// Параметры:
//  Дата - Дата - Дата получения курсов валют.
// 
// Возвращаемое значение:
//  Число - Коэффициент для пересчета курсов валют.
//
Функция ПолучитьКоэффициентПересчетаВалют(Дата) Экспорт
	
	СтруктураУпр = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Дата);
	СтруктураРег = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Дата); 	
	КоэфПересчета = СтруктураУпр / СтруктураРег;
	Возврат КоэфПересчета;
	
КонецФункции // ПолучитьКоэффициентПересчетаВалют()

// Получает даты планируемого планирования
//
// Параметры:
//  Параметры - Структура - с ключами: "Периодичность", "ДатаИзПериода", "Действие".
//
// Возвращаемое значение:
//  ПредставлениеПериода - Строка - внешнее представление периода, заданного датами начала и окончания периода.  
//
Функция ПолучитьДатыПланируемогоПериода(Параметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		Параметры.Вставить("ДатаНачала", НачалоМесяца(Параметры.ДатаИзПериода));
		Параметры.Вставить("ДатаКонца",  КонецМесяца(Параметры.ДатаИзПериода));
		Возврат "";
	КонецЕсли;
	
	ТипПериода = Параметры.Периодичность;
	
	Знак = ПолучитьЗначениеПараметраСтруктуры(Параметры,"Действие",0);
	
	Если ТипПериода = Перечисления.ПериодичностьПланирования.Месяц Тогда
		
		ДатаКонца  = КонецМесяца(ДобавитьМесяц(Параметры.ДатаИзПериода  , Знак));
		ДатаНачала = НачалоМесяца(ДобавитьМесяц(Параметры.ДатаИзПериода , Знак));
		
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Квартал Тогда
		
		ДатаКонца  = КонецКвартала(ДобавитьМесяц(Параметры.ДатаИзПериода   , Знак*3));
		ДатаНачала =  НачалоКвартала(ДобавитьМесяц(Параметры.ДатаИзПериода , Знак*3));
		
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Год Тогда
		
		ДатаКонца  = КонецГода(ДобавитьМесяц(Параметры.ДатаИзПериода  , Знак*12));
		ДатаНачала = НачалоГода(ДобавитьМесяц(Параметры.ДатаИзПериода , Знак*12));
		
	Иначе
		
		ДатаКонца  = КонецДня(Параметры.ДатаИзПериода + 3600*24*Знак);
		ДатаНачала = НачалоДня(Параметры.ДатаИзПериода + 3600*24*Знак);
		
	КонецЕсли;
	
	Параметры.Вставить("ДатаНачала" , ДатаНачала);
	Параметры.Вставить("ДатаКонца"  , ДатаКонца);
	
	Возврат ПредставлениеПериода(ДатаНачала,ДатаКонца);
	
КонецФункции // плПолучитьДатыПланируемогоПериода()

// Формирует надпись типа цены
//
// Параметры:
//  Параметры - Структура - Структура с ключами: "ТипЦен", "КурсДокумента", "НадписьИнформацияОТипеЦен".
//
Процедура СформироватьНадписьТипаЦены(Параметры) Экспорт
	ТипЦен         = Параметры.ТипЦен;
	КурсДокумента  = Параметры.КурсДокумента;
	ЭлементНадпись = Параметры.НадписьИнформацияОТипеЦен;
	
	Если ТипЦен.ВВалютеУчета Тогда
		Текст = НСтр("ru = 'Тип цен:'") + " " + ТипЦен + "; ("  + НСтр("ru = 'В валюте учета номенклатуры'") + " )";
	Иначе
		ТипЦенВалютаЦены = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен);
		Текст = НСтр("ru = 'Тип цен:'") + " " + ТипЦен + "; " + НСтр("ru = 'Валюта:'") + " "+ ТипЦенВалютаЦены + " (" 
			+ ТипЦенВалютаЦены + "/" + Константы.ВалютаУправленческогоУчетаКомпании.Получить() + "=" + КурсДокумента+ ")";
	КонецЕсли;
	ЭлементНадпись.Видимость = Истина;
	ЭлементНадпись.Заголовок = Текст;
	
КонецПроцедуры // СформироватьНадписьТипаЦены()

// Функция возвращает представление периода
//
// Параметры:
//  Объект           - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Периодичность    - ПеречислениеСсылка.ПериодичностьПланирования - Периодичность планирования
//  ДатаПланирования - Дата - Дата планирования.
//
// Возвращаемое значение:
//  Строка - Представление периода.
//
Функция ВывестиПредставлениеПериода(Объект, Периодичность, ДатаПланирования) Экспорт
	
	ДатаНачала 	  = НачалоМесяца(ДатаПланирования);
	ДатаОкончания = КонецМесяца(ДатаПланирования);
	
	КоличествоПериодов   = Объект.КоличествоПериодов;
	КоличествоСезонов    = Объект.КоличествоСезонов;
	СмещениеПланирования = Объект.СмещениеПланирования;
	
	ФорматнаяСтрока = "";
	ПредставлениеПериода = "";
	Если Периодичность = Перечисления.ПериодичностьПланирования.Месяц Тогда
		ДатаОкончания = КонецМесяца(ДобавитьМесяц(ДатаПланирования, -СмещениеПланирования));
		ДатаНачала    = НачалоМесяца(ДобавитьМесяц(ДатаОкончания, -(КоличествоПериодов-1)));
		Если КоличествоСезонов > 1 Тогда
			ФорматнаяСтрока = "ДФ=MMMM";
		Иначе
			ФорматнаяСтрока = "ДФ='ММММ гггг ""г.""'";
		КонецЕсли;
	ИначеЕсли Периодичность = Перечисления.ПериодичностьПланирования.Квартал Тогда
		ДатаОкончания = КонецКвартала(ДобавитьМесяц(ДатаПланирования, -СмещениеПланирования*3));
		ДатаНачала    = НачалоКвартала(ДобавитьМесяц(ДатаОкончания, -(КоличествоПериодов-1)*3));
		Если КоличествоСезонов > 1 Тогда
			ФорматнаяСтрока = "ДФ='к ""квартал""'";
		Иначе
			ФорматнаяСтрока = "ДФ='к ""квартал"" гггг ""г.""'";
		КонецЕсли;
	ИначеЕсли Периодичность = Перечисления.ПериодичностьПланирования.Год Тогда		
		ДатаОкончания   = КонецГода(ДобавитьМесяц(ДатаПланирования, -СмещениеПланирования*12));
		ДатаНачала      = НачалоГода(ДобавитьМесяц(ДатаОкончания, -(КоличествоПериодов-1)*12));
		ФорматнаяСтрока = "ДФ='гггг ""г.""'";
	КонецЕсли;
	
	ПредставлениеПериода = "";
	
	Если КоличествоСезонов > 1 Тогда
		ГодПервогоСезона = Дата(Год(ДатаНачала)-(КоличествоСезонов-1),1,1);
		Если КоличествоПериодов = 1 Тогда
			ПредставлениеПериода = ПредставлениеПериода + "период "+Формат(ДатаНачала, ФорматнаяСтрока)+" сезонов "+Формат(ГодПервогоСезона, "ДФ=гггг")+" - "+Формат(ДатаОкончания, "ДФ=гггг")+" года";
		Иначе
			ПредставлениеПериода = ПредставлениеПериода + "период "+Формат(ДатаНачала, ФорматнаяСтрока)+" - "+Формат(ДатаОкончания, ФорматнаяСтрока)+" сезонов "+Формат(ГодПервогоСезона, "ДФ=гггг")+" - "+Формат(ДатаОкончания, "ДФ=гггг")+" года";
		КонецЕсли;
	Иначе
		Если КоличествоПериодов = 1 Тогда
			ПредставлениеПериода = ПредставлениеПериода + "период "+Формат(ДатаНачала, ФорматнаяСтрока);
		Иначе
			ПредставлениеПериода = ПредставлениеПериода + "период "+Формат(ДатаНачала, ФорматнаяСтрока)+" - "+Формат(ДатаОкончания, ФорматнаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
КонецФункции

// Проверяет правильность введенного подразделения хоз.операции.
//
// Параметры:
//  ХозОперация           - СправочникСсылка - "ХозОперации",
//  ПодразделениеКомпании - СправочникСсылка - "ПодразделенияКомпании".
//
// Возвращаемое значение:
//  Булево - если Ложь - для данного подразделения нельзя вводить данный вид бюджета.
//
Функция ПроверитьКорректностьВыбораПодразделенияИХозОперации(ХозОперация, ПодразделениеКомпании) Экспорт
	
	// сочетание: Подразделение+ХозОперация - должно присутствовать в рег.сведений.
	НаборЗаписей = РегистрыСведений.ПараметрыПланирования.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор["ПодразделениеКомпании"].Установить(ПодразделениеКомпании);
	НаборЗаписей.Отбор["ХозОперация"].Установить(ХозОперация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПроверитьКорректностьВыбораПодразделенияИХозОперации()

// Процедура проверки количества сезонов
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект формы, для которого выполняется проверка
//  Периодичность - ПеречислениеСсылка.ПериодичностьПланирования - Периодичность планирования.
//
Процедура ПроверкаКоличестваСезонов(Объект, Периодичность) Экспорт
	
	КоличествоПериодов = Объект.КоличествоПериодов;
	КоличествоСезонов = Объект.КоличествоСезонов;
	
	Если Периодичность=Перечисления.ПериодичностьПланирования.Месяц Тогда
		Если КоличествоПериодов>12 Тогда
			КоличествоСезонов = 1;
		КонецЕсли;
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Квартал Тогда
		Если КоличествоПериодов>4 Тогда
			КоличествоСезонов = 1;
		КонецЕсли;
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Год Тогда
		КоличествоСезонов = 1;
	КонецЕсли;
	
	Объект.КоличествоСезонов = КоличествоСезонов;
	
КонецПроцедуры

// Функция возвращает максимальное количество периодов
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//  Параметры   - Структура            - Содержит параметры для поиска
//  Группировка - Строка               - Описывает группировку полей запроса.
//
// Возвращаемое значение:
//  Число - Количество периодов.
//
Функция ПолучитьМаксимальноеКоличествоПериодов(Объект, Параметры, Группировка=Неопределено) Экспорт
	
	Периодичность    = Объект.Периодичность;
	НеУчитыватьПериодыБезДанных = Объект.НеУчитыватьПериодыБезДанных;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипАнализа) Тогда
		Объект.ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж;
	КонецЕсли;
	ТипАнализа = Объект.ТипАнализа;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Отбор = "";
	Если НеУчитыватьПериодыБезДанных И (Группировка<>Неопределено) Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ТаблицаДанных."+Группировка+",
		|	КОЛИЧЕСТВО(НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, МЕСЯЦ)) КАК КоличествоПериодов
		|ИЗ
		|	РегистрНакопления.ТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		| //Отборы
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных."+Группировка+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоПериодов УБЫВ";
		
		ПараметрыДляАнализаДат = Новый Структура;
		ПараметрыДляАнализаДат.Вставить("Периодичность", Периодичность);
		ПолучитьПериодыПланирования(Объект, ПараметрыДляАнализаДат);
		Отбор = Символы.ПС + ПараметрыДляАнализаДат.ТекстОтбора;
		Для Каждого ТекПараметр Из ПараметрыДляАнализаДат.СтруктураСезонов Цикл
			Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, МЕСЯЦ), НАЧАЛОПЕРИОДА(&ДатаОкончания, МЕСЯЦ), МЕСЯЦ)+1 КАК КоличествоПериодов
		|ИЗ
		|	РегистрНакопления.ТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		| //Отборы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДанных.Период"; 
		
		ДатаОкончания = ПолучитьДатыПоНастройкеПериода(Объект, Параметры).ДатаОкончания;
		Отбор = Символы.ПС + "ТаблицаДанных.Период <= &ДатаОкончания";
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	
	Отбор = Отбор+?(Параметры.Свойство("ОтборПоПодразделению"), Символы.ПС + " И "+Параметры.ОтборПоПодразделению, "");
	
	Если Параметры.Свойство("ДопОтборы") Тогда
		ДопОтборы = Параметры.ДопОтборы;
		Отбор = Отбор + Символы.ПС + "И " + ДопОтборы.ТекстОтбора;
		Для Каждого ТекПараметр Из ДопОтборы.Параметры Цикл
			Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//Отборы", Отбор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДанных", Параметры.ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МЕСЯЦ", Строка(Периодичность));	
	
	Если Параметры.Свойство("Подразделение") Тогда
		Запрос.УстановитьПараметр("Подразделение", 	  Параметры.Подразделение);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоПериодов;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьМаксимальноеКоличествоПериодов()

// Процедура производит поиск периодов планирования
//
// Параметры:
//	Объект    - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события
//	Параметры - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура ПолучитьПериодыПланирования(Объект, Параметры) Экспорт
	
	ГраницаСезонов		 = Объект.КоличествоСезонов-1;
	Периодичность		 = Объект.Периодичность;
	
	СтруктураПериода = ПолучитьДатыПоНастройкеПериода(Объект, Параметры);
	ДатаНачала 	  = СтруктураПериода.ДатаНачала;
	ДатаОкончания = СтруктураПериода.ДатаОкончания;
	
	НачалоПериода = Неопределено;
	КонецПериода = Неопределено;
	
	СтруктураСезонов = Новый Структура;
	ТекстОтбора = "";
	Для НомСезона=0 По ГраницаСезонов Цикл
		ВычитательГода = ГраницаСезонов-НомСезона;
		Если Периодичность=Перечисления.ПериодичностьПланирования.Месяц Тогда
			НачалоПериода = НачалоМесяца(Дата(Год(ДатаНачала)-ВычитательГода, Месяц(ДатаНачала),1));
			КонецПериода = КонецМесяца(Дата(Год(ДатаОкончания)-ВычитательГода, Месяц(ДатаОкончания),1));
		ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Квартал Тогда
			НачалоПериода = НачалоКвартала(Дата(Год(ДатаНачала)-ВычитательГода, Месяц(ДатаНачала),1));
			КонецПериода = КонецКвартала(Дата(Год(ДатаОкончания)-ВычитательГода, Месяц(ДатаОкончания),1));
		ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Год Тогда
			НачалоПериода = НачалоГода(ДатаНачала);
			КонецПериода = КонецГода(ДатаОкончания);
		КонецЕсли;
		СтруктураСезонов.Вставить("КонецПериода"+НомСезона, КонецПериода);
		СтруктураСезонов.Вставить("НачалоПериода"+НомСезона, НачалоПериода);
		ТекстОтбора = ТекстОтбора+Символы.ПС+?(ТекстОтбора=""," ("," ИЛИ ")+ "ТаблицаДанных.Период МЕЖДУ &НачалоПериода"+НомСезона+" И &КонецПериода"+НомСезона;
	КонецЦикла;
	ТекстОтбора = ТекстОтбора+")";
	
	Параметры.Вставить("СтруктураСезонов", СтруктураСезонов);
	Параметры.Вставить("ТекстОтбора", ТекстОтбора);
	
КонецПроцедуры

// Процедура добавляет отбор
//
// Параметры:
//	ДополнительныеПараметры - Структура - Структура, котороя содержит параметры отбора
//	ИмяОтбора - Строка - Строка, содержащая имя отбора
//	СтрокаУсловияОтбора - Строка - Строка, содержащая условия отбора
//	СтруктураОтбора - Структура - Структура, в которой хранятся отборы.
//
Процедура ДобавитьДополнительныйОтбор(ДополнительныеПараметры, ИмяОтбора, СтрокаУсловияОтбора, СтруктураОтбора) Экспорт
	
	Если ДополнительныеПараметры.Свойство(ИмяОтбора) Тогда
		ДопОтборы = ДополнительныеПараметры[ИмяОтбора];
		ДопОтборы.Вставить("ТекстОтбора", ДопОтборы.ТекстОтбора+Символы.ПС+"И "+СтрокаУсловияОтбора);
	Иначе
		ДополнительныеПараметры.Вставить(ИмяОтбора, Новый Структура("ТекстОтбора, Параметры", СтрокаУсловияОтбора, Новый Структура()));
	КонецЕсли;
	
	Параметры = ДополнительныеПараметры[ИмяОтбора].Параметры;
	Для Каждого ТекПараметр Из СтруктураОтбора Цикл
		Параметры.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьДополнительныйОтбор()

// Возвращает строку содержащую количество периодов
//
// Параметры:
//  Количество    - Число - количество периодов 
//  Периодичность - Перечисление - ПериодичностьПланирования.
//
// Возвращаемое значение:
//  Строка - количество периодов
//
Функция ВернутьСтрокуКоличествоПериодовДляАнализа(Количество, Периодичность) Экспорт
	
	Если Периодичность=Перечисления.ПериодичностьПланирования.Месяц Тогда
		стрВрем = ЧислоПрописью(Количество, , "месяц,месяца,месяцев,м,,,,,0");
		стрДляПоиска1 = "месяц";
		стрДляПоиска2 = "--";
		
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Квартал Тогда
		стрВрем = ЧислоПрописью(Количество, , "квартал,квартала,кварталов,м,,,,,0");
		стрДляПоиска1 = "квартал";
		стрДляПоиска2 = "--";
		
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Год Тогда
		стрВрем = ЧислоПрописью(Количество, , "год,года,лет,м,,,,,0");
		стрДляПоиска1 = "год";
		стрДляПоиска2 = "лет"; 
	КонецЕсли;
	
	Ответ = СтрНайти(стрВрем, стрДляПоиска1);
	Если Ответ=0 Тогда
		Ответ = СтрНайти(стрВрем, стрДляПоиска2);
	КонецЕсли;
	Возврат Сред(стрВрем, Ответ);
	
КонецФункции // ВернутьСтрокуКоличествоПериодовДляАнализа()

// Анализирует периодичность сценария планирования
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - в зависимости от периодичности и количества прошлых периодов возвращает Истина или Ложь.
//
Функция УчитыватьСезоннуюКомпоненту(Объект) Экспорт
	
	Если Объект.КоличествоСезонов>1 Тогда
		Возврат Истина;
	ИначеЕсли (Объект.СценарийПланирования.Периодичность = Перечисления.ПериодичностьПланирования.Месяц)
		И (Объект.КоличествоПериодов >= 24) Тогда
		Возврат Истина;
	ИначеЕсли (Объект.СценарийПланирования.Периодичность = Перечисления.ПериодичностьПланирования.Квартал)
		И (Объект.КоличествоПериодов >= 8) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // УчитыватьСезоннуюКомпоненту()

// ЗАПОЛНЕНИЕ ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА ПО ДЕРЕВУ ЗНАЧЕНИЙ

// Заполняет табличную часть документа
//
// Параметры:
//  Параметры - Структура - содержит параметры переданные для заполнения.
//
// Возвращаемое значение:
//  массивСообщений - массив - содержит сообщения о позициях, у которых не установлена цена.
//
Процедура ЗаполнитьТабличнуюЧасть(Параметры) Экспорт
	
	Товары                    = Параметры.ТаблЧасть;
	ДеревоЗначений            = Параметры.ДеревоЗначений;
	ДатаДокумента             = Параметры.ДатаДокумента;
	НеРассчитыватьКоличество  = Параметры.НеРассчитыватьКоличество;
	ПланированиеСебестоимости = Параметры.ПланированиеСебестоимости;
	ПоказательПланирования    = Параметры.ПоказательПланирования;
	СпособОкругления          = Параметры.СпособОкругления;
	ИмяПоляПриемника 		  = Параметры.ИмяПоляПриемника;
	ИмяПоляИсточника 		  = Параметры.ИмяПоляИсточника;
	
	// Очистим табличную часть документа
	Товары.Очистить();
	
	// Рассчитаем коэффициент пересчета из валюты Упр. в валюту Рег.
	КоэффициентПересчетаВалют = ПолучитьКоэффициентПересчетаВалют(ДатаДокумента);
	
	Если НеРассчитыватьКоличество Тогда
		Для Сч=1 По ДеревоЗначений.Строки.Количество()-1 Цикл
			ТекСтрока = ДеревоЗначений.Строки[Сч];
			Если ТекСтрока.ПрогнозноеЗначение>0 Тогда 
				НовСтрока = Товары.Добавить();
				НовСтрока[ИмяПоляПриемника]	= ТекСтрока[ИмяПоляИсточника];
				НовСтрока.СуммаВсегоУпр 	= ТекСтрока.ПрогнозноеЗначение;
				НовСтрока.СуммаНДС      	= НовСтрока.СуммаВсегоУпр * КоэффициентПересчетаВалют * ТекСтрока.Ставка/100;
				
				// Теперь себестоимость  			
				Если ПланированиеСебестоимости Тогда
					НовСтрока.СебестоимостьУпр = НовСтрока.СуммаВсегоУпр / ТекСтрока.СрЦенаЗаПериод * ТекСтрока.НормативнаяЦена;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Начнем заполнение
		Для Сч=1 По ДеревоЗначений.Строки.Количество()-1 Цикл
			ТекСтрока = ДеревоЗначений.Строки[Сч];
			НовСтрока                   = Товары.Добавить();
			НовСтрока[ИмяПоляПриемника] = ТекСтрока[ИмяПоляИсточника];
			НовСтрока.Цена              = ТекСтрока.Цена;
			
			Если НовСтрока.Цена = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Для позиции: <""%1""> не установлена цена. Цена рассчитана как средняя цена за период'"),
						ТекСтрока.Представление
					)
				);
				НовСтрока.Цена = ТекСтрока.СрЦенаЗаПериод;
			КонецЕсли;
			
			Если НовСтрока.Цена=0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Показатель должен быть не меньше нуля.
			ТекСтрока.ПрогнозноеЗначение = Макс(0, ТекСтрока.ПрогнозноеЗначение);
			Если ПоказательПланирования Тогда
				НовСтрока.Количество = ТекСтрока.ПрогнозноеЗначение;
			Иначе
				НовСтрока.Количество = ТекСтрока.ПрогнозноеЗначение / НовСтрока.Цена;
			КонецЕсли;
			
			ТекСпособОкругления = Макс(СпособОкругления, Число(Не ТекСтрока.Весовой));
			Если ТекСпособОкругления = 1 Тогда
				НовСтрока.Количество = Окр(НовСтрока.Количество, 0, 1);
			ИначеЕсли ТекСпособОкругления = 2 Тогда
				НовСтрока.Количество = Окр(НовСтрока.Количество+0.5, 0, 0);
			ИначеЕсли ТекСпособОкругления = 3 Тогда
				НовСтрока.Количество = Цел(НовСтрока.Количество);
			КонецЕсли; 
			
			НовСтрока.СуммаВсегоУпр = НовСтрока.Количество * НовСтрока.Цена;
			
			НовСтрока.СуммаНДС = НовСтрока.СуммаВсегоУпр  * КоэффициентПересчетаВалют * ТекСтрока.Ставка/100;
			НовСтрока.Ставка   =  ТекСтрока.Ставка;
			
			// Себестоимость
			Если ПланированиеСебестоимости Тогда
				НовСтрока.НормативнаяЦена  = ТекСтрока.НормативнаяЦена;
				НовСтрока.СебестоимостьУпр = НовСтрока.НормативнаяЦена * НовСтрока.Количество;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

/////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ПО ДОКУМЕНТУ ОСНОВАНИЮ

// Распределяет суммы по номенклатуре
//
// Параметры:
//  Параметры - Структура - содержит параметры для распределения.
//
Процедура РаспределитьСуммыКатегорийПоНоменклатуре(Параметры) Экспорт
	
	ДеревоЗначений                   = Параметры.ДеревоЗначений;
	ДатаДокумента                    = Параметры.ДатаДокумента;
	МетодыРаспределенияКатегорий     = Параметры.МетодыРаспределенияКатегорий;
	ПараметрУправленияРаспределением = Параметры.ПараметрУправленияРаспределением;
	ИмяТабличнойЧасти                = Параметры.ИмяТабличнойЧасти;
	ЕстьСебестоимостьУпр             = Параметры.ЕстьСебестоимостьУпр;
	
	ПараметрыРаспределения = Новый Структура;
	ПараметрыРаспределения.Вставить("МетодыРаспределенияКатегорий"    , МетодыРаспределенияКатегорий);
	ПараметрыРаспределения.Вставить("ПараметрУправленияРаспределением", ПараметрУправленияРаспределением);
	ПараметрыРаспределения.Вставить("КоэфПересчета",                    ПолучитьКоэффициентПересчетаВалют(ДатаДокумента));
	ПараметрыРаспределения.Вставить("ИмяТабличнойЧасти",                ИмяТабличнойЧасти);
	ПараметрыРаспределения.Вставить("ЕстьВесовой",                      ДеревоЗначений.Колонки.Найти("Весовой")<>Неопределено);
	ПараметрыРаспределения.Вставить("ЕстьСебестоимостьУпр",             ЕстьСебестоимостьУпр);
	
	Для каждого ТекущаяСтрока Из ДеревоЗначений.Строки Цикл
		ПараметрыРаспределения.Вставить("СтрокаТипНоменклатуры", ТекущаяСтрока);
		РаспределитьВПределахТипаНоменклатуры(ПараметрыРаспределения);
	КонецЦикла;
	
КонецПроцедуры // РаспределитьСуммыКатегорийПоНоменклатуре()

// Распределяет суммы по в пределах типа номенклатуры
//
// Параметры:
//  Параметры - Структура - содержит параметры для распределения.
//
Процедура РаспределитьВПределахТипаНоменклатуры(Параметры) Экспорт
	
	СтрокаТипНоменклатуры            = Параметры.СтрокаТипНоменклатуры;
	Метод                            = Параметры.МетодыРаспределенияКатегорий;
	ПараметрУправленияРаспределением = Параметры.ПараметрУправленияРаспределением;
	КоэфПересчета                    = Параметры.КоэфПересчета;
	ИмяТабличнойЧасти                = Параметры.ИмяТабличнойЧасти;
	ЕстьВесовой                      = Параметры.ЕстьВесовой;
	ЕстьСебестоимостьУпр             = Параметры.ЕстьСебестоимостьУпр;
	
	Если Метод = Перечисления.МетодыРаспределенияКатегорий.ПоКоличеству Тогда
		Итог = СтрокаТипНоменклатуры.Строки.Итог("Количество");
		Если Итог = 0 Тогда
			Возврат;
		КонецЕсли;
		Для каждого стр Из СтрокаТипНоменклатуры.Строки Цикл
			стр.СуммаВсегоУпрНеРаспред = СтрокаТипНоменклатуры.СуммаВсегоУпр * стр.Количество / Итог;
		КонецЦикла;
	ИначеЕсли Метод=Перечисления.МетодыРаспределенияКатегорий.ПоСумме ИЛИ (Метод=Перечисления.МетодыРаспределенияКатегорий.ПоМаржинальнойПрибыли И ИмяТабличнойЧасти = "Услуги") Тогда
		Итог = СтрокаТипНоменклатуры.Строки.Итог("СуммаВсегоУпрНеРаспред");
		Если Итог=0 Тогда
			Возврат;
		КонецЕсли;
		Для каждого стр Из СтрокаТипНоменклатуры.Строки Цикл
			стр.СуммаВсегоУпрНеРаспред = СтрокаТипНоменклатуры.СуммаВсегоУпр * стр.СуммаВсегоУпрНеРаспред / Итог;
		КонецЦикла;
	ИначеЕсли Метод=Перечисления.МетодыРаспределенияКатегорий.ПоМаржинальнойПрибыли И ИмяТабличнойЧасти = "Товары" Тогда
		// тут более сложно
		
		Итог = СтрокаТипНоменклатуры.Строки.Итог("СуммаВсегоУпрНеРаспред")-СтрокаТипНоменклатуры.Строки.Итог("СебестоимостьУпр");
		
		Если Итог=0 Тогда
			Возврат;
		КонецЕсли;
		Для каждого стр Из СтрокаТипНоменклатуры.Строки Цикл
			стр.СуммаВсегоУпрНеРаспред = СтрокаТипНоменклатуры.СуммаВсегоУпр * (стр.СуммаВсегоУпрНеРаспред-стр.СебестоимостьУпр) / Итог;
		КонецЦикла;
		
	КонецЕсли;
	
	// Теперь распределение
	
	ПереходящаяСумма       = 0;
	СтараяПереходящаяСумма = 0;
	ПризнакИзменения       = Ложь;
	
	Пока Не ПризнакИзменения Цикл
		ПризнакИзменения = Истина;
		
		Для каждого Стр Из СтрокаТипНоменклатуры.Строки Цикл
			
			Если (Стр.Цена=0) ИЛИ (Стр.Количество=0) ИЛИ (Стр.СуммаВсегоУпрНеРаспред=0) Тогда
				Стр.СуммаВсегоУпрНеРаспред = 0;
				Продолжить;
			КонецЕсли;
			
			СтараяСумма = Стр.Количество * Стр.Цена;
			
			Если ПараметрУправленияРаспределением Тогда
				// Управляем ценой
				Стр.Цена = Стр.СуммаВсегоУпрНеРаспред / Стр.Количество;
			Иначе
				// Придерживаемся принципа, что количество должно быть целым числом для не весового товара.
				Если ЕстьВесовой И Стр.Весовой Тогда
					НовоеКоличество  = Окр( (Стр.СуммаВсегоУпрНеРаспред+ПереходящаяСумма)/Стр.Цена, 2);
					ПереходящаяСумма = 0;
				Иначе
					НовоеКоличество=Цел( (Стр.СуммаВсегоУпрНеРаспред+ПереходящаяСумма)/Стр.Цена );
					Если НовоеКоличество<0 Тогда
						НовоеКоличество = 0;
					КонецЕсли;
					ПереходящаяСумма = Стр.СуммаВсегоУпрНеРаспред + ПереходящаяСумма - НовоеКоличество*Стр.Цена; 
				КонецЕсли;
				
				Стр.Количество = НовоеКоличество;
			КонецЕсли;
			
			Стр.СуммаВсегоУпрНеРаспред = Стр.Количество * Стр.Цена;
			Стр.СуммаНДС               = Стр.СуммаВсегоУпрНеРаспред * КоэфПересчета * Стр.Ставка / 100;
			Коэффициент                = Стр.СуммаВсегоУпрНеРаспред / СтараяСумма;
			
			Если ЕстьСебестоимостьУпр Тогда
				Стр.СебестоимостьУпр = Стр.СебестоимостьУпр * Коэффициент;
			КонецЕсли;
		КонецЦикла;
		
		Если СтараяПереходящаяСумма<>ПереходящаяСумма Тогда
			ПризнакИзменения       = Ложь;
			СтараяПереходящаяСумма = ПереходящаяСумма;
		Иначе
			ПризнакИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры // РаспределитьВПределахТипаНоменклатуры()

// Заполняет табличную часть по дереву значений
//
// Параметры:
//  Параметры - Структура - содержит параметры для заполнения.
//
Процедура ЗаполнитьТабличнуюЧастьПоДеревуЗначений(Параметры) Экспорт
	
	ТабличнаяЧасть      = Параметры.ТабличнаяЧасть;
	ДеревоЗначений      = Параметры.ДеревоЗначений;
	ДвухУровневоеДерево = Параметры.ДвухУровневоеДерево;
	
	СпособУчетаСкладскихОстатков = "";
	ДатаДокумента                = "";
	УчетСкладскихОстатков        = Параметры.Свойство("СпособУчетаОстатков", СпособУчетаСкладскихОстатков);
	Параметры.Свойство("ДатаДокумента", ДатаДокумента);
	
	ИмяПоляПриемника = Параметры.ИмяПоляПриемника;
	ИмяПоляИсточника = Параметры.ИмяПоляИсточника;
	
	// Очищаем табличную часть документа
	ТабличнаяЧасть.Очистить();
	
	// Создаем пустую копию таблицы
	Копия = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		Копия.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	Копия.Колонки[ИмяПоляИсточника].Имя = ИмяПоляПриемника;
	
	// Найдем коэффициент пересчета валют
	КоэффициентПересчета = ПолучитьКоэффициентПересчетаВалют(ДатаДокумента);
	
	// Копируем все в табличную часть документа
	Если ДвухУровневоеДерево Тогда
		// Подменим имя колонки суммы
		ДеревоЗначений.Колонки.Удалить("СуммаВсегоУпр");
		ДеревоЗначений.Колонки.СуммаВсегоУпрНеРаспред.Имя = "СуммаВсегоУпр"; 
		Для Каждого стрКатегория Из ДеревоЗначений.Строки Цикл
			Для Каждого стрНоменклатура Из стрКатегория.Строки Цикл
				НовСтрока = Копия.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, стрНоменклатура);
				
				// Если нужно учтем резервные остатки на складах
				Если УчетСкладскихОстатков Тогда
					Если СпособУчетаСкладскихОстатков<>Перечисления.СпособыУчетаОстатков.НеУчитывать Тогда
						Если СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.ОграничиватьМинОстаток Тогда
							НовСтрока.Количество = Макс(стрНоменклатура.Количество, стрНоменклатура.МинОстаток);	
						ИначеЕсли СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.ДобавлятьСтратегическийОстаток Тогда
							НовСтрока.Количество = стрНоменклатура.Количество + стрНоменклатура.МинОстаток;
						ИначеЕсли СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.КоличествоВИнтервале Тогда
							НовСтрока.Количество = Макс(стрНоменклатура.Количество, стрНоменклатура.МинОстаток);
							НовСтрока.Количество = Мин(НовСтрока.Количество, стрНоменклатура.МаксОстаток);
						КонецЕсли;
						// Нужно пересчитать
						НовСтрока.СуммаВсегоУпр = НовСтрока.Количество*НовСтрока.Цена;
						НовСтрока.СуммаНДС      = НовСтрока.СуммаВсегоУпр * КоэффициентПересчета;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		// Подменим имя колонки суммы
		ДеревоЗначений.Колонки.Удалить("СуммаВсегоУпр");
		ДеревоЗначений.Колонки.СуммаВсегоУпрНеРаспред.Имя = "СуммаВсегоУпр";
		Для каждого стрНоменклатура Из ДеревоЗначений.Строки Цикл  
			НовСтрока = Копия.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, стрНоменклатура);
		
			// Если нужно учтем резервные остатки на складах
			Если УчетСкладскихОстатков Тогда
				Если СпособУчетаСкладскихОстатков<>Перечисления.СпособыУчетаОстатков.НеУчитывать Тогда
					Если СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.ОграничиватьМинОстаток Тогда
						НовСтрока.Количество = Макс(стрНоменклатура.Количество, стрНоменклатура.МинОстаток);	
					ИначеЕсли СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.ДобавлятьСтратегическийОстаток Тогда
						НовСтрока.Количество = стрНоменклатура.Количество + стрНоменклатура.МинОстаток;
					ИначеЕсли СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.КоличествоВИнтервале Тогда
						НовСтрока.Количество = Макс(стрНоменклатура.Количество, стрНоменклатура.МинОстаток);
						НовСтрока.Количество = Мин(НовСтрока.Количество, стрНоменклатура.МаксОстаток);
					КонецЕсли;
					// Нужно пересчитать
					НовСтрока.СуммаВсегоУпр = НовСтрока.Количество*НовСтрока.Цена;
					НовСтрока.СуммаНДС      = НовСтрока.СуммаВсегоУпр * КоэффициентПересчета;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Копия.Сортировать("Представление");
	ТабличнаяЧасть.Загрузить(Копия);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДеревуЗначений()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает структуру с датами начала и конца периода планирования
// Параметры:
//	Объект - Объект формы.
//
Функция ПолучитьДатыПоНастройкеПериода(Объект, Параметры)
	
	Периодичность 	  	 = Объект.Периодичность;
	ДатаПланирования  	 = Объект.ДатаПланирования;
	СмещениеПланирования = Объект.СмещениеПланирования;
	КоличествоПериодов	 = Объект.КоличествоПериодов;
	ДатаНачала 			 = НачалоМесяца(ДатаПланирования);
	ДатаОкончания 		 = КонецМесяца(ДатаПланирования);
	
	Если Периодичность=Перечисления.ПериодичностьПланирования.Месяц Тогда
		ДатаОкончания = КонецМесяца(ДобавитьМесяц(ДатаПланирования, -СмещениеПланирования));
		ДатаНачала = НачалоМесяца(ДобавитьМесяц(ДатаОкончания, -(КоличествоПериодов-1)));
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Квартал Тогда
		ДатаОкончания = КонецКвартала(ДобавитьМесяц(ДатаПланирования, -СмещениеПланирования*3));
		ДатаНачала = НачалоКвартала(ДобавитьМесяц(ДатаОкончания, -(КоличествоПериодов-1)*3));
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Год Тогда		
		ДатаОкончания = КонецГода(ДобавитьМесяц(ДатаПланирования, -СмещениеПланирования*12));
		ДатаНачала = НачалоГода(ДобавитьМесяц(ДатаОкончания, -(КоличествоПериодов-1)*12));
	КонецЕсли;
	
	Возврат (Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания));
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// НАИВНОЕ ПРОГНОЗИРОВАНИЕ

// Функция производит обработку наивного прогнозирования
// Параметры:
//	Параметры - параметры прогнозирования
//	СтруктураПолей - структура полей таблицы
//	МенеджерДанныхРегистра - менеджер данных регистра
// Возвращает полученную тз.
//
Функция ОбработатьРезультатНаивногоПрогнозирования(Параметры, СтруктураПолей, МенеджерДанныхРегистра) Экспорт
	
	ЕстьКоличество = СтруктураПолей.Свойство("Количество");
	УчитыватьСебестоимость = СтруктураПолей.Свойство("СебестоимостьУпр");
	
	СпособУчетаСкладскихОстатков = Неопределено;
	УчетСкладскихОстатков  = Параметры.Свойство("СпособУчетаСкладскихОстатков", СпособУчетаСкладскихОстатков);
	Если УчетСкладскихОстатков Тогда
		Если СпособУчетаСкладскихОстатков = Перечисления.СпособыУчетаОстатков.НеУчитывать Тогда
			УчетСкладскихОстатков = Ложь;
		КонецЕсли;
	КонецЕсли;
	СтрокиВыборки = "";
	СтрокиГруппировок = "";
	Для Каждого ТекПоле Из СтруктураПолей.Поля Цикл
		СтрокиГруппировок = СтрокиГруппировок + "," + Символы.ПС + "ТаблицаРегистра." + ТекПоле.Ключ;
		СтрокиВыборки = СтрокиВыборки + "," + Символы.ПС + "ТаблицаРегистра." + ТекПоле.Ключ + " КАК " + ТекПоле.Ключ;
	КонецЦикла;
	
	// Если бюджет по планируемым данным по категориям - ставку ндс не выбираем.
	ЕстьСтавка = ЕстьКоличество ИЛИ СтруктураПолей.Свойство("ТипНоменклатуры"); 
	СтрокаСтавка1 = ?(ЕстьСтавка, " ТаблицаРегистра.Ставка КАК Ставка, ", "");
	СтрокаСтавка2 = ?(ЕстьСтавка, " ТаблицаРегистра.Ставка, ", "");
	НеУчитыватьПериодыБезДанныхТекст = ?(Параметры.НеУчитыватьПериодыБезДанных, "/КОЛИЧЕСТВО(ТаблицаРегистра.Период)", "");
	ЕстьКоличествоТекст = ?(ЕстьКоличество, ",
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаРегистра.Количество <> 0
	|			ТОГДА ТаблицаРегистра.СебестоимостьУпр / ТаблицаРегистра.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК НормативнаяЦена", "");
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаРегистра.Представление КАК Представление,
	|   " + СтрокаСтавка1 + "
	|   ЛОЖЬ КАК Удалить,
	|	СУММА(ТаблицаРегистра.СуммаНДС) * &Коэффициент" + НеУчитыватьПериодыБезДанныхТекст + " КАК СуммаНДС,
	|	СУММА(ТаблицаРегистра.СуммаУпр) * &Коэффициент" + НеУчитыватьПериодыБезДанныхТекст 
	+ " КАК СуммаВсегоУпр" + ?(ЕстьКоличество,",
	|	СУММА(ТаблицаРегистра.Количество) * &Коэффициент" + НеУчитыватьПериодыБезДанныхТекст + " КАК Количество,
	|	СРЕДНЕЕ(ТаблицаРегистра.Цена) КАК Цена,
	|	СУММА(ВЫБОР КОГДА ТаблицаРегистра.Количество<>0 ТОГДА
	|   	ВЫРАЗИТЬ(ТаблицаРегистра.СуммаУпр / ТаблицаРегистра.Количество КАК ЧИСЛО(15,2))
	|	ИНАЧЕ
	|       0
	|	КОНЕЦ) КАК СрЦенаЗаПериод,
	|   ТаблицаРегистра.СпособОкругления КАК СпособОкругления", "") + ?(УчитыватьСебестоимость, ",
	|	СУММА(ТаблицаРегистра.СебестоимостьУпр) * &Коэффициент" + НеУчитыватьПериодыБезДанныхТекст + " КАК СебестоимостьУпр" + ЕстьКоличествоТекст, "") + ?(УчетСкладскихОстатков,",
	|	МИНИМУМ(ТаблицаРегистра.МинОстаток) КАК МинОстаток,
	|	МАКСИМУМ(ТаблицаРегистра.МаксОстаток) КАК МаксОстаток", "") + СтрокиВыборки + "
	|ИЗ
	|	ТаблицаРегистра КАК ТаблицаРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	" + СтрокаСтавка2 + "
	|	ТаблицаРегистра.Представление,
	|	ТаблицаРегистра.СпособОкругления" + СтрокиГруппировок + "
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ТаблицаРегистра.Представление";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерДанныхРегистра;
	
	Коэффициент = Параметры.КоэффициентРостаПродаж * ?(Параметры.НеУчитыватьПериодыБезДанных, Параметры.КоэффициентСезонности, Параметры.КоэффициентСезонности/Параметры.КоличествоПрошлыхПериодов);
	Запрос.УстановитьПараметр("Коэффициент", Коэффициент);
	Результат = Запрос.Выполнить().Выгрузить();
	
	МенеджерДанныхРегистра.Закрыть();
	
	// Если нет количества, сразу вернем результат
	Если Не ЕстьКоличество Тогда
		Возврат Результат;
	КонецЕсли;
	
	КоэффициентПересчета = ПолучитьКоэффициентПересчетаВалют(Параметры.ДатаДокумента);
	Для каждого стр Из Результат Цикл
			Если стр.Цена=0 Тогда
				стр.Цена = стр.СрЦенаЗаПериод;
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Для позиции: <""%1""> не установлена цена. Цена рассчитана как средняя цена за период'"),
						СокрЛП(стр.Представление)
					)
				);
			КонецЕсли;
			Если Не Параметры.ПоКоличеству Тогда
				стр.Количество = ?(стр.Цена=0, 0, стр.СуммаВсегоУпр / стр.Цена);
				стр.Количество = ?(стр.Количество<0, -стр.Количество, стр.Количество);
			КонецЕсли;
			
			Если стр.СпособОкругления = 1 Тогда
				стр.Количество = Окр(стр.Количество, 0, 1);
			ИначеЕсли стр.СпособОкругления = 2 Тогда
				стр.Количество = Окр(стр.Количество+0.5, 0, 0);
			ИначеЕсли стр.СпособОкругления = 3 Тогда
				стр.Количество = Цел(стр.Количество);
			КонецЕсли; 
			
			// Если нужно учтем резервные остатки на складах
			Если УчетСкладскихОстатков Тогда
				Если СпособУчетаСкладскихОстатков<>Перечисления.СпособыУчетаОстатков.НеУчитывать Тогда
					Если СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.ОграничиватьМинОстаток Тогда
						стр.Количество = Макс(стр.Количество, стр.МинОстаток);
					ИначеЕсли СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.ДобавлятьСтратегическийОстаток Тогда
						стр.Количество = стр.Количество + стр.МинОстаток;
					ИначеЕсли СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.КоличествоВИнтервале Тогда
						стр.Количество = Макс(стр.Количество, стр.МинОстаток);
						стр.Количество = Мин(стр.Количество, стр.МаксОстаток);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			стр.СуммаВсегоУпр = стр.Количество * стр.Цена;
			
			Если УчитыватьСебестоимость Тогда
				стр.НормативнаяЦена = ?(стр.НормативнаяЦена<0, 0, стр.НормативнаяЦена);
				стр.СебестоимостьУпр = стр.Количество * стр.НормативнаяЦена;
			КонецЕсли;
			
			// НДС посчитаем 
			стр.СуммаНДС = стр.СуммаВсегоУпр * КоэффициентПересчета*стр.Ставка/100;	

			Если стр.Количество=0 Тогда
				стр.Удалить = Истина;
			КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Удалить", Истина);
	Массив = Результат.НайтиСтроки(СтруктураПоиска);
	Для Сч=0 По Массив.Количество()-1 Цикл
		Результат.Удалить(Массив[Сч]);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////
// ПРОГНОЗИРОВАНИЕ МАТЕМАТИЧЕСКИМИ МЕТОДАМИ

// Функция формирует дерево данных
// Параметры:
//	Объект - Объект формы
//	Параметры - Структура параметров
//	СтруктураПолей - Структура полей
//	МенеджерДанныхРегистра - Менеджер данных регистра.
//
Функция ПолучитьДеревоДанных(Объект, Параметры, СтруктураПолей, МенеджерДанныхРегистра) Экспорт
	
	ЕстьЦена = СтруктураПолей.Свойство("Цена");
	ЕстьСебестоимость = СтруктураПолей.Свойство("СебестоимостьУпр");
	Измерение = СтруктураПолей.Измерение;
	ПоКоличеству = Объект.ПоказательПланирования;
	СпособУчетаСкладскихОстатков = Неопределено;
	УчетСкладскихОстатков  = Параметры.Свойство("СпособУчетаСкладскихОстатков", СпособУчетаСкладскихОстатков);
	Если УчетСкладскихОстатков Тогда
		Если СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.НеУчитывать Тогда
			УчетСкладскихОстатков = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиВыборки = "";
	СтрокиИтогов  = "";
	Если СтруктураПолей.Свойство("Поля") Тогда
		Для Каждого ТекПоле Из СтруктураПолей.Поля Цикл
			СтрокиВыборки = СтрокиВыборки + "," + Символы.ПС+"ТаблицаРегистра."+ТекПоле.Ключ+" КАК "+ТекПоле.Ключ;
			СтрокиИтогов  = СтрокиИтогов + "," + Символы.ПС+"МАКСИМУМ("+ТекПоле.Ключ+")";
		КонецЦикла;
	КонецЕсли;
	ДеревоЗначений	 = Параметры.ДеревоЗначений;
	Периодичность 	 = Параметры.Периодичность;
	ДатаПланирования = Параметры.ДатаПланирования;
	НеУчитыватьПериодыБезДанных = Параметры.НеУчитыватьПериодыБезДанных;
	
	ЕстьДополнения = Параметры.Свойство("ТекстЗапросаДополнения");
	ПериодКакКоличествоТекст = ?(Параметры.ПериодКакКоличество, ",
	|	СУММА(СебестоимостьУпр)/КОЛИЧЕСТВО(Период)", ",
	|	ВЫБОР КОГДА ЕСТЬNULL(СУММА(Количество), 0) = 0 ТОГДА
	|		0
	|	ИНАЧЕ
	|		СУММА(СебестоимостьУпр)/СУММА(Количество)
	|	КОНЕЦ");	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ?(ЕстьДополнения, "ТаблицаДополнения.", "ТаблицаРегистра.") + Измерение + " КАК " + Измерение + ",
	|	" + ?(ЕстьДополнения, "ТаблицаДополнения.", "ТаблицаРегистра.") + "Представление КАК Представление,
	|   ТаблицаРегистра.Ставка КАК Ставка,
	|	ЕСТЬNULL(ТаблицаРегистра.Период, &ДатаНачала) КАК Период,
	|	ТаблицаРегистра.Показатель КАК Показатель,
	|	ТаблицаРегистра.СуммаУпр КАК СуммаУпр, " + ?(ЕстьСебестоимость,"
	|	ТаблицаРегистра.СебестоимостьУпр КАК СебестоимостьУпр,", "") + "
	|	ТаблицаРегистра.Количество КАК Количество," + ?(ЕстьЦена, "
	|	ТаблицаРегистра.Цена КАК Цена,", "") + "
	|	0 КАК СрЦенаЗаПериод,
	|	0 КАК НормативнаяЦена" + ?(УчетСкладскихОстатков, ",
	|	ТаблицаРегистра.МинОстаток КАК МинОстаток,
	|	ТаблицаРегистра.МаксОстаток КАК МаксОстаток", "") + СтрокиВыборки + "
	
	|ИЗ "+ ?(ЕстьДополнения, "
	|	"+ Параметры.ТекстЗапросаДополнения, "ТаблицаРегистра КАК ТаблицаРегистра") + "
	|ИТОГИ
	|	СУММА(Показатель),
	|	МАКСИМУМ(Представление),
	|	МАКСИМУМ(Ставка)," + ?(ЕстьЦена, "
	|	СРЕДНЕЕ(Цена),", "") + ?(Параметры.ПериодКакКоличество, "
	|	СУММА(СуммаУпр) / КОЛИЧЕСТВО(Период)", "
	|	ВЫБОР КОГДА ЕСТЬNULL(СУММА(Количество), 0) = 0 ТОГДА
	|		0
	|	ИНАЧЕ
	|		СУММА(СуммаУпр)/СУММА(Количество)
	|	КОНЕЦ") + " КАК СрЦенаЗаПериод" + ?(ЕстьСебестоимость,  ПериодКакКоличествоТекст + " КАК НормативнаяЦена", "") + ?(УчетСкладскихОстатков, ",
	| 	МИНИМУМ(МинОстаток),
	| 	МИНИМУМ(МаксОстаток)", "") + СтрокиИтогов + "
	|ПО
	|	" + Измерение + ",
	|	Период ПЕРИОДАМИ(" + СокрЛП(Периодичность) + ", &ДатаНачала, &ДатаКонца)
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерДанныхРегистра;
	Если ЕстьДополнения Тогда
		Запрос.УстановитьПараметр("ОтборДополнения", Параметры.ОтборДополнения);
		КоличествоСезонов = Параметры.СтруктураСезонов.Количество() / 2 - 1;
	Иначе
		КоличествоСезонов = 0;
	КонецЕсли;
	
	СпособВыборки = ?(Параметры.НеУчитыватьПериодыБезДанных, "", "ВСЕ");
	
	Для НомСезона = 0 По КоличествоСезонов Цикл
		
		Запрос.УстановитьПараметр("ДатаНачала", Параметры.СтруктураСезонов["НачалоПериода" + НомСезона]);
		Запрос.УстановитьПараметр("ДатаКонца" , Параметры.СтруктураСезонов["КонецПериода" + НомСезона]);
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
		Параметры.Вставить("Периодичность", Периодичность);
		Счетчик = 0;
		// Анализируем результаты запроса, заполняем дерево значений
		Пока Выборка.СледующийПоЗначениюПоля(Измерение) Цикл
			
			ТекСтрока = ДеревоЗначений.Строки.Найти(Выборка[Измерение], Измерение);
			Если ТекСтрока = Неопределено Тогда
				ТекСтрока = ДеревоЗначений.Строки.Добавить();
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
			Если Выборка.Представление = Null Тогда
				ТекСтрока[Измерение] = Выборка[Измерение];
				ТекСтрока.Представление = Выборка.Представление;
			Иначе
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка);
			КонецЕсли;
			Если ЕстьСебестоимость Тогда
				ТекСтрока.НормативнаяЦена = ?(Выборка.НормативнаяЦена<0, 0, Выборка.НормативнаяЦена);
			КонецЕсли;
			
			НижВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период", СпособВыборки);
			Параметры.Вставить("Действие", 0);
			
			Пока НижВыборка.Следующий() Цикл
				ПодчСтрока = ТекСтрока.Строки.Добавить();
				Параметры.Вставить("ДатаИзПериода", НижВыборка.Период);
				Представление = ПолучитьДатыПланируемогоПериода(Параметры);
				ПодчСтрока.Представление = Представление;
				ПодчСтрока.Период        = НижВыборка.Период;
				ПодчСтрока.СуммаФакт     = НижВыборка.Показатель;
				
				Если УчетСкладскихОстатков И ЕстьЦена Тогда
					Если ПоКоличеству Тогда
						ПодчСтрока.МинОстаток  = Выборка.МинОстаток;
						ПодчСтрока.МаксОстаток = Выборка.МаксОстаток;
					Иначе
						ПодчСтрока.МинОстаток  = Выборка.МинОстаток  * ?(Выборка.Цена = 0, Выборка.СрЦенаЗаПериод, Выборка.Цена);
						ПодчСтрока.МаксОстаток = Выборка.МаксОстаток * ?(Выборка.Цена = 0, Выборка.СрЦенаЗаПериод, Выборка.Цена);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	МенеджерДанныхРегистра.Закрыть();
	
	Возврат ДеревоЗначений;
	
КонецФункции // ПолучитьДеревоДанных()

// Функция формирует дерево прогноза
// Параметры:
//	Объект - Объект формы
//	Параметры - Структура параметров.
//
Функция ПолучитьДеревоПрогноза(Объект, Параметры) Экспорт
	
	СпособУчетаСкладскихОстатков = Неопределено;
	УчетСкладскихОстатков  = Параметры.Свойство("СпособУчетаСкладскихОстатков", СпособУчетаСкладскихОстатков);
	Если УчетСкладскихОстатков Тогда
		Если СпособУчетаСкладскихОстатков=Перечисления.СпособыУчетаОстатков.НеУчитывать Тогда
			УчетСкладскихОстатков = Ложь;
		КонецЕсли;
	КонецЕсли;
	ДеревоЗначений = Параметры.ДеревоЗначений;
	Периодичность = Параметры.Периодичность;
	
	МодельПрогнозирования = Объект.МодельПрогнозирования;
	РасчетСезонности      = Объект.РасчетСезонности;
	ДатаПланирования      = Параметры.ДатаПланирования;
	Параметр1             = Объект.Параметр1;
	Параметр2             = Объект.Параметр2;
	Параметр3             = Объект.Параметр3;
	
	МинимальныйПорог = ?(МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный, Параметр1 * Параметр1, 2);
	
	КоличествоОбъектов = ДеревоЗначений.Строки.Количество();
	Индекс = 0;
	Пока Индекс < КоличествоОбъектов Цикл
		
		ТекСтрока = ДеревоЗначений.Строки[Индекс];
		КоличествоСтрок = ТекСтрока.Строки.Количество();
		
		Если КоличествоСтрок < МинимальныйПорог Тогда
			ДеревоЗначений.Строки.Удалить(ТекСтрока);
			КоличествоОбъектов = КоличествоОбъектов - 1;
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.КоличествоПериодов = КоличествоСтрок;
		
		ПодчСтрока = ТекСтрока.Строки.Добавить();
		
		Если Периодичность = Перечисления.ПериодичностьПланирования.Месяц Тогда
			ДатаКонца  = КонецМесяца(ДатаПланирования);
			ДатаНачала = НачалоМесяца(ДатаПланирования);
		ИначеЕсли Периодичность = Перечисления.ПериодичностьПланирования.Квартал Тогда
			ДатаКонца  = КонецКвартала(ДатаПланирования);
			ДатаНачала =  НачалоКвартала(ДатаПланирования);
		ИначеЕсли Периодичность = Перечисления.ПериодичностьПланирования.Год Тогда
			ДатаКонца  = КонецГода(ДатаПланирования);
			ДатаНачала =  НачалоГода(ДатаПланирования);
		КонецЕсли;
		
		ПодчСтрока.Представление = ПредставлениеПериода(ДатаНачала,ДатаКонца);
		ПодчСтрока.Период       = ДатаНачала;
		ПодчСтрока.СуммаФакт    = 0;
		ПодчСтрока.ПризнакПрогнозногоЗначения = Истина;
		
		Если УчетСкладскихОстатков Тогда
			ПодчСтрока.МинОстаток  = ТекСтрока.Строки[КоличествоСтрок-1].МинОстаток;
			ПодчСтрока.МаксОстаток = ТекСтрока.Строки[КоличествоСтрок-1].МаксОстаток;
		КонецЕсли;
		
		Индекс = Индекс+1;
	КонецЦикла;
	
	// ПОСТРОЕНИЕ МОДЕЛЕЙ
	ТипПериода = "";
	Если РасчетСезонности Тогда
		Если Периодичность = Перечисления.ПериодичностьПланирования.Месяц Тогда
			ТипПериода = "Месяц";
		ИначеЕсли (Периодичность = Перечисления.ПериодичностьПланирования.Квартал) Тогда
			ТипПериода = "Квартал";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДляПрогнозирования = Новый Структура;
	
	Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Линейный Тогда
		ПрогнозированиеЛинейнымТрендом(ДеревоЗначений, ТипПериода);
	ИначеЕсли МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Экспоненциальный Тогда
		ПрогнозированиеЭкспоненциальнымТрендом(ДеревоЗначений, ТипПериода);
	ИначеЕсли МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
		ПрогнозированиеПолиномиальнымТрендом(ДеревоЗначений, Параметр1, ТипПериода);
	ИначеЕсли МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Средним Тогда // Средним скользящим
		ПрогнозированиеСреднимСкользящим(ДеревоЗначений);
	ИначеЕсли МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Сглаживанием Тогда // Метод Хольта-Винтерса
		ПараметрыДляПрогнозирования.Вставить("ДеревоЗначений",            ДеревоЗначений);
		ПараметрыДляПрогнозирования.Вставить("Параметр1",                 Параметр1);
		ПараметрыДляПрогнозирования.Вставить("Параметр2",                 Параметр2);
		ПараметрыДляПрогнозирования.Вставить("Параметр3",                 Параметр3);
		ПрогнозированиеСглаживаниемХольтаВинтерса(ПараметрыДляПрогнозирования, ТипПериода);
	КонецЕсли;
	
	ИмяКолонки = "СуммаТренд";
	
	// Учтем минимальные и максимальные остатки
	Если УчетСкладскихОстатков Тогда
		Для каждого стрНоменклатура Из ДеревоЗначений.Строки Цикл
			Для каждого стрПериод Из стрНоменклатура.Строки Цикл
				Если СпособУчетаСкладскихОстатков = Перечисления.СпособыУчетаОстатков.ОграничиватьМинОстаток Тогда
					стрПериод.СуммаОграниченная = Макс(стрПериод.СуммаТренд, стрПериод.МинОстаток);
				ИначеЕсли СпособУчетаСкладскихОстатков = Перечисления.СпособыУчетаОстатков.ДобавлятьСтратегическийОстаток Тогда
					стрПериод.СуммаОграниченная = стрПериод.СуммаТренд + стрПериод.МинОстаток;
				ИначеЕсли СпособУчетаСкладскихОстатков = Перечисления.СпособыУчетаОстатков.КоличествоВИнтервале Тогда
					стрПериод.СуммаОграниченная = Макс(стрПериод.СуммаТренд, стрПериод.МинОстаток);
					стрПериод.СуммаОграниченная = Мин(стрПериод.СуммаОграниченная, ?(стрПериод.МаксОстаток=0, стрПериод.СуммаОграниченная, стрПериод.МаксОстаток));
				КонецЕсли;
			КонецЦикла; 
			
			СуммаОграниченная = стрНоменклатура.Строки[стрНоменклатура.КоличествоПериодов].СуммаОграниченная;
			стрНоменклатура.Строки[стрНоменклатура.КоличествоПериодов].ПрогнозноеЗначение = СуммаОграниченная;
			стрНоменклатура.ПрогнозноеЗначение                                            = СуммаОграниченная;
			// Мы должны проанализировать ряды Фактический и Трендовый но Для УчетСкладскихОстатков = Истина.
			// Трендовый ряд должен быть ограничен.
		КонецЦикла;
		ИмяКолонки = "СуммаОграниченная";
	КонецЕсли;
	
	// Сформируем итоговую строку. расположим ее сверху
	Аккум = Новый ТаблицаЗначений;
	Аккум.Колонки.Добавить("Период");
	Аккум.Колонки.Добавить("Месяц");
	Аккум.Колонки.Добавить("СуммаФакт");
	Аккум.Колонки.Добавить("СуммаТренд");
	Аккум.Колонки.Добавить("СуммаОграниченная");
	
	Для каждого стрНоменклатура Из ДеревоЗначений.Строки Цикл
		Для каждого стр Из стрНоменклатура.Строки Цикл
			НовСтрока = Аккум.Добавить();
			НовСтрока.Период 			 = стр.Период;
			НовСтрока.Месяц				 = стр.Представление;
			НовСтрока.СуммаФакт  		 = стр.СуммаФакт;
			НовСтрока.СуммаТренд 		 = стр.СуммаТренд;
			НовСтрока.СуммаОграниченная	 = стр.СуммаОграниченная;
		КонецЦикла;
	КонецЦикла;
	
	Аккум.Свернуть("Период, Месяц", "СуммаФакт, СуммаТренд, СуммаОграниченная");
	Аккум.Сортировать("Период");
	
	НовСтрока = ДеревоЗначений.Строки.Вставить(0);
	НовСтрока.Представление = НСтр("ru = 'Итого по всем позициям:'") + " ";
	Для каждого стр Из Аккум Цикл
		НовПериод = НовСтрока.Строки.Добавить();
		НовПериод.Представление		 = стр.Месяц;
		НовПериод.СуммаФакт 		 = стр.СуммаФакт;
		НовПериод.СуммаТренд		 = стр.СуммаТренд;
		НовПериод.СуммаОграниченная	 = стр.СуммаОграниченная;
		НовПериод.ПрогнозноеЗначение = стр[ИмяКолонки];
	КонецЦикла;
	ПоследняяПозиция = НовСтрока.Строки.Количество()-1;
	Если ПоследняяПозиция<0 Тогда
		НовСтрока.КоличествоПериодов = 0;
	Иначе
		НовСтрока.Строки[ПоследняяПозиция].ПризнакПрогнозногоЗначения = Истина;
		НовСтрока.ПрогнозноеЗначение = НовСтрока.Строки[ПоследняяПозиция].ПрогнозноеЗначение;
		НовСтрока.КоличествоПериодов = ПоследняяПозиция;
		
		// Расчет ошибки
		Если МодельПрогнозирования <> Перечисления.МоделиПрогнозирования.Средним Тогда
			Для каждого стрНоменклатура Из ДеревоЗначений.Строки Цикл
				СрКвадОшибка = 0;
				Для Сч = 0 По стрНоменклатура.КоличествоПериодов - 1 Цикл
					СрКвадОшибка = СрКвадОшибка + Pow((стрНоменклатура.Строки[Сч].СуммаФакт - ?(УчетСкладскихОстатков, стрНоменклатура.Строки[Сч].СуммаОграниченная, стрНоменклатура.Строки[Сч].СуммаТренд)), 2);
				КонецЦикла;
				СрКвадОшибка = СрКвадОшибка / стрНоменклатура.КоличествоПериодов;
				стрНоменклатура.Ошибка = СрКвадОшибка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДеревоЗначений;
	
КонецФункции // ПолучитьДеревоПрогноза()

// ПРОГНОЗИРОВАНИЕ ЛИНЕЙНЫМ ТРЕНДОМ
// 
// Параметры:
//  ДеревоЗначений            - ДеревоЗначений
//  ТипПериода                - Строка - определяет тип периода "Месяц", "Квартал" и т.д.
//  КоличествоПрошлыхПериодов - Число - количество прошлых периодов.
//
Процедура ПрогнозированиеЛинейнымТрендом(ДеревоЗначений, ТипПериода)
	
	Для каждого стрНоменклатура Из ДеревоЗначений.Строки Цикл
		КоличествоПериодов = стрНоменклатура.КоличествоПериодов;
		// Рассчитаем линейный тренд
		Массив = ТрендЛинейный(стрНоменклатура.Строки.ВыгрузитьКолонку("СуммаФакт"),КоличествоПериодов);
		стрНоменклатура.Строки.ЗагрузитьКолонку(Массив, "СуммаТренд");
		
		// Теперь работаем с сезонной составляющей
		Если ТипПериода<>"" Тогда
			ВычислитьСезоннуюСоставляющую(стрНоменклатура, КоличествоПериодов, ТипПериода);
			// Скорректируем фактический ряд
			Для каждого стр Из стрНоменклатура.Строки Цикл
				стр.СуммаТренд = стр.СуммаТренд + стр.СезоннаяКомпонента;
			КонецЦикла;
		КонецЕсли;
		
		// Теперь находим непосредственно само прогнозное значение 
		// по формуле: У=Т+S;
		Прогноз = стрНоменклатура.Строки[стрНоменклатура.Строки.Количество()-1].СуммаТренд;
		стрНоменклатура.ПрогнозноеЗначение                                               = Прогноз;
		стрНоменклатура.Строки[стрНоменклатура.Строки.Количество()-1].ПрогнозноеЗначение = Прогноз;
		
	КонецЦикла;
	
КонецПроцедуры // ПрогнозированиеЛинейнымТрендом()

// Рассчитывает линейный тренд
//
// Параметры:
//  МассивРяд                 - Массив - значения, содержащиеся в колонке коллекции строк дерева значений,
//  ТочекПрогноза             - Число - количество точек прогноза,
//  КоличествоПрошлыхПериодов - Число - количество прошлых периодов.
//
// Возвращаемое значение:
//  МассивРезультат - Массив - содержит результат расчета.
//
Функция ТрендЛинейный(МассивРяд,КоличествоПрошлыхПериодов,ТочекПрогноза = 1)
	
	// Уберем лишнюю строку
	Если МассивРяд.Количество()>КоличествоПрошлыхПериодов Тогда
		МассивРяд.Удалить(МассивРяд.Количество()-1);
	КонецЕсли;  	
	
	// необходимые переменные
	Х_Среднее=0; У_Среднее=0; Б1=0; Б0=0; СуммаХУ=0; СуммаХ2=0; Н=МассивРяд.Количество();
	
	// проверим
	Если Н=0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	// считаем необходимые данные
	Для Сч=0 По МассивРяд.ВГраница() Цикл
		Х=Сч; У=МассивРяд[Сч];
		СуммаХУ=СуммаХУ+(Х*У);
		Х_Среднее=Х_Среднее+Х;
		У_Среднее=У_Среднее+У;
		СуммаХ2=СуммаХ2+(Х*Х);
	КонецЦикла;
	
	Х_Среднее=Х_Среднее/Н;
	У_Среднее=У_Среднее/Н;
	
	// получаем коэффициенты уравнения прямой
	Б1=(СуммаХУ-Н*Х_Среднее*У_Среднее)/(СуммаХ2-Н*(Х_Среднее*Х_Среднее));
	Б0=У_Среднее-Б1*Х_Среднее;
	
	МассивРезультат=Новый Массив(КоличествоПрошлыхПериодов+ТочекПрогноза);
	Для Сч=0 По МассивРезультат.ВГраница() Цикл
		МассивРезультат[Сч]=0;
	КонецЦикла;
	
	// строим прямую
	Для Х=0 По МассивРяд.ВГраница()+ТочекПрогноза Цикл
		МассивРезультат[Х]=Б0+Б1*Х;
	КонецЦикла;
	
	Возврат МассивРезультат;
КонецФункции // ТрендЛинейный()

// ПРОГНОЗИРОВАНИЕ ЭКСПОНЕНЦИАЛЬНЫМ ТРЕНДОМ
// 
// Параметры:
//  ДеревоЗначений            - ДеревоЗначений
//  ТипПериода                - Строка - определяет тип периода "Месяц", "Квартал" и т.д.
//  КоличествоПрошлыхПериодов - Число - количество прошлых периодов.
//
Процедура ПрогнозированиеЭкспоненциальнымТрендом(ДеревоЗначений, ТипПериода)
	
	Для каждого стрНоменклатура Из ДеревоЗначений.Строки Цикл
		КоличествоПериодов = стрНоменклатура.КоличествоПериодов;
		Массив = ТрендЛогарифмический(стрНоменклатура.Строки.ВыгрузитьКолонку("СуммаФакт"),КоличествоПериодов);
		Если ТипЗнч(Массив) = Тип("Массив") Тогда
			стрНоменклатура.Строки.ЗагрузитьКолонку(Массив, "СуммаТренд");
			
			// Теперь работаем с сезонной составляющей
			Если ТипПериода <> "" Тогда
				ВычислитьСезоннуюСоставляющую(стрНоменклатура, КоличествоПериодов, ТипПериода);
				// Скорректируем фактический ряд
				Для каждого стр Из стрНоменклатура.Строки Цикл
					стр.СуммаТренд = стр.СуммаТренд + стр.СезоннаяКомпонента;
				КонецЦикла;
			КонецЕсли;
			
			// Теперь находим непосредственно само прогнозное значение 
			// по формуле: У=Т+S;
			Прогноз = стрНоменклатура.Строки[КоличествоПериодов].СуммаТренд;
			стрНоменклатура.ПрогнозноеЗначение                            = Прогноз;
			стрНоменклатура.Строки[КоличествоПериодов].ПрогнозноеЗначение = Прогноз;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПрогнозированиеЭкспоненциальнымТрендом()

// Рассчитывает логарифмический тренд
//
// Параметры:
//  МассивРяд                 - Массив - значения, содержащиеся в колонке коллекции строк дерева значений,
//  ТочекПрогноза             - Число - количество точек прогноза,
//  КоличествоПрошлыхПериодов - Число - количество прошлых периодов.
//
// Возвращаемое значение:
//  МассивРезультат - Массив - содержит результат расчета.
//
Функция ТрендЛогарифмический(МассивРяд,КоличествоПрошлыхПериодов, ТочекПрогноза = 1) 
	
	// Уберем лишнюю строку
	Если МассивРяд.Количество()>КоличествоПрошлыхПериодов Тогда
		МассивРяд.Удалить(МассивРяд.Количество()-1);
	КонецЕсли;
	
	// необходимые переменные
	Х_Среднее=0;
	У_Среднее=0;
	Б1=0;
	Б0=0;
	СуммаХУ=0;
	СуммаХ2=0;
	Н=МассивРяд.Количество();
	
	// проверим
	Если Н=0 Тогда 
		Возврат Новый Массив();
	КонецЕсли;
	
	МассивРезультат=Новый Массив(Н+ТочекПрогноза);
	Для Сч=0 По МассивРезультат.ВГраница() Цикл 
		МассивРезультат[Сч]=0; 
	КонецЦикла;
	
	// считаем необходимые данные
	Для Сч=0 По МассивРяд.ВГраница() Цикл
		Х=Сч; У=МассивРяд[Сч];
		Если У=0 Тогда 
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При построении логарифмического тренда обнаружены точки с значениями = 0. Тренд не построен.'"));
			Возврат "ТрендНеПостроен"; 
		КонецЕсли; // при экспоненциальной зависимости нолей быть не должно
		Если У<0 Тогда 
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При построении логарифмического тренда обнаружены точки с отрицательными значениями 0. Тренд не построен.'"));
			Возврат "ТрендНеПостроен"; 
		КонецЕсли; 
		
		У=Log(У);
		СуммаХУ=СуммаХУ+(Х*У);
		Х_Среднее=Х_Среднее+Х;
		У_Среднее=У_Среднее+У;
		СуммаХ2=СуммаХ2+(Х*Х);
	КонецЦикла;
	
	Х_Среднее=Х_Среднее/Н;
	У_Среднее=У_Среднее/Н;
	
	// получаем коэффициенты уравнения прямой
	Б1=(СуммаХУ-Н*Х_Среднее*У_Среднее)/(СуммаХ2-Н*(Х_Среднее*Х_Среднее));
	Б0=У_Среднее-Б1*Х_Среднее;
	
	// строим прямую
	Для Х=0 По МассивРяд.ВГраница()+ТочекПрогноза Цикл
		МассивРезультат[Х]=Exp(Б0+Б1*Х);
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции // ТрендЛогарифмический()

// ПРОГНОЗИРОВАНИЕ ПОЛИНОМИАЛЬНЫМ ТРЕНДОМ
//
// Параметры:
//  Параметры - Структура - содержит параметры для прогнозирования.
//
Процедура ПрогнозированиеПолиномиальнымТрендом(ДеревоЗначений, Параметр1, ТипПериода)
	
	Для Каждого стрНоменклатура Из ДеревоЗначений.Строки Цикл
		
		КоличествоПериодов = стрНоменклатура.КоличествоПериодов;
		Массив = ТрендПолиномиальный(стрНоменклатура.Строки.ВыгрузитьКолонку("СуммаФакт"), Цел(Параметр1),КоличествоПериодов);
		стрНоменклатура.Строки.ЗагрузитьКолонку(Массив, "СуммаТренд");                                   		
		// Теперь работаем с сезонной составляющей
		Если ТипПериода <> "" Тогда
			ВычислитьСезоннуюСоставляющую(стрНоменклатура, КоличествоПериодов, ТипПериода);
			// Скорректируем фактический ряд
			Для каждого стр Из стрНоменклатура.Строки Цикл
				стр.СуммаТренд = стр.СуммаТренд + стр.СезоннаяКомпонента;
			КонецЦикла;
		КонецЕсли;
		
		// Теперь находим непосредственно само прогнозное значение 
		// по формуле: У=Т+S;
		Прогноз = стрНоменклатура.Строки[КоличествоПериодов].СуммаТренд;
		стрНоменклатура.ПрогнозноеЗначение                            = Прогноз;
		стрНоменклатура.Строки[КоличествоПериодов].ПрогнозноеЗначение = Прогноз;
	КонецЦикла;
	
КонецПроцедуры // ПрогнозированиеПолиномиальнымТрендом()

// Рассчитывает полиномиальный тренд
//
// Параметры:
//  МассивРяд                 - Массив - значения, содержащиеся в колонке коллекции строк дерева значений,
//  Степень                   - Число - определяет размер массивов для расчета.
//  ТочекПрогноза             - Число - количество точек прогноза,
//  КоличествоПрошлыхПериодов - Число - количество прошлых периодов.
//
// Возвращаемое значение:
//  МассивРезультат - Массив - содержит результат расчета.
//
Функция ТрендПолиномиальный(МассивРяд,Степень,КоличествоПрошлыхПериодов,ТочекПрогноза=1) 
	
	// проверим
	Если МассивРяд.Количество()=0 Тогда 
		Возврат Новый Массив(); 
	КонецЕсли;
	
	// Уберем лишнюю строку
	Если МассивРяд.Количество()>КоличествоПрошлыхПериодов Тогда
		МассивРяд.Удалить(МассивРяд.Количество()-1);
	КонецЕсли; 
	
	Если Степень<2 Тогда
		Степень=2;
	ИначеЕсли Степень>6 Тогда
		Степень=6;
	КонецЕсли;
	
	// начальные значения 	
	КоличествоЭлементов=МассивРяд.Количество();
	
	МассивРезультат=Новый Массив(КоличествоЭлементов+ТочекПрогноза); 
	Для Сч=0 По МассивРезультат.ВГраница() Цикл 
		МассивРезультат[Сч]=0; 
	КонецЦикла;
	
	ВекторХ = Новый Массив(Степень*Степень + 1);
	ВекторУ = Новый Массив(Степень+1);
	
	// рассчитаем вектора
	ВекторХ[0]=КоличествоЭлементов;
	Для Сч=1 По ВекторХ.ВГраница() Цикл
		ВекторХ[Сч]=0;
		Для Сч2=0 По КоличествоЭлементов Цикл
			Х=Сч2;
			ВекторХ[Сч]=ВекторХ[Сч]+Pow(Х,Сч);
		КонецЦикла;
	КонецЦикла;
	Для Сч=0 По ВекторУ.ВГраница() Цикл
		ВекторУ[Сч]=0;
		Для Сч2=0 По МассивРяд.ВГраница() Цикл
			Х=Сч2+1;
			ВекторУ[Сч]=ВекторУ[Сч]+(МассивРяд[Сч2]*Pow(Х,Сч));
		КонецЦикла;
	КонецЦикла;
	
	// формируем матрицу
	Матрица=Новый Массив(Степень+1,Степень+1);
	Для Сч=0 По Степень Цикл
		Для Сч2=0 По Степень Цикл
			Матрица[Сч][Сч2]=ВекторХ[Сч+Сч2];
		КонецЦикла;
	КонецЦикла;
	// решаем систему линейных уравнений
	Решение=Гаусс(Матрица,ВекторУ);
	
	// тренд
	Для Сч=0 По МассивРяд.ВГраница()+ТочекПрогноза Цикл 
		МассивРезультат[Сч]=Решение[0];
		Х=Сч;
		Для Сч2=1 По Степень Цикл
			МассивРезультат[Сч]=МассивРезультат[Сч]+Решение[Сч2]*Pow(Сч,Сч2);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции // ТрендПолиномиальный()

// Решает систему линейных уравнений
//
// Параметры:
//  Матрица - Массив - содержит данные для расчета
//  Вектор  - Массив - содержит данные для расчета.
//
// Возвращаемое значение:
//  Решение - Массив - решение.
//
Функция Гаусс(Матрица, Вектор) 
	
	Н = Матрица.ВГраница();
	Для К = 0 По Н - 1 Цикл
		
		// Ищем строку l с максимальным элементом в k-том столбце
		Л = 0;
		М = 0;
		Для Й = К По Н Цикл
			А = Матрица[Й][К];
			АА = ?(А < 0, -А, А);
			Если АА > М Тогда
				М = ?(А < 0,-А, А);
				Л = Й;
			КонецЕсли;
		КонецЦикла;
		
		// Меняем местом Л-тую строку с К-той 
		Если Л <> К Тогда
			Для Ж = 0 По Н Цикл
				Т = Матрица[К][Ж];
				Матрица[К][Ж] = Матрица[Л][Ж];
				Матрица[Л][Ж] = Т;
			КонецЦикла;
			Т = Вектор[К];
			Вектор[К] = Вектор[Л];
			Вектор[Л] = Т;
		КонецЕсли;
		
		// Преобразуем матрицу
		Для Й = К + 1 По Н Цикл
			КУ = Матрица[Й][К] / Матрица[К][К];
			
			Для Ж = 0 По Н Цикл
				Если Ж = К Тогда
					Матрица[Й][Ж] = 0;
				Иначе
					Матрица[Й][Ж] = Матрица[Й][Ж] - (КУ * Матрица[К][Ж]);
				КонецЕсли;
			КонецЦикла;
			Вектор[Й] = Вектор[Й] - КУ * Вектор[К];
		КонецЦикла;
	КонецЦикла;
	
	// Вычисляем решение
	Решение = Новый Массив(Н + 1);
	Для Сч = 0 По Н Цикл
		Решение[Сч] = 0;
	КонецЦикла;
	Решение[Н] = Вектор[Н] / Матрица[Н][Н];
	
	Й = Н - 1;
	Пока Й >= 0 Цикл
		Т = 0;
		Для Ж = 0 По Н - Й Цикл
			Т = Т + Матрица[Й][Й+Ж] * Решение[Й+Ж];
		КонецЦикла;
		Решение[Й]=(1 / Матрица[Й][Й]) * (Вектор[Й] - Т);
		Й = Й - 1;
	КонецЦикла;
	
	Возврат Решение;
	
КонецФункции // Гаусс()

// ПРОГНОЗИРОВАНИЕ СКОЛЬЗЯЩИМ СРЕДНИМ
//
// Параметры:
//  Параметры - Структура - содержит параметры для прогнозирования.
//
Процедура ПрогнозированиеСглаживаниемХольтаВинтерса(Параметры, ТипПериода)
	
	ДеревоЗначений            = Параметры.ДеревоЗначений;
	Параметр1                 = Параметры.Параметр1;
	Параметр2                 = Параметры.Параметр2;
	Параметр3                 = Параметры.Параметр3;
	
	ПараметрыДляСглаживания   = Новый Структура;
	ПараметрыДляСглаживания.Вставить("Параметр1",                 Параметр1);
	ПараметрыДляСглаживания.Вставить("Параметр2",                 Параметр2);
	ПараметрыДляСглаживания.Вставить("Параметр3",                 Параметр3); 
	
	Для каждого стрНоменклатура Из ДеревоЗначений.Строки Цикл
		
		КоличествоПрошлыхПериодов = стрНоменклатура.КоличествоПериодов;
		// Если можно работать с сезонностью, то используем продвинутый метод Винтерса, иначе стандартный Хольта.
		Если ТипПериода<>"" Тогда
			
			СгладитьФактРядМетодомВинтерса(стрНоменклатура, стрНоменклатура.КоличествоПериодов, ПараметрыДляСглаживания, ТипПериода);
		Иначе
			ПараметрыДляСглаживания.Вставить("стрНоменклатура", стрНоменклатура);
			СгладитьФактРядМетодомХольта(стрНоменклатура, стрНоменклатура.КоличествоПериодов, ПараметрыДляСглаживания, ТипПериода);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПрогнозированиеСглаживаниемХольтаВинтерса()

// метод Винтерса
//
// Параметры:
//  Параметры - Структура - содержит параметры для расчета.
//
Процедура СгладитьФактРядМетодомВинтерса(стрНоменклатура,КоличествоПериодов, Параметры,  ТипПериода = "Месяц")
	
	Параметр1 = Параметры.Параметр1;
	Параметр2 = Параметры.Параметр2;
	Параметр3 = Параметры.Параметр3;
	
	Расчет = Новый ТаблицаЗначений;
	Расчет.Колонки.Добавить("Период");
	Расчет.Колонки.Добавить("СуммаФакт");
	Расчет.Колонки.Добавить("СглаженнаяОценка");
	Расчет.Колонки.Добавить("ОценкаТренда");
	Расчет.Колонки.Добавить("ОценкаСезонности");
	Расчет.Колонки.Добавить("ПрогнозНаСледующийПериод");
	
	Для Сч=0 По КоличествоПериодов  Цикл
		стр = Расчет.Добавить();
		стр.Период    		 = стрНоменклатура.Строки[Сч].Период;
		стр.СуммаФакт 		 = стрНоменклатура.Строки[Сч].СуммаФакт;
		стр.СглаженнаяОценка = стрНоменклатура.Строки[Сч].СуммаФакт; // L
		стр.ОценкаТренда     = 0; // T
		стр.ОценкаСезонности = 1; // S
		стр.ПрогнозНаСледующийПериод = стрНоменклатура.Строки[Сч].СуммаФакт;
	КонецЦикла;	
	
	А = ?(Параметр1<=0,0.5,Параметр1);
	В = ?(Параметр2<=0,0.5,Параметр2);
	С = ?(Параметр3<=0,0.5,Параметр3);
	
	МинимальныйПериодСезонности = ДобавитьМесяц(Расчет[0].Период, 12);
	ИндексПоискаСезона = 0;
	Для Сч=1 По КоличествоПериодов-1 Цикл
		ТекСтрока = Расчет[Сч];
		Если МинимальныйПериодСезонности>ТекСтрока.Период Тогда
			ОСПредыдущий = 1;
			ОССледующийЗаПредыдущим = 1;
		Иначе
			ПревПериод = Расчет[ИндексПоискаСезона].Период;
			МинимальныйПериод = ДобавитьМесяц(Расчет[Сч].Период, -12);
			Пока ПревПериод <= МинимальныйПериод Цикл
				ИндексПоискаСезона = ИндексПоискаСезона+1;
				ПревПериод = Расчет[ИндексПоискаСезона].Период;
			КонецЦикла;
			ИндексПоискаСезона = ИндексПоискаСезона-1;
			ОСПредыдущий = Расчет[ИндексПоискаСезона].ОценкаСезонности;
			
			ПревПериод = Расчет[ИндексПоискаСезона].Период;
			МинимальныйПериод = ДобавитьМесяц(Расчет[Сч+1].Период, -12);
			Пока ПревПериод<=МинимальныйПериод Цикл
				ИндексПоискаСезона = ИндексПоискаСезона+1;
				ПревПериод = Расчет[ИндексПоискаСезона].Период;
			КонецЦикла;
			ИндексПоискаСезона = ИндексПоискаСезона-1;
			ОССледующийЗаПредыдущим = Расчет[ИндексПоискаСезона].ОценкаСезонности;
		КонецЕсли;
		
		L = А*ТекСтрока.СуммаФакт/ОСПредыдущий   + (1-А)*(Расчет[Сч-1].СглаженнаяОценка + Расчет[Сч-1].ОценкаТренда);
		T = В*(L - Расчет[Сч-1].СглаженнаяОценка) + (1-В)*Расчет[Сч-1].ОценкаТренда;
		S = С*ТекСтрока.СуммаФакт/ ?(L=0,1,L) + (1-С)* ОСПредыдущий;
		Y = (L + T)*ОССледующийЗаПредыдущим;
		ТекСтрока.СглаженнаяОценка = L; 
		ТекСтрока.ОценкаТренда     = T;
		ТекСтрока.ОценкаСезонности = S;
		ТекСтрока.ПрогнозНаСледующийПериод = Y;
	КонецЦикла;	      	
	
	Массив = Расчет.ВыгрузитьКолонку("ПрогнозНаСледующийПериод");
	Массив.Вставить(0);
	Массив[0] = Массив[1];
	стрНоменклатура.Строки.ЗагрузитьКолонку(Массив, "СуммаТренд");
	
	Прогноз = стрНоменклатура.Строки[КоличествоПериодов].СуммаТренд;
	стрНоменклатура.Строки[КоличествоПериодов].ПрогнозноеЗначение = Прогноз;
	стрНоменклатура.ПрогнозноеЗначение                            = Прогноз;   
	
КонецПроцедуры // СгладитьФактРядМетодомВинтерса()

// метод Хольта
//
// Параметры:
//  Параметры - Структура - содержит параметры для расчета.
//
Процедура СгладитьФактРядМетодомХольта(стрНоменклатура, КоличествоПериодов, Параметры, ТипПериода = "Месяц")
	
	Параметр1 = Параметры.Параметр1;
	Параметр2 = Параметры.Параметр2;
	
	Расчет = Новый ТаблицаЗначений;
	Расчет.Колонки.Добавить("Период");
	Расчет.Колонки.Добавить("СуммаФакт");
	Расчет.Колонки.Добавить("СглаженнаяОценка",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Расчет.Колонки.Добавить("ОценкаТренда",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2))); 
	Расчет.Колонки.Добавить("ПрогнозНаСледующийПериод", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для Сч=0 По КоличествоПериодов-1  Цикл
		стр = Расчет.Добавить();	
		стр.Период    		 = стрНоменклатура.Строки[Сч].Период;
		стр.СуммаФакт 		 = стрНоменклатура.Строки[Сч].СуммаФакт;
		стр.СглаженнаяОценка = стрНоменклатура.Строки[Сч].СуммаФакт; // L
		стр.ОценкаТренда     = 0; // T 
		стр.ПрогнозНаСледующийПериод = стрНоменклатура.Строки[Сч].СуммаФакт;
	КонецЦикла;
	
	А = ?(Параметр1<=0,0.5,Параметр1);
	В = ?(Параметр2<=0,0.5,Параметр2);
	
	Для Сч=1 По Расчет.Количество()-1 Цикл
		
		L = А*Расчет[Сч].СуммаФакт + (1-А)*(Расчет[Сч-1].СглаженнаяОценка + Расчет[Сч-1].ОценкаТренда);
		T = В*(L - Расчет[Сч-1].СглаженнаяОценка) + (1-В)*Расчет[Сч-1].ОценкаТренда;
		Y = L + T;
		
		Расчет[Сч].СглаженнаяОценка = L;
		Расчет[Сч].ОценкаТренда     = T;
		Расчет[Сч].ПрогнозНаСледующийПериод = Y;
		
	КонецЦикла;
	
	// Ну, в принципе готово
	Прогноз = Расчет[Расчет.Количество()-1].ПрогнозНаСледующийПериод;
	стрНоменклатура.Строки[КоличествоПериодов].ПрогнозноеЗначение = Прогноз;
	стрНоменклатура.Строки[КоличествоПериодов].СуммаТренд         = Прогноз;
	стрНоменклатура.ПрогнозноеЗначение                            = Прогноз;
	
	Массив = Новый Массив;
	Массив.Добавить(0);
	Для Сч=1 По Расчет.Количество()-1 Цикл
		Массив.Добавить(Расчет[Сч-1].ПрогнозНаСледующийПериод);
	КонецЦикла;
	Массив[0] = Массив[1];
	
	стрНоменклатура.Строки.ЗагрузитьКолонку(Массив, "СуммаТренд");
	
КонецПроцедуры // СгладитьФактРядМетодомХольтаВинтерса()

// ПРОГНОЗИРОВАНИЕ СРЕДНИМ
// 
// Параметры:
//  ДеревоЗначений            - ДеревоЗначений.
Процедура ПрогнозированиеСреднимСкользящим(ДеревоЗначений)
	
	Для Каждого стрНоменклатура Из ДеревоЗначений.Строки Цикл
		КоличествоПериодов = стрНоменклатура.КоличествоПериодов;
		// Здесь все элементарно, находим среднее, оно и будет прогнозным значением
		Среднее = стрНоменклатура.Строки.Итог("СуммаФакт") / КоличествоПериодов;
		стрНоменклатура.Строки[КоличествоПериодов].ПрогнозноеЗначение = Среднее;
		стрНоменклатура.ПрогнозноеЗначение = Среднее;
	КонецЦикла;
	
КонецПроцедуры // ПрогнозированиеСреднимСкользящим()

// РАСЧЕТ СЕЗОННОЙ СОСТАВЛЯЮЩЕЙ
// 
// Параметры:
//  стрНоменклатура           - СтрокаДереваЗначений
//  ТипПериода                - Строка - определяет тип периода "Месяц", "Квартал" и т.д.
//  КоличествоПрошлыхПериодов - Число - количество прошлых периодов.
//
Процедура ВычислитьСезоннуюСоставляющую(стрНоменклатура, КоличествоПрошлыхПериодов, ТипПериода = "Месяц")
	
	// Работать будем с копией.
	РасчетСК = Новый ТаблицаЗначений;  
	РасчетСК.Колонки.Добавить("Период");
	РасчетСК.Колонки.Добавить("НомерПериода");
	РасчетСК.Колонки.Добавить("Количество");
	РасчетСК.Колонки.Добавить("Разность");
	РасчетСК.Колонки.Добавить("СреднееЗначение");
	РасчетСК.Колонки.Добавить("СезоннаяКомпонента");
	
	Для Сч=0 По КоличествоПрошлыхПериодов-1 Цикл
		
		стр = РасчетСК.Добавить();
		стр.Период = стрНоменклатура.Строки[Сч].Период;
		Если ТипПериода="Месяц" Тогда
			стр.НомерПериода = Месяц(стрНоменклатура.Строки[Сч].Период);
		ИначеЕсли ТипПериода="Квартал" Тогда
			Месяц = Месяц( стрНоменклатура.Строки[Сч].Период );
			Если Месяц=1 Тогда
				стр.НомерПериода = 1;
			ИначеЕсли Месяц=4 Тогда
				стр.НомерПериода = 2;
			ИначеЕсли Месяц=7 Тогда
				стр.НомерПериода = 3;
			Иначе
				стр.НомерПериода = 4;
			КонецЕсли;
		ИначеЕсли ТипПериода="Неделя" Тогда
			стр.НомерПериода = НеделяГода(стрНоменклатура.Строки[Сч].Период);
		КонецЕсли;
		
		стр.Количество = 1;
		стр.Разность   =  стрНоменклатура.Строки[Сч].СуммаФакт -  стрНоменклатура.Строки[Сч].СуммаТренд;
		стр.СреднееЗначение    = 0;
		стр.СезоннаяКомпонента = 0;
	КонецЦикла;
	
	// Сделаем копию тз. Пригодиться дальше
	Копия = РасчетСК.Скопировать();
	
	// Находим среднее значение
	РасчетСК.Свернуть("НомерПериода","Разность,Количество,СреднееЗначение,СезоннаяКомпонента");
	Для каждого стр Из РасчетСК Цикл
		стр.СреднееЗначение = стр.Разность / стр.Количество;
	КонецЦикла;
	
	// Выводим сумму коррекции и выведем сумму разностей в ноль.
	Коррекция = РасчетСК.Итог("СреднееЗначение") / РасчетСК.Количество(); 
	
	// Находим сезонную составляющую
	Для каждого стр Из РасчетСК Цикл
		стр.СезоннаяКомпонента = стр.СреднееЗначение - Коррекция;
	КонецЦикла;
	
	// Теперь заполним таблицу копию
	Для каждого стр Из Копия Цикл
		стр.СезоннаяКомпонента = РасчетСК.Найти(стр.НомерПериода, "НомерПериода").СезоннаяКомпонента;
	КонецЦикла;
	
	стрНоменклатура.Строки.ЗагрузитьКолонку(Копия.ВыгрузитьКолонку("СезоннаяКомпонента"),"СезоннаяКомпонента");
	
КонецПроцедуры // ВычислитьСезоннуюСоставляющую()

#КонецОбласти
