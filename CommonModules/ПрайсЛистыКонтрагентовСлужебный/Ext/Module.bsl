
#Область ПрограммныйИнтерфейс

// Читаем образец данных из табличного документа
//
// Параметры:
//  Путь - Строка - Путь к файлу с табличным документом;
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры обработки;
//   *ЖурналЗагрузки - Структура - информация для записи в журнал загрузки;
//   *ИмяТаблицы - Строка - имя листа табличного документа;
//   *КоличествоСтрок - Число - количество считываемых строк;
//   *Расширение - Строка - расширение табличного документа;
// 
// Возвращаемое значение:
//  Соответствие - данные прочитанные из документа в разрезе листов.
//
Функция ПолучитьОбразецДанныхИзТабличногоДокумента(Путь, ДополнительныеПараметры) Экспорт
	
	ПрочитанныеЛистыДокумента = Новый Соответствие;
	ТипФайла = ВРег(ДополнительныеПараметры.Расширение);
	
	Если ТипФайла = ".ODS" ИЛИ ТипФайла = ".OTS" Тогда
		
		Доступна = ЗаполнитьСоответствиеДанныхODS(Путь, ДополнительныеПараметры, ПрочитанныеЛистыДокумента);
		
		Если НЕ Доступна Тогда
			
			Доступна = ЗаполнитьСоответствиеДанныхXLS(Путь, ДополнительныеПараметры, ПрочитанныеЛистыДокумента);
			
		КонецЕсли;
		
	Иначе
		
		Доступна = ЗаполнитьСоответствиеДанныхXLS(Путь, ДополнительныеПараметры, ПрочитанныеЛистыДокумента);
		
		Если НЕ Доступна Тогда
			
			Доступна = ЗаполнитьСоответствиеДанныхODS(Путь, ДополнительныеПараметры, ПрочитанныеЛистыДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Доступна Тогда
		
		Возврат СформироватьОшибку(НСтр("ru = 'Для загрузки файла требуется установить Microsoft Office или Open Office.'"));
		
	КонецЕсли;
	
	Возврат ПрочитанныеЛистыДокумента;
	
КонецФункции // ПолучитьОбразецДанныхИзТабличногоДокумента()

// Функция - Прочитать данные TXT
//
// Параметры:
//  Путь					 - Строка	 - Путь к данным
//  ЭтоОбразец				 - Булево	 - Признак образца
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Булево - Булево.
//
Функция ПрочитатьДанныеTXT(Путь, ЭтоОбразец, ДополнительныеПараметры) Экспорт
	МассивДанныхОбразец = Новый Массив;
	КоличествоСтрок = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "КоличествоСтрок", 0);
	
	Если НЕ ЭтоОбразец Тогда
		ПерваяСтрока    = ДополнительныеПараметры.СтруктураСтраницПрайсЛиста[0].СтрокаНачало;
		ПоследняяСтрока = ДополнительныеПараметры.СтруктураСтраницПрайсЛиста[0].СтрокаКонец;
	Иначе
		ПерваяСтрока    = 1;
		ПоследняяСтрока = КоличествоСтрок;
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Получение данных...'"));
	ФайлОбменаОбъект = Новый ЧтениеТекста(Путь);
	
	ОбрабатываемаяСтрока = 0;
	Пока Истина Цикл
		ОбрабатываемаяСтрока  = ОбрабатываемаяСтрока + 1;
		СтрокаФайлаПрайсЛиста = ФайлОбменаОбъект.ПрочитатьСтроку();
		Если СтрокаФайлаПрайсЛиста = Неопределено ИЛИ (ПоследняяСтрока > 0 И ОбрабатываемаяСтрока > ПоследняяСтрока) Тогда
			Прервать;
		КонецЕсли;
		
		Если ОбрабатываемаяСтрока < ПерваяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		Сч = 0;
		Для Каждого ЗначениеПоля Из РазобратьСтрокуTXT(СокрЛП(СтрокаФайлаПрайсЛиста), Путь, ДополнительныеПараметры.Разделитель) Цикл
			Если МассивДанныхОбразец.ВГраница() < Сч Тогда
				МассивДанныхКолонки = Новый Массив;
				Для СчЦикла = 1 По ОбрабатываемаяСтрока-1 Цикл
					МассивДанныхКолонки.Добавить("");
				КонецЦикла;
				МассивДанныхОбразец.Добавить(МассивДанныхКолонки);
			КонецЕсли;
			
			Если СтрНачинаетсяС(ЗначениеПоля, """") И СтрЗаканчиваетсяНа(ЗначениеПоля, """") Тогда
				ЗначениеПоляСокр = Сред(ЗначениеПоля, 2, СтрДлина(ЗначениеПоля) -2);
			Иначе
				ЗначениеПоляСокр = ЗначениеПоля;
			КонецЕсли;
			
			МассивДанныхОбразец[Сч].Добавить(СокрЛП(ЗначениеПоляСокр));
			Сч = Сч + 1;
		КонецЦикла;
		
		Для СчЦикла = Сч По МассивДанныхОбразец.ВГраница() Цикл
			МассивДанныхОбразец[СчЦикла].Добавить("");
		КонецЦикла;
	КонецЦикла;
	
	ФайлОбменаОбъект.Закрыть();
	
	ДополнительныеПараметры.Вставить("МассивДанныхОбразец", МассивДанныхОбразец);
	
	Возврат Истина;
	
КонецФункции // ПрочитатьОбразецTXT()

// Функция - Прочитать сначала EXCELПотом open office
//
// Параметры:
//  Путь				 - Строка	 - Путь к данным
//  ПараметрыДействия	 - Структура - Параметры действия.
// 
// Возвращаемое значение:
//  Булево - Булево.
//
Функция ПрочитатьСначалаEXCELПотомOpenOffice(Путь, ПараметрыДействия) Экспорт
	
	MSOfficeДоступен = Ложь;
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		MSOfficeДоступен = Истина;
	Исключение
		MSOfficeДоступен = Ложь;
	КонецПопытки;
	
	Если MSOfficeДоступен Тогда
		Возврат ПрочитатьДанныеИзEXCEL(Путь, Ложь, ПараметрыДействия);
	КонецЕсли;
	
	OpenOfficeДоступен = Ложь;
	Попытка
		ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
		Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
		Params = MakePropertyValue(ServiceManager, "Hidden", Истина);
		Args = Новый COMSafeArray("VT_DISPATCH", 1);
		Args.SetValue(0, Params);
		OpenOfficeДоступен = Истина;
	Исключение
		OpenOfficeДоступен = Ложь;
	КонецПопытки;

	Если OpenOfficeДоступен Тогда
		Возврат ПрочитатьДанныеИзOpenOffice(Путь, Ложь, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыДействия.ЖурналЗагрузки.Примечание = "Ошибка: На компьютере не установлен Microsoft Office или Open Office.";
	
	Возврат Ложь;
	
КонецФункции // ПрочитатьXLS()

// Функция - Прочитать сначала open office потом EXCEL
//
// Параметры:
//  Путь				 - Строка	 - Путь к данным
//  ПараметрыДействия	 - Структура - Параметры действия.
// 
// Возвращаемое значение:
//  Булево - Булево.
//
Функция ПрочитатьСначалаOpenOfficeПотомEXCEL(Путь, ПараметрыДействия) Экспорт
	
	OpenOfficeДоступен = Ложь;
	Попытка
		ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
		Desktop        = ServiceManager.createInstance("com.sun.star.frame.Desktop");
		Params         = MakePropertyValue(ServiceManager, "Hidden", Истина);
		
		Args = Новый COMSafeArray("VT_DISPATCH", 1);
		Args.SetValue(0, Params);
		
		OpenOfficeДоступен = Истина;
	Исключение
		OpenOfficeДоступен = Ложь;
	КонецПопытки;

	Если OpenOfficeДоступен Тогда
		Возврат ПрочитатьДанныеИзOpenOffice(Путь, Ложь, ПараметрыДействия);
	КонецЕсли;
	
	MSOfficeДоступен = Ложь;
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		MSOfficeДоступен = Истина;
	Исключение
		MSOfficeДоступен = Ложь;
	КонецПопытки;
	
	Если MSOfficeДоступен Тогда
		Возврат ПрочитатьДанныеИзEXCEL(Путь, Ложь, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыДействия.ЖурналЗагрузки.Примечание = "Ошибка: На компьютере не установлен Microsoft Office или Open Office.";
	
	Возврат Ложь;
	
КонецФункции // ПрочитатьОО()

// Функция - Сохранить соответствие данных в регистр
//
// Параметры:
//  СоответствиеДанных	 - Соответствие	 - Соответствие данных
//  ПараметрыДействия	 - Структура	 - Параметры действия.
// 
// Возвращаемое значение:
//  Булево - булево.
//
Функция СохранитьСоответствиеДанныхВРегистр(СоответствиеДанных, ПараметрыДействия) Экспорт
	
	// сначала очистим таблицу
	ПараметрыДействия.ТаблицаПрайсЛиста.Очистить();
	Результат = Ложь;
	
	Для Каждого ЭлементСоответствия Из СоответствиеДанных Цикл
		Условие = Новый Структура("ИмяЛиста", ЭлементСоответствия.Ключ);
		СтрокиТекущегоЛиста = ПараметрыДействия.СтруктураСтраницПрайсЛиста.НайтиСтроки(Условие);
		Если СтрокиТекущегоЛиста.Количество() > 0 Тогда
			ПараметрыДействия.Вставить("СтрокаЗагружаемойСтраницы", СтрокиТекущегоЛиста[0]);
		Иначе
			Условие = Новый Структура("Использовать", Истина);
			ИспользуемыеСтраницы = ПараметрыДействия.СтруктураСтраницПрайсЛиста.НайтиСтроки(Условие);
			Если ИспользуемыеСтраницы.Количество() > 0 Тогда
				ПараметрыДействия.Вставить("СтрокаЗагружаемойСтраницы", ИспользуемыеСтраницы[0]);
			Иначе
				ПараметрыДействия.Вставить("СтрокаЗагружаемойСтраницы", ПараметрыДействия.СтруктураСтраницПрайсЛиста[0]);
			КонецЕсли;
		КонецЕсли;
		
		// На первом заходе надо проверить строку заголовков и удалить лишние строки
		Результат = РазобратьМассивДанных(ЭлементСоответствия.Значение, ПараметрыДействия, Ложь);
	КонецЦикла;
	
	СоответствиеДанных = Неопределено;
	
	Если Не Результат Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Сохраним данные во временный регистр
	Если НЕ ОбработатьТЗПрайсЛиста(ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции //СохранитьМассивДанныхВРегистр()

// Функция - Обработать ТЗПрайс листа
//
// Параметры:
//  ПараметрыДействия	 - Структура	 - Параметры действия
// 
// Возвращаемое значение:
//  Булево - Булево.
//
Функция ОбработатьТЗПрайсЛиста(ПараметрыДействия) Экспорт
	ТаблицаПрайсЛиста    = ПараметрыДействия.ТаблицаПрайсЛиста;
	ПрайсЛистКонтрагента = ПараметрыДействия.ПрайсЛист;
	
	УдалитьДублиВТаблицеПрайсЛиста(ТаблицаПрайсЛиста, ПрайсЛистКонтрагента);
	
	ВыполнитьПроверкуНаСоответствиеПравиламЗагрузки(ТаблицаПрайсЛиста, ПрайсЛистКонтрагента);
	
	ПолеПроизводитель = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "Производитель"));
	Если ПолеПроизводитель.Количество() > 0 И ПустаяСтрока(ПолеПроизводитель[0].ИмяПоляФайла) Тогда
		
		// У нас ранее могли сопоставить производителя по ключевому полю или полю ПроизводительВПрайсЛисте
		// А всем остальным записям присвоим производителя, указанного в самом прайс-листе!
		// Если производитель в прайс-листе не указан ничего делать не требуется.
		Если ЗначениеЗаполнено(ПараметрыДействия.РеквизитыПрайсЛиста.Производитель) Тогда
			
			КолонкаПроизводитель = Новый Массив();
			КолонкаПроизводительВПрайсЛисте = Новый Массив();
			
			Для Каждого СтрокаПрайса Из ТаблицаПрайсЛиста Цикл
				
				Если ЗначениеЗаполнено(СтрокаПрайса.Производитель) Тогда
					
					КолонкаПроизводитель.Добавить(СтрокаПрайса.Производитель);
					КолонкаПроизводительВПрайсЛисте.Добавить(СтрокаПрайса.ПроизводительВПрайсЛисте);
					Продолжить;
					
				КонецЕсли;
				
				КолонкаПроизводитель.Добавить(ПараметрыДействия.РеквизитыПрайсЛиста.Производитель);
				КолонкаПроизводительВПрайсЛисте.Добавить(ПараметрыДействия.РеквизитыПрайсЛиста.ПроизводительНаименование);
				
			КонецЦикла;
			
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(КолонкаПроизводитель, "Производитель");
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(КолонкаПроизводительВПрайсЛисте, "ПроизводительВПрайсЛисте");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрайсЛистКонтрагента.ВидПрайсЛиста <> Перечисления.ВидыПрайсЛистов.ОстаткиДляКаталогаПредложений Тогда
		ПолеВалюта = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.
			НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "Валюта"));
		
		Если ПолеВалюта.Количество() > 0 И ПустаяСтрока(ПолеВалюта[0].ИмяПоляФайла) Тогда
			ТаблицаПрайсЛиста.ЗаполнитьЗначения(ПрайсЛистКонтрагента.Валюта, "Валюта");
		КонецЕсли;
		
		ПолеСрокПоставки = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "СрокПоставки"));
		Если ПолеСрокПоставки.Количество() = 0 ИЛИ ПустаяСтрока(ПолеСрокПоставки[0].ИмяПоляФайла) Тогда
			ТаблицаПрайсЛиста.ЗаполнитьЗначения(ПрайсЛистКонтрагента.СрокПоставкиМинимальный, "СрокПоставкиМинимальный");
			ТаблицаПрайсЛиста.ЗаполнитьЗначения(ПрайсЛистКонтрагента.СрокПоставкиМаксимальный, "СрокПоставкиМаксимальный");
			
			ПредставлениеСрокаПоставки = ПрайсЛистыКонтрагентовКлиентСервер.
				ПредставлениеСрокаПоставкиИнтервал(ПрайсЛистКонтрагента.СрокПоставкиМинимальный, ПрайсЛистКонтрагента.СрокПоставкиМаксимальный);
				
			ТаблицаПрайсЛиста.ЗаполнитьЗначения(ПредставлениеСрокаПоставки, "СрокПоставки");
		КонецЕсли;
	Иначе
		ПолеЦена = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "Цена"));
		Если ПолеЦена.Количество() > 0 И ПустаяСтрока(ПолеЦена[0].ИмяПоляФайла) Тогда
			// Мы грузили цену из самого прайс-листа!!
			// Тогда и валюту загрузим из настроек этого же прайс-листа
			// Перекроем возможно загруженные значения из базового каталога.
			ПолеВалюта = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "Валюта"));
			Если ПолеВалюта.Количество() > 0 И ПустаяСтрока(ПолеВалюта[0].ИмяПоляФайла) Тогда
				ТаблицаПрайсЛиста.ЗаполнитьЗначения(ПрайсЛистКонтрагента.Валюта, "Валюта");
			КонецЕсли;
		КонецЕсли;
		
		ПолеСрокПоставкиКаталога = ПрайсЛистКонтрагента.БазовыйПрайсЛист.
			СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "СрокПоставки"));
		
		Если ПолеСрокПоставкиКаталога.Количество() = 0 ИЛИ ПустаяСтрока(ПолеСрокПоставкиКаталога[0].ИмяПоляФайла) Тогда
			// В базовом каталоге был не определен срок поставки
			// Тогда срок поставки возьмем из настроек прайс-листа
			// Перекроем возможно загруженные значения из каталога.
			ПолеСрокПоставки = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "СрокПоставки"));
			Если ПолеСрокПоставки.Количество() = 0 ИЛИ ПустаяСтрока(ПолеСрокПоставки[0].ИмяПоляФайла) Тогда
				ТаблицаПрайсЛиста.ЗаполнитьЗначения(ПрайсЛистКонтрагента.СрокПоставкиМинимальный, "СрокПоставкиМинимальный");
				ТаблицаПрайсЛиста.ЗаполнитьЗначения(ПрайсЛистКонтрагента.СрокПоставкиМаксимальный, "СрокПоставкиМаксимальный");
				
				ПредставлениеСрокаПоставки = ПрайсЛистыКонтрагентовКлиентСервер.ПредставлениеСрокаПоставкиИнтервал(
					ПрайсЛистКонтрагента.СрокПоставкиМинимальный, ПрайсЛистКонтрагента.СрокПоставкиМаксимальный);
					
				ТаблицаПрайсЛиста.ЗаполнитьЗначения(ПредставлениеСрокаПоставки, "СрокПоставки");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПолеКоличество = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.НайтиСтроки(
		Новый Структура("ИмяРеквизитаПрайсЛиста", "Количество"));
	Если ПолеКоличество.Количество() > 0 И ПустаяСтрока(ПолеКоличество[0].ИмяПоляФайла) Тогда
		ТаблицаПрайсЛиста.ЗаполнитьЗначения(ПрайсЛистКонтрагента.КоличествоПоУмолчанию, "Количество");
	КонецЕсли;
	
	ТаблицаПрайсЛиста.ЗаполнитьЗначения(ПрайсЛистКонтрагента, "ПрайсЛист");
	
	// Напоследок заполним АртикулДляПоиска
	Для Каждого СтрокаПрайса ИЗ ТаблицаПрайсЛиста Цикл
		СтрокаПрайса.АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(СтрокаПрайса.Артикул);
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(0, НСтр("ru = 'Выполняем запись во временное хранилище...'"));
	
	Если ТаблицаПрайсЛиста.Количество() > 2000 Тогда
		// В несколько приемов
		Сч = 0; СчИтераций = 0;
		КопияТЗПрайсЛиста      = ТаблицаПрайсЛиста.СкопироватьКолонки();
		ДатаЗаписиПорцииДанных = ТекущаяДатаСеанса();
		
		ВсегоСтрок = ТаблицаПрайсЛиста.Количество();
		
		Для Каждого СтрокаПрайсЛиста ИЗ ТаблицаПрайсЛиста Цикл
			КопияСтроки = КопияТЗПрайсЛиста.Добавить();
			ЗаполнитьЗначенияСвойств(КопияСтроки, СтрокаПрайсЛиста);
			Сч = Сч + 1;
			Если Сч >= 2000 Тогда
				КопияТЗПрайсЛиста.ЗаполнитьЗначения(ДатаЗаписиПорцииДанных, "ДатаЗаписи");
				
				ПараметрыДействия.РегистрПрайсЛистов.Отбор.ДатаЗаписи.Значение = ДатаЗаписиПорцииДанных;
				ПараметрыДействия.РегистрПрайсЛистов.Отбор.ДатаЗаписи.Использование = Истина;
				ПараметрыДействия.РегистрПрайсЛистов.Загрузить(КопияТЗПрайсЛиста);
				
				Попытка
					ПараметрыДействия.РегистрПрайсЛистов.Записать();
				Исключение
					ПараметрыДействия.ЖурналЗагрузки.Примечание =
						СтрШаблон(НСтр("ru = 'Ошибка записи части прайс-листа <%1> во временное хранилище: %2'"),
							ПрайсЛистКонтрагента,
							КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					Возврат Ложь;
				КонецПопытки;
				Сч = 0;
				
				Процент = Окр((СчИтераций*2000/ВсегоСтрок)*100, 2, РежимОкругления.Окр15как20);
				ДлительныеОперации.СообщитьПрогресс(Процент, НСтр("ru = 'Выполняем запись во временное хранилище...'"));
				СчИтераций = СчИтераций + 1;
				
				КопияТЗПрайсЛиста = ТаблицаПрайсЛиста.СкопироватьКолонки();
				Если ТекущаяДатаСеанса() <= ДатаЗаписиПорцииДанных Тогда
					ДатаЗаписиПорцииДанных = ДатаЗаписиПорцииДанных + 1;
				Иначе
					ДатаЗаписиПорцииДанных = ТекущаяДатаСеанса();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Сч > 0 Тогда
			Если ТекущаяДатаСеанса() <= ДатаЗаписиПорцииДанных Тогда
				ДатаЗаписиПорцииДанных = ДатаЗаписиПорцииДанных + 1;
			Иначе
				ДатаЗаписиПорцииДанных = ТекущаяДатаСеанса();
			КонецЕсли;
			КопияТЗПрайсЛиста.ЗаполнитьЗначения(ДатаЗаписиПорцииДанных, "ДатаЗаписи");
			
			ПараметрыДействия.РегистрПрайсЛистов.Отбор.ДатаЗаписи.Значение = ДатаЗаписиПорцииДанных;
			ПараметрыДействия.РегистрПрайсЛистов.Отбор.ДатаЗаписи.Использование = Истина;
			ПараметрыДействия.РегистрПрайсЛистов.Загрузить(КопияТЗПрайсЛиста);
			
			Попытка
				ПараметрыДействия.РегистрПрайсЛистов.Записать();
			Исключение
				ПараметрыДействия.ЖурналЗагрузки.Примечание =
					СтрШаблон(НСтр("ru = 'Ошибка записи части прайс-листа во временное хранилище: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Если ДатаЗаписиПорцииДанных <> Неопределено 
			И ТекущаяДатаСеанса() <= ДатаЗаписиПорцииДанных Тогда
			ДатаЗаписиПорцииДанных = ДатаЗаписиПорцииДанных + 1;
		Иначе
			ДатаЗаписиПорцииДанных = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ТаблицаПрайсЛиста.ЗаполнитьЗначения(ДатаЗаписиПорцииДанных, "ДатаЗаписи");
		
		ПараметрыДействия.РегистрПрайсЛистов.Отбор.ДатаЗаписи.Значение = ДатаЗаписиПорцииДанных;
		ПараметрыДействия.РегистрПрайсЛистов.Отбор.ДатаЗаписи.Использование = Истина;
		
		ПараметрыДействия.РегистрПрайсЛистов.Загрузить(ТаблицаПрайсЛиста);
		
		Попытка
			ПараметрыДействия.РегистрПрайсЛистов.Записать();
		Исключение
			ПараметрыДействия.ЖурналЗагрузки.Примечание =
				СтрШаблон(НСтр("ru = 'Ошибка записи части прайс-листа во временное хранилище: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(100, НСтр("ru = 'Выполняем запись во временное хранилище...'"));
	
	ТаблицаПрайсЛиста = Неопределено;
	ПараметрыДействия.ТаблицаПрайсЛиста.Очистить();
	
	Возврат Истина;
КонецФункции //ОбработатьТЗПрайсЛиста()

// Функция - M d5 hesh string
//
// Параметры:
//  Строка	 - Строка	 - Строка для хеширования
//  ЭтоФайл	 - Булево	 - Признак файла.
// 
// Возвращаемое значение:
//  Строка - Строка заменитель.
//
Функция MD5HeshString(Строка, ЭтоФайл = Ложь) Экспорт
	
	Hesh = Новый ХешированиеДанных(ХешФункция.MD5);
	Если НЕ ЭтоФайл Тогда
		Hesh.Добавить(Строка);
	Иначе
		Hesh.ДобавитьФайл(Строка);
	КонецЕсли;
	
	Возврат СтрЗаменить(Hesh.ХешСумма," ","");
	
КонецФункции

// Функция - Извлечь из архива
//
// Параметры:
//  НайденныйФайл	 - Файл	 - Файл.
// 
// Возвращаемое значение:
//   Нет. 
//
Функция ИзвлечьИзАрхива(НайденныйФайл) Экспорт
	
	// если это zip распакуем средствами системы
	
КонецФункции

// Процедура - Провести действие после загрузки
//
// Параметры:
//  Действие	 - Перечисление	 - Действия с загружаемым файлом
//  ПутьКФайлу	 - Строка		 - Путь к файлу
//  ПутьКАрхиву	 - Строка		 - Путь к архиву.
//
Процедура ПровестиДействиеПослеЗагрузки(Действие, ПутьКФайлу, ПутьКАрхиву) Экспорт
	Перем ФайлДействия, АрхивДействия;
	
	Если Действие = Перечисления.ДействияСЗагруженнымФайлом.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	ФайлДействия = Новый Файл(ПутьКФайлу);
	Если ЗначениеЗаполнено(ПутьКАрхиву) Тогда
		АрхивДействия = Новый Файл(ПутьКАрхиву);
	КонецЕсли;
	
	Если НЕ ФайлДействия.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Если Действие = Перечисления.ДействияСЗагруженнымФайлом.Переименовывать Тогда
		
		НовоеИмя = "Upload_" + ФайлДействия.Имя;
		НовоеИмя = ПрайсЛистыКонтрагентовКлиентСервер.ДобавитьРазделительКаталога(ФайлДействия.Путь, НовоеИмя);
		
		ПереместитьФайл(ФайлДействия.ПолноеИмя, НовоеИмя);
		
		Если АрхивДействия <> Неопределено И АрхивДействия.Существует() Тогда
			НовоеИмя = "Upload_" + АрхивДействия.Имя;
			НовоеИмя = ПрайсЛистыКонтрагентовКлиентСервер.ДобавитьРазделительКаталога(АрхивДействия.Путь, НовоеИмя);
		
			ПереместитьФайл(АрхивДействия.ПолноеИмя, НовоеИмя);
		КонецЕсли;
		
	ИначеЕсли Действие = Перечисления.ДействияСЗагруженнымФайлом.Переносить Тогда
		
		ПутьККаталогуUpload = ПрайсЛистыКонтрагентовКлиентСервер.
			ДобавитьРазделительКаталога(ФайлДействия.Путь, "upload" + ПолучитьРазделительПутиСервера());
		
		КаталогуUpload = Новый Файл(ПутьККаталогуUpload);
		Если НЕ КаталогуUpload.Существует() Тогда
			СоздатьКаталог(ПутьККаталогуUpload);
		КонецЕсли;
		
		НовоеИмяФайла = ПрайсЛистыКонтрагентовКлиентСервер.
			ДобавитьРазделительКаталога(ПутьККаталогуUpload, ФайлДействия.Имя);
		
		ПереместитьФайл(ФайлДействия.ПолноеИмя, НовоеИмяФайла);
		
		Если АрхивДействия <> Неопределено И АрхивДействия.Существует() Тогда
			НовоеИмяФайла = ПрайсЛистыКонтрагентовКлиентСервер.
				ДобавитьРазделительКаталога(ПутьККаталогуUpload, АрхивДействия.Имя);
			
			ПереместитьФайл(АрхивДействия.ПолноеИмя, НовоеИмяФайла);
		КонецЕсли;
		
	ИначеЕсли Действие = Перечисления.ДействияСЗагруженнымФайлом.Удалять Тогда
		
		УдалитьФайлы(ФайлДействия.Путь, ФайлДействия.Имя);
		
		Если АрхивДействия <> Неопределено И АрхивДействия.Существует() Тогда
			УдалитьФайлы(АрхивДействия.Путь, АрхивДействия.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - чтение данных из табличного документа
//
// Параметры:
//  ПутьКФалу			 - Строка		 - Путь к файлу
//  ПараметрыДействия	 - Структура	 - Параметры действия.
// 
// Возвращаемое значение:
//  Булево - булево.
//
Функция ПрочитатьДанныеИзТабличногоДокумента(ПутьКФалу, ПараметрыДействия) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Прочитать(ПутьКФалу);

	АдресХранилища = ПоместитьВоВременноеХранилище(ТабличныйДокумент);
	ПараметрыДействия.Вставить("ТД", АдресХранилища);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Отказ = Ложь;
	
	Возврат ПолучитьТЗИзШаблонаНаСервере(ТаблицаДанных, ПараметрыДействия, Отказ);
	
КонецФункции

// Функция - получение образца данных из табличного документа
//
// Параметры:
//  ПутьКФалу			 - Строка		 - Путь к файлу
//  ПараметрыДействия	 - Структура	 - Параметры действия.
// 
// Возвращаемое значение:
//  Соответствие - данные прочитанные из документа.
//
Функция ПрочитатьОбразецДанныхИзТабличногоДокумента(ПутьКФалу, ПараметрыДействия) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Прочитать(ПутьКФалу);

	АдресХранилища = ПоместитьВоВременноеХранилище(ТабличныйДокумент);
	ПараметрыДействия.Вставить("ТД", АдресХранилища);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Отказ = Ложь;
	
	Возврат ПолучитьОбразецДанныхИзШаблонаНаСервере(ТаблицаДанных, ПараметрыДействия, Отказ);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьОшибку(ТекстОшибки)
	
	Возврат ПрайсЛистыКонтрагентовКлиентСервер.СформироватьОшибку(ТекстОшибки);
	
КонецФункции

Процедура УдалитьДублиВТаблицеПрайсЛиста(ТаблицаПрайсЛиста, ПрайсЛистКонтрагента)
	
	КоэффициентПересчетаВеса = ?(ПрайсЛистКонтрагента.КоэффициентПересчетаВеса = 0, 1, ПрайсЛистКонтрагента.КоэффициентПересчетаВеса);
	
	// сначала удалим неуникальные строки
	ТаблицаПрайсЛиста.Сортировать("КлючСтрокиПоставщика");
	
	ТекСтрока = Неопределено;
	Для Каждого СтрокаТЗ Из ТаблицаПрайсЛиста Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока) ИЛИ ТекСтрока.КлючСтрокиПоставщика <> СтрокаТЗ.КлючСтрокиПоставщика Тогда
			ТекСтрока = СтрокаТЗ;
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.ЕстьДубли = Истина;
		Если СтрокаТЗ.Количество = Истина ИЛИ ТекСтрока.Количество = Истина Тогда
			ТекСтрока.Количество = Истина;
		ИначеЕсли ТекСтрока.Количество = Ложь ИЛИ ТекСтрока.Количество = Неопределено Тогда
			ТекСтрока.Количество = СтрокаТЗ.Количество;
		ИначеЕсли ТипЗнч(СтрокаТЗ.Количество) = Тип("Число") Тогда
			ТекСтрока.Количество = ТекСтрока.Количество + СтрокаТЗ.Количество;
		КонецЕсли;
		
		СтрокаТЗ.КлючСтрокиПоставщика = "";
		ТекСтрока.Вес = ТекСтрока.Вес / КоэффициентПересчетаВеса;
	КонецЦикла;
	
	НайденныеСтроки = ТаблицаПрайсЛиста.НайтиСтроки(Новый Структура("КлючСтрокиПоставщика", ""));
	Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
		ТаблицаПрайсЛиста.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуНаСоответствиеПравиламЗагрузки(ТаблицаПрайсЛиста, ПрайсЛист)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаЗагрузки.НазначениеПравила КАК НазначениеПравила,
	|	ПравилаЗагрузки.ОбъектПравила КАК ОбъектПравила,
	|	ПравилаЗагрузки.ВидПравила КАК ВидПравила,
	|	ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста,
	|	ПравилаЗагрузки.Значение,
	|	ПравилаЗагрузки.ПорядокПрименения КАК ПорядокПрименения,
	|	ВЫБОР
	|		КОГДА ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокНазначения
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|ГДЕ
	|	ПравилаЗагрузки.ПрайсЛист = &ПрайсЛист
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокНазначения,
	|	ОбъектПравила,
	|	ВидПравила,
	|	ПорядокПрименения
	|ИТОГИ ПО
	|	НазначениеПравила,
	|	ОбъектПравила,
	|	ВидПравила";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	
	// Общие для всех прайс-листов правила распространяются только на преобразования артикулов по шаблону
	// и бывают при НазначенииПравила = 3 // Для сопоставленного производителя.
	ВыборкаНазначенийПравил = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтраыйПроцент = Неопределено; Сч = 1;
	Пока ВыборкаНазначенийПравил.Следующий() Цикл
		
		Процент = (Сч/ВыборкаНазначенийПравил.Количество())*100;
		Если Процент <> СтраыйПроцент Тогда
			ДлительныеОперации.СообщитьПрогресс(Процент, НСтр("ru = 'Применяем правила загрузки...'"));
			СтраыйПроцент = Процент;
		КонецЕсли;
		
		Сч = Сч + 1;
		
		Если ВыборкаНазначенийПравил.НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.КлючСтроки Тогда
			ВыборкаКлючСтрокиПоставщика = ВыборкаНазначенийПравил.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКлючСтрокиПоставщика.Следующий() Цикл
				НайденнаяСтрока = ТаблицаПрайсЛиста.Найти(ВыборкаКлючСтрокиПоставщика.ОбъектПравила, "КлючСтрокиПоставщика");
				Если НайденнаяСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ВыборкаВидаПравила = ВыборкаКлючСтрокиПоставщика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидаПравила.Следующий() Цикл
					Если ВыборкаВидаПравила.ВидПравила = Перечисления.ВидыПравилЗагрузки.НеЗагружать Тогда
						НайденнаяСтрока.ЗапретЗагрузки = Истина;
						Прервать;
					КонецЕсли;
					
					ВыборкаДетальныхЗаписей = ВыборкаВидаПравила.Выбрать();
					Пока ВыборкаДетальныхЗаписей.Следующий() Цикл 
						Если ВыборкаДетальныхЗаписей.ВидПравила = Перечисления.ВидыПравилЗагрузки.ПрисвоитьЗначение Тогда
							Если ВыборкаДетальныхЗаписей.ИмяРеквизитаПрайсЛиста = "Номенклатура" Тогда
								Продолжить;
							КонецЕсли;
							НайденнаяСтрока[ВыборкаДетальныхЗаписей.ИмяРеквизитаПрайсЛиста] = ВыборкаДетальныхЗаписей.Значение;
						КонецЕсли
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ВыборкаНазначенийПравил.НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте Тогда
			ВыборкаОбъектовНазначенияПравил = ВыборкаНазначенийПравил.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ПроизводителиВПрайсЛисте = ТаблицаПрайсЛиста.Скопировать(, "ПроизводительВПрайсЛисте");
			ПроизводителиВПрайсЛисте.Свернуть("ПроизводительВПрайсЛисте");
			
			Для Каждого СтрПроизводительВПрайсЛисте Из ПроизводителиВПрайсЛисте Цикл
				ПроизводительВПрайсЛисте = СтрПроизводительВПрайсЛисте.ПроизводительВПрайсЛисте;
				
				НайденнаяСтрока = ТаблицаПрайсЛиста.Найти(ПроизводительВПрайсЛисте, "ПроизводительВПрайсЛисте");
				Если НайденнаяСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ВыборкаОбъектовНазначенияПравил.Сбросить();
				Пока ВыборкаОбъектовНазначенияПравил.НайтиСледующий(Новый Структура("ОбъектПравила",ПроизводительВПрайсЛисте)) Цикл
					ВыборкаВидаПравила = ВыборкаОбъектовНазначенияПравил.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидаПравила.Следующий() Цикл 
						ВидПравила = ВыборкаВидаПравила.ВидПравила;
						Если ВидПравила = Перечисления.ВидыПравилЗагрузки.НеЗагружать Тогда  //применяется ко всей строке прайс-листа
							
							ВыборкаДетальныхЗаписей = ВыборкаВидаПравила.Выбрать();
							Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
								Отбор = Новый Структура("ПроизводительВПрайсЛисте, Производитель",
									ПроизводительВПрайсЛисте, ВыборкаДетальныхЗаписей.Значение);
								
								НайденныеСтроки = ТаблицаПрайсЛиста.НайтиСтроки(Отбор);
								Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
									ТаблицаПрайсЛиста.Удалить(НайденнаяСтрока);
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		// 3 - Сопоставленный производитель = ОбъектПравила (СправочникСсылка.Производители).
		ИначеЕсли ВыборкаНазначенийПравил.НазначениеПравила = Перечисления.НазначениеПравилЗагрузки.Производитель Тогда
			
			ВыборкаОбъектовНазначенияПравил = ВыборкаНазначенийПравил.Выбрать();
			
			Производители = ТаблицаПрайсЛиста.Скопировать(,"Производитель");
			Производители.Свернуть("Производитель");
			
			Для Каждого СтрокаПроизводитель Из Производители Цикл
				НайденныеСтроки = ТаблицаПрайсЛиста.НайтиСтроки(Новый Структура("Производитель", СтрокаПроизводитель.Производитель));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ВыборкаОбъектовНазначенияПравил.Сбросить();
				Пока ВыборкаОбъектовНазначенияПравил.НайтиСледующий(Новый Структура("ОбъектПравила", СтрокаПроизводитель.Производитель)) Цикл
					ВидПравила = ВыборкаОбъектовНазначенияПравил.ВидПравила;
					
					Если ВидПравила = Перечисления.ВидыПравилЗагрузки.НеЗагружать Тогда  //удалим строки из ТЗ
						Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
							ТаблицаПрайсЛиста.Удалить(НайденнаяСтрока);
						КонецЦикла;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Определяет список полей, которых нет в прайс-листе остатков и их необходимо загрузить из базового прайс-листа.
//
Функция ПоляДляЗаполненияИзБазовогоПрайсЛиста(ПрайсЛист)
	
	ПоляДляЗаполнения = Новый Массив;
	ПоляДляЗаполнения.Добавить("Артикул");
	ПоляДляЗаполнения.Добавить("Производитель");
	ПоляДляЗаполнения.Добавить("Наименование");
	ПоляДляЗаполнения.Добавить("НаименованиеИностранное");
	ПоляДляЗаполнения.Добавить("Цена");
	ПоляДляЗаполнения.Добавить("Валюта");
	ПоляДляЗаполнения.Добавить("КратностьПоставок");
	ПоляДляЗаполнения.Добавить("СрокПоставки");
	ПоляДляЗаполнения.Добавить("ЗапретПродажи");
	ПоляДляЗаполнения.Добавить("ЗапретЗакупки");
	ПоляДляЗаполнения.Добавить("ТегПозиции");
	ПоляДляЗаполнения.Добавить("СнятаСПроизводства");
	ПоляДляЗаполнения.Добавить("Вес");
	ПоляДляЗаполнения.Добавить("Объем");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.ИмяПоляФайла КАК ИмяПоляФайла,
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.ИмяРеквизитаПрайсЛиста КАК ИмяРеквизитаПрайсЛиста
	|ИЗ
	|	Справочник.ПрайсЛистыКонтрагентов.СтруктураФайлаПрайсЛиста КАК ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста
	|ГДЕ
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.Ссылка = &ПрайсЛист
	|	И ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.ИмяПоляФайла <> """"");
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ИндексПоля = ПоляДляЗаполнения.Найти(Выборка.ИмяРеквизитаПрайсЛиста);
			
			Если ИндексПоля <> Неопределено Тогда
				
				ПоляДляЗаполнения.Удалить(ИндексПоля);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПоляДляЗаполнения.Найти("СрокПоставки") <> Неопределено Тогда
		
		ПоляДляЗаполнения.Добавить("СрокПоставкиМинимальный");
		ПоляДляЗаполнения.Добавить("СрокПоставкиМаксимальный");
		
	КонецЕсли;
	
	Если ПоляДляЗаполнения.Найти("Производитель") <> Неопределено Тогда
		
		ПоляДляЗаполнения.Добавить("ПроизводительВПрайсЛисте");
		
	КонецЕсли;
	
	Если ПоляДляЗаполнения.Найти("Артикул") <> Неопределено Тогда
		
		ПоляДляЗаполнения.Добавить("АртикулДляПоиска");
		
	КонецЕсли;
	
	Возврат ПоляДляЗаполнения;
	
КонецФункции

Функция НовыйЗапросБазовогоЛокальногоПрайсЛиста(ДанныеПрайса, Поля)
	
	ПостроительЗапроса = Новый ПостроительЗапроса(
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК ПрайсЛистыКонтрагентов
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.ПрайсЛист = &БазовыйПрайсЛист
	|	И ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика В(&КлючСтрокиПоставщика)");
	
	ПостроительЗапроса.ЗаполнитьНастройки();
	ПостроительЗапроса.ВыбранныеПоля.Очистить();
	ПостроительЗапроса.ВыбранныеПоля.Добавить("КлючСтрокиПоставщика", "КлючСтрокиПоставщика");
	
	Для Каждого Поле Из Поля Цикл
		
		ПостроительЗапроса.ВыбранныеПоля.Добавить(Поле, Поле);
		
	КонецЦикла;
	
	ЗапросКаталогаПредложений = ПостроительЗапроса.ПолучитьЗапрос();
	ЗапросКаталогаПредложений.УстановитьПараметр("БазовыйПрайсЛист", ДанныеПрайса.БазовыйПрайсЛист);
	Возврат ЗапросКаталогаПредложений;
	
КонецФункции

Функция НовыйЗапросБазовогоВнешнегоПрайсЛиста(ДанныеПрайса, Поля)
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("КлючСтрокиПоставщика");
	Результат.Индексы.Добавить("КлючСтрокиПоставщика");
	СвязьПолей = Новый Соответствие();
	КлючевыеПоля = Новый Массив();
	ШаблонВыбранныхПолей = Новый Массив();
	ШаблонОтбора = Новый Массив();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.ИмяРеквизитаПрайсЛиста КАК ИмяРеквизитаПрайсЛиста,
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.ИмяПоляФайла КАК ИмяПоляФайла,
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.Ключевое КАК Ключевое
	|ИЗ
	|	Справочник.ПрайсЛистыКонтрагентов.СтруктураФайлаПрайсЛиста КАК ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста
	|ГДЕ
	|	ПрайсЛистыКонтрагентовСтруктураФайлаПрайсЛиста.Ссылка = &ПрайсЛист");
	Запрос.УстановитьПараметр("ПрайсЛист", ДанныеПрайса.БазовыйПрайсЛист);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если (Поля.Найти(Выборка.ИмяРеквизитаПрайсЛиста) = Неопределено И НЕ Выборка.Ключевое)
			ИЛИ ПустаяСтрока(Выборка.ИмяПоляФайла) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СвязьПолей.Вставить(Выборка.ИмяПоляФайла, Выборка.ИмяРеквизитаПрайсЛиста);
		СвязьПолей.Вставить(Выборка.ИмяРеквизитаПрайсЛиста, Выборка.ИмяПоляФайла);
		Результат.Колонки.Добавить(Выборка.ИмяРеквизитаПрайсЛиста);
		ШаблонВыбранныхПолей.Добавить("%1.[" + Выборка.ИмяПоляФайла + "]");
		
		Если Выборка.Ключевое Тогда
			
			КлючевыеПоля.Добавить(Выборка.ИмяРеквизитаПрайсЛиста);
			ШаблонОтбора.Добавить("%1.[" + Выборка.ИмяПоляФайла + "] = '#Отбор" + Выборка.ИмяРеквизитаПрайсЛиста + "#'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Поле Из Поля Цикл
		
		Если СвязьПолей.Получить(Поле) = Неопределено Тогда
			
			Результат.Колонки.Добавить(Поле);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросКИсточнику = Новый Структура();
	ЗапросКИсточнику.Вставить("Результат", Результат);
	ЗапросКИсточнику.Вставить("СвязьПолей", СвязьПолей);
	ЗапросКИсточнику.Вставить("КлючевыеПоля", КлючевыеПоля);
	ЗапросКИсточнику.Вставить("ШаблонВыбранныхПолей", СтрСоединить(ШаблонВыбранныхПолей, ", "));
	ЗапросКИсточнику.Вставить("ШаблонОтбора", СтрШаблон("(%1)", СтрСоединить(ШаблонОтбора, " AND ")));
	ЗапросКИсточнику.Вставить("ПрайсЛист", ДанныеПрайса.БазовыйПрайсЛист);
	Возврат ЗапросКИсточнику;
	
КонецФункции

Функция ВыполнитьЗапросКаталогаПредложений(Запрос, ПоХешу, Хеши, Ключи)
	
	Если ПоХешу Тогда
		
		Запрос.УстановитьПараметр("КлючСтрокиПоставщика", Хеши);
		Результат = Запрос.Выполнить().Выгрузить();
		Результат.Индексы.Добавить("КлючСтрокиПоставщика");
		Возврат Результат;
		
	КонецЕсли;
	
	ДанныеПрайсЛиста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запрос.ПрайсЛист, "СтрокаПодключения,ИмяТаблицы");
	
	Если НЕ ЗначениеЗаполнено(ДанныеПрайсЛиста.СтрокаПодключения) ИЛИ НЕ ЗначениеЗаполнено(ДанныеПрайсЛиста.ИмяТаблицы) Тогда
		
		Возврат Запрос.Результат;
		
	КонецЕсли;
	
	Попытка
		
		Connection = Новый COMОбъект("ADODB.Connection");
		Коннект = Connection.Open(ДанныеПрайсЛиста.СтрокаПодключения);
		
	Исключение
		
		Возврат Запрос.Результат;
		
	КонецПопытки;
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Recordset = Новый COMОбъект("ADODB.Recordset");
	Recordset.ActiveConnection = Connection;
	КлючиЧастями = Новый Массив();
	ТекущаяЧасть = Новый Массив();
	
	Для Каждого Ключ Из Ключи Цикл
		
		ТекущаяЧасть.Добавить(Ключ);
		
		Если ТекущаяЧасть.Количество() >= 100 Тогда
			
			КлючиЧастями.Добавить(ТекущаяЧасть);
			ТекущаяЧасть = Новый Массив();
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчИтераций = 0;
	ВсегоСтрок = Ключи.Количество();
	
	Для Каждого КлючиЧасть Из КлючиЧастями Цикл
		
		Отборы = Новый Массив();
		
		Для Каждого Ключ Из КлючиЧасть Цикл
			
			Шаблон = Запрос.ШаблонОтбора;
			
			Для Каждого КлючЗначение Из Ключ Цикл
				
				Шаблон = СтрЗаменить(Шаблон, "#Отбор" + КлючЗначение.Ключ + "#", КлючЗначение.Значение);
				
			КонецЦикла;
			
			Отборы.Добавить(Шаблон);
			
		КонецЦикла;
		
		Command.CommandText = СтрШаблон("SELECT %1 FROM %2 WHERE (%3)",
			СтрШаблон(Запрос.ШаблонВыбранныхПолей, ДанныеПрайсЛиста.ИмяТаблицы),
			ДанныеПрайсЛиста.ИмяТаблицы,
			СтрШаблон(СтрСоединить(Отборы, " OR "), ДанныеПрайсЛиста.ИмяТаблицы));
		
		Попытка
			
			Recordset = Command.Execute();
			
		Исключение
			
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Запрос.Результат;
			
		КонецПопытки;
		
		Пока НЕ Recordset.EOF Цикл
			
			НоваяСтрока = Запрос.Результат.Добавить();
			ЗначениеДляХеша = "";
			
			Для Каждого Field Из Recordset.Fields Цикл
				
				ИмяПоля = Запрос.СвязьПолей.Получить(Field.Name);
				
				Если ИмяПоля = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				НоваяСтрока[ИмяПоля] = Field.Value;
				
				Если ИмяПоля = "Производитель" Тогда
					
					НоваяСтрока["ПроизводительВПрайсЛисте"] = Field.Value;
					
				КонецЕсли;
				
				Если Запрос.КлючевыеПоля.Найти(ИмяПоля) <> Неопределено Тогда
					
					ЗначениеДляХеша = ЗначениеДляХеша + "_" + Field.Value;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока.КлючСтрокиПоставщика = НРег(MD5HeshString(ЗначениеДляХеша));
			RecordSet.MoveNext();
			
		КонецЦикла;
		
		Процент = Окр((СчИтераций * 100 / ВсегоСтрок) * 100, 2, РежимОкругления.Окр15как20);
		СчИтераций = СчИтераций + 1;
		ДлительныеОперации.СообщитьПрогресс(Процент, НСтр("ru = 'Чтение данных из базового прайс-листа...'"));
		
	КонецЦикла;
	
	Возврат Запрос.Результат;
	
КонецФункции

Функция ПолучитьДанныеКаталогаПредложений(ПрайсЛист, Хеши, Ключи)
	
	ДанныеПрайса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрайсЛист,
		"ВидПрайсЛиста,БазовыйПрайсЛист.ХранитьДанныеЛокально,БазовыйПрайсЛист");
	
	Если ДанныеПрайса.ВидПрайсЛиста <> Перечисления.ВидыПрайсЛистов.ОстаткиДляКаталогаПредложений Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат = Новый Структура();
	ПоляДляЗаполнения = ПоляДляЗаполненияИзБазовогоПрайсЛиста(ПрайсЛист);
	Результат.Вставить("СтруктураСтрокиКаталога", СтрСоединить(ПоляДляЗаполнения, ","));
	
	Если ДанныеПрайса.БазовыйПрайсЛистХранитьДанныеЛокально Тогда
		
		Запрос = НовыйЗапросБазовогоЛокальногоПрайсЛиста(ДанныеПрайса, ПоляДляЗаполнения);
		
	Иначе
		
		Запрос = НовыйЗапросБазовогоВнешнегоПрайсЛиста(ДанныеПрайса, ПоляДляЗаполнения);
		
	КонецЕсли;
	
	Результат.Вставить("ПоХешу", ДанныеПрайса.БазовыйПрайсЛистХранитьДанныеЛокально);
	Результат.Вставить("Данные", ВыполнитьЗапросКаталогаПредложений(Запрос, Результат.ПоХешу, Хеши, Ключи));
	Возврат Результат;
	
КонецФункции

#Область ПроцедурыРазбораЗначенийПрайслистов

Функция РазобратьВалюту(Знач ЗначениеПоля, ВалютаПрайсЛиста, КэшВалют=Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
		
		Возврат ВалютаПрайсЛиста;
		
	КонецЕсли;
	
	Если КэшВалют <> Неопределено Тогда
		
		ВалютаИзКэша = КэшВалют.Получить(ЗначениеПоля);
		
		Если ВалютаИзКэша <> Неопределено Тогда
			
			Возврат ВалютаИзКэша;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПоля) <> Тип("Число") Тогда
		
		КодВалюты = ВРег(СокрЛП(ЗначениеПоля));
		
		// Упрощенно возможные варианты
		// Доллар
		Если
			Найти(КодВалюты, "$") > 0
			ИЛИ ЛЕВ(КодВалюты, 1) = "U" // USD
			ИЛИ ЛЕВ(КодВалюты, 1) = "Д" // Доллар
		Тогда
			
			КодВалюты = "840";
			
		// Евро
		ИначеЕсли
			Найти(КодВалюты, "₤") > 0
			ИЛИ ЛЕВ(КодВалюты, 1) = "E" // EURO
			ИЛИ ЛЕВ(КодВалюты, 1) = "Е" // ЕВРО
		Тогда
			
			КодВалюты = "978";
			
		// Иена
		ИначеЕсли
			Найти(КодВалюты, "¥") > 0
			ИЛИ ЛЕВ(КодВалюты, 1) = "J" // JPY
			ИЛИ ЛЕВ(КодВалюты, 1) = "И" // ИЕНА
			ИЛИ ЛЕВ(КодВалюты, 1) = "Й" // ЙЕНА
		Тогда
			
			КодВалюты = "392";
			
		// Рубль
		ИначеЕсли
			ЛЕВ(КодВалюты, 1) = "R" // RUR, RUB
			ИЛИ ЛЕВ(КодВалюты, 1) = "Р" // РУБ
		Тогда
			
			КодВалюты = "643";
			
		КонецЕсли;
		
	Иначе
		
		КодВалюты = Формат(ЗначениеПоля, "ЧГ=0");
		
	КонецЕсли;
	
	Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП(КодВалюты));
	
	Если Валюта.Пустая() Тогда
		
		Валюта = Справочники.Валюты.НайтиПоНаименованию(КодВалюты);
		
	КонецЕсли;
	
	Если КэшВалют <> Неопределено Тогда
		
		КэшВалют.Вставить(ЗначениеПоля, Валюта);
		
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

Функция РазобратьЦену(Знач ЗначениеПоля,
											СоответствиеЦен,
											ВалютаПрайсЛиста,
											ВалютаВКолонкеЦена=Ложь,
											КэшВалют=Неопределено)
	Перем Валюта;
	
	Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
		
		Если ВалютаВКолонкеЦена Тогда
			
			Валюта = ВалютаПрайсЛиста;
			
		КонецЕсли;
		
		СтруктураЦены = Новый Структура("Цена, Валюта", ЗначениеПоля, Валюта);
		СоответствиеЦен.Вставить(ЗначениеПоля, СтруктураЦены);
		Возврат СтруктураЦены;
		
	КонецЕсли;
	
	ЗначениеПоляОриг = ЗначениеПоля;
	
	// $20.1  $20,1  20,1 руб. 20.1 руб.
	ЗначениеПоля = СтрЗаменить(ЗначениеПоля, " ", "");
	ЗначениеПоля = СтрЗаменить(ЗначениеПоля, Символы.ПС, "");
	ЗначениеПоля = СтрЗаменить(ЗначениеПоля, "'", "");
	ЗначениеПоля = СтрЗаменить(ЗначениеПоля, ".", ",");
	
	Попытка
		
		Цена = Число(ЗначениеПоля);
		
		Если ВалютаВКолонкеЦена Тогда
			
			Валюта = ВалютаПрайсЛиста;
			
		КонецЕсли;
		
		СтруктураЦены = Новый Структура("Цена, Валюта", Цена, Валюта);
		СоответствиеЦен.Вставить(ЗначениеПоляОриг, СтруктураЦены);
		
		Возврат СтруктураЦены;
		
	Исключение
		
		// Проверим соответствие. Возможно в нем уже есть, запись о разобранном значении
		ЭлементСоответствия = СоответствиеЦен.Получить(ЗначениеПоля);
		
		Если ЭлементСоответствия <> Неопределено Тогда
			
			Возврат ЭлементСоответствия;
			
		КонецЕсли;
		
	КонецПопытки;
	
	НоваяЦена = "";
	НоваяВалюта = "";
	
	Если Найти("0123456789", ЛЕВ(ЗначениеПоля, 1)) = 0 Тогда
		
		// Сначала Валюта
		НачаласьЦена = Ложь;
		
		Для Сч = 1 По СтрДлина(ЗначениеПоля) Цикл
			
			Если Найти(".,", Сред(ЗначениеПоля, Сч, 1)) > 0 Тогда
				
				Если НачаласьЦена Тогда
					
					Если Найти(НоваяЦена, ",") = 0 Тогда
						НоваяЦена = НоваяЦена + ",";
					КонецЕсли;
					
				Иначе
					
					Если Найти(НоваяВалюта, ".") = 0 Тогда
						НоваяВалюта = НоваяВалюта + ".";
					КонецЕсли;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Найти("0123456789", Сред(ЗначениеПоля, Сч, 1)) > 0 Тогда
				
				Если НЕ НачаласьЦена Тогда
					НачаласьЦена = Истина;
				КонецЕсли;
				
				НоваяЦена = НоваяЦена + Сред(ЗначениеПоля, Сч, 1);
				
			Иначе
				
				Если НачаласьЦена Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяВалюта = НоваяВалюта + Сред(ЗначениеПоля, Сч, 1);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Сначала Цена
		НачаласьВалюта = Ложь;
		
		Для Сч = 1 По СтрДлина(ЗначениеПоля) Цикл
			
			Если Найти(".,", Сред(ЗначениеПоля, Сч, 1)) > 0 Тогда
				
				Если НачаласьВалюта Тогда
					
					Если Найти(НоваяВалюта, ".") = 0 Тогда
						
						НоваяВалюта = НоваяВалюта + ".";
						
					КонецЕсли;
					
				Иначе
					
					Если Найти(НоваяЦена, ",") = 0 Тогда
						
						НоваяЦена = НоваяЦена + ",";
						
					КонецЕсли;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Найти("0123456789", Сред(ЗначениеПоля, Сч, 1)) > 0 Тогда
				
				// Сливаем все цифры в НоваяЦена, если не началась Валюта
				Если НачаласьВалюта Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				НоваяЦена = НоваяЦена + Сред(ЗначениеПоля, Сч, 1);
				
			Иначе
				
				// Сливаем все буквы в НоваяВалюта
				Если Не НачаласьВалюта Тогда
					
					НачаласьВалюта = Истина;
					
				КонецЕсли;
				
				НоваяВалюта = НоваяВалюта + Сред(ЗначениеПоля, Сч, 1);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		
		Цена = Число(НоваяЦена);
		
	Исключение
		
		Цена = 0;
		
	КонецПопытки;
	
	Если ВалютаВКолонкеЦена Тогда
		
		Если НЕ ЗначениеЗаполнено(НоваяВалюта) Тогда
			
			Валюта = ВалютаПрайсЛиста;
			
		Иначе
			
			Валюта = РазобратьВалюту(НоваяВалюта, ВалютаПрайсЛиста, КэшВалют);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЦены = Новый Структура("Цена, Валюта", Цена, Валюта);
	СоответствиеЦен.Вставить(ЗначениеПоляОриг, СтруктураЦены);
	Возврат СтруктураЦены;
	
КонецФункции

Функция РазобратьКоличество(ЗначениеПоля, Кэш)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
		
		Если ЗначениеПоля = 0 Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат ЗначениеПоля;
		
	КонецЕсли;
	
	ВРегЗначениеПоля = ВРег(СокрЛП(ЗначениеПоля));
	
	Если СтрНайти(ВРегЗначениеПоля, "НЕТ") > 0 ИЛИ СтрНайти(ВРегЗначениеПоля, "NO") > 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(ВРегЗначениеПоля, "НА") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтрНайти("*+VЕД><YОЗБМВСS123456789", ЛЕВ(ВРегЗначениеПоля, 1)) > 0 Тогда
		
		Попытка
			
			Возврат Число(ЗначениеПоля);
			
		Исключение
			
			КоличествоИзКэша = Кэш.Получить(ЗначениеПоля);
			
			Если КоличествоИзКэша <> Неопределено Тогда
				
				Возврат КоличествоИзКэша;
				
			КонецЕсли;
			
			РазобранноеЗначение = ВыделитьЧислоИзСтроки(ЗначениеПоля);
			Кэш.Вставить(ЗначениеПоля, РазобранноеЗначение);
			Возврат РазобранноеЗначение;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции //РазобратьКоличество()

Функция РазобратьМассивДанных(МассивДанных,
	ПараметрыДействия,
	ПроверитьЗаголовки = Истина) Экспорт
	
	ПрайсЛистКонтрагента      = ПараметрыДействия.ПрайсЛист;
	СтрокаЗагружаемойСтраницы = ПараметрыДействия.СтрокаЗагружаемойСтраницы;
	
	ВсегоСтолбцов = МассивДанных.Количество();
	Если ВсегоСтолбцов = 0 Тогда
		ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru='В файле нет колонок.'");
		Возврат Ложь;
	КонецЕсли;
	
	ВсегоСтрок = МассивДанных[0].Количество();
	Если ВсегоСтрок = 0 Тогда
		ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru='В файле нет строк с данными.'");
		Возврат Ложь;
	КонецЕсли;
	
	#Область ПроверкаЗаголовков
	
	Если ПроверитьЗаголовки И
		ПрайсЛистКонтрагента.ЗаголовкиКолонокВПрайсЛисте.Количество() > 0 И
		СтрокаЗагружаемойСтраницы.СтрокаЗаголовковКолонок > 0 Тогда
		
		СтрокаЗаголовкиКолонок = ПараметрыДействия.СтрокаЗагружаемойСтраницы.СтрокаЗаголовковКолонок;
		
		СмещениеКолонокПоГоризонтали = Неопределено;
		СмещениеКолонокПоВертикали   = Неопределено;
		
		Если СтрокаЗаголовкиКолонок > ВсегоСтрок Тогда
			ПараметрыДействия.ЖурналЗагрузки.Примечание = НСтр("ru='В файле нет строк с данными.'");
			Возврат Ложь;
		КонецЕсли;
		
		МассивПервыхСтрок = Новый Массив;
		
		Для СчСтрок = 1 По СтрокаЗаголовкиКолонок Цикл
			ЗаголовкиВФайле = Новый СписокЗначений;
			
			Для Сч = 1 ПО ВсегоСтолбцов Цикл
				ЗначениеПоля = МассивДанных[Сч-1][СчСтрок-1];
				Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
					ЗначениеПоля = Формат(ЗначениеПоля, "ЧГ=0");
				ИначеЕсли ТипЗнч(ЗначениеПоля) <> Тип("Строка") Тогда
					ЗначениеПоля = "" + ЗначениеПоля;
				КонецЕсли;
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					ЗаголовкиВФайле.Добавить(Формат(Сч,"ЧГ=0"), СокрЛП(ЗначениеПоля));
				Иначе
					ЗаголовкиВФайле.Добавить(Формат(Сч,"ЧГ=0"), Формат(Сч,"ЧГ=0"));
				КонецЕсли;
			КонецЦикла;
			
			МассивПервыхСтрок.Добавить(ЗаголовкиВФайле);
		КонецЦикла;
		
		СписокИспользуемыхКолонок = Новый СписокЗначений;
		// Используемые колонки
		Для Каждого ПолеЗагрузки Из ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста Цикл
			Если ПустаяСтрока(ПолеЗагрузки.ИмяПоляФайла) Тогда
				Продолжить;
			КонецЕсли;
			СписокИспользуемыхКолонок.Добавить(ПолеЗагрузки.ИмяПоляФайла);
		КонецЦикла;
		
		СтруктураЗаголовковСовпадает = Истина;
		
		Для Каждого ЗаголовокКолонки Из ПрайсЛистКонтрагента.ЗаголовкиКолонокВПрайсЛисте Цикл
			Если СписокИспользуемыхКолонок.НайтиПоЗначению(ЗаголовокКолонки.ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Попробуем поискать через смещение
			Для СчСтрок = 1 По СтрокаЗаголовкиКолонок Цикл
				ЗаголовкиВФайле = МассивПервыхСтрок[СчСтрок-1];
				Для Каждого ЗаголовокКолонкиФайла Из ЗаголовкиВФайле Цикл
					Если ЗаголовокКолонкиФайла.Представление = ЗаголовокКолонки.ПредставлениеКолонки Тогда
						// Попали на колонку с нужным наименованием
						НомерКолонки      = Число(ЗаголовокКолонки.ИмяКолонки);
						НомерКолонкиФайла = Число(ЗаголовокКолонкиФайла.Значение);
						
						СмещениеТекКолонки            = НомерКолонкиФайла - НомерКолонки;
						СмещениеТекКолонкиПоВертикали = СтрокаЗаголовкиКолонок - СчСтрок;
						
						Если СмещениеКолонокПоВертикали = Неопределено Тогда
							СмещениеКолонокПоВертикали = СмещениеТекКолонкиПоВертикали;
						Иначе
							Если СмещениеКолонокПоВертикали <> СмещениеТекКолонкиПоВертикали Тогда
								СмещениеКолонокПоВертикали = Неопределено;
								Прервать;
							КонецЕсли;
						КонецЕсли;
						
						Если СмещениеКолонокПоГоризонтали = Неопределено Тогда
							СмещениеКолонокПоГоризонтали = СмещениеТекКолонки;
						Иначе
							Если СмещениеКолонокПоГоризонтали <> СмещениеТекКолонки Тогда
								СмещениеКолонокПоГоризонтали = Неопределено;
								Прервать;
							КонецЕсли;
						КонецЕсли;
						
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если СмещениеКолонокПоГоризонтали = Неопределено ИЛИ СмещениеКолонокПоВертикали = Неопределено Тогда
				СтруктураЗаголовковСовпадает = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтруктураЗаголовковСовпадает Тогда
			ПараметрыДействия.ЖурналЗагрузки.Примечание =
				НСтр("ru = 'Различается структура заголовков сохраненная и в текущем файле.'");
			
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	ВсегоСтрок = МассивДанных[0].Количество();
	ИмяПоляВалюта = Неопределено; ИмяПоляЦена = Неопределено;
	
	СмещениеКолонокПоГоризонтали = ?(СмещениеКолонокПоГоризонтали = Неопределено, 0, СмещениеКолонокПоГоризонтали);
	
	Для Каждого ПолеЗагрузки Из ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста Цикл
		Если ПустаяСтрока(ПолеЗагрузки.ИмяПоляФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИмяЯчейки = Число(ПолеЗагрузки.ИмяПоляФайла) - 1 + СмещениеКолонокПоГоризонтали; // Ячейка из которой происходит загрузка
		Исключение
			НайденныеКолонки = ПрайсЛистКонтрагента.ЗаголовкиКолонокВПрайсЛисте.
				НайтиСтроки(Новый Структура("ИмяКолонки", ПолеЗагрузки.ИмяПоляФайла));
			Если НайденныеКолонки.Количество() > 0 Тогда
				ИмяЯчейки = НайденныеКолонки[0].НомерСтроки - 1;
			Иначе
				ИмяЯчейки = 0;
			КонецЕсли;
		КонецПопытки;
		
		Если ИмяЯчейки > МассивДанных.ВГраница() Тогда
			ПараметрыДействия.ЖурналЗагрузки.Примечание =
				СтрШаблон(НСтр("ru = 'Поле файла ''%1'', выбранное для реквизита <%2>, больше, чем количество колонок в файле.'"),
					ПолеЗагрузки.ИмяПоляФайла, ПолеЗагрузки.ИмяРеквизитаПрайсЛиста);
			
			Возврат Ложь;
		КонецЕсли;
		
		Если ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Цена" Тогда
			ИмяПоляЦена = ИмяЯчейки;
		КонецЕсли;
		
		Если ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Валюта" Тогда
			ИмяПоляВалюта = ИмяЯчейки;
		КонецЕсли;
	КонецЦикла;
	
	ВалютаВКолонкеЦена = ((ИмяПоляВалюта = ИмяПоляЦена) И ИмяПоляВалюта <> Неопределено) ИЛИ (ИмяПоляВалюта = Неопределено);
	
	// Особенные поля загрузки
	// КлючСтрокиПоставщика
	КлючевыеПоля = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.Выгрузить(Новый Структура("Ключевое", Истина));
	КлючевыеПоля.Колонки.Добавить("ИмяЯчейки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	Для Каждого ПолеЗагрузки Из КлючевыеПоля Цикл
		Попытка
			ИмяЯчейки = Число(ПолеЗагрузки.ИмяПоляФайла) - 1 + СмещениеКолонокПоГоризонтали; // Ячейка из которой происходит загрузка
		Исключение
			НайденныеКолонки = ПрайсЛистКонтрагента.ЗаголовкиКолонокВПрайсЛисте.
				НайтиСтроки(Новый Структура("ИмяКолонки", ПолеЗагрузки.ИмяПоляФайла));
			Если НайденныеКолонки.Количество() > 0 Тогда
				ИмяЯчейки = НайденныеКолонки[0].НомерСтроки - 1;
			Иначе
				ИмяЯчейки = 0;
			КонецЕсли;
		КонецПопытки;
		ПолеЗагрузки.ИмяЯчейки = ИмяЯчейки;
	КонецЦикла;
	
	// Наименование
	ПоляНаименование = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.Выгрузить(Новый Структура("ИмяРеквизитаПрайсЛиста", "Наименование"));
	ПоляНаименование.Колонки.Добавить("ИмяЯчейки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ПоляНаименование.Колонки.Добавить("ИспользоватьЗначениеПоУмолчанию", Новый ОписаниеТипов("Булево"));
	Сч = 0;
	Пока Сч < ПоляНаименование.Количество() Цикл
		ПолеЗагрузки = ПоляНаименование[Сч];
		
		Если ПустаяСтрока(ПолеЗагрузки.ИмяПоляФайла) И ПустаяСтрока(ПолеЗагрузки.ЗначениеПоУмолчанию) Тогда
			ПоляНаименование.Удалить(ПолеЗагрузки);
			Продолжить;
		КонецЕсли;
		Сч = Сч + 1;
		
		Если НЕ ПустаяСтрока(ПолеЗагрузки.ЗначениеПоУмолчанию) Тогда
			ПолеЗагрузки.ИспользоватьЗначениеПоУмолчанию = Истина;
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИмяЯчейки = Число(ПолеЗагрузки.ИмяПоляФайла) - 1 + СмещениеКолонокПоГоризонтали; // Ячейка из которой происходит загрузка
		Исключение
			НайденныеКолонки = ПрайсЛистКонтрагента.ЗаголовкиКолонокВПрайсЛисте.
				НайтиСтроки(Новый Структура("ИмяКолонки", ПолеЗагрузки.ИмяПоляФайла));
			Если НайденныеКолонки.Количество() > 0 Тогда
				ИмяЯчейки = НайденныеКолонки[0].НомерСтроки - 1;
			Иначе
				ИмяЯчейки = 0;
			КонецЕсли;
		КонецПопытки;
		ПолеЗагрузки.ИмяЯчейки = ИмяЯчейки;
	КонецЦикла;
	
	// НаименованиеИностранное
	ПоляНаименованиеИностранное = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.Выгрузить(Новый Структура("ИмяРеквизитаПрайсЛиста","НаименованиеИностранное"));
	ПоляНаименованиеИностранное.Колонки.Добавить("ИмяЯчейки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ПоляНаименованиеИностранное.Колонки.Добавить("ИспользоватьЗначениеПоУмолчанию", Новый ОписаниеТипов("Булево"));
	Сч = 0;
	Пока Сч < ПоляНаименованиеИностранное.Количество() Цикл
		ПолеЗагрузки = ПоляНаименованиеИностранное[Сч];
		Если ПустаяСтрока(ПолеЗагрузки.ИмяПоляФайла) Тогда
			ПоляНаименованиеИностранное.Удалить(ПолеЗагрузки);
			Продолжить;
		КонецЕсли;
		Сч = Сч + 1;
		
		Если НЕ ПустаяСтрока(ПолеЗагрузки.ЗначениеПоУмолчанию) Тогда
			ПолеЗагрузки.ИспользоватьЗначениеПоУмолчанию = Истина;
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИмяЯчейки = Число(ПолеЗагрузки.ИмяПоляФайла) - 1 + СмещениеКолонокПоГоризонтали; // Ячейка из которой происходит загрузка
		Исключение
			НайденныеКолонки = ПрайсЛистКонтрагента.ЗаголовкиКолонокВПрайсЛисте.
				НайтиСтроки(Новый Структура("ИмяКолонки", ПолеЗагрузки.ИмяПоляФайла));
			Если НайденныеКолонки.Количество() > 0 Тогда
				ИмяЯчейки = НайденныеКолонки[0].НомерСтроки - 1;
			Иначе
				ИмяЯчейки = 0;
			КонецЕсли;
		КонецПопытки;
		ПолеЗагрузки.ИмяЯчейки = ИмяЯчейки;
	КонецЦикла;
	
	ПоляАртикул = ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста.НайтиСтроки(Новый Структура("ИмяРеквизитаПрайсЛиста", "Артикул"));
	
	ИмяЯчейкиАртикул = Неопределено;
	Если ПоляАртикул.Количество() > 0 Тогда
		Если НЕ ПустаяСтрока(ПоляАртикул[0].ИмяПоляФайла) Тогда
			Попытка
				ИмяЯчейкиАртикул = Число(ПоляАртикул[0].ИмяПоляФайла) - 1 + СмещениеКолонокПоГоризонтали; // Ячейка из которой происходит загрузка
			Исключение
				НайденныеКолонки = ПрайсЛистКонтрагента.ЗаголовкиКолонокВПрайсЛисте.
				НайтиСтроки(Новый Структура("ИмяКолонки", ПоляАртикул[0].ИмяПоляФайла));
				Если НайденныеКолонки.Количество() > 0 Тогда
					ИмяЯчейкиАртикул = НайденныеКолонки[0].НомерСтроки - 1;
				Иначе
					ИмяЯчейкиАртикул = 0;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ВсегоСтрок = МассивДанных[0].Количество();
	
	МассивСч                      = Новый Массив;
	МассивХеш                     = Новый Массив;
	МассивНаименований            = Новый Массив;
	МассивНаименованийИностранных = Новый Массив;
	МассивАртикулов               = Новый Массив;
	МассивОП                      = Новый Массив;
	ЗначенияКлючевыхПолей         = Новый Массив;
	ВыводитьСообщенияПользователю = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВыводитьСообщенияПользователю", Истина);
	
	ТаблицаПрайсЛиста = ПараметрыДействия.ТаблицаПрайсЛиста.Скопировать();
	ТаблицаПрайсЛиста.Очистить();
	
	ЕстьОстальныеПоля = Неопределено; Сч = 0; СтарыйПроцент = Неопределено;
	Пока Сч < ВсегоСтрок Цикл
		Сч = Сч + 1;
		
		Процент = Окр((Сч/ВсегоСтрок)*100, 2, РежимОкругления.Окр15как20);
		
		Если ВыводитьСообщенияПользователю И Процент <> СтарыйПроцент Тогда
			ТекстСообщения =
				СтрШаблон(НСтр("ru = 'Обработка прочитанных данных с листа <%1>...'"), СтрокаЗагружаемойСтраницы.ИмяЛиста);
			
			ДлительныеОперации.СообщитьПрогресс(Процент, ТекстСообщения);
			СтарыйПроцент = Процент;
		КонецЕсли;
		
		КлючСтрокиПоставщика = ""; ПустойКлюч = Истина; Ключ = Новый Структура();
		
		Для Каждого ПолеЗагрузки Из КлючевыеПоля Цикл
			ЗначениеПоля = МассивДанных[ПолеЗагрузки.ИмяЯчейки][Сч-1];
			Если ТипЗнч(ЗначениеПоля) = Тип("Число") И Не ПрайсЛистКонтрагента.НеФорматироватьКлючевыеПоля Тогда
				ЗначениеПоля = Формат(ЗначениеПоля, "ЧГ=0");
			КонецЕсли;
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, "'", ""); // ived фильтруем символ для БК
			Ключ.Вставить(ПолеЗагрузки.ИмяРеквизитаПрайсЛиста, ЗначениеПоля);
			КлючСтрокиПоставщика = КлючСтрокиПоставщика + "_" + СокрЛП(ЗначениеПоля);
			Если Не ПустаяСтрока(ЗначениеПоля) Тогда
				ПустойКлюч = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		// Если ключ строки пустой, то пропускаем эту строку
		Если ПустойКлюч Тогда
			// Удалим из каждого массива пустой элемнт
			Для Каждого ЭлементМассива Из МассивДанных Цикл
				ЭлементМассива.Удалить(Сч-1);
			КонецЦикла;
			Сч = Сч - 1;
			ВсегоСтрок = ВсегоСтрок - 1;
			Продолжить;
		КонецЕсли;
		
		Хэш = НРег(MD5HeshString(КлючСтрокиПоставщика));
		НоваяПозицияПрайсЛиста = ТаблицаПрайсЛиста.Добавить();
		МассивСч.Добавить(Сч);
		МассивХеш.Добавить(Хэш);
		ЗначенияКлючевыхПолей.Добавить(Ключ);
		
		Артикул = "";
		Если ИмяЯчейкиАртикул <> Неопределено Тогда
			Артикул = МассивДанных[ИмяЯчейкиАртикул][Сч-1];
			Если ТипЗнч(Артикул) = Тип("Число") Тогда
				Артикул = Формат(Артикул, "ЧГ=0");
			ИначеЕсли ТипЗнч(Артикул) <> Тип("Строка") Тогда
				// Пусть 1С сама преобразует в строку
				Артикул = "" + Артикул;
			КонецЕсли;
			МассивАртикулов.Добавить(Артикул);
		КонецЕсли;
		
		Если ПоляНаименование.Количество() > 0 Тогда
			ПолеНаименование = "";
			Для Каждого ПолеЗагрузки Из ПоляНаименование Цикл
				Если ПолеЗагрузки.ИспользоватьЗначениеПоУмолчанию Тогда
					ЗначениеПоля = ПолеЗагрузки.ЗначениеПоУмолчанию;
				Иначе
					ЗначениеПоля = МассивДанных[ПолеЗагрузки.ИмяЯчейки][Сч-1];
					Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
						ЗначениеПоля = Формат(Окр(ЗначениеПоля, 3), "ЧГ=0");
					Иначе
						ЗначениеПоля = СокрЛП(ЗначениеПоля);
					КонецЕсли;
				КонецЕсли;
				ПолеНаименование = ПолеНаименование + ЗначениеПоля;
			КонецЦикла;
			МассивНаименований.Добавить(ПолеНаименование);
		КонецЕсли;
		
		Если ПоляНаименованиеИностранное.Количество() > 0 Тогда
			ПолеНаименованиеИностранное = "";
			Для Каждого ПолеЗагрузки Из ПоляНаименованиеИностранное Цикл
				Если ПолеЗагрузки.ИспользоватьЗначениеПоУмолчанию Тогда
					ЗначениеПоля = ПолеЗагрузки.ЗначениеПоУмолчанию;
				Иначе
					ЗначениеПоля = МассивДанных[ПолеЗагрузки.ИмяЯчейки][Сч-1];
					Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
						ЗначениеПоля = Формат(Окр(ЗначениеПоля, 3), "ЧГ=0");
					Иначе
						ЗначениеПоля = СокрЛП(ЗначениеПоля);
					КонецЕсли;
				КонецЕсли;
				ПолеНаименованиеИностранное = ПолеНаименованиеИностранное + ЗначениеПоля;
			КонецЦикла;
			МассивНаименованийИностранных.Добавить(ПолеНаименованиеИностранное);
		КонецЕсли;
		
		// Переведем в массив строки!
		МассивОстальныхПолей = Новый Массив;
		Для СчМассивов = 0 По МассивДанных.ВГраница() Цикл
			МассивОстальныхПолей.Добавить(МассивДанных[СчМассивов][Сч-1]);
		КонецЦикла;
		
		МассивОП.Добавить(Новый ХранилищеЗначения(МассивОстальныхПолей));
	КонецЦикла;
	
	ТаблицаПрайсЛиста.ЗагрузитьКолонку(МассивСч, "КодПредложения");
	ТаблицаПрайсЛиста.ЗагрузитьКолонку(МассивХеш, "КлючСтрокиПоставщика");
	
	Если МассивАртикулов.Количество() > 0 Тогда
		
		ТаблицаПрайсЛиста.ЗагрузитьКолонку(МассивАртикулов, "Артикул");
		
	КонецЕсли;
	
	Если МассивНаименований.Количество() > 0 Тогда
		
		ТаблицаПрайсЛиста.ЗагрузитьКолонку(МассивНаименований, "Наименование");
		
	КонецЕсли;
	
	Если МассивНаименованийИностранных.Количество() > 0 Тогда
		
		ТаблицаПрайсЛиста.ЗагрузитьКолонку(МассивНаименованийИностранных, "НаименованиеИностранное");
		
	КонецЕсли;
	
	Если МассивОП.Количество() > 0 Тогда
		
		ТаблицаПрайсЛиста.ЗагрузитьКолонку(МассивОП, "ОстальныеПоляВПрайсЛисте");
		
	КонецЕсли;
	
	ДанныеКаталогаПредложений = ПолучитьДанныеКаталогаПредложений(ПараметрыДействия.ПрайсЛист, МассивХеш, ЗначенияКлючевыхПолей);
	
	Если ДанныеКаталогаПредложений <> Неопределено И ДанныеКаталогаПредложений.Данные.Количество() Тогда
		
		Если ВыводитьСообщенияПользователю Тогда
			
			ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Дополнение данных по базовому прайс-листу...'"));
			
		КонецЕсли;
		
		УсловиеПоиска = Новый Структура("КлючСтрокиПоставщика");
		КЗагрузке = Новый Структура(ДанныеКаталогаПредложений.СтруктураСтрокиКаталога);
		
		Для Каждого КлючЗначение Из КЗагрузке Цикл
			
			КЗагрузке[КлючЗначение.Ключ] = Новый Массив();
			
		КонецЦикла;
		
		Для Каждого СтрокаПрайсЛиста Из ТаблицаПрайсЛиста Цикл
			
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаПрайсЛиста);
			НайденныеСтроки = ДанныеКаталогаПредложений.Данные.НайтиСтроки(УсловиеПоиска);
			
			Если НайденныеСтроки.Количество() Тогда
				
				ДанныеКЗаполнению = НайденныеСтроки[0];
				
			Иначе
				
				ДанныеКЗаполнению = Новый Структура(ДанныеКаталогаПредложений.СтруктураСтрокиКаталога);
				
			КонецЕсли;
			
			Для Каждого КлючЗначение Из КЗагрузке Цикл
				
				КЗагрузке[КлючЗначение.Ключ].Добавить(ДанныеКЗаполнению[КлючЗначение.Ключ]);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из КЗагрузке Цикл
			
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(КЗагрузке[КлючЗначение.Ключ], КлючЗначение.Ключ);
			
		КонецЦикла;
		
		ДанныеКаталогаПредложений.Данные.Очистить();
		ДанныеКаталогаПредложений = Неопределено;
		
	КонецЕсли;
	
	// Очистим память!
	МассивСч.Очистить();
	МассивХеш.Очистить();
	МассивАртикулов.Очистить();
	МассивНаименований.Очистить();
	МассивНаименованийИностранных.Очистить();
	МассивОП.Очистить();
	МассивИспользуемыхЯчеек = Новый Массив;
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Анализ загруженных данных...'"));
	
	Для каждого ПолеЗагрузки Из ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста Цикл
		Если ПустаяСтрока(ПолеЗагрузки.ИмяПоляФайла) ИЛИ
			ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Артикул" ИЛИ
			ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "КлючСтрокиПоставщика" ИЛИ
			Найти(ПолеЗагрузки.ИмяРеквизитаПрайсЛиста, "Наименование") > 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			ИмяЯчейки = Число(ПолеЗагрузки.ИмяПоляФайла) - 1 + СмещениеКолонокПоГоризонтали; // Ячейка из которой происходит загрузка
		Исключение
			НайденныеКолонки = ПрайсЛистКонтрагента.ЗаголовкиКолонокВПрайсЛисте.НайтиСтроки(Новый Структура("ИмяКолонки", ПолеЗагрузки.ИмяПоляФайла));
			Если НайденныеКолонки.Количество() > 0 Тогда
				ИмяЯчейки = НайденныеКолонки[0].НомерСтроки - 1;
			Иначе
				ИмяЯчейки = 0;
			КонецЕсли;
		КонецПопытки;
		МассивИспользуемыхЯчеек.Добавить(ИмяЯчейки);
	КонецЦикла;
	
	Для СчМассивов = 0 По МассивДанных.ВГраница() Цикл
		Если МассивИспользуемыхЯчеек.Найти(СчМассивов) = Неопределено Тогда
			МассивДанных[СчМассивов].Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ПолеЗагрузки Из ПрайсЛистКонтрагента.СтруктураФайлаПрайсЛиста Цикл
		Если ПустаяСтрока(ПолеЗагрузки.ИмяПоляФайла) ИЛИ
			ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Артикул" ИЛИ
			ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "КлючСтрокиПоставщика" ИЛИ
			Найти(ПолеЗагрузки.ИмяРеквизитаПрайсЛиста, "Наименование") > 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДлительныеОперации.СообщитьПрогресс(, СтрШаблон(НСтр("ru = 'Анализ загруженных данных. Разбор колонки %1'"),
			ПолеЗагрузки.ИмяРеквизитаПрайсЛиста));
		
		Попытка
			
			ИмяЯчейки = Число(ПолеЗагрузки.ИмяПоляФайла) - 1 + СмещениеКолонокПоГоризонтали;
			
		Исключение
			
			ИмяЯчейки = 0;
			Условия = Новый Структура("ИмяКолонки", ПолеЗагрузки.ИмяПоляФайла);
			НайденныеКолонки = ПрайсЛистКонтрагента.ЗаголовкиКолонокВПрайсЛисте.НайтиСтроки(Условия);
			
			Если НайденныеКолонки.Количество() Тогда
				
				ИмяЯчейки = НайденныеКолонки[0].НомерСтроки - 1;
				
			КонецЕсли;
			
		КонецПопытки;
		
		МассивЗначенийПолей = МассивДанных[ИмяЯчейки];
		Если ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Производитель" Тогда
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(МассивЗначенийПолей, "ПроизводительВПрайсЛисте");
			
			ТЗ = ТаблицаПрайсЛиста.Скопировать(, "ПроизводительВПрайсЛисте");
			ТЗ.Свернуть("ПроизводительВПрайсЛисте");
			
			СоответствиеЗначенийПолей = Новый Соответствие;
			Для Каждого СтрокаТЗ Из ТЗ Цикл
				СоответствиеЗначенийПолей.Вставить(
					?(НЕ ЗначениеЗаполнено(СтрокаТЗ.ПроизводительВПрайсЛисте), "Значение не заполнено", СтрокаТЗ.ПроизводительВПрайсЛисте),
					РегистрыСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки.ПолучитьПроизводителя(
						ПрайсЛистКонтрагента, СтрокаТЗ.ПроизводительВПрайсЛисте, Истина, ПараметрыДействия.СопоставленныеПроизводители));
			КонецЦикла;
			
			Массив = Новый Массив;
			Для Каждого ЗначениеПоля Из МассивЗначенийПолей Цикл
				Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
					// Нужно отформатировать по умолчанию т.к. есть 555, а есть 5 825 !!
					ЗначениеПоля = "" + ЗначениеПоля;
				КонецЕсли;
				Массив.Добавить(СоответствиеЗначенийПолей[?(НЕ ЗначениеЗаполнено(ЗначениеПоля), "Значение не заполнено", ЗначениеПоля)]);
			КонецЦикла;
			
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(Массив, "Производитель");
		ИначеЕсли ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Валюта" Тогда
			
			Если ВалютаВКолонкеЦена Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			УникальныеВалюты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗначенийПолей);
			КэшВалют = Новый Соответствие;
			
			Для Каждого УникальнаяВалюта Из УникальныеВалюты Цикл
				
				КэшВалют.Вставить(?(НЕ ЗначениеЗаполнено(УникальнаяВалюта), "Пустая", УникальнаяВалюта),
					РазобратьВалюту(УникальнаяВалюта, ПараметрыДействия.РеквизитыПрайсЛиста.Валюта));
				
			КонецЦикла;
			
			Массив = Новый Массив();
			Для Каждого ЗначениеПоля Из МассивЗначенийПолей Цикл
				
				Массив.Добавить(КэшВалют[?(НЕ ЗначениеЗаполнено(ЗначениеПоля), "Пустая", ЗначениеПоля)]);
				
			КонецЦикла;
			
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(Массив, "Валюта");
			
		ИначеЕсли ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "СрокПоставки" Тогда
			ТЗ = ТаблицаПрайсЛиста.Скопировать(, "СрокПоставки");
			ТЗ.ЗагрузитьКолонку(МассивЗначенийПолей, "СрокПоставки");
			ТЗ.Свернуть("СрокПоставки");
			СоответствиеЗначенийПолей = Новый Соответствие;
			
			Для Каждого СтрокаТЗ Из ТЗ Цикл
				
				СтруктураСрокПоставки = Новый Структура;
				СтруктураСрокПоставки.Вставить("СрокПоставки", "");
				СтруктураСрокПоставки.Вставить("СрокПоставкиМинимальный",  ПрайсЛистКонтрагента.СрокПоставкиМинимальный);
				СтруктураСрокПоставки.Вставить("СрокПоставкиМаксимальный", ПрайсЛистКонтрагента.СрокПоставкиМаксимальный);
				
				ЗначениеПоля = СтрокаТЗ.СрокПоставки;
				РазобратьСрокПоставки(ЗначениеПоля, СтруктураСрокПоставки);
				
				Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
					ЗначениеПоля = Формат(ЗначениеПоля, "ЧГ=0");
				КонецЕсли;
				
				СоответствиеЗначенийПолей.Вставить(
					?(НЕ ЗначениеЗаполнено(ЗначениеПоля),
					"Значение не заполнено", "" + ЗначениеПоля),
					СтруктураСрокПоставки
				);
				
			КонецЦикла;
			
			КолонкаСрокПоставки = Новый Массив;
			КолонкаСрокПоставкиМинимальный = Новый Массив;
			КолонкаСрокПоставкиМаксимальный = Новый Массив;
			
			Для Каждого ЗначениеПоля Из МассивЗначенийПолей Цикл
				Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
					ЗначениеПоля = Формат(ЗначениеПоля, "ЧГ=0");
				КонецЕсли;
				КлючСоответствия = ?(НЕ ЗначениеЗаполнено(ЗначениеПоля), "Значение не заполнено", ЗначениеПоля);
				СтруктураСрокПоставки = СоответствиеЗначенийПолей[КлючСоответствия];
				КолонкаСрокПоставки.Добавить(СтруктураСрокПоставки.СрокПоставки);
				КолонкаСрокПоставкиМинимальный.Добавить(СтруктураСрокПоставки.СрокПоставкиМинимальный);
				КолонкаСрокПоставкиМаксимальный.Добавить(СтруктураСрокПоставки.СрокПоставкиМаксимальный);
			КонецЦикла;
			
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(КолонкаСрокПоставки, "СрокПоставки");
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(КолонкаСрокПоставкиМинимальный, "СрокПоставкиМинимальный");
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(КолонкаСрокПоставкиМаксимальный, "СрокПоставкиМаксимальный");
			
		ИначеЕсли ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Цена" Тогда
			
			МассивВалют = Новый Массив;
			Массив = Новый Массив;
			СоответствиеЦен = Новый Соответствие();
			КэшВалют = Новый Соответствие();
			
			Для Каждого ЗначениеПоля Из МассивЗначенийПолей Цикл
				
				ЧастиЦены = РазобратьЦену(ЗначениеПоля, СоответствиеЦен, ПараметрыДействия.РеквизитыПрайсЛиста.Валюта,
					ВалютаВКолонкеЦена, КэшВалют);
				Массив.Добавить(ЧастиЦены.Цена);
				МассивВалют.Добавить(ЧастиЦены.Валюта);
				
			КонецЦикла;
			
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(Массив, "Цена");
			
			Если ВалютаВКолонкеЦена Тогда
				
				ТаблицаПрайсЛиста.ЗагрузитьКолонку(МассивВалют, "Валюта");
				
			КонецЕсли;
			
		ИначеЕсли ПолеЗагрузки.ИмяРеквизитаПрайсЛиста = "Количество" Тогда
			
			Массив = Новый Массив;
			КэшКоличеств = Новый Соответствие();
			
			Для Каждого ЗначениеПоля Из МассивЗначенийПолей Цикл
				
				Массив.Добавить(РазобратьКоличество(ЗначениеПоля, КэшКоличеств));
				
			КонецЦикла;
			
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(Массив, "Количество");
			
		Иначе
			Массив = Новый Массив;
			Для Каждого ЗначениеПоля Из МассивЗначенийПолей Цикл
				Если ТипЗнч(НоваяПозицияПрайсЛиста[ПолеЗагрузки.ИмяРеквизитаПрайсЛиста]) = Тип("Строка")
					И ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
					ЗначениеПоля = Формат(ЗначениеПоля, "ЧГ=0");
				ИначеЕсли ТипЗнч(НоваяПозицияПрайсЛиста[ПолеЗагрузки.ИмяРеквизитаПрайсЛиста]) = Тип("Число")
					И ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
					Попытка
						ЗначениеПоля = Число(ЗначениеПоля);
					Исключение
						ЗначениеПоля = 0;
					КонецПопытки
				КонецЕсли;
				Массив.Добавить(ЗначениеПоля);
			КонецЦикла;
			ТаблицаПрайсЛиста.ЗагрузитьКолонку(Массив, ПолеЗагрузки.ИмяРеквизитаПрайсЛиста);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПрайсЛиста, ПараметрыДействия.ТаблицаПрайсЛиста);
	// Очистим память!
	ТаблицаПрайсЛиста.Очистить();
	
	Возврат Истина;
КонецФункции // РазобратьМассивДанных()

Функция ВыделитьЧислоИзСтроки(Стр)
	СтрокаЦифр = "";
	ПерваяЦифраНайдена = Ложь;
	Для Сч = 1 По СтрДлина(Стр) Цикл
		Если Найти("1234567890,", Сред(Стр, Сч, 1)) > 0 Тогда
			ПерваяЦифраНайдена = Истина;
			СтрокаЦифр = СтрокаЦифр + Сред(Стр, Сч, 1);
		Иначе
			Если ПерваяЦифраНайдена Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(СтрокаЦифр) Тогда
		Количество = Число(СтрокаЦифр);
		Возврат ?(Количество = 0, Ложь, Количество);
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Процедура РазобратьСрокПоставки(Знач ЗначениеПоля, СтруктураСрокПоставки)
	
	СрокПоставки = ""; // Это то как написано в прайс-листе
	СрокПоставкиМинимальный = Неопределено;
	СрокПоставкиМаксимальный = Неопределено;
	
	Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
		Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
			
			СрокПоставкиМинимальный = ЗначениеПоля;
			СрокПоставкиМаксимальный = ЗначениеПоля;
			
		Иначе
			ВремПоле = СокрЛП(ВРег(ЗначениеПоля));
			Если ОбщегоНазначенияКлиентСервер.ЭтоЧисло(ЗначениеПоля) Тогда
			
				СрокПоставкиМинимальный = Число(ЗначениеПоля);
				СрокПоставкиМаксимальный = СрокПоставкиМинимальный;
			Иначе
				// На заказ, на складе, в наличии
				// 30-45 дней
				// 2-3 недели до Москвы 
				// поставка 7-8 недель
				// 5-6 weeks from yr PO
				// 90 Days
				// Not Available
				Если Найти(ВремПоле,"СКЛ") > 0 // На складе
					ИЛИ Найти(ВремПоле,"НАЛ") > 0 // в наличии
					ИЛИ Найти(ВремПоле,"STOCK") > 0 // in stock, on stock
					ИЛИ Найти(ВремПоле,"STORE") > 0 // store
					ИЛИ Найти(ВремПоле,"WAR") > 0 // warehouse
					Тогда
					СрокПоставкиМинимальный = 0;
					СрокПоставкиМаксимальный = 0;
					СрокПоставки = СокрЛП(ЗначениеПоля); // Сохраним как было в прайсе
				Иначе
					ВремПоле = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ВремПоле,"ДО","-"),"ОТ",""),"ПОСТАВКА",""),"НА ЗАКАЗ","");
					ВремПоле = СтрЗаменить(ВремПоле," ","");
					Коэффициент = 1;
					Поз_= 0 ;
					Если Найти(ВремПоле,"МЕС") > 0 Тогда // месяцев
						Коэффициент = 30;
						Поз_ = Найти(ВремПоле,"М");
					ИначеЕсли Найти(ВремПоле,"MONTH") > 0 Тогда // месяцев
						Коэффициент = 30;
						Поз_ = Найти(ВремПоле,"M");
					ИначеЕсли Найти(ВремПоле,"НЕД") > 0 Тогда // Недель, неделя
						Коэффициент = 7;
						Поз_ = Найти(ВремПоле,"Н");
					ИначеЕсли Найти(ВремПоле,"WEEK") > 0 Тогда // week
						Коэффициент = 7;
						Поз_ = Найти(ВремПоле,"W");
					ИначеЕсли Найти(ВремПоле,"Д") > 0 Тогда // Дней, дн., д.
						Поз_ = Найти(ВремПоле,"Д");
					ИначеЕсли Найти(ВремПоле,"D") > 0 Тогда // Days
						Поз_ = Найти(ВремПоле,"D");
					КонецЕсли;
					Если Поз_>0 Тогда
						ВремПоле = ЛЕВ(ВремПоле,Поз_-1);
					КонецЕсли;
					Поз_ = Найти(ВремПоле,"-");
					Если Поз_ = 0 Тогда
						Поз_ = Найти(ВремПоле,"/");
					КонецЕсли;
					Если Поз_ > 0 Тогда
						Минимальный = ЛЕВ(ВремПоле,Поз_-1);
						Максимальный = СРЕД(ВремПоле,Поз_+1);
					Иначе
						Минимальный = ВремПоле;
						Максимальный = ВремПоле;
					КонецЕсли;
					Попытка
						СрокПоставкиМинимальный = Число(Минимальный) * Коэффициент;
						СрокПоставкиМаксимальный = Число(Максимальный) * Коэффициент;
					Исключение
						СрокПоставкиМинимальный = Коэффициент;
						СрокПоставкиМаксимальный = Коэффициент;
						СрокПоставки = СокрЛП(ЗначениеПоля); // Сохраним как было в прайсе
					КонецПопытки; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
	КонецЕсли;
	
	Если СрокПоставкиМинимальный = Неопределено Тогда
		// Здесь уже в нужных секундах или сутках?
		СрокПоставкиМинимальный = СтруктураСрокПоставки.СрокПоставкиМинимальный;
		СрокПоставкиМаксимальный = СтруктураСрокПоставки.СрокПоставкиМаксимальный;
	Иначе
		// а в прайс-листах у нас все хранится в днях
		СрокПоставкиМинимальный = СрокПоставкиМинимальный * (24*60*60);
		СрокПоставкиМаксимальный = СрокПоставкиМаксимальный * (24*60*60);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СрокПоставки) Тогда
		// Попробуем присвоить как полагается, а не как в прайсе
		СрокПоставки = ПрайсЛистыКонтрагентовКлиентСервер.ПредставлениеСрокаПоставкиИнтервал(
			СрокПоставкиМинимальный,
			СрокПоставкиМаксимальный
		);
	КонецЕсли;
	
	СтруктураСрокПоставки.СрокПоставки = СрокПоставки;
	СтруктураСрокПоставки.СрокПоставкиМинимальный = СрокПоставкиМинимальный;
	СтруктураСрокПоставки.СрокПоставкиМаксимальный = СрокПоставкиМаксимальный;
КонецПроцедуры //РазобратьСрокПоставки()

#КонецОбласти

#Область ADO

Функция ПрочитатьДанныеADO(СтрокаПодключения, ВсеЛисты, ПараметрыДействия, ЖурналЗагрузки, СоответствиеОбразец) Экспорт
	Если ПустаяСтрока(СтрокаПодключения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Catalog = Новый COMОбъект("ADOX.Catalog");
		Catalog.ActiveConnection = СтрокаПодключения;
	Исключение
		ЖурналЗагрузки.Примечание = СтрШаблон(
			НСтр("ru = 'Ошибка подключения к источнику данных: %1%2'"),
			Символы.ПС,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ВсеЛисты Тогда
		СтруктураСтраницПрайсЛиста = ПараметрыДействия.ПрайсЛист.СтруктураСтраницПрайсЛиста;
		СтрокиИспользуемыхСтрониц  = СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("Использовать", Истина));
		
		ИспользуемыеЛисты = СтруктураСтраницПрайсЛиста.Выгрузить(СтрокиИспользуемыхСтрониц).ВыгрузитьКолонку("ИмяЛиста");
	КонецЕсли;
	
	Попытка
		Для НомерТаблицы = 0 По Catalog.Tables.Count - 1 Цикл
			Table = Catalog.Tables.Item(НомерТаблицы);
			
			Если НРег(Table.Type) = "table" Тогда
				Если Не ВсеЛисты И ИспользуемыеЛисты.Найти(Table.Name) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СоответствиеОбразец.Вставить(Table.Name, Новый Массив);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ЖурналЗагрузки.Примечание = СтрШаблон(
			НСтр("ru = 'Ошибка чтения таблиц в источнике данных: %1%2'"),
			Символы.ПС,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Ложь;
	КонецПопытки;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВыводитьСообщенияПользователю", Истина) Тогда
		ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Инициализация ADODB.Connection ...'"));
	КонецЕсли;
	Попытка
		Connection = Новый COMОбъект("ADODB.Connection");
		Коннект = Connection.Open(СтрокаПодключения);
	Исключение
		ЖурналЗагрузки.Примечание = СтрШаблон(
			НСтр("ru = 'Ошибка подключения к источнику данных: %1%2'"),
			Символы.ПС,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	Для Каждого КлючЗначение Из СоответствиеОбразец Цикл
		ИмяТаблицы   = КлючЗначение.Ключ;
		МассивДанных = КлючЗначение.Значение;
		
		ПерваяСтрокаСДанными = 0; ПоследняяСтрокаСДанными = 0;
		Если НЕ ВсеЛисты Тогда
			НайденныеЛисты = СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста", ИмяТаблицы));
			Если НайденныеЛисты.Количество() > 0 Тогда
				ПерваяСтрокаСДанными    = НайденныеЛисты[0].СтрокаНачало;
				ПоследняяСтрокаСДанными = НайденныеЛисты[0].СтрокаКонец;
			КонецЕсли;
		Иначе
			ПоследняяСтрокаСДанными = ПараметрыДействия.КоличествоСтрок;
		КонецЕсли;
		
		ТекстЗапроса = "SELECT %1 %2.* FROM %2"; Приставка = "";
		Если ПоследняяСтрокаСДанными > 0 Тогда
			Приставка = "TOP " + Формат(ПоследняяСтрокаСДанными, "ЧГ=0");
		КонецЕсли;
		
		Если ПараметрыДействия.Свойство("Условие") Тогда
			ТекстЗапроса = ТекстЗапроса + ПараметрыДействия.Условие;
		КонецЕсли;
		
		Command = Новый  COMОбъект("ADODB.Command");
		Command.CommandText      = СтрШаблон(ТекстЗапроса, Приставка, ИмяТаблицы);
		Command.ActiveConnection = Connection;
		
		Попытка
			Recordset = Command.Execute();
		Исключение
			ЖурналЗагрузки.Примечание = СтрШаблон(
				НСтр("ru = 'Ошибка чтения таблицы [%3] в источнике данных: %1%2'"),
				Символы.ПС,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ИмяТаблицы);
			
			Продолжить;
		КонецПопытки;
		
		КолПолей = Recordset.Fields.Count;
		Для Сч = 0 По КолПолей-1 Цикл
			ИмяКолонки = Recordset.Fields(Сч).Name; МассивКолонка = Новый Массив;
			
			Если ВсеЛисты Тогда
				МассивКолонка.Добавить(ИмяКолонки);
			КонецЕсли;
			МассивДанных.Добавить(МассивКолонка);
		КонецЦикла;
		
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВыводитьСообщенияПользователю", Истина) Тогда
			ДлительныеОперации.СообщитьПрогресс(, СтрШаблон(НСтр("ru = 'Чтение данных из таблицы [%1] ...'"), ИмяТаблицы));
		КонецЕсли;
		
		СчСтрок = -1;
		Пока Не Recordset.EOF Цикл
			СчСтрок = СчСтрок + 1;
			Если СчСтрок < ПерваяСтрокаСДанными Тогда
				Продолжить;
			КонецЕсли;
			
			Для Сч = 0 По КолПолей-1 Цикл
				ЗначениеПоля = Recordset.Fields(Сч).Value;
				МассивДанных[Сч].Добавить(СокрЛП(ЗначениеПоля));
			КонецЦикла;
			
			Recordset.MoveNext();
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область TXT

// процедура разбора строки символов на массив символов
//
// Параметры:
// СтрокаДляРазбора  - Строка - Строка для разбора
// СтрокаПодключения - Строка - Адрес загружаемого файла.
//
// Возвращаемое значение:
// Массив - Массив символов строки.
//
Функция РазобратьСтрокуTXT(Знач СтрокаДляРазбора, Знач СтрокаПодключения, Знач Разд)
	Если Разд = "T" Тогда
		Разделитель = Символы.Таб;
	Иначе
		Разделитель = Разд;
	КонецЕсли;
	
	Возврат СтрРазделить(СтрокаДляРазбора, Разделитель, Истина);
КонецФункции // РазобратьСтрокуTXT()

#КонецОбласти

#Область EXCEL

Функция ЗаполнитьСоответствиеДанныхXLS(Путь, ДополнительныеПараметры, СоответствиеОбразец)
	
	ЧтениеПрошлоУспешно = ПрочитатьДанныеИзEXCEL(Путь, Истина, ДополнительныеПараметры);
	
	Если ЧтениеПрошлоУспешно Тогда
		
		СоответствиеОбразец = ПолучитьЗначениеПараметраСтруктуры(
			ДополнительныеПараметры,
			"СоответствиеДанных",
			Неопределено
		);
		
	КонецЕсли;
	
	Возврат ЧтениеПрошлоУспешно;
	
КонецФункции // ЗаполнитьСоответствиеДанныхXLS()

Функция ПрочитатьДанныеИзEXCEL(Путь, ВернутьВсеЛисты, ДополнительныеПараметры)
	
	КоличествоСтрок = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "КоличествоСтрок", 0);
	
	Если ИспользоватьADO() Тогда
	
		Результат = EXCEL_УстановитьСвязь_ADO(Путь, ДополнительныеПараметры, ВернутьВсеЛисты, КоличествоСтрок);
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		
		Результат = EXCEL_УстановитьСвязь_Application(Путь, ДополнительныеПараметры, ВернутьВсеЛисты, КоличествоСтрок);
		
	КонецЕсли;
	
	Возврат Результат <> Неопределено;
	
КонецФункции

Процедура ConnectionClose(Connection)
	
	Попытка
		Connection.Close();
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения Connection.Close()'"),
		УровеньЖурналаРегистрации.Предупреждение,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Connection = Неопределено;
	
КонецПроцедуры

Функция EXCEL_УстановитьСвязь_ADO(ИмяФайла, ДополнительныеПараметры, ВернутьВсеЛисты = Ложь, КоличествоСтрок = 0)
	
	ТипФайла = ВРег(ДополнительныеПараметры.Расширение);
	// HDR = ?(HDR, "YES", "NO");
	HDR = "NO";
	
	ExtendedProperties = "Excel 8.0"; // xls
	Если ТипФайла = ".XLSB" Тогда
		ExtendedProperties = "Excel 12.0"; // xlsb
	ИначеЕсли ТипФайла = ".XLSX" Тогда
		ExtendedProperties = "Excel 12.0 Xml"; // xlsx
	ИначеЕсли ТипФайла = ".XLSM" Тогда
		ExtendedProperties = "Excel 12.0 Macro"; // xlsm
	КонецЕсли;
	
	Попытка
		// Excel 2000 - 2003
		Connection = Новый COMОбъект("ADODB.Connection");
		Connection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяФайла + "; Extended Properties="""+ExtendedProperties+"; HDR="+HDR+"; IMEX=1"";";
		Connection.Open();
	Исключение
		ДополнительныеПараметры.ЖурналЗагрузки.Примечание = СтрШаблон("Microsoft.Jet.OLEDB.4.0: %1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Connection = Неопределено;
	КонецПопытки;
	
	Если Connection = Неопределено Тогда
		Попытка
			// Excel 2007 - 2010
			Connection = Новый COMОбъект("ADODB.Connection");
			Connection.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяФайла + ";Extended Properties="""+ExtendedProperties+"; HDR="+HDR+";"";Persist Security Info=False;";
			Connection.Open();
		Исключение
			ДополнительныеПараметры.ЖурналЗагрузки.Примечание = СтрШаблон("Microsoft.ACE.OLEDB.12.0: %1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Connection = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Connection = Неопределено Тогда
		Попытка
			// Excel
			Connection = Новый COMОбъект("ADODB.Connection");
			Connection.ConnectionString = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + ИмяФайла + ";";
			Connection.Open();
		Исключение
			ДополнительныеПараметры.ЖурналЗагрузки.Примечание = СтрШаблон("{Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb): %1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Connection = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Connection = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ADOXCatalog = Новый COMОбъект("ADOX.Catalog");
	ADOXCatalog.ActiveConnection = Connection;
	КоличествоЛистов = ADOXCatalog.Tables.Count;
	
	Результат = Новый Соответствие;
	ВсеЛисты = Новый Массив;
	МассивЛистов = Новый Массив;
	
	Для е = 1 по КоличествоЛистов Цикл
		ИмяЛиста = ADOXCatalog.Tables(е - 1).Name;
		Если Прав(ИмяЛиста, 1) = "$" Тогда
			ИмяЛиста = Лев(ИмяЛиста, СтрДлина(ИмяЛиста)-1);
			ВсеЛисты.Добавить(ИмяЛиста);
			Если ВернутьВсеЛисты ИЛИ ДополнительныеПараметры.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста, Использовать", ИмяЛиста, Истина)).Количество() > 0 Тогда
				МассивЛистов.Добавить(ИмяЛиста);
			КонецЕсли;
		КонецЕсли;
		Если Прав(ИмяЛиста, 2) = "$'" Тогда
			ИмяЛиста = Сред(Лев(ИмяЛиста, СтрДлина(ИмяЛиста)-2), 2);
			ВсеЛисты.Добавить(ИмяЛиста);
			Если ВернутьВсеЛисты ИЛИ ДополнительныеПараметры.СтруктураСтраницПрайсЛиста.НайтиСтроки(Новый Структура("ИмяЛиста, Использовать", ИмяЛиста, Истина)).Количество() > 0 Тогда
				МассивЛистов.Добавить(ИмяЛиста);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсеЛисты.Количество() > 0 И МассивЛистов.Количество() = 0 Тогда
		// Хотя бы один лист добавим, так как может быть ситуация, когда каждый раз разные названия листов в файле
		МассивЛистов.Добавить(ВсеЛисты[0]);
	КонецЕсли;
	
	ADOXCatalog = Неопределено;
	
	Если МассивЛистов.Количество() = 0 Тогда
		// Все Ок, просто в книге нет страниц
		ConnectionClose(Connection);
		Возврат Истина;
	КонецЕсли;
	
	СоответствиеОбразец = Новый Соответствие;
	НачалоДанных = 0;
	
	Для Каждого ИмяЛиста Из МассивЛистов Цикл
		
		СтрокиЛистов = ДополнительныеПараметры
			.СтруктураСтраницПрайсЛиста
			.НайтиСтроки(Новый Структура("ИмяЛиста, Использовать", ИмяЛиста, Истина));
		
		Если СтрокиЛистов.Количество() > 0 И КоличествоСтрок = 0 Тогда
			
			НачалоДанных = СтрокиЛистов[0].СтрокаНачало;
			КоличествоСтрок = СтрокиЛистов[0].СтрокаКонец;
			
		КонецЕсли;
		
		МассивДанныхЛиста = Новый Массив;
		RecordSet = Новый COMОбъект("ADODB.Recordset");
		ТекстВставки = "";
		
		Если КоличествоСтрок > 0 Тогда
			
			ТекстВставки = СтрШаблон(" TOP %1", Формат(КоличествоСтрок, "ЧГ=0"));
			
		КонецЕсли;
				
		ТекстЗапроса = СтрШаблон("SELECT %1 * FROM [%2$]", ТекстВставки, ИмяЛиста);
		
		Попытка
			
			RecordSet.Open(ТекстЗапроса, Connection);
			
		Исключение
			
			ТекстСообщения = СтрШаблон(
				"Ошибка чтения листа [%1]: %2",
				ИмяЛиста,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			ДополнительныеПараметры.ЖурналЗагрузки.Примечание = ТекстСообщения;
			Продолжить;
			
		КонецПопытки;
		
		КоличествоКолонок = RecordSet.Fields.Count;
		Для к = 1 По КоличествоКолонок Цикл
			МассивДанныхЛиста.Добавить(Новый Массив);
		КонецЦикла;
		
		ПропуститьСтрок = НачалоДанных - 1;
		
		Пока RecordSet.EOF() = 0 Цикл
			
			Если ПропуститьСтрок > 0 Тогда
				
				ПропуститьСтрок = ПропуститьСтрок - 1;
				RecordSet.MoveNext();
				Продолжить;
				
			КонецЕсли;
			
			СчКолонок = 0;
			
			Для Каждого Поле Из RecordSet.Fields Цикл
				ЗначениеПоля = Поле.Value;
				Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
					ЗначениеПоля = СокрЛП(ЗначениеПоля);
				КонецЕсли;
				МассивДанныхЛиста[СчКолонок].Добавить(ЗначениеПоля);
				СчКолонок = СчКолонок + 1;
			КонецЦикла; 
			
			RecordSet.MoveNext();
		КонецЦикла;
		
		СоответствиеОбразец.Вставить(ИмяЛиста, МассивДанныхЛиста);
		
	КонецЦикла;
	
	RecordSet = Неопределено;
	
	ConnectionClose(Connection);
	
	ДополнительныеПараметры.Вставить("СоответствиеДанных", СоответствиеОбразец);
	
	Возврат Истина;
	
КонецФункции

Функция EXCEL_УстановитьСвязь_Application(ИмяФайла, ДополнительныеПараметры, ВернутьВсеЛисты = Ложь, КоличествоСтрок = 0)
	
	Попытка
		
		ПодключениеКExel = СоздатьПодключениеКExel(ИмяФайла);
		
		Если ВернутьВсеЛисты Тогда
			
			ЛистыДокумента = ВыгрузитьЛистыИзExleВсеЛисты(ПодключениеКExel);
			
		Иначе
			
			ЛистыДокумента = ВыгрузитьЛистыИзExle(
				ПодключениеКExel,
				ДополнительныеПараметры.СтруктураСтраницПрайсЛиста
			);
			
		КонецЕсли;

		
	Исключение
		
		ТекстОшибки = СтрШаблон("Ошибка связи с Excel: %1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ДополнительныеПараметры.ЖурналЗагрузки.Примечание = ТекстОшибки;
		Возврат Ложь;
		
	КонецПопытки;
	
	ДанныеЛистовДокумента = Новый Соответствие;
	ЛистыДокумента = СортироватьЛистыПоИмени(ЛистыДокумента, ПолучитьИмяТаблицы(ДополнительныеПараметры));
	
	Для Каждого Лист Из ЛистыДокумента Цикл
		
		ЗагружаемыйИнтервал = ДайЗагружаемыйИнтервал(
			Лист,
			ДополнительныеПараметры.СтруктураСтраницПрайсЛиста,
			КоличествоСтрок
		);
		
		Попытка
			
			ДанныеЛиста = ЗагрузитьИнтервалСЛиста(Лист, ЗагружаемыйИнтервал);
			
		Исключение
			
			Продолжить;
			
		КонецПопытки;
		
		ДанныеЛистовДокумента.Вставить(Лист.Name, ДанныеЛиста);
		
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("СоответствиеДанных", ДанныеЛистовДокумента);
	УдалитьПодключениеКExel(ПодключениеКExel);
	Возврат Истина;
	
КонецФункции

Функция ИспользоватьADO()
	
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Возврат СтрНайти(ПараметрЗапускаПриложения, "НеИспользоватьADO") = 0;
	
КонецФункции

Функция СоздатьПодключениеКExel(ИмяФайла)
	
	BaseOLE = Новый COMОбъект("Excel.Application");
	ExcelФайл = BaseOLE.WorkBooks.Open(СокрЛП(ИмяФайла),, Истина,,,,,,,,,, Ложь);
	Возврат Новый Структура("BaseOLE,ExcelФайл", BaseOLE, ExcelФайл);

КонецФункции

Функция ВыгрузитьЛистыИзExleВсеЛисты(ПодключениеКExel)
	
	КоличествоЛистов = ПодключениеКExel.ExcelФайл.Sheets.Count;
	ЛистыДокумента = Новый Массив;
	
	Для Сч = 1 По КоличествоЛистов Цикл
			
			ЛистыДокумента.Добавить(ПодключениеКExel.ExcelФайл.Sheets(Сч));
		
	КонецЦикла;
	
	Возврат ЛистыДокумента;
	
КонецФункции

Функция ВыгрузитьЛистыИзExle(ПодключениеКExel, СтруктураСтраницПрайсЛиста)
	
	КоличествоЛистов = ПодключениеКExel.ExcelФайл.Sheets.Count;
	ЛистыДокумента = Новый Массив;
	УсловиеПоиска = Новый Структура("ИмяЛиста,Использовать", "", Истина);
	
	Для Сч = 1 По КоличествоЛистов Цикл
		
		УсловиеПоиска.ИмяЛиста = ПодключениеКExel.ExcelФайл.Sheets(Сч).Name;
		НайденныеСтроки = СтруктураСтраницПрайсЛиста.НайтиСтроки(УсловиеПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ЛистыДокумента.Добавить(ПодключениеКExel.ExcelФайл.Sheets(Сч));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Хотя бы один лист добавим, так как может быть ситуация, когда каждый раз разные названия листов в файле
	Если КоличествоЛистов > 0 И ЛистыДокумента.Количество() = 0 Тогда
		
		ЛистыДокумента.Добавить(ПодключениеКExel.ExcelФайл.Sheets(1));
		
	КонецЕсли;
	
	Возврат ЛистыДокумента;

КонецФункции

Функция ПолучитьИмяТаблицы(ДополнительныеПараметры)
	
	ИмяТаблицы = "";
	
	Если ДополнительныеПараметры.Свойство("РеквизитыПрайсЛиста") Тогда
		
		ДополнительныеПараметры.РеквизитыПрайсЛиста.Свойство("ИмяТаблицы", ИмяТаблицы);
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

Функция СортироватьЛистыПоИмени(ЛистыДокумента, Имя)
	
	НоваяКоллекцияЛистов = Новый Массив;
	
	Для Каждого Лист Из ЛистыДокумента Цикл
		
		Если Лист.Name = Имя Тогда
			
			НоваяКоллекцияЛистов.Вставить(0, Лист);
			
		Иначе
			
			НоваяКоллекцияЛистов.Добавить(Лист);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НоваяКоллекцияЛистов;
	
КонецФункции

Функция ДайЗагружаемыйИнтервал(Лист, СтруктураСтраницПрайсЛиста, КоличествоСтрок)
	
	Если КоличествоСтрок > 0 Тогда
		
		Возврат Новый Структура("Начало,Конец,ВесьДокумент", 0, КоличествоСтрок, Ложь);
		
	КонецЕсли;
	
	УсловиеПоиска = Новый Структура("ИмяЛиста, Использовать", Лист.Name, Истина);
	СтрокиЛистов = СтруктураСтраницПрайсЛиста.НайтиСтроки(УсловиеПоиска);
		
	Если СтрокиЛистов.Количество() = 0 Тогда
		
		Возврат Новый Структура("Начало,Конец,ВесьДокумент", 0, 0, Истина);
		
	КонецЕсли;
	
	Возврат Новый Структура(
		"Начало,Конец,ВесьДокумент",
		СтрокиЛистов[0].СтрокаНачало,
		СтрокиЛистов[0].СтрокаКонец,
		(СтрокиЛистов[0].СтрокаНачало = 0 И СтрокиЛистов[0].СтрокаКонец = 0)
	);	 
	
КонецФункции

Функция ЗагрузитьИнтервалСЛиста(Лист, Интервал)
	
	Если Интервал.ВесьДокумент Тогда
		
		Возврат Лист.UsedRange.Value.Выгрузить();
		
	КонецЕсли;
	
	ДанныеИнтервала = Новый Массив;
	Диапазон = Лист.UsedRange;
	КолонокВсего = Диапазон.Columns.Count;
	СтрокВсего = ?(Интервал.Конец = 0, Диапазон.Rows.Count, Мин(Диапазон.Rows.Count, Интервал.Конец));
	СтрокПропустить = Интервал.Начало;
	
	Для СчК = 1 По КолонокВсего Цикл
		
		ДанныеИнтервала.Добавить(Новый Массив);
		
		Для СчС = СтрокПропустить По СтрокВсего Цикл
			
			ДанныеИнтервала[СчК -1].Добавить(Диапазон.Item(СчС, СчК).Value);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеИнтервала;
	
КонецФункции

Процедура УдалитьПодключениеКExel(ПодключениеКExel)
	
	Попытка
		
		ПодключениеКExel.BaseOLE.DisplayAlerts = 0;
		ПодключениеКExel.ExcelФайл.Close();
		ПодключениеКExel.BaseOLE.DisplayAlerts = 1;
		ПодключениеКExel.BaseOLE.Quit();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление подключения к Exel.Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
	КонецПопытки;
	
	ПодключениеКExel.ExcelФайл = Неопределено;
	ПодключениеКExel.BaseOLE = Неопределено;
	ПодключениеКExel = Неопределено;

КонецПроцедуры

#КонецОбласти

#Область OpenOffice

// "open office" заполняет массив свойств
Функция MakePropertyValue(ServiceManager, Name, Value)
	Struct = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Struct.Name = Name;
	Struct.Value = Value;
	Возврат Struct;
КонецФункции //MakePropertyValue()

// "open office" Функция преобразует Windows имя файла в URL OpenOffice
Функция ПреобразоватьВURL(ИмяФайла)
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
КонецФункции //ПреобразоватьВURL()

Функция ЗаполнитьСоответствиеДанныхODS(Путь, ДополнительныеПараметры, СоответствиеОбразец)
	
	OpenOfficeДоступен = Ложь;
	Попытка
	 	ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
		Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
		Params = MakePropertyValue(ServiceManager, "Hidden", Истина);
		Args = Новый COMSafeArray("VT_DISPATCH", 1); Args.SetValue(0, Params);
		OpenOfficeДоступен = Истина;
	Исключение
		OpenOfficeДоступен = Ложь;
	КонецПопытки;
	
	Если OpenOfficeДоступен Тогда
		Если ПрочитатьДанныеИзOpenOffice(Путь, Истина, ДополнительныеПараметры) Тогда
			СоответствиеОбразец =
				ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "СоответствиеДанных", Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Возврат OpenOfficeДоступен;
	
КонецФункции //ЗаполнитьМассивДанныхODS()

Функция ПрочитатьДанныеИзOpenOffice(Путь, ВернутьВсеЛисты, ДополнительныеПараметры)
	СоответствиеОбразец = Новый Соответствие; СчПроцент = 0;
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Получение данных из OpenOffice'"));
	
	КоличествоСтрок = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "КоличествоСтрок", 0);
	
	// Получим объект листа файла
	Попытка
		ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
		Desktop        = ServiceManager.createInstance("com.sun.star.frame.Desktop");
		Params         = MakePropertyValue(ServiceManager, "Hidden", Истина);
		Args           = Новый COMSafeArray("VT_DISPATCH", 1);
		Args.SetValue(0, Params);
		
		OODoc  = Desktop.loadComponentFromURL(ПреобразоватьВURL(Путь), "_blank", 0, Args);
		Sheets = OODoc.getSheets();
	Исключение
		ServiceManager = Неопределено;
		ДополнительныеПараметры.ЖурналЗагрузки.Примечание =
			НСтр("ru = 'На компьютере должен быть установлен Open Office версии не ниже 2.0'");
		
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(Sheets) <> Тип("COMОбъект") Тогда
		ДополнительныеПараметры.ЖурналЗагрузки.Примечание =
			НСтр("ru = 'Open Office не загружен'");
		
		Возврат Ложь;
	КонецЕсли;
	
	// Получим количество строк для обхода
	Если НЕ ВернутьВсеЛисты Тогда
		Условие = Новый Структура("Использовать", Истина);
		ТаблицаСтраниц = ДополнительныеПараметры.СтруктураСтраницПрайсЛиста.НайтиСтроки(Условие);
	Иначе
		ТаблицаСтраниц = ДополнительныеПараметры.СтруктураСтраницПрайсЛиста.Скопировать();
		ТаблицаСтраниц.Очистить();
		
		Для СчЛистов = 0 По Sheets.getCount() - 1 Цикл
			Попытка
				Sheet = Sheets.getByIndex(СчЛистов);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если ТипЗнч(Sheet) <> Тип("COMОбъект") Тогда
				Продолжить;
			КонецЕсли;
			
			Cursor = Sheet.createCursor();
			Cursor.gotoStartOfUsedArea(0);
			Cursor.gotoEndOfUsedArea(-1);
			
			Addresses = Cursor.getRangeAddress();
			
			ВсегоКолонок = Addresses.EndColumn - Addresses.StartColumn + 1;
			ВсегоСтрок   = Addresses.EndRow - Addresses.StartRow + 1;
			
			СтрокаНачало = Addresses.StartRow;
			СтрокаКонец  = Мин(ВсегоСтрок, ДополнительныеПараметры.КоличествоСтрок);
			
			НоваяСтраница = ТаблицаСтраниц.Добавить();
			НоваяСтраница.СтрокаНачало = СтрокаНачало;
			НоваяСтраница.СтрокаКонец  = СтрокаКонец;
			НоваяСтраница.ИмяЛиста     = Sheet.Name;
		КонецЦикла;
	КонецЕсли;
	
	ВсегоСтрокНаВсехСтраницах = 0;
	Для Каждого ИспользуемаяСтраница Из ТаблицаСтраниц Цикл
		Попытка
			Sheet = Sheets.getByName(ИспользуемаяСтраница.ИмяЛиста);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Cursor = Sheet.createCursor();
		Cursor.gotoStartOfUsedArea(0);
		Cursor.gotoEndOfUsedArea(-1);
		Addresses = Cursor.getRangeAddress();
		
		ВсегоСтрок = (Addresses.EndRow - Addresses.StartRow + 1);
		
		Если ИспользуемаяСтраница.СтрокаНачало > 0 Тогда
			Если ВсегоСтрок < ИспользуемаяСтраница.СтрокаНачало Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНачало = Addresses.StartRow + ИспользуемаяСтраница.СтрокаНачало - 1;
		Иначе
			СтрокаНачало = Addresses.StartRow;
		КонецЕсли;
		
		Если ИспользуемаяСтраница.СтрокаКонец > 0 Тогда
			СтрокаКонец = Мин(ВсегоСтрок, ИспользуемаяСтраница.СтрокаКонец);
		Иначе
			СтрокаКонец = ВсегоСтрок;
		КонецЕсли;
		
		ВсегоСтрокНаВсехСтраницах = ВсегоСтрокНаВсехСтраницах + (СтрокаКонец - (СтрокаНачало -1));
	КонецЦикла;
	
	// Обходим файл
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Загрука данных...'"));
	Для Каждого ИспользуемаяСтраница Из ТаблицаСтраниц Цикл
		Попытка
			Sheet = Sheets.getByName(ИспользуемаяСтраница.ИмяЛиста);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Cursor = Sheet.createCursor();
		Cursor.gotoStartOfUsedArea(0);
		Cursor.gotoEndOfUsedArea(-1);
		Addresses = Cursor.getRangeAddress();
		
		ВсегоКолонок = Addresses.EndColumn - Addresses.StartColumn + 1;
		ВсегоСтрок   = Addresses.EndRow - Addresses.StartRow + 1;
		
		Если ИспользуемаяСтраница.СтрокаНачало > 0 Тогда
			Если ВсегоСтрок < ИспользуемаяСтраница.СтрокаНачало Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНачало = Addresses.StartRow + ИспользуемаяСтраница.СтрокаНачало - 1;
		Иначе
			СтрокаНачало = Addresses.StartRow;
		КонецЕсли;
		
		Если ИспользуемаяСтраница.СтрокаКонец > 0 Тогда
			СтрокаКонец = Мин(ВсегоСтрок, ИспользуемаяСтраница.СтрокаКонец);
		Иначе
			СтрокаКонец = ВсегоСтрок;
		КонецЕсли;
		
		Диапазон = Sheet.getCellRangeByPosition(Addresses.StartColumn, СтрокаНачало, Addresses.EndColumn, СтрокаКонец);
		
		МассивКолонок = Новый Массив;
		
		Для Сч = 1 По ВсегоКолонок Цикл
			МассивКолонок.Добавить(Новый Массив);
		КонецЦикла;
		
		Для СчСтрок = 0 По Диапазон.getRows().getCount()-1 Цикл
			Для Сч = 0 По ВсегоКолонок-1 Цикл
				Cell = Диапазон.getCellByPosition(Сч, СчСтрок);
				//ЗначениеПоля = СокрЛП(Cell.getText().String());
				ТипЯчейки = Cell.getType();
				Если ТипЯчейки = 1 Тогда
					ЗначениеПоля = Cell.getValue();
				ИначеЕсли ТипЯчейки = 2 Тогда
					ЗначениеПоля = СокрЛП(Cell.getString());
				ИначеЕсли ТипЯчейки = 3 Тогда
					ЗначениеПоля = Cell.getFormula();
				Иначе
					ЗначениеПоля = "";
				КонецЕсли;
				
				МассивКолонок[Сч].Добавить(ЗначениеПоля);
			КонецЦикла;
			
			СчПроцент = СчПроцент + 1;
			Если НЕ ВсегоСтрокНаВсехСтраницах = 0 Тогда
				ДлительныеОперации.СообщитьПрогресс(
					Окр(СчПроцент/ВсегоСтрокНаВсехСтраницах*100, 0),
					НСтр("ru = 'Загрузка образца данных из OpenOffice'"));
			КонецЕсли;
		КонецЦикла;
		
		СоответствиеОбразец.Вставить(Sheet.Name, МассивКолонок);
	КонецЦикла;
	
	Desktop.Terminate(); ServiceManager = Неопределено;
	
	ДополнительныеПараметры.Вставить("СоответствиеДанных", СоответствиеОбразец);
	Возврат Истина;
	
КонецФункции // ПрочитатьОбразецOpenOffice()

#КонецОбласти

#Область ЗагрузкаИзТабличногоДокумента

Функция ПолучитьТЗИзШаблонаНаСервере(ТаблицаДанных, ПараметрыДействия, Отказ)
	
	ТабличныйДокумент = ПолучитьИзВременногоХранилища(ПараметрыДействия.ТД);
	
	// Создаем колонки
	СоответствиеОбразец = Новый Соответствие;
	Построитель = Новый ПостроительЗапроса;
	
	СчетчикЛистов = 1;
	
	Для каждого ОбластьТаб Из ТабличныйДокумент.Области Цикл
		
		ИмяЛиста = ОбластьТаб.Имя;
		
		СтрокиЛистов = ПараметрыДействия
		.СтруктураСтраницПрайсЛиста
		.НайтиСтроки(Новый Структура("ИмяЛиста, Использовать", ИмяЛиста, Истина));
		
		Если СтрокиЛистов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличныйДокумент.ВставитьОбласть(
			ТабличныйДокумент.Область("R" + Формат(ОбластьТаб.Верх, "ЧГ=0")),
			ТабличныйДокумент.Область("R" + Формат(ОбластьТаб.Верх, "ЧГ=0")),
			ТипСмещенияТабличногоДокумента.ПоВертикали
		);
		Для К = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			ТабличныйДокумент.Область("R"+ Формат(ОбластьТаб.Верх, "ЧГ=0") + "C" + Формат(К, "ЧГ=0")).Текст = "Заголовок " + К;
		КонецЦикла;
		ОбластьЛиста = ТабличныйДокумент.Область(ОбластьТаб.Верх, 1, ОбластьТаб.Низ + 1, ТабличныйДокумент.ШиринаТаблицы);
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЛиста);
		Построитель.Выполнить();
		
		ТабДанные = Построитель.Результат.Выгрузить();
		Для Сч = 1 По СтрокиЛистов[0].СтрокаНачало -1 Цикл
			ТабДанные.Удалить(0);
		КонецЦикла;
		МассивДанныхЛиста = Новый Массив;
		
		КоличествоКолонок = ТабДанные.Колонки.Количество();
		Для к = 1 По КоличествоКолонок Цикл
			 //проверим, может данных в колонке просто нет и там пусто.
			МассивПустых = ТабДанные.НайтиСтроки(Новый Структура(ТабДанные.Колонки.Получить(к-1).Имя,""));
			Если МассивПустых.Количество() = ТабДанные.Количество() Тогда
				Продолжить;
			КонецЕсли;
			ДанныеКолонки = ТабДанные.ВыгрузитьКолонку(к-1);
			МассивДанныхЛиста.Добавить(ДанныеКолонки);
		КонецЦикла;
		
		СчетчикЛистов = СчетчикЛистов + 1;
		СоответствиеОбразец.Вставить(ИмяЛиста, МассивДанныхЛиста);
	
	КонецЦикла;
	
	ПараметрыДействия.Вставить("СоответствиеДанных", СоответствиеОбразец);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОбразецДанныхИзШаблонаНаСервере(ТаблицаДанных, ПараметрыДействия, Отказ)
	
	ТабличныйДокумент = ПолучитьИзВременногоХранилища(ПараметрыДействия.ТД);
	КоличествоСтрок = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КоличествоСтрок", 0);
	
	// Создаем колонки
	СоответствиеОбразец = Новый Соответствие;
	Построитель = Новый ПостроительЗапроса;
	
	СчетчикЛистов = 1;
	
	Для каждого ОбластьТаб Из ТабличныйДокумент.Области Цикл
		
		ИмяЛиста = ОбластьТаб.Имя;
		
		ТабличныйДокумент.ВставитьОбласть(
			ТабличныйДокумент.Область("R" + Формат(ОбластьТаб.Верх, "ЧГ=0")),
			ТабличныйДокумент.Область("R" + Формат(ОбластьТаб.Верх, "ЧГ=0")),
			ТипСмещенияТабличногоДокумента.ПоВертикали
		);
		Для К = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			ТабличныйДокумент.Область("R"+ Формат(ОбластьТаб.Верх,"ЧГ=0")+"C"+Формат(К,"ЧГ=0")).Текст = "Заголовок "+К;
		КонецЦикла;
		ОбластьЛиста = ТабличныйДокумент.Область(ОбластьТаб.Верх, 1, Мин(ОбластьТаб.Низ + 1, ОбластьТаб.Верх  + КоличествоСтрок), ТабличныйДокумент.ШиринаТаблицы);
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЛиста);
		Построитель.Выполнить();
		
		ТабДанные = Построитель.Результат.Выгрузить();
		МассивДанныхЛиста = Новый Массив;
		
		КоличествоКолонок = ТабДанные.Колонки.Количество();
		Для к = 1 По КоличествоКолонок Цикл
			// проверим, может данных в колонке просто нет и там пусто.
			МассивПустых = ТабДанные.НайтиСтроки(Новый Структура(ТабДанные.Колонки.Получить(к-1).Имя,""));
			Если МассивПустых.Количество() = ТабДанные.Количество() ИЛИ МассивПустых.Количество() = ТабДанные.Количество()-1 Тогда
				Продолжить;
			КонецЕсли;
			ДанныеКолонки = ТабДанные.ВыгрузитьКолонку(к-1);
			МассивДанныхЛиста.Добавить(ДанныеКолонки);
		КонецЦикла;
		
		СчетчикЛистов = СчетчикЛистов + 1;
		СоответствиеОбразец.Вставить(ИмяЛиста, МассивДанныхЛиста);
	
	КонецЦикла;
	
	Возврат СоответствиеОбразец;
	
КонецФункции

#КонецОбласти

#КонецОбласти