// Общий модуль "Заказы"

#Область ПрограммныйИнтерфейс

// Функция возвращает таблицу долгов по предоплате для заказов покупателя
//
// Параметры:
//	ДокументОбъект            - ДокументСсылка - Документ, который вызвал функцию.
//	Заказ                     - ДокументСсылка , массив  - Заказ или заказы, для которых 
//                                                           нужно получить долги по предоплатам.
//	ДополнительнаяСуммаЗаказа - Число - Дополнительная сумма заказа, например при корректировке.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица долгов в разрезе заказов.
//
Функция ДолгиПоПредоплате(ДокументОбъект, Заказ, ДополнительнаяСуммаЗаказа = 0) Экспорт
	
	ДокументОбъектСтруктура=Новый Структура();
	ДокументОбъектСтруктура.Вставить("Дата"          , ДокументОбъект.Дата);
	ДокументОбъектСтруктура.Вставить("МоментВремени" , ДокументОбъект.МоментВремени());
	ДокументОбъектСтруктура.Вставить("Проведен"      , ДокументОбъект.Проведен);
	
	Возврат ЗащищенныеФункцииСервер.ДолгиПоПредоплате(ДокументОбъектСтруктура, Заказ, ДополнительнаяСуммаЗаказа);
	
КонецФункции // ДолгиПоПредоплате()

// Определяет заказы поставщикам доступные к закрытию при оприходовании товаров.
//
// Параметры:
//  Документ - ДокументОбъект - Документ выполняющий закрытие заказов.
//  ЗакрытыеРаспределения - ТаблицаЗначений - Распределения по заказам покупателей закрытые документом.
//  ЗакрытиеЗаказовПоПодразделению - Булево, Неопределено - Признак закрытия заказов только по 
//                                                          подразделению документа и подчиненным.
//    Если Неопределено то будет получено из значения соответствующей учетной политики.
//  ЗакрытиеЗаказовПоОрганизации - ТаблицаЗначений - Признак закрытия заказов только по организации документа.
//    Если Неопределено то будет получено из значения соответствующей учетной политики.
//
// Возвращаемое значение:
//   РезультатЗапроса - результат выполнения запроса, содержащий заказы поставщикам,
//                      доступные к закрытию при оприходовании товаров.
//
Функция ЗаказыПоставщикамКЗакрытию(
	Документ,
	ЗакрытыеРаспределения,
	Знач ЗакрытиеЗаказовПоПодразделению = Неопределено,
	Знач ЗакрытиеЗаказовПоОрганизации = Неопределено) Экспорт
	
	ДополнительныеСвойства = Документ.ДополнительныеСвойства;
	РежимПроведения = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства, "РежимПроведения", РежимПроведенияДокумента.Оперативный);
	ЗаказОснование = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства, "ЗаказОснование");
	
	Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
		
		Момент = Документ.МоментВремени();
		
	КонецЕсли;
	
	Если ЗакрытиеЗаказовПоОрганизации = Неопределено Тогда
		
		ЗакрытиеЗаказовПоОрганизации = УчетныеПолитикиСервер.Значение("ЗакрытиеЗаказовПоОрганизации",Документ.Дата);
		
	КонецЕсли;
	
	Если ЗакрытиеЗаказовПоПодразделению = Неопределено Тогда
		
		ЗакрытиеЗаказовПоПодразделению = УчетныеПолитикиСервер.Значение(
			"ЗакрытиеЗаказовПоПодразделению", Документ.Дата, Документ.ПодразделениеКомпании);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Отборы = Новый Массив;
	
	Если ЗакрытиеЗаказовПоОрганизации Тогда
		
		Отборы.Добавить("И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Документ.Организация);
		
	КонецЕсли;
	
	Если ЗакрытиеЗаказовПоПодразделению Тогда
		
		Отборы.Добавить("И ЗаказыПоставщикамОстатки.ЗаказПоставщику.ПодразделениеКомпании В ИЕРАРХИИ(&ПодразделениеКомпании)");
		Запрос.УстановитьПараметр("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		
	КонецЕсли;
	
	ТекстОтбора = "";
	
	Если Отборы.Количество() > 0 Тогда
		
		ТекстОтбора = СтрСоединить(Отборы, Символы.ПС);
		
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТабЗакрытыхРаспределений.ЗаказПоставщика КАК ЗаказПоставщика,
	|	ТабЗакрытыхРаспределений.Номенклатура КАК Номенклатура,
	|	ТабЗакрытыхРаспределений.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТабЗакрытыхРаспределений.Количество КАК Количество
	|ПОМЕСТИТЬ
	|	ВремТаблицаЗакрытыхРаспределений
	|ИЗ
	|	&ТабЗакрытыхРаспределений КАК ТабЗакрытыхРаспределений
	|;
	|
	|ВЫБРАТЬ
	|	ТабЗакрытыхРаспределений.ЗаказПоставщика КАК ЗаказПоставщика,
	|	ТабЗакрытыхРаспределений.Номенклатура КАК Номенклатура,
	|	ТабЗакрытыхРаспределений.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТабЗакрытыхРаспределений.Количество) КАК Количество
	|ПОМЕСТИТЬ
	|	ТаблицаЗакрытыхРаспределений
	|ИЗ
	|	ВремТаблицаЗакрытыхРаспределений КАК ТабЗакрытыхРаспределений
	|СГРУППИРОВАТЬ ПО
	|	ТабЗакрытыхРаспределений.ЗаказПоставщика,
	|	ТабЗакрытыхРаспределений.Номенклатура,
	|	ТабЗакрытыхРаспределений.ХарактеристикаНоменклатуры
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ТаблицаЗакрытыхРаспределений.ЗаказПоставщика ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ КАК ЗаказРаспределение,
	|	ЗаказыПоставщикамОстатки.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаказыПоставщикамОстатки.ЗаказПоставщику=&ЗаказОснование ТОГДА
	|			0
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ КАК ЗаказОснование,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЗаказыПоставщикамОстатки.ЗаказаноОстаток = 0 ТОГДА
	|			ЗаказыПоставщикамОстатки.СуммаОстаток
	|		КОГДА (ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаЗакрытыхРаспределений.Количество, 0)) = 0 ТОГДА
	|			ЗаказыПоставщикамОстатки.СуммаОстаток
	|		ИНАЧЕ
	|			(ЗаказыПоставщикамОстатки.СуммаОстаток/ЗаказыПоставщикамОстатки.ЗаказаноОстаток)*(ЗаказыПоставщикамОстатки.ЗаказаноОстаток - (ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаЗакрытыхРаспределений.Количество, 0)))
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЗаказыПоставщикамОстатки.ЗаказаноОстаток = 0 ТОГДА
	|			ЗаказыПоставщикамОстатки.СуммаУпрОстаток
	|		КОГДА (ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаЗакрытыхРаспределений.Количество, 0)) = 0 ТОГДА
	|			ЗаказыПоставщикамОстатки.СуммаУпрОстаток
	|		ИНАЧЕ
	|			(ЗаказыПоставщикамОстатки.СуммаУпрОстаток/ЗаказыПоставщикамОстатки.ЗаказаноОстаток)*(ЗаказыПоставщикамОстатки.ЗаказаноОстаток - (ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаЗакрытыхРаспределений.Количество, 0)))
	|	КОНЕЦ КАК СуммаУпр,
	|	ЗаказыПоставщикамОстатки.ЗаказаноОстаток - (ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаЗакрытыхРаспределений.Количество, 0)) КАК Заказано
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&Момент,
	|		Номенклатура В (&Номенклатура)
	|		И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
	|		И Контрагент=&Контрагент
	|	) КАК ЗаказыПоставщикамОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТаблицаЗакрытыхРаспределений КАК ТаблицаЗакрытыхРаспределений
	|ПО
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику            = ТаблицаЗакрытыхРаспределений.ЗаказПоставщика
	|	И ЗаказыПоставщикамОстатки.Номенклатура               = ТаблицаЗакрытыхРаспределений.Номенклатура
	|	И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = ТаблицаЗакрытыхРаспределений.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(&Момент, 
	|	Номенклатура В (&Номенклатура)
	|	И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
	|	) КАК ЗаказыРаспределениеОстатки
	|ПО
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику            = ЗаказыРаспределениеОстатки.ЗаказПоставщика
	|	И ЗаказыПоставщикамОстатки.Номенклатура               = ЗаказыРаспределениеОстатки.Номенклатура
	|	И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|ГДЕ
	|	(ЗаказыПоставщикамОстатки.ЗаказаноОстаток - (ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаЗакрытыхРаспределений.Количество, 0))) <> 0
	|	%1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА ТаблицаЗакрытыхРаспределений.ЗаказПоставщика ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ Убыв,
	|	ВЫБОР
	|		КОГДА ЗаказыПоставщикамОстатки.ЗаказПоставщику=&ЗаказОснование ТОГДА
	|			0
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ ВОЗР,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата,
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры.Сортировка ВОЗР
	|";
	
	ХарактеристикаНоменклатуры = Документ.Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
	ХарактеристикаНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Запрос.Текст = СтрШаблон(Запрос.Текст, ТекстОтбора);
	Запрос.УстановитьПараметр("ТабЗакрытыхРаспределений", ЗакрытыеРаспределения);
	Запрос.УстановитьПараметр("Момент", Момент);
	Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
	Запрос.УстановитьПараметр("ЗаказОснование", ЗаказОснование);
	Запрос.УстановитьПараметр("Номенклатура", Документ.Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",ХарактеристикаНоменклатуры);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ЗаказыПоставщикамКЗакрытию()

#Область ПроцедурыРегламентныеФоновыеЗадания

// Процедура запуска регламентного задания "Автоматическое снятие резервов"
//
// Параметры:
//	СтруктураПараметров - Структура - Структура параметров.
//
Процедура АвтоматическоеСнятиеРезервов(СтруктураПараметров) Экспорт
	
	// Проверим доступность прав на запуск задания
	РазрешениеСнятияРезервов = ПравоПользователя("РазрешениеСнятияРезервов");
	Если РазрешениеСнятияРезервов = Перечисления.РезервыСпособыСписания.Запрещено Тогда 
		ВызватьИсключение НСтр("ru = 'Запрещено снимать резервы, недостаточно прав'");
	Иначе
		
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АвтоматическоеСнятиеРезервов);
		
		// приводим параметры к корректности
		Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
			СтруктураПараметров = Новый Структура;
		КонецЕсли;
		ЗаказыНаАвтомобиль = Неопределено;
		Если НЕ СтруктураПараметров.Свойство("ЗаказыНаАвтомобиль",ЗаказыНаАвтомобиль) Тогда
			СтруктураПараметров.Вставить("ЗаказыНаАвтомобиль");
		КонецЕсли;
		ЗаказыПокупателей = Неопределено;	
		Если НЕ СтруктураПараметров.Свойство("ЗаказыПокупателей", ЗаказыПокупателей) Тогда
			СтруктураПараметров.Вставить("ЗаказыПокупателей");
		КонецЕсли;
		ЗаказыВнутренние = Неопределено;
		Если НЕ СтруктураПараметров.Свойство("ЗаказыВнутренние", ЗаказыВнутренние) Тогда
			СтруктураПараметров.Вставить("ЗаказыВнутренние");
		КонецЕсли;
		Если НЕ СтруктураПараметров.Свойство("КорректировкаЗаказа") Тогда
			СтруктураПараметров.Вставить("КорректировкаЗаказа");
		КонецЕсли;
		Если НЕ СтруктураПараметров.Свойство("ФормированиеНапоминаний") Тогда
			СтруктураПараметров.Вставить("ФормированиеНапоминаний");
		КонецЕсли;
		Если НЕ СтруктураПараметров.Свойство("СписаниеРезервовСПредоплатой") Тогда
			СтруктураПараметров.Вставить("СписаниеРезервовСПредоплатой");
		КонецЕсли;
		
		РазрешеноСнятиеРезервовТоваров =  ПравоДоступа("Изменение", Метаданные.Документы.СнятиеРезервовЗаказовПокупателя); 
		
		РазрешеноСнятиеРезервовАвтомобилей = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаАвтомобиль)  
				И ПравоДоступа("Изменение", Метаданные.Документы.СнятиеРезервовАвтомобилей);
				
		Если (ЗаказыПокупателей <> Неопределено И ЗаказыПокупателей
			ИЛИ ЗаказыВнутренние <> Неопределено И ЗаказыВнутренние) И РазрешеноСнятиеРезервовТоваров Тогда   
			Обработки.АвтоматическоеСнятиеРезервов.ВыполнитьАвтоматическоеСнятиеРезервов(СтруктураПараметров);
		КонецЕсли;
		
		Если ЗаказыНаАвтомобиль<>Неопределено И ЗаказыНаАвтомобиль И РазрешеноСнятиеРезервовАвтомобилей Тогда 
			Обработки
				.АвтоматическоеСнятиеРезервовАвтомобилей
				.ВыполнитьАвтоматическоеСнятиеРезервовАвтомобилей(СтруктураПараметров);
		КонецЕсли; 
			
	КонецЕсли;
	
КонецПроцедуры 

// Выполняет допроведение документов по партионным регистрам
//
// Параметры:
//	СтруктураПараметров - Структура - Структура параметров.
//
Процедура НапоминаниеПроСнятиеРезервов(СтруктураПараметров) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.НапоминаниеПроСнятиеРезервов);
	
	// приводим параметры к корректности
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	ЗаказыНаАвтомобиль = Неопределено;
	ЗаказыПокупателей = Неопределено;
	ЗаказыСПредоплатой = Неопределено;
	
	СтруктураПараметров.Свойство("НапоминаниеЗаказыНаАвтомобиль",ЗаказыНаАвтомобиль);
	СтруктураПараметров.Свойство("НапоминаниеЗаказыПокупателей", ЗаказыПокупателей);
	СтруктураПараметров.Свойство("НапоминаниеЗаказыСПредоплатой", ЗаказыСПредоплатой);
	
	Если ЗаказыПокупателей <> Неопределено И ЗаказыПокупателей Тогда
		Обработки.АвтоматическоеСнятиеРезервов.СформироватьНапоминанияПроСнятиеРезервов(ЗаказыСПредоплатой);
	КонецЕсли;
	
	Если ЗаказыНаАвтомобиль <> Неопределено И ЗаказыНаАвтомобиль Тогда
		Обработки.АвтоматическоеСнятиеРезервовАвтомобилей.СформироватьНапоминанияПроСнятиеРезервовАвтомобилей(ЗаказыСПредоплатой);
	КонецЕсли;
	
КонецПроцедуры // ДопроведениеПоПартиям()

// Функция производит поиск заказа по заданному автомобилю
//
// Параметры:
//  Момент            - Дата - Дата поиска заказа.
//  Автомобиль        - СправочникСсылка.Автомобили - Автомобиль поиска.
//  ПараметрыДействия - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  ДокументСсылка.ЗаказПоставщикуНаАвтомобиль - Результат поиска.
//
Функция ПолучитьЗаказПоставщикуНаАвтомобтль(Момент, Автомобиль, ПараметрыДействия = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамНаАвтомобилиОстатки.ЗаказПоставщику КАК Заказ
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(&НаМомент, Автомобиль = &Автомобиль) КАК ЗаказыПоставщикамНаАвтомобилиОстатки
	|ГДЕ
	|	ЗаказыПоставщикамНаАвтомобилиОстатки.КоличествоОстаток > 0";
	
	Запрос = Новый запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаМомент"   , Момент);
	Запрос.УстановитьПараметр("Автомобиль" , Автомобиль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Заказ;
	
КонецФункции

// Функция производит поиск заказа по заданному автомобилю
//
// Параметры:
//  Момент     - Дата - Дата поиска заказа.
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль поиска.
// 
// Возвращаемое значение:
//  ДокументСсылка.ЗаказНаАвтомобиль, Неопределено - Результат поиска.
//
Функция ПолучитьЗаказКлиентаНаАвтомобиль(Момент, Автомобиль) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыАвтомобилейОстатки.Заказ
	|ИЗ
	|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(&НаМомент, Автомобиль = &Автомобиль) КАК ЗаказыАвтомобилейОстатки";
	
	Запрос = Новый запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Автомобиль" , Автомобиль);
	Запрос.УстановитьПараметр("НаМомент", Момент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Заказ;
	
КонецФункции

// Производит поиск заказов с резервом в разрезе контрагента
//
// Параметры:
//  Объект     - ДокументСсылка - документ заказа автомобиля.
//  Автомобиль - СправочникСсылка.Автомобили - автомобиль проверки.
// 
// Возвращаемое значение:
//  ДокументСсылка.ЗаказНаАвтомобиль - заказ для данного автомобиля.
//
Функция ПолучитьЗаказКлиентаСРезервом(Объект, Автомобиль) Экспорт
	
	// Функция поиска заказа по автомобилю
	ДокументОбъектСтруктура=Новый Структура();
	ДокументОбъектСтруктура.Вставить("Ссылка"                , Объект.Ссылка);
	ДокументОбъектСтруктура.Вставить("Дата"                  , Объект.Дата);
	ДокументОбъектСтруктура.Вставить("Контрагент"            , Объект.Контрагент);
	ДокументОбъектСтруктура.Вставить("ДоговорВзаиморасчетов" , Объект.ДоговорВзаиморасчетов);
	
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.РеализацияАвтомобилейНайтиЗаказАвтомобиля(ДокументОбъектСтруктура,Автомобиль);
	
КонецФункции

// Функция получения описания типов, содержащего типы сделок покупателя/поставщика
//
// Параметры:
//  ТипыСделокПокупателя - Булево - Признак получения типов сделок покупателя или поставщика.
//
// Возвращаемое значение:
//   ОписаниеТипов - Типы сделок покупателя или поставщика.
//
Функция ПолучитьТипыСделок(ТипыСделокПокупателя) Экспорт
	Если ТипыСделокПокупателя Тогда
		ТипыСделок=Новый ОписаниеТипов(
			"ДокументСсылка.ЗаказПокупателя,
			|ДокументСсылка.ЗаказНаАвтомобиль,
			|ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили,
			|ДокументСсылка.СчетНаОплату,
			|ДокументСсылка.СчетНаОплатуЗаАвтомобили,
			|ДокументСсылка.РеализацияТоваров,
			|ДокументСсылка.РеализацияАвтомобилей,
			|ДокументСсылка.ЧекНаОплату,
			|ДокументСсылка.ОтчетКомиссионера,
			|ДокументСсылка.ОтчетКомиссионераЗаАвтомобили,
			|ДокументСсылка.ВозвратОтПокупателя,
			|ДокументСсылка.ВозвратОтПокупателяАвтомобилей,
			|ДокументСсылка.КорректировкаЗаказаПокупателя,
			|ДокументСсылка.ЗаменаВЗаказеПокупателя,
			|ДокументСсылка.ЗаказНаряд,
			|ДокументСсылка.ЗаявкаНаРемонт,
			|ДокументСсылка.ДоговорАренды,
			|ДокументСсылка.АктРазногласий,
			|ДокументСсылка.ЗаявкаНаХранениеШин"
		);
	Иначе
		ТипыСделок=Новый ОписаниеТипов(
			"ДокументСсылка.ЗаказПоставщику,
			|ДокументСсылка.ЗаказПоставщикуНаАвтомобиль,
			|ДокументСсылка.ОптовыйЗаказПоставщикуНаАвтомобили,
			|ДокументСсылка.ПоступлениеТоваров,
			|ДокументСсылка.ПоступлениеАвтомобилей,
			|ДокументСсылка.ПоступлениеДопРасходов,
			|ДокументСсылка.СчетОтПоставщика,
			|ДокументСсылка.СчетОтПоставщикаЗаАвтомобили,
			|ДокументСсылка.АвансовыйОтчет,
			|ДокументСсылка.ОтчетКомитенту,
			|ДокументСсылка.ОтчетКомитентуЗаАвтомобили,
			|ДокументСсылка.ВозвратПоставщику,
			|ДокументСсылка.ВозвратПоставщикуАвтомобилей,
			|ДокументСсылка.КорректировкаЗаказаПоставщику"
		);
	КонецЕсли; 
	Возврат ТипыСделок;
КонецФункции // орПолучитьТипыСделок()

#КонецОбласти

#Область СостояниеЗаказа

// Процедура формирует напоминания авторам заказов при поступлении товаров на склад
// и резервировании его в заказах покупателей.
//
// Параметры:
//  Источник - РегистрыНакопления.ЗаказыПокупателейНаборЗаписей	 - набор записей регистра.
//
Процедура НапоминаниеЗаказыПокупателейРезервирование(Источник) Экспорт
	
	// Получим регистратор записей в регистр.
	ОтборРегистратор=Источник.Отбор.Найти("Регистратор");
	Если ОтборРегистратор=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Регистратор=ОтборРегистратор.Значение;
	
	Если НЕ Источник.ИнтерактивноеПроведение Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Регистратор)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	РегистраторАвтор=Регистратор.Автор;
	
	// Получим заказы и их авторов, которым требуется создать напоминание.
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ЗаказыПокупателей.Заказ КАК Документ.ЗаказПокупателя) КАК ЗаказПокупателя,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказыПокупателей.Заказ) КАК ЗаказПокупателяПредставление,
	|	ЕСТЬNULL(Пользователи.Ссылка, ВЫРАЗИТЬ(ЗаказыПокупателей.Заказ КАК Документ.ЗаказПокупателя).Автор) КАК Автор,
	|	Пользователи.Ссылка,
	|	ДополнительныеСведения.Значение КАК СпособУведомления
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО (ДополнительныеСведения.Свойство = &Свойство)
	|			И ((ВЫРАЗИТЬ(ЗаказыПокупателей.Заказ КАК Документ.ЗаказПокупателя)) = ДополнительныеСведения.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ВЫРАЗИТЬ(ЗаказыПокупателей.Заказ КАК Документ.ЗаказПокупателя).Менеджер = Пользователи.Сотрудник)
	|			И (НЕ Пользователи.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|ГДЕ
	|	ЗаказыПокупателей.ВидДвижения = &ВидДвиженияПриход
	|	И ЗаказыПокупателей.Регистратор = &Регистратор
	|	И ЗаказыПокупателей.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|	И ЕСТЬNULL(Пользователи.Ссылка, ВЫРАЗИТЬ(ЗаказыПокупателей.Заказ КАК Документ.ЗаказПокупателя).Автор) <> &ПустойАвтор
	|	И ЗаказыПокупателей.Резерв > 0
	|	И НЕ ДополнительныеСведения.Значение = ЗНАЧЕНИЕ(Перечисление.УведомлениеОРезервах.НеУведомлятьОРезервировании)";
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Регистратор",       Регистратор);
	Запрос.УстановитьПараметр("ПустойАвтор",       Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("Свойство",          ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.УведомлениеОРезервировании);
	
	Если ЕстьРеквизит(Регистратор, "ДополнительныеРеквизиты") Тогда
		УправлениеСвойствами.ПолучитьЗначенияСвойств(Регистратор);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаказов = РезультатЗапроса.Выгрузить();
	Если ТаблицаЗаказов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Заказ КАК Заказ
		|ИЗ
		|	(ВЫБРАТЬ 
		|		ЗаказыПокупателейОстатки.Заказ КАК Заказ,
		|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ВЫБОР
		|			КОГДА ЗаказыПокупателейОстатки.ЗаказаноОстаток = ЗаказыПокупателейОстатки.РезервОстаток ТОГДА
		|				1
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ КАК СовпадаетЗаказИРезерв
		|	ИЗ
		|		РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментВремени, Заказ В (&Заказы)) КАК ЗаказыПокупателейОстатки
		|	ГДЕ
		|		ЗаказыПокупателейОстатки.ЗаказаноОстаток>0) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Заказ
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ВложенныйЗапрос.СовпадаетЗаказИРезерв)>0
		|";
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Регистратор.МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Заказы",        ТаблицаЗаказов.ВыгрузитьКолонку("ЗаказПокупателя"));
	ТаблицаПолныхРезервов = Запрос.Выполнить().Выгрузить();
	ТаблицаПолныхРезервов.Индексы.Добавить("Заказ");
	
	НаборЗаписейНапоминания = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	НаборЗаписейНапоминания.Отбор.Автор.Установить(РегистраторАвтор);
	НаборЗаписейНапоминания.Прочитать();
	
	ЗанятоеВремя = НаборЗаписейНапоминания.Выгрузить(,"ВремяСобытия,Источник");
	
	Для Каждого Выборка Из ТаблицаЗаказов Цикл
		
		ЧастичноеРезервирование = (ТаблицаПолныхРезервов.Найти(Выборка.ЗаказПокупателя, "Заказ") = Неопределено);
		
		Если Выборка.СпособУведомления = Перечисления.УведомлениеОРезервах.УведомлятьОПолномРезервировании 
			И ЧастичноеРезервирование Тогда
			
			Продолжить;
		КонецЕсли;
		
		ВремяСобытия = ТекущаяДатаСеанса();
		НайденныеСобытия = ЗанятоеВремя.НайтиСтроки(Новый Структура("ВремяСобытия,Источник", ВремяСобытия, Выборка.ЗаказПокупателя));
		
		Если НайденныеСобытия.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Для каждого автора создадим напоминание.
		Расписание = Неопределено;
		Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));		
		НоваяЗапись = НаборЗаписейНапоминания.Добавить();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.Пользователь = Выборка.Автор;
		НоваяЗапись.Автор = РегистраторАвтор;
		НоваяЗапись.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		НоваяЗапись.ВремяСобытия = ВремяСобытия;
		НоваяЗапись.СрокНапоминания = ТекущаяДатаСеанса();
		Если ЧастичноеРезервирование Тогда
			НоваяЗапись.Описание = СокрЛП(РегистраторАвтор) + ". " + НСтр("ru = 'Детали по заказу'") + " <" 
				+ Выборка.ЗаказПокупателяПредставление + "> " + "для" + " <"
				+ СокрЛП(?(ТипЗнч(Выборка.ЗаказПокупателя)=Тип("ДокументСсылка.ЗаказВнутренний"),
					Выборка.ЗаказПокупателя.ПодразделениеПолучатель,Выборка.ЗаказПокупателя.Контрагент))
				+"> " + НСтр("ru = 'частично зарезервированы.'");
		Иначе
			НоваяЗапись.Описание = СокрЛП(РегистраторАвтор)+ ". " + НСтр("ru = 'Детали по заказу'") + " <"
				+ Выборка.ЗаказПокупателяПредставление+ "> " + "для" + " <"
				+ СокрЛП(?(ТипЗнч(Выборка.ЗаказПокупателя)=Тип("ДокументСсылка.ЗаказВнутренний"),
					Выборка.ЗаказПокупателя.ПодразделениеПолучатель,Выборка.ЗаказПокупателя.Контрагент))
				+"> " + НСтр("ru = 'полностью зарезервированы.'");
		КонецЕсли;
		НоваяЗапись.Расписание = Расписание;
		НоваяЗапись.Источник = Выборка.ЗаказПокупателя;
	КонецЦикла;
	
	// Записываем сформированные напоминания.
	Попытка
		НаборЗаписейНапоминания.Записать(Истина); 
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось записать напоминания.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры //НапоминаниеЗаказыПокупателейРезервирование()

// Функция получения актуального состояния заказа.
//
// Параметры:
//  ДокументРегистратор       - ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказВнутренний - документ заказа.
//  НаДату                    - Дата - дата получения состояния заказа.
//  ТекущееСостояние          - СправочникСсылка.ВидыСостоянийЗаказНарядов - состояние заказа.
//  ЭтоОтменаПроведенияЗаказа - Булево - признак отмены проведения заказа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица состояния заказа.
//
Функция ПолучитьСостояниеПоОстаткамЗаказа(ДокументРегистратор, НаДату, ТекущееСостояние, ЭтоОтменаПроведенияЗаказа=Ложь) Экспорт
	
	// Инициализация таблицы результата.
	МассивТиповЗаказа = Новый Массив;
	МассивТиповЗаказа.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТиповЗаказа.Добавить(Тип("ДокументСсылка.ЗаказВнутренний"));
	
	ТаблицаСостоянийЗаказов = Новый ТаблицаЗначений;
	ТаблицаСостоянийЗаказов.Колонки.Добавить("ЗаказПокупателя", Новый ОписаниеТипов(МассивТиповЗаказа));
	ТаблицаСостоянийЗаказов.Колонки.Добавить("Состояние", Новый ОписаниеТипов("СправочникСсылка.ВидыСостоянийЗаказНарядов"));
	ТаблицаСостоянийЗаказов.Колонки.Добавить("ПротоколУстановки", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	
	// Если регистратор - корректировка движений, тогда не делаем изменений по состояниям.
	Если ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаДвижений") Тогда
		Возврат ТаблицаСостоянийЗаказов;
	КонецЕсли;
	
	Если ЭтоОтменаПроведенияЗаказа И (ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ЗаказВнутренний")) Тогда
		
		НоваяСтрока = ТаблицаСостоянийЗаказов.Добавить();
		НоваяСтрока.ЗаказПокупателя = ДокументРегистратор;
		НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Новый;
		
		Возврат ТаблицаСостоянийЗаказов;
		
	ИначеЕсли ДокументРегистратор.Проведен ИЛИ ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПокупателей.Заказ КАК Заказ,
		               |	ЗаказыПокупателей.Заказано КАК Заказано,
		               |	0 КАК Количество,
		               |	ЗаказыПокупателей.Резерв * ВЫБОР
		               |		КОГДА ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		               |			ТОГДА -1
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК РезервПоЗаказу
		               |ПОМЕСТИТЬ СписокЗаказовПокупателей
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
		               |ГДЕ
		               |	ЗаказыПокупателей.Регистратор = &Регистратор
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗаказыРаспределение.ЗаказПокупателя,
		               |	0,
		               |	ЗаказыРаспределение.Количество * ВЫБОР
		               |		КОГДА ЗаказыРаспределение.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		               |			ТОГДА -1
		               |		ИНАЧЕ 1
		               |	КОНЕЦ,
		               |	0
		               |ИЗ
		               |	РегистрНакопления.ЗаказыРаспределение КАК ЗаказыРаспределение
		               |ГДЕ
		               |	ЗаказыРаспределение.Регистратор = &Регистратор
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СписокЗаказовПокупателей.Заказ КАК Заказ,
		               |	СУММА(СписокЗаказовПокупателей.Заказано) КАК Заказано,
		               |	СУММА(СписокЗаказовПокупателей.Количество) КАК Количество,
		               |	СУММА(СписокЗаказовПокупателей.РезервПоЗаказу) КАК РезервПоЗаказу
		               |ПОМЕСТИТЬ СписокЗаказов
		               |ИЗ
		               |	СписокЗаказовПокупателей КАК СписокЗаказовПокупателей
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СписокЗаказовПокупателей.Заказ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ СписокЗаказовПокупателей
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СписокЗаказов.Заказ КАК Заказ,
		               |	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0)) КАК ЗаказаноОстаток,
		               |	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0)) КАК РезервПоЗаказуОстаток,
		               |	СУММА(ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
		               |	СУММА(СписокЗаказов.Заказано) КАК ЗаказаноПоРегистратору,
		               |	СУММА(СписокЗаказов.Количество) КАК КоличествоПоРегистратору,
		               |	СУММА(СписокЗаказов.РезервПоЗаказу) КАК РезервПоЗаказу
		               |ИЗ
		               |	СписокЗаказов КАК СписокЗаказов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		               |				&Дата,
		               |				Заказ В
		               |					(ВЫБРАТЬ
		               |						СписокЗаказов.Заказ КАК Заказ
		               |					ИЗ
		               |						СписокЗаказов КАК СписокЗаказов)) КАК ЗаказыПокупателейОстатки
		               |		ПО СписокЗаказов.Заказ = ЗаказыПокупателейОстатки.Заказ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
		               |				&Дата,
		               |				ЗаказПокупателя В
		               |					(ВЫБРАТЬ
		               |						СписокЗаказов.Заказ КАК Заказ
		               |					ИЗ
		               |						СписокЗаказов КАК СписокЗаказов)) КАК ЗаказыРаспределениеОстатки
		               |		ПО СписокЗаказов.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СписокЗаказов.Заказ";
		
	Иначе
		// Получим остатки по заказам.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
		               |	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток,
		               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК РезервОстаток,
		               |	ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		               |	0 КАК ЗаказаноПоРегистратору,
		               |	0 КАК КоличествоПоРегистратору,
		               |	0 КАК РезервПоРегистратору,
		               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК РезервПоЗаказуОстаток,
		               |	0 КАК РезервПоЗаказу
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата, ) КАК ЗаказыПокупателейОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(&Дата, ) КАК ЗаказыРаспределениеОстатки
		               |		ПО ЗаказыПокупателейОстатки.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя";
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата",  Новый Граница(НаДату, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Регистратор", ДокументРегистратор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстУстановки = НСтр("ru = '""Заказано"" = %1; ""Распределение"" = %2; ""Резерв"" = %3'");
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаСостоянийЗаказов.Добавить();
		НоваяСтрока.ЗаказПокупателя = Выборка.Заказ;
		
		ЗаказаноОстаток = Выборка.ЗаказаноОстаток - ?(ЭтоОтменаПроведенияЗаказа, Выборка.ЗаказаноПоРегистратору, 0);
		КоличествоОстаток = Выборка.КоличествоОстаток - ?(ЭтоОтменаПроведенияЗаказа, Выборка.КоличествоПоРегистратору, 0);
		РезервПоЗаказуОстаток = Выборка.РезервПоЗаказуОстаток - ?(ЭтоОтменаПроведенияЗаказа, Выборка.РезервПоЗаказу, 0);
		
		Если ЗаказаноОстаток = 0 И РезервПоЗаказуОстаток = 0 И КоличествоОстаток = 0 Тогда
			
			Если НЕ Выборка.Заказ.Проведен Тогда
				НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Новый;
			Иначе
				// Остатков по заказу нет, установим статус "Закрыт".
				НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт;
			КонецЕсли;
			
		Иначе
			
			// Сфорируем описание
			НоваяСтрока.ПротоколУстановки = СтрШаблон(ТекстУстановки,
				ЗаказаноОстаток,
				КоличествоОстаток,
				РезервПоЗаказуОстаток);
			
			Если РезервПоЗаказуОстаток = 0 И КоличествоОстаток = 0 Тогда
				НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.НеРазмещен;
			ИначеЕсли РезервПоЗаказуОстаток = 0 И КоличествоОстаток > 0 Тогда
				НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Размещен;
			ИначеЕсли РезервПоЗаказуОстаток >= Выборка.ЗаказаноОстаток Тогда
				НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.ГотовКОтгрузке;
			ИначеЕсли ЗаказаноОстаток > РезервПоЗаказуОстаток Тогда
				НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.ГотовКОтгрузкеЧастично;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Состояние) ИЛИ (ЗначениеЗаполнено(ТекущееСостояние) И НоваяСтрока = ТекущееСостояние) Тогда
			ТаблицаСостоянийЗаказов.Удалить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСостоянийЗаказов;
	
КонецФункции // ПолучитьОстаткиЗаказов()

// Функция получения актуального состояния заказа поставщику.
//
// Параметры:
//  ДокументРегистратор       - ДокументСсылка.ЗаказПоставщика - документ заказа.
//  НаДату                    - Дата - дата получения состояния заказа.
//  ТекущееСостояние          - СправочникСсылка.ВидыСостоянийЗаказНарядов - состояние заказа.
//  ЭтоОтменаПроведенияЗаказа - Булево - признак отмены проведения заказа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица состояния заказа.
//
Функция ПолучитьСостояниеПоОстаткамЗаказаПоставщика(ДокументРегистратор, НаДату, ТекущееСостояние, ЭтоОтменаПроведенияЗаказа=Ложь) Экспорт
	
	// Инициализация таблицы результата.
	ТаблицаСостоянийЗаказов = Новый ТаблицаЗначений;
	ТаблицаСостоянийЗаказов.Колонки.Добавить("ЗаказПоставщика", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	ТаблицаСостоянийЗаказов.Колонки.Добавить("Состояние", Новый ОписаниеТипов("СправочникСсылка.ВидыСостоянийЗаказНарядов"));
	ТаблицаСостоянийЗаказов.Колонки.Добавить("ПротоколУстановки", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	
	Если ЭтоОтменаПроведенияЗаказа И ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		НоваяСтрока = ТаблицаСостоянийЗаказов.Добавить();
		НоваяСтрока.ЗаказПоставщика = ДокументРегистратор;
		НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Новый;
		
		Возврат ТаблицаСостоянийЗаказов;
		
	ИначеЕсли ДокументРегистратор.Проведен ИЛИ ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПоставщикам.ЗаказПоставщику КАК Заказ,
		               |	ЗаказыПоставщикам.Заказано * ВЫБОР
		               |		КОГДА ЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		               |			ТОГДА -1
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК Заказано,
		               |	0 КАК Количество,
		               |	ВЫБОР
		               |		КОГДА ЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		               |			ТОГДА ЗаказыПоставщикам.Заказано
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК КоличествоРасход
		               |ПОМЕСТИТЬ СписокЗаказовПоставщика
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
		               |ГДЕ
		               |	ЗаказыПоставщикам.Регистратор = &Регистратор
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗаказыРаспределение.ЗаказПоставщика,
		               |	0,
		               |	ЗаказыРаспределение.Количество * ВЫБОР
		               |		КОГДА ЗаказыРаспределение.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		               |			ТОГДА -1
		               |		ИНАЧЕ 1
		               |	КОНЕЦ,
		               |	0
		               |ИЗ
		               |	РегистрНакопления.ЗаказыРаспределение КАК ЗаказыРаспределение
		               |ГДЕ
		               |	ЗаказыРаспределение.Регистратор = &Регистратор
		               |	И (ВЫРАЗИТЬ(ЗаказыРаспределение.ЗаказПоставщика КАК Документ.ЗаказПоставщику)) <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СписокЗаказовПоставщика.Заказ КАК Заказ,
		               |	СУММА(СписокЗаказовПоставщика.Заказано) КАК Заказано,
		               |	СУММА(СписокЗаказовПоставщика.Количество) КАК Количество,
		               |	СУММА(СписокЗаказовПоставщика.КоличествоРасход) КАК КоличествоРасход
		               |ПОМЕСТИТЬ СписокЗаказов
		               |ИЗ
		               |	СписокЗаказовПоставщика КАК СписокЗаказовПоставщика
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СписокЗаказовПоставщика.Заказ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ СписокЗаказовПоставщика
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СписокЗаказов.Заказ КАК Заказ,
		               |	СУММА(ЕСТЬNULL(ЗаказыПоставщикамОбороты.ЗаказаноКонечныйОстаток, 0)) КАК ЗаказаноОстаток,
		               |	СУММА(ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
		               |	СУММА(ЕСТЬNULL(ЗаказыПоставщикамОбороты.ЗаказаноРасход, 0)) КАК КоличествоРасход,
		               |	СУММА(СписокЗаказов.Заказано) КАК ЗаказаноПоРегистратору,
		               |	СУММА(СписокЗаказов.Количество) КАК КоличествоПоРегистратору,
		               |	СУММА(СписокЗаказов.КоличествоРасход) КАК КоличествоРасходПоРегистратору
		               |ИЗ
		               |	СписокЗаказов КАК СписокЗаказов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
		               |				&Дата,
		               |				ЗаказПоставщика В
		               |					(ВЫБРАТЬ
		               |						СписокЗаказов.Заказ КАК Заказ
		               |					ИЗ
		               |						СписокЗаказов КАК СписокЗаказов)) КАК ЗаказыРаспределениеОстатки
		               |		ПО СписокЗаказов.Заказ = ЗаказыРаспределениеОстатки.ЗаказПоставщика
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(
		               |				,
		               |				&Дата,
		               |				,
		               |				,
		               |				ЗаказПоставщику В
		               |					(ВЫБРАТЬ
		               |						СписокЗаказов.Заказ КАК Заказ
		               |					ИЗ
		               |						СписокЗаказов КАК СписокЗаказов)) КАК ЗаказыПоставщикамОбороты
		               |		ПО СписокЗаказов.Заказ = ЗаказыПоставщикамОбороты.ЗаказПоставщику
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СписокЗаказов.Заказ";
	Иначе
		// Получим остатки по заказам.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК Заказ,
		               |	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток
		               |ПОМЕСТИТЬ ОстаткиПоЗаказам
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(&Дата, ) КАК ЗаказыПоставщикамОстатки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОстаткиПоЗаказам.Заказ КАК Заказ,
		               |	ОстаткиПоЗаказам.ЗаказаноОстаток КАК ЗаказаноОстаток,
		               |	ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		               |	ЕСТЬNULL(ЗаказыПоставщикамОбороты.ЗаказаноРасход, 0) КАК КоличествоРасход,
		               |	0 КАК ЗаказаноПоРегистратору,
		               |	0 КАК КоличествоПоРегистратору,
		               |	0 КАК КоличествоРасходПоРегистратору
		               |ИЗ
		               |	ОстаткиПоЗаказам КАК ОстаткиПоЗаказам,
		               |	РегистрНакопления.ЗаказыРаспределение.Остатки(
		               |			&Дата,
		               |			ЗаказПоставщика В
		               |				(ВЫБРАТЬ
		               |					ОстаткиПоЗаказам.Заказ КАК Заказ
		               |				ИЗ
		               |					ОстаткиПоЗаказам КАК ОстаткиПоЗаказам)) КАК ЗаказыРаспределениеОстатки,
		               |	РегистрНакопления.ЗаказыПоставщикам.Обороты(
		               |			&Дата,
		               |			,
		               |			,
		               |			ЗаказПоставщику В
		               |				(ВЫБРАТЬ
		               |					ОстаткиПоЗаказам.Заказ КАК Заказ
		               |				ИЗ
		               |					ОстаткиПоЗаказам КАК ОстаткиПоЗаказам)) КАК ЗаказыПоставщикамОбороты";
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата",  Новый Граница(НаДату, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Регистратор", ДокументРегистратор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстУстановки = НСтр("ru = '""Заказано"" = %1; ""Распределение"" = %2'");
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаСостоянийЗаказов.Добавить();
		НоваяСтрока.ЗаказПоставщика = Выборка.Заказ;
		
		ЗаказаноОстаток = Выборка.ЗаказаноОстаток - ?(ЭтоОтменаПроведенияЗаказа, Выборка.ЗаказаноПоРегистратору, 0);
		КоличествоОстаток = Выборка.КоличествоОстаток - ?(ЭтоОтменаПроведенияЗаказа, Выборка.КоличествоПоРегистратору, 0);
		КоличествоРасход = Выборка.КоличествоРасход - ?(ЭтоОтменаПроведенияЗаказа, Выборка.КоличествоРасходПоРегистратору, 0);
		
		Если ЗаказаноОстаток = 0 И КоличествоОстаток = 0 Тогда
			
			Если НЕ Выборка.Заказ.Проведен Тогда
				НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Новый;
			Иначе
				// Остатков по заказу нет, установим статус "Закрыт".
				НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт;
			КонецЕсли;
			
		Иначе
			
			// Сфорируем описание
			НоваяСтрока.ПротоколУстановки = СтрШаблон(ТекстУстановки,
				ЗаказаноОстаток,
				КоличествоОстаток);
			
			Если ЗаказаноОстаток > 0 И КоличествоРасход > 0 Тогда
				НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.ЧастичноПолучен;
			ИначеЕсли ЗаказаноОстаток > 0 Тогда
				НоваяСтрока.Состояние = Справочники.ВидыСостоянийЗаказНарядов.ОжидаетПоставки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Состояние) ИЛИ (ЗначениеЗаполнено(ТекущееСостояние) И НоваяСтрока = ТекущееСостояние) Тогда
			ТаблицаСостоянийЗаказов.Удалить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСостоянийЗаказов;
	
КонецФункции // ПолучитьОстаткиЗаказов()

// Процедура проверяет остатки по заказам в регистре и устанавливает текущее состояние заказа.
//
// Параметры:
//  Источник - РегистрНакопленияНаборЗаписей.ЗаказыПокупателей - набор записей регистра
//  ТекущееСостояние - СправочникСсылка.ВидыСостоянийЗаказНарядов - текущее состояние заказа.
//  ОтменаПроведенияДокумента - Булево - признак отмены проведения заказа.
//
Процедура УстановитьСостояниеЗаказа(Источник, ТекущееСостояние = Неопределено, ОтменаПроведенияДокумента = Ложь) Экспорт
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Источник) Тогда
		Регистратор = Источник;
	Иначе
		Источник.Прочитать();
		ОтборРегистратор = Источник.Отбор.Найти("Регистратор");
		Если ОтборРегистратор = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Регистратор = ОтборРегистратор.Значение;
	КонецЕсли;
	
	ДатаЗаписи = Регистратор.Дата;
	
	ТаблицаСостоянийЗаказов = ПолучитьСостояниеПоОстаткамЗаказа(Регистратор, ДатаЗаписи, ТекущееСостояние, ОтменаПроведенияДокумента);
	
	Для Каждого ТекущаяСтрока Из ТаблицаСостоянийЗаказов Цикл
		РегистрыСведений.ЖурналСостояний.ЗаписьВЖурналСостояний(ТекущаяСтрока.ЗаказПокупателя, ТекущаяСтрока.Состояние, ДатаЗаписи, ТекущаяСтрока.ПротоколУстановки);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет остатки по заказам в регистре и устанавливает текущее состояние заказа поставщику.
//
// Параметры:
//  Источник					 - РегистрНакопленияНаборЗаписей.ЗаказыПокупателей - набор записей регистра
//  ТекущееСостояние			 - СправочникСсылка.ВидыСостоянийЗаказНарядов		 - текущее состояние заказа.
//  ОтменаПроведенияДокумента	 - Булево											 - признак отмены проведения заказа.
//
Процедура УстановитьСостояниеЗаказаПоставщика(Источник, ТекущееСостояние = Неопределено, ОтменаПроведенияДокумента=Ложь) Экспорт
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Источник) Тогда
		Регистратор = Источник;
	Иначе
		// Получим регистратор записей в регистр
		Источник.Прочитать();
		ОтборРегистратор = Источник.Отбор.Найти("Регистратор");
		Если ОтборРегистратор = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Регистратор = ОтборРегистратор.Значение;
	КонецЕсли;
	
	ДатаЗаписи = Регистратор.Дата;
	
	ТаблицаСостоянийЗаказов = ПолучитьСостояниеПоОстаткамЗаказаПоставщика(Регистратор, ДатаЗаписи, ТекущееСостояние, ОтменаПроведенияДокумента);
	
	Для Каждого ТекущаяСтрока Из ТаблицаСостоянийЗаказов Цикл
		РегистрыСведений.ЖурналСостояний.ЗаписьВЖурналСостояний(ТекущаяСтрока.ЗаказПоставщика, ТекущаяСтрока.Состояние, ДатаЗаписи, ТекущаяСтрока.ПротоколУстановки);
	КонецЦикла;
	
КонецПроцедуры //УстановитьСостояниеЗаказаПоставщика()

// Процедура проверяет остатки по заказам в регистре и устанавливает текущее состояние заказа и заказа поставщику.
//
// Параметры:
//  СтруктураПараметров - Структура - Структура, содержащая параметры.
//  АдресХранилища      - Строка    - Адрес во временном хранилище.
//
Процедура УстановитьСостоянияЗаказов(СтруктураПараметров, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаказыПокупателей.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыРаспределение.ЗаказПокупателя
		|ИЗ
		|	РегистрНакопления.ЗаказыРаспределение КАК ЗаказыРаспределение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.Заказ КАК Заказ,
		|	ВТ_Заказы.Заказ.Дата КАК ЗаказДата,
		|	ЕСТЬNULL(ЖурналСостоянийСрезПоследних.Состояние, ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.ПустаяСсылка)) КАК Состояние
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналСостояний.СрезПоследних КАК ЖурналСостоянийСрезПоследних
		|		ПО ВТ_Заказы.Заказ = ЖурналСостоянийСрезПоследних.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Заказы.Заказ,
		|	ВТ_Заказы.Заказ.Дата,
		|	ЕСТЬNULL(ЖурналСостоянийСрезПоследних.Состояние, ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику
		|ПОМЕСТИТЬ ВТ_ЗаказыПост
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыРаспределение.ЗаказПоставщика
		|ИЗ
		|	РегистрНакопления.ЗаказыРаспределение КАК ЗаказыРаспределение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаказыПост.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ВТ_ЗаказыПост.ЗаказПоставщику.Дата КАК ЗаказПоставщикуДата,
		|	ЕСТЬNULL(ЖурналСостоянийСрезПоследних.Состояние, ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.ПустаяСсылка)) КАК Состояние
		|ИЗ
		|	ВТ_ЗаказыПост КАК ВТ_ЗаказыПост
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналСостояний.СрезПоследних КАК ЖурналСостоянийСрезПоследних
		|		ПО ВТ_ЗаказыПост.ЗаказПоставщику = ЖурналСостоянийСрезПоследних.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ЗаказыПост.ЗаказПоставщику,
		|	ВТ_ЗаказыПост.ЗаказПоставщику.Дата,
		|	ЕСТЬNULL(ЖурналСостоянийСрезПоследних.Состояние, ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПоставщикуДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказВнутренний.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказВнутренний КАК ЗаказВнутренний
		|ГДЕ
		|	НЕ ЗаказВнутренний.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	НЕ ЗаказПокупателя.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	НЕ ЗаказПоставщику.Проведен";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЗаказыПокупателей = Запрос.ВыполнитьПакет()[1].Выгрузить();
	ЗаказыПоставщикам = Запрос.ВыполнитьПакет()[3].Выгрузить();
	
	Для Каждого Заказ Из ЗаказыПокупателей Цикл
		УстановитьСостояниеЗаказа(Заказ.Заказ, Заказ.Состояние);
	КонецЦикла;
	
	Для Каждого Заказ Из ЗаказыПоставщикам Цикл
		УстановитьСостояниеЗаказаПоставщика(Заказ.ЗаказПоставщику, Заказ.Состояние);
	КонецЦикла;
	
	Выборка = Запрос.ВыполнитьПакет()[4].Выбрать();
	ДатаЗаполнения = ТекущаяДатаСеанса();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ЖурналСостояний.ЗаписьВЖурналСостояний(
			Выборка.Ссылка,
			Справочники.ВидыСостоянийЗаказНарядов.Новый,
			ДатаЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

// Обновление состояния заказов
//
// Параметры:
//  Объект - ДокументОбъект - Документ, по которому обновляется состояние заказа.
//
Процедура ОбновитьСостояниеЗаказов(Объект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияВЗаказах") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьДвиженияПоЗаказам = Ложь;
	ЕстьДвиженияПоЗаказамПоставщика = Ложь;
	Для Каждого Движение Из Объект.Движения Цикл
		
		Если НЕ ЕстьДвиженияПоЗаказам И ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
			ЕстьДвиженияПоЗаказам = Истина;
			//@skip-check query-in-loop
			УстановитьСостояниеЗаказа(Объект.Ссылка,, Истина);
		КонецЕсли;
		
		Если НЕ ЕстьДвиженияПоЗаказамПоставщика И ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПоставщикам") Тогда
			ЕстьДвиженияПоЗаказамПоставщика = Истина;
			//@skip-check query-in-loop
			УстановитьСостояниеЗаказаПоставщика(Объект.Ссылка,, Истина);
		КонецЕсли;
		
		Если НЕ ЕстьДвиженияПоЗаказам И НЕ ЕстьДвиженияПоЗаказамПоставщика
			И ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.ЗаказыРаспределение") Тогда
			//@skip-check query-in-loop
			УстановитьСостояниеЗаказа(Объект.Ссылка,, Истина);
			//@skip-check query-in-loop
			УстановитьСостояниеЗаказаПоставщика(Объект.Ссылка,, Истина);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОптовыеЗаказыАвтомобилей

// Проверить заполненость спецификации у автомобилей.
// 
// Параметры:
//  ДокументЗаказ - ДокументОбъект.ОптовыйЗаказКлиентаНаАвтомобили, ДокументОбъект.ОптовыйЗаказПоставщикуНаАвтомобили - Документ заказ
//  Отказ - Булево - Отказ
//
Процедура ПроверитьЗаполненостьСпецификацииУАвтомобилей(ДокументЗаказ, Отказ) Экспорт
	
	СпецификацииВДокументе = ДокументЗаказ.Спецификации.Выгрузить().ВыгрузитьКолонку("КлючСтроки");
	ШаблонНеверноУказанаСпецификация = НСтр("ru = 'Для автомобиля <%1> указана неверная спецификация'");
	
	Для Каждого СтрокаАвтомобиля Из ДокументЗаказ.Автомобили Цикл
		
		Если СпецификацииВДокументе.Найти(СтрокаАвтомобиля.Спецификация) = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ШаблонНеверноУказанаСпецификация, СтрокаАвтомобиля.Автомобиль),
				,
				СтрШаблон("Объект.Автомобили[%1].СпецификацияПредставление", СтрокаАвтомобиля.НомерСтроки - 1),
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сопоставить спецификации и автомобили.
// 
// Параметры:
//  ДокументЗаказ - ДокументОбъект.ОптовыйЗаказКлиентаНаАвтомобили, ДокументОбъект.ОптовыйЗаказПоставщикуНаАвтомобили - Документ заказ
//  Отказ - Булево- Отказ
Процедура СопоставитьСпецификацииИАвтомобили(ДокументЗаказ, Отказ) Экспорт
	
	ДанныеАвтомобилей = ДанныеАвтомобилей(ДокументЗаказ.Автомобили.ВыгрузитьКолонку("Автомобиль"));
	
	Для Каждого СтрокаСпецификации Из ДокументЗаказ.Спецификации Цикл
		
		АвтомобилиСпецификации = ДокументЗаказ.Автомобили.НайтиСтроки(
			Новый Структура("Спецификация,Отменено", СтрокаСпецификации.КлючСтроки, Ложь)
		);
		
		Если СтрокаСпецификации.Количество <> АвтомобилиСпецификации.Количество() Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Количество в спецификации не соответствует количеству автомобилей'"),
				ДокументЗаказ,
				СтрШаблон("Спецификации[%1].Модель", СтрокаСпецификации.НомерСтроки - 1),
				,
				Отказ
			);
			
		КонецЕсли;
		
		Для Каждого СтрокаАвтомобиля Из АвтомобилиСпецификации Цикл
			
			ПроверитьСоответствиеАвтомобиляСпецификации(
				СтрокаСпецификации,
				СтрокаАвтомобиля,
				ДанныеАвтомобилей.Получить(СтрокаАвтомобиля.Автомобиль),
				Отказ
			);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Состояния автомобилей.
// 
// Параметры:
//  Автомобили - Массив из СправочникСсылка.Автомобили - Автомобили
//  НачалоПериода - Дата - Начало периода
// 
// Возвращаемое значение:
//  Соответствие из СправочникСсылка.Автомобили - Состояния автомобилей
//
Функция СостоянияАвтомобилей(Автомобили, НачалоПериода) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказыАвтомобилейОстатки.Автомобиль,
		|	ЗаказыАвтомобилейОстатки.КоличествоОстаток > 0 КАК ЗаказанКлиентом,
		|	Ложь КАК ЗаказанПоставщику,
		|	Ложь КАК НаСкладе,
		|	Ложь КАК Продан
		|ПОМЕСТИТЬ ПоказателиАвтомобилей
		|ИЗ
		|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(, Автомобиль В (&Автомобили)) КАК ЗаказыАвтомобилейОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамНаАвтомобилиОстатки.Автомобиль,
		|	Ложь,
		|	ЗаказыПоставщикамНаАвтомобилиОстатки.КоличествоОстаток > 0,
		|	Ложь,
		|	Ложь
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(, Автомобиль В (&Автомобили)) КАК
		|		ЗаказыПоставщикамНаАвтомобилиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиАвтомобилейОстатки.Автомобиль,
		|	Ложь,
		|	Ложь,
		|	ОстаткиАвтомобилейОстатки.КоличествоОстаток > 0,
		|	Ложь
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(, Автомобиль В (&Автомобили)) КАК ОстаткиАвтомобилейОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПродажиАвтомобилейОбороты.Автомобиль,
		|	Ложь,
		|	Ложь,
		|	Ложь,
		|	ПродажиАвтомобилейОбороты.КоличествоОборот > 0
		|ИЗ
		|	РегистрНакопления.ПродажиАвтомобилей.Обороты(&НачалоПериода,,, Автомобиль В (&Автомобили)) КАК
		|		ПродажиАвтомобилейОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиАвтомобилей.Автомобиль,
		|	МАКСИМУМ(ПоказателиАвтомобилей.ЗаказанКлиентом) КАК ЗаказанКлиентом,
		|	МАКСИМУМ(ПоказателиАвтомобилей.ЗаказанПоставщику) КАК ЗаказанПоставщику,
		|	МАКСИМУМ(ПоказателиАвтомобилей.НаСкладе) КАК НаСкладе,
		|	МАКСИМУМ(ПоказателиАвтомобилей.Продан) КАК Продан
		|ИЗ
		|	ПоказателиАвтомобилей КАК ПоказателиАвтомобилей
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиАвтомобилей.Автомобиль"
	);
	Запрос.УстановитьПараметр("Автомобили", Автомобили);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	Результат = Новый Соответствие();
	ВозможныеСостоянияАвтомоиблей = ВозможныеСостоянияАвтомоиблей();
	
	Для Каждого Автомобиль Из Автомобили Цикл
		
		Результат.Вставить(Автомобиль, ВозможныеСостоянияАвтомоиблей.Требуется);
		
	КонецЦикла;
	
	ПоказателиАвтомобилей = Запрос.Выполнить().Выбрать();
	
	Пока ПоказателиАвтомобилей.Следующий() Цикл
		
		Если ПоказателиАвтомобилей.Продан Тогда
			
			Результат.Вставить(ПоказателиАвтомобилей.Автомобиль, ВозможныеСостоянияАвтомоиблей.Отгружен);
			
		ИначеЕсли ПоказателиАвтомобилей.НаСкладе Тогда
			
			Результат.Вставить(ПоказателиАвтомобилей.Автомобиль, ВозможныеСостоянияАвтомоиблей.ВНаличии);
			
		ИначеЕсли ПоказателиАвтомобилей.ЗаказанПоставщику Тогда
			
			Результат.Вставить(ПоказателиАвтомобилей.Автомобиль, ВозможныеСостоянияАвтомоиблей.Ожидается);
			
		ИначеЕсли ПоказателиАвтомобилей.ЗаказанКлиентом Тогда
			
			Результат.Вставить(ПоказателиАвтомобилей.Автомобиль, ВозможныеСостоянияАвтомоиблей.ЗаказанКлиентом);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возможные состояния автомоиблей.
// 
// Возвращаемое значение:
//  Структура - Возможные состояния автомоиблей:
// * Требуется - Строка - 
// * Отгружен - Строка - 
// * ВНаличии - Строка - 
// * Ожидается - Строка - 
// * ЗаказанКлиентом - Строка - 
Функция ВозможныеСостоянияАвтомоиблей() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Требуется", НСтр("ru = 'Требуется'"));
	Результат.Вставить("Отгружен", НСтр("ru = 'Отгружен'"));
	Результат.Вставить("ВНаличии", НСтр("ru = 'В наличии'"));
	Результат.Вставить("Ожидается", НСтр("ru = 'Ожидается'"));
	Результат.Вставить("ЗаказанКлиентом", НСтр("ru = 'Заказан клиентом'"));
	Возврат Результат;
	
КонецФункции

#КонецОбласти
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеАвтомобилей(Автомобили)
	
	Результат = Новый Соответствие();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Автомобили.Ссылка КАК Автомобиль,
		|	Автомобили.Марка КАК Марка,
		|	Автомобили.Модель КАК Модель,
		|	Автомобили.ВариантКомплектации КАК ВариантКомплектации,
		|	Автомобили.Цвет КАК Цвет
		|ИЗ
		|	Справочник.Автомобили КАК Автомобили
		|ГДЕ
		|	Автомобили.Ссылка В (&Автомобили)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль,
		|	АвтомобилиСрезПоследних.Значение КАК ВидАвтомобиля
		|ИЗ
		|	РегистрСведений.Автомобили.СрезПоследних(, Автомобиль В (&Автомобили)
		|	И ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля)) КАК АвтомобилиСрезПоследних"
	);
	Запрос.УстановитьПараметр("Автомобили", Автомобили);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОсновныеДанныеАвтомобиля = РезультатЗапроса[0].Выбрать();
	
	Пока ОсновныеДанныеАвтомобиля.Следующий() Цикл
		
		//@skip-check structure-consructor-too-many-keys
		Значение = Новый Структура("ВидАвтомобиля,Марка,Модель,ВариантКомплектации,Цвет");
		ЗаполнитьЗначенияСвойств(Значение, ОсновныеДанныеАвтомобиля);
		Результат.Вставить(ОсновныеДанныеАвтомобиля.Автомобиль, Значение);
		
	КонецЦикла;
	
	ДополнительныеДанныеАвтомобиля = РезультатЗапроса[1].Выбрать();
	
	Пока ДополнительныеДанныеАвтомобиля.Следующий() Цикл
		
		Значение = Результат.Получить(ДополнительныеДанныеАвтомобиля.Автомобиль);
		
		Если Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Значение.ВидАвтомобиля = ДополнительныеДанныеАвтомобиля.ВидАвтомобиля;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьСоответствиеАвтомобиляСпецификации(Спецификация, СтрокаАвтомобиля, ДанныеАвтомобиля, Отказ)
	
	ПоляСОшибкой = Новый Массив();
	
	Если Спецификация.Марка <> ДанныеАвтомобиля.Марка Тогда
		
		ПоляСОшибкой.Добавить("Марка");
		
	КонецЕсли;
	
	Если Спецификация.Модель <> ДанныеАвтомобиля.Модель Тогда
		
		ПоляСОшибкой.Добавить("Модель");
		
	КонецЕсли;
	
	Если
		ЗначениеЗаполнено(Спецификация.ВариантКомплектации)
		И Спецификация.ВариантКомплектации <> ДанныеАвтомобиля.ВариантКомплектации
	Тогда
		
		ПоляСОшибкой.Добавить("Вариант комплектации");
		
	КонецЕсли;
	
	Если
		ЗначениеЗаполнено(Спецификация.Цвет)
		И Спецификация.Цвет <> ДанныеАвтомобиля.Цвет
	Тогда
		
		ПоляСОшибкой.Добавить("Цвет");
		
	КонецЕсли;
	
	Если
		ЗначениеЗаполнено(Спецификация.ВидАвтомобиля)
		И Спецификация.ВидАвтомобиля <> ДанныеАвтомобиля.ВидАвтомобиля
	Тогда
		
		ПоляСОшибкой.Добавить("Вид автомобиля");
		
	КонецЕсли;
	
	Если ПоляСОшибкой.Количество() > 0 Тогда
		
		ШаблонНеверноУказанаСпецификация = НСтр("ru = '%1 автомобиля <%2> не соответствует спецификации'");
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ШаблонНеверноУказанаСпецификация, СтрСоединить(ПоляСОшибкой, ", "), СтрокаАвтомобиля.Автомобиль),
			,
			СтрШаблон("Объект.Автомобили[%1].Автомобиль", СтрокаАвтомобиля.НомерСтроки - 1),
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти