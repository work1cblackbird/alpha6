// Общий модуль "Управление списком справочников (сервер)"


#Область ПрограммныйИнтерфейс

// Устарела. Перенесено в форму.
// Общий обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  Параметры            - Структура - Содержит коллекцию параметров формы.
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ПриСозданииНаСервере(Форма, Параметры, Отказ = Ложь, СтандартнаяОбработка = Истина) Экспорт
	
	Если
		Параметры.Свойство("Отбор")
		И Параметры.Отбор.Свойство("Владелец")
		И ЗначениеЗаполнено(Параметры.Отбор.Владелец)
	Тогда
		
		ОбъектЯвляетсяГруппой = Ложь;
		
		Если ТипЗнч(Параметры.Отбор.Владелец) = Тип("ФиксированныйМассив") Тогда
			
			Для Каждого ВладелецОбъекта Из Параметры.Отбор.Владелец Цикл
				
				Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(ВладелецОбъекта) Тогда
					
					ОбъектЯвляетсяГруппой = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ОбъектЯвляетсяГруппой = ОбщегоНазначения.ОбъектЯвляетсяГруппой(Параметры.Отбор.Владелец);
			
		КонецЕсли;
		
		Если ОбъектЯвляетсяГруппой Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Использование для групп запрещено.'"), , , , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Произведем инициализацию служебных реквизитов формы
	ИнициализироватьСлужебныеРеквизиты(Форма);
	
	// Настроим состав и параметры отображения командной панели формы
	ИнициализироватьКомандыПанелиДействий(Форма);
	
	// Установим режим выбора поля списка в соответствии с режимом открытия формы
	Форма.Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	// Устанавливаем дополнительный отбор в дереве для подчиненных иерархических справочников.
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Форма.ПолноеИмяОбъекта);
	
	НуженОтбор = Метаданные.Справочники.Содержит(ОбъектМетаданных) И ОбъектМетаданных.Иерархический
		И ОбъектМетаданных.Владельцы.Количество() > 0 И (НЕ Форма.Элементы.Найти("Дерево") = Неопределено);
	
	Если НуженОтбор Тогда
		
		ЭлементОтбора = Форма.Дерево.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(
			Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = Истина;
		
		Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Владелец")
			И Параметры.Отбор.Владелец <> Неопределено Тогда
			
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Параметры.Отбор.Владелец;
			
		Иначе
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Для режима выбора, произведем настройку элементов управления формы
	Если Форма.Элементы.Список.РежимВыбора Тогда
		
		// Произведем настройку основных параметров формы
		Форма.КлючСохраненияПоложенияОкна = Форма.КлючОбъекта;
		Форма.КлючНазначенияИспользования = Форма.КлючОбъекта;
		Форма.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		// При выборе не нужно сохранять и загружать настройки пользователя, они будут только мешать.
		Форма.Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
		
		// Форме списка справочника в режиме выбора ограничим возможность выделения только одной строки.
		Форма.Элементы.Список.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
		
		// В режиме выбора скроем помеченные на удаление элементы
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список,
			"ПометкаУдаления",
			Ложь,
			,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		
	КонецЕсли;
	
	// Произведем настройку основного динамического списка формы
	ЗащищенныеФункцииСервер.НастроитьОсновнойДинамическийСписокФормы(Форма);
	
	// Производим инициализацию элементов расширенной информации
	Если НЕ Форма.Элементы.Найти("СтраницыРасширеннаяИнформация") = Неопределено Тогда
		
		// В режиме выбора по умолчанию поле расширенной информации должно быть скрыто
		Если Форма.Элементы.Список.РежимВыбора Тогда
			Форма.Элементы.СтраницыРасширеннаяИнформация.Видимость = Ложь;
			Форма.Элементы.ПоказатьРасширеннуюИнформацию.Пометка   = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Производим обновление отображения заголовка формы
	УстановитьЗаголовокСпискаСправочника(Форма);
	
	// Стандартные подсистемы - Версионирование объектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	
	// подключаемые команды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма, Неопределено);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат (НЕ Отказ);
	
КонецФункции // ПриСозданииНаСервере()

// Общий обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить в контексте сервера.
//
// Параметры:
//  Форма				- УправляемаяФорма		- Форма, в которой возникло событие.
//  ИмяСобытия			- Строка				- Имя, идентифицирующее событие.
//  ПараметрыДействия	- Структура				- Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события.
//
Функция ОбработкаОповещения(Форма, ИмяСобытия, ПараметрыДействия = Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Обработаем в зависимости от 
	Если ПараметрыДействия.Свойство("ШтрихКод") Тогда
		
		Если ПараметрыДействия.ШтрихКод = "" Тогда
			Возврат Истина;
		КонецЕсли;
		
		// поиск объектов по штрихкоду
		ОбъектыПоШтрихкоду = ШтрихкодированиеВызовСервера.НайтиОбъектыПоШтрихкоду(ПараметрыДействия.ШтрихКод, , Истина);
		ПараметрыДействия.Вставить("ОбъектыПоШтрихкоду", ОбъектыПоШтрихкоду);
		ШтрихкодированиеВызовСервера.ОбработкаОбъектовПоШтрихкоду(ПараметрыДействия);
		
	ИначеЕсли ПараметрыДействия.Свойство("КодКарты") Тогда
		
		РезультатПоиска = ШтрихкодированиеВызовСервера.ПолучитьКарточкуПоКоду(ПараметрыДействия.КодКарты);
		
		Если РезультатПоиска = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не найдена карточка по считанному коду: %1'"), ПараметрыДействия.КодКарты));

			Возврат Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатПоиска.Объект) Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(РезультатПоиска.Объект));
			ПараметрыДействия.Вставить("ИмяФормыСписка", ОбъектМетаданных.ПолноеИмя() + ".ФормаСписка");
			ПараметрыДействия.Вставить("НайтиОбъект",     РезультатПоиска.Объект);
		КонецЕсли;
		ПараметрыДействия.Вставить("РезультатПоиска", РезультатПоиска);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаОповещения()

// Устарела. Будет удалена.
// Обработчик события возникающего на сервере при сохранении значений реквизитов и настроек формы.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраняемых реквизитов и настроек формы.
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Форма, Настройки) Экспорт
	
	// Производим сохранение параметра отображения дерева элементов
	Если НЕ Форма.Элементы.Найти("Дерево") = Неопределено Тогда
		Настройки.Вставить("ДеревоВидимость", Форма.Элементы.Дерево.Видимость);
	КонецЕсли;
	
	// Производим сохранение параметра отображения страниц расширенной информации
	Если НЕ Форма.Элементы.Найти("СтраницыРасширеннаяИнформация") = Неопределено Тогда
		Настройки.Вставить("СтраницыРасширеннаяИнформацияВидимость", Форма.Элементы.СтраницыРасширеннаяИнформация.Видимость);
	КонецЕсли;
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Устарела. Будет удалена. 
// Общий обработчик события возникающего на сервере при восстановлении значений реквизитов из сохраненных настроек.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - Соответствие     - Значения сохраненных реквизитов и настроек формы.
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	// Восстанавливаем параметры отображения дерева элементов
	Если НЕ (Форма.Элементы.Найти("Дерево") = Неопределено ИЛИ Настройки.Получить("ДеревоВидимость") = Неопределено) Тогда
		
		// Получим значение сохраненной настройки
		ПоказатьДерево = (НЕ Настройки.Получить("ДеревоВидимость") = Ложь);
		
		// Произведем настройку параметров отображения полей расширенной информации
		Форма.Элементы.Дерево.Видимость       = ПоказатьДерево;
		Форма.Элементы.ПоказатьДерево.Пометка = ПоказатьДерево;
		
	КонецЕсли;
	
	// Восстанавливаем параметры отображения страниц расширенной информации
	Если НЕ (Форма.Элементы.Найти("СтраницыРасширеннаяИнформация") = Неопределено
		ИЛИ Настройки.Получить("СтраницыРасширеннаяИнформацияВидимость") = Неопределено) Тогда
		
		// Получим значение сохраненной настройки
		ПоказатьРасширеннуюИнформацию = (НЕ Настройки.Получить("СтраницыРасширеннаяИнформацияВидимость") = Ложь);
		
		// Произведем настройку параметров отображения полей расширенной информации
		Форма.Элементы.СтраницыРасширеннаяИнформация.Видимость = ПоказатьРасширеннуюИнформацию;
		Форма.Элементы.ПоказатьРасширеннуюИнформацию.Пометка   = ПоказатьРасширеннуюИнформацию;
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события возникающего при активизации строки списка.
//
// Параметры:
//  Форма   - УправляемаяФорма - Форма, в которой возникло событие.
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
Процедура СписокПриАктивизацииСтроки(Форма, Элемент) Экспорт
	
	// Производим подключение обработчика обновления содержимого поля расширенной информации.
	РасширеннаяИнформацияВызовСервера.СписокПриАктивизацииСтроки(Форма, Элемент.ТекущаяСтрока);
	
КонецПроцедуры // СписокПриАктивизацииСтроки()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при сохранении пользовательских настроек формы списка.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки. 
//
Процедура СписокПриСохраненииПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПриСохраненииПользовательскихНастроекНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события возникающего на сервере при загрузке пользовательских настроек формы списка.
//
// Параметры:
//  Форма     - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки. 
//
Процедура СписокПриЗагрузкеПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПриЗагрузкеПользовательскихНастроекНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события сохранения настроек формы списка справочников.
//
// Параметры:
//  Форма					- УправляемаяФорма	- Форма переданного списка справочников.
//  СтандартнаяОбработка	- Булево			- В данный параметр передается признак выполнения системной обработки события.
//
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(Форма, СтандартнаяОбработка = Истина) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПриОбновленииСоставаПользовательскихНастроекНаСервере()

// Устарела. Будет удалена.
// Общий обработчик события вызывается на сервере после получения данных динамическим списком.
//
// Параметры:
//  ИмяЭлемента - Строка - Содержит имя таблицы формы, из которой вызван обработчик события.
//  Настройки   - НастройкиКомпоновкиДанных - Содержит копию полных настроек динамического списка.
//  Строки      - СтрокиДинамическогоСписка - Данные и оформление всех строк, получаемых в списке.
//
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // СписокПриПолученииДанныхНаСервере()

// Общий обработчик события выбора одного из пунктов меню доступных хоз. операций
// 
// Параметры:
//  Форма             - УправляемаяФорма          - Форма, в которой возникло событие.
//  КомандаИмя        - Строка                    - Имя команды, в которой возникло данное событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина - признак возможности дальнейшей обработки события.
//
Функция ОбработкаКомандыФормы(Форма, КомандаИмя, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЛЕВ(КомандаИмя, 40) = "КомандаДополнительнойОбработкиЗаполнения" Тогда
		
		РезультатВыполнения = Неопределено;  
		ПараметрыКоманды = ДополнительныеОтчетыИОбработкиАльфаАвто.ОписаниеКомандыОбработки(КомандаИмя,
							Форма.Команды.Найти("АдресКомандДополнительныхОбработокВоВременномХранилище").Действие);
		РезультатВыполнения = ДополнительныеОтчетыИОбработки.ВыполнитьКоманду(ПараметрыКоманды); 
		Если НЕ РезультатВыполнения = Неопределено Тогда
			
			Для каждого Элемент Из РезультатВыполнения Цикл
				ПараметрыДействия.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыДействия.Свойство("КомандаПечатиИдентификатор")
		И ПараметрыДействия.КомандаПечатиИдентификатор = "ПечатьРеестра" Тогда
		
		Настройки = Форма.Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
		СхемаКомпоновки = ПоместитьВоВременноеХранилище(
			Форма.Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных(),
			Форма.УникальныйИдентификатор
		);
		ПараметрыДействия.Вставить("Схема",     СхемаКомпоновки);
		ПараметрыДействия.Вставить("Настройки", Настройки);
		ПараметрыДействия.Вставить("Заголовок", " " + Форма.Заголовок);
		ПараметрыДействия.Вставить("ПечатьРеестра");
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаКомандыФормы()

// Общий обработчик события возникающего при оповещении формы о прекращении работы подчиненной в контексте сервера.
//
// Параметры:
//  Форма                   - УправляемаяФорма     - Форма, в которой возникло событие.
//  РезультатОповещения     - Произвольный         - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный         - Значение, которое было указано при создании описания оповещения.
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - Истина - признак возможности дальнейшей обработки события.
//
Функция ОбработкаРезультатаОповещения(Форма, РезультатОповещения,
		ДополнительныеПараметры = Неопределено,
		Объект = Неопределено) Экспорт
	
	// Обработаем в зависимости от переданного параметра события
	УправлениеДиалогомСервер.ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры, Объект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаРезультатаОповещения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устарела. Будет удалена.
// Процедуры производит инициализацию служебных реквизитов формы списка.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которую производиться добавление реквизитов.
//
Процедура ИнициализироватьСлужебныеРеквизиты(Форма)
	
	// Составим перечень добавляемых в форму реквизитов
	СлужебныеРеквизиты = Новый Структура();
	СлужебныеРеквизиты.Вставить("ПолноеИмяОбъекта",       Форма.Список.ОсновнаяТаблица);
	СлужебныеРеквизиты.Вставить("КлючОбъекта",            Форма.Список.ОсновнаяТаблица 
	+ ?(ПолучитьЗначениеПараметраСтруктуры(Форма.Параметры, "РежимВыбора", Ложь), ".РежимВыбора", ""));
	СлужебныеРеквизиты.Вставить("СтатусДокумента",        "СтатусДокумента");
	СлужебныеРеквизиты.Вставить("ИмяДополнительнойФормы", 
		УправлениеДиалогомВызовСервера.ПолучитьИмяДополнительнойФормыОбъекта(СлужебныеРеквизиты.ПолноеИмяОбъекта));
	
	// Корректировочный реквизит формы, используется для пропуска лишних вызовов событий активизации строки.
	СлужебныеРеквизиты.Вставить("ТекущийЭлементСписка",   Неопределено);
	
	// Признак разрешения пользователю изменять состояние пометки на удаление у объектов.
	СлужебныеРеквизиты.Вставить("РазрешитьУправлениеПометкойУдаления", 
		ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.НайтиПоПолномуИмени(СлужебныеРеквизиты.ПолноеИмяОбъекта)));
	
	// Производим создание дополнительных реквизитов формы
	УправлениеДиалогомСервер.ДобавитьРеквизитыФормы(Форма, СлужебныеРеквизиты);
	
КонецПроцедуры // ИнициализироватьСлужебныеРеквизиты()

// Устарела. Будет удалена.
// Процедуры производит инициализацию команд в форме списка.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которую производиться добавление команды.
//
Процедура ИнициализироватьКомандыПанелиДействий(Форма)
	
	// Определим в какую панель формы необходимо помещать новые кнопки
	ИмяКоманднойПанелиФормы = ?(
		Форма.Элементы.Найти("ОсновныеДействия") = Неопределено,
		"ФормаКоманднаяПанель",
		"ОсновныеДействия"
	);
	
	// Произведем добавление панели для размещения дополнительных операций с формой
	НазначитьДополнительныеДействия = (НЕ Форма.Элементы.Найти("ДополнительныеДействия") = Неопределено);
	
	// Получим описание метаданных текущего объекта
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Форма.ПолноеИмяОбъекта);
	
	// Инициализируем элементы формы связанные с Дополнительными отчетами и обработками.
	ДополнительныеОтчетыИОбработкиАльфаАвто.ПриСозданииНаСервере(Форма, "ФормаСписка");
	
	// Создаем подменю печати
	ПодменюПечати = ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(
		Форма,
		"ПодменюПечать",
		ИмяКоманднойПанелиФормы,
		,
		"Печать",
		БиблиотекаКартинок.ПодменюПечать,
		НСтр("ru = 'Подменю печати'"),
		,
		ОтображениеКнопки.Картинка
	);
	
	// Добавим команды печати
	УправлениеПечатьюАльфаАвто.ПриСозданииНаСервере(Форма, ПодменюПечати);
	
	Если НЕ Форма.Элементы.Найти("Дерево") = Неопределено Тогда
		
		ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		ОписаниеКомандыФормы.ИмяКоманды            = "ПоказатьДерево";
		ОписаниеКомандыФормы.ИмяГруппы             = ИмяКоманднойПанелиФормы;
		ОписаниеКомандыФормы.Картинка              = БиблиотекаКартинок.ПоказатьДерево;
		ОписаниеКомандыФормы.Заголовок             = НСтр("ru = 'Показать дерево элементов'");
		ОписаниеКомандыФормы.Подсказка             = НСтр("ru = 'Показать/скрыть структуру иерархии элементов справочника'");
		ОписаниеКомандыФормы.ТолькоВоВсехДействиях = Ложь;
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		Форма.Элементы.ПоказатьДерево.Пометка = Форма.Элементы.Дерево.Видимость;
	КонецЕсли;
	
	Если НЕ Форма.Элементы.Найти("СтраницыРасширеннаяИнформация") = Неопределено Тогда
		
		ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		ОписаниеКомандыФормы.ИмяКоманды            = "ПоказатьРасширеннуюИнформацию";
		ОписаниеКомандыФормы.ИмяГруппы             = ИмяКоманднойПанелиФормы;
		ОписаниеКомандыФормы.Картинка              = БиблиотекаКартинок.РасширеннаяИнформация;
		ОписаниеКомандыФормы.Заголовок             = НСтр("ru = 'Расширенная информация об операции'");
		ОписаниеКомандыФормы.Подсказка             = НСтр("ru = 'Показать/скрыть поле расширенной информации'");
		ОписаниеКомандыФормы.ТолькоВоВсехДействиях = Ложь;
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		Форма.Элементы.ПоказатьРасширеннуюИнформацию.Пометка = Форма.Элементы.СтраницыРасширеннаяИнформация.Видимость;
	КонецЕсли;
	
	// Производим инициализацию дополнительных команд формы списка
	Если НазначитьДополнительныеДействия Тогда
		
		// Формируем секцию команд группировки списка
		Если НЕ ОбщегоНазначения.ЭтоВебКлиент() Тогда
			ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(
				Форма,
				"ГруппировкаСписка",
				"ДополнительныеДействия",
				Ложь,
				НСтр("ru = 'Группировка списка'")
			);
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ГруппироватьПоКолонке";
			ОписаниеКомандыФормы.ИмяГруппы  = "ГруппировкаСписка";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДинамическийСписокУстановитьГруппировку;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Группировать по значениям колонки'");
			ОписаниеКомандыФормы.Подсказка  = НСтр(
				"ru = 'Произвести группировку элементов списка по значениям текущей колонки'"
			);
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ОтменаГруппировки";
			ОписаниеКомандыФормы.ИмяГруппы  = "ГруппировкаСписка";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДинамическийСписокОтменитьГруппировку;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Отменить группировку строк'");
			ОписаниеКомандыФормы.Подсказка  = НСтр("ru = 'Отменить все группировки списка'");
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
			
			ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(Форма,
				"ГруппировкаСпискаМеню",
				"СписокКонтекстноеМеню",
				Ложь,
				НСтр("ru = 'Группировка списка'")
			);
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ГруппироватьПоКолонке";
			ОписаниеКомандыФормы.ИмяГруппы  = "ГруппировкаСпискаМеню";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДинамическийСписокУстановитьГруппировку;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Группировать по значениям колонки'");
			ОписаниеКомандыФормы.Подсказка  = НСтр(
				"ru = 'Произвести группировку элементов списка по значениям текущей колонки'"
			);
			ОписаниеКомандыФормы.Суффикс    = "Меню";
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ОтменаГруппировки";
			ОписаниеКомандыФормы.ИмяГруппы  = "ГруппировкаСпискаМеню";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДинамическийСписокОтменитьГруппировку;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Отменить группировку строк'");
			ОписаниеКомандыФормы.Подсказка  = НСтр("ru = 'Отменить все группировки списка'");
			ОписаниеКомандыФормы.Суффикс    = "Меню";
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		КонецЕсли;
		
		// Пользователю с правами администратора данных позволим производить дополнительные манипуляции с данными.
		Если ПравоДоступа("АдминистрированиеДанных", Метаданные)
			И Форма.Элементы.Список.РежимВыделения = РежимВыделенияТаблицы.Множественный Тогда
			
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ИзменитьВыделенные";
			ОписаниеКомандыФормы.ИмяГруппы  = "ДополнительныеДействия";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДействиеИзменить;
			ОписаниеКомандыФормы.Заголовок  =  НСтр("ru = 'Изменить выделенные объекты'");
			ОписаниеКомандыФормы.Подсказка  = НСтр("ru = 'Изменить выделенные объекты'");
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
			
		КонецЕсли;
		
		// Пункт меню для открытия дополнительной формы редактирования объекта
		Если ЗначениеЗаполнено(Форма.ИмяДополнительнойФормы) ИЛИ ЕстьРеквизит(ОбъектМетаданных, "Комментарий") Тогда
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды      = "ДополнительнаяФорма";
			ОписаниеКомандыФормы.ИмяГруппы       = "ДополнительныеДействия";
			ОписаниеКомандыФормы.Картинка        = БиблиотекаКартинок.РедактироватьВДиалоге;
			ОписаниеКомандыФормы.Заголовок       = НСтр("ru = 'Дополнительная форма'");
			ОписаниеКомандыФормы.Подсказка       = НСтр("ru = 'Открыть дополнительную форму редактирования'");
			ОписаниеКомандыФормы.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.L, Истина);
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		КонецЕсли;
		
		Если ПравоДоступа("Использование", Метаданные.Обработки.ПоискЗаменаЗначений) Тогда
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ПоискЗаменаЗначений";
			ОписаниеКомандыФормы.ИмяГруппы  = "ДополнительныеДействия";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.Заменить;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Поиск и замена значений'");
			ОписаниеКомандыФормы.Подсказка  = НСтр("ru = 'Поиск и замена значений'");
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		КонецЕсли;
		
		ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		ОписаниеКомандыФормы.ИмяКоманды = "ЖурналРегистрации";
		ОписаниеКомандыФормы.ИмяГруппы  = "ДополнительныеДействия";
		ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ЖурналРегистрации;
		ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Журнал регистрации'");
		ОписаниеКомандыФормы.Подсказка  = НСтр("ru = 'Журнал регистрации'");
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		
		// Проверим использование дополнительных сведений для данного документа
		ПолноеИмяОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ПолноеИмяОбъекта);
		Если УправлениеСвойствами.ИспользоватьДопСведения(ПолноеИмяОбъекта.ПустаяСсылка()) Тогда
			ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
			ОписаниеКомандыФормы.ИмяКоманды = "ДополнительныеСведения";
			ОписаниеКомандыФормы.ИмяГруппы  = "ДополнительныеДействия";
			ОписаниеКомандыФормы.Картинка   = БиблиотекаКартинок.ДополнительныеСведения;
			ОписаниеКомандыФормы.Заголовок  = НСтр("ru = 'Дополнительные сведения'");
			ОписаниеКомандыФормы.Подсказка  = НСтр("ru = 'Дополнительные сведения'");
			ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьКомандыПанелиДействий()

// Производит установку расширенного заголовка формы списка справочников.
//
// Параметры:
//  Форма - УправляемаяФорма - форма переданного справочника.
//
Процедура УстановитьЗаголовокСпискаСправочника(Форма)
	
	// Получим представление объекта, к которому относиться динамический список
	ПредставлениеСписка = УправлениеДиалогомСервер.ПредставлениеСпискаОбъектов(Форма);
	
	// Получим представление наложенного на список отбора по владельцу
	ПредставлениеВладельца = ?(Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство("Владелец") 
				И ЗначениеЗаполнено(Форма.Параметры.Отбор.Владелец), СокрЛП(Форма.Параметры.Отбор.Владелец), "");
	
	// Сформируем итоговое представление динамического списка
	Форма.Заголовок = ПредставлениеСписка 
			+ ?(ПустаяСтрока(ПредставлениеВладельца), "", " (" + ПредставлениеВладельца + ")");
	
КонецПроцедуры // УстановитьЗаголовокСпискаСправочника()

// Получает отборы недоступные для изменения пользователем при выборе элементов
// для всей конфигурации.
//
// Параметры:
//  Форма - УправляемаяФорма - форма переданного справочника.
//
Функция ЗаблокированныеОтборыПоУмолчанию(Форма) Экспорт
	
	Поля = Новый Массив;
	Поля.Добавить("Владелец");
	
	Попытка
		ИзмененныеПоля = УправлениеСпискомСправочникаПереопределяемый.ЗаблокированныеОтборыПоУмолчанию(Поля, Форма);
	Исключение
		ИзмененныеПоля = Поля;
	КонецПопытки;
	
	Если ИзмененныеПоля = Неопределено Тогда
		Возврат Поля;
	КонецЕсли;
	
	Возврат ИзмененныеПоля;
	
КонецФункции // ЗаблокированныеОтборыПоУмолчанию()

// Определяет состав заблокированных полей открываемой формы
//
// Параметры:
//  Форма - УправляемаяФорма - форма переданного справочника.
//
Функция ЗаблокированныеПоля(Форма) Экспорт
	
	// Получим поля установленные в форме.
	ЗаблокированныеПоля = ПолучитьЗначениеПараметраСтруктуры(Форма.Параметры, "ЗаблокированныеПоля", Неопределено);
	
	// Если у формы не были установлены блокируемые поля, получим значения по умолчанию.
	Если ЗаблокированныеПоля = Неопределено Тогда
		
		ЗаблокированныеПоля = УправлениеСпискомСправочникаСервер.ЗаблокированныеОтборыПоУмолчанию(Форма);
		
	КонецЕсли;
	
	Если ТипЗнч(ЗаблокированныеПоля) <> Тип("Массив") Тогда
		
		ЗаблокированныеПоля = Новый Массив;
		
	КонецЕсли;
	
	Возврат ЗаблокированныеПоля;
	
КонецФункции // ЗаблокированныеПоля()

#КонецОбласти
