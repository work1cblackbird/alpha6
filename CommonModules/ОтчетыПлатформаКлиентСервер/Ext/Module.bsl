

#Область ПрограммныйИнтерфейс

// Настройки формы отчета по умолчанию.
//
// Возвращаемое значение:
//   Структура - Настройки формы отчета.
//       
//       * ФормироватьСразу - Булево - Значение по умолчанию для флажка "Формировать сразу".
//           Когда флажок включен, то отчет будет формироваться:
//             - После открытия;
//             - После выбора пользовательских настроек;
//             - После выбора другого варианта отчета.
//       
//       * ВыводитьСуммуВыделенныхЯчеек - Булево - Если Истина, то в отчете будет выводиться поле автосуммы.
//       
//       * СоответствиеПериодичностиПараметров - Соответствие - Ограничение списка выбора полей "СтандартныйПериод".
//           ** Ключ - ПараметрКомпоновкиДанных - Имя параметра отчета, к которому применятся ограничение.
//           ** Значение - ПеречислениеСсылка.ДоступныеПериодыОтчета - Ограничение периода отчета "снизу".
//       
//       * Печать - Структура - Параметры печати табличного документа "по умолчанию".
//           ** ПолеСверху - Число - Отступ сверху при печати (в миллиметрах).
//           ** ПолеСлева  - Число - Отступ слева  при печати (в миллиметрах).
//           ** ПолеСнизу  - Число - Отступ снизу  при печати (в миллиметрах).
//           ** ПолеСправа - Число - Отступ справа при печати (в миллиметрах).
//           ** ОриентацияСтраницы - ОриентацияСтраницы - "Портрет" или "Ландшафт".
//           ** АвтоМасштаб - Булево - Автоматически подгонять масштаб под размер страницы.
//           ** МасштабПечати - Число - Масштаб изображения (в процентах).
//       
//       * События - Структура - События, для которых определены обработчики в модуле объекта отчета.
//           
//           ** ПриСозданииНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   Отказ - Передается из параметров обработчика "как есть".
//               //   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//               //
//               // См. также:
//               //   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПередЗагрузкойВариантаНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриЗагрузкеВариантаНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриЗагрузкеПользовательскихНастроекНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных -
//               //       Пользовательские настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета 
//               //   "ПриЗагрузкеПользовательскихНастроекНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма,НовыеПользовательскиеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПередЗаполнениемПанелиБыстрыхНастроек - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается до перезаполнения панели настроек формы отчета.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//               //
//               Процедура ПередЗаполнениемПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПослеЗаполненияПанелиБыстрыхНастроек - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается после перезаполнения панели настроек формы отчета.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//               //
//               Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** КонтекстныйВызовСервера - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Обработчик контекстного вызова сервера.
//               //   Позволяет выполнить контекстный вызов сервера когда это требуется из клиентского общего модуля.
//               //   Например, из ФормаОтчетаКлиентПереопределяемый.ОбработчикКоманды().
//               //
//               // Параметры:
//               //   Форма  - УправляемаяФорма
//               //   Ключ      - Строка    - Ключ операции, которую необходимо выполнить в контекстном вызове.
//               //   Параметры - Структура - Параметры вызова сервера.
//               //   Результат - Структура - Результат работы сервера, возвращается на клиент.
//               //
//               // См. также:
//               //   ОбщаяФорма.ФормаОтчета.ВыполнитьКонтекстныйВызовСервера().
//               //
//               Процедура КонтекстныйВызовСервера(Форма, Ключ, Параметры, Результат) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриОпределенииПараметровВыбора - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в форме отчета перед выводом настройки.
//               //   Подробнее - см. ФормаОтчетаПереопределяемый.ПриОпределенииПараметровВыбора().
//               //
//               Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ДополнитьСвязиОбъектовМетаданных - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Дополнительные связи настроек этого отчета.
//               //   Подробнее - см. ФормаОтчетаПереопределяемый.ДополнитьСвязиОбъектовМетаданных().
//               //
//               Процедура ДополнитьСвязиОбъектовМетаданных(СвязиОбъектовМетаданных) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//
Функция ПолучитьНастройкиОтчетаПоУмолчанию() Экспорт
	
	События = Новый Структура;
	События.Вставить("ПриСозданииНаСервере",             Ложь);
	События.Вставить("ПриЗагрузкеВариантаНаСервере",     Ложь);
	События.Вставить("ПриОпределенииПараметровВыбора",   Ложь);
	События.Вставить("ДополнитьСвязиОбъектовМетаданных", Ложь);
	
	// Параметры формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "");
	ПараметрыФормы.Вставить("Расшифровка",                 Неопределено);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Ложь);
	ПараметрыФормы.Вставить("ОтчетСсылка",                 Неопределено);
	ПараметрыФормы.Вставить("ЭкспертнаяНастройка",         Ложь);
	ПараметрыФормы.Вставить("СкрыватьНастройкиПриФормировании", Истина);
	
	// параметры отображения элементов формы
	ОтображениеФормы = Новый Структура;
	ОтображениеФормы.Вставить("Отборы",      Истина);
	ОтображениеФормы.Вставить("Группировки", Истина);
	ОтображениеФормы.Вставить("Строки",      Истина);
	ОтображениеФормы.Вставить("Колонки",     Истина);
	ОтображениеФормы.Вставить("Параметры",   Истина);
	ОтображениеФормы.Вставить("Колонки",     Истина);
	ОтображениеФормы.Вставить("Показатели",  Истина);
	
	Настройки = Новый Структура;
	Настройки.Вставить("События",   События);
	Настройки.Вставить("Параметры", ПараметрыФормы);
	Настройки.Вставить("Видимость", ОтображениеФормы);
	
	Возврат Настройки;
	
КонецФункции

// Процедура - Взвести модифицированность отчета.
//
// Параметры:
//  ФормаОтчета			 - Форма 	 - содержит форму отчета
//  УстановитьИзменения	 - Булево	 - дополнительный режим отображения
//  ТекстСообщения		 - Строка	 - сообщение пользователю.
//
Процедура ВзвестиМодифицированностьОтчета(ФормаОтчета, УстановитьИзменения = Ложь, ТекстСообщения = " ") Экспорт
	
	ТекстСообщения = НСтр("ru = 'Настройки отчета были изменены. Необходимо переформировать отчет.'");
	
	Элементы = ФормаОтчета.Элементы;
	
	Если УстановитьИзменения Тогда
		
		Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния.Текст     = ТекстСообщения;
		Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния.Видимость = Истина;
		Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния.Картинка  = БиблиотекаКартинок.СтатусыСобытийЖурнала_Предупреждение;
		
		// Выведем закэшированное сообщение пользователю.
		Если ЕстьРеквизитНаКлиенте(ФормаОтчета, "СообщениеПользователю") И ЗначениеЗаполнено(ФормаОтчета.СообщениеПользователю) Тогда
			Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния.Текст = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния.Текст + Символы.ПС + Символы.ПС + ФормаОтчета.СообщениеПользователю;
		КонецЕсли;
		
	Иначе
		Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Двухмерная диаграмма
//
// Параметры:
//  ТипДиаграммыОтчета	 - Строка	 - содержит тип диаграммы.
// 
// Возвращаемое значение:
//  Булево - результат проверки типа диаграммы.
//
Функция ДвухмернаяДиаграмма(ТипДиаграммыОтчета) Экспорт
	
	ОдномернаяДиаграмма = ( ТипДиаграммыОтчета = "Круговая"
						ИЛИ ТипДиаграммыОтчета = "КруговаяОбъемная"
						ИЛИ ТипДиаграммыОтчета = "Измерительная"
						ИЛИ ТипДиаграммыОтчета = "Воронка"
						ИЛИ ТипДиаграммыОтчета = "ВоронкаОбъемная"
						ИЛИ ТипДиаграммыОтчета = "ВоронкаНормированная"
						ИЛИ ТипДиаграммыОтчета = "ВоронкаНормированнаяОбъемная");
	
	Возврат (НЕ ОдномернаяДиаграмма);
	
КонецФункции

// Функция - Получить показатель
//
// Параметры:
//  ДеревоПоказателей	 - ТаблицаЗначений	 - Дерево показателей.
// 
// Возвращаемое значение:
//  Строка - Строка.
//
Функция ПолучитьПоказатель(ДеревоПоказателей) Экспорт
	
	Результат = Неопределено;
	Для Каждого ТекущаяСтрока Из ДеревоПоказателей Цикл
		
		Если НЕ ТекущаяСтрока.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрока.Папка Тогда
			Результат = ПолучитьПоказатель(ТекущаяСтрока.ПолучитьЭлементы());
		Иначе
			Результат = ТекущаяСтрока;
		КонецЕсли;
		
		Если НЕ Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получение соответствия по представлению периода значение
//
// Параметры:
//  НачалоПериода - Строка - Представление периода для поиска.
// 
// Возвращаемое значение:
//  Строка - Значение представления периода.
//
Функция СоответствиеСтандартнойДатыНачала(Знач НачалоПериода) Экспорт
	
	СоответствиеДатНачала = Новый Соответствие;
	НачалоПериода = НРег(НачалоПериода);
	
	СоответствиеДатНачала.Вставить("начало прошлого года", "НачалоПрошлогоГода");
	СоответствиеДатНачала.Вставить("начало вчерашнего дня", "НачалоПрошлогоДня");
	СоответствиеДатНачала.Вставить("начало прошлого квартала", "НачалоПрошлогоКвартала");
	СоответствиеДатНачала.Вставить("начало прошлого месяца", "НачалоПрошлогоМесяца");
	СоответствиеДатНачала.Вставить("начало прошлого полугодия", "НачалоПрошлогоПолугодия");
	СоответствиеДатНачала.Вставить("начало прошлой декады", "НачалоПрошлойДекады");
	СоответствиеДатНачала.Вставить("начало прошлой недели", "НачалоПрошлойНедели");
	СоответствиеДатНачала.Вставить("начало следующего года", "НачалоСледующегоГода");
	СоответствиеДатНачала.Вставить("начало завтрашнего дня", "НачалоСледующегоДня");
	СоответствиеДатНачала.Вставить("начало следующего квартала", "НачалоСледующегоКвартала");
	СоответствиеДатНачала.Вставить("начало следующего месяца", "НачалоСледующегоМесяца");
	СоответствиеДатНачала.Вставить("начало следующего полугодия", "НачалоСледующегоПолугодия");
	СоответствиеДатНачала.Вставить("начало следующей декады", "НачалоСледующейДекады");
	СоответствиеДатНачала.Вставить("начало следующей недели", "НачалоСледующейНедели");
	СоответствиеДатНачала.Вставить("начало этого года", "НачалоЭтогоГода");
	СоответствиеДатНачала.Вставить("начало этого дня", "НачалоЭтогоДня");
	СоответствиеДатНачала.Вставить("начало этого квартала", "НачалоЭтогоКвартала");
	СоответствиеДатНачала.Вставить("начало этого месяца", "НачалоЭтогоМесяца");
	СоответствиеДатНачала.Вставить("начало этого полугодия", "НачалоЭтогоПолугодия");
	СоответствиеДатНачала.Вставить("начало этой декады", "НачалоЭтойДекады");
	СоответствиеДатНачала.Вставить("начало этой недели", "НачалоЭтойНедели");
	СоответствиеДатНачала.Вставить("произвольная дата", "ПроизвольнаяДата");
	
	Возврат СоответствиеДатНачала.Получить(НачалоПериода);
	
КонецФункции // ПолучитьСтрокуПредставленияТипа()

#Область Общие

// Получить заголовок поля.
//
// Параметры:
//  ДоступноеПоле - ДоступноеПолеОтбораКомпоновкиДанных - Доступное поле формирования заголовка.
// 
// Возвращаемое значение:
//  Строка - Представление заголовка поля.
//
Функция ПолучитьЗаголовокПоля(ДоступноеПоле) Экспорт
	
	ЗаголовокПоля = "";
	Если ДоступноеПоле.Родитель = Неопределено Тогда
		ЗаголовокПоля     = ДоступноеПоле.Заголовок;
	Иначе
		ЗаголовокРодителя = ДоступноеПоле.Родитель.Заголовок;
		ЗаголовокПоля     = СтрЗаменить(ДоступноеПоле.Заголовок, ЗаголовокРодителя+".", "")+ " (" + (ЗаголовокРодителя)+ ")";
	КонецЕсли;
	
	Возврат ЗаголовокПоля;
	
КонецФункции

#КонецОбласти

#Область ПериодОтчета

// Установка пометки на период.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяКоманды   - Строка          - Имя исполняемой команды.
//
Процедура УстановитьПометкуНаПериод(ФормаОтчета, ИмяКоманды) Экспорт
	
	Элементы = ФормаОтчета.Элементы;
	
	Для Каждого ТекущаяКоманда Из Элементы.ОсновныеДействияПодменюПериод.ПодчиненныеЭлементы Цикл
		Если ТекущаяКоманда.ИмяКоманды = ИмяКоманды Тогда
			ТекущаяКоманда.Пометка = Истина;
			Элементы.ОсновныеДействияПодменюПериод.Заголовок = ТекущаяКоманда.Заголовок;
		Иначе
			ТекущаяКоманда.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновление вариантов периодов.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ОбновитьВариантыПериодов(ФормаОтчета) Экспорт
	
	Элементы   = ФормаОтчета.Элементы;
	ВидПериода = ФормаОтчета.ВидПериода;
	
	Если ВидПериода = "Произвольный" Тогда
		ОбновитьВариантыКонецПериода(ФормаОтчета);
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.ВариантПериода.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ТипЗнч(ФормаОтчета.КонецПериода) = Тип("СтандартнаяДатаНачала") Тогда
		КонецПериода = ФормаОтчета.КонецПериода.Дата;
	Иначе
		КонецПериода = ФормаОтчета.КонецПериода;
	КонецЕсли;	
	#Если Клиент Тогда
		ТекущийПериод = ?(КонецПериода = Дата(1, 1, 1), НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()), КонецПериода);
	#Иначе
		ТекущийПериод = ?(КонецПериода = Дата(1, 1, 1), НачалоДня(ТекущаяДатаСеанса()), КонецПериода);
	#КонецЕсли
	
	Сдвиг = 4;
	
	Если ВидПериода = "День" Тогда
		
		КонецПериода  = КонецДня(КонецПериода);
		НачалоПериода = НачалоДня(КонецПериода);
		
		СекундЗаДень  = (60 * 60 * 24);
		ТекущийПериод = ТекущийПериод - СекундЗаДень * Сдвиг;
		
		Элементы.ВариантПериода.ФорматРедактирования = "ДЛФ=D";
		
		Для Инд = 0 По 8 Цикл
			СписокВыбора.Добавить(ТекущийПериод, Формат(ТекущийПериод, "ДЛФ=D"));
			ТекущийПериод = ТекущийПериод + СекундЗаДень;
		КонецЦикла;
		
	ИначеЕсли ВидПериода = "Неделя" Тогда
		
		КонецПериода   = КонецНедели(КонецПериода);
		НачалоПериода  = НачалоНедели(КонецПериода);
		СекундЗаНеделю = (60 * 60 * 24) * 7;
		ТекущийПериод  = НачалоПериода - СекундЗаНеделю * Сдвиг;
		
		Элементы.ВариантПериода.ФорматРедактирования = "ДФ='""с"" дд.ММ.гггг'";
		
		Для Инд = 0 По 8 Цикл
			СписокВыбора.Добавить(ТекущийПериод, Формат(ТекущийПериод, "ДФ='""Неделя с"" дд.ММ.гггг'"));
			ТекущийПериод = ТекущийПериод + СекундЗаНеделю;
		КонецЦикла;
		
	ИначеЕсли ВидПериода = "Месяц" Тогда
		
		КонецПериода  = КонецМесяца(КонецПериода);
		НачалоПериода = НачалоМесяца(КонецПериода);
		ТекущийПериод = ДобавитьМесяц(ТекущийПериод, -4);
		
		Элементы.ВариантПериода.ФорматРедактирования = "ДФ='""" + Формат(НачалоПериода, "ДФ='ММММ'") + """ гггг'";
		
		Для Инд = 0 По 8 Цикл
			СписокВыбора.Добавить(ТекущийПериод, Формат(ТекущийПериод, "ДФ='ММММ гггг'"));
			ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);
		КонецЦикла;
		
	ИначеЕсли ВидПериода = "Квартал" Тогда
		
		КонецПериода  = КонецКвартала(КонецПериода);
		НачалоПериода = НачалоКвартала(КонецПериода);
		ТекущийПериод = ДобавитьМесяц(ТекущийПериод, -3 * Сдвиг);
		
		Элементы.ВариантПериода.ФорматРедактирования = "ДФ=' к ""кв."" гггг'";
		
		Для Инд = 0 По 8 Цикл
			СписокВыбора.Добавить(ТекущийПериод, Формат(ТекущийПериод, "ДФ=' к ""квартал"" гггг'"));
			ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 3);
		КонецЦикла;
		
	ИначеЕсли ВидПериода = "Год" Тогда
		
		КонецПериода  = КонецГода(КонецПериода);
		НачалоПериода = НачалоГода(КонецПериода);
		ТекущийПериод = ДобавитьМесяц(ТекущийПериод, -12 * Сдвиг);
		
		Элементы.ВариантПериода.ФорматРедактирования = "ДФ='гггг'";
		
		Для Инд = 0 По 8 Цикл
			СписокВыбора.Добавить(ТекущийПериод, Формат(ТекущийПериод, "ДФ='гггг'"));
			ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 12);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ФормаОтчета.КонецПериода) = Тип("СтандартнаяДатаНачала") Тогда
		ФормаОтчета.КонецПериода.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
		ФормаОтчета.КонецПериода.Дата = КонецПериода;
	Иначе
		ФормаОтчета.КонецПериода = КонецПериода
	КонецЕсли;
	Если ТипЗнч(ФормаОтчета.НачалоПериода) = Тип("СтандартнаяДатаНачала") Тогда
		ФормаОтчета.НачалоПериода.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
		ФормаОтчета.НачалоПериода.Дата = НачалоПериода;
		ФормаОтчета.ВариантПериода = НачалоПериода;
	Иначе
		ФормаОтчета.НачалоПериода = НачалоПериода;
		ФормаОтчета.ВариантПериода = ФормаОтчета.НачалоПериода;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВариантыПериодов()

// Обновление вариантов конца периода.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ОбновитьВариантыКонецПериода(ФормаОтчета) Экспорт
	
	Элементы = ФормаОтчета.Элементы;
	
	Если НЕ Элементы.ОсновныеДействияПериод.Заголовок = НСтр("ru = 'На дату'") + "   " Тогда
		Элементы.КонецПериода.ФорматРедактирования = "ДФ=дд.ММ.гггг";
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.КонецПериода.СписокВыбора;
	СписокВыбора.Очистить();
	
	ТекущийПериод = ФормаОтчета.КонецПериода;
	СекундЗаДень  = (60*60*24);
	ТекущийПериод = ТекущийПериод - СекундЗаДень*4;
	
	Элементы.КонецПериода.ФорматРедактирования = "ДЛФ=D";
		
	Для Инд=0 По 8 Цикл
		СписокВыбора.Добавить(ТекущийПериод, Формат(ТекущийПериод, "ДЛФ=D"));
		ТекущийПериод = ТекущийПериод+СекундЗаДень;
	КонецЦикла;
	
КонецПроцедуры

// Смена периода по указанному направлению.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//  Направление - Число            - Изменение направления при смене периода.
//
Процедура СместитьПериод(ФормаОтчета, Направление) Экспорт
	
	ВидПериода = ФормаОтчета.ВидПериода;
	
	Если ВидПериода = "День" ИЛИ ВидПериода = "Произвольный" Тогда
		
		СекундЗаДень  = (60*60*24);
		ФормаОтчета.КонецПериода = ФормаОтчета.КонецПериода + СекундЗаДень*Направление;
		
	ИначеЕсли ВидПериода = "Неделя" Тогда
		
		СекундЗаНеделю = (60*60*24)*7;
		ФормаОтчета.КонецПериода  = ФормаОтчета.КонецПериода + СекундЗаНеделю*Направление;
		
	ИначеЕсли ВидПериода = "Месяц" Тогда
		
		ФормаОтчета.КонецПериода = ДобавитьМесяц(ФормаОтчета.КонецПериода, 1*Направление);
		
	ИначеЕсли ВидПериода = "Квартал" Тогда
		
		ФормаОтчета.КонецПериода = ДобавитьМесяц(ФормаОтчета.КонецПериода, 3*Направление);
		
	ИначеЕсли ВидПериода = "Год" Тогда
		
		ФормаОтчета.КонецПериода = ДобавитьМесяц(ФормаОтчета.КонецПериода, 12*Направление);
		
	КонецЕсли;
	
	ОбновитьВариантыПериодов(ФормаОтчета);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
