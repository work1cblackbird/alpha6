
#Область ПрограммныйИнтерфейс

// Процедура формирует отчет-расшифровку, по описанию, подготовленному соответствующей функцией клиентского модуля.
//
// Параметры:
//		Форма - Форма - форма, в которой расположен отчет
//		ИмяРеквизитаФормы - Строка - имя реквизита формы типа ОтчетОбъект
//		ОписаниеОбработкиРасшифровки - ОписаниеОбработкиРасшифровкиКомпоновкиДанных - значение,
//										сформированное соответствующей клиентской функцией.
//
Процедура ОбработатьРасшифровку(Форма, ИмяРеквизитаФормы, ОписаниеОбработкиРасшифровки) Экспорт
	ОтчетОбъект = Форма.РеквизитФормыВЗначение(ИмяРеквизитаФормы);
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Форма["АдресДанныхРасшифровки" + ИмяРеквизитаФормы]);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма["АдресСхемы" + ИмяРеквизитаФормы]);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	
	РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, 
																	ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	
	// Получить таблицу для вывода отчета.
	ТаблицаРезультатаОтчета = Форма["Таблица" + ИмяРеквизитаФормы];
	ТаблицаРезультатаОтчета.Очистить();
	
	// Вывести отчет.
	ОтчетОбъект.СкомпоноватьРезультат(ТаблицаРезультатаОтчета, ДанныеРасшифровки);
	
	Форма["АдресДанныхРасшифровки" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

// Процедура формирует отчет, расположенный в форме настройками, которые сделал пользователь.
//
// Параметры:
//		Форма - Форма - форма, в которой расположен отчет
//		ИмяРеквизитаФормы - Строка - имя реквизита формы типа ОтчетОбъект
//		ИмяОтчета - Строка - имя формируемого отчета в метаданных
//		ИмяВариантаНастроек - Строка - имя варианта отчета в настройках отчета.
//
Процедура СформироватьОтчет(Форма, ИмяРеквизитаФормы, ИмяОтчета, ИмяВариантаНастроек) Экспорт
	Перем ДанныеРасшифровки;
	
	Если Не ПравоДоступа("Использование", Метаданные.Отчеты[ИмяОтчета]) Тогда
		Возврат;
	КонецЕсли;
	
	// При обновлении отчета применяются пользовательские настройки.
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение(ИмяРеквизитаФормы);		
	
	Форма["АдресСхемы" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма["АдресСхемы" + ИмяРеквизитаФормы]);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	// Вывести отчет.
	ТаблицаРезультатаОтчета = Форма["Таблица" + ИмяРеквизитаФормы];
	ТаблицаРезультатаОтчета.Очистить();
	
	ОтчетОбъект.СкомпоноватьРезультат(ТаблицаРезультатаОтчета, ДанныеРасшифровки);

	Форма["АдресДанныхРасшифровки" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

// Процедура инициализирует отчет, расположенный в форме настройками по умолчанию и устанавливает контекстные отборы.
//
// Параметры:
//		Форма - Форма - форма, в которой расположен отчет
//		ИмяРеквизитаФормы - Строка - имя реквизита формы типа ОтчетОбъект
//		ИмяОтчета - Строка - имя формируемого отчета в метаданных
//		ИмяВариантаНастроек - Строка - имя варианта отчета в настройках отчета
//		Отбор - Структура - структура отбора:
//				** ключ - имя отбора,
//				* значение - значение отбора.
//
Процедура УстановитьСтандартныеНастройки(Форма, ИмяРеквизитаФормы, ИмяОтчета, ИмяВариантаНастроек, Отбор) Экспорт
	Если Не ПравоДоступа("Использование", Метаданные.Отчеты[ИмяОтчета]) Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение(ИмяРеквизитаФормы);		
	
	Форма["АдресСхемы" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма["АдресСхемы" + ИмяРеквизитаФормы]);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	НастройкиКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек[ИмяВариантаНастроек].Настройки;
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	
	Для Каждого Элемент Из Отбор Цикл
		ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.Ключ);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Элемент.Значение;
		ЭлементОтбора.Использование = Истина;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Постобработка отчетов

// Процедура удаляет строки с неиспользуемыми параметрами из секции параметров отчета.
//
// Параметры:
//		ТабличныйДокумент - ТабличныйДокумент - результат вывода отчета
//		НеиспользуемыеПараметрыОтчета - Массив - представления неиспользуемых параметров отчета.
//
Процедура СкрытьНеиспользуемыеПараметрыОтчета(ТабличныйДокумент, НеиспользуемыеПараметрыОтчета) Экспорт
	Для Каждого НеиспользуемыйПараметрОтчета Из НеиспользуемыеПараметрыОтчета Цикл 
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(НеиспользуемыйПараметрОтчета);
		Если НайденнаяОбласть <> Неопределено Тогда
			УдаляемаяОбласть = ТабличныйДокумент.Область(НайденнаяОбласть.Верх,, НайденнаяОбласть.Низ);
			ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			Если ТабличныйДокумент.ФиксацияСверху <> 0 Тогда
				ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ФиксацияСверху - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройки отчетов

// Процедура устанавливает все связанные параметры валюты отчета
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ПользовательскиеНастройкиМодифицированы - Булево - обязательный к установке признак
//															модификации пользовательских настроек отчета.
//
Процедура УстановитьПараметрыВалютыОтчета(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы) Экспорт
	ПараметрДанныеОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДанныеОтчета");
	Если ПараметрДанныеОтчета <> Неопределено Тогда
		ВалютаУправленческогоУчета = "Руб.";
		ВалютаРегламентированногоУчета = "Руб.";
	
		Если Не ЗначениеЗаполнено(ПараметрДанныеОтчета.Значение) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДанныеОтчета", 1);
			
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;
		
		ПараметрВалюта = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Валюта");
		Если ПараметрВалюта <> Неопределено Тогда
			Если ПараметрДанныеОтчета.Значение = 1
				ИЛИ ПараметрДанныеОтчета.Значение = 2 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Валюта", ВалютаУправленческогоУчета);
			ИначеЕсли ПараметрДанныеОтчета.Значение = 3 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Валюта", ВалютаРегламентированногоУчета);
			КонецЕсли;
				
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает формулу расчета и формат динамического периода
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - СКД отчета
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ДополнятьПериод - Булево - признак использования дополнения периода.
//
Процедура НастроитьДинамическийПериод(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДополнятьПериод = Ложь) Экспорт 
	ПараметрПериодичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Периодичность");
	Если ПараметрПериодичность <> Неопределено 
		И КомпоновкаДанныхКлиентСервер.ПолеИспользуется(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных("ДинамическийПериод")) Тогда
		ИскомоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДинамическийПериод");
		Если ИскомоеПоле <> Неопределено Тогда
			СтрокаДлительностьПериода = ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрПериодичность.Значение);
			ИскомоеПоле.Выражение = "Период" + СтрокаДлительностьПериода;
			
			ПараметрОформленияФормат = ИскомоеПоле.Оформление.Элементы.Найти("Формат");
			ПараметрОформленияФормат.Значение = ФорматнаяСтрокаПериодовКомпоновкиДанных(ПараметрПериодичность.Значение);
			ПараметрОформленияФормат.Использование = Истина;
			
			Если ДополнятьПериод Тогда				
				ДополнениеПериода = ТипДополненияПериодаКомпоновкиДанных[СтрокаДлительностьПериода];
				ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
				Если ПараметрПериод <> Неопределено Тогда
					ПолеДинамическийПериод = Новый ПолеКомпоновкиДанных("ДинамическийПериод");
					Группировки = КомпоновкаДанныхКлиентСервер.ПолучитьГруппировки(КомпоновщикНастроек);
					Для Каждого Группировка Из Группировки Цикл
						Если Группировка.Значение.ПоляГруппировки.Элементы.Количество() = 1
							И Группировка.Значение.ПоляГруппировки.Элементы[0].Поле = ПолеДинамическийПериод Тогда
							ГруппировкаДинамическийПериод = Группировка.Значение.ПоляГруппировки.Элементы[0];
							ГруппировкаДинамическийПериод.ТипДополнения = ДополнениеПериода;
							ГруппировкаДинамическийПериод.НачалоПериода = ПараметрПериод.Значение.ДатаНачала;
							ГруппировкаДинамическийПериод.КонецПериода = ПараметрПериод.Значение.ДатаОкончания;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Методы и выражения системы компоновки данных

// Функция - Место в порядке
//
// Параметры:
//  ДанныеГрупповойОбработкиКомпоновкиДанных - ДанныеГрупповойОбработкиКомпоновкиДанных - Содержит результат
//    выполнения функции языка выражений системы компоновки данных ГрупповаяОбработка.
//  ПорядокСортировки - Строка - направление сортировки.
// 
// Возвращаемое значение:
//  Число - Порядок места полей
//
Функция МестоВПорядке(ДанныеГрупповойОбработкиКомпоновкиДанных, ПорядокСортировки) Экспорт
	МестоВПорядке = 0;
	
	Данные			= ДанныеГрупповойОбработкиКомпоновкиДанных.Данные;
	ИмяПоля			= ДанныеГрупповойОбработкиКомпоновкиДанных.Данные.Колонки[0].Имя;
	
	Если ДанныеГрупповойОбработкиКомпоновкиДанных.ТекущийЭлемент <> Неопределено Тогда
		ЗначениеПоля	= ДанныеГрупповойОбработкиКомпоновкиДанных.ТекущийЭлемент[0];
		
		Если ЗначениеПоля = 0 Тогда
			Возврат	"<>";
		КонецЕсли;
		
		КопияДанных = Данные.Скопировать();
		КопияДанных.Сортировать(ИмяПоля + " " + ПорядокСортировки);
		
		ИскомаяСтрока = КопияДанных.Найти(ЗначениеПоля, ИмяПоля);
		
		Если ИскомаяСтрока <> Неопределено Тогда
			МестоВПорядке = КопияДанных.Индекс(ИскомаяСтрока) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МестоВПорядке;
КонецФункции

// Находит среди элементов полей СКД поле по полному имени
//
// Параметры:
//	Элементы - ДоступныеПоляКомпоновкиДанных - поля СКД
//	ПолноеИмя - Строка, ПолеКомпоновкиДанных - полное имя поля СКД.
//	Кэш - Соответствие, Неопределено - Данные хранения полей СКД.
//
// Возвращаемое значение:
//	Поле - ПолеКомпоновкиДанных - поле СКД
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Поле = Кэш.Получить(ПолноеИмя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
	КонецЕсли;
	
	МассивЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	КоличествоЧастей = МассивЧастейИмен.Количество();
	
	ТекущееИмя = МассивЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, ТекущееИмя, Кэш);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По КоличествоЧастей Цикл
		ТекущееИмя = ТекущееИмя +"." + МассивЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, ТекущееИмя, Кэш);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если Кэш <> Неопределено Тогда
		Кэш.Вставить(ПолноеИмя, Поле);
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

// Получает и возвращает запрос из переданного макета компоновки данных
//
// Параметры:
//  Макет - МакетКомпоновкиДанных -  макет компоновки данных, из которого требуется получить запрос.
//  ИмяНабораДанных - Строка - имя набора данных из макета, для которого получается запрос.
//
// Возвращаемое значение:
//  Запрос - запрос, сформированный на основании макета компоновки.
//
Функция ПолучитьЗапросИзМакетаКомпоновки(Макет, ИмяНабораДанных) Экспорт

	Запрос = Новый Запрос(Макет.НаборыДанных[ИмяНабораДанных].Запрос);

	Для Каждого Параметр Из Макет.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
	КонецЦикла;

	Возврат Запрос;

КонецФункции

// Получает и возвращает макет компоновки данных для схемы компоновки
//
// Параметры:
//  СхемаКомпоновки - СхемаКомпоновкиДанных - схема компоновки данных, для которой получается макет компоновки
//  Настройки - НастройкиКомпоновкиДанных - настройки компоновки, применяемые к схеме.
//
// Возвращаемое значение:
//  МакетКомпоновкиДанных - созданный макет компоновки.
//
Функция ПолучитьМакетКомпоновки(СхемаКомпоновки, Настройки) Экспорт

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Возврат КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

КонецФункции

// Удаляет отбор из настроек и пользовательских настроек отчета
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроек - настройки компоновщика.
//  ИмяЭлемента  - Строка - имя элемента, который будет удален.
//
Процедура УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроек) <> Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор, ИмяЭлемента);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		
		ЭлементПользовательскихНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскихНастроек <> Неопределено Тогда
			КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Удалить(ИдентификаторПользовательскойНастройки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет параметр из пользовательских настроек отчета
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроек -  настройки
//  ИмяПараметра  - Строка - имя параметра, который будет удален.
//
Процедура УдалитьПараметрИзПользовательскихНастроекОтчета(КомпоновщикНастроек, ИмяПараметра) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроек) <> Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат
	КонецЕсли;

	ЗначениеПоиска = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЭлементыПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ЭлементПараметрыДанных = ЭлементыПараметрыДанных.НайтиЗначениеПараметра(ЗначениеПоиска);
	Если ЭлементПараметрыДанных <> Неопределено Тогда
		ЭлементПараметрыДанных.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
КонецПроцедуры

// Получает строковое описание выбранных параметров СКД
//
// Параметры: 
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных -  схема компоновки данных
//  НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - настройки компоновки данных.
//
// Возвращаемое значение:
//  Строка - описание параметров.
//
Функция ОписаниеПараметровНастройки(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных) Экспорт
	
	ОписаниеПараметров = "";
	Для Каждого ЗначениеПараметраНастроекКомпоновкиДанных Из НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы Цикл
		
		ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Найти(ЗначениеПараметраНастроекКомпоновкиДанных.Параметр);
		Если ПараметрСКД = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрСКД.ОграничениеИспользования Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = ЗначениеПараметраНастроекКомпоновкиДанных.Значение;
		ИмяПараметра = Строка(ПараметрСКД.Заголовок);
		
		
		ОписаниеПараметров = ?(ЗначениеЗаполнено(ОписаниеПараметров), ОписаниеПараметров, НСтр("ru = 'Параметры:'") + " ")
						   + ?(НЕ ЗначениеЗаполнено(ОписаниеПараметров), "", ", ")
						   + ИмяПараметра + " = " 
						   + ?(ЗначениеЗаполнено(ЗначениеПараметра), Строка(ЗначениеПараметра), НСтр("ru = '<не заполнен>'"));
	КонецЦикла;
	
	ОписаниеПараметров = ОписаниеПараметров + ?(ЗначениеЗаполнено(Строка(НастройкиКомпоновкиДанных.Отбор)),
												" " + НСтр("ru = 'Отбор:'") + " " + Строка(НастройкиКомпоновкиДанных.Отбор),
												"");
	
	Возврат ОписаниеПараметров;
	
КонецФункции

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//	Элементы - НастройкиКомпоновкиДанных - поля СКД
//	Имя - Строка, ПолеКомпоновкиДанных - имя поля СКД
//	Кэш - Структура - Необязательный.
//
// Возвращаемое значение:
//	Поле - поле СКД
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Элемент = Кэш.Получить(Имя);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			
			Если Кэш <> Неопределено Тогда
				Кэш.Вставить(Имя, Элемент);
			КонецЕсли;
			
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает полное имя поля по частям
//
// Параметры:
//	ПолноеИмя - полное имя поля СКД.
//
// Возвращаемое значение:
//	МассивЧастей - массив, содержащий части полного имени.
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	МассивЧастей = Новый Массив;
	ИмяДляОбработки = ПолноеИмя;
	
	Пока НЕ ПустаяСтрока(ИмяДляОбработки) Цикл
		Если Лев(ИмяДляОбработки, 1) = "[" Тогда
			
			Позиция = СтрНайти(ИмяДляОбработки, "]");
			Если Позиция = 0 Тогда
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 2));
				ИмяДляОбработки = "";
			Иначе
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 1, Позиция));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 2);
			КонецЕсли;
			
		Иначе
			
			Позиция = СтрНайти(ИмяДляОбработки, ".");
			Если Позиция = 0 Тогда
				МассивЧастей.Добавить(ИмяДляОбработки);
				ИмяДляОбработки = "";
			Иначе
				МассивЧастей.Добавить(Лев(ИмяДляОбработки, Позиция - 1));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЧастей;

КонецФункции

Функция ФорматнаяСтрокаПериодовКомпоновкиДанных(Периодичность)
	ФорматнаяСтрока = "";
	
	Если Периодичность = Перечисления.Периодичность.Неделя Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yyyy ""г.""'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yyyy ""г.""'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='MMMM гггг ""г.""'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='к ""квартал"" гггг ""г.""'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='yyyy ""г.""'";
	КонецЕсли;
	
	Возврат ФорматнаяСтрока;
КонецФункции

#КонецОбласти

