#Область ПрограммныйИнтерфейс

// Возвращает результат проверки кода маркировки
//   
// Параметры:
//  РезультатПроверкиКодаМаркировки - Булево - результат проверки кода маркировки
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция КорректностьРезультатаПроверкиКМ(РезультатПроверкиКодаМаркировки) Экспорт
	
	КорректностьРезультатаПроверки = Ложь;
	
	РезультатПроверки = ПроверитьБит(РезультатПроверкиКодаМаркировки, 0);
	Если РезультатПроверки Тогда
		КорректностьРезультатаПроверки = Истина;
	КонецЕсли;
	Если КорректностьРезультатаПроверки Тогда 
		РезультатПроверки = ПроверитьБит(РезультатПроверкиКодаМаркировки, 1);
		Если РезультатПроверки Тогда
			КорректностьРезультатаПроверки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КорректностьРезультатаПроверки;
		
КонецФункции

// Возвращает расшифровку результата проверки кода маркировки
// 
// Параметры:
//  РезультатПроверкиКодаМаркировки -  Булево - результат проверки кодов маркировки
//  НомерБита - Число - номер бита
//
// Возвращаемое значение:
//  Строка - представление результата проверки
//
Функция РасшифровкаРезультатаПроверкиКМ(РезультатПроверкиКодаМаркировки, НомерБита) Экспорт
	
	Если НомерБита = 0 ИЛИ НомерБита = 1 Тогда 
		РезультатПроверки = ПроверитьБит(РезультатПроверкиКодаМаркировки, НомерБита);
		Если НомерБита = 0 Тогда
			Если РезультатПроверки Тогда
				РезультатПроверкиТекст = "Код маркировки проверен фискальным накопителем с использованием ключа проверки КП.";
			Иначе 
				РезультатПроверкиТекст = "Код маркировки не может быть проверен фискальным накопителем с использованием ключа проверки КП.";
			КонецЕсли;
		ИначеЕсли НомерБита = 1 Тогда
			Если РезультатПроверки Тогда
				РезультатПроверкиТекст = "Результат проверки КП КМ фискальным накопителем с использованием ключа проверки КП положительный.";
			Иначе 
				РезультатПроверкиТекст = "Результат проверки КП КМ фискальным накопителем с использованием ключа проверки КП отрицательный.";
			КонецЕсли;
		КонецЕсли;
	Иначе	
		РезультатПроверкиТекст = "Недопустимый код проверки состояния КМ.";
	КонецЕсли;
	
	Возврат РезультатПроверкиТекст;
		
КонецФункции

// Возвращает результат проверки сведений о товаре
//   
// Параметры:
//  РезультатПроверкиКодаМаркировки - Булево - результат проверки кода маркировки
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция КорректностьРезультатаПроверкиСведенийОТоваре(РезультатПроверкиКодаМаркировки) Экспорт
	
	КорректностьРезультатаПроверки = Ложь;
	
	РезультатПроверки = ПроверитьБит(РезультатПроверкиКодаМаркировки, 0);
	Если РезультатПроверки Тогда
		КорректностьРезультатаПроверки = Истина;
	КонецЕсли;
	Если КорректностьРезультатаПроверки Тогда 
		РезультатПроверки = ПроверитьБит(РезультатПроверкиКодаМаркировки, 1);
		Если РезультатПроверки Тогда
			КорректностьРезультатаПроверки = Истина;
		КонецЕсли;
	КонецЕсли;
	Если КорректностьРезультатаПроверки Тогда 
		РезультатПроверки = ПроверитьБит(РезультатПроверкиКодаМаркировки, 2);
		Если РезультатПроверки Тогда
			КорректностьРезультатаПроверки = Истина;
		КонецЕсли;
	КонецЕсли;
	Если КорректностьРезультатаПроверки Тогда 
		РезультатПроверки = ПроверитьБит(РезультатПроверкиКодаМаркировки, 3);
		Если РезультатПроверки Тогда
			КорректностьРезультатаПроверки = Истина;
		КонецЕсли;
	КонецЕсли;
	Если КорректностьРезультатаПроверки Тогда 
		РезультатПроверки = ПроверитьБит(РезультатПроверкиКодаМаркировки, 4);
		Если РезультатПроверки Тогда
			КорректностьРезультатаПроверки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КорректностьРезультатаПроверки;
		
КонецФункции

// Возвращает расшифровку результата проверки кода маркировки
// 
// Параметры:
//  РезультатПроверкиКодаМаркировки -  Булево - результат проверки кодов маркировки
//  НомерБита - Число - номер бита
//
// Возвращаемое значение:
//  Строка - представление результата проверки
//
Функция РасшифровкаРезультатаПроверкиСведенийОТоваре(РезультатПроверкиКодаМаркировки, НомерБита) Экспорт
	
	Если НомерБита = 0 ИЛИ НомерБита = 1 ИЛИ НомерБита = 2 ИЛИ НомерБита = 3 ИЛИ НомерБита = 4 Тогда 
		РезультатПроверки = ПроверитьБит(РезультатПроверкиКодаМаркировки, НомерБита);
		Если НомерБита = 0 Тогда
			Если РезультатПроверки Тогда
				РезультатПроверкиТекст = "Код маркировки проверен.";
			Иначе 
				РезультатПроверкиТекст = "Код маркировки не был проверен ФН и (или) ОИСМ.";
			КонецЕсли;
		ИначеЕсли НомерБита = 1 Тогда
			Если РезультатПроверки Тогда
				РезультатПроверкиТекст = "Результат проверки КП КМ положительный.";
			Иначе 
				РезультатПроверкиТекст = "Результат проверки КП КМ отрицательный или код маркировки не был проверен.";
			КонецЕсли;
		ИначеЕсли НомерБита = 2 Тогда
			Если РезультатПроверки Тогда
				РезультатПроверкиТекст = "Проверка статуса ОИСМ выполнена.";
			Иначе 
				РезультатПроверкиТекст = "Сведения о статусе товара от ОИСМ не получены.";
			КонецЕсли;
		ИначеЕсли НомерБита = 3 Тогда
			Если РезультатПроверки Тогда
				РезультатПроверкиТекст = "От ОИСМ получены сведения, что планируемый статус товара корректен.";
			Иначе 
				РезультатПроверкиТекст = "От ОИСМ получены сведения, что планируемый статус товара некорректен или сведения о статусе товара от ОИСМ не получены.";
			КонецЕсли;
		ИначеЕсли НомерБита = 4 Тогда
			Если РезультатПроверки Тогда
				РезультатПроверкиТекст = "Результат проверки КП КМ сформирован ККТ, работающей в автономном режиме.";
			Иначе 
				РезультатПроверкиТекст = "Результат проверки КП КМ и статуса товара сформирован ККТ, работающей в режиме передачи данных.";
			КонецЕсли;
		КонецЕсли;
	Иначе	
		РезультатПроверкиТекст = "Недопустимый код проверки сведений о товаре.";
	КонецЕсли;
	
	Возврат РезультатПроверкиТекст;
		
КонецФункции

// Возвращает код вида документа по подтверждающему документу    
// 
// Параметры:
//  ВидПодтвержающегоДокумента -  ПеречислениеСсылка.ВидыДокументов - вид документа
//
// Возвращаемое значение: 
//  Строка - код вида документа
//
Функция КодВидаДокументаУдостоверяющегоЛичностьПоВидуПодтверждающегоДокумента(ВидПодтвержающегоДокумента) Экспорт
	
	ВидыДокумента = Новый Соответствие();
	
	ВидыДокумента.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыДокументов.ВидНаЖительствоИностранногоГражданина"),
		ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ВидНаЖительствоДляЛицБезГражданства")
	);
	ВидыДокумента.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыДокументов.ВоенныйБилет"),
		ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющиеЛичностьГражданинаРФ")
	);
	ВидыДокумента.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыДокументов.Паспорт"),
		ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортГражданинаРФ")
	);
	ВидыДокумента.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыДокументов.Свидетельство"),
		ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.СвидетельствоОРожденииГражданинаРФ")
	);
	ВидыДокумента.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыДокументов.Удостоверение"),
		ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющиеЛичностьГражданинаРФ")
	);
	ВидыДокумента.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыДокументов.Прочее"),
		ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющиеЛичностьГражданинаРФ")
	);
	
	ВидДокумента = ВидыДокумента.Получить(ВидПодтвержающегоДокумента);
	
	Если ВидДокумента = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	КодВидаДокумента = КодВидДокументаУдостоверяющегоЛичность(ВидДокумента);
	Если КодВидаДокумента = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Возврат КодВидаДокумента;
	
КонецФункции

// Возвращает код вида документа по документу удостоверяющему личность
// 
// Параметры:
//  ВидДокументаУдостоверяющегоЛичность -  ПеречислениеСсылка.ВидыДокументов - вид документа удостоверяжющего личность
//
// Возвращаемое значение: 
//  Строка - код вида документа
//
Функция КодВидДокументаУдостоверяющегоЛичность(ВидДокументаУдостоверяющегоЛичность) Экспорт
	
	ВидДокумента = Новый Соответствие();
	
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортГражданинаРФ"), 21);  
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортГражданинаРФЗаПределамиРФ"), 22);  
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ВременноеУдостоверениеЛичностиГражданинаРФ"), 26);    
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.СвидетельствоОРожденииГражданинаРФ"), 27);        
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющиеЛичностьГражданинаРФ"), 28);  
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортИностранногоГражданина"), 31);   
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющимиЛичностьИностранногоГражданина"), 32);    
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ДокументВыданныйИностраннымГосударствомУдостоверяющегоЛичностьБезГражданства"), 33);     
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ВидНаЖительствоДляЛицБезГражданства"), 34);         
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.РазрешениеНаВременноеПроживаниеДляЛицБезГражданства"), 35);    
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.СвидетельствоОРасХодатайстваОПризнанииЛицаБезГражданстваБеженцемНаТерриторииРФ"), 36);   
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.УдостоверениеБеженца"), 37);               
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющимиЛичностьЛицБезГражданстваРФ"), 38);     
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ДокументУдостовЛичностьЛицаНаПериодРассмотренияЗаявленияОПризнанииГражданиномРФ"), 40); 
	
	Возврат ВидДокумента.Получить(ВидДокументаУдостоверяющегоЛичность);
	
КонецФункции

// Возвращает значения видов документов удостоверяющих личность
//
// Возвращаемое значение:
//  Соответствие -  возврат значений видов документов
//
Функция ВидыДокументовУдостоверяющихЛичность() Экспорт
	
	ВидыДокумента = Новый Соответствие();
	
	ВидыДокумента.Вставить(21, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортГражданинаРФ"));
	ВидыДокумента.Вставить(22, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортГражданинаРФЗаПределамиРФ"));
	ВидыДокумента.Вставить(26, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ВременноеУдостоверениеЛичностиГражданинаРФ"));
	ВидыДокумента.Вставить(27, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.СвидетельствоОРожденииГражданинаРФ"));
	ВидыДокумента.Вставить(28, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющиеЛичностьГражданинаРФ"));
	ВидыДокумента.Вставить(31, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортИностранногоГражданина"));
	ВидыДокумента.Вставить(32, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющимиЛичностьИностранногоГражданина"));
	ВидыДокумента.Вставить(33, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ДокументВыданныйИностраннымГосударствомУдостоверяющегоЛичностьБезГражданства"));
	ВидыДокумента.Вставить(34, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ВидНаЖительствоДляЛицБезГражданства"));
	ВидыДокумента.Вставить(35, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.РазрешениеНаВременноеПроживаниеДляЛицБезГражданства"));
	ВидыДокумента.Вставить(36, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.СвидетельствоОРасХодатайстваОПризнанииЛицаБезГражданстваБеженцемНаТерриторииРФ"));
	ВидыДокумента.Вставить(37, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.УдостоверениеБеженца"));
	ВидыДокумента.Вставить(38, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющимиЛичностьЛицБезГражданстваРФ"));
	ВидыДокумента.Вставить(40, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ДокументУдостовЛичностьЛицаНаПериодРассмотренияЗаявленияОПризнанииГражданиномРФ"));
	
	Возврат ВидыДокумента;
	
КонецФункции

// Возвращает признак проверки кода маркировки
// 
// Параметры:
//  СтрокаКодаМаркировки - СтрокаТаблицыЗначений - строка таблицы кодов маркировки
//
// Возвращаемое значение:
//  Булево - признак проверки кода маркировки
//
Функция НеПроверенКодМаркировки(СтрокаКодаМаркировки) Экспорт
	
	Возврат ПустаяСтрока(СтрокаКодаМаркировки.КодРезультатаПроверки)
		И ПустаяСтрока(СтрокаКодаМаркировки.ПредставлениеРезультатаПроверки);
	
КонецФункции

// Возвращает признак ошибки проверки кода маркировки
// 
// Параметры:
//  СтрокаКодаМаркировки - СтрокаТаблицыЗначений - строка таблицы кодов маркировки
//
// Возвращаемое значение:
//  Булево - признак ошибки проверки кода маркировки
//
Функция ОшибкаПроверкиКодаМаркировки(СтрокаКодаМаркировки) Экспорт
	
	Возврат СтрокаКодаМаркировки.КодРезультатаПроверки <> "15"
		Или СтрокаКодаМаркировки.КодОбработкиЗапроса <> "0"
		Или СтрокаКодаМаркировки.СтатусТовара <> ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ПланируемыйСтатусТовараКорректен")
		Или (СтрокаКодаМаркировки.КодМаркировкиПроверен И Не СтрокаКодаМаркировки.РезультатПроверки);
	
КонецФункции

// Получение представления пользователю результат проверки
// 
// Возвращаемое значение:
//  Соответствие -  возврат представления результата проверки
//
Функция ОформлениеРезультатаПроверкиКодовМаркировки() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить("НеПроверено",
		Новый Структура("Представление,Картинка",
			НСтр("ru = 'Не проверено'"), БиблиотекаКартинок.ОформлениеЗнакВоcклицательныйЗнак));
	Результат.Вставить("Ошибка",
		Новый Структура("Представление,Картинка",
			НСтр("ru = 'Обнаружены ошибки'"), БиблиотекаКартинок.ОформлениеЗнакКрест));
	Результат.Вставить("Выполнено",
		Новый Структура("Представление,Картинка",
			НСтр("ru = 'Выполнено'"), БиблиотекаКартинок.ОформлениеЗнакФлажок));
		
	Возврат Результат;
	
КонецФункции

// Возвращает представление ошибки проверки
//
// Параметры:
//  СтрокаКодаМаркировки - СтрокаТаблицыЗначений - строка таблицы кодов маркировки
//
// Возвращаемое значение:
//  Строка - представление ошибок проверки
//
Функция ПредставлениеОшибкиПроверки(СтрокаКодаМаркировки)  Экспорт
	
	ПредставлениеОшибок = Новый Массив;
	
	СписокОшибок = СписокПредставленийКодовОшибок();
	ДанныеОписания = СписокОшибок.Получить(СтрокаКодаМаркировки.ПредставлениеРезультатаПроверки);
	
	Если ДанныеОписания <> Неопределено Тогда
		
		ПредставлениеОшибок.Добавить(ДанныеОписания);
		
	Иначе
		
		ПредставлениеОшибок.Добавить(НСтр("ru = 'Результат проверки КП КМ фискальным накопителем с использованием ключа проверки КП отрицательный.'"));
		
	КонецЕсли;
	
	Если СтрокаКодаМаркировки.КодОбработкиЗапроса = "1" Тогда
		
		ПредставлениеОшибок.Добавить(НСтр("ru = 'Запрос проверки статуса ОИСМ имеет некорректный формат.'"));
		
	ИначеЕсли СтрокаКодаМаркировки.КодОбработкиЗапроса = "2" Тогда
		
		ПредставлениеОшибок.Добавить(НСтр("ru = 'Указанный в запросе код маркировки имеет некорректный формат (не распознан).'"));
		
	КонецЕсли;
	
	Если Не СтрокаКодаМаркировки.РезультатПроверкиОИСМ
		И ДанныеОписания = Неопределено Тогда
		
		ПредставлениеОшибок.Добавить(НСтр("ru = 'Проверка статуса товара ОИСМ завершилась с отрицательным результатом.'"));
		
	КонецЕсли;
	
	Если СтрокаКодаМаркировки.СтатусТовара = ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ОборотТовараПриостановлен")
		Или СтрокаКодаМаркировки.СтатусТовара = ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ПланируемыйСтатусТовараНекорректен") Тогда
		
		ПредставлениеОшибок.Добавить(Строка(СтрокаКодаМаркировки.СтатусТовара));
		
	КонецЕсли;
	
	Возврат СтрСоединить(ПредставлениеОшибок, Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СписокПредставленийКодовОшибок()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(
		"00000000",
		НСтр("ru = 'Проверка КП КМ не выполнена, статус товара ОИСМ не проверен'"));
	Результат.Вставить(
		"00000001",
		НСтр("ru = 'Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен'"));
	Результат.Вставить(
		"00000011",
		НСтр("ru = 'Проверка КП КМ выполнена с положительным результатом, статус товара ОИСМ не проверен'"));
	Результат.Вставить(
		"00010000",
		НСтр("ru = 'Проверка КП КМ не выполнена, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	Результат.Вставить(
		"00010001",
		НСтр("ru = 'Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	Результат.Вставить(
		"_00010011",
		НСтр("ru = 'Проверка КП КМ выполнена в ФН с положительным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	Результат.Вставить(
		"00000101",
		НСтр("ru = 'Проверка КП КМ выполнена с отрицательным результатом, статус товара у ОИСМ некорректен'"));
	Результат.Вставить(
		"00000111",
		НСтр("ru = 'Проверка КП КМ выполнена с положительным результатом, статус товара у ОИСМ некорректен'"));
	Результат.Вставить(
		"_00001111",
		НСтр("ru = 'Проверка КП КМ выполнена с положительным результатом, статус товара у ОИСМ корректен'"));
	
	Возврат Результат;

	
КонецФункции

#КонецОбласти
