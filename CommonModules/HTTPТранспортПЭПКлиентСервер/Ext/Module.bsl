#Область ПрограммныйИнтерфейс

// Синхронное выполнение HTTP запроса к серверу.
//  В случае ошибки генерирует исключение.
//
// Параметры:
//  МодульСоединения - Произвольный - Модуль объекта поддерживающего интерфейс создания соединения и параметров соединения.
//  ТипЗапроса - Строка - Глагол определяющий тип запроса согласно стандарту HTTP(https://tools.ietf.org/html/rfc2616).
//  Точка - Строка - Конечная точка(endpoint), определяющая ресурс к которому выполняется запрос.
//  Тело - Строка - Тело запроса, для запросов поддерживающих передачу тела.
//  Параметры - Структура	 - Параметры запроса, передаваемые в URL. Ключ - имя параметра, значение - значение параметра.
//  Заголовки - Соответствие из Произвольный - Дополнительные заголовки, которые необходимо передать в запросе.
//  ПараметрКонструктораСоединения - Произвольный - Параметр конструктора соединения,
//  												если модуль соединения поддерживает конструктор с парамтром.
//  ДопПараметры - Структура - используется для сквозной передачи параметров.
//							   Ключ - имя параметра, значение - значение параметра.
// Возвращаемое значение:
//  Строка - Строкове представление тела ответа.
//
//@skip-check method-too-many-params
Функция ВыполнитьЗапрос(МодульСоединения,
                        Знач ТипЗапроса,
                        Знач Точка,
                        Тело = Неопределено,
                        Параметры = Неопределено,
                        Заголовки = Неопределено,
                        ПараметрКонструктораСоединения = Неопределено,
                        ДопПараметры = Неопределено) Экспорт
	
	// Устанавливаем стандартное соединение.
	Если ПараметрКонструктораСоединения <> Неопределено Тогда
		//@skip-check dynamic-access-method-not-found
		СоединениеИПараметры = МодульСоединения.Соединение(ПараметрКонструктораСоединения); // Структура
	Иначе
		//@skip-check dynamic-access-method-not-found
		СоединениеИПараметры = МодульСоединения.Соединение(); // Структура
	КонецЕсли;
	
	//@skip-check property-return-type
	Соединение = СоединениеИПараметры.Соединение; // HTTPСоединение
	//@skip-check property-return-type
	ПараметрыСоединения = СоединениеИПараметры.Параметры; // Структура
	МенеджерЖурналирования = Неопределено;
	
	ПисатьЛог = Ложь;
	Если ПараметрыСоединения.Свойство("ПисатьЛог", ПисатьЛог) И ПисатьЛог Тогда
		МенеджерЖурналирования = МодульСоединения.МодульЖурналирования();
	КонецЕсли;
	
	// Если есть параметры, мапим их в URL
	Если Параметры <> Неопределено Тогда
		
		ПараметрыВЗапросе = Новый Массив(); // Массив из Строка
		
		Для Каждого КлючИЗначение Из Параметры Цикл
			
			//@skip-check Undefined function
			ПараметрыВЗапросе.Добавить(
				СтрШаблон(
					"%1=%2",
					КлючИЗначение.Ключ,
					HTTPТранспортПЭПВызовСервера.ВXMLСтроку(КлючИЗначение.Значение)
				)
			);
			
		КонецЦикла;
		
		Точка = СтрШаблон("%1?%2", Точка, СтрСоединить(ПараметрыВЗапросе, "&"));
		
	КонецЕсли;
	
	КорневойПуть = Неопределено;
	Если ПараметрыСоединения.Свойство("ПутьНаСервере", КорневойПуть) Тогда
		
		Точка = "/" + КорневойПуть + Точка;
		
	КонецЕсли;
	
	Если Заголовки <> Неопределено Тогда
		Запрос = Новый HTTPЗапрос(Точка, Заголовки);
	Иначе
		Запрос = Новый HTTPЗапрос(Точка);
	КонецЕсли;
	
	ТипКонтента = Запрос.Заголовки.Получить("Content-Type");
	
	Если Запрос.Заголовки.Получить("Content-Type") = Неопределено Тогда
		Запрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	КонецЕсли;
	
	Если Тело <> Неопределено Тогда

		Если ТипЗнч(Тело) = Тип("ДвоичныеДанные") Тогда
			
			Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("Заголовки") Тогда
				
				Для Каждого Заголовок Из ДопПараметры.Заголовки Цикл
					Запрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
				КонецЦикла;
				
			КонецЕсли;
			Запрос.УстановитьТелоИзДвоичныхДанных(Тело);

		Иначе

			Если НРег(ТипКонтента) = "application/x-www-form-urlencoded" Тогда

				ПараметрыВЗапросе = Новый Массив();
				Для Каждого КлючИЗначение Из Тело Цикл
					ПараметрыВЗапросе.Добавить(КлючИЗначение.Ключ + "=" + КлючИЗначение.Значение);
				КонецЦикла;

				ТелоСтрока = СтрСоединить(ПараметрыВЗапросе, "&");

			ИначеЕсли НЕ ТипЗнч(Тело) = Тип("Строка") Тогда 
			
				ТелоСтрока = СобратьJSON(Тело);
			
			Иначе
			
				ТелоСтрока = Тело;
			
			КонецЕсли;
			
			Запрос.УстановитьТелоИзСтроки(ТелоСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Ответ = Соединение.ВызватьHTTPМетод(ВРег(ТипЗапроса), Запрос);
	
	Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоВыполнения;
	
	Если МенеджерЖурналирования <> Неопределено Тогда
		МенеджерЖурналирования.Записать(ВРег(ТипЗапроса), Запрос, Ответ, Длительность);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 302 Тогда
		// Должен быть заголовок ответа Location со ссылкой на ресурс.
		НоваяСсылка = Ответ.Заголовки.Получить("Location");
		Если НоваяСсылка = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не удалось получить файл, т.к. сервер не вернул валидный URL'");
		КонецЕсли;
		
		Соединение = СоздатьСоединениеНаОснованииURL(НоваяСсылка);
		СтруктураURL = СтруктураURI(НоваяСсылка);
		
		Если Заголовки <> Неопределено Тогда
			РедиректЗапрос = Новый HTTPЗапрос(СтруктураURL.ПутьНаСервере, Заголовки);
		Иначе
			РедиректЗапрос = Новый HTTPЗапрос(СтруктураURL.ПутьНаСервере);
		КонецЕсли;
		
		Ответ = Соединение.Получить(РедиректЗапрос);
		
	КонецЕсли;
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Возврат Новый Структура(
		"Тело, Ошибка, Заголовки",
		ТелоОтвета,
		Ответ.КодСостояния <> 200,
		Ответ.Заголовки
	);
	
КонецФункции

// Сериализует переданную структуру в строку JSON.
// В случае ошибки генерирует исключение.
//
// Параметры:
//  Объект - Произвольный - Сериализуемый объект
// 
// Возвращаемое значение:
//  Строка - Строка в формате JSON
//
Функция СобратьJSON(Знач Объект) Экспорт
	
	Возврат HTTPТранспортПЭПВызовСервера.СобратьJSON(Объект);
	
КонецФункции

// Десериализует переданную строку в структуру или соответствие.
// В случае ошибки генерирует исключение.
//
// Параметры:
//  СтрокаJSON		 - Строка	 - Строка в формате JSON.
//  ВСоответствие	 - Булево	 - Признак преобразования в соответствие.
// 
// Возвращаемое значение:
//  Произвольный - Десериализованный объект.
//
Функция РазобратьJSON(Знач СтрокаJSON, Знач ВСоответствие = Ложь) Экспорт
	
	Возврат HTTPТранспортПЭПВызовСервера.РазобратьJSON(СтрокаJSON, ВСоответствие);
	
КонецФункции

// Создает HTTP-соединение на основании URL.
//
// Параметры:
//  URL	 - Строка	 - URL содержащий схему, хост, порт и адрес ресурса
// 
// Возвращаемое значение:
//  HTTPСоединение - Объект соединения
//
Функция СоздатьСоединениеНаОснованииURL(URL) Экспорт

	СтруктураURL = СтруктураURI(URL);

	ЗащищенноеСоединение = Неопределено;
	Если СтруктураURL.SSL Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	КонецЕсли;

	Возврат Новый HTTPСоединение(
		СтруктураURL.Хост,
		СтруктураURL.Порт,
		СтруктураURL.Логин,
		СтруктураURL.Пароль,
		,
		600,
		ЗащищенноеСоединение
	);

КонецФункции

// Скачать файл.
// 
// Параметры:
//  URL - Строка - URL к файлу
//  НастройкаСохранения - Структура -  Настройка сохранения:
//  * МестоХранения - Строка - Доступные значения "ВременноеХранилище" или "Сервер" 
//  * КлючУникальности - Неопределено, УникальныйИдентификатор - 
//  Заголовки - Структура -  Заголовки
// 
// Возвращаемое значение:
//  Строка - Путь к файлу на сервере или адрес временного хранилища
Функция СкачатьФайл(Знач URL, НастройкаСохранения = Неопределено, Заголовки = Неопределено) Экспорт
	
	Возврат HTTPТранспортПЭПВызовСервера.СкачатьФайл(URL, НастройкаСохранения, Заголовки);
	
КонецФункции

// Конструктор настроек сохранения.
// 
// Возвращаемое значение:
//  Структура - Настройка сохранения:
//  * МестоХранения - Строка - Доступные значения "ВременноеХранилище" или "Сервер" 
//  * КлючУникальности - Неопределено, УникальныйИдентификатор -
Функция НовыеНастройкиСохранения() Экспорт
	
	Возврат Новый Структура("МестоХранения,КлючУникальности", "ВременноеХранилище", Неопределено);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема - Строка - схема из URI;
//   * Логин - Строка - логин из URI;
//   * Пароль - Строка - пароль из URI;
//   * ИмяСервера - Строка - часть <хост>:<порт> из URI;
//   * Хост - Строка - хост из URI;
//   * Порт - Неопределено, Число - порт из URI;
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI
//   * SSL - Булево - признак использования защищеного соединения.
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("SSL", Схема = "https");
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение         - Строка - проверяемая строка.
//  Устаревший       - Булево - устаревший параметр, не используется.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
//
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина)
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Цифры = СтрРазделить("0,1,2,3,4,5,6,7,8,9", ",");
	
	Для Каждого Цифра Из Цифры Цикл
		
		Значение = СтрЗаменить(Значение, Цифра, "");
		
	КонецЦикла;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(Значение) = 0;
	
КонецФункции

#КонецОбласти
