
#Область ПрограммныйИнтерфейс

// Задает типы предметов взаимодействий, например: заказы, вакансии и т.п.
// Используется, если в конфигурации определен хотя бы один предмет взаимодействий. 
//
// Параметры:
//  ТипыПредметов  - Массив - предметы взаимодействий (Строка),
//                            например, "ДокументСсылка.ЗаказПокупателя" и т.п.
//
Процедура ПриОпределенииВозможныхПредметов(ТипыПредметов) Экспорт
	
	Для каждого Тип Из Метаданные.ОпределяемыеТипы.ПредметВзаимодействия.Тип.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		ТипыПредметов.Добавить("ДокументСсылка." + ОбъектМетаданных.Имя + "");
	КонецЦикла;
	
КонецПроцедуры

// Задает описания возможных типов контактов взаимодействий, например: партнеры, контактные лица и т.п.
// Используется, если в конфигурации определен хотя бы один тип контактов взаимодействий,
// помимо справочника Пользователи. 
//
// Параметры:
//  ТипыКонтактов - Массив - содержит описания типов контактов взаимодействий (Структура) и их свойства:
//     * Тип                               - Тип    - тип ссылки контакта.
//     * Имя                               - Строка - имя типа контакта , как оно определено в метаданных.
//     * Представление                     - Строка - представление типа контакта для отображения пользователю.
//     * Иерархический                     - Булево - признак того, является ли справочник иерархическим.
//     * ЕстьВладелец                      - Булево - признак того, что у контакта есть владелец.
//     * ИмяВладельца                      - Строка - имя владельца контакта, как оно определено в метаданных.
//     * ИскатьПоДомену                    - Булево - признак того, что контакты данного типа будет подбираться
//                                                    по совпадению домена, а не по полному адресу электронной почты.
//     * Связь                             - Строка - описывает возможную связь данного контакта с другим контактом, в
//                                                    случае когда текущий контакт является реквизитом другого контакта.
//                                                    Описывается следующей строкой "ИмяТаблицы.ИмяРеквизита".
//     * ИмяРеквизитаПредставлениеКонтакта - Строка - имя реквизита контакта, из которого будет получено
//                                                    представление контакта. Если не указано, то используется
//                                                    стандартный реквизит Наименование.
//     * ВозможностьИнтерактивногоСоздания - Булево - признак возможности интерактивного создания контакта из
//                                                    документов - взаимодействий.
//     * ИмяФормыНовогоКонтакта            - Строка - полное имя формы для создания нового контакта.
//                                                    Например, "Справочник.Партнеры.Форма.ПомощникНового".
//                                                    Если не заполнено, то открывается форма элемента по умолчанию.
//
Процедура ПриОпределенииВозможныхКонтактов(ТипыКонтактов) Экспорт
	
	Для каждого Тип Из Метаданные.ОпределяемыеТипы.КонтактВзаимодействия.Тип.Типы() Цикл
		Если Тип = Тип("СправочникСсылка.СтроковыеКонтактыВзаимодействий") Тогда
			Продолжить;
		Иначе
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			ЕстьВладелец = ОбъектМетаданных.Владельцы.Количество() > 0; 
			ОписаниеКонтакта = ВзаимодействияКлиентСервер.НовоеОписаниеКонтакта();
			ОписаниеКонтакта.Тип = Тип;
			ОписаниеКонтакта.Имя = "" + ОбъектМетаданных.Имя + "";
			ОписаниеКонтакта.Представление = "" + УправлениеДиалогомСервер.ПредставлениеСпискаОбъектов(ОбъектМетаданных) + "";
			ОписаниеКонтакта.Иерархический = ОбъектМетаданных.Иерархический;
			ОписаниеКонтакта.ЕстьВладелец = ЕстьВладелец;
			ОписаниеКонтакта.ИмяВладельца = "";
			ОписаниеКонтакта.ИскатьПоДомену = Истина;
			ОписаниеКонтакта.Связь = "";
			ОписаниеКонтакта.ИмяРеквизитаПредставлениеКонтакта = "Наименование";
			ТипыКонтактов.Добавить(ОписаниеКонтакта);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция - получение электронной почты контакта
//
// Параметры:
//  Контакт - СправочникСсылка.Контрагенты - Контрагент.
//   ТипКИ   - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//   Структура - значение контактной информации. 
//
Функция НаименованиеИАдресаЭлектроннойПочтыКонтакта(Контакт, ТипКИ) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Контакт.Метаданные().Иерархический Тогда
		Если Контакт.ЭтоГруппа Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицы = Контакт.Метаданные().ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕстьNULL(ТаблицаКонтактнаяИнформация.Представление,"""") КАК КИ,
	|	Таблица.Наименование КАК Наименование
	|ИЗ
	|	" + ИмяТаблицы + " КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = &ТипКИ)
	|ГДЕ
	|	Таблица.Ссылка = &Контакт
	|ИТОГИ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ТипКИ", ТипКИ);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокКИ = Новый Структура("Наименование,КИ", Выборка.Наименование, Новый СписокЗначений);
	ВыборкаКИ = Выборка.Выбрать();
	Пока ВыборкаКИ.Следующий() Цикл
		СписокКИ.КИ.Добавить(ВыборкаКИ.КИ);
	КонецЦикла;
	
	Возврат СписокКИ;
	
КонецФункции

// Функция - Получить номер телефона контрагента
//
// Параметры:
//  Контакт - СправочникСсылка.Контрагенты - Контрагент.
// 
// Возвращаемое значение:
//  Строка
//
Функция НомерТелефонаКонтакта(Контакт) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Контакт);
	
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.
		КонтактнаяИнформацияОбъектов(МассивОбъектов,, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если КонтактнаяИнформацияОбъекта.Количество() <> 0 Тогда
		
		Возврат КонтактнаяИнформацияОбъекта[0].Представление;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти



