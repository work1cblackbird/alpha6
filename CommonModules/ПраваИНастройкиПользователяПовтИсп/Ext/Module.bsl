
#Область СлужебныйПрограммныйИнтерфейс

// Проверяет доступность у пользователя роли по имени
//
// Параметры:
//  Роль           - Строка    - Название роли как она задана в конфигураторе или объект описания метаданного роли. 
//
// Возвращаемое значение:
//  Булево - Доступность указанной роли для текущего пользователя.
//
Функция ПроверитьРольПользователя(Роль) Экспорт
	
	Результат = Пользователи.РолиДоступны(Роль) ИЛИ (ПравоДоступа("АдминистрированиеДанных", Метаданные) 
			И ПравоДоступа("Администрирование", Метаданные)) ИЛИ Пользователи.РолиДоступны("ПолныеПрава");
	
	Возврат Результат;
	
КонецФункции // ПроверитьРольПользователя()

// Устарела. см. ПраваИНастройкиПользователя.ДанныеПрава
// !!!_view УДАЛИТЬ Преобразование имени права в ссылку на ПВХ.
//
// Параметры:
//  ЭлементПВХ - Строка                                 - Имя предопределенного элемента.
//             - ПланВидовХарактеристик.ПраваИНастройки - Ссылка на элемент ПВХ.
//  ИмяПВХ     - Строка                                 - Имя ПВХ, элемент которого нужно получить.
//
// Возвращаемое значение:
//  ПланВидовХарактеристик.Ссылка - Ссылка на ПВХ ПраваИНастройки или Неопределено для недопустимого имени ПВХ.
//
Функция ПолучитьПараметрыПВХПравИНастроек(ЭлементПВХ, ИмяПВХ) Экспорт
	
	ТипЗначения     = ТипЗнч(ЭлементПВХ);
	СсылкаНаЭлемент = ПланыВидовХарактеристик[ИмяПВХ].ПустаяСсылка();
	ИмяПредопределенныхДанных = "";
	
	Если ТипЗначения = Тип("ПланВидовХарактеристикСсылка." + ИмяПВХ) Тогда
		
		// Если право уже является ссылкой - вернем ее
		СсылкаНаЭлемент = ЭлементПВХ;
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		// Если право задано в виде имени - преобразуем его в ссылку на ПВХ
		СсылкаНаЭлемент = ПланыВидовХарактеристик[ИмяПВХ][СокрЛП(ЭлементПВХ)];
	КонецЕсли;
	
	ИмяПредопределенныхДанных = СсылкаНаЭлемент.ИмяПредопределенныхДанных;
	ЗначениеПоУмолчанию       = СсылкаНаЭлемент.ЗначениеПоУмолчанию;
	
	Возврат Новый Структура("Ссылка, ИмяПредопределенныхДанных, ЗначениеПоУмолчанию", 
						СсылкаНаЭлемент, ИмяПредопределенныхДанных, ЗначениеПоУмолчанию);
	
КонецФункции // ПолучитьПараметрыПВХПравИНастроек()

// Получает текущие значения прав и настроек для пользователя из регистра ПраваИНастройки.
// 
// Возвращаемое значение:
//  Структура -  Значения прав и настроек текущего пользователя.
//
Функция ПолучитьЗначенияВсехПравПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПравПользователя = Новый Структура;
	
	ТекстЗапроса =
	"ВЫБРАТЬ 
	|	&Пользователь КАК ПользовательПрофиль,
	|	ЛОЖЬ КАК ЭтоГруппаДоступа
	|ПОМЕСТИТЬ Владельцы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.ГруппаПравИНастроек,
	|	ИСТИНА
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Владельцы.ПользовательПрофиль,
	|	Владельцы.ЭтоГруппаДоступа,
	|	ПраваИНастройки.ПравоНастройка КАК ПравоНастройка,
	|	ПраваИНастройки.Объект,
	|	ПраваИНастройки.Значение
	|ПОМЕСТИТЬ ПраваПользователей
	|ИЗ
	|	Владельцы КАК Владельцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваИНастройки КАК ПраваИНастройки
	|		ПО Владельцы.ПользовательПрофиль = ПраваИНастройки.ПользовательПрофиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПраваИНастройки.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ПраваИНастройки.ЭтоНастройка КАК ЭтоНастройка,
	|	ПраваИНастройки.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	ПраваИНастройки.РасширениеДанных КАК РасширениеДанных,
	|	ПраваПользователей.ЭтоГруппаДоступа,
	|	ПраваПользователей.Объект КАК Объект,
	|	ПраваПользователей.Значение
	|ИЗ
	|	ПланВидовХарактеристик.ПраваИНастройки КАК ПраваИНастройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПраваПользователей КАК ПраваПользователей
	|		ПО ПраваИНастройки.Ссылка = ПраваПользователей.ПравоНастройка
	|ГДЕ
	|	НЕ ПраваИНастройки.ПометкаУдаления
	|	И ПраваИНастройки.Предопределенный
	|	И НЕ ПраваИНастройки.ЭтоГруппа
	|ИТОГИ
	|	МАКСИМУМ(ЭтоНастройка),
	|	МАКСИМУМ(ЗначениеПоУмолчанию),
	|	МАКСИМУМ(РасширениеДанных)
	|ПО
	|	ИмяПредопределенныхДанных,
	|	Объект";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	
	// Все имеющиеся значения получены, приступаем к формированию кеша прав
	ВыборкаПраво = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПраво.Следующий() Цикл
		
		// Получим основные параметры текущего права
		ИмяПредопределенныхДанных = ВыборкаПраво.ИмяПредопределенныхДанных;
		ЭтоНастройка              = ВыборкаПраво.ЭтоНастройка;
		ЗначениеПоУмолчанию       = ВыборкаПраво.ЗначениеПоУмолчанию;
		
		// Помещаем в кеш предварительное значение права
		ПравПользователя.Вставить(ИмяПредопределенныхДанных, ЗначениеПоУмолчанию);
		
		// Последовательно обработаем все имеющиеся расширения данных
		ВыборкаОбъект = ВыборкаПраво.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОбъект.Следующий() Цикл
			
			// Если данных в регистре нет, то нет смысла выполнять дальнейшие операции
			Если ВыборкаОбъект.Объект = Null Тогда
				Продолжить;
			КонецЕсли;
			
			// Отбросим записи регистра, не соответствующие параметрам права
			Если НЕ ВыборкаОбъект.РасширениеДанных И ЗначениеЗаполнено(ВыборкаОбъект.Объект) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеГруппаДоступа = null;
			ЗначениеПользователь  = null;
			
			// Получим установленные значения 
			Выборка = ВыборкаОбъект.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЭтоГруппаДоступа Тогда
					ЗначениеГруппаДоступа = Выборка.Значение;
				Иначе
					ЗначениеПользователь  = Выборка.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Права и настройки имеют различный приоритет хранения
			Если ЭтоНастройка Тогда
				ЗначениеГруппаДоступаИтог = ?(ЗначениеГруппаДоступа = null, ЗначениеПоУмолчанию, ЗначениеГруппаДоступа);
				ЗначениеПрава = ?(ЗначениеПользователь = null, ЗначениеГруппаДоступаИтог, ЗначениеПользователь);
			Иначе 
				ЗначениеГруппаДоступаИтог = ?(ЗначениеПользователь = null, ЗначениеПоУмолчанию, ЗначениеПользователь);
				ЗначениеПрава = ?(ЗначениеГруппаДоступа = null, ЗначениеГруппаДоступаИтог, ЗначениеГруппаДоступа);
			КонецЕсли;
			
			// Помещаем в кеш полученные приватные значения права
			Если ЗначениеЗаполнено(ВыборкаОбъект.Объект) Тогда
				ПравПользователя.Вставить(ИмяПредопределенныхДанных + "_" + ВыборкаОбъект.Объект, ЗначениеПрава);
			Иначе
				ПравПользователя.Вставить(ИмяПредопределенныхДанных,                              ЗначениеПрава);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПравПользователя;
	
КонецФункции // ПолучитьЗначенияВсехПравПользователя()

// Получает значения учетных политик на дату среза из регистра УчетныеПолитики.
//
// Параметры:
//  Объект           - СправочникСсылка.Организации           - Объект, для которого получается значение
//                   - СправочникСсылка.СкладыКомпании        - учетной политики.
//                   - СправочникСсылка.ПодразделенияКомпании - 
//  ДатаСреза        - Дата                                   - Дата, на которую получается значение учетной политики.
//  ИспользоватьЗначениеПоУмолчанию - Булево - Использовать значение по умолчанию, если учетная политика не настроена.
//                                    Истина: возвращать значение по умолчанию, Ложь: возвращать Неопределено.
//
// Возвращаемое значение:
//   Структура  - Значения учетных политик.
//
Функция ПолучитьВсеУчетныеПолитики(Объект, ДатаСреза, ИспользоватьЗначениеПоУмолчанию = Истина) Экспорт
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеПолитикиСрезПоследних.Значение КАК Значение,
	|	УчетныеПолитики.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	УчетныеПолитики.ТипЗначения КАК ТипЗначения,
	|	УчетныеПолитики.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	ПланВидовХарактеристик.УчетныеПолитики КАК УчетныеПолитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеПолитики.СрезПоследних(&ДатаСреза, Объект = &Объект) КАК УчетныеПолитикиСрезПоследних
	|		ПО (УчетныеПолитикиСрезПоследних.Параметр = УчетныеПолитики.Ссылка)
	|ГДЕ
	|	НЕ УчетныеПолитики.ПометкаУдаления
	|	И УчетныеПолитики.ИмяПредопределенныхДанных <> """"";
	
	Запрос.УстановитьПараметр("Объект",    Объект);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Перебор полученных значений и формирование соответствия прав
	Пока Выборка.Следующий() Цикл
		
		// Попробуем получить значение права в соответствии с назначением
		ЗначениеПрава = Выборка.Значение;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеПрава) Тогда
			ЗначениеПрава = ?(ИспользоватьЗначениеПоУмолчанию, Выборка.ЗначениеПоУмолчанию, Неопределено);
		КонецЕсли;
		
		// для типа "булево" ничего приводить не нужно
		Если НЕ ТипЗнч(Выборка.ТипЗначения.ПривестиЗначение(ЗначениеПрава)) = Тип("Булево") Тогда
			ЗначениеПрава = Выборка.ТипЗначения.ПривестиЗначение(ЗначениеПрава);
		КонецЕсли;
		
		Результат.Вставить(Выборка.ИмяПредопределенныхДанных, ЗначениеПрава);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВсеУчетныеПолитики()

#КонецОбласти
