
#Область ПрограммныйИнтерфейс

// Обновление установки скидок/наценок при изменении данных в табличной части.
//
// Параметры:
//  Объект	- ДокументОбъект - документ,
//  ПутьКДанным - Строка - путь к данным,
//  ПараметрыДействия - Структура - параметры действия.
//
Процедура ПересчитатьСкидкиНаценки(Объект, ПутьКДанным="Товары", ПараметрыДействия=Неопределено) Экспорт
	
	РазложенныйПутьКДанным = СтрРазделить(ПутьКДанным, ".", Ложь);
	
	Если РазложенныйПутьКДанным.Количество() = 2 Тогда
		ИмяТабличнойЧасти = РазложенныйПутьКДанным[1];
	Иначе
		ИмяТабличнойЧасти = ПутьКДанным;
	КонецЕсли;
	
	Если ПараметрыДействия = Неопределено
		ИЛИ НЕ ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	МенеджерДокумента.ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПересчитатьСкидкиНаценки()

// Возвращает параметры для установки условного оформления для полей редактирования сумм и процентов
// скидок шапки и скидок строки.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой произошло событие. 
//  КонтролируемыеРеквизиты - Соответствие               - реквизиты для установки условного оформления
//
// Возвращаемое значение:
//  Массив из Структура - параметры установки условного оформления:
//    * Элементы - Массив из Строка - Список элементов формы, на которые накладывается условное оформление
//    * ПолеОтбора - Строка - Наименование элемента формы, содержащего значение отбора.
//    * Представление - Строка - пользовательское представление элемента условного оформления.
//
Функция ПараметрыУстановкиУсловногоОформления(Форма, КонтролируемыеРеквизиты = Неопределено) Экспорт
	
	Параметры = Новый Массив;
	
	Если КонтролируемыеРеквизиты = Неопределено Тогда
		КонтролируемыеРеквизиты = СкидкиНаценкиКлиентСервер.КонтролируемыеРеквизиты();
	КонецЕсли;
	
	Для Каждого Реквизит Из КонтролируемыеРеквизиты Цикл
		Если Форма.Элементы.Найти(Реквизит.Ключ) <> Неопределено Тогда
			Нашли = Ложь;
			Для Каждого Строка Из Параметры Цикл
				Если Строка.ПолеОтбора = Реквизит.Значение Тогда
					Нашли = Истина;
					Строка.Элементы.Добавить(Реквизит.Ключ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Нашли Тогда
				Параметр = Новый Структура;
				Параметр.Вставить("Элементы", Новый Массив);
				Параметр.Элементы.Добавить(Реквизит.Ключ);
				Параметр.Вставить("ПолеОтбора", Реквизит.Значение);
				Параметр.Вставить("Представление");
				Параметры.Добавить(Параметр);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

// Устанавливаем условное оформление для полей редактирования значений скидки/наценки.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Содержит данную форму. 
//  ПараметрыУстановки - возвращает параметры для установки условного оформления для полей редактирования сумм 
//                       и процентов скидок шапки и скидок строки.
//
Процедура УстановитьУсловноеОформление(Форма, ПараметрыУстановки) Экспорт
	
	Если
		Не ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки")
			= Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов
	Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыУстановки Цикл
		
		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Представление = Параметр.Представление;
		
		Для Каждого Элемент Из Параметр.Элементы Цикл
			ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элемент);
		КонецЦикла;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Параметр.ПолеОтбора);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Получение суммы табличной части документа без скидки
//
// Параметры:
//  ЭтотОбъект	- ДокументОбъект - документ, сумму которого необходимо получить
//  Товары		- ТабличнаяЧасть - табличная часть документа, сумму по которой необходимо получить
//
// Возвращаемое значение:
//   Число		- Сумма документа без скидки.
//
Функция ПолучитьСуммуДокументаБезСкидки(Объект, ИмяТабличнойЧасти, МассивСтрокСВытеснением = Неопределено, МассивЗамен = Неопределено)
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ЕстьВытеснение = (ТипЗнч(МассивСтрокСВытеснением) = Тип("Массив") И МассивСтрокСВытеснением.Количество() > 0);   
	ЕстьЗамены = (ТипЗнч(МассивЗамен) = Тип("Массив") И МассивЗамен.Количество() > 0);
	
	ТипЦен = ?(ИмяТабличнойЧасти = "Автоработы", "ТипЦенРабот", "ТипЦен");
	Если ЕстьРеквизит(Объект, "ТипЦен") Тогда
		ЦенаВключаетНДС = НЕ ЗначениеЗаполнено(Объект[ТипЦен]) ИЛИ Объект[ТипЦен].ЦенаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	СуммаДокументаБезСкидки = 0;
	
	Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
		Если ЕстьВытеснение И МассивСтрокСВытеснением.Найти(Строка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;  
		
		Если ЕстьЗамены И МассивЗамен.Найти(Строка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;  

		Если ЦенаВключаетНДС Тогда
			// Получим сумму документу без учета НДС и скидки
			СуммаДокументаБезСкидки = СуммаДокументаБезСкидки + Строка.Сумма;
		Иначе
			// Если цена не включает НДС, то получим суммарную НДС по всем строкам
			СуммаДокументаБезСкидки = СуммаДокументаБезСкидки + Строка.Сумма + (Строка.Сумма * Строка.СтавкаНДС.Ставка)/100;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаДокументаБезСкидки;
	
КонецФункции // ПолучитьСуммуДокументаБезСкидки()

// Формирование суммы строки без скидки
Функция ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти = "Товары", ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Результат = 0;
	
	ТипЦен = ?(ИмяТабличнойЧасти = "Автоработы", "ТипЦенРабот", "ТипЦен");
	Если ПараметрыДействия.Свойство("ТипЦен") Тогда
		ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
	ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
		ЦенаВключаетНДС = НЕ ЗначениеЗаполнено(Объект[ТипЦен]) ИЛИ Объект[ТипЦен].ЦенаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "СтавкаНДС", ИмяТабличнойЧасти) Тогда
		СтавкаНДС = Строка.СтавкаНДС.Ставка;
	Иначе
		СтавкаНДС = 0;
	КонецЕсли;
	
	Результат = Строка.Сумма;
	Если НЕ ЦенаВключаетНДС Тогда
		Результат = Результат + Окр(Результат*СтавкаНДС/100,2);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает идентификатор скидки из шапки
//
Функция ПолучитьИдентификаторСкидкиШапки(Параметры, ТекущийИдентификатор) Экспорт
	Перем Подразделение; // Подразделение
	
	ИдентификаторСкидки = ТекущийИдентификатор;
	
	// Проверим и обработаем переданные данные
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		// Создадим список обязательных параметров
		Обязательные = Новый Структура();
		Обязательные.Вставить("ПодразделениеКомпании"    , Справочники.ПодразделенияКомпании.ПустаяСсылка());
		Обязательные.Вставить("РучнаяСкидка"             , Неопределено);
		Обязательные.Вставить("НачВремя"                 , '00010101');
		Обязательные.Вставить("КонВремя"                 , '00010101');
		Обязательные.Вставить("ДниНедели"                , Неопределено);
		Обязательные.Вставить("ДисконтнаяКарта"          , Справочники.Карточки.ПустаяСсылка());
		Обязательные.Вставить("ОтСуммыНакопленияНаКарте" , 0);
		Обязательные.Вставить("ЗалОбслуживания"          , Справочники.СкладыКомпании.ПустаяСсылка());
		Обязательные.Вставить("Свойство"                 , ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка());
		Обязательные.Вставить("ОтСуммыЧека"              , 0);
		Обязательные.Вставить("Скидка"                   , Справочники.ТипыСкидок.ПустаяСсылка());
		ЗаполнитьЗначенияСвойств(Обязательные, Параметры);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// определим подразделение
	Обязательные.Свойство("ПодразделениеКомпании",Подразделение);
	Если Подразделение=Справочники.ПодразделенияКомпании.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// попробуем найти похожую запись
	СкидкиШапки = РегистрыСведений.СкидкиШапки.СрезПоследних(,Обязательные);
	Если СкидкиШапки.Количество() > 0 Тогда
		ИдентификаторСкидки = СкидкиШапки.Получить(0).ИдентификаторСкидки;
		ТекущийИдентификатор = ИдентификаторСкидки;
	КонецЕсли;
	
	// определим новый идентификатор
	Если НЕ ЗначениеЗаполнено(ИдентификаторСкидки) Тогда
		ИдентификаторШапки = 0; ИдентификаторСтроки = 0;
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СкидкиШапки.ИдентификаторСкидки КАК ИдентификаторСкидки
		|ИЗ
		|	РегистрСведений.СкидкиШапки КАК СкидкиШапки
		|ГДЕ
		|	СкидкиШапки.ПодразделениеКомпании В ИЕРАРХИИ(&Подразделение)	
		|УПОРЯДОЧИТЬ ПО
		|	СкидкиШапки.ИдентификаторСкидки УБЫВ");
		Запрос.УстановитьПараметр("Подразделение",Подразделение);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ИдентификаторШапки = Результат.ИдентификаторСкидки;
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СкидкиСтроки.ИдентификаторСкидки КАК ИдентификаторСкидки
		|ИЗ
		|	РегистрСведений.СкидкиСтроки КАК СкидкиСтроки
		|ГДЕ
		|   СкидкиСтроки.ПодразделениеКомпании В ИЕРАРХИИ(&Подразделение)
		|УПОРЯДОЧИТЬ ПО
		|	СкидкиСтроки.ИдентификаторСкидки УБЫВ");
		Запрос.УстановитьПараметр("Подразделение",Подразделение);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ИдентификаторСтроки = Результат.ИдентификаторСкидки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИдентификаторШапки) Тогда
			ИдентификаторШапки=0;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
			ИдентификаторСтроки=0;
		КонецЕсли;
		ИдентификаторСкидки = Макс(ИдентификаторШапки,ИдентификаторСтроки);
	КонецЕсли;
	
	Возврат ИдентификаторСкидки;
КонецФункции //ПолучитьИдентификаторСкидкиШапки()

// Сумма накопления
Функция ПолучитьСуммуНакопления(Карточка, Подразделение) Экспорт
	Сумма = 0;
	
	Если ЗначениеЗаполнено(Карточка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(НакопленияПоКарточкамКонтрагентовОбороты.СуммаОборот) КАК Сумма
		|ИЗ
		|	РегистрНакопления.НакопленияПоКарточкамКонтрагентов.Обороты(
		|			,
		|			,
		|			,
		|			Карточка = &Карточка
		|			И Контрагент = &Контрагент
		|			И ПодразделениеКомпании = &ПодразделениеКомпании) КАК НакопленияПоКарточкамКонтрагентовОбороты";
		
		Запрос.УстановитьПараметр("Карточка"             , Карточка);
		Запрос.УстановитьПараметр("Контрагент"           , Карточка.Объект);
		Запрос.УстановитьПараметр("ПодразделениеКомпании", Подразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Сумма = РезультатЗапроса.Выгрузить()[0].Сумма
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сумма;
КонецФункции

// Расчет скидок строки в документе
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь, ПараметрыДействия = Неопределено) Экспорт
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Если НЕ СкидкаШапкиАбсолютная Тогда
		Если ИмяТабличнойЧасти = "Товары" Тогда
			Менеджер.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
		ИначеЕсли ИмяТабличнойЧасти = "Автоработы" Тогда
			Менеджер.АвтоработыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
		ИначеЕсли ИмяТабличнойЧасти = "ТоварыЗаменители" Тогда
			Менеджер.ТоварыЗаменителиПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	Иначе
		Если ИмяТабличнойЧасти = "Товары" Тогда
			Менеджер.ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
		ИначеЕсли ИмяТабличнойЧасти = "Автоработы" Тогда
			Менеджер.АвтоработыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
		ИначеЕсли ИмяТабличнойЧасти = "ТоварыЗаменители" Тогда
			Менеджер.ТоварыЗаменителиСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Строка, "СкидкаНаТовар") 
		И НЕ Строка.СкидкаНаТовар.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная Тогда
		Если ИмяТабличнойЧасти = "Товары" Тогда
			Менеджер.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
		ИначеЕсли ИмяТабличнойЧасти = "Автоработы" Тогда
			Менеджер.АвтоработыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
		ИначеЕсли ИмяТабличнойЧасти = "ТоварыЗаменители" Тогда
			Менеджер.ТоварыЗаменителиПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	Иначе
		Если ИмяТабличнойЧасти = "Товары" Тогда
			Менеджер.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
		ИначеЕсли ИмяТабличнойЧасти = "Автоработы" Тогда
			Менеджер.АвтоработыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
		ИначеЕсли ИмяТабличнойЧасти = "ТоварыЗаменители" Тогда
			Менеджер.ТоварыЗаменителиСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Округление суммы скидки согласно правилам округления по типу скидки
//
// Параметры
//  СуммаСкидки  - Число - Расчетная сумма скидки
//  ТипСкидки  - СправочникСсылка.ТипыСкидок - Ссылка на справочник типов скидок.
//
// Возвращаемое значение:
//   Число   - Округленная сумма скидки.
//
Функция ОкруглитьСуммуСкидки(СуммаСкидки, ТипСкидки) Экспорт
	СуммаСкидкиОкругленная = СуммаСкидки;
	Если ЗначениеЗаполнено(ТипСкидки) Тогда
		Если ТипСкидки.ОкруглятьВБольшуюСторону Тогда
			СуммаСкидкиОкругленная = Окр(СуммаСкидки + (0.5 / Pow(10, ТипСкидки.Точность)), ТипСкидки.Точность, 0);
		Иначе
			СуммаСкидкиОкругленная = Окр(СуммаСкидки, ТипСкидки.Точность, 0);
		КонецЕсли;
	КонецЕсли;
	Возврат СуммаСкидкиОкругленная;
КонецФункции // ОкруглитьСуммуСкидки()


//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОДБОРА СКИДОК/НАЦЕНОК

// функция поиска и применения скидок для документа
Функция УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТабличнойЧасти = "Товары", НеПодбиратьСтрочныеСкидки = Ложь) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// проверим а есть ли скидки
	ИмяРеквизита = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяРеквизитаСкидкаНаценка", "СкидкаНаценка");
	Если НЕ ЕстьРеквизит(Объект, ИмяРеквизита) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// получим параметры подбора
	НеРассчитыватьСкидки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь);
	
	НеПодбиратьОбщиеСкидки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеПодбиратьОбщиеСкидки", Ложь);

	БлокироватьПерерасчетСкидок = Ложь;
	Если ЕстьРеквизит(Объект, "БлокироватьПерерасчетСкидок") Тогда
		БлокироватьПерерасчетСкидок = Объект.БлокироватьПерерасчетСкидок;
	КонецЕсли;
	
	Если (НЕ БлокироватьПерерасчетСкидок И НЕ НеРассчитыватьСкидки) ИЛИ НеПодбиратьОбщиеСкидки  Тогда
		
		Если Не НеПодбиратьОбщиеСкидки Тогда 
			ПодобратьОбщиеСкидки(Объект, ПараметрыДействия, ИмяТабличнойЧасти);
		КонецЕсли;
		
		Если НЕ НеПодбиратьСтрочныеСкидки Тогда
			СтруктураДанныхОбъекта = Неопределено;
			Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
				ПодобратьСтрочныеСкидки(Объект, Строка, ПараметрыДействия, ИмяТабличнойЧасти, СтруктураДанныхОбъекта);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ НеРассчитыватьСкидки Тогда
		ПрименитьСкидки(Объект, ПараметрыДействия, ИмяТабличнойЧасти);
	КонецЕсли;
	
КонецФункции

Функция ПодобратьОбщиеСкидки(Объект, ПараметрыДействия, ИмяТабличнойЧасти = "Товары")
	
	// заполним имена скидочных реквизитов
	ИмяРеквизитаСкидкаНаценка = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяРеквизитаСкидкаНаценка",
		"СкидкаНаценка"
	);
	ИмяРеквизитаЗначениеСкидкиНаценки = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяРеквизитаЗначениеСкидкиНаценки",
		"ЗначениеСкидкиНаценки"
	);
	
	СкидкаИзменяласьВручную = Ложь;
	ЕстьЗначениеСкидкиШапкиИзменено = ЕстьРеквизит(Объект, "ЗначениеСкидкиШапкиИзменено", ИмяТабличнойЧасти);
	СуммаСкидкиНаценки = 0;
	ЕстьСуммаСкидки = ЕстьРеквизит(Объект, "СуммаСкидки", ИмяТабличнойЧасти);
	Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
		Если ЕстьЗначениеСкидкиШапкиИзменено Тогда
			СкидкаИзменяласьВручную = СкидкаИзменяласьВручную ИЛИ Строка.ЗначениеСкидкиШапкиИзменено;
		КонецЕсли;
		Если ЕстьСуммаСкидки Тогда
			СуммаСкидкиНаценки = СуммаСкидкиНаценки + Строка.СуммаСкидки;
		КонецЕсли;
	КонецЦикла;
	
	// получим менеджер объекта
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// получим способ выбора скидок
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	Если СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.СкидкиЗапрещены Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// подготовим данные отбора скидок
	Карточка = ?(ЕстьРеквизит(Объект, "Карточка"), Объект.Карточка, Справочники.Карточки.ПустаяСсылка());
	
	Если ПараметрыДействия.Свойство("СкладКомпании") Тогда
		СкладКомпании = ПараметрыДействия.СкладКомпании;
	ИначеЕсли ЕстьРеквизит(Объект, "СкладКомпании") Тогда
		СкладКомпании = Объект.СкладКомпании;
	ИначеЕсли ЕстьРеквизит(Объект, "Цех") Тогда
		СкладКомпании = Объект.Цех.СкладКомпании;
	Иначе
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	// получим кэш скидок
	ТаблицаСкидок = СкидкиНаценкиПовтИсп.ОбщиеСкидки(Объект.Дата, Объект.ПодразделениеКомпании, Карточка, СкладКомпании);
	РедактированиеРазрешено = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	
	// подготовим таблицу скидок для дальнейшего использования
	Отбор = Новый Структура();
	Если СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов Тогда
		
		Отбор.Вставить("РучнаяСкидка", Истина);
		Отбор.Вставить("Скидка", Объект[ИмяРеквизитаСкидкаНаценка]);
		
	ИначеЕсли СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеСкидки
			ИЛИ НЕ ЗначениеЗаполнено(Объект[ИмяРеквизитаСкидкаНаценка])
			ИЛИ НЕ Объект[ИмяРеквизитаСкидкаНаценка].РучнаяСкидка Тогда
		
		Отбор.Вставить("РучнаяСкидка", Ложь);
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "СкидкаНаРаботы", Ложь) Тогда
		Отбор.Вставить("СкидкаНаРаботы", Истина);
	Иначе
		Отбор.Вставить("СкидкаНаТовары", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаСкидкаНаценка]) И Объект[ИмяРеквизитаСкидкаНаценка].РучнаяСкидка Тогда
		Отбор.Вставить("Скидка", Объект[ИмяРеквизитаСкидкаНаценка]);
	КонецЕсли;
	
	ТаблицаСкидок = ТаблицаСкидок.Скопировать(ТаблицаСкидок.НайтиСтроки(Отбор));
	
	// получим базы для расчета
	БазаДляРасчетаСкидки = ПолучитьСуммуДокументаБезСкидки(Объект, ИмяТабличнойЧасти);
	
	// подберем скидку
	
	ОтСуммыНакопленияНаКартеРегл = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		СкидкиНаценкиПовтИсп.СуммуНакопленияНаКарте(Карточка, Объект.ПодразделениеКомпании),
		СкидкиНаценкиПовтИсп.ВалютаНакопительныхСумм(),
		Объект.Дата,
		СкидкиНаценкиПовтИсп.ВалютаРегламентированногоУчетаОрганизаций(),
		Объект.Дата);
	
	ВидСвойстваСкидок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаСкидок.ВыгрузитьКолонку("Скидка"), "ВидСвойства");
	ПодходящаяСкидка = Неопределено;
	ЗначениеПодходящейСкидки = 0;
	Для Каждого Строка Из ТаблицаСкидок Цикл
		НеПодходит = Ложь;
		
		// проверим свойства
		ВидСвойства = ВидСвойстваСкидок.Получить(Строка.Скидка);
		Если ЗначениеЗаполнено(Строка.Свойство) И ЗначениеЗаполнено(ВидСвойства) Тогда
			ЗначениеСвойства = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(ВидСвойства, Объект.Ссылка);
			ОтказПоНесовпадениюСвойства = НЕ(ЗначениеСвойства = Строка.Свойство);
			ЗначениеСвойства = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(Строка.Скидка.ВидСвойства, Объект.Ссылка);
			ОтказПоНесовпадениюСвойства = НЕ(ЗначениеСвойства = Строка.Свойство);
		Иначе
			ОтказПоНесовпадениюСвойства = Ложь;
		КонецЕсли;
		
		ОтСуммыЧекаВВалютеДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			Строка.ОтСуммыЧека,
			СкидкиНаценкиПовтИсп.ВалютаРегламентированногоУчетаОрганизаций(),
			Объект.Дата,
			Объект.ВалютаДокумента,
			Объект.КурсДокумента);
		
		Если ОтСуммыЧекаВВалютеДокумента > БазаДляРасчетаСкидки Тогда
			НеПодходит = Истина;
		ИначеЕсли Строка.ОтСуммыНакопленияНаКарте > 0
			И Строка.ОтСуммыНакопленияНаКарте > ОтСуммыНакопленияНаКартеРегл Тогда
			
			НеПодходит = Истина;
		ИначеЕсли ОтказПоНесовпадениюСвойства Тогда
			НеПодходит = Истина;
		Иначе
			
			Если Строка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная Тогда
				
				ЗначениеСкидкиВВалютеДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Строка.ЗначениеСкидки,
					СкидкиНаценкиПовтИсп.ВалютаРегламентированногоУчетаОрганизаций(),
					Объект.Дата,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента
				);
				
				Если РедактированиеРазрешено
					И СкидкаИзменяласьВручную
					И ЗначениеСкидкиВВалютеДокумента <> СуммаСкидкиНаценки
				Тогда
					ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", ЗначениеСкидкиВВалютеДокумента);
					ЗначениеСкидкиВВалютеДокумента = СуммаСкидкиНаценки;
					
				КонецЕсли;
				
				НеПодходит = (ЗначениеСкидкиВВалютеДокумента > БазаДляРасчетаСкидки);
			Иначе
				
				ЗначениеСкидкиВВалютеДокумента = БазаДляРасчетаСкидки * Строка.ЗначениеСкидки / 100;
				
				Если РедактированиеРазрешено
					И СкидкаИзменяласьВручную
					И ЗначениеЗаполнено(СуммаСкидкиНаценки)
					И ЗначениеСкидкиВВалютеДокумента <> СуммаСкидкиНаценки
				Тогда
					ПараметрыДействия.Вставить("ЗначениеСкидкиВВалютеДокумента", ЗначениеСкидкиВВалютеДокумента);
					ЗначениеСкидкиВВалютеДокумента = СуммаСкидкиНаценки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеПодходит Тогда
			Продолжить;
		КонецЕсли;
		
		Если
			ПодходящаяСкидка = Неопределено
			ИЛИ Строка.ФлагВытеснения > ПодходящаяСкидка.ФлагВытеснения
			ИЛИ (Строка.ФлагВытеснения = ПодходящаяСкидка.ФлагВытеснения
				И ЗначениеПодходящейСкидки <= ЗначениеСкидкиВВалютеДокумента)
		Тогда
			
			ПодходящаяСкидка = Строка;
			ЗначениеПодходящейСкидки = ЗначениеСкидкиВВалютеДокумента;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодходящаяСкидка = Неопределено Тогда
		Если НЕ Объект[ИмяРеквизитаСкидкаНаценка].РучнаяСкидка Тогда
			Объект[ИмяРеквизитаСкидкаНаценка] = Справочники.ТипыСкидок.ПустаяСсылка();
		КонецЕсли;
		Объект[ИмяРеквизитаЗначениеСкидкиНаценки] = 0;
	Иначе
		Объект[ИмяРеквизитаСкидкаНаценка] = ПодходящаяСкидка.Скидка;
		ЭтоОтносительнаяСкидка = ПодходящаяСкидка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Относительная;
		Объект[ИмяРеквизитаЗначениеСкидкиНаценки] = ?(ЭтоОтносительнаяСкидка, ПодходящаяСкидка.ЗначениеСкидки, ЗначениеПодходящейСкидки);
	КонецЕсли;
	
КонецФункции

Процедура ПодобратьСтрочныеСкидки(
		Объект,
		Строка,
		ПараметрыДействия,
		ИмяТабличнойЧасти = "Товары",
		СтруктураДанныхОбъекта = Неопределено)
	
	Если ЕстьРеквизит(Объект, "ЗначениеСкидкиСтрокиИзменено", ИмяТабличнойЧасти)
		И Строка.ЗначениеСкидкиСтрокиИзменено Тогда
		Возврат;
	КонецЕсли;
	
	// получим менеджер объекта
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	// Сохраним значения параметров данных для дальнейшей обработки.
	Если СтруктураДанныхОбъекта = Неопределено Тогда
		СтруктураДанныхОбъекта = Новый Структура;
		
		Если ЕстьРеквизит(Объект, "МестоРазмещения", ИмяТабличнойЧасти) Тогда
			СтруктураДанныхОбъекта.Вставить("СтрокаМестоРазмещения");
		ИначеЕсли ЕстьРеквизит(Объект, "СкладКомпании", ИмяТабличнойЧасти) Тогда
			СтруктураДанныхОбъекта.Вставить("СтрокаСкладКомпании");
		ИначеЕсли ЕстьРеквизит(Объект, "СкладКомпании") Тогда
			СтруктураДанныхОбъекта.Вставить("ОбъектСкладКомпании");
		ИначеЕсли ЕстьРеквизит(Объект, "Цех") Тогда
			СтруктураДанныхОбъекта.Вставить("ЦехСкладКомпании",
				?(ЗначениеЗаполнено(Объект.Цех),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Цех, "СкладКомпании"),
				Справочники.СкладыКомпании.ПустаяСсылка()));
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "Карточка") Тогда
			СтруктураДанныхОбъекта.Вставить("Карточка");
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "Номенклатура", ИмяТабличнойЧасти) Тогда
			СтруктураДанныхОбъекта.Вставить("Номенклатура");
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "КоличествоБазовое", ИмяТабличнойЧасти) Тогда
			СтруктураДанныхОбъекта.Вставить("КоличествоБазовое");
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "Авторабота", ИмяТабличнойЧасти) Тогда
			СтруктураДанныхОбъекта.Вставить("Авторабота");
		КонецЕсли;
		
		СтруктураДанныхОбъекта.Вставить("СпособВыбораСкидки", ПравоПользователя("СпособВыбораСкидки", Объект));
	КонецЕсли;
	
	// получим способ выбора скидок
	СпособВыбораСкидки = СтруктураДанныхОбъекта.СпособВыбораСкидки;
	Если СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.СкидкиЗапрещены Тогда
		Возврат;
	КонецЕсли;
	
	// подготовим данные отбора скидок
	Карточка = ?(СтруктураДанныхОбъекта.Свойство("Карточка"), Объект.Карточка, Справочники.Карточки.ПустаяСсылка());
	
	Если СтруктураДанныхОбъекта.Свойство("СтрокаМестоРазмещения") Тогда
		СкладКомпании = Строка.МестоРазмещения;
	ИначеЕсли СтруктураДанныхОбъекта.Свойство("СтрокаСкладКомпании") Тогда
		СкладКомпании = Строка.СкладКомпании;
	ИначеЕсли ПараметрыДействия.Свойство("СкладКомпании") Тогда
		СкладКомпании = ПараметрыДействия.СкладКомпании;
	ИначеЕсли СтруктураДанныхОбъекта.Свойство("ОбъектСкладКомпании") Тогда
		СкладКомпании = Объект.СкладКомпании;
	ИначеЕсли СтруктураДанныхОбъекта.Свойство("ЦехСкладКомпании") Тогда
		СкладКомпании = СтруктураДанныхОбъекта.ЦехСкладКомпании;
	Иначе
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	// получим кэш скидок
	ТаблицаСкидок = СкидкиНаценкиПовтИсп.СтрочныеСкидки(Объект.Дата, Объект.ПодразделениеКомпании, Карточка, СкладКомпании);
	
	// подготовим таблицу скидок для дальнейшего использования
	Отбор = Новый Структура();
	Если СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов Тогда
		
		Отбор.Вставить("РучнаяСкидка", Истина);
		Отбор.Вставить("Скидка", Строка.СкидкаНаТовар);
		
	ИначеЕсли СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеСкидки
			ИЛИ (ЕстьРеквизит(Объект, "СкидкаНаТовар", ИмяТабличнойЧасти) 
				И (НЕ ЗначениеЗаполнено(Строка.СкидкаНаТовар)
					ИЛИ НЕ Строка.СкидкаНаТовар.РучнаяСкидка)) Тогда
		
		Отбор.Вставить("РучнаяСкидка", Ложь);
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "СкидкаНаРаботы", Ложь) Тогда
		Отбор.Вставить("СкидкаНаРаботы", Истина);
	Иначе
		Отбор.Вставить("СкидкаНаТовары", Истина);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "СкидкаНаТовар", ИмяТабличнойЧасти) 
		И ЗначениеЗаполнено(Строка.СкидкаНаТовар) 
		И Строка.СкидкаНаТовар.РучнаяСкидка Тогда
		Отбор.Вставить("Скидка", Строка.СкидкаНаТовар);
	КонецЕсли;
	
	ТаблицаСкидок = ТаблицаСкидок.Скопировать(ТаблицаСкидок.НайтиСтроки(Отбор));
	
	ПодходящаяСкидка = Неопределено; ЗначениеПодходящейСкидки = 0;
	
	// получим объект назначения
	Номенклатура      = Справочники.Номенклатура.ПустаяСсылка();
	КоличествоВСтроке = Строка.Количество * ОбработкаТабличнойЧастиТовары.ПолучитьКоэффициентСтроки(Объект, Строка, ИмяТабличнойЧасти);
	ТипНоменклатуры   = Справочники.ТипыНоменклатуры.ПустаяСсылка();
	ЦеноваяГруппа     = Справочники.ЦеновыеГруппы.ПустаяСсылка();
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "СкидкаНаРаботы", Ложь) И СтруктураДанныхОбъекта.Свойство("Авторабота") Тогда
		Номенклатура       = Строка.Авторабота;
		КоличествоВСтроке  = Строка.Количество;
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "Номенклатура.ТипНоменклатуры,ЦеноваяГруппа");
		ТипНоменклатуры    = ДанныеНоменклатуры.НоменклатураТипНоменклатуры;
		ЦеноваяГруппа      = ДанныеНоменклатуры.ЦеноваяГруппа;
	ИначеЕсли СтруктураДанныхОбъекта.Свойство("Номенклатура") Тогда
		Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
			Возврат;
		КонецЕсли;
		Номенклатура = Строка.Номенклатура;
		Если СтруктураДанныхОбъекта.Свойство("КоличествоБазовое") Тогда
			КоличествоВСтроке = Строка.КоличествоБазовое;
		Иначе
			КоличествоВСтроке = Строка.Количество*ОбработкаТабличнойЧастиТовары.ПолучитьКоэффициентСтроки(Объект, Строка, ИмяТабличнойЧасти);
		КонецЕсли;
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры,ЦеноваяГруппа");
		ТипНоменклатуры    = ДанныеНоменклатуры.ТипНоменклатуры;
		ЦеноваяГруппа      = ДанныеНоменклатуры.ЦеноваяГруппа;
	КонецЕсли;
	
	// Составим список групп номенклатуры
	СписокГруппНоменклатуры = СкидкиНаценкиПовтИсп.ПолучитьИерархию(Номенклатура);
	
	СуммаСтроки = ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти);
	
	ОтСуммыНакопленияНаКартеРегл = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		СкидкиНаценкиПовтИсп.СуммуНакопленияНаКарте(Карточка, Объект.ПодразделениеКомпании),
		СкидкиНаценкиПовтИсп.ВалютаНакопительныхСумм(),
		Объект.Дата,
		СкидкиНаценкиПовтИсп.ВалютаРегламентированногоУчетаОрганизаций(),
		Объект.Дата);
	
	Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
		НеПодходит = Ложь;
		
		// проверим свойства
		Если ЗначениеЗаполнено(СтрокаСкидки.Скидка.ВидСвойства) И ЗначениеЗаполнено(СтрокаСкидки.Свойство) Тогда
			ЗначениеСвойства = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
				СтрокаСкидки.Скидка.ВидСвойства,
				Номенклатура
			);
			ОтказПоНесовпадениюСвойства = НЕ(ЗначениеСвойства = СтрокаСкидки.Свойство);
		Иначе
			ОтказПоНесовпадениюСвойства = Ложь;
		КонецЕсли;
		
		ОтСуммыСтрокиВВалютеДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			СтрокаСкидки.ОтСуммыСтроки,
			СкидкиНаценкиПовтИсп.ВалютаРегламентированногоУчетаОрганизаций(),
			Объект.Дата,
			Объект.ВалютаДокумента,
			Объект.КурсДокумента
		);
		
		Если СписокГруппНоменклатуры.Найти(СтрокаСкидки.Объект) = Неопределено
			И СтрокаСкидки.Объект <> ТипНоменклатуры
			И СтрокаСкидки.Объект <> ЦеноваяГруппа Тогда
			
			НеПодходит = Истина;
			
		ИначеЕсли ОтСуммыСтрокиВВалютеДокумента > СуммаСтроки Тогда
			НеПодходит = Истина;
		ИначеЕсли СтрокаСкидки.ОтКоличества > КоличествоВСтроке Тогда
			НеПодходит = Истина;
		ИначеЕсли ОтказПоНесовпадениюСвойства Тогда
			НеПодходит = Истина;
		ИначеЕсли СтрокаСкидки.ОтСуммыНакопленияНаКарте > 0
			И СтрокаСкидки.ОтСуммыНакопленияНаКарте > ОтСуммыНакопленияНаКартеРегл Тогда
			
			НеПодходит = Истина;
		Иначе
			Если СтрокаСкидки.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная Тогда
				
				ЗначениеСкидкиВВалютеДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СтрокаСкидки.ЗначениеСкидки,
					СкидкиНаценкиПовтИсп.ВалютаРегламентированногоУчетаОрганизаций(),
					Объект.Дата,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента
				);
				
				НеПодходит = (ЗначениеСкидкиВВалютеДокумента > СуммаСтроки);
				
			Иначе
				ЗначениеСкидкиВВалютеДокумента = СуммаСтроки * СтрокаСкидки.ЗначениеСкидки / 100;
			КонецЕсли;
		КонецЕсли;
		
		Если НеПодходит Тогда
			Продолжить;
		КонецЕсли;
		
		Если
			ПодходящаяСкидка = Неопределено
			ИЛИ СтрокаСкидки.ФлагВытеснения > ПодходящаяСкидка.ФлагВытеснения
			ИЛИ (СтрокаСкидки.ФлагВытеснения = ПодходящаяСкидка.ФлагВытеснения
				И ЗначениеПодходящейСкидки <= ЗначениеСкидкиВВалютеДокумента)
		Тогда
			
			ПодходящаяСкидка = СтрокаСкидки;
			ЗначениеПодходящейСкидки = ЗначениеСкидкиВВалютеДокумента;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ПодходящаяСкидка = Неопределено Тогда
		
		Если ЕстьРеквизит(Объект, "СкидкаНаТовар", ИмяТабличнойЧасти) И НЕ Строка.СкидкаНаТовар.РучнаяСкидка Тогда
			Строка.СкидкаНаТовар = Справочники.ТипыСкидок.ПустаяСсылка();
		КонецЕсли;
		
		РедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
		ЕстьРеквизитИзмененияЗначенияСкидки = ЕстьРеквизит(Объект, "ЗначениеСкидкиСтрокиИзменено", ИмяТабличнойЧасти);
		Если ЕстьРеквизит(Объект, "ПроцентСкидкиСтроки", ИмяТабличнойЧасти)
			И (НЕ РедактированиеСкидок
			ИЛИ РедактированиеСкидок 
			И ЕстьРеквизитИзмененияЗначенияСкидки 
			И НЕ Строка.ЗначениеСкидкиСтрокиИзменено) Тогда
			Строка.ПроцентСкидкиСтроки = 0;
			Строка.СуммаСкидкиСтроки   = 0;
		КонецЕсли;
		
	Иначе
		
		ПолеПроверки = ?(
			ПодходящаяСкидка.Скидка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная,
			"СуммаСкидкиСтроки",
			"ПроцентСкидкиСтроки");
			
		ЕстьРеквизитИзмененияСкидки = ЕстьРеквизит(Объект, "СкидкаСтрокиИзменена", ИмяТабличнойЧасти);
		ЕстьРеквизитИзмененияЗначенияСкидки = ЕстьРеквизит(Объект, "ЗначениеСкидкиСтрокиИзменено", ИмяТабличнойЧасти);
		Если СпособВыбораСкидки <> Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов
			ИЛИ Строка.СкидкаНаТовар <> ПодходящаяСкидка.Скидка
			ИЛИ НЕ ЗначениеЗаполнено(Строка[ПолеПроверки])
			ИЛИ ЕстьРеквизитИзмененияСкидки И Строка.СкидкаСтрокиИзменена
			ИЛИ Строка.СкидкаНаТовар = ПодходящаяСкидка.Скидка
				И ЕстьРеквизитИзмененияЗначенияСкидки
				И НЕ Строка.ЗначениеСкидкиСтрокиИзменено
		Тогда
			
			ЭтоОтносительнаяСкидка = ПодходящаяСкидка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Относительная;
			Строка.ПроцентСкидкиСтроки = ?(ЭтоОтносительнаяСкидка, ПодходящаяСкидка.ЗначениеСкидки, 0);
			Строка.СуммаСкидкиСтроки   = ЗначениеПодходящейСкидки;
			
			Если ЕстьРеквизитИзмененияСкидки Тогда
				Строка.СкидкаСтрокиИзменена = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Строка.СкидкаНаТовар = ПодходящаяСкидка.Скидка;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрименитьСкидки(Объект, ПараметрыДействия, ИмяТабличнойЧасти = "Товары")
	
	// Расставим вытеснения
	// заполним имена скидочных реквизитов.
	ИмяРеквизитаСкидкаНаценка = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяРеквизитаСкидкаНаценка",
		"СкидкаНаценка"
	);
	ИмяРеквизитаЗначениеСкидкиНаценки = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяРеквизитаЗначениеСкидкиНаценки",
		"ЗначениеСкидкиНаценки"
	);
	
	// получим способ выбора скидок
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	Если СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.СкидкиЗапрещены Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РедактированиеРазрешено = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	
	// получим менеджер объекта
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	МассивВытеснений = Новый Массив;
	
	Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Строка, "СкидкаНаТовар") 
			И Строка.СкидкаНаТовар.ФлагВытеснения Тогда
			МассивВытеснений.Добавить(Строка);
			Строка.ПроцентСкидки = 0;
			Строка.СуммаСкидки   = 0;
		ИначеЕсли Объект[ИмяРеквизитаСкидкаНаценка].ФлагВытеснения Тогда
			Строка.ПроцентСкидкиСтроки = 0;
			Строка.СуммаСкидкиСтроки   = 0;
		КонецЕсли;
	КонецЦикла;
	
	СкидкаШапкиАбсолютная =
		(Объект[ИмяРеквизитаСкидкаНаценка].СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная);
	ЕстьРеквизитИзмененияСкидки = ЕстьРеквизит(Объект, "ЗначениеСкидкиШапкиИзменено", ИмяТабличнойЧасти);

	// распределяем скидки шапки
	Если СкидкаШапкиАбсолютная Тогда 
		ЗначениеСкидки = Объект[ИмяРеквизитаЗначениеСкидкиНаценки]; 
		
		Если ПараметрыДействия.Свойство("ЗначениеСкидкиВВалютеДокумента") Тогда
			ЗначениеСкидки = ПараметрыДействия.ЗначениеСкидкиВВалютеДокумента;
		КонецЕсли;  
		
		РассчитыватьСкидкуШапкиПоСтроке = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РассчитыватьСкидкуШапкиПоСтроке", Ложь);
		
		МассивЗамен = Новый Массив();  
		
		Если ИмяТабличнойЧасти = "ТоварыЗаменители"	И  РассчитыватьСкидкуШапкиПоСтроке Тогда 
			
			ИдентификаторСтроки = Неопределено;
				
			Если ПараметрыДействия.Свойство("ИдентификаторСтроки") Тогда
				ИдентификаторСтроки = ПараметрыДействия.ИдентификаторСтроки;
			КонецЕсли;

			Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл 
				
				Если Строка.ИдентификаторСтроки <> ИдентификаторСтроки Тогда
					МассивЗамен.Добавить(Строка);
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли;
		
		БазаДляРасчетаСкидки = ПолучитьСуммуДокументаБезСкидки(Объект, ИмяТабличнойЧасти, МассивВытеснений, МассивЗамен);
		Если БазаДляРасчетаСкидки <> 0 Тогда
			
			ЗначениеЗаЕдиницу = ЗначениеСкидки / БазаДляРасчетаСкидки;
			СтрокаСМаксимальнойСуммой = Неопределено;
			
			Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
				
				Если МассивВытеснений.Найти(Строка) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;  
				
				Если МассивЗамен.Количество()>0 И МассивЗамен.Найти(Строка) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;  
	
				СуммаСкидки = ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти) * ЗначениеЗаЕдиницу;
				СуммаСкидки = Окр(СуммаСкидки, 2);
				Если НЕ (РедактированиеРазрешено И ЕстьРеквизитИзмененияСкидки И Строка.ЗначениеСкидкиШапкиИзменено) Тогда
					Если СтрокаСМаксимальнойСуммой = Неопределено ИЛИ СтрокаСМаксимальнойСуммой.Сумма < Строка.Сумма Тогда
						СтрокаСМаксимальнойСуммой = Строка;
					КонецЕсли;
					Строка.СуммаСкидки = СуммаСкидки;
				КонецЕсли;
				
				ЗначениеСкидки = ЗначениеСкидки - СуммаСкидки;
				
			КонецЦикла;
			
			Если ЗначениеСкидки <> 0 И СтрокаСМаксимальнойСуммой <> Неопределено Тогда
				СтрокаСМаксимальнойСуммой.СуммаСкидки = СтрокаСМаксимальнойСуммой.СуммаСкидки + ЗначениеСкидки;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
			Если МассивВытеснений.Найти(Строка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЕстьРеквизит(Объект, "ПроцентСкидки", ИмяТабличнойЧасти)
				И (НЕ ЕстьРеквизитИзмененияСкидки 
				ИЛИ ЕстьРеквизитИзмененияСкидки 
				И НЕ Строка.ЗначениеСкидкиШапкиИзменено) Тогда
				Строка.ПроцентСкидки = Объект[ИмяРеквизитаЗначениеСкидкиНаценки];
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// выполним расчет
	Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
		Менеджер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	КонецЦикла;
	
	Менеджер.РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецФункции

#КонецОбласти
