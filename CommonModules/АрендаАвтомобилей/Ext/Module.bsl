////////////////////////////////////////////////////////////////////////////////
// Подсистема "Аренда автомобилей"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщегоНазначения

// Функция возвращает структуру реквизитов вида аренды.
//
// Параметры:
//  ВидАренды			 - СправочникСсылка.ВидыАренды - Вид аренды для получения реквизитов.
//  ПараметрыДействия	 - Структура - Если структура содержит данные вида аренды, то возвращаются
//  	данные из параметров действия.
// 
// Возвращаемое значение:
//  Структура - содержит основные реквизиты вида аренды.
//
Функция ДанныеВидаАренды(ВидАренды, ПараметрыДействия = Неопределено) Экспорт
	
	ДанныеВидаАренды = Новый Структура("ТипАренды,ДепозитИспользование,ВыдачаПриемкаКонтролировать",
		Перечисления.ТипыРемонта.Платный, Ложь, Ложь);
		
	ДанныеВидаАренды.Вставить("ВодителиОбязательны", Ложь);
	ДанныеВидаАренды.Вставить("ТарификацияМинута",   Ложь);
	ДанныеВидаАренды.Вставить("ТарификацияЧас",      Ложь);
	ДанныеВидаАренды.Вставить("ТарификацияСутки",    Ложь);
	ДанныеВидаАренды.Вставить("ТарификацияНеделя",   Ложь);
	ДанныеВидаАренды.Вставить("ТарификацияМесяц",    Ложь);
	ДанныеВидаАренды.Вставить("ТарификацияКвартал",  Ложь);
	ДанныеВидаАренды.Вставить("ТарификацияГод",      Ложь);
	ДанныеВидаАренды.Вставить("Валюта",              Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
	ДанныеВидаАренды.Вставить("ОсвобожденОтНДС",     Ложь);
	ДанныеВидаАренды.Вставить("ТипЦен",              Справочники.ТипыЦен.ПустаяСсылка());
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура") И ПараметрыДействия.Свойство("ДанныеВидаАренды") Тогда
		ДанныеВидаАренды =  ПараметрыДействия.ДанныеВидаАренды;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыАренды.ВыдачаАнкета КАК ВыдачаАнкета,
		|	ВидыАренды.ВыдачаПриемкаКонтролировать КАК ВыдачаПриемкаКонтролировать,
		|	ВидыАренды.ДепозитИспользование КАК ДепозитИспользование,
		|	ВидыАренды.Валюта КАК Валюта,
		|	ВидыАренды.ПриемкаАнкета КАК ПриемкаАнкета,
		|	ВидыАренды.ТарификацияМинута КАК ТарификацияМинута,
		|	ВидыАренды.ТарификацияЧас КАК ТарификацияЧас,
		|	ВидыАренды.ТарификацияСутки КАК ТарификацияСутки,
		|	ВидыАренды.ТарификацияНеделя КАК ТарификацияНеделя,
		|	ВидыАренды.ТарификацияМесяц КАК ТарификацияМесяц,
		|	ВидыАренды.ТарификацияКвартал КАК ТарификацияКвартал,
		|	ВидыАренды.ТарификацияГод КАК ТарификацияГод,
		|	ВидыАренды.УслугаДляВыставленияСчетов КАК УслугаДляВыставленияСчетов,
		|	ВидыАренды.Ссылка КАК Ссылка,
		|	ВидыАренды.УслугаДляВыставленияСчетов.НаименованиеПолное КАК УслугаДляВыставленияСчетовНаименование,
		|	ВидыАренды.УслугаДляВыставленияАктов.НаименованиеПолное КАК УслугаДляВыставленияАктовНаименование,
		|	ВидыАренды.ТипАренды КАК ТипАренды,
		|	ВидыАренды.ТипЦен КАК ТипЦен,
		|	ВидыАренды.ОсвобожденОтНДС КАК ОсвобожденОтНДС,
		|	ВидыАренды.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ВидыАренды.ДепозитУслуга КАК ДепозитУслуга,
		|	ВидыАренды.УслугаДляВыставленияАктов КАК УслугаДляВыставленияАктов,
		|	ВидыАренды.Наименование КАК Наименование,
		|	ВидыАренды.ВодителиОбязательны КАК ВодителиОбязательны,
		|	ВидыАренды.ГрафикАренды КАК ГрафикАренды
		|ИЗ
		|	Справочник.ВидыАренды КАК ВидыАренды
		|ГДЕ
		|	ВидыАренды.Ссылка = &ВидАренды";
		Запрос.УстановитьПараметр("ВидАренды", ВидАренды);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ДанныеВидаАренды = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить())[0];
			Если ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
				ПараметрыДействия.Вставить("ДанныеВидаАренды", ДанныеВидаАренды);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеВидаАренды;
	
КонецФункции

// Проверяется возможность проведения документа по данным регистра сведений АрендаДействующиеСоглашения.
// Если документ не является действующим документом аренды, то провести его нельзя.
//
// Параметры:
//  Объект	 - ДокументОбъект - Документ аренды, для которого требуется проверить возможность проведения.
//  Отказ	 - Булево - признак отказа от проведения документа.
//
Процедура ПроверитьВозможностьПроведения(Объект, Отказ) Экспорт 
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ДоговорАренды") Тогда
		ДоговорАренды = Объект.Ссылка;
	Иначе
		ДоговорАренды = Объект.ДокументОснование;
	КонецЕсли;
	
	СтруктураСоглашения = РегистрыСведений.АрендаДействующиеСоглашения.ДействующееСоглашение(ДоговорАренды);
	
	Если СтруктураСоглашения.ДействующееСоглашение <> Объект.Ссылка Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Действие невозможно, необходимо вносить изменения в действующем соглашении: %1'"),
				СтруктураСоглашения.ДействующееСоглашение
			),
			СтруктураСоглашения.ДействующееСоглашение,,, Отказ
		);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Ценообразование

// Функция возвращает структуру цен периодов (сутки, недели, месяцы и т.д.) в переданной валюте по данным
// регистра сведений ЦеныАренды.
//
// Параметры:
//  ПодразделениеКомпании	 - СправочникСсылка.ПодразделенияКомпании - Подразделение для которого требуется
//							   получить стоимость.
//  ДанныеВидаАренды		 - Структура - Структура реквизитов вида аренды.
//  Автомобиль				 - СправочникСсылка - Ссылка на автомобиль, вариант комплектации или модель.
//  Валюта					 - СправочникСсылка.Валюты - Валюта, в которой требуется получить стоимость использования.
//  КурсДокумента			 - Число - курс валюты для расчета стоимости.
//  Дата					 - Дата - Дата для получения среза стоимости.
// 
// Возвращаемое значение:
//  Структура - содержит поля цен периодов согласно настройкам вида аренды.
//
Функция СтоимостьИспользования(ПодразделениеКомпании,
	ДанныеВидаАренды,
	Автомобиль,
	Валюта,
	КурсДокумента,
	Дата) Экспорт
	
	// Функция возвращает текущую стоимость из регистра ВременноеИспользованиеСтоимость
	// в качестве автомобиля можно передавать ссылку на модель, вариант комплектации, автомобиль.
	
	Стоимость = Новый Структура("ЦенаМинута,ЦенаЧас,ЦенаСутки", 0, 0, 0);
	
	Стоимость.Вставить("ЦенаНеделя",  0);
	Стоимость.Вставить("ЦенаМесяц",   0);
	Стоимость.Вставить("ЦенаКвартал", 0);
	Стоимость.Вставить("ЦенаГод",     0);
	Стоимость.Вставить("Депозит",     0);
	
	Если ДанныеВидаАренды <> Неопределено Тогда
		
		ДанныеМодели = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Автомобиль, "Модель,ВариантКомплектации");
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЦеныАрендыСрезПоследних.Минута КАК ЦенаМинута,
		|	ЦеныАрендыСрезПоследних.Час КАК ЦенаЧас,
		|	ЦеныАрендыСрезПоследних.Сутки КАК ЦенаСутки,
		|	ЦеныАрендыСрезПоследних.Неделя КАК ЦенаНеделя,
		|	ЦеныАрендыСрезПоследних.Месяц КАК ЦенаМесяц,
		|	ЦеныАрендыСрезПоследних.Квартал КАК ЦенаКвартал,
		|	ЦеныАрендыСрезПоследних.Год КАК ЦенаГод,
		|	ЦеныАрендыСрезПоследних.Депозит КАК Депозит,
		|	1 КАК Порядок
		|ИЗ
		|	РегистрСведений.ЦеныАренды.СрезПоследних(
		|			&Дата,
		|			ПодразделениеКомпании = &ПодразделениеКомпании
		|				И ВидАренды = &ВидАренды
		|				И Модель = &Модель
		|				И ВариантКомплектации = &ВариантКомплектации) КАК ЦеныАрендыСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЦеныАрендыСрезПоследних.Минута,
		|	ЦеныАрендыСрезПоследних.Час,
		|	ЦеныАрендыСрезПоследних.Сутки,
		|	ЦеныАрендыСрезПоследних.Неделя,
		|	ЦеныАрендыСрезПоследних.Месяц,
		|	ЦеныАрендыСрезПоследних.Квартал,
		|	ЦеныАрендыСрезПоследних.Год,
		|	ЦеныАрендыСрезПоследних.Депозит,
		|	2
		|ИЗ
		|	РегистрСведений.ЦеныАренды.СрезПоследних(
		|			&Дата,
		|			ПодразделениеКомпании = &ПодразделениеКомпании
		|				И ВидАренды = &ВидАренды
		|				И Модель = &Модель) КАК ЦеныАрендыСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
		Запрос.УстановитьПараметр("ВидАренды", ДанныеВидаАренды.Ссылка);
		Запрос.УстановитьПараметр("Модель", ДанныеМодели.Модель);
		Запрос.УстановитьПараметр("ВариантКомплектации", ДанныеМодели.ВариантКомплектации);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ВалютаВидаАренды = ДанныеВидаАренды.Валюта;
			
   			СтруктураКурсаВидаАренды = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВидаАренды, Дата);
			КурсВидаАренды = СтруктураКурсаВидаАренды.Курс
				/ ?(СтруктураКурсаВидаАренды.Кратность = 0, 1, СтруктураКурсаВидаАренды.Кратность);
						
			СтруктураСтоимости = СтруктураПоВидуАренды(ДанныеВидаАренды, "Цена", 0);
			ЗаполнитьЗначенияСвойств(СтруктураСтоимости, Выборка);
			ЗаполнитьЗначенияСвойств(Стоимость, СтруктураСтоимости);
			
			Стоимость.ЦенаМинута  = Окр(
				РаботаСКурсамиВалютПлатформа.
					ПересчетПоВалюте(Стоимость.ЦенаМинута,  Валюта, КурсДокумента, ВалютаВидаАренды, КурсВидаАренды),
				2);
			Стоимость.ЦенаЧас     = Окр(
				РаботаСКурсамиВалютПлатформа.
					ПересчетПоВалюте(Стоимость.ЦенаЧас,     Валюта, КурсДокумента, ВалютаВидаАренды, КурсВидаАренды),
				2);
			Стоимость.ЦенаСутки   = Окр(
				РаботаСКурсамиВалютПлатформа.
					ПересчетПоВалюте(Стоимость.ЦенаСутки,   Валюта, КурсДокумента, ВалютаВидаАренды, КурсВидаАренды),
				2);
			Стоимость.ЦенаНеделя  = Окр(
				РаботаСКурсамиВалютПлатформа.
					ПересчетПоВалюте(Стоимость.ЦенаНеделя,  Валюта, КурсДокумента, ВалютаВидаАренды, КурсВидаАренды),
				2);
			Стоимость.ЦенаМесяц   = Окр(
				РаботаСКурсамиВалютПлатформа.
					ПересчетПоВалюте(Стоимость.ЦенаМесяц,   Валюта, КурсДокумента, ВалютаВидаАренды, КурсВидаАренды),
				2);
			Стоимость.ЦенаКвартал = Окр(
				РаботаСКурсамиВалютПлатформа.
					ПересчетПоВалюте(Стоимость.ЦенаКвартал, Валюта, КурсДокумента, ВалютаВидаАренды, КурсВидаАренды),
				2);
			Стоимость.ЦенаГод     = Окр(
				РаботаСКурсамиВалютПлатформа.
					ПересчетПоВалюте(Стоимость.ЦенаГод,     Валюта, КурсДокумента, ВалютаВидаАренды, КурсВидаАренды),
				2);
			Стоимость.Депозит     = Окр(
				РаботаСКурсамиВалютПлатформа.
					ПересчетПоВалюте(Стоимость.Депозит,     Валюта, КурсДокумента, ВалютаВидаАренды, КурсВидаАренды),
				2);
						
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Стоимость;
	
КонецФункции   

// Функция возвращает структуру с количеством периодов (сутки, недели, месяцы и т.д.) по переданным данным
// вида аренды и интервалу времени.
//
// Параметры:
//  ДанныеВидаАренды  - Структура - Структура реквизитов вида аренды.
//  ДатаНачала		 - Дата - Начало периода для расчета количества периодов.
//  ДатаОкончания	 - Дата - Окончание периода для расчета количества периодов.
// 
// Возвращаемое значение:
//  Структура - с ключами КоличествоЧас, КоличествоСутки и т.д. Наличие ключа зависит от переданного вида аренды.
//
Функция СтруктураПериода(ДанныеВидаАренды, ДатаНачала, ДатаОкончания) Экспорт 
	
	СтруктураПериода = Новый Структура("КоличествоМинута,КоличествоЧас,КоличествоСутки", 0, 0, 0);
	
	СтруктураПериода.Вставить("КоличествоНеделя", 0);
	СтруктураПериода.Вставить("КоличествоМесяц", 0);
	СтруктураПериода.Вставить("КоличествоКвартал", 0);
	СтруктураПериода.Вставить("КоличествоГод", 0);
	
	// Функция возвращает структуру с количеством периодов согласно виду использования.
	СтруктураПериодаАренды = СтруктураПоВидуАренды(ДанныеВидаАренды, "Количество", 0);
	
	ВремДатаНачала = ДатаНачала;
	ВремДатаОкончания = ПривестиОкончаниеПериода(СтруктураПериодаАренды, ДатаНачала, ДатаОкончания);
	
	ТекущийКлюч = "";
	
	Если СтруктураПериодаАренды.Свойство("КоличествоГод") Тогда
		НомерМесяца = 0;
		МесяцевВГоду = 12;
		Пока ДобавитьМесяц(ВремДатаНачала, НомерМесяца + МесяцевВГоду) <= ВремДатаОкончания Цикл
			СтруктураПериодаАренды.КоличествоГод = СтруктураПериодаАренды.КоличествоГод + 1;
			НомерМесяца = НомерМесяца + МесяцевВГоду;
		КонецЦикла;
		ВремДатаНачала = ДобавитьМесяц(ВремДатаНачала, НомерМесяца);
	КонецЕсли;
	
	Если СтруктураПериодаАренды.Свойство("КоличествоКвартал") Тогда
		НомерМесяца = 0;
		МесяцевВКвартале = 3;
		Пока ДобавитьМесяц(ВремДатаНачала, НомерМесяца + МесяцевВКвартале) <= ВремДатаОкончания Цикл
			СтруктураПериодаАренды.КоличествоКвартал = СтруктураПериодаАренды.КоличествоКвартал + 1;
			НомерМесяца = НомерМесяца + МесяцевВКвартале;
		КонецЦикла;
		ВремДатаНачала = ДобавитьМесяц(ВремДатаНачала, НомерМесяца);
	КонецЕсли;
	
	Если СтруктураПериодаАренды.Свойство("КоличествоМесяц") Тогда
		НомерМесяца = 0;
		Пока ДобавитьМесяц(ВремДатаНачала, НомерМесяца + 1) <= ВремДатаОкончания Цикл
			СтруктураПериодаАренды.КоличествоМесяц = СтруктураПериодаАренды.КоличествоМесяц + 1;
			НомерМесяца = НомерМесяца + 1;
		КонецЦикла;
		ВремДатаНачала = ДобавитьМесяц(ВремДатаНачала, НомерМесяца * 1);
	КонецЕсли;

	Если СтруктураПериодаАренды.Свойство("КоличествоНеделя") Тогда
		ДнейВНеделе = 7;
		ДлительностьНедели = ДнейВНеделе * 24 * 60 * 60;
		Пока ВремДатаНачала + ДлительностьНедели <= ВремДатаОкончания Цикл
			СтруктураПериодаАренды.КоличествоНеделя = СтруктураПериодаАренды.КоличествоНеделя + 1;
			ВремДатаНачала = ВремДатаНачала + ДлительностьНедели;
		КонецЦикла;
	КонецЕсли;	
	
	Если СтруктураПериодаАренды.Свойство("КоличествоСутки") Тогда
		ДлительностьСуток = 24 * 60 * 60;
		Пока ВремДатаНачала + ДлительностьСуток <= ВремДатаОкончания Цикл
			СтруктураПериодаАренды.КоличествоСутки = СтруктураПериодаАренды.КоличествоСутки + 1;
			ВремДатаНачала = ВремДатаНачала + ДлительностьСуток;
		КонецЦикла;
	КонецЕсли;	
	
	Если СтруктураПериодаАренды.Свойство("КоличествоЧас") Тогда
		ДлительностьЧаса = 60 * 60;
		Пока ВремДатаНачала + ДлительностьЧаса <= ВремДатаОкончания Цикл
			СтруктураПериодаАренды.КоличествоЧас = СтруктураПериодаАренды.КоличествоЧас + 1;
			ВремДатаНачала = ВремДатаНачала + ДлительностьЧаса;
		КонецЦикла;
	КонецЕсли;	
	
	Если СтруктураПериодаАренды.Свойство("КоличествоМинута") Тогда
		ДлительностьМинуты = 60;
		Пока ВремДатаНачала + ДлительностьМинуты <= ВремДатаОкончания Цикл
			СтруктураПериодаАренды.КоличествоМинута = СтруктураПериодаАренды.КоличествоМинута + 1;
			ВремДатаНачала = ВремДатаНачала + ДлительностьМинуты;
		КонецЦикла;
	КонецЕсли;	
		
	СтруктураПериода.Вставить("Количество", ОкруглитьВБольшуюСторону((ДатаОкончания - ДатаНачала) / (24 * 60 * 60))); 
	
	ЗаполнитьЗначенияСвойств(СтруктураПериода, СтруктураПериодаАренды);
	
	Возврат СтруктураПериода;
	
КонецФункции

// Процедура производит расчет стоимости аренды переданной строки согласно параметрам документа
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура, ДокументОбъект - Объект, для которого производится расчет.
//  Строка				 - СтрокаТабличнойЧасти - Строка документа, для которой требуется рассчитать стоимость.
//  ПараметрыДействия	 - Структура - Дополнительные параметры для расчета.
//
Процедура РассчитатьСтоимостьАренды(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидАренды) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВидаАренды = ДанныеВидаАренды(Объект.ВидАренды, ПараметрыДействия);
	
	Если ДанныеВидаАренды.ТипАренды = Перечисления.ТипыРемонта.Бесплатный Тогда
		
		Строка.Сумма = 0;	
		
		Если ДанныеВидаАренды.ДепозитИспользование Тогда
			СтоимостьИспользования = СтоимостьИспользования(
				Объект.ПодразделениеКомпании,
				ДанныеВидаАренды, 
				Строка.Автомобиль, 
				Объект.ВалютаДокумента, 
				Объект.КурсДокумента, 
				Объект.ДатаНачала);
			Строка.СуммаДепозита = СтоимостьИспользования.Депозит;	
		Иначе
			Строка.СуммаДепозита = 0;	
		КонецЕсли;
		
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("ИдентификаторАвтомобиля", Строка.ИдентификаторАвтомобиля);
	СтрокиТарификации = Объект.Тарификация.НайтиСтроки(ОтборСтрок);
	
	Если НЕ СтрокиТарификации.Количество() Тогда
		СтрокаТарификации = Объект.Тарификация.Добавить();
		СтрокаТарификации.Автомобиль              = Строка.Автомобиль;
		СтрокаТарификации.ИдентификаторАвтомобиля = Строка.ИдентификаторАвтомобиля;
		СтрокаТарификации.ДатаНачала              = Объект.ДатаНачала;
		СтрокаТарификации.ДатаОкончания           = Объект.ДатаОкончания;
		СтрокиТарификации.Добавить(СтрокаТарификации);
	Иначе
		СтрокиТарификации[0].ДатаНачала              = Объект.ДатаНачала;
		СтрокиТарификации[0].ДатаОкончания           = Объект.ДатаОкончания;
	КонецЕсли;
	
	Строка.Сумма = 0;
	
	Для Каждого СтрокаТарификации Из СтрокиТарификации Цикл
		
		СтоимостьИспользования = СтоимостьИспользования(
			Объект.ПодразделениеКомпании,
			ДанныеВидаАренды, 
			СтрокаТарификации.Автомобиль, 
			Объект.ВалютаДокумента, 
			Объект.КурсДокумента, 
			СтрокаТарификации.ДатаНачала);
			
		СтруктураПериода = СтруктураПериода(
			ДанныеВидаАренды, 
			СтрокаТарификации.ДатаНачала, 
			СтрокаТарификации.ДатаОкончания);
			
		ЗаполнитьЗначенияСвойств(СтрокаТарификации, СтоимостьИспользования);  
		ЗаполнитьЗначенияСвойств(СтрокаТарификации, СтруктураПериода);
		
		СтрокаТарификации.СуммаВсего = 0;
		
		Для Каждого Период Из МассивПериодов() Цикл
			СтрокаТарификации.СуммаВсего = СтрокаТарификации.СуммаВсего
				+ СтрокаТарификации["Количество" + Период] * СтрокаТарификации["Цена" + Период];
		КонецЦикла;
		
		Строка.Сумма = Строка.Сумма + СтрокаТарификации.СуммаВсего;
		
		Если ДанныеВидаАренды.ДепозитИспользование Тогда
			Строка.СуммаДепозита = СтоимостьИспользования.Депозит;
		Иначе
			Строка.СуммаДепозита = 0;
		КонецЕсли;
		
		Если СтрокаТарификации.Количество > 0 Тогда
			СтрокаТарификации.Цена  = Окр(СтрокаТарификации.СуммаВсего / СтрокаТарификации.Количество,
				2,
				РежимОкругления.Окр15как20);
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Процедура производит расчет цены, суммы, суммы ндс, процента и суммы скидки в зависимости от переданных параметров
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура, ДокументОбъект - Объект, для которого производится расчет.
//  Строка				 - СтрокаТабличнойЧасти - Строка документа, для которой требуется рассчитать суммы.
//  ПараметрыДействия	 - Структура - Дополнительные параметры для расчета.
//  ТочкаВхода			 - Строка - Имя реквизита, изменение которого вызвало пересчет сумм строки.
//
Процедура РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия = Неопределено, ТочкаВхода = "Сумма") Экспорт 
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ДанныеВидаАренды = ДанныеВидаАренды(Объект.ВидАренды, ПараметрыДействия);
	
	Если НЕ ДанныеВидаАренды = Неопределено Тогда
		
		ПроверитьСтавкуНДС(ДанныеВидаАренды, Строка);
		
		ЗначениеСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СтавкаНДС, "Ставка");
		
		ПараметрыДействия.Вставить("ТипЦен", Объект.ТипЦен);
		
		// Пересчет суммы скидки
		Если ТочкаВхода = "ПроцентСкидки" Тогда
			
			Если Строка.ПроцентСкидки > 100 Тогда
				Строка.ПроцентСкидки = 100;
			КонецЕсли;
						
			СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Автомобили", ПараметрыДействия);
			Строка.СуммаСкидки = Окр(СуммаБезСкидок * Строка.ПроцентСкидки / 100, 2);
			
		ИначеЕсли ТочкаВхода = "СуммаСкидки" Тогда
			
			СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Автомобили", ПараметрыДействия);
			Строка.ПроцентСкидки = ?(СуммаБезСкидок = 0, 0, Окр(Строка.СуммаСкидки * 100 / СуммаБезСкидок, 2));
			
		ИначеЕсли ТочкаВхода = "СуммаВсего" Тогда
			
			СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Автомобили", ПараметрыДействия);
			Строка.СуммаСкидки = СуммаБезСкидок - Строка.СуммаВсего;
			Строка.ПроцентСкидки = ?(СуммаБезСкидок = 0, 0, Окр(Строка.СуммаСкидки * 100 / СуммаБезСкидок, 2));
			
		Иначе 
			
			СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Автомобили", ПараметрыДействия);
			Строка.СуммаСкидки = Окр(СуммаБезСкидок * Строка.ПроцентСкидки / 100, 2);
			
		КонецЕсли;
		
		Если Объект.ТипЦен.ЦенаВключаетНДС Тогда
			Строка.СуммаВсего = Строка.Сумма - Строка.СуммаСкидки;
		Иначе 
			Строка.СуммаВсего = Строка.Сумма + Окр(Строка.Сумма * ЗначениеСтавкиНДС / 100, 2) - Строка.СуммаСкидки;
		КонецЕсли;
		
		Строка.СуммаНДС = Строка.СуммаВсего * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит перерасчет стоимости аренды для всех строк табличной части Автомобили переданного документе.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура, ДокументОбъект - Объект, для которого производится расчет.
//  ПараметрыДействия	 - Структура - Дополнительные параметры для расчета.
//
Процедура РассчитатьДокументАренды(Объект, ПараметрыДействия = Неопределено) Экспорт 
	
	АрендаАвтомобилейЗащищенныеФункцииСервер.РассчитатьДокументАренды(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область Интерфейс

// Процедура настраивает видимость и доступны полей в форме документа согласно переданным данным вида аренды.
//
// Параметры:
//  Форма			 - УправляемаяФорма - Форма документа для управление элементами формы.
//  ДанныеВидаАренды - Структура - Структура реквизитов вида аренды.
//
Процедура УправлениеДиалогом(Форма, ДанныеВидаАренды) Экспорт 
	
	АрендаАвтомобилейЗащищенныеФункцииСервер.УправлениеДиалогом(Форма, ДанныеВидаАренды);
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

#КонецОбласти

#Область РаботаСРегистромРасчета

// Процедура формирует движения регистра расчета для переданного документа.
//
// Параметры:
//  Объект	 - ДокументОбъект - Проводящийся по регистру расчета документ.
//  Отказ	 - Булево - Признак отказа от проведения документа.
//
Процедура ПровестиПоРегиструРасчета(Объект, Отказ) Экспорт 
	
	//@skip-check unknown-method-property
	НаборЗаписей = Объект.Движения.АрендаАвтомобилей;
	НаборЗаписей.Записывать = Истина;
	
	ДанныеВидаАренды = ДанныеВидаАренды(Объект.ВидАренды);
	
	ТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
	ЗаполнитьТаблицуДвижений(Объект, ДанныеВидаАренды, ТаблицаДвижений);
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ДоговорАренды") Тогда
		НаборЗаписей.Загрузить(ТаблицаДвижений);
	Иначе
		
		ТекСоглашение = РегистрыСведений.АрендаДействующиеСоглашения.ДействующееСоглашение(
			Объект.ДокументОснование,
			Объект.Дата);
		
		Если ТекСоглашение.ДатаОкончания > Объект.ДатаОкончания Тогда
			РежимИзменения = "Сокращение";
			ДатаИзменения = Объект.ДатаОкончания;
			ПроверитьВозможностьВытеснения(Объект,
				Объект.ВидПериодаДляСокращения,
				Объект.ДатаОкончания,
				ТекСоглашение.ДатаОкончания,
				Отказ);
		ИначеЕсли ТекСоглашение.ДатаОкончания < Объект.ДатаОкончания Тогда
			РежимИзменения = "Продление";
			ДатаИзменения = ТекСоглашение.ДатаОкончания;
			ПроверитьВозможностьВытеснения(Объект,
				Объект.ВидПериодаДляПродления,
				ТекСоглашение.ДатаОкончания,
				Объект.ДатаОкончания,
				Отказ);
		Иначе 
		    РежимИзменения = "ИзменениеЦены";
			ДатаИзменения = ТекСоглашение.ДатаОкончания;
		КонецЕсли;
		
		Если Отказ Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФактическогоПериода = ДанныеФактическогоПериода(Объект.ДокументОснование, Истина);
		
		МассивПериодовРегистрации = ТаблицаДвижений.ВыгрузитьКолонку("ПериодРегистрации");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			МассивПериодовРегистрации,
			ДанныеФактическогоПериода.ВыгрузитьКолонку("ПериодРегистрации"),
			Истина);
		
		МассивПериодовРегистрации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПериодовРегистрации);
		
		МассивАвтомобилей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			Объект.Автомобили.Выгрузить().ВыгрузитьКолонку("Автомобиль"));
		
		МассивОтмены = Новый Массив;
		МассивИспользования = Новый Массив;
		
		ТаблицаДвиженийИзменения = НаборЗаписей.ВыгрузитьКолонки();
		
		СтруктураЗаписи = Новый Структура;
	
		СтруктураЗаписи.Вставить("ДоговорАренды", Объект.ДокументОснование);
		СтруктураЗаписи.Вставить("ГрафикАренды",  ДанныеВидаАренды.ГрафикАренды);
		
		Для Каждого Автомобиль Из МассивАвтомобилей Цикл
			Для Каждого ПериодРегистрации Из МассивПериодовРегистрации Цикл
				
				СтруктураОтбора = Новый Структура("ПериодРегистрации, Автомобиль", ПериодРегистрации, Автомобиль);
				
				СтрокиФакт     = ДанныеФактическогоПериода.НайтиСтроки(СтруктураОтбора);
				СтрокиДвижений = ТаблицаДвижений.НайтиСтроки(СтруктураОтбора);
				
				Если СтрокиФакт.Количество() = 0 Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИспользования, СтрокиДвижений);
					Продолжить;
				КонецЕсли;
				
				Если СтрокиДвижений.Количество() = 0 Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтмены, СтрокиФакт);
					Продолжить;
				КонецЕсли;
				
				СтруктураЗаписи.Вставить("Автомобиль", Автомобиль);
				
				Если ПериодРегистрации < НачалоМесяца(ДатаИзменения)
					ИЛИ ПериодРегистрации = НачалоМесяца(ДатаИзменения) И РежимИзменения = "ИзменениеЦены" Тогда
					
					ПровестиИзменениеСтоимости(Объект, ТаблицаДвиженийИзменения, СтрокиФакт, СтрокиДвижений);
					
				ИначеЕсли ПериодРегистрации = НачалоМесяца(ДатаИзменения) И РежимИзменения = "Сокращение" Тогда
					
					СтруктураЗаписи.Вставить("ВидРасчета", Объект.ВидПериодаДляСокращения);
					СтруктураЗаписи.Вставить("ДатаНачала",    ДатаИзменения);
					СтруктураЗаписи.Вставить("ДатаОкончания", СтрокиФакт[0].ПериодДействияКонец);
					СтруктураЗаписи.Вставить("Количество",    СтрокиДвижений[0].Количество  - СтрокиФакт[0].Количество);
					СтруктураЗаписи.Вставить("Сумма",         СтрокиДвижений[0].Сумма       - СтрокиФакт[0].Сумма);
					СтруктураЗаписи.Вставить("СуммаНДС",      СтрокиДвижений[0].СуммаНДС    - СтрокиФакт[0].СуммаНДС);
					СтруктураЗаписи.Вставить("СуммаУпр",      СтрокиДвижений[0].СуммаУпр    - СтрокиФакт[0].СуммаУпр);
					СтруктураЗаписи.Вставить("СуммаНДСУпр",   СтрокиДвижений[0].СуммаНДСУпр - СтрокиФакт[0].СуммаНДСУпр);
					
					ДобавитьЗапись(
						ТаблицаДвиженийИзменения, 
						Объект, 
						СтруктураЗаписи);
						
				ИначеЕсли ПериодРегистрации = НачалоМесяца(ДатаИзменения) И РежимИзменения = "Продление" Тогда
					
					СтруктураЗаписи.Вставить("ВидРасчета", Объект.ВидПериодаДляПродления);
					СтруктураЗаписи.Вставить("ДатаНачала",    ДатаИзменения);
					СтруктураЗаписи.Вставить("ДатаОкончания", СтрокиДвижений[0].ПериодДействияКонец);
					СтруктураЗаписи.Вставить("Количество",    СтрокиДвижений[0].Количество  - СтрокиФакт[0].Количество);
					СтруктураЗаписи.Вставить("Сумма",         СтрокиДвижений[0].Сумма       - СтрокиФакт[0].Сумма);
					СтруктураЗаписи.Вставить("СуммаНДС",      СтрокиДвижений[0].СуммаНДС    - СтрокиФакт[0].СуммаНДС);
					СтруктураЗаписи.Вставить("СуммаУпр",      СтрокиДвижений[0].СуммаУпр    - СтрокиФакт[0].СуммаУпр);
					СтруктураЗаписи.Вставить("СуммаНДСУпр",   СтрокиДвижений[0].СуммаНДСУпр - СтрокиФакт[0].СуммаНДСУпр);
				
					ДобавитьЗапись(
						ТаблицаДвиженийИзменения, 
						Объект, 
						СтруктураЗаписи);
						
				КонецЕсли;
								
			КонецЦикла;
		КонецЦикла;
				
		Для Каждого СтрокаДвижения Из МассивОтмены Цикл
			НоваяСтрока = ТаблицаДвиженийИзменения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.ВидРасчета = Объект.ВидПериодаДляСокращения;
			НоваяСтрока.Количество = 0;
			НоваяСтрока.Активность = Истина;
		КонецЦикла;
		                                                                          
		Для Каждого СтрокаДвижения Из МассивИспользования Цикл
			НоваяСтрока = ТаблицаДвиженийИзменения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.ВидРасчета = Объект.ВидПериодаДляПродления;
			НоваяСтрока.Активность = Истина;
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаДвиженийИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументов

// Функция производит заполнение документа Счет на оплату согласно переданным параметрам
//
// Параметры:
//  Объект				 - ДокументОбъект.СчетНаОплату - Заполняемый документ
//  ДанныеЗаполнения	 - Структура - Содержит ссылку на договор аренды, период выставления счета
//  								   и признаки "Аренда" и "ДопУслуги".
//  ТекстЗаполнения		 - Строка - Дополнительная информация в текстовом виде
//  СтандартнаяОбработка - Булево - Признак стандартной обработки ввода на основании
// 
// Возвращаемое значение:
//  Булево - признак успешной обработки заполнения
//
Функция ЗаполнитьСчетНаОплату(Объект, ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДоговорАренды = ДанныеЗаполнения.Основание;
	Иначе
		ДоговорАренды = ДанныеЗаполнения;
	КонецЕсли;
	
	ЕстьАренда    = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Аренда",    Истина);
	ЕстьДопУслуги = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ДопУслуги", Истина);
	
	Объект.ХозОперация = Справочники.ХозОперации.СчетНаОплату;
	
	ДанныеСоглашения = РегистрыСведений.АрендаДействующиеСоглашения.ДействующееСоглашение(ДоговорАренды);
	
	ДатаНачала    = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ДатаНачала", ДанныеСоглашения.ДатаНачала);
	ДатаОкончания = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ДатаОкончания", ДанныеСоглашения.ДатаОкончания);
	
	ДанныеДоговораАренды = ПолучитьДанныеЗаполнения(ДоговорАренды, ДанныеСоглашения.ДействующееСоглашение);
	ДанныеШапки = ДанныеДоговораАренды[0].Выбрать();
	ДанныеШапки.Следующий();
	
	ДанныеВидаАренды = ДанныеВидаАренды(ДанныеШапки.ВидАренды);
	
	Если ДанныеШапки.Проведен Тогда
		ДанныеПериода = ДанныеПериода(ДоговорАренды, ДатаНачала, ДатаОкончания);
	Иначе
		ДанныеПериода = ДанныеДоговораАренды[2].Выгрузить();
	КонецЕсли;
	
	Шаблон = СтрШаблон(
		НСТР("ru = '%1 за автомобиль %2'"),
		ДанныеВидаАренды.УслугаДляВыставленияСчетовНаименование,
		НСТР("ru = '%1 с %2 по %3'"));
	
	Объект.Товары.Очистить();
	
	Если ЕстьАренда Тогда
		Для Каждого СтрокаПериода Из ДанныеПериода Цикл
			
			Если НЕ ЗначениеЗаполнено(ДанныеВидаАренды.УслугаДляВыставленияСчетов) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = ДанныеВидаАренды.УслугаДляВыставленияСчетов;
			Документы.СчетНаОплату.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
			НоваяСтрока.Количество = 1;
			НоваяСтрока.СуммаВсего = СтрокаПериода.СуммаВсего;
			Документы.СчетНаОплату.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока);
			НоваяСтрока.Автомобиль = СтрокаПериода.Автомобиль;
			НоваяСтрока.Комментарий = СтрШаблон(Шаблон, СтрокаПериода.МодельНаименование,
				Формат(СтрокаПериода.ДатаНачала, "ДЛФ=D"), Формат(СтрокаПериода.ДатаОкончания, "ДЛФ=D"));
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьДопУслуги Тогда
		ВыборкаУслуги = ДанныеДоговораАренды[1].Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаУслуги);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция производит заполнение документа Счет на оплату суммой депозита по договору аренды
//
// Параметры:
//  Объект				 - ДокументОбъект.СчетНаОплату - Заполняемый документ 
//  ДанныеЗаполнения	 - Структура - Содержит ссылку на договор аренды
//  ТекстЗаполнения		 - Строка - Дополнительная информация в текстовом виде
//  СтандартнаяОбработка - Булево - Признак стандартной обработки ввода на основании
// 
// Возвращаемое значение:
//  Булево - признак успешной обработки заполнения
//
Функция ЗаполнитьСчетНаОплатуДепозита(
	Объект,
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДоговорАренды = ДанныеЗаполнения.Основание;
	Иначе
		ДоговорАренды = ДанныеЗаполнения;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорАренды.Контрагент КАК Контрагент,
	|	ДоговорАренды.ДоговорДепозита КАК ДоговорВзаиморасчетов,
	|	ДоговорАренды.Ссылка КАК ДокументОснование,
	|	ДоговорАренды.ВидАренды КАК ВидАренды,
	|	ДоговорАренды.СуммаДепозита КАК СуммаДепозита,
	|	ПРЕДСТАВЛЕНИЕ(ДоговорАренды.ВидАренды) КАК ВидАрендыПредставление,
	|	ДоговорАренды.Организация КАК Организация,
	|	ДоговорАренды.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДоговорАренды.Заказчик КАК Заказчик
	|ИЗ
	|	Документ.ДоговорАренды КАК ДоговорАренды
	|ГДЕ
	|	ДоговорАренды.Ссылка = &ДоговорАренды";
	Запрос.УстановитьПараметр("ДоговорАренды", ДоговорАренды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
		ДанныеВидаАренды = ДанныеВидаАренды(Выборка.ВидАренды);
		
		Если ДанныеВидаАренды.ДепозитИспользование Тогда
			
			Если ДанныеВидаАренды.ТипАренды = Перечисления.ТипыРемонта.Бесплатный Тогда
				Объект.Контрагент = Выборка.Заказчик;	
			КонецЕсли;
			
			Документы.СчетНаОплату.ПодразделениеКомпанииПриИзменении(Объект);
			Документы.СчетНаОплату.ДоговорВзаиморасчетовПриИзменении(Объект);

			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = ДанныеВидаАренды.ДепозитУслуга;
			Документы.СчетНаОплату.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			НоваяСтрока.СуммаВсего = Выборка.СуммаДепозита;
			Документы.СчетНаОплату.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока);
			
		Иначе 
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(Объект, 
				СтрШаблон(
					НСТР("ru = 'Для вида аренды ""%1"" не предусмотрено взятие депозита у клиента.'"),
					Выборка.ВидАрендыПредставление));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция производит заполнение документа Реализация товаров согласно переданным параметрам
//
// Параметры:
//  Объект				 - ДокументОбъект.РеализацияТоваров - Заполняемый документ
//  ДанныеЗаполнения	 - Структура - Содержит ссылку на договор аренды, период выставления счета
//  								   и признаки "Аренда" и "ДопУслуги"
//  ТекстЗаполнения		 - Строка - Дополнительная информация в текстовом виде
//  СтандартнаяОбработка - Булево - Признак стандартной обработки ввода на основании
// 
// Возвращаемое значение:
//  Булево - признак успешной обработки заполнения
//
Функция ЗаполнитьРеализацияТоваров(Объект,
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДоговорАренды = ДанныеЗаполнения.Основание;
	Иначе
		ДоговорАренды = ДанныеЗаполнения;
	КонецЕсли;
	
	ЕстьАренда    = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Аренда",    Истина);
	ЕстьДопУслуги = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ДопУслуги", Истина);
	
	Объект.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг;
	
	ДанныеСоглашения = РегистрыСведений.АрендаДействующиеСоглашения.ДействующееСоглашение(ДоговорАренды);
	
	ДатаНачала    = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ДатаНачала", ДанныеСоглашения.ДатаНачала);
	ДатаОкончания = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ДатаОкончания", ДанныеСоглашения.ДатаОкончания);
	
	ДанныеДоговораАренды = ПолучитьДанныеЗаполнения(ДоговорАренды, ДанныеСоглашения.ДействующееСоглашение);
	
	ДанныеШапки = ДанныеДоговораАренды[0].Выбрать();
	ДанныеШапки.Следующий();
	
	ДанныеВидаАренды = ДанныеВидаАренды(ДанныеШапки.ВидАренды);
	
	ДанныеПериода = ДанныеПериода(ДоговорАренды, ДатаНачала, ДатаОкончания);
	
	Шаблон = СтрШаблон(
		НСТР("ru = '%1 за автомобиль %2'"),
		ДанныеВидаАренды.УслугаДляВыставленияАктовНаименование,
		НСТР("ru = '%1 с %2 по %3'"));
	
	Объект.Товары.Очистить();
	
	Если ЕстьАренда Тогда
		Для Каждого СтрокаПериода Из ДанныеПериода Цикл
			
			Если НЕ ЗначениеЗаполнено(ДанныеВидаАренды.УслугаДляВыставленияСчетов) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = ДанныеВидаАренды.УслугаДляВыставленияАктов;
			Документы.СчетНаОплату.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
			НоваяСтрока.Количество = 1;
			НоваяСтрока.СуммаВсего = СтрокаПериода.СуммаВсего;
			Документы.СчетНаОплату.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока);
			НоваяСтрока.Автомобиль = СтрокаПериода.Автомобиль;
			НоваяСтрока.Комментарий = СтрШаблон(Шаблон, СтрокаПериода.МодельНаименование, 
				Формат(СтрокаПериода.ДатаНачала, "ДЛФ=D"), Формат(СтрокаПериода.ДатаОкончания, "ДЛФ=D"));
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьДопУслуги Тогда
		ВыборкаУслуги = ДанныеДоговораАренды[1].Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаУслуги);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция производит заполнение документа Дефектовочная ведомость согласно переданным параметрам
//
// Параметры:
//  Объект				 - ДокументОбъект.ДефектовочнаяВедомость - Заполняемый документ
//  ДанныеЗаполнения	 - Структура - Содержит ссылку на договор аренды и признак "Выдача",
//  								   влияющий на хоз. операцию документа
//  ТекстЗаполнения		 - Строка - Дополнительная информация в текстовом виде
//  СтандартнаяОбработка - Булево - Признак стандартной обработки ввода на основании
// 
// Возвращаемое значение:
//  Булево - признак успешной обработки заполнения
//
Функция ЗаполнитьДефектовочнаяВедомость(
	Объект,
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
		
	ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Выдача", Ложь) Тогда
		Объект.ХозОперация = Справочники.ХозОперации.ВыдачаВАренду;
	Иначе
		Объект.ХозОперация = Справочники.ХозОперации.ПриемкаИзАренды;
	КонецЕсли;
	
	Объект.ДатаОсмотра = ТекущаяДатаСеанса();
	
	Документы.ДефектовочнаяВедомость.КонтрагентПриИзменении(Объект);
	Документы.ДефектовочнаяВедомость.ЗаполнитьКонтрольныеВопросы(Объект);
	
	Возврат Истина;
	
КонецФункции

// Функция производит заполнение документа Чек на оплату согласно переданным параметрам
//
// Параметры:
//  Объект				 - ДокументОбъект.ЧекНаОплату - Заполняемый документ
//  ДанныеЗаполнения	 - ДокументСсылка.СчетНаОплату - Содержит ссылку на счет по которому вводится чек на оплату
//  ТекстЗаполнения		 - Строка - Дополнительная информация в текстовом виде
//  СтандартнаяОбработка - Булево - Признак стандартной обработки ввода на основании
// 
// Возвращаемое значение:
//  Булево - признак успешной обработки заполнения
//
Функция ЗаполнитьЧекНаОплату(Объект,
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетНаОплатуТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.Коэффициент КАК Коэффициент,
	|	СчетНаОплатуТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(СчетНаОплатуТовары.СуммаВсего) КАК СуммаВсего,
	|	СУММА(СчетНаОплатуТовары.СуммаСкидки) КАК СуммаСкидки,
	|	СчетНаОплатуТовары.СкидкаНаТовар КАК СкидкаНаТовар,
	|	СУММА(СчетНаОплатуТовары.СуммаСкидкиСтроки) КАК СуммаСкидкиСтроки,
	|	МАКСИМУМ(СчетНаОплатуТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.СчетНаОплату.Товары КАК СчетНаОплатуТовары
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.СкидкаНаТовар,
	|	СчетНаОплатуТовары.Коэффициент";
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(Объект, СтрокаТоваров);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВыдачаПриемкаАвтомобиля

// Процедура используется для обработки команды Выдать автомобиль в форме договора аренды.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого нужно выдать автомобиль.
//  Автомобиль			 - СправочникСсылка.Автомобили - Ссылка на выдаваемый автомобиль.
//  ПараметрыДействия	 - Структура - Дополнительные параметры, если в виде аренды прописан шаблон выдачи,
//									   то в структуре будут возвращены данные для ввода дефектовочной ведомости.
//
Процедура ВыдатьАвтомобиль(Объект, Автомобиль, ПараметрыДействия) Экспорт 
	
	ДанныеВидаАренды = ДанныеВидаАренды(Объект.ВидАренды);
	
	Если ДанныеВидаАренды.ВыдачаПриемкаКонтролировать Тогда
		
		Если ДанныеВидаАренды.ВыдачаАнкета.Пустая() Тогда
			
			РегистрыСведений.АрендаСостоянияАвтомобилей.ЗаписатьСостояние(Объект, Автомобиль, 
				Перечисления.АрендаСостоянияАвтомобилей.ВыданКлиенту);
			
		Иначе 
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Выдача", Истина);
			ДанныеЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
			ДанныеЗаполнения.Вставить("Автомобиль", Автомобиль);
			ДанныеЗаполнения.Вставить("Контрагент", Объект.Заказчик);
			ДанныеЗаполнения.Вставить("ШаблонВопросов", ДанныеВидаАренды.ВыдачаАнкета);
			
			ПараметрыДействия.Вставить("ПараметрыФормы", Новый Структура("Основание", ДанныеЗаполнения));
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Вид аренды ""%1"" не использует отметку выдачи автомобиля'"), ДанныеВидаАренды.Наименование)
		);
	КонецЕсли;
	
КонецПроцедуры

// Процедура используется для обработки команды Принять автомобиль в форме договора аренды.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура - Объект, для которого нужно принять автомобиль.
//  Автомобиль			 - СправочникСсылка.Автомобили - Ссылка на принимаемый автомобиль.
//  ПараметрыДействия	 - Структура - Дополнительные параметры, если в виде аренды прописан шаблон приемки,
//									   то в структуре будут возвращены данные для ввода дефектовочной ведомости.
//
Процедура ПринятьАвтомобиль(Объект, Автомобиль, ПараметрыДействия) Экспорт 
	
	ДанныеВидаАренды = ДанныеВидаАренды(Объект.ВидАренды);
	
	Если ДанныеВидаАренды.ВыдачаПриемкаКонтролировать Тогда
		
		Если ДанныеВидаАренды.ПриемкаАнкета.Пустая() Тогда
			
			РегистрыСведений.АрендаСостоянияАвтомобилей.ЗаписатьСостояние(Объект, Автомобиль, 
				Перечисления.АрендаСостоянияАвтомобилей.ПолученОтКлиента);
						
		Иначе 
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Приемка", Истина);
			ДанныеЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
			ДанныеЗаполнения.Вставить("Автомобиль", Автомобиль);
			ДанныеЗаполнения.Вставить("Контрагент", Объект.Заказчик);
			ДанныеЗаполнения.Вставить("ШаблонВопросов", ДанныеВидаАренды.ПриемкаАнкета);
			
			ПараметрыДействия.Вставить("ПараметрыФормы", Новый Структура("Основание", ДанныеЗаполнения));
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Вид аренды ""%1"" не использует отметку выдачи автомобиля'"), ДанныеВидаАренды.Наименование)
		);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МестаВыдачиПриемкаАвтомобиля

// Процедура обрабатывает событие изменения вида места приемки или выдачи в формах документов
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура - Объект в котором возникло событие изменения вида места приемки или выдачи
//  ПараметрыДействия	 - Структура - Дополнительные параметры 
//  ИмяРеквизита		 - Строка - Возможные варианты: "МестоВыдачи" или "МестоПриемки"
//
Процедура МестоПриемкиВыдачиВидПриИзменении(Объект, ПараметрыДействия, ИмяРеквизита = "МестоВыдачи") Экспорт 
	
	Вид = Объект[ИмяРеквизита + "Вид"];
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ДоговорАренды") Тогда
		Заказчик = Объект.Заказчик;
	Иначе
		Заказчик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Заказчик");
	КонецЕсли;
	
	Если Вид = Перечисления.АрендаВидыМестПриемкиИВыдачи.ПодразделениеКомпании Тогда
		Объект[ИмяРеквизита] = Объект.ПодразделениеКомпании;
	ИначеЕсли Вид = Перечисления.АрендаВидыМестПриемкиИВыдачи.АдресКонтрагента Тогда 
		Объект[ИмяРеквизита] = Заказчик;		
	Иначе 
		Объект[ИмяРеквизита] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает событие изменения места приемки или выдачи в формах документов.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура - Объект в котором возникло событие изменения места приемки или выдачи.
//  ПараметрыДействия	 - Структура - Дополнительные параметры.
//  ИмяРеквизита		 - Строка - Возможные варианты: "МестоВыдачи" или "МестоПриемки".
//
Процедура МестоПриемкиВыдачиПриИзменении(Объект, ПараметрыДействия, ИмяРеквизита = "МестоВыдачи") Экспорт 
	
	Вид = Объект[ИмяРеквизита + "Вид"];
	
	Если Вид = Перечисления.АрендаВидыМестПриемкиИВыдачи.ПодразделениеКомпании Тогда
		Объект[ИмяРеквизита + "Адрес"] = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Объект[ИмяРеквизита], Справочники.ВидыКонтактнойИнформации.ФактАдресПодразделенияКомпании, ТекущаяДатаСеанса());
	ИначеЕсли Вид = Перечисления.АрендаВидыМестПриемкиИВыдачи.АдресКонтрагента Тогда 
		Объект[ИмяРеквизита + "Адрес"] = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Объект[ИмяРеквизита], Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
	Иначе 
		Объект[ИмяРеквизита + "Адрес"] = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура настраивает доступность полей выдачи или приемки в формах документов в зависимости 
// от вида места приемки или выдачи.
//
// Параметры:
//  ФормаДокумента	 - УправляемаяФорма - Форма документа для настройки доступности элементов выдачи или приемки
//  ИмяРеквизита 	 - Строка - Возможные варианты: "МестоВыдачи" или "МестоПриемки"
//
Процедура МестоПриемкиВыдачиУправлениеДиалогом(ФормаДокумента, ИмяРеквизита = "МестоВыдачи") Экспорт 
	
	АрендаАвтомобилейЗащищенныеФункцииСервер.МестоПриемкиВыдачиУправлениеДиалогом(ФормаДокумента, ИмяРеквизита);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеАктивы

// Процедура проверяет остатки активов в эксплуатации на дату начала и окончания периода по массиву автомобилей.
// Если автомобиля нет на начало или окончание периода аренды, то устанавливается признак Отказ
//
// Параметры:
//  МассивАвтомобилей	 - Массив - Массив автомобилей для проверки
//  ДатаНачала			 - Дата - Начало периода проверки
//  ДатаОкончания		 - Дата - Окончание периода проверки
//  Отказ				 - Булево - Признак отказа от проведения документа
//
Процедура ПроверитьАвтомобилиВЭксплуатации(МассивАвтомобилей, ДатаНачала, ДатаОкончания, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Автомобили.Ссылка КАК Автомобиль
	|ПОМЕСТИТЬ вт_Автомобили
	|ИЗ
	|	Справочник.Автомобили КАК Автомобили
	|ГДЕ
	|	Автомобили.Ссылка В(&МассивАвтомобилей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Автомобили.Автомобиль КАК Автомобиль,
	|	ЕСТЬNULL(МАКСИМУМ(АвтомобилиДляТестДрайваОстаткиИОбороты.Актив.ДатаВыбытия), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыбытия,
	|	ЕСТЬNULL(СУММА(АвтомобилиДляТестДрайваОстаткиИОбороты.КоличествоНачальныйОстаток), 0) КАК НачальныйОстаток,
	|	ЕСТЬNULL(СУММА(АвтомобилиДляТестДрайваОстаткиИОбороты.КоличествоКонечныйОстаток), 0) КАК КонечныйОстаток,
	|	ПРЕДСТАВЛЕНИЕ(вт_Автомобили.Автомобиль) КАК АвтомобильПредставление
	|ИЗ
	|	вт_Автомобили КАК вт_Автомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АвтомобилиДляТестДрайва.ОстаткиИОбороты(
	|				&ДатаНачала,
	|				&ДатаОкончания,
	|				,
	|				,
	|				Автомобиль В
	|					(ВЫБРАТЬ
	|						вт_Автомобили.Автомобиль КАК Автомобиль
	|					ИЗ
	|						вт_Автомобили КАК вт_Автомобили)) КАК АвтомобилиДляТестДрайваОстаткиИОбороты
	|		ПО вт_Автомобили.Автомобиль = АвтомобилиДляТестДрайваОстаткиИОбороты.Автомобиль
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_Автомобили.Автомобиль";
	
	Запрос.УстановитьПараметр("МассивАвтомобилей", МассивАвтомобилей);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НачальныйОстаток = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Автомобиль %1 отсутствует в эксплуатации на дату начала %2'"),
					Выборка.АвтомобильПредставление,
					Формат(ДатаНачала, "ДЛФ=DD")
				),
				,,,Отказ
			);
		КонецЕсли;
		
		Если Выборка.КонечныйОстаток = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Автомобиль %1 отсутствует в эксплуатации на дату окончания %2'"),
					Выборка.АвтомобильПредставление,
					Формат(ДатаОкончания, "ДЛФ=DD")
				),
				,,, Отказ
			);
		ИначеЕсли Выборка.ДатаВыбытия <> '00010101'  И НачалоДня(Выборка.ДатаВыбытия) < НачалоДня(ДатаОкончания) Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Автомобиль %1 планируется вывести из эксплуатации  %2 до даты окончания %3'"), 
					Выборка.АвтомобильПредставление, 
					Формат(Выборка.ДатаВыбытия, "ДЛФ=DD"),
					Формат(ДатаОкончания, "ДЛФ=DD")
				)
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ПланировщикАренды

// Функция получает таблицу автомобилей в эксплуатации в переданном периоде и подразделении
//
// Параметры:
//  ПодразделениеКомпании	 - СправочникСсылка.ПодразделенияКомпании - Подразделение для отбора автомобилей
//  																	в эксплуатации
//  ДатаНачала				 - Дата - Начало периода
//  ДатаОкончания			 - Дата - Окончание периода
//  Параметры				 - Структура - Дополнительные параметры для передачи отборов автомобилей в эксплуатации
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица автомобилей с колонками Автомобиль, Актив, ВидАренды, ДатаНачала, ДатаОкончания
//
Функция ТаблицаАвтомобилейПериода(ПодразделениеКомпании, ДатаНачала, ДатаОкончания, Параметры = Неопределено) Экспорт 
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.Период КАК Период,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.Модель КАК Модель,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.Автомобиль КАК Автомобиль,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.Актив КАК Актив,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.ВидАренды КАК ВидАренды,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.КоличествоНачальныйОстаток КАК НачальныйОстаток,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.КоличествоПриход КАК Приход,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.КоличествоРасход КАК Расход,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.КоличествоКонечныйОстаток КАК КонечныйОстаток,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.Период КАК ПериодМинимальный,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.Период КАК ПериодМаксимальный,
		|	АвтомобилиДляТестДрайваОстаткиИОбороты.Актив.ДатаВыбытия КАК АктивДатаВыбытия
		|ИЗ
		|	РегистрНакопления.АвтомобилиДляТестДрайва.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, День, , ) КАК АвтомобилиДляТестДрайваОстаткиИОбороты
		|ГДЕ
		|	НЕ АвтомобилиДляТестДрайваОстаткиИОбороты.ВидАренды = ЗНАЧЕНИЕ(Справочник.ВидыАренды.ПустаяСсылка)
		|ИТОГИ
		|	МИНИМУМ(ПериодМинимальный),
		|	МАКСИМУМ(ПериодМаксимальный),
		|	МАКСИМУМ(АктивДатаВыбытия)
		|ПО
		|	Автомобиль");
	
	ЗапросВыбораСхемыЗапроса = СхемаЗапроса.ПакетЗапросов.Получить(0);
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		ЗапросВыбораСхемыЗапроса.Операторы.Получить(0).Отбор.Добавить("ПодразделениеКомпании = &ПодразделениеКомпании");
		Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	КонецЕсли;
	
	Если Параметры.Свойство("Документ") И (ТипЗнч(Параметры.Документ) <> Тип("ДокументСсылка.ТестДрайв") И Параметры.Документ <> Неопределено)
		ИЛИ (Параметры.Свойство("ЕстьПодсистемаCRM") И Параметры.ЕстьПодсистемаCRM 
		И Параметры.Свойство("ЕстьПодсистемаАрендаАвтомобилей") И НЕ Параметры.ЕстьПодсистемаАрендаАвтомобилей) Тогда         
			ЗапросВыбораСхемыЗапроса.Операторы.Получить(0).Отбор.Добавить("ВидАренды <> ЗНАЧЕНИЕ(Справочник.ВидыАренды.ПустаяСсылка)");
	КонецЕсли;	
	
	Если Параметры.Свойство("ВидАренды") И ЗначениеЗаполнено(Параметры.ВидАренды) Тогда
		ЗапросВыбораСхемыЗапроса.Операторы.Получить(0).Отбор.Добавить("ВидАренды = &ВидАренды");
		Запрос.УстановитьПараметр("ВидАренды", Параметры.ВидАренды);
	КонецЕсли;
	
	Если Параметры.Свойство("Марка") И ЗначениеЗаполнено(Параметры.Марка) Тогда
		ЗапросВыбораСхемыЗапроса.Операторы.Получить(0).Отбор.Добавить("Автомобиль.Марка = &Марка");
		Запрос.УстановитьПараметр("Марка", Параметры.Марка);
	КонецЕсли;
	
	Если Параметры.Свойство("Модель") И ЗначениеЗаполнено(Параметры.Модель) Тогда
		ЗапросВыбораСхемыЗапроса.Операторы.Получить(0).Отбор.Добавить("Автомобиль.Модель = &Модель");
		Запрос.УстановитьПараметр("Модель", Параметры.Модель);
	КонецЕсли;
	
	Если Параметры.Свойство("ВариантКомплектации") И ЗначениеЗаполнено(Параметры.ВариантКомплектации) Тогда
		ЗапросВыбораСхемыЗапроса.
			Операторы.Получить(0).Отбор.Добавить("Автомобиль.ВариантКомплектации = &ВариантКомплектации");
		Запрос.УстановитьПараметр("ВариантКомплектации", Параметры.ВариантКомплектации);
	КонецЕсли;
	
	Если Параметры.Свойство("ТипДвигателя") И ЗначениеЗаполнено(Параметры.ТипДвигателя) Тогда
		ЗапросВыбораСхемыЗапроса.
			Операторы.Получить(0).Отбор.Добавить("Автомобиль.ВариантКомплектации.ТипДвигателя = &ТипДвигателя");
		Запрос.УстановитьПараметр("ТипДвигателя", Параметры.ТипДвигателя);
	КонецЕсли;
	
	Если Параметры.Свойство("ТипКузова") И ЗначениеЗаполнено(Параметры.ТипКузова) Тогда
		ЗапросВыбораСхемыЗапроса.
			Операторы.Получить(0).Отбор.Добавить("Автомобиль.ВариантКомплектации.ТипКузова = &ТипКузова");
		Запрос.УстановитьПараметр("ТипКузова", Параметры.ТипКузова);
	КонецЕсли;
	
	Если Параметры.Свойство("ТипКПП") И ЗначениеЗаполнено(Параметры.ТипКПП) Тогда
		ЗапросВыбораСхемыЗапроса.Операторы.Получить(0).Отбор.Добавить("Автомобиль.ВариантКомплектации.ТипКПП = &ТипКПП");
		Запрос.УстановитьПараметр("ТипКПП", Параметры.ТипКПП);
	КонецЕсли;
	
	Если Параметры.Свойство("ТипПривода") И ЗначениеЗаполнено(Параметры.ТипПривода) Тогда
		ЗапросВыбораСхемыЗапроса.
			Операторы.Получить(0).Отбор.Добавить("Автомобиль.ВариантКомплектации.ТипПривода = &ТипПривода");
		Запрос.УстановитьПараметр("ТипПривода", Параметры.ТипПривода);
	КонецЕсли;
	
	Если Параметры.Свойство("ТипСалона") И ЗначениеЗаполнено(Параметры.ТипСалона) Тогда
		ЗапросВыбораСхемыЗапроса.Операторы.Получить(0).Отбор.Добавить("Автомобиль.ТипСалона = &ТипСалона");
		Запрос.УстановитьПараметр("ТипСалона", Параметры.ТипСалона);
	КонецЕсли;
	
	Если Параметры.Свойство("Цвет") И ЗначениеЗаполнено(Параметры.Цвет) Тогда
		ЗапросВыбораСхемыЗапроса.Операторы.Получить(0).Отбор.Добавить("Автомобиль.Цвет = &Цвет");
		Запрос.УстановитьПараметр("Цвет", Параметры.Цвет);
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Автомобиль");
	ТаблицаДанных.Колонки.Добавить("Актив");
	ТаблицаДанных.Колонки.Добавить("ВидАренды");
	ТаблицаДанных.Колонки.Добавить("ДатаНачала");
	ТаблицаДанных.Колонки.Добавить("ДатаОкончания");
	
	ВыборкаАвтомобилей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаАвтомобилей.Следующий() Цикл
		
		Если НЕ ВыборкаАвтомобилей.АктивДатаВыбытия = Дата(1, 1, 1) Тогда 	
			
			Если ВыборкаАвтомобилей.ПериодМинимальный > Мин(ВыборкаАвтомобилей.ПериодМаксимальный,
				ВыборкаАвтомобилей.АктивДатаВыбытия) Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если ВыборкаАвтомобилей.ПериодМинимальный > ВыборкаАвтомобилей.ПериодМаксимальный Тогда
				Продолжить;
			КонецЕсли;	
			
		КонецЕсли;
		
		ТекСтрока = ТаблицаДанных.Добавить();
		ТекСтрока.Автомобиль = ВыборкаАвтомобилей.Автомобиль;
		ТекСтрока.ДатаНачала = ВыборкаАвтомобилей.ПериодМинимальный;
		
		Выборка = ВыборкаАвтомобилей.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекСтрока.ВидАренды = Выборка.ВидАренды;
			ТекСтрока.Актив     = Выборка.Актив;
			Если Выборка.Приход И Выборка.Период <> ВыборкаАвтомобилей.ПериодМинимальный Тогда
				ТекСтрока = ТаблицаДанных.Добавить();
				ТекСтрока.Автомобиль = ВыборкаАвтомобилей.Автомобиль;
				ТекСтрока.ДатаНачала = Выборка.Период;
			ИначеЕсли Выборка.Расход И Выборка.Период <> ВыборкаАвтомобилей.ПериодМаксимальный Тогда
				ТекСтрока.ДатаОкончания = Выборка.Период;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВыборкаАвтомобилей.АктивДатаВыбытия = Дата(1, 1, 1) Тогда 
			ТекСтрока.ДатаОкончания = Мин(ВыборкаАвтомобилей.ПериодМаксимальный, ВыборкаАвтомобилей.АктивДатаВыбытия);
		Иначе
			ТекСтрока.ДатаОкончания = ВыборкаАвтомобилей.ПериодМаксимальный;	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Функция возвращает таблицу документов аренды за переданный интервал.
// Документы - Заявка на аренду, Договор аренды, Заявка на ремонт, Заказ-наряд.
//
// Параметры:
//  МассивАвтомобилей	 - Массив - Массив для фильтрации данных по заявкам на аренду,
//  								договорам аренды и документов ремонта.
//  ДатаНачала			 - Дата - Начало периода.
//  ДатаОкончания		 - Дата - Окончание периода.
//  Параметры			 - Структура - Дополнительные параметры, если содержит ключ ТолькоДоговоры со значением Истина,
//  								   то возвращаются только данные договоров аренды.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица интервалов аренды с колонками Автомобиль, Документ, Представление,
//  				  ДатаНачала, ДатаОкончания, ВидДокумента, ВидРасчета.
//
Функция ТаблицаИнтерваловАренды(МассивАвтомобилей, ДатаНачала, ДатаОкончания, Параметры = Неопределено) Экспорт 
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТолькоДоговоры", Ложь) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА АрендаАвтомобилейФактическийПериодДействия.ПериодДействияНачало >= &ДатаНачала
		|			ТОГДА АрендаАвтомобилейФактическийПериодДействия.ПериодДействияНачало
		|		ИНАЧЕ &ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА АрендаАвтомобилейФактическийПериодДействия.ПериодДействияКонец <= &ДатаОкончания
		|			ТОГДА АрендаАвтомобилейФактическийПериодДействия.ПериодДействияКонец
		|		ИНАЧЕ &ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	АрендаАвтомобилейФактическийПериодДействия.ДоговорАренды КАК Документ,
		|	АрендаАвтомобилейФактическийПериодДействия.Автомобиль КАК Автомобиль,
		|	ПРЕДСТАВЛЕНИЕ(АрендаАвтомобилейФактическийПериодДействия.ДоговорАренды) КАК Представление,
		|	""ДоговорАренды"" КАК ВидДокумента,
		|	АрендаАвтомобилейФактическийПериодДействия.ВидРасчета КАК ВидРасчета
		|ИЗ
		|	РегистрРасчета.АрендаАвтомобилей.ФактическийПериодДействия(Автомобиль В (&МассивАвтомобилей)) КАК АрендаАвтомобилейФактическийПериодДействия
		|ГДЕ
		|	АрендаАвтомобилейФактическийПериодДействия.ПериодДействияНачало <= &ДатаОкончания
		|	И АрендаАвтомобилейФактическийПериодДействия.ПериодДействияКонец >= &ДатаНачала
		|	И АрендаАвтомобилейФактическийПериодДействия.ВидРасчета.Аренда
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкаНаАренду.Ссылка КАК Ссылка,
		|	ЗаявкаНаАренду.ДатаНачала КАК ДатаНачала,
		|	ЗаявкаНаАренду.ДатаОкончания КАК ДатаОкончания,
		|	ЗаявкаНаАренду.ВидАренды КАК ВидАренды
		|ПОМЕСТИТЬ вт_ЗаявкиНаАренду
		|ИЗ
		|	Документ.ЗаявкаНаАренду КАК ЗаявкаНаАренду
		|ГДЕ
		|	ЗаявкаНаАренду.Проведен
		|	И ЗаявкаНаАренду.ДатаНачала <= &ДатаОкончания
		|	И ЗаявкаНаАренду.ДатаОкончания >= &ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА вт_ЗаявкиНаАренду.ДатаНачала >= &ДатаНачала
		|			ТОГДА вт_ЗаявкиНаАренду.ДатаНачала
		|		ИНАЧЕ &ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА вт_ЗаявкиНаАренду.ДатаОкончания <= &ДатаОкончания
		|			ТОГДА вт_ЗаявкиНаАренду.ДатаОкончания
		|		ИНАЧЕ &ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	вт_ЗаявкиНаАренду.Ссылка КАК Документ,
		|	ЗаявкаНаАрендуАвтомобили.Автомобиль КАК Автомобиль,
		|	ПРЕДСТАВЛЕНИЕ(вт_ЗаявкиНаАренду.Ссылка) КАК Представление,
		|	""ЗаявкаНаАренду"" КАК ВидДокумента,
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыПериодовАренды.ПустаяСсылка) КАК ВидРасчета
		|ИЗ
		|	вт_ЗаявкиНаАренду КАК вт_ЗаявкиНаАренду
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаАренду.Автомобили КАК ЗаявкаНаАрендуАвтомобили
		|		ПО вт_ЗаявкиНаАренду.Ссылка = ЗаявкаНаАрендуАвтомобили.Ссылка
		|			И (ЗаявкаНаАрендуАвтомобили.Автомобиль В (&МассивАвтомобилей))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА АрендаАвтомобилейФактическийПериодДействия.ПериодДействияНачало >= &ДатаНачала
		|			ТОГДА АрендаАвтомобилейФактическийПериодДействия.ПериодДействияНачало
		|		ИНАЧЕ &ДатаНачала
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА АрендаАвтомобилейФактическийПериодДействия.ПериодДействияКонец <= &ДатаОкончания
		|			ТОГДА АрендаАвтомобилейФактическийПериодДействия.ПериодДействияКонец
		|		ИНАЧЕ &ДатаОкончания
		|	КОНЕЦ,
		|	АрендаАвтомобилейФактическийПериодДействия.ДоговорАренды,
		|	АрендаАвтомобилейФактическийПериодДействия.Автомобиль,
		|	ПРЕДСТАВЛЕНИЕ(АрендаАвтомобилейФактическийПериодДействия.ДоговорАренды),
		|	""ДоговорАренды"",
		|	АрендаАвтомобилейФактическийПериодДействия.ВидРасчета
		|ИЗ
		|	РегистрРасчета.АрендаАвтомобилей.ФактическийПериодДействия(Автомобиль В (&МассивАвтомобилей)) КАК АрендаАвтомобилейФактическийПериодДействия
		|ГДЕ
		|	АрендаАвтомобилейФактическийПериодДействия.ПериодДействияНачало <= &ДатаОкончания
		|	И АрендаАвтомобилейФактическийПериодДействия.ПериодДействияКонец >= &ДатаНачала
		|	И АрендаАвтомобилейФактическийПериодДействия.ВидРасчета.Аренда
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаРемонт.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаРемонт.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|		ИНАЧЕ ЗаявкаНаРемонт.ДатаОкончания
		|	КОНЕЦ,
		|	ЗаявкаНаРемонт.Ссылка,
		|	ЗаявкаНаРемонт.Автомобиль,
		|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРемонт.Ссылка),
		|	""ЗаявкаНаРемонт"",
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыПериодовАренды.ПустаяСсылка)
		|ИЗ
		|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
		|ГДЕ
		|	ЗаявкаНаРемонт.Проведен
		|	И ЗаявкаНаРемонт.ДатаНачала <= &ДатаОкончания
		|	И ВЫБОР
		|			КОГДА ЗаявкаНаРемонт.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|			ИНАЧЕ ЗаявкаНаРемонт.ДатаОкончания
		|		КОНЕЦ >= &ДатаНачала
		|	И ЗаявкаНаРемонт.ДатаНачала > ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗаявкаНаРемонт.Автомобиль В(&МассивАвтомобилей)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаряд.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ЗаказНаряд.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|		ИНАЧЕ ЗаказНаряд.ДатаОкончания
		|	КОНЕЦ,
		|	ЗаказНаряд.Ссылка,
		|	ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказНаряд.Ссылка),
		|	""ЗаказНаряд"",
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыПериодовАренды.ПустаяСсылка)
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Проведен
		|	И ЗаказНаряд.ДатаНачала <= &ДатаОкончания
		|	И ВЫБОР
		|			КОГДА ЗаказНаряд.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|			ИНАЧЕ ЗаказНаряд.ДатаОкончания
		|		КОНЕЦ >= &ДатаНачала
		|	И ЗаказНаряд.ДатаНачала > ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль В(&МассивАвтомобилей)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТестДрайв.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ТестДрайв.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|		ИНАЧЕ ТестДрайв.ДатаОкончания
		|	КОНЕЦ,
		|	ТестДрайв.Ссылка,
		|	ТестДрайв.Автомобиль,
		|	ПРЕДСТАВЛЕНИЕ(ТестДрайв.Ссылка),
		|	""ТестДрайв"",
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыПериодовАренды.ПустаяСсылка)
		|ИЗ
		|	Документ.ТестДрайв КАК ТестДрайв
		|ГДЕ
		|	ТестДрайв.Проведен
		|	И ТестДрайв.ДатаНачала <= &ДатаОкончания
		|	И ВЫБОР
		|			КОГДА ТестДрайв.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|			ИНАЧЕ ТестДрайв.ДатаОкончания
		|		КОНЕЦ >= &ДатаНачала
		|	И ТестДрайв.ДатаНачала > ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивАвтомобилей", МассивАвтомобилей);
	Запрос.УстановитьПараметр("ДатаНачала",        ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",     ДатаОкончания);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

// Функция возвращает таблицу автомобилей с периодами недоступности для аренды
//
// Параметры:
//  МассивАвтомобилей		 - Массив - Массив для фильтрации данных по периодам недоступности для аренды
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры для передачи дополнительных данных при необходимости
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица автомобилей с периодами недоступности для аренды
//
Функция ТаблицаИнтерваловОтсутствияАвтомобилей(МассивАвтомобилей = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АвтомобилиДляТестДрайва.Период КАК Период,
		|	АвтомобилиДляТестДрайва.Автомобиль КАК Автомобиль,
		|	АвтомобилиДляТестДрайва.Актив КАК Актив
		|ПОМЕСТИТЬ ВТ_Приход
		|ИЗ
		|	РегистрНакопления.АвтомобилиДляТестДрайва КАК АвтомобилиДляТестДрайва
		|ГДЕ
		|	АвтомобилиДляТестДрайва.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И &УсловиеАвтомобилей
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Автомобиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АвтомобилиДляТестДрайва.Период КАК Период,
		|	АвтомобилиДляТестДрайва.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ ВТ_Расход
		|ИЗ
		|	РегистрНакопления.АвтомобилиДляТестДрайва КАК АвтомобилиДляТестДрайва
		|ГДЕ
		|	АвтомобилиДляТестДрайва.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И &УсловиеАвтомобилей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Приход.Актив.ДатаВыбытия,
		|	ВТ_Приход.Автомобиль
		|ИЗ
		|	ВТ_Приход КАК ВТ_Приход
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Автомобиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Приход.Автомобиль КАК Автомобиль,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_Расход.Период, ДАТАВРЕМЯ(1, 1, 2))) КАК НачалоОтсутствия,
		|	ВТ_Приход.Период КАК ОкончаниеОтсутствия
		|ИЗ
		|	ВТ_Приход КАК ВТ_Приход
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Расход КАК ВТ_Расход
		|		ПО ВТ_Приход.Период > ВТ_Расход.Период
		|			И ВТ_Приход.Автомобиль = ВТ_Расход.Автомобиль
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Приход.Автомобиль,
		|	ВТ_Приход.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Расход.Автомобиль,
		|	ВТ_Расход.Период,
		|	МИНИМУМ(ЕСТЬNULL(ВТ_Приход.Период, ДАТАВРЕМЯ(3999, 12, 31)))
		|ИЗ
		|	ВТ_Расход КАК ВТ_Расход
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
		|		ПО ВТ_Расход.Автомобиль = ВТ_Приход.Автомобиль
		|			И ВТ_Расход.Период < ВТ_Приход.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Расход.Автомобиль,
		|	ВТ_Расход.Период";
	
	Если ЗначениеЗаполнено(МассивАвтомобилей) И МассивАвтомобилей.Количество() Тогда
		Запрос.УстановитьПараметр("Автомобили", МассивАвтомобилей);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&УсловиеАвтомобилей",
			"АвтомобилиДляТестДрайва.Автомобиль В (&Автомобили)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеАвтомобилей", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область Печать

// Возвращает данные подписанта от организации.
//
// Параметры:
//  Выборка  - Произвольный - Содержит данные подписанта (подписант, организация, дата).
//
// Возвращаемое значение:
//   Структура - Набор данных подписанта.
//
Функция ДанныеПодписантаОрганизации(Выборка) Экспорт
	
	ОрганизацияПодписантДолжностьРП  = "";
	ОрганизацияПодписантРП  = "";
	ОрганизацияПодписантОснованиеРП  = "";
	ОрганизацияПодписантФИО = "";
	
	ОрганизацияПодписантНаименование = "";
	ДолжностьНаименование = "";
	
	Если НЕ Выборка.ПодписантОтОрганизации.Пустая() Тогда
		ОрганизацияПодписант = Выборка.ПодписантОтОрганизации;
		ДанныеПодписанта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияПодписант, 
			"Наименование,Подписант.Наименование,Подписант.Должность.Наименование,Основание,Основание.Наименование");
		ОрганизацияПодписантНаименование = ДанныеПодписанта.ПодписантНаименование;
		Если НЕ ЗначениеЗаполнено(ОрганизацияПодписантНаименование) Тогда
			ОрганизацияПодписантНаименование = ДанныеПодписанта.Наименование;
		КонецЕсли;
		ДолжностьНаименование = Строка(ДанныеПодписанта.ПодписантДолжностьНаименование);
		
		Если НЕ ПустаяСтрока(ДанныеПодписанта.ОснованиеНаименование) Тогда
			ОрганизацияПодписантОснованиеРП = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				ДанныеПодписанта.ОснованиеНаименование,
				2,
				ДанныеПодписанта.Основание
			);
		КонецЕсли;
		
	Иначе
		СтруктураОтбора   = Новый Структура("Организация, Объект",
			Выборка.Организация,
			Перечисления.ВидыОбъектовСведений.Руководитель);
		СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(НачалоДня(Выборка.Дата), СтруктураОтбора);
		ОрганизацияПодписант = СтруктураСведений.Значение;
		Если ЗначениеЗаполнено(ОрганизацияПодписант) Тогда
			ДанныеПодписанта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияПодписант, "Наименование");
			ОрганизацияПодписантНаименование = ДанныеПодписанта.Наименование;
			ОрганизацияПодписантОснованиеРП = НСтр("ru = 'Устава'");
			ОрганизацияПодписантДолжностьРП = НСтр("ru = 'Генерального директора'");
			ДолжностьНаименование = НСтр("ru = 'Генеральный директор'");
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОрганизацияПодписантФИО) И НЕ ПустаяСтрока(ОрганизацияПодписантНаименование) Тогда
		ОрганизацияПодписантФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ОрганизацияПодписантНаименование);
	КонецЕсли;
	
	Если ПустаяСтрока(ОрганизацияПодписантРП) И НЕ ПустаяСтрока(ОрганизацияПодписантНаименование) Тогда
		ОрганизацияПодписантРП = СклонениеПредставленийОбъектов.ПросклонятьФИО(ОрганизацияПодписантНаименование,
			2,
			ОрганизацияПодписант);
	КонецЕсли;	
	
	Если ПустаяСтрока(ОрганизацияПодписантДолжностьРП) И НЕ ПустаяСтрока(ДолжностьНаименование) Тогда
		ОрганизацияПодписантДолжностьРП = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ДолжностьНаименование, 2);
	КонецЕсли;	
	
	Результат = Новый Структура;
	Результат.Вставить("ОрганизацияПодписантДолжностьРП",
		?(ПустаяСтрока(ОрганизацияПодписантДолжностьРП), "НЕ ЗАПОЛНЕНО", ОрганизацияПодписантДолжностьРП));
	Результат.Вставить("ОрганизацияПодписантРП",
		?(ПустаяСтрока(ОрганизацияПодписантРП),          "НЕ ЗАПОЛНЕНО", ОрганизацияПодписантРП));
	Результат.Вставить("ОрганизацияПодписантОснованиеРП",
		?(ПустаяСтрока(ОрганизацияПодписантОснованиеРП), "НЕ ЗАПОЛНЕНО", ОрганизацияПодписантОснованиеРП));
	Результат.Вставить("ОрганизацияПодписантФИО",
		?(ПустаяСтрока(ОрганизацияПодписантФИО),         "НЕ ЗАПОЛНЕНО", ОрганизацияПодписантФИО));
	Результат.Вставить("ОрганизацияПодписантДолжность",
		?(ПустаяСтрока(ДолжностьНаименование),           "НЕ ЗАПОЛНЕНО", ДолжностьНаименование));
	Результат.Вставить("ФИОПолностью",
		?(ПустаяСтрока(ОрганизацияПодписантНаименование), "НЕ ЗАПОЛНЕНО", ОрганизацияПодписантНаименование));
		
	Возврат Результат;
КонецФункции

// Возвращает данные подписанта от контрагента.
//
// Параметры:
//  Выборка  - Произвольный - Содержит данные подписанта (подписант, контрагент, дата).
//
// Возвращаемое значение:
//   Структура - Набор данных подписанта.
//
Функция ДанныеПодписантаКонтрагента(Выборка) Экспорт
	
	КонтрагентПодписантДолжностьРП = "";
	КонтрагентПодписантРП = "";
	КонтрагентПодписантОснованиеРП = "";
	КонтрагентПодписантФИО = "";
	
	КонтрагентПодписантНаименование = "";
	ДолжностьНаименование = "";
	
	Если НЕ Выборка.ПодписантОтКонтрагента.Пустая() Тогда
		
		КонтрагентПодписант = Выборка.ПодписантОтКонтрагента;
		
		ДанныеПодписанта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КонтрагентПодписант,
			"Наименование,Подписант.Наименование, Подписант.Должность, Подписант.Должность.Наименование, Основание,Основание.Наименование");
		
		КонтрагентПодписантНаименование = ДанныеПодписанта.ПодписантНаименование;
		Если НЕ ЗначениеЗаполнено(КонтрагентПодписантНаименование) Тогда
			КонтрагентПодписантНаименование = ДанныеПодписанта.Наименование;
		КонецЕсли;
		ДолжностьНаименование = ДанныеПодписанта.ПодписантДолжностьНаименование;
		
		Если НЕ ПустаяСтрока(ДанныеПодписанта.ОснованиеНаименование) Тогда
			КонтрагентПодписантОснованиеРП = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				ДанныеПодписанта.ОснованиеНаименование,
				2,
				ДанныеПодписанта.Основание
			);
		КонецЕсли;
		
	Иначе
		СтруктураОтбора   = Новый Структура("Организация, Объект",
			Выборка.Контрагент,
			Перечисления.ВидыОбъектовСведений.Руководитель);
			
		СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(НачалоДня(Выборка.Дата), СтруктураОтбора);
		КонтрагентПодписант = СтруктураСведений.Значение;
		Если ЗначениеЗаполнено(КонтрагентПодписант) Тогда
			
			ДанныеПодписанта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КонтрагентПодписант,
				"Наименование,Должность.Наименование");
			
			КонтрагентПодписантНаименование = ДанныеПодписанта.Наименование;
			КонтрагентПодписантОснованиеРП = НСтр("ru = 'Устава'");
			КонтрагентПодписантДолжностьРП = НСтр("ru = 'Генерального директора'");
			
		КонецЕсли;
	КонецЕсли;
	
	КонтрагентПодписантФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(КонтрагентПодписантНаименование);
	
	Если ПустаяСтрока(КонтрагентПодписантРП) И НЕ ПустаяСтрока(КонтрагентПодписантНаименование) Тогда
		КонтрагентПодписантРП = СклонениеПредставленийОбъектов.ПросклонятьФИО(КонтрагентПодписантНаименование,
			2,
			КонтрагентПодписант);
	КонецЕсли;
	
	Если ПустаяСтрока(КонтрагентПодписантДолжностьРП) И ЗначениеЗаполнено(ДолжностьНаименование) Тогда
		КонтрагентПодписантДолжностьРП = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ДолжностьНаименование, 2);
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("КонтрагентПодписантДолжностьРП",
		?(ПустаяСтрока(КонтрагентПодписантДолжностьРП), "НЕ ЗАПОЛНЕНО", КонтрагентПодписантДолжностьРП));
	Результат.Вставить("КонтрагентПодписантРП",
		?(ПустаяСтрока(КонтрагентПодписантРП),          "НЕ ЗАПОЛНЕНО", КонтрагентПодписантРП));
	Результат.Вставить("КонтрагентПодписантОснованиеРП",
		?(ПустаяСтрока(КонтрагентПодписантОснованиеРП), "НЕ ЗАПОЛНЕНО", КонтрагентПодписантОснованиеРП));
	Результат.Вставить("КонтрагентПодписантФИО",
		?(ПустаяСтрока(КонтрагентПодписантФИО),         "НЕ ЗАПОЛНЕНО", КонтрагентПодписантФИО));
	Результат.Вставить("ФИОПолностью",
		?(ПустаяСтрока(КонтрагентПодписантНаименование), "НЕ ЗАПОЛНЕНО", КонтрагентПодписантНаименование));
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные паспорта для объекта (организации, контрагента, сотрудника,
// контактного лица).
//
// Параметры:
//  Объект  - СправочникСсылка                         - Владелец подтверждающего документа.
//  Паспорт - СправочникСсылка.ПодтверждающиеДокументы - Паспорт объекта.
//  Падеж   - Число                                    - Номер падежа, для склонения.
//
// Возвращаемое значение:
//   Структура - Набор паспортных данных.
//
Функция ПолучитьДанныеПаспорта(Объект, Паспорт = Неопределено, Падеж = 2) Экспорт
	
	Если Паспорт = Неопределено Тогда
		
		Паспорт = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
					Объект,
					Перечисления.ВидыДокументов.Паспорт
		);
		
	КонецЕсли;
	
	ПаспортСерия      = "";
	ПаспортНомер      = "";
	ПаспортДатаВыдачи = "";
	ПаспортКемВыдан   = "";
	
	Если ЗначениеЗаполнено(Паспорт) Тогда
		
		ДанныеПаспорта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Паспорт, "Серия, Номер, ДатаВыдачи, КемВыдан");
		
		ПаспортСерия      = ДанныеПаспорта.Серия;
		ПаспортНомер      = ДанныеПаспорта.Номер;
		ПаспортДатаВыдачи = ДанныеПаспорта.ДатаВыдачи;
		ПаспортКемВыдан   = ДанныеПаспорта.КемВыдан;
		
	КонецЕсли;
	
	ФИОКонтрагентаРП = СклонениеПредставленийОбъектов.ПросклонятьФИО(Объект.Наименование, Падеж, Объект);
	АдресРегистрации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		
	Результат = Новый Структура;
	Результат.Вставить("ПаспортСерия",
		?(ПустаяСтрока(ПаспортСерия), "НЕ ЗАПОЛНЕНО", ПаспортСерия));
	Результат.Вставить("ПаспортНомер",
		?(ПустаяСтрока(ПаспортНомер), "НЕ ЗАПОЛНЕНО", ПаспортНомер));
	Результат.Вставить("ПаспортДатаВыдачи",
		?(ЗначениеЗаполнено(ПаспортДатаВыдачи), Формат(ПаспортДатаВыдачи, "ДЛФ=D"), "НЕ ЗАПОЛНЕНО"));
	Результат.Вставить("ПаспортКемВыдан",
		?(ПустаяСтрока(ПаспортКемВыдан), "НЕ ЗАПОЛНЕНО", ПаспортКемВыдан));
	Результат.Вставить("ФИО",
		?(ПустаяСтрока(ФИОКонтрагентаРП), "НЕ ЗАПОЛНЕНО", ФИОКонтрагентаРП));
	Результат.Вставить("АдресРегистрации",
		?(ПустаяСтрока(АдресРегистрации), "НЕ ЗАПОЛНЕНО", АдресРегистрации));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает структуру с ключами периодов согласно данным вида аренды.
//
// Параметры:
//  ДанныеВидаАренды - Структура - Структура реквизитов вида аренды.
//  Префикс			 - Строка - Префикс для ключей структуры.
//  Значение		 - Произвольный - значение для помещения в возвращаемую структуру.
// 
// Возвращаемое значение:
//  Структура - С ключами "Минута", "Час", "Сутки" и т.д. согласно виду аренды.
//
Функция СтруктураПоВидуАренды(ДанныеВидаАренды, Префикс = "", Значение = Неопределено)
	
	Структура = Новый Структура;
		
	Если ДанныеВидаАренды.ТарификацияМинута Тогда
		Структура.Вставить(Префикс + "Минута", Значение);
	КонецЕсли;
	
	Если ДанныеВидаАренды.ТарификацияЧас Тогда
		Структура.Вставить(Префикс + "Час", Значение);
	КонецЕсли;
	
	Если ДанныеВидаАренды.ТарификацияСутки Тогда
		Структура.Вставить(Префикс + "Сутки", Значение);
	КонецЕсли;
	
	Если ДанныеВидаАренды.ТарификацияНеделя Тогда
		Структура.Вставить(Префикс + "Неделя", Значение);
	КонецЕсли;
	
	Если ДанныеВидаАренды.ТарификацияМесяц Тогда
		Структура.Вставить(Префикс + "Месяц", Значение);
	КонецЕсли;
	
	Если ДанныеВидаАренды.ТарификацияКвартал Тогда
		Структура.Вставить(Префикс + "Квартал", Значение);
	КонецЕсли;
	
	Если ДанныеВидаАренды.ТарификацияГод Тогда
		Структура.Вставить(Префикс + "Год", Значение);
	КонецЕсли;
	
	Если ДанныеВидаАренды.ДепозитИспользование Тогда
		Структура.Вставить("Депозит", Значение);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

// Функция возвращает массив с именами используемых для аренды периодов
// 
// Возвращаемое значение:
//  Массив - "Минута", "Час", "Сутки" и т.д.
//
Функция МассивПериодов() Экспорт 
	
	Результат = Новый Массив;
	Результат.Добавить("Минута");
	Результат.Добавить("Час");
	Результат.Добавить("Сутки");
	Результат.Добавить("Неделя");
	Результат.Добавить("Месяц");
	Результат.Добавить("Квартал");
	Результат.Добавить("Год");
	
	Возврат Результат;
	
КонецФункции

// Процедура добавляет запись в таблицу движений по регистру расчета.
//
// Параметры:
//  ТаблицаДвижений	 - ТаблицаЗначений - Таблица движений.
//  Объект			 - ДокументОбъект - Проводимый по регистру расчета документ.
//  ПоляЗаписи		 - Структура - содержит:
//  	*ДоговорАренды	 - ДокументСсылка.ДоговорАренды - Ссылка на договор аренды.
//  	*Автомобиль		 - СправочникСсылка.Автомобиль - Ссылка на автомобиль.
//  	*ВидРасчета		 - ПланВидовРасчетаСсылка.ВидыПериодовАренды - Вид расчета для записи.
//  	*ДатаНачала		 - Дата - Начало периода.
//  	*ДатаОкончания	 - Дата - Окончание периода.
//  	*Количество		 - Число - Количество дней для записи в регистр.
//  	*Сумма			 - Число - Сумма за аренду в валюте регламентированного учета.
//  	*СуммаНДС		 - Число - Сумма НДС за аренду в валюте регламентированного учета.
//  	*СуммаУпр		 - Число - Сумма за аренду в валюте управленческого учета.
//  	*СуммаНДСУпр		 - Число - Сумма НДС за аренду в валюте управленческого учета.
//  	*ГрафикАренды	 - СправочникСсылка.ГрафикиАренды - Ссылка на график аренды для записи в регистр.
//
Процедура ДобавитьЗапись(ТаблицаДвижений, Объект, ПоляЗаписи)
	
	ДатаНачала = ПоляЗаписи.ДатаНачала;
	
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.Регистратор          = Объект.Ссылка;
	СтрокаДвижений.ВидРасчета           = ПоляЗаписи.ВидРасчета;
	СтрокаДвижений.ДоговорАренды        = ПоляЗаписи.ДоговорАренды;
	СтрокаДвижений.Автомобиль           = ПоляЗаписи.Автомобиль;
	СтрокаДвижений.ПериодРегистрации    = НачалоМесяца(ДатаНачала);
	СтрокаДвижений.ПериодДействияНачало = ДатаНачала;
	СтрокаДвижений.ПериодДействияКонец  = ПоляЗаписи.ДатаОкончания;
	СтрокаДвижений.Сумма                = ПоляЗаписи.Сумма;
	СтрокаДвижений.СуммаНДС             = ПоляЗаписи.СуммаНДС;
	СтрокаДвижений.СуммаУпр             = ПоляЗаписи.СуммаУпр;
	СтрокаДвижений.СуммаНДСУпр          = ПоляЗаписи.СуммаНДСУпр;
	СтрокаДвижений.Количество           = ПоляЗаписи.Количество;
	СтрокаДвижений.ГрафикАренды         = ПоляЗаписи.ГрафикАренды;
	СтрокаДвижений.Активность           = Истина;
	
КонецПроцедуры

// Функция возвращает данные регистра расчета по договору аренды за период
//
// Параметры:
//  ДоговорАренды	 - ДокументСсылка.ДоговорАренды - Ссылка на договор аренды
//  ДатаНачала		 - Дата - Начало периода
//  ДатаОкончания	 - Дата - Окончание периода 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с колонками Автомобиль, СуммаВсего, ДатаНачала, ДатаОкончания, МодельНаименование, VIN 
//
Функция ДанныеПериода(ДоговорАренды, ДатаНачала, ДатаОкончания) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АрендаАвтомобилей.Автомобиль КАК Автомобиль,
	|	СУММА(АрендаАвтомобилей.Сумма) КАК СуммаВсего,
	|	МИНИМУМ(АрендаАвтомобилей.ПериодДействияНачало) КАК ДатаНачала,
	|	МАКСИМУМ(АрендаАвтомобилей.ПериодДействияКонец) КАК ДатаОкончания,
	|	ВЫРАЗИТЬ(АрендаАвтомобилей.Автомобиль.Модель.НаименованиеПолное КАК СТРОКА(255)) КАК МодельНаименование,
	|	АрендаАвтомобилей.Автомобиль.VIN КАК VIN
	|ИЗ
	|	РегистрРасчета.АрендаАвтомобилей КАК АрендаАвтомобилей
	|ГДЕ
	|	АрендаАвтомобилей.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И АрендаАвтомобилей.ДоговорАренды = &ДоговорАренды
	|
	|СГРУППИРОВАТЬ ПО
	|	АрендаАвтомобилей.Автомобиль,
	|	ВЫРАЗИТЬ(АрендаАвтомобилей.Автомобиль.Модель.НаименованиеПолное КАК СТРОКА(255)),
	|	АрендаАвтомобилей.Автомобиль.VIN";
	Запрос.УстановитьПараметр("ДоговорАренды", ДоговорАренды);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДатаОкончания));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает данные договора аренды и действующего по договору соглашения для заполнения счетов и актов 
//
// Параметры:
//  ДоговорАренды	 - ДокументСсылка.ДоговорАренды - Ссылка на договор аренды
//  ДействующееСоглашение	 - ДокументСсылка.ДоговорАренды, ДокументСсылка.ИзменениеДоговораАренды - действующее
//  									по договору аренды соглашение.
// 
// Возвращаемое значение:
//  Массив - Массив результатов запроса с данными документов аренды 
//
Функция ПолучитьДанныеЗаполнения(ДоговорАренды, ДействующееСоглашение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорАренды.ВидАренды КАК ВидАренды,
	|	ДоговорАренды.Проведен КАК Проведен
	|ИЗ
	|	Документ.ДоговорАренды КАК ДоговорАренды
	|ГДЕ
	|	ДоговорАренды.Ссылка = &ДоговорАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорАрендыТовары.Номенклатура КАК Номенклатура,
	|	ДоговорАрендыТовары.Количество КАК Количество,
	|	ДоговорАрендыТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДоговорАрендыТовары.Коэффициент КАК Коэффициент,
	|	ДоговорАрендыТовары.Цена КАК Цена,
	|	ДоговорАрендыТовары.Сумма КАК Сумма,
	|	ДоговорАрендыТовары.СтавкаНДС КАК СтавкаНДС,
	|	ДоговорАрендыТовары.СуммаНДС КАК СуммаНДС,
	|	ДоговорАрендыТовары.ПроцентСкидки КАК ПроцентСкидки,
	|	ДоговорАрендыТовары.СуммаСкидки КАК СуммаСкидки,
	|	ДоговорАрендыТовары.СуммаВсего КАК СуммаВсего,
	|	ДоговорАрендыТовары.СкидкаНаТовар КАК СкидкаНаТовар,
	|	ДоговорАрендыТовары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
	|	ДоговорАрендыТовары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
	|	ДоговорАрендыТовары.Количество КАК КоличествоБазовое
	|ИЗ
	|	Документ.ДоговорАренды.Товары КАК ДоговорАрендыТовары
	|ГДЕ
	|	ДоговорАрендыТовары.Ссылка = &ДействующееСоглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорАрендыАвтомобили.СуммаВсего КАК СуммаВсего,
	|	ДоговорАрендыАвтомобили.Автомобиль КАК Автомобиль,
	|	ДоговорАрендыАвтомобили.Ссылка.ДатаНачала КАК ДатаНачала,
	|	ДоговорАрендыАвтомобили.Ссылка.ДатаОкончания КАК ДатаОкончания,
	|	ДоговорАрендыАвтомобили.Автомобиль.VIN КАК VIN,
	|	ДоговорАрендыАвтомобили.Автомобиль.Модель.НаименованиеПолное КАК МодельНаименование
	|ИЗ
	|	Документ.ДоговорАренды.Автомобили КАК ДоговорАрендыАвтомобили
	|ГДЕ
	|	ДоговорАрендыАвтомобили.Ссылка = &ДействующееСоглашение";
	Запрос.УстановитьПараметр("ДоговорАренды", ДоговорАренды);
	Запрос.УстановитьПараметр("ДействующееСоглашение", ДействующееСоглашение);
	
	Если ТипЗнч(ДействующееСоглашение) = Тип("ДокументСсылка.ИзменениеДоговораАренды") Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Источники.Заменить(
			0,
			СхемаЗапроса.ПакетЗапросов[1].ДоступныеТаблицы.Найти("Документ.ИзменениеДоговораАренды.Товары"));
		СхемаЗапроса.ПакетЗапросов[2].Операторы[0].Источники.Заменить(
			0,
			СхемаЗапроса.ПакетЗапросов[2].ДоступныеТаблицы.Найти("Документ.ИзменениеДоговораАренды.Автомобили"));
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Функция возвращает строку, полученную из исходной, где после N-символов вставляется
// перенос строки (не разрывая слов).
//
// Параметры:
//  ИсходнаяСтрока	 - Строка - Строка для преобразования
//  Ширина			 - Ширина - Максимальное количество символов в строке
// 
// Возвращаемое значение:
//  Строка - Строка с переносами, где между переносами не больше символов, чем указано в реквизите Ширина
//
Функция ВставитьПереносСтрокиПоЗаданнойШирине(ИсходнаяСтрока, Ширина) Экспорт
	
	Возврат АрендаАвтомобилейЗащищенныеФункцииСервер.ВставитьПереносСтрокиПоЗаданнойШирине(ИсходнаяСтрока, Ширина);
	
КонецФункции

#Область ЦенообразованиеСлужебные

// Функция используется для округления даты окончания периода для получения целого количества периодов
// согласно вида аренды.
//
// Параметры:
//  СтруктураПериодаАренды	 - Структура - Структура периодов в соответствии с видом аренды.
//  ДатаНачала				 - Дата - Начало периода.
//  ДатаОкончания			 - Дата - Окончание периода.
//
// Возвращаемое значение:
//  Дата - окончание периода, рассчитанное с учетом структуры периодов, если в структуре последний период сутки,
//		   то дата окончания приведется к концу дня.
//
Функция ПривестиОкончаниеПериода(СтруктураПериодаАренды, ДатаНачала, ДатаОкончания) 
	
	Возврат АрендаАвтомобилейЗащищенныеФункцииСервер.
		ПривестиОкончаниеПериода(СтруктураПериодаАренды, ДатаНачала, ДатаОкончания);
	
КонецФункции

// Функция используется для вычисления количества интервалов указанного типа между переданными датами
//
// Параметры:
//  ДатаНачала		 - Дата - Начало периода
//  ДатаОкончания	 - Дата -  Окончание периода
//  ТипРазности		 - Строка - Вид интервала для подсчета разности.
//  							Возможные варианты "Секунда", "Час", "День", "Неделя", "Месяц", "Квартал", "Год".
// 
// Возвращаемое значение:
//  Число - количество интервалов указанного типа между переданными датами
//
Функция РазностьДат(ДатаНачала, ДатаОкончания, ТипРазности) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, " + ТипРазности + " ) КАК Результат";
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Результат;
	
КонецФункции

// Функция округляет число согласно правилу: если у числа есть дробная часть, то оно округлится до
// следующего целого числа.
//
// Параметры:
//  Число	 - Число - округляемое число.
// 
// Возвращаемое значение:
//  Число - округленное в большую сторону число.
//
Функция ОкруглитьВБольшуюСторону(Число)
	
	Возврат (Цел(Число) + ?(Число - Цел(Число) > 0 , 1, 0));
	
КонецФункции

// Процедура проверяет ставку НДС строки на соответствие виду аренды.
//
// Параметры:
//  ДанныеВидаАренды - Структура - Структура реквизитов вида аренды.
//  Строка			 - СтрокаТабличнойЧасти - строка документа, для которой нужно проверить ставку НДС.
//
Процедура ПроверитьСтавкуНДС(ДанныеВидаАренды, Строка)
	
	Если Строка.СтавкаНДС.Пустая() Тогда
		Если ДанныеВидаАренды.ОсвобожденОтНДС Тогда
			Строка.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		Иначе
			Строка.СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромРасчетаСлужебные

// Процедура добавляет движение по регистру расчета, если существует разница между уже записанными в регистр данными
// и полученными в результате изменения условий договора данными.
//
// Параметры:
//  Объект					 - ДокументОбъект - Проводящийся по регистру расчета документ.
//  ТаблицаДвиженийИзменения - ТаблицаЗначений - Формируемые движения регистра расчета.
//  СтрокиФакт				 - Массив - Массив строк таблицы движений по данным регистра.
//  СтрокиДвижений			 - Массив - Массив строк формируемой таблицы движений.
//
Процедура ПровестиИзменениеСтоимости(Объект, ТаблицаДвиженийИзменения, СтрокиФакт, СтрокиДвижений)
	
	РазницаСумма       = СтрокиДвижений[0].Сумма - СтрокиФакт[0].Сумма;
	РазницаСуммаУпр    = СтрокиДвижений[0].СуммаУпр - СтрокиФакт[0].СуммаУпр;
	РазницаСуммаНДС    = СтрокиДвижений[0].СуммаНДС - СтрокиФакт[0].СуммаНДС;
	РазницаСуммаНДСУпр = СтрокиДвижений[0].СуммаНДСУпр - СтрокиФакт[0].СуммаНДСУпр;
	
	Если РазницаСумма <> 0 ИЛИ РазницаСуммаУпр <> 0 ИЛИ РазницаСуммаНДС <> 0 ИЛИ РазницаСуммаНДСУпр <> 0 Тогда
		
		НоваяСтрока = ТаблицаДвиженийИзменения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиФакт[0], , "Количество");
		НоваяСтрока.Сумма       = РазницаСумма;
		НоваяСтрока.СуммаУпр    = РазницаСуммаУпр;
		НоваяСтрока.СуммаНДС    = РазницаСуммаНДС;
		НоваяСтрока.СуммаНДСУпр = РазницаСуммаНДСУпр;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает таблицу интервалов фактического периода действия регистра расчета по переданному договору аренды.
//
// Параметры:
//  ДоговорАренды	 - ДокументСсылка.ДоговорАренды - Ссылка на договор для фильтрации данных аренды.
//  ТолькоАренда	 - Булево - Признак, нужно возвращать данные только видов расчета с признаком
//  							Аренда или всех видов расчета.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица по данным фактического периода действия регистра расчета.
//
Функция ДанныеФактическогоПериода(ДоговорАренды, ТолькоАренда)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АрендаАвтомобилейФактическийПериодДействия.Автомобиль КАК Автомобиль,
	               |	СУММА(АрендаАвтомобилейФактическийПериодДействия.Количество) КАК Количество,
	               |	СУММА(АрендаАвтомобилейФактическийПериодДействия.Сумма) КАК Сумма,
	               |	СУММА(АрендаАвтомобилейФактическийПериодДействия.СуммаУпр) КАК СуммаУпр,
	               |	СУММА(АрендаАвтомобилейФактическийПериодДействия.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(АрендаАвтомобилейФактическийПериодДействия.СуммаНДСУпр) КАК СуммаНДСУпр,
	               |	АрендаАвтомобилейФактическийПериодДействия.ПериодРегистрации КАК ПериодРегистрации,
	               |	МАКСИМУМ(АрендаАвтомобилейФактическийПериодДействия.ПериодДействияКонец) КАК ПериодДействияКонец,
	               |	МИНИМУМ(АрендаАвтомобилейФактическийПериодДействия.ПериодДействияНачало) КАК ПериодДействияНачало,
	               |	АрендаАвтомобилейФактическийПериодДействия.ДоговорАренды КАК ДоговорАренды,
	               |	МАКСИМУМ(АрендаАвтомобилейФактическийПериодДействия.ВидРасчета) КАК ВидРасчета
	               |ИЗ
	               |	РегистрРасчета.АрендаАвтомобилей.ФактическийПериодДействия(ДоговорАренды = &ДоговорАренды) КАК АрендаАвтомобилейФактическийПериодДействия
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АрендаАвтомобилейФактическийПериодДействия.Автомобиль,
	               |	АрендаАвтомобилейФактическийПериодДействия.ПериодРегистрации,
	               |	АрендаАвтомобилейФактическийПериодДействия.ДоговорАренды";
	
	Если ТолькоАренда Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов.Получить(0).Операторы.Получить(0).Отбор.Добавить(
			"АрендаАвтомобилейФактическийПериодДействия.ВидРасчета.Аренда");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДоговорАренды", ДоговорАренды);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура заполняет таблицу движений по регистру расчета согласно данным переданного документа.
//
// Параметры:
//  Объект			 - ДокументОбъект - Проводящийся по регистру расчета документ.
//  ТаблицаДвижений	 - ТаблицаЗначений - Формируемые движения регистра расчета.
//
Процедура ЗаполнитьТаблицуДвижений(Объект, ДанныеВидаАренды, ТаблицаДвижений)
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсРегл   = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		КурсУпр = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
	Иначе
		КурсУпр = Объект.КурсВалютыУпр;
	КонецЕсли;
	
	ДоговорАренды = Объект.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорАрендыАвтомобили.Автомобиль КАК Автомобиль,
	|	ДоговорАрендыАвтомобили.СуммаВсего КАК СуммаВсего,
	|	ДоговорАрендыАвтомобили.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ДоговорАрендыАвтомобили.Ссылка.КурсДокумента КАК КурсДокумента,
	|	ДоговорАрендыАвтомобили.СуммаНДС КАК СуммаНДС,
	|	ДоговорАрендыАвтомобили.Ссылка.ДатаНачала КАК ДатаНачала,
	|	ДоговорАрендыАвтомобили.Ссылка.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.ДоговорАренды.Автомобили КАК ДоговорАрендыАвтомобили
	|ГДЕ
	|	ДоговорАрендыАвтомобили.Ссылка = &Ссылка";
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИзменениеДоговораАренды") Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники.Заменить(
			0,
			СхемаЗапроса.ПакетЗапросов[0].ДоступныеТаблицы.Найти("Документ.ИзменениеДоговораАренды.Автомобили"));
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		ДоговорАренды = Объект.ДокументОснование;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	
	СтруктураЗаписи.Вставить("ДоговорАренды", ДоговорАренды);
	СтруктураЗаписи.Вставить("ВидРасчета",    ПланыВидовРасчета.ВидыПериодовАренды.Использование);
	СтруктураЗаписи.Вставить("ГрафикАренды",  ДанныеВидаАренды.ГрафикАренды);
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
			
	Пока Выборка.Следующий() Цикл
		
		ДатаНачала = Выборка.ДатаНачала;
		
		СуммаВсего       = Окр(
			РаботаСКурсамиВалютПлатформа.
				ПересчетПоВалюте(Выборка.СуммаВсего, Выборка.ВалютаДокумента, Выборка.КурсДокумента, ВалютаРегл, КурсРегл),
			2);
		СуммаНДСВсего    = Окр(
			РаботаСКурсамиВалютПлатформа.
				ПересчетПоВалюте(Выборка.СуммаНДС, Выборка.ВалютаДокумента, Выборка.КурсДокумента, ВалютаРегл, КурсРегл),
			2);
		СуммаВсегоУпр    = Окр(
			РаботаСКурсамиВалютПлатформа.
				ПересчетПоВалюте(Выборка.СуммаВсего, Выборка.ВалютаДокумента, Выборка.КурсДокумента, ВалютаУпр, КурсУпр),
			2);
		СуммаНДСВсегоУпр = Окр(
			РаботаСКурсамиВалютПлатформа.
				ПересчетПоВалюте(Выборка.СуммаНДС, Выборка.ВалютаДокумента, Выборка.КурсДокумента, ВалютаУпр, КурсУпр),
			2);
		
		СуммаВсегоОстаток    = СуммаВсего;
		СуммаНДСОстаток      = СуммаНДСВсего;
		СуммаВсегоУпрОстаток = СуммаВсегоУпр;
		СуммаНДСУпрОстаток   = СуммаНДСВсегоУпр;
		
		КоличествоВсего = ОкруглитьВБольшуюСторону((Выборка.ДатаОкончания - Выборка.ДатаНачала) / (24 * 60 * 60));
		КоличествоОстаток = КоличествоВсего;
		
		СтруктураЗаписи.Вставить("Автомобиль", Выборка.Автомобиль);
		
		Пока НачалоМесяца(ДатаНачала) <> НачалоМесяца(Выборка.ДатаОкончания) Цикл
			
			ДатаОкончания = КонецМесяца(ДатаНачала);
			
			Если НачалоМесяца(ДатаНачала) = ДатаНачала Тогда
				Количество = День(ДатаОкончания);
			Иначе
				Количество = Цел((ДатаОкончания - ДатаНачала) / (24 * 60 * 60));
			КонецЕсли;
			
			Сумма = Окр(СуммаВсего * Количество / КоличествоВсего, 2);
			СуммаНДС = Окр(СуммаНДСВсего * Количество / КоличествоВсего, 2);
			СуммаУпр = Окр(СуммаВсегоУпр * Количество / КоличествоВсего, 2);
			СуммаНДСУпр = Окр(СуммаНДСВсегоУпр * Количество / КоличествоВсего, 2);
			
			СтруктураЗаписи.Вставить("ДатаНачала",    ДатаНачала);
			СтруктураЗаписи.Вставить("ДатаОкончания", ДатаОкончания);
			СтруктураЗаписи.Вставить("Количество",    Количество);
			СтруктураЗаписи.Вставить("Сумма",         Сумма);
			СтруктураЗаписи.Вставить("СуммаНДС",      СуммаНДС);
			СтруктураЗаписи.Вставить("СуммаУпр",      СуммаУпр);
			СтруктураЗаписи.Вставить("СуммаНДСУпр",   СуммаНДСУпр);
			
			ДобавитьЗапись(
				ТаблицаДвижений, 
				Объект, 
				СтруктураЗаписи);
				
			ДатаНачала = ДатаОкончания + 1;
			
			СуммаВсегоОстаток    = СуммаВсегоОстаток - Сумма;
			СуммаНДСОстаток      = СуммаНДСОстаток - СуммаНДС;
			СуммаВсегоУпрОстаток = СуммаВсегоУпрОстаток - СуммаУпр;
			СуммаНДСУпрОстаток   = СуммаНДСУпрОстаток - СуммаНДСУпр;
			
			КоличествоОстаток = КоличествоОстаток - Количество;
								
		КонецЦикла;
		
		СтруктураЗаписи.Вставить("ДатаНачала",    ДатаНачала);
		СтруктураЗаписи.Вставить("ДатаОкончания", Выборка.ДатаОкончания);
		СтруктураЗаписи.Вставить("Количество",    КоличествоОстаток);
		СтруктураЗаписи.Вставить("Сумма",         СуммаВсегоОстаток);
		СтруктураЗаписи.Вставить("СуммаНДС",      СуммаНДСОстаток);
		СтруктураЗаписи.Вставить("СуммаУпр",      СуммаВсегоУпрОстаток);
		СтруктураЗаписи.Вставить("СуммаНДСУпр",   СуммаНДСУпрОстаток);
		
		ДобавитьЗапись(
			ТаблицаДвижений, 
			Объект, 
			СтруктураЗаписи);
		
	КонецЦикла;
					
КонецПроцедуры

// Процедура проверяет переданный вид расчета на возможность вытеснить другие виды расчета по
// переданному договору и интервалу аренды.
//
// Параметры:
//  Объект			 - ДокументОбъект - Проводящийся по регистру расчета документ.
//  ВидРасчета		 - ПланВидовРасчетаСсылка.ВидыПериодовАренды - Ссылка на проверяемый вид расчета.
//  ДатаНачала		 - Дата - Начало периода.
//  ДатаОкончания	 - Дата - Окончание периода.
//  Отказ			 - Булево - Признак отказа от проведения документа.
//
Процедура ПроверитьВозможностьВытеснения(Объект, ВидРасчета, ДатаНачала, ДатаОкончания, Отказ) 
	
	ДоговорАренды = Объект.ДокументОснование;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АрендаАвтомобилейФактическийПериодДействия.ВидРасчета КАК ВидРасчета,
	|	ПРЕДСТАВЛЕНИЕ(АрендаАвтомобилейФактическийПериодДействия.ВидРасчета) КАК ВидРасчетаПредставление
	|ПОМЕСТИТЬ вт_ВидыРасчетаПериода
	|ИЗ
	|	РегистрРасчета.АрендаАвтомобилей.ФактическийПериодДействия(
	|			ПериодДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|				И ДоговорАренды = &ДоговорАренды) КАК АрендаАвтомобилейФактическийПериодДействия
	|ГДЕ
	|	АрендаАвтомобилейФактическийПериодДействия.ВидРасчета <> &ВидРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	АрендаАвтомобилейФактическийПериодДействия.ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ВидыРасчетаПериода.ВидРасчета КАК ВидРасчета,
	|	ПРЕДСТАВЛЕНИЕ(вт_ВидыРасчетаПериода.ВидРасчета) КАК ВидРасчетаПредставление
	|ИЗ
	|	вт_ВидыРасчетаПериода КАК вт_ВидыРасчетаПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ВидыПериодовАренды.ВытесняющиеВидыРасчета КАК ВидыПериодовАрендыВытесняющиеВидыРасчета
	|		ПО вт_ВидыРасчетаПериода.ВидРасчета = ВидыПериодовАрендыВытесняющиеВидыРасчета.Ссылка
	|			И (&ВидРасчета = ВидыПериодовАрендыВытесняющиеВидыРасчета.ВидРасчета)
	|ГДЕ
	|	ВидыПериодовАрендыВытесняющиеВидыРасчета.Ссылка ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ДоговорАренды", ДоговорАренды);
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДатаОкончания));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'За период с %1 по %2  используется вид расчета %3 для которого
				|не установлен в качестве вытесняющего вид расчета %4.
				|Для Корректной работы системы необходимо настроить вытеснение в форме вида расчета.'"),
				Формат(ДатаНачала, "ДЛФ=D"),
				Формат(ДатаОкончания, "ДЛФ=D"),
				Выборка.ВидРасчетаПредставление, ВидРасчета), 
			Выборка.ВидРасчета,
			,, Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
