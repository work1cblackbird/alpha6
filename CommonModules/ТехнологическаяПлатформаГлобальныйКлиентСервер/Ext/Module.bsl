// Общий глобальный модуль "Технологическая платформа (глобальный, клиент/сервер)"


#Область СлужебныеПроцедурыИФункции

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Позволяет определить есть ли среди реквизитов объекта реквизит с переданным именем.
//
// Параметры:
//  Объект            - Объект, среди реквизитов которого производится поиск.
//  ИмяРеквизита      - Строковое имя искомого реквизита.
//  ИмяТабличнойЧасти - Строковое имя табличной части документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - Нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизит(Объект, ИмяРеквизита=Неопределено, ИмяТабличнойЧасти=Неопределено) Экспорт
	
	Возврат ЗащищенныеФункцииСервер.ЕстьРеквизитЗащита(Объект, ИмяРеквизита, ИмяТабличнойЧасти);
	
КонецФункции // ЕстьРеквизит()

#КонецЕсли

// Получение значение из структуры
//
// Параметры:
//  Структура           - Структура    - Структура, у которой нужно получить значение.
//  ИмяПараметра        - Строка       - Имя параметры структуры.
//  ЗначениеПоУмолчанию - Произвольный - Значение, которое подставится если параметр отсутствует или пустой.
//
Функция ПолучитьЗначениеПараметраСтруктуры(Структура, ИмяПараметра, ЗначениеПоУмолчанию=Неопределено) Экспорт
	
	ТипСтруктуры = ТипЗнч(Структура);
	
	Если ТипСтруктуры=Тип("Структура") ИЛИ ТипСтруктуры=Тип("ДанныеФормыСтруктура") ИЛИ ТипСтруктуры=Тип("ДанныеФормыЭлементКоллекции") ИЛИ ТипСтруктуры=Тип("ДанныеФормыЭлементДерева") Тогда
		// Проверка наличия свойства возможна
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ЗначениеПараметра = Неопределено;
	Структура.Свойство(ИмяПараметра, ЗначениеПараметра);
	
	Если ЗначениеПараметра = Неопределено Тогда
		ЗначениеПараметра = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции // ПолучитьЗначениеПараметраСтруктуры()

// Процедура используется для регистрации сообщений пользователю
//
// Параметры: 
//  ТекстСообщения - Строка - Текст, который должен быть показан , среди реквизитов которого производится поиск.
//  Объект                  - Объект, к основной форме которого привязываются выводимые сообщения.
//  Поле           - Строка - Поле, возле которого должно быть показано окно сообщения.
//  
// 
Процедура ВывестиСообщение(Знач ТекстСообщения, Знач Объект = Неопределено, Знач Поле = "", 
		НомерСтроки = Неопределено, Отказ = ЛОЖЬ, Знач Параметр1 = Неопределено, 
		Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено, 
		Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено, Знач Параметр7 = Неопределено, 
		Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	// Производим подстановку номера строки в данные сообщения
	Если НЕ НомерСтроки=Неопределено Тогда
		Поле           = СтрЗаменить(Поле,           "#", Формат(НомерСтроки-1, "ЧН=0; ЧГ=0"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "#", Формат(НомерСтроки  , "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	// Производим подстановку в текст сообщения значений переданных параметров
	Если СтрНайти(ТекстСообщения, "%") > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Параметр1), СокрЛП(Параметр2), СокрЛП(Параметр3), СокрЛП(Параметр4), СокрЛП(Параметр5), СокрЛП(Параметр6), СокрЛП(Параметр7), СокрЛП(Параметр8), СокрЛП(Параметр9));
	КонецЕсли;
	
	Если СтрНайти(ТекстСообщения, "$") > 0 Тогда
		Для Сч = 1 По 9 Цикл
			ИмяПараметра = "$" + Формат(Сч, "ЧГ=0");
			Если СтрНайти(ТекстСообщения, ИмяПараметра) > 0 Тогда
				
				// !!!_ Получить синоним реквизита по имени из параметра и обновим значение текущего параметра.
				ПредставлениеПоля = Вычислить("Параметр" + Формат(Сч, "ЧГ=0"));
				
				// Произведем подстановку полученного значения в строку сообщения
				ТекстСообщения = СтрЗаменить(ТекстСообщения, ИмяПараметра, ПредставлениеПоля);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Создаем новую структуру для вывода сообщения
	Сообщение = Новый СообщениеПользователю;
	
	// Устанавливаем текст сообщения и имя реквизита объекта/формы, к которому следует привязать сообщение.
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Поле  = Строка(Поле);
	
	// Заполним поля "Ключ данных" и "Путь к данным" в зависимости от типа переданного объекта.
	Если ТипЗнч(Объект)=Тип("Строка") Тогда
		
		// Сообщение будет выведено в текущей форме, и привязано к объекту,
		// имя реквизита которого указано в переменной Объект.
		Сообщение.КлючДанных              = Неопределено;
		Сообщение.ПутьКДанным             = Объект;
		
	ИначеЕсли ТипЗнч(Объект)=Тип("ДанныеФормыСтруктура") Тогда
		
		// Сообщение будет выведено в текущей форме, и привязано к реквизиту формы Объект
		Сообщение.КлючДанных              = Неопределено;
		Сообщение.ПутьКДанным             = "Объект";
		
	ИначеЕсли ТипЗнч(Объект)=Тип("УникальныйИдентификатор") Тогда
		
		// Сообщение будет выведено в форме с указанным идентификатором и привязано к основному объекту формы.
		Сообщение.ИдентификаторНазначения = Объект;
		Сообщение.КлючДанных              = Неопределено;
		Сообщение.ПутьКДанным             = "";
		               
	ИначеЕсли НЕ Объект=Неопределено Тогда
		
		#Если Клиент Тогда
			// Воспользуемся стандартным механизмом привязки сообщений к форме и ее реквизиту, в котором находиться объект.
			Сообщение.УстановитьДанные(Объект);
		#Иначе
			Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) Тогда
				// Сообщение будет выведено в текущей форме, и привязано к объекту,
				// имя реквизита которого указано в переменной Объект.
				Сообщение.КлючДанных              = Объект;
				Сообщение.ПутьКДанным             = "";
			Иначе
				// Воспользуемся стандартным механизмом привязки сообщений к форме и ее реквизиту, в котором находиться объект.
				Сообщение.УстановитьДанные(Объект);
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	// Производим вывод подготовленного сообщения
	Сообщение.Сообщить();
	
	// Взводим признак возникновения ошибки
	Отказ = ИСТИНА;
	
КонецПроцедуры // ВывестиСообщение()

// Процедура используется для регистрации сообщений пользователю
//
// Параметры: 
//  ТекстСообщения - Строка - Текст, который должен быть показан , среди реквизитов которого производится поиск.
//  Объект                  - Объект, к основной форме которого привязываются выводимые сообщения.
//  Поле           - Строка - Поле, возле которого должно быть показано окно сообщения.
//  
// 
Процедура ВывестиСообщениеПоКоду(Знач Код, Знач Объект = Неопределено, Знач Поле = "", НомерСтроки = Неопределено, 
			Отказ = ЛОЖЬ, Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено, 
			Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено, 
			Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СписокКодов = ТехнологическаяПлатформаВызовСервераПовтИсп.ПолучитьЗначенияВсехКодовСообщений();

	НайденныйКод = СписокКодов.Получить(Код);
	Если НайденныйКод = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось идентифицировать код'") + " " + Код + " " + НСтр("ru = 'в макете ""коды сообщений об ошибках.'"); 
	Иначе
		ТекстСообщения = НайденныйКод;
	КонецЕсли;
	
	ВывестиСообщение(ТекстСообщения, Объект, Поле, НомерСтроки, Отказ, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);	
	
КонецПроцедуры // ВывестиСообщение()

// Позволяет определить есть ли среди реквизитов объекта, реквизит с переданным именем.
//
// Параметры:
//  Объект       - Объект, среди реквизитов которого производится поиск.
//  ИмяРеквизита - Строковое имя искомого реквизита.
//
// Возвращаемое значение:
//  Истина - Нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитНаКлиенте(Объект, ИмяРеквизита = Неопределено) Экспорт
	
	// Осуществим базовые проверки наличия поля у переданного объекта
	Если Объект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		Возврат Объект.Свойство(ИмяРеквизита);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		Возврат Объект.Свойство(ИмяРеквизита);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат Объект.Свойство(ИмяРеквизита);
	КонецЕсли;
	
	// Определим значение, которое будем считать эталонным
	НеЗаполненноеЗначение = Новый УникальныйИдентификатор();
	
	// Формируем структуру для проверки наличия поля у объекта
	ПриемникДанных = Новый Структура(ИмяРеквизита, НеЗаполненноеЗначение);
	
	// Осуществляем копирование значения поля из переданного объекта
	ЗаполнитьЗначенияСвойств(ПриемникДанных, Объект);
	
	// Реквизит у объекта есть, если поле приемника поменяло значение
	Возврат (НЕ ПриемникДанных[ИмяРеквизита] = НеЗаполненноеЗначение);
	
КонецФункции // ЕстьРеквизитНаКлиенте()

// Используется только для упрощения процесса отладки, не предполагается обработка события внутри процедуры.
//
Процедура ПричинаОшибки(Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено, 
			Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено, 
			Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Информация = ИнформацияОбОшибке();
	
	#Если Сервер Тогда
		Сообщения = ПолучитьСообщенияПользователю(ЛОЖЬ);
	#КонецЕсли
	
	ТочкаОстанова = ИСТИНА;
	
КонецПроцедуры // ПричинаОшибки()

// Используется для упрощения получения основного объекта формы
//
// Параметры:
//  Форма	 - УправляемаяФорма		- Форма, в которой лежит "объект".
//  Объект	 - ДанныеФормыСтруктура - Будет использован объект, переданные через параметр.
//  		 - Неопределено 		- Будет использован объект из формы.
//
Процедура ПолучитьОсновнойОбъектФормы(Форма, Объект) Экспорт
	
	// Если объект уже определен, то ничего выполнять не требуется
	Если НЕ Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем в зависимости от контекста вызова
	#Если Клиент Тогда
		Если ЕстьРеквизитНаКлиенте(Форма, "Объект") Тогда
			Объект = Форма.Объект;
		КонецЕсли;
		
	#ИначеЕсли Сервер ИЛИ ВнешнееСоединение Тогда
		Если ЕстьРеквизит(Форма, "Объект") Тогда
			Объект = Форма.Объект;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры // ПолучитьОсновнойОбъектФормы()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПАРАМЕТРАМИ СЕАНСА

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// Получает значение переменной из структуры параметров сеанса «ОбщегоНазначения».
//
// Параметры
//  ИмяПараметра   - Строка  - Имя получаемой переменной.
//
// Возвращаемое значение:
//   Произвольный  - Полученное значение переменной.
//
Функция ЗначениеПеременнойСеанса(ИмяПараметра) Экспорт
	
	// Получаем структуру переменных из параметров сеанса.
	СтруктураОбщихЗначений = ПараметрыСеанса.ОбщиеЗначения.Получить();
	ПолученноеЗначение     = Неопределено;
	
	Если ТипЗнч(СтруктураОбщихЗначений) = Тип("Структура") Тогда
		
		// Ищем значение в структуре
		СтруктураОбщихЗначений.Свойство(ИмяПараметра, ПолученноеЗначение);
		
	КонецЕсли;
	
	Возврат ПолученноеЗначение;
	
КонецФункции

// Устанавливает значение переменной в структуре параметров сеанса «ОбщегоНазначения».
//
// Параметры
//  ИмяПараметра       - Строка        - Имя устанавливаемой переменной.
//  ЗначениеПараметра  - Произвольный  - Значение устанавливаемой переменной.
//
Процедура ЗначениеПеременнойСеансаУстановить(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	// Получаем структуру переменных из параметров сеанса.
	СтруктураОбщихЗначений = ПараметрыСеанса.ОбщиеЗначения.Получить();
	
	// Если структура еще не была инициализирована, создаем ее.
	Если НЕ ТипЗнч(СтруктураОбщихЗначений) = Тип("Структура") Тогда
		
		СтруктураОбщихЗначений = Новый Структура;
		
	КонецЕсли;
	
	// Устанавливаем значение в структуру переменных.
	СтруктураОбщихЗначений.Вставить(ИмяПараметра, ЗначениеПараметра);
	
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(СтруктураОбщихЗначений);
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти