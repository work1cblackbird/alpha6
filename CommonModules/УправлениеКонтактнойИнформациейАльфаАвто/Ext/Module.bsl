#Область ПрограммныйИнтерфейс

// Подгоняет номер телефона под маску
//
// Параметры:
//  ВладелецКИ - Строка - Владелец телефона для которого происходит преобразование.
// 
// Возвращаемое значение:
//  Строка - Номер телефона
//
Функция ТелефонДляМаски(ВладелецКИ) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ВладелецКИ);
	
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.
		КонтактнаяИнформацияОбъектов(МассивОбъектов,, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
	
	Если КонтактнаяИнформацияОбъекта.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураТелефона = УправлениеКонтактнойИнформациейЛокализация.
		ДесериализацияТелефона(КонтактнаяИнформацияОбъекта[0].ЗначенияПолей);
	
	Возврат СтруктураТелефона.Представление;
	
КонецФункции

// Формирует номер телефона под маску
//
// Параметры:
//  ЗначениеПолейТелефона	 - Строка - данные значений полей
// 
// Возвращаемое значение:
//  Строка - строка с номером телефона
//
Функция СформироватьНомерТелефона(ЗначениеПолейТелефона) Экспорт
	
	Если ЗначениеПолейТелефона = "" Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураТелефона = УправлениеКонтактнойИнформациейЛокализация.ДесериализацияТелефона(ЗначениеПолейТелефона);
	
	Результат = "";
	
	Если ТипЗнч(СтруктураТелефона) = Тип("ОбъектXDTO") Тогда
		
		Результат = СтруктураТелефона.Представление;		
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновить список выбора КИ
//
// Параметры:
//  ОбъектыОбновления	 - Массив, СправочникСсылка.Контрагенты	 - Объект, для которого тредуется обновить КИ
//  Форма				 - УправляемаяФорма						 - Форма, на которой будет обновлятся КИ
//  Типы				 - Строка								 - Типы контактной информации через запятую
//  Поля				 - Строка								 - Поля формы, в соответствии с типами контактной информации и в том же порядке.
//
Процедура ОбновитьСписокВыбораКИ(ОбъектыОбновления, Форма, Типы, Поля) Экспорт
	
	МассивОбъектов = Новый Массив;
	
	Если ТипЗнч(ОбъектыОбновления) <> Тип("Массив") Тогда
		
		Если ТипЗнч(ОбъектыОбновления) <> Тип("СправочникСсылка.Контрагенты") Тогда
			
			ПоляКИ = СтрРазделить(Поля, ",");
			ОчиститьСпискиВыбора(Форма, ПоляКИ);
			Возврат;
			
		КонецЕсли;
		
		МассивОбъектов.Добавить(ОбъектыОбновления);
		
	Иначе
		
		МассивОбъектов = ОбъектыОбновления;
		
	КонецЕсли;
	
	ТипыКИ = ТипыКонтактнойИнформацииПоИменам(СтрРазделить(Типы, ","));
	ПоляКИ = СтрРазделить(Поля, ",");
	
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипыКИ,,ТекущаяДатаСеанса());
	
	СтруктураСоответвия = СоответствиеПолейТипам(Форма, ТипыКИ, ПоляКИ);
	
	Для Каждого ОбъектКи Из КонтактнаяИнформацияОбъекта Цикл
		
		ПредставлениеТипа = СтрЗаменить(Строка(ОбъектКи.Тип), " ", "");
		ЗначениеПоля = ПолучитьЗначениеПараметраСтруктуры(СтруктураСоответвия, ПредставлениеТипа);
		
		// Если телефон, то сначала сформируем номер
		Если ПредставлениеТипа = "Телефон" Тогда
			
			ЗначенияПолейКИ = ОпределитьЗначенияПолей(ОбъектКи);
			ТипКонтактнойИнформацииТелефон = Перечисления.ТипыКонтактнойИнформации.Телефон;
			
			Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ЗначенияПолейКИ) Тогда
				
				Данные = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ЗначенияПолейКИ, ТипКонтактнойИнформацииТелефон);
				
			Иначе
				
				Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолейКИ) Тогда
					
					РезультатыЧтения = Новый Структура;
					КонтактнаяИнформация = УправлениеКонтактнойИнформациейЛокализация
						.КонтактнаяИнформацияИзXML(ЗначенияПолейКИ, ТипКонтактнойИнформацииТелефон, РезультатыЧтения);
					
					Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
						
						КонтактнаяИнформация.Представление = ОбъектКи.Представление;
						
					КонецЕсли;
					
				Иначе
					
					КонтактнаяИнформация = УправлениеКонтактнойИнформациейЛокализация.ДесериализацияТелефона(ЗначенияПолейКИ, ОбъектКи.Представление, ТипКонтактнойИнформацииТелефон);
					
				КонецЕсли;
				
				Данные = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация, ТипКонтактнойИнформацииТелефон);
				
			КонецЕсли;
			
			ЗначениеПоляТелефон = Данные.Value;	
			
			Если ПустаяСтрока(ЗначениеПоляТелефон) Тогда
				
				ЗначениеПоляТелефон = ОбъектКи.Представление;
				
			КонецЕсли;
			
			НовоеПолеКИ = ЗначениеПоля.Добавить(ЗначениеПоляТелефон, ОбъектКи.Представление);
			
		Иначе
			
			НовоеПолеКИ = ЗначениеПоля.Добавить(ОбъектКи.Представление, ОбъектКи.Представление);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Разделяет телефон на составные части.
//
// Параметры:
//  Телефон - Строка - Представление телефона
// 
// Возвращаемое значение:
//  Структура - с полями:
//  * КодСтраны - Строка;
//  * КодРегиона - Строка - Дублирует код страны, есть объекты с разным названием реквизита;
//  * КодГорода - Строка;
//  * НомерТелефона - Строка;
//  * ВнутреннийНомер - Строка;
//  * Добавочный - Строка - Дублирует внутренний номер, есть объекты с разным названием реквизита;
//
Функция РазделитьТелефон(Знач Телефон) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодСтраны", "");
	Результат.Вставить("КодРегиона", "");
	Результат.Вставить("КодГорода", "");
	Результат.Вставить("НомерТелефона", "");
	Результат.Вставить("ВнутреннийНомер", "");
	Результат.Вставить("Добавочный", "");
	
	Если ПустаяСтрока(Телефон) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(Телефон, "+") Тогда
		
		Телефон = Прав(Телефон, СтрДлина(Телефон) - 1);
		
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(Телефон, "(");
	Результат.КодРегиона = СокрЛП(Лев(Телефон, ПозицияРазделителя - 1));
	Результат.КодСтраны  = Результат.КодРегиона;
	Телефон = Сред(Телефон, ПозицияРазделителя);
		
	ПозицияРазделителя = СтрНайти(Телефон, ")");
	Результат.КодГорода = СокрЛП(СтрЗаменить(СтрЗаменить(Лев(Телефон, ПозицияРазделителя), "(", ""), ")", ""));
	Телефон = Сред(Телефон, ПозицияРазделителя + 1);
		
	Если СтрНайти(Телефон, "доб") = 0 Тогда
		
		Результат.НомерТелефона = СокрЛП(Телефон);
		
	Иначе
		
		ПозицияРазделителя = СтрНайти(Телефон, "доб");
		Результат.НомерТелефона =  СокрЛП(СтрЗаменить(Лев(Телефон, ПозицияРазделителя - 1), ", ", ""));
		Телефон = Сред(Телефон, ПозицияРазделителя);
		
		ПозицияСдвига = 4;
		
		Если Найти(Телефон, "доб. ") > 0 Тогда
			
			ПозицияСдвига = 5;
			
		КонецЕсли;
		
		Результат.ВнутреннийНомер = СокрЛП(Прав(Телефон, СтрДлина(Телефон) - ПозицияСдвига));
		Результат.Добавочный = Результат.ВнутреннийНомер;
		
	КонецЕсли;
	
	Результат.КодРегиона      = УбратьРазделителиВНомерТелефона(Результат.КодРегиона);
	Результат.КодГорода       = УбратьРазделителиВНомерТелефона(Результат.КодГорода);
	Результат.НомерТелефона   = УбратьРазделителиВНомерТелефона(Результат.НомерТелефона);
	Результат.ВнутреннийНомер = УбратьРазделителиВНомерТелефона(Результат.ВнутреннийНомер);
	Результат.Добавочный      = УбратьРазделителиВНомерТелефона(Результат.Добавочный);
	Результат.КодСтраны       = УбратьРазделителиВНомерТелефона(Результат.КодСтраны);
	
	Возврат Результат;
	
КонецФункции

// Сохраняет телефон в табличную часть владельца контактной информации. Предварительно развбие его на части,
// проверив корректность заполения и сформировав служебную информацию.
//
// Параметры:
//  Владелец - СправочникСсылка.Контрагенты	 - Объект обновления для которого обновляется. 
//  Телефон - Строка - Представление телефон. 
//  Комментарий - Строка - комментарий.
//  Отказ - Булево - Отказ от записи.
//
Процедура СохранитьТелефон(Владелец, Телефон, Комментарий, Отказ = Ложь) Экспорт
	
	Если ПустаяСтрока(Телефон) Или Не ЗначениеЗаполнено(Владелец) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураТелефона = РазделитьТелефон(Телефон);

	ПространствоИмен = УправлениеКонтактнойИнформациейЛокализация.ПространствоИмен();
	
	Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
	ЗаполнитьЗначенияСвойств(Данные, СтруктураТелефона);
	Данные.Номер = СтруктураТелефона.НомерТелефона;
	
	ДанныеТелефон = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	ДанныеТелефон.Представление = Телефон;
	ДанныеТелефон.Состав = Данные;
	ДанныеТелефон.Комментарий = Комментарий;
	
	НомерТелефона = УбратьРазделителиВНомерТелефона(Данные.КодСтраны + Данные.КодГорода + Данные.Номер);
	
	ОбъектКонтрагент = Владелец.ПолучитьОбъект();
	
	Попытка
		
		ОбъектКонтрагент.Заблокировать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление контактной информации контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Контрагенты,
			Владелец,
			НСтр("ru = 'Не удалось обновить номер телефона контрагента, т. к. объект был заблокирован.'")
		);
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'В карточку контрагента ""%1"" не удалось записать телефон'"),
				Владелец
			)
		);
		Возврат;
		
	КонецПопытки;
	
	НомерТелефонаДляПоиска = НомерТелефона;
	Поз = СтрНайти(НомерТелефонаДляПоиска, ",");
	
	Если Поз <> 0 Тогда
		
		НомерТелефонаДляПоиска = Лев(НомерТелефонаДляПоиска, Поз - 1);
		
	КонецЕсли;
	
	Поз = СтрНайти(НомерТелефонаДляПоиска, Символы.ПС);
	
	Если Поз <> 0 Тогда
		
		НомерТелефонаДляПоиска = Лев(НомерТелефонаДляПоиска, Поз - 1);
		
	КонецЕсли;
	
	РазрешитьВводНесколькихЗначений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		"РазрешитьВводНесколькихЗначений"
	);
	Если Не РазрешитьВводНесколькихЗначений Тогда
		
		НайденныеСтрокиКИ = ОбъектКонтрагент.КонтактнаяИнформация.НайтиСтроки(
			Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон)
		);
		Для Каждого Строка Из НайденныеСтрокиКИ Цикл
			ОбъектКонтрагент.КонтактнаяИнформация.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	НайденныеСтрокиКИ = ОбъектКонтрагент.КонтактнаяИнформация.НайтиСтроки(
		Новый Структура("Тип,НомерТелефона", Перечисления.ТипыКонтактнойИнформации.Телефон, НомерТелефонаДляПоиска)
	);
	НайденныеСопаденияСтрокКИ = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из НайденныеСтрокиКИ Цикл
		
		ДанныеНомераТелефона = УправлениеКонтактнойИнформациейЛокализация.ДесериализацияТелефона(
			ТекущаяСтрока.ЗначенияПолей,
			ТекущаяСтрока.Представление
		);
		
		Если
			ДанныеНомераТелефона.Состав.Добавочный = Данные.Добавочный
			Или (ПустаяСтрока(ДанныеНомераТелефона.Состав.Добавочный) И ПустаяСтрока(Данные.Добавочный))
			Или (СтрЗаменить(ДанныеНомераТелефона.Состав.Добавочный, " ", "") = СтрЗаменить(Данные.Добавочный, " ", ""))
		Тогда
				
			НайденныеСопаденияСтрокКИ.Добавить(ТекущаяСтрока);
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеПолей = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOВXML(ДанныеТелефон);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(
		ОбъектКонтрагент,
		ЗначениеПолей,
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Телефон
	);
	ТелефоныКонтрагентов = ОбъектКонтрагент.КонтактнаяИнформация.НайтиСтроки(
		Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента)
	);
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюДляСписков(ОбъектКонтрагент);
	
	ОбъектКонтрагент.ОбменДанными.Загрузка = Истина;
	
	Попытка
		
		ОбъектКонтрагент.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление контактной информации контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Контрагенты,
			Владелец,
			СтрШаблон(
				НСтр("ru = 'Не удалось обновить номер телефона контрагента: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			)
		);
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = '%1'"), Владелец));
		
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет email в табличную часть владельца контактной информации. Предварительно проверив корректность заполения
// и сформировав служебную информацию.
//
// Параметры:
//  Владелец - СправочникСсылка.Контрагенты	 - Объект обновления для которого обновляется 
//  АдресЭлектроннойПочты - Строка - Представление email
//  Отказ - Булево - Отказ от записи.
//
Процедура СохранитьЭлектроннуюПочту(Владелец, АдресЭлектроннойПочты, Отказ = Ложь) Экспорт
	
	Если Владелец = Справочники.Контрагенты.ПустаяСсылка() Или Не ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейЛокализация.ПространствоИмен();
	
	Почта = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
	Данные.Значение  = АдресЭлектроннойПочты;
	
	Почта.Представление = АдресЭлектроннойПочты;
	Почта.Состав        = Данные;
	
	ОбъектКонтрагент    = Владелец.ПолучитьОбъект();  
	
	РазрешитьВводНесколькихЗначений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
		"РазрешитьВводНесколькихЗначений"
	);
	Если Не РазрешитьВводНесколькихЗначений Тогда
		
		НайденныеСтрокиКИ = ОбъектКонтрагент.КонтактнаяИнформация.НайтиСтроки(
			Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		);
		Для Каждого Строка Из НайденныеСтрокиКИ Цикл
			ОбъектКонтрагент.КонтактнаяИнформация.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	XDTOЗначениеПолей   = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOПоПредставлению(
		АдресЭлектроннойПочты,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
	);
	ЗначениеПолей = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOВXML(XDTOЗначениеПолей);
	НайденныеСтрокиКИ = ОбъектКонтрагент.КонтактнаяИнформация
		.НайтиСтроки(Новый Структура("Представление", АдресЭлектроннойПочты));
	
	Если НайденныеСтрокиКИ.Количество() = 0 Тогда
			
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(
			ОбъектКонтрагент,
			ЗначениеПолей,
			Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
		);
		ПочтаКонтрагентов = ОбъектКонтрагент.КонтактнаяИнформация
			.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента));
		
		Попытка
			
			ОбъектКонтрагент.Записать();
			
		Исключение
			
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(Нстр("ru = 'В карточку контрагента ""%1"" не удалось записать адрес электронной почты'"), Владелец)
			);
			
		КонецПопытки;
	
	КонецЕсли;

КонецПроцедуры

// Заполняет в документе системные поля для контактной информации в формате JSON
//
// Параметры:
//  Объект     - ДанныеФормыСтруктура         - Документ в котором нужно заполнить значения.
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на поле контрагента.
//
Процедура ЗаполнитьКонтактнуюИнформациюВДокументе(Объект, Контрагент, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) Тогда 
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Объект.ПредставлениеТелефона        = "";
			Объект.АдресЭлектроннойПочты        = "";
			Объект.ПредставлениеТелефонаСтрокой = "";
			Объект.АдресЭлектроннойПочтыСтрокой = "";
			
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(Контрагент);
			
			НайденныеТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
				МассивОбъектов,
				Перечисления.ТипыКонтактнойИнформации.Телефон,
				,
				ТекущаяДатаСеанса()
			);
			Если НайденныеТелефоны.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеТелефоны[0];
				Если ТипЗнч(ПараметрыДействия) = Тип("Структура") И ПараметрыДействия.Свойство("ТелефонИзДанныхВыбора") Тогда
					ПараметрыОтбора = Новый Структура("Представление", ПараметрыДействия.ТелефонИзДанныхВыбора);
					НайденныеСтроки = НайденныеТелефоны.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденнаяСтрока = НайденныеСтроки[0];
					КонецЕсли;
				КонецЕсли;
				Объект.ПредставлениеТелефонаСтрокой = НайденнаяСтрока.Значение;
				Объект.ПредставлениеТелефона        = НайденнаяСтрока.Представление;
			КонецЕсли;
			
			НайденныеЭлектронныеПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
				МассивОбъектов,
				Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
				,
				ТекущаяДатаСеанса()
			);
			Если НайденныеЭлектронныеПочты.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеЭлектронныеПочты[0];
				Если ТипЗнч(ПараметрыДействия) = Тип("Структура") И ПараметрыДействия.Свойство("АдресИзДанныхВыбора") Тогда
					ПараметрыОтбора = Новый Структура("Представление", ПараметрыДействия.АдресИзДанныхВыбора);
					НайденныеСтроки = НайденныеЭлектронныеПочты.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденнаяСтрока = НайденныеСтроки[0];
					КонецЕсли;
				КонецЕсли;
				Объект.АдресЭлектроннойПочтыСтрокой = НайденнаяСтрока.Значение;
				Объект.АдресЭлектроннойПочты        = НайденнаяСтрока.Представление;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Объект.ПредставлениеТелефона        = "";
		Объект.АдресЭлектроннойПочты        = "";
		Объект.ПредставлениеТелефонаСтрокой = "";
		Объект.АдресЭлектроннойПочтыСтрокой = "";
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в документе системные поля для контактной информации в формате JSON из документа Событие
//
// Параметры:
//  Событие    - ДокументСсылка.Событие	- Документ "Событие", из которого будет получена контактная информация.
//  Объект     - ДокументОбъект         - Документ в котором нужно заполнить значения.
//  ПараметрыДействия - Структура 		- Дополнительная информация для обработчика.
//
Процедура ЗаполнитьКонтактнуюИнформациюИзСобытия(Событие, Объект, ПараметрыДействия = Неопределено) Экспорт
	
	КонтактыИзСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Событие,"ПредставлениеТелефона,АдресЭлектроннойПочты");
	
	ДанныеКЗаполнению = Новый Структура;
	ДанныеКЗаполнению.Вставить("ПредставлениеТелефона", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента); 
	ДанныеКЗаполнению.Вставить("АдресЭлектроннойПочты", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента); 
	
	Для каждого КонтактныеДанные Из ДанныеКЗаполнению Цикл
		
		ПредставлениеТелефонаОснования = КонтактыИзСобытия[КонтактныеДанные.Ключ];
		Если НЕ ПустаяСтрока(ПредставлениеТелефонаОснования) Тогда
		
			Объект[КонтактныеДанные.Ключ] = ПредставлениеТелефонаОснования;
			КонтактВJSON = КонтактныеДанные.Ключ + "Строкой";
			Объект[КонтактВJSON] = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
				ПредставлениеТелефонаОснования,
				КонтактныеДанные.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получение глубокого свойства объекта.
// 
// Параметры:
//  ОбъектXTDO - ОбъектXDTO
//  XPath -Строка
// 
// Возвращаемое значение:
//  ОбъектXDTO
//
Функция ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath) Экспорт
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Результат = ОбъектXTDO.Получить(СтрокаСвойств);
		Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда 
			Возврат Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Устанавливает маску телефона в полях ввода
//
// Параметры:
//  ИнформацияОВидеКИ 
//  Форма
//  ИмяРеквиззита
//
Процедура УстановитьСвойстваПоляВводаТелефона(ИнформацияОВидеКИ, Знач Реквизит, Элемент) Экспорт
	
	Если ИнформацияОВидеКИ.ВводитьНомерПоМаске Тогда
		НомерТелефонаСоответствуетМаске = УправлениеКонтактнойИнформациейСлужебный.НомерТелефонаСоответствуетМаске(
			Реквизит,
			ИнформацияОВидеКИ.МаскаНомераТелефона
		);
		Если ПустаяСтрока(Реквизит) ИЛИ НомерТелефонаСоответствуетМаске Тогда
			Элемент.Маска = ИнформацияОВидеКИ.МаскаНомераТелефона;
		Иначе
			Элемент.Маска = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Очищает реквизит ПредставлениеТелефона в документах, если установлена маска, но номер не указан
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - объект, в котором произошло событие
//
Процедура ПроверитьТелефонСМаскойПередЗаписью(ДокументОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.ПредставлениеТелефона)
		И Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ВводитьНомерПоМаске Тогда
		
		СоставныеЧасти = УправлениеКонтактнойИнформациейАльфаАвто.РазделитьТелефон(ДокументОбъект.ПредставлениеТелефона);
		Если ПустаяСтрока(СоставныеЧасти.КодГорода) И ПустаяСтрока(СоставныеЧасти.НомерТелефона)
			И ПустаяСтрока(СоставныеЧасти.Добавочный) И ПустаяСтрока(СоставныеЧасти.ВнутреннийНомер)Тогда
			ДокументОбъект.ПредставлениеТелефона = "";
			ДокументОбъект.ПредставлениеТелефонаСтрокой = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиОбновленияИБ

// Обновление предопределенных видов контактной информации.
//
Процедура ОбновитьПредопределенныеВидыКИ() Экспорт
	
	ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов();
	ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций();
	ОбновитьПредопределенныеВидыКонтактнойИнформацииПодразделенийКомпании();
	ОбновитьПредопределенныеВидыКонтактнойИнформацииСотрудников();
	ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей();
	
КонецПроцедуры

// Обновление предопределенных видов контактной информации для пользователей.
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей() Экспорт
	
	ГруппаКИПользователя     = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
	ГруппаКИПользователя.Имя = "СправочникПользователи";
	ГруппаКИПользователя.Наименование = НСтр("ru='Контактная информация справочника ""Пользователи""'");
	
	СсылкаГруппаКИСотрудкика = УправлениеКонтактнойИнформацией
		.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаКИПользователя);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Телефон
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий;
	Вид.Группа = ГруппаКИПользователя;
	Вид.Имя = "CRM_ТелефонПользователяРабочий";
	Вид.Наименование = НаименованияВидов().РабочийТелефон;
	Вид.ВидРедактирования = "ПолеВводаИДиалог";
	Вид.Порядок = 3;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
КонецПроцедуры

// см. ОбновлениеИнформационнойБазыАвтосалон.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик                      = Обработчики.Добавить();
	Обработчик.Версия               = "6.1.01.03";
	Обработчик.НачальноеЗаполнение  = Ложь;
	Обработчик.Процедура            = "УправлениеКонтактнойИнформациейАльфаАвто.ВыполнитьПереходНаНовуюВерсиюДляКонтрагентов";
	Обработчик.РежимВыполнения      = "Отложенно";
	Обработчик.ПроцедураПроверки    = "УправлениеКонтактнойИнформациейАльфаАвто.ВыполненПереходНаНовуюВерсию";
	Обработчик.Идентификатор        = Новый УникальныйИдентификатор("83d5c5dd-1262-3d72-ab98-f8f5daa0664d");
	Обработчик.БлокируемыеОбъекты   = "Справочник.Контрагенты";
	Обработчик.Комментарий          = НСтр("ru = 'Выполняем обновление служебных реквизитов контактной информации контрагентов.
	                                              |Контрагенты временно недоступны.'");
	
	Обработчик 						= Обработчики.Добавить();
	Обработчик.Версия 				= "6.1.01.03";
	Обработчик.НачальноеЗаполнение  = Ложь;
	Обработчик.Процедура 			= "УправлениеКонтактнойИнформациейАльфаАвто.ВыполнитьПереходНаНовуюВерсиюДляОрганизаций";
	Обработчик.РежимВыполнения 		= "Отложенно";
	Обработчик.ПроцедураПроверки 	= "УправлениеКонтактнойИнформациейАльфаАвто.ВыполненПереходНаНовуюВерсию";
	Обработчик.Идентификатор        = Новый УникальныйИдентификатор("88d5c5dd-1262-3d72-ab98-f8f5daa0664d");
	Обработчик.БлокируемыеОбъекты   = "Справочник.Организации";
	Обработчик.Комментарий          = НСтр("ru = 'Выполняем обновление служебных реквизитов контактной информации организаций.
												 |Организации временно недоступны.'");
	
	Обработчик 						= Обработчики.Добавить();
	Обработчик.Версия 				= "6.1.01.03";
	Обработчик.НачальноеЗаполнение  = Ложь;
	Обработчик.Процедура 			= "УправлениеКонтактнойИнформациейАльфаАвто.ВыполнитьПереходНаНовуюВерсиюДляПодразделений";
	Обработчик.РежимВыполнения 		= "Отложенно";
	Обработчик.ПроцедураПроверки 	= "УправлениеКонтактнойИнформациейАльфаАвто.ВыполненПереходНаНовуюВерсию";
	Обработчик.Идентификатор        = Новый УникальныйИдентификатор("89d5c5dd-1262-3d72-ab98-f8f5daa0664d");
	Обработчик.БлокируемыеОбъекты   = "Справочник.ПодразделенияКомпании";
	Обработчик.Комментарий          = НСтр("ru = 'Выполняем обновление служебных реквизитов контактной информации подразделений.
												 |Подразделения компании временно недоступны.'");
	
	Обработчик 						= Обработчики.Добавить();
	Обработчик.Версия 				= "6.1.01.03";
	Обработчик.НачальноеЗаполнение  = Ложь;
	Обработчик.Процедура 			= "УправлениеКонтактнойИнформациейАльфаАвто.ВыполнитьПереходНаНовуюВерсиюДляСотрудников";
	Обработчик.РежимВыполнения 		= "Отложенно";
	Обработчик.ПроцедураПроверки 	= "УправлениеКонтактнойИнформациейАльфаАвто.ВыполненПереходНаНовуюВерсию";
	Обработчик.Идентификатор        = Новый УникальныйИдентификатор("84d5c5dd-1262-3d72-ab98-f8f5daa0664d");
	Обработчик.БлокируемыеОбъекты   = "Справочник.Сотрудники";
	Обработчик.Комментарий          = НСтр("ru = 'Выполняем обновление служебных реквизитов контактной информации сотрудников.
												 |Сотрудники временно недоступны.'");
			
	Обработчик                     = Обработчики.Добавить();
	Обработчик.Версия              = "6.1.01.31";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура           = "УправлениеКонтактнойИнформациейАльфаАвто.ЗаполнитьРеквизитыСтранМира";
	Обработчик.Комментарий         = НСтр("ru = 'Выполняем обновление удаленных видов контактной информации сотрудников.
	                                            |Сотрудники временно недоступны.'");
	
	Обработчик                     = Обработчики.Добавить();
	Обработчик.Версия              = "6.1.07.09";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Процедура           = "УправлениеКонтактнойИнформациейАльфаАвто.ЗаполнитьВидыКонтактнойИнформацииБезТипа";
	Обработчик.Комментарий         = НСтр("ru = 'Выполняем обновление видов контактной информации'");

КонецПроцедуры

// Заполнение в документах внутренних значений полей контактной информации в документах
Процедура ПеревестиКонтактнуюИнформациюДокументовНаНовыйФормат() Экспорт
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить("ЗаявкаНаАренду");
	МассивДокументов.Добавить("ЗаявкаНаРемонт");
	МассивДокументов.Добавить("РабочийЛист");
	МассивДокументов.Добавить("РабочийЛистКредитногоОтдела");
	МассивДокументов.Добавить("РабочийЛистВыкупаАвтомобиля");
	МассивДокументов.Добавить("РабочийЛистОтделаСтрахования"); 
	МассивДокументов.Добавить("СводныйРемонтныйЗаказ");
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		ИмяДокумента = "Документ." + Документ;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РабочийЛистОтделаСтрахования.Ссылка КАК Ссылка,
		|	РабочийЛистОтделаСтрахования.ПредставлениеТелефона КАК ПредставлениеТелефона,
		|	РабочийЛистОтделаСтрахования.ПредставлениеТелефонаСтрокой КАК ПредставлениеТелефонаСтрокой,
		|	РабочийЛистОтделаСтрахования.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
		|	РабочийЛистОтделаСтрахования.АдресЭлектроннойПочтыСтрокой КАК АдресЭлектроннойПочтыСтрокой
		|ИЗ
		|	" + ИмяДокумента + " КАК РабочийЛистОтделаСтрахования       
		|ГДЕ
		|	(РабочийЛистОтделаСтрахования.ПредставлениеТелефона <> """"
		|				И ВЫРАЗИТЬ(РабочийЛистОтделаСтрахования.ПредставлениеТелефонаСтрокой КАК СТРОКА(200)) = """")
		|			ИЛИ (РабочийЛистОтделаСтрахования.АдресЭлектроннойПочты <> """"
		|				И ВЫРАЗИТЬ(РабочийЛистОтделаСтрахования.АдресЭлектроннойПочтыСтрокой КАК СТРОКА(200)) = """")";
		
		Запрос.УстановитьПараметр("ИмяДокумента", ИмяДокумента);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ВидКонтактнойИнформацииТелефона = Новый Структура;
		ВидКонтактнойИнформацииТелефона.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
		
		ВидКонтактнойИнформацииЭлектроннойПочты = Новый Структура;
		ВидКонтактнойИнформацииЭлектроннойПочты.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокументДляИзменения = ВыборкаДетальныеЗаписи.Ссылка;
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ИмяДокумента);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументДляИзменения);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				НайденныйОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПредставлениеТелефона) И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПредставлениеТелефонаСтрокой) Тогда
					
					НайденныйОбъект.ПредставлениеТелефонаСтрокой = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ВыборкаДетальныеЗаписи.ПредставлениеТелефона,
					ВидКонтактнойИнформацииТелефона
					);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.АдресЭлектроннойПочты) И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.АдресЭлектроннойПочтыСтрокой) Тогда
					
					НайденныйОбъект.АдресЭлектроннойПочтыСтрокой = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
						ВыборкаДетальныеЗаписи.АдресЭлектроннойПочты,
						ВидКонтактнойИнформацииЭлектроннойПочты
					);
					
				КонецЕсли;
				
				НайденныйОбъект.ОбменДанными.Загрузка = Истина;
				НайденныйОбъект.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ИмяСобытия = СтрШаблон(НСтр("ru = '%1'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ИмяДокумента);
				
				ИнформацияОшибки = НСтр("ru = 'Не удалось изменить контактную информацию документа '")
				+ ДокументДляИзменения
				+ НСтр("ru = ' по причине ""'")
				+ ОписаниеОшибки()
				+ """."
				;
				
				ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы[Документ],
				ДокументДляИзменения,
				ИнформацияОшибки
				);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВидыКонтактнойИнформацииБезТипа() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
		|	ВидыКонтактнойИнформации.Родитель КАК Родитель
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)
		|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ГруппаКИ = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
		
		Если Выборка.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникСотрудники Тогда 
			ГруппаКИ.Имя = "СправочникСотрудники";
			ГруппаКИ.Наименование = НСтр("ru='Контактная информация справочника ""Сотрудники""'");
		ИначеЕсли Выборка.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПодразделенияКомпании Тогда
			ГруппаКИ.Имя = "СправочникПодразделенияКомпании";
			ГруппаКИ.Наименование = НСтр("ru='Контактная информация справочника ""Подразделения компании""'");
		ИначеЕсли Выборка.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации Тогда
		    ГруппаКИ.Имя = "СправочникОрганизации";
			ГруппаКИ.Наименование = НСтр("ru='Контактная информация справочника ""Организации""'"); 
		ИначеЕсли Выборка.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты Тогда	
			ГруппаКИ.Имя = "СправочникКонтрагенты";
			ГруппаКИ.Наименование = НСтр("ru='Контактная информация справочника ""Контрагенты и контакты""'");
		КонецЕсли;
	
		СсылкаГруппа = УправлениеКонтактнойИнформацией
			.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаКИ);

		Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
			Перечисления.ТипыКонтактнойИнформации.Другое
		);
		Вид.Вид = Выборка.Ссылка;
		Вид.Группа = СсылкаГруппа;
		Вид.Имя = Выборка.Наименование;
		Вид.Наименование = Выборка.Наименование;
		Вид.МожноИзменятьСпособРедактирования = Истина;
		Вид.РазрешитьВводНесколькихЗначений = Истина;
		УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеЗначенийВФорматеJSON

Процедура ВыполнитьПереходНаНовуюВерсиюДляКонтрагентов(Параметры) Экспорт
	
	ТребуютОбновления = ОбъектыТребующиеОбновленияКонтактнойИнформации(Метаданные.Справочники.Контрагенты, 1000);
		
	Если Не ЗначениеЗаполнено(ТребуютОбновления) Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ОбъектКОбновлению Из ТребуютОбновления Цикл
		
		ОбновитьКонтактнуюИнформациюОбъекта(ОбъектКОбновлению);
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
КонецПроцедуры

Процедура ВыполнитьПереходНаНовуюВерсиюДляОрганизаций(Параметры) Экспорт
	
	ТребуютОбновления = ОбъектыТребующиеОбновленияКонтактнойИнформации(Метаданные.Справочники.Организации, 1000);
		
	Если Не ЗначениеЗаполнено(ТребуютОбновления) Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ОбъектКОбновлению Из ТребуютОбновления Цикл
		
		ОбновитьКонтактнуюИнформациюОбъекта(ОбъектКОбновлению);
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
КонецПроцедуры

Процедура ВыполнитьПереходНаНовуюВерсиюДляПодразделений(Параметры) Экспорт
	
	ТребуютОбновления = ОбъектыТребующиеОбновленияКонтактнойИнформации(Метаданные.Справочники.ПодразделенияКомпании,
		1000);
		
	Если Не ЗначениеЗаполнено(ТребуютОбновления) Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ОбъектКОбновлению Из ТребуютОбновления Цикл
		
		ОбновитьКонтактнуюИнформациюОбъекта(ОбъектКОбновлению);
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
КонецПроцедуры

Процедура ВыполнитьПереходНаНовуюВерсиюДляСотрудников(Параметры) Экспорт
	
	ТребуютОбновления = ОбъектыТребующиеОбновленияКонтактнойИнформации(Метаданные.Справочники.Сотрудники, 1000);
		
	Если Не ЗначениеЗаполнено(ТребуютОбновления) Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ОбъектКОбновлению Из ТребуютОбновления Цикл
		
		ОбновитьКонтактнуюИнформациюОбъекта(ОбъектКОбновлению);
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
КонецПроцедуры

Функция ВыполненПереходНаНовуюВерсию(Параметры) Экспорт
	
	Возврат Параметры.ЭтоНовый Или СодержитПустыеПоляJSON(Параметры.Отбор);
	
КонецФункции

// Преобразует контактную информацию, хранящуюся в поле ЗначениеПолей, в формат JSON и сохраняет его
// в поле колонки Значение таблицы КонтактнаяИнформация.
// Если колонки ЗначениеПолей и Значение содержат пустые строки, то JSON будет сформирована по представлению.
// В случае, когда параметр СсылкаИлиОбъект содержит объект контактной информации,
// то для сохранения изменений преобразования необходимо будет записать объект отдельно.
// Если передана ссылка, то после конвертирования хотя бы одной строки контактной информации владелец будет записан.
//
// Параметры:
//  СсылкаИлиОбъект - ОпределяемыйТип.ВладелецКонтактнойИнформации - ссылка на объект с контактной информацией.
//                  - СправочникОбъект
//                  - ДокументОбъект - объект-владелец контактной информации (организация,
//                                    контрагент, партнер и т.д.).
// 
// Возвращаемое значение:
//  Булево - если, Истина, то контактная информация была преобразована в JSON.
//
Функция ОбновитьКонтактнуюИнформациюОбъекта(СсылкаИлиОбъект) Экспорт
	
	ОбъектИзменен = Ложь;
	
	ТипОбъекта = ТипЗнч(СсылкаИлиОбъект);
	
	Если Не УправлениеКонтактнойИнформацией.СодержитКонтактнуюИнформацию(ТипОбъекта) Тогда
		Возврат ОбъектИзменен;
	КонецЕсли;
	
	ОбъектИзменен = ПреобразоватьКонтактнуюИнформациюВФорматJSON(
		СсылкаИлиОбъект, ТипОбъекта);
	
	Возврат ОбъектИзменен;
	
КонецФункции

Функция ПреобразоватьКонтактнуюИнформациюВФорматJSON(СсылкаИлиОбъект, ТипОбъекта) Экспорт
	
	ОбъектИзменен = Ложь;
	Если ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) Тогда
		Если Не СодержитПустыеПоляJSON(СсылкаИлиОбъект) Тогда
			Возврат Ложь;
		КонецЕсли;
		ОбъектИзменен = ЗаполнитьJSONПоляКонтактнойИнформацииДляСсылки(СсылкаИлиОбъект);
	Иначе
		ОбъектИзменен = ЗаполнитьJSONПоляКонтактнойИнформацииДляОбъекта(СсылкаИлиОбъект);
	КонецЕсли;
	
	Возврат ОбъектИзменен;
	
КонецФункции

Функция ЗаполнитьJSONПоляКонтактнойИнформацииДляСсылки(Ссылка)
	
	ОбъектИзменен = Ложь;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ОбъектМетаданных.ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
	
		Блокировка.Заблокировать();
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Заблокировать();
		
		Если ЗаполнитьJSONПоляКонтактнойИнформацииДляОбъекта(Объект) Тогда
			ОбъектИзменен = Истина;
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ОбъектИзменен;
	
КонецФункции

Функция ЗаполнитьJSONПоляКонтактнойИнформацииДляОбъекта(ОбъектСКонтактнойИнформацией)
	
	ОбъектИзменен = Ложь;
	
	Для каждого СтрокаКонтактнойИнформации Из ОбъектСКонтактнойИнформацией.КонтактнаяИнформация Цикл
		
		Если ЗначениеЗаполнено(СтрокаКонтактнойИнформации.Значение)
			И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(СтрокаКонтактнойИнформации.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаКонтактнойИнформации.ЗначенияПолей) Тогда
			
			СтрокаКонтактнойИнформации.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
				СтрокаКонтактнойИнформации.ЗначенияПолей, СтрокаКонтактнойИнформации.Тип);
		Иначе
			
			СтрокаКонтактнойИнформации.Значение = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(
				СтрокаКонтактнойИнформации.Представление, СтрокаКонтактнойИнформации.Тип);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаКонтактнойИнформации.Значение) Тогда
			ОбъектИзменен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектИзменен;

КонецФункции

#КонецОбласти

Процедура ЗаполнитьРеквизитыСтранМира() Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК СтранаМира,
		|	СтраныМира.Код КАК Код,
		|	СтраныМира.УчастникЕАЭС КАК УчастникЕАЭС,
		|	СтраныМира.МеждународноеНаименование КАК МеждународноеНаименование
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	СтраныМира.МеждународноеНаименование = """""
	);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеКлассификатора = РаботаСАдресами.ТаблицаКлассификатора();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДляЗаполнения = ДанныеКлассификатора.Найти(Выборка.Код, "Код");
		
		Если
			СтрокаДляЗаполнения = Неопределено
			Или (Выборка.УчастникЕАЭС = СтрокаДляЗаполнения.УчастникЕАЭС
				И Выборка.МеждународноеНаименование = СтрокаДляЗаполнения.МеждународноеНаименование)
		Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтранаОбъект = Выборка.СтранаМира.ПолучитьОбъект();
		СтранаОбъект.Заблокировать();
		ЗаполнитьЗначенияСвойств(СтранаОбъект, СтрокаДляЗаполнения);
		СтранаОбъект.ОбменДанными.Загрузка = Истина;
		СтранаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииПодразделенийКомпании()
	
	ГруппаПодразделения     = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
	ГруппаПодразделения.Имя = "СправочникПодразделенияКомпании";
	ГруппаПодразделения.Наименование = НСтр("ru='Контактная информация справочника ""Подразделения компании""'");
	
	СсылкаГруппаПодразделения = УправлениеКонтактнойИнформацией
		.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаПодразделения);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Адрес
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресПодразделенияКомпании;
	Вид.Группа = СсылкаГруппаПодразделения;
	Вид.Имя = "ЮрАдресПодразделенияКомпании";
	Вид.Наименование = НаименованияВидов().ЮридическийАдрес;
	Вид.Порядок = 1;
	Вид.ВидРедактирования = "Диалог";
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Адрес
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресПодразделенияКомпании;
	Вид.Группа = СсылкаГруппаПодразделения;
	Вид.Имя = "ФактАдресПодразделенияКомпании";
	Вид.Наименование = НаименованияВидов().ФактическийАдрес;
	Вид.Порядок = 2;
	Вид.ВидРедактирования = "Диалог";
	Вид.МожноИзменятьСпособРедактирования = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Телефон
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияКомпании;
	Вид.Группа = СсылкаГруппаПодразделения;
	Вид.Имя = "ТелефонПодразделенияКомпании";
	Вид.Наименование = НаименованияВидов().Телефон;
	Вид.Порядок = 3;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.EmailПодразделенияКомпании;
	Вид.Группа = СсылкаГруппаПодразделения;
	Вид.Имя = "EmailПодразделенияКомпании";
	Вид.Наименование = НаименованияВидов().ЭлектроннаяПочта;
	Вид.Порядок = 4;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Факс
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияКомпании;
	Вид.Группа = СсылкаГруппаПодразделения;
	Вид.Имя = "ФаксПодразделенияКомпании";
	Вид.Наименование = НаименованияВидов().Факс;
	Вид.Порядок = 5;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.ВебСтраница
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ВебСтраницаПодразделенияКомпании;
	Вид.Группа = СсылкаГруппаПодразделения;
	Вид.Имя = "ВебСтраницаПодразделенияКомпании";
	Вид.Наименование = НаименованияВидов().ВебСтраница;
	Вид.Порядок = 6;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Другое
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПодразделенияКомпании;
	Вид.Группа = СсылкаГруппаПодразделения;
	Вид.Имя = "ДругаяИнформацияПодразделенияКомпании";
	Вид.Наименование =  НаименованияВидов().Другое;
	Вид.Порядок = 7;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
КонецПроцедуры

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций()
	
	ГруппаОрганизации     = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
	ГруппаОрганизации.Имя = "СправочникОрганизации";
	ГруппаОрганизации.Наименование = НСтр("ru='Контактная информация справочника ""Организации""'");
	
	СсылкаГруппаОрганизации = УправлениеКонтактнойИнформацией
		.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаОрганизации); 
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Адрес
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	Вид.Группа = СсылкаГруппаОрганизации;	
	Вид.Имя = "ЮрАдресОрганизации";
	Вид.Наименование = НаименованияВидов().ЮридическийАдрес;
	Вид.ВидРедактирования = "Диалог";
	Вид.Порядок = 1;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Адрес
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	Вид.Группа = СсылкаГруппаОрганизации;
	Вид.Имя = "ФактАдресОрганизации";
	Вид.Наименование = НаименованияВидов().ФактическийАдрес;
	Вид.ВидРедактирования = "Диалог";
	Вид.Порядок = 2;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Телефон
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	Вид.Группа = СсылкаГруппаОрганизации;
	Вид.Имя = "ТелефонОрганизации";
	Вид.Наименование = НаименованияВидов().Телефон;
	Вид.Порядок = 3;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	Вид.Группа = СсылкаГруппаОрганизации;
	Вид.Имя = "EmailОрганизации";
	Вид.Наименование = НаименованияВидов().ЭлектроннаяПочта;
	Вид.Порядок = 4;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Факс
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	Вид.Группа = СсылкаГруппаОрганизации;
	Вид.Имя = "ФаксОрганизации";
	Вид.Наименование = НаименованияВидов().Факс;
	Вид.Порядок = 5;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.ВебСтраница
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ВебСтраницаОрганизации;
	Вид.Группа = СсылкаГруппаОрганизации;
	Вид.Имя = "ВебСтраницаОрганизации";
	Вид.Наименование = НаименованияВидов().ВебСтраница;
	Вид.Порядок = 6;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Другое
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	Вид.Группа = СсылкаГруппаОрганизации;
	Вид.Имя = "ДругаяИнформацияКонтрагента";
	Вид.Наименование = НаименованияВидов().Другое;
	Вид.Порядок = 7;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
КонецПроцедуры

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов()
	
	ГруппаКонтрагенты     = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
	ГруппаКонтрагенты.Имя = "СправочникКонтрагенты";
	ГруппаКонтрагенты.Наименование = НСтр("ru='Контактная информация справочника ""Контрагенты и контакты""'");
	
	СсылкаГруппаКонтрагенты = УправлениеКонтактнойИнформацией
		.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаКонтрагенты);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Адрес
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	Вид.Группа = СсылкаГруппаКонтрагенты;
	Вид.Имя = "ЮрАдресКонтрагента";
	Вид.Наименование = НаименованияВидов().ЮридическийАдрес;
	Вид.ВидРедактирования = "Диалог";
	Вид.Порядок = 1;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Адрес
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	Вид.Группа = СсылкаГруппаКонтрагенты;
	Вид.Имя = "ФактАдресКонтрагента";
	Вид.Наименование = НаименованияВидов().ФактическийАдрес;
	Вид.ВидРедактирования = "Диалог";
	Вид.Порядок = 2;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Телефон
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	Вид.Группа = СсылкаГруппаКонтрагенты;
	Вид.Имя = "ТелефонКонтрагента";
	Вид.Наименование = НаименованияВидов().Телефон;
	Вид.Порядок = 3;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	Вид.Группа = СсылкаГруппаКонтрагенты;
	Вид.Имя = "EmailКонтрагента";
	Вид.Наименование = НаименованияВидов().ЭлектроннаяПочта;
	Вид.Порядок = 4;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Факс
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
	Вид.Группа = СсылкаГруппаКонтрагенты;
	Вид.Имя = "ФаксКонтрагента";
	Вид.Наименование = НаименованияВидов().Факс;
	Вид.Порядок = 5;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.ВебСтраница
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ВебСтраницаКонтрагента;
	Вид.Группа = СсылкаГруппаКонтрагенты;
	Вид.Имя = "ВебСтраницаКонтрагента";
	Вид.Наименование = НаименованияВидов().ВебСтраница;
	Вид.Порядок = 6;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Другое
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;
	Вид.Группа = СсылкаГруппаКонтрагенты;
	Вид.Имя = "ДругаяИнформацияКонтрагента";
	Вид.Наименование = НаименованияВидов().Другое;
	Вид.Порядок = 7;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
		
КонецПроцедуры

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииСотрудников()
	
	ГруппаКИСотрудника     = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
	ГруппаКИСотрудника.Имя = "СправочникСотрудники";
	ГруппаКИСотрудника.Наименование = НСтр("ru='Контактная информация справочника ""Сотрудники""'");
	
	СсылкаГруппаКИСотрудкика = УправлениеКонтактнойИнформацией
		.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаКИСотрудника);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Адрес
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресСотрудника;
	Вид.Группа = СсылкаГруппаКИСотрудкика;
	Вид.Имя = "ЮрАдресСотрудника";
	Вид.Наименование = НаименованияВидов().ЮридическийАдрес;
	Вид.ВидРедактирования = "Диалог";
	Вид.Порядок = 1;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Адрес
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресСотрудника;
	Вид.Группа = СсылкаГруппаКИСотрудкика;
	Вид.Имя = "ФактАдресСотрудника";
	Вид.Наименование = НаименованияВидов().ФактическийАдрес;
	Вид.ВидРедактирования = "Диалог";
	Вид.Порядок = 2;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Адрес
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресСотрудника;
	Вид.Группа = СсылкаГруппаКИСотрудкика;
	Вид.Имя = "ПочтовыйАдресСотрудника";
	Вид.Наименование = НаименованияВидов().ПочтовыйАдрес;
	Вид.Порядок = 3;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Телефон
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника;
	Вид.Группа = СсылкаГруппаКИСотрудкика;
	Вид.Имя = "ТелефонСотрудника";
	Вид.Наименование = НаименованияВидов().Телефон;
	Вид.Порядок = 4;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.EmailСотрудника;
	Вид.Группа = СсылкаГруппаКИСотрудкика;
	Вид.Имя = "EmailСотрудника";
	Вид.Наименование = НаименованияВидов().ЭлектроннаяПочта;
	Вид.Порядок = 5;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Факс
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ФаксСотрудника;
	Вид.Группа = СсылкаГруппаКИСотрудкика;
	Вид.Имя = "ФаксСотрудника";
	Вид.Наименование = НаименованияВидов().Факс;
	Вид.Порядок = 6;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.ВебСтраница
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ВебСтраницаСотрудника;
	Вид.Группа = СсылкаГруппаКИСотрудкика;
	Вид.Имя = "ВебСтраницаСотрудника";
	Вид.Наименование = НаименованияВидов().ВебСтраница;
	Вид.Порядок = 7;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Другое
	);
	Вид.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияСотрудника;
	Вид.Группа = СсылкаГруппаКИСотрудкика;
	Вид.Имя = "ДругаяИнформацияСотрудника";
	Вид.Наименование = НаименованияВидов().Другое;
	Вид.Порядок = 8;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
		
КонецПроцедуры

Функция НаименованияВидов()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ЮридическийАдрес", НСтр("ru = 'Юридический адрес'"));
	Результат.Вставить("ФактическийАдрес", НСтр("ru = 'Фактический адрес'"));
	Результат.Вставить("ПочтовыйАдрес", НСтр("ru = 'Почтовый адрес'"));
	Результат.Вставить("Телефон", НСтр("ru = 'Телефон'"));
	Результат.Вставить("РабочийТелефон", НСтр("ru = 'Рабочий телефон'"));
	Результат.Вставить("ЭлектроннаяПочта", НСтр("ru = 'Электронная почта'"));
	Результат.Вставить("Факс", НСтр("ru = 'Факс'"));
	Результат.Вставить("ВебСтраница", НСтр("ru = 'Веб-страница'"));
	Результат.Вставить("Другое", НСтр("ru = 'Другое'"));
	
	Возврат Результат;
	
КонецФункции

// Поле Значение может быть пустым по строках для вывода в список.
// Типовые функции из модуля УправлениеКонтактнойИнформацией не учитывают эту особенность.

Функция СодержитПустыеПоляJSON(ПроверяемыйОбъект)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ПроверяемыйОбъект));
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ШаблонЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаСКонтактнойИнформацией.Ссылка КАК Ссылка
		|ИЗ
		|	&ПолноеИмяОбъектаCКонтактнойИнформацией КАК ТаблицаСКонтактнойИнформацией
		|ГДЕ
		|	ВЫРАЗИТЬ(ТаблицаСКонтактнойИнформацией.Значение КАК СТРОКА(1)) = """"
		|   И ТаблицаСКонтактнойИнформацией.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)
		|	И ТаблицаСКонтактнойИнформацией.Ссылка = &Ссылка";
	
	НаборТекстаЗапроса = СтрЗаменить(ШаблонЗапроса, "&ПолноеИмяОбъектаCКонтактнойИнформацией",
			ОбъектМетаданных.ПолноеИмя() + ".КонтактнаяИнформация");
			
	Запрос = Новый Запрос(НаборТекстаЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ПроверяемыйОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает объекты, хранящие контактную информацию в устаревших форматах XML или Ключ-Значение,
// и требующие преобразования контактной информации в современный формат JSON.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект с контактной информации у которого требуется определить элемент
//                     содержащие незаполненные поля в JSON.
//  РазмерПорции  - Число - количество объектов, возвращаемых за один вызов. Если не указано, то будут выбраны все объекты.
// 
// Возвращаемое значение:
//  Массив - ссылки на объекты.
//
Функция ОбъектыТребующиеОбновленияКонтактнойИнформации(ОбъектМетаданных, РазмерПорции = Неопределено)
	
	Если ОбъектМетаданных.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ПолноеИмяТабличнойЧасти = ОбъектМетаданных.ПолноеИмя() + ".КонтактнаяИнформация";
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧастьКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	&ТаблицаКонтактнойИнформации КАК ТабличнаяЧастьКонтактнаяИнформация
	|ГДЕ
	|	ВЫРАЗИТЬ(ТабличнаяЧастьКонтактнаяИнформация.Значение КАК СТРОКА(1)) = """"
	|	И ТабличнаяЧастьКонтактнаяИнформация.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаКонтактнойИнформации", ПолноеИмяТабличнойЧасти);
	Если ТипЗнч(РазмерПорции) = Тип("Число") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧРГ=' '; ЧГ=0"));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьСпискиВыбора(Форма, Поля)
	
	Индекс = 0;
	
	Попытка
		
		Пока Индекс < Поля.Количество() Цикл
			
			СписокВыбора = Форма.Элементы[Поля[Индекс]].СписокВыбора;
			СписокВыбора.Очистить();
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при очистке списка выбора'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
КонецПроцедуры

Функция ТипыКонтактнойИнформацииПоИменам(Имена)

	Результат = Новый Массив;
	
	Попытка
		
		Для Каждого Строка Из Имена Цикл
			
			Результат.Добавить(Перечисления.ТипыКонтактнойИнформации[Строка(Строка)]);
			
		КонецЦикла;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения контактной информации'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Функция СоответствиеПолейТипам(Форма, Типы, Поля)
	
	Результат = Новый Структура;
	Индекс = 0;
	
	Пока Индекс < Типы.Количество() Цикл
		
		СписокВыбора = Форма.Элементы[Поля[Индекс]].СписокВыбора;
		СписокВыбора.Очистить();
		Результат.Вставить(СтрЗаменить(Типы[Индекс], " ", ""), СписокВыбора); 
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз - 1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

// Подготавливает строку для включения в текст XML, убирая спецсимволы
//
// Параметры:
//     Текст - Строка - Корректируемая строка XML
//
// Возвращаемое значение:
//     Строка - Нормализованная строка
//
Функция НормализованнаяСтрокаXML(Знач Текст) Экспорт
	
	Результат = СтрЗаменить(Текст,     """", "&quot;");
	Результат = СтрЗаменить(Результат, "&",  "&amp;");
	Результат = СтрЗаменить(Результат, "'",  "&apos;");
	Результат = СтрЗаменить(Результат, "<",  "&lt;");
	Результат = СтрЗаменить(Результат, ">",  "&gt;");
	
	Возврат Результат;
	
КонецФункции // НормализованнаяСтрокаXML()

//  Устанавливает значения полей населенного пункта в XDTO адресе.
//  
//  Параметры:
//      XDTOАдрес    - ОбъектXDTO - адрес РФ.
//      Идентификатор - УникальныйИдентификатор - Источник данных для заполнения.
//
Процедура УстановитьНаселенныйПунктАдресаПоИдентификатору(XDTOАдрес, Идентификатор) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат;
	КонецЕсли;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	ДанныеАдреса = МодульАдресныйКлассификаторСлужебный.АктуальныеАдресныеСведения(Идентификатор);
	Если ДанныеАдреса.Отказ Тогда
		// Классификатор поломан
		Возврат;
	КонецЕсли;
	
	Эталон = ДанныеАдреса.Данные;
	
	//ЧастиАдреса = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта();
	//Для Каждого КлючЗначение Из ЧастиАдреса Цикл
	//	Если КлючЗначение.Значение.Уровень < 7 Тогда
	//		Путь = КлючЗначение.Значение.ПутьXPath;
	//		Обработки.РасширенныйВводКонтактнойИнформации.УстановитьXDTOРеквизитОбъекта(XDTOАдрес, 
	//																					Путь, 
	//																					УправлениеКонтактнойИнформацией.ПолучитьXDTOРеквизитОбъекта(Эталон, Путь));
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

// Устанавливает значения полей улицы.
//  
//  Параметры:
//      XDTOАдрес    - ОбъектXDTO - адрес РФ.
//      Идентификатор - УникальныйИдентификатор - Источник данных для заполнения.
//
Процедура УстановитьУлицуАдресаПоИдентификатору(XDTOАдрес, Идентификатор) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат;
	КонецЕсли;
	

	//МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	//ДанныеАдреса = МодульАдресныйКлассификаторСлужебный.АктуальныеАдресныеСведения(Идентификатор);
	//Если ДанныеАдреса.Отказ Тогда
	//	// Классификатор поломан
	//	Возврат;
	//КонецЕсли;
	//
	//Эталон = ДанныеАдреса.Данные;
	//КодСериализацииПочтовогоИндекса = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииПочтовогоИндекса();
	//КодСериализацииДополнительногоОбъектаАдресации = УправлениеКонтактнойИнформациейКлиентСервер.КодСериализацииДополнительногоОбъектаАдресации(91);
	//
	//ЧастиАдреса = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта();
	//Для Каждого КлючЗначение Из ЧастиАдреса Цикл
	//	Если КлючЗначение.Значение.Уровень = 90 Тогда
	//		Для каждого ДопАдрЭл Из Эталон.ДопАдрЭл Цикл
	//			Если ДопАдрЭл.ТипАдрЭл <> КодСериализацииДополнительногоОбъектаАдресации 
	//				И ДопАдрЭл.ТипАдрЭл <> КодСериализацииПочтовогоИндекса Тогда
	//					Путь = "ДопАдрЭл[ТипАдрЭл='" + ДопАдрЭл.ТипАдрЭл + "']";
	//					Обработки.РасширенныйВводКонтактнойИнформации.УстановитьXDTOРеквизитОбъекта(XDTOАдрес, 
	//																								Путь, 
	//																								УправлениеКонтактнойИнформацией.ПолучитьXDTOРеквизитОбъекта(Эталон, Путь));
	//			КонецЕсли;
	//		КонецЦикла;
	//	ИначеЕсли КлючЗначение.Значение.Уровень = 91 Тогда
	//		Для каждого ДопАдрЭл Из Эталон.ДопАдрЭл Цикл
	//			Если ДопАдрЭл.ТипАдрЭл = КодСериализацииДополнительногоОбъектаАдресации Тогда
	//				Путь = УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(91, ДопАдрЭл.ТипАдрЭл);
	//				Обработки.РасширенныйВводКонтактнойИнформации.УстановитьXDTOРеквизитОбъекта(XDTOАдрес, 
	//																							Путь, 
	//																							УправлениеКонтактнойИнформацией.ПолучитьXDTOРеквизитОбъекта(Эталон, Путь));
	//			КонецЕсли;
	//		КонецЦикла;
	//	ИначеЕсли КлючЗначение.Значение.Уровень = 7 Тогда
	//		Путь = КлючЗначение.Значение.ПутьXPath;
	//		Обработки.РасширенныйВводКонтактнойИнформации.УстановитьXDTOРеквизитОбъекта(XDTOАдрес, 
	//																					Путь, 
	//																					УправлениеКонтактнойИнформацией.ПолучитьXDTOРеквизитОбъекта(Эталон, Путь));
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьЗначенияПолей(ОбъектКи)
	
	Если ПустаяСтрока(ОбъектКи.Значение) И ЗначениеЗаполнено(ОбъектКи.ЗначенияПолей) Тогда
		
		ЗначенияПолей = ОбъектКи.ЗначенияПолей;
		
	Иначе
		
		ЗначенияПолей = ОбъектКи.Значение;
		
	КонецЕсли;
	
	Возврат ЗначенияПолей;
	
КонецФункции

#КонецОбласти