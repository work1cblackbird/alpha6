// Общий модуль "Версионирование объектов (платформа)"

////////////////////////////////////////////////////////////////////////////////
/////////////////////// ВЕРСИОНИРОВАНИЕ (СЕРВЕР) ///////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция возвращает представление жесткого объекта в виде XML-строки (сериализация).
//
// Параметры:
//  Объект - Строка - Объект, сериализованное представление которого нужно получить.
//
// Возвращаемое значение:
//  Строка - Сериализованное представление объекта, сжатое и перекодированное в base64.
//
Функция ПреобразоватьОбъектВXML(Объект) Экспорт
	// Преобразуем ссылку в объект
	Если Объект = Неопределено Тогда
		Возврат "";
	Иначе
		ТекОбъект = Объект;
	КонецЕсли;
	
	ЗаписьИксЭмЭль = Новый ЗаписьXML();
	ЗаписьИксЭмЭль.УстановитьСтроку();
	
	// Объявление
	ЗаписьИксЭмЭль.ЗаписатьОбъявлениеXML();
	// Начало корня
	ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Объект");
	ЗаписьИксЭмЭль.ЗаписатьАтрибут("Тип", СтрЗаменить(ТипРеквизита(ТекОбъект.Ссылка), "Ссылка.", "Объект."));
	
	МетаданныеОбъекта = ТекОбъект.Метаданные();
	ИерархияГрупп     = (Метаданные.Справочники.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.Иерархический 
		И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов) 
		ИЛИ (Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.Иерархический);
	
	// Реквизиты шапки
	// Начало секции "Реквизиты шапки" (стандартные реквизиты).
	ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("РеквизитыШапки");
	Для Каждого ТекРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		
		ЗначениеРеквизита = ТекОбъект[ТекРеквизит.Имя];
		
		// Начало секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Реквизит");
		
		// Имя реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Имя", ТекРеквизит.Имя);
		// Тип реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Тип", ТипРеквизита(ЗначениеРеквизита));
		// Значение реквизита
		ЗаписьИксЭмЭль.ЗаписатьТекст(XMLСтрока(ЗначениеРеквизита));
		
		// Конец секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Общие реквизиты
	
	Для Каждого ТекРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		
		ЗначениеСостава = ТекРеквизит.Состав.Найти(МетаданныеОбъекта);
		
		Если ЗначениеСостава = Неопределено 
			ИЛИ (НЕ ЗначениеСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = ТекОбъект[ТекРеквизит.Имя];
		
		// Начало секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Реквизит");
		
		// Имя реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Имя", ТекРеквизит.Имя);
		// Тип реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Тип", ТипРеквизита(ЗначениеРеквизита));
		// Значение реквизита
		ЗаписьИксЭмЭль.ЗаписатьТекст(XMLСтрока(ЗначениеРеквизита));
		
		// Конец секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Обычные реквизиты
	
	Для Каждого ТекРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		// Отбросим лишние поля
		Если ИерархияГрупп Тогда
			Если ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы 
				И НЕ ТекОбъект.ЭтоГруппа Тогда
				
				Продолжить;
				
			ИначеЕсли ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента 
				И ТекОбъект.ЭтоГруппа Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеРеквизита = ТекОбъект[ТекРеквизит.Имя];
		
		// Начало секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Реквизит");
		
		// Имя реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Имя", ТекРеквизит.Имя);
		// Тип реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Тип", ТипРеквизита(ЗначениеРеквизита));
		// Значение реквизита
		ЗаписьИксЭмЭль.ЗаписатьТекст(XMLСтрока(ЗначениеРеквизита));
		
		// Конец секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	// Конец секции "Реквизиты шапки".
	ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
	
	РеквизитыТЧ = Новый ТаблицаЗначений();
	РеквизитыТЧ.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	
	// Табличные части 
	Для Каждого ТекТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		// Отбросим лишние поля
		Если ИерархияГрупп Тогда
			Если ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И НЕ ТекОбъект.ЭтоГруппа Тогда
				Продолжить;
				
			ИначеЕсли ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента
				И ТекОбъект.ЭтоГруппа Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИмяТЧ = ТекТЧ.Имя;
		
		// Перечень реквизитов
		РеквизитыТЧ.Очистить();
		Для Каждого ТекРеквизит Из ТекТЧ.Реквизиты Цикл
			НоваяСтрока = РеквизитыТЧ.Добавить();
			НоваяСтрока.Имя = ТекРеквизит.Имя;
		КонецЦикла;
		
		// Начало секции "Табличная часть"
		ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
		// Имя ТЧ
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Имя", ИмяТЧ);
		
		// Строки ТЧ
		Для Сч = 1 По ТекОбъект[ИмяТЧ].Количество() Цикл
			// Начало секции "Строка"
			ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Строка");
			
			// Номер строки
			ЗаписьИксЭмЭль.ЗаписатьАтрибут("НомерСтроки", XMLСтрока(Сч));
			
			ТекСтрока = ТекОбъект[ИмяТЧ][Сч - 1];
			
			// Значения реквизитов строки
			Для Каждого ТекРеквизитТЧ Из РеквизитыТЧ Цикл
				ЗначениеРеквизита = ТекСтрока[ТекРеквизитТЧ.Имя];
				
				// Начало секции "Реквизит"
				ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Реквизит");
				
				// Имя реквизита
				ЗаписьИксЭмЭль.ЗаписатьАтрибут("Имя", ТекРеквизитТЧ.Имя);
				// Тип реквизита
				ЗаписьИксЭмЭль.ЗаписатьАтрибут("Тип", ТипРеквизита(ЗначениеРеквизита));
				// Значение реквизита.
				ЗаписьИксЭмЭль.ЗаписатьТекст(XMLСтрока(ЗначениеРеквизита));
				
				// Конец секции "Реквизит"
				ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
			// Конец секции "Строка"
			ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		// Конец секции "Табличная часть"
		ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Конец корня
	ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьИксЭмЭль.Закрыть();
	
КонецФункции //ПреобразоватьОбъектВXML()

// Получает XML версию объекта.
//
// Параметры:
//  ДанныеОбъекта  - ХранилищеЗначения, Структура - данные объекта из регистра ВерсииОбъектов.
//
// Возвращаемое значение:
//  Строка, Неопределено - XML версия объекта.
//
Функция ПолучитьXMLВерсию(ДанныеОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанные = ДанныеОбъекта;
	Если ТипЗнч(ДанныеОбъекта) = Тип("Структура") Тогда
		ДвоичныеДанные = ДанныеОбъекта.Объект;
	КонецЕсли;
	
	ЧтениеFastInfoSet = Новый ЧтениеFastInfoSet;
	ЧтениеFastInfoSet.УстановитьДвоичныеДанные(ДвоичныеДанные);
	
	Попытка
		АрхивныйОбъект = ПрочитатьXML(ЧтениеFastInfoSet);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	XMLПредставлениеОбъекта = ПреобразоватьОбъектВXML(АрхивныйОбъект);
	
	Возврат XMLПредставлениеОбъекта;
	
КонецФункции //ПолучитьXMLВерсию(ДанныеОбъекта)

// Функция получает представление объекта в виде XML-строки (сериализация).
//
// Параметры:
//  Объект - Строка - Объект или Ссылка, объект (или ссылка на объект),
//                    сериализованное представление которого нужно получить.
//
// Возвращаемое значение:
//  Строка - Сериализованное представление объекта.
//
Функция ПолучитьСериализированноеПредставлениеОбъекта(Объект) Экспорт
	Возврат ПолучитьСериализированноеПредставлениеЖесткогоОбъекта(Объект);
КонецФункции

// Функция определяет различие между двумя версиями одного и того же объекта по его XML-образам.
//
// Параметры:
//    Версия1 - Строка - Строка XML, сериализованное содержимое первой версии объекта
//    Версия2 - Строка - Строка XML, сериализованное содержимое второй версии объекта.
//    Ссылка - ДокументСсылка - Документ, по которому производится сравнение.
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с со значениями отличающихся реквизитов объекта и его ТЧ
//       Колонки таблицы значений:
//          ТЧ - тип значения Строка(100). Содержит имя ТЧ в виде "ТЧ_<ИмяТЧ>" или слово "Реквизит"
//               для реквизита шапки
//          Реквизит - тип значения Строка(100). Содержит имя реквизита ТЧ или имя реквизита шапки
//          НомерСтроки - тип значения Число. Содержит номер строки в ТЧ или ноль для реквизита шапки
//          СтароеЗначение - тип значения произвольный. Старое значение реквизита ТЧ или реквизита шапки
//          НовоеЗначение - тип значения произвольный. Новое значение реквизита ТЧ или реквизита шапки.
//
Функция ОпределитьРазличиеВерсийОбъекта(Версия1, Версия2, Ссылка = Неопределено) Экспорт
	
	Табл1 = ДесериализоватьОбъектВТаблицу(Версия1,, Ссылка);
	Табл2 = ДесериализоватьОбъектВТаблицу(Версия2,, Ссылка);
	
	Результат = ОпределитьРазличиеТабличныхВерсийОбъекта(Табл1, Табл2);
	
	Возврат Результат
КонецФункции

// Получение таблицы из внешней базы
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка              - Ссылка на объект.
//  ДатаКонца    - Дата                          - Дата записи версии.
//  ДатаНачала   - Дата                          - Дата записи версии в регистре версий объектов.
//  Пользователь - СправочникСсылка.Пользователи - Текущий пользователь.
//  Компьютер    - Строка                        - Рабочее место.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные из внешней базы.
//
Функция ПолучитьТаблицуИзВнешнейБазы(ОбъектСсылка, ДатаКонца, ДатаНачала = Неопределено, Пользователь = Неопределено, Компьютер = Неопределено) Экспорт
	ТипВсеСсылки = Новый Массив();
	
	// Справочники
	Для Каждого ЭлементМетаданных Из Метаданные.Справочники Цикл
		ТипВсеСсылки.Добавить(Тип("СправочникСсылка." + ЭлементМетаданных.Имя));
	КонецЦикла;
	// Документы
	Для Каждого ЭлементМетаданных Из Метаданные.Документы Цикл
		ТипВсеСсылки.Добавить(Тип("ДокументСсылка." + ЭлементМетаданных.Имя));
	КонецЦикла;
	// Планы видов характеристик
	Для Каждого ЭлементМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		ТипВсеСсылки.Добавить(Тип("ПланВидовХарактеристикСсылка." + ЭлементМетаданных.Имя));
	КонецЦикла;
	
	РезультирующаяТаблица = Новый ТаблицаЗначений();
	РезультирующаяТаблица.Колонки.Добавить("Период",       Новый ОписаниеТипов("Дата"));
	РезультирующаяТаблица.Колонки.Добавить("ОбъектИД",     Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	РезультирующаяТаблица.Колонки.Добавить("Объект",       Новый ОписаниеТипов(ТипВсеСсылки));
	РезультирующаяТаблица.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	РезультирующаяТаблица.Колонки.Добавить("Компьютер",    Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	РезультирующаяТаблица.Колонки.Добавить("Событие",      Новый ОписаниеТипов("ПеречислениеСсылка.СобытияВерсионирования"));
	РезультирующаяТаблица.Колонки.Добавить("ОбъектВXML",   Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	РезультирующаяТаблица.Колонки.Добавить("Менеджер",     Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	РезультирующаяТаблица.Колонки.Добавить("Менеджеры",    Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	РезультирующаяТаблица.Колонки.Добавить("ПериодПредыдущий",       Новый ОписаниеТипов("Дата"));
	
	// Подключимся к базе
	СтрокаПодключения = Константы.АдресВнешнейБазыСИсториейОбъектов.Получить();
	Если ПустаяСтрока(СтрокаПодключения) Тогда
		Возврат РезультирующаяТаблица;
	КонецЕсли;
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.ConnectionString = СтрокаПодключения;
	Если Соединение.State=1 Тогда
		Возврат РезультирующаяТаблица;
	КонецЕсли;
	Соединение.ConnectionTimeout = 7;
	Соединение.CursorLocation = 3;
	Попытка
		Соединение.Open(СтрокаПодключения);
	Исключение
		Возврат РезультирующаяТаблица;
	КонецПопытки;
	
	АДОЗапрос = Новый COMОбъект("ADODB.Command");
	АДОЗапрос.ActiveConnection = Соединение;
	АДОЗапрос.CommandType = 1;
	
	Попытка
	    // Делаем в попытке, потому что таблиц может не быть
		
		ТекстЗапроса = "SELECT Period, ObjectID, UserID, ComputerID, Event, ObjectData, ManagerName, ManagersName
						| FROM ModifiedObjectsHistory 
						|";
		УсловиеОтбора = "";
		МассивУсловий = Новый Массив();
		Если ДатаНачала <> Неопределено Тогда
			МассивУсловий.Добавить("Period >= ?");
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("@PeriodStart", 7, 1, 7, ДатаНачала));
		КонецЕсли;
		Если ДатаКонца <> Неопределено Тогда
			МассивУсловий.Добавить("Period <= ?");
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("@PeriodFinish", 7, 1, 7, ДатаКонца));
		КонецЕсли;
		Если ОбъектСсылка <> Неопределено Тогда
			МассивУсловий.Добавить("ObjectID = ?");
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("@ObjectID", 200, 1, 36, СокрЛП(ОбъектСсылка.УникальныйИдентификатор())));
		КонецЕсли;
		Если Пользователь <> Неопределено Тогда
			МассивУсловий.Добавить("UserID = ?");
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("@UserID", 200, 1, 36, СокрЛП(Пользователь.УникальныйИдентификатор())));
		КонецЕсли;
		Если Компьютер <> Неопределено Тогда
			МассивУсловий.Добавить("ComputerID = ?");
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("@ComputerID", 200, 1, 36, СокрЛП(Компьютер)));
		КонецЕсли;
		
		Если МассивУсловий.Количество() > 0 Тогда
			Для Каждого ЭлементМассива Из МассивУсловий Цикл
				УсловиеОтбора = УсловиеОтбора + ?(ПустаяСтрока(УсловиеОтбора), "", " AND ") + ЭлементМассива;
			КонецЦикла;
			УсловиеОтбора = " WHERE " + УсловиеОтбора;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + УсловиеОтбора + " ORDER BY Period ";
		
		АДОЗапрос.CommandText = ТекстЗапроса;
		
		АДОРезультат = АДОЗапрос.Execute();
		
		ПериодПредыдущий = Неопределено;
		Если АДОРезультат.RecordCount() <> 0 Тогда
			
			Пока АДОРезультат.EOF() = 0 Цикл
				НоваяСтрока              = РезультирующаяТаблица.Добавить();
				НоваяСтрока.Период       = АДОРезультат.Fields("Period").Value;
				НоваяСтрока.ОбъектИД     = АДОРезультат.Fields("ObjectID").Value;
				НоваяСтрока.Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(АДОРезультат.Fields("UserID").Value));
				НоваяСтрока.Компьютер    = АДОРезультат.Fields("ComputerID").Value;
				НоваяСтрока.ОбъектВXML   = СокрЛП(АДОРезультат.Fields("ObjectData").Value);
				НоваяСтрока.Менеджер     = СокрЛП(АДОРезультат.Fields("ManagerName").Value);
				НоваяСтрока.Менеджеры    = СокрЛП(АДОРезультат.Fields("ManagersName").Value);
				НоваяСтрока.ПериодПредыдущий    = ПериодПредыдущий;
				ПериодПредыдущий                = НоваяСтрока.Период;
				НаименованиеСобытия             = СокрЛП(АДОРезультат.Fields("Event").Value);
				Для Каждого ЗначениеПеречисления Из Перечисления.СобытияВерсионирования Цикл
					Если СокрЛП(ЗначениеПеречисления) = НаименованиеСобытия Тогда
						НоваяСтрока.Событие = ЗначениеПеречисления;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ВРЕГ(НоваяСтрока.Менеджеры) = "СПРАВОЧНИК" Тогда
					НоваяСтрока.Объект = Справочники[СокрЛП(НоваяСтрока.Менеджер)].ПолучитьСсылку(Новый УникальныйИдентификатор(НоваяСтрока.ОбъектИД));
				ИначеЕсли ВРЕГ(НоваяСтрока.Менеджеры) = "ДОКУМЕНТ" Тогда
					НоваяСтрока.Объект = Документы[СокрЛП(НоваяСтрока.Менеджер)].ПолучитьСсылку(Новый УникальныйИдентификатор(НоваяСтрока.ОбъектИД));
				ИначеЕсли ВРЕГ(НоваяСтрока.Менеджеры) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
					НоваяСтрока.Объект = ПланыВидовХарактеристик[СокрЛП(НоваяСтрока.Менеджер)].ПолучитьСсылку(Новый УникальныйИдентификатор(НоваяСтрока.ОбъектИД));
				КонецЕсли;
				
				АДОРезультат.MoveNext();
			КонецЦикла;
		КонецЕсли;
		
		АДОРезультат.Close();
		Соединение.Close();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при получении таблицы из внешней базы'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультирующаяТаблица;
КонецФункции

// Функция возвращает имя формы как оно задано в конфигураторе для объекта
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка, ДокументСсылка - ссылка на объект.
//  ТипОбъекта     - Тип - тип ссылки на объект (необязательный).
//
// Возвращаемое значение:
//  Строка - Имя формы как объекта метаданных.
//
Функция ВернутьИмяФормыОбъекта(СсылкаНаОбъект, ТипОбъекта = Неопределено) Экспорт
	
	Если ТипОбъекта = Неопределено Тогда
		ТипЗначения = ТипЗнч(СсылкаНаОбъект);
	Иначе
		ТипЗначения = ТипОбъекта;
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(Метаданные.НайтиПоТипу(ТипЗначения)) Тогда
		ИмяФормыЭлемента = "Справочник." + СсылкаНаОбъект.Метаданные().Имя + ".ФормаОбъекта";
	ИначеЕсли Метаданные.Документы.Содержит(Метаданные.НайтиПоТипу(ТипЗначения)) Тогда
		ИмяФормыЭлемента = "Документ." + СсылкаНаОбъект.Метаданные().Имя + ".ФормаОбъекта";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяФормыЭлемента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ

// Устарела. Следует использовать ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюОбъекта.
// Процедура является обработчиком события "Перед записью" в целях регистрации изменения объектов.
//
// Параметры:
//     Источник - Объект - Объект, запись которого производится
//     Отказ    - Булево - Признак того, что запись произошла неудачно.
//
// Возвращаемое значение
//     НЕТ
//
Процедура ВерсионированиеОбъектовПередЗаписью(Источник, Отказ) Экспорт
	
	Возврат;
	
	// Проверим текущее состояние транзакции.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производится.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// Пропустим события возникающие при обмене.
	Если Источник.ДополнительныеСвойства.Свойство("СведенияОВерсииОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем, нужно ли версионировать данный объект.
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(Источник.ДополнительныеСвойства, 
													"ИспользоватьВерсионированиеОбъектов", ИСТИНА) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, включена ли подсистема.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВерсионированиеОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, является ли объект версионируемым.
	Если НЕ  Метаданные.ОпределяемыеТипы.ВерсионируемыеДанныеОбъект.Тип.СодержитТип(ТипЗнч(Источник)) Тогда 
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(Источник, ИСТИНА);
	
КонецПроцедуры // ВерсионированиеОбъектовПриЗаписи()

// Устарела. Следует использовать ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента.
// Процедура является обработчиком события "Перед записью" документа.
//
// Параметры:
//     Источник        - ДокументОбъект - Объект, запись которого производится
//     Отказ           - Булево - Признак того, что запись произошла неудачно
//     РежимЗаписи     - РежимЗаписиДокумента - Текущий режим записи документа
//     РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ВерсионированиеОбъектовДокументыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
	// Проверим текущее состояние транзакции.
	Если Отказ Тогда
 		Возврат;
	КонецЕсли;
	
	// Получим признак обработки события в упрощенном режиме, когда проверка корректности не производится.
	Если ОбработкаСобытийОбъектаСервер.РежимУпрощеннойЗагрузкиОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// Пропустим события возникающие при обмене
	Если Источник.ДополнительныеСвойства.Свойство("СведенияОВерсииОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем, нужно ли версионировать данный объект
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(Источник.ДополнительныеСвойства, 
													"ИспользоватьВерсионированиеОбъектов", ИСТИНА) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, включена ли подсистема.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВерсионированиеОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, является ли объект версионируемым.
	Если НЕ  Метаданные.ОпределяемыеТипы.ВерсионируемыеДанныеОбъект.Тип.СодержитТип(ТипЗнч(Источник)) Тогда 
		Возврат;
	КонецЕсли;
	
	ОсновноеСобытие = Перечисления.СобытияВерсионирования.ПустаяСсылка();
	
	Пометка  = Источник.Ссылка.ПометкаУдаления;
	Проведен = Источник.Ссылка.Проведен;
	
	СтруктураПередаваемыхПараметров = Новый Структура("Пометка,Проведен,РежимЗаписи,РежимПроведения,ЭтоНовый");
	СтруктураПередаваемыхПараметров.Пометка                 = Пометка;
	СтруктураПередаваемыхПараметров.Проведен                = Проведен;
	СтруктураПередаваемыхПараметров.РежимЗаписи             = РежимЗаписи;
	СтруктураПередаваемыхПараметров.РежимПроведения         = РежимПроведения;
	СтруктураПередаваемыхПараметров.ЭтоНовый                = Источник.ЭтоНовый();
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("__РегистрацияИзменений__ПередЗаписью") Тогда
		Источник.ДополнительныеСвойства.Вставить("__РегистрацияИзменений__ПередЗаписью");
	КонецЕсли;
	Источник.ДополнительныеСвойства.__РегистрацияИзменений__ПередЗаписью = СтруктураПередаваемыхПараметров;
	
	ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(Источник, РежимЗаписи);
	
КонецПроцедуры // ВерсионированиеОбъектовДокументыПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ ДОКУМЕНТА

// Обработчик события возникающего на сервере при чтении данных объекта.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма, в которой возникло событие.
//  ТекущийОбъект		 - ДокументОбъект	 - Объект, который будет прочитан.
//  ПараметрыДействия	 - Структура		 - Содержит коллекцию параметров формы.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ Форма.Параметры.Свойство("ВерсияОбъекта") Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеОВерсииИРазличиях = ПолучитьДанныеОВерсииИРазличиях(ТекущийОбъект.Ссылка,, Форма.Параметры.ВерсияОбъекта, 
																Форма.Параметры.МестоположениеВерсии, Форма.Параметры.ДатаПредыдущейВерсии);
	
	Если ДанныеОВерсииИРазличиях = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОчисткиТЧ = Новый Структура();
	
	Для Каждого ЭлементОписания Из ДанныеОВерсииИРазличиях.ДанныеОбъекта Цикл
		
		// Обработаем в зависимости от типа реквизита.
		Если ЭлементОписания.ИмяТЧ = "Реквизиты" Тогда
			
			Если СтрНайти("ЭтоГруппа,Ссылка,Проведен,Предопределенный", ЭлементОписания.Реквизит) > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЕстьРеквизит(ТекущийОбъект, ЭлементОписания.Реквизит) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийОбъект[ЭлементОписания.Реквизит] = ЭлементОписания.Значение;
			
		Иначе
			
			// Убираем префикс "ТЧ_".
			ИмяТЧ = Сред(ЭлементОписания.ИмяТЧ, 4);
			
			Если НЕ ЕстьРеквизит(ТекущийОбъект, ЭлементОписания.Реквизит, ИмяТЧ) Тогда
				Продолжить;
			КонецЕсли;
			
			// Очищаем
			Если НЕ СтруктураОчисткиТЧ.Свойство(ИмяТЧ) Тогда
				СтруктураОчисткиТЧ.Вставить(ИмяТЧ);
				ТекущийОбъект[ИмяТЧ].Очистить();
			КонецЕсли;
			
			ОписаниеНомерСтроки = ЭлементОписания.НомерСтроки;
			
			Если ОписаниеНомерСтроки > ТекущийОбъект[ИмяТЧ].Количество() Тогда
				Пока ОписаниеНомерСтроки > ТекущийОбъект[ИмяТЧ].Количество() Цикл
					ТекущийОбъект[ИмяТЧ].Добавить();
				КонецЦикла;
			КонецЕсли;
			
			СтрокаТЧ = ТекущийОбъект[ИмяТЧ][ОписаниеНомерСтроки - 1];
			СтрокаТЧ[ЭлементОписания.Реквизит] = ЭлементОписания.Значение;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.ТолькоПросмотр Тогда
		
		// Для справочников
		Если НЕ Форма.Элементы.Найти("ФормаЗаписатьИЗакрыть")=Неопределено Тогда
			Форма.Элементы.ФормаЗаписатьИЗакрыть.                     Заголовок = НСтр("ru = 'Восстановить версию'");
			Форма.Элементы.ФормаЗаписатьИЗакрыть.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Восстановить версию и закрыть форму'");
		КонецЕсли;
		
		// Для документов
		Если НЕ Форма.Элементы.Найти("ФормаПровестиИЗакрыть")=Неопределено Тогда
			Форма.Элементы.ФормаПровестиИЗакрыть.                     Заголовок = НСтр("ru = 'Восстановить версию'");
			Форма.Элементы.ФормаПровестиИЗакрыть.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Восстановить версию и закрыть форму'");
		КонецЕсли;
		
	КонецЕсли;
	
	// Подкрашивание элементов формы.
	Если ДанныеОВерсииИРазличиях.Различия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементРазличия Из ДанныеОВерсииИРазличиях.Различия Цикл
		
		// Придется все делать в попытках, ибо иногда имя  элемента не совпадает с именем реквизита...
		Если ЭлементРазличия.ИмяТЧ = "Реквизиты" Тогда
			
			Если НЕ ЕстьРеквизит(ТекущийОбъект, ЭлементРазличия.Реквизит) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита = ЭлементРазличия.Реквизит;
			ВыделитьИзмененныйРеквизит(Форма, ИмяРеквизита);
			
		Иначе
			
			// Убираем префикс "ТЧ_"
			ИмяТЧ = Сред(ЭлементРазличия.ИмяТЧ, 4);
			
			Если НЕ ЕстьРеквизит(ТекущийОбъект, ЭлементРазличия.Реквизит, ИмяТЧ) Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеНомерСтроки = ЭлементРазличия.НомерСтроки;
			
			Если ОписаниеНомерСтроки > ТекущийОбъект[ИмяТЧ].Количество() Тогда
				Возврат;
			КонецЕсли;
			
			ВыделитьИзмененныйРеквизитТабличнойЧасти(Форма, ИмяТЧ, ОписаниеНомерСтроки, ЭлементРазличия.Реквизит);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура является обработчиком регламентного события "Регистрация изменений".
//
// Входные параметры:
//     НЕТ.
//
// Возвращаемое значение
//     НЕТ.
//
Процедура РегистрацияИзмененийОбъектов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыгрузкаВерсийОбъектов);
	
	// ПРОИЗВЕДЕМ КОПИРОВАНИЕ ДАННЫХ ИЗ РЕГИСТРОВ С ИЗМЕНЕНИЯМИ ОБЪЕКТОВ ВО ВНЕШНЮЮ БАЗУ.
	
	// Проверим, заявлено ли выгрузка во внешнюю БД.
	ХранитьИсториюВоВнешнейБД = Константы.ХранитьИсториюВоВнешнейБД.Получить();
	Если НЕ ХранитьИсториюВоВнешнейБД Тогда
		Возврат;
	КонецЕсли; 
	
	// Подключимся к базе.
	СтрокаПодключения = Константы.АдресВнешнейБазыСИсториейОбъектов.Получить();
	Если ПустаяСтрока(СтрокаПодключения) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не задана строка подключения к внешней базе с историей изменения объектов.'"));
		Возврат;
	КонецЕсли;
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.ConnectionString = СтрокаПодключения;
	Если Соединение.State=1 Тогда
		Возврат;
	КонецЕсли;
	Соединение.ConnectionTimeout = 7;
	Соединение.CursorLocation = 3;
	Попытка
		Соединение.Open(СтрокаПодключения);
	Исключение
		ОбщегоНазначения.СообщитьПользователю (НСтр("ru = 'Ошибка при подключении к БД с историей изменения объектов:'") + " " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// Создаем таблицы, если они не существовали.
	ТекстКоманды = "if not (exists 
					|(select * from dbo.sysobjects where id = object_id(N'[dbo].[ModifiedObjectsHistory]') 
					|         and OBJECTPROPERTY(id, N'IsUserTable') = 1))
					|CREATE TABLE [dbo].[ModifiedObjectsHistory] (
					|	[Period]       [datetime] NOT NULL ,
					|	[ObjectID]     [nchar]    (36)  COLLATE SQL_Latin1_General_CP1251_CI_AS NOT NULL ,
					|	[UserID]       [nchar]    (36)  COLLATE SQL_Latin1_General_CP1251_CI_AS NOT NULL ,
					|	[ComputerID]   [nchar]    (36)  COLLATE SQL_Latin1_General_CP1251_CI_AS NOT NULL ,
					|	[Event]        [nchar]    (25)  COLLATE SQL_Latin1_General_CP1251_CI_AS NOT NULL ,
					|	[ObjectData]   [nvarchar] (max) COLLATE SQL_Latin1_General_CP1251_CI_AS NULL ,
					|	[ManagerName]  [nvarchar] (150) COLLATE SQL_Latin1_General_CP1251_CI_AS NULL,
					|	[ManagersName] [nvarchar] (50)  COLLATE SQL_Latin1_General_CP1251_CI_AS NULL
					|) ON [PRIMARY]
					|;
					|if not (exists(select *  from dbo.sysindexes where name = N'IX_ModifiedObjectsHistory'))					
					|CREATE CLUSTERED INDEX IX_ModifiedObjectsHistory ON dbo.ModifiedObjectsHistory(Period, UserID)
					|;
					|if not (exists(select *  from dbo.sysindexes where name = N'IX_ModifiedObjectsHistoryObjectID'))					
					|CREATE INDEX IX_ModifiedObjectsHistoryObjectID  ON dbo.ModifiedObjectsHistory(ObjectID)
					|";
	
	АДОЗапрос = Новый COMОбъект("ADODB.Command");
	АДОЗапрос.ActiveConnection = Соединение;
	АДОЗапрос.CommandType = 1;
	
	АДОЗапрос.CommandText = ТекстКоманды;
	АДОРезультат = АДОЗапрос.Execute();
	
	// Копирование записей из регистра во внешнюю базу.
	Запрос = Новый Запрос();
	ВыбираемыхЗаписей = Константы.КоличествоЗагружаемыхОбъектовВоВнешнююБД.Получить();
	ВыбираемыхЗаписейСтрока = ?(ВыбираемыхЗаписей = 0,"ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Формат(ВыбираемыхЗаписей,"ЧГ=0") + " "); 
	ВыборкаВерсийОкончена = Ложь;
	Пока НЕ ВыборкаВерсийОкончена Цикл
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВерсииОбъектов.Объект КАК Объект,
		               |	МАКСИМУМ(ВерсииОбъектов.НомерВерсии) КАК НомерВерсии
		               |ПОМЕСТИТЬ ВтТекущиеВерсии
		               |ИЗ
		               |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВерсииОбъектов.Объект
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Объект
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВерсииОбъектов.Объект КАК Объект,
		               |	ВерсииОбъектов.ДатаВерсии КАК Период,
		               |	ВерсииОбъектов.НомерВерсии КАК НомерВерсии,
		               |	ВерсииОбъектов.АвторВерсии КАК Пользователь,
		               |	ВерсииОбъектов.Компьютер КАК Компьютер,
		               |	ВерсииОбъектов.Событие КАК Событие,
		               |	ВерсииОбъектов.ВерсияОбъекта КАК ОбъектСжатый
		               |ИЗ
		               |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВтТекущиеВерсии КАК ВтТекущиеВерсии
		               |		ПО ВерсииОбъектов.Объект = ВтТекущиеВерсии.Объект
		               |ГДЕ
		               |	ВерсииОбъектов.НомерВерсии <> ВтТекущиеВерсии.НомерВерсии";

		Запрос.Текст = ВыбираемыхЗаписейСтрока + Прав(Запрос.Текст, СтрДлина(Запрос.Текст)-7);
		Выборка = Запрос.Выполнить().Выбрать();
		ВыборкаВерсийОкончена = (Выборка.Количество()=0);
		
		Если ВыборкаВерсийОкончена Тогда 
			Прервать;
		КонецЕсли;
		
		ТекстКоманды = "INSERT INTO [dbo].[ModifiedObjectsHistory](Period,ObjectID,UserID,ComputerID,Event,ObjectData,ManagerName,ManagersName) VALUES(?,?,?,?,?,?,?,?)";
		Пока Выборка.Следующий() Цикл
			
			ОбъектВАрхиве = Выборка.ОбъектСжатый.Получить();
			Если ЗначениеЗаполнено(ОбъектВАрхиве) Тогда
				Если НЕ ТипЗНЧ(ОбъектВАрхиве) = Тип("Строка") Тогда
					ОбъектВXML = ПолучитьXMLВерсию(ОбъектВАрхиве);
				Иначе
					ОбъектВXML = ОбъектВАрхиве;
				КонецЕсли;
			Иначе 
				ОбъектВXML = "";
			КонецЕсли;
			
			АДОЗапрос = Новый COMОбъект("ADODB.Command");
			АДОЗапрос.ActiveConnection = Соединение;
			АДОЗапрос.CommandType = 1;
			АДОЗапрос.CommandText = ТекстКоманды;
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("Period",      135, 1, 7,   Выборка.Период));
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("ObjectID",    202, 1, 36,  Строка(Выборка.Объект.УникальныйИдентификатор())));
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("UserID",      202, 1, 36,  Строка(Выборка.Пользователь.УникальныйИдентификатор())));
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("ComputerID",  202, 1, 36,  Строка(Выборка.Компьютер)));
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("Event",       202, 1, 25,  Строка(Выборка.Событие)));
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("ObjectData",  202, 1, -1,  Строка(ОбъектВXML)));
			АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("ManagerName", 202, 1, 100, Строка(Выборка.Объект.Метаданные().Имя)));
			МетаданныеОбъекта = Выборка.Объект.Метаданные();
			Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
				АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("ManagersName", 202, 1, 50, "СПРАВОЧНИК"));
			ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
				АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("ManagersName", 202, 1, 50, "ДОКУМЕНТ"));
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
				АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("ManagersName", 202, 1, 50, "ПЛАНВИДОВХАРАКТЕРИСТИК"));
			Иначе
				АДОЗапрос.Parameters.Append(АДОЗапрос.CreateParameter("ManagersName", 202, 1, 50, "НЕОПРЕДЕЛЕНО"));                                                                           
			КонецЕсли;
			АДОРезультат = АДОЗапрос.Execute();
			
		КонецЦикла;
		
		// Удаляем записи из регистра.
		Если НЕ ВыбираемыхЗаписей = 0 Тогда
			НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
		    НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписей.Записать();
		Иначе
			НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Записать();			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает представление наименования системного реквизита.
//
Функция ПолучитьПредставлениеРеквизитаНаЯзыке(Знач ИмяРеквизита)
	
	Если      ИмяРеквизита = "Number" Тогда
		Возврат НСтр("ru = 'Номер'; en='Number'");
	ИначеЕсли ИмяРеквизита = "Name" Тогда
		Возврат НСтр("ru = 'Наименование'; en='Name'");
	ИначеЕсли ИмяРеквизита = "Code" Тогда
		Возврат НСтр("ru = 'Код'; en='Code'");
	ИначеЕсли ИмяРеквизита = "IsFolder" Тогда
		Возврат НСтр("ru = 'ЭтоГруппа'; en='Is folder'");
	ИначеЕсли ИмяРеквизита = "Description" Тогда
		Возврат НСтр("ru = 'Наименование'; en='Description'");
	ИначеЕсли ИмяРеквизита = "Date" Тогда
		Возврат НСтр("ru = 'Дата'; en='Date'");
	ИначеЕсли ИмяРеквизита = "Posted" Тогда
		Возврат НСтр("ru = 'Проведен'; en='Posted'");
	ИначеЕсли ИмяРеквизита = "DeletionMark" Тогда
		Возврат НСтр("ru = 'ПометкаУдаления'; en='Deletion mark'");
	ИначеЕсли ИмяРеквизита = "Ref" Тогда
		Возврат НСтр("ru = 'Ссылка'; en='Ref'");
	ИначеЕсли ИмяРеквизита = "Parent" Тогда
		Возврат НСтр("ru = 'Родитель'; en='Parent'");
	ИначеЕсли ИмяРеквизита = "Owner" Тогда
		Возврат НСтр("ru = 'Владелец'; en='Owner'");
	Иначе
		Возврат ИмяРеквизита;
	КонецЕсли;
	
КонецФункции

Функция ДесериализоватьFastInfosetВТаблицу(ЧтениеXML, Ссылка, ТаблОбъект)
	
	// Уровень позиции маркера в иерархии XML:
	// 0 - уровень не задан
	// 1 - первый элемент (имя объекта)
	// 2 - описание реквизита или табличной части
	// 3 - описание строки табличной части
	// 4 - описание поля строки табличной части.
	УровеньЧтения = 0;
	
	ИмяОбъекта = Неопределено;
	МетаданныеОбъекта = Ссылка.Метаданные();
	ТабличныеЧастиМТД = МетаданныеОбъекта.ТабличныеЧасти;
	ТипЗначения = "";
	ТипЗначенияПоляТЧ = "";
	
	ТаблОбъект.Колонки.Добавить("Тип");
	
	НомерСтроки = 0;
	
	// Основной цикл разбора по XML.
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			УровеньЧтения = УровеньЧтения + 1;
			Если УровеньЧтения = 1 Тогда // Указатель на первом элементе XML - корень XML.
				ИмяОбъекта = ЧтениеXML.Имя;
			ИначеЕсли УровеньЧтения = 2 Тогда // Указатель на втором уровне - это реквизит или имя табличной части.
				ИмяРеквизита = ЧтениеXML.Имя;
				
				НомерСтроки = 0;
				// Любой реквизит "может оказаться" табличной частью, поэтому на всякий случай его запомним.
				ИмяТабличнойЧасти = ИмяРеквизита;
				Если МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено Тогда
					ТекТЧ = "ТЧ_" + ИмяТабличнойЧасти;
					Продолжить;
				Иначе
					ТекТЧ = "Реквизиты";
				КонецЕсли;
				
				НовоеЗР = ТаблОбъект.Добавить();
				НовоеЗР.Реквизит = ИмяРеквизита;
				НовоеЗР.ИмяТЧ = ТекТЧ;
				НовоеЗР.НомерСтроки = НомерСтроки;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
							И ЧтениеXML.Имя = "xsi:type" Тогда
								НовоеЗР.Тип = ЧтениеXML.Значение;
								XMLТип = ЧтениеXML.Значение;
								Если СтрНачинаетсяС(XMLТип, "xs:") Тогда
									НовоеЗР.Тип = ИзXMLТипа(
										Новый ТипДанныхXML(Прав(XMLТип, СтрДлина(XMLТип)-3), "http://www.w3.org/2001/XMLSchema"));
								Иначе
									НовоеЗР.Тип = ИзXMLТипа(Новый ТипДанныхXML(XMLТип, ""));
								КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НовоеЗР.Тип) Тогда
					ОписаниеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(НовоеЗР.Реквизит);
					Если ОписаниеРеквизита = Неопределено Тогда
						НаименованиеРеквизита = ПолучитьПредставлениеРеквизитаНаЯзыке(НовоеЗР.Реквизит);
						НовоеЗР.Реквизит = НаименованиеРеквизита;
						Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, НаименованиеРеквизита) Тогда
							ОписаниеРеквизита = МетаданныеОбъекта.СтандартныеРеквизиты[НаименованиеРеквизита];
						Иначе
							ОписаниеРеквизита = Метаданные.ОбщиеРеквизиты.Найти(НаименованиеРеквизита);
						КонецЕсли;
					КонецЕсли;
					
					Если ОписаниеРеквизита <> Неопределено
						И ОписаниеРеквизита.Тип.Типы().Количество() = 1 Тогда
						НовоеЗР.Тип = ОписаниеРеквизита.Тип.Типы()[0];
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (УровеньЧтения = 3) И (ЧтениеXML.Имя = "Row") Тогда // Указатель на поле табличной части.
				НомерСтроки = НомерСтроки + 1;
			ИначеЕсли УровеньЧтения = 4 Тогда // Указатель на поле табличной части.
				ТипЗначенияПоляТЧ = "";
				ИмяПоляТЧ = ЧтениеXML.Имя;
				
				НовоеЗР = ТаблОбъект.Добавить();
				НовоеЗР.Реквизит = ИмяПоляТЧ;
				НовоеЗР.ИмяТЧ = ТекТЧ;
				НовоеЗР.НомерСтроки = НомерСтроки;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
							И ЧтениеXML.Имя = "xsi:type" Тогда
								XMLТип = ЧтениеXML.Значение;
								Если СтрНачинаетсяС(XMLТип, "xs:") Тогда
									ТипЗначенияПоляТЧ = ИзXMLТипа(
										Новый ТипДанныхXML(Прав(XMLТип, СтрДлина(XMLТип)-3),
										"http://www.w3.org/2001/XMLSchema"));
								Иначе
									ТипЗначенияПоляТЧ = ИзXMLТипа(Новый ТипДанныхXML(XMLТип, ""));
								КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			УровеньЧтения = УровеньЧтения - 1;
			ТипЗначения = "";
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если (УровеньЧтения = 2) Тогда // значение реквизита
				Попытка
					НовоеЗР.Значение = ?(ЗначениеЗаполнено(НовоеЗР.Тип),
						XMLЗначение(НовоеЗР.Тип, ЧтениеXML.Значение), ЧтениеXML.Значение);
				Исключение
					НовоеЗР.Значение = ЧтениеXML.Значение;
				КонецПопытки;
			ИначеЕсли (УровеньЧтения = 4) Тогда // значение реквизита
				
				Если ТипЗначенияПоляТЧ = "" Тогда
					ОписаниеРТЧ = Неопределено;
					Если ТабличныеЧастиМТД.Найти(ИмяТабличнойЧасти) <> Неопределено Тогда
						ОписаниеРТЧ = ТабличныеЧастиМТД[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяПоляТЧ);
						Если ОписаниеРТЧ <> Неопределено
							И ОписаниеРТЧ.Тип.Типы().Количество() = 1 Тогда
								ТипЗначенияПоляТЧ = ОписаниеРТЧ.Тип.Типы()[0];
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НовоеЗР.Значение = ?(ЗначениеЗаполнено(ТипЗначенияПоляТЧ),
					XMLЗначение(ТипЗначенияПоляТЧ, ЧтениеXML.Значение),
					ЧтениеXML.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблОбъект.Колонки.Добавить("НомерМетаданные",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Сч = 1;
	Для Каждого ТекСтрока Из ТаблОбъект Цикл
		ТекСтрока.НомерМетаданные = Сч;
		Сч = Сч + 1;
	КонецЦикла;
	
	ТаблОбъект.Сортировать("ИмяТЧ, НомерСтроки, Реквизит");
	
	Возврат ТаблОбъект;
	
КонецФункции // ДесериализоватьFastInfosetВТаблицу()

// Функция восстанавливает структуру и содержимое объекта по его сериализованному представлению.
//
// Входные параметры:
//    СтрокаXML - Строка - Строка base64, сжатая строка XML, сериализованное содержимое объекта.
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с со значениями реквизитов объекта и его ТЧ
//       Колонки таблицы значений:
//          ТЧ - тип значения Строка(100). Содержит имя ТЧ в виде "ТЧ_<ИмяТЧ>" или слово "Реквизит"
//               для реквизита шапки
//          Реквизит - тип значения Строка(100). Содержит имя реквизита ТЧ или имя реквизита шапки
//          НомерСтроки - тип значения Число. Содержит номер строки в ТЧ или ноль для реквизита шапки
//          Значение - тип значения произвольный. Значение реквизита ТЧ или реквизита шапки.
//
Функция ДесериализоватьОбъектВТаблицу(СтрокаXML, ТипОбъекта = Неопределено, Ссылка = Неопределено)
	
	// Проверим, а сжата ли строка
	Попытка
		// Сжата
		Если ТипЗнч(СтрокаXML) = Тип("ХранилищеЗначения") Тогда
			// Сжата
			РасшифрованнаяСтрока = СтрокаXML.Получить();
		Иначе
			// Не сжата
			РасшифрованнаяСтрока = СтрокаXML;
		КонецЕсли;
	Исключение
		// Не сжата
		РасшифрованнаяСтрока = СтрокаXML;
	КонецПопытки;
	
	// Описание типа Строка(200)
	ОписаниеСтроки200 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200));
	
	// Создаем результирующую таблицу	
	ТаблОбъект = Новый ТаблицаЗначений();
	// Колонки таблицы
	ТаблОбъект.Колонки.Добавить("ИмяТЧ", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблОбъект.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблОбъект.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблОбъект.Колонки.Добавить("Значение");
	
	Если ТипЗнч(РасшифрованнаяСтрока) = Тип("ЧтениеFastInfoset") Тогда
		Возврат ДесериализоватьFastInfosetВТаблицу(СтрокаXML, Ссылка, ТаблОбъект);
	КонецЕсли;
	
	// Начинаем читать XML
	ЧтениеИксЭмЭль = Новый ЧтениеXML();
	// Загружаем содержимое в формате XML
	ЧтениеИксЭмЭль.УстановитьСтроку(РасшифрованнаяСтрока);
	
	// Парсим...
	ЧтениеИксЭмЭль.Прочитать(); // Сам объект
	ТипОбъектаВсего = ЧтениеИксЭмЭль.ЗначениеАтрибута(0); // Тип объекта в атрибуте
	// Пустые значения
	ТекТЧ = "";
	НомерСтроки = 0;
	// Обход XML
	Пока ЧтениеИксЭмЭль.Прочитать() Цикл
		Если ЧтениеИксЭмЭль.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеИксЭмЭль.Имя = "РеквизитыШапки" Тогда
				// Устанавливаем ТЧ "Реквизиты"
				ТекТЧ = "Реквизиты";
				НомерСтроки = 0;
			ИначеЕсли ЧтениеИксЭмЭль.Имя = "ТабличнаяЧасть" Тогда
				// Устанавливаем ТЧ "ТЧ_"+ИмяТЧ
				ТекТЧ = "ТЧ_" + ЧтениеИксЭмЭль.ЗначениеАтрибута(0);
			ИначеЕсли ЧтениеИксЭмЭль.Имя = "Строка" Тогда
				// Текущий номер строки
				НомерСтроки = Число(ЧтениеИксЭмЭль.ЗначениеАтрибута(0));
			ИначеЕсли ЧтениеИксЭмЭль.Имя = "Реквизит" Тогда
				// Имя реквизита
				ИмяРеквизита = ЧтениеИксЭмЭль.ЗначениеАтрибута(0); 
				// Тип реквизита
				ТипРеквизита = ЧтениеИксЭмЭль.ЗначениеАтрибута(1);
				// Описание для неограниченных типов
				Описание = "";
				Попытка
					Описание = ЧтениеИксЭмЭль.ЗначениеАтрибута(2);
				Исключение 
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка чтения атрибута'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				Если НЕ ЗначениеЗаполнено(Описание) Тогда
					Описание = "";
				КонецЕсли;
				
				Если ТипРеквизита = "Строка" Тогда
					ОписаниеТипов = ОписаниеСтроки200;
				Иначе
					Попытка
						ОписаниеТипов = Новый ОписаниеТипов(ТипРеквизита);
					Исключение
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка типа реквизита'"),
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;
				// Значение реквизита
			    ЧтениеИксЭмЭль.Прочитать();
				// Добавляем запись о реквизите
				НоваяСтрока = ТаблОбъект.Добавить();
				НоваяСтрока.ИмяТЧ = ТекТЧ;
				НоваяСтрока.НомерСтроки = НомерСтроки;
				НоваяСтрока.Реквизит = ИмяРеквизита;
				Если СтрНайти(ТипРеквизита, "Ссылка.") > 0 Тогда
					Если СтрНайти(ТипРеквизита, "СправочникСсылка.") Тогда
						ИмяСправочника = СтрЗаменить(ТипРеквизита, "СправочникСсылка.", "");
						Если Метаданные.Справочники.Найти(ИмяСправочника)<>Неопределено Тогда
							НоваяСтрока.Значение = Справочники[ИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(ЧтениеИксЭмЭль.Значение));
						КонецЕсли; 
					КонецЕсли;
					Если СтрНайти(ТипРеквизита, "ДокументСсылка.") Тогда
						ИмяДокумента = СтрЗаменить(ТипРеквизита, "ДокументСсылка.", "");
						Если Метаданные.Документы.Найти(ИмяДокумента)<>Неопределено Тогда
							НоваяСтрока.Значение = Документы[ИмяДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ЧтениеИксЭмЭль.Значение));
						КонецЕсли;
					КонецЕсли;
					Если СтрНайти(ТипРеквизита, "ПланВидовХарактеристикСсылка.") Тогда
						ИмяПВХ = СтрЗаменить(ТипРеквизита, "ПланВидовХарактеристикСсылка.", "");
						Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяПВХ)<>Неопределено Тогда
							НоваяСтрока.Значение = ПланыВидовХарактеристик[ИмяПВХ].ПолучитьСсылку(Новый УникальныйИдентификатор(ЧтениеИксЭмЭль.Значение));
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ПустаяСтрока(Описание) Тогда
						Если Лев(Описание, 1) = "С" Тогда
							НоваяСтрока.Значение = ОписаниеТипов.ПривестиЗначение(ЧтениеИксЭмЭль.Значение);
						ИначеЕсли Лев(Описание, 1) = "Х" Тогда
							НоваяСтрока.Значение = ОписаниеТипов.ПривестиЗначение(ЧтениеИксЭмЭль.Значение);
							// Добавляем описание
							НоваяСтрока = ТаблОбъект.Добавить();
							НоваяСтрока.ИмяТЧ = ТекТЧ;
							НоваяСтрока.НомерСтроки = НомерСтроки;
							НоваяСтрока.Реквизит = ИмяРеквизита + " (описание)";
							НоваяСтрока.Значение = Сред(Описание, 2);
						Иначе // непонятно...
							Попытка
								НоваяСтрока.Значение = ОписаниеТипов.ПривестиЗначение(XMLЗначение(ОписаниеТипов.Типы()[0], ЧтениеИксЭмЭль.Значение));
							Исключение
								НоваяСтрока.Значение = ЧтениеИксЭмЭль.Значение;
							КонецПопытки;
						КонецЕсли;
					Иначе
						Если ОписаниеТипов.Типы().Количество() = 0 Тогда
							НоваяСтрока.Значение = Неопределено;
						Иначе
							Попытка
								НоваяСтрока.Значение = ОписаниеТипов.ПривестиЗначение(XMLЗначение(ОписаниеТипов.Типы()[0], ЧтениеИксЭмЭль.Значение));
							Исключение
								НоваяСтрока.Значение = ЧтениеИксЭмЭль.Значение;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблОбъект.Колонки.Добавить("НомерМетаданные", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Сч = 1;
	Для Каждого ТекСтрока Из ТаблОбъект Цикл
		ТекСтрока.НомерМетаданные = Сч;
		Сч = Сч + 1;
	КонецЦикла;
	
	ТаблОбъект.Сортировать("ИмяТЧ, НомерСтроки, Реквизит");
	
	Возврат ТаблОбъект;
	
КонецФункции

// Функция определяет различие между двумя версиями одного и того же объекта по табличным представлением версий.
//
// Входные параметры:
//    Версия1 - Таблица значений, табличное представление первой (старой) версии объекта
//    Версия2 - Таблица значений, табличное представление второй (новой) версии объекта.
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с со значениями отличающихся реквизитов объекта и его ТЧ
//       Колонки таблицы значений:
//          ТЧ - тип значения Строка(100). Содержит имя ТЧ в виде "ТЧ_<ИмяТЧ>" или слово "Реквизит"
//               для реквизита шапки
//          Реквизит - тип значения Строка(100). Содержит имя реквизита ТЧ или имя реквизита шапки
//          НомерСтроки - тип значения Число. Содержит номер строки в ТЧ или ноль для реквизита шапки
//          СтароеЗначение - тип значения произвольный. Старое значение реквизита ТЧ или реквизита шапки
//          НовоеЗначение - тип значения произвольный. Новое значение реквизита ТЧ или реквизита шапки.
//
Функция ОпределитьРазличиеТабличныхВерсийОбъекта(Табл1, Табл2)
	
	Результат = Новый ТаблицаЗначений();
	
	Результат.Колонки.Добавить("ИмяТЧ", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	Результат.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	Результат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Результат.Колонки.Добавить("НомерМетаданные", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Результат.Колонки.Добавить("СтароеЗначение");
	Результат.Колонки.Добавить("НовоеЗначение");
	
	Сч1 = 0;
	сч2 = 0;
	
	Макс1 = Табл1.Количество();
	Макс2 = Табл2.Количество();
	
	СдвинутПервый = Истина;
	СдвинутВторой = Истина;
	
	Пока Сч1 < Макс1 И Сч2 < Макс2 Цикл
		// Важно!!!
		// Табл1 и Табл2 предварительно должны быть отсортированы по ИмяТЧ,НомерСтроки,Реквизит.
		
		Стр1 = Табл1[Сч1];
		Стр2 = Табл2[Сч2];
		
		Если (Стр1.ИмяТЧ = Стр2.ИмяТЧ) И (Стр1.Реквизит = Стр2.Реквизит) И (Стр1.НомерСтроки = Стр2.НомерСтроки) Тогда
			
			Если Стр1.Значение <> Стр2.Значение Тогда
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр1);
				НоваяСтрока.СтароеЗначение = Стр1.Значение;
				НоваяСтрока.НовоеЗначение  = Стр2.Значение;
				НоваяСтрока.НомерМетаданные = Стр2.НомерМетаданные;
			КонецЕсли;
			
			СдвинутПервый = Ложь;
			СдвинутВторой = Ложь;
			
			Если Сч1 < Макс1 - 1 Тогда
				Сч1 = Сч1 + 1;
				СдвинутПервый = Истина;
			Иначе
				Если Сч2 >= Макс2 - 1 Тогда
					Сч1 = Сч1 + 1; // для "красивого" выхода из цикла;
				КонецЕсли;
			КонецЕсли;
			
			Если Сч2 < Макс2 - 1 Тогда
				Сч2 = Сч2 + 1;
				СдвинутВторой = Истина;
			Иначе
				Если Сч1 >= Макс1 - 1 Тогда
					Сч2 = Сч2 + 1; // для "красивого" выхода из цикла;
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если СдвинутПервый И СдвинутВторой Тогда
			ОтсутствуетВПервойСтр = (Стр1.ИмяТЧ > Стр2.ИмяТЧ);
			Если НЕ ОтсутствуетВПервойСтр Тогда
				ОтсутствуетВПервойСтр = (Стр1.НомерСтроки > Стр2.НомерСтроки);
			КонецЕсли;
			Если НЕ ОтсутствуетВПервойСтр Тогда
				ОтсутствуетВПервойСтр = (Стр1.Реквизит > Стр2.Реквизит);
			КонецЕсли;
			
			ОтсутствуетВоВторойСтр = (Стр1.ИмяТЧ < Стр2.ИмяТЧ);
			Если НЕ ОтсутствуетВоВторойСтр Тогда
				ОтсутствуетВоВторойСтр = (Стр1.НомерСтроки < Стр2.НомерСтроки);
			КонецЕсли;
			Если НЕ ОтсутствуетВоВторойСтр Тогда
				ОтсутствуетВоВторойСтр = (Стр1.Реквизит < Стр2.Реквизит);
			КонецЕсли;
			
		Иначе
			ОтсутствуетВПервойСтр  = НЕ СдвинутПервый;
			ОтсутствуетВоВторойСтр = НЕ СдвинутВторой;
		КонецЕсли;
		
		СдвинутПервый = Ложь;
		СдвинутВторой = Ложь;
		
		Если ОтсутствуетВПервойСтр Тогда
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр2);
			НоваяСтрока.СтароеЗначение = НСтр("ru = '<значение не найдено>'");
			НоваяСтрока.НовоеЗначение  = Стр2.Значение;
			НоваяСтрока.НомерМетаданные = Стр2.НомерМетаданные;
			
			Если Сч2 < Макс2 Тогда
				Сч2 = Сч2 + 1;
				СдвинутВторой = Истина;
			Иначе
				Если Сч1 >= Макс1 - 1 Тогда
					Сч2 = Сч2 + 1; // для "красивого" выхода из цикла;
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если ОтсутствуетВоВторойСтр Тогда
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр1);
			НоваяСтрока.СтароеЗначение = Стр1.Значение;
			НоваяСтрока.НовоеЗначение  = НСтр("ru = '<значение не найдено>'");
			НоваяСтрока.НомерМетаданные = Стр1.НомерМетаданные;
			
			
			Если Сч1 < Макс1 Тогда
				Сч1 = Сч1 + 1;
				СдвинутПервый = Истина;
			Иначе
				Если Сч2 >= Макс2 - 1 Тогда
					Сч1 = Сч1 + 1; // для "красивого" выхода из цикла;
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Функция ТипРеквизита(ЗначениеРеквизита, ГибкийОбъект = Ложь) Экспорт
Функция ТипРеквизита(ЗначениеРеквизита)
	
	ТипЗначения = ТипЗнч(ЗначениеРеквизита);
	
	// Примитивные типы
	Если ЗначениеРеквизита = Неопределено Тогда
		Возврат "Неопределено";
	КонецЕсли;
	
	Если ТипЗначения = Неопределено Тогда
		Возврат "Неопределено";
	КонецЕсли;
	
	Если ТипЗначения = Тип("Число") Тогда
		Возврат "Число";
	КонецЕсли;
	
	Если ТипЗначения = Тип("Строка") Тогда
		Возврат "Строка";
	КонецЕсли;
	
	Если ТипЗначения = Тип("Дата") Тогда
		Возврат "Дата";
	КонецЕсли;
	
	Если ТипЗначения = Тип("Булево") Тогда
		Возврат "Булево";
	КонецЕсли;
	
	Если ТипЗначения = Тип("ХранилищеЗначения") Тогда
		Возврат "ХранилищеЗначения";
	КонецЕсли;
	
	Если ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		Возврат "УникальныйИдентификатор";
	КонецЕсли;
	
	Результат = ЗначениеРеквизита.Метаданные().Имя;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Результат = "СправочникСсылка." + Результат;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Результат = "ДокументСсылка." + Результат;
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Результат = "ПланВидовХарактеристикСсылка." + Результат;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция получает представление жесткого объекта в виде XML-строки (сериализация).
//
// Входные параметры:
//     Объект - Объект или Ссылка, жесткий объект (или ссылка на объект),
//                                 сериализованное представление которого нужно получить.
//
// Возвращаемое значение
//     Строка - Сериализованное представление объекта, сжатое и перекодированное в base64.
//
Функция ПолучитьСериализированноеПредставлениеЖесткогоОбъекта(Объект)
	// Преобразуем ссылку в объект
	Если Объект.Ссылка = Объект Тогда
		ТекОбъект = Объект.ПолучитьОбъект();
	Иначе
		ТекОбъект = Объект;
	КонецЕсли;
	
	ЗаписьИксЭмЭль = Новый ЗаписьXML();
	ЗаписьИксЭмЭль.УстановитьСтроку();
	
	// Объявление
	ЗаписьИксЭмЭль.ЗаписатьОбъявлениеXML();
	// Начало корня
	ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Объект");
	ЗаписьИксЭмЭль.ЗаписатьАтрибут("Тип", СтрЗаменить(ТипРеквизита(ТекОбъект.Ссылка), "Ссылка.", "Объект."));
	
	МетаданныеОбъекта = ТекОбъект.Метаданные();
	ИерархияГрупп     = (Метаданные.Справочники.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.Иерархический И МетаданныеОбъекта.ВидИерархии=Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов) ИЛИ (Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.Иерархический);
	
	// Реквизиты шапки
	// Начало секции "Реквизиты шапки" (стандартные реквизиты).
	ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("РеквизитыШапки");
	Для Каждого ТекРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		
		ЗначениеРеквизита = ТекОбъект[ТекРеквизит.Имя];
		
		// Начало секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Реквизит");
		
		// Имя реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Имя", ТекРеквизит.Имя);
		// Тип реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Тип", ТипРеквизита(ЗначениеРеквизита));
		// Значение реквизита
		ЗаписьИксЭмЭль.ЗаписатьТекст(XMLСтрока(ЗначениеРеквизита));
		
		// Конец секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Общие реквизиты
	
	Для Каждого ТекРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		
		ЗначениеСостава = ТекРеквизит.Состав.Найти(МетаданныеОбъекта);
		
		Если ЗначениеСостава=Неопределено ИЛИ (НЕ ЗначениеСостава.Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = ТекОбъект[ТекРеквизит.Имя];
		
		// Начало секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Реквизит");
		
		// Имя реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Имя", ТекРеквизит.Имя);
		// Тип реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Тип", ТипРеквизита(ЗначениеРеквизита));
		// Значение реквизита
		ЗаписьИксЭмЭль.ЗаписатьТекст(XMLСтрока(ЗначениеРеквизита));
		
		// Конец секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Обычные реквизиты
	
	Для Каждого ТекРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		// Отбросим лишние поля
		Если ИерархияГрупп Тогда
			Если ТекРеквизит.Использование=Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И НЕ ТекОбъект.ЭтоГруппа Тогда
				Продолжить;
				
			ИначеЕсли ТекРеквизит.Использование=Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И ТекОбъект.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеРеквизита = ТекОбъект[ТекРеквизит.Имя];
		
		// Начало секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Реквизит");
		
		// Имя реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Имя", ТекРеквизит.Имя);
		// Тип реквизита
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Тип", ТипРеквизита(ЗначениеРеквизита));
		// Значение реквизита
		ЗаписьИксЭмЭль.ЗаписатьТекст(XMLСтрока(ЗначениеРеквизита));
		
		// Конец секции "Реквизит"
		ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	// Конец секции "Реквизиты шапки"
	ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
	
	РеквизитыТЧ = Новый ТаблицаЗначений();
	РеквизитыТЧ.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	// РеквизитыТЧ.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка")); // тип надо определять "по месту".
	
	// Табличные части 
	Для Каждого ТекТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		// Отбросим лишние поля
		Если ИерархияГрупп Тогда
			Если ТекТЧ.Использование=Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И НЕ ТекОбъект.ЭтоГруппа Тогда
				Продолжить;
				
			ИначеЕсли ТекТЧ.Использование=Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента 
				И ТекОбъект.ЭтоГруппа Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИмяТЧ = ТекТЧ.Имя;
		
		// Перечень реквизитов
		РеквизитыТЧ.Очистить();
		Для Каждого ТекРеквизит Из ТекТЧ.Реквизиты Цикл
			НоваяСтрока = РеквизитыТЧ.Добавить();
			НоваяСтрока.Имя = ТекРеквизит.Имя;
		КонецЦикла;
		
		// Начало секции "Табличная часть"
		ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
		// Имя ТЧ
		ЗаписьИксЭмЭль.ЗаписатьАтрибут("Имя", ИмяТЧ);
		
		// Строки ТЧ
		Для Сч = 1 По ТекОбъект[ИмяТЧ].Количество() Цикл
			// Начало секции "Строка"
			ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Строка");
			
			// Номер строки
			ЗаписьИксЭмЭль.ЗаписатьАтрибут("НомерСтроки", XMLСтрока(Сч));
			
			ТекСтрока = ТекОбъект[ИмяТЧ][Сч - 1];
			
			// Значения реквизитов строки
			Для Каждого ТекРеквизитТЧ Из РеквизитыТЧ Цикл
				ЗначениеРеквизита = ТекСтрока[ТекРеквизитТЧ.Имя];
				
				// Начало секции "Реквизит"
				ЗаписьИксЭмЭль.ЗаписатьНачалоЭлемента("Реквизит");
				
				// Имя реквизита
				ЗаписьИксЭмЭль.ЗаписатьАтрибут("Имя", ТекРеквизитТЧ.Имя);
				// Тип реквизита
				ЗаписьИксЭмЭль.ЗаписатьАтрибут("Тип", ТипРеквизита(ЗначениеРеквизита));
				// Значение реквизита.
				ЗаписьИксЭмЭль.ЗаписатьТекст(XMLСтрока(ЗначениеРеквизита));
				
				// Конец секции "Реквизит"
				ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
			// Конец секции "Строка"
			ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		// Конец секции "Табличная часть"
		ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Конец корня
	ЗаписьИксЭмЭль.ЗаписатьКонецЭлемента();
	
	Архив = Новый ХранилищеЗначения(ЗаписьИксЭмЭль.Закрыть(), Новый СжатиеДанных(9));
	
	Возврат Архив;
	
КонецФункции

// Функция возвращает имя формы как оно задано в конфигураторе для гибкого объекта
//
// Входные параметры:
//    СсылкаНаВерсию - СправочникСсылка, ссылка на объект
//    ТипОбъекта     - Тип, тип ссылки на объект
//    ДатаВерсии     - Дата, дата записи версии в регистре версий объектов.
//
// Возвращаемое значение
//    Структура - Структура, состоящая из двух массивов: ДанныеОбъекта и Различия.
//
//    ДанныеОбъекта - массив структур с полями ИмяТЧ, Реквизит, НомерСтроки, Значение.
//                    Поля содержат информацию о реквизитах версии объекта
//    Различия      - массив структур с полями ИмяТЧ, Реквизит, НомерСтроки.
//                    Поля содержат информацию об измененных реквизитах в версии объекта.
//
Функция ПолучитьДанныеОВерсииИРазличиях(СсылкаНаВерсию, ТипОбъекта, ДатаВерсии, МестоположениеВерсии, ДатаПредыдущейВерсии)
	
	СтруктураРезультата = Новый Структура("ДанныеОбъекта, Различия");
	
	Запрос = Новый Запрос();
	Если МестоположениеВерсии = "Регистр" Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВерсииОбъектов.Объект КАК Объект,
		|	ВерсииОбъектов.ВерсияОбъекта КАК СтараяВерсия
		|ПОМЕСТИТЬ ПредыдущаяВерсия
		|ИЗ
		|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|ГДЕ
		|	ВерсииОбъектов.ДатаВерсии < &ДатаВерсии
		|	И ВерсииОбъектов.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииОбъектов.ДатаВерсии УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсииОбъектов.Объект КАК Объект,
		|	ВерсииОбъектов.ВерсияОбъекта КАК НоваяВерсия,
		|	ЕСТЬNULL(ПредыдущаяВерсия.СтараяВерсия, """") КАК СтараяВерсия,
		|	""Регистр"" КАК МестоположениеВерсии,
		|	ВерсииОбъектов.ДатаВерсии КАК ДатаВерсии
		|ИЗ
		|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПредыдущаяВерсия КАК ПредыдущаяВерсия
		|		ПО ВерсииОбъектов.Объект = ПредыдущаяВерсия.Объект
		|ГДЕ
		|	ВерсииОбъектов.Объект = &Объект
		|	И ВерсииОбъектов.ДатаВерсии = &ДатаВерсии";
		
		Запрос.УстановитьПараметр("Объект", СсылкаНаВерсию);
		Запрос.УстановитьПараметр("ДатаВерсии", ДатаВерсии);
	Иначе
		ПредыдущаяВерсия        = ПолучитьТаблицуИзВнешнейБазы(СсылкаНаВерсию, ДатаПредыдущейВерсии, ДатаПредыдущейВерсии);//, Пользователь, Компьютер);
		ВосстанавливаемаяВерсия = ПолучитьТаблицуИзВнешнейБазы(СсылкаНаВерсию, ДатаВерсии, ДатаВерсии);//, Пользователь, Компьютер);
		Запрос.Текст = "ВЫБРАТЬ
		|	ВнешняяТаблица.Объект КАК Объект,
		|	ВнешняяТаблица.ОбъектВXML КАК ОбъектВXML
		|ПОМЕСТИТЬ ПредыдущаяВерсия
		|ИЗ
		|	&ПредыдущаяВерсия КАК ВнешняяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнешняяТаблица.Объект КАК Объект,
		|	ВнешняяТаблица.ОбъектВXML КАК ОбъектВXML
		|ПОМЕСТИТЬ ВосстанавливаемаяВерсия
		|ИЗ
		|	&ВосстанавливаемаяВерсия КАК ВнешняяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВосстанавливаемаяВерсия.Объект КАК Объект,
		|	ПредыдущаяВерсия.ОбъектВXML КАК СтараяВерсия,
		|	ВосстанавливаемаяВерсия.ОбъектВXML КАК НоваяВерсия,
		|	""ВнешняяБД"" КАК МестоположениеВерсии
		|ИЗ
		|	ПредыдущаяВерсия КАК ПредыдущаяВерсия
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВосстанавливаемаяВерсия КАК ВосстанавливаемаяВерсия
		|		ПО ПредыдущаяВерсия.Объект = ВосстанавливаемаяВерсия.Объект";
		Запрос.УстановитьПараметр("ПредыдущаяВерсия",        ПредыдущаяВерсия);
		Запрос.УстановитьПараметр("ВосстанавливаемаяВерсия", ВосстанавливаемаяВерсия);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив();
	
	Если Выборка.МестоположениеВерсии = "Регистр" И ЗначениеЗаполнено(Выборка.СтараяВерсия) Тогда 
		ОбъектВАрхиве = Выборка.СтараяВерсия.Получить();  
		Если НЕ ОбъектВАрхиве = Неопределено И НЕ ТипЗНЧ(ОбъектВАрхиве) = ТИП("Строка") Тогда
		   СтараяВерсия = ПолучитьXMLВерсию(ОбъектВАрхиве);
		Иначе   
			СтараяВерсия = Выборка.СтараяВерсия;
	   	КонецЕсли;
    Иначе
	   СтараяВерсия = Выборка.СтараяВерсия;
	КонецЕсли;
	
	Если Выборка.МестоположениеВерсии = "Регистр" Тогда 
		ОбъектВАрхиве = Выборка.НоваяВерсия.Получить();  
		Если НЕ ОбъектВАрхиве = Неопределено Тогда 
			Если НЕ ТипЗНЧ(ОбъектВАрхиве) = ТИП("Строка") Тогда
				НоваяВерсия = ПолучитьXMLВерсию(ОбъектВАрхиве);
				Если НоваяВерсия = Неопределено И ТипЗнч(ОбъектВАрхиве) = Тип("Структура") Тогда
					ДвоичныеДанные = ОбъектВАрхиве.Объект;
					НоваяВерсия = Новый ЧтениеFastInfoSet;
					НоваяВерсия.УстановитьДвоичныеДанные(ДвоичныеДанные);
				КонецЕсли;
			Иначе
				НоваяВерсия = Выборка.НоваяВерсия;
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьПользователю (НСтр("ru = 'Новая версия повреждена'"));
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		НоваяВерсия = Выборка.НоваяВерсия;
	КонецЕсли;
	
	// Если это первая версия
	СтараяВерсия = ?(ЗначениеЗаполнено(СтараяВерсия), СтараяВерсия, НоваяВерсия); 
	
	ТаблицаОбъекта = ДесериализоватьОбъектВТаблицу(НоваяВерсия, ТипОбъекта, СсылкаНаВерсию);
	
	Для Каждого ТекСтрока Из ТаблицаОбъекта Цикл
		СтруктураОформления = Новый Структура("ИмяТЧ, Реквизит, НомерСтроки, Значение");
		ЗаполнитьЗначенияСвойств(СтруктураОформления, ТекСтрока);
		МассивСтруктур.Добавить(СтруктураОформления);
	КонецЦикла;
	
	СтруктураРезультата.ДанныеОбъекта = МассивСтруктур;
	МассивСтруктур = Новый Массив();
	
	Если НЕ ПустаяСтрока(СтараяВерсия) И НЕ (СтараяВерсия = НоваяВерсия) Тогда
	
		ТаблицаРазличий = ОпределитьРазличиеВерсийОбъекта(СтараяВерсия, НоваяВерсия);
		
		Для Каждого ТекСтрока Из ТаблицаРазличий Цикл
			СтруктураОформления = Новый Структура("ИмяТЧ, Реквизит, НомерСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураОформления, ТекСтрока);
			МассивСтруктур.Добавить(СтруктураОформления);
		КонецЦикла;
		
		СтруктураРезультата.Различия = МассивСтруктур;
	Иначе
		
		СтруктураРезультата.Различия = Неопределено;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВИЗУАЛЬНОГО ВЫДЕЛЕНИЯ ИЗМЕНЕННЫХ РЕКВИЗИТОВ

// Процедура подсвечивает измененный реквизит на форме (для жестких и гибких объектов).
//
// Входные параметры:
//     Форма        - Управляемая форма, форма, на которой необходимо выделить реквизит
//     ИмяРеквизита - Строка, имя подсвечиваемого реквизита.
//
// Возвращаемое значение
//     НЕТ
//
Процедура ВыделитьИзмененныйРеквизит(Форма, ИмяРеквизита)
	
	НовоеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеКД = НовоеОформление.Поля.Элементы.Добавить();
	ПолеКД.Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизита);
	
	НовоеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветИзмененногоПоля);
	
КонецПроцедуры

// Процедура подсвечивает измененный реквизит в табличной части.
// реквизитов шапки на форме (для жестких объектов).
//
// Входные параметры:
//     Форма        - Управляемая форма, форма, на которой необходимо выделить реквизит
//     ИмяТЧ        - Строка, имя табличной части, в которой подсвечивается ячейка
//     НомерСтроки  - Число, номер строки табличной части, в которой подсвечивается ячейка
//     ИмяКолонки   - Строка, имя колонки табличной части, в которой подсвечивается ячейка.
//
// Возвращаемое значение
//     НЕТ
//
Процедура ВыделитьИзмененныйРеквизитТабличнойЧасти(Форма, ИмяТЧ, НомерСтроки, ИмяКолонки)
	
	НовоеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеКД = НовоеОформление.Поля.Элементы.Добавить();
	ПолеКД.Поле = Новый ПолеКомпоновкиДанных(ИмяТЧ + ИмяКолонки);
		
	ОтборПоРеквизиту = НовоеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПоРеквизиту.Использование = Истина;
	ОтборПоРеквизиту.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".НомерСтроки");
	ОтборПоРеквизиту.ПравоеЗначение = НомерСтроки;
	ОтборПоРеквизиту.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	
	НовоеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветИзмененногоПоля);
	
КонецПроцедуры


#КонецОбласти
