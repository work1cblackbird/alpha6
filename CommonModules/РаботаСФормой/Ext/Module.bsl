
#Область ПрограммныйИнтерфейс

// Определяет необходимость отменить открытие формы. Если был установлен соответствующий флаг при вводе на основании.
// 
// Возвращаемое значение:
//  Булево
Функция НужноОтменитьОткрытиеФормы() Экспорт
	
	СообщенияПользователю = ПолучитьСообщенияПользователю();
	
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		
		Если Сообщение.Поле = "ОтменитьОткрытие" Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область Список

// Скрывает элементы не доступные пользователю. Вызов предусмотрен только из процедуры ПриСозданииНаСервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура СкрытьЭлементыНедоступныеПоКлючу(Форма) Экспорт
	
	УстанавливаемыеПараметры = Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча",
		ПараметрыСеанса.МаскаЛицензирования);	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(УстанавливаемыеПараметры);
	
КонецПроцедуры

// Скрывает команды из формы списка "СоздатьПоПараметру" недоступные пользователю
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура УстановитьВидимостьКомандСоздатьПоПараметру(Форма) Экспорт

	ИмяГруппыКоманд = "СписокСоздать";
	ГруппаКоманд = Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти(ИмяГруппыКоманд);
	Если ГруппаКоманд = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлемент Из ГруппаКоманд.ПодчиненныеЭлементы Цикл
		
		СтрокаЗамены = "ФормаСоздатьПоПараметру";		
		ОбъектМеданных = Метаданные.Документы.Найти(СтрЗаменить(ПодчиненныйЭлемент.Имя, СтрокаЗамены, ""));
		
		Если НЕ ОбъектМеданных = Неопределено Тогда
			ПодчиненныйЭлемент.Видимость = ПравоДоступа("Добавление", ОбъектМеданных);
		КонецЕсли;		 
		
	КонецЦикла;
		
КонецПроцедуры

// Выполняет настройку формы списка в режиме выбора. Вызов предусмотрен только из процедуры ПриСозданииНаСервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - настраиваемая форма;
//  Список - РеквизитФормы - реквизит динамического списка формы;
//  Параметры - Структура - параметры открытия формы.
//
Процедура УстановитьРежимВыбора(Форма, Список, Параметры) Экспорт
	
	Список.РежимВыбора = Параметры.РежимВыбора;
	
	Если Не Список.РежимВыбора Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КлючОбъекта = УправлениеДиалогомСервер.ПолучитьМетаданныеОбъектаФормы(Форма).ПолноеИмя() + ".РежимВыбора";
	Форма.КлючСохраненияПоложенияОкна = КлючОбъекта;
	Форма.КлючНазначенияИспользования = КлючОбъекта;
	Форма.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	// При выборе не нужно сохранять и загружать настройки пользователя, они будут только мешать.
	Форма.Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	
КонецПроцедуры

// Выполняем настройку отборов основного списка на форме. Вызов предусмотрен только из процедуры ПриСозданииНаСервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура НастроитьОсновнойДинамическийСписокФормы(Форма) Экспорт
	
	ЗащищенныеФункцииСервер.НастроитьОсновнойДинамическийСписокФормы(Форма);
	
КонецПроцедуры

// Настраивает формат вывода суммы в поле.
// 
// Параметры:
//  Поле - ПолеФормы - настраиваемое поле.
//
Процедура УстановитьФормаСуммыДокумента(Поле) Экспорт
	
	Поле.Формат = Константы.ФорматВыводаСуммы.Получить();
	
КонецПроцедуры

// Выполняет установку признака автоматического сохранения пользовательски настроек.
// Вызов предусмотрен только из процедуры ПриСозданииНаСервере.
// 
// Параметры:
//  Список - РеквизитФормы - реквизит динамического списка формы;
//  Параметры - Структура - параметры открытия формы.
//
Процедура УстановитьАвтоматическоеСохранениеПользовательскихНастроек(Список, Параметры) Экспорт
	
	Если Параметры = Неопределено ИЛИ Не Параметры.Свойство("Отбор") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Отбор.Количество() Тогда
		Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	КонецЕсли;
		
КонецПроцедуры // УстановитьАвтоматическоеСохранениеПользовательскихНастроек()

// Выводит отборы пользовательских настроек днамического списка формы.
//
// Параметры:
//  Форма                                - УправляемаяФорма - Форма, на которую необходимо вывести элементы отбора.
//  СтандартнаяОбработка                 - Булево           - В данный параметр передается признак выполнения системной обработки события.
//  ГруппаПользовательскихНастроек       - Строка           - Имя группы, в которую необходимо вывести элементы отбора.
//                                                          Если данный параметр не заполнен, то подразумевается, что на форме присутствует группа с
//                                                          именем "СписокКомпоновщикНастроекПользовательскиеНастройки"
//  Список                               - Строка           - Имя динамического списка формы, из которого будут получены отборы.
//                                                          Если данный параметр не заполнен, то подразумевается, что на форме присутствует
//                                                          Динамический список с именем "Список".
//  ВыводитьВключенныеВПользовательскиеНастройки - Булево - Признак вывода отборов с отметкой "Включать в пользовательские настройки".
//  ВыводитьОтборыСПометкойИспользование - Булево           - Признак вывода отборов с пометкой "Использование".
//  ВыводитьОтборыБезПометок             - Булево           - Признак вывода отборов без пометок.
//
Процедура ВывестиПользовательскиеОтборы(Форма,
		СтандартнаяОбработка,
		ГруппаПользовательскихНастроек = "СписокКомпоновщикНастроекПользовательскиеНастройки",
		Список = "Список",
		ВыводитьВключенныеВПользовательскиеНастройки = Истина,
		ВыводитьОтборыСПометкойИспользование = Ложь,
		ВыводитьОтборыБезПометок = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;
	
	//	Очищаем все созданные элементы с отборами, через удаление главной группы
	Для Каждого ЭлементСписка Из Форма.Элементы[ГруппаПользовательскихНастроек].ПодчиненныеЭлементы Цикл
		
		Форма.Элементы.Удалить(ЭлементСписка);
		
	КонецЦикла;

	ПользовательскийОтбор = Форма[Список].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
		Форма[Список].КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	ДоступныеПоляОтборов = ПользовательскийОтбор.ДоступныеПоляОтбора.Элементы;
		
	ЭлементыВключенныеВПользовательскиеНастройки = Новый СписокЗначений;
	
	НомерЭлемента = 0;
	
	Для Каждого Элемент Из ПользовательскийОтбор.Элементы Цикл
		
		ЕстьПометкаВключенияВПользовательскиеНастройки = ЗначениеЗаполнено(Элемент.ИдентификаторПользовательскойНастройки);
		ЕстьПометкаИспользования = Элемент.Использование;
		
		Если (ВыводитьВключенныеВПользовательскиеНастройки И ЕстьПометкаВключенияВПользовательскиеНастройки)
			ИЛИ (ВыводитьОтборыСПометкойИспользование И ЕстьПометкаИспользования)
			ИЛИ (ВыводитьОтборыБезПометок И НЕ ЕстьПометкаВключенияВПользовательскиеНастройки И НЕ ЕстьПометкаИспользования) Тогда
			
			ЭлементыВключенныеВПользовательскиеНастройки.Добавить(Элемент, НомерЭлемента);
			
		КонецЕсли;
		
		НомерЭлемента = НомерЭлемента + 1;
		
	КонецЦикла;
	
	// Создаём главную группу
	ПолеОтборы = Форма.Элементы.Добавить("ПолеОтборы", Тип("ГруппаФормы"), Форма.Элементы[ГруппаПользовательскихНастроек]);
	ПолеОтборы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПолеОтборы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ПолеОтборы.ОтображатьЗаголовок = Ложь;
	ПолеОтборы.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	
	//	Начинаем добавлять настройки на форму
	Для Каждого ЭлементОтбора Из ЭлементыВключенныеВПользовательскиеНастройки Цикл
		
		НомерВПользовательскихНастройках = Число(ЭлементОтбора.Представление);
		
		//	Создаём группу под каждую настройку
		ПолеГруппыОтбора = Форма.Элементы.Добавить(
			"КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + НомерВПользовательскихНастройках,
			Тип("ГруппаФормы"),
			ПолеОтборы
		);
		ПолеГруппыОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ПолеГруппыОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ПолеГруппыОтбора.ОтображатьЗаголовок = Ложь;
		ПолеГруппыОтбора.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		
		//	Создаём элементы с привязкой к настройкам компоновщика данных
		ПолеИспользование = Форма.Элементы.Добавить(
			"КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + НомерВПользовательскихНастройках + "Использование",
			Тип("ПолеФормы"),
			ПолеГруппыОтбора
		);
		ПолеИспользование.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеИспользование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Заголовок = ПолучитьИмяЗаголовкаПользовательскогоОтбора(ДоступныеПоляОтборов, ЭлементОтбора.Значение.ЛевоеЗначение);
		Если Заголовок = Неопределено Тогда 
			Форма[Список].ТекстЗапроса = Форма[Список].ТекстЗапроса + " ";
			Заголовок = ПолучитьИмяЗаголовкаПользовательскогоОтбора(ДоступныеПоляОтборов, ЭлементОтбора.Значение.ЛевоеЗначение);
		КонецЕсли;
		ПолеИспользование.Заголовок = Заголовок;
		ПолеИспользование.ПутьКДанным = Список + ".КомпоновщикНастроек.ПользовательскиеНастройки[0][" + НомерВПользовательскихНастройках + "].Использование";
		
		ПолеЗначение = Форма.Элементы.Добавить(
			"КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + НомерВПользовательскихНастройках + "Значение",
			Тип("ПолеФормы"),
			ПолеГруппыОтбора
		);
		ПолеЗначение.Вид = ВидПоляФормы.ПолеВвода;
		ПолеЗначение.ВыбиратьТип = Ложь;
		ПолеЗначение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеЗначение.ПутьКДанным = Список + ".КомпоновщикНастроек.ПользовательскиеНастройки[0][" + НомерВПользовательскихНастройках + "].Значение";
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Документ

// Процедура производит инициализацию пунктов меню выбора хозяйственной операции в форме объекта.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Объект - Неопределено, ДанныеФормыСтруктура - 
//
Процедура ИнициализироватьМенюВыбораХозОперации(Форма, Объект = Неопределено) Экспорт
	
	ЗащищенныеФункцииСервер.ИнициализироватьМенюВыбораХозОперации(Форма, Объект);
	
КонецПроцедуры

// Производит установку параметров отбора по организации и по подразделению для тех реквизитов, которые указаны Функция.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Объект - Неопределено, ДанныеФормыСтруктура - 
//
Процедура РасставитьСвязиПараметровВыбораПоОрганизации(Форма, Объект = Неопределено) Экспорт
	
	ЗащищенныеФункцииСервер.РасставитьСвязиПараметровВыбораПоОрганизации(Форма, Объект);
	
КонецПроцедуры

// Накладывает ограничение на выбор контактных лиц в поле.
// 
// Параметры:
//  ПолеВвода - ПолеВвода
//
Процедура ОграничитьВыборКонтактныхЛиц(ПолеВвода) Экспорт
	
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
		ПолеВвода.ПараметрыВыбора,
		"Отбор.ВидКонтрагента",
		Справочники.Контрагенты.ПолучитьВидыКонтрагентов()
	);
	
КонецПроцедуры

// Заполнение реквизитов таблицы товаров на форме
// 
// Параметры:
//  Товары - ТаблицаЗначений
//
Процедура ЗаполнитьСлужебныеРеквизитыТоваров(Товары) Экспорт
	
	// TODO: Разношерстные реквизиты заполняются в единой процедуре имя которой ни очем не говорит
	//       нужно разбить на разные процедуры по подсистемам. Подумать над интерфейсом. Возможно сделать через
	//       список модулей
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Товары);
	
КонецПроцедуры

// Определяет необходимость отображения колонки Характеристика.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Объект - ДанныеФормыКоллекция.
//
Процедура УстановитьВидимостьКолонкиХарактеристика(Форма, Объект) Экспорт

	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(Форма,,, Объект);

КонецПроцедуры

// Определяет необходимость отображения колонки Содержание.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Объект - ДанныеФормыКоллекция.
//
Процедура УстановитьВидимостьКолонкиСодержаниеУслуги(Форма, Объект, СуффиксКолонок = "") Экспорт
	
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиСодержаниеУслуги(Форма, , СуффиксКолонок, Объект);
	
КонецПроцедуры

// Процедура устанавливает заголовок формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура - 
//
Процедура УстановитьЗаголовокФормыДокумента(Форма, Объект) Экспорт
	
	Форма.АвтоЗаголовок = Ложь;
	УправлениеДиалогомДокументаСервер.ОбработкаПолученияПредставления(Неопределено, Объект, Форма.Заголовок);	
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура устанавливает блокировку редактирования Номера документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ЗаблокироватьРедактированиеНомераИДатыДокумента(Форма, Объект) Экспорт
	
	ЭлементНомер = Форма.Элементы.Найти("Номер");
	ЭлементДата  = Форма.Элементы.Найти("Дата");
	
	ЭтоОбъектДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка));
	
	Если ЭтоОбъектДокумент Тогда
		
		ОтсутствуетПравоНаРедактирование = НЕ ПраваИНастройкиПользователя.Значение("РазрешитьРедактированиеНомеровДокументов", Объект);
		РедактированиеЗапрещено          = НЕ ПраваИНастройкиПользователя.Значение("ОткрытиеФормыПараметрыДокументаВРежимеРедактирование", Объект);
			
		Если ЭлементНомер <> Неопределено Тогда
			
			ЭлементНомер.ТолькоПросмотр = ОтсутствуетПравоНаРедактирование ИЛИ РедактированиеЗапрещено;
			
		КонецЕсли;
		
		Если ЭлементДата <> Неопределено Тогда
			
			ЭлементДата.ТолькоПросмотр = РедактированиеЗапрещено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает только просмотр для формы в зависимости от прав пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ОткрытьФормуТолькоДляПросмотра(Форма, Объект) Экспорт
	
	ОткрытьФормуТолькоДляПросмотра = Ложь;
	
	РазрешеноРедактированиеПроведенныхДокументов = ПраваИНастройкиПользователя.Значение("РедактированиеПроведенныхДокументов", Объект);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Проведен")
		И Объект.Проведен
		И (НЕ РазрешеноРедактированиеПроведенныхДокументов) Тогда 
		
		Если НЕ (ТипЗнч(Объект) = Тип("ДокументОбъект.РабочийЛист") 
			И НЕ (Объект.Ссылка.Статус = ПредопределенноеЗначение("Справочники.СтатусыРабочегоЛиста.Отказ")
			ИЛИ Объект.Ссылка.Статус = ПредопределенноеЗначение("Справочники.СтатусыРабочегоЛиста.Сделка"))) Тогда
				
				ОткрытьФормуТолькоДляПросмотра = Истина;
				
		КонецЕсли;
			
	КонецЕсли;
	
	Форма.ТолькоПросмотр = ОткрытьФормуТолькоДляПросмотра;
	
КонецПроцедуры

#Область КодАртикулИПроизводительВТабличныхЧастях

// Настройка отображения колонок артикул и производитель
// 
// Параметры:
//  Элементы - Структура - с полями:
//		* Артикул - ПолеФормы
//		* Код - ПолеФормы
//		* Производитель - ПолеФормы
//
Процедура НастроитьВидимостьКолонокКодАртикулИПроизводитель(Элементы) Экспорт
	
	РежимыВыводаКодаВДокументах = ПолучитьФункциональнуюОпцию("ИспользоватьАртикул");
	
	Если Элементы.Свойство("Артикул") И Элементы.Артикул <> Неопределено Тогда 
		Элементы.Артикул.Видимость = РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.Артикул
			Или РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул
			Или РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.АртикулИПроизводитель
			Или РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель;
	КонецЕсли;
	
	Если Элементы.Свойство("Код") И Элементы.Код <> Неопределено Тогда 
		Элементы.Код.Видимость = РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.Код
			Или РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул
			Или РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.КодИПроизводитель
			Или РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель;
	КонецЕсли;
		
	Если Элементы.Свойство("Производитель") И Элементы.Производитель <> Неопределено Тогда 
		Элементы.Производитель.Видимость =
			РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.АртикулИПроизводитель
			Или РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.КодИПроизводитель
			Или РежимыВыводаКодаВДокументах = Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель;
	КонецЕсли;
		
КонецПроцедуры

// Описание новой колонки производитель.
// 
// Возвращаемое значение:
//  Структура - Описание новой колонки производитель:
//  *Имя - Строка - имя колонки;
//  *ТабличнаяЧасть - Неопределено, ТаблицаЗначений, ТабличнаяЧасть - таблица для новой колонки; 
//  *ПутьКДанным - Строка - путь к данным реквизита;
//  *ПоставитьПеред - Неопределено, ПолеФормы - поле перед, которым нужно поставить новую колонку.
// 
Функция ОписаниеНовойКолонкиПроизводитель() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Имя", "ТоварыПроизводитель");
	Результат.Вставить("ТабличнаяЧасть", Неопределено);
	Результат.Вставить("ПутьКДанным", "Объект.Товары.Номенклатура.Производитель");
	Результат.Вставить("ПоставитьПеред", Неопределено);
	Возврат Результат;
	
КонецФункции

// Создаем новую колонку производителя.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения;
//  ОписаниеНовойКолонки - см. ОписаниеНовойКолонкиПроизводитель;
// 
// Возвращаемое значение:
// 	ПолеФормы
//  
Функция НоваяКолонкаПроизводитель(Форма, ОписаниеНовойКолонки) Экспорт
	
	Результат = Форма.Элементы.Добавить(
		ОписаниеНовойКолонки.Имя,
		Тип("ПолеФормы"),
		ОписаниеНовойКолонки.ТабличнаяЧасть
	);
	Результат.Вид         = ВидПоляФормы.ПолеВвода;
	Результат.ПутьКДанным = ОписаниеНовойКолонки.ПутьКДанным;
	Форма.Элементы.Переместить(
		Результат,
		ОписаниеНовойКолонки.ПоставитьПеред.Родитель,
		ОписаниеНовойКолонки.ПоставитьПеред
	);
	Форма.Элементы.Переместить(
		ОписаниеНовойКолонки.ПоставитьПеред,
		ОписаниеНовойКолонки.ПоставитьПеред.Родитель,
		Результат
	);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КоличественныеРеквизитыВДокументах

// Настройка отобрадения колонок количества
// 
// Параметры:
//  КолонкаКоличество - ПолеФормы
//
Процедура НастроитьОтображениеСИспользованиемБазовогоКоличества(КолонкаКоличество) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБазовоеКоличество") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КолонкаКоличество.Заголовок = НСтр("ru = 'Мест'");
	
КонецПроцедуры

// Заполнение индикатора остатков товаров
// 
// Параметры:
//  ОбъектДокумент - ДокументОбъект, ДанныеФормыСтруктура -
//  ОстатокНаСкладе - ПолеФормы - поле индикатора
//  ЭтоОрдерныйСклад - Булево
//
Процедура ОтобразитьОстаткиТоваровНаСкладе(ОбъектДокумент, ОстатокНаСкладе, ЭтоОрдерныйСклад = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюОстатковТовара") Тогда
		
		ОстатокНаСкладе.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ОстатокНаСкладе.Видимость = Истина;
	
	Если ЭтоОрдерныйСклад Тогда
		
		ЗащищенныеФункцииСервер.ЗаполнитьРеквизитОстаткомПоОрдерномуСкладу(
			ОбъектДокумент,
			"ОстатокНаОрдерномСкладе",
			Неопределено,
			"Товары"
		);
		
	Иначе
		
		ЗащищенныеФункцииСервер.ЗаполнитьРеквизитОстаткомПоСкладу(
			ОбъектДокумент,
			"ОстатокНаСкладе",
			Неопределено,
			"Товары"
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СуммовыеРеквизитыВДокументах

// Формируем список полей формы типовых суммовых полей.
// К таким полям относятся Цена, ЦенаРозничная, Сумма, СуммаВсего, СуммаРозничная, СтавкаНДС, СуммаНДС.
// Имя поля формируется их имени табличной части и имени реквизита.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяТабличнойЧасти - Строка - Имя табличной части.
// 
// Возвращаемое значение:
//  Структура - Типовые поля суммовых реквизитов
//
Функция ТиповыеПоляСуммовыхРеквизитов(Форма, ИмяТабличнойЧасти = "Товары") Экспорт
	
	РеквизитыЦен = СтрРазделить("Цена,ЦенаРозничная,Сумма,СуммаВсего,СуммаРозничная,СтавкаНДС,СуммаНДС", ",");
	Результат = Новый Структура();
	
	Для Каждого Реквизит Из РеквизитыЦен Цикл
		
		НайденныйЭлемент = Форма.Элементы.Найти(ИмяТабличнойЧасти + Реквизит);
		
		Если НайденныйЭлемент <> Неопределено Тогда
			
			Результат.Вставить(Реквизит, НайденныйЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливаем блокировку редактирования суммовых реквизитов.
// 
// Параметры:
//  Колонки - см. РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов
//  РазрешитьРедактирование - Булево - признак разрещения редактирования.
//
Процедура РазрешитьРедактированиеЦенИСумм(Колонки, РазрешитьРедактирование) Экспорт
	
	Для Каждого Колонка Из Колонки Цикл
		
		Колонка.Значение.ТолькоПросмотр = Не РазрешитьРедактирование;
		
	КонецЦикла;
	
КонецПроцедуры

// Формируем список полей формы типовых скидочных полей.
// К таким полям относятся ПроцентСкидки, СуммаСкидки, ПроцентСкидкиСтроки, СуммаСкидкиСтроки.
// Имя поля формируется их имени табличной части и имени реквизита.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяТабличнойЧасти - Строка - Имя табличной части.
// 
// Возвращаемое значение:
//  Структура - Типовые поля скидочных реквизитов
//
Функция ТиповыеПоляСкидочныхРеквизитов(Форма, ИмяТабличнойЧасти = "Товары") Экспорт
	
	Результат = Новый Структура();
	РеквизитыСкидок = СтрРазделить("ПроцентСкидки,СуммаСкидки,ПроцентСкидкиСтроки,СуммаСкидкиСтроки", ",");
	
	Для Каждого Реквизит Из РеквизитыСкидок Цикл
		
		НайденныйЭлемент = Форма.Элементы.Найти(ИмяТабличнойЧасти + Реквизит);
		
		Если НайденныйЭлемент <> Неопределено Тогда
			
			Результат.Вставить(Реквизит, НайденныйЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйЭлемент = Форма.Элементы.Найти(ИмяТабличнойЧасти + "СкидкаНаТовар");
	
	Если НайденныйЭлемент <> Неопределено Тогда
		
		Результат.Вставить("СкидкаНаТовар", НайденныйЭлемент);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливаем блокировку редактирования скидочных реквизитов.
// 
// Параметры:
//  Колонки - см. РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов; 
//  РазрешитьРедактирование - Булево - признак разрещения редактирования;
//  СпособВыбора - ПеречислениеСсылка.СкидкиСпособыВыбора.
//
Процедура РазрешитьРедактированиеСкидок(Колонки, РазрешитьРедактирование, СпособВыбора) Экспорт
	
	Если СпособВыбора = Перечисления.СкидкиСпособыВыбора.СкидкиЗапрещены Тогда
		
		Для Каждого Колонка Из Колонки Цикл
			
			Колонка.Значение.Видимость = Ложь;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Колонка Из Колонки Цикл
		
		Колонка.Значение.Видимость = Истина;
		Колонка.Значение.ТолькоПросмотр = РазрешитьРедактирование
			Или СпособВыбора <> Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
		
	КонецЦикла;
	
	Если Колонки.Свойство("СкидкаНаТовар") И Колонки.СкидкаНаТовар <> Неопределено Тогда
		
		РазрешитьРедактированиеПоляСкидкаНаТовар(Колонки.СкидкаНаТовар, СпособВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливаем блокировку редактирования скидочных реквизитов.
// 
// Параметры:
//  Поле - ПолеФормы
//  СпособВыбора - ПеречислениеСсылка.СкидкиСпособыВыбора.
//
Процедура РазрешитьРедактированиеПоляСкидкаНаТовар(Поле, СпособВыбора) Экспорт
	
	Поле.ТолькоПросмотр = СпособВыбора = Перечисления.СкидкиСпособыВыбора.АвтоматическиеСкидки;
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
		Поле.ПараметрыВыбора,
		"Отбор.РучнаяСкидка",
		Истина
	);
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
		Поле.ПараметрыВыбора, 
		"Отбор.ВидСкидки",
		Перечисления.ВидыСкидок.НаСтрокуДокумента
	);
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита "СуммаСписания" табличной части "товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Заполняемый объект.
//  ИмяРегистра - Строка - Имя регистра.
//
Процедура ЗаполнитьСлужебныйРеквизитСуммаСписания(Объект, ИмяРегистра) Экспорт

	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныйРеквизитСуммаСписания(Объект, ИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Справочник

// Проверяет был ли передан отбор по владельцу. Если тип отбора не верный выбрасывает исключение.
// 
// Параметры:
//  Параметры - Структура - параметры открытия формы.
// 
// Возвращаемое значение:
//  Булево - Истина, если передан корректный отбор по владельцу. Ложь в остальных случаях.
//
Функция МожноУстановитьОтборПоВладельцу(Параметры) Экспорт
	
	Если
		Не Параметры.Свойство("Отбор")
		Или Не Параметры.Отбор.Свойство("Владелец")
		Или Не ЗначениеЗаполнено(Параметры.Отбор.Владелец)
	Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если
		ТипЗнч(Параметры.Отбор.Владелец) = Тип("ФиксированныйМассив")
		Или ТипЗнч(Параметры.Отбор.Владелец) = Тип("Массив")
	Тогда
		
		Владелецы = Параметры.Отбор.Владелец;
		
	Иначе
		
		Владелецы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Отбор.Владелец);
		
	КонецЕсли;
	
	Для Каждого Владелец Из Владелецы Цикл
				
		Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(Владелец) Тогда
					
			ВызватьИсключение НСтр("ru='Использование для группы в качестве владельца запрещено.'");
					
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает отбор по владельцу на дерево иерархии справочника.
// 
// Параметры:
//  Дерево - ДинамическийСписок - список описывающий дерево;
//  Отбор - Структура - отбор открываемой формы. 
//
Процедура УстановитьОтборПоВладельцуНаДерево(Дерево, Отбор) Экспорт
	
	ЭлементОтбора = Дерево
		.КомпоновщикНастроек
		.ФиксированныеНастройки
		.Отбор
		.Элементы
		.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Отбор.Владелец;
	
КонецПроцедуры

// Заблокировать редактирование предопределенного элемента.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура ЗаблокироватьРедактированиеПредопределенногоЭлемента(Форма) Экспорт
	
	Если Форма.Объект.Ссылка.Предопределенный И Не Форма.ТолькоПросмотр Тогда
		
		Форма.ТолькоПросмотр = Не ПраваИНастройкиПользователя.Значение("РазрешитьРедактированиеПредопределенныхЭлементов");
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура устанавливает блокировку редактирования Кода элемента справочника.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура УстановитьДоступностьПоляКодНаФормеСправочника(Форма, Объект) Экспорт
	
	ЭлементКод = Форма.Элементы.Найти("Код");
	ЭтоОбъектСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка));
	
	Если ЭлементКод <> Неопределено И ЭтоОбъектСправочник Тогда
		
		ПравоРедактированияКодов = ПравоПользователя("РазрешитьРедактированиеКодовСправочников", Объект);
		ЭлементКод.ТолькоПросмотр = ПравоРедактированияКодов = Перечисления.ВариантыОтветов.Нет;
		
		Если ПравоРедактированияКодов = Перечисления.ВариантыОтветов.Да Тогда
			
			ЭлементКод.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
			
		ИначеЕсли ПравоРедактированияКодов = Перечисления.ВариантыОтветов.Спрашивать Тогда
			
			ЭлементКод.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента 
// в значение в зависимости от прав доступа на объект.  
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для которой проводится операция
//  ЭлементыФормы - Строка - Перечисленные элементы формы через запятую.
//  ИмяСвойства - Строка - ИмяСвойства.
//  Право - Строка - Право.
//  МетаданныеОбъекта - МетаданныеОбъекта - устанавливается в случае если необходимо 
//                                      получить право доступа к объекту метаданных отличного от формы объекта
//
Процедура УстановитьСвойствоЭлементовФормы(Форма, ЭлементыФормы, ИмяСвойства, Право, МетаданныеОбъекта = Неопределено) Экспорт
	
	ЭлементыФормы = СтрРазделить(ЭлементыФормы, ",");
	Если МетаданныеОбъекта = Неопределено Тогда
		ПолноеИмяОбъекта = ПолучитьПолноеИмяИзФормы(Форма);
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	КонецЕсли;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПравоДоступа = ПравоДоступа(Право, МетаданныеОбъекта);
	
	Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		СокрЛП(ЭлементФормы),
		ИмяСвойства,
		ЕстьПравоДоступа
		);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьСвойствоЭлементовФормы() 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПолноеИмяИзФормы(Форма)
	
	ИмяФормы = Форма.ИмяФормы;
	Позиция = СтрНайти(ИмяФормы, "Форма") - 2;
	Возврат Лев(ИмяФормы, Позиция); 
	
КонецФункции

Функция ПолучитьИмяЗаголовкаПользовательскогоОтбора(ДоступныеПоляОтборов, ЛевоеЗначение)

	НаименованиеОтбора = Строка(ЛевоеЗначение);
	ЧастиПутиОтбора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НаименованиеОтбора, ".");
	
	Если ЧастиПутиОтбора.Количество() = 1 Тогда
	
		ДоступныйОтбор = ДоступныеПоляОтборов.Найти(ЛевоеЗначение);
		Если ДоступныйОтбор = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат ДоступныйОтбор.Заголовок;
	
	КонецЕсли;
	
	ПользовательскиеОтборы = ДоступныеПоляОтборов;
	
	Путь = "";
	
	Для Каждого ЧастьПути Из ЧастиПутиОтбора Цикл
	
		Если ПустаяСтрока(Путь) Тогда
		
			Путь = ЧастьПути;
			
		Иначе
			
			Путь = Путь + "." + ЧастьПути;
		
		КонецЕсли;
		
		ПользовательскиеОтборы = ПользовательскиеОтборы.Найти(Путь);
		Если ПользовательскиеОтборы = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Заголовок = ПользовательскиеОтборы.Заголовок;
		ПользовательскиеОтборы = ПользовательскиеОтборы.Элементы;
	
	КонецЦикла;
	
	Возврат Заголовок;
	
КонецФункции

#КонецОбласти

