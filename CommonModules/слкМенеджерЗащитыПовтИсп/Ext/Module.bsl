////////////////////////////////////////////////////////////////////////////////
// Менеджер защиты: Система лицензирования отраслевых и специализированных решений. 
// Область выполнения: Сервер (повторное использование)
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает менеджер серии защиты. Структура, содержащая МенеджерОбъектов СЛК и 
// описывающая  параметры подключения серии защиты.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК
//
// Возвращаемое значение:
//   Структурв   - Менеджер серии защиты
//
Функция МенеджерОбъектовСерииЗащиты(Знач Серия)	Экспорт
	
	Возврат слкМенеджерЗащитыСервер.ПолучитьМенеджерОбъектовСерииЗащиты(Серия);

КонецФункции // МенеджерОбъектовСерииЗащиты()

// Возвращает менеджер защиты. Соответствие, описывающее инициализированные сеансом
// серии защиты. Каждой серии защиты соответствует элемент соответствия.
//
// Параметры:
//  Активные - Булево - только доступные по установленным пользователю сеанса ролям
//                 
// Возвращаемое значение:
//   Соответствие   - Менеджер защиты
//
Функция ПолучитьМенеджерЗащиты(Знач Активные = Ложь)	Экспорт
	
	Возврат слкМенеджерЗащитыСервер.ПолучитьМенеджерЗащиты(Активные);

КонецФункции // ПолучитьМенеджерЗащиты()

// Возвращает менеджер серии защиты. Структура, содержащая МенеджерОбъектов СЛК и 
// описывающая  параметры подключения серии защиты.
//
// Параметры:
//	Серия - Строка - Уникальная серия ключей защиты СЛК
//  ОписаниеОшибки  - Строка - Информация об ошибке полученная вызовом функции 
//						СЛК ПолучитьОписаниеОшибки (описание последней ошибки)
// Возвращаемое значение:
//   Структурв   - Менеджер серии защиты
//
Функция ПолучитьМенеджерСерииЗащиты(Знач Серия)	Экспорт
	
	Возврат слкМенеджерЗащитыСервер.ПолучитьМенеджерСерииЗащиты(Серия);

КонецФункции // ПолучитьМенеджерСерииЗащиты()

// Преобразует список ключей защиты, полученный функцией
// ПолучитьСписокКлючей() компоненты защиты СЛК в таблицу значений
//
// Параметры:
//  СписокКлючей  - Строка - список регистрационных номеров ключей  используемой серии 
//					установленных на сервере СЛК. 
//					Где:
// 					СН – серийный номер ключа
//					Тип – тип ключа (3 – основной, 4 – дополнительный)
//					Лицензии – количество лицензий
//					ТипУстройства – 0 – аппаратный, 1 – программный
//					РегНомер – регистрационный номер, связанный с С/Н (0, если не связан)
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица ключей защиты, состав колонок соответствует
//							формату строки СписокКлючей
//
Функция ТаблицаИзСпискаКлючейЗащиты(Знач СписокКлючей)	Экспорт
	
	// Описание таблицы
	ТаблицаКлючей = Новый ТаблицаЗначений();
	ТаблицаКлючей.Колонки.Добавить("СН", Новый  ОписаниеТипов("Число"));
	ТаблицаКлючей.Колонки.Добавить("Тип", Новый  ОписаниеТипов("Число"));
	ТаблицаКлючей.Колонки.Добавить("ТипКлюча", Новый  ОписаниеТипов("Число"));
	ТаблицаКлючей.Колонки.Добавить("Лицензии", Новый  ОписаниеТипов("Число"));
	ТаблицаКлючей.Колонки.Добавить("ТипУстройства", Новый  ОписаниеТипов("Число"));
	ТаблицаКлючей.Колонки.Добавить("РегНомер", Новый  ОписаниеТипов("Число"));
	ТаблицаКлючей.Колонки.Добавить("ТипПредставление", Новый  ОписаниеТипов("Строка"));
	ТаблицаКлючей.Колонки.Добавить("ТипУстройстваПредставление", Новый  ОписаниеТипов("Строка"));
	
	Если НЕ ЗначениеЗаполнено(СписокКлючей) Тогда
		Возврат ТаблицаКлючей; 
	КонецЕсли;
	
	// Описание разделителей
	РазделительСтрокиКлюч = ";";
	РазделительСтрокиПоле = ",";

	// Описание представлений
	ТипыКлючей = Новый Соответствие;
	ТипыКлючей.Вставить(3, "основной");
	ТипыКлючей.Вставить(4, "дополнительный");
	
	ТипыУстройства = Новый Соответствие;
	ТипыУстройства.Вставить(0, "аппаратный");
	ТипыУстройства.Вставить(1, "программный");
	
	// Массив ключей
	МассивОписанийКлючей = СтрРазделить(СписокКлючей, РазделительСтрокиКлюч);
	
	Для каждого КлючЗащиты Из МассивОписанийКлючей Цикл
		ОписаниеКлюча = СтрРазделить(КлючЗащиты, РазделительСтрокиПоле);
		
		СтрокаКлюча = ТаблицаКлючей.Добавить();
		СтрокаКлюча.СН = ОписаниеКлюча[0];
		СтрокаКлюча.Тип = ОписаниеКлюча[1];
		СтрокаКлюча.Лицензии = ОписаниеКлюча[2];
		СтрокаКлюча.ТипУстройства = ОписаниеКлюча[3];
		СтрокаКлюча.РегНомер = ОписаниеКлюча[4];

		СтрокаКлюча.ТипПредставление = ТипыКлючей[СтрокаКлюча.Тип];
		СтрокаКлюча.ТипУстройстваПредставление = ТипыУстройства[СтрокаКлюча.ТипУстройства];
	
	КонецЦикла;
	
	ТаблицаКлючей.Индексы.Добавить("Тип");
	
	Возврат ТаблицаКлючей;

КонецФункции // ТаблицаИзСпискаКлючейЗащиты()

#Область СлужебныеПроцедурыИФункции

Функция ЭтоКлиентСервернаяБаза()	Экспорт

	Возврат Не Найти(ВРег(СтрокаСоединенияИнформационнойБазы()), "FILE=");

КонецФункции // ЭтоКлиентСервернаяБаза()

#КонецОбласти

#КонецОбласти
