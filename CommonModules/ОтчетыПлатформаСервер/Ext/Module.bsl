//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ //////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С КОМПОНОВЩИКОМ ДАННЫХ //////////////////////////////////////

// Получить поле компоновки компоновщика.
//
// Параметры:
//  ПолеКомпоновки - Строка, ПолеКомпоновкиДанных - Поле компоновки данных.
// 
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - Поле компоновки данных.
//
Функция КомпоновщикПолучитьПолеКомпоновки(ПолеКомпоновки) Экспорт
	
	Результат = Неопределено;
	Если ТипЗнч(ПолеКомпоновки) = Тип("Строка") Тогда
		Результат = Новый ПолеКомпоновкиДанных(ПолеКомпоновки);
	ИначеЕсли ТипЗнч(ПолеКомпоновки) = Тип("ПолеКомпоновкиДанных") Тогда
		Результат = ПолеКомпоновки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Есть поле в структуре компоновщика.
//
// Параметры:
//  ПолеПоиска      - ПолеКомпоновкиДанных - Поле поиска.
//  СтруктураОтчета - Структура            - Структура отбора.
// 
// Возвращаемое значение:
//  Булево - Признак наличия поля в структуре.
//
Функция КомпоновщикЕстьПолеВСтруктуре(Знач ПолеПоиска, СтруктураОтчета) Экспорт
	
	ПолеПоиска = КомпоновщикПолучитьПолеКомпоновки(ПолеПоиска);
	
	Результат = Ложь;
	ТипСтруктурыТаблицы   = Тип("ТаблицаКомпоновкиДанных");
	ТипСтруктурыДиаграммы = Тип("ДиаграммаКомпоновкиДанных");
	Для Каждого ТекЭлемент Из СтруктураОтчета Цикл
		Если Не ТекЭлемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		ТипЭлемента = ТипЗнч(ТекЭлемент);
		Если ТипЭлемента = ТипСтруктурыТаблицы Тогда
			Для Каждого Строка Из ТекЭлемент.Строки Цикл
				Если Не Строка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Если ПоискВГруппировке(ПолеПоиска, Строка) ИЛИ КомпоновщикЕстьПолеВСтруктуре(ПолеПоиска, Строка.Структура) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Колонка Из ТекЭлемент.Колонки Цикл
				Если Не Колонка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Если ПоискВГруппировке(ПолеПоиска, Колонка) ИЛИ КомпоновщикЕстьПолеВСтруктуре(ПолеПоиска, Колонка.Структура) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЭлемента = ТипСтруктурыДиаграммы Тогда
			Для Каждого Серия Из ТекЭлемент.Серии Цикл
				Если Не Серия.Использование Тогда
					Продолжить;
				КонецЕсли;
				Если ПоискВГруппировке(ПолеПоиска, Серия) ИЛИ КомпоновщикЕстьПолеВСтруктуре(ПолеПоиска, Серия.Структура) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Точка Из ТекЭлемент.Точки Цикл
				Если Не Точка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Если ПоискВГруппировке(ПолеПоиска, Точка) ИЛИ КомпоновщикЕстьПолеВСтруктуре(ПолеПоиска, Точка.Структура) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ПоискВГруппировке(ПолеПоиска, ТекЭлемент) ИЛИ КомпоновщикЕстьПолеВСтруктуре(ПолеПоиска, ТекЭлемент.Структура) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // КомпоновщикЕстьПолеВСтруктуре()

// Получение счетчика условий поля.
//
// Параметры:
//  ПолеПоиска			 - ПолеКомпоновкиДанных	 - Поле поиска.
//  ОтборКомпоновщика	 - ОтборКомпоновкиДанных - Отбор компоновки данных.
//  ТипГруппы			 - Тип					 - Тип группы.
// 
// Возвращаемое значение:
//  Число - Итоговое значение условий поля.
//
Функция КомпоновщикСчетчикУсловийПоля(ПолеПоиска, ОтборКомпоновщика, ТипГруппы = Неопределено) Экспорт
	
	Счетчик = 0;
	Для Каждого ТекОтбор Из ОтборКомпоновщика.Элементы Цикл
		Если Не ТекОтбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ТекОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Счетчик = Счетчик + КомпоновщикСчетчикУсловийПоля(ПолеПоиска, ТекОтбор, ТекОтбор.ТипГруппы);
		ИначеЕсли ТекОтбор.ЛевоеЗначение = ПолеПоиска Тогда
			Если ТипГруппы = Неопределено И ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				Счетчик = Счетчик + 1;
			Иначе
				Счетчик = Счетчик + 2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Счетчик;
	
КонецФункции

// Получить значение параметра
//
// Параметры:
//  ПараметрКомпоновки	 - ПараметрКомпоновкиДанных	 - Параметр компоновки.
//  Настройки			 - НастройкиКомпоновкиДанных - Настройка компоновки.
// 
// Возвращаемое значение:
//  Произвольный - Значение параметра.
//
Функция КомпоновщикПолучитьЗначениеПараметра(Знач ПараметрКомпоновки, Настройки) Экспорт
	
	Результат = Неопределено;
	
	Если НЕ ТипЗнч(ПараметрКомпоновки) = Тип("ПараметрКомпоновкиДанных") Тогда
		ПараметрКомпоновки = Новый ПараметрКомпоновкиДанных(СокрЛП(ПараметрКомпоновки));
	КонецЕсли;
	
	ЗначениеПараметра = Настройки.ПараметрыДанных.Элементы.Найти(ПараметрКомпоновки);
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Результат;
	ИначеЕсли ТипЗнч(ЗначениеПараметра.Значение) = Тип("СтандартныйПериод") Тогда
		Результат = Новый Структура;
		Результат.Вставить("ДатаНачала",    ЗначениеПараметра.Значение.ДатаНачала);
		Результат.Вставить("ДатаОкончания", ЗначениеПараметра.Значение.ДатаОкончания);
	ИначеЕсли ТипЗнч(ЗначениеПараметра.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		Результат = ЗначениеПараметра.Значение.Дата;
	ИначеЕсли ТипЗнч(ЗначениеПараметра.Значение) = Тип("СписокЗначений") И ЗначениеПараметра.Значение.Количество()=1 Тогда
		Результат = ЗначениеПараметра.Значение[0].Значение;
	ИначеЕсли ТипЗнч(ЗначениеПараметра.Значение) = Тип("Граница") Тогда
		Результат = ЗначениеПараметра.Значение.Значение;
	Иначе
		Результат = ЗначениеПараметра.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Добавить поле в последнюю группировку
//
// Параметры:
//  ПолеДобавления	 - ПолеКомпоновкиДанных	 - Поле добавления.
//  СтруктураОтчета	 - Структура			 - Структура отчета.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия
//
Функция ДобавитьПолеВПоследнююГруппировку(ПолеДобавления, СтруктураОтчета) Экспорт
	
	Если СтруктураОтчета.Количество() = 0 Тогда
		
		НоваяГруппировка = СтруктураОтчета.Добавить();
		НоваяГруппировка.Использование = Истина;
		
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = ПолеДобавления;
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		
		НовоеПоле = НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		
		Возврат НоваяГруппировка;
		
	КонецЕсли;
	
	Результат = Неопределено;
	
	ТипСтруктурыТаблицы   = Тип("ТаблицаКомпоновкиДанных");
	ТипСтруктурыДиаграммы = Тип("ДиаграммаКомпоновкиДанных");
	Для Каждого ТекЭлемент Из СтруктураОтчета Цикл
		Если Не ТекЭлемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		ТипЭлемента = ТипЗнч(ТекЭлемент);
		Если ТипЭлемента = ТипСтруктурыТаблицы Тогда
			
			ПоследняяСтрока = Неопределено;
			Для Каждого Строка Из ТекЭлемент.Строки Цикл
				Если Не Строка.Использование Тогда
					Продолжить;
				КонецЕсли;
				ПоследняяСтрока = Строка;
			КонецЦикла;
			
			Если НЕ ПоследняяСтрока = Неопределено Тогда
				Результат = ДобавитьПолеВПоследнююГруппировку(ПолеДобавления, ПоследняяСтрока.Структура);
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = ТипСтруктурыДиаграммы Тогда
			ПоследняяСтрока = Неопределено;
			Для Каждого Строка Из ТекЭлемент.Серии Цикл
				Если Не Строка.Использование Тогда
					Продолжить;
				КонецЕсли;
				ПоследняяСтрока = Строка;
			КонецЦикла;
			
			Если НЕ ПоследняяСтрока = Неопределено Тогда
				Результат = ДобавитьПолеВПоследнююГруппировку(ПолеДобавления, ПоследняяСтрока.Структура);
			КонецЕсли;
		Иначе
			Результат = ДобавитьПолеВПоследнююГруппировку(ПолеДобавления, ТекЭлемент.Структура);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Установление отбора
//
// Параметры:
//  Настройки		 - НастройкиКомпоновкиДанных	 - Настройка компоновки.
//  ПолеКомпоновки	 - ПолеКомпоновкиДанных			 - Поле компоновки данных.
//  ЗначениеОтбора	 - Произвольный					 - Значение отбора элементов.
//  ВидСравнения	 - ВидСравненияКомпоновкиДанных	 - Вид сравнения.
// 
// Возвращаемое значение:
//  Структура - Сформированный отбор.
//
Функция КомпоновщикУстановитьОтбор(Настройки, Знач ПолеКомпоновки, ЗначениеОтбора = Неопределено, ВидСравнения = Неопределено) Экспорт
	
	НовыйОтбор     = Неопределено;
	ПолеКомпоновки = КомпоновщикПолучитьПолеКомпоновки(ПолеКомпоновки);
	Отборы         = Настройки.Отбор;
	НастройкиБезСхемы = Настройки.ДоступныеПоляВыбора.Элементы.Количество()=0;
	Если НастройкиБезСхемы ИЛИ (НЕ КомпоновщикПолучитьДоступноеПоле(ПолеКомпоновки, Настройки, Ложь, Ложь, Истина, Ложь) = Неопределено) Тогда
		Для Каждого ТекОтбор Из Отборы.Элементы Цикл
			Если ТекОтбор.ЛевоеЗначение = ПолеКомпоновки Тогда
				НовыйОтбор = ТекОтбор;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НовыйОтбор = Неопределено Тогда
			НовыйОтбор = Отборы.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = ПолеКомпоновки;
		КонецЕсли;
		
		НовыйОтбор.Использование  = Истина;
		Если ВидСравнения = Неопределено Тогда
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Иначе
			НовыйОтбор.ВидСравнения = ВидСравнения;
		КонецЕсли;
		
		Если НЕ ЗначениеОтбора = Неопределено Тогда
			НовыйОтбор.ПравоеЗначение = ЗначениеОтбора;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйОтбор;
	
КонецФункции

// Установить отбор пустых группировок.
//
// Параметры:
//  СтруктураОтчета	- Структура						- Структура отбора.
//  Поля			- ВыбранныеПоляКомпоновкиДанных	- Поля компоновки.
//
Процедура КомпоновщикУстановитьОтборПустыхГруппировок(СтруктураОтчета, Поля) Экспорт
	
	ТипСтруктурыТаблицы   = Тип("ТаблицаКомпоновкиДанных");
	ТипСтруктурыДиаграммы = Тип("ДиаграммаКомпоновкиДанных");
	Для Каждого ТекЭлемент Из СтруктураОтчета Цикл
		
		Если Не ТекЭлемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ТекЭлемент);
		Если ТипЭлемента = ТипСтруктурыТаблицы Тогда
			Для Каждого Строка Из ТекЭлемент.Строки Цикл
				Если Не Строка.Использование Тогда
					Продолжить;
				КонецЕсли;
				КомпоновщикУстановитьОтборПоПолямГруппировки(Строка, Поля);
				КомпоновщикУстановитьОтборПустыхГруппировок(Строка.Структура, Поля);
			КонецЦикла;
			Для Каждого Колонка Из ТекЭлемент.Колонки Цикл
				Если Не Колонка.Использование Тогда
					Продолжить;
				КонецЕсли;
				КомпоновщикУстановитьОтборПоПолямГруппировки(Колонка, Поля);
				КомпоновщикУстановитьОтборПустыхГруппировок(Колонка.Структура, Поля);
			КонецЦикла;
		ИначеЕсли ТипЭлемента = ТипСтруктурыДиаграммы Тогда
			Для Каждого Серия Из ТекЭлемент.Серии Цикл
				Если Не Серия.Использование Тогда
					Продолжить;
				КонецЕсли;
				КомпоновщикУстановитьОтборПоПолямГруппировки(Серия, Поля);
				КомпоновщикУстановитьОтборПустыхГруппировок(Серия.Структура, Поля);
			КонецЦикла;
			Для Каждого Точка Из ТекЭлемент.Точки Цикл
				Если Не Точка.Использование Тогда
					Продолжить;
				КонецЕсли;
				КомпоновщикУстановитьОтборПоПолямГруппировки(Точка, Поля);
				КомпоновщикУстановитьОтборПустыхГруппировок(Точка.Структура, Поля);
			КонецЦикла;
		Иначе
			КомпоновщикУстановитьОтборПоПолямГруппировки(ТекЭлемент, Поля);
			КомпоновщикУстановитьОтборПустыхГруппировок(ТекЭлемент.Структура, Поля);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавить группировку.
//
// Параметры:
//  СтруктураОтчета	- Структура				- Структура отбора.
//  Поле			- ПолеКомпоновкиДанных	- Поле добавления.
// 
// Возвращаемое значение:
//  Структура - Новая группировка.
//
Функция СКД_ДобавитьГруппировку(СтруктураОтчета, Поле) Экспорт
	
	ПолеКомпоновки = КомпоновщикПолучитьПолеКомпоновки(Поле);
	
	НоваяГруппировка = СтруктураОтчета.Добавить();
	НоваяГруппировка.Использование = Истина;
	
	Группировка = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Группировка.Использование  = Истина;
	Группировка.Поле           = ПолеКомпоновки;
	Группировка.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	
	НовоеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;
	
	НовоеПоле = НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;
	
	Возврат НоваяГруппировка;
	
КонецФункции

// Функция - Компоновщик найти отбор
//
// Параметры:
//  ПолеПоиска	 - ПолеКомпоновкиДанных	 - Поле поиска.
//  Отборы		 - ОтборКомпоновкиДанных - Отбор компоновки данных.
//  ВИерархии	 - Булево				 - В иерархии поиск.
//  ПоискВГруппе - Булево				 - Поиск по группам.
// 
// Возвращаемое значение:
//  ОтборКомпоновкиДанных - Найденный отбор.
//
Функция КомпоновщикНайтиОтбор(Знач ПолеПоиска, Отборы, ВИерархии = Ложь, ПоискВГруппе = Ложь) Экспорт
	
	Если НЕ ПоискВГруппе Тогда
		ПолеПоиска = КомпоновщикПолучитьПолеКомпоновки(ПолеПоиска);
	КонецЕсли;
	
	РезультатПоиска = Неопределено;
	Для Каждого ТекОтбор Из Отборы.Элементы Цикл
		
		Если ТипЗнч(ТекОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") И ТекОтбор.ЛевоеЗначение = ПолеПоиска Тогда
			РезультатПоиска = ТекОтбор;
		ИначеЕсли ВИерархии И ТипЗнч(ТекОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			РезультатПоиска = КомпоновщикНайтиОтбор(ПолеПоиска, ТекОтбор, Истина, Истина);
		КонецЕсли;
		
		Если НЕ РезультатПоиска = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////// ПОЛУЧЕНИЕ ТЕКСТА ЗАПРОСА ИЗ НАСТРОЕК КОМПОНОВКИ /////////////////////////////////////////

// Функция возвращает текст отбора
// Параметры:
//  ЭлементыОтбора      - КоллекцияЭлементовОтбораКомпоновкиДанных - Список отборов настройки компоновщика данных
//  ДоступныеПоляОтбора - ДоступныеПоляКомпоновкиДанных - Список доступных полей для отбора
//  ИмяТаблицыЗапроса   - Строка - Имя таблицы в запросе, для которой нужно получить отбор
//  Параметры           - Структура - Содержит значения параметров отбора
//  СоответствиеЗамен   - Соответствие - Содержит текст замены реального выражения в запросе 
//			для определенного поля компоновщика. Например: замена для поля Организация будет Склад.Организация.
//			ключем соответствия будет или поле компоновки или имя поле в виде строки.
//  ПоляОграничения - Массив, Строка, ПолеКомпоновкиДанных - Список полей, для которых 
//			нужно получить отбор, все остальные поля в текст запроса не попадут.
//  ПоляИсключения  - Массив, Строка, ПолеКомпоновкиДанных - Список полей, которые 
//			нужно исключить из текст отбора.
//  Союз - Строка   - Соединение И/ИЛИ
//  Уровень - Число - Глубина вложенности.
//
// Возвращаемое значение:
//  Строка - Текст отбора.
//
Функция КомпоновщикПолучитьТекстОтбора(
	ЭлементыОтбора,
	ДоступныеПоляОтбора,
	ИмяТаблицыЗапроса,
	Параметры,
	СоответствиеЗамен = Неопределено,
	ПоляОграничения = Неопределено,
	ПоляИсключения = Неопределено,
	Союз = Неопределено,
	Уровень = 0) Экспорт
	
	Если Союз = Неопределено Тогда
		Союз = " И ";
	КонецЕсли;
	
	УдалитьТаблицу = Ложь;
	Если Уровень = 0 Тогда
		
		Замены = Новый Соответствие;
		Если ТипЗнч(СоответствиеЗамен) = Тип("Соответствие") Тогда
			Для Каждого ТекПоле Из СоответствиеЗамен Цикл
				НовыйКлюч = СокрЛП(ТекПоле.Ключ);
				Замены.Вставить(НовыйКлюч, ТекПоле.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Ограничения = Новый Массив;
		Если ТипЗнч(ПоляОграничения) = Тип("Массив") Тогда
			Для Каждого ТекПоле Из ПоляОграничения Цикл
				Ограничения.Добавить(СокрЛП(ТекПоле));
			КонецЦикла;
		ИначеЕсли НЕ ПоляОграничения = Неопределено Тогда
			Ограничения.Добавить(СокрЛП(ПоляОграничения));
		КонецЕсли;
		
		Исключения = Новый Массив;
		Если ТипЗнч(ПоляИсключения) = Тип("Массив") Тогда
			Для Каждого ТекПоле Из ПоляИсключения Цикл
				Исключения.Добавить(СокрЛП(ТекПоле));
			КонецЦикла;
		ИначеЕсли НЕ ПоляИсключения = Неопределено Тогда
			Исключения.Добавить(СокрЛП(ПоляИсключения));
		КонецЕсли;
		
		Если ИмяТаблицыЗапроса = "" Тогда
			ИмяТаблицыЗапроса = "ТаблицаУдаления";
			УдалитьТаблицу    = Истина;
		КонецЕсли;
		
	Иначе
		Замены      = СоответствиеЗамен;
		Ограничения = ПоляОграничения;
		Исключения  = ПоляИсключения;
	КонецЕсли;
	
	ЕстьОграничение = (Ограничения.Количество()>0);
	
	ТекстОтбора = "";
	Для Каждого ТекОтбор Из ЭлементыОтбора Цикл
		
		Если НЕ ТекОтбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ПредварительныйТекстОтбора = "";
			Если ТекОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				ПредварительныйТекстОтбора = "(" + КомпоновщикПолучитьТекстОтбора(ТекОтбор.Элементы, ДоступныеПоляОтбора, ИмяТаблицыЗапроса, Параметры, Замены, Ограничения, Исключения, " И ", Уровень + 1) + ")";
			ИначеЕсли ТекОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				ПредварительныйТекстОтбора = "(" + КомпоновщикПолучитьТекстОтбора(ТекОтбор.Элементы, ДоступныеПоляОтбора, ИмяТаблицыЗапроса, Параметры, Замены, Ограничения, Исключения, " ИЛИ ", Уровень + 1) + ")";
			ИначеЕсли ТекОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				ПредварительныйТекстОтбора = "НЕ (" + КомпоновщикПолучитьТекстОтбора(ТекОтбор.Элементы, ДоступныеПоляОтбора, ИмяТаблицыЗапроса, Параметры, Замены, Ограничения, Исключения, " ИЛИ ", Уровень + 1) + ")";
			КонецЕсли;
			
			Если СтрНайти(ПредварительныйТекстОтбора, ИмяТаблицыЗапроса+".")>0 Тогда
				Если НЕ ТекстОтбора = "" Тогда
					ТекстОтбора = ТекстОтбора + Союз + Символы.ПС;
				КонецЕсли;
				ТекстОтбора = ТекстОтбора + ПредварительныйТекстОтбора;
			КонецЕсли;
			
		Иначе
			
			ИмяОтбора = СокрЛП(ТекОтбор.ЛевоеЗначение);
			
			// Свойства пропускаем
			Если СтрНайти(ИмяОтбора, ".[Свойства")>0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Если отбор по реквизиту поля
			Позиция = СтрНайти(ИмяОтбора, ".");
			Если Позиция>0 Тогда
				ИмяОтбора = Лев(ИмяОтбора, Позиция-1);
			КонецЕсли;
			
			Если (ИмяОтбора = "") ИЛИ (ТипЗнч(ТекОтбор.ПравоеЗначение) = Тип("СписокЗначений") И ТекОтбор.ПравоеЗначение.Количество()=0) Тогда
				ТекОтбор.Использование = Ложь;
			ИначеЕсли ЕстьОграничение И ПоискПоляВСтруктуре(ИмяОтбора, Ограничения) = Неопределено Тогда
				Продолжить;
			ИначеЕсли НЕ ПоискПоляВСтруктуре(ИмяОтбора, Исключения) = Неопределено Тогда
				Продолжить;
			Иначе
				ВыражениеПоля = ПоискПоляВСтруктуре(ИмяОтбора, Замены);
				ВыражениеПоля = СокрЛП(?(ВыражениеПоля = Неопределено, ИмяОтбора, ВыражениеПоля));
				// Если отбор по реквизиту поля, то добавим его после выражения замены
				Если Позиция>0 Тогда
					ВыражениеПоля = ВыражениеПоля + Сред(ТекОтбор.ЛевоеЗначение, Позиция);
				КонецЕсли;
				Если НЕ ТекстОтбора = "" Тогда
					ТекстОтбора = ТекстОтбора + Союз + Символы.ПС;
				КонецЕсли;
				ПутьКДанным = ИмяТаблицыЗапроса + "." + ВыражениеПоля;
				ТекстОтбора = ТекстОтбора + КомпоновщикПолучитьТекстСравнения(ДоступныеПоляОтбора, ТекОтбор, Параметры, ПутьКДанным);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдалитьТаблицу Тогда
		ТекстОтбора = СтрЗаменить(ТекстОтбора, "ТаблицаУдаления.", "");
	КонецЕсли;
	
	Возврат ТекстОтбора;
	
КонецФункции

// Получение полей структуры компоновщика.
//
// Параметры:
//  СтруктураОтчета	 - Структура - Структура отчета.
//  УникальныеПоля	 - Структура - Список уникальных полей.
//
Процедура КомпоновщикПолучитьПоляСтруктуры(СтруктураОтчета, УникальныеПоля = Неопределено) Экспорт
	
	Если УникальныеПоля = Неопределено Тогда
		УникальныеПоля = Новый Структура;
	КонецЕсли;
	
	ТипСтруктурыТаблицы   = Тип("ТаблицаКомпоновкиДанных");
	ТипСтруктурыДиаграммы = Тип("ДиаграммаКомпоновкиДанных");
	Для Каждого ТекЭлемент Из СтруктураОтчета Цикл
		
		Если Не ТекЭлемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ТекЭлемент);
		Если ТипЭлемента = ТипСтруктурыТаблицы Тогда
			Для Каждого Строка Из ТекЭлемент.Строки Цикл
				Если Не Строка.Использование Тогда
					Продолжить;
				КонецЕсли;
				ПолучитьУникальныеПоляВГруппировке(Строка, УникальныеПоля);
				КомпоновщикПолучитьПоляСтруктуры(Строка.Структура, УникальныеПоля);
			КонецЦикла;
			Для Каждого Колонка Из ТекЭлемент.Колонки Цикл
				Если Не Колонка.Использование Тогда
					Продолжить;
				КонецЕсли;
				ПолучитьУникальныеПоляВГруппировке(Колонка, УникальныеПоля);
				КомпоновщикПолучитьПоляСтруктуры(Колонка.Структура, УникальныеПоля);
			КонецЦикла;
		ИначеЕсли ТипЭлемента = ТипСтруктурыДиаграммы Тогда
			Для Каждого Серия Из ТекЭлемент.Серии Цикл
				Если Не Серия.Использование Тогда
					Продолжить;
				КонецЕсли;
				ПолучитьУникальныеПоляВГруппировке(Серия, УникальныеПоля);
				КомпоновщикПолучитьПоляСтруктуры(Серия.Структура, УникальныеПоля);
			КонецЦикла;
			Для Каждого Точка Из ТекЭлемент.Точки Цикл
				Если Не Точка.Использование Тогда
					Продолжить;
				КонецЕсли;
				ПолучитьУникальныеПоляВГруппировке(Точка, УникальныеПоля);
				КомпоновщикПолучитьПоляСтруктуры(Точка.Структура, УникальныеПоля);
			КонецЦикла;
		Иначе
			ПолучитьУникальныеПоляВГруппировке(ТекЭлемент, УникальныеПоля);
			КомпоновщикПолучитьПоляСтруктуры(ТекЭлемент.Структура, УникальныеПоля);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КомпоновщикПолучитьПоляСтруктуры()


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////// СОБЫТИЯ ОТЧЕТА /////////////////////////////////////////

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Форма                   - УправляемаяФорма - Форма, в которой возникло событие.
//  Параметры               - Структура        - Параметры формы.
//  Отказ                   - Булево           - Признак отказа от создания формы.
//  СтандартнаяОбработка    - Булево           - В данный параметр передается признак выполнения системной обработки события.
//  ДополнительныеПараметры - Структура        - Дополнительные параметры.
//  ОтчетОбъект             - ОтчетОбъект      - Объект отчета.
// 
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события
//
Функция ПриСозданииНаСервере(Форма, Параметры, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено, ОтчетОбъект = Неопределено) Экспорт
	
	// Получим основной объект
	Если ОтчетОбъект = Неопределено Тогда
		ОтчетОбъект = Форма.Отчет;
	КонецЕсли;
	
	// Для автотеста запретим открытие
	Если Параметры.Свойство("АвтоТест") Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Проверка последовательностей
	ПроверитьКорректностьПоследовательностейОтчета(Форма, ОтчетОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Отказ;
	
КонецФункции

// Вывод отчета
//
// Параметры:
//  ОтчетОбъект                - ОтчетОбъект      - Объект отчета.
//  ДокументРезультат          - ТабличныйДокумент - Результат отчета.
//  ДанныеРасшифровки          - Произвольный - Расшифровка данных.
//  СтандартнаяОбработка       - Булево - Признак стандартной обработки.
//  ВнешниеНаборыДанных        - Структура - Ключ структуры соответствует имени внешнего набора данных. 
//  СхемаКомпоновкиДанных      - СхемаКомпоновкиДанных - Схема, для которой требуется построить макет.
//  Настройки                  - НастройкиКомпоновкиДанных - Настройки отчета.
//  ИспользоватьВнешниеФункции - Булево - Признак использования внешних функций.
//
Процедура ВывестиОтчет(
	ОтчетОбъект,
	ДокументРезультат,
	ДанныеРасшифровки,
	СтандартнаяОбработка,
	ВнешниеНаборыДанных = Неопределено,
	СхемаКомпоновкиДанных = Неопределено,
	Настройки = Неопределено,
	ИспользоватьВнешниеФункции = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		
		СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
		
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		
		Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
		
	КонецЕсли;
	
	Попытка
		ОтчетОбъект.ПередФормированиемМакетаКомпоновки(СхемаКомпоновкиДанных, Настройки);
	Исключение 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка компоновки данных - %1'"),
																		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 	
	КонецПопытки;
	
	// !!!_alalek Косяк платформы. невозможно установить формат заголовка.
	Макет = Неопределено;
	Если НЕ Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления") = Неопределено И НЕ БиблиотекаМакетовОформленияКомпоновкиДанных.Найти(Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления").Значение) = Неопределено Тогда
		Макет = БиблиотекаМакетовОформленияКомпоновкиДанных.Найти(Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления").Значение).ПолучитьМакет();
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки, Макет);
	
	Попытка
		ОтчетОбъект.ПослеФормированияМакетаКомпоновки(МакетКомпоновки);
	Исключение
	КонецПопытки;
	
	ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, ИспользоватьВнешниеФункции);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ВременныйТабличныйДокумент);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
	Если Ложь Тогда
		
		ДокументРезультат = Новый ТабличныйДокумент;
		
	КонецЕсли;
	
	// Объединим шапку отчета в группировку. По умолчанию группировка свернута.
	НастройкаВыводитьЗаголовок = Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок");
	ВыводитьЗаголовок = НастройкаВыводитьЗаголовок <> Неопределено
		И НастройкаВыводитьЗаголовок.Использование
		И НастройкаВыводитьЗаголовок.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		
	НастройкаВыводитьПараметрыДанных = Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьПараметрыДанных");
	ВыводитьПараметрыДанных = НастройкаВыводитьПараметрыДанных <> Неопределено
		И НастройкаВыводитьПараметрыДанных.Использование
		И НастройкаВыводитьПараметрыДанных.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		
	НастройкаВыводитьОтбор = Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
	ВыводитьОтбор = НастройкаВыводитьОтбор <> Неопределено
		И НастройкаВыводитьОтбор.Использование
		И НастройкаВыводитьОтбор.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	Если ВыводитьЗаголовок Или ВыводитьПараметрыДанных Или ВыводитьОтбор Тогда
		
		ОбластьОтступ = ВременныйТабличныйДокумент.ПолучитьОбласть("R1");
		ДокументРезультат.Вывести(ОбластьОтступ);
		
	КонецЕсли;
	
	ПерваяСтрока = 0;
	
	Если ВыводитьЗаголовок И (ВыводитьПараметрыДанных Или ВыводитьОтбор) Тогда
		
		ПерваяСтрока = 3;
		
	ИначеЕсли ВыводитьЗаголовок И Не ВыводитьПараметрыДанных И Не ВыводитьОтбор Тогда
		
		ПерваяСтрока = 1;
		
	ИначеЕсли Не ВыводитьЗаголовок И (ВыводитьПараметрыДанных Или ВыводитьОтбор) Тогда
		
		ПерваяСтрока = 1;
		
	КонецЕсли;
	
	Если ПерваяСтрока > 0 Тогда
		
		// Определим высоту шапки
		КонецШапки = Ложь;
		
		Пока Не КонецШапки Цикл
			
			ПерваяСтрока = ПерваяСтрока + 1;
			КонецШапки = ВременныйТабличныйДокумент.Область("R" + Формат(ПерваяСтрока,"ЧГ=0") + "C2").Текст = ""
				И ВременныйТабличныйДокумент.Область("R" + Формат(ПерваяСтрока,"ЧГ=0") + "C1").Текст = "";
			
		КонецЦикла;
		
		ПерваяСтрока = Формат(ПерваяСтрока,"ЧГ=0");
		
		ОбластьШапка = ВременныйТабличныйДокумент.ПолучитьОбласть("R2:R" + ПерваяСтрока);
		ДокументРезультат.НачатьГруппуСтрок(,Ложь);
		ДокументРезультат.Вывести(ОбластьШапка);
		ДокументРезультат.ЗакончитьГруппуСтрок();
		ВременныйТабличныйДокумент.УдалитьОбласть(ВременныйТабличныйДокумент.Область("R1:R" + ПерваяСтрока),
			ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
	
	// Выведем содержимое отчета
	ДокументРезультат.Вывести(ВременныйТабличныйДокумент);
	
	Если ДокументРезультат.ФиксацияСлева>0 Тогда
		ДокументРезультат.ФиксацияСлева = 1;
	КонецЕсли;
	
	// Передадим парамер, что отчет пустой или нет для внешних
	Если ВнешниеНаборыДанных <> Неопределено Тогда
		ПроверитьЗаполнениеОтчета(ОтчетОбъект, МакетКомпоновки, ВнешниеНаборыДанных);
	КонецЕсли;
	
КонецПроцедуры

// Получение первой строки структуры по полю.
//
// Параметры:
//  СтруктураОтчета - Структура - Структура отчета.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция КомпоновщикПолучитьПервуюСтрокуСтруктурыПоПолю(СтруктураОтчета) Экспорт
	
	Результат = Неопределено;
	ТипСтруктурыТаблицы   = Тип("ТаблицаКомпоновкиДанных");
	ТипСтруктурыДиаграммы = Тип("ДиаграммаКомпоновкиДанных");
	Для Каждого ТекЭлемент Из СтруктураОтчета Цикл
		ТипЭлемента = ТипЗнч(ТекЭлемент);
		Если ТипЭлемента = ТипСтруктурыТаблицы Тогда
			Для Каждого Строка Из ТекЭлемент.Строки Цикл
				Возврат Строка;
			КонецЦикла;
			Для Каждого Колонка Из ТекЭлемент.Колонки Цикл
				Возврат Колонка;
			КонецЦикла;
		ИначеЕсли ТипЭлемента = ТипСтруктурыДиаграммы Тогда
			Для Каждого Серия Из ТекЭлемент.Серии Цикл
				Возврат Серия;
			КонецЦикла;
			Для Каждого Точка Из ТекЭлемент.Точки Цикл
				Возврат Точка;
			КонецЦикла;
		Иначе
			Возврат ТекЭлемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // КомпоновщикПолучитьПервуюСтрокуСтруктурыПоПолю()

// Установка периода СКД по варианту
//
// Параметры:
//  Настройки              - НастройкиКомпоновкиДанных - Настройки отчета.
//  ВариантЗагрузкиПериода - Строка                    - Вариант загрузки.
//
Процедура УстановитьПериодСКДПоВарианту(Настройки, ВариантЗагрузкиПериода) Экспорт
	
	Если ЗначениеЗаполнено(ВариантЗагрузкиПериода) И (НЕ ВариантЗагрузкиПериода = "ВариантСтандартногоПериода.ПроизвольныйПериод") Тогда
		
		СтандартныйПериодОтчета = Новый СтандартныйПериод(ПредопределенноеЗначение(ВариантЗагрузкиПериода));
		
		ДатаНачала = Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных("ДатаНачала"));
		Если НЕ ДатаНачала = Неопределено Тогда
			Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала", СтандартныйПериодОтчета.ДатаНачала);
		КонецЕсли;
		
		ДатаОкончания = Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных("ДатаОкончания"));
		Если НЕ ДатаОкончания = Неопределено Тогда
			Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", СтандартныйПериодОтчета.ДатаОкончания);
		КонецЕсли;
		
		ДатаОкончанияГраница = Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных("ДатаОкончанияГраница"));
		Если НЕ ДатаОкончанияГраница = Неопределено Тогда
			Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончанияГраница", Новый Граница(СтандартныйПериодОтчета.ДатаОкончания, ВидГраницы.Включая));
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаОкончания = КомпоновщикПолучитьЗначениеПараметра("ДатаОкончания", Настройки);
	Если НЕ ДатаОкончания = Неопределено И НачалоДня(ДатаОкончания) = Дата(1, 1, 1) Тогда
		#Если Клиент Тогда
			Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ОбщегоНазначенияКлиент.ДатаСеанса()));
		#Иначе
		 	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));
		#КонецЕсли
	КонецЕсли;
	
	ДатаОкончанияГраница = КомпоновщикПолучитьЗначениеПараметра("ДатаОкончанияГраница", Настройки);
	Если НЕ ДатаОкончанияГраница = Неопределено И НачалоДня(ДатаОкончанияГраница) = Дата(1, 1, 1) Тогда
		#Если Клиент Тогда
			Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончанияГраница", Новый Граница(КонецДня(ОбщегоНазначенияКлиент.ДатаСеанса()), ВидГраницы.Включая));
		#Иначе
			Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончанияГраница", Новый Граница(КонецДня(ТекущаяДатаСеанса()), ВидГраницы.Включая));	
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Загрузка настройки в СКД
//
// Параметры:
//  Настройки              - НастройкиКомпоновкиДанных - Настройки отчета.
//  РежимВыводаОтчета      - Число - Режим вывода отчета.
//  ИзмеренияСтроки        - ТаблицаЗначений - Измерения строки.
//  ИзмеренияКолонки       - ТаблицаЗначений - Измерения колонки.
//  ВариантЗагрузкиПериода - Строка - Вариант загрузки.
//  ОтсекатьГруппировки    - Булево - Признак использования группировок.
//
Процедура ЗагрузитьНастройкиВСКД(
	Настройки,
	РежимВыводаОтчета,
	ИзмеренияСтроки,
	ИзмеренияКолонки,
	ВариантЗагрузкиПериода = "",
	ОтсекатьГруппировки = Истина) Экспорт
	
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПериодСКДПоВарианту(Настройки, ВариантЗагрузкиПериода);
	
	СтруктураОтчета = Настройки.Структура;
	СтруктураОтчета.Очистить();
	Если РежимВыводаОтчета = 1 Тогда
		РодительГруппировки = СтруктураОтчета;
		// Группировки
		Для Каждого ТекСтрока Из ИзмеренияСтроки Цикл
			
			// Нельзя добавлять пустые группировки иначе СКД отсечет остальные
			Если ОтсекатьГруппировки И (НЕ ТекСтрока.Использование) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = РодительГруппировки.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			НоваяСтрока.Использование = ТекСтрока.Использование;
			
			// Основная группировка
			Если НЕ СокрЛП(ТекСтрока.Поле) = "" Тогда
				НовоеПолеГруппировки = НоваяСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовоеПолеГруппировки.Использование  = Истина;
				НовоеПолеГруппировки.Поле           = ТекСтрока.Поле;
				НовоеПолеГруппировки.ТипГруппировки = ТекСтрока.ТипГруппировки;
				
				// Дополнительные группировки
				Для Каждого ТекПоле Из ТекСтрока.ДопГруппировки Цикл
					
					Если СокрЛП(ТекПоле.Поле) = "" ИЛИ (НЕ ТекПоле.Использование) Тогда
						Продолжить;
					КонецЕсли;
					
					НовоеДопПолеГруппировки = НоваяСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					НовоеДопПолеГруппировки.Использование  = Истина;
					НовоеДопПолеГруппировки.Поле           = ТекПоле.Поле;
					НовоеДопПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				КонецЦикла;
				
			КонецЕсли;
			
			// Поля группировки
			НовоеПоле = НоваяСтрока.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Использование     = Истина;
			Для Каждого ТекПоле Из ТекСтрока.ДопПоля Цикл
				НовоеПоле = НоваяСтрока.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле          = ТекПоле.Поле;
			КонецЦикла;
			
			// Порядок группировки
			Для Каждого ТекПоле Из ТекСтрока.Порядок Цикл
				НовоеПоле = НоваяСтрока.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				НовоеПоле.Использование     = Истина;
				НовоеПоле.Поле              = ТекПоле.Поле;
				НовоеПоле.ТипУпорядочивания = ТекПоле.ТипУпорядочивания;
			КонецЦикла;
			
			// Автоматический порядок
			НовоеПоле = НоваяСтрока.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			НовоеПоле.Использование = Истина;
			
			РодительГруппировки = НоваяСтрока.Структура;
			
		КонецЦикла;
		
	ИначеЕсли РежимВыводаОтчета = 2 Тогда
		
		ТаблицаСКД = СтруктураОтчета.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		НовоеПоле = ТаблицаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование     = Истина;
		РодительГруппировки = ТаблицаСКД.Строки;
		// Строки
		Для Каждого ТекСтрока Из ИзмеренияСтроки Цикл
			
			// Нельзя добавлять пустые группировки иначе СКД отсечет остальные
			Если ОтсекатьГруппировки И (НЕ ТекСтрока.Использование) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = РодительГруппировки.Добавить();
			НоваяСтрока.Использование = ТекСтрока.Использование;
			
			Если НЕ СокрЛП(ТекСтрока.Поле) = "" Тогда
				НовоеПолеГруппировки = НоваяСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовоеПолеГруппировки.Использование  = Истина;
				НовоеПолеГруппировки.Поле           = ТекСтрока.Поле;
				НовоеПолеГруппировки.ТипГруппировки = ТекСтрока.ТипГруппировки;
				
				// Дополнительные группировки
				Для Каждого ТекПоле Из ТекСтрока.ДопГруппировки Цикл
					
					Если СокрЛП(ТекПоле.Поле) = "" ИЛИ (НЕ ТекПоле.Использование) Тогда
						Продолжить;
					КонецЕсли;
					
					НовоеДопПолеГруппировки = НоваяСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					НовоеДопПолеГруппировки.Использование  = Истина;
					НовоеДопПолеГруппировки.Поле           = ТекПоле.Поле;
					НовоеДопПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				КонецЦикла;
				
			КонецЕсли;
			
			// Поля группировки
			НовоеПоле = НоваяСтрока.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Использование     = Истина;
			Для Каждого ТекПоле Из ТекСтрока.ДопПоля Цикл
				НовоеПоле = НоваяСтрока.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле          = ТекПоле.Поле;
			КонецЦикла;
			
			// Порядок группировки
			Для Каждого ТекПоле Из ТекСтрока.Порядок Цикл
				НовоеПоле = НоваяСтрока.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				НовоеПоле.Использование     = Истина;
				НовоеПоле.Поле              = ТекПоле.Поле;
				НовоеПоле.ТипУпорядочивания = ТекПоле.ТипУпорядочивания;
			КонецЦикла;
			
			// Автоматический порядок
			НовоеПоле = НоваяСтрока.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			НовоеПоле.Использование     = Истина;
			
			РодительГруппировки = НоваяСтрока.Структура;
			
		КонецЦикла;
		
		// Колонки
		РодительГруппировки = ТаблицаСКД.Колонки;
		Для Каждого ТекСтрока Из ИзмеренияКолонки Цикл
			
			// Нельзя добавлять пустые группировки иначе СКД отсечет остальные
			Если ОтсекатьГруппировки И (НЕ ТекСтрока.Использование) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = РодительГруппировки.Добавить();
			НоваяСтрока.Использование = ТекСтрока.Использование;
			
			Если НЕ СокрЛП(ТекСтрока.Поле) = "" Тогда
				НовоеПолеГруппировки = НоваяСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовоеПолеГруппировки.Использование  = Истина;
				НовоеПолеГруппировки.Поле           = ТекСтрока.Поле;
				НовоеПолеГруппировки.ТипГруппировки = ТекСтрока.ТипГруппировки;
			КонецЕсли;
			
			НовоеПоле = НоваяСтрока.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Использование = Истина;
			
			// Автоматический порядок
			НовоеПоле = НоваяСтрока.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			НовоеПоле.Использование = Истина;
			
			РодительГруппировки = НоваяСтрока.Структура;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаСКД = СтруктураОтчета.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
		НовоеПоле = ТаблицаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		РодительГруппировки = ТаблицаСКД.Серии;
		// Серии
		Для Каждого ТекСтрока Из ИзмеренияСтроки Цикл
			
			// Нельзя добавлять пустые группировки иначе СКД отсечет остальные
			Если ОтсекатьГруппировки И (НЕ ТекСтрока.Использование) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = РодительГруппировки.Добавить();
			НоваяСтрока.Использование = ТекСтрока.Использование;
			
			Если НЕ СокрЛП(ТекСтрока.Поле) = "" Тогда
				НовоеПолеГруппировки = НоваяСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовоеПолеГруппировки.Использование  = Истина;
				НовоеПолеГруппировки.Поле           = ТекСтрока.Поле;
				НовоеПолеГруппировки.ТипГруппировки = ТекСтрока.ТипГруппировки;
				
				// Дополнительные группировки
				Для Каждого ТекПоле Из ТекСтрока.ДопГруппировки Цикл
					
					Если СокрЛП(ТекПоле.Поле) = "" ИЛИ (НЕ ТекПоле.Использование) Тогда
						Продолжить;
					КонецЕсли;
					
					НовоеДопПолеГруппировки = НоваяСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					НовоеДопПолеГруппировки.Использование  = Истина;
					НовоеДопПолеГруппировки.Поле           = ТекПоле.Поле;
					НовоеДопПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				КонецЦикла;
				
			КонецЕсли;
			
			// Поля группировки
			НовоеПоле = НоваяСтрока.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Использование     = Истина;
			Для Каждого ТекПоле Из ТекСтрока.ДопПоля Цикл
				НовоеПоле = НоваяСтрока.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле          = ТекПоле.Поле;
			КонецЦикла;
			
			// Порядок группировки
			Для Каждого ТекПоле Из ТекСтрока.Порядок Цикл
				НовоеПоле = НоваяСтрока.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				НовоеПоле.Использование     = Истина;
				НовоеПоле.Поле              = ТекПоле.Поле;
				НовоеПоле.ТипУпорядочивания = ТекПоле.ТипУпорядочивания;
			КонецЦикла;
			
			// Автоматический порядок
			НовоеПоле = НоваяСтрока.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			НовоеПоле.Использование     = Истина;
			
			РодительГруппировки = НоваяСтрока.Структура;
			
		КонецЦикла;
		
		// Точки
		РодительГруппировки = ТаблицаСКД.Точки;
		Для Каждого ТекСтрока Из ИзмеренияКолонки Цикл
			// Нельзя добавлять пустые группировки иначе СКД отсечет остальные
			Если ОтсекатьГруппировки И (НЕ ТекСтрока.Использование) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = РодительГруппировки.Добавить();
			НоваяСтрока.Использование = ТекСтрока.Использование;
			
			Если НЕ СокрЛП(ТекСтрока.Поле) = "" Тогда
				НовоеПолеГруппировки = НоваяСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовоеПолеГруппировки.Использование  = Истина;
				НовоеПолеГруппировки.Поле           = ТекСтрока.Поле;
				НовоеПолеГруппировки.ТипГруппировки = ТекСтрока.ТипГруппировки;
			КонецЕсли;
			
			НовоеПоле = НоваяСтрока.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Использование = Истина;
			
			// Автоматический порядок
			НовоеПоле = НоваяСтрока.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			НовоеПоле.Использование = Истина;
			
			РодительГруппировки = НоваяСтрока.Структура;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Загрузка настроек из СКД
//
// Параметры:
//  Настройки        - НастройкиКомпоновкиДанных - Настройки отчета.
//  ИзмеренияСтроки  - ТаблицаЗначений - Измерения строки.
//  ИзмеренияКолонки - ТаблицаЗначений - Измерения колонки.
//
Процедура ЗагрузитьНастройкиИзСКД(Настройки, ИзмеренияСтроки, ИзмеренияКолонки) Экспорт
	
	СтруктураОтчета = Настройки.Структура[0];
	
	ИзмеренияСтроки.Очистить();
	ИзмеренияКолонки.Очистить();
	
	ТипСтруктурыТаблицы   = Тип("ТаблицаКомпоновкиДанных");
	ТипСтруктурыДиаграммы = Тип("ДиаграммаКомпоновкиДанных");
	
	ТипСтруктуры = ТипЗнч(СтруктураОтчета);
	Если ТипСтруктуры = ТипСтруктурыТаблицы Тогда
		
		Для Каждого Строка Из СтруктураОтчета.Строки Цикл
			ЗаполнитьГруппировкиСтроки(Настройки, ИзмеренияСтроки, Строка);
		КонецЦикла;
		
		Для Каждого Колонка Из СтруктураОтчета.Колонки Цикл
			ЗаполнитьГруппировкиКолонки(Настройки, ИзмеренияКолонки, Колонка);
		КонецЦикла;
		
	ИначеЕсли ТипСтруктуры = ТипСтруктурыДиаграммы Тогда
		
		Для Каждого Серия Из СтруктураОтчета.Серии Цикл
			ЗаполнитьГруппировкиСтроки(Настройки, ИзмеренияСтроки, Серия);
		КонецЦикла;
		
		Для Каждого Точка Из СтруктураОтчета.Точки Цикл
			ЗаполнитьГруппировкиКолонки(Настройки, ИзмеренияКолонки, Точка);
		КонецЦикла;
		
	Иначе
		
		ЗаполнитьГруппировкиСтроки(Настройки, ИзмеренияСтроки, СтруктураОтчета);
		
	КонецЕсли;
	
КонецПроцедуры


#Область ОтчетыТП

// Формирование отчета
//
// Параметры:
//  ОтчетОбъект         - ОтчетОбъект - Объект отчета.
//  ДокументРезультат    - ТабличныйДокумент - Результат отчета.
//  Расшифровка          - Произвольный - Расшифровка данных
//  ЗаголовокОтчета      - Строка - Заголовок для отчета.
//  ИмяОформлениеТаблицы - Строка - Имя таблицы оформления.
//  ИнформацияОбОшибке   - Строка - Информация об ошибке формирования.
//  КлючВарианта         - Строка - Ключ варианта настроек.
//
Процедура СформироватьОтчет(
	ОтчетОбъект,
	ДокументРезультат,
	Расшифровка,
	ЗаголовокОтчета,
	ИмяОформлениеТаблицы,
	ИнформацияОбОшибке = "",
	КлючВарианта = "") Экспорт
	
	ЗаполнитьФорматПараметров(ОтчетОбъект.СхемаКомпоновкиДанных);
	
	ВыводитьЗаголовок = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок");
	Если НЕ ВыводитьЗаголовок.Использование Тогда
		ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Значение        = ТипВыводаТекстаКомпоновкиДанных.Выводить;
		ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Использование   = Истина;
		
		ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок").Значение                = ЗаголовокОтчета;
		ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок").Использование           = Истина;
	КонецЕсли;
	
	ВыводитьОтбор = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
	Если НЕ ВыводитьОтбор.Использование Тогда
		ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение            = ТипВыводаТекстаКомпоновкиДанных.Выводить;
		ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование       = Истина;
	КонецЕсли;
	
	ВыводитьПараметры = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьПараметрыДанных");
	Если НЕ ВыводитьПараметры.Использование Тогда
		ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьПараметрыДанных").Значение      = ТипВыводаТекстаКомпоновкиДанных.Выводить;
		ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьПараметрыДанных").Использование = Истина;
	КонецЕсли;
	
	Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	Настройки.Структура.Очистить();
	
	ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления").Значение = ИмяОформлениеТаблицы;
	
	КлючОбъекта = ОтчетОбъект.Метаданные().ПолноеИмя();
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати("ПАРАМЕТРЫ_ПЕЧАТИ_" + КлючОбъекта + "_" + КлючВарианта,ДокументРезультат);
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + КлючОбъекта + "_" + КлючВарианта;

	Для Каждого ТекущаяТаблица Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура Цикл
		
		Если ТекущаяТаблица.Использование Тогда
			СкопироватьСтруктуру(Настройки.Структура, ТекущаяТаблица);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим заполнение обязательных параметров
	Если НЕ ОтчетОбъект.ПроверитьЗаполнение() ИЛИ НЕ ПроверитьЗаполнениеДат(ОтчетОбъект) Тогда
		
		СообщениеОбОшибке = "";
		
		Для Каждого Сообщение Из ПолучитьСообщенияПользователю() Цикл
			
			СообщениеОбОшибке = СообщениеОбОшибке + ?(ЗначениеЗаполнено(СообщениеОбОшибке), Символы.ПС, "") + Сообщение.Текст; 
			
		КонецЦикла;
		
		ИнформацияОбОшибке = СообщениеОбОшибке;
		Возврат;
		
	КонецЕсли;
	
	ОтчетОбъект.СкомпоноватьРезультат(ДокументРезультат, Расшифровка);
	
	УправлениеКолонтитулами.УстановитьКолонтитулы(ДокументРезультат, ЗаголовокОтчета);
	
КонецПроцедуры

// Формирует отчет с указанными настройками, используется в фоновых заданиях.
//
// Параметры:
//  ПараметрыФормированияОтчета - Структура - Структура с настройками.
//  АдресХранилища - Строка - Адрес во временном хранилище.
//
Процедура СформироватьОтчетВФоне(ПараметрыФормированияОтчета, АдресХранилища) Экспорт
	
	Заголовок       = ПараметрыФормированияОтчета.Заголовок;
	КлючОбъекта     = ПараметрыФормированияОтчета.КлючОбъекта;
	Если ПараметрыФормированияОтчета.Свойство("КлючВарианта") Тогда
		КлючВарианта    = ПараметрыФормированияОтчета.КлючВарианта;
	Иначе
		КлючВарианта = "";
	КонецЕсли;
	СхемаКомпоновки = ПараметрыФормированияОтчета.СхемаКомпоновки;
	Настройки       = ПараметрыФормированияОтчета.Настройки;
	ОтчетСсылка     = ПараметрыФормированияОтчета.ОтчетСсылка;
	ИмяОформлениеТаблицы = ПараметрыФормированияОтчета.ИмяОформлениеТаблицы;
	
	// Создаем отчет
	ПозицияТочки = СтрНайти(КлючОбъекта, ".");
	Если ПозицияТочки = 0 Тогда
		Префикс = "";
		ОтчетИмя = КлючОбъекта;
	Иначе
		Префикс = Лев(КлючОбъекта, ПозицияТочки - 1);
		ОтчетИмя = Сред(КлючОбъекта, ПозицияТочки + 1);
	КонецЕсли;
	
	ОтчетОбъект = Неопределено;
	// Отчет из метаданных
	Если ТипЗнч(ОтчетСсылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") 
		ИЛИ ТипЗнч(ОтчетСсылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		ОтчетОбъект = Отчеты[ОтчетИмя].Создать();
	// Внешний отчет
	Иначе
		ОтчетОбъект = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ОтчетСсылка);
	КонецЕсли;
	
	РеквизитыОбъекта = ПолучитьЗначениеПараметраСтруктуры(ПараметрыФормированияОтчета, "РеквизитыОтчета", Новый Структура);
	ЗаполнитьЗначенияСвойств(ОтчетОбъект, РеквизитыОбъекта);
	
	// Заполняем схему КД
	///ОтчетОбъект.СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(СхемаКомпоновки);
	ОтчетОбъект.СхемаКомпоновкиДанных = СхемаКомпоновки;
	// Заполняем настройки КД
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	Расшифровка       = Неопределено;
	
	ИнформацияОбОшибке = Неопределено;
	СформироватьОтчет(ОтчетОбъект, ДокументРезультат, Расшифровка, Заголовок, ИмяОформлениеТаблицы, ИнформацияОбОшибке, КлючВарианта);
	
	//Если ТекстОшибки = "" Тогда
	//	ОтчетыПлатформаКлиентСервер.ВзвестиМодифицированностьОтчета(ЭтотОбъект);
	//	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Расшифровка, УникальныйИдентификатор);
	//Иначе
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	//КонецЕсли;
	
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ОтчетТабличныйДокумент", ДокументРезультат);
	РезультатФормирования.Вставить("Расшифровка",            Расшифровка);
	РезультатФормирования.Вставить("ИнформацияОбОшибке",     ИнформацияОбОшибке);
	
	ПоместитьВоВременноеХранилище(РезультатФормирования, АдресХранилища);
	
КонецПроцедуры

// Получение структуру отчета
//
// Параметры:
//  СтрокиСтруктуры - ТаблицаКомпоновкиДанных - Настройки отчета
//  РежимЭксперт    - Булево - Признак варианта настройки отчета.
//  Уровень         - Число - Уровень получения структуры.
// 
// Возвращаемое значение:
//  ТаблицаКомпоновкиДанных - Структура отчета.
//
Функция ПолучитьСтруктуруОтчета(СтрокиСтруктуры, РежимЭксперт, Уровень) Экспорт
	
	СчетчикСтруктур  = 0;
	ТекущаяСтруктура = Неопределено;
	Для Каждого СтрокаСтруктуры Из СтрокиСтруктуры Цикл
		
		//Если НЕ СтрокаСтруктуры.Использование Тогда
		//	Продолжить;
		//КонецЕсли;
		
		// Проверка на вложенные таблицы
		ТипСтруктурыОтчета = ТипЗнч(СтрокаСтруктуры);
		Если Уровень>0 И (ТипСтруктурыОтчета = Тип("ТаблицаКомпоновкиДанных")
			ИЛИ ТипСтруктурыОтчета = Тип("ДиаграммаКомпоновкиДанных")
			ИЛИ ТипСтруктурыОтчета = Тип("ВстроеннаяТаблица")) Тогда
			РежимЭксперт = Истина;
			Прервать;
		КонецЕсли;
		
		ТекущаяСтруктура = СтрокаСтруктуры;
		СчетчикСтруктур  = СчетчикСтруктур + 1;
		
	КонецЦикла;
	
	// Больше одной вертикальной группировки
	Если СчетчикСтруктур > 1 Тогда
		РежимЭксперт = Истина;
		ТекущаяСтруктура = Неопределено;
	//Иначе
	//	ГруппировкиЗапрещены = Ложь;
	КонецЕсли;
	
	Возврат ТекущаяСтруктура;
	
КонецФункции

// Обновление списока вариантов отчета
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ОбновитьСписокВариантовОтчета(ФормаОтчета) Экспорт
	
	ТаблицаВариантов = ФормаОтчета.ТаблицаВариантов;
	Элементы         = ФормаОтчета.Элементы;
	Команды          = ФормаОтчета.Команды;
	
	Для Каждого ТекущийВариант Из ТаблицаВариантов Цикл
		Элементы.Удалить(Элементы[ТекущийВариант.Имя]);
	КонецЦикла;
	
	ТаблицаВариантов.Очистить();
	
	СписокВариантов = ХранилищаНастроек.ХранилищеВариантовОтчетов.ПолучитьСписок(ФормаОтчета.КлючОбъекта);
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ФормаОтчета.СхемаКомпоновки);
	
	// Сортируем ПРЕДОПРЕДЕЛЕННЫЕ варианты настроек из СКД (по алфавиту)
	ВариантыНастроекСортированные = Новый Массив;
	// Скопируем данные для удобного перебора
	ВариантыСКД = Новый Массив;
	Для Каждого ВариантСКД Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		ВариантыСКД.Добавить(ВариантСКД);
	КонецЦикла;
	// Переберем все варианты и отсортируем
	Пока Истина Цикл
		// Если нечего уже перебирать
		Если ВариантыСКД.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		// Ищем минимальный из оставшихся элементов
		ТекущийВариант = ВариантыСКД[0];
		Для СчетчикМин = 0 По ВариантыСКД.Количество()-1 Цикл
			Если ВариантыСКД[СчетчикМин].Представление < ТекущийВариант.Представление Тогда
				ТекущийВариант = ВариантыСКД[СчетчикМин];
			КонецЕсли;
		КонецЦикла;
		// Добавляем минимальный элемент в массив сортировки
		ВариантыНастроекСортированные.Добавить(ТекущийВариант);
		// Удаляем минимальный элемент, чтобы искать следующий минимальный
		ВариантыСКД.Удалить(ВариантыСКД.Найти(ТекущийВариант));
	КонецЦикла;
	
	// Добавим с сортировкой ПОЛЬЗОВАТЕЛЬСКИЕ варианты настроек из справочника "Варианты отчетов" (по алфавиту).
	Для Каждого ЭлементСписка Из СписокВариантов Цикл
		Для Счет = 0 По ВариантыНастроекСортированные.Количество()-1 Цикл
			// Если просматриваемый элемент списка меньше элемента в массиве, вставим его перед ним.
			Если ЭлементСписка.Представление < ВариантыНастроекСортированные[Счет].Представление Тогда
				ВариантыНастроекСортированные.Вставить(Счет, ЭлементСписка);
				Прервать;
			КонецЕсли;
			// Если просмотрели все, но не нашли элементов, которые больше просматриваемого
			Если Счет = ВариантыНастроекСортированные.Количество()-1 Тогда
				ВариантыНастроекСортированные.Добавить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Счетчик = 1;
	
	Для Каждого ВариантНастроекКД Из ВариантыНастроекСортированные Цикл
		
		ЭтоПользовательскийВариант = ТипЗнч(ВариантНастроекКД) = Тип("ЭлементСпискаЗначений");
		
		Если НЕ ЭтоПользовательскийВариант Тогда
			ВариантыНастроекКД = ТаблицаВариантов.НайтиСтроки(Новый Структура("Идентификатор", ВариантНастроекКД.Имя));
			Если ВариантыНастроекКД.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИмяВарианта = "ВариантОтчета_" + Счетчик;
		
		ВариантНастроек = ТаблицаВариантов.Добавить();
		ВариантНастроек.Имя           = ИмяВарианта;
		ВариантНастроек.Идентификатор = ВариантНастроекКД[?(ЭтоПользовательскийВариант, "Значение", "Имя")];
		ВариантНастроек.Представление = ВариантНастроекКД.Представление;
		
		ИмяКоманды = "ВыбратьВариант"+ИмяВарианта;
		НоваяКоманда = Команды.Найти(ИмяКоманды);
		Если НоваяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Действие = "Подключаемый_ВыбратьВариант";
		КонецЕсли;
		
		НовыйВариант = Элементы.Найти(ИмяВарианта);
		Если НовыйВариант = Неопределено Тогда
			НовыйВариант = Элементы.Добавить(ИмяВарианта, Тип("КнопкаФормы"), Элементы.МенюВыборНастройки);
			НовыйВариант.ИмяКоманды = НоваяКоманда.Имя;
			НовыйВариант.Заголовок  = ВариантНастроекКД.Представление;
		КонецЕсли;
		
		Если (ЭтоПользовательскийВариант И ВариантНастроекКД.Значение = ФормаОтчета.КлючТекущегоВарианта)
			ИЛИ (НЕ ЭтоПользовательскийВариант И ВариантНастроекКД.Имя = ФормаОтчета.КлючТекущегоВарианта) Тогда
			
			НовыйВариант.Пометка = Истина;
			ФормаОтчета.Заголовок = НовыйВариант.Заголовок + " (" +ФормаОтчета.ЗаголовокОтчета + ")";
			Элементы.МенюВыборНастройки.Подсказка = НСтр("ru = 'Вариант отчета:'") + " " + НовыйВариант.Заголовок;
		Иначе
			НовыйВариант.Пометка = Ложь;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Установка заголовока варианта отчета.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//  ИмяВарианта - Строка           - Ключ варианта отчета.
//
Процедура УстановитьЗаголовокВарианта(ФормаОтчета, ИмяВарианта) Экспорт
	
	ПредставлениеТекущегоВарианта = ФормаОтчета.ПредставлениеТекущегоВарианта;
	Элементы = ФормаОтчета.Элементы;
	
	Для Каждого ТекВариант Из Элементы.МенюВыборНастройки.ПодчиненныеЭлементы Цикл
		Если НЕ ТипЗнч(ТекВариант) = Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		ТекВариант.Пометка = (ТекВариант.Имя = ИмяВарианта);
	КонецЦикла;
	
	Если (НЕ ИмяВарианта = "") И (НЕ ПредставлениеТекущегоВарианта = "") Тогда
		
		ФормаОтчета.Заголовок = ПредставлениеТекущегоВарианта + " (" +ФормаОтчета.ЗаголовокОтчета + ")"; 
		Элементы.МенюВыборНастройки.Подсказка = НСтр("ru = 'Вариант отчета:'") + " " + ПредставлениеТекущегоВарианта;
	КонецЕсли;
	
КонецПроцедуры

// Заполнить настройки СКД
//
// Параметры:
//  ОбъектНастройки               - КоллекцияЭлементовОтбораКомпоновкиДанных - Настройки объекта.
//  КоллекцияЭлементов            - ДанныеФормыКоллекцияЭлементовДерева - Коллекция элементов.
//  УбиратьОтключенныеГруппировки - Булево - Признак отключения группировки.
//
Процедура ЗаполнитьНастройкиСКД(ОбъектНастройки, КоллекцияЭлементов = Неопределено, УбиратьОтключенныеГруппировки = Ложь) Экспорт
	
	ТипНастройки = ТипЗнч(ОбъектНастройки);
	
	// Параметры
	Если ТипНастройки = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		
		Для Каждого СтрокаПараметров Из КоллекцияЭлементов Цикл
			
			ПараметрСКД = ОбъектНастройки.Найти(СтрокаПараметров.Параметр);
			Если ПараметрСКД = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПараметрСКД.Использование = СтрокаПараметров.Использование;
			ПараметрСКД.Значение      = СтрокаПараметров.Значение;
			
			Если ПараметрСКД.ЗначенияВложенныхПараметров.Количество()>0 Тогда
				Если ТипЗнч(СтрокаПараметров) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ЗаполнитьНастройкиСКД(ПараметрСКД.ЗначенияВложенныхПараметров, СтрокаПараметров.ЗначенияВложенныхПараметров);
				Иначе
					ЗаполнитьНастройкиСКД(ПараметрСКД.ЗначенияВложенныхПараметров, СтрокаПараметров.ПолучитьЭлементы());
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	// Показатели и реквизиты
	ИначеЕсли ТипНастройки = Тип("КоллекцияВыбранныхПолейКомпоновкиДанных") Тогда
		
		Для Каждого СтрокаПоказателей Из КоллекцияЭлементов Цикл
			
			Если СтрокаПоказателей.Папка Тогда
				ГруппаПоказателей = ОбъектНастройки.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ГруппаПоказателей.Использование = СтрокаПоказателей.Использование;
				ГруппаПоказателей.Заголовок     = СтрокаПоказателей.Заголовок;
				ГруппаПоказателей.Расположение  = СтрокаПоказателей.Расположение;
				
				Если ТипЗнч(СтрокаПоказателей) = Тип("СтрокаДереваЗначений") Тогда
					ПодчиненныеЭлементы = СтрокаПоказателей.Строки;
				Иначе
					ПодчиненныеЭлементы = СтрокаПоказателей.ПолучитьЭлементы();
				КонецЕсли;
				
				ЗаполнитьНастройкиСКД(ГруппаПоказателей.Элементы, ПодчиненныеЭлементы);
			Иначе
				ЭлементПоказателей = ОбъектНастройки.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ЭлементПоказателей.Использование  = СтрокаПоказателей.Использование;
				ЭлементПоказателей.Поле           = СтрокаПоказателей.Поле;
				ЭлементПоказателей.Заголовок      = СтрокаПоказателей.Заголовок;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияПолейГруппировкиКомпоновкиДанных") Тогда
		
		// Состав группировок строки
		Для Каждого ПолеГруппировки Из КоллекцияЭлементов Цикл
			
			ПолеГруппировкиСКД = ОбъектНастройки.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировкиСКД.Использование  = ПолеГруппировки.Использование;
			ПолеГруппировкиСКД.Поле           = ПолеГруппировки.Поле;
			ПолеГруппировкиСКД.ТипГруппировки = ПолеГруппировки.ТипГруппировки;
			ПолеГруппировкиСКД.ТипДополнения  = ПолеГруппировки.ТипДополнения;
			ПолеГруппировкиСКД.НачалоПериода  = ПолеГруппировки.НачалоПериода;
			ПолеГруппировкиСКД.КонецПериода   = ПолеГруппировки.КонецПериода;
			
		КонецЦикла;
		
	// Копирование отбора
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных") И ТипЗнч(КоллекцияЭлементов) = ТипНастройки Тогда
		
		ТипЭлементыОтбора = Тип("ЭлементОтбораКомпоновкиДанных");
		
		Для Каждого СтрокаОтбора Из КоллекцияЭлементов Цикл
			
			Если ТипЗнч(СтрокаОтбора) = ТипЭлементыОтбора Тогда
				ЭлементОтбора = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование  = СтрокаОтбора.Использование;
				ЭлементОтбора.ЛевоеЗначение  = СтрокаОтбора.ЛевоеЗначение;
				ЭлементОтбора.ВидСравнения   = СтрокаОтбора.ВидСравнения;
				ЭлементОтбора.ПравоеЗначение = СтрокаОтбора.ПравоеЗначение;
			Иначе
				ГруппаОтбора = ОбъектНастройки.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбора.Использование = СтрокаОтбора.Использование;
				ГруппаОтбора.ТипГруппы     = СтрокаОтбора.ТипГруппы;
				
				ЗаполнитьНастройкиСКД(ГруппаОтбора.Элементы, СтрокаОтбора.Элементы);
			КонецЕсли;
			
		КонецЦикла;
		
	// Отбор
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных") Тогда
		
		Для Каждого СтрокаОтбора Из КоллекцияЭлементов Цикл
			
			Если СтрокаОтбора.Папка Тогда
				ГруппаОтбора = ОбъектНастройки.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбора.Использование = СтрокаОтбора.Использование;
				ГруппаОтбора.ТипГруппы     = СтрокаОтбора.ТипГруппы;
				
				ЗаполнитьНастройкиСКД(ГруппаОтбора.Элементы, СтрокаОтбора.ПолучитьЭлементы());
			Иначе
				ЭлементОтбора = ОбъектНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование  = СтрокаОтбора.Использование;
				ЭлементОтбора.ЛевоеЗначение  = СтрокаОтбора.ЛевоеЗначение;
				ЭлементОтбора.ВидСравнения   = СтрокаОтбора.ВидСравнения;
				ЭлементОтбора.ПравоеЗначение = СтрокаОтбора.ПравоеЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
	// Порядок
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовПорядкаКомпоновкиДанных") Тогда

		// Порядок группировок
		Для Каждого ПолеПорядка Из КоллекцияЭлементов Цикл
			
			ПолеПорядкаСКД = ОбъектНастройки.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядкаСКД.Использование     = ПолеПорядка.Использование;
			ПолеПорядкаСКД.Поле              = ПолеПорядка.Поле;
			ПолеПорядкаСКД.ТипУпорядочивания = ПолеПорядка.ТипУпорядочивания;
			
		КонецЦикла;

		// Автоматический порядок
		ПолеПорядкаСКД = ОбъектНастройки.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаСКД.Использование = Истина;
		
	// Элементы таблицы отчета
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		
		ВетвьСтруктуры = ОбъектНастройки;
		Для Каждого СтрокаГруппировки Из КоллекцияЭлементов Цикл
			
			// Нельзя добавлять не используемые группировки иначе СКД отсечет всю цепочку
			Если УбиратьОтключенныеГруппировки И НЕ СтрокаГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементСтруктуры = ВетвьСтруктуры.Добавить();
			ЭлементСтруктуры.Использование = СтрокаГруппировки.Использование;
			
			ЗаполнитьНастройкиСКД(ЭлементСтруктуры, СтрокаГруппировки);
			
			ВетвьСтруктуры = ЭлементСтруктуры.Структура;
			
		КонецЦикла;
		
	// Элементы диаграммы
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		
		Для Каждого СтрокаГруппировки Из КоллекцияЭлементов Цикл
			
			// Нельзя добавлять не используемые группировки иначе СКД отсечет всю цепочку
			Если УбиратьОтключенныеГруппировки И НЕ СтрокаГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементСтруктуры = ОбъектНастройки.Добавить();
			ЭлементСтруктуры.Использование = СтрокаГруппировки.Использование;
			
			ЗаполнитьНастройкиСКД(ЭлементСтруктуры, СтрокаГруппировки);
			
			Прервать;
			
		КонецЦикла;
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияОформляемыхПолейКомпоновкиДанных") Тогда
		
		Для Каждого ПолеОформления Из КоллекцияЭлементов Цикл
			
			Если НЕ ПолеОформления.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = ОбъектНастройки.Добавить();
			НовыйЭлемент.Использование = ПолеОформления.Использование;
			НовыйЭлемент.Поле          = ПолеОформления.Поле;
			
		КонецЦикла;
		
	// Группировка таблицы отчета
	ИначеЕсли ТипНастройки = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		
		// Заполнение полей группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.ПоляГруппировки.Элементы, КоллекцияЭлементов.ПоляГруппировки);
		
		// Автоматическое поле
		ПолеРеквизитаСКД = ОбъектНастройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ПолеРеквизитаСКД.Использование = Истина;
		
		// Заполнение Реквизитов группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.Выбор.Элементы, КоллекцияЭлементов.Выбор.ПолучитьЭлементы());
		
		// Заполнение Порядка группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.Порядок.Элементы, КоллекцияЭлементов.Порядок);
		
		// Заполнение Параметров вывода группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.ПараметрыВывода.Элементы, КоллекцияЭлементов.ПараметрыВывода.ПолучитьЭлементы());
		
		// Заполнение Отборов группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.Отбор.Элементы, КоллекцияЭлементов.Отбор.Элементы);
		
		// Заполнение Условного оформления группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.УсловноеОформление.Элементы, КоллекцияЭлементов.УсловноеОформление.Элементы);
		
	// Группировка диаграммы отчета
	ИначеЕсли ТипНастройки = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		// Заполнение полей группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.ПоляГруппировки.Элементы, КоллекцияЭлементов.ПоляГруппировки);
		
		// Автоматическое поле
		ПолеРеквизитаСКД = ОбъектНастройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ПолеРеквизитаСКД.Использование = Истина;
		
		// Заполнение Порядка группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.Порядок.Элементы, КоллекцияЭлементов.Порядок);
		
		// Заполнение Параметров вывода группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.ПараметрыВывода.Элементы, КоллекцияЭлементов.ПараметрыВывода.ПолучитьЭлементы());
		
		// Заполнение Отборов группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.Отбор.Элементы, КоллекцияЭлементов.Отбор.Элементы);
		
		// Заполнение Условного оформления группировки
		ЗаполнитьНастройкиСКД(ОбъектНастройки.УсловноеОформление.Элементы, КоллекцияЭлементов.УсловноеОформление.Элементы);
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
		
		ОбъектНастройки.Очистить();
		
		// Заполнение Условного оформления группировки
		Для Каждого ЭлементОформления Из КоллекцияЭлементов Цикл
			
			//Если Не ЭлементОформления.Использование Тогда
			//	Продолжить;
			//КонецЕсли;
			
			НовыйЭлементОформления = ОбъектНастройки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовыйЭлементОформления, ЭлементОформления);
			
			ЗаполнитьНастройкиСКД(НовыйЭлементОформления.Отбор.Элементы, ЭлементОформления.Отбор.Элементы);
			ЗаполнитьНастройкиСКД(НовыйЭлементОформления.Поля.Элементы, ЭлементОформления.Поля.Элементы);
			ЗаполнитьНастройкиСКД(НовыйЭлементОформления.Оформление.Элементы, ЭлементОформления.Оформление.Элементы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение настройки отчета.
//
// Параметры:
//  ФормаОтчета        - УправляемаяФорма - Форма, в которой возникло событие.
//  КоллекцияЭлементов - ДанныеФормыКоллекцияЭлементовДерева - Коллекция элементов.
//  ОбъектНастройки    - КоллекцияЭлементовОтбораКомпоновкиДанных - Настройки объекта.
//  ДоступныеНастройки - ДоступныеПоляКомпоновкиДанных - Доступные настройки отчета.
//  РодительЭлементов  - ДанныеФормыЭлементКоллекции - Группировка элементов.
//
Процедура ЗаполнитьНастройкиОтчета(
	ФормаОтчета,
	КоллекцияЭлементов,
	ОбъектНастройки,
	ДоступныеНастройки = Неопределено,
	РодительЭлементов = Неопределено) Экспорт
	
	ТипНастройки = ТипЗнч(ОбъектНастройки);
	
	Если ТипНастройки = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных") Тогда
		
		ЭтоКраткаяНастройка = (СтрНайти(ФормаОтчета.ИмяФормы, ".ФормаНастроек") = 0);
		
		Для Каждого ЭлементОтбора Из ОбъектНастройки Цикл
			
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				
				ГруппаОтборов = КоллекцияЭлементов.Добавить();
				ГруппаОтборов.Использование           = ЭлементОтбора.Использование;
				ГруппаОтборов.ТипГруппы               = ЭлементОтбора.ТипГруппы;
				ГруппаОтборов.Папка                   = Истина;
				ГруппаОтборов.ВыводитьТолькоЗаголовок = Истина;
				
				ЗаполнитьНастройкиОтчета(ФормаОтчета, ГруппаОтборов.ПолучитьЭлементы(), ЭлементОтбора.Элементы, ДоступныеНастройки);
				
			Иначе
				
				ДоступноеПоле = ДоступныеНастройки.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
				// Имя поля изменилось или поле было удалено.
				Если ДоступноеПоле = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаголовокПоля = ОтчетыПлатформаКлиентСервер.ПолучитьЗаголовокПоля(ДоступноеПоле);
				
				НовыйОтбор = КоллекцияЭлементов.Добавить();
				НовыйОтбор.Использование           = ЭлементОтбора.Использование;
				НовыйОтбор.ЛевоеЗначение           = ЭлементОтбора.ЛевоеЗначение;
				НовыйОтбор.ВидСравнения            = ЭлементОтбора.ВидСравнения;
				НовыйОтбор.ПравоеЗначение          = ЭлементОтбора.ПравоеЗначение;
				НовыйОтбор.Заголовок               = ?(ЭтоКраткаяНастройка, ПолучитьПредставлениеЭлементаОтбора(ЗаголовокПоля, ЭлементОтбора.ВидСравнения), ЗаголовокПоля);
				НовыйОтбор.Папка                   = Ложь;
				НовыйОтбор.ВыводитьТолькоЗаголовок = (НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
														ИЛИ НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементПараметров Из ОбъектНастройки Цикл
			
			ИмяПараметра = Строка(ЭлементПараметров.Параметр);
			
			Если ИмяПараметра = "НачалоПериода" Тогда
				ФормаОтчета.ЕстьНачалоПериода = ЭлементПараметров.Использование;
				Продолжить;
			КонецЕсли;
			
			Если ИмяПараметра = "КонецПериода" ИЛИ ИмяПараметра = "Период" ИЛИ ИмяПараметра = "ПериодГраница" Тогда
				ФормаОтчета.ЕстьКонецПериода = ЭлементПараметров.Использование;
				Продолжить;
			КонецЕсли;
			
			// Имя параметра изменилось или параметр был удален
			ДоступныйПараметр = ДоступныеНастройки.НайтиПараметр(ЭлементПараметров.Параметр);
			Если ДоступныйПараметр = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйПараметр = КоллекцияЭлементов.Добавить();
			НовыйПараметр.Параметр      = ЭлементПараметров.Параметр;
			НовыйПараметр.Значение      = ЭлементПараметров.Значение;
			НовыйПараметр.Использование = ЭлементПараметров.Использование;
			НовыйПараметр.Заголовок     = ДоступныйПараметр.Заголовок;
			
			Если ЭлементПараметров.ЗначенияВложенныхПараметров.Количество()>0 Тогда
				ЗаполнитьНастройкиОтчета(ФормаОтчета, НовыйПараметр.ПолучитьЭлементы(), ЭлементПараметров.ЗначенияВложенныхПараметров, ДоступныеНастройки);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияВыбранныхПолейКомпоновкиДанных") Тогда
		
		Если РодительЭлементов = Неопределено Тогда
			СложноеПредставление = Ложь;
		Иначе
			СложноеПредставление = (РодительЭлементов.ПоляГруппировки.Количество()>1);
		КонецЕсли;
		
		ПредставлениеПолей = "";
		Для Каждого ЭлементПоказателей Из ОбъектНастройки Цикл
			ТипПоля = ТипЗнч(ЭлементПоказателей);
			
			ЗаголовокПоля = "";
			Если ТипПоля = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				
				ЗаголовокПоля = ЭлементПоказателей.Заголовок;
				
				Если ЗаголовокПоля = "" Тогда
					
					Попытка
						// Если группа входит в состав доступных полей
						ДоступноеПоле = ДоступныеНастройки.НайтиПоле(ЭлементПоказателей.Поле);
					Исключение
						ДоступноеПоле = Неопределено;
					КонецПопытки;
					// Имя параметра изменилось или параметр был удален.
					Если НЕ ДоступноеПоле = Неопределено Тогда
						ЗаголовокПоля = ДоступноеПоле.Заголовок;
					КонецЕсли;
				КонецЕсли;
				
				ГруппаПоказателей = КоллекцияЭлементов.Добавить();
				ГруппаПоказателей.Использование = ЭлементПоказателей.Использование;
				ГруппаПоказателей.Заголовок     = ЗаголовокПоля;
				ГруппаПоказателей.Расположение  = ЭлементПоказателей.Расположение;
				ГруппаПоказателей.Папка         = Истина;
				
				Если ТипЗнч(ГруппаПоказателей) = Тип("СтрокаДереваЗначений") Тогда
					ПодчиненныеЭлементы = ГруппаПоказателей.Строки;
				Иначе
					ПодчиненныеЭлементы = ГруппаПоказателей.ПолучитьЭлементы();
				КонецЕсли;
				
				ЗаполнитьНастройкиОтчета(ФормаОтчета, ПодчиненныеЭлементы, ЭлементПоказателей.Элементы, ДоступныеНастройки);
				
			ИначеЕсли ТипПоля = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
				
				ЗаголовокПоля = ЭлементПоказателей.Заголовок;
				
				Если ЗаголовокПоля = "" Тогда
					ДоступноеПоле = ДоступныеНастройки.НайтиПоле(ЭлементПоказателей.Поле);
					// Имя поля изменилось или поле было удалено.
					Если ДоступноеПоле = Неопределено Тогда
						Продолжить;
					Иначе
						ЗаголовокПоля = ДоступноеПоле.Заголовок;
					КонецЕсли;
				КонецЕсли;
				
				НовыйПоказатель = КоллекцияЭлементов.Добавить();
				НовыйПоказатель.Использование = ЭлементПоказателей.Использование;
				НовыйПоказатель.Поле          = ЭлементПоказателей.Поле;
				НовыйПоказатель.Заголовок     = ЗаголовокПоля;
				НовыйПоказатель.Папка         = Ложь;
				
				ЗаголовокПоля = ?((СложноеПредставление И ДоступноеПоле <> Неопределено), ОтчетыПлатформаКлиентСервер.ПолучитьЗаголовокПоля(ДоступноеПоле), ЗаголовокПоля);
				
			КонецЕсли;
			
			ПредставлениеПолей = ПредставлениеПолей + ?(ПредставлениеПолей = "", "", ", ") + ЗаголовокПоля;
			
		КонецЦикла;
		
		Если НЕ РодительЭлементов = Неопределено Тогда
			РодительЭлементов.ПредставлениеПолей = ПредставлениеПолей;
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияПолейГруппировкиКомпоновкиДанных") Тогда
		
		ЗаголовокГруппировки = "";
		Для Каждого ПолеГруппировки Из ОбъектНастройки Цикл
			
			Если ТипЗнч(ПолеГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступноеПоле = ДоступныеНастройки.НайтиПоле(ПолеГруппировки.Поле);
			// Имя поля изменилось или поле было удалено.
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеПолеГруппировки = КоллекцияЭлементов.Добавить();
			НовоеПолеГруппировки.Использование  = ПолеГруппировки.Использование;
			НовоеПолеГруппировки.Поле           = ПолеГруппировки.Поле;
			НовоеПолеГруппировки.ТипГруппировки = ПолеГруппировки.ТипГруппировки;
			НовоеПолеГруппировки.ТипДополнения  = ПолеГруппировки.ТипДополнения;
			НовоеПолеГруппировки.Заголовок      = ДоступноеПоле.Заголовок;
			НовоеПолеГруппировки.НачалоПериода  = ПолеГруппировки.НачалоПериода;
			НовоеПолеГруппировки.КонецПериода   = ПолеГруппировки.КонецПериода;
			
			ЗаголовокПоля = ?(ЗаголовокГруппировки = "", "", ", ") + ОтчетыПлатформаКлиентСервер.ПолучитьЗаголовокПоля(ДоступноеПоле);
			ЗаголовокГруппировки = ЗаголовокГруппировки + ЗаголовокПоля + ?(ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы, "", " " + Строка(ПолеГруппировки.ТипГруппировки));
			
		КонецЦикла;
		
		Если НЕ РодительЭлементов = Неопределено Тогда
			РодительЭлементов.Заголовок = ?(ЗаголовокГруппировки = "", НСтр("ru = 'Детальные записи'"), ЗаголовокГруппировки);
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовПорядкаКомпоновкиДанных") Тогда
		
		Если РодительЭлементов = Неопределено Тогда
			СложноеПредставление = Ложь;
		Иначе
			СложноеПредставление = (РодительЭлементов.ПоляГруппировки.Количество()>1);
		КонецЕсли;
		
		// Порядок группировок
		ПредставлениеПорядка = "";
		Для Каждого ПолеПорядка Из ОбъектНастройки Цикл
			
			Если НЕ ТипЗнч(ПолеПорядка) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступноеПоле = ДоступныеНастройки.НайтиПоле(ПолеПорядка.Поле);
			// Имя поля изменилось или поле было удалено.
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеПолеПорядка = КоллекцияЭлементов.Добавить();
			НовоеПолеПорядка.Использование     = ПолеПорядка.Использование;
			НовоеПолеПорядка.Поле              = ПолеПорядка.Поле;
			НовоеПолеПорядка.ТипУпорядочивания = ПолеПорядка.ТипУпорядочивания;
			НовоеПолеПорядка.Заголовок         = ДоступноеПоле.Заголовок;
			
			ЗаголовокПоля = ?(СложноеПредставление, ОтчетыПлатформаКлиентСервер.ПолучитьЗаголовокПоля(ДоступноеПоле), ДоступноеПоле.Заголовок);
			ЗаголовокПоля = ?(ПредставлениеПорядка = "", "", ", ") + ЗаголовокПоля;
			
			ПредставлениеПорядка = ПредставлениеПорядка + ЗаголовокПоля + ?(ПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр, " Возр", " Убыв");
			
		КонецЦикла;
		
		Если НЕ РодительЭлементов = Неопределено Тогда
			РодительЭлементов.ПредставлениеПорядка = ?(ПредставлениеПорядка = "", "Авто", ПредставлениеПорядка);
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		
		ЗаполнитьНастройкиОтчета(ФормаОтчета, КоллекцияЭлементов, ОбъектНастройки.Элементы, ОбъектНастройки.ДоступныеПоляВыбора);
		
	ИначеЕсли ТипНастройки = Тип("ОтборКомпоновкиДанных") Тогда
		
		ЗаполнитьНастройкиОтчета(ФормаОтчета, КоллекцияЭлементов, ОбъектНастройки.Элементы, ОбъектНастройки.ДоступныеПоляОтбора);
		
	ИначеЕсли ТипНастройки = Тип("ЗначенияПараметровДанныхКомпоновкиДанных")
		ИЛИ ТипНастройки = Тип("ЗначенияПараметровВыводаКомпоновкиДанных")
		ИЛИ ТипНастройки = Тип("ЗначенияПараметровВыводаГруппировкиДиаграммыКомпоновкиДанных")
		ИЛИ ТипНастройки = Тип("ЗначенияПараметровВыводаГруппировкиКомпоновкиДанных")
		ИЛИ ТипНастройки = Тип("ЗначенияПараметровВыводаГруппировкиТаблицыКомпоновкиДанных")
		ИЛИ ТипНастройки = Тип("ЗначенияПараметровВыводаДиаграммыКомпоновкиДанных")
		ИЛИ ТипНастройки = Тип("ЗначенияПараметровВыводаТаблицыКомпоновкиДанных") Тогда
			
			ЗаполнитьНастройкиОтчета(ФормаОтчета, КоллекцияЭлементов, ОбъектНастройки.Элементы, ОбъектНастройки.ДоступныеПараметры);
	// копирование данных формы
	ИначеЕсли ТипНастройки = Тип("ДанныеФормыКоллекцияЭлементовДерева") Тогда
		
		Для Каждого ТекущаяСтрока Из ОбъектНастройки Цикл
			
			НоваяСтрока = КоллекцияЭлементов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяСтрока.ПолучитьЭлементы(), ТекущаяСтрока.ПолучитьЭлементы());
			
		КонецЦикла;
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияСтрокДереваЗначений") Тогда
		
		Для Каждого ТекущаяСтрока Из ОбъектНастройки Цикл
			
			НоваяСтрока = КоллекцияЭлементов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяСтрока.ПолучитьЭлементы(), ТекущаяСтрока.Строки);
			
		КонецЦикла;
		
	ИначеЕсли ТипНастройки = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого ТекущаяСтрока Из ОбъектНастройки Цикл
			
			НоваяСтрока = КоллекцияЭлементов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
		КонецЦикла;
		
	// Добавление группы ресурсов
	ИначеЕсли ТипНастройки = Тип("КоллекцияДоступныхПолейКомпоновкиДанных") Тогда
		
		Для Каждого ТекущаяСтрока Из ОбъектНастройки Цикл
			
			НоваяСтрока = КоллекцияЭлементов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			НоваяСтрока.Использование = Истина;
		
			Если ТекущаяСтрока.Папка Тогда
				ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяСтрока.ПолучитьЭлементы(), ТекущаяСтрока.Элементы);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавление группировки диаграммы
//
// Параметры:
//  ТаблицаГруппировок - КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных - Таблица группировок отчета.
//  ПолеКомпоновки     - Произволдьный - Поле компоновки.
//  ДоступныеНастройки - ДоступныеПоляКомпоновкиДанных - Доступные настройки отчета.
//  КоличествоЗаписей  - Число - Количество допустимых записей.
// 
// Возвращаемое значение:
//  Неопределено - Возврат пустого результата действия.
//
Функция ДобавитьГруппировкуДиаграммы(ТаблицаГруппировок, ПолеКомпоновки, ДоступныеНастройки, КоличествоЗаписей) Экспорт
	
	// Добавим точки диаграммы
	ПолеДиаграммы = КомпоновщикПолучитьПолеКомпоновки(ПолеКомпоновки);
	Если НЕ ДоступныеНастройки.НайтиПоле(ПолеДиаграммы) = Неопределено Тогда
		
		НоваяГруппировка = ТаблицаГруппировок.Добавить();
		
		НовоеПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПолеГруппировки.Использование = Истина;
		НовоеПолеГруппировки.Поле          = ПолеДиаграммы;
		
		// Автоматическое поле
		ПолеРеквизитаСКД = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ПолеРеквизитаСКД.Использование = Истина;
		
		// Автоматический порядок
		ПолеПорядкаСКД = НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаСКД.Использование = Истина;
		
		Если КоличествоЗаписей > 0 Тогда
			НоваяГруппировка.ПараметрыВывода.УстановитьЗначениеПараметра("КоличествоЗаписей", КоличествоЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Добавление группировки диаграммы
//
// Параметры:
//  Параметры - КоллекцияЗначенийПараметровКомпоновкиДанных - Текущие параметры отчета.
//  ПараметрыСКД - ПараметрыСхемыКомпоновкиДанных - Параметры СКД.
//	Отказ - Булево
//
Процедура ПроверкаЗаполненияПараметровОтчета(Параметры, ПараметрыСКД, Отказ) Экспорт
	
	Для каждого Параметр Из Параметры Цикл
		
		СтрокаПараметра = ПараметрыСКД.Найти(Строка(Параметр.Параметр));
		Если СтрокаПараметра = Неопределено ИЛИ ЗначениеЗаполнено(Параметр.Значение) ИЛИ СтрокаПараметра.ЗапрещатьНезаполненныеЗначения = Ложь Тогда
			Продолжить;		
		КонецЕсли; 
		
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = 'Не заполнено значение параметра'") +
			" ""[ПредставлениеПараметра]""!", Новый Структура("ПредставлениеПараметра", СтрокаПараметра.Заголовок));
		Сообщение.Сообщить();
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПериодОтчета

// Установка видимости периода.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ВидимостьПериода(ФормаОтчета) Экспорт
	
	Произвольный = (ФормаОтчета.ВидПериода = "Произвольный");
	
	Элементы = ФормаОтчета.Элементы;
	
	Если (НЕ ФормаОтчета.ЕстьКонецПериода) И (НЕ ФормаОтчета.ЕстьНачалоПериода) Тогда
		Элементы.ОсновныеДействияПодменюПериод.Видимость = Ложь;
		Элементы.ВариантПериода.Видимость = Ложь;
		Элементы.ПериодНазад.Видимость = Ложь;
		Элементы.ПериодВперед.Видимость = Ложь;
		Элементы.НачалоПериода.Видимость = Ложь;
		Элементы.КонецПериода.Видимость = Ложь;
	Иначе
		Элементы.ОсновныеДействияПодменюПериод.Видимость = Истина;
		
		Если ФормаОтчета.ЕстьНачалоПериода Тогда
			Элементы.ОсновныеДействияПериод.Заголовок = НСтр("ru = 'Период с'");
			Элементы.КонецПериода.Подсказка = НСтр("ru = 'Окончание периода отчета'");
		Иначе
			Элементы.ОсновныеДействияПериод.Заголовок = НСтр("ru = 'На дату'")+ "  ";
			Элементы.КонецПериода.Подсказка = НСтр("ru = 'Дата формирования отчета'");
		КонецЕсли;
		
		Если Произвольный Тогда
			Элементы.ОсновныеДействияПодменюПериод.Заголовок = Элементы.ОсновныеДействияПериод.Заголовок;
		КонецЕсли;
		
		Элементы.ВариантПериода.Видимость = (НЕ Произвольный);
		Элементы.ПериодНазад.Видимость    = НЕ Произвольный ИЛИ НЕ ФормаОтчета.ЕстьНачалоПериода;
		Элементы.ПериодВперед.Видимость   = НЕ Произвольный ИЛИ НЕ ФормаОтчета.ЕстьНачалоПериода;
		Элементы.НачалоПериода.Видимость  = ФормаОтчета.ЕстьНачалоПериода И (Произвольный);
		Элементы.КонецПериода.Видимость   = ФормаОтчета.ЕстьКонецПериода И (Произвольный);
		Элементы.КонецПериода.КнопкаВыпадающегоСписка = ФормаОтчета.ЕстьКонецПериода И (Произвольный) И НЕ ФормаОтчета.ЕстьНачалоПериода;
		Элементы.КонецПериода.Ширина = ?(Элементы.КонецПериода.КнопкаВыпадающегоСписка,13,8);
		Элементы.ДекорацияКонецПериода.Видимость = ФормаОтчета.ЕстьКонецПериода И (Произвольный) И ФормаОтчета.ЕстьНачалоПериода;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОсновнаяФорма

// Заполнение быстрых настроек отчета.
//
// Параметры:
//  ФормаОтчета        - УправляемаяФорма - Форма, в которой возникло событие.
//  ОбъектНастройки    - КоллекцияЭлементовОтбораКомпоновкиДанных - Настройки объекта.
//  КоллекцияЭлементов - ДанныеФормыКоллекцияЭлементовДерева - Коллекция элементов.
//  Уровень            - Число - Уровень подчиненных.
//
Процедура ЗаполнитьБыстрыеНастройки(ФормаОтчета, ОбъектНастройки, КоллекцияЭлементов = Неопределено, Уровень = 0) Экспорт
	
	Отчет              = ФормаОтчета.Отчет;
	ГруппировкиСтрок   = ФормаОтчета.ГруппировкиСтрок;
	ГруппировкиКолонок = ФормаОтчета.ГруппировкиКолонок;
	ТипНастройки = ТипЗнч(ОбъектНастройки);
	
	УровеньПодчиненных = Уровень + 1;
	
	Если ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		
		ФормаОтчета.ГруппировкиЗапрещены = Ложь;
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки, ФормаОтчета.ГруппировкиЗапрещены, Уровень);
		
		Если ФормаОтчета.ГруппировкиЗапрещены Тогда
			ФормаОтчета.ПоказателиЗапрещены = Истина;
			Возврат;
		КонецЕсли;
		
		Если ТекущаяСтруктура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТипСтруктурыОтчета = ТипЗнч(ТекущаяСтруктура);
		
		ДеревоПоказателей = ФормаОтчета.Показатели.ПолучитьЭлементы();
		
		ЕстьРесурсы = ЕстьПоказатели(ТекущаяСтруктура.Выбор, ФормаОтчета.ПоказателиЗапрещены);
		Если ЕстьРесурсы И ДеревоПоказателей.Количество()>0 Тогда
			ФормаОтчета.ПоказателиЗапрещены = Истина;
		Иначе
			ЗаполнитьНастройкиОтчета(ФормаОтчета, ДеревоПоказателей, ТекущаяСтруктура.Выбор.Элементы, ТекущаяСтруктура.Выбор.ДоступныеПоляВыбора);
		КонецЕсли;
		
		ПараметрОформления = ТекущаяСтруктура.ПараметрыВывода.Элементы.Найти("МакетОформления");
		Если (НЕ ПараметрОформления = Неопределено) И ПараметрОформления.Использование Тогда
			ФормаОтчета.ИмяОформлениеТаблицы = ПараметрОформления.Значение;
		КонецЕсли;
		
		ПараметрТипДиаграммы = ТекущаяСтруктура.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
		Если НЕ ПараметрТипДиаграммы = Неопределено И ПараметрТипДиаграммы.Использование Тогда
			ФормаОтчета.ТипДиаграммыОтчета      = СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ПараметрТипДиаграммы.Значение), "ТипДиаграммы.", "");
			ФормаОтчета.ОтображатьТаблицуДанных = ПараметрТипДиаграммы.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ОтображатьТаблицуДанных").Значение;
			ФормаОтчета.ВидПодписей             = ПолучитьПолноеИмяПредопределенногоЗначения(ПараметрТипДиаграммы.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ВидПодписей").Значение);
		КонецЕсли;
		
		Если ТипСтруктурыОтчета = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если НЕ ФормаОтчета.ВидОтчета = 3 Тогда
				ФормаОтчета.ВидОтчета = 0;
			КонецЕсли;
			ЗаполнитьБыстрыеНастройки(ФормаОтчета, ТекущаяСтруктура.Строки,  ГруппировкиСтрок, УровеньПодчиненных);
			ЗаполнитьБыстрыеНастройки(ФормаОтчета, ТекущаяСтруктура.Колонки, ГруппировкиКолонок, УровеньПодчиненных);
			ЗаполнитьНастройкиОтчета(ФормаОтчета, ФормаОтчета.ПараметрыВыводаТаблицы.ПолучитьЭлементы(), ТекущаяСтруктура.ПараметрыВывода.Элементы, ТекущаяСтруктура.ПараметрыВывода.ДоступныеПараметры);
			// Условное оформление
			ФормаОтчета.УсловноеОформлениеТаблицы = ТекущаяСтруктура.УсловноеОформление;
		ИначеЕсли ТипСтруктурыОтчета = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Если НЕ ФормаОтчета.ВидОтчета = 2 Тогда
				ФормаОтчета.ВидОтчета = 1;
			КонецЕсли;
			ЗаполнитьБыстрыеНастройки(ФормаОтчета, ТекущаяСтруктура.Серии, ГруппировкиКолонок, УровеньПодчиненных);
			ЗаполнитьБыстрыеНастройки(ФормаОтчета, ТекущаяСтруктура.Точки, ГруппировкиСтрок, УровеньПодчиненных);
			ЗаполнитьНастройкиОтчета(ФормаОтчета, ФормаОтчета.ПараметрыВыводаДиаграммы.ПолучитьЭлементы(), ТекущаяСтруктура.ПараметрыВывода.Элементы, ТекущаяСтруктура.ПараметрыВывода.ДоступныеПараметры);
			// Условное оформление
			ФормаОтчета.УсловноеОформлениеТаблицы = ТекущаяСтруктура.УсловноеОформление;
		Иначе
			Если НЕ ФормаОтчета.ВидОтчета = 3 Тогда
				ФормаОтчета.ВидОтчета = 0;
			КонецЕсли;
			ЗаполнитьБыстрыеНастройки(ФормаОтчета, ТекущаяСтруктура, ГруппировкиСтрок, УровеньПодчиненных);
			ЗаполнитьНастройкиОтчета(ФормаОтчета, ФормаОтчета.ПараметрыВыводаТаблицы.ПолучитьЭлементы(), ТекущаяСтруктура.ПараметрыВывода.Элементы, ТекущаяСтруктура.ПараметрыВывода.ДоступныеПараметры);
			// Условное оформление
			ФормаОтчета.УсловноеОформлениеТаблицы = ТекущаяСтруктура.УсловноеОформление;
		КонецЕсли;
		
		// Заполним элементы для диаграммы
		
		Если НЕ ФормаОтчета.ПоказателиЗапрещены Тогда 
			
			СтрокаПоказателя = ОтчетыПлатформаКлиентСервер.ПолучитьПоказатель(ДеревоПоказателей);
			Если НЕ СтрокаПоказателя = Неопределено Тогда
				
				ДоступноеПолеПоказателя = ТекущаяСтруктура.Выбор.ДоступныеПоляВыбора.НайтиПоле(СтрокаПоказателя.Поле);
				Если ДоступноеПолеПоказателя = Неопределено Тогда
					ПоказательЗаголовок = СтрокаПоказателя.Заголовок;
				Иначе
					ПоказательЗаголовок = ОтчетыПлатформаКлиентСервер.ПолучитьЗаголовокПоля(ДоступноеПолеПоказателя);
				КонецЕсли;
				
				ФормаОтчета.Показатель          = СтрокаПоказателя.Поле;
				ФормаОтчета.ПоказательЗаголовок = ПоказательЗаголовок;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ФормаОтчета.ГруппировкиЗапрещены Тогда
			
			Для Каждого ТекущаяСтрока Из ГруппировкиСтрок Цикл
				
				Если НЕ ТекущаяСтрока.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаГруппировки = Неопределено;
				Для Каждого ТекущееПоле Из ТекущаяСтрока.ПоляГруппировки Цикл
					Если ТекущееПоле.Использование Тогда
						СтрокаГруппировки = ТекущееПоле;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ СтрокаГруппировки = Неопределено Тогда
					ФормаОтчета.Точки                  = СтрокаГруппировки.Поле;
					ФормаОтчета.ТочкиЗаголовок         = СтрокаГруппировки.Заголовок;
					ФормаОтчета.КоличествоЗаписейТочек = ТекущаяСтрока.КоличествоЗаписей;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ТекущаяСтрока Из ГруппировкиКолонок Цикл
				
				Если НЕ ТекущаяСтрока.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаГруппировки = Неопределено;
				Для Каждого ТекущееПоле Из ТекущаяСтрока.ПоляГруппировки Цикл
					Если ТекущееПоле.Использование Тогда
						СтрокаГруппировки = ТекущееПоле;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ СтрокаГруппировки = Неопределено Тогда
					ФормаОтчета.Серии                  = СтрокаГруппировки.Поле;
					ФормаОтчета.СерииЗаголовок         = СтрокаГруппировки.Заголовок;
					ФормаОтчета.КоличествоЗаписейСерий = ТекущаяСтрока.КоличествоЗаписей;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ФормаОтчета.СерииЗаголовок = "" Тогда
				СчетчикГруппировки = 0;
				Для Каждого ТекущаяСтрока Из ГруппировкиСтрок Цикл
					
					Если НЕ ТекущаяСтрока.Использование Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаГруппировки = Неопределено;
					Для Каждого ТекущееПоле Из ТекущаяСтрока.ПоляГруппировки Цикл
						Если ТекущееПоле.Использование Тогда
							СтрокаГруппировки = ТекущееПоле;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ СтрокаГруппировки = Неопределено Тогда
						Если СчетчикГруппировки = 0 Тогда
							СчетчикГруппировки = 1;
						Иначе
							ФормаОтчета.Серии                  = СтрокаГруппировки.Поле;
							ФормаОтчета.СерииЗаголовок         = СтрокаГруппировки.Заголовок;
							ФормаОтчета.КоличествоЗаписейСерий = ТекущаяСтрока.КоличествоЗаписей;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		ЗаполнитьБыстрыеНастройки(ФормаОтчета, ОбъектНастройки.Строки, ГруппировкиСтрок, УровеньПодчиненных);
		ЗаполнитьБыстрыеНастройки(ФормаОтчета, ОбъектНастройки.Колонки, ГруппировкиКолонок, УровеньПодчиненных);
		ЗаполнитьНастройкиОтчета(ФормаОтчета, ФормаОтчета.ПараметрыВыводаТаблицы.ПолучитьЭлементы(), ОбъектНастройки.ПараметрыВывода.Элементы, ОбъектНастройки.ПараметрыВывода.ДоступныеПараметры);
		
		ФормаОтчета.ПоказателиЗапрещены = ЕстьПоказатели(ОбъектНастройки.Выбор, ФормаОтчета.ПоказателиЗапрещены);
		
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		ЗаполнитьБыстрыеНастройки(ФормаОтчета, ОбъектНастройки.Серии, ГруппировкиСтрок, УровеньПодчиненных);
		ЗаполнитьБыстрыеНастройки(ФормаОтчета, ОбъектНастройки.Точки, ГруппировкиКолонок, УровеньПодчиненных);
		ЗаполнитьНастройкиОтчета(ФормаОтчета, ФормаОтчета.ПараметрыВыводаДиаграммы.ПолучитьЭлементы(), ОбъектНастройки.ПараметрыВывода.Элементы, ОбъектНастройки.ПараметрыВывода.ДоступныеПараметры);
		
		ФормаОтчета.ПоказателиЗапрещены = ЕстьПоказатели(ОбъектНастройки.Выбор, ФормаОтчета.ПоказателиЗапрещены);
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		
		ФормаОтчета.ГруппировкиЗапрещены = Ложь;
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки, ФормаОтчета.ГруппировкиЗапрещены, Уровень);
		Если ТекущаяСтруктура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьБыстрыеНастройки(ФормаОтчета, ТекущаяСтруктура, КоллекцияЭлементов, УровеньПодчиненных);
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		
		ФормаОтчета.ГруппировкиЗапрещены = Ложь;
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки, ФормаОтчета.ГруппировкиЗапрещены, Уровень);
		Если ТекущаяСтруктура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьБыстрыеНастройки(ФормаОтчета, ТекущаяСтруктура, КоллекцияЭлементов, УровеньПодчиненных);
		
	ИначеЕсли ТипНастройки = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		
		НоваяГруппировка = КоллекцияЭлементов.Добавить();
		НоваяГруппировка.Использование = ОбъектНастройки.Использование;
		
		ПараметрВывода = ОбъектНастройки.ПараметрыВывода.Элементы.Найти("КоличествоЗаписей");
		Если НЕ ПараметрВывода = Неопределено И ПараметрВывода.Использование Тогда
			НоваяГруппировка.КоличествоЗаписей = ПараметрВывода.Значение;
		КонецЕсли;
		
		// Параметры вывода группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПараметрыВывода.ПолучитьЭлементы(), ОбъектНастройки.ПараметрыВывода.Элементы, ОбъектНастройки.ПараметрыВывода.ДоступныеПараметры);
		// Поля группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПоляГруппировки, ОбъектНастройки.ПоляГруппировки.Элементы, ОбъектНастройки.ПоляГруппировки.ДоступныеПоляПолейГруппировок, НоваяГруппировка);
		// Реквизиты группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Выбор.ПолучитьЭлементы(), ОбъектНастройки.Выбор.Элементы, ОбъектНастройки.Выбор.ДоступныеПоляВыбора);
		// Порядок группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Порядок, ОбъектНастройки.Порядок.Элементы, ОбъектНастройки.Порядок.ДоступныеПоляПорядка);
		// Условное оформление
		НоваяГруппировка.УсловноеОформление = ОбъектНастройки.УсловноеОформление;
		
		НоваяГруппировка.Отбор = ОбъектНастройки.Отбор;
		
		// Переход на нижнюю группировку
		ФормаОтчета.ГруппировкиЗапрещены = Ложь;
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки.Структура, ФормаОтчета.ГруппировкиЗапрещены, Уровень);
		Если ТекущаяСтруктура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьБыстрыеНастройки(ФормаОтчета, ТекущаяСтруктура, КоллекцияЭлементов, УровеньПодчиненных);
		
	ИначеЕсли ТипНастройки = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		НоваяГруппировка = КоллекцияЭлементов.Добавить();
		НоваяГруппировка.Использование = ОбъектНастройки.Использование;
		
		ПараметрВывода = ОбъектНастройки.ПараметрыВывода.Элементы.Найти("КоличествоЗаписей");
		Если НЕ ПараметрВывода = Неопределено И ПараметрВывода.Использование Тогда
			НоваяГруппировка.КоличествоЗаписей = ПараметрВывода.Значение;
		КонецЕсли;
		
		// Параметры вывода группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПараметрыВывода.ПолучитьЭлементы(), ОбъектНастройки.ПараметрыВывода.Элементы, ОбъектНастройки.ПараметрыВывода.ДоступныеПараметры);
		// Поля группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПоляГруппировки, ОбъектНастройки.ПоляГруппировки.Элементы, ОбъектНастройки.ПоляГруппировки.ДоступныеПоляПолейГруппировок, НоваяГруппировка);
		// Реквизиты группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Выбор.ПолучитьЭлементы(), ОбъектНастройки.Выбор.Элементы, ОбъектНастройки.Выбор.ДоступныеПоляВыбора);
		// Порядок группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Порядок, ОбъектНастройки.Порядок.Элементы, ОбъектНастройки.Порядок.ДоступныеПоляПорядка);
		// Условное оформление
		НоваяГруппировка.УсловноеОформление = ОбъектНастройки.УсловноеОформление;
		
		НоваяГруппировка.Отбор = ОбъектНастройки.Отбор;
		
		// Переход на нижнюю группировку
		ФормаОтчета.ГруппировкиЗапрещены = Ложь;
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки.Структура, ФормаОтчета.ГруппировкиЗапрещены, Уровень);
		Если ТекущаяСтруктура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьБыстрыеНастройки(ФормаОтчета, ТекущаяСтруктура, КоллекцияЭлементов, УровеньПодчиненных);
		
	ИначеЕсли ТипНастройки = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		НоваяГруппировка = КоллекцияЭлементов.Добавить();
		НоваяГруппировка.Использование = ОбъектНастройки.Использование;
		
		ПараметрВывода = ОбъектНастройки.ПараметрыВывода.Элементы.Найти("КоличествоЗаписей");
		Если НЕ ПараметрВывода = Неопределено И ПараметрВывода.Использование Тогда
			НоваяГруппировка.КоличествоЗаписей = ПараметрВывода.Значение;
		КонецЕсли;
		
		// Параметры вывода группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПараметрыВывода.ПолучитьЭлементы(), ОбъектНастройки.ПараметрыВывода.Элементы, ОбъектНастройки.ПараметрыВывода.ДоступныеПараметры);
		// Поля группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПоляГруппировки, ОбъектНастройки.ПоляГруппировки.Элементы, ОбъектНастройки.ПоляГруппировки.ДоступныеПоляПолейГруппировок, НоваяГруппировка);
		// Реквизиты группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Выбор.ПолучитьЭлементы(), ОбъектНастройки.Выбор.Элементы, ОбъектНастройки.Выбор.ДоступныеПоляВыбора);
		// Порядок группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Порядок, ОбъектНастройки.Порядок.Элементы, ОбъектНастройки.Порядок.ДоступныеПоляПорядка);
		// Условное оформление
		НоваяГруппировка.УсловноеОформление = ОбъектНастройки.УсловноеОформление;
		
		НоваяГруппировка.Отбор = ОбъектНастройки.Отбор;
		
		ФормаОтчета.ГруппировкиЗапрещены = Ложь;
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки.Структура, ФормаОтчета.ГруппировкиЗапрещены, Уровень);
		Если ТекущаяСтруктура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьБыстрыеНастройки(ФормаОтчета, ТекущаяСтруктура, КоллекцияЭлементов, УровеньПодчиненных);
		
	Иначе
		
		ЗаполнитьНастройкиОтчета(ФормаОтчета, КоллекцияЭлементов, ОбъектНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение формата параметров.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки отчета.
//
Процедура ЗаполнитьФорматПараметров(СхемаКомпоновкиДанных) Экспорт
	
	ПараметрОтчета = СхемаКомпоновкиДанных.Параметры.Найти("НачалоПериода");
	Если Не ПараметрОтчета = Неопределено Тогда
		
		ПараметрФормата = ПараметрОтчета.ПараметрыРедактирования.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ФорматРедактирования"));
		Если (НЕ ПараметрФормата = Неопределено) И (НЕ ПараметрФормата.Использование) Тогда
			ПараметрФормата.Использование = Истина;
			ПараметрФормата.Значение = "ДЛФ=D";
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрОтчета = СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
	Если Не ПараметрОтчета = Неопределено Тогда
		
		ПараметрФормата = ПараметрОтчета.ПараметрыРедактирования.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ФорматРедактирования"));
		Если (НЕ ПараметрФормата = Неопределено) И (НЕ ПараметрФормата.Использование) Тогда
			ПараметрФормата.Использование = Истина;
			ПараметрФормата.Значение = "ДЛФ=D";
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрОтчета = СхемаКомпоновкиДанных.Параметры.Найти("Период");
	Если Не ПараметрОтчета = Неопределено Тогда
		
		ПараметрФормата = ПараметрОтчета.ПараметрыРедактирования.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ФорматРедактирования"));
		Если (НЕ ПараметрФормата = Неопределено) И (НЕ ПараметрФормата.Использование) Тогда
			ПараметрФормата.Использование = Истина;
			ПараметрФормата.Значение = "ДЛФ=D";
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрОтчета = СхемаКомпоновкиДанных.Параметры.Найти("ПериодГраница");
	Если Не ПараметрОтчета = Неопределено Тогда
		
		ПараметрФормата = ПараметрОтчета.ПараметрыРедактирования.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ФорматРедактирования"));
		Если (НЕ ПараметрФормата = Неопределено) И (НЕ ПараметрФормата.Использование) Тогда
			ПараметрФормата.Использование = Истина;
			ПараметрФормата.Значение = "ДЛФ=D";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Заполнить отбор организация подразделение
//
// Параметры:
//  ДеревоОтбор     - ДанныеФормыКоллекцияЭлементовДерева     - Отбор отчета.
//  ДоступныеОтборы - КоллекцияДоступныхПолейКомпоновкиДанных - Доступные поля отбора.
//
Процедура ЗаполнитьОтборОрганизацияПодразделение(ДеревоОтбор, ДоступныеОтборы) Экспорт
	
	Если ДеревоОтбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДеревоОтбор) = Тип("ДанныеФормыДерево") Тогда
		ДеревоОтбор = ДеревоОтбор.ПолучитьЭлементы();
	КонецЕсли;
	
	ОтборПоОрганизации       =  ПраваИНастройкиПользователя.Значение("УстанавливатьОтборОрганизацияВОтчетах");
	ОтборПоПодразделению     =  ПраваИНастройкиПользователя.Значение("УстанавливатьОтборПодразделениеВОтчетах");
	ЕстьОтборПоОрганизации   = Ложь;
	ЕстьОтборПоПодразделению = Ложь;
	ТекущийПользователь      = Пользователи.ТекущийПользователь();
	
	ОтборПоОрганизацииСнимаемый   = ПраваИНастройкиПользователя.Значение("РазрешитьИзменениеОтбораПоОрганизации");
	ОтборПоПодразделениюСнимаемый = ПраваИНастройкиПользователя.Значение("РазрешитьИзменениеОтбораПоПодразделению");
	
	Если НЕ ОтборПоОрганизации И НЕ ОтборПоПодразделению Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ДеревоОтбор Цикл
		
		Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			
			Если ОтборПоОрганизации Тогда
				
				// проверим а не установил ли пользователь уже свой отбор
				Если НЕ ЗначениеЗаполнено(Элемент.ПравоеЗначение) ИЛИ НЕ ОтборПоОрганизацииСнимаемый Тогда
					Элемент.ПравоеЗначение = ТекущийПользователь.Организация;
					Элемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					Элемент.Использование  = Истина;
					Элемент.Заголовок      = ДоступныеОтборы.Найти(Элемент.ЛевоеЗначение).Заголовок;
				КонецЕсли;
				
				ЕстьОтборПоОрганизации = Истина;
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение")
			ИЛИ Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеКомпании") Тогда
			
			Если ОтборПоПодразделению Тогда
				
				Если НЕ ЗначениеЗаполнено(Элемент.ПравоеЗначение) ИЛИ НЕ ОтборПоПодразделениюСнимаемый Тогда
					Элемент.ПравоеЗначение     = ТекущийПользователь.ПодразделениеКомпании;
					Элемент.Использование      = Истина;
					Элемент.ВидСравнения       = ВидСравненияКомпоновкиДанных.Равно;
					Элемент.Заголовок      	   = ДоступныеОтборы.Найти(Элемент.ЛевоеЗначение).Заголовок
				КонецЕсли;
				
				ЕстьОтборПоПодразделению = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтборПоОрганизации И НЕ ЕстьОтборПоОрганизации Тогда
		// ищем в дереве доступных отборов и добавляем
		Для Каждого Элемент Из ДоступныеОтборы Цикл			
			Если Элемент.Поле = Новый ПолеКомпоновкиДанных("Организация") Тогда
				
				Отбор = ДеревоОтбор.Добавить();
				Отбор.ЛевоеЗначение = Элемент.Поле;
				Отбор.Заголовок = Элемент.Заголовок;
				Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				Отбор.ПравоеЗначение = ТекущийПользователь.Организация;
				Отбор.Использование = Истина;
				Прервать;
				
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
	Если ОтборПоПодразделению И НЕ ЕстьОтборПоПодразделению Тогда
		// ищем в дереве доступных отборов и добавляем
		Для Каждого Элемент Из ДоступныеОтборы Цикл
			Если Элемент.Поле = Новый ПолеКомпоновкиДанных("Подразделение")
			 ИЛИ Элемент.Поле = Новый ПолеКомпоновкиДанных("ПодразделениеКомпании") Тогда
				
				Отбор = ДеревоОтбор.Добавить();
				Отбор.ЛевоеЗначение = Элемент.Поле;
				Отбор.Заголовок = Элемент.Заголовок;
				Отбор.ПравоеЗначение = ТекущийПользователь.ПодразделениеКомпании;
				Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				Отбор.Использование = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Установка условного оформления отбора организация подразделение
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ДобавитьУсловноеОформлениеОтборОрганизацияПодразделение(ФормаОтчета) Экспорт
		
	ОтборПоОрганизацииСнимаемый   = ПраваИНастройкиПользователя.Значение("РазрешитьИзменениеОтбораПоОрганизации");
	ОтборПоПодразделениюСнимаемый = ПраваИНастройкиПользователя.Значение("РазрешитьИзменениеОтбораПоПодразделению");
	
	Если НЕ ОтборПоОрганизацииСнимаемый ИЛИ НЕ ОтборПоПодразделениюСнимаемый Тогда
		
		// ТолькоПросмотр	
		ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборИспользование.Имя);
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборЗаголовок.Имя);
		Если ФормаОтчета.Элементы.Найти("ОтборВидСравнения") <> Неопределено Тогда
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборВидСравнения.Имя);
		КонецЕсли;
		Если ФормаОтчета.Элементы.Найти("ОтборПравоеЗначение") <> Неопределено Тогда
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборПравоеЗначение.Имя);
		КонецЕсли;
		
		ГруппаИлиОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИлиОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		Если НЕ ОтборПоОрганизацииСнимаемый Тогда
			ОтборЭлемента = ГруппаИлиОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Заголовок");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = "Организация";	
		КонецЕсли;
		
		Если НЕ ОтборПоПодразделениюСнимаемый Тогда
			ОтборЭлемента = ГруппаИлиОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Заголовок");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = "Подразделение";
			ОтборЭлемента = ГруппаИлиОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Заголовок");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = "Подразделение компании";
		КонецЕсли;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Установка условного оформления.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура УстановитьУсловноеОформлениеОсновнаяФорма(ФормаОтчета) Экспорт
	
	ФормаОтчета.УсловноеОформление.Элементы.Очистить();
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборТипГруппы.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборИспользованиеГруппы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборТипГруппы.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборИспользованиеГруппы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборЗаголовок.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборПравоеЗначение.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборИспользование.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборЗаголовок.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборПравоеЗначение.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборИспользование.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Шрифт
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ПоказателиЗаголовок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Показатели.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборПравоеЗначение.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.ВыводитьТолькоЗаголовок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборПравоеЗначение.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.ВыводитьТолькоЗаголовок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//ФормаСохранитьТекущиеПараметрыКакСтандартные
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаОтчета.Элементы,
		"ФормаСохранитьТекущиеПараметрыКакСтандартные",
		"Видимость",
		ПраваИНастройкиПользователя.Значение("СохранениеСтандартныхПараметровПечати") И ПравоДоступа("Вывод", Метаданные));
	
	Если НЕ ФормаОтчета.Элементы.Найти("ФормаСохранитьКакСтандартныеПараметры") = Неопределено Тогда
		ФормаОтчета.Элементы.ФормаСохранитьКакСтандартныеПараметры.Видимость =  
			ПраваИНастройкиПользователя.Значение("СохранениеСтандартныхПараметровПечати") 
			И ПравоДоступа("Вывод", Метаданные);;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаОтчета.Элементы,
		"ФормаУстановитьСтандартныеПараметры",
		"Доступность",
		ПравоДоступа("Вывод", Метаданные));
	
	Если НЕ ФормаОтчета.Элементы.Найти("ФормаУстановитьСтандартныеПараметры") = Неопределено Тогда
		ФормаОтчета.Элементы.ФормаУстановитьСтандартныеПараметры.Доступность = ПравоДоступа("Вывод",Метаданные);
	КонецЕсли;
	
	ДобавитьУсловноеОформлениеОтборОрганизацияПодразделение(ФормаОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область КраткаяФорма

// Заполняем настройки таблицы из несвязанных элементов формы отчета
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура ЗаполнитьНастройкиТаблицыИзСтраницы(ФормаОтчета) Экспорт
	
	Элементы = ФормаОтчета.Элементы;
	
	ТекущаяСтрока = Элементы.СписокТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиТаблицы = ФормаОтчета.СписокТаблиц.НайтиПоИдентификатору(ТекущаяСтрока);
	
	// Заполним показатели
	ДеревоПоказателей = ФормаОтчета.Показатели.ПолучитьЭлементы();
	Если ДеревоПоказателей.Количество()>0 Тогда
		ПоказателиТаблицы = НастройкиТаблицы.Показатели.ПолучитьЭлементы();
		ПоказателиТаблицы.Очистить();
		ЗаполнитьНастройкиОтчета(ФормаОтчета, ПоказателиТаблицы, ДеревоПоказателей);
	КонецЕсли;
	
	Если НЕ НастройкиТаблицы = Неопределено Тогда
		Для Каждого ТекущееОформление Из Элементы.ГруппаОформлениеТаблицы.ПодчиненныеЭлементы Цикл
			Если ТекущееОформление.Пометка Тогда
				НастройкиТаблицы.ОформлениеТаблицы = СтрЗаменить(ТекущееОформление.Имя, "Оформление", "");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НастройкиТаблицы.РеквизитыОтдельно = Элементы.ТаблицаРеквизитыОтдельно.Пометка;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНастройкиТаблицыИзСтраницы()

// При переходе на следующую страницу перемещаем таблицы структуры отчета
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма, в которой возникло событие.
//  ИндексСтраницы - Число - Индекс страницы.
//
Процедура ПереместитьТаблицуОтчета(ФормаОтчета, ИндексСтраницы) Экспорт
	
	// сохраняем несвязанные поля формы в таблицу отчета
	ЗаполнитьНастройкиТаблицыИзСтраницы(ФормаОтчета);
	
	Элементы = ФормаОтчета.Элементы;
	
	ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы[ИндексСтраницы];
	
	Для Каждого ТекущийЭлемент Из ТекущаяСтраница.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ТекущийЭлемент) = Тип("ДекорацияФормы") Тогда
			
			// Если прошлая страница это шаблон, то не будем на нее перемещать декорацию
			Если Элементы.Страницы.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаСтруктураТаблицы.Родитель) = 0 Тогда
				Элементы.Удалить(ТекущийЭлемент);
			Иначе
				Элементы.Переместить(ТекущийЭлемент, Элементы.ГруппаСтруктураТаблицы.Родитель);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьНастройкиСтраницыИзТаблицы(ФормаОтчета);
	
	Элементы.Переместить(Элементы.ГруппаСтруктураТаблицы, ТекущаяСтраница);
	
КонецПроцедуры // ПереместитьТаблицуОтчета()

// Добавляем новую таблицу отчета
//
// Параметры:
//  ФормаОтчета               - УправляемаяФорма - Форма, в которой возникло событие.
//  ВидТаблицы                - Строка           - Вид выввода результата.
//  УстановитьТекущуюСтраницу - Булево           - Установка текущей страницы.
// 
// Возвращаемое значение:
//  Строка - Идентификатор строки таблицы.
//
Функция ДобавитьТаблицуОтчета(ФормаОтчета, ВидТаблицы = "Таблица", УстановитьТекущуюСтраницу = Истина) Экспорт
	
	ИдентификаторТаблицы = "Таблица" + Строка(ФормаОтчета.КоличествоТаблиц);
	
	ФормаОтчета.ИдентификаторТаблицы = ИдентификаторТаблицы;
	
	Элементы = ФормаОтчета.Элементы;
	КоличествоТаблиц = ФормаОтчета.КоличествоТаблиц;
	
	НоваяТаблица = ФормаОтчета.СписокТаблиц.Добавить();
	НоваяТаблица.Использование = Истина;
	НоваяТаблица.Идентификатор = ИдентификаторТаблицы;
	НоваяТаблица.ВидТаблицы    = ВидТаблицы;
	НоваяТаблица.Заголовок     = ВидТаблицы + " №" + Строка(КоличествоТаблиц);
	НоваяТаблица.НомерТаблицы  = КоличествоТаблиц;
	
	НоваяСтраница = Элементы.Добавить(ИдентификаторТаблицы, Тип("ГруппаФормы"), Элементы.Страницы);
	НоваяСтраница.Вид       = ВидГруппыФормы.Страница;
	НоваяСтраница.Заголовок = НоваяТаблица.Заголовок;
	
	Если ВидТаблицы = "Таблица" Тогда
		НоваяСтраница.Картинка = БиблиотекаКартинок.ОтчетТаблица;
	ИначеЕсли ВидТаблицы = "Диаграмма" Тогда
		НоваяСтраница.Картинка = БиблиотекаКартинок.Диаграмма;
	КонецЕсли;
	
	Если УстановитьТекущуюСтраницу Тогда
		
		ЗаполнитьНастройкиТаблицыИзСтраницы(ФормаОтчета);
		
		ДеревоПоказателей = ФормаОтчета.Показатели.ПолучитьЭлементы();
		ДеревоПоказателей.Очистить();
		
		Элементы.Переместить(НоваяСтраница, Элементы.Страницы, Элементы.ДобавитьТаблицу);
		Элементы.Страницы.ТекущаяСтраница = НоваяСтраница;
		
		ПустаяДекорация = Элементы.Добавить("Декорация"+ИдентификаторТаблицы, Тип("ДекорацияФормы"), Элементы.ГруппаСтруктураТаблицы.Родитель);
		
		Элементы.Переместить(Элементы.ГруппаСтруктураТаблицы, НоваяСтраница);
		
	Иначе
		
		ПустаяДекорация = Элементы.Добавить("Декорация"+ИдентификаторТаблицы, Тип("ДекорацияФормы"), НоваяСтраница);
		
	КонецЕсли;
	
	Счетчик = 1;
	Для Каждого ТекущаяСтрока Из ФормаОтчета.СписокТаблиц Цикл
		ТекущаяСтрока.Заголовок    = ТекущаяСтрока.ВидТаблицы + " №" + Строка(Счетчик);
		ТекущаяСтрока.НомерТаблицы = Счетчик;
		
		Элементы[ТекущаяСтрока.Идентификатор].Заголовок = ТекущаяСтрока.Заголовок;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ДоступностьУдаления = ФормаОтчета.СписокТаблиц.Количество() > 1;
	Элементы.ТаблицаПредыдущая.Доступность = ДоступностьУдаления;
	Элементы.ТаблицаСледующая.Доступность  = ДоступностьУдаления;
	Элементы.ТаблицаУдалить.Доступность    = ДоступностьУдаления;
	
	ФормаОтчета.КоличествоТаблиц = КоличествоТаблиц + 1;
	
	Возврат НоваяТаблица.ПолучитьИдентификатор();
	
КонецФункции

// Загрузка настроек из СКД в краткую форму отчета
//
// Параметры:
//  ФормаОтчета  - УправляемаяФорма - Форма, в которой возникло событие.
//  Настройки    - НастройкиКомпоновкиДанных - Настройки отчета.
//  РежимЭксперт - Булево - Признак варианта настройки отчета.
//
Процедура ОбновитьНастройкиОтчета(ФормаОтчета, Настройки, РежимЭксперт) Экспорт
	
	Элементы = ФормаОтчета.Элементы;
	
	// Переместим структуру отчета на страницу шаблона
	ПереместитьТаблицуОтчета(ФормаОтчета, 0);
	
	ФормаОтчета.КоличествоТаблиц = 1;
	КоличествоСтраниц = Элементы.Страницы.ПодчиненныеЭлементы.Количество()-2;
	Пока КоличествоСтраниц > 0 Цикл
		Элементы.Удалить(Элементы.Страницы.ПодчиненныеЭлементы[КоличествоСтраниц]);
		КоличествоСтраниц = КоличествоСтраниц - 1;
	КонецЦикла;
	
	ДеревоОтбор           = ФормаОтчета.Отбор.ПолучитьЭлементы();
	ДеревоПоказателей     = ФормаОтчета.Показатели.ПолучитьЭлементы();
//	ДеревоПараметрыДанных = ФормаОтчета.ПараметрыДанных.ПолучитьЭлементы();
	
	ДеревоОтбор.Очистить();
	ДеревоПоказателей.Очистить();
	//ДеревоПараметрыДанных.Очистить();
	
	ФормаОтчета.СписокТаблиц.Очистить();
	
	ЗаполнитьНастройкиОтчета(ФормаОтчета, ДеревоОтбор, Настройки.Отбор.Элементы, Настройки.Отбор.ДоступныеПоляОтбора);
	//ЗаполнитьНастройкиОтчета(ФормаОтчета,
	//	ДеревоПараметрыДанных,
	//	Настройки.ПараметрыДанных.Элементы,
	//	Настройки.ПараметрыДанных.ДоступныеПараметры);
	ЗаполнитьНастройкиОтчета(ФормаОтчета, ДеревоПоказателей, Настройки.Выбор.Элементы, Настройки.Выбор.ДоступныеПоляВыбора);
	ЗаполнитьСтруктуруОтчета(ФормаОтчета, Настройки.Структура,, РежимЭксперт);
	
	Элементы.Переместить(Элементы.ДобавитьТаблицу, Элементы.Страницы);
	
	// Очистим вспомогательное дерево
	ДеревоПоказателей.Очистить();
	Если Элементы.Страницы.ПодчиненныеЭлементы.Количество()>2 Тогда
		
		// Установим идентификатор от первой таблицы
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы[1];
		
		ИдентификаторТаблицы = Элементы.Страницы.ТекущаяСтраница.Имя;
		Если ИдентификаторТаблицы = "СтраницаШаблон" Тогда
			ИдентификаторТаблицы = "";
		КонецЕсли;
		
		ФормаОтчета.ИдентификаторТаблицы = ИдентификаторТаблицы;
		
		// Установим строку списка таблиц по идентификатору
		СтрокиТаблицы = ФормаОтчета.СписокТаблиц.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторТаблицы));
		Если СтрокиТаблицы.Количество()>0 Тогда
			ТекущаяСтрока = СтрокиТаблицы[0];
			Элементы.СписокТаблиц.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
			ВыбратьВидТаблицы(ФормаОтчета, ТекущаяСтрока.ВидТаблицы, ТекущаяСтрока.НомерТаблицы);
			
			МакетОформления = БиблиотекаМакетовОформленияКомпоновкиДанных[0];
			
			Если Не ПустаяСтрока(ТекущаяСтрока.ОформлениеТаблицы) Тогда
				
				МакетОформления = БиблиотекаМакетовОформленияКомпоновкиДанных.Найти(ТекущаяСтрока.ОформлениеТаблицы);
				
				Если МакетОформления = Неопределено Тогда
					
					МакетОформления = БиблиотекаМакетовОформленияКомпоновкиДанных[0];
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИмяОформления = "Оформление" + МакетОформления.Имя;
			Для Каждого ТекущееОформление Из Элементы.ГруппаОформлениеТаблицы.ПодчиненныеЭлементы Цикл
				
				ТекущееОформление.Пометка = Ложь;
				Если ТекущееОформление.Имя = ИмяОформления Тогда
					ТекущееОформление.Пометка = Истина;
					Элементы.ГруппаОформлениеТаблицы.Заголовок = МакетОформления.Представление;
				КонецЕсли;
				
			КонецЦикла;
			
			ЭтоДвухмернаяДиаграмма = ОтчетыПлатформаКлиентСервер.ДвухмернаяДиаграмма(ТекущаяСтрока.ТипДиаграммы);
			Элементы.Точки.Доступность                  = ЭтоДвухмернаяДиаграмма;
			Элементы.КоличествоЗаписейТочек.Доступность = ЭтоДвухмернаяДиаграмма;
			
		КонецЕсли;
		
		// Переместим структуру отчета на первую страницу
		ПереместитьТаблицуОтчета(ФормаОтчета, 1);
		
	КонецЕсли;
	
	ДоступностьУдаления = ФормаОтчета.СписокТаблиц.Количество() > 1;
	Элементы.ТаблицаПредыдущая.Доступность = ДоступностьУдаления;
	Элементы.ТаблицаСледующая.Доступность  = ДоступностьУдаления;
	Элементы.ТаблицаУдалить.Доступность    = ДоступностьУдаления;
	
	//Если ДеревоПараметрыДанных.Количество() = 0 Тогда
	//	Элементы.ГруппаПараметры.Видимость = Ложь;
	//Иначе
	//	Элементы.ГруппаПараметры.Видимость = Истина;
	//КонецЕсли;
	
	ОтчетыПлатформаКлиентСервер.ОбновитьВариантыПериодов(ФормаОтчета);
	ОтчетыПлатформаКлиентСервер.УстановитьПометкуНаПериод(ФормаОтчета, "Период"+ФормаОтчета.ВидПериода);
	
	ВидимостьПериода(ФормаОтчета);
	
КонецПроцедуры // ОбновитьНастройкиОтчета()

// Выбор вида таблицы
//
// Параметры:
//  ФормаОтчета  - УправляемаяФорма - Форма, в которой возникло событие.
//  ВидТаблицы   - Строка           - Вид представления таблицы.
//  НомерТаблицы - Число            - Номер таблицы вывода.
//
Процедура ВыбратьВидТаблицы(ФормаОтчета, ВидТаблицы, НомерТаблицы) Экспорт
	
	Элементы             = ФормаОтчета.Элементы;
	ИдентификаторТаблицы = ФормаОтчета.ИдентификаторТаблицы;
	
	Элементы[ИдентификаторТаблицы].Заголовок = ВидТаблицы + " №" + Строка(НомерТаблицы);
	Если ВидТаблицы = "Таблица" Тогда
		
		Элементы[ИдентификаторТаблицы].Картинка = БиблиотекаКартинок.ОтчетТаблица;
		
		Элементы.ВидТаблица.Пометка         = Истина;
		Элементы.ВидДиаграмма.Пометка       = Ложь;
		
		Элементы.ГруппаСтроки.Видимость     = Истина;
		Элементы.ГруппаКолонки.Видимость    = Истина;
		Элементы.ГруппаПоказатели.Видимость = Истина;
		
		Элементы.ГруппаОформлениеТаблицы.Видимость        = Истина;
		Элементы.ТаблицаРеквизитыОтдельно.Видимость       = Истина;
		Элементы.ТаблицаОтображатьТаблицуДанных.Видимость = Ложь;
		
		Элементы.ГруппаДиаграмма.Видимость = Ложь;
		
	ИначеЕсли ВидТаблицы = "Диаграмма" Тогда
		
		Элементы[ИдентификаторТаблицы].Картинка = БиблиотекаКартинок.Диаграмма;
		
		Элементы.ВидТаблица.Пометка         = Ложь;
		Элементы.ВидДиаграмма.Пометка       = Истина;
		
		Элементы.ГруппаСтроки.Видимость     = Ложь;
		Элементы.ГруппаКолонки.Видимость    = Ложь;
		Элементы.ГруппаПоказатели.Видимость = Ложь;
		
		Элементы.ГруппаОформлениеТаблицы.Видимость = Ложь;
		Элементы.ТаблицаРеквизитыОтдельно.Видимость = Ложь;
		Элементы.ТаблицаОтображатьТаблицуДанных.Видимость = Истина;
		
		Элементы.ГруппаДиаграмма.Видимость = Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(ФормаОтчета.СтруктураОграничений) = Тип("Структура") И (ФормаОтчета.СтруктураОграничений.Свойство("Строки") ИЛИ ФормаОтчета.СтруктураОграничений.Свойство("Группировки")) Тогда
		Элементы.ДобавитьТаблицу.Видимость         = Ложь;
		Элементы.КоманднаяПанельСтраницы.Видимость = Ложь;
		Элементы.ГруппаВидТаблицы.Видимость        = Ложь;
		Элементы.ГруппаСтроки.Видимость            = Ложь;
		Элементы.ГруппаКолонки.Видимость           = Ложь;
		Элементы.ГруппаДиаграмма.Видимость         = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ФормаОтчета.СтруктураОграничений) = Тип("Структура") И ФормаОтчета.СтруктураОграничений.Свойство("Показатели") Тогда
		Элементы.ГруппаПоказатели.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ФормаОтчета.СтруктураОграничений) = Тип("Структура") И ФормаОтчета.СтруктураОграничений.Свойство("Колонки") Тогда
		Элементы.ГруппаПоказатели.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ФормаОтчета.СтруктураОграничений) = Тип("Структура") И ФормаОтчета.СтруктураОграничений.Свойство("Таблицы") Тогда
		Элементы.Страницы.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаВидТаблицы.Заголовок = ВидТаблицы;
	
КонецПроцедуры // ВыбратьВидТаблицы()

// Установка условного оформления (краткая форма)
//
// Параметры:
//  ФормаОтчета  - УправляемаяФорма - Форма, в которой возникло событие.
//
Процедура УстановитьУсловноеОформлениеКраткаяФорма(ФормаОтчета) Экспорт
	
	ФормаОтчета.УсловноеОформление.Элементы.Очистить();
	
	// Шрифт, только просмотр
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ПоказателиРасположение.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ПоказателиЗаголовок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Показатели.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ПоказателиРасположение.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Показатели.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Шрифт, только просмотр
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ПоказателиРасположение.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ПоказателиЗаголовок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Показатели.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ПоказателиРасположение.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Показатели.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборТипГруппы.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборИспользованиеГруппы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборИспользование.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборПравоеЗначение.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборВидСравнения.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборЗаголовок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборИспользование.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборПравоеЗначение.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборВидСравнения.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборЗаголовок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Шрифт, видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборТипГруппы.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборИспользованиеГруппы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.Папка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ОбычныйШрифтТекста);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборПравоеЗначение.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.ВыводитьТолькоЗаголовок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Видимость
	ЭлементУсловногоОформления = ФормаОтчета.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Элементы.ОтборПравоеЗначение.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор.ВыводитьТолькоЗаголовок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ДобавитьУсловноеОформлениеОтборОрганизацияПодразделение(ФормаОтчета);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПоляИсключения(ПоляОграничения,ОтборКомпоновки) Экспорт
	
	ПоляИсключения = Новый Массив();
	
	Для Каждого ТекущийОтбор Из ОтборКомпоновки.Элементы Цикл 
				
		Если Не ТекущийОтбор.Использование И  ТипЗнч(ТекущийОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")Тогда
			Продолжить;	 
		КонецЕсли;
		
		ИмяОтбора = СокрЛП(ТекущийОтбор.ЛевоеЗначение);
		Позиция = СтрНайти(ИмяОтбора, "."); 
		
		Если Позиция > 0 Тогда
			
			ИмяОтбора = Лев(ИмяОтбора, Позиция-1); 	
			ИмяРеквизита = Сред(ТекущийОтбор.ЛевоеЗначение, Позиция+1);
			
			ПоискПоОграничениям = ПоляОграничения.Найти(ИмяОтбора);
			ПоискПоДоступным = ОтборКомпоновки.ДоступныеПоляОтбора.Элементы.Найти(ИмяОтбора);
			
			Если ПоискПоОграничениям <> Неопределено И ПоискПоДоступным <> Неопределено Тогда 
				
				Для Каждого ТипОтбора Из ПоискПоДоступным.ТипЗначения.Типы() Цикл
					
					ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипОтбора);
					
					Если Не ЕстьРеквизит(ОбъектМетаданных,ИмяРеквизита) Тогда
						ПоляИсключения.Добавить(ИмяОтбора);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;	
				
			КонецЕсли;

		КонецЕсли; 
			
	КонецЦикла;
	
	Возврат ПоляИсключения;
	
КонецФункции


Функция ДействиеОтбораВозможноВыполнить(ЛевоеЗначение) Экспорт
	
	Если ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
		ОтборПоОрганизацииСнимаемый = ПраваИНастройкиПользователя.Значение("РазрешитьИзменениеОтбораПоОрганизации");
		Если НЕ ОтборПоОрганизацииСнимаемый Тогда
			ОбщегоНазначения.СообщитьПользователю("Изменять отбор по организации запрещено настройкой");
			Возврат Ложь;	
		КонецЕсли;
	ИначеЕсли ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение")
		ИЛИ ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеКомпании") Тогда				
		ОтборПоПодразделениюСнимаемый = ПраваИНастройкиПользователя.Значение("РазрешитьИзменениеОтбораПоПодразделению");				
		Если НЕ ОтборПоПодразделениюСнимаемый Тогда
			ОбщегоНазначения.СообщитьПользователю("Изменять отбор по подразделению запрещено настройкой");
			Возврат Ложь;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция КомпоновщикПолучитьТекстОтбораЗаполнено(ТипПоля, ПутьКДанным, Заполнено = Истина)
	
	Если ТипЗнч(ТипПоля) = Тип("ОписаниеТипов") Тогда
		ТипыПоля = ТипПоля.Типы();
	ИначеЕсли ТипЗнч(ТипПоля) = Тип("Массив") Тогда
		ТипыПоля = ТипПоля;
	Иначе
		ТипыПоля = Новый Массив;
		ТипыПоля.Добавить(ТипПоля);
	КонецЕсли;
	
	ТекстУсловия = "";
	Для Каждого ТекущийТип Из ТипыПоля Цикл
		
		ПустоеЗначение = """";
		Если ТекущийТип      = Тип("Строка") Тогда
			ПустоеЗначение = """";
		ИначеЕсли ТекущийТип = Тип("Число") Тогда
			ПустоеЗначение = "0";
		ИначеЕсли ТекущийТип = Тип("Дата") Тогда
			ПустоеЗначение = "ДАТАВРЕМЯ(1,1,1)";
		ИначеЕсли ТекущийТип = Тип("Булево") Тогда
			ПустоеЗначение = "ЛОЖЬ";
		Иначе
			ПустоеЗначение = "ЗНАЧЕНИЕ(" + Метаданные.НайтиПоТипу(ТекущийТип).ПолноеИмя() + ".ПустаяСсылка)";
		КонецЕсли;
		ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = "", "", " ИЛИ " + Символы.ПС) + ПутьКДанным + " = " + ПустоеЗначение;
		
	КонецЦикла;
	
	Если ТипыПоля.Количество() > 1 Тогда
		ТекстУсловия = ТекстУсловия + " ИЛИ " + Символы.ПС + ПутьКДанным + " = Неопределено";
	КонецЕсли;
	
	Если Заполнено Тогда
		ТекстУсловия = "НЕ ("+ТекстУсловия + ?(ТекстУсловия = "", "", " ИЛИ " + Символы.ПС) + ПутьКДанным + " ЕСТЬ NULL)";
	Иначе
		ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = "", "", " ИЛИ " + Символы.ПС) + ПутьКДанным + " ЕСТЬ NULL";
	КонецЕсли;
	
	Возврат ТекстУсловия;
	
КонецФункции // КомпоновщикПолучитьТекстОтбораЗаполнено()

Функция ЕстьПоказатели(ПоказателиСКД, ПоказателиЗапрещены = Ложь)
	
	Результат = ПоказателиЗапрещены;
	Для Каждого ТекущийПоказатель Из ПоказателиСКД.Элементы Цикл
		
		Если НЕ ТекущийПоказатель.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекущийПоказатель) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекущийПоказатель) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Результат = ЕстьПоказатели(ТекущийПоказатель, ПоказателиЗапрещены);
		Иначе
			Результат = Истина;
		КонецЕсли;
		
		Если Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполнение элемента формы настроек из настройки СКД для краткой формы отчета
//
// Параметры:
//  ФормаОтчета        - УправляемаяФорма - Форма, в которой возникло событие.
//  ОбъектНастройки    - КоллекцияЭлементовОтбораКомпоновкиДанных - Настройки объекта.
//  КоллекцияЭлементов - ДанныеФормыКоллекцияЭлементовДерева - Коллекция элементов.
//  РежимЭксперт       - Булево - Признак варианта настройки отчета.
//  Уровень            - Число - Уровень подчиненных.
//
Процедура ЗаполнитьСтруктуруОтчета(ФормаОтчета, ОбъектНастройки, КоллекцияЭлементов = Неопределено, РежимЭксперт = Ложь, Уровень = 0)
	
	Если РежимЭксперт Тогда
		Возврат;
	КонецЕсли;
	
	Отчет    = ФормаОтчета.Отчет;
	Элементы = ФормаОтчета.Элементы;
	
	УровеньПодчиненных = Уровень + 1;
	
	ТипНастройки = ТипЗнч(ОбъектНастройки);
	
	Если ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		
		Для Каждого ТекущаяСтруктура Из ОбъектНастройки Цикл
			
			Если НЕ ТекущаяСтруктура.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяТаблица = Неопределено;
			
			ТипСтруктурыОтчета = ТипЗнч(ТекущаяСтруктура);
			Если ТипСтруктурыОтчета = Тип("ТаблицаКомпоновкиДанных") Тогда
				
				ИдентификаторСтроки = ДобавитьТаблицуОтчета(ФормаОтчета, "Таблица", Ложь);
				НоваяТаблица = ФормаОтчета.СписокТаблиц.НайтиПоИдентификатору(ИдентификаторСтроки);
				
				ЗаполнитьСтруктуруОтчета(ФормаОтчета, ТекущаяСтруктура.Строки,  НоваяТаблица.ГруппировкиСтрок, РежимЭксперт, УровеньПодчиненных);
				ЗаполнитьСтруктуруОтчета(ФормаОтчета, ТекущаяСтруктура.Колонки, НоваяТаблица.ГруппировкиКолонок, РежимЭксперт, УровеньПодчиненных);
				ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяТаблица.ПараметрыВывода.ПолучитьЭлементы(), ТекущаяСтруктура.ПараметрыВывода.Элементы, ТекущаяСтруктура.ПараметрыВывода.ДоступныеПараметры);
				// Условное оформление
				НоваяТаблица.УсловноеОформление = ТекущаяСтруктура.УсловноеОформление;
				
			ИначеЕсли ТипСтруктурыОтчета = Тип("ДиаграммаКомпоновкиДанных") Тогда
				
				ИдентификаторСтроки = ДобавитьТаблицуОтчета(ФормаОтчета, "Диаграмма", Ложь);
				
				НоваяТаблица = ФормаОтчета.СписокТаблиц.НайтиПоИдентификатору(ИдентификаторСтроки);
				
				ЗаполнитьСтруктуруОтчета(ФормаОтчета, ТекущаяСтруктура.Серии, НоваяТаблица.ГруппировкиКолонок, РежимЭксперт, УровеньПодчиненных);
				ЗаполнитьСтруктуруОтчета(ФормаОтчета, ТекущаяСтруктура.Точки, НоваяТаблица.ГруппировкиСтрок, РежимЭксперт, УровеньПодчиненных);
				ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяТаблица.ПараметрыВывода.ПолучитьЭлементы(), ТекущаяСтруктура.ПараметрыВывода.Элементы, ТекущаяСтруктура.ПараметрыВывода.ДоступныеПараметры);
				// Условное оформление
				НоваяТаблица.УсловноеОформление = ТекущаяСтруктура.УсловноеОформление;
				
			Иначе
				
				ИдентификаторСтроки = ДобавитьТаблицуОтчета(ФормаОтчета, "Таблица", Ложь);
				
				НоваяТаблица = ФормаОтчета.СписокТаблиц.НайтиПоИдентификатору(ИдентификаторСтроки);
				
				ЗаполнитьСтруктуруОтчета(ФормаОтчета, ТекущаяСтруктура, НоваяТаблица.ГруппировкиСтрок, РежимЭксперт, УровеньПодчиненных);
				ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяТаблица.ПараметрыВывода.ПолучитьЭлементы(), ТекущаяСтруктура.ПараметрыВывода.Элементы, ТекущаяСтруктура.ПараметрыВывода.ДоступныеПараметры);
				// Условное оформление
				НоваяТаблица.УсловноеОформление = ТекущаяСтруктура.УсловноеОформление;
			КонецЕсли;
			
			ПараметрОформления = ТекущаяСтруктура.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");
			Если (НЕ ПараметрОформления = Неопределено) И ПараметрОформления.Использование Тогда
				НоваяТаблица.РеквизитыОтдельно = (ПараметрОформления.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно);
				ФормаОтчета.Элементы.ТаблицаРеквизитыОтдельно.Пометка = НоваяТаблица.РеквизитыОтдельно;
			КонецЕсли;
			
			ПараметрОформления = ТекущаяСтруктура.ПараметрыВывода.Элементы.Найти("МакетОформления");
			Если (НЕ ПараметрОформления = Неопределено) И ПараметрОформления.Использование Тогда
				НоваяТаблица.ОформлениеТаблицы = ПараметрОформления.Значение;
			Иначе
				ПараметрОформления = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
				Если (НЕ ПараметрОформления = Неопределено) И ПараметрОформления.Использование Тогда
					НоваяТаблица.ОформлениеТаблицы = ПараметрОформления.Значение;
				Иначе
					НоваяТаблица.ОформлениеТаблицы = БиблиотекаМакетовОформленияКомпоновкиДанных[7].Имя;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрТипДиаграммы = ТекущаяСтруктура.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
			Если НЕ ПараметрТипДиаграммы = Неопределено Тогда
				НоваяТаблица.ТипДиаграммы            = СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ПараметрТипДиаграммы.Значение), "ТипДиаграммы.", "");
				НоваяТаблица.ОтображатьТаблицуДанных = ПараметрТипДиаграммы.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ОтображатьТаблицуДанных").Значение;
				НоваяТаблица.ВидПодписей             = ПолучитьПолноеИмяПредопределенногоЗначения(ПараметрТипДиаграммы.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ВидПодписей").Значение);
			Иначе
				ПараметрОформления = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
				Если (НЕ ПараметрОформления = Неопределено) И ПараметрОформления.Использование Тогда
					НоваяТаблица.ТипДиаграммы            = СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ПараметрОформления.Значение), "ТипДиаграммы.", "");
					НоваяТаблица.ОтображатьТаблицуДанных = ПараметрОформления.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ОтображатьТаблицуДанных").Значение;
					НоваяТаблица.ВидПодписей             = ПолучитьПолноеИмяПредопределенногоЗначения(ПараметрОформления.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ВидПодписей").Значение);
				Иначе
					НоваяТаблица.ТипДиаграммы            = "Гистограмма";
					НоваяТаблица.ОтображатьТаблицуДанных = Ложь;
					НоваяТаблица.ВидПодписей             = ПолучитьПолноеИмяПредопределенногоЗначения(ВидПодписейКДиаграмме.Значение);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ НоваяТаблица = Неопределено Тогда
				ДеревоПоказателей = НоваяТаблица.Показатели.ПолучитьЭлементы();
				
				ЕстьРесурсы = ЕстьПоказатели(ТекущаяСтруктура.Выбор);
				Если ЕстьРесурсы Тогда
					ЗаполнитьНастройкиОтчета(ФормаОтчета, ДеревоПоказателей, ТекущаяСтруктура.Выбор.Элементы, ТекущаяСтруктура.Выбор.ДоступныеПоляВыбора);
				Иначе
					ЗаполнитьНастройкиОтчета(ФормаОтчета, ДеревоПоказателей, ФормаОтчета.Показатели.ПолучитьЭлементы());
				КонецЕсли;
				
				СтрокаПоказателя = ОтчетыПлатформаКлиентСервер.ПолучитьПоказатель(ДеревоПоказателей);
				Если НЕ СтрокаПоказателя = Неопределено Тогда
					
					ДоступноеПолеПоказателя = ТекущаяСтруктура.Выбор.ДоступныеПоляВыбора.НайтиПоле(СтрокаПоказателя.Поле);
					Если ДоступноеПолеПоказателя = Неопределено Тогда
						ПоказательЗаголовок = СтрокаПоказателя.Заголовок;
					Иначе
						ПоказательЗаголовок = ОтчетыПлатформаКлиентСервер.ПолучитьЗаголовокПоля(ДоступноеПолеПоказателя);
					КонецЕсли;
					
					НоваяТаблица.Показатель          = СтрокаПоказателя.Поле;
					НоваяТаблица.ПоказательЗаголовок = ПоказательЗаголовок;
					
				КонецЕсли;
				
				Для Каждого ТекущаяСтрока Из НоваяТаблица.ГруппировкиСтрок Цикл
					
					Если НЕ ТекущаяСтрока.Использование Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаГруппировки = Неопределено;
					Для Каждого ТекущееПоле Из ТекущаяСтрока.ПоляГруппировки Цикл
						Если ТекущееПоле.Использование Тогда
							СтрокаГруппировки = ТекущееПоле;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ СтрокаГруппировки = Неопределено Тогда
						НоваяТаблица.Точки                  = СтрокаГруппировки.Поле;
						НоваяТаблица.ТочкиЗаголовок         = СтрокаГруппировки.Заголовок;
						НоваяТаблица.КоличествоЗаписейТочек = ТекущаяСтрока.КоличествоЗаписей;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого ТекущаяСтрока Из НоваяТаблица.ГруппировкиКолонок Цикл
					
					Если НЕ ТекущаяСтрока.Использование Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаГруппировки = Неопределено;
					Для Каждого ТекущееПоле Из ТекущаяСтрока.ПоляГруппировки Цикл
						Если ТекущееПоле.Использование Тогда
							СтрокаГруппировки = ТекущееПоле;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ СтрокаГруппировки = Неопределено Тогда
						НоваяТаблица.Серии                  = СтрокаГруппировки.Поле;
						НоваяТаблица.СерииЗаголовок         = СтрокаГруппировки.Заголовок;
						НоваяТаблица.КоличествоЗаписейСерий = ТекущаяСтрока.КоличествоЗаписей;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НоваяТаблица.СерииЗаголовок = "" Тогда
					СчетчикГруппировки = 0;
					Для Каждого ТекущаяСтрока Из НоваяТаблица.ГруппировкиСтрок Цикл
						
						Если НЕ ТекущаяСтрока.Использование Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаГруппировки = Неопределено;
						Для Каждого ТекущееПоле Из ТекущаяСтрока.ПоляГруппировки Цикл
							Если ТекущееПоле.Использование Тогда
								СтрокаГруппировки = ТекущееПоле;
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						Если НЕ СтрокаГруппировки = Неопределено Тогда
							Если СчетчикГруппировки = 0 Тогда
								СчетчикГруппировки = 1;
							Иначе
								НоваяТаблица.Серии                  = СтрокаГруппировки.Поле;
								НоваяТаблица.СерииЗаголовок         = СтрокаГруппировки.Заголовок;
								НоваяТаблица.КоличествоЗаписейСерий = ТекущаяСтрока.КоличествоЗаписей;
								Прервать;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки, РежимЭксперт, Уровень);
		Если РежимЭксперт Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСтруктуруОтчета(ФормаОтчета, ТекущаяСтруктура, КоллекцияЭлементов, РежимЭксперт, УровеньПодчиненных);
		
	ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки, РежимЭксперт, Уровень);
		Если РежимЭксперт Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСтруктуруОтчета(ФормаОтчета, ТекущаяСтруктура, КоллекцияЭлементов, РежимЭксперт, УровеньПодчиненных);
		
	ИначеЕсли ТипНастройки = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		
		НоваяГруппировка = КоллекцияЭлементов.Добавить();
		НоваяГруппировка.Использование = ОбъектНастройки.Использование;
		
		ПараметрВывода = ОбъектНастройки.ПараметрыВывода.Элементы.Найти("КоличествоЗаписей");
		Если НЕ ПараметрВывода = Неопределено И ПараметрВывода.Использование Тогда
			НоваяГруппировка.КоличествоЗаписей = ПараметрВывода.Значение;
		КонецЕсли;
		
		// Параметры вывода группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПараметрыВывода.ПолучитьЭлементы(), ОбъектНастройки.ПараметрыВывода.Элементы, ОбъектНастройки.ПараметрыВывода.ДоступныеПараметры);
		// Поля группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПоляГруппировки, ОбъектНастройки.ПоляГруппировки.Элементы, ОбъектНастройки.ПоляГруппировки.ДоступныеПоляПолейГруппировок, НоваяГруппировка);
		// Реквизиты группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Выбор.ПолучитьЭлементы(), ОбъектНастройки.Выбор.Элементы, ОбъектНастройки.Выбор.ДоступныеПоляВыбора, НоваяГруппировка);
		// Порядок группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Порядок, ОбъектНастройки.Порядок.Элементы, ОбъектНастройки.Порядок.ДоступныеПоляПорядка, НоваяГруппировка);
		// Условное оформление
		НоваяГруппировка.УсловноеОформление = ОбъектНастройки.УсловноеОформление;
		
		НоваяГруппировка.Отбор = ОбъектНастройки.Отбор;
		
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки.Структура, РежимЭксперт, Уровень);
		Если РежимЭксперт Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСтруктуруОтчета(ФормаОтчета, ТекущаяСтруктура, КоллекцияЭлементов, РежимЭксперт, УровеньПодчиненных);
		
	ИначеЕсли ТипНастройки = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		НоваяГруппировка = КоллекцияЭлементов.Добавить();
		НоваяГруппировка.Использование = ОбъектНастройки.Использование;
		
		ПараметрВывода = ОбъектНастройки.ПараметрыВывода.Элементы.Найти("КоличествоЗаписей");
		Если НЕ ПараметрВывода = Неопределено И ПараметрВывода.Использование Тогда
			НоваяГруппировка.КоличествоЗаписей = ПараметрВывода.Значение;
		КонецЕсли;
		
		// Параметры вывода группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПараметрыВывода.ПолучитьЭлементы(), ОбъектНастройки.ПараметрыВывода.Элементы, ОбъектНастройки.ПараметрыВывода.ДоступныеПараметры);
		// Поля группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПоляГруппировки, ОбъектНастройки.ПоляГруппировки.Элементы, ОбъектНастройки.ПоляГруппировки.ДоступныеПоляПолейГруппировок, НоваяГруппировка);
		// Реквизиты группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Выбор.ПолучитьЭлементы(), ОбъектНастройки.Выбор.Элементы, ОбъектНастройки.Выбор.ДоступныеПоляВыбора, НоваяГруппировка);
		// Порядок группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Порядок, ОбъектНастройки.Порядок.Элементы, ОбъектНастройки.Порядок.ДоступныеПоляПорядка, НоваяГруппировка);
		// Условное оформление
		НоваяГруппировка.УсловноеОформление = ОбъектНастройки.УсловноеОформление;
		
		НоваяГруппировка.Отбор = ОбъектНастройки.Отбор;
		
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки.Структура, РежимЭксперт, Уровень);
		Если РежимЭксперт Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСтруктуруОтчета(ФормаОтчета, ТекущаяСтруктура, КоллекцияЭлементов, РежимЭксперт, УровеньПодчиненных);
		
	ИначеЕсли ТипНастройки = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		НоваяГруппировка = КоллекцияЭлементов.Добавить();
		НоваяГруппировка.Использование = ОбъектНастройки.Использование;
		
		ПараметрВывода = ОбъектНастройки.ПараметрыВывода.Элементы.Найти("КоличествоЗаписей");
		Если НЕ ПараметрВывода = Неопределено И ПараметрВывода.Использование Тогда
			НоваяГруппировка.КоличествоЗаписей = ПараметрВывода.Значение;
		КонецЕсли;
		
		// Параметры вывода группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПараметрыВывода.ПолучитьЭлементы(), ОбъектНастройки.ПараметрыВывода.Элементы, ОбъектНастройки.ПараметрыВывода.ДоступныеПараметры);
		// Поля группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.ПоляГруппировки, ОбъектНастройки.ПоляГруппировки.Элементы, ОбъектНастройки.ПоляГруппировки.ДоступныеПоляПолейГруппировок, НоваяГруппировка);
		// Реквизиты группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Выбор.ПолучитьЭлементы(), ОбъектНастройки.Выбор.Элементы, ОбъектНастройки.Выбор.ДоступныеПоляВыбора, НоваяГруппировка);
		// Порядок группировки
		ЗаполнитьНастройкиОтчета(ФормаОтчета, НоваяГруппировка.Порядок, ОбъектНастройки.Порядок.Элементы, ОбъектНастройки.Порядок.ДоступныеПоляПорядка, НоваяГруппировка);
		// Условное оформление
		НоваяГруппировка.УсловноеОформление = ОбъектНастройки.УсловноеОформление;
		
		НоваяГруппировка.Отбор = ОбъектНастройки.Отбор;
		
		ТекущаяСтруктура = ПолучитьСтруктуруОтчета(ОбъектНастройки.Структура, РежимЭксперт, Уровень);
		Если РежимЭксперт Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСтруктуруОтчета(ФормаОтчета, ТекущаяСтруктура, КоллекцияЭлементов, РежимЭксперт, УровеньПодчиненных);
		
	Иначе
		
		ЗаполнитьНастройкиОтчета(ФормаОтчета, КоллекцияЭлементов, ОбъектНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПоискПоляВСтруктуре(Знач ПолеПоиска, СтруктураПоиска, ТочноеСоответствие = Ложь)
	
	Результат  = Неопределено;
	ПолеПоиска = СокрЛП(ПолеПоиска);
	Если ТочноеСоответствие Тогда
		Для Каждого ТекПоле Из СтруктураПоиска Цикл
			Попытка
				ПутьКДанным = СокрЛП(ТекПоле.Ключ);
				Если ПутьКДанным = ПолеПоиска Тогда
					Результат = ТекПоле.Значение;
					Прервать;
				КонецЕсли;
			Исключение
				ПутьКДанным = СокрЛП(ТекПоле);
				Если ПутьКДанным = ПолеПоиска Тогда
					Результат = ТекПоле;
					Прервать;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	Иначе
		Для Каждого ТекПоле Из СтруктураПоиска Цикл
			Попытка
				ПутьКДанным = СокрЛП(ТекПоле.Ключ);
				Если СтрНайти(ПутьКДанным, ПолеПоиска)=1 Тогда
					Результат = ТекПоле.Значение;
					Прервать;
				КонецЕсли;
			Исключение
				ПутьКДанным = СокрЛП(ТекПоле);
				Если СтрНайти(ПутьКДанным, ПолеПоиска)=1 Тогда
					Результат = ТекПоле;
					Прервать;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПоискВГруппировке(ПолеПоиска, Группировка)
	
	Результат = Ложь;
	Элементы = Группировка.ПоляГруппировки.Элементы;
	Для Каждого ТекГруппировка Из Элементы Цикл
		Если Не ТекГруппировка.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТекГруппировка.Поле = ПолеПоиска Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПоискВГруппировке()

Функция ПолучитьГраницуПериода(Значение) Экспорт
	
	ЗначениеГраницы = Новый Граница(КонецДня(Значение), ВидГраницы.Включая);
	
	Возврат ЗначениеГраницы;
	
КонецФункции

Функция ПолучитьСтрокуПредставленияТипа(ПередаваемыйТип)
	
	Результат = Неопределено;
	
	ТекущийТип = ?(Тип("ОписаниеТипов") = ТипЗнч(ПередаваемыйТип), ПередаваемыйТип.Типы()[0], ПередаваемыйТип);
	
	Если ТекущийТип=Тип("Строка") Тогда
		Результат = "Строка";
	ИначеЕсли ТекущийТип=Тип("Число") Тогда
		Результат = "Число";
	ИначеЕсли ТекущийТип=Тип("Дата") Тогда
		Результат = "Дата";
	ИначеЕсли ТекущийТип=Тип("Булево") Тогда
		Результат = "Булево";
	Иначе
		Результат = Метаданные.НайтиПоТипу(ТекущийТип).ПолноеИмя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтрокуПредставленияТипа()

Функция КомпоновщикПолучитьДоступноеПоле(Знач ПолеПоиска, НастройкиКомпоновщика, ВВыборке, ВГруппировке, ВОтборе, ВПорядке)
	
	Результат      = Неопределено;
	ПолеКомпоновки = КомпоновщикПолучитьПолеКомпоновки(ПолеПоиска);
	
	Если ВВыборке Тогда
		Результат = НастройкиКомпоновщика.ДоступныеПоляВыбора.НайтиПоле(ПолеКомпоновки);
	КонецЕсли;
	
	Если Результат = Неопределено И ВГруппировке Тогда
		Результат = НастройкиКомпоновщика.ДоступныеПоляГруппировок.НайтиПоле(ПолеКомпоновки);
	КонецЕсли;
	
	Если Результат = Неопределено И ВОтборе Тогда
		Результат = НастройкиКомпоновщика.ДоступныеПоляОтбора.НайтиПоле(ПолеКомпоновки);
	КонецЕсли;
	
	Если Результат = Неопределено И ВПорядке Тогда
		Результат = НастройкиКомпоновщика.ДоступныеПоляПорядка.НайтиПоле(ПолеКомпоновки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура КомпоновщикУстановитьОтборПоПолямГруппировки(Группировка, Поля)
	
	Элементы = Группировка.ПоляГруппировки.Элементы;
	Для Каждого ТекГруппировка Из Элементы Цикл
		Если Не ТекГруппировка.Использование Тогда
			Продолжить;
		КонецЕсли;
		ПутьКДанным = СокрЛП(ТекГруппировка.Поле);
		Для Каждого ТекПоле Из Поля Цикл
			Если СтрНайти(ПутьКДанным, ТекПоле) = 1 Тогда
				НовыйОтбор = Неопределено;
				Для Каждого ТекОтбор Из Группировка.Отбор.Элементы Цикл
					Если ТекОтбор.ЛевоеЗначение = ТекГруппировка.Поле
						И ТекОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено Тогда
						НовыйОтбор = ТекОтбор;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НовыйОтбор = Неопределено Тогда 
					НовыйОтбор = Группировка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйОтбор.ЛевоеЗначение = ТекГруппировка.Поле;
					НовыйОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
				КонецЕсли;
				НовыйОтбор.Использование = Истина;
				//НовыйОтбор.Применение    = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
				ПараметрОтображения = Группировка.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
				Если Не ПараметрОтображения = Неопределено Тогда
					ПараметрОтображения.Значение      = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
					ПараметрОтображения.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПорядокПоУмолчанию(Настройки, СтрокаГруппировки)
	
	ПолеГруппировки      = СтрокаГруппировки.Поле;
	ЗаголовокГруппировки = СтрокаГруппировки.Заголовок;
	
	СписокСортировки = Новый СписокЗначений;
	
	ПолеПорядка = Настройки.ДоступныеПоляПорядка.НайтиПоле(ПолеГруппировки);
	Если НЕ ПолеПорядка = Неопределено И ПолеПорядка.Элементы.Количество()>0 Тогда
		ПолеСортировки = Новый ПолеКомпоновкиДанных(СокрЛП(ПолеПорядка.Поле)+".Наименование");
		ДоступныеДанные = ПолеПорядка.Элементы.Найти(ПолеСортировки);
		Если НЕ ДоступныеДанные = Неопределено Тогда
			СписокСортировки.Добавить(ПолеСортировки, СтрЗаменить(ДоступныеДанные.Заголовок, ЗаголовокГруппировки+".", ""));
		КонецЕсли;
	КонецЕсли;
	
	Если СписокСортировки.Количество() = 0 Тогда
		ПредставлениеПорядка = "Авто";
	Иначе
		ПредставлениеПорядка = "";
		Для Каждого ТекСтрока Из СписокСортировки Цикл
			НоваяСтрока = СтрокаГруппировки.Порядок.Добавить();
			НоваяСтрока.Поле              = ТекСтрока.Значение;
			НоваяСтрока.Заголовок         = ТекСтрока.Представление;
			НоваяСтрока.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			ПредставлениеПорядка  = ПредставлениеПорядка + ?(ПредставлениеПорядка = "", "", ", ") + НоваяСтрока.Заголовок + " Возр";
		КонецЦикла;
	КонецЕсли;
	
	СтрокаГруппировки.ПредставлениеПорядка = ПредставлениеПорядка;
	
КонецПроцедуры

Функция КомпоновщикПолучитьТекстСравнения(ДоступныеПоляОтбора, ТекОтбор, Параметры, ПутьКДанным)
	
	ИмяПараметра = "Параметр" + Параметры.Количество();
	ТипПараметра = 1;
	ТекстУсловия = "";
	
	Если ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		ТекстУсловия = ПутьКДанным+">&"+ИмяПараметра;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ТекстУсловия = ПутьКДанным+">=&"+ИмяПараметра;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		ТекстУсловия = ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+")";	
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		ТекстУсловия = ПутьКДанным+" В (&"+ИмяПараметра+")";
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		ТекстУсловия = ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+")";
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		ДоступноеПолеОтбора = ДоступныеПоляОтбора.НайтиПоле(ТекОтбор.ЛевоеЗначение);
		ТекстУсловия = КомпоновщикПолучитьТекстОтбораЗаполнено(ДоступноеПолеОтбора.ТипЗначения.Типы(), ПутьКДанным, Истина);
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		ТекстУсловия = ПутьКДанным+"<&"+ИмяПараметра;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ТекстУсловия = ПутьКДанным+"<=&"+ИмяПараметра;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		ТекстУсловия = "(НЕ "+ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+"))";
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		ТекстУсловия = "(НЕ "+ПутьКДанным+" В (&"+ИмяПараметра+"))";
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		ТекстУсловия = "(НЕ "+ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+"))";
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		ДоступноеПолеОтбора = ДоступныеПоляОтбора.НайтиПоле(ТекОтбор.ЛевоеЗначение);
		ТекстУсловия = КомпоновщикПолучитьТекстОтбораЗаполнено(ДоступноеПолеОтбора.ТипЗначения.Типы(), ПутьКДанным, Ложь);
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		ТекстУсловия = ПутьКДанным+" <> &"+ИмяПараметра;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		ТекстУсловия = "(НЕ "+ПутьКДанным+" ПОДОБНО &"+ИмяПараметра+")";
		ТипПараметра  = 2;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		ТекстУсловия = ПутьКДанным+" = &"+ИмяПараметра;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
		ТекстУсловия = ПутьКДанным+" ПОДОБНО &"+ИмяПараметра;
		ТипПараметра  = 2;
	КонецЕсли;
	
	Если ТипПараметра=1 Тогда
		Если ТекОтбор.ПравоеЗначение = Неопределено Тогда
			ДоступноеПолеОтбора = ДоступныеПоляОтбора.НайтиПоле(ТекОтбор.ЛевоеЗначение);
			ТипПоля = ДоступноеПолеОтбора.ТипЗначения.Типы();
			Если ТипПоля.Количество() = 0 Тогда
				Значение = Неопределено;
			Иначе
				ПредставлениеСвойства = ПолучитьСтрокуПредставленияТипа(ДоступноеПолеОтбора.ТипЗначения);
				Если ПредставлениеСвойства="Строка" Тогда
					Значение = "";
				ИначеЕсли ПредставлениеСвойства="Число" Тогда
					Значение = 0;
				ИначеЕсли ПредставлениеСвойства="Дата" Тогда
					Значение = Дата(1,1,1);
				ИначеЕсли ПредставлениеСвойства="Булево" Тогда
					Значение = Ложь;
				Иначе
					Запрос = Новый Запрос;
					Запрос.Текст = "
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ЗНАЧЕНИЕ("+ПредставлениеСвойства+".ПустаяСсылка) КАК ПустоеЗначение";
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Значение = Выборка.ПустоеЗначение;
					Иначе
						Значение = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Значение = ТекОтбор.ПравоеЗначение;
		КонецЕсли;
		Параметры.Вставить(ИмяПараметра, Значение);
	ИначеЕсли ТипПараметра=2 Тогда
		Параметры.Вставить(ИмяПараметра, "%"+Строка(ТекОтбор.ПравоеЗначение)+"%");
	КонецЕсли;
	
	Возврат ТекстУсловия;
	
КонецФункции // КомпоновщикПолучитьТекстСравнения()

Процедура ПолучитьУникальныеПоляВГруппировке(Группировка, УникальныеПоля)
	
	Элементы = Группировка.ПоляГруппировки.Элементы;
	Для Каждого ТекГруппировка Из Элементы Цикл
		Если Не ТекГруппировка.Использование Тогда
			Продолжить;
		КонецЕсли;
		ПутьКДанным = СокрЛП(ТекГруппировка.Поле);
		Если СтрНайти(ПутьКДанным, ".") > 0 ИЛИ УникальныеПоля.Свойство(ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		УникальныеПоля.Вставить(ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьУникальныеПоляВГруппировке()

Функция ПроверитьКорректностьСтроки(
	Строка,
	ТаблицаПолей,
	НомерПериодаПоСтруктуре,
	ВложенныйНомерПериода,
	НомерОсновногоПериодаПоСтруктуре,
	ВложенныйНомерОсновногоПериода)
	
	Отказ = Ложь;
	
	ПолеИерархии          = Неопределено;
	ПревПоле              = Неопределено;
	НомерПериода          = 0;
	НомерОсновногоПериода = 0;
	Для Каждого ТекПолеГруппировки Из Строка.ПоляГруппировки.Элементы Цикл
		Если Не ТекПолеГруппировки.Использование ИЛИ (НЕ ТипЗнч(ТекПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных")) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеПериода = ТаблицаПолей.Найти(ТекПолеГруппировки.Поле, "Поле");
		Если ПолеПериода = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия ИЛИ ТекПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
			Если ПолеИерархии = Неопределено Тогда
				ПолеИерархии = ПолеПериода.Заголовок;
			Иначе
				Сообщение       = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Иерархическая группировка одновременно по нескольким полям: <'") + ПолеИерархии + "> и <" + ПолеПериода.Заголовок + НСтр("ru = '> не допустима.'");
				Сообщение.Сообщить();
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПолеПериода.НомерПериода>0 Тогда
			
			Если НЕ ПревПоле = Неопределено Тогда
				Сообщение       = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Совместная группировка по периодам с другими выражениями запрещена. Поля: <'") + ПревПоле.Заголовок + "> и <"+ПолеПериода.Заголовок+">.";
				Сообщение.Сообщить();
				Возврат Истина;
			КонецЕсли;
			
			НомерПериода = Макс(НомерПериода, ПолеПериода.НомерПериода);
			Если ПолеПериода.ТипПериода = ТипПериодаКомпоновкиДанных.Основной Тогда
				Если НомерОсновногоПериода = 0 Тогда
					НомерОсновногоПериода = ПолеПериода.НомерПериода;
				Иначе
					НомерОсновногоПериода = Мин(НомерОсновногоПериода, ПолеПериода.НомерПериода);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НомерПериода>0 Тогда
			
			ВремПоле = ТаблицаПолей.Найти(НомерПериода, "НомерПериода");
			
			Сообщение       = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Совместная группировка по периодам с другими выражениями запрещена. Поля: <'") + ВремПоле.Заголовок + "> и <"+ПолеПериода.Заголовок+">.";
			Сообщение.Сообщить();
			Возврат Истина;
		Иначе
			
			ПревПоле = ПолеПериода;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерОсновногоПериода>0 И НомерПериодаПоСтруктуре>0 Тогда
		
		ПервыйПериод = ТаблицаПолей.Найти(НомерОсновногоПериода, "НомерПериода");
		ВторойПериод = ТаблицаПолей.Найти(НомерПериодаПоСтруктуре, "НомерПериода");
		
		Сообщение       = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Периодические группировки: <'") + ПервыйПериод.Заголовок + НСтр("ru = '> и <'") + ВторойПериод.Заголовок + НСтр("ru = '> должны находится в одной ветви.'");
		Сообщение.Сообщить();
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если НомерОсновногоПериодаПоСтруктуре>0 И НомерПериода>0 Тогда
		
		ПервыйПериод = ТаблицаПолей.Найти(НомерОсновногоПериодаПоСтруктуре, "НомерПериода");
		ВторойПериод = ТаблицаПолей.Найти(НомерПериода, "НомерПериода");
		
		Сообщение       = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Периодические группировки: <'") + ПервыйПериод.Заголовок + НСтр("ru = '> и <'") + ВторойПериод.Заголовок + НСтр("ru = '> должны находится в одной ветви.'");
		Сообщение.Сообщить();
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если НомерОсновногоПериода>0 И ВложенныйНомерПериода>НомерОсновногоПериода Тогда
		
		ПервыйПериод = ТаблицаПолей.Найти(НомерОсновногоПериода, "НомерПериода");
		ВторойПериод = ТаблицаПолей.Найти(ВложенныйНомерПериода, "НомерПериода");
		
		Сообщение       = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Периодическая группировка: <'") + ПервыйПериод.Заголовок + НСтр("ru = '> должна находится ниже группировки: <'") + ВторойПериод.Заголовок + НСтр("ru = '>.'");
		Сообщение.Сообщить();
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если НомерОсновногоПериодаПоСтруктуре>0 И ВложенныйНомерПериода>0 Тогда
		
		ПервыйПериод = ТаблицаПолей.Найти(НомерОсновногоПериодаПоСтруктуре, "НомерПериода");
		ВторойПериод = ТаблицаПолей.Найти(ВложенныйНомерПериода, "НомерПериода");
		
		Сообщение       = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Периодические группировки: <'") + ПервыйПериод.Заголовок + НСтр("ru = '> и <'") + ВторойПериод.Заголовок + НСтр("ru = '> должны находится в одной ветви.'");
		Сообщение.Сообщить();
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ВложенныйНомерОсновногоПериода>0 И НомерПериодаПоСтруктуре>0 Тогда
		
		ПервыйПериод = ТаблицаПолей.Найти(ВложенныйНомерОсновногоПериода, "НомерПериода");
		ВторойПериод = ТаблицаПолей.Найти(НомерПериодаПоСтруктуре, "НомерПериода");
		
		Сообщение       = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Периодические группировки: <'") + ПервыйПериод.Заголовок + НСтр("ru = '> и <'") + ВторойПериод.Заголовок + НСтр("ru = '> должны находится в одной ветви.'");
		Сообщение.Сообщить();
		
		Возврат Истина;
		
	КонецЕсли;
	
	НомерПериодаПоСтруктуре          = Макс(НомерПериодаПоСтруктуре, НомерПериода, ВложенныйНомерПериода);
	НомерОсновногоПериодаПоСтруктуре = Макс(НомерОсновногоПериодаПоСтруктуре, НомерОсновногоПериода, ВложенныйНомерОсновногоПериода);
	
	Возврат Отказ;
	
КонецФункции

Функция ПроверитьКорректностьГруппировки(Группировка, ТаблицаПолей, МаксНомерПериода = 0, МаксНомерОсновногоПериода = 0)
	
	Отказ = Ложь;
	
	НомерПериодаПоСтруктуре          = 0;
	НомерОсновногоПериодаПоСтруктуре = 0;
	Для Каждого ТекГруппировка Из Группировка.Структура Цикл
		
		Если НЕ ТекГруппировка.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ВложенныйНомерПериода          = 0;
		ВложенныйНомерОсновногоПериода = 0;
		Отказ = ПроверитьКорректностьГруппировки(ТекГруппировка, ТаблицаПолей, ВложенныйНомерПериода, ВложенныйНомерОсновногоПериода);
		Если НЕ Отказ Тогда
			Отказ = ПроверитьКорректностьСтроки(ТекГруппировка, ТаблицаПолей, НомерПериодаПоСтруктуре, ВложенныйНомерПериода, НомерОсновногоПериодаПоСтруктуре, ВложенныйНомерОсновногоПериода);
			Если Отказ Тогда
				Возврат Истина
			КонецЕсли;
			//ПолеИерархии = Неопределено;
			//НомерПериода      = 0;
			//НомерОсновногоПериода = 0;
			//Для Каждого ТекПолеГруппировки Из ТекГруппировка.ПоляГруппировки.Элементы Цикл
			//	Если Не ТекПолеГруппировки.Использование
			//		ИЛИ (НЕ ТипЗнч(ТекПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных")) Тогда
			//		Продолжить;
			//	КонецЕсли;
			//	
			//	ПолеПериода = ТаблицаПолей.Найти(ТекПолеГруппировки.Поле, "Поле");
			//	Если ПолеПериода = Неопределено Тогда
			//		Продолжить;
			//	КонецЕсли;
			//	
			//	Если ТекПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия
			//		ИЛИ ТекПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
			//		Если ПолеИерархии = Неопределено Тогда
			//			ПолеИерархии = ПолеПериода.Заголовок;
			//		Иначе
			//			Сообщение       = Новый СообщениеПользователю;
			//			Сообщение.Текст = НСтр("ru = 'Иерархическая группировка одновременно по нескольким полям: <'")
			//				+ ПолеИерархии
			//				+ НСтр("ru = '> и <'")
			//				+ ПолеПериода.Заголовок
			//				+ НСтр("ru = '> не допустима.'");
			//			Сообщение.Сообщить();
			//			Возврат Истина;
			//		КонецЕсли;
			//	КонецЕсли;
			//	
			//	Если ПолеПериода.НомерПериода>0 Тогда
			//		НомерПериода = Макс(НомерПериода, ПолеПериода.НомерПериода);
			//		Если ПолеПериода.ТипПериода = ТипПериодаКомпоновкиДанных.Основной Тогда
			//			Если НомерОсновногоПериода = 0 Тогда
			//				НомерОсновногоПериода = ПолеПериода.НомерПериода;
			//			Иначе
			//				НомерОсновногоПериода = Мин(НомерОсновногоПериода, ПолеПериода.НомерПериода);
			//			КонецЕсли;
			//		КонецЕсли;
			//	КонецЕсли;
			//	
			//КонецЦикла;
			//
			//Если НомерОсновногоПериода>0 И НомерПериодаПоСтруктуре>0 Тогда
			//	
			//	ПервыйПериод = ТаблицаПолей.Найти(НомерОсновногоПериода, "НомерПериода");
			//	ВторойПериод = ТаблицаПолей.Найти(НомерПериодаПоСтруктуре, "НомерПериода");
			//	
			//	Сообщение       = Новый СообщениеПользователю;
			//	Сообщение.Текст = НСтр("ru = 'Периодические группировки: <'")
			//		+ ПервыйПериод.Заголовок 
			//		+ НСтр("ru = '> и <'")
			//		+ ВторойПериод.Заголовок
			//		+ НСтр("ru = '> должны находится в одной ветви.'");
			//	Сообщение.Сообщить();
			//	
			//	Возврат Истина;
			//	
			//КонецЕсли;
			//
			//Если НомерОсновногоПериодаПоСтруктуре>0 И НомерПериода>0 Тогда
			//	
			//	ПервыйПериод = ТаблицаПолей.Найти(НомерОсновногоПериодаПоСтруктуре, "НомерПериода");
			//	ВторойПериод = ТаблицаПолей.Найти(НомерПериода, "НомерПериода");
			//	
			//	Сообщение       = Новый СообщениеПользователю;
			//	Сообщение.Текст = НСтр("ru = 'Периодические группировки: <'")
			//		+ ПервыйПериод.Заголовок
			//		+ НСтр("ru = '> и <'")
			//		+ ВторойПериод.Заголовок
			//		+ НСтр("ru = '> должны находится в одной ветви.'");
			//	Сообщение.Сообщить();
			//	
			//	Возврат Истина;
			//	
			//КонецЕсли;
			//
			//Если НомерОсновногоПериода>0 И ВложенныйНомерПериода>НомерОсновногоПериода Тогда
			//	
			//	ПервыйПериод = ТаблицаПолей.Найти(НомерОсновногоПериода, "НомерПериода");
			//	ВторойПериод = ТаблицаПолей.Найти(ВложенныйНомерПериода, "НомерПериода");
			//	
			//	Сообщение       = Новый СообщениеПользователю;
			//	Сообщение.Текст = НСтр("ru = 'Периодическая группировка: <'")
			//		+ ПервыйПериод.Заголовок
			//		+ НСтр("ru = '> должна находится ниже группировки: <'")
			//		+ ВторойПериод.Заголовок
			//		+ НСтр("ru = '>.'") ;
			//	Сообщение.Сообщить();
			//	
			//	Возврат Истина;
			//	
			//КонецЕсли;
			//
			//Если НомерОсновногоПериодаПоСтруктуре>0 И ВложенныйНомерПериода>0 Тогда
			//	
			//	ПервыйПериод = ТаблицаПолей.Найти(НомерОсновногоПериодаПоСтруктуре, "НомерПериода");
			//	ВторойПериод = ТаблицаПолей.Найти(ВложенныйНомерПериода, "НомерПериода");
			//	
			//	Сообщение       = Новый СообщениеПользователю;
			//	Сообщение.Текст = НСтр("ru = 'Периодические группировки: <'")
			//		+ ПервыйПериод.Заголовок
			//		+ НСтр("ru = '> и <'")
			//		+ ВторойПериод.Заголовок
			//		+ НСтр("ru = '> должны находится в одной ветви.'");
			//	Сообщение.Сообщить();
			//	
			//	Возврат Истина;
			//	
			//КонецЕсли;
			//
			//Если ВложенныйНомерОсновногоПериода>0 И НомерПериодаПоСтруктуре>0 Тогда
			//	
			//	ПервыйПериод = ТаблицаПолей.Найти(ВложенныйНомерОсновногоПериода, "НомерПериода");
			//	ВторойПериод = ТаблицаПолей.Найти(НомерПериодаПоСтруктуре, "НомерПериода");
			//	
			//	Сообщение       = Новый СообщениеПользователю;
			//	Сообщение.Текст = НСтр("ru = 'Периодические группировки: <'")
			//		+ ПервыйПериод.Заголовок
			//		+ НСтр("ru = '> и <'")
			//		+ ВторойПериод.Заголовок
			//		+ НСтр("ru = '> должны находится в одной ветви.'");
			//	Сообщение.Сообщить();
			//	
			//	Возврат Истина;
			//	
			//КонецЕсли;
			
			//НомерПериодаПоСтруктуре = Макс(НомерПериодаПоСтруктуре, НомерПериода, ВложенныйНомерПериода);
			МаксНомерПериода        = Макс(НомерПериодаПоСтруктуре, МаксНомерПериода);
			
			//НомерОсновногоПериодаПоСтруктуре =
			//	Макс(НомерОсновногоПериодаПоСтруктуре, НомерОсновногоПериода, ВложенныйНомерОсновногоПериода);
			МаксНомерОсновногоПериода        = Макс(НомерОсновногоПериодаПоСтруктуре, МаксНомерОсновногоПериода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

Процедура ПроверитьКорректностьПоследовательностейОтчета(Форма, Отчет)
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПредупреждатьОНарушенииПоследовательностей") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипОтчета = ТипЗнч(Отчет);
	Результат = "";
	ПоследовательностиОтчета = Новый Массив;
	ПоследовательностиДляПроверки = Новый Структура;
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыВзаиморасчетов", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыВзаиморасчетов);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыЗаказы", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыЗаказы);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыОрдерныйСклад", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыОрдерныйСклад);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыПартий", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыПартий);
	// Последовательности ААА6
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыАвтомобили", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыАвтомобили);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыАвтомобилиОрдерныйСклад", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыАвтомобилиОрдерныйСклад);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыЗаказыНаАвтомобили", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыЗаказыНаАвтомобили);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыКомплектация", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыКомплектация);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыПроизводство", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыПроизводство);
	ПоследовательностиДляПроверки.Вставить(
		"ГраницыРасчетыСКонтрагентами", Метаданные.ОпределяемыеТипы.ПоследовательностиОтчетаГраницыРасчетыСКонтрагентами);
	
	Для Каждого КлючЗначение Из ПоследовательностиДляПроверки Цикл
		
		Если КлючЗначение.Значение.Тип.СодержитТип(ТипОтчета) Тогда
			
			ПоследовательностиОтчета.Добавить(КлючЗначение.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ПоследовательностиОтчета) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КонфигурацияПоследовательностей = Обработки.ВосстановлениеПоследовательностей.КонфигурацияПоследовательностей();
	ОтобранныеПоследовательности = Новый Массив;
	
	Для Каждого Последовательность Из КонфигурацияПоследовательностей Цикл
		
		Если ПоследовательностиОтчета.Найти(Последовательность.Имя) <> Неопределено Тогда
			
			ОтобранныеПоследовательности.Добавить(Последовательность);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ОтобранныеПоследовательности) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПолучения = Обработки.ВосстановлениеПоследовательностей.СоздатьПараметрыПолученияНеактуальныхДокументов();
	ПараметрыПолучения.ПоДату =ТекущаяДатаСеанса();
	НеактуальныеДокументы = Обработки
		.ВосстановлениеПоследовательностей
		.ПолучитьНеактуальныеДокументы(ОтобранныеПоследовательности, ПараметрыПолучения);
	
	Если НЕ ЗначениеЗаполнено(НеактуальныеДокументы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СообщенияПоПоследовательностям = Новый Массив;
	СообщенияПоОрганизациям = Новый Соответствие;
	
	Для Каждого Последовательность Из ОтобранныеПоследовательности Цикл
		
		Условие = Новый Структура("ИмяПоследовательности", Последовательность.Имя);
		ДокументыПоследовательности = НеактуальныеДокументы.НайтиСтроки(Условие);
		
		Если НЕ ЗначениеЗаполнено(ДокументыПоследовательности) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого Строка Из ДокументыПоследовательности Цикл
			
			Если СообщенияПоОрганизациям.Получить(Строка.Организация) <> Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			МоментВремени = Формат(Строка.МоментВремени, "ДЛФ=D");
			
			Если Строка.Граница <> Неопределено Тогда
				
				МоментВремени = СтрШаблон(
					"%1 - %2 № %3",
					Строка.Граница.Дата,
					Строка.Граница.Метаданные().Синоним,
					СокрЛП(Строка.Граница.Номер));
				
			КонецЕсли;
			
			Сообщение = СтрШаблон(НСтр("ru = 'Последовательность: <%1> актуальна по организации <%2> %3'"),
				Последовательность.Представление, Строка.Организация, МоментВремени);
			СообщенияПоОрганизациям.Вставить(Строка.Организация, Сообщение);
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из СообщенияПоОрганизациям Цикл
			
			СообщенияПоПоследовательностям.Добавить(КлючЗначение.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СообщенияПоПоследовательностям) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СообщенияПоПоследовательностям.Вставить(0, НСтр("ru = 'Проверка последовательностей:'"));
	
	Если ЕстьРеквизит(Форма, "СообщениеПользователю") Тогда
		
		Форма.СообщениеПользователю = СтрСоединить(СообщенияПоПоследовательностям, Символы.ПС);
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(СтрСоединить(СообщенияПоПоследовательностям, Символы.ПС));
	
КонецПроцедуры

Функция НайтиДоступноеПоле(ДоступныеПоля, ПолеПоиска)
	
	Результат = Неопределено;
	Родитель  = ДоступныеПоля.Поле;
	
	// Если поле поиска это родитель то и искать ничего не нужно
	Если Родитель = ПолеПоиска Тогда
		Возврат ДоступныеПоля;
	КонецЕсли;
	// Проверка, что поле поиска принадлежит родителю
	Если НЕ СтрНайти(ПолеПоиска, Родитель) = 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ДоступныеПоля.Элементы.Найти(ПолеПоиска);
	Если НЕ Результат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПутьКДанным  = СтрЗаменить(ПолеПоиска, СокрЛП(Родитель)+".", "");
	ПозицияТочки = СтрНайти(ПутьКДанным, ".");
	// Если поле находится на первом уровне, найдем его обычным поиском.
	Если ПозицияТочки > 0 Тогда
		// Если поле находится ниже, чем на первом уровне найдем его ветвь и перейдем на уровень ниже.
		ПутьКДанным = СокрЛП(Родитель)+"."+Лев(ПутьКДанным, ПозицияТочки-1);
		ПолеВетви = Новый ПолеКомпоновкиДанных(ПутьКДанным);
		ВетвьПоиска = ДоступныеПоля.Элементы.Найти(ПолеВетви);
		// Если найдена ветвь поиска переходим на следующий уровень
		Если НЕ ВетвьПоиска = Неопределено Тогда
			Результат = НайтиДоступноеПоле(ВетвьПоиска, ПолеПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОткорректироватьГруппировкуСКД(Группировка)
	
	Если НЕ Группировка.Использование Тогда
		Возврат;
	КонецЕсли;
	
	// Детальные записи не проверяем
	Если Группировка.ПоляГруппировки.Элементы.Количество() = 0 Тогда
		ОткорректироватьСтруктуруСКД(Группировка.Структура);
		Возврат;
	КонецЕсли;
	
	ДоступныеПоляВыбора  = Новый Массив;
	ДоступныеПоляПорядка = Новый Массив;
	Для Каждого ТекГруппировка Из Группировка.ПоляГруппировки.Элементы Цикл
		Если Не ТекГруппировка.Использование ИЛИ (НЕ ТипЗнч(ТекГруппировка) = Тип("ПолеГруппировкиКомпоновкиДанных")) Тогда
			Продолжить;
		КонецЕсли;
		ДоступныеПоля = Группировка.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекГруппировка.Поле);
		Если НЕ ДоступныеПоля = Неопределено Тогда
			ДоступныеПоляВыбора.Добавить(ДоступныеПоля);
		КонецЕсли;
		ДоступныеПоля = Группировка.Порядок.ДоступныеПоляПорядка.НайтиПоле(ТекГруппировка.Поле);
		Если НЕ ДоступныеПоля = Неопределено Тогда
			ДоступныеПоляПорядка.Добавить(ДоступныеПоля);
		КонецЕсли;
	КонецЦикла;
	
	СистемныеПоля = Группировка.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("СистемныеПоля"));
	
	МассивДляУдаления = Новый Массив;
	Для Каждого Элемент Из Группировка.Выбор.Элементы Цикл
		Если НЕ Элемент.Использование ИЛИ (НЕ ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СистемныеПоля = Неопределено И (НЕ СистемныеПоля.Элементы.Найти(Элемент.Поле) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоля = Группировка.Выбор.ДоступныеПоляВыбора.НайтиПоле(Элемент.Поле);
		
		УдалятьПоле = Истина;
		Если ПараметрыПоля = Неопределено Тогда
			УдалятьПоле = Истина;
		ИначеЕсли ПараметрыПоля.Ресурс Тогда
			УдалятьПоле = Ложь;
		Иначе
			Для Каждого ДоступныеПоля Из ДоступныеПоляВыбора Цикл
				Если НЕ НайтиДоступноеПоле(ДоступныеПоля, Элемент.Поле) = Неопределено Тогда
					УдалятьПоле = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если УдалятьПоле Тогда
			МассивДляУдаления.Добавить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из МассивДляУдаления Цикл
		Группировка.Выбор.Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Если Группировка.Выбор.Элементы.Количество() = 0 Тогда
		НовоеПоле = Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
	КонецЕсли;
	
	МассивДляУдаления.Очистить();
	Для Каждого Элемент Из Группировка.Порядок.Элементы Цикл
		Если НЕ Элемент.Использование ИЛИ (НЕ ТипЗнч(Элемент) = Тип("ЭлементПорядкаКомпоновкиДанных")) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоля = Группировка.Порядок.ДоступныеПоляПорядка.НайтиПоле(Элемент.Поле);
		
		УдалятьПоле = Истина;
		Если ПараметрыПоля = Неопределено Тогда
			УдалятьПоле = Истина;
		ИначеЕсли ПараметрыПоля.Ресурс Тогда
			УдалятьПоле = Ложь;
		Иначе
			Для Каждого ДоступныеПоля Из ДоступныеПоляПорядка Цикл
				Если НЕ НайтиДоступноеПоле(ДоступныеПоля, Элемент.Поле) = Неопределено Тогда
					УдалятьПоле = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Если УдалятьПоле Тогда
			МассивДляУдаления.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из МассивДляУдаления Цикл
		Группировка.Порядок.Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Если Группировка.Порядок.Элементы.Количество() = 0 Тогда
		НовоеПоле = Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
	КонецЕсли;
	
	ОткорректироватьСтруктуруСКД(Группировка.Структура);
	
КонецПроцедуры

Процедура ОткорректироватьСтруктуруСКД(СтруктураОтчета)
	
	ТипСтруктурыТаблицы   = Тип("ТаблицаКомпоновкиДанных");
	ТипСтруктурыДиаграммы = Тип("ДиаграммаКомпоновкиДанных");
	Для Каждого ТекЭлемент Из СтруктураОтчета Цикл
		
		Если Не ТекЭлемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ТекЭлемент);
		Если ТипЭлемента = ТипСтруктурыТаблицы Тогда
			Для Каждого Строка Из ТекЭлемент.Строки Цикл
				ОткорректироватьГруппировкуСКД(Строка);
			КонецЦикла;
			Для Каждого Колонка Из ТекЭлемент.Колонки Цикл
				ОткорректироватьГруппировкуСКД(Колонка);
			КонецЦикла;
		ИначеЕсли ТипЭлемента = ТипСтруктурыДиаграммы Тогда
			Для Каждого Серия Из ТекЭлемент.Серии Цикл
				ОткорректироватьГруппировкуСКД(Серия);
			КонецЦикла;
			Для Каждого Точка Из ТекЭлемент.Точки Цикл
				ОткорректироватьГруппировкуСКД(Точка);
			КонецЦикла;
		Иначе
			ОткорректироватьГруппировкуСКД(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // КомпоновщикЕстьПолеВСтруктуре()

Функция ПроверитьКорректностьПоказателей(Показатели)
	
	Для Каждого ТекПоказатель Из Показатели Цикл
		Если ТекПоказатель.Использование = Истина Тогда
			Если ТипЗнч(ТекПоказатель) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
				Если НЕ СокрЛП(ТекПоказатель.Поле) = "" Тогда
					Возврат Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекПоказатель) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") И ПроверитьКорректностьПоказателей(ТекПоказатель.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьКорректностьОтборов(Отборы, Уровень = "")
	
	Результат = Истина;
	Для Каждого ТекОтбор Из Отборы Цикл
		Если ТекОтбор.Использование = Истина Тогда
			Если ТипЗнч(ТекОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если СокрЛП(ТекОтбор.ЛевоеЗначение) = "" Тогда
					Сообщение       = Новый СообщениеПользователю;
					Если Уровень = "" Тогда
						Сообщение.Текст = НСтр("ru = 'Отборы: Элемент в строке'") + " № "  + Уровень 
							+ Строка(Отборы.Индекс(ТекОтбор)+1) + " " + НСтр("ru = 'не заполнен.'");
					Иначе
						Сообщение.Текст = НСтр("ru = 'Отборы: Элемент в строке'") + " № (" + Уровень + " ) " 
							+ Строка(Отборы.Индекс(ТекОтбор)+1) + " " + НСтр("ru = 'не заполнен.'");
					КонецЕсли;
					Сообщение.Сообщить();
					Результат = Ложь;
				КонецЕсли;
			Иначе
				Результат = ПроверитьКорректностьОтборов(ТекОтбор.Элементы, Уровень + ?(Уровень="", "", "->") 
					+ Строка(Отборы.Индекс(ТекОтбор)+1) + "->") И Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СкопироватьСтруктуру(СтруктураНастроек, СтруктураКопирования)
	
	ТипСтруктурыОтчета = ТипЗнч(СтруктураКопирования);
	
	Если ТипСтруктурыОтчета = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		НоваяТаблица = СтруктураНастроек.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		
		СкопироватьСтруктуру(НоваяТаблица.Строки, СтруктураКопирования.Строки);
		СкопироватьСтруктуру(НоваяТаблица.Колонки, СтруктураКопирования.Колонки);
		СкопироватьСтруктуру(НоваяТаблица.Выбор.Элементы, СтруктураКопирования.Выбор.Элементы);
		СкопироватьСтруктуру(НоваяТаблица.ПараметрыВывода.Элементы, СтруктураКопирования.ПараметрыВывода.Элементы);
		СкопироватьСтруктуру(НоваяТаблица.УсловноеОформление.Элементы, СтруктураКопирования.УсловноеОформление.Элементы);
		
	ИначеЕсли ТипСтруктурыОтчета = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		НоваяДиаграмма = СтруктураНастроек.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
		
		СкопироватьСтруктуру(НоваяДиаграмма.Серии, СтруктураКопирования.Серии);
		СкопироватьСтруктуру(НоваяДиаграмма.Точки, СтруктураКопирования.Точки);
		СкопироватьСтруктуру(НоваяДиаграмма.Выбор.Элементы, СтруктураКопирования.Выбор.Элементы);
		СкопироватьСтруктуру(НоваяДиаграмма.ПараметрыВывода.Элементы, СтруктураКопирования.ПараметрыВывода.Элементы);
		СкопироватьСтруктуру(НоваяДиаграмма.УсловноеОформление.Элементы, СтруктураКопирования.УсловноеОформление.Элементы);
		
	ИначеЕсли ТипСтруктурыОтчета = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		
		Для Каждого СтрокаКопирования Из СтруктураКопирования Цикл
			
			ВетвьСтруктуры = СтруктураНастроек;
			
			Если СтрокаКопирования.Использование Тогда
				
				ЭлементСтруктуры = ВетвьСтруктуры.Добавить();
				ЭлементСтруктуры.Использование = СтрокаКопирования.Использование;
				
				СкопироватьСтруктуру(ЭлементСтруктуры, СтрокаКопирования);
				
				ВетвьСтруктуры = ЭлементСтруктуры.Структура;
				
			КонецЕсли;
			
			СкопироватьСтруктуру(ВетвьСтруктуры, СтрокаКопирования.Структура);
			
		КонецЦикла;
		
	// Элементы диаграммы
	ИначеЕсли ТипСтруктурыОтчета = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		
		Для Каждого СтрокаКопирования Из СтруктураКопирования Цикл
			
			ВетвьСтруктуры = СтруктураНастроек;
			
			Если СтрокаКопирования.Использование Тогда
				
				ЭлементСтруктуры = ВетвьСтруктуры.Добавить();
				ЭлементСтруктуры.Использование = СтрокаКопирования.Использование;
				
				СкопироватьСтруктуру(ЭлементСтруктуры, СтрокаКопирования);
				
				ВетвьСтруктуры = ЭлементСтруктуры.Структура;
				
			КонецЕсли;
			
			СкопироватьСтруктуру(ВетвьСтруктуры, СтрокаКопирования.Структура);
			
		КонецЦикла;
		
	// Группировка таблицы отчета
	ИначеЕсли ТипСтруктурыОтчета = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		
		// Заполнение полей группировки
		СкопироватьСтруктуру(СтруктураНастроек.ПоляГруппировки.Элементы, СтруктураКопирования.ПоляГруппировки.Элементы);
		
		// Заполнение Реквизитов группировки
		СкопироватьСтруктуру(СтруктураНастроек.Выбор.Элементы, СтруктураКопирования.Выбор.Элементы);
		
		// Заполнение Порядка группировки
		СкопироватьСтруктуру(СтруктураНастроек.Порядок.Элементы, СтруктураКопирования.Порядок.Элементы);
		
		// Заполнение Отборов группировки
		СкопироватьСтруктуру(СтруктураНастроек.Отбор.Элементы, СтруктураКопирования.Отбор.Элементы);
		
		// Заполнение Условного оформления группировки
		СкопироватьСтруктуру(СтруктураНастроек.УсловноеОформление.Элементы, СтруктураКопирования.УсловноеОформление.Элементы);
		
		// Заполнение Параметров вывода группировки
		СкопироватьСтруктуру(СтруктураНастроек.ПараметрыВывода.Элементы, СтруктураКопирования.ПараметрыВывода.Элементы);
		
	// Группировка диаграммы отчета
	ИначеЕсли ТипСтруктурыОтчета = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		// Заполнение полей группировки
		СкопироватьСтруктуру(СтруктураНастроек.ПоляГруппировки.Элементы, СтруктураКопирования.ПоляГруппировки.Элементы);
		
		// Заполнение Реквизитов группировки
		СкопироватьСтруктуру(СтруктураНастроек.Выбор.Элементы, СтруктураКопирования.Выбор.Элементы);
		
		// Заполнение Порядка группировки
		СкопироватьСтруктуру(СтруктураНастроек.Порядок.Элементы, СтруктураКопирования.Порядок.Элементы);
		
		// Заполнение Отборов группировки
		СкопироватьСтруктуру(СтруктураНастроек.Отбор.Элементы, СтруктураКопирования.Отбор.Элементы);
		
		// Заполнение Условного оформления группировки
		СкопироватьСтруктуру(СтруктураНастроек.УсловноеОформление.Элементы, СтруктураКопирования.УсловноеОформление.Элементы);
		
		// Заполнение Параметров вывода группировки
		СкопироватьСтруктуру(СтруктураНастроек.ПараметрыВывода.Элементы, СтруктураКопирования.ПараметрыВывода.Элементы);
		
	ИначеЕсли ТипСтруктурыОтчета = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		
		Для Каждого СтрокаПараметров Из СтруктураКопирования Цикл
			
			Если НЕ СтрокаПараметров.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрСКД = СтруктураНастроек.Найти(СтрокаПараметров.Параметр);
			Если ПараметрСКД = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение      = СтрокаПараметров.Значение;
			
			Если ПараметрСКД.ЗначенияВложенныхПараметров.Количество()>0 Тогда
				СкопироватьСтруктуру(ПараметрСКД.ЗначенияВложенныхПараметров, СтрокаПараметров.ЗначенияВложенныхПараметров);
			КонецЕсли;
			
		КонецЦикла;
		
	// Показатели и реквизиты
	ИначеЕсли ТипСтруктурыОтчета = Тип("КоллекцияВыбранныхПолейКомпоновкиДанных") Тогда
		
		Для Каждого ВыбранноеПоле Из СтруктураКопирования Цикл
			
			ТипПоля = ТипЗнч(ВыбранноеПоле);
			
			НовоеВыбранноеПоле = СтруктураНастроек.Добавить(ТипПоля);
			ЗаполнитьЗначенияСвойств(НовоеВыбранноеПоле, ВыбранноеПоле);
			
			Если ТипПоля = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				СкопироватьСтруктуру(НовоеВыбранноеПоле.Элементы, ВыбранноеПоле.Элементы);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипСтруктурыОтчета = Тип("КоллекцияПолейГруппировкиКомпоновкиДанных") Тогда
		
		// Состав группировок строки
		Для Каждого ПолеГруппировки Из СтруктураКопирования Цикл
			
			НовоеПолеГруппировки = СтруктураНастроек.Добавить(ТипЗнч(ПолеГруппировки));
			ЗаполнитьЗначенияСвойств(НовоеПолеГруппировки, ПолеГруппировки);
			
		КонецЦикла;
		
	// Копирование отбора
	ИначеЕсли ТипСтруктурыОтчета = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных") Тогда
		
		ТипЭлементаОтбора = Тип("ЭлементОтбораКомпоновкиДанных");
		
		Для Каждого СтрокаОтбора Из СтруктураКопирования Цикл
			
			Если ТипЗнч(СтрокаОтбора) = ТипЭлементаОтбора Тогда
				ЭлементОтбора = СтруктураНастроек.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование  = СтрокаОтбора.Использование;
				ЭлементОтбора.ЛевоеЗначение  = СтрокаОтбора.ЛевоеЗначение;
				ЭлементОтбора.ВидСравнения   = СтрокаОтбора.ВидСравнения;
				ЭлементОтбора.ПравоеЗначение = СтрокаОтбора.ПравоеЗначение;
			Иначе
				ГруппаОтбора = СтруктураНастроек.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбора.Использование = СтрокаОтбора.Использование;
				ГруппаОтбора.ТипГруппы     = СтрокаОтбора.ТипГруппы;
				
				СкопироватьСтруктуру(ГруппаОтбора.Элементы, СтрокаОтбора.Элементы);
			КонецЕсли;
			
		КонецЦикла;
		
	// Порядок
	ИначеЕсли ТипСтруктурыОтчета = Тип("КоллекцияЭлементовПорядкаКомпоновкиДанных") Тогда
		
		// Порядок группировок
		Для Каждого ПолеПорядка Из СтруктураКопирования Цикл
			
			НовоеПолеПорядка = СтруктураНастроек.Добавить(ТипЗнч(ПолеПорядка));
			ЗаполнитьЗначенияСвойств(НовоеПолеПорядка, ПолеПорядка);
			
		КонецЦикла;
		
	ИначеЕсли ТипСтруктурыОтчета = Тип("КоллекцияОформляемыхПолейКомпоновкиДанных") Тогда
		
		Для Каждого ПолеОформления Из СтруктураКопирования Цикл
			
			Если НЕ ПолеОформления.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеПолеОформления = СтруктураНастроек.Добавить();
			НовоеПолеОформления.Использование = ПолеОформления.Использование;
			НовоеПолеОформления.Поле          = ПолеОформления.Поле;
			
		КонецЦикла;
		
	ИначеЕсли ТипСтруктурыОтчета = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
		
		// Заполнение Условного оформления группировки
		Для Каждого ЭлементОформления Из СтруктураКопирования Цикл
			
			Если Не ЭлементОформления.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлементОформления = СтруктураНастроек.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовыйЭлементОформления, ЭлементОформления);
			
			СкопироватьСтруктуру(НовыйЭлементОформления.Отбор.Элементы, ЭлементОформления.Отбор.Элементы);
			СкопироватьСтруктуру(НовыйЭлементОформления.Поля.Элементы, ЭлементОформления.Поля.Элементы);
			СкопироватьСтруктуру(НовыйЭлементОформления.Оформление.Элементы, ЭлементОформления.Оформление.Элементы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГруппировкиСтроки(Настройки, СтруктураГруппировок, Группировка)
	
	СписокСортировки = Новый СписокЗначений;
	Для Каждого ТекПоле Из Группировка.Порядок.Элементы Цикл
		Если ТипЗнч(ТекПоле) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") ИЛИ (НЕ ТекПоле.Использование) Тогда
			Продолжить;
		КонецЕсли;
		СписокСортировки.Добавить(ТекПоле.ТипУпорядочивания, СокрЛП(ТекПоле.Поле));
	КонецЦикла;
	
	СписокПолей = Новый СписокЗначений;
	Для Каждого ТекПоле Из Группировка.Выбор.Элементы Цикл
		Если ТипЗнч(ТекПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") ИЛИ (НЕ ТекПоле.Использование) Тогда
			Продолжить;
		КонецЕсли;
		СписокПолей.Добавить(ТекПоле.Поле, СокрЛП(ТекПоле.Поле));
	КонецЦикла;
	
	ЭлементыГруппировки = Группировка.ПоляГруппировки.Элементы;
	
	Если ЭлементыГруппировки.Количество() = 0 Тогда
		// Детальные записи
		СтрокаГруппировки = СтруктураГруппировок.Добавить();
		СтрокаГруппировки.Использование  = Группировка.Использование;
		СтрокаГруппировки.Поле           = Новый ПолеКомпоновкиДанных("");
		СтрокаГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		СтрокаГруппировки.Заголовок      = НСтр("ru = 'Детальные записи'");
		СтрокаГруппировки.Картинка       = БиблиотекаКартинок.ГруппировкаКомпоновкиДанных;
		
		ПредставлениеПорядка = "";
		Для Каждого ТекПоле Из СписокСортировки Цикл
			
			ПолеСортировки = Новый ПолеКомпоновкиДанных(ТекПоле.Представление);
			ДоступныеДанные = Настройки.ДоступныеПоляПорядка.НайтиПоле(ПолеСортировки);
			Если НЕ ДоступныеДанные = Неопределено Тогда
				НоваяСтрока = СтрокаГруппировки.Порядок.Добавить();
				НоваяСтрока.Поле              = ПолеСортировки;
				НоваяСтрока.Заголовок         = СтрЗаменить(ДоступныеДанные.Заголовок, СтрокаГруппировки.Заголовок+".", "");
				НоваяСтрока.ТипУпорядочивания = ТекПоле.Значение;
				
				ПредставлениеПорядка  = ПредставлениеПорядка + ?(ПредставлениеПорядка = "", "", ", ") + НоваяСтрока.Заголовок;
				Если ТекПоле.Значение = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
					ПредставлениеПорядка = ПредставлениеПорядка + " Возр";
				Иначе
					ПредставлениеПорядка = ПредставлениеПорядка + " Убыв";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаГруппировки.ПредставлениеПорядка = ПредставлениеПорядка;
		
		ПредставлениеПолей = "";
		Для Каждого ТекПоле Из СписокПолей Цикл
			ДоступныеДанные = Настройки.ДоступныеПоляПорядка.НайтиПоле(ТекПоле.Значение);
			Если НЕ ДоступныеДанные = Неопределено Тогда
				НоваяСтрока = СтрокаГруппировки.ДопПоля.Добавить();
				НоваяСтрока.Поле              = ТекПоле.Значение;
				НоваяСтрока.Заголовок         = СтрЗаменить(ДоступныеДанные.Заголовок, СтрокаГруппировки.Заголовок+".", "");
				
				ПредставлениеПолей = ПредставлениеПолей + ?(ПредставлениеПолей = "", "", ", ") + НоваяСтрока.Заголовок;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаГруппировки.ПредставлениеПолей = ПредставлениеПолей;
		
	Иначе
		
		ТекГруппировка = ЭлементыГруппировки[0];
		ДоступноеПоле  = Настройки.ДоступныеПоляГруппировок.НайтиПоле(ТекГруппировка.Поле);
		
		Если (НЕ ДоступноеПоле = Неопределено) Тогда
			
			СтрокаГруппировки = СтруктураГруппировок.Добавить();
			СтрокаГруппировки.Использование  = (ТекГруппировка.Использование И Группировка.Использование);
			СтрокаГруппировки.Поле           = ТекГруппировка.Поле;
			СтрокаГруппировки.ТипГруппировки = ТекГруппировка.ТипГруппировки;
			СтрокаГруппировки.Заголовок      = ДоступноеПоле.Заголовок;
			СтрокаГруппировки.Картинка       = БиблиотекаКартинок.ГруппировкаКомпоновкиДанных;
			
			ПредставлениеПорядка = "";
			Для Каждого ТекПоле Из СписокСортировки Цикл
				Если СтрНайти(ТекПоле.Представление, СокрЛП(ТекГруппировка.Поле)) = 1 Тогда
					ПолеСортировки = Новый ПолеКомпоновкиДанных(ТекПоле.Представление);
					ДоступныеДанные = Настройки.ДоступныеПоляПорядка.НайтиПоле(ПолеСортировки);
					Если НЕ ДоступныеДанные = Неопределено Тогда
						НоваяСтрока = СтрокаГруппировки.Порядок.Добавить();
						НоваяСтрока.Поле              = ПолеСортировки;
						НоваяСтрока.Заголовок         = СтрЗаменить(ДоступныеДанные.Заголовок, СтрокаГруппировки.Заголовок+".", "");
						НоваяСтрока.ТипУпорядочивания = ТекПоле.Значение;
						
						ПредставлениеПорядка  = ПредставлениеПорядка + ?(ПредставлениеПорядка = "", "", ", ") + НоваяСтрока.Заголовок;
						Если ТекПоле.Значение = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
							ПредставлениеПорядка = ПредставлениеПорядка + " Возр";
						Иначе
							ПредставлениеПорядка = ПредставлениеПорядка + " Убыв";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПредставлениеПорядка = "" Тогда
				УстановитьПорядокПоУмолчанию(Настройки, СтрокаГруппировки);
			Иначе
				СтрокаГруппировки.ПредставлениеПорядка = ПредставлениеПорядка;
			КонецЕсли;
			
			ПредставлениеПолей = "";
			Для Каждого ТекПоле Из СписокПолей Цикл
				Если СтрНайти(ТекПоле.Представление, СокрЛП(ТекГруппировка.Поле)) = 1 Тогда
					//ПолеСортировки = Новый ПолеКомпоновкиДанных(ТекПоле.Представление);
					ДоступныеДанные = Настройки.ДоступныеПоляПорядка.НайтиПоле(ТекПоле.Значение);
					Если НЕ ДоступныеДанные = Неопределено Тогда
						НоваяСтрока = СтрокаГруппировки.ДопПоля.Добавить();
						НоваяСтрока.Поле              = ТекПоле.Значение;
						НоваяСтрока.Заголовок         = СтрЗаменить(ДоступныеДанные.Заголовок, СтрокаГруппировки.Заголовок+".", "");
						
						ПредставлениеПолей = ПредставлениеПолей + ?(ПредставлениеПолей = "", "", ", ") + НоваяСтрока.Заголовок;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаГруппировки.ПредставлениеПолей = ПредставлениеПолей;
			
			Счетчик                  = 0;
			ПредставлениеГруппировок = "";
			Для Каждого ДопГруппировка Из ЭлементыГруппировки Цикл
				// Пропустим первую строку
				Счетчик = Счетчик + 1;
				Если Счетчик = 1 Тогда
					Продолжить;
				КонецЕсли;
				
				ДоступныеДанные = Настройки.ДоступныеПоляГруппировок.НайтиПоле(ДопГруппировка.Поле);
				Если ДоступныеДанные = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = СтрокаГруппировки.ДопГруппировки.Добавить();
				НоваяСтрока.Использование = ДопГруппировка.Использование;
				НоваяСтрока.Поле          = ДопГруппировка.Поле;
				НоваяСтрока.Заголовок     = ДоступныеДанные.Заголовок;
				
				ПредставлениеГруппировок = ПредставлениеГруппировок + ?(ПредставлениеГруппировок = "", "", ", ") + НоваяСтрока.Заголовок;
				
			КонецЦикла;
			
			СтрокаГруппировки.ПредставлениеГруппировок = ПредставлениеГруппировок;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Группировка.Структура.Количество()>0 Тогда
		СтруктураОтчета = Группировка.Структура[0];
		Если ТипЗнч(СтруктураОтчета) = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипЗнч(СтруктураОтчета) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(СтруктураОтчета) = Тип("ГруппировкиДиаграммыМакетаКомпоновкиДанных") Тогда
			ЗаполнитьГруппировкиСтроки(Настройки, СтруктураГруппировок, СтруктураОтчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГруппировкиКолонки(Настройки, СтруктураГруппировок, Группировка)
	
	ЭлементыГруппировки = Группировка.ПоляГруппировки.Элементы;
	Для Каждого ТекГруппировка Из ЭлементыГруппировки Цикл
		
		//Если НЕ НайтиГруппировку(ТекГруппировка.Поле) = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ДоступноеПоле = Настройки.ДоступныеПоляГруппировок.НайтиПоле(ТекГруппировка.Поле);
		Если ДоступноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаГруппировки = СтруктураГруппировок.Добавить();
		СтрокаГруппировки.Использование  = (ТекГруппировка.Использование И Группировка.Использование);
		СтрокаГруппировки.Поле           = ТекГруппировка.Поле;
		СтрокаГруппировки.ТипГруппировки = ТекГруппировка.ТипГруппировки;
		СтрокаГруппировки.Заголовок      = ДоступноеПоле.Заголовок;
		СтрокаГруппировки.Картинка       = БиблиотекаКартинок.ГруппировкаКомпоновкиДанных;
		
	КонецЦикла;
	//СоздатьИзмеренияОтчета(Группировка.Структура, СтруктураГруппировок, Ложь);
	Если Группировка.Структура.Количество()>0 Тогда
		СтруктураОтчета = Группировка.Структура[0];
		Если ТипЗнч(СтруктураОтчета) = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипЗнч(СтруктураОтчета) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(СтруктураОтчета) = Тип("ГруппировкиДиаграммыМакетаКомпоновкиДанных") Тогда
			ЗаполнитьГруппировкиКолонки(Настройки, СтруктураГруппировок, СтруктураОтчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеЭлементаОтбора(ПредставлениеПоля, ВидСравнения)
	
	ПредставлениеСравнения = "";
	// Производим формирование секции видов сравнения
	Если ВидСравнения = Неопределено ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.Равно 
		ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии 
		ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		// Формирование представлений для прямых видов условий производить не будем
		ПредставлениеСравнения = "";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		ПредставлениеСравнения = " (>)";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ПредставлениеСравнения = " (>=)";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		ПредставлениеСравнения = " (<)";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ПредставлениеСравнения = " (<=)";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии 
			ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		ПредставлениеСравнения = " (НЕ)";
	Иначе
		ПредставлениеСравнения = " (" + Строка(ВидСравнения) + ")";
	КонецЕсли;
	
	ПредставлениеСравнения = ПредставлениеПоля + ПредставлениеСравнения;
	
	// Возвращаем сформированное представление текущего элемента отбора
	Возврат ПредставлениеСравнения;
	
КонецФункции // ПолучитьПредставлениеЭлементаОтбора()

Функция ПроверитьЗаполнениеДат(ОтчетОбъект)
	
	НачалоПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	КонецПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	
	Если НачалоПериода = Неопределено ИЛИ КонецПериода = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(КонецПериода.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		ЗначениеКонецПериода = КонецПериода.Значение.Дата;
	Иначе
		ЗначениеКонецПериода = КонецПериода.Значение;
	КонецЕсли;
	
	Если ТипЗнч(НачалоПериода.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		ЗначениеНачалоПериода = НачалоПериода.Значение.Дата;
	Иначе
		ЗначениеНачалоПериода = НачалоПериода.Значение;
	КонецЕсли;
	
	Если ЗначениеКонецПериода < ЗначениеНачалоПериода Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Начало периода отчета не может быть больше конца.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняем несвязанные элементы формы отчета из настроек таблицы
Процедура ЗаполнитьНастройкиСтраницыИзТаблицы(ФормаОтчета)
	
	Элементы = ФормаОтчета.Элементы;
	
	ДеревоПоказателей = ФормаОтчета.Показатели.ПолучитьЭлементы();
	ДеревоПоказателей.Очистить();
	
	СтрокиТаблицы = ФормаОтчета.СписокТаблиц.НайтиСтроки(Новый Структура("Идентификатор", ФормаОтчета.ИдентификаторТаблицы));
	Если СтрокиТаблицы.Количество() > 0 Тогда
		ТекущиеДанные = СтрокиТаблицы[0];
		// Отображение показателей на форме отчета
		ЗаполнитьНастройкиОтчета(ФормаОтчета, ДеревоПоказателей, ТекущиеДанные.Показатели.ПолучитьЭлементы());
		
		Если ТекущиеДанные.ОформлениеТаблицы = "" Тогда
			МакетОформления = БиблиотекаМакетовОформленияКомпоновкиДанных[1];
		Иначе
			МакетОформления = БиблиотекаМакетовОформленияКомпоновкиДанных[ТекущиеДанные.ОформлениеТаблицы];
		КонецЕсли;
		
		ИмяОформления = "Оформление" + МакетОформления.Имя;
		Для Каждого ТекущееОформление Из Элементы.ГруппаОформлениеТаблицы.ПодчиненныеЭлементы Цикл
			ТекущееОформление.Пометка = Ложь;
			Если ТекущееОформление.Имя = ИмяОформления Тогда
				
				ТекущееОформление.Пометка = Истина;
				Элементы.ГруппаОформлениеТаблицы.Заголовок = МакетОформления.Представление;
				
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ТаблицаРеквизитыОтдельно.Пометка = ТекущиеДанные.РеквизитыОтдельно;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНастройкиСтраницыИзТаблицы()

Процедура ПроверитьЗаполнениеОтчета(ОтчетОбъект, МакетКомпоновки, ВнешниеНаборыДанных)
	
	ОтчетПустой = Истина;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
	
	ПроцессорВыводаРезультата = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультата.УстановитьДокумент(Новый ТабличныйДокумент);
	ПроцессорВыводаРезультата.НачатьВывод();
	
	ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		
		ПроцессорВыводаРезультата.ВывестиЭлемент(ЭлементРезультата);
		
		Для Каждого ЗначениеПараметраМакета Из ЭлементРезультата.ЗначенияПараметров Цикл
			Попытка
				ЗначениеЗаполнено = ЗначениеЗаполнено(ЗначениеПараметраМакета.Значение);
			Исключение
				ЗначениеЗаполнено = Ложь;
			КонецПопытки;
			Если ЗначениеЗаполнено Тогда
				ОтчетПустой = Ложь;
				ПроцессорВыводаРезультата.ЗакончитьВывод();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ОтчетПустой Тогда
			Прервать;
		КонецЕсли;
		
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	КонецЦикла;
	
	ПроцессорВыводаРезультата.ЗакончитьВывод();
	
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры

#КонецОбласти
