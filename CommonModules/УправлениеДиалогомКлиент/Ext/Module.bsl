// Общий модуль "Управление диалогом (клиент)"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Обновление доступности команд группировки списка
//
// Параметры:
//  Форма          - УправляемаяФорма     - Форма, в которой возникло событие.
//  ТекущиеДанные  - ДанныеФормыСтруктура - Текущие данные на форме.
//  ТекущийЭлемент - ПолеФормы            - Текущий элемент формы.
//
Процедура ОбновитьДоступностьКомандГруппировкиСписка(Форма, ТекущиеДанные, ТекущийЭлемент) Экспорт
	
	// Проверим целесообразность дальнейших действий
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	Если Форма.Элементы.Найти("ГруппироватьПоКолонке")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем в зависимости от типа выделенной строки
	Если ТекущиеДанные=Неопределено ИЛИ ТекущийЭлемент=Неопределено Тогда
		Доступность = ЛОЖЬ;
		
	ИначеЕсли ТекущиеДанные.Свойство("ГруппировкаСтроки") И ТекущиеДанные.ГруппировкаСтроки <> Неопределено Тогда
		
		Доступность = ЛОЖЬ;
		
		// Проверить является ли выбранное поле полем группировки?
		Для Каждого Группировка Из Форма.Список.Группировка.Элементы Цикл
			Если ТекущийЭлемент.Имя=Строка(Группировка.Поле) Тогда
				Доступность = ИСТИНА;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// Определим имя реквизита соответствующее текущему полю
		ИмяПоля = ТекущийЭлемент.Имя;
		ИмяПоля = ?(ИмяПоля="Время", "Дата", ИмяПоля);
		ИмяПоля = ?(ИмяПоля="ВидОперации" И ТекущиеДанные.Свойство("ХозОперация"), "ХозОперация.ВидОперации", ИмяПоля);
		
		// Опередим, содержит ли текущая ячейка ссылочный тип данных
		Если ТекущиеДанные.Свойство(ИмяПоля) Тогда
			ТипЗначениеЯчейки = ТипЗнч(ТекущиеДанные[ИмяПоля]);
			ЭтоБазовыйТип     = ТипЗначениеЯчейки=Тип("Число") ИЛИ ТипЗначениеЯчейки=Тип("Строка") ИЛИ ТипЗначениеЯчейки=Тип("Булево") ИЛИ ТипЗначениеЯчейки=Тип("Дата") ИЛИ ТипЗначениеЯчейки=Тип("ХранилищеЗначения") ИЛИ ТипЗначениеЯчейки=Тип("УникальныйИдентификатор");
			Доступность       = НЕ ЭтоБазовыйТип
		Иначе
			Доступность = ЛОЖЬ;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим признаки доступности команд формы
	Форма.Элементы.ГруппироватьПоКолонке    .Доступность = Доступность;
	Форма.Элементы.ГруппироватьПоКолонкеМеню.Доступность = Доступность;
	
	Форма.Элементы.ОтменаГруппировки        .Доступность = (Форма.Список.Группировка.Элементы.Количество() > 0);
	Форма.Элементы.ОтменаГруппировкиМеню    .Доступность = (Форма.Список.Группировка.Элементы.Количество() > 0);
	
КонецПроцедуры // ОбновитьДоступностьКомандГруппировкиСписка()

// Обновление доступности команд поиска по текущему значению списка.
//
// Параметры:
//  Форма          - УправляемаяФорма     - Форма, в которой возникло событие.
//  ТекущиеДанные  - ДанныеФормыСтруктура - Текущие данные на форме.
//  ТекущийЭлемент - ПолеФормы            - Текущий элемент формы.
//
Процедура ОбновитьДоступностьКомандПоискаПоТекущемуЗначениюСписка(Форма, ТекущиеДанные, ТекущийЭлемент) Экспорт
	
	// Проверим целесообразность дальнейших действий
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	Если Форма.Элементы.Найти("ГруппироватьПоКолонке")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Доступность = ИСТИНА;
	
	// Обработаем в зависимости от типа выделенной строки
	Если ТекущиеДанные=Неопределено ИЛИ ТекущийЭлемент=Неопределено ИЛИ ТекущиеДанные.Свойство("ГруппировкаСтроки") И ТекущиеДанные.ГруппировкаСтроки <> Неопределено Тогда
		Доступность = ЛОЖЬ;
	КонецЕсли;
	
	// Установим признаки доступности команд формы
	Если Форма.Элементы.Найти("ФормаПоискПоТекущемуЗначению")<>Неопределено Тогда
		Форма.Элементы.ФормаПоискПоТекущемуЗначению.Доступность = Доступность;
	КонецЕсли;
	Если Форма.Элементы.Найти("СписокКонтекстноеМенюПоискПоТекущемуЗначению")<>Неопределено Тогда
		Форма.Элементы.СписокКонтекстноеМенюПоискПоТекущемуЗначению.Доступность = Доступность;
	КонецЕсли;
	Если Форма.Элементы.Найти("СписокПоискПоТекущемуЗначению")<>Неопределено Тогда
		Форма.Элементы.СписокПоискПоТекущемуЗначению.Доступность = Доступность;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьКомандГруппировкиСписка()

// Открытие формы объекта
//
// Параметры:
//  СсылкаНаОбъект				 - ЛюбаяСсылка - Ссылка на текущий объект.
//  Параметры					 - Структура - Дополнительные параметры.
//  Владелец					 - УправляемаяФорма - Владелец новой формы объекта.
//  Уникальность				 - УникальныйИдентификатор - Идентификатор формы.
//  Окно						 - ОкноКлиентскогоПриложения - Окно приложения, в котором будет открыта форма.
//  НавигационнаяСсылка			 - Строка, Неопределено - Значение присваивается свойству НавигационнаяСсылка формы.
//  ОписаниеОповещенияОЗакрытии	 - ОписаниеОповещения - Содержит описание процедуры, которая вызвываетя при закрытии.
//  РежимОткрытияОкна			 - РежимОткрытияОкнаФормы - Указывает режим открытия окна формы клиентского приложения.
// 
// Возвращаемое значение:
//  УправляемаяФорма - Открытая форма объекта.
//
Функция ОткрытьФормуОбъекта(СсылкаНаОбъект, Параметры=Неопределено, Владелец=Неопределено, Уникальность=Неопределено, Окно=Неопределено, НавигационнаяСсылка=Неопределено, ОписаниеОповещенияОЗакрытии=Неопределено, РежимОткрытияОкна=Неопределено) Экспорт
	
	ИмяФормы = УправлениеДиалогомВызовСервера.ПолучитьИмяФормаОбъектаПоСсылке(СсылкаНаОбъект);
	
	Если ИмяФормы=Неопределено Тогда
		ПоказатьЗначение(ОписаниеОповещенияОЗакрытии, СсылкаНаОбъект);
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Параметры)=Тип("Структура") Тогда
		Параметры = Новый Структура();
	КонецЕсли;
	
	Параметры.Вставить("Ключ", СсылкаНаОбъект);
	
	Возврат ОткрытьФорму(ИмяФормы, Параметры, Владелец, Уникальность, Окно, НавигационнаяСсылка, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкна);
	
КонецФункции // ОткрытьФормуОбъекта()

// Открытие дополнительной формы объекта
//
// Параметры:
//  Форма                  - УправляемаяФорма     - Форма, в которой возникло событие.
//  СсылкаНаОбъект         - ЛюбаяСсылка          - Ссылка на текущий объект.
//  ИмяДополнительнойФормы - Строка               - Имя дополнительной формы.
//  Объект                 - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ОткрытьДополнительнуюФормуОбъекта(Форма, СсылкаНаОбъект, ИмяДополнительнойФормы=Неопределено, Объект = Неопределено) Экспорт
	
	// Проверим, имеется ли у объекта альтернативная форма редактирования
	Если НЕ ЗначениеЗаполнено(ИмяДополнительнойФормы) Тогда
		ИмяДополнительнойФормы = УправлениеДиалогомВызовСервера.ПолучитьИмяДополнительнойФормыОбъекта(СсылкаНаОбъект);
	КонецЕсли;
	
	// Формируем структуру параметров открытия дополнительной формы объекта
	ПараметрыФормы = Новый Структура("Объект,Ссылка,ТолькоПросмотр,Модифицированность");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Форма);
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	ПараметрыФормы.Объект = Объект;
	
	// Проверяем есть ли реквизит Объект в форме и какого он типа
	Если НЕ ТипЗнч(ПараметрыФормы.Объект)=Тип("ДанныеФормыСтруктура") Тогда
		ПараметрыФормы.Ссылка = СсылкаНаОбъект;
	Иначе
		ПараметрыФормы.Ссылка = ПараметрыФормы.Объект.Ссылка;
	КонецЕсли;
	
	ОбработкаРезультатаЗакрытия = Новый ОписаниеОповещения("Подключаемый_ОткрытьДополнительнуюФормуОбъекта",
		УправлениеДиалогомКлиент,
		ПараметрыФормы);
	
	ИмяОткрываемойФормы = "ОбщаяФорма.ДополнительнаяФормаОбъектаКомментарий";
	
	// Если имеется дополнительная форма, произведем ее открытие
	Если ЗначениеЗаполнено(ИмяДополнительнойФормы) Тогда
		
		ИмяОткрываемойФормы = ИмяДополнительнойФормы;
		
	КонецЕсли;
	
	// Формируем описание обработчика перехвата закрытия формы
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, Форма,,,,ОбработкаРезультатаЗакрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьДополнительнуюФормуОбъекта()

// Подключаемая процедура по завершению открытия дополнительной формы объекта
//
// Параметры:
//  Результат - Структура - Результат открытия дополнительной формы.
//  Параметры -Структура  - Дополнительные параметры.
//
Процедура Подключаемый_ОткрытьДополнительнуюФормуОбъекта(Результат, Параметры) Экспорт
	
	// Если пользователь отказался от ввода, то прекращаем обработку
	Если КодВозвратаДиалога.Отмена = Результат ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если форма была открыта из доступного объекта, то просто обновим значение соответствующего поля.
	Если ТипЗнч(Параметры.Объект)=Тип("ДанныеФормыСтруктура") И НЕ Параметры.ТолькоПросмотр Тогда
		ЗаполнитьЗначенияСвойств(Параметры.Объект,Результат);
		Возврат;
	ИначеЕсли ТипЗнч(Параметры.Объект)=Тип("ДанныеФормыСтруктура") Тогда
		ЗаполнитьЗначенияСвойств(Параметры.Объект,Результат);
	КонецЕсли;
	
	// Вызываем служебную функцию обновления данных объекта по ссылке
	УправлениеДиалогомВызовСервера.ОбновитьЗначенияРеквизитовОбъектаПоСсылке(Параметры.Ссылка, Результат, Неопределено, ИСТИНА);
	
КонецПроцедуры // Подключаемый_ОткрытьДополнительнуюФормуОбъекта()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Форма                          - УправляемаяФорма   - Форма, в которой возникло событие.
//  Отказ                          - Булево - Признак отказа от создания формы.
//  ОбработчикПоложительногоОтвета - ОписаниеОповещения - Процедура в которую будет передано управление
//                                                        при положительном ответе на вопрос.
// 
// Возвращаемое значение:
//  Булево - Признак модифицированности данных формы.
//
Функция ПроверитьМодифицированностьДанныхПриЗакрытии(Форма,Отказ,ОбработчикПоложительногоОтвета) Экспорт
	
	Если Форма.Модифицированность Тогда
		
		Отказ = Истина;
		
		// Убедимся, что пользователь нажал закрыть не случайно.
		// Формируем описание обработчика перехвата закрытия формы.
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработчикПоложительногоОтвета",ОбработчикПоложительногоОтвета);
		ДополнительныеПараметры.Вставить("Форма",Форма);
		ОбработчикОтвета = Новый ОписаниеОповещения("Подключаемый_ПроверитьМодифицированностьДанныхПриЗакрытии", ЭтотОбъект, ДополнительныеПараметры);
		
		// Формируем текст вопроса
		Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаСписка" Тогда
			Если Форма.Корзина.Количество() > 0 Тогда
				ТекстВопроса = НСтр("ru = 'Данные корзины были изменены. Применить изменения?'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Данные были изменены. Применить изменения?'");
			КонецЕсли;
		Иначе
			ТекстВопроса = НСтр("ru = 'Данные были изменены. Применить изменения?'");
		КонецЕсли;
	
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ПроверитьМодифицированностьДанныхПриЗакрытии()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Структура - Содержит процедуру в которую будет передан ответ на вопрос
//                                        и формы из которой вызвано оповещение.
//
Процедура Подключаемый_ПроверитьМодифицированностьДанныхПриЗакрытии(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Форма = ДополнительныеПараметры.Форма;
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
	ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПоложительногоОтвета);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ПроверитьМодифицированностьДанныхПриЗакрытии()

// Производит групповую установку/снятие отметки в поле флажка любой коллекции
//
// Параметры:
//  Коллекция - ДанныеФормыКоллекция - Коллекция, в которой происходит изменение.
//  Поле - Строка - Имя поля, которое будет изменено.
//  Значение - КомандаФормы - Команда, в которой возникло данное событие.
//
Процедура ГрупповоеИзменениеПоляФлажка(Коллекция, Поле, Значение) Экспорт
	
	Если ТипЗнч(Значение)=Тип("КомандаФормы") Тогда
		Пометка = НЕ СтрНайти(Значение.Имя, "Снять");
	Иначе
		Пометка = Значение;
	КонецЕсли;
	
	Для каждого Элемент Из Коллекция Цикл
		Элемент[Поле] = Пометка;
	КонецЦикла;
	
КонецПроцедуры // ГрупповоеИзменениеПоляФлажка()

// Выполняет эмуляцию нажатия клавиш по закреплению формы справа
//
Процедура ЗакрепитьФорму() Экспорт
	
	#Если НЕ МобильныйКлиент И НЕ ВебКлиент Тогда
	
	Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		
		WSHShell = Новый COMОбъект("WScript.Shell");
		WSHShell.SendKeys("%(-)");
		WSHShell.SendKeys("{DOWN 1}");
		WSHShell.SendKeys("{RIGHT}");
		WSHShell.SendKeys("{DOWN 3}");
		WSHShell.SendKeys("{ENTER}");
	КонецЕсли;
	
	#КонецЕсли

		
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ОБЩЕГО НАЗНАЧЕНИЯ

// Общий обработчик события возникающего при нажатии программно добавленной кнопки.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - Форма, в которой возникло событие.
//  Команда       - КомандаФормы               - Команда, в которой возникло данное событие.
//  ТекущиеДанные - ДокументСсылка             - Ссылка, для которой выполняется обработка события.
//  Окно          - ОкноКлиентскогоПриложения  - Содержит окно, в котором требуется открыть форму.
//  ПараметрыДействия - Структура              - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаКомандыФормы(Форма, Команда, ТекущиеДанные, Окно=Неопределено, ПараметрыДействия = Неопределено) Экспорт
	
	// Получим признак существования текущей выделенной строки
	//@skip-check reading-attribute-from-database
	//@skip-check unknown-method-property
	ЕстьТекущаяСтрока = Не (
		ТекущиеДанные = Неопределено
		Или ЕстьРеквизитНаКлиенте(ТекущиеДанные,"ГруппировкаСтроки")
		И ЗначениеЗаполнено(ТекущиеДанные.ГруппировкаСтроки)
	);
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура();
	КонецЕсли;
		
	// Обработаем в зависимости от выбранной команды
	Если Команда.Имя="ПоискЗаменаЗначений" И ЕстьТекущаяСтрока Тогда
		ОткрытьФорму("Обработка.ПоискЗаменаЗначений.Форма", Новый Структура("ЗаменяемыйОбъект", ТекущиеДанные.Ссылка), Форма);
		
	ИначеЕсли Команда.Имя="ЖурналРегистрации" И ЕстьТекущаяСтрока Тогда
		ПараметрыФормы = Новый Структура("Данные", ТекущиеДанные.Ссылка);
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, Форма);
		
	ИначеЕсли Команда.Имя="ДополнительныеСведения" И ЕстьТекущаяСтрока Тогда
		ОткрытьФорму("ОбщаяФорма.РедактированиеДополнительныхСведений", Новый Структура("Ссылка,ТолькоПросмотр", ТекущиеДанные.Ссылка, Форма.ТолькоПросмотр), Форма);		
	ИначеЕсли Команда.Имя="ИзменитьВыделенные" И ЕстьТекущаяСтрока Тогда
		ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Форма.Элементы.Список);
		
	ИначеЕсли Команда.Имя="УтверждениеДокументовСтатусИсторияДокументов" И ЕстьТекущаяСтрока Тогда
		
		// Вывод истории изменения статуса утверждения документа.
		УтверждениеДокументовКлиент.ОбработкаКомандыФормы(Форма, Команда, ТекущиеДанные.Ссылка);
		
	ИначеЕсли Команда.Имя="ДополнительнаяФорма" И ЕстьТекущаяСтрока Тогда
		УправлениеДиалогомКлиент.ОткрытьДополнительнуюФормуОбъекта(Форма, ТекущиеДанные.Ссылка, Форма.ИмяДополнительнойФормы);
		
	Иначе
		
		ЗащищенныеФункцииКлиент.ОбработкаКомандыГруппировкиПоКолонке(Форма,Команда,ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаКомандыФормы()

// Общий обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  Форма         - УправляемаяФорма          - Форма, в которой возникло событие.
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//  Объект     - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Булево - признак возможности дальнейшей обработки события
//
Функция ОбработкаРезультатаОповещения(Форма, РезультатОповещения, ДополнительныеПараметры=Неопределено, Объект = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Обработаем в зависимости от переданного параметра события
	Если ДополнительныеПараметры="КомандаФормы" Тогда
		Форма.Подключаемый_ОбработкаКомандыФормы(РезультатОповещения);
		Возврат ЛОЖЬ;
		
	ИначеЕсли ДополнительныеПараметры="РасширенноеРедактированиеПоляКомментарий" Тогда
		Если НЕ Объект.Комментарий = СокрЛП(РезультатОповещения) 
			И НЕ Форма.ТолькоПросмотр Тогда 
				Объект.Комментарий = СокрЛП(РезультатОповещения);
				Форма.Модифицированность = Истина;	
			ИначеЕсли НЕ Объект.Комментарий = СокрЛП(РезультатОповещения) Тогда	 
				Результат = Новый Структура();
				Результат.Вставить("Комментарий",  СокрЛП(РезультатОповещения));
	
				УправлениеДиалогомВызовСервера.ОбновитьЗначениеПоляКомментарий(Объект.Ссылка, Результат); 
				Форма.Прочитать();
		КонецЕсли;
		
		Возврат ЛОЖЬ;
		
	ИначеЕсли ДополнительныеПараметры="РазрешитьРедактированиеРеквизитовОбъекта" И РезультатОповещения Тогда
		Возврат ЛОЖЬ;
		
	Иначе
		
		// Возвращаем признак того что действие не обработано
		Возврат ИСТИНА;
		
	КонецЕсли;
	
КонецФункции // ОбработкаРезультатаОповещения()

// Обработчик выбора дополнительных команд печати
//
// Параметры:
//  ОписаниеКоманды - Структура - Параметры выбранной команды.
// 
// Возвращаемое значение:
//  Булево - Признак дальнейшего выполнения
//
Функция ОбработкаКомандыПечати(ОписаниеКоманды) Экспорт
	
	Если СтрНайти(ОписаниеКоманды.Идентификатор, "ПараметрыПечати") > 0 Тогда
		ОткрытьФорму("ОбщаяФорма.ПараметрыПечати", Новый Структура("Ссылка", ОписаниеКоманды.ОбъектыПечати[0]), ОписаниеКоманды.Форма,,,, Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ОписаниеКоманды.Форма, "ПараметрыПечатиСписок"));
		Возврат ЛОЖЬ;
	ИначеЕсли СтрНайти(ОписаниеКоманды.Идентификатор, "ПечатьРеестра") > 0 Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Возврат ЛОЖЬ;
	
КонецФункции // ОбработкаКомандыПечати()

// Общий обработчик события возникающего при нажатии кнопки "Подбор номенклатуры".
//
// Параметры:
//  Форма					- УправляемаяФорма		- Форма, в которой возникло событие.
//  ЦеныПоКонтрагенту		- Булево				- Обозначает необходимость получать цены контрагента
//  ИмяТабличнойЧасти		- Строка				- Имя таблицы, для которой открывается форма подбора
//  ИмяРеквизитаКоличество	- Строка				- Имя реквизита количества в документе может отличаться от стандартного
//  ЕстьЯчейка				- Булево				- Обозначает необходимость учитывать реквизит "Ячейка" в табличной части
//  ПараметрыДействия		- Структура				- Набор параметров, использующихся при выполнения операции.
//  Объект					- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
Процедура ОткрытьПодборНоменклатуры(Форма,
		ЦеныПоКонтрагенту = Ложь,
		ИмяТабличнойЧасти = "Товары",
		ИмяРеквизитаКоличество = "Количество",
		ЕстьЯчейка = Ложь,
		ПараметрыДействия = Неопределено,
		Объект = Неопределено) Экспорт
	
	КлючеваяОперация = "ПодборНоменклатуры";
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
		
	// Инициализируем структуру параметров действия
	Если НЕ ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		ПараметрыДействия = Новый Структура();
	КонецЕсли;
	
	ПолучитьОсновнойОбъектФормы(Форма, объект);
	
	// Инициализируем структуру основных параметры подбора товаров в документ
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("ИмяТабличнойЧасти",      ИмяТабличнойЧасти);
	ПараметрыПодбора.Вставить("ИмяРеквизитаКоличество", ИмяРеквизитаКоличество);
	ПараметрыПодбора.Вставить("ЕстьЯчейка",             ЕстьЯчейка);
	ПараметрыПодбора.Вставить("ПараметрыДействия",      ПараметрыДействия);
	
	// Создаем и заполняем структуру параметров открытия формы номенклатуры
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ПараметрыПодбора",      ПараметрыПодбора);
	ПараметрыОткрытия.Вставить("РежимВыбора",           ИСТИНА);
	ПараметрыОткрытия.Вставить("ПодразделениеКомпании", ПолучитьЗначениеПараметраСтруктуры(Объект, "ПодразделениеКомпании"));
	ПараметрыОткрытия.Вставить("Контрагент",            ПолучитьЗначениеПараметраСтруктуры(Объект, "Контрагент"));
	ПараметрыОткрытия.Вставить("Валюта",                ПолучитьЗначениеПараметраСтруктуры(Объект, "ВалютаДокумента"));
	ПараметрыОткрытия.Вставить("КурсВалюты",            ПолучитьЗначениеПараметраСтруктуры(Объект, "КурсДокумента"));
	ПараметрыОткрытия.Вставить("ТипЦен",                ПолучитьЗначениеПараметраСтруктуры(Объект, "ТипЦен"));
	ПараметрыОткрытия.Вставить("СкладКомпании",         ПолучитьЗначениеПараметраСтруктуры(Объект, "СкладКомпании"));
	
	// Перезаполним и дополним по переданным параметрам
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОткрытия, ПараметрыДействия, Истина);
	
	// Если в подборе следует показывать цены организации, очистим поле Контрагент
	Если НЕ ЦеныПоКонтрагенту Тогда
		ПараметрыОткрытия.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	
	// Получим назначенные на поле ввода Номенклатуры параметры отбора
	Если НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти+"Номенклатура")=Неопределено Тогда
		
		Элемент = Форма.Элементы[ИмяТабличнойЧасти+"Номенклатура"];
		ПараметрыОтбора = Новый Структура();
		ПараметрыФормы = Новый Структура;
		
		Для каждого ПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
			
			Если СтрНачинаетсяС(ПараметрВыбора.Имя, "Отбор.") Тогда
				
				ПараметрыОтбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ПараметрВыбора.Значение);
				Продолжить;
				
			КонецЕсли;
			
			ПараметрыФормы.Вставить(СтрЗаменить(ПараметрВыбора.Имя, ".", ""), ПараметрВыбора.Значение);
			
		КонецЦикла;
		
		Для каждого ПараметрВыбора Из Элемент.СвязиПараметровВыбора Цикл
			Если ПараметрВыбора.Имя="ПоКодамПоставщика" Тогда
				ПараметрыОткрытия.Вставить("ПоКодамПоставщика", Вычислить("Форма."+ПараметрВыбора.ПутьКДанным));
			Иначе
				ПараметрыОтбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), Вычислить("Форма."+ПараметрВыбора.ПутьКДанным));
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		
	КонецЕсли;
	
	// Производим открытие формы подбора номенклатуры
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", ПараметрыОткрытия, Форма,,,, Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "ПодборНоменклатуры"), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьПодборНоменклатуры()

// Общий обработчик события возникающего при нажатии кнопки "Подбор партий".
//
// Параметры:
//  Форма				- УправляемаяФорма		- Форма, в которой возникло событие.
//  ПараметрыДействия	- Структура				- Набор параметров, использующихся при выполнения операции.
//  Объект				- ДанныеФормыСтруктура	- Объект, для которого выполняется обработка события.
//
Процедура ОткрытьПодборПартий(Форма, ПараметрыДействия=Неопределено, Объект = Неопределено) Экспорт
	
	// Инициализируем структуру параметров действия
	Если НЕ ТипЗнч(ПараметрыДействия)=Тип("Структура") Тогда
		ПараметрыДействия = Новый Структура();
	КонецЕсли;
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	// проверим заполнение
	Если (Объект.ХозОперация=ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровОтПокупателяКомиссия") ИЛИ Объект.ХозОперация=ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия")) И НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не указан договор комиссии.'"));
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не указан контрагент.'"));
		Возврат;
	КонецЕсли;
	
	// Инициализируем структуру основных параметры подбора товаров в документ
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Подбор",Истина);
	ПараметрыПодбора.Вставить("ДатаНачала",НачалоМесяца(Объект.Дата));
	ПараметрыПодбора.Вставить("ДатаКонца", Объект.Дата);
	ПараметрыПодбора.Вставить("ТекстЗапроса","");
	ПараметрыПодбора.Вставить("ДатаДокумента",Объект.Дата);
	ПараметрыПодбора.Вставить("ВалютаДокумента",Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("КурсДокумента",Объект.КурсДокумента);
	ПараметрыПодбора.Вставить("ХозОперация",Объект.ХозОперация);
	ПараметрыПодбора.Вставить("ВозвратНам",Ложь);
	ПараметрыПодбора.Вставить("СкладКомпании",Объект.СкладКомпании);
	ПараметрыПодбора.Вставить("Документ",Объект.ДокументОснование);
	ПараметрыПодбора.Вставить("Контрагент",Объект.Контрагент);
	ПараметрыПодбора.Вставить("ЗаполнитьОстатками",Ложь);
		
	Если Объект.ХозОперация=ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия") Тогда
		ПараметрыПодбора.Вставить("СтатусПартии",ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварПринятыйКомиссия"));
	ИначеЕсли Объект.ХозОперация=ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровПоставщику") Тогда
		ПараметрыПодбора.Вставить("СтатусПартии",ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварКупленный"));
	КонецЕсли;
	
	Если Объект.ХозОперация=ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия") ИЛИ Объект.ХозОперация=ПредопределенноеЗначение("Справочник.ХозОперации.ВозвратТоваровОтПокупателяКомиссия") Тогда
		ПараметрыПодбора.Вставить("ДоговорВзаиморасчетов",Объект.ДоговорВзаиморасчетов);
	КонецЕсли;
	
	Если Объект.Товары.Количество()>0 И ЕстьРеквизитНаКлиенте(Объект.Товары[0],"ДокументПродажи") Тогда
		ИмяКолонки = "ДокументПродажи";
	Иначе
		ИмяКолонки = "Партия";
	КонецЕсли;
	
	МассивТоваров = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТоваров = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Партия,Количество");
		ЗаполнитьЗначенияСвойств(СтрокаТоваров,СтрокаТЧ);
		СтрокаТоваров.Количество = СтрокаТЧ.Количество*СтрокаТЧ.Коэффициент;
		Если ИмяКолонки = "ДокументПродажи" Тогда
			СтрокаТоваров.Партия = СтрокаТЧ.ДокументПродажи;
		КонецЕсли;
		МассивТоваров.Добавить(СтрокаТоваров);
	КонецЦикла;
	ПараметрыПодбора.Вставить("СписокТоваров",МассивТоваров);
	
	// Перезаполним по переданным параметрам
	ЗаполнитьЗначенияСвойств(ПараметрыПодбора, ПараметрыДействия);
	
	// Производим открытие формы подбора номенклатуры
	ОткрытьФорму("ПланВидовХарактеристик.ТипыПартий.Форма.ФормаВыбораПартий", ПараметрыПодбора, Форма,,,, Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "ПодборПоПартиям"), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьПодборНоменклатуры()

// Общий обработчик события возникающего при нажатии кнопки "Подбор по заказам".
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//  ПутьКСхемеКомпоновкиДанных - Строка - Указывает откуда необходимо взять схему компоновки
//                                        для формирования данных подбора
//  Отборы - Соответствие - Отборы которые необходимо наложить на запрос.
//                          Ключ - в поле отбора, значение - значение отбора. Вид сравнения "равно".
//  ИмяКолонкиКоличество - Строка - Имя колонки в таблице результата по которой производиться подбор.
//                                  Доступные значения "Заказано", "Резерв".
//  ИспользоватьЗаказыПокупателей - Булево - Признак необходимости использовать запрос к остаткам заказов покупателей.
//  ИспользоватьЗаказыВнутренние - Булево - Признак необходимости использовать запрос к остаткам заказов внутренних.
//  ДопПараметры - Структура - Дополнительные параметры подбора.
//  ВыводитьТолькоОстаткиПоЗаказам - Булево - Признак отбора только не распределенных и не зарезервированных заказов.
//  Заказ - ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказВнутренний - Документ отбор заказ.
//
Процедура ОткрытьПодборПоЗаказам(
	Форма,
	ПутьКСхемеКомпоновкиДанных = "",
	Отборы = Неопределено,
	ИмяКолонкиКоличество = "Заказано",
	ИспользоватьЗаказыПокупателей = Истина,
	ИспользоватьЗаказыВнутренние = Истина,
	ДопПараметры = Неопределено,
	ВыводитьТолькоОстаткиПоЗаказам = Ложь,
	Заказ = Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Отбор", Отборы);
	Если НЕ ПустаяСтрока(ПутьКСхемеКомпоновкиДанных) Тогда
		ПараметрыОткрытия.Вставить("ПутьКСхемеКомпоновкиДанных", ПутьКСхемеКомпоновкиДанных);
	КонецЕсли;
	
	Если Отборы = Неопределено Тогда
		Отборы = Новый Структура;
		Отборы.Вставить("ЗаказСервиса", Ложь);
	ИначеЕсли Отборы.Получить("ЗаказСервиса") = Неопределено Тогда
		Отборы.Вставить("ЗаказСервиса", Ложь);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ИмяКолонкиКоличество", ИмяКолонкиКоличество);
	ПараметрыОткрытия.Вставить("ИспользоватьЗаказыПокупателей"  , ИспользоватьЗаказыПокупателей);
	ПараметрыОткрытия.Вставить("ИспользоватьЗаказыВнутренние"   , ИспользоватьЗаказыВнутренние);
	ПараметрыОткрытия.Вставить("ВыводитьТолькоОстаткиПоЗаказам" , ВыводитьТолькоОстаткиПоЗаказам);
	ПараметрыОткрытия.Вставить("Заказ",                           Заказ);
	
	// Передадим ТЧ "РаспределениеЗаказа", если она есть в объекте, для контроля добавленных товаров в документ.
	Объект = Неопределено;
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	Если НЕ Объект = Неопределено И ЕстьРеквизитНаКлиенте(Объект, "РаспределениеЗаказа") Тогда
		РаспределениеЗаказа = Новый Массив;
		Для Каждого Строка Из Объект.РаспределениеЗаказа Цикл
			СтрокаСтруктура = Новый Структура("Номенклатура,Количество,ЗаказПокупателя", Строка.Номенклатура, Строка.Количество, Строка.ЗаказПокупателя);
			РаспределениеЗаказа.Добавить(СтрокаСтруктура);
		КонецЦикла;
		ПараметрыОткрытия.Вставить("РаспределениеЗаказа", РаспределениеЗаказа);
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить("Событие", "ПодборПоСпискуЗаказанного");
	Иначе
		ДопПараметры = "ПодборПоСпискуЗаказанного";
	КонецЕсли;
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, ДопПараметры);
	
	ОткрытьФорму(
		"Обработка.ПодборПоЗаказам.Форма",
		ПараметрыОткрытия,
		Форма,
		"ПодборПоЗаказам",
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьПодборПоЗаказам()

// Общий обработчик события возникающего при нажатии кнопки "Подбор опций".
//
// Параметры:
//  Форма                - УправляемаяФорма   - Форма, в которой возникло событие.
//  ИмяТабличнойЧасти    - Строка             - Имя таблицы, для которой открывается форма подбора.
//  ПараметрыДействия    - Структура          - Набор параметров, использующихся при выполнения операции.
//  ОбработчикОповещения - ОписаниеОповещения - Процедура - обработчик завершения подбора.
//
Процедура ОткрытьПодборОпций(
	Форма,
	ИмяТабличнойЧасти = "Опции",
	ПараметрыДействия = Неопределено,
	ОбработчикОповещения = Неопределено)Экспорт
	
	// Инициализируем структуру параметров действия
	Если НЕ ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		
		ПараметрыДействия = Новый Структура();
		
	КонецЕсли;
		
	ЭлементыИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	ПолноеИмя = ЭлементыИмени[0] + "." + ЭлементыИмени[1];
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	ПараметрыПодбора.Вставить("ПолноеИмяОбъекта",  ПолноеИмя);
	ПараметрыПодбора.Вставить("ПараметрыДействия", ПараметрыДействия);
	
	Если ОбработчикОповещения = Неопределено Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "ПодборОпций");
		
	КонецЕсли;
	
	// Создаем и заполняем структуру параметров открытия формы опций
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ПодборОпций", Истина);
	ПараметрыОткрытия.Вставить("ПараметрыПодбора", ПараметрыПодбора);
	
	// Получим назначенные на поле ввода Опции параметры отбора
	Если НЕ Форма.Элементы.Найти(ИмяТабличнойЧасти + "Опция") = Неопределено Тогда
		
		Элемент = Форма.Элементы[ИмяТабличнойЧасти + "Опция"];
		ПараметрыОтбора = Новый Структура();
		
		Для каждого ПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
			
			Если СтрНачинаетсяС(ПараметрВыбора.Имя, "Отбор.") Тогда
				
				ПараметрыОтбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ПараметрВыбора.Значение);
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ПараметрВыбора Из Элемент.СвязиПараметровВыбора Цикл
			
			ПараметрыОтбора.Вставить(
				СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""),
				Вычислить("Форма." + ПараметрВыбора.ПутьКДанным)
			);
			
		КонецЦикла;
		
		Если ПараметрыДействия.Свойство("Отбор") Тогда
			
			Для Каждого Отбор Из ПараметрыДействия.Отбор Цикл
				ПараметрыОтбора.Вставить(Отбор.Ключ, Отбор.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.Опции.ФормаСписка",
		ПараметрыОткрытия,
		Форма,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка результата выполнения

// Выводит результат выполнения какой-либо операции.
//
// Предназначена только для отображения результата работы сервера на клиенте,
// не предназначена для отображения промежуточных стадий - диалогов и т.п..
//
// Параметры:
//	Форма - УправляемаяФорма - Форма, для которой требуется вывод.
//	Результат - Структура				 - Результат выполнения операции, который необходимо вывести.
//		* ВыводОповещения				- Структура - Всплывающее оповещение.
//			** Использование			- Булево - Выводить оповещение.
//			** Заголовок				- Строка - Заголовок оповещения.
//			** Текст					- Строка - Текст оповещения.
//			** Ссылка					- Строка - Навигационная гиперссылка текста.
//			** Картинка					- Картинка - Картинка оповещения.
//		* ВыводСообщения 				- Структура - Сообщение формы, привязанное к реквизиту.
//			** Использование			- Булево - Выводить сообщение.
//			** Текст					- Строка - Текст сообщения.
//			** ПутьКРеквизитуФормы		- Строка - Путь к реквизиту формы, к которому относится сообщение.
//		* ВыводПредупреждения			- Структура - Окно предупреждения, блокирующее весь интерфейс.
//			** Использование			- Булево - Выводить предупреждение.
//			** Заголовок				- Строка - Заголовок окна.
//			** Текст					- Строка - Текст предупреждения.
//			** ТекстОшибок				- Строка - Необязательный. Тексты ошибок, которые при желании может просмотреть пользователь.
//			** ПутьКРеквизитуФормы		- Строка - Необязательный. Путь к реквизиту формы, значение которого вызывало ошибку.
//		* ОповещениеФорм				- Структура, Массив из Структура - справка к методу глобального контекста Оповестить.
//			** Использование			- Булево - Оповещать открытые формы.
//			** ИмяСобытия				- Строка - Имя события, которое используется для первичной
//													идентификации сообщений принимающими формами.
//			** Параметр					- Произвольный - Набор данных, которые используются принимающей формой для обновления состава.
//			** Источник					- Произвольный - Источник оповещения, например форма-источником.
//		* ОповещениеДинамическихСписков	- Структура - справка к методу глобального контекста ОповеститьОбИзменении.
//			** Использование			- Булево - Оповещать динамические списки.
//			** СсылкаИлиТип				- Произвольный - Ссылка, тип, или массив типов, которые необходимо обновить.
//
Процедура ПоказатьРезультатВыполнения(Форма, Результат) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") И ТипЗнч(Результат) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ВыводОповещения") И Результат.ВыводОповещения.Использование Тогда
		Оповещение = Результат.ВыводОповещения;
		ПоказатьОповещениеПользователя(Оповещение.Заголовок, Оповещение.Ссылка, Оповещение.Текст, Оповещение.Картинка);
	КонецЕсли;
	
	Если Результат.Свойство("ВыводСообщения") И Результат.ВыводСообщения.Использование Тогда
		Сообщение = Новый СообщениеПользователю;
		Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
			Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
		КонецЕсли;
		Сообщение.Текст = Результат.ВыводСообщения.Текст;
		Сообщение.Поле  = Результат.ВыводСообщения.ПутьКРеквизитуФормы;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Результат.Свойство("ВыводПредупреждения") И Результат.ВыводПредупреждения.Использование Тогда
		ВыводПредупреждения = Результат.ВыводПредупреждения;
		Если ЗначениеЗаполнено(ВыводПредупреждения.ТекстОшибок) Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(1, НСтр("ru = 'Показать отчет'"));
			Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения")
				И ЗначениеЗаполнено(ВыводПредупреждения.ПутьКРеквизитуФормы) Тогда
				
				Кнопки.Добавить(2, НСтр("ru = 'Перейти к реквизиту'"));
			КонецЕсли;
			Кнопки.Добавить(0, НСтр("ru = 'Продолжить'"));
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ВыводПредупреждения", ВыводПредупреждения);
			ДополнительныеПараметры.Вставить("Форма", Форма);
			Обработчик = Новый ОписаниеОповещения("ПоказатьРезультатВыполненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПоказатьВопрос(Обработчик, ВыводПредупреждения.Текст, Кнопки, , 1, ВыводПредупреждения.Заголовок);
		Иначе
			ПоказатьПредупреждение(, ВыводПредупреждения.Текст, , ВыводПредупреждения.Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеФорм") Тогда
		Если ТипЗнч(Результат.ОповещениеФорм) = Тип("Структура") Или ТипЗнч(Результат.ОповещениеФорм) = Тип("ФиксированнаяСтруктура") Тогда
			ОповещениеФорм = Результат.ОповещениеФорм;
			Если ОповещениеФорм.Использование Тогда
				Оповестить(ОповещениеФорм.ИмяСобытия, ОповещениеФорм.Параметр, ОповещениеФорм.Источник);
			КонецЕсли;
		Иначе
			Для Каждого ОповещениеФорм Из Результат.ОповещениеФорм Цикл
				Если ОповещениеФорм.Использование Тогда
					Оповестить(ОповещениеФорм.ИмяСобытия, ОповещениеФорм.Параметр, ОповещениеФорм.Источник);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеДинамическихСписков") И Результат.ОповещениеДинамическихСписков.Использование Тогда
		Если ТипЗнч(Результат.ОповещениеДинамическихСписков.СсылкаИлиТип) = Тип("Массив") Тогда
			Для Каждого СсылкаИлиТип Из Результат.ОповещениеДинамическихСписков.СсылкаИлиТип Цикл
				ОповеститьОбИзменении(СсылкаИлиТип);
			КонецЦикла;
		Иначе
			ОповеститьОбИзменении(Результат.ОповещениеДинамическихСписков.СсылкаИлиТип);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ответа на вопрос при выводе результата выполнения.
//
// Параметры:
//	Ответ     - Число - Код ответа.
//	Результат - Структура				 - Результат выполнения операции, который необходимо вывести.
//		* ВыводОповещения				- Структура - Всплывающее оповещение.
//			** Использование			- Булево - Выводить оповещение.
//			** Заголовок				- Строка - Заголовок оповещения.
//			** Текст					- Строка - Текст оповещения.
//			** Ссылка					- Строка - Навигационная гиперссылка текста.
//			** Картинка					- Картинка - Картинка оповещения.
//		* ВыводСообщения 				- Структура - Сообщение формы, привязанное к реквизиту.
//			** Использование			- Булево - Выводить сообщение.
//			** Текст					- Строка - Текст сообщения.
//			** ПутьКРеквизитуФормы		- Строка - Путь к реквизиту формы, к которому относится сообщение.
//		* ВыводПредупреждения			- Структура - Окно предупреждения, блокирующее весь интерфейс.
//			** Использование			- Булево - Выводить предупреждение.
//			** Заголовок				- Строка - Заголовок окна.
//			** Текст					- Строка - Текст предупреждения.
//			** ТекстОшибок				- Строка - Необязательный. Тексты ошибок, которые при желании может просмотреть пользователь.
//			** ПутьКРеквизитуФормы		- Строка - Необязательный. Путь к реквизиту формы, значение которого вызывало ошибку.
//		* ОповещениеФорм				- Структура, Массив из Структура - Оповестить() справка к методу глобального контекста .
//			** Использование			- Булево - Оповещать открытые формы.
//			** ИмяСобытия				- Строка - Имя события, которое используется для первичной
//													идентификации сообщений принимающими формами.
//			** Параметр					- Произвольный - Набор данных, которые используются принимающей формой для обновления состава.
//			** Источник					- Произвольный - Источник оповещения, например форма-источником.
//		* ОповещениеДинамическихСписков	- Структура - ОповеститьОбИзменении() справка к методу глобального контекста.
//			** Использование			- Булево - Оповещать динамические списки.
//			** СсылкаИлиТип				- Произвольный - Ссылка, тип, или массив типов, которые необходимо обновить.
//
Процедура ПоказатьРезультатВыполненияЗавершение(Ответ, Результат) Экспорт
	
	Если Ответ = 1 Тогда
		
		ЗаголовокДокумента = Результат.ВыводПредупреждения.Текст;
		ЗаголовокДокумента = СтрЗаменить(ЗаголовокДокумента, Символы.ПС, "; ");
		Если СтрДлина(ЗаголовокДокумента) > 75 Тогда
			ЗаголовокДокумента = Лев(ЗаголовокДокумента, 72) + "...";
		КонецЕсли;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(Результат.ВыводПредупреждения.ТекстОшибок);
		ТекстовыйДокумент.Показать(ЗаголовокДокумента);
		
	ИначеЕсли Ответ = 2 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения = Результат.Форма.УникальныйИдентификатор;
		Сообщение.Текст = Результат.ВыводПредупреждения.Текст;
		Сообщение.Поле  = Результат.ВыводПредупреждения.ПутьКРеквизитуФормы;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события возникающего при нажатии кнопки "Подбор авансов".
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  РасчетыСПокупателем  - Булево           - Признак того, что подбираем авансы покупателя.
//  Период               - Дата             - Период формирования остатков по авансам.
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ОткрытьПодборАвансов(
		Форма,
		РасчетыСПокупателем = Истина,
		Объект = Неопределено,
		Знач СуммаОплаты = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если Объект.Ссылка.Пустая() Тогда
		Период = Неопределено;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		Период = ?(Объект.Состояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Закрыт")
			ИЛИ Объект.Состояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Выполнен"),
			Объект.ДатаЗакрытия,
			Объект.ДатаОкончания);
	Иначе
		Период = Объект.Дата;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "ПодборАвансов");
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Период", Период);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	ПараметрыПодбора.Вставить("РасчетыСПокупателем", РасчетыСПокупателем);
	ПараметрыПодбора.Вставить("ЗачтенныеАвансы", Объект.ЗачетАвансов);
	ПараметрыПодбора.Вставить(
		"СуммаДокумента",
		?(СуммаОплаты = Неопределено,
			УправлениеДиалогомВызовСервера.СуммовыеИтогиПоДокументу(Объект).СуммаДокумента,
			СуммаОплаты));
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("КурсДокумента", Объект.КурсДокумента);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборАвансов",
		ПараметрыПодбора,
		Форма,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Общий обработчик события возникающего при нажатии кнопки "Подбор оплаты".
//
// Параметры:
//  Форма                - УправляемаяФорма - Форма, в которой возникло событие.
//  РасчетыСПокупателем  - Булево           - Признак того, что подбираем авансы покупателя.
//  Период               - Дата             - Период формирования остатков по авансам.
//  Объект               - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ОткрытьПодборОплаты(
		Форма,
		РасчетыСПокупателем = Истина,
		Объект = Неопределено,
		Знач СуммаОплаты = Неопределено) Экспорт
	
	ПолучитьОсновнойОбъектФормы(Форма, Объект);
	
	Если Объект.Ссылка.Пустая() Тогда
		Период = Неопределено;
	Иначе
		Период = Объект.Дата;
	КонецЕсли;
	
	СуммаКОплате = Объект.СуммаДокумента;
	
	Для Каждого ТекущаяСтрока Из Объект.Состав Цикл
		
		Если ТекущаяСтрока.СпособЗачетаОплаты =
				ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.ПоДокументу") Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаКОплате = СуммаКОплате - ТекущаяСтрока.Сумма;
		
	КонецЦикла;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "ПодборОплаты");
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Период", Период);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	ПараметрыПодбора.Вставить("РасчетыСПокупателем", РасчетыСПокупателем);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("КурсДокумента", Объект.КурсДокумента);
	ПараметрыПодбора.Вставить("КурсВалютыВзаиморасчетов", Объект.КурсВалютыВзаиморасчетов);
	ПараметрыПодбора.Вставить("ЗачтенныеОплаты", Объект.Состав);
	ПараметрыПодбора.Вставить("СуммаДокумента", СуммаКОплате);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборОплаты",
		ПараметрыПодбора,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти