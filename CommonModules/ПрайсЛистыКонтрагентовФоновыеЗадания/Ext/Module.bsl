
#Область ПрограммныйИнтерфейс

// Автозагрузка прайс-листов контрагентов.
//
// Параметры:
//  СтруктураПараметров - Структура - Структура параметров.
//
Процедура АвтозагрузкаПрайсЛистовКонтрагентов(Знач СтруктураПараметров = Неопределено) Экспорт
	Перем ПрайсЛистыСАвтозагрузкой;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АвтозагрузкаПрайсЛистовКонтрагентов);
	
	
	// проверим наличие прайс-листов с настроенной автозагрузкой
	Если НЕ РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.
		ЕстьПрайсЛистыСАвтозагрузкой(ПрайсЛистыСАвтозагрузкой) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// выполним загрузку новых файлов
	Для Каждого ПрайсЛист Из ПрайсЛистыСАвтозагрузкой Цикл
		Справочники.ПрайсЛистыКонтрагентов.ЗагрузитьНовыйФайл(
			ПрайсЛист.ПрайсЛист,
			ПрайсЛист.Транспорт,
			ПрайсЛист.ХешФайла,
			ПрайсЛист.ДатаФайла,
			ПрайсЛист.РазмерФайла);
	КонецЦикла;
КонецПроцедуры

// Автообновление прайс-листов контрагентов
//
// Параметры:
//  СтруктураПараметров - Структура - Структура параметров.
//
Процедура АвтообновлениеПрайсЛистовКонтрагентов(Знач СтруктураПараметров = Неопределено) Экспорт
		
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.АвтообновлениеПрайсЛистовКонтрагентов);
	ПрайсЛистыДляОбновления = РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.ДайПрайсЛистыДляОбновления();
	
	Если ПрайсЛистыДляОбновления.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ПрайсЛист Из ПрайсЛистыДляОбновления Цикл
		
		НастройкиОбновления = РегистрыСведений
			.ПрайсЛистыКонтрагентовАвтообновление
			.ПрочитатьНастройкиАвтообновления(ПрайсЛист);
		Справочники.ПрайсЛистыКонтрагентов.ПроверитьНаличиеНовыхФайловВКаталоге(ПрайсЛист, НастройкиОбновления);
		
	КонецЦикла;
	
	КоличествоОдновременноЗагружаемыхПрайсЛистов = Константы.КоличествоОдновременноЗагружаемыхПрайсЛистов.Получить();
	КоличествоЗагружаемыхПрайсЛистов = 0;
	Если КоличествоОдновременноЗагружаемыхПрайсЛистов > 0 Тогда
		
		КоличествоЗагружаемыхПрайсЛистов = КоличествоВыполняемыхФоновыхЗаданий();
		Если КоличествоЗагружаемыхПрайсЛистов >= КоличествоОдновременноЗагружаемыхПрайсЛистов Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросТекст = 
	"ВЫБРАТЬ ПЕРВЫЕ %1
	|	ЖурналЗагрузки.ПрайсЛист КАК ПрайсЛист,
	|	ЖурналЗагрузки.СтрокаПодключения,
	|	ЖурналЗагрузки.ПрайсЛист.ФайлИсточникДанных     КАК ФайлИсточникДанных,
	|	ЖурналЗагрузки.СтрокаПодключенияАрхив           КАК СтрокаПодключенияАрхив,
	|	ЖурналЗагрузки.ПрайсЛист.РасширениеФайла        КАК РасширениеФайла,
	|	ЖурналЗагрузки.ПрайсЛист.Разделитель            КАК Разделитель
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СрезПоследних(, ) КАК ЖурналЗагрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовАвтообновление КАК Автообновление
	|		ПО ЖурналЗагрузки.ПрайсЛист = Автообновление.ПрайсЛист
	|ГДЕ
	|	(ЖурналЗагрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗагрузкиПрайсЛистов.НовыйФайл) ИЛИ
	|		ЖурналЗагрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗагрузкиПрайсЛистов.Ожидает)) И
	|		Автообновление.ИспользоватьАвтообновление
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналЗагрузки.Период";
	
	Если КоличествоОдновременноЗагружаемыхПрайсЛистов > 0 Тогда
		
		КоличествоПолучаемыхПрайсЛистов = КоличествоОдновременноЗагружаемыхПрайсЛистов - КоличествоЗагружаемыхПрайсЛистов;
		Запрос = Новый Запрос(СтрШаблон(ЗапросТекст, КоличествоПолучаемыхПрайсЛистов));
		
	Иначе
		
		Запрос = Новый Запрос(СтрЗаменить(ЗапросТекст, "ПЕРВЫЕ %1", ""));
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ФайлИсточникДанных Тогда
				// Подготовка параметров фонового задания
				ИдентификаторЗадания = Новый УникальныйИдентификатор;
				
				МассивПараметров = Новый Массив;
				
				ПараметрыПроцедуры = Новый Структура;
				ПараметрыПроцедуры.Вставить("Ссылка"               , Выборка.ПрайсЛист);
				ПараметрыПроцедуры.Вставить("ПутьКФайлу"           , Выборка.СтрокаПодключения);
				ПараметрыПроцедуры.Вставить("ИдентификаторЗадания" , ИдентификаторЗадания);
				ПараметрыПроцедуры.Вставить("Расширение"           , Выборка.РасширениеФайла);
				ПараметрыПроцедуры.Вставить("Разделитель"          , Выборка.Разделитель);
				Если ЗначениеЗаполнено(Выборка.СтрокаПодключенияАрхив) Тогда
					ПараметрыПроцедуры.Вставить("ПутьКАрхифу", Выборка.СтрокаПодключенияАрхив);
				КонецЕсли;
				
				МассивПараметров.Добавить(ПараметрыПроцедуры);
				
				// адрес хранилища
				МассивПараметров.Добавить(ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторЗадания));
				
				// запуск фонового задания
				ФоновыеЗадания.Выполнить(
					"ПрайсЛистыКонтрагентовФоновыеЗадания.ЗагрузитьПрайсЛистИзФайла",
					МассивПараметров,
					ИдентификаторЗадания,
					"[ЗагрузкаПрайсЛиста]");
			Иначе
					// Подготовка параметров фонового задания
				ИдентификаторЗадания = Новый УникальныйИдентификатор;
				
				МассивПараметров = Новый Массив;
				
				ПараметрыПроцедуры = Новый Структура;
				ПараметрыПроцедуры.Вставить("ПрайсЛист"            , Выборка.ПрайсЛист);
				ПараметрыПроцедуры.Вставить("СтрокаПодключения"    , Выборка.СтрокаПодключения);
				ПараметрыПроцедуры.Вставить("ИдентификаторЗадания" , ИдентификаторЗадания);
				
				МассивПараметров.Добавить(ПараметрыПроцедуры);
				
				// адрес хранилища
				МассивПараметров.Добавить(ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторЗадания));
				
				// запуск фонового задания
				ФоновыеЗадания.Выполнить(
					"ПрайсЛистыКонтрагентовФоновыеЗадания.ЗагрузитьПрайсЛистИзADO",
					МассивПараметров,
					ИдентификаторЗадания,
					"[ЗагрузкаПрайсЛиста]");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Загрузка прайс-листа из файла
//
// Параметры:
//  ПараметрыПроцедуры - Структура - Структура параметров.
//  АдресХранилища     - Строка    - Адрес хранилища.
//
Процедура ЗагрузитьПрайсЛистИзФайла(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	Справочники.ПрайсЛистыКонтрагентов.ЗагрузитьПрайсЛистИзФайла(ПараметрыПроцедуры, АдресХранилища);
	
КонецПроцедуры

// Загрузка прайс-листа из ADO
//
// Параметры:
//  ПараметрыПроцедуры - Структура - Структура параметров.
//  АдресХранилища     - Строка    - Адрес хранилища.
//
Процедура ЗагрузитьПрайсЛистИзADO(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	Справочники.ПрайсЛистыКонтрагентов.ЗагрузитьПрайсЛистИзADO(ПараметрыПроцедуры, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоличествоВыполняемыхФоновыхЗаданий()
	
	Отбор = Новый Структура("Наименование,Состояние", "[ЗагрузкаПрайсЛиста]", СостояниеФоновогоЗадания.Активно);
	Возврат ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	
КонецФункции

#КонецОбласти