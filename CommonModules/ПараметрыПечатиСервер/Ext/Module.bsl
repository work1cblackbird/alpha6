
#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьКомандуПараметровПечати(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	СтрокиИсточники = НастройкиФормы.Источники.Строки;
	Если СтрокиИсточники.Количество() Тогда
		ОбъектМетаданных = СтрокиИсточники[0].Метаданные;
	КонецЕсли;
		
	// Если используются дополнительные реквизиты, то проверим настройки параметров печати.
	Если Не СтрокиИсточники[0].ЭтоЖурналДокументов И ЕстьРеквизит(ОбъектМетаданных, , "ДополнительныеРеквизиты") Тогда
		
		Если Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
			ЕстьРеквизитыПечати = Истина;
		Иначе
			ЕстьРеквизитыПечати = Ложь;
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
			СсылкаНаОбъект  = МенеджерОбъекта.ПустаяСсылка();
			
			// Получение списка основного набора свойств
			НаборыСвойств = ПолучитьОсновнойНаборСвойствДляОбъекта(СсылкаНаОбъект);
			
			Если НаборыСвойств = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			// Получение списка доступных наборов дополнительных реквизитов со свойством только для печати.
			Для каждого Строка Из НаборыСвойств.ДополнительныеРеквизиты Цикл
				Если Строка.Свойство.ТолькоДляПечати Тогда
					ЕстьРеквизитыПечати=Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Если есть дополнительные реквизиты печати, добавим команду печати "Параметры печати".
		Если ЕстьРеквизитыПечати Тогда
			
			Команда 					= Команды.Добавить();
			Команда.Идентификатор 		= "ПараметрыПечати";
			Команда.Представление 		= НСтр("ru = 'Параметры печати'"); 
			Команда.Вид 				= "Печать";
			Команда.Подменю 			= "ПодменюКомплектыПечати";
			Команда.МножественныйВыбор 	= Истина;
			Команда.Обработчик 			= "ПараметрыПечатиКлиент.ОбработкаКомандыПечати";
			Команда.РежимЗаписи 		= "НеЗаписывать";
			Команда.Порядок		 		= 50; 
			Команда.ФункциональныеОпции = "ИспользоватьДополнительныеРеквизитыИСведения";
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает основной набор свойств владельца.
//
// Параметры:
//  ВладелецСвойств - Ссылка или Объект владельца свойств.
//
// Возвращаемое значение:
//  СправочникСсылка.НаборыДополнительныхРеквизитовИСведений -
//   когда для типа владельца свойств не задано имя реквизита вида объекта в процедуре.
//         УправлениеСвойствамиПереопределяемый.ПолучитьИмяРеквизитаВидаОбъекта(),
//   тогда возвращается предопределенный элемент с именем в формате полное имя
//         объекта метаданных, у которого символ "." заменен символом "_",
//   иначе возвращается значение реквизита НаборСвойств того вида, который
//         содержится в реквизите владельца свойств с именем заданным в
//         переопределяемой процедуре.
//
//  Неопределено - когда владелец свойств - группа элементов справочника или
//                 группа элементов плана видов характеристик.
Функция ПолучитьОсновнойНаборСвойствДляОбъекта(ВладелецСвойств)
	
	ПереданОбъект = Ложь;
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ВладелецСвойств) Тогда
		Ссылка = ВладелецСвойств;
	Иначе
		ПереданОбъект = Истина;
		Ссылка = ВладелецСвойств.Ссылка;
	КонецЕсли;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	
	ВидОбъектаМетаданных = ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка);
	
	ИмяЭлемента = ВидОбъектаМетаданных + "_" + ИмяОбъектаМетаданных; 
	
	Если НаборДопРеквизитовСуществует(ИмяЭлемента)Тогда
		Возврат Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяЭлемента];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПослеВызоваФормыПараметрыПечатиСервер(РезультатОповещения, ФормаИсточник) Экспорт  

	Формы = РезультатОповещения.СсылкаНаОбъект.Метаданные().Формы;
	ИмяФормыСписка    = Формы.ФормаСписка.Имя;
	
	Если ОбщегоНазначения.ЭтоДокумент(РезультатОповещения.СсылкаНаОбъект.Метаданные()) Тогда
		ИмяФормыДокумента = Формы.ФормаДокумента.Имя;
	Иначе
		ИмяФормыДокумента = Формы.ФормаЭлемента.Имя;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", РезультатОповещения.СсылкаНаОбъект.Метаданные()) Тогда
		Возврат Ложь;		
	КонецЕсли;		
	
	Если ФормаИсточник = ИмяФормыСписка Тогда
		// Для формы списка получим объект и запишем в него значения
		ТекущийОбъект = РезультатОповещения.СсылкаНаОбъект.ПолучитьОбъект();
		
		Для каждого РеквизитПечати Из РезультатОповещения.МассивДополнительныхРеквизитов Цикл
			РеквизитПечатиВДополнительныхРеквизитах =
			ТекущийОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", РеквизитПечати.Свойство));
			Если РеквизитПечатиВДополнительныхРеквизитах.Количество() = 0 Тогда
				// Добавим новый реквизит в таблицу дополнительных реквизитов
				Если ЗначениеЗаполнено(РеквизитПечати.Значение) Тогда
					НоваяСтрока = ТекущийОбъект.ДополнительныеРеквизиты.Добавить();
					НоваяСтрока.Свойство = РеквизитПечати.Свойство;
					НоваяСтрока.Значение = РеквизитПечати.Значение;
				КонецЕсли;
			Иначе
				// Изменим значение реквизита в таблице дополнительных реквизитов
				// или удалим устаревшее значение дополнительного реквизита.
				Если ЗначениеЗаполнено(РеквизитПечати.Значение)
					И НЕ РеквизитПечати.Значение = РеквизитПечатиВДополнительныхРеквизитах[0].Значение Тогда
					РеквизитПечатиВДополнительныхРеквизитах[0].Значение = РеквизитПечати.Значение;
				ИначеЕсли НЕ ЗначениеЗаполнено(РеквизитПечати.Значение) Тогда
					ТекущийОбъект.ДополнительныеРеквизиты.Удалить(РеквизитПечатиВДополнительныхРеквизитах[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			ТекущийОбъект.ОбменДанными.Загрузка = Истина;
			ТекущийОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'При записи данных возникла ошибка:%1%2'"), Символы.ПС, ОписаниеОшибки())
			);
		КонецПопытки;
		
		Возврат Ложь;
	ИначеЕсли ФормаИсточник = ИмяФормыДокумента Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НаборДопРеквизитовСуществует(ИмяПредопределенногоЭлемента)

	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	Возврат ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено;  
	
КонецФункции 

#КонецОбласти