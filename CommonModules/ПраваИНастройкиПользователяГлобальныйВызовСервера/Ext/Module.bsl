
#Область ПрограммныйИнтерфейс

// Устарела. см. ПраваИНастройкиПользователя.ОбновитьВКэше
// Устанавливает новое значение права в кэше
//
// Параметры:
//  Право         - ПланВидовХарактеристик.ПраваИнастройки, Строка - Ссылка 
//  																 или имя предопределенного элемента ПВХ ПраваИНастройки
//  НовоеЗначение - Произвольный                   - Новое значение права
//  ОбъектДанных  - ДокументОбъект, ДокументСсылка, СправочникОбъект, СправочникСсылка. - Объект, для которого 
//                  получается расширение прав доступа
//                - Строка       - Имя объекта, для которого получается расширение прав доступа.
//
Процедура ОбновитьПравоВКэше(Право, НовоеЗначение, ОбъектДанных = Неопределено) Экспорт
	
	ПраваИНастройкиПользователя.ОбновитьВКэше(Право, НовоеЗначение, ОбъектДанных);
	
КонецПроцедуры

// Устарела. см. ПраваИНастройкиПользователя.Значение
// Получает значение права по имени или значению
//
// Параметры:
//  Право  - Строка             - Строка с именем или ссылка на ПВХ ПраваИНастройки искомого права
//  Объект - ПроизвольныйОбъект - Объект, для которого получаем расширение прав доступа
//         - Строка             - Имя объекта, для которого получается расширение прав доступа.
//
// Возвращаемое значение:
//  Значение - Значение запрошенного права.
//
Функция ПравоПользователя(Право, Объект=Неопределено) Экспорт
	
	// Получим кеш прав текущего пользователя
	ПраваПользователя = ПраваИНастройкиПользователяПовтИсп.ПолучитьЗначенияВсехПравПользователя();
	
	// Определим имя предопределенного элемента ПВХ
	Если ТипЗнч(Право)=Тип("ПланВидовХарактеристикСсылка.ПраваИНастройки") Тогда
		ИмяПраво = Право.ИмяПредопределенныхДанных;
	Иначе
		ИмяПраво = Право;
	КонецЕсли;
	
	// Определим имя объекта расширения данных
	Если Объект=Неопределено Тогда
		РасширениеДанных = "";
		
	ИначеЕсли ТипЗнч(Объект)=Тип("Строка") Тогда
		РасширениеДанных = СокрЛП(Объект);
		
	Иначе
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка));
		
		Если ОбъектМетаданных=Неопределено Тогда
			РасширениеДанных = "";
		Иначе
			РасширениеДанных = ОбъектМетаданных.Имя;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если идентифицирован объект, то проверим наличие приватной установки для данного права.
	Если НЕ ПустаяСтрока(РасширениеДанных) И ПраваПользователя.Свойство(ИмяПраво + "_" + РасширениеДанных) Тогда
		Возврат ПраваПользователя[ИмяПраво + "_" + РасширениеДанных];
	КонецЕсли;
	
	// При первом запуске права могут быть не заполнены по умолчанию
	Если ПраваПользователя[ИмяПраво] = Неопределено Тогда
		ПраваПользователя[ИмяПраво] = Ложь;
	КонецЕсли;
	
	// Возвращаем значение права, закэшированного под этим именем
	Возврат ПраваПользователя[ИмяПраво];
	
КонецФункции // ПравоПользователя()

// Устарела. см. ПраваИНастройкиПользователя.РольДоступна
// Проверяет доступность у пользователя роли по имени
//
// Параметры:
//  Роль           - Строка    - Название роли как она задана в конфигураторе или объект описания метаданного роли. 
//
// Возвращаемое значение:
//  Булево - Доступность указанной роли для текущего пользователя.
//
Функция РольПользователя(Роль) Экспорт
	
	Результат = ПраваИНастройкиПользователяПовтИсп.ПроверитьРольПользователя(Роль);
	
	Возврат Результат;
	
КонецФункции // РольПользователя()


////////////////////////////////////////////////////////////////////////////////
// УЧЕТНЫЕ ПОЛИТИКИ

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ГруппаНастройкиПользователя
// Проверяет вхождение пользователя в группу доступа. Если Группа не задана, возвращает группу, в которую он входит.
//
// Параметры:
//  Пользователь			- СправочникСсылка.Пользователи  - Проверяемый пользователь
//  ПоискПерсональнойГруппы	- Булево							-	(необязательный). Признак того, что производится
//																	поиск персональной группы доступа.
//  ИсключаяГруппуДоступа	- СправочникСсылка.ГруппыДоступа	-	(необязательный). Исключаемая из поиска группа доступа.
//  ПерсональныйДоступ		- Булево, Неопределено				-	Истина, если группа персонального доступа.
//
// Возвращаемое значение:
//  СправочникСсылка.ГруппыДоступа	- если была найдена группа доступа.
//  Неопределено					- если группа не была найдена.
//
Функция ГруппаДоступаПользователя(
		Знач Пользователь,
		Знач ПоискПерсональнойГруппы = Неопределено,
		Знач ИсключаяГруппуДоступа = Неопределено,
		ПерсональныйДоступ = Неопределено) Экспорт
	
	Возврат ГруппаНастройкиПользователя(Пользователь);
	
КонецФункции // ГруппаДоступаПользователя()

// Устарела. Следует использовать ПользовательВходитВГруппуНастройки
// Проверяет вхождение пользователя в группу доступа. Если Группа не задана, возвращает группу, в которую он входит.
//
// Параметры:
//  Пользователь						- СправочникСсылка.Пользователи			- Проверяемый пользователь
//  ГруппаПравИНастроек					- СправочникСсылка.ГруппыПравИНастроек	- Проверяемая группа доступа, 
//										- Неопределено							- В этом случае сюда будет возвращена группа доступа пользователя.
//  ИспользованиеПерсональногоДоступа	- Булево								-(необязательный). Признак того, что производится
//																					поиск персональной группы доступа.
// Возвращаемое значение:
//  Булево  - Истина: пользователь входит в группу доступа, Ложь: не входит или это был вызов для определения группы.
//
Функция ПользовательВходитВГруппуДоступа(
		Пользователь,
		ГруппаПравИНастроек = Неопределено,
		ИспользованиеПерсональногоДоступа = Неопределено) Экспорт
	
	Возврат ПользовательВходитВГруппуНастройки(Пользователь, ГруппаПравИНастроек);
	
КонецФункции // ПользовательВходитВГруппуДоступа()

#КонецОбласти

// Получает значение учетной политики по имени или значению
//
// Параметры:
//  УчетнаяПолитика  - Строка                                 - Строка с именем искомой учетной политики.
//                   - ПланВидовХарактеристик.УчетныеПолитики - Ссылка на элемент ПВХ УчетныеПолитики.
//  Объект           - СправочникСсылка.Организации           - Объект, для которого получается значение
//                   - СправочникСсылка.СкладыКомпании        - учетной политики.
//                   - СправочникСсылка.ПодразделенияКомпании - 
//  ДатаСреза        - Дата                                   - Дата, на которую получается значение учетной политики.
//  ИспользоватьЗначениеПоУмолчанию - Булево - Использовать значение по умолчанию, если учетная политика не настроена.
//                                    Истина: возвращать значение по умолчанию, Ложь: возвращать Неопределено.
//
// Возвращаемое значение:
//  Значение - Значение запрошенной учетной политики.
//
Функция ПолучитьЗначениеУчетнойПолитики(УчетнаяПолитика, Объект = Неопределено, Знач ДатаСреза = Неопределено, ИспользоватьЗначениеПоУмолчанию = Истина) Экспорт	
	Результат = Неопределено;
	
	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = НачалоДня(ТекущаяДатаСеанса());
	Иначе
		ДатаСреза = НачалоДня(ДатаСреза);
	КонецЕсли;
	
	// Приводим значение параметра Право к типу ПланВидовХарактеристикСсылка.ПраваИНастройки.
	СтруктураУчетнойПолитики = ПраваИНастройкиПользователяПовтИсп.ПолучитьПараметрыПВХПравИНастроек(УчетнаяПолитика, "УчетныеПолитики");
	
	// Такого права нет в системе - явная ошибка. Нужен специалист
	Если НЕ ЗначениеЗаполнено(СтруктураУчетнойПолитики.Ссылка) Тогда
		Возврат Результат;
	КонецЕсли;
		
	// Получим структуру - кэш прав
	ЗначенияУчетныхПолитик = ПраваИНастройкиПользователяПовтИсп.ПолучитьВсеУчетныеПолитики(Объект, ДатаСреза, ИспользоватьЗначениеПоУмолчанию);
	
	ЗначенияУчетныхПолитик.Свойство(СтруктураУчетнойПолитики.ИмяПредопределенныхДанных, Результат);
	
	Возврат Результат;
	
КонецФункции // ПолучитьЗначениеУчетнойПолитики()

// Устанавливает новое значение права в кэше
//
// Параметры:
//  Параметр      - Строка                                 - Имя предопределенного элемента.
//                - ПланВидовХарактеристик.ПраваИНастройки - Ссылка на элемент ПВХ.
//  НовоеЗначение - Произвольный                   - Новое значение права
//  ОбъектДанных  - ДокументОбъект, ДокументСсылка, СправочникОбъект, СправочникСсылка. - Объект, для которого
//                  получается расширение прав доступа
//                - Строка       - Имя объекта, для которого получается расширение прав доступа.
//  Дата          - Дата - Дата, на которую получается значение учетной политики.
//
Процедура ОбновитьУчетнуюПолитикуВКэше(Параметр, НовоеЗначение, ОбъектДанных, Дата) Экспорт
	Если Дата = Неопределено Тогда
		Дата = НачалоДня(ТекущаяДатаСеанса());
	Иначе
		Дата = НачалоДня(Дата);
	КонецЕсли;
	
	// Приводим значение параметра Параметр к типу ПланВидовХарактеристикСсылка.УчетныеПолитики.
	СтруктураПрава = ПраваИНастройкиПользователяПовтИсп.ПолучитьПараметрыПВХПравИНастроек(Параметр, "УчетныеПолитики");
	УчетнаяПолитикаСсылка = СтруктураПрава.ИмяПредопределенныхДанных;
	
	// получим текущие значения учетных политик
	ЗначенияУчетныхПолитик = ПраваИНастройкиПользователяПовтИсп.ПолучитьВсеУчетныеПолитики(ОбъектДанных, Дата, Истина);
	
	Если ЗначенияУчетныхПолитик <> Неопределено Тогда	
		Если УчетнаяПолитикаСсылка <> Неопределено И УчетнаяПолитикаСсылка <> "" Тогда
			ЗначенияУчетныхПолитик.Вставить(УчетнаяПолитикаСсылка,НовоеЗначение);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры // ОбновитьПравоВКэше()

// Получает значение учетной политики "Стратегии списания по датам"
//
// Параметры:
//  Склад       - СправочникСсылка.СкладыКомпании - Склад, для которого получается значение учетной политики;
//  Организация - СправочникСсылка.Организации    - Организация, для которой получается значение учетной политики;
//  ДатаСреза   - Дата                            - Дата, на которую получается значение учетной политики.
//
// Возвращаемое значение:
//  Значение - Значение запрошенной учетной политики.
//
Функция ПолучитьСтратегиюСписанияПоДатам(Склад, Организация, ДатаСреза = Неопределено) Экспорт
	
	ЗначениеУчетнойПолитики = УчетныеПолитикиСервер.Значение(
		"СтратегияСписанияПартийТоваровПоДатам",
		ДатаСреза,
		Склад,
		Ложь
	);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеУчетнойПолитики) Тогда
		ЗначениеУчетнойПолитики = УчетныеПолитикиСервер.Значение(
			"СтратегияСписанияПартийТоваровПоДатам",
		    ДатаСреза,
			Организация, 
			Ложь
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеУчетнойПолитики) Тогда
		ЗначениеУчетнойПолитики = УчетныеПолитикиСервер.Значение(
			"СтратегияСписанияПартийТоваровПоДатам",
			ДатаСреза
		);
	КонецЕсли;
	
	Возврат ЗначениеУчетнойПолитики;
	
КонецФункции //ПолучитьСтратегиюСписанияПоДатам()

// Получает значение учетной политики "Закрытие заказов по подразделению"
//
// Параметры:
//  Подразделение  - СправочникСсылка.ПодразделениеКомпании - Подразделение, для которого получается
//                                                            значение учетной политики;
//  ДатаСреза - Дата                            - Дата, на которую получается значение учетной политики.
//
// Возвращаемое значение:
//  Значение - Значение запрошенной учетной политики.
//
Функция ПолучитьЗакрытиеЗаказовПоПодразделению(Подразделение, ДатаСреза = Неопределено) Экспорт
	// Пробуем получить значение для подразделения, если нет - для организации,
	// если нет - для компании, если нет - по умолчанию.
	ЗначениеУчетнойПолитики = УчетныеПолитикиСервер.Значение(
		"ЗакрытиеЗаказовПоПодразделению",
		ДатаСреза,
		Подразделение, 
		Ложь
	);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеУчетнойПолитики) Тогда
		ЗначениеУчетнойПолитики = УчетныеПолитикиСервер.Значение(
			"ЗакрытиеЗаказовПоПодразделению",
			ДатаСреза,
			Подразделение.Организация,
			Ложь
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеУчетнойПолитики) Тогда
		ЗначениеУчетнойПолитики = УчетныеПолитикиСервер.Значение(
			"ЗакрытиеЗаказовПоПодразделению",
			ДатаСреза
		);
	КонецЕсли;
	
	Возврат ЗначениеУчетнойПолитики;
	
КонецФункции //ПолучитьЗакрытиеЗаказовПоПодразделению()

// Получает значение учетной политики "способ ведения баланса" на переданную дату
//  и проверяет является ли значение "По организации".
//
// Параметры:
//  Дата - Дата - Дата, на которую получается значение учетной политики.
// 
// Возвращаемое значение:
//  Булево - Истина баланс ведется по организации, иначе ложь.
//
Функция БалансВедетсяПоОрганизациям(Дата) Экспорт
	СпособВеденияБаланса          = УчетныеПолитикиСервер.Значение("СпособВеденияБаланса", Дата);
	БалансВедетсяПоОрганизациям   = (СпособВеденияБаланса=Перечисления.СпособВеденияБаланса.ПоОрганизации);
	
	Возврат БалансВедетсяПоОрганизациям;
КонецФункции

// Получает значение учетной политики "способ ведения баланса" на переданную дату
// и проверяет является ли значение "По организации".
//
// Параметры:
//  Дата - Дата - Дата, на которую получается значение учетной политики.
// 
// Возвращаемое значение:
//  Булево - Истина баланс ведется по подразделению, иначе ложь.
//
Функция БалансВедетсяПоПодразделениям(Дата) Экспорт
	СпособВеденияБаланса          = УчетныеПолитикиСервер.Значение("СпособВеденияБаланса",Дата);
	БалансВедетсяПоПодразделениям  = (СпособВеденияБаланса=Перечисления.СпособВеденияБаланса.ПоПодразделению);
	
	Возврат БалансВедетсяПоПодразделениям;
КонецФункции

// Устарела. Следует использовать ПолучитьПараметрыПлательщикаНДС
//
// Параметры:
//  Организация - СправочникСсылка.Организации    - Организация, для которой получается значение учетной политики;
//  ПодразделениеКомпании  - СправочникСсылка.ПодразделениеКомпании - Подразделение, для которого получается
//                                                            значение учетной политики;
//  ДатаСреза   - Дата                            - Дата, на которую получается значение учетной политики.
//
// Возвращаемое значение:
//  Значение - Значение запрошенной учетной политики.
//
Функция ОсвобожденОтУплатыНДС(Организация, ПодразделениеКомпании, ДатаСреза = Неопределено) Экспорт
	
	ОсвобожденОтНДС = Ложь;
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		ВидНалога = УчетныеПолитикиСервер.Значение("ВидНалога", ДатаСреза, ПодразделениеКомпании);
		ОсвобожденОтНДС = (НЕ ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка());
	КонецЕсли;
	
	Если НЕ ОсвобожденОтНДС И ЗначениеЗаполнено(Организация) Тогда
		СистемаНалогообложения = УчетныеПолитикиСервер.Значение("СистемаНалогообложения", ДатаСреза, Организация);
		ОсвобожденОтНДС = (СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
	КонецЕсли;
	
	Возврат ОсвобожденОтНДС;
	
КонецФункции // ОсвобожденОтУплатыНДС()

// Получает признак того, что подразделение/организация освобожден от НДС
//
// Параметры:
//  Организация - СправочникСсылка.Организации    - Организация, для которой получается значение учетной политики;
//  ПодразделениеКомпании  - СправочникСсылка.ПодразделениеКомпании - Подразделение, для которого получается
//                                                            значение учетной политики;
//  ДатаСреза   - Дата                            - Дата, на которую получается значение учетной политики.
//
// Возвращаемое значение:
//  Значение - Значение запрошенной учетной политики.
//
Функция ПолучитьПараметрыПлательщикаНДС(Организация, ПодразделениеКомпании, ДатаСреза = Неопределено) Экспорт
	
	ПараметрыНДС = Новый Структура();
	ПараметрыНДС.Вставить("ОсвобожденОтНДС", Ложь);
	ПараметрыНДС.Вставить("ОсновнаяСтавка", РаботаСоСтавкамиНДСПовтИсп.СтавкаНДСПоЗначению(20, Ложь)); 	
	
	ОсвобожденОтНДС = Ложь;
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		
		ВидНалога = УчетныеПолитикиСервер.Значение("ВидНалога", ДатаСреза, ПодразделениеКомпании);
		ОсвобожденОтНДС = (НЕ ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка()); 
			
	КонецЕсли;
	
	Если НЕ ОсвобожденОтНДС И ЗначениеЗаполнено(Организация) Тогда
		
		СистемаНалогообложения = УчетныеПолитикиСервер.Значение("СистемаНалогообложения", ДатаСреза, Организация);
		
		Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			
			НалогообложениеНДСПриУСН = УчетныеПолитикиСервер.Значение("НалогообложениеНДСПриУСН", ДатаСреза, Организация);
			Если НалогообложениеНДСПриУСН = Перечисления.НалогообложениеНДСПриУСН.ПродажаОблагаетсяНДСПоСтавке5 Тогда 
				ПараметрыНДС.ОсновнаяСтавка = РаботаСоСтавкамиНДСПовтИсп.СтавкаНДСПоЗначению(5, Ложь);
			ИначеЕсли НалогообложениеНДСПриУСН = Перечисления.НалогообложениеНДСПриУСН.ПродажаОблагаетсяНДСПоСтавке7 Тогда 
				ПараметрыНДС.ОсновнаяСтавка = РаботаСоСтавкамиНДСПовтИсп.СтавкаНДСПоЗначению(7, Ложь); 
			ИначеЕсли НалогообложениеНДСПриУСН = Перечисления.НалогообложениеНДСПриУСН.ПрименяютсяОбщиеСтавкиНДС Тогда 
				ПараметрыНДС.ОсновнаяСтавка = РаботаСоСтавкамиНДСПовтИсп.СтавкаНДСПоЗначению(20, Ложь); 
			Иначе
				ОсвобожденОтНДС = Истина;
			КонецЕсли;
			
			ПараметрыНДС.Вставить("НалогообложениеНДСПриУСН", НалогообложениеНДСПриУСН);
		КонецЕсли;
			
	КонецЕсли;
	
	Если ОсвобожденОтНДС Тогда
		
		ПараметрыНДС.ОсвобожденОтНДС = Истина;
		ПараметрыНДС.ОсновнаяСтавка = Справочники.СтавкиНДС.БезНДС;
		
	КонецЕсли;

		
	Возврат ПараметрыНДС;
	
КонецФункции // ПолучитьПараметрыПлательщикаНДС()  

// Проверяет вхождение пользователя в группу прав и настроек. Если Группа не задана, возвращает группу, в которую он входит.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи  - Проверяемый пользователь
//
// Возвращаемое значение:
//  СправочникСсылка.ГруппыПравИНастроек - если была найдена группа прав и настроек.
//  Неопределено                         - если группа не была найдена.
//
Функция ГруппаНастройкиПользователя(Знач Пользователь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Пользователи.ГруппаПравИНастроек КАК ГруппаПравИНастроек
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Ссылка = &Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.ГруппаПравИНастроек),
			Выборка.ГруппаПравИНастроек,
			Неопределено);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ГруппаНастройкиПользователя()

// Проверяет вхождение пользователя в группу прав и настроек. Если Группа не задана, возвращает группу, в которую он входит.
//
// Параметры:
//  Пользователь						- СправочникСсылка.Пользователи			- Проверяемый пользователь
//  ГруппаПравИНастроек					- СправочникСсылка.ГруппыПравИНастроек	- Проверяемая группа настроек, 
//										- Неопределено							- В этом случае сюда будет возвращена группа доступа пользователя.
//
// Возвращаемое значение:
//  Булево  - Истина: пользователь входит в группу доступа, Ложь: не входит или это был вызов для определения группы.
//
Функция ПользовательВходитВГруппуНастройки(Пользователь, ГруппаПравИНастроек = Неопределено) Экспорт
	
	НайденнаяГруппаНастройки = ГруппаНастройкиПользователя(Пользователь);
	
	Результат = (ГруппаПравИНастроек = НайденнаяГруппаНастройки);
	ГруппаПравИНастроек = НайденнаяГруппаНастройки;
	
	Возврат Результат;
	
КонецФункции // ПользовательВходитВГруппуНастройки()

#КонецОбласти