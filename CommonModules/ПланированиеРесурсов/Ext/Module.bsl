
#Область ПрограммныйИнтерфейс

// Заполняет форму настройками пользователя сохраненными или по умолчанию.
//
// Параметры:
//  Форма  - УправляемаяФорма - Заполняемая форма.
//                              В форме должны быть реквизиты:
//                                "ИсполнителиДляГрафика" - таблица для хранения отображаемых исполнителей,
//                                "РабочиеМестаДляГрафика" - таблица для хранения отображаемых рабочих мест,
//                                и реквизиты для каждой из сохраняемой настроек.
//  Пользователь  - Строка - Имя пользователя для которого необходимо получить настройки.
//                           Если не передан будет использоваться текущий пользователь сеанса.
//
Процедура УстановитьНастройкиПользователя(Форма, Пользователь = Неопределено) Экспорт
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекПользователя(),,, Пользователь);
	
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		
		НастройкиСтруктура = Новый Структура;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиСтруктура, Настройки, Истина);
		ЗаполнитьЗначенияСвойств(Форма, НастройкиСтруктура);
		ЗаполнитьИсполнителей(Форма.ИсполнителиДляГрафика, Настройки.Получить("Исполнители"));
		ЗаполнитьРабочиеМеста(Форма.РабочиеМестаДляГрафика, Настройки.Получить("РабочиеМеста"));
		
		Возврат;
		
	КонецЕсли;
	
	// Заполним значениями по умолчанию если небыли заданы настройки ранее
	ЗаполнитьЗначенияСвойств(Форма, НастройкиПользователяПоУмолчанию());
	ЗаполнитьИсполнителей(Форма.ИсполнителиДляГрафика);
	ЗаполнитьРабочиеМеста(Форма.РабочиеМестаДляГрафика);
	
КонецПроцедуры // УстановитьНастройкиПользователя()

// Заполнение таблицы исполнителей из списка сохраненных сотрудников с получением дополнительных полей.
//
// Параметры:
//  Исполнители - ТаблицаЗначение, ДанныеФормыКоллекция - Заполняемая таблица.
//  ДанныеЗаполнения - Массив, Неопределено - Массив с сотрудниками для заполнения.
//                                            Если передано Неопределено или пустой массив будет заполнено
//                                            сотрудниками у которых признак "Исполнитель" установлен в истину.
//
Процедура ЗаполнитьИсполнителей(Исполнители, ДанныеЗаполнения = Неопределено) Экспорт
	
	Исполнители.Очистить();
	
	// Заполняем из данных заполнения
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") И ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		// получим поля для дополнительных данных
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Исполнители", ДанныеЗаполнения);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Ресурс,
		|	Сотрудники.Псевдоним КАК Псевдоним,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Ссылка) КАК РесурсПредставление,
		|	Сотрудники.ГрафикРаботы КАК График
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В (&Исполнители)";
		
		ДанныеРесурсов = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеРесурса = Новый Структура("Псевдоним,РесурсПредставление,График");
			ЗаполнитьЗначенияСвойств(ДанныеРесурса, Выборка);
			ДанныеРесурсов.Вставить(Выборка.Ресурс, ДанныеРесурса);
			
		КонецЦикла;
		
		Для Каждого Исполнитель Из ДанныеЗаполнения Цикл
			
			ДанныеРесурса = ДанныеРесурсов.Получить(Исполнитель);
			
			Если ДанныеРесурса = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока = Исполнители.Добавить();
			НоваяСтрока.Ресурс = Исполнитель;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРесурса);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	// Заполним значениями по умолчанию, если данные заполнения не заполненны
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Ресурс,
	|	Сотрудники.Псевдоним КАК Псевдоним,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Ссылка) КАК РесурсПредставление,
	|	Сотрудники.ГрафикРаботы КАК График
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Исполнитель = ИСТИНА";
	
	Исполнители.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьИсполнителей()

// Заполнение таблицы рабочих мест из списка сохраненных цехов с получением дополнительных полей.
//
// Параметры:
//  РабочиеМеста - ТаблицаЗначение, ДанныеФормыКоллекция - Заполняемая таблица.
//  ДанныеЗаполнения - Массив, Неопределено - Массив с сотрудниками для заполнения.
//                                            Если передано Неопределено или пустой массив будет заполнено
//                                            сотрудниками у которых признак "ВидИспользованияРабочегоМеста"
//                                            установлен в "НеУчаствуетВПланировании".
//
Процедура ЗаполнитьРабочиеМеста(РабочиеМеста, ДанныеЗаполнения = Неопределено) Экспорт
	
	РабочиеМеста.Очистить();
	
	// Заполняем из данных заполнения
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") И ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РабочиеМеста", ДанныеЗаполнения);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Цеха.Ссылка КАК Ресурс,
		|	Цеха.Псевдоним КАК Псевдоним,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Цеха.Ссылка) КАК РесурсПредставление,
		|	Цеха.ГрафикРаботы КАК График
		|ИЗ
		|	Справочник.Цеха КАК Цеха
		|ГДЕ
		|	Цеха.Ссылка В (&РабочиеМеста)";
		
		ДанныеРесурсов = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеРесурса = Новый Структура("Псевдоним,РесурсПредставление,График");
			ЗаполнитьЗначенияСвойств(ДанныеРесурса, Выборка);
			ДанныеРесурсов.Вставить(Выборка.Ресурс, ДанныеРесурса);
			
		КонецЦикла;
		
		Для Каждого РабочееМесто Из ДанныеЗаполнения Цикл
			
			ДанныеРесурса = ДанныеРесурсов.Получить(РабочееМесто);
			
			Если ДанныеРесурса = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока = РабочиеМеста.Добавить();
			НоваяСтрока.Ресурс = РабочееМесто;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРесурса);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	// Заполним значениями по умолчанию, если данные заполнения не заполненны
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Цеха.Ссылка КАК Ресурс,
	|	Цеха.Псевдоним КАК Псевдоним,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Цеха.Ссылка) КАК РесурсПредставление,
	|	Цеха.ГрафикРаботы КАК График
	|ИЗ
	|	Справочник.Цеха КАК Цеха
	|ГДЕ
	|	Цеха.ВидИспользованияРабочегоМеста <> ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияРабочихМест.НеУчаствуетВПланировании)";
	
	РабочиеМеста.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьРабочиеМеста()

// Определяет заполнено ли планирование по документу.
//
// Если для документа имеется хотя бы одна запись в регистре "ПланированиеРабот", документ считается запланированным.
//
// Параметры:
//  Документ - ДокументСсылка.ЗаявкаНаРемонт, ДокументСсылка.ЗаказНаряд - Документ
//    для которого проверяем наличие планирования.
//
// Возвращаемое значение:
//  Булево.
//  Истина у документа есть интервалы с планированием, Ложь -нет.
//
Функция ДокументЗапланирован(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПланированиеРабот.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|ГДЕ
	|	ПланированиеРабот.Документ = &Документ
	|	И НЕ ПланированиеРабот.НеАктуален";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Формирует таблицу планирования документа
//
// Параметры:
//  Документ			 - ДокументСсылка	 - Документ
//  КолВоДнейДоступности - Число			 - Кол-во дней от тек даты, в которые можно планировать.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - ТаблицаЗначений.
//
Функция ИнтервалыПланированияДокумента(Документ, КолВоДнейДоступности = 0) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланированиеРабот.Идентификатор КАК Идентификатор,
	|	ПланированиеРабот.ВидОбъектаПланирования КАК ВидОбъектаПланирования,
	|	ПланированиеРабот.РабочееМесто КАК РабочееМесто,
	|	ПланированиеРабот.Исполнитель КАК Исполнитель,
	|	ПланированиеРабот.Начало КАК Начало,
	|	ПланированиеРабот.Конец КАК Конец,
	|	ПланированиеРабот.Продолжительность КАК НормаВремени,
	|	ПланированиеРабот.Объект КАК Объект,
	|	ПланированиеРабот.ИдентификаторГруппы КАК ИдентификаторГруппы,
	|	ВЫБОР
	|		КОГДА ПланированиеРабот.Конец <= НАЧАЛОПЕРИОДА(&ДатаРедактирования, ДЕНЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеДоступностьИнтервала
	|ИЗ
	|	РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|ГДЕ
	|	ПланированиеРабот.Документ = &Документ
	|	И НЕ ПланированиеРабот.НеАктуален";
	
	Запрос.УстановитьПараметр("ДатаРедактирования", ТекущаяДата() - КолВоДнейДоступности * 24 * 60 * 60);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполнение таблицы планирования данными из ИБ
//
// Параметры:
//  Интервалы - ТаблицаЗначений - Интервалы планирования документа.
//  Документ  - ДокументСсылка - Документ.
//  КолВоДнейДоступности - Число - Количество дней от текущей даты, в которые можно планировать.
//
Процедура ЗаполнитьИнтервалыПланирования(Интервалы, Документ, КолВоДнейДоступности = 0) Экспорт
	
	Интервалы.Загрузить(ИнтервалыПланированияДокумента(Документ, КолВоДнейДоступности));
	
	Для Каждого Интервал Из Интервалы Цикл
		Интервал.НормаВремениПредставление = ПланированиеРесурсовКлиентСервер.ПолучитьПредставлениеВремени(Интервал.НормаВремени);
	КонецЦикла;
	
КонецПроцедуры

// Запись планирования в документе
//
// Параметры:
//  Планирование                        - ТаблицаЗначений - Интервалы планирования документа
//  ДокументОбъект                      - ДокументОбъект  - Записываемый документ
//  КонтролироватьПересечениеИнтервалов - Булево          - Контролировать пересечение интервалов
// 
// Возвращаемое значение:
//  Булево - Наличие ошибор при записи
//
Функция ЗаписатьПланирование(Планирование, ДокументОбъект, КонтролироватьПересечениеИнтервалов = Истина) Экспорт
	
	Отказ = Ложь;
	Планирование.Колонки.Добавить("Документ");
	Планирование.Колонки.Добавить("ПредставлениеОбъекта");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовим таблицу к записи
	ДляУдаления = Новый Массив();
	Для Каждого Интервал Из Планирование Цикл
		ПланированиеРесурсовКлиентСервер.ПроверитьДоступностьИнтервала(Интервал, ДокументОбъект, ДляУдаления);
		
		Интервал.НормаВремени = (Интервал.Конец - Интервал.Начало);
		Интервал.Документ          = ДокументОбъект.Ссылка;
	КонецЦикла;
	
	Если ДляУдаления.Количество() > 0 Тогда
		Для Каждого Интервал Из ДляУдаления Цикл
			Планирование.Удалить(Интервал);
		КонецЦикла;
	КонецЕсли;
	
	// Контроль пересечения интервалов
	Если КонтролироватьПересечениеИнтервалов И Планирование.Количество() > 0 Тогда
		
		Результат = КонтрольПересеченияИнтервалов(Планирование, ДокументОбъект.Ссылка);
		
		Если Результат.Отказ Тогда
			ОбщегоНазначения.СообщитьПользователю(Результат.ТекстОшибки);
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Запищем интервалы авторабот
	Набор = РегистрыСведений.ПланированиеРабот.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(ДокументОбъект.Ссылка);
	Планирование.Колонки.НормаВремени.Имя = "Продолжительность";
	Набор.Загрузить(Планирование);
	
	Попытка
		Набор.Записать(Истина);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
	КонецПопытки;
	
	// Запишем интервалы ресурсов
	НаборПланированиеРесурсов = РегистрыСведений.ПланированиеРесурсов.СоздатьНаборЗаписей();
	НаборПланированиеРесурсов.Отбор.Документ.Установить(ДокументОбъект.Ссылка);
	
	Для Каждого Строка Из Планирование Цикл
		АвтомобильИзЗнР = Неопределено;
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
			АвтомобильИзЗнР = ?(ЗначениеЗаполнено(ДокументОбъект.Автомобиль),
				ДокументОбъект.Автомобиль, ДокументОбъект.Модель);		
		КонецЕсли;
			
		Если НЕ Строка.Исполнитель.Пустая() Тогда
			НоваяЗапись = НаборПланированиеРесурсов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			НоваяЗапись.Ресурс = Строка.Исполнитель;
			НоваяЗапись.НачалоИнтервала = Строка.Начало;
			НоваяЗапись.КонецИнтервала  = Строка.Конец;
			НоваяЗапись.Автомобиль      = ?(ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаказНаряд"),
				ДокументОбъект.СводныйРемонтныйЗаказ.Автомобиль, АвтомобильИзЗнР);
		КонецЕсли;
		
		Если НЕ Строка.РабочееМесто.Пустая() Тогда
			НоваяЗапись = НаборПланированиеРесурсов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			НоваяЗапись.Ресурс = Строка.РабочееМесто;
			НоваяЗапись.НачалоИнтервала = Строка.Начало;
			НоваяЗапись.КонецИнтервала  = Строка.Конец;
			НоваяЗапись.Автомобиль      = ?(ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаказНаряд"),
				ДокументОбъект.СводныйРемонтныйЗаказ.Автомобиль, АвтомобильИзЗнР);
		КонецЕсли;
	КонецЦикла;
	
	ВременнаяТаблица = НаборПланированиеРесурсов.Выгрузить();
	ВременнаяТаблица.Свернуть("Ресурс,Документ,НачалоИнтервала,КонецИнтервала,Автомобиль");
	НаборПланированиеРесурсов.Загрузить(ВременнаяТаблица);
	
	Попытка
		НаборПланированиеРесурсов.Записать(Истина);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
	КонецПопытки;
	
	Возврат Отказ;
	
КонецФункции

// Получение рабочих интервалов по графикам работ
//
// Параметры:
//  НачалоПериода              - Дата - Дата начала.
//  КонецПериода               - Дата - Дата окончания.
//  ТаблицаРабочихМест         - ТаблицаЗначений - Таблица цехов.
//  РежимИспользованияГрафиков - Число - Режим использования графиков.
//  БазовыйГрафик              - СправочникСсылка.ГрафикиРаботы - График работ по умолчанию.
//  УчитыватьДанныеТабеля      - Булево - Учитывать табель.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Рабочие интервалы ресурсов.
//
Функция ПолучитьГрафикиРабот(
	НачалоПериода,
	КонецПериода,
	ТаблицаРабочихМест,
	РежимИспользованияГрафиков,
	БазовыйГрафик,
	УчитыватьДанныеТабеля) Экспорт
	
	// подготовим результирующую таблицу
	КвалификаторыДаты    = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	КвалификаторыВремени = Новый КвалификаторыДаты(ЧастиДаты.Время);
	
	ТипыРесурса = Новый Массив;
	ТипыРесурса.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ТипыРесурса.Добавить(Тип("СправочникСсылка.Цеха"));
	
	РабочиеИнтервалы = Новый ТаблицаЗначений;
	РабочиеИнтервалы.Колонки.Добавить("Ресурс"               , Новый ОписаниеТипов(ТипыРесурса));
	РабочиеИнтервалы.Колонки.Добавить("Дата"                 , Новый ОписаниеТипов("Дата",, КвалификаторыДаты));
	РабочиеИнтервалы.Колонки.Добавить("НачалоРабочегоВремени", Новый ОписаниеТипов("Дата",, КвалификаторыВремени));
	РабочиеИнтервалы.Колонки.Добавить("КонецРабочегоВремени" , Новый ОписаниеТипов("Дата",, КвалификаторыВремени));
	РабочиеИнтервалы.Колонки.Добавить("Продолжительность"    , Новый ОписаниеТипов("Дата",, КвалификаторыВремени));
	РабочиеИнтервалы.Колонки.Добавить("Смена"                , Новый ОписаниеТипов("СправочникСсылка.Смены"));
	РабочиеИнтервалы.Колонки.Добавить("ВидДня"               , Новый ОписаниеТипов("ПеречислениеСсылка.ВидДня"));
	РабочиеИнтервалы.Колонки.Добавить("ВидИнтервала"         , Новый ОписаниеТипов("СправочникСсылка.ВидыИнтервалов"));
	РабочиеИнтервалы.Колонки.Добавить("УдалитьБанковский"    , Новый ОписаниеТипов("Булево"));
	РабочиеИнтервалы.Колонки.Добавить("Комментарий"          , Новый ОписаниеТипов("Строка"));
	РабочиеИнтервалы.Колонки.Добавить("ЭтоРабочий"           , Новый ОписаниеТипов("Булево"));
	
	Если РежимИспользованияГрафиков = 0 Тогда
		Для Каждого Ресурс Из ТаблицаРабочихМест Цикл
			НоваяСтрока = РабочиеИнтервалы.Добавить();
			
			НоваяСтрока.Ресурс                = Ресурс.Ресурс;
			НоваяСтрока.Дата                  = НачалоДня(НачалоПериода);
			НоваяСтрока.НачалоРабочегоВремени = Дата(1, 1, 1) + (НачалоПериода - НачалоДня(НачалоПериода));
			НоваяСтрока.КонецРабочегоВремени  = Дата(1, 1, 1) + (КонецПериода - НачалоДня(КонецПериода));
			НоваяСтрока.ВидИнтервала          = Справочники.ВидыИнтервалов.Работа;
			НоваяСтрока.ЭтоРабочий            = Истина;
			
			// Вывод второго дня в рабочем интервале.
			Если (НачалоДня(КонецПериода) = КонецДня(НачалоПериода) + 1) Тогда
				
				НоваяСтрока = РабочиеИнтервалы.Добавить();
				
				НоваяСтрока.Ресурс                = Ресурс.Ресурс;
				НоваяСтрока.Дата                  = НачалоДня(КонецПериода);
				НоваяСтрока.НачалоРабочегоВремени = Дата(1, 1, 1) + (НачалоПериода - НачалоДня(НачалоПериода));
				НоваяСтрока.КонецРабочегоВремени  = Дата(1, 1, 1) + (КонецПериода - НачалоДня(КонецПериода));
				НоваяСтрока.ВидИнтервала          = Справочники.ВидыИнтервалов.Работа;
				НоваяСтрока.ЭтоРабочий            = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат РабочиеИнтервалы;
	КонецЕсли;
	
	ИспользованиеБазовогоГрафика = (РежимИспользованияГрафиков = 1);
	ОбрабатываемыеГрафики = Новый Массив;
	
	Если ИспользованиеБазовогоГрафика И БазовыйГрафик.Пустая() Тогда
		Возврат РабочиеИнтервалы;
	ИначеЕсли ИспользованиеБазовогоГрафика Тогда
		ОбрабатываемыеГрафики.Добавить(БазовыйГрафик);
	Иначе
		Для Каждого Ресурс Из ТаблицаРабочихМест Цикл
			Если Ресурс.График.Пустая() ИЛИ ОбрабатываемыеГрафики.Найти(Ресурс.График) <> Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ОбрабатываемыеГрафики.Добавить(Ресурс.График);
		КонецЦикла;
		
		Если ОбрабатываемыеГрафики.Количество() = 0 И НЕ БазовыйГрафик.Пустая() Тогда
			ОбрабатываемыеГрафики.Добавить(БазовыйГрафик);
			ИспользованиеБазовогоГрафика = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение интервалов ресурсов по графику
	Для Каждого График Из ОбрабатываемыеГрафики Цикл
		ВыходныеДни = Новый Структура;
		ВыходныеДни.Вставить("Суббота",     Ложь);
		ВыходныеДни.Вставить("Воскресенье", Ложь);
		ДанныеТаблицыГрафика = Справочники.ГрафикиРаботы.ПолучитьГрафик(График, НачалоПериода, КонецПериода, ВыходныеДни);
		
		ЗначенияРабочегоИнтервала = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			ДанныеТаблицыГрафика.ВыгрузитьКолонку("ВидИнтервала"),
			"РабочийИнтервал"
		);
		Для Каждого Ресурс Из ТаблицаРабочихМест Цикл
			Если НЕ ИспользованиеБазовогоГрафика И График <> Ресурс.График Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеТаблицыГрафика.Количество() > 0 Тогда
				Для Каждого ИнтервалГрафика Из ДанныеТаблицыГрафика Цикл
					НовыйИнтервалРесурса = РабочиеИнтервалы.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйИнтервалРесурса, ИнтервалГрафика);
					
					НовыйИнтервалРесурса.Ресурс     = Ресурс.Ресурс;
					НовыйИнтервалРесурса.ЭтоРабочий = ЗначенияРабочегоИнтервала.Получить(НовыйИнтервалРесурса.ВидИнтервала);
				КонецЦикла;
			Иначе
				НоваяСтрока = РабочиеИнтервалы.Добавить();
				
				НоваяСтрока.Ресурс                = Ресурс.Ресурс;
				НоваяСтрока.Дата                  = НачалоДня(НачалоПериода);
				НоваяСтрока.НачалоРабочегоВремени = Дата(1, 1, 1) + (НачалоПериода - НачалоДня(НачалоПериода));
				НоваяСтрока.КонецРабочегоВремени  = Дата(1, 1, 1) + (КонецПериода - НачалоДня(КонецПериода));
				Если Не График.Фиксированный Тогда;
					НоваяСтрока.ЭтоРабочий = Ложь;
				Иначе
					НоваяСтрока.ВидИнтервала = Справочники.ВидыИнтервалов.Работа;
					НоваяСтрока.ЭтоРабочий = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Корректировка интервалов ресурсов по табелю
	Если УчитыватьДанныеТабеля Тогда
		Для Каждого Ресурс Из ТаблицаРабочихМест Цикл
			ДанныеТабеля = РегистрыСведений.УРВ_ТабельноеВремя.ПолучитьТабель(Ресурс.Ресурс, НачалоПериода, КонецПериода);
			ДниПоТабелю  = ДанныеТабеля.ВыгрузитьКолонку("Дата");
			
			СтрокиКУдалению = Новый Массив;
			Отбор = Новый Структура("Ресурс", Ресурс.Ресурс);
			
			ИнтервалыРесурса = РабочиеИнтервалы.НайтиСтроки(Отбор);
			Для Каждого Интервал Из ИнтервалыРесурса Цикл
				Если ДниПоТабелю.Найти(Интервал.Дата) <> Неопределено Тогда
					СтрокиКУдалению.Добавить(Интервал);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
				РабочиеИнтервалы.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
			Для Каждого ИнтервалТабеля Из ДанныеТабеля Цикл
				НовыйИнтервалРесурса = РабочиеИнтервалы.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйИнтервалРесурса, ИнтервалТабеля);
				
				НовыйИнтервалРесурса.Продолжительность =
					НовыйИнтервалРесурса.Продолжительность + ИнтервалТабеля.Продолжительность * 3600;
				
				НовыйИнтервалРесурса.ВидДня = ?(НовыйИнтервалРесурса.ВидИнтервала = Справочники.ВидыИнтервалов.Выходной,
					Перечисления.ВидДня.Выходной, Перечисления.ВидДня.Рабочий);
					
				НовыйИнтервалРесурса.ЭтоРабочий = НовыйИнтервалРесурса.ВидИнтервала.РабочийИнтервал;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РабочиеИнтервалы;
	
КонецФункции // ПолучитьГрафикиРабот()

// Контроль пересечения интервалов
//
// Параметры:
//  ДанныеПланирования	 - ТаблицаЗначений, ДанныеФормыКоллекция - Таблица планирования
//  Документ			 - ДокументСсылка						 - Ссылка на документы ЗН или ЗнР.
// 
// Возвращаемое значение:
//  Структура - Структура разультата:
//  * Отказ - Булево -  Признак успешности действия
//  * ТекстОшибки - Строка - Текст ошибки
//  * Справшивать - Булево - Признак необходимости спрашивать пользователя.
//
Функция КонтрольПересеченияИнтервалов(ДанныеПланирования, Документ) Экспорт
	
	// Служебные переменные
	Отказ = Ложь;
	Параметры = Новый Структура;
	
	// Получим настройки пользователя
	НастройкиПользователя = ПраваИНастройкиПользователя.Значение("КонтрольПересеченияВремениРабот");
	
	// Если у пользователя стоит не проверять интервалы или количество равно 0, то закончим
	Если НастройкиПользователя = Перечисления.ВариантыОтветов.Нет ИЛИ ДанныеПланирования.Количество() = 0 Тогда
		Параметры.Вставить("Отказ", 		Отказ);
		Параметры.Вставить("ТекстОшибки", 	"");
		Параметры.Вставить("Спрашивать", 	Ложь);
		Возврат Параметры;
	КонецЕсли;
	
	// Приведем таблицу планирования к необходимому виду
	Если ТипЗнч(ДанныеПланирования) = Тип("ДанныеФормыКоллекция") Тогда
		Планирование = ДанныеПланирования.Выгрузить(, "РабочееМесто,Исполнитель,Начало,Конец");
	Иначе
		Планирование = ДанныеПланирования;
	КонецЕсли;
	
	// Найдем самую раннюю и позднюю даты
	Планирование.Сортировать("Начало");
	Начало = Планирование[0].Начало;
	
	Планирование.Сортировать("Конец УБЫВ");
	Конец = Планирование[0].Конец;
	
	// Добавим идентификатор строки для контроля пересечения внутри таблицы интервалов
	КвалификаторыЧисла = Новый КвалификаторыЧисла("15", 0);
	Планирование.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", , , КвалификаторыЧисла));
	Индекс = 0;
	Для Каждого СтрокаПланирования Из Планирование Цикл
		СтрокаПланирования.ИдентификаторСтроки = Индекс;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// Запрос для определения пересечения 
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Планирование.РабочееМесто КАК РабочееМесто,
		|	Планирование.Исполнитель КАК Исполнитель,
		|	Планирование.Начало КАК Начало,
		|	Планирование.Конец КАК Конец,
		|	Планирование.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ПроверяемыеОбъекты
		|ИЗ
		|	&Планирование КАК Планирование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланированиеРабот.Документ КАК Документ,
		|	ПланированиеРабот.РабочееМесто КАК РабочееМесто,
		|	ПланированиеРабот.Исполнитель КАК Исполнитель,
		|	ПланированиеРабот.Начало КАК Начало,
		|	ПланированиеРабот.Конец КАК Конец,
		|	-1 КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ЗапланированныеОбъекты
		|ИЗ
		|	РегистрСведений.ПланированиеРабот КАК ПланированиеРабот,
		|	ПроверяемыеОбъекты КАК ПроверяемыеОбъекты
		|ГДЕ
		|	ПланированиеРабот.РабочееМесто = ПроверяемыеОбъекты.РабочееМесто
		|	И ПланированиеРабот.Исполнитель = ПроверяемыеОбъекты.Исполнитель
		|	И ПланированиеРабот.Документ <> &Документ
		|	И ПланированиеРабот.Конец > &Начало
		|	И ПланированиеРабот.Начало < &Конец
		|	И ПланированиеРабот.НеАктуален = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ТекущийДокумент,
		|	ПроверяемыеОбъекты.РабочееМесто,
		|	ПроверяемыеОбъекты.Исполнитель,
		|	ПроверяемыеОбъекты.Начало,
		|	ПроверяемыеОбъекты.Конец,
		|	ПроверяемыеОбъекты.ИдентификаторСтроки
		|ИЗ
		|	ПроверяемыеОбъекты КАК ПроверяемыеОбъекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапланированныеОбъекты.Документ КАК Документ,
		|	ЗапланированныеОбъекты.РабочееМесто КАК РабочееМесто,
		|	ЗапланированныеОбъекты.Исполнитель КАК Исполнитель,
		|	ЗапланированныеОбъекты.Начало КАК Начало,
		|	ЗапланированныеОбъекты.Конец КАК Конец
		|ИЗ
		|	ЗапланированныеОбъекты КАК ЗапланированныеОбъекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроверяемыеОбъекты КАК ПроверяемыеОбъекты
		|		ПО (ПроверяемыеОбъекты.РабочееМесто = ЗапланированныеОбъекты.РабочееМесто)
		|			И (ПроверяемыеОбъекты.Исполнитель = ЗапланированныеОбъекты.Исполнитель)
		|			И (ПроверяемыеОбъекты.Начало < ЗапланированныеОбъекты.Конец)
		|			И (ПроверяемыеОбъекты.Конец > ЗапланированныеОбъекты.Начало)
		|			И ЗапланированныеОбъекты.ИдентификаторСтроки <> ПроверяемыеОбъекты.ИдентификаторСтроки";
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Начало", 		Начало);
	Запрос.УстановитьПараметр("Конец", 			Конец);
	Запрос.УстановитьПараметр("Документ", 		Документ);
	Запрос.УстановитьПараметр("Планирование", 	Планирование);
	Запрос.УстановитьПараметр("ТекущийДокумент", НСтр("ru = 'Текущий документ'"));
	// Выполним запрос 
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим не пустой ли запрос
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.Вставить("Отказ", 		Отказ);
		Параметры.Вставить("ТекстОшибки", 	"");
		Параметры.Вставить("Спрашивать", 	Ложь);
		Возврат Параметры;
	КонецЕсли;
	
	// Получим таблицу пересечения по документу
	РезультатЗапроса = РезультатЗапроса.Выбрать();
	
	// Массив в котором хранятся ошибки
	МассивОписанияПересечения = Новый Массив;
	МассивОписанияПересечения.Добавить("");
	МассивОписанияПересечения.Добавить("В планировании имеется пересечение работ:");
	МассивОписанияПересечения.Добавить("");
	
	// Заполним текст ошибки
	Пока РезультатЗапроса.Следующий() Цикл
		МассивОписанияПересечения.Добавить(СтрШаблон(
		"Для исполнителя ""%1"" на рабочем месте ""%2"" с ""%3"" по ""%4"" запланирована работа документом < %5 >",
		РезультатЗапроса.Исполнитель,
		РезультатЗапроса.РабочееМесто,
		Формат(РезультатЗапроса.Начало, "ДФ=""дд.ММ.гггг ЧЧ:мм"""),
		Формат(РезультатЗапроса.Конец, "ДФ=""дд.ММ.гггг ЧЧ:мм"""),
		?(РезультатЗапроса.Документ <> Запрос.Параметры.ТекущийДокумент, 
		Строка(РезультатЗапроса.Документ.ХозОперация) + 
		" " + Строка(РезультатЗапроса.Документ.Номер) + 
		" от " + Строка(Формат(РезультатЗапроса.Документ.Дата, "ДЛФ=Д")), РезультатЗапроса.Документ)));
	КонецЦикла;
	
	МассивОписанияПересечения.Добавить("");
	
	// Признак отмены действий
	Отказ = Истина;
	
	Параметры.Вставить("Отказ", 		Отказ);
	Параметры.Вставить("ТекстОшибки", 	СтрСоединить(МассивОписанияПересечения, Символы.ПС));
	Параметры.Вставить("Спрашивать", 	НастройкиПользователя = Перечисления.ВариантыОтветов.Спрашивать);
	
	Возврат Параметры;
	
КонецФункции

// Формирует таблицу потенциалов на неделю
//
// Параметры:
//  ТипРесурса        - СправочникСсылка - Сотрудник или цех.
//  ИнтервалыРесурсов - ТаблицаЗначений - Таблица интервалов ресурсов.
//  ДетальныеЗаписи   - Булево - Режим детальных записей.
//  НачалоПериода     - Дата - Дата начала периода.
//  КонецПериода      - Дата - Дата окончания периода.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Потенциалы ресурсов.
//
Функция СформироватьТаблицуПотенциаловРесурсов(
	ТипРесурса,
	ИнтервалыРесурсов,
	ДетальныеЗаписи,
	НачалоПериода,
	КонецПериода) Экспорт
	
	СекундЗаДень = 86400;
	
	// тип ресурса
	ПотенциалыРесурсов = Новый ТаблицаЗначений;
	ПотенциалыРесурсов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ПотенциалыРесурсов.Колонки.Добавить("Ресурс", Новый ОписаниеТипов(ТипРесурса));
	ПотенциалыРесурсов.Колонки.Добавить("Потенциал", Новый ОписаниеТипов("Число"));
	
	// получим список уникальных ресурсов
	КопияРесурсов = ИнтервалыРесурсов.Скопировать(, "Ресурс");
	КопияРесурсов.Свернуть("Ресурс");
	Ресурсы       = КопияРесурсов.ВыгрузитьКолонку("Ресурс");
	КопияРесурсов = Неопределено; // освободим память
	
	КоличествоДней = Цел(((КонецПериода + 1) - НачалоПериода) / 86400);
	
	ЗначенияРабочегоИнтервала = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ИнтервалыРесурсов.ВыгрузитьКолонку("ВидИнтервала"),
		"РабочийИнтервал"
	);
	
	Отбор = Новый Структура("Дата,Ресурс");
	Для СчетчикДней = 0 По КоличествоДней - 1 Цикл
		ТекущийДень = НачалоПериода + СекундЗаДень * СчетчикДней;
		Отбор.Дата  = ТекущийДень;
		
		Для Каждого Ресурс Из Ресурсы Цикл
			Отбор.Ресурс = Ресурс;
			
			ИнтервалыРесурсаЗаДень = ИнтервалыРесурсов.НайтиСтроки(Отбор);
			Если ИнтервалыРесурсаЗаДень.Количество() > 0 Тогда
				ПотенциалРесурсаЗаДень = 0;
				Для Каждого Интервал Из ИнтервалыРесурсаЗаДень Цикл
					РабочийИнтервал = ЗначенияРабочегоИнтервала.Получить(Интервал.ВидИнтервала);
					Если РабочийИнтервал <> Неопределено И РабочийИнтервал Тогда
						ПотенциалРесурсаЗаДень = ПотенциалРесурсаЗаДень + (Интервал.Продолжительность - Дата('00010101'));
					КонецЕсли;
				КонецЦикла;
			Иначе
				ПотенциалРесурсаЗаДень = 0;
			КонецЕсли;
			
			НоваяСтрока = ПотенциалыРесурсов.Добавить();
			НоваяСтрока.Дата      = ТекущийДень;
			НоваяСтрока.Ресурс    = Ресурс;
			НоваяСтрока.Потенциал = ?(ДетальныеЗаписи ИЛИ ПотенциалРесурсаЗаДень > 0, ПотенциалРесурсаЗаДень / 3600, 0);
		КонецЦикла;
	КонецЦикла;
	
	Если ДетальныеЗаписи Тогда
		ПотенциалыРесурсов.Свернуть("Дата", "Потенциал");
	КонецЕсли;
	
	Возврат ПотенциалыРесурсов;
	
КонецФункции // СформироватьТаблицуПотенциаловРесурсов()

// Формирует таблицу с загрузкой рабочих мест
//
// Параметры:
//  НачалоПериода                - Дата - Дата начала.
//  КонецПериода                 - Дата - Дата окончания.
//  ПотенциалыДеталиРабочихМест  - ТаблицаЗначений - Потенциал работы цехов.
//  ПотенциалыДеталиИсполнителей - ТаблицаЗначений - Потенциал работы сотрудников.
//  ТаблицаРабочихМест           - ТаблицаЗначений - Список цехов.
//  ТаблицаИсполнителей          - ТаблицаЗначений - Список сотрудников.
//  ПланированиеРабот            - ТаблицаЗначений - Таблица запланированных работ.
//  Автомобиль                   - СправочникСсылка.Автомобиль - Автомобиль клиента.
//  Объект                       - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  УчитыватьЗапланированные     - Булево - Признак учета запланированных работ.
// 
// Возвращаемое значение:
//  РезультатЗапроса - Пакетное получение данных.
//
Функция СформироватьТаблицуЗагрузкиРабочихМест(
	НачалоПериода, 
	КонецПериода, 
	ПотенциалыДеталиРабочихМест, 
	ПотенциалыДеталиИсполнителей, 
	ТаблицаРабочихМест, 
	ТаблицаИсполнителей,
	ПланированиеРабот,
	Автомобиль,
	Объект, 
	УчитыватьЗапланированные = Истина) Экспорт
	
	СекундЗаДень = 86400;
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	КоличествоДней = (НачалоДня(КонецПериода+1) - НачалоДня(НачалоПериода))/СекундЗаДень;
	Для СчетчикДней = 0 По КоличествоДней - 1 Цикл
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Дата = НачалоПериода + СекундЗаДень * СчетчикДней;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"                       , НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"                        , КонецПериода);
	Запрос.УстановитьПараметр("ТаблицаПотенциаловДеталиЦеха"        , ПотенциалыДеталиРабочихМест);
	Запрос.УстановитьПараметр("ТаблицаПотенциаловДеталиИсполнители" , ПотенциалыДеталиИсполнителей);
	Запрос.УстановитьПараметр("ТаблицаДат"                          , ТаблицаДат);
	Запрос.УстановитьПараметр("Автомобиль"                          , Автомобиль);
	запрос.УстановитьПараметр("ТаблицаРабочихМест"                  , ТаблицаРабочихМест.ВыгрузитьКолонку("Ресурс"));
	запрос.УстановитьПараметр("ТаблицаИсполнителей"                 , ТаблицаИсполнителей.ВыгрузитьКолонку("Ресурс"));
	Запрос.УстановитьПараметр("ТЗПланированиеРабот",
	?(УчитыватьЗапланированные, ПланированиеРабот.Выгрузить(, "Исполнитель, РабочееМесто, Начало, Конец") , ПланированиеРабот.Выгрузить().СкопироватьКолонки()));
	
	Запрос.УстановитьПараметр("ТекущийОбъект", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДат.Дата
	|ПОМЕСТИТЬ
	|	ТаблицаДат
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|ВЫБРАТЬ
	|	ТаблицаДат.Дата КАК Дата,
	|	КонецПериода(ТаблицаДат.Дата, ДЕНЬ) КАК Конец,
	|	Цеха.Ссылка КАК Цех,
	|	Цеха.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ВидИспользованияРабочегоМеста = ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияРабочихМест.ПланированиеПриемкиВыдачи)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК КатегорияУпорядочивания
	|ПОМЕСТИТЬ
	|	ТаблицаЦехов
	|ИЗ
	|	Справочник.Цеха КАК Цеха
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ТаблицаДат КАК ТаблицаДат
	|ПО
	|	ИСТИНА
	|ГДЕ
	|	Цеха.ПометкаУдаления = ЛОЖЬ И 
	|	Цеха.ВидИспользованияРабочегоМеста <> ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияРабочихМест.ПустаяСсылка) И
	|	Цеха.ВидИспользованияРабочегоМеста <> ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияРабочихМест.НеУчаствуетВПланировании) И
	|	Цеха.Ссылка В (&ТаблицаРабочихМест)
	|ИНДЕКСИРОВАТЬ ПО
	|	Цех
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаДат.Дата КАК Дата,
	|	КонецПериода(ТаблицаДат.Дата, ДЕНЬ) КАК Конец,
	|	Сотрудники.Ссылка КАК Исполнитель,
	|	Сотрудники.Наименование КАК СотрудникПсевдоним,
	|	Сотрудники.Должность КАК Должность,
	|	Сотрудники.Должность.Наименование КАК ДолжностьПсевдоним,
	|	Сотрудники.ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА Сотрудники.Должность = ЗНАЧЕНИЕ(Справочник.Должности.Диспетчер)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК КатегорияУпорядочивания
	|ПОМЕСТИТЬ
	|	ТаблицаИсполнителей
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ТаблицаДат КАК ТаблицаДат
	|ПО
	|	ИСТИНА
	|ГДЕ
	|	Сотрудники.ЭтоГруппа = ЛОЖЬ И
	|	Сотрудники.Исполнитель = ИСТИНА И
	|	Сотрудники.ФлагУволен = ЛОЖЬ И
	|	Сотрудники.ПометкаУдаления = ЛОЖЬ И
	|	Сотрудники.Ссылка В (&ТаблицаИсполнителей)
	|;
	|
	|ВЫБРАТЬ
	|	ПланированиеРабот.Исполнитель КАК Исполнитель,
	|	ПланированиеРабот.РабочееМесто КАК РабочееМесто,
	|	ПланированиеРабот.Начало КАК Начало,
	|	ПланированиеРабот.Конец КАК Конец
	|ПОМЕСТИТЬ
	|	ТЗПланированиеРабот
	|ИЗ
	|	&ТЗПланированиеРабот КАК ПланированиеРабот
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПланированиеРабот.Дата КАК Дата,
	|	ТаблицаПланированиеРабот.Цех КАК Цех,
	|	ТаблицаПланированиеРабот.Автомобиль КАК Автомобиль,
	|	СУММА(РазностьДат(ТаблицаПланированиеРабот.Начало, ТаблицаПланированиеРабот.Конец, Час)) КАК Продолжительность
	|ПОМЕСТИТЬ
	|	ЗаписиНаРемонтПоЦехамЗаМесяц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЦехов.Дата КАК Дата,
	|		ТаблицаЦехов.Цех КАК Цех,
	|		ПланированиеРабот.Документ.Автомобиль КАК Автомобиль,
	|		ВЫБОР
	|			КОГДА ПланированиеРабот.Начало < ТаблицаЦехов.Дата ТОГДА
	|				ТаблицаЦехов.Дата
	|			ИНАЧЕ
	|				ПланированиеРабот.Начало
	|		КОНЕЦ КАК Начало,
	|		ВЫБОР
	|			КОГДА ПланированиеРабот.Конец < ТаблицаЦехов.Конец ТОГДА
	|				ПланированиеРабот.Конец
	|			ИНАЧЕ
	|				ТаблицаЦехов.Конец
	|		КОНЕЦ КАК Конец
	|	ИЗ
	|		ТаблицаЦехов КАК ТаблицаЦехов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|	ПО
	|		((ПланированиеРабот.Начало <= ТаблицаЦехов.Дата И ПланированиеРабот.Конец >= ТаблицаЦехов.Дата) ИЛИ 
	|		(ТаблицаЦехов.Дата <= ПланированиеРабот.Начало И ПланированиеРабот.Начало <= ТаблицаЦехов.Конец)) И 
	|		ТаблицаЦехов.Цех = ПланированиеРабот.РабочееМесто
	|	ГДЕ
	|		(НЕ ПланированиеРабот.Объект = &ТекущийОбъект)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЦехов.Дата КАК Дата,
	|		ТаблицаЦехов.Цех КАК Цех,
	|		&Автомобиль КАК Автомобиль,
	|		ВЫБОР
	|			КОГДА ПланированиеРабот.Начало < ТаблицаЦехов.Дата ТОГДА
	|				ТаблицаЦехов.Дата
	|			ИНАЧЕ
	|				ПланированиеРабот.Начало
	|		КОНЕЦ КАК Начало,
	|		ВЫБОР
	|			КОГДА ПланированиеРабот.Конец < ТаблицаЦехов.Конец ТОГДА
	|				ПланированиеРабот.Конец
	|			ИНАЧЕ
	|				ТаблицаЦехов.Конец
	|		КОНЕЦ КАК Конец
	|	ИЗ
	|		ТаблицаЦехов КАК ТаблицаЦехов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТЗПланированиеРабот КАК ПланированиеРабот
	|	ПО
	|		((ПланированиеРабот.Начало <= ТаблицаЦехов.Дата И ПланированиеРабот.Конец >= ТаблицаЦехов.Дата) ИЛИ 
	|		(ТаблицаЦехов.Дата <= ПланированиеРабот.Начало И ПланированиеРабот.Начало <= ТаблицаЦехов.Конец)) И 
	|		ТаблицаЦехов.Цех = ПланированиеРабот.РабочееМесто) КАК ТаблицаПланированиеРабот
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПланированиеРабот.Дата,
	|	ТаблицаПланированиеРабот.Цех,
	|	ТаблицаПланированиеРабот.Автомобиль
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПланированиеРабот.Дата КАК Дата,
	|	ТаблицаПланированиеРабот.Исполнитель КАК Исполнитель,
	|	ТаблицаПланированиеРабот.Автомобиль КАК Автомобиль,
	|	СУММА(РазностьДат(ТаблицаПланированиеРабот.Начало, ТаблицаПланированиеРабот.Конец, Час)) КАК Продолжительность
	|ПОМЕСТИТЬ
	|	ЗаписиНаРемонтПоИсполнителямЗаМесяц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаИсполнителей.Дата КАК Дата,
	|		ТаблицаИсполнителей.Исполнитель КАК Исполнитель,
	|		ПланированиеРабот.Документ.Автомобиль КАК Автомобиль,
	|		ВЫБОР
	|			КОГДА ПланированиеРабот.Начало < ТаблицаИсполнителей.Дата ТОГДА
	|				ТаблицаИсполнителей.Дата
	|			ИНАЧЕ
	|				ПланированиеРабот.Начало
	|		КОНЕЦ КАК Начало,
	|		ВЫБОР
	|			КОГДА ПланированиеРабот.Конец < ТаблицаИсполнителей.Конец ТОГДА
	|				ПланированиеРабот.Конец
	|			ИНАЧЕ
	|				ТаблицаИсполнителей.Конец
	|		КОНЕЦ КАК Конец
	|	ИЗ
	|		ТаблицаИсполнителей КАК ТаблицаИсполнителей
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|	ПО
	|		((ПланированиеРабот.Начало <= ТаблицаИсполнителей.Дата И ПланированиеРабот.Конец >= ТаблицаИсполнителей.Дата) ИЛИ 
	|		(ТаблицаИсполнителей.Дата <= ПланированиеРабот.Начало И ПланированиеРабот.Начало <= ТаблицаИсполнителей.Конец)) И 
	|		ТаблицаИсполнителей.Исполнитель = ПланированиеРабот.Исполнитель
	|	ГДЕ
	|		(НЕ ПланированиеРабот.Объект = &ТекущийОбъект)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаИсполнителей.Дата КАК Дата,
	|		ТаблицаИсполнителей.Исполнитель КАК Исполнитель,
	|		&Автомобиль КАК Автомобиль,
	|		ВЫБОР
	|			КОГДА ПланированиеРабот.Начало < ТаблицаИсполнителей.Дата ТОГДА
	|				ТаблицаИсполнителей.Дата
	|			ИНАЧЕ
	|				ПланированиеРабот.Начало
	|		КОНЕЦ КАК Начало,
	|		ВЫБОР
	|			КОГДА ПланированиеРабот.Конец < ТаблицаИсполнителей.Конец ТОГДА
	|				ПланированиеРабот.Конец
	|			ИНАЧЕ
	|				ТаблицаИсполнителей.Конец
	|		КОНЕЦ КАК Конец
	|	ИЗ
	|		ТаблицаИсполнителей КАК ТаблицаИсполнителей
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТЗПланированиеРабот КАК ПланированиеРабот
	|	ПО
	|		((ПланированиеРабот.Начало <= ТаблицаИсполнителей.Дата И ПланированиеРабот.Конец >= ТаблицаИсполнителей.Дата) ИЛИ 
	|		(ТаблицаИсполнителей.Дата <= ПланированиеРабот.Начало И ПланированиеРабот.Начало <= ТаблицаИсполнителей.Конец)) И 
	|		ТаблицаИсполнителей.Исполнитель = ПланированиеРабот.Исполнитель) КАК ТаблицаПланированиеРабот
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПланированиеРабот.Дата,
	|	ТаблицаПланированиеРабот.Исполнитель,
	|	ТаблицаПланированиеРабот.Автомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПотенциалов.Дата,
	|	ТаблицаПотенциалов.Ресурс,
	|	ТаблицаПотенциалов.Потенциал
	|ПОМЕСТИТЬ
	|	ТаблицаПотенциаловДеталиИсполнители
	|ИЗ
	|	&ТаблицаПотенциаловДеталиИсполнители КАК ТаблицаПотенциалов
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПотенциалов.Дата,
	|	ТаблицаПотенциалов.Ресурс,
	|	ТаблицаПотенциалов.Потенциал
	|ПОМЕСТИТЬ
	|	ТаблицаПотенциаловДеталиЦеха
	|ИЗ
	|	&ТаблицаПотенциаловДеталиЦеха КАК ТаблицаПотенциалов
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаДат.Дата КАК Период,
	|	ПотенциалРесурсов.РабочийРесурс КАК РабочееМесто,
	|	МАКСИМУМ(ПотенциалРесурсов.Период) КАК ПериодПоказателя
	|ПОМЕСТИТЬ
	|	ДатаСрезПоследнего
	|ИЗ
	|	ТаблицаДат КАК ТаблицаДат
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПотенциалРесурсов КАК ПотенциалРесурсов
	|ПО
	|	ТаблицаДат.Дата >= ПотенциалРесурсов.Период
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДат.Дата,
	|	ПотенциалРесурсов.РабочийРесурс
	|;
	|
	|ВЫБРАТЬ
	|	ВложеннаяТаблица.Период КАК Период,
	|	ВложеннаяТаблица.РабочееМесто КАК РабочееМесто,
	|	СУММА(ВложеннаяТаблица.ПотенциалАвтомобилей) КАК ПотенциалАвтомобилей,
	|	СУММА(ВложеннаяТаблица.ЗагрузкаАвтомобилиДетали) КАК ЗагрузкаАвтомобилиДетали,
	|	СУММА(ВложеннаяТаблица.ЗагрузкаНормочасыДетали) КАК ЗагрузкаНормочасыДетали
	|ПОМЕСТИТЬ ЗагрузкаАвтомобилиДеталиПоЦехам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатаПоследнегоПоказателя.Период КАК Период,
	|		ДатаПоследнегоПоказателя.РабочееМесто КАК РабочееМесто,
	|		ПотенциалРесурсов.КоличествоАвтомобилей КАК ПотенциалАвтомобилей,
	|		0 КАК ЗагрузкаАвтомобилиДетали,
	|		0 КАК ЗагрузкаНормочасыДетали
	|	ИЗ
	|		ДатаСрезПоследнего КАК ДатаПоследнегоПоказателя
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПотенциалРесурсов КАК ПотенциалРесурсов
	|	ПО
	|		(ДатаПоследнегоПоказателя.РабочееМесто ССЫЛКА Справочник.Цеха) И 
	|		ДатаПоследнегоПоказателя.ПериодПоказателя = ПотенциалРесурсов.Период И 
	|		ДатаПоследнегоПоказателя.РабочееМесто = ПотенциалРесурсов.РабочийРесурс
	|	ГДЕ
	|		ДатаПоследнегоПоказателя.РабочееМесто ССЫЛКА Справочник.Цеха
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаписиНаРемонтЗаМесяцЦеха.Дата,
	|		ЗаписиНаРемонтЗаМесяцЦеха.Цех,
	|		0,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиНаРемонтЗаМесяцЦеха.Автомобиль),
	|		СУММА(ЗаписиНаРемонтЗаМесяцЦеха.Продолжительность)
	|	ИЗ
	|		ЗаписиНаРемонтПоЦехамЗаМесяц КАК ЗаписиНаРемонтЗаМесяцЦеха
	|	СГРУППИРОВАТЬ ПО
	|		ЗаписиНаРемонтЗаМесяцЦеха.Дата,
	|		ЗаписиНаРемонтЗаМесяцЦеха.Цех) КАК ВложеннаяТаблица
	|СГРУППИРОВАТЬ ПО
	|	ВложеннаяТаблица.Период,
	|	ВложеннаяТаблица.РабочееМесто
	|;
	|
	|ВЫБРАТЬ
	|	ВложеннаяТаблица.Период КАК Период,
	|	ВложеннаяТаблица.РабочееМесто КАК РабочееМесто,
	|	СУММА(ВложеннаяТаблица.ПотенциалАвтомобилей) КАК ПотенциалАвтомобилей,
	|	СУММА(ВложеннаяТаблица.ЗагрузкаАвтомобилиДетали) КАК ЗагрузкаАвтомобилиДетали,
	|	СУММА(ВложеннаяТаблица.ЗагрузкаНормочасыДетали) КАК ЗагрузкаНормочасыДетали
	|ПОМЕСТИТЬ ЗагрузкаАвтомобилиДеталиПоИсполнителям
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатаПоследнегоПоказателя.Период КАК Период,
	|		ДатаПоследнегоПоказателя.РабочееМесто КАК РабочееМесто,
	|		ПотенциалРесурсов.КоличествоАвтомобилей КАК ПотенциалАвтомобилей,
	|		0 КАК ЗагрузкаАвтомобилиДетали,
	|		0 КАК ЗагрузкаНормочасыДетали
	|	ИЗ
	|		ДатаСрезПоследнего КАК ДатаПоследнегоПоказателя
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПотенциалРесурсов КАК ПотенциалРесурсов
	|	ПО
	|		(ДатаПоследнегоПоказателя.РабочееМесто ССЫЛКА Справочник.Сотрудники) И 
	|		ДатаПоследнегоПоказателя.ПериодПоказателя = ПотенциалРесурсов.Период И 
	|		ДатаПоследнегоПоказателя.РабочееМесто = ПотенциалРесурсов.РабочийРесурс
	|	ГДЕ
	|		ДатаПоследнегоПоказателя.РабочееМесто ССЫЛКА Справочник.Сотрудники
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаписиНаРемонтЗаМесяцИсполнители.Дата,
	|		ЗаписиНаРемонтЗаМесяцИсполнители.Исполнитель,
	|		0,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиНаРемонтЗаМесяцИсполнители.Автомобиль),
	|		СУММА(ЗаписиНаРемонтЗаМесяцИсполнители.Продолжительность)
	|	ИЗ
	|		ЗаписиНаРемонтПоИсполнителямЗаМесяц КАК ЗаписиНаРемонтЗаМесяцИсполнители
	|	СГРУППИРОВАТЬ ПО
	|		ЗаписиНаРемонтЗаМесяцИсполнители.Дата,
	|		ЗаписиНаРемонтЗаМесяцИсполнители.Исполнитель) КАК ВложеннаяТаблица
	|СГРУППИРОВАТЬ ПО
	|	ВложеннаяТаблица.Период,
	|	ВложеннаяТаблица.РабочееМесто
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиНаРемонтЗаМесяцИсполнители.Дата КАК Период,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиНаРемонтЗаМесяцИсполнители.Автомобиль) КАК ЗагрузкаАвтомобилиИтоги
	|ПОМЕСТИТЬ
	|	ЗагрузкаАвтомобилиИтогиПоИсполнителям
	|ИЗ
	|	ЗаписиНаРемонтПоИсполнителямЗаМесяц КАК ЗаписиНаРемонтЗаМесяцИсполнители
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиНаРемонтЗаМесяцИсполнители.Дата
	|;
	|
	|ВЫБРАТЬ
	|	ЗаписиНаРемонтЗаМесяцЦеха.Дата КАК Период,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиНаРемонтЗаМесяцЦеха.Автомобиль) КАК ЗагрузкаАвтомобилиИтоги
	|ПОМЕСТИТЬ
	|	ЗагрузкаАвтомобилиИтогиПоЦехам
	|ИЗ
	|	ЗаписиНаРемонтПоЦехамЗаМесяц КАК ЗаписиНаРемонтЗаМесяцЦеха
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиНаРемонтЗаМесяцЦеха.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ
	|	ЗаписиНаРемонтПоЦехамЗаМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ
	|	ЗаписиНаРемонтПоИсполнителямЗаМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ
	|	ДатаСрезПоследнего
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаЦехов.Дата КАК Дата,
	|	ТаблицаЦехов.Цех КАК Цех,
	|	ТаблицаЦехов.Наименование КАК РабочееМестоНаименование,
	|	ТаблицаЦехов.КатегорияУпорядочивания КАК КатегорияУпорядочивания,
	|	ВЫБОР
	|		КОГДА ТаблицаЦехов.КатегорияУпорядочивания = 2
	|				И НЕ ТаблицаПотенциаловДеталиЦеха.Потенциал ЕСТЬ NULL 
	|				И ТаблицаПотенциаловДеталиЦеха.Потенциал > 0
	|			ТОГДА ТаблицаПотенциаловДеталиЦеха.Потенциал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПотенциалНормочасов,
	|	ВЫБОР
	|		КОГДА ТаблицаЦехов.КатегорияУпорядочивания = 2
	|				И НЕ ЗагрузкаАвтомобилиДеталиПоЦехам.ЗагрузкаНормочасыДетали ЕСТЬ NULL 
	|			ТОГДА ЗагрузкаАвтомобилиДеталиПоЦехам.ЗагрузкаНормочасыДетали
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗагрузкаНормочасов,
	|	ЕСТЬNULL(ЗагрузкаАвтомобилиДеталиПоЦехам.ПотенциалАвтомобилей, 0) КАК ПотенциалАвтомобилей,
	|	ЕСТЬNULL(ЗагрузкаАвтомобилиДеталиПоЦехам.ЗагрузкаАвтомобилиДетали, 0) КАК ЗагрузкаАвтомобилей,
	|	ЕСТЬNULL(ЗагрузкаАвтомобилиИтогиПоЦехам.ЗагрузкаАвтомобилиИтоги, 0) КАК ЗагрузкаАвтомобилейИтоги,
	|	ЕСТЬNULL(ТаблицаПотенциаловДеталиЦеха.Потенциал, -1) КАК ПотенциалПоГрафикам
	|ИЗ
	|	ТаблицаЦехов КАК ТаблицаЦехов
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ЗагрузкаАвтомобилиДеталиПоЦехам КАК ЗагрузкаАвтомобилиДеталиПоЦехам
	|ПО
	|	ТаблицаЦехов.Цех = ЗагрузкаАвтомобилиДеталиПоЦехам.РабочееМесто И 
	|	ТаблицаЦехов.Дата = ЗагрузкаАвтомобилиДеталиПоЦехам.Период
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТаблицаПотенциаловДеталиЦеха КАК ТаблицаПотенциаловДеталиЦеха
	|ПО
	|	ТаблицаЦехов.Цех = ТаблицаПотенциаловДеталиЦеха.Ресурс И 
	|	ТаблицаЦехов.Дата = ТаблицаПотенциаловДеталиЦеха.Дата
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ЗагрузкаАвтомобилиИтогиПоЦехам КАК ЗагрузкаАвтомобилиИтогиПоЦехам
	|ПО
	|	ТаблицаЦехов.Дата = ЗагрузкаАвтомобилиИтогиПоЦехам.Период
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	КатегорияУпорядочивания,
	|	РабочееМестоНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИсполнителей.Дата КАК Дата,
	|	ТаблицаИсполнителей.Исполнитель,
	|	ТаблицаИсполнителей.СотрудникПсевдоним,
	|	ТаблицаИсполнителей.ДолжностьПсевдоним,
	|	ТаблицаИсполнителей.ГрафикРаботы,
	|	ТаблицаИсполнителей.КатегорияУпорядочивания КАК КатегорияУпорядочивания,
	|	ВЫБОР
	|		КОГДА ТаблицаИсполнителей.КатегорияУпорядочивания = 2
	|				И НЕ ТаблицаПотенциаловДеталиИсполнители.Потенциал ЕСТЬ NULL 
	|				И ТаблицаПотенциаловДеталиИсполнители.Потенциал > 0
	|			ТОГДА ТаблицаПотенциаловДеталиИсполнители.Потенциал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПотенциалНормочасов,
	|	ВЫБОР
	|		КОГДА ТаблицаИсполнителей.КатегорияУпорядочивания = 2
	|				И НЕ ЗагрузкаАвтомобилиДеталиПоИсполнителям.ЗагрузкаНормочасыДетали ЕСТЬ NULL 
	|			ТОГДА ЗагрузкаАвтомобилиДеталиПоИсполнителям.ЗагрузкаНормочасыДетали
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗагрузкаНормочасов,
	|	ВЫБОР
	|		КОГДА ТаблицаИсполнителей.КатегорияУпорядочивания = 2
	|				И НЕ ЗагрузкаАвтомобилиДеталиПоИсполнителям.ПотенциалАвтомобилей ЕСТЬ NULL 
	|			ТОГДА ЗагрузкаАвтомобилиДеталиПоИсполнителям.ПотенциалАвтомобилей
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПотенциалАвтомобилей,
	|	ЕСТЬNULL(ЗагрузкаАвтомобилиДеталиПоИсполнителям.ЗагрузкаАвтомобилиДетали, 0) КАК ЗагрузкаАвтомобилей,
	|	ЕСТЬNULL(ЗагрузкаАвтомобилиИтогиПоИсполнителям.ЗагрузкаАвтомобилиИтоги, 0) КАК ЗагрузкаАвтомобилейИтоги,
	|	ЕСТЬNULL(ТаблицаПотенциаловДеталиИсполнители.Потенциал, -1) КАК ПотенциалПоГрафикам
	|ИЗ
	|	ТаблицаИсполнителей КАК ТаблицаИсполнителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗагрузкаАвтомобилиДеталиПоИсполнителям КАК ЗагрузкаАвтомобилиДеталиПоИсполнителям
	|		ПО ТаблицаИсполнителей.Исполнитель = ЗагрузкаАвтомобилиДеталиПоИсполнителям.РабочееМесто
	|			И ТаблицаИсполнителей.Дата = ЗагрузкаАвтомобилиДеталиПоИсполнителям.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПотенциаловДеталиИсполнители КАК ТаблицаПотенциаловДеталиИсполнители
	|		ПО ТаблицаИсполнителей.Исполнитель = ТаблицаПотенциаловДеталиИсполнители.Ресурс
	|			И ТаблицаИсполнителей.Дата = ТаблицаПотенциаловДеталиИсполнители.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗагрузкаАвтомобилиИтогиПоИсполнителям КАК ЗагрузкаАвтомобилиИтогиПоИсполнителям
	|		ПО ТаблицаИсполнителей.Дата = ЗагрузкаАвтомобилиИтогиПоИсполнителям.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ТаблицаИсполнителей.ДолжностьПсевдоним,
	|	ТаблицаИсполнителей.СотрудникПсевдоним";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции // СформироватьТаблицуЗагрузкиРабочихМест()

// Формирует таблицу фактической загрузки на неделю для таблицы показателей
//
// Параметры:
//  НачалоПериода     - Дата - Дата начала.
//  КонецПериода      - Дата - Дата окончания.
//  РежимКалендаря    - Строка - Режим календаря вывода.
//  ОтборыЦеха        - ТаблицаЗначений - Список цехов.
//  ОтборыИсполнители - ТаблицаЗначений - Список сотрудников.
//  ПланированиеРабот - ТаблицаЗначений - Таблица запланированных работ.
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица недельной загрузки.
//
Функция СформироватьТаблицуНедельнойЗагрузкиРабочихМест(
	Знач НачалоПериода,
	КонецПериода,
	РежимКалендаря,
	ОтборыЦеха,
	ОтборыИсполнители,
	ПланированиеРабот,
	Объект) Экспорт
	
	СекундЗаДень = 86400;
		
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Название", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаДат.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДат.Колонки.Добавить("КонецПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДат.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	Порядок = 0;
	Пока НачалоПериода < КонецПериода Цикл
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Название      = Формат(НачалоПериода, "ДФ=ддд");
		НоваяСтрока.НачалоПериода = НачалоПериода;
		НоваяСтрока.КонецПериода  = КонецДня(НачалоПериода);
		НоваяСтрока.Порядок       = Порядок;
		
		Порядок       = Порядок + 1;
		НачалоПериода = НачалоПериода+СекундЗаДень;
	КонецЦикла;
	
	ЕстьОтборПоЦехам        = ОтборыЦеха.Количество()>0;
	ЕстьОтборПоИсполнителям = ОтборыИсполнители.Количество()>0;
		
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("ТаблицаДат",          ТаблицаДат);
	Запрос.УстановитьПараметр("ТЗПланированиеРабот", ПланированиеРабот.Выгрузить(, "Исполнитель,РабочееМесто,Начало,Конец"));
	Запрос.УстановитьПараметр("ТекущийОбъект", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДат.Название КАК Название,
	|	ТаблицаДат.НачалоПериода КАК НачалоПериода,
	|	ТаблицаДат.КонецПериода КАК КонецПериода,
	|	ТаблицаДат.Порядок КАК Порядок
	|ПОМЕСТИТЬ
	|	ТаблицаДат
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|ВЫБРАТЬ
	|	ПланированиеРабот.Исполнитель КАК Исполнитель,
	|	ПланированиеРабот.РабочееМесто КАК РабочееМесто,
	|	ПланированиеРабот.Начало КАК Начало,
	|	ПланированиеРабот.Конец КАК Конец
	|ПОМЕСТИТЬ
	|	ТЗПланированиеРабот
	|ИЗ
	|	&ТЗПланированиеРабот КАК ПланированиеРабот
	|;";
	
	Если РежимКалендаря = "Общий" Или РежимКалендаря = "РабочиеМеста"  Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Цеха.Ссылка КАК РабочееМесто,
		|	ТаблицаДат.Название КАК Название,
		|	ТаблицаДат.НачалоПериода КАК Дата,
		|	ТаблицаДат.КонецПериода КАК Конец,
		|	ТаблицаДат.Порядок КАК Порядок
		|ПОМЕСТИТЬ
		|	ТаблицаРабочихМест
		|ИЗ
		|	Справочник.Цеха КАК Цеха,
		|	ТаблицаДат КАК ТаблицаДат
		|ГДЕ
		|	Цеха.ПометкаУдаления = ЛОЖЬ И 
		|	Цеха.ВидИспользованияРабочегоМеста <> ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияРабочихМест.ПустаяСсылка) И 
		|	Цеха.ВидИспользованияРабочегоМеста <> ЗНАЧЕНИЕ(Перечисление.ВидыИспользованияРабочихМест.НеУчаствуетВПланировании)" + ?(ЕстьОтборПоЦехам, " И 
		|	Цеха.Ссылка В (&Цеха)", "") + "
		|;
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаПланированиеРабот.Название) КАК Название,
		|	ТаблицаПланированиеРабот.Порядок КАК Порядок,
		|	СУММА(РазностьДат(ТаблицаПланированиеРабот.Начало, ТаблицаПланированиеРабот.Конец, Час)) КАК Записано";
		
		Если РежимКалендаря = "Общий" Тогда
			Запрос.Текст = Запрос.Текст +"
				|ПОМЕСТИТЬ
				|	ИтогЦеха";
		КонецЕсли;
			
		Запрос.Текст = Запрос.Текст +
		"
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаРабочихМест.Название КАК Название,
		|		ТаблицаРабочихМест.Порядок КАК Порядок,
		|		ВЫБОР
		|			КОГДА ПланированиеРабот.Начало ЕСТЬ NULL ИЛИ ПланированиеРабот.Начало < ТаблицаРабочихМест.Дата ТОГДА
		|				ТаблицаРабочихМест.Дата
		|			ИНАЧЕ
		|				ПланированиеРабот.Начало
		|		КОНЕЦ КАК Начало,
		|		ВЫБОР
		|			КОГДА ПланированиеРабот.Конец Есть NULL ТОГДА
		|				ТаблицаРабочихМест.Дата
		|			КОГДА ПланированиеРабот.Конец < ТаблицаРабочихМест.Конец ТОГДА
		|				ПланированиеРабот.Конец
		|			ИНАЧЕ
		|				ТаблицаРабочихМест.Конец
		|		КОНЕЦ КАК Конец
		|	ИЗ
		|		ТаблицаРабочихМест КАК ТаблицаРабочихМест
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
		|	ПО
		|		((ПланированиеРабот.Начало <= ТаблицаРабочихМест.Дата И ПланированиеРабот.Конец >= ТаблицаРабочихМест.Дата) ИЛИ 
		|		(ТаблицаРабочихМест.Дата <= ПланированиеРабот.Начало И ПланированиеРабот.Начало <= ТаблицаРабочихМест.Конец)) И 
		|		ТаблицаРабочихМест.РабочееМесто = ПланированиеРабот.РабочееМесто И 
		|		(НЕ ПланированиеРабот.Документ = &ТекущийОбъект)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаРабочихМест.Название КАК Название,
		|		ТаблицаРабочихМест.Порядок КАК Порядок,
		|		ВЫБОР
		|			КОГДА ПланированиеРабот.Начало ЕСТЬ NULL ИЛИ ПланированиеРабот.Начало < ТаблицаРабочихМест.Дата ТОГДА
		|				ТаблицаРабочихМест.Дата
		|			ИНАЧЕ
		|				ПланированиеРабот.Начало
		|		КОНЕЦ КАК Начало,
		|		ВЫБОР
		|			КОГДА ПланированиеРабот.Конец Есть NULL ТОГДА
		|				ТаблицаРабочихМест.Дата
		|			КОГДА ПланированиеРабот.Конец < ТаблицаРабочихМест.Конец ТОГДА
		|				ПланированиеРабот.Конец
		|			ИНАЧЕ
		|				ТаблицаРабочихМест.Конец
		|		КОНЕЦ КАК Конец
		|	ИЗ
		|		ТаблицаРабочихМест КАК ТаблицаРабочихМест
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТЗПланированиеРабот КАК ПланированиеРабот
		|	ПО
		|		((ПланированиеРабот.Начало <= ТаблицаРабочихМест.Дата И ПланированиеРабот.Конец >= ТаблицаРабочихМест.Дата) ИЛИ 
		|		(ТаблицаРабочихМест.Дата <= ПланированиеРабот.Начало И ПланированиеРабот.Начало <= ТаблицаРабочихМест.Конец)) И 
		|		ТаблицаРабочихМест.РабочееМесто = ПланированиеРабот.РабочееМесто) КАК ТаблицаПланированиеРабот
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПланированиеРабот.Порядок";
		
		Запрос.УстановитьПараметр("Цеха", ОтборыЦеха.Выгрузить(, "Ресурс").ВыгрузитьКолонку("Ресурс"));
		Если  РежимКалендаря = "РабочиеМеста"  Тогда
			Запрос.Текст = Запрос.Текст +"
				|УПОРЯДОЧИТЬ ПО
				|	ТаблицаПланированиеРабот.Порядок";
			Возврат Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|;";
	КонецЕсли;
	
	Если РежимКалендаря = "Общий" Или РежимКалендаря = "Исполнители" Тогда
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Исполнитель,
		|	ТаблицаДат.Название КАК Название,
		|	ТаблицаДат.НачалоПериода КАК Дата,
		|	ТаблицаДат.КонецПериода КАК Конец,
		|	ТаблицаДат.Порядок КАК Порядок
		|ПОМЕСТИТЬ
		|	ТаблицаИсполнителей
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники,
		|	ТаблицаДат КАК ТаблицаДат
		|ГДЕ
		|	Сотрудники.ЭтоГруппа = ЛОЖЬ И 
		|	Сотрудники.Исполнитель = ИСТИНА И 
		|	Сотрудники.ФлагУволен = ЛОЖЬ И 
		|	Сотрудники.ПометкаУдаления = ЛОЖЬ И 
		|	(НЕ Сотрудники.Должность = ЗНАЧЕНИЕ(Справочник.Должности.Диспетчер))" + ?(ЕстьОтборПоИсполнителям, " И 
		|	Сотрудники.Ссылка В (&Исполнители)", "") + "
		|ИНДЕКСИРОВАТЬ ПО
		|	Исполнитель
		|;
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаПланированиеРабот.Название) КАК Название,
		|	ТаблицаПланированиеРабот.Порядок КАК Порядок,
		|	СУММА(РазностьДат(ТаблицаПланированиеРабот.Начало, ТаблицаПланированиеРабот.Конец, Час)) КАК Записано";
		
		Если РежимКалендаря = "Общий" Тогда
			Запрос.Текст = Запрос.Текст +"
				|ПОМЕСТИТЬ
				|	ИтогИсполнители";
		КонецЕсли;
			
		Запрос.Текст = Запрос.Текст +"
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаИсполнителей.Название КАК Название,
		|		ТаблицаИсполнителей.Порядок КАК Порядок,
		|		ВЫБОР
		|			КОГДА ПланированиеРабот.Начало ЕСТЬ NULL ИЛИ ПланированиеРабот.Начало < ТаблицаИсполнителей.Дата ТОГДА
		|				ТаблицаИсполнителей.Дата
		|			ИНАЧЕ
		|				ПланированиеРабот.Начало
		|		КОНЕЦ КАК Начало,
		|		ВЫБОР
		|			КОГДА ПланированиеРабот.Конец Есть NULL ТОГДА
		|				ТаблицаИсполнителей.Дата
		|			КОГДА ПланированиеРабот.Конец < ТаблицаИсполнителей.Конец ТОГДА
		|				ПланированиеРабот.Конец
		|			ИНАЧЕ
		|				ТаблицаИсполнителей.Конец
		|		КОНЕЦ КАК Конец
		|	ИЗ
		|		ТаблицаИсполнителей КАК ТаблицаИсполнителей
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
		|	ПО
		|		((ПланированиеРабот.Начало <= ТаблицаИсполнителей.Дата И ПланированиеРабот.Конец >= ТаблицаИсполнителей.Дата) ИЛИ 
		|		(ТаблицаИсполнителей.Дата <= ПланированиеРабот.Начало И ПланированиеРабот.Начало <= ТаблицаИсполнителей.Конец)) И 
		|		ТаблицаИсполнителей.Исполнитель = ПланированиеРабот.Исполнитель И 
		|		(НЕ ПланированиеРабот.Документ = &ТекущийОбъект)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаИсполнителей.Название КАК Название,
		|		ТаблицаИсполнителей.Порядок КАК Порядок,
		|		ВЫБОР
		|			КОГДА ПланированиеРабот.Начало ЕСТЬ NULL ИЛИ ПланированиеРабот.Начало < ТаблицаИсполнителей.Дата ТОГДА
		|				ТаблицаИсполнителей.Дата
		|			ИНАЧЕ
		|				ПланированиеРабот.Начало
		|		КОНЕЦ КАК Начало,
		|		ВЫБОР
		|			КОГДА ПланированиеРабот.Конец Есть NULL ТОГДА
		|				ТаблицаИсполнителей.Дата
		|			КОГДА ПланированиеРабот.Конец < ТаблицаИсполнителей.Конец ТОГДА
		|				ПланированиеРабот.Конец
		|			ИНАЧЕ
		|				ТаблицаИсполнителей.Конец
		|		КОНЕЦ КАК Конец
		|	ИЗ
		|		ТаблицаИсполнителей КАК ТаблицаИсполнителей
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТЗПланированиеРабот КАК ПланированиеРабот
		|	ПО
		|		((ПланированиеРабот.Начало <= ТаблицаИсполнителей.Дата И ПланированиеРабот.Конец >= ТаблицаИсполнителей.Дата) ИЛИ 
		|		(ТаблицаИсполнителей.Дата <= ПланированиеРабот.Начало И ПланированиеРабот.Начало <= ТаблицаИсполнителей.Конец)) И 
		|		ТаблицаИсполнителей.Исполнитель = ПланированиеРабот.Исполнитель) КАК ТаблицаПланированиеРабот
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПланированиеРабот.Порядок";
		
		Запрос.УстановитьПараметр("Исполнители", ОтборыИсполнители.Выгрузить(, "Ресурс").ВыгрузитьКолонку("Ресурс"));
		Если РежимКалендаря = "Исполнители"  Тогда
			Запрос.Текст = Запрос.Текст +" 
				|УПОРЯДОЧИТЬ ПО
				|	ТаблицаПланированиеРабот.Порядок";
			Возврат Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +"
	|;
	|ВЫБРАТЬ
	|	ТаблицаРабочихМестИтог.Название КАК Название,
	|	ТаблицаРабочихМестИтог.Порядок КАК Порядок,
	|	ТаблицаРабочихМестИтог.Записано КАК Записано
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	ИтогЦеха КАК ТаблицаРабочихМестИтог
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаИсполнителейИтог.Название,
	|	ТаблицаИсполнителейИтог.Порядок,
	|	ТаблицаИсполнителейИтог.Записано
	|ИЗ
	|	ИтогИсполнители КАК ТаблицаИсполнителейИтог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итог.Название КАК Название,
	|	Итог.Порядок КАК Порядок,
	|	СУММА(Итог.Записано) КАК Записано
	|ИЗ
	|	Итог КАК Итог
	|
	|СГРУППИРОВАТЬ ПО
	|	Итог.Название,
	|	Итог.Порядок
	|УПОРЯДОЧИТЬ ПО
	|	Итог.Порядок";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //СформироватьТаблицуНедельнойЗагрузкиРабочихМест()

// Выполняет корректировку планирования объектов в документе.
// Необходима для очистки интервалов занятых удаленными из документа объектами планирования.
//
// Параметры:
//  Документ - ДокументСсылка.ЗаявкаНаРемонт, ДокументСсылка.ЗаказНаряд - Документ, для которого необходимо обновить записи.
//  ОбновлятьПланированиеРесурсов - Булево - Признак неоходимости выполнять обновление регистра планирование ресурсов.
//
// Возвращаемое значение:
//   Булево - Признак отказы ваполнения записи
//
Функция СкорректироватьПланированиеПоДокументу(Документ, ОбновлятьПланированиеРесурсов = Истина) Экспорт
	
	Если Документ.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Автоработы.ИдентификаторРаботы КАК Объект
	|ПОМЕСТИТЬ ОбъектыДокумента
	|ИЗ
	|	Документ.%1.Автоработы КАК Автоработы
	|ГДЕ
	|	Автоработы.Ссылка = &Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВспомогательныеАвтоработы.ИдентификаторРаботы
	|ИЗ
	|	Документ.%1.ВспомогательныеАвтоработы КАК ВспомогательныеАвтоработы
	|ГДЕ
	|	ВспомогательныеАвтоработы.Ссылка = &Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПричиныОбращения.ИдентификаторПричиныОбращения
	|ИЗ
	|	Документ.%1.ПричиныОбращения КАК ПричиныОбращения
	|ГДЕ
	|	ПричиныОбращения.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПланированиеРабот.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ЗапланированныеОбъект
	|ИЗ
	|	РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|ГДЕ
	|	ПланированиеРабот.Документ = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапланированныеОбъект.Идентификатор КАК Идентификатор,
	|	ОбъектыДокумента.Объект КАК Объект
	|ИЗ
	|	ЗапланированныеОбъект КАК ЗапланированныеОбъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыДокумента КАК ОбъектыДокумента
	|		ПО ЗапланированныеОбъект.Идентификатор = ОбъектыДокумента.Объект
	|ГДЕ
	|	ОбъектыДокумента.Объект ЕСТЬ NULL";
	
	ДокументМетаданные = Документ.Метаданные();
	Запрос = Новый Запрос(СтрШаблон(ТекстЗапроса, ДокументМетаданные.Имя));
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Набор = РегистрыСведений.ПланированиеРабот.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Документ);
	Набор.Прочитать();
	ДаныеИзНабора = Набор.Выгрузить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДляУдаления = ДаныеИзНабора.НайтиСтроки(Новый Структура("Идентификатор", Выборка.Идентификатор));
		Для Каждого Строка Из ДляУдаления Цикл
			ДаныеИзНабора.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	Набор.Загрузить(ДаныеИзНабора);
	Попытка
		Набор.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось обновить планирование документа.
			|Подробнее в журнале регистрации.'")
		);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление планирования'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			ДокументМетаданные,
			Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
		);
		Возврат Истина;
	КонецПопытки;
	
	Если ОбновлятьПланированиеРесурсов Тогда
		Возврат ОбновитьПланированиеРесурсовПоДокументу(Документ);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // СкорректироватьПланированиеПоДокументу()

// Определяет назначение ресурса только для приемки или выдачи автомобиля.
//
// Параметры:
//  Ресурс - СправочникСсылка.Сотрудники, СправочникСсылка.Цеха - Ресурс планирования.
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоРесурсПриемкиВыдачи(Ресурс) Экспорт
	
	Если ТипЗнч(Ресурс) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Возврат ЭтоИсполнительПриемкиВыдачи(Ресурс);
		
	КонецЕсли;
	
	Возврат ЭтоРабочееМестоПриемкиВыдачи(Ресурс);
	
КонецФункции

// Выполняет перезаполнение регистра планирование ресурсов по регистру планирование работ.
//
// Параметры:
//  Документ - ДокументСсылка.ЗаявкаНаРемонт, ДокументСсылка.ЗаказНаряд - Документ, для которого необходимо обновить записи.
//  УчитыватьНеАктивныеРаботы - Булево - Признак получения планирования работ с признаком НеАктуален.
//
// Возвращаемое значение:
//   Булево - Признак отказы ваполнения записи
//
Функция ОбновитьПланированиеРесурсовПоДокументу(Документ, УчитыватьНеАктивныеРаботы = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Автомобиль = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ).АвтомобильДокумента(Документ);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланированиеРабот.РабочееМесто КАК Ресурс,
	|	ПланированиеРабот.Документ КАК Документ,
	|	ПланированиеРабот.Начало КАК НачалоИнтервала,
	|	ПланированиеРабот.Конец КАК КонецИнтервала,
	|	&Автомобиль КАК Автомобиль
	|ИЗ
	|	РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|ГДЕ
	|	ПланированиеРабот.Документ = &Документ
	|	И ПланированиеРабот.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.Цеха.ПустаяСсылка)
	|	#УчитыватьНеАктивныеРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланированиеРабот.Исполнитель,
	|	ПланированиеРабот.Документ,
	|	ПланированиеРабот.Начало,
	|	ПланированиеРабот.Конец,
	|	&Автомобиль
	|ИЗ
	|	РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|ГДЕ
	|	ПланированиеРабот.Документ = &Документ
	|	И ПланированиеРабот.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	#УчитыватьНеАктивныеРаботы";
	
	СтрокаЗамены = ?(УчитыватьНеАктивныеРаботы, "И НЕ ПланированиеРабот.НеАктуален", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УчитыватьНеАктивныеРаботы", СтрокаЗамены);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	
	Набор = РегистрыСведений.ПланированиеРесурсов.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Документ);
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Попытка
		Набор.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось обновить планирование документа.
			|Подробнее в журнале регистрации.'"));
		ЗаписьЖурналаРегистрации(
			"Обновление планирования",
			УровеньЖурналаРегистрации.Ошибка,
			,
			Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции // ОбновитьПланированиеРесурсовПоДокументу()

#Область ДлительныеОперации

// Обработчик фонового задания для формирования ТД планировщика
//
// Параметры:
//  Параметры - Структура - Параметры формирования ТД
//  Результат - Строка - Адрес во временном хранилище в которой необходимо поместить результат формирования.
//  Ошибки - Строка - Адрес во временном хранилище в который необходимо поместить ошибки выполнения.
//
Процедура ОбновитьДневнойКалендарьВФоне(Параметры, Результат, Ошибки) Экспорт
	
	ПоляОтвета = Новый Массив;
	ПоляОтвета.Добавить("ИнтервалыОтображения");
	ПоляОтвета.Добавить("Ресурсы");
	ПоляОтвета.Добавить("КэшЯчеекДокументов");
	
	ЕстьОшибки = Ложь;
	
	ПараметрыПланирования = ПолучитьПараметрыПланирования(Параметры);
	
	// отберем только работающие ресурсы
	Если Параметры.ОтображатьТолькоРаботающих Тогда
		
		Параметры.Вставить("Ресурсы", ПодготовитьРесурсыКВыводу(Параметры, ПараметрыПланирования));
		
	КонецЕсли;
	
	Если Параметры.Ресурсы.Количество() = 0 Тогда
		
		ЕстьОшибки = Истина;
		
		РезультатОшибки = Новый Структура;
		РезультатОшибки.Вставить("Текст", НСтр("ru = 'Нет доступных ресурсов для отображения...'"));
		
	Иначе
		
		// строим сетку планировщика
		КалендарьДневной = Новый ТабличныйДокумент;
		ВывестиСеткуПланировщика(КалендарьДневной, Параметры.Ресурсы,Параметры);
		ПокраситьОбластьПоГрафику(КалендарьДневной, Параметры, Параметры.Ресурсы, ПараметрыПланирования);
		ПокраситьОбластиПоПланированию(КалендарьДневной, Параметры, ПараметрыПланирования);
		ПокраситьОбластиПоУРВ(КалендарьДневной, Параметры, ПараметрыПланирования);
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда // Вернем ошибки
		
		ПоместитьВоВременноеХранилище(РезультатОшибки, Ошибки);
		Возврат;
		
	КонецЕсли;
	
	// вернем сформированный календарь
	РезультатДанные = Новый Структура(СтрСоединить(ПоляОтвета, ","));
	ЗаполнитьЗначенияСвойств(РезультатДанные, Параметры);
	РезультатДанные.Вставить("КалендарьДневной", КалендарьДневной);
	ПоместитьВоВременноеХранилище(РезультатДанные, Результат);
	
КонецПроцедуры

// Выполняет запуск фоновой операции по формированию табличного документа планировщика.
//
// Параметры:
//  Параметры - Структура - Параметры для формирования табличного документа.
//  ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы из которой запускается задание;
//  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор задания в системе;
//  КэшРезультата - Строка - Адрес во временном хранилище в который будет помещен табличный документ результат;
//  КэшОшибки - Строка - Адрес во временном хранилище в который будут помещены ошибки выполнения фонового задания.
//
// Возвращаемое значение:
//  Булево.
//  Истина, если задание завершило выполнение, иначе Ложь.
//
Функция НачатьОбновлениеДневногоКалендаря(
	Параметры,
	ИдентификаторФормы,
	ИдентификаторЗадания,
	КэшРезультата,
	КэшОшибки) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		
	КонецЕсли;

	СтартЗадания = ЗапуститьВыполнениеВФоне(
		ИдентификаторФормы,
		"ПланированиеРесурсов.ОбновитьДневнойКалендарьВФоне",
		Параметры,
		"ОбновлениеДневногоКалендаря",
		Истина);
	
	КэшРезультата        = СтартЗадания.АдресХранилища;
	КэшОшибки            = СтартЗадания.АдресХранилищаДополнительный;
	ИдентификаторЗадания = СтартЗадания.ИдентификаторЗадания;
	
	Возврат СтартЗадания.ЗаданиеВыполнено;  
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВремяБезДаты(Дата)
	
	Возврат Дата(1, 1, 1) + (Дата - НачалоДня(Дата));
	
КонецФункции

// Получение запланированных интервалов
//
// Параметры:
//  Начало              - Дата - Начало интервала
//  Конец               - Дата - Конец интервала
//  ИсключаемыйДокумент - ДокументСсылка.ЗаявкаНаРемонт, ДокументСсылка.ЗаказНаряд - Документ интервалы которого будут
//                                                                                   исключены из результата
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Интервалы планирования по периоду
//
Функция ПолучитьПланированиеДругихДокументов(Начало, Конец, ИсключаемыйДокумент) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотДокумент", ИсключаемыйДокумент);
	Запрос.УстановитьПараметр("Начало"      , Начало);
	Запрос.УстановитьПараметр("Конец"       , Конец);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланированиеРабот.Документ               КАК Документ,
	|	ПланированиеРабот.Идентификатор          КАК Идентификатор,
	|	ПланированиеРабот.ИдентификаторГруппы    КАК ИдентификаторГруппы,
	|	ПланированиеРабот.ВидОбъектаПланирования КАК ВидОбъектаПланирования,
	|	ПланированиеРабот.РабочееМесто           КАК РабочееМесто,
	|	ПланированиеРабот.Исполнитель            КАК Исполнитель,
	|	ПланированиеРабот.ПредставлениеОбъекта   КАК ПредставлениеОбъекта,
	|	ВЫБОР
	|		КОГДА ПланированиеРабот.Начало < &Начало
	|			ТОГДА &Начало
	|		ИНАЧЕ ПланированиеРабот.Начало
	|	КОНЕЦ КАК НачалоИнтервала,
	|	ВЫБОР
	|		КОГДА ПланированиеРабот.Конец > &Конец
	|			ТОГДА &Конец
	|		ИНАЧЕ ПланированиеРабот.Конец
	|	КОНЕЦ КАК КонецИнтервала,
	|	ПланированиеРабот.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ПланированиеРабот КАК ПланированиеРабот
	|ГДЕ
	|	ПланированиеРабот.Документ <> &ЭтотДокумент
	|	И НЕ ПланированиеРабот.Документ.ПометкаУдаления
	|	И (ПланированиеРабот.Начало МЕЖДУ &Начало И &Конец
	|			ИЛИ &Начало МЕЖДУ ПланированиеРабот.Начало И ПланированиеРабот.Конец
	|			ИЛИ &Конец МЕЖДУ ПланированиеРабот.Начало И ПланированиеРабот.Конец)
	|	И ПланированиеРабот.НеАктуален = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КвалификаторыДаты    = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	КвалификаторыВремени = Новый КвалификаторыДаты(ЧастиДаты.Время);
	
	Результат = Новый ТаблицаЗначений;
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		
		Результат.Колонки.Добавить(КолонкаРезультата.Имя, КолонкаРезультата.ТипЗначения);
		
	КонецЦикла;
	
	Результат.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("НачалоРабочегоВремени", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время));
	Результат.Колонки.Добавить("КонецРабочегоВремени" , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время));
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДеньНачало = НачалоДня(Выборка.НачалоИнтервала);
			ДеньКонец = НачалоДня(Выборка.КонецИнтервала);
			
			Если ДеньНачало = ДеньКонец Тогда
				
				Строка = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Выборка);
				Строка.Дата = НачалоДня(Выборка.НачалоИнтервала);
				Строка.НачалоРабочегоВремени = ВремяБезДаты(Выборка.НачалоИнтервала);
				Строка.КонецРабочегоВремени  = ВремяБезДаты(Выборка.КонецИнтервала);
				
			Иначе
				
				ДатаСч = ДеньНачало;
				
				Пока ДатаСч <= ДеньКонец Цикл
					
					Строка = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, Выборка);
					
					Если ДатаСч = ДеньНачало Тогда
						
						Строка.Дата = ДеньНачало;
						Строка.НачалоРабочегоВремени = ВремяБезДаты(Выборка.НачалоИнтервала);
						Строка.КонецРабочегоВремени  = Дата(1, 1, 1, 23, 59, 59);
						
					ИначеЕсли ДатаСч = ДеньКонец Тогда
						
						Строка.Дата = ДеньКонец;
						Строка.НачалоРабочегоВремени = Дата(1, 1, 1, 0, 0, 0);
						Строка.КонецРабочегоВремени  = ВремяБезДаты(Выборка.КонецИнтервала);
						
					Иначе
						
						Строка.Дата = ДатаСч;
						Строка.НачалоРабочегоВремени = Дата(1, 1, 1, 0, 0, 0);
						Строка.КонецРабочегоВремени  = Дата(1, 1, 1, 23, 59, 59);
						
					КонецЕсли;
					
					ДатаСч = КонецДня(ДатаСч) + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Разбор запроса к данным документа
//
// Параметры:
//  Данные - РезультатЗапроса - Результат запроса для разбора
//
// Возвращаемое значение:
//  Соответствие.
//  Соответствие ссылок на документы и из данных необходимых для составления представления
//
Функция РазобратьДанныеДокуменовДляПредставления(Знач Данные)
	Результат = Новый Соответствие;
	
	Если НЕ Данные.Пустой() Тогда
		Данные = Данные.Выбрать();
		
		Пока Данные.Следующий() Цикл
			Если Результат.Получить(Данные.Документ) = Неопределено Тогда
				ДанныеДокумента = Новый Соответствие;
			
				ДанныеДокумента.Вставить("Документ.Номер", Данные.Номер);
				ДанныеДокумента.Вставить("Документ.Тип", Данные.ТипДокумента);
				ДанныеДокумента.Вставить("Документ.Дата", Данные.Дата);
				ДанныеДокумента.Вставить("Начало", Данные.Начало);
				ДанныеДокумента.Вставить("Конец", Данные.Конец);
				ДанныеДокумента.Вставить("Документ.ВидРемонта", Данные.ВидРемонта);
				ДанныеДокумента.Вставить("Документ.Комментарий", Данные.Комментарий);
				ДанныеДокумента.Вставить("Автомобиль", Данные.Модель);
				ДанныеДокумента.Вставить("Автомобиль.ГосНомер", Данные.ГосНомер); 
				Если ЗначениеЗаполнено(Данные.Заказчик) Тогда 
					ДанныеДокумента.Вставить("Заказчик", Данные.Заказчик);
				ИначеЕсли ЗначениеЗаполнено(Данные.ОбращениеККлиенту) Тогда
					ДанныеДокумента.Вставить("Заказчик", Данные.ОбращениеККлиенту);
				Иначе
					ДанныеДокумента.Вставить("Заказчик", "--//--"); 
				КонецЕсли;
				ДанныеДокумента.Вставить("Заказчик.Телефон", Данные.Телефон);
				ДанныеДокумента.Вставить("Состояние", Данные.Состояние);				
				ДанныеДокумента.Вставить("Документ.ОписаниеПричиныОбращения",
						Данные.Документ.ОписаниеПричиныОбращения);
				ДанныеДокумента.Вставить("Документ.Диспетчер", Данные.Документ.Диспетчер);
						
				Результат.Вставить(Данные.Документ, ДанныеДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Структурирует данные о состоянии документа по пакету
//
Функция РазобратьДанныеПакетаПоДокументам(Знач Данные)
	
	Результат = Новый Соответствие;
	
	Если Данные.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ВыборкаДокументы = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		НеСтартовал = Истина;
		Закрыт = Истина;
		Выборка = ВыборкаДокументы.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Состояние <> Справочники.ВидыСостоянийПакетовРабот.НеСтартовал Тогда
				
				НеСтартовал = Ложь;
				
			КонецЕсли;
			
			Если Выборка.Состояние <> Справочники.ВидыСостоянийПакетовРабот.Закрыт Тогда
				
				Закрыт = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Вставить(ВыборкаДокументы.Документ, Новый Структура("НеСтартовал,Закрыт", НеСтартовал, Закрыт));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует строку на основании шаблона и данных
//
// Параметры:
//  Данные - Структура, Соответствие - Ключ - представления разметки шаблона
//                                     Значение - значение для заполнения
//  Шаблон - Строка - Текст представления с разметкой для вставляемых данных
//
// Возвращаемое значение:
//  Строка.
//  Заполненный значениями шаблон
//
Функция ЗаполнитьШаблон(Данные, Знач Шаблон)
	
	Если Данные.Получить("Документ.ОписаниеПричиныОбращения") = Данные.Получить("ОбъектПланирования") Тогда
		Данные.Вставить("Документ.ОписаниеПричиныОбращения","");
		Шаблон = СтрЗаменить(Шаблон, "Причина обращения: {{.Документ.ОписаниеПричиныОбращения}}", "");
	КонецЕсли;
	
	Для Каждого Поле Из Данные Цикл
		Маркер = стрШаблон("{{.%1}}", Поле.Ключ);
		
		Если стрНайти(Шаблон, Маркер) > 0 Тогда
			Шаблон = стрЗаменить(Шаблон, Маркер, Строка(Поле.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Шаблон;
	
КонецФункции

// Возвращает типы авторабот доступные на каждом из ресурсов
//
// Параметры:
//  Ресурсы - Массив - Ресурсы для которых получаются доступные типы авторабот.
//
// Возвращаемое значение:
//  Соответствие;
//  Ключ - Ресурс, Значение - Массив доступных типов.
//
Функция ТипыРаботРесурсов(Ресурсы)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ресурс,
	|	Сотрудники.ТипРесурса КАК ТипРесурса
	|ПОМЕСТИТЬ РесурсыСТипами
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Ресурсы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Цеха.Ссылка,
	|	Цеха.ТипРесурса
	|ИЗ
	|	Справочник.Цеха КАК Цеха
	|ГДЕ
	|	Цеха.Ссылка В(&Ресурсы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыРесурсовДоступныеТипыАвторабот.Ссылка КАК ТипРесурса,
	|	ТипыРесурсовДоступныеТипыАвторабот.ТипАвтоработы КАК ТипАвтоработы
	|ПОМЕСТИТЬ ТипыАвторабот
	|ИЗ
	|	Справочник.ТипыРесурсов.ДоступныеТипыАвторабот КАК ТипыРесурсовДоступныеТипыАвторабот
	|ГДЕ
	|	ТипыРесурсовДоступныеТипыАвторабот.Ссылка В
	|			(ВЫБРАТЬ
	|				РесурсыСТипами.ТипРесурса КАК ТипРесурса
	|			ИЗ
	|				РесурсыСТипами КАК РесурсыСТипами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РесурсыСТипами.Ресурс КАК Ресурс,
	|	ЕСТЬNULL(ТипыАвторабот.ТипАвтоработы, НЕОПРЕДЕЛЕНО) КАК ТипАвтоработы
	|ИЗ
	|	РесурсыСТипами КАК РесурсыСТипами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТипыАвторабот КАК ТипыАвторабот
	|		ПО РесурсыСТипами.ТипРесурса = ТипыАвторабот.ТипРесурса
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТипАвтоработы)
	|ПО
	|	Ресурс";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ресурсы", Ресурсы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Соответствие;
		
	КонецЕсли;
	
	Результат = Новый Соответствие;
	
	ВыборкаРесурсы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРесурсы.Следующий() Цикл
		
		ДоступныеТипы = Новый Массив;
		Выборка = ВыборкаРесурсы.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ТипАвтоработы) Тогда
				
				ДоступныеТипы.Добавить(Выборка.ТипАвтоработы);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДоступныеТипы.Количество() > 0 Тогда
			
			Результат.Вставить(ВыборкаРесурсы.Ресурс, ДоступныеТипы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Составляет итоговую таблицу ресурсов в зависимости от настроек режима отображения
// и добавляет колонку "Номер" для связи ресурса и строки в табличном документе.
//
// Параметры:
//  ПараметрыКалендаря - Структура - Описание параметров формирования календаря.
//
Процедура ПодготовитьТаблицуРесурсов(ПараметрыКалендаря)
	
	Если ПараметрыКалендаря.РежимОтображенияРесурсовНаГрафике = "РабочиеМеста" Тогда
		
		Ресурсы = ПараметрыКалендаря.РабочееМеста;
		
	ИначеЕсли ПараметрыКалендаря.РежимОтображенияРесурсовНаГрафике = "Исполнители" Тогда
		
		Ресурсы = ПараметрыКалендаря.Исполнители;
		
	ИначеЕсли ПараметрыКалендаря.РежимОтображенияРесурсовНаГрафике = "Общий" Тогда
		
		Ресурсы = ПараметрыКалендаря.РабочееМеста.СкопироватьКолонки("График,Псевдоним,РесурсПредставление");
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("СправочникСсылка.Цеха"));
		Типы.Добавить(Тип("СправочникСсылка.Сотрудники"));
		
		Ресурсы.Колонки.Добавить("Ресурс", Новый ОписаниеТипов(Типы));
		
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыКалендаря, "ПорядокРесурсовВОбщемРежиме", 0) = 0 Тогда
			
			порядокРесурсов = стрРазделить("ПустойЦех,Цеха,ПустойИсполнитель,Исполнители", ",");
			
		Иначе
			
			порядокРесурсов = стрРазделить("ПустойИсполнитель,Исполнители,ПустойЦех,Цеха", ",");
			
		КонецЕсли;
		
		Для Каждого элемент Из порядокРесурсов Цикл
			
			Если НРег(элемент) = "пустойцех" Тогда
				
				// добавим пустой цех
				ПустоеРабочееМесто = Ресурсы.Добавить();
				ПустоеРабочееМесто.Ресурс = Справочники.Цеха.ПустаяСсылка();
				ПустоеРабочееМесто.РесурсПредставление = "Цеха";
				ПустоеРабочееМесто.Псевдоним = "";
				ПустоеРабочееМесто.График = ПараметрыКалендаря.БазовыйГрафик;
				
			ИначеЕсли НРег(элемент) = "цеха" Тогда
				
				Для Каждого РабочееМесто Из ПараметрыКалендаря.РабочееМеста Цикл
					
					ЗаполнитьЗначенияСвойств(Ресурсы.Добавить(), РабочееМесто);
					
				КонецЦикла;
				
			ИначеЕсли НРег(элемент) = "пустойисполнитель" Тогда
				
				ПустойИсполнитель = Ресурсы.Добавить();
				ПустойИсполнитель.Ресурс = Справочники.Сотрудники.ПустаяСсылка();
				ПустойИсполнитель.РесурсПредставление = "Исполнители";
				ПустойИсполнитель.Псевдоним = "";
				ПустойИсполнитель.График = ПараметрыКалендаря.БазовыйГрафик;
				
			ИначеЕсли НРег(элемент) = "исполнители" Тогда
				
				Для Каждого Исполнитель Из ПараметрыКалендаря.Исполнители Цикл
					
					ЗаполнитьЗначенияСвойств(Ресурсы.Добавить(), Исполнитель);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Исключим ресурсы на которые планирование не доступно
	Если ПараметрыКалендаря.ОтображатьТолькоДоступныеДляПланированияРесурсы Тогда
		
		ТипыРаботДоступныеРесурсам = ТипыРаботРесурсов(Ресурсы.ВыгрузитьКолонку("Ресурс"));
		ДляУдаления = Новый Массив;
		
		Для Каждого Ресурс Из Ресурсы Цикл
			
			ТипыРаботРесурса = ТипыРаботДоступныеРесурсам.Получить(Ресурс.Ресурс);
			
			Если ЗначениеЗаполнено(Ресурс.Ресурс) И ЗначениеЗаполнено(ТипыРаботРесурса) Тогда
				
				ДоступенДляПланирования = Ложь;
				
				Для Каждого ТипРесурса Из ПараметрыКалендаря.ВидыАвторабот Цикл
					
					ДоступенДляПланирования = ДоступенДляПланирования ИЛИ (ТипыРаботРесурса.Найти(ТипРесурса) <> Неопределено);
					
				КонецЦикла;
				
				Если НЕ ДоступенДляПланирования Тогда
					
					ДляУдаления.Добавить(Ресурс);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Ресурс Из ДляУдаления Цикл
			
			Ресурсы.Удалить(Ресурс);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Ресурсы.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	
	ПараметрыКалендаря.Вставить("Ресурсы", Ресурсы);
	ПараметрыКалендаря.Вставить("ПланированиеИнтервалы", ПараметрыКалендаря.ПланированиеИнтервалы);
	
КонецПроцедуры

// Составляет массив интервалов которые необходимо отобразить на планировщике.
//
// Для составления интервалов используются границы начала и конца заданного интервала,
// границы рабочих интервалов для ресурсов, отображаемых на планировщике, по графикам рабочих мест
// или базовому графику и запланированные интервалы по документам попадающих в заданный интервал.
//
// Для начала выбирается минимальное значение в дне, для конца максимальное.
//
// Параметры:
//  ПараметрыКалендаря - Структура - С настройками планирования.
//  Начало - Дата - Начало отображаемого интервала.
//  Конец - Дата - Конец отображаемого интервала.
//  РабочиеИнтервалы - ТаблицаЗначений - Таблица интервалов ресурсов по графикам работ.
//  ЗапланированыПаралельно - ТаблицаЗначений - Таблица с запланированными интервалами документов.
//
// Возвращаемое значение:
// Массив структур формата Дата, Начало, Конец.
//
Функция ГраницыПериодаОтображения(ПараметрыКалендаря, Начало, Конец, Знач РабочиеИнтервалы, ЗапланированыПаралельно)
	
	ИнтервалыОтображения = Новый Массив;
	
	Если РабочиеИнтервалы.Количество() = 0 И ЗапланированыПаралельно.Количество() = 0 Тогда
		
		Возврат ИнтервалыПоНачалуИКонцу(Начало, Конец);
		
	КонецЕсли;
	
	// Составим список доступных ресурсов
	ДоступныеРесурсы = Новый Массив;
	Для Каждого Ресурс Из ПараметрыКалендаря.Ресурсы Цикл
		
		Если ЗначениеЗаполнено(Ресурс.Ресурс) Тогда
			
			ДоступныеРесурсы.Добавить(Ресурс.Ресурс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ ЗапланированыПаралельно Цикл
		
		Если ДоступныеРесурсы.Найти(Строка.РабочееМесто) = Неопределено
			И ДоступныеРесурсы.Найти(Строка.Исполнитель) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = РабочиеИнтервалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ЭтоРабочий = Истина;
		
	КонецЦикла;
	
	Если ПараметрыКалендаря.ПланированиеИнтервалы.Количество() > 0 Тогда
		
		Для Каждого Строка Из ПараметрыКалендаря.ПланированиеИнтервалы Цикл
			
			Если (Строка.Конец > Начало И Строка.Конец < Конец)
				ИЛИ (Строка.Начало < Конец И Строка.Начало > Начало)
				ИЛИ (Строка.Начало <= Начало И Строка.Конец >= Конец)Тогда
				
				ДеньНачало = НачалоДня(Строка.Начало);
				ДеньКонец = НачалоДня(Строка.Конец);
				
				Если ДеньНачало = ДеньКонец Тогда
					
					НоваяСтрока = РабочиеИнтервалы.Добавить();
					НоваяСтрока.Дата                  = ДеньНачало;
					НоваяСтрока.НачалоРабочегоВремени = ВремяБезДаты(Строка.Начало);
					НоваяСтрока.КонецРабочегоВремени  = ВремяБезДаты(Строка.Конец);
					
				Иначе
					// для интервалов разнесенных на несколько дней
					ДатаСч = ДеньНачало;
					
					Пока ДатаСч <= ДеньКонец Цикл
						
						Если ДатаСч >= НачалоДня(Начало) И ДатаСч <= КонецДня(Конец) Тогда
						
							НоваяСтрока = РабочиеИнтервалы.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
							
							Если ДатаСч = ДеньНачало Тогда
								
								НоваяСтрока.Дата = ДеньНачало;
								НоваяСтрока.НачалоРабочегоВремени = ВремяБезДаты(Строка.Начало);
								НоваяСтрока.КонецРабочегоВремени  = Дата(1, 1, 1, 23, 59, 59);
								
							ИначеЕсли ДатаСч = ДеньКонец Тогда
								
								НоваяСтрока.Дата = ДеньКонец;
								НоваяСтрока.НачалоРабочегоВремени = Дата(1, 1, 1, 0, 0, 0);
								НоваяСтрока.КонецРабочегоВремени  = ВремяБезДаты(Строка.Конец);
								
							Иначе
								
								НоваяСтрока.Дата = ДатаСч;
								НоваяСтрока.НачалоРабочегоВремени = Дата(1, 1, 1, 0, 0, 0);
								НоваяСтрока.КонецРабочегоВремени  = Дата(1, 1, 1, 23, 59, 59);
								
							КонецЕсли;
							
						КонецЕсли;
						
						ДатаСч = КонецДня(ДатаСч) + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИнтервалов", РабочиеИнтервалы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИнтервалов.Дата                  КАК Дата,
	|	ТаблицаИнтервалов.НачалоРабочегоВремени КАК Начало,
	|	ТаблицаИнтервалов.КонецРабочегоВремени  КАК Конец
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&ТаблицаИнтервалов КАК ТаблицаИнтервалов
	|ГДЕ
	|	ТаблицаИнтервалов.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидДня.Выходной)
	|	И ТаблицаИнтервалов.ЭтоРабочий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Дата КАК Дата,
	|	МИНИМУМ(Таблица.Начало) КАК Начало,
	|	МАКСИМУМ(Таблица.Конец) КАК Конец
	|ИЗ
	|	Таблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат ИнтервалыПоНачалуИКонцу(Начало, Конец);
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ПустаяДата = Дата(1,1,1);
	
	Пока Выборка.Следующий() Цикл
		
		Интервал = Новый Структура;
		Интервал.Вставить("Начало", Макс(Начало, (Выборка.Дата + (Выборка.Начало - ПустаяДата))));
		Интервал.Вставить("Конец", Мин(Конец, (Выборка.Дата + (Выборка.Конец - ПустаяДата))));
		Интервал.Вставить("Дата", Выборка.Дата);
		
		ИнтервалыОтображения.Добавить(Интервал);
		
	КонецЦикла;
	
	Возврат ИнтервалыОтображения;
	
КонецФункции

// Составляет соответствие временных интервалов ячейкам на планировщике
//
Функция СоответствиеВремениИЯчеек(ИнтервалыОтображения, РазмерИнтервала)
	
	Ячейки = Новый ТаблицаЗначений;
	Ячейки.Колонки.Добавить("Дата" , Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Ячейки.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	
	ТекущаяЯчейка = 0;
	СмещениеЯчеек = 1;
	
	Для Каждого Интервал Из ИнтервалыОтображения Цикл
		
		Если ИнтервалыОтображения.Количество() > 1 Тогда
			
			ТекущаяЯчейка = ТекущаяЯчейка + 1;
			
		КонецЕсли;
		
		ТекущиеИнтервал = Интервал.Начало;
		
		Пока ТекущиеИнтервал < Интервал.Конец Цикл
			
			ТекущаяЯчейка = ТекущаяЯчейка + 1;
		
			НоваяСтрока = Ячейки.Добавить();
			НоваяСтрока.Дата  = ТекущиеИнтервал;
			НоваяСтрока.Номер = ТекущаяЯчейка + СмещениеЯчеек;
		
			ТекущиеИнтервал = ТекущиеИнтервал + РазмерИнтервала;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ячейки;
	
КонецФункции

// Формирование параметров заполнения на основе настроек пользователя
//
Функция ПолучитьПараметрыПланирования(ПараметрыКалендаря) Экспорт
	
	// сформируем таблицу ресурсов
	ПодготовитьТаблицуРесурсов(ПараметрыКалендаря);
	
	// получим данные графиков работ
	РабочиеИнтервалы = ПланированиеРесурсов.ПолучитьГрафикиРабот(
		ПараметрыКалендаря.Начало,
		ПараметрыКалендаря.Конец,
		ПараметрыКалендаря.Ресурсы,
		ПараметрыКалендаря.РежимИспользованияГрафиков,
		ПараметрыКалендаря.БазовыйГрафик,
		ПараметрыКалендаря.УчитыватьДанныеТабеля);
	
	// получим парамелено запланированные документы
	ЗапланированыПаралельно = ПолучитьПланированиеДругихДокументов(
		ПараметрыКалендаря.Начало,
		ПараметрыКалендаря.Конец,
		ПараметрыКалендаря.Документ);
	
	// Определим период отображения
	ИнтервалыОтображения = ГраницыПериодаОтображения(
		ПараметрыКалендаря,
		ПараметрыКалендаря.Начало,
		ПараметрыКалендаря.Конец,
		РабочиеИнтервалы,
		ЗапланированыПаралельно);
	
	ПараметрыКалендаря.Вставить("ИнтервалыОтображения", ИнтервалыОтображения);
	
	// Получим размер одного интервала
	Если ПараметрыКалендаря.РазмерСеткиРедактированияПланировщика
		= Перечисления.РазмерСеткиРедактированияПланировщика.ПятьМинут Тогда
		
		ПараметрыКалендаря.Вставить("СекундВОдномИнтервале", 300);
		
	Иначе
		
		ПараметрыКалендаря.Вставить("СекундВОдномИнтервале", 300 * ПараметрыКалендаря.РежимШкалыМинут);
		
	КонецЕсли;
	
	// Составим список ячеек для вывода
	Ячейки = СоответствиеВремениИЯчеек(ИнтервалыОтображения, ПараметрыКалендаря.СекундВОдномИнтервале);
	
	ПараметрыПланирования = Новый Структура;
	ПараметрыПланирования.Вставить("РабочиеИнтервалы"       , РабочиеИнтервалы);
	ПараметрыПланирования.Вставить("ЗапланированыПаралельно", ЗапланированыПаралельно);
	ПараметрыПланирования.Вставить("Ячейки"                 , Ячейки);
	
	Возврат ПараметрыПланирования;
	
КонецФункции

// Настройка доступных для вывода ресурсов для вывода на планировщик
//
Функция ПодготовитьРесурсыКВыводу(ПараметрыКалендаря, ПараметрыПланирования)
	
	Ресурсы = ПараметрыКалендаря.Ресурсы;
	
	Условие = Новый Структура("Ресурс,ЭтоРабочий",, Истина);
	ДляУдаления = Новый Массив;
	Для Каждого Ресурс Из Ресурсы Цикл
		Условие.Ресурс = Ресурс.Ресурс;
		
		Если ПараметрыПланирования.РабочиеИнтервалы.НайтиСтроки(Условие).Количество() = 0 Тогда
			ДляУдаления.Добавить(Ресурс);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Удаляемый Из ДляУдаления Цикл
		Ресурсы.Удалить(Удаляемый);
	КонецЦикла;
	
	Возврат Ресурсы;
	
КонецФункции

// Разбивает интервал на группу в зависимости от отображаемых временных рамок
//
Функция ИнтервалыПоНачалуИКонцу(Начало, Конец)
	
	Интервалы = Новый Массив;
	
	ТекущийДень = НачалоДня(Начало);
	
	Пока ТекущийДень < Конец Цикл
		
		День = Новый Структура("Дата", ТекущийДень);
		
		Если ТекущийДень = НачалоДня(Начало) Тогда
			
			День.Вставить("Начало", Начало);
			
		Иначе
			
			День.Вставить("Начало", ТекущийДень);
			
		КонецЕсли;
		
		Если ТекущийДень = НачалоДня(Конец) Тогда
			
			День.Вставить("Конец", Конец);
			
		Иначе
			
			День.Вставить("Конец", КонецДня(ТекущийДень));
			
		КонецЕсли;
		
		ТекущийДень = КонецДня(ТекущийДень) + 1;
		Интервалы.Добавить(День);
		
	КонецЦикла;
	
	Возврат Интервалы;
	
КонецФункции

// Предопределенное значение ключа настроек пользователя в хранилище.
//
// Возвращаемое значение:
//   Строка - Ключ настроек пользователя в хранилище настроек.
//
Функция КлючНастроекПользователя()
	
	Возврат "Обработка.ЗаписьНаРемонт.Форма.НастройкиДневногоКалендаря/ТекущиеДанные";
	
КонецФункции // КлючНастроекПользователя()

// Предопределенные настройки пользователя для записи на ремонт.
//
// Возвращаемое значение:
//   Стрктура - "Ключ" наименование настройки, "Значение" значение настройки.
//
Функция НастройкиПользователяПоУмолчанию()
	
	Настройки = Новый Структура;
	Настройки.Вставить("РежимИспользованияГрафиков", 1);
	Настройки.Вставить("РежимШкалыМинут", 2);
	Настройки.Вставить("МасштабЯчейки", 20);
	Настройки.Вставить("ШиринаКолонкиРесурсов", 5);
	Настройки.Вставить("НеОбновлятьМасштабЯчейки", Истина);
	Настройки.Вставить("ПорядокРесурсовВОбщемРежиме", 0);
	Настройки.Вставить("РежимОтображенияРесурсовНаГрафике", "Общий");;
	Настройки.Вставить("РасположениеРесурсов", "ЛЕВО");;
	Настройки.Вставить(
		"ШаблонПредставленияИнтервалаОбъекта",
		" {{.Документ.Тип}} {{.Документ.Номер}} от {{.Документ.Дата}}
		|Контрагент: {{.Заказчик}} {{.Заказчик.Телефон}} 
		|Вид ремонта: {{.Документ.ВидРемонта}}
		|Автомобиль: {{.Автомобиль}} {{.Автомобиль.ГосНомер}}
		|Объект планирования: {{.ОбъектПланирования}}
		|Причина обращения: {{.Документ.ОписаниеПричиныОбращения}}
		|Диспетчер: {{.Документ.Диспетчер}}");
	
	Возврат Настройки;
	
КонецФункции // НастройкиПользователяПоУмолчанию()

Функция ЭтоИсполнительПриемкиВыдачи(Исполнитель)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка КАК Ссылка,
	|	ТипыРесурсовДоступныеТипыАвторабот.ТипАвтоработы КАК ТипАвтоработы
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыРесурсов.ДоступныеТипыАвторабот КАК ТипыРесурсовДоступныеТипыАвторабот
	|		ПО Сотрудники.ТипРесурса = ТипыРесурсовДоступныеТипыАвторабот.Ссылка
	|ГДЕ
	|	Сотрудники.Ссылка = &Исполнитель
	|	И НЕ ТипыРесурсовДоступныеТипыАвторабот.ТипАвтоработы В (ЗНАЧЕНИЕ(Справочник.ТипыАвторабот.Приемка), ЗНАЧЕНИЕ(Справочник.ТипыАвторабот.Выдача))");
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЭтоРабочееМестоПриемкиВыдачи(РабочееМесто)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочееМесто, "ВидИспользованияРабочегоМеста")
		= Перечисления.ВидыИспользованияРабочихМест.ПланированиеПриемкиВыдачи;
	
КонецФункции

// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(
	Знач ИдентификаторФормы,
	Знач ИмяЭкспортнойПроцедуры,
	Знач Параметры,
	Знач НаименованиеЗадания = "",
	ИспользоватьДополнительноеВременноеХранилище = Ложь)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Задание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежимеАльфа.ВыполнитьМетодКонфигурации", ПараметрыЗадания,, НаименованиеЗадания);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПроцедурыИФункцииДляФормированияПланировщика

Процедура ВывестиСеткуПланировщика(КалендарьДневной, Ресурсы, ПараметрыКалендаря)
	
	Если ПараметрыКалендаря.РасположениеРесурсов = "ЛЕВО" Тогда
		
		ВывестиГоризонтальнуюСеткуПланировщика(КалендарьДневной, Ресурсы, ПараметрыКалендаря);
		
	Иначе
		
		ВывестиВертикальнуюСеткуПланировщика(КалендарьДневной, Ресурсы, ПараметрыКалендаря);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиГоризонтальнуюСеткуПланировщика(КалендарьДневной, Ресурсы, ПараметрыКалендаря)
	
	Макет = Обработки.ЗаписьНаРемонт.ПолучитьМакет("ШаблонОформленияДневногоКалендаря");
	ЦветаРаскраски = ПланированиеРесурсовПовтИсп.ОформлениеГрафиков();
	
	// заполним шапку графика
	ОбластьРесурс      = Макет.ПолучитьОбласть("Шапка|Ресурс");
	ОбластьДеньРесурса = Макет.ПолучитьОбласть("День|Ресурс");

	// Определим заголовок ресурса
	Если ПараметрыКалендаря.РежимОтображенияРесурсовНаГрафике = "РабочиеМеста" Тогда
		
		ОбластьРесурс.Параметры.Ресурс = НСтр("ru = 'Рабочее место'");
		
	ИначеЕсли ПараметрыКалендаря.РежимОтображенияРесурсовНаГрафике = "Исполнители" Тогда
		
		ОбластьРесурс.Параметры.Ресурс =  "Исполнитель";
		
	Иначе
		
		ОбластьРесурс.Параметры.Ресурс =  "Ресурс";
		
	КонецЕсли;
	
	// Если отображаем более 1 дня выведем заголовок с днем
	ТребуетсяВыводитьРазделителиДней = (ПараметрыКалендаря.ИнтервалыОтображения.Количество() > 1);
	
	// настроим области для вывода
	ВремяЧасы       = Макет.ПолучитьОбласть("ШапкаДаты|ВремяЧасы");
	ВремяМинуты     = Макет.ПолучитьОбласть("ШапкаДаты|ВремяМинуты");
	Интервал5Минут  = Макет.ПолучитьОбласть("ШапкаДаты|Время5Минут");
	РесурсВСтроке   = Макет.ПолучитьОбласть("Строка|Ресурс");
	ИнтервалВСтроке = Макет.ПолучитьОбласть("Строка|Время5Минут");
	ВремяДень       = Макет.ПолучитьОбласть("День|ВремяЧасы");
	РазделительОдиночный = Макет.ПолучитьОбласть("День|Дата");
	РазделительДвойной = Макет.ПолучитьОбласть("Шапка|Дата");
	ОбластьИнтерваловТекущегоДокумента = Макет.ПолучитьОбласть("СтрокаПлан|Ресурс");
	ИнтервалВСтрокеТекущегоДокумента = Макет.ПолучитьОбласть("СтрокаПлан|Время5Минут");
	РазделительРесурс = Макет.ПолучитьОбласть("ГоризонтальныйРазделитель|Ресурс");
	РазделительДень = Макет.ПолучитьОбласть("ГоризонтальныйРазделитель|Дата");
	РазделительВремя = Макет.ПолучитьОбласть("ГоризонтальныйРазделитель|Время5Минут");
	РазделительСтроки = Макет.ПолучитьОбласть("Строка|Дата");
	РазделительУРВ = Макет.ПолучитьОбласть("СтрокаУРВ|Дата");
	
	Если ПараметрыКалендаря.ОтображатьДанныеУчетаРабочегоВремени Тогда
		
		РесурсВСтрокеУРВ = Макет.ПолучитьОбласть("СтрокаУРВ|Ресурс");
		ИнтервалВСтрокеУРВ = Макет.ПолучитьОбласть("СтрокаУРВ|Время5Минут");
		
		РесурсВСтроке.ТекущаяОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		
	КонецЕсли;
	
	КоэффициентШкалы = 20;
	Интервал5Минут.ТекущаяОбласть.ШиринаКолонки =
		Интервал5Минут.ТекущаяОбласть.ШиринаКолонки / КоэффициентШкалы * ПараметрыКалендаря.МасштабЯчейки;
	ОбластьИнтерваловТекущегоДокумента.ТекущаяОбласть.ШиринаКолонки = Интервал5Минут.ТекущаяОбласть.ШиринаКолонки;
	ИнтервалВСтрокеТекущегоДокумента.ТекущаяОбласть.ШиринаКолонки = Интервал5Минут.ТекущаяОбласть.ШиринаКолонки;
	ВремяДень.ТекущаяОбласть.ШиринаКолонки = Интервал5Минут.ТекущаяОбласть.ШиринаКолонки;
	ВремяЧасы.ТекущаяОбласть.ШиринаКолонки = Интервал5Минут.ТекущаяОбласть.ШиринаКолонки;
	ВремяМинуты.ТекущаяОбласть.ШиринаКолонки = Интервал5Минут.ТекущаяОбласть.ШиринаКолонки;
	РазделительСтроки.ТекущаяОбласть.ШиринаКолонки = Интервал5Минут.ТекущаяОбласть.ШиринаКолонки;
	РазделительУРВ.ТекущаяОбласть.ШиринаКолонки = Интервал5Минут.ТекущаяОбласть.ШиринаКолонки;
	ИнтервалВСтроке.ТекущаяОбласть.ШиринаКолонки = Интервал5Минут.ТекущаяОбласть.ШиринаКолонки;
	
	Если ПараметрыКалендаря.ОтображатьДанныеУчетаРабочегоВремени Тогда
		
		ИнтервалВСтрокеУРВ.ТекущаяОбласть.ШиринаКолонки = Интервал5Минут.ТекущаяОбласть.ШиринаКолонки;
		
	КонецЕсли;
	
	ЭлементыШапки = Новый Массив;
	
	Для Каждого Интервал Из ПараметрыКалендаря.ИнтервалыОтображения Цикл
		
		ШапкаДень   = Новый ТабличныйДокумент;
		ШапкаЧасы   = Новый ТабличныйДокумент;
		ШапкаМинуты = Новый ТабличныйДокумент;
		
		ТекущийЧас = Интервал.Начало; ВсегоИнтервалов = 0;
		
		Пока ТекущийЧас < Интервал.Конец Цикл
			
			// формируем шапку дня
			Если ТребуетсяВыводитьРазделителиДней Тогда
				
				ВремяДень.Параметры.Дата = Формат(ТекущийЧас + ПараметрыКалендаря.СмещениеЧасовогоПояса, "ДЛФ=DD");
				ШапкаДень.Присоединить(ВремяДень);
				
			КонецЕсли;
			
			ВремяЧасы.Параметры.Время = Формат(ТекущийЧас + ПараметрыКалендаря.СмещениеЧасовогоПояса, "ДФ=ЧЧ");
			ШапкаЧасы.Присоединить(ВремяЧасы);
			
			ВремяМинуты.Параметры.Время = Формат(ТекущийЧас + ПараметрыКалендаря.СмещениеЧасовогоПояса, "ДФ=мм");
			ШапкаМинуты.Присоединить(ВремяМинуты);
			
			ВсегоИнтервалов = ВсегоИнтервалов + 1;
			ТекущийЧас      = ТекущийЧас + ПараметрыКалендаря.СекундВОдномИнтервале;
			
		КонецЦикла;
		
		// соберем области вместе
		ШапкаДень.Область(1, 1, 1, ВсегоИнтервалов).Объединить();
		
		КоличествоИнтерваловДляОбъединения = ПараметрыКалендаря.РежимШкалыМинут;
		
		Если КоличествоИнтерваловДляОбъединения = 0 Тогда
			
			КоличествоИнтерваловДляОбъединения = 2;
			ПараметрыКалендаря.РежимШкалыМинут = 2;
			
		КонецЕсли;
		
		// Объединим интервалы шапки
		НачалоОбластиОбъединения = 1;
		ЗначениеОбластиОбъединения = Неопределено;
		
		Для Сч = 1 По ВсегоИнтервалов Цикл
			
			ТекущаяОбласть = ШапкаЧасы.Область(1, Сч, 1, Сч);
			Если ЗначениеОбластиОбъединения = Неопределено Тогда
				ЗначениеОбластиОбъединения = ТекущаяОбласть.Текст;
			ИначеЕсли ТекущаяОбласть.Текст <> ЗначениеОбластиОбъединения Тогда
				ШапкаЧасы.Область(1, НачалоОбластиОбъединения, 1, Сч - 1).Объединить();
				НачалоОбластиОбъединения = Сч;
				ЗначениеОбластиОбъединения = ТекущаяОбласть.Текст;
			КонецЕсли;
			
		КонецЦикла;
		
		// Объекдиним последний интервал
		ШапкаЧасы.Область(1, НачалоОбластиОбъединения, 1, ВсегоИнтервалов).Объединить();
		
		Если ПараметрыКалендаря.РазмерСеткиРедактированияПланировщика = Перечисления.РазмерСеткиРедактированияПланировщика.ПятьМинут Тогда
			Сч = 1;
			Пока Сч < ВсегоИнтервалов Цикл
				
				// объединим минутные интервалы
				ШапкаМинуты.Область(1, Сч, 1, Сч + КоличествоИнтерваловДляОбъединения - 1).Объединить();
				Сч = Сч + КоличествоИнтерваловДляОбъединения;
				
			КонецЦикла;
		КонецЕсли;
		
		ШапкаЧасы.Вывести(ШапкаМинуты);
		
		ЭлементыШапки.Добавить(Новый Структура("ШапкаДень,ШапкаВремя,ВсегоИнтервалов", ШапкаДень, ШапкаЧасы, ВсегоИнтервалов));
		
		Интервал.Вставить("ВсегоИнтервалов", ВсегоИнтервалов);
		
	КонецЦикла;
	
	// Если отображаем более 1 дня выведем заголовок с днем
	Если ТребуетсяВыводитьРазделителиДней Тогда
		
		НачалоПериода = ПараметрыКалендаря.ИнтервалыОтображения[0].Дата;
		КонецПериода = ПараметрыКалендаря.ИнтервалыОтображения[ПараметрыКалендаря.ИнтервалыОтображения.Вграница()].Дата;
		ОбластьДеньРесурса.Параметры.Период = СтрШаблон(
			НСтр("ru = '%1 - %2'"),
			Формат(НачалоПериода, "ДФ=dd.MM"),
			Формат(КонецПериода, "ДФ=dd.MM"));
		
		КалендарьДневной.Вывести(ОбластьДеньРесурса);
		
		Для Каждого День Из ЭлементыШапки Цикл
			
			КалендарьДневной.Присоединить(РазделительОдиночный);
			КалендарьДневной.Присоединить(День.ШапкаДень);
			
		КонецЦикла;
		
	КонецЕсли;
	
	КалендарьДневной.Вывести(ОбластьРесурс);
	
	Для Каждого День Из ЭлементыШапки Цикл
		
		Если ТребуетсяВыводитьРазделителиДней Тогда
			
			КалендарьДневной.Присоединить(РазделительДвойной);
			
		КонецЕсли;
		
		КалендарьДневной.Присоединить(День.ШапкаВремя);
		
	КонецЦикла;
	
	// Выведем область текущего планирования
	Если ПараметрыКалендаря.РазмерСеткиРедактированияПланировщика = Перечисления.РазмерСеткиРедактированияПланировщика.РавенИнтервалуШкалыМинут Тогда
		ИнтервалВСтрокеТекущегоДокумента.ТекущаяОбласть.ШиринаКолонки =
			Интервал5Минут.ТекущаяОбласть.ШиринаКолонки * ПараметрыКалендаря.РежимШкалыМинут;
	КонецЕсли;
	
	КалендарьДневной.Вывести(ОбластьИнтерваловТекущегоДокумента);
	
	Для Каждого День Из ЭлементыШапки Цикл
		
		Если ТребуетсяВыводитьРазделителиДней Тогда
			
			КалендарьДневной.Присоединить(РазделительОдиночный);
			
		КонецЕсли;
		
		Для Сч = 1 По День.ВсегоИнтервалов Цикл
			
			КалендарьДневной.Присоединить(ИнтервалВСтрокеТекущегоДокумента);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Выведем разделитель между шапкой и остальным контекстом
	КалендарьДневной.Вывести(РазделительРесурс);
	
	Для Каждого День Из ЭлементыШапки Цикл
		
		Если ТребуетсяВыводитьРазделителиДней Тогда
			
			КалендарьДневной.Присоединить(РазделительДень);
			
		КонецЕсли;
		
		Для Сч = 1 По День.ВсегоИнтервалов Цикл
			
			КалендарьДневной.Присоединить(РазделительВремя);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекущийНомер = ?(ТребуетсяВыводитьРазделителиДней, 6, 5);
	
	// выводим ресурсы планирования
	Если ПараметрыКалендаря.РазмерСеткиРедактированияПланировщика = Перечисления.РазмерСеткиРедактированияПланировщика.РавенИнтервалуШкалыМинут Тогда
		ИнтервалВСтроке.ТекущаяОбласть.ШиринаКолонки =
			Интервал5Минут.ТекущаяОбласть.ШиринаКолонки * ПараметрыКалендаря.РежимШкалыМинут;
	
		Если ИнтервалВСтрокеУРВ <> Неопределено Тогда
			ИнтервалВСтрокеУРВ.ТекущаяОбласть.ШиринаКолонки =
				Интервал5Минут.ТекущаяОбласть.ШиринаКолонки * ПараметрыКалендаря.РежимШкалыМинут;
		КонецЕсли;
	КонецЕсли;

	РесурсДлинна = 0;
	
	Для Каждого Ресурс Из Ресурсы Цикл
		
		РесурсВСтроке.Параметры.Псевдоним =
			?(НЕ (ПустаяСтрока(Ресурс.Псевдоним)), Ресурс.Псевдоним, Ресурс.РесурсПредставление);
		РесурсСтрДлина = СтрДлина(РесурсВСтроке.Параметры.Псевдоним);
		Если РесурсСтрДлина > РесурсДлинна Тогда 
			РесурсДлинна = РесурсСтрДлина;
		КонецЕсли;
		
		Если НЕ Ресурс.Ресурс.Пустая() Тогда
			
			// Попробуем взять раскраску из элемента справочника
			ТекущийЦвет = Ресурс.Ресурс.Цвет.Получить();
			Если ТекущийЦвет <> Неопределено Тогда
				
				// Приводим цвет стиля к простому RGB
				Если ТекущийЦвет.Вид = ВидЦвета.ЭлементСтиля Тогда 
					ОбъектМетаданныхСтиля = Метаданные.ЭлементыСтиля.Найти(Сред(Строка(ТекущийЦвет), 8));
					Если ОбъектМетаданныхСтиля <> Неопределено Тогда 
						ТекущийЦвет = ОбъектМетаданныхСтиля.Значение;
					КонецЕсли;
				КонецЕсли;
				
				РесурсВСтроке.ТекущаяОбласть.ЦветФона = ТекущийЦвет;
				
				Если ТекущийЦвет.Вид = ВидЦвета.Абсолютный Тогда
					ЦветRGB = СтрРазделить(ТекущийЦвет, ",", Истина);
					// Для удобства сделаем шрифт белым
					Если (Число(ЦветRGB[0]) + Число(ЦветRGB[1]) + Число(ЦветRGB[2])) < 450 Тогда
						РесурсВСтроке.ТекущаяОбласть.ЦветТекста = Новый Цвет(255,255,255);
					Иначе
						РесурсВСтроке.ТекущаяОбласть.ЦветТекста = Новый Цвет(0,0,0);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				РесурсВСтроке.ТекущаяОбласть.ЦветФона   = ЦветаРаскраски["ЦветСвободно"];
				РесурсВСтроке.ТекущаяОбласть.ЦветТекста = Новый Цвет(0,0,0);
			КонецЕсли;
			
		Иначе
			
			РесурсВСтроке.ТекущаяОбласть.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
			
		КонецЕсли;
		
		КалендарьДневной.Вывести(РесурсВСтроке);
		Ресурс.Номер = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
		
		Для Каждого День Из ЭлементыШапки Цикл
			
			Если ТребуетсяВыводитьРазделителиДней Тогда
				
				КалендарьДневной.Присоединить(РазделительСтроки);
				
			КонецЕсли;
			
			Для Сч = 1 По День.ВсегоИнтервалов Цикл
				
				Если Сч%2 = 0 Тогда
					
					ИнтервалВСтроке.ТекущаяОбласть.ЦветФона = ЦветаРаскраски["ЦветСвободно2"];
					
				Иначе
					
					ИнтервалВСтроке.ТекущаяОбласть.ЦветФона = ЦветаРаскраски["ЦветСвободно"];
					
				КонецЕсли;
				
				КалендарьДневной.Присоединить(ИнтервалВСтроке);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ПараметрыКалендаря.ОтображатьДанныеУчетаРабочегоВремени Тогда
			
			ТекущийНомер = ТекущийНомер + 1;
			РесурсВСтрокеУРВ.ТекущаяОбласть.ЦветФона = РесурсВСтроке.ТекущаяОбласть.ЦветФона;
			
			КалендарьДневной.Вывести(РесурсВСтрокеУРВ);
			
			Для Каждого День Из ЭлементыШапки Цикл
				
				Если ТребуетсяВыводитьРазделителиДней Тогда
					
					КалендарьДневной.Присоединить(РазделительУРВ);
					
				КонецЕсли;
				
				Для Сч = 1 По День.ВсегоИнтервалов Цикл
					
					ИнтервалВСтрокеУРВ.ТекущаяОбласть.ЦветФона = ЦветаРаскраски["ЦветСвободно"];
					КалендарьДневной.Присоединить(ИнтервалВСтрокеУРВ);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	Если РесурсДлинна > 0 Тогда 
		ОбластьРесурсов = КалендарьДневной.Область(1, 1);
		Если ПараметрыКалендаря.ШиринаКолонкиРесурсов > 5 Тогда
			Если РесурсДлинна > ПараметрыКалендаря.ШиринаКолонкиРесурсов Тогда 
				РесурсДлинна = ПараметрыКалендаря.ШиринаКолонкиРесурсов;
			КонецЕсли;
		КонецЕсли;
		ОбластьРесурсов.ШиринаКолонки = РесурсДлинна + 5; // Коэффициент +Х выведен экспериментально. Возможно стоит вынести в настройки.
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВертикальнуюСеткуПланировщика(КалендарьДневной, Ресурсы, ПараметрыКалендаря)
	
	Макет = Обработки.ЗаписьНаРемонт.ПолучитьМакет("ШаблонОформленияДневногоКалендаряВертикальный");
	ЦветаРаскраски = ПланированиеРесурсовПовтИсп.ОформлениеГрафиков();
	
	ОбластьРесурс    = Макет.ПолучитьОбласть("Шапка|Ресурс");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка|Даты");
	ОбластьТекущееПланирование = Макет.ПолучитьОбласть("Шапка|ТекущееПланирование");
	ОбластьРазделительДень = Макет.ПолучитьОбласть("РазделительДня|Даты");
	ОбластьРазделительРесурс = Макет.ПолучитьОбласть("РазделительДня|Ресурс");
	ОбластьРазделительГраница = Макет.ПолучитьОбласть("РазделительДня|ПраваяГраница");
	ОбластьРазделительШапкаГраница = Макет.ПолучитьОбласть("Шапка|ПраваяГраница");
	ОбластьДатыДень = Макет.ПолучитьОбласть("Строка|Даты");
	ОбластьДатыРесурс = Макет.ПолучитьОбласть("Строка|Ресурс");
	ОбластьСтрокаРазделитель = Макет.ПолучитьОбласть("Строка|ПраваяГраница");
	ОбластьСтрокаТекущееПланирование = Макет.ПолучитьОбласть("Строка|ТекущееПланирование");
	ОбластьРазделительТекущееПланирование = Макет.ПолучитьОбласть("РазделительДня|ТекущееПланирование");
	
	Если ПараметрыКалендаря.ОтображатьДанныеУчетаРабочегоВремени Тогда
		
		ОбластьЗаголовокУРВ = Макет.ПолучитьОбласть("Шапка|УРВ");
		ОбластьРазделительУРВ = Макет.ПолучитьОбласть("РазделительДня|УРВ");
		ОбластьУРВ = Макет.ПолучитьОбласть("Строка|УРВ");
		
	КонецЕсли;
	
	Если ПараметрыКалендаря.РежимОтображенияРесурсовНаГрафике = "РабочиеМеста" Тогда
		
		ОбластьЗаголовок.Параметры.Ресурс = НСтр("ru = 'Рабочее место'");
		
	ИначеЕсли ПараметрыКалендаря.РежимОтображенияРесурсовНаГрафике = "Исполнители" Тогда
		
		ОбластьЗаголовок.Параметры.Ресурс =  "Исполнитель";
		
	Иначе
		
		ОбластьЗаголовок.Параметры.Ресурс =  "Ресурс";
		
	КонецЕсли;
	
	КалендарьДневной.Вывести(ОбластьЗаголовок);
	КалендарьДневной.Присоединить(ОбластьТекущееПланирование);
	
	ТекущийНомер = 4;
	Для Каждого Ресурс Из Ресурсы Цикл
		
		ОбластьРесурс.Параметры.Ресурс =
			?(НЕ (ПустаяСтрока(Ресурс.Псевдоним)), Ресурс.Псевдоним, Ресурс.РесурсПредставление);
		
		Если НЕ Ресурс.Ресурс.Пустая() Тогда
			
			// Попробуем взять раскраску из элемента справочника
			ТекущийЦвет = Ресурс.Ресурс.Цвет.Получить();
			Если ТекущийЦвет <> Неопределено Тогда
				
				// Приводим цвет стиля к простому RGB
				Если ТекущийЦвет.Вид = ВидЦвета.ЭлементСтиля Тогда 
					ОбъектМетаданныхСтиля = Метаданные.ЭлементыСтиля.Найти(Сред(Строка(ТекущийЦвет), 8));
					Если ОбъектМетаданныхСтиля <> Неопределено Тогда 
						ТекущийЦвет = ОбъектМетаданныхСтиля.Значение;
					КонецЕсли;
				КонецЕсли;  
				
				ОбластьРесурс.ТекущаяОбласть.ЦветФона = ТекущийЦвет;
				
				Если ТекущийЦвет.Вид = ВидЦвета.Абсолютный Тогда
					ЦветRGB = СтрРазделить(ТекущийЦвет, ",", Истина);
					// Для удобства сделаем шрифт белым
					Если (Число(ЦветRGB[0]) + Число(ЦветRGB[1]) + Число(ЦветRGB[2])) < 450 Тогда
						ОбластьРесурс.ТекущаяОбласть.ЦветТекста = Новый Цвет(255,255,255);
					Иначе
						ОбластьРесурс.ТекущаяОбласть.ЦветТекста = Новый Цвет(0,0,0);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ОбластьРесурс.ТекущаяОбласть.ЦветФона   = ЦветаРаскраски["ЦветСвободно"];
				ОбластьРесурс.ТекущаяОбласть.ЦветТекста = Новый Цвет(0,0,0);
			КонецЕсли;
			
		Иначе
			
			ОбластьРесурс.ТекущаяОбласть.ЦветФона = ЦветаСтиля.ЦветОсновнойПанелиФормы;
			
		КонецЕсли;
		
		КалендарьДневной.Присоединить(ОбластьРесурс);

		Ресурс.Номер = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
		
		Если ПараметрыКалендаря.ОтображатьДанныеУчетаРабочегоВремени Тогда
			
			КалендарьДневной.Присоединить(ОбластьЗаголовокУРВ);
			ТекущийНомер = ТекущийНомер + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоКолонок = Ресурсы.Количество();
	ТребуетсяВыводитьРазделителиДней = (ПараметрыКалендаря.ИнтервалыОтображения.Количество() > 1);
	
	Если ТребуетсяВыводитьРазделителиДней Тогда
		
		КалендарьДневной.Присоединить(ОбластьРазделительШапкаГраница);
		
	КонецЕсли;
	
	КоэффициентШкалы = 20;
	ОбластьДатыДень.ТекущаяОбласть.ВысотаСтроки =
		ОбластьДатыДень.ТекущаяОбласть.ВысотаСтроки / КоэффициентШкалы * ПараметрыКалендаря.МасштабЯчейки;
	ОбластьТекущееПланирование.ТекущаяОбласть.ВысотаСтроки = ОбластьДатыДень.ТекущаяОбласть.ВысотаСтроки;
	ОбластьДатыРесурс.ТекущаяОбласть.ВысотаСтроки = ОбластьДатыДень.ТекущаяОбласть.ВысотаСтроки;
	ОбластьСтрокаРазделитель.ТекущаяОбласть.ВысотаСтроки = ОбластьДатыДень.ТекущаяОбласть.ВысотаСтроки;
	
	Если ПараметрыКалендаря.ОтображатьДанныеУчетаРабочегоВремени Тогда
		
		ОбластьУРВ.ТекущаяОбласть.ВысотаСтроки = ОбластьДатыДень.ТекущаяОбласть.ВысотаСтроки;
		
	КонецЕсли;
	
	Если ПараметрыКалендаря.РазмерСеткиРедактированияПланировщика =
		Перечисления.РазмерСеткиРедактированияПланировщика.РавенИнтервалуШкалыМинут Тогда
		
		ОбластьДатыДень.ТекущаяОбласть.ВысотаСтроки =
			ОбластьДатыДень.ТекущаяОбласть.ВысотаСтроки * ПараметрыКалендаря.РежимШкалыМинут;
			
		ОбластьДатыРесурс.ТекущаяОбласть.ВысотаСтроки =
			ОбластьДатыРесурс.ТекущаяОбласть.ВысотаСтроки * ПараметрыКалендаря.РежимШкалыМинут;
		
		ОбластьСтрокаРазделитель.ТекущаяОбласть.ВысотаСтроки =
			ОбластьСтрокаРазделитель.ТекущаяОбласть.ВысотаСтроки * ПараметрыКалендаря.РежимШкалыМинут;
		
		Если ПараметрыКалендаря.ОтображатьДанныеУчетаРабочегоВремени Тогда
			
			ОбластьУРВ.ТекущаяОбласть.ВысотаСтроки =
				ОбластьУРВ.ТекущаяОбласть.ВысотаСтроки * ПараметрыКалендаря.РежимШкалыМинут;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Интервал Из ПараметрыКалендаря.ИнтервалыОтображения Цикл
		
		// выводим области дат если отображаем несколько дней
		Если ТребуетсяВыводитьРазделителиДней Тогда
			
			ОбластьРазделительДень.Параметры.День = Формат(Интервал.Дата, "ДЛФ=D");
			КалендарьДневной.Вывести(ОбластьРазделительДень);
			КалендарьДневной.Присоединить(ОбластьРазделительТекущееПланирование);
			
			Для Сч = 1 По КоличествоКолонок Цикл
				
				КалендарьДневной.Присоединить(ОбластьРазделительРесурс);
				
				Если ПараметрыКалендаря.ОтображатьДанныеУчетаРабочегоВремени Тогда
					
					КалендарьДневной.Присоединить(ОбластьРазделительУРВ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			КалендарьДневной.Присоединить(ОбластьРазделительГраница);
			
		КонецЕсли;
		
		// выводим основную сетку
		ОбластьСетка = Новый ТабличныйДокумент;
		ТекущийЧас = Интервал.Начало;
		ВсегоИнтервалов = 0;
		
		Пока ТекущийЧас < Интервал.Конец Цикл
			
			ОбластьДатыДень.Параметры.Час = Формат(ТекущийЧас + ПараметрыКалендаря.СмещениеЧасовогоПояса, "ДФ=ЧЧ");
			ОбластьДатыДень.Параметры.Минута = Формат(ТекущийЧас + ПараметрыКалендаря.СмещениеЧасовогоПояса, "ДФ=мм");
			ОбластьСетка.Вывести(ОбластьДатыДень);
			
			ОбластьДатыРесурс.ТекущаяОбласть.ЦветФона =
				?(ВсегоИнтервалов % 2 = 0, ЦветаРаскраски["ЦветСвободно"], ЦветаРаскраски["ЦветСвободно2"]);
			
			ОбластьСетка.Присоединить(ОбластьСтрокаТекущееПланирование);
			
			Для Сч = 1 По КоличествоКолонок Цикл
				
				ОбластьСетка.Присоединить(ОбластьДатыРесурс);
				
				Если ПараметрыКалендаря.ОтображатьДанныеУчетаРабочегоВремени Тогда
					
					ОбластьСетка.Присоединить(ОбластьУРВ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТребуетсяВыводитьРазделителиДней Тогда
				
				ОбластьСетка.Присоединить(ОбластьСтрокаРазделитель);
				
			КонецЕсли;
			
			ВсегоИнтервалов = ВсегоИнтервалов + 1;
			ТекущийЧас      = ТекущийЧас + ПараметрыКалендаря.СекундВОдномИнтервале;
			
		КонецЦикла;
		
		// объединим области шкалы
		КоличествоИнтерваловДляОбъединения = ПараметрыКалендаря.РежимШкалыМинут;
		
		Если КоличествоИнтерваловДляОбъединения = 0 Тогда
			
			КоличествоИнтерваловДляОбъединения = 2;
			ПараметрыКалендаря.РежимШкалыМинут = 2;
			
		КонецЕсли;
		
		КоличествоИнтерваловВЧасе = 3600 / ПараметрыКалендаря.СекундВОдномИнтервале;
		
		// Объединим интервалы шапки
		НачалоОбластиОбъединения = 1;
		ЗначениеОбластиОбъединения = Неопределено;
		
		Для Сч = 1 По ВсегоИнтервалов Цикл
			
			ТекущаяОбласть = ОбластьСетка.Область(Сч, 1, Сч, 1);
			Если ЗначениеОбластиОбъединения = Неопределено Тогда
				ЗначениеОбластиОбъединения = ТекущаяОбласть.Текст;
			ИначеЕсли ТекущаяОбласть.Текст <> ЗначениеОбластиОбъединения Тогда
				ОбластьСетка.Область(НачалоОбластиОбъединения, 1, Сч - 1, 1).Объединить();
				НачалоОбластиОбъединения = Сч;
				ЗначениеОбластиОбъединения = ТекущаяОбласть.Текст;
			КонецЕсли;
			
		КонецЦикла;
		
		// Объекдиним последний интервал
		ОбластьСетка.Область(НачалоОбластиОбъединения, 1, ВсегоИнтервалов, 1).Объединить();
		
		Если ПараметрыКалендаря.РазмерСеткиРедактированияПланировщика
			= Перечисления.РазмерСеткиРедактированияПланировщика.ПятьМинут Тогда
			
			Сч = 1;
			Пока Сч < ВсегоИнтервалов Цикл
				
				// объединим минутные интервалы
				ОбластьСетка.Область(Сч, 2, Сч + КоличествоИнтерваловДляОбъединения - 1, 2)
					.Объединить();
				Сч = Сч + КоличествоИнтерваловДляОбъединения;
				
			КонецЦикла;
			
		КонецЕсли;
		
		КалендарьДневной.Вывести(ОбластьСетка);
		Интервал.Вставить("ВсегоИнтервалов", ВсегоИнтервалов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПокраситьОбластьПоГрафику(КалендарьДневной, ПараметрыКалендаря, Ресурсы, ПараметрыПланирования)
	
	ЕстьРазделителиДней = (ПараметрыКалендаря.ИнтервалыОтображения.Количество() > 1);
	СтартовыйНомерКолонки = ?(ЕстьРазделителиДней, 3, 2);
	РабочиеИнтервалы = ПараметрыПланирования.РабочиеИнтервалы;
	ЦветаРаскраски = ПланированиеРесурсовПовтИсп.ОформлениеГрафиков();
	ПУСТАЯ_ДАТА = Дата(1, 1, 1);
	
	Для Каждого ИнтервалОтображения Из ПараметрыКалендаря.ИнтервалыОтображения Цикл
		
		Для Каждого Ресурс Из Ресурсы Цикл
			
			Текущие5Минут = ИнтервалОтображения.Начало;
			ТекущийНомер = СтартовыйНомерКолонки;
			ИнтервалыРесурса = РабочиеИнтервалы.НайтиСтроки(Новый Структура("Ресурс", Ресурс.Ресурс));
			
			Пока Текущие5Минут < ИнтервалОтображения.Конец Цикл
				
				ИнтервалНайден = Ложь;
				ЦветИнтервала = Неопределено;
				
				Для Каждого Интервал Из ИнтервалыРесурса Цикл
					
					Если Текущие5Минут >= (Интервал.Дата + (Интервал.НачалоРабочегоВремени - ПУСТАЯ_ДАТА))
						И Текущие5Минут < (Интервал.Дата + (Интервал.КонецРабочегоВремени - ПУСТАЯ_ДАТА)) Тогда
						
						Если НЕ Интервал.ЭтоРабочий Тогда
							
							Если Интервал.ВидИнтервала = Справочники.ВидыИнтервалов.ОбеденныйПерерыв Тогда
								
								ЦветИнтервала = ЦветаРаскраски["ЦветОбеденныйПерерыв"];
								
							ИначеЕсли Интервал.ВидИнтервала = Справочники.ВидыИнтервалов.ТехническийПерерыв Тогда
								
								ЦветИнтервала = ЦветаРаскраски["ЦветТехническийПерерыв"];
								
							Иначе
								
								ЦветИнтервала = ЦветаРаскраски["ЦветНерабочийИнтервал"];
								
							КонецЕсли;
							
						КонецЕсли;
						
						ИнтервалНайден = Истина;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ИнтервалНайден Тогда
					
					ЦветИнтервала = ЦветаРаскраски["ЦветНерабочийИнтервал"];
					
				КонецЕсли;
				
				Если ЦветИнтервала <> Неопределено Тогда
					
					Область = ПланированиеРесурсовКлиентСервер.Область(
						КалендарьДневной, ПараметрыКалендаря.РасположениеРесурсов, Ресурс.Номер, ТекущийНомер);
					
					Область.ЦветФона = ЦветИнтервала;
					
				КонецЕсли;
				
				Текущие5Минут = Текущие5Минут + ПараметрыКалендаря.СекундВОдномИнтервале;
				ТекущийНомер  = ТекущийНомер + 1;
				
			КонецЦикла;
			
			
		КонецЦикла;
		
		СтартовыйНомерКолонки = ТекущийНомер + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПокраситьОбластиПоПланированию(КалендарьДневной, ПараметрыКалендаря, ПараметрыПланирования)
	
	// Получим таблицу для раскраски
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ресурсы", ПараметрыКалендаря.Ресурсы);
	Запрос.УстановитьПараметр("Ячейки", ПараметрыПланирования.Ячейки);
	
	КопияЗапланированыПаралельно = ПараметрыПланирования.ЗапланированыПаралельно;
	ПоляДляСворачивания = Новый Массив;
	ПоляДляСворачивания.Добавить("Документ");
	ПоляДляСворачивания.Добавить("Идентификатор");
	ПоляДляСворачивания.Добавить("ИдентификаторГруппы");
	ПоляДляСворачивания.Добавить("ВидОбъектаПланирования");
	ПоляДляСворачивания.Добавить("РабочееМесто");
	ПоляДляСворачивания.Добавить("Исполнитель");
	ПоляДляСворачивания.Добавить("НачалоИнтервала");
	ПоляДляСворачивания.Добавить("КонецИнтервала");
	ПоляДляСворачивания.Добавить("Объект");
	ПоляДляСворачивания.Добавить("ПредставлениеОбъекта");
	КопияЗапланированыПаралельно.Свернуть(СтрСоединить(ПоляДляСворачивания, ","));
	Запрос.УстановитьПараметр("Планирование", КопияЗапланированыПаралельно);
	
	ДокументВладелец = ПараметрыКалендаря.Документ;
	ПропуститьИнтервал = ПараметрыКалендаря.РежимОтображенияРесурсовНаГрафике = "Общий"
		И НЕ ЗначениеЗаполнено(ДокументВладелец);
	
#Область Текст_запроса
	
	ЗапросТекст =
	"ВЫБРАТЬ
	|	Ресурсы.Ресурс КАК Ресурс,
	|	Ресурсы.Номер КАК НомерРесурс
	|ПОМЕСТИТЬ Ресурсы
	|ИЗ
	|	&Ресурсы КАК Ресурсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ячейки.Дата КАК Дата,
	|	Ячейки.Номер КАК Номер
	|ПОМЕСТИТЬ Ячейки
	|ИЗ
	|	&Ячейки КАК Ячейки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ресурсы.Ресурс КАК Ресурс,
	|	Ресурсы.НомерРесурс КАК НомерРесурс,
	|	Ячейки.Дата КАК Дата,
	|	Ячейки.Номер КАК Номер
	|ПОМЕСТИТЬ Сетка
	|ИЗ
	|	Ресурсы КАК Ресурсы,
	|	Ячейки КАК Ячейки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Ресурсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Ячейки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Планирование.Документ КАК Документ,
	|	Планирование.Идентификатор КАК Идентификатор,
	|	Планирование.ИдентификаторГруппы КАК ИдентификаторГруппы,
	|	Планирование.ВидОбъектаПланирования КАК ВидОбъектаПланирования,
	|	Планирование.РабочееМесто КАК РабочееМесто,
	|	Планирование.Исполнитель КАК Исполнитель,
	|	Планирование.НачалоИнтервала КАК НачалоИнтервала,
	|	Планирование.КонецИнтервала КАК КонецИнтервала,
	|	Планирование.Объект КАК Объект,
	|	Планирование.ПредставлениеОбъекта КАК ПредставлениеОбъекта
	|ПОМЕСТИТЬ Планирование
	|ИЗ
	|	&Планирование КАК Планирование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|// Получим данные по документам для представления интервала
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка КАК Документ,
	|	""План ремонта""      КАК ТипДокумента,
	|	ЗаявкаНаРемонт.Номер КАК Номер,
	|	ЗаявкаНаРемонт.Дата КАК Дата,
	|	ЗаявкаНаРемонт.ДатаНачала КАК Начало,
	|	ЗаявкаНаРемонт.ДатаОкончания КАК Конец,
	|	ЗаявкаНаРемонт.Автомобиль КАК Автомобиль,
	|	ЗаявкаНаРемонт.Модель КАК Модель,
	|	ЗаявкаНаРемонт.Заказчик КАК Заказчик,
	|	ЗаявкаНаРемонт.ОбращениеККлиенту КАК ОбращениеККлиенту,
	|	ЗаявкаНаРемонт.ВидРемонта КАК ВидРемонта,
	|	ЗаявкаНаРемонт.Комментарий КАК Комментарий,
	|	ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.ПустаяСсылка) КАК Состояние
	|ПОМЕСТИТЬ ДанныеДокументовДляПредставления
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|ГДЕ
	|	ЗаявкаНаРемонт.Ссылка В
	|			(ВЫБРАТЬ
	|				Планирование.Документ КАК Документ
	|			ИЗ
	|				Планирование КАК Планирование)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаряд.Ссылка,
	|	""Заказ-наряд"",
	|	ЗаказНаряд.Номер,
	|	ЗаказНаряд.Дата,
	|	ЗаказНаряд.ДатаНачала,
	|	ЗаказНаряд.ДатаОкончания,
	|	ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль,
	|	ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль.Модель,
	|	ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик,
	|	"""",
	|	ЗаказНаряд.ВидРемонта,
	|	ЗаказНаряд.Комментарий,
	|	ЗаказНаряд.Состояние
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.Ссылка В
	|			(ВЫБРАТЬ
	|				Планирование.Документ КАК Документ
	|			ИЗ
	|				Планирование КАК Планирование)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль,
	|	ВЫРАЗИТЬ(АвтомобилиСрезПоследних.Значение КАК СТРОКА(10)) КАК ГосНомер
	|ПОМЕСТИТЬ ДанныеГосНомеровДляПредставления
	|ИЗ
	|	РегистрСведений.Автомобили.СрезПоследних(
	|			,
	|			Автомобиль В
	|					(ВЫБРАТЬ
	|						ДанныеДокументовДляПредставления.Автомобиль КАК Автомобиль
	|					ИЗ
	|						ДанныеДокументовДляПредставления КАК ДанныеДокументовДляПредставления)
	|				И ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ГосНомер)) КАК АвтомобилиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Заказчик,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Телефон
	|ПОМЕСТИТЬ ДанныеТелефоновДляПредставления
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка В
	|				(ВЫБРАТЬ
	|					ДанныеДокументовДляПредставления.Заказчик КАК Заказчик
	|				ИЗ
	|					ДанныеДокументовДляПредставления КАК ДанныеДокументовДляПредставления)
	|			И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставПакетовРабот.ЗаказНаряд КАК Документ,
	|	СоставПакетовРабот.ПакетРабот КАК Пакет
	|ПОМЕСТИТЬ СоставПакетов
	|ИЗ
	|	РегистрСведений.СоставПакетовРабот КАК СоставПакетовРабот
	|
	|ГДЕ
	|	СоставПакетовРабот.ЗаказНаряд В
	|		(ВЫБРАТЬ
	|			Планирование.Документ КАК Документ
	|		ИЗ
	|			Планирование КАК Планирование)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставПакетовРабот.ЗаказНаряд,
	|	СоставПакетовРабот.ПакетРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетРабот КАК Пакет,
	|	Состояние КАК Состояние
	|ПОМЕСТИТЬ СостояниеПакетов
	|ИЗ
	|	РегистрСведений.СостоянияПакетовРабот.СрезПоследних(
	|		,
	|		ПакетРабот В (ВЫБРАТЬ СоставПакетов.Пакет ИЗ СоставПакетов КАК СоставПакетов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставПакетов.Документ КАК Документ,
	|	СоставПакетов.Пакет КАК Пакет,
	|	ЕСТЬNULL(СостояниеПакетов.Состояние, ЗНАЧЕНИЕ(Справочник.ВидыСостоянийПакетовРабот.НеСтартовал)) КАК Состояние
	|ИЗ
	|	СоставПакетов КАК СоставПакетов
	|ЛЕВОЕ СОЕДИНЕНИЕ СостояниеПакетов КАК СостояниеПакетов
	|ПО
	|	СоставПакетов.Пакет = СостояниеПакетов.Пакет
	|ИТОГИ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокументовДляПредставления.Документ КАК Документ,
	|	ДанныеДокументовДляПредставления.ТипДокумента КАК ТипДокумента,
	|	ДанныеДокументовДляПредставления.Номер КАК Номер,
	|	ДанныеДокументовДляПредставления.Дата КАК Дата,
	|	ДанныеДокументовДляПредставления.Начало КАК Начало,
	|	ДанныеДокументовДляПредставления.Конец КАК Конец,
	|	ДанныеДокументовДляПредставления.Автомобиль КАК Автомобиль,
	|	ДанныеДокументовДляПредставления.Модель КАК Модель,
	|	ДанныеДокументовДляПредставления.Заказчик КАК Заказчик,
	|	ЕСТЬNULL(ДанныеДокументовДляПредставления.ОбращениеККлиенту, ""--//--"") КАК ОбращениеККлиенту,
	|	ДанныеДокументовДляПредставления.ВидРемонта КАК ВидРемонта,
	|	ДанныеДокументовДляПредставления.Комментарий КАК Комментарий,
	|	ДанныеДокументовДляПредставления.Состояние КАК Состояние,
	|	ЕСТЬNULL(ДанныеГосНомеровДляПредставления.ГосНомер, ""--//--"") КАК ГосНомер,
	|	ЕСТЬNULL(ДанныеТелефоновДляПредставления.Телефон, ""--//--"") КАК Телефон
	|ИЗ
	|	ДанныеДокументовДляПредставления КАК ДанныеДокументовДляПредставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГосНомеровДляПредставления КАК ДанныеГосНомеровДляПредставления
	|		ПО ДанныеДокументовДляПредставления.Автомобиль = ДанныеГосНомеровДляПредставления.Автомобиль
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТелефоновДляПредставления КАК ДанныеТелефоновДляПредставления
	|		ПО ДанныеДокументовДляПредставления.Заказчик = ДанныеТелефоновДляПредставления.Заказчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокументовДляПредставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеГосНомеровДляПредставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеТелефоновДляПредставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Получим данные  по сетке
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сетка.Ресурс КАК Ресурс,
	|	Сетка.НомерРесурс КАК НомерРесурс,
	|	Сетка.Дата КАК Дата,
	|	Сетка.Номер КАК Номер,
	|	Планирование.Документ КАК Документ,
	|	Планирование.Идентификатор КАК Идентификатор,
	|	Планирование.ИдентификаторГруппы КАК ИдентификаторГруппы,
	|	Планирование.ВидОбъектаПланирования КАК ВидОбъектаПланирования,
	|	Планирование.РабочееМесто КАК РабочееМесто,
	|	Планирование.Исполнитель КАК Исполнитель,
	|	Планирование.НачалоИнтервала КАК НачалоИнтервала,
	|	Планирование.КонецИнтервала КАК КонецИнтервала,
	|	Планирование.Объект КАК Объект,
	|	Планирование.ПредставлениеОбъекта КАК ПредставлениеОбъекта
	|ИЗ
	|	Сетка КАК Сетка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Планирование КАК Планирование
	|		ПО (Сетка.Дата >= Планирование.НачалоИнтервала
	|				ИЛИ Планирование.НачалоИнтервала < ДОБАВИТЬКДАТЕ(Сетка.Дата, СЕКУНДА, %1))
	|			И Сетка.Дата < Планирование.КонецИнтервала
	|			И (Сетка.Ресурс = Планирование.РабочееМесто
	|				ИЛИ Сетка.Ресурс = Планирование.Исполнитель)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРесурс,
	|	Номер,
	|	Документ,
	|	Дата,
	|	НачалоИнтервала
	|ИТОГИ ПО
	|	НомерРесурс,
	|	Номер";
	
	Запрос.Текст = СтрШаблон(ЗапросТекст, Формат(ПараметрыКалендаря.СекундВОдномИнтервале, "ЧГ=0"));
	
	#КонецОбласти
	
	Результат = Запрос.ВыполнитьПакет();
	КэшЯчеекДокументов = Новый Соответствие;
	
	ИнформацияОПакетах = РазобратьДанныеПакетаПоДокументам(Результат[Результат.ВГраница() - 5]);
	
	// разберем данные для представления
	ДанныеДокументов = РазобратьДанныеДокуменовДляПредставления(Результат[Результат.ВГраница() - 4]);
	
	Если НЕ Результат[Результат.ВГраница()].Пустой() Тогда
		ВыборкаРесурсы = Результат[Результат.ВГраница()].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Цвета     = ПланированиеРесурсовПовтИсп.ОформлениеГрафиков();
		ЦветаЗН   = Справочники.ВидыСостоянийЗаказНарядов.ЦветаСостоянийЗаказНаряда();
		НетЛинии  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		ЕстьЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		Пока ВыборкаРесурсы.Следующий() Цикл
			
			ВыборкаЯчейки = ВыборкаРесурсы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ХешиЯчеек = Новый Массив;
			
			Пока ВыборкаЯчейки.Следующий() Цикл
				
				Хеш = Новый ХешированиеДанных(ХешФункция.SHA1);
				ЦветЯчейки = Неопределено;
				ПредставлениеИнтервала = Неопределено;
				СоставРасшифровки = Новый Массив;
				КоличествоИнтервалов = 0;
				ЕстьПересечение = Ложь;
				КонецПредыдущегоИнтервала = Неопределено;
				
				Выборка = ВыборкаЯчейки.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.Идентификатор <> null Тогда
						
						Если НЕ ЗначениеЗаполнено(Выборка.Ресурс) Тогда
							Если ПропуститьИнтервал ИЛИ ДокументВладелец <> Выборка.Документ Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						Если СоставРасшифровки.Найти(Выборка.Документ) = Неопределено Тогда
							
							СоставРасшифровки.Добавить(Выборка.Документ);
							
						КонецЕсли;
						
						Хеш.Добавить(Выборка.Идентификатор);
						
						Если ПредставлениеИнтервала = Неопределено Тогда
							
							ПредставлениеИнтервала = Новый Структура;
							ПредставлениеИнтервала.Вставить("Документ", Выборка.Документ);
							ПредставлениеИнтервала.Вставить("Объект", Выборка.ПредставлениеОбъекта);
							ПредставлениеИнтервала.Вставить("Начало", Выборка.НачалоИнтервала);
							ПредставлениеИнтервала.Вставить("Конец", Выборка.КонецИнтервала);
							
						КонецЕсли;
						
						Если КонецПредыдущегоИнтервала <> Неопределено
							И Выборка.НачалоИнтервала < КонецПредыдущегоИнтервала Тогда
							
							ЕстьПересечение = Истина;
							
						КонецЕсли;
						
						Если ЦветЯчейки = Неопределено Тогда
							
							СостояниеДокумента = Неопределено;
							
							// Определим динамическое состояние документа
							Если Выборка.Дата < ТекущаяДатаСеанса Тогда
								
								// TODO: Получение динамических состояний документа
								ДанныеДокумента = ДанныеДокументов.Получить(Выборка.Документ);
								
								Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
									
									ТипДокумента = ТипЗнч(Выборка.Документ);
									ДатаНачала = ДанныеДокумента.Получить("Начало");
									ДатаКонец = ДанныеДокумента.Получить("Конец");
									
									Если ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаРемонт")
										И ЗначениеЗаполнено(ДатаНачала)
										И ТекущаяДатаСеанса > ДатаНачала Тогда
										
										СостояниеДокумента = Справочники.ВидыСостоянийЗаказНарядов.ОпозданиеКлиента;
										
									ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказНаряд")
										И ЗначениеЗаполнено(ДатаКонец)
										И ТекущаяДатаСеанса > ДатаКонец Тогда
										
										СостояниеПакетов = ИнформацияОПакетах.Получить(Выборка.Документ);
										
										Если ЗначениеЗаполнено(СостояниеПакетов) И НЕ СостояниеПакетов.Закрыт Тогда
											
											СостояниеДокумента = Справочники.ВидыСостоянийЗаказНарядов.ОпозданиеОкончанияРабот;
											
										КонецЕсли;
										
									ИначеЕсли ТипДокумента = тип("ДокументСсылка.ЗаказНаряд")
										И ЗначениеЗаполнено(ДатаНачала)
										И ТекущаяДатаСеанса > ДатаНачала Тогда
										
										СостояниеПакетов = ИнформацияОПакетах.Получить(Выборка.Документ);
										
										Если ЗначениеЗаполнено(СостояниеПакетов) И СостояниеПакетов.НеСтартовал Тогда
											
											СостояниеДокумента = Справочники.ВидыСостоянийЗаказНарядов.ОпозданиеНачалаРабот;
											
										КонецЕсли;
										
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
							Если НЕ ЗначениеЗаполнено(СостояниеДокумента) Тогда
								
								ДанныеДокумента = ДанныеДокументов.Получить(Выборка.Документ);
								
								Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
									
									СостояниеДокумента = ДанныеДокумента.Получить("Состояние");
									
								КонецЕсли;
								
							КонецЕсли;
							
							Если ЗначениеЗаполнено(СостояниеДокумента) Тогда
								
								ЦветЯчейки = ЦветаЗН.Получить(СостояниеДокумента);
								
							КонецЕсли;
							
						КонецЕсли;
						
						КонецПредыдущегоИнтервала = Выборка.КонецИнтервала;
						КоличествоИнтервалов = КоличествоИнтервалов + 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если КоличествоИнтервалов > 1 И ЕстьПересечение Тогда
					
					ЦветЯчейки = Цвета.ПересечениеИнтервалов;
					
				ИначеЕсли КоличествоИнтервалов > 0 И ЦветЯчейки = Неопределено Тогда
					
					ЦветЯчейки = Цвета.ЗанятоДругимДокументом;
					
				КонецЕсли;
				
				Если ЦветЯчейки <> Неопределено ИЛИ СоставРасшифровки.Количество() > 0 Тогда
					
					Ячейка = ПланированиеРесурсовКлиентСервер.Область(
						КалендарьДневной,
						ПараметрыКалендаря.РасположениеРесурсов,
						ВыборкаЯчейки.НомерРесурс,
						ВыборкаЯчейки.Номер);
						
					Ячейка.ЦветФона = ЦветЯчейки;
					Ячейка.Расшифровка = СоставРасшифровки;
					Ячейка[?(ПараметрыКалендаря.РасположениеРесурсов = "ЛЕВО", "ГраницаСлева", "ГраницаСверху")] = НетЛинии;
					Ячейка[?(ПараметрыКалендаря.РасположениеРесурсов = "ЛЕВО", "ГраницаСправа", "ГраницаСнизу")] = НетЛинии;
					
					Для Каждого Документ Из СоставРасшифровки Цикл
						
						Значение = КэшЯчеекДокументов.Получить(Документ);
						
						Если Значение = Неопределено Тогда
							
							Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ячейка.Имя);
							
						Иначе
							
							Значение.Добавить(Ячейка.Имя);
							
						КонецЕсли;
						
						КэшЯчеекДокументов.Вставить(Документ, Значение);
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если (ХешиЯчеек.Количество() = 0 ИЛИ Хеш.ХешСумма <> ХешиЯчеек[ХешиЯчеек.ВГраница()]) Тогда
					Если ПредставлениеИнтервала <> Неопределено Тогда
						Ячейка = ПланированиеРесурсовКлиентСервер.Область(
							КалендарьДневной,
							ПараметрыКалендаря.РасположениеРесурсов,
							ВыборкаЯчейки.НомерРесурс,
							ВыборкаЯчейки.Номер);
						
						Ячейка[?(ПараметрыКалендаря.РасположениеРесурсов = "ЛЕВО", "ГраницаСлева", "ГраницаСверху")] = ЕстьЛиния;
						
						ДанныеДокумента = ДанныеДокументов.Получить(ПредставлениеИнтервала.Документ);
						
						Если ДанныеДокумента <> Неопределено Тогда
							// дополним данные данными интервала
							ПредставлениеПериод = ПредставлениеПериода(
								ПредставлениеИнтервала.Начало, ПредставлениеИнтервала.Конец);
							
							ДанныеДокумента.Вставить("Период", ПредставлениеПериод);
							ДанныеДокумента.Вставить("ОбъектПланирования", ПредставлениеИнтервала.Объект);							
							
							Ячейка.Текст = ЗаполнитьШаблон(ДанныеДокумента,
								ПараметрыКалендаря.ШаблонПредставленияИнтервалаОбъекта);
						Иначе
							Ячейка.Текст = ПредставлениеИнтервала;
						КонецЕсли;
					КонецЕсли;
					
					ХешиЯчеек.Добавить(Хеш.ХешСумма);
				Иначе
					Ячейка = ПланированиеРесурсовКлиентСервер.Область(
						КалендарьДневной,
						ПараметрыКалендаря.РасположениеРесурсов,
						ВыборкаЯчейки.НомерРесурс,
						ВыборкаЯчейки.Номер);
					
					Если ПредставлениеИнтервала <> Неопределено Тогда
						Ячейка.Текст = Неопределено;
					Иначе
						Ячейка.Текст = "";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыКалендаря.Вставить("КэшЯчеекДокументов", КэшЯчеекДокументов);
	
КонецПроцедуры

Процедура ПокраситьОбластиПоУРВ(КалендарьДневной, ПараметрыКалендаря, ПараметрыПланирования)
	
	Если НЕ ПараметрыКалендаря.ОтображатьДанныеУчетаРабочегоВремени Тогда
		Возврат;
	КонецЕсли;
	
	Начало = ПараметрыКалендаря.ИнтервалыОтображения[0].Начало;
	Конец = ПараметрыКалендаря.ИнтервалыОтображения[ПараметрыКалендаря.ИнтервалыОтображения.Вграница()].Конец;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ресурсы", ПараметрыКалендаря.Ресурсы);
	Запрос.УстановитьПараметр("Ячейки", ПараметрыПланирования.Ячейки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Конец", Конец);
	
#Область Текст_запроса
	
	ЗапросТекст =
	"ВЫБРАТЬ
	|	Ресурсы.Ресурс КАК Ресурс,
	|	Ресурсы.Номер + 1 КАК НомерРесурс
	|ПОМЕСТИТЬ Ресурсы
	|ИЗ
	|	&Ресурсы КАК Ресурсы
	|ГДЕ
	|	Ресурсы.Ресурс <> ЗНАЧЕНИЕ(Справочник.Цеха.ПустаяСсылка)
	|	И Ресурсы.Ресурс <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ячейки.Дата КАК Дата,
	|	Ячейки.Номер КАК Номер
	|ПОМЕСТИТЬ Ячейки
	|ИЗ
	|	&Ячейки КАК Ячейки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ресурсы.Ресурс КАК Ресурс,
	|	Ресурсы.НомерРесурс КАК НомерРесурс,
	|	Ячейки.Дата КАК Дата,
	|	Ячейки.Номер КАК Номер
	|ПОМЕСТИТЬ Сетка
	|ИЗ
	|	Ресурсы КАК Ресурсы,
	|	Ячейки КАК Ячейки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Ресурсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Ячейки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическоеВремя.ПакетРабот КАК Пакет,
	|	ВЫБОР
	|		КОГДА ФактическоеВремя.Период > &Начало
	|			ТОГДА ФактическоеВремя.Период
	|		ИНАЧЕ &Начало
	|	КОНЕЦ КАК Начало,
	|	ВЫБОР
	|		КОГДА ФактическоеВремя.ДатаОкончания = &ПустаяДата
	|			ТОГДА &ТекущаяДата
	|		КОГДА ФактическоеВремя.ДатаОкончания < &Конец
	|			ТОГДА ФактическоеВремя.ДатаОкончания
	|		ИНАЧЕ &Конец
	|	КОНЕЦ КАК Конец,
	|	ФактическоеВремя.ЗаказНаряд КАК Документ,
	|	ФактическоеВремя.Состояние КАК Состояние,
	|	ФактическоеВремя.Цех КАК РабочееМесто,
	|	ФактическоеВремя.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ИнтервалыРесурсов
	|ИЗ
	|	РегистрСведений.ФактическоеВремя КАК ФактическоеВремя
	|ГДЕ
	|	ФактическоеВремя.Период < &Конец
	|	И (ФактическоеВремя.ДатаОкончания = &ПустаяДата
	|			ИЛИ ФактическоеВремя.ДатаОкончания > &Начало)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнтервалыРесурсов.Документ КАК Документ,
	|	ИнтервалыРесурсов.Документ.Номер КАК Номер,
	|	ИнтервалыРесурсов.Документ.Дата КАК Дата,
	|	ИнтервалыРесурсов.Документ.ДатаНачала КАК Начало,
	|	ИнтервалыРесурсов.Документ.ДатаОкончания КАК Конец,
	|	ИнтервалыРесурсов.Документ.СводныйРемонтныйЗаказ.Автомобиль КАК Автомобиль,
	|	ИнтервалыРесурсов.Документ.СводныйРемонтныйЗаказ.Автомобиль.Модель КАК Модель,
	|	ИнтервалыРесурсов.Документ.СводныйРемонтныйЗаказ.Заказчик КАК Заказчик,
	|	ИнтервалыРесурсов.Документ.ВидРемонта КАК ВидРемонта,
	|	ИнтервалыРесурсов.Документ.Комментарий КАК Комментарий,
	|	ИнтервалыРесурсов.Документ.Состояние КАК Состояние
	|ПОМЕСТИТЬ СписокДокументов
	|ИЗ
	|	ИнтервалыРесурсов КАК ИнтервалыРесурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль,
	|	ВЫРАЗИТЬ(АвтомобилиСрезПоследних.Значение КАК СТРОКА(10)) КАК ГосНомер
	|ПОМЕСТИТЬ ДанныеГосНомеровДляПредставления
	|ИЗ
	|	РегистрСведений.Автомобили.СрезПоследних(
	|			,
	|			Автомобиль В
	|					(ВЫБРАТЬ
	|						СписокДокументов.Автомобиль КАК Автомобиль
	|					ИЗ
	|						СписокДокументов КАК СписокДокументов)
	|				И ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ГосНомер)) КАК АвтомобилиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Заказчик,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Телефон
	|ПОМЕСТИТЬ ДанныеТелефоновДляПредставления
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				СписокДокументов.Заказчик КАК Заказчик
	|			ИЗ
	|				СписокДокументов КАК СписокДокументов)
	|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДокументов.Документ КАК Документ,
	|	""Заказ-наряд"" КАК ТипДокумента,
	|	СписокДокументов.Номер КАК Номер,
	|	СписокДокументов.Дата КАК Дата,
	|	СписокДокументов.Начало КАК Начало,
	|	СписокДокументов.Конец КАК Конец,
	|	СписокДокументов.Автомобиль КАК Автомобиль,
	|	СписокДокументов.Модель КАК Модель,
	|	СписокДокументов.Заказчик КАК Заказчик, 
	|	"""" КАК ОбращениеККлиенту,
	|	СписокДокументов.ВидРемонта КАК ВидРемонта,
	|	СписокДокументов.Комментарий КАК Комментарий,
	|	СписокДокументов.Состояние КАК Состояние,
	|	ЕСТЬNULL(ДанныеГосНомеровДляПредставления.ГосНомер, ""--//--"") КАК ГосНомер,
	|	ЕСТЬNULL(ДанныеТелефоновДляПредставления.Телефон, ""--//--"") КАК Телефон
	|ИЗ
	|	СписокДокументов КАК СписокДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГосНомеровДляПредставления КАК ДанныеГосНомеровДляПредставления
	|		ПО СписокДокументов.Автомобиль = ДанныеГосНомеровДляПредставления.Автомобиль
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТелефоновДляПредставления КАК ДанныеТелефоновДляПредставления
	|		ПО СписокДокументов.Заказчик = ДанныеТелефоновДляПредставления.Заказчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеГосНомеровДляПредставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеТелефоновДляПредставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сетка.Ресурс КАК Ресурс,
	|	Сетка.НомерРесурс КАК НомерРесурс,
	|	Сетка.Дата КАК Дата,
	|	Сетка.Номер КАК Номер,
	|	ИнтервалыРесурсов.Пакет КАК Пакет,
	|	ИнтервалыРесурсов.Начало КАК Начало,
	|	ИнтервалыРесурсов.Конец КАК Конец,
	|	ИнтервалыРесурсов.Документ КАК Документ,
	|	ИнтервалыРесурсов.Документ.Номер КАК ДокументНомер,
	|	ИнтервалыРесурсов.Документ.Дата КАК ДокументДата,
	|	ИнтервалыРесурсов.Состояние КАК Состояние,
	|	ИнтервалыРесурсов.РабочееМесто КАК РабочееМесто,
	|	ИнтервалыРесурсов.Исполнитель КАК Исполнитель
	|ИЗ
	|	Сетка КАК Сетка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнтервалыРесурсов КАК ИнтервалыРесурсов
	|		ПО (Сетка.Дата >= ИнтервалыРесурсов.Начало
	|				ИЛИ ИнтервалыРесурсов.Начало < ДОБАВИТЬКДАТЕ(Сетка.Дата, СЕКУНДА, %1))
	|			И Сетка.Дата < ИнтервалыРесурсов.Конец
	|			И (Сетка.Ресурс = ИнтервалыРесурсов.РабочееМесто
	|				ИЛИ Сетка.Ресурс = ИнтервалыРесурсов.Исполнитель)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРесурс,
	|	Дата,
	|	Начало
	|ИТОГИ ПО
	|	НомерРесурс,
	|	Номер";
	
	Запрос.Текст = СтрШаблон(ЗапросТекст, Формат(ПараметрыКалендаря.СекундВОдномИнтервале, "ЧГ=0"));
	
#КонецОбласти
	
	Результат = Запрос.ВыполнитьПакет();
	
	// разберем данные для представления
	ДанныеДокументов = РазобратьДанныеДокуменовДляПредставления(Результат[Результат.ВГраница() - 4]);
	КэшЯчеекДокументов = ПараметрыКалендаря.КэшЯчеекДокументов;
	
	
	Если НЕ Результат[Результат.ВГраница()].Пустой() Тогда
		НетЛинии  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ЕстьЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		Цвета = Справочники.ВидыОтметокВремени.ЦветаВидовОтметокВремени();
		
		ВыборкаРесурсы = Результат[Результат.ВГраница()].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРесурсы.Следующий() Цикл
			ПредыдущийПоследнийПакет = Неопределено;
			
			ВыборкаЯчейки = ВыборкаРесурсы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЯчейки.Следующий() Цикл
				ПоследнийПакет = Неопределено;
				Состояние = Неопределено;
				Представление = "";
				СоставИнтервалов = Новый Массив;
				
				Выборка = ВыборкаЯчейки.Выбрать();
				Пока Выборка.Следующий() Цикл
					ПоследнийПакет = Выборка.Пакет;
					Состояние = Выборка.Состояние;
					
					Если ЗначениеЗаполнено(Выборка.Документ) Тогда
						
						ДанныеДокумента = ДанныеДокументов.Получить(Выборка.Документ);
						
						Если ДанныеДокумента <> Неопределено Тогда
							
							ДанныеДокумента.Вставить("Период", "");
							ДанныеДокумента.Вставить("ОбъектПланирования", "");
							Представление = ЗаполнитьШаблон(ДанныеДокумента, ПараметрыКалендаря.ШаблонПредставленияИнтервалаОбъекта);
							
						КонецЕсли;
						
					Иначе
						
						Представление = Неопределено;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Состояние) Тогда
						Интервал = Новый Структура;
						Интервал.Вставить("Документ", Выборка.Документ);
						Интервал.Вставить("Номер", Выборка.ДокументНомер);
						Интервал.Вставить("Дата", Выборка.ДокументДата);
						Интервал.Вставить("Пакет", Выборка.Пакет);
						Интервал.Вставить("Состояние", Строка(Выборка.Состояние));
						Интервал.Вставить("Начало", Выборка.Начало);
						Интервал.Вставить("Конец", Выборка.Конец);
						СоставИнтервалов.Добавить(Интервал);
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Состояние) Тогда
					Ячейка = ПланированиеРесурсовКлиентСервер.Область(
						КалендарьДневной,
						ПараметрыКалендаря.РасположениеРесурсов,
						ВыборкаЯчейки.НомерРесурс,
						ВыборкаЯчейки.Номер);
					
					ЦветЯчейки = Цвета.Получить(Состояние);
					Если ЦветЯчейки <> Неопределено Тогда
						Ячейка.ЦветФона = ЦветЯчейки;
					КонецЕсли;
				КонецЕсли;
				
				Если СоставИнтервалов.Количество() > 0 Тогда
					
					Ячейка.Расшифровка = СоставИнтервалов;
					ОбработанныеДокументы = Новый Массив;
					
					Для Каждого Интервал Из СоставИнтервалов Цикл
						
						Если ОбработанныеДокументы.Найти(Интервал.Документ) = Неопределено Тогда
							
							ОбработанныеДокументы.Добавить(Интервал.Документ);
							Значение = КэшЯчеекДокументов.Получить(Интервал.Документ);
							
							Если Значение = Неопределено Тогда
								
								Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ячейка.Имя);
								
							Иначе
								
								Значение.Добавить(Ячейка.Имя);
								
							КонецЕсли;
							
							КэшЯчеекДокументов.Вставить(Интервал.Документ, Значение);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ПредыдущийПоследнийПакет <> ПоследнийПакет Тогда
					Ячейка = ПланированиеРесурсовКлиентСервер.Область(
						КалендарьДневной,
						ПараметрыКалендаря.РасположениеРесурсов,
						ВыборкаЯчейки.НомерРесурс,
						ВыборкаЯчейки.Номер);
					
					Ячейка[?(ПараметрыКалендаря.РасположениеРесурсов = "ЛЕВО", "ГраницаСлева", "ГраницаСверху")] = ЕстьЛиния;
					
					Если ЗначениеЗаполнено(Представление) Тогда
						Ячейка.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
						Ячейка.Текст = Представление;
					Иначе
						Ячейка.Текст = Неопределено;
					КонецЕсли;
					
					ПредыдущийПоследнийПакет = ПоследнийПакет;
				Иначе
					Ячейка = ПланированиеРесурсовКлиентСервер.Область(
						КалендарьДневной,
						ПараметрыКалендаря.РасположениеРесурсов,
						ВыборкаЯчейки.НомерРесурс,
						ВыборкаЯчейки.Номер);
					
					Если ЗначениеЗаполнено(Представление) Тогда
						
						Ячейка.Текст = Неопределено;
						
					Иначе
						
						Ячейка.Текст = "";
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыКалендаря.КэшЯчеекДокументов = КэшЯчеекДокументов;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

