
#Область ПрограммныйИнтерфейс

// Добавляет новую команду сортировки в коллекцию подключаемых команд и заполняет поля предопределенными данными.
//
// Параметры:
//  Команды - ТаблицаЗначений - Коллекция команд сортировки.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - с колонками:
//  * Вид - Строка
//  * Подменю - Строка
//  * Обработчик - Строка
//  * РежимЗаписи - Строка
//  * Порядок - Число
//  * ПараметрВыполнения - Строка
//  ** ДополнительныеПараметры.ИмяТабличнойЧасти - Строка
//  ** ДополнительныеПараметры.НаправлениеСортировки - Строка
//
Функция ДобавитьКоманду(Команды) Экспорт
	
	Результат = Команды.Добавить();
	Результат.Вид = "СортировкаТабличнойЧастиДокумента";
	Результат.Подменю = "ТоварыПодменюСортировки";
	Результат.Обработчик = "СортировкаТабличнойЧастиДокумента.СортироватьТабличнуюЧасть";
	Результат.РежимЗаписи = "НеЗаписывать";
	Результат.Порядок = 50;
	Результат.ВидимостьВФормах = "ФормаДокумента";
	Результат.МножественныйВыбор = Ложь;
	
	Результат.ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "Товары");
	Результат.ДополнительныеПараметры.Вставить("НаправлениеСортировки", "");
	
	Возврат Результат;
	
КонецФункции

// Стандартный обработчик сортировки табличной части документа
Процедура СортироватьТабличнуюЧасть(Ссылка, Обработчик) Экспорт
	
	Объект = Обработчик.Источник;
	ИмяТабличнойЧасти = Обработчик.ОписаниеКоманды.ДополнительныеПараметры.ИмяТабличнойЧасти;
	Сортировка = Обработчик.ОписаниеКоманды.ДополнительныеПараметры.НаправлениеСортировки;
	
	Если НЕ ЕстьРеквизит(Объект, ИмяТабличнойЧасти) Тогда
		Если НЕ ЕстьРеквизит(Обработчик.Форма, ИмяТабличнойЧасти) Тогда
			Возврат;
		КонецЕсли;
		Объект = Обработчик.Форма;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	Если ТабличнаяЧасть.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеТабличныхЧастейРеквизитамСортировки = Новый Соответствие;
	СоответствиеТабличныхЧастейРеквизитамСортировки.Вставить("Товары", "Номенклатура");
	СоответствиеТабличныхЧастейРеквизитамСортировки.Вставить("МатериалыЗаказчика", "Номенклатура");
	СоответствиеТабличныхЧастейРеквизитамСортировки.Вставить("Замены", "Номенклатура");
	СоответствиеТабличныхЧастейРеквизитамСортировки.Вставить("ТоварыЗаменители", "Номенклатура");
	СоответствиеТабличныхЧастейРеквизитамСортировки.Вставить("ЦеныТоваров", "Номенклатура");
	
	СоответствиеТабличныхЧастейРеквизитамСортировки.Вставить("Автоработы", "Авторабота");
	СоответствиеТабличныхЧастейРеквизитамСортировки.Вставить("ВспомогательныеАвтоработы", "Авторабота");
	
	ИмяРеквизитаСортировки = СоответствиеТабличныхЧастейРеквизитамСортировки.Получить(ИмяТабличнойЧасти);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	" + ИмяРеквизитаСортировки + ".Артикул " + Сортировка;
	
	РазрешенныеДанные = ПолучитьРазрешенныеДанныеДляЗапроса(ТабличнаяЧасть.Выгрузить());
	ТаблицаДанных = РазрешенныеДанные.Данные;
	Если ТаблицаДанных.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		
		ИсключенныеДанные = ТабличнаяЧасть.Выгрузить(, РазрешенныеДанные.ИсключенныеКолонки);
		ТаблицаДанных.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ИсключенныеДанные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		
		Для Индекс = 0 По ТаблицаДанных.Количество() - 1 Цикл
			ТаблицаДанных[Индекс].НомерСтроки = Индекс;
			ИсключенныеДанные[Индекс].НомерСтроки = Индекс;
		КонецЦикла;
		
	Иначе
		ИсключенныеДанные = ТабличнаяЧасть.Выгрузить(, "НомерСтроки," +РазрешенныеДанные.ИсключенныеКолонки);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаДанных);
	СортированныеДанные = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(РазрешенныеДанные.ИсключенныеКолонки) Тогда
		
		Для Каждого ИсключеннаяКолонка Из ИсключенныеДанные.Колонки Цикл
		
			Если ИсключеннаяКолонка.Имя = "НомерСтроки" Тогда
				Продолжить;
			КонецЕсли;
			
			СортированныеДанные.Колонки.Добавить(
				ИсключеннаяКолонка.Имя,
				ИсключеннаяКолонка.ТипЗначения,
				ИсключеннаяКолонка.Заголовок,
				ИсключеннаяКолонка.Ширина);
			
		КонецЦикла;
		
		Для Каждого СтрокаСортированныхДанных Из СортированныеДанные Цикл
			СтрокаИсключенныхДанных = ИсключенныеДанные.Найти(СтрокаСортированныхДанных.НомерСтроки, "НомерСтроки");
			ЗаполнитьЗначенияСвойств(СтрокаСортированныхДанных, СтрокаИсключенныхДанных, , "НомерСтроки");
		КонецЦикла;
		
	КонецЕсли;
	
	ТабличнаяЧасть.Очистить();
	ТабличнаяЧасть.Загрузить(СортированныеДанные);
	
	Обработчик.Форма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Список объектов, в которых используются команды сортировки табличной части.
//
// Возвращаемое значение:
//   Массив из ОбъектМетаданных - объекты метаданных с командами сортировки.
//
Функция ОбъектыСКомандамиСортировки()
	Результат = Новый Массив;
	
	Результат.Добавить(Метаданные.Документы.ВводОстатковТоваров);
	Результат.Добавить(Метаданные.Документы.ВводОстатковТоваровВПроизводстве);
	Результат.Добавить(Метаданные.Документы.ВозвратОтПокупателя);
	Результат.Добавить(Метаданные.Документы.ВозвратПоставщику);
	Результат.Добавить(Метаданные.Документы.ЗаказНаряд);
	Результат.Добавить(Метаданные.Документы.ЗаказПокупателя);
	Результат.Добавить(Метаданные.Документы.ЗаказПоставщику);
	Результат.Добавить(Метаданные.Документы.ЗаменаВЗаказеПокупателя);
	Результат.Добавить(Метаданные.Документы.ЗаменаВЗаказеПоставщику);
	Результат.Добавить(Метаданные.Документы.ЗаявкаНаРемонт);
	Результат.Добавить(Метаданные.Документы.ИзвлечениеТоваровИзПроизводства);
	Результат.Добавить(Метаданные.Документы.Инвентаризация);
	Результат.Добавить(Метаданные.Документы.ИнвентаризацияОрдерногоСклада);
	Результат.Добавить(Метаданные.Документы.ОтчетКомиссионера);
	Результат.Добавить(Метаданные.Документы.ОтчетКомитенту);
	Результат.Добавить(Метаданные.Документы.ПеремещениеРезервов);
	Результат.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	Результат.Добавить(Метаданные.Документы.ПеремещениеТоваровВПроизводство);
	Результат.Добавить(Метаданные.Документы.Переоценка);
	Результат.Добавить(Метаданные.Документы.ПереразмещениеТоваров);
	Результат.Добавить(Метаданные.Документы.ПересортицаТоваров);
	Результат.Добавить(Метаданные.Документы.ПоступлениеДопРасходов);
	Результат.Добавить(Метаданные.Документы.ПоступлениеТоваров);
	Результат.Добавить(Метаданные.Документы.ПриходныйСкладскойОрдер);
	Результат.Добавить(Метаданные.Документы.РасходныйСкладскойОрдер);
	Результат.Добавить(Метаданные.Документы.РеализацияТоваров);
	Результат.Добавить(Метаданные.Документы.СписаниеТоваров);
	Результат.Добавить(Метаданные.Документы.СчетНаОплату);
	Результат.Добавить(Метаданные.Документы.СчетОтПоставщика);
	Результат.Добавить(Метаданные.Документы.СчетФактураВыданный);
	Результат.Добавить(Метаданные.Документы.СчетФактураПолученный);
	
	Возврат Результат;
КонецФункции

// Список объектов, в которых переопределены команды сортировки табличной части.
// Для переопределения стандартного поведения механизма сортировки табличной части
// необходимо описать в процедуре ДобавитьКомандыСортировкиТабличнойЧасти подключаемые команды сортировки
// в модуле менеджера объекта метаданных, и описать обработчики сортировки табличных частей этого объекта,
// обработчик сортировки должен называться в соответствии с идентификатором команды.
//
// Возвращаемое значение:
//   Массив из ОбъектМетаданных - объекты метаданных с переопределенными командами сортировки.
//
Функция ПереопределяемыеОбъектыСКомандамиСортировки()
	Результат = Новый Массив;
	
	Результат.Добавить(Метаданные.Документы.ИзменениеЦен);
	
	Возврат Результат;
КонецФункции

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид 			= ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "СортировкаТабличнойЧастиДокумента";
	Вид.ИмяПодменю  = "ПодменюСортировка";
	Вид.Заголовок   = НСтр("ru = 'Сортировка'");
	Вид.Порядок     = 10;
	Вид.Картинка    = БиблиотекаКартинок.СортироватьСписок;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ          = "ДобавитьКомандыСортировки";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
КонецПроцедуры

Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	КомандыСортировки = Команды.СкопироватьКолонки();
	КомандыСортировки.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	КомандыСортировки.Индексы.Добавить("Обработана");
	
	КомандыСортировки.ЗаполнитьЗначения(Истина, "Обработана");
	
	ДопустимыеТипы = Новый Массив; // Типы источников, которые пользователь может изменять (см. ниже проверку права "Изменение").
	ПереопределяемыеОбъектыСКомандамиСортировки = ПереопределяемыеОбъектыСКомандамиСортировки();
	ОбъектыСКомандамиСортировки = ОбъектыСКомандамиСортировки();
	Для Каждого Источник Из Источники.Строки Цикл
		Для Каждого ДокументРегистратор Из Источник.Строки Цикл
			Если Не ДокументРегистратор.ЭтоЖурналДокументов
				И Не ПравоДоступа("Изменение", ДокументРегистратор.Метаданные) Тогда
				Продолжить;
			КонецЕсли;
			ПодключаемыеКоманды.ДополнитьМассивТипов(ДопустимыеТипы, ДокументРегистратор.ТипСсылкиДанных);
			Если ПереопределяемыеОбъектыСКомандамиСортировки.Найти(ДокументРегистратор.Метаданные) <> Неопределено Тогда
				ПриПереопределенииКомандСортировки(КомандыСортировки, ДокументРегистратор, НастройкиФормы);
			ИначеЕсли ОбъектыСКомандамиСортировки.Найти(ДокументРегистратор.Метаданные) <> Неопределено Тогда
				ПриДобавленииКомандСортировки(КомандыСортировки, ДокументРегистратор, НастройкиФормы);
			КонецЕсли;
		КонецЦикла;
		Если Не Источник.ЭтоЖурналДокументов
			И Не ПравоДоступа("Изменение", Источник.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		ПодключаемыеКоманды.ДополнитьМассивТипов(ДопустимыеТипы, Источник.ТипСсылкиДанных);
		Если ПереопределяемыеОбъектыСКомандамиСортировки.Найти(Источник.Метаданные) <> Неопределено Тогда
			ПриПереопределенииКомандСортировки(КомандыСортировки, Источник, НастройкиФормы);
		ИначеЕсли ОбъектыСКомандамиСортировки.Найти(Источник.Метаданные) <> Неопределено Тогда
			ПриДобавленииКомандСортировки(КомандыСортировки, Источник, НастройкиФормы);
		КонецЕсли;
	КонецЦикла;
	
	Если ДопустимыеТипы.Количество() = 0 Тогда
		Возврат; // Все закрыто и команд расширений с допустимыми типами тоже не будет.
	КонецЕсли;
	
	Найденные = ПодключенныеОтчетыИОбработки.НайтиСтроки(Новый Структура("ДобавитьКомандыСортировки", Истина));
	Для Каждого ПодключенныйОбъект Из Найденные Цикл
		ПриПереопределенииКомандСортировки(КомандыСортировки, ПодключенныйОбъект, НастройкиФормы, ДопустимыеТипы);
	КонецЦикла;
	
	Для Каждого КомандаСортировки Из КомандыСортировки Цикл
		Команда = Команды.Добавить();
		ЗаполнитьЗначенияСвойств(Команда, КомандаСортировки);
		Команда.Вид = "СортировкаТабличнойЧастиДокумента";
		Если Команда.Порядок = 0 Тогда
			Команда.Порядок = 50;
		КонецЕсли;
		Если Команда.РежимЗаписи = "" Тогда
			Команда.РежимЗаписи = "НеЗаписывать";
		КонецЕсли;
		Если КомандаСортировки.ИзменяетВыбранныеОбъекты = Неопределено Тогда
			Команда.ИзменяетВыбранныеОбъекты = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПереопределенииКомандСортировки(Команды, СведенияОбОбъекте, НастройкиФормы, ДопустимыеТипы = Неопределено)
	
	СведенияОбОбъекте.Менеджер.ДобавитьКомандыСортировкиТабличнойЧасти(Команды, НастройкиФормы);
	ДобавленныеКоманды = Команды.НайтиСтроки(Новый Структура("Обработана", Ложь));
	
	ИмяОбъекта = СведенияОбОбъекте.СсылкаМетаданных.Имя;
	ИмяВидаОбъекта = СведенияОбОбъекте.СсылкаМетаданных.Родитель.Имя;
	
	Для Каждого Команда Из ДобавленныеКоманды Цикл
		Команда.Обработчик = ИмяВидаОбъекта + "." + ИмяОбъекта + "." + Команда.Идентификатор;
		Если Не ЗначениеЗаполнено(Команда.Менеджер) Тогда
			Команда.Менеджер = СведенияОбОбъекте.ПолноеИмя;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Команда.ТипПараметра) Тогда
			Команда.ТипПараметра = СведенияОбОбъекте.ТипСсылкиДанных;
		КонецЕсли;
		Если ДопустимыеТипы <> Неопределено И Не ТипВМассиве(Команда.ТипПараметра, ДопустимыеТипы) Тогда
			Команды.Удалить(Команда);
			Продолжить;
		КонецЕсли;
		Команда.Обработана = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриДобавленииКомандСортировки(Команды, СведенияОбОбъекте, НастройкиФормы, ДопустимыеТипы = Неопределено)
	
	СтандартныеТабличныеЧасти = Новый Массив;
	СтандартныеТабличныеЧасти.Добавить("Товары");
	СтандартныеТабличныеЧасти.Добавить("Автоработы");
	СтандартныеТабличныеЧасти.Добавить("ВспомогательныеАвтоработы");
	СтандартныеТабличныеЧасти.Добавить("МатериалыЗаказчика");
	СтандартныеТабличныеЧасти.Добавить("Замены");
	СтандартныеТабличныеЧасти.Добавить("ТоварыЗаменители");
	
	ТабличныеЧасти = Новый Массив;
	Для Каждого ИмяТабличнойЧасти Из СтандартныеТабличныеЧасти Цикл
		Если СведенияОбОбъекте.Метаданные.ТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено Тогда
			ТабличныеЧасти.Добавить(ИмяТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	
	Порядок = 1;
	
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
		
		Команда 				= ДобавитьКоманду(Команды);
		Команда.Представление	= НСтр("ru = 'По кат. номеру (возрастание)'");
		Команда.Идентификатор	= ИмяТабличнойЧасти + "АртикулПоВозрастанию";
		Команда.Порядок			= Порядок;
		Команда.Подменю			= ИмяТабличнойЧасти + "ПодменюСортировки";
		Команда.Картинка		= БиблиотекаКартинок.СортироватьСтрокиПоВозрастанию;
		Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
		
		Команда 				= ДобавитьКоманду(Команды);
		Команда.Представление	= НСтр("ru = 'По кат. номеру (убывание)'");
		Команда.Идентификатор	= ИмяТабличнойЧасти + "АртикулПоУбыванию";
		Команда.Порядок			= Порядок + 1;
		Команда.Подменю			= ИмяТабличнойЧасти + "ПодменюСортировки";
		Команда.Картинка		= БиблиотекаКартинок.СортироватьСтрокиПоУбыванию;
		Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
		Команда.ДополнительныеПараметры.НаправлениеСортировки = "УБЫВ";
		
		Порядок = Порядок + 2;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРазрешенныеДанныеДляЗапроса(ИсходнаяТаблица)
	
	РазрешенныеТипыДанных = Новый Массив;
	РазрешенныеТипыДанных.Добавить(Тип("Неопределено"));
	РазрешенныеТипыДанных.Добавить(Тип("Число"));
	РазрешенныеТипыДанных.Добавить(Тип("Строка"));
	РазрешенныеТипыДанных.Добавить(Тип("Дата"));
	РазрешенныеТипыДанных.Добавить(Тип("Булево"));
	
	ИсключенныеКолонки = "";
	ТаблицаРезультата = ИсходнаяТаблица.Скопировать();
	
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		
		Если НЕ ТипВМассиве(Колонка.ТипЗначения, РазрешенныеТипыДанных) И НЕ ЭтоСсылочныйТип(Колонка.ТипЗначения) Тогда
			ИсключенныеКолонки = ИсключенныеКолонки + ?(НужнаЗапятая, ",", "") + Колонка.Имя;
			ТаблицаРезультата.Колонки.Удалить(Колонка);
			НужнаЗапятая = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеКолонки = Новый Массив;
	ДополнительныеКолонки.Добавить("КартинкаМаркировки");
	ДополнительныеКолонки.Добавить("КартинкаПрослеживаемогоТовара");
	Для Каждого ИмяКолонки Из ДополнительныеКолонки Цикл
		
		ТекущаяКолонка = ТаблицаРезультата.Колонки.Найти(ИмяКолонки);
		Если ТекущаяКолонка <> Неопределено Тогда
			ТаблицаРезультата.Колонки.Удалить(ТекущаяКолонка);
			ИсключенныеКолонки = ИсключенныеКолонки + ?(НужнаЗапятая, ",", "") + ИмяКолонки;
			НужнаЗапятая = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("Данные, ИсключенныеКолонки", ТаблицаРезультата, ИсключенныеКолонки);
	
КонецФункции

Функция ТипВМассиве(ТипИлиОписаниеТипов, МассивТипов)
	Если ТипЗнч(ТипИлиОписаниеТипов) = Тип("ОписаниеТипов") Тогда
		Для Каждого Тип Из ТипИлиОписаниеТипов.Типы() Цикл
			Если МассивТипов.Найти(Тип) <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь
	Иначе
		Возврат МассивТипов.Найти(ТипИлиОписаниеТипов) <> Неопределено;
	КонецЕсли;
КонецФункции

Функция ЭтоСсылочныйТип(ТипИлиОписаниеТипов)
	Если ТипЗнч(ТипИлиОписаниеТипов) = Тип("ОписаниеТипов") Тогда
		Для Каждого Тип Из ТипИлиОписаниеТипов.Типы() Цикл
			Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь
	Иначе
		Возврат ОбщегоНазначения.ЭтоСсылка(ТипИлиОписаниеТипов);
	КонецЕсли;
КонецФункции

#КонецОбласти