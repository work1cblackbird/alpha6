
#Область ПрограммныйИнтерфейс

#Область Синхронизация

// Параметры задания синхронизации заявок.
// 
// Возвращаемое значение:
//  Структура -  Параметры задания синхронизации заявок:
// * Использование - Булево - 
// * РасписаниеСтрокой - Строка - 
// * Расписание - РасписаниеРегламентногоЗадания - 
Функция ПараметрыЗаданияСинхронизацииЗаявок() Экспорт
	
	МетаданныеЗадания = ЗаявкиНаПодписаниеПЭППереопределяемый
		.МетаданныеРегламентногоЗаданияОбновитьСтатусЗаявокНаПодпись();
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", МетаданныеЗадания));
	Задание = МассивыКлиентСервер.Голова(Задания); // РегламентноеЗадание
	
	Результат = Новый Структура("Использование,РасписаниеСтрокой,Расписание", Ложь,
		"Автоматически не выполняется", Новый РасписаниеРегламентногоЗадания);
	
	Если Задание <> Неопределено Тогда
		
		Результат.РасписаниеСтрокой = Строка(Задание.Расписание);
		Результат.Использование = Задание.Использование;
		Результат.Расписание = Задание.Расписание;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновить параметры задания синхронизации заявок.
// 
// Параметры:
//  Параметры - Структура - Обновляемые поля:
//  * Использование - Булево - 
//  * Расписание - РасписаниеРегламентногоЗадания - 
Процедура ОбновитьПараметрыЗаданияСинхронизацииЗаявок(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеЗадания = ЗаявкиНаПодписаниеПЭППереопределяемый
		.МетаданныеРегламентногоЗаданияОбновитьСтатусЗаявокНаПодпись();
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", МетаданныеЗадания));
	Задание = МассивыКлиентСервер.Голова(Задания);
	
	Если Задание = Неопределено Тогда
		
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеЗадания);
		
	КонецЕсли;
	
	Если Параметры.Свойство("Использование") Тогда
		
		Задание.Использование = Параметры.Использование;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Расписание") Тогда
		
		Задание.Расписание = Параметры.Расписание;
		
	КонецЕсли;
	
	Задание.Записать();
	
КонецПроцедуры

// Обходит заявки в статусе отправлено в ПЭП и опрашивает сервер об их новом статусе.
// Заявки в иных статусах игнорируются.
Процедура ОбновитьСтатусЗаявокНаПодпись() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияЗаявокНаПодписьСрезПоследних.ЗаявкаНаПодпись
		|ИЗ
		|	РегистрСведений.СостоянияЗаявокНаПодпись.СрезПоследних КАК СостоянияЗаявокНаПодписьСрезПоследних
		|ГДЕ
		|	СостоянияЗаявокНаПодписьСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаПодпись.ОтправленВПЭП)"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Запрос выполняется для каждого объекта отдельни, так как нет общего метода
		//@skip-check query-in-loop
		Синхронизировать(Выборка.ЗаявкаНаПодпись);
		
	КонецЦикла;
	
КонецПроцедуры

// Отправка новой заявки на сервер.
// Перед отправкой на сервере регистрируются участники операции и загружается файл в формате PDF.
// 
// Параметры:
//  ЗаявкаНаПодпись - ДокументСсылка.ЗаявкаНаПодпись - Заявка на подпись;
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Отправть на сервер
Функция ОтправтьНаСервер(ЗаявкаНаПодпись) Экспорт
	
	ДанныеЗаявкиКОтправке = ДанныеЗаявкиКОтправке(ЗаявкаНаПодпись);
	ИдентификаторыУчастниковКОтправке = ИдентификаторыУчастниковКОтправке(ЗаявкаНаПодпись, ДанныеЗаявкиКОтправке);
	ИдентификаторФайла = ИдентификаторФайла(ЗаявкаНаПодпись, ДанныеЗаявкиКОтправке.ИмяПечатнойФормы);
	
	Попытка
		
		РезультатОтправки = ОбщегоНазначенияПЭП.МодульИнтеграции().НоваяЗаявкаНаПодпись(
			ИдентификаторДокумента(ЗаявкаНаПодпись),
			ИдентификаторыУчастниковКОтправке,
			ИдентификаторФайла
		);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			Нстр("ru = 'Простая электронная подпись.Создание заявки на подпись'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ЗаявкаНаПодпись,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение;
		
	КонецПопытки;
	
	Попытка
		
		ОбновитьИнфорамациюОФайле(ЗаявкаНаПодпись, РезультатОтправки);
		Возврат РезультатОтправки.ИдентификаторЗаявки;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			Нстр("ru = 'Простая электронная подпись.Создание заявки на подпись'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ЗаявкаНаПодпись,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось создать заявку на подпись'");
		
	КонецПопытки;
	
КонецФункции

// Синхронизировать состояние заявки на подпись с сервисом ПЭП.
// 
// Параметры:
//  ЗаявкаНаПодпись - ДокументСсылка.ЗаявкаНаПодпись - Заявка на подпись;
// 
// Возвращаемое значение:
//  Структура -  Синхронизировать:
// * ОбновилсяФайл - Булево - 
// * ОбновилосьСостояние - Булево - 
Функция Синхронизировать(ЗаявкаНаПодпись) Экспорт
	
	Попытка
		
		РезультатЗапроса = ОбщегоНазначенияПЭП
			.МодульИнтеграции()
			.ЗаявкаНаПодпись(ИдентификаторДокумента(ЗаявкаНаПодпись));
		
		Результат = Новый Структура("ОбновилсяФайл,ОбновилосьСостояние", Ложь, Истина);
		
		Если РезультатЗапроса.СсылкаДляСкачиванияВПЭП <> СсылкаПривязанногоФайла(ЗаявкаНаПодпись) Тогда
			
			ОбновитьИнфорамациюОФайле(
				ЗаявкаНаПодпись,
				Новый Структура("СсылкаДляСкачиванияВПЭП", РезультатЗапроса.СсылкаДляСкачиванияВПЭП)
			);
			Результат.ОбновилсяФайл = Истина;
			
		КонецЕсли;
		
		ОбновитьСостояниеДокумента(ЗаявкаНаПодпись, РезультатЗапроса.СостояниеДокумента);
		
		Возврат Результат;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			Нстр("ru = 'Простая электронная подпись.Синхронизация заявки на подпись'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ЗаявкаНаПодпись,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось синхронизировать заявку на подпись'");
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормами

// Метод для настройки формы списка участников ПЭП.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объект формы;
//  Отказ - Булево - Признак того, что форму необходимо открыть;
//  СтандартнаяОбработка - Булево - Признак того, производить открытие стандартной обработкой.
Процедура ПриСозданииНаСервере_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЗаявкиНаПодписаниеПЭППереопределяемый.ПриСозданииНаСервере_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

// Определяем файл привязаный к заявки на подпись.
// Если файл располагается на сервисе, он будет предварительно скачен. 
// 
// Параметры:
//  ЗаявкаНаПодпись - ДокументСсылка.ЗаявкаНаПодпись - Заявка на подпись;
//  УникальныйИдентификатор - Неопределено, УникальныйИдентификатор - Ключ уникальности хранения файла
//                                                                    во временном хранилище;
// 
// Возвращаемое значение:
//  Строка -  Привязанный файл
Функция ПривязанныйФайл(ЗаявкаНаПодпись, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаявкаНаПодпись) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФайлыЗаявокНаПодпись.ДанныеФайла КАК ДанныеФайла,
		|	ФайлыЗаявокНаПодпись.СсылкаДляСкачиванияВПЭП КАК СсылкаДляСкачиванияВПЭП
		|ИЗ
		|	РегистрСведений.ФайлыЗаявокНаПодпись КАК ФайлыЗаявокНаПодпись
		|ГДЕ
		|	ФайлыЗаявокНаПодпись.ЗаявкаНаПодпись = &ЗаявкаНаПодпись"
	);
	Запрос.УстановитьПараметр("ЗаявкаНаПодпись", ЗаявкаНаПодпись);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	ОписаниеФайла = РезультатЗапроса.Выбрать();
	ОписаниеФайла.Следующий();
	
	Если ЗначениеЗаполнено(ОписаниеФайла.СсылкаДляСкачиванияВПЭП) Тогда
		
		НастройкиСохранения = HTTPТранспортПЭПКлиентСервер.НовыеНастройкиСохранения();
		НастройкиСохранения.КлючУникальности = УникальныйИдентификатор;
		Возврат HTTPТранспортПЭПКлиентСервер.СкачатьФайл(ОписаниеФайла.СсылкаДляСкачиванияВПЭП, НастройкиСохранения);
		
	Иначе
		
		Возврат ПоместитьВоВременноеХранилище(ОписаниеФайла.ДанныеФайла.Получить(), УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецФункции

// Текущее состояние заявки на подпись
// 
// Параметры:
//  ЗаявкаНаПодпись - ДокументСсылка.ЗаявкаНаПодпись - Заявка на подпись;
//  НаМомент - Неопределено, Дата - Дата получения состояния;
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыЗаявокНаПодпись - Состояние документа
Функция СостояниеДокумента(ЗаявкаНаПодпись, Знач НаМомент = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СостоянияЗаявокНаПодписьСрезПоследних.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияЗаявокНаПодпись.СрезПоследних(
		|		&НаМомент,
		|		ЗаявкаНаПодпись = &ЗаявкаНаПодпись) КАК СостоянияЗаявокНаПодписьСрезПоследних"
	);
	Запрос.УстановитьПараметр("НаМомент", НаМомент);
	Запрос.УстановитьПараметр("ЗаявкаНаПодпись", ЗаявкаНаПодпись);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Перечисления.СтатусыЗаявокНаПодпись.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Состояние;
	
КонецФункции

// Определяет цвет фона по состоянию.
// 
// Параметры:
//  Состояние - ПеречислениеСсылка.СтатусыЗаявокНаПодпись - Состояние
// 
// Возвращаемое значение:
//  Цвет - Цвет фона
Функция КартинкаСостояния(Состояние) Экспорт
	
	Если Состояние = Перечисления.СтатусыЗаявокНаПодпись.ПодготовленКОтправке Тогда
		
		Возврат БиблиотекаКартинок.ПодготовленКОтправкеСостояниеДокументаПЭП;
		
	ИначеЕсли Состояние = Перечисления.СтатусыЗаявокНаПодпись.ОтправленВПЭП Тогда
		
		Возврат БиблиотекаКартинок.ОтправленВПЭПСостояниеДокументаПЭП;
		
	ИначеЕсли Состояние = Перечисления.СтатусыЗаявокНаПодпись.Подписан Тогда
		
		Возврат БиблиотекаКартинок.ПодписанСостояниеДокументаПЭП;
		
	ИначеЕсли Состояние = Перечисления.СтатусыЗаявокНаПодпись.Отклонен Тогда
		
		Возврат БиблиотекаКартинок.ОтклоненСостояниеДокументаПЭП;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ХешФайла(ДанныеФайла) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
	ХешированиеДанных.Добавить(ДанныеФайла);
	Возврат Base64Строка(ХешированиеДанных.ХешСумма);
	
КонецФункции

Функция ХэшПривязанногоФайла(ЗаявкаНаПодпись) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ФайлыЗаявокНаПодпись.Хеш
		|ИЗ
		|	РегистрСведений.ФайлыЗаявокНаПодпись КАК ФайлыЗаявокНаПодпись
		|ГДЕ
		|	ФайлыЗаявокНаПодпись.ЗаявкаНаПодпись = &ЗаявкаНаПодпись"
	);
	Запрос.УстановитьПараметр("ЗаявкаНаПодпись", ЗаявкаНаПодпись);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Хеш;
	
КонецФункции

Функция СсылкаПривязанногоФайла(ЗаявкаНаПодпись) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ФайлыЗаявокНаПодпись.СсылкаДляСкачиванияВПЭП
		|ИЗ
		|	РегистрСведений.ФайлыЗаявокНаПодпись КАК ФайлыЗаявокНаПодпись
		|ГДЕ
		|	ФайлыЗаявокНаПодпись.ЗаявкаНаПодпись = &ЗаявкаНаПодпись"
	);
	Запрос.УстановитьПараметр("ЗаявкаНаПодпись", ЗаявкаНаПодпись);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].СсылкаДляСкачиванияВПЭП;
	
КонецФункции

Процедура ОбновитьПривязанныйФайл(ЗаявкаНаПодпись, ДанныеФайла) Экспорт
	
	Хеш = ХешФайла(ДанныеФайла);
	
	Если Не ЗначениеЗаполнено(ЗаявкаНаПодпись) Или Хеш = ХэшПривязанногоФайла(ЗаявкаНаПодпись) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ФайлыЗаявокНаПодпись.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЗаявкаНаПодпись = ЗаявкаНаПодпись;
	МенеджерЗаписи.ДанныеФайла = Новый ХранилищеЗначения(ДанныеФайла, Новый СжатиеДанных(9));
	МенеджерЗаписи.Хеш = Хеш;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция ТребуетсяОбновитьДанныеДокументаPDF(Состояние) Экспорт
	
	Возврат Состояние = Перечисления.СтатусыЗаявокНаПодпись.ПодготовленКОтправке;
	
КонецФункции

Процедура ОбновитьСостояниеДокумента(ЗаявкаНаПодпись, НовоеСостояние, Знач НаМомент = Неопределено) Экспорт
	
	Если НовоеСостояние = СостояниеДокумента(ЗаявкаНаПодпись, НаМомент) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НаМомент = Неопределено Тогда
		
		НаМомент = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СостоянияЗаявокНаПодпись.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЗаявкаНаПодпись = ЗаявкаНаПодпись;
	МенеджерЗаписи.Период = НаМомент;
	МенеджерЗаписи.Состояние = НовоеСостояние;
	МенеджерЗаписи.Автор = ОбщегоНазначенияПЭП.ТекущийПользователь();
	МенеджерЗаписи.УстановленВручную = Ложь;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеЗаявкиКОтправке(ЗаявкаНаПодпись)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкаНаПодпись.ЮридическоеЛицоПЭП,
		|	ЗаявкаНаПодпись.КонтактноеЛицоПЭП,
		|	ЗаявкаНаПодпись.ФизическоеЛицоПЭП,
		|	ЗаявкаНаПодпись.ИмяПечатнойФормы
		|ИЗ
		|	Документ.ЗаявкаНаПодпись КАК ЗаявкаНаПодпись
		|ГДЕ
		|	ЗаявкаНаПодпись.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаНаПодпись);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ВызватьИсключение НСтр("ru = 'Заявка на подпись не записана'");
		
	КонецЕсли;
	
	//@skip-check structure-consructor-too-many-keys
	Результат = Новый Структура("ИмяПечатнойФормы,ЮридическоеЛицоПЭП,КонтактноеЛицоПЭП,ФизическоеЛицоПЭП");
	ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса.Выгрузить()[0]);
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторыУчастниковКОтправке(ЗаявкаНаПодпись, ДанныеЗаявкиКОтправке)
	
	Если Не УчастникиПЭП.УчастникЗарегистрированВПЭП(ДанныеЗаявкиКОтправке.ЮридическоеЛицоПЭП) Тогда
		
		ДанныеУчастника = УчастникиПЭП.ДанныеЮридическогоЛица(ДанныеЗаявкиКОтправке.ЮридическоеЛицоПЭП);
		ДанныеУчастника.Вставить("ЮридическоеЛицо", ДанныеЗаявкиКОтправке.ЮридическоеЛицоПЭП);
		ДанныеУчастника.Вставить(
			"ИдентификаторУчастника",
			УчастникиПЭП.ИдентификаторУчастника(ДанныеЗаявкиКОтправке.ЮридическоеЛицоПЭП)
		);
		ТипУчастника = Новый Структура("ЭтоЮридическоеЛицо,ЭтоКонтактноеЛицо,ЭтоФизическоеЛицо", Истина, Ложь, Ложь);
		
		Попытка
			
			УчастникиПЭП.ОтправитьИлиОбновитьУчастника(ДанныеУчастника, ТипУчастника);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				Нстр("ru = 'Простая электронная подпись.Создание участников при отправке документа'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ЗаявкаНаПодпись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			ВызватьИсключение НСтр("ru = 'Не удалось создать участника'");
			
		КонецПопытки;
		
	КонецЕсли;
	
	ИдентификаторЮридическоеЛицоПЭП = УчастникиПЭП.ИдентификаторУчастника(ДанныеЗаявкиКОтправке.ЮридическоеЛицоПЭП);
	
	Если Не УчастникиПЭП.УчастникЗарегистрированВПЭП(ДанныеЗаявкиКОтправке.КонтактноеЛицоПЭП) Тогда
		
		ДанныеУчастника = УчастникиПЭП.ДанныеКонтактногоЛица(ДанныеЗаявкиКОтправке.КонтактноеЛицоПЭП);
		ДанныеУчастника.Вставить("КонтактноеЛицо", ДанныеЗаявкиКОтправке.КонтактноеЛицоПЭП);
		ДанныеУчастника.Вставить(
			"ИдентификаторУчастника",
			УчастникиПЭП.ИдентификаторУчастника(ДанныеЗаявкиКОтправке.КонтактноеЛицоПЭП)
		);
		
		ТипУчастника = Новый Структура("ЭтоЮридическоеЛицо,ЭтоКонтактноеЛицо,ЭтоФизическоеЛицо", Ложь, Истина, Ложь);
		
		Попытка
			
			УчастникиПЭП.ОтправитьИлиОбновитьУчастника(ДанныеУчастника, ТипУчастника);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				Нстр("ru = 'Простая электронная подпись.Создание участников при отправке документа'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ЗаявкаНаПодпись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось создать участника ""%1""'"), СокрЛП(ДанныеУчастника.Имя));
			
		КонецПопытки;
		
	КонецЕсли;
	
	ИдентификаторКонтактноеЛицоПЭП = УчастникиПЭП.ИдентификаторУчастника(ДанныеЗаявкиКОтправке.КонтактноеЛицоПЭП);
	
	Если Не УчастникиПЭП.УчастникЗарегистрированВПЭП(ДанныеЗаявкиКОтправке.ФизическоеЛицоПЭП) Тогда
		
		ДанныеУчастника = УчастникиПЭП.ДанныеФизическогоЛица(ДанныеЗаявкиКОтправке.ФизическоеЛицоПЭП);
		ДанныеУчастника.Вставить("ФизическоеЛицо", ДанныеЗаявкиКОтправке.ФизическоеЛицоПЭП);
		ДанныеУчастника.Вставить(
			"ИдентификаторУчастника",
			УчастникиПЭП.ИдентификаторУчастника(ДанныеЗаявкиКОтправке.ФизическоеЛицоПЭП)
		);
		ТипУчастника = Новый Структура("ЭтоЮридическоеЛицо,ЭтоКонтактноеЛицо,ЭтоФизическоеЛицо", Ложь, Ложь, Истина);
		
		Попытка
			
			УчастникиПЭП.ОтправитьИлиОбновитьУчастника(ДанныеУчастника, ТипУчастника);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				Нстр("ru = 'Простая электронная подпись.Создание участников при отправке документа'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ЗаявкаНаПодпись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			ВызватьИсключение НСтр("ru = 'Не удалось создать участника'");
			
		КонецПопытки;
		
	КонецЕсли;
	
	ИдентификаторФизическоеЛицоПЭП = УчастникиПЭП.ИдентификаторУчастника(ДанныеЗаявкиКОтправке.ФизическоеЛицоПЭП);
	
	Возврат Новый Структура(
		"ИдентификаторЮридическоеЛицоПЭП,ИдентификаторКонтактноеЛицоПЭП,ИдентификаторФизическоеЛицоПЭП",
		ИдентификаторЮридическоеЛицоПЭП,
		ИдентификаторКонтактноеЛицоПЭП,
		ИдентификаторФизическоеЛицоПЭП
	);
	
КонецФункции

Функция ИдентификаторФайла(ЗаявкаНаПодпись, ИмяПечатнойФормы)
	
	// Запрос для получения двоичных данных отдельно, чтоб зря не считывать из базы весь файл
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ФайлыЗаявокНаПодпись.ИдентификаторФайла
		|ИЗ
		|	РегистрСведений.ФайлыЗаявокНаПодпись КАК ФайлыЗаявокНаПодпись
		|ГДЕ
		|	ФайлыЗаявокНаПодпись.ЗаявкаНаПодпись = &ЗаявкаНаПодпись"
	);
	Запрос.УстановитьПараметр("ЗаявкаНаПодпись", ЗаявкаНаПодпись);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ВызватьИсключение НСтр("ru = 'Нет файла для отправки'");
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.ИдентификаторФайла) Тогда
		
		Возврат Выборка.ИдентификаторФайла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ФайлыЗаявокНаПодпись.ДанныеФайла
		|ИЗ
		|	РегистрСведений.ФайлыЗаявокНаПодпись КАК ФайлыЗаявокНаПодпись
		|ГДЕ
		|	ФайлыЗаявокНаПодпись.ЗаявкаНаПодпись = &ЗаявкаНаПодпись"
	);
	Запрос.УстановитьПараметр("ЗаявкаНаПодпись", ЗаявкаНаПодпись);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Попытка
		
		Результат = ОбщегоНазначенияПЭП
			.МодульИнтеграции()
			.НовыйФайл(ИмяПечатнойФормы, Выборка.ДанныеФайла.Получить());
		ОбновитьИнфорамациюОФайле(ЗаявкаНаПодпись, Результат);
		Возврат Результат.ИдентификаторФайла;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			Нстр("ru = 'Простая электронная подпись.Отправка нового файла'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ЗаявкаНаПодпись,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение НСтр("ru = 'Не удалось отправить файл'");
		
	КонецПопытки;
	
КонецФункции

Функция ИдентификаторДокумента(ЗаявкаНаПодпись)
	
	Возврат ЗаявкаНаПодпись.УникальныйИдентификатор();
	
КонецФункции

Процедура ОбновитьИнфорамациюОФайле(ЗаявкаНаПодпись, НовыеДанныеФайла, ЗачиститьДвоичныеДанныеФайла = Ложь)
	
	МенеджерЗаписи = РегистрыСведений.ФайлыЗаявокНаПодпись.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЗаявкаНаПодпись = ЗаявкаНаПодпись;
	МенеджерЗаписи.Прочитать();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НовыеДанныеФайла);
	
	Если ЗачиститьДвоичныеДанныеФайла Тогда
		
		МенеджерЗаписи.ДанныеФайла = Неопределено;
		
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти
