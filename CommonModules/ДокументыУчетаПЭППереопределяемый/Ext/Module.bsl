
#Область ПрограммныйИнтерфейс

// Перед добавлением команд на форму печати документов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объект формы.
//  ПараметрыНастройкиФормы - см. Участники.НовыеПараметрыПриСозданииНаСервере_ФормаЭлемента.
//  КомандыКДобавлению - см. ОбщегоНазначения.КоллекцияКоманд
// 
// Возвращаемое значение:
//  Структура - описание полей структуры:
//  * СтандартнаяОбработка - Булево - признак стандартной обработки.
//  * КоллекцияКоманд - см. ОбщегоНазначения.КоллекцияКоманд
Функция ПередДобавлениемКомандНаФормуПечатиДокумента(Форма, ПараметрыНастройкиФормы, Знач КомандыКДобавлению) Экспорт
	
	Результат = Новый Структура("СтандартнаяОбработка,КоллекцияКоманд", Истина, КомандыКДобавлению);
	
	Если Форма.ОбъектыПечати.Количество() > 1 Тогда
		
		Результат.СтандартнаяОбработка = Ложь;
		Результат.КоллекцияКоманд.Очистить();
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		
		ФизическоеЛицо = ДокументыУчетаПЭП
			.УчастникиДокументаУчета(Форма.ОбъектыПечати[0].Значение)
			.ФизическоеЛицоПЭП;
		
	Исключение
		
		Результат.СтандартнаяОбработка = Ложь;
		Результат.КоллекцияКоманд.Очистить();
		Возврат Результат;
		
	КонецПопытки;
	
	Если Не ФизическоеЛицо.ПодписаноСогласиеНаРаботуСПЭП Тогда
		
		Результат.СтандартнаяОбработка = Ложь;
		Результат.КоллекцияКоманд.Очистить();
		
		// Нужно вывести гиперссылку для перехода к установке разрешения по работе с ПЭП
		ГруппаДляЭлементов = Форма.Элементы.Добавить("ГруппаПодсказкаОбОтсутствииРазрешенияПоРаботеСПЭП", Тип("ГруппаФормы"));
		ГруппаДляЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДляЭлементов.ОтображатьЗаголовок = Ложь;
		ГруппаДляЭлементов.РастягиватьПоГоризонтали = Истина;
		Форма.Элементы.Переместить(ГруппаДляЭлементов, ГруппаДляЭлементов.Родитель, Форма.Элементы.ГруппаДополнительнаяИнформация);
		
		НовыйЭлементКартинка = Форма.Элементы.Добавить("КартинкаОбОтсутствииРазрешенияПоРаботеСПЭП", Тип("ДекорацияФормы"),
			ГруппаДляЭлементов);
		НовыйЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлементКартинка.Картинка = БиблиотекаКартинок.ЛоготипПЭП;
		
		НовыйЭлементНадпись = Форма.Элементы.Добавить("ПодсказкаОбОтсутствииРазрешенияПоРаботеСПЭП", Тип("ДекорацияФормы"),
			ГруппаДляЭлементов);
		НовыйЭлементНадпись.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлементНадпись.РастягиватьПоГоризонтали = Истина;
		НовыйЭлементНадпись.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'ПЭП: не подписано первичное соглашение'"),
			,
			,
			,
			ПолучитьНавигационнуюСсылку(ФизическоеЛицо)
		);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработчик вызываемый перед созданием заявки на подписание.
// Предназначен для переопределения или дополнения процесса создания заявки.
// Стандартная обработка расчитана на создание из печатной формы документов БСП версии 3.1.8
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма откуда вызывается команда;
//  СтандартнаяОбработка - Булево - Признак стандартной обработки;
// 
// Возвращаемое значение:
//  Структура -  Перед подготовкой данных для заявки на подпись по печатной форме:
// * АдресФайлаВоВременномХранилище - Строка - 
// * ДокументУчета - ДокументСсылка,Неопределено - 
// * ИмяПечатнойФормы - Строка - 
Функция ПередПодготовкойДанныхДляЗаявкиНаПодписьПоПечатнойФорме(Форма, СтандартнаяОбработка) Экспорт
	
	Возврат Новый Структура(
		"АдресФайлаВоВременномХранилище,ДокументУчета,ИмяПечатнойФормы",
		"",
		Неопределено,
		""
	);
	
КонецФункции

// См. ДокументыУчета.УчастникиДокументаУчета
Функция УчастникиДокументаУчета(ДокументУчета) Экспорт
	
	Результат = Новый Структура(
		"ЮридическоеЛицоПЭП,КонтактноеЛицоПЭП,ФизическоеЛицоПЭП",
		Неопределено,
		Неопределено,
		Неопределено
	);
	
	Если ТипЗнч(ДокументУчета) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СчетНаОплату.Организация КАК ЮридическоеЛицоПЭП,
			|	СчетНаОплату.Контрагент КАК ФизическоеЛицоПЭП
			|ИЗ
			|	Документ.СчетНаОплату КАК СчетНаОплату
			|ГДЕ
			|	СчетНаОплату.Ссылка = &ДокументУчета"
		);
		Запрос.УстановитьПараметр("ДокументУчета", ДокументУчета);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса.Выгрузить()[0]);
			Результат.КонтактноеЛицоПЭП = ОбщегоНазначенияПЭП.ТекущийСотрудник();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументУчета) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЗаказНаряд.Организация КАК ЮридическоеЛицоПЭП,
			|	ЗаказНаряд.Менеджер КАК КонтактноеЛицоПЭП,
			|	ЗаказНаряд.Контрагент КАК ФизическоеЛицоПЭП
			|ИЗ
			|	Документ.ЗаказНаряд КАК ЗаказНаряд
			|ГДЕ
			|	ЗаказНаряд.Ссылка = &ДокументУчета"
		);
		Запрос.УстановитьПараметр("ДокументУчета", ДокументУчета);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса.Выгрузить()[0]);
			
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Переданный документ не предназначен для подписания простой электронной подписью'");
		
	КонецЕсли;
	
	// Указаный в юр. лице контакт имеет более высокий приоритет чем полученный из документа
	Если ЗначениеЗаполнено(Результат.ЮридическоеЛицоПЭП) Тогда
		
		КонтактноеЛицоПЭП = УчастникиПЭП.КонтакноеЛицоПоУмолчанию(Результат.ЮридическоеЛицоПЭП);
		
		Если ЗначениеЗаполнено(КонтактноеЛицоПЭП) Тогда
			
			Результат.КонтактноеЛицоПЭП = КонтактноеЛицоПЭП;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Точка расширения для переопределения запроса документа учета.
// 
// Параметры:
//  ИсходныйЗапрос - Строка - Исходный запрос
//  ПараметрыНастройкиФормы - см. ДокументыУчета.НовыеПараметрыПриСозданииНаСервере_ФормаСписка
// 
// Возвращаемое значение:
//  Строка -  Запрос динамического списка
Функция ЗапросДинамическогоСписка(Знач ИсходныйЗапрос, ПараметрыНастройкиФормы) Экспорт
	
	Если
		ТипЗнч(ПараметрыНастройкиФормы.ПустаяСсылка) = Тип("ДокументСсылка.СчетНаОплату")
		Или ТипЗнч(ПараметрыНастройкиФормы.ПустаяСсылка) = Тип("ДокументСсылка.ЗаказНаряд")
	Тогда
		
		ЗаменаВыбраногоПоля = "0 КАК СостояниеОригиналПолучен,
		|Неопределено КАК ЗаявкиНаПодписьПредставление";
		Результат = СтрЗаменить(ИсходныйЗапрос, "0 КАК СостояниеОригиналПолучен", ЗаменаВыбраногоПоля);
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// При обновлении запроса динамического списка.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - объект формы;
//  ПараметрыНастройкиФормы - см. ДокументыУчета.НовыеПараметрыПриСозданииНаСервере_ФормаСписка
Процедура ПриОбновленииЗапросаДинамическогоСписка(Форма, ПараметрыНастройкиФормы) Экспорт
	
	Поле = Форма.Список.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.ПутьКДанным = "ЗаявкиНаПодписьПредставление";
	Поле.Поле = "ЗаявкиНаПодписьПредставление";
	Поле.Заголовок = "Заявки на подпись ПЭП";
	
	НовыйЭлемент = Форма.Элементы.Добавить("ЗаявкиНаПодписьПредставление", Тип("ПолеФормы"),
		Форма.Элементы.Список);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.ЛоготипПЭП;
	НовыйЭлемент.ПутьКДанным = "Список.ЗаявкиНаПодписьПредставление";
	НовыйЭлемент.ГиперссылкаЯчейки = Истина;
	
КонецПроцедуры

#КонецОбласти
