// Общий модуль "Технологическая платформа (клиент)"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СИСТЕМЫ

//// Обработчик перед началом работы системы
////
//// Параметры:
////  Параметры	 - Структура - Дополнительные параметры.
////
//Процедура ПередНачаломРаботыСистемы(Параметры) Экспорт
//	
//	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
//	МенеджерОборудованияКлиент.ПередНачаломРаботыСистемы();
//	#КонецЕсли

//КонецПроцедуры // ПередНачаломРаботыСистемы()

//// Обработчик при начале работы системы.
////
//// Параметры:
////  Параметры	 - Структура - Дополнительные параметры.
////
//Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
//	
//	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
//		// ПодключаемоеОборудование
//		МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
//		// Конец ПодключаемоеОборудование
//	#КонецЕсли
//	
//КонецПроцедуры // ПриНачалеРаботыСистемы()

//// Доопределяет список предупреждений пользователю перед завершением работы системы.
////
//// Параметры:
////  Отказ - Булево - Признак отказа от выхода из программы. Если в теле процедуры-обработчика установить
////                   данному параметру значение Истина, то работа с программой не будет завершена.
////  Предупреждения - Массив - в массив можно добавить элементы типа Структура,
////                            свойства которой см. в СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершенииРаботы.
////
//Процедура ПередЗавершениемРаботыСистемы(Отказ, Предупреждения) Экспорт
//	
//	// ПодключаемоеОборудование
//	Если НЕ Отказ Тогда
//		#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
//			МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();
//		#КонецЕсли
//	КонецЕсли;
//	// Конец ПодключаемоеОборудование
//	
//КонецПроцедуры // ПередЗавершениемРаботыСистемы()

//// Обработчик при завершении работы системы.
////
//Процедура ПриЗавершенииРаботыСистемы() Экспорт
//	
//	// СтандартныеПодсистемы.БазоваяФункциональность
//	ОбработчикиСобытия = ОбщегоНазначенияКлиент.ОбработчикиСлужебногоСобытия("СтандартныеПодсистемы.БазоваяФункциональность\ПриЗавершенииРаботыСистемы");
//	
//	Для каждого Обработчик Из ОбработчикиСобытия Цикл
//		Обработчик.Модуль.ПриЗавершенииРаботыСистемы();
//	КонецЦикла;

//КонецПроцедуры // ПриЗавершенииРаботыСистемы()

//// Обработчик обработки внешнего события
////
//// Параметры:
////  Источник - Строка - Источник события.
////  Событие	 - Строка - Наименование события.
////  Данные	 - Строка - Данные для события.
////
//Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
//	
//	// Зарезервировано
//	
//КонецПроцедуры // ОбработкаВнешнегоСобытия()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ МЕХАНИЗМА ПЕРЕНОСА ДАННЫХ

//// Проверка необходимости переноса данных из предыдущей редакции.
////
//// Параметры:
////  Параметры	 - Структура - Дополнительные параметры.
////
//Процедура ПроверитьНеобходимостьПереносаДанныхИзПредыдущейРедакции(Параметры) Экспорт
//	
//	Если НЕ ТехнологическаяПлатформаВызовСервера.РежимПереносаДанныхИзПредыдущейРедакции() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ИнтерактивнаяОбработкаПереносаДанныхИзПредыдущейРедакции", ЭтотОбъект);
//	
//КонецПроцедуры // ПроверитьНеобходимостьПереносаДанныхИзПредыдущейРедакции()

//// Интерактивная обработка переноса данных из предыдущей редакции.
////
//// Параметры:
////  Параметры	 - Структура    - Дополнительные параметры.
////  Неопределен	 - Неопределено - Параметр вызова процедуры.
////
//Процедура ИнтерактивнаяОбработкаПереносаДанныхИзПредыдущейРедакции(Параметры, Неопределен) Экспорт
//	
//	ОткрытьФорму("Обработка.ПереносДанныхИзПредыдущейРедакции.Форма",,,,,, Новый ОписаниеОповещения("ПослеЗакрытияФормыПереносаДанныхИзПредыдущейРедакции", ЭтотОбъект, Параметры), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
//	
//КонецПроцедуры // ИнтерактивнаяОбработкаПереносаДанныхИзПредыдущейРедакции()

//// Только для внутреннего использования. Продолжение процедуры ПроверитьЛегальностьПолученияОбновленияПриЗапуске.
////
//// Параметры:
////  Результат - Булево    - Флаг результата.
////  Параметры - Структура - Структура параметров.
////
//Процедура ПослеЗакрытияФормыПереносаДанныхИзПредыдущейРедакции(Результат, Параметры) Экспорт
//	
//	ПрекратитьРаботуСистемы(Результат=ИСТИНА);
//	
//КонецПроцедуры // ПослеЗакрытияФормыПереносаДанныхИзПредыдущейРедакции()

#КонецОбласти