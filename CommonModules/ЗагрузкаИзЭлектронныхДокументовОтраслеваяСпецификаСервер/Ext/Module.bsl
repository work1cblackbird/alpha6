
#Область ПрограммныйИнтерфейс

// Заполняет настройки колонок по умолчанию для табличной части доп. параметров справочника настроек.
//
// Параметры:
//  ТаблицаДополнительныхПараметров	 - ТаблицаЗначений	 - дополнительные параметры.
//  НастройкиПараметров				 - Соответствие		 - Соответствие данных для заполнения значений колонки "НомерКолонки".
//
Процедура ЗаполнитьНастройкиКолонокТабличнойЧастиДопПараметровСправочникаНастроек(НастройкиПараметров=Неопределено, ТаблицаДополнительныхПараметров = Неопределено) Экспорт
	
	Если ТаблицаДополнительныхПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДополнительныхПараметров.Очистить();
	
	ЗагружаемыйРеквизит                     = ТаблицаДополнительныхПараметров.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита        = НСтр("ru = 'Номер серии производителя'");
	ЗагружаемыйРеквизит                     = ТаблицаДополнительныхПараметров.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита        = НСтр("ru = 'Срок годности'");
	ЗагружаемыйРеквизит                     = ТаблицаДополнительныхПараметров.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита        = "Производитель";
	ЗагружаемыйРеквизит                     = ТаблицаДополнительныхПараметров.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита        = "Сертификат";
	ЗагружаемыйРеквизит                     = ТаблицаДополнительныхПараметров.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита        = "ШтрихКод";
	ЗагружаемыйРеквизит                     = ТаблицаДополнительныхПараметров.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита        = "Наименование";
	ЗагружаемыйРеквизит                     = ТаблицаДополнительныхПараметров.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита        = НСтр("ru = 'Наименование товара'");
	ЗагружаемыйРеквизит                     = ТаблицаДополнительныхПараметров.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита        = "Цена";
	ЗагружаемыйРеквизит                     = ТаблицаДополнительныхПараметров.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита        = НСтр("ru = 'Страна происхождения'");
	
	Если НастройкиПараметров <> Неопределено Тогда
		Для Каждого Строка Из ТаблицаДополнительныхПараметров Цикл
			Строка.НомерКолонки  = НастройкиПараметров[Строка.ИмяРеквизита];
			Строка.РежимЗагрузки = НастройкиПараметров[Строка.ИмяРеквизита + " РежимЗагрузки"];
			Строка.Выражение     = НастройкиПараметров[Строка.ИмяРеквизита + " Выражение"];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует серию в регистре сведений.
//
// Параметры:
//  ШтрихКод					 - Строка							 			 - Строка штрихкода.
//  Номенклатура				 - СправочникСсылка.Номенклатура				 - номенклатура для которой формируем штрихкод.
//  ХарактеристикаНоменклатуры	 - СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика для которой
//																					формируем штрихкода.
//  ЕдиницаИзмерения			 - СправочникСсылка.ЕдиницыИзмерения			 - единица измерения штрихкода.
//
Процедура ЗарегистрироватьШтрихКод(ШтрихКод,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения) Экспорт
	
	ТекЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	ТекЗапись.Объект                     = Номенклатура;
	ТекЗапись.ХарактеристикаНоменклатуры             = ХарактеристикаНоменклатуры;
	
	Если НЕ ЗначениеЗаполнено(ШтрихКод) Тогда
		ТекЗапись.Штрихкод               = ШтрихкодированиеВызовСервера.СформироватьШтрихкодПроизвольногоОбъекта();
	Иначе
		ТекЗапись.Штрихкод = ШтрихКод;
	КонецЕсли;
	
	Попытка
		ТекЗапись.Записать();
	Исключение
		ТекстОшибки = НСтр("ru= 'Ошибка при записи штрихкода: %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИнформацияОбОшибке().Описание);
		ОбщегоНазначения.СообщитьПользователю (ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Добавление в описание ошибок строку о загрузке справочника.
//
// Параметры:
//  СтруктураПараметров		 - Структура - Структура с тестом ошибок.
//  ТекстВопросаИсточника	 - Строка	 - Представление вопроса.
//  Загружено				 - Число	 - Количество загруженных.
//  КоличествоЭлементов		 - Число	 - Общее число элементов.
//  Сообщать				 - Булево	 - Признак вывода сообщения.
//
Процедура ДобавитьВОписаниеОшибокСтрокуОЗагрузкеСправочника(СтруктураПараметров, ТекстВопросаИсточника, Загружено, КоличествоЭлементов, Сообщать = Истина) Экспорт
	
	СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + НСтр("ru = 'Выполняется загрузка'") 
			+ ТекстВопросаИсточника + Символы.ПС;
	СтруктураПараметров.ОписаниеОшибок = СтруктураПараметров.ОписаниеОшибок + "" +Загружено +" " + "из" + " "
			+ КоличествоЭлементов + " " + "элементов." + Символы.ПС;
	Если Сообщать Тогда
		ТекстОшибок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"),СтруктураПараметров.ОписаниеОшибок);
		ОбщегоНазначения.СообщитьПользователю(СтруктураПараметров.ОписаниеОшибок);
	КонецЕсли;
	
КонецПроцедуры

// Получение параметров по версии обработки для настроек справочника.
//
// Параметры:
//  ВерсияОбработки	 - Строка			 - Версия обработки.
//  Настройки		 - ТабличныйДокумент - Настройки справочника.
// 
// Возвращаемое значение:
//  Структура - Результат функции.
//
Функция ПолучитьПараметрыПоВерсииОбработкиДляСправочникаНастроек(ВерсияОбработки, Настройки) Экспорт
		
	ВозвращаемыеПараметры = Новый Структура;
	// Строка с которой начинается таблица реквизитов.
	ВозвращаемыеПараметры.Вставить("Табуляция",?(ВерсияОбработки >= "1.5",Настройки.Область("R16C5").Текст,Неопределено));
	
	Если ВерсияОбработки = "1.7" Тогда
		ТекущаяСтрока = 40;
	ИначеЕсли ВерсияОбработки = "1.6" Тогда
		ТекущаяСтрока = 40;
	ИначеЕсли ВерсияОбработки = "1.5" Тогда
		ТекущаяСтрока = 19;
	ИначеЕсли ВерсияОбработки = "1.4" Тогда
		ТекущаяСтрока = 18;
	Иначе
		ВерсияОбработки = "1.1";
		ТекущаяСтрока = 9;
	КонецЕсли;
	
	ВозвращаемыеПараметры.Вставить("ТекущаяСтрока", 								ТекущаяСтрока);
	ВозвращаемыеПараметры.Вставить("НеСоздаватьНовыхЭлементов", 					
			НЕ ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R3","R4") + "C5").Текст));
	ВозвращаемыеПараметры.Вставить("НеОбновлятьСуществующиеЭлементы",				
			НЕ ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R3","R5") + "C5").Текст));
	ВозвращаемыеПараметры.Вставить("флПоискПоПрайсуПоставщика",						
			НЕ ПустаяСтрока(Настройки.Область("R15C5").Текст));
	ВозвращаемыеПараметры.Вставить("РучнаяНумерацияКолонокТабличногоДокумента",		
			НЕ ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R4","R7") + "C5").Текст));
	
	фИспользоватьВнешнийМодульПреобразованияФайла     = Ложь;
	Если ВерсияОбработки >= "1.5" Тогда
		фИспользоватьВнешнийМодульПреобразованияФайла = НЕ ПустаяСтрока(Настройки.Область("R17C5").Текст);
	КонецЕсли;
		
	ИдентификаторОбработкиЗагрузкиИзXML = "";
	Если ВерсияОбработки >= "1.5" Тогда
		ИдентификаторОбработкиЗагрузкиИзXML = Настройки.Область("R18C5").Текст;
	КонецЕсли;
	
	ВозвращаемыеПараметры.Вставить("ИспользоватьВнешнийМодульПреобразованияФайла", 	фИспользоватьВнешнийМодульПреобразованияФайла);
	ВозвращаемыеПараметры.Вставить("ИдентификаторОбработкиЗагрузкиИзXML", 			ИдентификаторОбработкиЗагрузкиИзXML);
	
	ВозвращаемыеПараметры.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",			
			ЗагрузкаИзЭлектронныхДокументовВызовСервера. ПривестиКЧислу(Настройки.Область(?(ВерсияОбработки = "1.1","R5","R8") + "C5").Текст));
	ВозвращаемыеПараметры.Вставить("ДействиеСЗагружаемымФайлом",					Настройки.Область("R9C5").Текст);
	ВозвращаемыеПараметры.Вставить("КаталогАрхиваЗагруженныхФайлов", 				Настройки.Область("R10C5").Текст);
	ВозвращаемыеПараметры.Вставить("Производитель",									Настройки.Область("R11C5").Текст);
	ВозвращаемыеПараметры.Вставить("ШтрихКод",										Настройки.Область("R12C5").Текст);
		
	// Кодировка появилась с версии 1.3, пустое значение означает "Авто".
	Если ВерсияОбработки < "1.3"  Тогда
		фКодировкаЗагрузки = ""; 
	Иначе
		фКодировкаЗагрузки = Настройки.Область("R13C5").Текст; 
	КонецЕсли;
	
	Если ВерсияОбработки < "1.4"  Тогда
		фИмяТаблицы = ""; 
	Иначе
		фИмяТаблицы = Настройки.Область("R14C5").Текст; 
	КонецЕсли;
	ВозвращаемыеПараметры.Вставить("Кодировка",		фКодировкаЗагрузки);
	ВозвращаемыеПараметры.Вставить("ИмяТаблицы",			фИмяТаблицы);
	
	ВозвращаемыеПараметры.Вставить("ЗагружатьДополнительныеРеквизитыИСведения",	
		?(ВерсияОбработки>="1.7", НЕ ПустаяСтрока(Настройки.Область("R19C5").Текст), Ложь));
	ВозвращаемыеПараметры.Вставить("ДополнительныеРеквизитыИСведенияТолькоОбщие",	
		?(ВерсияОбработки>="1.7", НЕ ПустаяСтрока(Настройки.Область("R20C5").Текст), Ложь));
    ВозвращаемыйВидНоменклатуры = ?(ВерсияОбработки>="1.7", Настройки.Область("R21C5").Текст, "");
	Попытка
		ВидНоменклатурыЗначение = ЗначениеИзСтрокиВнутр(ВозвращаемыйВидНоменклатуры);
	Исключение
		ВидНоменклатурыЗначение = Неопределено;
	КонецПопытки;
	ВозвращаемыеПараметры.Вставить("ДополнительныеРеквизитыПоТипуНоменклатурыИзНастроек",	ВидНоменклатурыЗначение);
	Возврат ВозвращаемыеПараметры;
	
КонецФункции

// Получение параметров по версии обработки.
//
// Параметры:
//  ВерсияОбработки	 - Строка			 - Версия обработки.
//  Настройки		 - ТабличныйДокумент - Настройки обработки.
// 
// Возвращаемое значение:
//  Структура - Результат функции.
//
Функция ПолучитьПараметрыПоВерсииОбработки(ВерсияОбработки, Настройки) Экспорт
	
	ВозвращаемыеПараметры = Новый Структура;
	Если ВерсияОбработки	= "1.6" ИЛИ ВерсияОбработки = "1.7" Тогда
		ТекущаяСтрока = 40; 
	ИначеЕсли ВерсияОбработки = "1.5" Тогда 
		ТекущаяСтрока = 19;
	ИначеЕсли ВерсияОбработки = "1.4" Тогда
		ТекущаяСтрока = 18;
	ИначеЕсли ВерсияОбработки = "1.2" Тогда
		ТекущаяСтрока = 11;
	Иначе
		ВерсияОбработки = "1.1";
		ТекущаяСтрока = 9;
	КонецЕсли;
	ВозвращаемыеПараметры.Вставить("ТекущаяСтрока", 							ТекущаяСтрока);
	ВозвращаемыеПараметры.Вставить("НеСоздаватьНовыхЭлементов",					
		НЕ ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R3","R4") + "C5").Текст));
	ВозвращаемыеПараметры.Вставить("НеОбновлятьСуществующиеЭлементы",			
		НЕ ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R3","R5") + "C5").Текст));
	ВозвращаемыеПараметры.Вставить("ЗамещатьСуществующиеЗаписи",				
		?(ВерсияОбработки = "1.1",Ложь, НЕ ПустаяСтрока(Настройки.Область("R6C5").Текст)));
	ВозвращаемыеПараметры.Вставить("РучнаяНумерацияКолонокТабличногоДокумента",	
		НЕ ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R4","R7") + "C5").Текст));
	ВозвращаемыеПараметры.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",		
		ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПривестиКЧислу(Настройки.Область(?(ВерсияОбработки = "1.1","R5","R8") + "C5").Текст));
	ВозвращаемыеПараметры.Вставить("флПоискПоПрайсуПоставщика",					
		НЕ ПустаяСтрока(Настройки.Область("R15C5").Текст));
	ВозвращаемыеПараметры.Вставить("ДействиеСЗагружаемымФайлом", 				Настройки.Область("R9C5").Текст);
	ВозвращаемыеПараметры.Вставить("КаталогАрхиваЗагруженныхФайлов",			Настройки.Область("R10C5").Текст);
	ВозвращаемыеПараметры.Вставить("Табуляция",									
		?(ВерсияОбработки >= "1.5",	Настройки.Область("R16C5").Текст,Неопределено));
	// Кодировка появилась с версии 1.3, пустое значение означает "Авто".
	Если ВерсияОбработки < "1.3" Тогда
		Кодировка = ""; 
	Иначе
		Кодировка = Настройки.Область("R13C5").Текст;
	КонецЕсли;
	ВозвращаемыеПараметры.Вставить("Кодировка",									Кодировка);
	// Имя таблицы появилось с версии 1.4, пустое значение означает "Авто".
	Если ВерсияОбработки < "1.4"  Тогда
		ИмяТаблицы = ""; 
	Иначе
		ИмяТаблицы = Настройки.Область("R14C5").Текст; 
	КонецЕсли;
	ВозвращаемыеПараметры.Вставить("ИмяТаблицы",								ИмяТаблицы);
	
	ИспользоватьВнешнийМодульПреобразованияФайла = Ложь;
	ОбработкаПреобразования = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка();
	Если ВерсияОбработки >= "1.6" Тогда
		ИспользоватьВнешнийМодульПреобразованияФайла = НЕ ПустаяСтрока(Настройки.Область("R17C5").Текст);
		ИдентификаторОбработкиЗагрузки = Настройки.Область("R18C5").Текст; 
		Попытка
			ОбработкаПреобразования = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторОбработкиЗагрузки));
		Исключение
			ОбработкаПреобразования = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка();
		КонецПопытки;
	Иначе
		ИспользоватьВнешнийМодульПреобразованияФайла = Ложь;
	КонецЕсли;
	ВозвращаемыеПараметры.Вставить("ИспользоватьВнешнийМодульПреобразованияФайла", ИспользоватьВнешнийМодульПреобразованияФайла);
	ВозвращаемыеПараметры.Вставить("ОбработкаПреобразования", ОбработкаПреобразования);
	
	ВозвращаемыеПараметры.Вставить("ЗагружатьДополнительныеРеквизитыИСведения",	?(ВерсияОбработки>="1.7", 
		НЕ ПустаяСтрока(Настройки.Область("R19C5").Текст), Ложь));
	ВозвращаемыеПараметры.Вставить("ДополнительныеРеквизитыИСведенияТолькоОбщие",	?(ВерсияОбработки>="1.7", 
		НЕ ПустаяСтрока(Настройки.Область("R20C5").Текст), Ложь));
    ВозвращаемыйВидНоменклатуры = ?(ВерсияОбработки>="1.7", Настройки.Область("R21C5").Текст, "");
	Попытка
		ВидНоменклатурыЗначение = ЗначениеИзСтрокиВнутр(ВозвращаемыйВидНоменклатуры);
	Исключение
		ВидНоменклатурыЗначение = Неопределено;
	КонецПопытки;
	ВозвращаемыеПараметры.Вставить("ДополнительныеРеквизитыПоТипуНоменклатурыИзНастроек",	ВидНоменклатурыЗначение);
	
	Возврат ВозвращаемыеПараметры;	

КонецФункции

// Установка текущей группы справочника.
//
// Параметры:
//  Параметры	 - Структура	 - Параметры поиска.
//  Список		 - ТаблицаФормы	 - Список поиска.
//
Процедура УстановитьТекущуюГруппуСправочника(Параметры, Список) Экспорт
	Если Параметры.ПараметрОтборПоВариантуИспользования = Перечисления.ВариантыИспользованияНастройки.ВыгрузкаДанных Тогда
		Список.ТекущийРодитель = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ГруппаНастроекВыгрузки;
	ИначеЕсли Параметры.ПараметрОтборПоВариантуИспользования = 
			Перечисления.ВариантыИспользованияНастройки.ЗагрузкаДанных Тогда
			
		Список.ТекущийРодитель = Справочники.НастройкиЗагрузкиДанныхИзТабличногоДокумента.ГруппаНастроекЗагрузки;
	КонецЕсли;
КонецПроцедуры

// Установка надписи текст выражения
//
// Параметры:
//  Параметры				 - Структура - Параметры выражения.
//  НадписьТекстВыражения	 - Строка	 - Представление надписи.
//
Процедура УстановитьНадписьТекстВыражения(Параметры, НадписьТекстВыражения) Экспорт
	
	Если Параметры.Свойство("ОткрытьДляРедактированияДопРеквизитов") Тогда
		НадписьТекстВыражения = Символы.ПС
			+ НСтр("ru = 'В тексте выражения можно использовать следующие предопределенные параметры:
				|   Результат      - результат вычисления (на входе пустая строка)
				|   ТекстыЯчеек    - массив текстов ячеек строки
				|   СсылкаИсточника - документ для загрузки данных
				|Встроенные функции, функции общих модулей.'");
	Иначе
		НадписьТекстВыражения = Символы.ПС
			+ НСтр("ru = 'В тексте выражения можно использовать следующие предопределенные параметры:
				|   Результат      - результат вычисления (на входе - значение по умолчанию)
				|   ТекстЯчейки    - текст текущей ячейки
				|   ТекстыЯчеек    - массив текстов ячеек строки
				|   ТекущиеДанные  - структура загруженных значений
				|   флКонтрольЗаполнения - флаг запрета создания новых элементов
				|   ДокументОбъект - документ для загрузки данных
				|Встроенные функции, функции общих модулей.'");
	КонецЕсли;
	
КонецПроцедуры

// Проверка наличия номера колонки.
//
// Параметры:
//  СтруктураПараметров							 - Структура - Дополнительные параметры.
//  НомерКолонкиНаименованиеТабличногоДокумента	 - Число	 - Номер колонкию
// 
// Возвращаемое значение:
//  Булево - Признак того что колонка найдена (Истина) или нет (Ложь).
//
Функция НомерКолонкиНаименованияНеНайден(СтруктураПараметров, НомерКолонкиНаименованиеТабличногоДокумента) Экспорт
	НомерКолонкиНеНайден = Ложь;
	
	Если НомерКолонкиНаименованиеТабличногоДокумента = 0 Тогда
		НомерКолонкиНеНайден = Истина;
	КонецЕсли;
	
	Возврат НомерКолонкиНеНайден;
	
КонецФункции

// Получение структуры отраслевых доп. параметров
//
// Параметры:
//  СтруктураПараметров - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Структура - Структура отраслевых доп. параметров
//
Функция ПолучитьСтруктуруОтраслевыхДопПараметров(СтруктураПараметров) Экспорт
	
	СтруктураДопПараметров = Новый Структура();
	НомерКолонкиЦена = 0;
	Попытка
		СтрокаНастройки = Неопределено;
		ОтборСтрок = Новый Структура("ИмяРеквизита","Цена");
		Строки = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(ОтборСтрок);
		Если Строки.Количество() > 0 Тогда
			НомерКолонкиЦена = Строки[0].НомерКолонки;
		КонецЕсли;
	Исключение
		НомерКолонкиЦена = 0;
	КонецПопытки;
	СтруктураДопПараметров.Вставить("НомерКолонкиЦена", НомерКолонкиЦена);

	СтрСтавкаНДС = СтруктураПараметров.ТаблицаЗагружаемыхРеквизитов.Найти("СтавкаНДС","ИмяРеквизита");
	Если НЕ СтрСтавкаНДС = Неопределено И СтрСтавкаНДС.Пометка Тогда
		НомерКолонкиСтавкаНДС = СтрСтавкаНДС.НомерКолонки;
	Иначе
		НомерКолонкиСтавкаНДС = 0;
	КонецЕсли;
	СтруктураДопПараметров.Вставить("НомерКолонкиСтавкаНДС", НомерКолонкиСтавкаНДС);
	СтруктураДопПараметров.Вставить("НомерКолонкиСтавкаНДС", НомерКолонкиСтавкаНДС);
	Возврат СтруктураДопПараметров;
	
КонецФункции

// Сформировать наименование для таблицы соответствия.
//
// Параметры:
//  СтруктураПараметров                         - Структура         - Дополнительные параметры.
//  ТабличныйДокумент                           - ТабличныйДокумент - Табличный документ таблицы.
//  ТекстыЯчеек                                 - Строка            - Текст ячейки.
//  НомерКолонкиНаименованиеТабличногоДокумента - Число             - Номер колонки.
//  НомерСтроки                                 - Число             - Номер строки.
// 
// Возвращаемое значение:
//  Строка - Наименование для таблицы.
//
Функция ПолучитьНаименованиеДляТаблицыСоответствия(СтруктураПараметров,ТабличныйДокумент, ТекстыЯчеек, НомерКолонкиНаименованиеТабличногоДокумента, НомерСтроки) Экспорт
	
	Возврат СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"
				+ Формат(НомерКолонкиНаименованиеТабличногоДокумента,"ЧГ=")).Текст);
	
КонецФункции

// Заполнение строки таблицы соответствия по доп. параметрам.
//
// Параметры:
//  СтруктураПараметров                         - Структура         - Дополнительные параметры.
//  НоваяСтрокаТаблСоответствия                 - Структура         - Новая строка в таблице.
//  СтруктураОтраслевыхДополнительныхПараметров - Структура         - Отраслевые доп. параметры.
//  ТабличныйДокумент                           - ТабличныйДокумент - Табличный документ таблицы.
//  НомерСтроки                                 - Число             - Номер строки.
//  ТекстыЯчеек                                 - Строка            - Текст ячейки.
//
Процедура ЗаполнитьСтрокуТаблицыСоответствияПоДопПараметрам(СтруктураПараметров, НоваяСтрокаТаблСоответствия,СтруктураОтраслевыхДополнительныхПараметров, ТабличныйДокумент, НомерСтроки, ТекстыЯчеек) Экспорт
	
	Если СтруктураОтраслевыхДополнительныхПараметров.Свойство("НомерКолонкиЦена") 
		И СтруктураОтраслевыхДополнительныхПараметров.НомерКолонкиЦена>0 Тогда
		
		Попытка
			НоваяСтрокаТаблСоответствия.Цена = Число(СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"
				+ Формат(СтруктураОтраслевыхДополнительныхПараметров.НомерКолонкиЦена,"ЧГ=")).Текст));
		Исключение
			НоваяСтрокаТаблСоответствия.Цена = 0; //Цена не найдена
		КонецПопытки;
	КонецЕсли;
	
	// Заполняем ставку НДС.
	Если СтруктураОтраслевыхДополнительныхПараметров.Свойство("НомерКолонкиСтавкаНДС") 
		И СтруктураОтраслевыхДополнительныхПараметров.НомерКолонкиСтавкаНДС>0 Тогда
		
		Попытка
			СтавкаНДС = Число(СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"
				+ Формат(СтруктураОтраслевыхДополнительныхПараметров.НомерКолонкиСтавкаНДС,"ЧГ=")).Текст));
		Исключение
			СтавкаНДС = "";
		КонецПопытки;
		
		НоваяСтрокаТаблСоответствия.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", СтавкаНДС);
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрокаТаблСоответствия.СтавкаНДС) 
			И ЗначениеЗаполнено(НоваяСтрокаТаблСоответствия.Номенклатура) Тогда
			
			НоваяСтрокаТаблСоответствия.СтавкаНДС = НоваяСтрокаТаблСоответствия.Номенклатура.СтавкаНДС;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Поиск справочника по штрих-коду.
//
// Параметры:
//  СтруктураПараметров               - Структура       - Дополнительные параметры.
//  ТаблицаНоменклатурыИХарактеристик - ТаблицаЗначений - Таблица значений номенклатуры с характеристиками.
//  НайденныеЗначения                 - Массив          - Список найденных объектов.
//  ТЧДокумента                       - ТаблицаЗначений - Табличная часть документа.
//  ТекстыЯчеек                       - Строка          - Текст ячейки.
//  ТипРеквизита                      - Тип             - Тип реквизита объекта.
//  флКонтрольЗаполнения              - Булево          - Признак контроля заполнения.
//
Процедура ОтработатьПоискСправочникаПоШК(СтруктураПараметров,
										ТаблицаНоменклатурыИХарактеристик,
										НайденныеЗначения,
										ТЧДокумента,
										ТекстыЯчеек,
										ТипРеквизита, 
										флКонтрольЗаполнения) Экспорт
										
	Для каждого СтрокаШК Из ТаблицаНоменклатурыИХарактеристик Цикл
		Если ТипРеквизита = Тип("СправочникСсылка.Номенклатура") Тогда
			Если НЕ ТипЗнч(СтрокаШК.Объект)=Тип("СправочникСсылка.Номенклатура") Тогда Продолжить; КонецЕсли;
			НайденныеЗначения.Добавить(СтрокаШК.Объект);
			Прервать;
		ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			НайденныеЗначения.Добавить(СтрокаШК.ХарактеристикаНоменклатуры);
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Обработка всех найденных значений.
//
// Параметры:
//  Выборка           - ВыборкаИзРезультатаЗапроса - Выборка найденных значений.
//  НайденныеЗначения - Массив                     - Список найденных значений.
//  Представление     - Строка                     - Представление поиска.
//  НормаЗначений     - Число                      - Число допустимого результата поиска.
//  ТаблицаСлов       - ТаблицаЗначений            - Таблица точных совпадений.
//  ПоискПоСхожести   - Булево                     - Признак поиска по схожести.
//
Процедура ОбработатьВсеНайденныеЗначения(Выборка, 
										НайденныеЗначения,
										Представление,
										НормаЗначений,
										ТаблицаСлов,
										ПоискПоСхожести) Экспорт
										
	Если НЕ ПоискПоСхожести Тогда
		Пока Выборка.Следующий() Цикл
			НайденныеЗначения.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Иначе
		// Попробуем найти точное совпадение.
		СтрокаНайденная = ТаблицаСлов.Найти(Представление, "ЗначениеРеквизита");
		Если СтрокаНайденная = Неопределено Тогда
			ТаблицаНайденных = Новый ТаблицаЗначений;
			ТаблицаНайденных.Колонки.Добавить("Значение");
			ТаблицаНайденных.Колонки.Добавить("СтепеньСоответствия");
			ИсходныйСписокСлов = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьСписокСлов(Представление);
			Сч = 1;
			Пока ТаблицаСлов.Количество() > 0 И Сч<=НормаЗначений Цикл
				КоличествоСтрок = ТаблицаСлов.Количество();
				СписокСтрок = Новый СписокЗначений;
				СтрокаСравнения = ТаблицаСлов[0];
				СписокСловСравнения = СтрокаСравнения.СписокСлов.Скопировать();
				ТекущийСписокСлов = ИсходныйСписокСлов.Скопировать();
				СтепеньСоответствия = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ВернутьСтепеньСоответствияСписковСлов(ТекущийСписокСлов,
											СписокСловСравнения);
				НовСтр = ТаблицаНайденных.Добавить();
				НовСтр.Значение = СтрокаСравнения.Ссылка;
				НовСтр.СтепеньСоответствия = СтепеньСоответствия;
				ТаблицаСлов.Удалить(СтрокаСравнения);
				Сч = Сч+1;
			КонецЦикла;
			ТаблицаНайденных.Сортировать("СтепеньСоответствия Убыв");
			Если ТаблицаНайденных.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Для значения'") + " <" + Представление + "> " 
						+ НСтр("ru = 'найдено несколько вариантов:'")+Символы.ПС;
				Для Каждого Зн Из ТаблицаНайденных Цикл
					ТекстСообщения = ТекстСообщения+Символы.Таб+Зн.Значение+Символы.ПС;
				КонецЦикла;
				ТекстОшибки = НСтр("ru= '%1'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекстСообщения);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			НайденныеЗначения = ТаблицаНайденных.ВыгрузитьКолонку("Значение");
		Иначе
			НайденныеЗначения.Добавить(СтрокаНайденная.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получение данных производителя из доп. параметров
//
// Параметры:
//  СтруктураПараметров - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Структура - Данные о производителе.
//
Функция ПолучитьДанныеПроизводителяИзДопПараметров(СтруктураПараметров) Экспорт
	
	// Для книжек ничего менять даже не надо, стоит проверка на наличие доп. параметров.
	СтруктураВозврата = Новый Структура();
	
	Если СтруктураПараметров.Свойство("ТаблицаДополнительныхПараметров") 
		И СтруктураПараметров.ТаблицаДополнительныхПараметров<>Неопределено Тогда
		
		КолонкаПроизводителя = 0;
		СтрокаПроизводитель = СтруктураПараметров.ТаблицаДополнительныхПараметров.Найти("Производитель");
		Если НЕ СтрокаПроизводитель = Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаПроизводитель.НомерКолонки) Тогда
				КолонкаПроизводителя = СтрокаПроизводитель.НомерКолонки;
			КонецЕсли;
		КонецЕсли;
		СтруктураВозврата.Вставить("СтрокаПроизводитель", 	СтрокаПроизводитель);
		СтруктураВозврата.Вставить("КолонкаПроизводителя", 	КолонкаПроизводителя);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получение значения по производителю из табличного документа.
//
// Параметры:
//  ТабличныйДокумент   - ТабличныйДокумент - Табличный документ таблицы.
//  ТекстыЯчеек         - Строка            - Текст ячейки.
//  Примечание          - Строка            - Комментарий.
//  Представление       - Строка            - Представление значения.
//  НайденнаяСтрока     - Структура         - Найденная строка по поиску.
//  НомерСтроки         - Число             - Номер строки таблицы.
//  СтруктураПараметров - Структура         - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив - Массив возможных значений.
//
Функция ПолучитьЗначенияПоПроизводителю(ТабличныйДокумент,
											ТекстыЯчеек,
											Примечание,
											Представление,
											НайденнаяСтрока,
											НомерСтроки,
											СтруктураПараметров) Экспорт
	
	СтруктураПараметровПроизводителя = ПолучитьДанныеПроизводителяИзДопПараметров(СтруктураПараметров);
	
	// Для книжек ничего менять не нужно, отработает первая ветка если.
	Если СтруктураПараметровПроизводителя.Количество() = 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НеИспользоватьТаблицуСоответствий", 1);
		НайденныеЗначения = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьВозможныеЗначения(НайденнаяСтрока, Представление, Примечание, НайденнаяСтрока, ТекстыЯчеек, СтруктураПараметров,ДополнительныеПараметры);
	Иначе
		Дополнительно = Новый Структура;
		Если СтруктураПараметровПроизводителя.Свойство("КолонкаПроизводителя") 
			И СтруктураПараметровПроизводителя.Свойство("СтрокаПроизводитель") Тогда
			
			Если НЕ СтруктураПараметровПроизводителя.КолонкаПроизводителя = 0 
				И СтруктураПараметровПроизводителя.СтрокаПроизводитель.РежимЗагрузки = "Искать" Тогда
				
				Производитель = ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"
					+ Формат(СтруктураПараметровПроизводителя.КолонкаПроизводителя,"ЧГ=")).Текст;
				Если НЕ ПустаяСтрока(Производитель) Тогда
					Дополнительно.Вставить("Производитель",Производитель);
				КонецЕсли;
			Иначе//Если СтрокаПроизводитель.РежимЗагрузки = "Вычислять" Тогда
				Вычисление = ВычислитьЗначениеДляХарактеристики(СтруктураПараметровПроизводителя.СтрокаПроизводитель.Выражение,
					ТекстыЯчеек,Справочники.Производители.ПустаяСсылка(), СтруктураПараметров.СсылкаИсточника);
				
				// Здесь для поиска нам необходимо будет строковое значение.
				Попытка
					Производитель = Строка(Вычисление.Результат);
				Исключение
					Производитель = "";
				КонецПопытки;
				Если ЗначениеЗаполнено(Производитель) Тогда
					Дополнительно.Вставить("Производитель", Производитель);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НеИспользоватьТаблицуСоответствий", 1);
		ДополнительныеПараметры.Вставить("Дополнительно", Дополнительно);
		НайденныеЗначения = ЗагрузкаИзЭлектронныхДокументовВызовСервера.ПолучитьВозможныеЗначения(НайденнаяСтрока, Представление,
			Примечание, НайденнаяСтрока, ТекстыЯчеек, СтруктураПараметров,ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат НайденныеЗначения;
	
КонецФункции

////////////////////

// Дополнение структуры доп. параметрами.
//
// Параметры:
//  СтруктураПараметров - Структура        - Дополнительные параметры.
//  Форма               - УправляемаяФорма - Форма, в которой возникло событие.
//  ВходнойОбъект       - ОбработкаОбъект  - Объект входа.
//  ТолькоКолонки       - Булево           - Использовать только колонки.
//
Процедура ДополнитьВСтруктуруДопПараметры(СтруктураПараметров, Форма,  ВходнойОбъект, ТолькоКолонки = Ложь) Экспорт
	
	СтруктураПараметров.Вставить("ТаблицаДополнительныхПараметров", 			Неопределено);
	
КонецПроцедуры

// Сохранение таблицы соответствия.
//
// Параметры:
//  ПрайсЛистКонтрагента         - СправочникСсылка.ПрайсЛистыКонтрагентов - Прайс-лист.
//  ИскатьПо                     - Строка                                  - Строка поиска реквизит номенклатуры.
//  ТаблицаЗагружаемыхРеквизитов - ТаблицаЗначений                         - Таблица реквизитов.
//  СоответствиеНоменклатуры     - ТаблицаЗначений                         - Таблица соответствия номенклатуры.
//  Форма                        - УправляемаяФорма                        - Форма, в которой возникло событие.
//
Процедура СохранитьТаблицуСоответствия(ПрайсЛистКонтрагента, ИскатьПо, ТаблицаЗагружаемыхРеквизитов, СоответствиеНоменклатуры, Форма) Экспорт
	
	ЗагрузкаИзЭлектронныхДокументовВызовСервера.СохранитьТаблицуСоответствия(ПрайсЛистКонтрагента, ИскатьПо, Неопределено,
		ТаблицаЗагружаемыхРеквизитов, СоответствиеНоменклатуры);
	
КонецПроцедуры

// Создание номенклатуры по настройке.
//
// Параметры:
//  ТабличныйДокумент                     - ТабличныйДокумент - Табличный документ таблицы.
//  Настройка                             - Соответствие      - Соответствие данных 
//  НомерКолонки                          - Число             - Номер колонки в таблице.
//  СоответствиеНоменклатуры              - Соответствие      - Соответствие настройки номенклатуре.
//  Форма                                 - УправляемаяФорма  - Форма, в которой возникло событие.
//  ПерваяСтрокаДанныхТабличногоДокумента - Булево            - Признак первой строки.
// 
// Возвращаемое значение:
//  Булево - Признак успешного создания номенклатуры.
//
Функция СоздатьНоменклатуруПоНастройке(ТабличныйДокумент,
										Настройка, 
										НомерКолонки, 
										СоответствиеНоменклатуры, 
										Форма,
										ПерваяСтрокаДанныхТабличногоДокумента) Экспорт


	Возврат	ЗагрузкаИзЭлектронныхДокументовВызовСервера.СоздатьНоменклатуруПоНастройке(ТабличныйДокумент,
																				Настройка, 
																				НомерКолонки, 
																				СоответствиеНоменклатуры, 
																				Форма.ТаблицаЗагружаемыхРеквизитов.Выгрузить().СкопироватьКолонки(),
																				Неопределено,
																				ПерваяСтрокаДанныхТабличногоДокумента);
КонецФункции

// Запись параметров в создаваемую номенклатуру.
//
// Параметры:
//  Номенклатура              - СправочникСсылка.Номенклатура - Созданная номенклатура.
//  СтрокаТаблицыСоответствия - Строка                        - Строка таблицы.
//  СтранаПроисхождения       - СправочникСсылка.СтраныМира   - Страна номенклатуры.
//
Процедура ДописатьПараметрыВСоздаваемуюНоменклатуру(Номенклатура,СтрокаТаблицыСоответствия, СтранаПроисхождения) Экспорт
	
	Номенклатура.СтранаПроисхождения = СтранаПроисхождения;
	
КонецПроцедуры

// Получение номера колонки наименования с формы.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
// 
// Возвращаемое значение:
//  Число - Номер колонки.
//
Функция	 ПолучитьНомерКолонкиНаименованияСФормы(Форма) Экспорт
	
	Возврат Форма.НомерКолонкиНаименованиеТабличногоДокумента;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция вычисляет значение ячейки для режима "Вычислять".
//
// Параметры:
//  Выражение 		- Строка	- Программный код, который необходимо выполнить
//  ТекущиеДанные  	- Структура	- Структура загруженных значений
//  ТекстЯчейки    	- Строка	- Текст текущей ячейки
//  ТекстыЯчеек    	- Массив	- Массив текстов ячеек строки
//  Результат      	- Число		- Результат вычисления.
//
// Возвращаемое значение:
//  Структура		- Структура, содержащая Результат и ОписаниеОшибки.
//
Функция ВычислитьЗначениеДляХарактеристики(Знач Выражение, Знач ТекстыЯчеек, Знач Результат, Знач СсылкаИсточника) 
	
	ТекстСообщения = "";
	Попытка
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Выражение);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при вычислении выражения %1: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выражение, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Возврат Новый Структура("Результат,ОписаниеОшибки",Результат,ТекстСообщения);
	
КонецФункции // ВычислитьЗначениеДляХарактеристики()

#КонецОбласти