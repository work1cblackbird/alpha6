// Общий модуль "Обработка табличной части автоработы"

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ

// Процедура выполняет обработку изменения данных реквизита строки "Авторабота"
//
// Параметры:
//	Объект            - ДанныеФормыСтруктура		- Объект владелец ТЧ
//	Строка            - ДанныеФормыЭлементКоллекции	- Строка табличной части
//	ПараметрыДействия - Структура					- Параметры действия обработки реквизита
//  ИмяТаблицы        - Строка						- Название таблицы, по умолчанию - Автоработы.
//
Процедура ОбработатьИзменениеАвторабота(Объект, Строка, ПараметрыДействия, ИмяТаблицы = "Автоработы") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПерерасчитыватьКоэффициентАвторабот") = Неопределено  Тогда
		ПараметрыДействия.Вставить("ПерерасчитыватьКоэффициентАвторабот", Истина);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "Количество", ИмяТаблицы) И Строка.Количество = 0 Тогда
		Строка.Количество = 1;
		ПараметрыДействия.Вставить("ИзменилосьКоличество", Истина);
	КонецЕсли;
	
	// почистим скидки строки
	Если ЕстьРеквизит(Объект, "СкидкаНаТовар", ИмяТаблицы) Тогда
		Строка.СкидкаНаТовар       = Справочники.ТипыСкидок.ПустаяСсылка();
		Строка.ПроцентСкидкиСтроки = 0;
		Строка.СуммаСкидкиСтроки   = 0;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект.Ссылка, "СтавкаНДС", ИмяТаблицы) Тогда
		
		СтавкаНДС    = Строка.СтавкаНДС;
		Номенклатура = Строка.Авторабота.Номенклатура;
		
		ПараметрыНДС = Новый Структура();
		
		Если Справочники.ХозОперации.СоответствуетВидуОперации(Объект.ХозОперация, Перечисления.ВидыОперацийДоговора.Покупка) Тогда
			Контрагент = ОбработкаСобытийОбъектаСервер.ПолучитьЗначениеРеквизита("Контрагент", Объект, ПараметрыДействия);
			Если ЕстьРеквизит(Контрагент, "ОсвобожденОтНДС") Тогда
				ОсвобожденОтНДС = Контрагент.ОсвобожденОтНДС;
			Иначе
				ОсвобожденОтНДС = Ложь;
			КонецЕсли;
		Иначе
			// Заполним ставку НДС
			ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь);
			Если ЕстьРеквизит(Объект, "ВидРемонта") Тогда
				ОсвобожденОтНДС = Объект.ВидРемонта.ОсвобожденОтНДСРаботы ИЛИ ОсвобожденОтНДС;
			КонецЕсли;  
			
			ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);	
			ОсвобожденОтНДС = ОсвобожденОтНДС ИЛИ ПараметрыНДС.ОсвобожденОтНДС;
						
		КонецЕсли;
		
		Если ОсвобожденОтНДС Тогда
			СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		Иначе
			СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Номенклатура);
		КонецЕсли;
		
		Строка.СтавкаНДС = СтавкаНДС;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ ДАННЫХ РЕКВИЗИТОВ

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект            - ДанныеФормыСтруктура        - Объект владелец ТЧ
//	Строка            - ДанныеФормыЭлементКоллекции - Строка табличной части работ
//	ПараметрыДействия - Структура                   - Параметры действия обработки реквизита.
//
Процедура АвтоработаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;

	ОбработатьИзменениеАвторабота(Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
	Если Не ПараметрыДействия.Свойство("УстановитьСпособРасчетаСуммы") Тогда
		ПараметрыДействия.Вставить(
			"УстановитьСпособРасчетаСуммы",
			Истина);
	КонецЕсли;
	УстановитьЦену(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура НормочасПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ЦенаНормочаса = ЦенообразованиеСервер.ПолучитьЦенуНормочаса(Строка.Нормочас, Объект.Дата, Объект.ТипЦенРабот, Строка.Авторабота);
	
	Строка.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ЦенаНормочаса.Цена, ЦенаНормочаса.Валюта, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
	
	РассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура КоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура КоэффициентПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("Коэффициент", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура ЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура СуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	
	РассчитатьСуммуСтроки("Сумма", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ИмяТаблицы = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы");
	РассчитатьСуммуСтроки("СуммаВсего", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	СуммаВсего = Строка.СуммаВсего;
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, ИмяТаблицы);
	Строка.СуммаВсего = СуммаВсего;
	РассчитатьСуммуСтроки("СуммаВсего", Объект, Строка, ПараметрыДействия, ИмяТаблицы);
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("СтавкаНДС", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура ПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("ПроцентСкидки", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("СуммаСкидки", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("ПроцентСкидкиСтроки", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("СуммаСкидкиСтроки", Объект, Строка, ПараметрыДействия, ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
КонецПроцедуры

// Обработчик изменения реквизита строки
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита.
//
Процедура РасчетСтоимостиРаботыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки(
		"РасчетСтоимостиРаботы",
		Объект,
		Строка,
		ПараметрыДействия,
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИмяТаблицы", "Автоработы"));
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Процедуры выполняет пересчет суммы строки табличной части
//
// Параметры:
//	ТочкаВхода			- Строка						- Имя колонки ТЧ, в которой возникло событие
//	Объект				- ДанныеФормыСтруктура			- Объект владелец ТЧ
//	Строка				- ДанныеФормыЭлементКоллекции	- Строка табличной части работ
//	ПараметрыДействия	- Структура						- Параметры действия обработки реквизита
//	ИмяТабличнойЧасти	- Строка						- Название таблицы, по умолчанию - Автоработы.
//
Процедура РассчитатьСуммуСтроки(ТочкаВхода, Объект, Строка, ПараметрыДействия, ИмяТабличнойЧасти = "Автоработы") Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ИмяРеквизитаСкидкаНаценка = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИмяРеквизитаСкидкаНаценка",
		"СкидкаНаценкаРаботы"
	);
	
	ЕстьСкидка       = ЕстьРеквизит(Объект, ИмяРеквизитаСкидкаНаценка);
	ЕстьСкидкаСтроки = ЕстьРеквизит(Объект, "СкидкаНаТовар", ИмяТабличнойЧасти);
	ЕстьСумма        = ЕстьРеквизит(Объект, "Сумма", ИмяТабличнойЧасти);
	ЕстьСуммаВсего   = ЕстьРеквизит(Объект, "СуммаВсего", ИмяТабличнойЧасти);
	ЕстьСтавкаНДС    = ЕстьРеквизит(Объект, "СтавкаНДС", ИмяТабличнойЧасти);
	ЕстьРасчетСтоимостиРаботы = ЕстьРеквизит(Объект, "СпособРасчетаСтоимостиРаботы", ИмяТабличнойЧасти);
	РасчетСтоимостиРаботыПоФиксированнойСумме = ЕстьРасчетСтоимостиРаботы
		И Строка.СпособРасчетаСтоимостиРаботы = Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой;
	
	// Пересчет "Суммы" и "Суммы НДС"
	Если ТочкаВхода = "СуммаВсего" И ЕстьСумма Тогда
		Если ЕстьСтавкаНДС Тогда
			Если ПараметрыДействия.Свойство("ТипЦенРабот") Тогда
				ЦенаВключаетНДС = (ПараметрыДействия.ТипЦенРабот.Пустая() ИЛИ ПараметрыДействия.ТипЦенРабот.ЦенаВключаетНДС);
			ИначеЕсли ЕстьРеквизит(Объект, "ТипЦенРабот") Тогда
				ЦенаВключаетНДС = (Объект.ТипЦенРабот.Пустая() ИЛИ Объект.ТипЦенРабот.ЦенаВключаетНДС);
			Иначе
				ЦенаВключаетНДС = Истина;
			КонецЕсли;
			
			СтавкаНДС = Строка.СтавкаНДС;
		Иначе
			ЦенаВключаетНДС = Истина;
			СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
		
		СуммаРасчетная = ?(ЦенаВключаетНДС, Строка.СуммаВсего, Строка.СуммаВсего*100/(100 + СтавкаНДС.Ставка));
		
		// Сначала шапочная скидка.
		Если ЕстьСкидка Тогда
			СкидкаШапкиАбсолютная = (Объект[ИмяРеквизитаСкидкаНаценка].СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная);
			Если СкидкаШапкиАбсолютная Тогда
				ЗначениеСкидкиШапки = ?(ЦенаВключаетНДС, Строка.СуммаСкидки, Строка.СуммаСкидки * 100 / (100 + СтавкаНДС.Ставка));
			Иначе
				ЗначениеСкидкиШапки = Строка.ПроцентСкидки;
			КонецЕсли;
		Иначе
			СкидкаШапкиАбсолютная = Ложь;
			ЗначениеСкидкиШапки   = 0;
		КонецЕсли;
		
		// Теперь определяем какая скидка установлена для строки.
		Если ЕстьСкидкаСтроки Тогда
			СкидкаСтрокиАбсолютная = (Строка.СкидкаНаТовар.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная);
			Если СкидкаСтрокиАбсолютная Тогда
				ЗначениеСкидкиСтроки = ?(ЦенаВключаетНДС, Строка.СуммаСкидкиСтроки, Строка.СуммаСкидкиСтроки*100/(100 + СтавкаНДС.Ставка));
			Иначе
				ЗначениеСкидкиСтроки = Строка.ПроцентСкидкиСтроки;
			КонецЕсли;
		Иначе
			СкидкаСтрокиАбсолютная = Ложь;
			ЗначениеСкидкиСтроки   = 0;
		КонецЕсли;
		
		Если СкидкаШапкиАбсолютная И СкидкаСтрокиАбсолютная Тогда
			СуммаРасчетная = СуммаРасчетная + ЗначениеСкидкиШапки + ЗначениеСкидкиСтроки;
			
		ИначеЕсли СкидкаШапкиАбсолютная И НЕ СкидкаСтрокиАбсолютная Тогда
			
			СуммаРасчетная = ? (ЗначениеСкидкиСтроки = 100, 0, (СуммаРасчетная + ЗначениеСкидкиШапки) / (1 - ЗначениеСкидкиСтроки/100));
			
		ИначеЕсли НЕ СкидкаШапкиАбсолютная И СкидкаСтрокиАбсолютная Тогда
			
			СуммаРасчетная = ?(ЗначениеСкидкиШапки = 100, 0, (СуммаРасчетная + ЗначениеСкидкиСтроки) / (1 - ЗначениеСкидкиШапки/100));
				
		Иначе
			ЗначениеСкидки = ЗначениеСкидкиСтроки+ЗначениеСкидкиШапки;
			СуммаРасчетная = ?(ЗначениеСкидки = 100, 0, СуммаРасчетная / (1 - (ЗначениеСкидки) / 100));
			
		КонецЕсли;
		
		Строка.Сумма = Окр(СуммаРасчетная, 2);
		
		// Рассчитываем новую сумму НДС.
		Строка.СуммаНДС = Окр((Строка.СуммаВсего * СтавкаНДС.Ставка) / (100 + СтавкаНДС.Ставка), 2);
		
		// расчитываем сумму или процент шапочной скидки
		
		СуммаБезСкидки = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти);
		СуммаСкидки = 0;
		Если Не ЦенаВключаетНДС Тогда
			СуммаРасчетаПоТипуЦен = СуммаБезСкидки - Окр(Строка.Сумма * СтавкаНДС.Ставка / 100, 2);
		Иначе
			СуммаРасчетаПоТипуЦен = СуммаБезСкидки;
		КонецЕсли;
		
		Если ЕстьСкидка Тогда
			Если СкидкаШапкиАбсолютная Тогда
				Строка.ПроцентСкидки = ?(СуммаБезСкидки = 0, 0, Строка.СуммаСкидки * 100 / СуммаБезСкидки);
				СуммаСкидки = Строка.СуммаСкидки;
			Иначе
				Строка.СуммаСкидки = СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(СуммаБезСкидки * ЗначениеСкидкиШапки / 100, Объект[ИмяРеквизитаСкидкаНаценка]);
				СуммаСкидки = СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(
					СуммаРасчетаПоТипуЦен * ЗначениеСкидкиШапки / 100,
					Объект.СкидкаНаценка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСкидкаСтроки Тогда
			Если СкидкаСтрокиАбсолютная Тогда
				Строка.ПроцентСкидкиСтроки = ?(СуммаБезСкидки = 0, 0, Строка.СуммаСкидкиСтроки*100/СуммаБезСкидки);
				СуммаСкидки = СуммаСкидки + Строка.СуммаСкидкиСтроки;
			Иначе
				Строка.СуммаСкидкиСтроки = СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(СуммаБезСкидки*ЗначениеСкидкиСтроки/100, Строка.СкидкаНаТовар);
				СуммаСкидки = СуммаСкидки + СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(
					СуммаРасчетаПоТипуЦен * ЗначениеСкидкиСтроки / 100,
					Строка.СкидкаНаТовар);
			КонецЕсли;
		КонецЕсли;
		
		// Рассчитываем сумму с учетом скидок
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РассчитыватьСуммуОтСуммыВсего", Ложь) Тогда
			Строка.Сумма = Строка.СуммаВсего + СуммаСкидки - ?(ЦенаВключаетНДС, 0, Строка.СуммаНДС);
		КонецЕсли;
	КонецЕсли;
	
	// Пересчет "Цены" от "Суммы"
	Если ТочкаВхода = "Сумма" ИЛИ ТочкаВхода = "СуммаВсего" Тогда
		
		Если РасчетСтоимостиРаботыПоФиксированнойСумме Тогда
			Строка.Цена = ?(Строка.Количество = 0, 0, Строка.Сумма / Строка.Количество);
		Иначе
			Строка.Цена = ?(Строка.Количество * Строка.Коэффициент = 0, 0, Строка.Сумма / (Строка.Количество * Строка.Коэффициент));
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет "Суммы" от "Цены"
	Если ЕстьСумма И (ТочкаВхода = "Количество" ИЛИ
		 ТочкаВхода = "Цена" ИЛИ ТочкаВхода = "Коэффициент" ИЛИ
		 ТочкаВхода = "РасчетСтоимостиРаботы") Тогда
		
		Если РасчетСтоимостиРаботыПоФиксированнойСумме Тогда
			Строка.Сумма = Строка.Цена * Строка.Количество;
		Иначе
			Строка.Сумма = Строка.Цена * Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет суммы скидки
	Если ТочкаВхода = "ПроцентСкидки" Тогда
		Если Строка.ПроцентСкидки > 100 Тогда
			Строка.ПроцентСкидки = 100;
		КонецЕсли;
		
		Если  (ЗначениеЗаполнено(Строка.СкидкаНаТовар) И Строка.СкидкаНаТовар.ФлагВытеснения) 
			ИЛИ (ЕстьСкидка И НЕ ЗначениеЗаполнено (Объект[ИмяРеквизитаСкидкаНаценка])) Тогда
			Строка.ПроцентСкидки = 0;
		КонецЕсли;
		
		СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти);
		Строка.СуммаСкидки = Окр(СуммаБезСкидок*Строка.ПроцентСкидки/100, 2);
		
		// округлим скидки
		Если ЕстьСкидка Тогда
			Строка.СуммаСкидки = СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(Строка.СуммаСкидки, Объект[ИмяРеквизитаСкидкаНаценка]);
		КонецЕсли;
	КонецЕсли;
	
	// пересчет процента скидки
	Если ТочкаВхода = "СуммаСкидки" Тогда
		Если  (ЗначениеЗаполнено(Строка.СкидкаНаТовар) И Строка.СкидкаНаТовар.ФлагВытеснения) 
			ИЛИ (ЕстьСкидка И НЕ ЗначениеЗаполнено (Объект[ИмяРеквизитаСкидкаНаценка])) Тогда
			Строка.СуммаСкидки = 0;
		КонецЕсли;
		
		СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти);
		Если СуммаБезСкидок < Строка.СуммаСкидки Тогда
			Строка.СуммаСкидки = СуммаБезСкидок;
			Строка.ПроцентСкидки = 100;
		Иначе
			Строка.ПроцентСкидки = ?(СуммаБезСкидок = 0, 0, Окр(Строка.СуммаСкидки * 100 / СуммаБезСкидок, 2));
		КонецЕсли;
	КонецЕсли;
	
	// Пересчет суммы скидки
	Если ТочкаВхода = "ПроцентСкидкиСтроки"
		ИЛИ ((ТочкаВхода = "СуммаСкикди" ИЛИ ТочкаВхода = "ПроцентСкидки")
			И ЕстьСкидкаСтроки
			И ЗначениеЗаполнено(Строка.СкидкаНаТовар)
			И Строка.СкидкаНаТовар.СпособВычисления = Перечисления.СкидкиСпособВычисления.Относительная) Тогда
		
		Если Строка.ПроцентСкидкиСтроки > 100 Тогда
			Строка.ПроцентСкидкиСтроки = 100;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.СкидкаНаТовар) Тогда
			Строка.ПроцентСкидкиСтроки = 0;
		КонецЕсли;
		
		СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти);
		СуммаСкидкиСтроки = Окр(СуммаБезСкидок * Строка.ПроцентСкидкиСтроки / 100, 2);
		БазоваяСумма = СуммаБезСкидок - ?(ЕстьСкидка, Строка.СуммаСкидки, 0);
		
		Если БазоваяСумма <= СуммаСкидкиСтроки Тогда
			СуммаСкидкиСтроки = БазоваяСумма;
			Строка.ПроцентСкидкиСтроки = ?(СуммаБезСкидок = 0, 0, Окр(СуммаСкидкиСтроки * 100 / СуммаБезСкидок, 2));
		КонецЕсли;
		Строка.СуммаСкидкиСтроки = СуммаСкидкиСтроки;
		
		// округлим скидки
		Если ЕстьСкидкаСтроки Тогда
			Строка.СуммаСкидкиСтроки = СкидкиНаценкиСервер.ОкруглитьСуммуСкидки(Строка.СуммаСкидкиСтроки, Строка.СкидкаНаТовар);
		КонецЕсли;
	КонецЕсли;
	
	Если ТочкаВхода = "СуммаСкидкиСтроки"
		ИЛИ ((ТочкаВхода = "СуммаСкикди" ИЛИ ТочкаВхода = "ПроцентСкидки")
			И ЕстьСкидкаСтроки
			И ЗначениеЗаполнено(Строка.СкидкаНаТовар)
			И Строка.СкидкаНаТовар.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная) Тогда
		
		Если Строка.СкидкаНаТовар.Пустая() Тогда
			Строка.СуммаСкидкиСтроки = 0;
		КонецЕсли;
		
		СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти);
		Если СуммаБезСкидок < Строка.СуммаСкидки + Строка.СуммаСкидкиСтроки Тогда
			Строка.СуммаСкидкиСтроки = СуммаБезСкидок - Строка.СуммаСкидки;
		КонецЕсли;
		Строка.ПроцентСкидкиСтроки = ?(СуммаБезСкидок = 0, 0, Окр(Строка.СуммаСкидкиСтроки*100/СуммаБезСкидок,2));
	КонецЕсли;
	
	// Пересчет "Суммы НДС" и "Суммы всего"
	Если (ТочкаВхода = "Количество" ИЛИ 
		  ТочкаВхода = "Цена" ИЛИ 
		  ТочкаВхода = "Сумма" ИЛИ 
		  ТочкаВхода = "Коэффициент" ИЛИ 
		  ТочкаВхода = "СтавкаНДС" ИЛИ
		  ТочкаВхода = "ПроцентСкидкиСтроки" ИЛИ
		  ТочкаВхода = "ПроцентСкидки" ИЛИ
		  ТочкаВхода = "СуммаСкидки" ИЛИ
		  ТочкаВхода = "СуммаСкидкиСтроки" ИЛИ
		  ТочкаВхода = "РасчетСтоимостиРаботы") И
		  ЕстьСумма Тогда
		
		СуммаБезСкидки = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти);
		СуммаСоСкидкой = СуммаБезСкидки - (?(ЕстьСкидкаСтроки, Строка.СуммаСкидкиСтроки, 0) + ?(ЕстьСкидка, Строка.СуммаСкидки, 0));
		
		// пересчитаем скидку строки при отрицательной сумме всего
		Если СуммаСоСкидкой < 0 Тогда
			СуммаСоСкидкой = 0;
		КонецЕсли;
		
		Если ЕстьСтавкаНДС Тогда
			// Включает ли цена НДС?
			Если ПараметрыДействия.Свойство("ТипЦенРабот") Тогда
				ЦенаВключаетНДС = (ПараметрыДействия.ТипЦенРабот.Пустая() ИЛИ ПараметрыДействия.ТипЦенРабот.ЦенаВключаетНДС);
			ИначеЕсли ЕстьРеквизит(Объект, "ТипЦенРабот") Тогда
				ЦенаВключаетНДС = (Объект.ТипЦенРабот.Пустая() ИЛИ Объект.ТипЦенРабот.ЦенаВключаетНДС);
			Иначе
				ЦенаВключаетНДС = Истина;
			КонецЕсли;
			
			СтавкаНДС = Строка.СтавкаНДС.Ставка;
			
			Строка.СуммаВсего = СуммаСоСкидкой;
			Строка.СуммаНДС   = Окр((СуммаСоСкидкой * СтавкаНДС)/(100 + СтавкаНДС), 2);
			
		ИначеЕсли ЕстьСуммаВсего Тогда
			Строка.СуммаВсего = СуммаСоСкидкой;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Перезаполение цен у табличной части
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект -  Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура -  Вспомогательные параметры обработки табличной части.
//
Процедура ПерезаполнитьЦеныТабличнойЧасти(Объект, ПараметрыДействия) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЕстьРеквизит(Объект, "Цена", "Автоработы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенниеСкидкаНаРаботы = Неопределено;
	
	Если ПараметрыДействия.Свойство("СкидкаНаРаботы", ЗначенниеСкидкаНаРаботы) Тогда
		
		ПараметрыДействия.Удалить("СкидкаНаРаботы");
		
	КонецЕсли;
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦенРабот", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	ВозможенПересчетСуммы = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПересчетСуммы", Истина);
	
	// Прекращаем обработку, если пересчет не требуется
	Если НЕ(ВозможенПересчетСуммы И (ТребуетсяУстановкаЦен ИЛИ ТребуетсяПересчетЦен)) Тогда
		Возврат;
	КонецЕсли;
	
	// Сбрасываем признаки необходимости пересчета
	Если ПараметрыДействия.Свойство("ТребуетсяУстановкаЦенРабот") Тогда
		ПараметрыДействия.ТребуетсяУстановкаЦенРабот = Ложь;
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("ТребуетсяПересчетЦен")
		И НЕ ПараметрыДействия.Свойство("НеСбрасыватьПризнакПересчетаЦен") Тогда
		ПараметрыДействия.ТребуетсяПересчетЦен  = Ложь;
	КонецЕсли;
	
	// Определим менеджер текущего объекта
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Если ТребуетсяУстановкаЦен Тогда
		
		// Запретим перерасчет скидок
		ПерересчитатьСкидки = Ложь;
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
			ПерересчитатьСкидки = Истина;
			ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		КонецЕсли;
		
		ПараметрыДействия.Вставить("УстановитьСпособРасчетаСуммы", Истина);
		
		Для Каждого СтрокаРаботы Из Объект.Автоработы Цикл
			УстановитьЦену(Объект, СтрокаРаботы, ПараметрыДействия);
			МенеджерДокумента.АвтоработыЦенаПриИзменении(Объект, СтрокаРаботы);
		КонецЦикла;
		
		ПараметрыДействия.Удалить("УстановитьСпособРасчетаСуммы");
		
		// Пересчитаем скидки
		Если ПерересчитатьСкидки Тогда
			ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
			ПараметрыДействияРаботы = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыДействия);
			МенеджерДокумента.ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействияРаботы);
			ПараметрыДействияРаботы.Вставить("СкидкаНаРаботы", Истина);
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействияРаботы, "Автоработы");
		КонецЕсли;
		
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 Тогда
			ТекстСообщения = НСтр("ru = 'При пересчете валюты обнаружен нулевой курс валюты.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		// Запретим перерасчет скидок
		ПерересчитатьСкидки = Ложь;
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
			ПерересчитатьСкидки = Истина;
			ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		Для Каждого СтрокаРаботы Из Объект.Автоработы Цикл
			СтрокаРаботы.Цена = Окр(СтрокаРаботы.Цена*КоэффициентСоотношенияКурсов, 2);
			МенеджерДокумента.АвтоработыЦенаПриИзменении(Объект, СтрокаРаботы);
		КонецЦикла;
		
		// Пересчитаем скидки
		Если ПерересчитатьСкидки Тогда
			ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
			ПараметрыДействияРаботы = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыДействия);
			МенеджерДокумента.ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействияРаботы);
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействияРаботы, "Автоработы");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначенниеСкидкаНаРаботы <> Неопределено Тогда
		
		ПараметрыДействия.Вставить("СкидкаНаРаботы", ЗначенниеСкидкаНаРаботы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЦену(Объект, Строка, ПараметрыДействия) Экспорт
	
	// Выполним проверку возможности назначения цены.
	Если НЕ ЗначениеЗаполнено(Строка.Авторабота) ИЛИ НЕ ЗначениеЗаполнено(Объект.ТипЦенРабот) Тогда
		Строка.Цена = 0;
		ПараметрыДействия.Вставить("ИзмениласьЦена", Истина);
		
		Возврат;
	КонецЕсли;
	
	ЕстьСпособРасчетаСтоимостиРаботы = ЕстьРеквизит(
		Строка,
		"СпособРасчетаСтоимостиРаботы");
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Автомобиль") = Неопределено Тогда
		Если ЗначениеЗаполнено(ПараметрыДействия.Автомобиль.ВариантКомплектации) Тогда
			Модель = ПараметрыДействия.Автомобиль.ВариантКомплектации;
		Иначе
			Модель = ПараметрыДействия.Автомобиль.Модель;
		КонецЕсли;
	ИначеЕсли ЕстьРеквизит(Объект, "Автомобиль") И ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		Если ТипЗнч(Объект.Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
			Если ЗначениеЗаполнено(Объект.Автомобиль.ВариантКомплектации) Тогда
				Модель = Объект.Автомобиль.ВариантКомплектации;
			Иначе
				Модель = Объект.Автомобиль.Модель;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Автомобиль) = Тип("СправочникСсылка.Модели") Тогда
			Если ЕстьРеквизит(Объект, "ВариантКомплектации") И ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда
				Модель = Объект.ВариантКомплектации;
			Иначе
				Модель = Объект.Автомобиль;
			КонецЕсли;
		Иначе
			Модель = Справочники.Модели.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ЕстьРеквизит(Объект, "СводныйРемонтныйЗаказ") И ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ) Тогда
		Автомобиль = Объект.СводныйРемонтныйЗаказ.Автомобиль;
		Если ЗначениеЗаполнено(Автомобиль.ВариантКомплектации) Тогда
			Модель = Автомобиль.ВариантКомплектации;
		Иначе
			Модель = Автомобиль.Модель;
		КонецЕсли;
	ИначеЕсли ЕстьРеквизит(Объект, "ВариантКомплектации") И ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда
		Модель = Объект.ВариантКомплектации;
	ИначеЕсли ЕстьРеквизит(Объект, "Модель") И ЗначениеЗаполнено(Объект.Модель) Тогда
		Модель = Объект.Модель;
	Иначе
		Модель = Справочники.Модели.ПустаяСсылка();
	КонецЕсли;
	
	// попытаемся получить цену
	МоментЦены = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка.МоментВремени().Дата);
	
	ЦенаРаботы = ЦенообразованиеСервер.ПолучитьЦенуАвтоработы(
		Объект.ТипЦенРабот,
		Строка.Авторабота,
		Модель,
		?(ЕстьРеквизит(Объект, "Контрагент"), Объект.Контрагент, Справочники.Контрагенты.ПустаяСсылка()),
		?(ЕстьРеквизит(Объект, "ДоговорВзаиморасчетов"), Объект.ДоговорВзаиморасчетов, Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка()),
		?(ЕстьРеквизит(Объект, "Цех"), Объект.Цех, Справочники.Цеха.ПустаяСсылка()),
		?(ЕстьРеквизит(Объект, "ВидРемонта"), Объект.ВидРемонта, Справочники.ВидыРемонта.ПустаяСсылка()),
		МоментЦены,
		Объект.ВалютаДокумента,
		Объект.КурсДокумента);
	
	Если ЕстьСпособРасчетаСтоимостиРаботы
		И (Не ЗначениеЗаполнено(Строка.СпособРасчетаСтоимостиРаботы)
		ИЛИ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "УстановитьСпособРасчетаСуммы", Ложь)) Тогда
		
		Если Не ЗначениеЗаполнено(ЦенаРаботы)
			ИЛИ Не ПолучитьЗначениеПараметраСтруктуры(ЦенаРаботы, "ЦенаНайдена", Ложь) Тогда
			
			// Получим из автоработы
			СпособРасчетаСтоимостиРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Строка.Авторабота, "СпособРасчетаСтоимостиРаботы");
			
			Строка.СпособРасчетаСтоимостиРаботы = ?(
				ЗначениеЗаполнено(СпособРасчетаСтоимостиРаботы),
				СпособРасчетаСтоимостиРаботы,
				Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой);
			
		Иначе
			
			ВидЦены = "";
			Строка.СпособРасчетаСтоимостиРаботы = ?(
				ЦенаРаботы.Свойство("ВидЦены", ВидЦены) И ВидЦены = "Нормочас",
				Перечисления.СпособыРасчетаСтоимостиРаботы.ПоНормеВремени,
				Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЦенаРаботы.Нормочас <> Справочники.Нормочасы.Рубль Тогда
		
		ВидЦены = "";
		Если ЦенаРаботы.Свойство("ВидЦены", ВидЦены) И ВидЦены = "Нормочас" Тогда
			Пересчитывать = Ложь;
		Иначе
			Пересчитывать = ВидЦены = "" И ЦенаРаботы.НормаВремени <> 0;
		КонецЕсли;
		
		Если Пересчитывать
			ИЛИ Строка.Коэффициент = 0
			ИЛИ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПерерасчитыватьКоэффициентАвторабот", Ложь) Тогда
				Строка.Коэффициент = ?(ЦенаРаботы.НормаВремени <> 0, ЦенаРаботы.НормаВремени, 1);
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "Нормочас") И НЕ Объект.Нормочас.Пустая() Тогда
			Строка.Нормочас = Объект.Нормочас;
		Иначе
			Строка.Нормочас = ЦенаРаботы.Нормочас;
		КонецЕсли;
		
		ЦенаНормочаса = ЦенообразованиеСервер.ПолучитьЦенуНормочаса(Строка.Нормочас, МоментЦены, Объект.ТипЦенРабот, Строка.Авторабота);
		
		Если Объект.ВалютаДокумента <> Неопределено И Объект.КурсДокумента <> Неопределено Тогда
			Строка.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ЦенаНормочаса.Цена, ЦенаНормочаса.Валюта, МоментЦены, Объект.ВалютаДокумента, Объект.КурсДокумента);
		Иначе
			Строка.Цена = ЦенаНормочаса.Цена;
		КонецЕсли;
		
	Иначе
		ЗаполнитьЗначенияСвойств(Строка, ЦенаРаботы, "Нормочас,Цена");
		
		ВидЦены = "";
		Если ЦенаРаботы.Свойство("ВидЦены", ВидЦены) И ВидЦены = "Цена" Тогда
			Строка.Коэффициент = ЦенаРаботы.НормаВремени;
		Иначе
			Строка.Коэффициент = ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ИзмениласьЦена", Истина);
	
КонецПроцедуры

#КонецОбласти
