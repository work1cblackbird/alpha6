////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Серверные процедуры и функции общего назначения.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
// Булево.
//
Функция ЭтоРазделеннаяКонфигурация() Экспорт
	
	ЕстьРазделители = Ложь;
	Для каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			ЕстьРазделители = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьРазделители;
	
КонецФункции

// Возвращает массив существующих в конфигурации разделителей.
//
// Возвращаемое значение:
//  ФиксированныйМассив из Строка - массив имен общих реквизитов, которые
//  являются разделителями.
//
Функция РазделителиКонфигурации() Экспорт
	
	МассивРазделителей = Новый Массив;
	
	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			МассивРазделителей.Добавить(ОбщийРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(МассивРазделителей);
	
КонецФункции

// Возвращает состав общего реквизита с заданным именем.
//
// Параметры:
// Имя - Строка - Имя общего реквизита.
//
// Возвращаемое значение:
// СоставОбщегоРеквизита.
//
Функция СоставОбщегоРеквизита(Знач Имя) Экспорт
	
	Возврат Метаданные.ОбщиеРеквизиты[Имя].Состав;
	
КонецФункции

// Возвращает имя общего реквизита, который является разделителем основных данных.
//
// Возвращаемое значение:
//  Строка.
//
Функция РазделительОсновныхДанных() Экспорт
	
	Результат = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Результат = МодульРаботаВМоделиСервиса.РазделительОсновныхДанных();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя общего реквизита, который является разделителем вспомогательных данных.
//
// Возвращаемое значение:
//  Строка.
//
Функция РазделительВспомогательныхДанных() Экспорт
	
	Результат = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Результат = МодульРаботаВМоделиСервиса.РазделительВспомогательныхДанных();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак включения условного разделения.
// В случае вызова в неразделенной конфигурации возвращает Ложь.
//
Функция РазделениеВключено() Экспорт
	
	Возврат ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() И ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	
КонецФункции

// Возвращает признак возможности обращения к разделенным данным из текущего сеанса.
// В случае вызова в неразделенной конфигурации возвращает Истина.
//
// Возвращаемое значение:
// Булево.
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
	
	Возврат НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() ИЛИ ОбщегоНазначения.ИспользованиеРазделителяСеанса();
	
КонецФункции

// Возвращает объект ПреобразованиеXSL созданный из общего макета с переданным
// именем.
//
// Параметры:
// ИмяОбщегоМакет - Строка - имя общего макета типа ДвоичныеДанные содержащего
// файл преобразования XSL.
//
// Возвращаемое значение:
// ПреобразованиеXSL - объект ПреобразованиеXSL.
//
Функция ПолучитьПреобразованиеXSLИзОбщегоМакета(Знач ИмяОбщегоМакета) Экспорт
	
	ДанныеМакета = ПолучитьОбщийМакет(ИмяОбщегоМакета);
	ИмяФайлаПреобразования = ПолучитьИмяВременногоФайла("xsl");
	ДанныеМакета.Записать(ИмяФайлаПреобразования);
	
	Преобразование = Новый ПреобразованиеXSL;
	Преобразование.ЗагрузитьИзФайла(ИмяФайлаПреобразования);
	
	Попытка
		УдалитьФайлы(ИмяФайлаПреобразования);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение XSL'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Преобразование;
	
КонецФункции

// Определяет, сеанс запущен с разделителями или без.
//
// Возвращаемое значение:
// Булево.
//
Функция СеансЗапущенБезРазделителей() Экспорт
	
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных.Количество() = 0;
	
КонецФункции

// Определяет текущий режим работы программы.
//   В частности используется в панелях настроек программы
//   для скрытия специализированных интерфейсов, предназначенных не для всех режимов работы.
//
// Возвращаемое значение:
//   Структура - Настройки, описывающие права текущего пользователя и текущий режим работы программы.
//     По правам:
//       * ЭтоАдминистраторСистемы   - Булево - Истина, если есть право администрирования информационной базы.
//       * ЭтоАдминистраторПрограммы - Булево - Истина, если есть доступ ко всем "прикладным" данным информационной
//                                              базы.
//     По режимам работы базы:
//       * МодельСервиса   - Булево - Истина, если в конфигурации есть разделители и они условно включены.
//       * Локальный       - Булево - Истина, если конфигурации работает в обычном режиме (не в модели сервиса и не в
//                                    автономном рабочем месте).
//       * Автономный      - Булево - Истина, если конфигурации работает в режиме АРМ (автономное рабочее место).
//       * Файловый        - Булево - Истина, если конфигурации работает в файловом режиме.
//       * КлиентСерверный - Булево - Истина, если конфигурации работает в клиент-серверном режиме.
//       * ЛокальныйФайловый        - Булево - Истина, если работа в обычном файловом режиме.
//       * ЛокальныйКлиентСерверный - Булево - Истина, если работа в обычном клиент-серверном режиме.
//     По функциональности клиентской части:
//       * ЭтоLinuxКлиент - Булево - Истина, если клиентское приложение запущено под управлением ОС Linux.
//       * ЭтоВебКлиент   - Булево - Истина, если клиентское приложение является Веб-клиентом.
//       * ЭтоМобильныйКлиент - Булево - Истина, если клиентское приложение является мобильным клиентом.
//
// Описание:
//   В панелях настроек программы включены 5 интерфейсов:
//     - Для администратора сервиса в области данных абонента (АС).
//     - Для администратора абонента (АА).
//     - Для администратора локального решения в клиент-серверном режиме (ЛКС).
//     - Для администратора локального решения в файловом режиме (ЛФ).
//     - Для администратора автономного рабочего места (АРМ).
//   
//   Интерфейсы АС и АА разрезаются при помощи скрытия групп и элементов формы
//     для всех ролей, кроме роли "АдминистраторСистемы".
//   
//   Администратор сервиса, выполнивший вход в область данных,
//     должен видеть те же настройки что и администратор абонента
//     вместе с настройками сервиса (неразделенными).
//
Функция РежимРаботыПрограммы() Экспорт
	РежимРаботы = Новый Структура;
	
	// Права текущего пользователя.
	РежимРаботы.Вставить("ЭтоАдминистраторПрограммы", Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь)); // АА, АС, ЛКС, ЛФ
	РежимРаботы.Вставить("ЭтоАдминистраторСистемы",   Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь)); // АС, ЛКС, ЛФ
	
	// Режимы работы сервера.
	РежимРаботы.Вставить("МодельСервиса", РазделениеВключено()); // АС, АА
	РежимРаботы.Вставить("Локальный",     ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме")); // ЛКС, ЛФ
	РежимРаботы.Вставить("Автономный",    ПолучитьФункциональнуюОпцию("РаботаВАвтономномРежиме")); // АРМ
	РежимРаботы.Вставить("Файловый",        Ложь); // АС, АА, ЛФ
	РежимРаботы.Вставить("КлиентСерверный", Ложь); // АС, АА, ЛКС
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		РежимРаботы.Файловый = Истина;
	Иначе
		РежимРаботы.КлиентСерверный = Истина;
	КонецЕсли;
	
	РежимРаботы.Вставить("ЛокальныйФайловый",
		РежимРаботы.Локальный И РежимРаботы.Файловый); // ЛФ
	РежимРаботы.Вставить("ЛокальныйКлиентСерверный",
		РежимРаботы.Локальный И РежимРаботы.КлиентСерверный); // ЛКС
	
	// Режимы работы клиента.
	РежимРаботы.Вставить("ЭтоWindowsКлиент", ОбщегоНазначения.ЭтоWindowsКлиент());
	РежимРаботы.Вставить("ЭтоLinuxКлиент"  , ОбщегоНазначения.ЭтоLinuxКлиент());
	РежимРаботы.Вставить("ЭтоOSXКлиент"    , ОбщегоНазначения.ЭтоMacOSКлиент());
	РежимРаботы.Вставить("ЭтоВебКлиент"    , ОбщегоНазначения.ЭтоВебКлиент());
	РежимРаботы.Вставить("ЭтоМобильныйКлиент", ОбщегоНазначения.ЭтоМобильныйКлиент());
	
	Возврат РежимРаботы;
КонецФункции

// Упаковывает данные текущего сеанса в структуру. Нужна для кеширования.
// Добавлена временно, нужно перенести в ЛицензированиеПовтИсп.
//
// Возвращаемое значение:
//  Структура - содержит поля:
//    * ИмяКомпьютера - Строка;
//    * ИмяПриложения - Строка;
//    * НомерСеанса   - Число;
//    * СтрокаСоединенияИнформационнойБазы - Строка - результат работы функции СтрокаСоединенияИнформационнойБазы().
//
// Пример:
//  ИмяКомпьютера = "DESKTOP-5PPRSIC"
//  ИмяПриложения = "1CV8C"
//  НомерСеанса = 328
//  СтрокаСоединенияИнформационнойБазы = "File="E:\1c_db\storages\alfa-6";"
//
Функция ОписаниеТекущегоСеанса() Экспорт
	
	Результат = Новый Структура("ИмяКомпьютера,ИмяПриложения", "", "");
	Результат.Вставить("НомерСеанса", НомерСеансаИнформационнойБазы());
	Результат.Вставить("СтрокаСоединенияИнформационнойБазы", СтрокаСоединенияИнформационнойБазы());
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	
	// Для получения информации о сеансе найдем свой сеанс среди всех
	Для Каждого Сеанс Из Сеансы Цикл
		
		Если Сеанс.НомерСеанса = Результат.НомерСеанса Тогда
			
			Результат.ИмяКомпьютера = Сеанс.ИмяКомпьютера;
			Результат.ИмяПриложения = Сеанс.ИмяПриложения;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает список полных имен всех объектов метаданных, использующихся в общем реквизите-разделителе,
//  имя которого передано в качестве значения параметра Разделитель, и значения свойств объекта метаданных,
//  которые могут потребоваться для дальнейшей его обработки в универсальных алгоритмах.
// Для последовательностей и журналов документов определяет разделенность по входящим документам: любому из.
//
// Параметры:
//  Разделитель - Строка, имя общего реквизита.
//
// Возвращаемое значение:
// ФиксированноеСоответствие,
//  Ключ - Строка, полное имя объекта метаданных,
//  Значение - ФиксированнаяСтруктура,
//    Имя - Строка, имя объекта метаданных,
//    Разделитель - Строка, имя разделителя, которым разделен объект метаданных,
//    УсловноеРазделение - Строка, полное имя объекта метаданных, выступающего в качестве условия использования
//      разделения объекта метаданных данным разделителем.
//
Функция РазделенныеОбъектыМетаданных(Знач Разделитель) Экспорт
	
	Результат = Новый Соответствие;
	
	// I. Перебрать состав всех общих реквизитов.
	
	МетаданныеОбщегоРеквизита = Метаданные.ОбщиеРеквизиты.Найти(Разделитель);
	Если МетаданныеОбщегоРеквизита = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий реквизит %1 не обнаружен в конфигурации.'"), Разделитель);
	КонецЕсли;
	
	Если МетаданныеОбщегоРеквизита.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
		
		СоставОбщегоРеквизита = ОбщегоНазначенияПовтИсп.СоставОбщегоРеквизита(МетаданныеОбщегоРеквизита.Имя);
		
		ИспользоватьОбщийРеквизит = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
		АвтоИспользоватьОбщийРеквизит = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
		АвтоИспользованиеОбщегоРеквизита = 
			(МетаданныеОбщегоРеквизита.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать);
		
		Для Каждого ЭлементСостава Из СоставОбщегоРеквизита Цикл
			
			Если (АвтоИспользованиеОбщегоРеквизита И ЭлементСостава.Использование = АвтоИспользоватьОбщийРеквизит)
				ИЛИ ЭлементСостава.Использование = ИспользоватьОбщийРеквизит Тогда
				
				ДополнительныеДанные = Новый Структура("Имя,Разделитель,УсловноеРазделение", ЭлементСостава.Метаданные.Имя, Разделитель, Неопределено);
				Если ЭлементСостава.УсловноеРазделение <> Неопределено Тогда
					ДополнительныеДанные.УсловноеРазделение = ЭлементСостава.УсловноеРазделение.ПолноеИмя();
				КонецЕсли;
				
				Результат.Вставить(ЭлементСостава.Метаданные.ПолноеИмя(), Новый ФиксированнаяСтруктура(ДополнительныеДанные));
				
				// По регистрам расчета дополнительно определяется разделенность подчиненных им перерасчетов.
				Если ОбщегоНазначения.ЭтоРегистрРасчета(ЭлементСостава.Метаданные) Тогда
					
					Перерасчеты = ЭлементСостава.Метаданные.Перерасчеты;
					Для Каждого Перерасчет Из Перерасчеты Цикл
						
						ДополнительныеДанные.Имя = Перерасчет.Имя;
						Результат.Вставить(Перерасчет.ПолноеИмя(), Новый ФиксированнаяСтруктура(ДополнительныеДанные));
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для общего реквизита %1 не используется разделение данных.'"), Разделитель);
		
	КонецЕсли;
	
	// II. Для последовательностей и журналов определять разделенность по входящим документам.
	
	// 1) Последовательности. Перебор с проверкой первого входящего документа. Если документов нет, считаем разделенной.
	Для Каждого МетаданныеПоследовательности Из Метаданные.Последовательности Цикл
		
		ДополнительныеДанные = Новый Структура("Имя,Разделитель,УсловноеРазделение", МетаданныеПоследовательности.Имя, Разделитель, Неопределено);
		
		Если МетаданныеПоследовательности.Документы.Количество() = 0 Тогда
			
			ШаблонСообщения = НСтр("ru = 'В последовательность %1 не включено ни одного документа.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, МетаданныеПоследовательности.Имя);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение разделенных объектов метаданных'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, 
				МетаданныеПоследовательности, , ТекстСообщения);
			
			Результат.Вставить(МетаданныеПоследовательности.ПолноеИмя(), Новый ФиксированнаяСтруктура(ДополнительныеДанные));
			
		Иначе
			
			Для Каждого МетаданныеДокумента Из МетаданныеПоследовательности.Документы Цикл
				
				ДополнительныеДанныеОтДокумента = Результат.Получить(МетаданныеДокумента.ПолноеИмя());
				
				Если ДополнительныеДанныеОтДокумента <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ДополнительныеДанные, ДополнительныеДанныеОтДокумента, "Разделитель,УсловноеРазделение");
					Результат.Вставить(МетаданныеПоследовательности.ПолноеИмя(), Новый ФиксированнаяСтруктура(ДополнительныеДанные));
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 2) Журналы. Перебор с проверкой первого входящего документа. Если документов нет, считаем разделенным.
	Для Каждого МетаданныеЖурналаДокументов Из Метаданные.ЖурналыДокументов Цикл
		
		ДополнительныеДанные = Новый Структура("Имя,Разделитель,УсловноеРазделение", МетаданныеЖурналаДокументов.Имя, Разделитель, Неопределено);
		
		Если МетаданныеЖурналаДокументов.РегистрируемыеДокументы.Количество() = 0 Тогда
			
			ШаблонСообщения = НСтр("ru = 'В журнал %1 не включено ни одного документа.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, МетаданныеЖурналаДокументов.Имя);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение разделенных объектов метаданных'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, 
				МетаданныеЖурналаДокументов, , ТекстСообщения);
			
			Результат.Вставить(МетаданныеЖурналаДокументов.ПолноеИмя(), Новый ФиксированнаяСтруктура(ДополнительныеДанные));
			
		Иначе
			
			Для Каждого МетаданныеДокумента Из МетаданныеЖурналаДокументов.РегистрируемыеДокументы Цикл
				
				ДополнительныеДанныеОтДокумента = Результат.Получить(МетаданныеДокумента.ПолноеИмя());
				
				Если ДополнительныеДанныеОтДокумента <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ДополнительныеДанные, ДополнительныеДанныеОтДокумента, "Разделитель,УсловноеРазделение");
					Результат.Вставить(МетаданныеЖурналаДокументов.ПолноеИмя(), Новый ФиксированнаяСтруктура(ДополнительныеДанные));
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

// Возвращает признак принадлежности узла к плану обмена РИБ.
//
// Параметры:
//  УзелИнформационнойБазы - ПланОбменаСсылка - узел плана обмена, для которого требуется получить значение функции.
// 
//  Возвращаемое значение:
//   Истина - узел принадлежит плану обмена РИБ, иначе Ложь.
//
Функция ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы) Экспорт

	Возврат УзелИнформационнойБазы.Метаданные().РаспределеннаяИнформационнаяБаза;
	
КонецФункции

// Возвращает Истина, если программа работает в режиме автономного рабочего места.
Функция ЭтоАвтономноеРабочееМесто() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
	
	Возврат МодульОбменДаннымиСервер.ЭтоАвтономноеРабочееМесто();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры, применяемых к элементам командного интерфейса, связанных с параметрическими функциональными опциями.
Функция ОпцииИнтерфейса() Экспорт
	
	ОпцииИнтерфейса = Новый Структура;
	Попытка
		ОбщегоНазначенияПереопределяемый.ПриОпределенииПараметровФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ИмяСобытия = НСтр("ru = 'Настройка интерфейса'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При получении опций интерфейса произошла ошибка:
			   |%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;
	
	Возврат ОпцииИнтерфейса;
КонецФункции

// Доступность объектов метаданных по функциональным опциям.
Функция ДоступностьОбъектовПоОпциям() Экспорт
	Параметры = ОбщегоНазначенияПовтИсп.ОпцииИнтерфейса();
	Если ТипЗнч(Параметры) = Тип("ФиксированнаяСтруктура") Тогда
		Параметры = Новый Структура(Параметры);
	КонецЕсли;
	
	ДоступностьОбъектов = Новый Соответствие;
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Значение = -1;
		Для Каждого Элемент Из ФункциональнаяОпция.Состав Цикл
			Если Элемент.Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Значение = -1 Тогда
				Значение = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя, Параметры);
			КонецЕсли;
			ПолноеИмя = Элемент.Объект.ПолноеИмя();
			Если Значение = Истина Тогда
				ДоступностьОбъектов.Вставить(ПолноеИмя, Истина);
			Иначе
				Если ДоступностьОбъектов[ПолноеИмя] = Неопределено Тогда
					ДоступностьОбъектов.Вставить(ПолноеИмя, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ДоступностьОбъектов;
КонецФункции

#КонецОбласти
