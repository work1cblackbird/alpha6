
#Область ПрограммныйИнтерфейс

#Область НастройкаИнтеграцииЭлектронныхДокументов

// Вызывается при определении типов электронных документов, которые можно формировать или отражать в учете в конфигурации.
// Для добавления типа электронного документа в коллекцию необходимо использовать
// процедуру см. ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента.
//
// Параметры:
//  АктуальныеТипы - Соответствие - типы актуальных электронных документов.
//
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(АктуальныеТипы) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	// Для обмена по форматам ФНС.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.АктВыполненныхРабот);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ТоварнаяНакладная);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.АктНаПередачуПрав);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.СчетФактура);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.УПД);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.СоглашениеОбИзмененииСтоимости);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.КорректировочныйСчетФактура);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.УКД);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.АктОРасхождениях);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.АктСверкиВзаиморасчетов);
	
	// Для обмена по форматам CML 2.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ЗаказТовара);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ОтветНаЗаказ);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.СчетНаОплату);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияТоваров");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказНаряд");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданный");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетНаОплату");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ВозвратПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияАвтомобилей");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КорректировкаРеализацииАвтомобилей");
	СоставКомандЭДО.Исходящие.Добавить("Документ.АктСверкиВзаиморасчетов");
	//СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитенту");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РеализацияТоваров");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказНаряд");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетФактураВыданный");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплату");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ВозвратПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РеализацияАвтомобилей");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаРеализацииАвтомобилей");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.АктСверкиВзаиморасчетов");
	
	СоставКомандЭДО.Входящие.Добавить("Документ.ПоступлениеТоваров");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	СоставКомандЭДО.Входящие.Добавить("Документ.КорректировкаПоступления");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПокупателя");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетОтПоставщика");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетОтПоставщикаЗаАвтомобили");
	СоставКомандЭДО.Входящие.Добавить("Документ.КорректировкаПоступленияАвтомобилей");
	СоставКомандЭДО.Входящие.Добавить("Документ.ПоступлениеАвтомобилей");
	СоставКомандЭДО.Входящие.Добавить("Документ.ПоступлениеДопРасходов");
	//СоставКомандЭДО.Входящие.Добавить("Документ.ОтчетКомиссионера");
	
	СоставКомандЭДО.Организации.Добавить("Справочник.Организации");
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаКонтрагентовСправочникПартнеры
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ИспользоватьОбменЭДМеждуОрганизациями
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	
	Отказ = Истина;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ИспользоватьПрямойОбмен
Процедура ИспользоватьПрямойОбмен(Использовать) Экспорт
	
	Использовать = Ложь;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.РазрешеноИспользоватьВнутреннийЭДО
Процедура РазрешеноИспользоватьВнутреннийЭДО(Использовать) Экспорт
	
	Использовать = Ложь;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииОбъектовМетаданныхСПоддержкойДиагностикиОшибок
Процедура ПриОпределенииОбъектовМетаданныхСПоддержкойДиагностикиОшибок(СписокЭлементов) Экспорт
	
	СписокЭлементов.Добавить(Метаданные.Документы.РеализацияТоваров);
	СписокЭлементов.Добавить(Метаданные.Документы.ЗаказНаряд);
	СписокЭлементов.Добавить(Метаданные.Документы.КорректировкаРеализации);
	СписокЭлементов.Добавить(Метаданные.Документы.СчетФактураВыданный);
	СписокЭлементов.Добавить(Метаданные.Документы.ЗаказПоставщику);
	СписокЭлементов.Добавить(Метаданные.Документы.СчетНаОплату);
	СписокЭлементов.Добавить(Метаданные.Документы.ОтчетКомитенту);
	СписокЭлементов.Добавить(Метаданные.Документы.ВозвратПоставщику);
	СписокЭлементов.Добавить(Метаданные.Документы.ПоступлениеТоваров);
	СписокЭлементов.Добавить(Метаданные.Документы.СчетФактураПолученный);
	СписокЭлементов.Добавить(Метаданные.Документы.ЗаказПокупателя);
	СписокЭлементов.Добавить(Метаданные.Документы.СчетОтПоставщика);
	СписокЭлементов.Добавить(Метаданные.Документы.ОтчетКомиссионера);
	СписокЭлементов.Добавить(Метаданные.Документы.КорректировкаПоступления);
	СписокЭлементов.Добавить(Метаданные.Документы.АктСверкиВзаиморасчетов);
	СписокЭлементов.Добавить(Метаданные.Документы.ПоступлениеДопРасходов);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриПроверкеИспользованияУведомлений
Процедура ПриПроверкеИспользованияУведомлений(Используется) Экспорт

	// TODO: Сделать настройку для базы данных
	Используется = Ложь;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ИспользованиеНастройкиФормированияУниверсальныхДокументов
Процедура ИспользованиеНастройкиФормированияУниверсальныхДокументов(Использовать = Истина) Экспорт
	
	// TODO: Управляеть необходимостью отправлять в одном документе. Разобраться нужно ли использовать.
	//Использовать = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеОбъектовУчетаОбъектамПодсистемы

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьСоответствиеПеречислений
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ФормыСобственности");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьЗначениеПеречисления
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если ИмяПеречисления = "ИмяПеречисления" Тогда
		
		Если ПредставлениеПеречисления = "ФизЛицо" Тогда
		
			НайденноеЗначение = Перечисления.ФормыСобственности.ЧастноеЛицо;
			
		ИначеЕсли ПредставлениеПеречисления =  "ЮрЛицо" Тогда
			
			НайденноеЗначение = Перечисления.ФормыСобственности.ЮридическоеЛицо;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("10",      Справочники.СтавкиНДС.ОсновнаяСтавкаНДС10);
	Соответствие.Вставить("10/110",  Справочники.СтавкиНДС.РасчетнаяСтавкаНДС10);
	Соответствие.Вставить("20",      Справочники.СтавкиНДС.ОсновнаяСтавкаНДС);
	Соответствие.Вставить("20/120",  Справочники.СтавкиНДС.ОсновнаяСтавкаНДСРасчетная);
	Соответствие.Вставить("без НДС", Справочники.СтавкиНДС.БезНДС);
	
	Соответствие.Вставить("0", "0");
	Соответствие.Вставить("НДС исчисляется налоговым агентом", "НДС исчисляется налоговым агентом");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ
Процедура СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ(СоответствиеТиповЭлектронныхДокументовДокументамИБ) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.АктВыполненныхРабот, НСтр("ru = 'Акт выполненных работ для клиента'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.ТоварнаяНакладная, НСтр("ru = 'Реализация товаров, услуг и автомобилей, заказ-наряд'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.АктНаПередачуПрав, НСтр("ru = 'Акт на передачу прав'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.СчетФактура, НСтр("ru = 'Счет-фактура выданный'"));	
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.УПД, НСтр("ru = 'Акты, накладные, заказ-наряды, счет-фактуры'"));	
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.СоглашениеОбИзмененииСтоимости, НСтр("ru = 'Корректировка реализации товаров и автомобилей'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.КорректировочныйСчетФактура, НСтр("ru = 'Счет-фактура выданный (корректировка)'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.УКД, НСтр("ru = 'Акты, накладные, заказ-наряды, счет-фактуры (корректировка)'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.АктОРасхождениях, НСтр("ru = 'Акт о расхождениях после поступления'"));		
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.ОтветНаЗаказ, НСтр("ru = 'Заказ клиента'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.ЗаказТовара, НСтр("ru = 'Заказ поставщику'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.СчетНаОплату, НСтр("ru = 'Счет на оплату'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.ОтчетОСписанииКомиссионногоТовара, НСтр("ru = 'Отчет комитенту о списании'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.ОтчетОПродажахКомиссионногоТовара, НСтр("ru = 'Отчет комитенту о продажах'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.КаталогТоваров, НСтр("ru = 'Каталог товаров (формируется из Настройки отправки)''"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(
		ТипыДокументов.АктСверкиВзаиморасчетов, НСтр("ru = 'Акт сверки взаиморасчетов''"));
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоТипуЭлектронногоДокумента
Процедура СписокТиповДокументовПоТипуЭлектронногоДокумента(ТипДокумента, ОписанияОбъектовУчета) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если
		ТипДокумента = ТипыДокументов.ТоварнаяНакладная 
		Или ТипДокумента = ТипыДокументов.АктНаПередачуПрав
		Или ТипДокумента = ТипыДокументов.АктВыполненныхРабот
		Или ТипДокумента = ТипыДокументов.АктОРасхождениях
	Тогда
		
		ОписанияОбъектовУчета.Добавить(Документы.ПоступлениеТоваров.ПустаяСсылка(), 
			Метаданные.Документы.ПоступлениеТоваров.Представление());
			
	ИначеЕсли
		ТипДокумента = ТипыДокументов.СчетФактура
		Или ТипДокумента = ТипыДокументов.КорректировочныйСчетФактура
		Или ТипДокумента = ТипыДокументов.УПД
		Или ТипДокумента = ТипыДокументов.УКД
	Тогда
		
		ОписанияОбъектовУчета.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
			
	ИначеЕсли ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда

		ОписанияОбъектовУчета.Добавить(Документы.КорректировкаПоступления.ПустаяСсылка(),
			Метаданные.Документы.КорректировкаПоступления.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара Тогда
		
		ОписанияОбъектовУчета.Добавить(Документы.ОтчетКомиссионера.ПустаяСсылка(), 
			Метаданные.Документы.ОтчетКомиссионера.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетНаОплату Тогда
		
		ОписанияОбъектовУчета.Добавить(Документы.СчетОтПоставщика.ПустаяСсылка(),
			Метаданные.Документы.СчетОтПоставщика.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ЗаказТовара Тогда
		
		ОписанияОбъектовУчета.Добавить(Документы.ЗаказПокупателя.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПокупателя.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
		
		ОписанияОбъектовУчета.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПоставщику.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.АктСверкиВзаиморасчетов Тогда
		
		ОписанияОбъектовУчета.Добавить(Документы.АктСверкиВзаиморасчетов.ПустаяСсылка(),
			Метаданные.Документы.АктСверкиВзаиморасчетов.Представление());
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормированияДокументов

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭлектронногоДокумента) Экспорт
	
	ТипыДокументов        = ОбменСКонтрагентами.ТипыДокументов();
	НаправленияДокументов = ОбменСКонтрагентами.НаправленияДокументов();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	ЗаполнятьРеквизиты = Истина;
	ПараметрЭлектронногоДокумента = ПараметрыЭлектронногоДокумента.Добавить();
	
	ТипИсточника = ТипЗнч(Источник);
	
	ТипПоступленияТоваров = Новый Массив();
	ТипПоступленияТоваров.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
	ТипПоступленияТоваров.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
	ТипПоступленияТоваров.Добавить(Тип("ДокументСсылка.КорректировкаПоступления")); 
	ТипПоступленияТоваров.Добавить(Тип("ДокументСсылка.ПоступлениеАвтомобилей"));
	ТипПоступленияТоваров.Добавить(Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей"));
	ТипПоступленияТоваров.Добавить(Тип("ДокументОбъект.ПоступлениеТоваров"));
	ТипПоступленияТоваров.Добавить(Тип("ДокументОбъект.СчетФактураПолученный"));
	ТипПоступленияТоваров.Добавить(Тип("ДокументОбъект.КорректировкаПоступления"));
	ТипПоступленияТоваров.Добавить(Тип("ДокументОбъект.ПоступлениеАвтомобилей"));
	ТипПоступленияТоваров.Добавить(Тип("ДокументОбъект.КорректировкаПоступленияАвтомобилей"));
	
	Если
		ТипИсточника = Тип("ДокументСсылка.РеализацияТоваров")
		Или ТипИсточника = Тип("ДокументОбъект.РеализацияТоваров")
	Тогда

		Если Источник.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг Тогда
		
			Тип = ТипыДокументов.АктВыполненныхРабот;
			
		Иначе
		
			Тип = ТипыДокументов.ТоварнаяНакладная;
			
		КонецЕсли;
		
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РеализацияАвтомобилей") 
		Или ТипИсточника = Тип("ДокументОбъект.РеализацияАвтомобилей") Тогда
		
		Тип = ТипыДокументов.ТоварнаяНакладная;
		НаправлениеЭД = НаправленияДокументов.Исходящий; 
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей")
		Или ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализацииАвтомобилей")
	Тогда
		
		Если ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, 
			"Организация, Контрагент, ДоговорВзаиморасчетов, ДоступнаПечатьУКД");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.ДоговорВзаиморасчетов;
			ДоступнаПечатьУКД = ЗначенияРеквизитов.ДоступнаПечатьУКД;
			
		Иначе
			
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.ДоговорВзаиморасчетов;
			ДоступнаПечатьУКД = Источник.ДоступнаПечатьУКД;
			
		КонецЕсли;
		
		Если ДоступнаПечатьУКД = Истина Тогда
			
			Тип = ТипыДокументов.СоглашениеОбИзмененииСтоимости;
			
		Иначе
			
			Тип = ТипыДокументов.ТоварнаяНакладная;
			
		КонецЕсли;
		
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		ЗаполнятьРеквизиты = Ложь;
		
	ИначеЕсли ТипПоступленияТоваров.Найти(ТипИсточника) <> Неопределено Тогда
		
		Тип = ТипыДокументов.ТоварнаяНакладная;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		Или ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный")
	Тогда
		
		Если ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "ХозОперация");
			
			РеквизитыИсточника.Вставить("ДоступнаПечатьУКД",
				?(РеквизитыИсточника.ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка,
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ДокументОснование, "ДоступнаПечатьУКД"),
					Ложь));
			
		Иначе
			
			//@skip-check reading-attribute-from-database
			РеквизитыИсточника = Новый Структура("ХозОперация", Источник.ХозОперация);
			РеквизитыИсточника.Вставить("ДоступнаПечатьУКД",
				?(РеквизитыИсточника.ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка,
					Источник.ДоступнаПечатьУКД,
					Ложь));
			//@skip-check reading-attribute-from-database
			//@skip-check wrong-string-literal-content
			
		КонецЕсли;
		
		Если
			РеквизитыИсточника.ДоступнаПечатьУКД
		Тогда
			
			Тип = ТипыДокументов.КорректировочныйСчетФактура;
			
		Иначе
			
			Тип = ТипыДокументов.СчетФактура;
			
		КонецЕсли;
		
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		
		Если Документы.СчетФактураВыданный.ЭтоАвансовыйСчетФактура(Источник) Тогда
			
			ПараметрЭлектронногоДокумента.ФормированиеУниверсальногоДокумента =
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			
		КонецЕсли;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		Или ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику")
	Тогда
		
		Тип = ТипыДокументов.ЗаказТовара;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.ЗаказПокупателя")
		Или ТипИсточника = Тип("ДокументОбъект.ЗаказПокупателя")
	Тогда
		
		Тип = ТипыДокументов.ОтветНаЗаказ;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.СчетНаОплату")
		Или ТипИсточника = Тип("ДокументОбъект.СчетНаОплату")
	Тогда
	
		Тип = ТипыДокументов.СчетНаОплату;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.СчетОтПоставщика")
		Или ТипИсточника = Тип("ДокументОбъект.СчетОтПоставщика")
	Тогда
		
		Тип = ТипыДокументов.СчетНаОплату;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили")
		Или ТипИсточника = Тип("ДокументОбъект.СчетОтПоставщикаЗаАвтомобили")
	Тогда
		
		Тип = ТипыДокументов.СчетНаОплату;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.ОтчетКомитенту")
		Или ТипИсточника = Тип("ДокументОбъект.ОтчетКомитенту")
	Тогда
		
		Тип = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации")
		Или ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации")
	Тогда
			
		Если ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, 
				"Организация, Контрагент, ДоговорВзаиморасчетов, ДоступнаПечатьУКД");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.ДоговорВзаиморасчетов;
			ДоступнаПечатьУКД = ЗначенияРеквизитов.ДоступнаПечатьУКД;
			
		Иначе
			
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.ДоговорВзаиморасчетов;
			ДоступнаПечатьУКД = Источник.ДоступнаПечатьУКД;
			
		КонецЕсли;
		
		Если ДоступнаПечатьУКД = Истина Тогда
			
			Тип = ТипыДокументов.СоглашениеОбИзмененииСтоимости;
			
		Иначе
			
			Если
				ЗначениеЗаполнено(Источник.ДокументОснование)
				И Источник.ДокументОснование.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг
			Тогда
					
				Тип = ТипыДокументов.АктВыполненныхРабот;
					
			Иначе
					
				Тип = ТипыДокументов.ТоварнаяНакладная;
					
			КонецЕсли;
			
		КонецЕсли;

		НаправлениеЭД = НаправленияДокументов.Исходящий;
		ЗаполнятьРеквизиты = Ложь;
			
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.ЗаказНаряд")
		Или ТипИсточника = Тип("ДокументОбъект.ЗаказНаряд")
	Тогда
	
		Если Источник.ОтправлятьКакАктОбОказанииУслуг Тогда
			
			Тип = ТипыДокументов.АктВыполненныхРабот;
			НаправлениеЭД = НаправленияДокументов.Исходящий;
			
		Иначе
			
			Тип = ТипыДокументов.ТоварнаяНакладная;
			НаправлениеЭД = НаправленияДокументов.Исходящий;
			
		КонецЕсли;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.ВозвратПоставщику")
		Или ТипИсточника = Тип("ДокументОбъект.ВозвратПоставщику")
	Тогда
		
		Тип = ТипыДокументов.ТоварнаяНакладная;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.АктСверкиВзаиморасчетов")
		Или ТипИсточника = Тип("ДокументОбъект.АктСверкиВзаиморасчетов")
	Тогда
		
		Тип = ТипыДокументов.АктСверкиВзаиморасчетов;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		
	ИначеЕсли
		ТипИсточника = Тип("ДокументСсылка.ПоступлениеДопРасходов")
		Или ТипИсточника = Тип("ДокументОбъект.ПоступлениеДопРасходов")
	Тогда
		
		Тип = ТипыДокументов.АктВыполненныхРабот;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

	ПараметрЭлектронногоДокумента.Тип = Тип;
	ПараметрЭлектронногоДокумента.Направление = НаправлениеЭД;
	
	Если ЗаполнятьРеквизиты Тогда
		
		Если ЭтоСсылка Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДоговорВзаиморасчетов");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.ДоговорВзаиморасчетов;
			
		Иначе
			
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.ДоговорВзаиморасчетов;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрЭлектронногоДокумента.Организация = Организация;
	ПараметрЭлектронногоДокумента.Контрагент  = Контрагент;
	ПараметрЭлектронногоДокумента.ДоговорКонтрагента = Договор;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьЗапросКонструктораДополнительныхПолейШапки
Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если Параметры.ТипДокумента = ТипыДокументов.УПД
		Или Параметры.ТипДокумента = ТипыДокументов.УКД Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиУПД();
	
	ИначеЕсли Параметры.ТипДокумента = ТипыДокументов.СчетФактура
		Или Параметры.ТипДокумента = ТипыДокументов.КорректировочныйСчетФактура Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры();
		
	ИначеЕсли Параметры.ТипДокумента = ТипыДокументов.ТоварнаяНакладная
		Или Параметры.ТипДокумента = ТипыДокументов.АктВыполненныхРабот
		Или Параметры.ТипДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиРеализации();
		
	ИначеЕсли Параметры.ТипДокумента = ТипыДокументов.АктСверкиВзаиморасчетов Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиАкта();
		
	ИначеЕсли Параметры.ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиКорректировкиРеализации();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеИОтражениеВУчетеДокументов

#Область УКД2020

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД2020_ИнформацияПродавца
Процедура ЗаполнитьДанныеУКД2020_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;
	
	Если ТипДокумента = ТипыДокументов.УКД Тогда
		
		Настройки.Вставить("Функция", "КСЧФДИС");
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		Настройки.Вставить("Функция", "ДИС");
		
	Иначе
		
		Настройки.Вставить("Функция", "КСЧФ");
		
	КонецЕсли;
	
	ДокументСсылкаКСЧФ = Основание;
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ДокументСсылкаКСЧФ = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(Основание).СчетФактура;
		
		Если ТипДокумента = ТипыДокументов.УКД Тогда
			
			Описание.Основания.Добавить(ДокументСсылкаКСЧФ);
			
		КонецЕсли;
		
	Иначе
		
		Если ТипДокумента = ТипыДокументов.УКД Тогда
			
			Описание.Основания.Добавить(Основание.ДокументОснование);
			
		КонецЕсли;
		
		Основание = Основание.ДокументОснование

	КонецЕсли;
	
	ЭтоКорректировкаРеализацииАвтомобилей = ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей");
	
	Если ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		Если ЭтоКорректировкаРеализацииАвтомобилей Тогда
			ДанныеДляФормированияЭД = ДайДанныеДИСАвтомобиляДляУКД_2020_БезСчетФактуры(Основание);
		Иначе
			ДанныеДляФормированияЭД = ДайДанныеДИСДляУКД_2020_БезСчетФактуры(Основание);
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ДокументСсылкаКСЧФ) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для формирования УКД счет-фактура должна быть заполнена.'"));
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если ЭтоКорректировкаРеализацииАвтомобилей Тогда
			ДанныеДляФормированияЭД = ДайДанныеСчетаФактурыРеализацииАвтомобиляДляУКД_2020(ДокументСсылкаКСЧФ);
		Иначе
			ДанныеДляФормированияЭД = ДайДанныеСчетаФактурыДляУКД_2020(ДокументСсылкаКСЧФ);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДанныеДляФормированияЭД.Шапка.ХозОперацияКорректировки =
			Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах
			И ДанныеДляФормированияЭД.Товары.Количество() = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При исправлении первичного документа общее количество после корректировки не может быть равным 0.
		                            |Аннулируйте первичный документ, если он был выписан ошибочно. Если это возврат, то используйте вид операции ""Корректировка по согласованию сторон"".'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ДеревоДанных = ЗаполнитьДанныеПервичногоДокументаУКД_2020(ДанныеДляФормированияЭД, Настройки, Данные);
	ДеревоДанных = ЗаполнитьДеревоДанныхУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
	ДеревоДанных = ЗаполнитьИнформациюОТоварахТоваровУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД2020_ИнформацияПокупателя
Процедура ЗаполнитьДанныеУКД2020_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ДанныеВходящегоЭлектронногоДокумента = ИнформацияПокупателяУКД(Основания);
	СохранитьРеквизитВДереве(
		Данные,
		"СоставительДокументаНаименование",
		ДанныеВходящегоЭлектронногоДокумента.ОрганизацияНаименованиеПолное
	);
	СохранитьРеквизитВДереве(
		Данные,
		"ДатаСогласования",
		ДанныеВходящегоЭлектронногоДокумента.ДатаСогласования
	);
	СохранитьРеквизитВДереве(
		Данные,
		"СодержаниеОперации",
		ДанныеВходящегоЭлектронногоДокумента.СодержаниеОперации
	);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКД_2020
Процедура НайтиСоздатьУКД_2020(ДеревоДанных,
                               СсылкиНаВладельцев = Неопределено,
                               СпособОбработки  = Неопределено,
                               ОписаниеОшибки = "") Экспорт
	
	ПервичныйДокументИСчетФактура = РазделитьПервичныйДокументИСчетФактуру(СсылкиНаВладельцев);
	ПервичныйДокумент = ПервичныйДокументИСчетФактура.ПервичныйДокумент;
	СчетФактура = ПервичныйДокументИСчетФактура.СчетФактура;
	
	ДокументыУчета = Новый Массив;
	ФункцияУКД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ФункцияУКД = "ДИС" Или ФункцияУКД = "КСЧФДИС" Тогда
			
			ПервичныйДокумент = НайтиСоздатьУКДДокументКорректировки_2020(ДеревоДанных, ПервичныйДокумент, СпособОбработки);	
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				"ДокументыОснованияСчетаФактуры",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПервичныйДокумент)
			);
			
		КонецЕсли;
		
		Если ФункцияУКД = "КСЧФ" Или ФункцияУКД = "КСЧФДИС" Тогда
			
			СчетФактура = НайтиСоздатьУКДКорректировочныйСчетФактуру_2020(
				ДеревоДанных,
				СчетФактура,
				СпособОбработки
			);
			
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				
				ДокументыУчета.Добавить(СчетФактура);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
				
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Создание УКД в формате 2020 года''"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ОписаниеОшибки
		);
		
	КонецПопытки;
							   
КонецПроцедуры

#КонецОбласти

#Область УПД_5_02

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД_5_02_ИнформацияПродавца
Процедура ЗаполнитьДанныеУПД_5_02_ИнформацияПродавца(Основание, Настройки, Данные, Описание, Отказ) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;
	
	Настройки.Вставить("ЭтоФормат502", Истина);
	
	Если ТипДокумента = ТипыДокументов.УПД Тогда
		
		Настройки.Вставить("Функция", "СЧФДОП");
		ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС_5_02(Основание, Настройки, Данные, Описание, Отказ);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетФактура Тогда
		
		Настройки.Вставить("Функция", "СЧФ");
		ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС_5_02(Основание, Настройки, Данные, Описание, Отказ);
		
	Иначе
		
		Настройки.Вставить("Функция", "ДОП");
		ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_5_02(Основание, Настройки, Данные, Описание, Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД_5_02_ИнформацияПокупателя
Процедура ЗаполнитьДанныеУПД_5_02_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ИнформацияПокупателяУПД = ИнформацияПокупателяУПД(Основания);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"СоставительДокументаНаименование",
		ИнформацияПокупателяУПД.ОрганизацияНаименованиеПолное
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"СодержаниеФХЖ.СведенияОПринятииТоваров.ДатаПолученияТоваров",
		ИнформацияПокупателяУПД.ДатаПолученияТоваров
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"СодержаниеФХЖ.СведенияОПринятииТоваров.СодержаниеОперации",
		ИнформацияПокупателяУПД.СодержаниеОперации
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"СодержаниеФХЖ.СведенияОПринятииТоваров.КодИтога",
		ИнформацияПокупателяУПД.КодИтога
	);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокументт_5_02
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент_5_02(ДеревоДанных,
                                                             СсылкиНаВладельцев = Неопределено,
                                                             СпособОбработки = Неопределено,
                                                             ОписаниеОшибки = "") Экспорт
															 
	ПервичныйДокументИСчетФактура = РазделитьПервичныйДокументИСчетФактуру(СсылкиНаВладельцев);
	ПервичныйДокумент = ПервичныйДокументИСчетФактура.ПервичныйДокумент;
	СчетФактура = ПервичныйДокументИСчетФактура.СчетФактура;
	
	ДокументыУчета = Новый Массив;
	ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	НачатьТранзакцию();
	
	Попытка
	
		Если ФункцияУПД = "ДОП" Или ФункцияУПД = "СЧФДОП" Тогда
			
			Если ФункцияУПД = "СЧФДОП" И ТипЗнч(СпособОбработки) <> Тип("Строка") Тогда
				СпособОбработкиПервичногоДокумента = СпособОбработки.ПервичныйДокумент;
			Иначе
				СпособОбработкиПервичногоДокумента = СпособОбработки;
			КонецЕсли;
			
			ПервичныйДокумент = НайтиСоздатьУПДДокументОПередаче_5_02(ДеревоДанных, ПервичныйДокумент, СпособОбработкиПервичногоДокумента);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				"ДокументыОснованияСчетаФактуры",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПервичныйДокумент)
			);
			
		КонецЕсли;

		Если ФункцияУПД = "СЧФ" Или ФункцияУПД = "СЧФДОП" Тогда
			
			Если ФункцияУПД = "СЧФДОП" И ТипЗнч(СпособОбработки) <> Тип("Строка") Тогда
				СпособОбработкиСФ = СпособОбработки.СчетФактура;
			Иначе
				СпособОбработкиСФ = СпособОбработки;
			КонецЕсли;
			
			СчетФактура = НайтиСоздатьУПДСчетФактуру_5_02(ДеревоДанных, СчетФактура, СпособОбработки);
			
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				
				ДокументыУчета.Добавить(СчетФактура);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Создание УПД в формате 5.02''"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ОписаниеОшибки
		);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область УПД_2019

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПродавца
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;
	
	Если ТипДокумента = ТипыДокументов.УПД Тогда
		
		Настройки.Вставить("Функция", "СЧФДОП");
		ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС_2019(Основание, Настройки, Данные, Описание, Отказ)
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетФактура Тогда
		
		Настройки.Вставить("Функция", "СЧФ");
		ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС_2019(Основание, Настройки, Данные, Описание, Отказ);
		
	Иначе
		
		Настройки.Вставить("Функция", "ДОП");
		ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_2019(Основание, Настройки, Данные, Описание, Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент_2019
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоДанных,
                                                             СсылкиНаВладельцев = Неопределено,
                                                             СпособОбработки = Неопределено,
                                                             ОписаниеОшибки = "") Экспорт
															 
	ПервичныйДокументИСчетФактура = РазделитьПервичныйДокументИСчетФактуру(СсылкиНаВладельцев);
	ПервичныйДокумент = ПервичныйДокументИСчетФактура.ПервичныйДокумент;
	СчетФактура = ПервичныйДокументИСчетФактура.СчетФактура;
	
	ДокументыУчета = Новый Массив;
	ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	НачатьТранзакцию();
	
	Попытка
	
		Если ФункцияУПД = "ДОП" Или ФункцияУПД = "СЧФДОП" Тогда
			
			Если ФункцияУПД = "СЧФДОП" И ТипЗнч(СпособОбработки) <> Тип("Строка") Тогда
				СпособОбработкиПервичногоДокумента = СпособОбработки.ПервичныйДокумент;
			Иначе
				СпособОбработкиПервичногоДокумента = СпособОбработки;
			КонецЕсли;
			
			ПервичныйДокумент = НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, ПервичныйДокумент, СпособОбработкиПервичногоДокумента);	
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				"ДокументыОснованияСчетаФактуры",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПервичныйДокумент)
			);
			
		КонецЕсли;

		Если ФункцияУПД = "СЧФ" Или ФункцияУПД = "СЧФДОП" Тогда
			
			Если ФункцияУПД = "СЧФДОП" И ТипЗнч(СпособОбработки) <> Тип("Строка") Тогда
				СпособОбработкиСФ = СпособОбработки.СчетФактура;
			Иначе
				СпособОбработкиСФ = СпособОбработки;
			КонецЕсли;
			
			СчетФактура = НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СчетФактура, СпособОбработки);
			
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				
				ДокументыУчета.Добавить(СчетФактура);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Создание УПД в формате 2019 года''"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ОписаниеОшибки
		);
		
	КонецПопытки;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПокупателя
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ИнформацияПокупателяУПД = ИнформацияПокупателяУПД(Основания);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"СоставительДокументаНаименование",
		ИнформацияПокупателяУПД.ОрганизацияНаименованиеПолное
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"СведенияОПринятииТоваров.ДатаПолученияТоваров",
		ИнформацияПокупателяУПД.ДатаПолученияТоваров
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"СведенияОПринятииТоваров.СодержаниеОперации",
		ИнформацияПокупателяУПД.СодержаниеОперации
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"СведенияОПринятииТоваров.КодИтога",
		ИнформацияПокупателяУПД.КодИтога
	);
	
КонецПроцедуры

#КонецОбласти

#Область УПД

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных,
                                                        СсылкиНаВладельцев = Неопределено,
                                                        СпособОбработки = Неопределено,
                                                        ОписаниеОшибки = "") Экспорт
														
	ПервичныйДокументИСчетФактура = РазделитьПервичныйДокументИСчетФактуру(СсылкиНаВладельцев);
	ПервичныйДокумент = ПервичныйДокументИСчетФактура.ПервичныйДокумент;
	СчетФактура = ПервичныйДокументИСчетФактура.СчетФактура;
	
	ДокументыУчета = Новый Массив;
	ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	НачатьТранзакцию();
	
	Попытка
	
		Если ФункцияУПД = "ДОП" Или ФункцияУПД = "СЧФДОП" Тогда
			
			ПервичныйДокумент = НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, ПервичныйДокумент, СпособОбработки);	
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				"ДокументыОснованияСчетаФактуры",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПервичныйДокумент)
			);
			
		КонецЕсли;

		Если ФункцияУПД = "СЧФ" Или ФункцияУПД = "СЧФДОП" Тогда
			
			СчетФактура = НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура, СпособОбработки);
			
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				
				ДокументыУчета.Добавить(СчетФактура);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Создание УПД''"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ОписаниеОшибки
		);
		
	КонецПопытки;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД_ИнформацияПокупателя
Процедура ЗаполнитьДанныеУПД_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ИнформацияПокупателяУПД = ИнформацияПокупателяУПД(Основания);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"СоставительДокументаНаименование",
		ИнформацияПокупателяУПД.ОрганизацияНаименованиеПолное
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"ДатаПолученияТоваров",
		ИнформацияПокупателяУПД.ДатаПолученияТоваров
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"СодержаниеОперации",
		ИнформацияПокупателяУПД.СодержаниеОперации
	);
	
КонецПроцедуры

#КонецОбласти

#Область УКД

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД_ИнформацияПродавца
Процедура ЗаполнитьДанныеУКД_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;
	
	Если ТипДокумента = ТипыДокументов.УКД Тогда
		
		Настройки.Вставить("Функция", "КСЧФДИС");
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		Настройки.Вставить("Функция", "ДИС");
		
	Иначе
		
		Настройки.Вставить("Функция", "КСЧФ");
		
	КонецЕсли;
	
	ДокументСсылкаКСЧФ = Основание;
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ДокументСсылкаКСЧФ = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(Основание).СчетФактура;
		
		Если ТипДокумента = ТипыДокументов.УКД Тогда
			
			Описание.Основания.Добавить(ДокументСсылкаКСЧФ);
			
		КонецЕсли;
		
	Иначе
		
		Если ТипДокумента = ТипыДокументов.УКД Тогда
			
			Описание.Основания.Добавить(Основание.ДокументОснование);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументСсылкаКСЧФ) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для формирования УКД счет-фактура должна быть заполнена.'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ДайДанныеСчетаФактурыДляУКД(ДокументСсылкаКСЧФ);
	ДеревоДанных = ЗаполнитьДанныеПервичногоДокументаУКД_2020(ДанныеДляФормированияЭД, Настройки, Данные);
	ДеревоДанных = ЗаполнитьДеревоДанныхУКД(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
	ДеревоДанных = ЗаполнитьИнформациюОТоварахТоваровУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД_ИнформацияПокупателя
Процедура ЗаполнитьДанныеУКД_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ДанныеВходящегоЭлектронногоДокумента = ИнформацияПокупателяУКД(Основания);
	СохранитьРеквизитВДереве(
		Данные,
		"СоставительДокументаНаименование",
		ДанныеВходящегоЭлектронногоДокумента.ОрганизацияНаименованиеПолное
	);
	СохранитьРеквизитВДереве(
		Данные,
		"ДатаСогласования",
		ДанныеВходящегоЭлектронногоДокумента.ДатаСогласования
	);
	СохранитьРеквизитВДереве(
		Данные,
		"СодержаниеОперации",
		ДанныеВходящегоЭлектронногоДокумента.СодержаниеОперации
	);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйКорректировочныйДокумент
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных,
                                                            СсылкиНаВладельцев = Неопределено,
                                                            СпособОбработки  = Неопределено,
                                                            ОписаниеОшибки = "") Экспорт
	
	ПервичныйДокументИСчетФактура = РазделитьПервичныйДокументИСчетФактуру(СсылкиНаВладельцев);
	ПервичныйДокумент = ПервичныйДокументИСчетФактура.ПервичныйДокумент;
	СчетФактура = ПервичныйДокументИСчетФактура.СчетФактура;
	
	ДокументыУчета = Новый Массив;
	ФункцияУКД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ФункцияУКД = "ДИС" Или ФункцияУКД = "КСЧФДИС" Тогда
			
			ПервичныйДокумент = НайтиСоздатьУКДДокументКорректировки(ДеревоДанных, ПервичныйДокумент, СпособОбработки);	
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				"ДокументыОснованияСчетаФактуры",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПервичныйДокумент)
			);
			
		КонецЕсли;
		
		Если ФункцияУКД = "КСЧФ" Или ФункцияУКД = "КСЧФДИС" Тогда
			
			СчетФактура = НайтиСоздатьУКДКорректировочныйСчетФактуру(
				ДеревоДанных,
				СчетФактура,
				СпособОбработки
			);
			
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				
				ДокументыУчета.Добавить(СчетФактура);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
				
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Создание УКД в формате 2020 года''"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ОписаниеОшибки
		);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаТоваров

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ВыгрузкаЗНВЭДОВозможна(Основание);
		
	КонецЕсли;
	
	ДанныеДляПечати = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Основание).ПолучитьДанныеДляПечатиТОРГ12(Основание);
	
	СохранитьРеквизитВДереве(Данные, "НомерТоварнойНакладной",
		УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Основание));
	СохранитьРеквизитВДереве(Данные, "ДатаТоварнойНакладной", ДанныеДляПечати.Дата);
		
	Если ЗначениеЗаполнено(ДанныеДляПечати.ДокументОснование) Тогда
		
		ДокументыОснования = Новый ТаблицаЗначений;
		ДокументыОснования.Колонки.Добавить("ДокОснованиеНаименование");
		ДокументыОснования.Колонки.Добавить("ДокОснованиеНомер");
		ДокументыОснования.Колонки.Добавить("ДокОснованиеДата");

		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеДляПечати.ДокументОснование, "Наименование,ДатаНачала");
		
		СтрокаДокументыОснования = ДокументыОснования.Добавить();
		СтрокаДокументыОснования.ДокОснованиеНомер        = ДанныеДляПечати.ОснованиеНомер;
		СтрокаДокументыОснования.ДокОснованиеДата         = РеквизитыОснования.ДатаНачала;
		СтрокаДокументыОснования.ДокОснованиеНаименование = РеквизитыОснования.Наименование;  
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования, "ДокОснованиеДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));

		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, ДокументыОснования, "Основание");
		
	КонецЕсли;
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Организация, СведенияОПоставщике);
		
	ЗаполнитьДанныеУчастника(Данные, СведенияОПоставщике, "Поставщик",  "Юр", , ДанныеДляПечати.Дата);
	
	Если ЗначениеЗаполнено(СведенияОПоставщике.КПП) Тогда
		
		НаименованиеСоставителяДокумента = СведенияОПоставщике.ПолноеНаименование
			+ СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП);
		
	Иначе
		
		НаименованиеСоставителяДокумента = СведенияОПоставщике.ПолноеНаименование
			+ СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН);
		
	КонецЕсли;

	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		ДанныеДляПечати.Организация, "Объект.Организация");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные,
		"НаименованиеСоставителяДокумента",
		НаименованиеСоставителяДокумента,
		ПараметрыОбработкиОшибок
	);
	
	СведенияОПокупателе = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Плательщик, СведенияОПокупателе);
	ЗаполнитьДанныеУчастника(Данные, СведенияОПокупателе, "Плательщик", "Юр", , ДанныеДляПечати.Дата, Истина);
	
	СведенияОГрузополучателе = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Грузополучатель,
		СведенияОГрузополучателе);
	ЗаполнитьДанныеУчастника(Данные, СведенияОГрузополучателе, "Грузополучатель",  "Факт", , ДанныеДляПечати.Дата);
	
	ВалютаКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляПечати.ВалютаДокумента, "Код");
	СохранитьРеквизитВДереве(Данные, "ВалютаКод", ВалютаКод);
	
	ВалютаНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляПечати.ВалютаДокумента, "Наименование");
	СохранитьРеквизитВДереве(Данные, "ВалютаНаименование", ВалютаНаименование);
	
	ИтоговыеСуммы = Новый Структура;
	ИтоговыеСуммы.Вставить("КоличествоМест", 0);
	ИтоговыеСуммы.Вставить("МассаНетто", 0);
	ИтоговыеСуммы.Вставить("Количество", 0);
	ИтоговыеСуммы.Вставить("СуммаБезНДС", 0);
	ИтоговыеСуммы.Вставить("СуммаНДС", 0);
	ИтоговыеСуммы.Вставить("СуммаСНДС", 0);
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаб.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК Код,
	|	ВремТаб.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК Наименование,
	|	ВремТаб.НомерСтроки КАК НомерСтроки,
	|	ВремТаб.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ВремТаб КАК ВремТаб"; 
	
	Если ТипЗнч(ДанныеДляПечати.ВыборкаТабличнойЧасти) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваров = ДанныеДляПечати.ВыборкаТабличнойЧасти;
	Иначе
		ТаблицаТоваров = ДанныеДляПечати.ВыборкаТабличнойЧасти.Выгрузить();
	КонецЕсли;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	ВыборкаЕдиницИзмерения = Запрос.Выполнить().Выгрузить();
	
	// Добавим данные о товарах
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");	
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");	
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТочностьДляМассы = 3;
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
	
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл
		
		ДанныеСтрокиСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(
			СтрокаТовары,
			Основание,
			ПолучитьЗначениеПараметраСтруктуры(Основание, "ИмяТабличнойЧасти", "Товары")
		);
		СтрокаТовары.МассаНетто = Окр(СтрокаТовары.Количество, ТочностьДляМассы);
		СтрокаТовары.КоличествоМест = СтрокаТовары.Количество;
		СтрокаТовары.КоличествоВОдномМесте = СтрокаТовары.Коэффициент;
		
		Если ЗначениеЗаполнено(СтрокаТовары.КоличествоМест) Тогда
			
			Если СтрокаТовары.КоличествоМест <> Цел(СтрокаТовары.КоличествоМест) Тогда
				
				СтрокаТовары.КоличествоМест = Цел(СтрокаТовары.КоличествоМест) + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.КоличествоВОдномМесте) Тогда
			
			Если СтрокаТовары.КоличествоВОдномМесте <> Цел(СтрокаТовары.КоличествоВОдномМесте) Тогда
				
				СтрокаТовары.КоличествоВОдномМесте = Цел(СтрокаТовары.КоличествоВОдномМесте) + 1;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		СтрокаТовары.Артикул = ДанныеСтрокиСтроки.Код;		
		СтрокаТовары.КодТовара = ДанныеСтрокиСтроки.Код;
		СтрокаТовары.НаименованиеНоменклатуры = ДанныеСтрокиСтроки.ТоварНаименование;
		
		БазоваяЕдИзм = ВыборкаЕдиницИзмерения.Найти(СтрокаТовары.НомерСтроки, "НомерСтроки");
		СтрокаТовары.ЕдиницаИзмеренияНаименование = СокрЛП(БазоваяЕдИзм.Наименование);
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(БазоваяЕдИзм.Код);
		СтрокаТовары.СуммаСНДС = СтрокаТовары.СуммаВсего;
		
		СтрокаТовары.СуммаБезНДС = СтрокаТовары.СуммаВсего - СтрокаТовары.СуммаНДС;
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
		
		СтрокаТовары.Сопоставление = СопоставленияНоменклатурыЭД(СтрокаТовары.Номенклатура,
			СтрокаТовары.ХарактеристикаНоменклатуры, СтрокаТовары.ЕдиницаИзмерения);
			
		ЗаполнитьШтрихкодыТоваровВСопоставление(
			СтрокаТовары.Сопоставление,
			ШтрихкодыНоменклатуры,
			ШтрихкодыКомбинаций,
			СтрокаТовары.Номенклатура,
			СтрокаТовары.ХарактеристикаНоменклатуры,
			СтрокаТовары.ЕдиницаИзмерения
		);
		
		Если Настройки.ВариантыЗаполненияПолей.ТоварКод = "Артикул" Тогда
				
			СтрокаТовары.ТоварКод = СокрЛП(СтрокаТовары.Артикул);
			
		ИначеЕсли
			Настройки.ВариантыЗаполненияПолей.ТоварКод = "Штрихкод"
			И СтрокаТовары.Сопоставление.Свойство("ШтрихкодКомбинации")
		Тогда
		
			СтрокаТовары.ТоварКод = СтрокаТовары.Сопоставление.ШтрихкодКомбинации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ЕдиницаИзмеренияНаименование";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнена наименование единицы измерения в справочнике ""Номенклатура"".'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "БазоваяЕдиницаКод";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Номенклатура"".'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, ОписаниеОшибкиДляТаблицы);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, ТаблицаТоваров, "ТаблицаТоваров");
	
	СохранитьРеквизитВДереве(Данные, "СведенияПоОтпускуГруза.ДатаОтпуска", ДанныеДляПечати.Дата);

	СохранитьРеквизитВДереве(Данные, "ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей",
		ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	СохранитьРеквизитВДереве(Данные, "ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписейПрописью",
		ЧислоПрописью(ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей, , ",,,,,,,,0"));
	СохранитьРеквизитВДереве(Данные, "ОбщиеСведенияОТоварнойНакладной.ВсегоМест", ИтоговыеСуммы.КоличествоМест);
	СохранитьРеквизитВДереве(Данные, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто", ИтоговыеСуммы.МассаНетто);

	Если ИтоговыеСуммы.КоличествоМест > 0 Тогда
		
		СохранитьРеквизитВДереве(Данные, "ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью",
			ЧислоПрописью(ИтоговыеСуммы.КоличествоМест, , ",,,,,,,,0"));
		
	КонецЕсли;
	
	СохранитьРеквизитВДереве(Данные, "ВсегоПоНакладной.КоличествоМест", ИтоговыеСуммы.КоличествоМест);
	СохранитьРеквизитВДереве(Данные, "ВсегоПоНакладной.МассаНетто", ИтоговыеСуммы.МассаНетто);
	СохранитьРеквизитВДереве(Данные, "ВсегоПоНакладной.СуммаБезНДС", ИтоговыеСуммы.СуммаБезНДС);
	СохранитьРеквизитВДереве(Данные, "ВсегоПоНакладной.СуммаНДС", ИтоговыеСуммы.СуммаНДС);
	СохранитьРеквизитВДереве(Данные, "ВсегоПоНакладной.СуммаСНДС", ИтоговыеСуммы.СуммаСНДС);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваров_ИнформацияПокупателя
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	СохранитьРеквизитВДереве(Данные, "ДатаПолученияГруза", ИнформацияПокупателяУПД(Основания).ДатаПолученияТоваров);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных,
                                              СсылкаНаВладельца,
                                              СпособОбработки = "",
                                              ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполнения = Новый Структура("ЗаполнятьПоСтуктуре", Истина);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВходящимДокументом("ТоварнойНакладной", ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияКонтрагентомИсточникГруппа(ДеревоДанных, ДанныеЗаполнения, "Поставщик");
	ДополнитьДанныеЗаполненияОрганизациейИсточникГруппа(ДеревоДанных, ДанныеЗаполнения, "Плательщик");
	ДополнитьДанныеЗаполненияПодразделениемКомпанииИсточникГруппа(ДеревоДанных, ДанныеЗаполнения, "Плательщик");
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
		
	Если СпособОбработки = "ПоступлениеАвтомобилей" Тогда
		
		ДополнитьДанныеЗаполненияАвтомобилямиТОРГ12(ДеревоДанных, ДанныеЗаполнения);

		СсылкаНаВладельца = ЗаполнитьДокументПоступленияАвтомобилей(СсылкаНаВладельца, ДанныеЗаполнения);
		
	ИначеЕсли СпособОбработки = "ВозвратТоваровОтКлиента" Тогда
		
		СсылкаНаВладельца = ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеЗаполнения);
		
	Иначе
		ДополнитьДанныеЗаполненияТоварамиТОРГ12(ДеревоДанных, ДанныеЗаполнения);

		СсылкаНаВладельца = ЗаполнитьДокументПоступленияТоваров(СсылкаНаВладельца, ДанныеЗаполнения);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаРезультатовРабот

// Подготавливает данные для электронного документа Передачи результатов работ (информация продавца)
// по приказу ФНС № ММВ-7-10/552@.
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - ожидаемый тип документа. Доступные значения представлены следующими свойствами
//                                   результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                    - АктВыполненныхРабот.
//  ДеревоДанных - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.Акт501_Исполнитель. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаУслуг_ИнформацияПродавца(Знач СсылкаНаОбъект, Знач Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	ДанныеДляПечати = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект)
		.ПолучитьДанныеДляПечатиТОРГ12(СсылкаНаОбъект);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		ДанныеДляПечати = Документы.ЗаказНаряд.ДанныеДляУДПЭДШапка(СсылкаНаОбъект);
		ДанныеДляПечати.Вставить(
			"ВыборкаТабличнойЧасти",
			Документы.ЗаказНаряд.ДанныеДляУДПЭДТовары(СсылкаНаОбъект, Истина, Ложь));
	КонецЕсли;
		
	Если ДанныеДляПечати.ВыборкаТабличнойЧасти <> Неопределено 
		И ТипЗнч(ДанныеДляПечати.ВыборкаТабличнойЧасти) <> Тип("ТаблицаЗначений") Тогда
		ВыборкаТабличнойЧасти = ДанныеДляПечати.ВыборкаТабличнойЧасти.Выгрузить();   
	Иначе
		ВыборкаТабличнойЧасти = ДанныеДляПечати.ВыборкаТабличнойЧасти;
	КонецЕсли;
	
	СохранитьРеквизитВДереве(ДеревоДанных, "НомерАкта",
		УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(СсылкаНаОбъект));
	СохранитьРеквизитВДереве(ДеревоДанных, "ДатаАкта", ДанныеДляПечати.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения",
		ДанныеДляПечати.Дата);
			
	ТекстЗаголовка = Нстр("ru = 'Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой стороны,
									|составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).'");
	СохранитьРеквизитВДереве(ДеревоДанных, "Заголовок", ТекстЗаголовка);
	
	СведенияОПоставщике = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Организация, СведенияОПоставщике);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Исполнитель", "Юр", , ДанныеДляПечати.Дата);
	
	Если ЗначениеЗаполнено(СведенияОПоставщике.КПП) Тогда
		
		НаименованиеСоставителяДокумента = СведенияОПоставщике.ПолноеНаименование
			+ СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП);
		
	Иначе
		
		НаименованиеСоставителяДокумента = СведенияОПоставщике.ПолноеНаименование
			+ СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН);
		
	КонецЕсли;

	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		ДанныеДляПечати.Организация, "Объект.Организация");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"НаименованиеСоставителяДокумента",
		НаименованиеСоставителяДокумента,
		ПараметрыОбработкиОшибок
	);
	
	СведенияОПокупателе = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Плательщик, СведенияОПокупателе);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Заказчик",    "Юр", , ДанныеДляПечати.Дата);
	
	ВалютаКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляПечати.ВалютаДокумента, "Код");
	СохранитьРеквизитВДереве(ДеревоДанных, "ВалютаКод", ВалютаКод);
	
	ЕстьКодЕдиницыИзмерения = ЕстьРеквизит(ВыборкаТабличнойЧасти, "ЕдиницаИзмеренияКод");
	ЕстьХарактеристикаНоменклатуры = ЕстьРеквизит(ВыборкаТабличнойЧасти, "ХарактеристикаНоменклатуры");
	ЕстьСуммаБезНДС = ЕстьРеквизит(ВыборкаТабличнойЧасти, "СуммаБезНДС");
	ЕстьСуммаСНДС = ЕстьРеквизит(ВыборкаТабличнойЧасти, "СуммаСНДС");
	
	Если Не ЕстьКодЕдиницыИзмерения Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВремТаб
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремТаб.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК Код,
		|	ВремТаб.НомерСтроки КАК НомерСтроки,
		|	ВремТаб.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	ВремТаб КАК ВремТаб";
		Запрос.УстановитьПараметр("ТаблицаТоваров", ВыборкаТабличнойЧасти);
		ВыборкаЕдиницИзмерения = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений();
	ТаблицаУслуг.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("Сопоставление");
	
	Для Каждого Строка Из ВыборкаТабличнойЧасти Цикл
		
		НоваяСтрока = ТаблицаУслуг.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.НаименованиеНоменклатуры = Строка.Номенклатура.Наименование;
		НоваяСтрока.Описание = 	НоваяСтрока.НаименованиеНоменклатуры + ?(
			ЕстьХарактеристикаНоменклатуры И ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры),
			" (" + Строка.ХарактеристикаНоменклатуры + ")",
			""
		);
		
		Если ЕстьСуммаБезНДС Тогда
			НоваяСтрока.СуммаБезНДС = Строка.СуммаБезНДС;
		Иначе
			НоваяСтрока.СуммаБезНДС = Строка.СуммаВсего - Строка.СуммаНДС;
		КонецЕсли;
		Если ЕстьСуммаСНДС Тогда
			НоваяСтрока.СуммаСНДС = Строка.СуммаСНДС;
		Иначе
			НоваяСтрока.СуммаСНДС   = Строка.СуммаВсего;
		КонецЕсли;
		
		Если ЕстьКодЕдиницыИзмерения Тогда
			БазоваяЕдИзмКод = Строка.ЕдиницаИзмеренияКод;
		Иначе
			БазоваяЕдИзм = ВыборкаЕдиницИзмерения.Найти(Строка.НомерСтроки, "НомерСтроки");
			БазоваяЕдИзмКод = БазоваяЕдИзм.Код;
		КонецЕсли;
		
		КодЕдИзмерения = ?(СокрЛП(БазоваяЕдИзмКод) <> "001", СокрЛП(БазоваяЕдИзмКод), "0000"); 
		НоваяСтрока.ЕдиницаИзмеренияКод = КодЕдИзмерения;
		
		Если ЕстьХарактеристикаНоменклатуры Тогда
			НоваяСтрока.Сопоставление = СопоставленияНоменклатурыЭД(Строка.Номенклатура,
				Строка.ХарактеристикаНоменклатуры, Строка.ЕдиницаИзмерения);
		КонецЕсли;
		
		Если Настройки.ВариантыЗаполненияПолей.ТоварКод = "Артикул" Тогда
				
			НоваяСтрока.ТоварКод = СокрЛП(НоваяСтрока.Артикул);
						
		КонецЕсли;
		
	КонецЦикла;
			
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ЕдиницаИзмеренияНаименование";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнена наименование единицы измерения в справочнике ""Номенклатура"".'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ЕдиницаИзмеренияКод";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Номенклатура"".'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "Количество";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнено количество в табличной части документа.'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг, ОписаниеОшибкиДляТаблицы);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");
	
	СохранитьРеквизитВДереве(ДеревоДанных, "ОписаниеУслуги.НачалоРабот", ДанныеДляПечати.Дата);
	СохранитьРеквизитВДереве(ДеревоДанных, "ОписаниеУслуги.КонецРабот",  ДанныеДляПечати.Дата);
	СохранитьРеквизитВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого",
		ТаблицаУслуг.Итог("СуммаБезНДС"));
	СохранитьРеквизитВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого",
		ТаблицаУслуг.Итог("СуммаНДС"));
	СохранитьРеквизитВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого",
		ТаблицаУслуг.Итог("СуммаСНДС"));
	
	СохранитьРеквизитВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения",
		ДанныеДляПечати.Дата);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаУслуг_ИнформацияПокупателя
Процедура ЗаполнитьДанныеПередачаУслуг_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(Основания) Тогда
		
		СохранитьРеквизитВДереве(Данные, "СведенияПоВыполнениюУслуг.ДатаЗаказа",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основания[0], "Дата"));
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаРезультатовРабот
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполнения = Новый Структура("ЗаполнятьПоСтуктуре", Истина);
	ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.УслугиСтороннихОрганизаций);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВходящимДокументом("Акта", ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияКонтрагентомИсточникГруппа(ДеревоДанных, ДанныеЗаполнения, "Заказчик");
	ДополнитьДанныеЗаполненияОрганизациейИсточникГруппа(ДеревоДанных, ДанныеЗаполнения, "Исполнитель");
	ДополнитьДанныеЗаполненияПодразделениемКомпанииИсточникГруппа(ДеревоДанных, ДанныеЗаполнения, "Исполнитель");
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияТоварамиАкт501(ДеревоДанных, ДанныеЗаполнения);
	
	СсылкаНаВладельца = ЗаполнитьДокументПоступленияТоваров(СсылкаНаВладельца, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область CML_Форматы

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеРеквизитыОрганизации
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, Данные, Отказ) Экспорт
	СведенияОбОрганизации = ЭлектронноеВзаимодействиеАльфаАвто.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	ЗаполнитьДанныеУчастника(Данные, СведенияОбОрганизации, "Организация", "Юр", ТекущаяДатаСеанса());	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоСчету
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	ДанныеПоСчета = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект).ВыгрузитьДанныеДляЭД(СсылкаНаОбъект);
	РеквизитыШапки = ДанныеПоСчета.Шапка;

	СохранитьРеквизитВДереве(ДеревоДокумента, "Номер", УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(СсылкаНаОбъект));
	СохранитьРеквизитВДереве(ДеревоДокумента, "Дата", РеквизитыШапки.Дата);
	
	СохранитьРеквизитВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	СохранитьРеквизитВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.Комментарий);
	СохранитьРеквизитВДереве(ДеревоДокумента, "Курс",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СохранитьРеквизитВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		
		СохранитьРеквизитВДереве(ДеревоДокумента, "ДокументОснования.НомерДокументаОснования",
			РеквизитыШапки.ДокументОснование.Номер);
		СохранитьРеквизитВДереве(ДеревоДокумента, "ДокументОснования.ДатаДокументаОснования",
			XMLСтрока(РеквизитыШапки.ДокументОснование.Дата));
		СохранитьРеквизитВДереве(ДеревоДокумента, "ДокументОснования.НаименованиеДокументаОснования",
			Строка(РеквизитыШапки.ДокументОснование));
		
	КонецЕсли;	
	
	
	СведенияОПоставщике = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, СведенияОПоставщике);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец", "Юр", , РеквизитыШапки.Дата);
	
	СведенияОПокупателе = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, СведенияОПокупателе);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", , РеквизитыШапки.Дата);
	
	СохранитьРеквизитВДереве(ДеревоДокумента, "СрокПлатежа", РеквизитыШапки.ДействителенДо);
	СохранитьРеквизитВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	
	ТаблицаТоваров = ДанныеПоСчета.Товары;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ЕдиницаРабот) Тогда
		
		Если РеквизитыШапки.ЕдиницаРабот = Перечисления.ЕдиницаИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияЧас Тогда
			
			КодЕИ = "356";
			НаименованиеЕИ = "ч";
			НаименованиеПолноеЕИ = "Час";
			МеждународноеСокращениеЕИ = "h";
			
		ИначеЕсли РеквизитыШапки.ЕдиницаРабот = Перечисления.ЕдиницаИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияПрочерк Тогда
			
			КодЕИ = "-";
			НаименованиеЕИ = "-";
			НаименованиеПолноеЕИ = "-";
			МеждународноеСокращениеЕИ = "-";
			
		КонецЕсли;
		
		Для Каждого Товар Из ТаблицаТоваров Цикл
			
			Товар.БазоваяЕдиницаКод = КодЕИ;
			Товар.ЕдиницаИзмеренияКодПоОКЕИ = КодЕИ;
			Товар.БазоваяЕдиницаНаименование = НаименованиеЕИ;
			Товар.БазоваяЕдиницаНаименованиеПолное = НаименованиеПолноеЕИ;
			Товар.БазоваяЕдиницаМеждународноеСокращение = МеждународноеСокращениеЕИ;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ЕстьСодержание = ТаблицаТоваров.Колонки.Найти("Содержание") <> Неопределено;
	Для Каждого Товар Из ТаблицаТоваров Цикл
			
		Товар.Сопоставление = СопоставленияНоменклатурыЭД(Товар.Номенклатура,
			Товар.ХарактеристикаНоменклатуры, Товар.ЕдиницаИзмерения);
			
		Если ЕстьСодержание И ЗначениеЗаполнено(Товар.Содержание) Тогда
			Товар.Наименование = Товар.Содержание;
		Иначе
			
			// Добавим Характеристику в наименование товара.
			Если ЗначениеЗаполнено(Товар.ХарактеристикаНоменклатуры) Тогда
			
				Товар.Наименование = Товар.Наименование + ", " + Товар.ХарактеристикаНоменклатуры;
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогоПоДокументу.Сумма", ТаблицаТоваров.Итог("Сумма"));
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"));
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.ЦенаВключаетНДС);
	
	СуммаБезСкидки = ТаблицаТоваров.Итог("Сумма");
	СуммаСкидки = 0;
	
	Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
		
		СуммаСкидки = ТаблицаТоваров.Итог("СуммаСкидки");
		
	КонецЕсли;
	
	СуммаБезСкидки = СуммаБезСкидки + СуммаСкидки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента,
		"ИтогоПоДокументу.СуммаСкидки",
		СуммаСкидки
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента,
		"ИтогоПоДокументу.СуммаБезСкидки",
		СуммаБезСкидки
	);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(РеквизитыШапки.БанковскийСчет);
		БанковскиеРеквизиты = Неопределено;
		ПолучитьБанковскиеРеквизиты(МассивСчетов, БанковскиеРеквизиты);
		БанковскиеРеквизиты = БанковскиеРеквизиты[0];
		
		СохранитьРеквизитВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", БанковскиеРеквизиты.РасчетныйСчет);
		СохранитьРеквизитВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", БанковскиеРеквизиты.Банк);
		СохранитьРеквизитВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", БанковскиеРеквизиты.БИК);
		СохранитьРеквизитВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский",
			БанковскиеРеквизиты.КорреспондентскийСчет);
		
		Если ЗначениеЗаполнено(БанковскиеРеквизиты.Ссылка.БанкДляРасчетов) Тогда
			
			СохранитьРеквизитВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование",
				БанковскиеРеквизиты.БанкДляРасчетов);
			СохранитьРеквизитВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский",
				БанковскиеРеквизиты.БанкДляРасчетовКоррСчет);
			СохранитьРеквизитВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК",
				БанковскиеРеквизиты.БанкДляРасчетовБИК);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(
		ИтоговаяСтрока,
		"%Сумма%",
		ФорматСуммСВалютой(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта)
	);
	ИтоговаяСтрока = ИтоговаяСтрока
		+ Символы.ПС
		+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоЗаказуТоваров
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	ЗаказПоставщику = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект).ВыгрузитьДанныеДляЭД(СсылкаНаОбъект);
	СохранитьРеквизитВДереве(ДеревоДокумента, "Валюта", ЗаказПоставщику.Шапка.ВалютаКод);
	СохранитьРеквизитВДереве(ДеревоДокумента, "Курс",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ЗаказПоставщику.Шапка.Валюта, ЗаказПоставщику.Шапка.Дата).Курс);	
	СохранитьРеквизитВДереве(ДеревоДокумента, "Сумма", ЗаказПоставщику.Шапка.СуммаДокумента);
	СохранитьРеквизитВДереве(ДеревоДокумента, "Комментарий", ЗаказПоставщику.Шапка.Комментарий);
	СохранитьРеквизитВДереве(ДеревоДокумента, "ДокументыОснования", ЗаказПоставщику.Шапка.ДокументОснование);
	
	СведенияОПоставщике = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ЗаказПоставщику.Шапка.Контрагент,
		СведенияОПоставщике);
	ЗаполнитьДанныеУчастника(
		ДеревоДокумента,
		СведенияОПоставщике,
		"Продавец",
		"Юр",
		,
		ЗаказПоставщику.Шапка.Дата
	);
		
	СведенияОПокупателе = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ЗаказПоставщику.Шапка.Организация,
		СведенияОПокупателе);
	ЗаполнитьДанныеУчастника(
		ДеревоДокумента,
		СведенияОПокупателе,
		"Получатель",
		"Юр",
		,
		ЗаказПоставщику.Шапка.Дата
	);
	ЗаполнитьДанныеУчастника(
		ДеревоДокумента,
		СведенияОПокупателе,
		"Покупатель",
		"Юр",
		,
		ЗаказПоставщику.Шапка.Дата
	);
	ЗаполнитьДоговор(ДеревоДокумента, ЗаказПоставщику.Шапка);
	
	ТоварыВЗаказеПоставщику = НовыеТоварыВЗаказеПоставщику();
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(ЗаказПоставщику.Товары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
	
	Для Каждого Строка Из ЗаказПоставщику.Товары Цикл
		
		НоваяСтрока = ТоварыВЗаказеПоставщику.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Сопоставление = СопоставленияНоменклатурыЭД(Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры, Строка.ЕдиницаИзмерения);
			
		ЗаполнитьШтрихкодыТоваровВСопоставление(
			НоваяСтрока.Сопоставление,
			ШтрихкодыНоменклатуры,
			ШтрихкодыКомбинаций,
			Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры,
			Строка.ЕдиницаИзмерения
		);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТоварыВЗаказеПоставщику, "Товары");
	
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТоварыВЗаказеПоставщику.Итог("Сумма"));
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог",
		ТоварыВЗаказеПоставщику.Итог("СуммаНДС"));
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", ЗаказПоставщику.Шапка.ЦенаВключаетНДС);
	ИтоговаяСтрока = СтрШаблон(
		НСтр("ru='Всего наименований %1, на сумму %2'"),
		ТоварыВЗаказеПоставщику.Количество(), 
		ФорматСуммСВалютой(ЗаказПоставщику.Шапка.СуммаДокумента, ЗаказПоставщику.Шапка.Валюта)
	);
	
	СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
		ЗаказПоставщику.Шапка.СуммаДокумента,
		ЗаказПоставщику.Шапка.Валюта
	);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтветуНаЗаказ
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	ЗаказПокупателя = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект).ВыгрузитьДанныеДляЭД(СсылкаНаОбъект);
	СохранитьРеквизитВДереве(ДеревоДокумента, "Валюта", ЗаказПокупателя.Шапка.ВалютаКод);
	СохранитьРеквизитВДереве(ДеревоДокумента, "Курс",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ЗаказПокупателя.Шапка.Валюта, ЗаказПокупателя.Шапка.Дата).Курс);	
	СохранитьРеквизитВДереве(ДеревоДокумента, "Сумма", ЗаказПокупателя.Шапка.СуммаДокумента);
	СохранитьРеквизитВДереве(ДеревоДокумента, "Комментарий", ЗаказПокупателя.Шапка.Комментарий);
	СохранитьРеквизитВДереве(ДеревоДокумента, "ДокументыОснования", ЗаказПокупателя.Шапка.ДокументОснование);
	
	СведенияОПоставщике = Неопределено;                     
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ЗаказПокупателя.Шапка.Организация,
		СведенияОПоставщике);
	ЗаполнитьДанныеУчастника(
		ДеревоДокумента,
		СведенияОПоставщике,
		"Продавец",
		"Юр",
		,
		ЗаказПокупателя.Шапка.Дата
	);

	Получатель = УправлениеСвойствами.ЗначениеСвойства(СсылкаНаОбъект, 
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗаказчикКонтрагент);
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Получатель = ЗаказПокупателя.Шапка.Контрагент;
	КонецЕсли;
			
	СведенияОПолучателе = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Получатель,
		СведенияОПолучателе);
	ЗаполнитьДанныеУчастника(
		ДеревоДокумента,
		СведенияОПолучателе,
		"Получатель",
		"Юр",
		,
		ЗаказПокупателя.Шапка.Дата
	);
	
	СведенияОПокупателе = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ЗаказПокупателя.Шапка.Контрагент, 
		СведенияОПокупателе);
	ЗаполнитьДанныеУчастника(
		ДеревоДокумента, 
		СведенияОПокупателе, 
		"Покупатель", 
		"Юр", 
		, 
		ЗаказПокупателя.Шапка.Дата);

	ЗаполнитьДоговор(ДеревоДокумента, ЗаказПокупателя.Шапка);
	
	ТоварыВЗаказеПокупателя = НовыеТоварыВЗаказеПоставщику();
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(ЗаказПокупателя.Товары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
	
	Для Каждого Строка Из ЗаказПокупателя.Товары Цикл
		
		НоваяСтрока = ТоварыВЗаказеПокупателя.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Сопоставление = СопоставленияНоменклатурыЭД(Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры, Строка.ЕдиницаИзмерения);
			
		ЗаполнитьШтрихкодыТоваровВСопоставление(
			НоваяСтрока.Сопоставление,
			ШтрихкодыНоменклатуры,
			ШтрихкодыКомбинаций,
			Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры,
			Строка.ЕдиницаИзмерения
		);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТоварыВЗаказеПокупателя, "Товары");
	
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТоварыВЗаказеПокупателя.Итог("Сумма"));
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог",
		ТоварыВЗаказеПокупателя.Итог("СуммаНДС"));
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", ЗаказПокупателя.Шапка.ЦенаВключаетНДС);
	ИтоговаяСтрока = СтрШаблон(
		НСтр("ru='Всего наименований %1, на сумму %2'"),
		ТоварыВЗаказеПокупателя.Количество(), 
		ФорматСуммСВалютой(ЗаказПокупателя.Шапка.СуммаДокумента, ЗаказПокупателя.Шапка.Валюта)
	);
	
	СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
		ЗаказПокупателя.Шапка.СуммаДокумента,
		ЗаказПокупателя.Шапка.Валюта
	);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СохранитьРеквизитВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД 
// Сохраняет данные из электронного документа в объект учета.
//
// Параметры:
//  СтрокаДляЗагрузки - СтрокаДереваЗначений - строка дерева, описывающая данные электронного документа. 
//  ДеревоРазбора     - ДеревоЗначений - дерево с найденными ссылками на учетные сущности.   
//	ДополнительныеДанные - Структура - Дополнительные данные для отражения в учете. Могут передаваться другими
//                                     подсистемами из состава библиотеки. Состав данных должен быть описан в 
//                                     документации соответствующей подсистемы. 
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//  ПараметрыОбработки - Структура - дополнительные параметры для обработки объекта.
//  НайденныйОбъект - Произвольный - созданный объект.
//
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки,
                                    ДеревоРазбора,  
									ДополнительныеДанные,
                                    ОписаниеОшибки,
                                    ПараметрыОбработки = Неопределено,
                                    НайденныйОбъект = Неопределено) Экспорт
									
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		
		СсылкаНаВладельца = ПараметрыОбработки.СсылкаНаВладельца;
		Записывать        = ПараметрыОбработки.Записывать;
		СпособОбработки   = ПараметрыОбработки.СпособОбработки;
		
	КонецЕсли;
	
	Если СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.СчетНаОплату Тогда
		
		Если СпособОбработки = "СчетОтПоставщикаЗаАвтомобили" Тогда
		
			НайденныйОбъект = НайтиСоздатьСчетОтПоставщикаЗаАвтомобили(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
			
		Иначе
			
			НайденныйОбъект = НайтиСоздатьСчетОтПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ЗаказТовара Тогда
		
		НайденныйОбъект = НайтиСоздатьЗаказПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);

	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ОтветНаЗаказ Тогда 
		
		НайденныйОбъект = НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД
Процедура СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, НовыйЭлемент) Экспорт
	
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.Организации" Тогда
		
		НовыйЭлемент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(
			"Организации", 
			ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "ИНН", Истина, ДеревоРазбора), 
			ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "КПП", Истина, ДеревоРазбора)
		);
		
	ИначеЕсли СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.Контрагенты" Тогда
		
		НовыйЭлемент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(
			"Контрагенты",
			ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "ИНН", Истина, ДеревоРазбора), 
			ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "КПП", Истина, ДеревоРазбора)
		);
		
	ИначеЕсли СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.БанковскиеСчета" Тогда
		
		НовыйЭлемент = СоздатьБанковскийСчет(СтрокаОбъекта, "Банковские счета", ДеревоРазбора);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов
Процедура ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов(Таблица) Экспорт
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "Организации";
	НовСтрока.Порядок 		= 1;
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "Контрагенты";
	НовСтрока.Порядок 		= 2;
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "Валюты";
	НовСтрока.Порядок 		= 3;
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "БанковскиеСчетаКонтрагентов";
	НовСтрока.Порядок 		= 4;
	
КонецПроцедуры

#КонецОбласти

#Область АктСверкиВзаиморасчетов

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияОтправителя()
Процедура ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияОтправителя(Основание, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	Если Не ЭтоАктСверки(Основание) Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документ ""Акт сверки расчетов с контрагентом"" недоступен.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Основание,
		"ЭтоЭлектронныйДокумент,ДокументКонтрагента");
	
	Если Не РеквизитыДокумента.ЭтоЭлектронныйДокумент Тогда
		ТекстСообщения = НСтр("ru = 'Не установлен признак составления в электронном виде.'");
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли РеквизитыДокумента.ДокументКонтрагента Тогда
		Возврат;
		ТекстСообщения = НСтр("ru = 'Для входящего документа недоступно формирование электронного документа.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаАктаСверкиДанныеОтправителя();
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Результат = Запрос.ВыполнитьПакет();
	ВыгрузкаРеквизитовДокумента = Результат[0].Выгрузить();
	
	Если ВыгрузкаРеквизитовДокумента.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для формирования электронного документа.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	РеквизитыДокумента = ВыгрузкаРеквизитовДокумента[0];
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаНачалаПериодаСверки", РеквизитыДокумента.ДатаНачала);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаОкончанияПериодаСверки", РеквизитыДокумента.ДатаОкончания);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"НомерДокумента", УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Основание));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"КодВалюты",
		РеквизитыДокумента.КодВалюты,
		НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте заполнение в документе валюты документа.'"));
	ЗаполнитьРеквизитыУчастника(ДеревоДанных, РеквизитыДокумента.Организация, "Отправитель");
	ЗаполнитьРеквизитыУчастника(ДеревоДанных, РеквизитыДокумента.Контрагент, "Получатель");
	
	ТаблицаИтоги = Результат[1].Выгрузить();
	СальдоНаНачалоПериодаДебет = 0;
	СальдоНаНачалоПериодаКредит = 0;
	Если РеквизитыДокумента.ОстатокНаНачало > 0 Тогда
		СальдоНаНачалоПериодаДебет = РеквизитыДокумента.ОстатокНаНачало;
	Иначе
		СальдоНаНачалоПериодаКредит = - РеквизитыДокумента.ОстатокНаНачало;
	КонецЕсли;
	ОборотПоДебету   = ТаблицаИтоги.Итог("УвеличениеДолга");
	ОборотПоКредиту = ТаблицаИтоги.Итог("УменьшениеДолга");
	СальдоНаКонецПериодаДебет = СальдоНаНачалоПериодаДебет + ОборотПоДебету;
	СальдоНаКонецПериодаКредит = СальдоНаНачалоПериодаКредит + ОборотПоКредиту;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.СальдоНаНачалоПериодаДебет", СальдоНаНачалоПериодаДебет);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.СальдоНаНачалоПериодаКредит", СальдоНаНачалоПериодаКредит);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.ОборотПоДебету", ОборотПоДебету);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.ОборотПоКредиту", ОборотПоКредиту);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.СальдоНаКонецПериодаДебет", СальдоНаКонецПериодаДебет);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.СальдоНаКонецПериодаКредит", СальдоНаКонецПериодаКредит);
	
	СведенияПоДоговорам = СведенияПоДоговорам();
	НомерСтроки = 1;
	
	ВыборкаПоДоговорам = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДоговорам.Следующий() Цикл
		
		НомерСтрокиДокумента = 1;
		СтрокаПоДоговору = СведенияПоДоговорам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоДоговору, ВыборкаПоДоговорам);
		СтрокаПоДоговору.НомерСтроки = НомерСтроки;
		ОписаниеВидаДоговора = Строка(ВыборкаПоДоговорам.ВидДоговора);
		
		Если ВыборкаПоДоговорам.ВидДоговора = Перечисления.ВидыДоговоров.Продажа Тогда
			СтрокаПоДоговору.ОписаниеДоговора = "С покупателем";
		ИначеЕсли ВыборкаПоДоговорам.ВидДоговора = Перечисления.ВидыДоговоров.Покупка Тогда
			СтрокаПоДоговору.ОписаниеДоговора = "С поставщиком";
		Иначе
			СтрокаПоДоговору.ОписаниеДоговора = "Прочее";
		КонецЕсли;
		
		СведенияПоДокументам = СведенияПоДокументам();
		СтрокаПоДоговору.СведенияПоДокументам = СведенияПоДокументам;
		
		ВыборкаПоДокументам = ВыборкаПоДоговорам.Выбрать();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			СтрокаПоДокументу = СведенияПоДокументам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоДокументу, ВыборкаПоДокументам);
			СтрокаПоДокументу.НомерСтроки = НомерСтрокиДокумента;
			
			СведенияПоОперациям = СведенияПоОперациям();
			СтрокаПоДокументу.СведенияПоОперациям = СведенияПоОперациям;
			
			СтрокаПоОперациям = СведенияПоОперациям.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоОперациям, ВыборкаПоДокументам);
			СтрокаПоОперациям.НомерСтроки = 1;
			СтрокаПоОперациям.ПорядковыйНомерСтроки = 1;
			
			НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
		ДеревоДанных,
		СведенияПоДоговорам,
		"СведенияОтправителя.СведенияПоДоговорам");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияПолучателя()
Процедура ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияПолучателя(ОбъектыУчета, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	Если ТипЗнч(ОбъектыУчета) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
		
		Основание = ОбъектыУчета;
		
	Иначе
		
		Если ОбъектыУчета.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Основание = ОбъектыУчета[0];
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоАктСверки(Основание) Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документ ""Акт сверки расчетов с контрагентом"" недоступен.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Основание,
		"ЭтоЭлектронныйДокумент,ДокументКонтрагента");
	
	Если Не РеквизитыДокумента.ЭтоЭлектронныйДокумент Тогда
		ТекстСообщения = НСтр("ru = 'Не установлен признак составления в электронном виде.'");
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли Не РеквизитыДокумента.ДокументКонтрагента Тогда
		ТекстСообщения = НСтр("ru = 'Для входящего документа недоступно формирование электронного документа.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаАктаСверкиДанныеПолучателя();
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Результат = Запрос.ВыполнитьПакет();
	ВыгрузкаРеквизитовДокумента = Результат[0].Выгрузить();
	
	Если ВыгрузкаРеквизитовДокумента.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для формирования электронного документа.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	РеквизитыДокумента = ВыгрузкаРеквизитовДокумента[0];
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ПризнакНаличияРазногласий", РеквизитыДокумента.ЕстьРасхождения И Не РеквизитыДокумента.СверкаСогласована);
	
	ТаблицаИтоги = Результат[1].Выгрузить();
	
	СальдоНаНачалоПериодаДебет = 0;
	СальдоНаНачалоПериодаКредит = 0;
	Если РеквизитыДокумента.ОстатокНаНачало > 0 Тогда
		СальдоНаНачалоПериодаДебет = РеквизитыДокумента.ОстатокНаНачало;
	Иначе
		СальдоНаНачалоПериодаКредит = - РеквизитыДокумента.ОстатокНаНачало;
	КонецЕсли;
	ОборотПоДебету   = ТаблицаИтоги.Итог("УвеличениеДолга");
	ОборотПоКредиту = ТаблицаИтоги.Итог("УменьшениеДолга");
	СальдоНаКонецПериодаДебет = СальдоНаНачалоПериодаДебет + ОборотПоДебету;
	СальдоНаКонецПериодаКредит = СальдоНаНачалоПериодаКредит + ОборотПоКредиту;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.СальдоНаНачалоПериодаДебет", СальдоНаНачалоПериодаДебет);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.СальдоНаНачалоПериодаКредит", СальдоНаНачалоПериодаКредит);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.ОборотПоДебету", ОборотПоДебету);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.ОборотПоКредиту", ОборотПоКредиту);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.СальдоНаКонецПериодаДебет", СальдоНаКонецПериодаДебет);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.СальдоНаКонецПериодаКредит", СальдоНаКонецПериодаКредит);
	
	СведенияПоДоговорам = СведенияПоДоговорам();
	НомерСтроки = 1;
	
	ВыборкаПоДоговорам = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДоговорам.Следующий() Цикл
		
		НомерСтрокиДокумента = 1;
		СтрокаПоДоговору = СведенияПоДоговорам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоДоговору, ВыборкаПоДоговорам);
		СтрокаПоДоговору.НомерСтроки = НомерСтроки;
		СтрокаПоДоговору.ОписаниеДоговора = Строка(ВыборкаПоДоговорам.ВидДоговора);
		ОписаниеВидаДоговора = Строка(ВыборкаПоДоговорам.ВидДоговора);
		
		Если ВыборкаПоДоговорам.ВидДоговора = Перечисления.ВидыДоговоров.Продажа Тогда
			СтрокаПоДоговору.ОписаниеДоговора = "С покупателем";
		ИначеЕсли ВыборкаПоДоговорам.ВидДоговора = Перечисления.ВидыДоговоров.Покупка Тогда
			СтрокаПоДоговору.ОписаниеДоговора = "С поставщиком";
		Иначе
			СтрокаПоДоговору.ОписаниеДоговора = "Прочее";
		КонецЕсли;
		
		СведенияПоДокументам = СведенияПоДокументам();
		СтрокаПоДоговору.СведенияПоДокументам = СведенияПоДокументам;
		
		ВыборкаПоДокументам = ВыборкаПоДоговорам.Выбрать();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			СтрокаПоДокументу = СведенияПоДокументам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоДокументу, ВыборкаПоДокументам);
			СтрокаПоДокументу.НомерСтроки = НомерСтрокиДокумента;
			
			СведенияПоОперациям = СведенияПоОперациям();
			СтрокаПоДокументу.СведенияПоОперациям = СведенияПоОперациям;
			
			СтрокаПоОперациям = СведенияПоОперациям.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоОперациям, ВыборкаПоДокументам);
			СтрокаПоОперациям.НомерСтроки = 1;
			СтрокаПоОперациям.ПорядковыйНомерСтроки = 1;
			
			НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
		ДеревоДанных,
		СведенияПоДоговорам,
		"СведенияПолучателя.СведенияПоДоговорам");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктСверкиВзаиморасчетов(ДеревоДанных, ДокументУчета, СпособОбработки, ОписаниеОшибки)
Процедура НайтиСоздатьАктСверкиВзаиморасчетов(ДеревоДанных, ДокументУчета, СпособОбработки, ОписаниеОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Шапка = ШапкаАктаСверкиВзаиморасчетов();
	Шапка.ДатаНачала = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНачалаПериодаСверки");
	Шапка.ДатаОкончания = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОкончанияПериодаСверки");
	Шапка.НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	Шапка.ДатаВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	ДополнитьДанныеЗаполненияКонтрагентомИсточникГруппа(ДеревоДанных, Шапка, "Отправитель");
	ДополнитьДанныеЗаполненияОрганизациейИсточникГруппа(ДеревоДанных, Шапка, "Получатель");
	ДополнитьДанныеЗаполненияПодразделениемКомпанииИсточникГруппа(ДеревоДанных, Шапка, "Получатель");
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, Шапка, "КодВалюты");
	Шапка.ОстатокНаНачалоПоКонтрагенту =
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"СведенияОтправителя.СальдоНаНачалоПериодаДебет")
		- ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"СведенияОтправителя.СальдоНаНачалоПериодаКредит");
	
	ПоДаннымКонтрагента = Новый ТаблицаЗначений;
	Для Каждого Реквизит Из Метаданные.Документы.АктСверкиВзаиморасчетов.ТабличныеЧасти.ПоДаннымКонтрагента.Реквизиты Цикл
		ПоДаннымКонтрагента.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	ПоДаннымКонтрагента = Документы.АктСверкиВзаиморасчетов.ПустаяСсылка().ПоДаннымКонтрагента.Выгрузить();
	
	СведенияПоДоговорам =
		ДеревоДанных.Строки.Найти("СведенияОтправителя", "ПолныйПуть").
		Строки.Найти("СведенияОтправителя.СведенияПоДоговорам", "ПолныйПуть").Строки;
	
	Для Каждого СтрокаДоговора Из СведенияПоДоговорам Цикл
		СведенияПоДокументам =
			СтрокаДоговора.Строки.Найти(
				"СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам",
				"ПолныйПуть").Строки;
		Для Каждого СтрокаДокумента Из СведенияПоДокументам Цикл
			СведенияПоОперациям = СтрокаДокумента.Строки.Найти(
				"СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям",
				"ПолныйПуть").Строки;
			Для Каждого СтрокаОперации Из СведенияПоОперациям Цикл
				
				СтрокаПоДаннымКонтрагента  = ПоДаннымКонтрагента.Добавить();
				СтрокаПоДаннымКонтрагента.ДоговорВзаиморасчетов = ДоговорВзаиморасчетовПоСтрокеАктаСверки(Шапка, СтрокаДоговора);
				СтрокаПоДаннымКонтрагента.Дата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОперации,
					"СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям.НомерСтроки.ДатаОперации");
				СтрокаПоДаннымКонтрагента.НаименованиеОперации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОперации,
					"СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям.НомерСтроки.НаименованиеОперации");
				СтрокаПоДаннымКонтрагента.НаименованиеДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаДокумента,
					"СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.НаименованиеДокумента");
				СуммаДебет = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОперации,
					"СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям.НомерСтроки.СуммаДебет");
				СуммаКредит = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОперации,
					"СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям.НомерСтроки.СуммаКредит");
				Если СуммаДебет <> Неопределено И СуммаДебет > 0 Тогда
					СтрокаПоДаннымКонтрагента.УвеличениеДолга = СуммаДебет;
				ИначеЕсли СуммаДебет <> Неопределено И СуммаДебет < 0 Тогда
					СтрокаПоДаннымКонтрагента.УменьшениеДолга = - СуммаДебет;
				КонецЕсли;
				Если СуммаКредит <> Неопределено И СуммаКредит > 0 Тогда
					СтрокаПоДаннымКонтрагента.УменьшениеДолга = СуммаКредит + СтрокаПоДаннымКонтрагента.УменьшениеДолга;
				ИначеЕсли СуммаКредит <> Неопределено И СуммаКредит < 0 Тогда
					СтрокаПоДаннымКонтрагента.УвеличениеДолга = - СуммаКредит + СтрокаПоДаннымКонтрагента.УвеличениеДолга;
				КонецЕсли;
				СтрокаПоДаннымКонтрагента.НомерДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаДокумента,
					"СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.НомерДокумента");
				СтрокаПоДаннымКонтрагента.ДатаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаДокумента,
					"СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.ДатаДокумента");
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Шапка.Удалить("Ссылка");
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", Шапка);
	ДанныеДляЗаполнения.Вставить("ПоДаннымКонтрагента", ПоДаннымКонтрагента);
	
	ЗаполнитьДокументАктСверкиВзаиморасчетов(ДокументУчета, ДанныеДляЗаполнения, ОписаниеОшибки);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьАктСверкиВзаиморасчетовПоДаннымПолучателя(ДанныеДокумента, ОбъектыУчета) 
Процедура ЗаполнитьАктСверкиВзаиморасчетовПоДаннымПолучателя(ДанныеДокумента, ОбъектыУчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполнения = ПодготовитьДанныеДляАктСверкиВзаиморасчетовПолученОтветныйТитул(ДанныеДокумента, ОбъектыУчета);
	ЗаполнитьАктСверкиВзаиморасчетовИсходящийОтветнымТитулом(ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкаОтраженияВУчете

// См. ОбменСКонтрагентамиПереопределяемый.СпособыОтраженияВУчетеТипаЭлектронногоДокумента
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СпособыОтраженияВУчете) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипДокумента = ТипыДокументов.АктВыполненныхРабот Тогда
		
		СпособыОтраженияВУчете.Добавить("ПоступлениеТоваров",
			НСтр("ru = 'Приобретение товаров и услуг'"), Истина);
		СпособыОтраженияВУчете.Добавить("УслугиПоСубподряду",
			НСтр("ru = 'Приобретение услуг по субподряду'"), Истина);
		СпособыОтраженияВУчете.Добавить("УслугиСтороннихОрганизаций",
			НСтр("ru = 'Приобретение услуг у сторонних организаций'"), Истина);
		СпособыОтраженияВУчете.Добавить("ПоступлениеДопРасходов",
			НСтр("ru = 'Поступление доп. расходов'"), Истина);
			
	ИначеЕсли ТипДокумента = ТипыДокументов.ТоварнаяНакладная Тогда
			
		СпособыОтраженияВУчете.Добавить("ПоступлениеТоваров",
			НСтр("ru = 'Приобретение товаров и услуг'"), Истина);
		СпособыОтраженияВУчете.Добавить("КорректировкаПоступления",
			НСтр("ru = 'Корректировка поступления'"), Истина);
		СпособыОтраженияВУчете.Добавить("ПоступлениеАвтомобилей",
			НСтр("ru = 'Поступление автомобилей'"), Истина);
		СпособыОтраженияВУчете.Добавить("ВозвратТоваровОтКлиента",
			НСтр("ru = 'Возврат товаров от клиента'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
			
		СпособыОтраженияВУчете.Добавить("КорректировкаПоступления",
			НСтр("ru = 'Корректировка поступления'"), Истина);
			
		СпособыОтраженияВУчете.Добавить("КорректировкаПоступленияАвтомобилей",
			НСтр("ru = 'Корректировка поступления автомобилей'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
			
		СпособыОтраженияВУчете.Добавить("ПоступлениеТоваров",
			НСтр("ru = 'Акт на передачу прав'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
			
		СпособыОтраженияВУчете.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ЗаказТовара Тогда
		
		СпособыОтраженияВУчете.Добавить("ЗаказПокупателя", НСтр("ru = 'Заказ клиента'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.КорректировочныйСчетФактура Тогда
		
		СпособыОтраженияВУчете.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетФактура Тогда
		
		СпособыОтраженияВУчете.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетНаОплату Тогда
		
		СпособыОтраженияВУчете.Добавить("СчетОтПоставщика",
			НСтр("ru = 'Счет от поставщика'"), Истина);
			
		СпособыОтраженияВУчете.Добавить("СчетОтПоставщикаЗаАвтомобили",
			НСтр("ru = 'Счет от поставщика за автомобили'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара Тогда
			
		СпособыОтраженияВУчете.Добавить("ОтчетКомиссионера", НСтр("ru = 'Отчет комиссионера (агента) о продажах'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОСписанииКомиссионногоТовара Тогда
		
		СпособыОтраженияВУчете.Добавить("ОтчетКомиссионераОСписании", НСтр("ru = 'Отчет комиссионера о списании'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.АктОРасхождениях Тогда
		
		СпособыОтраженияВУчете.Добавить("АктОРасхожденияхПослеОтгрузки",
			НСтр("ru = 'Акт о расхождениях после реализации'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.КаталогТоваров Тогда
			
		СпособыОтраженияВУчете.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.АктСверкиВзаиморасчетов Тогда
		
		СпособыОтраженияВУчете.Добавить("АктСверкиВзаиморасчетов",
			НСтр("ru = 'Акт сверки расчетов'"), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет имя объекта метаданных для способа обработки входящего электронного документа, в случае, если оно не
// совпадает с именем способа обработки.
//
// Параметры:
//  СпособОтраженияВУчете - Строка - один из способов отражения в учете входящего документа, заданный в переопределении. 
//                          см. СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
//  ИмяДокумента - Строка - в параметр необходимо поместить имя объекта метаданных, соответствующее переданному способу обработки.
//                          Выходной параметр.
//
Процедура ИмяОбъектаМетаданныхПоСпособуОтраженияВУчете(СпособОтраженияВУчете, ИмяДокумента) Экспорт 
	
КонецПроцедуры

// Переопределяет заполнение таблицы настройки отражения в учете по имени профиля.
//
// Параметры:
//  ТаблицаПрофиля - ТаблицаЗначений - таблица соответствия способов отражения в учете и электронных документов:
//   * ТипДокумента - см. ОбменСКонтрагентами.ТипыДокументов() - тип электронного документа.
//   * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип документа.
//                              Указывается при встраивании в конфигурацию собственных типов электронных документов.
//   * СпособОбработки - Строка - идентификатор способа отражения в учете, заданный в см. СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
//  Профиль		   - Строка - имя профиля настроек. Возможные значения:
//   - Автоматически
//   - Вручную
//   - Поставщик
//   - Покупатель
//   - ПервоначальноеЗаполнение
//
//@skip-warning
Процедура ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля, Профиль) Экспорт 
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриПроверкеВозможностиСозданияУчетногоДокумента
Процедура ПриПроверкеВозможностиСозданияУчетногоДокумента(Знач Параметры, Отказ, Описание) Экспорт
	
	Если Параметры.ЭтоСводныйУПД Тогда
		
		Отказ = Истина;
		Описание = НСтр("ru = 'Отражение в учете сводных счетов-фактур не поддерживается.'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеПрикладныхДанных

// См. ОбменСКонтрагентамиПереопределяемый.ОпределитьДокументЯвляетсяСчетомФактурой
Процедура ОпределитьДокументЯвляетсяСчетомФактурой(ДокументСсылка, Результат) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Результат = ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный")
		Или ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП
Процедура СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Ссылка, ДатаСведений) Экспорт
	
	Если ВРег(ТипОбъекта) = ВРег("Контрагенты") Тогда
		
		// Для контрагентов приватная обработка из-за особенностей подчиненности
		Ссылка = НайтиКонтрагентаПоИННКПП(ИНН, КПП);
		Возврат;
		
	КонецЕсли;
	
	ИмяМетаданных = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника(ТипОбъекта);
	
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Выборка.Ссылка КАК НайденныйОбъект
		|ИЗ
		|	Справочник.%1 КАК Выборка
		|ГДЕ
		|	Выборка.ИНН = &ИНН",
		ИмяМетаданных
	);
	
	Если ЗначениеЗаполнено(КПП) И КПП <> "0" Тогда
		
		ТекстЗапроса = ТекстЗапроса + " И Выборка.КПП = &КПП";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Ссылка = РезультатЗапроса.Выгрузить()[0].НайденныйОбъект;
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СоздатьКонтрагентаПоРеквизитам
Процедура СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, Контрагент, Отказ) Экспорт
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("Наименование", РеквизитыКонтрагента.Наименование);
	ЗначенияЗаполнения.Вставить("НаименованиеПолное", РеквизитыКонтрагента.Наименование);
	ЗначенияЗаполнения.Вставить("ИНН", РеквизитыКонтрагента.ИНН);
	ЗначенияЗаполнения.Вставить("КПП", РеквизитыКонтрагента.КПП);

	ДлинаИННИндивидуальногоПредпринимателя = 12;
	
	Если
		ЗначениеЗаполнено(РеквизитыКонтрагента.ИНН)
		И СтрДлина(РеквизитыКонтрагента.ИНН) = ДлинаИННИндивидуальногоПредпринимателя
	Тогда
	
		ЗначенияЗаполнения.Вставить("ФормаСобственности", Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
			
	Иначе
			
		ЗначенияЗаполнения.Вставить("ФормаСобственности", Перечисления.ФормыСобственности.ЮридическоеЛицо);
		
	КонецЕсли;
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Заполнить(ЗначенияЗаполнения);
	
	Попытка
	
		НовыйКонтрагент.Записать();
		Контрагент = НовыйКонтрагент.Ссылка;
	
	Исключение
		
		Отказ = Истина;
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ " "
			+ НСтр("ru = '(подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Создание нового контрагента''"), ТекстОшибки, ТекстСообщения);
		
	КонецПопытки;
	
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыКонтрагента
Процедура ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка) Экспорт
	
	КонтрагентСсылка = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
		
		Попытка
			
			Контрагент.Заблокировать();
			
		Исключение
			
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru = 'Не удалось изменить контрагента ""%1"".
					|Возможно, контрагент редактируется другим пользователем'"
				),
				Контрагент.Наименование
			);
			ВызватьИсключение ТекстИсключенияЗаписи;
			
		КонецПопытки;
		
	Иначе
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		
	КонецЕсли;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП        = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, Найти(ИНН_КПП, "/") - 1);
	Контрагент.КПП = Сред(ИНН_КПП, Найти(ИНН_КПП, "/") + 1);
	
	Если Контрагент.ЭтоНовый() Тогда
		
		ДлинаИННИндивидуальногоПредпринимателя = 12;
		
		Если
			ЗначениеЗаполнено(Контрагент.ИНН)
			И СтрДлина(Контрагент.ИНН) = ДлинаИННИндивидуальногоПредпринимателя
		Тогда
		
			Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
				
		Иначе
				
			Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Контрагент.Записать();
		Контрагент.Разблокировать();
		КонтрагентСсылка = Контрагент.Ссылка;		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Загрузка реквизитов контрагента'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"Наименование, НаименованиеПолное, ИНН, КПП, КодПоОКПО");
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, РеквизитыОрганизации);
	СтруктураВозврата.ОКПО = РеквизитыОрганизации.КодПоОКПО;
	
	ЮрАдресОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса(), Ложь);
		
	Если ЗначениеЗаполнено(ЮрАдресОрганизации) Тогда
		
		СтруктураВозврата.ЮридическийАдрес     = ЮрАдресОрганизации[0].Представление;
		СтруктураВозврата.ЗначенияПолейЮрАдрес = ЮрАдресОрганизации[0].ЗначенияПолей;
		
	КонецЕсли;
		
	ФактАдресОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
		Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, ТекущаяДатаСеанса(), Ложь);
	
	Если ЗначениеЗаполнено(ФактАдресОрганизации) Тогда
		
		СтруктураВозврата.ФактическийАдрес       = ФактАдресОрганизации[0].Представление;
		СтруктураВозврата.ЗначенияПолейФактАдрес = ФактАдресОрганизации[0].ЗначенияПолей;
		
	КонецЕсли;
		
	СтруктураВозврата.Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
		Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса());
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Организация, 
			"НаименованиеПолное, ИНН, КПП, КодИМНС, ФормаСобственности, Фамилия, Имя, Отчество"
		);
		
		ДанныеОрганизации.Вставить("Наименование", СвойстваОрганизации.НаименованиеПолное);
		ДанныеОрганизации.Вставить("ИНН"         , СвойстваОрганизации.ИНН);
		ДанныеОрганизации.Вставить("КПП"         , СвойстваОрганизации.КПП);
		ДанныеОрганизации.Вставить("КодИМНС"     , СвойстваОрганизации.КодИМНС);
		ДанныеОрганизации.Вставить("Фамилия"     , СвойстваОрганизации.Фамилия);
		ДанныеОрганизации.Вставить("Имя"         , СвойстваОрганизации.Имя);
		ДанныеОрганизации.Вставить("Отчество"    , СвойстваОрганизации.Отчество);
		
		Если СвойстваОрганизации.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо Тогда
			
			ДанныеОрганизации.Вставить("ЮрФизЛицо", "ФизЛицо");
			
		Иначе
			
			ДанныеОрганизации.Вставить("ЮрФизЛицо", "ЮрЛицо");
			
		КонецЕсли;
		
		ДанныеОрганизации.Вставить("Должность", "");
		ДанныеОрганизации.Вставить("КодРегиона", "");
		ДополнитьДанныеОбОрганизацииАдресом(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			ДанныеОрганизации);
		Возврат;
		
	КонецЕсли;
	
	Подключение1СТакскомПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации);
	ДанныеОрганизации.Вставить("Должность", "");
	ДанныеОрганизации.Вставить("КодРегиона", "");
	ДополнитьДанныеОбОрганизацииАдресом(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		ДанныеОрганизации);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП 
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	Свидетельство = Неопределено;
	
	Если ТипЗнч(ИП) = Тип("СправочникСсылка.Организации") И ИП.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
		
		Свидетельство = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(ИП,
							Перечисления.ВидыДокументов.Свидетельство);						
	КонецЕсли;  
						
	Если ЗначениеЗаполнено(Свидетельство) Тогда				
		Сведения = "Свидетельство о регистрации № "+СокрЛП(Свидетельство.Серия) + СокрЛП(Свидетельство.Номер) +" от "+Формат(Свидетельство.ДатаВыдачи,"ДФ=dd.MM.yyyy");
	Иначе
		Сведения = "";
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.АдресЭлектроннойПочтыКонтрагента
Процедура АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭП) Экспорт
	
	АдресЭП = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ТекущаяДатаСеанса());
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеСчета
Процедура ПолучитьБанковскиеСчета(Организация, Таблица) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец"
	);
	Запрос.УстановитьПараметр("Владелец", Организация);
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеРеквизиты.
Процедура ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Ссылка,
		|	БанковскиеСчетаОрганизаций.НомерСчета КАК РасчетныйСчет,
		|	БанковскиеСчетаОрганизаций.Банк.КоррСчет КАК КорреспондентскийСчет,
		|	БанковскиеСчетаОрганизаций.Банк.Код КАК БИК,
		|	БанковскиеСчетаОрганизаций.Банк.Наименование КАК Банк,
		|	БанковскиеСчетаОрганизаций.БанкДляРасчетов.Наименование КАК БанкДляРасчетов,
		|	БанковскиеСчетаОрганизаций.БанкДляРасчетов.Код КАК БанкДляРасчетовБИК,
		|	БанковскиеСчетаОрганизаций.БанкДляРасчетов.КоррСчет КАК БанкДляРасчетовКоррСчет
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	БанковскиеСчетаОрганизаций.Ссылка В(&МассивСчетов)"
	);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
	
	ФормаСобственности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента, "ФормаСобственности");
	
	СписокФизическихЛиц = Новый Массив;
	СписокФизическихЛиц.Добавить(Перечисления.ФормыСобственности.ЧастноеЛицо);
	СписокФизическихЛиц.Добавить(Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	
	ПризнакФизЛица = СписокФизическихЛиц.Найти(ФормаСобственности) <> Неопределено;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СведенияФизЛицаПользователя
Процедура СведенияФизЛицаПользователя(Знач Пользователь, Знач Организация, СведенияФизЛица) Экспорт
	
	Если ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Сотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Сотрудник", Истина);
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		РеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сотрудник, "Наименование, Должность", Истина);
		СведенияФизЛица.ИмяПолное = РеквизитыСотрудника.Наименование;
		СведенияФизЛица.Должность = Строка(РеквизитыСотрудника.Должность);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// См. ОбменСКонтрагентамиПереопределяемый.СуммаПрописью
Процедура СуммаПрописью(СуммаЧислом, КодВалюты, Результат) Экспорт
	
	Валюта = Неопределено;
	
	Если ЗначениеЗаполнено(КодВалюты) Тогда 
		
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Валюта, КодВалюты);
		СтрокаСумма = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
		
	Иначе
		
		ПараметрыПрописи = Новый Структура("ПараметрыПрописиНаРусском", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
		СтрокаСумма = ЧислоПрописью(СуммаЧислом, ПараметрыПрописи);
		
	КонецЕсли;
	
	Результат = СтрокаСумма;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УКД2020

#Область Отправка

Функция ДайДанныеСчетаФактурыДляУКД_2020(СчетФактура)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК СчетФактура,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументКорректировки,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|			ТОГДА СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента
		|		ИНАЧЕ СчетФактураВыданный.Номер
		|	КОНЕЦ КАК Номер,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|			ТОГДА СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента
		|		ИНАЧЕ СчетФактураВыданный.Дата
		|	КОНЕЦ КАК Дата,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов КАК Договор,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.ДатаНачала КАК ДоговорДата,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.НомерДоговора КАК ДоговорНомер,
		|	СчетФактураВыданный.Исправление КАК Исправление,
		|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
		|	СчетФактураВыданный.Дата КАК ДатаИсправления,
		|	СчетФактураВыданный.ЕстьКорректировка КАК ЕстьКорректировка,
		|	СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданный.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
		|	СчетФактураВыданный.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
		|	СчетФактураВыданный.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
		|	СчетФактураВыданный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	СчетФактураВыданный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
		|	СчетФактураВыданный.Организация КАК Организация,
		|	СчетФактураВыданный.Организация КАК ЮрФизЛицо,
		|	СчетФактураВыданный.Организация КАК Поставщик,
		|	СчетФактураВыданный.Контрагент КАК Покупатель,
		|	СчетФактураВыданный.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	СчетФактураВыданный.ДокументОснование.Менеджер КАК Менеджер,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	СчетФактураВыданный.ДокументОснование.Номер КАК ДокументОснованиеНомер,
		|	СчетФактураВыданный.ДокументОснование.Дата КАК ДокументОснованиеДата,
		|	СчетФактураВыданный.ПодразделениеКомпании КАК Подразделение,
		|	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
		|	СчетФактураВыданный.КурсДокумента КАК Курс,
		|	СчетФактураВыданный.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	СчетФактураВыданный.ДокументОснование.Менеджер КАК ОтпускПроизвел,
		|	СчетФактураВыданный.Организация.ИНН КАК ИННпоставщика,
		|	СчетФактураВыданный.Организация.КПП КАК КППпоставщика,
		|	СчетФактураВыданный.Контрагент.ИНН КАК ИННпокупателя,
		|	СчетФактураВыданный.Контрагент.КПП КАК КППпокупателя,
		|	СчетФактураВыданный.ХозОперация КАК ХозОперация,
		|	СчетФактураВыданный.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияТоваровКомиссия) КАК ЭтоКомиссия,
		|	СчетФактураВыданный.Ссылка КАК Ссылка,
		|	СчетФактураВыданный.ВалютаДокумента.Код КАК КодВалюты,
		|	СчетФактураВыданный.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	СчетФактураВыданный.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	СчетФактураВыданный.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	СчетФактураВыданный.ДокументОснование.ДокументОснование  КАК ДокументОснование,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументСМаркировкамиПосле,
		|	СчетФактураВыданный.ДокументОснование.ДокументОснование КАК ДокументСМаркировкамиДо,
		|	СчетФактураВыданный.ДокументОснование.ХозОперация КАК ХозОперацияКорректировки
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &СчетФактура"
	);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
	ЭтоИсправление =
		Шапка.ХозОперацияКорректировки = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах;
	Если ЭтоИсправление Тогда
		
		Документы.КорректировкаРеализации.ПолучитьДокументДоВнесенияКорректировки(Шапка.ДокументСМаркировкамиДо);
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Товар,
		|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаРеализацииТовары.Содержание КАК Содержание,
		|	КорректировкаРеализацииТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА КорректировкаРеализацииТовары.Номенклатура.Наименование + "" "" + КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры.Наименование
		|		ИНАЧЕ КорректировкаРеализацииТовары.Номенклатура.Наименование
		|	КОНЕЦ КАК ТоварНаименование,
		|	КорректировкаРеализацииТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
		|	КорректировкаРеализацииТовары.Номенклатура.Код КАК НоменклатураКод,
		|	КорректировкаРеализацииТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииТовары.КоличествоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации
		|	КОНЕЦ КАК КоличествоДоКорректировки,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА ВЫБОР
		|					КОГДА КорректировкаРеализацииТовары.Коэффициент = 0
		|						ТОГДА 0
		|					ИНАЧЕ ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Количество - КорректировкаРеализацииТовары.КоличествоДоКорректировки * КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации / КорректировкаРеализацииТовары.Коэффициент КАК ЧИСЛО(15, 3))
		|				КОНЕЦ
		|		ИНАЧЕ КорректировкаРеализацииТовары.КоличествоРазница
		|	КОНЕЦ КАК КоличествоРазница,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации КАК ЕдиницаИзмеренияПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.Коэффициент КАК Коэффициент,
		|	КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации КАК КоэффициентПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.Цена КАК Цена,
		|	КорректировкаРеализацииТовары.Сумма КАК Сумма,
		|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации
		|	КОНЕЦ КАК СуммаНДСПоДокументуРеализации,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаНДСРазница
		|	КОНЕЦ КАК СуммаНДСРазница,
		|	КорректировкаРеализацииТовары.СуммаВсего КАК СуммаВсего,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииТовары.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации
		|	КОНЕЦ КАК СуммаВсегоПоДокументуРеализации,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииТовары.СуммаВсего - КорректировкаРеализацииТовары.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаВсегоРазница
		|	КОНЕЦ КАК СуммаВсегоРазница,
		|	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
		|	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
		|	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
		|	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодДоКорректировки,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименованиеДоКорректировки,
		|	КорректировкаРеализацииТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|	КорректировкаРеализацииТовары.ИдентификаторТовара КАК ИдентификаторТовара
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|ГДЕ
		|	КорректировкаРеализацииТовары.Ссылка = &ДокументКорректировки
		|	И (КорректировкаРеализацииТовары.КоличествоРазница <> 0
		|			ИЛИ КорректировкаРеализацииТовары.СуммаВсегоРазница <> 0
		|			ИЛИ &УКДПоИсправлению
		|				И (ВЫБОР
		|						КОГДА КорректировкаРеализацииТовары.Коэффициент = 0
		|							ТОГДА 0
		|						ИНАЧЕ ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Количество - КорректировкаРеализацииТовары.КоличествоДоКорректировки * КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации / КорректировкаРеализацииТовары.Коэффициент КАК ЧИСЛО(15, 3))
		|					КОНЕЦ <> 0
		|					ИЛИ КорректировкаРеализацииТовары.СуммаВсего - КорректировкаРеализацииТовары.СуммаВсегоДоКорректировки <> 0))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	КорректировкаРеализацииРаботы.Авторабота,
		|	"""",
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга),
		|	НЕОПРЕДЕЛЕНО,
		|	КорректировкаРеализацииРаботы.Авторабота.Наименование,
		|	КорректировкаРеализацииРаботы.Авторабота.Артикул,
		|	КорректировкаРеализацииРаботы.Авторабота.Код,
		|	КорректировкаРеализацииРаботы.Количество,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.КоличествоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.КоличествоПоДокументуРеализации
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.Количество - КорректировкаРеализацииРаботы.КоличествоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.КоличествоРазница
		|	КОНЕЦ,
		|	КорректировкаРеализацииРаботы.Нормочас,
		|	КорректировкаРеализацииРаботы.Нормочас,
		|	КорректировкаРеализацииРаботы.Коэффициент,
		|	КорректировкаРеализацииРаботы.КоэффициентПоДокументуРеализации,
		|	КорректировкаРеализацииРаботы.Цена,
		|	КорректировкаРеализацииРаботы.Сумма,
		|	КорректировкаРеализацииРаботы.СтавкаНДС,
		|	КорректировкаРеализацииРаботы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.СуммаНДСПоДокументуРеализации
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.СуммаНДС - КорректировкаРеализацииРаботы.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.СуммаНДСРазница
		|	КОНЕЦ,
		|	КорректировкаРеализацииРаботы.СуммаВсего,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.СуммаВсегоПоДокументуРеализации
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.СуммаВсего - КорректировкаРеализацииРаботы.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.СуммаВсегоРазница
		|	КОНЕЦ,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	""""
		|ИЗ
		|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииРаботы
		|ГДЕ
		|	КорректировкаРеализацииРаботы.Ссылка = &ДокументКорректировки
		|	И (КорректировкаРеализацииРаботы.КоличествоРазница <> 0
		|			ИЛИ КорректировкаРеализацииРаботы.СуммаВсегоРазница <> 0
		|			ИЛИ &УКДПоИсправлению
		|				И (КорректировкаРеализацииРаботы.Количество - КорректировкаРеализацииРаботы.КоличествоДоКорректировки <> 0
		|					ИЛИ КорректировкаРеализацииРаботы.СуммаВсего - КорректировкаРеализацииРаботы.СуммаВсегоДоКорректировки <> 0))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СчетФактураВыданныйТовары.ГТД КАК ГТД,
		|	СУММА(СчетФактураВыданныйТовары.Количество) КАК Количество,
		|	СчетФактураВыданныйТовары.ГТД.Страна.Код КАК СтранаПроисхожденияКод,
		|	СчетФактураВыданныйТовары.ГТД.Наименование КАК ТаможеннаяДекларацияНомер
		|ИЗ
		|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
		|ГДЕ
		|	СчетФактураВыданныйТовары.Ссылка = &СчетФактура
		|	И НЕ СчетФактураВыданныйТовары.ГТД.РНПТ
		|	И СчетФактураВыданныйТовары.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданныйТовары.Номенклатура,
		|	СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры,
		|	СчетФактураВыданныйТовары.ГТД,
		|	СчетФактураВыданныйТовары.ГТД.Страна.Код,
		|	СчетФактураВыданныйТовары.ГТД.Наименование"
	);
	Запрос.УстановитьПараметр("ДокументКорректировки", Шапка.ДокументКорректировки);
	Запрос.УстановитьПараметр("УКДПоИсправлению", ЭтоИсправление);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	Товары = ОбщегоНазначения.ТаблицаЗначенийВМассив(ПакетЗапроса[0].Выгрузить());
	ГТДТоваров = ПакетЗапроса[1].Выгрузить();
	
	Возврат Новый Структура("Шапка,Товары,ГТДТоваров", Шапка, Товары, ГТДТоваров);
	
КонецФункции

Функция ДайДанныеСчетаФактурыРеализацииАвтомобиляДляУКД_2020(СчетФактура)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК СчетФактура,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументКорректировки,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|			ТОГДА СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента
		|		ИНАЧЕ СчетФактураВыданный.Номер
		|	КОНЕЦ КАК Номер,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|			ТОГДА СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента
		|		ИНАЧЕ СчетФактураВыданный.Дата
		|	КОНЕЦ КАК Дата,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов КАК Договор,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.ДатаНачала КАК ДоговорДата,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.НомерДоговора КАК ДоговорНомер,
		|	СчетФактураВыданный.Исправление КАК Исправление,
		|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
		|	СчетФактураВыданный.Дата КАК ДатаИсправления,
		|	СчетФактураВыданный.ЕстьКорректировка КАК ЕстьКорректировка,
		|	СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданный.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
		|	СчетФактураВыданный.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
		|	СчетФактураВыданный.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
		|	СчетФактураВыданный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	СчетФактураВыданный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
		|	СчетФактураВыданный.Организация КАК Организация,
		|	СчетФактураВыданный.Организация КАК ЮрФизЛицо,
		|	СчетФактураВыданный.Организация КАК Поставщик,
		|	СчетФактураВыданный.Контрагент КАК Покупатель,
		|	СчетФактураВыданный.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	СчетФактураВыданный.ДокументОснование.Менеджер КАК Менеджер,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	СчетФактураВыданный.ДокументОснование.Номер КАК ДокументОснованиеНомер,
		|	СчетФактураВыданный.ДокументОснование.Дата КАК ДокументОснованиеДата,
		|	СчетФактураВыданный.ПодразделениеКомпании КАК Подразделение,
		|	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
		|	СчетФактураВыданный.КурсДокумента КАК Курс,
		|	СчетФактураВыданный.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	СчетФактураВыданный.ДокументОснование.Менеджер КАК ОтпускПроизвел,
		|	СчетФактураВыданный.Организация.ИНН КАК ИННпоставщика,
		|	СчетФактураВыданный.Организация.КПП КАК КППпоставщика,
		|	СчетФактураВыданный.Контрагент.ИНН КАК ИННпокупателя,
		|	СчетФактураВыданный.Контрагент.КПП КАК КППпокупателя,
		|	СчетФактураВыданный.ХозОперация КАК ХозОперация,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.ДокументОснование.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияТоваровКомиссия)
		|			ТОГДА ИСТИНА
		|		КОГДА СчетФактураВыданный.ДокументОснование.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКомиссия,
		|	СчетФактураВыданный.Ссылка КАК Ссылка,
		|	СчетФактураВыданный.ВалютаДокумента.Код КАК КодВалюты,
		|	СчетФактураВыданный.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	СчетФактураВыданный.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	СчетФактураВыданный.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	СчетФактураВыданный.ДокументОснование.ДокументОснование КАК ДокументОснование,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументСМаркировкамиПосле,
		|	СчетФактураВыданный.ДокументОснование.ДокументОснование КАК ДокументСМаркировкамиДо,
		|	СчетФактураВыданный.ДокументОснование.ХозОперация КАК ХозОперацияКорректировки
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &СчетФактура"
	);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
	ЭтоИсправление =
		Шапка.ХозОперацияКорректировки =
			Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах;
	Если ЭтоИсправление Тогда
		
		Документы.КорректировкаРеализацииАвтомобилей.ПолучитьДокументДоВнесенияКорректировки(Шапка.ДокументСМаркировкамиДо);
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Товар,
		|	КорректировкаРеализацииАвтомобилей.Автомобиль КАК Номенклатура,
		|	"""" КАК Содержание,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар) КАК ВидНоменклатуры,
		|	"""" КАК ХарактеристикаНоменклатуры,
		|	КорректировкаРеализацииАвтомобилей.Автомобиль.Наименование КАК ТоварНаименование,
		|	КорректировкаРеализацииАвтомобилей.Автомобиль.VIN КАК НоменклатураАртикул,
		|	КорректировкаРеализацииАвтомобилей.Автомобиль.Код КАК НоменклатураКод,
		|	КорректировкаРеализацииАвтомобилей.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА 1
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.КоличествоПоДокументуРеализации
		|	КОНЕЦ КАК КоличествоДоКорректировки,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииАвтомобилей.Количество - 1
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.КоличествоРазница
		|	КОНЕЦ КАК КоличествоРазница,
		|	&ЕдИзмерения КАК ЕдиницаИзмерения,
		|	&ЕдИзмерения КАК ЕдиницаИзмеренияПоДокументуРеализации,
		|	0 КАК Коэффициент,
		|	0 КАК КоэффициентПоДокументуРеализации,
		|	КорректировкаРеализацииАвтомобилей.Цена КАК Цена,
		|	КорректировкаРеализацииАвтомобилей.Сумма КАК Сумма,
		|	КорректировкаРеализацииАвтомобилей.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаРеализацииАвтомобилей.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииАвтомобилей.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.СуммаНДСПоДокументуРеализации
		|	КОНЕЦ КАК СуммаНДСПоДокументуРеализации,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииАвтомобилей.СуммаНДС - КорректировкаРеализацииАвтомобилей.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.СуммаНДСРазница
		|	КОНЕЦ КАК СуммаНДСРазница,
		|	КорректировкаРеализацииАвтомобилей.СуммаВсего КАК СуммаВсего,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииАвтомобилей.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.СуммаВсегоПоДокументуРеализации
		|	КОНЕЦ КАК СуммаВсегоПоДокументуРеализации,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииАвтомобилей.СуммаВсего - КорректировкаРеализацииАвтомобилей.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.СуммаВсегоРазница
		|	КОНЕЦ КАК СуммаВсегоРазница,
		|	&ЕдИзмерения КАК БазоваяЕдиница,
		|	(&ЕдИзмерения).Код КАК ЕдиницаИзмеренияКод,
		|	(&ЕдИзмерения).Наименование КАК ЕдиницаИзмеренияНаименование,
		|	(&ЕдИзмерения).Код КАК ЕдиницаИзмеренияКодДоКорректировки,
		|	(&ЕдИзмерения).Наименование КАК ЕдиницаИзмеренияНаименованиеДоКорректировки,
		|	"""" КАК КодТНВЭД,
		|	"""" КАК ИдентификаторТовара
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилей
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилей.Ссылка = &ДокументКорректировки
		|	И (КорректировкаРеализацииАвтомобилей.КоличествоРазница <> 0
		|			ИЛИ КорректировкаРеализацииАвтомобилей.СуммаВсегоРазница <> 0
		|			ИЛИ &УКДПоИсправлению
		|				И (КорректировкаРеализацииАвтомобилей.Количество - 1 <> 0
		|					ИЛИ КорректировкаРеализацииАвтомобилей.СуммаВсего - КорректировкаРеализацииАвтомобилей.СуммаВсегоДоКорректировки <> 0))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СчетФактураВыданныйТовары.Номенклатура.ГТД КАК ГТД,
		|	СУММА(СчетФактураВыданныйТовары.Количество) КАК Количество,
		|	СчетФактураВыданныйТовары.Номенклатура.ГТД.Страна.Код КАК СтранаПроисхожденияКод,
		|	СчетФактураВыданныйТовары.Номенклатура.ГТД.Наименование КАК ТаможеннаяДекларацияНомер
		|ИЗ
		|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
		|ГДЕ
		|	СчетФактураВыданныйТовары.Ссылка = &СчетФактура
		|	И НЕ СчетФактураВыданныйТовары.Номенклатура.ГТД.РНПТ
		|	И СчетФактураВыданныйТовары.Номенклатура.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданныйТовары.Номенклатура,
		|	СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры,
		|	СчетФактураВыданныйТовары.Номенклатура.ГТД,
		|	СчетФактураВыданныйТовары.Номенклатура.ГТД.Страна.Код,
		|	СчетФактураВыданныйТовары.Номенклатура.ГТД.Наименование"
	);
	Запрос.УстановитьПараметр("ДокументКорректировки", Шапка.ДокументКорректировки);
	Запрос.УстановитьПараметр("УКДПоИсправлению", ЭтоИсправление);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура); 
	Запрос.УстановитьПараметр("ЕдИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	Товары = ОбщегоНазначения.ТаблицаЗначенийВМассив(ПакетЗапроса[0].Выгрузить());
	ГТДТоваров = ПакетЗапроса[1].Выгрузить();
	
	Возврат Новый Структура("Шапка,Товары,ГТДТоваров", Шапка, Товары, ГТДТоваров);
	
КонецФункции

Функция ДайДанныеДИСДляУКД_2020_БезСчетФактуры(Документ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка) КАК СчетФактура,
		|	КорректировкаРеализации.Ссылка КАК ДокументКорректировки,
		|	КорректировкаРеализации.Номер КАК Номер,
		|	КорректировкаРеализации.Дата КАК Дата,
		|	КорректировкаРеализации.ДоговорВзаиморасчетов КАК Договор,
		|	КорректировкаРеализации.ДоговорВзаиморасчетов.ДатаНачала КАК ДоговорДата,
		|	КорректировкаРеализации.ДоговорВзаиморасчетов.НомерДоговора КАК ДоговорНомер,
		|	(КорректировкаРеализации.Хозоперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах)) КАК Исправление,
		|	КорректировкаРеализации.НомерИсправления КАК НомерИсправления,
		|	КорректировкаРеализации.Дата КАК ДатаИсправления,
		|	"""" КАК НомерИсходногоДокумента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаИсходногоДокумента,
		|	ЛОЖЬ КАК УчитыватьИсправлениеИсходногоДокумента,
		|	"""" КАК НомерИсправленияИсходногоДокумента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаИсправленияИсходногоДокумента,
		|	КорректировкаРеализации.Организация КАК Организация,
		|	КорректировкаРеализации.Организация КАК ЮрФизЛицо,
		|	КорректировкаРеализации.Организация КАК Поставщик,
		|	КорректировкаРеализации.Контрагент КАК Покупатель,
		|	КорректировкаРеализации.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	КорректировкаРеализации.Менеджер КАК Менеджер,
		|	КорректировкаРеализации.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	КорректировкаРеализации.Номер КАК ДокументОснованиеНомер,
		|	КорректировкаРеализации.Дата КАК ДокументОснованиеДата,
		|	КорректировкаРеализации.ПодразделениеКомпании КАК Подразделение,
		|	КорректировкаРеализации.ВалютаДокумента КАК ВалютаДокумента,
		|	КорректировкаРеализации.КурсДокумента КАК Курс,
		|	КорректировкаРеализации.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	КорректировкаРеализации.Менеджер КАК ОтпускПроизвел,
		|	КорректировкаРеализации.Организация.ИНН КАК ИННпоставщика,
		|	КорректировкаРеализации.Организация.КПП КАК КППпоставщика,
		|	КорректировкаРеализации.Контрагент.ИНН КАК ИННпокупателя,
		|	КорректировкаРеализации.Контрагент.КПП КАК КППпокупателя,
		|	КорректировкаРеализации.ХозОперация КАК ХозОперация,
		|	ВЫБОР
		|		КОГДА КорректировкаРеализации.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияТоваровКомиссия)
		|			ТОГДА ИСТИНА
		|		КОГДА КорректировкаРеализации.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКомиссия,
		|	КорректировкаРеализации.Ссылка КАК Ссылка,
		|	КорректировкаРеализации.ВалютаДокумента.Код КАК КодВалюты,
		|	КорректировкаРеализации.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	КорректировкаРеализации.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	КорректировкаРеализации.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	КорректировкаРеализации.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	КорректировкаРеализации.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,
		|	КорректировкаРеализации.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	КорректировкаРеализации.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	КорректировкаРеализации.ДокументОснование КАК ДокументОснование,
		|	КорректировкаРеализации.Ссылка КАК ДокументСМаркировкамиПосле,
		|	КорректировкаРеализации.ДокументОснование КАК ДокументСМаркировкамиДо,
		|	КорректировкаРеализации.ХозОперация КАК ХозОперацияКорректировки
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Ссылка = &Документ"
	);
	Запрос.УстановитьПараметр("Документ", Документ);
	Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
	ДанныеКорректировки = Документы.СчетФактураВыданный.КорректировочныеДанныеДокумента();
	ДанныеКорректировки.ПодразделениеКомпании = Шапка.Подразделение;
	ДанныеКорректировки.Дата = Шапка.Дата;
	Документы.СчетФактураВыданный.ЗаполнитьНомера(ДанныеКорректировки, Документ, Истина);
	Документы.СчетФактураВыданный.ДополнитьДанныеОбъектаНомерамиСчетовФактур(Шапка, ДанныеКорректировки);
	Шапка.УчитыватьИсправлениеИсходногоДокумента = ДанныеКорректировки.УчитыватьИсправлениеИсходногоДокумента;
	
	Если ДанныеКорректировки.ЕстьКорректировка Тогда
		Шапка.Номер = ДанныеКорректировки.НомерИсправляемогоКорректировочногоДокумента;
		Шапка.Дата  = ДанныеКорректировки.ДатаИсправляемогоКорректировочногоДокумента;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
	СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
	СчетФактура.Заполнить(Документ);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЭтоИсправление =
		Шапка.ХозОперацияКорректировки = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах;
	Если ЭтоИсправление Тогда
		
		Документы.КорректировкаРеализации.ПолучитьДокументДоВнесенияКорректировки(Шапка.ДокументСМаркировкамиДо);
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Товар,
		|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаРеализацииТовары.Содержание КАК Содержание,
		|	КорректировкаРеализацииТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА КорректировкаРеализацииТовары.Номенклатура.Наименование + "" "" + КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры.Наименование
		|		ИНАЧЕ КорректировкаРеализацииТовары.Номенклатура.Наименование
		|	КОНЕЦ КАК ТоварНаименование,
		|	КорректировкаРеализацииТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
		|	КорректировкаРеализацииТовары.Номенклатура.Код КАК НоменклатураКод,
		|	КорректировкаРеализацииТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииТовары.КоличествоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации
		|	КОНЕЦ КАК КоличествоДоКорректировки,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА ВЫБОР
		|					КОГДА КорректировкаРеализацииТовары.Коэффициент = 0
		|						ТОГДА 0
		|					ИНАЧЕ ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Количество - КорректировкаРеализацииТовары.КоличествоДоКорректировки * КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации / КорректировкаРеализацииТовары.Коэффициент КАК ЧИСЛО(15, 3))
		|				КОНЕЦ
		|		ИНАЧЕ КорректировкаРеализацииТовары.КоличествоРазница
		|	КОНЕЦ КАК КоличествоРазница,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации КАК ЕдиницаИзмеренияПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.Коэффициент КАК Коэффициент,
		|	КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации КАК КоэффициентПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.Цена КАК Цена,
		|	КорректировкаРеализацииТовары.Сумма КАК Сумма,
		|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации
		|	КОНЕЦ КАК СуммаНДСПоДокументуРеализации,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаНДСРазница
		|	КОНЕЦ КАК СуммаНДСРазница,
		|	КорректировкаРеализацииТовары.СуммаВсего КАК СуммаВсего,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииТовары.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации
		|	КОНЕЦ КАК СуммаВсегоПоДокументуРеализации,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииТовары.СуммаВсего - КорректировкаРеализацииТовары.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаВсегоРазница
		|	КОНЕЦ КАК СуммаВсегоРазница,
		|	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
		|	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
		|	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
		|	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодДоКорректировки,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименованиеДоКорректировки,
		|	КорректировкаРеализацииТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|	КорректировкаРеализацииТовары.ИдентификаторТовара КАК ИдентификаторТовара
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|ГДЕ
		|	КорректировкаРеализацииТовары.Ссылка = &ДокументКорректировки
		|	И (КорректировкаРеализацииТовары.КоличествоРазница <> 0
		|			ИЛИ КорректировкаРеализацииТовары.СуммаВсегоРазница <> 0
		|			ИЛИ &УКДПоИсправлению
		|				И (ВЫБОР
		|						КОГДА КорректировкаРеализацииТовары.Коэффициент = 0
		|							ТОГДА 0
		|						ИНАЧЕ ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Количество - КорректировкаРеализацииТовары.КоличествоДоКорректировки * КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации / КорректировкаРеализацииТовары.Коэффициент КАК ЧИСЛО(15, 3))
		|					КОНЕЦ <> 0
		|					ИЛИ КорректировкаРеализацииТовары.СуммаВсего - КорректировкаРеализацииТовары.СуммаВсегоДоКорректировки <> 0))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	КорректировкаРеализацииРаботы.Авторабота,
		|	"""",
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга),
		|	НЕОПРЕДЕЛЕНО,
		|	КорректировкаРеализацииРаботы.Авторабота.Наименование,
		|	КорректировкаРеализацииРаботы.Авторабота.Артикул,
		|	КорректировкаРеализацииРаботы.Авторабота.Код,
		|	КорректировкаРеализацииРаботы.Количество,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.КоличествоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.КоличествоПоДокументуРеализации
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.Количество - КорректировкаРеализацииРаботы.КоличествоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.КоличествоРазница
		|	КОНЕЦ,
		|	КорректировкаРеализацииРаботы.Нормочас,
		|	КорректировкаРеализацииРаботы.Нормочас,
		|	КорректировкаРеализацииРаботы.Коэффициент,
		|	КорректировкаРеализацииРаботы.КоэффициентПоДокументуРеализации,
		|	КорректировкаРеализацииРаботы.Цена,
		|	КорректировкаРеализацииРаботы.Сумма,
		|	КорректировкаРеализацииРаботы.СтавкаНДС,
		|	КорректировкаРеализацииРаботы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.СуммаНДСПоДокументуРеализации
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.СуммаНДС - КорректировкаРеализацииРаботы.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.СуммаНДСРазница
		|	КОНЕЦ,
		|	КорректировкаРеализацииРаботы.СуммаВсего,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.СуммаВсегоПоДокументуРеализации
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииРаботы.СуммаВсего - КорректировкаРеализацииРаботы.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииРаботы.СуммаВсегоРазница
		|	КОНЕЦ,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	""""
		|ИЗ
		|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииРаботы
		|ГДЕ
		|	КорректировкаРеализацииРаботы.Ссылка = &ДокументКорректировки
		|	И (КорректировкаРеализацииРаботы.КоличествоРазница <> 0
		|			ИЛИ КорректировкаРеализацииРаботы.СуммаВсегоРазница <> 0
		|			ИЛИ &УКДПоИсправлению
		|				И (КорректировкаРеализацииРаботы.Количество - КорректировкаРеализацииРаботы.КоличествоДоКорректировки <> 0
		|					ИЛИ КорректировкаРеализацииРаботы.СуммаВсего - КорректировкаРеализацииРаботы.СуммаВсегоДоКорректировки <> 0))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйТовары.ГТД КАК Справочник.ГТД) КАК ГТД,
		|	СчетФактураВыданныйТовары.Количество КАК Количество
		|ПОМЕСТИТЬ ТоварыСГТД
		|ИЗ
		|	&ТоварыСчетФактураВыданный КАК СчетФактураВыданныйТовары
		|ГДЕ
		|	СчетФактураВыданныйТовары.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыСГТД.Номенклатура КАК Номенклатура,
		|	ТоварыСГТД.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыСГТД.ГТД КАК ГТД,
		|	СУММА(ТоварыСГТД.Количество) КАК Количество,
		|	ВЫРАЗИТЬ(ТоварыСГТД.ГТД КАК Справочник.ГТД).Страна.Код КАК СтранаПроисхожденияКод,
		|	ВЫРАЗИТЬ(ТоварыСГТД.ГТД КАК Справочник.ГТД).Наименование КАК ТаможеннаяДекларацияНомер
		|ИЗ
		|	ТоварыСГТД КАК ТоварыСГТД
		|ГДЕ
		|	НЕ ТоварыСГТД.ГТД.РНПТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыСГТД.Номенклатура,
		|	ТоварыСГТД.ХарактеристикаНоменклатуры,
		|	ТоварыСГТД.ГТД,
		|	ВЫРАЗИТЬ(ТоварыСГТД.ГТД КАК Справочник.ГТД).Страна.Код,
		|	ВЫРАЗИТЬ(ТоварыСГТД.ГТД КАК Справочник.ГТД).Наименование"
	);
	Запрос.УстановитьПараметр("ДокументКорректировки", Шапка.ДокументКорректировки);
	Запрос.УстановитьПараметр("УКДПоИсправлению", ЭтоИсправление);
	Запрос.УстановитьПараметр("ТоварыСчетФактураВыданный", СчетФактура.Товары.Выгрузить());
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	Товары = ОбщегоНазначения.ТаблицаЗначенийВМассив(ПакетЗапроса[0].Выгрузить());
	ГТДТоваров = ПакетЗапроса[2].Выгрузить();
	
	Возврат Новый Структура("Шапка,Товары,ГТДТоваров", Шапка, Товары, ГТДТоваров);
	
КонецФункции

Функция ДайДанныеДИСАвтомобиляДляУКД_2020_БезСчетФактуры(Документ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка) КАК СчетФактура,
		|	КорректировкаРеализацииАвтомобилей.Ссылка КАК ДокументКорректировки,
		|	КорректировкаРеализацииАвтомобилей.Номер КАК Номер,
		|	КорректировкаРеализацииАвтомобилей.Дата КАК Дата,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов КАК Договор,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.ДатаНачала КАК ДоговорДата,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.НомерДоговора КАК ДоговорНомер,
		|	(КорректировкаРеализацииАвтомобилей.Хозоперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах)) КАК Исправление,
		|	КорректировкаРеализацииАвтомобилей.НомерИсправления КАК НомерИсправления,
		|	КорректировкаРеализацииАвтомобилей.Дата КАК ДатаИсправления,
		|	"""" КАК НомерИсходногоДокумента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаИсходногоДокумента,
		|	ЛОЖЬ КАК УчитыватьИсправлениеИсходногоДокумента,
		|	"""" КАК НомерИсправленияИсходногоДокумента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаИсправленияИсходногоДокумента,
		|	КорректировкаРеализацииАвтомобилей.Организация КАК Организация,
		|	КорректировкаРеализацииАвтомобилей.Организация КАК ЮрФизЛицо,
		|	КорректировкаРеализацииАвтомобилей.Организация КАК Поставщик,
		|	КорректировкаРеализацииАвтомобилей.Контрагент КАК Покупатель,
		|	КорректировкаРеализацииАвтомобилей.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	КорректировкаРеализацииАвтомобилей.Менеджер КАК Менеджер,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	КорректировкаРеализацииАвтомобилей.Номер КАК ДокументОснованиеНомер,
		|	КорректировкаРеализацииАвтомобилей.Дата КАК ДокументОснованиеДата,
		|	КорректировкаРеализацииАвтомобилей.ПодразделениеКомпании КАК Подразделение,
		|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента КАК ВалютаДокумента,
		|	КорректировкаРеализацииАвтомобилей.КурсДокумента КАК Курс,
		|	КорректировкаРеализацииАвтомобилей.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	КорректировкаРеализацииАвтомобилей.Менеджер КАК ОтпускПроизвел,
		|	КорректировкаРеализацииАвтомобилей.Организация.ИНН КАК ИННпоставщика,
		|	КорректировкаРеализацииАвтомобилей.Организация.КПП КАК КППпоставщика,
		|	КорректировкаРеализацииАвтомобилей.Контрагент.ИНН КАК ИННпокупателя,
		|	КорректировкаРеализацииАвтомобилей.Контрагент.КПП КАК КППпокупателя,
		|	КорректировкаРеализацииАвтомобилей.ХозОперация КАК ХозОперация,
		|	ВЫБОР
		|		КОГДА КорректировкаРеализацииАвтомобилей.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияАвтомобилейКомиссия)
		|			ТОГДА ИСТИНА
		|		КОГДА КорректировкаРеализацииАвтомобилей.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ВозвратАвтомобилейПоставщикуКомиссия)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКомиссия,
		|	КорректировкаРеализацииАвтомобилей.Ссылка КАК Ссылка,
		|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента.Код КАК КодВалюты,
		|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	КорректировкаРеализацииАвтомобилей.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	КорректировкаРеализацииАвтомобилей.ДокументОснование КАК ДокументОснование,
		|	КорректировкаРеализацииАвтомобилей.Ссылка КАК ДокументСМаркировкамиПосле,
		|	КорректировкаРеализацииАвтомобилей.ДокументОснование КАК ДокументСМаркировкамиДо,
		|	КорректировкаРеализацииАвтомобилей.ХозОперация КАК ХозОперацияКорректировки
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей КАК КорректировкаРеализацииАвтомобилей
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилей.Ссылка = &Документ"
	);
	Запрос.УстановитьПараметр("Документ", Документ);
	Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
	ДанныеКорректировки = Документы.СчетФактураВыданный.КорректировочныеДанныеДокумента();
	ДанныеКорректировки.ПодразделениеКомпании = Шапка.Подразделение;
	ДанныеКорректировки.Дата = Шапка.Дата;
	Документы.СчетФактураВыданный.ЗаполнитьНомера(ДанныеКорректировки, Документ, Истина);
	Документы.СчетФактураВыданный.ДополнитьДанныеОбъектаНомерамиСчетовФактур(Шапка, ДанныеКорректировки);
	Шапка.УчитыватьИсправлениеИсходногоДокумента = ДанныеКорректировки.УчитыватьИсправлениеИсходногоДокумента;
	
	Если ДанныеКорректировки.ЕстьКорректировка Тогда
		Шапка.Номер = ДанныеКорректировки.НомерИсправляемогоКорректировочногоДокумента;
		Шапка.Дата  = ДанныеКорректировки.ДатаИсправляемогоКорректировочногоДокумента;
	КонецЕсли;
	
	ЭтоИсправление =
		Шапка.ХозОперацияКорректировки =
			Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах;
	Если ЭтоИсправление Тогда
		
		Документы.КорректировкаРеализацииАвтомобилей.ПолучитьДокументДоВнесенияКорректировки(Шапка.ДокументСМаркировкамиДо);
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Товар,
		|	КорректировкаРеализацииАвтомобилей.Автомобиль КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар) КАК ВидНоменклатуры,
		|	"""" КАК ХарактеристикаНоменклатуры,
		|	КорректировкаРеализацииАвтомобилей.Автомобиль.Наименование КАК ТоварНаименование,
		|	КорректировкаРеализацииАвтомобилей.Автомобиль.VIN КАК НоменклатураАртикул,
		|	КорректировкаРеализацииАвтомобилей.Автомобиль.Код КАК НоменклатураКод,
		|	КорректировкаРеализацииАвтомобилей.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА 1
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.КоличествоПоДокументуРеализации
		|	КОНЕЦ КАК КоличествоДоКорректировки,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииАвтомобилей.Количество - 1
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.КоличествоРазница
		|	КОНЕЦ КАК КоличествоРазница,
		|	&ЕдИзмерения КАК ЕдиницаИзмерения,
		|	&ЕдИзмерения КАК ЕдиницаИзмеренияПоДокументуРеализации,
		|	0 КАК Коэффициент,
		|	0 КАК КоэффициентПоДокументуРеализации,
		|	КорректировкаРеализацииАвтомобилей.Цена КАК Цена,
		|	КорректировкаРеализацииАвтомобилей.Сумма КАК Сумма,
		|	КорректировкаРеализацииАвтомобилей.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаРеализацииАвтомобилей.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииАвтомобилей.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.СуммаНДСПоДокументуРеализации
		|	КОНЕЦ КАК СуммаНДСПоДокументуРеализации,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииАвтомобилей.СуммаНДС - КорректировкаРеализацииАвтомобилей.СуммаНДСДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.СуммаНДСРазница
		|	КОНЕЦ КАК СуммаНДСРазница,
		|	КорректировкаРеализацииАвтомобилей.СуммаВсего КАК СуммаВсего,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииАвтомобилей.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.СуммаВсегоПоДокументуРеализации
		|	КОНЕЦ КАК СуммаВсегоПоДокументуРеализации,
		|	ВЫБОР
		|		КОГДА &УКДПоИсправлению
		|			ТОГДА КорректировкаРеализацииАвтомобилей.СуммаВсего - КорректировкаРеализацииАвтомобилей.СуммаВсегоДоКорректировки
		|		ИНАЧЕ КорректировкаРеализацииАвтомобилей.СуммаВсегоРазница
		|	КОНЕЦ КАК СуммаВсегоРазница,
		|	&ЕдИзмерения КАК БазоваяЕдиница,
		|	(&ЕдИзмерения).Код КАК ЕдиницаИзмеренияКод,
		|	(&ЕдИзмерения).Наименование КАК ЕдиницаИзмеренияНаименование,
		|	(&ЕдИзмерения).Код КАК ЕдиницаИзмеренияКодДоКорректировки,
		|	(&ЕдИзмерения).Наименование КАК ЕдиницаИзмеренияНаименованиеДоКорректировки,
		|	"""" КАК КодТНВЭД,
		|	"""" КАК ИдентификаторТовара
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилей
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилей.Ссылка = &Документ
		|	И (КорректировкаРеализацииАвтомобилей.КоличествоРазница <> 0
		|			ИЛИ КорректировкаРеализацииАвтомобилей.СуммаВсегоРазница <> 0
		|			ИЛИ &УКДПоИсправлению
		|				И (КорректировкаРеализацииАвтомобилей.Количество - 1 <> 0
		|					ИЛИ КорректировкаРеализацииАвтомобилей.СуммаВсего - КорректировкаРеализацииАвтомобилей.СуммаВсегоДоКорректировки <> 0))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КорректировкаРеализацииАвтомобилейАтомобили.Автомобиль КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
		|	КорректировкаРеализацииАвтомобилейАтомобили.Автомобиль.ГТД КАК ГТД,
		|	СУММА(КорректировкаРеализацииАвтомобилейАтомобили.Количество) КАК Количество,
		|	КорректировкаРеализацииАвтомобилейАтомобили.Автомобиль.ГТД.Страна.Код КАК СтранаПроисхожденияКод,
		|	КорректировкаРеализацииАвтомобилейАтомобили.Автомобиль.ГТД.Наименование КАК ТаможеннаяДекларацияНомер
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАтомобили
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилейАтомобили.Ссылка = &Документ
		|	И НЕ КорректировкаРеализацииАвтомобилейАтомобили.Автомобиль.ГТД.РНПТ
		|	И КорректировкаРеализацииАвтомобилейАтомобили.Автомобиль.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаРеализацииАвтомобилейАтомобили.Автомобиль,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	КорректировкаРеализацииАвтомобилейАтомобили.Автомобиль.ГТД,
		|	КорректировкаРеализацииАвтомобилейАтомобили.Автомобиль.ГТД.Страна.Код,
		|	КорректировкаРеализацииАвтомобилейАтомобили.Автомобиль.ГТД.Наименование"
	);
	Запрос.УстановитьПараметр("УКДПоИсправлению", ЭтоИсправление);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ЕдИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	Товары = ОбщегоНазначения.ТаблицаЗначенийВМассив(ПакетЗапроса[0].Выгрузить());
	ГТДТоваров = ПакетЗапроса[1].Выгрузить();
	
	Возврат Новый Структура("Шапка,Товары,ГТДТоваров", Шапка, Товары, ГТДТоваров);
	
КонецФункции

Функция ЗаполнитьДанныеПервичногоДокументаУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	Шапка = ДанныеДляФормированияЭД.Шапка;
	СохранитьРеквизитВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", Шапка.Дата);
	
	Если
		ЗначениеЗаполнено(Шапка.Договор)
		И ЗначениеЗаполнено(Шапка.ДоговорНомер)
		И ЗначениеЗаполнено(Шапка.ДатаДоговора)
	Тогда
		
		ОснованиеКорректировки = Новый ТаблицаЗначений;
		ОснованиеКорректировки.Колонки.Добавить("ДоговорКонтрагента");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
		
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		НоваяСтрока.ДоговорКонтрагента   = Шапка.Договор;
		НоваяСтрока.ДокументНаименование = Шапка.НаименованиеДоговора;
		НоваяСтрока.ДокументНомер = Шапка.ДоговорНомер;
		НоваяСтрока.ДокументДата = НачалоДня(Шапка.ДатаДоговора);
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		
	КонецЕсли;
		
	ПередаточныйДокумент = Новый ТаблицаЗначений;
	ПередаточныйДокумент.Колонки.Добавить("ДокументНаименование");
	ПередаточныйДокумент.Колонки.Добавить("ДокументНомер");
	ПередаточныйДокумент.Колонки.Добавить("ДокументДата");
	
	Если
		ЗначениеЗаполнено(ДанныеДляФормированияЭД.Шапка.НомерИсходногоДокумента)
		И ЗначениеЗаполнено(ДанныеДляФормированияЭД.Шапка.ДатаИсходногоДокумента)
	Тогда
		
		СокращенныйНомер = Не Константы.ПолныйНомерДокументаВПечатныхФормах.Получить();
		НомерИсходногоДокумента = ДанныеДляФормированияЭД.Шапка.НомерИсходногоДокумента;
	
		Если СокращенныйНомер Тогда
		
			НомерИсходногоДокумента = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(
				НомерИсходногоДокумента,
				Истина,
				Истина
			);
			
		КонецЕсли;
			
		ОписаниеОснования = СтрШаблон(
			НСтр("ru = 'Универсальный передаточный документ № %1 от %2'"),
			НомерИсходногоДокумента,
			Формат(ДанныеДляФормированияЭД.Шапка.ДатаИсходногоДокумента, "ДЛФ=D")
		);
				
		Если
			ЗначениеЗаполнено(ДанныеДляФормированияЭД.Шапка.НомерИсправленияИсходногоДокумента)
			И ЗначениеЗаполнено(ДанныеДляФормированияЭД.Шапка.ДатаИсправленияИсходногоДокумента)
		Тогда
			
			НомерИсправленияИсходногоДокумента = ДанныеДляФормированияЭД.Шапка.НомерИсправленияИсходногоДокумента;
			
			Если СокращенныйНомер Тогда
		
				НомерИсправленияИсходногоДокумента = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(
					НомерИсправленияИсходногоДокумента,
					Истина,
					Истина
				);
				
			КонецЕсли;
			
			ОписаниеОснования = ОписаниеОснования + ", " + СтрШаблон(
				НСтр("ru = 'с учетом исправления № %1 от %2'"),
				НомерИсправленияИсходногоДокумента,
				Формат(ДанныеДляФормированияЭД.Шапка.ДатаИсправленияИсходногоДокумента, "ДЛФ=D")
			);
				
		КонецЕсли;
		
		НоваяСтрока = ПередаточныйДокумент.Добавить();
		НоваяСтрока.ДокументНаименование = ОписаниеОснования;
		НоваяСтрока.ДокументНомер        = НомерИсходногоДокумента;
		НоваяСтрока.ДокументДата         = ДанныеДляФормированияЭД.Шапка.ДатаИсходногоДокумента;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПередаточныйДокумент, "ПередаточныйДокумент");
	
	КонецЕсли;
	
	Возврат ДеревоДанных;
	
КонецФункции

Функция ЗаполнитьДеревоДанныхУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)	
	
	Шапка = ДанныеДляФормированияЭД.Шапка;
	
	СохранитьРеквизитВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры", Шапка.СчетФактура);
	СохранитьРеквизитВДереве(ДеревоДанных, "ВидДокумента", "Корректировка");
	
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Шапка);
	
	ЭтоСчетФактураВыданный = ТипЗнч(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Шапка, "Ссылка", Неопределено)) =
		Тип("ДокументСсылка.СчетФактураВыданный");
	
	Если Настройки.Функция = "КСЧФ" ИЛИ Настройки.Функция = "КСЧФДИС" ИЛИ ЭтоСчетФактураВыданный Тогда
		НомерДокумента = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(НомерДокумента, Шапка.Ссылка);
	КонецЕсли;
	
	СохранитьРеквизитВДереве(ДеревоДанных, "НомерДокумента", НомерДокумента);
	СохранитьРеквизитВДереве(ДеревоДанных, "ДатаДокумента",  Шапка.Дата);
	
	Если Шапка.Исправление Тогда
		
		СохранитьРеквизитВДереве(ДеревоДанных, "НомерИсправления", Шапка.НомерИсправления);
		СохранитьРеквизитВДереве(ДеревоДанных, "ДатаИсправления", Шапка.ДатаИсправления);
		
	КонецЕсли;
	
	ЗаполнитьДанныеИсходныхДокументов(ДеревоДанных, ДанныеДляФормированияЭД, Настройки);
	
	СведенияОПокупателе = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Покупатель, СведенияОПокупателе);
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр",,, Истина);
	
	СведенияОПродавце = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Поставщик, СведенияОПродавце);
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПродавце, "СведенияОПродавце", "Юр");
	
	СохранитьРеквизитВДереве(ДеревоДанных, "СоставительДокументаНаименование", СведенияОПродавце.ПолноеНаименование);
	
	СохранитьРеквизитВДереве(ДеревоДанных, "ВалютаКод", Шапка.КодВалюты);
	СохранитьРеквизитВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаНаименование",
		Шапка.НаименованиеПолноеВалюты);
	СохранитьРеквизитВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс", Шапка.Курс);
	
	ДокументыОснования = ОбщегоНазначения.СкопироватьРекурсивно(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДляФормированияЭД.Шапка.ДокументОснование)
	);
	СохранитьРеквизитВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	СохранитьРеквизитВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта",
		Шапка.ИдентификаторГосударственногоКонтракта);	
	СохранитьРеквизитВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'Предлагаю изменить стоимость'"));
	
	ДайСведенияОВыбытииМаркированныхТоваров(Шапка, ДеревоДанных);
	
	Возврат ДеревоДанных;
	
КонецФункции

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных,
                                      СведенияОбУчастнике,
                                      ВидУчастника,
                                      ВидАдреса = "Юр",
                                      КорневойЭлементДерева = "",
                                      ДатаКИ = Неопределено,
                                      УчитыватьГоловногоКонтрагента = Ложь)
	
	ЕстьГоловнойКонтрагент = УчитыватьГоловногоКонтрагента И СведенияОбУчастнике.Свойство("ГоловнойКонтрагент")
		И СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ФормыСобственности.ОбособленноеПодразделение;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.ЮрФизЛицо) Тогда
		
		Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ФормыСобственности.ЮридическоеЛицо
			ИЛИ СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
				?(ЕстьГоловнойКонтрагент,
					СведенияОбУчастнике.ГоловнойКонтрагент.НаименованиеПолное,
					СведенияОбУчастнике.ПолноеНаименование),
				КорневойЭлементДерева
			);
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
				СведенияОбУчастнике.ИНН,
				КорневойЭлементДерева
			);
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
				СведенияОбУчастнике.КПП,
				КорневойЭлементДерева
			);
			
		Иначе                                                                                                		
			
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ИП.ИНН",
				СведенияОбУчастнике.ИНН,
				КорневойЭлементДерева
			);
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ИП.Фамилия",
				СведенияОбУчастнике.Фамилия,
				КорневойЭлементДерева
			);
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ИП.Имя",
				СведенияОбУчастнике.Имя,
				КорневойЭлементДерева
			);
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ИП.Отчество",
				СведенияОбУчастнике.Отчество,
				КорневойЭлементДерева
			);
			
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
				ПолучитьЗначениеПараметраСтруктуры(СведенияОбУчастнике, "Свидетельство", ""),
				КорневойЭлементДерева
			);
			
		КонецЕсли;
		
	КонецЕсли;

	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура;
	ТекстОшибки = "";
	ПолучитьАдресСтруктурой(
		АдресУчастника,
		СведенияОбУчастнике,
		?(ЕстьГоловнойКонтрагент, "ГоловнойКонтрагент", "Ссылка"),
		ВидАдреса,
		ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда 
		
		ТипАдреса = "АдресИнформация";
		
		Если ЗначениеЗаполнено(АдресУчастника.КодСтраны) И ЗначениеЗаполнено(АдресУчастника.АдресТекст) Тогда
			
			ТипАдреса = "АдресИнформация";		
			
		ИначеЕсли АдресУчастника.АдресРФ Тогда  
				 
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Адрес.Структурированный") Тогда
				
				ТипАдреса = "Структурированный";
				
			ИначеЕсли ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ") Тогда
				
				ТипАдреса = "АдресРФ";
							
			КонецЕсли;
			
	     КонецЕсли;

		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		
		СохранитьРеквизитВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.Телефон",
			СведенияОбУчастнике.Телефоны,
			КорневойЭлементДерева
		);
		
	КонецЕсли;
	
	НомерСчета = "";
	
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		
		СохранитьРеквизитВДереве(
			ДеревоДанных,
			ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
			НомерСчета,
			КорневойЭлементДерева
		);
		Банк = "";
		БИК = "";
		КоррСчет = "";
		
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				
				БанкНаименование = Банк;
				
			Иначе
				
				БанкНаименование = Банк.Наименование;
				
			КонецЕсли;
			
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
				БанкНаименование,
				КорневойЭлементДерева
			);
			
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
				БИК,
				КорневойЭлементДерева
			);
			
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
				КоррСчет,
				КорневойЭлементДерева
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.КодПоОКПО) Тогда
		
		СохранитьРеквизитВДереве(
			ДеревоДанных,
			ВидУчастника + ".КодОКПО",
			СведенияОбУчастнике.КодПоОКПО,
			КорневойЭлементДерева
		);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьАдресСтруктурой(
	СтруктураАдреса,
	СтруктураПараметров,
	ВидКонтрагента = "Контрагент",
	ВидАдреса = "Юр",
	ТекстОшибки = "") Экспорт
	
	Адрес = ПолучитьКонтактнуюИнформацию(СтруктураПараметров[ВидКонтрагента], , ВидАдреса, СтруктураПараметров.ДатаКИ);
	Параметр1 = СтруктураПараметров[ВидКонтрагента];
	Параметр2 = ?(ВидАдреса = "Юр", НСтр("ru = 'юридический'"), НСтр("ru = 'фактический'"));
	
	Если НЕ ЗначениеЗаполнено(Адрес.Представление) Тогда
		
		Ошибка = НСтр("ru = 'Для %1 необходимо указать %2 адрес.'");
		ТекстОшибки = ТекстОшибки
			+ Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2);
			
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Адрес.ЗначенияПолей) Тогда
		
		Ошибка =  НСтр("ru = 'Для %1 необходимо заполнить %2 адрес по классификатору.'");
		ТекстОшибки = ТекстОшибки
			+ Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2); 
			
		Возврат;
	
	Иначе
		
		ТекстОшибки = "";
	
	КонецЕсли;
	
	ДанныеАдреса = РаботаСАдресами.СведенияОбАдресе(Адрес.Значение);
		
	АдресРФ =  СтрСравнить(ДанныеАдреса.КодСтраны, Справочники.СтраныМира.Россия.Код) = 0
		И ЗначениеЗаполнено(ДанныеАдреса.КодРегиона);
	
	НаименованиеСтраны = "";
	Если ЗначениеЗаполнено(ДанныеАдреса.КодСтраны) Тогда
		ДанныеСтраны = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(ДанныеАдреса.КодСтраны);
		НаименованиеСтраны = ДанныеСтраны.Наименование;
	ИначеЕсли ДанныеАдреса.Свойство("Страна") И ЗначениеЗаполнено(ДанныеАдреса.Страна) Тогда
		НаименованиеСтраны = ДанныеАдреса.Страна;
	Иначе
		НаименованиеСтраны = Справочники.СтраныМира.Россия.Наименование;
	КонецЕсли;
	
	СтруктураАдреса.Вставить("АдресРФ",     АдресРФ);  
	СтруктураАдреса.Вставить("КодСтр",   	ДанныеАдреса.КодСтраны);
	СтруктураАдреса.Вставить("КодСтраны",   ДанныеАдреса.КодСтраны);
	СтруктураАдреса.Вставить("НаименованиеСтраны", НаименованиеСтраны);
	СтруктураАдреса.Вставить("Индекс",      ДанныеАдреса.Индекс);
	СтруктураАдреса.Вставить("КодРегион",   ДанныеАдреса.КодРегиона);
	СтруктураАдреса.Вставить("КодРегиона",  ДанныеАдреса.КодРегиона);
	СтруктураАдреса.Вставить("Район",       ДанныеАдреса.Район);
	СтруктураАдреса.Вставить("Город",       ДанныеАдреса.Город); 
	СтруктураАдреса.Вставить("НаселенныйПункт",  ДанныеАдреса.НаселенныйПункт);
	СтруктураАдреса.Вставить("НаселПункт",  ДанныеАдреса.НаселенныйПункт);
	СтруктураАдреса.Вставить("Улица",       ДанныеАдреса.Улица);
	СтруктураАдреса.Вставить("Дом",         "");
	СтруктураАдреса.Вставить("Корпус",		"");
	СтруктураАдреса.Вставить("Кварт",		"");
	СтруктураАдреса.Вставить("Квартира",	"");
	СтруктураАдреса.Вставить("АдрТекст",	"");
	СтруктураАдреса.Вставить("АдресТекст",	"");
	СтруктураАдреса.Вставить("КодГАР", 		""); 		
	
	// Дополним адрес	
	Если ДанныеАдреса.Свойство("Здание")  Тогда
		
		СтруктураАдреса.Дом = ?(
			ЗначениеЗаполнено(ДанныеАдреса.Здание.ТипЗдания),НРег(Строка(ДанныеАдреса.Здание.ТипЗдания)) + " ", "")
				 + ДанныеАдреса.Здание.Номер;		
		
	КонецЕсли;
	
	// Корпус
	Если ДанныеАдреса.Свойство("Корпуса") И ДанныеАдреса.Корпуса.Количество() > 0 Тогда
		
		СтруктураАдреса.Корпус = ?(
			ЗначениеЗаполнено(ДанныеАдреса.Корпуса[0].ТипКорпуса),НРег(Строка(ДанныеАдреса.Корпуса[0].ТипКорпуса)) + " ", "")
				+ ДанныеАдреса.Корпуса[0].Номер;
		
	КонецЕсли;
	
	// Помещения
	Если ДанныеАдреса.Свойство("Помещения")
		И ДанныеАдреса.Помещения.Количество() > 0 Тогда
		
		СтруктураАдреса.Кварт = ?(
			ЗначениеЗаполнено(ДанныеАдреса.Помещения[0].ТипПомещения),НРег(Строка(ДанныеАдреса.Помещения[0].ТипПомещения)) + " ", "")
				+ ДанныеАдреса.Помещения[0].Номер;

		СтруктураАдреса.Квартира = ?(
			ЗначениеЗаполнено(ДанныеАдреса.Помещения[0].ТипПомещения),НРег(Строка(ДанныеАдреса.Помещения[0].ТипПомещения)) + " ", "")
				+ ДанныеАдреса.Помещения[0].Номер;
		
	КонецЕсли;
		
	АдресТекст = "";	
	РезультатПроверки = РаботаСАдресами.ПроверитьАдрес(Адрес.ЗначенияПолей, Адрес.Вид);
	
	Если РезультатПроверки.Результат = "СодержитОшибки" Тогда 
		АдресТекст = Адрес.Представление;
	ИначеЕсли ДанныеАдреса.ТипАдреса = "Муниципальный" Тогда
		АдресТекст = ДанныеАдреса.МуниципальноеПредставление;
	Иначе 
		АдресТекст = ДанныеАдреса.Представление;
	КонецЕсли; 

	
	СтруктураАдреса.АдрТекст = АдресТекст;
	СтруктураАдреса.АдресТекст = АдресТекст;

		
КонецПроцедуры

Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева = "")
	
	Если ТипАдреса = "Произвольный" Тогда

		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Адрес.Произвольный",
			АдресУчастника.АдрТекст,
			КорневойЭлементДерева
		);

	ИначеЕсли ТипАдреса = "Структурированный"  Тогда

		АдресУчастника.Удалить("АдресРФ");
		АдресУчастника.Удалить("КодСтр");
		АдресУчастника.Удалить("КодСтраны");
		АдресУчастника.Удалить("КодРегиона");
		АдресУчастника.Удалить("НаселенныйПункт");
		АдресУчастника.Удалить("Квартира");
		АдресУчастника.Удалить("АдрТекст");
		АдресУчастника.Удалить("АдресТекст");
		АдресУчастника.Удалить("КодГАР");
		АдресУчастника.Удалить("НаименованиеСтраны");
			
		Для Каждого Элемент Из АдресУчастника Цикл

			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
				Элемент.Значение, КорневойЭлементДерева
			);

		КонецЦикла;
		
	ИначеЕсли  ТипАдреса = "Иностранный" Тогда 
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			АдресУчастника.Удалить("НаименованиеСтраны");
			Если 
				ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(
					ДеревоДанных,
					ВидУчастника + ".Адрес.Иностранный.АдрТекст") Тогда 
				АдресУчастника.Удалить("АдресТекст"); 
				АдресУчастника.Удалить("КодСтраны");
			Иначе 
				АдресУчастника.Удалить("АдрТекст");
 				АдресУчастника.Удалить("КодСтр");
			КонецЕсли;
			
		Для Каждого Элемент Из АдресУчастника Цикл

			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
				Элемент.Значение, КорневойЭлементДерева
			);

		КонецЦикла;

	ИначеЕсли ТипАдреса = "АдресРФ" Тогда

		АдресУчастника.Удалить("АдресРФ");
		АдресУчастника.Удалить("КодСтр");
		АдресУчастника.Удалить("КодСтраны");
		АдресУчастника.Удалить("АдрТекст");
		АдресУчастника.Удалить("АдресТекст");
		АдресУчастника.Удалить("Регион");
		АдресУчастника.Удалить("КодРегион");
		АдресУчастника.Удалить("НаселПункт");
		АдресУчастника.Удалить("Кварт");
		АдресУчастника.Удалить("КодГАР");
		АдресУчастника.Удалить("НаименованиеСтраны");
		
		Для Каждого Элемент Из АдресУчастника Цикл
			
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
				Элемент.Значение,
				КорневойЭлементДерева
			);

		КонецЦикла;
		
	ИначеЕсли ТипАдреса = "АдресИнформация" Тогда
		
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("КодГАР");
			АдресУчастника.Удалить("НаименованиеСтраны");
	
		Для Каждого Элемент Из АдресУчастника Цикл
				
			СохранитьРеквизитВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
				Элемент.Значение, КорневойЭлементДерева
			);
			
		КонецЦикла;
								
	ИначеЕсли ТипАдреса = "КодГАР" Тогда
		
		СохранитьРеквизитВДереве(
			ДеревоДанных,
			ВидУчастника + ".Адрес.КодГАР",
			Элемент.Значение, КорневойЭлементДерева
		);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьИнформациюОТоварахТоваровУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	Товары = НоваяТаблицаТоваровУКД_2020();
	ТолькоУслуги = Истина;
	НомерСтроки = 1;
	
	КодыУпаковокМаркируемойПродукцииДо = ОбщегоНазначения
		.МенеджерОбъектаПоСсылке(ДанныеДляФормированияЭД.Шапка.ДокументСМаркировкамиДо)
		.ПолучитьКодыУпаковокМаркируемойПродукцииСНоменклатурой(ДанныеДляФормированияЭД.Шапка.ДокументСМаркировкамиДо);
	КодыУпаковокМаркируемойПродукцииПосле = ОбщегоНазначения
		.МенеджерОбъектаПоСсылке(ДанныеДляФормированияЭД.Шапка.ДокументСМаркировкамиПосле)
		.ПолучитьКодыУпаковокМаркируемойПродукции(ДанныеДляФормированияЭД.Шапка.ДокументСМаркировкамиПосле);
		
	РНПТДо = УчетПрослеживаемыхТоваровСервер.РНПТВДокументе(ДанныеДляФормированияЭД.Шапка.ДокументСМаркировкамиДо);
	РНПТПосле = УчетПрослеживаемыхТоваровСервер.РНПТВДокументе(ДанныеДляФормированияЭД.Шапка.ДокументСМаркировкамиПосле);
	РНПТДо.Свернуть(
		"Номенклатура,ХарактеристикаНоменклатуры,ГТД,НомерТовара,ЕдиницаПрослеживаемости,КодЕдиницыПрослеживаемости",
		"Количество");
	РНПТПосле.Свернуть(
		"Номенклатура,ХарактеристикаНоменклатуры,ГТД,НомерТовара,ЕдиницаПрослеживаемости,КодЕдиницыПрослеживаемости",
		"Количество");
			
	Для Каждого Товар Из ДанныеДляФормированияЭД.Товары Цикл
		
		Товар.Вставить("Характеристика", Товар.ХарактеристикаНоменклатуры);
		
	КонецЦикла;
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(ДанныеДляФормированияЭД.Товары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
	
	Для Каждого ЭлементТоваров Из ДанныеДляФормированияЭД.Товары Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.ИдентификаторСтроки           = ЭлементТоваров.ИдентификаторТовара;
		НоваяСтрока.НомерСтроки                   = НомерСтроки;
		НоваяСтрока.НомерСтрокиИсходногоДокумента = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		Если ЭлементТоваров.Свойство("Содержание") И ЗначениеЗаполнено(ЭлементТоваров.Содержание) Тогда
			НоваяСтрока.ТоварНаименование = ЭлементТоваров.Содержание;
		Иначе
			НоваяСтрока.ТоварНаименование = ЭлементТоваров.ТоварНаименование;
		КонецЕсли;
		
		Если НеобходимоУказатьЕдиницуИзмерения(ЭлементТоваров) Тогда
			
			НоваяСтрока.ЕдиницаИзмеренияКод = ПолучитьКодЕдиницыИзмерения(ЭлементТоваров);
			НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = НоваяСтрока.ЕдиницаИзмеренияКод;
			НоваяСтрока.НаименованиеЕдиницыИзмеренияДоКорректировки = ЭлементТоваров.ЕдиницаИзмеренияНаименование;
			НоваяСтрока.НаименованиеЕдиницыИзмеренияПослеКорректировки = ЭлементТоваров.ЕдиницаИзмеренияНаименование;
			
		КонецЕсли;
		
		НоваяСтрока.КоличествоДоКорректировки          = ЭлементТоваров.КоличествоДоКорректировки;
		НоваяСтрока.Количество                         = ЭлементТоваров.Количество;
		
		СуммаБезНДСДоКорректировки = ЭлементТоваров.СуммаВсегоПоДокументуРеализации
			- ЭлементТоваров.СуммаНДСПоДокументуРеализации;
		СуммаБезНДС = ЭлементТоваров.СуммаВсего - ЭлементТоваров.СуммаНДС;
		
		Если ЭлементТоваров.КоличествоДоКорректировки <> 0 Тогда
		
			НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки = СуммаБезНДСДоКорректировки
				/ ЭлементТоваров.КоличествоДоКорректировки;
			
		Иначе
			
			НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки = 0;
			
		КонецЕсли;
		
		Если ЭлементТоваров.Количество <> 0 Тогда
			
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения = СуммаБезНДС / ЭлементТоваров.Количество;
			
		Иначе
			
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения = 0;
			
		КонецЕсли;
		
		НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = СуммаБезНДСДоКорректировки;
		НоваяСтрока.СтоимостьТоваровБезНалога                = СуммаБезНДС;
		НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение      = Макс(СуммаБезНДС - СуммаБезНДСДоКорректировки, 0);
		НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение      = Макс(СуммаБезНДСДоКорректировки - СуммаБезНДС, 0);
		НоваяСтрока.НалоговаяСтавкаДоКорректировки           = ЭлементТоваров.СтавкаНДС;
		НоваяСтрока.НалоговаяСтавка                          = ЭлементТоваров.СтавкаНДС;
		НоваяСтрока.СуммаНалогаДоКорректировки               = ЭлементТоваров.СуммаНДСПоДокументуРеализации;
		НоваяСтрока.СуммаНалога                              = ЭлементТоваров.СуммаНДС;
		
		СуммаНалогаУвеличение = Макс(ЭлементТоваров.СуммаНДС - ЭлементТоваров.СуммаНДСПоДокументуРеализации, 0);
		СуммаНалогаУменьшение = Макс(ЭлементТоваров.СуммаНДСПоДокументуРеализации - ЭлементТоваров.СуммаНДС, 0);
		
		НоваяСтрока.СуммаНалогаУвеличение = СуммаНалогаУвеличение;
		НоваяСтрока.СуммаНалогаУменьшение = СуммаНалогаУменьшение;		
		НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = ЭлементТоваров.СуммаВсегоПоДокументуРеализации;
		НоваяСтрока.СтоимостьТоваровСНалогом                = ЭлементТоваров.Суммавсего;
		НоваяСтрока.СтоимостьТоваровСНалогомУвеличение      = Макс(
			ЭлементТоваров.СуммаВсего - ЭлементТоваров.СуммаВсегоПоДокументуРеализации, 0);
		НоваяСтрока.СтоимостьТоваровСНалогомУменьшение      = Макс(
			ЭлементТоваров.СуммаВсегоПоДокументуРеализации - ЭлементТоваров.СуммаВсего, 0);
		
		Если ТипЗнч(ЭлементТоваров.Номенклатура) <> Тип("СправочникСсылка.Автомобили") Тогда
			
			ТолькоУслуги = ТолькоУслуги И ЭтоУслуга(ЭлементТоваров.Номенклатура);
			
		Иначе
			
			ТолькоУслуги = Ложь;
			
		КонецЕсли;
		
		НоваяСтрока.Номенклатура     = ЭлементТоваров.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ЭлементТоваров.ЕдиницаИзмерения;
		НоваяСтрока.ТоварНаименованиеНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(
			ЭлементТоваров.Номенклатура, "Наименование");
		
		Если ЗначениеЗаполнено(ЭлементТоваров.ХарактеристикаНоменклатуры) Тогда
				
			НоваяСтрока.ХарактеристикаОписаниеТовара = Строка(ЭлементТоваров.ХарактеристикаНоменклатуры);
			
		КонецЕсли;
			
		НоваяСтрока.СортТовара                                     = "";
		НоваяСтрока.АртикулТовара                                  = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(
				ЭлементТоваров.Номенклатура);
		НоваяСтрока.КодТовара                                      = НоваяСтрока.АртикулТовара;
		НоваяСтрока.НаименованиеЕдиницыИзмеренияДоКорректировки    = ЭлементТоваров.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.НаименованиеЕдиницыИзмеренияПослеКорректировки = ЭлементТоваров.ЕдиницаИзмеренияНаименование;
		
		НоваяСтрока.Сопоставление = СопоставленияНоменклатурыЭД(ЭлементТоваров.Номенклатура,
			ЭлементТоваров.ХарактеристикаНоменклатуры, ЭлементТоваров.ЕдиницаИзмерения);
			
		ЗаполнитьШтрихкодыТоваровВСопоставление(
			НоваяСтрока.Сопоставление,
			ШтрихкодыНоменклатуры,
			ШтрихкодыКомбинаций,
			ЭлементТоваров.Номенклатура,
			ЭлементТоваров.ХарактеристикаНоменклатуры,
			ЭлементТоваров.ЕдиницаИзмерения
		);
				
		Если ЗначениеЗаполнено(ЭлементТоваров.КодТНВЭД) Тогда
			
			НоваяСтрока.КодВидаТовара = ЭлементТоваров.КодТНВЭД;
			
		КонецЕсли;
		
		// Заполним ГТД товаров
		Если ЕстьРеквизит(ДанныеДляФормированияЭД, "ГТДТоваров") Тогда
			
			НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации(НоваяСтрока,
			ДанныеДляФормированияЭД.ГТДТоваров);
			
		КонецЕсли;
			
		НоваяСтрока.СведенияОМаркировкеДо = СведенияОКодахУпаковокМаркируемойПродукции(НоваяСтрока,
		КодыУпаковокМаркируемойПродукцииДо);
		НоваяСтрока.СведенияОМаркировкеПосле = СведенияОКодахУпаковокМаркируемойПродукции(НоваяСтрока,
			КодыУпаковокМаркируемойПродукцииПосле);
		
		// Заполним РНПТ до и после
		СведенияОПрослеживаемости = СведенияОПрослеживаемостиКорректировки(ЭлементТоваров, НоваяСтрока,
			РНПТДо, РНПТПосле);
		
		Если СведенияОПрослеживаемости <> Неопределено Тогда
			
			НоваяСтрока.СведенияОПрослеживаемости = СведенияОПрослеживаемости.ТаблицаРНПТ;
			
			Если НоваяСтрока.СведенияОТаможеннойДекларации = Неопределено Тогда
				
				НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОПрослеживаемости.СписокГТД;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- значения колонок ""Сумма"", ""НДС"", ""Количество"" до и после корректировки не отличаются'");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение",
		Товары.Итог("СтоимостьТоваровБезНалогаУвеличение"),
		ТекстОшибки
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение",
		Товары.Итог("СтоимостьТоваровСНалогомУвеличение"),
		ТекстОшибки
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение",
		Товары.Итог("СуммаНалогаУвеличение"),
		ТекстОшибки
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение",
		Товары.Итог("СтоимостьТоваровБезНалогаУменьшение"),
		ТекстОшибки
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение",
		Товары.Итог("СтоимостьТоваровСНалогомУменьшение"),
		ТекстОшибки
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение",
		Товары.Итог("СуммаНалогаУменьшение"),
		ТекстОшибки
	);	
	
	// Обработка ошибки через механизм сообщений пользователю.
	Если ДанныеДляФормированияЭД.Шапка.Свойство("Ссылка") Тогда
		
		СсылкаНаДокумент = ДанныеДляФормированияЭД.Шапка.Ссылка;
		
	Иначе
		
		СсылкаНаДокумент = ДанныеДляФормированияЭД.Ссылка;
		
	КонецЕсли;
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ЕдиницаИзмеренияНаименование";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнена наименование единицы измерения в справочнике ""Номенклатура"".'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ЕдиницаИзмеренияКод";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Номенклатура"".'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "Количество";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не указано количество товара в табличной части'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ТоварКод";
	ОписаниеОшибкиДляТаблицы.КлючДанных  = "Номенклатура";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным = "Объект.Код";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ТоварНаименование";
	ОписаниеОшибкиДляТаблицы.КлючДанных  = "Номенклатура";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным = "Объект.НаименованиеПолное";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "Количество";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.Количество";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтроки";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "КоличествоДоКорректировки";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.КоличествоДоКорректировки";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтроки";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "ЦенаЗаЕдиницуИзмерения";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.Цена";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтроки";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "ЦенаЗаЕдиницуИзмеренияДоКорректировки";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.ЦенаДоКорректировки";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтроки";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "СтоимостьТоваровБезНалога";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.Сумма";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтроки";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "СтоимостьТоваровБезНалогаДоКорректировки";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.СуммаДоКорректировки";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтроки";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "СуммаНалога";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.СуммаНДС";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтроки";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "СуммаНалогаДоКорректировки";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.СуммаНДСДоКорректировки";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтроки";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "ЕдиницаИзмеренияНаименование";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = "ЕдиницаИзмерения";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Наименование";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "ЕдиницаИзмеренияКод";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = "ЕдиницаИзмерения";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Код";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "ЕдиницаИзмеренияКодДоКорректировки";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = "ЕдиницаИзмерения";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Код";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "Признак";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = "Номенклатура";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.ТипНоменклатуры";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ТекстОшибки = НСтр("ru = 'для формирования электронного документа необходимо указать налоговую ставку'");
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "НалоговаяСтавка";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = ТекстОшибки;
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "НалоговаяСтавка";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = ТекстОшибки;
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Товары, ОписаниеОшибкиДляТаблицы);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, Товары, "СведенияОТоварах");
	СохранитьРеквизитВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	Возврат ДеревоДанных;
	
КонецФункции

Функция НоваяТаблицаТоваровУКД_2020()
	
	Число_26_11 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11));
	Число_19_2  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2));
	Строка_10   = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10));
	Строка_50   = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50));
	Строка_100  = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
	Строка_255  = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(255));
	Строка_1000 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6)));
	Результат.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	Результат.Колонки.Добавить("ТоварНаименование");
	Результат.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	Результат.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Результат.Колонки.Добавить("Количество", Число_26_11);
	Результат.Колонки.Добавить("КоличествоДоКорректировки", Число_26_11);
	Результат.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Число_26_11);
	Результат.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Число_26_11);
	Результат.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Число_19_2);
	Результат.Колонки.Добавить("СтоимостьТоваровБезНалога", Число_19_2);
	Результат.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Число_19_2);
	Результат.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Число_19_2);
	Результат.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	Результат.Колонки.Добавить("НалоговаяСтавка");
	Результат.Колонки.Добавить("СуммаНалогаДоКорректировки", Число_19_2);
	Результат.Колонки.Добавить("СуммаНалога", Число_19_2);
	Результат.Колонки.Добавить("СуммаНалогаУвеличение");
	Результат.Колонки.Добавить("СуммаНалогаУменьшение");
	Результат.Колонки.Добавить("СуммаАкцизаДоКорректировки", Число_19_2);
	Результат.Колонки.Добавить("СуммаАкциза", Число_19_2);
	Результат.Колонки.Добавить("СуммаАкцизаУвеличение");
	Результат.Колонки.Добавить("СуммаАкцизаУменьшение");
	Результат.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Число_19_2);
	Результат.Колонки.Добавить("СтоимостьТоваровСНалогом", Число_19_2);
	Результат.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Число_19_2);
	Результат.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Число_19_2);
	Результат.Колонки.Добавить("ХарактеристикаОписаниеТовара", Строка_1000);
	Результат.Колонки.Добавить("АртикулТовара", Строка_50);
	Результат.Колонки.Добавить("КодТовара", Строка_100);
	Результат.Колонки.Добавить("НаименованиеЕдиницыИзмеренияДоКорректировки", Строка_255);
	Результат.Колонки.Добавить("НаименованиеЕдиницыИзмеренияПослеКорректировки", Строка_255);
	Результат.Колонки.Добавить("КодВидаТовара", Строка_10);
	Результат.Колонки.Добавить("СортТовара", Строка_10);
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("ЕдиницаИзмерения");
	Результат.Колонки.Добавить("ТоварНаименованиеНавигационнаяСсылка");
	Результат.Колонки.Добавить("Сопоставление");
	Результат.Колонки.Добавить("ИдентификаторСтроки");
	Результат.Колонки.Добавить("СведенияОМаркировкеДо");
	Результат.Колонки.Добавить("СведенияОМаркировкеПосле");
	Результат.Колонки.Добавить("СведенияОПрослеживаемости");
	Результат.Колонки.Добавить("СведенияОТаможеннойДекларации");
	Возврат Результат;
	
КонецФункции

Функция СведенияОТаможеннойДекларации(СтрокаДокумента, ТаблицаГТД)
	
	// Найдем данные для вывода в ЭД
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
	Если СтруктураПоиска.ХарактеристикаНоменклатуры = Неопределено Тогда
		СтруктураПоиска.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	НайденныеСтроки = ТаблицаГТД.НайтиСтроки(СтруктураПоиска);
	
	// Не нашли по ГТД
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СписокГТД = Новый ТаблицаЗначений;
	СписокГТД.Колонки.Добавить("ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
	СписокГТД.Колонки.Добавить("СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		
		НоваяСтрока = СписокГТД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат СписокГТД;
	
КонецФункции

Функция СведенияОПрослеживаемостиКорректировки(СтрокаТовара, СтрокаДокумента, ТаблицаРНПТДо, ТаблицаРНПТПосле)
	
	// Найдем данные для вывода в ЭД
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
	Если СтруктураПоиска.ХарактеристикаНоменклатуры = Неопределено Тогда
		СтруктураПоиска.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	НайденныеСтрокиДо = ТаблицаРНПТДо.НайтиСтроки(СтруктураПоиска);
	НайденныеСтрокиПосле = ТаблицаРНПТПосле.НайтиСтроки(СтруктураПоиска);
	
	// Не нашли по ГТД прослеживаемого товара
	Если НайденныеСтрокиДо.Количество() = 0
		И НайденныеСтрокиПосле.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТаблицаГТД = Новый ТаблицаЗначений;
	ТаблицаГТД.Колонки.Добавить("НомерТовара", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
	ТаблицаГТД.Колонки.Добавить("ЕдиницаИзмеренияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(4)));
	ТаблицаГТД.Колонки.Добавить("КоличествоТовараДоИзменения", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(26, 11)));
	ТаблицаГТД.Колонки.Добавить("КоличествоТовараПослеИзменения", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(26, 11)));
	ТаблицаГТД.Колонки.Добавить("КоличествоТовараУвеличение", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(26, 11)));
	ТаблицаГТД.Колонки.Добавить("КоличествоТовараУменьшение", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(26, 11)));
	ТаблицаГТД.Колонки.Добавить("КоличествоТовараУчетноеДоИзменения", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(26, 11)));
	ТаблицаГТД.Колонки.Добавить("КоличествоТовараУчетноеПослеИзменения", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(26, 11)));
	ТаблицаГТД.Колонки.Добавить("КоличествоТовараУчетноеУвеличение", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(26, 11)));
	ТаблицаГТД.Колонки.Добавить("КоличествоТовараУчетноеУменьшение", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(26, 11)));
	ТаблицаГТД.Колонки.Добавить("СтоимостьБезНДСДоИзменения", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(19, 2)));
	ТаблицаГТД.Колонки.Добавить("СтоимостьБезНДСПослеИзменения", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(19, 2)));
	ТаблицаГТД.Колонки.Добавить("СтоимостьБезНДСУвеличение", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(19, 2)));
	ТаблицаГТД.Колонки.Добавить("СтоимостьБезНДСУменьшение", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(19, 2)));
	
	// Пройдемся по РНПТ до
	СтруктураПоискаГТД = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,НомерТовара");
	ЗаполнитьЗначенияСвойств(СтруктураПоискаГТД, СтруктураПоиска); 
	
	КоличествоТовара = СтрокаТовара.Количество * СтрокаТовара.Коэффициент;
	КоличествоТовараДоКорректировки =
		СтрокаТовара.КоличествоДоКорректировки * СтрокаТовара.КоэффициентПоДокументуРеализации;
	СтоимостьТоваровБезНалога = СтрокаДокумента.СтоимостьТоваровБезНалога;
	СтоимостьТоваровБезНалогаДоКорректировки = СтрокаДокумента.СтоимостьТоваровБезНалогаДоКорректировки;
	
	Для Каждого СтрокаРНПТДо Из НайденныеСтрокиДо Цикл
		
		НоваяСтрока = ТаблицаГТД.Добавить();
		НоваяСтрока.НомерТовара = СокрЛП(СтрокаРНПТДо.НомерТовара);
		НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(СтрокаРНПТДо.КодЕдиницыПрослеживаемости);
		НоваяСтрока.КоличествоТовараДоИзменения = СтрокаРНПТДо.Количество
			* ?(СтрокаРНПТДо.Количество < 0, -1, 1);
		
		// Найдем что осталось после
		СтруктураПоискаГТД.НомерТовара = СтрокаРНПТДо.НомерТовара;
		НайденныеСтроки = ТаблицаРНПТПосле.НайтиСтроки(СтруктураПоискаГТД);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НоваяСтрока.КоличествоТовараПослеИзменения = НайденныеСтроки[0].Количество;
			
		Иначе
			
			НоваяСтрока.КоличествоТовараПослеИзменения = 0;
			
		КонецЕсли;
		
		Разница = НоваяСтрока.КоличествоТовараПослеИзменения - НоваяСтрока.КоличествоТовараДоИзменения;
		
		Если Разница >= 0 Тогда
			
			// Увеличилось количество
			НоваяСтрока.КоличествоТовараУвеличение = Разница;
			НоваяСтрока.КоличествоТовараУменьшение = 0;
			
		Иначе
			
			// Уменьшилось количество
			НоваяСтрока.КоличествоТовараУвеличение = 0;
			НоваяСтрока.КоличествоТовараУменьшение = - Разница;
			
		КонецЕсли;
		
		НоваяСтрока.КоличествоТовараУчетноеДоИзменения = НоваяСтрока.КоличествоТовараДоИзменения;
		НоваяСтрока.КоличествоТовараУчетноеПослеИзменения = НоваяСтрока.КоличествоТовараПослеИзменения;
		НоваяСтрока.КоличествоТовараУчетноеУвеличение = НоваяСтрока.КоличествоТовараУвеличение;
		НоваяСтрока.КоличествоТовараУчетноеУменьшение = НоваяСтрока.КоличествоТовараУменьшение;
		
		Если НоваяСтрока.КоличествоТовараПослеИзменения >= КоличествоТовара Тогда
			СтоимостьТоваровБезНалогаТовара = СтоимостьТоваровБезНалога;
			СтоимостьТоваровБезНалога = 0;
			КоличествоТовара = 0;
		Иначе
			СтоимостьТоваровБезНалогаТовара = Окр(
					СтоимостьТоваровБезНалога
					/ ?(КоличествоТовара = 0, 1, КоличествоТовара)
					* НоваяСтрока.КоличествоТовараПослеИзменения);
			СтоимостьТоваровБезНалога = СтоимостьТоваровБезНалога - СтоимостьТоваровБезНалогаТовара;
			КоличествоТовара = КоличествоТовара - НоваяСтрока.КоличествоТовараПослеИзменения;
		КонецЕсли;
		
		Если НоваяСтрока.КоличествоТовараУчетноеДоИзменения >= КоличествоТовараДоКорректировки Тогда
			СтоимостьТоваровБезНалогаТовараДоКорректировки = СтоимостьТоваровБезНалогаДоКорректировки;
			СтоимостьТоваровБезНалогаДоКорректировки = 0;
			КоличествоТовараДоКорректировки = 0;
		Иначе
			СтоимостьТоваровБезНалогаТовараДоКорректировки = Окр(
					СтоимостьТоваровБезНалогаДоКорректировки
					/ ?(КоличествоТовараДоКорректировки = 0, 1, КоличествоТовараДоКорректировки)
					* НоваяСтрока.КоличествоТовараУчетноеДоИзменения);
			СтоимостьТоваровБезНалогаДоКорректировки =
				СтоимостьТоваровБезНалогаДоКорректировки - СтоимостьТоваровБезНалогаТовараДоКорректировки;
			КоличествоТовараДоКорректировки = КоличествоТовараДоКорректировки - НоваяСтрока.КоличествоТовараУчетноеДоИзменения;
		КонецЕсли;
		
		СуммаРазницаБезНДС =
			СтоимостьТоваровБезНалогаТовара - СтоимостьТоваровБезНалогаТовараДоКорректировки;
		
		Если СуммаРазницаБезНДС >= 0 Тогда
			
			// Увеличилась сумма
			НоваяСтрока.СтоимостьБезНДСУвеличение = СуммаРазницаБезНДС;
			НоваяСтрока.СтоимостьБезНДСУменьшение = 0;
			
		Иначе
			
			// Уменьшилась сумма
			НоваяСтрока.СтоимостьБезНДСУвеличение = 0;
			НоваяСтрока.СтоимостьБезНДСУменьшение = - СуммаРазницаБезНДС;
			
		КонецЕсли;
		
		НоваяСтрока.СтоимостьБезНДСДоИзменения = СтоимостьТоваровБезНалогаТовараДоКорректировки;
		НоваяСтрока.СтоимостьБезНДСПослеИзменения = СтоимостьТоваровБезНалогаТовара;
		
	КонецЦикла;
	
	// Добавим новые РНПТ
	СтруктураПоискаГТД = Новый Структура("НомерТовара");
	Для Каждого СтрокаРНППосле Из НайденныеСтрокиПосле Цикл
		
		// Исключим ранее заполненные строки
		НомерТовара = СокрЛП(СтрокаРНППосле.НомерТовара);
		СтруктураПоискаГТД.НомерТовара = НомерТовара;
		
		Если ТаблицаГТД.НайтиСтроки(СтруктураПоискаГТД).Количество() > 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаГТД.Добавить();
		НоваяСтрока.НомерТовара = НомерТовара;
		НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(СтрокаРНППосле.КодЕдиницыПрослеживаемости);
		НоваяСтрока.КоличествоТовараДоИзменения = 0;
		НоваяСтрока.КоличествоТовараПослеИзменения = СтрокаРНППосле.Количество
			* ?(СтрокаРНППосле.Количество < 0, -1, 1);
		НоваяСтрока.КоличествоТовараУвеличение = НоваяСтрока.КоличествоТовараПослеИзменения;
		НоваяСтрока.КоличествоТовараУменьшение = 0;
		НоваяСтрока.КоличествоТовараУчетноеДоИзменения = НоваяСтрока.КоличествоТовараДоИзменения;
		НоваяСтрока.КоличествоТовараУчетноеПослеИзменения = НоваяСтрока.КоличествоТовараПослеИзменения;
		НоваяСтрока.КоличествоТовараУчетноеУвеличение = НоваяСтрока.КоличествоТовараУвеличение;
		НоваяСтрока.КоличествоТовараУчетноеУменьшение = НоваяСтрока.КоличествоТовараУменьшение;
		НоваяСтрока.СтоимостьБезНДСУменьшение = 0;
		НоваяСтрока.СтоимостьБезНДСДоИзменения = 0;
		
		Если НоваяСтрока.КоличествоТовараПослеИзменения > КоличествоТовара Тогда
			НоваяСтрока.СтоимостьБезНДСУвеличение = СтоимостьТоваровБезНалога;
			СтоимостьТоваровБезНалога = 0;
			КоличествоТовара = 0;
		Иначе
			НоваяСтрока.СтоимостьБезНДСУвеличение = Окр(
					СтоимостьТоваровБезНалога
					/ ?(КоличествоТовара = 0, 1, КоличествоТовара)
					* НоваяСтрока.КоличествоТовараПослеИзменения);
			СтоимостьТоваровБезНалога = СтоимостьТоваровБезНалога - НоваяСтрока.СтоимостьБезНДСУвеличение;
			КоличествоТовара = КоличествоТовара - НоваяСтрока.КоличествоТовараПослеИзменения;
		КонецЕсли;
		НоваяСтрока.СтоимостьБезНДСПослеИзменения = НоваяСтрока.СтоимостьБезНДСУвеличение;
		
	КонецЦикла;
	
	// Получим страну
	СписокГТД = Новый ТаблицаЗначений;
	СписокГТД.Колонки.Добавить("ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
	СписокГТД.Колонки.Добавить("СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
	
	Если НайденныеСтрокиПосле.Количество() > 0 Тогда
		
		ГТД = НайденныеСтрокиПосле[0].ГТД;
		
	Иначе
		
		ГТД = НайденныеСтрокиДо[0].ГТД;
		
	КонецЕсли;
	
	НоваяСтрока = СписокГТД.Добавить();
	НоваяСтрока.ТаможеннаяДекларацияНомер = "-";
	НоваяСтрока.СтранаПроисхожденияКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГТД, "Страна.Код");
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаРНПТ", ТаблицаГТД);
	Результат.Вставить("СписокГТД", СписокГТД);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоУслуга(Товар)
	
	Возврат ТипЗнч(Товар) = Тип("СправочникСсылка.Автоработы")
		Или Товар.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга
	
КонецФункции

Процедура ЗаполнитьДанныеИсходныхДокументов(ДеревоДанных, ДанныеДляФормированияЭД, Настройки)
	
	Шапка = ДанныеДляФормированияЭД.Шапка;
	
	Если Не ЗначениеЗаполнено(Шапка.НомерИсходногоДокумента) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИсходныеДокументы = Новый ТаблицаЗначений;
	ИсходныеДокументы.Колонки.Добавить("НомерИсходногоДокумента");
	ИсходныеДокументы.Колонки.Добавить("ДатаИсходногоДокумента");
	ИсходныеДокументы.Колонки.Добавить("ИсправленияИсходногоДокумента");
	
	НомерИсходногоДокумента = Шапка.НомерИсходногоДокумента;
	
	Если Не Константы.ПолныйНомерДокументаВПечатныхФормах.Получить() Тогда
	
		НомерИсходногоДокумента = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(
			Шапка.НомерИсходногоДокумента,
			Истина,
			Истина
		);
		
	КонецЕсли;
	
	НомерДокумента = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(
		НомерИсходногоДокумента,
		Шапка.Ссылка
	);
	
	СтрокаИсходныеДокументы = ИсходныеДокументы.Добавить();
	СтрокаИсходныеДокументы.НомерИсходногоДокумента = НомерДокумента;
	СтрокаИсходныеДокументы.ДатаИсходногоДокумента  = Шапка.ДатаИсходногоДокумента;
		
	Если Шапка.УчитыватьИсправлениеИсходногоДокумента Тогда
		
		ИсправленияИсходногоДокумента = Новый ТаблицаЗначений;
		ИсправленияИсходногоДокумента.Колонки.Добавить("НомерИсправленияИсходногоДокумента");
		ИсправленияИсходногоДокумента.Колонки.Добавить("ДатаИсправленияИсходногоДокумента");
		
		СтрокаИсправленияИсходногоДокумента = ИсправленияИсходногоДокумента.Добавить();
		СтрокаИсправленияИсходногоДокумента.НомерИсправленияИсходногоДокумента = Шапка.НомерИсправленияИсходногоДокумента;
		СтрокаИсправленияИсходногоДокумента.ДатаИсправленияИсходногоДокумента = Шапка.ДатаИсправленияИсходногоДокумента;
		СтрокаИсходныеДокументы.ИсправленияИсходногоДокумента = ИсправленияИсходногоДокумента;
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ИсходныеДокументы, "ИсходныеДокументы");
	
КонецПроцедуры

Процедура РазделитьСтрокуТовараКСФ(Товары, СтрокаКРазделению, ТоварыКорректируемогоСФ)
	
	ИсключатьСвойства = "ГТД, Количество, Сумма, СуммаВсего, СуммаНДС, СведенияОИзмененииКоличества, СведенияОПрослеживаемости";
	ИсключатьСвойстваПрослеживаемость = "СведенияОПрослеживаемости";
	
	ОбщееКоличество = СтрокаКРазделению.Количество;
	
	ОбработаноНДС 		= 0; 
	РаспределеноНДС		= 0; 
	КоэффициентРаспределения = СтрокаКРазделению.СуммаНДС / СтрокаКРазделению.Сумма;  
	
	ОбработаноСумма 	= 0;
	РаспределеноСумма	= 0;	
	КоэффициентРаспределенияСумма = СтрокаКРазделению.Сумма / СтрокаКРазделению.СуммаВсего;

	Для Каждого СтрокаСведенияОПрослеживаемости Из СтрокаКРазделению.СведенияОПрослеживаемости Цикл
		
		ЭтоНовыйТовар = СтрокаСведенияОПрослеживаемости.КоличествоТовараДоИзменения = 0;
		СписалиПолностью = СтрокаСведенияОПрослеживаемости.КоличествоТовараПослеИзменения = 0;
		ИзменилосьКоличество = НЕ ЭтоНовыйТовар И НЕ СписалиПолностью;
		
		Если ЭтоНовыйТовар ИЛИ ИзменилосьКоличество Тогда
			
			НоваяСтрока = Товары.Добавить();  
			Если ОбщееКоличество = СтрокаСведенияОПрослеживаемости.КоличествоТовараДоИзменения И 
			 		ОбщееКоличество = СтрокаСведенияОПрослеживаемости.КоличествоТовараПослеИзменения Тогда 
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКРазделению,, ИсключатьСвойстваПрослеживаемость);
				Продолжить;
			Иначе 	
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКРазделению,, ИсключатьСвойства); 
			КонецЕсли;
			
			НоваяСтрока.ГТД        = СтрокаСведенияОПрослеживаемости.РНПТ;
			НоваяСтрока.Количество = СтрокаСведенияОПрослеживаемости.КоличествоТовараПослеИзменения;
			
			СуммаРасчетная = СтрокаКРазделению.СуммаВсего/ОбщееКоличество* НоваяСтрока.Количество; 	
			НоваяСтрока.Сумма = ОКР((СуммаРасчетная + ОбработаноСумма) * КоэффициентРаспределенияСумма - РаспределеноСумма, 2);
			
			Если ОбщееКоличество <> 0 
				И НоваяСтрока.Количество <> 0 Тогда
				
				СуммаНДС = ОКР((НоваяСтрока.Сумма + ОбработаноНДС) * КоэффициентРаспределения - РаспределеноНДС, 2);				
			Иначе
				
				СуммаНДС = 0;
				
			КонецЕсли;
				
			ОбработаноНДС 	= ОбработаноНДС + НоваяСтрока.Сумма;
			РаспределеноНДС = РаспределеноНДС + СуммаНДС;
			ОбработаноСумма = ОбработаноСумма + СуммаРасчетная; 
			РаспределеноСумма = РаспределеноСумма + НоваяСтрока.Сумма;
			
			НоваяСтрока.СуммаНДС   = СуммаНДС;
			НоваяСтрока.СуммаВсего = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
			
		КонецЕсли; 
		
		// Удаляем строки из данных предыдущего СФ
		Если СписалиПолностью ИЛИ ИзменилосьКоличество Тогда
			
			ТоварыСФкУдалениюОтбор = Новый Структура();
			ТоварыСФкУдалениюОтбор.Вставить("Номенклатура"              , СтрокаКРазделению.Номенклатура);
			ТоварыСФкУдалениюОтбор.Вставить("ХарактеристикаНоменклатуры", СтрокаКРазделению.ХарактеристикаНоменклатуры);
			ТоварыСФкУдалениюОтбор.Вставить("ГТД"                       , СтрокаСведенияОПрослеживаемости.РНПТ);
			ТоварыСФкУдалениюОтбор.Вставить("Количество"                , СтрокаСведенияОПрослеживаемости.КоличествоТовараДоИзменения);
			
			ТоварыСФкУдалению = ТоварыКорректируемогоСФ.НайтиСтроки(ТоварыСФкУдалениюОтбор);
			
			Для Каждого СтрокаКУдалению Из ТоварыСФкУдалению Цикл
				
				ТоварыКорректируемогоСФ.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры                                           

Процедура ЗаполнитьСписокНоменклатурыКСФ(СписокНоменклатуры, ТоварыЭД, ТоварыСФПоОснованию)
	
	Для Каждого СтрокаТовара Из ТоварыЭД Цикл
		
		// Обработаем товары, у которых изменилось количество.
		Если ЗначениеЗаполнено(СтрокаТовара.СведенияОИзмененииКоличества) Тогда
			
			ОбработатьТоварСИзмененнымКоличеством(СписокНоменклатуры, СтрокаТовара, ТоварыСФПоОснованию);
			
		Иначе
			
			НоваяСтрока = СписокНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим оставшиеся товары, которые не менялись из предыдущего СФ.
	Если ТоварыСФПоОснованию <> Неопределено Тогда
		Для Каждого Товар Из ТоварыСФПоОснованию Цикл
			
			НоваяСтрока = СписокНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар); 
			Если НоваяСтрока.СуммаНДС = 0 Тогда
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ТоварыУКДПоДокументуПоступления(ДокументПоступления)
	
	ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
	СтароеЗначениеПрава = ПравоПользователя("ВводНаОснованииПроведенныхДокументов", ДокументОбъект);
	ОбновитьПравоВКэше("ВводНаОснованииПроведенныхДокументов", Ложь, ДокументОбъект);
	ДокументОбъект.Заполнить(ДокументПоступления);
	ОбновитьПравоВКэше("ВводНаОснованииПроведенныхДокументов", СтароеЗначениеПрава, ДокументОбъект);
	
	Возврат ДокументОбъект.Товары.Выгрузить();
	
КонецФункции

Процедура ОбработатьТоварСИзмененнымКоличеством(СписокНоменклатуры, СтрокаТовара, ТоварыСФПоОснованию)
	
	ИсключатьСвойства = "Цена, Количество, Сумма, СуммаВсего, СуммаНДС";
	
	СведенияОИзменении = СтрокаТовара.СведенияОИзмененииКоличества;
	СписалиПолностью = СведенияОИзменении.Количество = 0;
	
	Если НЕ СписалиПолностью Тогда
		
		НоваяСтрока = СписокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара,, ИсключатьСвойства);
		
		НоваяСтрока.Количество = СведенияОИзменении.Количество;
		НоваяСтрока.Цена       = СведенияОИзменении.ЦенаЗаЕдиницуИзмерения;
		НоваяСтрока.Сумма      = СведенияОИзменении.СтоимостьТоваровБезНалога;
		НоваяСтрока.СуммаНДС   = СведенияОИзменении.СуммаНалога;
		НоваяСтрока.СуммаВсего = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
		
	КонецЕсли;
	
	Если ТоварыСФПоОснованию <> Неопределено Тогда
		
		Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО") Тогда
			
			Если СведенияОИзменении.КоличествоДоКорректировки = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ТоварИзмКоличествоОтбор = Новый Структура(
				"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
			);
			ЗаполнитьЗначенияСвойств(ТоварИзмКоличествоОтбор, СтрокаТовара);
			НайденныеСтроки = ТоварыСФПоОснованию.НайтиСтроки(ТоварИзмКоличествоОтбор);
			
			СтрокиКУдалению = Новый Массив;
			НадоСписать = СведенияОИзменении.КоличествоДоКорректировки;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НадоСписать = 0 Тогда
					Прервать;
				КонецЕсли;
				
				КСписанию = Мин(НадоСписать, НайденнаяСтрока.Количество);
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - КСписанию;
				НадоСписать = НадоСписать - КСписанию;
				Если НайденнаяСтрока.Количество > 0 Тогда
					НайденнаяСтрока.Сумма = НайденнаяСтрока.Сумма - СведенияОИзменении.СтоимостьТоваровБезНалогаДоКорректировки;
					НайденнаяСтрока.СуммаНДС = НайденнаяСтрока.СуммаНДС - СведенияОИзменении.СуммаНалогаДоКорректировки;
					НайденнаяСтрока.СуммаВсего = НайденнаяСтрока.СуммаВсего
						- СведенияОИзменении.СтоимостьТоваровБезНалогаДоКорректировки
						- СведенияОИзменении.СуммаНалогаДоКорректировки;
					НайденнаяСтрока.Цена = ?(
						НайденнаяСтрока.Количество = 0,
						0,
						Окр(НайденнаяСтрока.Сумма / НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20)
					);
				Иначе
					СтрокиКУдалению.Добавить(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				ТоварыСФПоОснованию.Удалить(Строка);
			КонецЦикла;
			
		Иначе
			
			ТоварИзмКоличествоОтбор = Новый Структура();
			ТоварИзмКоличествоОтбор.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			ТоварИзмКоличествоОтбор.Вставить("ГТД"         , СтрокаТовара.ГТД);
			ТоварИзмКоличествоОтбор.Вставить("ХарактеристикаНоменклатуры" , СтрокаТовара.ХарактеристикаНоменклатуры);
			ТоварИзмКоличествоОтбор.Вставить("Количество"  , СведенияОИзменении.КоличествоДоКорректировки);
			
			ТоварыКСФкУдалению = ТоварыСФПоОснованию.НайтиСтроки(ТоварИзмКоличествоОтбор);
			
			Для Каждого СтрокаКУдалению Из ТоварыКСФкУдалению Цикл
				
				ТоварыСФПоОснованию.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Разделяет строки товаров, если у товара присутствуют сведения о прослеживаемости.
//
// Параметры:
// 	Товары - ТаблицаЗначений - таблица с товарами для разделения.
// 	СпособРазделения - Строка – параметр, указывающий метод разделения строки:
//	    * УКД - применяется для универсального корретировочного документа.
//	    * УПД - применяется для универсального передаточного документа.
//	    * КСФ - применяется для корректировочного счета-фактуры.
//	ТоварыКорректируемогоСФ - ТаблицаЗначений - товары корректируемого счета-фактуры.
//                                          Передается только если СпособРазделения принимает значение "КСФ".
//
Процедура РазделитьТоварыПоДаннымСведенийОПрослеживаемости(Товары, СпособРазделения, ТоварыКорректируемогоСФ = Неопределено)
	
	Если НЕ КолонкаСуществует(Товары, "СведенияОПрослеживаемости") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив();
	
	Для Каждого СтрокаТовара Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовара.СведенияОПрослеживаемости) Тогда
			
			Если СпособРазделения = "УКД" Тогда
				
				РазделитьСтрокуТовараУКД(Товары, СтрокаТовара);	
				
			ИначеЕсли СпособРазделения = "УПД" Тогда
				
				РазделитьСтрокуТовараУПД(Товары, СтрокаТовара);
				
			ИначеЕсли СпособРазделения = "КСФ"
				И ТоварыКорректируемогоСФ <> Неопределено Тогда
				
				РазделитьСтрокуТовараКСФ(Товары, СтрокаТовара, ТоварыКорректируемогоСФ); 
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокиКУдалению.Добавить(СтрокаТовара);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТоварКУдалению Из СтрокиКУдалению Цикл
		
		Товары.Удалить(ТоварКУдалению);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаСведенияОпрослеживаемостиУКД_2020()
	
	Число26_11 = ОбщегоНазначения.ОписаниеТипаЧисло(26, 11);
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("НомерТовара"                          , ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Результат.Колонки.Добавить("ЕдиницаИзмеренияКод"                  , ОбщегоНазначения.ОписаниеТипаСтрока(4));
	Результат.Колонки.Добавить("КоличествоТовараДоИзменения"          , Число26_11);
	Результат.Колонки.Добавить("КоличествоТовараПослеИзменения"       , Число26_11);
	Результат.Колонки.Добавить("КоличествоТовараУвеличение"           , Число26_11);
	Результат.Колонки.Добавить("КоличествоТовараУменьшение"           , Число26_11);
	Результат.Колонки.Добавить("КоличествоТовараУчетноеДоИзменения"   , Число26_11);
	Результат.Колонки.Добавить("КоличествоТовараУчетноеПослеИзменения", Число26_11);
	Результат.Колонки.Добавить("КоличествоТовараУчетноеУвеличение"    , Число26_11);
	Результат.Колонки.Добавить("КоличествоТовараУчетноеУменьшение"    , Число26_11); 
	
	Возврат Результат; 
	
КонецФункции

#КонецОбласти

#Область Получение

Функция НайтиСоздатьУКДДокументКорректировки_2020(ДеревоДанных, СсылкаНаВладельца, СпособОбработки)
	
	ДанныеЗаполнения = Новый Структура(
		"ЗаполнятьПоСтуктуре,ХозОперация,СсылкаНаВладельца",
		Истина,
		Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон,
		СсылкаНаВладельца
	);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВходящимДокументом("Документа", ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсходнымДокументом(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияКонтрагентомИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОрганизациейИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияПодразделениемКомпанииИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОснованиемСчетаФактуры(ДеревоДанных, ДанныеЗаполнения);              
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.Исправление Тогда
		
		ДанныеЗаполнения.ХозОперация =  Справочники.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах;
		
	КонецЕсли;

	Если
		СпособОбработки = "КорректировкаПоступленияАвтомобилей"
		Или (
			ТипЗнч(СпособОбработки) = Тип("Структура")
			И СпособОбработки.ПервичныйДокумент = "КорректировкаПоступленияАвтомобилей"
		)
	Тогда
		
		ДополнитьДанныеЗаполненияАвтомобилямиУКД(ДеревоДанных, ДанныеЗаполнения);
		
		Возврат ЗаполнитьДокументКорректировкиПоступленияАвтомобилей(СсылкаНаВладельца, ДанныеЗаполнения);
		
	Иначе
		
		ДополнитьДанныеЗаполненияТоварамиУКД(ДеревоДанных, ДанныеЗаполнения, "КорректировкаПоступления");
		
	КонецЕсли;
		
	Возврат ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеЗаполнения);
	
КонецФункции

Функция НайтиСоздатьУКДКорректировочныйСчетФактуру_2020(ДеревоДанных, СсылкаНаВладельца, СпособОбработки)
	
	ДанныеЗаполнения = Новый Структура(
		"ЗаполнятьПоСтуктуре,ХозОперация",
		Истина,
		Справочники.ХозОперации.СчетФактураПолученныйКорректировка
	);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВходящимДокументом("Документа", ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсходнымДокументом(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияКонтрагентомИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОрганизациейИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияПодразделениемКомпанииИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОснованиемСчетаФактуры(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияТоварамиУКД(ДеревоДанных, ДанныеЗаполнения, "СчетФактураПолученный");
	
	Возврат ЗаполнитьДокументСчетФактурыПолученогоУКД(СсылкаНаВладельца, ДанныеЗаполнения);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УПД_2019

#Область Отправка

Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС_2019(Основание, Настройки, Данные, Описание, Отказ)
	
	ДокументСсылкаСЧФ = Основание;
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ДокументСсылкаСЧФ = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(Основание).СчетФактура;
		Описание.Основания.Добавить(ДокументСсылкаСЧФ);
		
	Иначе
		
		Описание.Основания.Добавить(Основание.ДокументОснование);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументСсылкаСЧФ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для формирования универсального передаточного документа счет-фактура должна быть заполнена.'");
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДляФормированияЭД = Документы.СчетФактураВыданный.ДанныеДляУДПЭД(ДокументСсылкаСЧФ,Настройки);
	Данные = ЗаполнитьДанныеПервичногоДокументаУПД_2019(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьДеревоДанныхУПД_2019(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьДанныеПлатежныхДокументов(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьИнформациюОТоварахТоваров_2019(ДанныеДляФормированияЭД, Настройки, Данные);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС_2019(Основание, Настройки, Данные, Описание, Отказ)
	
	ДанныеДляФормированияЭД = Документы.СчетФактураВыданный.ДанныеДляУДПЭД(Основание, Настройки);
	Данные = ЗаполнитьДеревоДанныхУПД_2019(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьДанныеПлатежныхДокументов(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьИнформациюОТоварахТоваров_2019(ДанныеДляФормированияЭД, Настройки, Данные);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_2019(Основание, Настройки, Данные, Описание, Отказ) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ВыгрузкаЗНВЭДОВозможна(Основание);
		ДанныеДляФормированияЭД = Документы.ЗаказНаряд.ДанныеДляУДПЭД(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратПоставщику") Тогда
		
		ДанныеДляФормированияЭД = ДайДанныеВозвратПоставщикуДляУПД(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
		
		ДанныеДляФормированияЭД = ДайДанныеКорректировкиРеализацииАвтомобилейДляУПД(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
		
		ДанныеДляФормированияЭД = ДайДанныеРеализацииАвтомобилейДляУПД(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
		
		ДанныеДляФормированияЭД = ДайДанныеКорректировкиРеализацииИУслугДляУПД(Основание);
		
	Иначе
		
		ДанныеДляФормированияЭД = ДайДанныеРеализацииТоваровИУслугДляУПД(Основание);
		
	КонецЕсли;
	
	ДокументыОснования = Новый Массив;
	ДокументыОснования.Добавить(Основание);
	ДанныеДляФормированияЭД.Вставить("ДокументыОснования", ДокументыОснования);
	
	Данные = ЗаполнитьДанныеПервичногоДокументаУПД_2019(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьДеревоДанныхУПД_2019(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьДанныеПлатежныхДокументов(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьИнформациюОТоварахТоваров_2019(ДанныеДляФормированияЭД, Настройки, Данные);
	
КонецПроцедуры

Функция ЗаполнитьДанныеПервичногоДокументаУПД_2019(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	Шапка = ДанныеДляФормированияЭД.Шапка;
	ВидОперацииЭД = ВидОперацииЭД(Шапка);
	СохранитьРеквизитВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	
	СодержаниеОперации = СодержаниеОперации(ДанныеДляФормированияЭД.Товары);
	СохранитьРеквизитВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	СохранитьРеквизитВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", Шапка.Дата);
	
	Если ЗначениеЗаполнено(Шапка.ДокументОснование) Тогда
		
		Если ТипЗнч(Шапка.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.ДокументОснование, "ДокументОснование");
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				
				ДокументыОснованияДокументаОтгрузки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОснование);
				СохранитьРеквизитВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", ДокументыОснованияДокументаОтгрузки);
				
			КонецЕсли;
			
		Иначе
			
			ДокументыОснованияДокументаОтгрузки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Шапка.ДокументОснование);
			СохранитьРеквизитВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", ДокументыОснованияДокументаОтгрузки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров(Шапка),
		"ОснованиеОтгрузкиТоваров");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнуяНакладная(), "ТранспортнаяНакладная");
	
	Если ЕстьРеквизит(Шапка, "ЭтоКомиссия")
		И Шапка.ЭтоКомиссия Тогда
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ПередачаТовараКомитентом";
		НоваяСтрока.Значение      = "Истина";
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
			ДеревоДанных, НоваяСтрока, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
		
	КонецЕсли;
	
	Возврат ДеревоДанных;
	
КонецФункции

Функция ВидОперацииЭД(Шапка)
	
	Если Шапка.Исправление Тогда
		
		Возврат Перечисления.ВидыОперацийЭД.Исправление;
			
	КонецЕсли;
	
	Возврат Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	
КонецФункции

Функция СодержаниеОперации(Товары)
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	
	Для Каждого Строка Из Товары Цикл
		
		Если Строка.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
			
			ЕстьУслуги = Истина;
			
		Иначе
			
			ЕстьТовары = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоставСодержания = Новый Массив;
	
	Если ЕстьТовары Тогда
		
		СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
		
	КонецЕсли;
	
	Если ЕстьУслуги Тогда
		
		СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
		
	КонецЕсли;
	
	Возврат СтрСоединить(СоставСодержания, " ");
	
КонецФункции

Функция ОснованиеОтгрузкиТоваров(Шапка)
	
	ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
	
	Если НЕ ЗначениеЗаполнено(Шапка.ДатаДоговора) ИЛИ НЕ ЗначениеЗаполнено(Шапка.НомерДоговора) Тогда
		
		Возврат ОснованиеОтгрузкиТоваров;
		
	КонецЕсли;
	
	НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
	НоваяСтрока.ДоговорКонтрагента   = Шапка.ДоговорКонтрагента;
	НоваяСтрока.ДокументНаименование = Шапка.НаименованиеДоговора;
	НоваяСтрока.ДокументНомер = Шапка.НомерДоговора;
	НоваяСтрока.ДокументДата = НачалоДня(Шапка.ДатаДоговора);
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
		НоваяСтрока,
		"ДокументДата",
		"ДоговорКонтрагента",
		"Объект.ДатаДоговора"
	);
	
	Возврат ОснованиеОтгрузкиТоваров;
	
КонецФункции

Функция ТранспортнуяНакладная()
	
	ТранспортнаяНакладная = Новый ТаблицаЗначений;
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	Возврат ТранспортнаяНакладная;
	
КонецФункции

Функция ЗаполнитьДеревоДанныхУПД_2019(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	Шапка = ДанныеДляФормированияЭД.Шапка;
	
	СохранитьРеквизитВДереве(ДеревоДанных, "ВидСчетаФактуры", "Реализация");
	
	// Для Функция = СЧФ:
	//  1 - счет-фактура, выставляемый при реализации товаров (работ, услуг), передаче имущественных прав;
	//  2 - счет-фактура, выставляемый при получении оплаты, частичной оплаты в счет предстоящих поставок
	//      товаров (выполнения работ, оказания услуг), передачи имущественных прав;
	//  3 - счет-фактура, применяемый в случае реализации комиссионером (агентом, экспедитором,
	//      застройщиком или заказчиком, выполняющим функции застройщика) двум и более покупателям
	//      (приобретения у двух и более продавцов) товаров (работ, услуг), имущественных прав от своего имени.
	//
	// Для Функция = СЧФДОП или Функция = ДОП:
	//  4 - Товары переданы от Комитента (Принципала) Комиссионеру (Агенту, действующему от собственного имени) для дальнейшей реализации;
	//  5 - Товары переданы от Комиссионера (Агента, действующего от собственного имени) Комитенту (Принципалу) при возврате товаров;
	//  6 - Товары переданы от Комиссионера (Агента, действующего от собственного имени) Комитенту (Принципалу) при закупке товара;
	//  7 - Товары переданы от Комитента (Принципала) Комиссионеру (Агенту, действующему от собственного имени) при возврате товаров;
	//  8 - Возврат товара от Покупателя Продавцу.
	СохранитьРеквизитВДереве(
		ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ",
		ОбстоятельстваФормированияСФ(Шапка)
	);
	
	ВариантВыбытияМаркируемойПродукции = Неопределено;
	ВнестиСведенияОВыбытииМаркированныхТоваровВДеревоУПДУКД(ДеревоДанных, ВариантВыбытияМаркируемойПродукции);
	
	СохранитьРеквизитВДереве(ДеревоДанных, "СсылкаСчетаФактуры", Шапка.Ссылка);
	
	
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Шапка);
	Если Настройки.Функция = "СЧФ" ИЛИ Настройки.Функция = "СЧФДОП" Тогда
		НомерДокумента = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(НомерДокумента, Шапка.Ссылка);
	КонецЕсли;
	
	СохранитьРеквизитВДереве(ДеревоДанных, "НомерДокумента", НомерДокумента);
	СохранитьРеквизитВДереве(ДеревоДанных, "ДатаДокумента",  Шапка.Дата);
	
	Если Шапка.Исправление Тогда
		
		СохранитьРеквизитВДереве(ДеревоДанных, "НомерИсправления", Шапка.НомерИсправления);
		СохранитьРеквизитВДереве(ДеревоДанных, "ДатаИсправления", Шапка.ДатаИсправления);
		
	КонецЕсли;
	
	СведенияОПродавце = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Поставщик, СведенияОПродавце);
	СведенияОПродавце.Вставить("ДатаКИ", Шапка.Дата);
	
	ДанныеПродавца = ПодготовитьДанныеУчастникаУПД(СведенияОПродавце,, Шапка.Подразделение);
	
	СведенияОПродавцах = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(ДеревоДанных, "СведенияОПродавце");
	СведенияОПродавцах.Очистить();
	СведенияОПродавцах.Колонки.Добавить("СведенияОбУчастнике");
	ЗаполнитьЗначенияСвойств(СведенияОПродавцах.Добавить(), ДанныеПродавца);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОПродавцах, "СведенияОПродавце");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"СоставительДокументаНаименование",
		СведенияОПродавце.ПолноеНаименование
	);
	
	СведенияОПокупателе = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Покупатель, СведенияОПокупателе);
	СведенияОПокупателе.Вставить("ДатаКИ", Шапка.Дата);
	ДанныеПокупателя = ПодготовитьДанныеУчастникаУПД(СведенияОПокупателе,,, Истина);
	
	СведенияОПокупателях = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(ДеревоДанных, "СведенияОПокупателе");
	СведенияОПокупателях.Очистить();
	СведенияОПокупателях.Колонки.Добавить("СведенияОбУчастнике");
	ЗаполнитьЗначенияСвойств(СведенияОПокупателях.Добавить(), ДанныеПокупателя);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОПокупателях, "СведенияОПокупателе");
	
	ЗаполнитьИнформациюОбОтгрузке(ДеревоДанных, ДанныеДляФормированияЭД);
	
	СохранитьРеквизитВДереве(ДеревоДанных, "ВалютаКод", Шапка.КодВалюты);
	СохранитьРеквизитВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаНаименование",
		Шапка.НаименованиеПолноеВалюты);
	СохранитьРеквизитВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс", Шапка.Курс);
	
	ДокументыОснования = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеДляФормированияЭД.ДокументыОснования);
	СохранитьРеквизитВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	СохранитьРеквизитВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта",
		Шапка.ИдентификаторГосударственногоКонтракта);	
	
	ДокументыОтгрузки = ДайДокументыПодтвержденияОтгрузки(Шапка, ДанныеДляФормированияЭД.Товары, Настройки);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыОтгрузки.ДокументыПодтвержденияОтгрузки,
		"ДокументыПодтвержденияОтгрузки");
	СохранитьРеквизитВДереве(ДеревоДанных, "ДокументОбОтгрузке", ДокументыОтгрузки.ДокументОбОтгрузке);
	
	ДайСведенияОВыбытииМаркированныхТоваров(Шапка, ДеревоДанных);
	
	Возврат ДеревоДанных;
	
КонецФункции

Процедура ВнестиСведенияОВыбытииМаркированныхТоваровВДеревоУПДУКД(ДеревоДанных, ВариантВыбытияМаркируемойПродукции)
	
	Если ЗначениеЗаполнено(ВариантВыбытияМаркируемойПродукции) Тогда

		ИспользованиеДляСобственныхНужд = Перечисления.ПричиныВыбытияМаркируемойПродукции.ИспользованиеДляСобственныхНужд;
		
		Если ВариантВыбытияМаркируемойПродукции = ИспользованиеДляСобственныхНужд Тогда
			
			СведенияОВыбытииМаркированныхТоваров = "1";
			
		Иначе
			
			СведенияОВыбытииМаркированныхТоваров = "2";
			
		КонецЕсли;
		
		ОписаниеПоляСведенийОВыбытииМТ = ФорматыЭДО_ФНС.ОписаниеПоляСведенийОВыбытииМаркированныхТоваров();
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ОписаниеПоляСведенийОВыбытииМТ.ИмяРеквизита,
			СведенияОВыбытииМаркированныхТоваров
		);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеУчастникаУПД(
	Знач СведенияОбУчастнике,
	ВидАдреса = "Юр",
	Подразделение = Неопределено,
	УчитыватьГоловногоКонтрагента = Ложь,
	ЭтоФормат_5_02 = Ложь)
	
	КлючДанных = Неопределено;
	СведенияОбУчастнике.Свойство("Ссылка", КлючДанных);
	
	Данные = Новый Структура("СведенияОбУчастнике", СведенияОбУчастнике);
	
	Данные.Вставить("ТипУчастника", Новый Структура);
	
	ЕстьГоловнойКонтрагент = УчитыватьГоловногоКонтрагента И СведенияОбУчастнике.Свойство("ГоловнойКонтрагент")
		И СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ФормыСобственности.ОбособленноеПодразделение;
	
	Если
		СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ФормыСобственности.ЮридическоеЛицо
		Или СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ФормыСобственности.ОбособленноеПодразделение
	Тогда
		
		Данные.ТипУчастника.Вставить("ЮЛ", Новый Структура);
		
		Если ЕстьГоловнойКонтрагент Тогда
			
			Данные.ТипУчастника.ЮЛ.Вставить(
				"НаименованиеОрганизации",
				СведенияОбУчастнике.ГоловнойКонтрагент.НаименованиеПолное);
			
		Иначе
			
			Данные.ТипУчастника.ЮЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
			
		КонецЕсли;
		Данные.ТипУчастника.ЮЛ.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ЮЛ.Вставить("КПП", СведенияОбУчастнике.КПП);
		
	Иначе
		
		Данные.ТипУчастника.Вставить("ИП", Новый Структура);
		Данные.ТипУчастника.ИП.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ИП.Вставить("Фамилия", СведенияОбУчастнике.Фамилия);
		Данные.ТипУчастника.ИП.Вставить("Имя", СведенияОбУчастнике.Имя);
		Данные.ТипУчастника.ИП.Вставить("Отчество", СведенияОбУчастнике.Отчество);
		
		Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
			
			Свидетельство = СтрШаблон(НСтр("ru = 'Свидетельство №%1 от %2'"),
				СведенияОбУчастнике.СвидетельствоСерияНомер,
				Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
				
			Данные.ТипУчастника.ИП.Вставить("СвидетельствоОГосРегистрации", Свидетельство);
			Данные.ТипУчастника.ИП.Вставить("Отчество", СведенияОбУчастнике.Отчество);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	Если ТипЗнч(КлючДанных) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	КонецЕсли;
	
	ВидКонтактнойИнформации = ?(ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Контрагенты"),
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Данные.Вставить("Адрес", Новый Структура());
	Если ЭтоФормат_5_02 Тогда
		Данные.Адрес.Вставить("ТипАдреса", Новый Структура());
		АдресныеДанные = Данные.Адрес.ТипАдреса;
	Иначе
		АдресныеДанные = Данные.Адрес;
	КонецЕсли;
	АдресУчастника = Новый Структура;
	СведенияОбУчастнике.Вставить("ДатаКИ", СведенияОбУчастнике.ДатаКИ);
	ТекстОшибки = "";
	Если Подразделение <> Неопределено Тогда
		СведенияОбУчастнике.Вставить("Подразделение", Подразделение);
		ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Подразделение", ВидАдреса, ТекстОшибки);
		СведенияОбУчастнике.Удалить("Подразделение");
	Иначе
		ПолучитьАдресСтруктурой(
			АдресУчастника,
			СведенияОбУчастнике,
			?(ЕстьГоловнойКонтрагент, "ГоловнойКонтрагент", "Ссылка"),
			ВидАдреса,
			ТекстОшибки);
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено (ТекстОшибки) Тогда
		
		Если  ЗначениеЗаполнено(АдресУчастника.АдресТекст) Тогда
			
			АдресныеДанные.Вставить("АдресИнформация", Новый Структура("КодРегиона, АдресТекст, КодСтраны, НаименованиеСтраны")); 
			ЗаполнитьЗначенияСвойств(АдресныеДанные.АдресИнформация, АдресУчастника); 
			
		ИначеЕсли АдресУчастника.АдресРФ Тогда  
			АдресРФ = Новый Структура(
				"КодСтраны,
				|НаименованиеСтраны,
				|Индекс,
				|Регион,
				|КодРегиона,
				|Район,
				|Город,
				|НаселенныйПункт,
				|Улица,
				|Дом,
				|Корпус,
				|Квартира"
			);
			АдресныеДанные.Вставить("АдресРФ", АдресРФ);  
			ЗаполнитьЗначенияСвойств(АдресныеДанные.АдресРФ, АдресУчастника); 
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияОбУчастнике.Удалить("ДатаКИ");
	
	Данные.Вставить("КонтактныеСведения", Новый Структура);
	
	Телефон = "";
	Если СведенияОбУчастнике.Свойство("Телефоны", Телефон) И ЗначениеЗаполнено(Телефон) Тогда
		Данные.КонтактныеСведения.Вставить("Телефон", Телефон);
	КонецЕсли;
	
	ЭлектроннаяПочта = "";
	Если СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", ЭлектроннаяПочта) И ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Данные.КонтактныеСведения.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	КонецЕсли;
	
	Данные.Вставить("БанковскиеРеквизиты", Новый Структура);
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		
		Данные.БанковскиеРеквизиты.Вставить("НомерСчета", НомерСчета);
		
		Банк = "";
		БИК = "";
		КоррСчет = "";
		
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("НаименованиеБанка", Банк);
			
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("БИКБанка", БИК);
			
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("КорреспондентскийСчетБанка", КоррСчет);
			
		КонецЕсли;
	КонецЕсли;
	
	КодПоОКПО = "";
	Если СведенияОбУчастнике.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
		
		Данные.Вставить("КодОКПО", КодПоОКПО);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьКонтактнуюИнформацию(Владелец, ТипКИ = "Адрес", ТипАдреса = "Юр", ДатаКИ = Неопределено)
	
	Если ДатаКИ = Неопределено Тогда
		ДатаКИ = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ОбщегоНазначения.МенеджерОбъектаПоСсылке(Владелец)
		.КонтактнаяИнформацияДляЭДО(Владелец, ТипКИ, ТипАдреса, ДатаКИ);
	
КонецФункции

Функция ДайДокументыПодтвержденияОтгрузки(Шапка, Товары, СтруктураЭД)
	
	ДокументыПодтвержденияОтгрузки = Новый ТаблицаЗначений;
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Наименование");
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Номер");
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Дата");
	
	Результат  = Новый Структура("ДокументыПодтвержденияОтгрузки, ДокументОбОтгрузке"); 
	
	Если НЕ (Шапка.Свойство("ДокументОбОтгрузке") И 
		ТипЗнч(Шапка.ДокументОбОтгрузке) = Тип("ТаблицаЗначений") И ЗначениеЗаполнено(Шапка.ДокументОбОтгрузке)) Тогда
		
		Результат.ДокументОбОтгрузке = "№ п/п №   от   "; 
		Результат.ДокументыПодтвержденияОтгрузки = ДокументыПодтвержденияОтгрузки;
		
		Возврат Результат;		
	КонецЕсли;
	
	ДокументОбОтгрузке = Шапка.ДокументОбОтгрузке;

	СтрокаДокументыПодтвержденияОтгрузки = ДокументыПодтвержденияОтгрузки.Добавить(); 

	Если ДокументОбОтгрузке[0].Дата >= Дата('20241001') Тогда
		НомерРедакции = 1096;
	Иначе
		НомерРедакции = 534;
	КонецЕсли;

	НомераСтрок = "";
	НаименованиеДокумента = "";
	
	Если НомерРедакции = 1096 Тогда
		ШаблонПодстрокиДокументаОбОтгрузке = "%1, № %2 от %3 г.";

		ЭтоУПД = Неопределено;
		
		Если СтруктураЭД.Свойство("ТипДокумента") Тогда 
			Если СтруктураЭД.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
				ЭтоУПД = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ЭтоУПД = Неопределено Тогда 
			Если Шапка.Свойство("Исправление") Тогда 
				ЭтоУПД = Шапка.Исправление;
			Иначе 
				ЭтоУПД = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоУПД Тогда
			
			СтрокаДокументыПодтвержденияОтгрузки.Наименование = НСтр("ru = 'Универсальный передаточный документ'");
			
		Иначе 
			
			СтрокаДокументыПодтвержденияОтгрузки.Наименование = НСтр("ru = 'Акт'");

			Для Каждого СтрокаТоваров Из Товары Цикл 

				Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
					СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда 
					СтрокаДокументыПодтвержденияОтгрузки.Наименование = НСтр("ru = 'Товарная накладная'");
					Прервать;
				ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда 
					СтрокаДокументыПодтвержденияОтгрузки.Наименование = НСтр("ru = 'Товарная накладная'");
					Прервать;
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЕсли;
		
		НаименованиеДокумента = СтрокаДокументыПодтвержденияОтгрузки.Наименование;
	Иначе
		ШаблонПодстрокиДокументаОбОтгрузке = "№ п/п %1 № %2 от %3 г.";
		Если Товары.Количество() = 1  Тогда
			НомераСтрок = "1";
		Иначе 
			НомераСтрок = "1 - " + Строка(Товары.Количество());
		КонецЕсли;
		СтрокаДокументыПодтвержденияОтгрузки.Наименование = СтрШаблон("%1%2", ДокументОбОтгрузке[0].Наименование, ДокументОбОтгрузке[0].НомераСтрок); 
	КонецЕсли;
	СтрокаДокументыПодтвержденияОтгрузки.Номер 		= ДокументОбОтгрузке[0].Номер;
	СтрокаДокументыПодтвержденияОтгрузки.Дата 		= ДокументОбОтгрузке[0].Дата;
	
	Результат.ДокументыПодтвержденияОтгрузки = ДокументыПодтвержденияОтгрузки;
	
	Результат.ДокументОбОтгрузке = СтрШаблон(ШаблонПодстрокиДокументаОбОтгрузке,
		?(НомерРедакции = 1096, НаименованиеДокумента, НомераСтрок),
		?(ЗначениеЗаполнено(ДокументОбОтгрузке[0].Номер), ДокументОбОтгрузке[0].Номер, "      "),
		?(ЗначениеЗаполнено(ДокументОбОтгрузке[0].Дата), Формат(ДокументОбОтгрузке[0].Дата, "ДФ=dd.MM.yyyy"), "      "));

	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДанныеПлатежныхДокументов(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	Если
		Не ДанныеДляФормированияЭД.Свойство("ПлатежныеДокументы")
		Или ДанныеДляФормированияЭД.ПлатежныеДокументы.Количество() = 0
	Тогда
		
		Возврат ДеревоДанных;
		
	КонецЕсли;
	
	ПРДКОтправке = ТаблицаПлатежныеДокументы();
	
	Для Каждого ТекущаяСтрока Из ДанныеДляФормированияЭД.ПлатежныеДокументы Цикл
		НоваяСтрока = ПРДКОтправке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	КонецЦикла;
	
	Если ПолучитьЗначениеПараметраСтруктуры(Настройки, "ЭтоФормат502", Ложь) Тогда
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
			ДеревоДанных,
			ПРДКОтправке,
			"СведенияОСчетеФактуре.ПлатежноРасчетныеДокументы");
		
	Иначе
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПРДКОтправке, "ПлатежноРасчетныеДокументы");
		
	КонецЕсли;
	
	Возврат ДеревоДанных;
	
КонецФункции

Функция ТаблицаПлатежныеДокументы()
	
	Строка_30 = ОбщегоНазначения.ОписаниеТипаСтрока(30);
	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	
	ТаблицаПРД = Новый ТаблицаЗначений;
	ТаблицаПРД.Колонки.Добавить("НомерПРД", Строка_30);
	ТаблицаПРД.Колонки.Добавить("ДатаПРД", ТипДата);
	
	Возврат ТаблицаПРД;
	
КонецФункции

Функция ЗаполнитьИнформациюОТоварахТоваров_2019(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	ТолькоУслуги = Истина;
	ТоварыКОтправке = НоваяТаблицаТоваровУПД();
	
	ЕстьПрослеживаемыйТовар = ЕстьРеквизит(ДанныеДляФормированияЭД, "ПрослеживаемыеТовары")
		И ДанныеДляФормированияЭД.ПрослеживаемыеТовары.Количество() > 0;
		
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(ДанныеДляФормированияЭД.Товары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
	
	ЭтоАвансовыйСчетФактура = ТипЗнч(ДанныеДляФормированияЭД.Шапка.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		И Документы.СчетФактураВыданный.ЭтоАвансовыйСчетФактура(ДанныеДляФормированияЭД.Шапка.Ссылка);
	
	Для Каждого Товар Из ДанныеДляФормированияЭД.Товары Цикл
		
		НоваяСтрока = ТоварыКОтправке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар,, "ЕдиницаИзмеренияКод,ЕдиницаИзмеренияНаименование");
		
		Если НеобходимоУказатьЕдиницуИзмерения(Товар) Тогда
			
			НоваяСтрока.ЕдиницаИзмеренияКод = ПолучитьКодЕдиницыИзмерения(Товар);
			НоваяСтрока.ЕдиницаИзмеренияНаименование = Товар.ЕдиницаИзмеренияНаименование;
			
		КонецЕсли;
		
		Если Товар.Свойство("Содержание") И ЗначениеЗаполнено(Товар.Содержание) Тогда
			
			НоваяСтрока.ТоварНаименование = Товар.Содержание;
			
		ИначеЕсли Не ПустаяСтрока(Товар.НаименованиеХарактеристики) Тогда
			
			НоваяСтрока.ТоварНаименование = СтрШаблон(
				"%1 (%2)",
				Товар.НаименованиеНоменклатуры,
				Товар.НаименованиеХарактеристики
			);
			
		Иначе
			
			НоваяСтрока.ТоварНаименование = Товар.НаименованиеНоменклатуры;
			
		КонецЕсли;
		
		Если Не ЭтоАвансовыйСчетФактура Тогда
		
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = ?(
				Товар.Количество = 0,
				0,
				Окр(Товар.СуммаБезНДС / Товар.Количество, 2, РежимОкругления.Окр15как20)
			);
			НоваяСтрока.СтоимостьТоваровБезНалога = Товар.СуммаБезНДС;
			
		Иначе
			
			НоваяСтрока.Количество = Неопределено;
			
		КонецЕсли;
		
		НоваяСтрока.НалоговаяСтавка           = Товар.СтавкаНДС;
		НоваяСтрока.СуммаНалога               = Товар.СуммаНДС;
		НоваяСтрока.СтоимостьТоваровСНалогом  = Товар.СуммаСНДС;
		
		Если ЗначениеЗаполнено(Товар.НомерТаможеннойДекларации) Тогда
			
			Если ЕстьПрослеживаемыйТовар Тогда
				
				НоваяСтрока.СведенияОПрослеживаемости = СведенияОПрослеживаемыхТоваров(
					Товар, ДанныеДляФормированияЭД.ПрослеживаемыеТовары);
				
			КонецЕсли;
			
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод");
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер");
			
			НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			Декларация = НоваяСтрока.СведенияОТаможеннойДекларации.Добавить();
			Декларация.СтранаПроисхожденияКод = Товар.КодСтраныПроисхождения;
			Декларация.ТаможеннаяДекларацияНомер = ?(
				ЗначениеЗаполнено(Товар.НомерТаможеннойДекларации),
				СокрЛП(Товар.НомерТаможеннойДекларации),
				""
			);
			НоваяСтрока.СтранаПроисхожденияНаименование = Товар.НаименованиеСтраныПроисхождения;
			
		КонецЕсли;
		
		НоваяСтрока.Признак = ПризнакТовара(Товар);
		НоваяСтрока.ТоварКод = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(
				Товар.Номенклатура);
		НоваяСтрока.ТоварИдентификатор = Товар.Номенклатура.УникальныйИдентификатор();
		ТолькоУслуги = ТолькоУслуги И (Товар.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга);
		
		НоваяСтрока.СведенияОМаркировке = СведенияОКодахУпаковокМаркируемойПродукции(
			Товар, ДанныеДляФормированияЭД.КодыУпаковокМаркируемойПродукции);
		
		НоваяСтрока.Сопоставление = СопоставленияНоменклатурыЭД(Товар.Номенклатура,
			Товар.Характеристика, Товар.ЕдиницаИзмерения);
			
		НоваяСтрока.Сопоставление.Вставить("Наименование", Товар.НаименованиеНоменклатуры);
		
		Если ЗначениеЗаполнено(Товар.НаименованиеХарактеристики) Тогда
			
			НоваяСтрока.Сопоставление.Вставить("Характеристика", Товар.НаименованиеХарактеристики);
			
		КонецЕсли;
		
		НоваяСтрока.Сопоставление.Вставить("ЕдиницаИзмерения"   , Товар.ЕдиницаИзмеренияНаименование);
		НоваяСтрока.Сопоставление.Вставить("ЕдиницаИзмеренияКод", Товар.ЕдиницаИзмеренияКод);
		НоваяСтрока.Сопоставление.Вставить("СтавкаНДС", Товар.СтавкаНДС);
		НоваяСтрока.Сопоставление.Вставить("Артикул"  , Товар.Артикул);
		
		ЗаполнитьШтрихкодыТоваровВСопоставление(
			НоваяСтрока.Сопоставление,
			ШтрихкодыНоменклатуры,
			ШтрихкодыКомбинаций,
			Товар.Номенклатура,
			Товар.Характеристика,
			Товар.ЕдиницаИзмерения
		);
		
		Если
			Настройки.ВариантыЗаполненияПолей.ТоварКод = "Штрихкод"
			И НоваяСтрока.Сопоставление.Свойство("ШтрихкодКомбинации")
		Тогда
		
			НоваяСтрока.ТоварКод = НоваяСтрока.Сопоставление.ШтрихкодКомбинации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьРеквизитВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	СохранитьРеквизитВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога",
		ТоварыКОтправке.Итог("СтоимостьТоваровБезНалога"));
	СохранитьРеквизитВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом",
		ТоварыКОтправке.Итог("СтоимостьТоваровСНалогом"));
	СохранитьРеквизитВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога", ТоварыКОтправке.Итог("СуммаНалога"));
	СохранитьРеквизитВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоКоличество", ТоварыКОтправке.Итог("Количество"));
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТоварыКОтправке, "СведенияОТоварах");
		
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ЕдиницаИзмеренияНаименование";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнена наименование единицы измерения в справочнике ""Номенклатура"".'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ЕдиницаИзмеренияКод";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Номенклатура"".'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "Количество";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не указано количество товара в табличной части'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ТоварКод";
	ОписаниеОшибкиДляТаблицы.КлючДанных  = "Номенклатура";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным = "Объект.Код";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	СсылкаНаДокумент = ДанныеДляФормированияЭД.Шапка.Ссылка;
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ТоварНаименование";
	ОписаниеОшибкиДляТаблицы.КлючДанных  = "Номенклатура";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным = "Объект.НаименованиеПолное";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "Количество";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.Количество";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтрокиИсходногоДокумента";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "ЦенаЗаЕдиницуИзмерения";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.Цена";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтрокиИсходногоДокумента";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "СтоимостьТоваровБезНалога";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.Сумма";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтрокиИсходногоДокумента";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "СуммаНалога";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.СуммаНДС";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтрокиИсходногоДокумента";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "ЕдиницаИзмеренияНаименование";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = "ЕдиницаИзмерения";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Наименование";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "ЕдиницаИзмеренияКод";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = "ЕдиницаИзмерения";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Код";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "Признак";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = "Номенклатура";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.ТипНоменклатуры";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	Возврат ДеревоДанных;
	
КонецФункции

Процедура ДайСведенияОВыбытииМаркированныхТоваров(Шапка, Данные, ЭтоФормат502 = Ложь)
	
	Если НЕ Шапка.Свойство("ПричинаВыводаИзОборота") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстоваяИнформация = Новый ТаблицаЗначений;
	ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
	ТекстоваяИнформация.Колонки.Добавить("Значение");
	
	ОписаниеПоляСведенийОВыбытииМТ =
		Новый Структура("ИмяРеквизита, ИмяПоля", "ПричинаВыводаИзОборота", "СвВыбытияМАРК");
	
	Если Шапка.ПричинаВыводаИзОборота = Перечисления.ПричиныВыбытияМаркируемойПродукции.ИспользованиеДляСобственныхНужд Тогда
		СведенияОВыбытииМТ = "1";
	ИначеЕсли Шапка.ПричинаВыводаИзОборота = Перечисления.ПричиныВыбытияМаркируемойПродукции.БезвозмезднаяПередача Тогда
		СведенияОВыбытииМТ = "2";
	ИначеЕсли Шапка.ПричинаВыводаИзОборота = Перечисления.ПричиныВыбытияМаркируемойПродукции.ИспользованиеДляПроизводственныхЦелей Тогда
		СведенияОВыбытииМТ = "3";
	ИначеЕсли Шапка.ПричинаВыводаИзОборота = Перечисления.ПричиныВыбытияМаркируемойПродукции.ПриобретениеВРамкахГосКонтракта Тогда
		СведенияОВыбытииМТ = "4";
	Иначе
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТекстоваяИнформация.Добавить();
	НоваяСтрока.Идентификатор = ОписаниеПоляСведенийОВыбытииМТ.ИмяПоля;
	НоваяСтрока.Значение = СведенияОВыбытииМТ;
	
	Если ЭтоФормат502 Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, ТекстоваяИнформация,
			"СведенияОСчетеФактуре.ИнформационноеПолеФХЖ.ТекстоваяИнформация");
	Иначе
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, ТекстоваяИнформация,
			"ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаТоваровУПД()
	
	Число_26_11 = ОбщегоНазначения.ОписаниеТипаЧисло(26, 11);
	Число_19_2 = ОбщегоНазначения.ОписаниеТипаЧисло(19, 2);
	Строка_255 = ОбщегоНазначения.ОписаниеТипаСтрока(255);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество", Число_26_11);
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Число_26_11);
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Число_19_2);
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Число_19_2);
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Число_19_2);
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Число_19_2);
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование", Строка_255);
	ТаблицаТоваров.Колонки.Добавить("Признак", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ТаблицаТоваров.Колонки.Добавить("ТоварКод", Строка_255);
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Строка_255);
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Содержание");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировке");
	ТаблицаТоваров.Колонки.Добавить("СведенияОПрослеживаемости");
	ТаблицаТоваров.Колонки.Добавить("КодВидаТовара", Строка_255);
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтроки");
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция СведенияОПрослеживаемыхТоваров(СтрокаДокумента, ТаблицаРНПТ)
	
	// Проверим наличие ГТД у строки товара
	Если НЕ ЕстьРеквизит(СтрокаДокумента, "ГТД") ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокумента.ГТД) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Найдем данные для вывода в ЭД
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ГТД");
	
	Если ЕстьРеквизит(СтрокаДокумента, "Партия")
		И ЗначениеЗаполнено(СтрокаДокумента.Партия)
		И ЕстьРеквизит(ТаблицаРНПТ, "Партия") Тогда
		СтруктураПоиска.Вставить("Партия");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
	Если СтруктураПоиска.ХарактеристикаНоменклатуры = Неопределено Тогда
		СтруктураПоиска.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	НайденныеСтроки = ТаблицаРНПТ.НайтиСтроки(СтруктураПоиска);
	
	// Не нашли по ГТД прослеживаемого товара
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТаблицаГТД = Новый ТаблицаЗначений;
	ТаблицаГТД.Колонки.Добавить("НомерТовара", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
	ТаблицаГТД.Колонки.Добавить("ЕдиницаИзмеренияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(4)));
	ТаблицаГТД.Колонки.Добавить("ЕдиницаИзмеренияНаименование",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(225)));
	ТаблицаГТД.Колонки.Добавить("КоличествоУчетное", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(26, 11)));
	ТаблицаГТД.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(26, 11)));
	ТаблицаГТД.Колонки.Добавить("СтоимостьБезНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(19, 2)));
	
	СтрокаПрослеживаемости = НайденныеСтроки[0];
	
	КоличествоПрослеживаемости = 0;
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		
		КоличествоПрослеживаемости = КоличествоПрослеживаемости + ТекущаяСтрока.Количество;
		
	КонецЦикла;
	
	НоваяСтрока = ТаблицаГТД.Добавить();
	НоваяСтрока.НомерТовара = СокрЛП(СтрокаПрослеживаемости.НомерТовара);
	НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(СтрокаПрослеживаемости.КодЕдиницыПрослеживаемости);
	НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(СтрокаПрослеживаемости.ЕдиницаПрослеживаемости);
	НоваяСтрока.Количество = КоличествоПрослеживаемости * ?(КоличествоПрослеживаемости < 0, -1, 1);
	НоваяСтрока.КоличествоУчетное = КоличествоПрослеживаемости * ?(КоличествоПрослеживаемости < 0, -1, 1);
	НоваяСтрока.СтоимостьБезНДС = Окр(СтрокаДокумента.СуммаБезНДС);
	
	Возврат ТаблицаГТД;
	
КонецФункции

Функция ПризнакТовара(Товар)
	
	// Доступны значения: 1 | 2 | 3 | 4 | 5, где:
	// * 1 - имущество;
	// * 2 - работа;
	// * 3 - услуга;
	// * 4 - имущественные права;
	// * 5 - иное.
	
	Если ТипЗнч(Товар.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Если
			ЗначениеЗаполнено(Товар.Номенклатура)
			И ВидыНоменклатурыТовар().Найти(Товар.ВидНоменклатуры) <> Неопределено
		Тогда
		
			Возврат "1";
		
		КонецЕсли;
		
		Возврат "3";
		
	ИначеЕсли ТипЗнч(Товар.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
		
		Возврат "2";
		
	КонецЕсли;
	
	Возврат "5";
	
КонецФункции

Функция ВидыНоменклатурыТовар()
	
	Результат = Новый Массив();
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Товар);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Тара);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Шины);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Диски);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.НомерныеАгрегаты);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.ЛКМ);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Опции);
	Результат.Добавить(Перечисления.ВидыНоменклатуры.Автомобили);
	Возврат Результат;
	
КонецФункции

Функция СведенияОКодахУпаковокМаркируемойПродукции(СтрокаДокумента,
                                                   КодыДокумента,
                                                   ПоложитьВКонтрольныеИдентификационныеЗнаки = Истина)
	
	КодыМаркировок = Новый ТаблицаЗначений;
	КодыМаркировок.Колонки.Добавить("Код");
	
	Если Не ЗначениеЗаполнено(КодыДокумента) Тогда
		
		// Передадим пустые коды маркировок
		Возврат Новый Структура(
			"ИндивидуальныеУпаковки,КонтрольныеИдентификационныеЗнаки,ТранспортныеУпаковки",
			КодыМаркировок,
			КодыМаркировок,
			КодыМаркировок
		);
		
	КонецЕсли;
	
	УсловиеПоиска = Новый Структура();
	
	ЕстьИдентификаторВКодахМаркировки = ЕстьРеквизит(КодыДокумента, "ИдентификаторТовара");
	
	Если ЕстьРеквизит(СтрокаДокумента, "ИдентификаторТовара") И ЕстьИдентификаторВКодахМаркировки Тогда
		
		УсловиеПоиска.Вставить("ИдентификаторТовара", СтрокаДокумента.ИдентификаторТовара);
		
	ИначеЕсли ЕстьРеквизит(СтрокаДокумента, "ИдентификаторСтроки") И ЕстьИдентификаторВКодахМаркировки Тогда
		
		УсловиеПоиска.Вставить("ИдентификаторТовара", СтрокаДокумента.ИдентификаторСтроки);
		
	Иначе
		
		УсловиеПоиска.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
		
		Если ЕстьРеквизит(СтрокаДокумента, "Характеристика") Тогда
		
			УсловиеПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.Характеристика);
			
		ИначеЕсли ЕстьРеквизит(СтрокаДокумента, "ХарактеристикаНоменклатуры") Тогда
			
			УсловиеПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = КодыДокумента.НайтиСтроки(УсловиеПоиска);
	
	// Необходимо распределить коды маркировки по товарам
	Если ЕстьРеквизит(СтрокаДокумента, "Количество") Тогда
		
		Коэффициент = 1;
		Если ЕстьРеквизит(СтрокаДокумента, "Коэффициент")
			И СтрокаДокумента.Коэффициент > 0 Тогда
			
			Коэффициент = СтрокаДокумента.Коэффициент;
			
		КонецЕсли;
		
		КоличествоТовара = СтрокаДокумента.Количество * Коэффициент;
		
	Иначе
		
		КоличествоТовара = НайденныеСтроки.Количество();
		
	КонецЕсли;
	
	ЗаполненныеСтроки = Новый Массив;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(Строка.КодМаркировки);
		
		Если ЭтоНеКодТовараВФорматеDataMatrixGS1(СтруктураМаркировки.ТипИдентификатораТовара) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПолучитьЗначениеПараметраСтруктуры(СтруктураМаркировки, "ПотребительскаяУпаковкаТабачнойПродукции", Ложь) Тогда
			
			КодыМаркировок.Добавить().Код = СтруктураМаркировки.ПредставлениеШтрихкодаБезКриптоХвоста;
			
		Иначе
			
			КодыМаркировок.Добавить().Код = "01" + СтруктураМаркировки.GTIN + "21" + СтруктураМаркировки.СерийныйНомер;
			
		КонецЕсли;
		
		ЗаполненныеСтроки.Добавить(Строка);
		
	КонецЦикла;
	
	// Уберем указанные коды маркировки с рассмотрения
	Для Каждого ТекущаяСтрока Из ЗаполненныеСтроки Цикл
		
		КодыДокумента.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Если ПоложитьВКонтрольныеИдентификационныеЗнаки Тогда
	
		Возврат Новый Структура(
			"ИндивидуальныеУпаковки,КонтрольныеИдентификационныеЗнаки,ТранспортныеУпаковки",
			КодыМаркировок.СкопироватьКолонки(),
			КодыМаркировок,
			КодыМаркировок.СкопироватьКолонки()
		);
		
	Иначе
		
		Возврат Новый Структура(
			"ИндивидуальныеУпаковки,КонтрольныеИдентификационныеЗнаки,ТранспортныеУпаковки",
			КодыМаркировок,
			КодыМаркировок.СкопироватьКолонки(),
			КодыМаркировок.СкопироватьКолонки()
		);
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоНеКодТовараВФорматеDataMatrixGS1(ТипИдентификатораТовара)
	
	Возврат ТипИдентификатораТовара <> Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1;
	
КонецФункции

Функция СопоставленияНоменклатурыЭД(Номенклатура, Характеристика = Неопределено, Упаковка = Неопределено)

	Результат = Новый Структура;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("НоменклатураИБ", Номенклатура);    
	
	Реквизиты = "Наименование";
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Реквизиты = Реквизиты + ", Артикул, БазоваяЕдиницаИзмерения, БазоваяЕдиницаИзмерения.Наименование, БазоваяЕдиницаИзмерения.Код"; 
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда  
		Реквизиты = Реквизиты + ", Артикул, Номенклатура.БазоваяЕдиницаИзмерения, 
								| Номенклатура.БазоваяЕдиницаИзмерения.Наименование, 
								| Номенклатура.БазоваяЕдиницаИзмерения.Код";   
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		Реквизиты = Реквизиты + ", VIN";
	КонецЕсли;
	
	ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, Реквизиты);
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		ДанныеЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Справочники.КлассификаторЕдиницИзмерения.шт, 
									"Наименование, Код");    
		ЗначенияРеквизитовНоменклатуры.Вставить("ЕдиницаИзмеренияНаименование", ДанныеЕдиницыИзмерения.Наименование);
		ЗначенияРеквизитовНоменклатуры.Вставить("ЕдиницаИзмерения",	Справочники.КлассификаторЕдиницИзмерения.шт); 
		ЗначенияРеквизитовНоменклатуры.Вставить("ЕдиницаИзмеренияКод", ДанныеЕдиницыИзмерения.Код); 
		ЗначенияРеквизитовНоменклатуры.Вставить("Артикул", ЗначенияРеквизитовНоменклатуры.VIN); 
	КонецЕсли;
	
	Результат.Вставить("Наименование", ЗначенияРеквизитовНоменклатуры.Наименование);
	Результат.Вставить("Артикул", ЗначенияРеквизитовНоменклатуры.Артикул);
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		
		Результат.Вставить("ХарактеристикаИБ", Характеристика);
		Результат.Вставить("Характеристика", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика, "Наименование"));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		
		Результат.Вставить("УпаковкаИБ", Упаковка);
		Результат.Вставить("ЕдиницаИзмерения", Упаковка.Наименование);
		
		Если ТипЗнч(Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			ЕдиницаИзмеренияКод = Упаковка.ЕдиницаПоКлассификатору.Код;
			
			Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Или ЕдиницаИзмеренияКод = "001" Тогда
				
				ЕдиницаИзмеренияКод = "0000";
				
			КонецЕсли;
			
		Иначе
			
			ЕдиницаИзмеренияКод = Упаковка.Код;
			
		КонецЕсли;
		
		Результат.Вставить("ЕдиницаИзмеренияКод", ЕдиницаИзмеренияКод);
		
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Автомобили")
		И ЗначениеЗаполнено(ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмерения) Тогда		
		
		Результат.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмеренияНаименование);
		ЕдиницаИзмеренияКод = ?(ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмеренияКод = "001", "0000", ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмеренияКод); 
		Результат.Вставить("ЕдиницаИзмеренияКод", ЕдиницаИзмеренияКод);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ШтрихкодыПоТоварам(НаборТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры) Экспорт
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	Для Каждого Товар Из НаборТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), Товар);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК ХарактеристикаНоменклатуры,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ЕдиницаИзмерения"
	);
	Запрос.УстановитьПараметр("Товары", Товары);
	
	ИнициализацияТекстаЗапросаПоискаШтрихкодовПоВременнойТаблицеТоваров(Запрос.Текст);
	
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	
	СтруктураДанных = Новый Структура;
	ШтрихкодыКомбинаций = ПакетыЗапросов[3].Выгрузить();
	ШтрихкодыКомбинаций.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");

	ШтрихкодыНоменклатуры = ПакетыЗапросов[4].Выгрузить();
	ШтрихкодыНоменклатуры.Индексы.Добавить("Номенклатура");
	
КонецПроцедуры

Процедура ИнициализацияТекстаЗапросаПоискаШтрихкодовПоВременнойТаблицеТоваров(ТекстЗапроса)
		
	ПакетыЗапросов = Новый Массив;
	ПакетыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Штрихкоды.Штрихкод                   КАК Штрихкод,
	|	Штрихкоды.Объект                     КАК Номенклатура,
	|	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Штрихкоды.ЕдиницаИзмерения           КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ШтрихкодыПоКомбинации
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|		ПО (ВТ_Товары.Номенклатура = Штрихкоды.Объект)
	|			И (ВТ_Товары.ХарактеристикаНоменклатуры = Штрихкоды.ХарактеристикаНоменклатуры)
	|			И (ТИПЗНАЧЕНИЯ(ВТ_Товары.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения) 
	|				ИЛИ ВТ_Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыПоКомбинации.Штрихкод) КАК КоличествоШтрихкодов,
	|	ШтрихкодыПоКомбинации.Номенклатура КАК Номенклатура,
	|	ШтрихкодыПоКомбинации.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ШтрихкодыПоКомбинации.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ПоискРазличныхКомбинаций
	|ИЗ
	|	ШтрихкодыПоКомбинации КАК ШтрихкодыПоКомбинации
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыПоКомбинации.Номенклатура,
	|	ШтрихкодыПоКомбинации.ХарактеристикаНоменклатуры,
	|	ШтрихкодыПоКомбинации.ЕдиницаИзмерения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КоличествоШтрихкодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыПоКомбинации.Штрихкод КАК Штрихкод,
	|	ШтрихкодыПоКомбинации.Номенклатура КАК Номенклатура,
	|	ШтрихкодыПоКомбинации.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ШтрихкодыПоКомбинации.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ШтрихкодыПоКомбинации КАК ШтрихкодыПоКомбинации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоискРазличныхКомбинаций КАК ПоискРазличныхКомбинаций
	|		ПО ШтрихкодыПоКомбинации.Номенклатура = ПоискРазличныхКомбинаций.Номенклатура
	|			И ШтрихкодыПоКомбинации.ХарактеристикаНоменклатуры = ПоискРазличныхКомбинаций.ХарактеристикаНоменклатуры
	|			И ШтрихкодыПоКомбинации.ЕдиницаИзмерения = ПоискРазличныхКомбинаций.ЕдиницаИзмерения
	|ГДЕ
	|	ПоискРазличныхКомбинаций.КоличествоШтрихкодов = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.Объект КАК Номенклатура
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Объект";
	
	ПакетыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ПакетыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецПроцедуры

Процедура ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление,
                                                  ШтрихкодыНоменклатуры,
                                                  ШтрихкодыКомбинаций,
                                                  НоменклатураИБ,
                                                  ХарактеристикаИБ,
                                                  ЕдиницаИзмеренияИБ)
	
	ШтрихкодыТовара = Новый Массив;
	
	ОтборШтрихкодов = Новый Структура;
	ОтборШтрихкодов.Вставить("Номенклатура", НоменклатураИБ);
	
	НайденныеСтрокиШтрихкодов = ШтрихкодыНоменклатуры.НайтиСтроки(ОтборШтрихкодов);
	
	Для Каждого СтрокаШтрихкода Из НайденныеСтрокиШтрихкодов Цикл
		
		ШтрихкодыТовара.Добавить(СтрокаШтрихкода.Штрихкод);
		
	КонецЦикла;
	
	Сопоставление.Вставить("ШтрихкодыНоменклатуры", ШтрихкодыТовара);
	
	ОтборШтрихкодов = Новый Структура;
	ОтборШтрихкодов.Вставить("Номенклатура"    , НоменклатураИБ);
	ОтборШтрихкодов.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаИБ);
	ОтборШтрихкодов.Вставить("ЕдиницаИзмерения", ЕдиницаИзмеренияИБ);
	
	СтрокаПоиска = ШтрихкодыКомбинаций.НайтиСтроки(ОтборШтрихкодов);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		Сопоставление.Вставить("ШтрихкодКомбинации", СтрокаПоиска[0].Штрихкод);
		
	ИначеЕсли ТипЗнч(ЕдиницаИзмеренияИБ) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		
		ОтборШтрихкодов.Удалить("ЕдиницаИзмерения");
		СтрокаПоиска = ШтрихкодыКомбинаций.НайтиСтроки(ОтборШтрихкодов);
		
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			
			Сопоставление.Вставить("ШтрихкодКомбинации", СтрокаПоиска[0].Штрихкод);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузкаЗНВЭДОВозможна(СсылкаНаОбъект)
	
	СостояниеЗН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Состояние");
		
	Если СостояниеЗН <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт
		И СостояниеЗН <> Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
		
		ВызватьИсключение НСтр("ru = 'Выгрузка возможна только для закрытых заказ-нарядов'");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДайДанныеВозвратПоставщикуДляУПД(СсылкаНаОбъект)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		
		ВызватьИсключение НСтр("ru = 'Не указан документ для выгрузки в ЭДО'");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВозвратПоставщику.Номер КАК Номер,
		|	ВозвратПоставщику.Номер КАК НомерПоДаннымКлиента,
		|	ВозвратПоставщику.Дата КАК ДатаДокумента,
		|	ВозвратПоставщику.Дата КАК ДатаПоДаннымКлиента,
		|	ВозвратПоставщику.Организация КАК Организация,
		|	ВозвратПоставщику.Организация КАК ЮрФизЛицо,
		|	ВозвратПоставщику.Организация КАК Поставщик,
		|	ВозвратПоставщику.Контрагент КАК Покупатель,
		|	ВозвратПоставщику.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	ВозвратПоставщику.Менеджер КАК Менеджер,
		|	ВозвратПоставщику.ДоговорВзаиморасчетов.Наименование КАК ДоговорВзаиморасчетовНаименование,
		|	ВозвратПоставщику.ДокументОснование КАК ДокументОснование,
		|	ВозвратПоставщику.ДокументОснование.Номер КАК ДокументОснованиеНомер,
		|	ВозвратПоставщику.ДокументОснование.Дата КАК ДокументОснованиеДата,
		|	ВозвратПоставщику.ПодразделениеКомпании КАК Подразделение,
		|	ВозвратПоставщику.ВалютаДокумента КАК ВалютаДокумента,
		|	ВозвратПоставщику.КурсДокумента КАК Курс,
		|	ВозвратПоставщику.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	ВозвратПоставщику.СкладКомпании.МОЛ КАК ОтпускПроизвел,
		|	ВозвратПоставщику.Организация.ИНН КАК ИННпоставщика,
		|	ВозвратПоставщику.Организация.КПП КАК КППпоставщика,
		|	ВозвратПоставщику.Контрагент.ИНН КАК ИННпокупателя,
		|	ВозвратПоставщику.Контрагент.КПП КАК КППпокупателя,
		|	ВозвратПоставщику.ХозОперация КАК ХозОперация,
		|	ВозвратПоставщику.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия) КАК ЭтоКомиссия,
		|	ЛОЖЬ КАК Исправление,
		|	ВозвратПоставщику.Ссылка КАК Ссылка,
		|	ВозвратПоставщику.Дата КАК Дата,
		|	ВозвратПоставщику.ВалютаДокумента.Код КАК КодВалюты,
		|	ВозвратПоставщику.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	ВозвратПоставщику.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	ВозвратПоставщику.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	ВозвратПоставщику.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	ВозвратПоставщику.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,
		|	ВозвратПоставщику.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	ВозвратПоставщику.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	ВозвратПоставщику.Грузоотправитель КАК Грузоотправитель,
		|	ВозвратПоставщику.Грузополучатель КАК Грузополучатель
		|ИЗ
		|	Документ.ВозвратПоставщику КАК ВозвратПоставщику
		|ГДЕ
		|	ВозвратПоставщику.Ссылка = &ТекущийДокумент"
	);
	
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	Шапка = ДополнитьДополнительнымиРеквизитамиИСведениями(Шапка, СсылкаНаОбъект);
	
	ТаблицаТоваровСчетФактуры = ТоварыИзСчетаФактуры(СсылкаНаОбъект);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Коэффициент КАК Коэффициент,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.Сумма КАК Сумма,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВсего КАК СуммаВсего,
	|	ТаблицаТоваров.ГТД КАК ГТД,
	|	ТаблицаТоваров.Партия КАК Партия,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	0 КАК НомерСтроки,
	|	ТаблицаТоваров.НомерСтроки КАК Порядок
	|ПОМЕСТИТЬ ДанныеОТоварах
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВозвратПоставщикуТовары.НомерСтроки КАК НомерСтрокиИсходногоДокумента,
	|	ВозвратПоставщикуТовары.Номенклатура.Код КАК КодТовара,
	|	ВозвратПоставщикуТовары.Номенклатура.Артикул КАК Артикул,
	|	ВозвратПоставщикуТовары.Номенклатура.НаименованиеПолное КАК НаименованиеНоменклатуры,
	|	ВозвратПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратПоставщикуТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВозвратПоставщикуТовары.Номенклатура.Код КАК КодНоменклатуры,
	|	ВозвратПоставщикуТовары.Количество КАК Количество,
	|	ВозвратПоставщикуТовары.Цена * &Курс / &Кратность КАК Цена,
	|	ВозвратПоставщикуТовары.Сумма * &Курс / &Кратность КАК Сумма,
	|	ВозвратПоставщикуТовары.СуммаВсего * &Курс / &Кратность - ВозвратПоставщикуТовары.СуммаНДС * &Курс / &Кратность КАК СуммаБезНДС,
	|	ВозвратПоставщикуТовары.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	ВозвратПоставщикуТовары.СуммаВсего * &Курс / &Кратность КАК СуммаСНДС,
	|	ВозвратПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратПоставщикуТовары.ХарактеристикаНоменклатуры) КАК НаименованиеХарактеристики,
	|	ВозвратПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВозвратПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ВозвратПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВозвратПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВозвратПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВозвратПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВозвратПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВозвратПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВозвратПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ВозвратПоставщикуТовары.ЕдиницаИзмерения КАК Упаковка,
	|	ВозвратПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК УпаковкаКод,
	|	ВозвратПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК УпаковкаНаименование,
	|	&ТекущийДокумент КАК Ссылка,
	|	"""" КАК ВидУпаковки,
	|	0 КАК СуммаСкидки,
	|	1 КАК Коэффициент,
	|	0 КАК КоличествоМест,
	|	0 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВозвратПоставщикуТовары.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|			ТОГДА ""643""
	|		ИНАЧЕ ВозвратПоставщикуТовары.ГТД.Страна.Код
	|	КОНЕЦ КАК КодСтраныПроисхождения,
	|	ВозвратПоставщикуТовары.ГТД.Страна.Наименование КАК НаименованиеСтраныПроисхождения,
	|	ВозвратПоставщикуТовары.ГТД.Наименование КАК НомерТаможеннойДекларации,
	|	ВозвратПоставщикуТовары.ГТД КАК ГТД,
	|	ВозвратПоставщикуТовары.Партия КАК Партия
	|ИЗ
	|	ДанныеОТоварах КАК ВозвратПоставщикуТовары
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Шапка.Дата);
	Запрос.УстановитьПараметр("Курс", КурсВалюты.Курс);
	Запрос.УстановитьПараметр("Кратность", КурсВалюты.Кратность);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваровСчетФактуры);
	Товары = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
	КодыУпаковокМаркируемойПродукции = Документы
		.ВозвратПоставщику
		.ПолучитьКодыУпаковокМаркируемойПродукции(СсылкаНаОбъект);
	
	ПрослеживаемыеТовары = УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Шапка.Ссылка);
	Шапка = ДополнитьДанныеДокументаОтгрузки(Шапка, Товары, СсылкаНаОбъект);
	
	Результат = Новый Структура();
	Результат.Вставить("Шапка", Шапка);
	Результат.Вставить("Товары", Товары);
	Результат.Вставить("КодыУпаковокМаркируемойПродукции", КодыУпаковокМаркируемойПродукции);
	Результат.Вставить("ПрослеживаемыеТовары", ПрослеживаемыеТовары);
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьДополнительнымиРеквизитамиИСведениями(Шапка, СсылкаНаОбъект)
	
	СвойстваНеобходимыеПриВыгрузке = Новый Массив(2);
	СвойстваНеобходимыеПриВыгрузке[0] = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Доверенность;
	СвойстваНеобходимыеПриВыгрузке[1] = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки;
	ЗначенияСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(
		СсылкаНаОбъект,
		Истина,
		Истина,
		СвойстваНеобходимыеПриВыгрузке
	);
	
	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойств);
	Шапка.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	
	Доверенность = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Доверенность", ЗначенияСвойств);
	
	Если ЗначениеЗаполнено(Доверенность) Тогда
		
		Шапка.Вставить("Доверенность", Доверенность);
		
	КонецЕсли;
	
	Шапка.Вставить(
		"ГлавныйБухгалтер",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "ГлавныйБухгалтер")
	);
	Шапка.Вставить("Руководитель", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "Руководитель"));
	Шапка.Вставить("Отпустил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "Отпустил"));
	Шапка.Вставить(
		"Получил",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "ПолучилКонтрагент", "Получил")
	);
	Возврат Шапка;
	
КонецФункции

Функция ТоварыИзСчетаФактуры(СсылкаНаОбъект)
	
	ДокументФактура = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(СсылкаНаОбъект).СчетФактура;
	
	Если НЕ ЗначениеЗаполнено(ДокументФактура) Тогда
		
		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
		СчетФактура.Заполнить(СсылкаНаОбъект);
		
	Иначе
		
		СчетФактура = ДокументФактура;
		СчетФактура.ПолучитьОбъект();
		
	КонецЕсли;
	
	ТаблицаТоваров = СчетФактура.Товары.Выгрузить();
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ДополнитьДанныеДокументаОтгрузки(Шапка, Товары, СсылкаНаОбъект)
	
	Если Шапка.Исправление Тогда
		
		НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Шапка);
		ДатаДокумента = Шапка.Дата;  
		ХозОперация = Строка(Шапка.ДокументОснование.ХозОперация);
	
	Иначе 
		
		НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Шапка.Ссылка);
		ДатаДокумента = Шапка.ДатаДокумента;  
		ХозОперация = Строка(Шапка.ХозОперация); 
		
	КонецЕсли;
	
	КоличествоТоваров = Товары.Количество();
	
	КоличествоТовара = "";
	Если КоличествоТоваров = 1 Тогда
		
		КоличествоТовара = "1";
		
	ИначеЕсли КоличествоТоваров > 1 Тогда
		
		КоличествоТовара = СтрШаблон("1-%1", Строка(КоличествоТоваров));
		
	КонецЕсли;
	
	ДокументОбОтгрузке = Новый ТаблицаЗначений;
	ДокументОбОтгрузке.Колонки.Добавить("НомераСтрок");
	ДокументОбОтгрузке.Колонки.Добавить("Наименование");
	ДокументОбОтгрузке.Колонки.Добавить("Номер");
	ДокументОбОтгрузке.Колонки.Добавить("Дата");
	
	СтрокаОтгрузки = ДокументОбОтгрузке.Добавить();
	СтрокаОтгрузки.Наименование 	= ХозОперация;
	СтрокаОтгрузки.Номер 			= НомерДокумента; 
	СтрокаОтгрузки.Дата 			= ДатаДокумента; 
	СтрокаОтгрузки.НомераСтрок 		= КоличествоТовара;  

	Шапка.Вставить("ДокументОбОтгрузке", ДокументОбОтгрузке);
	
	Возврат Шапка;
	
КонецФункции

Функция ДайДанныеКорректировкиРеализацииИУслугДляУПД(СсылкаНаОбъект)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		
		ВызватьИсключение НСтр("ru = 'Не указан документ для выгрузки в ЭДО'");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеализацияТоваров.Номер КАК Номер,
		|	РеализацияТоваров.Номер КАК НомерПоДаннымКлиента,
		|	РеализацияТоваров.Дата КАК ДатаДокумента,
		|	РеализацияТоваров.Дата КАК ДатаПоДаннымКлиента,
		|	РеализацияТоваров.Организация КАК Организация,
		|	РеализацияТоваров.Организация КАК ЮрФизЛицо,
		|	РеализацияТоваров.Организация КАК Поставщик,
		|	РеализацияТоваров.Контрагент КАК Покупатель,
		|	РеализацияТоваров.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	РеализацияТоваров.Менеджер КАК Менеджер,
		|	РеализацияТоваров.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	РеализацияТоваров.ДокументОснование КАК ДокументОснование,
		|	РеализацияТоваров.ДокументОснование.Номер КАК ДокументОснованиеНомер,
		|	РеализацияТоваров.ДокументОснование.Дата КАК ДокументОснованиеДата,
		|	РеализацияТоваров.ПодразделениеКомпании КАК Подразделение,
		|	РеализацияТоваров.ВалютаДокумента КАК ВалютаДокумента,
		|	РеализацияТоваров.КурсДокумента КАК Курс,
		|	РеализацияТоваров.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	РеализацияТоваров.СкладКомпании.МОЛ КАК ОтпускПроизвел,
		|	РеализацияТоваров.Организация.ИНН КАК ИННпоставщика,
		|	РеализацияТоваров.Организация.КПП КАК КППпоставщика,
		|	РеализацияТоваров.Контрагент.ИНН КАК ИННпокупателя,
		|	РеализацияТоваров.Контрагент.КПП КАК КППпокупателя,
		|	РеализацияТоваров.ХозОперация КАК ХозОперация,
		|	РеализацияТоваров.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияТоваровКомиссия) КАК ЭтоКомиссия,
		|	ИСТИНА КАК Исправление,
		|	РеализацияТоваров.Ссылка КАК Ссылка,
		|	РеализацияТоваров.Дата КАК Дата,
		|	РеализацияТоваров.ВалютаДокумента.Код КАК КодВалюты,
		|	РеализацияТоваров.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	РеализацияТоваров.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	РеализацияТоваров.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	РеализацияТоваров.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	РеализацияТоваров.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,
		|	РеализацияТоваров.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	РеализацияТоваров.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	РеализацияТоваров.НомерИсправления КАК НомерИсправления,
		|	РеализацияТоваров.Дата КАК ДатаИсправления,
		|	РеализацияТоваров.Грузоотправитель КАК Грузоотправитель,
		|	РеализацияТоваров.Грузополучатель КАК Грузополучатель,
		|	РеализацияТоваров.ПричинаВыводаИзОборота КАК ПричинаВыводаИзОборота
		|ИЗ
		|	Документ.КорректировкаРеализации КАК РеализацияТоваров
		|ГДЕ
		|	РеализацияТоваров.Ссылка = &ТекущийДокумент"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	Шапка = ДополнитьДополнительнымиРеквизитамиИСведениями(Шапка, СсылкаНаОбъект);
	
	ТаблицаТоваровСчетФактуры = ТоварыИзСчетаФактуры(СсылкаНаОбъект);
	
	ДанныеИсходногоДокумента = Документы.СчетФактураВыданный.КорректировочныеДанныеДокумента();
	ДанныеИсходногоДокумента.ПодразделениеКомпании = Шапка.Подразделение;
	ДанныеИсходногоДокумента.Дата = Шапка.Дата;
	Документы.СчетФактураВыданный.ЗаполнитьНомера(ДанныеИсходногоДокумента, Шапка.Ссылка, Истина);
	
	Если ЗначениеЗаполнено(ДанныеИсходногоДокумента.НомерИсходногоДокумента) Тогда
		Шапка.Номер = ДанныеИсходногоДокумента.НомерИсходногоДокумента;
		Шапка.Дата  = ДанныеИсходногоДокумента.ДатаИсходногоДокумента;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Содержание КАК Содержание,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Коэффициент КАК Коэффициент,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.Сумма КАК Сумма,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВсего КАК СуммаВсего,
	|	ТаблицаТоваров.ГТД КАК ГТД,
	|	ТаблицаТоваров.Партия КАК Партия,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	0 КАК НомерСтроки,
	|	ТаблицаТоваров.НомерСтроки КАК Порядок
	|ПОМЕСТИТЬ ДанныеОТоварах
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровТовары.НомерСтроки КАК НомерСтрокиИсходногоДокумента,
	|	РеализацияТоваровТовары.Номенклатура.Код КАК КодТовара,
	|	РеализацияТоваровТовары.Номенклатура.Артикул КАК Артикул,
	|	РеализацияТоваровТовары.Номенклатура.НаименованиеПолное КАК НаименованиеНоменклатуры,
	|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровТовары.Содержание КАК Содержание,
	|	РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	РеализацияТоваровТовары.Номенклатура.Код КАК КодНоменклатуры,
	|	РеализацияТоваровТовары.Количество КАК Количество,
	|	РеализацияТоваровТовары.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияТоваровТовары.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровТовары.СуммаВсего * &Курс / &Кратность - РеализацияТоваровТовары.СуммаНДС * &Курс / &Кратность КАК СуммаБезНДС,
	|	РеализацияТоваровТовары.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровТовары.СуммаВсего * &Курс / &Кратность КАК СуммаСНДС,
	|	РеализацияТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровТовары.ХарактеристикаНоменклатуры) КАК НаименованиеХарактеристики,
	|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	|	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения КАК Упаковка,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК УпаковкаКод,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК УпаковкаНаименование,
	|	&ТекущийДокумент КАК Ссылка,
	|	"""" КАК ВидУпаковки,
	|	0 КАК СуммаСкидки,
	|	1 КАК Коэффициент,
	|	0 КАК КоличествоМест,
	|	0 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровТовары.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|			ТОГДА ""643""
	|		ИНАЧЕ РеализацияТоваровТовары.ГТД.Страна.Код
	|	КОНЕЦ КАК КодСтраныПроисхождения,
	|	РеализацияТоваровТовары.ГТД.Страна.Наименование КАК НаименованиеСтраныПроисхождения,
	|	РеализацияТоваровТовары.ГТД.Наименование КАК НомерТаможеннойДекларации,
	|	РеализацияТоваровТовары.ГТД КАК ГТД, 
	|	РеализацияТоваровТовары.Партия КАК Партия,
	|   РеализацияТоваровТовары.Порядок КАК Порядок,
	|	0 КАК ПорядокТаблицы
	|ИЗ
	|	ДанныеОТоварах КАК РеализацияТоваровТовары
	|ГДЕ
	|	РеализацияТоваровТовары.Номенклатура Ссылка Справочник.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровТовары.НомерСтроки КАК НомерСтрокиИсходногоДокумента,
	|	РеализацияТоваровТовары.Авторабота.Код КАК КодТовара,
	|	РеализацияТоваровТовары.Авторабота.Артикул КАК Артикул,
	|	РеализацияТоваровТовары.Авторабота.НаименованиеПолное КАК НаименованиеНоменклатуры,
	|	РеализацияТоваровТовары.Авторабота КАК Номенклатура,
	|	"""" КАК Содержание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга) КАК ВидНоменклатуры,
	|	РеализацияТоваровТовары.Авторабота.Код КАК КодНоменклатуры,
	|	РеализацияТоваровТовары.Количество * РеализацияТоваровТовары.Коэффициент КАК Количество,
	|	РеализацияТоваровТовары.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияТоваровТовары.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровТовары.СуммаВсего * &Курс / &Кратность - РеализацияТоваровТовары.СуммаНДС * &Курс / &Кратность КАК СуммаБезНДС,
	|	РеализацияТоваровТовары.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровТовары.СуммаВсего * &Курс / &Кратность КАК СуммаСНДС,
	|	РеализацияТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	|	"""" КАК НаименованиеХарактеристики,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	РеализацияТоваровТовары.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	|	РеализацияТоваровТовары.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	РеализацияТоваровТовары.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровТовары.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	РеализацияТоваровТовары.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	РеализацияТоваровТовары.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровТовары.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияТоваровТовары.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	"""" КАК Упаковка,
	|	"""" КАК УпаковкаКод,
	|	"""" КАК УпаковкаНаименование,
	|	РеализацияТоваровТовары.Ссылка КАК Ссылка,
	|	"""" КАК ВидУпаковки,
	|	0 КАК СуммаСкидки,
	|	1 КАК Коэффициент,
	|	0 КАК КоличествоМест,
	|	0 КАК КоличествоВОдномМесте,
	|	""643"" КАК КодСтраныПроисхождения,
	|	"""" КАК НаименованиеСтраныПроисхождения,
	|	"""" КАК НомерТаможеннойДекларации,
	|	ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка) КАК ГТД,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|   РеализацияТоваровТовары.НомерСтроки КАК Порядок,
	|	1 КАК ПорядокТаблицы
	|ИЗ
	|	Документ.КорректировкаРеализации.Автоработы КАК РеализацияТоваровТовары
	|ГДЕ
	|	РеализацияТоваровТовары.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокТаблицы,
	|	Порядок";
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Шапка.Дата);
	Запрос.УстановитьПараметр("Курс", КурсВалюты.Курс);
	Запрос.УстановитьПараметр("Кратность", КурсВалюты.Кратность);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваровСчетФактуры);
	Товары = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
	КодыУпаковокМаркируемойПродукции = Документы
		.КорректировкаРеализации
		.ПолучитьКодыУпаковокМаркируемойПродукцииСНоменклатурой(СсылкаНаОбъект);
	
	ПрослеживаемыеТовары = УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Шапка.Ссылка);
	Шапка = ДополнитьДанныеДокументаОтгрузки(Шапка, Товары, СсылкаНаОбъект);
	
	Результат = Новый Структура();
	Результат.Вставить("Шапка", Шапка);
	Результат.Вставить("Товары", Товары);
	Результат.Вставить("КодыУпаковокМаркируемойПродукции", КодыУпаковокМаркируемойПродукции);
	Результат.Вставить("ПрослеживаемыеТовары", ПрослеживаемыеТовары);
	
	Возврат Результат;
	
КонецФункции

Функция ДайДанныеРеализацииТоваровИУслугДляУПД(СсылкаНаОбъект)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		
		ВызватьИсключение НСтр("ru = 'Не указан документ для выгрузки в ЭДО'");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеализацияТоваров.Номер КАК Номер,
		|	РеализацияТоваров.Номер КАК НомерПоДаннымКлиента,
		|	РеализацияТоваров.Дата КАК ДатаДокумента,
		|	РеализацияТоваров.Дата КАК ДатаПоДаннымКлиента,
		|	РеализацияТоваров.Организация КАК Организация,
		|	РеализацияТоваров.Организация КАК ЮрФизЛицо,
		|	РеализацияТоваров.Организация КАК Поставщик,
		|	РеализацияТоваров.Контрагент КАК Покупатель,
		|	РеализацияТоваров.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	РеализацияТоваров.Менеджер КАК Менеджер,
		|	РеализацияТоваров.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	РеализацияТоваров.ДокументОснование КАК ДокументОснование,
		|	РеализацияТоваров.ДокументОснование.Номер КАК ДокументОснованиеНомер,
		|	РеализацияТоваров.ДокументОснование.Дата КАК ДокументОснованиеДата,
		|	РеализацияТоваров.ПодразделениеКомпании КАК Подразделение,
		|	РеализацияТоваров.ВалютаДокумента КАК ВалютаДокумента,
		|	РеализацияТоваров.КурсДокумента КАК Курс,
		|	РеализацияТоваров.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	РеализацияТоваров.СкладКомпании.МОЛ КАК ОтпускПроизвел,
		|	РеализацияТоваров.Организация.ИНН КАК ИННпоставщика,
		|	РеализацияТоваров.Организация.КПП КАК КППпоставщика,
		|	РеализацияТоваров.Контрагент.ИНН КАК ИННпокупателя,
		|	РеализацияТоваров.Контрагент.КПП КАК КППпокупателя,
		|	РеализацияТоваров.ХозОперация КАК ХозОперация,
		|	РеализацияТоваров.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияТоваровКомиссия) КАК ЭтоКомиссия,
		|	ЛОЖЬ КАК Исправление,
		|	РеализацияТоваров.Ссылка КАК Ссылка,
		|	РеализацияТоваров.Дата КАК Дата,
		|	РеализацияТоваров.ВалютаДокумента.Код КАК КодВалюты,
		|	РеализацияТоваров.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	РеализацияТоваров.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	РеализацияТоваров.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	РеализацияТоваров.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	РеализацияТоваров.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,
		|	РеализацияТоваров.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	РеализацияТоваров.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	РеализацияТоваров.Грузоотправитель КАК Грузоотправитель,
		|	РеализацияТоваров.Грузополучатель КАК Грузополучатель,
		|	РеализацияТоваров.ПричинаВыводаИзОборота КАК ПричинаВыводаИзОборота
		|ИЗ
		|	Документ.РеализацияТоваров КАК РеализацияТоваров
		|ГДЕ
		|	РеализацияТоваров.Ссылка = &ТекущийДокумент"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	Шапка = ДополнитьДополнительнымиРеквизитамиИСведениями(Шапка, СсылкаНаОбъект);
	
	ТаблицаТоваровСчетФактуры = ТоварыИзСчетаФактуры(СсылкаНаОбъект);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Содержание КАК Содержание,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Коэффициент КАК Коэффициент,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.Сумма КАК Сумма,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВсего КАК СуммаВсего,
	|	ТаблицаТоваров.Партия КАК Партия,
	|	ТаблицаТоваров.ГТД КАК ГТД,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ДанныеОТоварах
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровТовары.НомерСтроки КАК НомерСтрокиИсходногоДокумента,
	|	РеализацияТоваровТовары.Номенклатура.Код КАК КодТовара,
	|	РеализацияТоваровТовары.Номенклатура.Артикул КАК Артикул,
	|	РеализацияТоваровТовары.Номенклатура.НаименованиеПолное КАК НаименованиеНоменклатуры,
	|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровТовары.Содержание КАК Содержание,
	|	РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	РеализацияТоваровТовары.Номенклатура.Код КАК КодНоменклатуры,
	|	РеализацияТоваровТовары.Количество КАК Количество,
	|	РеализацияТоваровТовары.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияТоваровТовары.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровТовары.СуммаВсего * &Курс / &Кратность - РеализацияТоваровТовары.СуммаНДС * &Курс / &Кратность КАК СуммаБезНДС,
	|	РеализацияТоваровТовары.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровТовары.СуммаВсего * &Курс / &Кратность КАК СуммаСНДС,
	|	РеализацияТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровТовары.ХарактеристикаНоменклатуры) КАК НаименованиеХарактеристики,
	|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	|	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	РеализацияТоваровТовары.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения КАК Упаковка,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК УпаковкаКод,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК УпаковкаНаименование,
	|	&ТекущийДокумент КАК Ссылка,
	|	"""" КАК ВидУпаковки,
	|	0 КАК СуммаСкидки,
	|	1 КАК Коэффициент,
	|	0 КАК КоличествоМест,
	|	0 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровТовары.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|			ТОГДА ""643""
	|		ИНАЧЕ РеализацияТоваровТовары.ГТД.Страна.Код
	|	КОНЕЦ КАК КодСтраныПроисхождения,
	|	РеализацияТоваровТовары.ГТД.Страна.Наименование КАК НаименованиеСтраныПроисхождения,
	|	РеализацияТоваровТовары.ГТД.Наименование КАК НомерТаможеннойДекларации,
	|	РеализацияТоваровТовары.ГТД КАК ГТД,
	|	РеализацияТоваровТовары.Партия КАК Партия
	|ИЗ
	|	ДанныеОТоварах КАК РеализацияТоваровТовары
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Шапка.Дата);
	Запрос.УстановитьПараметр("Курс", КурсВалюты.Курс);
	Запрос.УстановитьПараметр("Кратность", КурсВалюты.Кратность);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваровСчетФактуры);
	Товары = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
	КодыУпаковокМаркируемойПродукции = Документы
		.РеализацияТоваров
		.ПолучитьКодыУпаковокМаркируемойПродукции(СсылкаНаОбъект);
	
	ПрослеживаемыеТовары = УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Шапка.Ссылка);
	Шапка = ДополнитьДанныеДокументаОтгрузки(Шапка, Товары, СсылкаНаОбъект);
	
	Результат = Новый Структура();
	Результат.Вставить("Шапка", Шапка);
	Результат.Вставить("Товары", Товары);
	Результат.Вставить("КодыУпаковокМаркируемойПродукции", КодыУпаковокМаркируемойПродукции);
	Результат.Вставить("ПрослеживаемыеТовары", ПрослеживаемыеТовары);
	
	Возврат Результат;
	
КонецФункции

Функция ДайДанныеРеализацииАвтомобилейДляУПД(СсылкаНаОбъект)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		
		ВызватьИсключение НСтр("ru = 'Не указан документ для выгрузки в ЭДО'");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеализацияАвтомобилей.Номер КАК Номер,
		|	РеализацияАвтомобилей.Номер КАК НомерПоДаннымКлиента,
		|	РеализацияАвтомобилей.Дата КАК ДатаДокумента,
		|	РеализацияАвтомобилей.Дата КАК ДатаПоДаннымКлиента,
		|	РеализацияАвтомобилей.Организация КАК Организация,
		|	РеализацияАвтомобилей.Организация КАК ЮрФизЛицо,
		|	РеализацияАвтомобилей.Организация КАК Поставщик,
		|	РеализацияАвтомобилей.Контрагент КАК Покупатель,
		|	РеализацияАвтомобилей.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	РеализацияАвтомобилей.Менеджер КАК Менеджер,
		|	РеализацияАвтомобилей.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	РеализацияАвтомобилей.ДокументОснование КАК ДокументОснование,
		|	РеализацияАвтомобилей.ДокументОснование.Номер КАК ДокументОснованиеНомер,
		|	РеализацияАвтомобилей.ДокументОснование.Дата КАК ДокументОснованиеДата,
		|	РеализацияАвтомобилей.ПодразделениеКомпании КАК Подразделение,
		|	РеализацияАвтомобилей.ВалютаДокумента КАК ВалютаДокумента,
		|	РеализацияАвтомобилей.КурсДокумента КАК Курс,
		|	РеализацияАвтомобилей.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	РеализацияАвтомобилей.СкладКомпании.МОЛ КАК ОтпускПроизвел,
		|	РеализацияАвтомобилей.Организация.ИНН КАК ИННпоставщика,
		|	РеализацияАвтомобилей.Организация.КПП КАК КППпоставщика,
		|	РеализацияАвтомобилей.Контрагент.ИНН КАК ИННпокупателя,
		|	РеализацияАвтомобилей.Контрагент.КПП КАК КППпокупателя,
		|	РеализацияАвтомобилей.ХозОперация КАК ХозОперация,
		|	РеализацияАвтомобилей.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияТоваровКомиссия) КАК ЭтоКомиссия,
		|	ЛОЖЬ КАК Исправление,
		|	РеализацияАвтомобилей.Ссылка КАК Ссылка,
		|	РеализацияАвтомобилей.Дата КАК Дата,
		|	РеализацияАвтомобилей.ВалютаДокумента.Код КАК КодВалюты,
		|	РеализацияАвтомобилей.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	РеализацияАвтомобилей.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	РеализацияАвтомобилей.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	РеализацияАвтомобилей.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	РеализацияАвтомобилей.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора, 
		|	РеализацияАвтомобилей.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	РеализацияАвтомобилей.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта
		|ИЗ
		|	Документ.РеализацияАвтомобилей КАК РеализацияАвтомобилей
		|ГДЕ
		|	РеализацияАвтомобилей.Ссылка = &ТекущийДокумент"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	Шапка = ДополнитьДополнительнымиРеквизитамиИСведениями(Шапка, СсылкаНаОбъект);
	
	ТаблицаТоваровСчетФактуры = ТоварыИзСчетаФактуры(СсылкаНаОбъект);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура)
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Автомобили)
		|	КОНЕЦ КАК Номенклатура,
		|	ТаблицаТоваров.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаТоваров.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения)
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТоваров.ЕдиницаИзмерения КАК Справочник.КлассификаторЕдиницИзмерения)
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ТаблицаТоваров.Коэффициент КАК Коэффициент,
		|	ТаблицаТоваров.Цена КАК Цена,
		|	ТаблицаТоваров.Сумма КАК Сумма,
		|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТоваров.СуммаВсего КАК СуммаВсего,
		|	ТаблицаТоваров.Партия КАК Партия,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.ГТД КАК Справочник.ГТД) КАК ГТД,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.шт) КАК БазоваяЕдиницаИзмерения
		|ПОМЕСТИТЬ ДанныеОТоварах
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровТовары.НомерСтроки КАК НомерСтроки,
		|	РеализацияТоваровТовары.НомерСтроки КАК НомерСтрокиИсходногоДокумента,
		|	РеализацияТоваровТовары.Номенклатура.Код КАК КодТовара,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровТовары.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА РеализацияТоваровТовары.Номенклатура.Артикул
		|		ИНАЧЕ РеализацияТоваровТовары.Номенклатура.VIN
		|	КОНЕЦ КАК Артикул,
		|	РеализацияТоваровТовары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
		|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровТовары.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК ВидНоменклатуры,
		|	РеализацияТоваровТовары.Номенклатура.Код КАК КодНоменклатуры,
		|	РеализацияТоваровТовары.Количество КАК Количество,
		|	РеализацияТоваровТовары.Цена * &Курс / &Кратность КАК Цена,
		|	РеализацияТоваровТовары.Сумма * &Курс / &Кратность КАК Сумма,
		|	РеализацияТоваровТовары.СуммаВсего * &Курс / &Кратность - РеализацияТоваровТовары.СуммаНДС * &Курс / &Кратность КАК СуммаБезНДС,
		|	РеализацияТоваровТовары.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	РеализацияТоваровТовары.СуммаВсего * &Курс / &Кратность КАК СуммаСНДС,
		|	РеализацияТоваровТовары.СтавкаНДС КАК СтавкаНДС,
		|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровТовары.ХарактеристикаНоменклатуры) КАК НаименованиеХарактеристики,
		|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
		|	РеализацияТоваровТовары.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	РеализацияТоваровТовары.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
		|	РеализацияТоваровТовары.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
		|	РеализацияТоваровТовары.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|	РеализацияТоваровТовары.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	РеализацияТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровТовары.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|			ТОГДА ""796""
		|		ИНАЧЕ РеализацияТоваровТовары.ЕдиницаИзмерения.Код
		|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
		|	РеализацияТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	РеализацияТоваровТовары.ЕдиницаИзмерения КАК Упаковка,
		|	РеализацияТоваровТовары.ЕдиницаИзмерения.Код КАК УпаковкаКод,
		|	РеализацияТоваровТовары.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
		|	&ТекущийДокумент КАК Ссылка,
		|	"""" КАК ВидУпаковки,
		|	0 КАК СуммаСкидки,
		|	1 КАК Коэффициент,
		|	0 КАК КоличествоМест,
		|	0 КАК КоличествоВОдномМесте,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровТовары.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
		|			ТОГДА ""643""
		|		ИНАЧЕ РеализацияТоваровТовары.ГТД.Страна.Код
		|	КОНЕЦ КАК КодСтраныПроисхождения,
		|	РеализацияТоваровТовары.ГТД.Страна.Наименование КАК НаименованиеСтраныПроисхождения,
		|	РеализацияТоваровТовары.ГТД.Наименование КАК НомерТаможеннойДекларации,
		|	РеализацияТоваровТовары.ГТД КАК ГТД,
		|	РеализацияТоваровТовары.Партия КАК Партия
		|ИЗ
		|	ДанныеОТоварах КАК РеализацияТоваровТовары
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Шапка.Дата);
	Запрос.УстановитьПараметр("Курс", КурсВалюты.Курс);
	Запрос.УстановитьПараметр("Кратность", КурсВалюты.Кратность);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваровСчетФактуры);  
	Товары = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
	ПрослеживаемыеТовары = УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Шапка.Ссылка);
	Шапка = ДополнитьДанныеДокументаОтгрузки(Шапка, Товары, СсылкаНаОбъект);
	
	Результат = Новый Структура();
	Результат.Вставить("Шапка", Шапка);
	Результат.Вставить("Товары", Товары);
	Результат.Вставить("КодыУпаковокМаркируемойПродукции", Неопределено);
	Результат.Вставить("ПрослеживаемыеТовары", ПрослеживаемыеТовары);

	Возврат Результат;
	
КонецФункции

Функция ДайДанныеКорректировкиРеализацииАвтомобилейДляУПД(СсылкаНаОбъект)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		
		ВызватьИсключение НСтр("ru = 'Не указан документ для выгрузки в ЭДО'");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КорректировкаРеализацииАвтомобилей.Номер КАК Номер,
		|	КорректировкаРеализацииАвтомобилей.Номер КАК НомерПоДаннымКлиента,
		|	КорректировкаРеализацииАвтомобилей.Дата КАК ДатаДокумента,
		|	КорректировкаРеализацииАвтомобилей.Дата КАК ДатаПоДаннымКлиента,
		|	КорректировкаРеализацииАвтомобилей.Организация КАК Организация,
		|	КорректировкаРеализацииАвтомобилей.Организация КАК ЮрФизЛицо,
		|	КорректировкаРеализацииАвтомобилей.Организация КАК Поставщик,
		|	КорректировкаРеализацииАвтомобилей.Контрагент КАК Покупатель,
		|	КорректировкаРеализацииАвтомобилей.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	КорректировкаРеализацииАвтомобилей.Менеджер КАК Менеджер,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	КорректировкаРеализацииАвтомобилей.ДокументОснование КАК ДокументОснование,
		|	КорректировкаРеализацииАвтомобилей.ДокументОснование.Номер КАК ДокументОснованиеНомер,
		|	КорректировкаРеализацииАвтомобилей.ДокументОснование.Дата КАК ДокументОснованиеДата,
		|	КорректировкаРеализацииАвтомобилей.ПодразделениеКомпании КАК Подразделение,
		|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента КАК ВалютаДокумента,
		|	КорректировкаРеализацииАвтомобилей.КурсДокумента КАК Курс,
		|	КорректировкаРеализацииАвтомобилей.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	КорректировкаРеализацииАвтомобилей.СкладКомпании.МОЛ КАК ОтпускПроизвел,
		|	КорректировкаРеализацииАвтомобилей.Организация.ИНН КАК ИННпоставщика,
		|	КорректировкаРеализацииАвтомобилей.Организация.КПП КАК КППпоставщика,
		|	КорректировкаРеализацииАвтомобилей.Контрагент.ИНН КАК ИННпокупателя,
		|	КорректировкаРеализацииАвтомобилей.Контрагент.КПП КАК КППпокупателя,
		|	КорректировкаРеализацииАвтомобилей.ХозОперация КАК ХозОперация,
		|	КорректировкаРеализацииАвтомобилей.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияТоваровКомиссия) КАК ЭтоКомиссия,
		|	ИСТИНА КАК Исправление,
		|	КорректировкаРеализацииАвтомобилей.Ссылка КАК Ссылка,
		|	КорректировкаРеализацииАвтомобилей.Дата КАК Дата,
		|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента.Код КАК КодВалюты,
		|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,   
		|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	КорректировкаРеализацииАвтомобилей.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	КорректировкаРеализацииАвтомобилей.НомерИсправления КАК НомерИсправления,
		|	КорректировкаРеализацииАвтомобилей.Дата КАК ДатаИсправления,
		|	КорректировкаРеализацииАвтомобилей.Грузоотправитель КАК Грузоотправитель,
		|	КорректировкаРеализацииАвтомобилей.Грузополучатель КАК Грузополучатель
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей КАК КорректировкаРеализацииАвтомобилей
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилей.Ссылка = &ТекущийДокумент"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	Шапка = ДополнитьДополнительнымиРеквизитамиИСведениями(Шапка, СсылкаНаОбъект);
	
	ДанныеИсходногоДокумента = Документы.СчетФактураВыданный.КорректировочныеДанныеДокумента();
	ДанныеИсходногоДокумента.ПодразделениеКомпании = Шапка.Подразделение;
	ДанныеИсходногоДокумента.Дата = Шапка.Дата;
	Документы.СчетФактураВыданный.ЗаполнитьНомера(ДанныеИсходногоДокумента, Шапка.Ссылка, Истина);
	
	Если ЗначениеЗаполнено(ДанныеИсходногоДокумента.НомерИсходногоДокумента) Тогда
		Шапка.Номер = ДанныеИсходногоДокумента.НомерИсходногоДокумента;
		Шапка.Дата  = ДанныеИсходногоДокумента.ДатаИсходногоДокумента;
	КонецЕсли;
	
	ТаблицаТоваровСчетФактуры = ТоварыИзСчетаФактуры(СсылкаНаОбъект);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Коэффициент КАК Коэффициент,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.Сумма КАК Сумма,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВсего КАК СуммаВсего,
	|	ТаблицаТоваров.ГТД КАК ГТД,
	|	ТаблицаТоваров.Партия КАК Партия,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	0 КАК НомерСтроки,
	|   ТаблицаТоваров.НомерСтроки КАК Порядок
	|ПОМЕСТИТЬ ДанныеОТоварах
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	РеализацияАвтомобилейАвтомобили.НомерСтроки КАК НомерСтрокиИсходногоДокумента,
	|	РеализацияАвтомобилейАвтомобили.Номенклатура.Код КАК КодТовара,
	|	РеализацияАвтомобилейАвтомобили.Номенклатура.VIN КАК Артикул,
	|	РеализацияАвтомобилейАвтомобили.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	РеализацияАвтомобилейАвтомобили.Номенклатура КАК Номенклатура,
	|	РеализацияАвтомобилейАвтомобили.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	РеализацияАвтомобилейАвтомобили.Номенклатура.Код КАК КодНоменклатуры,
	|	РеализацияАвтомобилейАвтомобили.Количество КАК Количество,
	|	РеализацияАвтомобилейАвтомобили.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияАвтомобилейАвтомобили.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего * &Курс / &Кратность - РеализацияАвтомобилейАвтомобили.СуммаНДС * &Курс / &Кратность КАК СуммаБезНДС,
	|	РеализацияАвтомобилейАвтомобили.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего * &Курс / &Кратность КАК СуммаСНДС,
	|	РеализацияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияАвтомобилейАвтомобили.ХарактеристикаНоменклатуры) КАК НаименованиеХарактеристики,
	|	РеализацияАвтомобилейАвтомобили.ХарактеристикаНоменклатуры КАК Характеристика,
	|	&БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	|	(&БазоваяЕдиницаИзмерения).Код КАК БазоваяЕдиницаКод,
	|	(&БазоваяЕдиницаИзмерения).Наименование КАК БазоваяЕдиницаНаименование,
	|	(&БазоваяЕдиницаИзмерения).НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	(&БазоваяЕдиницаИзмерения).МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	РеализацияАвтомобилейАвтомобили.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияАвтомобилейАвтомобили.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияАвтомобилейАвтомобили.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	РеализацияАвтомобилейАвтомобили.ЕдиницаИзмерения КАК Упаковка,
	|	РеализацияАвтомобилейАвтомобили.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	РеализацияАвтомобилейАвтомобили.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	&ТекущийДокумент КАК Ссылка,
	|	"""" КАК ВидУпаковки,
	|	0 КАК СуммаСкидки,
	|	1 КАК Коэффициент,
	|	0 КАК КоличествоМест,
	|	0 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА РеализацияАвтомобилейАвтомобили.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|			ТОГДА ""643""
	|		ИНАЧЕ РеализацияАвтомобилейАвтомобили.ГТД.Страна.Код
	|	КОНЕЦ КАК КодСтраныПроисхождения,
	|	РеализацияАвтомобилейАвтомобили.ГТД.Страна.Наименование КАК НаименованиеСтраныПроисхождения,
	|	РеализацияАвтомобилейАвтомобили.ГТД.Наименование КАК НомерТаможеннойДекларации,
	|	РеализацияАвтомобилейАвтомобили.ГТД КАК ГТД,
	|	РеализацияАвтомобилейАвтомобили.Партия КАК Партия
	|ИЗ
	|	ДанныеОТоварах КАК РеализацияАвтомобилейАвтомобили
	|ГДЕ
	|	РеализацияАвтомобилейАвтомобили.Номенклатура Ссылка Справочник.Автомобили
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Шапка.Дата);
	Запрос.УстановитьПараметр("Курс", КурсВалюты.Курс);
	Запрос.УстановитьПараметр("Кратность", КурсВалюты.Кратность);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваровСчетФактуры); 
	Запрос.УстановитьПараметр("БазоваяЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
	Товары = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
	ПрослеживаемыеТовары = УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Шапка.Ссылка);
	Шапка = ДополнитьДанныеДокументаОтгрузки(Шапка, Товары, СсылкаНаОбъект);
	
	Результат = Новый Структура();
	Результат.Вставить("Шапка", Шапка);
	Результат.Вставить("Товары", Товары);
	Результат.Вставить("КодыУпаковокМаркируемойПродукции", Неопределено);
	Результат.Вставить("ПрослеживаемыеТовары", ПрослеживаемыеТовары);
	
	Возврат Результат;
	
КонецФункции

Процедура РазделитьСтрокуТовараУПД(Товары, СтрокаКРазделению)
	
	ИсключатьСвойства = "Количество, Сумма, СуммаВсего, СуммаНДС, СведенияОПрослеживаемости";
	ИсключатьСвойстваПрослеживаемость = "СведенияОПрослеживаемости";
	
	ЕстьКоличествоПоНакладной = КолонкаСуществует(Товары, "КоличествоПоНакладной");
	ЕстьКоличествоБазовое = КолонкаСуществует(Товары, "КоличествоБазовое");
	
	Если ЕстьКоличествоПоНакладной Тогда
		
		ИсключатьСвойства = ИсключатьСвойства + ", КоличествоПоНакладной";
		
	КонецЕсли;
	
	Если ЕстьКоличествоБазовое Тогда
	
		ИсключатьСвойства = ИсключатьСвойства + ", КоличествоБазовое";
	
	КонецЕсли;
		
	ОбщееКоличество = СтрокаКРазделению.Количество; 
	ОбработаноНДС 		= 0; 
	РаспределеноНДС		= 0; 
	КоэффициентРаспределения = СтрокаКРазделению.СуммаНДС / СтрокаКРазделению.Сумма;  
	
	ОбработаноСумма 	= 0;
	РаспределеноСумма	= 0;	
	КоэффициентРаспределенияСумма = СтрокаКРазделению.Сумма / СтрокаКРазделению.СуммаВсего;
	
	Для Каждого СтрокаРНПТ Из СтрокаКРазделению.СведенияОПрослеживаемости Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Количество = СтрокаРНПТ.Количество;  
			
		Если НоваяСтрока.Количество = ОбщееКоличество Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКРазделению,, ИсключатьСвойстваПрослеживаемость);
			Если Не ЗначениеЗаполнено(НоваяСтрока.ГТД) Тогда
				НоваяСтрока.ГТД = СтрокаРНПТ.РНПТ;
			КонецЕсли;
			Продолжить;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКРазделению,, ИсключатьСвойства);
		КонецЕсли; 
		
		Если ЕстьКоличествоПоНакладной Тогда
			
			НоваяСтрока.КоличествоПоНакладной = НоваяСтрока.Количество;
			
		КонецЕсли;
		
		Если ЕстьКоличествоБазовое Тогда
		
			НоваяСтрока.КоличествоБазовое = НоваяСтрока.Количество;
		
		КонецЕсли;
		
		СуммаРасчетная = СтрокаКРазделению.СуммаВсего/ОбщееКоличество* НоваяСтрока.Количество; 	
		НоваяСтрока.Сумма = ОКР((СуммаРасчетная + ОбработаноСумма) * КоэффициентРаспределенияСумма - РаспределеноСумма, 2);
		
		НоваяСтрока.ГТД = СтрокаРНПТ.РНПТ;

		Если ОбщееКоличество > 0 И НоваяСтрока.Количество > 0 Тогда   
					
			СуммаНДС = ОКР((НоваяСтрока.Сумма + ОбработаноНДС) * КоэффициентРаспределения - РаспределеноНДС, 2);	
			
		Иначе
			СуммаНДС = 0;
			
		КонецЕсли;
		
		ОбработаноНДС 	= ОбработаноНДС + НоваяСтрока.Сумма;
		РаспределеноНДС = РаспределеноНДС + СуммаНДС;
		
		ОбработаноСумма = ОбработаноСумма + СуммаРасчетная; 
		РаспределеноСумма = РаспределеноСумма + НоваяСтрока.Сумма;  
		
		НоваяСтрока.СуммаНДС = СуммаНДС;
		НоваяСтрока.СуммаВсего = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС; 
				
	КонецЦикла;
	
КонецПроцедуры

Функция ОбстоятельстваФормированияСФ(Документ)
	
	ОбстоятельстваФормирования = "1";
	
	ЭтоСчетФактура = ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный")
		Или ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный");
	
	Если ЭтоСчетФактура Тогда
		
		ТипДокумента = ТипЗнч(Документ.ДокументОснование);
		
	Иначе
		
		ТипДокумента = ТипЗнч(Документ.Ссылка);
		
	КонецЕсли;
	
	Если ЕстьРеквизит(Документ, "ЭтоКомиссия") И Документ.ЭтоКомиссия Тогда
		
		Если ТипДокумента = Тип("ДокументСсылка.ВозвратПоставщику") Тогда
			
			ОбстоятельстваФормирования = "5";
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваров") Тогда
			
			ОбстоятельстваФормирования = "4";
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
			
			ОбстоятельстваФормирования = "4";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоСчетФактура И Документы.СчетФактураВыданный.ЭтоАвансовыйСчетФактура(Документ.Ссылка) Тогда
		
		ОбстоятельстваФормирования = "2";
		
	КонецЕсли;
	
	Возврат ОбстоятельстваФормирования;
	
КонецФункции

Процедура ЗаполнитьИнформациюОбОтгрузке(ДеревоДанных, ДанныеДляФормированияЭД, ЭтоФормат_5_02 = Ложь)
	
	Если НеНужноУказыватьИнформациюОбОтгрузке(ДанныеДляФормированияЭД) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Шапка = ДанныеДляФормированияЭД.Шапка;
	
	ПутьСведенияОГрузоотправителях = ?(ЭтоФормат_5_02, "СведенияОСчетеФактуре.СведенияОГрузоотправителях",
		"СведенияОГрузоотправителе");
	
	СведенияОГрузоотправителях = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(ДеревоДанных, ПутьСведенияОГрузоотправителях);
	СведенияОГрузоотправителях.Очистить();
	СведенияОГрузоотправителях.Колонки.Добавить("СведенияОбУчастнике");
		
	Если Шапка.Свойство("Грузоотправитель") И ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
		
		СведенияОГрузоотправителе =  Неопределено;
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Грузоотправитель, СведенияОГрузоотправителе);
		СведенияОГрузоотправителе.Вставить("ДатаКИ", Шапка.Дата);
		ДанныеГрузотправителя = ПодготовитьДанныеУчастникаУПД(СведенияОГрузоотправителе, "Факт",,, ЭтоФормат_5_02);
		СтрокаГрузоотправителя = СведенияОГрузоотправителях.Добавить();
		СтрокаГрузоотправителя.Грузоотправитель = ДанныеГрузотправителя;
		СтрокаГрузоотправителя.СведенияОбУчастнике = СведенияОГрузоотправителе;
		
	Иначе
		
		СведенияОГрузоотправителях.Добавить().ОнЖе = Истина;
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОГрузоотправителях,
		ПутьСведенияОГрузоотправителях);
	
	ПутьСведенияОГрузополучателях = ?(ЭтоФормат_5_02, "СведенияОСчетеФактуре.СведенияОГрузополучателях",
		"СведенияОГрузополучателе");
	
	СведенияОГрузополучателях = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(ДеревоДанных, ПутьСведенияОГрузополучателях);
	СведенияОГрузополучателях.Очистить();
	СведенияОГрузополучателях.Колонки.Добавить("СведенияОбУчастнике");
	
	СведенияОГрузополучателе = Неопределено;
	
	Если Шапка.Свойство("Грузополучатель") И ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
		
		
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Грузополучатель, СведенияОГрузополучателе);
		
	Иначе
		
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Покупатель, СведенияОГрузополучателе);
		
	КонецЕсли;
	
	СведенияОГрузополучателе.Вставить("ДатаКИ", Шапка.Дата);
	ДанныеГрузополучателя = ПодготовитьДанныеУчастникаУПД(СведенияОГрузополучателе, "Факт",,, ЭтоФормат_5_02);
	Если ЭтоФормат_5_02 Тогда
		НоваяСтрока = СведенияОГрузополучателях.Добавить();
		НоваяСтрока.Грузополучатель = ДанныеГрузополучателя;
	Иначе
		ЗаполнитьЗначенияСвойств(СведенияОГрузополучателях.Добавить(), ДанныеГрузополучателя);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОГрузополучателях,
		ПутьСведенияОГрузополучателях);
	
КонецПроцедуры

Функция НеНужноУказыватьИнформациюОбОтгрузке(ДанныеДляФормированияЭД)
	
	Если
		ТипЗнч(ДанныеДляФормированияЭД.Шапка.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		И Документы.СчетФактураВыданный.ЭтоАвансовыйСчетФактура(ДанныеДляФормированияЭД.Шапка.Ссылка)
	Тогда
		
		Возврат Истина;
		
	ИначеЕсли
		ЕстьРеквизит(ДанныеДляФормированияЭД.Шапка, "ЭтоКомиссия")
		И ДанныеДляФормированияЭД.Шапка.ЭтоКомиссия
	Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТолькоУслуги = Истина;
	
	Для Каждого Товар Из ДанныеДляФормированияЭД.Товары Цикл
		
		ТолькоУслуги = ТолькоУслуги И Товар.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
		
	КонецЦикла;
	
	Возврат ТолькоУслуги;
	
КонецФункции

#КонецОбласти

#Область Получение

Функция НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, СсылкаНаВладельца, СпособОбработки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполнения = Новый Структура("ЗаполнятьПоСтуктуре", Истина);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВходящимДокументом("Документа", ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияКонтрагентомИсточникТаблица(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОрганизациейИсточникТаблица(ДеревоДанных, ДанныеЗаполнения); 
	ДополнитьДанныеЗаполненияГрузотправителемИсточникТаблица(ДеревоДанных, ДанныеЗаполнения); 
	ДополнитьДанныеЗаполненияГрузополучателемИсточникТаблица(ДеревоДанных, ДанныеЗаполнения); 
	ДополнитьДанныеЗаполненияПодразделениемКомпании(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОснованиемДокументаОтгрузки(ДеревоДанных, ДанныеЗаполнения);
	
	Если СпособОбработки = "ПоступлениеАвтомобилей" Тогда
		
		Если ЭтоУПДОтКоммитента(ДеревоДанных) Тогда
			
			ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия);
			
		Иначе
			
			ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ПоступлениеАвтомобилей);
			
		КонецЕсли;
		
		ДополнитьДанныеЗаполненияАвтомобилями(ДеревоДанных, ДанныеЗаполнения);
		
		Возврат ЗаполнитьДокументПоступленияАвтомобилей(СсылкаНаВладельца, ДанныеЗаполнения);
		
	ИначеЕсли СпособОбработки = "ВозвратТоваровОтКлиента" Тогда
		
		ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения, "ВозвратОтПокупателя");
		
		Если ЭтоУПДОтКоммитента(ДеревоДанных) Тогда
			
			ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия);
			
		Иначе
			
			ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ВозвратТоваровОтПокупателя);
			
		КонецЕсли;
		
		Возврат ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеЗаполнения);
		
	ИначеЕсли СпособОбработки = "ПоступлениеДопРасходов" Тогда
		
		ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения);
		Возврат ЗаполнитьДокументПоступлениеДопРасходов(СсылкаНаВладельца, ДанныеЗаполнения);
		
	Иначе
		
		Если ДанныеЗаполнения.Исправление Тогда
			
			ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения);
			Возврат ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеЗаполнения);
			
		Иначе
			
			Если ЭтоУПДОтКоммитента(ДеревоДанных) Тогда
				
				ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ПоступлениеТоваровКомиссия);
				
			ИначеЕсли СпособОбработки = "УслугиСтороннихОрганизаций" Тогда 
				
				ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.УслугиСтороннихОрганизаций);
				
			ИначеЕсли СпособОбработки = "УслугиПоСубподряду"  Тогда
				
				ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.УслугиПоСубподряду);
			Иначе
				
				ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ПоступлениеТоваров);
				
			КонецЕсли;
			
			ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения);
			Возврат ЗаполнитьДокументПоступленияТоваров(СсылкаНаВладельца, ДанныеЗаполнения);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СсылкаНаВладельца, СпособОбработки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполнения = Новый Структура("ЗаполнятьПоСтуктуре", Истина);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВходящимДокументом("Документа", ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияКонтрагентомИсточникТаблица(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОрганизациейИсточникТаблица(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияГрузотправителемИсточникТаблица(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияГрузополучателемИсточникТаблица(ДеревоДанных, ДанныеЗаполнения); 
	ДополнитьДанныеЗаполненияПодразделениемКомпании(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВидомСчетаФактуры(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОснованиемСчетаФактуры(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения, "СчетФактураПолученный");
	
	Возврат ЗаполнитьДокументСчетФактурыПолученого(СсылкаНаВладельца, ДанныеЗаполнения);
	
КонецФункции

#Область ПодготовкаДанныхДокументовКЗагрузке

Процедура ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения, ПутьКодаВалюты = "ВалютаКод")
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ПутьКодаВалюты);
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Валюта, КодВалюты);
	ДанныеЗаполнения.Вставить("ВалютаДокумента", Валюта);
	
	Курс = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", Ложь);
	ДанныеЗаполнения.Вставить("Курс", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеЗаполнения.Вставить("Кратность", 1);
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияВходящимДокументом(ПостфиксПутиКДанным, ДеревоДанных, ДанныеЗаполнения, ПутьКДанным = "")
	
	НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных,
		ПутьКДанным + "Номер" + ПостфиксПутиКДанным
	);
	ДатаВходящегоДокумнета = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных,
		ПутьКДанным + "Дата" + ПостфиксПутиКДанным
	);
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Исправление", Ложь) Тогда
		
		НомерИсправления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "НомерИсправления", 1);
		ДанныеЗаполнения.Вставить("ВхДокНомер",
			СтрШаблон("%1 (испр. %2)", НомерВходящегоДокумента, НомерИсправления));
		
	Иначе
	
		ДанныеЗаполнения.Вставить("ВхДокНомер", НомерВходящегоДокумента);
		
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ВхДокДата",  ДатаВходящегоДокумнета);
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения, ПутьКДанным = "")
	
	ДанныеЗаполнения.Вставить("Исправление", Ложь);
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных,
		ПутьКДанным + "НомерИсправления"
	);
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		
		ДанныеЗаполнения.Исправление = Истина;
		ДанныеЗаполнения.Вставить("НомерИсправления", НомерИсправления);
		ДатаИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ПутьКДанным + "ДатаИсправления"
		);
		ДанныеЗаполнения.Вставить("ДатаИсправления", ДатаИсправления);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияИсходнымДокументом(ДеревоДанных, ДанныеЗаполнения)
	
	ДанныеЗаполнения.Вставить("Корректировочный", Ложь);
	ДанныеЗаполнения.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	
	ИсходныеДокументы = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ИсходныеДокументы");
	
	Если ЗначениеЗаполнено(ИсходныеДокументы) Тогда
		
		ДанныеЗаполнения.Вставить("Корректировочный", Истина);
		ДанныеЗаполнения.Вставить("НомерИсходногоДокумента", ИсходныеДокументы[0].НомерИсходногоДокумента);
		ДанныеЗаполнения.Вставить("ДатаИсходногоДокумента", ИсходныеДокументы[0].ДатаИсходногоДокумента);
		
		Если ЗначениеЗаполнено(ИсходныеДокументы[0].ИсправленияИсходногоДокумента) Тогда
			
			ДанныеЗаполнения.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
			ДанныеЗаполнения.Вставить(
				"НомерИсправленияИсходногоДокумента",
				ИсходныеДокументы[0].ИсправленияИсходногоДокумента[0].НомерИсправленияИсходногоДокумента
			);
			ДанныеЗаполнения.Вставить(
				"ДатаИсправленияИсходногоДокумента",
				ИсходныеДокументы[0].ИсправленияИсходногоДокумента[0].ДатаИсправленияИсходногоДокумента
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияКонтрагентомИсточникТаблица(
	ДеревоДанных, ДанныеЗаполнения, ЭтоФормат_5_02 = Ложь)
	
	Если ЭтоФормат_5_02 Тогда
		
		СведенияОПродавцах = ДеревоДанных.Строки.Найти(
			"СведенияОСчетеФактуре.СведенияОПродавцах", "ПолныйПуть",
			Истина);
		
	Иначе
		
		СведенияОПродавцах = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
		
	КонецЕсли;
	
	Если СведенияОПродавцах.Строки.Количество() > 1 Тогда
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.
			|Загрузка сводных накладных не поддерживается.'"), 
			ДанныеЗаполнения.ВхДокНомер,
			Формат(ДанныеЗаполнения.ВхДокДата, "ДЛФ=D")
		);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	СведенияОПродавце = СведенияОПродавцах.Строки[0];
	
	ИНН = "";
	КПП = "";
	
	Если ЭтоФормат_5_02 Тогда
		
		ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОПродавце,
			"СведенияОСчетеФактуре.СведенияОПродавцах.НомерСтроки.Продавец.ТипУчастника"
		);
		
	Иначе
		
		ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОПродавце,
			"СведенияОПродавце.НомерСтроки.ТипУчастника"
		);
		
	КонецЕсли;
	
	Если ТипУчастника = "ЮЛ" Тогда
		
		Если ЭтоФормат_5_02 Тогда
			
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПродавце,
				"СведенияОСчетеФактуре.СведенияОПродавцах.НомерСтроки.Продавец.ТипУчастника.ЮЛ.ИНН"
			);
			КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПродавце,
				"СведенияОСчетеФактуре.СведенияОПродавцах.НомерСтроки.Продавец.ТипУчастника.ЮЛ.КПП"
			);
			
		Иначе
			
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПродавце,
				"СведенияОПродавце.НомерСтроки.ТипУчастника.ЮЛ.ИНН"
			);
			КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПродавце,
				"СведенияОПродавце.НомерСтроки.ТипУчастника.ЮЛ.КПП"
			);
			
		КонецЕсли;
		
	ИначеЕсли ТипУчастника = "ИП" Тогда
		
		Если ЭтоФормат_5_02 Тогда
			
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПродавце,
				"СведенияОСчетеФактуре.СведенияОПродавцах.НомерСтроки.Продавец.ТипУчастника.ИП.ИНН"
			);
			
		Иначе
			
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПродавце,
				"СведенияОПродавце.НомерСтроки.ТипУчастника.ИП.ИНН"
			);
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

	ДанныеЗаполнения.Вставить("Контрагент", ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП));
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияКонтрагентомИсточникГруппа(ДеревоДанных,
                                                              ДанныеЗаполнения,
                                                              Префикс = "СведенияОПродавце")
	
	ИНН = ""; КПП = "";
	ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".ТипУчастника");
	
	Если ТипУчастника = "ЮЛ" Тогда
		
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ТипУчастника = "ИП" Тогда
		
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".ТипУчастника.ИП.ИНН");
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

	ДанныеЗаполнения.Вставить("Контрагент", ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП));
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияГрузотправителемИсточникТаблица(
	ДеревоДанных, ДанныеЗаполнения, ЭтоФормат_5_02 = Ложь)
	
	Если ЭтоФормат_5_02 Тогда
		
		ПутьКДанным = "СведенияОСчетеФактуре.СведенияОГрузоотправителях";
		СведенияОГрузоотправителе = ДеревоДанных.Строки.Найти(ПутьКДанным, "ПолныйПуть", Истина);
		
	Иначе
		
		ПутьКДанным = "СведенияОГрузоотправителе";
		СведенияОГрузоотправителе = ДеревоДанных.Строки.Найти(ПутьКДанным, "ПолныйПуть");
		
	КонецЕсли;
	
	Если СведенияОГрузоотправителе.Строки.Количество() > 1 Тогда
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.
			|Загрузка сводных накладных не поддерживается.'"), 
			ДанныеЗаполнения.ВхДокНомер,
			Формат(ДанныеЗаполнения.ВхДокДата, "ДЛФ=D")
		);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	СведенияОГрузоотправителе = СведенияОГрузоотправителе.Строки[0];
	ГрузоотправительПродавец = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		СведенияОГрузоотправителе,
		ПутьКДанным + ".НомерСтроки.ОнЖе"
	);
	Если ГрузоотправительПродавец = Неопределено Тогда
		
		ИНН = "";
		КПП = "";
		
		ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		СведенияОГрузоотправителе,
		ПутьКДанным + ".НомерСтроки.Грузоотправитель.ТипУчастника"
		);
		
		Если ТипУчастника = "ЮЛ" Тогда
			
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОГрузоотправителе,
				ПутьКДанным + ".НомерСтроки.Грузоотправитель.ТипУчастника.ЮЛ.ИНН"
			);
			КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОГрузоотправителе,
				ПутьКДанным + ".НомерСтроки.Грузоотправитель.ТипУчастника.ЮЛ.КПП"
			);
			
		ИначеЕсли ТипУчастника = "ИП" Тогда
			
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОГрузоотправителе,
				ПутьКДанным + ".НомерСтроки.Грузоотправитель.ТипУчастника.ИП.ИНН"
			);
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("Грузоотправитель", ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП));
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияГрузополучателемИсточникТаблица(
	ДеревоДанных, ДанныеЗаполнения, ЭтоФормат_5_02 = Ложь)
	
	Если ЭтоФормат_5_02 Тогда
		
		ПутьКДанным = "СведенияОСчетеФактуре.СведенияОГрузополучателях";
		ПутьКДаннымТипаУчастника = ПутьКДанным + ".НомерСтроки.Грузополучатель.ТипУчастника";
		СведенияОГрузополучателе = ДеревоДанных.Строки.Найти(ПутьКДанным, "ПолныйПуть", Истина);
		
	Иначе
		
		ПутьКДанным = "СведенияОГрузополучателе";
		ПутьКДаннымТипаУчастника = ПутьКДанным + ".НомерСтроки.ТипУчастника";
		СведенияОГрузополучателе = ДеревоДанных.Строки.Найти(ПутьКДанным, "ПолныйПуть");
		
	КонецЕсли;
	
	Если СведенияОГрузополучателе.Признак = "Таблица" И СведенияОГрузополучателе.Строки.Количество() > 1 Тогда
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.
			|Загрузка сводных накладных не поддерживается.'"), 
			ДанныеЗаполнения.ВхДокНомер,
			Формат(ДанныеЗаполнения.ВхДокДата, "ДЛФ=D")
		);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	СведенияОГрузополучателе = СведенияОГрузополучателе.Строки[0]; 
	
	ИНН = "";
	КПП = "";
	
	ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		СведенияОГрузополучателе,
		ПутьКДаннымТипаУчастника
		);
		
	Если ТипУчастника = "ЮЛ" Тогда
			
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОГрузополучателе,
				ПутьКДаннымТипаУчастника + ".ЮЛ.ИНН"
			);
			КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОГрузополучателе,
				ПутьКДаннымТипаУчастника + ".ЮЛ.КПП"
			);
			
		ИначеЕсли ТипУчастника = "ИП" Тогда
			
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОГрузополучателе,
				ПутьКДаннымТипаУчастника + ".ИП.ИНН"
			);
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		
		Возврат;
		
	КонецЕсли;  
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Организация"); 
	Контрагент  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Контрагент");
	Грузополучатель = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) И Организация.ИНН = ИНН Тогда
		 Грузополучатель = НайтиПодразделениеОрганизации(Организация, КПП, Контрагент);		
	КонецЕсли;
	
	Если Грузополучатель = Неопределено Тогда 
		 Грузополучатель =  НайтиКонтрагентаПоИННКПП(ИНН, КПП);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Грузополучатель", Грузополучатель);
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияОрганизациейИсточникТаблица(
		ДеревоДанных, ДанныеЗаполнения, ЭтоФормат_5_02 = Ложь)
	
	Если ЭтоФормат_5_02 Тогда
		
		СведенияОПокупателях = ДеревоДанных.Строки.Найти(
			"СведенияОСчетеФактуре.СведенияОПокупателях",
			"ПолныйПуть",
			Истина);
		
	Иначе
		
		СведенияОПокупателях = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
		
	КонецЕсли;
	
	Если СведенияОПокупателях.Признак = "Таблица" И СведенияОПокупателях.Строки.Количество() > 1 Тогда
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.
			|Загрузка сводных накладных не поддерживается.'"), 
			ДанныеЗаполнения.ВхДокНомер,
			Формат(ДанныеЗаполнения.ВхДокДата, "ДЛФ=D")
		);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	СведенияОПокупателе = СведенияОПокупателях.Строки[0];
	ИНН = ИННОрганизацииВДереве(СведенияОПокупателе, ЭтоФормат_5_02);
	КПП = КППОрганизацииВДереве(СведенияОПокупателе, ЭтоФормат_5_02);
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Организация", ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП));
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияОрганизациейИсточникГруппа(ДеревоДанных, ДанныеЗаполнения, Префикс = "СведенияОПокупателе")
	
	ИНН = ""; КПП = "";
	ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".ТипУчастника");
	
	Если ТипУчастника = "ЮЛ" Тогда
		
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ТипУчастника = "ИП" Тогда
		
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".ТипУчастника.ИП.ИНН");
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Организация", ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП));
	
КонецПроцедуры

Функция ИННОрганизацииВДереве(СведенияОПокупателе, ЭтоФормат_5_02)
	
	Если ЭтоФормат_5_02 Тогда
		
		ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОПокупателе,
			"СведенияОСчетеФактуре.СведенияОПокупателях.НомерСтроки.Покупатель.ТипУчастника"
		);
	
	Иначе
		
		ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОПокупателе,
			"СведенияОПокупателе.НомерСтроки.ТипУчастника"
		);
		
	КонецЕсли;
	
	Если ТипУчастника = "ЮЛ" Тогда
		
		Если ЭтоФормат_5_02 Тогда
			
			Возврат ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПокупателе,
				"СведенияОСчетеФактуре.СведенияОПокупателях.НомерСтроки.Покупатель.ТипУчастника.ЮЛ.ИНН"
			);
		
		Иначе
			
			Возврат ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПокупателе,
				"СведенияОПокупателе.НомерСтроки.ТипУчастника.ЮЛ.ИНН"
			);
			
		КонецЕсли;
		
	ИначеЕсли ТипУчастника = "ИП" Тогда
		
		Если ЭтоФормат_5_02 Тогда
			
			Возврат ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПокупателе,
				"СведенияОСчетеФактуре.СведенияОПокупателях.НомерСтроки.Покупатель.ТипУчастника.ИП.ИНН"
			);
		
		Иначе
			
			Возврат ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПокупателе,
				"СведенияОПокупателе.НомерСтроки.ТипУчастника.ИП.ИНН"
			);
			
		КонецЕсли;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция КППОрганизацииВДереве(СведенияОПокупателе, ЭтоФормат_5_02)
	
	Если ЭтоФормат_5_02 Тогда
		
		ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОПокупателе,
			"СведенияОСчетеФактуре.СведенияОПокупателях.НомерСтроки.Покупатель.ТипУчастника"
		);
	
	Иначе
		
		ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОПокупателе,
			"СведенияОПокупателе.НомерСтроки.ТипУчастника"
		);
		
	КонецЕсли;
	
	Если ТипУчастника = "ЮЛ" Тогда
		
		Если ЭтоФормат_5_02 Тогда
			
			Возврат ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПокупателе,
				"СведенияОСчетеФактуре.СведенияОПокупателях.НомерСтроки.Покупатель.ТипУчастника.ЮЛ.КПП"
			);
		
		Иначе
			
			Возврат ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОПокупателе,
				"СведенияОПокупателе.НомерСтроки.ТипУчастника.ЮЛ.КПП"
			);
			
		КонецЕсли;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияПодразделениемКомпании(ДеревоДанных, ДанныеЗаполнения, ЭтоФормат_5_02 = Ложь)
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Организация");
	Контрагент  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Контрагент");
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоФормат_5_02 Тогда
		
		СведенияОПокупателях = ДеревоДанных.Строки.Найти(
			"СведенияОСчетеФактуре.СведенияОПокупателях",
			"ПолныйПуть",
			Истина);
		
	Иначе
		
		СведенияОПокупателях = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
		
	КонецЕсли;
	
	КПП = КППОрганизацииВДереве(СведенияОПокупателях.Строки[0], ЭтоФормат_5_02);
	ДанныеЗаполнения.Вставить("ПодразделениеКомпании", НайтиПодразделениеОрганизации(Организация, КПП, Контрагент));
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияПодразделениемКомпанииИсточникГруппа(ДеревоДанных,
                                                                        ДанныеЗаполнения,
                                                                        Префикс = "СведенияОПокупателе")
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Организация");
	Контрагент  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Контрагент");
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КПП = "";
	
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".ТипУчастника") = "ЮЛ" Тогда
		
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".ТипУчастника.ЮЛ.КПП");
		
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ПодразделениеКомпании", НайтиПодразделениеОрганизации(Организация, КПП, Контрагент));
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения)
	
	Основание = Неопределено;
	ДанныеЗаполнения.Свойство("Основание", Основание);
	
	Если ЗначениеЗаполнено(Основание) Тогда
		
		ДоговорВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ДоговорВзаиморасчетов");
		
		Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
		
			ДанныеЗаполнения.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияОснованиемДокументаОтгрузки(ДеревоДанных, ДанныеЗаполнения)
		
	ДокументыОснованияДокументаОтгрузки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ДокументыОснованияДокументаОтгрузки"
	);
	
	Если ЗначениеЗаполнено(ДокументыОснованияДокументаОтгрузки) Тогда
		
		Если ТипЗнч(ДокументыОснованияДокументаОтгрузки) = Тип("Массив") Тогда
			
			ДокументОснованияДокументаОтгрузки = ДокументыОснованияДокументаОтгрузки[0];
			
		Иначе
			
			ДокументОснованияДокументаОтгрузки = ДокументыОснованияДокументаОтгрузки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснованияДокументаОтгрузки) Тогда
	
		ДанныеЗаполнения.Вставить("Основание", ДокументОснованияДокументаОтгрузки);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияОснованиемСчетаФактуры(ДеревоДанных, ДанныеЗаполнения)
	
	ОснованиеСчетаФактуры = Неопределено;
	ДокументОснованиеСчетаФактуры = Неопределено;
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ДокументыОснованияСчетаФактуры"
	);
	
	СсылкаНаВладельца = Неопределено;
	ДанныеЗаполнения.Свойство("СсылкаНаВладельца", СсылкаНаВладельца);
	
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		
		Если ТипЗнч(ДокументыОснованияСчетаФактуры) <> Тип("Массив") Тогда
			
			ОснованиеСчетаФактуры = ДокументыОснованияСчетаФактуры;
			
		Иначе
			
			Для Каждого ДокументОснование Из ДокументыОснованияСчетаФактуры Цикл
				
				Если ДокументОснование = СсылкаНаВладельца Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если
					ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный")
					Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров")
					Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
					Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеАвтомобилей")
					Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей")
					Тогда
					
					ОснованиеСчетаФактуры = ДокументОснование;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Попытка
			
			ИсходныеДокументы = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных,
				"ИсходныеДокументы");
			
		Исключение
			
			ИсходныеДокументы = Неопределено;
			
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ИсходныеДокументы) Тогда
			
			ОснованиеСчетаФактуры = СчетФактураПоНомеруИДате(
				ИсходныеДокументы[0].НомерИсходногоДокумента,
				ИсходныеДокументы[0].ДатаИсходногоДокумента
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
		
		Если ТипЗнч(ОснованиеСчетаФактуры) = Тип("ДокументСсылка.СчетФактураПолученный")Тогда
			
			ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыПолученного(ОснованиеСчетаФактуры);
			
		Иначе
			
			ДокументОснованиеСчетаФактуры = ОснованиеСчетаФактуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоКомплект = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция") = "КСЧФДИС"
		Или ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция") = "СЧФДОП";
	
	Если (ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) И ДокументОснованиеСчетаФактуры.Проведен) Или ЭтоКомплект Тогда
		
		ДанныеЗаполнения.Вставить("Основание", ДокументОснованиеСчетаФактуры);
		
	Иначе
		
		ШаблонСообщения = НСтр("ru='Документ-основание %1 не проведен. Документ будет создан на основании данных электронного документа.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОснованиеСчетаФактуры);
		ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияВидомСчетаФактуры(ДеревоДанных, ДанныеЗаполнения)
	
	ДанныеЗаполнения.Вставить(
		"ВидСчетаФактуры",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры")
	);
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияТоварами(
	ДеревоДанных, ДанныеЗаполнения, ТипДокумента = "ПоступлениеТоваров", ЭтоФормат_5_02 = Ложь)
	
	Товары = НоваяТаблицаТоваров(ТипДокумента);
	
	ДокументХранитКодыМаркировки = ДокументХранитКодыМаркировки(ТипДокумента);
	
	Если ДокументХранитКодыМаркировки Тогда
		
		КодыМаркировки = НоваяТаблицаКодовМаркировки();
		
	КонецЕсли;
	
	Если Товары.Колонки.Найти("СведенияОПрослеживаемости") = Неопределено Тогда
	
		Товары.Колонки.Добавить("СведенияОПрослеживаемости");
	
	КонецЕсли;
	
	Если ЭтоФормат_5_02 Тогда
		
		СведенияОТоварах = ДеревоДанных.Строки.Найти(
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях", "ПолныйПуть", Истина);
		
	Иначе
		
		СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть", Истина);
		
	КонецЕсли;
	
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьСлужебныеРеквизитыПозицииТовара(НоваяСтрока);
		ЗаполнитьТоварыСопоставленнымиДанными(
			СведенияОТоваре,
			НоваяСтрока,
			ДанныеЗаполнения.Свойство("ВидСчетаФактуры") И ДанныеЗаполнения.ВидСчетаФактуры = "Авансовый"
		);
		ЗаполнитьТоварыСуммами(СведенияОТоваре, НоваяСтрока, ЭтоФормат_5_02);
		
		Если ДокументХранитКодыМаркировки Тогда
			
			ДополнитьКодыМаркировки(КодыМаркировки, НоваяСтрока, СведенияОТоваре, ЭтоФормат_5_02);
			
		КонецЕсли;
		
		ДополнитьСведениямиОТаможеннойДекларации(СведенияОТоваре, НоваяСтрока, ЭтоФормат_5_02);
		ДополнитьСведениямиОПрослеживаемости(СведенияОТоваре, НоваяСтрока, ЭтоФормат_5_02); 
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("Товары", Товары);
	ДанныеЗаполнения.Вставить("КодыМаркировки", КодыМаркировки);
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияАвтомобилями(ДеревоДанных, ДанныеЗаполнения, ЭтоФормат_5_02 = Ложь)
	
	Автомобили = НоваяТаблицаАвтомобилей();
	
	Если ЭтоФормат_5_02 Тогда
		
		ПолныйПуть = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях";
		
	Иначе
		
		ПолныйПуть = "СведенияОТоварах";
		
	КонецЕсли;
	
	СведенияОбАвтомобилях = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	
	Для Каждого СведенияОбАвтомобиле Из СведенияОбАвтомобилях.Строки Цикл
		
		ДанныеАвтомобиля = ЗаполнитьАвтомобилиСопоставленнымиДанными(СведенияОбАвтомобиле);
		Если ДанныеАвтомобиля = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Автомобили.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАвтомобиля);
		ЗаполнитьАвтомобилиСуммами(СведенияОбАвтомобиле, НоваяСтрока, ЭтоФормат_5_02);
		ДополнитьСведениямиОТаможеннойДекларацииАвтомобиль(СведенияОбАвтомобиле, НоваяСтрока, ЭтоФормат_5_02);
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("Автомобили", Автомобили);
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияТоварамиУКД(ДеревоДанных, ДанныеЗаполнения, ТипДокумента)
	
	Товары = НоваяТаблицаТоваров(ТипДокумента);
	
	Если Товары.Колонки.Найти("СведенияОПрослеживаемости") = Неопределено Тогда
		
		Товары.Колонки.Добавить("СведенияОПрослеживаемости");
		
	КонецЕсли;
	
	Если Товары.Колонки.Найти("СведенияОИзмененииКоличества") = Неопределено Тогда
		
		Товары.Колонки.Добавить("СведенияОИзмененииКоличества");
		
	КонецЕсли;
	
	ДокументХранитКодыМаркировки = ДокументХранитКодыМаркировки(ТипДокумента);
	
	Если ДокументХранитКодыМаркировки Тогда
		
		КодыМаркировки = НоваяТаблицаКодовМаркировки();
		
	КонецЕсли;
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьСлужебныеРеквизитыПозицииТовара(НоваяСтрока);
		ЗаполнитьТоварыСопоставленнымиДанными(СведенияОТоваре, НоваяСтрока);
		ЗаполнитьТоварыСуммами(СведенияОТоваре, НоваяСтрока);
		ДополнитьСведениямиОТаможеннойДекларацииУКД(СведенияОТоваре, НоваяСтрока);
		ДополнитьСведениямиОПрослеживаемостиУКД(СведенияОТоваре, НоваяСтрока);
		
		//Если НЕ ЗначениеЗаполнено(НоваяСтрока.СведенияОПрослеживаемости) Тогда
			
			ДобавитьСведенияОИзмененииКоличества(СведенияОТоваре, НоваяСтрока);
			
		//КонецЕсли;
		
		Если ДокументХранитКодыМаркировки И ТипЗнч(НоваяСтрока.Номенклатура) <> Тип("СправочникСсылка.Автомобили") Тогда
			
			ДополнитьКодыМаркировкиУКД(КодыМаркировки, НоваяСтрока, СведенияОТоваре);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("Товары", Товары);
	ДанныеЗаполнения.Вставить("КодыМаркировки", КодыМаркировки);
	
КонецПроцедуры  

Процедура ДополнитьДанныеЗаполненияАвтомобилямиУКД(ДеревоДанных, ДанныеЗаполнения)
	
	Автомобили = НоваяТаблицаАвтомобилейУКД();
		
	СведенияОбАвтомобилях = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОбАвтомобиле Из СведенияОбАвтомобилях.Строки Цикл
		
		ДанныеАвтомобиля = ЗаполнитьАвтомобилиСопоставленнымиДанными(СведенияОбАвтомобиле);
		Если ДанныеАвтомобиля = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Автомобили.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАвтомобиля);
		ЗаполнитьАвтомобилиСуммамиУКД(СведенияОбАвтомобиле, НоваяСтрока);
		ДополнитьСведениямиОТаможеннойДекларацииАвтомобиль(СведенияОбАвтомобиле, НоваяСтрока);						
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("Автомобили", Автомобили);
	
КонецПроцедуры  

Функция НоваяТаблицаТоваров(ТипДокумента)
	
	Возврат Документы[ТипДокумента].ПустаяСсылка().Товары.Выгрузить();
	
КонецФункции

Функция НоваяТаблицаАвтомобилей()
	
	Возврат Документы.ПоступлениеАвтомобилей.ПустаяСсылка().Автомобили.Выгрузить();
	
КонецФункции

Функция НоваяТаблицаАвтомобилейУКД()
	
	Возврат Документы.КорректировкаПоступленияАвтомобилей.ПустаяСсылка().Автомобили.Выгрузить();
	
КонецФункции

Функция НоваяТаблицаКодовМаркировки()
	
	Возврат Документы.ПоступлениеТоваров.ПустаяСсылка().КодыМаркировки.ВыгрузитьКолонки();
	
КонецФункции

Функция ДокументХранитКодыМаркировки(ТипДокумента)
	
	Возврат ЕстьРеквизит(Документы[ТипДокумента],, "КодыМаркировки");
	
КонецФункции

Процедура ЗаполнитьСлужебныеРеквизитыПозицииТовара(ПозицияТовара)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияТовара, "ИдентификаторТовара") Тогда
	
		ПозицияТовара.ИдентификаторТовара = Новый УникальныйИдентификатор();
		
	КонецЕсли;
		

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияТовара, "НеПересчитыватьСтроку") Тогда
	
		ПозицияТовара.НеПересчитыватьСтроку = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварыСопоставленнымиДанными(СведенияОТоваре, ПозицияТовара, ЭтоАвансовыйСчетФактура = Ложь)
	
	ПутьКДанным = "СведенияОТоварах";
	Сопоставление = СведенияОТоваре.Строки.Найти(
		ПутьКДанным + ".НомерСтроки.Сопоставление",
		"ПолныйПуть",
		Истина
	);
	
	Если Сопоставление = Неопределено Тогда
		
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях";
		Сопоставление = СведенияОТоваре.Строки.Найти(
			ПутьКДанным + ".НомерСтроки.Сопоставление",
			"ПолныйПуть",
			Истина
		);
		
	КонецЕсли;
	
	Если Сопоставление <> Неопределено Тогда
		
		Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			ПутьКДанным + ".НомерСтроки.Сопоставление.НоменклатураИБ");
			
		Если ЭтоАвансовыйСчетФактура И Не ЗначениеЗаполнено(Номенклатура) Тогда
			
			Номенклатура = Справочники.Номенклатура.Предоплата;
			
		КонецЕсли;
	
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			ПозицияТовара.Номенклатура = Номенклатура; 
						
		КонецЕсли;
		
		Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			ПутьКДанным + ".НомерСтроки.Сопоставление.ХарактеристикаИБ");
	
		Если ЗначениеЗаполнено(Характеристика) Тогда
			
			ПозицияТовара.ХарактеристикаНоменклатуры = Характеристика;
			
		КонецЕсли;
		
		Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			ПутьКДанным + ".НомерСтроки.Сопоставление.УпаковкаИБ");
	
		Если ЗначениеЗаполнено(Упаковка) И ТипЗнч(Упаковка) <> Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			// Заполнение Единицы измерения с типом "СправочникСсылка.ЕдиницаИзмерения".
			КодЕдиницыИзмерения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				ПутьКДанным + ".НомерСтроки.Сопоставление.ЕдиницаИзмеренияКод"); 
			
			Если ТипЗнч(ПозицияТовара.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения")
				И ЗначениеЗаполнено(Номенклатура)
				И ЗначениеЗаполнено(КодЕдиницыИзмерения) Тогда
			
				ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры");
				
				РеквизитыНоменклатуры = Новый Структура("Номенклатура, ТипНоменклатуры", Номенклатура, ТипНоменклатуры); 
				
				ЕдиницаИзмерения = Неопределено;
	
				ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
					"ЕдиницыИзмерения",
					ЕдиницаИзмерения,
					КодЕдиницыИзмерения,
					РеквизитыНоменклатуры
				);
					
				ПозицияТовара.ЕдиницаИзмерения = ЕдиницаИзмерения; 
				
			Иначе
				
				ПозицияТовара.ЕдиницаИзмерения = Упаковка;
				
			КонецЕсли;
			
			Если ТипЗнч(Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				
				ПозицияТовара.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
				
			Иначе
				
				ПозицияТовара.Коэффициент = 1;
				
			КонецЕсли;   
		ИначеЕсли  НЕ ЗначениеЗаполнено(Упаковка) И ЗначениеЗаполнено(Номенклатура) Тогда 
			
			Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				
				Упаковка = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт", Истина);
				
			Иначе
				
				Упаковка =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ОсновнаяЕдиницаИзмерения");
				
			КонецЕсли;
			ПозицияТовара.ЕдиницаИзмерения  = Упаковка;
			
			Если ТипЗнч(Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				
				ПозицияТовара.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
				
			Иначе
				
				ПозицияТовара.Коэффициент = 1;
				
			КонецЕсли;

			
		Иначе
			
			ПозицияТовара.ЕдиницаИзмерения = Упаковка;
			
			Если ЗначениеЗаполнено(Упаковка) Тогда
				
				ПозицияТовара.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗаполнитьАвтомобилиСопоставленнымиДанными(СведенияОТоваре)
	
	ПутьКДанным = "СведенияОТоварах";
	Сопоставление = СведенияОТоваре.Строки.Найти(
		ПутьКДанным + ".НомерСтроки.Сопоставление",
		"ПолныйПуть",
		Истина
	);
	
	Если Сопоставление = Неопределено Тогда
		
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях";
		Сопоставление = СведенияОТоваре.Строки.Найти(
			ПутьКДанным + ".НомерСтроки.Сопоставление",
			"ПолныйПуть",
			Истина
		);
		
	КонецЕсли;
	
	Если Сопоставление <> Неопределено Тогда
		
		Автомобиль = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			ПутьКДанным + ".НомерСтроки.Сопоставление.НоменклатураИБ");
	
		Если ЗначениеЗаполнено(Автомобиль)
			И ТипЗнч(Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
			
			СтруктураДанных = Новый Структура("Автомобиль, VIN", Автомобиль, Автомобиль.VIN);
			
			Возврат СтруктураДанных;
			
		КонецЕсли;
						
	КонецЕсли;	   
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьТоварыСуммами(СведенияОТоваре, ПозицияТовара, ЭтоФормат_5_02 = Ложь)
	
	Если ЭтоФормат_5_02 Тогда
		
		ПозицияТовара.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Количество");
		ПозицияТовара.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Цена");
		ПозицияТовара.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СтоимостьБезНалога");	
		ПозицияТовара.СуммаВсего = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СтоимостьСНалогом");	
		ПозицияТовара.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.НалоговаяСтавка");	
		ПозицияТовара.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СуммаНалога");
		
	Иначе
		
		ПозицияТовара.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Количество");
		ПозицияТовара.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		ПозицияТовара.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");	
		ПозицияТовара.СуммаВсего = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");	
		ПозицияТовара.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");	
		ПозицияТовара.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СуммаНалога");
		
	КонецЕсли;
	
	Если ПозицияТовара.Количество = 0 Тогда
		
		ПозицияТовара.Количество = 1;
		
	КонецЕсли;
	
	Если ПозицияТовара.Цена = 0 Тогда
		
		ПозицияТовара.Цена = ПозицияТовара.Сумма;
		
	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияТовара, "КоличествоБазовое") Тогда
	
		ПозицияТовара.КоличествоБазовое = ПозицияТовара.Количество * ПозицияТовара.Коэффициент;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияТовара, "КоличествоПоНакладной") Тогда
	
		ПозицияТовара.КоличествоПоНакладной = ПозицияТовара.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАвтомобилиСуммами(СведенияОТоваре, ПозицияТовара, ЭтоФормат_5_02 = Ложь)
	
	Если ЭтоФормат_5_02 Тогда
		
		ПозицияТовара.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Количество");
		ПозицияТовара.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Цена");
		ПозицияТовара.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СтоимостьБезНалога");	
		ПозицияТовара.СуммаВсего = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СтоимостьСНалогом");	
		ПозицияТовара.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.НалоговаяСтавка");	
		ПозицияТовара.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СуммаНалога");
		
	Иначе
		
		ПозицияТовара.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Количество");
		ПозицияТовара.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		ПозицияТовара.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");	
		ПозицияТовара.СуммаВсего = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");	
		ПозицияТовара.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");	
		ПозицияТовара.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СуммаНалога");
		
	КонецЕсли;
	
	Если ПозицияТовара.Количество = 0 Тогда
		
		ПозицияТовара.Количество = 1;
		
	КонецЕсли;
	
	Если ПозицияТовара.Цена = 0 Тогда
		
		ПозицияТовара.Цена = ПозицияТовара.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАвтомобилиСуммамиУКД(СведенияОТоваре, ПозицияТовара)
	
	ПозицияТовара.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"СведенияОТоварах.НомерСтроки.Количество");
	ПозицияТовара.КоличествоПоДокументуПоступления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
	
	ПозицияТовара.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
	
	ПозицияТовара.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
	ПозицияТовара.СуммаПоДокументуПоступления =  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,		
		"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки");
	
	ПозицияТовара.СуммаВсего = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
	ПозицияТовара.СуммаВсегоДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомДоКорректировки");
	ПозицияТовара.СуммаВсегоПоДокументуПоступления = ПозицияТовара.СуммаВсегоДоКорректировки;
	
	ПозицияТовара.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
	ПозицияТовара.СтавкаНДСПоДокументуПоступления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"СведенияОТоварах.НомерСтроки.НалоговаяСтавкаДоКорректировки");
	
	ПозицияТовара.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"СведенияОТоварах.НомерСтроки.СуммаНалога");
	ПозицияТовара.СуммаНДСДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");	
	ПозицияТовара.СуммаНДСПоДокументуПоступления = ПозицияТовара.СуммаНДСДоКорректировки;
	
	Если ПозицияТовара.Количество = 0 Тогда
		
		ПозицияТовара.Количество = 1;
		
	КонецЕсли;
	
	Если ПозицияТовара.Цена = 0 Тогда
		
		ПозицияТовара.Цена = ПозицияТовара.Сумма;
		
	КонецЕсли;
	
	ПозицияТовара.СуммаРазница      = ПозицияТовара.Сумма      - ПозицияТовара.СуммаПоДокументуПоступления ;
	ПозицияТовара.СуммаНДСРазница   = ПозицияТовара.СуммаНДС   - ПозицияТовара.СуммаНДСПоДокументуПоступления;
	ПозицияТовара.СуммаВсегоРазница = ПозицияТовара.СуммаВсего - ПозицияТовара.СуммаВсегоПоДокументуПоступления;
	ПозицияТовара.КоличествоРазница = ПозицияТовара.Количество - ПозицияТовара.КоличествоПоДокументуПоступления;

КонецПроцедуры

Процедура ДополнитьКодыМаркировки(КодыМаркировки, ПозицияТовара, СведенияОТоваре, ЭтоФормат_5_02 = Ложь)
	
	СведенияОМаркировке = СведенияОМаркировкеИзСтрокиТоваровУПД(СведенияОТоваре, ЭтоФормат_5_02);
	
	Для Каждого СведениеОМаркировке Из СведенияОМаркировке Цикл
		
		НоваяСтрока = КодыМаркировки.Добавить();
		НоваяСтрока.ИдентификаторТовара = ПозицияТовара.ИдентификаторТовара;
		НоваяСтрока.КодМаркировки       = СведениеОМаркировке;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОМаркировкеИзСтрокиТоваровУПД(СведенияОТоваре, ЭтоФормат_5_02 = Ложь)
	
	Результат = Новый Массив;
	
	Если ЭтоФормат_5_02 Тогда
		
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке";
		СведенияОМаркировке = СведенияОТоваре.Строки.Найти(ПутьКДанным, "ПолныйПуть", Истина);
		ПутьКИЗ = ПутьКДанным + ".НомерСтроки.Идентификатор.КонтрольныеЗнаки";
		ПутьУпаковки = ПутьКДанным + ".НомерСтроки.Идентификатор.ИдентификаторыУпаковок";
		
		Если СведенияОМаркировке <> Неопределено И ЗначениеЗаполнено(СведенияОМаркировке.Значение) Тогда
			
			Для Каждого Маркировка Из СведенияОМаркировке.Строки Цикл
				
				КонтрольныеЗнаки = Маркировка.Строки.Найти(ПутьКИЗ, "ПолныйПуть", Истина);
				Если КонтрольныеЗнаки <> Неопределено И ЗначениеЗаполнено(КонтрольныеЗнаки.Значение) Тогда
					
					Для Каждого КонтрольныйЗнак Из КонтрольныеЗнаки.Строки Цикл
						
						Результат.Добавить(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
							КонтрольныйЗнак, ПутьКИЗ + ".НомерСтроки.КонтрольныйЗнак"));
						
					КонецЦикла;
					
				КонецЕсли;
					
				ИдентификаторыУпаковок = Маркировка.Строки.Найти(ПутьУпаковки, "ПолныйПуть", Истина);
				Если ИдентификаторыУпаковок <> Неопределено И ЗначениеЗаполнено(ИдентификаторыУпаковок.Значение) Тогда
					
					Для Каждого ИдентификаторУпаковки Из ИдентификаторыУпаковок.Строки Цикл
						
						Результат.Добавить(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
							ИдентификаторУпаковки, ПутьУпаковки + ".НомерСтроки.ИдентификаторУпаковки"));
						
					КонецЦикла;
					
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		
		КонтрольныеИдентификационныеЗнаки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки", "ПолныйПуть", Истина);
		
		Для Каждого СтрокаКодаУпаковки Из КонтрольныеИдентификационныеЗнаки.Строки Цикл
			
			ШтрихкодУпаковки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки.НомерСтроки.Код");
			
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				
				Результат.Добавить(ШтрихкодУпаковки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИндивидуальныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки", "ПолныйПуть", Истина);
		
		Для Каждого СтрокаКодаУпаковки Из ИндивидуальныеУпаковки.Строки Цикл
			
			ШтрихкодУпаковки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки.НомерСтроки.Код");
			
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				
				Результат.Добавить(ШтрихкодУпаковки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТранспортныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки", "ПолныйПуть", Истина);
		
		Для Каждого СтрокаКодаУпаковки Из ТранспортныеУпаковки.Строки Цикл
			
			ШтрихкодУпаковки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки.НомерСтроки.Код");
			
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				
				Результат.Добавить(ШтрихкодУпаковки);
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьКодыМаркировкиУКД(КодыМаркировки, ПозицияТовара, СведенияОТоваре)
	
	СведенияОМаркировке = СведенияОМаркировкеИзСтрокиТоваровУКД(СведенияОТоваре);
	
	Для Каждого СведениеОМаркировке Из СведенияОМаркировке Цикл
		
		НоваяСтрока = КодыМаркировки.Добавить();
		НоваяСтрока.ИдентификаторТовара = ПозицияТовара.ИдентификаторТовара;
		НоваяСтрока.КодМаркировки       = СведениеОМаркировке;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОМаркировкеИзСтрокиТоваровУКД(СведенияОТоваре)
	
	Результат = Новый Массив;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		
		КонтрольныеИдентификационныеЗнаки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки", "ПолныйПуть", Истина);
		
		Для Каждого СтрокаКодаУпаковки Из КонтрольныеИдентификационныеЗнаки.Строки Цикл
			
			ШтрихкодУпаковки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки.НомерСтроки.Код");
			
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
				
				Результат.Добавить(ШтрихкодУпаковки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИндивидуальныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.ИндивидуальныеУпаковки", "ПолныйПуть", Истина);
		
		Для Каждого СтрокаКодаУпаковки Из ИндивидуальныеУпаковки.Строки Цикл
			
			ШтрихкодУпаковки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.ИндивидуальныеУпаковки.НомерСтроки.Код");
			
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				
				Результат.Добавить(ШтрихкодУпаковки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТранспортныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.ТранспортныеУпаковки", "ПолныйПуть", Истина);
		
		Для Каждого СтрокаКодаУпаковки Из ТранспортныеУпаковки.Строки Цикл
			
			ШтрихкодУпаковки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.ТранспортныеУпаковки.НомерСтроки.Код");
			
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				
				Результат.Добавить(ШтрихкодУпаковки);
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСведениямиОТаможеннойДекларации(СведенияОТоваре, ПозицияТовара, ЭтоФормат_5_02 = Ложь)
	
	Если
		Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияТовара, "ГТД")
		Или Не ЗначениеЗаполнено(ПозицияТовара.Номенклатура)
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоФормат_5_02 Тогда
		
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях";
		ИмяПутиСведенияОТаможеннойДекларации = ПутьКДанным + ".НомерСтроки.СведенияОДекларации";
		ИмяНомераТаможеннойДекларации = ИмяПутиСведенияОТаможеннойДекларации + ".НомерСтроки.НомерДекларации";
		ИмяКодаСтраныПроисхождения = ИмяПутиСведенияОТаможеннойДекларации + ".НомерСтроки.КодСтраны";
		
	Иначе
		
		ПутьКДанным = "СведенияОТоварах";
		ИмяПутиСведенияОТаможеннойДекларации = ПутьКДанным + ".НомерСтроки.СведенияОТаможеннойДекларации";
		ИмяНомераТаможеннойДекларации = ИмяПутиСведенияОТаможеннойДекларации + ".НомерСтроки.ТаможеннаяДекларацияНомер";
		ИмяКодаСтраныПроисхождения = ИмяПутиСведенияОТаможеннойДекларации + ".НомерСтроки.СтранаПроисхожденияКод";
		
	КонецЕсли;
	
	Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, ПутьКДанным + ".НомерСтроки.Признак");
	
	Если ТипЗнч(ПозицияТовара.Номенклатура) <> Тип("СправочникСсылка.Автомобили") Тогда
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияТовара.Номенклатура, "ВидНоменклатуры");
		
		Если ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга 
			Или (ЗначениеЗаполнено(Признак) И Признак <> "1") Тогда
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;

	ЭтоРНПТ = Ложь;
	СведенияОПрослеживаемости = СведенияОТоваре.Строки.Найти(
		ПутьКДанным + ".НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
	
	Если СведенияОПрослеживаемости <> Неопределено
		И СведенияОПрослеживаемости.Строки.Количество() > 0
		И ЗначениеЗаполнено(СведенияОПрослеживаемости.Значение) Тогда
		
		ЭтоРНПТ = Истина;
		
	КонецЕсли; 
	
	СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
		ИмяПутиСведенияОТаможеннойДекларации, "ПолныйПуть", Истина);
	
	Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
		
		НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
			ИмяНомераТаможеннойДекларации);
		
		КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
			ИмяКодаСтраныПроисхождения);
		
		Если ЗначениеЗаполнено(НомерТаможеннойДекларации) 
			И НомерТаможеннойДекларации <> "-" Тогда
			
			СтранаПроисхождения = Неопределено;
			ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
			ПозицияТовара.ГТД = НайтиСоздатьГТДТовара(НомерТаможеннойДекларации, СтранаПроисхождения, ЭтоРНПТ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьГТДТовара(НомерТД, Страна, ПрослеживаемыйТовар = Ложь)
	
	ТаможеннаяДекларацияОбъект = Справочники.ГТД.СоздатьЭлемент();
	ТаможеннаяДекларацияОбъект.УстановитьНовыйКод();
	ТаможеннаяДекларацияОбъект.Наименование = НомерТД;
	ТаможеннаяДекларацияОбъект.Страна = Страна;
	ТаможеннаяДекларацияОбъект.РНПТ = ПрослеживаемыйТовар;
	ТаможеннаяДекларацияОбъект.ОбменДанными.Загрузка = Истина;
	ТаможеннаяДекларацияОбъект.Записать();
	Возврат ТаможеннаяДекларацияОбъект.Ссылка;
	
КонецФункции

Процедура ДополнитьСведениямиОТаможеннойДекларацииАвтомобиль(
		СведенияОбАвтомобиле,
		ПозицияАвтомобиля,
		ЭтоФормат_5_02 = Ложь)
	
	Если
		Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияАвтомобиля, "ГТД")
		Или Не ЗначениеЗаполнено(ПозицияАвтомобиля.Автомобиль)
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоФормат_5_02 Тогда
		
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях";
		
	Иначе
		
		ПутьКДанным = "СведенияОТоварах";
		
	КонецЕсли;

	
	ЭтоРНПТ = Ложь;
	СведенияОПрослеживаемости = СведенияОбАвтомобиле.Строки.Найти(
		ПутьКДанным + ".НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
	
	Если СведенияОПрослеживаемости <> Неопределено 
		И СведенияОПрослеживаемости.Строки.Количество() > 0
		И СведенияОбАвтомобиле.Строки.Найти(
			ПутьКДанным + ".НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.Количество", 
			"ПолныйПуть", 
			Истина
		) <> Неопределено Тогда
		
		КоличествоПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОПрослеживаемости.Строки[0],
						ПутьКДанным + ".НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.Количество");
		ЭтоРНПТ = КоличествоПрослеживаемости <> 0 И КоличествоПрослеживаемости <> Неопределено;
		
	КонецЕсли;
	
	СведенияОТаможеннойДекларации = СведенияОбАвтомобиле.Строки.Найти(
		ПутьКДанным + ".НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
	
	Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
		
		НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
			ПутьКДанным + ".НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
		КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
			ПутьКДанным + ".НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
		
		Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда

			СтранаПроисхождения = Неопределено;
			ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
			ПозицияАвтомобиля.ГТД = НайтиСоздатьГТДТовара(НомерТаможеннойДекларации, СтранаПроисхождения, ЭтоРНПТ);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияАвтомобиля, "КоличествоПоДокументуПоступления") 
				И ПозицияАвтомобиля.КоличествоПоДокументуПоступления <> 0 Тогда
				ПозицияАвтомобиля.ГТДПоДокументуПоступления = ПозицияАвтомобиля.ГТД;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокНоменклатурыУКД(
		СписокНоменклатуры,
		ТоварыЭД,
		ТоварыКорректировкиПоОснованию,
		ЭтоУКД = Истина,
		ЦенаВключаетНДС = Ложь
	)
	
	СтрокиКУдалению = Новый Массив;
	ТоварИзмКоличествоОтбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ГТД");
	РеквизитыКЗаполнениюТоваровПоОснованию = "ЕдиницаИзмеренияПоДокументуПоступления,
		|КоэффициентПоДокументуПоступления,
		|СуммаВсегоПоДокументуПоступления,
		|СтавкаНДСПоДокументуПоступления,
		|СуммаНДСПоДокументуПоступления";
	
	Если ЭтоУКД Тогда
		
		Для Каждого СтрокаТовара Из ТоварыЭД Цикл
			
			Если ЗначениеЗаполнено(СтрокаТовара.СведенияОИзмененииКоличества) Тогда
				
				СведенияОИзменении = СтрокаТовара.СведенияОИзмененииКоличества;
				ЭтоНовыйТовар = НЕ ЗначениеЗаполнено(СведенияОИзменении.КоличествоДоКорректировки);
				
				Если ЭтоНовыйТовар Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокаТовара.Количество                       = СведенияОИзменении.Количество;
				СтрокаТовара.КоличествоПоДокументуПоступления = СведенияОИзменении.КоличествоДоКорректировки;
				СтрокаТовара.ГТДПоДокументуПоступления        = СтрокаТовара.ГТД;
				
				ЗаполнитьЗначенияСвойств(ТоварИзмКоличествоОтбор, СтрокаТовара);
				ТоварыКорректировкиКУдалению = ТоварыКорректировкиПоОснованию.НайтиСтроки(ТоварИзмКоличествоОтбор);
				
				Если ТоварыКорректировкиКУдалению.Количество() > 0 Тогда
					
					ТоварПоОснованию = ТоварыКорректировкиКУдалению[0];
					Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО") Тогда
						ЗаполнитьЗначенияСвойств(СтрокаТовара, ТоварПоОснованию, РеквизитыКЗаполнениюТоваровПоОснованию);
						
						Если ТоварПоОснованию.КоличествоПоДокументуПоступления > СтрокаТовара.КоличествоПоДокументуПоступления Тогда
							
							СтрокаТовара.Количество = СтрокаТовара.Количество
								+ (ТоварПоОснованию.КоличествоПоДокументуПоступления - СведенияОИзменении.КоличествоДоКорректировки);
							СтрокаТовара.КоличествоПоДокументуПоступления = ТоварПоОснованию.КоличествоПоДокументуПоступления;
							СтрокаТовара.СуммаНДС = СтрокаТовара.СуммаНДС
								+ ТоварПоОснованию.СуммаНДС
								- СведенияОИзменении.СуммаНалогаДоКорректировки;
							
							Если ЦенаВключаетНДС Тогда
								СтрокаТовара.Сумма = СтрокаТовара.Сумма
									+ СтрокаТовара.СуммаНДС
									+ ТоварПоОснованию.Сумма
									- (СведенияОИзменении.СтоимостьТоваровБезНалогаДоКорректировки
										+ СведенияОИзменении.СуммаНалогаДоКорректировки);
								СтрокаТовара.СуммаВсего = СтрокаТовара.Сумма;
							Иначе
								СтрокаТовара.Сумма = СтрокаТовара.Сумма 
									+ ТоварПоОснованию.Сумма
									- СведенияОИзменении.СтоимостьТоваровБезНалогаДоКорректировки;
								СтрокаТовара.СуммаВсего = СтрокаТовара.Сумма + СтрокаТовара.СуммаНДС;
							КонецЕсли;
							
							// Как перепривязать КМ?????    а никак :)    они не привязываются и в обычном режиме...
							
						КонецЕсли;
						
					Иначе
						ЗаполнитьЗначенияСвойств(СтрокаТовара, ТоварПоОснованию, РеквизитыКЗаполнениюТоваровПоОснованию);
					КонецЕсли;
					
				Иначе
					
					СтрокаТовара.ЕдиницаИзмеренияПоДокументуПоступления = СтрокаТовара.ЕдиницаИзмерения;
					СтрокаТовара.КоэффициентПоДокументуПоступления = СтрокаТовара.Коэффициент;
					
					СтоимостьТоваровБезНалогаДоКорректировки = ?(
						СведенияОИзменении.СтоимостьТоваровБезНалогаДоКорректировки = Неопределено,
						0,
						СведенияОИзменении.СтоимостьТоваровБезНалогаДоКорректировки
					);
					
					СуммаНалогаДоКорректировки = ?(
						СведенияОИзменении.СуммаНалогаДоКорректировки = Неопределено,
						0,
						СведенияОИзменении.СуммаНалогаДоКорректировки
					);
					СтрокаТовара.СуммаВсегоПоДокументуПоступления = СтоимостьТоваровБезНалогаДоКорректировки
						+ СуммаНалогаДоКорректировки;
					
					СтрокаТовара.СтавкаНДСПоДокументуПоступления = СтрокаТовара.СтавкаНДС;
					СтрокаТовара.СуммаНДСПоДокументуПоступления = СуммаНалогаДоКорректировки;
					
				КонецЕсли;
				
				Для Каждого СтрокаКУдалению Из ТоварыКорректировкиКУдалению Цикл
				
					ТоварыКорректировкиПоОснованию.Удалить(СтрокаКУдалению);
				
				КонецЦикла;
				
				НоваяСтрока = СписокНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
				НоваяСтрока.ПоДокументуПоступления = Истина;
				НоваяСтрока.Подтверждение = Истина;
				СтрокиКУдалению.Добавить(СтрокаТовара);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			
			ТоварыЭД.Удалить(УдаляемаяСтрока);
			
		КонецЦикла;
		
		// Найдем новые товары из таблицы ТоварыЭД. Это товары, у которых КоличествоПоДокументуПоступления = 0
		НовыеТовары = ТоварыЭД.НайтиСтроки(Новый Структура("КоличествоПоДокументуПоступления", 0));
		
		Для Каждого НовыйТовар Из НовыеТовары Цикл
			
			НоваяСтрока = СписокНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйТовар);
			НоваяСтрока.Подтверждение = Истина;
			ТоварыЭД.Удалить(НовыйТовар);
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Найдем совпадающие строки в ТоварахЭД и в Товарах документа основания.
	Для Каждого ТоварЭД Из ТоварыЭД Цикл
	
		ОтборНоменклатуры = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ГТД");
		ЗаполнитьЗначенияСвойств(ОтборНоменклатуры, ТоварЭД);
		
		Если ЭтоУКД Тогда
			
			ОтборНоменклатуры.Вставить("Количество", ТоварЭД.КоличествоПоДокументуПоступления);
			
		КонецЕсли;
		
		ТоварыКорректировки = ТоварыКорректировкиПоОснованию.НайтиСтроки(ОтборНоменклатуры);
		
		Для Каждого ТоварКорректировки Из ТоварыКорректировки Цикл
		
			НоваяСтрока            = СписокНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТоварКорректировки);
			НоваяСтрока.ИдентификаторТовара = ТоварЭД.ИдентификаторТовара;
			НоваяСтрока.Количество = ТоварЭД.Количество;
			НоваяСтрока.Сумма      = ТоварЭД.Сумма;
			НоваяСтрока.СуммаВсего = ТоварЭД.СуммаВсего;
			НоваяСтрока.СуммаНДС   = ТоварЭД.СуммаНДС;
			
			ТоварыКорректировкиПоОснованию.Удалить(ТоварКорректировки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаКорректировки  Из ТоварыКорректировкиПоОснованию Цикл
		
		НоваяСтрока = СписокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
		НоваяСтрока.Подтверждение = ЭтоУКД;
		НоваяСтрока.Неизменился = Истина;
		
	КонецЦикла;

КонецПроцедуры

Процедура РазделитьСтрокуТовараУКД(Товары, СтрокаКРазделению)
	
	ИсключатьСвойства = "ГТД, ГТДДоКорректировки, Количество, КоличествоПоДокументуПоступления, Сумма, "
		+ "СуммаВсего, СуммаВсегоДоКорректировки, СуммаВсегоПоДокументуПоступления, СуммаНДС, "
		+ "СуммаНДСДоКорректировки, СуммаНДСПоДокументуПоступления, СведенияОИзмененииКоличества, СведенияОПрослеживаемости";
		
	ИсключатьСвойстваПрослеживаемость = "СведенияОПрослеживаемости";
	
	ОбщееКоличество = СтрокаКРазделению.Количество;
	
	ОбработаноНДС 		= 0; 
	РаспределеноНДС		= 0; 
	КоэффициентРаспределения = СтрокаКРазделению.СуммаНДС / СтрокаКРазделению.Сумма;  
	
	ОбработаноСумма 	= 0;
	РаспределеноСумма	= 0;	
	КоэффициентРаспределенияСумма = СтрокаКРазделению.Сумма / СтрокаКРазделению.СуммаВсего;
		
	Для Каждого СтрокаСведенияОПрослеживаемости Из СтрокаКРазделению.СведенияОПрослеживаемости Цикл
		
		НоваяСтрока = Товары.Добавить();  
		
		Если ОбщееКоличество = СтрокаСведенияОПрослеживаемости.КоличествоТовараДоИзменения И 
			 	ОбщееКоличество = СтрокаСведенияОПрослеживаемости.КоличествоТовараПослеИзменения Тогда 
				
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКРазделению,, ИсключатьСвойстваПрослеживаемость);  
			Продолжить;
		Иначе 	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКРазделению,, ИсключатьСвойства); 
		КонецЕсли;
		
		ЭтоНовыйТовар = СтрокаСведенияОПрослеживаемости.КоличествоТовараДоИзменения = 0;
		
		НоваяСтрока.ГТД        = СтрокаСведенияОПрослеживаемости.РНПТ;
		НоваяСтрока.Количество = СтрокаСведенияОПрослеживаемости.КоличествоТовараПослеИзменения; 
		
		СуммаРасчетная = СтрокаКРазделению.СуммаВсего/ОбщееКоличество* НоваяСтрока.Количество;
		НоваяСтрока.Сумма = ОКР((СуммаРасчетная + ОбработаноСумма) * КоэффициентРаспределенияСумма - РаспределеноСумма, 2) ;

		СуммаПоДокументуПоступления = СтрокаСведенияОПрослеживаемости.КоличествоТовараДоИзменения * СтрокаКРазделению.Цена;
		
		Если НЕ ОбщееКоличество = 0
			И НЕ НоваяСтрока.Количество = 0 Тогда
			
			СуммаНДС = ОКР((НоваяСтрока.Сумма + ОбработаноНДС) * КоэффициентРаспределения - РаспределеноНДС, 2);;
			
		Иначе
			
			СуммаНДС = 0;
			
		КонецЕсли;
		
		
		Если НЕ СтрокаКРазделению.КоличествоПоДокументуПоступления = 0
			И НЕ СтрокаСведенияОПрослеживаемости.КоличествоТовараДоИзменения = 0 Тогда
			
			СуммаНДСПоДокументуПоступления = СтрокаКРазделению.СуммаНДСПоДокументуПоступления
				/ СтрокаКРазделению.КоличествоПоДокументуПоступления
				* СтрокаСведенияОПрослеживаемости.КоличествоТовараДоИзменения;
			
		Иначе
			
			СуммаНДСПоДокументуПоступления = 0;
			
		КонецЕсли; 
		
			
		ОбработаноНДС 	= ОбработаноНДС + НоваяСтрока.Сумма;
		РаспределеноНДС = РаспределеноНДС + СуммаНДС;
		
		ОбработаноСумма = ОбработаноСумма + СуммаРасчетная; 
		РаспределеноСумма = РаспределеноСумма + НоваяСтрока.Сумма;  

		НоваяСтрока.СуммаНДС                         = СуммаНДС;
		НоваяСтрока.СуммаНДСПоДокументуПоступления   = СуммаНДСПоДокументуПоступления;
		НоваяСтрока.СуммаВсего                       = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
		НоваяСтрока.СуммаВсегоПоДокументуПоступления = СуммаПоДокументуПоступления + НоваяСтрока.СуммаНДСПоДокументуПоступления;
		
		Если НЕ ЭтоНовыйТовар Тогда
			
			НоваяСтрока.ГТДПоДокументуПоступления        = НоваяСтрока.ГТД;
			НоваяСтрока.КоличествоПоДокументуПоступления = СтрокаСведенияОПрослеживаемости.КоличествоТовараДоИзменения;
			
		КонецЕсли; 
				
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДополнитьСведениямиОПрослеживаемости(СведенияОТоваре, ПозицияТовара, ЭтоФормат_5_02 = Ложь)

	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияТовара, "ГТД")
		ИЛИ НЕ ЗначениеЗаполнено(ПозицияТовара.Номенклатура) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоФормат_5_02 Тогда
		
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях";
		
	Иначе
		
		ПутьКДанным = "СведенияОТоварах";
		
	КонецЕсли;
	
	Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, ПутьКДанным + ".НомерСтроки.Признак");
	
	Если ТипЗнч(ПозицияТовара.Номенклатура) <> Тип("СправочникСсылка.Автомобили") Тогда
		
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияТовара.Номенклатура, "ВидНоменклатуры");
		
		Если ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга ИЛИ Признак <> "1" Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	СведенияОПрослеживаемости = СведенияОТоваре.Строки.Найти(
		ПутьКДанным + ".НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
	
	Если СведенияОПрослеживаемости = Неопределено 
		ИЛИ СведенияОПрослеживаемости.Строки.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(СведенияОПрослеживаемости.Значение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаПрослеживаемости = ТаблицаСведенияОпрослеживаемостиУПД_2019();	
	ТаблицаПрослеживаемости.Колонки.Добавить("РНПТ", Новый ОписаниеТипов("СправочникСсылка.ГТД"));	

	// Найдем страну
	СтранаПроисхождения = Неопределено;
	СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
		ПутьКДанным + ".НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
	
	Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
		
		КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТаможеннойДекларации.Строки[0],
			ПутьКДанным + ".НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод"
		);
		
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
		
	КонецЕсли;
	
	Для Каждого ПрослеживаемыйТовар Из СведенияОПрослеживаемости.Строки Цикл
	
		НомерТовара = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрослеживаемыйТовар,
			ПутьКДанным + ".НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.НомерТовара");
		
		Если НЕ ЗначениеЗаполнено(НомерТовара) Тогда
		
			Продолжить;	
		
		КонецЕсли;
		
		НоваяСтрокаПрослеживаемости = ТаблицаПрослеживаемости.Добавить();
		
		НоваяСтрокаПрослеживаемости.НомерТовара = НомерТовара;
		НоваяСтрокаПрослеживаемости.ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрослеживаемыйТовар,
			ПутьКДанным + ".НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.ЕдиницаИзмеренияКод");
		НоваяСтрокаПрослеживаемости.ЕдиницаИзмеренияНаименование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрослеживаемыйТовар,
			ПутьКДанным + ".НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.ЕдиницаИзмеренияНаименование");
		НоваяСтрокаПрослеживаемости.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрослеживаемыйТовар,
			ПутьКДанным + ".НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.Количество");
		НоваяСтрокаПрослеживаемости.КоличествоУчетное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрослеживаемыйТовар,
			ПутьКДанным + ".НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.КоличествоУчетное");
		
		НоваяСтрокаПрослеживаемости.РНПТ = НайтиСоздатьГТДТовара(НомерТовара, СтранаПроисхождения, Истина);
		
	КонецЦикла;
	
	ПозицияТовара.СведенияОПрослеживаемости = ТаблицаПрослеживаемости;

КонецПроцедуры

Процедура ДополнитьСведениямиОТаможеннойДекларацииУКД(СведенияОТоваре, ПозицияТовара)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияТовара, "ГТД")
		ИЛИ НЕ ЗначениеЗаполнено(ПозицияТовара.Номенклатура) Тогда
		
		Возврат;
		
	КонецЕсли;

	Если ТипЗнч(ПозицияТовара.Номенклатура) <> Тип("СправочникСсылка.Автомобили") Тогда
		
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияТовара.Номенклатура, "ВидНоменклатуры");
		
		Если ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	ЭтоРНПТ = Ложь;
	СведенияОПрослеживаемости = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
	
	Если СведенияОПрослеживаемости <> Неопределено
		И СведенияОПрослеживаемости.Строки.Количество() > 0
		И ЗначениеЗаполнено(СведенияОПрослеживаемости.Значение) Тогда

		ЭтоРНПТ = Истина;	
		
	КонецЕсли; 
	
	СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
	
	Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
		
		НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
		
		КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
		
		Если ЗначениеЗаполнено(НомерТаможеннойДекларации)
			И НомерТаможеннойДекларации <> "-" Тогда
			
			СтранаПроисхождения = Неопределено;
			ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
			ПозицияТовара.ГТД = НайтиСоздатьГТДТовара(НомерТаможеннойДекларации, СтранаПроисхождения, ЭтоРНПТ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСведениямиОПрослеживаемостиУКД(СведенияОТоваре, ПозицияТовара)

	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияТовара, "ГТД")
		ИЛИ НЕ ЗначениеЗаполнено(ПозицияТовара.Номенклатура) Тогда
		
		Возврат;
		
	КонецЕсли;

	Если ТипЗнч(ПозицияТовара.Номенклатура) <> Тип("СправочникСсылка.Автомобили") Тогда
		
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияТовара.Номенклатура, "ВидНоменклатуры");
		
		Если ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	СведенияОПрослеживаемости = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
	
	Если СведенияОПрослеживаемости = Неопределено
		ИЛИ СведенияОПрослеживаемости.Строки.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(СведенияОПрослеживаемости.Значение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаПрослеживаемости = ТаблицаСведенияОпрослеживаемостиУКД_2020();	
	ТаблицаПрослеживаемости.Колонки.Добавить("РНПТ", Новый ОписаниеТипов("СправочникСсылка.ГТД"));	

	// Найдем страну
	СтранаПроисхождения = Неопределено;
	СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
	
	Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
		
		КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТаможеннойДекларации.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод"
		);
		
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
		
	КонецЕсли;
	
	Для Каждого ПрослеживаемыйТовар Из СведенияОПрослеживаемости.Строки Цикл
	
		НоваяСтрокаПрослеживаемости = ТаблицаПрослеживаемости.Добавить();
		
		Для Каждого КолонкаТаблицы Из ТаблицаПрослеживаемости.Колонки Цикл
			
			ИмяРеквизита = КолонкаТаблицы.Имя;
			
			Если ИмяРеквизита = "РНПТ" Тогда
			
				 Продолжить;
			
			КонецЕсли;
				
			НоваяСтрокаПрослеживаемости[ИмяРеквизита] = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				ПрослеживаемыйТовар,
				"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки." + ИмяРеквизита
			); 
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрокаПрослеживаемости.НомерТовара)
			ИЛИ НоваяСтрокаПрослеживаемости.НомерТовара = "-" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрокаПрослеживаемости.РНПТ = НайтиСоздатьГТДТовара(НоваяСтрокаПрослеживаемости.НомерТовара, СтранаПроисхождения, Истина);
		
	КонецЦикла;
	
	ПозицияТовара.СведенияОПрослеживаемости = ТаблицаПрослеживаемости;

КонецПроцедуры

Процедура ДобавитьСведенияОИзмененииКоличества(СведенияОТоваре, НоваяСтрока)

	СведенияОИзмененииКоличества = Новый Структура();
	
	СведенияОИзмененииКоличества.Вставить("КоличествоДоКорректировки",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки")
	);
	
	
	СведенияОИзмененииКоличества.Вставить("Количество",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Количество")
	);
	
	СведенияОИзмененииКоличества.Вставить("ЦенаЗаЕдиницуИзмеренияДоКорректировки",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки")
	); 
	
	СведенияОИзмененииКоличества.Вставить("ЦенаЗаЕдиницуИзмерения",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения")
	);
	
	СведенияОИзмененииКоличества.Вставить("СтоимостьТоваровБезНалогаДоКорректировки",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки")
	);
	
	СведенияОИзмененииКоличества.Вставить("СтоимостьТоваровБезНалога",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога")
	);
	
	СведенияОИзмененииКоличества.Вставить("СуммаНалогаДоКорректировки",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки")
	);
	
	СведенияОИзмененииКоличества.Вставить("СуммаНалога",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СуммаНалога")
	);
	
	НоваяСтрока.СведенияОИзмененииКоличества = СведенияОИзмененииКоличества;
	
КонецПроцедуры

Функция НайтиСоздатьГТДТовара(НомерГТД, СтранаПроисхождения, ПрослеживаемыйТовар = Ложь)
	
	ГТД = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(НомерГТД) Тогда
		
		Возврат ГТД;
		
	КонецЕсли;
	
	ДополнительныеРеквизиты = Новый Структура();
	ДополнительныеРеквизиты.Вставить("РНПТ", ПрослеживаемыйТовар);
	
	Если ЗначениеЗаполнено(СтранаПроисхождения) Тогда
		
		ДополнительныеРеквизиты.Вставить("Страна", СтранаПроисхождения);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ГТД", ГТД, НомерГТД, ДополнительныеРеквизиты);
	
	Если НЕ ЗначениеЗаполнено(ГТД) Тогда
		
		ГТД = СоздатьГТДТовара(НомерГТД, СтранаПроисхождения, ПрослеживаемыйТовар);
		
	КонецЕсли;
	
	Возврат ГТД;
	
КонецФункции

Функция ТаблицаСведенияОпрослеживаемостиУПД_2019()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("НомерТовара"                 , ОбщегоНазначения.ОписаниеТипаСтрока(29));
	Результат.Колонки.Добавить("ЕдиницаИзмеренияКод"         , ОбщегоНазначения.ОписаниеТипаСтрока(4));
	Результат.Колонки.Добавить("ЕдиницаИзмеренияНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	Результат.Колонки.Добавить("Количество"                  , ОбщегоНазначения.ОписаниеТипаЧисло(26, 11)); 
	Результат.Колонки.Добавить("КоличествоУчетное"           , ОбщегоНазначения.ОписаниеТипаЧисло(26, 11)); 
	
	Возврат Результат; 
	
КонецФункции

#КонецОбласти

#Область Служебные

Функция ЭтоУПДОтКоммитента(
		ДеревоДанных, ПутьКДанным = "ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ")
	
	ОбстоятельстваФормированияСФ =ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ПутьКДанным);
	Возврат ОбстоятельстваФормированияКоммитента().Найти(ОбстоятельстваФормированияСФ) <> Неопределено;
	
КонецФункции

Функция ОбстоятельстваФормированияКоммитента()
	
	Возврат СтрРазделить("4 8", " ");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область УПД_5_02

#Область Отправка

Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС_5_02(Основание, Настройки, Данные, Описание, Отказ)
	
	ДокументСсылкаСЧФ = Основание;
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ДокументСсылкаСЧФ = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(Основание).СчетФактура;
		Описание.Основания.Добавить(ДокументСсылкаСЧФ);
		
	Иначе
		
		Описание.Основания.Добавить(Основание.ДокументОснование);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументСсылкаСЧФ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для формирования универсального передаточного документа счет-фактура должна быть заполнена.'");
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДляФормированияЭД = Документы.СчетФактураВыданный.ДанныеДляУДПЭД(ДокументСсылкаСЧФ,Настройки);
	Данные = ЗаполнитьДанныеПервичногоДокументаУПД_5_02(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьДеревоДанныхУПД_5_02(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьДанныеПлатежныхДокументов(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьИнформациюОТоварахТоваров_5_02(ДанныеДляФормированияЭД, Настройки, Данные);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС_5_02(Основание, Настройки, Данные, Описание, Отказ)
	
	ДанныеДляФормированияЭД = Документы.СчетФактураВыданный.ДанныеДляУДПЭД(Основание, Настройки);
	Данные = ЗаполнитьДеревоДанныхУПД_5_02(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьДанныеПлатежныхДокументов(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьИнформациюОТоварахТоваров_5_02(ДанныеДляФормированияЭД, Настройки, Данные);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_5_02(Основание, Настройки, Данные, Описание, Отказ) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ВыгрузкаЗНВЭДОВозможна(Основание);
		ДанныеДляФормированияЭД = Документы.ЗаказНаряд.ДанныеДляУДПЭД(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратПоставщику") Тогда
		
		ДанныеДляФормированияЭД = ДайДанныеВозвратПоставщикуДляУПД(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
		
		ДанныеДляФормированияЭД = ДайДанныеКорректировкиРеализацииАвтомобилейДляУПД(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
		
		ДанныеДляФормированияЭД = ДайДанныеРеализацииАвтомобилейДляУПД(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
		
		ДанныеДляФормированияЭД = ДайДанныеКорректировкиРеализацииИУслугДляУПД(Основание);
		
	Иначе
		
		ДанныеДляФормированияЭД = ДайДанныеРеализацииТоваровИУслугДляУПД(Основание);
		
	КонецЕсли;
	
	ДокументыОснования = Новый Массив;
	ДокументыОснования.Добавить(Основание);
	ДанныеДляФормированияЭД.Вставить("ДокументыОснования", ДокументыОснования);
	
	Данные = ЗаполнитьДанныеПервичногоДокументаУПД_5_02(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьДеревоДанныхУПД_5_02(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьДанныеПлатежныхДокументов(ДанныеДляФормированияЭД, Настройки, Данные);
	Данные = ЗаполнитьИнформациюОТоварахТоваров_5_02(ДанныеДляФормированияЭД, Настройки, Данные);
	
КонецПроцедуры

Функция ЗаполнитьДанныеПервичногоДокументаУПД_5_02(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	Шапка = ДанныеДляФормированияЭД.Шапка;
	ВидОперацииЭД = ВидОперацииЭД(Шапка);
	
	ПутьВДеревеОперация = "СведенияОПередаче.Операция.";
	
	СохранитьРеквизитВДереве(ДеревоДанных, ПутьВДеревеОперация + "ВидОперации", Строка(ВидОперацииЭД));
	
	СодержаниеОперации = СодержаниеОперации(ДанныеДляФормированияЭД.Товары);
	СохранитьРеквизитВДереве(ДеревоДанных, ПутьВДеревеОперация + "СодержаниеОперации", СодержаниеОперации);
	
	СохранитьРеквизитВДереве(ДеревоДанных, ПутьВДеревеОперация + "ДатаОтгрузки", Шапка.Дата);
	
	Если ЗначениеЗаполнено(Шапка.ДокументОснование) Тогда
		
		Если ТипЗнч(Шапка.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.ДокументОснование, "ДокументОснование");
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				
				ДокументыОснованияДокументаОтгрузки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОснование);
				СохранитьРеквизитВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", ДокументыОснованияДокументаОтгрузки);
				
			КонецЕсли;
			
		Иначе
			
			ДокументыОснованияДокументаОтгрузки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Шапка.ДокументОснование);
			СохранитьРеквизитВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", ДокументыОснованияДокументаОтгрузки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шапка.ДатаДоговора) ИЛИ Не ЗначениеЗаполнено(Шапка.НомерДоговора) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПередаче.Операция.ОснованиеОтгрузкиПередачи.БезДокументаОснования", Истина);
		
	Иначе
		
		ТаблицаДанныхДоговора = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных,
			"СведенияОПередаче.Операция.ОснованиеОтгрузкиПередачи.ДокументыОснования");
		ДанныеДоговора = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных,
			"СведенияОПередаче.Операция.ОснованиеОтгрузкиПередачи.ДокументыОснования.НомерСтроки.ДокументОснование");
		ДанныеДоговора.НаименованиеДокумента = Шапка.НаименованиеДоговора;
		ДанныеДоговора.НомерДокумента = Шапка.НомерДоговора;
		ДанныеДоговора.ДатаДокумента = НачалоДня(Шапка.ДатаДоговора);
		СтрокаТаблицы = ТаблицаДанныхДоговора.Добавить();
		СтрокаТаблицы.ДокументОснование = ДанныеДоговора;
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			"ДокументОснование.НаименованиеДокумента",,, НСтр("ru = 'Укажите наименование договора'"));
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			"ДокументОснование.НомерДокумента",,, НСтр("ru = 'Укажите номер договора'"));
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			"ДокументОснование.ДатаДокумента",,, НСтр("ru = 'Укажите дату договора'"));
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаДанныхДоговора,
			"СведенияОПередаче.Операция.ОснованиеОтгрузкиПередачи.ДокументыОснования");
		
	КонецЕсли;
	
	//ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров(Шапка),
	//	ПутьВДеревеОперация + "ОснованиеОтгрузкиПередачи");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
		ДеревоДанных,
		ТранспортнуяНакладная(),
		"СведенияОПередаче.Операция.Транспортировка.Сведения");
	
	Если ЕстьРеквизит(Шапка, "ЭтоКомиссия")
		И Шапка.ЭтоКомиссия Тогда
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ПередачаТовараКомитентом";
		НоваяСтрока.Значение      = "Истина";
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
			ДеревоДанных, НоваяСтрока, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
		
	КонецЕсли;
	
	Возврат ДеревоДанных;
	
КонецФункции

Функция ЗаполнитьДеревоДанныхУПД_5_02(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	Шапка = ДанныеДляФормированияЭД.Шапка;
	
	СохранитьРеквизитВДереве(ДеревоДанных, "ВидСчетаФактуры", "Реализация");
	
	ГруппаДанныхВДеревере = "СведенияОСчетеФактуре.%1";
	
	// Для Функция = СЧФ:
	//  1 - счет-фактура, выставляемый при реализации товаров (работ, услуг), передаче имущественных прав;
	//  2 - счет-фактура, выставляемый при получении оплаты, частичной оплаты в счет предстоящих поставок
	//      товаров (выполнения работ, оказания услуг), передачи имущественных прав;
	//  3 - счет-фактура, применяемый в случае реализации комиссионером (агентом, экспедитором,
	//      застройщиком или заказчиком, выполняющим функции застройщика) двум и более покупателям
	//      (приобретения у двух и более продавцов) товаров (работ, услуг), имущественных прав от своего имени.
	//
	// Для Функция = СЧФДОП или Функция = ДОП:
	//  4 - Товары переданы от Комитента (Принципала) Комиссионеру (Агенту, действующему от собственного имени) для дальнейшей реализации;
	//  5 - Товары переданы от Комиссионера (Агента, действующего от собственного имени) Комитенту (Принципалу) при возврате товаров;
	//  6 - Товары переданы от Комиссионера (Агента, действующего от собственного имени) Комитенту (Принципалу) при закупке товара;
	//  7 - Товары переданы от Комитента (Принципала) Комиссионеру (Агенту, действующему от собственного имени) при возврате товаров;
	//  8 - Возврат товара от Покупателя Продавцу.
	СохранитьРеквизитВДереве(
		ДеревоДанных,
		СтрШаблон(ГруппаДанныхВДеревере, "ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ"),
		ОбстоятельстваФормированияСФ(Шапка)
	);
	
	ВариантВыбытияМаркируемойПродукции = Неопределено;
	ВнестиСведенияОВыбытииМаркированныхТоваровВДеревоУПДУКД(ДеревоДанных, ВариантВыбытияМаркируемойПродукции);
	
	СохранитьРеквизитВДереве(ДеревоДанных, "СсылкаСчетаФактуры", Шапка.Ссылка);
	
	
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Шапка);
	Если Настройки.Функция = "СЧФ" ИЛИ Настройки.Функция = "СЧФДОП" Тогда
		НомерДокумента = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(НомерДокумента, Шапка.Ссылка);
	КонецЕсли;
	
	СохранитьРеквизитВДереве(ДеревоДанных, СтрШаблон(ГруппаДанныхВДеревере, "НомерДокумента"), НомерДокумента);
	СохранитьРеквизитВДереве(ДеревоДанных, СтрШаблон(ГруппаДанныхВДеревере, "ДатаДокумента"),  Шапка.Дата);
	
	Если Шапка.Исправление Тогда
		
		СохранитьРеквизитВДереве(ДеревоДанных, СтрШаблон(ГруппаДанныхВДеревере, "Исправление.НомерИсправления"), Шапка.НомерИсправления);
		СохранитьРеквизитВДереве(ДеревоДанных, СтрШаблон(ГруппаДанныхВДеревере, "Исправление.ДатаИсправления"), Шапка.ДатаИсправления);
		
	КонецЕсли;
	
	СведенияОПродавце = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Поставщик, СведенияОПродавце);
	СведенияОПродавце.Вставить("ДатаКИ", Шапка.Дата);
	
	ДанныеПродавца = ПодготовитьДанныеУчастникаУПД(СведенияОПродавце,, Шапка.Подразделение,, Истина);
	
	СведенияОПродавцах = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(
		ДеревоДанных,
		СтрШаблон(ГруппаДанныхВДеревере, "СведенияОПродавцах"));
	СведенияОПродавцах.Очистить();
	СведенияОПродавцах.Колонки.Добавить("СведенияОбУчастнике");
	СтрокаПродавца = СведенияОПродавцах.Добавить();
	СтрокаПродавца.Продавец = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияОСчетеФактуре.СведенияОПродавцах.НомерСтроки.Продавец");
	ЗаполнитьЗначенияСвойств(СтрокаПродавца.Продавец, ДанныеПродавца);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
		ДеревоДанных,
		СведенияОПродавцах,
		СтрШаблон(ГруппаДанныхВДеревере, "СведенияОПродавцах"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"СоставительДокументаНаименование",
		СведенияОПродавце.ПолноеНаименование
	);
	
	СведенияОПокупателе = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Покупатель, СведенияОПокупателе);
	СведенияОПокупателе.Вставить("ДатаКИ", Шапка.Дата);
	ДанныеПокупателя = ПодготовитьДанныеУчастникаУПД(СведенияОПокупателе,,, Истина, Истина);
	
	СведенияОПокупателях = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(
		ДеревоДанных,
		СтрШаблон(ГруппаДанныхВДеревере, "СведенияОПокупателях"));
	СведенияОПокупателях.Очистить();
	СведенияОПокупателях.Колонки.Добавить("СведенияОбУчастнике");
	
	СтрокаПокупателя = СведенияОПокупателях.Добавить();
	СтрокаПокупателя.Покупатель = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияОСчетеФактуре.СведенияОПокупателях.НомерСтроки.Покупатель");
	ЗаполнитьЗначенияСвойств(СтрокаПокупателя.Покупатель, ДанныеПокупателя);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
		ДеревоДанных,
		СведенияОПокупателях,
		СтрШаблон(ГруппаДанныхВДеревере, "СведенияОПокупателях"));
	
	ЗаполнитьИнформациюОбОтгрузке(ДеревоДанных, ДанныеДляФормированияЭД, Истина);
	
	СохранитьРеквизитВДереве(
		ДеревоДанных,
		СтрШаблон(ГруппаДанныхВДеревере, "Валюта.Код"),
		Шапка.КодВалюты);
	СохранитьРеквизитВДереве(
		ДеревоДанных,
		СтрШаблон(ГруппаДанныхВДеревере, "Валюта.Наименование"),
		Шапка.НаименованиеПолноеВалюты);
	СохранитьРеквизитВДереве(
		ДеревоДанных,
		СтрШаблон(ГруппаДанныхВДеревере, "Валюта.Курс"),
		Шапка.Курс);
	
	ДокументыОснования = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеДляФормированияЭД.ДокументыОснования);
	СохранитьРеквизитВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	СохранитьРеквизитВДереве(
		ДеревоДанных,
		СтрШаблон(ГруппаДанныхВДеревере, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта"),
		Шапка.ИдентификаторГосударственногоКонтракта);
	
	ДокументыОтгрузки = ДайДокументыПодтвержденияОтгрузки(Шапка, ДанныеДляФормированияЭД.Товары, Настройки);
	
	ДокументыПодтвержденияОтгрузки = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных,
		"СведенияОСчетеФактуре.ДокументыОбОтгрузке");
	
	Для Каждого ДокументПодтвежденияОтгрузки Из ДокументыОтгрузки.ДокументыПодтвержденияОтгрузки Цикл
		
		Если Не (ЗначениеЗаполнено(ДокументПодтвежденияОтгрузки.Номер)
				И ЗначениеЗаполнено(ДокументПодтвежденияОтгрузки.Наименование)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДокументыПодтвержденияОтгрузки = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных,
			"СведенияОСчетеФактуре.ДокументыОбОтгрузке.НомерСтроки.ДокументОбОтгрузке");
		СтрокаДокументыПодтвержденияОтгрузки.НомерДокумента = ДокументПодтвежденияОтгрузки.Номер;
		СтрокаДокументыПодтвержденияОтгрузки.ДатаДокумента = ДокументПодтвежденияОтгрузки.Дата;
		СтрокаДокументыПодтвержденияОтгрузки.НаименованиеДокумента = ДокументПодтвежденияОтгрузки.Наименование;
		
		ДокументыПодтвержденияОтгрузки.Добавить().ДокументОбОтгрузке = СтрокаДокументыПодтвержденияОтгрузки;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыПодтвержденияОтгрузки,
		"СведенияОСчетеФактуре.ДокументыОбОтгрузке");
	СохранитьРеквизитВДереве(ДеревоДанных, "ДокументОбОтгрузке", ДокументыОтгрузки.ДокументОбОтгрузке);
	
	ДайСведенияОВыбытииМаркированныхТоваров(
		Шапка,
		ДеревоДанных,
		ПолучитьЗначениеПараметраСтруктуры(Настройки, "ЭтоФормат502", Ложь));
	
	Возврат ДеревоДанных;
	
КонецФункции

Функция ЗаполнитьИнформациюОТоварахТоваров_5_02(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	ТолькоУслуги = Истина;
	ТоварыКОтправке = НоваяТаблицаТоваровУПД_5_02();
	
	ЕстьПрослеживаемыйТовар = ЕстьРеквизит(ДанныеДляФормированияЭД, "ПрослеживаемыеТовары")
		И ДанныеДляФормированияЭД.ПрослеживаемыеТовары.Количество() > 0;
		
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ШтрихкодыПоТоварам(ДанныеДляФормированияЭД.Товары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
	
	ЭтоАвансовыйСчетФактура = ТипЗнч(ДанныеДляФормированияЭД.Шапка.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		И Документы.СчетФактураВыданный.ЭтоАвансовыйСчетФактура(ДанныеДляФормированияЭД.Шапка.Ссылка);
	
	СуммаНалогаИтог = 0;
	Для Каждого Товар Из ДанныеДляФормированияЭД.Товары Цикл
		
		НоваяСтрока = ТоварыКОтправке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар,, "ЕдиницаИзмеренияКод,ЕдиницаИзмеренияНаименование");
		
		Если НеобходимоУказатьЕдиницуИзмерения(Товар) Тогда
			
			НоваяСтрока.ЕдиницаИзмеренияКод = ПолучитьКодЕдиницыИзмерения(Товар);
			НоваяСтрока.ЕдиницаИзмеренияНаименование = Товар.ЕдиницаИзмеренияНаименование;
			
		КонецЕсли;
		
		Если Товар.Свойство("Содержание") И ЗначениеЗаполнено(Товар.Содержание) Тогда
			
			НоваяСтрока.Наименование = Товар.Содержание;
			
		ИначеЕсли Не ПустаяСтрока(Товар.НаименованиеХарактеристики) Тогда
			
			НоваяСтрока.Наименование = СтрШаблон(
				"%1 (%2)",
				Товар.НаименованиеНоменклатуры,
				Товар.НаименованиеХарактеристики
			);
			
		Иначе
			
			НоваяСтрока.Наименование = Товар.НаименованиеНоменклатуры;
			
		КонецЕсли;
		
		Если Не ЭтоАвансовыйСчетФактура Тогда
		
			НоваяСтрока.Цена = ?(
				Товар.Количество = 0,
				0,
				Окр(Товар.СуммаБезНДС / Товар.Количество, 2, РежимОкругления.Окр15как20)
			);
			НоваяСтрока.СтоимостьБезНалога = Товар.СуммаБезНДС;
			
		Иначе
			
			НоваяСтрока.Цена = Товар.ЦенаЗаЕдиницуИзмерения;
			НоваяСтрока.Количество = Неопределено;
			
		КонецЕсли;
		
		НоваяСтрока.НалоговаяСтавка = Товар.СтавкаНДС;
		
		НоваяСтрока.СуммаНалога = Новый Структура();
		Если Товар.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
			
			НоваяСтрока.СуммаНалога.Вставить("БезНДС", Истина);
			
		Иначе
			
			НоваяСтрока.СуммаНалога.Вставить("Сумма", Товар.СуммаНДС);
			СуммаНалогаИтог = СуммаНалогаИтог + Товар.СуммаНДС;
			
		КонецЕсли;
		
		НоваяСтрока.СтоимостьСНалогом  = Товар.СуммаСНДС;
		
		НоваяСтрока.СуммаАкциза = Новый Структура();
		НоваяСтрока.СуммаАкциза.Вставить("БезАкциза", Истина);
		
		Если ЗначениеЗаполнено(Товар.НомерТаможеннойДекларации) Тогда
			
			Если ЕстьПрослеживаемыйТовар Тогда
				
				НоваяСтрока.СведенияОПрослеживаемости = СведенияОПрослеживаемыхТоваров(
					Товар, ДанныеДляФормированияЭД.ПрослеживаемыеТовары);
				
			КонецЕсли;
			
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод");
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер");
			
			НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			Декларация = НоваяСтрока.СведенияОТаможеннойДекларации.Добавить();
			Декларация.СтранаПроисхожденияКод = Товар.КодСтраныПроисхождения;
			Декларация.ТаможеннаяДекларацияНомер = ?(
				ЗначениеЗаполнено(Товар.НомерТаможеннойДекларации),
				СокрЛП(Товар.НомерТаможеннойДекларации),
				""
			);
			НоваяСтрока.СтранаПроисхожденияНаименование = Товар.НаименованиеСтраныПроисхождения;
			
		КонецЕсли;
		
		НоваяСтрока.Признак = ПризнакТовара(Товар);
		НоваяСтрока.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(
				Товар.Номенклатура);
		НоваяСтрока.ТоварИдентификатор = Товар.Номенклатура.УникальныйИдентификатор();
		ТолькоУслуги = ТолькоУслуги И (Товар.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга);
		
		НоваяСтрока.СведенияОМаркировке = СведенияОКодахУпаковокМаркируемойПродукции_5_02(
			Товар, ДанныеДляФормированияЭД.КодыУпаковокМаркируемойПродукции);
		
		НоваяСтрока.Сопоставление = СопоставленияНоменклатурыЭД(Товар.Номенклатура,
			Товар.Характеристика, Товар.ЕдиницаИзмерения);
			
		НоваяСтрока.Сопоставление.Вставить("Наименование", Товар.НаименованиеНоменклатуры);
		
		Если ЗначениеЗаполнено(Товар.НаименованиеХарактеристики) Тогда
			
			НоваяСтрока.Сопоставление.Вставить("Характеристика", Товар.НаименованиеХарактеристики);
			
		КонецЕсли;
		
		НоваяСтрока.Сопоставление.Вставить("ЕдиницаИзмерения"   , Товар.ЕдиницаИзмеренияНаименование);
		НоваяСтрока.Сопоставление.Вставить("ЕдиницаИзмеренияКод", Товар.ЕдиницаИзмеренияКод);
		НоваяСтрока.Сопоставление.Вставить("СтавкаНДС", Товар.СтавкаНДС);
		НоваяСтрока.Сопоставление.Вставить("Артикул"  , Товар.Артикул);
		
		ЗаполнитьШтрихкодыТоваровВСопоставление(
			НоваяСтрока.Сопоставление,
			ШтрихкодыНоменклатуры,
			ШтрихкодыКомбинаций,
			Товар.Номенклатура,
			Товар.Характеристика,
			Товар.ЕдиницаИзмерения
		);
		
		Если
			Настройки.ВариантыЗаполненияПолей.ТоварКод = "Штрихкод"
			И НоваяСтрока.Сопоставление.Свойство("ШтрихкодКомбинации")
		Тогда
		
			НоваяСтрока.Код = НоваяСтрока.Сопоставление.ШтрихкодКомбинации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьРеквизитВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	СохранитьРеквизитВДереве(ДеревоДанных, "ТаблицаСчетаФактуры.ВсегоКОплате.СтоимостьБезНалога",
		ТоварыКОтправке.Итог("СтоимостьБезНалога"));
	СохранитьРеквизитВДереве(ДеревоДанных, "ТаблицаСчетаФактуры.ВсегоКОплате.СтоимостьСНалогом",
		ТоварыКОтправке.Итог("СтоимостьСНалогом"));
	СохранитьРеквизитВДереве(ДеревоДанных, "ТаблицаСчетаФактуры.ВсегоКОплате.СуммаНалога.Сумма", ТоварыКОтправке.Итог("СуммаНалога"));
	СохранитьРеквизитВДереве(ДеревоДанных, "ТаблицаСчетаФактуры.ВсегоКОплате.Количество", ТоварыКОтправке.Итог("Количество"));
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
		ДеревоДанных,
		ТоварыКОтправке,
		"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях");
		
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ЕдиницаИзмеренияНаименование";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнена наименование единицы измерения в справочнике ""Номенклатура"".'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "ЕдиницаИзмеренияКод";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Номенклатура"".'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "Количество";
	ОписаниеОшибкиДляТаблицы.ТекстОшибки = НСтр("ru = 'Не указано количество товара в табличной части'");
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "Код";
	ОписаниеОшибкиДляТаблицы.КлючДанных  = "Номенклатура";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным = "Объект.Код";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	СсылкаНаДокумент = ДанныеДляФормированияЭД.Шапка.Ссылка;
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы = "Наименование";
	ОписаниеОшибкиДляТаблицы.КлючДанных  = "Номенклатура";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным = "Объект.НаименованиеПолное";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "Количество";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.Количество";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтрокиИсходногоДокумента";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "Цена";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.Цена";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтрокиИсходногоДокумента";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "СтоимостьБезНалога";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.Сумма";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтрокиИсходногоДокумента";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "СуммаНалога";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = СсылкаНаДокумент;
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Товары.СуммаНДС";
	ОписаниеОшибкиДляТаблицы.ПолеНомераСтроки = "НомерСтрокиИсходногоДокумента";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "ЕдиницаИзмеренияНаименование";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = "ЕдиницаИзмерения";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Наименование";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "ЕдиницаИзмеренияКод";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = "ЕдиницаИзмерения";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.Код";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	ОписаниеОшибкиДляТаблицы = НовоеОписаниеОшибкиДляТаблицы();
	ОписаниеОшибкиДляТаблицы.ПолеТаблицы      = "Признак";
	ОписаниеОшибкиДляТаблицы.КлючДанных       = "Номенклатура";
	ОписаниеОшибкиДляТаблицы.ПутьКДанным      = "Объект.ТипНоменклатуры";
	ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТоварыКОтправке, ОписаниеОшибкиДляТаблицы);
	
	Возврат ДеревоДанных;
	
КонецФункции

Функция НоваяТаблицаТоваровУПД_5_02()
	
	Число_26_11 = ОбщегоНазначения.ОписаниеТипаЧисло(26, 11);
	Число_19_2 = ОбщегоНазначения.ОписаниеТипаЧисло(19, 2);
	Строка_255 = ОбщегоНазначения.ОписаниеТипаСтрока(255);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество", Число_26_11);
	ТаблицаТоваров.Колонки.Добавить("Цена", Число_26_11);
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезНалога", Число_19_2);
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьСНалогом", Число_19_2);
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога");
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование", Строка_255);
	ТаблицаТоваров.Колонки.Добавить("Признак", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ТаблицаТоваров.Колонки.Добавить("Код", Строка_255);
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Строка_255);
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Содержание");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировке");
	ТаблицаТоваров.Колонки.Добавить("СведенияОПрослеживаемости", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("КодВидаТовара", Строка_255);
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтроки");
	
	Возврат ТаблицаТоваров;
	
КонецФункции // НоваяТаблицаТоваровУПД_5_02()

Функция СведенияОКодахУпаковокМаркируемойПродукции_5_02(СтрокаДокумента,
                                                   КодыДокумента,
                                                   ПоложитьВКонтрольныеИдентификационныеЗнаки = Истина)
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	СведенияОМаркировке = Новый ТаблицаЗначений;
	СведенияОМаркировке.Колонки.Добавить("ИдентификаторУпаковки",  ТипСтрока);
	СведенияОМаркировке.Колонки.Добавить("Количество",             ТипЧисло);
	СведенияОМаркировке.Колонки.Добавить("Партия",                 ТипСтрока);
	СведенияОМаркировке.Колонки.Добавить("Идентификатор",          Неопределено);
	
	Если Не ЗначениеЗаполнено(КодыДокумента) Тогда
		
		// Передадим пустые коды маркировок
		Возврат СведенияОМаркировке;
		
	КонецЕсли;
	
	УсловиеПоиска = Новый Структура();
	
	ЕстьИдентификаторВКодахМаркировки = ЕстьРеквизит(КодыДокумента, "ИдентификаторТовара");
	
	Если ЕстьРеквизит(СтрокаДокумента, "ИдентификаторТовара") И ЕстьИдентификаторВКодахМаркировки Тогда
		
		УсловиеПоиска.Вставить("ИдентификаторТовара", СтрокаДокумента.ИдентификаторТовара);
		
	ИначеЕсли ЕстьРеквизит(СтрокаДокумента, "ИдентификаторСтроки") И ЕстьИдентификаторВКодахМаркировки Тогда
		
		УсловиеПоиска.Вставить("ИдентификаторТовара", СтрокаДокумента.ИдентификаторСтроки);
		
	Иначе
		
		УсловиеПоиска.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
		
		Если ЕстьРеквизит(СтрокаДокумента, "Характеристика") Тогда
		
			УсловиеПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.Характеристика);
			
		ИначеЕсли ЕстьРеквизит(СтрокаДокумента, "ХарактеристикаНоменклатуры") Тогда
			
			УсловиеПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = КодыДокумента.НайтиСтроки(УсловиеПоиска);
	
	// Необходимо распределить коды маркировки по товарам
	Если ЕстьРеквизит(СтрокаДокумента, "Количество") Тогда
		
		Коэффициент = 1;
		Если ЕстьРеквизит(СтрокаДокумента, "Коэффициент")
			И СтрокаДокумента.Коэффициент > 0 Тогда
			
			Коэффициент = СтрокаДокумента.Коэффициент;
			
		КонецЕсли;
		
		КоличествоТовара = СтрокаДокумента.Количество * Коэффициент;
		
	Иначе
		
		КоличествоТовара = НайденныеСтроки.Количество();
		
	КонецЕсли;
	
	КонтрольныеИдентификационныеЗнаки = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнаки.Колонки.Добавить("КонтрольныйЗнак", ТипСтрока);
	
	ЗаполненныеСтроки = Новый Массив;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(Строка.КодМаркировки);
		
		Если ЭтоНеКодТовараВФорматеDataMatrixGS1(СтруктураМаркировки.ТипИдентификатораТовара) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПолучитьЗначениеПараметраСтруктуры(СтруктураМаркировки, "ПотребительскаяУпаковкаТабачнойПродукции", Ложь) Тогда
			
			Код = СтруктураМаркировки.ПредставлениеШтрихкодаБезКриптоХвоста;
			
		Иначе
			
			Код = "01" + СтруктураМаркировки.GTIN + "21" + СтруктураМаркировки.СерийныйНомер;
			
		КонецЕсли;
		
		НоваяСтрока = СведенияОМаркировке.Добавить();
		
		НоваяСтрокаКИЗ = КонтрольныеИдентификационныеЗнаки.Добавить();
		НоваяСтрокаКИЗ.КонтрольныйЗнак = Код;
		НоваяСтрока.Идентификатор = Новый Структура("КонтрольныеЗнаки", КонтрольныеИдентификационныеЗнаки);
		
		ЗаполненныеСтроки.Добавить(Строка);
		
	КонецЦикла;
	
	// Уберем указанные коды маркировки с рассмотрения
	Для Каждого ТекущаяСтрока Из ЗаполненныеСтроки Цикл
		
		КодыДокумента.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат СведенияОМаркировке;
	
КонецФункции

#КонецОбласти

#Область Получение

Функция НайтиСоздатьУПДДокументОПередаче_5_02(ДеревоДанных, СсылкаНаВладельца, СпособОбработки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполнения = Новый Структура("ЗаполнятьПоСтуктуре", Истина);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения, "СведенияОСчетеФактуре.Валюта.Код");
	ДополнитьДанныеЗаполненияВходящимДокументом("Документа", ДеревоДанных, ДанныеЗаполнения, "СведенияОСчетеФактуре.");
	ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения, "СведенияОСчетеФактуре.Исправление.");
	ДополнитьДанныеЗаполненияКонтрагентомИсточникТаблица(ДеревоДанных, ДанныеЗаполнения, Истина);
	ДополнитьДанныеЗаполненияОрганизациейИсточникТаблица(ДеревоДанных, ДанныеЗаполнения, Истина);
	ДополнитьДанныеЗаполненияГрузотправителемИсточникТаблица(ДеревоДанных, ДанныеЗаполнения, Истина);
	ДополнитьДанныеЗаполненияГрузополучателемИсточникТаблица(ДеревоДанных, ДанныеЗаполнения, Истина);
	ДополнитьДанныеЗаполненияПодразделениемКомпании(ДеревоДанных, ДанныеЗаполнения, Истина);
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОснованиемДокументаОтгрузки(ДеревоДанных, ДанныеЗаполнения);
	
	Если СпособОбработки = "ПоступлениеАвтомобилей" Тогда
		
		Если ЭтоУПДОтКоммитента(
				ДеревоДанных,
				"СведенияОСчетеФактуре.ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ") Тогда
			
			ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия);
			
		Иначе
			
			ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ПоступлениеАвтомобилей);
			
		КонецЕсли;
		
		ДополнитьДанныеЗаполненияАвтомобилями(ДеревоДанных, ДанныеЗаполнения, Истина);
		
		Возврат ЗаполнитьДокументПоступленияАвтомобилей(СсылкаНаВладельца, ДанныеЗаполнения);
		
	ИначеЕсли СпособОбработки = "ВозвратТоваровОтКлиента" Тогда
		
		ДополнитьДанныеЗаполненияТоварами(
			ДеревоДанных,
			ДанныеЗаполнения,
			"ВозвратОтПокупателя",
			Истина);
		
		Если ЭтоУПДОтКоммитента(ДеревоДанных) Тогда
			
			ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия);
			
		Иначе
			
			ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ВозвратТоваровОтПокупателя);
			
		КонецЕсли;
		
		Возврат ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеЗаполнения);
		
	ИначеЕсли СпособОбработки = "ПоступлениеДопРасходов" Тогда
		
		ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения,, Истина);
		Возврат ЗаполнитьДокументПоступлениеДопРасходов(СсылкаНаВладельца, ДанныеЗаполнения);
		
	Иначе
		
		Если ДанныеЗаполнения.Исправление Тогда
			
			ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения,, Истина);
			Возврат ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеЗаполнения);
			
		Иначе
			
			Если ЭтоУПДОтКоммитента(ДеревоДанных, "СведенияОСчетеФактуре.ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ") Тогда
				
				ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ПоступлениеТоваровКомиссия);
				
			ИначеЕсли СпособОбработки = "УслугиСтороннихОрганизаций" Тогда 
				
				ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.УслугиСтороннихОрганизаций);
				
			ИначеЕсли СпособОбработки = "УслугиПоСубподряду"  Тогда
				
				ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.УслугиПоСубподряду);
			Иначе
				
				ДанныеЗаполнения.Вставить("ХозОперация", Справочники.ХозОперации.ПоступлениеТоваров);
				
			КонецЕсли;
			
			ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения,, Истина);
			Возврат ЗаполнитьДокументПоступленияТоваров(СсылкаНаВладельца, ДанныеЗаполнения);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьУПДСчетФактуру_5_02(ДеревоДанных, СсылкаНаВладельца, СпособОбработки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполнения = Новый Структура("ЗаполнятьПоСтуктуре", Истина);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения, "СведенияОСчетеФактуре.Валюта.Код");
	ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения, "СведенияОСчетеФактуре.Исправление.");
	ДополнитьДанныеЗаполненияВходящимДокументом("Документа", ДеревоДанных, ДанныеЗаполнения, "СведенияОСчетеФактуре.");
	ДополнитьДанныеЗаполненияКонтрагентомИсточникТаблица(ДеревоДанных, ДанныеЗаполнения, Истина);
	ДополнитьДанныеЗаполненияОрганизациейИсточникТаблица(ДеревоДанных, ДанныеЗаполнения, Истина);
	ДополнитьДанныеЗаполненияГрузотправителемИсточникТаблица(ДеревоДанных, ДанныеЗаполнения, Истина);
	ДополнитьДанныеЗаполненияГрузополучателемИсточникТаблица(ДеревоДанных, ДанныеЗаполнения, Истина); 
	ДополнитьДанныеЗаполненияПодразделениемКомпании(ДеревоДанных, ДанныеЗаполнения, Истина);
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВидомСчетаФактуры(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОснованиемСчетаФактуры(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения, "СчетФактураПолученный", Истина);
	
	Возврат ЗаполнитьДокументСчетФактурыПолученого(СсылкаНаВладельца, ДанныеЗаполнения);
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область УПД

#Область Получение

Функция НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, СсылкаНаВладельца, СпособОбработки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполнения = Новый Структура("ЗаполнятьПоСтуктуре", Истина);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВходящимДокументом("Документа", ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияКонтрагентомИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОрганизациейИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияПодразделениемКомпании(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОснованиемДокументаОтгрузки(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения);
	
	Если СпособОбработки = "ПоступлениеАвтомобилей" Тогда
		
		Возврат ЗаполнитьДокументПоступленияАвтомобилей(СсылкаНаВладельца, ДанныеЗаполнения);
		
	ИначеЕсли СпособОбработки = "ВозвратТоваровОтКлиента" Тогда
		
		Возврат ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеЗаполнения);
		
	Иначе
		
		Если ДанныеЗаполнения.Исправление Тогда
			
			Возврат ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеЗаполнения);
			
		Иначе
			
			Возврат ЗаполнитьДокументПоступленияТоваров(СсылкаНаВладельца, ДанныеЗаполнения);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СсылкаНаВладельца, СпособОбработки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполнения = Новый Структура("ЗаполнятьПоСтуктуре", Истина);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВходящимДокументом("Документа", ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияКонтрагентомИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОрганизациейИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияПодразделениемКомпании(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВидомСчетаФактуры(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОснованиемСчетаФактуры(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияТоварами(ДеревоДанных, ДанныеЗаполнения);
	
	Возврат ЗаполнитьДокументСчетФактурыПолученого(СсылкаНаВладельца, ДанныеЗаполнения);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УКД

#Область Отправка

Функция ДайДанныеСчетаФактурыДляУКД(СчетФактура)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК СчетФактура,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументКорректировки,
		|	СчетФактураВыданный.Номер КАК Номер,
		|	СчетФактураВыданный.Дата КАК Дата,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов КАК Договор,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.ДатаНачала КАК ДоговорДата,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.НомерДоговора КАК ДоговорНомер,
		|	СчетФактураВыданный.Исправление КАК Исправление,
		|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
		|	СчетФактураВыданный.Дата КАК ДатаИсправления,
		|	СчетФактураВыданный.ЕстьКорректировка КАК ЕстьКорректировка,
		|	СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданный.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
		|	СчетФактураВыданный.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
		|	СчетФактураВыданный.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
		|	СчетФактураВыданный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	СчетФактураВыданный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
		|	СчетФактураВыданный.Организация КАК Организация,
		|	СчетФактураВыданный.Организация КАК ЮрФизЛицо,
		|	СчетФактураВыданный.Организация КАК Поставщик,
		|	СчетФактураВыданный.Контрагент КАК Покупатель,
		|	СчетФактураВыданный.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	СчетФактураВыданный.ДокументОснование.Менеджер КАК Менеджер,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	СчетФактураВыданный.ДокументОснование.Номер КАК ДокументОснованиеНомер,
		|	СчетФактураВыданный.ДокументОснование.Дата КАК ДокументОснованиеДата,
		|	СчетФактураВыданный.ПодразделениеКомпании КАК Подразделение,
		|	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
		|	СчетФактураВыданный.КурсДокумента КАК Курс,
		|	СчетФактураВыданный.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	СчетФактураВыданный.ДокументОснование.Менеджер КАК ОтпускПроизвел,
		|	СчетФактураВыданный.Организация.ИНН КАК ИННпоставщика,
		|	СчетФактураВыданный.Организация.КПП КАК КППпоставщика,
		|	СчетФактураВыданный.Контрагент.ИНН КАК ИННпокупателя,
		|	СчетФактураВыданный.Контрагент.КПП КАК КППпокупателя,
		|	СчетФактураВыданный.ХозОперация КАК ХозОперация,
		|	СчетФактураВыданный.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияТоваровКомиссия) КАК ЭтоКомиссия,
		|	СчетФактураВыданный.Ссылка КАК Ссылка,
		|	СчетФактураВыданный.ВалютаДокумента.Код КАК КодВалюты,
		|	СчетФактураВыданный.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	СчетФактураВыданный.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,  
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	СчетФактураВыданный.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументСМаркировкамиПосле,
		|	СчетФактураВыданный.ДокументОснование.ДокументОснование КАК ДокументСМаркировкамиДо,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.РеализацияТоваров
		|			ТОГДА ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.РеализацияТоваров).ПричинаВыводаИзОборота
		|		КОГДА СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ЗаказНаряд
		|			ТОГДА ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.ЗаказНаряд).ПричинаВыводаИзОборота
		|		КОГДА СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.КорректировкаРеализации).ПричинаВыводаИзОборота
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныВыбытияМаркируемойПродукции.ПустаяСсылка)
		|	КОНЕЦ КАК ПричинаВыводаИзОборота
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &СчетФактура"
	);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Товар,
		|	КорректировкаРеализацииТовары.Номенклатура,
		|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
		| ВЫБОР
		|		КОГДА КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ТОГДА КорректировкаРеализацииТовары.Номенклатура.Наименование + "" "" + КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры.Наименование
		|		ИНАЧЕ КорректировкаРеализацииТовары.Номенклатура.Наименование
		|	КОНЕЦ КАК ТоварНаименование,
		|	КорректировкаРеализацииТовары.Количество КАК Количество,
		|	КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации КАК КоличествоДоКорректировки,
		|	КорректировкаРеализацииТовары.КоличествоРазница,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмерения,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.Коэффициент,
		|	КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.Цена,
		|	КорректировкаРеализацииТовары.Сумма,
		|	КорректировкаРеализацииТовары.СтавкаНДС,
		|	КорректировкаРеализацииТовары.СуммаНДС,
		|	КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.СуммаНДСРазница,
		|	КорректировкаРеализацииТовары.СуммаВсего,
		|	КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.СуммаВсегоРазница,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодДоКорректировки,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименованиеДоКорректировки,
		|	КорректировкаРеализацииТовары.ИдентификаторТовара КАК ИдентификаторТовара
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|ГДЕ
		|	КорректировкаРеализацииТовары.Ссылка = &ДокументКорректировки
		|	И (КорректировкаРеализацииТовары.КоличествоРазница <> 0
		|	ИЛИ КорректировкаРеализацииТовары.СуммаВсегоРазница <> 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	КорректировкаРеализацииРаботы.Авторабота,
		|	НЕОПРЕДЕЛЕНО,
		|	КорректировкаРеализацииРаботы.Авторабота.Наименование,
		|	КорректировкаРеализацииРаботы.Количество,
		|	КорректировкаРеализацииРаботы.КоличествоПоДокументуРеализации,
		|	КорректировкаРеализацииРаботы.КоличествоРазница,
		|	КорректировкаРеализацииРаботы.Нормочас,
		|	КорректировкаРеализацииРаботы.Нормочас,
		|	КорректировкаРеализацииРаботы.Коэффициент,
		|	КорректировкаРеализацииРаботы.КоэффициентПоДокументуРеализации,
		|	КорректировкаРеализацииРаботы.Цена,
		|	КорректировкаРеализацииРаботы.Сумма,
		|	КорректировкаРеализацииРаботы.СтавкаНДС,
		|	КорректировкаРеализацииРаботы.СуммаНДС,
		|	КорректировкаРеализацииРаботы.СуммаНДСПоДокументуРеализации,
		|	КорректировкаРеализацииРаботы.СуммаНДСРазница,
		|	КорректировкаРеализацииРаботы.СуммаВсего,
		|	КорректировкаРеализацииРаботы.СуммаВсегоПоДокументуРеализации,
		|	КорректировкаРеализацииРаботы.СуммаВсегоРазница,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	КорректировкаРеализацииРаботы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	""""
		|ИЗ
		|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииРаботы
		|ГДЕ
		|	КорректировкаРеализацииРаботы.Ссылка = &ДокументКорректировки
		|	И (КорректировкаРеализацииРаботы.КоличествоРазница <> 0
		|	ИЛИ КорректировкаРеализацииРаботы.СуммаВсегоРазница <> 0)"
	);
	Запрос.УстановитьПараметр("ДокументКорректировки", Шапка.ДокументКорректировки);
	Товары = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
	Возврат Новый Структура("Шапка,Товары", Шапка, Товары);
	
КонецФункции

Функция ЗаполнитьДеревоДанныхУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	Шапка = ДанныеДляФормированияЭД.Шапка;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"СсылкаКорректировочногоСчетаФактуры",
		Шапка.СчетФактура
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"СодержаниеОперации",
		"Предлагаю изменить стоимость"
	);
	
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Шапка);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", НомерДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  Шапка.Дата);
	
	Если Шапка.Исправление Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"НомерИсправления",
			Шапка.НомерИсправления
		);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"ДатаИсправления",
			Шапка.ДатаИсправления
		);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шапка.НомерИсходногоДокумента) Тогда
		
		НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(
			Новый Структура("Номер", Шапка.НомерИсходногоДокумента));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", НомерДокумента);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"ДатаИсходногоДокумента",
			Шапка.ДатаИсходногоДокумента
		);
		
		Если Шапка.УчитыватьИсправлениеИсходногоДокумента Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				"НомерИсправленияИсходногоДокумента",
				Шапка.НомерИсправленияИсходногоДокумента
			);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				"ДатаИсправленияИсходногоДокумента",
				Шапка.ДатаИсправленияИсходногоДокумента
			);
			
		КонецЕсли;
			
	КонецЕсли;
	
	СведенияОПокупателе = Новый Структура;
	СведенияОПоставщике = Новый Структура; 
	
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Покупатель, СведенияОПокупателе);
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Шапка.Поставщик, СведенияОПоставщике);
	СведенияОПокупателе.ИНН = Шапка.ИННпокупателя;
	СведенияОПокупателе.КПП = Шапка.КППпокупателя;
	СведенияОПоставщике.ИНН = Шапка.ИННпоставщика;
	СведенияОПоставщике.КПП = Шапка.КППпоставщика;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр");
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"СоставительДокументаНаименование",
		СведенияОПоставщике.ПолноеНаименование
	);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", Шапка.КодВалюты);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование",
		Шапка.НаименованиеПолноеВалюты
	);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс",
		Шапка.Курс
	);
	
	ДокументыОснования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Шапка.ДокументКорректировки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ДокументыОснованияСчетаФактуры",
		ДокументыОснования
	);
	
	Возврат ДеревоДанных;
	
КонецФункции

#КонецОбласти

#Область Получение

Функция НайтиСоздатьУКДДокументКорректировки(ДеревоДанных, СсылкаНаВладельца, СпособОбработки)
	
	ДанныеЗаполнения = Новый Структура(
		"ЗаполнятьПоСтуктуре,ХозОперация,СсылкаНаВладельца",
		Истина,
		Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон,
		СсылкаНаВладельца
	);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВходящимДокументом("Документа", ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсходнымДокументом(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияКонтрагентомИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОрганизациейИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияПодразделениемКомпанииИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОснованиемСчетаФактуры(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияТоварамиУКД(ДеревоДанных, ДанныеЗаполнения, "КорректировкаПоступления");
	
	Если ДанныеЗаполнения.Исправление Тогда
		
		ДанныеЗаполнения.ХозОперация =  Справочники.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах;
		
	КонецЕсли;
	
	Возврат ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеЗаполнения);
	
КонецФункции

Функция НайтиСоздатьУКДКорректировочныйСчетФактуру(ДеревоДанных, СсылкаНаВладельца, СпособОбработки)
	
	ДанныеЗаполнения = Новый Структура(
		"ЗаполнятьПоСтуктуре,ХозОперация",
		Истина,
		Справочники.ХозОперации.СчетФактураПолученныйКорректировка
	);
	ДополнитьДанныеЗаполненияВалютой(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсправлением(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияВходящимДокументом("Документа", ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияИсходнымДокументом(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияКонтрагентомИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОрганизациейИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияПодразделениемКомпанииИсточникГруппа(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияДоговорВзаиморасчетов(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияОснованиемСчетаФактуры(ДеревоДанных, ДанныеЗаполнения);
	ДополнитьДанныеЗаполненияТоварамиУКД(ДеревоДанных, ДанныеЗаполнения, "СчетФактураПолученный");
	
	Возврат ЗаполнитьДокументСчетФактурыПолученогоУКД(СсылкаНаВладельца, ДанныеЗаполнения);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПередачаТоваров

#Область Отправка

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных,
                                   СведенияОбУчастнике,
                                   ВидУчастника,
                                   ВидАдреса = "Юр",
                                   КорневойЭлементДерева = "",
                                   ДатаКИ = Неопределено,
                                   УчитыватьГоловногоКонтрагента = Ложь) Экспорт
	
	ЕстьГоловнойКонтрагент = УчитыватьГоловногоКонтрагента И СведенияОбУчастнике.Свойство("ГоловнойКонтрагент")
		И СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ФормыСобственности.ОбособленноеПодразделение;
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ФормыСобственности.ЮридическоеЛицо
		ИЛИ СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
		
		СохранитьРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);
		СохранитьРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);
			
		СохранитьРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			?(ЕстьГоловнойКонтрагент, СведенияОбУчастнике.ГоловнойКонтрагент.НаименованиеПолное, СведенияОбУчастнике.ПолноеНаименование));
	
	Иначе
			
		ПутьКРеквизитуДерева = ВидУчастника + ".ТипУчастника";	
		
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПутьКРеквизитуДерева + ".ИП") Тогда
			
			ПутьКРеквизитуДерева = ПутьКРеквизитуДерева + ".ИП";
			
		Иначе
			
			ПутьКРеквизитуДерева = ПутьКРеквизитуДерева + ".ФЛ";
			
		КонецЕсли;
		
		СуществуетРеквизитПолноеНаименование = ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных,
			ПутьКРеквизитуДерева + ".ПолноеНаименование");
		
		Если СуществуетРеквизитПолноеНаименование Тогда
			
			СохранитьРеквизитВДереве(ДеревоДанных, ПутьКРеквизитуДерева + ".ПолноеНаименование",
				СведенияОбУчастнике.ПолноеНаименование);
				
		КонецЕсли;
		
		СохранитьРеквизитВДереве(ДеревоДанных, ПутьКРеквизитуДерева + ".ИНН", СведенияОбУчастнике.ИНН);
		СохранитьРеквизитВДереве(ДеревоДанных, ПутьКРеквизитуДерева + ".Фамилия", СведенияОбУчастнике.Фамилия);
		СохранитьРеквизитВДереве(ДеревоДанных, ПутьКРеквизитуДерева + ".Имя", СведенияОбУчастнике.Имя);
		СохранитьРеквизитВДереве(ДеревоДанных, ПутьКРеквизитуДерева + ".Отчество", СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура;  
	ТекстОшибки = "";
	ПолучитьАдресСтруктурой(
		АдресУчастника,
		СведенияОбУчастнике,
		?(ЕстьГоловнойКонтрагент, "ГоловнойКонтрагент", "Ссылка"),
		ВидАдреса,
		ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Если ЗначениеЗаполнено(АдресУчастника.АдресТекст) Тогда
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Адрес.Иностранный") Тогда
				ТипАдреса = "Иностранный";
			Иначе
				ТипАдреса = "Произвольный";
			КонецЕсли;	
			ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева);
			
		КонецЕсли; 
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Контакт.Телефон",
			СведенияОбУчастнике.Телефоны,
			КорневойЭлементДерева
		);
		
	КонецЕсли;	
	
	НомерСчета = "";
	
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета)
		И ЗначениеЗаполнено(НомерСчета)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		
		Банк = "";
		БИК = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".БанковскийСчет.НомерСчета",
			НомерСчета,
			КорневойЭлементДерева
		);
		
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				
				БанкНаименование = Банк;
				
			Иначе
				
				БанкНаименование = Банк.Наименование;
				
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НаимБанк",
				БанкНаименование,
				КорневойЭлементДерева
			);
			
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.БИК",
				БИК,
				КорневойЭлементДерева
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Значение = "";
	ПолныйПуть = ВидУчастника + ".Руководитель";
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ПолныйПуть + ".Фамилия",
			Значение.Фамилия,
			КорневойЭлементДерева
		);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ПолныйПуть + ".Имя",
			Значение.Имя,
			КорневойЭлементДерева
		);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ПолныйПуть + ".Отчество",
			Значение.Отчество,
			КорневойЭлементДерева
		);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ПолныйПуть + ".Должность",
			Значение.Должность,
			КорневойЭлементДерева
		);
		
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ПолныйПуть,
			Значение,
			КорневойЭлементДерева
		);
		
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ПолныйПуть,
			Значение,
			КорневойЭлементДерева
		);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.КоличествоМест) Тогда
		
		КоличествоМест = ДанныеСтроки.КоличествоМест;
		
		Если КоличествоМест <> Цел(КоличествоМест) Тогда
			
			КоличествоМест = Цел(КоличествоМест) + 1;
			
		КонецЕсли;
		
	Иначе
		
		КоличествоМест = 0;
		
	КонецЕсли;
	
	ИтоговыеСуммы.КоличествоМест = ИтоговыеСуммы.КоличествоМест + КоличествоМест;
	ИтоговыеСуммы.СуммаБезНДС    = ИтоговыеСуммы.СуммаБезНДС + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.СуммаНДС       = ИтоговыеСуммы.СуммаНДС + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.СуммаСНДС      = ИтоговыеСуммы.СуммаСНДС + ДанныеСтроки.СуммаВсего;
	ИтоговыеСуммы.МассаНетто     = ИтоговыеСуммы.МассаНетто + ДанныеСтроки.МассаНетто;
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей + 1;
			
КонецПроцедуры

#КонецОбласти

#Область Получение

Процедура ДополнитьДанныеЗаполненияТоварамиТОРГ12(ДеревоДанных, ДанныеЗаполнения)
	
	Товары = НоваяТаблицаТоваров("ПоступлениеТоваров");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();		
		ЗаполнитьСлужебныеРеквизитыПозицииТовара(НоваяСтрока);
		ЗаполнитьТоварыСопоставленнымиДаннымиТОРГ12(СведенияОТоваре, НоваяСтрока);
		ЗаполнитьТоварыСуммамиТОРГ12(СведенияОТоваре, НоваяСтрока);
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("Товары", Товары);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыСопоставленнымиДаннымиТОРГ12(СведенияОТоваре, ПозицияТовара)
	
	Сопоставление = СведенияОТоваре.Строки.Найти(
		"ТаблицаТоваров.НомерСтроки.Сопоставление",
		"ПолныйПуть",
		Истина
	);
	
	Если Сопоставление <> Неопределено Тогда
		
		Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.Сопоставление.НоменклатураИБ");
	
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			ПозицияТовара.Номенклатура = Номенклатура;
			
		КонецЕсли;
		
		Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.Сопоставление.ХарактеристикаИБ");
	
		Если ЗначениеЗаполнено(Характеристика) Тогда
			
			ПозицияТовара.Характеристика = Характеристика;
			
		КонецЕсли;
		
		Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.Сопоставление.УпаковкаИБ");
	
		Если ЗначениеЗаполнено(Упаковка) Тогда
			
			ПозицияТовара.ЕдиницаИзмерения = Упаковка;
			
			Если ТипЗнч(Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				
				ПозицияТовара.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
				
			Иначе
				
				ПозицияТовара.Коэффициент = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьТоварыСуммамиТОРГ12(СведенияОТоваре, ПозицияТовара)
	
	ПозицияТовара.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаТоваров.НомерСтроки.КоличествоМест");
	ПозицияТовара.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаТоваров.НомерСтроки.Цена");
	ПозицияТовара.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
	ПозицияТовара.СуммаВсего = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаТоваров.НомерСтроки.СуммаСНДС");
	ПозицияТовара.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаТоваров.НомерСтроки.СтавкаНДС");
	ПозицияТовара.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаТоваров.НомерСтроки.СуммаНДС");  
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияТовара, "КоличествоБазовое") Тогда
		
		ПозицияТовара.КоличествоБазовое = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.КоличествоВОдномМесте");
		
	КонецЕсли;
	
	Если ПозицияТовара.Количество = 0 Тогда
		
		ПозицияТовара.Количество = 1;
		
	КонецЕсли;
	
	Если ПозицияТовара.Цена = 0 Тогда
		
		ПозицияТовара.Цена = ПозицияТовара.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияАвтомобилямиТОРГ12(ДеревоДанных, ДанныеЗаполнения)
	
	Автомобили = НоваяТаблицаАвтомобилей();
	
	СведенияОбАвтомобилях = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	
	Для Каждого СведенияОбАвтомобиле Из СведенияОбАвтомобилях.Строки Цикл
		
		Сопоставление = СведенияОбАвтомобиле.Строки.Найти(
		"ТаблицаТоваров.НомерСтроки.Сопоставление",
		"ПолныйПуть",
		Истина
		);
		
		Если Сопоставление <> Неопределено Тогда
			
			Автомобиль = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбАвтомобиле,
			"ТаблицаТоваров.НомерСтроки.Сопоставление.НоменклатураИБ");
			
			Если ЗначениеЗаполнено(Автомобиль)
				И ТипЗнч(Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
				
				НоваяСтрока = Автомобили.Добавить();		
				НоваяСтрока.Автомобиль = Автомобиль;
				НоваяСтрока.VIN = Автомобиль.VIN;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		ЗаполнитьТоварыСуммамиТОРГ12(СведенияОбАвтомобиле, НоваяСтрока);
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("Автомобили", Автомобили);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПередачаРезультатовРабот

#Область Получение

Процедура ДополнитьДанныеЗаполненияТоварамиАкт501(ДеревоДанных, ДанныеЗаполнения)
	
	Товары = НоваяТаблицаТоваров("ПоступлениеТоваров");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();		
		ЗаполнитьСлужебныеРеквизитыПозицииТовара(НоваяСтрока);
		ЗаполнитьТоварыСопоставленнымиДаннымиАкт501(СведенияОТоваре, НоваяСтрока);
		ЗаполнитьТоварыСуммамиАкт501(СведенияОТоваре, НоваяСтрока);
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("Товары", Товары);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыСопоставленнымиДаннымиАкт501(СведенияОТоваре, ПозицияТовара)
	
	Сопоставление = СведенияОТоваре.Строки.Найти(
		"ТаблицаУслуг.НомерСтроки.Сопоставление",
		"ПолныйПуть",
		Истина
	);
	
	Если Сопоставление <> Неопределено Тогда
		
		Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаУслуг.НомерСтроки.Сопоставление.НоменклатураИБ");
	
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			ПозицияТовара.Номенклатура = Номенклатура;
			
		КонецЕсли;
		
		Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаУслуг.НомерСтроки.Сопоставление.ХарактеристикаИБ");
	
		Если ЗначениеЗаполнено(Характеристика) Тогда
			
			ПозицияТовара.Характеристика = Характеристика;
			
		КонецЕсли;
		
		Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаУслуг.НомерСтроки.Сопоставление.УпаковкаИБ");
	
		Если ЗначениеЗаполнено(Упаковка) Тогда
			
			ПозицияТовара.ЕдиницаИзмерения = Упаковка;
			
			Если ТипЗнч(Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				
				ПозицияТовара.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
				
			Иначе
				
				ПозицияТовара.Коэффициент = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьТоварыСуммамиАкт501(СведенияОТоваре, ПозицияТовара)
	
	ПозицияТовара.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаУслуг.НомерСтроки.Количество");
	ПозицияТовара.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаУслуг.НомерСтроки.Цена");
	ПозицияТовара.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
	ПозицияТовара.СуммаВсего = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаУслуг.НомерСтроки.СуммаСНДС");
	ПозицияТовара.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаУслуг.НомерСтроки.СуммаНДС");
	ПозицияТовара.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаУслуг.НомерСтроки.СуммаНДС");
	ПозицияТовара.КоличествоБазовое = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		"ТаблицаУслуг.НомерСтроки.Количество");
	
	Если ПозицияТовара.Количество = 0 Тогда
		
		ПозицияТовара.Количество = 1;
		
	КонецЕсли;
	
	Если ПозицияТовара.Цена = 0 Тогда
		
		ПозицияТовара.Цена = ПозицияТовара.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область АктСверкиВзаиморасчетов

Функция ЭтоАктСверки(Объект)
	
	Возврат ЗначениеЗаполнено(Объект) И ТипЗнч(Объект) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов");
	
КонецФункции

Функция ТекстЗапросаАктаСверкиДанныеОтправителя()
	
	Возврат
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.Номер КАК Номер,
	|	АктСверкиВзаиморасчетов.Дата КАК Дата,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	ЕСТЬNULL(Валюты.Код, ""643"") КАК КодВалюты
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО АктСверкиВзаиморасчетов.ВалютаДокумента = Валюты.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.УвеличениеДолга) КАК УвеличениеДолга,
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.УменьшениеДолга) КАК УменьшениеДолга
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дата КАК Дата,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Документ КАК Документ,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Представление КАК Представление,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Сделка КАК Сделка,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.УвеличениеДолга КАК СуммаДебет,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.УменьшениеДолга КАК СуммаКредит,
	|	ЕСТЬNULL(ДоговорыВзаиморасчетов.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговора,
	|	ЕСТЬNULL(ДоговорыВзаиморасчетов.НомерДоговора, """") КАК НомерДоговора,
	|	ЕСТЬNULL(ДоговорыВзаиморасчетов.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.ПустаяСсылка)) КАК ВидДоговора,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперации,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерДокумента КАК НомерДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дата КАК ДатаОперации,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НаименованиеДокумента КАК НаименованиеДокумента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
	|		ПО АктСверкиВзаиморасчетовПоДаннымОрганизации.ДоговорВзаиморасчетов = ДоговорыВзаиморасчетов.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(НомерДоговора),
	|	МАКСИМУМ(ВидДоговора)
	|ПО
	|	ДоговорВзаиморасчетов";
	
КонецФункции

Функция ТекстЗапросаАктаСверкиДанныеПолучателя()
	
	Возврат
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.ЕстьРасхождения КАК ЕстьРасхождения,
	|	АктСверкиВзаиморасчетов.СверкаСогласована КАК СверкаСогласована
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.УвеличениеДолга) КАК УвеличениеДолга,
	|	СУММА(АктСверкиВзаиморасчетовПоДаннымОрганизации.УменьшениеДолга) КАК УменьшениеДолга
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дата КАК Дата,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Документ КАК Документ,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Представление КАК Представление,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Сделка КАК Сделка,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.УвеличениеДолга КАК СуммаДебет,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.УменьшениеДолга КАК СуммаКредит,
	|	ЕСТЬNULL(ДоговорыВзаиморасчетов.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговора,
	|	ЕСТЬNULL(ДоговорыВзаиморасчетов.НомерДоговора, """") КАК НомерДоговора,
	|	ЕСТЬNULL(ДоговорыВзаиморасчетов.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.ПустаяСсылка)) КАК ВидДоговора,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперации,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерДокумента КАК НомерДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дата КАК ДатаОперации,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НаименованиеДокумента КАК НаименованиеДокумента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
	|		ПО АктСверкиВзаиморасчетовПоДаннымОрганизации.ДоговорВзаиморасчетов = ДоговорыВзаиморасчетов.Ссылка
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(НомерДоговора),
	|	МАКСИМУМ(ВидДоговора)
	|ПО
	|	ДоговорВзаиморасчетов";
	
КонецФункции

Процедура ЗаполнитьРеквизитыУчастника(ДеревоДанных, Участник, ВидУчастника)
	
	СведенияОбУчастнике = ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица();
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Участник, СведенияОбУчастнике);
	
	Если СведенияОбУчастнике.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.ИдентификаторОрганизации", СведенияОбУчастнике.НалоговыйНомерВСтранеРегистрации);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ОГРН", СведенияОбУчастнике.ОГРН);
		
	Иначе
		
		ТипУчастника = ".ТипУчастника.ИП";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".ИНН", СведенияОбУчастнике.ИНН);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ОГРН", СведенияОбУчастнике.ОГРН);
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".Фамилия", ФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".Имя", ФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".Отчество", ФИО.Отчество);
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.Телефон", СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияПоДоговорам()
	
	СведенияПоДоговорам = Новый ТаблицаЗначений;
	СведенияПоДоговорам.Колонки.Добавить("НомерСтроки");
	СведенияПоДоговорам.Колонки.Добавить("НомерДоговора", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	СведенияПоДоговорам.Колонки.Добавить("ДатаДоговора");
	СведенияПоДоговорам.Колонки.Добавить("ОписаниеДоговора", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)));
	СведенияПоДоговорам.Колонки.Добавить("СведенияПоДокументам");
	
	Возврат СведенияПоДоговорам;
	
КонецФункции

Функция СведенияПоДокументам()
	
	СведенияПоДокументам = Новый ТаблицаЗначений;
	СведенияПоДокументам.Колонки.Добавить("НомерСтроки");
	СведенияПоДокументам.Колонки.Добавить("НаименованиеДокумента", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	СведенияПоДокументам.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	СведенияПоДокументам.Колонки.Добавить("ДатаДокумента");
	СведенияПоДокументам.Колонки.Добавить("СведенияПоОперациям");
	
	Возврат СведенияПоДокументам;
	
КонецФункции

Функция СведенияПоОперациям()
	
	СведенияПоОперациям = Новый ТаблицаЗначений;
	СведенияПоОперациям.Колонки.Добавить("НомерСтроки");
	СведенияПоОперациям.Колонки.Добавить("ПорядковыйНомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	СведенияПоОперациям.Колонки.Добавить("ДатаОперации");
	СведенияПоОперациям.Колонки.Добавить("НаименованиеОперации", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)));
	СведенияПоОперациям.Колонки.Добавить("СуммаДебет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СведенияПоОперациям.Колонки.Добавить("СуммаКредит", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Возврат СведенияПоОперациям;
	
КонецФункции

Функция ШапкаАктаСверкиВзаиморасчетов()
	
	Шапка = Новый Структура;
	Шапка.Вставить("ЗаполнятьПоСтуктуре", Истина);
	Шапка.Вставить("ЭтоЭлектронныйДокумент", Истина);
	Шапка.Вставить("ДокументКонтрагента", Истина);
	Шапка.Вставить("ДатаНачала");
	Шапка.Вставить("ДатаОкончания");
	Шапка.Вставить("НомерВходящегоДокумента");
	Шапка.Вставить("ДатаВходящегоДокумента");
	Шапка.Вставить("Контрагент");
	Шапка.Вставить("Организация");
	Шапка.Вставить("ПодразделениеКомпании");
	Шапка.Вставить("ВалютаДокумента");
	Шапка.Вставить("ОстатокНаНачалоПоКонтрагенту");
	Шапка.Вставить("Ссылка", Документы.АктСверкиВзаиморасчетов.ПустаяСсылка());
	Шапка.Вставить("ХозОперация", Справочники.ХозОперации.АктСверкиВзаиморасчетов);
	
	Возврат Шапка;
	
КонецФункции

Процедура ЗаполнитьДокументАктСверкиВзаиморасчетов(ДокументУчета, ДанныеДляЗаполнения, ОписаниеОшибки)
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Шапка = ДанныеДляЗаполнения.Шапка;
	
	Если ЗначениеЗаполнено(ДокументУчета) Тогда // Получены изменения по существующему документу
		ДокументОбъект = ДокументУчета.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.ТекущийПользователь();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, Шапка);
	ДокументОбъект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	Документы.АктСверкиВзаиморасчетов.ЗаполнитьВзаиморасчетыПоДаннымОрганизации(ДокументОбъект);
	ДокументОбъект.ПоДаннымКонтрагента.Загрузить(ДанныеДляЗаполнения.ПоДаннымКонтрагента);
	Документы.АктСверкиВзаиморасчетов.СопоставитьДанныеОрганизацииИКонтрагента(ДокументОбъект);
	
	ДокументОбъект.СверкаСогласована = Не ДокументОбъект.ЕстьРасхождения;
	Документы.АктСверкиВзаиморасчетов.РассчитатьИтогиОперации(ДокументОбъект);

	ЗаписатьДокумент(ДокументОбъект, ДокументУчета);
	Если Не ЗначениеЗаполнено(ДокументУчета) Тогда
		ДокументУчета = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоговорВзаиморасчетовПоСтрокеАктаСверки(ДанныеДокумента, РеквизитыДоговора)
	
	ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
	ОписаниеДоговора = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(РеквизитыДоговора,
		"СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.ОписаниеДоговора");
	Если ОписаниеДоговора = "С покупателем" Тогда
		ВидДоговора = Перечисления.ВидыДоговоров.Покупка;
	ИначеЕсли ОписаниеДоговора = "С поставщиком" Тогда
		ВидДоговора = Перечисления.ВидыДоговоров.Продажа;
	Иначе
		ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВалютаВзаиморасчетов", ДанныеДокумента.ВалютаДокумента);
	ДополнительныеПараметры.Вставить("Организация", ДанныеДокумента.Организация);
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", ДанныеДокумента.ПодразделениеКомпании);
	ДополнительныеПараметры.Вставить("Дата", ДанныеДокумента.ДатаВходящегоДокумента);
	
	Возврат ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(
		ДанныеДокумента.Контрагент,
		ВидДоговора,
		ДанныеДокумента,
		ДополнительныеПараметры);
	
КонецФункции

Функция ПодготовитьДанныеДляАктСверкиВзаиморасчетовПолученОтветныйТитул(ДанныеДокумента, ОбъектыУчета)
	
	ДанныеЗаполнения = Новый Структура();
	
	Если ОбъектыУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	Основание = ОбъектыУчета[0];
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	ПараметрыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
		"Ссылка,Дата,ХозОперация,ВалютаДокумента,Организация,ПодразделениеКомпании,Контрагент,ПоДаннымОрганизации,ОстатокНаНачало");
	ПараметрыОснования.Вставить("ДатаВходящегоДокумента", ПараметрыОснования.Дата);
	ПараметрыОснования.Удалить("Дата");
	ДеревоДанных = ДанныеДокумента.НовыйЭД.ЗначениеРеквизита;
	
	Шапка = Новый Структура;
	
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПризнакНаличияРазногласий") Тогда
		Шапка.Вставить("СверкаСогласована", Ложь);
		Шапка.Вставить("ОстатокНаНачалоПоКонтрагенту",
			ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				ДеревоДанных,
				"СведенияПолучателя.СальдоНаНачалоПериодаДебет")
			- ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				ДеревоДанных,
				"СведенияПолучателя.СальдоНаНачалоПериодаКредит"));
	Иначе
		Шапка.Вставить("СверкаСогласована", Истина);
		Шапка.Вставить("ОстатокНаНачалоПоКонтрагенту", - ПараметрыОснования.ОстатокНаНачало);
		ДанныеЗаполнения.Вставить("Шапка", Шапка);
		ПоДаннымКонтрагента = Документы.АктСверкиВзаиморасчетов.ДанныеКонтрагентаПоДаннымОрганизации(
			ПараметрыОснования.ПоДаннымОрганизации.Выгрузить());
		ДанныеЗаполнения.Вставить("ПоДаннымКонтрагента", ПоДаннымКонтрагента);
		ДанныеЗаполнения.Вставить("Основание", Основание);
		
		Возврат ДанныеЗаполнения;
		
	КонецЕсли;
	
	ПоДаннымКонтрагента = Новый ТаблицаЗначений;
	Для Каждого Реквизит Из Метаданные.Документы.АктСверкиВзаиморасчетов.ТабличныеЧасти.ПоДаннымКонтрагента.Реквизиты Цикл
		ПоДаннымКонтрагента.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	СведенияПоДоговорам =
		ДеревоДанных.Строки.Найти("СведенияПолучателя", "ПолныйПуть").
		Строки.Найти("СведенияПолучателя.СведенияПоДоговорам", "ПолныйПуть").Строки;
	
	Для Каждого СтрокаДоговора Из СведенияПоДоговорам Цикл
		СведенияПоДокументам =
			СтрокаДоговора.Строки.Найти(
				"СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам",
				"ПолныйПуть").Строки;
		Для Каждого СтрокаДокумента Из СведенияПоДокументам Цикл
			СведенияПоОперациям = СтрокаДокумента.Строки.Найти(
				"СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям",
				"ПолныйПуть").Строки;
			Для Каждого СтрокаОперации Из СведенияПоОперациям Цикл
				
				СтрокаПоДаннымКонтрагента  = ПоДаннымКонтрагента.Добавить();
				СтрокаПоДаннымКонтрагента.ДоговорВзаиморасчетов = ДоговорВзаиморасчетовПоСтрокеАктаСверки(ПараметрыОснования, СтрокаДоговора);
				СтрокаПоДаннымКонтрагента.Дата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОперации,
					"СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям.НомерСтроки.ДатаОперации");
				СтрокаПоДаннымКонтрагента.НаименованиеОперации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОперации,
					"СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям.НомерСтроки.НаименованиеОперации");
				СтрокаПоДаннымКонтрагента.НаименованиеДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаДокумента,
					"СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.НаименованиеДокумента");
				СуммаДебет = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОперации,
					"СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям.НомерСтроки.СуммаДебет");
				СуммаКредит = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОперации,
					"СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям.НомерСтроки.СуммаКредит");
				Если СуммаДебет <> Неопределено И СуммаДебет > 0 Тогда
					СтрокаПоДаннымКонтрагента.УвеличениеДолга = СуммаДебет;
				ИначеЕсли СуммаДебет <> Неопределено И СуммаДебет < 0 Тогда
					СтрокаПоДаннымКонтрагента.УменьшениеДолга = - СуммаДебет;
				КонецЕсли;
				Если СуммаКредит <> Неопределено И СуммаКредит > 0 Тогда
					СтрокаПоДаннымКонтрагента.УменьшениеДолга = СуммаКредит + СтрокаПоДаннымКонтрагента.УменьшениеДолга;
				ИначеЕсли СуммаКредит <> Неопределено И СуммаКредит < 0 Тогда
					СтрокаПоДаннымКонтрагента.УвеличениеДолга = - СуммаКредит + СтрокаПоДаннымКонтрагента.УвеличениеДолга;
				КонецЕсли;
				СтрокаПоДаннымКонтрагента.НомерДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаДокумента,
					"СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.НомерДокумента");
				СтрокаПоДаннымКонтрагента.ДатаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаДокумента,
					"СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.ДатаДокумента");
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("Шапка", Шапка);
	ДанныеЗаполнения.Вставить("ПоДаннымКонтрагента", ПоДаннымКонтрагента);
	ДанныеЗаполнения.Вставить("Основание", Основание);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ЗаполнитьАктСверкиВзаиморасчетовИсходящийОтветнымТитулом(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Шапка = ДанныеЗаполнения.Шапка;
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	ДокументУчета = ДанныеЗаполнения.Основание;
	ДокументОбъект = ДокументУчета.ПолучитьОбъект();
	Если ДокументОбъект.Проведен Тогда 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Шапка, "ОстатокНаНачалоПоКонтрагенту,СверкаСогласована");
	ДокументОбъект.ПоДаннымКонтрагента.Загрузить(ДанныеЗаполнения.ПоДаннымКонтрагента); 
	Документы.АктСверкиВзаиморасчетов.СопоставитьДанныеОрганизацииИКонтрагента(ДокументОбъект);
	
	ЗаписатьДокумент(ДокументОбъект, ДокументУчета);
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеДанныхИзБазы

Функция ИнформацияПокупателяУПД(Основания)
	
	ДокументОснование = Документы.СчетФактураПолученный.ПустаяСсылка();
	
	Для Каждого Основание Из Основания Цикл
		
		ДокументОснование = Основание;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПоступлениеТоваров.Дата КАК ДатаПолученияТоваров,
		|	ПоступлениеТоваров.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ПоступлениеТоваров.ХозОперация В (ЗНАЧЕНИЕ(Справочник.ХозОперации.УслугиПоСубподряду),
		|		ЗНАЧЕНИЕ(Справочник.ХозОперации.УслугиСтороннихОрганизаций)) КАК ЭтоАкт
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|ГДЕ
		|	ПоступлениеТоваров.Ссылка = &Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураПолученный.Дата КАК ДатаПолученияТоваров,
		|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	СчетФактураПолученный.ДокументОснование.ХозОперация В (ЗНАЧЕНИЕ(Справочник.ХозОперации.УслугиПоСубподряду),
		|		ЗНАЧЕНИЕ(Справочник.ХозОперации.УслугиСтороннихОрганизаций)) КАК ЭтоАкт
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.Ссылка = &Основание"
	);
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура(
		"СодержаниеОперации,ДатаПолученияТоваров,ОрганизацияНаименованиеПолное,КодИтога",
		"-",
		ТекущаяДатаСеанса(),
		"-",
		"1"
	);
	
	Если Не РезультатыЗапроса[0].Пустой() Тогда
		
		ПоступлениеТоваров = РезультатыЗапроса[0].Выбрать();
		ПоступлениеТоваров.Следующий();
		
		Если ПоступлениеТоваров.ЭтоАкт Тогда
			
			Результат.СодержаниеОперации = НСтр("ru = 'Услуги получены, претензий нет.'");
			
		Иначе
			
			Результат.СодержаниеОперации = НСтр("ru = 'Товары и услуги принял без претензий.'");
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, ПоступлениеТоваров);
		
	ИначеЕсли Не РезультатыЗапроса[1].Пустой() Тогда
		
		СчетФактура = РезультатыЗапроса[1].Выбрать();
		СчетФактура.Следующий();
		
		Если СчетФактура.ЭтоАкт Тогда
			
			Результат.СодержаниеОперации = НСтр("ru = 'Услуги получены, претензий нет.'");
			
		Иначе
			
			Результат.СодержаниеОперации = НСтр("ru = 'Товары и услуги принял без претензий.'");
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, СчетФактура);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнформацияПокупателяУКД(Основания)
	
	ДокументОснование = Документы.СчетФактураПолученный.ПустаяСсылка();
	
	Для Каждого Основание Из Основания Цикл
		
		ДокументОснование = Основание;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПоступлениеТоваров.Дата КАК ДатаСогласования,
		|	ПоступлениеТоваров.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное
		|ИЗ
		|	Документ.КорректировкаПоступления КАК ПоступлениеТоваров
		|ГДЕ
		|	ПоступлениеТоваров.Ссылка = &Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураПолученный.Дата КАК ДатаСогласования,
		|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.Ссылка = &Основание"
	);
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура(
		"СодержаниеОперации,ДатаСогласования,ОрганизацияНаименованиеПолное",
		"-",
		ТекущаяДатаСеанса(),
		НСтр("ru = 'С изменением стоимости согласен.'")
	);
	
	Если НЕ РезультатыЗапроса[0].Пустой() Тогда
		
		КорректировкаПоступления = РезультатыЗапроса[0].Выбрать();
		КорректировкаПоступления.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, КорректировкаПоступления);
		
	ИначеЕсли НЕ РезультатыЗапроса[1].Пустой() Тогда
		
		СчетФактура = РезультатыЗапроса[1].Выбрать();
		СчетФактура.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, СчетФактура);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументаВБазе

Функция ЗаполнитьДокументПоступленияТоваров(Знач Документ, ДанныеЗаполнения)
	
	// Разделим строки товаров, если пристутствуют сведения о прослеживаемости.
	Товары = ДанныеЗаполнения.Товары;
	
	СтрокиКУдалению = Новый Массив();
	РазделитьТоварыПоДаннымСведенийОПрослеживаемости(Товары, "УПД");
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(Документ);
		
	Иначе
		
		ДокументОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	Документы.ПоступлениеТоваров.КонтрагентПриИзменении(ДокументОбъект);
	
	Если ЕстьРеквизит(ДокументОбъект,, "КодыМаркировки") И ДанныеЗаполнения.Свойство("КодыМаркировки") Тогда
		
		ДокументОбъект.КодыМаркировки.Загрузить(ДанныеЗаполнения.КодыМаркировки);
		
	КонецЕсли;
	
	СпособРаспределенияЗаказовПоУмолчанию = Перечисления.СпособыРаспределенияЗаказов.СпособРаспределенияЗаказовПоУмолчанию(
		ДокументОбъект.ПодразделениеКомпании);
	
	ДокументОбъект.Товары.Очистить();
	ЕстьСклад = ЗначениеЗаполнено(ДокументОбъект.СкладКомпании);
	ТипЦенСНДС = ВДокументеТипЦенСНДС(ДокументОбъект.ТипЦен);
	
	Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
		
		НовСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		
		Если ЕстьСклад И ЗначениеЗаполнено(НовСтрока.Номенклатура) Тогда
			НовСтрока.Ячейка = Справочники.Номенклатура.ПолучитьЯчейкуХранения(НовСтрока.Номенклатура, ДокументОбъект.СкладКомпании);
		Иначе
			НовСтрока.Ячейка = Справочники.ЯчейкиХранения.ПустаяСсылка();
		КонецЕсли;
	
		Документы.ПоступлениеТоваров.ТоварыСуммаВсегоПриИзменении(ДокументОбъект, НовСтрока);
		
		Если Не ТипЦенСНДС Тогда
			Если Строка.Количество = 0 Тогда
				НовСтрока.Цена = 0;
			Иначе
				НовСтрока.Цена = Окр(НовСтрока.Сумма / Строка.Количество, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
		КонецЕсли;
		
		НовСтрока.СпособРаспределенияЗаказов = СпособРаспределенияЗаказовПоУмолчанию;
		
		Если Не ЗначениеЗаполнено(НовСтрока.ИдентификаторТовара) Тогда
			
			НовСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО", ДокументОбъект) Тогда
		СвернутьТаблицуТоваровПоступлениеТоваров(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
	
	ЗаписатьДокумент(ДокументОбъект, Документ);
	Возврат Документ;
	
КонецФункции

Функция ЗаполнитьДокументКорректировкиПоступления(Знач Документ, ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(Документ);
		
	Иначе
		
		ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
		
	КонецЕсли;
	
	Основание = Неопределено;
	ДанныеЗаполнения.Свойство("Основание", Основание);
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Если Не ДокументОбъект.ДокументОснование = Неопределено Тогда
			Если Не ДокументОбъект.ДокументОснование.Проведен Тогда
				
				ШаблонСообщения = НСтр("ru='Документ-основание %1 не проведен. Документ будет создан на основании данных электронного документа.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.ДокументОснование);
				ВывестиСообщение(ТекстСообщения);
				
			Иначе
				
				ДанныеЗаполнения.Вставить("Основание", ДокументОбъект.ДокументОснование);
				Основание = ДокументОбъект.ДокументОснование;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	Если ДанныеЗаполнения.Свойство("ХозОперация") Тогда
		
		ДокументОбъект.ХозОперация = ДанныеЗаполнения.ХозОперация;
		
	КонецЕсли;
	
	ДокументОбъект.Заполнить(Основание);
	КодыМаркировкиКорректировки = Неопределено;
	
	Если ЕстьРеквизит(ДокументОбъект,, "КодыМаркировки") Тогда
		
		КодыМаркировкиКорректировки = ДокументОбъект.КодыМаркировки.Выгрузить();
		
		// Дополним промежуточную таблицу кодов маркировки.
		КодыМаркировкиКорректировки.Колонки.Добавить("Номенклатура");
		КодыМаркировкиКорректировки.Колонки.Добавить("ХарактеристикаНоменклатуры");
		КодыМаркировкиКорректировки.Колонки.Добавить("ЕдиницаИзмерения");
		КодыМаркировкиКорректировки.Колонки.Добавить("Коэффициент");
		КодыМаркировкиКорректировки.Колонки.Добавить("ГТД");
		
		УсловиеПоиска = Новый Структура("ИдентификаторТовара");
		Для Каждого СтрокаКодаМаркировки Из КодыМаркировкиКорректировки Цикл
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаКодаМаркировки);
			СтрокиТоваров = ДокументОбъект.Товары.НайтиСтроки(УсловиеПоиска);
			Если СтрокиТоваров.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировки, СтрокиТоваров[0]);
			КонецЕсли;
		КонецЦикла;
		
		ДокументОбъект.КодыМаркировки.Загрузить(ДанныеЗаполнения.КодыМаркировки);
		
	КонецЕсли;
	
	ТоварыЭД = ДанныеЗаполнения.Товары.Скопировать();
	РазделитьТоварыПоДаннымСведенийОПрослеживаемости(ТоварыЭД, ?(ДанныеЗаполнения.Исправление,"УПД","УКД"));
	
	ТоварыКорректировкиПоОснованию = ТоварыУКДПоДокументуПоступления(Основание);
	Товары = НоваяТаблицаТоваров("КорректировкаПоступления");
	Товары.Колонки.Добавить("Неизменился", Новый ОписаниеТипов("Булево"));
	
	Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО", ДокументОбъект) Тогда
		СвернутьТаблицуТоваровЭДКорректировкаПоступления(ДокументОбъект, ТоварыЭД, ДанныеЗаполнения.КодыМаркировки);
		СвернутьТаблицуТоваровОснованияКорректировкаПоступления(ДокументОбъект, ТоварыКорректировкиПоОснованию);
	КонецЕсли;
	
	ТипЦенСНДС = ВДокументеТипЦенСНДС(ДокументОбъект.ТипЦен);
	ЗаполнитьСписокНоменклатурыУКД(
		Товары,
		ТоварыЭД,
		ТоварыКорректировкиПоОснованию,
		ЕстьРеквизит(ТоварыЭД, "СведенияОИзмененииКоличества"),
		ТипЦенСНДС
	);
	
	ДокументОбъект.Товары.Очистить();
	
	Для Каждого Строка Из Товары Цикл
		
		Приемник = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Приемник, Строка, , "СуммаНДС");
		ПараметрыДействия = Документы.КорректировкаПоступления.ПолучитьПараметрыДействия(ДокументОбъект);
		Документы.КорректировкаПоступления.ТоварыСуммаВсегоПриИзменении(ДокументОбъект, Приемник, ПараметрыДействия);
		Приемник.СуммаНДС = Строка.СуммаНДС;
		Если Не ТипЦенСНДС Тогда
			Приемник.Сумма = Приемник.СуммаВсего - Приемник.СуммаНДС;
			Если Приемник.Количество = 0 Тогда
				Приемник.Цена = 0;
			Иначе
				Приемник.Цена = Окр(Приемник.Сумма / Приемник.Количество, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
		КонецЕсли;
		Документы.КорректировкаПоступления.РасчетРазницы(ДокументОбъект, Приемник, ПараметрыДействия);
		
		// Заполним коды маркировки для неизменных товаров.
		Если Строка.Неизменился И КодыМаркировкиКорректировки <> Неопределено Тогда
			
			Если ПустаяСтрока(Строка.ИдентификаторТовара) Тогда
				
				УсловиеПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД");
				Приемник.ИдентификаторТовара = Новый УникальныйИдентификатор();
				
			Иначе
				
				УсловиеПоиска = Новый Структура("ИдентификаторТовара");
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка);
			НайденныеКодыМаркировки = КодыМаркировкиКорректировки.НайтиСтроки(УсловиеПоиска);
			
			Для Каждого СтрокаКодаМаркировки Из НайденныеКодыМаркировки Цикл
				
				НоваяСтрокаКодаМаркировки = ДокументОбъект.КодыМаркировки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКодаМаркировки, СтрокаКодаМаркировки);
				НоваяСтрокаКодаМаркировки.ИдентификаторТовара = Приемник.ИдентификаторТовара;
				
			КонецЦикла;;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО", ДокументОбъект) Тогда
		СвернутьТаблицуТоваровКорректировкаПоступления(ДокументОбъект, ТипЦенСНДС);
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект, Документ);
	Возврат Документ;
	
КонецФункции

Функция ЗаполнитьДокументВозвратаТоваровОтПокупателя(Знач Документ, ДанныеЗаполнения)
	
	ВызватьИсключение "Не реализовано";
	
КонецФункции

Функция ЗаполнитьДокументПоступленияАвтомобилей(Знач Документ, ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(Документ);
		
	Иначе
		
		ДокументОбъект = Документы.ПоступлениеАвтомобилей.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
		ДокументОбъект.TradeIn = Ложь;
		
	КонецЕсли;
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	Документы.ПоступлениеАвтомобилей.КонтрагентПриИзменении(ДокументОбъект);
	
	ДокументОбъект.Автомобили.Очистить();
	Для Каждого Строка Из ДанныеЗаполнения.Автомобили Цикл
		НоваяСтрока = ДокументОбъект.Автомобили.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Документы.ПоступлениеАвтомобилей.АвтомобилиСуммаВсегоПриИзменении(ДокументОбъект, НоваяСтрока);
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Автомобили.Итог("Сумма");
	
	ЗаписатьДокумент(ДокументОбъект, Документ);
	Возврат Документ;
	
КонецФункции

Функция ЗаполнитьДокументКорректировкиПоступленияАвтомобилей(Знач Документ, ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(Документ);
		
	Иначе
		
		ДокументОбъект = Документы.КорректировкаПоступленияАвтомобилей.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
	КонецЕсли;

	Основание = Неопределено;
	ДанныеЗаполнения.Свойство("Основание", Основание);
	ДокументОбъект.Заполнить(Основание);
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения); 
	Документы.КорректировкаПоступленияАвтомобилей.КонтрагентПриИзменении(ДокументОбъект);
	
	Если ДанныеЗаполнения.Свойство("ХозОперация") Тогда
		
		ДокументОбъект.ХозОперация = ДанныеЗаполнения.ХозОперация;
		
	КонецЕсли;
	
	ДокументОбъект.Автомобили.Очистить();
	Для Каждого Строка Из ДанныеЗаполнения.Автомобили Цикл
		НоваяСтрока = ДокументОбъект.Автомобили.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Документы.КорректировкаПоступленияАвтомобилей.АвтомобилиСуммаВсегоПриИзменении(ДокументОбъект, НоваяСтрока);
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Автомобили.Итог("Сумма");
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект, Документ);
	Возврат Документ;
	
КонецФункции

Функция ЗаполнитьДокументСчетФактурыПолученого(Знач Документ, ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(Документ);
		
	Иначе
		
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.ТекущийПользователь();
		Основание = Неопределено;
		ДанныеЗаполнения.Свойство("Основание", Основание);
		СтароеЗначениеПрава = ПравоПользователя("ВводНаОснованииПроведенныхДокументов", ДокументОбъект);
		ОбновитьПравоВКэше("ВводНаОснованииПроведенныхДокументов", Ложь, ДокументОбъект);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ВыполнятьПроверкуВозможностиВВода", Ложь);
		ДокументОбъект.Заполнить(Основание);
		ОбновитьПравоВКэше("ВводНаОснованииПроведенныхДокументов", СтароеЗначениеПрава, ДокументОбъект);
		
		Если Не УправлениеДиалогомСервер.ПроверитьВозможностьОткрытияФормыОбъекта(Неопределено) Тогда
			
			ЭлектронноеВзаимодействие.ОбработатьОшибку(
				НСтр("ru = 'Ошибка при заполнении счета-фактуры'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				,
				Документ
			);
			Возврат Неопределено;
			
		КонецЕсли;
		
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	// Разделим строку товара, если присутсвуют сведения о прослеживаемости.
	Товары = ДанныеЗаполнения.Товары;
	РазделитьТоварыПоДаннымСведенийОПрослеживаемости(Товары, "УПД");
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	Документы.СчетФактураПолученный.КонтрагентПриИзменении(ДокументОбъект);
	
	Если ДанныеЗаполнения.Свойство("ХозОперация") Тогда
		
		ДокументОбъект.ХозОперация = ДанныеЗаполнения.ХозОперация;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		
		ДокументОбъект.Грузоотправитель = ДокументОбъект.Контрагент;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ТипЦенСНДС = ВДокументеТипЦенСНДС(ДокументОбъект.ТипЦен);
	
	Для Каждого Строка Из Товары Цикл
		
		НовСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка); 
		Документы.СчетФактураПолученный.ТоварыСуммаВсегоПриИзменении(ДокументОбъект, НовСтрока);
		Если Не ТипЦенСНДС Тогда
			Если Строка.Количество = 0 Тогда
				НовСтрока.Цена = 0;
			Иначе
				НовСтрока.Цена = Окр(НовСтрока.Сумма / НовСтрока.Количество, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО", ДокументОбъект) Тогда
		СвернутьТаблицуТоваровСчетФактураПолученный(ДокументОбъект, ТипЦенСНДС);
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = Товары.Итог("СуммаВсего");
	ДокументОбъект.СуммаНДСДокумента = Товары.Итог("СуммаНДС");
	ДокументОбъект.ОбменДанными.Загрузка = Истина;

	Попытка
		
		ДокументОбъект.Записать();
		ДокументОбъект.Разблокировать();
		Возврат ДокументОбъект.Ссылка;
		
	Исключение
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Создание счет-фактуры в формате 2019 года''"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			,
			Документ
		);
		
	КонецПопытки;
	
КонецФункции

Функция ДайОбъектИзБазыДляРедактирования(СсылкаНаВладельца)
	
	ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	
	Попытка
		
		ДокументОбъект.Заблокировать();
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Не удалось изменить данные документа ""%1"".
			|Возможно, документ редактируется другим пользователем'");
		ВызватьИсключение СтрШаблон(ШаблонСообщения, Строка(ДокументОбъект.Ссылка));
		
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

Процедура ЗаписатьДокумент(ДокументОбъект, СсылкаНаВладельца)
	
	Попытка
		
		// Установим дату создания документа
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка)
			И ЕстьРеквизит(ДокументОбъект, "ДатаСоздания") И Не ЗначениеЗаполнено(ДокументОбъект.ДатаСоздания) Тогда
			
			ДокументОбъект.ДатаСоздания = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ДокументОбъект.Разблокировать();
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
		
	Исключение
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			СсылкаНаВладельца
		);
		ЗаписьЖурналаРегистрации(
			Текст,
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОбъект.Метаданные(),
			СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ТекущийОбъект));
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если
			ЗначениеЗаполнено(Строка.Ключ)
		Тогда
			
			Если (ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено
				ИЛИ Метаданные.ОбщиеРеквизиты.Найти(Строка.Ключ) <> Неопределено
				И ОбщегоНазначенияПовтИсп.СоставОбщегоРеквизита(Строка.Ключ).Найти(ОбъектМетаданных) <> Неопределено)
				И ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьДокументСчетФактурыПолученогоУКД(Знач Документ, ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(Документ);
		
	Иначе
		
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.ТекущийПользователь();
		Основание = Неопределено;
		ДанныеЗаполнения.Свойство("Основание", Основание);
		СтароеЗначениеПрава = ПравоПользователя("ВводНаОснованииПроведенныхДокументов", ДокументОбъект);
		ОбновитьПравоВКэше("ВводНаОснованииПроведенныхДокументов", Ложь, ДокументОбъект);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ВыполнятьПроверкуВозможностиВВода", Ложь); 
		
		Если Основание = Неопределено Тогда
			ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);	
		КонецЕсли;   
		
		ДокументОбъект.Заполнить(Основание); 
		
		ОбновитьПравоВКэше("ВводНаОснованииПроведенныхДокументов", СтароеЗначениеПрава, ДокументОбъект);
		
		Если Не УправлениеДиалогомСервер.ПроверитьВозможностьОткрытияФормыОбъекта(Неопределено) Тогда
			
			ВызватьИсключение НСтр(
				"ru = 'Ошибка при заполнении счета-фактуры'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
			);
			
		КонецЕсли;
		
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.Свойство("ХозОперация") Тогда
		
		ДокументОбъект.ХозОперация = ДанныеЗаполнения.ХозОперация;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		
		ДокументОбъект.Грузоотправитель = ДокументОбъект.Контрагент;
		
	КонецЕсли;
	
	// Получение товаров КСФ.
	Основание = Неопределено;
	ДанныеЗаполнения.Свойство("Основание", Основание); 
	
	Если Основание = Неопределено Тогда
		ОснованиеОснования = Документы.КорректировкаПоступления.ПустаяСсылка();
	Иначе
		ОснованиеОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ДокументОснование");
	КонецЕсли;
	
	Товары              = НоваяТаблицаТоваров("СчетФактураПолученный");
	ТоварыЭД            = ДанныеЗаполнения.Товары.Скопировать();
	ТоварыСФПоОснованию = ТоварыСФПоДокументуКорректировки(ОснованиеОснования);
	
	РазделитьТоварыПоДаннымСведенийОПрослеживаемости(ТоварыЭД, "КСФ", ТоварыСФПоОснованию);
	
	Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО", ДокументОбъект) Тогда
		СвернутьТаблицуТоваровЭДСчетФактураПолученный(ДокументОбъект, ТоварыЭД);
		СвернутьТоварыСФПоОснованиюСчетФактураПолученный(ДокументОбъект, ТоварыСФПоОснованию);
	КонецЕсли;
	
	ЗаполнитьСписокНоменклатурыКСФ(Товары, ТоварыЭД, ТоварыСФПоОснованию);
	ТипЦенСНДС = ВДокументеТипЦенСНДС(ДокументОбъект.ТипЦен);
	
	ДокументОбъект.Товары.Очистить();
	Для Каждого Строка Из Товары Цикл
		
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка, , "СуммаНДС"); 
		Документы.СчетФактураПолученный.ТоварыСуммаВсегоПриИзменении(ДокументОбъект, НовСтрока); 
		НовСтрока.СуммаНДС = Строка.СуммаНДС;
		Если Не ТипЦенСНДС Тогда
			НовСтрока.Сумма = НовСтрока.СуммаВсего - НовСтрока.СуммаНДС;
			Если НовСтрока.Количество = 0 Тогда
				НовСтрока.Цена = 0
			Иначе
				НовСтрока.Цена = Окр(НовСтрока.Сумма / НовСтрока.Количество, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО", ДокументОбъект) Тогда
		СвернутьТаблицуТоваровСчетФактураПолученный(ДокументОбъект, ТипЦенСНДС);
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = Товары.Итог("СуммаВсего");
	ДокументОбъект.СуммаНДСДокумента = Товары.Итог("СуммаНДС");
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		
		ДокументОбъект.Записать();
		ДокументОбъект.Разблокировать();
		Возврат ДокументОбъект.Ссылка;
		
	Исключение
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Создание корректировочного счет-фактуры''"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			,
			Документ
		);
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецФункции

Функция ТоварыСФПоДокументуКорректировки(ДокументКорректировки)
		
	ТоварыСФ = Неопределено;

	Если НЕ ЗначениеЗаполнено(ДокументКорректировки)
		ИЛИ (ТипЗнч(ДокументКорректировки) <> Тип("ДокументСсылка.КорректировкаПоступления")
		И ТипЗнч(ДокументКорректировки) <> Тип("ДокументСсылка.ПоступлениеТоваров")) Тогда
	
		Возврат ТоварыСФ;	
	
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СчетФактураПолученный.Ссылка КАК СчетФактура
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование = &Документ
		|	И СчетФактураПолученный.ПометкаУдаления = ЛОЖЬ"
	);	 
	Запрос.УстановитьПараметр("Документ", ДокументКорректировки);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат ТоварыСФ;
		
	Иначе
		
		СчетФактура = РезультатЗапроса.Выгрузить()[0].СчетФактура;
		
	КонецЕсли;
	
	Возврат СчетФактура.Товары.Выгрузить();
	
КонецФункции

Функция ЗаполнитьДокументПоступлениеДопРасходов(Знач Документ, ДанныеЗаполнения)
	
	// Разделим строки товаров, если пристутствуют сведения о прослеживаемости.
	Товары = ДанныеЗаполнения.Товары;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(Документ);
		
	Иначе
		
		ДокументОбъект = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	Документы.ПоступлениеДопРасходов.КонтрагентПриИзменении(ДокументОбъект);
	
	ДокументОбъект.Товары.Очистить();
	ТипЦенСНДС = ВДокументеТипЦенСНДС(ДокументОбъект.ТипЦен);
	
	Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
		
		НовСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		
		Документы.ПоступлениеДопРасходов.ТоварыСуммаВсегоПриИзменении(ДокументОбъект, НовСтрока);
		
		Если Не ТипЦенСНДС Тогда
			Если Строка.Количество = 0 Тогда
				НовСтрока.Цена = 0;
			Иначе
				НовСтрока.Цена = Окр(НовСтрока.Сумма / Строка.Количество, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО", ДокументОбъект) Тогда
		СвернутьТаблицуТоваровПоступлениеДопРасходов(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
	
	ЗаписатьДокумент(ДокументОбъект, Документ);
	Возврат Документ;
	
КонецФункции

#КонецОбласти

#Область ПолучениеПрикладныхДанных

Функция НайтиКонтрагентаПоИННКПП(ИНН, КПП)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК НайденныйОбъект
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Контрагенты.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ОбособленноеПодразделение)
	|		ТОГДА Контрагенты.ГоловнойКонтрагент.ИНН = &ИНН
	|		ИНАЧЕ Контрагенты.ИНН = &ИНН
	|	КОНЕЦ";
	
	Если ЗначениеЗаполнено(КПП) И КПП <> "0" Тогда

		ТекстЗапроса = ТекстЗапроса + " И Контрагенты.КПП = &КПП";

	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат РезультатЗапроса.Выгрузить()[0].НайденныйОбъект;
	
КонецФункции

Функция НайтиПодразделениеОрганизации(Организация, КПП, Контрагент, ДоговорВзаиморасчетов = Неопределено)

	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПодразделенияКомпании.Ссылка КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ПодразделенияКомпании.КПП = &КПП
		|			ТОГДА 0
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
		|ГДЕ
		|	ПодразделенияКомпании.Организация = &Организация
		|	И НЕ ПодразделенияКомпании.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствияНастроекЭДОИПодразделенийОрганизации.Подразделение,
		|	1
		|ИЗ
		|	РегистрСведений.СоответствияНастроекЭДОИПодразделенийОрганизации КАК СоответствияНастроекЭДОИПодразделенийОрганизации
		|ГДЕ
		|	СоответствияНастроекЭДОИПодразделенийОрганизации.Отправитель = &Организация
		|	И СоответствияНастроекЭДОИПодразделенийОрганизации.Получатель = &Контрагент
		|	И СоответствияНастроекЭДОИПодразделенийОрганизации.Договор = &ДоговорВзаиморасчетов
		|	И НЕ СоответствияНастроекЭДОИПодразделенийОрганизации.Подразделение.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет"
	);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КПП", КПП); 
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Если ДоговорВзаиморасчетов = Неопределено Тогда                               
		ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);  
	РезультатЗапроса = Запрос.Выполнить();

	УстановитьПривилегированныйРежим(Ложь);	
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Подразделение;

КонецФункции

Функция СчетФактураПоНомеруИДате(Номер, Дата)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетФактураПолученный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ВхДокНомер = &Номер
		|	И СчетФактураПолученный.ВхДокДата = &Дата
		|	И НЕ СчетФактураПолученный.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ВхДокНомер = &Номер
		|	И НЕ СчетФактураПолученный.ПометкаУдаления"
	);
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СчетаФактуры = РезультатЗапроса.Выбрать();
	СчетаФактуры.Следующий();
	Возврат СчетаФактуры.Ссылка;
	
КонецФункции

Функция ДокументОснованиеСчетаФактурыПолученного(СчетФактура)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СчетФактура", СчетФактура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &СчетФактура";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументОснование;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область CML_Форматы

#Область СчетаОтПоставщика

Функция НайтиСоздатьСчетОтПоставщика(СтрокаДляЗагрузки,
                                     ДеревоРазбора,
                                     СсылкаНаВладельца = Неопределено,
                                     Записывать = Истина)
	
	ТабличнаяЧастьСчета = Документы.СчетОтПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ДанныеДляЗагрузки = ПодготовитьСтруктуруСчетОтПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, ТабличнаяЧастьСчета);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(СсылкаНаВладельца);
		
	Иначе
		
		ДокументОбъект = Документы.СчетОтПоставщика.СоздатьДокумент();
		
	КонецЕсли;

	ДокументОбъект.Заполнить(ДанныеДляЗагрузки.Шапка);
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);

	ДокументОбъект.ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	Документы.СчетОтПоставщика.ВалютаДокументаПриИзменении(ДокументОбъект);
	
	ДокументОбъект.КурсДокумента = ДанныеЗаполнения.КурсДокумента;
	Документы.СчетОтПоставщика.КурсДокументаПриИзменении(ДокументОбъект);
		
	ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
	Документы.СчетОтПоставщика.ОрганизацияПриИзменении(ДокументОбъект);

	ДокументОбъект.ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеКомпании;
	Документы.СчетОтПоставщика.ПодразделениеКомпанииПриИзменении(ДокументОбъект);
	
	ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	Документы.СчетОтПоставщика.КонтрагентПриИзменении(ДокументОбъект);
	
	ДокументОбъект.РасчетныйСчетКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДанныеЗаполнения, "БанковскийСчетКонтрагента", Справочники.БанковскиеСчета.ПустаяСсылка());
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект, СсылкаНаВладельца);
	Возврат СсылкаНаВладельца;
	
КонецФункции

Функция ПодготовитьСтруктуруСчетОтПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, Товары)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
			
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "Валюта" Тогда
				
				ИмяРеквизита = "ВалютаДокумента";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				
				ИмяРеквизита = "КурсДокумента";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Номер" Тогда
				
				ИмяРеквизита = "ВхДокНомер";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Дата" Тогда
				
				ИмяРеквизита = "ВхДокДата";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "СуммаИтог" Тогда
				
				ИмяРеквизита = "СуммаДокумента";
				
			Иначе
				
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизит) Тогда
				
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, Реквизит);
				
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			
			ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеЗаполненияШапки.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация) Тогда
		
		ДанныеЗаполненияШапки.Вставить("ПодразделениеКомпании",
			НайтиПодразделениеОрганизации(ДанныеЗаполненияШапки.Организация, "", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполненияШапки, "Контрагент")));
		
	КонецЕсли;
		
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

#КонецОбласти

#Область СчетОтПоставщикаЗаАвтомобили

Функция НайтиСоздатьСчетОтПоставщикаЗаАвтомобили(СтрокаДляЗагрузки,
                                                 ДеревоРазбора,
                                                 СсылкаНаВладельца = Неопределено,
                                                 Записывать = Истина)

	ТабличнаяЧастьСчета = Документы.СчетОтПоставщикаЗаАвтомобили.ПустаяСсылка().Автомобили.ВыгрузитьКолонки();
	ДанныеДляЗагрузки = ПодготовитьСтруктуруСчетОтПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, ТабличнаяЧастьСчета);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(СсылкаНаВладельца);
		
	Иначе
		
		ДокументОбъект = Документы.СчетОтПоставщикаЗаАвтомобили.СоздатьДокумент();
		
	КонецЕсли;
	
	ДокументОбъект.Заполнить(ДанныеДляЗагрузки.Шапка);
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);

	ДокументОбъект.ВалютаДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДанныеЗаполнения, "ВалютаДокумента", Справочники.Валюты.ПустаяСсылка());
	Документы.СчетОтПоставщикаЗаАвтомобили.ВалютаДокументаПриИзменении(ДокументОбъект);
	
	ДокументОбъект.КурсДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДанныеЗаполнения, "КурсДокумента", 1);
	Документы.СчетОтПоставщикаЗаАвтомобили.КурсДокументаПриИзменении(ДокументОбъект);
		
	ДокументОбъект.Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДанныеЗаполнения, "Организация", Справочники.Организации.ПустаяСсылка());
	Документы.СчетОтПоставщикаЗаАвтомобили.ОрганизацияПриИзменении(ДокументОбъект);

	ДокументОбъект.ПодразделениеКомпании = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДанныеЗаполнения, "ПодразделениеКомпании", Справочники.ПодразделенияКомпании.ПустаяСсылка());
	Документы.СчетОтПоставщикаЗаАвтомобили.ПодразделениеКомпанииПриИзменении(ДокументОбъект);
	
	ДокументОбъект.Контрагент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДанныеЗаполнения, "Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Документы.СчетОтПоставщикаЗаАвтомобили.КонтрагентПриИзменении(ДокументОбъект);
	
	ДокументОбъект.РасчетныйСчетКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДанныеЗаполнения, "БанковскийСчетКонтрагента", Справочники.БанковскиеСчета.ПустаяСсылка());
	
	ДокументОбъект.Автомобили.Загрузить(ДанныеДляЗагрузки.Товары);
	
	// Заполним итоговые показатели
	ИтогиОперации = Документы.СчетОтПоставщикаЗаАвтомобили.РассчитатьИтогиОперации(ДокументОбъект);
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ИтогиОперации);
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект, СсылкаНаВладельца);
	
	Возврат СсылкаНаВладельца;
	
КонецФункции

#КонецОбласти

#Область ЗаказПокупателя

Функция НайтиСоздатьЗаказПокупателя(СтрокаДляЗагрузки,
                                    ДеревоРазбора,
                                    СсылкаНаВладельца = Неопределено,
                                    Записывать = Истина)
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруЗаказПокупателя(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(СсылкаНаВладельца);
		
	Иначе
		
		ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;

	ДокументОбъект.Заполнить(ДанныеДляЗагрузки.Шапка);
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);

	ДокументОбъект.ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	Документы.ЗаказПокупателя.ВалютаДокументаПриИзменении(ДокументОбъект);
	
	ДокументОбъект.КурсДокумента = ДанныеЗаполнения.КурсДокумента;
	Документы.ЗаказПокупателя.КурсДокументаПриИзменении(ДокументОбъект);
		
	ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
	Документы.ЗаказПокупателя.ОрганизацияПриИзменении(ДокументОбъект);

	ДокументОбъект.ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеКомпании;
	Документы.ЗаказПокупателя.ПодразделениеКомпанииПриИзменении(ДокументОбъект);
	
	ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	Документы.ЗаказПокупателя.КонтрагентПриИзменении(ДокументОбъект);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	ПересчетЦенТабличнойЧасти(ДокументОбъект);
	
	Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО", ДокументОбъект) Тогда
		СвернутьТаблицуТоваровЗаказПокупателя(ДокументОбъект);
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект, СсылкаНаВладельца);
	Возврат СсылкаНаВладельца;
		
КонецФункции

Функция ПодготовитьСтруктуруЗаказПокупателя(СтрокаДляЗагрузки, ДеревоРазбора)
		
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы.СчетОтПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
			
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "Валюта" Тогда
				
				ИмяРеквизита = "ВалютаДокумента";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				
				ИмяРеквизита = "КурсДокумента";
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит);
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "СуммаИтог" Тогда
				
				ИмяРеквизита = "СуммаДокумента";
				
			Иначе
				
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизит) Тогда
				
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, Реквизит);
				
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			
			ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеЗаполненияШапки.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация) Тогда
		
		ДанныеЗаполненияШапки.Вставить("ПодразделениеКомпании",
			НайтиПодразделениеОрганизации(ДанныеЗаполненияШапки.Организация, "", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполненияШапки, "Контрагент")));
		
	КонецЕсли;
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	Возврат ДанныеДляОбъекта;
	
КонецФункции

#КонецОбласти

#Область ЗаказПоставщику

Функция НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки,
                                    ДеревоРазбора,
                                    СсылкаНаВладельца = Неопределено,
                                    Записывать = Истина)

	ДанныеДляЗагрузки = ПодготовитьСтруктуруЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		
		ДокументОбъект = ДайОбъектИзБазыДляРедактирования(СсылкаНаВладельца);
		
	Иначе
		
		ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;

	ДокументОбъект.Заполнить(ДанныеДляЗагрузки.Шапка);
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);

	ДокументОбъект.ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	Документы.ЗаказПоставщику.ВалютаДокументаПриИзменении(ДокументОбъект);
	
	ДокументОбъект.КурсДокумента = ДанныеЗаполнения.КурсДокумента;
	Документы.ЗаказПоставщику.КурсДокументаПриИзменении(ДокументОбъект);
		
	ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
	Документы.ЗаказПоставщику.ОрганизацияПриИзменении(ДокументОбъект);

	ДокументОбъект.ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеКомпании;
	Документы.ЗаказПоставщику.ПодразделениеКомпанииПриИзменении(ДокументОбъект);
	
	ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	Документы.ЗаказПоставщику.КонтрагентПриИзменении(ДокументОбъект);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	ПересчетЦенТабличнойЧасти(ДокументОбъект);
	
	Если ПраваИНастройкиПользователя.Значение("СворачиватьТоварыВходящихДокументовЭДО", ДокументОбъект) Тогда
		СвернутьТаблицуТоваровЗаказПоставщику(ДокументОбъект);
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект, СсылкаНаВладельца);
	Возврат СсылкаНаВладельца;
	
КонецФункции

Функция ПодготовитьСтруктуруЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора)
		
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы.ЗаказПоставщику.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
			
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "Валюта" Тогда
				
				ИмяРеквизита = "ВалютаДокумента";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				
				ИмяРеквизита = "КурсДокумента";
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит);
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "СуммаИтог" Тогда
				
				ИмяРеквизита = "СуммаДокумента";
				
			Иначе
				
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизит) Тогда
				
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, Реквизит);
				
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			
			ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеЗаполненияШапки.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация) Тогда
		
		ДанныеЗаполненияШапки.Вставить("ПодразделениеКомпании",
			НайтиПодразделениеОрганизации(ДанныеЗаполненияШапки.Организация, "", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполненияШапки, "Контрагент")));
		
	КонецЕсли;
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция НовыеТоварыВЗаказеПоставщику()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НоменклатураПоставщика");
	Результат.Колонки.Добавить("ИдентификаторПоставщика");
	Результат.Колонки.Добавить("Артикул");
	Результат.Колонки.Добавить("Наименование");
	Результат.Колонки.Добавить("Описание");
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("НаименованиеХарактеристики");
	Результат.Колонки.Добавить("БазоваяЕдиницаКод");
	Результат.Колонки.Добавить("БазоваяЕдиницаНаименование");
	Результат.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	Результат.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	Результат.Колонки.Добавить("Упаковка");
	Результат.Колонки.Добавить("ЕдиницаИзмерения");
	Результат.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	Результат.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	Результат.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("Цена");
	Результат.Колонки.Добавить("Сумма");
	Результат.Колонки.Добавить("СтавкаНДС");
	Результат.Колонки.Добавить("СуммаНДС");
	Результат.Колонки.Добавить("СуммаСНДС");
	Результат.Колонки.Добавить("НДСУчтеноВСумме");
	Результат.Колонки.Добавить("СуммаСкидки");
	Результат.Колонки.Добавить("ПроцентСкидки");
	Результат.Колонки.Добавить("Сопоставление");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетоды

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе // Передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда
			
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСтрокуТЧ(ТЗ, ДанныеЗаполнения, ДеревоРазбора, ЭтоЗаказ = Ложь)
	
	НовСтрока = ТЗ.Добавить();
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ИмяРеквизитаВБД = "Описание" Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли ИмяРеквизитаВБД = "СумНДС" Тогда
			ИмяРеквизитаВБД = "СуммаНДС";
		ИначеЕсли ИмяРеквизитаВБД = "СтТовУчНал" Тогда
			ИмяРеквизитаВБД = "Сумма";
		ИначеЕсли ИмяРеквизитаВБД = "НалСтВел" Тогда
			ИмяРеквизитаВБД = "СтавкаНДС";
		КонецЕсли;
		
		Если ИмяРеквизитаВБД = "СуммаСНДС" Тогда
			НовСтрока.СуммаВсего = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ИмяРеквизитаВБД, Истина, ДеревоРазбора);
		КонецЕсли;
		
		Если ИмяРеквизитаВБД = "Сопоставление" Тогда
			Сопоставление = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Номенклатура")
				И Сопоставление.Свойство("НоменклатураИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
					НовСтрока.Номенклатура = Сопоставление.НоменклатураИБ;
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Автомобиль")
				И Сопоставление.Свойство("НоменклатураИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
					НовСтрока.Автомобиль = Сопоставление.НоменклатураИБ;
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Характеристика")
				И Сопоставление.Свойство("ХарактеристикаИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.ХарактеристикаИБ) Тогда
					НовСтрока.Характеристика = Сопоставление.ХарактеристикаИБ;
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "ЕдиницаИзмерения")
				И Сопоставление.Свойство("УпаковкаИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.УпаковкаИБ) Тогда
					НовСтрока.ЕдиницаИзмерения = Сопоставление.УпаковкаИБ;
					Если ТипЗнч(Сопоставление.УпаковкаИБ) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						НовСтрока.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сопоставление.УпаковкаИБ, "Коэффициент");
					Иначе
						НовСтрока.Коэффициент = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Упаковка")
				И Сопоставление.Свойство("УпаковкаИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.УпаковкаИБ) Тогда
					НовСтрока.Упаковка = Сопоставление.УпаковкаИБ;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
		
		// Заполнение характеристики номенклатуры и упаковки.
		Если ИмяРеквизитаВБД = "НоменклатураПартнера" Тогда
			Если КолонкаСуществует(ТЗ, "Характеристика") Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Характеристика = НайденноеЗначение.Характеристика;	
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Упаковка") Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Упаковка = НайденноеЗначение.Упаковка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не КолонкаСуществует(ТЗ, ИмяРеквизитаВБД) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		НовСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
		Если ТекСтрока.Реквизит = "Номенклатура" Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
				НовСтрока.ЕдиницаИзмерения = НайденноеЗначение;
			КонецЕсли;
			
			Если ТипЗнч(НайденноеЗначение) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				НовСтрока.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденноеЗначение, "Коэффициент");
			Иначе
				НовСтрока.Коэффициент = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КолонкаСуществует(Таблица, ИмяКолонки)
	
	Результат = Не (Таблица.Колонки.Найти(ИмяКолонки) = Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция РазделитьПервичныйДокументИСчетФактуру(СсылкиНаВладельцев)
	
	Результат = Новый Структура("СчетФактура,ПервичныйДокумент");
	
	Если СсылкиНаВладельцев <> Неопределено Тогда
		
		Для каждого Строка Из СсылкиНаВладельцев Цикл
			
			Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				
				Результат.СчетФактура = Строка;
				
			Иначе
				
				Результат.ПервичныйДокумент = Строка;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьРеквизитВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок = Неопределено)
	
	СтрокаДерева = Дерево.Строки.Найти(Реквизит, "ПолныйПуть", Истина);
	
	Если
		СтрокаДерева <> Неопределено
		И СтрокаДерева.ПараметрыОбработкиОбязательны = "Да"
	Тогда
		
		ПараметрыОбработкиОшибок = СтрШаблон(
			НСтр("ru = 'Не заполнен обязательный реквизит для формирования электронного документа %1.'"),
			Реквизит
		);
		
	КонецЕсли;
	
	Попытка
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок);
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

Функция НовоеОписаниеОшибкиДляТаблицы()
	
	Результат = Новый Структура;
	Результат.Вставить("ПолеТаблицы");
	Результат.Вставить("КлючДанных", "");
	Результат.Вставить("ПутьКДанным", "");
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ПолеНомераСтроки");
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиТаблицы, ОписаниеОшибки)
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
		СтрокиТаблицы,
		ОписаниеОшибки.ПолеТаблицы,
		ОписаниеОшибки.КлючДанных,
		ОписаниеОшибки.ПутьКДанным,
		ОписаниеОшибки.ТекстОшибки,
		ОписаниеОшибки.ПолеНомераСтроки
	);
	
КонецПроцедуры

Процедура ЗаполнитьДоговор(ДеревоДокумента, Шапка)
	
	Если Не (ЗначениеЗаполнено(Шапка.ДоговорНомер) И ЗначениеЗаполнено(Шапка.ДоговорДата)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеДоговоров = Новый ТаблицаЗначений;
	ОписаниеДоговоров.Колонки.Добавить("Идентификатор");
	ОписаниеДоговоров.Колонки.Добавить("Наименование");
	ОписаниеДоговоров.Колонки.Добавить("Номер");
	ОписаниеДоговоров.Колонки.Добавить("Дата");
	
	Договор = ОписаниеДоговоров.Добавить();
	Договор.Идентификатор = НСтр("ru = 'Договор'");
	Договор.Наименование = НСтр("ru = 'Договор'");
	Договор.Номер = Шапка.ДоговорНомер;
	Договор.Дата = Шапка.ДоговорДата;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
		ДеревоДокумента,
		ОписаниеДоговоров,
		"ДокументыСделки"
	);
	
КонецПроцедуры

Функция ФорматСуммСВалютой(Сумма, Знач Валюта)
	
	ФорматСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Неопределено);
	Результат = СокрЛ(Формат(Сумма, ФорматСуммы));

	Если ТипЗнч(Валюта) = Тип("Строка") Тогда
	
		Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Валюта);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		Результат = Формат(Сумма, ФорматСуммы) + " " + СокрП(Валюта);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ДополнитьДанныеОбОрганизацииАдресом(Организация, ВидАдреса, ДанныеОрганизации)
	
	Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Организация,
		ВидАдреса,
		ТекущаяДатаСеанса(),
		Ложь
	);
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		
		Адрес = Адрес[0];
	
		Если ЗначениеЗаполнено(Адрес.ЗначенияПолей) Тогда
			
			АдресСтруктурой = РаботаСАдресами.СведенияОбАдресе(Адрес.ЗначенияПолей);
			
			Если АдресСтруктурой.Свойство("Индекс") Тогда
				ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
			КонецЕсли;
			
			Если АдресСтруктурой.Свойство("Регион") Тогда
				ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
			КонецЕсли;
			
			Если АдресСтруктурой.Свойство("КодРегиона") Тогда
				ДанныеОрганизации.КодРегиона = АдресСтруктурой.КодРегиона;
			КонецЕсли;
			
			Если АдресСтруктурой.Свойство("Район") Тогда
				ДанныеОрганизации.Район = АдресСтруктурой.Район;
			КонецЕсли;
			
			Если АдресСтруктурой.Свойство("Город") Тогда
				ДанныеОрганизации.Город = АдресСтруктурой.Город;
			КонецЕсли;
			
			Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
				ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
			КонецЕсли;
			
			Если АдресСтруктурой.Свойство("Улица") Тогда
				ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
			КонецЕсли;
			
			Если АдресСтруктурой.Свойство("Здание") И ЗначениеЗаполнено(АдресСтруктурой.Здание) Тогда
				ДанныеОрганизации.Дом = АдресСтруктурой.Здание.Номер;
			КонецЕсли;
			
			Если АдресСтруктурой.Свойство("Корпуса") И ЗначениеЗаполнено(АдресСтруктурой.Корпуса) Тогда
				ДанныеОрганизации.Корпус = АдресСтруктурой.Корпуса[0].Номер;
			КонецЕсли;
			
			Если АдресСтруктурой.Свойство("Помещения") И ЗначениеЗаполнено(АдресСтруктурой.Помещения) Тогда
				ДанныеОрганизации.Квартира = АдресСтруктурой.Помещения[0].Номер;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимоУказатьЕдиницуИзмерения(Строка)
	
	Возврат Строка.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга
		Или Строка.БазоваяЕдиница <> Справочники.КлассификаторЕдиницИзмерения.прочерк;
	
КонецФункции

Функция ПолучитьКодЕдиницыИзмерения(Строка)
	
	Если СокрЛП(Строка.ЕдиницаИзмеренияКод) = "001" Тогда
		
		// Для услуг нужно указать пустой код, если у них есть количество
		Возврат "";
		
	Иначе
		
		// Без удаления не читаемых символов не прводиться к типу в XDTOОбъекте
		Возврат СокрЛП(Строка.ЕдиницаИзмеренияКод);
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьБанковскийСчет(СтрокаОбъекта, ИмяОбъекта, ДеревоРазбора, ВладелецСчета = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаОбъект = Неопределено;
	НайденнаяСтрока = СтрокаОбъекта;
	
	БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Если (НЕ ДеревоРазбора.Строки.Найти("Контрагенты")=Неопределено) 
		И ДеревоРазбора.Строки.Найти("Контрагенты").Строки.Количество()>0 Тогда
		СсылкаНаВладельца = ДеревоРазбора.Строки.Найти("Контрагенты").Строки[0].СсылкаНаОбъект;
	КонецЕсли;
	
	БанковскийСчет.НомерСчета 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "НомерСчета");
		
	БанковскийСчет.ВалютаДенежныхСредств = ВалютаПоНомеруСчета(БанковскийСчет.НомерСчета);
	//
	ИндексИскомойСтроки = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Банк");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		БанковскийСчет.Банк 			= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	ИндексИскомойСтроки 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "БанкКорреспондент");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		БанковскийСчет.БанкДляРасчетов 	= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		СсылкаНаВладельца = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Владелец");	
	КонецЕсли;
	БанковскийСчет.Владелец 		= СсылкаНаВладельца;
	БанковскийСчет.ВидСчета = НСтр("ru = 'Расчетный'");
	НаименованиеСчета = Справочники.БанковскиеСчета.СформироватьНаименованиеПоУмолчанию(БанковскийСчет);
	Если ПустаяСтрока(НаименованиеСчета) Тогда
		НаименованиеСчета = "р/с "
			+ СокрЛП(БанковскийСчет.НомерСчета)
			+ " ("
			+ СокрЛП(БанковскийСчет.ВалютаДенежныхСредств.Наименование)
			+ ") в "
			+ СокрЛП(БанковскийСчет.Банк.Наименование)
			+", БИК:"
			+ СокрЛП(БанковскийСчет.Банк.Код);
	КонецЕсли;
	БанковскийСчет.Наименование 	= НаименованиеСчета;
	БанковскийСчет.ОбменДанными.Загрузка = Истина;
	Попытка
		БанковскийСчет.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Создание элемента справочника %1.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ИмяОбъекта); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = БанковскийСчет.Ссылка;
	НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект; // запишем в дерево
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки)
	
	СсылкаНаОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
			СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция ВалютаПоНомеруСчета(НомерСчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодВалюты = Сред(НомерСчета, 6, 3);
	Если КодВалюты = "810" Тогда
		КодВалюты = "643";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты
	|";
	Запрос.УстановитьПараметр("КодВалюты", КодВалюты);
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Валюта = Выборка.Валюта;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции // ПолучитьВалютуПоНомеруСчета()

#Область СверткаТоварнойЧастиДокументовЭД

Процедура СвернутьТаблицуТоваровПоступлениеТоваров(Объект)
	
	КопияТовары = Объект.Товары.Выгрузить();
	Объект.Товары.Очистить();
	
	Выборка = ВыборкаУникальныхСтрок(
		КопияТовары,
		"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
	);
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
		);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СуммаНДС = 0;
		Содержания = Новый Массив;
		ИдентификаторыТоваров = Новый Массив;
		Для Каждого Строка Из НайденныеТовары Цикл
			НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
			НоваяСтрока.КоличествоБазовое = НоваяСтрока.КоличествоБазовое + Строка.КоличествоБазовое;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
			НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			НоваяСтрока.Ячейка = ?(ЗначениеЗаполнено(НоваяСтрока.Ячейка), НоваяСтрока.Ячейка, Строка.Ячейка);
			НоваяСтрока.КоличествоПоНакладной = НоваяСтрока.КоличествоПоНакладной + Строка.КоличествоПоНакладной;
			НоваяСтрока.СпособРаспределенияЗаказов = ?(
				ЗначениеЗаполнено(НоваяСтрока.СпособРаспределенияЗаказов),
				НоваяСтрока.СпособРаспределенияЗаказов,
				Строка.СпособРаспределенияЗаказов
			);
			
			Если ЗначениеЗаполнено(Строка.Содержание) Тогда
				Содержания.Добавить(Строка.Содержание);
			КонецЕсли;
			ИдентификаторыТоваров.Добавить(Строка.ИдентификаторТовара);
		КонецЦикла;
		
		НоваяСтрока.НеПересчитыватьСтроку = Истина;
		НоваяСтрока.Содержание = СтрСоединить(Содержания, ", ");
		Если ЗначениеЗаполнено(ИдентификаторыТоваров) Тогда
			НоваяСтрока.ИдентификаторТовара = ИдентификаторыТоваров[0];
			Для Индекс = 1 По ИдентификаторыТоваров.Количество() - 1 Цикл
				ПараметрыОтбора = Новый Структура("ИдентификаторТовара", ИдентификаторыТоваров[Индекс]);
				НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.ИдентификаторТовара = НоваяСтрока.ИдентификаторТовара;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// пересчитать цену
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
		КонецЕсли;
		
		НоваяСтрока.СуммаНДС = СуммаНДС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьТаблицуТоваровСчетФактураПолученный(Объект, ТипЦенСНДС)
	
	КопияТовары = Объект.Товары.Выгрузить();
	Объект.Товары.Очистить();
	
	Выборка = ВыборкаУникальныхСтрок(
		КопияТовары,
		"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД, Цена"
	);
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД, Цена"
		);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СуммаНДС = 0;
		Содержания = Новый Массив;
		Для Каждого Строка Из НайденныеТовары Цикл
			НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
			НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			
			Если ЗначениеЗаполнено(Строка.Содержание) Тогда
				Содержания.Добавить(Строка.Содержание);
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока.Содержание = СтрСоединить(Содержания, ", ");
		Документы.СчетФактураПолученный.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока);
		НоваяСтрока.СуммаНДС = СуммаНДС;
		Если Не ТипЦенСНДС Тогда
			НоваяСтрока.Сумма = НоваяСтрока.СуммаВсего - НоваяСтрока.СуммаНДС;
			Если НоваяСтрока.Количество = 0 Тогда
				НоваяСтрока.Цена = 0;
			Иначе
				НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьТаблицуТоваровЭДСчетФактураПолученный(Объект, Товары)
	
	Если Товары.Колонки.Найти("СведенияОИзмененииКоличества") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопияТовары = Товары.Скопировать();
	Товары.Очистить();
	
	Выборка = ВыборкаУникальныхСтрок(
		КопияТовары,
		"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
	);
	
	СтрокиКУдалению = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
		);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СуммаНДС = 0;
		Содержания = Новый Массив;
		
		ЕстьСведенияОбИзмененииКоличества = Ложь;
		СтоимостьТоваровБезНалога = 0;
		СтоимостьТоваровБезНалогаДоКорректировки = 0;
		ЦенаЗаЕдиницуИзмерения = 0;
		ЦенаЗаЕдиницуИзмеренияДоКорректировки = 0;
		Количество = 0;
		КоличествоДоКорректировки = 0;
		СуммаНалога = 0;
		СуммаНалогаДоКорректировки = 0;
		НоваяСтрокаЗаполнена = Ложь;
		
		Для Каждого Строка Из НайденныеТовары Цикл
			
			Если Строка.СведенияОИзмененииКоличества <> Неопределено
				И Строка.СведенияОИзмененииКоличества.КоличествоДоКорректировки = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаЗаполнена = Истина;
			СведенияОИзменении = Строка.СведенияОИзмененииКоличества;
			СтрокиКУдалению.Добавить(Строка);
			НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
			НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
			
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			
			Если ЗначениеЗаполнено(Строка.Содержание) Тогда
				Содержания.Добавить(Строка.Содержание);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОИзменении) Тогда
				ЕстьСведенияОбИзмененииКоличества = Истина;
				Если ЗначениеЗаполнено(СведенияОИзменении.Количество) Тогда
					Количество = Количество + СведенияОИзменении.Количество;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.КоличествоДоКорректировки) Тогда
					КоличествоДоКорректировки = КоличествоДоКорректировки + СведенияОИзменении.КоличествоДоКорректировки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.СтоимостьТоваровБезНалога) Тогда
					СтоимостьТоваровБезНалога = СтоимостьТоваровБезНалога
					+ СведенияОИзменении.СтоимостьТоваровБезНалога;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.СтоимостьТоваровБезНалогаДоКорректировки) Тогда
					СтоимостьТоваровБезНалогаДоКорректировки = СтоимостьТоваровБезНалогаДоКорректировки
						+ СведенияОИзменении.СтоимостьТоваровБезНалогаДоКорректировки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.СуммаНалога) Тогда
					СуммаНалога = СуммаНалога + СведенияОИзменении.СуммаНалога;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.СуммаНалогаДоКорректировки) Тогда
					СуммаНалогаДоКорректировки = СуммаНалогаДоКорректировки
					+ СведенияОИзменении.СуммаНалогаДоКорректировки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.ЦенаЗаЕдиницуИзмерения) Тогда
					ЦенаЗаЕдиницуИзмерения = ЦенаЗаЕдиницуИзмерения + СведенияОИзменении.ЦенаЗаЕдиницуИзмерения;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.ЦенаЗаЕдиницуИзмеренияДоКорректировки) Тогда
					ЦенаЗаЕдиницуИзмеренияДоКорректировки = ЦенаЗаЕдиницуИзмеренияДоКорректировки
						+ СведенияОИзменении.ЦенаЗаЕдиницуИзмеренияДоКорректировки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьСведенияОбИзмененииКоличества Тогда
			НоваяСтрока.СведенияОИзмененииКоличества = Новый Структура;
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("СтоимостьТоваровБезНалога");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("СтоимостьТоваровБезНалогаДоКорректировки");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("ЦенаЗаЕдиницуИзмерения");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("ЦенаЗаЕдиницуИзмеренияДоКорректировки");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("Количество");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("КоличествоДоКорректировки");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("СуммаНалога");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("СуммаНалогаДоКорректировки");
			
			Если ЗначениеЗаполнено(Количество) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.Количество = Количество;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КоличествоДоКорректировки) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.КоличествоДоКорректировки = КоличествоДоКорректировки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтоимостьТоваровБезНалога) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.СтоимостьТоваровБезНалога = СтоимостьТоваровБезНалога;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтоимостьТоваровБезНалогаДоКорректировки) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.СтоимостьТоваровБезНалогаДоКорректировки
					= СтоимостьТоваровБезНалогаДоКорректировки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СуммаНалога) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.СуммаНалога = СуммаНалога;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СуммаНалогаДоКорректировки) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.СуммаНалогаДоКорректировки = СуммаНалогаДоКорректировки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦенаЗаЕдиницуИзмерения) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.ЦенаЗаЕдиницуИзмерения = 
					?(Количество = 0, 0, Окр(ЦенаЗаЕдиницуИзмерения / Количество, 2, РежимОкругления.Окр15как20));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦенаЗаЕдиницуИзмеренияДоКорректировки) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.ЦенаЗаЕдиницуИзмеренияДоКорректировки =
					?(КоличествоДоКорректировки = 0,
						0,
						Окр(ЦенаЗаЕдиницуИзмеренияДоКорректировки / КоличествоДоКорректировки, 2, РежимОкругления.Окр15как20)
					);
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Содержание = СтрСоединить(Содержания, ", ");
		Если Не НоваяСтрокаЗаполнена Тогда
			Товары.Удалить(НоваяСтрока);
		Иначе
			// пересчитать цену
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
			Документы.СчетФактураПолученный.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока);
			НоваяСтрока.СуммаНДС = СуммаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		КопияТовары.Удалить(Строка);
	КонецЦикла;
	
	Для Каждого Строка Из КопияТовары Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьТоварыСФПоОснованиюСчетФактураПолученный(Объект, Товары)
	
	Если Товары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопияТовары = Товары.Скопировать();
	Товары.Очистить();
	
	Выборка = ВыборкаУникальныхСтрок(
		КопияТовары,
		"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
	);
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
		);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СуммаНДС = 0;
		Содержания = Новый Массив;
		Для Каждого Строка Из НайденныеТовары Цикл
			НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
			НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			
			Если ЗначениеЗаполнено(Строка.Содержание) Тогда
				Содержания.Добавить(Строка.Содержание);
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока.Содержание = СтрСоединить(Содержания, ", ");
		Документы.СчетФактураПолученный.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока);
		НоваяСтрока.СуммаНДС = СуммаНДС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьТаблицуТоваровЗаказПокупателя(Объект)
	
	КопияТовары = Объект.Товары.Выгрузить();
	Объект.Товары.Очистить();
	
	Выборка = ВыборкаУникальныхСтрок(КопияТовары, "Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент");
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СуммаНДС = 0;
		
		ИдентификаторыТоваров = Новый Массив;
		Для Каждого Строка Из НайденныеТовары Цикл
			НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
			НоваяСтрока.Резерв = НоваяСтрока.Резерв + Строка.Резерв;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
			НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
			НоваяСтрока.Ячейка = ?(ЗначениеЗаполнено(НоваяСтрока.Ячейка), НоваяСтрока.Ячейка, Строка.Ячейка);
		КонецЦикла;
		
		// пересчитать цену
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе 
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
		КонецЕсли;
		НоваяСтрока.СуммаНДС = СуммаНДС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьТаблицуТоваровЗаказПоставщику(Объект)
	
	КопияТовары = Объект.Товары.Выгрузить();
	
	Объект.Товары.Очистить();
	Выборка = ВыборкаУникальныхСтрок(
		КопияТовары,
		"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент"
	);
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СуммаНДС = 0;
		Для Каждого Строка Из НайденныеТовары Цикл
			НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
			НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
		КонецЦикла;
		
		// пересчитать цену
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
		КонецЕсли;
		НоваяСтрока.СуммаНДС = СуммаНДС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьТаблицуТоваровЭДКорректировкаПоступления(Объект, Товары, КодыМаркировки)
	
	Если Товары.Колонки.Найти("СведенияОИзмененииКоличества") = Неопределено Тогда
		КопияТовары = Товары.Скопировать();
		Товары.Очистить();
		
		Выборка = ВыборкаУникальныхСтрок(
			КопияТовары,
			"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
		);
		
		Пока Выборка.Следующий() Цикл
			ПараметрыОтбора = Новый Структура(
				"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
			);
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
			НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			СуммаНДС = 0;
			Содержания = Новый Массив;
			ИдентификаторыТоваров = Новый Массив;
			Для Каждого Строка Из НайденныеТовары Цикл
				НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
				НоваяСтрока.КоличествоБазовое = НоваяСтрока.КоличествоБазовое + Строка.КоличествоБазовое;
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
				НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
				НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
				СуммаНДС = СуммаНДС + Строка.СуммаНДС;
				НоваяСтрока.Ячейка = ?(ЗначениеЗаполнено(НоваяСтрока.Ячейка), НоваяСтрока.Ячейка, Строка.Ячейка);
				НоваяСтрока.КоличествоПоНакладной = НоваяСтрока.КоличествоПоНакладной + Строка.КоличествоПоНакладной;
				НоваяСтрока.СпособРаспределенияЗаказов = ?(
					ЗначениеЗаполнено(НоваяСтрока.СпособРаспределенияЗаказов),
					НоваяСтрока.СпособРаспределенияЗаказов,
					Строка.СпособРаспределенияЗаказов
				);
				
				Если ЗначениеЗаполнено(Строка.Содержание) Тогда
					Содержания.Добавить(Строка.Содержание);
				КонецЕсли;
				ИдентификаторыТоваров.Добавить(Строка.ИдентификаторТовара);
			КонецЦикла;
			
			НоваяСтрока.НеПересчитыватьСтроку = Истина;
			НоваяСтрока.Содержание = СтрСоединить(Содержания, ", ");
			Если ЗначениеЗаполнено(ИдентификаторыТоваров) Тогда
				НоваяСтрока.ИдентификаторТовара = ИдентификаторыТоваров[0];
				Для Индекс = 1 По ИдентификаторыТоваров.Количество() - 1 Цикл
					ПараметрыОтбора = Новый Структура("ИдентификаторТовара", ИдентификаторыТоваров[Индекс]);
					НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НайденнаяСтрока.ИдентификаторТовара = НоваяСтрока.ИдентификаторТовара;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			// пересчитать цену
			Если НоваяСтрока.Количество = 0 Тогда
				НоваяСтрока.Цена = 0;
			Иначе
				НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
			НоваяСтрока.СуммаНДС = СуммаНДС;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	КопияТовары = Товары.Скопировать();
	Товары.Очистить();
	
	Выборка = ВыборкаУникальныхСтрок(
		КопияТовары,
		"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
	);
	
	СтрокиКУдалению = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
		);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СуммаНДС = 0;
		СуммаНДСПоДокументуПоступления = 0;
		Содержания = Новый Массив;
		ИдентификаторыТоваров = Новый Массив;
		СодержанияДоКорректировки = Новый Массив;
		
		ЕстьСведенияОбИзмененииКоличества = Ложь;
		СтоимостьТоваровБезНалога = 0;
		СтоимостьТоваровБезНалогаДоКорректировки = 0;
		ЦенаЗаЕдиницуИзмерения = 0;
		ЦенаЗаЕдиницуИзмеренияДоКорректировки = 0;
		Количество = 0;
		КоличествоДоКорректировки = 0;
		СуммаНалога = 0;
		СуммаНалогаДоКорректировки = 0;
		НоваяСтрокаЗаполнена = Ложь;
		
		Для Каждого Строка Из НайденныеТовары Цикл
			
			Если Строка.СведенияОИзмененииКоличества <> Неопределено
				И Строка.СведенияОИзмененииКоличества.КоличествоДоКорректировки = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаЗаполнена = Истина;
			СведенияОИзменении = Строка.СведенияОИзмененииКоличества;
			СтрокиКУдалению.Добавить(Строка);
			НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
			НоваяСтрока.КоличествоПоДокументуПоступления = НоваяСтрока.КоличествоПоДокументуПоступления
				+ Строка.КоличествоПоДокументуПоступления;
			НоваяСтрока.КоличествоДоКорректировки = НоваяСтрока.КоличествоДоКорректировки + Строка.КоличествоДоКорректировки;
			
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
			
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
			НоваяСтрока.СуммаВсегоПоДокументуПоступления = НоваяСтрока.СуммаВсегоПоДокументуПоступления
				+ Строка.СуммаВсегоПоДокументуПоступления;
			
			НоваяСтрока.СуммаРозничная = НоваяСтрока.СуммаРозничная + Строка.СуммаРозничная;
			НоваяСтрока.СуммаРозничнаяПоДокументуПоступления = НоваяСтрока.СуммаРозничнаяПоДокументуПоступления
				+ Строка.СуммаРозничнаяПоДокументуПоступления;
			
			НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
			НоваяСтрока.СтавкаНДСПоДокументуПоступления = ВыбратьСтавкуНДС(
				НоваяСтрока.СтавкаНДСПоДокументуПоступления,
				Строка.СтавкаНДСПоДокументуПоступления
			);
			
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			СуммаНДСПоДокументуПоступления = СуммаНДСПоДокументуПоступления + Строка.СуммаНДСПоДокументуПоступления;
			
			Если ЗначениеЗаполнено(Строка.Содержание) Тогда
				Содержания.Добавить(Строка.Содержание);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.СодержаниеДоКорректировки) Тогда
				СодержанияДоКорректировки.Добавить(Строка.СодержаниеДоКорректировки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОИзменении) Тогда
				ЕстьСведенияОбИзмененииКоличества = Истина;
				Если ЗначениеЗаполнено(СведенияОИзменении.Количество) Тогда
					Количество = Количество + СведенияОИзменении.Количество;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.КоличествоДоКорректировки) Тогда
					КоличествоДоКорректировки = КоличествоДоКорректировки + СведенияОИзменении.КоличествоДоКорректировки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.СтоимостьТоваровБезНалога) Тогда
					СтоимостьТоваровБезНалога = СтоимостьТоваровБезНалога
					+ СведенияОИзменении.СтоимостьТоваровБезНалога;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.СтоимостьТоваровБезНалогаДоКорректировки) Тогда
					СтоимостьТоваровБезНалогаДоКорректировки = СтоимостьТоваровБезНалогаДоКорректировки
						+ СведенияОИзменении.СтоимостьТоваровБезНалогаДоКорректировки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.СуммаНалога) Тогда
					СуммаНалога = СуммаНалога + СведенияОИзменении.СуммаНалога;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.СуммаНалогаДоКорректировки) Тогда
					СуммаНалогаДоКорректировки = СуммаНалогаДоКорректировки
					+ СведенияОИзменении.СуммаНалогаДоКорректировки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.ЦенаЗаЕдиницуИзмерения) Тогда
					ЦенаЗаЕдиницуИзмерения = ЦенаЗаЕдиницуИзмерения + СведенияОИзменении.ЦенаЗаЕдиницуИзмерения;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОИзменении.ЦенаЗаЕдиницуИзмеренияДоКорректировки) Тогда
					ЦенаЗаЕдиницуИзмеренияДоКорректировки = ЦенаЗаЕдиницуИзмеренияДоКорректировки
						+ СведенияОИзменении.ЦенаЗаЕдиницуИзмеренияДоКорректировки;
				КонецЕсли;
				
			КонецЕсли;
			
			ИдентификаторыТоваров.Добавить(Строка.ИдентификаторТовара);
		КонецЦикла;
		
		Если ЕстьСведенияОбИзмененииКоличества Тогда
			НоваяСтрока.СведенияОИзмененииКоличества = Новый Структура;
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("СтоимостьТоваровБезНалога");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("СтоимостьТоваровБезНалогаДоКорректировки");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("ЦенаЗаЕдиницуИзмерения");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("ЦенаЗаЕдиницуИзмеренияДоКорректировки");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("Количество");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("КоличествоДоКорректировки");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("СуммаНалога");
			НоваяСтрока.СведенияОИзмененииКоличества.Вставить("СуммаНалогаДоКорректировки");
			
			Если ЗначениеЗаполнено(Количество) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.Количество = Количество;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КоличествоДоКорректировки) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.КоличествоДоКорректировки = КоличествоДоКорректировки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтоимостьТоваровБезНалога) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.СтоимостьТоваровБезНалога = СтоимостьТоваровБезНалога;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтоимостьТоваровБезНалогаДоКорректировки) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.СтоимостьТоваровБезНалогаДоКорректировки
					= СтоимостьТоваровБезНалогаДоКорректировки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СуммаНалога) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.СуммаНалога = СуммаНалога;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СуммаНалогаДоКорректировки) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.СуммаНалогаДоКорректировки = СуммаНалогаДоКорректировки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦенаЗаЕдиницуИзмерения) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.ЦенаЗаЕдиницуИзмерения = 
					?(Количество = 0, 0, Окр(ЦенаЗаЕдиницуИзмерения / Количество, 2, РежимОкругления.Окр15как20));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦенаЗаЕдиницуИзмеренияДоКорректировки) Тогда
				НоваяСтрока.СведенияОИзмененииКоличества.ЦенаЗаЕдиницуИзмеренияДоКорректировки =
					?(КоличествоДоКорректировки = 0,
						0,
						Окр(ЦенаЗаЕдиницуИзмеренияДоКорректировки / КоличествоДоКорректировки, 2, РежимОкругления.Окр15как20)
					);
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Содержание = СтрСоединить(Содержания, ", ");
		НоваяСтрока.СодержаниеДоКорректировки = СтрСоединить(СодержанияДоКорректировки, ", ");
		
		Если ЕстьСведенияОбИзмененииКоличества
			И ЗначениеЗаполнено(НоваяСтрока.СведенияОИзмененииКоличества.КоличествоДоКорректировки) Тогда
			НоваяСтрока.ГТДПоДокументуПоступления = Строка.ГТД;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИдентификаторыТоваров) Тогда
			НоваяСтрока.ИдентификаторТовара = ИдентификаторыТоваров[0];
			Для Индекс = 1 По ИдентификаторыТоваров.Количество() - 1 Цикл
				ПараметрыОтбора = Новый Структура("ИдентификаторТовара", ИдентификаторыТоваров[Индекс]);
				НайденныеСтроки = КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.ИдентификаторТовара = НоваяСтрока.ИдентификаторТовара;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Не НоваяСтрокаЗаполнена Тогда 
			Товары.Удалить(НоваяСтрока);
		Иначе
			// пересчитать цену
			
			Если НоваяСтрока.Количество = 0 Тогда
				НоваяСтрока.Цена = 0;
			Иначе
				НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
			НоваяСтрока.СуммаНДС = СуммаНДС;
			НоваяСтрока.СуммаНДСПоДокументуПоступления = СуммаНДСПоДокументуПоступления;
			Документы.КорректировкаПоступления.РасчетРазницы(Объект, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		КопияТовары.Удалить(Строка);
	КонецЦикла;
	
	Для Каждого Строка Из КопияТовары Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьТаблицуТоваровОснованияКорректировкаПоступления(Объект, Товары)
	
	КопияТовары = Товары.Скопировать();
	Товары.Очистить();
	
	Выборка = ВыборкаУникальныхСтрок(
		КопияТовары,
		"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
	);
	
	СтрокиКУдалению = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД"
		);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СуммаНДС = 0;
		СуммаНДСПоДокументуПоступления = 0;
		Содержания = Новый Массив;
		ИдентификаторыТоваров = Новый Массив;
		СодержанияДоКорректировки = Новый Массив;
		
		ЕстьСведенияОбИзмененииКоличества = Ложь;
		СтоимостьТоваровБезНалога = 0;
		СтоимостьТоваровБезНалогаДоКорректировки = 0;
		ЦенаЗаЕдиницуИзмерения = 0;
		ЦенаЗаЕдиницуИзмеренияДоКорректировки = 0;
		Количество = 0;
		КоличествоДоКорректировки = 0;
		СуммаНалога = 0;
		СуммаНалогаДоКорректировки = 0;
		НоваяСтрокаЗаполнена = Ложь;
		
		Для Каждого Строка Из НайденныеТовары Цикл
			
			НоваяСтрокаЗаполнена = Истина;
			СтрокиКУдалению.Добавить(Строка);
			НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
			НоваяСтрока.КоличествоПоДокументуПоступления = НоваяСтрока.КоличествоПоДокументуПоступления
				+ Строка.КоличествоПоДокументуПоступления;
			НоваяСтрока.КоличествоДоКорректировки = НоваяСтрока.КоличествоДоКорректировки + Строка.КоличествоДоКорректировки;
			
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
			
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
			НоваяСтрока.СуммаВсегоПоДокументуПоступления = НоваяСтрока.СуммаВсегоПоДокументуПоступления
				+ Строка.СуммаВсегоПоДокументуПоступления;
			
			НоваяСтрока.СуммаРозничная = НоваяСтрока.СуммаРозничная + Строка.СуммаРозничная;
			НоваяСтрока.СуммаРозничнаяПоДокументуПоступления = НоваяСтрока.СуммаРозничнаяПоДокументуПоступления
				+ Строка.СуммаРозничнаяПоДокументуПоступления;
			
			НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
			НоваяСтрока.СтавкаНДСПоДокументуПоступления = ВыбратьСтавкуНДС(
				НоваяСтрока.СтавкаНДСПоДокументуПоступления,
				Строка.СтавкаНДСПоДокументуПоступления
			);
			
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			СуммаНДСПоДокументуПоступления = СуммаНДСПоДокументуПоступления + Строка.СуммаНДСПоДокументуПоступления;
			
			Если ЗначениеЗаполнено(Строка.Содержание) Тогда
				Содержания.Добавить(Строка.Содержание);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.СодержаниеДоКорректировки) Тогда
				СодержанияДоКорректировки.Добавить(Строка.СодержаниеДоКорректировки);
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока.Содержание = СтрСоединить(Содержания, ", ");
		НоваяСтрока.СодержаниеДоКорректировки = СтрСоединить(СодержанияДоКорректировки, ", ");
		НоваяСтрока.ГТдПоДокументуПоступления = Строка.ГТД;
		Если Не НоваяСтрокаЗаполнена Тогда 
			Товары.Удалить(НоваяСтрока);
		Иначе
			// пересчитать цену
			Если НоваяСтрока.Количество = 0 Тогда
				НоваяСтрока.Цена = 0;
			Иначе
				НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
			НоваяСтрока.СуммаНДС = СуммаНДС;
			НоваяСтрока.СуммаНДСПоДокументуПоступления = СуммаНДСПоДокументуПоступления;
			Документы.КорректировкаПоступления.РасчетРазницы(Объект, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		КопияТовары.Удалить(Строка);
	КонецЦикла;
	
	Для Каждого Строка Из КопияТовары Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьТаблицуТоваровКорректировкаПоступления(Объект, ТипЦенСНДС)
	
	КопияТовары = Объект.Товары.Выгрузить();
	Объект.Товары.Очистить();
	
	Выборка = ВыборкаУникальныхСтрок(
		КопияТовары,
		"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД, Цена"
	);
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД, Цена"
		);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СуммаНДС = 0;
		СуммаНДСПоДокументуПоступления = 0;
		Содержания = Новый Массив;
		ИдентификаторыТоваров = Новый Массив;
		СодержанияДоКорректировки = Новый Массив;
		
		Для Каждого Строка Из НайденныеТовары Цикл
			
			НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
			НоваяСтрока.КоличествоПоДокументуПоступления = НоваяСтрока.КоличествоПоДокументуПоступления
				+ Строка.КоличествоПоДокументуПоступления;
			НоваяСтрока.КоличествоДоКорректировки = НоваяСтрока.КоличествоДоКорректировки + Строка.КоличествоДоКорректировки;
			
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
			
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
			НоваяСтрока.СуммаВсегоПоДокументуПоступления = НоваяСтрока.СуммаВсегоПоДокументуПоступления
				+ Строка.СуммаВсегоПоДокументуПоступления;
			
			НоваяСтрока.СуммаРозничная = НоваяСтрока.СуммаРозничная + Строка.СуммаРозничная;
			НоваяСтрока.СуммаРозничнаяПоДокументуПоступления = НоваяСтрока.СуммаРозничнаяПоДокументуПоступления
				+ Строка.СуммаРозничнаяПоДокументуПоступления;
			
			НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
			НоваяСтрока.СтавкаНДСПоДокументуПоступления = ВыбратьСтавкуНДС(
				НоваяСтрока.СтавкаНДСПоДокументуПоступления,
				Строка.СтавкаНДСПоДокументуПоступления
			);
			
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			СуммаНДСПоДокументуПоступления = СуммаНДСПоДокументуПоступления + Строка.СуммаНДСПоДокументуПоступления;
			
			Если ЗначениеЗаполнено(Строка.Содержание) Тогда
				Содержания.Добавить(Строка.Содержание);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Содержание) Тогда
				СодержанияДоКорректировки.Добавить(Строка.СодержаниеДоКорректировки);
			КонецЕсли;
			
			ИдентификаторыТоваров.Добавить(Строка.ИдентификаторТовара);
			
			НоваяСтрока.ПоДокументуПоступления = НоваяСтрока.ПоДокументуПоступления Или Строка.ПоДокументуПоступления;
			
		КонецЦикла;
		
		НоваяСтрока.Содержание = СтрСоединить(Содержания, ", ");
		НоваяСтрока.СодержаниедоКорректировки = СтрСоединить(СодержанияДоКорректировки, ", ");
		НоваяСтрока.Подтверждение = Истина;
		Если НоваяСтрока.КоличествоПоДокументуПоступления<> 0 Тогда
			НоваяСтрока.ГТДПоДокументуПоступления = НоваяСтрока.ГТД;
			НоваяСтрока.ЕдиницаИзмеренияПоДокументуПоступления = НоваяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.КоэффициентПоДокументуПоступления = НоваяСтрока.Коэффициент;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИдентификаторыТоваров) Тогда
			НоваяСтрока.ИдентификаторТовара = ИдентификаторыТоваров[0];
			Для Индекс = 1 По ИдентификаторыТоваров.Количество() - 1 Цикл
				ПараметрыОтбора = Новый Структура("ИдентификаторТовара", ИдентификаторыТоваров[Индекс]);
				НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.ИдентификаторТовара = НоваяСтрока.ИдентификаторТовара;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// пересчитать цену
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			Если ТипЦенСНДС Тогда 
				НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
			Иначе
				НоваяСтрока.Цена = Окр((НоваяСтрока.СуммаВсего - СуммаНДС) / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
		КонецЕсли;
		
		//Документы.КорректировкаПоступления.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока);
		НоваяСтрока.СуммаНДС = СуммаНДС;
		НоваяСтрока.СуммаНДСПоДокументуПоступления = СуммаНДСПоДокументуПоступления;
		Документы.КорректировкаПоступления.РасчетРазницы(Объект, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыбратьСтавкуНДС(СтавкаНДС1, СтавкаНДС2)
	
	Если Не ЗначениеЗаполнено(СтавкаНДС1) Тогда
		Возврат СтавкаНДС2;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтавкаНДС2) Тогда 
		Возврат СтавкаНДС1;
	КонецЕсли;
	
	МассивСтавок = Новый Массив();
	МассивСтавок.Добавить(СтавкаНДС1);
	МассивСтавок.Добавить(СтавкаНДС2);
	ЗначенияСтавок = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСтавок, "Ставка");
	Если ЗначенияСтавок[СтавкаНДС1].Ставка >= ЗначенияСтавок[СтавкаНДС2].Ставка Тогда
		Возврат СтавкаНДС1;
	Иначе
		Возврат СтавкаНДС2;
	КонецЕсли;
	
КонецФункции

Функция ВыборкаУникальныхСтрок(ТаблицаТоваров, УникальныеКолонки)
	
	ТекстЗагрузки = Новый Массив;
	ТекстВыгрузки = Новый Массив;
	Для Каждого УникальнаяКолонка Из СтрРазделить(УникальныеКолонки, ",") Цикл
		ТекстЗагрузки.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Товары.%1 КАК %1", СокрЛП(УникальнаяКолонка))
		);
		ТекстВыгрузки.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("втТовары.%1 КАК %1", СокрЛП(УникальнаяКолонка))
		);
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	| %1
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	%2
	|ИЗ
	|	втТовары КАК втТовары";
	
	ТекстЗапроса = СтрШаблон(
		ТекстЗапроса,
		СтрСоединить(ТекстЗагрузки, "," + Символы.ПС),
		СтрСоединить(ТекстВыгрузки, "," + Символы.ПС)
	);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура СвернутьТаблицуТоваровПоступлениеДопРасходов(Объект)
	
	КопияТовары = Объект.Товары.Выгрузить();
	
	Объект.Товары.Очистить();
	Выборка = ВыборкаУникальныхСтрок(
		КопияТовары,
		"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент"
	);
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		НайденныеТовары = КопияТовары.НайтиСтроки(ПараметрыОтбора);
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СуммаНДС = 0;
		Содержания = Новый Массив;
		Для Каждого Строка Из НайденныеТовары Цикл
			НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Строка.Сумма;
			НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + Строка.СуммаВсего;
			НоваяСтрока.СтавкаНДС = ВыбратьСтавкуНДС(НоваяСтрока.СтавкаНДС, Строка.СтавкаНДС);
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			Если ЗначениеЗаполнено(Строка.Содержание) Тогда
				Содержания.Добавить(Строка.Содержание);
			КонецЕсли;
		КонецЦикла;
		
		// пересчитать цену
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
		КонецЕсли;
		НоваяСтрока.СуммаНДС = СуммаНДС;
		НоваяСтрока.Содержание = СтрСоединить(Содержания, ", ");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетТабличныхЧастейДокументовЭДО

Процедура ПересчетЦенТабличнойЧасти(Объект)
	
	ТипЦенСНДС = ВДокументеТипЦенСНДС(Объект.ТипЦен);
	
	Если ТипЦенСНДС Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		Если Строка.Количество = 0 Тогда
			Строка.Цена = 0;
		Иначе
			Строка.Цена = Окр(Строка.Сумма / Строка.Количество, 2, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВДокументеТипЦенСНДС(ТипЦен)
	
	ТипЦенСНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
	
	Если ТипЦенСНДС = Неопределено Тогда
		ТипЦенСНДС = Ложь;
	КонецЕсли;
	
	Возврат ТипЦенСНДС;
КонецФункции

#КонецОбласти

#Область КонструкторДополнительныхПолей

Функция ЗапросКонструктораДополнительныхПолейШапкиУПД()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Номер КАК Номер,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.Организация КАК Организация,
	|	СчетФактураВыданный.Контрагент КАК Контрагент,
	|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактураВыданный.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактураВыданный.ДатаВыставления КАК ДатаВыставления,
	|	СчетФактураВыданный.СуммаДокумента КАК СуммаДокумента,
	|	СчетФактураВыданный.СуммаНДСДокумента КАК СуммаНДСДокумента,
	|	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетФактураВыданный.Руководитель КАК Руководитель,
	|	СчетФактураВыданный.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	СчетФактураВыданный.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
	|	СчетФактураВыданный.Комментарий КАК Комментарий,
	|	СчетФактураВыданный.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СчетФактураВыданный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураВыданный.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Номер КАК Номер,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.Организация КАК Организация,
	|	СчетФактураВыданный.Контрагент КАК Контрагент,
	|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактураВыданный.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактураВыданный.ДатаВыставления КАК ДатаВыставления,
	|	СчетФактураВыданный.СуммаДокумента КАК СуммаДокумента,
	|	СчетФактураВыданный.СуммаНДСДокумента КАК СуммаНДСДокумента,
	|	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетФактураВыданный.Руководитель КАК Руководитель,
	|	СчетФактураВыданный.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	СчетФактураВыданный.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
	|	СчетФактураВыданный.Комментарий КАК Комментарий,
	|	СчетФактураВыданный.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СчетФактураВыданный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураВыданный.ПодразделениеКомпании КАК ПодразделениеКомпании
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиРеализации()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваров.Ссылка КАК Ссылка,
	|	РеализацияТоваров.Номер КАК Номер,
	|	РеализацияТоваров.Дата КАК Дата,
	|	РеализацияТоваров.Контрагент КАК Контрагент,
	|	РеализацияТоваров.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РеализацияТоваров.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	РеализацияТоваров.СкладКомпании КАК СкладКомпании,
	|	РеализацияТоваров.ДокументОснование КАК ДокументОснование,
	|	РеализацияТоваров.ТипЦен КАК ТипЦен,
	|	РеализацияТоваров.Карточка КАК Карточка,
	|	РеализацияТоваров.СкидкаНаценка КАК СкидкаНаценка,
	|	РеализацияТоваров.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	РеализацияТоваров.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	РеализацияТоваров.Комитент КАК Комитент,
	|	РеализацияТоваров.ДоговорКомитента КАК ДоговорКомитента,
	|	РеализацияТоваров.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
	|	РеализацияТоваров.Автомобиль КАК Автомобиль,
	|	РеализацияТоваров.СуммаСписания КАК СуммаСписания,
	|	РеализацияТоваров.СуммаСписанияБезНДС КАК СуммаСписанияБезНДС,
	|	РеализацияТоваров.Патент КАК Патент,
	|	РеализацияТоваров.Грузоотправитель КАК Грузоотправитель,
	|	РеализацияТоваров.Грузополучатель КАК Грузополучатель,
	|	РеализацияТоваров.Перевозчик КАК Перевозчик,
	|	РеализацияТоваров.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваров.Водитель КАК Водитель,
	|	РеализацияТоваров.НомерВодительскогоУдостоверения КАК НомерВодительскогоУдостоверения,
	|	РеализацияТоваров.ОписаниеГруза КАК ОписаниеГруза,
	|	РеализацияТоваров.МодельАвтомобиля КАК МодельАвтомобиля,
	|	РеализацияТоваров.ГосНомерАвтомобиля КАК ГосНомерАвтомобиля,
	|	РеализацияТоваров.ЕстьПрицеп КАК ЕстьПрицеп,
	|	РеализацияТоваров.МодельПрицепа КАК МодельПрицепа,
	|	РеализацияТоваров.ГосНомерПрицепа КАК ГосНомерПрицепа,
	|	РеализацияТоваров.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	РеализацияТоваров.Отпустил КАК Отпустил,
	|	РеализацияТоваров.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияТоваров.Комментарий КАК Комментарий,
	|	РеализацияТоваров.Организация КАК Организация,
	|	РеализацияТоваров.ПодписантОтКонтрагента КАК ПодписантОтКонтрагента,
	|	РеализацияТоваров.ПодписантОтОрганизации КАК ПодписантОтОрганизации,
	|	РеализацияТоваров.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	РеализацияТоваров.Проект КАК Проект,
	|	РеализацияТоваров.СуммаДокумента КАК СуммаДокумента,
	|	"""" КАК Сделка,
	|	0 КАК СуммаНоменклатурыДокумента,
	|	0 КАК СуммаРаботДокумента,
	|	"""" КАК ТипЦенРабот,
	|	0 КАК СуммаДокументаРазница,
	|	"""" КАК НомерИсправления,
	|	РеализацияТоваров.Руководитель КАК Руководитель,
	|	РеализацияТоваров.Получил КАК Получил,
	|	"""" КАК Принял,
	|	"""" КАК Заказчик,
	|	"""" КАК ВидРемонта,
	|	"""" КАК Состояние,
	|	"""" КАК МаркетинговаяПрограмма,
	|	"""" КАК Цех,
	|	"""" КАК Мастер,
	|	"""" КАК Диспетчер,
	|	"""" КАК СкидкаНаценкаРаботы,
	|	0 КАК ЗначениеСкидкиНаценкиРабот,
	|	0 КАК СуммаСкидкиНаценкиРабот,
	|	0 КАК ВремяВыполненияРабот,
	|	"""" КАК ДатаНачала,
	|	"""" КАК ДатаОкончания,
	|	"""" КАК ДатаЗакрытия,
	|	"""" КАК Рекомендации,
	|	"""" КАК Гарантии,
	|	"""" КАК СервиснаяКампания,
	|	0 КАК ПробегСледующегоТО,
	|	"""" КАК ДатаСледующегоТО,
	|	"""" КАК СводныйРемонтныйЗаказ,
	|	"""" КАК ОписаниеПричиныОбращения,
	|	0 КАК СогласованнаяСумма,
	|	"""" КАК Нормочас,
	|	0 КАК Пробег
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка,
	|	КорректировкаРеализации.Номер,
	|	КорректировкаРеализации.Дата,
	|	КорректировкаРеализации.Контрагент,
	|	КорректировкаРеализации.ДоговорВзаиморасчетов,
	|	КорректировкаРеализации.КурсВалютыВзаиморасчетов,
	|	КорректировкаРеализации.СкладКомпании,
	|	КорректировкаРеализации.ДокументОснование,
	|	КорректировкаРеализации.ТипЦен,
	|	КорректировкаРеализации.Карточка,
	|	"""",
	|	0,
	|	0,
	|	"""",
	|	"""",
	|	КорректировкаРеализации.ИдентификаторГосударственногоКонтракта,
	|	КорректировкаРеализации.Автомобиль,
	|	0,
	|	0,
	|	"""",
	|	КорректировкаРеализации.Грузоотправитель,
	|	КорректировкаРеализации.Грузополучатель,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ЛОЖЬ,
	|	"""",
	|	"""",
	|	КорректировкаРеализации.ГлавныйБухгалтер,
	|	КорректировкаРеализации.Отпустил,
	|	КорректировкаРеализации.ВалютаДокумента,
	|	КорректировкаРеализации.Комментарий,
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.ПодписантОтКонтрагента,
	|	КорректировкаРеализации.ПодписантОтОрганизации,
	|	КорректировкаРеализации.ПодразделениеКомпании,
	|	КорректировкаРеализации.Проект,
	|	КорректировкаРеализации.СуммаДокумента,
	|	КорректировкаРеализации.Сделка,
	|	КорректировкаРеализации.СуммаНоменклатурыДокумента,
	|	КорректировкаРеализации.СуммаРаботДокумента,
	|	КорректировкаРеализации.ТипЦенРабот,
	|	КорректировкаРеализации.СуммаДокументаРазница,
	|	КорректировкаРеализации.НомерИсправления,
	|	КорректировкаРеализации.Руководитель,
	|	КорректировкаРеализации.Получил,
	|	КорректировкаРеализации.Принял,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	0,
	|	0,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	"""",
	|	0
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияАвтомобилей.Ссылка,
	|	РеализацияАвтомобилей.Номер,
	|	РеализацияАвтомобилей.Дата,
	|	РеализацияАвтомобилей.Контрагент,
	|	РеализацияАвтомобилей.ДоговорВзаиморасчетов,
	|	РеализацияАвтомобилей.КурсВалютыВзаиморасчетов,
	|	РеализацияАвтомобилей.СкладКомпании,
	|	РеализацияАвтомобилей.ДокументОснование,
	|	РеализацияАвтомобилей.ТипЦен,
	|	РеализацияАвтомобилей.Карточка,
	|	РеализацияАвтомобилей.СкидкаНаценка,
	|	РеализацияАвтомобилей.ЗначениеСкидкиНаценки,
	|	РеализацияАвтомобилей.СуммаСкидкиНаценки,
	|	"""",
	|	"""",
	|	РеализацияАвтомобилей.ИдентификаторГосударственногоКонтракта,
	|	"""",
	|	0,
	|	0,
	|	РеализацияАвтомобилей.Патент,
	|	РеализацияАвтомобилей.Грузоотправитель,
	|	РеализацияАвтомобилей.Грузополучатель,
	|	РеализацияАвтомобилей.Перевозчик,
	|	РеализацияАвтомобилей.АдресДоставки,
	|	РеализацияАвтомобилей.Водитель,
	|	РеализацияАвтомобилей.НомерВодительскогоУдостоверения,
	|	РеализацияАвтомобилей.ОписаниеГруза,
	|	РеализацияАвтомобилей.МодельАвтомобиля,
	|	РеализацияАвтомобилей.ГосНомерАвтомобиля,
	|	РеализацияАвтомобилей.ЕстьПрицеп,
	|	РеализацияАвтомобилей.МодельПрицепа,
	|	РеализацияАвтомобилей.ГосНомерПрицепа,
	|	РеализацияАвтомобилей.ГлавныйБухгалтер,
	|	РеализацияАвтомобилей.Отпустил,
	|	РеализацияАвтомобилей.ВалютаДокумента,
	|	РеализацияАвтомобилей.Комментарий,
	|	РеализацияАвтомобилей.Организация,
	|	РеализацияАвтомобилей.ПодписантОтКонтрагента,
	|	РеализацияАвтомобилей.ПодписантОтОрганизации,
	|	РеализацияАвтомобилей.ПодразделениеКомпании,
	|	РеализацияАвтомобилей.Проект,
	|	РеализацияАвтомобилей.СуммаДокумента,
	|	"""",
	|	0,
	|	0,
	|	"""",
	|	0,
	|	"""",
	|	РеализацияАвтомобилей.Руководитель,
	|	РеализацияАвтомобилей.Получил,
	|	РеализацияАвтомобилей.Принял,
	|	РеализацияАвтомобилей.Заказчик,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	0,
	|	0,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	"""",
	|	0
	|ИЗ
	|	Документ.РеализацияАвтомобилей КАК РеализацияАвтомобилей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииАвтомобилей.Ссылка,
	|	КорректировкаРеализацииАвтомобилей.Номер,
	|	КорректировкаРеализацииАвтомобилей.Дата,
	|	КорректировкаРеализацииАвтомобилей.Контрагент,
	|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов,
	|	КорректировкаРеализацииАвтомобилей.КурсВалютыВзаиморасчетов,
	|	КорректировкаРеализацииАвтомобилей.СкладКомпании,
	|	КорректировкаРеализацииАвтомобилей.ДокументОснование,
	|	КорректировкаРеализацииАвтомобилей.ТипЦен,
	|	КорректировкаРеализацииАвтомобилей.Карточка,
	|	"""",
	|	0,
	|	0,
	|	"""",
	|	"""",
	|	КорректировкаРеализацииАвтомобилей.ИдентификаторГосударственногоКонтракта,
	|	"""",
	|	0,
	|	0,
	|	"""",
	|	КорректировкаРеализацииАвтомобилей.Грузоотправитель,
	|	КорректировкаРеализацииАвтомобилей.Грузополучатель,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ЛОЖЬ,
	|	"""",
	|	"""",
	|	КорректировкаРеализацииАвтомобилей.ГлавныйБухгалтер,
	|	КорректировкаРеализацииАвтомобилей.Отпустил,
	|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента,
	|	КорректировкаРеализацииАвтомобилей.Комментарий,
	|	КорректировкаРеализацииАвтомобилей.Организация,
	|	КорректировкаРеализацииАвтомобилей.ПодписантОтКонтрагента,
	|	КорректировкаРеализацииАвтомобилей.ПодписантОтОрганизации,
	|	КорректировкаРеализацииАвтомобилей.ПодразделениеКомпании,
	|	КорректировкаРеализацииАвтомобилей.Проект,
	|	КорректировкаРеализацииАвтомобилей.СуммаДокумента,
	|	КорректировкаРеализацииАвтомобилей.Сделка,
	|	0,
	|	0,
	|	"""",
	|	КорректировкаРеализацииАвтомобилей.СуммаДокументаРазница,
	|	КорректировкаРеализацииАвтомобилей.НомерИсправления,
	|	КорректировкаРеализацииАвтомобилей.Руководитель,
	|	КорректировкаРеализацииАвтомобилей.Получил,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	0,
	|	0,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	"""",
	|	0
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей КАК КорректировкаРеализацииАвтомобилей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаряд.Ссылка,
	|	ЗаказНаряд.Номер,
	|	ЗаказНаряд.Дата,
	|	ЗаказНаряд.Контрагент,
	|	ЗаказНаряд.ДоговорВзаиморасчетов,
	|	ЗаказНаряд.КурсВалютыВзаиморасчетов,
	|	ЗаказНаряд.СкладКомпании,
	|	ЗаказНаряд.ДокументОснование,
	|	ЗаказНаряд.ТипЦен,
	|	ЗаказНаряд.Карточка,
	|	ЗаказНаряд.СкидкаНаценка,
	|	ЗаказНаряд.ЗначениеСкидкиНаценки,
	|	ЗаказНаряд.СуммаСкидкиНаценки,
	|	"""",
	|	"""",
	|	ЗаказНаряд.ИдентификаторГосударственногоКонтракта,
	|	"""",
	|	0,
	|	0,
	|	ЗаказНаряд.Патент,
	|	ЗаказНаряд.Грузоотправитель,
	|	ЗаказНаряд.Грузополучатель,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ЛОЖЬ,
	|	"""",
	|	"""",
	|	ЗаказНаряд.ГлавныйБухгалтер,
	|	ЗаказНаряд.Отпустил,
	|	ЗаказНаряд.ВалютаДокумента,
	|	ЗаказНаряд.Комментарий,
	|	ЗаказНаряд.Организация,
	|	ЗаказНаряд.ПодписантОтКонтрагента,
	|	ЗаказНаряд.ПодписантОтОрганизации,
	|	ЗаказНаряд.ПодразделениеКомпании,
	|	ЗаказНаряд.Проект,
	|	ЗаказНаряд.СуммаДокумента,
	|	"""",
	|	ЗаказНаряд.СуммаНоменклатурыДокумента,
	|	ЗаказНаряд.СуммаРаботДокумента,
	|	ЗаказНаряд.ТипЦенРабот,
	|	0,
	|	"""",
	|	ЗаказНаряд.Руководитель,
	|	ЗаказНаряд.Получил,
	|	ЗаказНаряд.Принял,
	|	"""",
	|	ЗаказНаряд.ВидРемонта,
	|	ЗаказНаряд.Состояние,
	|	ЗаказНаряд.МаркетинговаяПрограмма,
	|	ЗаказНаряд.Цех,
	|	ЗаказНаряд.Мастер,
	|	ЗаказНаряд.Диспетчер,
	|	ЗаказНаряд.СкидкаНаценкаРаботы,
	|	ЗаказНаряд.ЗначениеСкидкиНаценкиРабот,
	|	ЗаказНаряд.СуммаСкидкиНаценкиРабот,
	|	ЗаказНаряд.ВремяВыполненияРабот,
	|	ЗаказНаряд.ДатаНачала,
	|	ЗаказНаряд.ДатаОкончания,
	|	ЗаказНаряд.ДатаЗакрытия,
	|	ЗаказНаряд.Рекомендации,
	|	ЗаказНаряд.Гарантии,
	|	ЗаказНаряд.СервиснаяКампания,
	|	ЗаказНаряд.ПробегСледующегоТО,
	|	ЗаказНаряд.ДатаСледующегоТО,
	|	ЗаказНаряд.СводныйРемонтныйЗаказ,
	|	ЗаказНаряд.ОписаниеПричиныОбращения,
	|	ЗаказНаряд.СогласованнаяСумма,
	|	ЗаказНаряд.Нормочас,
	|	ЗаказНаряд.Пробег
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратПоставщику.Ссылка,
	|	ВозвратПоставщику.Номер,
	|	ВозвратПоставщику.Дата,
	|	ВозвратПоставщику.Контрагент,
	|	ВозвратПоставщику.ДоговорВзаиморасчетов,
	|	ВозвратПоставщику.КурсВалютыВзаиморасчетов,
	|	ВозвратПоставщику.СкладКомпании,
	|	ВозвратПоставщику.ДокументОснование,
	|	ВозвратПоставщику.ТипЦен,
	|	"""",
	|	"""",
	|	0,
	|	0,
	|	"""",
	|	"""",
	|	ВозвратПоставщику.ИдентификаторГосударственногоКонтракта,
	|	"""",
	|	0,
	|	0,
	|	"""",
	|	ВозвратПоставщику.Грузоотправитель,
	|	ВозвратПоставщику.Грузополучатель,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ЛОЖЬ,
	|	"""",
	|	"""",
	|	ВозвратПоставщику.ГлавныйБухгалтер,
	|	ВозвратПоставщику.Отпустил,
	|	ВозвратПоставщику.ВалютаДокумента,
	|	ВозвратПоставщику.Комментарий,
	|	ВозвратПоставщику.Организация,
	|	ВозвратПоставщику.ПодписантОтКонтрагента,
	|	ВозвратПоставщику.ПодписантОтОрганизации,
	|	ВозвратПоставщику.ПодразделениеКомпании,
	|	ВозвратПоставщику.Проект,
	|	ВозвратПоставщику.СуммаДокумента,
	|	"""",
	|	0,
	|	0,
	|	"""",
	|	0,
	|	"""",
	|	ВозвратПоставщику.Руководитель,
	|	ВозвратПоставщику.Получил,
	|	ВозвратПоставщику.Принял,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	0,
	|	0,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	"""",
	|	0
	|ИЗ
	|	Документ.ВозвратПоставщику КАК ВозвратПоставщику";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиАкта()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктСверкиВзаиморасчетов.Ссылка КАК Ссылка,
	|	АктСверкиВзаиморасчетов.Номер КАК Номер,
	|	АктСверкиВзаиморасчетов.Дата КАК Дата,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Расхождение КАК Расхождение,
	|	АктСверкиВзаиморасчетов.СверкаСогласована КАК СверкаСогласована,
	|	АктСверкиВзаиморасчетов.СуммаДокументаПриход КАК СуммаДокументаПриход,
	|	АктСверкиВзаиморасчетов.СуммаДокументаПриходК КАК СуммаДокументаПриходК,
	|	АктСверкиВзаиморасчетов.СуммаДокументаРасход КАК СуммаДокументаРасход,
	|	АктСверкиВзаиморасчетов.СуммаДокументаРасходК КАК СуммаДокументаРасходК,
	|	АктСверкиВзаиморасчетов.ДокументКонтрагента КАК ДокументКонтрагента,
	|	АктСверкиВзаиморасчетов.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	АктСверкиВзаиморасчетов.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	АктСверкиВзаиморасчетов.ЕстьРасхождения КАК ЕстьРасхождения,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачалоПоКонтрагенту КАК ОстатокНаНачалоПоКонтрагенту,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.Комментарий КАК Комментарий,
	|	АктСверкиВзаиморасчетов.КурсДокумента КАК КурсДокумента,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.ПодписантОтКонтрагента КАК ПодписантОтКонтрагента,
	|	АктСверкиВзаиморасчетов.ПодписантОтОрганизации КАК ПодписантОтОрганизации,
	|	АктСверкиВзаиморасчетов.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	АктСверкиВзаиморасчетов.Проект КАК Проект
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиКорректировкиРеализации()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаРеализации.Ссылка КАК Ссылка,
	|	КорректировкаРеализации.Номер КАК Номер,
	|	КорректировкаРеализации.Дата КАК Дата,
	|	КорректировкаРеализации.Сделка КАК Сделка,
	|	КорректировкаРеализации.СкладКомпании КАК СкладКомпании,
	|	КорректировкаРеализации.Контрагент КАК Контрагент,
	|	КорректировкаРеализации.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	КорректировкаРеализации.Карточка КАК Карточка,
	|	КорректировкаРеализации.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	КорректировкаРеализации.Автомобиль КАК Автомобиль,
	|	КорректировкаРеализации.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
	|	КорректировкаРеализации.НомерИсправления КАК НомерИсправления,
	|	КорректировкаРеализации.Грузоотправитель КАК Грузоотправитель,
	|	КорректировкаРеализации.Грузополучатель КАК Грузополучатель,
	|	КорректировкаРеализации.Руководитель КАК Руководитель,
	|	КорректировкаРеализации.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	КорректировкаРеализации.Отпустил КАК Отпустил,
	|	КорректировкаРеализации.Получил КАК Получил,
	|	КорректировкаРеализации.ВалютаДокумента КАК ВалютаДокумента,
	|	КорректировкаРеализации.Комментарий КАК Комментарий,
	|	КорректировкаРеализации.Организация КАК Организация,
	|	КорректировкаРеализации.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	КорректировкаРеализации.Проект КАК Проект,
	|	КорректировкаРеализации.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииАвтомобилей.Ссылка,
	|	КорректировкаРеализацииАвтомобилей.Номер,
	|	КорректировкаРеализацииАвтомобилей.Дата,
	|	КорректировкаРеализацииАвтомобилей.Сделка,
	|	КорректировкаРеализацииАвтомобилей.СкладКомпании,
	|	КорректировкаРеализацииАвтомобилей.Контрагент,
	|	КорректировкаРеализацииАвтомобилей.ДоговорВзаиморасчетов,
	|	КорректировкаРеализацииАвтомобилей.Карточка,
	|	КорректировкаРеализацииАвтомобилей.КурсВалютыВзаиморасчетов,
	|	"""",
	|	КорректировкаРеализацииАвтомобилей.ИдентификаторГосударственногоКонтракта,
	|	КорректировкаРеализацииАвтомобилей.НомерИсправления,
	|	КорректировкаРеализацииАвтомобилей.Грузоотправитель,
	|	КорректировкаРеализацииАвтомобилей.Грузополучатель,
	|	КорректировкаРеализацииАвтомобилей.Руководитель,
	|	КорректировкаРеализацииАвтомобилей.ГлавныйБухгалтер,
	|	КорректировкаРеализацииАвтомобилей.Отпустил,
	|	КорректировкаРеализацииАвтомобилей.Получил,
	|	КорректировкаРеализацииАвтомобилей.ВалютаДокумента,
	|	КорректировкаРеализацииАвтомобилей.Комментарий,
	|	КорректировкаРеализацииАвтомобилей.Организация,
	|	КорректировкаРеализацииАвтомобилей.ПодразделениеКомпании,
	|	КорректировкаРеализацииАвтомобилей.Проект,
	|	КорректировкаРеализацииАвтомобилей.СуммаДокумента
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей КАК КорректировкаРеализацииАвтомобилей
	|ГДЕ
	|	КорректировкаРеализацииАвтомобилей.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти