#Область СлужебныйПрограммныйИнтерфейс

// Сериализует переданную структуру в строку JSON.
// В случае ошибки генерирует исключение.
//
// Параметры:
//  Объект - Произвольный - Сериализуемый объект
// 
// Возвращаемое значение:
//  Строка - Строка в формате JSON
//
Функция СобратьJSON(Знач Объект) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	
	ЗаписатьJSON(Запись, Объект);
	
	Возврат Запись.Закрыть();
	
КонецФункции

// Десериализует переданную строку в структуру или соответствие.
// В случае ошибки генерирует исключение.
//
// Параметры:
//  СтрокаJSON		 - Строка	 - Строка в формате JSON.
//  ВСоответствие	 - Булево	 - Признак преобразования в соответствие.
// 
// Возвращаемое значение:
//  Произвольный - Десериализованный объект.
//
Функция РазобратьJSON(Знач СтрокаJSON, Знач ВСоответствие = Ложь) Экспорт
	
	Если СтрокаJSON = "" Тогда
		
		Если ВСоответствие Тогда
			Возврат Новый Соответствие();
		КонецЕсли;
		
		Возврат Новый Структура();
		
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(СтрокаJSON);
	
	Результат = ПрочитатьJSON(Чтение, ВСоответствие);
	
	Чтение.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Получает XML представление значения для помещения в текст элемента или значение атрибута XML.
// XML представление зависит от типа значения:
//  - Строка - как есть;
//  - Булево: Истина - как "true", Ложь - как "false";
//  - Дата - XML представление соответствует представлению типа dateTime схемы XML
//           (см. http://www.w3.org/TR/xmlschema-2/#dateTime);
//  - Число - XML представление соответствует представлению типа decimal схемы XML
//            (см. http://www.w3.org/TR/xmlschema-2/#decimal);
//  - Значение системного перечисления - как имя значения перечисления;
//  - УникальныйИдентификатор - как строковое представление уникального идентификатора;
//  - &Ссылки - как XML представление уникального идентификатора ссылки;
//  - ХранилищеЗначения и ДвоичныеДанные - как строка в формате base64.
// 
// Параметры:
//  Значение - Произвольный - Значение, для которого должно быть получено строковое представление,
//                            которое может быть использовано как текст элемента или значение атрибута XML.
// 
// Возвращаемое значение:
//  Строка -
Функция ВXMLСтроку(Значение) Экспорт
	
	Возврат XMLСтрока(Значение);
	
КонецФункции

// Скачать файл.
// 
// Параметры:
//  URL - Строка - URL к файлу
//  НастройкаСохранения - Структура -  Настройка сохранения:
//  * МестоХранения - Строка - Доступные значения "ВременноеХранилище" или "Сервер" 
//  * КлючУникальности - Неопределено, УникальныйИдентификатор - 
//  Заголовки - Структура -  Заголовки
// 
// Возвращаемое значение:
//  Строка - Путь к файлу на сервере или адрес временного хранилища
Функция СкачатьФайл(Знач URL, НастройкаСохранения = Неопределено, Заголовки = Неопределено) Экспорт
	
	Соединение = HTTPТранспортПЭПКлиентСервер.СоздатьСоединениеНаОснованииURL(URL);
	URL = HTTPТранспортПЭПКлиентСервер.СтруктураURI(URL);
	
	Если Заголовки <> Неопределено Тогда
		Запрос = Новый HTTPЗапрос(URL.ПутьНаСервере, Заголовки);
	Иначе
		Запрос = Новый HTTPЗапрос(URL.ПутьНаСервере);
	КонецЕсли;
	
	//@skip-check missing-temporary-file-deletion - Временный файл должен удаляться вызывающим кодом.
	ПутьДляСохранения = ПолучитьИмяВременногоФайла();
	
	Ответ = Соединение.Получить(Запрос, ПутьДляСохранения);
	
	Если Ответ.КодСостояния = 302 Тогда
		
		// Должен быть заголовок ответа Location со ссылкой на ресурс.
		НоваяСсылка = Ответ.Заголовки.Получить("Location");
		
		Если НоваяСсылка = Неопределено Тогда
			
			ВызватьИсключение НСтр("ru='Не удалось получить файл, т.к. сервер не вернул валидный URL'");
			
		КонецЕсли;
		
		Соединение = HTTPТранспортПЭПКлиентСервер.СоздатьСоединениеНаОснованииURL(НоваяСсылка);
		СтруктураURL = HTTPТранспортПЭПКлиентСервер.СтруктураURI(НоваяСсылка);
		
		Если Заголовки <> Неопределено Тогда
			
			РедиректЗапрос = Новый HTTPЗапрос(СтруктураURL.ПутьНаСервере, Заголовки);
			
		Иначе
			
			РедиректЗапрос = Новый HTTPЗапрос(СтруктураURL.ПутьНаСервере);
			
		КонецЕсли;
		
		Ответ = Соединение.Получить(РедиректЗапрос, ПутьДляСохранения);
		
	КонецЕсли;
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		Возврат Неопределено; // не удалось получить файл
		
	КонецЕсли;
	
	Если НастройкаСохранения["МестоХранения"] = "ВременноеХранилище" Тогда
		
		Если НастройкаСохранения["КлючУникальности"] <> Неопределено Тогда
			
			КлючУникальности = НастройкаСохранения["КлючУникальности"];
			
		Иначе
			
			КлючУникальности = Новый УникальныйИдентификатор;
			
		КонецЕсли;
		
		Адрес = ПоместитьВоВременноеХранилище (Новый ДвоичныеДанные(ПутьДляСохранения), КлючУникальности);
		УдалитьФайлы(ПутьДляСохранения);
		Возврат Адрес;
		
	ИначеЕсли НастройкаСохранения["МестоХранения"] = "Сервер" Тогда
		
		Возврат ПутьДляСохранения;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не указано место для сохранения файла.'");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
